BLEU SCORE: 0.0011392542366888657

TEST MSG: SSTable tools mishandling LocalPartitioner
GENERATED MSG: switch to reading schema configuration from storage . Patch by Gary Dusbabek , reviewed by Jonthan Ellis . CASSANDRA - 827

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 3d8d511 . . a0f7c56 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 8 <nl> + * SSTable tools mishandling LocalPartitioner ( CASSANDRA - 12002 ) <nl> * When SEPWorker assigned work , set thread name to match pool ( CASSANDRA - 11966 ) <nl> * Add cross - DC latency metrics ( CASSANDRA - 11596 ) <nl> * Allow terms in selection clause ( CASSANDRA - 10783 ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / SSTableExport . java b / src / java / org / apache / cassandra / tools / SSTableExport . java <nl> index 09dbbed . . cc6b84b 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / SSTableExport . java <nl> + + + b / src / java / org / apache / cassandra / tools / SSTableExport . java <nl> @ @ - 98 , 14 + 98 , 10 @ @ public class SSTableExport <nl> if ( ! desc . version . storeRows ( ) ) <nl> throw new IOException ( " pre - 3 . 0 SSTable is not supported . " ) ; <nl> <nl> - EnumSet < MetadataType > types = EnumSet . of ( MetadataType . VALIDATION , MetadataType . STATS , MetadataType . HEADER ) ; <nl> + EnumSet < MetadataType > types = EnumSet . of ( MetadataType . STATS , MetadataType . HEADER ) ; <nl> Map < MetadataType , MetadataComponent > sstableMetadata = desc . getMetadataSerializer ( ) . deserialize ( desc , types ) ; <nl> - ValidationMetadata validationMetadata = ( ValidationMetadata ) sstableMetadata . get ( MetadataType . VALIDATION ) ; <nl> SerializationHeader . Component header = ( SerializationHeader . Component ) sstableMetadata . get ( MetadataType . HEADER ) ; <nl> - <nl> - IPartitioner partitioner = SecondaryIndexManager . isIndexColumnFamily ( desc . cfname ) <nl> - ? new LocalPartitioner ( header . getKeyType ( ) ) <nl> - : FBUtilities . newPartitioner ( validationMetadata . partitioner ) ; <nl> + IPartitioner partitioner = FBUtilities . newPartitioner ( desc ) ; <nl> <nl> CFMetaData . Builder builder = CFMetaData . Builder . create ( " keyspace " , " table " ) . withPartitioner ( partitioner ) ; <nl> header . getStaticColumns ( ) . entrySet ( ) . stream ( ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java <nl> index ef53087 . . 3c8ba64 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java <nl> + + + b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java <nl> @ @ - 92 , 7 + 92 , 7 @ @ public class SSTableMetadataViewer <nl> out . printf ( " TTL max : % s % n " , stats . maxTTL ) ; <nl> <nl> if ( validation ! = null & & header ! = null ) <nl> - printMinMaxToken ( descriptor , FBUtilities . newPartitioner ( validation . partitioner ) , header . getKeyType ( ) , out ) ; <nl> + printMinMaxToken ( descriptor , FBUtilities . newPartitioner ( descriptor ) , header . getKeyType ( ) , out ) ; <nl> <nl> if ( header ! = null & & header . getClusteringTypes ( ) . size ( ) = = stats . minClusteringValues . size ( ) ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> index 76178ad . . af2cb1b 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ import java . util . zip . Checksum ; <nl> import javax . annotation . Nonnull ; <nl> import javax . annotation . Nullable ; <nl> <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . base . Joiner ; <nl> import org . apache . commons . lang3 . StringUtils ; <nl> import org . slf4j . Logger ; <nl> @ @ - 42 , 11 + 43 , 18 @ @ import org . apache . cassandra . auth . IAuthorizer ; <nl> import org . apache . cassandra . auth . IRoleManager ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . DecoratedKey ; <nl> + import org . apache . cassandra . db . SerializationHeader ; <nl> + import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> + import org . apache . cassandra . dht . LocalPartitioner ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . dht . Token ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . io . IVersionedSerializer ; <nl> + import org . apache . cassandra . io . sstable . Descriptor ; <nl> + import org . apache . cassandra . io . sstable . metadata . MetadataComponent ; <nl> + import org . apache . cassandra . io . sstable . metadata . MetadataType ; <nl> + import org . apache . cassandra . io . sstable . metadata . ValidationMetadata ; <nl> import org . apache . cassandra . schema . CompressionParams ; <nl> import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> import org . apache . cassandra . io . util . DataOutputBufferFixed ; <nl> @ @ - 395 , 10 + 403 , 37 @ @ public class FBUtilities <nl> result . get ( ms , TimeUnit . MILLISECONDS ) ; <nl> } <nl> <nl> + / * * <nl> + * Create a new instance of a partitioner defined in an SSTable Descriptor <nl> + * @ param desc Descriptor of an sstable <nl> + * @ return a new IPartitioner instance <nl> + * @ throws IOException <nl> + * / <nl> + public static IPartitioner newPartitioner ( Descriptor desc ) throws IOException <nl> + { <nl> + EnumSet < MetadataType > types = EnumSet . of ( MetadataType . VALIDATION , MetadataType . HEADER ) ; <nl> + Map < MetadataType , MetadataComponent > sstableMetadata = desc . getMetadataSerializer ( ) . deserialize ( desc , types ) ; <nl> + ValidationMetadata validationMetadata = ( ValidationMetadata ) sstableMetadata . get ( MetadataType . VALIDATION ) ; <nl> + SerializationHeader . Component header = ( SerializationHeader . Component ) sstableMetadata . get ( MetadataType . HEADER ) ; <nl> + return newPartitioner ( validationMetadata . partitioner , Optional . of ( header . getKeyType ( ) ) ) ; <nl> + } <nl> + <nl> public static IPartitioner newPartitioner ( String partitionerClassName ) throws ConfigurationException <nl> { <nl> + return newPartitioner ( partitionerClassName , Optional . empty ( ) ) ; <nl> + } <nl> + <nl> + @ VisibleForTesting <nl> + static IPartitioner newPartitioner ( String partitionerClassName , Optional < AbstractType < ? > > comparator ) throws ConfigurationException <nl> + { <nl> if ( ! partitionerClassName . contains ( " . " ) ) <nl> partitionerClassName = " org . apache . cassandra . dht . " + partitionerClassName ; <nl> + <nl> + if ( partitionerClassName . equals ( " org . apache . cassandra . dht . LocalPartitioner " ) ) <nl> + { <nl> + assert comparator . isPresent ( ) : " Expected a comparator for local partitioner " ; <nl> + return new LocalPartitioner ( comparator . get ( ) ) ; <nl> + } <nl> return FBUtilities . instanceOrConstruct ( partitionerClassName , " partitioner " ) ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / utils / FBUtilitiesTest . java b / test / unit / org / apache / cassandra / utils / FBUtilitiesTest . java <nl> index 90c5f05 . . 3c1ea74 100644 <nl> - - - a / test / unit / org / apache / cassandra / utils / FBUtilitiesTest . java <nl> + + + b / test / unit / org / apache / cassandra / utils / FBUtilitiesTest . java <nl> @ @ - 1 , 4 + 1 , 4 @ @ <nl> - / * * <nl> + / * <nl> * Licensed to the Apache Software Foundation ( ASF ) under one <nl> * or more contributor license agreements . See the NOTICE file <nl> * distributed with this work for additional information <nl> @ @ - 22 , 12 + 22 , 17 @ @ import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> import java . nio . charset . CharacterCodingException ; <nl> import java . nio . charset . StandardCharsets ; <nl> + import java . util . Map ; <nl> + import java . util . Optional ; <nl> + import java . util . TreeMap ; <nl> <nl> import com . google . common . primitives . Ints ; <nl> + <nl> + import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> - import java . util . Map ; <nl> - import java . util . TreeMap ; <nl> + import org . apache . cassandra . db . marshal . * ; <nl> + import org . apache . cassandra . dht . * ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . fail ; <nl> @ @ - 95 , 4 + 100 , 51 @ @ public class FBUtilitiesTest <nl> ByteBuffer bytes = ByteBuffer . wrap ( new byte [ ] { ( byte ) 0xff , ( byte ) 0xfe } ) ; <nl> ByteBufferUtil . string ( bytes , StandardCharsets . UTF _ 8 ) ; <nl> } <nl> + <nl> + private static void assertPartitioner ( String name , Class expected ) <nl> + { <nl> + Assert . assertTrue ( String . format ( " % s ! = % s " , name , expected . toString ( ) ) , <nl> + expected . isInstance ( FBUtilities . newPartitioner ( name ) ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Check that given a name , the correct partitioner instance is created . <nl> + * <nl> + * If the assertions in this test start failing , it likely means the sstabledump / sstablemetadata tools will <nl> + * also fail to read existing sstables . <nl> + * / <nl> + @ Test <nl> + public void testNewPartitionerNoArgConstructors ( ) <nl> + { <nl> + assertPartitioner ( " ByteOrderedPartitioner " , ByteOrderedPartitioner . class ) ; <nl> + assertPartitioner ( " LengthPartitioner " , LengthPartitioner . class ) ; <nl> + assertPartitioner ( " Murmur3Partitioner " , Murmur3Partitioner . class ) ; <nl> + assertPartitioner ( " OrderPreservingPartitioner " , OrderPreservingPartitioner . class ) ; <nl> + assertPartitioner ( " RandomPartitioner " , RandomPartitioner . class ) ; <nl> + assertPartitioner ( " org . apache . cassandra . dht . ByteOrderedPartitioner " , ByteOrderedPartitioner . class ) ; <nl> + assertPartitioner ( " org . apache . cassandra . dht . LengthPartitioner " , LengthPartitioner . class ) ; <nl> + assertPartitioner ( " org . apache . cassandra . dht . Murmur3Partitioner " , Murmur3Partitioner . class ) ; <nl> + assertPartitioner ( " org . apache . cassandra . dht . OrderPreservingPartitioner " , OrderPreservingPartitioner . class ) ; <nl> + assertPartitioner ( " org . apache . cassandra . dht . RandomPartitioner " , RandomPartitioner . class ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Check that we can instantiate local partitioner correctly and that we can pass the correct type <nl> + * to it as a constructor argument . <nl> + * <nl> + * If the assertions in this test start failing , it likely means the sstabledump / sstablemetadata tools will <nl> + * also fail to read existing sstables . <nl> + * / <nl> + @ Test <nl> + public void testNewPartitionerLocalPartitioner ( ) <nl> + { <nl> + for ( String name : new String [ ] { " LocalPartitioner " , " org . apache . cassandra . dht . LocalPartitioner " } ) <nl> + for ( AbstractType < ? > type : new AbstractType < ? > [ ] { UUIDType . instance , ListType . getInstance ( Int32Type . instance , true ) } ) <nl> + { <nl> + IPartitioner partitioner = FBUtilities . newPartitioner ( name , Optional . of ( type ) ) ; <nl> + Assert . assertTrue ( String . format ( " % s ! = LocalPartitioner " , partitioner . toString ( ) ) , <nl> + LocalPartitioner . class . isInstance ( partitioner ) ) ; <nl> + Assert . assertEquals ( partitioner . partitionOrdering ( ) , type ) ; <nl> + } <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / avro / CassandraDaemon . java b / src / java / org / apache / cassandra / avro / CassandraDaemon . java <nl> index f06c829 . . e378687 100644 <nl> - - - a / src / java / org / apache / cassandra / avro / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / avro / CassandraDaemon . java <nl> @ @ - 75 , 6 + 75 , 16 @ @ public class CassandraDaemon { <nl> } <nl> } <nl> } ) ; <nl> + <nl> + try <nl> + { <nl> + DatabaseDescriptor . loadSchemas ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + logger . error ( " Fatal exception during initialization " , e ) ; <nl> + System . exit ( 100 ) ; <nl> + } <nl> <nl> / / initialize keyspaces <nl> for ( String table : DatabaseDescriptor . getTables ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 506fe68 . . 144437b 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 31 , 7 + 31 , 9 @ @ import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . locator . IEndPointSnitch ; <nl> import org . apache . cassandra . locator . AbstractReplicationStrategy ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> + import org . apache . cassandra . utils . UUIDGen ; <nl> import org . apache . cassandra . utils . XMLUtils ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 482 , 27 + 484 , 18 @ @ public class DatabaseDescriptor <nl> } ; <nl> KSMetaData systemMeta = new KSMetaData ( Table . SYSTEM _ TABLE , null , - 1 , null , systemCfDefs ) ; <nl> tables . put ( Table . SYSTEM _ TABLE , systemMeta ) ; <nl> - <nl> - / / todo : if tables are defined in the system store , use those . load from xml otherwise . <nl> - readTablesFromXml ( ) ; <nl> - <nl> - / / todo : fill in repStrat and epSnitch when this table is set to replicate . <nl> + <nl> CFMetaData [ ] definitionCfDefs = new CFMetaData [ ] <nl> { <nl> new CFMetaData ( Table . DEFINITIONS , Migration . MIGRATIONS _ CF , " Standard " , new TimeUUIDType ( ) , null , " individual schema mutations " , 0 , 0 ) , <nl> new CFMetaData ( Table . DEFINITIONS , Migration . SCHEMA _ CF , " Standard " , new UTF8Type ( ) , null , " current state of the schema " , 0 , 0 ) <nl> } ; <nl> - KSMetaData ksDefs = new KSMetaData ( Table . DEFINITIONS , null , - 1 , null , definitionCfDefs ) ; <nl> - tables . put ( Table . DEFINITIONS , ksDefs ) ; <nl> + tables . put ( Table . DEFINITIONS , new KSMetaData ( Table . DEFINITIONS , null , - 1 , null , definitionCfDefs ) ) ; <nl> <nl> / / NOTE : make sure that all system CFMs defined by now . calling fixMaxId at this point will set the base id <nl> / / to a value that leaves room for future system cfms . <nl> CFMetaData . fixMaxId ( ) ; <nl> <nl> - / / todo : if tables are defined in the system store , use those . load from xml otherwise . <nl> - readTablesFromXml ( ) ; <nl> - CFMetaData . fixMaxId ( ) ; <nl> - <nl> / * Load the seeds for node contact points * / <nl> String [ ] seedsxml = xmlUtils . getNodeValues ( " / Storage / Seeds / Seed " ) ; <nl> if ( seedsxml . length < = 0 ) <nl> @ @ - 525 , 8 + 518 , 43 @ @ public class DatabaseDescriptor <nl> throw new RuntimeException ( e ) ; <nl> } <nl> } <nl> + <nl> + public static void loadSchemas ( ) throws IOException <nl> + { <nl> + / / we can load tables from local storage if a version is set in the system table and that acutally maps to <nl> + / / real data in the definitions table . If we do end up loading from xml , store the defintions so that we <nl> + / / don ' t load from xml anymore . <nl> + UUID uuid = Migration . getLastMigrationId ( ) ; <nl> + if ( uuid = = null ) <nl> + logger . warn ( " Couldn ' t detect any schema definitions in local storage . I hope you ' ve got a plan . " ) ; <nl> + else <nl> + { <nl> + logger . info ( " Loading schema version " + uuid . toString ( ) ) ; <nl> + Collection < KSMetaData > tableDefs = DefsTable . loadFromStorage ( uuid ) ; <nl> + for ( KSMetaData def : tableDefs ) <nl> + { <nl> + DatabaseDescriptor . setTableDefinition ( def , uuid ) ; <nl> + / / this part creates storage and jmx objects . <nl> + Table . open ( def . name ) ; <nl> + } <nl> + <nl> + / / since we loaded definitions from local storage , log a warning if definitions exist in xml . <nl> + try <nl> + { <nl> + XMLUtils xmlUtils = new XMLUtils ( configFileName ) ; <nl> + NodeList tablesxml = xmlUtils . getRequestedNodeList ( " / Storage / Keyspaces / Keyspace " ) ; <nl> + if ( tablesxml . getLength ( ) > 0 ) <nl> + logger . warn ( " Schema definitions were defined both locally and in storage - conf . xml . Definitions in storage - conf . xml were ignored . " ) ; <nl> + } <nl> + catch ( Exception ex ) <nl> + { <nl> + logger . warn ( " Problem checking for schema defintions in xml " , ex ) ; <nl> + } <nl> + } <nl> + CFMetaData . fixMaxId ( ) ; <nl> + } <nl> <nl> - private static void readTablesFromXml ( ) throws ConfigurationException <nl> + public static void readTablesFromXml ( ) throws ConfigurationException <nl> { <nl> XMLUtils xmlUtils = null ; <nl> try <nl> @ @ - 730 , 6 + 758 , 8 @ @ public class DatabaseDescriptor <nl> ex . initCause ( e ) ; <nl> throw ex ; <nl> } <nl> + if ( DatabaseDescriptor . listenAddress ! = null ) <nl> + defsVersion = UUIDGen . makeType1UUIDFromHost ( FBUtilities . getLocalAddress ( ) ) ; <nl> } <nl> <nl> public static IAuthenticator getAuthenticator ( ) <nl> @ @ - 1118 , 10 + 1148 , 9 @ @ public class DatabaseDescriptor <nl> / / process of mutating an individual keyspace , rather than setting manually here . <nl> public static void setTableDefinition ( KSMetaData ksm , UUID newVersion ) <nl> { <nl> - / / at some point , this assert will be valid , because defsVersion _ will be set when the table defs are loaded . <nl> - / / assert newVersion ! = null & & ! newVersion . equals ( defsVersion _ ) & & defsVersion _ . compareTo ( newVersion ) < 0 ; <nl> tables . put ( ksm . name , ksm ) ; <nl> DatabaseDescriptor . defsVersion = newVersion ; <nl> + StorageService . instance . initReplicationStrategy ( ksm . name ) ; <nl> } <nl> <nl> public static void clearTableDefinition ( KSMetaData ksm , UUID newVersion ) <nl> diff - - git a / src / java / org / apache / cassandra / db / DefsTable . java b / src / java / org / apache / cassandra / db / DefsTable . java <nl> index b02ad44 . . 6c63ec6 100644 <nl> - - - a / src / java / org / apache / cassandra / db / DefsTable . java <nl> + + + b / src / java / org / apache / cassandra / db / DefsTable . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import org . apache . cassandra . db . filter . QueryFilter ; <nl> import org . apache . cassandra . db . filter . QueryPath ; <nl> import org . apache . cassandra . db . filter . SliceQueryFilter ; <nl> import org . apache . cassandra . db . migration . Migration ; <nl> + import org . apache . cassandra . utils . UUIDGen ; <nl> <nl> import java . io . ByteArrayInputStream ; <nl> import java . io . File ; <nl> @ @ - 50 , 6 + 51 , 10 @ @ public class DefsTable <nl> rm . add ( new QueryPath ( Migration . SCHEMA _ CF , null , ks . name . getBytes ( ) ) , KSMetaData . serialize ( ks ) , now ) ; <nl> } <nl> rm . apply ( ) ; <nl> + <nl> + rm = new RowMutation ( Table . DEFINITIONS , Migration . LAST _ MIGRATION _ KEY ) ; <nl> + rm . add ( new QueryPath ( Migration . SCHEMA _ CF , null , Migration . LAST _ MIGRATION _ KEY . getBytes ( ) ) , UUIDGen . decompose ( version ) , now ) ; <nl> + rm . apply ( ) ; <nl> } <nl> <nl> / * * loads a version of keyspace definitions from storage * / <nl> diff - - git a / src / java / org / apache / cassandra / db / migration / Migration . java b / src / java / org / apache / cassandra / db / migration / Migration . java <nl> index 718b052 . . d6b315b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / migration / Migration . java <nl> + + + b / src / java / org / apache / cassandra / db / migration / Migration . java <nl> @ @ - 145 , 7 + 145 , 7 @ @ public abstract class Migration <nl> ColumnFamilyStore cfStore = defs . getColumnFamilyStore ( SCHEMA _ CF ) ; <nl> QueryFilter filter = QueryFilter . getNamesFilter ( LAST _ MIGRATION _ KEY , new QueryPath ( SCHEMA _ CF ) , LAST _ MIGRATION _ KEY . getBytes ( ) ) ; <nl> ColumnFamily cf = cfStore . getColumnFamily ( filter ) ; <nl> - if ( cf . getColumnNames ( ) . size ( ) = = 0 ) <nl> + if ( cf = = null | | cf . getColumnNames ( ) . size ( ) = = 0 ) <nl> return null ; <nl> else <nl> return UUIDGen . makeType1UUID ( cf . getColumn ( LAST _ MIGRATION _ KEY . getBytes ( ) ) . value ( ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 52f25b2 . . 4a4da3a 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 33 , 9 + 33 , 11 @ @ import javax . management . * ; <nl> <nl> import com . google . common . collect . Multimaps ; <nl> import org . apache . cassandra . concurrent . * ; <nl> + import org . apache . cassandra . config . ConfigurationException ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . commitlog . CommitLog ; <nl> + import org . apache . cassandra . db . migration . Migration ; <nl> import org . apache . cassandra . dht . * ; <nl> import org . apache . cassandra . gms . * ; <nl> import org . apache . cassandra . io . DeletionService ; <nl> @ @ - 47 , 6 + 49 , 7 @ @ import org . apache . cassandra . streaming . * ; <nl> import org . apache . cassandra . thrift . ConsistencyLevel ; <nl> import org . apache . cassandra . thrift . UnavailableException ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> + import org . apache . cassandra . utils . UUIDGen ; <nl> import org . apache . cassandra . utils . WrappedRunnable ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> <nl> @ @ - 1568 , 7 + 1571 , 39 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe <nl> <nl> setMode ( " Node is drained " , true ) ; <nl> } <nl> - <nl> + <nl> + / * * <nl> + * load schema from xml . This can only be done on a fresh system . <nl> + * @ throws ConfigurationException <nl> + * @ throws IOException <nl> + * / <nl> + public void loadSchemaFromXML ( ) throws ConfigurationException , IOException <nl> + { <nl> + / / blow up if there is a schema saved . <nl> + if ( DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) > 0 | | Migration . getLastMigrationId ( ) ! = null ) <nl> + throw new ConfigurationException ( " Cannot load from XML on top of pre - existing schemas . " ) ; <nl> + DatabaseDescriptor . readTablesFromXml ( ) ; <nl> + assert DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) > 0 ; <nl> + DefsTable . dumpToStorage ( DatabaseDescriptor . getDefsVersion ( ) ) ; <nl> + / / flush system and definition tables . <nl> + Collection < Future > flushers = new ArrayList < Future > ( ) ; <nl> + flushers . addAll ( Table . open ( Table . SYSTEM _ TABLE ) . flush ( ) ) ; <nl> + flushers . addAll ( Table . open ( Table . DEFINITIONS ) . flush ( ) ) ; <nl> + for ( Future f : flushers ) <nl> + { <nl> + try <nl> + { <nl> + f . get ( ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + ConfigurationException ce = new ConfigurationException ( e . getMessage ( ) ) ; <nl> + ce . initCause ( e ) ; <nl> + throw ce ; <nl> + } <nl> + } <nl> + <nl> + } <nl> <nl> / / Never ever do this at home . Used by tests . <nl> Map < String , AbstractReplicationStrategy > setReplicationStrategyUnsafe ( Map < String , AbstractReplicationStrategy > replacement ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index 48e0097 . . a4eb1c6 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . util . Set ; <nl> import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . FutureTask ; <nl> <nl> + import org . apache . cassandra . config . ConfigurationException ; <nl> import org . apache . cassandra . dht . Range ; <nl> import java . net . InetAddress ; <nl> <nl> @ @ - 169 , 4 + 170 , 10 @ @ public interface StorageServiceMBean <nl> <nl> / * * makes node unavailable for writes , flushes memtables and replays commitlog . * / <nl> public void drain ( ) throws IOException , InterruptedException , ExecutionException ; <nl> + <nl> + / * * <nl> + * Introduced in 0 . 7 to allow nodes to load their existing xml defined schemas . <nl> + * @ todo : deprecate in 0 . 7 + 1 , remove in 0 . 7 + 2 . <nl> + * / <nl> + public void loadSchemaFromXML ( ) throws ConfigurationException , IOException ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java <nl> index 915c5c6 . . 06eb70c 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . io . IOException ; <nl> import java . net . InetSocketAddress ; <nl> import java . net . InetAddress ; <nl> <nl> + import org . apache . cassandra . config . ConfigurationException ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 85 , 6 + 86 , 16 @ @ public class CassandraDaemon <nl> } <nl> } ) ; <nl> <nl> + try <nl> + { <nl> + DatabaseDescriptor . loadSchemas ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + logger . error ( " Fatal exception during initialization " , e ) ; <nl> + System . exit ( 100 ) ; <nl> + } <nl> + <nl> / / initialize keyspaces <nl> for ( String table : DatabaseDescriptor . getTables ( ) ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / CleanupHelper . java b / test / unit / org / apache / cassandra / CleanupHelper . java <nl> index 0a2e986 . . d1c805f 100644 <nl> - - - a / test / unit / org / apache / cassandra / CleanupHelper . java <nl> + + + b / test / unit / org / apache / cassandra / CleanupHelper . java <nl> @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . io . util . FileUtils ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - public class CleanupHelper <nl> + public class CleanupHelper extends SchemaLoader <nl> { <nl> private static Logger logger = LoggerFactory . getLogger ( CleanupHelper . class ) ; <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / SchemaLoader . java b / test / unit / org / apache / cassandra / SchemaLoader . java <nl> new file mode 100644 <nl> index 0000000 . . 73add5a <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / SchemaLoader . java <nl> @ @ - 0 , 0 + 1 , 41 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * < p / > <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * < p / > <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra ; <nl> + <nl> + import org . apache . cassandra . config . ConfigurationException ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . junit . BeforeClass ; <nl> + <nl> + public class SchemaLoader <nl> + { <nl> + / / todo : when xml is fully deprecated , this method should be changed to manually load a few table definitions into <nl> + / / the definitions keyspace . <nl> + @ BeforeClass <nl> + public static void loadSchemaFromXml ( ) <nl> + { <nl> + try <nl> + { <nl> + DatabaseDescriptor . readTablesFromXml ( ) ; <nl> + } <nl> + catch ( ConfigurationException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / db / ColumnFamilyTest . java b / test / unit / org / apache / cassandra / db / ColumnFamilyTest . java <nl> index dede3b7 . . d5639a8 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / ColumnFamilyTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / ColumnFamilyTest . java <nl> @ @ - 24 , 13 + 24 , 14 @ @ import java . io . IOException ; <nl> import java . util . Arrays ; <nl> import java . util . TreeMap ; <nl> <nl> + import org . apache . cassandra . SchemaLoader ; <nl> import org . junit . Test ; <nl> <nl> import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> import org . apache . cassandra . db . filter . QueryPath ; <nl> import static org . apache . cassandra . Util . column ; <nl> <nl> - public class ColumnFamilyTest <nl> + public class ColumnFamilyTest extends SchemaLoader <nl> { <nl> / / TODO test SuperColumns <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / db / DefsTest . java b / test / unit / org / apache / cassandra / db / DefsTest . java <nl> index 5ab31ba . . 1df2c79 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / DefsTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / DefsTest . java <nl> @ @ - 59 , 12 + 59 , 6 @ @ import java . util . concurrent . ExecutionException ; <nl> <nl> public class DefsTest extends CleanupHelper <nl> { <nl> - @ Before <nl> - public void setup ( ) <nl> - { <nl> - / / just something to ensure that DD has been initialized . <nl> - DatabaseDescriptor . getNonSystemTables ( ) ; <nl> - } <nl> <nl> @ Test <nl> public void saveAndRestore ( ) throws IOException <nl> @ @ - 105 , 10 + 99 , 10 @ @ public class DefsTest extends CleanupHelper <nl> public void testMigrations ( ) throws IOException , ConfigurationException <nl> { <nl> / / do a save . make sure it doesn ' t mess with the defs version . <nl> - assert DatabaseDescriptor . getDefsVersion ( ) = = null ; <nl> + UUID prior = DatabaseDescriptor . getDefsVersion ( ) ; <nl> UUID ver0 = UUIDGen . makeType1UUIDFromHost ( FBUtilities . getLocalAddress ( ) ) ; <nl> DefsTable . dumpToStorage ( ver0 ) ; <nl> - assert DatabaseDescriptor . getDefsVersion ( ) = = null ; <nl> + assert DatabaseDescriptor . getDefsVersion ( ) . equals ( prior ) ; <nl> <nl> / / add a cf . <nl> CFMetaData newCf1 = new CFMetaData ( " Keyspace1 " , " MigrationCf _ 1 " , " Standard " , new UTF8Type ( ) , null , " Migration CF " , 0 , 0 ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / ReadMessageTest . java b / test / unit / org / apache / cassandra / db / ReadMessageTest . java <nl> index 8597fc2 . . 13ee6a9 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / ReadMessageTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / ReadMessageTest . java <nl> @ @ - 26 , 13 + 26 , 14 @ @ import java . io . IOException ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> <nl> + import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . commons . lang . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> import org . apache . cassandra . db . filter . QueryPath ; <nl> import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> <nl> - public class ReadMessageTest <nl> + public class ReadMessageTest extends SchemaLoader <nl> { <nl> @ Test <nl> public void testMakeReadMessage ( ) throws IOException <nl> diff - - git a / test / unit / org / apache / cassandra / db / RowTest . java b / test / unit / org / apache / cassandra / db / RowTest . java <nl> index b578d17 . . 5618970 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RowTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RowTest . java <nl> @ @ - 20 , 13 + 20 , 14 @ @ package org . apache . cassandra . db ; <nl> <nl> import java . util . Arrays ; <nl> <nl> + import org . apache . cassandra . SchemaLoader ; <nl> import org . junit . Test ; <nl> <nl> import static junit . framework . Assert . assertEquals ; <nl> import org . apache . cassandra . db . marshal . AsciiType ; <nl> import static org . apache . cassandra . Util . column ; <nl> <nl> - public class RowTest <nl> + public class RowTest extends SchemaLoader <nl> { <nl> @ Test <nl> public void testDiffColumnFamily ( ) <nl> diff - - git a / test / unit / org / apache / cassandra / db / commitlog / CommitLogHeaderTest . java b / test / unit / org / apache / cassandra / db / commitlog / CommitLogHeaderTest . java <nl> index 5da38d0 . . b0bdae7 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / commitlog / CommitLogHeaderTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / commitlog / CommitLogHeaderTest . java <nl> @ @ - 20 , 7 + 20 , 9 @ @ package org . apache . cassandra . db . commitlog ; <nl> <nl> import com . google . common . collect . HashMultimap ; <nl> import com . google . common . collect . Multimap ; <nl> + import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> + import org . apache . cassandra . config . ConfigurationException ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . utils . Pair ; <nl> import org . junit . Before ; <nl> @ @ - 34 , 14 + 36 , 8 @ @ import java . util . Collection ; <nl> import java . util . Collections ; <nl> import java . util . Map ; <nl> <nl> - public class CommitLogHeaderTest <nl> + public class CommitLogHeaderTest extends SchemaLoader <nl> { <nl> - @ Before <nl> - public void setup ( ) <nl> - { <nl> - / / data definitions must be loaded . <nl> - DatabaseDescriptor . getTables ( ) ; <nl> - } <nl> <nl> @ Test <nl> public void testEmptyHeader ( ) <nl> diff - - git a / test / unit / org / apache / cassandra / locator / RackUnawareStrategyTest . java b / test / unit / org / apache / cassandra / locator / RackUnawareStrategyTest . java <nl> index 973e762 . . 913351d 100644 <nl> - - - a / test / unit / org / apache / cassandra / locator / RackUnawareStrategyTest . java <nl> + + + b / test / unit / org / apache / cassandra / locator / RackUnawareStrategyTest . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . util . List ; <nl> import java . util . ArrayList ; <nl> import java . util . Collection ; <nl> <nl> + import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . gms . ApplicationState ; <nl> import org . apache . cassandra . service . StorageServiceAccessor ; <nl> @ @ - 40 , 7 + 41 , 7 @ @ import org . apache . cassandra . service . StorageService ; <nl> import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> <nl> - public class RackUnawareStrategyTest <nl> + public class RackUnawareStrategyTest extends SchemaLoader <nl> { <nl> @ Test <nl> public void tryBogusTable ( ) <nl> diff - - git a / test / unit / org / apache / cassandra / service / EmbeddedCassandraServiceTest . java b / test / unit / org / apache / cassandra / service / EmbeddedCassandraServiceTest . java <nl> index 512f522 . . 58904ee 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / EmbeddedCassandraServiceTest . java <nl> + + + b / test / unit / org / apache / cassandra / service / EmbeddedCassandraServiceTest . java <nl> @ @ - 24 , 6 + 24 , 8 @ @ import static org . junit . Assert . assertNotNull ; <nl> import java . io . IOException ; <nl> import java . io . UnsupportedEncodingException ; <nl> <nl> + import org . apache . cassandra . config . ConfigurationException ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . thrift . Cassandra ; <nl> import org . apache . cassandra . thrift . ColumnOrSuperColumn ; <nl> import org . apache . cassandra . thrift . ColumnPath ; <nl> @ @ - 62 , 12 + 64 , 13 @ @ public class EmbeddedCassandraServiceTest <nl> * @ throws InterruptedException <nl> * / <nl> @ BeforeClass <nl> - public static void setup ( ) throws TTransportException , IOException , InterruptedException <nl> + public static void setup ( ) throws TTransportException , IOException , InterruptedException , ConfigurationException <nl> { <nl> <nl> / / Tell cassandra where the configuration files are . <nl> / / Use the test configuration file . <nl> System . setProperty ( " storage - config " , " test / conf " ) ; <nl> + DatabaseDescriptor . readTablesFromXml ( ) ; <nl> <nl> cassandra = new EmbeddedCassandraService ( ) ; <nl> cassandra . init ( ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / service / ReadResponseResolverTest . java b / test / unit / org / apache / cassandra / service / ReadResponseResolverTest . java <nl> index f9c0125 . . 8c988a2 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / ReadResponseResolverTest . java <nl> + + + b / test / unit / org / apache / cassandra / service / ReadResponseResolverTest . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ package org . apache . cassandra . service ; <nl> <nl> import java . util . Arrays ; <nl> <nl> + import org . apache . cassandra . SchemaLoader ; <nl> import org . junit . Test ; <nl> <nl> import org . apache . cassandra . db . ColumnFamily ; <nl> @ @ - 31 , 7 + 32 , 7 @ @ import static org . apache . cassandra . db . TableTest . assertColumns ; <nl> import static org . apache . cassandra . Util . column ; <nl> import static junit . framework . Assert . assertNull ; <nl> <nl> - public class ReadResponseResolverTest <nl> + public class ReadResponseResolverTest extends SchemaLoader <nl> { <nl> @ Test <nl> public void testResolveSupersetNewer ( ) <nl> diff - - git a / test / unit / org / apache / cassandra / streaming / BootstrapTest . java b / test / unit / org / apache / cassandra / streaming / BootstrapTest . java <nl> index 4a3de2e . . 446b4e9 100644 <nl> - - - a / test / unit / org / apache / cassandra / streaming / BootstrapTest . java <nl> + + + b / test / unit / org / apache / cassandra / streaming / BootstrapTest . java <nl> @ @ - 26 , 12 + 26 , 13 @ @ import java . io . IOException ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> <nl> + import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . io . sstable . SSTable ; <nl> <nl> import org . junit . Test ; <nl> <nl> - public class BootstrapTest <nl> + public class BootstrapTest extends SchemaLoader <nl> { <nl> @ Test <nl> public void testGetNewNames ( ) throws IOException <nl> diff - - git a / test / unit / org / apache / cassandra / tools / SSTableExportTest . java b / test / unit / org / apache / cassandra / tools / SSTableExportTest . java <nl> index f0baa37 . . 5400377 100644 <nl> - - - a / test / unit / org / apache / cassandra / tools / SSTableExportTest . java <nl> + + + b / test / unit / org / apache / cassandra / tools / SSTableExportTest . java <nl> @ @ - 23 , 6 + 23 , 8 @ @ import java . io . FileReader ; <nl> import java . io . IOException ; <nl> import java . io . PrintStream ; <nl> import java . util . Arrays ; <nl> + <nl> + import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . ColumnFamily ; <nl> import org . apache . cassandra . db . filter . NamesQueryFilter ; <nl> @ @ - 42 , 7 + 44 , 7 @ @ import org . json . simple . JSONValue ; <nl> import org . json . simple . parser . ParseException ; <nl> import org . junit . Test ; <nl> <nl> - public class SSTableExportTest <nl> + public class SSTableExportTest extends SchemaLoader <nl> { <nl> @ Test <nl> public void testEnumeratekeys ( ) throws IOException <nl> diff - - git a / test / unit / org / apache / cassandra / tools / SSTableImportTest . java b / test / unit / org / apache / cassandra / tools / SSTableImportTest . java <nl> index 6b09618 . . d7b74bc 100644 <nl> - - - a / test / unit / org / apache / cassandra / tools / SSTableImportTest . java <nl> + + + b / test / unit / org / apache / cassandra / tools / SSTableImportTest . java <nl> @ @ - 21 , 6 + 21 , 8 @ @ package org . apache . cassandra . tools ; <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> import java . util . Arrays ; <nl> + <nl> + import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . ColumnFamily ; <nl> import org . apache . cassandra . db . IColumn ; <nl> @ @ - 33 , 7 + 35 , 7 @ @ import static org . apache . cassandra . io . sstable . SSTableUtils . tempSSTableFile ; <nl> import org . json . simple . parser . ParseException ; <nl> import org . junit . Test ; <nl> <nl> - public class SSTableImportTest <nl> + public class SSTableImportTest extends SchemaLoader <nl> { <nl> @ Test <nl> public void testImportSimpleCf ( ) throws IOException , ParseException

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 3d8d511 . . a0f7c56 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 8 
 + * SSTable tools mishandling LocalPartitioner ( CASSANDRA - 12002 ) 
 * When SEPWorker assigned work , set thread name to match pool ( CASSANDRA - 11966 ) 
 * Add cross - DC latency metrics ( CASSANDRA - 11596 ) 
 * Allow terms in selection clause ( CASSANDRA - 10783 ) 
 diff - - git a / src / java / org / apache / cassandra / tools / SSTableExport . java b / src / java / org / apache / cassandra / tools / SSTableExport . java 
 index 09dbbed . . cc6b84b 100644 
 - - - a / src / java / org / apache / cassandra / tools / SSTableExport . java 
 + + + b / src / java / org / apache / cassandra / tools / SSTableExport . java 
 @ @ - 98 , 14 + 98 , 10 @ @ public class SSTableExport 
 if ( ! desc . version . storeRows ( ) ) 
 throw new IOException ( " pre - 3 . 0 SSTable is not supported . " ) ; 
 
 - EnumSet < MetadataType > types = EnumSet . of ( MetadataType . VALIDATION , MetadataType . STATS , MetadataType . HEADER ) ; 
 + EnumSet < MetadataType > types = EnumSet . of ( MetadataType . STATS , MetadataType . HEADER ) ; 
 Map < MetadataType , MetadataComponent > sstableMetadata = desc . getMetadataSerializer ( ) . deserialize ( desc , types ) ; 
 - ValidationMetadata validationMetadata = ( ValidationMetadata ) sstableMetadata . get ( MetadataType . VALIDATION ) ; 
 SerializationHeader . Component header = ( SerializationHeader . Component ) sstableMetadata . get ( MetadataType . HEADER ) ; 
 - 
 - IPartitioner partitioner = SecondaryIndexManager . isIndexColumnFamily ( desc . cfname ) 
 - ? new LocalPartitioner ( header . getKeyType ( ) ) 
 - : FBUtilities . newPartitioner ( validationMetadata . partitioner ) ; 
 + IPartitioner partitioner = FBUtilities . newPartitioner ( desc ) ; 
 
 CFMetaData . Builder builder = CFMetaData . Builder . create ( " keyspace " , " table " ) . withPartitioner ( partitioner ) ; 
 header . getStaticColumns ( ) . entrySet ( ) . stream ( ) 
 diff - - git a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java 
 index ef53087 . . 3c8ba64 100644 
 - - - a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java 
 + + + b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java 
 @ @ - 92 , 7 + 92 , 7 @ @ public class SSTableMetadataViewer 
 out . printf ( " TTL max : % s % n " , stats . maxTTL ) ; 
 
 if ( validation ! = null & & header ! = null ) 
 - printMinMaxToken ( descriptor , FBUtilities . newPartitioner ( validation . partitioner ) , header . getKeyType ( ) , out ) ; 
 + printMinMaxToken ( descriptor , FBUtilities . newPartitioner ( descriptor ) , header . getKeyType ( ) , out ) ; 
 
 if ( header ! = null & & header . getClusteringTypes ( ) . size ( ) = = stats . minClusteringValues . size ( ) ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 index 76178ad . . af2cb1b 100644 
 - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java 
 + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 @ @ - 32 , 6 + 32 , 7 @ @ import java . util . zip . Checksum ; 
 import javax . annotation . Nonnull ; 
 import javax . annotation . Nullable ; 
 
 + import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . base . Joiner ; 
 import org . apache . commons . lang3 . StringUtils ; 
 import org . slf4j . Logger ; 
 @ @ - 42 , 11 + 43 , 18 @ @ import org . apache . cassandra . auth . IAuthorizer ; 
 import org . apache . cassandra . auth . IRoleManager ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . DecoratedKey ; 
 + import org . apache . cassandra . db . SerializationHeader ; 
 + import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 + import org . apache . cassandra . dht . LocalPartitioner ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . dht . Token ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . io . IVersionedSerializer ; 
 + import org . apache . cassandra . io . sstable . Descriptor ; 
 + import org . apache . cassandra . io . sstable . metadata . MetadataComponent ; 
 + import org . apache . cassandra . io . sstable . metadata . MetadataType ; 
 + import org . apache . cassandra . io . sstable . metadata . ValidationMetadata ; 
 import org . apache . cassandra . schema . CompressionParams ; 
 import org . apache . cassandra . io . util . DataOutputBuffer ; 
 import org . apache . cassandra . io . util . DataOutputBufferFixed ; 
 @ @ - 395 , 10 + 403 , 37 @ @ public class FBUtilities 
 result . get ( ms , TimeUnit . MILLISECONDS ) ; 
 } 
 
 + / * * 
 + * Create a new instance of a partitioner defined in an SSTable Descriptor 
 + * @ param desc Descriptor of an sstable 
 + * @ return a new IPartitioner instance 
 + * @ throws IOException 
 + * / 
 + public static IPartitioner newPartitioner ( Descriptor desc ) throws IOException 
 + { 
 + EnumSet < MetadataType > types = EnumSet . of ( MetadataType . VALIDATION , MetadataType . HEADER ) ; 
 + Map < MetadataType , MetadataComponent > sstableMetadata = desc . getMetadataSerializer ( ) . deserialize ( desc , types ) ; 
 + ValidationMetadata validationMetadata = ( ValidationMetadata ) sstableMetadata . get ( MetadataType . VALIDATION ) ; 
 + SerializationHeader . Component header = ( SerializationHeader . Component ) sstableMetadata . get ( MetadataType . HEADER ) ; 
 + return newPartitioner ( validationMetadata . partitioner , Optional . of ( header . getKeyType ( ) ) ) ; 
 + } 
 + 
 public static IPartitioner newPartitioner ( String partitionerClassName ) throws ConfigurationException 
 { 
 + return newPartitioner ( partitionerClassName , Optional . empty ( ) ) ; 
 + } 
 + 
 + @ VisibleForTesting 
 + static IPartitioner newPartitioner ( String partitionerClassName , Optional < AbstractType < ? > > comparator ) throws ConfigurationException 
 + { 
 if ( ! partitionerClassName . contains ( " . " ) ) 
 partitionerClassName = " org . apache . cassandra . dht . " + partitionerClassName ; 
 + 
 + if ( partitionerClassName . equals ( " org . apache . cassandra . dht . LocalPartitioner " ) ) 
 + { 
 + assert comparator . isPresent ( ) : " Expected a comparator for local partitioner " ; 
 + return new LocalPartitioner ( comparator . get ( ) ) ; 
 + } 
 return FBUtilities . instanceOrConstruct ( partitionerClassName , " partitioner " ) ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / utils / FBUtilitiesTest . java b / test / unit / org / apache / cassandra / utils / FBUtilitiesTest . java 
 index 90c5f05 . . 3c1ea74 100644 
 - - - a / test / unit / org / apache / cassandra / utils / FBUtilitiesTest . java 
 + + + b / test / unit / org / apache / cassandra / utils / FBUtilitiesTest . java 
 @ @ - 1 , 4 + 1 , 4 @ @ 
 - / * * 
 + / * 
 * Licensed to the Apache Software Foundation ( ASF ) under one 
 * or more contributor license agreements . See the NOTICE file 
 * distributed with this work for additional information 
 @ @ - 22 , 12 + 22 , 17 @ @ import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 import java . nio . charset . CharacterCodingException ; 
 import java . nio . charset . StandardCharsets ; 
 + import java . util . Map ; 
 + import java . util . Optional ; 
 + import java . util . TreeMap ; 
 
 import com . google . common . primitives . Ints ; 
 + 
 + import org . junit . Assert ; 
 import org . junit . Test ; 
 
 - import java . util . Map ; 
 - import java . util . TreeMap ; 
 + import org . apache . cassandra . db . marshal . * ; 
 + import org . apache . cassandra . dht . * ; 
 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . fail ; 
 @ @ - 95 , 4 + 100 , 51 @ @ public class FBUtilitiesTest 
 ByteBuffer bytes = ByteBuffer . wrap ( new byte [ ] { ( byte ) 0xff , ( byte ) 0xfe } ) ; 
 ByteBufferUtil . string ( bytes , StandardCharsets . UTF _ 8 ) ; 
 } 
 + 
 + private static void assertPartitioner ( String name , Class expected ) 
 + { 
 + Assert . assertTrue ( String . format ( " % s ! = % s " , name , expected . toString ( ) ) , 
 + expected . isInstance ( FBUtilities . newPartitioner ( name ) ) ) ; 
 + } 
 + 
 + / * * 
 + * Check that given a name , the correct partitioner instance is created . 
 + * 
 + * If the assertions in this test start failing , it likely means the sstabledump / sstablemetadata tools will 
 + * also fail to read existing sstables . 
 + * / 
 + @ Test 
 + public void testNewPartitionerNoArgConstructors ( ) 
 + { 
 + assertPartitioner ( " ByteOrderedPartitioner " , ByteOrderedPartitioner . class ) ; 
 + assertPartitioner ( " LengthPartitioner " , LengthPartitioner . class ) ; 
 + assertPartitioner ( " Murmur3Partitioner " , Murmur3Partitioner . class ) ; 
 + assertPartitioner ( " OrderPreservingPartitioner " , OrderPreservingPartitioner . class ) ; 
 + assertPartitioner ( " RandomPartitioner " , RandomPartitioner . class ) ; 
 + assertPartitioner ( " org . apache . cassandra . dht . ByteOrderedPartitioner " , ByteOrderedPartitioner . class ) ; 
 + assertPartitioner ( " org . apache . cassandra . dht . LengthPartitioner " , LengthPartitioner . class ) ; 
 + assertPartitioner ( " org . apache . cassandra . dht . Murmur3Partitioner " , Murmur3Partitioner . class ) ; 
 + assertPartitioner ( " org . apache . cassandra . dht . OrderPreservingPartitioner " , OrderPreservingPartitioner . class ) ; 
 + assertPartitioner ( " org . apache . cassandra . dht . RandomPartitioner " , RandomPartitioner . class ) ; 
 + } 
 + 
 + / * * 
 + * Check that we can instantiate local partitioner correctly and that we can pass the correct type 
 + * to it as a constructor argument . 
 + * 
 + * If the assertions in this test start failing , it likely means the sstabledump / sstablemetadata tools will 
 + * also fail to read existing sstables . 
 + * / 
 + @ Test 
 + public void testNewPartitionerLocalPartitioner ( ) 
 + { 
 + for ( String name : new String [ ] { " LocalPartitioner " , " org . apache . cassandra . dht . LocalPartitioner " } ) 
 + for ( AbstractType < ? > type : new AbstractType < ? > [ ] { UUIDType . instance , ListType . getInstance ( Int32Type . instance , true ) } ) 
 + { 
 + IPartitioner partitioner = FBUtilities . newPartitioner ( name , Optional . of ( type ) ) ; 
 + Assert . assertTrue ( String . format ( " % s ! = LocalPartitioner " , partitioner . toString ( ) ) , 
 + LocalPartitioner . class . isInstance ( partitioner ) ) ; 
 + Assert . assertEquals ( partitioner . partitionOrdering ( ) , type ) ; 
 + } 
 + } 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / avro / CassandraDaemon . java b / src / java / org / apache / cassandra / avro / CassandraDaemon . java 
 index f06c829 . . e378687 100644 
 - - - a / src / java / org / apache / cassandra / avro / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / avro / CassandraDaemon . java 
 @ @ - 75 , 6 + 75 , 16 @ @ public class CassandraDaemon { 
 } 
 } 
 } ) ; 
 + 
 + try 
 + { 
 + DatabaseDescriptor . loadSchemas ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + logger . error ( " Fatal exception during initialization " , e ) ; 
 + System . exit ( 100 ) ; 
 + } 
 
 / / initialize keyspaces 
 for ( String table : DatabaseDescriptor . getTables ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 506fe68 . . 144437b 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 31 , 7 + 31 , 9 @ @ import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . locator . IEndPointSnitch ; 
 import org . apache . cassandra . locator . AbstractReplicationStrategy ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 + import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 + import org . apache . cassandra . utils . UUIDGen ; 
 import org . apache . cassandra . utils . XMLUtils ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 482 , 27 + 484 , 18 @ @ public class DatabaseDescriptor 
 } ; 
 KSMetaData systemMeta = new KSMetaData ( Table . SYSTEM _ TABLE , null , - 1 , null , systemCfDefs ) ; 
 tables . put ( Table . SYSTEM _ TABLE , systemMeta ) ; 
 - 
 - / / todo : if tables are defined in the system store , use those . load from xml otherwise . 
 - readTablesFromXml ( ) ; 
 - 
 - / / todo : fill in repStrat and epSnitch when this table is set to replicate . 
 + 
 CFMetaData [ ] definitionCfDefs = new CFMetaData [ ] 
 { 
 new CFMetaData ( Table . DEFINITIONS , Migration . MIGRATIONS _ CF , " Standard " , new TimeUUIDType ( ) , null , " individual schema mutations " , 0 , 0 ) , 
 new CFMetaData ( Table . DEFINITIONS , Migration . SCHEMA _ CF , " Standard " , new UTF8Type ( ) , null , " current state of the schema " , 0 , 0 ) 
 } ; 
 - KSMetaData ksDefs = new KSMetaData ( Table . DEFINITIONS , null , - 1 , null , definitionCfDefs ) ; 
 - tables . put ( Table . DEFINITIONS , ksDefs ) ; 
 + tables . put ( Table . DEFINITIONS , new KSMetaData ( Table . DEFINITIONS , null , - 1 , null , definitionCfDefs ) ) ; 
 
 / / NOTE : make sure that all system CFMs defined by now . calling fixMaxId at this point will set the base id 
 / / to a value that leaves room for future system cfms . 
 CFMetaData . fixMaxId ( ) ; 
 
 - / / todo : if tables are defined in the system store , use those . load from xml otherwise . 
 - readTablesFromXml ( ) ; 
 - CFMetaData . fixMaxId ( ) ; 
 - 
 / * Load the seeds for node contact points * / 
 String [ ] seedsxml = xmlUtils . getNodeValues ( " / Storage / Seeds / Seed " ) ; 
 if ( seedsxml . length < = 0 ) 
 @ @ - 525 , 8 + 518 , 43 @ @ public class DatabaseDescriptor 
 throw new RuntimeException ( e ) ; 
 } 
 } 
 + 
 + public static void loadSchemas ( ) throws IOException 
 + { 
 + / / we can load tables from local storage if a version is set in the system table and that acutally maps to 
 + / / real data in the definitions table . If we do end up loading from xml , store the defintions so that we 
 + / / don ' t load from xml anymore . 
 + UUID uuid = Migration . getLastMigrationId ( ) ; 
 + if ( uuid = = null ) 
 + logger . warn ( " Couldn ' t detect any schema definitions in local storage . I hope you ' ve got a plan . " ) ; 
 + else 
 + { 
 + logger . info ( " Loading schema version " + uuid . toString ( ) ) ; 
 + Collection < KSMetaData > tableDefs = DefsTable . loadFromStorage ( uuid ) ; 
 + for ( KSMetaData def : tableDefs ) 
 + { 
 + DatabaseDescriptor . setTableDefinition ( def , uuid ) ; 
 + / / this part creates storage and jmx objects . 
 + Table . open ( def . name ) ; 
 + } 
 + 
 + / / since we loaded definitions from local storage , log a warning if definitions exist in xml . 
 + try 
 + { 
 + XMLUtils xmlUtils = new XMLUtils ( configFileName ) ; 
 + NodeList tablesxml = xmlUtils . getRequestedNodeList ( " / Storage / Keyspaces / Keyspace " ) ; 
 + if ( tablesxml . getLength ( ) > 0 ) 
 + logger . warn ( " Schema definitions were defined both locally and in storage - conf . xml . Definitions in storage - conf . xml were ignored . " ) ; 
 + } 
 + catch ( Exception ex ) 
 + { 
 + logger . warn ( " Problem checking for schema defintions in xml " , ex ) ; 
 + } 
 + } 
 + CFMetaData . fixMaxId ( ) ; 
 + } 
 
 - private static void readTablesFromXml ( ) throws ConfigurationException 
 + public static void readTablesFromXml ( ) throws ConfigurationException 
 { 
 XMLUtils xmlUtils = null ; 
 try 
 @ @ - 730 , 6 + 758 , 8 @ @ public class DatabaseDescriptor 
 ex . initCause ( e ) ; 
 throw ex ; 
 } 
 + if ( DatabaseDescriptor . listenAddress ! = null ) 
 + defsVersion = UUIDGen . makeType1UUIDFromHost ( FBUtilities . getLocalAddress ( ) ) ; 
 } 
 
 public static IAuthenticator getAuthenticator ( ) 
 @ @ - 1118 , 10 + 1148 , 9 @ @ public class DatabaseDescriptor 
 / / process of mutating an individual keyspace , rather than setting manually here . 
 public static void setTableDefinition ( KSMetaData ksm , UUID newVersion ) 
 { 
 - / / at some point , this assert will be valid , because defsVersion _ will be set when the table defs are loaded . 
 - / / assert newVersion ! = null & & ! newVersion . equals ( defsVersion _ ) & & defsVersion _ . compareTo ( newVersion ) < 0 ; 
 tables . put ( ksm . name , ksm ) ; 
 DatabaseDescriptor . defsVersion = newVersion ; 
 + StorageService . instance . initReplicationStrategy ( ksm . name ) ; 
 } 
 
 public static void clearTableDefinition ( KSMetaData ksm , UUID newVersion ) 
 diff - - git a / src / java / org / apache / cassandra / db / DefsTable . java b / src / java / org / apache / cassandra / db / DefsTable . java 
 index b02ad44 . . 6c63ec6 100644 
 - - - a / src / java / org / apache / cassandra / db / DefsTable . java 
 + + + b / src / java / org / apache / cassandra / db / DefsTable . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import org . apache . cassandra . db . filter . QueryFilter ; 
 import org . apache . cassandra . db . filter . QueryPath ; 
 import org . apache . cassandra . db . filter . SliceQueryFilter ; 
 import org . apache . cassandra . db . migration . Migration ; 
 + import org . apache . cassandra . utils . UUIDGen ; 
 
 import java . io . ByteArrayInputStream ; 
 import java . io . File ; 
 @ @ - 50 , 6 + 51 , 10 @ @ public class DefsTable 
 rm . add ( new QueryPath ( Migration . SCHEMA _ CF , null , ks . name . getBytes ( ) ) , KSMetaData . serialize ( ks ) , now ) ; 
 } 
 rm . apply ( ) ; 
 + 
 + rm = new RowMutation ( Table . DEFINITIONS , Migration . LAST _ MIGRATION _ KEY ) ; 
 + rm . add ( new QueryPath ( Migration . SCHEMA _ CF , null , Migration . LAST _ MIGRATION _ KEY . getBytes ( ) ) , UUIDGen . decompose ( version ) , now ) ; 
 + rm . apply ( ) ; 
 } 
 
 / * * loads a version of keyspace definitions from storage * / 
 diff - - git a / src / java / org / apache / cassandra / db / migration / Migration . java b / src / java / org / apache / cassandra / db / migration / Migration . java 
 index 718b052 . . d6b315b 100644 
 - - - a / src / java / org / apache / cassandra / db / migration / Migration . java 
 + + + b / src / java / org / apache / cassandra / db / migration / Migration . java 
 @ @ - 145 , 7 + 145 , 7 @ @ public abstract class Migration 
 ColumnFamilyStore cfStore = defs . getColumnFamilyStore ( SCHEMA _ CF ) ; 
 QueryFilter filter = QueryFilter . getNamesFilter ( LAST _ MIGRATION _ KEY , new QueryPath ( SCHEMA _ CF ) , LAST _ MIGRATION _ KEY . getBytes ( ) ) ; 
 ColumnFamily cf = cfStore . getColumnFamily ( filter ) ; 
 - if ( cf . getColumnNames ( ) . size ( ) = = 0 ) 
 + if ( cf = = null | | cf . getColumnNames ( ) . size ( ) = = 0 ) 
 return null ; 
 else 
 return UUIDGen . makeType1UUID ( cf . getColumn ( LAST _ MIGRATION _ KEY . getBytes ( ) ) . value ( ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 52f25b2 . . 4a4da3a 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 33 , 9 + 33 , 11 @ @ import javax . management . * ; 
 
 import com . google . common . collect . Multimaps ; 
 import org . apache . cassandra . concurrent . * ; 
 + import org . apache . cassandra . config . ConfigurationException ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . commitlog . CommitLog ; 
 + import org . apache . cassandra . db . migration . Migration ; 
 import org . apache . cassandra . dht . * ; 
 import org . apache . cassandra . gms . * ; 
 import org . apache . cassandra . io . DeletionService ; 
 @ @ - 47 , 6 + 49 , 7 @ @ import org . apache . cassandra . streaming . * ; 
 import org . apache . cassandra . thrift . ConsistencyLevel ; 
 import org . apache . cassandra . thrift . UnavailableException ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 + import org . apache . cassandra . utils . UUIDGen ; 
 import org . apache . cassandra . utils . WrappedRunnable ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 
 @ @ - 1568 , 7 + 1571 , 39 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe 
 
 setMode ( " Node is drained " , true ) ; 
 } 
 - 
 + 
 + / * * 
 + * load schema from xml . This can only be done on a fresh system . 
 + * @ throws ConfigurationException 
 + * @ throws IOException 
 + * / 
 + public void loadSchemaFromXML ( ) throws ConfigurationException , IOException 
 + { 
 + / / blow up if there is a schema saved . 
 + if ( DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) > 0 | | Migration . getLastMigrationId ( ) ! = null ) 
 + throw new ConfigurationException ( " Cannot load from XML on top of pre - existing schemas . " ) ; 
 + DatabaseDescriptor . readTablesFromXml ( ) ; 
 + assert DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) > 0 ; 
 + DefsTable . dumpToStorage ( DatabaseDescriptor . getDefsVersion ( ) ) ; 
 + / / flush system and definition tables . 
 + Collection < Future > flushers = new ArrayList < Future > ( ) ; 
 + flushers . addAll ( Table . open ( Table . SYSTEM _ TABLE ) . flush ( ) ) ; 
 + flushers . addAll ( Table . open ( Table . DEFINITIONS ) . flush ( ) ) ; 
 + for ( Future f : flushers ) 
 + { 
 + try 
 + { 
 + f . get ( ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + ConfigurationException ce = new ConfigurationException ( e . getMessage ( ) ) ; 
 + ce . initCause ( e ) ; 
 + throw ce ; 
 + } 
 + } 
 + 
 + } 
 
 / / Never ever do this at home . Used by tests . 
 Map < String , AbstractReplicationStrategy > setReplicationStrategyUnsafe ( Map < String , AbstractReplicationStrategy > replacement ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index 48e0097 . . a4eb1c6 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . util . Set ; 
 import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . FutureTask ; 
 
 + import org . apache . cassandra . config . ConfigurationException ; 
 import org . apache . cassandra . dht . Range ; 
 import java . net . InetAddress ; 
 
 @ @ - 169 , 4 + 170 , 10 @ @ public interface StorageServiceMBean 
 
 / * * makes node unavailable for writes , flushes memtables and replays commitlog . * / 
 public void drain ( ) throws IOException , InterruptedException , ExecutionException ; 
 + 
 + / * * 
 + * Introduced in 0 . 7 to allow nodes to load their existing xml defined schemas . 
 + * @ todo : deprecate in 0 . 7 + 1 , remove in 0 . 7 + 2 . 
 + * / 
 + public void loadSchemaFromXML ( ) throws ConfigurationException , IOException ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java 
 index 915c5c6 . . 06eb70c 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . io . IOException ; 
 import java . net . InetSocketAddress ; 
 import java . net . InetAddress ; 
 
 + import org . apache . cassandra . config . ConfigurationException ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 85 , 6 + 86 , 16 @ @ public class CassandraDaemon 
 } 
 } ) ; 
 
 + try 
 + { 
 + DatabaseDescriptor . loadSchemas ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + logger . error ( " Fatal exception during initialization " , e ) ; 
 + System . exit ( 100 ) ; 
 + } 
 + 
 / / initialize keyspaces 
 for ( String table : DatabaseDescriptor . getTables ( ) ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / CleanupHelper . java b / test / unit / org / apache / cassandra / CleanupHelper . java 
 index 0a2e986 . . d1c805f 100644 
 - - - a / test / unit / org / apache / cassandra / CleanupHelper . java 
 + + + b / test / unit / org / apache / cassandra / CleanupHelper . java 
 @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . io . util . FileUtils ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - public class CleanupHelper 
 + public class CleanupHelper extends SchemaLoader 
 { 
 private static Logger logger = LoggerFactory . getLogger ( CleanupHelper . class ) ; 
 
 diff - - git a / test / unit / org / apache / cassandra / SchemaLoader . java b / test / unit / org / apache / cassandra / SchemaLoader . java 
 new file mode 100644 
 index 0000000 . . 73add5a 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / SchemaLoader . java 
 @ @ - 0 , 0 + 1 , 41 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * < p / > 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * < p / > 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra ; 
 + 
 + import org . apache . cassandra . config . ConfigurationException ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . junit . BeforeClass ; 
 + 
 + public class SchemaLoader 
 + { 
 + / / todo : when xml is fully deprecated , this method should be changed to manually load a few table definitions into 
 + / / the definitions keyspace . 
 + @ BeforeClass 
 + public static void loadSchemaFromXml ( ) 
 + { 
 + try 
 + { 
 + DatabaseDescriptor . readTablesFromXml ( ) ; 
 + } 
 + catch ( ConfigurationException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / db / ColumnFamilyTest . java b / test / unit / org / apache / cassandra / db / ColumnFamilyTest . java 
 index dede3b7 . . d5639a8 100644 
 - - - a / test / unit / org / apache / cassandra / db / ColumnFamilyTest . java 
 + + + b / test / unit / org / apache / cassandra / db / ColumnFamilyTest . java 
 @ @ - 24 , 13 + 24 , 14 @ @ import java . io . IOException ; 
 import java . util . Arrays ; 
 import java . util . TreeMap ; 
 
 + import org . apache . cassandra . SchemaLoader ; 
 import org . junit . Test ; 
 
 import org . apache . cassandra . io . util . DataOutputBuffer ; 
 import org . apache . cassandra . db . filter . QueryPath ; 
 import static org . apache . cassandra . Util . column ; 
 
 - public class ColumnFamilyTest 
 + public class ColumnFamilyTest extends SchemaLoader 
 { 
 / / TODO test SuperColumns 
 
 diff - - git a / test / unit / org / apache / cassandra / db / DefsTest . java b / test / unit / org / apache / cassandra / db / DefsTest . java 
 index 5ab31ba . . 1df2c79 100644 
 - - - a / test / unit / org / apache / cassandra / db / DefsTest . java 
 + + + b / test / unit / org / apache / cassandra / db / DefsTest . java 
 @ @ - 59 , 12 + 59 , 6 @ @ import java . util . concurrent . ExecutionException ; 
 
 public class DefsTest extends CleanupHelper 
 { 
 - @ Before 
 - public void setup ( ) 
 - { 
 - / / just something to ensure that DD has been initialized . 
 - DatabaseDescriptor . getNonSystemTables ( ) ; 
 - } 
 
 @ Test 
 public void saveAndRestore ( ) throws IOException 
 @ @ - 105 , 10 + 99 , 10 @ @ public class DefsTest extends CleanupHelper 
 public void testMigrations ( ) throws IOException , ConfigurationException 
 { 
 / / do a save . make sure it doesn ' t mess with the defs version . 
 - assert DatabaseDescriptor . getDefsVersion ( ) = = null ; 
 + UUID prior = DatabaseDescriptor . getDefsVersion ( ) ; 
 UUID ver0 = UUIDGen . makeType1UUIDFromHost ( FBUtilities . getLocalAddress ( ) ) ; 
 DefsTable . dumpToStorage ( ver0 ) ; 
 - assert DatabaseDescriptor . getDefsVersion ( ) = = null ; 
 + assert DatabaseDescriptor . getDefsVersion ( ) . equals ( prior ) ; 
 
 / / add a cf . 
 CFMetaData newCf1 = new CFMetaData ( " Keyspace1 " , " MigrationCf _ 1 " , " Standard " , new UTF8Type ( ) , null , " Migration CF " , 0 , 0 ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / ReadMessageTest . java b / test / unit / org / apache / cassandra / db / ReadMessageTest . java 
 index 8597fc2 . . 13ee6a9 100644 
 - - - a / test / unit / org / apache / cassandra / db / ReadMessageTest . java 
 + + + b / test / unit / org / apache / cassandra / db / ReadMessageTest . java 
 @ @ - 26 , 13 + 26 , 14 @ @ import java . io . IOException ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 
 + import org . apache . cassandra . SchemaLoader ; 
 import org . apache . commons . lang . ArrayUtils ; 
 import org . junit . Test ; 
 
 import org . apache . cassandra . db . filter . QueryPath ; 
 import org . apache . cassandra . io . util . DataOutputBuffer ; 
 
 - public class ReadMessageTest 
 + public class ReadMessageTest extends SchemaLoader 
 { 
 @ Test 
 public void testMakeReadMessage ( ) throws IOException 
 diff - - git a / test / unit / org / apache / cassandra / db / RowTest . java b / test / unit / org / apache / cassandra / db / RowTest . java 
 index b578d17 . . 5618970 100644 
 - - - a / test / unit / org / apache / cassandra / db / RowTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RowTest . java 
 @ @ - 20 , 13 + 20 , 14 @ @ package org . apache . cassandra . db ; 
 
 import java . util . Arrays ; 
 
 + import org . apache . cassandra . SchemaLoader ; 
 import org . junit . Test ; 
 
 import static junit . framework . Assert . assertEquals ; 
 import org . apache . cassandra . db . marshal . AsciiType ; 
 import static org . apache . cassandra . Util . column ; 
 
 - public class RowTest 
 + public class RowTest extends SchemaLoader 
 { 
 @ Test 
 public void testDiffColumnFamily ( ) 
 diff - - git a / test / unit / org / apache / cassandra / db / commitlog / CommitLogHeaderTest . java b / test / unit / org / apache / cassandra / db / commitlog / CommitLogHeaderTest . java 
 index 5da38d0 . . b0bdae7 100644 
 - - - a / test / unit / org / apache / cassandra / db / commitlog / CommitLogHeaderTest . java 
 + + + b / test / unit / org / apache / cassandra / db / commitlog / CommitLogHeaderTest . java 
 @ @ - 20 , 7 + 20 , 9 @ @ package org . apache . cassandra . db . commitlog ; 
 
 import com . google . common . collect . HashMultimap ; 
 import com . google . common . collect . Multimap ; 
 + import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . config . CFMetaData ; 
 + import org . apache . cassandra . config . ConfigurationException ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . utils . Pair ; 
 import org . junit . Before ; 
 @ @ - 34 , 14 + 36 , 8 @ @ import java . util . Collection ; 
 import java . util . Collections ; 
 import java . util . Map ; 
 
 - public class CommitLogHeaderTest 
 + public class CommitLogHeaderTest extends SchemaLoader 
 { 
 - @ Before 
 - public void setup ( ) 
 - { 
 - / / data definitions must be loaded . 
 - DatabaseDescriptor . getTables ( ) ; 
 - } 
 
 @ Test 
 public void testEmptyHeader ( ) 
 diff - - git a / test / unit / org / apache / cassandra / locator / RackUnawareStrategyTest . java b / test / unit / org / apache / cassandra / locator / RackUnawareStrategyTest . java 
 index 973e762 . . 913351d 100644 
 - - - a / test / unit / org / apache / cassandra / locator / RackUnawareStrategyTest . java 
 + + + b / test / unit / org / apache / cassandra / locator / RackUnawareStrategyTest . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . util . List ; 
 import java . util . ArrayList ; 
 import java . util . Collection ; 
 
 + import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . gms . ApplicationState ; 
 import org . apache . cassandra . service . StorageServiceAccessor ; 
 @ @ - 40 , 7 + 41 , 7 @ @ import org . apache . cassandra . service . StorageService ; 
 import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 
 - public class RackUnawareStrategyTest 
 + public class RackUnawareStrategyTest extends SchemaLoader 
 { 
 @ Test 
 public void tryBogusTable ( ) 
 diff - - git a / test / unit / org / apache / cassandra / service / EmbeddedCassandraServiceTest . java b / test / unit / org / apache / cassandra / service / EmbeddedCassandraServiceTest . java 
 index 512f522 . . 58904ee 100644 
 - - - a / test / unit / org / apache / cassandra / service / EmbeddedCassandraServiceTest . java 
 + + + b / test / unit / org / apache / cassandra / service / EmbeddedCassandraServiceTest . java 
 @ @ - 24 , 6 + 24 , 8 @ @ import static org . junit . Assert . assertNotNull ; 
 import java . io . IOException ; 
 import java . io . UnsupportedEncodingException ; 
 
 + import org . apache . cassandra . config . ConfigurationException ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . thrift . Cassandra ; 
 import org . apache . cassandra . thrift . ColumnOrSuperColumn ; 
 import org . apache . cassandra . thrift . ColumnPath ; 
 @ @ - 62 , 12 + 64 , 13 @ @ public class EmbeddedCassandraServiceTest 
 * @ throws InterruptedException 
 * / 
 @ BeforeClass 
 - public static void setup ( ) throws TTransportException , IOException , InterruptedException 
 + public static void setup ( ) throws TTransportException , IOException , InterruptedException , ConfigurationException 
 { 
 
 / / Tell cassandra where the configuration files are . 
 / / Use the test configuration file . 
 System . setProperty ( " storage - config " , " test / conf " ) ; 
 + DatabaseDescriptor . readTablesFromXml ( ) ; 
 
 cassandra = new EmbeddedCassandraService ( ) ; 
 cassandra . init ( ) ; 
 diff - - git a / test / unit / org / apache / cassandra / service / ReadResponseResolverTest . java b / test / unit / org / apache / cassandra / service / ReadResponseResolverTest . java 
 index f9c0125 . . 8c988a2 100644 
 - - - a / test / unit / org / apache / cassandra / service / ReadResponseResolverTest . java 
 + + + b / test / unit / org / apache / cassandra / service / ReadResponseResolverTest . java 
 @ @ - 23 , 6 + 23 , 7 @ @ package org . apache . cassandra . service ; 
 
 import java . util . Arrays ; 
 
 + import org . apache . cassandra . SchemaLoader ; 
 import org . junit . Test ; 
 
 import org . apache . cassandra . db . ColumnFamily ; 
 @ @ - 31 , 7 + 32 , 7 @ @ import static org . apache . cassandra . db . TableTest . assertColumns ; 
 import static org . apache . cassandra . Util . column ; 
 import static junit . framework . Assert . assertNull ; 
 
 - public class ReadResponseResolverTest 
 + public class ReadResponseResolverTest extends SchemaLoader 
 { 
 @ Test 
 public void testResolveSupersetNewer ( ) 
 diff - - git a / test / unit / org / apache / cassandra / streaming / BootstrapTest . java b / test / unit / org / apache / cassandra / streaming / BootstrapTest . java 
 index 4a3de2e . . 446b4e9 100644 
 - - - a / test / unit / org / apache / cassandra / streaming / BootstrapTest . java 
 + + + b / test / unit / org / apache / cassandra / streaming / BootstrapTest . java 
 @ @ - 26 , 12 + 26 , 13 @ @ import java . io . IOException ; 
 import java . util . HashMap ; 
 import java . util . Map ; 
 
 + import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . io . sstable . SSTable ; 
 
 import org . junit . Test ; 
 
 - public class BootstrapTest 
 + public class BootstrapTest extends SchemaLoader 
 { 
 @ Test 
 public void testGetNewNames ( ) throws IOException 
 diff - - git a / test / unit / org / apache / cassandra / tools / SSTableExportTest . java b / test / unit / org / apache / cassandra / tools / SSTableExportTest . java 
 index f0baa37 . . 5400377 100644 
 - - - a / test / unit / org / apache / cassandra / tools / SSTableExportTest . java 
 + + + b / test / unit / org / apache / cassandra / tools / SSTableExportTest . java 
 @ @ - 23 , 6 + 23 , 8 @ @ import java . io . FileReader ; 
 import java . io . IOException ; 
 import java . io . PrintStream ; 
 import java . util . Arrays ; 
 + 
 + import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . ColumnFamily ; 
 import org . apache . cassandra . db . filter . NamesQueryFilter ; 
 @ @ - 42 , 7 + 44 , 7 @ @ import org . json . simple . JSONValue ; 
 import org . json . simple . parser . ParseException ; 
 import org . junit . Test ; 
 
 - public class SSTableExportTest 
 + public class SSTableExportTest extends SchemaLoader 
 { 
 @ Test 
 public void testEnumeratekeys ( ) throws IOException 
 diff - - git a / test / unit / org / apache / cassandra / tools / SSTableImportTest . java b / test / unit / org / apache / cassandra / tools / SSTableImportTest . java 
 index 6b09618 . . d7b74bc 100644 
 - - - a / test / unit / org / apache / cassandra / tools / SSTableImportTest . java 
 + + + b / test / unit / org / apache / cassandra / tools / SSTableImportTest . java 
 @ @ - 21 , 6 + 21 , 8 @ @ package org . apache . cassandra . tools ; 
 import java . io . File ; 
 import java . io . IOException ; 
 import java . util . Arrays ; 
 + 
 + import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . ColumnFamily ; 
 import org . apache . cassandra . db . IColumn ; 
 @ @ - 33 , 7 + 35 , 7 @ @ import static org . apache . cassandra . io . sstable . SSTableUtils . tempSSTableFile ; 
 import org . json . simple . parser . ParseException ; 
 import org . junit . Test ; 
 
 - public class SSTableImportTest 
 + public class SSTableImportTest extends SchemaLoader 
 { 
 @ Test 
 public void testImportSimpleCf ( ) throws IOException , ParseException
