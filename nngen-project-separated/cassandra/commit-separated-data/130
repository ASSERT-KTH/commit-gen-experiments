BLEU SCORE: 0.049900497019368314

TEST MSG: Add a virtual table to expose all running sstable tasks
GENERATED MSG: Try to stop all compaction upon Keyspace or ColumnFamily drop

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 86842d0 . . 351ae37 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Add a virtual table to expose all running sstable tasks ( CASSANDRA - 14457 ) <nl> * Let nodetool import take a list of directories ( CASSANDRA - 14442 ) <nl> * Avoid unneeded memory allocations / cpu for disabled log levels ( CASSANDRA - 14488 ) <nl> * Implement virtual keyspace interface ( CASSANDRA - 7622 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java b / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java <nl> index ccdfeb4 . . 99df259 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . db . compaction ; <nl> import java . io . Serializable ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> + import java . util . Optional ; <nl> import java . util . UUID ; <nl> <nl> import org . apache . cassandra . schema . TableMetadata ; <nl> @ @ - 28 , 6 + 29 , 16 @ @ import org . apache . cassandra . schema . TableMetadata ; <nl> public final class CompactionInfo implements Serializable <nl> { <nl> private static final long serialVersionUID = 3695381572726744816L ; <nl> + <nl> + public static final String ID = " id " ; <nl> + public static final String KEYSPACE = " keyspace " ; <nl> + public static final String COLUMNFAMILY = " columnfamily " ; <nl> + public static final String COMPLETED = " completed " ; <nl> + public static final String TOTAL = " total " ; <nl> + public static final String TASK _ TYPE = " taskType " ; <nl> + public static final String UNIT = " unit " ; <nl> + public static final String COMPACTION _ ID = " compactionId " ; <nl> + <nl> private final TableMetadata metadata ; <nl> private final OperationType tasktype ; <nl> private final long completed ; <nl> @ @ - 84 , 19 + 95 , 14 @ @ public final class CompactionInfo implements Serializable <nl> return new CompactionInfo ( metadata , tasktype , complete , total , unit , compactionId ) ; <nl> } <nl> <nl> - public UUID getId ( ) <nl> - { <nl> - return metadata ! = null ? metadata . id . asUUID ( ) : null ; <nl> - } <nl> - <nl> - public String getKeyspace ( ) <nl> + public Optional < String > getKeyspace ( ) <nl> { <nl> - return metadata ! = null ? metadata . keyspace : null ; <nl> + return Optional . ofNullable ( metadata ! = null ? metadata . keyspace : null ) ; <nl> } <nl> <nl> - public String getColumnFamily ( ) <nl> + public Optional < String > getTable ( ) <nl> { <nl> - return metadata ! = null ? metadata . name : null ; <nl> + return Optional . ofNullable ( metadata ! = null ? metadata . name : null ) ; <nl> } <nl> <nl> public TableMetadata getTableMetadata ( ) <nl> @ @ - 119 , 19 + 125 , 24 @ @ public final class CompactionInfo implements Serializable <nl> return tasktype ; <nl> } <nl> <nl> - public UUID compactionId ( ) <nl> + public UUID getTaskId ( ) <nl> { <nl> return compactionId ; <nl> } <nl> <nl> + public Unit getUnit ( ) <nl> + { <nl> + return unit ; <nl> + } <nl> + <nl> public String toString ( ) <nl> { <nl> StringBuilder buff = new StringBuilder ( ) ; <nl> buff . append ( getTaskType ( ) ) ; <nl> if ( metadata ! = null ) <nl> { <nl> - buff . append ( ' @ ' ) . append ( getId ( ) ) . append ( ' ( ' ) ; <nl> - buff . append ( getKeyspace ( ) ) . append ( " , " ) . append ( getColumnFamily ( ) ) . append ( " , " ) ; <nl> + buff . append ( ' @ ' ) . append ( metadata . id ) . append ( ' ( ' ) ; <nl> + buff . append ( metadata . keyspace ) . append ( " , " ) . append ( metadata . name ) . append ( " , " ) ; <nl> } <nl> else <nl> { <nl> @ @ - 144 , 14 + 155 , 14 @ @ public final class CompactionInfo implements Serializable <nl> public Map < String , String > asMap ( ) <nl> { <nl> Map < String , String > ret = new HashMap < String , String > ( ) ; <nl> - ret . put ( " id " , getId ( ) = = null ? " " : getId ( ) . toString ( ) ) ; <nl> - ret . put ( " keyspace " , getKeyspace ( ) ) ; <nl> - ret . put ( " columnfamily " , getColumnFamily ( ) ) ; <nl> - ret . put ( " completed " , Long . toString ( completed ) ) ; <nl> - ret . put ( " total " , Long . toString ( total ) ) ; <nl> - ret . put ( " taskType " , tasktype . toString ( ) ) ; <nl> - ret . put ( " unit " , unit . toString ( ) ) ; <nl> - ret . put ( " compactionId " , compactionId = = null ? " " : compactionId . toString ( ) ) ; <nl> + ret . put ( ID , metadata ! = null ? metadata . id . toString ( ) : " " ) ; <nl> + ret . put ( KEYSPACE , getKeyspace ( ) . orElse ( null ) ) ; <nl> + ret . put ( COLUMNFAMILY , getTable ( ) . orElse ( null ) ) ; <nl> + ret . put ( COMPLETED , Long . toString ( completed ) ) ; <nl> + ret . put ( TOTAL , Long . toString ( total ) ) ; <nl> + ret . put ( TASK _ TYPE , tasktype . toString ( ) ) ; <nl> + ret . put ( UNIT , unit . toString ( ) ) ; <nl> + ret . put ( COMPACTION _ ID , compactionId = = null ? " " : compactionId . toString ( ) ) ; <nl> return ret ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index 05891d2 . . 5c61982 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 1773 , 7 + 1773 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> for ( Holder holder : CompactionMetrics . getCompactions ( ) ) <nl> { <nl> - UUID holderId = holder . getCompactionInfo ( ) . compactionId ( ) ; <nl> + UUID holderId = holder . getCompactionInfo ( ) . getTaskId ( ) ; <nl> if ( holderId ! = null & & holderId . equals ( UUID . fromString ( compactionId ) ) ) <nl> holder . stop ( ) ; <nl> } <nl> @ @ - 1951 , 4 + 1951 , 15 @ @ public class CompactionManager implements CompactionManagerMBean <nl> break ; <nl> } <nl> } <nl> + <nl> + public List < CompactionInfo > getSSTableTasks ( ) <nl> + { <nl> + return CompactionMetrics . getCompactions ( ) <nl> + . stream ( ) <nl> + . map ( CompactionInfo . Holder : : getCompactionInfo ) <nl> + . filter ( task - > task . getTaskType ( ) ! = OperationType . COUNTER _ CACHE _ SAVE <nl> + & & task . getTaskType ( ) ! = OperationType . KEY _ CACHE _ SAVE <nl> + & & task . getTaskType ( ) ! = OperationType . ROW _ CACHE _ SAVE ) <nl> + . collect ( Collectors . toList ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / virtual / SSTableTasksTable . java b / src / java / org / apache / cassandra / db / virtual / SSTableTasksTable . java <nl> new file mode 100644 <nl> index 0000000 . . 8fb12ba <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / db / virtual / SSTableTasksTable . java <nl> @ @ - 0 , 0 + 1 , 69 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . db . virtual ; <nl> + <nl> + import org . apache . cassandra . db . compaction . CompactionInfo ; <nl> + import org . apache . cassandra . db . compaction . CompactionManager ; <nl> + import org . apache . cassandra . db . marshal . LongType ; <nl> + import org . apache . cassandra . db . marshal . UTF8Type ; <nl> + import org . apache . cassandra . db . marshal . UUIDType ; <nl> + import org . apache . cassandra . schema . TableMetadata ; <nl> + <nl> + final class SSTableTasksTable extends AbstractVirtualTable <nl> + { <nl> + private final static String KEYSPACE _ NAME = " keyspace _ name " ; <nl> + private final static String TABLE _ NAME = " table _ name " ; <nl> + private final static String TASK _ ID = " task _ id " ; <nl> + private final static String KIND = " kind " ; <nl> + private final static String PROGRESS = " progress " ; <nl> + private final static String TOTAL = " total " ; <nl> + private final static String UNIT = " unit " ; <nl> + <nl> + SSTableTasksTable ( String keyspace ) <nl> + { <nl> + super ( TableMetadata . builder ( keyspace , " sstable _ tasks " ) <nl> + . comment ( " current sstable tasks " ) <nl> + . kind ( TableMetadata . Kind . VIRTUAL ) <nl> + . addPartitionKeyColumn ( KEYSPACE _ NAME , UTF8Type . instance ) <nl> + . addClusteringColumn ( TABLE _ NAME , UTF8Type . instance ) <nl> + . addClusteringColumn ( TASK _ ID , UUIDType . instance ) <nl> + . addRegularColumn ( KIND , UTF8Type . instance ) <nl> + . addRegularColumn ( PROGRESS , LongType . instance ) <nl> + . addRegularColumn ( TOTAL , LongType . instance ) <nl> + . addRegularColumn ( UNIT , UTF8Type . instance ) <nl> + . build ( ) ) ; <nl> + } <nl> + <nl> + public DataSet data ( ) <nl> + { <nl> + SimpleDataSet result = new SimpleDataSet ( metadata ( ) ) ; <nl> + <nl> + for ( CompactionInfo task : CompactionManager . instance . getSSTableTasks ( ) ) <nl> + { <nl> + result . row ( task . getKeyspace ( ) . orElse ( " * " ) , <nl> + task . getTable ( ) . orElse ( " * " ) , <nl> + task . getTaskId ( ) ) <nl> + . column ( KIND , task . getTaskType ( ) . toString ( ) . toLowerCase ( ) ) <nl> + . column ( PROGRESS , task . getCompleted ( ) ) <nl> + . column ( TOTAL , task . getTotal ( ) ) <nl> + . column ( UNIT , task . getUnit ( ) . toString ( ) . toLowerCase ( ) ) ; <nl> + } <nl> + <nl> + return result ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / db / virtual / SystemViewsKeyspace . java b / src / java / org / apache / cassandra / db / virtual / SystemViewsKeyspace . java <nl> index 8d6f59b . . 5d33a63 100644 <nl> - - - a / src / java / org / apache / cassandra / db / virtual / SystemViewsKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / virtual / SystemViewsKeyspace . java <nl> @ @ - 27 , 6 + 27 , 6 @ @ public final class SystemViewsKeyspace extends VirtualKeyspace <nl> <nl> private SystemViewsKeyspace ( ) <nl> { <nl> - super ( NAME , ImmutableList . of ( ) ) ; <nl> + super ( NAME , ImmutableList . of ( new SSTableTasksTable ( NAME ) ) ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / CompactionStats . java b / src / java / org / apache / cassandra / tools / nodetool / CompactionStats . java <nl> index 574220e . . 497fe24 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / nodetool / CompactionStats . java <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / CompactionStats . java <nl> @ @ - 82 , 17 + 82 , 17 @ @ public class CompactionStats extends NodeToolCmd <nl> table . add ( " id " , " compaction type " , " keyspace " , " table " , " completed " , " total " , " unit " , " progress " ) ; <nl> for ( Map < String , String > c : compactions ) <nl> { <nl> - long total = Long . parseLong ( c . get ( " total " ) ) ; <nl> - long completed = Long . parseLong ( c . get ( " completed " ) ) ; <nl> - String taskType = c . get ( " taskType " ) ; <nl> - String keyspace = c . get ( " keyspace " ) ; <nl> - String columnFamily = c . get ( " columnfamily " ) ; <nl> - String unit = c . get ( " unit " ) ; <nl> + long total = Long . parseLong ( c . get ( CompactionInfo . TOTAL ) ) ; <nl> + long completed = Long . parseLong ( c . get ( CompactionInfo . COMPLETED ) ) ; <nl> + String taskType = c . get ( CompactionInfo . TASK _ TYPE ) ; <nl> + String keyspace = c . get ( CompactionInfo . KEYSPACE ) ; <nl> + String columnFamily = c . get ( CompactionInfo . COLUMNFAMILY ) ; <nl> + String unit = c . get ( CompactionInfo . UNIT ) ; <nl> boolean toFileSize = humanReadable & & Unit . isFileSize ( unit ) ; <nl> String completedStr = toFileSize ? FileUtils . stringifyFileSize ( completed ) : Long . toString ( completed ) ; <nl> String totalStr = toFileSize ? FileUtils . stringifyFileSize ( total ) : Long . toString ( total ) ; <nl> String percentComplete = total = = 0 ? " n / a " : new DecimalFormat ( " 0 . 00 " ) . format ( ( double ) completed / total * 100 ) + " % " ; <nl> - String id = c . get ( " compactionId " ) ; <nl> + String id = c . get ( CompactionInfo . COMPACTION _ ID ) ; <nl> table . add ( id , taskType , keyspace , columnFamily , completedStr , totalStr , unit , percentComplete ) ; <nl> if ( taskType . equals ( OperationType . COMPACTION . toString ( ) ) ) <nl> remainingBytes + = total - completed ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 1f54d4d . . 20a4e1f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 75 , 6 + 75 , 7 @ @ <nl> * ( cql3 ) Adds simple access to column timestamp and ttl ( CASSANDRA - 4217 ) <nl> * ( cql3 ) Fix range queries with secondary indexes ( CASSANDRA - 4257 ) <nl> * Better error messages from improper input in cli ( CASSANDRA - 3865 ) <nl> + * Try to stop all compaction upon Keyspace or ColumnFamily drop ( CASSANDRA - 4221 ) <nl> Merged from 1 . 0 : <nl> * Fix super columns bug where cache is not updated ( CASSANDRA - 4190 ) <nl> * fix maxTimestamp to include row tombstones ( CASSANDRA - 4116 ) <nl> diff - - git a / src / java / org / apache / cassandra / cache / AutoSavingCache . java b / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> index 2224c16 . . 8a9e007 100644 <nl> - - - a / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> + + + b / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> @ @ - 191 , 12 + 191 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> else <nl> type = OperationType . UNKNOWN ; <nl> <nl> - info = new CompactionInfo ( this . hashCode ( ) , <nl> - " Global " , <nl> - cacheType . toString ( ) , <nl> - type , <nl> - 0 , <nl> - estimatedTotalBytes ) ; <nl> + info = new CompactionInfo ( type , 0 , estimatedTotalBytes ) ; <nl> } <nl> <nl> public CompactionInfo getCompactionInfo ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / DefsTable . java b / src / java / org / apache / cassandra / db / DefsTable . java <nl> index 4fc8786 . . 074fb2e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / DefsTable . java <nl> + + + b / src / java / org / apache / cassandra / db / DefsTable . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ import org . apache . avro . io . DecoderFactory ; <nl> import org . apache . avro . specific . SpecificDatumReader ; <nl> import org . apache . avro . specific . SpecificRecord ; <nl> import org . apache . cassandra . config . * ; <nl> + import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . db . filter . QueryFilter ; <nl> import org . apache . cassandra . db . filter . QueryPath ; <nl> import org . apache . cassandra . db . marshal . AsciiType ; <nl> @ @ - 463 , 6 + 464 , 8 @ @ public class DefsTable <nl> KSMetaData ksm = Schema . instance . getTableDefinition ( ksName ) ; <nl> String snapshotName = Table . getTimestampedSnapshotName ( ksName ) ; <nl> <nl> + CompactionManager . instance . stopCompactionFor ( ksm . cfMetaData ( ) . values ( ) ) ; <nl> + <nl> / / remove all cfs from the table instance . <nl> for ( CFMetaData cfm : ksm . cfMetaData ( ) . values ( ) ) <nl> { <nl> @ @ - 496 , 6 + 499 , 8 @ @ public class DefsTable <nl> Schema . instance . purge ( cfm ) ; <nl> Schema . instance . setTableDefinition ( makeNewKeyspaceDefinition ( ksm , cfm ) ) ; <nl> <nl> + CompactionManager . instance . stopCompactionFor ( Arrays . asList ( cfm ) ) ; <nl> + <nl> if ( ! StorageService . instance . isClientMode ( ) ) <nl> { <nl> if ( DatabaseDescriptor . isAutoSnapshot ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java <nl> index 72eca8e . . 41441df 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java <nl> @ @ - 17 , 14 + 17 , 11 @ @ <nl> * / <nl> package org . apache . cassandra . db . compaction ; <nl> <nl> - import java . io . IOException ; <nl> - import java . util . ArrayList ; <nl> import java . util . List ; <nl> <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import org . apache . cassandra . io . sstable . SSTableReader ; <nl> import org . apache . cassandra . utils . CloseableIterator ; <nl> <nl> public abstract class AbstractCompactionIterable extends CompactionInfo . Holder implements Iterable < AbstractCompactedRow > <nl> @ @ - 53 , 8 + 50 , 6 @ @ public abstract class AbstractCompactionIterable extends CompactionInfo . Holder i <nl> public CompactionInfo getCompactionInfo ( ) <nl> { <nl> return new CompactionInfo ( this . hashCode ( ) , <nl> - controller . getKeyspace ( ) , <nl> - controller . getColumnFamily ( ) , <nl> type , <nl> bytesRead , <nl> totalBytes ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java b / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java <nl> index 374d895 . . 02b2433 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java <nl> @ @ - 21 , 48 + 21 , 56 @ @ import java . io . Serializable ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> <nl> + import org . apache . cassandra . config . CFMetaData ; <nl> + import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . service . StorageService ; <nl> <nl> / * * Implements serializable to allow structured info to be returned via JMX . * / <nl> public final class CompactionInfo implements Serializable <nl> { <nl> private static final long serialVersionUID = 3695381572726744816L ; <nl> - private final int id ; <nl> - private final String ksname ; <nl> - private final String cfname ; <nl> + private final CFMetaData cfm ; <nl> private final OperationType tasktype ; <nl> private final long bytesComplete ; <nl> private final long totalBytes ; <nl> <nl> - public CompactionInfo ( int id , String ksname , String cfname , OperationType tasktype , long bytesComplete , long totalBytes ) <nl> + public CompactionInfo ( OperationType tasktype , long bytesComplete , long totalBytes ) <nl> + { <nl> + this ( null , tasktype , bytesComplete , totalBytes ) ; <nl> + } <nl> + <nl> + public CompactionInfo ( Integer id , OperationType tasktype , long bytesComplete , long totalBytes ) <nl> { <nl> - this . id = id ; <nl> - this . ksname = ksname ; <nl> - this . cfname = cfname ; <nl> this . tasktype = tasktype ; <nl> this . bytesComplete = bytesComplete ; <nl> this . totalBytes = totalBytes ; <nl> + this . cfm = id = = null ? null : Schema . instance . getCFMetaData ( id ) ; <nl> } <nl> <nl> / * * @ return A copy of this CompactionInfo with updated progress . * / <nl> public CompactionInfo forProgress ( long bytesComplete , long totalBytes ) <nl> { <nl> - return new CompactionInfo ( id , ksname , cfname , tasktype , bytesComplete , totalBytes ) ; <nl> + return new CompactionInfo ( cfm = = null ? null : cfm . cfId , tasktype , bytesComplete , totalBytes ) ; <nl> } <nl> <nl> - public int getId ( ) <nl> + public Integer getId ( ) <nl> { <nl> - return id ; <nl> + return cfm = = null ? null : cfm . cfId ; <nl> } <nl> <nl> public String getKeyspace ( ) <nl> { <nl> - return ksname ; <nl> + return cfm = = null ? null : cfm . ksName ; <nl> } <nl> <nl> public String getColumnFamily ( ) <nl> { <nl> - return cfname ; <nl> + return cfm = = null ? null : cfm . cfName ; <nl> + } <nl> + <nl> + public CFMetaData getCFMetaData ( ) <nl> + { <nl> + return cfm ; <nl> } <nl> <nl> public long getBytesComplete ( ) <nl> @ @ - 83 , 7 + 91 , 7 @ @ public final class CompactionInfo implements Serializable <nl> public String toString ( ) <nl> { <nl> StringBuilder buff = new StringBuilder ( ) ; <nl> - buff . append ( getTaskType ( ) ) . append ( ' @ ' ) . append ( id ) ; <nl> + buff . append ( getTaskType ( ) ) . append ( ' @ ' ) . append ( getId ( ) ) ; <nl> buff . append ( ' ( ' ) . append ( getKeyspace ( ) ) . append ( " , " ) . append ( getColumnFamily ( ) ) ; <nl> buff . append ( " , " ) . append ( getBytesComplete ( ) ) . append ( ' / ' ) . append ( getTotalBytes ( ) ) ; <nl> return buff . append ( ' ) ' ) . toString ( ) ; <nl> @ @ - 92 , 9 + 100 , 9 @ @ public final class CompactionInfo implements Serializable <nl> public Map < String , String > asMap ( ) <nl> { <nl> Map < String , String > ret = new HashMap < String , String > ( ) ; <nl> - ret . put ( " id " , Integer . toString ( id ) ) ; <nl> - ret . put ( " keyspace " , ksname ) ; <nl> - ret . put ( " columnfamily " , cfname ) ; <nl> + ret . put ( " id " , Integer . toString ( getId ( ) ) ) ; <nl> + ret . put ( " keyspace " , getKeyspace ( ) ) ; <nl> + ret . put ( " columnfamily " , getColumnFamily ( ) ) ; <nl> ret . put ( " bytesComplete " , Long . toString ( bytesComplete ) ) ; <nl> ret . put ( " totalBytes " , Long . toString ( totalBytes ) ) ; <nl> ret . put ( " taskType " , tasktype . toString ( ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index 5925dc4 . . f2cc8db 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import javax . management . ObjectName ; <nl> import org . apache . cassandra . cache . AutoSavingCache ; <nl> import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; <nl> import org . apache . cassandra . concurrent . NamedThreadFactory ; <nl> + import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . db . * ; <nl> @ @ - 1209 , 8 + 1210 , 6 @ @ public class CompactionManager implements CompactionManagerMBean <nl> try <nl> { <nl> return new CompactionInfo ( this . hashCode ( ) , <nl> - sstable . descriptor . ksname , <nl> - sstable . descriptor . cfname , <nl> OperationType . CLEANUP , <nl> scanner . getCurrentPosition ( ) , <nl> scanner . getLengthInBytes ( ) ) ; <nl> @ @ - 1237 , 8 + 1236 , 6 @ @ public class CompactionManager implements CompactionManagerMBean <nl> try <nl> { <nl> return new CompactionInfo ( this . hashCode ( ) , <nl> - sstable . descriptor . ksname , <nl> - sstable . descriptor . cfname , <nl> OperationType . SCRUB , <nl> dataFile . getFilePointer ( ) , <nl> dataFile . length ( ) ) ; <nl> @ @ - 1259 , 4 + 1256 , 23 @ @ public class CompactionManager implements CompactionManagerMBean <nl> holder . stop ( ) ; <nl> } <nl> } <nl> + <nl> + / * * <nl> + * Try to stop all of the compactions for given ColumnFamilies . <nl> + * Note that this method does not wait indefinitely for all compactions to finish , maximum wait time is 30 secs . <nl> + * <nl> + * @ param columnFamilies The ColumnFamilies to try to stop compaction upon . <nl> + * / <nl> + public void stopCompactionFor ( Collection < CFMetaData > columnFamilies ) <nl> + { <nl> + assert columnFamilies ! = null ; <nl> + <nl> + for ( Holder compactionHolder : CompactionExecutor . getCompactions ( ) ) <nl> + { <nl> + CompactionInfo info = compactionHolder . getCompactionInfo ( ) ; <nl> + <nl> + if ( columnFamilies . contains ( info . getCFMetaData ( ) ) ) <nl> + compactionHolder . stop ( ) ; / / signal compaction to stop <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java <nl> index a434fa8 . . 69f0915 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java <nl> + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java <nl> @ @ - 48 , 8 + 48 , 6 @ @ public class SecondaryIndexBuilder extends CompactionInfo . Holder <nl> public CompactionInfo getCompactionInfo ( ) <nl> { <nl> return new CompactionInfo ( this . hashCode ( ) , <nl> - cfs . table . name , <nl> - cfs . columnFamily , <nl> OperationType . INDEX _ BUILD , <nl> iter . getBytesRead ( ) , <nl> iter . getTotalBytes ( ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> index 8fa32da . . 577f3ef 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> @ @ - 569 , 6 + 569 , 18 @ @ public class FBUtilities <nl> } <nl> } <nl> <nl> + public static void sleep ( int millis ) <nl> + { <nl> + try <nl> + { <nl> + Thread . sleep ( millis ) ; <nl> + } <nl> + catch ( InterruptedException e ) <nl> + { <nl> + throw new AssertionError ( ) ; <nl> + } <nl> + } <nl> + <nl> private static final class WrappedCloseableIterator < T > <nl> extends AbstractIterator < T > implements CloseableIterator < T > <nl> {

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 86842d0 . . 351ae37 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Add a virtual table to expose all running sstable tasks ( CASSANDRA - 14457 ) 
 * Let nodetool import take a list of directories ( CASSANDRA - 14442 ) 
 * Avoid unneeded memory allocations / cpu for disabled log levels ( CASSANDRA - 14488 ) 
 * Implement virtual keyspace interface ( CASSANDRA - 7622 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java b / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java 
 index ccdfeb4 . . 99df259 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . db . compaction ; 
 import java . io . Serializable ; 
 import java . util . HashMap ; 
 import java . util . Map ; 
 + import java . util . Optional ; 
 import java . util . UUID ; 
 
 import org . apache . cassandra . schema . TableMetadata ; 
 @ @ - 28 , 6 + 29 , 16 @ @ import org . apache . cassandra . schema . TableMetadata ; 
 public final class CompactionInfo implements Serializable 
 { 
 private static final long serialVersionUID = 3695381572726744816L ; 
 + 
 + public static final String ID = " id " ; 
 + public static final String KEYSPACE = " keyspace " ; 
 + public static final String COLUMNFAMILY = " columnfamily " ; 
 + public static final String COMPLETED = " completed " ; 
 + public static final String TOTAL = " total " ; 
 + public static final String TASK _ TYPE = " taskType " ; 
 + public static final String UNIT = " unit " ; 
 + public static final String COMPACTION _ ID = " compactionId " ; 
 + 
 private final TableMetadata metadata ; 
 private final OperationType tasktype ; 
 private final long completed ; 
 @ @ - 84 , 19 + 95 , 14 @ @ public final class CompactionInfo implements Serializable 
 return new CompactionInfo ( metadata , tasktype , complete , total , unit , compactionId ) ; 
 } 
 
 - public UUID getId ( ) 
 - { 
 - return metadata ! = null ? metadata . id . asUUID ( ) : null ; 
 - } 
 - 
 - public String getKeyspace ( ) 
 + public Optional < String > getKeyspace ( ) 
 { 
 - return metadata ! = null ? metadata . keyspace : null ; 
 + return Optional . ofNullable ( metadata ! = null ? metadata . keyspace : null ) ; 
 } 
 
 - public String getColumnFamily ( ) 
 + public Optional < String > getTable ( ) 
 { 
 - return metadata ! = null ? metadata . name : null ; 
 + return Optional . ofNullable ( metadata ! = null ? metadata . name : null ) ; 
 } 
 
 public TableMetadata getTableMetadata ( ) 
 @ @ - 119 , 19 + 125 , 24 @ @ public final class CompactionInfo implements Serializable 
 return tasktype ; 
 } 
 
 - public UUID compactionId ( ) 
 + public UUID getTaskId ( ) 
 { 
 return compactionId ; 
 } 
 
 + public Unit getUnit ( ) 
 + { 
 + return unit ; 
 + } 
 + 
 public String toString ( ) 
 { 
 StringBuilder buff = new StringBuilder ( ) ; 
 buff . append ( getTaskType ( ) ) ; 
 if ( metadata ! = null ) 
 { 
 - buff . append ( ' @ ' ) . append ( getId ( ) ) . append ( ' ( ' ) ; 
 - buff . append ( getKeyspace ( ) ) . append ( " , " ) . append ( getColumnFamily ( ) ) . append ( " , " ) ; 
 + buff . append ( ' @ ' ) . append ( metadata . id ) . append ( ' ( ' ) ; 
 + buff . append ( metadata . keyspace ) . append ( " , " ) . append ( metadata . name ) . append ( " , " ) ; 
 } 
 else 
 { 
 @ @ - 144 , 14 + 155 , 14 @ @ public final class CompactionInfo implements Serializable 
 public Map < String , String > asMap ( ) 
 { 
 Map < String , String > ret = new HashMap < String , String > ( ) ; 
 - ret . put ( " id " , getId ( ) = = null ? " " : getId ( ) . toString ( ) ) ; 
 - ret . put ( " keyspace " , getKeyspace ( ) ) ; 
 - ret . put ( " columnfamily " , getColumnFamily ( ) ) ; 
 - ret . put ( " completed " , Long . toString ( completed ) ) ; 
 - ret . put ( " total " , Long . toString ( total ) ) ; 
 - ret . put ( " taskType " , tasktype . toString ( ) ) ; 
 - ret . put ( " unit " , unit . toString ( ) ) ; 
 - ret . put ( " compactionId " , compactionId = = null ? " " : compactionId . toString ( ) ) ; 
 + ret . put ( ID , metadata ! = null ? metadata . id . toString ( ) : " " ) ; 
 + ret . put ( KEYSPACE , getKeyspace ( ) . orElse ( null ) ) ; 
 + ret . put ( COLUMNFAMILY , getTable ( ) . orElse ( null ) ) ; 
 + ret . put ( COMPLETED , Long . toString ( completed ) ) ; 
 + ret . put ( TOTAL , Long . toString ( total ) ) ; 
 + ret . put ( TASK _ TYPE , tasktype . toString ( ) ) ; 
 + ret . put ( UNIT , unit . toString ( ) ) ; 
 + ret . put ( COMPACTION _ ID , compactionId = = null ? " " : compactionId . toString ( ) ) ; 
 return ret ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index 05891d2 . . 5c61982 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 1773 , 7 + 1773 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 for ( Holder holder : CompactionMetrics . getCompactions ( ) ) 
 { 
 - UUID holderId = holder . getCompactionInfo ( ) . compactionId ( ) ; 
 + UUID holderId = holder . getCompactionInfo ( ) . getTaskId ( ) ; 
 if ( holderId ! = null & & holderId . equals ( UUID . fromString ( compactionId ) ) ) 
 holder . stop ( ) ; 
 } 
 @ @ - 1951 , 4 + 1951 , 15 @ @ public class CompactionManager implements CompactionManagerMBean 
 break ; 
 } 
 } 
 + 
 + public List < CompactionInfo > getSSTableTasks ( ) 
 + { 
 + return CompactionMetrics . getCompactions ( ) 
 + . stream ( ) 
 + . map ( CompactionInfo . Holder : : getCompactionInfo ) 
 + . filter ( task - > task . getTaskType ( ) ! = OperationType . COUNTER _ CACHE _ SAVE 
 + & & task . getTaskType ( ) ! = OperationType . KEY _ CACHE _ SAVE 
 + & & task . getTaskType ( ) ! = OperationType . ROW _ CACHE _ SAVE ) 
 + . collect ( Collectors . toList ( ) ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / virtual / SSTableTasksTable . java b / src / java / org / apache / cassandra / db / virtual / SSTableTasksTable . java 
 new file mode 100644 
 index 0000000 . . 8fb12ba 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / db / virtual / SSTableTasksTable . java 
 @ @ - 0 , 0 + 1 , 69 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . db . virtual ; 
 + 
 + import org . apache . cassandra . db . compaction . CompactionInfo ; 
 + import org . apache . cassandra . db . compaction . CompactionManager ; 
 + import org . apache . cassandra . db . marshal . LongType ; 
 + import org . apache . cassandra . db . marshal . UTF8Type ; 
 + import org . apache . cassandra . db . marshal . UUIDType ; 
 + import org . apache . cassandra . schema . TableMetadata ; 
 + 
 + final class SSTableTasksTable extends AbstractVirtualTable 
 + { 
 + private final static String KEYSPACE _ NAME = " keyspace _ name " ; 
 + private final static String TABLE _ NAME = " table _ name " ; 
 + private final static String TASK _ ID = " task _ id " ; 
 + private final static String KIND = " kind " ; 
 + private final static String PROGRESS = " progress " ; 
 + private final static String TOTAL = " total " ; 
 + private final static String UNIT = " unit " ; 
 + 
 + SSTableTasksTable ( String keyspace ) 
 + { 
 + super ( TableMetadata . builder ( keyspace , " sstable _ tasks " ) 
 + . comment ( " current sstable tasks " ) 
 + . kind ( TableMetadata . Kind . VIRTUAL ) 
 + . addPartitionKeyColumn ( KEYSPACE _ NAME , UTF8Type . instance ) 
 + . addClusteringColumn ( TABLE _ NAME , UTF8Type . instance ) 
 + . addClusteringColumn ( TASK _ ID , UUIDType . instance ) 
 + . addRegularColumn ( KIND , UTF8Type . instance ) 
 + . addRegularColumn ( PROGRESS , LongType . instance ) 
 + . addRegularColumn ( TOTAL , LongType . instance ) 
 + . addRegularColumn ( UNIT , UTF8Type . instance ) 
 + . build ( ) ) ; 
 + } 
 + 
 + public DataSet data ( ) 
 + { 
 + SimpleDataSet result = new SimpleDataSet ( metadata ( ) ) ; 
 + 
 + for ( CompactionInfo task : CompactionManager . instance . getSSTableTasks ( ) ) 
 + { 
 + result . row ( task . getKeyspace ( ) . orElse ( " * " ) , 
 + task . getTable ( ) . orElse ( " * " ) , 
 + task . getTaskId ( ) ) 
 + . column ( KIND , task . getTaskType ( ) . toString ( ) . toLowerCase ( ) ) 
 + . column ( PROGRESS , task . getCompleted ( ) ) 
 + . column ( TOTAL , task . getTotal ( ) ) 
 + . column ( UNIT , task . getUnit ( ) . toString ( ) . toLowerCase ( ) ) ; 
 + } 
 + 
 + return result ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / db / virtual / SystemViewsKeyspace . java b / src / java / org / apache / cassandra / db / virtual / SystemViewsKeyspace . java 
 index 8d6f59b . . 5d33a63 100644 
 - - - a / src / java / org / apache / cassandra / db / virtual / SystemViewsKeyspace . java 
 + + + b / src / java / org / apache / cassandra / db / virtual / SystemViewsKeyspace . java 
 @ @ - 27 , 6 + 27 , 6 @ @ public final class SystemViewsKeyspace extends VirtualKeyspace 
 
 private SystemViewsKeyspace ( ) 
 { 
 - super ( NAME , ImmutableList . of ( ) ) ; 
 + super ( NAME , ImmutableList . of ( new SSTableTasksTable ( NAME ) ) ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / CompactionStats . java b / src / java / org / apache / cassandra / tools / nodetool / CompactionStats . java 
 index 574220e . . 497fe24 100644 
 - - - a / src / java / org / apache / cassandra / tools / nodetool / CompactionStats . java 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / CompactionStats . java 
 @ @ - 82 , 17 + 82 , 17 @ @ public class CompactionStats extends NodeToolCmd 
 table . add ( " id " , " compaction type " , " keyspace " , " table " , " completed " , " total " , " unit " , " progress " ) ; 
 for ( Map < String , String > c : compactions ) 
 { 
 - long total = Long . parseLong ( c . get ( " total " ) ) ; 
 - long completed = Long . parseLong ( c . get ( " completed " ) ) ; 
 - String taskType = c . get ( " taskType " ) ; 
 - String keyspace = c . get ( " keyspace " ) ; 
 - String columnFamily = c . get ( " columnfamily " ) ; 
 - String unit = c . get ( " unit " ) ; 
 + long total = Long . parseLong ( c . get ( CompactionInfo . TOTAL ) ) ; 
 + long completed = Long . parseLong ( c . get ( CompactionInfo . COMPLETED ) ) ; 
 + String taskType = c . get ( CompactionInfo . TASK _ TYPE ) ; 
 + String keyspace = c . get ( CompactionInfo . KEYSPACE ) ; 
 + String columnFamily = c . get ( CompactionInfo . COLUMNFAMILY ) ; 
 + String unit = c . get ( CompactionInfo . UNIT ) ; 
 boolean toFileSize = humanReadable & & Unit . isFileSize ( unit ) ; 
 String completedStr = toFileSize ? FileUtils . stringifyFileSize ( completed ) : Long . toString ( completed ) ; 
 String totalStr = toFileSize ? FileUtils . stringifyFileSize ( total ) : Long . toString ( total ) ; 
 String percentComplete = total = = 0 ? " n / a " : new DecimalFormat ( " 0 . 00 " ) . format ( ( double ) completed / total * 100 ) + " % " ; 
 - String id = c . get ( " compactionId " ) ; 
 + String id = c . get ( CompactionInfo . COMPACTION _ ID ) ; 
 table . add ( id , taskType , keyspace , columnFamily , completedStr , totalStr , unit , percentComplete ) ; 
 if ( taskType . equals ( OperationType . COMPACTION . toString ( ) ) ) 
 remainingBytes + = total - completed ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 1f54d4d . . 20a4e1f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 75 , 6 + 75 , 7 @ @ 
 * ( cql3 ) Adds simple access to column timestamp and ttl ( CASSANDRA - 4217 ) 
 * ( cql3 ) Fix range queries with secondary indexes ( CASSANDRA - 4257 ) 
 * Better error messages from improper input in cli ( CASSANDRA - 3865 ) 
 + * Try to stop all compaction upon Keyspace or ColumnFamily drop ( CASSANDRA - 4221 ) 
 Merged from 1 . 0 : 
 * Fix super columns bug where cache is not updated ( CASSANDRA - 4190 ) 
 * fix maxTimestamp to include row tombstones ( CASSANDRA - 4116 ) 
 diff - - git a / src / java / org / apache / cassandra / cache / AutoSavingCache . java b / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 index 2224c16 . . 8a9e007 100644 
 - - - a / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 + + + b / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 @ @ - 191 , 12 + 191 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 else 
 type = OperationType . UNKNOWN ; 
 
 - info = new CompactionInfo ( this . hashCode ( ) , 
 - " Global " , 
 - cacheType . toString ( ) , 
 - type , 
 - 0 , 
 - estimatedTotalBytes ) ; 
 + info = new CompactionInfo ( type , 0 , estimatedTotalBytes ) ; 
 } 
 
 public CompactionInfo getCompactionInfo ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / DefsTable . java b / src / java / org / apache / cassandra / db / DefsTable . java 
 index 4fc8786 . . 074fb2e 100644 
 - - - a / src / java / org / apache / cassandra / db / DefsTable . java 
 + + + b / src / java / org / apache / cassandra / db / DefsTable . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import org . apache . avro . io . DecoderFactory ; 
 import org . apache . avro . specific . SpecificDatumReader ; 
 import org . apache . avro . specific . SpecificRecord ; 
 import org . apache . cassandra . config . * ; 
 + import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . db . filter . QueryFilter ; 
 import org . apache . cassandra . db . filter . QueryPath ; 
 import org . apache . cassandra . db . marshal . AsciiType ; 
 @ @ - 463 , 6 + 464 , 8 @ @ public class DefsTable 
 KSMetaData ksm = Schema . instance . getTableDefinition ( ksName ) ; 
 String snapshotName = Table . getTimestampedSnapshotName ( ksName ) ; 
 
 + CompactionManager . instance . stopCompactionFor ( ksm . cfMetaData ( ) . values ( ) ) ; 
 + 
 / / remove all cfs from the table instance . 
 for ( CFMetaData cfm : ksm . cfMetaData ( ) . values ( ) ) 
 { 
 @ @ - 496 , 6 + 499 , 8 @ @ public class DefsTable 
 Schema . instance . purge ( cfm ) ; 
 Schema . instance . setTableDefinition ( makeNewKeyspaceDefinition ( ksm , cfm ) ) ; 
 
 + CompactionManager . instance . stopCompactionFor ( Arrays . asList ( cfm ) ) ; 
 + 
 if ( ! StorageService . instance . isClientMode ( ) ) 
 { 
 if ( DatabaseDescriptor . isAutoSnapshot ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java 
 index 72eca8e . . 41441df 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java 
 @ @ - 17 , 14 + 17 , 11 @ @ 
 * / 
 package org . apache . cassandra . db . compaction ; 
 
 - import java . io . IOException ; 
 - import java . util . ArrayList ; 
 import java . util . List ; 
 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import org . apache . cassandra . io . sstable . SSTableReader ; 
 import org . apache . cassandra . utils . CloseableIterator ; 
 
 public abstract class AbstractCompactionIterable extends CompactionInfo . Holder implements Iterable < AbstractCompactedRow > 
 @ @ - 53 , 8 + 50 , 6 @ @ public abstract class AbstractCompactionIterable extends CompactionInfo . Holder i 
 public CompactionInfo getCompactionInfo ( ) 
 { 
 return new CompactionInfo ( this . hashCode ( ) , 
 - controller . getKeyspace ( ) , 
 - controller . getColumnFamily ( ) , 
 type , 
 bytesRead , 
 totalBytes ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java b / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java 
 index 374d895 . . 02b2433 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java 
 @ @ - 21 , 48 + 21 , 56 @ @ import java . io . Serializable ; 
 import java . util . HashMap ; 
 import java . util . Map ; 
 
 + import org . apache . cassandra . config . CFMetaData ; 
 + import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . service . StorageService ; 
 
 / * * Implements serializable to allow structured info to be returned via JMX . * / 
 public final class CompactionInfo implements Serializable 
 { 
 private static final long serialVersionUID = 3695381572726744816L ; 
 - private final int id ; 
 - private final String ksname ; 
 - private final String cfname ; 
 + private final CFMetaData cfm ; 
 private final OperationType tasktype ; 
 private final long bytesComplete ; 
 private final long totalBytes ; 
 
 - public CompactionInfo ( int id , String ksname , String cfname , OperationType tasktype , long bytesComplete , long totalBytes ) 
 + public CompactionInfo ( OperationType tasktype , long bytesComplete , long totalBytes ) 
 + { 
 + this ( null , tasktype , bytesComplete , totalBytes ) ; 
 + } 
 + 
 + public CompactionInfo ( Integer id , OperationType tasktype , long bytesComplete , long totalBytes ) 
 { 
 - this . id = id ; 
 - this . ksname = ksname ; 
 - this . cfname = cfname ; 
 this . tasktype = tasktype ; 
 this . bytesComplete = bytesComplete ; 
 this . totalBytes = totalBytes ; 
 + this . cfm = id = = null ? null : Schema . instance . getCFMetaData ( id ) ; 
 } 
 
 / * * @ return A copy of this CompactionInfo with updated progress . * / 
 public CompactionInfo forProgress ( long bytesComplete , long totalBytes ) 
 { 
 - return new CompactionInfo ( id , ksname , cfname , tasktype , bytesComplete , totalBytes ) ; 
 + return new CompactionInfo ( cfm = = null ? null : cfm . cfId , tasktype , bytesComplete , totalBytes ) ; 
 } 
 
 - public int getId ( ) 
 + public Integer getId ( ) 
 { 
 - return id ; 
 + return cfm = = null ? null : cfm . cfId ; 
 } 
 
 public String getKeyspace ( ) 
 { 
 - return ksname ; 
 + return cfm = = null ? null : cfm . ksName ; 
 } 
 
 public String getColumnFamily ( ) 
 { 
 - return cfname ; 
 + return cfm = = null ? null : cfm . cfName ; 
 + } 
 + 
 + public CFMetaData getCFMetaData ( ) 
 + { 
 + return cfm ; 
 } 
 
 public long getBytesComplete ( ) 
 @ @ - 83 , 7 + 91 , 7 @ @ public final class CompactionInfo implements Serializable 
 public String toString ( ) 
 { 
 StringBuilder buff = new StringBuilder ( ) ; 
 - buff . append ( getTaskType ( ) ) . append ( ' @ ' ) . append ( id ) ; 
 + buff . append ( getTaskType ( ) ) . append ( ' @ ' ) . append ( getId ( ) ) ; 
 buff . append ( ' ( ' ) . append ( getKeyspace ( ) ) . append ( " , " ) . append ( getColumnFamily ( ) ) ; 
 buff . append ( " , " ) . append ( getBytesComplete ( ) ) . append ( ' / ' ) . append ( getTotalBytes ( ) ) ; 
 return buff . append ( ' ) ' ) . toString ( ) ; 
 @ @ - 92 , 9 + 100 , 9 @ @ public final class CompactionInfo implements Serializable 
 public Map < String , String > asMap ( ) 
 { 
 Map < String , String > ret = new HashMap < String , String > ( ) ; 
 - ret . put ( " id " , Integer . toString ( id ) ) ; 
 - ret . put ( " keyspace " , ksname ) ; 
 - ret . put ( " columnfamily " , cfname ) ; 
 + ret . put ( " id " , Integer . toString ( getId ( ) ) ) ; 
 + ret . put ( " keyspace " , getKeyspace ( ) ) ; 
 + ret . put ( " columnfamily " , getColumnFamily ( ) ) ; 
 ret . put ( " bytesComplete " , Long . toString ( bytesComplete ) ) ; 
 ret . put ( " totalBytes " , Long . toString ( totalBytes ) ) ; 
 ret . put ( " taskType " , tasktype . toString ( ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index 5925dc4 . . f2cc8db 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import javax . management . ObjectName ; 
 import org . apache . cassandra . cache . AutoSavingCache ; 
 import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; 
 import org . apache . cassandra . concurrent . NamedThreadFactory ; 
 + import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . db . * ; 
 @ @ - 1209 , 8 + 1210 , 6 @ @ public class CompactionManager implements CompactionManagerMBean 
 try 
 { 
 return new CompactionInfo ( this . hashCode ( ) , 
 - sstable . descriptor . ksname , 
 - sstable . descriptor . cfname , 
 OperationType . CLEANUP , 
 scanner . getCurrentPosition ( ) , 
 scanner . getLengthInBytes ( ) ) ; 
 @ @ - 1237 , 8 + 1236 , 6 @ @ public class CompactionManager implements CompactionManagerMBean 
 try 
 { 
 return new CompactionInfo ( this . hashCode ( ) , 
 - sstable . descriptor . ksname , 
 - sstable . descriptor . cfname , 
 OperationType . SCRUB , 
 dataFile . getFilePointer ( ) , 
 dataFile . length ( ) ) ; 
 @ @ - 1259 , 4 + 1256 , 23 @ @ public class CompactionManager implements CompactionManagerMBean 
 holder . stop ( ) ; 
 } 
 } 
 + 
 + / * * 
 + * Try to stop all of the compactions for given ColumnFamilies . 
 + * Note that this method does not wait indefinitely for all compactions to finish , maximum wait time is 30 secs . 
 + * 
 + * @ param columnFamilies The ColumnFamilies to try to stop compaction upon . 
 + * / 
 + public void stopCompactionFor ( Collection < CFMetaData > columnFamilies ) 
 + { 
 + assert columnFamilies ! = null ; 
 + 
 + for ( Holder compactionHolder : CompactionExecutor . getCompactions ( ) ) 
 + { 
 + CompactionInfo info = compactionHolder . getCompactionInfo ( ) ; 
 + 
 + if ( columnFamilies . contains ( info . getCFMetaData ( ) ) ) 
 + compactionHolder . stop ( ) ; / / signal compaction to stop 
 + } 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java 
 index a434fa8 . . 69f0915 100644 
 - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java 
 + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java 
 @ @ - 48 , 8 + 48 , 6 @ @ public class SecondaryIndexBuilder extends CompactionInfo . Holder 
 public CompactionInfo getCompactionInfo ( ) 
 { 
 return new CompactionInfo ( this . hashCode ( ) , 
 - cfs . table . name , 
 - cfs . columnFamily , 
 OperationType . INDEX _ BUILD , 
 iter . getBytesRead ( ) , 
 iter . getTotalBytes ( ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 index 8fa32da . . 577f3ef 100644 
 - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java 
 + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 @ @ - 569 , 6 + 569 , 18 @ @ public class FBUtilities 
 } 
 } 
 
 + public static void sleep ( int millis ) 
 + { 
 + try 
 + { 
 + Thread . sleep ( millis ) ; 
 + } 
 + catch ( InterruptedException e ) 
 + { 
 + throw new AssertionError ( ) ; 
 + } 
 + } 
 + 
 private static final class WrappedCloseableIterator < T > 
 extends AbstractIterator < T > implements CloseableIterator < T > 
 {
