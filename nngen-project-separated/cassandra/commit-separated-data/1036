BLEU SCORE: 0.011246923682765546

TEST MSG: Remove unecessary override
GENERATED MSG: add decompose methods to new - since - 0 . 7 AbstractTypes

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / marshal / SimpleDateType . java b / src / java / org / apache / cassandra / db / marshal / SimpleDateType . java <nl> index 6e435ee . . cae9707 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / SimpleDateType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / SimpleDateType . java <nl> @ @ - 61 , 12 + 61 , 6 @ @ public class SimpleDateType extends AbstractType < Integer > <nl> } <nl> <nl> @ Override <nl> - public boolean isCompatibleWith ( AbstractType < ? > previous ) <nl> - { <nl> - return super . isCompatibleWith ( previous ) ; <nl> - } <nl> - <nl> - @ Override <nl> public boolean isValueCompatibleWithInternal ( AbstractType < ? > otherType ) <nl> { <nl> return this = = otherType | | otherType = = Int32Type . instance ;
NEAREST DIFF (one line): diff - - git a / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java b / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java <nl> index 8969bfd . . 0506b66 100644 <nl> - - - a / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java <nl> + + + b / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java <nl> @ @ - 179 , 8 + 179 , 8 @ @ public class CassandraStorage extends LoadFunc implements StoreFuncInterface <nl> AbstractType default _ validator = null ; <nl> try <nl> { <nl> - comparator = FBUtilities . getInstance ( cfDef . comparator _ type , " comparator " ) ; <nl> - default _ validator = FBUtilities . getInstance ( cfDef . default _ validation _ class , " validator " ) ; <nl> + comparator = FBUtilities . getComparator ( cfDef . comparator _ type ) ; <nl> + default _ validator = FBUtilities . getComparator ( cfDef . default _ validation _ class ) ; <nl> } <nl> catch ( ConfigurationException e ) <nl> { <nl> @ @ - 202 , 7 + 202 , 7 @ @ public class CassandraStorage extends LoadFunc implements StoreFuncInterface <nl> AbstractType validator = null ; <nl> try <nl> { <nl> - validator = FBUtilities . getInstance ( cd . getValidation _ class ( ) , " validator " ) ; <nl> + validator = FBUtilities . getComparator ( cd . getValidation _ class ( ) ) ; <nl> validators . put ( cd . name , validator ) ; <nl> } <nl> catch ( ConfigurationException e ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / AsciiType . java b / src / java / org / apache / cassandra / db / marshal / AsciiType . java <nl> index 1d0f24d . . b838a06 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / AsciiType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / AsciiType . java <nl> @ @ - 32 , 11 + 32 , 6 @ @ public class AsciiType extends AbstractType < String > <nl> { <nl> public static final AsciiType instance = new AsciiType ( ) ; <nl> <nl> - public static AsciiType getInstance ( ) <nl> - { <nl> - return instance ; <nl> - } <nl> - <nl> AsciiType ( ) { } / / singleton <nl> <nl> public String compose ( ByteBuffer bytes ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / BytesType . java b / src / java / org / apache / cassandra / db / marshal / BytesType . java <nl> index d6f9bfa . . 41d147a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / BytesType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / BytesType . java <nl> @ @ - 29 , 11 + 29 , 6 @ @ public class BytesType extends AbstractType < ByteBuffer > <nl> { <nl> public static final BytesType instance = new BytesType ( ) ; <nl> <nl> - public static BytesType getInstance ( ) <nl> - { <nl> - return instance ; <nl> - } <nl> - <nl> BytesType ( ) { } / / singleton <nl> <nl> public ByteBuffer compose ( ByteBuffer bytes ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / IntegerType . java b / src / java / org / apache / cassandra / db / marshal / IntegerType . java <nl> index 4c14ab6 . . de23446 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / IntegerType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / IntegerType . java <nl> @ @ - 29 , 12 + 29 , 6 @ @ public final class IntegerType extends AbstractType < BigInteger > <nl> { <nl> public static final IntegerType instance = new IntegerType ( ) ; <nl> <nl> - public static IntegerType getInstance ( ) <nl> - { <nl> - return instance ; <nl> - } <nl> - <nl> - <nl> private static int findMostSignificantByte ( ByteBuffer bytes ) <nl> { <nl> int len = bytes . remaining ( ) - 1 ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java b / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java <nl> index d4e27e3 . . a4ec39f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java <nl> @ @ - 30 , 11 + 30 , 6 @ @ public class LexicalUUIDType extends AbstractType < UUID > <nl> { <nl> public static final LexicalUUIDType instance = new LexicalUUIDType ( ) ; <nl> <nl> - public static LexicalUUIDType getInstance ( ) <nl> - { <nl> - return instance ; <nl> - } <nl> - <nl> LexicalUUIDType ( ) { } / / singleton <nl> <nl> public UUID compose ( ByteBuffer bytes ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / LongType . java b / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> index dc0ddb2 . . 34c6f37 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> @ @ - 29 , 11 + 29 , 6 @ @ public class LongType extends AbstractType < Long > <nl> { <nl> public static final LongType instance = new LongType ( ) ; <nl> <nl> - public static LongType getInstance ( ) <nl> - { <nl> - return instance ; <nl> - } <nl> - <nl> LongType ( ) { } / / singleton <nl> <nl> public Long compose ( ByteBuffer bytes ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> index 47d59b2 . . 078479f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> @ @ - 30 , 11 + 30 , 6 @ @ public class TimeUUIDType extends AbstractType < UUID > <nl> { <nl> public static final TimeUUIDType instance = new TimeUUIDType ( ) ; <nl> <nl> - public static TimeUUIDType getInstance ( ) <nl> - { <nl> - return instance ; <nl> - } <nl> - <nl> TimeUUIDType ( ) { } / / singleton <nl> <nl> public UUID compose ( ByteBuffer bytes ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / UTF8Type . java b / src / java / org / apache / cassandra / db / marshal / UTF8Type . java <nl> index 87c8937 . . 116a2ed 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / UTF8Type . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / UTF8Type . java <nl> @ @ - 30 , 11 + 30 , 6 @ @ public class UTF8Type extends AbstractType < String > <nl> { <nl> public static final UTF8Type instance = new UTF8Type ( ) ; <nl> <nl> - public static UTF8Type getInstance ( ) <nl> - { <nl> - return instance ; <nl> - } <nl> - <nl> UTF8Type ( ) { } / / singleton <nl> <nl> public String compose ( ByteBuffer bytes ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> index 87bed53 . . 1f33a05 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> @ @ - 511 , 7 + 511 , 6 @ @ public class FBUtilities <nl> <nl> / * * <nl> * Constructs an instance of the given class , which must have a no - arg constructor . <nl> - * TODO : Similar method for our ' instance member ' singleton pattern would be nice . <nl> * @ param classname Fully qualified classname . <nl> * @ param readable Descriptive noun for the role the class plays . <nl> * @ throws ConfigurationException If the class cannot be found . <nl> @ @ - 543 , 31 + 542 , 6 @ @ public class FBUtilities <nl> } <nl> } <nl> <nl> - public static < T > T getInstance ( String classname , String readable ) throws ConfigurationException <nl> - { <nl> - Class cls = classForName ( classname , readable ) ; <nl> - T rval = null ; <nl> - try <nl> - { <nl> - rval = ( T ) cls . getDeclaredMethod ( " getInstance " ) . invoke ( new Object [ ] { null , null } ) ; <nl> - <nl> - } <nl> - catch ( NoSuchMethodException e ) <nl> - { <nl> - throw new ConfigurationException ( " Class does not have the getInstance method with no arguments " ) ; <nl> - } <nl> - catch ( InvocationTargetException e ) <nl> - { <nl> - throw new ConfigurationException ( String . format ( " Could not call method getInstance on % s class % s " , readable , classname ) ) ; <nl> - } <nl> - catch ( IllegalAccessException e ) <nl> - { <nl> - throw new ConfigurationException ( String . format ( " Could not call method getInstance on % s class % s " , readable , classname ) ) ; <nl> - } <nl> - <nl> - return rval ; <nl> - } <nl> - <nl> public static < T extends Comparable > SortedSet < T > singleton ( T column ) <nl> { <nl> return new TreeSet < T > ( Arrays . asList ( column ) ) ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / marshal / SimpleDateType . java b / src / java / org / apache / cassandra / db / marshal / SimpleDateType . java 
 index 6e435ee . . cae9707 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / SimpleDateType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / SimpleDateType . java 
 @ @ - 61 , 12 + 61 , 6 @ @ public class SimpleDateType extends AbstractType < Integer > 
 } 
 
 @ Override 
 - public boolean isCompatibleWith ( AbstractType < ? > previous ) 
 - { 
 - return super . isCompatibleWith ( previous ) ; 
 - } 
 - 
 - @ Override 
 public boolean isValueCompatibleWithInternal ( AbstractType < ? > otherType ) 
 { 
 return this = = otherType | | otherType = = Int32Type . instance ;

NEAREST DIFF:
diff - - git a / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java b / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java 
 index 8969bfd . . 0506b66 100644 
 - - - a / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java 
 + + + b / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java 
 @ @ - 179 , 8 + 179 , 8 @ @ public class CassandraStorage extends LoadFunc implements StoreFuncInterface 
 AbstractType default _ validator = null ; 
 try 
 { 
 - comparator = FBUtilities . getInstance ( cfDef . comparator _ type , " comparator " ) ; 
 - default _ validator = FBUtilities . getInstance ( cfDef . default _ validation _ class , " validator " ) ; 
 + comparator = FBUtilities . getComparator ( cfDef . comparator _ type ) ; 
 + default _ validator = FBUtilities . getComparator ( cfDef . default _ validation _ class ) ; 
 } 
 catch ( ConfigurationException e ) 
 { 
 @ @ - 202 , 7 + 202 , 7 @ @ public class CassandraStorage extends LoadFunc implements StoreFuncInterface 
 AbstractType validator = null ; 
 try 
 { 
 - validator = FBUtilities . getInstance ( cd . getValidation _ class ( ) , " validator " ) ; 
 + validator = FBUtilities . getComparator ( cd . getValidation _ class ( ) ) ; 
 validators . put ( cd . name , validator ) ; 
 } 
 catch ( ConfigurationException e ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / AsciiType . java b / src / java / org / apache / cassandra / db / marshal / AsciiType . java 
 index 1d0f24d . . b838a06 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / AsciiType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / AsciiType . java 
 @ @ - 32 , 11 + 32 , 6 @ @ public class AsciiType extends AbstractType < String > 
 { 
 public static final AsciiType instance = new AsciiType ( ) ; 
 
 - public static AsciiType getInstance ( ) 
 - { 
 - return instance ; 
 - } 
 - 
 AsciiType ( ) { } / / singleton 
 
 public String compose ( ByteBuffer bytes ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / BytesType . java b / src / java / org / apache / cassandra / db / marshal / BytesType . java 
 index d6f9bfa . . 41d147a 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / BytesType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / BytesType . java 
 @ @ - 29 , 11 + 29 , 6 @ @ public class BytesType extends AbstractType < ByteBuffer > 
 { 
 public static final BytesType instance = new BytesType ( ) ; 
 
 - public static BytesType getInstance ( ) 
 - { 
 - return instance ; 
 - } 
 - 
 BytesType ( ) { } / / singleton 
 
 public ByteBuffer compose ( ByteBuffer bytes ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / IntegerType . java b / src / java / org / apache / cassandra / db / marshal / IntegerType . java 
 index 4c14ab6 . . de23446 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / IntegerType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / IntegerType . java 
 @ @ - 29 , 12 + 29 , 6 @ @ public final class IntegerType extends AbstractType < BigInteger > 
 { 
 public static final IntegerType instance = new IntegerType ( ) ; 
 
 - public static IntegerType getInstance ( ) 
 - { 
 - return instance ; 
 - } 
 - 
 - 
 private static int findMostSignificantByte ( ByteBuffer bytes ) 
 { 
 int len = bytes . remaining ( ) - 1 ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java b / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java 
 index d4e27e3 . . a4ec39f 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java 
 @ @ - 30 , 11 + 30 , 6 @ @ public class LexicalUUIDType extends AbstractType < UUID > 
 { 
 public static final LexicalUUIDType instance = new LexicalUUIDType ( ) ; 
 
 - public static LexicalUUIDType getInstance ( ) 
 - { 
 - return instance ; 
 - } 
 - 
 LexicalUUIDType ( ) { } / / singleton 
 
 public UUID compose ( ByteBuffer bytes ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / LongType . java b / src / java / org / apache / cassandra / db / marshal / LongType . java 
 index dc0ddb2 . . 34c6f37 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / LongType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / LongType . java 
 @ @ - 29 , 11 + 29 , 6 @ @ public class LongType extends AbstractType < Long > 
 { 
 public static final LongType instance = new LongType ( ) ; 
 
 - public static LongType getInstance ( ) 
 - { 
 - return instance ; 
 - } 
 - 
 LongType ( ) { } / / singleton 
 
 public Long compose ( ByteBuffer bytes ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 index 47d59b2 . . 078479f 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 @ @ - 30 , 11 + 30 , 6 @ @ public class TimeUUIDType extends AbstractType < UUID > 
 { 
 public static final TimeUUIDType instance = new TimeUUIDType ( ) ; 
 
 - public static TimeUUIDType getInstance ( ) 
 - { 
 - return instance ; 
 - } 
 - 
 TimeUUIDType ( ) { } / / singleton 
 
 public UUID compose ( ByteBuffer bytes ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / UTF8Type . java b / src / java / org / apache / cassandra / db / marshal / UTF8Type . java 
 index 87c8937 . . 116a2ed 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / UTF8Type . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / UTF8Type . java 
 @ @ - 30 , 11 + 30 , 6 @ @ public class UTF8Type extends AbstractType < String > 
 { 
 public static final UTF8Type instance = new UTF8Type ( ) ; 
 
 - public static UTF8Type getInstance ( ) 
 - { 
 - return instance ; 
 - } 
 - 
 UTF8Type ( ) { } / / singleton 
 
 public String compose ( ByteBuffer bytes ) 
 diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 index 87bed53 . . 1f33a05 100644 
 - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java 
 + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 @ @ - 511 , 7 + 511 , 6 @ @ public class FBUtilities 
 
 / * * 
 * Constructs an instance of the given class , which must have a no - arg constructor . 
 - * TODO : Similar method for our ' instance member ' singleton pattern would be nice . 
 * @ param classname Fully qualified classname . 
 * @ param readable Descriptive noun for the role the class plays . 
 * @ throws ConfigurationException If the class cannot be found . 
 @ @ - 543 , 31 + 542 , 6 @ @ public class FBUtilities 
 } 
 } 
 
 - public static < T > T getInstance ( String classname , String readable ) throws ConfigurationException 
 - { 
 - Class cls = classForName ( classname , readable ) ; 
 - T rval = null ; 
 - try 
 - { 
 - rval = ( T ) cls . getDeclaredMethod ( " getInstance " ) . invoke ( new Object [ ] { null , null } ) ; 
 - 
 - } 
 - catch ( NoSuchMethodException e ) 
 - { 
 - throw new ConfigurationException ( " Class does not have the getInstance method with no arguments " ) ; 
 - } 
 - catch ( InvocationTargetException e ) 
 - { 
 - throw new ConfigurationException ( String . format ( " Could not call method getInstance on % s class % s " , readable , classname ) ) ; 
 - } 
 - catch ( IllegalAccessException e ) 
 - { 
 - throw new ConfigurationException ( String . format ( " Could not call method getInstance on % s class % s " , readable , classname ) ) ; 
 - } 
 - 
 - return rval ; 
 - } 
 - 
 public static < T extends Comparable > SortedSet < T > singleton ( T column ) 
 { 
 return new TreeSet < T > ( Arrays . asList ( column ) ) ;
