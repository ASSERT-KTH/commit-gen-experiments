BLEU SCORE: 0.09535414040914189

TEST MSG: cqlsh : use python driver for CQL keyword list
GENERATED MSG: cqlsh : Add row count to SELECT output

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index dcae493 . . 92dcf59 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 9 <nl> + * ( cqlsh ) update list of CQL keywords ( CASSANDRA - 9232 ) <nl> * Avoid race condition during read repair ( CASSANDRA - 9460 ) <nl> * ( cqlsh ) default load - from - file encoding to utf - 8 ( CASSANDRA - 9898 ) <nl> * Avoid returning Permission . NONE when failing to query users table ( CASSANDRA - 10168 ) <nl> diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py <nl> index 92e3f12 . . 2857a7e 100644 <nl> - - - a / pylib / cqlshlib / cql3handling . py <nl> + + + b / pylib / cqlshlib / cql3handling . py <nl> @ @ - 37 , 19 + 37 , 6 @ @ SYSTEM _ KEYSPACES = ( ' system ' , ' system _ traces ' , ' system _ auth ' ) <nl> NONALTERBALE _ KEYSPACES = ( ' system ' ) <nl> <nl> class Cql3ParsingRuleSet ( CqlParsingRuleSet ) : <nl> - keywords = set ( ( <nl> - ' select ' , ' from ' , ' where ' , ' and ' , ' key ' , ' insert ' , ' update ' , ' with ' , <nl> - ' limit ' , ' using ' , ' use ' , ' count ' , ' set ' , <nl> - ' begin ' , ' apply ' , ' batch ' , ' truncate ' , ' delete ' , ' in ' , ' create ' , <nl> - ' keyspace ' , ' schema ' , ' columnfamily ' , ' table ' , ' index ' , ' on ' , ' drop ' , <nl> - ' primary ' , ' into ' , ' values ' , ' timestamp ' , ' ttl ' , ' alter ' , ' add ' , ' type ' , <nl> - ' compact ' , ' storage ' , ' order ' , ' by ' , ' asc ' , ' desc ' , ' clustering ' , <nl> - ' token ' , ' writetime ' , ' map ' , ' list ' , ' to ' , ' custom ' , ' if ' , ' not ' <nl> - ) ) <nl> - <nl> - unreserved _ keywords = set ( ( <nl> - ' key ' , ' clustering ' , ' ttl ' , ' compact ' , ' storage ' , ' type ' , ' values ' , ' custom ' , ' exists ' <nl> - ) ) <nl> <nl> columnfamily _ layout _ options = ( <nl> ( ' bloom _ filter _ fp _ chance ' , None ) , <nl> @ @ - 89 , 10 + 76 , 6 @ @ class Cql3ParsingRuleSet ( CqlParsingRuleSet ) : <nl> ' SERIAL ' <nl> ) <nl> <nl> - maybe _ escape _ name = staticmethod ( maybe _ escape _ name ) <nl> - <nl> - escape _ name = staticmethod ( escape _ name ) <nl> - <nl> @ classmethod <nl> def escape _ value ( cls , value ) : <nl> if value is None : <nl> @ @ - 132 , 8 + 115 , 6 @ @ explain _ completion = CqlRuleSet . explain _ completion <nl> dequote _ value = CqlRuleSet . dequote _ value <nl> dequote _ name = CqlRuleSet . dequote _ name <nl> escape _ value = CqlRuleSet . escape _ value <nl> - maybe _ escape _ name = CqlRuleSet . maybe _ escape _ name <nl> - <nl> <nl> # BEGIN SYNTAX / COMPLETION RULE DEFINITIONS <nl> <nl> @ @ - 251 , 7 + 232 , 7 @ @ JUNK : : = / ( [ \ t \ r \ f \ v ] + | ( - - | [ / ] [ / ] ) [ ^ \ n \ r ] * ( [ \ n \ r ] | $ ) | [ / ] [ * ] . * ? [ * ] [ / ] ) / ; <nl> ; <nl> <nl> # timestamp is included here , since it ' s also a keyword <nl> - < simpleStorageType > : : = typename = ( < identifier > | < stringLiteral > | < K _ TIMESTAMP > ) ; <nl> + < simpleStorageType > : : = typename = ( < identifier > | < stringLiteral > | " timestamp " ) ; <nl> <nl> < userType > : : = utname = < cfOrKsName > ; <nl> <nl> @ @ - 284 , 14 + 265 , 14 @ @ JUNK : : = / ( [ \ t \ r \ f \ v ] + | ( - - | [ / ] [ / ] ) [ ^ \ n \ r ] * ( [ \ n \ r ] | $ ) | [ / ] [ * ] . * ? [ * ] [ / ] ) / ; <nl> | < unreservedKeyword > ; <nl> <nl> < unreservedKeyword > : : = nocomplete = <nl> - ( < K _ KEY > <nl> - | < K _ CLUSTERING > <nl> - # | < K _ COUNT > - - to get count ( * ) completion , treat count as reserved <nl> - | < K _ TTL > <nl> - | < K _ COMPACT > <nl> - | < K _ STORAGE > <nl> - | < K _ TYPE > <nl> - | < K _ VALUES > ) <nl> + ( " key " <nl> + | " clustering " <nl> + # | " count " - - to get count ( * ) completion , treat count as reserved <nl> + | " ttl " <nl> + | " compact " <nl> + | " storage " <nl> + | " type " <nl> + | " values " ) <nl> ; <nl> <nl> < property > : : = [ propname ] = < cident > propeq = " = " [ propval ] = < propertyValue > <nl> @ @ - 1172 , 7 + 1153 , 7 @ @ def username _ name _ completer ( ctxt , cass ) : <nl> return " ' % s ' " % name <nl> <nl> # disable completion for CREATE USER . <nl> - if ctxt . matched [ 0 ] [ 0 ] = = ' K _ CREATE ' : <nl> + if ctxt . matched [ 0 ] [ 0 ] = = ' create ' : <nl> return [ Hint ( ' < username > ' ) ] <nl> <nl> session = cass . session <nl> diff - - git a / pylib / cqlshlib / cqlhandling . py b / pylib / cqlshlib / cqlhandling . py <nl> index 1836961 . . 4009125 100644 <nl> - - - a / pylib / cqlshlib / cqlhandling . py <nl> + + + b / pylib / cqlshlib / cqlhandling . py <nl> @ @ - 24 , 7 + 24 , 6 @ @ Hint = pylexotron . Hint <nl> <nl> <nl> class CqlParsingRuleSet ( pylexotron . ParsingRuleSet ) : <nl> - keywords = set ( ) <nl> <nl> available _ compression _ classes = ( <nl> ' DeflateCompressor ' , <nl> @ @ - 56 , 7 + 55 , 6 @ @ class CqlParsingRuleSet ( pylexotron . ParsingRuleSet ) : <nl> <nl> # note : commands _ end _ with _ newline may be extended by callers . <nl> self . commands _ end _ with _ newline = set ( ) <nl> - self . set _ keywords _ as _ syntax ( ) <nl> <nl> def completer _ for ( self , rulename , symname ) : <nl> def registrator ( f ) : <nl> @ @ - 80 , 12 + 78 , 6 @ @ class CqlParsingRuleSet ( pylexotron . ParsingRuleSet ) : <nl> <nl> return explainer <nl> <nl> - def set _ keywords _ as _ syntax ( self ) : <nl> - syntax = [ ] <nl> - for k in self . keywords : <nl> - syntax . append ( ' < K _ % s > : : = " % s " ; ' % ( k . upper ( ) , k ) ) <nl> - self . append _ rules ( ' \ n ' . join ( syntax ) ) <nl> - <nl> def cql _ massage _ tokens ( self , toklist ) : <nl> curstmt = [ ] <nl> output = [ ] <nl> @ @ - 146 , 9 + 138 , 9 @ @ class CqlParsingRuleSet ( pylexotron . ParsingRuleSet ) : <nl> else : <nl> output . append ( stmt ) <nl> if len ( stmt ) > 2 : <nl> - if stmt [ - 3 ] [ 0 ] = = ' K _ APPLY ' : <nl> + if stmt [ - 3 ] [ 0 ] = = ' apply ' : <nl> in _ batch = False <nl> - elif stmt [ 0 ] [ 0 ] = = ' K _ BEGIN ' : <nl> + elif stmt [ 0 ] [ 0 ] = = ' begin ' : <nl> in _ batch = True <nl> return output , in _ batch <nl>
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cli / CliOptions . java b / src / java / org / apache / cassandra / cli / CliOptions . java <nl> index cb58ddc . . f64cceb 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliOptions . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliOptions . java <nl> @ @ - 80 , 7 + 80 , 7 @ @ public class CliOptions <nl> <nl> / / ssl connection - related options <nl> options . addOption ( " ts " , SSL _ TRUSTSTORE , " TRUSTSTORE " , " SSL : full path to truststore " ) ; <nl> - options . addOption ( " tspw " , SSL _ TRUSTSTORE _ PW , " TRUSTSTORE - PASSWORD " , " SSL : full path to truststore " ) ; <nl> + options . addOption ( " tspw " , SSL _ TRUSTSTORE _ PW , " TRUSTSTORE - PASSWORD " , " SSL : password of the truststore " ) ; <nl> options . addOption ( " prtcl " , SSL _ PROTOCOL , " PROTOCOL " , " SSL : connections protocol to use ( default : TLS ) " ) ; <nl> options . addOption ( " alg " , SSL _ ALGORITHM , " ALGORITHM " , " SSL : algorithm ( default : SunX509 ) " ) ; <nl> options . addOption ( " st " , SSL _ STORE _ TYPE , " STORE - TYPE " , " SSL : type of store " ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index dcae493 . . 92dcf59 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 9 
 + * ( cqlsh ) update list of CQL keywords ( CASSANDRA - 9232 ) 
 * Avoid race condition during read repair ( CASSANDRA - 9460 ) 
 * ( cqlsh ) default load - from - file encoding to utf - 8 ( CASSANDRA - 9898 ) 
 * Avoid returning Permission . NONE when failing to query users table ( CASSANDRA - 10168 ) 
 diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py 
 index 92e3f12 . . 2857a7e 100644 
 - - - a / pylib / cqlshlib / cql3handling . py 
 + + + b / pylib / cqlshlib / cql3handling . py 
 @ @ - 37 , 19 + 37 , 6 @ @ SYSTEM _ KEYSPACES = ( ' system ' , ' system _ traces ' , ' system _ auth ' ) 
 NONALTERBALE _ KEYSPACES = ( ' system ' ) 
 
 class Cql3ParsingRuleSet ( CqlParsingRuleSet ) : 
 - keywords = set ( ( 
 - ' select ' , ' from ' , ' where ' , ' and ' , ' key ' , ' insert ' , ' update ' , ' with ' , 
 - ' limit ' , ' using ' , ' use ' , ' count ' , ' set ' , 
 - ' begin ' , ' apply ' , ' batch ' , ' truncate ' , ' delete ' , ' in ' , ' create ' , 
 - ' keyspace ' , ' schema ' , ' columnfamily ' , ' table ' , ' index ' , ' on ' , ' drop ' , 
 - ' primary ' , ' into ' , ' values ' , ' timestamp ' , ' ttl ' , ' alter ' , ' add ' , ' type ' , 
 - ' compact ' , ' storage ' , ' order ' , ' by ' , ' asc ' , ' desc ' , ' clustering ' , 
 - ' token ' , ' writetime ' , ' map ' , ' list ' , ' to ' , ' custom ' , ' if ' , ' not ' 
 - ) ) 
 - 
 - unreserved _ keywords = set ( ( 
 - ' key ' , ' clustering ' , ' ttl ' , ' compact ' , ' storage ' , ' type ' , ' values ' , ' custom ' , ' exists ' 
 - ) ) 
 
 columnfamily _ layout _ options = ( 
 ( ' bloom _ filter _ fp _ chance ' , None ) , 
 @ @ - 89 , 10 + 76 , 6 @ @ class Cql3ParsingRuleSet ( CqlParsingRuleSet ) : 
 ' SERIAL ' 
 ) 
 
 - maybe _ escape _ name = staticmethod ( maybe _ escape _ name ) 
 - 
 - escape _ name = staticmethod ( escape _ name ) 
 - 
 @ classmethod 
 def escape _ value ( cls , value ) : 
 if value is None : 
 @ @ - 132 , 8 + 115 , 6 @ @ explain _ completion = CqlRuleSet . explain _ completion 
 dequote _ value = CqlRuleSet . dequote _ value 
 dequote _ name = CqlRuleSet . dequote _ name 
 escape _ value = CqlRuleSet . escape _ value 
 - maybe _ escape _ name = CqlRuleSet . maybe _ escape _ name 
 - 
 
 # BEGIN SYNTAX / COMPLETION RULE DEFINITIONS 
 
 @ @ - 251 , 7 + 232 , 7 @ @ JUNK : : = / ( [ \ t \ r \ f \ v ] + | ( - - | [ / ] [ / ] ) [ ^ \ n \ r ] * ( [ \ n \ r ] | $ ) | [ / ] [ * ] . * ? [ * ] [ / ] ) / ; 
 ; 
 
 # timestamp is included here , since it ' s also a keyword 
 - < simpleStorageType > : : = typename = ( < identifier > | < stringLiteral > | < K _ TIMESTAMP > ) ; 
 + < simpleStorageType > : : = typename = ( < identifier > | < stringLiteral > | " timestamp " ) ; 
 
 < userType > : : = utname = < cfOrKsName > ; 
 
 @ @ - 284 , 14 + 265 , 14 @ @ JUNK : : = / ( [ \ t \ r \ f \ v ] + | ( - - | [ / ] [ / ] ) [ ^ \ n \ r ] * ( [ \ n \ r ] | $ ) | [ / ] [ * ] . * ? [ * ] [ / ] ) / ; 
 | < unreservedKeyword > ; 
 
 < unreservedKeyword > : : = nocomplete = 
 - ( < K _ KEY > 
 - | < K _ CLUSTERING > 
 - # | < K _ COUNT > - - to get count ( * ) completion , treat count as reserved 
 - | < K _ TTL > 
 - | < K _ COMPACT > 
 - | < K _ STORAGE > 
 - | < K _ TYPE > 
 - | < K _ VALUES > ) 
 + ( " key " 
 + | " clustering " 
 + # | " count " - - to get count ( * ) completion , treat count as reserved 
 + | " ttl " 
 + | " compact " 
 + | " storage " 
 + | " type " 
 + | " values " ) 
 ; 
 
 < property > : : = [ propname ] = < cident > propeq = " = " [ propval ] = < propertyValue > 
 @ @ - 1172 , 7 + 1153 , 7 @ @ def username _ name _ completer ( ctxt , cass ) : 
 return " ' % s ' " % name 
 
 # disable completion for CREATE USER . 
 - if ctxt . matched [ 0 ] [ 0 ] = = ' K _ CREATE ' : 
 + if ctxt . matched [ 0 ] [ 0 ] = = ' create ' : 
 return [ Hint ( ' < username > ' ) ] 
 
 session = cass . session 
 diff - - git a / pylib / cqlshlib / cqlhandling . py b / pylib / cqlshlib / cqlhandling . py 
 index 1836961 . . 4009125 100644 
 - - - a / pylib / cqlshlib / cqlhandling . py 
 + + + b / pylib / cqlshlib / cqlhandling . py 
 @ @ - 24 , 7 + 24 , 6 @ @ Hint = pylexotron . Hint 
 
 
 class CqlParsingRuleSet ( pylexotron . ParsingRuleSet ) : 
 - keywords = set ( ) 
 
 available _ compression _ classes = ( 
 ' DeflateCompressor ' , 
 @ @ - 56 , 7 + 55 , 6 @ @ class CqlParsingRuleSet ( pylexotron . ParsingRuleSet ) : 
 
 # note : commands _ end _ with _ newline may be extended by callers . 
 self . commands _ end _ with _ newline = set ( ) 
 - self . set _ keywords _ as _ syntax ( ) 
 
 def completer _ for ( self , rulename , symname ) : 
 def registrator ( f ) : 
 @ @ - 80 , 12 + 78 , 6 @ @ class CqlParsingRuleSet ( pylexotron . ParsingRuleSet ) : 
 
 return explainer 
 
 - def set _ keywords _ as _ syntax ( self ) : 
 - syntax = [ ] 
 - for k in self . keywords : 
 - syntax . append ( ' < K _ % s > : : = " % s " ; ' % ( k . upper ( ) , k ) ) 
 - self . append _ rules ( ' \ n ' . join ( syntax ) ) 
 - 
 def cql _ massage _ tokens ( self , toklist ) : 
 curstmt = [ ] 
 output = [ ] 
 @ @ - 146 , 9 + 138 , 9 @ @ class CqlParsingRuleSet ( pylexotron . ParsingRuleSet ) : 
 else : 
 output . append ( stmt ) 
 if len ( stmt ) > 2 : 
 - if stmt [ - 3 ] [ 0 ] = = ' K _ APPLY ' : 
 + if stmt [ - 3 ] [ 0 ] = = ' apply ' : 
 in _ batch = False 
 - elif stmt [ 0 ] [ 0 ] = = ' K _ BEGIN ' : 
 + elif stmt [ 0 ] [ 0 ] = = ' begin ' : 
 in _ batch = True 
 return output , in _ batch 


NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cli / CliOptions . java b / src / java / org / apache / cassandra / cli / CliOptions . java 
 index cb58ddc . . f64cceb 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliOptions . java 
 + + + b / src / java / org / apache / cassandra / cli / CliOptions . java 
 @ @ - 80 , 7 + 80 , 7 @ @ public class CliOptions 
 
 / / ssl connection - related options 
 options . addOption ( " ts " , SSL _ TRUSTSTORE , " TRUSTSTORE " , " SSL : full path to truststore " ) ; 
 - options . addOption ( " tspw " , SSL _ TRUSTSTORE _ PW , " TRUSTSTORE - PASSWORD " , " SSL : full path to truststore " ) ; 
 + options . addOption ( " tspw " , SSL _ TRUSTSTORE _ PW , " TRUSTSTORE - PASSWORD " , " SSL : password of the truststore " ) ; 
 options . addOption ( " prtcl " , SSL _ PROTOCOL , " PROTOCOL " , " SSL : connections protocol to use ( default : TLS ) " ) ; 
 options . addOption ( " alg " , SSL _ ALGORITHM , " ALGORITHM " , " SSL : algorithm ( default : SunX509 ) " ) ; 
 options . addOption ( " st " , SSL _ STORE _ TYPE , " STORE - TYPE " , " SSL : type of store " ) ;
