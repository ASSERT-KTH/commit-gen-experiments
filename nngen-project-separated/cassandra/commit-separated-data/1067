BLEU SCORE: 0.027611988917697356

TEST MSG: Ensure stale index entries are purged on read
GENERATED MSG: fix invalidate - related test failures

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index a37ec99 . . 143ed2d 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 3 <nl> + * Ensure stale index entries are purged during reads ( CASSANDRA - 11013 ) <nl> * Fix AssertionError when removing from list using UPDATE ( CASSANDRA - 10954 ) <nl> * Fix UnsupportedOperationException when reading old sstable with range <nl> tombstone ( CASSANDRA - 10743 ) <nl> diff - - git a / src / java / org / apache / cassandra / index / internal / composites / CompositesSearcher . java b / src / java / org / apache / cassandra / index / internal / composites / CompositesSearcher . java <nl> index b8ed800 . . 765ae4d 100644 <nl> - - - a / src / java / org / apache / cassandra / index / internal / composites / CompositesSearcher . java <nl> + + + b / src / java / org / apache / cassandra / index / internal / composites / CompositesSearcher . java <nl> @ @ - 242 , 7 + 242 , 7 @ @ public class CompositesSearcher extends CassandraIndexSearcher <nl> } <nl> <nl> @ Override <nl> - public void onClose ( ) <nl> + public void onPartitionClose ( ) <nl> { <nl> deleteAllEntries ( staleEntries , writeOp , nowInSec ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / Util . java b / test / unit / org / apache / cassandra / Util . java <nl> index 8658ff3 . . 7ce8f04 100644 <nl> - - - a / test / unit / org / apache / cassandra / Util . java <nl> + + + b / test / unit / org / apache / cassandra / Util . java <nl> @ @ - 57 , 6 + 57 , 7 @ @ import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . CounterId ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> + import org . apache . cassandra . utils . concurrent . OpOrder ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertNotNull ; <nl> @ @ - 563 , 4 + 564 , 35 @ @ public class Util <nl> return content . hasNext ( ) ? content . next ( ) : endOfData ( ) ; <nl> } <nl> } <nl> + <nl> + public static UnfilteredPartitionIterator executeLocally ( PartitionRangeReadCommand command , <nl> + ColumnFamilyStore cfs , <nl> + ReadOrderGroup orderGroup ) <nl> + { <nl> + return new InternalPartitionRangeReadCommand ( command ) . queryStorageInternal ( cfs , orderGroup ) ; <nl> + } <nl> + <nl> + private static final class InternalPartitionRangeReadCommand extends PartitionRangeReadCommand <nl> + { <nl> + <nl> + private InternalPartitionRangeReadCommand ( PartitionRangeReadCommand original ) <nl> + { <nl> + super ( original . isDigestQuery ( ) , <nl> + original . digestVersion ( ) , <nl> + original . isForThrift ( ) , <nl> + original . metadata ( ) , <nl> + original . nowInSec ( ) , <nl> + original . columnFilter ( ) , <nl> + original . rowFilter ( ) , <nl> + original . limits ( ) , <nl> + original . dataRange ( ) , <nl> + Optional . empty ( ) ) ; <nl> + } <nl> + <nl> + private UnfilteredPartitionIterator queryStorageInternal ( ColumnFamilyStore cfs , <nl> + ReadOrderGroup orderGroup ) <nl> + { <nl> + return queryStorage ( cfs , orderGroup ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / SecondaryIndexTest . java b / test / unit / org / apache / cassandra / db / SecondaryIndexTest . java <nl> index 55ab574 . . bbccc48 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / SecondaryIndexTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / SecondaryIndexTest . java <nl> @ @ - 37 , 8 + 37 , 10 @ @ import org . apache . cassandra . cql3 . statements . IndexTarget ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . db . partitions . * ; <nl> import org . apache . cassandra . db . rows . Row ; <nl> + import org . apache . cassandra . db . rows . RowIterator ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . index . Index ; <nl> + import org . apache . cassandra . index . internal . CassandraIndex ; <nl> import org . apache . cassandra . schema . IndexMetadata ; <nl> import org . apache . cassandra . schema . KeyspaceParams ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> @ @ - 315 , 6 + 317 , 8 @ @ public class SecondaryIndexTest <nl> true , <nl> false ) ; <nl> assertIndexedNone ( cfs , col , 1L ) ; <nl> + ColumnFamilyStore indexCfs = cfs . indexManager . getAllIndexColumnFamilyStores ( ) . iterator ( ) . next ( ) ; <nl> + assertIndexCfsIsEmpty ( indexCfs ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 354 , 6 + 358 , 9 @ @ public class SecondaryIndexTest <nl> / / TODO : Figure out why this is re - inserting <nl> keyspace . apply ( new RowUpdateBuilder ( cfs . metadata , 2 , " k1 " ) . clustering ( " c1 " ) . add ( " birthdate " , 10l ) . build ( ) , true , false ) ; <nl> assertIndexedNone ( cfs , col , 20l ) ; <nl> + <nl> + ColumnFamilyStore indexCfs = cfs . indexManager . getAllIndexColumnFamilyStores ( ) . iterator ( ) . next ( ) ; <nl> + assertIndexCfsIsEmpty ( indexCfs ) ; <nl> } <nl> <nl> / / See CASSANDRA - 6098 <nl> @ @ - 508 , 4 + 515 , 15 @ @ public class SecondaryIndexTest <nl> assertEquals ( count , Util . size ( iter ) ) ; <nl> } <nl> } <nl> + <nl> + private void assertIndexCfsIsEmpty ( ColumnFamilyStore indexCfs ) <nl> + { <nl> + PartitionRangeReadCommand command = ( PartitionRangeReadCommand ) Util . cmd ( indexCfs ) . build ( ) ; <nl> + try ( ReadOrderGroup orderGroup = command . startOrderGroup ( ) ; <nl> + PartitionIterator iter = UnfilteredPartitionIterators . filter ( Util . executeLocally ( command , indexCfs , orderGroup ) , <nl> + FBUtilities . nowInSeconds ( ) ) ) <nl> + { <nl> + assertFalse ( iter . hasNext ( ) ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / index / StubIndex . java b / test / unit / org / apache / cassandra / index / StubIndex . java <nl> index cd0541f . . 28ea097 100644 <nl> - - - a / test / unit / org / apache / cassandra / index / StubIndex . java <nl> + + + b / test / unit / org / apache / cassandra / index / StubIndex . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . util . * ; <nl> import java . util . concurrent . Callable ; <nl> import java . util . function . BiFunction ; <nl> <nl> + import org . apache . cassandra . Util ; <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> import org . apache . cassandra . cql3 . Operator ; <nl> import org . apache . cassandra . db . * ; <nl> @ @ - 193 , 35 + 194 , 11 @ @ public class StubIndex implements Index <nl> <nl> public Searcher searcherFor ( final ReadCommand command ) <nl> { <nl> - return orderGroup - > new InternalPartitionRangeReadCommand ( ( PartitionRangeReadCommand ) command ) <nl> - . queryStorageInternal ( baseCfs , orderGroup ) ; <nl> + return ( orderGroup ) - > Util . executeLocally ( ( PartitionRangeReadCommand ) command , baseCfs , orderGroup ) ; <nl> } <nl> <nl> public BiFunction < PartitionIterator , ReadCommand , PartitionIterator > postProcessorFor ( ReadCommand readCommand ) <nl> { <nl> return ( iter , command ) - > iter ; <nl> } <nl> - <nl> - private static final class InternalPartitionRangeReadCommand extends PartitionRangeReadCommand <nl> - { <nl> - <nl> - private InternalPartitionRangeReadCommand ( PartitionRangeReadCommand original ) <nl> - { <nl> - super ( original . isDigestQuery ( ) , <nl> - original . digestVersion ( ) , <nl> - original . isForThrift ( ) , <nl> - original . metadata ( ) , <nl> - original . nowInSec ( ) , <nl> - original . columnFilter ( ) , <nl> - original . rowFilter ( ) , <nl> - original . limits ( ) , <nl> - original . dataRange ( ) , <nl> - Optional . empty ( ) ) ; <nl> - } <nl> - <nl> - private UnfilteredPartitionIterator queryStorageInternal ( ColumnFamilyStore cfs , ReadOrderGroup orderGroup ) <nl> - { <nl> - return queryStorage ( cfs , orderGroup ) ; <nl> - } <nl> - } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 32447e2 . . d93668b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 3 , 6 + 3 , 7 @ @ <nl> * EACH _ QUORUM is only supported for writes ( CASSANDRA - 3272 ) <nl> * replace compactionlock use in schema migration by checking CFS . isInvalidD <nl> * recognize that " SELECT first . . . * " isn ' t really " SELECT * " ( CASSANDRA - 3445 ) <nl> + * fix invalidate - related test failures ( CASSANDRA - 3437 ) <nl> Merged from 0 . 8 : <nl> * Make counter shard merging thread safe ( CASSANDRA - 3178 ) <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 53da27e . . 990eaa7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 26 , 8 + 26 , 7 @ @ import java . util . concurrent . * ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> import java . util . concurrent . atomic . AtomicLong ; <nl> import java . util . regex . Pattern ; <nl> - import javax . management . MBeanServer ; <nl> - import javax . management . ObjectName ; <nl> + import javax . management . * ; <nl> <nl> import com . google . common . collect . Iterables ; <nl> import org . apache . cassandra . db . compaction . LeveledManifest ; <nl> @ @ - 48 , 11 + 47 , 11 @ @ import org . apache . cassandra . db . compaction . LeveledCompactionStrategy ; <nl> import org . apache . cassandra . db . filter . IFilter ; <nl> import org . apache . cassandra . db . filter . QueryFilter ; <nl> import org . apache . cassandra . db . filter . QueryPath ; <nl> - import org . apache . cassandra . db . filter . SliceQueryFilter ; <nl> import org . apache . cassandra . db . index . SecondaryIndexManager ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . dht . * ; <nl> import org . apache . cassandra . io . sstable . * ; <nl> + import org . apache . cassandra . io . sstable . Descriptor ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . thrift . IndexClause ; <nl> @ @ - 260 , 12 + 259 , 10 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> try <nl> { <nl> valid = false ; <nl> - MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> - ObjectName nameObj = new ObjectName ( mbeanName ) ; <nl> - if ( mbs . isRegistered ( nameObj ) ) <nl> - mbs . unregisterMBean ( nameObj ) ; <nl> + unregisterMBean ( ) ; <nl> <nl> - indexManager . unregisterMBeans ( ) ; <nl> + data . unreferenceSSTables ( ) ; <nl> + indexManager . invalidate ( ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 274 , 6 + 271 , 14 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> + void unregisterMBean ( ) throws MalformedObjectNameException , InstanceNotFoundException , MBeanRegistrationException <nl> + { <nl> + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> + ObjectName nameObj = new ObjectName ( mbeanName ) ; <nl> + if ( mbs . isRegistered ( nameObj ) ) <nl> + mbs . unregisterMBean ( nameObj ) ; <nl> + } <nl> + <nl> public long getMinRowSize ( ) <nl> { <nl> return data . getMinRowSize ( ) ; <nl> @ @ - 977 , 12 + 982 , 6 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> return valid ; <nl> } <nl> <nl> - public void unreferenceSSTables ( ) throws IOException <nl> - { <nl> - data . unreferenceSSTables ( ) ; <nl> - indexManager . removeAllIndexes ( ) ; <nl> - } <nl> - <nl> public long getMemtableColumnsCount ( ) <nl> { <nl> return getMemtableThreadSafe ( ) . getOperations ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java <nl> index fa6a348 . . 7b53ea4 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Table . java <nl> + + + b / src / java / org / apache / cassandra / db / Table . java <nl> @ @ - 341 , 7 + 341 , 6 @ @ public class Table <nl> return ; <nl> <nl> unloadCf ( cfs ) ; <nl> - cfs . unreferenceSSTables ( ) ; <nl> } <nl> <nl> / / disassociate a cfs from this table instance . <nl> diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java <nl> index 557a430 . . 4f43993 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java <nl> @ @ - 132 , 7 + 132 , 7 @ @ public abstract class SecondaryIndex <nl> public abstract void renameIndex ( String newCfName ) throws IOException ; <nl> <nl> / * * <nl> - * Unregisters this index ' s mbean if one exists <nl> + * Remove the index and unregisters this index ' s mbean if one exists <nl> * / <nl> public abstract void invalidate ( ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> index 60a9034 . . 6db5976 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> @ @ - 239 , 24 + 239 , 14 @ @ public class SecondaryIndexManager <nl> } <nl> <nl> / * * <nl> - * Remove all index MBeans <nl> + * Remove the index <nl> * / <nl> - public void unregisterMBeans ( ) <nl> + public void invalidate ( ) <nl> { <nl> for ( Map . Entry < ByteBuffer , SecondaryIndex > entry : indexesByColumn . entrySet ( ) ) <nl> entry . getValue ( ) . invalidate ( ) ; <nl> } <nl> - <nl> - / * * <nl> - * Remove all underlying index data <nl> - * @ throws IOException <nl> - * / <nl> - public void removeAllIndexes ( ) throws IOException <nl> - { <nl> - for ( Map . Entry < ByteBuffer , SecondaryIndex > entry : indexesByColumn . entrySet ( ) ) <nl> - entry . getValue ( ) . removeIndex ( entry . getKey ( ) ) ; <nl> - } <nl> - <nl> + <nl> / * * <nl> * Rename all underlying index files <nl> * @ param newCfName the new index Name <nl> diff - - git a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java <nl> index 290d3df . . 492a027 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java <nl> @ @ - 109 , 7 + 109 , 6 @ @ public class KeysIndex extends PerColumnSecondaryIndex <nl> <nl> public void removeIndex ( ByteBuffer columnName ) throws IOException <nl> { <nl> - indexCfs . unreferenceSSTables ( ) ; <nl> indexCfs . invalidate ( ) ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / db / KeyCacheTest . java b / test / unit / org / apache / cassandra / db / KeyCacheTest . java <nl> index 1df4e89 . . 739bac3 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / KeyCacheTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / KeyCacheTest . java <nl> @ @ - 90 , 12 + 90 , 13 @ @ public class KeyCacheTest extends CleanupHelper <nl> store . invalidateKeyCache ( ) ; <nl> assert store . getKeyCacheSize ( ) = = 0 ; <nl> <nl> - / / load the cache from disk <nl> + / / load the cache from disk . unregister the old mbean so we can recreate a new CFS object . <nl> + / / but don ' t invalidate ( ) the old CFS , which would nuke the data we want to try to load <nl> store . invalidate ( ) ; / / unregistering old MBean to test how key cache will be loaded <nl> ColumnFamilyStore newStore = ColumnFamilyStore . createColumnFamilyStore ( Table . open ( TABLE1 ) , COLUMN _ FAMILY3 ) ; <nl> - assert newStore . getKeyCacheSize ( ) = = 100 ; <nl> + assertEquals ( 100 , newStore . getKeyCacheSize ( ) ) ; <nl> <nl> - assert savedMap . size ( ) = = 100 ; <nl> + assertEquals ( 100 , savedMap . size ( ) ) ; <nl> for ( Map . Entry < Pair < Descriptor , DecoratedKey > , Long > entry : savedMap . entrySet ( ) ) <nl> { <nl> assert newStore . getKeyCache ( ) . get ( entry . getKey ( ) ) . equals ( entry . getValue ( ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java <nl> index d3eee14 . . fff1a6d 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java <nl> @ @ - 230 , 7 + 230 , 7 @ @ public class CompactionsTest extends CleanupHelper <nl> ColumnFamilyStore store = table . getColumnFamilyStore ( cfname ) ; <nl> <nl> / / disable compaction while flushing <nl> - store . unreferenceSSTables ( ) ; <nl> + store . clearUnsafe ( ) ; <nl> store . disableAutoCompaction ( ) ; <nl> <nl> / / Add test row <nl> diff - - git a / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java b / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java <nl> index f8bf034 . . 71b1890 100644 <nl> - - - a / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java <nl> + + + b / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java <nl> @ @ - 79 , 9 + 79 , 7 @ @ public class StreamingTransferTest extends CleanupHelper <nl> Util . compactAll ( cfs ) . get ( ) ; <nl> assertEquals ( 1 , cfs . getSSTables ( ) . size ( ) ) ; <nl> SSTableReader sstable = cfs . getSSTables ( ) . iterator ( ) . next ( ) ; <nl> - / / We acquire a reference now , because removeAllSSTables will mark the sstable compacted , and we have work to do with it <nl> - sstable . acquireReference ( ) ; <nl> - cfs . unreferenceSSTables ( ) ; <nl> + cfs . clearUnsafe ( ) ; <nl> <nl> / / transfer the first and last key <nl> logger . debug ( " Transferring " + cfs . columnFamily ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index a37ec99 . . 143ed2d 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 3 
 + * Ensure stale index entries are purged during reads ( CASSANDRA - 11013 ) 
 * Fix AssertionError when removing from list using UPDATE ( CASSANDRA - 10954 ) 
 * Fix UnsupportedOperationException when reading old sstable with range 
 tombstone ( CASSANDRA - 10743 ) 
 diff - - git a / src / java / org / apache / cassandra / index / internal / composites / CompositesSearcher . java b / src / java / org / apache / cassandra / index / internal / composites / CompositesSearcher . java 
 index b8ed800 . . 765ae4d 100644 
 - - - a / src / java / org / apache / cassandra / index / internal / composites / CompositesSearcher . java 
 + + + b / src / java / org / apache / cassandra / index / internal / composites / CompositesSearcher . java 
 @ @ - 242 , 7 + 242 , 7 @ @ public class CompositesSearcher extends CassandraIndexSearcher 
 } 
 
 @ Override 
 - public void onClose ( ) 
 + public void onPartitionClose ( ) 
 { 
 deleteAllEntries ( staleEntries , writeOp , nowInSec ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / Util . java b / test / unit / org / apache / cassandra / Util . java 
 index 8658ff3 . . 7ce8f04 100644 
 - - - a / test / unit / org / apache / cassandra / Util . java 
 + + + b / test / unit / org / apache / cassandra / Util . java 
 @ @ - 57 , 6 + 57 , 7 @ @ import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . CounterId ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 + import org . apache . cassandra . utils . concurrent . OpOrder ; 
 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertNotNull ; 
 @ @ - 563 , 4 + 564 , 35 @ @ public class Util 
 return content . hasNext ( ) ? content . next ( ) : endOfData ( ) ; 
 } 
 } 
 + 
 + public static UnfilteredPartitionIterator executeLocally ( PartitionRangeReadCommand command , 
 + ColumnFamilyStore cfs , 
 + ReadOrderGroup orderGroup ) 
 + { 
 + return new InternalPartitionRangeReadCommand ( command ) . queryStorageInternal ( cfs , orderGroup ) ; 
 + } 
 + 
 + private static final class InternalPartitionRangeReadCommand extends PartitionRangeReadCommand 
 + { 
 + 
 + private InternalPartitionRangeReadCommand ( PartitionRangeReadCommand original ) 
 + { 
 + super ( original . isDigestQuery ( ) , 
 + original . digestVersion ( ) , 
 + original . isForThrift ( ) , 
 + original . metadata ( ) , 
 + original . nowInSec ( ) , 
 + original . columnFilter ( ) , 
 + original . rowFilter ( ) , 
 + original . limits ( ) , 
 + original . dataRange ( ) , 
 + Optional . empty ( ) ) ; 
 + } 
 + 
 + private UnfilteredPartitionIterator queryStorageInternal ( ColumnFamilyStore cfs , 
 + ReadOrderGroup orderGroup ) 
 + { 
 + return queryStorage ( cfs , orderGroup ) ; 
 + } 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / SecondaryIndexTest . java b / test / unit / org / apache / cassandra / db / SecondaryIndexTest . java 
 index 55ab574 . . bbccc48 100644 
 - - - a / test / unit / org / apache / cassandra / db / SecondaryIndexTest . java 
 + + + b / test / unit / org / apache / cassandra / db / SecondaryIndexTest . java 
 @ @ - 37 , 8 + 37 , 10 @ @ import org . apache . cassandra . cql3 . statements . IndexTarget ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . db . partitions . * ; 
 import org . apache . cassandra . db . rows . Row ; 
 + import org . apache . cassandra . db . rows . RowIterator ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . index . Index ; 
 + import org . apache . cassandra . index . internal . CassandraIndex ; 
 import org . apache . cassandra . schema . IndexMetadata ; 
 import org . apache . cassandra . schema . KeyspaceParams ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 @ @ - 315 , 6 + 317 , 8 @ @ public class SecondaryIndexTest 
 true , 
 false ) ; 
 assertIndexedNone ( cfs , col , 1L ) ; 
 + ColumnFamilyStore indexCfs = cfs . indexManager . getAllIndexColumnFamilyStores ( ) . iterator ( ) . next ( ) ; 
 + assertIndexCfsIsEmpty ( indexCfs ) ; 
 } 
 
 @ Test 
 @ @ - 354 , 6 + 358 , 9 @ @ public class SecondaryIndexTest 
 / / TODO : Figure out why this is re - inserting 
 keyspace . apply ( new RowUpdateBuilder ( cfs . metadata , 2 , " k1 " ) . clustering ( " c1 " ) . add ( " birthdate " , 10l ) . build ( ) , true , false ) ; 
 assertIndexedNone ( cfs , col , 20l ) ; 
 + 
 + ColumnFamilyStore indexCfs = cfs . indexManager . getAllIndexColumnFamilyStores ( ) . iterator ( ) . next ( ) ; 
 + assertIndexCfsIsEmpty ( indexCfs ) ; 
 } 
 
 / / See CASSANDRA - 6098 
 @ @ - 508 , 4 + 515 , 15 @ @ public class SecondaryIndexTest 
 assertEquals ( count , Util . size ( iter ) ) ; 
 } 
 } 
 + 
 + private void assertIndexCfsIsEmpty ( ColumnFamilyStore indexCfs ) 
 + { 
 + PartitionRangeReadCommand command = ( PartitionRangeReadCommand ) Util . cmd ( indexCfs ) . build ( ) ; 
 + try ( ReadOrderGroup orderGroup = command . startOrderGroup ( ) ; 
 + PartitionIterator iter = UnfilteredPartitionIterators . filter ( Util . executeLocally ( command , indexCfs , orderGroup ) , 
 + FBUtilities . nowInSeconds ( ) ) ) 
 + { 
 + assertFalse ( iter . hasNext ( ) ) ; 
 + } 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / index / StubIndex . java b / test / unit / org / apache / cassandra / index / StubIndex . java 
 index cd0541f . . 28ea097 100644 
 - - - a / test / unit / org / apache / cassandra / index / StubIndex . java 
 + + + b / test / unit / org / apache / cassandra / index / StubIndex . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . util . * ; 
 import java . util . concurrent . Callable ; 
 import java . util . function . BiFunction ; 
 
 + import org . apache . cassandra . Util ; 
 import org . apache . cassandra . config . ColumnDefinition ; 
 import org . apache . cassandra . cql3 . Operator ; 
 import org . apache . cassandra . db . * ; 
 @ @ - 193 , 35 + 194 , 11 @ @ public class StubIndex implements Index 
 
 public Searcher searcherFor ( final ReadCommand command ) 
 { 
 - return orderGroup - > new InternalPartitionRangeReadCommand ( ( PartitionRangeReadCommand ) command ) 
 - . queryStorageInternal ( baseCfs , orderGroup ) ; 
 + return ( orderGroup ) - > Util . executeLocally ( ( PartitionRangeReadCommand ) command , baseCfs , orderGroup ) ; 
 } 
 
 public BiFunction < PartitionIterator , ReadCommand , PartitionIterator > postProcessorFor ( ReadCommand readCommand ) 
 { 
 return ( iter , command ) - > iter ; 
 } 
 - 
 - private static final class InternalPartitionRangeReadCommand extends PartitionRangeReadCommand 
 - { 
 - 
 - private InternalPartitionRangeReadCommand ( PartitionRangeReadCommand original ) 
 - { 
 - super ( original . isDigestQuery ( ) , 
 - original . digestVersion ( ) , 
 - original . isForThrift ( ) , 
 - original . metadata ( ) , 
 - original . nowInSec ( ) , 
 - original . columnFilter ( ) , 
 - original . rowFilter ( ) , 
 - original . limits ( ) , 
 - original . dataRange ( ) , 
 - Optional . empty ( ) ) ; 
 - } 
 - 
 - private UnfilteredPartitionIterator queryStorageInternal ( ColumnFamilyStore cfs , ReadOrderGroup orderGroup ) 
 - { 
 - return queryStorage ( cfs , orderGroup ) ; 
 - } 
 - } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 32447e2 . . d93668b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 3 , 6 + 3 , 7 @ @ 
 * EACH _ QUORUM is only supported for writes ( CASSANDRA - 3272 ) 
 * replace compactionlock use in schema migration by checking CFS . isInvalidD 
 * recognize that " SELECT first . . . * " isn ' t really " SELECT * " ( CASSANDRA - 3445 ) 
 + * fix invalidate - related test failures ( CASSANDRA - 3437 ) 
 Merged from 0 . 8 : 
 * Make counter shard merging thread safe ( CASSANDRA - 3178 ) 
 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 53da27e . . 990eaa7 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 26 , 8 + 26 , 7 @ @ import java . util . concurrent . * ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 import java . util . concurrent . atomic . AtomicLong ; 
 import java . util . regex . Pattern ; 
 - import javax . management . MBeanServer ; 
 - import javax . management . ObjectName ; 
 + import javax . management . * ; 
 
 import com . google . common . collect . Iterables ; 
 import org . apache . cassandra . db . compaction . LeveledManifest ; 
 @ @ - 48 , 11 + 47 , 11 @ @ import org . apache . cassandra . db . compaction . LeveledCompactionStrategy ; 
 import org . apache . cassandra . db . filter . IFilter ; 
 import org . apache . cassandra . db . filter . QueryFilter ; 
 import org . apache . cassandra . db . filter . QueryPath ; 
 - import org . apache . cassandra . db . filter . SliceQueryFilter ; 
 import org . apache . cassandra . db . index . SecondaryIndexManager ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . dht . * ; 
 import org . apache . cassandra . io . sstable . * ; 
 + import org . apache . cassandra . io . sstable . Descriptor ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . thrift . IndexClause ; 
 @ @ - 260 , 12 + 259 , 10 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 try 
 { 
 valid = false ; 
 - MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 - ObjectName nameObj = new ObjectName ( mbeanName ) ; 
 - if ( mbs . isRegistered ( nameObj ) ) 
 - mbs . unregisterMBean ( nameObj ) ; 
 + unregisterMBean ( ) ; 
 
 - indexManager . unregisterMBeans ( ) ; 
 + data . unreferenceSSTables ( ) ; 
 + indexManager . invalidate ( ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 274 , 6 + 271 , 14 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 + void unregisterMBean ( ) throws MalformedObjectNameException , InstanceNotFoundException , MBeanRegistrationException 
 + { 
 + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 + ObjectName nameObj = new ObjectName ( mbeanName ) ; 
 + if ( mbs . isRegistered ( nameObj ) ) 
 + mbs . unregisterMBean ( nameObj ) ; 
 + } 
 + 
 public long getMinRowSize ( ) 
 { 
 return data . getMinRowSize ( ) ; 
 @ @ - 977 , 12 + 982 , 6 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 return valid ; 
 } 
 
 - public void unreferenceSSTables ( ) throws IOException 
 - { 
 - data . unreferenceSSTables ( ) ; 
 - indexManager . removeAllIndexes ( ) ; 
 - } 
 - 
 public long getMemtableColumnsCount ( ) 
 { 
 return getMemtableThreadSafe ( ) . getOperations ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java 
 index fa6a348 . . 7b53ea4 100644 
 - - - a / src / java / org / apache / cassandra / db / Table . java 
 + + + b / src / java / org / apache / cassandra / db / Table . java 
 @ @ - 341 , 7 + 341 , 6 @ @ public class Table 
 return ; 
 
 unloadCf ( cfs ) ; 
 - cfs . unreferenceSSTables ( ) ; 
 } 
 
 / / disassociate a cfs from this table instance . 
 diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java 
 index 557a430 . . 4f43993 100644 
 - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java 
 @ @ - 132 , 7 + 132 , 7 @ @ public abstract class SecondaryIndex 
 public abstract void renameIndex ( String newCfName ) throws IOException ; 
 
 / * * 
 - * Unregisters this index ' s mbean if one exists 
 + * Remove the index and unregisters this index ' s mbean if one exists 
 * / 
 public abstract void invalidate ( ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 index 60a9034 . . 6db5976 100644 
 - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 @ @ - 239 , 24 + 239 , 14 @ @ public class SecondaryIndexManager 
 } 
 
 / * * 
 - * Remove all index MBeans 
 + * Remove the index 
 * / 
 - public void unregisterMBeans ( ) 
 + public void invalidate ( ) 
 { 
 for ( Map . Entry < ByteBuffer , SecondaryIndex > entry : indexesByColumn . entrySet ( ) ) 
 entry . getValue ( ) . invalidate ( ) ; 
 } 
 - 
 - / * * 
 - * Remove all underlying index data 
 - * @ throws IOException 
 - * / 
 - public void removeAllIndexes ( ) throws IOException 
 - { 
 - for ( Map . Entry < ByteBuffer , SecondaryIndex > entry : indexesByColumn . entrySet ( ) ) 
 - entry . getValue ( ) . removeIndex ( entry . getKey ( ) ) ; 
 - } 
 - 
 + 
 / * * 
 * Rename all underlying index files 
 * @ param newCfName the new index Name 
 diff - - git a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java 
 index 290d3df . . 492a027 100644 
 - - - a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java 
 @ @ - 109 , 7 + 109 , 6 @ @ public class KeysIndex extends PerColumnSecondaryIndex 
 
 public void removeIndex ( ByteBuffer columnName ) throws IOException 
 { 
 - indexCfs . unreferenceSSTables ( ) ; 
 indexCfs . invalidate ( ) ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / db / KeyCacheTest . java b / test / unit / org / apache / cassandra / db / KeyCacheTest . java 
 index 1df4e89 . . 739bac3 100644 
 - - - a / test / unit / org / apache / cassandra / db / KeyCacheTest . java 
 + + + b / test / unit / org / apache / cassandra / db / KeyCacheTest . java 
 @ @ - 90 , 12 + 90 , 13 @ @ public class KeyCacheTest extends CleanupHelper 
 store . invalidateKeyCache ( ) ; 
 assert store . getKeyCacheSize ( ) = = 0 ; 
 
 - / / load the cache from disk 
 + / / load the cache from disk . unregister the old mbean so we can recreate a new CFS object . 
 + / / but don ' t invalidate ( ) the old CFS , which would nuke the data we want to try to load 
 store . invalidate ( ) ; / / unregistering old MBean to test how key cache will be loaded 
 ColumnFamilyStore newStore = ColumnFamilyStore . createColumnFamilyStore ( Table . open ( TABLE1 ) , COLUMN _ FAMILY3 ) ; 
 - assert newStore . getKeyCacheSize ( ) = = 100 ; 
 + assertEquals ( 100 , newStore . getKeyCacheSize ( ) ) ; 
 
 - assert savedMap . size ( ) = = 100 ; 
 + assertEquals ( 100 , savedMap . size ( ) ) ; 
 for ( Map . Entry < Pair < Descriptor , DecoratedKey > , Long > entry : savedMap . entrySet ( ) ) 
 { 
 assert newStore . getKeyCache ( ) . get ( entry . getKey ( ) ) . equals ( entry . getValue ( ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java 
 index d3eee14 . . fff1a6d 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java 
 @ @ - 230 , 7 + 230 , 7 @ @ public class CompactionsTest extends CleanupHelper 
 ColumnFamilyStore store = table . getColumnFamilyStore ( cfname ) ; 
 
 / / disable compaction while flushing 
 - store . unreferenceSSTables ( ) ; 
 + store . clearUnsafe ( ) ; 
 store . disableAutoCompaction ( ) ; 
 
 / / Add test row 
 diff - - git a / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java b / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java 
 index f8bf034 . . 71b1890 100644 
 - - - a / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java 
 + + + b / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java 
 @ @ - 79 , 9 + 79 , 7 @ @ public class StreamingTransferTest extends CleanupHelper 
 Util . compactAll ( cfs ) . get ( ) ; 
 assertEquals ( 1 , cfs . getSSTables ( ) . size ( ) ) ; 
 SSTableReader sstable = cfs . getSSTables ( ) . iterator ( ) . next ( ) ; 
 - / / We acquire a reference now , because removeAllSSTables will mark the sstable compacted , and we have work to do with it 
 - sstable . acquireReference ( ) ; 
 - cfs . unreferenceSSTables ( ) ; 
 + cfs . clearUnsafe ( ) ; 
 
 / / transfer the first and last key 
 logger . debug ( " Transferring " + cfs . columnFamily ) ;
