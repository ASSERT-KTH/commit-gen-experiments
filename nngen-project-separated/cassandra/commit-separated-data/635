BLEU SCORE: 0.018738883683389617

TEST MSG: Reject invalid DC names as option while creating or altering NetworkTopologyStrategy
GENERATED MSG: move endpoint cache from snitch to strategy

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 4280abd . . 6edc491 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 6 , 6 + 6 , 7 @ @ <nl> * Extend ColumnIdentifier . internedInstances key to include the type that generated the byte buffer ( CASSANDRA - 12516 ) <nl> * Backport CASSANDRA - 10756 ( race condition in NativeTransportService shutdown ) ( CASSANDRA - 12472 ) <nl> * If CF has no clustering columns , any row cache is full partition cache ( CASSANDRA - 12499 ) <nl> + * Reject invalid replication settings when creating or altering a keyspace ( CASSANDRA - 12681 ) <nl> Merged from 2 . 2 : <nl> * Fix exceptions when enabling gossip on nodes that haven ' t joined the ring ( CASSANDRA - 12253 ) <nl> * Fix authentication problem when invoking clqsh copy from a SOURCE command ( CASSANDRA - 12642 ) <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index 0bd3920 . . b97a420 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 13 , 6 + 13 , 17 @ @ restore snapshots created with the previous major version using the <nl> ' sstableloader ' tool . You can upgrade the file format of your snapshots <nl> using the provided ' sstableupgrade ' tool . <nl> <nl> + 3 . 0 . 10 <nl> + = = = = = <nl> + <nl> + Upgrading <nl> + - - - - - - - - - <nl> + - To protect against accidental data loss , cassandra no longer allows <nl> + users to set arbitrary datacenter names for NetworkTopologyStrategy . <nl> + Cassandra will allow users to continue using existing keyspaces <nl> + with invalid datacenter names , but will validat DC names on CREATE and <nl> + ALTER <nl> + <nl> 3 . 0 . 9 <nl> = = = = = <nl> <nl> diff - - git a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java <nl> index c90c6a1 . . d72c0c2 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java <nl> + + + b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java <nl> @ @ - 319 , 7 + 319 , 7 @ @ public abstract class AbstractReplicationStrategy <nl> } <nl> } <nl> <nl> - private void validateExpectedOptions ( ) throws ConfigurationException <nl> + protected void validateExpectedOptions ( ) throws ConfigurationException <nl> { <nl> Collection expectedOptions = recognizedOptions ( ) ; <nl> if ( expectedOptions = = null ) <nl> diff - - git a / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java b / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java <nl> index 7c8d95e . . 78f5b06 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java <nl> + + + b / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java <nl> @ @ - 24 , 9 + 24 , 11 @ @ import java . util . Map . Entry ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . dht . Token ; <nl> import org . apache . cassandra . locator . TokenMetadata . Topology ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> import com . google . common . collect . Multimap ; <nl> @ @ - 193 , 10 + 195 , 43 @ @ public class NetworkTopologyStrategy extends AbstractReplicationStrategy <nl> } <nl> } <nl> <nl> + / * <nl> + * ( non - javadoc ) Method to generate list of valid data center names to be used to validate the replication parameters during CREATE / ALTER keyspace operations . <nl> + * All peers of current node are fetched from { @ link TokenMetadata } and then a set is build by fetching DC name of each peer . <nl> + * @ return a set of valid DC names <nl> + * / <nl> + private static Set < String > buildValidDataCentersSet ( ) <nl> + { <nl> + final Set < String > validDataCenters = new HashSet < > ( ) ; <nl> + final IEndpointSnitch snitch = DatabaseDescriptor . getEndpointSnitch ( ) ; <nl> + <nl> + / / Add data center of localhost . <nl> + validDataCenters . add ( snitch . getDatacenter ( FBUtilities . getBroadcastAddress ( ) ) ) ; <nl> + / / Fetch and add DCs of all peers . <nl> + for ( final InetAddress peer : StorageService . instance . getTokenMetadata ( ) . getAllEndpoints ( ) ) <nl> + { <nl> + validDataCenters . add ( snitch . getDatacenter ( peer ) ) ; <nl> + } <nl> + <nl> + return validDataCenters ; <nl> + } <nl> + <nl> public Collection < String > recognizedOptions ( ) <nl> { <nl> - / / We explicitely allow all options <nl> - return null ; <nl> + / / only valid options are valid DC names . <nl> + return buildValidDataCentersSet ( ) ; <nl> + } <nl> + <nl> + protected void validateExpectedOptions ( ) throws ConfigurationException <nl> + { <nl> + / / Do not accept query with no data centers specified . <nl> + if ( this . configOptions . isEmpty ( ) ) <nl> + { <nl> + throw new ConfigurationException ( " Configuration for at least one datacenter must be present " ) ; <nl> + } <nl> + <nl> + / / Validate the data center names <nl> + super . validateExpectedOptions ( ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> index 7f5eb02 . . 69a0b79 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> @ @ - 56 , 6 + 56 , 8 @ @ import org . apache . cassandra . dht . Murmur3Partitioner ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . exceptions . SyntaxException ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> + import org . apache . cassandra . locator . AbstractEndpointSnitch ; <nl> + import org . apache . cassandra . locator . IEndpointSnitch ; <nl> import org . apache . cassandra . serializers . TypeSerializer ; <nl> import org . apache . cassandra . service . ClientState ; <nl> import org . apache . cassandra . service . QueryState ; <nl> @ @ - 82 , 6 + 84 , 8 @ @ public abstract class CQLTester <nl> protected static final long ROW _ CACHE _ SIZE _ IN _ MB = Integer . valueOf ( System . getProperty ( " cassandra . test . row _ cache _ size _ in _ mb " , " 0 " ) ) ; <nl> private static final AtomicInteger seqNumber = new AtomicInteger ( ) ; <nl> protected static final ByteBuffer TOO _ BIG = ByteBuffer . allocate ( FBUtilities . MAX _ UNSIGNED _ SHORT + 1024 ) ; <nl> + public static final String DATA _ CENTER = " datacenter1 " ; <nl> + public static final String RACK1 = " rack1 " ; <nl> <nl> private static org . apache . cassandra . transport . Server server ; <nl> protected static final int nativePort ; <nl> @ @ - 127 , 6 + 131 , 13 @ @ public abstract class CQLTester <nl> { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> + / / Register an EndpointSnitch which returns fixed values for test . <nl> + DatabaseDescriptor . setEndpointSnitch ( new AbstractEndpointSnitch ( ) <nl> + { <nl> + @ Override public String getRack ( InetAddress endpoint ) { return RACK1 ; } <nl> + @ Override public String getDatacenter ( InetAddress endpoint ) { return DATA _ CENTER ; } <nl> + @ Override public int compareEndpoints ( InetAddress target , InetAddress a1 , InetAddress a2 ) { return 0 ; } <nl> + } ) ; <nl> } <nl> <nl> public static ResultMessage lastSchemaChangeResult ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java <nl> index 0cf13bd . . 2b31481 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java <nl> @ @ - 239 , 16 + 239 , 6 @ @ public class SecondaryIndexTest extends CQLTester <nl> } <nl> <nl> / * * <nl> - * Check one can use arbitrary name for datacenter when creating keyspace
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 048f6f2 . . 86b55fa 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 52 , 6 + 52 , 7 @ @ dev <nl> * cli support for index queries ( CASSANDRA - 1635 ) <nl> * cli support for updating schema memtable settings ( CASSANDRA - 1634 ) <nl> * reduce automatically chosen memtable sizes by 50 % ( CASSANDRA - 1641 ) <nl> + * move endpoint cache from snitch to strategy ( CASSANDRA - 1643 ) <nl> <nl> <nl> 0 . 7 - beta2 <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index c263bd6 . . 63419f0 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 709 , 14 + 709 , 6 @ @ public class DatabaseDescriptor <nl> return requestSchedulerId ; <nl> } <nl> <nl> - public static Class < ? extends AbstractReplicationStrategy > getReplicaPlacementStrategyClass ( String table ) <nl> - { <nl> - 	 KSMetaData meta = tables . get ( table ) ; <nl> - 	 if ( meta = = null ) <nl> - throw new RuntimeException ( table + " not found . Failure to call loadSchemas ( ) perhaps ? " ) ; <nl> - return meta . strategyClass ; <nl> - } <nl> - <nl> public static KSMetaData getKSMetaData ( String table ) <nl> { <nl> assert table ! = null ; <nl> diff - - git a / src / java / org / apache / cassandra / locator / AbstractEndpointSnitch . java b / src / java / org / apache / cassandra / locator / AbstractEndpointSnitch . java <nl> index c4afaac . . 08126f2 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / AbstractEndpointSnitch . java <nl> + + + b / src / java / org / apache / cassandra / locator / AbstractEndpointSnitch . java <nl> @ @ - 35 , 27 + 35 , 6 @ @ public abstract class AbstractEndpointSnitch implements IEndpointSnitch <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( AbstractEndpointSnitch . class ) ; <nl> <nl> - / * list of subscribers that are notified when cached values from this snitch are invalidated * / <nl> - protected List < AbstractReplicationStrategy > subscribers = new CopyOnWriteArrayList < AbstractReplicationStrategy > ( ) ; <nl> - <nl> - private final Map < Token , ArrayList < InetAddress > > cachedEndpoints = new NonBlockingHashMap < Token , ArrayList < InetAddress > > ( ) ; <nl> - <nl> - public ArrayList < InetAddress > getCachedEndpoints ( Token t ) <nl> - { <nl> - return cachedEndpoints . get ( t ) ; <nl> - } <nl> - <nl> - public void cacheEndpoint ( Token t , ArrayList < InetAddress > addr ) <nl> - { <nl> - cachedEndpoints . put ( t , addr ) ; <nl> - } <nl> - <nl> - public void clearEndpointCache ( ) <nl> - { <nl> - logger . debug ( " clearing cached endpoints " ) ; <nl> - cachedEndpoints . clear ( ) ; <nl> - } <nl> - <nl> public abstract List < InetAddress > getSortedListByProximity ( InetAddress address , Collection < InetAddress > unsortedAddress ) ; <nl> public abstract void sortByProximity ( InetAddress address , List < InetAddress > addresses ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java <nl> index 175f85e . . 0d3ecab 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java <nl> + + + b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java <nl> @ @ - 19 , 29 + 19 , 23 @ @ <nl> <nl> package org . apache . cassandra . locator ; <nl> <nl> - import java . io . DataInputStream ; <nl> - import java . io . DataOutputStream ; <nl> - import java . io . IOException ; <nl> import java . lang . reflect . Constructor ; <nl> import java . net . InetAddress ; <nl> import java . util . * ; <nl> <nl> - import org . apache . cassandra . config . ConfigurationException ; <nl> - import org . apache . cassandra . service . * ; <nl> - import org . apache . commons . lang . ObjectUtils ; <nl> + import com . google . common . collect . HashMultimap ; <nl> + import com . google . common . collect . Multimap ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import com . google . common . collect . HashMultimap ; <nl> - import com . google . common . collect . Multimap ; <nl> + import org . apache . cassandra . config . ConfigurationException ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . dht . Token ; <nl> import org . apache . cassandra . gms . FailureDetector ; <nl> - import org . apache . cassandra . service . StorageProxy ; <nl> + import org . apache . cassandra . service . * ; <nl> import org . apache . cassandra . thrift . ConsistencyLevel ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> - import org . apache . hadoop . util . StringUtils ; <nl> import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; <nl> <nl> / * * <nl> @ @ - 51 , 10 + 45 , 10 @ @ public abstract class AbstractReplicationStrategy <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( AbstractReplicationStrategy . class ) ; <nl> <nl> - public String table ; <nl> - private TokenMetadata tokenMetadata ; <nl> + public final String table ; <nl> + private final TokenMetadata tokenMetadata ; <nl> public final IEndpointSnitch snitch ; <nl> - public Map < String , String > configOptions ; <nl> + public final Map < String , String > configOptions ; <nl> <nl> AbstractReplicationStrategy ( String table , TokenMetadata tokenMetadata , IEndpointSnitch snitch , Map < String , String > configOptions ) <nl> { <nl> @ @ - 68 , 6 + 62 , 24 @ @ public abstract class AbstractReplicationStrategy <nl> this . table = table ; <nl> } <nl> <nl> + private final Map < Token , ArrayList < InetAddress > > cachedEndpoints = new NonBlockingHashMap < Token , ArrayList < InetAddress > > ( ) ; <nl> + <nl> + public ArrayList < InetAddress > getCachedEndpoints ( Token t ) <nl> + { <nl> + return cachedEndpoints . get ( t ) ; <nl> + } <nl> + <nl> + public void cacheEndpoint ( Token t , ArrayList < InetAddress > addr ) <nl> + { <nl> + cachedEndpoints . put ( t , addr ) ; <nl> + } <nl> + <nl> + public void clearEndpointCache ( ) <nl> + { <nl> + logger . debug ( " clearing cached endpoints " ) ; <nl> + cachedEndpoints . clear ( ) ; <nl> + } <nl> + <nl> / * * <nl> * get the ( possibly cached ) endpoints that should store the given Token <nl> * Note that while the endpoints are conceptually a Set ( no duplicates will be included ) , <nl> @ @ - 79 , 13 + 91 , 13 @ @ public abstract class AbstractReplicationStrategy <nl> public ArrayList < InetAddress > getNaturalEndpoints ( Token searchToken ) throws IllegalStateException <nl> { <nl> Token keyToken = TokenMetadata . firstToken ( tokenMetadata . sortedTokens ( ) , searchToken ) ; <nl> - ArrayList < InetAddress > endpoints = snitch . getCachedEndpoints ( keyToken ) ; <nl> + ArrayList < InetAddress > endpoints = getCachedEndpoints ( keyToken ) ; <nl> if ( endpoints = = null ) <nl> { <nl> TokenMetadata tokenMetadataClone = tokenMetadata . cloneOnlyTokenMap ( ) ; <nl> keyToken = TokenMetadata . firstToken ( tokenMetadataClone . sortedTokens ( ) , searchToken ) ; <nl> endpoints = new ArrayList < InetAddress > ( calculateNaturalEndpoints ( searchToken , tokenMetadataClone ) ) ; <nl> - snitch . cacheEndpoint ( keyToken , endpoints ) ; <nl> + cacheEndpoint ( keyToken , endpoints ) ; <nl> / / calculateNaturalEndpoints should have checked this already , this is a safety <nl> assert getReplicationFactor ( ) < = endpoints . size ( ) : String . format ( " endpoints % s generated for RF of % s " , <nl> Arrays . toString ( endpoints . toArray ( ) ) , <nl> @ @ - 220 , 7 + 232 , 7 @ @ public abstract class AbstractReplicationStrategy <nl> <nl> public void invalidateCachedTokenEndpointValues ( ) <nl> { <nl> - snitch . clearEndpointCache ( ) ; <nl> + clearEndpointCache ( ) ; <nl> } <nl> <nl> public static AbstractReplicationStrategy createReplicationStrategy ( String table , <nl> diff - - git a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> index 3dfc3a3 . . 37de7d5 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> + + + b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> @ @ - 86 , 21 + 86 , 6 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa <nl> } <nl> } <nl> <nl> - public ArrayList < InetAddress > getCachedEndpoints ( Token t ) <nl> - { <nl> - return subsnitch . getCachedEndpoints ( t ) ; <nl> - } <nl> - <nl> - public void cacheEndpoint ( Token t , ArrayList < InetAddress > addr ) <nl> - { <nl> - subsnitch . cacheEndpoint ( t , addr ) ; <nl> - } <nl> - <nl> - public void clearEndpointCache ( ) <nl> - { <nl> - subsnitch . clearEndpointCache ( ) ; <nl> - } <nl> - <nl> public String getRack ( InetAddress endpoint ) <nl> { <nl> return subsnitch . getRack ( endpoint ) ; <nl> diff - - git a / src / java / org / apache / cassandra / locator / IEndpointSnitch . java b / src / java / org / apache / cassandra / locator / IEndpointSnitch . java <nl> index 388fe4c . . 28a7989 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / IEndpointSnitch . java <nl> + + + b / src / java / org / apache / cassandra / locator / IEndpointSnitch . java <nl> @ @ - 57 , 19 + 57 , 4 @ @ public interface IEndpointSnitch <nl> * compares two endpoints in relation to the target endpoint , returning as Comparator . compare would <nl> * / <nl> public int compareEndpoints ( InetAddress target , InetAddress a1 , InetAddress a2 ) ; <nl> - <nl> - / * * <nl> - * returns a list of cached endpoints for a given token . <nl> - * / <nl> - public ArrayList < InetAddress > getCachedEndpoints ( Token t ) ; <nl> - <nl> - / * * <nl> - * puts an address in the cache for a given token . <nl> - * / <nl> - public void cacheEndpoint ( Token t , ArrayList < InetAddress > addr ) ; <nl> - <nl> - / * * <nl> - * clears all cache values . <nl> - * / <nl> - public void clearEndpointCache ( ) ; <nl> - } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java <nl> index 38c12ba . . cedb5fa 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java <nl> + + + b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . config . ConfigurationException ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . ResourceWatcher ; <nl> import org . apache . cassandra . utils . WrappedRunnable ; <nl> @ @ - 152 , 6 + 153 , 6 @ @ public class PropertyFileSnitch extends AbstractNetworkTopologySnitch <nl> <nl> logger . debug ( " loaded network topology { } " , FBUtilities . toString ( reloadedMap ) ) ; <nl> endpointMap = reloadedMap ; <nl> - clearEndpointCache ( ) ; <nl> + StorageService . instance . getTokenMetadata ( ) . invalidateCaches ( ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / locator / TokenMetadata . java b / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> index 70692d3 . . 4a5652d 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> + + + b / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> @ @ - 121 , 7 + 121 , 7 @ @ public class TokenMetadata <nl> sortedTokens = sortTokens ( ) ; <nl> } <nl> leavingEndpoints . remove ( endpoint ) ; <nl> - fireTokenToEndpointMapChanged ( ) ; <nl> + invalidateCaches ( ) ; <nl> } <nl> finally <nl> { <nl> @ @ - 197 , 7 + 197 , 7 @ @ public class TokenMetadata <nl> tokenToEndpointMap . inverse ( ) . remove ( endpoint ) ; <nl> leavingEndpoints . remove ( endpoint ) ; <nl> sortedTokens = sortTokens ( ) ; <nl> - fireTokenToEndpointMapChanged ( ) ; <nl> + invalidateCaches ( ) ; <nl> } <nl> finally <nl> { <nl> @ @ - 450 , 7 + 450 , 7 @ @ public class TokenMetadata <nl> tokenToEndpointMap . clear ( ) ; <nl> leavingEndpoints . clear ( ) ; <nl> pendingRanges . clear ( ) ; <nl> - fireTokenToEndpointMapChanged ( ) ; <nl> + invalidateCaches ( ) ; <nl> } <nl> <nl> public String toString ( ) <nl> @ @ - 527 , 7 + 527 , 7 @ @ public class TokenMetadata <nl> return sb . toString ( ) ; <nl> } <nl> <nl> - protected void fireTokenToEndpointMapChanged ( ) <nl> + public void invalidateCaches ( ) <nl> { <nl> for ( AbstractReplicationStrategy subscriber : subscribers ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 1b955bd . . 7f3caa0 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 168 , 7 + 168 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> " request " ) ; <nl> <nl> / * We use this interface to determine where replicas need to be placed * / <nl> - private Map < String , AbstractReplicationStrategy > replicationStrategies ; <nl> + private final Map < String , AbstractReplicationStrategy > replicationStrategies ; <nl> <nl> private Set < InetAddress > replicatingNodes ; <nl> private InetAddress removingNode ; <nl> @ @ - 252 , 10 + 252 , 8 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> public AbstractReplicationStrategy getReplicationStrategy ( String table ) <nl> { <nl> AbstractReplicationStrategy ars = replicationStrategies . get ( table ) ; <nl> - if ( ars = = null ) <nl> - throw new RuntimeException ( String . format ( " No replica strategy configured for % s " , table ) ) ; <nl> - else <nl> - return ars ; <nl> + assert ars ! = null : String . format ( " No replica strategy configured for % s " , table ) ; <nl> + return ars ; <nl> } <nl> <nl> public void initReplicationStrategy ( String table ) <nl> diff - - git a / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java b / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java <nl> index c6d138a . . 731ba82 100644 <nl> - - - a / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java <nl> + + + b / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java <nl> @ @ - 39 , 19 + 39 , 15 @ @ import org . apache . cassandra . service . StorageServiceAccessor ; <nl> public class SimpleStrategyTest extends SchemaLoader <nl> { <nl> @ Test <nl> + public void tryValidTable ( ) <nl> + { <nl> + assert StorageService . instance . getReplicationStrategy ( " Keyspace1 " ) ! = null ; <nl> + } <nl> + <nl> + @ Test ( expected = AssertionError . class ) <nl> public void tryBogusTable ( ) <nl> { <nl> - AbstractReplicationStrategy rs = StorageService . instance . getReplicationStrategy ( " Keyspace1 " ) ; <nl> - assertNotNull ( rs ) ; <nl> - try <nl> - { <nl> - rs = StorageService . instance . getReplicationStrategy ( " SomeBogusTableThatDoesntExist " ) ; <nl> - throw new AssertionError ( " SS . createReplicationStrategy ( ) should have thrown a RuntimeException . " ) ; <nl> - } <nl> - catch ( RuntimeException ex ) <nl> - { <nl> - / / This exception should be thrown . <nl> - } <nl> + StorageService . instance . getReplicationStrategy ( " SomeBogusTableThatDoesntExist " ) ; <nl> } <nl> <nl> @ Test

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 4280abd . . 6edc491 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 6 , 6 + 6 , 7 @ @ 
 * Extend ColumnIdentifier . internedInstances key to include the type that generated the byte buffer ( CASSANDRA - 12516 ) 
 * Backport CASSANDRA - 10756 ( race condition in NativeTransportService shutdown ) ( CASSANDRA - 12472 ) 
 * If CF has no clustering columns , any row cache is full partition cache ( CASSANDRA - 12499 ) 
 + * Reject invalid replication settings when creating or altering a keyspace ( CASSANDRA - 12681 ) 
 Merged from 2 . 2 : 
 * Fix exceptions when enabling gossip on nodes that haven ' t joined the ring ( CASSANDRA - 12253 ) 
 * Fix authentication problem when invoking clqsh copy from a SOURCE command ( CASSANDRA - 12642 ) 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index 0bd3920 . . b97a420 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 13 , 6 + 13 , 17 @ @ restore snapshots created with the previous major version using the 
 ' sstableloader ' tool . You can upgrade the file format of your snapshots 
 using the provided ' sstableupgrade ' tool . 
 
 + 3 . 0 . 10 
 + = = = = = 
 + 
 + Upgrading 
 + - - - - - - - - - 
 + - To protect against accidental data loss , cassandra no longer allows 
 + users to set arbitrary datacenter names for NetworkTopologyStrategy . 
 + Cassandra will allow users to continue using existing keyspaces 
 + with invalid datacenter names , but will validat DC names on CREATE and 
 + ALTER 
 + 
 3 . 0 . 9 
 = = = = = 
 
 diff - - git a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java 
 index c90c6a1 . . d72c0c2 100644 
 - - - a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java 
 + + + b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java 
 @ @ - 319 , 7 + 319 , 7 @ @ public abstract class AbstractReplicationStrategy 
 } 
 } 
 
 - private void validateExpectedOptions ( ) throws ConfigurationException 
 + protected void validateExpectedOptions ( ) throws ConfigurationException 
 { 
 Collection expectedOptions = recognizedOptions ( ) ; 
 if ( expectedOptions = = null ) 
 diff - - git a / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java b / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java 
 index 7c8d95e . . 78f5b06 100644 
 - - - a / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java 
 + + + b / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java 
 @ @ - 24 , 9 + 24 , 11 @ @ import java . util . Map . Entry ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . dht . Token ; 
 import org . apache . cassandra . locator . TokenMetadata . Topology ; 
 + import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 import com . google . common . collect . Multimap ; 
 @ @ - 193 , 10 + 195 , 43 @ @ public class NetworkTopologyStrategy extends AbstractReplicationStrategy 
 } 
 } 
 
 + / * 
 + * ( non - javadoc ) Method to generate list of valid data center names to be used to validate the replication parameters during CREATE / ALTER keyspace operations . 
 + * All peers of current node are fetched from { @ link TokenMetadata } and then a set is build by fetching DC name of each peer . 
 + * @ return a set of valid DC names 
 + * / 
 + private static Set < String > buildValidDataCentersSet ( ) 
 + { 
 + final Set < String > validDataCenters = new HashSet < > ( ) ; 
 + final IEndpointSnitch snitch = DatabaseDescriptor . getEndpointSnitch ( ) ; 
 + 
 + / / Add data center of localhost . 
 + validDataCenters . add ( snitch . getDatacenter ( FBUtilities . getBroadcastAddress ( ) ) ) ; 
 + / / Fetch and add DCs of all peers . 
 + for ( final InetAddress peer : StorageService . instance . getTokenMetadata ( ) . getAllEndpoints ( ) ) 
 + { 
 + validDataCenters . add ( snitch . getDatacenter ( peer ) ) ; 
 + } 
 + 
 + return validDataCenters ; 
 + } 
 + 
 public Collection < String > recognizedOptions ( ) 
 { 
 - / / We explicitely allow all options 
 - return null ; 
 + / / only valid options are valid DC names . 
 + return buildValidDataCentersSet ( ) ; 
 + } 
 + 
 + protected void validateExpectedOptions ( ) throws ConfigurationException 
 + { 
 + / / Do not accept query with no data centers specified . 
 + if ( this . configOptions . isEmpty ( ) ) 
 + { 
 + throw new ConfigurationException ( " Configuration for at least one datacenter must be present " ) ; 
 + } 
 + 
 + / / Validate the data center names 
 + super . validateExpectedOptions ( ) ; 
 } 
 
 @ Override 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 index 7f5eb02 . . 69a0b79 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 @ @ - 56 , 6 + 56 , 8 @ @ import org . apache . cassandra . dht . Murmur3Partitioner ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . exceptions . SyntaxException ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 + import org . apache . cassandra . locator . AbstractEndpointSnitch ; 
 + import org . apache . cassandra . locator . IEndpointSnitch ; 
 import org . apache . cassandra . serializers . TypeSerializer ; 
 import org . apache . cassandra . service . ClientState ; 
 import org . apache . cassandra . service . QueryState ; 
 @ @ - 82 , 6 + 84 , 8 @ @ public abstract class CQLTester 
 protected static final long ROW _ CACHE _ SIZE _ IN _ MB = Integer . valueOf ( System . getProperty ( " cassandra . test . row _ cache _ size _ in _ mb " , " 0 " ) ) ; 
 private static final AtomicInteger seqNumber = new AtomicInteger ( ) ; 
 protected static final ByteBuffer TOO _ BIG = ByteBuffer . allocate ( FBUtilities . MAX _ UNSIGNED _ SHORT + 1024 ) ; 
 + public static final String DATA _ CENTER = " datacenter1 " ; 
 + public static final String RACK1 = " rack1 " ; 
 
 private static org . apache . cassandra . transport . Server server ; 
 protected static final int nativePort ; 
 @ @ - 127 , 6 + 131 , 13 @ @ public abstract class CQLTester 
 { 
 throw new RuntimeException ( e ) ; 
 } 
 + / / Register an EndpointSnitch which returns fixed values for test . 
 + DatabaseDescriptor . setEndpointSnitch ( new AbstractEndpointSnitch ( ) 
 + { 
 + @ Override public String getRack ( InetAddress endpoint ) { return RACK1 ; } 
 + @ Override public String getDatacenter ( InetAddress endpoint ) { return DATA _ CENTER ; } 
 + @ Override public int compareEndpoints ( InetAddress target , InetAddress a1 , InetAddress a2 ) { return 0 ; } 
 + } ) ; 
 } 
 
 public static ResultMessage lastSchemaChangeResult ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java 
 index 0cf13bd . . 2b31481 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java 
 @ @ - 239 , 16 + 239 , 6 @ @ public class SecondaryIndexTest extends CQLTester 
 } 
 
 / * * 
 - * Check one can use arbitrary name for datacenter when creating keyspace

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 048f6f2 . . 86b55fa 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 52 , 6 + 52 , 7 @ @ dev 
 * cli support for index queries ( CASSANDRA - 1635 ) 
 * cli support for updating schema memtable settings ( CASSANDRA - 1634 ) 
 * reduce automatically chosen memtable sizes by 50 % ( CASSANDRA - 1641 ) 
 + * move endpoint cache from snitch to strategy ( CASSANDRA - 1643 ) 
 
 
 0 . 7 - beta2 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index c263bd6 . . 63419f0 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 709 , 14 + 709 , 6 @ @ public class DatabaseDescriptor 
 return requestSchedulerId ; 
 } 
 
 - public static Class < ? extends AbstractReplicationStrategy > getReplicaPlacementStrategyClass ( String table ) 
 - { 
 - 	 KSMetaData meta = tables . get ( table ) ; 
 - 	 if ( meta = = null ) 
 - throw new RuntimeException ( table + " not found . Failure to call loadSchemas ( ) perhaps ? " ) ; 
 - return meta . strategyClass ; 
 - } 
 - 
 public static KSMetaData getKSMetaData ( String table ) 
 { 
 assert table ! = null ; 
 diff - - git a / src / java / org / apache / cassandra / locator / AbstractEndpointSnitch . java b / src / java / org / apache / cassandra / locator / AbstractEndpointSnitch . java 
 index c4afaac . . 08126f2 100644 
 - - - a / src / java / org / apache / cassandra / locator / AbstractEndpointSnitch . java 
 + + + b / src / java / org / apache / cassandra / locator / AbstractEndpointSnitch . java 
 @ @ - 35 , 27 + 35 , 6 @ @ public abstract class AbstractEndpointSnitch implements IEndpointSnitch 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( AbstractEndpointSnitch . class ) ; 
 
 - / * list of subscribers that are notified when cached values from this snitch are invalidated * / 
 - protected List < AbstractReplicationStrategy > subscribers = new CopyOnWriteArrayList < AbstractReplicationStrategy > ( ) ; 
 - 
 - private final Map < Token , ArrayList < InetAddress > > cachedEndpoints = new NonBlockingHashMap < Token , ArrayList < InetAddress > > ( ) ; 
 - 
 - public ArrayList < InetAddress > getCachedEndpoints ( Token t ) 
 - { 
 - return cachedEndpoints . get ( t ) ; 
 - } 
 - 
 - public void cacheEndpoint ( Token t , ArrayList < InetAddress > addr ) 
 - { 
 - cachedEndpoints . put ( t , addr ) ; 
 - } 
 - 
 - public void clearEndpointCache ( ) 
 - { 
 - logger . debug ( " clearing cached endpoints " ) ; 
 - cachedEndpoints . clear ( ) ; 
 - } 
 - 
 public abstract List < InetAddress > getSortedListByProximity ( InetAddress address , Collection < InetAddress > unsortedAddress ) ; 
 public abstract void sortByProximity ( InetAddress address , List < InetAddress > addresses ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java 
 index 175f85e . . 0d3ecab 100644 
 - - - a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java 
 + + + b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java 
 @ @ - 19 , 29 + 19 , 23 @ @ 
 
 package org . apache . cassandra . locator ; 
 
 - import java . io . DataInputStream ; 
 - import java . io . DataOutputStream ; 
 - import java . io . IOException ; 
 import java . lang . reflect . Constructor ; 
 import java . net . InetAddress ; 
 import java . util . * ; 
 
 - import org . apache . cassandra . config . ConfigurationException ; 
 - import org . apache . cassandra . service . * ; 
 - import org . apache . commons . lang . ObjectUtils ; 
 + import com . google . common . collect . HashMultimap ; 
 + import com . google . common . collect . Multimap ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import com . google . common . collect . HashMultimap ; 
 - import com . google . common . collect . Multimap ; 
 + import org . apache . cassandra . config . ConfigurationException ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . dht . Token ; 
 import org . apache . cassandra . gms . FailureDetector ; 
 - import org . apache . cassandra . service . StorageProxy ; 
 + import org . apache . cassandra . service . * ; 
 import org . apache . cassandra . thrift . ConsistencyLevel ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 - import org . apache . hadoop . util . StringUtils ; 
 import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; 
 
 / * * 
 @ @ - 51 , 10 + 45 , 10 @ @ public abstract class AbstractReplicationStrategy 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( AbstractReplicationStrategy . class ) ; 
 
 - public String table ; 
 - private TokenMetadata tokenMetadata ; 
 + public final String table ; 
 + private final TokenMetadata tokenMetadata ; 
 public final IEndpointSnitch snitch ; 
 - public Map < String , String > configOptions ; 
 + public final Map < String , String > configOptions ; 
 
 AbstractReplicationStrategy ( String table , TokenMetadata tokenMetadata , IEndpointSnitch snitch , Map < String , String > configOptions ) 
 { 
 @ @ - 68 , 6 + 62 , 24 @ @ public abstract class AbstractReplicationStrategy 
 this . table = table ; 
 } 
 
 + private final Map < Token , ArrayList < InetAddress > > cachedEndpoints = new NonBlockingHashMap < Token , ArrayList < InetAddress > > ( ) ; 
 + 
 + public ArrayList < InetAddress > getCachedEndpoints ( Token t ) 
 + { 
 + return cachedEndpoints . get ( t ) ; 
 + } 
 + 
 + public void cacheEndpoint ( Token t , ArrayList < InetAddress > addr ) 
 + { 
 + cachedEndpoints . put ( t , addr ) ; 
 + } 
 + 
 + public void clearEndpointCache ( ) 
 + { 
 + logger . debug ( " clearing cached endpoints " ) ; 
 + cachedEndpoints . clear ( ) ; 
 + } 
 + 
 / * * 
 * get the ( possibly cached ) endpoints that should store the given Token 
 * Note that while the endpoints are conceptually a Set ( no duplicates will be included ) , 
 @ @ - 79 , 13 + 91 , 13 @ @ public abstract class AbstractReplicationStrategy 
 public ArrayList < InetAddress > getNaturalEndpoints ( Token searchToken ) throws IllegalStateException 
 { 
 Token keyToken = TokenMetadata . firstToken ( tokenMetadata . sortedTokens ( ) , searchToken ) ; 
 - ArrayList < InetAddress > endpoints = snitch . getCachedEndpoints ( keyToken ) ; 
 + ArrayList < InetAddress > endpoints = getCachedEndpoints ( keyToken ) ; 
 if ( endpoints = = null ) 
 { 
 TokenMetadata tokenMetadataClone = tokenMetadata . cloneOnlyTokenMap ( ) ; 
 keyToken = TokenMetadata . firstToken ( tokenMetadataClone . sortedTokens ( ) , searchToken ) ; 
 endpoints = new ArrayList < InetAddress > ( calculateNaturalEndpoints ( searchToken , tokenMetadataClone ) ) ; 
 - snitch . cacheEndpoint ( keyToken , endpoints ) ; 
 + cacheEndpoint ( keyToken , endpoints ) ; 
 / / calculateNaturalEndpoints should have checked this already , this is a safety 
 assert getReplicationFactor ( ) < = endpoints . size ( ) : String . format ( " endpoints % s generated for RF of % s " , 
 Arrays . toString ( endpoints . toArray ( ) ) , 
 @ @ - 220 , 7 + 232 , 7 @ @ public abstract class AbstractReplicationStrategy 
 
 public void invalidateCachedTokenEndpointValues ( ) 
 { 
 - snitch . clearEndpointCache ( ) ; 
 + clearEndpointCache ( ) ; 
 } 
 
 public static AbstractReplicationStrategy createReplicationStrategy ( String table , 
 diff - - git a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 index 3dfc3a3 . . 37de7d5 100644 
 - - - a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 + + + b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 @ @ - 86 , 21 + 86 , 6 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa 
 } 
 } 
 
 - public ArrayList < InetAddress > getCachedEndpoints ( Token t ) 
 - { 
 - return subsnitch . getCachedEndpoints ( t ) ; 
 - } 
 - 
 - public void cacheEndpoint ( Token t , ArrayList < InetAddress > addr ) 
 - { 
 - subsnitch . cacheEndpoint ( t , addr ) ; 
 - } 
 - 
 - public void clearEndpointCache ( ) 
 - { 
 - subsnitch . clearEndpointCache ( ) ; 
 - } 
 - 
 public String getRack ( InetAddress endpoint ) 
 { 
 return subsnitch . getRack ( endpoint ) ; 
 diff - - git a / src / java / org / apache / cassandra / locator / IEndpointSnitch . java b / src / java / org / apache / cassandra / locator / IEndpointSnitch . java 
 index 388fe4c . . 28a7989 100644 
 - - - a / src / java / org / apache / cassandra / locator / IEndpointSnitch . java 
 + + + b / src / java / org / apache / cassandra / locator / IEndpointSnitch . java 
 @ @ - 57 , 19 + 57 , 4 @ @ public interface IEndpointSnitch 
 * compares two endpoints in relation to the target endpoint , returning as Comparator . compare would 
 * / 
 public int compareEndpoints ( InetAddress target , InetAddress a1 , InetAddress a2 ) ; 
 - 
 - / * * 
 - * returns a list of cached endpoints for a given token . 
 - * / 
 - public ArrayList < InetAddress > getCachedEndpoints ( Token t ) ; 
 - 
 - / * * 
 - * puts an address in the cache for a given token . 
 - * / 
 - public void cacheEndpoint ( Token t , ArrayList < InetAddress > addr ) ; 
 - 
 - / * * 
 - * clears all cache values . 
 - * / 
 - public void clearEndpointCache ( ) ; 
 - } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java 
 index 38c12ba . . cedb5fa 100644 
 - - - a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java 
 + + + b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . config . ConfigurationException ; 
 + import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . ResourceWatcher ; 
 import org . apache . cassandra . utils . WrappedRunnable ; 
 @ @ - 152 , 6 + 153 , 6 @ @ public class PropertyFileSnitch extends AbstractNetworkTopologySnitch 
 
 logger . debug ( " loaded network topology { } " , FBUtilities . toString ( reloadedMap ) ) ; 
 endpointMap = reloadedMap ; 
 - clearEndpointCache ( ) ; 
 + StorageService . instance . getTokenMetadata ( ) . invalidateCaches ( ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / locator / TokenMetadata . java b / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 index 70692d3 . . 4a5652d 100644 
 - - - a / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 + + + b / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 @ @ - 121 , 7 + 121 , 7 @ @ public class TokenMetadata 
 sortedTokens = sortTokens ( ) ; 
 } 
 leavingEndpoints . remove ( endpoint ) ; 
 - fireTokenToEndpointMapChanged ( ) ; 
 + invalidateCaches ( ) ; 
 } 
 finally 
 { 
 @ @ - 197 , 7 + 197 , 7 @ @ public class TokenMetadata 
 tokenToEndpointMap . inverse ( ) . remove ( endpoint ) ; 
 leavingEndpoints . remove ( endpoint ) ; 
 sortedTokens = sortTokens ( ) ; 
 - fireTokenToEndpointMapChanged ( ) ; 
 + invalidateCaches ( ) ; 
 } 
 finally 
 { 
 @ @ - 450 , 7 + 450 , 7 @ @ public class TokenMetadata 
 tokenToEndpointMap . clear ( ) ; 
 leavingEndpoints . clear ( ) ; 
 pendingRanges . clear ( ) ; 
 - fireTokenToEndpointMapChanged ( ) ; 
 + invalidateCaches ( ) ; 
 } 
 
 public String toString ( ) 
 @ @ - 527 , 7 + 527 , 7 @ @ public class TokenMetadata 
 return sb . toString ( ) ; 
 } 
 
 - protected void fireTokenToEndpointMapChanged ( ) 
 + public void invalidateCaches ( ) 
 { 
 for ( AbstractReplicationStrategy subscriber : subscribers ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 1b955bd . . 7f3caa0 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 168 , 7 + 168 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 " request " ) ; 
 
 / * We use this interface to determine where replicas need to be placed * / 
 - private Map < String , AbstractReplicationStrategy > replicationStrategies ; 
 + private final Map < String , AbstractReplicationStrategy > replicationStrategies ; 
 
 private Set < InetAddress > replicatingNodes ; 
 private InetAddress removingNode ; 
 @ @ - 252 , 10 + 252 , 8 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 public AbstractReplicationStrategy getReplicationStrategy ( String table ) 
 { 
 AbstractReplicationStrategy ars = replicationStrategies . get ( table ) ; 
 - if ( ars = = null ) 
 - throw new RuntimeException ( String . format ( " No replica strategy configured for % s " , table ) ) ; 
 - else 
 - return ars ; 
 + assert ars ! = null : String . format ( " No replica strategy configured for % s " , table ) ; 
 + return ars ; 
 } 
 
 public void initReplicationStrategy ( String table ) 
 diff - - git a / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java b / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java 
 index c6d138a . . 731ba82 100644 
 - - - a / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java 
 + + + b / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java 
 @ @ - 39 , 19 + 39 , 15 @ @ import org . apache . cassandra . service . StorageServiceAccessor ; 
 public class SimpleStrategyTest extends SchemaLoader 
 { 
 @ Test 
 + public void tryValidTable ( ) 
 + { 
 + assert StorageService . instance . getReplicationStrategy ( " Keyspace1 " ) ! = null ; 
 + } 
 + 
 + @ Test ( expected = AssertionError . class ) 
 public void tryBogusTable ( ) 
 { 
 - AbstractReplicationStrategy rs = StorageService . instance . getReplicationStrategy ( " Keyspace1 " ) ; 
 - assertNotNull ( rs ) ; 
 - try 
 - { 
 - rs = StorageService . instance . getReplicationStrategy ( " SomeBogusTableThatDoesntExist " ) ; 
 - throw new AssertionError ( " SS . createReplicationStrategy ( ) should have thrown a RuntimeException . " ) ; 
 - } 
 - catch ( RuntimeException ex ) 
 - { 
 - / / This exception should be thrown . 
 - } 
 + StorageService . instance . getReplicationStrategy ( " SomeBogusTableThatDoesntExist " ) ; 
 } 
 
 @ Test
