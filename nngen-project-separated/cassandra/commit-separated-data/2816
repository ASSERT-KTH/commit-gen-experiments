BLEU SCORE: 0.029381754016308166

TEST MSG: Update NEWS for 6589
GENERATED MSG: refuse to open sstables from a future version

TEST DIFF (one line): diff - - git a / NEWS . txt b / NEWS . txt <nl> index 2e40e9c . . 4c95bea 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 22 , 6 + 22 , 17 @ @ New features <nl> - Batchlog replay can be , and is throttled by default now . <nl> See batchlog _ replay _ throttle _ in _ kb setting in cassandra . yaml . <nl> <nl> + Upgrading <nl> + - - - - - - - - - <nl> + - If your cluster began on a version before 1 . 2 , check that your secondary <nl> + index SSTables are on version ' ic ' before upgrading . If not , run <nl> + ' nodetool upgradesstables ' if on 1 . 2 . 14 or later , or run ' nodetool <nl> + upgradesstables ks cf ' with the keyspace and secondary index named <nl> + explicitly otherwise . If you don ' t do this and upgrade to 2 . 0 . x and it <nl> + refuses to start because of ' hf ' version files in the secondary index , <nl> + you will need to delete / move them out of the way and recreate the index <nl> + when 2 . 0 . x starts . <nl> + <nl> <nl> 2 . 0 . 3 <nl> = = = = =
NEAREST DIFF (one line): diff - - git a / src / avro / internode . genavro b / src / avro / internode . genavro <nl> index 98f517a . . 898046d 100644 <nl> - - - a / src / avro / internode . genavro <nl> + + + b / src / avro / internode . genavro <nl> @ @ - 22 , 20 + 22 , 68 @ @ <nl> @ namespace ( " org . apache . cassandra " ) <nl> <nl> protocol InterNode { <nl> - / / import the public client API <nl> - import idl " . . / . . / interface / cassandra . genavro " ; <nl> + @ aliases ( [ " org . apache . cassandra . config . avro . IndexType " ] ) <nl> + @ namespace ( " org . apache . cassandra . db . migration . avro " ) <nl> + enum IndexType { <nl> + KEYS <nl> + } <nl> + <nl> + @ aliases ( [ " org . apache . cassandra . config . avro . ColumnDef " ] ) <nl> + @ namespace ( " org . apache . cassandra . db . migration . avro " ) <nl> + record ColumnDef { <nl> + bytes name ; <nl> + string validation _ class ; <nl> + union { IndexType , null } index _ type ; <nl> + union { string , null } index _ name ; <nl> + } <nl> <nl> + @ aliases ( [ " org . apache . cassandra . config . avro . CfDef " ] ) <nl> + @ namespace ( " org . apache . cassandra . db . migration . avro " ) <nl> + record CfDef { <nl> + string keyspace ; <nl> + string name ; <nl> + union { string , null } column _ type ; <nl> + union { string , null } comparator _ type ; <nl> + union { string , null } subcomparator _ type ; <nl> + union { string , null } comment ; <nl> + union { double , null } row _ cache _ size ; <nl> + union { double , null } key _ cache _ size ; <nl> + union { double , null } read _ repair _ chance ; <nl> + union { boolean , null } replicate _ on _ write ; <nl> + union { int , null } gc _ grace _ seconds ; <nl> + union { null , string } default _ validation _ class = null ; <nl> + union { null , int } min _ compaction _ threshold = null ; <nl> + union { null , int } max _ compaction _ threshold = null ; <nl> + union { int , null } row _ cache _ save _ period _ in _ seconds = 0 ; <nl> + union { int , null } key _ cache _ save _ period _ in _ seconds = 3600 ; <nl> + union { int , null } memtable _ flush _ after _ mins = 60 ; <nl> + union { null , int } memtable _ throughput _ in _ mb = null ; <nl> + union { null , double } memtable _ operations _ in _ millions = null ; <nl> + union { int , null } id ; <nl> + union { array < ColumnDef > , null } column _ metadata ; <nl> + } <nl> + <nl> + @ aliases ( [ " org . apache . cassandra . config . avro . KsDef " ] ) <nl> + @ namespace ( " org . apache . cassandra . db . migration . avro " ) <nl> + record KsDef { <nl> + string name ; <nl> + string strategy _ class ; <nl> + union { map < string > , null } strategy _ options ; <nl> + int replication _ factor ; <nl> + array < CfDef > cf _ defs ; <nl> + } <nl> + <nl> @ namespace ( " org . apache . cassandra . utils . avro " ) <nl> fixed UUID ( 16 ) ; <nl> <nl> @ namespace ( " org . apache . cassandra . db . migration . avro " ) <nl> record AddColumnFamily { <nl> - org . apache . cassandra . avro . CfDef cf ; <nl> + CfDef cf ; <nl> } <nl> <nl> @ namespace ( " org . apache . cassandra . db . migration . avro " ) <nl> record AddKeyspace { <nl> - org . apache . cassandra . avro . KsDef ks ; <nl> + KsDef ks ; <nl> } <nl> <nl> @ namespace ( " org . apache . cassandra . db . migration . avro " ) <nl> @ @ - 65 , 13 + 113 , 13 @ @ protocol InterNode { <nl> <nl> @ namespace ( " org . apache . cassandra . db . migration . avro " ) <nl> record UpdateKeyspace { <nl> - org . apache . cassandra . avro . KsDef oldKs ; <nl> - org . apache . cassandra . avro . KsDef newKs ; <nl> + KsDef oldKs ; <nl> + KsDef newKs ; <nl> } <nl> <nl> @ namespace ( " org . apache . cassandra . db . migration . avro " ) <nl> record UpdateColumnFamily { <nl> - org . apache . cassandra . avro . CfDef metadata ; <nl> + CfDef metadata ; <nl> } <nl> <nl> @ namespace ( " org . apache . cassandra . db . migration . avro " ) <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index c7273b1 . . 85166bf 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . commons . lang . builder . HashCodeBuilder ; <nl> import org . apache . commons . lang . builder . ToStringBuilder ; <nl> <nl> import org . apache . avro . util . Utf8 ; <nl> - import org . apache . cassandra . avro . ColumnDef ; <nl> + import org . apache . cassandra . db . migration . avro . ColumnDef ; <nl> import org . apache . cassandra . db . ColumnFamilyType ; <nl> import org . apache . cassandra . db . HintedHandOffManager ; <nl> import org . apache . cassandra . db . SystemTable ; <nl> @ @ - 363 , 9 + 363 , 9 @ @ public final class CFMetaData <nl> return parentCf + " . " + ( info . getIndexName ( ) = = null ? FBUtilities . bytesToHex ( info . name ) : info . getIndexName ( ) ) ; <nl> } <nl> <nl> - public org . apache . cassandra . avro . CfDef deflate ( ) <nl> + public org . apache . cassandra . db . migration . avro . CfDef deflate ( ) <nl> { <nl> - org . apache . cassandra . avro . CfDef cf = new org . apache . cassandra . avro . CfDef ( ) ; <nl> + org . apache . cassandra . db . migration . avro . CfDef cf = new org . apache . cassandra . db . migration . avro . CfDef ( ) ; <nl> cf . id = cfId ; <nl> cf . keyspace = new Utf8 ( tableName ) ; <nl> cf . name = new Utf8 ( cfName ) ; <nl> @ @ - 388 , 13 + 388 , 13 @ @ public final class CFMetaData <nl> cf . memtable _ throughput _ in _ mb = memtableThroughputInMb ; <nl> cf . memtable _ operations _ in _ millions = memtableOperationsInMillions ; <nl> cf . column _ metadata = SerDeUtils . createArray ( column _ metadata . size ( ) , <nl> - org . apache . cassandra . avro . ColumnDef . SCHEMA $ ) ; <nl> + org . apache . cassandra . db . migration . avro . ColumnDef . SCHEMA $ ) ; <nl> for ( ColumnDefinition cd : column _ metadata . values ( ) ) <nl> cf . column _ metadata . add ( cd . deflate ( ) ) ; <nl> return cf ; <nl> } <nl> <nl> - public static CFMetaData inflate ( org . apache . cassandra . avro . CfDef cf ) <nl> + public static CFMetaData inflate ( org . apache . cassandra . db . migration . avro . CfDef cf ) <nl> { <nl> AbstractType comparator ; <nl> AbstractType subcolumnComparator = null ; <nl> @ @ - 604 , 7 + 604 , 7 @ @ public final class CFMetaData <nl> } <nl> <nl> / * * applies implicit defaults to cf definition . useful in updates * / <nl> - public static void applyImplicitDefaults ( org . apache . cassandra . avro . CfDef cf _ def ) <nl> + public static void applyImplicitDefaults ( org . apache . cassandra . db . migration . avro . CfDef cf _ def ) <nl> { <nl> if ( cf _ def . min _ compaction _ threshold = = null ) <nl> cf _ def . min _ compaction _ threshold = CFMetaData . DEFAULT _ MIN _ COMPACTION _ THRESHOLD ; <nl> @ @ - 642 , 7 + 642 , 7 @ @ public final class CFMetaData <nl> } <nl> <nl> / / merges some final fields from this CFM with modifiable fields from CfDef into a new CFMetaData . <nl> - public void apply ( org . apache . cassandra . avro . CfDef cf _ def ) throws ConfigurationException <nl> + public void apply ( org . apache . cassandra . db . migration . avro . CfDef cf _ def ) throws ConfigurationException <nl> { <nl> / / validate <nl> if ( ! cf _ def . id . equals ( cfId ) ) <nl> @ @ - 685 , 8 + 685 , 8 @ @ public final class CFMetaData <nl> / / adjust secondary indexes . figure out who is coming and going . <nl> Set < ByteBuffer > toRemove = new HashSet < ByteBuffer > ( ) ; <nl> Set < ByteBuffer > newIndexNames = new HashSet < ByteBuffer > ( ) ; <nl> - Set < org . apache . cassandra . avro . ColumnDef > toAdd = new HashSet < org . apache . cassandra . avro . ColumnDef > ( ) ; <nl> - for ( org . apache . cassandra . avro . ColumnDef def : cf _ def . column _ metadata ) <nl> + Set < org . apache . cassandra . db . migration . avro . ColumnDef > toAdd = new HashSet < org . apache . cassandra . db . migration . avro . ColumnDef > ( ) ; <nl> + for ( org . apache . cassandra . db . migration . avro . ColumnDef def : cf _ def . column _ metadata ) <nl> { <nl> newIndexNames . add ( def . name ) ; <nl> if ( ! column _ metadata . containsKey ( def . name ) ) <nl> @ @ - 700 , 7 + 700 , 7 @ @ public final class CFMetaData <nl> for ( ByteBuffer indexName : toRemove ) <nl> column _ metadata . remove ( indexName ) ; <nl> / / update the ones staying <nl> - for ( org . apache . cassandra . avro . ColumnDef def : cf _ def . column _ metadata ) <nl> + for ( org . apache . cassandra . db . migration . avro . ColumnDef def : cf _ def . column _ metadata ) <nl> { <nl> if ( ! column _ metadata . containsKey ( def . name ) ) <nl> continue ; <nl> @ @ - 708 , 7 + 708 , 7 @ @ public final class CFMetaData <nl> column _ metadata . get ( def . name ) . setIndexName ( def . index _ name = = null ? null : def . index _ name . toString ( ) ) ; <nl> } <nl> / / add the new ones coming in . <nl> - for ( org . apache . cassandra . avro . ColumnDef def : toAdd ) <nl> + for ( org . apache . cassandra . db . migration . avro . ColumnDef def : toAdd ) <nl> { <nl> ColumnDefinition cd = new ColumnDefinition ( def . name , <nl> def . validation _ class . toString ( ) , <nl> @ @ - 759 , 9 + 759 , 9 @ @ public final class CFMetaData <nl> } <nl> <nl> / / converts CFM to avro CfDef <nl> - public static org . apache . cassandra . avro . CfDef convertToAvro ( CFMetaData cfm ) <nl> + public static org . apache . cassandra . db . migration . avro . CfDef convertToAvro ( CFMetaData cfm ) <nl> { <nl> - org . apache . cassandra . avro . CfDef def = new org . apache . cassandra . avro . CfDef ( ) ; <nl> + org . apache . cassandra . db . migration . avro . CfDef def = new org . apache . cassandra . db . migration . avro . CfDef ( ) ; <nl> def . name = cfm . cfName ; <nl> def . keyspace = cfm . tableName ; <nl> def . id = cfm . cfId ; <nl> @ @ - 786 , 12 + 786 , 12 @ @ public final class CFMetaData <nl> def . memtable _ flush _ after _ mins = cfm . memtableFlushAfterMins ; <nl> def . memtable _ throughput _ in _ mb = cfm . memtableThroughputInMb ; <nl> def . memtable _ operations _ in _ millions = cfm . memtableOperationsInMillions ; <nl> - List < org . apache . cassandra . avro . ColumnDef > column _ meta = new ArrayList < org . apache . cassandra . avro . ColumnDef > ( cfm . column _ metadata . size ( ) ) ; <nl> + List < org . apache . cassandra . db . migration . avro . ColumnDef > column _ meta = new ArrayList < org . apache . cassandra . db . migration . avro . ColumnDef > ( cfm . column _ metadata . size ( ) ) ; <nl> for ( ColumnDefinition cd : cfm . column _ metadata . values ( ) ) <nl> { <nl> - org . apache . cassandra . avro . ColumnDef tcd = new org . apache . cassandra . avro . ColumnDef ( ) ; <nl> + org . apache . cassandra . db . migration . avro . ColumnDef tcd = new org . apache . cassandra . db . migration . avro . ColumnDef ( ) ; <nl> tcd . index _ name = cd . getIndexName ( ) ; <nl> - tcd . index _ type = cd . getIndexType ( ) = = null ? null : org . apache . cassandra . avro . IndexType . valueOf ( cd . getIndexType ( ) . name ( ) ) ; <nl> + tcd . index _ type = cd . getIndexType ( ) = = null ? null : org . apache . cassandra . db . migration . avro . IndexType . valueOf ( cd . getIndexType ( ) . name ( ) ) ; <nl> tcd . name = ByteBufferUtil . clone ( cd . name ) ; <nl> tcd . validation _ class = cd . validator . getClass ( ) . getName ( ) ; <nl> column _ meta . add ( tcd ) ; <nl> @ @ - 800 , 9 + 800 , 9 @ @ public final class CFMetaData <nl> return def ; <nl> } <nl> <nl> - public static org . apache . cassandra . avro . CfDef convertToAvro ( org . apache . cassandra . thrift . CfDef def ) <nl> + public static org . apache . cassandra . db . migration . avro . CfDef convertToAvro ( org . apache . cassandra . thrift . CfDef def ) <nl> { <nl> - org . apache . cassandra . avro . CfDef newDef = new org . apache . cassandra . avro . CfDef ( ) ; <nl> + org . apache . cassandra . db . migration . avro . CfDef newDef = new org . apache . cassandra . db . migration . avro . CfDef ( ) ; <nl> newDef . keyspace = def . getKeyspace ( ) ; <nl> newDef . name = def . getName ( ) ; <nl> newDef . column _ type = def . getColumn _ type ( ) ; <nl> @ @ - 824 , 14 + 824 , 14 @ @ public final class CFMetaData <nl> newDef . row _ cache _ size = def . getRow _ cache _ size ( ) ; <nl> newDef . subcomparator _ type = def . getSubcomparator _ type ( ) ; <nl> <nl> - List < org . apache . cassandra . avro . ColumnDef > columnMeta = new ArrayList < org . apache . cassandra . avro . ColumnDef > ( ) ; <nl> + List < org . apache . cassandra . db . migration . avro . ColumnDef > columnMeta = new ArrayList < org . apache . cassandra . db . migration . avro . ColumnDef > ( ) ; <nl> for ( org . apache . cassandra . thrift . ColumnDef cdef : def . getColumn _ metadata ( ) ) <nl> { <nl> - org . apache . cassandra . avro . ColumnDef tdef = new org . apache . cassandra . avro . ColumnDef ( ) ; <nl> + org . apache . cassandra . db . migration . avro . ColumnDef tdef = new org . apache . cassandra . db . migration . avro . ColumnDef ( ) ; <nl> tdef . name = ByteBufferUtil . clone ( cdef . BufferForName ( ) ) ; <nl> tdef . validation _ class = cdef . getValidation _ class ( ) ; <nl> tdef . index _ name = cdef . getIndex _ name ( ) ; <nl> - tdef . index _ type = cdef . getIndex _ type ( ) = = null ? null : org . apache . cassandra . avro . IndexType . valueOf ( cdef . getIndex _ type ( ) . name ( ) ) ; <nl> + tdef . index _ type = cdef . getIndex _ type ( ) = = null ? null : org . apache . cassandra . db . migration . avro . IndexType . valueOf ( cdef . getIndex _ type ( ) . name ( ) ) ; <nl> columnMeta . add ( tdef ) ; <nl> } <nl> newDef . column _ metadata = columnMeta ; <nl> @ @ - 868 , 7 + 868 , 7 @ @ public final class CFMetaData <nl> } <nl> } <nl> <nl> - public static void validateMinMaxCompactionThresholds ( org . apache . cassandra . avro . CfDef cf _ def ) throws ConfigurationException <nl> + public static void validateMinMaxCompactionThresholds ( org . apache . cassandra . db . migration . avro . CfDef cf _ def ) throws ConfigurationException <nl> { <nl> if ( cf _ def . min _ compaction _ threshold ! = null & & cf _ def . max _ compaction _ threshold ! = null ) <nl> { <nl> @ @ - 911 , 7 + 911 , 7 @ @ public final class CFMetaData <nl> } <nl> } <nl> <nl> - public static void validateMemtableSettings ( org . apache . cassandra . avro . CfDef cf _ def ) throws ConfigurationException <nl> + public static void validateMemtableSettings ( org . apache . cassandra . db . migration . avro . CfDef cf _ def ) throws ConfigurationException <nl> { <nl> if ( cf _ def . memtable _ flush _ after _ mins ! = null & & cf _ def . memtable _ flush _ after _ mins < = 0 ) { <nl> throw new ConfigurationException ( " memtable _ flush _ after _ mins cannot be non - positive " ) ; <nl> diff - - git a / src / java / org / apache / cassandra / config / ColumnDefinition . java b / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> index 7d69872 . . 3824c15 100644 <nl> - - - a / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> + + + b / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> @ @ - 36 , 6 + 36 , 8 @ @ import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> public class ColumnDefinition <nl> { <nl> + public final static String D _ COLDEF _ INDEXTYPE = " KEYS " ; <nl> + public final static String D _ COLDEF _ INDEXNAME = null ; <nl> public final ByteBuffer name ; <nl> public final AbstractType validator ; <nl> private IndexType index _ type ; <nl> @ @ - 77 , 18 + 79 , 18 @ @ public class ColumnDefinition <nl> return result ; <nl> } <nl> <nl> - public org . apache . cassandra . avro . ColumnDef deflate ( ) <nl> + public org . apache . cassandra . db . migration . avro . ColumnDef deflate ( ) <nl> { <nl> - org . apache . cassandra . avro . ColumnDef cd = new org . apache . cassandra . avro . ColumnDef ( ) ; <nl> + org . apache . cassandra . db . migration . avro . ColumnDef cd = new org . apache . cassandra . db . migration . avro . ColumnDef ( ) ; <nl> cd . name = name ; <nl> cd . validation _ class = new Utf8 ( validator . getClass ( ) . getName ( ) ) ; <nl> cd . index _ type = index _ type = = null ? null : <nl> - Enum . valueOf ( org . apache . cassandra . avro . IndexType . class , index _ type . name ( ) ) ; <nl> + Enum . valueOf ( org . apache . cassandra . db . migration . avro . IndexType . class , index _ type . name ( ) ) ; <nl> cd . index _ name = index _ name = = null ? null : new Utf8 ( index _ name ) ; <nl> return cd ; <nl> } <nl> <nl> - public static ColumnDefinition inflate ( org . apache . cassandra . avro . ColumnDef cd ) <nl> + public static ColumnDefinition inflate ( org . apache . cassandra . db . migration . avro . ColumnDef cd ) <nl> { <nl> IndexType index _ type = cd . index _ type = = null ? null : <nl> Enum . valueOf ( IndexType . class , cd . index _ type . name ( ) ) ; <nl> @ @ - 108 , 13 + 110 , 13 @ @ public class ColumnDefinition <nl> return new ColumnDefinition ( ByteBufferUtil . clone ( thriftColumnDef . name ) , thriftColumnDef . validation _ class , thriftColumnDef . index _ type , thriftColumnDef . index _ name ) ; <nl> } <nl> <nl> - public static ColumnDefinition fromColumnDef ( org . apache . cassandra . avro . ColumnDef avroColumnDef ) throws ConfigurationException <nl> + public static ColumnDefinition fromColumnDef ( org . apache . cassandra . db . migration . avro . ColumnDef avroColumnDef ) throws ConfigurationException <nl> { <nl> validateIndexType ( avroColumnDef ) ; <nl> return new ColumnDefinition ( avroColumnDef . name , <nl> avroColumnDef . validation _ class . toString ( ) , <nl> - IndexType . valueOf ( avroColumnDef . index _ type = = null ? org . apache . cassandra . avro . CassandraServer . D _ COLDEF _ INDEXTYPE : avroColumnDef . index _ type . name ( ) ) , <nl> - avroColumnDef . index _ name = = null ? org . apache . cassandra . avro . CassandraServer . D _ COLDEF _ INDEXNAME : avroColumnDef . index _ name . toString ( ) ) ; <nl> + IndexType . valueOf ( avroColumnDef . index _ type = = null ? D _ COLDEF _ INDEXTYPE : avroColumnDef . index _ type . name ( ) ) , <nl> + avroColumnDef . index _ name = = null ? D _ COLDEF _ INDEXNAME : avroColumnDef . index _ name . toString ( ) ) ; <nl> } <nl> <nl> public static Map < ByteBuffer , ColumnDefinition > fromColumnDef ( List < ColumnDef > thriftDefs ) throws ConfigurationException <nl> @ @ - 129 , 13 + 131 , 13 @ @ public class ColumnDefinition <nl> return Collections . unmodifiableMap ( cds ) ; <nl> } <nl> <nl> - public static Map < ByteBuffer , ColumnDefinition > fromColumnDefs ( Iterable < org . apache . cassandra . avro . ColumnDef > avroDefs ) throws ConfigurationException <nl> + public static Map < ByteBuffer , ColumnDefinition > fromColumnDefs ( Iterable < org . apache . cassandra . db . migration . avro . ColumnDef > avroDefs ) throws ConfigurationException <nl> { <nl> if ( avroDefs = = null ) <nl> return Collections . emptyMap ( ) ; <nl> <nl> Map < ByteBuffer , ColumnDefinition > cds = new TreeMap < ByteBuffer , ColumnDefinition > ( ) ; <nl> - for ( org . apache . cassandra . avro . ColumnDef avroColumnDef : avroDefs ) <nl> + for ( org . apache . cassandra . db . migration . avro . ColumnDef avroColumnDef : avroDefs ) <nl> { <nl> validateIndexType ( avroColumnDef ) ; <nl> cds . put ( avroColumnDef . name , fromColumnDef ( avroColumnDef ) ) ; <nl> @ @ - 144 , 7 + 146 , 7 @ @ public class ColumnDefinition <nl> return Collections . unmodifiableMap ( cds ) ; <nl> } <nl> <nl> - public static void validateIndexType ( org . apache . cassandra . avro . ColumnDef avroColumnDef ) throws ConfigurationException <nl> + public static void validateIndexType ( org . apache . cassandra . db . migration . avro . ColumnDef avroColumnDef ) throws ConfigurationException <nl> { <nl> if ( ( avroColumnDef . index _ name ! = null ) & & ( avroColumnDef . index _ type = = null ) ) <nl> throw new ConfigurationException ( " index _ name cannot be set if index _ type is not also set " ) ; <nl> diff - - git a / src / java / org / apache / cassandra / config / KSMetaData . java b / src / java / org / apache / cassandra / config / KSMetaData . java <nl> index 753a974 . . 576bc6a 100644 <nl> - - - a / src / java / org / apache / cassandra / config / KSMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / KSMetaData . java <nl> @ @ - 73 , 9 + 73 , 9 @ @ public final class KSMetaData <nl> return cfMetaData ; <nl> } <nl> <nl> - public org . apache . cassandra . avro . KsDef deflate ( ) <nl> + public org . apache . cassandra . db . migration . avro . KsDef deflate ( ) <nl> { <nl> - org . apache . cassandra . avro . KsDef ks = new org . apache . cassandra . avro . KsDef ( ) ; <nl> + org . apache . cassandra . db . migration . avro . KsDef ks = new org . apache . cassandra . db . migration . avro . KsDef ( ) ; <nl> ks . name = new Utf8 ( name ) ; <nl> ks . strategy _ class = new Utf8 ( strategyClass . getName ( ) ) ; <nl> if ( strategyOptions ! = null ) <nl> @ @ - 87 , 13 + 87 , 13 @ @ public final class KSMetaData <nl> } <nl> } <nl> ks . replication _ factor = replicationFactor ; <nl> - ks . cf _ defs = SerDeUtils . createArray ( cfMetaData . size ( ) , org . apache . cassandra . avro . CfDef . SCHEMA $ ) ; <nl> + ks . cf _ defs = SerDeUtils . createArray ( cfMetaData . size ( ) , org . apache . cassandra . db . migration . avro . CfDef . SCHEMA $ ) ; <nl> for ( CFMetaData cfm : cfMetaData . values ( ) ) <nl> ks . cf _ defs . add ( cfm . deflate ( ) ) ; <nl> return ks ; <nl> } <nl> <nl> - public static KSMetaData inflate ( org . apache . cassandra . avro . KsDef ks ) <nl> + public static KSMetaData inflate ( org . apache . cassandra . db . migration . avro . KsDef ks ) <nl> { <nl> Class < AbstractReplicationStrategy > repStratClass ; <nl> try <nl> @ @ - 116 , 7 + 116 , 7 @ @ public final class KSMetaData <nl> } <nl> int cfsz = ( int ) ks . cf _ defs . size ( ) ; <nl> CFMetaData [ ] cfMetaData = new CFMetaData [ cfsz ] ; <nl> - Iterator < org . apache . cassandra . avro . CfDef > cfiter = ks . cf _ defs . iterator ( ) ; <nl> + Iterator < org . apache . cassandra . db . migration . avro . CfDef > cfiter = ks . cf _ defs . iterator ( ) ; <nl> for ( int i = 0 ; i < cfsz ; i + + ) <nl> cfMetaData [ i ] = CFMetaData . inflate ( cfiter . next ( ) ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / DefsTable . java b / src / java / org / apache / cassandra / db / DefsTable . java <nl> index c258d0b . . 017415d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / DefsTable . java <nl> + + + b / src / java / org / apache / cassandra / db / DefsTable . java <nl> @ @ - 63 , 7 + 63 , 7 @ @ public class DefsTable <nl> rm . add ( new QueryPath ( Migration . SCHEMA _ CF , <nl> null , <nl> DEFINITION _ SCHEMA _ COLUMN _ NAME ) , <nl> - ByteBuffer . wrap ( org . apache . cassandra . avro . KsDef . SCHEMA $ . toString ( ) . getBytes ( UTF _ 8 ) ) , <nl> + ByteBuffer . wrap ( org . apache . cassandra . db . migration . avro . KsDef . SCHEMA $ . toString ( ) . getBytes ( UTF _ 8 ) ) , <nl> now ) ; <nl> rm . apply ( ) ; <nl> <nl> @ @ - 97 , 7 + 97 , 7 @ @ public class DefsTable <nl> { <nl> if ( column . name ( ) . equals ( DEFINITION _ SCHEMA _ COLUMN _ NAME ) ) <nl> continue ; <nl> - org . apache . cassandra . avro . KsDef ks = SerDeUtils . deserialize ( schema , column . value ( ) , new org . apache . cassandra . avro . KsDef ( ) ) ; <nl> + org . apache . cassandra . db . migration . avro . KsDef ks = SerDeUtils . deserialize ( schema , column . value ( ) , new org . apache . cassandra . db . migration . avro . KsDef ( ) ) ; <nl> keyspaces . add ( KSMetaData . inflate ( ks ) ) ; <nl> } <nl> return keyspaces ; <nl> diff - - git a / src / java / org / apache / cassandra / db / migration / Migration . java b / src / java / org / apache / cassandra / db / migration / Migration . java <nl> index b0d1e4f . . b583c55 100644 <nl> - - - a / src / java / org / apache / cassandra / db / migration / Migration . java <nl> + + + b / src / java / org / apache / cassandra / db / migration / Migration . java <nl> @ @ - 234 , 7 + 234 , 7 @ @ public abstract class Migration <nl> rm . add ( new QueryPath ( SCHEMA _ CF , <nl> null , <nl> DefsTable . DEFINITION _ SCHEMA _ COLUMN _ NAME ) , <nl> - ByteBuffer . wrap ( org . apache . cassandra . avro . KsDef . SCHEMA $ . toString ( ) . getBytes ( UTF _ 8 ) ) , <nl> + ByteBuffer . wrap ( org . apache . cassandra . db . migration . avro . KsDef . SCHEMA $ . toString ( ) . getBytes ( UTF _ 8 ) ) , <nl> now ) ; <nl> return rm ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java b / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java <nl> index a256d95 . . 01b89ec 100644 <nl> - - - a / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java <nl> @ @ - 38 , 7 + 38 , 7 @ @ public class UpdateColumnFamily extends Migration <nl> protected UpdateColumnFamily ( ) { } <nl> <nl> / * * assumes validation has already happened . That is , replacing oldCfm with newCfm is neither illegal or totally whackass . * / <nl> - public UpdateColumnFamily ( org . apache . cassandra . avro . CfDef cf _ def ) throws ConfigurationException , IOException <nl> + public UpdateColumnFamily ( org . apache . cassandra . db . migration . avro . CfDef cf _ def ) throws ConfigurationException , IOException <nl> { <nl> super ( UUIDGen . makeType1UUIDFromHost ( FBUtilities . getLocalAddress ( ) ) , DatabaseDescriptor . getDefsVersion ( ) ) ; <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / EmbeddedServer . java b / test / unit / org / apache / cassandra / EmbeddedServer . java <nl> index f148496 . . 99893e6 100644 <nl> - - - a / test / unit / org / apache / cassandra / EmbeddedServer . java <nl> + + + b / test / unit / org / apache / cassandra / EmbeddedServer . java <nl> @ @ - 19 , 7 + 19 , 6 @ @ <nl> package org . apache . cassandra ; <nl> <nl> import java . io . IOException ; <nl> - import java . lang . reflect . InvocationTargetException ; <nl> import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . Executors ; <nl> import java . util . concurrent . TimeUnit ; <nl> @ @ - 34 , 7 + 33 , 7 @ @ public class EmbeddedServer extends CleanupHelper <nl> <nl> enum GatewayService <nl> { <nl> - Thrift , Avro <nl> + Thrift <nl> } <nl> <nl> public static GatewayService getDaemonGatewayService ( ) <nl> @ @ - 54 , 9 + 53 , 6 @ @ public class EmbeddedServer extends CleanupHelper <nl> { <nl> switch ( getDaemonGatewayService ( ) ) <nl> { <nl> - case Avro : <nl> - daemon = new org . apache . cassandra . avro . CassandraDaemon ( ) ; <nl> - break ; <nl> case Thrift : <nl> default : <nl> daemon = new org . apache . cassandra . thrift . CassandraDaemon ( ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java b / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java <nl> index bd6f11c . . ddefc28 100644 <nl> - - - a / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java <nl> + + + b / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java <nl> @ @ - 51 , 7 + 51 , 7 @ @ public class DatabaseDescriptorTest <nl> { <nl> for ( CFMetaData cfm : DatabaseDescriptor . getTableMetaData ( table ) . values ( ) ) <nl> { <nl> - CFMetaData cfmDupe = CFMetaData . inflate ( serDe ( cfm . deflate ( ) , new org . apache . cassandra . avro . CfDef ( ) ) ) ; <nl> + CFMetaData cfmDupe = CFMetaData . inflate ( serDe ( cfm . deflate ( ) , new org . apache . cassandra . db . migration . avro . CfDef ( ) ) ) ; <nl> assert cfmDupe ! = null ; <nl> assert cfmDupe . equals ( cfm ) ; <nl> } <nl> @ @ - 63 , 7 + 63 , 7 @ @ public class DatabaseDescriptorTest <nl> { <nl> for ( KSMetaData ksm : DatabaseDescriptor . tables . values ( ) ) <nl> { <nl> - KSMetaData ksmDupe = KSMetaData . inflate ( serDe ( ksm . deflate ( ) , new org . apache . cassandra . avro . KsDef ( ) ) ) ; <nl> + KSMetaData ksmDupe = KSMetaData . inflate ( serDe ( ksm . deflate ( ) , new org . apache . cassandra . db . migration . avro . KsDef ( ) ) ) ; <nl> assert ksmDupe ! = null ; <nl> assert ksmDupe . equals ( ksm ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / DefsTest . java b / test / unit / org / apache / cassandra / db / DefsTest . java <nl> index e5d2a6f . . 2e46e49 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / DefsTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / DefsTest . java <nl> @ @ - 34 , 7 + 34 , 6 @ @ import java . util . TreeSet ; <nl> import java . util . UUID ; <nl> import java . util . concurrent . ExecutionException ; <nl> <nl> - import org . apache . avro . Schema ; <nl> import org . apache . avro . util . Utf8 ; <nl> import org . apache . cassandra . CleanupHelper ; <nl> import org . apache . cassandra . Util ; <nl> @ @ - 73 , 12 + 72 , 12 @ @ public class DefsTest extends CleanupHelper <nl> @ Test <nl> public void testZeroInjection ( ) throws IOException <nl> { <nl> - org . apache . cassandra . avro . CfDef cd = new org . apache . cassandra . avro . CfDef ( ) ; <nl> + org . apache . cassandra . db . migration . avro . CfDef cd = new org . apache . cassandra . db . migration . avro . CfDef ( ) ; <nl> / / populate only fields that must be non - null . <nl> cd . keyspace = new Utf8 ( " Lest Ks " ) ; <nl> cd . name = new Utf8 ( " Mest Cf " ) ; <nl> <nl> - org . apache . cassandra . avro . CfDef cd2 = SerDeUtils . deserializeWithSchema ( SerDeUtils . serializeWithSchema ( cd ) , new org . apache . cassandra . avro . CfDef ( ) ) ; <nl> + org . apache . cassandra . db . migration . avro . CfDef cd2 = SerDeUtils . deserializeWithSchema ( SerDeUtils . serializeWithSchema ( cd ) , new org . apache . cassandra . db . migration . avro . CfDef ( ) ) ; <nl> assert cd . equals ( cd2 ) ; <nl> / / make sure some of the fields didn ' t get unexpected zeros put in during [ de ] serialize operations . <nl> assert cd . min _ compaction _ threshold = = null ; <nl> @ @ - 129 , 20 + 128 , 20 @ @ public class DefsTest extends CleanupHelper <nl> <nl> / / we ' ll be adding this one later . make sure it ' s not already there . <nl> assert cfm . getColumn _ metadata ( ) . get ( ByteBuffer . wrap ( new byte [ ] { 5 } ) ) = = null ; <nl> - org . apache . cassandra . avro . CfDef cfDef = CFMetaData . convertToAvro ( cfm ) ; <nl> + org . apache . cassandra . db . migration . avro . CfDef cfDef = CFMetaData . convertToAvro ( cfm ) ; <nl> <nl> / / add one . <nl> - org . apache . cassandra . avro . ColumnDef addIndexDef = new org . apache . cassandra . avro . ColumnDef ( ) ; <nl> + org . apache . cassandra . db . migration . avro . ColumnDef addIndexDef = new org . apache . cassandra . db . migration . avro . ColumnDef ( ) ; <nl> addIndexDef . index _ name = " 5 " ; <nl> - addIndexDef . index _ type = org . apache . cassandra . avro . IndexType . KEYS ; <nl> + addIndexDef . index _ type = org . apache . cassandra . db . migration . avro . IndexType . KEYS ; <nl> addIndexDef . name = ByteBuffer . wrap ( new byte [ ] { 5 } ) ; <nl> addIndexDef . validation _ class = BytesType . class . getName ( ) ; <nl> cfDef . column _ metadata . add ( addIndexDef ) ; <nl> <nl> / / remove one . <nl> - org . apache . cassandra . avro . ColumnDef removeIndexDef = new org . apache . cassandra . avro . ColumnDef ( ) ; <nl> + org . apache . cassandra . db . migration . avro . ColumnDef removeIndexDef = new org . apache . cassandra . db . migration . avro . ColumnDef ( ) ; <nl> removeIndexDef . index _ name = " 0 " ; <nl> - removeIndexDef . index _ type = org . apache . cassandra . avro . IndexType . KEYS ; <nl> + removeIndexDef . index _ type = org . apache . cassandra . db . migration . avro . IndexType . KEYS ; <nl> removeIndexDef . name = ByteBuffer . wrap ( new byte [ ] { 0 } ) ; <nl> removeIndexDef . validation _ class = BytesType . class . getName ( ) ; <nl> assert cfDef . column _ metadata . remove ( removeIndexDef ) ; <nl> @ @ - 630 , 9 + 629 , 9 @ @ public class DefsTest extends CleanupHelper <nl> assert DatabaseDescriptor . getCFMetaData ( cf . tableName , cf . cfName ) ! = null ; <nl> <nl> / / updating certain fields should fail . <nl> - org . apache . cassandra . avro . CfDef cf _ def = CFMetaData . convertToAvro ( cf ) ; <nl> + org . apache . cassandra . db . migration . avro . CfDef cf _ def = CFMetaData . convertToAvro ( cf ) ; <nl> cf _ def . row _ cache _ size = 43 . 3 ; <nl> - cf _ def . column _ metadata = new ArrayList < org . apache . cassandra . avro . ColumnDef > ( ) ; <nl> + cf _ def . column _ metadata = new ArrayList < org . apache . cassandra . db . migration . avro . ColumnDef > ( ) ; <nl> cf _ def . default _ validation _ class = " BytesType " ; <nl> cf _ def . min _ compaction _ threshold = 5 ; <nl> cf _ def . max _ compaction _ threshold = 31 ;

TEST DIFF:
diff - - git a / NEWS . txt b / NEWS . txt 
 index 2e40e9c . . 4c95bea 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 22 , 6 + 22 , 17 @ @ New features 
 - Batchlog replay can be , and is throttled by default now . 
 See batchlog _ replay _ throttle _ in _ kb setting in cassandra . yaml . 
 
 + Upgrading 
 + - - - - - - - - - 
 + - If your cluster began on a version before 1 . 2 , check that your secondary 
 + index SSTables are on version ' ic ' before upgrading . If not , run 
 + ' nodetool upgradesstables ' if on 1 . 2 . 14 or later , or run ' nodetool 
 + upgradesstables ks cf ' with the keyspace and secondary index named 
 + explicitly otherwise . If you don ' t do this and upgrade to 2 . 0 . x and it 
 + refuses to start because of ' hf ' version files in the secondary index , 
 + you will need to delete / move them out of the way and recreate the index 
 + when 2 . 0 . x starts . 
 + 
 
 2 . 0 . 3 
 = = = = =

NEAREST DIFF:
diff - - git a / src / avro / internode . genavro b / src / avro / internode . genavro 
 index 98f517a . . 898046d 100644 
 - - - a / src / avro / internode . genavro 
 + + + b / src / avro / internode . genavro 
 @ @ - 22 , 20 + 22 , 68 @ @ 
 @ namespace ( " org . apache . cassandra " ) 
 
 protocol InterNode { 
 - / / import the public client API 
 - import idl " . . / . . / interface / cassandra . genavro " ; 
 + @ aliases ( [ " org . apache . cassandra . config . avro . IndexType " ] ) 
 + @ namespace ( " org . apache . cassandra . db . migration . avro " ) 
 + enum IndexType { 
 + KEYS 
 + } 
 + 
 + @ aliases ( [ " org . apache . cassandra . config . avro . ColumnDef " ] ) 
 + @ namespace ( " org . apache . cassandra . db . migration . avro " ) 
 + record ColumnDef { 
 + bytes name ; 
 + string validation _ class ; 
 + union { IndexType , null } index _ type ; 
 + union { string , null } index _ name ; 
 + } 
 
 + @ aliases ( [ " org . apache . cassandra . config . avro . CfDef " ] ) 
 + @ namespace ( " org . apache . cassandra . db . migration . avro " ) 
 + record CfDef { 
 + string keyspace ; 
 + string name ; 
 + union { string , null } column _ type ; 
 + union { string , null } comparator _ type ; 
 + union { string , null } subcomparator _ type ; 
 + union { string , null } comment ; 
 + union { double , null } row _ cache _ size ; 
 + union { double , null } key _ cache _ size ; 
 + union { double , null } read _ repair _ chance ; 
 + union { boolean , null } replicate _ on _ write ; 
 + union { int , null } gc _ grace _ seconds ; 
 + union { null , string } default _ validation _ class = null ; 
 + union { null , int } min _ compaction _ threshold = null ; 
 + union { null , int } max _ compaction _ threshold = null ; 
 + union { int , null } row _ cache _ save _ period _ in _ seconds = 0 ; 
 + union { int , null } key _ cache _ save _ period _ in _ seconds = 3600 ; 
 + union { int , null } memtable _ flush _ after _ mins = 60 ; 
 + union { null , int } memtable _ throughput _ in _ mb = null ; 
 + union { null , double } memtable _ operations _ in _ millions = null ; 
 + union { int , null } id ; 
 + union { array < ColumnDef > , null } column _ metadata ; 
 + } 
 + 
 + @ aliases ( [ " org . apache . cassandra . config . avro . KsDef " ] ) 
 + @ namespace ( " org . apache . cassandra . db . migration . avro " ) 
 + record KsDef { 
 + string name ; 
 + string strategy _ class ; 
 + union { map < string > , null } strategy _ options ; 
 + int replication _ factor ; 
 + array < CfDef > cf _ defs ; 
 + } 
 + 
 @ namespace ( " org . apache . cassandra . utils . avro " ) 
 fixed UUID ( 16 ) ; 
 
 @ namespace ( " org . apache . cassandra . db . migration . avro " ) 
 record AddColumnFamily { 
 - org . apache . cassandra . avro . CfDef cf ; 
 + CfDef cf ; 
 } 
 
 @ namespace ( " org . apache . cassandra . db . migration . avro " ) 
 record AddKeyspace { 
 - org . apache . cassandra . avro . KsDef ks ; 
 + KsDef ks ; 
 } 
 
 @ namespace ( " org . apache . cassandra . db . migration . avro " ) 
 @ @ - 65 , 13 + 113 , 13 @ @ protocol InterNode { 
 
 @ namespace ( " org . apache . cassandra . db . migration . avro " ) 
 record UpdateKeyspace { 
 - org . apache . cassandra . avro . KsDef oldKs ; 
 - org . apache . cassandra . avro . KsDef newKs ; 
 + KsDef oldKs ; 
 + KsDef newKs ; 
 } 
 
 @ namespace ( " org . apache . cassandra . db . migration . avro " ) 
 record UpdateColumnFamily { 
 - org . apache . cassandra . avro . CfDef metadata ; 
 + CfDef metadata ; 
 } 
 
 @ namespace ( " org . apache . cassandra . db . migration . avro " ) 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index c7273b1 . . 85166bf 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . commons . lang . builder . HashCodeBuilder ; 
 import org . apache . commons . lang . builder . ToStringBuilder ; 
 
 import org . apache . avro . util . Utf8 ; 
 - import org . apache . cassandra . avro . ColumnDef ; 
 + import org . apache . cassandra . db . migration . avro . ColumnDef ; 
 import org . apache . cassandra . db . ColumnFamilyType ; 
 import org . apache . cassandra . db . HintedHandOffManager ; 
 import org . apache . cassandra . db . SystemTable ; 
 @ @ - 363 , 9 + 363 , 9 @ @ public final class CFMetaData 
 return parentCf + " . " + ( info . getIndexName ( ) = = null ? FBUtilities . bytesToHex ( info . name ) : info . getIndexName ( ) ) ; 
 } 
 
 - public org . apache . cassandra . avro . CfDef deflate ( ) 
 + public org . apache . cassandra . db . migration . avro . CfDef deflate ( ) 
 { 
 - org . apache . cassandra . avro . CfDef cf = new org . apache . cassandra . avro . CfDef ( ) ; 
 + org . apache . cassandra . db . migration . avro . CfDef cf = new org . apache . cassandra . db . migration . avro . CfDef ( ) ; 
 cf . id = cfId ; 
 cf . keyspace = new Utf8 ( tableName ) ; 
 cf . name = new Utf8 ( cfName ) ; 
 @ @ - 388 , 13 + 388 , 13 @ @ public final class CFMetaData 
 cf . memtable _ throughput _ in _ mb = memtableThroughputInMb ; 
 cf . memtable _ operations _ in _ millions = memtableOperationsInMillions ; 
 cf . column _ metadata = SerDeUtils . createArray ( column _ metadata . size ( ) , 
 - org . apache . cassandra . avro . ColumnDef . SCHEMA $ ) ; 
 + org . apache . cassandra . db . migration . avro . ColumnDef . SCHEMA $ ) ; 
 for ( ColumnDefinition cd : column _ metadata . values ( ) ) 
 cf . column _ metadata . add ( cd . deflate ( ) ) ; 
 return cf ; 
 } 
 
 - public static CFMetaData inflate ( org . apache . cassandra . avro . CfDef cf ) 
 + public static CFMetaData inflate ( org . apache . cassandra . db . migration . avro . CfDef cf ) 
 { 
 AbstractType comparator ; 
 AbstractType subcolumnComparator = null ; 
 @ @ - 604 , 7 + 604 , 7 @ @ public final class CFMetaData 
 } 
 
 / * * applies implicit defaults to cf definition . useful in updates * / 
 - public static void applyImplicitDefaults ( org . apache . cassandra . avro . CfDef cf _ def ) 
 + public static void applyImplicitDefaults ( org . apache . cassandra . db . migration . avro . CfDef cf _ def ) 
 { 
 if ( cf _ def . min _ compaction _ threshold = = null ) 
 cf _ def . min _ compaction _ threshold = CFMetaData . DEFAULT _ MIN _ COMPACTION _ THRESHOLD ; 
 @ @ - 642 , 7 + 642 , 7 @ @ public final class CFMetaData 
 } 
 
 / / merges some final fields from this CFM with modifiable fields from CfDef into a new CFMetaData . 
 - public void apply ( org . apache . cassandra . avro . CfDef cf _ def ) throws ConfigurationException 
 + public void apply ( org . apache . cassandra . db . migration . avro . CfDef cf _ def ) throws ConfigurationException 
 { 
 / / validate 
 if ( ! cf _ def . id . equals ( cfId ) ) 
 @ @ - 685 , 8 + 685 , 8 @ @ public final class CFMetaData 
 / / adjust secondary indexes . figure out who is coming and going . 
 Set < ByteBuffer > toRemove = new HashSet < ByteBuffer > ( ) ; 
 Set < ByteBuffer > newIndexNames = new HashSet < ByteBuffer > ( ) ; 
 - Set < org . apache . cassandra . avro . ColumnDef > toAdd = new HashSet < org . apache . cassandra . avro . ColumnDef > ( ) ; 
 - for ( org . apache . cassandra . avro . ColumnDef def : cf _ def . column _ metadata ) 
 + Set < org . apache . cassandra . db . migration . avro . ColumnDef > toAdd = new HashSet < org . apache . cassandra . db . migration . avro . ColumnDef > ( ) ; 
 + for ( org . apache . cassandra . db . migration . avro . ColumnDef def : cf _ def . column _ metadata ) 
 { 
 newIndexNames . add ( def . name ) ; 
 if ( ! column _ metadata . containsKey ( def . name ) ) 
 @ @ - 700 , 7 + 700 , 7 @ @ public final class CFMetaData 
 for ( ByteBuffer indexName : toRemove ) 
 column _ metadata . remove ( indexName ) ; 
 / / update the ones staying 
 - for ( org . apache . cassandra . avro . ColumnDef def : cf _ def . column _ metadata ) 
 + for ( org . apache . cassandra . db . migration . avro . ColumnDef def : cf _ def . column _ metadata ) 
 { 
 if ( ! column _ metadata . containsKey ( def . name ) ) 
 continue ; 
 @ @ - 708 , 7 + 708 , 7 @ @ public final class CFMetaData 
 column _ metadata . get ( def . name ) . setIndexName ( def . index _ name = = null ? null : def . index _ name . toString ( ) ) ; 
 } 
 / / add the new ones coming in . 
 - for ( org . apache . cassandra . avro . ColumnDef def : toAdd ) 
 + for ( org . apache . cassandra . db . migration . avro . ColumnDef def : toAdd ) 
 { 
 ColumnDefinition cd = new ColumnDefinition ( def . name , 
 def . validation _ class . toString ( ) , 
 @ @ - 759 , 9 + 759 , 9 @ @ public final class CFMetaData 
 } 
 
 / / converts CFM to avro CfDef 
 - public static org . apache . cassandra . avro . CfDef convertToAvro ( CFMetaData cfm ) 
 + public static org . apache . cassandra . db . migration . avro . CfDef convertToAvro ( CFMetaData cfm ) 
 { 
 - org . apache . cassandra . avro . CfDef def = new org . apache . cassandra . avro . CfDef ( ) ; 
 + org . apache . cassandra . db . migration . avro . CfDef def = new org . apache . cassandra . db . migration . avro . CfDef ( ) ; 
 def . name = cfm . cfName ; 
 def . keyspace = cfm . tableName ; 
 def . id = cfm . cfId ; 
 @ @ - 786 , 12 + 786 , 12 @ @ public final class CFMetaData 
 def . memtable _ flush _ after _ mins = cfm . memtableFlushAfterMins ; 
 def . memtable _ throughput _ in _ mb = cfm . memtableThroughputInMb ; 
 def . memtable _ operations _ in _ millions = cfm . memtableOperationsInMillions ; 
 - List < org . apache . cassandra . avro . ColumnDef > column _ meta = new ArrayList < org . apache . cassandra . avro . ColumnDef > ( cfm . column _ metadata . size ( ) ) ; 
 + List < org . apache . cassandra . db . migration . avro . ColumnDef > column _ meta = new ArrayList < org . apache . cassandra . db . migration . avro . ColumnDef > ( cfm . column _ metadata . size ( ) ) ; 
 for ( ColumnDefinition cd : cfm . column _ metadata . values ( ) ) 
 { 
 - org . apache . cassandra . avro . ColumnDef tcd = new org . apache . cassandra . avro . ColumnDef ( ) ; 
 + org . apache . cassandra . db . migration . avro . ColumnDef tcd = new org . apache . cassandra . db . migration . avro . ColumnDef ( ) ; 
 tcd . index _ name = cd . getIndexName ( ) ; 
 - tcd . index _ type = cd . getIndexType ( ) = = null ? null : org . apache . cassandra . avro . IndexType . valueOf ( cd . getIndexType ( ) . name ( ) ) ; 
 + tcd . index _ type = cd . getIndexType ( ) = = null ? null : org . apache . cassandra . db . migration . avro . IndexType . valueOf ( cd . getIndexType ( ) . name ( ) ) ; 
 tcd . name = ByteBufferUtil . clone ( cd . name ) ; 
 tcd . validation _ class = cd . validator . getClass ( ) . getName ( ) ; 
 column _ meta . add ( tcd ) ; 
 @ @ - 800 , 9 + 800 , 9 @ @ public final class CFMetaData 
 return def ; 
 } 
 
 - public static org . apache . cassandra . avro . CfDef convertToAvro ( org . apache . cassandra . thrift . CfDef def ) 
 + public static org . apache . cassandra . db . migration . avro . CfDef convertToAvro ( org . apache . cassandra . thrift . CfDef def ) 
 { 
 - org . apache . cassandra . avro . CfDef newDef = new org . apache . cassandra . avro . CfDef ( ) ; 
 + org . apache . cassandra . db . migration . avro . CfDef newDef = new org . apache . cassandra . db . migration . avro . CfDef ( ) ; 
 newDef . keyspace = def . getKeyspace ( ) ; 
 newDef . name = def . getName ( ) ; 
 newDef . column _ type = def . getColumn _ type ( ) ; 
 @ @ - 824 , 14 + 824 , 14 @ @ public final class CFMetaData 
 newDef . row _ cache _ size = def . getRow _ cache _ size ( ) ; 
 newDef . subcomparator _ type = def . getSubcomparator _ type ( ) ; 
 
 - List < org . apache . cassandra . avro . ColumnDef > columnMeta = new ArrayList < org . apache . cassandra . avro . ColumnDef > ( ) ; 
 + List < org . apache . cassandra . db . migration . avro . ColumnDef > columnMeta = new ArrayList < org . apache . cassandra . db . migration . avro . ColumnDef > ( ) ; 
 for ( org . apache . cassandra . thrift . ColumnDef cdef : def . getColumn _ metadata ( ) ) 
 { 
 - org . apache . cassandra . avro . ColumnDef tdef = new org . apache . cassandra . avro . ColumnDef ( ) ; 
 + org . apache . cassandra . db . migration . avro . ColumnDef tdef = new org . apache . cassandra . db . migration . avro . ColumnDef ( ) ; 
 tdef . name = ByteBufferUtil . clone ( cdef . BufferForName ( ) ) ; 
 tdef . validation _ class = cdef . getValidation _ class ( ) ; 
 tdef . index _ name = cdef . getIndex _ name ( ) ; 
 - tdef . index _ type = cdef . getIndex _ type ( ) = = null ? null : org . apache . cassandra . avro . IndexType . valueOf ( cdef . getIndex _ type ( ) . name ( ) ) ; 
 + tdef . index _ type = cdef . getIndex _ type ( ) = = null ? null : org . apache . cassandra . db . migration . avro . IndexType . valueOf ( cdef . getIndex _ type ( ) . name ( ) ) ; 
 columnMeta . add ( tdef ) ; 
 } 
 newDef . column _ metadata = columnMeta ; 
 @ @ - 868 , 7 + 868 , 7 @ @ public final class CFMetaData 
 } 
 } 
 
 - public static void validateMinMaxCompactionThresholds ( org . apache . cassandra . avro . CfDef cf _ def ) throws ConfigurationException 
 + public static void validateMinMaxCompactionThresholds ( org . apache . cassandra . db . migration . avro . CfDef cf _ def ) throws ConfigurationException 
 { 
 if ( cf _ def . min _ compaction _ threshold ! = null & & cf _ def . max _ compaction _ threshold ! = null ) 
 { 
 @ @ - 911 , 7 + 911 , 7 @ @ public final class CFMetaData 
 } 
 } 
 
 - public static void validateMemtableSettings ( org . apache . cassandra . avro . CfDef cf _ def ) throws ConfigurationException 
 + public static void validateMemtableSettings ( org . apache . cassandra . db . migration . avro . CfDef cf _ def ) throws ConfigurationException 
 { 
 if ( cf _ def . memtable _ flush _ after _ mins ! = null & & cf _ def . memtable _ flush _ after _ mins < = 0 ) { 
 throw new ConfigurationException ( " memtable _ flush _ after _ mins cannot be non - positive " ) ; 
 diff - - git a / src / java / org / apache / cassandra / config / ColumnDefinition . java b / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 index 7d69872 . . 3824c15 100644 
 - - - a / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 + + + b / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 @ @ - 36 , 6 + 36 , 8 @ @ import org . apache . cassandra . utils . FBUtilities ; 
 
 public class ColumnDefinition 
 { 
 + public final static String D _ COLDEF _ INDEXTYPE = " KEYS " ; 
 + public final static String D _ COLDEF _ INDEXNAME = null ; 
 public final ByteBuffer name ; 
 public final AbstractType validator ; 
 private IndexType index _ type ; 
 @ @ - 77 , 18 + 79 , 18 @ @ public class ColumnDefinition 
 return result ; 
 } 
 
 - public org . apache . cassandra . avro . ColumnDef deflate ( ) 
 + public org . apache . cassandra . db . migration . avro . ColumnDef deflate ( ) 
 { 
 - org . apache . cassandra . avro . ColumnDef cd = new org . apache . cassandra . avro . ColumnDef ( ) ; 
 + org . apache . cassandra . db . migration . avro . ColumnDef cd = new org . apache . cassandra . db . migration . avro . ColumnDef ( ) ; 
 cd . name = name ; 
 cd . validation _ class = new Utf8 ( validator . getClass ( ) . getName ( ) ) ; 
 cd . index _ type = index _ type = = null ? null : 
 - Enum . valueOf ( org . apache . cassandra . avro . IndexType . class , index _ type . name ( ) ) ; 
 + Enum . valueOf ( org . apache . cassandra . db . migration . avro . IndexType . class , index _ type . name ( ) ) ; 
 cd . index _ name = index _ name = = null ? null : new Utf8 ( index _ name ) ; 
 return cd ; 
 } 
 
 - public static ColumnDefinition inflate ( org . apache . cassandra . avro . ColumnDef cd ) 
 + public static ColumnDefinition inflate ( org . apache . cassandra . db . migration . avro . ColumnDef cd ) 
 { 
 IndexType index _ type = cd . index _ type = = null ? null : 
 Enum . valueOf ( IndexType . class , cd . index _ type . name ( ) ) ; 
 @ @ - 108 , 13 + 110 , 13 @ @ public class ColumnDefinition 
 return new ColumnDefinition ( ByteBufferUtil . clone ( thriftColumnDef . name ) , thriftColumnDef . validation _ class , thriftColumnDef . index _ type , thriftColumnDef . index _ name ) ; 
 } 
 
 - public static ColumnDefinition fromColumnDef ( org . apache . cassandra . avro . ColumnDef avroColumnDef ) throws ConfigurationException 
 + public static ColumnDefinition fromColumnDef ( org . apache . cassandra . db . migration . avro . ColumnDef avroColumnDef ) throws ConfigurationException 
 { 
 validateIndexType ( avroColumnDef ) ; 
 return new ColumnDefinition ( avroColumnDef . name , 
 avroColumnDef . validation _ class . toString ( ) , 
 - IndexType . valueOf ( avroColumnDef . index _ type = = null ? org . apache . cassandra . avro . CassandraServer . D _ COLDEF _ INDEXTYPE : avroColumnDef . index _ type . name ( ) ) , 
 - avroColumnDef . index _ name = = null ? org . apache . cassandra . avro . CassandraServer . D _ COLDEF _ INDEXNAME : avroColumnDef . index _ name . toString ( ) ) ; 
 + IndexType . valueOf ( avroColumnDef . index _ type = = null ? D _ COLDEF _ INDEXTYPE : avroColumnDef . index _ type . name ( ) ) , 
 + avroColumnDef . index _ name = = null ? D _ COLDEF _ INDEXNAME : avroColumnDef . index _ name . toString ( ) ) ; 
 } 
 
 public static Map < ByteBuffer , ColumnDefinition > fromColumnDef ( List < ColumnDef > thriftDefs ) throws ConfigurationException 
 @ @ - 129 , 13 + 131 , 13 @ @ public class ColumnDefinition 
 return Collections . unmodifiableMap ( cds ) ; 
 } 
 
 - public static Map < ByteBuffer , ColumnDefinition > fromColumnDefs ( Iterable < org . apache . cassandra . avro . ColumnDef > avroDefs ) throws ConfigurationException 
 + public static Map < ByteBuffer , ColumnDefinition > fromColumnDefs ( Iterable < org . apache . cassandra . db . migration . avro . ColumnDef > avroDefs ) throws ConfigurationException 
 { 
 if ( avroDefs = = null ) 
 return Collections . emptyMap ( ) ; 
 
 Map < ByteBuffer , ColumnDefinition > cds = new TreeMap < ByteBuffer , ColumnDefinition > ( ) ; 
 - for ( org . apache . cassandra . avro . ColumnDef avroColumnDef : avroDefs ) 
 + for ( org . apache . cassandra . db . migration . avro . ColumnDef avroColumnDef : avroDefs ) 
 { 
 validateIndexType ( avroColumnDef ) ; 
 cds . put ( avroColumnDef . name , fromColumnDef ( avroColumnDef ) ) ; 
 @ @ - 144 , 7 + 146 , 7 @ @ public class ColumnDefinition 
 return Collections . unmodifiableMap ( cds ) ; 
 } 
 
 - public static void validateIndexType ( org . apache . cassandra . avro . ColumnDef avroColumnDef ) throws ConfigurationException 
 + public static void validateIndexType ( org . apache . cassandra . db . migration . avro . ColumnDef avroColumnDef ) throws ConfigurationException 
 { 
 if ( ( avroColumnDef . index _ name ! = null ) & & ( avroColumnDef . index _ type = = null ) ) 
 throw new ConfigurationException ( " index _ name cannot be set if index _ type is not also set " ) ; 
 diff - - git a / src / java / org / apache / cassandra / config / KSMetaData . java b / src / java / org / apache / cassandra / config / KSMetaData . java 
 index 753a974 . . 576bc6a 100644 
 - - - a / src / java / org / apache / cassandra / config / KSMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / KSMetaData . java 
 @ @ - 73 , 9 + 73 , 9 @ @ public final class KSMetaData 
 return cfMetaData ; 
 } 
 
 - public org . apache . cassandra . avro . KsDef deflate ( ) 
 + public org . apache . cassandra . db . migration . avro . KsDef deflate ( ) 
 { 
 - org . apache . cassandra . avro . KsDef ks = new org . apache . cassandra . avro . KsDef ( ) ; 
 + org . apache . cassandra . db . migration . avro . KsDef ks = new org . apache . cassandra . db . migration . avro . KsDef ( ) ; 
 ks . name = new Utf8 ( name ) ; 
 ks . strategy _ class = new Utf8 ( strategyClass . getName ( ) ) ; 
 if ( strategyOptions ! = null ) 
 @ @ - 87 , 13 + 87 , 13 @ @ public final class KSMetaData 
 } 
 } 
 ks . replication _ factor = replicationFactor ; 
 - ks . cf _ defs = SerDeUtils . createArray ( cfMetaData . size ( ) , org . apache . cassandra . avro . CfDef . SCHEMA $ ) ; 
 + ks . cf _ defs = SerDeUtils . createArray ( cfMetaData . size ( ) , org . apache . cassandra . db . migration . avro . CfDef . SCHEMA $ ) ; 
 for ( CFMetaData cfm : cfMetaData . values ( ) ) 
 ks . cf _ defs . add ( cfm . deflate ( ) ) ; 
 return ks ; 
 } 
 
 - public static KSMetaData inflate ( org . apache . cassandra . avro . KsDef ks ) 
 + public static KSMetaData inflate ( org . apache . cassandra . db . migration . avro . KsDef ks ) 
 { 
 Class < AbstractReplicationStrategy > repStratClass ; 
 try 
 @ @ - 116 , 7 + 116 , 7 @ @ public final class KSMetaData 
 } 
 int cfsz = ( int ) ks . cf _ defs . size ( ) ; 
 CFMetaData [ ] cfMetaData = new CFMetaData [ cfsz ] ; 
 - Iterator < org . apache . cassandra . avro . CfDef > cfiter = ks . cf _ defs . iterator ( ) ; 
 + Iterator < org . apache . cassandra . db . migration . avro . CfDef > cfiter = ks . cf _ defs . iterator ( ) ; 
 for ( int i = 0 ; i < cfsz ; i + + ) 
 cfMetaData [ i ] = CFMetaData . inflate ( cfiter . next ( ) ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / DefsTable . java b / src / java / org / apache / cassandra / db / DefsTable . java 
 index c258d0b . . 017415d 100644 
 - - - a / src / java / org / apache / cassandra / db / DefsTable . java 
 + + + b / src / java / org / apache / cassandra / db / DefsTable . java 
 @ @ - 63 , 7 + 63 , 7 @ @ public class DefsTable 
 rm . add ( new QueryPath ( Migration . SCHEMA _ CF , 
 null , 
 DEFINITION _ SCHEMA _ COLUMN _ NAME ) , 
 - ByteBuffer . wrap ( org . apache . cassandra . avro . KsDef . SCHEMA $ . toString ( ) . getBytes ( UTF _ 8 ) ) , 
 + ByteBuffer . wrap ( org . apache . cassandra . db . migration . avro . KsDef . SCHEMA $ . toString ( ) . getBytes ( UTF _ 8 ) ) , 
 now ) ; 
 rm . apply ( ) ; 
 
 @ @ - 97 , 7 + 97 , 7 @ @ public class DefsTable 
 { 
 if ( column . name ( ) . equals ( DEFINITION _ SCHEMA _ COLUMN _ NAME ) ) 
 continue ; 
 - org . apache . cassandra . avro . KsDef ks = SerDeUtils . deserialize ( schema , column . value ( ) , new org . apache . cassandra . avro . KsDef ( ) ) ; 
 + org . apache . cassandra . db . migration . avro . KsDef ks = SerDeUtils . deserialize ( schema , column . value ( ) , new org . apache . cassandra . db . migration . avro . KsDef ( ) ) ; 
 keyspaces . add ( KSMetaData . inflate ( ks ) ) ; 
 } 
 return keyspaces ; 
 diff - - git a / src / java / org / apache / cassandra / db / migration / Migration . java b / src / java / org / apache / cassandra / db / migration / Migration . java 
 index b0d1e4f . . b583c55 100644 
 - - - a / src / java / org / apache / cassandra / db / migration / Migration . java 
 + + + b / src / java / org / apache / cassandra / db / migration / Migration . java 
 @ @ - 234 , 7 + 234 , 7 @ @ public abstract class Migration 
 rm . add ( new QueryPath ( SCHEMA _ CF , 
 null , 
 DefsTable . DEFINITION _ SCHEMA _ COLUMN _ NAME ) , 
 - ByteBuffer . wrap ( org . apache . cassandra . avro . KsDef . SCHEMA $ . toString ( ) . getBytes ( UTF _ 8 ) ) , 
 + ByteBuffer . wrap ( org . apache . cassandra . db . migration . avro . KsDef . SCHEMA $ . toString ( ) . getBytes ( UTF _ 8 ) ) , 
 now ) ; 
 return rm ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java b / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java 
 index a256d95 . . 01b89ec 100644 
 - - - a / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java 
 @ @ - 38 , 7 + 38 , 7 @ @ public class UpdateColumnFamily extends Migration 
 protected UpdateColumnFamily ( ) { } 
 
 / * * assumes validation has already happened . That is , replacing oldCfm with newCfm is neither illegal or totally whackass . * / 
 - public UpdateColumnFamily ( org . apache . cassandra . avro . CfDef cf _ def ) throws ConfigurationException , IOException 
 + public UpdateColumnFamily ( org . apache . cassandra . db . migration . avro . CfDef cf _ def ) throws ConfigurationException , IOException 
 { 
 super ( UUIDGen . makeType1UUIDFromHost ( FBUtilities . getLocalAddress ( ) ) , DatabaseDescriptor . getDefsVersion ( ) ) ; 
 
 diff - - git a / test / unit / org / apache / cassandra / EmbeddedServer . java b / test / unit / org / apache / cassandra / EmbeddedServer . java 
 index f148496 . . 99893e6 100644 
 - - - a / test / unit / org / apache / cassandra / EmbeddedServer . java 
 + + + b / test / unit / org / apache / cassandra / EmbeddedServer . java 
 @ @ - 19 , 7 + 19 , 6 @ @ 
 package org . apache . cassandra ; 
 
 import java . io . IOException ; 
 - import java . lang . reflect . InvocationTargetException ; 
 import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . Executors ; 
 import java . util . concurrent . TimeUnit ; 
 @ @ - 34 , 7 + 33 , 7 @ @ public class EmbeddedServer extends CleanupHelper 
 
 enum GatewayService 
 { 
 - Thrift , Avro 
 + Thrift 
 } 
 
 public static GatewayService getDaemonGatewayService ( ) 
 @ @ - 54 , 9 + 53 , 6 @ @ public class EmbeddedServer extends CleanupHelper 
 { 
 switch ( getDaemonGatewayService ( ) ) 
 { 
 - case Avro : 
 - daemon = new org . apache . cassandra . avro . CassandraDaemon ( ) ; 
 - break ; 
 case Thrift : 
 default : 
 daemon = new org . apache . cassandra . thrift . CassandraDaemon ( ) ; 
 diff - - git a / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java b / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java 
 index bd6f11c . . ddefc28 100644 
 - - - a / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java 
 + + + b / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java 
 @ @ - 51 , 7 + 51 , 7 @ @ public class DatabaseDescriptorTest 
 { 
 for ( CFMetaData cfm : DatabaseDescriptor . getTableMetaData ( table ) . values ( ) ) 
 { 
 - CFMetaData cfmDupe = CFMetaData . inflate ( serDe ( cfm . deflate ( ) , new org . apache . cassandra . avro . CfDef ( ) ) ) ; 
 + CFMetaData cfmDupe = CFMetaData . inflate ( serDe ( cfm . deflate ( ) , new org . apache . cassandra . db . migration . avro . CfDef ( ) ) ) ; 
 assert cfmDupe ! = null ; 
 assert cfmDupe . equals ( cfm ) ; 
 } 
 @ @ - 63 , 7 + 63 , 7 @ @ public class DatabaseDescriptorTest 
 { 
 for ( KSMetaData ksm : DatabaseDescriptor . tables . values ( ) ) 
 { 
 - KSMetaData ksmDupe = KSMetaData . inflate ( serDe ( ksm . deflate ( ) , new org . apache . cassandra . avro . KsDef ( ) ) ) ; 
 + KSMetaData ksmDupe = KSMetaData . inflate ( serDe ( ksm . deflate ( ) , new org . apache . cassandra . db . migration . avro . KsDef ( ) ) ) ; 
 assert ksmDupe ! = null ; 
 assert ksmDupe . equals ( ksm ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / DefsTest . java b / test / unit / org / apache / cassandra / db / DefsTest . java 
 index e5d2a6f . . 2e46e49 100644 
 - - - a / test / unit / org / apache / cassandra / db / DefsTest . java 
 + + + b / test / unit / org / apache / cassandra / db / DefsTest . java 
 @ @ - 34 , 7 + 34 , 6 @ @ import java . util . TreeSet ; 
 import java . util . UUID ; 
 import java . util . concurrent . ExecutionException ; 
 
 - import org . apache . avro . Schema ; 
 import org . apache . avro . util . Utf8 ; 
 import org . apache . cassandra . CleanupHelper ; 
 import org . apache . cassandra . Util ; 
 @ @ - 73 , 12 + 72 , 12 @ @ public class DefsTest extends CleanupHelper 
 @ Test 
 public void testZeroInjection ( ) throws IOException 
 { 
 - org . apache . cassandra . avro . CfDef cd = new org . apache . cassandra . avro . CfDef ( ) ; 
 + org . apache . cassandra . db . migration . avro . CfDef cd = new org . apache . cassandra . db . migration . avro . CfDef ( ) ; 
 / / populate only fields that must be non - null . 
 cd . keyspace = new Utf8 ( " Lest Ks " ) ; 
 cd . name = new Utf8 ( " Mest Cf " ) ; 
 
 - org . apache . cassandra . avro . CfDef cd2 = SerDeUtils . deserializeWithSchema ( SerDeUtils . serializeWithSchema ( cd ) , new org . apache . cassandra . avro . CfDef ( ) ) ; 
 + org . apache . cassandra . db . migration . avro . CfDef cd2 = SerDeUtils . deserializeWithSchema ( SerDeUtils . serializeWithSchema ( cd ) , new org . apache . cassandra . db . migration . avro . CfDef ( ) ) ; 
 assert cd . equals ( cd2 ) ; 
 / / make sure some of the fields didn ' t get unexpected zeros put in during [ de ] serialize operations . 
 assert cd . min _ compaction _ threshold = = null ; 
 @ @ - 129 , 20 + 128 , 20 @ @ public class DefsTest extends CleanupHelper 
 
 / / we ' ll be adding this one later . make sure it ' s not already there . 
 assert cfm . getColumn _ metadata ( ) . get ( ByteBuffer . wrap ( new byte [ ] { 5 } ) ) = = null ; 
 - org . apache . cassandra . avro . CfDef cfDef = CFMetaData . convertToAvro ( cfm ) ; 
 + org . apache . cassandra . db . migration . avro . CfDef cfDef = CFMetaData . convertToAvro ( cfm ) ; 
 
 / / add one . 
 - org . apache . cassandra . avro . ColumnDef addIndexDef = new org . apache . cassandra . avro . ColumnDef ( ) ; 
 + org . apache . cassandra . db . migration . avro . ColumnDef addIndexDef = new org . apache . cassandra . db . migration . avro . ColumnDef ( ) ; 
 addIndexDef . index _ name = " 5 " ; 
 - addIndexDef . index _ type = org . apache . cassandra . avro . IndexType . KEYS ; 
 + addIndexDef . index _ type = org . apache . cassandra . db . migration . avro . IndexType . KEYS ; 
 addIndexDef . name = ByteBuffer . wrap ( new byte [ ] { 5 } ) ; 
 addIndexDef . validation _ class = BytesType . class . getName ( ) ; 
 cfDef . column _ metadata . add ( addIndexDef ) ; 
 
 / / remove one . 
 - org . apache . cassandra . avro . ColumnDef removeIndexDef = new org . apache . cassandra . avro . ColumnDef ( ) ; 
 + org . apache . cassandra . db . migration . avro . ColumnDef removeIndexDef = new org . apache . cassandra . db . migration . avro . ColumnDef ( ) ; 
 removeIndexDef . index _ name = " 0 " ; 
 - removeIndexDef . index _ type = org . apache . cassandra . avro . IndexType . KEYS ; 
 + removeIndexDef . index _ type = org . apache . cassandra . db . migration . avro . IndexType . KEYS ; 
 removeIndexDef . name = ByteBuffer . wrap ( new byte [ ] { 0 } ) ; 
 removeIndexDef . validation _ class = BytesType . class . getName ( ) ; 
 assert cfDef . column _ metadata . remove ( removeIndexDef ) ; 
 @ @ - 630 , 9 + 629 , 9 @ @ public class DefsTest extends CleanupHelper 
 assert DatabaseDescriptor . getCFMetaData ( cf . tableName , cf . cfName ) ! = null ; 
 
 / / updating certain fields should fail . 
 - org . apache . cassandra . avro . CfDef cf _ def = CFMetaData . convertToAvro ( cf ) ; 
 + org . apache . cassandra . db . migration . avro . CfDef cf _ def = CFMetaData . convertToAvro ( cf ) ; 
 cf _ def . row _ cache _ size = 43 . 3 ; 
 - cf _ def . column _ metadata = new ArrayList < org . apache . cassandra . avro . ColumnDef > ( ) ; 
 + cf _ def . column _ metadata = new ArrayList < org . apache . cassandra . db . migration . avro . ColumnDef > ( ) ; 
 cf _ def . default _ validation _ class = " BytesType " ; 
 cf _ def . min _ compaction _ threshold = 5 ; 
 cf _ def . max _ compaction _ threshold = 31 ;
