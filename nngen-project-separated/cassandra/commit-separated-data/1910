BLEU SCORE: 0.029079340872079116

TEST MSG: Minor clarification / simplification in IndexedSliceReader
GENERATED MSG: Fix sometimes skipping range tombstones during reverse queries

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java b / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java <nl> index ac48fc0 . . 4409484 100644 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java <nl> @ @ - 333 , 7 + 333 , 6 @ @ class IndexedSliceReader extends AbstractIterator < OnDiskAtom > implements OnDiskA <nl> / / can be mistakenly added this way . <nl> if ( reversed & & ! prefetched . isEmpty ( ) ) <nl> { <nl> - boolean gotSome = false ; <nl> / / Avoids some comparison when we know it ' s not useful <nl> boolean inSlice = false ; <nl> <nl> @ @ - 349 , 7 + 348 , 6 @ @ class IndexedSliceReader extends AbstractIterator < OnDiskAtom > implements OnDiskA <nl> if ( prefetchedCol instanceof RangeTombstone ) <nl> { <nl> blockColumns . addLast ( prefetched . poll ( ) ) ; <nl> - gotSome = true ; <nl> continue ; <nl> } <nl> <nl> @ @ - 367 , 7 + 365 , 6 @ @ class IndexedSliceReader extends AbstractIterator < OnDiskAtom > implements OnDiskA <nl> else if ( inSlice | | isColumnBeforeSliceFinish ( prefetchedCol ) ) <nl> { <nl> blockColumns . addLast ( prefetched . poll ( ) ) ; <nl> - gotSome = true ; <nl> inSlice = true ; <nl> } <nl> / / if col is after slice , ignore <nl> @ @ - 376 , 7 + 373 , 7 @ @ class IndexedSliceReader extends AbstractIterator < OnDiskAtom > implements OnDiskA <nl> prefetched . poll ( ) ; <nl> } <nl> } <nl> - if ( gotSome ) <nl> + if ( ! blockColumns . isEmpty ( ) ) <nl> return true ; <nl> } <nl> try
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 66c8b1e . . 2520b23 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 67 , 6 + 67 , 8 @ @ <nl> * Fix ALTER RENAME post - 5125 ( CASSANDRA - 5702 ) <nl> * Disallow renaming a 2ndary indexed column ( CASSANDRA - 5705 ) <nl> * Rename Table to Keyspace ( CASSANDRA - 5613 ) <nl> + * Ensure changing column _ index _ size _ in _ kb on different nodes don ' t corrupt the <nl> + sstable ( CASSANDRA - 5454 ) <nl> <nl> <nl> 1 . 2 . 7 <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnIndex . java b / src / java / org / apache / cassandra / db / ColumnIndex . java <nl> index bcc5c2f . . 1501fcd 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnIndex . java <nl> @ @ - 71 , 8 + 71 , 7 @ @ public class ColumnIndex <nl> <nl> public Builder ( ColumnFamily cf , <nl> ByteBuffer key , <nl> - DataOutput output , <nl> - boolean fromStream ) <nl> + DataOutput output ) <nl> { <nl> assert cf ! = null ; <nl> assert key ! = null ; <nl> @ @ - 83 , 14 + 82 , 7 @ @ public class ColumnIndex <nl> this . indexOffset = rowHeaderSize ( key , deletionInfo ) ; <nl> this . result = new ColumnIndex ( new ArrayList < IndexHelper . IndexInfo > ( ) ) ; <nl> this . output = output ; <nl> - this . tombstoneTracker = fromStream ? null : new RangeTombstone . Tracker ( cf . getComparator ( ) ) ; <nl> - } <nl> - <nl> - public Builder ( ColumnFamily cf , <nl> - ByteBuffer key , <nl> - DataOutput output ) <nl> - { <nl> - this ( cf , key , output , false ) ; <nl> + this . tombstoneTracker = new RangeTombstone . Tracker ( cf . getComparator ( ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 113 , 7 + 105 , 7 @ @ public class ColumnIndex <nl> <nl> public int writtenAtomCount ( ) <nl> { <nl> - return tombstoneTracker = = null ? atomCount : atomCount + tombstoneTracker . writtenAtom ( ) ; <nl> + return atomCount + tombstoneTracker . writtenAtom ( ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 173 , 8 + 165 , 7 @ @ public class ColumnIndex <nl> firstColumn = column ; <nl> startPosition = endPosition ; <nl> / / TODO : have that use the firstColumn as min + make sure we optimize that on read <nl> - if ( tombstoneTracker ! = null ) <nl> - endPosition + = tombstoneTracker . writeOpenedMarker ( firstColumn , output , atomSerializer ) ; <nl> + endPosition + = tombstoneTracker . writeOpenedMarker ( firstColumn , output , atomSerializer ) ; <nl> blockSize = 0 ; / / We don ' t count repeated tombstone marker in the block size , to avoid a situation <nl> / / where we wouldn ' t make any progress because a block is filled by said marker <nl> } <nl> @ @ - 196 , 8 + 187 , 7 @ @ public class ColumnIndex <nl> atomSerializer . serializeForSSTable ( column , output ) ; <nl> <nl> / / TODO : Should deal with removing unneeded tombstones <nl> - if ( tombstoneTracker ! = null ) <nl> - tombstoneTracker . update ( column ) ; <nl> + tombstoneTracker . update ( column ) ; <nl> <nl> lastColumn = column ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> index 879c9bc . . 2f54e1a 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> @ @ - 221 , 7 + 221 , 7 @ @ public class SSTableWriter extends SSTable <nl> ColumnFamily cf = ArrayBackedSortedColumns . factory . create ( metadata ) ; <nl> cf . delete ( deletionInfo ) ; <nl> <nl> - ColumnIndex . Builder columnIndexer = new ColumnIndex . Builder ( cf , key . key , dataFile . stream , true ) ; <nl> + ColumnIndex . Builder columnIndexer = new ColumnIndex . Builder ( cf , key . key , dataFile . stream ) ; <nl> OnDiskAtom . Serializer atomSerializer = Column . onDiskSerializer ( ) ; <nl> try <nl> {

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java b / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java 
 index ac48fc0 . . 4409484 100644 
 - - - a / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java 
 + + + b / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java 
 @ @ - 333 , 7 + 333 , 6 @ @ class IndexedSliceReader extends AbstractIterator < OnDiskAtom > implements OnDiskA 
 / / can be mistakenly added this way . 
 if ( reversed & & ! prefetched . isEmpty ( ) ) 
 { 
 - boolean gotSome = false ; 
 / / Avoids some comparison when we know it ' s not useful 
 boolean inSlice = false ; 
 
 @ @ - 349 , 7 + 348 , 6 @ @ class IndexedSliceReader extends AbstractIterator < OnDiskAtom > implements OnDiskA 
 if ( prefetchedCol instanceof RangeTombstone ) 
 { 
 blockColumns . addLast ( prefetched . poll ( ) ) ; 
 - gotSome = true ; 
 continue ; 
 } 
 
 @ @ - 367 , 7 + 365 , 6 @ @ class IndexedSliceReader extends AbstractIterator < OnDiskAtom > implements OnDiskA 
 else if ( inSlice | | isColumnBeforeSliceFinish ( prefetchedCol ) ) 
 { 
 blockColumns . addLast ( prefetched . poll ( ) ) ; 
 - gotSome = true ; 
 inSlice = true ; 
 } 
 / / if col is after slice , ignore 
 @ @ - 376 , 7 + 373 , 7 @ @ class IndexedSliceReader extends AbstractIterator < OnDiskAtom > implements OnDiskA 
 prefetched . poll ( ) ; 
 } 
 } 
 - if ( gotSome ) 
 + if ( ! blockColumns . isEmpty ( ) ) 
 return true ; 
 } 
 try

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 66c8b1e . . 2520b23 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 67 , 6 + 67 , 8 @ @ 
 * Fix ALTER RENAME post - 5125 ( CASSANDRA - 5702 ) 
 * Disallow renaming a 2ndary indexed column ( CASSANDRA - 5705 ) 
 * Rename Table to Keyspace ( CASSANDRA - 5613 ) 
 + * Ensure changing column _ index _ size _ in _ kb on different nodes don ' t corrupt the 
 + sstable ( CASSANDRA - 5454 ) 
 
 
 1 . 2 . 7 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnIndex . java b / src / java / org / apache / cassandra / db / ColumnIndex . java 
 index bcc5c2f . . 1501fcd 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnIndex . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnIndex . java 
 @ @ - 71 , 8 + 71 , 7 @ @ public class ColumnIndex 
 
 public Builder ( ColumnFamily cf , 
 ByteBuffer key , 
 - DataOutput output , 
 - boolean fromStream ) 
 + DataOutput output ) 
 { 
 assert cf ! = null ; 
 assert key ! = null ; 
 @ @ - 83 , 14 + 82 , 7 @ @ public class ColumnIndex 
 this . indexOffset = rowHeaderSize ( key , deletionInfo ) ; 
 this . result = new ColumnIndex ( new ArrayList < IndexHelper . IndexInfo > ( ) ) ; 
 this . output = output ; 
 - this . tombstoneTracker = fromStream ? null : new RangeTombstone . Tracker ( cf . getComparator ( ) ) ; 
 - } 
 - 
 - public Builder ( ColumnFamily cf , 
 - ByteBuffer key , 
 - DataOutput output ) 
 - { 
 - this ( cf , key , output , false ) ; 
 + this . tombstoneTracker = new RangeTombstone . Tracker ( cf . getComparator ( ) ) ; 
 } 
 
 / * * 
 @ @ - 113 , 7 + 105 , 7 @ @ public class ColumnIndex 
 
 public int writtenAtomCount ( ) 
 { 
 - return tombstoneTracker = = null ? atomCount : atomCount + tombstoneTracker . writtenAtom ( ) ; 
 + return atomCount + tombstoneTracker . writtenAtom ( ) ; 
 } 
 
 / * * 
 @ @ - 173 , 8 + 165 , 7 @ @ public class ColumnIndex 
 firstColumn = column ; 
 startPosition = endPosition ; 
 / / TODO : have that use the firstColumn as min + make sure we optimize that on read 
 - if ( tombstoneTracker ! = null ) 
 - endPosition + = tombstoneTracker . writeOpenedMarker ( firstColumn , output , atomSerializer ) ; 
 + endPosition + = tombstoneTracker . writeOpenedMarker ( firstColumn , output , atomSerializer ) ; 
 blockSize = 0 ; / / We don ' t count repeated tombstone marker in the block size , to avoid a situation 
 / / where we wouldn ' t make any progress because a block is filled by said marker 
 } 
 @ @ - 196 , 8 + 187 , 7 @ @ public class ColumnIndex 
 atomSerializer . serializeForSSTable ( column , output ) ; 
 
 / / TODO : Should deal with removing unneeded tombstones 
 - if ( tombstoneTracker ! = null ) 
 - tombstoneTracker . update ( column ) ; 
 + tombstoneTracker . update ( column ) ; 
 
 lastColumn = column ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 index 879c9bc . . 2f54e1a 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 @ @ - 221 , 7 + 221 , 7 @ @ public class SSTableWriter extends SSTable 
 ColumnFamily cf = ArrayBackedSortedColumns . factory . create ( metadata ) ; 
 cf . delete ( deletionInfo ) ; 
 
 - ColumnIndex . Builder columnIndexer = new ColumnIndex . Builder ( cf , key . key , dataFile . stream , true ) ; 
 + ColumnIndex . Builder columnIndexer = new ColumnIndex . Builder ( cf , key . key , dataFile . stream ) ; 
 OnDiskAtom . Serializer atomSerializer = Column . onDiskSerializer ( ) ; 
 try 
 {
