BLEU SCORE: 0.04278179264606696

TEST MSG: Failure detector detects and ignores local pauses
GENERATED MSG: Add properties to adjust FD initial value and max interval

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 5a8ee93 . . 9cfc772 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 <nl> + * Failure detector detects and ignores local pauses ( CASSANDRA - 9183 ) <nl> * Remove Thrift dependencies in bundled tools ( CASSANDRA - 8358 ) <nl> * Disable memory mapping of hsperfdata file for JVM statistics ( CASSANDRA - 9242 ) <nl> * Add pre - startup checks to detect potential incompatibilities ( CASSANDRA - 8049 ) <nl> diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> index fe825b6 . . b8c20d7 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> @ @ - 48 , 6 + 48 , 22 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean <nl> public static final String MBEAN _ NAME = " org . apache . cassandra . net : type = FailureDetector " ; <nl> private static final int SAMPLE _ SIZE = 1000 ; <nl> protected static final long INITIAL _ VALUE _ NANOS = TimeUnit . NANOSECONDS . convert ( getInitialValue ( ) , TimeUnit . MILLISECONDS ) ; <nl> + private static final long DEFAULT _ MAX _ PAUSE = 5000L * 1000000L ; / / 5 seconds <nl> + private static final long MAX _ LOCAL _ PAUSE _ IN _ NANOS = getMaxLocalPause ( ) ; <nl> + private long lastInterpret = System . nanoTime ( ) ; <nl> + private boolean wasPaused = false ; <nl> + <nl> + private static long getMaxLocalPause ( ) <nl> + { <nl> + if ( System . getProperty ( " cassandra . max _ local _ pause _ in _ ms " ) ! = null ) <nl> + { <nl> + long pause = Long . parseLong ( System . getProperty ( " cassandra . max _ local _ pause _ in _ ms " ) ) ; <nl> + logger . warn ( " Overriding max local pause time to { } ms " , pause ) ; <nl> + return pause * 1000000L ; <nl> + } <nl> + else <nl> + return DEFAULT _ MAX _ PAUSE ; <nl> + } <nl> <nl> public static final IFailureDetector instance = new FailureDetector ( ) ; <nl> <nl> @ @ - 228 , 6 + 244 , 19 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean <nl> return ; <nl> } <nl> long now = System . nanoTime ( ) ; <nl> + long diff = now - lastInterpret ; <nl> + lastInterpret = now ; <nl> + if ( diff > MAX _ LOCAL _ PAUSE _ IN _ NANOS ) <nl> + { <nl> + logger . warn ( " Not marking nodes down due to local pause of { } > { } " , diff , MAX _ LOCAL _ PAUSE _ IN _ NANOS ) ; <nl> + wasPaused = true ; <nl> + return ; <nl> + } <nl> + if ( wasPaused ) <nl> + { <nl> + wasPaused = false ; <nl> + return ; <nl> + } <nl> double phi = hbWnd . phi ( now ) ; <nl> if ( logger . isTraceEnabled ( ) ) <nl> logger . trace ( " PHI for { } : { } " , ep , phi ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 5a8ee93 . . 9cfc772 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 
 + * Failure detector detects and ignores local pauses ( CASSANDRA - 9183 ) 
 * Remove Thrift dependencies in bundled tools ( CASSANDRA - 8358 ) 
 * Disable memory mapping of hsperfdata file for JVM statistics ( CASSANDRA - 9242 ) 
 * Add pre - startup checks to detect potential incompatibilities ( CASSANDRA - 8049 ) 
 diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 index fe825b6 . . b8c20d7 100644 
 - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java 
 + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 @ @ - 48 , 6 + 48 , 22 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean 
 public static final String MBEAN _ NAME = " org . apache . cassandra . net : type = FailureDetector " ; 
 private static final int SAMPLE _ SIZE = 1000 ; 
 protected static final long INITIAL _ VALUE _ NANOS = TimeUnit . NANOSECONDS . convert ( getInitialValue ( ) , TimeUnit . MILLISECONDS ) ; 
 + private static final long DEFAULT _ MAX _ PAUSE = 5000L * 1000000L ; / / 5 seconds 
 + private static final long MAX _ LOCAL _ PAUSE _ IN _ NANOS = getMaxLocalPause ( ) ; 
 + private long lastInterpret = System . nanoTime ( ) ; 
 + private boolean wasPaused = false ; 
 + 
 + private static long getMaxLocalPause ( ) 
 + { 
 + if ( System . getProperty ( " cassandra . max _ local _ pause _ in _ ms " ) ! = null ) 
 + { 
 + long pause = Long . parseLong ( System . getProperty ( " cassandra . max _ local _ pause _ in _ ms " ) ) ; 
 + logger . warn ( " Overriding max local pause time to { } ms " , pause ) ; 
 + return pause * 1000000L ; 
 + } 
 + else 
 + return DEFAULT _ MAX _ PAUSE ; 
 + } 
 
 public static final IFailureDetector instance = new FailureDetector ( ) ; 
 
 @ @ - 228 , 6 + 244 , 19 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean 
 return ; 
 } 
 long now = System . nanoTime ( ) ; 
 + long diff = now - lastInterpret ; 
 + lastInterpret = now ; 
 + if ( diff > MAX _ LOCAL _ PAUSE _ IN _ NANOS ) 
 + { 
 + logger . warn ( " Not marking nodes down due to local pause of { } > { } " , diff , MAX _ LOCAL _ PAUSE _ IN _ NANOS ) ; 
 + wasPaused = true ; 
 + return ; 
 + } 
 + if ( wasPaused ) 
 + { 
 + wasPaused = false ; 
 + return ; 
 + } 
 double phi = hbWnd . phi ( now ) ; 
 if ( logger . isTraceEnabled ( ) ) 
 logger . trace ( " PHI for { } : { } " , ep , phi ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
