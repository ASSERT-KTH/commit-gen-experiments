BLEU SCORE: 0.040583489434387374

TEST MSG: Fix potential AssertionError with 2ndary indexes
GENERATED MSG: Secondary Indexes should report memory consumption

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 915aeea . . df40933 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 10 <nl> + * Fix potential AssertionError with 2ndary indexes ( CASSANDRA - 6612 ) <nl> * Avoid logging CompactionInterrupted at ERROR ( CASSANDRA - 7694 ) <nl> * Minor leak in sstable2jon ( CASSANDRA - 7709 ) <nl> * Add cassandra . auto _ bootstrap system property ( CASSANDRA - 7650 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java <nl> index 8b12575 . . 87e87cb 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java <nl> @ @ - 55 , 6 + 55 , 12 @ @ public abstract class AbstractSimplePerColumnSecondaryIndex extends PerColumnSec <nl> indexedCfMetadata ) ; <nl> } <nl> <nl> + @ Override <nl> + String indexTypeForGrouping ( ) <nl> + { <nl> + return " _ internal _ " ; <nl> + } <nl> + <nl> protected abstract ByteBuffer makeIndexColumnName ( ByteBuffer rowKey , Column column ) ; <nl> <nl> protected abstract ByteBuffer getIndexedValue ( ByteBuffer rowKey , Column column ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java <nl> index fda28f0 . . 64266c4 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java <nl> @ @ - 94 , 6 + 94 , 16 @ @ public abstract class SecondaryIndex <nl> * / <nl> abstract public String getIndexName ( ) ; <nl> <nl> + / * * <nl> + * All internal 2ndary indexes will return " _ internal _ " for this . Custom <nl> + * 2ndary indexes will return their class name . This only matter for <nl> + * SecondaryIndexManager . groupByIndexType . <nl> + * / <nl> + String indexTypeForGrouping ( ) <nl> + { <nl> + / / Our internal indexes overwrite this <nl> + return getClass ( ) . getCanonicalName ( ) ; <nl> + } <nl> <nl> / * * <nl> * Return the unique name for this index and column <nl> diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> index 2c0d611 . . a15464a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> @ @ - 198 , 17 + 198 , 15 @ @ public class SecondaryIndexManager <nl> if ( clause = = null | | clause . isEmpty ( ) ) <nl> return false ; <nl> <nl> - / / It doesn ' t seem a clause can have multiple searchers , but since <nl> - / / getIndexSearchersForQuery returns a list . . . <nl> List < SecondaryIndexSearcher > searchers = getIndexSearchersForQuery ( clause ) ; <nl> if ( searchers . isEmpty ( ) ) <nl> return false ; <nl> <nl> for ( SecondaryIndexSearcher searcher : searchers ) <nl> - if ( ! searcher . isIndexing ( clause ) ) <nl> - return false ; <nl> + if ( searcher . isIndexing ( clause ) ) <nl> + return true ; <nl> <nl> - return true ; <nl> + return false ; <nl> } <nl> <nl> / * * <nl> @ @ - 515 , 12 + 513 , 12 @ @ public class SecondaryIndexManager <nl> if ( index = = null ) <nl> continue ; <nl> <nl> - Set < ByteBuffer > columns = groupByIndexType . get ( index . getClass ( ) . getCanonicalName ( ) ) ; <nl> + Set < ByteBuffer > columns = groupByIndexType . get ( index . indexTypeForGrouping ( ) ) ; <nl> <nl> if ( columns = = null ) <nl> { <nl> columns = new HashSet < > ( ) ; <nl> - groupByIndexType . put ( index . getClass ( ) . getCanonicalName ( ) , columns ) ; <nl> + groupByIndexType . put ( index . indexTypeForGrouping ( ) , columns ) ; <nl> } <nl> <nl> columns . add ( ix . column _ name ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 0318318 . . bd35149 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 10 , 6 + 10 , 8 @ @ <nl> * Avoid creating empty and non cleaned writer during compaction ( CASSANDRA - 3616 ) <nl> * stop thrift service in shutdown hook so we can quiesce MessagingService <nl> ( CASSANDRA - 3335 ) <nl> + * ( CQL ) compaction _ strategy _ options and compression _ parameters for <nl> + CREATE COLUMNFAMILY statement ( CASSANDRA - 3374 ) <nl> Merged from 0 . 8 : <nl> * avoid logging ( harmless ) exception when GC takes < 1ms ( CASSANDRA - 3656 ) <nl> * prevent new nodes from thinking down nodes are up forever ( CASSANDRA - 3626 ) <nl> diff - - git a / doc / cql / CQL . textile b / doc / cql / CQL . textile <nl> index 435c83a . . 79c1e83 100644 <nl> - - - a / doc / cql / CQL . textile <nl> + + + b / doc / cql / CQL . textile <nl> @ @ - 488 , 9 + 488 , 14 @ @ bc ( syntax ) . <nl> < createColumnFamilyStatement > : : = " CREATE " " COLUMNFAMILY " < name > <nl> " ( " < term > < storageType > " PRIMARY " " KEY " <nl> ( " , " < term > < storageType > ) * " ) " <nl> - ( " WITH " < identifier > " = " < cfOptionVal > <nl> - ( " AND " < identifier > " = " < cfOptionVal > ) * ) ? <nl> + ( " WITH " < optionName > " = " < cfOptionVal > <nl> + ( " AND " < optionName > " = " < cfOptionVal > ) * ) ? <nl> ; <nl> + < optionName > : : = < identifier > <nl> + | < optionName > " : " < identifier > <nl> + | < optionName > " : " < integer > <nl> + ; <nl> + <nl> < cfOptionVal > : : = < storageType > <nl> | < identifier > <nl> | < stringLiteral > <nl> @ @ - 549 , 6 + 554 , 8 @ @ A number of optional keyword arguments can be supplied to control the configurat <nl> | row _ cache _ save _ period _ in _ seconds | 0 | Number of seconds between saving row caches . | <nl> | key _ cache _ save _ period _ in _ seconds | 14400 | Number of seconds between saving key caches . | <nl> | replicate _ on _ write | false | | <nl> + | compaction _ strategy _ options | none | CompactionStrategy specific options such as " sstable _ size _ in _ mb " for LeveledCompactionStrategy and " min _ sstable _ size " for SizeTieredCompactionStrategy | <nl> + | compression _ parameters | none | Compression parameters such as " sstable _ compressor " and " chunk _ length _ kb " | <nl> <nl> h2 . CREATE INDEX <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql / Cql . g b / src / java / org / apache / cassandra / cql / Cql . g <nl> index 6971381 . . d016b0c 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / Cql . g <nl> + + + b / src / java / org / apache / cassandra / cql / Cql . g <nl> @ @ - 377 , 8 + 377 , 8 @ @ createKeyspaceStatement returns [ CreateKeyspaceStatement expr ] <nl> createColumnFamilyStatement returns [ CreateColumnFamilyStatement expr ] <nl> : K _ CREATE K _ COLUMNFAMILY name = ( IDENT | STRING _ LITERAL | INTEGER ) { $ expr = new CreateColumnFamilyStatement ( $ name . text ) ; } <nl> ( ' ( ' createCfamColumns [ expr ] ( ' , ' createCfamColumns [ expr ] ) * ' ) ' ) ? <nl> - ( K _ WITH prop1 = IDENT ' = ' arg1 = createCfamKeywordArgument { $ expr . addProperty ( $ prop1 . text , $ arg1 . arg ) ; } <nl> - ( K _ AND propN = IDENT ' = ' argN = createCfamKeywordArgument { $ expr . addProperty ( $ propN . text , $ argN . arg ) ; } ) * <nl> + ( K _ WITH prop1 = ( COMPIDENT | IDENT ) ' = ' arg1 = createCfamKeywordArgument { $ expr . addProperty ( $ prop1 . text , $ arg1 . arg ) ; } <nl> + ( K _ AND propN = ( COMPIDENT | IDENT ) ' = ' argN = createCfamKeywordArgument { $ expr . addProperty ( $ propN . text , $ argN . arg ) ; } ) * <nl> ) ? <nl> endStmnt <nl> ; <nl> diff - - git a / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java b / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java <nl> index f23c2ee . . 1095a72 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java <nl> @ @ - 42 , 6 + 42 , 7 @ @ import org . apache . cassandra . db . marshal . TypeParser ; <nl> import org . apache . cassandra . thrift . InvalidRequestException ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> + import org . apache . cassandra . io . compress . CompressionParameters ; <nl> <nl> / * * A < code > CREATE COLUMNFAMILY < / code > parsed from a CQL query statement . * / <nl> public class CreateColumnFamilyStatement <nl> @ @ - 61 , 12 + 62 , 16 @ @ public class CreateColumnFamilyStatement <nl> private static final String KW _ KEYCACHESAVEPERIODSECS = " key _ cache _ save _ period _ in _ seconds " ; <nl> private static final String KW _ REPLICATEONWRITE = " replicate _ on _ write " ; <nl> private static final String KW _ ROW _ CACHE _ PROVIDER = " row _ cache _ provider " ; <nl> + private static final String KW _ COMPACTION _ STRATEGY _ CLASS = " compaction _ strategy _ class " ; <nl> <nl> / / Maps CQL short names to the respective Cassandra comparator / validator class names <nl> public static final Map < String , String > comparators = new HashMap < String , String > ( ) ; <nl> private static final Set < String > keywords = new HashSet < String > ( ) ; <nl> private static final Set < String > obsoleteKeywords = new HashSet < String > ( ) ; <nl> - <nl> + <nl> + private static final String COMPACTION _ OPTIONS _ PREFIX = " compaction _ strategy _ options " ; <nl> + private static final String COMPRESSION _ PARAMETERS _ PREFIX = " compression _ parameters " ; <nl> + <nl> static <nl> { <nl> comparators . put ( " ascii " , " AsciiType " ) ; <nl> @ @ - 97 , 6 + 102 , 7 @ @ public class CreateColumnFamilyStatement <nl> keywords . add ( KW _ KEYCACHESAVEPERIODSECS ) ; <nl> keywords . add ( KW _ REPLICATEONWRITE ) ; <nl> keywords . add ( KW _ ROW _ CACHE _ PROVIDER ) ; <nl> + keywords . add ( KW _ COMPACTION _ STRATEGY _ CLASS ) ; <nl> <nl> obsoleteKeywords . add ( " memtable _ throughput _ in _ mb " ) ; <nl> obsoleteKeywords . add ( " memtable _ operations _ in _ millions " ) ; <nl> @ @ - 108 , 6 + 114 , 8 @ @ public class CreateColumnFamilyStatement <nl> private final Map < String , String > properties = new HashMap < String , String > ( ) ; <nl> private List < String > keyValidator = new ArrayList < String > ( ) ; <nl> private ByteBuffer keyAlias = null ; <nl> + private final Map < String , String > compactionStrategyOptions = new HashMap < String , String > ( ) ; <nl> + private final Map < String , String > compressionParameters = new HashMap < String , String > ( ) ; <nl> <nl> public CreateColumnFamilyStatement ( String name ) <nl> { <nl> @ @ - 117 , 6 + 125 , 34 @ @ public class CreateColumnFamilyStatement <nl> / * * Perform validation of parsed params * / <nl> private void validate ( ) throws InvalidRequestException <nl> { <nl> + / / we need to remove parent : key = value pairs from the main properties <nl> + Set < String > propsToRemove = new HashSet < String > ( ) ; <nl> + <nl> + / / check if we have compaction / compression options <nl> + for ( String property : properties . keySet ( ) ) <nl> + { <nl> + if ( ! property . contains ( " : " ) ) <nl> + continue ; <nl> + <nl> + String key = property . split ( " : " ) [ 1 ] ; <nl> + String val = properties . get ( property ) ; <nl> + <nl> + if ( property . startsWith ( COMPACTION _ OPTIONS _ PREFIX ) ) <nl> + { <nl> + compactionStrategyOptions . put ( key , val ) ; <nl> + propsToRemove . add ( property ) ; <nl> + } <nl> + <nl> + if ( property . startsWith ( COMPRESSION _ PARAMETERS _ PREFIX ) ) <nl> + { <nl> + compressionParameters . put ( key , val ) ; <nl> + propsToRemove . add ( property ) ; <nl> + } <nl> + } <nl> + <nl> + for ( String property : propsToRemove ) <nl> + properties . remove ( property ) ; <nl> + <nl> / / Column family name <nl> if ( ! name . matches ( " \ \ w + " ) ) <nl> throw new InvalidRequestException ( String . format ( " \ " % s \ " is not a valid column family name " , name ) ) ; <nl> @ @ - 302 , 6 + 338 , 8 @ @ public class CreateColumnFamilyStatement <nl> . keyValidator ( TypeParser . parse ( comparators . get ( getKeyType ( ) ) ) ) <nl> . rowCacheProvider ( FBUtilities . newCacheProvider ( getPropertyString ( KW _ ROW _ CACHE _ PROVIDER , CFMetaData . DEFAULT _ ROW _ CACHE _ PROVIDER . getClass ( ) . getName ( ) ) ) ) <nl> . keyAlias ( keyAlias ) <nl> + . compactionStrategyOptions ( compactionStrategyOptions ) <nl> + . compressionParameters ( CompressionParameters . create ( compressionParameters ) ) <nl> . validate ( ) ; <nl> } <nl> catch ( ConfigurationException e )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 915aeea . . df40933 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 10 
 + * Fix potential AssertionError with 2ndary indexes ( CASSANDRA - 6612 ) 
 * Avoid logging CompactionInterrupted at ERROR ( CASSANDRA - 7694 ) 
 * Minor leak in sstable2jon ( CASSANDRA - 7709 ) 
 * Add cassandra . auto _ bootstrap system property ( CASSANDRA - 7650 ) 
 diff - - git a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java 
 index 8b12575 . . 87e87cb 100644 
 - - - a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java 
 @ @ - 55 , 6 + 55 , 12 @ @ public abstract class AbstractSimplePerColumnSecondaryIndex extends PerColumnSec 
 indexedCfMetadata ) ; 
 } 
 
 + @ Override 
 + String indexTypeForGrouping ( ) 
 + { 
 + return " _ internal _ " ; 
 + } 
 + 
 protected abstract ByteBuffer makeIndexColumnName ( ByteBuffer rowKey , Column column ) ; 
 
 protected abstract ByteBuffer getIndexedValue ( ByteBuffer rowKey , Column column ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java 
 index fda28f0 . . 64266c4 100644 
 - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java 
 @ @ - 94 , 6 + 94 , 16 @ @ public abstract class SecondaryIndex 
 * / 
 abstract public String getIndexName ( ) ; 
 
 + / * * 
 + * All internal 2ndary indexes will return " _ internal _ " for this . Custom 
 + * 2ndary indexes will return their class name . This only matter for 
 + * SecondaryIndexManager . groupByIndexType . 
 + * / 
 + String indexTypeForGrouping ( ) 
 + { 
 + / / Our internal indexes overwrite this 
 + return getClass ( ) . getCanonicalName ( ) ; 
 + } 
 
 / * * 
 * Return the unique name for this index and column 
 diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 index 2c0d611 . . a15464a 100644 
 - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 @ @ - 198 , 17 + 198 , 15 @ @ public class SecondaryIndexManager 
 if ( clause = = null | | clause . isEmpty ( ) ) 
 return false ; 
 
 - / / It doesn ' t seem a clause can have multiple searchers , but since 
 - / / getIndexSearchersForQuery returns a list . . . 
 List < SecondaryIndexSearcher > searchers = getIndexSearchersForQuery ( clause ) ; 
 if ( searchers . isEmpty ( ) ) 
 return false ; 
 
 for ( SecondaryIndexSearcher searcher : searchers ) 
 - if ( ! searcher . isIndexing ( clause ) ) 
 - return false ; 
 + if ( searcher . isIndexing ( clause ) ) 
 + return true ; 
 
 - return true ; 
 + return false ; 
 } 
 
 / * * 
 @ @ - 515 , 12 + 513 , 12 @ @ public class SecondaryIndexManager 
 if ( index = = null ) 
 continue ; 
 
 - Set < ByteBuffer > columns = groupByIndexType . get ( index . getClass ( ) . getCanonicalName ( ) ) ; 
 + Set < ByteBuffer > columns = groupByIndexType . get ( index . indexTypeForGrouping ( ) ) ; 
 
 if ( columns = = null ) 
 { 
 columns = new HashSet < > ( ) ; 
 - groupByIndexType . put ( index . getClass ( ) . getCanonicalName ( ) , columns ) ; 
 + groupByIndexType . put ( index . indexTypeForGrouping ( ) , columns ) ; 
 } 
 
 columns . add ( ix . column _ name ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0318318 . . bd35149 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 10 , 6 + 10 , 8 @ @ 
 * Avoid creating empty and non cleaned writer during compaction ( CASSANDRA - 3616 ) 
 * stop thrift service in shutdown hook so we can quiesce MessagingService 
 ( CASSANDRA - 3335 ) 
 + * ( CQL ) compaction _ strategy _ options and compression _ parameters for 
 + CREATE COLUMNFAMILY statement ( CASSANDRA - 3374 ) 
 Merged from 0 . 8 : 
 * avoid logging ( harmless ) exception when GC takes < 1ms ( CASSANDRA - 3656 ) 
 * prevent new nodes from thinking down nodes are up forever ( CASSANDRA - 3626 ) 
 diff - - git a / doc / cql / CQL . textile b / doc / cql / CQL . textile 
 index 435c83a . . 79c1e83 100644 
 - - - a / doc / cql / CQL . textile 
 + + + b / doc / cql / CQL . textile 
 @ @ - 488 , 9 + 488 , 14 @ @ bc ( syntax ) . 
 < createColumnFamilyStatement > : : = " CREATE " " COLUMNFAMILY " < name > 
 " ( " < term > < storageType > " PRIMARY " " KEY " 
 ( " , " < term > < storageType > ) * " ) " 
 - ( " WITH " < identifier > " = " < cfOptionVal > 
 - ( " AND " < identifier > " = " < cfOptionVal > ) * ) ? 
 + ( " WITH " < optionName > " = " < cfOptionVal > 
 + ( " AND " < optionName > " = " < cfOptionVal > ) * ) ? 
 ; 
 + < optionName > : : = < identifier > 
 + | < optionName > " : " < identifier > 
 + | < optionName > " : " < integer > 
 + ; 
 + 
 < cfOptionVal > : : = < storageType > 
 | < identifier > 
 | < stringLiteral > 
 @ @ - 549 , 6 + 554 , 8 @ @ A number of optional keyword arguments can be supplied to control the configurat 
 | row _ cache _ save _ period _ in _ seconds | 0 | Number of seconds between saving row caches . | 
 | key _ cache _ save _ period _ in _ seconds | 14400 | Number of seconds between saving key caches . | 
 | replicate _ on _ write | false | | 
 + | compaction _ strategy _ options | none | CompactionStrategy specific options such as " sstable _ size _ in _ mb " for LeveledCompactionStrategy and " min _ sstable _ size " for SizeTieredCompactionStrategy | 
 + | compression _ parameters | none | Compression parameters such as " sstable _ compressor " and " chunk _ length _ kb " | 
 
 h2 . CREATE INDEX 
 
 diff - - git a / src / java / org / apache / cassandra / cql / Cql . g b / src / java / org / apache / cassandra / cql / Cql . g 
 index 6971381 . . d016b0c 100644 
 - - - a / src / java / org / apache / cassandra / cql / Cql . g 
 + + + b / src / java / org / apache / cassandra / cql / Cql . g 
 @ @ - 377 , 8 + 377 , 8 @ @ createKeyspaceStatement returns [ CreateKeyspaceStatement expr ] 
 createColumnFamilyStatement returns [ CreateColumnFamilyStatement expr ] 
 : K _ CREATE K _ COLUMNFAMILY name = ( IDENT | STRING _ LITERAL | INTEGER ) { $ expr = new CreateColumnFamilyStatement ( $ name . text ) ; } 
 ( ' ( ' createCfamColumns [ expr ] ( ' , ' createCfamColumns [ expr ] ) * ' ) ' ) ? 
 - ( K _ WITH prop1 = IDENT ' = ' arg1 = createCfamKeywordArgument { $ expr . addProperty ( $ prop1 . text , $ arg1 . arg ) ; } 
 - ( K _ AND propN = IDENT ' = ' argN = createCfamKeywordArgument { $ expr . addProperty ( $ propN . text , $ argN . arg ) ; } ) * 
 + ( K _ WITH prop1 = ( COMPIDENT | IDENT ) ' = ' arg1 = createCfamKeywordArgument { $ expr . addProperty ( $ prop1 . text , $ arg1 . arg ) ; } 
 + ( K _ AND propN = ( COMPIDENT | IDENT ) ' = ' argN = createCfamKeywordArgument { $ expr . addProperty ( $ propN . text , $ argN . arg ) ; } ) * 
 ) ? 
 endStmnt 
 ; 
 diff - - git a / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java b / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java 
 index f23c2ee . . 1095a72 100644 
 - - - a / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java 
 + + + b / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java 
 @ @ - 42 , 6 + 42 , 7 @ @ import org . apache . cassandra . db . marshal . TypeParser ; 
 import org . apache . cassandra . thrift . InvalidRequestException ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 + import org . apache . cassandra . io . compress . CompressionParameters ; 
 
 / * * A < code > CREATE COLUMNFAMILY < / code > parsed from a CQL query statement . * / 
 public class CreateColumnFamilyStatement 
 @ @ - 61 , 12 + 62 , 16 @ @ public class CreateColumnFamilyStatement 
 private static final String KW _ KEYCACHESAVEPERIODSECS = " key _ cache _ save _ period _ in _ seconds " ; 
 private static final String KW _ REPLICATEONWRITE = " replicate _ on _ write " ; 
 private static final String KW _ ROW _ CACHE _ PROVIDER = " row _ cache _ provider " ; 
 + private static final String KW _ COMPACTION _ STRATEGY _ CLASS = " compaction _ strategy _ class " ; 
 
 / / Maps CQL short names to the respective Cassandra comparator / validator class names 
 public static final Map < String , String > comparators = new HashMap < String , String > ( ) ; 
 private static final Set < String > keywords = new HashSet < String > ( ) ; 
 private static final Set < String > obsoleteKeywords = new HashSet < String > ( ) ; 
 - 
 + 
 + private static final String COMPACTION _ OPTIONS _ PREFIX = " compaction _ strategy _ options " ; 
 + private static final String COMPRESSION _ PARAMETERS _ PREFIX = " compression _ parameters " ; 
 + 
 static 
 { 
 comparators . put ( " ascii " , " AsciiType " ) ; 
 @ @ - 97 , 6 + 102 , 7 @ @ public class CreateColumnFamilyStatement 
 keywords . add ( KW _ KEYCACHESAVEPERIODSECS ) ; 
 keywords . add ( KW _ REPLICATEONWRITE ) ; 
 keywords . add ( KW _ ROW _ CACHE _ PROVIDER ) ; 
 + keywords . add ( KW _ COMPACTION _ STRATEGY _ CLASS ) ; 
 
 obsoleteKeywords . add ( " memtable _ throughput _ in _ mb " ) ; 
 obsoleteKeywords . add ( " memtable _ operations _ in _ millions " ) ; 
 @ @ - 108 , 6 + 114 , 8 @ @ public class CreateColumnFamilyStatement 
 private final Map < String , String > properties = new HashMap < String , String > ( ) ; 
 private List < String > keyValidator = new ArrayList < String > ( ) ; 
 private ByteBuffer keyAlias = null ; 
 + private final Map < String , String > compactionStrategyOptions = new HashMap < String , String > ( ) ; 
 + private final Map < String , String > compressionParameters = new HashMap < String , String > ( ) ; 
 
 public CreateColumnFamilyStatement ( String name ) 
 { 
 @ @ - 117 , 6 + 125 , 34 @ @ public class CreateColumnFamilyStatement 
 / * * Perform validation of parsed params * / 
 private void validate ( ) throws InvalidRequestException 
 { 
 + / / we need to remove parent : key = value pairs from the main properties 
 + Set < String > propsToRemove = new HashSet < String > ( ) ; 
 + 
 + / / check if we have compaction / compression options 
 + for ( String property : properties . keySet ( ) ) 
 + { 
 + if ( ! property . contains ( " : " ) ) 
 + continue ; 
 + 
 + String key = property . split ( " : " ) [ 1 ] ; 
 + String val = properties . get ( property ) ; 
 + 
 + if ( property . startsWith ( COMPACTION _ OPTIONS _ PREFIX ) ) 
 + { 
 + compactionStrategyOptions . put ( key , val ) ; 
 + propsToRemove . add ( property ) ; 
 + } 
 + 
 + if ( property . startsWith ( COMPRESSION _ PARAMETERS _ PREFIX ) ) 
 + { 
 + compressionParameters . put ( key , val ) ; 
 + propsToRemove . add ( property ) ; 
 + } 
 + } 
 + 
 + for ( String property : propsToRemove ) 
 + properties . remove ( property ) ; 
 + 
 / / Column family name 
 if ( ! name . matches ( " \ \ w + " ) ) 
 throw new InvalidRequestException ( String . format ( " \ " % s \ " is not a valid column family name " , name ) ) ; 
 @ @ - 302 , 6 + 338 , 8 @ @ public class CreateColumnFamilyStatement 
 . keyValidator ( TypeParser . parse ( comparators . get ( getKeyType ( ) ) ) ) 
 . rowCacheProvider ( FBUtilities . newCacheProvider ( getPropertyString ( KW _ ROW _ CACHE _ PROVIDER , CFMetaData . DEFAULT _ ROW _ CACHE _ PROVIDER . getClass ( ) . getName ( ) ) ) ) 
 . keyAlias ( keyAlias ) 
 + . compactionStrategyOptions ( compactionStrategyOptions ) 
 + . compressionParameters ( CompressionParameters . create ( compressionParameters ) ) 
 . validate ( ) ; 
 } 
 catch ( ConfigurationException e )
