BLEU SCORE: 0.08310415003234632

TEST MSG: Fix BatchlogManagerTest consistency
GENERATED MSG: additional trunk - only 4116 fixes

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / BatchlogManagerTest . java b / test / unit / org / apache / cassandra / db / BatchlogManagerTest . java <nl> index 954c1f2 . . 0b6a908 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / BatchlogManagerTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / BatchlogManagerTest . java <nl> @ @ - 65 , 10 + 65 , 10 @ @ public class BatchlogManagerTest extends SchemaLoader <nl> RowMutation mutation = new RowMutation ( " Keyspace1 " , bytes ( i ) ) ; <nl> mutation . add ( " Standard1 " , bytes ( i ) , bytes ( i ) , System . currentTimeMillis ( ) ) ; <nl> <nl> - long timestamp = System . currentTimeMillis ( ) ; <nl> - if ( i < 500 ) <nl> - timestamp - = DatabaseDescriptor . getWriteRpcTimeout ( ) * 2 ; <nl> - BatchlogManager . getBatchlogMutationFor ( Collections . singleton ( mutation ) , UUIDGen . getTimeUUID ( ) , timestamp * 1000 ) . apply ( ) ; <nl> + long timestamp = i < 500 <nl> + ? ( System . currentTimeMillis ( ) - DatabaseDescriptor . getWriteRpcTimeout ( ) * 2 ) * 1000 <nl> + : Long . MAX _ VALUE ; <nl> + BatchlogManager . getBatchlogMutationFor ( Collections . singleton ( mutation ) , UUIDGen . getTimeUUID ( ) , timestamp ) . apply ( ) ; <nl> } <nl> <nl> / / Flush the batchlog to disk ( see CASSANDRA - 6822 ) .
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 49719f4 . . 62234b2 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 22 , 6 + 22 , 7 @ @ <nl> * Expose repairing by a user provided range ( CASSANDRA - 3912 ) <nl> * Add way to force the cassandra - cli to refresh it ' s schema ( CASSANDRA - 4052 ) <nl> * Avoids having replicate on write tasks stacking up at CL . ONE ( CASSANDRA - 2889 ) <nl> + * ( cql ) Fix order by for reversed queries ( CASSANDRA - 4160 ) <nl> Merged from 1 . 0 : <nl> * Fix super columns bug where cache is not updated ( CASSANDRA - 4190 ) <nl> * fix maxTimestamp to include row tombstones ( CASSANDRA - 4116 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index b7c12dd . . 03c2a16 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 194 , 8 + 194 , 8 @ @ public class SelectStatement implements CQLStatement <nl> / / . . . a range ( slice ) of column names <nl> if ( isColumnRange ( ) ) <nl> { <nl> - ByteBuffer start = getRequestedBound ( Bound . START , variables ) ; <nl> - ByteBuffer finish = getRequestedBound ( Bound . END , variables ) ; <nl> + ByteBuffer start = getRequestedBound ( parameters . isColumnsReversed ? Bound . END : Bound . START , variables ) ; <nl> + ByteBuffer finish = getRequestedBound ( parameters . isColumnsReversed ? Bound . START : Bound . END , variables ) ; <nl> <nl> / / Note that we use the total limit for every key . This is <nl> / / potentially inefficient , but then again , IN + LIMIT is not a <nl> @ @ - 309 , 8 + 309 , 8 @ @ public class SelectStatement implements CQLStatement <nl> if ( isColumnRange ( ) ) <nl> { <nl> SliceRange sliceRange = new SliceRange ( ) ; <nl> - sliceRange . start = getRequestedBound ( Bound . START , variables ) ; <nl> - sliceRange . finish = getRequestedBound ( Bound . END , variables ) ; <nl> + sliceRange . start = getRequestedBound ( parameters . isColumnsReversed ? Bound . END : Bound . START , variables ) ; <nl> + sliceRange . finish = getRequestedBound ( parameters . isColumnsReversed ? Bound . START : Bound . END , variables ) ; <nl> sliceRange . reversed = parameters . isColumnsReversed ; <nl> sliceRange . count = - 1 ; / / We use this for range slices , where the count is ignored in favor of the global column count <nl> thriftSlicePredicate . slice _ range = sliceRange ;

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / BatchlogManagerTest . java b / test / unit / org / apache / cassandra / db / BatchlogManagerTest . java 
 index 954c1f2 . . 0b6a908 100644 
 - - - a / test / unit / org / apache / cassandra / db / BatchlogManagerTest . java 
 + + + b / test / unit / org / apache / cassandra / db / BatchlogManagerTest . java 
 @ @ - 65 , 10 + 65 , 10 @ @ public class BatchlogManagerTest extends SchemaLoader 
 RowMutation mutation = new RowMutation ( " Keyspace1 " , bytes ( i ) ) ; 
 mutation . add ( " Standard1 " , bytes ( i ) , bytes ( i ) , System . currentTimeMillis ( ) ) ; 
 
 - long timestamp = System . currentTimeMillis ( ) ; 
 - if ( i < 500 ) 
 - timestamp - = DatabaseDescriptor . getWriteRpcTimeout ( ) * 2 ; 
 - BatchlogManager . getBatchlogMutationFor ( Collections . singleton ( mutation ) , UUIDGen . getTimeUUID ( ) , timestamp * 1000 ) . apply ( ) ; 
 + long timestamp = i < 500 
 + ? ( System . currentTimeMillis ( ) - DatabaseDescriptor . getWriteRpcTimeout ( ) * 2 ) * 1000 
 + : Long . MAX _ VALUE ; 
 + BatchlogManager . getBatchlogMutationFor ( Collections . singleton ( mutation ) , UUIDGen . getTimeUUID ( ) , timestamp ) . apply ( ) ; 
 } 
 
 / / Flush the batchlog to disk ( see CASSANDRA - 6822 ) .

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 49719f4 . . 62234b2 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 22 , 6 + 22 , 7 @ @ 
 * Expose repairing by a user provided range ( CASSANDRA - 3912 ) 
 * Add way to force the cassandra - cli to refresh it ' s schema ( CASSANDRA - 4052 ) 
 * Avoids having replicate on write tasks stacking up at CL . ONE ( CASSANDRA - 2889 ) 
 + * ( cql ) Fix order by for reversed queries ( CASSANDRA - 4160 ) 
 Merged from 1 . 0 : 
 * Fix super columns bug where cache is not updated ( CASSANDRA - 4190 ) 
 * fix maxTimestamp to include row tombstones ( CASSANDRA - 4116 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index b7c12dd . . 03c2a16 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 194 , 8 + 194 , 8 @ @ public class SelectStatement implements CQLStatement 
 / / . . . a range ( slice ) of column names 
 if ( isColumnRange ( ) ) 
 { 
 - ByteBuffer start = getRequestedBound ( Bound . START , variables ) ; 
 - ByteBuffer finish = getRequestedBound ( Bound . END , variables ) ; 
 + ByteBuffer start = getRequestedBound ( parameters . isColumnsReversed ? Bound . END : Bound . START , variables ) ; 
 + ByteBuffer finish = getRequestedBound ( parameters . isColumnsReversed ? Bound . START : Bound . END , variables ) ; 
 
 / / Note that we use the total limit for every key . This is 
 / / potentially inefficient , but then again , IN + LIMIT is not a 
 @ @ - 309 , 8 + 309 , 8 @ @ public class SelectStatement implements CQLStatement 
 if ( isColumnRange ( ) ) 
 { 
 SliceRange sliceRange = new SliceRange ( ) ; 
 - sliceRange . start = getRequestedBound ( Bound . START , variables ) ; 
 - sliceRange . finish = getRequestedBound ( Bound . END , variables ) ; 
 + sliceRange . start = getRequestedBound ( parameters . isColumnsReversed ? Bound . END : Bound . START , variables ) ; 
 + sliceRange . finish = getRequestedBound ( parameters . isColumnsReversed ? Bound . START : Bound . END , variables ) ; 
 sliceRange . reversed = parameters . isColumnsReversed ; 
 sliceRange . count = - 1 ; / / We use this for range slices , where the count is ignored in favor of the global column count 
 thriftSlicePredicate . slice _ range = sliceRange ;
