BLEU SCORE: 0.04027248192421852

TEST MSG: Ensure consistent view of partition columns between coordinator and replica in ColumnFilter
GENERATED MSG: improve testing of StorageService init , and fix shutdown of messagingservice .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 26462db . . 528bbcd 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 14 <nl> + * Ensure consistent view of partition columns between coordinator and replica in ColumnFilter ( CASSANDRA - 13004 ) <nl> * Failed unregistering mbean during drop keyspace ( CASSANDRA - 13346 ) <nl> * nodetool scrub / cleanup / upgradesstables exit code is wrong ( CASSANDRA - 13542 ) <nl> * Fix the reported number of sstable data files accessed per read ( CASSANDRA - 13120 ) <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index 6790e6b . . 00ec48d 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 18 , 6 + 18 , 29 @ @ using the provided ' sstableupgrade ' tool . <nl> <nl> Upgrading <nl> - - - - - - - - - <nl> + - ALTER TABLE ( ADD / DROP COLUMN ) operations concurrent with a read might <nl> + result into data corruption ( see CASSANDRA - 13004 for more details ) . <nl> + Fixing this bug required a messaging protocol version bump . By default , <nl> + Cassandra 3 . 0 . 14 will use 3014 version for messaging . <nl> + <nl> + Since Schema Migrations rely the on exact messaging protocol version <nl> + match between nodes , if you need schema changes during the upgrade <nl> + process , you have to start your nodes with ` - Dcassandra . force _ 3 _ 0 _ protocol _ version = true ` <nl> + first , in order to temporarily force a backwards compatible protocol . <nl> + After the whole cluster is upgraded to 3 . 0 . 14 , do a rolling <nl> + restart of the cluster without setting that flag . <nl> + <nl> + 3 . 0 . 14 nodes with and withouot the flag set will be able to do schema <nl> + migrations with other 3 . x and 3 . 0 . x releases . <nl> + <nl> + While running the cluster with the flag set to true on 3 . 0 . 14 ( in <nl> + compatibility mode ) , avoid adding or removing any columns to / from <nl> + existing tables . <nl> + <nl> + If your cluster can do without schema migrations during the upgrade <nl> + time , just start the cluster normally without setting aforementioned <nl> + flag . <nl> + <nl> - If performing a rolling upgrade from 3 . 0 . 13 , there will be a schema mismatch caused <nl> by a bug with the schema digest calculation in 3 . 0 . 13 . This will cause unnecessary <nl> but otherwise harmless schema updates , see CASSANDRA - 13559 for more details . <nl> diff - - git a / src / java / org / apache / cassandra / db / ReadResponse . java b / src / java / org / apache / cassandra / db / ReadResponse . java <nl> index 12f0b15 . . 693b52b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ReadResponse . java <nl> + + + b / src / java / org / apache / cassandra / db / ReadResponse . java <nl> @ @ - 378 , 7 + 378 , 7 @ @ public abstract class ReadResponse <nl> if ( digest . hasRemaining ( ) ) <nl> return new DigestResponse ( digest ) ; <nl> <nl> - assert version = = MessagingService . VERSION _ 30 ; <nl> + assert version > = MessagingService . VERSION _ 30 ; <nl> ByteBuffer data = ByteBufferUtil . readWithVIntLength ( in ) ; <nl> return new RemoteDataResponse ( data ) ; <nl> } <nl> @ @ - 413 , 9 + 413 , 10 @ @ public abstract class ReadResponse <nl> long size = ByteBufferUtil . serializedSizeWithVIntLength ( digest ) ; <nl> if ( ! isDigest ) <nl> { <nl> - / / Note that we can only get there if version = = 3 . 0 , which is the current _ version . When we ' ll change the <nl> - / / version , we ' ll have to deserialize / re - serialize the data to be in the proper version . <nl> - assert version = = MessagingService . VERSION _ 30 ; <nl> + / / In theory , we should deserialize / re - serialize if the version asked is different from the current <nl> + / / version as the content could have a different serialization format . So far though , we haven ' t made <nl> + / / change to partition iterators serialization since 3 . 0 so we skip this . <nl> + assert version > = MessagingService . VERSION _ 30 ; <nl> ByteBuffer data = ( ( DataResponse ) response ) . data ; <nl> size + = ByteBufferUtil . serializedSizeWithVIntLength ( data ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java <nl> index 6774d39 . . 0df20ce 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java <nl> @ @ - 198 , 7 + 198 , 7 @ @ public class CommitLogDescriptor <nl> case VERSION _ 22 : <nl> return MessagingService . VERSION _ 22 ; <nl> case VERSION _ 30 : <nl> - return MessagingService . VERSION _ 30 ; <nl> + return MessagingService . FORCE _ 3 _ 0 _ PROTOCOL _ VERSION ? MessagingService . VERSION _ 30 : MessagingService . VERSION _ 3014 ; <nl> default : <nl> throw new IllegalStateException ( " Unknown commitlog version " + version ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / ColumnFilter . java b / src / java / org / apache / cassandra / db / filter / ColumnFilter . java <nl> index df91781 . . c28c0ae 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / ColumnFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / ColumnFilter . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import org . apache . cassandra . db . rows . CellPath ; <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> import org . apache . cassandra . io . util . DataInputPlus ; <nl> import org . apache . cassandra . io . util . DataOutputPlus ; <nl> + import org . apache . cassandra . net . MessagingService ; <nl> <nl> / * * <nl> * Represents which ( non - PK ) columns ( and optionally which sub - part of a column for complex columns ) are selected <nl> @ @ - 52 , 23 + 53 , 27 @ @ public class ColumnFilter <nl> public static final Serializer serializer = new Serializer ( ) ; <nl> <nl> / / Distinguish between the 2 cases described above : if ' isFetchAll ' is true , then all columns will be retrieved <nl> - / / by the query , but the values for column / cells not selected by ' selection ' and ' subSelections ' will be skipped . <nl> - / / Otherwise , only the column / cells returned by ' selection ' and ' subSelections ' will be returned at all . <nl> + / / by the query , but the values for column / cells not selected by ' queried ' and ' subSelections ' will be skipped . <nl> + / / Otherwise , only the column / cells returned by ' queried ' and ' subSelections ' will be returned at all . <nl> private final boolean isFetchAll ; <nl> <nl> - private final CFMetaData metadata ; / / can be null if ! isFetchAll <nl> - <nl> - private final PartitionColumns selection ; / / can be null if isFetchAll and we don ' t want to skip any value <nl> + private final PartitionColumns queried ; / / can be null if isFetchAll and we don ' t want to skip any value <nl> + private final PartitionColumns fetched ; <nl> private final SortedSetMultimap < ColumnIdentifier , ColumnSubselection > subSelections ; / / can be null <nl> <nl> + / * * <nl> + * Used on replica for deserialisation <nl> + * / <nl> private ColumnFilter ( boolean isFetchAll , <nl> - CFMetaData metadata , <nl> - PartitionColumns columns , <nl> + PartitionColumns fetched , <nl> + PartitionColumns queried , <nl> SortedSetMultimap < ColumnIdentifier , ColumnSubselection > subSelections ) <nl> { <nl> + assert ! isFetchAll | | fetched ! = null ; <nl> + assert isFetchAll | | queried ! = null ; <nl> this . isFetchAll = isFetchAll ; <nl> - this . metadata = metadata ; <nl> - this . selection = columns ; <nl> + this . fetched = isFetchAll ? fetched : queried ; <nl> + this . queried = queried ; <nl> this . subSelections = subSelections ; <nl> } <nl> <nl> @ @ - 77 , 7 + 82 , 7 @ @ public class ColumnFilter <nl> * / <nl> public static ColumnFilter all ( CFMetaData metadata ) <nl> { <nl> - return new ColumnFilter ( true , metadata , null , null ) ; <nl> + return new ColumnFilter ( true , metadata . partitionColumns ( ) , null , null ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 98 , 7 + 103 , 7 @ @ public class ColumnFilter <nl> * / <nl> public static ColumnFilter selection ( CFMetaData metadata , PartitionColumns queried ) <nl> { <nl> - return new ColumnFilter ( true , metadata , queried , null ) ; <nl> + return new ColumnFilter ( true , metadata . partitionColumns ( ) , queried , null ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 111 , 7 + 116 , 7 @ @ public class ColumnFilter <nl> * / <nl> public PartitionColumns fetchedColumns ( ) <nl> { <nl> - return isFetchAll ? metadata . partitionColumns ( ) : selection ; <nl> + return fetched ; <nl> } <nl> <nl> public boolean includesAllColumns ( ) <nl> @ @ - 124 , 7 + 129 , 7 @ @ public class ColumnFilter <nl> * / <nl> public boolean includes ( ColumnDefinition column ) <nl> { <nl> - return isFetchAll | | selection . contains ( column ) ; <nl> + return isFetchAll | | queried . contains ( column ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 301 , 7 + 306 , 7 @ @ public class ColumnFilter <nl> boolean isFetchAll = metadata ! = null ; <nl> <nl> PartitionColumns selectedColumns = selection = = null ? null : selection . build ( ) ; <nl> - / / It ' s only ok to have selection = = null in ColumnFilter if isFetchAll . So deal with the case of a " selection " builder <nl> + / / It ' s only ok to have queried = = null in ColumnFilter if isFetchAll . So deal with the case of a " selection " builder <nl> / / with nothing selected ( we can at least happen on some backward compatible queries - CASSANDRA - 10471 ) . <nl> if ( ! isFetchAll & & selectedColumns = = null ) <nl> selectedColumns = PartitionColumns . NONE ; <nl> @ @ - 314 , 20 + 319 , 37 @ @ public class ColumnFilter <nl> s . put ( subSelection . column ( ) . name , subSelection ) ; <nl> } <nl> <nl> - return new ColumnFilter ( isFetchAll , metadata , selectedColumns , s ) ; <nl> + return new ColumnFilter ( isFetchAll , isFetchAll ? metadata . partitionColumns ( ) : selectedColumns , selectedColumns , s ) ; <nl> } <nl> } <nl> <nl> @ Override <nl> + public boolean equals ( Object other ) <nl> + { <nl> + if ( other = = this ) <nl> + return true ; <nl> + <nl> + if ( ! ( other instanceof ColumnFilter ) ) <nl> + return false ; <nl> + <nl> + ColumnFilter otherCf = ( ColumnFilter ) other ; <nl> + <nl> + return otherCf . isFetchAll = = this . isFetchAll & & <nl> + Objects . equals ( otherCf . fetched , this . fetched ) & & <nl> + Objects . equals ( otherCf . queried , this . queried ) & & <nl> + Objects . equals ( otherCf . subSelections , this . subSelections ) ; <nl> + <nl> + } <nl> + @ Override <nl> public String toString ( ) <nl> { <nl> if ( isFetchAll ) <nl> return " * " ; <nl> <nl> - if ( selection . isEmpty ( ) ) <nl> + if ( queried . isEmpty ( ) ) <nl> return " " ; <nl> <nl> - Iterator < ColumnDefinition > defs = selection . selectOrderIterator ( ) ; <nl> + Iterator < ColumnDefinition > defs = queried . selectOrderIterator ( ) ; <nl> if ( ! defs . hasNext ( ) ) <nl> return " < none > " ; <nl> <nl> @ @ - 367 , 7 + 389 , 7 @ @ public class ColumnFilter <nl> private static int makeHeaderByte ( ColumnFilter selection ) <nl> { <nl> return ( selection . isFetchAll ? IS _ FETCH _ ALL _ MASK : 0 ) <nl> - | ( selection . selection ! = null ? HAS _ SELECTION _ MASK : 0 ) <nl> + | ( selection . queried ! = null ? HAS _ SELECTION _ MASK : 0 ) <nl> | ( selection . subSelections ! = null ? HAS _ SUB _ SELECTIONS _ MASK : 0 ) ; <nl> } <nl> <nl> @ @ - 375 , 10 + 397 , 16 @ @ public class ColumnFilter <nl> { <nl> out . writeByte ( makeHeaderByte ( selection ) ) ; <nl> <nl> - if ( selection . selection ! = null ) <nl> + if ( version > = MessagingService . VERSION _ 3014 & & selection . isFetchAll ) <nl> + { <nl> + Columns . serializer . serialize ( selection . fetched . statics , out ) ; <nl> + Columns . serializer . serialize ( selection . fetched . regulars , out ) ; <nl> + } <nl> + <nl> + if ( selection . queried ! = null ) <nl> { <nl> - Columns . serializer . serialize ( selection . selection . statics , out ) ; <nl> - Columns . serializer . serialize ( selection . selection . regulars , out ) ; <nl> + Columns . serializer . serialize ( selection . queried . statics , out ) ; <nl> + Columns . serializer . serialize ( selection . queried . regulars , out ) ; <nl> } <nl> <nl> if ( selection . subSelections ! = null ) <nl> @ @ - 396 , 7 + 424 , 23 @ @ public class ColumnFilter <nl> boolean hasSelection = ( header & HAS _ SELECTION _ MASK ) ! = 0 ; <nl> boolean hasSubSelections = ( header & HAS _ SUB _ SELECTIONS _ MASK ) ! = 0 ; <nl> <nl> + PartitionColumns fetched = null ; <nl> PartitionColumns selection = null ; <nl> + <nl> + if ( isFetchAll ) <nl> + { <nl> + if ( version > = MessagingService . VERSION _ 3014 ) <nl> + { <nl> + Columns statics = Columns . serializer . deserialize ( in , metadata ) ; <nl> + Columns regulars = Columns . serializer . deserialize ( in , metadata ) ; <nl> + fetched = new PartitionColumns ( statics , regulars ) ; <nl> + } <nl> + else <nl> + { <nl> + fetched = metadata . partitionColumns ( ) ; <nl> + } <nl> + } <nl> + <nl> if ( hasSelection ) <nl> { <nl> Columns statics = Columns . serializer . deserialize ( in , metadata ) ; <nl> @ @ - 416 , 17 + 460 , 23 @ @ public class ColumnFilter <nl> } <nl> } <nl> <nl> - return new ColumnFilter ( isFetchAll , isFetchAll ? metadata : null , selection , subSelections ) ; <nl> + return new ColumnFilter ( isFetchAll , fetched , selection , subSelections ) ; <nl> } <nl> <nl> public long serializedSize ( ColumnFilter selection , int version ) <nl> { <nl> long size = 1 ; / / header byte <nl> <nl> - if ( selection . selection ! = null ) <nl> + if ( version > = MessagingService . VERSION _ 3014 & & selection . isFetchAll ) <nl> + { <nl> + size + = Columns . serializer . serializedSize ( selection . fetched . statics ) ; <nl> + size + = Columns . serializer . serializedSize ( selection . fetched . regulars ) ; <nl> + } <nl> + <nl> + if ( selection . queried ! = null ) <nl> { <nl> - size + = Columns . serializer . serializedSize ( selection . selection . statics ) ; <nl> - size + = Columns . serializer . serializedSize ( selection . selection . regulars ) ; <nl> + size + = Columns . serializer . serializedSize ( selection . queried . statics ) ; <nl> + size + = Columns . serializer . serializedSize ( selection . queried . regulars ) ; <nl> } <nl> <nl> if ( selection . subSelections ! = null ) <nl> @ @ - 440 , 4 + 490 , 4 @ @ public class ColumnFilter <nl> return size ; <nl> } <nl> } <nl> - } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index 4aaf49b . . e0f77b7 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 80 , 6 + 80 , 10 @ @ import org . apache . cassandra . utils . concurrent . SimpleCondition ; <nl> <nl> public final class MessagingService implements MessagingServiceMBean <nl> { <nl> + / / Required to allow schema migrations while upgrading within the minor 3 . 0 . x versions to 3 . 0 . 14 . <nl> + / / See CASSANDRA - 13004 for details . <nl> + public final static boolean FORCE _ 3 _ 0 _ PROTOCOL _ VERSION = Boolean . getBoolean ( " cassandra . force _ 3 _ 0 _ protocol _ version " ) ; <nl> + <nl> public static final String MBEAN _ NAME = " org . apache . cassandra . net : type = MessagingService " ; <nl> <nl> / / 8 bits version , so don ' t waste versions <nl> @ @ - 88 , 7 + 92 , 8 @ @ public final class MessagingService implements MessagingServiceMBean <nl> public static final int VERSION _ 21 = 8 ; <nl> public static final int VERSION _ 22 = 9 ; <nl> public static final int VERSION _ 30 = 10 ; <nl> - public static final int current _ version = VERSION _ 30 ; <nl> + public static final int VERSION _ 3014 = 11 ; <nl> + public static final int current _ version = FORCE _ 3 _ 0 _ PROTOCOL _ VERSION ? VERSION _ 30 : VERSION _ 3014 ; <nl> <nl> public static final String FAILURE _ CALLBACK _ PARAM = " CAL _ BAC " ; <nl> public static final byte [ ] ONE _ BYTE = new byte [ 1 ] ; <nl> diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> index aacb769 . . 7b7cd8f 100644 <nl> - - - a / src / java / org / apache / cassandra / service / MigrationManager . java <nl> + + + b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> @ @ - 144 , 10 + 144 , 17 @ @ public class MigrationManager <nl> * Don ' t request schema from fat clients <nl> * / <nl> return MessagingService . instance ( ) . knowsVersion ( endpoint ) <nl> - & & MessagingService . instance ( ) . getRawVersion ( endpoint ) = = MessagingService . current _ version <nl> + & & is30Compatible ( MessagingService . instance ( ) . getRawVersion ( endpoint ) ) <nl> & & ! Gossiper . instance . isGossipOnlyMember ( endpoint ) ; <nl> } <nl> <nl> + / / Since 3 . 0 . 14 protocol contains only a CASSANDRA - 13004 bugfix , it is safe to accept schema changes <nl> + / / from both 3 . 0 and 3 . 0 . 14 . <nl> + private static boolean is30Compatible ( int version ) <nl> + { <nl> + return version = = MessagingService . current _ version | | version = = MessagingService . VERSION _ 3014 ; <nl> + } <nl> + <nl> public static boolean isReadyForBootstrap ( ) <nl> { <nl> return MigrationTask . getInflightTasks ( ) . isEmpty ( ) ; <nl> @ @ - 541 , 8 + 548 , 8 @ @ public class MigrationManager <nl> { <nl> / / only push schema to nodes with known and equal versions <nl> if ( ! endpoint . equals ( FBUtilities . getBroadcastAddress ( ) ) & & <nl> - MessagingService . instance ( ) . knowsVersion ( endpoint ) & & <nl> - MessagingService . instance ( ) . getRawVersion ( endpoint ) = = MessagingService . current _ version ) <nl> + MessagingService . instance ( ) . knowsVersion ( endpoint ) & & <nl> + is30Compatible ( MessagingService . instance ( ) . getRawVersion ( endpoint ) ) ) <nl> pushSchemaMutation ( endpoint , schema ) ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / db / filter / ColumnFilterTest . java b / test / unit / org / apache / cassandra / db / filter / ColumnFilterTest . java <nl> new file mode 100644 <nl> index 0000000 . . aa56091 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / db / filter / ColumnFilterTest . java <nl> @ @ - 0 , 0 + 1 , 70 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . db . filter ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import junit . framework . Assert ; <nl> + import org . apache . cassandra . config . CFMetaData ; <nl> + import org . apache . cassandra . config . ColumnDefinition ; <nl> + import org . apache . cassandra . db . marshal . Int32Type ; <nl> + import org . apache . cassandra . dht . Murmur3Partitioner ; <nl> + import org . apache . cassandra . io . util . DataInputBuffer ; <nl> + import org . apache . cassandra . io . util . DataInputPlus ; <nl> + import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> + import org . apache . cassandra . net . MessagingService ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + <nl> + public class ColumnFilterTest <nl> + { <nl> + final static ColumnFilter . Serializer serializer = new ColumnFilter . Serializer ( ) ; <nl> + <nl> + @ Test <nl> + public void columnFilterSerialisationRoundTrip ( ) throws Exception <nl> + { <nl> + CFMetaData metadata = CFMetaData . Builder . create ( " ks " , " table " ) <nl> + . withPartitioner ( Murmur3Partitioner . instance ) <nl> + . addPartitionKey ( " pk " , Int32Type . instance ) <nl> + . addClusteringColumn ( " ck " , Int32Type . instance ) <nl> + . addRegularColumn ( " v1 " , Int32Type . instance ) <nl> + . addRegularColumn ( " v2 " , Int32Type . instance ) <nl> + . addRegularColumn ( " v3 " , Int32Type . instance ) <nl> + . build ( ) ; <nl> + <nl> + ColumnDefinition v1 = metadata . getColumnDefinition ( ByteBufferUtil . bytes ( " v1 " ) ) ; <nl> + <nl> + testRoundTrip ( ColumnFilter . all ( metadata ) , metadata , MessagingService . VERSION _ 30 ) ; <nl> + testRoundTrip ( ColumnFilter . all ( metadata ) , metadata , MessagingService . VERSION _ 3014 ) ; <nl> + <nl> + testRoundTrip ( ColumnFilter . selection ( metadata . partitionColumns ( ) . without ( v1 ) ) , metadata , MessagingService . VERSION _ 30 ) ; <nl> + testRoundTrip ( ColumnFilter . selection ( metadata . partitionColumns ( ) . without ( v1 ) ) , metadata , MessagingService . VERSION _ 3014 ) ; <nl> + <nl> + testRoundTrip ( ColumnFilter . selection ( metadata , metadata . partitionColumns ( ) . without ( v1 ) ) , metadata , MessagingService . VERSION _ 30 ) ; <nl> + testRoundTrip ( ColumnFilter . selection ( metadata , metadata . partitionColumns ( ) . without ( v1 ) ) , metadata , MessagingService . VERSION _ 3014 ) ; <nl> + } <nl> + <nl> + static void testRoundTrip ( ColumnFilter columnFilter , CFMetaData metadata , int version ) throws Exception <nl> + { <nl> + DataOutputBuffer output = new DataOutputBuffer ( ) ; <nl> + serializer . serialize ( columnFilter , output , version ) ; <nl> + Assert . assertEquals ( serializer . serializedSize ( columnFilter , version ) , output . position ( ) ) ; <nl> + DataInputPlus input = new DataInputBuffer ( output . buffer ( ) , false ) ; <nl> + Assert . assertEquals ( serializer . deserialize ( input , version , metadata ) , columnFilter ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> index 1f235df . . 25e1072 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> package org . apache . cassandra . concurrent ; <nl> <nl> import java . lang . management . ManagementFactory ; <nl> + import java . util . List ; <nl> import java . util . concurrent . * ; <nl> import javax . management . MBeanServer ; <nl> import javax . management . ObjectName ; <nl> @ @ - 34 , 6 + 35 , 7 @ @ import org . apache . log4j . Logger ; <nl> public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements DebuggableThreadPoolExecutorMBean <nl> { <nl> private static Logger logger _ = Logger . getLogger ( DebuggableThreadPoolExecutor . class ) ; <nl> + private final String mbeanName ; <nl> <nl> public DebuggableThreadPoolExecutor ( String threadPoolName ) <nl> { <nl> @ @ - 51 , 9 + 53 , 10 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements <nl> super . prestartAllCoreThreads ( ) ; <nl> <nl> MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> + mbeanName = " org . apache . cassandra . concurrent : type = " + threadFactory . id ; <nl> try <nl> { <nl> - mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . concurrent : type = " + threadFactory . id ) ) ; <nl> + mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 84 , 6 + 87 , 33 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements <nl> } <nl> } <nl> <nl> + private void unregisterMBean ( ) <nl> + { <nl> + try <nl> + { <nl> + ManagementFactory . getPlatformMBeanServer ( ) . unregisterMBean ( new ObjectName ( mbeanName ) ) ; <nl> + } <nl> + catch ( Exception ex ) <nl> + { <nl> + / / don ' t let it get in the way , but notify . <nl> + logger _ . error ( ex . getMessage ( ) , ex ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void shutdown ( ) <nl> + { <nl> + unregisterMBean ( ) ; <nl> + super . shutdown ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < Runnable > shutdownNow ( ) <nl> + { <nl> + unregisterMBean ( ) ; <nl> + return super . shutdownNow ( ) ; <nl> + } <nl> + <nl> / * * <nl> * Get the number of completed tasks <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index 3b70d17 . . f5d8d35 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 122 , 7 + 122 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> return gossiper _ ; <nl> } <nl> <nl> - private Timer gossipTimer _ = new Timer ( false ) ; <nl> + private Timer gossipTimer _ ; <nl> private InetAddress localEndPoint _ ; <nl> private long aVeryLongTime _ ; <nl> private Random random _ = new Random ( ) ; <nl> @ @ - 144 , 6 + 144 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> <nl> private Gossiper ( ) <nl> { <nl> + gossipTimer _ = new Timer ( false ) ; <nl> aVeryLongTime _ = 259200 * 1000 ; <nl> / * register with the Failure Detector for receiving Failure detector events * / <nl> FailureDetector . instance ( ) . registerFailureDetectionEventListener ( this ) ; <nl> @ @ - 834 , 6 + 835 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> public void stop ( ) <nl> { <nl> gossipTimer _ . cancel ( ) ; <nl> + gossipTimer _ = new Timer ( false ) ; / / makes the Gossiper reentrant . <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index 8ff93f6 . . b1ad5ed 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 69 , 6 + 69 , 9 @ @ public class MessagingService <nl> <nl> / * List of sockets we are listening on * / <nl> private static Map < InetAddress , SelectionKey > listenSockets _ = new HashMap < InetAddress , SelectionKey > ( ) ; <nl> + <nl> + / * List of UdpConnections we are listening on * / <nl> + private static Map < InetAddress , UdpConnection > udpConnections _ = new HashMap < InetAddress , UdpConnection > ( ) ; <nl> <nl> / * Lookup table for registering message handlers based on the verb . * / <nl> private static Map < String , IVerbHandler > verbHandlers _ ; <nl> @ @ - 214 , 7 + 217 , 8 @ @ public class MessagingService <nl> try <nl> { <nl> connection . init ( localEp ) ; <nl> - endPoints _ . add ( localEp ) ; <nl> + endPoints _ . add ( localEp ) ; <nl> + udpConnections _ . put ( localEp , connection ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> @ @ - 497 , 7 + 501 , 7 @ @ public class MessagingService <nl> logger _ . info ( " Shutting down . . . " ) ; <nl> synchronized ( MessagingService . class ) <nl> { <nl> - / * Stop listening on any socket * / <nl> + / * Stop listening on any TCP socket * / <nl> for ( SelectionKey skey : listenSockets _ . values ( ) ) <nl> { <nl> skey . cancel ( ) ; <nl> @ @ - 509 , 6 + 513 , 13 @ @ public class MessagingService <nl> } <nl> listenSockets _ . clear ( ) ; <nl> <nl> + / * Stop listening on any UDP ports . * / <nl> + for ( UdpConnection con : udpConnections _ . values ( ) ) <nl> + { <nl> + con . close ( ) ; <nl> + } <nl> + udpConnections _ . clear ( ) ; <nl> + <nl> / * Shutdown the threads in the EventQueue ' s * / <nl> messageDeserializationExecutor _ . shutdownNow ( ) ; <nl> messageDeserializerExecutor _ . shutdownNow ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / net / SelectorManager . java b / src / java / org / apache / cassandra / net / SelectorManager . java <nl> index 7623a05 . . 16511ee 100644 <nl> - - - a / src / java / org / apache / cassandra / net / SelectorManager . java <nl> + + + b / src / java / org / apache / cassandra / net / SelectorManager . java <nl> @ @ - 35 , 6 + 35 , 9 @ @ public class SelectorManager extends Thread <nl> / / workaround JDK select / register bug <nl> Object gate = new Object ( ) ; <nl> <nl> + / / flag to indicate that shutdown has been requested . <nl> + private boolean shutdownRequested = false ; <nl> + <nl> / / The static selector manager which is used by all applications <nl> private static SelectorManager manager ; <nl> <nl> @ @ - 82 , 7 + 85 , 13 @ @ public class SelectorManager extends Thread <nl> selector . wakeup ( ) ; <nl> return channel . register ( selector , ops , handler ) ; <nl> } <nl> - } <nl> + } <nl> + <nl> + / / requests the thread to shutdown . However , it brings no guarantees . Added for testing . <nl> + private void requestShutdown ( ) <nl> + { <nl> + shutdownRequested = true ; <nl> + } <nl> <nl> / * * <nl> * This method starts the socket manager listening for events . It is <nl> @ @ - 102 , 6 + 111 , 11 @ @ public class SelectorManager extends Thread <nl> { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> + if ( shutdownRequested ) <nl> + { <nl> + shutdownRequested = false ; <nl> + break ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 145 , 6 + 159 , 22 @ @ public class SelectorManager extends Thread <nl> } <nl> <nl> / * * <nl> + * Intended to reset the singleton as part of testing . <nl> + * / <nl> + static void reset ( ) <nl> + { <nl> + synchronized ( SelectorManager . class ) <nl> + { <nl> + if ( manager ! = null ) <nl> + manager . requestShutdown ( ) ; <nl> + manager = null ; <nl> + if ( udpManager ! = null ) <nl> + udpManager . requestShutdown ( ) ; <nl> + udpManager = null ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * Returns the SelectorManager applications should use . <nl> * <nl> * @ return The SelectorManager which applications should use <nl> diff - - git a / test / unit / org / apache / cassandra / CleanupHelper . java b / test / unit / org / apache / cassandra / CleanupHelper . java <nl> index 969a2cd . . e3cde8d 100644 <nl> - - - a / test / unit / org / apache / cassandra / CleanupHelper . java <nl> + + + b / test / unit / org / apache / cassandra / CleanupHelper . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> package org . apache . cassandra ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . junit . BeforeClass ; <nl> <nl> @ @ - 30 , 6 + 31 , 13 @ @ public class CleanupHelper <nl> private static Logger logger = Logger . getLogger ( CleanupHelper . class ) ; <nl> <nl> @ BeforeClass <nl> + public static void cleanupAndLeaveDirs ( ) <nl> + { <nl> + mkdirs ( ) ; <nl> + cleanup ( ) ; <nl> + mkdirs ( ) ; <nl> + } <nl> + <nl> public static void cleanup ( ) <nl> { <nl> / / we clean the fs twice , once to start with ( so old data files don ' t get stored by anything static if this is the first run ) <nl> @ @ - 38 , 6 + 46 , 10 @ @ public class CleanupHelper <nl> DatabaseDescriptor . getLogFileLocation ( ) , <nl> } ; <nl> <nl> + / / try to delete the directories themselves too . don ' t panic if this fails . it probably means that the process <nl> + / / doesn ' t have permissions to do so , or it contains non - cassandra generated files that were intentionally <nl> + / / put there . <nl> + <nl> for ( String dirName : directoryNames ) <nl> { <nl> File dir = new File ( dirName ) ; <nl> @ @ - 47 , 11 + 59 , 15 @ @ public class CleanupHelper <nl> } <nl> for ( File f : dir . listFiles ( ) ) <nl> { <nl> - if ( ! f . delete ( ) ) { <nl> + if ( ! f . delete ( ) ) <nl> + { <nl> logger . error ( " could not delete " + f ) ; <nl> + } <nl> } <nl> + <nl> + if ( ! dir . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> - } <nl> <nl> / / cleanup data directory which are stored as data directory / table / data files <nl> for ( String dirName : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> @ @ - 71 , 8 + 87 , 24 @ @ public class CleanupHelper <nl> } <nl> } <nl> } <nl> + if ( ! tableFile . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> + <nl> + if ( ! dir . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> + } <nl> <nl> + public static void mkdirs ( ) <nl> + { <nl> + try <nl> + { <nl> + DatabaseDescriptor . createAllDirectories ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / net / NetPackageAccessor . java b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java <nl> new file mode 100644 <nl> index 0000000 . . 408bfba <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java <nl> @ @ - 0 , 0 + 1 , 29 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . net ; <nl> + <nl> + / * * <nl> + For accesing package - level members created for the sole purpose of testing . <nl> + * / <nl> + public class NetPackageAccessor <nl> + { <nl> + public static void resetSelectorManager ( ) <nl> + { <nl> + SelectorManager . reset ( ) ; <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / service / StorageServiceTest . java b / test / unit / org / apache / cassandra / service / StorageServiceTest . java <nl> new file mode 100644 <nl> index 0000000 . . 0ec9ffe <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / service / StorageServiceTest . java <nl> @ @ - 0 , 0 + 1 , 68 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import org . apache . cassandra . CleanupHelper ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . net . NetPackageAccessor ; <nl> + import org . junit . Test ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . assertFalse ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> + public class StorageServiceTest <nl> + { <nl> + @ Test <nl> + public void testClientOnlyMode ( ) throws IOException <nl> + { <nl> + CleanupHelper . mkdirs ( ) ; <nl> + CleanupHelper . cleanup ( ) ; <nl> + StorageService . instance ( ) . initClient ( ) ; <nl> + <nl> + / / verify that no storage directories were created . <nl> + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> + { <nl> + assertFalse ( new File ( path ) . exists ( ) ) ; <nl> + } <nl> + StorageService . instance ( ) . stopClient ( ) ; <nl> + NetPackageAccessor . resetSelectorManager ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRegularMode ( ) throws IOException , InterruptedException <nl> + { <nl> + CleanupHelper . mkdirs ( ) ; <nl> + CleanupHelper . cleanup ( ) ; <nl> + StorageService . instance ( ) . initServer ( ) ; <nl> + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> + { <nl> + / / verify that storage directories are there . <nl> + assertTrue ( new File ( path ) . exists ( ) ) ; <nl> + } <nl> + / / a proper test would be to call decommission here , but decommission ( ) mixes both shutdown and datatransfer <nl> + / / calls . This test is only interested in the shutdown - related items which a properly handled by just <nl> + / / stopping the client . <nl> + / / StorageService . instance ( ) . decommission ( ) ; <nl> + StorageService . instance ( ) . stopClient ( ) ; <nl> + NetPackageAccessor . resetSelectorManager ( ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 26462db . . 528bbcd 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 14 
 + * Ensure consistent view of partition columns between coordinator and replica in ColumnFilter ( CASSANDRA - 13004 ) 
 * Failed unregistering mbean during drop keyspace ( CASSANDRA - 13346 ) 
 * nodetool scrub / cleanup / upgradesstables exit code is wrong ( CASSANDRA - 13542 ) 
 * Fix the reported number of sstable data files accessed per read ( CASSANDRA - 13120 ) 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index 6790e6b . . 00ec48d 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 18 , 6 + 18 , 29 @ @ using the provided ' sstableupgrade ' tool . 
 
 Upgrading 
 - - - - - - - - - 
 + - ALTER TABLE ( ADD / DROP COLUMN ) operations concurrent with a read might 
 + result into data corruption ( see CASSANDRA - 13004 for more details ) . 
 + Fixing this bug required a messaging protocol version bump . By default , 
 + Cassandra 3 . 0 . 14 will use 3014 version for messaging . 
 + 
 + Since Schema Migrations rely the on exact messaging protocol version 
 + match between nodes , if you need schema changes during the upgrade 
 + process , you have to start your nodes with ` - Dcassandra . force _ 3 _ 0 _ protocol _ version = true ` 
 + first , in order to temporarily force a backwards compatible protocol . 
 + After the whole cluster is upgraded to 3 . 0 . 14 , do a rolling 
 + restart of the cluster without setting that flag . 
 + 
 + 3 . 0 . 14 nodes with and withouot the flag set will be able to do schema 
 + migrations with other 3 . x and 3 . 0 . x releases . 
 + 
 + While running the cluster with the flag set to true on 3 . 0 . 14 ( in 
 + compatibility mode ) , avoid adding or removing any columns to / from 
 + existing tables . 
 + 
 + If your cluster can do without schema migrations during the upgrade 
 + time , just start the cluster normally without setting aforementioned 
 + flag . 
 + 
 - If performing a rolling upgrade from 3 . 0 . 13 , there will be a schema mismatch caused 
 by a bug with the schema digest calculation in 3 . 0 . 13 . This will cause unnecessary 
 but otherwise harmless schema updates , see CASSANDRA - 13559 for more details . 
 diff - - git a / src / java / org / apache / cassandra / db / ReadResponse . java b / src / java / org / apache / cassandra / db / ReadResponse . java 
 index 12f0b15 . . 693b52b 100644 
 - - - a / src / java / org / apache / cassandra / db / ReadResponse . java 
 + + + b / src / java / org / apache / cassandra / db / ReadResponse . java 
 @ @ - 378 , 7 + 378 , 7 @ @ public abstract class ReadResponse 
 if ( digest . hasRemaining ( ) ) 
 return new DigestResponse ( digest ) ; 
 
 - assert version = = MessagingService . VERSION _ 30 ; 
 + assert version > = MessagingService . VERSION _ 30 ; 
 ByteBuffer data = ByteBufferUtil . readWithVIntLength ( in ) ; 
 return new RemoteDataResponse ( data ) ; 
 } 
 @ @ - 413 , 9 + 413 , 10 @ @ public abstract class ReadResponse 
 long size = ByteBufferUtil . serializedSizeWithVIntLength ( digest ) ; 
 if ( ! isDigest ) 
 { 
 - / / Note that we can only get there if version = = 3 . 0 , which is the current _ version . When we ' ll change the 
 - / / version , we ' ll have to deserialize / re - serialize the data to be in the proper version . 
 - assert version = = MessagingService . VERSION _ 30 ; 
 + / / In theory , we should deserialize / re - serialize if the version asked is different from the current 
 + / / version as the content could have a different serialization format . So far though , we haven ' t made 
 + / / change to partition iterators serialization since 3 . 0 so we skip this . 
 + assert version > = MessagingService . VERSION _ 30 ; 
 ByteBuffer data = ( ( DataResponse ) response ) . data ; 
 size + = ByteBufferUtil . serializedSizeWithVIntLength ( data ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java 
 index 6774d39 . . 0df20ce 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java 
 @ @ - 198 , 7 + 198 , 7 @ @ public class CommitLogDescriptor 
 case VERSION _ 22 : 
 return MessagingService . VERSION _ 22 ; 
 case VERSION _ 30 : 
 - return MessagingService . VERSION _ 30 ; 
 + return MessagingService . FORCE _ 3 _ 0 _ PROTOCOL _ VERSION ? MessagingService . VERSION _ 30 : MessagingService . VERSION _ 3014 ; 
 default : 
 throw new IllegalStateException ( " Unknown commitlog version " + version ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / filter / ColumnFilter . java b / src / java / org / apache / cassandra / db / filter / ColumnFilter . java 
 index df91781 . . c28c0ae 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / ColumnFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / ColumnFilter . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import org . apache . cassandra . db . rows . CellPath ; 
 import org . apache . cassandra . config . ColumnDefinition ; 
 import org . apache . cassandra . io . util . DataInputPlus ; 
 import org . apache . cassandra . io . util . DataOutputPlus ; 
 + import org . apache . cassandra . net . MessagingService ; 
 
 / * * 
 * Represents which ( non - PK ) columns ( and optionally which sub - part of a column for complex columns ) are selected 
 @ @ - 52 , 23 + 53 , 27 @ @ public class ColumnFilter 
 public static final Serializer serializer = new Serializer ( ) ; 
 
 / / Distinguish between the 2 cases described above : if ' isFetchAll ' is true , then all columns will be retrieved 
 - / / by the query , but the values for column / cells not selected by ' selection ' and ' subSelections ' will be skipped . 
 - / / Otherwise , only the column / cells returned by ' selection ' and ' subSelections ' will be returned at all . 
 + / / by the query , but the values for column / cells not selected by ' queried ' and ' subSelections ' will be skipped . 
 + / / Otherwise , only the column / cells returned by ' queried ' and ' subSelections ' will be returned at all . 
 private final boolean isFetchAll ; 
 
 - private final CFMetaData metadata ; / / can be null if ! isFetchAll 
 - 
 - private final PartitionColumns selection ; / / can be null if isFetchAll and we don ' t want to skip any value 
 + private final PartitionColumns queried ; / / can be null if isFetchAll and we don ' t want to skip any value 
 + private final PartitionColumns fetched ; 
 private final SortedSetMultimap < ColumnIdentifier , ColumnSubselection > subSelections ; / / can be null 
 
 + / * * 
 + * Used on replica for deserialisation 
 + * / 
 private ColumnFilter ( boolean isFetchAll , 
 - CFMetaData metadata , 
 - PartitionColumns columns , 
 + PartitionColumns fetched , 
 + PartitionColumns queried , 
 SortedSetMultimap < ColumnIdentifier , ColumnSubselection > subSelections ) 
 { 
 + assert ! isFetchAll | | fetched ! = null ; 
 + assert isFetchAll | | queried ! = null ; 
 this . isFetchAll = isFetchAll ; 
 - this . metadata = metadata ; 
 - this . selection = columns ; 
 + this . fetched = isFetchAll ? fetched : queried ; 
 + this . queried = queried ; 
 this . subSelections = subSelections ; 
 } 
 
 @ @ - 77 , 7 + 82 , 7 @ @ public class ColumnFilter 
 * / 
 public static ColumnFilter all ( CFMetaData metadata ) 
 { 
 - return new ColumnFilter ( true , metadata , null , null ) ; 
 + return new ColumnFilter ( true , metadata . partitionColumns ( ) , null , null ) ; 
 } 
 
 / * * 
 @ @ - 98 , 7 + 103 , 7 @ @ public class ColumnFilter 
 * / 
 public static ColumnFilter selection ( CFMetaData metadata , PartitionColumns queried ) 
 { 
 - return new ColumnFilter ( true , metadata , queried , null ) ; 
 + return new ColumnFilter ( true , metadata . partitionColumns ( ) , queried , null ) ; 
 } 
 
 / * * 
 @ @ - 111 , 7 + 116 , 7 @ @ public class ColumnFilter 
 * / 
 public PartitionColumns fetchedColumns ( ) 
 { 
 - return isFetchAll ? metadata . partitionColumns ( ) : selection ; 
 + return fetched ; 
 } 
 
 public boolean includesAllColumns ( ) 
 @ @ - 124 , 7 + 129 , 7 @ @ public class ColumnFilter 
 * / 
 public boolean includes ( ColumnDefinition column ) 
 { 
 - return isFetchAll | | selection . contains ( column ) ; 
 + return isFetchAll | | queried . contains ( column ) ; 
 } 
 
 / * * 
 @ @ - 301 , 7 + 306 , 7 @ @ public class ColumnFilter 
 boolean isFetchAll = metadata ! = null ; 
 
 PartitionColumns selectedColumns = selection = = null ? null : selection . build ( ) ; 
 - / / It ' s only ok to have selection = = null in ColumnFilter if isFetchAll . So deal with the case of a " selection " builder 
 + / / It ' s only ok to have queried = = null in ColumnFilter if isFetchAll . So deal with the case of a " selection " builder 
 / / with nothing selected ( we can at least happen on some backward compatible queries - CASSANDRA - 10471 ) . 
 if ( ! isFetchAll & & selectedColumns = = null ) 
 selectedColumns = PartitionColumns . NONE ; 
 @ @ - 314 , 20 + 319 , 37 @ @ public class ColumnFilter 
 s . put ( subSelection . column ( ) . name , subSelection ) ; 
 } 
 
 - return new ColumnFilter ( isFetchAll , metadata , selectedColumns , s ) ; 
 + return new ColumnFilter ( isFetchAll , isFetchAll ? metadata . partitionColumns ( ) : selectedColumns , selectedColumns , s ) ; 
 } 
 } 
 
 @ Override 
 + public boolean equals ( Object other ) 
 + { 
 + if ( other = = this ) 
 + return true ; 
 + 
 + if ( ! ( other instanceof ColumnFilter ) ) 
 + return false ; 
 + 
 + ColumnFilter otherCf = ( ColumnFilter ) other ; 
 + 
 + return otherCf . isFetchAll = = this . isFetchAll & & 
 + Objects . equals ( otherCf . fetched , this . fetched ) & & 
 + Objects . equals ( otherCf . queried , this . queried ) & & 
 + Objects . equals ( otherCf . subSelections , this . subSelections ) ; 
 + 
 + } 
 + @ Override 
 public String toString ( ) 
 { 
 if ( isFetchAll ) 
 return " * " ; 
 
 - if ( selection . isEmpty ( ) ) 
 + if ( queried . isEmpty ( ) ) 
 return " " ; 
 
 - Iterator < ColumnDefinition > defs = selection . selectOrderIterator ( ) ; 
 + Iterator < ColumnDefinition > defs = queried . selectOrderIterator ( ) ; 
 if ( ! defs . hasNext ( ) ) 
 return " < none > " ; 
 
 @ @ - 367 , 7 + 389 , 7 @ @ public class ColumnFilter 
 private static int makeHeaderByte ( ColumnFilter selection ) 
 { 
 return ( selection . isFetchAll ? IS _ FETCH _ ALL _ MASK : 0 ) 
 - | ( selection . selection ! = null ? HAS _ SELECTION _ MASK : 0 ) 
 + | ( selection . queried ! = null ? HAS _ SELECTION _ MASK : 0 ) 
 | ( selection . subSelections ! = null ? HAS _ SUB _ SELECTIONS _ MASK : 0 ) ; 
 } 
 
 @ @ - 375 , 10 + 397 , 16 @ @ public class ColumnFilter 
 { 
 out . writeByte ( makeHeaderByte ( selection ) ) ; 
 
 - if ( selection . selection ! = null ) 
 + if ( version > = MessagingService . VERSION _ 3014 & & selection . isFetchAll ) 
 + { 
 + Columns . serializer . serialize ( selection . fetched . statics , out ) ; 
 + Columns . serializer . serialize ( selection . fetched . regulars , out ) ; 
 + } 
 + 
 + if ( selection . queried ! = null ) 
 { 
 - Columns . serializer . serialize ( selection . selection . statics , out ) ; 
 - Columns . serializer . serialize ( selection . selection . regulars , out ) ; 
 + Columns . serializer . serialize ( selection . queried . statics , out ) ; 
 + Columns . serializer . serialize ( selection . queried . regulars , out ) ; 
 } 
 
 if ( selection . subSelections ! = null ) 
 @ @ - 396 , 7 + 424 , 23 @ @ public class ColumnFilter 
 boolean hasSelection = ( header & HAS _ SELECTION _ MASK ) ! = 0 ; 
 boolean hasSubSelections = ( header & HAS _ SUB _ SELECTIONS _ MASK ) ! = 0 ; 
 
 + PartitionColumns fetched = null ; 
 PartitionColumns selection = null ; 
 + 
 + if ( isFetchAll ) 
 + { 
 + if ( version > = MessagingService . VERSION _ 3014 ) 
 + { 
 + Columns statics = Columns . serializer . deserialize ( in , metadata ) ; 
 + Columns regulars = Columns . serializer . deserialize ( in , metadata ) ; 
 + fetched = new PartitionColumns ( statics , regulars ) ; 
 + } 
 + else 
 + { 
 + fetched = metadata . partitionColumns ( ) ; 
 + } 
 + } 
 + 
 if ( hasSelection ) 
 { 
 Columns statics = Columns . serializer . deserialize ( in , metadata ) ; 
 @ @ - 416 , 17 + 460 , 23 @ @ public class ColumnFilter 
 } 
 } 
 
 - return new ColumnFilter ( isFetchAll , isFetchAll ? metadata : null , selection , subSelections ) ; 
 + return new ColumnFilter ( isFetchAll , fetched , selection , subSelections ) ; 
 } 
 
 public long serializedSize ( ColumnFilter selection , int version ) 
 { 
 long size = 1 ; / / header byte 
 
 - if ( selection . selection ! = null ) 
 + if ( version > = MessagingService . VERSION _ 3014 & & selection . isFetchAll ) 
 + { 
 + size + = Columns . serializer . serializedSize ( selection . fetched . statics ) ; 
 + size + = Columns . serializer . serializedSize ( selection . fetched . regulars ) ; 
 + } 
 + 
 + if ( selection . queried ! = null ) 
 { 
 - size + = Columns . serializer . serializedSize ( selection . selection . statics ) ; 
 - size + = Columns . serializer . serializedSize ( selection . selection . regulars ) ; 
 + size + = Columns . serializer . serializedSize ( selection . queried . statics ) ; 
 + size + = Columns . serializer . serializedSize ( selection . queried . regulars ) ; 
 } 
 
 if ( selection . subSelections ! = null ) 
 @ @ - 440 , 4 + 490 , 4 @ @ public class ColumnFilter 
 return size ; 
 } 
 } 
 - } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index 4aaf49b . . e0f77b7 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 80 , 6 + 80 , 10 @ @ import org . apache . cassandra . utils . concurrent . SimpleCondition ; 
 
 public final class MessagingService implements MessagingServiceMBean 
 { 
 + / / Required to allow schema migrations while upgrading within the minor 3 . 0 . x versions to 3 . 0 . 14 . 
 + / / See CASSANDRA - 13004 for details . 
 + public final static boolean FORCE _ 3 _ 0 _ PROTOCOL _ VERSION = Boolean . getBoolean ( " cassandra . force _ 3 _ 0 _ protocol _ version " ) ; 
 + 
 public static final String MBEAN _ NAME = " org . apache . cassandra . net : type = MessagingService " ; 
 
 / / 8 bits version , so don ' t waste versions 
 @ @ - 88 , 7 + 92 , 8 @ @ public final class MessagingService implements MessagingServiceMBean 
 public static final int VERSION _ 21 = 8 ; 
 public static final int VERSION _ 22 = 9 ; 
 public static final int VERSION _ 30 = 10 ; 
 - public static final int current _ version = VERSION _ 30 ; 
 + public static final int VERSION _ 3014 = 11 ; 
 + public static final int current _ version = FORCE _ 3 _ 0 _ PROTOCOL _ VERSION ? VERSION _ 30 : VERSION _ 3014 ; 
 
 public static final String FAILURE _ CALLBACK _ PARAM = " CAL _ BAC " ; 
 public static final byte [ ] ONE _ BYTE = new byte [ 1 ] ; 
 diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java 
 index aacb769 . . 7b7cd8f 100644 
 - - - a / src / java / org / apache / cassandra / service / MigrationManager . java 
 + + + b / src / java / org / apache / cassandra / service / MigrationManager . java 
 @ @ - 144 , 10 + 144 , 17 @ @ public class MigrationManager 
 * Don ' t request schema from fat clients 
 * / 
 return MessagingService . instance ( ) . knowsVersion ( endpoint ) 
 - & & MessagingService . instance ( ) . getRawVersion ( endpoint ) = = MessagingService . current _ version 
 + & & is30Compatible ( MessagingService . instance ( ) . getRawVersion ( endpoint ) ) 
 & & ! Gossiper . instance . isGossipOnlyMember ( endpoint ) ; 
 } 
 
 + / / Since 3 . 0 . 14 protocol contains only a CASSANDRA - 13004 bugfix , it is safe to accept schema changes 
 + / / from both 3 . 0 and 3 . 0 . 14 . 
 + private static boolean is30Compatible ( int version ) 
 + { 
 + return version = = MessagingService . current _ version | | version = = MessagingService . VERSION _ 3014 ; 
 + } 
 + 
 public static boolean isReadyForBootstrap ( ) 
 { 
 return MigrationTask . getInflightTasks ( ) . isEmpty ( ) ; 
 @ @ - 541 , 8 + 548 , 8 @ @ public class MigrationManager 
 { 
 / / only push schema to nodes with known and equal versions 
 if ( ! endpoint . equals ( FBUtilities . getBroadcastAddress ( ) ) & & 
 - MessagingService . instance ( ) . knowsVersion ( endpoint ) & & 
 - MessagingService . instance ( ) . getRawVersion ( endpoint ) = = MessagingService . current _ version ) 
 + MessagingService . instance ( ) . knowsVersion ( endpoint ) & & 
 + is30Compatible ( MessagingService . instance ( ) . getRawVersion ( endpoint ) ) ) 
 pushSchemaMutation ( endpoint , schema ) ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / db / filter / ColumnFilterTest . java b / test / unit / org / apache / cassandra / db / filter / ColumnFilterTest . java 
 new file mode 100644 
 index 0000000 . . aa56091 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / db / filter / ColumnFilterTest . java 
 @ @ - 0 , 0 + 1 , 70 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . db . filter ; 
 + 
 + import org . junit . Test ; 
 + 
 + import junit . framework . Assert ; 
 + import org . apache . cassandra . config . CFMetaData ; 
 + import org . apache . cassandra . config . ColumnDefinition ; 
 + import org . apache . cassandra . db . marshal . Int32Type ; 
 + import org . apache . cassandra . dht . Murmur3Partitioner ; 
 + import org . apache . cassandra . io . util . DataInputBuffer ; 
 + import org . apache . cassandra . io . util . DataInputPlus ; 
 + import org . apache . cassandra . io . util . DataOutputBuffer ; 
 + import org . apache . cassandra . net . MessagingService ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + 
 + public class ColumnFilterTest 
 + { 
 + final static ColumnFilter . Serializer serializer = new ColumnFilter . Serializer ( ) ; 
 + 
 + @ Test 
 + public void columnFilterSerialisationRoundTrip ( ) throws Exception 
 + { 
 + CFMetaData metadata = CFMetaData . Builder . create ( " ks " , " table " ) 
 + . withPartitioner ( Murmur3Partitioner . instance ) 
 + . addPartitionKey ( " pk " , Int32Type . instance ) 
 + . addClusteringColumn ( " ck " , Int32Type . instance ) 
 + . addRegularColumn ( " v1 " , Int32Type . instance ) 
 + . addRegularColumn ( " v2 " , Int32Type . instance ) 
 + . addRegularColumn ( " v3 " , Int32Type . instance ) 
 + . build ( ) ; 
 + 
 + ColumnDefinition v1 = metadata . getColumnDefinition ( ByteBufferUtil . bytes ( " v1 " ) ) ; 
 + 
 + testRoundTrip ( ColumnFilter . all ( metadata ) , metadata , MessagingService . VERSION _ 30 ) ; 
 + testRoundTrip ( ColumnFilter . all ( metadata ) , metadata , MessagingService . VERSION _ 3014 ) ; 
 + 
 + testRoundTrip ( ColumnFilter . selection ( metadata . partitionColumns ( ) . without ( v1 ) ) , metadata , MessagingService . VERSION _ 30 ) ; 
 + testRoundTrip ( ColumnFilter . selection ( metadata . partitionColumns ( ) . without ( v1 ) ) , metadata , MessagingService . VERSION _ 3014 ) ; 
 + 
 + testRoundTrip ( ColumnFilter . selection ( metadata , metadata . partitionColumns ( ) . without ( v1 ) ) , metadata , MessagingService . VERSION _ 30 ) ; 
 + testRoundTrip ( ColumnFilter . selection ( metadata , metadata . partitionColumns ( ) . without ( v1 ) ) , metadata , MessagingService . VERSION _ 3014 ) ; 
 + } 
 + 
 + static void testRoundTrip ( ColumnFilter columnFilter , CFMetaData metadata , int version ) throws Exception 
 + { 
 + DataOutputBuffer output = new DataOutputBuffer ( ) ; 
 + serializer . serialize ( columnFilter , output , version ) ; 
 + Assert . assertEquals ( serializer . serializedSize ( columnFilter , version ) , output . position ( ) ) ; 
 + DataInputPlus input = new DataInputBuffer ( output . buffer ( ) , false ) ; 
 + Assert . assertEquals ( serializer . deserialize ( input , version , metadata ) , columnFilter ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 index 1f235df . . 25e1072 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 package org . apache . cassandra . concurrent ; 
 
 import java . lang . management . ManagementFactory ; 
 + import java . util . List ; 
 import java . util . concurrent . * ; 
 import javax . management . MBeanServer ; 
 import javax . management . ObjectName ; 
 @ @ - 34 , 6 + 35 , 7 @ @ import org . apache . log4j . Logger ; 
 public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements DebuggableThreadPoolExecutorMBean 
 { 
 private static Logger logger _ = Logger . getLogger ( DebuggableThreadPoolExecutor . class ) ; 
 + private final String mbeanName ; 
 
 public DebuggableThreadPoolExecutor ( String threadPoolName ) 
 { 
 @ @ - 51 , 9 + 53 , 10 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements 
 super . prestartAllCoreThreads ( ) ; 
 
 MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 + mbeanName = " org . apache . cassandra . concurrent : type = " + threadFactory . id ; 
 try 
 { 
 - mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . concurrent : type = " + threadFactory . id ) ) ; 
 + mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 84 , 6 + 87 , 33 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements 
 } 
 } 
 
 + private void unregisterMBean ( ) 
 + { 
 + try 
 + { 
 + ManagementFactory . getPlatformMBeanServer ( ) . unregisterMBean ( new ObjectName ( mbeanName ) ) ; 
 + } 
 + catch ( Exception ex ) 
 + { 
 + / / don ' t let it get in the way , but notify . 
 + logger _ . error ( ex . getMessage ( ) , ex ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void shutdown ( ) 
 + { 
 + unregisterMBean ( ) ; 
 + super . shutdown ( ) ; 
 + } 
 + 
 + @ Override 
 + public List < Runnable > shutdownNow ( ) 
 + { 
 + unregisterMBean ( ) ; 
 + return super . shutdownNow ( ) ; 
 + } 
 + 
 / * * 
 * Get the number of completed tasks 
 * / 
 diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index 3b70d17 . . f5d8d35 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 122 , 7 + 122 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 return gossiper _ ; 
 } 
 
 - private Timer gossipTimer _ = new Timer ( false ) ; 
 + private Timer gossipTimer _ ; 
 private InetAddress localEndPoint _ ; 
 private long aVeryLongTime _ ; 
 private Random random _ = new Random ( ) ; 
 @ @ - 144 , 6 + 144 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 
 private Gossiper ( ) 
 { 
 + gossipTimer _ = new Timer ( false ) ; 
 aVeryLongTime _ = 259200 * 1000 ; 
 / * register with the Failure Detector for receiving Failure detector events * / 
 FailureDetector . instance ( ) . registerFailureDetectionEventListener ( this ) ; 
 @ @ - 834 , 6 + 835 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 public void stop ( ) 
 { 
 gossipTimer _ . cancel ( ) ; 
 + gossipTimer _ = new Timer ( false ) ; / / makes the Gossiper reentrant . 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index 8ff93f6 . . b1ad5ed 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 69 , 6 + 69 , 9 @ @ public class MessagingService 
 
 / * List of sockets we are listening on * / 
 private static Map < InetAddress , SelectionKey > listenSockets _ = new HashMap < InetAddress , SelectionKey > ( ) ; 
 + 
 + / * List of UdpConnections we are listening on * / 
 + private static Map < InetAddress , UdpConnection > udpConnections _ = new HashMap < InetAddress , UdpConnection > ( ) ; 
 
 / * Lookup table for registering message handlers based on the verb . * / 
 private static Map < String , IVerbHandler > verbHandlers _ ; 
 @ @ - 214 , 7 + 217 , 8 @ @ public class MessagingService 
 try 
 { 
 connection . init ( localEp ) ; 
 - endPoints _ . add ( localEp ) ; 
 + endPoints _ . add ( localEp ) ; 
 + udpConnections _ . put ( localEp , connection ) ; 
 } 
 catch ( IOException e ) 
 { 
 @ @ - 497 , 7 + 501 , 7 @ @ public class MessagingService 
 logger _ . info ( " Shutting down . . . " ) ; 
 synchronized ( MessagingService . class ) 
 { 
 - / * Stop listening on any socket * / 
 + / * Stop listening on any TCP socket * / 
 for ( SelectionKey skey : listenSockets _ . values ( ) ) 
 { 
 skey . cancel ( ) ; 
 @ @ - 509 , 6 + 513 , 13 @ @ public class MessagingService 
 } 
 listenSockets _ . clear ( ) ; 
 
 + / * Stop listening on any UDP ports . * / 
 + for ( UdpConnection con : udpConnections _ . values ( ) ) 
 + { 
 + con . close ( ) ; 
 + } 
 + udpConnections _ . clear ( ) ; 
 + 
 / * Shutdown the threads in the EventQueue ' s * / 
 messageDeserializationExecutor _ . shutdownNow ( ) ; 
 messageDeserializerExecutor _ . shutdownNow ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / net / SelectorManager . java b / src / java / org / apache / cassandra / net / SelectorManager . java 
 index 7623a05 . . 16511ee 100644 
 - - - a / src / java / org / apache / cassandra / net / SelectorManager . java 
 + + + b / src / java / org / apache / cassandra / net / SelectorManager . java 
 @ @ - 35 , 6 + 35 , 9 @ @ public class SelectorManager extends Thread 
 / / workaround JDK select / register bug 
 Object gate = new Object ( ) ; 
 
 + / / flag to indicate that shutdown has been requested . 
 + private boolean shutdownRequested = false ; 
 + 
 / / The static selector manager which is used by all applications 
 private static SelectorManager manager ; 
 
 @ @ - 82 , 7 + 85 , 13 @ @ public class SelectorManager extends Thread 
 selector . wakeup ( ) ; 
 return channel . register ( selector , ops , handler ) ; 
 } 
 - } 
 + } 
 + 
 + / / requests the thread to shutdown . However , it brings no guarantees . Added for testing . 
 + private void requestShutdown ( ) 
 + { 
 + shutdownRequested = true ; 
 + } 
 
 / * * 
 * This method starts the socket manager listening for events . It is 
 @ @ - 102 , 6 + 111 , 11 @ @ public class SelectorManager extends Thread 
 { 
 throw new RuntimeException ( e ) ; 
 } 
 + if ( shutdownRequested ) 
 + { 
 + shutdownRequested = false ; 
 + break ; 
 + } 
 } 
 } 
 
 @ @ - 145 , 6 + 159 , 22 @ @ public class SelectorManager extends Thread 
 } 
 
 / * * 
 + * Intended to reset the singleton as part of testing . 
 + * / 
 + static void reset ( ) 
 + { 
 + synchronized ( SelectorManager . class ) 
 + { 
 + if ( manager ! = null ) 
 + manager . requestShutdown ( ) ; 
 + manager = null ; 
 + if ( udpManager ! = null ) 
 + udpManager . requestShutdown ( ) ; 
 + udpManager = null ; 
 + } 
 + } 
 + 
 + / * * 
 * Returns the SelectorManager applications should use . 
 * 
 * @ return The SelectorManager which applications should use 
 diff - - git a / test / unit / org / apache / cassandra / CleanupHelper . java b / test / unit / org / apache / cassandra / CleanupHelper . java 
 index 969a2cd . . e3cde8d 100644 
 - - - a / test / unit / org / apache / cassandra / CleanupHelper . java 
 + + + b / test / unit / org / apache / cassandra / CleanupHelper . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 package org . apache . cassandra ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . junit . BeforeClass ; 
 
 @ @ - 30 , 6 + 31 , 13 @ @ public class CleanupHelper 
 private static Logger logger = Logger . getLogger ( CleanupHelper . class ) ; 
 
 @ BeforeClass 
 + public static void cleanupAndLeaveDirs ( ) 
 + { 
 + mkdirs ( ) ; 
 + cleanup ( ) ; 
 + mkdirs ( ) ; 
 + } 
 + 
 public static void cleanup ( ) 
 { 
 / / we clean the fs twice , once to start with ( so old data files don ' t get stored by anything static if this is the first run ) 
 @ @ - 38 , 6 + 46 , 10 @ @ public class CleanupHelper 
 DatabaseDescriptor . getLogFileLocation ( ) , 
 } ; 
 
 + / / try to delete the directories themselves too . don ' t panic if this fails . it probably means that the process 
 + / / doesn ' t have permissions to do so , or it contains non - cassandra generated files that were intentionally 
 + / / put there . 
 + 
 for ( String dirName : directoryNames ) 
 { 
 File dir = new File ( dirName ) ; 
 @ @ - 47 , 11 + 59 , 15 @ @ public class CleanupHelper 
 } 
 for ( File f : dir . listFiles ( ) ) 
 { 
 - if ( ! f . delete ( ) ) { 
 + if ( ! f . delete ( ) ) 
 + { 
 logger . error ( " could not delete " + f ) ; 
 + } 
 } 
 + 
 + if ( ! dir . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 - } 
 
 / / cleanup data directory which are stored as data directory / table / data files 
 for ( String dirName : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 @ @ - 71 , 8 + 87 , 24 @ @ public class CleanupHelper 
 } 
 } 
 } 
 + if ( ! tableFile . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 + 
 + if ( ! dir . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 + } 
 
 + public static void mkdirs ( ) 
 + { 
 + try 
 + { 
 + DatabaseDescriptor . createAllDirectories ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / net / NetPackageAccessor . java b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java 
 new file mode 100644 
 index 0000000 . . 408bfba 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java 
 @ @ - 0 , 0 + 1 , 29 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . net ; 
 + 
 + / * * 
 + For accesing package - level members created for the sole purpose of testing . 
 + * / 
 + public class NetPackageAccessor 
 + { 
 + public static void resetSelectorManager ( ) 
 + { 
 + SelectorManager . reset ( ) ; 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / service / StorageServiceTest . java b / test / unit / org / apache / cassandra / service / StorageServiceTest . java 
 new file mode 100644 
 index 0000000 . . 0ec9ffe 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / service / StorageServiceTest . java 
 @ @ - 0 , 0 + 1 , 68 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + 
 + package org . apache . cassandra . service ; 
 + 
 + import org . apache . cassandra . CleanupHelper ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . net . NetPackageAccessor ; 
 + import org . junit . Test ; 
 + import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . assertFalse ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 + public class StorageServiceTest 
 + { 
 + @ Test 
 + public void testClientOnlyMode ( ) throws IOException 
 + { 
 + CleanupHelper . mkdirs ( ) ; 
 + CleanupHelper . cleanup ( ) ; 
 + StorageService . instance ( ) . initClient ( ) ; 
 + 
 + / / verify that no storage directories were created . 
 + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 + { 
 + assertFalse ( new File ( path ) . exists ( ) ) ; 
 + } 
 + StorageService . instance ( ) . stopClient ( ) ; 
 + NetPackageAccessor . resetSelectorManager ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testRegularMode ( ) throws IOException , InterruptedException 
 + { 
 + CleanupHelper . mkdirs ( ) ; 
 + CleanupHelper . cleanup ( ) ; 
 + StorageService . instance ( ) . initServer ( ) ; 
 + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 + { 
 + / / verify that storage directories are there . 
 + assertTrue ( new File ( path ) . exists ( ) ) ; 
 + } 
 + / / a proper test would be to call decommission here , but decommission ( ) mixes both shutdown and datatransfer 
 + / / calls . This test is only interested in the shutdown - related items which a properly handled by just 
 + / / stopping the client . 
 + / / StorageService . instance ( ) . decommission ( ) ; 
 + StorageService . instance ( ) . stopClient ( ) ; 
 + NetPackageAccessor . resetSelectorManager ( ) ; 
 + } 
 + }
