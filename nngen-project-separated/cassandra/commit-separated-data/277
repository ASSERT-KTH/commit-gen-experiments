BLEU SCORE: 0.008769706971774593

TEST MSG: Prevent integer overflow of timestamps in CellTest and RowsTest
GENERATED MSG: treat expired columns as deleted . patch by Sylvain Lebresne ; reviewed by jbellis for CASSANDRA - 1539

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index a259545 . . 7afbfaa 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 15 <nl> + * Prevent integer overflow of timestamps in CellTest and RowsTest ( CASSANDRA - 13866 ) <nl> * Fix counter application order in short read protection ( CASSANDRA - 12872 ) <nl> * Don ' t block RepairJob execution on validation futures ( CASSANDRA - 13797 ) <nl> * Wait for all management tasks to complete before shutting down CLSM ( CASSANDRA - 13123 ) <nl> diff - - git a / test / unit / org / apache / cassandra / db / CellTest . java b / test / unit / org / apache / cassandra / db / CellTest . java <nl> index cd6000f . . 22f1b78 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / CellTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / CellTest . java <nl> @ @ - 255 , 7 + 255 , 7 @ @ public class CellTest <nl> { <nl> ColumnDefinition m = cfm2 . getColumnDefinition ( new ColumnIdentifier ( " m " , false ) ) ; <nl> int now1 = FBUtilities . nowInSeconds ( ) ; <nl> - long ts1 = now1 * 1000000 ; <nl> + long ts1 = now1 * 1000000L ; <nl> <nl> <nl> Cell r1m1 = BufferCell . live ( cfm2 , m , ts1 , bb ( 1 ) , CellPath . create ( bb ( 1 ) ) ) ; <nl> @ @ - 263 , 7 + 263 , 7 @ @ public class CellTest <nl> List < Cell > cells1 = Lists . newArrayList ( r1m1 , r1m2 ) ; <nl> <nl> int now2 = now1 + 1 ; <nl> - long ts2 = now2 * 1000000 ; <nl> + long ts2 = now2 * 1000000L ; <nl> Cell r2m2 = BufferCell . live ( cfm2 , m , ts2 , bb ( 1 ) , CellPath . create ( bb ( 2 ) ) ) ; <nl> Cell r2m3 = BufferCell . live ( cfm2 , m , ts2 , bb ( 2 ) , CellPath . create ( bb ( 3 ) ) ) ; <nl> Cell r2m4 = BufferCell . live ( cfm2 , m , ts2 , bb ( 3 ) , CellPath . create ( bb ( 4 ) ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / rows / RowsTest . java b / test / unit / org / apache / cassandra / db / rows / RowsTest . java <nl> index b47bea2 . . 8683808 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / rows / RowsTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / rows / RowsTest . java <nl> @ @ - 202 , 7 + 202 , 7 @ @ public class RowsTest <nl> <nl> private static long secondToTs ( int now ) <nl> { <nl> - return now * 1000000 ; <nl> + return now * 1000000L ; <nl> } <nl> <nl> private static Row . Builder createBuilder ( Clustering c , int now , ByteBuffer vVal , ByteBuffer mKey , ByteBuffer mVal )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 85256bb . . f73d999 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 87 , 6 + 87 , 7 @ @ <nl> * Close intra - node sockets when connection is broken ( CASSANDRA - 1528 ) <nl> * RPM packaging spec file ( CASSANDRA - 786 ) <nl> * weighted request scheduler ( CASSANDRA - 1485 ) <nl> + * treat expired columns as deleted ( CASSANDRA - 1539 ) <nl> <nl> <nl> 0 . 7 - beta1 <nl> diff - - git a / src / java / org / apache / cassandra / db / ExpiringColumn . java b / src / java / org / apache / cassandra / db / ExpiringColumn . java <nl> index 12f7801 . . d9813ff 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ExpiringColumn . java <nl> + + + b / src / java / org / apache / cassandra / db / ExpiringColumn . java <nl> @ @ - 113 , 4 + 113 , 17 @ @ public class ExpiringColumn extends Column <nl> sb . append ( timeToLive ) ; <nl> return sb . toString ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public IClock getMarkedForDeleteAt ( ) <nl> + { <nl> + if ( isMarkedForDelete ( ) ) <nl> + { <nl> + return clock ; <nl> + } <nl> + else <nl> + { <nl> + throw new IllegalStateException ( " column is not marked for delete " ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / RowTest . java b / test / unit / org / apache / cassandra / db / RowTest . java <nl> index 2e028d1 . . f23c68d 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RowTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RowTest . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import org . apache . cassandra . SchemaLoader ; <nl> import org . junit . Test ; <nl> <nl> import static junit . framework . Assert . assertEquals ; <nl> + import static junit . framework . Assert . fail ; <nl> import org . apache . cassandra . db . marshal . AsciiType ; <nl> import static org . apache . cassandra . Util . column ; <nl> <nl> @ @ - 71 , 4 + 72 , 24 @ @ public class RowTest extends SchemaLoader <nl> assert Arrays . equals ( cf1 . getColumn ( " one " . getBytes ( ) ) . value ( ) , " B " . getBytes ( ) ) ; <nl> assert Arrays . equals ( cf1 . getColumn ( " two " . getBytes ( ) ) . value ( ) , " C " . getBytes ( ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testExpiringColumnExpiration ( ) <nl> + { <nl> + Column c = new ExpiringColumn ( " one " . getBytes ( ) , " A " . getBytes ( ) , new TimestampClock ( 0 ) , 1 ) ; <nl> + assert ! c . isMarkedForDelete ( ) ; <nl> + <nl> + try <nl> + { <nl> + / / Because we keep the local deletion time with a precision of a <nl> + / / second , we could have to wait 2 seconds in worst case scenario . <nl> + Thread . sleep ( 2000 ) ; <nl> + } <nl> + catch ( InterruptedException e ) <nl> + { <nl> + fail ( " Cannot test column expiration if you wake me up too early " ) ; <nl> + } <nl> + <nl> + assert c . isMarkedForDelete ( ) & & c . getMarkedForDeleteAt ( ) . equals ( new TimestampClock ( 0 ) ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index a259545 . . 7afbfaa 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 15 
 + * Prevent integer overflow of timestamps in CellTest and RowsTest ( CASSANDRA - 13866 ) 
 * Fix counter application order in short read protection ( CASSANDRA - 12872 ) 
 * Don ' t block RepairJob execution on validation futures ( CASSANDRA - 13797 ) 
 * Wait for all management tasks to complete before shutting down CLSM ( CASSANDRA - 13123 ) 
 diff - - git a / test / unit / org / apache / cassandra / db / CellTest . java b / test / unit / org / apache / cassandra / db / CellTest . java 
 index cd6000f . . 22f1b78 100644 
 - - - a / test / unit / org / apache / cassandra / db / CellTest . java 
 + + + b / test / unit / org / apache / cassandra / db / CellTest . java 
 @ @ - 255 , 7 + 255 , 7 @ @ public class CellTest 
 { 
 ColumnDefinition m = cfm2 . getColumnDefinition ( new ColumnIdentifier ( " m " , false ) ) ; 
 int now1 = FBUtilities . nowInSeconds ( ) ; 
 - long ts1 = now1 * 1000000 ; 
 + long ts1 = now1 * 1000000L ; 
 
 
 Cell r1m1 = BufferCell . live ( cfm2 , m , ts1 , bb ( 1 ) , CellPath . create ( bb ( 1 ) ) ) ; 
 @ @ - 263 , 7 + 263 , 7 @ @ public class CellTest 
 List < Cell > cells1 = Lists . newArrayList ( r1m1 , r1m2 ) ; 
 
 int now2 = now1 + 1 ; 
 - long ts2 = now2 * 1000000 ; 
 + long ts2 = now2 * 1000000L ; 
 Cell r2m2 = BufferCell . live ( cfm2 , m , ts2 , bb ( 1 ) , CellPath . create ( bb ( 2 ) ) ) ; 
 Cell r2m3 = BufferCell . live ( cfm2 , m , ts2 , bb ( 2 ) , CellPath . create ( bb ( 3 ) ) ) ; 
 Cell r2m4 = BufferCell . live ( cfm2 , m , ts2 , bb ( 3 ) , CellPath . create ( bb ( 4 ) ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / rows / RowsTest . java b / test / unit / org / apache / cassandra / db / rows / RowsTest . java 
 index b47bea2 . . 8683808 100644 
 - - - a / test / unit / org / apache / cassandra / db / rows / RowsTest . java 
 + + + b / test / unit / org / apache / cassandra / db / rows / RowsTest . java 
 @ @ - 202 , 7 + 202 , 7 @ @ public class RowsTest 
 
 private static long secondToTs ( int now ) 
 { 
 - return now * 1000000 ; 
 + return now * 1000000L ; 
 } 
 
 private static Row . Builder createBuilder ( Clustering c , int now , ByteBuffer vVal , ByteBuffer mKey , ByteBuffer mVal )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 85256bb . . f73d999 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 87 , 6 + 87 , 7 @ @ 
 * Close intra - node sockets when connection is broken ( CASSANDRA - 1528 ) 
 * RPM packaging spec file ( CASSANDRA - 786 ) 
 * weighted request scheduler ( CASSANDRA - 1485 ) 
 + * treat expired columns as deleted ( CASSANDRA - 1539 ) 
 
 
 0 . 7 - beta1 
 diff - - git a / src / java / org / apache / cassandra / db / ExpiringColumn . java b / src / java / org / apache / cassandra / db / ExpiringColumn . java 
 index 12f7801 . . d9813ff 100644 
 - - - a / src / java / org / apache / cassandra / db / ExpiringColumn . java 
 + + + b / src / java / org / apache / cassandra / db / ExpiringColumn . java 
 @ @ - 113 , 4 + 113 , 17 @ @ public class ExpiringColumn extends Column 
 sb . append ( timeToLive ) ; 
 return sb . toString ( ) ; 
 } 
 + 
 + @ Override 
 + public IClock getMarkedForDeleteAt ( ) 
 + { 
 + if ( isMarkedForDelete ( ) ) 
 + { 
 + return clock ; 
 + } 
 + else 
 + { 
 + throw new IllegalStateException ( " column is not marked for delete " ) ; 
 + } 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / RowTest . java b / test / unit / org / apache / cassandra / db / RowTest . java 
 index 2e028d1 . . f23c68d 100644 
 - - - a / test / unit / org / apache / cassandra / db / RowTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RowTest . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import org . apache . cassandra . SchemaLoader ; 
 import org . junit . Test ; 
 
 import static junit . framework . Assert . assertEquals ; 
 + import static junit . framework . Assert . fail ; 
 import org . apache . cassandra . db . marshal . AsciiType ; 
 import static org . apache . cassandra . Util . column ; 
 
 @ @ - 71 , 4 + 72 , 24 @ @ public class RowTest extends SchemaLoader 
 assert Arrays . equals ( cf1 . getColumn ( " one " . getBytes ( ) ) . value ( ) , " B " . getBytes ( ) ) ; 
 assert Arrays . equals ( cf1 . getColumn ( " two " . getBytes ( ) ) . value ( ) , " C " . getBytes ( ) ) ; 
 } 
 + 
 + @ Test 
 + public void testExpiringColumnExpiration ( ) 
 + { 
 + Column c = new ExpiringColumn ( " one " . getBytes ( ) , " A " . getBytes ( ) , new TimestampClock ( 0 ) , 1 ) ; 
 + assert ! c . isMarkedForDelete ( ) ; 
 + 
 + try 
 + { 
 + / / Because we keep the local deletion time with a precision of a 
 + / / second , we could have to wait 2 seconds in worst case scenario . 
 + Thread . sleep ( 2000 ) ; 
 + } 
 + catch ( InterruptedException e ) 
 + { 
 + fail ( " Cannot test column expiration if you wake me up too early " ) ; 
 + } 
 + 
 + assert c . isMarkedForDelete ( ) & & c . getMarkedForDeleteAt ( ) . equals ( new TimestampClock ( 0 ) ) ; 
 + } 
 }
