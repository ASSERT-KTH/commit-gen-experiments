BLEU SCORE: 0.005529132673596237

TEST MSG: ( stress ) Add datacenter option to - node options
GENERATED MSG: For CASSANDRA - 7217 , have stress calculate maximum # of pending requests based on thread count and allow manually specifying max pending requests per connection as well as # of connections

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index fd8514c . . 7f284fd 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 6 <nl> + * ( stress ) Add datacenter option to - node options ( CASSANDRA - 11591 ) <nl> * Fix handling of empty slices ( CASSANDRA - 11513 ) <nl> * Make number of cores used by cqlsh COPY visible to testing code ( CASSANDRA - 11437 ) <nl> * Allow filtering on clustering columns for queries without secondary indexes ( CASSANDRA - 11310 ) <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsNode . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsNode . java <nl> index ba1fcb5 . . 89b7871 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsNode . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsNode . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ public class SettingsNode implements Serializable <nl> { <nl> public final List < String > nodes ; <nl> public final boolean isWhiteList ; <nl> + public final String datacenter ; <nl> <nl> public SettingsNode ( Options options ) <nl> { <nl> @ @ - 64 , 8 + 65 , 12 @ @ public class SettingsNode implements Serializable <nl> <nl> } <nl> else <nl> + { <nl> nodes = Arrays . asList ( options . list . value ( ) . split ( " , " ) ) ; <nl> + } <nl> + <nl> isWhiteList = options . whitelist . setByUser ( ) ; <nl> + datacenter = options . datacenter . value ( ) ; <nl> } <nl> <nl> public Set < String > resolveAllPermitted ( StressSettings settings ) <nl> @ @ - 135 , 6 + 140 , 7 @ @ public class SettingsNode implements Serializable <nl> <nl> public static final class Options extends GroupedOptions <nl> { <nl> + final OptionSimple datacenter = new OptionSimple ( " datacenter = " , " . * " , null , " Datacenter used for DCAwareRoundRobinLoadPolicy " , false ) ; <nl> final OptionSimple whitelist = new OptionSimple ( " whitelist " , " " , null , " Limit communications to the provided nodes " , false ) ; <nl> final OptionSimple file = new OptionSimple ( " file = " , " . * " , null , " Node file ( one per line ) " , false ) ; <nl> final OptionSimple list = new OptionSimple ( " " , " [ ^ = , ] + ( , [ ^ = , ] + ) * " , " localhost " , " comma delimited list of nodes " , false ) ; <nl> @ @ - 142 , 7 + 148 , 7 @ @ public class SettingsNode implements Serializable <nl> @ Override <nl> public List < ? extends Option > options ( ) <nl> { <nl> - return Arrays . asList ( whitelist , file , list ) ; <nl> + return Arrays . asList ( datacenter , whitelist , file , list ) ; <nl> } <nl> } <nl> <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java b / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java <nl> index 4f173b4 . . 53d8786 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import javax . net . ssl . SSLContext ; <nl> <nl> import com . datastax . driver . core . * ; <nl> import com . datastax . driver . core . policies . DCAwareRoundRobinPolicy ; <nl> + import com . datastax . driver . core . policies . LoadBalancingPolicy ; <nl> import com . datastax . driver . core . policies . WhiteListPolicy ; <nl> import io . netty . util . internal . logging . InternalLoggerFactory ; <nl> import io . netty . util . internal . logging . Slf4JLoggerFactory ; <nl> @ @ - 51 , 7 + 52 , 7 @ @ public class JavaDriverClient <nl> private final EncryptionOptions . ClientEncryptionOptions encryptionOptions ; <nl> private Cluster cluster ; <nl> private Session session ; <nl> - private final WhiteListPolicy whitelist ; <nl> + private final LoadBalancingPolicy loadBalancingPolicy ; <nl> <nl> private static final ConcurrentMap < String , PreparedStatement > stmts = new ConcurrentHashMap < > ( ) ; <nl> <nl> @ @ - 69 , 10 + 70 , 18 @ @ public class JavaDriverClient <nl> this . password = settings . mode . password ; <nl> this . authProvider = settings . mode . authProvider ; <nl> this . encryptionOptions = encryptionOptions ; <nl> + <nl> + DCAwareRoundRobinPolicy . Builder policyBuilder = DCAwareRoundRobinPolicy . builder ( ) ; <nl> + if ( settings . node . datacenter ! = null ) <nl> + policyBuilder . withLocalDc ( settings . node . datacenter ) ; <nl> + <nl> if ( settings . node . isWhiteList ) <nl> - whitelist = new WhiteListPolicy ( DCAwareRoundRobinPolicy . builder ( ) . build ( ) , settings . node . resolveAll ( settings . port . nativePort ) ) ; <nl> + loadBalancingPolicy = new WhiteListPolicy ( policyBuilder . build ( ) , settings . node . resolveAll ( settings . port . nativePort ) ) ; <nl> + else if ( settings . node . datacenter ! = null ) <nl> + loadBalancingPolicy = policyBuilder . build ( ) ; <nl> else <nl> - whitelist = null ; <nl> + loadBalancingPolicy = null ; <nl> + <nl> connectionsPerHost = settings . mode . connectionsPerHost = = null ? 8 : settings . mode . connectionsPerHost ; <nl> <nl> int maxThreadCount = 0 ; <nl> @ @ - 119 , 8 + 128 , 8 @ @ public class JavaDriverClient <nl> . withoutJMXReporting ( ) <nl> . withProtocolVersion ( protocolVersion ) <nl> . withoutMetrics ( ) ; / / The driver uses metrics 3 with conflict with our version <nl> - if ( whitelist ! = null ) <nl> - clusterBuilder . withLoadBalancingPolicy ( whitelist ) ; <nl> + if ( loadBalancingPolicy ! = null ) <nl> + clusterBuilder . withLoadBalancingPolicy ( loadBalancingPolicy ) ; <nl> clusterBuilder . withCompression ( compression ) ; <nl> if ( encryptionOptions . enabled ) <nl> {
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index fd8514c . . 7f284fd 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 6 
 + * ( stress ) Add datacenter option to - node options ( CASSANDRA - 11591 ) 
 * Fix handling of empty slices ( CASSANDRA - 11513 ) 
 * Make number of cores used by cqlsh COPY visible to testing code ( CASSANDRA - 11437 ) 
 * Allow filtering on clustering columns for queries without secondary indexes ( CASSANDRA - 11310 ) 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsNode . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsNode . java 
 index ba1fcb5 . . 89b7871 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsNode . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsNode . java 
 @ @ - 33 , 6 + 33 , 7 @ @ public class SettingsNode implements Serializable 
 { 
 public final List < String > nodes ; 
 public final boolean isWhiteList ; 
 + public final String datacenter ; 
 
 public SettingsNode ( Options options ) 
 { 
 @ @ - 64 , 8 + 65 , 12 @ @ public class SettingsNode implements Serializable 
 
 } 
 else 
 + { 
 nodes = Arrays . asList ( options . list . value ( ) . split ( " , " ) ) ; 
 + } 
 + 
 isWhiteList = options . whitelist . setByUser ( ) ; 
 + datacenter = options . datacenter . value ( ) ; 
 } 
 
 public Set < String > resolveAllPermitted ( StressSettings settings ) 
 @ @ - 135 , 6 + 140 , 7 @ @ public class SettingsNode implements Serializable 
 
 public static final class Options extends GroupedOptions 
 { 
 + final OptionSimple datacenter = new OptionSimple ( " datacenter = " , " . * " , null , " Datacenter used for DCAwareRoundRobinLoadPolicy " , false ) ; 
 final OptionSimple whitelist = new OptionSimple ( " whitelist " , " " , null , " Limit communications to the provided nodes " , false ) ; 
 final OptionSimple file = new OptionSimple ( " file = " , " . * " , null , " Node file ( one per line ) " , false ) ; 
 final OptionSimple list = new OptionSimple ( " " , " [ ^ = , ] + ( , [ ^ = , ] + ) * " , " localhost " , " comma delimited list of nodes " , false ) ; 
 @ @ - 142 , 7 + 148 , 7 @ @ public class SettingsNode implements Serializable 
 @ Override 
 public List < ? extends Option > options ( ) 
 { 
 - return Arrays . asList ( whitelist , file , list ) ; 
 + return Arrays . asList ( datacenter , whitelist , file , list ) ; 
 } 
 } 
 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java b / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java 
 index 4f173b4 . . 53d8786 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import javax . net . ssl . SSLContext ; 
 
 import com . datastax . driver . core . * ; 
 import com . datastax . driver . core . policies . DCAwareRoundRobinPolicy ; 
 + import com . datastax . driver . core . policies . LoadBalancingPolicy ; 
 import com . datastax . driver . core . policies . WhiteListPolicy ; 
 import io . netty . util . internal . logging . InternalLoggerFactory ; 
 import io . netty . util . internal . logging . Slf4JLoggerFactory ; 
 @ @ - 51 , 7 + 52 , 7 @ @ public class JavaDriverClient 
 private final EncryptionOptions . ClientEncryptionOptions encryptionOptions ; 
 private Cluster cluster ; 
 private Session session ; 
 - private final WhiteListPolicy whitelist ; 
 + private final LoadBalancingPolicy loadBalancingPolicy ; 
 
 private static final ConcurrentMap < String , PreparedStatement > stmts = new ConcurrentHashMap < > ( ) ; 
 
 @ @ - 69 , 10 + 70 , 18 @ @ public class JavaDriverClient 
 this . password = settings . mode . password ; 
 this . authProvider = settings . mode . authProvider ; 
 this . encryptionOptions = encryptionOptions ; 
 + 
 + DCAwareRoundRobinPolicy . Builder policyBuilder = DCAwareRoundRobinPolicy . builder ( ) ; 
 + if ( settings . node . datacenter ! = null ) 
 + policyBuilder . withLocalDc ( settings . node . datacenter ) ; 
 + 
 if ( settings . node . isWhiteList ) 
 - whitelist = new WhiteListPolicy ( DCAwareRoundRobinPolicy . builder ( ) . build ( ) , settings . node . resolveAll ( settings . port . nativePort ) ) ; 
 + loadBalancingPolicy = new WhiteListPolicy ( policyBuilder . build ( ) , settings . node . resolveAll ( settings . port . nativePort ) ) ; 
 + else if ( settings . node . datacenter ! = null ) 
 + loadBalancingPolicy = policyBuilder . build ( ) ; 
 else 
 - whitelist = null ; 
 + loadBalancingPolicy = null ; 
 + 
 connectionsPerHost = settings . mode . connectionsPerHost = = null ? 8 : settings . mode . connectionsPerHost ; 
 
 int maxThreadCount = 0 ; 
 @ @ - 119 , 8 + 128 , 8 @ @ public class JavaDriverClient 
 . withoutJMXReporting ( ) 
 . withProtocolVersion ( protocolVersion ) 
 . withoutMetrics ( ) ; / / The driver uses metrics 3 with conflict with our version 
 - if ( whitelist ! = null ) 
 - clusterBuilder . withLoadBalancingPolicy ( whitelist ) ; 
 + if ( loadBalancingPolicy ! = null ) 
 + clusterBuilder . withLoadBalancingPolicy ( loadBalancingPolicy ) ; 
 clusterBuilder . withCompression ( compression ) ; 
 if ( encryptionOptions . enabled ) 
 {

NEAREST DIFF:
ELIMINATEDSENTENCE
