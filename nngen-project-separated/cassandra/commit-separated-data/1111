BLEU SCORE: 0.029079340872079116

TEST MSG: Add latency logging for dropped messages
GENERATED MSG: Improve batchlog replay behavior and hint ttl handling

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / net / MessageDeliveryTask . java b / src / java / org / apache / cassandra / net / MessageDeliveryTask . java <nl> index 818cfc6 . . bede3d8 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessageDeliveryTask . java <nl> + + + b / src / java / org / apache / cassandra / net / MessageDeliveryTask . java <nl> @ @ - 18 , 11 + 18 , 13 @ @ <nl> package org . apache . cassandra . net ; <nl> <nl> import java . io . IOException ; <nl> + import java . util . Arrays ; <nl> + import java . util . Collection ; <nl> import java . util . EnumSet ; <nl> <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> - <nl> + import org . apache . cassandra . db . IMutation ; <nl> import org . apache . cassandra . db . filter . TombstoneOverwhelmingException ; <nl> import org . apache . cassandra . gms . Gossiper ; <nl> import org . apache . cassandra . index . IndexNotAvailableException ; <nl> @ @ - 43 , 10 + 45 , 11 @ @ public class MessageDeliveryTask implements Runnable <nl> <nl> public void run ( ) <nl> { <nl> + long timeTaken = System . currentTimeMillis ( ) - message . constructionTime . timestamp ; <nl> MessagingService . Verb verb = message . verb ; <nl> - if ( MessagingService . DROPPABLE _ VERBS . contains ( verb ) <nl> - & & System . currentTimeMillis ( ) > message . constructionTime . timestamp + message . getTimeout ( ) ) <nl> + if ( MessagingService . DROPPABLE _ VERBS . contains ( verb ) & & message . getTimeout ( ) > timeTaken ) <nl> { <nl> + LogDroppedMessageDetails ( timeTaken ) ; <nl> MessagingService . instance ( ) . incrementDroppedMessages ( message ) ; <nl> return ; <nl> } <nl> @ @ - 82 , 6 + 85 , 37 @ @ public class MessageDeliveryTask implements Runnable <nl> Gossiper . instance . setLastProcessedMessageAt ( message . constructionTime . timestamp ) ; <nl> } <nl> <nl> + private void LogDroppedMessageDetails ( long timeTaken ) <nl> + { <nl> + logger . debug ( " MessageDeliveryTask ran after { } ms , allowed time was { } ms . Dropping message { } " , <nl> + timeTaken , message . getTimeout ( ) , message . toString ( ) ) ; <nl> + / / Print KS and CF if Payload is mutation or a list of mutations ( sent due to schema announcements ) <nl> + IMutation mutation ; <nl> + if ( message . payload instanceof IMutation ) <nl> + { <nl> + mutation = ( IMutation ) message . payload ; <nl> + if ( mutation ! = null ) <nl> + { <nl> + logger . debug ( " MessageDeliveryTask dropped mutation of KS { } , CF { } " , mutation . getKeyspaceName ( ) , Arrays . toString ( mutation . getColumnFamilyIds ( ) . toArray ( ) ) ) ; <nl> + } <nl> + } <nl> + else if ( message . payload instanceof Collection < ? > ) <nl> + { <nl> + Collection < ? > payloadItems = ( Collection < ? > ) message . payload ; <nl> + for ( Object payloadItem : payloadItems ) <nl> + { <nl> + if ( payloadItem instanceof IMutation ) <nl> + { <nl> + mutation = ( IMutation ) payloadItem ; <nl> + if ( mutation ! = null ) <nl> + { <nl> + logger . debug ( " MessageDeliveryTask dropped mutation of KS { } , CF { } " , mutation . getKeyspaceName ( ) , Arrays . toString ( mutation . getColumnFamilyIds ( ) . toArray ( ) ) ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> private void handleFailure ( Throwable t ) <nl> { <nl> if ( message . doCallbackOnFailure ( ) ) <nl> @ @ - 95 , 4 + 129 , 4 @ @ public class MessageDeliveryTask implements Runnable <nl> private static final EnumSet < MessagingService . Verb > GOSSIP _ VERBS = EnumSet . of ( MessagingService . Verb . GOSSIP _ DIGEST _ ACK , <nl> MessagingService . Verb . GOSSIP _ DIGEST _ ACK2 , <nl> MessagingService . Verb . GOSSIP _ DIGEST _ SYN ) ; <nl> - } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index f161607 . . 1c30cd7 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 1198 , 7 + 1198 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> submitHint ( mutation , endpointsToHint , responseHandler ) ; <nl> <nl> if ( insertLocal ) <nl> - performLocally ( stage , mutation : : apply , responseHandler ) ; <nl> + performLocally ( stage , mutation , mutation : : apply , responseHandler ) ; <nl> <nl> if ( dcGroups ! = null ) <nl> { <nl> @ @ - 1286 , 6 + 1286 , 27 @ @ public class StorageProxy implements StorageProxyMBean <nl> } ) ; <nl> } <nl> <nl> + private static void performLocally ( Stage stage , IMutation mutation , final Runnable runnable , final IAsyncCallbackWithFailure < ? > handler ) <nl> + { <nl> + StageManager . getStage ( stage ) . maybeExecuteImmediately ( new LocalMutationRunnable ( mutation ) <nl> + { <nl> + public void runMayThrow ( ) <nl> + { <nl> + try <nl> + { <nl> + runnable . run ( ) ; <nl> + handler . response ( null ) ; <nl> + } <nl> + catch ( Exception ex ) <nl> + { <nl> + if ( ! ( ex instanceof WriteTimeoutException ) ) <nl> + logger . error ( " Failed to apply mutation locally : { } " , ex ) ; <nl> + handler . onFailure ( FBUtilities . getBroadcastAddress ( ) ) ; <nl> + } <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> / * * <nl> * Handle counter mutation on the coordinator host . <nl> * <nl> @ @ - 2408 , 11 + 2429 , 28 @ @ public class StorageProxy implements StorageProxyMBean <nl> private static abstract class LocalMutationRunnable implements Runnable <nl> { <nl> private final long constructionTime = System . currentTimeMillis ( ) ; <nl> + private IMutation mutation ; <nl> + <nl> + public LocalMutationRunnable ( IMutation mutation ) <nl> + { <nl> + this . mutation = mutation ; <nl> + } <nl> + <nl> + public LocalMutationRunnable ( ) <nl> + { <nl> + } <nl> <nl> public final void run ( ) <nl> { <nl> - if ( System . currentTimeMillis ( ) > constructionTime + DatabaseDescriptor . getTimeout ( MessagingService . Verb . MUTATION ) ) <nl> + long mutationTimeout = DatabaseDescriptor . getTimeout ( MessagingService . Verb . MUTATION ) ; <nl> + if ( System . currentTimeMillis ( ) > constructionTime + mutationTimeout ) <nl> { <nl> + long timeTaken = System . currentTimeMillis ( ) - constructionTime ; <nl> + logger . debug ( " LocalMutationRunnable thread ran after { } ms , allowed time was { } ms . " , timeTaken , mutationTimeout ) ; <nl> + if ( this . mutation ! = null ) <nl> + { <nl> + logger . debug ( " MessageDeliveryTask dropped mutation of KS { } , CF { } " , this . mutation . getKeyspaceName ( ) , Arrays . toString ( this . mutation . getColumnFamilyIds ( ) . toArray ( ) ) ) ; <nl> + } <nl> MessagingService . instance ( ) . incrementDroppedMessages ( MessagingService . Verb . MUTATION ) ; <nl> HintRunnable runnable = new HintRunnable ( Collections . singleton ( FBUtilities . getBroadcastAddress ( ) ) ) <nl> { <nl> @ @ - 2596 , 4 + 2634 , 4 @ @ public class StorageProxy implements StorageProxyMBean <nl> public long getReadRepairRepairedBackground ( ) { <nl> return ReadRepairMetrics . repairedBackground . getCount ( ) ; <nl> } <nl> - } <nl> + } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / NEWS . txt b / NEWS . txt <nl> index 63d1e58 . . 706cd29 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 42 , 7 + 42 , 7 @ @ Features <nl> <nl> Upgrading <nl> - - - - - - - - - <nl> - - CQL3 uses to be case - insensitive for property map key in ALTER and CREATE <nl> + - CQL3 used to be case - insensitive for property map key in ALTER and CREATE <nl> statements . In other words : <nl> CREATE KEYSPACE test WITH replication = { ' CLASS ' : ' SimpleStrategy ' , <nl> ' REPLICATION _ FACTOR ' : ' 1 ' }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / net / MessageDeliveryTask . java b / src / java / org / apache / cassandra / net / MessageDeliveryTask . java 
 index 818cfc6 . . bede3d8 100644 
 - - - a / src / java / org / apache / cassandra / net / MessageDeliveryTask . java 
 + + + b / src / java / org / apache / cassandra / net / MessageDeliveryTask . java 
 @ @ - 18 , 11 + 18 , 13 @ @ 
 package org . apache . cassandra . net ; 
 
 import java . io . IOException ; 
 + import java . util . Arrays ; 
 + import java . util . Collection ; 
 import java . util . EnumSet ; 
 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 - 
 + import org . apache . cassandra . db . IMutation ; 
 import org . apache . cassandra . db . filter . TombstoneOverwhelmingException ; 
 import org . apache . cassandra . gms . Gossiper ; 
 import org . apache . cassandra . index . IndexNotAvailableException ; 
 @ @ - 43 , 10 + 45 , 11 @ @ public class MessageDeliveryTask implements Runnable 
 
 public void run ( ) 
 { 
 + long timeTaken = System . currentTimeMillis ( ) - message . constructionTime . timestamp ; 
 MessagingService . Verb verb = message . verb ; 
 - if ( MessagingService . DROPPABLE _ VERBS . contains ( verb ) 
 - & & System . currentTimeMillis ( ) > message . constructionTime . timestamp + message . getTimeout ( ) ) 
 + if ( MessagingService . DROPPABLE _ VERBS . contains ( verb ) & & message . getTimeout ( ) > timeTaken ) 
 { 
 + LogDroppedMessageDetails ( timeTaken ) ; 
 MessagingService . instance ( ) . incrementDroppedMessages ( message ) ; 
 return ; 
 } 
 @ @ - 82 , 6 + 85 , 37 @ @ public class MessageDeliveryTask implements Runnable 
 Gossiper . instance . setLastProcessedMessageAt ( message . constructionTime . timestamp ) ; 
 } 
 
 + private void LogDroppedMessageDetails ( long timeTaken ) 
 + { 
 + logger . debug ( " MessageDeliveryTask ran after { } ms , allowed time was { } ms . Dropping message { } " , 
 + timeTaken , message . getTimeout ( ) , message . toString ( ) ) ; 
 + / / Print KS and CF if Payload is mutation or a list of mutations ( sent due to schema announcements ) 
 + IMutation mutation ; 
 + if ( message . payload instanceof IMutation ) 
 + { 
 + mutation = ( IMutation ) message . payload ; 
 + if ( mutation ! = null ) 
 + { 
 + logger . debug ( " MessageDeliveryTask dropped mutation of KS { } , CF { } " , mutation . getKeyspaceName ( ) , Arrays . toString ( mutation . getColumnFamilyIds ( ) . toArray ( ) ) ) ; 
 + } 
 + } 
 + else if ( message . payload instanceof Collection < ? > ) 
 + { 
 + Collection < ? > payloadItems = ( Collection < ? > ) message . payload ; 
 + for ( Object payloadItem : payloadItems ) 
 + { 
 + if ( payloadItem instanceof IMutation ) 
 + { 
 + mutation = ( IMutation ) payloadItem ; 
 + if ( mutation ! = null ) 
 + { 
 + logger . debug ( " MessageDeliveryTask dropped mutation of KS { } , CF { } " , mutation . getKeyspaceName ( ) , Arrays . toString ( mutation . getColumnFamilyIds ( ) . toArray ( ) ) ) ; 
 + } 
 + } 
 + } 
 + } 
 + } 
 + 
 private void handleFailure ( Throwable t ) 
 { 
 if ( message . doCallbackOnFailure ( ) ) 
 @ @ - 95 , 4 + 129 , 4 @ @ public class MessageDeliveryTask implements Runnable 
 private static final EnumSet < MessagingService . Verb > GOSSIP _ VERBS = EnumSet . of ( MessagingService . Verb . GOSSIP _ DIGEST _ ACK , 
 MessagingService . Verb . GOSSIP _ DIGEST _ ACK2 , 
 MessagingService . Verb . GOSSIP _ DIGEST _ SYN ) ; 
 - } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index f161607 . . 1c30cd7 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 1198 , 7 + 1198 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 submitHint ( mutation , endpointsToHint , responseHandler ) ; 
 
 if ( insertLocal ) 
 - performLocally ( stage , mutation : : apply , responseHandler ) ; 
 + performLocally ( stage , mutation , mutation : : apply , responseHandler ) ; 
 
 if ( dcGroups ! = null ) 
 { 
 @ @ - 1286 , 6 + 1286 , 27 @ @ public class StorageProxy implements StorageProxyMBean 
 } ) ; 
 } 
 
 + private static void performLocally ( Stage stage , IMutation mutation , final Runnable runnable , final IAsyncCallbackWithFailure < ? > handler ) 
 + { 
 + StageManager . getStage ( stage ) . maybeExecuteImmediately ( new LocalMutationRunnable ( mutation ) 
 + { 
 + public void runMayThrow ( ) 
 + { 
 + try 
 + { 
 + runnable . run ( ) ; 
 + handler . response ( null ) ; 
 + } 
 + catch ( Exception ex ) 
 + { 
 + if ( ! ( ex instanceof WriteTimeoutException ) ) 
 + logger . error ( " Failed to apply mutation locally : { } " , ex ) ; 
 + handler . onFailure ( FBUtilities . getBroadcastAddress ( ) ) ; 
 + } 
 + } 
 + } ) ; 
 + } 
 + 
 / * * 
 * Handle counter mutation on the coordinator host . 
 * 
 @ @ - 2408 , 11 + 2429 , 28 @ @ public class StorageProxy implements StorageProxyMBean 
 private static abstract class LocalMutationRunnable implements Runnable 
 { 
 private final long constructionTime = System . currentTimeMillis ( ) ; 
 + private IMutation mutation ; 
 + 
 + public LocalMutationRunnable ( IMutation mutation ) 
 + { 
 + this . mutation = mutation ; 
 + } 
 + 
 + public LocalMutationRunnable ( ) 
 + { 
 + } 
 
 public final void run ( ) 
 { 
 - if ( System . currentTimeMillis ( ) > constructionTime + DatabaseDescriptor . getTimeout ( MessagingService . Verb . MUTATION ) ) 
 + long mutationTimeout = DatabaseDescriptor . getTimeout ( MessagingService . Verb . MUTATION ) ; 
 + if ( System . currentTimeMillis ( ) > constructionTime + mutationTimeout ) 
 { 
 + long timeTaken = System . currentTimeMillis ( ) - constructionTime ; 
 + logger . debug ( " LocalMutationRunnable thread ran after { } ms , allowed time was { } ms . " , timeTaken , mutationTimeout ) ; 
 + if ( this . mutation ! = null ) 
 + { 
 + logger . debug ( " MessageDeliveryTask dropped mutation of KS { } , CF { } " , this . mutation . getKeyspaceName ( ) , Arrays . toString ( this . mutation . getColumnFamilyIds ( ) . toArray ( ) ) ) ; 
 + } 
 MessagingService . instance ( ) . incrementDroppedMessages ( MessagingService . Verb . MUTATION ) ; 
 HintRunnable runnable = new HintRunnable ( Collections . singleton ( FBUtilities . getBroadcastAddress ( ) ) ) 
 { 
 @ @ - 2596 , 4 + 2634 , 4 @ @ public class StorageProxy implements StorageProxyMBean 
 public long getReadRepairRepairedBackground ( ) { 
 return ReadRepairMetrics . repairedBackground . getCount ( ) ; 
 } 
 - } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / NEWS . txt b / NEWS . txt 
 index 63d1e58 . . 706cd29 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 42 , 7 + 42 , 7 @ @ Features 
 
 Upgrading 
 - - - - - - - - - 
 - - CQL3 uses to be case - insensitive for property map key in ALTER and CREATE 
 + - CQL3 used to be case - insensitive for property map key in ALTER and CREATE 
 statements . In other words : 
 CREATE KEYSPACE test WITH replication = { ' CLASS ' : ' SimpleStrategy ' , 
 ' REPLICATION _ FACTOR ' : ' 1 ' }
