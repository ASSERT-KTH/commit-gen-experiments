BLEU SCORE: 0.06220117374063391

TEST MSG: 9986 : Remove SliceableUnfilteredRowIterator
GENERATED MSG: merge from 1 . 1

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ReadResponse . java b / src / java / org / apache / cassandra / db / ReadResponse . java <nl> index 41f0d5d . . c114315 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ReadResponse . java <nl> + + + b / src / java / org / apache / cassandra / db / ReadResponse . java <nl> @ @ - 283 , 13 + 283 , 12 @ @ public abstract class ReadResponse <nl> { <nl> ImmutableBTreePartition partition = toReturn . get ( idx + + ) ; <nl> <nl> - <nl> ClusteringIndexFilter filter = command . clusteringIndexFilter ( partition . partitionKey ( ) ) ; <nl> <nl> / / Pre - 3 . 0 , we didn ' t have a way to express exclusivity for non - composite comparators , so all slices were <nl> / / inclusive on both ends . If we have exclusive slice ends , we need to filter the results here . <nl> if ( ! command . metadata ( ) . isCompound ( ) ) <nl> - return filter . filter ( partition . sliceableUnfilteredIterator ( command . columnFilter ( ) , filter . isReversed ( ) ) ) ; <nl> + return partition . unfilteredIterator ( command . columnFilter ( ) , filter . getSlices ( command . metadata ( ) ) , filter . isReversed ( ) ) ; <nl> <nl> return partition . unfilteredIterator ( command . columnFilter ( ) , Slices . ALL , filter . isReversed ( ) ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java <nl> index a1de3d6 . . 9ad9ba3 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java <nl> @ @ - 549 , 7 + 549 , 7 @ @ public class SinglePartitionReadCommand extends ReadCommand <nl> <nl> sstable . incrementReadCount ( ) ; <nl> @ SuppressWarnings ( " resource " ) / / ' iter ' is added to iterators which is closed on exception , or through the closing of the final merged iterator <nl> - UnfilteredRowIterator iter = filter . filter ( sstable . iterator ( partitionKey ( ) , columnFilter ( ) , filter . isReversed ( ) , isForThrift ( ) ) ) ; <nl> + UnfilteredRowIterator iter = sstable . iterator ( partitionKey ( ) , filter . getSlices ( metadata ( ) ) , columnFilter ( ) , filter . isReversed ( ) , isForThrift ( ) ) ; <nl> if ( ! sstable . isRepaired ( ) ) <nl> oldestUnrepairedTombstone = Math . min ( oldestUnrepairedTombstone , sstable . getMinLocalDeletionTime ( ) ) ; <nl> <nl> @ @ - 569 , 7 + 569 , 7 @ @ public class SinglePartitionReadCommand extends ReadCommand <nl> <nl> sstable . incrementReadCount ( ) ; <nl> @ SuppressWarnings ( " resource " ) / / ' iter ' is either closed right away , or added to iterators which is close on exception , or through the closing of the final merged iterator <nl> - UnfilteredRowIterator iter = filter . filter ( sstable . iterator ( partitionKey ( ) , columnFilter ( ) , filter . isReversed ( ) , isForThrift ( ) ) ) ; <nl> + UnfilteredRowIterator iter = sstable . iterator ( partitionKey ( ) , filter . getSlices ( metadata ( ) ) , columnFilter ( ) , filter . isReversed ( ) , isForThrift ( ) ) ; <nl> if ( iter . partitionLevelDeletion ( ) . markedForDeleteAt ( ) > minTimestamp ) <nl> { <nl> iterators . add ( iter ) ; <nl> @ @ - 704 , 7 + 704 , 7 @ @ public class SinglePartitionReadCommand extends ReadCommand <nl> <nl> / / We need to get the partition deletion and include it if it ' s live . In any case though , we ' re done with that sstable . <nl> sstable . incrementReadCount ( ) ; <nl> - try ( UnfilteredRowIterator iter = sstable . iterator ( partitionKey ( ) , columnFilter ( ) , filter . isReversed ( ) , isForThrift ( ) ) ) <nl> + try ( UnfilteredRowIterator iter = sstable . iterator ( partitionKey ( ) , Slices . ALL , columnFilter ( ) , filter . isReversed ( ) , isForThrift ( ) ) ) <nl> { <nl> if ( iter . partitionLevelDeletion ( ) . isLive ( ) ) <nl> { <nl> @ @ - 717 , 7 + 717 , 7 @ @ public class SinglePartitionReadCommand extends ReadCommand <nl> <nl> Tracing . trace ( " Merging data from sstable { } " , sstable . descriptor . generation ) ; <nl> sstable . incrementReadCount ( ) ; <nl> - try ( UnfilteredRowIterator iter = filter . filter ( sstable . iterator ( partitionKey ( ) , columnFilter ( ) , filter . isReversed ( ) , isForThrift ( ) ) ) ) <nl> + try ( UnfilteredRowIterator iter = sstable . iterator ( partitionKey ( ) , filter . getSlices ( metadata ( ) ) , columnFilter ( ) , filter . isReversed ( ) , isForThrift ( ) ) ; ) <nl> { <nl> if ( iter . isEmpty ( ) ) <nl> continue ; <nl> diff - - git a / src / java / org / apache / cassandra / db / Slices . java b / src / java / org / apache / cassandra / db / Slices . java <nl> index 94dea15 . . 13533d6 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Slices . java <nl> + + + b / src / java / org / apache / cassandra / db / Slices . java <nl> @ @ - 141 , 16 + 141 , 6 @ @ public abstract class Slices implements Iterable < Slice > <nl> * / <nl> public abstract boolean intersects ( List < ByteBuffer > minClusteringValues , List < ByteBuffer > maxClusteringValues ) ; <nl> <nl> - / * * <nl> - * Given a sliceable row iterator , returns a row iterator that only return rows selected by the slice of <nl> - * this { @ code Slices } object . <nl> - * <nl> - * @ param iter the sliceable iterator to filter . <nl> - * <nl> - * @ return an iterator that only returns the rows ( or rather Unfiltered ) of { @ code iter } that are selected by those slices . <nl> - * / <nl> - public abstract UnfilteredRowIterator makeSliceIterator ( SliceableUnfilteredRowIterator iter ) ; <nl> - <nl> public abstract String toCQLString ( CFMetaData metadata ) ; <nl> <nl> / * * <nl> @ @ - 452 , 65 + 442 , 6 @ @ public abstract class Slices implements Iterable < Slice > <nl> return false ; <nl> } <nl> <nl> - public UnfilteredRowIterator makeSliceIterator ( final SliceableUnfilteredRowIterator iter ) <nl> - { <nl> - return new WrappingUnfilteredRowIterator ( iter ) <nl> - { <nl> - private int nextSlice = iter . isReverseOrder ( ) ? slices . length - 1 : 0 ; <nl> - private Iterator < Unfiltered > currentSliceIterator = Collections . emptyIterator ( ) ; <nl> - <nl> - private Unfiltered next ; <nl> - <nl> - @ Override <nl> - public boolean hasNext ( ) <nl> - { <nl> - prepareNext ( ) ; <nl> - return next ! = null ; <nl> - } <nl> - <nl> - @ Override <nl> - public Unfiltered next ( ) <nl> - { <nl> - prepareNext ( ) ; <nl> - Unfiltered toReturn = next ; <nl> - next = null ; <nl> - return toReturn ; <nl> - } <nl> - <nl> - private boolean hasMoreSlice ( ) <nl> - { <nl> - return isReverseOrder ( ) <nl> - ? nextSlice > = 0 <nl> - : nextSlice < slices . length ; <nl> - } <nl> - <nl> - private Slice popNextSlice ( ) <nl> - { <nl> - return slices [ isReverseOrder ( ) ? nextSlice - - : nextSlice + + ] ; <nl> - } <nl> - <nl> - private void prepareNext ( ) <nl> - { <nl> - if ( next ! = null ) <nl> - return ; <nl> - <nl> - while ( true ) <nl> - { <nl> - if ( currentSliceIterator . hasNext ( ) ) <nl> - { <nl> - next = currentSliceIterator . next ( ) ; <nl> - return ; <nl> - } <nl> - <nl> - if ( ! hasMoreSlice ( ) ) <nl> - return ; <nl> - <nl> - currentSliceIterator = iter . slice ( popNextSlice ( ) ) ; <nl> - } <nl> - } <nl> - } ; <nl> - } <nl> - <nl> public Iterator < Slice > iterator ( ) <nl> { <nl> return Iterators . forArray ( slices ) ; <nl> @ @ - 803 , 11 + 734 , 6 @ @ public abstract class Slices implements Iterable < Slice > <nl> return true ; <nl> } <nl> <nl> - public UnfilteredRowIterator makeSliceIterator ( SliceableUnfilteredRowIterator iter ) <nl> - { <nl> - return iter ; <nl> - } <nl> - <nl> public Iterator < Slice > iterator ( ) <nl> { <nl> return Iterators . singletonIterator ( Slice . ALL ) ; <nl> @ @ - 883 , 12 + 809 , 6 @ @ public abstract class Slices implements Iterable < Slice > <nl> return false ; <nl> } <nl> <nl> - public UnfilteredRowIterator makeSliceIterator ( SliceableUnfilteredRowIterator iter ) <nl> - { <nl> - return UnfilteredRowIterators . noRowsIterator ( iter . metadata ( ) , iter . partitionKey ( ) , iter . staticRow ( ) , <nl> - iter . partitionLevelDeletion ( ) , iter . isReverseOrder ( ) ) ; <nl> - } <nl> - <nl> public Iterator < Slice > iterator ( ) <nl> { <nl> return Iterators . emptyIterator ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java b / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java <nl> index 8ac3dcb . . 792f5ad 100644 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java <nl> @ @ - 33 , 7 + 33 , 7 @ @ import org . apache . cassandra . io . util . FileDataInput ; <nl> import org . apache . cassandra . io . util . FileMark ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> - abstract class AbstractSSTableIterator implements SliceableUnfilteredRowIterator <nl> + abstract class AbstractSSTableIterator implements UnfilteredRowIterator <nl> { <nl> protected final SSTableReader sstable ; <nl> protected final DecoratedKey key ; <nl> @ @ - 48 , 18 + 48 , 23 @ @ abstract class AbstractSSTableIterator implements SliceableUnfilteredRowIterator <nl> <nl> private boolean isClosed ; <nl> <nl> + protected final Slices slices ; <nl> + protected int slice ; <nl> + <nl> @ SuppressWarnings ( " resource " ) / / We need this because the analysis is not able to determine that we do close <nl> / / file on every path where we created it . <nl> protected AbstractSSTableIterator ( SSTableReader sstable , <nl> FileDataInput file , <nl> DecoratedKey key , <nl> RowIndexEntry indexEntry , <nl> + Slices slices , <nl> ColumnFilter columnFilter , <nl> boolean isForThrift ) <nl> { <nl> this . sstable = sstable ; <nl> this . key = key ; <nl> this . columns = columnFilter ; <nl> + this . slices = slices ; <nl> this . helper = new SerializationHelper ( sstable . metadata , sstable . descriptor . version . correspondingMessagingVersion ( ) , SerializationHelper . Flag . LOCAL , columnFilter ) ; <nl> this . isForThrift = isForThrift ; <nl> <nl> @ @ - 109 , 6 + 114 , 9 @ @ abstract class AbstractSSTableIterator implements SliceableUnfilteredRowIterator <nl> this . reader = needsReader ? createReader ( indexEntry , file , shouldCloseFile ) : null ; <nl> } <nl> <nl> + if ( reader ! = null & & slices . size ( ) > 0 ) <nl> + reader . setForSlice ( slices . get ( 0 ) ) ; <nl> + <nl> if ( reader = = null & & file ! = null & & shouldCloseFile ) <nl> file . close ( ) ; <nl> } <nl> @ @ - 216 , 7 + 224 , 19 @ @ abstract class AbstractSSTableIterator implements SliceableUnfilteredRowIterator <nl> <nl> public boolean hasNext ( ) <nl> { <nl> - return reader ! = null & & reader . hasNext ( ) ; <nl> + while ( true ) <nl> + { <nl> + if ( reader = = null ) <nl> + return false ; <nl> + <nl> + if ( reader . hasNext ( ) ) <nl> + return true ; <nl> + <nl> + if ( + + slice > = slices . size ( ) ) <nl> + return false ; <nl> + <nl> + slice ( slices . get ( slice ) ) ; <nl> + } <nl> } <nl> <nl> public Unfiltered next ( ) <nl> @ @ - 225 , 15 + 245 , 12 @ @ abstract class AbstractSSTableIterator implements SliceableUnfilteredRowIterator <nl> return reader . next ( ) ; <nl> } <nl> <nl> - public Iterator < Unfiltered > slice ( Slice slice ) <nl> + private void slice ( Slice slice ) <nl> { <nl> try <nl> { <nl> - if ( reader = = null ) <nl> - return Collections . emptyIterator ( ) ; <nl> - <nl> - reader . setForSlice ( slice ) ; <nl> - return reader ; <nl> + if ( reader ! = null ) <nl> + reader . setForSlice ( slice ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableIterator . java <nl> index 0409310 . . 302fc24 100644 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableIterator . java <nl> @ @ - 31 , 19 + 31 , 15 @ @ import org . apache . cassandra . io . util . FileDataInput ; <nl> * / <nl> public class SSTableIterator extends AbstractSSTableIterator <nl> { <nl> - public SSTableIterator ( SSTableReader sstable , DecoratedKey key , ColumnFilter columns , boolean isForThrift ) <nl> - { <nl> - this ( sstable , null , key , sstable . getPosition ( key , SSTableReader . Operator . EQ ) , columns , isForThrift ) ; <nl> - } <nl> - <nl> public SSTableIterator ( SSTableReader sstable , <nl> FileDataInput file , <nl> DecoratedKey key , <nl> RowIndexEntry indexEntry , <nl> + Slices slices , <nl> ColumnFilter columns , <nl> boolean isForThrift ) <nl> { <nl> - super ( sstable , file , key , indexEntry , columns , isForThrift ) ; <nl> + super ( sstable , file , key , indexEntry , slices , columns , isForThrift ) ; <nl> } <nl> <nl> protected Reader createReader ( RowIndexEntry indexEntry , FileDataInput file , boolean shouldCloseFile ) <nl> diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableReversedIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableReversedIterator . java <nl> index 14cec36 . . ba5acf5 100644 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableReversedIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableReversedIterator . java <nl> @ @ - 34 , 19 + 34 , 15 @ @ import org . apache . cassandra . utils . btree . BTree ; <nl> * / <nl> public class SSTableReversedIterator extends AbstractSSTableIterator <nl> { <nl> - public SSTableReversedIterator ( SSTableReader sstable , DecoratedKey key , ColumnFilter columns , boolean isForThrift ) <nl> - { <nl> - this ( sstable , null , key , sstable . getPosition ( key , SSTableReader . Operator . EQ ) , columns , isForThrift ) ; <nl> - } <nl> - <nl> public SSTableReversedIterator ( SSTableReader sstable , <nl> FileDataInput file , <nl> DecoratedKey key , <nl> RowIndexEntry indexEntry , <nl> + Slices slices , <nl> ColumnFilter columns , <nl> boolean isForThrift ) <nl> { <nl> - super ( sstable , file , key , indexEntry , columns , isForThrift ) ; <nl> + super ( sstable , file , key , indexEntry , slices , columns , isForThrift ) ; <nl> } <nl> <nl> protected Reader createReader ( RowIndexEntry indexEntry , FileDataInput file , boolean shouldCloseFile ) <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / ClusteringIndexFilter . java b / src / java / org / apache / cassandra / db / filter / ClusteringIndexFilter . java <nl> index e3f824f . . d1907b1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / ClusteringIndexFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / ClusteringIndexFilter . java <nl> @ @ - 128 , 14 + 128 , 7 @ @ public interface ClusteringIndexFilter <nl> * / <nl> public UnfilteredRowIterator filterNotIndexed ( ColumnFilter columnFilter , UnfilteredRowIterator iterator ) ; <nl> <nl> - / * * <nl> - * Returns an iterator that only returns the rows of the provided sliceable iterator that this filter selects . <nl> - * <nl> - * @ param iterator the sliceable iterator for which we should filter rows . <nl> - * <nl> - * @ return an iterator that only returns the rows ( or rather unfiltered ) from { @ code iterator } that are selected by this filter . <nl> - * / <nl> - public UnfilteredRowIterator filter ( SliceableUnfilteredRowIterator iterator ) ; <nl> + public Slices getSlices ( CFMetaData metadata ) ; <nl> <nl> / * * <nl> * Given a partition , returns a row iterator for the rows of this partition that are selected by this filter . <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java b / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java <nl> index 17cd802 . . 6a010d9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java <nl> @ @ - 126 , 52 + 126 , 12 @ @ public class ClusteringIndexNamesFilter extends AbstractClusteringIndexFilter <nl> return Transformation . apply ( iterator , new FilterNotIndexed ( ) ) ; <nl> } <nl> <nl> - public UnfilteredRowIterator filter ( final SliceableUnfilteredRowIterator iter ) <nl> + public Slices getSlices ( CFMetaData metadata ) <nl> { <nl> - / / Please note that this method assumes that rows from ' iter ' already have their columns filtered , i . e . that <nl> - / / they only include columns that we select . <nl> - return new WrappingUnfilteredRowIterator ( iter ) <nl> - { <nl> - private final Iterator < Clustering > clusteringIter = clusteringsInQueryOrder . iterator ( ) ; <nl> - private Iterator < Unfiltered > currentClustering ; <nl> - private Unfiltered next ; <nl> - <nl> - @ Override <nl> - public boolean hasNext ( ) <nl> - { <nl> - if ( next ! = null ) <nl> - return true ; <nl> - <nl> - if ( currentClustering ! = null & & currentClustering . hasNext ( ) ) <nl> - { <nl> - next = currentClustering . next ( ) ; <nl> - return true ; <nl> - } <nl> - <nl> - while ( clusteringIter . hasNext ( ) ) <nl> - { <nl> - Clustering nextClustering = clusteringIter . next ( ) ; <nl> - currentClustering = iter . slice ( Slice . make ( nextClustering ) ) ; <nl> - if ( currentClustering . hasNext ( ) ) <nl> - { <nl> - next = currentClustering . next ( ) ; <nl> - return true ; <nl> - } <nl> - } <nl> - return false ; <nl> - } <nl> - <nl> - @ Override <nl> - public Unfiltered next ( ) <nl> - { <nl> - if ( next = = null & & ! hasNext ( ) ) <nl> - throw new NoSuchElementException ( ) ; <nl> - <nl> - Unfiltered toReturn = next ; <nl> - next = null ; <nl> - return toReturn ; <nl> - } <nl> - } ; <nl> + Slices . Builder builder = new Slices . Builder ( metadata . comparator , clusteringsInQueryOrder . size ( ) ) ; <nl> + for ( Clustering clustering : clusteringsInQueryOrder ) <nl> + builder . add ( Slice . make ( clustering ) ) ; <nl> + return builder . build ( ) ; <nl> } <nl> <nl> public UnfilteredRowIterator getUnfilteredRowIterator ( final ColumnFilter columnFilter , final Partition partition ) <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / ClusteringIndexSliceFilter . java b / src / java / org / apache / cassandra / db / filter / ClusteringIndexSliceFilter . java <nl> index 7a174ee . . ba30dcf 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / ClusteringIndexSliceFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / ClusteringIndexSliceFilter . java <nl> @ @ - 114 , 11 + 114 , 9 @ @ public class ClusteringIndexSliceFilter extends AbstractClusteringIndexFilter <nl> return Transformation . apply ( iterator , new FilterNotIndexed ( ) ) ; <nl> } <nl> <nl> - public UnfilteredRowIterator filter ( SliceableUnfilteredRowIterator iterator ) <nl> + public Slices getSlices ( CFMetaData metadata ) <nl> { <nl> - / / Please note that this method assumes that rows from ' iter ' already have their columns filtered , i . e . that <nl> - / / they only include columns that we select . <nl> - return slices . makeSliceIterator ( iterator ) ; <nl> + return slices ; <nl> } <nl> <nl> public UnfilteredRowIterator getUnfilteredRowIterator ( ColumnFilter columnFilter , Partition partition ) <nl> diff - - git a / src / java / org / apache / cassandra / db / partitions / AbstractBTreePartition . java b / src / java / org / apache / cassandra / db / partitions / AbstractBTreePartition . java <nl> index b7fa691 . . e44124f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / partitions / AbstractBTreePartition . java <nl> + + + b / src / java / org / apache / cassandra / db / partitions / AbstractBTreePartition . java <nl> @ @ - 282 , 40 + 282 , 6 @ @ public abstract class AbstractBTreePartition implements Partition , Iterable < Row > <nl> } <nl> } <nl> <nl> - public class SliceableIterator extends AbstractIterator implements SliceableUnfilteredRowIterator <nl> - { <nl> - private Iterator < Unfiltered > iterator ; <nl> - <nl> - protected SliceableIterator ( ColumnFilter selection , boolean isReversed ) <nl> - { <nl> - super ( selection , isReversed ) ; <nl> - } <nl> - <nl> - protected Unfiltered computeNext ( ) <nl> - { <nl> - if ( iterator = = null ) <nl> - iterator = unfilteredIterator ( selection , Slices . ALL , isReverseOrder ) ; <nl> - if ( ! iterator . hasNext ( ) ) <nl> - return endOfData ( ) ; <nl> - return iterator . next ( ) ; <nl> - } <nl> - <nl> - public Iterator < Unfiltered > slice ( Slice slice ) <nl> - { <nl> - return sliceIterator ( selection , slice , isReverseOrder , current , staticRow ) ; <nl> - } <nl> - } <nl> - <nl> - public SliceableUnfilteredRowIterator sliceableUnfilteredIterator ( ColumnFilter columns , boolean reversed ) <nl> - { <nl> - return new SliceableIterator ( columns , reversed ) ; <nl> - } <nl> - <nl> - protected SliceableUnfilteredRowIterator sliceableUnfilteredIterator ( ) <nl> - { <nl> - return sliceableUnfilteredIterator ( ColumnFilter . all ( metadata ) , false ) ; <nl> - } <nl> - <nl> protected static Holder build ( UnfilteredRowIterator iterator , int initialRowCapacity ) <nl> { <nl> CFMetaData metadata = iterator . metadata ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java b / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java <nl> index 02369e4 . . 9f6e900 100644 <nl> - - - a / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java <nl> + + + b / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java <nl> @ @ - 438 , 13 + 438 , 6 @ @ public class PartitionUpdate extends AbstractBTreePartition <nl> return super . iterator ( ) ; <nl> } <nl> <nl> - @ Override <nl> - public SliceableUnfilteredRowIterator sliceableUnfilteredIterator ( ColumnFilter columns , boolean reversed ) <nl> - { <nl> - maybeBuild ( ) ; <nl> - return super . sliceableUnfilteredIterator ( columns , reversed ) ; <nl> - } <nl> - <nl> / * * <nl> * Validates the data contained in this update . <nl> * <nl> @ @ - 625 , 7 + 618 , 7 @ @ public class PartitionUpdate extends AbstractBTreePartition <nl> { <nl> public void serialize ( PartitionUpdate update , DataOutputPlus out , int version ) throws IOException <nl> { <nl> - try ( UnfilteredRowIterator iter = update . sliceableUnfilteredIterator ( ) ) <nl> + try ( UnfilteredRowIterator iter = update . unfilteredIterator ( ) ) <nl> { <nl> assert ! iter . isReverseOrder ( ) ; <nl> <nl> @ @ - 714 , 7 + 707 , 7 @ @ public class PartitionUpdate extends AbstractBTreePartition <nl> <nl> public long serializedSize ( PartitionUpdate update , int version ) <nl> { <nl> - try ( UnfilteredRowIterator iter = update . sliceableUnfilteredIterator ( ) ) <nl> + try ( UnfilteredRowIterator iter = update . unfilteredIterator ( ) ) <nl> { <nl> if ( version < MessagingService . VERSION _ 30 ) <nl> return LegacyLayout . serializedSizeAsLegacyPartition ( iter , version ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / rows / SliceableUnfilteredRowIterator . java b / src / java / org / apache / cassandra / db / rows / SliceableUnfilteredRowIterator . java <nl> deleted file mode 100644 <nl> index 2250ee9 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / db / rows / SliceableUnfilteredRowIterator . java <nl> + + + / dev / null <nl> @ @ - 1 , 39 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . db . rows ; <nl> - <nl> - import java . util . Iterator ; <nl> - <nl> - import org . apache . cassandra . db . Slice ; <nl> - <nl> - public interface SliceableUnfilteredRowIterator extends UnfilteredRowIterator <nl> - { <nl> - / * * <nl> - * Move forward ( resp . backward if isReverseOrder ( ) is true for the iterator ) in <nl> - * the iterator and return an iterator over the Unfiltered selected by the provided <nl> - * { @ code slice } . <nl> - * < p > <nl> - * Please note that successive calls to { @ code slice } are allowed provided the <nl> - * slice are non overlapping and are passed in clustering ( resp . reverse clustering ) order . <nl> - * However , { @ code slice } is allowed to leave the iterator in an unknown state and there <nl> - * is no guarantee over what a call to { @ code hasNext } or { @ code next } will yield after <nl> - * a call to { @ code slice } . In other words , for a given iterator , you should either use <nl> - * { @ code slice } or { @ code hasNext / next } but not both . <nl> - * / <nl> - public Iterator < Unfiltered > slice ( Slice slice ) ; <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> index 9e9b98a . . 550b1a0 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> @ @ - 46 , 7 + 46 , 7 @ @ import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . commitlog . ReplayPosition ; <nl> import org . apache . cassandra . db . filter . ColumnFilter ; <nl> - import org . apache . cassandra . db . rows . SliceableUnfilteredRowIterator ; <nl> + import org . apache . cassandra . db . rows . UnfilteredRowIterator ; <nl> import org . apache . cassandra . dht . AbstractBounds ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . dht . Token ; <nl> @ @ - 1587 , 8 + 1587 , 8 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> * / <nl> protected abstract RowIndexEntry getPosition ( PartitionPosition key , Operator op , boolean updateCacheAndStats , boolean permitMatchPastLast ) ; <nl> <nl> - public abstract SliceableUnfilteredRowIterator iterator ( DecoratedKey key , ColumnFilter selectedColumns , boolean reversed , boolean isForThrift ) ; <nl> - public abstract SliceableUnfilteredRowIterator iterator ( FileDataInput file , DecoratedKey key , RowIndexEntry indexEntry , ColumnFilter selectedColumns , boolean reversed , boolean isForThrift ) ; <nl> + public abstract UnfilteredRowIterator iterator ( DecoratedKey key , Slices slices , ColumnFilter selectedColumns , boolean reversed , boolean isForThrift ) ; <nl> + public abstract UnfilteredRowIterator iterator ( FileDataInput file , DecoratedKey key , RowIndexEntry indexEntry , Slices slices , ColumnFilter selectedColumns , boolean reversed , boolean isForThrift ) ; <nl> <nl> / * * <nl> * Finds and returns the first key beyond a given token in this SSTable or null if no such key exists . <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableReader . java b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableReader . java <nl> index c16018a . . 7abf728 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableReader . java <nl> @ @ - 21 , 10 + 21 , 12 @ @ import com . google . common . util . concurrent . RateLimiter ; <nl> import org . apache . cassandra . cache . KeyCacheKey ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . db . * ; <nl> - import org . apache . cassandra . db . rows . SliceableUnfilteredRowIterator ; <nl> import org . apache . cassandra . db . filter . ColumnFilter ; <nl> import org . apache . cassandra . db . columniterator . SSTableIterator ; <nl> import org . apache . cassandra . db . columniterator . SSTableReversedIterator ; <nl> + import org . apache . cassandra . db . rows . Rows ; <nl> + import org . apache . cassandra . db . rows . UnfilteredRowIterator ; <nl> + import org . apache . cassandra . db . rows . UnfilteredRowIterators ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . dht . Token ; <nl> @ @ - 57 , 18 + 59 , 19 @ @ public class BigTableReader extends SSTableReader <nl> super ( desc , components , metadata , maxDataAge , sstableMetadata , openReason , header ) ; <nl> } <nl> <nl> - public SliceableUnfilteredRowIterator iterator ( DecoratedKey key , ColumnFilter selectedColumns , boolean reversed , boolean isForThrift ) <nl> + public UnfilteredRowIterator iterator ( DecoratedKey key , Slices slices , ColumnFilter selectedColumns , boolean reversed , boolean isForThrift ) <nl> { <nl> - return reversed <nl> - ? new SSTableReversedIterator ( this , key , selectedColumns , isForThrift ) <nl> - : new SSTableIterator ( this , key , selectedColumns , isForThrift ) ; <nl> + RowIndexEntry rie = getPosition ( key , SSTableReader . Operator . EQ ) ; <nl> + return iterator ( null , key , rie , slices , selectedColumns , reversed , isForThrift ) ; <nl> } <nl> <nl> - public SliceableUnfilteredRowIterator iterator ( FileDataInput file , DecoratedKey key , RowIndexEntry indexEntry , ColumnFilter selectedColumns , boolean reversed , boolean isForThrift ) <nl> + public UnfilteredRowIterator iterator ( FileDataInput file , DecoratedKey key , RowIndexEntry indexEntry , Slices slices , ColumnFilter selectedColumns , boolean reversed , boolean isForThrift ) <nl> { <nl> + if ( indexEntry = = null ) <nl> + return UnfilteredRowIterators . noRowsIterator ( metadata , key , Rows . EMPTY _ STATIC _ ROW , DeletionTime . LIVE , reversed ) ; <nl> return reversed <nl> - ? new SSTableReversedIterator ( this , file , key , indexEntry , selectedColumns , isForThrift ) <nl> - : new SSTableIterator ( this , file , key , indexEntry , selectedColumns , isForThrift ) ; <nl> + ? new SSTableReversedIterator ( this , file , key , indexEntry , slices , selectedColumns , isForThrift ) <nl> + : new SSTableIterator ( this , file , key , indexEntry , slices , selectedColumns , isForThrift ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java <nl> index fd413fd . . 0ce045a 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java <nl> @ @ - 330 , 7 + 330 , 7 @ @ public class BigTableScanner implements ISSTableScanner <nl> } <nl> <nl> ClusteringIndexFilter filter = dataRange . clusteringIndexFilter ( partitionKey ( ) ) ; <nl> - return filter . filter ( sstable . iterator ( dfile , partitionKey ( ) , currentEntry , columns , filter . isReversed ( ) , isForThrift ) ) ; <nl> + return sstable . iterator ( dfile , partitionKey ( ) , currentEntry , filter . getSlices ( BigTableScanner . this . metadata ( ) ) , columns , filter . isReversed ( ) , isForThrift ) ; <nl> } <nl> catch ( CorruptSSTableException | IOException e ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / db / partition / PartitionImplementationTest . java b / test / unit / org / apache / cassandra / db / partition / PartitionImplementationTest . java <nl> index f215331 . . fe6ac1e 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / partition / PartitionImplementationTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / partition / PartitionImplementationTest . java <nl> @ @ - 314 , 10 + 314 , 10 @ @ public class PartitionImplementationTest <nl> testSearchIterator ( sortedContent , partition , cf , true ) ; <nl> <nl> / / sliceable iter <nl> - testSliceableIterator ( sortedContent , partition , ColumnFilter . all ( cfm ) , false ) ; <nl> - testSliceableIterator ( sortedContent , partition , cf , false ) ; <nl> - testSliceableIterator ( sortedContent , partition , ColumnFilter . all ( cfm ) , true ) ; <nl> - testSliceableIterator ( sortedContent , partition , cf , true ) ; <nl> + testSlicingOfIterators ( sortedContent , partition , ColumnFilter . all ( cfm ) , false ) ; <nl> + testSlicingOfIterators ( sortedContent , partition , cf , false ) ; <nl> + testSlicingOfIterators ( sortedContent , partition , ColumnFilter . all ( cfm ) , true ) ; <nl> + testSlicingOfIterators ( sortedContent , partition , cf , true ) ; <nl> } <nl> <nl> void testSearchIterator ( NavigableSet < Clusterable > sortedContent , Partition partition , ColumnFilter cf , boolean reversed ) <nl> @ @ - 361 , 23 + 361 , 30 @ @ public class PartitionImplementationTest <nl> return builder . build ( ) ; <nl> } <nl> <nl> - void testSliceableIterator ( NavigableSet < Clusterable > sortedContent , AbstractBTreePartition partition , ColumnFilter cf , boolean reversed ) <nl> + void testSlicingOfIterators ( NavigableSet < Clusterable > sortedContent , AbstractBTreePartition partition , ColumnFilter cf , boolean reversed ) <nl> { <nl> Function < ? super Clusterable , ? extends Clusterable > colFilter = x - > x instanceof Row ? ( ( Row ) x ) . filter ( cf , cfm ) : x ; <nl> Slices slices = makeSlices ( ) ; <nl> - try ( SliceableUnfilteredRowIterator sliceableIter = partition . sliceableUnfilteredIterator ( cf , reversed ) ) <nl> + <nl> + / / fetch each slice in turn <nl> + for ( Slice slice : ( Iterable < Slice > ) ( ) - > directed ( slices , reversed ) ) <nl> { <nl> - for ( Slice slice : ( Iterable < Slice > ) ( ) - > directed ( slices , reversed ) ) <nl> + try ( UnfilteredRowIterator slicedIter = partition . unfilteredIterator ( cf , Slices . with ( cfm . comparator , slice ) , reversed ) ) <nl> + { <nl> assertIteratorsEqual ( streamOf ( directed ( slice ( sortedContent , slice ) , reversed ) ) . map ( colFilter ) . iterator ( ) , <nl> - sliceableIter . slice ( slice ) ) ; <nl> + slicedIter ) ; <nl> + } <nl> } <nl> <nl> - / / Try using sliceable as unfiltered iterator <nl> - try ( SliceableUnfilteredRowIterator sliceableIter = partition . sliceableUnfilteredIterator ( cf , reversed ) ) <nl> + / / Fetch all slices at once <nl> + try ( UnfilteredRowIterator slicedIter = partition . unfilteredIterator ( cf , slices , reversed ) ) <nl> { <nl> - assertIteratorsEqual ( ( reversed ? sortedContent . descendingSet ( ) : sortedContent ) . <nl> - stream ( ) . map ( colFilter ) . iterator ( ) , <nl> - sliceableIter ) ; <nl> + List < Iterator < ? extends Clusterable > > slicelist = new ArrayList < > ( ) ; <nl> + slices . forEach ( slice - > slicelist . add ( directed ( slice ( sortedContent , slice ) , reversed ) ) ) ; <nl> + if ( reversed ) <nl> + Collections . reverse ( slicelist ) ; <nl> + <nl> + assertIteratorsEqual ( Iterators . concat ( slicelist . toArray ( new Iterator [ 0 ] ) ) , slicedIter ) ; <nl> } <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java <nl> index 00727b8 . . 7ea2463 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java <nl> @ @ - 44 , 9 + 44 , 10 @ @ import org . apache . cassandra . cql3 . UntypedResultSet ; <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . DeletionTime ; <nl> import org . apache . cassandra . db . Keyspace ; <nl> - import org . apache . cassandra . db . rows . SliceableUnfilteredRowIterator ; <nl> + import org . apache . cassandra . db . Slices ; <nl> import org . apache . cassandra . db . filter . ColumnFilter ; <nl> import org . apache . cassandra . db . marshal . BytesType ; <nl> + import org . apache . cassandra . db . rows . UnfilteredRowIterator ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . dht . Token ; <nl> @ @ - 174 , 7 + 175 , 7 @ @ public class LegacySSTableTest <nl> { <nl> ByteBuffer key = bytes ( keystring ) ; <nl> <nl> - SliceableUnfilteredRowIterator iter = sstable . iterator ( Util . dk ( key ) , ColumnFilter . selectionBuilder ( ) . add ( cfs . metadata . getColumnDefinition ( bytes ( " name " ) ) ) . build ( ) , false , false ) ; <nl> + UnfilteredRowIterator iter = sstable . iterator ( Util . dk ( key ) , Slices . ALL , ColumnFilter . selectionBuilder ( ) . add ( cfs . metadata . getColumnDefinition ( bytes ( " name " ) ) ) . build ( ) , false , false ) ; <nl> <nl> / / check not deleted ( CASSANDRA - 6527 ) <nl> assert iter . partitionLevelDeletion ( ) . equals ( DeletionTime . LIVE ) ; <nl> @ @ - 215 , 7 + 216 , 7 @ @ public class LegacySSTableTest <nl> <nl> ByteBuffer key = bytes ( keystring ) ; <nl> <nl> - SliceableUnfilteredRowIterator iter = reader . iterator ( Util . dk ( key ) , ColumnFilter . selection ( cfs . metadata . partitionColumns ( ) ) , false , false ) ; <nl> + UnfilteredRowIterator iter = reader . iterator ( Util . dk ( key ) , Slices . ALL , ColumnFilter . selection ( cfs . metadata . partitionColumns ( ) ) , false , false ) ; <nl> <nl> / / check not deleted ( CASSANDRA - 6527 ) <nl> assert iter . partitionLevelDeletion ( ) . equals ( DeletionTime . LIVE ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / format / ClientModeSSTableTest . java b / test / unit / org / apache / cassandra / io / sstable / format / ClientModeSSTableTest . java <nl> index 661fcd5 . . 6b0427b 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / format / ClientModeSSTableTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / format / ClientModeSSTableTest . java <nl> @ @ - 29 , 15 + 29 , 13 @ @ import org . junit . Test ; <nl> import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . Config ; <nl> + import org . apache . cassandra . db . Slices ; <nl> import org . apache . cassandra . db . filter . ColumnFilter ; <nl> import org . apache . cassandra . db . marshal . BytesType ; <nl> - import org . apache . cassandra . db . rows . SliceableUnfilteredRowIterator ; <nl> + import org . apache . cassandra . db . rows . UnfilteredRowIterator ; <nl> import org . apache . cassandra . dht . ByteOrderedPartitioner ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . io . sstable . Descriptor ; <nl> - import org . apache . cassandra . io . sstable . format . SSTableFormat ; <nl> - import org . apache . cassandra . io . sstable . format . SSTableReader ; <nl> - import org . apache . cassandra . io . sstable . format . Version ; <nl> <nl> / * * <nl> * Tests backwards compatibility for SSTables <nl> @ @ - 107 , 7 + 105 , 7 @ @ public class ClientModeSSTableTest <nl> <nl> ByteBuffer key = bytes ( Integer . toString ( 100 ) ) ; <nl> <nl> - try ( SliceableUnfilteredRowIterator iter = reader . iterator ( metadata . decorateKey ( key ) , ColumnFilter . selection ( metadata . partitionColumns ( ) ) , false , false ) ) <nl> + try ( UnfilteredRowIterator iter = reader . iterator ( metadata . decorateKey ( key ) , Slices . ALL , ColumnFilter . selection ( metadata . partitionColumns ( ) ) , false , false ) ) <nl> { <nl> assert iter . next ( ) . clustering ( ) . get ( 0 ) . equals ( key ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / HintedHandOffManager . java b / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> index a83fbab . . e2dc046 100644 <nl> - - - a / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> + + + b / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> @ @ - 391 , 7 + 391 , 9 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean <nl> { <nl> Token < ? > token = StorageService . getPartitioner ( ) . getTokenFactory ( ) . fromByteArray ( row . key . key ) ; <nl> InetAddress target = StorageService . instance . getTokenMetadata ( ) . getEndpoint ( token ) ; <nl> - scheduleHintDelivery ( target ) ; <nl> + / / token may have since been removed ( in which case we have just read back a tombstone ) <nl> + if ( target ! = null ) <nl> + scheduleHintDelivery ( target ) ; <nl> } <nl> <nl> if ( logger _ . isDebugEnabled ( ) )

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ReadResponse . java b / src / java / org / apache / cassandra / db / ReadResponse . java 
 index 41f0d5d . . c114315 100644 
 - - - a / src / java / org / apache / cassandra / db / ReadResponse . java 
 + + + b / src / java / org / apache / cassandra / db / ReadResponse . java 
 @ @ - 283 , 13 + 283 , 12 @ @ public abstract class ReadResponse 
 { 
 ImmutableBTreePartition partition = toReturn . get ( idx + + ) ; 
 
 - 
 ClusteringIndexFilter filter = command . clusteringIndexFilter ( partition . partitionKey ( ) ) ; 
 
 / / Pre - 3 . 0 , we didn ' t have a way to express exclusivity for non - composite comparators , so all slices were 
 / / inclusive on both ends . If we have exclusive slice ends , we need to filter the results here . 
 if ( ! command . metadata ( ) . isCompound ( ) ) 
 - return filter . filter ( partition . sliceableUnfilteredIterator ( command . columnFilter ( ) , filter . isReversed ( ) ) ) ; 
 + return partition . unfilteredIterator ( command . columnFilter ( ) , filter . getSlices ( command . metadata ( ) ) , filter . isReversed ( ) ) ; 
 
 return partition . unfilteredIterator ( command . columnFilter ( ) , Slices . ALL , filter . isReversed ( ) ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java 
 index a1de3d6 . . 9ad9ba3 100644 
 - - - a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java 
 + + + b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java 
 @ @ - 549 , 7 + 549 , 7 @ @ public class SinglePartitionReadCommand extends ReadCommand 
 
 sstable . incrementReadCount ( ) ; 
 @ SuppressWarnings ( " resource " ) / / ' iter ' is added to iterators which is closed on exception , or through the closing of the final merged iterator 
 - UnfilteredRowIterator iter = filter . filter ( sstable . iterator ( partitionKey ( ) , columnFilter ( ) , filter . isReversed ( ) , isForThrift ( ) ) ) ; 
 + UnfilteredRowIterator iter = sstable . iterator ( partitionKey ( ) , filter . getSlices ( metadata ( ) ) , columnFilter ( ) , filter . isReversed ( ) , isForThrift ( ) ) ; 
 if ( ! sstable . isRepaired ( ) ) 
 oldestUnrepairedTombstone = Math . min ( oldestUnrepairedTombstone , sstable . getMinLocalDeletionTime ( ) ) ; 
 
 @ @ - 569 , 7 + 569 , 7 @ @ public class SinglePartitionReadCommand extends ReadCommand 
 
 sstable . incrementReadCount ( ) ; 
 @ SuppressWarnings ( " resource " ) / / ' iter ' is either closed right away , or added to iterators which is close on exception , or through the closing of the final merged iterator 
 - UnfilteredRowIterator iter = filter . filter ( sstable . iterator ( partitionKey ( ) , columnFilter ( ) , filter . isReversed ( ) , isForThrift ( ) ) ) ; 
 + UnfilteredRowIterator iter = sstable . iterator ( partitionKey ( ) , filter . getSlices ( metadata ( ) ) , columnFilter ( ) , filter . isReversed ( ) , isForThrift ( ) ) ; 
 if ( iter . partitionLevelDeletion ( ) . markedForDeleteAt ( ) > minTimestamp ) 
 { 
 iterators . add ( iter ) ; 
 @ @ - 704 , 7 + 704 , 7 @ @ public class SinglePartitionReadCommand extends ReadCommand 
 
 / / We need to get the partition deletion and include it if it ' s live . In any case though , we ' re done with that sstable . 
 sstable . incrementReadCount ( ) ; 
 - try ( UnfilteredRowIterator iter = sstable . iterator ( partitionKey ( ) , columnFilter ( ) , filter . isReversed ( ) , isForThrift ( ) ) ) 
 + try ( UnfilteredRowIterator iter = sstable . iterator ( partitionKey ( ) , Slices . ALL , columnFilter ( ) , filter . isReversed ( ) , isForThrift ( ) ) ) 
 { 
 if ( iter . partitionLevelDeletion ( ) . isLive ( ) ) 
 { 
 @ @ - 717 , 7 + 717 , 7 @ @ public class SinglePartitionReadCommand extends ReadCommand 
 
 Tracing . trace ( " Merging data from sstable { } " , sstable . descriptor . generation ) ; 
 sstable . incrementReadCount ( ) ; 
 - try ( UnfilteredRowIterator iter = filter . filter ( sstable . iterator ( partitionKey ( ) , columnFilter ( ) , filter . isReversed ( ) , isForThrift ( ) ) ) ) 
 + try ( UnfilteredRowIterator iter = sstable . iterator ( partitionKey ( ) , filter . getSlices ( metadata ( ) ) , columnFilter ( ) , filter . isReversed ( ) , isForThrift ( ) ) ; ) 
 { 
 if ( iter . isEmpty ( ) ) 
 continue ; 
 diff - - git a / src / java / org / apache / cassandra / db / Slices . java b / src / java / org / apache / cassandra / db / Slices . java 
 index 94dea15 . . 13533d6 100644 
 - - - a / src / java / org / apache / cassandra / db / Slices . java 
 + + + b / src / java / org / apache / cassandra / db / Slices . java 
 @ @ - 141 , 16 + 141 , 6 @ @ public abstract class Slices implements Iterable < Slice > 
 * / 
 public abstract boolean intersects ( List < ByteBuffer > minClusteringValues , List < ByteBuffer > maxClusteringValues ) ; 
 
 - / * * 
 - * Given a sliceable row iterator , returns a row iterator that only return rows selected by the slice of 
 - * this { @ code Slices } object . 
 - * 
 - * @ param iter the sliceable iterator to filter . 
 - * 
 - * @ return an iterator that only returns the rows ( or rather Unfiltered ) of { @ code iter } that are selected by those slices . 
 - * / 
 - public abstract UnfilteredRowIterator makeSliceIterator ( SliceableUnfilteredRowIterator iter ) ; 
 - 
 public abstract String toCQLString ( CFMetaData metadata ) ; 
 
 / * * 
 @ @ - 452 , 65 + 442 , 6 @ @ public abstract class Slices implements Iterable < Slice > 
 return false ; 
 } 
 
 - public UnfilteredRowIterator makeSliceIterator ( final SliceableUnfilteredRowIterator iter ) 
 - { 
 - return new WrappingUnfilteredRowIterator ( iter ) 
 - { 
 - private int nextSlice = iter . isReverseOrder ( ) ? slices . length - 1 : 0 ; 
 - private Iterator < Unfiltered > currentSliceIterator = Collections . emptyIterator ( ) ; 
 - 
 - private Unfiltered next ; 
 - 
 - @ Override 
 - public boolean hasNext ( ) 
 - { 
 - prepareNext ( ) ; 
 - return next ! = null ; 
 - } 
 - 
 - @ Override 
 - public Unfiltered next ( ) 
 - { 
 - prepareNext ( ) ; 
 - Unfiltered toReturn = next ; 
 - next = null ; 
 - return toReturn ; 
 - } 
 - 
 - private boolean hasMoreSlice ( ) 
 - { 
 - return isReverseOrder ( ) 
 - ? nextSlice > = 0 
 - : nextSlice < slices . length ; 
 - } 
 - 
 - private Slice popNextSlice ( ) 
 - { 
 - return slices [ isReverseOrder ( ) ? nextSlice - - : nextSlice + + ] ; 
 - } 
 - 
 - private void prepareNext ( ) 
 - { 
 - if ( next ! = null ) 
 - return ; 
 - 
 - while ( true ) 
 - { 
 - if ( currentSliceIterator . hasNext ( ) ) 
 - { 
 - next = currentSliceIterator . next ( ) ; 
 - return ; 
 - } 
 - 
 - if ( ! hasMoreSlice ( ) ) 
 - return ; 
 - 
 - currentSliceIterator = iter . slice ( popNextSlice ( ) ) ; 
 - } 
 - } 
 - } ; 
 - } 
 - 
 public Iterator < Slice > iterator ( ) 
 { 
 return Iterators . forArray ( slices ) ; 
 @ @ - 803 , 11 + 734 , 6 @ @ public abstract class Slices implements Iterable < Slice > 
 return true ; 
 } 
 
 - public UnfilteredRowIterator makeSliceIterator ( SliceableUnfilteredRowIterator iter ) 
 - { 
 - return iter ; 
 - } 
 - 
 public Iterator < Slice > iterator ( ) 
 { 
 return Iterators . singletonIterator ( Slice . ALL ) ; 
 @ @ - 883 , 12 + 809 , 6 @ @ public abstract class Slices implements Iterable < Slice > 
 return false ; 
 } 
 
 - public UnfilteredRowIterator makeSliceIterator ( SliceableUnfilteredRowIterator iter ) 
 - { 
 - return UnfilteredRowIterators . noRowsIterator ( iter . metadata ( ) , iter . partitionKey ( ) , iter . staticRow ( ) , 
 - iter . partitionLevelDeletion ( ) , iter . isReverseOrder ( ) ) ; 
 - } 
 - 
 public Iterator < Slice > iterator ( ) 
 { 
 return Iterators . emptyIterator ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java b / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java 
 index 8ac3dcb . . 792f5ad 100644 
 - - - a / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java 
 + + + b / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java 
 @ @ - 33 , 7 + 33 , 7 @ @ import org . apache . cassandra . io . util . FileDataInput ; 
 import org . apache . cassandra . io . util . FileMark ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 - abstract class AbstractSSTableIterator implements SliceableUnfilteredRowIterator 
 + abstract class AbstractSSTableIterator implements UnfilteredRowIterator 
 { 
 protected final SSTableReader sstable ; 
 protected final DecoratedKey key ; 
 @ @ - 48 , 18 + 48 , 23 @ @ abstract class AbstractSSTableIterator implements SliceableUnfilteredRowIterator 
 
 private boolean isClosed ; 
 
 + protected final Slices slices ; 
 + protected int slice ; 
 + 
 @ SuppressWarnings ( " resource " ) / / We need this because the analysis is not able to determine that we do close 
 / / file on every path where we created it . 
 protected AbstractSSTableIterator ( SSTableReader sstable , 
 FileDataInput file , 
 DecoratedKey key , 
 RowIndexEntry indexEntry , 
 + Slices slices , 
 ColumnFilter columnFilter , 
 boolean isForThrift ) 
 { 
 this . sstable = sstable ; 
 this . key = key ; 
 this . columns = columnFilter ; 
 + this . slices = slices ; 
 this . helper = new SerializationHelper ( sstable . metadata , sstable . descriptor . version . correspondingMessagingVersion ( ) , SerializationHelper . Flag . LOCAL , columnFilter ) ; 
 this . isForThrift = isForThrift ; 
 
 @ @ - 109 , 6 + 114 , 9 @ @ abstract class AbstractSSTableIterator implements SliceableUnfilteredRowIterator 
 this . reader = needsReader ? createReader ( indexEntry , file , shouldCloseFile ) : null ; 
 } 
 
 + if ( reader ! = null & & slices . size ( ) > 0 ) 
 + reader . setForSlice ( slices . get ( 0 ) ) ; 
 + 
 if ( reader = = null & & file ! = null & & shouldCloseFile ) 
 file . close ( ) ; 
 } 
 @ @ - 216 , 7 + 224 , 19 @ @ abstract class AbstractSSTableIterator implements SliceableUnfilteredRowIterator 
 
 public boolean hasNext ( ) 
 { 
 - return reader ! = null & & reader . hasNext ( ) ; 
 + while ( true ) 
 + { 
 + if ( reader = = null ) 
 + return false ; 
 + 
 + if ( reader . hasNext ( ) ) 
 + return true ; 
 + 
 + if ( + + slice > = slices . size ( ) ) 
 + return false ; 
 + 
 + slice ( slices . get ( slice ) ) ; 
 + } 
 } 
 
 public Unfiltered next ( ) 
 @ @ - 225 , 15 + 245 , 12 @ @ abstract class AbstractSSTableIterator implements SliceableUnfilteredRowIterator 
 return reader . next ( ) ; 
 } 
 
 - public Iterator < Unfiltered > slice ( Slice slice ) 
 + private void slice ( Slice slice ) 
 { 
 try 
 { 
 - if ( reader = = null ) 
 - return Collections . emptyIterator ( ) ; 
 - 
 - reader . setForSlice ( slice ) ; 
 - return reader ; 
 + if ( reader ! = null ) 
 + reader . setForSlice ( slice ) ; 
 } 
 catch ( IOException e ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableIterator . java 
 index 0409310 . . 302fc24 100644 
 - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableIterator . java 
 + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableIterator . java 
 @ @ - 31 , 19 + 31 , 15 @ @ import org . apache . cassandra . io . util . FileDataInput ; 
 * / 
 public class SSTableIterator extends AbstractSSTableIterator 
 { 
 - public SSTableIterator ( SSTableReader sstable , DecoratedKey key , ColumnFilter columns , boolean isForThrift ) 
 - { 
 - this ( sstable , null , key , sstable . getPosition ( key , SSTableReader . Operator . EQ ) , columns , isForThrift ) ; 
 - } 
 - 
 public SSTableIterator ( SSTableReader sstable , 
 FileDataInput file , 
 DecoratedKey key , 
 RowIndexEntry indexEntry , 
 + Slices slices , 
 ColumnFilter columns , 
 boolean isForThrift ) 
 { 
 - super ( sstable , file , key , indexEntry , columns , isForThrift ) ; 
 + super ( sstable , file , key , indexEntry , slices , columns , isForThrift ) ; 
 } 
 
 protected Reader createReader ( RowIndexEntry indexEntry , FileDataInput file , boolean shouldCloseFile ) 
 diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableReversedIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableReversedIterator . java 
 index 14cec36 . . ba5acf5 100644 
 - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableReversedIterator . java 
 + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableReversedIterator . java 
 @ @ - 34 , 19 + 34 , 15 @ @ import org . apache . cassandra . utils . btree . BTree ; 
 * / 
 public class SSTableReversedIterator extends AbstractSSTableIterator 
 { 
 - public SSTableReversedIterator ( SSTableReader sstable , DecoratedKey key , ColumnFilter columns , boolean isForThrift ) 
 - { 
 - this ( sstable , null , key , sstable . getPosition ( key , SSTableReader . Operator . EQ ) , columns , isForThrift ) ; 
 - } 
 - 
 public SSTableReversedIterator ( SSTableReader sstable , 
 FileDataInput file , 
 DecoratedKey key , 
 RowIndexEntry indexEntry , 
 + Slices slices , 
 ColumnFilter columns , 
 boolean isForThrift ) 
 { 
 - super ( sstable , file , key , indexEntry , columns , isForThrift ) ; 
 + super ( sstable , file , key , indexEntry , slices , columns , isForThrift ) ; 
 } 
 
 protected Reader createReader ( RowIndexEntry indexEntry , FileDataInput file , boolean shouldCloseFile ) 
 diff - - git a / src / java / org / apache / cassandra / db / filter / ClusteringIndexFilter . java b / src / java / org / apache / cassandra / db / filter / ClusteringIndexFilter . java 
 index e3f824f . . d1907b1 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / ClusteringIndexFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / ClusteringIndexFilter . java 
 @ @ - 128 , 14 + 128 , 7 @ @ public interface ClusteringIndexFilter 
 * / 
 public UnfilteredRowIterator filterNotIndexed ( ColumnFilter columnFilter , UnfilteredRowIterator iterator ) ; 
 
 - / * * 
 - * Returns an iterator that only returns the rows of the provided sliceable iterator that this filter selects . 
 - * 
 - * @ param iterator the sliceable iterator for which we should filter rows . 
 - * 
 - * @ return an iterator that only returns the rows ( or rather unfiltered ) from { @ code iterator } that are selected by this filter . 
 - * / 
 - public UnfilteredRowIterator filter ( SliceableUnfilteredRowIterator iterator ) ; 
 + public Slices getSlices ( CFMetaData metadata ) ; 
 
 / * * 
 * Given a partition , returns a row iterator for the rows of this partition that are selected by this filter . 
 diff - - git a / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java b / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java 
 index 17cd802 . . 6a010d9 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java 
 @ @ - 126 , 52 + 126 , 12 @ @ public class ClusteringIndexNamesFilter extends AbstractClusteringIndexFilter 
 return Transformation . apply ( iterator , new FilterNotIndexed ( ) ) ; 
 } 
 
 - public UnfilteredRowIterator filter ( final SliceableUnfilteredRowIterator iter ) 
 + public Slices getSlices ( CFMetaData metadata ) 
 { 
 - / / Please note that this method assumes that rows from ' iter ' already have their columns filtered , i . e . that 
 - / / they only include columns that we select . 
 - return new WrappingUnfilteredRowIterator ( iter ) 
 - { 
 - private final Iterator < Clustering > clusteringIter = clusteringsInQueryOrder . iterator ( ) ; 
 - private Iterator < Unfiltered > currentClustering ; 
 - private Unfiltered next ; 
 - 
 - @ Override 
 - public boolean hasNext ( ) 
 - { 
 - if ( next ! = null ) 
 - return true ; 
 - 
 - if ( currentClustering ! = null & & currentClustering . hasNext ( ) ) 
 - { 
 - next = currentClustering . next ( ) ; 
 - return true ; 
 - } 
 - 
 - while ( clusteringIter . hasNext ( ) ) 
 - { 
 - Clustering nextClustering = clusteringIter . next ( ) ; 
 - currentClustering = iter . slice ( Slice . make ( nextClustering ) ) ; 
 - if ( currentClustering . hasNext ( ) ) 
 - { 
 - next = currentClustering . next ( ) ; 
 - return true ; 
 - } 
 - } 
 - return false ; 
 - } 
 - 
 - @ Override 
 - public Unfiltered next ( ) 
 - { 
 - if ( next = = null & & ! hasNext ( ) ) 
 - throw new NoSuchElementException ( ) ; 
 - 
 - Unfiltered toReturn = next ; 
 - next = null ; 
 - return toReturn ; 
 - } 
 - } ; 
 + Slices . Builder builder = new Slices . Builder ( metadata . comparator , clusteringsInQueryOrder . size ( ) ) ; 
 + for ( Clustering clustering : clusteringsInQueryOrder ) 
 + builder . add ( Slice . make ( clustering ) ) ; 
 + return builder . build ( ) ; 
 } 
 
 public UnfilteredRowIterator getUnfilteredRowIterator ( final ColumnFilter columnFilter , final Partition partition ) 
 diff - - git a / src / java / org / apache / cassandra / db / filter / ClusteringIndexSliceFilter . java b / src / java / org / apache / cassandra / db / filter / ClusteringIndexSliceFilter . java 
 index 7a174ee . . ba30dcf 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / ClusteringIndexSliceFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / ClusteringIndexSliceFilter . java 
 @ @ - 114 , 11 + 114 , 9 @ @ public class ClusteringIndexSliceFilter extends AbstractClusteringIndexFilter 
 return Transformation . apply ( iterator , new FilterNotIndexed ( ) ) ; 
 } 
 
 - public UnfilteredRowIterator filter ( SliceableUnfilteredRowIterator iterator ) 
 + public Slices getSlices ( CFMetaData metadata ) 
 { 
 - / / Please note that this method assumes that rows from ' iter ' already have their columns filtered , i . e . that 
 - / / they only include columns that we select . 
 - return slices . makeSliceIterator ( iterator ) ; 
 + return slices ; 
 } 
 
 public UnfilteredRowIterator getUnfilteredRowIterator ( ColumnFilter columnFilter , Partition partition ) 
 diff - - git a / src / java / org / apache / cassandra / db / partitions / AbstractBTreePartition . java b / src / java / org / apache / cassandra / db / partitions / AbstractBTreePartition . java 
 index b7fa691 . . e44124f 100644 
 - - - a / src / java / org / apache / cassandra / db / partitions / AbstractBTreePartition . java 
 + + + b / src / java / org / apache / cassandra / db / partitions / AbstractBTreePartition . java 
 @ @ - 282 , 40 + 282 , 6 @ @ public abstract class AbstractBTreePartition implements Partition , Iterable < Row > 
 } 
 } 
 
 - public class SliceableIterator extends AbstractIterator implements SliceableUnfilteredRowIterator 
 - { 
 - private Iterator < Unfiltered > iterator ; 
 - 
 - protected SliceableIterator ( ColumnFilter selection , boolean isReversed ) 
 - { 
 - super ( selection , isReversed ) ; 
 - } 
 - 
 - protected Unfiltered computeNext ( ) 
 - { 
 - if ( iterator = = null ) 
 - iterator = unfilteredIterator ( selection , Slices . ALL , isReverseOrder ) ; 
 - if ( ! iterator . hasNext ( ) ) 
 - return endOfData ( ) ; 
 - return iterator . next ( ) ; 
 - } 
 - 
 - public Iterator < Unfiltered > slice ( Slice slice ) 
 - { 
 - return sliceIterator ( selection , slice , isReverseOrder , current , staticRow ) ; 
 - } 
 - } 
 - 
 - public SliceableUnfilteredRowIterator sliceableUnfilteredIterator ( ColumnFilter columns , boolean reversed ) 
 - { 
 - return new SliceableIterator ( columns , reversed ) ; 
 - } 
 - 
 - protected SliceableUnfilteredRowIterator sliceableUnfilteredIterator ( ) 
 - { 
 - return sliceableUnfilteredIterator ( ColumnFilter . all ( metadata ) , false ) ; 
 - } 
 - 
 protected static Holder build ( UnfilteredRowIterator iterator , int initialRowCapacity ) 
 { 
 CFMetaData metadata = iterator . metadata ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java b / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java 
 index 02369e4 . . 9f6e900 100644 
 - - - a / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java 
 + + + b / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java 
 @ @ - 438 , 13 + 438 , 6 @ @ public class PartitionUpdate extends AbstractBTreePartition 
 return super . iterator ( ) ; 
 } 
 
 - @ Override 
 - public SliceableUnfilteredRowIterator sliceableUnfilteredIterator ( ColumnFilter columns , boolean reversed ) 
 - { 
 - maybeBuild ( ) ; 
 - return super . sliceableUnfilteredIterator ( columns , reversed ) ; 
 - } 
 - 
 / * * 
 * Validates the data contained in this update . 
 * 
 @ @ - 625 , 7 + 618 , 7 @ @ public class PartitionUpdate extends AbstractBTreePartition 
 { 
 public void serialize ( PartitionUpdate update , DataOutputPlus out , int version ) throws IOException 
 { 
 - try ( UnfilteredRowIterator iter = update . sliceableUnfilteredIterator ( ) ) 
 + try ( UnfilteredRowIterator iter = update . unfilteredIterator ( ) ) 
 { 
 assert ! iter . isReverseOrder ( ) ; 
 
 @ @ - 714 , 7 + 707 , 7 @ @ public class PartitionUpdate extends AbstractBTreePartition 
 
 public long serializedSize ( PartitionUpdate update , int version ) 
 { 
 - try ( UnfilteredRowIterator iter = update . sliceableUnfilteredIterator ( ) ) 
 + try ( UnfilteredRowIterator iter = update . unfilteredIterator ( ) ) 
 { 
 if ( version < MessagingService . VERSION _ 30 ) 
 return LegacyLayout . serializedSizeAsLegacyPartition ( iter , version ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / rows / SliceableUnfilteredRowIterator . java b / src / java / org / apache / cassandra / db / rows / SliceableUnfilteredRowIterator . java 
 deleted file mode 100644 
 index 2250ee9 . . 0000000 
 - - - a / src / java / org / apache / cassandra / db / rows / SliceableUnfilteredRowIterator . java 
 + + + / dev / null 
 @ @ - 1 , 39 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . db . rows ; 
 - 
 - import java . util . Iterator ; 
 - 
 - import org . apache . cassandra . db . Slice ; 
 - 
 - public interface SliceableUnfilteredRowIterator extends UnfilteredRowIterator 
 - { 
 - / * * 
 - * Move forward ( resp . backward if isReverseOrder ( ) is true for the iterator ) in 
 - * the iterator and return an iterator over the Unfiltered selected by the provided 
 - * { @ code slice } . 
 - * < p > 
 - * Please note that successive calls to { @ code slice } are allowed provided the 
 - * slice are non overlapping and are passed in clustering ( resp . reverse clustering ) order . 
 - * However , { @ code slice } is allowed to leave the iterator in an unknown state and there 
 - * is no guarantee over what a call to { @ code hasNext } or { @ code next } will yield after 
 - * a call to { @ code slice } . In other words , for a given iterator , you should either use 
 - * { @ code slice } or { @ code hasNext / next } but not both . 
 - * / 
 - public Iterator < Unfiltered > slice ( Slice slice ) ; 
 - } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 index 9e9b98a . . 550b1a0 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 @ @ - 46 , 7 + 46 , 7 @ @ import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . commitlog . ReplayPosition ; 
 import org . apache . cassandra . db . filter . ColumnFilter ; 
 - import org . apache . cassandra . db . rows . SliceableUnfilteredRowIterator ; 
 + import org . apache . cassandra . db . rows . UnfilteredRowIterator ; 
 import org . apache . cassandra . dht . AbstractBounds ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . dht . Token ; 
 @ @ - 1587 , 8 + 1587 , 8 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 * / 
 protected abstract RowIndexEntry getPosition ( PartitionPosition key , Operator op , boolean updateCacheAndStats , boolean permitMatchPastLast ) ; 
 
 - public abstract SliceableUnfilteredRowIterator iterator ( DecoratedKey key , ColumnFilter selectedColumns , boolean reversed , boolean isForThrift ) ; 
 - public abstract SliceableUnfilteredRowIterator iterator ( FileDataInput file , DecoratedKey key , RowIndexEntry indexEntry , ColumnFilter selectedColumns , boolean reversed , boolean isForThrift ) ; 
 + public abstract UnfilteredRowIterator iterator ( DecoratedKey key , Slices slices , ColumnFilter selectedColumns , boolean reversed , boolean isForThrift ) ; 
 + public abstract UnfilteredRowIterator iterator ( FileDataInput file , DecoratedKey key , RowIndexEntry indexEntry , Slices slices , ColumnFilter selectedColumns , boolean reversed , boolean isForThrift ) ; 
 
 / * * 
 * Finds and returns the first key beyond a given token in this SSTable or null if no such key exists . 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableReader . java b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableReader . java 
 index c16018a . . 7abf728 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableReader . java 
 @ @ - 21 , 10 + 21 , 12 @ @ import com . google . common . util . concurrent . RateLimiter ; 
 import org . apache . cassandra . cache . KeyCacheKey ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . db . * ; 
 - import org . apache . cassandra . db . rows . SliceableUnfilteredRowIterator ; 
 import org . apache . cassandra . db . filter . ColumnFilter ; 
 import org . apache . cassandra . db . columniterator . SSTableIterator ; 
 import org . apache . cassandra . db . columniterator . SSTableReversedIterator ; 
 + import org . apache . cassandra . db . rows . Rows ; 
 + import org . apache . cassandra . db . rows . UnfilteredRowIterator ; 
 + import org . apache . cassandra . db . rows . UnfilteredRowIterators ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . dht . Token ; 
 @ @ - 57 , 18 + 59 , 19 @ @ public class BigTableReader extends SSTableReader 
 super ( desc , components , metadata , maxDataAge , sstableMetadata , openReason , header ) ; 
 } 
 
 - public SliceableUnfilteredRowIterator iterator ( DecoratedKey key , ColumnFilter selectedColumns , boolean reversed , boolean isForThrift ) 
 + public UnfilteredRowIterator iterator ( DecoratedKey key , Slices slices , ColumnFilter selectedColumns , boolean reversed , boolean isForThrift ) 
 { 
 - return reversed 
 - ? new SSTableReversedIterator ( this , key , selectedColumns , isForThrift ) 
 - : new SSTableIterator ( this , key , selectedColumns , isForThrift ) ; 
 + RowIndexEntry rie = getPosition ( key , SSTableReader . Operator . EQ ) ; 
 + return iterator ( null , key , rie , slices , selectedColumns , reversed , isForThrift ) ; 
 } 
 
 - public SliceableUnfilteredRowIterator iterator ( FileDataInput file , DecoratedKey key , RowIndexEntry indexEntry , ColumnFilter selectedColumns , boolean reversed , boolean isForThrift ) 
 + public UnfilteredRowIterator iterator ( FileDataInput file , DecoratedKey key , RowIndexEntry indexEntry , Slices slices , ColumnFilter selectedColumns , boolean reversed , boolean isForThrift ) 
 { 
 + if ( indexEntry = = null ) 
 + return UnfilteredRowIterators . noRowsIterator ( metadata , key , Rows . EMPTY _ STATIC _ ROW , DeletionTime . LIVE , reversed ) ; 
 return reversed 
 - ? new SSTableReversedIterator ( this , file , key , indexEntry , selectedColumns , isForThrift ) 
 - : new SSTableIterator ( this , file , key , indexEntry , selectedColumns , isForThrift ) ; 
 + ? new SSTableReversedIterator ( this , file , key , indexEntry , slices , selectedColumns , isForThrift ) 
 + : new SSTableIterator ( this , file , key , indexEntry , slices , selectedColumns , isForThrift ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java 
 index fd413fd . . 0ce045a 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java 
 @ @ - 330 , 7 + 330 , 7 @ @ public class BigTableScanner implements ISSTableScanner 
 } 
 
 ClusteringIndexFilter filter = dataRange . clusteringIndexFilter ( partitionKey ( ) ) ; 
 - return filter . filter ( sstable . iterator ( dfile , partitionKey ( ) , currentEntry , columns , filter . isReversed ( ) , isForThrift ) ) ; 
 + return sstable . iterator ( dfile , partitionKey ( ) , currentEntry , filter . getSlices ( BigTableScanner . this . metadata ( ) ) , columns , filter . isReversed ( ) , isForThrift ) ; 
 } 
 catch ( CorruptSSTableException | IOException e ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / db / partition / PartitionImplementationTest . java b / test / unit / org / apache / cassandra / db / partition / PartitionImplementationTest . java 
 index f215331 . . fe6ac1e 100644 
 - - - a / test / unit / org / apache / cassandra / db / partition / PartitionImplementationTest . java 
 + + + b / test / unit / org / apache / cassandra / db / partition / PartitionImplementationTest . java 
 @ @ - 314 , 10 + 314 , 10 @ @ public class PartitionImplementationTest 
 testSearchIterator ( sortedContent , partition , cf , true ) ; 
 
 / / sliceable iter 
 - testSliceableIterator ( sortedContent , partition , ColumnFilter . all ( cfm ) , false ) ; 
 - testSliceableIterator ( sortedContent , partition , cf , false ) ; 
 - testSliceableIterator ( sortedContent , partition , ColumnFilter . all ( cfm ) , true ) ; 
 - testSliceableIterator ( sortedContent , partition , cf , true ) ; 
 + testSlicingOfIterators ( sortedContent , partition , ColumnFilter . all ( cfm ) , false ) ; 
 + testSlicingOfIterators ( sortedContent , partition , cf , false ) ; 
 + testSlicingOfIterators ( sortedContent , partition , ColumnFilter . all ( cfm ) , true ) ; 
 + testSlicingOfIterators ( sortedContent , partition , cf , true ) ; 
 } 
 
 void testSearchIterator ( NavigableSet < Clusterable > sortedContent , Partition partition , ColumnFilter cf , boolean reversed ) 
 @ @ - 361 , 23 + 361 , 30 @ @ public class PartitionImplementationTest 
 return builder . build ( ) ; 
 } 
 
 - void testSliceableIterator ( NavigableSet < Clusterable > sortedContent , AbstractBTreePartition partition , ColumnFilter cf , boolean reversed ) 
 + void testSlicingOfIterators ( NavigableSet < Clusterable > sortedContent , AbstractBTreePartition partition , ColumnFilter cf , boolean reversed ) 
 { 
 Function < ? super Clusterable , ? extends Clusterable > colFilter = x - > x instanceof Row ? ( ( Row ) x ) . filter ( cf , cfm ) : x ; 
 Slices slices = makeSlices ( ) ; 
 - try ( SliceableUnfilteredRowIterator sliceableIter = partition . sliceableUnfilteredIterator ( cf , reversed ) ) 
 + 
 + / / fetch each slice in turn 
 + for ( Slice slice : ( Iterable < Slice > ) ( ) - > directed ( slices , reversed ) ) 
 { 
 - for ( Slice slice : ( Iterable < Slice > ) ( ) - > directed ( slices , reversed ) ) 
 + try ( UnfilteredRowIterator slicedIter = partition . unfilteredIterator ( cf , Slices . with ( cfm . comparator , slice ) , reversed ) ) 
 + { 
 assertIteratorsEqual ( streamOf ( directed ( slice ( sortedContent , slice ) , reversed ) ) . map ( colFilter ) . iterator ( ) , 
 - sliceableIter . slice ( slice ) ) ; 
 + slicedIter ) ; 
 + } 
 } 
 
 - / / Try using sliceable as unfiltered iterator 
 - try ( SliceableUnfilteredRowIterator sliceableIter = partition . sliceableUnfilteredIterator ( cf , reversed ) ) 
 + / / Fetch all slices at once 
 + try ( UnfilteredRowIterator slicedIter = partition . unfilteredIterator ( cf , slices , reversed ) ) 
 { 
 - assertIteratorsEqual ( ( reversed ? sortedContent . descendingSet ( ) : sortedContent ) . 
 - stream ( ) . map ( colFilter ) . iterator ( ) , 
 - sliceableIter ) ; 
 + List < Iterator < ? extends Clusterable > > slicelist = new ArrayList < > ( ) ; 
 + slices . forEach ( slice - > slicelist . add ( directed ( slice ( sortedContent , slice ) , reversed ) ) ) ; 
 + if ( reversed ) 
 + Collections . reverse ( slicelist ) ; 
 + 
 + assertIteratorsEqual ( Iterators . concat ( slicelist . toArray ( new Iterator [ 0 ] ) ) , slicedIter ) ; 
 } 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java 
 index 00727b8 . . 7ea2463 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java 
 @ @ - 44 , 9 + 44 , 10 @ @ import org . apache . cassandra . cql3 . UntypedResultSet ; 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . DeletionTime ; 
 import org . apache . cassandra . db . Keyspace ; 
 - import org . apache . cassandra . db . rows . SliceableUnfilteredRowIterator ; 
 + import org . apache . cassandra . db . Slices ; 
 import org . apache . cassandra . db . filter . ColumnFilter ; 
 import org . apache . cassandra . db . marshal . BytesType ; 
 + import org . apache . cassandra . db . rows . UnfilteredRowIterator ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . dht . Token ; 
 @ @ - 174 , 7 + 175 , 7 @ @ public class LegacySSTableTest 
 { 
 ByteBuffer key = bytes ( keystring ) ; 
 
 - SliceableUnfilteredRowIterator iter = sstable . iterator ( Util . dk ( key ) , ColumnFilter . selectionBuilder ( ) . add ( cfs . metadata . getColumnDefinition ( bytes ( " name " ) ) ) . build ( ) , false , false ) ; 
 + UnfilteredRowIterator iter = sstable . iterator ( Util . dk ( key ) , Slices . ALL , ColumnFilter . selectionBuilder ( ) . add ( cfs . metadata . getColumnDefinition ( bytes ( " name " ) ) ) . build ( ) , false , false ) ; 
 
 / / check not deleted ( CASSANDRA - 6527 ) 
 assert iter . partitionLevelDeletion ( ) . equals ( DeletionTime . LIVE ) ; 
 @ @ - 215 , 7 + 216 , 7 @ @ public class LegacySSTableTest 
 
 ByteBuffer key = bytes ( keystring ) ; 
 
 - SliceableUnfilteredRowIterator iter = reader . iterator ( Util . dk ( key ) , ColumnFilter . selection ( cfs . metadata . partitionColumns ( ) ) , false , false ) ; 
 + UnfilteredRowIterator iter = reader . iterator ( Util . dk ( key ) , Slices . ALL , ColumnFilter . selection ( cfs . metadata . partitionColumns ( ) ) , false , false ) ; 
 
 / / check not deleted ( CASSANDRA - 6527 ) 
 assert iter . partitionLevelDeletion ( ) . equals ( DeletionTime . LIVE ) ; 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / format / ClientModeSSTableTest . java b / test / unit / org / apache / cassandra / io / sstable / format / ClientModeSSTableTest . java 
 index 661fcd5 . . 6b0427b 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / format / ClientModeSSTableTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / format / ClientModeSSTableTest . java 
 @ @ - 29 , 15 + 29 , 13 @ @ import org . junit . Test ; 
 import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . Config ; 
 + import org . apache . cassandra . db . Slices ; 
 import org . apache . cassandra . db . filter . ColumnFilter ; 
 import org . apache . cassandra . db . marshal . BytesType ; 
 - import org . apache . cassandra . db . rows . SliceableUnfilteredRowIterator ; 
 + import org . apache . cassandra . db . rows . UnfilteredRowIterator ; 
 import org . apache . cassandra . dht . ByteOrderedPartitioner ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . io . sstable . Descriptor ; 
 - import org . apache . cassandra . io . sstable . format . SSTableFormat ; 
 - import org . apache . cassandra . io . sstable . format . SSTableReader ; 
 - import org . apache . cassandra . io . sstable . format . Version ; 
 
 / * * 
 * Tests backwards compatibility for SSTables 
 @ @ - 107 , 7 + 105 , 7 @ @ public class ClientModeSSTableTest 
 
 ByteBuffer key = bytes ( Integer . toString ( 100 ) ) ; 
 
 - try ( SliceableUnfilteredRowIterator iter = reader . iterator ( metadata . decorateKey ( key ) , ColumnFilter . selection ( metadata . partitionColumns ( ) ) , false , false ) ) 
 + try ( UnfilteredRowIterator iter = reader . iterator ( metadata . decorateKey ( key ) , Slices . ALL , ColumnFilter . selection ( metadata . partitionColumns ( ) ) , false , false ) ) 
 { 
 assert iter . next ( ) . clustering ( ) . get ( 0 ) . equals ( key ) ; 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / HintedHandOffManager . java b / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 index a83fbab . . e2dc046 100644 
 - - - a / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 + + + b / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 @ @ - 391 , 7 + 391 , 9 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean 
 { 
 Token < ? > token = StorageService . getPartitioner ( ) . getTokenFactory ( ) . fromByteArray ( row . key . key ) ; 
 InetAddress target = StorageService . instance . getTokenMetadata ( ) . getEndpoint ( token ) ; 
 - scheduleHintDelivery ( target ) ; 
 + / / token may have since been removed ( in which case we have just read back a tombstone ) 
 + if ( target ! = null ) 
 + scheduleHintDelivery ( target ) ; 
 } 
 
 if ( logger _ . isDebugEnabled ( ) )
