BLEU SCORE: 1.0

TEST MSG: Fix wrong rack counting and invalid conditions check for TokenAllocation
GENERATED MSG: Fix wrong rack counting and invalid conditions check for TokenAllocation

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 8af201a . . 654dd42 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 20 , 6 + 20 , 8 @ @ <nl> * Add nodetool gettimeout and settimeout commands ( CASSANDRA - 10953 ) <nl> * Add 3 . 0 metadata to sstablemetadata output ( CASSANDRA - 10838 ) <nl> Merged from 3 . 0 : <nl> + * Fix wrong rack counting and invalid conditions check for TokenAllocation <nl> + ( CASSANDRA - 11139 ) <nl> * Avoid creating empty hint files ( CASSANDRA - 11090 ) <nl> * Fix leak detection strong reference loop using weak reference ( CASSANDRA - 11120 ) <nl> * Configurie BatchlogManager to stop delayed tasks on shutdown ( CASSANDRA - 11062 ) <nl> diff - - git a / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java b / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java <nl> index b4281ce . . e715ff6 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java <nl> + + + b / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java <nl> @ @ - 199 , 9 + 199 , 9 @ @ public class TokenAllocation <nl> final int replicas = rs . getReplicationFactor ( dc ) ; <nl> <nl> Topology topology = tokenMetadata . getTopology ( ) ; <nl> - int racks = topology . getDatacenterRacks ( ) . get ( dc ) . size ( ) ; <nl> + int racks = topology . getDatacenterRacks ( ) . get ( dc ) . asMap ( ) . size ( ) ; <nl> <nl> - if ( replicas > = racks ) <nl> + if ( racks > = replicas ) <nl> { <nl> return new StrategyAdapter ( ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / dht / BootStrapperTest . java b / test / unit / org / apache / cassandra / dht / BootStrapperTest . java <nl> index 8454ec1 . . fe87249 100644 <nl> - - - a / test / unit / org / apache / cassandra / dht / BootStrapperTest . java <nl> + + + b / test / unit / org / apache / cassandra / dht / BootStrapperTest . java <nl> @ @ - 46 , 7 + 46 , 10 @ @ import org . apache . cassandra . dht . tokenallocator . TokenAllocation ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . gms . IFailureDetectionEventListener ; <nl> import org . apache . cassandra . gms . IFailureDetector ; <nl> + import org . apache . cassandra . locator . IEndpointSnitch ; <nl> + import org . apache . cassandra . locator . RackInferringSnitch ; <nl> import org . apache . cassandra . locator . TokenMetadata ; <nl> + import org . apache . cassandra . schema . KeyspaceParams ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> @ @ - 135 , 12 + 138 , 17 @ @ public class BootStrapperTest <nl> private void generateFakeEndpoints ( TokenMetadata tmd , int numOldNodes , int numVNodes ) throws UnknownHostException <nl> { <nl> tmd . clearUnsafe ( ) ; <nl> + generateFakeEndpoints ( tmd , numOldNodes , numVNodes , " 0 " , " 0 " ) ; <nl> + } <nl> + <nl> + private void generateFakeEndpoints ( TokenMetadata tmd , int numOldNodes , int numVNodes , String dc , String rack ) throws UnknownHostException <nl> + { <nl> IPartitioner p = tmd . partitioner ; <nl> <nl> for ( int i = 1 ; i < = numOldNodes ; i + + ) <nl> { <nl> / / leave . 1 for myEndpoint <nl> - InetAddress addr = InetAddress . getByName ( " 127 . 0 . 0 . " + ( i + 1 ) ) ; <nl> + InetAddress addr = InetAddress . getByName ( " 127 . " + dc + " . " + rack + " . " + ( i + 1 ) ) ; <nl> List < Token > tokens = Lists . newArrayListWithCapacity ( numVNodes ) ; <nl> for ( int j = 0 ; j < numVNodes ; + + j ) <nl> tokens . add ( p . getRandomToken ( ) ) ; <nl> @ @ - 160 , 6 + 168 , 58 @ @ public class BootStrapperTest <nl> allocateTokensForNode ( vn , ks , tm , addr ) ; <nl> } <nl> <nl> + public void testAllocateTokensNetworkStrategy ( int rackCount , int replicas ) throws UnknownHostException <nl> + { <nl> + IEndpointSnitch oldSnitch = DatabaseDescriptor . getEndpointSnitch ( ) ; <nl> + try <nl> + { <nl> + DatabaseDescriptor . setEndpointSnitch ( new RackInferringSnitch ( ) ) ; <nl> + int vn = 16 ; <nl> + String ks = " BootStrapperTestNTSKeyspace " + rackCount + replicas ; <nl> + String dc = " 1 " ; <nl> + SchemaLoader . createKeyspace ( ks , KeyspaceParams . nts ( dc , replicas , " 15 " , 15 ) , SchemaLoader . standardCFMD ( ks , " Standard1 " ) ) ; <nl> + TokenMetadata tm = new TokenMetadata ( ) ; <nl> + tm . clearUnsafe ( ) ; <nl> + for ( int i = 0 ; i < rackCount ; + + i ) <nl> + generateFakeEndpoints ( tm , 10 , vn , dc , Integer . toString ( i ) ) ; <nl> + InetAddress addr = InetAddress . getByName ( " 127 . " + dc + " . 0 . 99 " ) ; <nl> + allocateTokensForNode ( vn , ks , tm , addr ) ; <nl> + / / Note : Not matching replication factor in second datacentre , but this should not affect us . <nl> + } finally { <nl> + DatabaseDescriptor . setEndpointSnitch ( oldSnitch ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testAllocateTokensNetworkStrategyOneRack ( ) throws UnknownHostException <nl> + { <nl> + testAllocateTokensNetworkStrategy ( 1 , 3 ) ; <nl> + } <nl> + <nl> + @ Test ( expected = ConfigurationException . class ) <nl> + public void testAllocateTokensNetworkStrategyTwoRacks ( ) throws UnknownHostException <nl> + { <nl> + testAllocateTokensNetworkStrategy ( 2 , 3 ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAllocateTokensNetworkStrategyThreeRacks ( ) throws UnknownHostException <nl> + { <nl> + testAllocateTokensNetworkStrategy ( 3 , 3 ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAllocateTokensNetworkStrategyFiveRacks ( ) throws UnknownHostException <nl> + { <nl> + testAllocateTokensNetworkStrategy ( 5 , 3 ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAllocateTokensNetworkStrategyOneRackOneReplica ( ) throws UnknownHostException <nl> + { <nl> + testAllocateTokensNetworkStrategy ( 1 , 1 ) ; <nl> + } <nl> + <nl> private void allocateTokensForNode ( int vn , String ks , TokenMetadata tm , InetAddress addr ) <nl> { <nl> SummaryStatistics os = TokenAllocation . replicatedOwnershipStats ( tm , Keyspace . open ( ks ) . getReplicationStrategy ( ) , addr ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 8af201a . . 654dd42 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 20 , 6 + 20 , 8 @ @ 
 * Add nodetool gettimeout and settimeout commands ( CASSANDRA - 10953 ) 
 * Add 3 . 0 metadata to sstablemetadata output ( CASSANDRA - 10838 ) 
 Merged from 3 . 0 : 
 + * Fix wrong rack counting and invalid conditions check for TokenAllocation 
 + ( CASSANDRA - 11139 ) 
 * Avoid creating empty hint files ( CASSANDRA - 11090 ) 
 * Fix leak detection strong reference loop using weak reference ( CASSANDRA - 11120 ) 
 * Configurie BatchlogManager to stop delayed tasks on shutdown ( CASSANDRA - 11062 ) 
 diff - - git a / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java b / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java 
 index b4281ce . . e715ff6 100644 
 - - - a / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java 
 + + + b / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java 
 @ @ - 199 , 9 + 199 , 9 @ @ public class TokenAllocation 
 final int replicas = rs . getReplicationFactor ( dc ) ; 
 
 Topology topology = tokenMetadata . getTopology ( ) ; 
 - int racks = topology . getDatacenterRacks ( ) . get ( dc ) . size ( ) ; 
 + int racks = topology . getDatacenterRacks ( ) . get ( dc ) . asMap ( ) . size ( ) ; 
 
 - if ( replicas > = racks ) 
 + if ( racks > = replicas ) 
 { 
 return new StrategyAdapter ( ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / dht / BootStrapperTest . java b / test / unit / org / apache / cassandra / dht / BootStrapperTest . java 
 index 8454ec1 . . fe87249 100644 
 - - - a / test / unit / org / apache / cassandra / dht / BootStrapperTest . java 
 + + + b / test / unit / org / apache / cassandra / dht / BootStrapperTest . java 
 @ @ - 46 , 7 + 46 , 10 @ @ import org . apache . cassandra . dht . tokenallocator . TokenAllocation ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . gms . IFailureDetectionEventListener ; 
 import org . apache . cassandra . gms . IFailureDetector ; 
 + import org . apache . cassandra . locator . IEndpointSnitch ; 
 + import org . apache . cassandra . locator . RackInferringSnitch ; 
 import org . apache . cassandra . locator . TokenMetadata ; 
 + import org . apache . cassandra . schema . KeyspaceParams ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 @ @ - 135 , 12 + 138 , 17 @ @ public class BootStrapperTest 
 private void generateFakeEndpoints ( TokenMetadata tmd , int numOldNodes , int numVNodes ) throws UnknownHostException 
 { 
 tmd . clearUnsafe ( ) ; 
 + generateFakeEndpoints ( tmd , numOldNodes , numVNodes , " 0 " , " 0 " ) ; 
 + } 
 + 
 + private void generateFakeEndpoints ( TokenMetadata tmd , int numOldNodes , int numVNodes , String dc , String rack ) throws UnknownHostException 
 + { 
 IPartitioner p = tmd . partitioner ; 
 
 for ( int i = 1 ; i < = numOldNodes ; i + + ) 
 { 
 / / leave . 1 for myEndpoint 
 - InetAddress addr = InetAddress . getByName ( " 127 . 0 . 0 . " + ( i + 1 ) ) ; 
 + InetAddress addr = InetAddress . getByName ( " 127 . " + dc + " . " + rack + " . " + ( i + 1 ) ) ; 
 List < Token > tokens = Lists . newArrayListWithCapacity ( numVNodes ) ; 
 for ( int j = 0 ; j < numVNodes ; + + j ) 
 tokens . add ( p . getRandomToken ( ) ) ; 
 @ @ - 160 , 6 + 168 , 58 @ @ public class BootStrapperTest 
 allocateTokensForNode ( vn , ks , tm , addr ) ; 
 } 
 
 + public void testAllocateTokensNetworkStrategy ( int rackCount , int replicas ) throws UnknownHostException 
 + { 
 + IEndpointSnitch oldSnitch = DatabaseDescriptor . getEndpointSnitch ( ) ; 
 + try 
 + { 
 + DatabaseDescriptor . setEndpointSnitch ( new RackInferringSnitch ( ) ) ; 
 + int vn = 16 ; 
 + String ks = " BootStrapperTestNTSKeyspace " + rackCount + replicas ; 
 + String dc = " 1 " ; 
 + SchemaLoader . createKeyspace ( ks , KeyspaceParams . nts ( dc , replicas , " 15 " , 15 ) , SchemaLoader . standardCFMD ( ks , " Standard1 " ) ) ; 
 + TokenMetadata tm = new TokenMetadata ( ) ; 
 + tm . clearUnsafe ( ) ; 
 + for ( int i = 0 ; i < rackCount ; + + i ) 
 + generateFakeEndpoints ( tm , 10 , vn , dc , Integer . toString ( i ) ) ; 
 + InetAddress addr = InetAddress . getByName ( " 127 . " + dc + " . 0 . 99 " ) ; 
 + allocateTokensForNode ( vn , ks , tm , addr ) ; 
 + / / Note : Not matching replication factor in second datacentre , but this should not affect us . 
 + } finally { 
 + DatabaseDescriptor . setEndpointSnitch ( oldSnitch ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testAllocateTokensNetworkStrategyOneRack ( ) throws UnknownHostException 
 + { 
 + testAllocateTokensNetworkStrategy ( 1 , 3 ) ; 
 + } 
 + 
 + @ Test ( expected = ConfigurationException . class ) 
 + public void testAllocateTokensNetworkStrategyTwoRacks ( ) throws UnknownHostException 
 + { 
 + testAllocateTokensNetworkStrategy ( 2 , 3 ) ; 
 + } 
 + 
 + @ Test 
 + public void testAllocateTokensNetworkStrategyThreeRacks ( ) throws UnknownHostException 
 + { 
 + testAllocateTokensNetworkStrategy ( 3 , 3 ) ; 
 + } 
 + 
 + @ Test 
 + public void testAllocateTokensNetworkStrategyFiveRacks ( ) throws UnknownHostException 
 + { 
 + testAllocateTokensNetworkStrategy ( 5 , 3 ) ; 
 + } 
 + 
 + @ Test 
 + public void testAllocateTokensNetworkStrategyOneRackOneReplica ( ) throws UnknownHostException 
 + { 
 + testAllocateTokensNetworkStrategy ( 1 , 1 ) ; 
 + } 
 + 
 private void allocateTokensForNode ( int vn , String ks , TokenMetadata tm , InetAddress addr ) 
 { 
 SummaryStatistics os = TokenAllocation . replicatedOwnershipStats ( tm , Keyspace . open ( ks ) . getReplicationStrategy ( ) , addr ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
