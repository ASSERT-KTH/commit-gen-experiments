BLEU SCORE: 0.037477767366779206

TEST MSG: Remove Netty timed batching and instead do the batch during next
GENERATED MSG: Add server side batching to native transport

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 75f41e8 . . c64881a 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Flush netty client messages immediately by default ( CASSANDRA - 13651 ) <nl> * Improve read repair blocking behavior ( CASSANDRA - 10726 ) <nl> * Add a virtual table to expose settings ( CASSANDRA - 14573 ) <nl> * Fix up chunk cache handling of metrics ( CASSANDRA - 14628 ) <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index c7c2785 . . 12f5ab2 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 1222 , 3 + 1222 , 7 @ @ audit _ logging _ options : <nl> # If enabled , diagnostic events can be helpful for troubleshooting operational issues . Emitted events contain details <nl> # on internal state and temporal relationships across events , accessible by clients via JMX . <nl> diagnostic _ events _ enabled : false <nl> + <nl> + # Define use of legacy delayed flusher for replies to TCP connections . This will increase latency , but might be beneficial for <nl> + # legacy use - cases where only a single connection is used for each Cassandra node . Default is false . <nl> + # native _ transport _ flush _ in _ batches _ legacy : false <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index 46dbc1c . . f6eefc3 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 152 , 6 + 152 , 7 @ @ public class Config <nl> public int native _ transport _ max _ frame _ size _ in _ mb = 256 ; <nl> public volatile long native _ transport _ max _ concurrent _ connections = - 1L ; <nl> public volatile long native _ transport _ max _ concurrent _ connections _ per _ ip = - 1L ; <nl> + public boolean native _ transport _ flush _ in _ batches _ legacy = false ; <nl> <nl> / * * <nl> * Max size of values in SSTables , in MegaBytes . <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index aa5ca92 . . eae6fc9 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 1866 , 6 + 1866 , 11 @ @ public class DatabaseDescriptor <nl> conf . native _ transport _ max _ concurrent _ connections _ per _ ip = native _ transport _ max _ concurrent _ connections _ per _ ip ; <nl> } <nl> <nl> + public static boolean useNativeTransportLegacyFlusher ( ) <nl> + { <nl> + return conf . native _ transport _ flush _ in _ batches _ legacy ; <nl> + } <nl> + <nl> public static double getCommitLogSyncGroupWindow ( ) <nl> { <nl> return conf . commitlog _ sync _ group _ window _ in _ ms ; <nl> @ @ - 2644 , 4 + 2649 , 5 @ @ public class DatabaseDescriptor <nl> { <nl> conf . corrupted _ tombstone _ strategy = strategy ; <nl> } <nl> + <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / transport / Message . java b / src / java / org / apache / cassandra / transport / Message . java <nl> index 531909f . . 413c94a 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Message . java <nl> + + + b / src / java / org / apache / cassandra / transport / Message . java <nl> @ @ - 428 , 26 + 428 , 38 @ @ public abstract class Message <nl> } <nl> } <nl> <nl> - private static final class Flusher implements Runnable <nl> + private static abstract class Flusher implements Runnable <nl> { <nl> final EventLoop eventLoop ; <nl> final ConcurrentLinkedQueue < FlushItem > queued = new ConcurrentLinkedQueue < > ( ) ; <nl> - final AtomicBoolean running = new AtomicBoolean ( false ) ; <nl> + final AtomicBoolean scheduled = new AtomicBoolean ( false ) ; <nl> final HashSet < ChannelHandlerContext > channels = new HashSet < > ( ) ; <nl> final List < FlushItem > flushed = new ArrayList < > ( ) ; <nl> - int runsSinceFlush = 0 ; <nl> - int runsWithNoWork = 0 ; <nl> - private Flusher ( EventLoop eventLoop ) <nl> - { <nl> - this . eventLoop = eventLoop ; <nl> - } <nl> + <nl> void start ( ) <nl> { <nl> - if ( ! running . get ( ) & & running . compareAndSet ( false , true ) ) <nl> + if ( ! scheduled . get ( ) & & scheduled . compareAndSet ( false , true ) ) <nl> { <nl> this . eventLoop . execute ( this ) ; <nl> } <nl> } <nl> + <nl> + public Flusher ( EventLoop eventLoop ) <nl> + { <nl> + this . eventLoop = eventLoop ; <nl> + } <nl> + } <nl> + <nl> + private static final class LegacyFlusher extends Flusher <nl> + { <nl> + int runsSinceFlush = 0 ; <nl> + int runsWithNoWork = 0 ; <nl> + <nl> + private LegacyFlusher ( EventLoop eventLoop ) <nl> + { <nl> + super ( eventLoop ) ; <nl> + } <nl> + <nl> public void run ( ) <nl> { <nl> <nl> @ @ - 484 , 8 + 496 , 8 @ @ public abstract class Message <nl> / / either reschedule or cancel <nl> if ( + + runsWithNoWork > 5 ) <nl> { <nl> - running . set ( false ) ; <nl> - if ( queued . isEmpty ( ) | | ! running . compareAndSet ( false , true ) ) <nl> + scheduled . set ( false ) ; <nl> + if ( queued . isEmpty ( ) | | ! scheduled . compareAndSet ( false , true ) ) <nl> return ; <nl> } <nl> } <nl> @ @ - 494 , 11 + 506 , 48 @ @ public abstract class Message <nl> } <nl> } <nl> <nl> + private static final class ImmediateFlusher extends Flusher <nl> + { <nl> + private ImmediateFlusher ( EventLoop eventLoop ) <nl> + { <nl> + super ( eventLoop ) ; <nl> + } <nl> + <nl> + public void run ( ) <nl> + { <nl> + boolean doneWork = false ; <nl> + FlushItem flush ; <nl> + scheduled . set ( false ) ; <nl> + <nl> + while ( null ! = ( flush = queued . poll ( ) ) ) <nl> + { <nl> + channels . add ( flush . ctx ) ; <nl> + flush . ctx . write ( flush . response , flush . ctx . voidPromise ( ) ) ; <nl> + flushed . add ( flush ) ; <nl> + doneWork = true ; <nl> + } <nl> + <nl> + if ( doneWork ) <nl> + { <nl> + for ( ChannelHandlerContext channel : channels ) <nl> + channel . flush ( ) ; <nl> + for ( FlushItem item : flushed ) <nl> + item . sourceFrame . release ( ) ; <nl> + <nl> + channels . clear ( ) ; <nl> + flushed . clear ( ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> private static final ConcurrentMap < EventLoop , Flusher > flusherLookup = new ConcurrentHashMap < > ( ) ; <nl> <nl> - public Dispatcher ( ) <nl> + private final boolean useLegacyFlusher ; <nl> + <nl> + public Dispatcher ( boolean useLegacyFlusher ) <nl> { <nl> super ( false ) ; <nl> + this . useLegacyFlusher = useLegacyFlusher ; <nl> } <nl> <nl> @ Override <nl> @ @ - 548 , 7 + 597 , 8 @ @ public abstract class Message <nl> Flusher flusher = flusherLookup . get ( loop ) ; <nl> if ( flusher = = null ) <nl> { <nl> - Flusher alt = flusherLookup . putIfAbsent ( loop , flusher = new Flusher ( loop ) ) ; <nl> + Flusher created = useLegacyFlusher ? new LegacyFlusher ( loop ) : new ImmediateFlusher ( loop ) ; <nl> + Flusher alt = flusherLookup . putIfAbsent ( loop , flusher = created ) ; <nl> if ( alt ! = null ) <nl> flusher = alt ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java <nl> index 45146c4 . . 0c4b7b8 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Server . java <nl> + + + b / src / java / org / apache / cassandra / transport / Server . java <nl> @ @ - 346 , 7 + 346 , 7 @ @ public class Server implements CassandraDaemon . Server <nl> private static final Frame . Compressor frameCompressor = new Frame . Compressor ( ) ; <nl> private static final Frame . Encoder frameEncoder = new Frame . Encoder ( ) ; <nl> private static final Message . ExceptionHandler exceptionHandler = new Message . ExceptionHandler ( ) ; <nl> - private static final Message . Dispatcher dispatcher = new Message . Dispatcher ( ) ; <nl> + private static final Message . Dispatcher dispatcher = new Message . Dispatcher ( DatabaseDescriptor . useNativeTransportLegacyFlusher ( ) ) ; <nl> private static final ConnectionLimitHandler connectionLimitHandler = new ConnectionLimitHandler ( ) ; <nl> <nl> private final Server server ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 75f41e8 . . c64881a 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Flush netty client messages immediately by default ( CASSANDRA - 13651 ) 
 * Improve read repair blocking behavior ( CASSANDRA - 10726 ) 
 * Add a virtual table to expose settings ( CASSANDRA - 14573 ) 
 * Fix up chunk cache handling of metrics ( CASSANDRA - 14628 ) 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index c7c2785 . . 12f5ab2 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 1222 , 3 + 1222 , 7 @ @ audit _ logging _ options : 
 # If enabled , diagnostic events can be helpful for troubleshooting operational issues . Emitted events contain details 
 # on internal state and temporal relationships across events , accessible by clients via JMX . 
 diagnostic _ events _ enabled : false 
 + 
 + # Define use of legacy delayed flusher for replies to TCP connections . This will increase latency , but might be beneficial for 
 + # legacy use - cases where only a single connection is used for each Cassandra node . Default is false . 
 + # native _ transport _ flush _ in _ batches _ legacy : false 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index 46dbc1c . . f6eefc3 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 152 , 6 + 152 , 7 @ @ public class Config 
 public int native _ transport _ max _ frame _ size _ in _ mb = 256 ; 
 public volatile long native _ transport _ max _ concurrent _ connections = - 1L ; 
 public volatile long native _ transport _ max _ concurrent _ connections _ per _ ip = - 1L ; 
 + public boolean native _ transport _ flush _ in _ batches _ legacy = false ; 
 
 / * * 
 * Max size of values in SSTables , in MegaBytes . 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index aa5ca92 . . eae6fc9 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 1866 , 6 + 1866 , 11 @ @ public class DatabaseDescriptor 
 conf . native _ transport _ max _ concurrent _ connections _ per _ ip = native _ transport _ max _ concurrent _ connections _ per _ ip ; 
 } 
 
 + public static boolean useNativeTransportLegacyFlusher ( ) 
 + { 
 + return conf . native _ transport _ flush _ in _ batches _ legacy ; 
 + } 
 + 
 public static double getCommitLogSyncGroupWindow ( ) 
 { 
 return conf . commitlog _ sync _ group _ window _ in _ ms ; 
 @ @ - 2644 , 4 + 2649 , 5 @ @ public class DatabaseDescriptor 
 { 
 conf . corrupted _ tombstone _ strategy = strategy ; 
 } 
 + 
 } 
 diff - - git a / src / java / org / apache / cassandra / transport / Message . java b / src / java / org / apache / cassandra / transport / Message . java 
 index 531909f . . 413c94a 100644 
 - - - a / src / java / org / apache / cassandra / transport / Message . java 
 + + + b / src / java / org / apache / cassandra / transport / Message . java 
 @ @ - 428 , 26 + 428 , 38 @ @ public abstract class Message 
 } 
 } 
 
 - private static final class Flusher implements Runnable 
 + private static abstract class Flusher implements Runnable 
 { 
 final EventLoop eventLoop ; 
 final ConcurrentLinkedQueue < FlushItem > queued = new ConcurrentLinkedQueue < > ( ) ; 
 - final AtomicBoolean running = new AtomicBoolean ( false ) ; 
 + final AtomicBoolean scheduled = new AtomicBoolean ( false ) ; 
 final HashSet < ChannelHandlerContext > channels = new HashSet < > ( ) ; 
 final List < FlushItem > flushed = new ArrayList < > ( ) ; 
 - int runsSinceFlush = 0 ; 
 - int runsWithNoWork = 0 ; 
 - private Flusher ( EventLoop eventLoop ) 
 - { 
 - this . eventLoop = eventLoop ; 
 - } 
 + 
 void start ( ) 
 { 
 - if ( ! running . get ( ) & & running . compareAndSet ( false , true ) ) 
 + if ( ! scheduled . get ( ) & & scheduled . compareAndSet ( false , true ) ) 
 { 
 this . eventLoop . execute ( this ) ; 
 } 
 } 
 + 
 + public Flusher ( EventLoop eventLoop ) 
 + { 
 + this . eventLoop = eventLoop ; 
 + } 
 + } 
 + 
 + private static final class LegacyFlusher extends Flusher 
 + { 
 + int runsSinceFlush = 0 ; 
 + int runsWithNoWork = 0 ; 
 + 
 + private LegacyFlusher ( EventLoop eventLoop ) 
 + { 
 + super ( eventLoop ) ; 
 + } 
 + 
 public void run ( ) 
 { 
 
 @ @ - 484 , 8 + 496 , 8 @ @ public abstract class Message 
 / / either reschedule or cancel 
 if ( + + runsWithNoWork > 5 ) 
 { 
 - running . set ( false ) ; 
 - if ( queued . isEmpty ( ) | | ! running . compareAndSet ( false , true ) ) 
 + scheduled . set ( false ) ; 
 + if ( queued . isEmpty ( ) | | ! scheduled . compareAndSet ( false , true ) ) 
 return ; 
 } 
 } 
 @ @ - 494 , 11 + 506 , 48 @ @ public abstract class Message 
 } 
 } 
 
 + private static final class ImmediateFlusher extends Flusher 
 + { 
 + private ImmediateFlusher ( EventLoop eventLoop ) 
 + { 
 + super ( eventLoop ) ; 
 + } 
 + 
 + public void run ( ) 
 + { 
 + boolean doneWork = false ; 
 + FlushItem flush ; 
 + scheduled . set ( false ) ; 
 + 
 + while ( null ! = ( flush = queued . poll ( ) ) ) 
 + { 
 + channels . add ( flush . ctx ) ; 
 + flush . ctx . write ( flush . response , flush . ctx . voidPromise ( ) ) ; 
 + flushed . add ( flush ) ; 
 + doneWork = true ; 
 + } 
 + 
 + if ( doneWork ) 
 + { 
 + for ( ChannelHandlerContext channel : channels ) 
 + channel . flush ( ) ; 
 + for ( FlushItem item : flushed ) 
 + item . sourceFrame . release ( ) ; 
 + 
 + channels . clear ( ) ; 
 + flushed . clear ( ) ; 
 + } 
 + } 
 + } 
 + 
 private static final ConcurrentMap < EventLoop , Flusher > flusherLookup = new ConcurrentHashMap < > ( ) ; 
 
 - public Dispatcher ( ) 
 + private final boolean useLegacyFlusher ; 
 + 
 + public Dispatcher ( boolean useLegacyFlusher ) 
 { 
 super ( false ) ; 
 + this . useLegacyFlusher = useLegacyFlusher ; 
 } 
 
 @ Override 
 @ @ - 548 , 7 + 597 , 8 @ @ public abstract class Message 
 Flusher flusher = flusherLookup . get ( loop ) ; 
 if ( flusher = = null ) 
 { 
 - Flusher alt = flusherLookup . putIfAbsent ( loop , flusher = new Flusher ( loop ) ) ; 
 + Flusher created = useLegacyFlusher ? new LegacyFlusher ( loop ) : new ImmediateFlusher ( loop ) ; 
 + Flusher alt = flusherLookup . putIfAbsent ( loop , flusher = created ) ; 
 if ( alt ! = null ) 
 flusher = alt ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java 
 index 45146c4 . . 0c4b7b8 100644 
 - - - a / src / java / org / apache / cassandra / transport / Server . java 
 + + + b / src / java / org / apache / cassandra / transport / Server . java 
 @ @ - 346 , 7 + 346 , 7 @ @ public class Server implements CassandraDaemon . Server 
 private static final Frame . Compressor frameCompressor = new Frame . Compressor ( ) ; 
 private static final Frame . Encoder frameEncoder = new Frame . Encoder ( ) ; 
 private static final Message . ExceptionHandler exceptionHandler = new Message . ExceptionHandler ( ) ; 
 - private static final Message . Dispatcher dispatcher = new Message . Dispatcher ( ) ; 
 + private static final Message . Dispatcher dispatcher = new Message . Dispatcher ( DatabaseDescriptor . useNativeTransportLegacyFlusher ( ) ) ; 
 private static final ConnectionLimitHandler connectionLimitHandler = new ConnectionLimitHandler ( ) ; 
 
 private final Server server ;

NEAREST DIFF:
ELIMINATEDSENTENCE
