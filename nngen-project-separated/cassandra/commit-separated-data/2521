BLEU SCORE: 0.02383853510228548

TEST MSG: Fix column name in invalid constant type error msg
GENERATED MSG: add missing string format specifier char

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cql3 / Constants . java b / src / java / org / apache / cassandra / cql3 / Constants . java <nl> index 5af84f0 . . abd039f 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Constants . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / Constants . java <nl> @ @ - 125 , 7 + 125 , 7 @ @ public abstract class Constants <nl> public Value prepare ( String keyspace , ColumnSpecification receiver ) throws InvalidRequestException <nl> { <nl> if ( ! isAssignableTo ( keyspace , receiver ) ) <nl> - throw new InvalidRequestException ( String . format ( " Invalid % s constant ( % s ) for % s of type % s " , type , text , receiver , receiver . type . asCQL3Type ( ) ) ) ; <nl> + throw new InvalidRequestException ( String . format ( " Invalid % s constant ( % s ) for \ " % s \ " of type % s " , type , text , receiver . name , receiver . type . asCQL3Type ( ) ) ) ; <nl> <nl> return new Value ( parsedValue ( receiver . type ) ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> index 714e308 . . 02d20cf 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> @ @ - 215 , 21 + 215 , 24 @ @ public class CompactionTask extends AbstractCompactionTask <nl> sstable . cacheKey ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> } <nl> <nl> - long dTime = System . currentTimeMillis ( ) - startTime ; <nl> - long startsize = SSTable . getTotalBytes ( toCompact ) ; <nl> - long endsize = SSTable . getTotalBytes ( sstables ) ; <nl> - double ratio = ( double ) endsize / ( double ) startsize ; <nl> - <nl> - StringBuilder builder = new StringBuilder ( ) ; <nl> - builder . append ( " [ " ) ; <nl> - for ( SSTableReader reader : sstables ) <nl> - builder . append ( reader . getFilename ( ) ) . append ( " , " ) ; <nl> - builder . append ( " ] " ) ; <nl> - <nl> - double mbps = dTime > 0 ? ( double ) endsize / ( 1024 * 1024 ) / ( ( double ) dTime / 1000 ) : 0 ; <nl> - logger . info ( String . format ( " Compacted to % s . % , d to % , d ( ~ % d % % of original ) bytes for % , d keys at % fMB / s . Time : % , dms . " , <nl> - builder . toString ( ) , startsize , endsize , ( int ) ( ratio * 100 ) , totalkeysWritten , mbps , dTime ) ) ; <nl> - logger . debug ( String . format ( " CF Total Bytes Compacted : % , d " , CompactionTask . addToTotalBytesCompacted ( endsize ) ) ) ; <nl> + if ( logger . isInfoEnabled ( ) ) <nl> + { <nl> + long dTime = System . currentTimeMillis ( ) - startTime ; <nl> + long startsize = SSTable . getTotalBytes ( toCompact ) ; <nl> + long endsize = SSTable . getTotalBytes ( sstables ) ; <nl> + double ratio = ( double ) endsize / ( double ) startsize ; <nl> + <nl> + StringBuilder builder = new StringBuilder ( ) ; <nl> + builder . append ( " [ " ) ; <nl> + for ( SSTableReader reader : sstables ) <nl> + builder . append ( reader . getFilename ( ) ) . append ( " , " ) ; <nl> + builder . append ( " ] " ) ; <nl> + <nl> + double mbps = dTime > 0 ? ( double ) endsize / ( 1024 * 1024 ) / ( ( double ) dTime / 1000 ) : 0 ; <nl> + logger . info ( String . format ( " Compacted to % s . % , d to % , d ( ~ % d % % of original ) bytes for % , d keys at % fMB / s . Time : % , dms . " , <nl> + builder . toString ( ) , startsize , endsize , ( int ) ( ratio * 100 ) , totalkeysWritten , mbps , dTime ) ) ; <nl> + logger . debug ( String . format ( " CF Total Bytes Compacted : % , d " , CompactionTask . addToTotalBytesCompacted ( endsize ) ) ) ; <nl> + } <nl> return toCompact . size ( ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / cql3 / Constants . java b / src / java / org / apache / cassandra / cql3 / Constants . java 
 index 5af84f0 . . abd039f 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Constants . java 
 + + + b / src / java / org / apache / cassandra / cql3 / Constants . java 
 @ @ - 125 , 7 + 125 , 7 @ @ public abstract class Constants 
 public Value prepare ( String keyspace , ColumnSpecification receiver ) throws InvalidRequestException 
 { 
 if ( ! isAssignableTo ( keyspace , receiver ) ) 
 - throw new InvalidRequestException ( String . format ( " Invalid % s constant ( % s ) for % s of type % s " , type , text , receiver , receiver . type . asCQL3Type ( ) ) ) ; 
 + throw new InvalidRequestException ( String . format ( " Invalid % s constant ( % s ) for \ " % s \ " of type % s " , type , text , receiver . name , receiver . type . asCQL3Type ( ) ) ) ; 
 
 return new Value ( parsedValue ( receiver . type ) ) ; 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 index 714e308 . . 02d20cf 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 @ @ - 215 , 21 + 215 , 24 @ @ public class CompactionTask extends AbstractCompactionTask 
 sstable . cacheKey ( entry . getKey ( ) , entry . getValue ( ) ) ; 
 } 
 
 - long dTime = System . currentTimeMillis ( ) - startTime ; 
 - long startsize = SSTable . getTotalBytes ( toCompact ) ; 
 - long endsize = SSTable . getTotalBytes ( sstables ) ; 
 - double ratio = ( double ) endsize / ( double ) startsize ; 
 - 
 - StringBuilder builder = new StringBuilder ( ) ; 
 - builder . append ( " [ " ) ; 
 - for ( SSTableReader reader : sstables ) 
 - builder . append ( reader . getFilename ( ) ) . append ( " , " ) ; 
 - builder . append ( " ] " ) ; 
 - 
 - double mbps = dTime > 0 ? ( double ) endsize / ( 1024 * 1024 ) / ( ( double ) dTime / 1000 ) : 0 ; 
 - logger . info ( String . format ( " Compacted to % s . % , d to % , d ( ~ % d % % of original ) bytes for % , d keys at % fMB / s . Time : % , dms . " , 
 - builder . toString ( ) , startsize , endsize , ( int ) ( ratio * 100 ) , totalkeysWritten , mbps , dTime ) ) ; 
 - logger . debug ( String . format ( " CF Total Bytes Compacted : % , d " , CompactionTask . addToTotalBytesCompacted ( endsize ) ) ) ; 
 + if ( logger . isInfoEnabled ( ) ) 
 + { 
 + long dTime = System . currentTimeMillis ( ) - startTime ; 
 + long startsize = SSTable . getTotalBytes ( toCompact ) ; 
 + long endsize = SSTable . getTotalBytes ( sstables ) ; 
 + double ratio = ( double ) endsize / ( double ) startsize ; 
 + 
 + StringBuilder builder = new StringBuilder ( ) ; 
 + builder . append ( " [ " ) ; 
 + for ( SSTableReader reader : sstables ) 
 + builder . append ( reader . getFilename ( ) ) . append ( " , " ) ; 
 + builder . append ( " ] " ) ; 
 + 
 + double mbps = dTime > 0 ? ( double ) endsize / ( 1024 * 1024 ) / ( ( double ) dTime / 1000 ) : 0 ; 
 + logger . info ( String . format ( " Compacted to % s . % , d to % , d ( ~ % d % % of original ) bytes for % , d keys at % fMB / s . Time : % , dms . " , 
 + builder . toString ( ) , startsize , endsize , ( int ) ( ratio * 100 ) , totalkeysWritten , mbps , dTime ) ) ; 
 + logger . debug ( String . format ( " CF Total Bytes Compacted : % , d " , CompactionTask . addToTotalBytesCompacted ( endsize ) ) ) ; 
 + } 
 return toCompact . size ( ) ; 
 } 

