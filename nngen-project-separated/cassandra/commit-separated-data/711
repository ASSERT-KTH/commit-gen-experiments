BLEU SCORE: 0.00616106750922248

TEST MSG: NullPointerException during compaction on table with static columns
GENERATED MSG: Exclude localTimestamp from merkle tree calculation for tombstones patch by Christian Spriegel ; reviewed by yukim for CASSANDRA - 5398

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 49733d3 . . 046c8b3 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 9 <nl> + * NullPointerException during compaction on table with static columns ( CASSANDRA - 12336 ) <nl> * Fixed ConcurrentModificationException when reading metrics in GraphiteReporter ( CASSANDRA - 11823 ) <nl> * Fix upgrade of super columns on thrift ( CASSANDRA - 12335 ) <nl> * Fixed flacky BlacklistingCompactionsTest , switched to fixed size types and increased corruption size ( CASSANDRA - 12359 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / transform / BaseRows . java b / src / java / org / apache / cassandra / db / transform / BaseRows . java <nl> index 7b0bb99 . . 0586840 100644 <nl> - - - a / src / java / org / apache / cassandra / db / transform / BaseRows . java <nl> + + + b / src / java / org / apache / cassandra / db / transform / BaseRows . java <nl> @ @ - 102 , 7 + 102 , 8 @ @ implements BaseRowIterator < R > <nl> super . add ( transformation ) ; <nl> <nl> / / transform any existing data <nl> - staticRow = transformation . applyToStatic ( staticRow ) ; <nl> + if ( staticRow ! = null ) <nl> + staticRow = transformation . applyToStatic ( staticRow ) ; <nl> next = applyOne ( next , transformation ) ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / StaticColumnsTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / StaticColumnsTest . java <nl> index 75cbcc7 . . efa48ae 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / StaticColumnsTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / StaticColumnsTest . java <nl> @ @ - 286 , 6 + 286 , 8 @ @ public class StaticColumnsTest extends CQLTester <nl> <nl> flush ( ) ; <nl> <nl> + Thread . sleep ( 1000 ) ; <nl> + <nl> compact ( ) ; <nl> <nl> assertRows ( execute ( " SELECT * FROM % s " ) , row ( " k1 " , " c1 " , null , " v1 " ) ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index fd85dab . . b765896 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 <nl> + * Removed on - heap row cache ( CASSANDRA - 5348 ) <nl> * use nanotime consistently for node - local timeouts ( CASSANDRA - 5581 ) <nl> * Avoid unnecessary second pass on name - based queries ( CASSANDRA - 5577 ) <nl> * Experimental triggers ( CASSANDRA - 1311 ) <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index 1192442 . . f8cf4f7 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 170 , 24 + 170 , 6 @ @ row _ cache _ save _ period : 0 <nl> # Disabled by default , meaning all keys are going to be saved <nl> # row _ cache _ keys _ to _ save : 100 <nl> <nl> - # The provider for the row cache to use . <nl> - # <nl> - # Supported values are : ConcurrentLinkedHashCacheProvider , SerializingCacheProvider <nl> - # <nl> - # SerializingCacheProvider serialises the contents of the row and stores <nl> - # it in native memory , i . e . , off the JVM Heap . Serialized rows take <nl> - # significantly less memory than " live " rows in the JVM , so you can cache <nl> - # more rows in a given memory footprint . And storing the cache off - heap <nl> - # means you can use smaller heap sizes , reducing the impact of GC pauses . <nl> - # Note however that when a row is requested from the row cache , it must be <nl> - # deserialized into the heap for use . <nl> - # <nl> - # It is also valid to specify the fully - qualified class name to a class <nl> - # that implements org . apache . cassandra . cache . IRowCacheProvider . <nl> - # <nl> - # Defaults to SerializingCacheProvider <nl> - row _ cache _ provider : SerializingCacheProvider <nl> - <nl> # The off - heap memory allocator . Affects storage engine metadata as <nl> # well as caches . Experiments show that JEMAlloc saves some memory <nl> # than the native GCC allocator ( i . e . , JEMalloc is more <nl> diff - - git a / src / java / org / apache / cassandra / cache / ConcurrentLinkedHashCache . java b / src / java / org / apache / cassandra / cache / ConcurrentLinkedHashCache . java <nl> index af6549d . . f1e0466 100644 <nl> - - - a / src / java / org / apache / cassandra / cache / ConcurrentLinkedHashCache . java <nl> + + + b / src / java / org / apache / cassandra / cache / ConcurrentLinkedHashCache . java <nl> @ @ - 130 , 9 + 130 , 4 @ @ public class ConcurrentLinkedHashCache < K extends IMeasurableMemory , V extends IM <nl> { <nl> return map . containsKey ( key ) ; <nl> } <nl> - <nl> - public boolean isPutCopying ( ) <nl> - { <nl> - return false ; <nl> - } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cache / ConcurrentLinkedHashCacheProvider . java b / src / java / org / apache / cassandra / cache / ConcurrentLinkedHashCacheProvider . java <nl> deleted file mode 100644 <nl> index e1e06ee . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / cache / ConcurrentLinkedHashCacheProvider . java <nl> + + + / dev / null <nl> @ @ - 1 , 26 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . cache ; <nl> - <nl> - public class ConcurrentLinkedHashCacheProvider implements IRowCacheProvider <nl> - { <nl> - public ICache < RowCacheKey , IRowCacheEntry > create ( long capacity ) <nl> - { <nl> - return ConcurrentLinkedHashCache . create ( capacity ) ; <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / cache / ICache . java b / src / java / org / apache / cassandra / cache / ICache . java <nl> index 81ffe62 . . 22dbb16 100644 <nl> - - - a / src / java / org / apache / cassandra / cache / ICache . java <nl> + + + b / src / java / org / apache / cassandra / cache / ICache . java <nl> @ @ - 51 , 10 + 51 , 4 @ @ public interface ICache < K , V > <nl> public Set < K > hotKeySet ( int n ) ; <nl> <nl> public boolean containsKey ( K key ) ; <nl> - <nl> - / * * <nl> - * @ return true if the cache implementation inherently copies the cached values ; otherwise , <nl> - * the caller should copy manually before caching shared values like Thrift ByteBuffers . <nl> - * / <nl> - public boolean isPutCopying ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cache / IRowCacheProvider . java b / src / java / org / apache / cassandra / cache / IRowCacheProvider . java <nl> deleted file mode 100644 <nl> index 003bfae . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / cache / IRowCacheProvider . java <nl> + + + / dev / null <nl> @ @ - 1 , 26 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . cache ; <nl> - <nl> - / * * <nl> - * Provides cache objects with a requested capacity . <nl> - * / <nl> - public interface IRowCacheProvider <nl> - { <nl> - public ICache < RowCacheKey , IRowCacheEntry > create ( long capacity ) ; <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / cache / InstrumentingCache . java b / src / java / org / apache / cassandra / cache / InstrumentingCache . java <nl> index 9655e8d . . 311b373 100644 <nl> - - - a / src / java / org / apache / cassandra / cache / InstrumentingCache . java <nl> + + + b / src / java / org / apache / cassandra / cache / InstrumentingCache . java <nl> @ @ - 125 , 11 + 125 , 6 @ @ public class InstrumentingCache < K , V > <nl> return map . containsKey ( key ) ; <nl> } <nl> <nl> - public boolean isPutCopying ( ) <nl> - { <nl> - return map . isPutCopying ( ) ; <nl> - } <nl> - <nl> public CacheMetrics getMetrics ( ) <nl> { <nl> return metrics ; <nl> diff - - git a / src / java / org / apache / cassandra / cache / SerializingCache . java b / src / java / org / apache / cassandra / cache / SerializingCache . java <nl> index c7430d2 . . 2210f10 100644 <nl> - - - a / src / java / org / apache / cassandra / cache / SerializingCache . java <nl> + + + b / src / java / org / apache / cassandra / cache / SerializingCache . java <nl> @ @ - 249 , 9 + 249 , 4 @ @ public class SerializingCache < K , V > implements ICache < K , V > <nl> { <nl> return map . containsKey ( key ) ; <nl> } <nl> - <nl> - public boolean isPutCopying ( ) <nl> - { <nl> - return true ; <nl> - } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cache / SerializingCacheProvider . java b / src / java / org / apache / cassandra / cache / SerializingCacheProvider . java <nl> index 1ee211d . . 84c948e 100644 <nl> - - - a / src / java / org / apache / cassandra / cache / SerializingCacheProvider . java <nl> + + + b / src / java / org / apache / cassandra / cache / SerializingCacheProvider . java <nl> @ @ - 26 , 7 + 26 , 7 @ @ import org . apache . cassandra . db . TypeSizes ; <nl> import org . apache . cassandra . io . ISerializer ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> <nl> - public class SerializingCacheProvider implements IRowCacheProvider <nl> + public class SerializingCacheProvider <nl> { <nl> public ICache < RowCacheKey , IRowCacheEntry > create ( long capacity ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index 31bf20e . . d691681 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 17 , 7 + 17 , 6 @ @ <nl> * / <nl> package org . apache . cassandra . config ; <nl> <nl> - import org . apache . cassandra . cache . SerializingCacheProvider ; <nl> import org . apache . cassandra . config . EncryptionOptions . ClientEncryptionOptions ; <nl> import org . apache . cassandra . config . EncryptionOptions . ServerEncryptionOptions ; <nl> import org . apache . cassandra . io . util . NativeAllocator ; <nl> @ @ - 164 , 7 + 163 , 6 @ @ public class Config <nl> public long row _ cache _ size _ in _ mb = 0 ; <nl> public volatile int row _ cache _ save _ period = 0 ; <nl> public int row _ cache _ keys _ to _ save = Integer . MAX _ VALUE ; <nl> - public String row _ cache _ provider = SerializingCacheProvider . class . getSimpleName ( ) ; <nl> public String memory _ allocator = NativeAllocator . class . getSimpleName ( ) ; <nl> public boolean populate _ io _ cache _ on _ flush = false ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index b33f6fd . . 7a13d13 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 30 , 7 + 30 , 6 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . auth . * ; <nl> - import org . apache . cassandra . cache . IRowCacheProvider ; <nl> import org . apache . cassandra . config . Config . RequestSchedulerId ; <nl> import org . apache . cassandra . config . EncryptionOptions . ClientEncryptionOptions ; <nl> import org . apache . cassandra . config . EncryptionOptions . ServerEncryptionOptions ; <nl> @ @ - 79 , 7 + 78 , 6 @ @ public class DatabaseDescriptor <nl> private static RequestSchedulerOptions requestSchedulerOptions ; <nl> <nl> private static long keyCacheSizeInMB ; <nl> - private static IRowCacheProvider rowCacheProvider ; <nl> private static IAllocator memoryAllocator ; <nl> <nl> private static String localDC ; <nl> @ @ - 428 , 7 + 426 , 6 @ @ public class DatabaseDescriptor <nl> + conf . key _ cache _ size _ in _ mb + " ' , supported values are < integer > > = 0 . " ) ; <nl> } <nl> <nl> - rowCacheProvider = FBUtilities . newCacheProvider ( conf . row _ cache _ provider ) ; <nl> memoryAllocator = FBUtilities . newOffHeapAllocator ( conf . memory _ allocator ) ; <nl> <nl> if ( conf . encryption _ options ! = null ) <nl> @ @ - 1166 , 11 + 1163 , 6 @ @ public class DatabaseDescriptor <nl> return conf . row _ cache _ keys _ to _ save ; <nl> } <nl> <nl> - public static IRowCacheProvider getRowCacheProvider ( ) <nl> - { <nl> - return rowCacheProvider ; <nl> - } <nl> - <nl> public static IAllocator getoffHeapMemoryAllocator ( ) <nl> { <nl> return memoryAllocator ; <nl> diff - - git a / src / java / org / apache / cassandra / db / CollationController . java b / src / java / org / apache / cassandra / db / CollationController . java <nl> index 0482c47 . . eb5192e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CollationController . java <nl> + + + b / src / java / org / apache / cassandra / db / CollationController . java <nl> @ @ - 41 , 20 + 41 , 15 @ @ public class CollationController <nl> <nl> private final ColumnFamilyStore cfs ; <nl> private final QueryFilter filter ; <nl> - private final ColumnFamily . Factory factory ; <nl> private final int gcBefore ; <nl> <nl> private int sstablesIterated = 0 ; <nl> <nl> - public CollationController ( ColumnFamilyStore cfs , boolean mutableColumns , QueryFilter filter , int gcBefore ) <nl> + public CollationController ( ColumnFamilyStore cfs , QueryFilter filter , int gcBefore ) <nl> { <nl> this . cfs = cfs ; <nl> this . filter = filter ; <nl> this . gcBefore = gcBefore ; <nl> - <nl> - this . factory = mutableColumns <nl> - ? AtomicSortedColumns . factory <nl> - : ArrayBackedSortedColumns . factory ; <nl> } <nl> <nl> public ColumnFamily getTopLevelColumns ( ) <nl> @ @ - 73 , 7 + 68 , 7 @ @ public class CollationController <nl> private ColumnFamily collectTimeOrderedData ( ) <nl> { <nl> logger . trace ( " collectTimeOrderedData " ) ; <nl> - final ColumnFamily container = factory . create ( cfs . metadata , filter . filter . isReversed ( ) ) ; <nl> + final ColumnFamily container = ArrayBackedSortedColumns . factory . create ( cfs . metadata , filter . filter . isReversed ( ) ) ; <nl> List < OnDiskAtomIterator > iterators = new ArrayList < OnDiskAtomIterator > ( ) ; <nl> Tracing . trace ( " Acquiring sstable references " ) ; <nl> ColumnFamilyStore . ViewFragment view = cfs . markReferenced ( filter . key ) ; <nl> @ @ - 223 , 7 + 218 , 7 @ @ public class CollationController <nl> Tracing . trace ( " Acquiring sstable references " ) ; <nl> ColumnFamilyStore . ViewFragment view = cfs . markReferenced ( filter . key ) ; <nl> List < OnDiskAtomIterator > iterators = new ArrayList < OnDiskAtomIterator > ( Iterables . size ( view . memtables ) + view . sstables . size ( ) ) ; <nl> - ColumnFamily returnCF = factory . create ( cfs . metadata , filter . filter . isReversed ( ) ) ; <nl> + ColumnFamily returnCF = ArrayBackedSortedColumns . factory . create ( cfs . metadata , filter . filter . isReversed ( ) ) ; <nl> <nl> try <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 892e35f . . 78825cf 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 808 , 29 + 808 , 13 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> FBUtilities . waitOnFuture ( forceFlush ( ) ) ; <nl> } <nl> <nl> - public void maybeUpdateRowCache ( DecoratedKey key , ColumnFamily columnFamily ) <nl> + public void maybeUpdateRowCache ( DecoratedKey key ) <nl> { <nl> if ( ! isRowCacheEnabled ( ) ) <nl> return ; <nl> <nl> RowCacheKey cacheKey = new RowCacheKey ( metadata . cfId , key ) ; <nl> - <nl> - / / always invalidate a copying cache value <nl> - if ( CacheService . instance . rowCache . isPutCopying ( ) ) <nl> - { <nl> - invalidateCachedRow ( cacheKey ) ; <nl> - return ; <nl> - } <nl> - <nl> - / / invalidate a normal cache value if it ' s a sentinel , so the read will retry ( and include the new update ) <nl> - IRowCacheEntry cachedRow = CacheService . instance . rowCache . getInternal ( cacheKey ) ; <nl> - if ( cachedRow ! = null ) <nl> - { <nl> - if ( cachedRow instanceof RowCacheSentinel ) <nl> - invalidateCachedRow ( cacheKey ) ; <nl> - else <nl> - ( ( ColumnFamily ) cachedRow ) . addAll ( columnFamily , HeapAllocator . instance ) ; <nl> - } <nl> + invalidateCachedRow ( cacheKey ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 846 , 7 + 830 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> Memtable mt = getMemtableThreadSafe ( ) ; <nl> mt . put ( key , columnFamily , indexer ) ; <nl> - maybeUpdateRowCache ( key , columnFamily ) ; <nl> + maybeUpdateRowCache ( key ) ; <nl> metric . writeLatency . addNano ( System . nanoTime ( ) - start ) ; <nl> <nl> / / recompute liveRatio , if we have doubled the number of ops since last calculated <nl> @ @ - 1239 , 7 + 1223 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> / / Some other read is trying to cache the value , just do a normal non - caching read <nl> Tracing . trace ( " Row cache miss ( race ) " ) ; <nl> - return getTopLevelColumns ( filter , Integer . MIN _ VALUE , false ) ; <nl> + return getTopLevelColumns ( filter , Integer . MIN _ VALUE ) ; <nl> } <nl> Tracing . trace ( " Row cache hit " ) ; <nl> return ( ColumnFamily ) cached ; <nl> @ @ - 1251 , 9 + 1235 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> try <nl> { <nl> - ColumnFamily data = getTopLevelColumns ( QueryFilter . getIdentityFilter ( filter . key , name ) , <nl> - Integer . MIN _ VALUE , <nl> - true ) ; <nl> + ColumnFamily data = getTopLevelColumns ( QueryFilter . getIdentityFilter ( filter . key , name ) , Integer . MIN _ VALUE ) ; <nl> if ( sentinelSuccess & & data ! = null ) <nl> CacheService . instance . rowCache . replace ( key , sentinel , data ) ; <nl> <nl> @ @ - 1295 , 7 + 1277 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> else <nl> { <nl> - ColumnFamily cf = getTopLevelColumns ( filter , gcBefore , false ) ; <nl> + ColumnFamily cf = getTopLevelColumns ( filter , gcBefore ) ; <nl> <nl> if ( cf = = null ) <nl> return null ; <nl> @ @ - 1462 , 13 + 1444 , 10 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> - public ColumnFamily getTopLevelColumns ( QueryFilter filter , int gcBefore , boolean forCache ) <nl> + public ColumnFamily getTopLevelColumns ( QueryFilter filter , int gcBefore ) <nl> { <nl> Tracing . trace ( " Executing single - partition query on { } " , name ) ; <nl> - CollationController controller = new CollationController ( this , <nl> - forCache & & ! CacheService . instance . rowCache . isPutCopying ( ) , <nl> - filter , <nl> - gcBefore ) ; <nl> + CollationController controller = new CollationController ( this , filter , gcBefore ) ; <nl> ColumnFamily columns = controller . getTopLevelColumns ( ) ; <nl> metric . updateSSTableIterated ( controller . getSstablesIterated ( ) ) ; <nl> return columns ; <nl> @ @ - 1727 , 8 + 1706 , 8 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> * / <nl> public ColumnFamily getRawCachedRow ( DecoratedKey key ) <nl> { <nl> - if ( ! isRowCacheEnabled ( ) | | metadata . cfId = = null ) <nl> - return null ; / / secondary index <nl> + if ( ! isRowCacheEnabled ( ) ) <nl> + return null ; <nl> <nl> IRowCacheEntry cached = CacheService . instance . rowCache . getInternal ( new RowCacheKey ( metadata . cfId , key ) ) ; <nl> return cached = = null | | cached instanceof RowCacheSentinel ? null : ( ColumnFamily ) cached ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionController . java b / src / java / org / apache / cassandra / db / compaction / CompactionController . java <nl> index fd23882 . . 15878c5 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionController . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionController . java <nl> @ @ - 177 , 20 + 177 , 6 @ @ public class CompactionController <nl> cfs . invalidateCachedRow ( key ) ; <nl> } <nl> <nl> - public void removeDeletedInCache ( DecoratedKey key ) <nl> - { <nl> - / / For the copying cache , we ' d need to re - serialize the updated cachedRow , which would be racy <nl> - / / vs other updates . We ' ll just ignore it instead , since the next update to this row will invalidate it <nl> - / / anyway , so the odds of a " tombstones consuming memory indefinitely " problem are minimal . <nl> - / / See https : / / issues . apache . org / jira / browse / CASSANDRA - 3921 for more discussion . <nl> - if ( CacheService . instance . rowCache . isPutCopying ( ) ) <nl> - return ; <nl> - <nl> - ColumnFamily cachedRow = cfs . getRawCachedRow ( key ) ; <nl> - if ( cachedRow ! = null ) <nl> - ColumnFamilyStore . removeDeleted ( cachedRow , gcBefore ) ; <nl> - } <nl> - <nl> / * * <nl> * @ return an AbstractCompactedRow implementation to write the merged rows in question . <nl> * <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> index 13fc11d . . d6fd171 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> @ @ - 165 , 9 + 165 , 6 @ @ public class CompactionTask extends AbstractCompactionTask <nl> continue ; <nl> } <nl> <nl> - / / If the row is cached , we call removeDeleted on at read time it to have coherent query returns , <nl> - / / but if the row is not pushed out of the cache , obsolete tombstones will persist indefinitely . <nl> - controller . removeDeletedInCache ( row . key ) ; <nl> totalkeysWritten + + ; <nl> <nl> if ( DatabaseDescriptor . getPreheatKeyCache ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / service / CacheService . java b / src / java / org / apache / cassandra / service / CacheService . java <nl> index 5eff28a . . d301507 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CacheService . java <nl> + + + b / src / java / org / apache / cassandra / service / CacheService . java <nl> @ @ - 130 , 14 + 130 , 12 @ @ public class CacheService implements CacheServiceMBean <nl> * / <nl> private AutoSavingCache < RowCacheKey , IRowCacheEntry > initRowCache ( ) <nl> { <nl> - logger . info ( " Initializing row cache with capacity of { } MBs and provider { } " , <nl> - DatabaseDescriptor . getRowCacheSizeInMB ( ) , <nl> - DatabaseDescriptor . getRowCacheProvider ( ) . getClass ( ) . getName ( ) ) ; <nl> + logger . info ( " Initializing row cache with capacity of { } MBs " , DatabaseDescriptor . getRowCacheSizeInMB ( ) ) ; <nl> <nl> long rowCacheInMemoryCapacity = DatabaseDescriptor . getRowCacheSizeInMB ( ) * 1024 * 1024 ; <nl> <nl> / / cache object <nl> - ICache < RowCacheKey , IRowCacheEntry > rc = DatabaseDescriptor . getRowCacheProvider ( ) . create ( rowCacheInMemoryCapacity ) ; <nl> + ICache < RowCacheKey , IRowCacheEntry > rc = new SerializingCacheProvider ( ) . create ( rowCacheInMemoryCapacity ) ; <nl> AutoSavingCache < RowCacheKey , IRowCacheEntry > rowCache = new AutoSavingCache < RowCacheKey , IRowCacheEntry > ( rc , CacheType . ROW _ CACHE , new RowCacheSerializer ( ) ) ; <nl> <nl> int rowCacheKeysToSave = DatabaseDescriptor . getRowCacheKeysToSave ( ) ; <nl> @ @ - 302 , 7 + 300 , 7 @ @ public class CacheService implements CacheServiceMBean <nl> public Pair < RowCacheKey , IRowCacheEntry > call ( ) throws Exception <nl> { <nl> DecoratedKey key = cfs . partitioner . decorateKey ( buffer ) ; <nl> - ColumnFamily data = cfs . getTopLevelColumns ( QueryFilter . getIdentityFilter ( key , cfs . name ) , Integer . MIN _ VALUE , true ) ; <nl> + ColumnFamily data = cfs . getTopLevelColumns ( QueryFilter . getIdentityFilter ( key , cfs . name ) , Integer . MIN _ VALUE ) ; <nl> return Pair . create ( new RowCacheKey ( cfs . metadata . cfId , key ) , ( IRowCacheEntry ) data ) ; <nl> } <nl> } ) ; <nl> @ @ - 313 , 7 + 311 , 7 @ @ public class CacheService implements CacheServiceMBean <nl> for ( ByteBuffer key : buffers ) <nl> { <nl> DecoratedKey dk = cfs . partitioner . decorateKey ( key ) ; <nl> - ColumnFamily data = cfs . getTopLevelColumns ( QueryFilter . getIdentityFilter ( dk , cfs . name ) , Integer . MIN _ VALUE , true ) ; <nl> + ColumnFamily data = cfs . getTopLevelColumns ( QueryFilter . getIdentityFilter ( dk , cfs . name ) , Integer . MIN _ VALUE ) ; <nl> if ( data ! = null ) <nl> rowCache . put ( new RowCacheKey ( cfs . metadata . cfId , dk ) , data ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> index eeeb41f . . 027f74a 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> @ @ - 41 , 7 + 41 , 6 @ @ import org . apache . commons . lang . StringUtils ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import org . apache . cassandra . cache . IRowCacheProvider ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . DecoratedKey ; <nl> @ @ - 500 , 13 + 499 , 6 @ @ public class FBUtilities <nl> return field ; <nl> } <nl> <nl> - public static IRowCacheProvider newCacheProvider ( String cache _ provider ) throws ConfigurationException <nl> - { <nl> - if ( ! cache _ provider . contains ( " . " ) ) <nl> - cache _ provider = " org . apache . cassandra . cache . " + cache _ provider ; <nl> - return FBUtilities . construct ( cache _ provider , " row cache provider " ) ; <nl> - } <nl> - <nl> public static < T > CloseableIterator < T > closeableIterator ( Iterator < T > iterator ) <nl> { <nl> return new WrappedCloseableIterator < T > ( iterator ) ; <nl> diff - - git a / src / java / org / apache / cassandra / utils / StatusLogger . java b / src / java / org / apache / cassandra / utils / StatusLogger . java <nl> index b7266cb . . 94f045e 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / StatusLogger . java <nl> + + + b / src / java / org / apache / cassandra / utils / StatusLogger . java <nl> @ @ - 26 , 10 + 26 , 8 @ @ import javax . management . ObjectName ; <nl> <nl> import com . google . common . collect . Iterables ; <nl> <nl> - import org . apache . cassandra . cache . AutoSavingCache ; <nl> - import org . apache . cassandra . cache . IRowCacheEntry ; <nl> - import org . apache . cassandra . cache . KeyCacheKey ; <nl> - import org . apache . cassandra . cache . RowCacheKey ; <nl> + import org . apache . cassandra . cache . * ; <nl> + <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 92 , 18 + 90 , 19 @ @ public class StatusLogger <nl> int keyCacheKeysToSave = DatabaseDescriptor . getKeyCacheKeysToSave ( ) ; <nl> int rowCacheKeysToSave = DatabaseDescriptor . getRowCacheKeysToSave ( ) ; <nl> <nl> - logger . info ( String . format ( " % - 25s % 10s % 25s % 25s % 65s " , " Cache Type " , " Size " , " Capacity " , " KeysToSave " , " Provider " ) ) ; <nl> - logger . info ( String . format ( " % - 25s % 10s % 25s % 25s % 65s " , " KeyCache " , <nl> - keyCache . weightedSize ( ) , <nl> - keyCache . getCapacity ( ) , <nl> - keyCacheKeysToSave = = Integer . MAX _ VALUE ? " all " : keyCacheKeysToSave , <nl> - " " ) ) ; <nl> + logger . info ( String . format ( " % - 25s % 10s % 25s % 25s " , <nl> + " Cache Type " , " Size " , " Capacity " , " KeysToSave " ) ) ; <nl> + logger . info ( String . format ( " % - 25s % 10s % 25s % 25s " , <nl> + " KeyCache " , <nl> + keyCache . weightedSize ( ) , <nl> + keyCache . getCapacity ( ) , <nl> + keyCacheKeysToSave = = Integer . MAX _ VALUE ? " all " : keyCacheKeysToSave ) ) ; <nl> <nl> - logger . info ( String . format ( " % - 25s % 10s % 25s % 25s % 65s " , " RowCache " , <nl> - rowCache . weightedSize ( ) , <nl> - rowCache . getCapacity ( ) , <nl> - rowCacheKeysToSave = = Integer . MAX _ VALUE ? " all " : rowCacheKeysToSave , <nl> - DatabaseDescriptor . getRowCacheProvider ( ) . getClass ( ) . getName ( ) ) ) ; <nl> + logger . info ( String . format ( " % - 25s % 10s % 25s % 25s " , <nl> + " RowCache " , <nl> + rowCache . weightedSize ( ) , <nl> + rowCache . getCapacity ( ) , <nl> + rowCacheKeysToSave = = Integer . MAX _ VALUE ? " all " : rowCacheKeysToSave ) ) ; <nl> <nl> / / per - CF stats <nl> logger . info ( String . format ( " % - 25s % 20s " , " ColumnFamily " , " Memtable ops , data " ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / CollationControllerTest . java b / test / unit / org / apache / cassandra / db / CollationControllerTest . java <nl> index 4ef8d64 . . f835ad3 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / CollationControllerTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / CollationControllerTest . java <nl> @ @ - 70 , 7 + 70 , 7 @ @ public class CollationControllerTest extends SchemaLoader <nl> / / A NamesQueryFilter goes down one code path ( through collectTimeOrderedData ( ) ) <nl> / / It should only iterate the last flushed sstable , since it probably contains the most recent value for Column1 <nl> QueryFilter filter = QueryFilter . getNamesFilter ( dk , " Standard1 " , ByteBufferUtil . bytes ( " Column1 " ) ) ; <nl> - CollationController controller = new CollationController ( store , false , filter , Integer . MIN _ VALUE ) ; <nl> + CollationController controller = new CollationController ( store , filter , Integer . MIN _ VALUE ) ; <nl> controller . getTopLevelColumns ( ) ; <nl> assertEquals ( 1 , controller . getSstablesIterated ( ) ) ; <nl> <nl> @ @ - 78 , 7 + 78 , 7 @ @ public class CollationControllerTest extends SchemaLoader <nl> / / We will read " only " the last sstable in that case , but because the 2nd sstable has a tombstone that is more <nl> / / recent than the maxTimestamp of the very first sstable we flushed , we should only read the 2 first sstables . <nl> filter = QueryFilter . getIdentityFilter ( dk , " Standard1 " ) ; <nl> - controller = new CollationController ( store , false , filter , Integer . MIN _ VALUE ) ; <nl> + controller = new CollationController ( store , filter , Integer . MIN _ VALUE ) ; <nl> controller . getTopLevelColumns ( ) ; <nl> assertEquals ( 2 , controller . getSstablesIterated ( ) ) ; <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 49733d3 . . 046c8b3 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 9 
 + * NullPointerException during compaction on table with static columns ( CASSANDRA - 12336 ) 
 * Fixed ConcurrentModificationException when reading metrics in GraphiteReporter ( CASSANDRA - 11823 ) 
 * Fix upgrade of super columns on thrift ( CASSANDRA - 12335 ) 
 * Fixed flacky BlacklistingCompactionsTest , switched to fixed size types and increased corruption size ( CASSANDRA - 12359 ) 
 diff - - git a / src / java / org / apache / cassandra / db / transform / BaseRows . java b / src / java / org / apache / cassandra / db / transform / BaseRows . java 
 index 7b0bb99 . . 0586840 100644 
 - - - a / src / java / org / apache / cassandra / db / transform / BaseRows . java 
 + + + b / src / java / org / apache / cassandra / db / transform / BaseRows . java 
 @ @ - 102 , 7 + 102 , 8 @ @ implements BaseRowIterator < R > 
 super . add ( transformation ) ; 
 
 / / transform any existing data 
 - staticRow = transformation . applyToStatic ( staticRow ) ; 
 + if ( staticRow ! = null ) 
 + staticRow = transformation . applyToStatic ( staticRow ) ; 
 next = applyOne ( next , transformation ) ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / StaticColumnsTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / StaticColumnsTest . java 
 index 75cbcc7 . . efa48ae 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / StaticColumnsTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / StaticColumnsTest . java 
 @ @ - 286 , 6 + 286 , 8 @ @ public class StaticColumnsTest extends CQLTester 
 
 flush ( ) ; 
 
 + Thread . sleep ( 1000 ) ; 
 + 
 compact ( ) ; 
 
 assertRows ( execute ( " SELECT * FROM % s " ) , row ( " k1 " , " c1 " , null , " v1 " ) ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index fd85dab . . b765896 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 
 + * Removed on - heap row cache ( CASSANDRA - 5348 ) 
 * use nanotime consistently for node - local timeouts ( CASSANDRA - 5581 ) 
 * Avoid unnecessary second pass on name - based queries ( CASSANDRA - 5577 ) 
 * Experimental triggers ( CASSANDRA - 1311 ) 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index 1192442 . . f8cf4f7 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 170 , 24 + 170 , 6 @ @ row _ cache _ save _ period : 0 
 # Disabled by default , meaning all keys are going to be saved 
 # row _ cache _ keys _ to _ save : 100 
 
 - # The provider for the row cache to use . 
 - # 
 - # Supported values are : ConcurrentLinkedHashCacheProvider , SerializingCacheProvider 
 - # 
 - # SerializingCacheProvider serialises the contents of the row and stores 
 - # it in native memory , i . e . , off the JVM Heap . Serialized rows take 
 - # significantly less memory than " live " rows in the JVM , so you can cache 
 - # more rows in a given memory footprint . And storing the cache off - heap 
 - # means you can use smaller heap sizes , reducing the impact of GC pauses . 
 - # Note however that when a row is requested from the row cache , it must be 
 - # deserialized into the heap for use . 
 - # 
 - # It is also valid to specify the fully - qualified class name to a class 
 - # that implements org . apache . cassandra . cache . IRowCacheProvider . 
 - # 
 - # Defaults to SerializingCacheProvider 
 - row _ cache _ provider : SerializingCacheProvider 
 - 
 # The off - heap memory allocator . Affects storage engine metadata as 
 # well as caches . Experiments show that JEMAlloc saves some memory 
 # than the native GCC allocator ( i . e . , JEMalloc is more 
 diff - - git a / src / java / org / apache / cassandra / cache / ConcurrentLinkedHashCache . java b / src / java / org / apache / cassandra / cache / ConcurrentLinkedHashCache . java 
 index af6549d . . f1e0466 100644 
 - - - a / src / java / org / apache / cassandra / cache / ConcurrentLinkedHashCache . java 
 + + + b / src / java / org / apache / cassandra / cache / ConcurrentLinkedHashCache . java 
 @ @ - 130 , 9 + 130 , 4 @ @ public class ConcurrentLinkedHashCache < K extends IMeasurableMemory , V extends IM 
 { 
 return map . containsKey ( key ) ; 
 } 
 - 
 - public boolean isPutCopying ( ) 
 - { 
 - return false ; 
 - } 
 } 
 diff - - git a / src / java / org / apache / cassandra / cache / ConcurrentLinkedHashCacheProvider . java b / src / java / org / apache / cassandra / cache / ConcurrentLinkedHashCacheProvider . java 
 deleted file mode 100644 
 index e1e06ee . . 0000000 
 - - - a / src / java / org / apache / cassandra / cache / ConcurrentLinkedHashCacheProvider . java 
 + + + / dev / null 
 @ @ - 1 , 26 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . cache ; 
 - 
 - public class ConcurrentLinkedHashCacheProvider implements IRowCacheProvider 
 - { 
 - public ICache < RowCacheKey , IRowCacheEntry > create ( long capacity ) 
 - { 
 - return ConcurrentLinkedHashCache . create ( capacity ) ; 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / cache / ICache . java b / src / java / org / apache / cassandra / cache / ICache . java 
 index 81ffe62 . . 22dbb16 100644 
 - - - a / src / java / org / apache / cassandra / cache / ICache . java 
 + + + b / src / java / org / apache / cassandra / cache / ICache . java 
 @ @ - 51 , 10 + 51 , 4 @ @ public interface ICache < K , V > 
 public Set < K > hotKeySet ( int n ) ; 
 
 public boolean containsKey ( K key ) ; 
 - 
 - / * * 
 - * @ return true if the cache implementation inherently copies the cached values ; otherwise , 
 - * the caller should copy manually before caching shared values like Thrift ByteBuffers . 
 - * / 
 - public boolean isPutCopying ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / cache / IRowCacheProvider . java b / src / java / org / apache / cassandra / cache / IRowCacheProvider . java 
 deleted file mode 100644 
 index 003bfae . . 0000000 
 - - - a / src / java / org / apache / cassandra / cache / IRowCacheProvider . java 
 + + + / dev / null 
 @ @ - 1 , 26 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . cache ; 
 - 
 - / * * 
 - * Provides cache objects with a requested capacity . 
 - * / 
 - public interface IRowCacheProvider 
 - { 
 - public ICache < RowCacheKey , IRowCacheEntry > create ( long capacity ) ; 
 - } 
 diff - - git a / src / java / org / apache / cassandra / cache / InstrumentingCache . java b / src / java / org / apache / cassandra / cache / InstrumentingCache . java 
 index 9655e8d . . 311b373 100644 
 - - - a / src / java / org / apache / cassandra / cache / InstrumentingCache . java 
 + + + b / src / java / org / apache / cassandra / cache / InstrumentingCache . java 
 @ @ - 125 , 11 + 125 , 6 @ @ public class InstrumentingCache < K , V > 
 return map . containsKey ( key ) ; 
 } 
 
 - public boolean isPutCopying ( ) 
 - { 
 - return map . isPutCopying ( ) ; 
 - } 
 - 
 public CacheMetrics getMetrics ( ) 
 { 
 return metrics ; 
 diff - - git a / src / java / org / apache / cassandra / cache / SerializingCache . java b / src / java / org / apache / cassandra / cache / SerializingCache . java 
 index c7430d2 . . 2210f10 100644 
 - - - a / src / java / org / apache / cassandra / cache / SerializingCache . java 
 + + + b / src / java / org / apache / cassandra / cache / SerializingCache . java 
 @ @ - 249 , 9 + 249 , 4 @ @ public class SerializingCache < K , V > implements ICache < K , V > 
 { 
 return map . containsKey ( key ) ; 
 } 
 - 
 - public boolean isPutCopying ( ) 
 - { 
 - return true ; 
 - } 
 } 
 diff - - git a / src / java / org / apache / cassandra / cache / SerializingCacheProvider . java b / src / java / org / apache / cassandra / cache / SerializingCacheProvider . java 
 index 1ee211d . . 84c948e 100644 
 - - - a / src / java / org / apache / cassandra / cache / SerializingCacheProvider . java 
 + + + b / src / java / org / apache / cassandra / cache / SerializingCacheProvider . java 
 @ @ - 26 , 7 + 26 , 7 @ @ import org . apache . cassandra . db . TypeSizes ; 
 import org . apache . cassandra . io . ISerializer ; 
 import org . apache . cassandra . net . MessagingService ; 
 
 - public class SerializingCacheProvider implements IRowCacheProvider 
 + public class SerializingCacheProvider 
 { 
 public ICache < RowCacheKey , IRowCacheEntry > create ( long capacity ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index 31bf20e . . d691681 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 17 , 7 + 17 , 6 @ @ 
 * / 
 package org . apache . cassandra . config ; 
 
 - import org . apache . cassandra . cache . SerializingCacheProvider ; 
 import org . apache . cassandra . config . EncryptionOptions . ClientEncryptionOptions ; 
 import org . apache . cassandra . config . EncryptionOptions . ServerEncryptionOptions ; 
 import org . apache . cassandra . io . util . NativeAllocator ; 
 @ @ - 164 , 7 + 163 , 6 @ @ public class Config 
 public long row _ cache _ size _ in _ mb = 0 ; 
 public volatile int row _ cache _ save _ period = 0 ; 
 public int row _ cache _ keys _ to _ save = Integer . MAX _ VALUE ; 
 - public String row _ cache _ provider = SerializingCacheProvider . class . getSimpleName ( ) ; 
 public String memory _ allocator = NativeAllocator . class . getSimpleName ( ) ; 
 public boolean populate _ io _ cache _ on _ flush = false ; 
 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index b33f6fd . . 7a13d13 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 30 , 7 + 30 , 6 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . auth . * ; 
 - import org . apache . cassandra . cache . IRowCacheProvider ; 
 import org . apache . cassandra . config . Config . RequestSchedulerId ; 
 import org . apache . cassandra . config . EncryptionOptions . ClientEncryptionOptions ; 
 import org . apache . cassandra . config . EncryptionOptions . ServerEncryptionOptions ; 
 @ @ - 79 , 7 + 78 , 6 @ @ public class DatabaseDescriptor 
 private static RequestSchedulerOptions requestSchedulerOptions ; 
 
 private static long keyCacheSizeInMB ; 
 - private static IRowCacheProvider rowCacheProvider ; 
 private static IAllocator memoryAllocator ; 
 
 private static String localDC ; 
 @ @ - 428 , 7 + 426 , 6 @ @ public class DatabaseDescriptor 
 + conf . key _ cache _ size _ in _ mb + " ' , supported values are < integer > > = 0 . " ) ; 
 } 
 
 - rowCacheProvider = FBUtilities . newCacheProvider ( conf . row _ cache _ provider ) ; 
 memoryAllocator = FBUtilities . newOffHeapAllocator ( conf . memory _ allocator ) ; 
 
 if ( conf . encryption _ options ! = null ) 
 @ @ - 1166 , 11 + 1163 , 6 @ @ public class DatabaseDescriptor 
 return conf . row _ cache _ keys _ to _ save ; 
 } 
 
 - public static IRowCacheProvider getRowCacheProvider ( ) 
 - { 
 - return rowCacheProvider ; 
 - } 
 - 
 public static IAllocator getoffHeapMemoryAllocator ( ) 
 { 
 return memoryAllocator ; 
 diff - - git a / src / java / org / apache / cassandra / db / CollationController . java b / src / java / org / apache / cassandra / db / CollationController . java 
 index 0482c47 . . eb5192e 100644 
 - - - a / src / java / org / apache / cassandra / db / CollationController . java 
 + + + b / src / java / org / apache / cassandra / db / CollationController . java 
 @ @ - 41 , 20 + 41 , 15 @ @ public class CollationController 
 
 private final ColumnFamilyStore cfs ; 
 private final QueryFilter filter ; 
 - private final ColumnFamily . Factory factory ; 
 private final int gcBefore ; 
 
 private int sstablesIterated = 0 ; 
 
 - public CollationController ( ColumnFamilyStore cfs , boolean mutableColumns , QueryFilter filter , int gcBefore ) 
 + public CollationController ( ColumnFamilyStore cfs , QueryFilter filter , int gcBefore ) 
 { 
 this . cfs = cfs ; 
 this . filter = filter ; 
 this . gcBefore = gcBefore ; 
 - 
 - this . factory = mutableColumns 
 - ? AtomicSortedColumns . factory 
 - : ArrayBackedSortedColumns . factory ; 
 } 
 
 public ColumnFamily getTopLevelColumns ( ) 
 @ @ - 73 , 7 + 68 , 7 @ @ public class CollationController 
 private ColumnFamily collectTimeOrderedData ( ) 
 { 
 logger . trace ( " collectTimeOrderedData " ) ; 
 - final ColumnFamily container = factory . create ( cfs . metadata , filter . filter . isReversed ( ) ) ; 
 + final ColumnFamily container = ArrayBackedSortedColumns . factory . create ( cfs . metadata , filter . filter . isReversed ( ) ) ; 
 List < OnDiskAtomIterator > iterators = new ArrayList < OnDiskAtomIterator > ( ) ; 
 Tracing . trace ( " Acquiring sstable references " ) ; 
 ColumnFamilyStore . ViewFragment view = cfs . markReferenced ( filter . key ) ; 
 @ @ - 223 , 7 + 218 , 7 @ @ public class CollationController 
 Tracing . trace ( " Acquiring sstable references " ) ; 
 ColumnFamilyStore . ViewFragment view = cfs . markReferenced ( filter . key ) ; 
 List < OnDiskAtomIterator > iterators = new ArrayList < OnDiskAtomIterator > ( Iterables . size ( view . memtables ) + view . sstables . size ( ) ) ; 
 - ColumnFamily returnCF = factory . create ( cfs . metadata , filter . filter . isReversed ( ) ) ; 
 + ColumnFamily returnCF = ArrayBackedSortedColumns . factory . create ( cfs . metadata , filter . filter . isReversed ( ) ) ; 
 
 try 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 892e35f . . 78825cf 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 808 , 29 + 808 , 13 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 FBUtilities . waitOnFuture ( forceFlush ( ) ) ; 
 } 
 
 - public void maybeUpdateRowCache ( DecoratedKey key , ColumnFamily columnFamily ) 
 + public void maybeUpdateRowCache ( DecoratedKey key ) 
 { 
 if ( ! isRowCacheEnabled ( ) ) 
 return ; 
 
 RowCacheKey cacheKey = new RowCacheKey ( metadata . cfId , key ) ; 
 - 
 - / / always invalidate a copying cache value 
 - if ( CacheService . instance . rowCache . isPutCopying ( ) ) 
 - { 
 - invalidateCachedRow ( cacheKey ) ; 
 - return ; 
 - } 
 - 
 - / / invalidate a normal cache value if it ' s a sentinel , so the read will retry ( and include the new update ) 
 - IRowCacheEntry cachedRow = CacheService . instance . rowCache . getInternal ( cacheKey ) ; 
 - if ( cachedRow ! = null ) 
 - { 
 - if ( cachedRow instanceof RowCacheSentinel ) 
 - invalidateCachedRow ( cacheKey ) ; 
 - else 
 - ( ( ColumnFamily ) cachedRow ) . addAll ( columnFamily , HeapAllocator . instance ) ; 
 - } 
 + invalidateCachedRow ( cacheKey ) ; 
 } 
 
 / * * 
 @ @ - 846 , 7 + 830 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 Memtable mt = getMemtableThreadSafe ( ) ; 
 mt . put ( key , columnFamily , indexer ) ; 
 - maybeUpdateRowCache ( key , columnFamily ) ; 
 + maybeUpdateRowCache ( key ) ; 
 metric . writeLatency . addNano ( System . nanoTime ( ) - start ) ; 
 
 / / recompute liveRatio , if we have doubled the number of ops since last calculated 
 @ @ - 1239 , 7 + 1223 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 / / Some other read is trying to cache the value , just do a normal non - caching read 
 Tracing . trace ( " Row cache miss ( race ) " ) ; 
 - return getTopLevelColumns ( filter , Integer . MIN _ VALUE , false ) ; 
 + return getTopLevelColumns ( filter , Integer . MIN _ VALUE ) ; 
 } 
 Tracing . trace ( " Row cache hit " ) ; 
 return ( ColumnFamily ) cached ; 
 @ @ - 1251 , 9 + 1235 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 try 
 { 
 - ColumnFamily data = getTopLevelColumns ( QueryFilter . getIdentityFilter ( filter . key , name ) , 
 - Integer . MIN _ VALUE , 
 - true ) ; 
 + ColumnFamily data = getTopLevelColumns ( QueryFilter . getIdentityFilter ( filter . key , name ) , Integer . MIN _ VALUE ) ; 
 if ( sentinelSuccess & & data ! = null ) 
 CacheService . instance . rowCache . replace ( key , sentinel , data ) ; 
 
 @ @ - 1295 , 7 + 1277 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 else 
 { 
 - ColumnFamily cf = getTopLevelColumns ( filter , gcBefore , false ) ; 
 + ColumnFamily cf = getTopLevelColumns ( filter , gcBefore ) ; 
 
 if ( cf = = null ) 
 return null ; 
 @ @ - 1462 , 13 + 1444 , 10 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 - public ColumnFamily getTopLevelColumns ( QueryFilter filter , int gcBefore , boolean forCache ) 
 + public ColumnFamily getTopLevelColumns ( QueryFilter filter , int gcBefore ) 
 { 
 Tracing . trace ( " Executing single - partition query on { } " , name ) ; 
 - CollationController controller = new CollationController ( this , 
 - forCache & & ! CacheService . instance . rowCache . isPutCopying ( ) , 
 - filter , 
 - gcBefore ) ; 
 + CollationController controller = new CollationController ( this , filter , gcBefore ) ; 
 ColumnFamily columns = controller . getTopLevelColumns ( ) ; 
 metric . updateSSTableIterated ( controller . getSstablesIterated ( ) ) ; 
 return columns ; 
 @ @ - 1727 , 8 + 1706 , 8 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 * / 
 public ColumnFamily getRawCachedRow ( DecoratedKey key ) 
 { 
 - if ( ! isRowCacheEnabled ( ) | | metadata . cfId = = null ) 
 - return null ; / / secondary index 
 + if ( ! isRowCacheEnabled ( ) ) 
 + return null ; 
 
 IRowCacheEntry cached = CacheService . instance . rowCache . getInternal ( new RowCacheKey ( metadata . cfId , key ) ) ; 
 return cached = = null | | cached instanceof RowCacheSentinel ? null : ( ColumnFamily ) cached ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionController . java b / src / java / org / apache / cassandra / db / compaction / CompactionController . java 
 index fd23882 . . 15878c5 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionController . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionController . java 
 @ @ - 177 , 20 + 177 , 6 @ @ public class CompactionController 
 cfs . invalidateCachedRow ( key ) ; 
 } 
 
 - public void removeDeletedInCache ( DecoratedKey key ) 
 - { 
 - / / For the copying cache , we ' d need to re - serialize the updated cachedRow , which would be racy 
 - / / vs other updates . We ' ll just ignore it instead , since the next update to this row will invalidate it 
 - / / anyway , so the odds of a " tombstones consuming memory indefinitely " problem are minimal . 
 - / / See https : / / issues . apache . org / jira / browse / CASSANDRA - 3921 for more discussion . 
 - if ( CacheService . instance . rowCache . isPutCopying ( ) ) 
 - return ; 
 - 
 - ColumnFamily cachedRow = cfs . getRawCachedRow ( key ) ; 
 - if ( cachedRow ! = null ) 
 - ColumnFamilyStore . removeDeleted ( cachedRow , gcBefore ) ; 
 - } 
 - 
 / * * 
 * @ return an AbstractCompactedRow implementation to write the merged rows in question . 
 * 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 index 13fc11d . . d6fd171 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 @ @ - 165 , 9 + 165 , 6 @ @ public class CompactionTask extends AbstractCompactionTask 
 continue ; 
 } 
 
 - / / If the row is cached , we call removeDeleted on at read time it to have coherent query returns , 
 - / / but if the row is not pushed out of the cache , obsolete tombstones will persist indefinitely . 
 - controller . removeDeletedInCache ( row . key ) ; 
 totalkeysWritten + + ; 
 
 if ( DatabaseDescriptor . getPreheatKeyCache ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / service / CacheService . java b / src / java / org / apache / cassandra / service / CacheService . java 
 index 5eff28a . . d301507 100644 
 - - - a / src / java / org / apache / cassandra / service / CacheService . java 
 + + + b / src / java / org / apache / cassandra / service / CacheService . java 
 @ @ - 130 , 14 + 130 , 12 @ @ public class CacheService implements CacheServiceMBean 
 * / 
 private AutoSavingCache < RowCacheKey , IRowCacheEntry > initRowCache ( ) 
 { 
 - logger . info ( " Initializing row cache with capacity of { } MBs and provider { } " , 
 - DatabaseDescriptor . getRowCacheSizeInMB ( ) , 
 - DatabaseDescriptor . getRowCacheProvider ( ) . getClass ( ) . getName ( ) ) ; 
 + logger . info ( " Initializing row cache with capacity of { } MBs " , DatabaseDescriptor . getRowCacheSizeInMB ( ) ) ; 
 
 long rowCacheInMemoryCapacity = DatabaseDescriptor . getRowCacheSizeInMB ( ) * 1024 * 1024 ; 
 
 / / cache object 
 - ICache < RowCacheKey , IRowCacheEntry > rc = DatabaseDescriptor . getRowCacheProvider ( ) . create ( rowCacheInMemoryCapacity ) ; 
 + ICache < RowCacheKey , IRowCacheEntry > rc = new SerializingCacheProvider ( ) . create ( rowCacheInMemoryCapacity ) ; 
 AutoSavingCache < RowCacheKey , IRowCacheEntry > rowCache = new AutoSavingCache < RowCacheKey , IRowCacheEntry > ( rc , CacheType . ROW _ CACHE , new RowCacheSerializer ( ) ) ; 
 
 int rowCacheKeysToSave = DatabaseDescriptor . getRowCacheKeysToSave ( ) ; 
 @ @ - 302 , 7 + 300 , 7 @ @ public class CacheService implements CacheServiceMBean 
 public Pair < RowCacheKey , IRowCacheEntry > call ( ) throws Exception 
 { 
 DecoratedKey key = cfs . partitioner . decorateKey ( buffer ) ; 
 - ColumnFamily data = cfs . getTopLevelColumns ( QueryFilter . getIdentityFilter ( key , cfs . name ) , Integer . MIN _ VALUE , true ) ; 
 + ColumnFamily data = cfs . getTopLevelColumns ( QueryFilter . getIdentityFilter ( key , cfs . name ) , Integer . MIN _ VALUE ) ; 
 return Pair . create ( new RowCacheKey ( cfs . metadata . cfId , key ) , ( IRowCacheEntry ) data ) ; 
 } 
 } ) ; 
 @ @ - 313 , 7 + 311 , 7 @ @ public class CacheService implements CacheServiceMBean 
 for ( ByteBuffer key : buffers ) 
 { 
 DecoratedKey dk = cfs . partitioner . decorateKey ( key ) ; 
 - ColumnFamily data = cfs . getTopLevelColumns ( QueryFilter . getIdentityFilter ( dk , cfs . name ) , Integer . MIN _ VALUE , true ) ; 
 + ColumnFamily data = cfs . getTopLevelColumns ( QueryFilter . getIdentityFilter ( dk , cfs . name ) , Integer . MIN _ VALUE ) ; 
 if ( data ! = null ) 
 rowCache . put ( new RowCacheKey ( cfs . metadata . cfId , dk ) , data ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 index eeeb41f . . 027f74a 100644 
 - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java 
 + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 @ @ - 41 , 7 + 41 , 6 @ @ import org . apache . commons . lang . StringUtils ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import org . apache . cassandra . cache . IRowCacheProvider ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . DecoratedKey ; 
 @ @ - 500 , 13 + 499 , 6 @ @ public class FBUtilities 
 return field ; 
 } 
 
 - public static IRowCacheProvider newCacheProvider ( String cache _ provider ) throws ConfigurationException 
 - { 
 - if ( ! cache _ provider . contains ( " . " ) ) 
 - cache _ provider = " org . apache . cassandra . cache . " + cache _ provider ; 
 - return FBUtilities . construct ( cache _ provider , " row cache provider " ) ; 
 - } 
 - 
 public static < T > CloseableIterator < T > closeableIterator ( Iterator < T > iterator ) 
 { 
 return new WrappedCloseableIterator < T > ( iterator ) ; 
 diff - - git a / src / java / org / apache / cassandra / utils / StatusLogger . java b / src / java / org / apache / cassandra / utils / StatusLogger . java 
 index b7266cb . . 94f045e 100644 
 - - - a / src / java / org / apache / cassandra / utils / StatusLogger . java 
 + + + b / src / java / org / apache / cassandra / utils / StatusLogger . java 
 @ @ - 26 , 10 + 26 , 8 @ @ import javax . management . ObjectName ; 
 
 import com . google . common . collect . Iterables ; 
 
 - import org . apache . cassandra . cache . AutoSavingCache ; 
 - import org . apache . cassandra . cache . IRowCacheEntry ; 
 - import org . apache . cassandra . cache . KeyCacheKey ; 
 - import org . apache . cassandra . cache . RowCacheKey ; 
 + import org . apache . cassandra . cache . * ; 
 + 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 92 , 18 + 90 , 19 @ @ public class StatusLogger 
 int keyCacheKeysToSave = DatabaseDescriptor . getKeyCacheKeysToSave ( ) ; 
 int rowCacheKeysToSave = DatabaseDescriptor . getRowCacheKeysToSave ( ) ; 
 
 - logger . info ( String . format ( " % - 25s % 10s % 25s % 25s % 65s " , " Cache Type " , " Size " , " Capacity " , " KeysToSave " , " Provider " ) ) ; 
 - logger . info ( String . format ( " % - 25s % 10s % 25s % 25s % 65s " , " KeyCache " , 
 - keyCache . weightedSize ( ) , 
 - keyCache . getCapacity ( ) , 
 - keyCacheKeysToSave = = Integer . MAX _ VALUE ? " all " : keyCacheKeysToSave , 
 - " " ) ) ; 
 + logger . info ( String . format ( " % - 25s % 10s % 25s % 25s " , 
 + " Cache Type " , " Size " , " Capacity " , " KeysToSave " ) ) ; 
 + logger . info ( String . format ( " % - 25s % 10s % 25s % 25s " , 
 + " KeyCache " , 
 + keyCache . weightedSize ( ) , 
 + keyCache . getCapacity ( ) , 
 + keyCacheKeysToSave = = Integer . MAX _ VALUE ? " all " : keyCacheKeysToSave ) ) ; 
 
 - logger . info ( String . format ( " % - 25s % 10s % 25s % 25s % 65s " , " RowCache " , 
 - rowCache . weightedSize ( ) , 
 - rowCache . getCapacity ( ) , 
 - rowCacheKeysToSave = = Integer . MAX _ VALUE ? " all " : rowCacheKeysToSave , 
 - DatabaseDescriptor . getRowCacheProvider ( ) . getClass ( ) . getName ( ) ) ) ; 
 + logger . info ( String . format ( " % - 25s % 10s % 25s % 25s " , 
 + " RowCache " , 
 + rowCache . weightedSize ( ) , 
 + rowCache . getCapacity ( ) , 
 + rowCacheKeysToSave = = Integer . MAX _ VALUE ? " all " : rowCacheKeysToSave ) ) ; 
 
 / / per - CF stats 
 logger . info ( String . format ( " % - 25s % 20s " , " ColumnFamily " , " Memtable ops , data " ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / CollationControllerTest . java b / test / unit / org / apache / cassandra / db / CollationControllerTest . java 
 index 4ef8d64 . . f835ad3 100644 
 - - - a / test / unit / org / apache / cassandra / db / CollationControllerTest . java 
 + + + b / test / unit / org / apache / cassandra / db / CollationControllerTest . java 
 @ @ - 70 , 7 + 70 , 7 @ @ public class CollationControllerTest extends SchemaLoader 
 / / A NamesQueryFilter goes down one code path ( through collectTimeOrderedData ( ) ) 
 / / It should only iterate the last flushed sstable , since it probably contains the most recent value for Column1 
 QueryFilter filter = QueryFilter . getNamesFilter ( dk , " Standard1 " , ByteBufferUtil . bytes ( " Column1 " ) ) ; 
 - CollationController controller = new CollationController ( store , false , filter , Integer . MIN _ VALUE ) ; 
 + CollationController controller = new CollationController ( store , filter , Integer . MIN _ VALUE ) ; 
 controller . getTopLevelColumns ( ) ; 
 assertEquals ( 1 , controller . getSstablesIterated ( ) ) ; 
 
 @ @ - 78 , 7 + 78 , 7 @ @ public class CollationControllerTest extends SchemaLoader 
 / / We will read " only " the last sstable in that case , but because the 2nd sstable has a tombstone that is more 
 / / recent than the maxTimestamp of the very first sstable we flushed , we should only read the 2 first sstables . 
 filter = QueryFilter . getIdentityFilter ( dk , " Standard1 " ) ; 
 - controller = new CollationController ( store , false , filter , Integer . MIN _ VALUE ) ; 
 + controller = new CollationController ( store , filter , Integer . MIN _ VALUE ) ; 
 controller . getTopLevelColumns ( ) ; 
 assertEquals ( 2 , controller . getSstablesIterated ( ) ) ; 
 }
