BLEU SCORE: 0.018738883683389617

TEST MSG: Python - driver without a hard dependency on ` scales `
GENERATED MSG: rm old cql lib

TEST DIFF (one line): diff - - git a / lib / cassandra - driver - internal - only - 1 . 0 . 2 . post . zip b / lib / cassandra - driver - internal - only - 1 . 0 . 2 . post . zip <nl> index 9f6af56 . . 7ccd5f7 100644 <nl> Binary files a / lib / cassandra - driver - internal - only - 1 . 0 . 2 . post . zip and b / lib / cassandra - driver - internal - only - 1 . 0 . 2 . post . zip differ
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cache / KeyCacheKey . java b / src / java / org / apache / cassandra / cache / KeyCacheKey . java <nl> index bee88e8 . . a553ba9 100644 <nl> - - - a / src / java / org / apache / cassandra / cache / KeyCacheKey . java <nl> + + + b / src / java / org / apache / cassandra / cache / KeyCacheKey . java <nl> @ @ - 39 , 7 + 39 , 7 @ @ public class KeyCacheKey implements CacheKey <nl> <nl> public Pair < String , String > getPathInfo ( ) <nl> { <nl> - return new Pair < String , String > ( desc . ksname , desc . cfname ) ; <nl> + return Pair . create ( desc . ksname , desc . cfname ) ; <nl> } <nl> <nl> public String toString ( ) <nl> diff - - git a / src / java / org / apache / cassandra / config / Schema . java b / src / java / org / apache / cassandra / config / Schema . java <nl> index d4ace31 . . dd16b4b 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Schema . java <nl> + + + b / src / java / org / apache / cassandra / config / Schema . java <nl> @ @ - 379 , 7 + 379 , 7 @ @ public class Schema <nl> * / <nl> public UUID getId ( String ksName , String cfName ) <nl> { <nl> - return cfIdMap . get ( new Pair < String , String > ( ksName , cfName ) ) ; <nl> + return cfIdMap . get ( Pair . create ( ksName , cfName ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 392 , 7 + 392 , 7 @ @ public class Schema <nl> * / <nl> public void load ( CFMetaData cfm ) <nl> { <nl> - Pair < String , String > key = new Pair < String , String > ( cfm . ksName , cfm . cfName ) ; <nl> + Pair < String , String > key = Pair . create ( cfm . ksName , cfm . cfName ) ; <nl> <nl> if ( cfIdMap . containsKey ( key ) ) <nl> throw new RuntimeException ( String . format ( " Attempting to load already loaded column family % s . % s " , cfm . ksName , cfm . cfName ) ) ; <nl> @ @ - 408 , 7 + 408 , 7 @ @ public class Schema <nl> * / <nl> public void purge ( CFMetaData cfm ) <nl> { <nl> - cfIdMap . remove ( new Pair < String , String > ( cfm . ksName , cfm . cfName ) ) ; <nl> + cfIdMap . remove ( Pair . create ( cfm . ksName , cfm . cfName ) ) ; <nl> } <nl> <nl> / * Version control * / <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> index 67bdcb4 . . 6b9715e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> @ @ - 134 , 7 + 134 , 7 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy <nl> { <nl> List < Pair < SSTableReader , Long > > tableLengthPairs = new ArrayList < Pair < SSTableReader , Long > > ( collection . size ( ) ) ; <nl> for ( SSTableReader table : collection ) <nl> - tableLengthPairs . add ( new Pair < SSTableReader , Long > ( table , table . onDiskLength ( ) ) ) ; <nl> + tableLengthPairs . add ( Pair . create ( table , table . onDiskLength ( ) ) ) ; <nl> return tableLengthPairs ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / dht / Bounds . java b / src / java / org / apache / cassandra / dht / Bounds . java <nl> index 5a6cdb9 . . 7da30bc 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / Bounds . java <nl> + + + b / src / java / org / apache / cassandra / dht / Bounds . java <nl> @ @ - 58 , 7 + 58 , 7 @ @ public class Bounds < T extends RingPosition > extends AbstractBounds < T > <nl> <nl> AbstractBounds < T > lb = new Bounds < T > ( left , position , partitioner ) ; <nl> AbstractBounds < T > rb = new Range < T > ( position , right , partitioner ) ; <nl> - return new Pair < AbstractBounds < T > , AbstractBounds < T > > ( lb , rb ) ; <nl> + return Pair . create ( lb , rb ) ; <nl> } <nl> <nl> public boolean intersects ( Bounds < T > that ) <nl> diff - - git a / src / java / org / apache / cassandra / dht / ExcludingBounds . java b / src / java / org / apache / cassandra / dht / ExcludingBounds . java <nl> index cbe5f9b . . 0bde8f1 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / ExcludingBounds . java <nl> + + + b / src / java / org / apache / cassandra / dht / ExcludingBounds . java <nl> @ @ - 53 , 7 + 53 , 7 @ @ public class ExcludingBounds < T extends RingPosition > extends AbstractBounds < T > <nl> return null ; <nl> AbstractBounds < T > lb = new Range < T > ( left , position , partitioner ) ; <nl> AbstractBounds < T > rb = new ExcludingBounds < T > ( position , right , partitioner ) ; <nl> - return new Pair < AbstractBounds < T > , AbstractBounds < T > > ( lb , rb ) ; <nl> + return Pair . create ( lb , rb ) ; <nl> } <nl> <nl> public List < ? extends AbstractBounds < T > > unwrap ( ) <nl> diff - - git a / src / java / org / apache / cassandra / dht / IncludingExcludingBounds . java b / src / java / org / apache / cassandra / dht / IncludingExcludingBounds . java <nl> index a4d0de3 . . 9c0f6dd 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / IncludingExcludingBounds . java <nl> + + + b / src / java / org / apache / cassandra / dht / IncludingExcludingBounds . java <nl> @ @ - 52 , 7 + 52 , 7 @ @ public class IncludingExcludingBounds < T extends RingPosition > extends AbstractBo <nl> assert contains ( position ) ; <nl> AbstractBounds < T > lb = new Bounds < T > ( left , position , partitioner ) ; <nl> AbstractBounds < T > rb = new ExcludingBounds < T > ( position , right , partitioner ) ; <nl> - return new Pair < AbstractBounds < T > , AbstractBounds < T > > ( lb , rb ) ; <nl> + return Pair . create ( lb , rb ) ; <nl> } <nl> <nl> public List < ? extends AbstractBounds < T > > unwrap ( ) <nl> diff - - git a / src / java / org / apache / cassandra / dht / Range . java b / src / java / org / apache / cassandra / dht / Range . java <nl> index eaa9e95 . . f32c938 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / Range . java <nl> + + + b / src / java / org / apache / cassandra / dht / Range . java <nl> @ @ - 224 , 7 + 224 , 7 @ @ public class Range < T extends RingPosition > extends AbstractBounds < T > implements <nl> <nl> AbstractBounds < T > lb = new Range < T > ( left , position , partitioner ) ; <nl> AbstractBounds < T > rb = new Range < T > ( position , right , partitioner ) ; <nl> - return new Pair < AbstractBounds < T > , AbstractBounds < T > > ( lb , rb ) ; <nl> + return Pair . create ( lb , rb ) ; <nl> } <nl> <nl> public List < Range < T > > unwrap ( ) <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java <nl> index c23f290 . . db284ec 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java <nl> @ @ - 406 , 7 + 406 , 7 @ @ public class ColumnFamilyRecordReader extends RecordReader < ByteBuffer , SortedMap <nl> IColumn column = unthriftify ( cosc ) ; <nl> map . put ( column . name ( ) , column ) ; <nl> } <nl> - return new Pair < ByteBuffer , SortedMap < ByteBuffer , IColumn > > ( ks . key , map ) ; <nl> + return Pair . create ( ks . key , map ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java <nl> index 74fde20 . . 3b66976 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java <nl> @ @ - 137 , 7 + 137 , 7 @ @ implements org . apache . hadoop . mapred . RecordWriter < ByteBuffer , List < Mutation > > <nl> } <nl> <nl> for ( Mutation amut : value ) <nl> - client . put ( new Pair < ByteBuffer , Mutation > ( keybuff , amut ) ) ; <nl> + client . put ( Pair . create ( keybuff , amut ) ) ; <nl> progressable . progress ( ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / Component . java b / src / java / org / apache / cassandra / io / sstable / Component . java <nl> index 7da961b . . 7a001ab 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / Component . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / Component . java <nl> @ @ - 132 , 7 + 132 , 7 @ @ public class Component <nl> throw new IllegalStateException ( ) ; <nl> } <nl> <nl> - return new Pair < Descriptor , Component > ( path . left , component ) ; <nl> + return Pair . create ( path . left , component ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / Descriptor . java b / src / java / org / apache / cassandra / io / sstable / Descriptor . java <nl> index 4f776d6 . . b173bac 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / Descriptor . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / Descriptor . java <nl> @ @ - 277 , 7 + 277 , 7 @ @ public class Descriptor <nl> / / component suffix <nl> String component = st . nextToken ( ) ; <nl> directory = directory ! = null ? directory : new File ( " . " ) ; <nl> - return new Pair < Descriptor , String > ( new Descriptor ( version , directory , ksname , cfname , generation , temporary ) , component ) ; <nl> + return Pair . create ( new Descriptor ( version , directory , ksname , cfname , generation , temporary ) , component ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> index 0968e12 . . ae49928 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> @ @ - 589 , 7 + 589 , 7 @ @ public class SSTableReader extends SSTable <nl> if ( left > right ) <nl> / / empty range <nl> continue ; <nl> - positions . add ( new Pair ( Integer . valueOf ( left ) , Integer . valueOf ( right ) ) ) ; <nl> + positions . add ( Pair . create ( Integer . valueOf ( left ) , Integer . valueOf ( right ) ) ) ; <nl> } <nl> return positions ; <nl> } <nl> @ @ - 670 , 7 + 670 , 7 @ @ public class SSTableReader extends SSTable <nl> if ( left = = right ) <nl> / / empty range <nl> continue ; <nl> - positions . add ( new Pair ( Long . valueOf ( left ) , Long . valueOf ( right ) ) ) ; <nl> + positions . add ( Pair . create ( Long . valueOf ( left ) , Long . valueOf ( right ) ) ) ; <nl> } <nl> return positions ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / locator / TokenMetadata . java b / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> index f606475 . . 582ad10 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> + + + b / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> @ @ - 340 , 7 + 340 , 7 @ @ public class TokenMetadata <nl> <nl> try <nl> { <nl> - movingEndpoints . add ( new Pair < Token , InetAddress > ( token , endpoint ) ) ; <nl> + movingEndpoints . add ( Pair . create ( token , endpoint ) ) ; <nl> } <nl> finally <nl> { <nl> @ @ - 959 , 7 + 959 , 7 @ @ public class TokenMetadata <nl> dcRacks . put ( dc , HashMultimap . < String , InetAddress > create ( ) ) ; <nl> dcRacks . get ( dc ) . put ( rack , ep ) ; <nl> <nl> - currentLocations . put ( ep , new Pair < String , String > ( dc , rack ) ) ; <nl> + currentLocations . put ( ep , Pair . create ( dc , rack ) ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / service / CacheService . java b / src / java / org / apache / cassandra / service / CacheService . java <nl> index 0ed8002 . . 2342cac 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CacheService . java <nl> + + + b / src / java / org / apache / cassandra / service / CacheService . java <nl> @ @ - 331 , 7 + 331 , 7 @ @ public class CacheService implements CacheServiceMBean <nl> { <nl> DecoratedKey key = cfs . partitioner . decorateKey ( buffer ) ; <nl> ColumnFamily data = cfs . getTopLevelColumns ( QueryFilter . getIdentityFilter ( key , new QueryPath ( cfs . columnFamily ) ) , Integer . MIN _ VALUE , true ) ; <nl> - return new Pair < RowCacheKey , IRowCacheEntry > ( new RowCacheKey ( cfs . metadata . cfId , key ) , data ) ; <nl> + return Pair . create ( new RowCacheKey ( cfs . metadata . cfId , key ) , data ) ; <nl> } <nl> } ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java b / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java <nl> index 20ebddd . . 456dff7 100644 <nl> - - - a / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java <nl> + + + b / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java <nl> @ @ - 111 , 7 + 111 , 7 @ @ public class RangeSliceResponseResolver implements IResponseResolver < RangeSliceR <nl> <nl> protected Pair < Row , InetAddress > computeNext ( ) <nl> { <nl> - return iter . hasNext ( ) ? new Pair < Row , InetAddress > ( iter . next ( ) , source ) : endOfData ( ) ; <nl> + return iter . hasNext ( ) ? Pair . create ( iter . next ( ) , source ) : endOfData ( ) ; <nl> } <nl> <nl> public void close ( ) { } <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 9d7b481 . . 0c6e7df 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 49 , 7 + 49 , 6 @ @ import org . apache . cassandra . io . sstable . SSTableDeletingTask ; <nl> import org . apache . cassandra . io . sstable . SSTableLoader ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . locator . * ; <nl> - import org . apache . cassandra . metrics . ClientRequestMetrics ; <nl> import org . apache . cassandra . metrics . StorageMetrics ; <nl> import org . apache . cassandra . net . IAsyncResult ; <nl> import org . apache . cassandra . net . MessageOut ; <nl> @ @ - 3219 , 7 + 3218 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> } <nl> } <nl> <nl> - return new Pair < Set < Range < Token > > , Set < Range < Token > > > ( toStream , toFetch ) ; <nl> + return Pair . create ( toStream , toFetch ) ; <nl> } <nl> <nl> public void bulkLoad ( String directory ) <nl> diff - - git a / src / java / org / apache / cassandra / streaming / PendingFile . java b / src / java / org / apache / cassandra / streaming / PendingFile . java <nl> index 880eed9 . . 3597b6c 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / PendingFile . java <nl> + + + b / src / java / org / apache / cassandra / streaming / PendingFile . java <nl> @ @ - 153 , 7 + 153 , 7 @ @ public class PendingFile <nl> int count = dis . readInt ( ) ; <nl> List < Pair < Long , Long > > sections = new ArrayList < Pair < Long , Long > > ( count ) ; <nl> for ( int i = 0 ; i < count ; i + + ) <nl> - sections . add ( new Pair < Long , Long > ( dis . readLong ( ) , dis . readLong ( ) ) ) ; <nl> + sections . add ( Pair . create ( dis . readLong ( ) , dis . readLong ( ) ) ) ; <nl> / / this controls the way indexes are rebuilt when streaming in . <nl> OperationType type = OperationType . RESTORE _ REPLICA _ COUNT ; <nl> type = OperationType . valueOf ( dis . readUTF ( ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamInSession . java b / src / java / org / apache / cassandra / streaming / StreamInSession . java <nl> index cfa7d0b . . 47a8896 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamInSession . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamInSession . java <nl> @ @ - 82 , 7 + 82 , 7 @ @ public class StreamInSession extends AbstractStreamSession <nl> <nl> public static StreamInSession create ( InetAddress host , IStreamCallback callback ) <nl> { <nl> - Pair < InetAddress , Long > context = new Pair < InetAddress , Long > ( host , nextSessionId ( ) ) ; <nl> + Pair < InetAddress , Long > context = Pair . create ( host , nextSessionId ( ) ) ; <nl> StreamInSession session = new StreamInSession ( context , callback ) ; <nl> sessions . put ( context , session ) ; <nl> return session ; <nl> @ @ - 90 , 7 + 90 , 7 @ @ public class StreamInSession extends AbstractStreamSession <nl> <nl> public static StreamInSession get ( InetAddress host , long sessionId ) <nl> { <nl> - Pair < InetAddress , Long > context = new Pair < InetAddress , Long > ( host , sessionId ) ; <nl> + Pair < InetAddress , Long > context = Pair . create ( host , sessionId ) ; <nl> StreamInSession session = sessions . get ( context ) ; <nl> if ( session = = null ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamOutSession . java b / src / java / org / apache / cassandra / streaming / StreamOutSession . java <nl> index 504c15d . . e1f42dc 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamOutSession . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamOutSession . java <nl> @ @ - 71 , 7 + 71 , 7 @ @ public class StreamOutSession extends AbstractStreamSession <nl> <nl> public static StreamOutSession create ( String table , InetAddress host , long sessionId , IStreamCallback callback ) <nl> { <nl> - Pair < InetAddress , Long > context = new Pair < InetAddress , Long > ( host , sessionId ) ; <nl> + Pair < InetAddress , Long > context = Pair . create ( host , sessionId ) ; <nl> StreamOutSession session = new StreamOutSession ( table , context , callback ) ; <nl> streams . put ( context , session ) ; <nl> return session ; <nl> @ @ - 79 , 7 + 79 , 7 @ @ public class StreamOutSession extends AbstractStreamSession <nl> <nl> public static StreamOutSession get ( InetAddress host , long sessionId ) <nl> { <nl> - return streams . get ( new Pair < InetAddress , Long > ( host , sessionId ) ) ; <nl> + return streams . get ( Pair . create ( host , sessionId ) ) ; <nl> } <nl> <nl> private final Map < String , PendingFile > files = new NonBlockingHashMap < String , PendingFile > ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / streaming / compress / CompressedFileStreamTask . java b / src / java / org / apache / cassandra / streaming / compress / CompressedFileStreamTask . java <nl> index 398599f . . dda9d7d 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / compress / CompressedFileStreamTask . java <nl> + + + b / src / java / org / apache / cassandra / streaming / compress / CompressedFileStreamTask . java <nl> @ @ - 134 , 17 + 134 , 17 @ @ public class CompressedFileStreamTask extends FileStreamTask <nl> if ( chunk . offset = = lastSection . right ) <nl> { <nl> / / extend previous section to end of this chunk <nl> - lastSection = new Pair < Long , Long > ( lastSection . left , chunk . offset + chunk . length + 4 ) ; / / 4 bytes for CRC <nl> + lastSection = Pair . create ( lastSection . left , chunk . offset + chunk . length + 4 ) ; / / 4 bytes for CRC <nl> } <nl> else <nl> { <nl> transferSections . add ( lastSection ) ; <nl> - lastSection = new Pair < Long , Long > ( chunk . offset , chunk . offset + chunk . length + 4 ) ; <nl> + lastSection = Pair . create ( chunk . offset , chunk . offset + chunk . length + 4 ) ; <nl> } <nl> } <nl> else <nl> { <nl> - lastSection = new Pair < Long , Long > ( chunk . offset , chunk . offset + chunk . length + 4 ) ; <nl> + lastSection = Pair . create ( chunk . offset , chunk . offset + chunk . length + 4 ) ; <nl> } <nl> } <nl> if ( lastSection ! = null ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> index 554fba2 . . 409716a 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> @ @ - 49 , 15 + 49 , 15 @ @ import org . apache . cassandra . utils . Pair ; <nl> <nl> public class NodeCmd <nl> { <nl> - private static final Pair < String , String > SNAPSHOT _ COLUMNFAMILY _ OPT = new Pair < String , String > ( " cf " , " column - family " ) ; <nl> - private static final Pair < String , String > HOST _ OPT = new Pair < String , String > ( " h " , " host " ) ; <nl> - private static final Pair < String , String > PORT _ OPT = new Pair < String , String > ( " p " , " port " ) ; <nl> - private static final Pair < String , String > USERNAME _ OPT = new Pair < String , String > ( " u " , " username " ) ; <nl> - private static final Pair < String , String > PASSWORD _ OPT = new Pair < String , String > ( " pw " , " password " ) ; <nl> - private static final Pair < String , String > TAG _ OPT = new Pair < String , String > ( " t " , " tag " ) ; <nl> - private static final Pair < String , String > TOKENS _ OPT = new Pair < String , String > ( " T " , " tokens " ) ; <nl> - private static final Pair < String , String > PRIMARY _ RANGE _ OPT = new Pair < String , String > ( " pr " , " partitioner - range " ) ; <nl> - private static final Pair < String , String > SNAPSHOT _ REPAIR _ OPT = new Pair < String , String > ( " snapshot " , " with - snapshot " ) ; <nl> + private static final Pair < String , String > SNAPSHOT _ COLUMNFAMILY _ OPT = Pair . create ( " cf " , " column - family " ) ; <nl> + private static final Pair < String , String > HOST _ OPT = Pair . create ( " h " , " host " ) ; <nl> + private static final Pair < String , String > PORT _ OPT = Pair . create ( " p " , " port " ) ; <nl> + private static final Pair < String , String > USERNAME _ OPT = Pair . create ( " u " , " username " ) ; <nl> + private static final Pair < String , String > PASSWORD _ OPT = Pair . create ( " pw " , " password " ) ; <nl> + private static final Pair < String , String > TAG _ OPT = Pair . create ( " t " , " tag " ) ; <nl> + private static final Pair < String , String > TOKENS _ OPT = Pair . create ( " T " , " tokens " ) ; <nl> + private static final Pair < String , String > PRIMARY _ RANGE _ OPT = Pair . create ( " pr " , " partitioner - range " ) ; <nl> + private static final Pair < String , String > SNAPSHOT _ REPAIR _ OPT = Pair . create ( " snapshot " , " with - snapshot " ) ; <nl> <nl> private static final String DEFAULT _ HOST = " 127 . 0 . 0 . 1 " ; <nl> private static final int DEFAULT _ PORT = 7199 ; <nl> diff - - git a / src / java / org / apache / cassandra / utils / ExpiringMap . java b / src / java / org / apache / cassandra / utils / ExpiringMap . java <nl> index d561fc9 . . 2eade07 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / ExpiringMap . java <nl> + + + b / src / java / org / apache / cassandra / utils / ExpiringMap . java <nl> @ @ - 91 , 7 + 91 , 7 @ @ public class ExpiringMap < K , V > <nl> cache . remove ( entry . getKey ( ) ) ; <nl> n + + ; <nl> if ( postExpireHook ! = null ) <nl> - postExpireHook . apply ( new Pair < K , CacheableObject < V > > ( entry . getKey ( ) , entry . getValue ( ) ) ) ; <nl> + postExpireHook . apply ( Pair . create ( entry . getKey ( ) , entry . getValue ( ) ) ) ; <nl> } <nl> } <nl> logger . trace ( " Expired { } entries " , n ) ; <nl> diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> index 04a832a . . fcfdd2b 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> @ @ - 34 , 7 + 34 , 6 @ @ import java . util . concurrent . TimeUnit ; <nl> import java . util . concurrent . TimeoutException ; <nl> <nl> import com . google . common . base . Joiner ; <nl> - import com . google . common . base . Throwables ; <nl> import com . google . common . collect . AbstractIterator ; <nl> import org . apache . commons . lang . StringUtils ; <nl> import org . slf4j . Logger ; <nl> @ @ - 175 , 7 + 174 , 7 @ @ public class FBUtilities <nl> remainder = distance . testBit ( 0 ) ; <nl> midpoint = distance . shiftRight ( 1 ) . add ( left ) . mod ( max ) ; <nl> } <nl> - return new Pair < BigInteger , Boolean > ( midpoint , remainder ) ; <nl> + return Pair . create ( midpoint , remainder ) ; <nl> } <nl> <nl> public static int compareUnsigned ( byte [ ] bytes1 , byte [ ] bytes2 , int offset1 , int offset2 , int len1 , int len2 ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / Pair . java b / src / java / org / apache / cassandra / utils / Pair . java <nl> index a14a9b8 . . c654176 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / Pair . java <nl> + + + b / src / java / org / apache / cassandra / utils / Pair . java <nl> @ @ - 24 , 7 + 24 , 7 @ @ public class Pair < T1 , T2 > <nl> public final T1 left ; <nl> public final T2 right ; <nl> <nl> - public Pair ( T1 left , T2 right ) <nl> + private Pair ( T1 left , T2 right ) <nl> { <nl> this . left = left ; <nl> this . right = right ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategyTest . java b / test / unit / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategyTest . java <nl> index e1ded7c . . 89e0a6a 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategyTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategyTest . java <nl> @ @ - 33 , 7 + 33 , 7 @ @ public class SizeTieredCompactionStrategyTest <nl> String [ ] strings = { " a " , " bbbb " , " cccccccc " , " cccccccc " , " bbbb " , " a " } ; <nl> for ( String st : strings ) <nl> { <nl> - Pair < String , Long > pair = new Pair < String , Long > ( st , new Long ( st . length ( ) ) ) ; <nl> + Pair < String , Long > pair = Pair . create ( st , new Long ( st . length ( ) ) ) ; <nl> pairs . add ( pair ) ; <nl> } <nl> <nl> @ @ - 53 , 7 + 53 , 7 @ @ public class SizeTieredCompactionStrategyTest <nl> String [ ] strings2 = { " aaa " , " bbbbbbbb " , " aaa " , " bbbbbbbb " , " bbbbbbbb " , " aaa " } ; <nl> for ( String st : strings2 ) <nl> { <nl> - Pair < String , Long > pair = new Pair < String , Long > ( st , new Long ( st . length ( ) ) ) ; <nl> + Pair < String , Long > pair = Pair . create ( st , new Long ( st . length ( ) ) ) ; <nl> pairs . add ( pair ) ; <nl> } <nl> <nl> @ @ - 74 , 7 + 74 , 7 @ @ public class SizeTieredCompactionStrategyTest <nl> String [ ] strings3 = { " aaa " , " bbbbbbbb " , " aaa " , " bbbbbbbb " , " bbbbbbbb " , " aaa " } ; <nl> for ( String st : strings3 ) <nl> { <nl> - Pair < String , Long > pair = new Pair < String , Long > ( st , new Long ( st . length ( ) ) ) ; <nl> + Pair < String , Long > pair = Pair . create ( st , new Long ( st . length ( ) ) ) ; <nl> pairs . add ( pair ) ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / streaming / BootstrapTest . java b / test / unit / org / apache / cassandra / streaming / BootstrapTest . java <nl> index 20313f0 . . 83e0470 100644 <nl> - - - a / test / unit / org / apache / cassandra / streaming / BootstrapTest . java <nl> + + + b / test / unit / org / apache / cassandra / streaming / BootstrapTest . java <nl> @ @ - 38 , 7 + 38 , 7 @ @ public class BootstrapTest extends SchemaLoader <nl> { <nl> Descriptor desc = Descriptor . fromFilename ( new File ( " Keyspace1 " , " Keyspace1 - Standard1 - ia - 500 - Data . db " ) . toString ( ) ) ; <nl> / / assert ! desc . isLatestVersion ; / / minimum compatible version - - for now it is the latest as well <nl> - PendingFile inContext = new PendingFile ( null , desc , " Data . db " , Arrays . asList ( new Pair < Long , Long > ( 0L , 1L ) ) , OperationType . BOOTSTRAP ) ; <nl> + PendingFile inContext = new PendingFile ( null , desc , " Data . db " , Arrays . asList ( Pair . create ( 0L , 1L ) ) , OperationType . BOOTSTRAP ) ; <nl> <nl> PendingFile outContext = StreamIn . getContextMapping ( inContext ) ; <nl> / / filename and generation are expected to have changed <nl> diff - - git a / test / unit / org / apache / cassandra / streaming / SerializationsTest . java b / test / unit / org / apache / cassandra / streaming / SerializationsTest . java <nl> index 13493f9 . . 95a7d8b 100644 <nl> - - - a / test / unit / org / apache / cassandra / streaming / SerializationsTest . java <nl> + + + b / test / unit / org / apache / cassandra / streaming / SerializationsTest . java <nl> @ @ - 153 , 7 + 153 , 7 @ @ public class SerializationsTest extends AbstractSerializationsTester <nl> Descriptor desc = new Descriptor ( " z " , new File ( " path / doesn ' t / matter " ) , " Keyspace1 " , " Standard1 " , 23 , false ) ; <nl> List < Pair < Long , Long > > sections = new ArrayList < Pair < Long , Long > > ( ) ; <nl> for ( int i = 0 ; i < numSecs ; i + + ) <nl> - sections . add ( new Pair < Long , Long > ( new Long ( i ) , new Long ( i * i ) ) ) ; <nl> + sections . add ( Pair . create ( new Long ( i ) , new Long ( i * i ) ) ) ; <nl> return new PendingFile ( sst ? makeSSTable ( ) : null , desc , SSTable . COMPONENT _ DATA , sections , op ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / lib / cassandra - driver - internal - only - 1 . 0 . 2 . post . zip b / lib / cassandra - driver - internal - only - 1 . 0 . 2 . post . zip 
 index 9f6af56 . . 7ccd5f7 100644 
 Binary files a / lib / cassandra - driver - internal - only - 1 . 0 . 2 . post . zip and b / lib / cassandra - driver - internal - only - 1 . 0 . 2 . post . zip differ

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cache / KeyCacheKey . java b / src / java / org / apache / cassandra / cache / KeyCacheKey . java 
 index bee88e8 . . a553ba9 100644 
 - - - a / src / java / org / apache / cassandra / cache / KeyCacheKey . java 
 + + + b / src / java / org / apache / cassandra / cache / KeyCacheKey . java 
 @ @ - 39 , 7 + 39 , 7 @ @ public class KeyCacheKey implements CacheKey 
 
 public Pair < String , String > getPathInfo ( ) 
 { 
 - return new Pair < String , String > ( desc . ksname , desc . cfname ) ; 
 + return Pair . create ( desc . ksname , desc . cfname ) ; 
 } 
 
 public String toString ( ) 
 diff - - git a / src / java / org / apache / cassandra / config / Schema . java b / src / java / org / apache / cassandra / config / Schema . java 
 index d4ace31 . . dd16b4b 100644 
 - - - a / src / java / org / apache / cassandra / config / Schema . java 
 + + + b / src / java / org / apache / cassandra / config / Schema . java 
 @ @ - 379 , 7 + 379 , 7 @ @ public class Schema 
 * / 
 public UUID getId ( String ksName , String cfName ) 
 { 
 - return cfIdMap . get ( new Pair < String , String > ( ksName , cfName ) ) ; 
 + return cfIdMap . get ( Pair . create ( ksName , cfName ) ) ; 
 } 
 
 / * * 
 @ @ - 392 , 7 + 392 , 7 @ @ public class Schema 
 * / 
 public void load ( CFMetaData cfm ) 
 { 
 - Pair < String , String > key = new Pair < String , String > ( cfm . ksName , cfm . cfName ) ; 
 + Pair < String , String > key = Pair . create ( cfm . ksName , cfm . cfName ) ; 
 
 if ( cfIdMap . containsKey ( key ) ) 
 throw new RuntimeException ( String . format ( " Attempting to load already loaded column family % s . % s " , cfm . ksName , cfm . cfName ) ) ; 
 @ @ - 408 , 7 + 408 , 7 @ @ public class Schema 
 * / 
 public void purge ( CFMetaData cfm ) 
 { 
 - cfIdMap . remove ( new Pair < String , String > ( cfm . ksName , cfm . cfName ) ) ; 
 + cfIdMap . remove ( Pair . create ( cfm . ksName , cfm . cfName ) ) ; 
 } 
 
 / * Version control * / 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 index 67bdcb4 . . 6b9715e 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 @ @ - 134 , 7 + 134 , 7 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy 
 { 
 List < Pair < SSTableReader , Long > > tableLengthPairs = new ArrayList < Pair < SSTableReader , Long > > ( collection . size ( ) ) ; 
 for ( SSTableReader table : collection ) 
 - tableLengthPairs . add ( new Pair < SSTableReader , Long > ( table , table . onDiskLength ( ) ) ) ; 
 + tableLengthPairs . add ( Pair . create ( table , table . onDiskLength ( ) ) ) ; 
 return tableLengthPairs ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / dht / Bounds . java b / src / java / org / apache / cassandra / dht / Bounds . java 
 index 5a6cdb9 . . 7da30bc 100644 
 - - - a / src / java / org / apache / cassandra / dht / Bounds . java 
 + + + b / src / java / org / apache / cassandra / dht / Bounds . java 
 @ @ - 58 , 7 + 58 , 7 @ @ public class Bounds < T extends RingPosition > extends AbstractBounds < T > 
 
 AbstractBounds < T > lb = new Bounds < T > ( left , position , partitioner ) ; 
 AbstractBounds < T > rb = new Range < T > ( position , right , partitioner ) ; 
 - return new Pair < AbstractBounds < T > , AbstractBounds < T > > ( lb , rb ) ; 
 + return Pair . create ( lb , rb ) ; 
 } 
 
 public boolean intersects ( Bounds < T > that ) 
 diff - - git a / src / java / org / apache / cassandra / dht / ExcludingBounds . java b / src / java / org / apache / cassandra / dht / ExcludingBounds . java 
 index cbe5f9b . . 0bde8f1 100644 
 - - - a / src / java / org / apache / cassandra / dht / ExcludingBounds . java 
 + + + b / src / java / org / apache / cassandra / dht / ExcludingBounds . java 
 @ @ - 53 , 7 + 53 , 7 @ @ public class ExcludingBounds < T extends RingPosition > extends AbstractBounds < T > 
 return null ; 
 AbstractBounds < T > lb = new Range < T > ( left , position , partitioner ) ; 
 AbstractBounds < T > rb = new ExcludingBounds < T > ( position , right , partitioner ) ; 
 - return new Pair < AbstractBounds < T > , AbstractBounds < T > > ( lb , rb ) ; 
 + return Pair . create ( lb , rb ) ; 
 } 
 
 public List < ? extends AbstractBounds < T > > unwrap ( ) 
 diff - - git a / src / java / org / apache / cassandra / dht / IncludingExcludingBounds . java b / src / java / org / apache / cassandra / dht / IncludingExcludingBounds . java 
 index a4d0de3 . . 9c0f6dd 100644 
 - - - a / src / java / org / apache / cassandra / dht / IncludingExcludingBounds . java 
 + + + b / src / java / org / apache / cassandra / dht / IncludingExcludingBounds . java 
 @ @ - 52 , 7 + 52 , 7 @ @ public class IncludingExcludingBounds < T extends RingPosition > extends AbstractBo 
 assert contains ( position ) ; 
 AbstractBounds < T > lb = new Bounds < T > ( left , position , partitioner ) ; 
 AbstractBounds < T > rb = new ExcludingBounds < T > ( position , right , partitioner ) ; 
 - return new Pair < AbstractBounds < T > , AbstractBounds < T > > ( lb , rb ) ; 
 + return Pair . create ( lb , rb ) ; 
 } 
 
 public List < ? extends AbstractBounds < T > > unwrap ( ) 
 diff - - git a / src / java / org / apache / cassandra / dht / Range . java b / src / java / org / apache / cassandra / dht / Range . java 
 index eaa9e95 . . f32c938 100644 
 - - - a / src / java / org / apache / cassandra / dht / Range . java 
 + + + b / src / java / org / apache / cassandra / dht / Range . java 
 @ @ - 224 , 7 + 224 , 7 @ @ public class Range < T extends RingPosition > extends AbstractBounds < T > implements 
 
 AbstractBounds < T > lb = new Range < T > ( left , position , partitioner ) ; 
 AbstractBounds < T > rb = new Range < T > ( position , right , partitioner ) ; 
 - return new Pair < AbstractBounds < T > , AbstractBounds < T > > ( lb , rb ) ; 
 + return Pair . create ( lb , rb ) ; 
 } 
 
 public List < Range < T > > unwrap ( ) 
 diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java 
 index c23f290 . . db284ec 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java 
 + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java 
 @ @ - 406 , 7 + 406 , 7 @ @ public class ColumnFamilyRecordReader extends RecordReader < ByteBuffer , SortedMap 
 IColumn column = unthriftify ( cosc ) ; 
 map . put ( column . name ( ) , column ) ; 
 } 
 - return new Pair < ByteBuffer , SortedMap < ByteBuffer , IColumn > > ( ks . key , map ) ; 
 + return Pair . create ( ks . key , map ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java 
 index 74fde20 . . 3b66976 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java 
 + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java 
 @ @ - 137 , 7 + 137 , 7 @ @ implements org . apache . hadoop . mapred . RecordWriter < ByteBuffer , List < Mutation > > 
 } 
 
 for ( Mutation amut : value ) 
 - client . put ( new Pair < ByteBuffer , Mutation > ( keybuff , amut ) ) ; 
 + client . put ( Pair . create ( keybuff , amut ) ) ; 
 progressable . progress ( ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / Component . java b / src / java / org / apache / cassandra / io / sstable / Component . java 
 index 7da961b . . 7a001ab 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / Component . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / Component . java 
 @ @ - 132 , 7 + 132 , 7 @ @ public class Component 
 throw new IllegalStateException ( ) ; 
 } 
 
 - return new Pair < Descriptor , Component > ( path . left , component ) ; 
 + return Pair . create ( path . left , component ) ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / Descriptor . java b / src / java / org / apache / cassandra / io / sstable / Descriptor . java 
 index 4f776d6 . . b173bac 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / Descriptor . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / Descriptor . java 
 @ @ - 277 , 7 + 277 , 7 @ @ public class Descriptor 
 / / component suffix 
 String component = st . nextToken ( ) ; 
 directory = directory ! = null ? directory : new File ( " . " ) ; 
 - return new Pair < Descriptor , String > ( new Descriptor ( version , directory , ksname , cfname , generation , temporary ) , component ) ; 
 + return Pair . create ( new Descriptor ( version , directory , ksname , cfname , generation , temporary ) , component ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 index 0968e12 . . ae49928 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 @ @ - 589 , 7 + 589 , 7 @ @ public class SSTableReader extends SSTable 
 if ( left > right ) 
 / / empty range 
 continue ; 
 - positions . add ( new Pair ( Integer . valueOf ( left ) , Integer . valueOf ( right ) ) ) ; 
 + positions . add ( Pair . create ( Integer . valueOf ( left ) , Integer . valueOf ( right ) ) ) ; 
 } 
 return positions ; 
 } 
 @ @ - 670 , 7 + 670 , 7 @ @ public class SSTableReader extends SSTable 
 if ( left = = right ) 
 / / empty range 
 continue ; 
 - positions . add ( new Pair ( Long . valueOf ( left ) , Long . valueOf ( right ) ) ) ; 
 + positions . add ( Pair . create ( Long . valueOf ( left ) , Long . valueOf ( right ) ) ) ; 
 } 
 return positions ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / locator / TokenMetadata . java b / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 index f606475 . . 582ad10 100644 
 - - - a / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 + + + b / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 @ @ - 340 , 7 + 340 , 7 @ @ public class TokenMetadata 
 
 try 
 { 
 - movingEndpoints . add ( new Pair < Token , InetAddress > ( token , endpoint ) ) ; 
 + movingEndpoints . add ( Pair . create ( token , endpoint ) ) ; 
 } 
 finally 
 { 
 @ @ - 959 , 7 + 959 , 7 @ @ public class TokenMetadata 
 dcRacks . put ( dc , HashMultimap . < String , InetAddress > create ( ) ) ; 
 dcRacks . get ( dc ) . put ( rack , ep ) ; 
 
 - currentLocations . put ( ep , new Pair < String , String > ( dc , rack ) ) ; 
 + currentLocations . put ( ep , Pair . create ( dc , rack ) ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / service / CacheService . java b / src / java / org / apache / cassandra / service / CacheService . java 
 index 0ed8002 . . 2342cac 100644 
 - - - a / src / java / org / apache / cassandra / service / CacheService . java 
 + + + b / src / java / org / apache / cassandra / service / CacheService . java 
 @ @ - 331 , 7 + 331 , 7 @ @ public class CacheService implements CacheServiceMBean 
 { 
 DecoratedKey key = cfs . partitioner . decorateKey ( buffer ) ; 
 ColumnFamily data = cfs . getTopLevelColumns ( QueryFilter . getIdentityFilter ( key , new QueryPath ( cfs . columnFamily ) ) , Integer . MIN _ VALUE , true ) ; 
 - return new Pair < RowCacheKey , IRowCacheEntry > ( new RowCacheKey ( cfs . metadata . cfId , key ) , data ) ; 
 + return Pair . create ( new RowCacheKey ( cfs . metadata . cfId , key ) , data ) ; 
 } 
 } ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java b / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java 
 index 20ebddd . . 456dff7 100644 
 - - - a / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java 
 + + + b / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java 
 @ @ - 111 , 7 + 111 , 7 @ @ public class RangeSliceResponseResolver implements IResponseResolver < RangeSliceR 
 
 protected Pair < Row , InetAddress > computeNext ( ) 
 { 
 - return iter . hasNext ( ) ? new Pair < Row , InetAddress > ( iter . next ( ) , source ) : endOfData ( ) ; 
 + return iter . hasNext ( ) ? Pair . create ( iter . next ( ) , source ) : endOfData ( ) ; 
 } 
 
 public void close ( ) { } 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 9d7b481 . . 0c6e7df 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 49 , 7 + 49 , 6 @ @ import org . apache . cassandra . io . sstable . SSTableDeletingTask ; 
 import org . apache . cassandra . io . sstable . SSTableLoader ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . locator . * ; 
 - import org . apache . cassandra . metrics . ClientRequestMetrics ; 
 import org . apache . cassandra . metrics . StorageMetrics ; 
 import org . apache . cassandra . net . IAsyncResult ; 
 import org . apache . cassandra . net . MessageOut ; 
 @ @ - 3219 , 7 + 3218 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 } 
 } 
 
 - return new Pair < Set < Range < Token > > , Set < Range < Token > > > ( toStream , toFetch ) ; 
 + return Pair . create ( toStream , toFetch ) ; 
 } 
 
 public void bulkLoad ( String directory ) 
 diff - - git a / src / java / org / apache / cassandra / streaming / PendingFile . java b / src / java / org / apache / cassandra / streaming / PendingFile . java 
 index 880eed9 . . 3597b6c 100644 
 - - - a / src / java / org / apache / cassandra / streaming / PendingFile . java 
 + + + b / src / java / org / apache / cassandra / streaming / PendingFile . java 
 @ @ - 153 , 7 + 153 , 7 @ @ public class PendingFile 
 int count = dis . readInt ( ) ; 
 List < Pair < Long , Long > > sections = new ArrayList < Pair < Long , Long > > ( count ) ; 
 for ( int i = 0 ; i < count ; i + + ) 
 - sections . add ( new Pair < Long , Long > ( dis . readLong ( ) , dis . readLong ( ) ) ) ; 
 + sections . add ( Pair . create ( dis . readLong ( ) , dis . readLong ( ) ) ) ; 
 / / this controls the way indexes are rebuilt when streaming in . 
 OperationType type = OperationType . RESTORE _ REPLICA _ COUNT ; 
 type = OperationType . valueOf ( dis . readUTF ( ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamInSession . java b / src / java / org / apache / cassandra / streaming / StreamInSession . java 
 index cfa7d0b . . 47a8896 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamInSession . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamInSession . java 
 @ @ - 82 , 7 + 82 , 7 @ @ public class StreamInSession extends AbstractStreamSession 
 
 public static StreamInSession create ( InetAddress host , IStreamCallback callback ) 
 { 
 - Pair < InetAddress , Long > context = new Pair < InetAddress , Long > ( host , nextSessionId ( ) ) ; 
 + Pair < InetAddress , Long > context = Pair . create ( host , nextSessionId ( ) ) ; 
 StreamInSession session = new StreamInSession ( context , callback ) ; 
 sessions . put ( context , session ) ; 
 return session ; 
 @ @ - 90 , 7 + 90 , 7 @ @ public class StreamInSession extends AbstractStreamSession 
 
 public static StreamInSession get ( InetAddress host , long sessionId ) 
 { 
 - Pair < InetAddress , Long > context = new Pair < InetAddress , Long > ( host , sessionId ) ; 
 + Pair < InetAddress , Long > context = Pair . create ( host , sessionId ) ; 
 StreamInSession session = sessions . get ( context ) ; 
 if ( session = = null ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamOutSession . java b / src / java / org / apache / cassandra / streaming / StreamOutSession . java 
 index 504c15d . . e1f42dc 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamOutSession . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamOutSession . java 
 @ @ - 71 , 7 + 71 , 7 @ @ public class StreamOutSession extends AbstractStreamSession 
 
 public static StreamOutSession create ( String table , InetAddress host , long sessionId , IStreamCallback callback ) 
 { 
 - Pair < InetAddress , Long > context = new Pair < InetAddress , Long > ( host , sessionId ) ; 
 + Pair < InetAddress , Long > context = Pair . create ( host , sessionId ) ; 
 StreamOutSession session = new StreamOutSession ( table , context , callback ) ; 
 streams . put ( context , session ) ; 
 return session ; 
 @ @ - 79 , 7 + 79 , 7 @ @ public class StreamOutSession extends AbstractStreamSession 
 
 public static StreamOutSession get ( InetAddress host , long sessionId ) 
 { 
 - return streams . get ( new Pair < InetAddress , Long > ( host , sessionId ) ) ; 
 + return streams . get ( Pair . create ( host , sessionId ) ) ; 
 } 
 
 private final Map < String , PendingFile > files = new NonBlockingHashMap < String , PendingFile > ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / streaming / compress / CompressedFileStreamTask . java b / src / java / org / apache / cassandra / streaming / compress / CompressedFileStreamTask . java 
 index 398599f . . dda9d7d 100644 
 - - - a / src / java / org / apache / cassandra / streaming / compress / CompressedFileStreamTask . java 
 + + + b / src / java / org / apache / cassandra / streaming / compress / CompressedFileStreamTask . java 
 @ @ - 134 , 17 + 134 , 17 @ @ public class CompressedFileStreamTask extends FileStreamTask 
 if ( chunk . offset = = lastSection . right ) 
 { 
 / / extend previous section to end of this chunk 
 - lastSection = new Pair < Long , Long > ( lastSection . left , chunk . offset + chunk . length + 4 ) ; / / 4 bytes for CRC 
 + lastSection = Pair . create ( lastSection . left , chunk . offset + chunk . length + 4 ) ; / / 4 bytes for CRC 
 } 
 else 
 { 
 transferSections . add ( lastSection ) ; 
 - lastSection = new Pair < Long , Long > ( chunk . offset , chunk . offset + chunk . length + 4 ) ; 
 + lastSection = Pair . create ( chunk . offset , chunk . offset + chunk . length + 4 ) ; 
 } 
 } 
 else 
 { 
 - lastSection = new Pair < Long , Long > ( chunk . offset , chunk . offset + chunk . length + 4 ) ; 
 + lastSection = Pair . create ( chunk . offset , chunk . offset + chunk . length + 4 ) ; 
 } 
 } 
 if ( lastSection ! = null ) 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 index 554fba2 . . 409716a 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 @ @ - 49 , 15 + 49 , 15 @ @ import org . apache . cassandra . utils . Pair ; 
 
 public class NodeCmd 
 { 
 - private static final Pair < String , String > SNAPSHOT _ COLUMNFAMILY _ OPT = new Pair < String , String > ( " cf " , " column - family " ) ; 
 - private static final Pair < String , String > HOST _ OPT = new Pair < String , String > ( " h " , " host " ) ; 
 - private static final Pair < String , String > PORT _ OPT = new Pair < String , String > ( " p " , " port " ) ; 
 - private static final Pair < String , String > USERNAME _ OPT = new Pair < String , String > ( " u " , " username " ) ; 
 - private static final Pair < String , String > PASSWORD _ OPT = new Pair < String , String > ( " pw " , " password " ) ; 
 - private static final Pair < String , String > TAG _ OPT = new Pair < String , String > ( " t " , " tag " ) ; 
 - private static final Pair < String , String > TOKENS _ OPT = new Pair < String , String > ( " T " , " tokens " ) ; 
 - private static final Pair < String , String > PRIMARY _ RANGE _ OPT = new Pair < String , String > ( " pr " , " partitioner - range " ) ; 
 - private static final Pair < String , String > SNAPSHOT _ REPAIR _ OPT = new Pair < String , String > ( " snapshot " , " with - snapshot " ) ; 
 + private static final Pair < String , String > SNAPSHOT _ COLUMNFAMILY _ OPT = Pair . create ( " cf " , " column - family " ) ; 
 + private static final Pair < String , String > HOST _ OPT = Pair . create ( " h " , " host " ) ; 
 + private static final Pair < String , String > PORT _ OPT = Pair . create ( " p " , " port " ) ; 
 + private static final Pair < String , String > USERNAME _ OPT = Pair . create ( " u " , " username " ) ; 
 + private static final Pair < String , String > PASSWORD _ OPT = Pair . create ( " pw " , " password " ) ; 
 + private static final Pair < String , String > TAG _ OPT = Pair . create ( " t " , " tag " ) ; 
 + private static final Pair < String , String > TOKENS _ OPT = Pair . create ( " T " , " tokens " ) ; 
 + private static final Pair < String , String > PRIMARY _ RANGE _ OPT = Pair . create ( " pr " , " partitioner - range " ) ; 
 + private static final Pair < String , String > SNAPSHOT _ REPAIR _ OPT = Pair . create ( " snapshot " , " with - snapshot " ) ; 
 
 private static final String DEFAULT _ HOST = " 127 . 0 . 0 . 1 " ; 
 private static final int DEFAULT _ PORT = 7199 ; 
 diff - - git a / src / java / org / apache / cassandra / utils / ExpiringMap . java b / src / java / org / apache / cassandra / utils / ExpiringMap . java 
 index d561fc9 . . 2eade07 100644 
 - - - a / src / java / org / apache / cassandra / utils / ExpiringMap . java 
 + + + b / src / java / org / apache / cassandra / utils / ExpiringMap . java 
 @ @ - 91 , 7 + 91 , 7 @ @ public class ExpiringMap < K , V > 
 cache . remove ( entry . getKey ( ) ) ; 
 n + + ; 
 if ( postExpireHook ! = null ) 
 - postExpireHook . apply ( new Pair < K , CacheableObject < V > > ( entry . getKey ( ) , entry . getValue ( ) ) ) ; 
 + postExpireHook . apply ( Pair . create ( entry . getKey ( ) , entry . getValue ( ) ) ) ; 
 } 
 } 
 logger . trace ( " Expired { } entries " , n ) ; 
 diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 index 04a832a . . fcfdd2b 100644 
 - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java 
 + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 @ @ - 34 , 7 + 34 , 6 @ @ import java . util . concurrent . TimeUnit ; 
 import java . util . concurrent . TimeoutException ; 
 
 import com . google . common . base . Joiner ; 
 - import com . google . common . base . Throwables ; 
 import com . google . common . collect . AbstractIterator ; 
 import org . apache . commons . lang . StringUtils ; 
 import org . slf4j . Logger ; 
 @ @ - 175 , 7 + 174 , 7 @ @ public class FBUtilities 
 remainder = distance . testBit ( 0 ) ; 
 midpoint = distance . shiftRight ( 1 ) . add ( left ) . mod ( max ) ; 
 } 
 - return new Pair < BigInteger , Boolean > ( midpoint , remainder ) ; 
 + return Pair . create ( midpoint , remainder ) ; 
 } 
 
 public static int compareUnsigned ( byte [ ] bytes1 , byte [ ] bytes2 , int offset1 , int offset2 , int len1 , int len2 ) 
 diff - - git a / src / java / org / apache / cassandra / utils / Pair . java b / src / java / org / apache / cassandra / utils / Pair . java 
 index a14a9b8 . . c654176 100644 
 - - - a / src / java / org / apache / cassandra / utils / Pair . java 
 + + + b / src / java / org / apache / cassandra / utils / Pair . java 
 @ @ - 24 , 7 + 24 , 7 @ @ public class Pair < T1 , T2 > 
 public final T1 left ; 
 public final T2 right ; 
 
 - public Pair ( T1 left , T2 right ) 
 + private Pair ( T1 left , T2 right ) 
 { 
 this . left = left ; 
 this . right = right ; 
 diff - - git a / test / unit / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategyTest . java b / test / unit / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategyTest . java 
 index e1ded7c . . 89e0a6a 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategyTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategyTest . java 
 @ @ - 33 , 7 + 33 , 7 @ @ public class SizeTieredCompactionStrategyTest 
 String [ ] strings = { " a " , " bbbb " , " cccccccc " , " cccccccc " , " bbbb " , " a " } ; 
 for ( String st : strings ) 
 { 
 - Pair < String , Long > pair = new Pair < String , Long > ( st , new Long ( st . length ( ) ) ) ; 
 + Pair < String , Long > pair = Pair . create ( st , new Long ( st . length ( ) ) ) ; 
 pairs . add ( pair ) ; 
 } 
 
 @ @ - 53 , 7 + 53 , 7 @ @ public class SizeTieredCompactionStrategyTest 
 String [ ] strings2 = { " aaa " , " bbbbbbbb " , " aaa " , " bbbbbbbb " , " bbbbbbbb " , " aaa " } ; 
 for ( String st : strings2 ) 
 { 
 - Pair < String , Long > pair = new Pair < String , Long > ( st , new Long ( st . length ( ) ) ) ; 
 + Pair < String , Long > pair = Pair . create ( st , new Long ( st . length ( ) ) ) ; 
 pairs . add ( pair ) ; 
 } 
 
 @ @ - 74 , 7 + 74 , 7 @ @ public class SizeTieredCompactionStrategyTest 
 String [ ] strings3 = { " aaa " , " bbbbbbbb " , " aaa " , " bbbbbbbb " , " bbbbbbbb " , " aaa " } ; 
 for ( String st : strings3 ) 
 { 
 - Pair < String , Long > pair = new Pair < String , Long > ( st , new Long ( st . length ( ) ) ) ; 
 + Pair < String , Long > pair = Pair . create ( st , new Long ( st . length ( ) ) ) ; 
 pairs . add ( pair ) ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / streaming / BootstrapTest . java b / test / unit / org / apache / cassandra / streaming / BootstrapTest . java 
 index 20313f0 . . 83e0470 100644 
 - - - a / test / unit / org / apache / cassandra / streaming / BootstrapTest . java 
 + + + b / test / unit / org / apache / cassandra / streaming / BootstrapTest . java 
 @ @ - 38 , 7 + 38 , 7 @ @ public class BootstrapTest extends SchemaLoader 
 { 
 Descriptor desc = Descriptor . fromFilename ( new File ( " Keyspace1 " , " Keyspace1 - Standard1 - ia - 500 - Data . db " ) . toString ( ) ) ; 
 / / assert ! desc . isLatestVersion ; / / minimum compatible version - - for now it is the latest as well 
 - PendingFile inContext = new PendingFile ( null , desc , " Data . db " , Arrays . asList ( new Pair < Long , Long > ( 0L , 1L ) ) , OperationType . BOOTSTRAP ) ; 
 + PendingFile inContext = new PendingFile ( null , desc , " Data . db " , Arrays . asList ( Pair . create ( 0L , 1L ) ) , OperationType . BOOTSTRAP ) ; 
 
 PendingFile outContext = StreamIn . getContextMapping ( inContext ) ; 
 / / filename and generation are expected to have changed 
 diff - - git a / test / unit / org / apache / cassandra / streaming / SerializationsTest . java b / test / unit / org / apache / cassandra / streaming / SerializationsTest . java 
 index 13493f9 . . 95a7d8b 100644 
 - - - a / test / unit / org / apache / cassandra / streaming / SerializationsTest . java 
 + + + b / test / unit / org / apache / cassandra / streaming / SerializationsTest . java 
 @ @ - 153 , 7 + 153 , 7 @ @ public class SerializationsTest extends AbstractSerializationsTester 
 Descriptor desc = new Descriptor ( " z " , new File ( " path / doesn ' t / matter " ) , " Keyspace1 " , " Standard1 " , 23 , false ) ; 
 List < Pair < Long , Long > > sections = new ArrayList < Pair < Long , Long > > ( ) ; 
 for ( int i = 0 ; i < numSecs ; i + + ) 
 - sections . add ( new Pair < Long , Long > ( new Long ( i ) , new Long ( i * i ) ) ) ; 
 + sections . add ( Pair . create ( new Long ( i ) , new Long ( i * i ) ) ) ; 
 return new PendingFile ( sst ? makeSSTable ( ) : null , desc , SSTable . COMPONENT _ DATA , sections , op ) ; 
 } 

