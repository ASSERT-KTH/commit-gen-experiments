BLEU SCORE: 0.03416211359799979

TEST MSG: Fix whitespace , unused imports and variables in cqlsh
GENERATED MSG: cqlsh : add COPY command to load data from CSV flat files

TEST DIFF (one line): diff - - git a / bin / cqlsh b / bin / cqlsh <nl> index e1bd312 . . 05f3368 100755 <nl> - - - a / bin / cqlsh <nl> + + + b / bin / cqlsh <nl> @ @ - 36 , 7 + 36 , 7 @ @ description = " CQL Shell for Apache Cassandra " <nl> version = " 5 . 0 . 1 " <nl> <nl> from StringIO import StringIO <nl> - from contextlib import contextmanager , closing <nl> + from contextlib import contextmanager <nl> from glob import glob <nl> <nl> import cmd <nl> @ @ - 79 , 6 + 79 , 7 @ @ if myplatform = = ' Linux ' : <nl> if os . environ . get ( ' CQLSH _ NO _ BUNDLED ' , ' ' ) : <nl> ZIPLIB _ DIRS = ( ) <nl> <nl> + <nl> def find _ zip ( libprefix ) : <nl> for ziplibdir in ZIPLIB _ DIRS : <nl> zips = glob ( os . path . join ( ziplibdir , libprefix + ' * . zip ' ) ) <nl> @ @ - 111 , 7 + 112 , 6 @ @ from cassandra . cluster import Cluster , PagedResult <nl> from cassandra . query import SimpleStatement , ordered _ dict _ factory <nl> from cassandra . policies import WhiteListRoundRobinPolicy <nl> from cassandra . protocol import QueryMessage , ResultMessage <nl> - from cassandra . marshal import int16 _ pack , int32 _ pack , uint64 _ pack <nl> from cassandra . metadata import protect _ name , protect _ names , protect _ value <nl> from cassandra . auth import PlainTextAuthProvider <nl> <nl> @ @ - 142 , 6 + 142 , 9 @ @ if readline is not None and readline . _ _ doc _ _ is not None and ' libedit ' in readli <nl> else : <nl> DEFAULT _ COMPLETEKEY = ' tab ' <nl> <nl> + cqldocs = None <nl> + cqlruleset = None <nl> + <nl> epilog = " " " Connects to % ( DEFAULT _ HOST ) s : % ( DEFAULT _ PORT ) d by default . These <nl> defaults can be changed by setting $ CQLSH _ HOST and / or $ CQLSH _ PORT . When a <nl> host ( and optional port number ) are given on the command line , they take <nl> @ @ - 226 , 13 + 229 , 17 @ @ my _ commands _ ending _ with _ newline = ( <nl> ' quit ' <nl> ) <nl> <nl> + <nl> cqlsh _ syntax _ completers = [ ] <nl> + <nl> + <nl> def cqlsh _ syntax _ completer ( rulename , termname ) : <nl> def registrator ( f ) : <nl> cqlsh _ syntax _ completers . append ( ( rulename , termname , f ) ) <nl> return f <nl> return registrator <nl> <nl> + <nl> cqlsh _ extra _ syntax _ rules = r ' ' ' <nl> < cqlshCommand > : : = < CQL _ Statement > <nl> | < specialCommand > ( " ; " | " \ n " ) <nl> @ @ - 324 , 13 + 331 , 15 @ @ cqlsh _ extra _ syntax _ rules = r ' ' ' <nl> < qmark > : : = " ? " ; <nl> ' ' ' <nl> <nl> + <nl> @ cqlsh _ syntax _ completer ( ' helpCommand ' , ' topic ' ) <nl> def complete _ help ( ctxt , cqlsh ) : <nl> - return sorted ( [ t . upper ( ) for t in cqldocs . get _ help _ topics ( ) + cqlsh . get _ help _ topics ( ) ] ) <nl> + return sorted ( [ t . upper ( ) for t in cqldocs . get _ help _ topics ( ) + cqlsh . get _ help _ topics ( ) ] ) <nl> + <nl> <nl> def complete _ source _ quoted _ filename ( ctxt , cqlsh ) : <nl> - partial = ctxt . get _ binding ( ' partial ' , ' ' ) <nl> - head , tail = os . path . split ( partial ) <nl> + partial _ path = ctxt . get _ binding ( ' partial ' , ' ' ) <nl> + head , tail = os . path . split ( partial _ path ) <nl> exhead = os . path . expanduser ( head ) <nl> try : <nl> contents = os . listdir ( exhead or ' . ' ) <nl> @ @ - 345 , 21 + 354 , 22 @ @ def complete _ source _ quoted _ filename ( ctxt , cqlsh ) : <nl> annotated . append ( match ) <nl> return annotated <nl> <nl> - cqlsh _ syntax _ completer ( ' sourceCommand ' , ' fname ' ) \ <nl> - ( complete _ source _ quoted _ filename ) <nl> - cqlsh _ syntax _ completer ( ' captureCommand ' , ' fname ' ) \ <nl> - ( complete _ source _ quoted _ filename ) <nl> + <nl> + cqlsh _ syntax _ completer ( ' sourceCommand ' , ' fname ' ) ( complete _ source _ quoted _ filename ) <nl> + cqlsh _ syntax _ completer ( ' captureCommand ' , ' fname ' ) ( complete _ source _ quoted _ filename ) <nl> + <nl> <nl> @ cqlsh _ syntax _ completer ( ' copyCommand ' , ' fname ' ) <nl> def copy _ fname _ completer ( ctxt , cqlsh ) : <nl> lasttype = ctxt . get _ binding ( ' * LASTTYPE * ' ) <nl> if lasttype = = ' unclosedString ' : <nl> return complete _ source _ quoted _ filename ( ctxt , cqlsh ) <nl> - partial = ctxt . get _ binding ( ' partial ' ) <nl> - if partial = = ' ' : <nl> + partial _ path = ctxt . get _ binding ( ' partial ' ) <nl> + if partial _ path = = ' ' : <nl> return [ " ' " ] <nl> return ( ) <nl> <nl> + <nl> @ cqlsh _ syntax _ completer ( ' copyCommand ' , ' colnames ' ) <nl> def complete _ copy _ column _ names ( ctxt , cqlsh ) : <nl> existcols = map ( cqlsh . cql _ unprotect _ name , ctxt . get _ binding ( ' colnames ' , ( ) ) ) <nl> @ @ - 370 , 8 + 380 , 10 @ @ def complete _ copy _ column _ names ( ctxt , cqlsh ) : <nl> return [ colnames [ 0 ] ] <nl> return set ( colnames [ 1 : ] ) - set ( existcols ) <nl> <nl> + <nl> COPY _ OPTIONS = ( ' DELIMITER ' , ' QUOTE ' , ' ESCAPE ' , ' HEADER ' , ' ENCODING ' , ' NULL ' ) <nl> <nl> + <nl> @ cqlsh _ syntax _ completer ( ' copyOption ' , ' optnames ' ) <nl> def complete _ copy _ options ( ctxt , cqlsh ) : <nl> optnames = map ( str . upper , ctxt . get _ binding ( ' optnames ' , ( ) ) ) <nl> @ @ - 381 , 6 + 393 , 7 @ @ def complete _ copy _ options ( ctxt , cqlsh ) : <nl> opts - = ( ' ENCODING ' , ) <nl> return opts <nl> <nl> + <nl> @ cqlsh _ syntax _ completer ( ' copyOption ' , ' optvals ' ) <nl> def complete _ copy _ opt _ values ( ctxt , cqlsh ) : <nl> optnames = ctxt . get _ binding ( ' optnames ' , ( ) ) <nl> @ @ - 389 , 21 + 402 , 27 @ @ def complete _ copy _ opt _ values ( ctxt , cqlsh ) : <nl> return [ ' true ' , ' false ' ] <nl> return [ cqlhandling . Hint ( ' < single _ character _ string > ' ) ] <nl> <nl> + <nl> class NoKeyspaceError ( Exception ) : <nl> pass <nl> <nl> + <nl> class KeyspaceNotFound ( Exception ) : <nl> pass <nl> <nl> + <nl> class ColumnFamilyNotFound ( Exception ) : <nl> pass <nl> <nl> + <nl> class VersionNotSupported ( Exception ) : <nl> pass <nl> <nl> + <nl> class UserTypeNotFound ( Exception ) : <nl> pass <nl> <nl> + <nl> class DecodeError ( Exception ) : <nl> verb = ' decode ' <nl> <nl> @ @ - 425 , 9 + 444 , 11 @ @ class DecodeError ( Exception ) : <nl> def _ _ repr _ _ ( self ) : <nl> return ' < % s % s > ' % ( self . _ _ class _ _ . _ _ name _ _ , self . message ( ) ) <nl> <nl> + <nl> class FormatError ( DecodeError ) : <nl> verb = ' format ' <nl> <nl> + <nl> def full _ cql _ version ( ver ) : <nl> while ver . count ( ' . ' ) < 2 : <nl> ver + = ' . 0 ' <nl> @ @ - 435 , 6 + 456 , 7 @ @ def full _ cql _ version ( ver ) : <nl> vertuple = tuple ( map ( int , ver _ parts [ 0 ] . split ( ' . ' ) ) + [ ver _ parts [ 1 ] ] ) <nl> return ver , vertuple <nl> <nl> + <nl> def format _ value ( val , output _ encoding , addcolor = False , time _ format = None , <nl> float _ precision = None , colormap = None , nullval = None ) : <nl> if isinstance ( val , DecodeError ) : <nl> @ @ - 446 , 6 + 468 , 7 @ @ def format _ value ( val , output _ encoding , addcolor = False , time _ format = None , <nl> addcolor = addcolor , nullval = nullval , time _ format = time _ format , <nl> float _ precision = float _ precision ) <nl> <nl> + <nl> def show _ warning _ without _ quoting _ line ( message , category , filename , lineno , file = None , line = None ) : <nl> if file is None : <nl> file = sys . stderr <nl> @ @ - 456 , 6 + 479 , 7 @ @ def show _ warning _ without _ quoting _ line ( message , category , filename , lineno , file = <nl> warnings . showwarning = show _ warning _ without _ quoting _ line <nl> warnings . filterwarnings ( ' always ' , category = cql3handling . UnexpectedTableStructure ) <nl> <nl> + <nl> def describe _ interval ( seconds ) : <nl> desc = [ ] <nl> for length , unit in ( ( 86400 , ' day ' ) , ( 3600 , ' hour ' ) , ( 60 , ' minute ' ) ) : <nl> @ @ - 476 , 6 + 500 , 7 @ @ def describe _ interval ( seconds ) : <nl> def auto _ format _ udts ( ) : <nl> # when we see a new user defined type , set up the shell formatting for it <nl> udt _ apply _ params = cassandra . cqltypes . UserType . apply _ parameters <nl> + <nl> def new _ apply _ params ( cls , * args , * * kwargs ) : <nl> udt _ class = udt _ apply _ params ( * args , * * kwargs ) <nl> formatter _ for ( udt _ class . typename ) ( format _ value _ utype ) <nl> @ @ - 484 , 6 + 509 , 7 @ @ def auto _ format _ udts ( ) : <nl> cassandra . cqltypes . UserType . udt _ apply _ parameters = classmethod ( new _ apply _ params ) <nl> <nl> make _ udt _ class = cassandra . cqltypes . UserType . make _ udt _ class <nl> + <nl> def new _ make _ udt _ class ( cls , * args , * * kwargs ) : <nl> udt _ class = make _ udt _ class ( * args , * * kwargs ) <nl> formatter _ for ( udt _ class . tuple _ type . _ _ name _ _ ) ( format _ value _ utype ) <nl> @ @ - 652 , 9 + 678 , 9 @ @ class Shell ( cmd . Cmd ) : <nl> # check column role and color appropriately <nl> if table _ meta : <nl> if name in [ col . name for col in table _ meta . partition _ key ] : <nl> - column _ colors . default _ factory = lambda : RED <nl> + column _ colors . default _ factory = lambda : RED <nl> elif name in [ col . name for col in table _ meta . clustering _ key ] : <nl> - column _ colors . default _ factory = lambda : CYAN <nl> + column _ colors . default _ factory = lambda : CYAN <nl> return self . myformat _ value ( name , colormap = column _ colors ) <nl> <nl> def report _ connection ( self ) : <nl> @ @ - 778 , 7 + 804 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> def reset _ statement ( self ) : <nl> self . reset _ prompt ( ) <nl> self . statement . truncate ( 0 ) <nl> - self . empty _ lines = 0 ; <nl> + self . empty _ lines = 0 <nl> <nl> def reset _ prompt ( self ) : <nl> if self . current _ keyspace is None : <nl> @ @ - 787 , 7 + 813 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> self . set _ prompt ( self . keyspace _ prompt % self . current _ keyspace , True ) <nl> <nl> def set _ continue _ prompt ( self ) : <nl> - if self . empty _ lines > = 3 : <nl> + if self . empty _ lines > = 3 : <nl> self . set _ prompt ( " Statements are terminated with a ' ; ' . You can press CTRL - C to cancel an incomplete statement . " ) <nl> self . empty _ lines = 0 <nl> return <nl> @ @ - 846 , 7 + 872 , 6 @ @ class Shell ( cmd . Cmd ) : <nl> return <nl> yield newline <nl> <nl> - <nl> def cmdloop ( self ) : <nl> " " " <nl> Adapted from cmd . Cmd ' s version , because there is literally no way with <nl> @ @ - 988 , 7 + 1013 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> parsed = cqlruleset . cql _ parse ( query _ string ) [ 1 ] <nl> except IndexError : <nl> return None <nl> - ks = self . cql _ unprotect _ name ( parsed . get _ binding ( ' ksname ' , None ) ) <nl> + ks = self . cql _ unprotect _ name ( parsed . get _ binding ( ' ksname ' , None ) ) <nl> cf = self . cql _ unprotect _ name ( parsed . get _ binding ( ' cfname ' ) ) <nl> return self . get _ table _ meta ( ks , cf ) <nl> <nl> @ @ - 1011 , 9 + 1036 , 9 @ @ class Shell ( cmd . Cmd ) : <nl> if statement . query _ string [ : 6 ] . lower ( ) = = ' select ' : <nl> self . print _ result ( rows , self . parse _ for _ table _ meta ( statement . query _ string ) ) <nl> elif statement . query _ string . lower ( ) . startswith ( " list users " ) : <nl> - self . print _ result ( rows , self . get _ table _ meta ( ' system _ auth ' , ' users ' ) ) <nl> + self . print _ result ( rows , self . get _ table _ meta ( ' system _ auth ' , ' users ' ) ) <nl> elif statement . query _ string . lower ( ) . startswith ( " list " ) : <nl> - self . print _ result ( rows , self . get _ table _ meta ( ' system _ auth ' , ' permissions ' ) ) <nl> + self . print _ result ( rows , self . get _ table _ meta ( ' system _ auth ' , ' permissions ' ) ) <nl> elif rows : <nl> # CAS INSERT / UPDATE <nl> self . writeresult ( " " ) <nl> @ @ - 1091 , 7 + 1116 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> # stop if there are no rows <nl> if formatted _ values is None : <nl> self . writeresult ( " " ) <nl> - return ; <nl> + return <nl> <nl> # print row data <nl> for row in formatted _ values : <nl> @ @ - 1143 , 7 + 1168 , 6 @ @ class Shell ( cmd . Cmd ) : <nl> prevlines = self . statement . getvalue ( ) <nl> wholestmt = prevlines + curline <nl> begidx = readline . get _ begidx ( ) + len ( prevlines ) <nl> - endidx = readline . get _ endidx ( ) + len ( prevlines ) <nl> stuff _ to _ complete = wholestmt [ : begidx ] <nl> return cqlruleset . cql _ complete ( stuff _ to _ complete , text , cassandra _ conn = self , <nl> debug = debug _ completion , startsymbol = ' cqlshCommand ' ) <nl> @ @ - 1377 , 7 + 1401 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> fname = os . path . expanduser ( self . cql _ unprotect _ value ( fname ) ) <nl> copyoptnames = map ( str . lower , parsed . get _ binding ( ' optnames ' , ( ) ) ) <nl> copyoptvals = map ( self . cql _ unprotect _ value , parsed . get _ binding ( ' optvals ' , ( ) ) ) <nl> - cleancopyoptvals = [ optval . decode ( ' string - escape ' ) for optval in copyoptvals ] <nl> + cleancopyoptvals = [ optval . decode ( ' string - escape ' ) for optval in copyoptvals ] <nl> opts = dict ( zip ( copyoptnames , cleancopyoptvals ) ) <nl> <nl> timestart = time . time ( ) <nl> @ @ - 1429 , 7 + 1453 , 6 @ @ class Shell ( cmd . Cmd ) : <nl> try : <nl> if header : <nl> linesource . next ( ) <nl> - table _ meta = self . get _ table _ meta ( ks , cf ) <nl> reader = csv . reader ( linesource , * * dialect _ options ) <nl> <nl> from multiprocessing import Process , Pipe , cpu _ count <nl> @ @ - 1943 , 7 + 1966 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> pdb . set _ trace ( ) <nl> <nl> def get _ help _ topics ( self ) : <nl> - topics = [ t [ 3 : ] for t in dir ( self ) if t . startswith ( ' do _ ' ) and getattr ( self , t , None ) . _ _ doc _ _ ] <nl> + topics = [ t [ 3 : ] for t in dir ( self ) if t . startswith ( ' do _ ' ) and getattr ( self , t , None ) . _ _ doc _ _ ] <nl> for hide _ from _ help in ( ' quit ' , ) : <nl> topics . remove ( hide _ from _ help ) <nl> return topics <nl> @ @ - 1961 , 9 + 1984 , 9 @ @ class Shell ( cmd . Cmd ) : <nl> " " " <nl> topics = parsed . get _ binding ( ' topic ' , ( ) ) <nl> if not topics : <nl> - shell _ topics = [ t . upper ( ) for t in self . get _ help _ topics ( ) ] <nl> + shell _ topics = [ t . upper ( ) for t in self . get _ help _ topics ( ) ] <nl> self . print _ topics ( " \ nDocumented shell commands : " , shell _ topics , 15 , 80 ) <nl> - cql _ topics = [ t . upper ( ) for t in cqldocs . get _ help _ topics ( ) ] <nl> + cql _ topics = [ t . upper ( ) for t in cqldocs . get _ help _ topics ( ) ] <nl> self . print _ topics ( " CQL help topics : " , cql _ topics , 15 , 80 ) <nl> return <nl> for t in topics : <nl> @ @ - 2058 , 6 + 2081 , 7 @ @ def option _ with _ default ( cparser _ getter , section , option , default = None ) : <nl> except ConfigParser . Error : <nl> return default <nl> <nl> + <nl> def raw _ option _ with _ default ( configs , section , option , default = None ) : <nl> " " " <nl> Same ( almost ) as option _ with _ default ( ) but won ' t do any string interpolation . <nl> @ @ - 2068 , 6 + 2092 , 7 @ @ def raw _ option _ with _ default ( configs , section , option , default = None ) : <nl> except ConfigParser . Error : <nl> return default <nl> <nl> + <nl> def should _ use _ color ( ) : <nl> if not sys . stdout . isatty ( ) : <nl> return False <nl> @ @ - 2085 , 6 + 2110 , 7 @ @ def should _ use _ color ( ) : <nl> pass <nl> return True <nl> <nl> + <nl> def read _ options ( cmdlineargs , environment ) : <nl> configs = ConfigParser . SafeConfigParser ( ) <nl> configs . read ( CONFIG _ FILE ) <nl> @ @ - 2160 , 6 + 2186 , 7 @ @ def read _ options ( cmdlineargs , environment ) : <nl> <nl> return options , hostname , port <nl> <nl> + <nl> def setup _ cqlruleset ( cqlmodule ) : <nl> global cqlruleset <nl> cqlruleset = cqlmodule . CqlRuleSet <nl> @ @ - 2168 , 10 + 2195 , 12 @ @ def setup _ cqlruleset ( cqlmodule ) : <nl> cqlruleset . completer _ for ( rulename , termname ) ( func ) <nl> cqlruleset . commands _ end _ with _ newline . update ( my _ commands _ ending _ with _ newline ) <nl> <nl> + <nl> def setup _ cqldocs ( cqlmodule ) : <nl> global cqldocs <nl> cqldocs = cqlmodule . cqldocs <nl> <nl> + <nl> def init _ history ( ) : <nl> if readline is not None : <nl> try : <nl> @ @ - 2183 , 6 + 2212 , 7 @ @ def init _ history ( ) : <nl> delims + = ' . ' <nl> readline . set _ completer _ delims ( delims ) <nl> <nl> + <nl> def save _ history ( ) : <nl> if readline is not None : <nl> try : <nl> @ @ - 2190 , 6 + 2220 , 7 @ @ def save _ history ( ) : <nl> except IOError : <nl> pass <nl> <nl> + <nl> def main ( options , hostname , port ) : <nl> setup _ cqlruleset ( options . cqlmodule ) <nl> setup _ cqldocs ( options . cqlmodule ) <nl> @ @ - 2241 , 6 + 2272 , 7 @ @ def main ( options , hostname , port ) : <nl> if batch _ mode and shell . statement _ error : <nl> sys . exit ( 2 ) <nl> <nl> + <nl> if _ _ name _ _ = = ' _ _ main _ _ ' : <nl> main ( * read _ options ( sys . argv [ 1 : ] , os . environ ) ) <nl>
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index ae1ce7a . . 7943112 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 15 , 7 + 15 , 7 @ @ <nl> * Add support for range tombstones ( CASSANDRA - 3708 ) <nl> * Improve MessagingService efficiency ( CASSANDRA - 3617 ) <nl> * Avoid ID conflicts from concurrent schema changes ( CASSANDRA - 3794 ) <nl> - * Set thrift HSHA server thread limit to unlimet by default ( CASSANDRA - 4277 ) <nl> + * Set thrift HSHA server thread limit to unlimited by default ( CASSANDRA - 4277 ) <nl> * Avoids double serialization of CF id in RowMutation messages <nl> ( CASSANDRA - 4293 ) <nl> * fix Summary component and caches to use correct partitioner ( CASSANDRA - 4289 )

TEST DIFF:
diff - - git a / bin / cqlsh b / bin / cqlsh 
 index e1bd312 . . 05f3368 100755 
 - - - a / bin / cqlsh 
 + + + b / bin / cqlsh 
 @ @ - 36 , 7 + 36 , 7 @ @ description = " CQL Shell for Apache Cassandra " 
 version = " 5 . 0 . 1 " 
 
 from StringIO import StringIO 
 - from contextlib import contextmanager , closing 
 + from contextlib import contextmanager 
 from glob import glob 
 
 import cmd 
 @ @ - 79 , 6 + 79 , 7 @ @ if myplatform = = ' Linux ' : 
 if os . environ . get ( ' CQLSH _ NO _ BUNDLED ' , ' ' ) : 
 ZIPLIB _ DIRS = ( ) 
 
 + 
 def find _ zip ( libprefix ) : 
 for ziplibdir in ZIPLIB _ DIRS : 
 zips = glob ( os . path . join ( ziplibdir , libprefix + ' * . zip ' ) ) 
 @ @ - 111 , 7 + 112 , 6 @ @ from cassandra . cluster import Cluster , PagedResult 
 from cassandra . query import SimpleStatement , ordered _ dict _ factory 
 from cassandra . policies import WhiteListRoundRobinPolicy 
 from cassandra . protocol import QueryMessage , ResultMessage 
 - from cassandra . marshal import int16 _ pack , int32 _ pack , uint64 _ pack 
 from cassandra . metadata import protect _ name , protect _ names , protect _ value 
 from cassandra . auth import PlainTextAuthProvider 
 
 @ @ - 142 , 6 + 142 , 9 @ @ if readline is not None and readline . _ _ doc _ _ is not None and ' libedit ' in readli 
 else : 
 DEFAULT _ COMPLETEKEY = ' tab ' 
 
 + cqldocs = None 
 + cqlruleset = None 
 + 
 epilog = " " " Connects to % ( DEFAULT _ HOST ) s : % ( DEFAULT _ PORT ) d by default . These 
 defaults can be changed by setting $ CQLSH _ HOST and / or $ CQLSH _ PORT . When a 
 host ( and optional port number ) are given on the command line , they take 
 @ @ - 226 , 13 + 229 , 17 @ @ my _ commands _ ending _ with _ newline = ( 
 ' quit ' 
 ) 
 
 + 
 cqlsh _ syntax _ completers = [ ] 
 + 
 + 
 def cqlsh _ syntax _ completer ( rulename , termname ) : 
 def registrator ( f ) : 
 cqlsh _ syntax _ completers . append ( ( rulename , termname , f ) ) 
 return f 
 return registrator 
 
 + 
 cqlsh _ extra _ syntax _ rules = r ' ' ' 
 < cqlshCommand > : : = < CQL _ Statement > 
 | < specialCommand > ( " ; " | " \ n " ) 
 @ @ - 324 , 13 + 331 , 15 @ @ cqlsh _ extra _ syntax _ rules = r ' ' ' 
 < qmark > : : = " ? " ; 
 ' ' ' 
 
 + 
 @ cqlsh _ syntax _ completer ( ' helpCommand ' , ' topic ' ) 
 def complete _ help ( ctxt , cqlsh ) : 
 - return sorted ( [ t . upper ( ) for t in cqldocs . get _ help _ topics ( ) + cqlsh . get _ help _ topics ( ) ] ) 
 + return sorted ( [ t . upper ( ) for t in cqldocs . get _ help _ topics ( ) + cqlsh . get _ help _ topics ( ) ] ) 
 + 
 
 def complete _ source _ quoted _ filename ( ctxt , cqlsh ) : 
 - partial = ctxt . get _ binding ( ' partial ' , ' ' ) 
 - head , tail = os . path . split ( partial ) 
 + partial _ path = ctxt . get _ binding ( ' partial ' , ' ' ) 
 + head , tail = os . path . split ( partial _ path ) 
 exhead = os . path . expanduser ( head ) 
 try : 
 contents = os . listdir ( exhead or ' . ' ) 
 @ @ - 345 , 21 + 354 , 22 @ @ def complete _ source _ quoted _ filename ( ctxt , cqlsh ) : 
 annotated . append ( match ) 
 return annotated 
 
 - cqlsh _ syntax _ completer ( ' sourceCommand ' , ' fname ' ) \ 
 - ( complete _ source _ quoted _ filename ) 
 - cqlsh _ syntax _ completer ( ' captureCommand ' , ' fname ' ) \ 
 - ( complete _ source _ quoted _ filename ) 
 + 
 + cqlsh _ syntax _ completer ( ' sourceCommand ' , ' fname ' ) ( complete _ source _ quoted _ filename ) 
 + cqlsh _ syntax _ completer ( ' captureCommand ' , ' fname ' ) ( complete _ source _ quoted _ filename ) 
 + 
 
 @ cqlsh _ syntax _ completer ( ' copyCommand ' , ' fname ' ) 
 def copy _ fname _ completer ( ctxt , cqlsh ) : 
 lasttype = ctxt . get _ binding ( ' * LASTTYPE * ' ) 
 if lasttype = = ' unclosedString ' : 
 return complete _ source _ quoted _ filename ( ctxt , cqlsh ) 
 - partial = ctxt . get _ binding ( ' partial ' ) 
 - if partial = = ' ' : 
 + partial _ path = ctxt . get _ binding ( ' partial ' ) 
 + if partial _ path = = ' ' : 
 return [ " ' " ] 
 return ( ) 
 
 + 
 @ cqlsh _ syntax _ completer ( ' copyCommand ' , ' colnames ' ) 
 def complete _ copy _ column _ names ( ctxt , cqlsh ) : 
 existcols = map ( cqlsh . cql _ unprotect _ name , ctxt . get _ binding ( ' colnames ' , ( ) ) ) 
 @ @ - 370 , 8 + 380 , 10 @ @ def complete _ copy _ column _ names ( ctxt , cqlsh ) : 
 return [ colnames [ 0 ] ] 
 return set ( colnames [ 1 : ] ) - set ( existcols ) 
 
 + 
 COPY _ OPTIONS = ( ' DELIMITER ' , ' QUOTE ' , ' ESCAPE ' , ' HEADER ' , ' ENCODING ' , ' NULL ' ) 
 
 + 
 @ cqlsh _ syntax _ completer ( ' copyOption ' , ' optnames ' ) 
 def complete _ copy _ options ( ctxt , cqlsh ) : 
 optnames = map ( str . upper , ctxt . get _ binding ( ' optnames ' , ( ) ) ) 
 @ @ - 381 , 6 + 393 , 7 @ @ def complete _ copy _ options ( ctxt , cqlsh ) : 
 opts - = ( ' ENCODING ' , ) 
 return opts 
 
 + 
 @ cqlsh _ syntax _ completer ( ' copyOption ' , ' optvals ' ) 
 def complete _ copy _ opt _ values ( ctxt , cqlsh ) : 
 optnames = ctxt . get _ binding ( ' optnames ' , ( ) ) 
 @ @ - 389 , 21 + 402 , 27 @ @ def complete _ copy _ opt _ values ( ctxt , cqlsh ) : 
 return [ ' true ' , ' false ' ] 
 return [ cqlhandling . Hint ( ' < single _ character _ string > ' ) ] 
 
 + 
 class NoKeyspaceError ( Exception ) : 
 pass 
 
 + 
 class KeyspaceNotFound ( Exception ) : 
 pass 
 
 + 
 class ColumnFamilyNotFound ( Exception ) : 
 pass 
 
 + 
 class VersionNotSupported ( Exception ) : 
 pass 
 
 + 
 class UserTypeNotFound ( Exception ) : 
 pass 
 
 + 
 class DecodeError ( Exception ) : 
 verb = ' decode ' 
 
 @ @ - 425 , 9 + 444 , 11 @ @ class DecodeError ( Exception ) : 
 def _ _ repr _ _ ( self ) : 
 return ' < % s % s > ' % ( self . _ _ class _ _ . _ _ name _ _ , self . message ( ) ) 
 
 + 
 class FormatError ( DecodeError ) : 
 verb = ' format ' 
 
 + 
 def full _ cql _ version ( ver ) : 
 while ver . count ( ' . ' ) < 2 : 
 ver + = ' . 0 ' 
 @ @ - 435 , 6 + 456 , 7 @ @ def full _ cql _ version ( ver ) : 
 vertuple = tuple ( map ( int , ver _ parts [ 0 ] . split ( ' . ' ) ) + [ ver _ parts [ 1 ] ] ) 
 return ver , vertuple 
 
 + 
 def format _ value ( val , output _ encoding , addcolor = False , time _ format = None , 
 float _ precision = None , colormap = None , nullval = None ) : 
 if isinstance ( val , DecodeError ) : 
 @ @ - 446 , 6 + 468 , 7 @ @ def format _ value ( val , output _ encoding , addcolor = False , time _ format = None , 
 addcolor = addcolor , nullval = nullval , time _ format = time _ format , 
 float _ precision = float _ precision ) 
 
 + 
 def show _ warning _ without _ quoting _ line ( message , category , filename , lineno , file = None , line = None ) : 
 if file is None : 
 file = sys . stderr 
 @ @ - 456 , 6 + 479 , 7 @ @ def show _ warning _ without _ quoting _ line ( message , category , filename , lineno , file = 
 warnings . showwarning = show _ warning _ without _ quoting _ line 
 warnings . filterwarnings ( ' always ' , category = cql3handling . UnexpectedTableStructure ) 
 
 + 
 def describe _ interval ( seconds ) : 
 desc = [ ] 
 for length , unit in ( ( 86400 , ' day ' ) , ( 3600 , ' hour ' ) , ( 60 , ' minute ' ) ) : 
 @ @ - 476 , 6 + 500 , 7 @ @ def describe _ interval ( seconds ) : 
 def auto _ format _ udts ( ) : 
 # when we see a new user defined type , set up the shell formatting for it 
 udt _ apply _ params = cassandra . cqltypes . UserType . apply _ parameters 
 + 
 def new _ apply _ params ( cls , * args , * * kwargs ) : 
 udt _ class = udt _ apply _ params ( * args , * * kwargs ) 
 formatter _ for ( udt _ class . typename ) ( format _ value _ utype ) 
 @ @ - 484 , 6 + 509 , 7 @ @ def auto _ format _ udts ( ) : 
 cassandra . cqltypes . UserType . udt _ apply _ parameters = classmethod ( new _ apply _ params ) 
 
 make _ udt _ class = cassandra . cqltypes . UserType . make _ udt _ class 
 + 
 def new _ make _ udt _ class ( cls , * args , * * kwargs ) : 
 udt _ class = make _ udt _ class ( * args , * * kwargs ) 
 formatter _ for ( udt _ class . tuple _ type . _ _ name _ _ ) ( format _ value _ utype ) 
 @ @ - 652 , 9 + 678 , 9 @ @ class Shell ( cmd . Cmd ) : 
 # check column role and color appropriately 
 if table _ meta : 
 if name in [ col . name for col in table _ meta . partition _ key ] : 
 - column _ colors . default _ factory = lambda : RED 
 + column _ colors . default _ factory = lambda : RED 
 elif name in [ col . name for col in table _ meta . clustering _ key ] : 
 - column _ colors . default _ factory = lambda : CYAN 
 + column _ colors . default _ factory = lambda : CYAN 
 return self . myformat _ value ( name , colormap = column _ colors ) 
 
 def report _ connection ( self ) : 
 @ @ - 778 , 7 + 804 , 7 @ @ class Shell ( cmd . Cmd ) : 
 def reset _ statement ( self ) : 
 self . reset _ prompt ( ) 
 self . statement . truncate ( 0 ) 
 - self . empty _ lines = 0 ; 
 + self . empty _ lines = 0 
 
 def reset _ prompt ( self ) : 
 if self . current _ keyspace is None : 
 @ @ - 787 , 7 + 813 , 7 @ @ class Shell ( cmd . Cmd ) : 
 self . set _ prompt ( self . keyspace _ prompt % self . current _ keyspace , True ) 
 
 def set _ continue _ prompt ( self ) : 
 - if self . empty _ lines > = 3 : 
 + if self . empty _ lines > = 3 : 
 self . set _ prompt ( " Statements are terminated with a ' ; ' . You can press CTRL - C to cancel an incomplete statement . " ) 
 self . empty _ lines = 0 
 return 
 @ @ - 846 , 7 + 872 , 6 @ @ class Shell ( cmd . Cmd ) : 
 return 
 yield newline 
 
 - 
 def cmdloop ( self ) : 
 " " " 
 Adapted from cmd . Cmd ' s version , because there is literally no way with 
 @ @ - 988 , 7 + 1013 , 7 @ @ class Shell ( cmd . Cmd ) : 
 parsed = cqlruleset . cql _ parse ( query _ string ) [ 1 ] 
 except IndexError : 
 return None 
 - ks = self . cql _ unprotect _ name ( parsed . get _ binding ( ' ksname ' , None ) ) 
 + ks = self . cql _ unprotect _ name ( parsed . get _ binding ( ' ksname ' , None ) ) 
 cf = self . cql _ unprotect _ name ( parsed . get _ binding ( ' cfname ' ) ) 
 return self . get _ table _ meta ( ks , cf ) 
 
 @ @ - 1011 , 9 + 1036 , 9 @ @ class Shell ( cmd . Cmd ) : 
 if statement . query _ string [ : 6 ] . lower ( ) = = ' select ' : 
 self . print _ result ( rows , self . parse _ for _ table _ meta ( statement . query _ string ) ) 
 elif statement . query _ string . lower ( ) . startswith ( " list users " ) : 
 - self . print _ result ( rows , self . get _ table _ meta ( ' system _ auth ' , ' users ' ) ) 
 + self . print _ result ( rows , self . get _ table _ meta ( ' system _ auth ' , ' users ' ) ) 
 elif statement . query _ string . lower ( ) . startswith ( " list " ) : 
 - self . print _ result ( rows , self . get _ table _ meta ( ' system _ auth ' , ' permissions ' ) ) 
 + self . print _ result ( rows , self . get _ table _ meta ( ' system _ auth ' , ' permissions ' ) ) 
 elif rows : 
 # CAS INSERT / UPDATE 
 self . writeresult ( " " ) 
 @ @ - 1091 , 7 + 1116 , 7 @ @ class Shell ( cmd . Cmd ) : 
 # stop if there are no rows 
 if formatted _ values is None : 
 self . writeresult ( " " ) 
 - return ; 
 + return 
 
 # print row data 
 for row in formatted _ values : 
 @ @ - 1143 , 7 + 1168 , 6 @ @ class Shell ( cmd . Cmd ) : 
 prevlines = self . statement . getvalue ( ) 
 wholestmt = prevlines + curline 
 begidx = readline . get _ begidx ( ) + len ( prevlines ) 
 - endidx = readline . get _ endidx ( ) + len ( prevlines ) 
 stuff _ to _ complete = wholestmt [ : begidx ] 
 return cqlruleset . cql _ complete ( stuff _ to _ complete , text , cassandra _ conn = self , 
 debug = debug _ completion , startsymbol = ' cqlshCommand ' ) 
 @ @ - 1377 , 7 + 1401 , 7 @ @ class Shell ( cmd . Cmd ) : 
 fname = os . path . expanduser ( self . cql _ unprotect _ value ( fname ) ) 
 copyoptnames = map ( str . lower , parsed . get _ binding ( ' optnames ' , ( ) ) ) 
 copyoptvals = map ( self . cql _ unprotect _ value , parsed . get _ binding ( ' optvals ' , ( ) ) ) 
 - cleancopyoptvals = [ optval . decode ( ' string - escape ' ) for optval in copyoptvals ] 
 + cleancopyoptvals = [ optval . decode ( ' string - escape ' ) for optval in copyoptvals ] 
 opts = dict ( zip ( copyoptnames , cleancopyoptvals ) ) 
 
 timestart = time . time ( ) 
 @ @ - 1429 , 7 + 1453 , 6 @ @ class Shell ( cmd . Cmd ) : 
 try : 
 if header : 
 linesource . next ( ) 
 - table _ meta = self . get _ table _ meta ( ks , cf ) 
 reader = csv . reader ( linesource , * * dialect _ options ) 
 
 from multiprocessing import Process , Pipe , cpu _ count 
 @ @ - 1943 , 7 + 1966 , 7 @ @ class Shell ( cmd . Cmd ) : 
 pdb . set _ trace ( ) 
 
 def get _ help _ topics ( self ) : 
 - topics = [ t [ 3 : ] for t in dir ( self ) if t . startswith ( ' do _ ' ) and getattr ( self , t , None ) . _ _ doc _ _ ] 
 + topics = [ t [ 3 : ] for t in dir ( self ) if t . startswith ( ' do _ ' ) and getattr ( self , t , None ) . _ _ doc _ _ ] 
 for hide _ from _ help in ( ' quit ' , ) : 
 topics . remove ( hide _ from _ help ) 
 return topics 
 @ @ - 1961 , 9 + 1984 , 9 @ @ class Shell ( cmd . Cmd ) : 
 " " " 
 topics = parsed . get _ binding ( ' topic ' , ( ) ) 
 if not topics : 
 - shell _ topics = [ t . upper ( ) for t in self . get _ help _ topics ( ) ] 
 + shell _ topics = [ t . upper ( ) for t in self . get _ help _ topics ( ) ] 
 self . print _ topics ( " \ nDocumented shell commands : " , shell _ topics , 15 , 80 ) 
 - cql _ topics = [ t . upper ( ) for t in cqldocs . get _ help _ topics ( ) ] 
 + cql _ topics = [ t . upper ( ) for t in cqldocs . get _ help _ topics ( ) ] 
 self . print _ topics ( " CQL help topics : " , cql _ topics , 15 , 80 ) 
 return 
 for t in topics : 
 @ @ - 2058 , 6 + 2081 , 7 @ @ def option _ with _ default ( cparser _ getter , section , option , default = None ) : 
 except ConfigParser . Error : 
 return default 
 
 + 
 def raw _ option _ with _ default ( configs , section , option , default = None ) : 
 " " " 
 Same ( almost ) as option _ with _ default ( ) but won ' t do any string interpolation . 
 @ @ - 2068 , 6 + 2092 , 7 @ @ def raw _ option _ with _ default ( configs , section , option , default = None ) : 
 except ConfigParser . Error : 
 return default 
 
 + 
 def should _ use _ color ( ) : 
 if not sys . stdout . isatty ( ) : 
 return False 
 @ @ - 2085 , 6 + 2110 , 7 @ @ def should _ use _ color ( ) : 
 pass 
 return True 
 
 + 
 def read _ options ( cmdlineargs , environment ) : 
 configs = ConfigParser . SafeConfigParser ( ) 
 configs . read ( CONFIG _ FILE ) 
 @ @ - 2160 , 6 + 2186 , 7 @ @ def read _ options ( cmdlineargs , environment ) : 
 
 return options , hostname , port 
 
 + 
 def setup _ cqlruleset ( cqlmodule ) : 
 global cqlruleset 
 cqlruleset = cqlmodule . CqlRuleSet 
 @ @ - 2168 , 10 + 2195 , 12 @ @ def setup _ cqlruleset ( cqlmodule ) : 
 cqlruleset . completer _ for ( rulename , termname ) ( func ) 
 cqlruleset . commands _ end _ with _ newline . update ( my _ commands _ ending _ with _ newline ) 
 
 + 
 def setup _ cqldocs ( cqlmodule ) : 
 global cqldocs 
 cqldocs = cqlmodule . cqldocs 
 
 + 
 def init _ history ( ) : 
 if readline is not None : 
 try : 
 @ @ - 2183 , 6 + 2212 , 7 @ @ def init _ history ( ) : 
 delims + = ' . ' 
 readline . set _ completer _ delims ( delims ) 
 
 + 
 def save _ history ( ) : 
 if readline is not None : 
 try : 
 @ @ - 2190 , 6 + 2220 , 7 @ @ def save _ history ( ) : 
 except IOError : 
 pass 
 
 + 
 def main ( options , hostname , port ) : 
 setup _ cqlruleset ( options . cqlmodule ) 
 setup _ cqldocs ( options . cqlmodule ) 
 @ @ - 2241 , 6 + 2272 , 7 @ @ def main ( options , hostname , port ) : 
 if batch _ mode and shell . statement _ error : 
 sys . exit ( 2 ) 
 
 + 
 if _ _ name _ _ = = ' _ _ main _ _ ' : 
 main ( * read _ options ( sys . argv [ 1 : ] , os . environ ) ) 


NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index ae1ce7a . . 7943112 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 15 , 7 + 15 , 7 @ @ 
 * Add support for range tombstones ( CASSANDRA - 3708 ) 
 * Improve MessagingService efficiency ( CASSANDRA - 3617 ) 
 * Avoid ID conflicts from concurrent schema changes ( CASSANDRA - 3794 ) 
 - * Set thrift HSHA server thread limit to unlimet by default ( CASSANDRA - 4277 ) 
 + * Set thrift HSHA server thread limit to unlimited by default ( CASSANDRA - 4277 ) 
 * Avoids double serialization of CF id in RowMutation messages 
 ( CASSANDRA - 4293 ) 
 * fix Summary component and caches to use correct partitioner ( CASSANDRA - 4289 )
