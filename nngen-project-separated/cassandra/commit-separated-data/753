BLEU SCORE: 0.037477767366779206

TEST MSG: trivial boxing issue : parseXXX for primitives , valueOf for Objects
GENERATED MSG: replace valueOf with parse

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 18a6d44 . . 374c64d 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 2221 , 6 + 2221 , 6 @ @ public class DatabaseDescriptor <nl> <nl> public static int searchConcurrencyFactor ( ) <nl> { <nl> - return Integer . valueOf ( System . getProperty ( " cassandra . search _ concurrency _ factor " , " 1 " ) ) ; <nl> + return Integer . parseInt ( System . getProperty ( " cassandra . search _ concurrency _ factor " , " 1 " ) ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / ReadCommand . java b / src / java / org / apache / cassandra / db / ReadCommand . java <nl> index 68c9e3b . . 372cf1c 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ReadCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / ReadCommand . java <nl> @ @ - 59 , 7 + 59 , 7 @ @ import org . apache . cassandra . utils . Pair ; <nl> * / <nl> public abstract class ReadCommand extends MonitorableImpl implements ReadQuery <nl> { <nl> - private static final int TEST _ ITERATION _ DELAY _ MILLIS = Integer . valueOf ( System . getProperty ( " cassandra . test . read _ iteration _ delay _ ms " , " 0 " ) ) ; <nl> + private static final int TEST _ ITERATION _ DELAY _ MILLIS = Integer . parseInt ( System . getProperty ( " cassandra . test . read _ iteration _ delay _ ms " , " 0 " ) ) ; <nl> protected static final Logger logger = LoggerFactory . getLogger ( ReadCommand . class ) ; <nl> public static final IVersionedSerializer < ReadCommand > serializer = new Serializer ( ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LogRecord . java b / src / java / org / apache / cassandra / db / lifecycle / LogRecord . java <nl> index 02f8841 . . 447ea73 100644 <nl> - - - a / src / java / org / apache / cassandra / db / lifecycle / LogRecord . java <nl> + + + b / src / java / org / apache / cassandra / db / lifecycle / LogRecord . java <nl> @ @ - 123 , 9 + 123 , 9 @ @ final class LogRecord <nl> Type type = Type . fromPrefix ( matcher . group ( 1 ) ) ; <nl> return new LogRecord ( type , <nl> matcher . group ( 2 ) , <nl> - Long . valueOf ( matcher . group ( 3 ) ) , <nl> - Integer . valueOf ( matcher . group ( 4 ) ) , <nl> - Long . valueOf ( matcher . group ( 5 ) ) , <nl> + Long . parseLong ( matcher . group ( 3 ) ) , <nl> + Integer . parseInt ( matcher . group ( 4 ) ) , <nl> + Long . parseLong ( matcher . group ( 5 ) ) , <nl> line ) ; <nl> } <nl> catch ( IllegalArgumentException e ) <nl> diff - - git a / src / java / org / apache / cassandra / db / monitoring / ApproximateTime . java b / src / java / org / apache / cassandra / db / monitoring / ApproximateTime . java <nl> index 1d57398 . . cc4b410 100644 <nl> - - - a / src / java / org / apache / cassandra / db / monitoring / ApproximateTime . java <nl> + + + b / src / java / org / apache / cassandra / db / monitoring / ApproximateTime . java <nl> @ @ - 36 , 7 + 36 , 7 @ @ import org . apache . cassandra . config . Config ; <nl> public class ApproximateTime <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( ApproximateTime . class ) ; <nl> - private static final int CHECK _ INTERVAL _ MS = Math . max ( 5 , Integer . valueOf ( System . getProperty ( Config . PROPERTY _ PREFIX + " approximate _ time _ precision _ ms " , " 10 " ) ) ) ; <nl> + private static final int CHECK _ INTERVAL _ MS = Math . max ( 5 , Integer . parseInt ( System . getProperty ( Config . PROPERTY _ PREFIX + " approximate _ time _ precision _ ms " , " 10 " ) ) ) ; <nl> <nl> private static volatile long time = System . currentTimeMillis ( ) ; <nl> static <nl> diff - - git a / src / java / org / apache / cassandra / db / monitoring / MonitoringTask . java b / src / java / org / apache / cassandra / db / monitoring / MonitoringTask . java <nl> index 6d28078 . . a44773a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / monitoring / MonitoringTask . java <nl> + + + b / src / java / org / apache / cassandra / db / monitoring / MonitoringTask . java <nl> @ @ - 51 , 13 + 51 , 13 @ @ public class MonitoringTask <nl> / * * <nl> * Defines the interval for reporting any operations that have timed out . <nl> * / <nl> - private static final int REPORT _ INTERVAL _ MS = Math . max ( 0 , Integer . valueOf ( System . getProperty ( Config . PROPERTY _ PREFIX + " monitoring _ report _ interval _ ms " , " 5000 " ) ) ) ; <nl> + private static final int REPORT _ INTERVAL _ MS = Math . max ( 0 , Integer . parseInt ( System . getProperty ( Config . PROPERTY _ PREFIX + " monitoring _ report _ interval _ ms " , " 5000 " ) ) ) ; <nl> <nl> / * * <nl> * Defines the maximum number of unique timed out queries that will be reported in the logs . <nl> * Use a negative number to remove any limit . <nl> * / <nl> - private static final int MAX _ OPERATIONS = Integer . valueOf ( System . getProperty ( Config . PROPERTY _ PREFIX + " monitoring _ max _ operations " , " 50 " ) ) ; <nl> + private static final int MAX _ OPERATIONS = Integer . parseInt ( System . getProperty ( Config . PROPERTY _ PREFIX + " monitoring _ max _ operations " , " 50 " ) ) ; <nl> <nl> @ VisibleForTesting <nl> static MonitoringTask instance = make ( REPORT _ INTERVAL _ MS , MAX _ OPERATIONS ) ; <nl> diff - - git a / src / java / org / apache / cassandra / index / sasi / utils / TypeUtil . java b / src / java / org / apache / cassandra / index / sasi / utils / TypeUtil . java <nl> index 8b38530 . . 9815233 100644 <nl> - - - a / src / java / org / apache / cassandra / index / sasi / utils / TypeUtil . java <nl> + + + b / src / java / org / apache / cassandra / index / sasi / utils / TypeUtil . java <nl> @ @ - 63 , 7 + 63 , 7 @ @ public class TypeUtil <nl> break ; <nl> <nl> default : <nl> - upcastToken = Long . valueOf ( UTF8Type . instance . getString ( term ) ) ; <nl> + upcastToken = Long . parseLong ( UTF8Type . instance . getString ( term ) ) ; <nl> } <nl> <nl> return LongType . instance . decompose ( upcastToken ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 7500593 . . 2883e24 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 1895 , 7 + 1895 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> { <nl> try <nl> { <nl> - MessagingService . instance ( ) . setVersion ( endpoint , Integer . valueOf ( value . value ) ) ; <nl> + MessagingService . instance ( ) . setVersion ( endpoint , Integer . parseInt ( value . value ) ) ; <nl> } <nl> catch ( NumberFormatException e ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / utils / progress / jmx / LegacyJMXProgressSupport . java b / src / java / org / apache / cassandra / utils / progress / jmx / LegacyJMXProgressSupport . java <nl> index 275673e . . a33fe7d 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / progress / jmx / LegacyJMXProgressSupport . java <nl> + + + b / src / java / org / apache / cassandra / utils / progress / jmx / LegacyJMXProgressSupport . java <nl> @ @ - 102 , 6 + 102 , 6 @ @ public class LegacyJMXProgressSupport implements ProgressListener <nl> <nl> protected static int getCmd ( String tag ) <nl> { <nl> - return Integer . valueOf ( tag . split ( " : " ) [ 1 ] ) ; <nl> + return Integer . parseInt ( tag . split ( " : " ) [ 1 ] ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java <nl> index 5501c3d . . bf59f39 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliClient . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliClient . java <nl> @ @ - 528 , 7 + 528 , 7 @ @ public class CliClient extends CliUserHelp <nl> if ( statement . getChildCount ( ) = = 3 ) <nl> { <nl> Tree limitNode = statement . getChild ( 2 ) ; <nl> - int limitValue = Integer . valueOf ( limitNode . getChild ( 0 ) . getText ( ) ) ; <nl> + int limitValue = Integer . parseInt ( limitNode . getChild ( 0 ) . getText ( ) ) ; <nl> <nl> if ( limitValue = = 0 ) <nl> { <nl> @ @ - 624 , 7 + 624 , 7 @ @ public class CliClient extends CliUserHelp <nl> <nl> try <nl> { <nl> - columnToInsert . setTtl ( Integer . valueOf ( ttl ) ) ; <nl> + columnToInsert . setTtl ( Integer . parseInt ( ttl ) ) ; <nl> } <nl> catch ( NumberFormatException e ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / LongType . java b / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> index 43f9f91 . . 1f2805f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> @ @ - 72 , 7 + 72 , 7 @ @ public class LongType extends AbstractType <nl> <nl> try <nl> { <nl> - longType = Long . valueOf ( source ) ; <nl> + longType = Long . parseLong ( source ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / ConfigHelper . java b / src / java / org / apache / cassandra / hadoop / ConfigHelper . java <nl> index f151f27 . . 25f6feb 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / ConfigHelper . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / ConfigHelper . java <nl> @ @ - 232 , 7 + 232 , 7 @ @ public class ConfigHelper <nl> <nl> public static int getRpcPort ( Configuration conf ) <nl> { <nl> - return Integer . valueOf ( conf . get ( THRIFT _ PORT ) ) ; <nl> + return Integer . parseInt ( conf . get ( THRIFT _ PORT ) ) ; <nl> } <nl> <nl> public static void setRpcPort ( Configuration conf , String port ) <nl> diff - - git a / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java b / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java <nl> index f345cd4 . . 372c298 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java <nl> + + + b / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java <nl> @ @ - 65 , 7 + 65 , 7 @ @ public class NetworkTopologyStrategy extends AbstractReplicationStrategy <nl> if ( configOptions ! = null ) <nl> { <nl> for ( Entry entry : configOptions . entrySet ( ) ) <nl> - newDatacenters . put ( ( String ) entry . getKey ( ) , Integer . parseInt ( ( String ) entry . getValue ( ) ) ) ; <nl> + newDatacenters . put ( ( String ) entry . getKey ( ) , Integer . valueOf ( ( String ) entry . getValue ( ) ) ) ; <nl> } <nl> <nl> datacenters = Collections . unmodifiableMap ( newDatacenters ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageLoadBalancer . java b / src / java / org / apache / cassandra / service / StorageLoadBalancer . java <nl> index 47a5e73 . . b4ac62d 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageLoadBalancer . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageLoadBalancer . java <nl> @ @ - 184 , 7 + 184 , 7 @ @ public class StorageLoadBalancer implements IEndpointStateChangeSubscriber <nl> { <nl> if ( state ! = ApplicationState . LOAD ) <nl> return ; <nl> - loadInfo _ . put ( endpoint , Double . parseDouble ( value . value ) ) ; <nl> + loadInfo _ . put ( endpoint , Double . valueOf ( value . value ) ) ; <nl> <nl> / * <nl> / / clone load information to perform calculations <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 9ff5eab . . 7058bfd 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 369 , 7 + 369 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> logger _ . warn ( " Unable to start GCInspector ( currently only supported on the Sun JVM ) " ) ; <nl> } <nl> <nl> - if ( Boolean . valueOf ( System . getProperty ( " cassandra . load _ ring _ state " , " true " ) ) ) <nl> + if ( Boolean . parseBoolean ( System . getProperty ( " cassandra . load _ ring _ state " , " true " ) ) ) <nl> { <nl> logger _ . info ( " Loading persisted ring state " ) ; <nl> for ( Map . Entry < Token , InetAddress > entry : SystemTable . loadTokens ( ) . entrySet ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> index edd432b . . 3191971 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> @ @ - 561 , 7 + 561 , 7 @ @ public class NodeCmd { <nl> <nl> case SETCACHECAPACITY : <nl> if ( arguments . length ! = 5 ) { badUse ( " setcachecapacity requires ks , cf , keycachecap , and rowcachecap args . " ) ; } <nl> - probe . setCacheCapacities ( arguments [ 1 ] , arguments [ 2 ] , Integer . valueOf ( arguments [ 3 ] ) , Integer . valueOf ( arguments [ 4 ] ) ) ; <nl> + probe . setCacheCapacities ( arguments [ 1 ] , arguments [ 2 ] , Integer . parseInt ( arguments [ 3 ] ) , Integer . parseInt ( arguments [ 4 ] ) ) ; <nl> break ; <nl> <nl> case SETCOMPACTIONTHRESHOLD : <nl> diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> index 0b31067 . . be2bc73 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> @ @ - 76 , 11 + 76 , 11 @ @ public class FBUtilities <nl> { <nl> if ( value . endsWith ( " % " ) ) <nl> { <nl> - return Double . valueOf ( value . substring ( 0 , value . length ( ) - 1 ) ) / 100 ; <nl> + return Double . parseDouble ( value . substring ( 0 , value . length ( ) - 1 ) ) / 100 ; <nl> } <nl> else <nl> { <nl> - return Double . valueOf ( value ) ; <nl> + return Double . parseDouble ( value ) ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 18a6d44 . . 374c64d 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 2221 , 6 + 2221 , 6 @ @ public class DatabaseDescriptor 
 
 public static int searchConcurrencyFactor ( ) 
 { 
 - return Integer . valueOf ( System . getProperty ( " cassandra . search _ concurrency _ factor " , " 1 " ) ) ; 
 + return Integer . parseInt ( System . getProperty ( " cassandra . search _ concurrency _ factor " , " 1 " ) ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / ReadCommand . java b / src / java / org / apache / cassandra / db / ReadCommand . java 
 index 68c9e3b . . 372cf1c 100644 
 - - - a / src / java / org / apache / cassandra / db / ReadCommand . java 
 + + + b / src / java / org / apache / cassandra / db / ReadCommand . java 
 @ @ - 59 , 7 + 59 , 7 @ @ import org . apache . cassandra . utils . Pair ; 
 * / 
 public abstract class ReadCommand extends MonitorableImpl implements ReadQuery 
 { 
 - private static final int TEST _ ITERATION _ DELAY _ MILLIS = Integer . valueOf ( System . getProperty ( " cassandra . test . read _ iteration _ delay _ ms " , " 0 " ) ) ; 
 + private static final int TEST _ ITERATION _ DELAY _ MILLIS = Integer . parseInt ( System . getProperty ( " cassandra . test . read _ iteration _ delay _ ms " , " 0 " ) ) ; 
 protected static final Logger logger = LoggerFactory . getLogger ( ReadCommand . class ) ; 
 public static final IVersionedSerializer < ReadCommand > serializer = new Serializer ( ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LogRecord . java b / src / java / org / apache / cassandra / db / lifecycle / LogRecord . java 
 index 02f8841 . . 447ea73 100644 
 - - - a / src / java / org / apache / cassandra / db / lifecycle / LogRecord . java 
 + + + b / src / java / org / apache / cassandra / db / lifecycle / LogRecord . java 
 @ @ - 123 , 9 + 123 , 9 @ @ final class LogRecord 
 Type type = Type . fromPrefix ( matcher . group ( 1 ) ) ; 
 return new LogRecord ( type , 
 matcher . group ( 2 ) , 
 - Long . valueOf ( matcher . group ( 3 ) ) , 
 - Integer . valueOf ( matcher . group ( 4 ) ) , 
 - Long . valueOf ( matcher . group ( 5 ) ) , 
 + Long . parseLong ( matcher . group ( 3 ) ) , 
 + Integer . parseInt ( matcher . group ( 4 ) ) , 
 + Long . parseLong ( matcher . group ( 5 ) ) , 
 line ) ; 
 } 
 catch ( IllegalArgumentException e ) 
 diff - - git a / src / java / org / apache / cassandra / db / monitoring / ApproximateTime . java b / src / java / org / apache / cassandra / db / monitoring / ApproximateTime . java 
 index 1d57398 . . cc4b410 100644 
 - - - a / src / java / org / apache / cassandra / db / monitoring / ApproximateTime . java 
 + + + b / src / java / org / apache / cassandra / db / monitoring / ApproximateTime . java 
 @ @ - 36 , 7 + 36 , 7 @ @ import org . apache . cassandra . config . Config ; 
 public class ApproximateTime 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( ApproximateTime . class ) ; 
 - private static final int CHECK _ INTERVAL _ MS = Math . max ( 5 , Integer . valueOf ( System . getProperty ( Config . PROPERTY _ PREFIX + " approximate _ time _ precision _ ms " , " 10 " ) ) ) ; 
 + private static final int CHECK _ INTERVAL _ MS = Math . max ( 5 , Integer . parseInt ( System . getProperty ( Config . PROPERTY _ PREFIX + " approximate _ time _ precision _ ms " , " 10 " ) ) ) ; 
 
 private static volatile long time = System . currentTimeMillis ( ) ; 
 static 
 diff - - git a / src / java / org / apache / cassandra / db / monitoring / MonitoringTask . java b / src / java / org / apache / cassandra / db / monitoring / MonitoringTask . java 
 index 6d28078 . . a44773a 100644 
 - - - a / src / java / org / apache / cassandra / db / monitoring / MonitoringTask . java 
 + + + b / src / java / org / apache / cassandra / db / monitoring / MonitoringTask . java 
 @ @ - 51 , 13 + 51 , 13 @ @ public class MonitoringTask 
 / * * 
 * Defines the interval for reporting any operations that have timed out . 
 * / 
 - private static final int REPORT _ INTERVAL _ MS = Math . max ( 0 , Integer . valueOf ( System . getProperty ( Config . PROPERTY _ PREFIX + " monitoring _ report _ interval _ ms " , " 5000 " ) ) ) ; 
 + private static final int REPORT _ INTERVAL _ MS = Math . max ( 0 , Integer . parseInt ( System . getProperty ( Config . PROPERTY _ PREFIX + " monitoring _ report _ interval _ ms " , " 5000 " ) ) ) ; 
 
 / * * 
 * Defines the maximum number of unique timed out queries that will be reported in the logs . 
 * Use a negative number to remove any limit . 
 * / 
 - private static final int MAX _ OPERATIONS = Integer . valueOf ( System . getProperty ( Config . PROPERTY _ PREFIX + " monitoring _ max _ operations " , " 50 " ) ) ; 
 + private static final int MAX _ OPERATIONS = Integer . parseInt ( System . getProperty ( Config . PROPERTY _ PREFIX + " monitoring _ max _ operations " , " 50 " ) ) ; 
 
 @ VisibleForTesting 
 static MonitoringTask instance = make ( REPORT _ INTERVAL _ MS , MAX _ OPERATIONS ) ; 
 diff - - git a / src / java / org / apache / cassandra / index / sasi / utils / TypeUtil . java b / src / java / org / apache / cassandra / index / sasi / utils / TypeUtil . java 
 index 8b38530 . . 9815233 100644 
 - - - a / src / java / org / apache / cassandra / index / sasi / utils / TypeUtil . java 
 + + + b / src / java / org / apache / cassandra / index / sasi / utils / TypeUtil . java 
 @ @ - 63 , 7 + 63 , 7 @ @ public class TypeUtil 
 break ; 
 
 default : 
 - upcastToken = Long . valueOf ( UTF8Type . instance . getString ( term ) ) ; 
 + upcastToken = Long . parseLong ( UTF8Type . instance . getString ( term ) ) ; 
 } 
 
 return LongType . instance . decompose ( upcastToken ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 7500593 . . 2883e24 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 1895 , 7 + 1895 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 { 
 try 
 { 
 - MessagingService . instance ( ) . setVersion ( endpoint , Integer . valueOf ( value . value ) ) ; 
 + MessagingService . instance ( ) . setVersion ( endpoint , Integer . parseInt ( value . value ) ) ; 
 } 
 catch ( NumberFormatException e ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / utils / progress / jmx / LegacyJMXProgressSupport . java b / src / java / org / apache / cassandra / utils / progress / jmx / LegacyJMXProgressSupport . java 
 index 275673e . . a33fe7d 100644 
 - - - a / src / java / org / apache / cassandra / utils / progress / jmx / LegacyJMXProgressSupport . java 
 + + + b / src / java / org / apache / cassandra / utils / progress / jmx / LegacyJMXProgressSupport . java 
 @ @ - 102 , 6 + 102 , 6 @ @ public class LegacyJMXProgressSupport implements ProgressListener 
 
 protected static int getCmd ( String tag ) 
 { 
 - return Integer . valueOf ( tag . split ( " : " ) [ 1 ] ) ; 
 + return Integer . parseInt ( tag . split ( " : " ) [ 1 ] ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java 
 index 5501c3d . . bf59f39 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliClient . java 
 + + + b / src / java / org / apache / cassandra / cli / CliClient . java 
 @ @ - 528 , 7 + 528 , 7 @ @ public class CliClient extends CliUserHelp 
 if ( statement . getChildCount ( ) = = 3 ) 
 { 
 Tree limitNode = statement . getChild ( 2 ) ; 
 - int limitValue = Integer . valueOf ( limitNode . getChild ( 0 ) . getText ( ) ) ; 
 + int limitValue = Integer . parseInt ( limitNode . getChild ( 0 ) . getText ( ) ) ; 
 
 if ( limitValue = = 0 ) 
 { 
 @ @ - 624 , 7 + 624 , 7 @ @ public class CliClient extends CliUserHelp 
 
 try 
 { 
 - columnToInsert . setTtl ( Integer . valueOf ( ttl ) ) ; 
 + columnToInsert . setTtl ( Integer . parseInt ( ttl ) ) ; 
 } 
 catch ( NumberFormatException e ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / LongType . java b / src / java / org / apache / cassandra / db / marshal / LongType . java 
 index 43f9f91 . . 1f2805f 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / LongType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / LongType . java 
 @ @ - 72 , 7 + 72 , 7 @ @ public class LongType extends AbstractType 
 
 try 
 { 
 - longType = Long . valueOf ( source ) ; 
 + longType = Long . parseLong ( source ) ; 
 } 
 catch ( Exception e ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / hadoop / ConfigHelper . java b / src / java / org / apache / cassandra / hadoop / ConfigHelper . java 
 index f151f27 . . 25f6feb 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / ConfigHelper . java 
 + + + b / src / java / org / apache / cassandra / hadoop / ConfigHelper . java 
 @ @ - 232 , 7 + 232 , 7 @ @ public class ConfigHelper 
 
 public static int getRpcPort ( Configuration conf ) 
 { 
 - return Integer . valueOf ( conf . get ( THRIFT _ PORT ) ) ; 
 + return Integer . parseInt ( conf . get ( THRIFT _ PORT ) ) ; 
 } 
 
 public static void setRpcPort ( Configuration conf , String port ) 
 diff - - git a / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java b / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java 
 index f345cd4 . . 372c298 100644 
 - - - a / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java 
 + + + b / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java 
 @ @ - 65 , 7 + 65 , 7 @ @ public class NetworkTopologyStrategy extends AbstractReplicationStrategy 
 if ( configOptions ! = null ) 
 { 
 for ( Entry entry : configOptions . entrySet ( ) ) 
 - newDatacenters . put ( ( String ) entry . getKey ( ) , Integer . parseInt ( ( String ) entry . getValue ( ) ) ) ; 
 + newDatacenters . put ( ( String ) entry . getKey ( ) , Integer . valueOf ( ( String ) entry . getValue ( ) ) ) ; 
 } 
 
 datacenters = Collections . unmodifiableMap ( newDatacenters ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageLoadBalancer . java b / src / java / org / apache / cassandra / service / StorageLoadBalancer . java 
 index 47a5e73 . . b4ac62d 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageLoadBalancer . java 
 + + + b / src / java / org / apache / cassandra / service / StorageLoadBalancer . java 
 @ @ - 184 , 7 + 184 , 7 @ @ public class StorageLoadBalancer implements IEndpointStateChangeSubscriber 
 { 
 if ( state ! = ApplicationState . LOAD ) 
 return ; 
 - loadInfo _ . put ( endpoint , Double . parseDouble ( value . value ) ) ; 
 + loadInfo _ . put ( endpoint , Double . valueOf ( value . value ) ) ; 
 
 / * 
 / / clone load information to perform calculations 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 9ff5eab . . 7058bfd 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 369 , 7 + 369 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 logger _ . warn ( " Unable to start GCInspector ( currently only supported on the Sun JVM ) " ) ; 
 } 
 
 - if ( Boolean . valueOf ( System . getProperty ( " cassandra . load _ ring _ state " , " true " ) ) ) 
 + if ( Boolean . parseBoolean ( System . getProperty ( " cassandra . load _ ring _ state " , " true " ) ) ) 
 { 
 logger _ . info ( " Loading persisted ring state " ) ; 
 for ( Map . Entry < Token , InetAddress > entry : SystemTable . loadTokens ( ) . entrySet ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 index edd432b . . 3191971 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 @ @ - 561 , 7 + 561 , 7 @ @ public class NodeCmd { 
 
 case SETCACHECAPACITY : 
 if ( arguments . length ! = 5 ) { badUse ( " setcachecapacity requires ks , cf , keycachecap , and rowcachecap args . " ) ; } 
 - probe . setCacheCapacities ( arguments [ 1 ] , arguments [ 2 ] , Integer . valueOf ( arguments [ 3 ] ) , Integer . valueOf ( arguments [ 4 ] ) ) ; 
 + probe . setCacheCapacities ( arguments [ 1 ] , arguments [ 2 ] , Integer . parseInt ( arguments [ 3 ] ) , Integer . parseInt ( arguments [ 4 ] ) ) ; 
 break ; 
 
 case SETCOMPACTIONTHRESHOLD : 
 diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 index 0b31067 . . be2bc73 100644 
 - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java 
 + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 @ @ - 76 , 11 + 76 , 11 @ @ public class FBUtilities 
 { 
 if ( value . endsWith ( " % " ) ) 
 { 
 - return Double . valueOf ( value . substring ( 0 , value . length ( ) - 1 ) ) / 100 ; 
 + return Double . parseDouble ( value . substring ( 0 , value . length ( ) - 1 ) ) / 100 ; 
 } 
 else 
 { 
 - return Double . valueOf ( value ) ; 
 + return Double . parseDouble ( value ) ; 
 } 
 } 

