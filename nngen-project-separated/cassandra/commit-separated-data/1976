BLEU SCORE: 0.0012393760883331792

TEST MSG: Fix CQLTester
GENERATED MSG: Add way to force the cassandra - cli to refresh it ' s schema

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> index 68f90bd . . eb73ff9 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> @ @ - 32 , 7 + 32 , 6 @ @ import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> import com . google . common . base . Objects ; <nl> import com . google . common . collect . ImmutableSet ; <nl> - import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . junit . AfterClass ; <nl> import org . junit . After ; <nl> import org . junit . Assert ; <nl> @ @ - 276 , 7 + 275 , 7 @ @ public abstract class CQLTester <nl> <nl> protected String createType ( String query ) <nl> { <nl> - String typeName = callerName ( ) + " _ type _ " + seqNumber . getAndIncrement ( ) ; <nl> + String typeName = " type _ " + seqNumber . getAndIncrement ( ) ; <nl> String fullQuery = String . format ( query , KEYSPACE + " . " + typeName ) ; <nl> currentTypes . add ( typeName ) ; <nl> logger . info ( fullQuery ) ; <nl> @ @ - 286 , 7 + 285 , 7 @ @ public abstract class CQLTester <nl> <nl> protected String createFunction ( String keyspace , String argTypes , String query ) throws Throwable <nl> { <nl> - String functionName = keyspace + " . " + callerName ( ) + " _ function _ " + seqNumber . getAndIncrement ( ) ; <nl> + String functionName = keyspace + " . function _ " + seqNumber . getAndIncrement ( ) ; <nl> createFunctionOverload ( functionName , argTypes , query ) ; <nl> return functionName ; <nl> } <nl> @ @ - 301 , 7 + 300 , 7 @ @ public abstract class CQLTester <nl> <nl> protected String createAggregate ( String keyspace , String argTypes , String query ) throws Throwable <nl> { <nl> - String aggregateName = keyspace + " . " + callerName ( ) + " _ aggregate _ " + seqNumber . getAndIncrement ( ) ; <nl> + String aggregateName = keyspace + " . " + " aggregate _ " + seqNumber . getAndIncrement ( ) ; <nl> createAggregateOverload ( aggregateName , argTypes , query ) ; <nl> return aggregateName ; <nl> } <nl> @ @ - 316 , 7 + 315 , 7 @ @ public abstract class CQLTester <nl> <nl> protected void createTable ( String query ) <nl> { <nl> - currentTable = callerName ( ) + " _ table _ " + seqNumber . getAndIncrement ( ) ; <nl> + currentTable = " table _ " + seqNumber . getAndIncrement ( ) ; <nl> String fullQuery = formatQuery ( query ) ; <nl> logger . info ( fullQuery ) ; <nl> schemaChange ( fullQuery ) ; <nl> @ @ - 324 , 7 + 323 , 7 @ @ public abstract class CQLTester <nl> <nl> protected void createTableMayThrow ( String query ) throws Throwable <nl> { <nl> - currentTable = callerName ( ) + " _ table _ " + seqNumber . getAndIncrement ( ) ; <nl> + currentTable = " table _ " + seqNumber . getAndIncrement ( ) ; <nl> String fullQuery = formatQuery ( query ) ; <nl> logger . info ( fullQuery ) ; <nl> try <nl> @ @ - 393 , 11 + 392 , 6 @ @ public abstract class CQLTester <nl> schemaChange ( fullQuery ) ; <nl> } <nl> <nl> - private static String callerName ( ) <nl> - { <nl> - return new Exception ( ) . getStackTrace ( ) [ 2 ] . getMethodName ( ) . toLowerCase ( ) ; <nl> - } <nl> - <nl> private static void schemaChange ( String query ) <nl> { <nl> try
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java <nl> index ded2c2b . . 8296253 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliClient . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliClient . java <nl> @ @ - 1535 , 7 + 1535 , 17 @ @ public class CliClient <nl> <nl> private boolean applyAssumption ( String cfName , String assumptionElement , String defaultType ) <nl> { <nl> - CfDef columnFamily = getCfDef ( cfName ) ; <nl> + CfDef columnFamily ; <nl> + <nl> + try <nl> + { <nl> + columnFamily = getCfDef ( cfName ) ; <nl> + } <nl> + catch ( RuntimeException e ) <nl> + { <nl> + return false ; / / just fail if CF does not exist <nl> + } <nl> + <nl> / / used to store in this . cfKeysComparator <nl> AbstractType < ? > comparator ; <nl>

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 index 68f90bd . . eb73ff9 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 @ @ - 32 , 7 + 32 , 6 @ @ import java . util . concurrent . atomic . AtomicInteger ; 
 
 import com . google . common . base . Objects ; 
 import com . google . common . collect . ImmutableSet ; 
 - import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . junit . AfterClass ; 
 import org . junit . After ; 
 import org . junit . Assert ; 
 @ @ - 276 , 7 + 275 , 7 @ @ public abstract class CQLTester 
 
 protected String createType ( String query ) 
 { 
 - String typeName = callerName ( ) + " _ type _ " + seqNumber . getAndIncrement ( ) ; 
 + String typeName = " type _ " + seqNumber . getAndIncrement ( ) ; 
 String fullQuery = String . format ( query , KEYSPACE + " . " + typeName ) ; 
 currentTypes . add ( typeName ) ; 
 logger . info ( fullQuery ) ; 
 @ @ - 286 , 7 + 285 , 7 @ @ public abstract class CQLTester 
 
 protected String createFunction ( String keyspace , String argTypes , String query ) throws Throwable 
 { 
 - String functionName = keyspace + " . " + callerName ( ) + " _ function _ " + seqNumber . getAndIncrement ( ) ; 
 + String functionName = keyspace + " . function _ " + seqNumber . getAndIncrement ( ) ; 
 createFunctionOverload ( functionName , argTypes , query ) ; 
 return functionName ; 
 } 
 @ @ - 301 , 7 + 300 , 7 @ @ public abstract class CQLTester 
 
 protected String createAggregate ( String keyspace , String argTypes , String query ) throws Throwable 
 { 
 - String aggregateName = keyspace + " . " + callerName ( ) + " _ aggregate _ " + seqNumber . getAndIncrement ( ) ; 
 + String aggregateName = keyspace + " . " + " aggregate _ " + seqNumber . getAndIncrement ( ) ; 
 createAggregateOverload ( aggregateName , argTypes , query ) ; 
 return aggregateName ; 
 } 
 @ @ - 316 , 7 + 315 , 7 @ @ public abstract class CQLTester 
 
 protected void createTable ( String query ) 
 { 
 - currentTable = callerName ( ) + " _ table _ " + seqNumber . getAndIncrement ( ) ; 
 + currentTable = " table _ " + seqNumber . getAndIncrement ( ) ; 
 String fullQuery = formatQuery ( query ) ; 
 logger . info ( fullQuery ) ; 
 schemaChange ( fullQuery ) ; 
 @ @ - 324 , 7 + 323 , 7 @ @ public abstract class CQLTester 
 
 protected void createTableMayThrow ( String query ) throws Throwable 
 { 
 - currentTable = callerName ( ) + " _ table _ " + seqNumber . getAndIncrement ( ) ; 
 + currentTable = " table _ " + seqNumber . getAndIncrement ( ) ; 
 String fullQuery = formatQuery ( query ) ; 
 logger . info ( fullQuery ) ; 
 try 
 @ @ - 393 , 11 + 392 , 6 @ @ public abstract class CQLTester 
 schemaChange ( fullQuery ) ; 
 } 
 
 - private static String callerName ( ) 
 - { 
 - return new Exception ( ) . getStackTrace ( ) [ 2 ] . getMethodName ( ) . toLowerCase ( ) ; 
 - } 
 - 
 private static void schemaChange ( String query ) 
 { 
 try

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java 
 index ded2c2b . . 8296253 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliClient . java 
 + + + b / src / java / org / apache / cassandra / cli / CliClient . java 
 @ @ - 1535 , 7 + 1535 , 17 @ @ public class CliClient 
 
 private boolean applyAssumption ( String cfName , String assumptionElement , String defaultType ) 
 { 
 - CfDef columnFamily = getCfDef ( cfName ) ; 
 + CfDef columnFamily ; 
 + 
 + try 
 + { 
 + columnFamily = getCfDef ( cfName ) ; 
 + } 
 + catch ( RuntimeException e ) 
 + { 
 + return false ; / / just fail if CF does not exist 
 + } 
 + 
 / / used to store in this . cfKeysComparator 
 AbstractType < ? > comparator ; 

