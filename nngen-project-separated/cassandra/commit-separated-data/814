BLEU SCORE: 0.018738883683389617

TEST MSG: Validate bloom _ filter _ fp _ chance during table creation
GENERATED MSG: Fix missing logging for some exceptions

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index fe4728d . . 36009c5 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> - < < < < < < < HEAD <nl> 2 . 2 . 7 <nl> + * Validate bloom _ filter _ fp _ chance against lowest supported <nl> + value when the table is created ( CASSANDRA - 11920 ) <nl> * RandomAccessReader : call isEOF ( ) only when rebuffering , not for every read operation ( CASSANDRA - 12013 ) <nl> * Don ' t send erroneous NEW _ NODE notifications on restart ( CASSANDRA - 11038 ) <nl> * StorageService shutdown hook should use a volatile variable ( CASSANDRA - 11984 ) <nl> @ @ - 28 , 10 + 29 , 8 @ @ <nl> * Always close cluster with connection in CqlRecordWriter ( CASSANDRA - 11553 ) <nl> * Fix slice queries on ordered COMPACT tables ( CASSANDRA - 10988 ) <nl> Merged from 2 . 1 : <nl> - = = = = = = = <nl> 2 . 1 . 15 <nl> * Remove distinction between non - existing static columns and existing but null in LWTs ( CASSANDRA - 9842 ) <nl> - > > > > > > > asf / cassandra - 2 . 1 <nl> * Support mlockall on IBM POWER arch ( CASSANDRA - 11576 ) <nl> * Cache local ranges when calculating repair neighbors ( CASSANDRA - 11933 ) <nl> * Allow LWT operation on static column with only partition keys ( CASSANDRA - 10532 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CFPropDefs . java b / src / java / org / apache / cassandra / cql3 / statements / CFPropDefs . java <nl> index d897cb7 . . c02e78e 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CFPropDefs . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CFPropDefs . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import org . apache . cassandra . db . compaction . AbstractCompactionStrategy ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . exceptions . SyntaxException ; <nl> import org . apache . cassandra . io . compress . CompressionParameters ; <nl> + import org . apache . cassandra . utils . BloomCalculations ; <nl> <nl> public class CFPropDefs extends PropertyDefinitions <nl> { <nl> @ @ - 211 , 7 + 212 , 17 @ @ public class CFPropDefs extends PropertyDefinitions <nl> cfm . compactionStrategyOptions ( new HashMap < > ( getCompactionOptions ( ) ) ) ; <nl> } <nl> <nl> - cfm . bloomFilterFpChance ( getDouble ( KW _ BF _ FP _ CHANCE , cfm . getBloomFilterFpChance ( ) ) ) ; <nl> + double bloomFilterFpChance = getDouble ( KW _ BF _ FP _ CHANCE , cfm . getBloomFilterFpChance ( ) ) ; <nl> + double minBloomFilterFpChanceValue = BloomCalculations . minSupportedBloomFilterFpChance ( ) ; <nl> + if ( bloomFilterFpChance < = minBloomFilterFpChanceValue | | bloomFilterFpChance > 1 ) <nl> + { <nl> + throw new ConfigurationException ( String . format ( <nl> + " % s must be larger than % s and less than or equal to 1 . 0 ( got % s ) " , <nl> + KW _ BF _ FP _ CHANCE , <nl> + minBloomFilterFpChanceValue , <nl> + bloomFilterFpChance ) ) ; <nl> + } <nl> + cfm . bloomFilterFpChance ( bloomFilterFpChance ) ; <nl> <nl> if ( ! getCompressionOptions ( ) . isEmpty ( ) ) <nl> cfm . compressionParameters ( CompressionParameters . create ( getCompressionOptions ( ) ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / utils / BloomCalculations . java b / src / java / org / apache / cassandra / utils / BloomCalculations . java <nl> index b73f531 . . 7ba5452 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / BloomCalculations . java <nl> + + + b / src / java / org / apache / cassandra / utils / BloomCalculations . java <nl> @ @ - 26 , 8 + 26 , 8 @ @ package org . apache . cassandra . utils ; <nl> * Filter class by helping to choose correct values of ' bits per element ' and <nl> * ' number of hash functions , k ' . <nl> * / <nl> - class BloomCalculations { <nl> - <nl> + public class BloomCalculations <nl> + { <nl> private static final int minBuckets = 2 ; <nl> private static final int minK = 1 ; <nl> <nl> @ @ - 182 , 4 + 182 , 15 @ @ class BloomCalculations { <nl> } <nl> return Math . min ( BloomCalculations . probs . length - 1 , ( int ) v ) ; <nl> } <nl> + <nl> + / * * <nl> + * Retrieves the minimum supported BloomFilterFpChance value <nl> + * @ return Minimum supported value for BloomFilterFpChance <nl> + * / <nl> + public static double minSupportedBloomFilterFpChance ( ) <nl> + { <nl> + int maxBuckets = probs . length - 1 ; <nl> + int maxK = probs [ maxBuckets ] . length - 1 ; <nl> + return probs [ maxBuckets ] [ maxK ] ; <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / schema / CreateTableValidationTest . java b / test / unit / org / apache / cassandra / schema / CreateTableValidationTest . java <nl> new file mode 100644 <nl> index 0000000 . . 9708552 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / schema / CreateTableValidationTest . java <nl> @ @ - 0 , 0 + 1 , 51 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + package org . apache . cassandra . schema ; <nl> + <nl> + import org . apache . cassandra . cql3 . CQLTester ; <nl> + import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . junit . Test ; <nl> + <nl> + import static org . junit . Assert . fail ; <nl> + <nl> + public class CreateTableValidationTest extends CQLTester <nl> + { <nl> + private static final String KEYSPACE1 = " CreateTableValidationTest " ; <nl> + <nl> + @ Test <nl> + public void testInvalidBloomFilterFPRatio ( ) throws Throwable <nl> + { <nl> + try <nl> + { <nl> + createTableMayThrow ( " CREATE TABLE % s ( a int PRIMARY KEY , b int ) WITH bloom _ filter _ fp _ chance = 0 . 0000001 " ) ; <nl> + fail ( " Expected an fp chance of 0 . 0000001 to be rejected " ) ; <nl> + } <nl> + catch ( ConfigurationException exc ) { } <nl> + <nl> + try <nl> + { <nl> + createTableMayThrow ( " CREATE TABLE % s ( a int PRIMARY KEY , b int ) WITH bloom _ filter _ fp _ chance = 1 . 1 " ) ; <nl> + fail ( " Expected an fp chance of 1 . 1 to be rejected " ) ; <nl> + } <nl> + catch ( ConfigurationException exc ) { } <nl> + <nl> + / / sanity check <nl> + createTable ( " CREATE TABLE % s ( a int PRIMARY KEY , b int ) WITH bloom _ filter _ fp _ chance = 0 . 1 " ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / concurrent / RetryingScheduledThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / RetryingScheduledThreadPoolExecutor . java <nl> deleted file mode 100644 <nl> index e69de29 . . 0000000

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index fe4728d . . 36009c5 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 - < < < < < < < HEAD 
 2 . 2 . 7 
 + * Validate bloom _ filter _ fp _ chance against lowest supported 
 + value when the table is created ( CASSANDRA - 11920 ) 
 * RandomAccessReader : call isEOF ( ) only when rebuffering , not for every read operation ( CASSANDRA - 12013 ) 
 * Don ' t send erroneous NEW _ NODE notifications on restart ( CASSANDRA - 11038 ) 
 * StorageService shutdown hook should use a volatile variable ( CASSANDRA - 11984 ) 
 @ @ - 28 , 10 + 29 , 8 @ @ 
 * Always close cluster with connection in CqlRecordWriter ( CASSANDRA - 11553 ) 
 * Fix slice queries on ordered COMPACT tables ( CASSANDRA - 10988 ) 
 Merged from 2 . 1 : 
 - = = = = = = = 
 2 . 1 . 15 
 * Remove distinction between non - existing static columns and existing but null in LWTs ( CASSANDRA - 9842 ) 
 - > > > > > > > asf / cassandra - 2 . 1 
 * Support mlockall on IBM POWER arch ( CASSANDRA - 11576 ) 
 * Cache local ranges when calculating repair neighbors ( CASSANDRA - 11933 ) 
 * Allow LWT operation on static column with only partition keys ( CASSANDRA - 10532 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CFPropDefs . java b / src / java / org / apache / cassandra / cql3 / statements / CFPropDefs . java 
 index d897cb7 . . c02e78e 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CFPropDefs . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CFPropDefs . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import org . apache . cassandra . db . compaction . AbstractCompactionStrategy ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . exceptions . SyntaxException ; 
 import org . apache . cassandra . io . compress . CompressionParameters ; 
 + import org . apache . cassandra . utils . BloomCalculations ; 
 
 public class CFPropDefs extends PropertyDefinitions 
 { 
 @ @ - 211 , 7 + 212 , 17 @ @ public class CFPropDefs extends PropertyDefinitions 
 cfm . compactionStrategyOptions ( new HashMap < > ( getCompactionOptions ( ) ) ) ; 
 } 
 
 - cfm . bloomFilterFpChance ( getDouble ( KW _ BF _ FP _ CHANCE , cfm . getBloomFilterFpChance ( ) ) ) ; 
 + double bloomFilterFpChance = getDouble ( KW _ BF _ FP _ CHANCE , cfm . getBloomFilterFpChance ( ) ) ; 
 + double minBloomFilterFpChanceValue = BloomCalculations . minSupportedBloomFilterFpChance ( ) ; 
 + if ( bloomFilterFpChance < = minBloomFilterFpChanceValue | | bloomFilterFpChance > 1 ) 
 + { 
 + throw new ConfigurationException ( String . format ( 
 + " % s must be larger than % s and less than or equal to 1 . 0 ( got % s ) " , 
 + KW _ BF _ FP _ CHANCE , 
 + minBloomFilterFpChanceValue , 
 + bloomFilterFpChance ) ) ; 
 + } 
 + cfm . bloomFilterFpChance ( bloomFilterFpChance ) ; 
 
 if ( ! getCompressionOptions ( ) . isEmpty ( ) ) 
 cfm . compressionParameters ( CompressionParameters . create ( getCompressionOptions ( ) ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / utils / BloomCalculations . java b / src / java / org / apache / cassandra / utils / BloomCalculations . java 
 index b73f531 . . 7ba5452 100644 
 - - - a / src / java / org / apache / cassandra / utils / BloomCalculations . java 
 + + + b / src / java / org / apache / cassandra / utils / BloomCalculations . java 
 @ @ - 26 , 8 + 26 , 8 @ @ package org . apache . cassandra . utils ; 
 * Filter class by helping to choose correct values of ' bits per element ' and 
 * ' number of hash functions , k ' . 
 * / 
 - class BloomCalculations { 
 - 
 + public class BloomCalculations 
 + { 
 private static final int minBuckets = 2 ; 
 private static final int minK = 1 ; 
 
 @ @ - 182 , 4 + 182 , 15 @ @ class BloomCalculations { 
 } 
 return Math . min ( BloomCalculations . probs . length - 1 , ( int ) v ) ; 
 } 
 + 
 + / * * 
 + * Retrieves the minimum supported BloomFilterFpChance value 
 + * @ return Minimum supported value for BloomFilterFpChance 
 + * / 
 + public static double minSupportedBloomFilterFpChance ( ) 
 + { 
 + int maxBuckets = probs . length - 1 ; 
 + int maxK = probs [ maxBuckets ] . length - 1 ; 
 + return probs [ maxBuckets ] [ maxK ] ; 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / schema / CreateTableValidationTest . java b / test / unit / org / apache / cassandra / schema / CreateTableValidationTest . java 
 new file mode 100644 
 index 0000000 . . 9708552 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / schema / CreateTableValidationTest . java 
 @ @ - 0 , 0 + 1 , 51 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + package org . apache . cassandra . schema ; 
 + 
 + import org . apache . cassandra . cql3 . CQLTester ; 
 + import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . junit . Test ; 
 + 
 + import static org . junit . Assert . fail ; 
 + 
 + public class CreateTableValidationTest extends CQLTester 
 + { 
 + private static final String KEYSPACE1 = " CreateTableValidationTest " ; 
 + 
 + @ Test 
 + public void testInvalidBloomFilterFPRatio ( ) throws Throwable 
 + { 
 + try 
 + { 
 + createTableMayThrow ( " CREATE TABLE % s ( a int PRIMARY KEY , b int ) WITH bloom _ filter _ fp _ chance = 0 . 0000001 " ) ; 
 + fail ( " Expected an fp chance of 0 . 0000001 to be rejected " ) ; 
 + } 
 + catch ( ConfigurationException exc ) { } 
 + 
 + try 
 + { 
 + createTableMayThrow ( " CREATE TABLE % s ( a int PRIMARY KEY , b int ) WITH bloom _ filter _ fp _ chance = 1 . 1 " ) ; 
 + fail ( " Expected an fp chance of 1 . 1 to be rejected " ) ; 
 + } 
 + catch ( ConfigurationException exc ) { } 
 + 
 + / / sanity check 
 + createTable ( " CREATE TABLE % s ( a int PRIMARY KEY , b int ) WITH bloom _ filter _ fp _ chance = 0 . 1 " ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / concurrent / RetryingScheduledThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / RetryingScheduledThreadPoolExecutor . java 
 deleted file mode 100644 
 index e69de29 . . 0000000
