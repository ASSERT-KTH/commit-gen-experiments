BLEU SCORE: 0.027611988917697356

TEST MSG: Partially revert # 9839 to remove reference loop
GENERATED MSG: merge from 1 . 2

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 77facc4 . . cb4c2d8 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 - rc2 <nl> + * Remove circular references in SegmentedFile ( CASSANDRA - 10543 ) <nl> * Ensure validation of indexed values only occurs once per - partition ( CASSANDRA - 10536 ) <nl> * Fix handling of static columns for range tombstones in thrift ( CASSANDRA - 10174 ) <nl> * Support empty ColumnFilter for backward compatility on empty IN ( CASSANDRA - 10471 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 4c9fc55 . . 0b838bf 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 2044 , 7 + 2044 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> TableParams . builder ( ) . crcCheckChance ( crcCheckChance ) . build ( ) . validate ( ) ; <nl> for ( ColumnFamilyStore cfs : concatWithIndexes ( ) ) <nl> + { <nl> cfs . crcCheckChance . set ( crcCheckChance ) ; <nl> + for ( SSTableReader sstable : cfs . getSSTables ( SSTableSet . LIVE ) ) <nl> + sstable . setCrcCheckChance ( crcCheckChance ) ; <nl> + } <nl> } <nl> catch ( ConfigurationException e ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java <nl> index b2759e6 . . 329d932 100644 <nl> - - - a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java <nl> + + + b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . util . concurrent . ThreadLocalRandom ; <nl> import java . util . zip . Checksum ; <nl> import java . util . function . Supplier ; <nl> <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . primitives . Ints ; <nl> <nl> import org . apache . cassandra . io . FSReadError ; <nl> @ @ - 46 , 14 + 47 , 18 @ @ public class CompressedRandomAccessReader extends RandomAccessReader <nl> <nl> / / raw checksum bytes <nl> private ByteBuffer checksumBytes ; <nl> - private final Supplier < Double > crcCheckChanceSupplier ; <nl> + <nl> + @ VisibleForTesting <nl> + public double getCrcCheckChance ( ) <nl> + { <nl> + return metadata . parameters . getCrcCheckChance ( ) ; <nl> + } <nl> <nl> protected CompressedRandomAccessReader ( Builder builder ) <nl> { <nl> super ( builder ) ; <nl> this . metadata = builder . metadata ; <nl> this . checksum = metadata . checksumType . newInstance ( ) ; <nl> - crcCheckChanceSupplier = builder . crcCheckChanceSupplier ; <nl> <nl> if ( regions = = null ) <nl> { <nl> @ @ - 124 , 7 + 129 , 7 @ @ public class CompressedRandomAccessReader extends RandomAccessReader <nl> buffer . flip ( ) ; <nl> } <nl> <nl> - if ( crcCheckChanceSupplier . get ( ) > ThreadLocalRandom . current ( ) . nextDouble ( ) ) <nl> + if ( getCrcCheckChance ( ) > ThreadLocalRandom . current ( ) . nextDouble ( ) ) <nl> { <nl> compressed . rewind ( ) ; <nl> metadata . checksumType . update ( checksum , ( compressed ) ) ; <nl> @ @ - 186 , 7 + 191 , 7 @ @ public class CompressedRandomAccessReader extends RandomAccessReader <nl> buffer . flip ( ) ; <nl> } <nl> <nl> - if ( crcCheckChanceSupplier . get ( ) > ThreadLocalRandom . current ( ) . nextDouble ( ) ) <nl> + if ( getCrcCheckChance ( ) > ThreadLocalRandom . current ( ) . nextDouble ( ) ) <nl> { <nl> compressedChunk . position ( chunkOffset ) . limit ( chunkOffset + chunk . length ) ; <nl> <nl> @ @ - 239 , 21 + 244 , 18 @ @ public class CompressedRandomAccessReader extends RandomAccessReader <nl> public final static class Builder extends RandomAccessReader . Builder <nl> { <nl> private final CompressionMetadata metadata ; <nl> - private final Supplier < Double > crcCheckChanceSupplier ; <nl> <nl> public Builder ( ICompressedFile file ) <nl> { <nl> super ( file . channel ( ) ) ; <nl> this . metadata = applyMetadata ( file . getMetadata ( ) ) ; <nl> this . regions = file . regions ( ) ; <nl> - this . crcCheckChanceSupplier = file . getCrcCheckChanceSupplier ( ) ; <nl> } <nl> <nl> public Builder ( ChannelProxy channel , CompressionMetadata metadata ) <nl> { <nl> super ( channel ) ; <nl> this . metadata = applyMetadata ( metadata ) ; <nl> - this . crcCheckChanceSupplier = ( ( ) - > 1 . 0 ) ; / / 100 % crc _ check _ chance <nl> } <nl> <nl> private CompressionMetadata applyMetadata ( CompressionMetadata metadata ) <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> index 8d23597 . . afd0a1e 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> @ @ - 217 , 6 + 217 , 8 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> <nl> private RestorableMeter readMeter ; <nl> <nl> + private volatile double crcCheckChance ; <nl> + <nl> / * * <nl> * Calculate approximate key count . <nl> * If cardinality estimator is available on all given sstables , then this method use them to estimate <nl> @ @ - 657 , 10 + 659 , 7 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> keyCache = CacheService . instance . keyCache ; <nl> final ColumnFamilyStore cfs = Schema . instance . getColumnFamilyStoreInstance ( metadata . cfId ) ; <nl> if ( cfs ! = null ) <nl> - { <nl> - ifile . setCrcCheckChanceSupplier ( cfs : : getCrcCheckChance ) ; <nl> - dfile . setCrcCheckChanceSupplier ( cfs : : getCrcCheckChance ) ; <nl> - } <nl> + setCrcCheckChance ( cfs . getCrcCheckChance ( ) ) ; <nl> } <nl> <nl> public boolean isKeyCacheSetup ( ) <nl> @ @ - 1644 , 7 + 1643 , 21 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> @ VisibleForTesting <nl> public double getCrcCheckChance ( ) <nl> { <nl> - return dfile . getCrcCheckChanceSupplier ( ) . get ( ) ; <nl> + return crcCheckChance ; <nl> + } <nl> + <nl> + / * * <nl> + * Set the value of CRC check chance . The argument supplied is obtained <nl> + * from the the property of the owning CFS . Called when either the SSTR <nl> + * is initialized , or the CFS ' s property is updated via JMX <nl> + * @ param crcCheckChance <nl> + * / <nl> + public void setCrcCheckChance ( double crcCheckChance ) <nl> + { <nl> + this . crcCheckChance = crcCheckChance ; <nl> + if ( compression ) <nl> + ( ( CompressedSegmentedFile ) dfile ) . metadata . parameters . setCrcCheckChance ( crcCheckChance ) ; <nl> + <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / io / util / IChecksummedFile . java b / src / java / org / apache / cassandra / io / util / IChecksummedFile . java <nl> deleted file mode 100644 <nl> index fa15a5e . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / io / util / IChecksummedFile . java <nl> + + + / dev / null <nl> @ @ - 1 , 27 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package org . apache . cassandra . io . util ; <nl> - <nl> - import java . util . function . Supplier ; <nl> - <nl> - public interface IChecksummedFile <nl> - { <nl> - public Supplier < Double > getCrcCheckChanceSupplier ( ) ; <nl> - public void setCrcCheckChanceSupplier ( Supplier < Double > crcCheckChanceSupplier ) ; <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / io / util / ICompressedFile . java b / src / java / org / apache / cassandra / io / util / ICompressedFile . java <nl> index c149fd1 . . 43cef8c 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / ICompressedFile . java <nl> + + + b / src / java / org / apache / cassandra / io / util / ICompressedFile . java <nl> @ @ - 19 , 7 + 19 , 7 @ @ package org . apache . cassandra . io . util ; <nl> <nl> import org . apache . cassandra . io . compress . CompressionMetadata ; <nl> <nl> - public interface ICompressedFile extends IChecksummedFile <nl> + public interface ICompressedFile <nl> { <nl> ChannelProxy channel ( ) ; <nl> CompressionMetadata getMetadata ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / util / SegmentedFile . java b / src / java / org / apache / cassandra / io / util / SegmentedFile . java <nl> index c827255 . . ab2d291 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / SegmentedFile . java <nl> + + + b / src / java / org / apache / cassandra / io / util / SegmentedFile . java <nl> @ @ - 49 , 7 + 49 , 7 @ @ import static org . apache . cassandra . utils . Throwables . maybeFail ; <nl> * would need to be longer than 2GB , that segment will not be mmap ' d , and a new RandomAccessFile will be created for <nl> * each access to that segment . <nl> * / <nl> - public abstract class SegmentedFile extends SharedCloseableImpl implements IChecksummedFile <nl> + public abstract class SegmentedFile extends SharedCloseableImpl <nl> { <nl> public final ChannelProxy channel ; <nl> public final int bufferSize ; <nl> @ @ - 58 , 8 + 58 , 6 @ @ public abstract class SegmentedFile extends SharedCloseableImpl implements IChec <nl> / / This differs from length for compressed files ( but we still need length for <nl> / / SegmentIterator because offsets in the file are relative to the uncompressed size ) <nl> public final long onDiskLength ; <nl> - private Supplier < Double > crcCheckChanceSupplier = ( ) - > 1 . 0 ; <nl> - <nl> <nl> / * * <nl> * Use getBuilder to get a Builder to construct a SegmentedFile . <nl> @ @ - 137 , 16 + 135 , 6 @ @ public abstract class SegmentedFile extends SharedCloseableImpl implements IChec <nl> return reader ; <nl> } <nl> <nl> - public Supplier < Double > getCrcCheckChanceSupplier ( ) <nl> - { <nl> - return crcCheckChanceSupplier ; <nl> - } <nl> - <nl> - public void setCrcCheckChanceSupplier ( Supplier < Double > crcCheckChanceSupplier ) <nl> - { <nl> - this . crcCheckChanceSupplier = crcCheckChanceSupplier ; <nl> - } <nl> - <nl> public void dropPageCache ( long before ) <nl> { <nl> CLibrary . trySkipCache ( channel . getFileDescriptor ( ) , 0 , before , path ( ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / schema / CompressionParams . java b / src / java / org / apache / cassandra / schema / CompressionParams . java <nl> index 7f46718 . . cd1686f 100644 <nl> - - - a / src / java / org / apache / cassandra / schema / CompressionParams . java <nl> + + + b / src / java / org / apache / cassandra / schema / CompressionParams . java <nl> @ @ - 71 , 6 + 71 , 8 @ @ public final class CompressionParams <nl> private final Integer chunkLength ; <nl> private final ImmutableMap < String , String > otherOptions ; / / Unrecognized options , can be used by the compressor <nl> <nl> + private volatile double crcCheckChance = 1 . 0 ; <nl> + <nl> public static CompressionParams fromMap ( Map < String , String > opts ) <nl> { <nl> Map < String , String > options = copyOptions ( opts ) ; <nl> @ @ - 455 , 6 + 457 , 16 @ @ public final class CompressionParams <nl> return String . valueOf ( chunkLength ( ) / 1024 ) ; <nl> } <nl> <nl> + public void setCrcCheckChance ( double crcCheckChance ) <nl> + { <nl> + this . crcCheckChance = crcCheckChance ; <nl> + } <nl> + <nl> + public double getCrcCheckChance ( ) <nl> + { <nl> + return crcCheckChance ; <nl> + } <nl> + <nl> @ Override <nl> public boolean equals ( Object obj ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / CrcCheckChanceTest . java b / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / CrcCheckChanceTest . java <nl> index 3a68e4a . . d059f7d 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / CrcCheckChanceTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / CrcCheckChanceTest . java <nl> @ @ - 30 , 6 + 30 , 8 @ @ import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . Keyspace ; <nl> import org . apache . cassandra . db . compaction . CompactionInterruptedException ; <nl> import org . apache . cassandra . db . compaction . CompactionManager ; <nl> + import org . apache . cassandra . io . compress . CompressedRandomAccessReader ; <nl> + import org . apache . cassandra . io . sstable . format . SSTableReader ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> <nl> @ @ - 70 , 6 + 72 , 7 @ @ public class CrcCheckChanceTest extends CQLTester <nl> <nl> Assert . assertEquals ( 0 . 99 , cfs . getCrcCheckChance ( ) ) ; <nl> Assert . assertEquals ( 0 . 99 , cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) . getCrcCheckChance ( ) ) ; <nl> + <nl> Assert . assertEquals ( 0 . 99 , indexCfs . getCrcCheckChance ( ) ) ; <nl> Assert . assertEquals ( 0 . 99 , indexCfs . getLiveSSTables ( ) . iterator ( ) . next ( ) . getCrcCheckChance ( ) ) ; <nl> <nl> @ @ - 145 , 8 + 148 , 22 @ @ public class CrcCheckChanceTest extends CQLTester <nl> Assert . assertEquals ( 0 . 03 , cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) . getCrcCheckChance ( ) ) ; <nl> Assert . assertEquals ( 0 . 03 , indexCfs . getCrcCheckChance ( ) ) ; <nl> Assert . assertEquals ( 0 . 03 , indexCfs . getLiveSSTables ( ) . iterator ( ) . next ( ) . getCrcCheckChance ( ) ) ; <nl> - } <nl> <nl> + / / Also check that any open readers also use the updated value <nl> + / / note : only compressed files currently perform crc checks , so only the dfile reader is relevant here <nl> + SSTableReader baseSSTable = cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) ; <nl> + SSTableReader idxSSTable = indexCfs . getLiveSSTables ( ) . iterator ( ) . next ( ) ; <nl> + try ( CompressedRandomAccessReader baseDataReader = ( CompressedRandomAccessReader ) baseSSTable . openDataReader ( ) ; <nl> + CompressedRandomAccessReader idxDataReader = ( CompressedRandomAccessReader ) idxSSTable . openDataReader ( ) ) <nl> + { <nl> + Assert . assertEquals ( 0 . 03 , baseDataReader . getCrcCheckChance ( ) ) ; <nl> + Assert . assertEquals ( 0 . 03 , idxDataReader . getCrcCheckChance ( ) ) ; <nl> + <nl> + cfs . setCrcCheckChance ( 0 . 31 ) ; <nl> + Assert . assertEquals ( 0 . 31 , baseDataReader . getCrcCheckChance ( ) ) ; <nl> + Assert . assertEquals ( 0 . 31 , idxDataReader . getCrcCheckChance ( ) ) ; <nl> + } <nl> + } <nl> <nl> @ Test <nl> public void testDropDuringCompaction ( ) throws Throwable
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b935425 . . 7f5a487 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 2 - rc1 <nl> + * fix cqlsh rendering of blob fields ( CASSANDRA - 4970 ) <nl> * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) <nl> * save truncation position in system table ( CASSANDRA - 4906 ) <nl> * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) <nl> diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py <nl> index d15c083 . . bab3506 100644 <nl> - - - a / pylib / cqlshlib / formatting . py <nl> + + + b / pylib / cqlshlib / formatting . py <nl> @ @ - 88 , 8 + 88 , 8 @ @ def formatter _ for ( typname ) : <nl> return f <nl> return registrator <nl> <nl> - @ formatter _ for ( ' bytes ' ) <nl> - def format _ value _ bytes ( val , colormap , * * _ ) : <nl> + @ formatter _ for ( ' blob ' ) <nl> + def format _ value _ blob ( val , colormap , * * _ ) : <nl> bval = ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) <nl> return colorme ( bval , colormap , ' hex ' ) <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 77facc4 . . cb4c2d8 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 - rc2 
 + * Remove circular references in SegmentedFile ( CASSANDRA - 10543 ) 
 * Ensure validation of indexed values only occurs once per - partition ( CASSANDRA - 10536 ) 
 * Fix handling of static columns for range tombstones in thrift ( CASSANDRA - 10174 ) 
 * Support empty ColumnFilter for backward compatility on empty IN ( CASSANDRA - 10471 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 4c9fc55 . . 0b838bf 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 2044 , 7 + 2044 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 TableParams . builder ( ) . crcCheckChance ( crcCheckChance ) . build ( ) . validate ( ) ; 
 for ( ColumnFamilyStore cfs : concatWithIndexes ( ) ) 
 + { 
 cfs . crcCheckChance . set ( crcCheckChance ) ; 
 + for ( SSTableReader sstable : cfs . getSSTables ( SSTableSet . LIVE ) ) 
 + sstable . setCrcCheckChance ( crcCheckChance ) ; 
 + } 
 } 
 catch ( ConfigurationException e ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java 
 index b2759e6 . . 329d932 100644 
 - - - a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java 
 + + + b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . util . concurrent . ThreadLocalRandom ; 
 import java . util . zip . Checksum ; 
 import java . util . function . Supplier ; 
 
 + import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . primitives . Ints ; 
 
 import org . apache . cassandra . io . FSReadError ; 
 @ @ - 46 , 14 + 47 , 18 @ @ public class CompressedRandomAccessReader extends RandomAccessReader 
 
 / / raw checksum bytes 
 private ByteBuffer checksumBytes ; 
 - private final Supplier < Double > crcCheckChanceSupplier ; 
 + 
 + @ VisibleForTesting 
 + public double getCrcCheckChance ( ) 
 + { 
 + return metadata . parameters . getCrcCheckChance ( ) ; 
 + } 
 
 protected CompressedRandomAccessReader ( Builder builder ) 
 { 
 super ( builder ) ; 
 this . metadata = builder . metadata ; 
 this . checksum = metadata . checksumType . newInstance ( ) ; 
 - crcCheckChanceSupplier = builder . crcCheckChanceSupplier ; 
 
 if ( regions = = null ) 
 { 
 @ @ - 124 , 7 + 129 , 7 @ @ public class CompressedRandomAccessReader extends RandomAccessReader 
 buffer . flip ( ) ; 
 } 
 
 - if ( crcCheckChanceSupplier . get ( ) > ThreadLocalRandom . current ( ) . nextDouble ( ) ) 
 + if ( getCrcCheckChance ( ) > ThreadLocalRandom . current ( ) . nextDouble ( ) ) 
 { 
 compressed . rewind ( ) ; 
 metadata . checksumType . update ( checksum , ( compressed ) ) ; 
 @ @ - 186 , 7 + 191 , 7 @ @ public class CompressedRandomAccessReader extends RandomAccessReader 
 buffer . flip ( ) ; 
 } 
 
 - if ( crcCheckChanceSupplier . get ( ) > ThreadLocalRandom . current ( ) . nextDouble ( ) ) 
 + if ( getCrcCheckChance ( ) > ThreadLocalRandom . current ( ) . nextDouble ( ) ) 
 { 
 compressedChunk . position ( chunkOffset ) . limit ( chunkOffset + chunk . length ) ; 
 
 @ @ - 239 , 21 + 244 , 18 @ @ public class CompressedRandomAccessReader extends RandomAccessReader 
 public final static class Builder extends RandomAccessReader . Builder 
 { 
 private final CompressionMetadata metadata ; 
 - private final Supplier < Double > crcCheckChanceSupplier ; 
 
 public Builder ( ICompressedFile file ) 
 { 
 super ( file . channel ( ) ) ; 
 this . metadata = applyMetadata ( file . getMetadata ( ) ) ; 
 this . regions = file . regions ( ) ; 
 - this . crcCheckChanceSupplier = file . getCrcCheckChanceSupplier ( ) ; 
 } 
 
 public Builder ( ChannelProxy channel , CompressionMetadata metadata ) 
 { 
 super ( channel ) ; 
 this . metadata = applyMetadata ( metadata ) ; 
 - this . crcCheckChanceSupplier = ( ( ) - > 1 . 0 ) ; / / 100 % crc _ check _ chance 
 } 
 
 private CompressionMetadata applyMetadata ( CompressionMetadata metadata ) 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 index 8d23597 . . afd0a1e 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 @ @ - 217 , 6 + 217 , 8 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 
 private RestorableMeter readMeter ; 
 
 + private volatile double crcCheckChance ; 
 + 
 / * * 
 * Calculate approximate key count . 
 * If cardinality estimator is available on all given sstables , then this method use them to estimate 
 @ @ - 657 , 10 + 659 , 7 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 keyCache = CacheService . instance . keyCache ; 
 final ColumnFamilyStore cfs = Schema . instance . getColumnFamilyStoreInstance ( metadata . cfId ) ; 
 if ( cfs ! = null ) 
 - { 
 - ifile . setCrcCheckChanceSupplier ( cfs : : getCrcCheckChance ) ; 
 - dfile . setCrcCheckChanceSupplier ( cfs : : getCrcCheckChance ) ; 
 - } 
 + setCrcCheckChance ( cfs . getCrcCheckChance ( ) ) ; 
 } 
 
 public boolean isKeyCacheSetup ( ) 
 @ @ - 1644 , 7 + 1643 , 21 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 @ VisibleForTesting 
 public double getCrcCheckChance ( ) 
 { 
 - return dfile . getCrcCheckChanceSupplier ( ) . get ( ) ; 
 + return crcCheckChance ; 
 + } 
 + 
 + / * * 
 + * Set the value of CRC check chance . The argument supplied is obtained 
 + * from the the property of the owning CFS . Called when either the SSTR 
 + * is initialized , or the CFS ' s property is updated via JMX 
 + * @ param crcCheckChance 
 + * / 
 + public void setCrcCheckChance ( double crcCheckChance ) 
 + { 
 + this . crcCheckChance = crcCheckChance ; 
 + if ( compression ) 
 + ( ( CompressedSegmentedFile ) dfile ) . metadata . parameters . setCrcCheckChance ( crcCheckChance ) ; 
 + 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / io / util / IChecksummedFile . java b / src / java / org / apache / cassandra / io / util / IChecksummedFile . java 
 deleted file mode 100644 
 index fa15a5e . . 0000000 
 - - - a / src / java / org / apache / cassandra / io / util / IChecksummedFile . java 
 + + + / dev / null 
 @ @ - 1 , 27 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package org . apache . cassandra . io . util ; 
 - 
 - import java . util . function . Supplier ; 
 - 
 - public interface IChecksummedFile 
 - { 
 - public Supplier < Double > getCrcCheckChanceSupplier ( ) ; 
 - public void setCrcCheckChanceSupplier ( Supplier < Double > crcCheckChanceSupplier ) ; 
 - } 
 diff - - git a / src / java / org / apache / cassandra / io / util / ICompressedFile . java b / src / java / org / apache / cassandra / io / util / ICompressedFile . java 
 index c149fd1 . . 43cef8c 100644 
 - - - a / src / java / org / apache / cassandra / io / util / ICompressedFile . java 
 + + + b / src / java / org / apache / cassandra / io / util / ICompressedFile . java 
 @ @ - 19 , 7 + 19 , 7 @ @ package org . apache . cassandra . io . util ; 
 
 import org . apache . cassandra . io . compress . CompressionMetadata ; 
 
 - public interface ICompressedFile extends IChecksummedFile 
 + public interface ICompressedFile 
 { 
 ChannelProxy channel ( ) ; 
 CompressionMetadata getMetadata ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / util / SegmentedFile . java b / src / java / org / apache / cassandra / io / util / SegmentedFile . java 
 index c827255 . . ab2d291 100644 
 - - - a / src / java / org / apache / cassandra / io / util / SegmentedFile . java 
 + + + b / src / java / org / apache / cassandra / io / util / SegmentedFile . java 
 @ @ - 49 , 7 + 49 , 7 @ @ import static org . apache . cassandra . utils . Throwables . maybeFail ; 
 * would need to be longer than 2GB , that segment will not be mmap ' d , and a new RandomAccessFile will be created for 
 * each access to that segment . 
 * / 
 - public abstract class SegmentedFile extends SharedCloseableImpl implements IChecksummedFile 
 + public abstract class SegmentedFile extends SharedCloseableImpl 
 { 
 public final ChannelProxy channel ; 
 public final int bufferSize ; 
 @ @ - 58 , 8 + 58 , 6 @ @ public abstract class SegmentedFile extends SharedCloseableImpl implements IChec 
 / / This differs from length for compressed files ( but we still need length for 
 / / SegmentIterator because offsets in the file are relative to the uncompressed size ) 
 public final long onDiskLength ; 
 - private Supplier < Double > crcCheckChanceSupplier = ( ) - > 1 . 0 ; 
 - 
 
 / * * 
 * Use getBuilder to get a Builder to construct a SegmentedFile . 
 @ @ - 137 , 16 + 135 , 6 @ @ public abstract class SegmentedFile extends SharedCloseableImpl implements IChec 
 return reader ; 
 } 
 
 - public Supplier < Double > getCrcCheckChanceSupplier ( ) 
 - { 
 - return crcCheckChanceSupplier ; 
 - } 
 - 
 - public void setCrcCheckChanceSupplier ( Supplier < Double > crcCheckChanceSupplier ) 
 - { 
 - this . crcCheckChanceSupplier = crcCheckChanceSupplier ; 
 - } 
 - 
 public void dropPageCache ( long before ) 
 { 
 CLibrary . trySkipCache ( channel . getFileDescriptor ( ) , 0 , before , path ( ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / schema / CompressionParams . java b / src / java / org / apache / cassandra / schema / CompressionParams . java 
 index 7f46718 . . cd1686f 100644 
 - - - a / src / java / org / apache / cassandra / schema / CompressionParams . java 
 + + + b / src / java / org / apache / cassandra / schema / CompressionParams . java 
 @ @ - 71 , 6 + 71 , 8 @ @ public final class CompressionParams 
 private final Integer chunkLength ; 
 private final ImmutableMap < String , String > otherOptions ; / / Unrecognized options , can be used by the compressor 
 
 + private volatile double crcCheckChance = 1 . 0 ; 
 + 
 public static CompressionParams fromMap ( Map < String , String > opts ) 
 { 
 Map < String , String > options = copyOptions ( opts ) ; 
 @ @ - 455 , 6 + 457 , 16 @ @ public final class CompressionParams 
 return String . valueOf ( chunkLength ( ) / 1024 ) ; 
 } 
 
 + public void setCrcCheckChance ( double crcCheckChance ) 
 + { 
 + this . crcCheckChance = crcCheckChance ; 
 + } 
 + 
 + public double getCrcCheckChance ( ) 
 + { 
 + return crcCheckChance ; 
 + } 
 + 
 @ Override 
 public boolean equals ( Object obj ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / CrcCheckChanceTest . java b / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / CrcCheckChanceTest . java 
 index 3a68e4a . . d059f7d 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / CrcCheckChanceTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / CrcCheckChanceTest . java 
 @ @ - 30 , 6 + 30 , 8 @ @ import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . Keyspace ; 
 import org . apache . cassandra . db . compaction . CompactionInterruptedException ; 
 import org . apache . cassandra . db . compaction . CompactionManager ; 
 + import org . apache . cassandra . io . compress . CompressedRandomAccessReader ; 
 + import org . apache . cassandra . io . sstable . format . SSTableReader ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 
 @ @ - 70 , 6 + 72 , 7 @ @ public class CrcCheckChanceTest extends CQLTester 
 
 Assert . assertEquals ( 0 . 99 , cfs . getCrcCheckChance ( ) ) ; 
 Assert . assertEquals ( 0 . 99 , cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) . getCrcCheckChance ( ) ) ; 
 + 
 Assert . assertEquals ( 0 . 99 , indexCfs . getCrcCheckChance ( ) ) ; 
 Assert . assertEquals ( 0 . 99 , indexCfs . getLiveSSTables ( ) . iterator ( ) . next ( ) . getCrcCheckChance ( ) ) ; 
 
 @ @ - 145 , 8 + 148 , 22 @ @ public class CrcCheckChanceTest extends CQLTester 
 Assert . assertEquals ( 0 . 03 , cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) . getCrcCheckChance ( ) ) ; 
 Assert . assertEquals ( 0 . 03 , indexCfs . getCrcCheckChance ( ) ) ; 
 Assert . assertEquals ( 0 . 03 , indexCfs . getLiveSSTables ( ) . iterator ( ) . next ( ) . getCrcCheckChance ( ) ) ; 
 - } 
 
 + / / Also check that any open readers also use the updated value 
 + / / note : only compressed files currently perform crc checks , so only the dfile reader is relevant here 
 + SSTableReader baseSSTable = cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) ; 
 + SSTableReader idxSSTable = indexCfs . getLiveSSTables ( ) . iterator ( ) . next ( ) ; 
 + try ( CompressedRandomAccessReader baseDataReader = ( CompressedRandomAccessReader ) baseSSTable . openDataReader ( ) ; 
 + CompressedRandomAccessReader idxDataReader = ( CompressedRandomAccessReader ) idxSSTable . openDataReader ( ) ) 
 + { 
 + Assert . assertEquals ( 0 . 03 , baseDataReader . getCrcCheckChance ( ) ) ; 
 + Assert . assertEquals ( 0 . 03 , idxDataReader . getCrcCheckChance ( ) ) ; 
 + 
 + cfs . setCrcCheckChance ( 0 . 31 ) ; 
 + Assert . assertEquals ( 0 . 31 , baseDataReader . getCrcCheckChance ( ) ) ; 
 + Assert . assertEquals ( 0 . 31 , idxDataReader . getCrcCheckChance ( ) ) ; 
 + } 
 + } 
 
 @ Test 
 public void testDropDuringCompaction ( ) throws Throwable

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b935425 . . 7f5a487 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 2 - rc1 
 + * fix cqlsh rendering of blob fields ( CASSANDRA - 4970 ) 
 * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) 
 * save truncation position in system table ( CASSANDRA - 4906 ) 
 * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) 
 diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py 
 index d15c083 . . bab3506 100644 
 - - - a / pylib / cqlshlib / formatting . py 
 + + + b / pylib / cqlshlib / formatting . py 
 @ @ - 88 , 8 + 88 , 8 @ @ def formatter _ for ( typname ) : 
 return f 
 return registrator 
 
 - @ formatter _ for ( ' bytes ' ) 
 - def format _ value _ bytes ( val , colormap , * * _ ) : 
 + @ formatter _ for ( ' blob ' ) 
 + def format _ value _ blob ( val , colormap , * * _ ) : 
 bval = ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) 
 return colorme ( bval , colormap , ' hex ' ) 

