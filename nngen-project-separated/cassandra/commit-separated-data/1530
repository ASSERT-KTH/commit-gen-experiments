BLEU SCORE: 0.049900497019368314

TEST MSG: Added support for DESCRIBE INDEX and DESCRIBE < objectname >
GENERATED MSG: Use python driver for UDTs in DESCRIBE output

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index fded5fc . . 70efc81 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> 2 . 1 . 7 <nl> * Allow JMX over SSL directly from nodetool ( CASSANDRA - 9090 ) <nl> * Fix incorrect result for IN queries where column not found ( CASSANDRA - 9540 ) <nl> + * Enable describe on indices ( CASSANDRA - 7814 ) <nl> * ColumnFamilyStore . selectAndReference may block during compaction ( CASSANDRA - 9637 ) <nl> * Fix bug in cardinality check when compacting ( CASSANDRA - 9580 ) <nl> * Fix memory leak in Ref due to ConcurrentLinkedQueue . remove ( ) behaviour ( CASSANDRA - 9549 ) <nl> diff - - git a / bin / cqlsh b / bin / cqlsh <nl> index a4cc5d4 . . 9f872f8 100755 <nl> - - - a / bin / cqlsh <nl> + + + b / bin / cqlsh <nl> @ @ - 267 , 11 + 267 , 13 @ @ cqlsh _ extra _ syntax _ rules = r ' ' ' <nl> ( " KEYSPACES " <nl> | " KEYSPACE " ksname = < keyspaceName > ? <nl> | ( " COLUMNFAMILY " | " TABLE " ) cf = < columnFamilyName > <nl> + | " INDEX " idx = < indexName > <nl> | ( " COLUMNFAMILIES " | " TABLES " ) <nl> | " FULL " ? " SCHEMA " <nl> | " CLUSTER " <nl> | " TYPES " <nl> - | " TYPE " ut = < userTypeName > ) <nl> + | " TYPE " ut = < userTypeName > <nl> + | ( ksname = < keyspaceName > | cf = < columnFamilyName > | idx = < indexName > ) ) <nl> ; <nl> <nl> < consistencyCommand > : : = " CONSISTENCY " ( level = < consistencyLevel > ) ? <nl> @ @ - 428 , 6 + 430 , 11 @ @ class KeyspaceNotFound ( Exception ) : <nl> class ColumnFamilyNotFound ( Exception ) : <nl> pass <nl> <nl> + class IndexNotFound ( Exception ) : <nl> + pass <nl> + <nl> + class ObjectNotFound ( Exception ) : <nl> + pass <nl> <nl> class VersionNotSupported ( Exception ) : <nl> pass <nl> @ @ - 738 , 12 + 745 , 10 @ @ class Shell ( cmd . Cmd ) : <nl> return map ( str , self . get _ keyspace _ meta ( ksname ) . tables . keys ( ) ) <nl> <nl> def get _ index _ names ( self , ksname = None ) : <nl> - idxnames = [ ] <nl> - for cfname in self . get _ columnfamily _ names ( ksname = ksname ) : <nl> - for col in self . get _ table _ meta ( ksname , cfname ) . columns . values ( ) : <nl> - if col . index : <nl> - idxnames . append ( col . index . name ) <nl> - return idxnames <nl> + if ksname is None : <nl> + ksname = self . current _ keyspace <nl> + <nl> + return map ( str , self . get _ keyspace _ meta ( ksname ) . indexes . keys ( ) ) <nl> <nl> def get _ column _ names ( self , ksname , cfname ) : <nl> if ksname is None : <nl> @ @ - 801 , 6 + 806 , 38 @ @ class Shell ( cmd . Cmd ) : <nl> <nl> return ksmeta . tables [ tablename ] <nl> <nl> + def get _ index _ meta ( self , ksname , idxname ) : <nl> + if ksname is None : <nl> + ksname = self . current _ keyspace <nl> + ksmeta = self . get _ keyspace _ meta ( ksname ) <nl> + <nl> + if idxname not in ksmeta . indexes : <nl> + raise IndexNotFound ( " Index % r not found " % idxname ) <nl> + <nl> + return ksmeta . indexes [ idxname ] <nl> + <nl> + def get _ object _ meta ( self , ks , name ) : <nl> + if name is None : <nl> + if ks and ks in self . conn . metadata . keyspaces : <nl> + return self . conn . metadata . keyspaces [ ks ] <nl> + elif self . current _ keyspace is None : <nl> + raise ObjectNotFound ( " % r not found in keyspaces " % ( ks ) ) <nl> + else : <nl> + name = ks <nl> + ks = self . current _ keyspace <nl> + <nl> + if ks is None : <nl> + ks = self . current _ keyspace <nl> + <nl> + ksmeta = self . get _ keyspace _ meta ( ks ) <nl> + <nl> + if name in ksmeta . tables : <nl> + return ksmeta . tables [ name ] <nl> + elif name in ksmeta . indexes : <nl> + return ksmeta . indexes [ name ] <nl> + <nl> + raise ObjectNotFound ( " % r not found in keyspace % r " % ( name , ks ) ) <nl> + <nl> def get _ usertypes _ meta ( self ) : <nl> data = self . session . execute ( " select * from system . schema _ usertypes " ) <nl> if not data : <nl> @ @ - 1216 , 6 + 1253 , 26 @ @ class Shell ( cmd . Cmd ) : <nl> out . write ( self . get _ table _ meta ( ksname , cfname ) . export _ as _ string ( ) ) <nl> out . write ( " \ n " ) <nl> <nl> + def print _ recreate _ index ( self , ksname , idxname , out ) : <nl> + " " " <nl> + Output CQL commands which should be pasteable back into a CQL session <nl> + to recreate the given index . <nl> + <nl> + Writes output to the given out stream . <nl> + " " " <nl> + out . write ( self . get _ index _ meta ( ksname , idxname ) . export _ as _ string ( ) ) <nl> + out . write ( " \ n " ) <nl> + <nl> + def print _ recreate _ object ( self , ks , name , out ) : <nl> + " " " <nl> + Output CQL commands which should be pasteable back into a CQL session <nl> + to recreate the given object ( ks , table or index ) . <nl> + <nl> + Writes output to the given out stream . <nl> + " " " <nl> + out . write ( self . get _ object _ meta ( ks , name ) . export _ as _ string ( ) ) <nl> + out . write ( " \ n " ) <nl> + <nl> def describe _ keyspaces ( self ) : <nl> print <nl> cmd . Cmd . columnize ( self , protect _ names ( self . get _ keyspace _ names ( ) ) ) <nl> @ @ - 1233 , 6 + 1290 , 16 @ @ class Shell ( cmd . Cmd ) : <nl> self . print _ recreate _ columnfamily ( ksname , cfname , sys . stdout ) <nl> print <nl> <nl> + def describe _ index ( self , ksname , idxname ) : <nl> + print <nl> + self . print _ recreate _ index ( ksname , idxname , sys . stdout ) <nl> + print <nl> + <nl> + def describe _ object ( self , ks , name ) : <nl> + print <nl> + self . print _ recreate _ object ( ks , name , sys . stdout ) <nl> + print <nl> + <nl> def describe _ columnfamilies ( self , ksname ) : <nl> print <nl> if ksname is None : <nl> @ @ - 1328 , 6 + 1395 , 12 @ @ class Shell ( cmd . Cmd ) : <nl> In some cases , as above , there may be table metadata which is not <nl> representable and which will not be shown . <nl> <nl> + DESCRIBE INDEX < indexname > <nl> + <nl> + Output CQL commands that could be used to recreate the given index . <nl> + In some cases , there may be index metadata which is not representable <nl> + and which will not be shown . <nl> + <nl> DESCRIBE CLUSTER <nl> <nl> Output information about the connected Cassandra cluster , such as the <nl> @ @ - 1340 , 6 + 1413 , 12 @ @ class Shell ( cmd . Cmd ) : <nl> Output CQL commands that could be used to recreate the entire ( non - system ) schema . <nl> Works as though " DESCRIBE KEYSPACE k " was invoked for each non - system keyspace <nl> k . Use DESCRIBE FULL SCHEMA to include the system keyspaces . <nl> + <nl> + DESCRIBE < objname > <nl> + <nl> + Output CQL commands that could be used to recreate the entire object schema , <nl> + where object can be either a keyspace or a table or an index ( in this order ) . <nl> + <nl> " " " <nl> what = parsed . matched [ 1 ] [ 1 ] . lower ( ) <nl> if what = = ' keyspaces ' : <nl> @ @ - 1356 , 6 + 1435 , 10 @ @ class Shell ( cmd . Cmd ) : <nl> ks = self . cql _ unprotect _ name ( parsed . get _ binding ( ' ksname ' , None ) ) <nl> cf = self . cql _ unprotect _ name ( parsed . get _ binding ( ' cfname ' ) ) <nl> self . describe _ columnfamily ( ks , cf ) <nl> + elif what = = ' index ' : <nl> + ks = self . cql _ unprotect _ name ( parsed . get _ binding ( ' ksname ' , None ) ) <nl> + idx = self . cql _ unprotect _ name ( parsed . get _ binding ( ' idxname ' , None ) ) <nl> + self . describe _ index ( ks , idx ) <nl> elif what in ( ' columnfamilies ' , ' tables ' ) : <nl> self . describe _ columnfamilies ( self . current _ keyspace ) <nl> elif what = = ' types ' : <nl> @ @ - 1370 , 6 + 1453 , 12 @ @ class Shell ( cmd . Cmd ) : <nl> self . describe _ schema ( False ) <nl> elif what = = ' full ' and parsed . matched [ 2 ] [ 1 ] . lower ( ) = = ' schema ' : <nl> self . describe _ schema ( True ) <nl> + elif what : <nl> + ks = self . cql _ unprotect _ name ( parsed . get _ binding ( ' ksname ' , None ) ) <nl> + name = self . cql _ unprotect _ name ( parsed . get _ binding ( ' cfname ' ) ) <nl> + if not name : <nl> + name = self . cql _ unprotect _ name ( parsed . get _ binding ( ' idxname ' , None ) ) <nl> + self . describe _ object ( ks , name ) <nl> do _ desc = do _ describe <nl> <nl> def do _ copy ( self , parsed ) : <nl> diff - - git a / lib / cassandra - driver - internal - only - 2 . 5 . 1 . zip b / lib / cassandra - driver - internal - only - 2 . 5 . 1 . zip <nl> deleted file mode 100644 <nl> index ee6ace0 . . 0000000 <nl> Binary files a / lib / cassandra - driver - internal - only - 2 . 5 . 1 . zip and / dev / null differ <nl> diff - - git a / lib / cassandra - driver - internal - only - 2 . 6 . 0c1 . zip b / lib / cassandra - driver - internal - only - 2 . 6 . 0c1 . zip <nl> new file mode 100644 <nl> index 0000000 . . 0e77468 <nl> Binary files / dev / null and b / lib / cassandra - driver - internal - only - 2 . 6 . 0c1 . zip differ
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index fded5fc . . 70efc81 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 2 . 1 . 7 
 * Allow JMX over SSL directly from nodetool ( CASSANDRA - 9090 ) 
 * Fix incorrect result for IN queries where column not found ( CASSANDRA - 9540 ) 
 + * Enable describe on indices ( CASSANDRA - 7814 ) 
 * ColumnFamilyStore . selectAndReference may block during compaction ( CASSANDRA - 9637 ) 
 * Fix bug in cardinality check when compacting ( CASSANDRA - 9580 ) 
 * Fix memory leak in Ref due to ConcurrentLinkedQueue . remove ( ) behaviour ( CASSANDRA - 9549 ) 
 diff - - git a / bin / cqlsh b / bin / cqlsh 
 index a4cc5d4 . . 9f872f8 100755 
 - - - a / bin / cqlsh 
 + + + b / bin / cqlsh 
 @ @ - 267 , 11 + 267 , 13 @ @ cqlsh _ extra _ syntax _ rules = r ' ' ' 
 ( " KEYSPACES " 
 | " KEYSPACE " ksname = < keyspaceName > ? 
 | ( " COLUMNFAMILY " | " TABLE " ) cf = < columnFamilyName > 
 + | " INDEX " idx = < indexName > 
 | ( " COLUMNFAMILIES " | " TABLES " ) 
 | " FULL " ? " SCHEMA " 
 | " CLUSTER " 
 | " TYPES " 
 - | " TYPE " ut = < userTypeName > ) 
 + | " TYPE " ut = < userTypeName > 
 + | ( ksname = < keyspaceName > | cf = < columnFamilyName > | idx = < indexName > ) ) 
 ; 
 
 < consistencyCommand > : : = " CONSISTENCY " ( level = < consistencyLevel > ) ? 
 @ @ - 428 , 6 + 430 , 11 @ @ class KeyspaceNotFound ( Exception ) : 
 class ColumnFamilyNotFound ( Exception ) : 
 pass 
 
 + class IndexNotFound ( Exception ) : 
 + pass 
 + 
 + class ObjectNotFound ( Exception ) : 
 + pass 
 
 class VersionNotSupported ( Exception ) : 
 pass 
 @ @ - 738 , 12 + 745 , 10 @ @ class Shell ( cmd . Cmd ) : 
 return map ( str , self . get _ keyspace _ meta ( ksname ) . tables . keys ( ) ) 
 
 def get _ index _ names ( self , ksname = None ) : 
 - idxnames = [ ] 
 - for cfname in self . get _ columnfamily _ names ( ksname = ksname ) : 
 - for col in self . get _ table _ meta ( ksname , cfname ) . columns . values ( ) : 
 - if col . index : 
 - idxnames . append ( col . index . name ) 
 - return idxnames 
 + if ksname is None : 
 + ksname = self . current _ keyspace 
 + 
 + return map ( str , self . get _ keyspace _ meta ( ksname ) . indexes . keys ( ) ) 
 
 def get _ column _ names ( self , ksname , cfname ) : 
 if ksname is None : 
 @ @ - 801 , 6 + 806 , 38 @ @ class Shell ( cmd . Cmd ) : 
 
 return ksmeta . tables [ tablename ] 
 
 + def get _ index _ meta ( self , ksname , idxname ) : 
 + if ksname is None : 
 + ksname = self . current _ keyspace 
 + ksmeta = self . get _ keyspace _ meta ( ksname ) 
 + 
 + if idxname not in ksmeta . indexes : 
 + raise IndexNotFound ( " Index % r not found " % idxname ) 
 + 
 + return ksmeta . indexes [ idxname ] 
 + 
 + def get _ object _ meta ( self , ks , name ) : 
 + if name is None : 
 + if ks and ks in self . conn . metadata . keyspaces : 
 + return self . conn . metadata . keyspaces [ ks ] 
 + elif self . current _ keyspace is None : 
 + raise ObjectNotFound ( " % r not found in keyspaces " % ( ks ) ) 
 + else : 
 + name = ks 
 + ks = self . current _ keyspace 
 + 
 + if ks is None : 
 + ks = self . current _ keyspace 
 + 
 + ksmeta = self . get _ keyspace _ meta ( ks ) 
 + 
 + if name in ksmeta . tables : 
 + return ksmeta . tables [ name ] 
 + elif name in ksmeta . indexes : 
 + return ksmeta . indexes [ name ] 
 + 
 + raise ObjectNotFound ( " % r not found in keyspace % r " % ( name , ks ) ) 
 + 
 def get _ usertypes _ meta ( self ) : 
 data = self . session . execute ( " select * from system . schema _ usertypes " ) 
 if not data : 
 @ @ - 1216 , 6 + 1253 , 26 @ @ class Shell ( cmd . Cmd ) : 
 out . write ( self . get _ table _ meta ( ksname , cfname ) . export _ as _ string ( ) ) 
 out . write ( " \ n " ) 
 
 + def print _ recreate _ index ( self , ksname , idxname , out ) : 
 + " " " 
 + Output CQL commands which should be pasteable back into a CQL session 
 + to recreate the given index . 
 + 
 + Writes output to the given out stream . 
 + " " " 
 + out . write ( self . get _ index _ meta ( ksname , idxname ) . export _ as _ string ( ) ) 
 + out . write ( " \ n " ) 
 + 
 + def print _ recreate _ object ( self , ks , name , out ) : 
 + " " " 
 + Output CQL commands which should be pasteable back into a CQL session 
 + to recreate the given object ( ks , table or index ) . 
 + 
 + Writes output to the given out stream . 
 + " " " 
 + out . write ( self . get _ object _ meta ( ks , name ) . export _ as _ string ( ) ) 
 + out . write ( " \ n " ) 
 + 
 def describe _ keyspaces ( self ) : 
 print 
 cmd . Cmd . columnize ( self , protect _ names ( self . get _ keyspace _ names ( ) ) ) 
 @ @ - 1233 , 6 + 1290 , 16 @ @ class Shell ( cmd . Cmd ) : 
 self . print _ recreate _ columnfamily ( ksname , cfname , sys . stdout ) 
 print 
 
 + def describe _ index ( self , ksname , idxname ) : 
 + print 
 + self . print _ recreate _ index ( ksname , idxname , sys . stdout ) 
 + print 
 + 
 + def describe _ object ( self , ks , name ) : 
 + print 
 + self . print _ recreate _ object ( ks , name , sys . stdout ) 
 + print 
 + 
 def describe _ columnfamilies ( self , ksname ) : 
 print 
 if ksname is None : 
 @ @ - 1328 , 6 + 1395 , 12 @ @ class Shell ( cmd . Cmd ) : 
 In some cases , as above , there may be table metadata which is not 
 representable and which will not be shown . 
 
 + DESCRIBE INDEX < indexname > 
 + 
 + Output CQL commands that could be used to recreate the given index . 
 + In some cases , there may be index metadata which is not representable 
 + and which will not be shown . 
 + 
 DESCRIBE CLUSTER 
 
 Output information about the connected Cassandra cluster , such as the 
 @ @ - 1340 , 6 + 1413 , 12 @ @ class Shell ( cmd . Cmd ) : 
 Output CQL commands that could be used to recreate the entire ( non - system ) schema . 
 Works as though " DESCRIBE KEYSPACE k " was invoked for each non - system keyspace 
 k . Use DESCRIBE FULL SCHEMA to include the system keyspaces . 
 + 
 + DESCRIBE < objname > 
 + 
 + Output CQL commands that could be used to recreate the entire object schema , 
 + where object can be either a keyspace or a table or an index ( in this order ) . 
 + 
 " " " 
 what = parsed . matched [ 1 ] [ 1 ] . lower ( ) 
 if what = = ' keyspaces ' : 
 @ @ - 1356 , 6 + 1435 , 10 @ @ class Shell ( cmd . Cmd ) : 
 ks = self . cql _ unprotect _ name ( parsed . get _ binding ( ' ksname ' , None ) ) 
 cf = self . cql _ unprotect _ name ( parsed . get _ binding ( ' cfname ' ) ) 
 self . describe _ columnfamily ( ks , cf ) 
 + elif what = = ' index ' : 
 + ks = self . cql _ unprotect _ name ( parsed . get _ binding ( ' ksname ' , None ) ) 
 + idx = self . cql _ unprotect _ name ( parsed . get _ binding ( ' idxname ' , None ) ) 
 + self . describe _ index ( ks , idx ) 
 elif what in ( ' columnfamilies ' , ' tables ' ) : 
 self . describe _ columnfamilies ( self . current _ keyspace ) 
 elif what = = ' types ' : 
 @ @ - 1370 , 6 + 1453 , 12 @ @ class Shell ( cmd . Cmd ) : 
 self . describe _ schema ( False ) 
 elif what = = ' full ' and parsed . matched [ 2 ] [ 1 ] . lower ( ) = = ' schema ' : 
 self . describe _ schema ( True ) 
 + elif what : 
 + ks = self . cql _ unprotect _ name ( parsed . get _ binding ( ' ksname ' , None ) ) 
 + name = self . cql _ unprotect _ name ( parsed . get _ binding ( ' cfname ' ) ) 
 + if not name : 
 + name = self . cql _ unprotect _ name ( parsed . get _ binding ( ' idxname ' , None ) ) 
 + self . describe _ object ( ks , name ) 
 do _ desc = do _ describe 
 
 def do _ copy ( self , parsed ) : 
 diff - - git a / lib / cassandra - driver - internal - only - 2 . 5 . 1 . zip b / lib / cassandra - driver - internal - only - 2 . 5 . 1 . zip 
 deleted file mode 100644 
 index ee6ace0 . . 0000000 
 Binary files a / lib / cassandra - driver - internal - only - 2 . 5 . 1 . zip and / dev / null differ 
 diff - - git a / lib / cassandra - driver - internal - only - 2 . 6 . 0c1 . zip b / lib / cassandra - driver - internal - only - 2 . 6 . 0c1 . zip 
 new file mode 100644 
 index 0000000 . . 0e77468 
 Binary files / dev / null and b / lib / cassandra - driver - internal - only - 2 . 6 . 0c1 . zip differ

NEAREST DIFF:
ELIMINATEDSENTENCE
