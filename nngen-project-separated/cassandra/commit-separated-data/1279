BLEU SCORE: 0.04767707020457096

TEST MSG: Save space in WriteCallbackInfo ( CASSANDRA - 9833 )
GENERATED MSG: Fixes ReadMessageTest . testNoCommitLog for test - compression

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / net / WriteCallbackInfo . java b / src / java / org / apache / cassandra / net / WriteCallbackInfo . java <nl> index 582298c . . bf7cc3a 100644 <nl> - - - a / src / java / org / apache / cassandra / net / WriteCallbackInfo . java <nl> + + + b / src / java / org / apache / cassandra / net / WriteCallbackInfo . java <nl> @ @ - 28 , 9 + 28 , 8 @ @ import org . apache . cassandra . service . paxos . Commit ; <nl> <nl> public class WriteCallbackInfo extends CallbackInfo <nl> { <nl> - private final MessageOut sentMessage ; <nl> - private final ConsistencyLevel consistencyLevel ; <nl> - private final boolean allowHints ; <nl> + / / either a Mutation , or a Paxos Commit ( MessageOut ) <nl> + private final Object mutation ; <nl> <nl> public WriteCallbackInfo ( InetAddress target , <nl> IAsyncCallback callback , <nl> @ @ - 41 , 23 + 40 , 32 @ @ public class WriteCallbackInfo extends CallbackInfo <nl> { <nl> super ( target , callback , serializer , true ) ; <nl> assert message ! = null ; <nl> - this . sentMessage = message ; <nl> - this . consistencyLevel = consistencyLevel ; <nl> - this . allowHints = allowHints ; <nl> + this . mutation = shouldHint ( allowHints , message , consistencyLevel ) ; <nl> } <nl> <nl> - Mutation mutation ( ) <nl> + public boolean shouldHint ( ) <nl> { <nl> - return sentMessage . verb = = MessagingService . Verb . PAXOS _ COMMIT <nl> - ? ( ( Commit ) sentMessage . payload ) . makeMutation ( ) <nl> - : ( Mutation ) sentMessage . payload ; <nl> + return mutation ! = null & & StorageProxy . shouldHint ( target ) ; <nl> } <nl> <nl> - public boolean shouldHint ( ) <nl> + public Mutation mutation ( ) <nl> + { <nl> + return getMutation ( mutation ) ; <nl> + } <nl> + <nl> + private static Mutation getMutation ( Object object ) <nl> + { <nl> + assert object instanceof Commit | | object instanceof Mutation : object ; <nl> + return object instanceof Commit ? ( ( Commit ) object ) . makeMutation ( ) <nl> + : ( Mutation ) object ; <nl> + } <nl> + <nl> + private static Object shouldHint ( boolean allowHints , MessageOut sentMessage , ConsistencyLevel consistencyLevel ) <nl> { <nl> return allowHints <nl> - & & sentMessage . verb ! = MessagingService . Verb . COUNTER _ MUTATION <nl> - & & consistencyLevel ! = ConsistencyLevel . ANY <nl> - & & StorageProxy . shouldHint ( target ) ; <nl> + & & sentMessage . verb ! = MessagingService . Verb . COUNTER _ MUTATION <nl> + & & consistencyLevel ! = ConsistencyLevel . ANY <nl> + ? sentMessage . payload : null ; <nl> } <nl> + <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / MockSchema . java b / test / unit / org / apache / cassandra / MockSchema . java <nl> index 6b50e49 . . a406290 100644 <nl> - - - a / test / unit / org / apache / cassandra / MockSchema . java <nl> + + + b / test / unit / org / apache / cassandra / MockSchema . java <nl> @ @ - 142 , 7 + 142 , 7 @ @ public class MockSchema <nl> return new ColumnFamilyStore ( ks , cfname , 0 , metadata , new Directories ( metadata ) , false , false ) ; <nl> } <nl> <nl> - private static CFMetaData newCFMetaData ( String ksname , String cfname ) <nl> + public static CFMetaData newCFMetaData ( String ksname , String cfname ) <nl> { <nl> CFMetaData metadata = CFMetaData . Builder . create ( ksname , cfname ) <nl> . addPartitionKey ( " key " , UTF8Type . instance ) <nl> diff - - git a / test / unit / org / apache / cassandra / net / WriteCallbackInfoTest . java b / test / unit / org / apache / cassandra / net / WriteCallbackInfoTest . java <nl> new file mode 100644 <nl> index 0000000 . . ac726d5 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / net / WriteCallbackInfoTest . java <nl> @ @ - 0 , 0 + 1 , 79 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + package org . apache . cassandra . net ; <nl> + <nl> + import java . net . InetAddress ; <nl> + import java . util . UUID ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import junit . framework . Assert ; <nl> + import org . apache . cassandra . MockSchema ; <nl> + import org . apache . cassandra . db . BufferDecoratedKey ; <nl> + import org . apache . cassandra . db . ConsistencyLevel ; <nl> + import org . apache . cassandra . db . Mutation ; <nl> + import org . apache . cassandra . db . PartitionColumns ; <nl> + import org . apache . cassandra . db . partitions . PartitionUpdate ; <nl> + import org . apache . cassandra . dht . Murmur3Partitioner ; <nl> + import org . apache . cassandra . net . MessagingService . Verb ; <nl> + import org . apache . cassandra . service . paxos . Commit ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + <nl> + public class WriteCallbackInfoTest <nl> + { <nl> + <nl> + @ Test <nl> + public void testShouldHint ( ) <nl> + { <nl> + testShouldHint ( Verb . COUNTER _ MUTATION , ConsistencyLevel . ALL , true , false ) ; <nl> + for ( Verb verb : new Verb [ ] { Verb . PAXOS _ COMMIT , Verb . MUTATION } ) <nl> + { <nl> + testShouldHint ( verb , ConsistencyLevel . ALL , true , true ) ; <nl> + testShouldHint ( verb , ConsistencyLevel . ANY , true , false ) ; <nl> + testShouldHint ( verb , ConsistencyLevel . ALL , false , false ) ; <nl> + } <nl> + } <nl> + <nl> + private void testShouldHint ( Verb verb , ConsistencyLevel cl , boolean allowHints , boolean expectHint ) <nl> + { <nl> + Object payload = verb = = Verb . PAXOS _ COMMIT <nl> + ? new Commit ( UUID . randomUUID ( ) , new PartitionUpdate ( MockSchema . newCFMetaData ( " " , " " ) , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , PartitionColumns . NONE , 1 ) ) <nl> + : new Mutation ( " " , new BufferDecoratedKey ( new Murmur3Partitioner . LongToken ( 0 ) , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; <nl> + <nl> + WriteCallbackInfo wcbi = new WriteCallbackInfo ( InetAddress . getLoopbackAddress ( ) , null , new MessageOut ( verb , payload , null ) , null , cl , allowHints ) ; <nl> + Assert . assertEquals ( expectHint , wcbi . shouldHint ( ) ) ; <nl> + if ( expectHint ) <nl> + { <nl> + Assert . assertNotNull ( wcbi . mutation ( ) ) ; <nl> + } <nl> + else <nl> + { <nl> + boolean fail = false ; <nl> + try <nl> + { <nl> + wcbi . mutation ( ) ; <nl> + } <nl> + catch ( Throwable t ) <nl> + { <nl> + fail = true ; <nl> + } <nl> + Assert . assertTrue ( fail ) ; <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / net / WriteCallbackInfo . java b / src / java / org / apache / cassandra / net / WriteCallbackInfo . java 
 index 582298c . . bf7cc3a 100644 
 - - - a / src / java / org / apache / cassandra / net / WriteCallbackInfo . java 
 + + + b / src / java / org / apache / cassandra / net / WriteCallbackInfo . java 
 @ @ - 28 , 9 + 28 , 8 @ @ import org . apache . cassandra . service . paxos . Commit ; 
 
 public class WriteCallbackInfo extends CallbackInfo 
 { 
 - private final MessageOut sentMessage ; 
 - private final ConsistencyLevel consistencyLevel ; 
 - private final boolean allowHints ; 
 + / / either a Mutation , or a Paxos Commit ( MessageOut ) 
 + private final Object mutation ; 
 
 public WriteCallbackInfo ( InetAddress target , 
 IAsyncCallback callback , 
 @ @ - 41 , 23 + 40 , 32 @ @ public class WriteCallbackInfo extends CallbackInfo 
 { 
 super ( target , callback , serializer , true ) ; 
 assert message ! = null ; 
 - this . sentMessage = message ; 
 - this . consistencyLevel = consistencyLevel ; 
 - this . allowHints = allowHints ; 
 + this . mutation = shouldHint ( allowHints , message , consistencyLevel ) ; 
 } 
 
 - Mutation mutation ( ) 
 + public boolean shouldHint ( ) 
 { 
 - return sentMessage . verb = = MessagingService . Verb . PAXOS _ COMMIT 
 - ? ( ( Commit ) sentMessage . payload ) . makeMutation ( ) 
 - : ( Mutation ) sentMessage . payload ; 
 + return mutation ! = null & & StorageProxy . shouldHint ( target ) ; 
 } 
 
 - public boolean shouldHint ( ) 
 + public Mutation mutation ( ) 
 + { 
 + return getMutation ( mutation ) ; 
 + } 
 + 
 + private static Mutation getMutation ( Object object ) 
 + { 
 + assert object instanceof Commit | | object instanceof Mutation : object ; 
 + return object instanceof Commit ? ( ( Commit ) object ) . makeMutation ( ) 
 + : ( Mutation ) object ; 
 + } 
 + 
 + private static Object shouldHint ( boolean allowHints , MessageOut sentMessage , ConsistencyLevel consistencyLevel ) 
 { 
 return allowHints 
 - & & sentMessage . verb ! = MessagingService . Verb . COUNTER _ MUTATION 
 - & & consistencyLevel ! = ConsistencyLevel . ANY 
 - & & StorageProxy . shouldHint ( target ) ; 
 + & & sentMessage . verb ! = MessagingService . Verb . COUNTER _ MUTATION 
 + & & consistencyLevel ! = ConsistencyLevel . ANY 
 + ? sentMessage . payload : null ; 
 } 
 + 
 } 
 diff - - git a / test / unit / org / apache / cassandra / MockSchema . java b / test / unit / org / apache / cassandra / MockSchema . java 
 index 6b50e49 . . a406290 100644 
 - - - a / test / unit / org / apache / cassandra / MockSchema . java 
 + + + b / test / unit / org / apache / cassandra / MockSchema . java 
 @ @ - 142 , 7 + 142 , 7 @ @ public class MockSchema 
 return new ColumnFamilyStore ( ks , cfname , 0 , metadata , new Directories ( metadata ) , false , false ) ; 
 } 
 
 - private static CFMetaData newCFMetaData ( String ksname , String cfname ) 
 + public static CFMetaData newCFMetaData ( String ksname , String cfname ) 
 { 
 CFMetaData metadata = CFMetaData . Builder . create ( ksname , cfname ) 
 . addPartitionKey ( " key " , UTF8Type . instance ) 
 diff - - git a / test / unit / org / apache / cassandra / net / WriteCallbackInfoTest . java b / test / unit / org / apache / cassandra / net / WriteCallbackInfoTest . java 
 new file mode 100644 
 index 0000000 . . ac726d5 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / net / WriteCallbackInfoTest . java 
 @ @ - 0 , 0 + 1 , 79 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + package org . apache . cassandra . net ; 
 + 
 + import java . net . InetAddress ; 
 + import java . util . UUID ; 
 + 
 + import org . junit . Test ; 
 + 
 + import junit . framework . Assert ; 
 + import org . apache . cassandra . MockSchema ; 
 + import org . apache . cassandra . db . BufferDecoratedKey ; 
 + import org . apache . cassandra . db . ConsistencyLevel ; 
 + import org . apache . cassandra . db . Mutation ; 
 + import org . apache . cassandra . db . PartitionColumns ; 
 + import org . apache . cassandra . db . partitions . PartitionUpdate ; 
 + import org . apache . cassandra . dht . Murmur3Partitioner ; 
 + import org . apache . cassandra . net . MessagingService . Verb ; 
 + import org . apache . cassandra . service . paxos . Commit ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + 
 + public class WriteCallbackInfoTest 
 + { 
 + 
 + @ Test 
 + public void testShouldHint ( ) 
 + { 
 + testShouldHint ( Verb . COUNTER _ MUTATION , ConsistencyLevel . ALL , true , false ) ; 
 + for ( Verb verb : new Verb [ ] { Verb . PAXOS _ COMMIT , Verb . MUTATION } ) 
 + { 
 + testShouldHint ( verb , ConsistencyLevel . ALL , true , true ) ; 
 + testShouldHint ( verb , ConsistencyLevel . ANY , true , false ) ; 
 + testShouldHint ( verb , ConsistencyLevel . ALL , false , false ) ; 
 + } 
 + } 
 + 
 + private void testShouldHint ( Verb verb , ConsistencyLevel cl , boolean allowHints , boolean expectHint ) 
 + { 
 + Object payload = verb = = Verb . PAXOS _ COMMIT 
 + ? new Commit ( UUID . randomUUID ( ) , new PartitionUpdate ( MockSchema . newCFMetaData ( " " , " " ) , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , PartitionColumns . NONE , 1 ) ) 
 + : new Mutation ( " " , new BufferDecoratedKey ( new Murmur3Partitioner . LongToken ( 0 ) , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; 
 + 
 + WriteCallbackInfo wcbi = new WriteCallbackInfo ( InetAddress . getLoopbackAddress ( ) , null , new MessageOut ( verb , payload , null ) , null , cl , allowHints ) ; 
 + Assert . assertEquals ( expectHint , wcbi . shouldHint ( ) ) ; 
 + if ( expectHint ) 
 + { 
 + Assert . assertNotNull ( wcbi . mutation ( ) ) ; 
 + } 
 + else 
 + { 
 + boolean fail = false ; 
 + try 
 + { 
 + wcbi . mutation ( ) ; 
 + } 
 + catch ( Throwable t ) 
 + { 
 + fail = true ; 
 + } 
 + Assert . assertTrue ( fail ) ; 
 + } 
 + } 
 + }

NEAREST DIFF:
ELIMINATEDSENTENCE
