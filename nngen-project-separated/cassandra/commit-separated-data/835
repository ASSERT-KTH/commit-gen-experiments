BLEU SCORE: 0.031251907639724415

TEST MSG: cqlsh COPY FROM : shutdown parent cluster after forking , to avoid corrupting SSL connections
GENERATED MSG: cqlsh : Handle non - ascii chars in error messages

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 619dc61 . . af641e1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 15 <nl> + * cqlsh COPY FROM : shutdown parent cluster after forking , to avoid corrupting SSL connections ( CASSANDRA - 11749 ) <nl> * Updated cqlsh Python driver to fix DESCRIBE problem for legacy tables ( CASSANDRA - 11055 ) <nl> * cqlsh : apply current keyspace to source command ( CASSANDRA - 11152 ) <nl> * Backport CASSANDRA - 11578 ( CASSANDRA - 11750 ) <nl> diff - - git a / pylib / cqlshlib / copyutil . py b / pylib / cqlshlib / copyutil . py <nl> index d68812c . . 0016dfd 100644 <nl> - - - a / pylib / cqlshlib / copyutil . py <nl> + + + b / pylib / cqlshlib / copyutil . py <nl> @ @ - 59 , 6 + 59 , 7 @ @ PROFILE _ ON = False <nl> STRACE _ ON = False <nl> DEBUG = False # This may be set to True when initializing the task <nl> IS _ LINUX = platform . system ( ) = = ' Linux ' <nl> + IS _ WINDOWS = platform . system ( ) = = ' Windows ' <nl> <nl> CopyOptions = namedtuple ( ' CopyOptions ' , ' copy dialect unrecognized ' ) <nl> <nl> @ @ - 421 , 9 + 422 , 13 @ @ class CopyTask ( object ) : <nl> def make _ params ( self ) : <nl> " " " <nl> Return a dictionary of parameters to be used by the worker processes . <nl> - On Windows this dictionary must be pickle - able . <nl> + On Windows this dictionary must be pickle - able , therefore we do not pass the <nl> + parent connection since it may not be pickle - able . Also , on Windows child <nl> + processes are spawned and not forked , and therefore we don ' t need to shutdown <nl> + the parent connection anyway , see CASSANDRA - 11749 for more details . <nl> " " " <nl> shell = self . shell <nl> + <nl> return dict ( ks = self . ks , <nl> table = self . table , <nl> local _ dc = self . local _ dc , <nl> @ @ - 434 , 6 + 439 , 7 @ @ class CopyTask ( object ) : <nl> port = shell . port , <nl> ssl = shell . ssl , <nl> auth _ provider = shell . auth _ provider , <nl> + parent _ cluster = shell . conn if not IS _ WINDOWS else None , <nl> cql _ version = shell . conn . cql _ version , <nl> config _ file = self . config _ file , <nl> protocol _ version = self . protocol _ version , <nl> @ @ - 1072 , 7 + 1078 , 8 @ @ class ImportTask ( CopyTask ) : <nl> self . processes . append ( ImportProcess ( self . update _ params ( params , i ) ) ) <nl> <nl> feeder = FeedingProcess ( self . outmsg . channels [ - 1 ] , self . inmsg . channels [ - 1 ] , <nl> - self . outmsg . channels [ : - 1 ] , self . fname , self . options ) <nl> + self . outmsg . channels [ : - 1 ] , self . fname , self . options , <nl> + self . shell . conn if not IS _ WINDOWS else None ) <nl> self . processes . append ( feeder ) <nl> <nl> self . start _ processes ( ) <nl> @ @ - 1179 , 7 + 1186 , 7 @ @ class FeedingProcess ( mp . Process ) : <nl> " " " <nl> A process that reads from import sources and sends chunks to worker processes . <nl> " " " <nl> - def _ _ init _ _ ( self , inmsg , outmsg , worker _ channels , fname , options ) : <nl> + def _ _ init _ _ ( self , inmsg , outmsg , worker _ channels , fname , options , parent _ cluster ) : <nl> mp . Process . _ _ init _ _ ( self , target = self . run ) <nl> self . inmsg = inmsg <nl> self . outmsg = outmsg <nl> @ @ - 1189 , 6 + 1196 , 15 @ @ class FeedingProcess ( mp . Process ) : <nl> self . ingest _ rate = options . copy [ ' ingestrate ' ] <nl> self . num _ worker _ processes = options . copy [ ' numprocesses ' ] <nl> self . chunk _ id = 0 <nl> + self . parent _ cluster = parent _ cluster <nl> + <nl> + def on _ fork ( self ) : <nl> + " " " <nl> + Release any parent connections after forking , see CASSANDRA - 11749 for details . <nl> + " " " <nl> + if self . parent _ cluster : <nl> + printdebugmsg ( " Closing parent cluster sockets " ) <nl> + self . parent _ cluster . shutdown ( ) <nl> <nl> def run ( self ) : <nl> pr = profile _ on ( ) if PROFILE _ ON else None <nl> @ @ - 1205 , 6 + 1221 , 9 @ @ class FeedingProcess ( mp . Process ) : <nl> here we throttle using the ingest rate in the feeding process because of memory usage concerns . <nl> When finished we send back to the parent process the total number of rows sent . <nl> " " " <nl> + <nl> + self . on _ fork ( ) <nl> + <nl> reader = self . reader <nl> reader . start ( ) <nl> channels = self . worker _ channels <nl> @ @ - 1268 , 6 + 1287 , 7 @ @ class ChildProcess ( mp . Process ) : <nl> self . connect _ timeout = params [ ' connect _ timeout ' ] <nl> self . cql _ version = params [ ' cql _ version ' ] <nl> self . auth _ provider = params [ ' auth _ provider ' ] <nl> + self . parent _ cluster = params [ ' parent _ cluster ' ] <nl> self . ssl = params [ ' ssl ' ] <nl> self . protocol _ version = params [ ' protocol _ version ' ] <nl> self . config _ file = params [ ' config _ file ' ] <nl> @ @ - 1285 , 6 + 1305 , 14 @ @ class ChildProcess ( mp . Process ) : <nl> else : <nl> self . test _ failures = None <nl> <nl> + def on _ fork ( self ) : <nl> + " " " <nl> + Release any parent connections after forking , see CASSANDRA - 11749 for details . <nl> + " " " <nl> + if self . parent _ cluster : <nl> + printdebugmsg ( " Closing parent cluster sockets " ) <nl> + self . parent _ cluster . shutdown ( ) <nl> + <nl> def close ( self ) : <nl> printdebugmsg ( " Closing queues . . . " ) <nl> self . inmsg . close ( ) <nl> @ @ - 1411 , 6 + 1439 , 9 @ @ class ExportProcess ( ChildProcess ) : <nl> we can signal a global error by sending ( None , error ) . <nl> We terminate when the inbound queue is closed . <nl> " " " <nl> + <nl> + self . on _ fork ( ) <nl> + <nl> while True : <nl> if self . num _ requests ( ) > self . max _ requests : <nl> time . sleep ( 0 . 001 ) # 1 millisecond <nl> @ @ - 2059 , 6 + 2090 , 7 @ @ class ImportProcess ( ChildProcess ) : <nl> try : <nl> pr = profile _ on ( ) if PROFILE _ ON else None <nl> <nl> + self . on _ fork ( ) <nl> self . inner _ run ( * self . make _ params ( ) ) <nl> <nl> if pr :
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 619dc61 . . af641e1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 15 
 + * cqlsh COPY FROM : shutdown parent cluster after forking , to avoid corrupting SSL connections ( CASSANDRA - 11749 ) 
 * Updated cqlsh Python driver to fix DESCRIBE problem for legacy tables ( CASSANDRA - 11055 ) 
 * cqlsh : apply current keyspace to source command ( CASSANDRA - 11152 ) 
 * Backport CASSANDRA - 11578 ( CASSANDRA - 11750 ) 
 diff - - git a / pylib / cqlshlib / copyutil . py b / pylib / cqlshlib / copyutil . py 
 index d68812c . . 0016dfd 100644 
 - - - a / pylib / cqlshlib / copyutil . py 
 + + + b / pylib / cqlshlib / copyutil . py 
 @ @ - 59 , 6 + 59 , 7 @ @ PROFILE _ ON = False 
 STRACE _ ON = False 
 DEBUG = False # This may be set to True when initializing the task 
 IS _ LINUX = platform . system ( ) = = ' Linux ' 
 + IS _ WINDOWS = platform . system ( ) = = ' Windows ' 
 
 CopyOptions = namedtuple ( ' CopyOptions ' , ' copy dialect unrecognized ' ) 
 
 @ @ - 421 , 9 + 422 , 13 @ @ class CopyTask ( object ) : 
 def make _ params ( self ) : 
 " " " 
 Return a dictionary of parameters to be used by the worker processes . 
 - On Windows this dictionary must be pickle - able . 
 + On Windows this dictionary must be pickle - able , therefore we do not pass the 
 + parent connection since it may not be pickle - able . Also , on Windows child 
 + processes are spawned and not forked , and therefore we don ' t need to shutdown 
 + the parent connection anyway , see CASSANDRA - 11749 for more details . 
 " " " 
 shell = self . shell 
 + 
 return dict ( ks = self . ks , 
 table = self . table , 
 local _ dc = self . local _ dc , 
 @ @ - 434 , 6 + 439 , 7 @ @ class CopyTask ( object ) : 
 port = shell . port , 
 ssl = shell . ssl , 
 auth _ provider = shell . auth _ provider , 
 + parent _ cluster = shell . conn if not IS _ WINDOWS else None , 
 cql _ version = shell . conn . cql _ version , 
 config _ file = self . config _ file , 
 protocol _ version = self . protocol _ version , 
 @ @ - 1072 , 7 + 1078 , 8 @ @ class ImportTask ( CopyTask ) : 
 self . processes . append ( ImportProcess ( self . update _ params ( params , i ) ) ) 
 
 feeder = FeedingProcess ( self . outmsg . channels [ - 1 ] , self . inmsg . channels [ - 1 ] , 
 - self . outmsg . channels [ : - 1 ] , self . fname , self . options ) 
 + self . outmsg . channels [ : - 1 ] , self . fname , self . options , 
 + self . shell . conn if not IS _ WINDOWS else None ) 
 self . processes . append ( feeder ) 
 
 self . start _ processes ( ) 
 @ @ - 1179 , 7 + 1186 , 7 @ @ class FeedingProcess ( mp . Process ) : 
 " " " 
 A process that reads from import sources and sends chunks to worker processes . 
 " " " 
 - def _ _ init _ _ ( self , inmsg , outmsg , worker _ channels , fname , options ) : 
 + def _ _ init _ _ ( self , inmsg , outmsg , worker _ channels , fname , options , parent _ cluster ) : 
 mp . Process . _ _ init _ _ ( self , target = self . run ) 
 self . inmsg = inmsg 
 self . outmsg = outmsg 
 @ @ - 1189 , 6 + 1196 , 15 @ @ class FeedingProcess ( mp . Process ) : 
 self . ingest _ rate = options . copy [ ' ingestrate ' ] 
 self . num _ worker _ processes = options . copy [ ' numprocesses ' ] 
 self . chunk _ id = 0 
 + self . parent _ cluster = parent _ cluster 
 + 
 + def on _ fork ( self ) : 
 + " " " 
 + Release any parent connections after forking , see CASSANDRA - 11749 for details . 
 + " " " 
 + if self . parent _ cluster : 
 + printdebugmsg ( " Closing parent cluster sockets " ) 
 + self . parent _ cluster . shutdown ( ) 
 
 def run ( self ) : 
 pr = profile _ on ( ) if PROFILE _ ON else None 
 @ @ - 1205 , 6 + 1221 , 9 @ @ class FeedingProcess ( mp . Process ) : 
 here we throttle using the ingest rate in the feeding process because of memory usage concerns . 
 When finished we send back to the parent process the total number of rows sent . 
 " " " 
 + 
 + self . on _ fork ( ) 
 + 
 reader = self . reader 
 reader . start ( ) 
 channels = self . worker _ channels 
 @ @ - 1268 , 6 + 1287 , 7 @ @ class ChildProcess ( mp . Process ) : 
 self . connect _ timeout = params [ ' connect _ timeout ' ] 
 self . cql _ version = params [ ' cql _ version ' ] 
 self . auth _ provider = params [ ' auth _ provider ' ] 
 + self . parent _ cluster = params [ ' parent _ cluster ' ] 
 self . ssl = params [ ' ssl ' ] 
 self . protocol _ version = params [ ' protocol _ version ' ] 
 self . config _ file = params [ ' config _ file ' ] 
 @ @ - 1285 , 6 + 1305 , 14 @ @ class ChildProcess ( mp . Process ) : 
 else : 
 self . test _ failures = None 
 
 + def on _ fork ( self ) : 
 + " " " 
 + Release any parent connections after forking , see CASSANDRA - 11749 for details . 
 + " " " 
 + if self . parent _ cluster : 
 + printdebugmsg ( " Closing parent cluster sockets " ) 
 + self . parent _ cluster . shutdown ( ) 
 + 
 def close ( self ) : 
 printdebugmsg ( " Closing queues . . . " ) 
 self . inmsg . close ( ) 
 @ @ - 1411 , 6 + 1439 , 9 @ @ class ExportProcess ( ChildProcess ) : 
 we can signal a global error by sending ( None , error ) . 
 We terminate when the inbound queue is closed . 
 " " " 
 + 
 + self . on _ fork ( ) 
 + 
 while True : 
 if self . num _ requests ( ) > self . max _ requests : 
 time . sleep ( 0 . 001 ) # 1 millisecond 
 @ @ - 2059 , 6 + 2090 , 7 @ @ class ImportProcess ( ChildProcess ) : 
 try : 
 pr = profile _ on ( ) if PROFILE _ ON else None 
 
 + self . on _ fork ( ) 
 self . inner _ run ( * self . make _ params ( ) ) 
 
 if pr :

NEAREST DIFF:
ELIMINATEDSENTENCE
