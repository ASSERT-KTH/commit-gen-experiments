BLEU SCORE: 0.017272237992167865

TEST MSG: Measure max generation drift against local time instead of previously stored generation for remote host to allow long - running clusters .
GENERATED MSG: Add Google Compute Engine snitch .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 7175953 . . 4bff88c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 13 <nl> + * Fix bad gossip generation seen in long - running clusters ( CASSANDRA - 10969 ) <nl> * Avoid NPE when incremental repair fails ( CASSANDRA - 10909 ) <nl> * Unmark sstables compacting once they are done in cleanup / scrub / upgradesstables ( CASSANDRA - 10829 ) <nl> * Revert CASSANDRA - 10012 and add more logging ( CASSANDRA - 10961 ) <nl> diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index 59ef3cc . . ebdd5bd 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 87 , 8 + 87 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> <nl> public static final long aVeryLongTime = 259200 * 1000 ; / / 3 days <nl> <nl> - / * * Maximimum difference in generation and version values we are willing to accept about a peer * / <nl> - private static final long MAX _ GENERATION _ DIFFERENCE = 86400 * 365 ; <nl> + / / Maximimum difference between generation value and local time we are willing to accept about a peer <nl> + static final int MAX _ GENERATION _ DIFFERENCE = 86400 * 365 ; <nl> private long FatClientTimeout ; <nl> private final Random random = new Random ( ) ; <nl> private final Comparator < InetAddress > inetcomparator = new Comparator < InetAddress > ( ) <nl> @ @ - 1107 , 13 + 1107 , 15 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> { <nl> int localGeneration = localEpStatePtr . getHeartBeatState ( ) . getGeneration ( ) ; <nl> int remoteGeneration = remoteState . getHeartBeatState ( ) . getGeneration ( ) ; <nl> + long localTime = System . currentTimeMillis ( ) / 1000 ; <nl> if ( logger . isTraceEnabled ( ) ) <nl> logger . trace ( ep + " local generation " + localGeneration + " , remote generation " + remoteGeneration ) ; <nl> <nl> - if ( localGeneration ! = 0 & & remoteGeneration > localGeneration + MAX _ GENERATION _ DIFFERENCE ) <nl> + / / We measure generation drift against local time , based on the fact that generation is initialized by time <nl> + if ( remoteGeneration > localTime + MAX _ GENERATION _ DIFFERENCE ) <nl> { <nl> / / assume some peer has corrupted memory and is broadcasting an unbelievable generation about another peer ( or itself ) <nl> - logger . warn ( " received an invalid gossip generation for peer { } ; local generation = { } , received generation = { } " , ep , localGeneration , remoteGeneration ) ; <nl> + logger . warn ( " received an invalid gossip generation for peer { } ; local time = { } , received generation = { } " , ep , localTime , remoteGeneration ) ; <nl> } <nl> else if ( remoteGeneration > localGeneration ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / gms / GossiperTest . java b / test / unit / org / apache / cassandra / gms / GossiperTest . java <nl> new file mode 100644 <nl> index 0000000 . . ad07165 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / gms / GossiperTest . java <nl> @ @ - 0 , 0 + 1 , 93 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . gms ; <nl> + <nl> + import java . net . InetAddress ; <nl> + import java . net . UnknownHostException ; <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + import java . util . UUID ; <nl> + <nl> + import com . google . common . collect . ImmutableMap ; <nl> + import org . junit . After ; <nl> + import org . junit . AfterClass ; <nl> + import org . junit . Before ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . SchemaLoader ; <nl> + import org . apache . cassandra . Util ; <nl> + import org . apache . cassandra . dht . IPartitioner ; <nl> + import org . apache . cassandra . dht . RandomPartitioner ; <nl> + import org . apache . cassandra . dht . Token ; <nl> + import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . locator . TokenMetadata ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + <nl> + public class GossiperTest <nl> + { <nl> + static final IPartitioner partitioner = new RandomPartitioner ( ) ; <nl> + StorageService ss = StorageService . instance ; <nl> + TokenMetadata tmd = StorageService . instance . getTokenMetadata ( ) ; <nl> + ArrayList < Token > endpointTokens = new ArrayList < > ( ) ; <nl> + ArrayList < Token > keyTokens = new ArrayList < > ( ) ; <nl> + List < InetAddress > hosts = new ArrayList < > ( ) ; <nl> + List < UUID > hostIds = new ArrayList < > ( ) ; <nl> + <nl> + @ Before <nl> + public void setup ( ) <nl> + { <nl> + tmd . clearUnsafe ( ) ; <nl> + } ; <nl> + <nl> + @ Test <nl> + public void testLargeGenerationJump ( ) throws UnknownHostException , InterruptedException <nl> + { <nl> + Util . createInitialRing ( ss , partitioner , endpointTokens , keyTokens , hosts , hostIds , 2 ) ; <nl> + InetAddress remoteHostAddress = hosts . get ( 1 ) ; <nl> + <nl> + EndpointState initialRemoteState = Gossiper . instance . getEndpointStateForEndpoint ( remoteHostAddress ) ; <nl> + HeartBeatState initialRemoteHeartBeat = initialRemoteState . getHeartBeatState ( ) ; <nl> + <nl> + / / Util . createInitialRing should have initialized remoteHost ' s HeartBeatState ' s generation to 1 <nl> + assertEquals ( initialRemoteHeartBeat . getGeneration ( ) , 1 ) ; <nl> + <nl> + HeartBeatState proposedRemoteHeartBeat = new HeartBeatState ( initialRemoteHeartBeat . getGeneration ( ) + Gossiper . MAX _ GENERATION _ DIFFERENCE + 1 ) ; <nl> + EndpointState proposedRemoteState = new EndpointState ( proposedRemoteHeartBeat ) ; <nl> + <nl> + Gossiper . instance . applyStateLocally ( ImmutableMap . of ( remoteHostAddress , proposedRemoteState ) ) ; <nl> + <nl> + / / The generation should have been updated because it isn ' t over Gossiper . MAX _ GENERATION _ DIFFERENCE in the future <nl> + HeartBeatState actualRemoteHeartBeat = Gossiper . instance . getEndpointStateForEndpoint ( remoteHostAddress ) . getHeartBeatState ( ) ; <nl> + assertEquals ( proposedRemoteHeartBeat . getGeneration ( ) , actualRemoteHeartBeat . getGeneration ( ) ) ; <nl> + <nl> + / / Propose a generation 10 years in the future - this should be rejected . <nl> + HeartBeatState badProposedRemoteHeartBeat = new HeartBeatState ( ( int ) ( System . currentTimeMillis ( ) / 1000 ) + Gossiper . MAX _ GENERATION _ DIFFERENCE * 10 ) ; <nl> + EndpointState badProposedRemoteState = new EndpointState ( badProposedRemoteHeartBeat ) ; <nl> + <nl> + Gossiper . instance . applyStateLocally ( ImmutableMap . of ( remoteHostAddress , badProposedRemoteState ) ) ; <nl> + <nl> + actualRemoteHeartBeat = Gossiper . instance . getEndpointStateForEndpoint ( remoteHostAddress ) . getHeartBeatState ( ) ; <nl> + <nl> + / / The generation should not have been updated because it is over Gossiper . MAX _ GENERATION _ DIFFERENCE in the future <nl> + assertEquals ( proposedRemoteHeartBeat . getGeneration ( ) , actualRemoteHeartBeat . getGeneration ( ) ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 7175953 . . 4bff88c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 13 
 + * Fix bad gossip generation seen in long - running clusters ( CASSANDRA - 10969 ) 
 * Avoid NPE when incremental repair fails ( CASSANDRA - 10909 ) 
 * Unmark sstables compacting once they are done in cleanup / scrub / upgradesstables ( CASSANDRA - 10829 ) 
 * Revert CASSANDRA - 10012 and add more logging ( CASSANDRA - 10961 ) 
 diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index 59ef3cc . . ebdd5bd 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 87 , 8 + 87 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 
 public static final long aVeryLongTime = 259200 * 1000 ; / / 3 days 
 
 - / * * Maximimum difference in generation and version values we are willing to accept about a peer * / 
 - private static final long MAX _ GENERATION _ DIFFERENCE = 86400 * 365 ; 
 + / / Maximimum difference between generation value and local time we are willing to accept about a peer 
 + static final int MAX _ GENERATION _ DIFFERENCE = 86400 * 365 ; 
 private long FatClientTimeout ; 
 private final Random random = new Random ( ) ; 
 private final Comparator < InetAddress > inetcomparator = new Comparator < InetAddress > ( ) 
 @ @ - 1107 , 13 + 1107 , 15 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 { 
 int localGeneration = localEpStatePtr . getHeartBeatState ( ) . getGeneration ( ) ; 
 int remoteGeneration = remoteState . getHeartBeatState ( ) . getGeneration ( ) ; 
 + long localTime = System . currentTimeMillis ( ) / 1000 ; 
 if ( logger . isTraceEnabled ( ) ) 
 logger . trace ( ep + " local generation " + localGeneration + " , remote generation " + remoteGeneration ) ; 
 
 - if ( localGeneration ! = 0 & & remoteGeneration > localGeneration + MAX _ GENERATION _ DIFFERENCE ) 
 + / / We measure generation drift against local time , based on the fact that generation is initialized by time 
 + if ( remoteGeneration > localTime + MAX _ GENERATION _ DIFFERENCE ) 
 { 
 / / assume some peer has corrupted memory and is broadcasting an unbelievable generation about another peer ( or itself ) 
 - logger . warn ( " received an invalid gossip generation for peer { } ; local generation = { } , received generation = { } " , ep , localGeneration , remoteGeneration ) ; 
 + logger . warn ( " received an invalid gossip generation for peer { } ; local time = { } , received generation = { } " , ep , localTime , remoteGeneration ) ; 
 } 
 else if ( remoteGeneration > localGeneration ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / gms / GossiperTest . java b / test / unit / org / apache / cassandra / gms / GossiperTest . java 
 new file mode 100644 
 index 0000000 . . ad07165 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / gms / GossiperTest . java 
 @ @ - 0 , 0 + 1 , 93 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . gms ; 
 + 
 + import java . net . InetAddress ; 
 + import java . net . UnknownHostException ; 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + import java . util . UUID ; 
 + 
 + import com . google . common . collect . ImmutableMap ; 
 + import org . junit . After ; 
 + import org . junit . AfterClass ; 
 + import org . junit . Before ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . SchemaLoader ; 
 + import org . apache . cassandra . Util ; 
 + import org . apache . cassandra . dht . IPartitioner ; 
 + import org . apache . cassandra . dht . RandomPartitioner ; 
 + import org . apache . cassandra . dht . Token ; 
 + import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . locator . TokenMetadata ; 
 + import org . apache . cassandra . service . StorageService ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + 
 + public class GossiperTest 
 + { 
 + static final IPartitioner partitioner = new RandomPartitioner ( ) ; 
 + StorageService ss = StorageService . instance ; 
 + TokenMetadata tmd = StorageService . instance . getTokenMetadata ( ) ; 
 + ArrayList < Token > endpointTokens = new ArrayList < > ( ) ; 
 + ArrayList < Token > keyTokens = new ArrayList < > ( ) ; 
 + List < InetAddress > hosts = new ArrayList < > ( ) ; 
 + List < UUID > hostIds = new ArrayList < > ( ) ; 
 + 
 + @ Before 
 + public void setup ( ) 
 + { 
 + tmd . clearUnsafe ( ) ; 
 + } ; 
 + 
 + @ Test 
 + public void testLargeGenerationJump ( ) throws UnknownHostException , InterruptedException 
 + { 
 + Util . createInitialRing ( ss , partitioner , endpointTokens , keyTokens , hosts , hostIds , 2 ) ; 
 + InetAddress remoteHostAddress = hosts . get ( 1 ) ; 
 + 
 + EndpointState initialRemoteState = Gossiper . instance . getEndpointStateForEndpoint ( remoteHostAddress ) ; 
 + HeartBeatState initialRemoteHeartBeat = initialRemoteState . getHeartBeatState ( ) ; 
 + 
 + / / Util . createInitialRing should have initialized remoteHost ' s HeartBeatState ' s generation to 1 
 + assertEquals ( initialRemoteHeartBeat . getGeneration ( ) , 1 ) ; 
 + 
 + HeartBeatState proposedRemoteHeartBeat = new HeartBeatState ( initialRemoteHeartBeat . getGeneration ( ) + Gossiper . MAX _ GENERATION _ DIFFERENCE + 1 ) ; 
 + EndpointState proposedRemoteState = new EndpointState ( proposedRemoteHeartBeat ) ; 
 + 
 + Gossiper . instance . applyStateLocally ( ImmutableMap . of ( remoteHostAddress , proposedRemoteState ) ) ; 
 + 
 + / / The generation should have been updated because it isn ' t over Gossiper . MAX _ GENERATION _ DIFFERENCE in the future 
 + HeartBeatState actualRemoteHeartBeat = Gossiper . instance . getEndpointStateForEndpoint ( remoteHostAddress ) . getHeartBeatState ( ) ; 
 + assertEquals ( proposedRemoteHeartBeat . getGeneration ( ) , actualRemoteHeartBeat . getGeneration ( ) ) ; 
 + 
 + / / Propose a generation 10 years in the future - this should be rejected . 
 + HeartBeatState badProposedRemoteHeartBeat = new HeartBeatState ( ( int ) ( System . currentTimeMillis ( ) / 1000 ) + Gossiper . MAX _ GENERATION _ DIFFERENCE * 10 ) ; 
 + EndpointState badProposedRemoteState = new EndpointState ( badProposedRemoteHeartBeat ) ; 
 + 
 + Gossiper . instance . applyStateLocally ( ImmutableMap . of ( remoteHostAddress , badProposedRemoteState ) ) ; 
 + 
 + actualRemoteHeartBeat = Gossiper . instance . getEndpointStateForEndpoint ( remoteHostAddress ) . getHeartBeatState ( ) ; 
 + 
 + / / The generation should not have been updated because it is over Gossiper . MAX _ GENERATION _ DIFFERENCE in the future 
 + assertEquals ( proposedRemoteHeartBeat . getGeneration ( ) , actualRemoteHeartBeat . getGeneration ( ) ) ; 
 + } 
 + }

NEAREST DIFF:
ELIMINATEDSENTENCE
