BLEU SCORE: 0.026279617104084448

TEST MSG: Fix bad merge of CASSANDRA - 6961 from 2 . 0 to 2 . 1
GENERATED MSG: Preload essential gossip states before startup .

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index ec446fb . . 9f8158f 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 645 , 39 + 645 , 10 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> private void prepareToJoin ( ) throws ConfigurationException <nl> { <nl> - joined = true ; <nl> - <nl> - Collection < Token > tokens = null ; <nl> - Map < ApplicationState , VersionedValue > appStates = new HashMap < > ( ) ; <nl> - <nl> - if ( DatabaseDescriptor . getReplaceTokens ( ) . size ( ) > 0 | | DatabaseDescriptor . getReplaceNode ( ) ! = null ) <nl> - throw new RuntimeException ( " Replace method removed ; use cassandra . replace _ address instead " ) ; <nl> - if ( DatabaseDescriptor . isReplacing ( ) ) <nl> - { <nl> - if ( ! DatabaseDescriptor . isAutoBootstrap ( ) ) <nl> - throw new RuntimeException ( " Trying to replace _ address with auto _ bootstrap disabled will not work , check your configuration " ) ; <nl> - tokens = prepareReplacementInfo ( ) ; <nl> - appStates . put ( ApplicationState . STATUS , valueFactory . hibernate ( true ) ) ; <nl> - appStates . put ( ApplicationState . TOKENS , valueFactory . tokens ( tokens ) ) ; <nl> - } <nl> - else if ( shouldBootstrap ( ) & & ! joined ) <nl> + if ( ! joined ) <nl> { <nl> - / / have to start the gossip service before we can see any info on other nodes . this is necessary <nl> - / / for bootstrap to get the load info it needs . <nl> - / / ( we won ' t be part of the storage ring though until we add a counterId to our state , below . ) <nl> - / / Seed the host ID - to - endpoint map with our own ID . <nl> - getTokenMetadata ( ) . updateHostId ( SystemKeyspace . getLocalHostId ( ) , FBUtilities . getBroadcastAddress ( ) ) ; <nl> - appStates . put ( ApplicationState . NET _ VERSION , valueFactory . networkVersion ( ) ) ; <nl> - appStates . put ( ApplicationState . HOST _ ID , valueFactory . hostId ( SystemKeyspace . getLocalHostId ( ) ) ) ; <nl> - appStates . put ( ApplicationState . RPC _ ADDRESS , valueFactory . rpcaddress ( DatabaseDescriptor . getBroadcastRpcAddress ( ) ) ) ; <nl> - appStates . put ( ApplicationState . RELEASE _ VERSION , valueFactory . releaseVersion ( ) ) ; <nl> - logger . info ( " Starting up server gossip " ) ; <nl> - Gossiper . instance . register ( this ) ; <nl> - Gossiper . instance . start ( SystemKeyspace . incrementAndGetGeneration ( ) , appStates ) ; / / needed for node - ring gathering . <nl> - / / gossip snitch infos ( local DC and rack ) <nl> - gossipSnitchInfo ( ) ; <nl> - / / gossip Schema . emptyVersion forcing immediate check for schema updates ( see MigrationManager # maybeScheduleSchemaPull ) <nl> - Schema . instance . updateVersionAndAnnounce ( ) ; / / Ensure we know our own actual Schema UUID in preparation for updates <nl> + Map < ApplicationState , VersionedValue > appStates = new HashMap < > ( ) ; <nl> + <nl> if ( DatabaseDescriptor . isReplacing ( ) & & ! ( Boolean . parseBoolean ( System . getProperty ( " cassandra . join _ ring " , " true " ) ) ) ) <nl> throw new ConfigurationException ( " Cannot set both join _ ring = false and attempt to replace a node " ) ; <nl> if ( DatabaseDescriptor . getReplaceTokens ( ) . size ( ) > 0 | | DatabaseDescriptor . getReplaceNode ( ) ! = null ) <nl> @ @ - 694 , 6 + 665 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> { <nl> checkForEndpointCollision ( ) ; <nl> } <nl> + <nl> / / have to start the gossip service before we can see any info on other nodes . this is necessary <nl> / / for bootstrap to get the load info it needs . <nl> / / ( we won ' t be part of the storage ring though until we add a counterId to our state , below . ) <nl> @ @ - 701 , 7 + 673 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> getTokenMetadata ( ) . updateHostId ( SystemKeyspace . getLocalHostId ( ) , FBUtilities . getBroadcastAddress ( ) ) ; <nl> appStates . put ( ApplicationState . NET _ VERSION , valueFactory . networkVersion ( ) ) ; <nl> appStates . put ( ApplicationState . HOST _ ID , valueFactory . hostId ( SystemKeyspace . getLocalHostId ( ) ) ) ; <nl> - appStates . put ( ApplicationState . RPC _ ADDRESS , valueFactory . rpcaddress ( DatabaseDescriptor . getRpcAddress ( ) ) ) ; <nl> + appStates . put ( ApplicationState . RPC _ ADDRESS , valueFactory . rpcaddress ( DatabaseDescriptor . getBroadcastRpcAddress ( ) ) ) ; <nl> appStates . put ( ApplicationState . RELEASE _ VERSION , valueFactory . releaseVersion ( ) ) ; <nl> logger . info ( " Starting up server gossip " ) ; <nl> Gossiper . instance . register ( this ) ; <nl> @ @ - 711 , 7 + 683 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> / / gossip Schema . emptyVersion forcing immediate check for schema updates ( see MigrationManager # maybeScheduleSchemaPull ) <nl> Schema . instance . updateVersionAndAnnounce ( ) ; / / Ensure we know our own actual Schema UUID in preparation for updates <nl> <nl> - <nl> if ( ! MessagingService . instance ( ) . isListening ( ) ) <nl> MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; <nl> LoadBroadcaster . instance . startBroadcasting ( ) ;
NEAREST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java b / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java <nl> index ef34ac5 . . 282bfc3 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java <nl> @ @ - 118 , 32 + 118 , 6 @ @ public class RoundTripTest <nl> <nl> assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( uuid . toString ( ) ) ) ) ; <nl> assert JdbcTimeUUID . instance . toString ( uuid ) . equals ( uuid . toString ( ) ) ; <nl> - <nl> - TimeZone . setDefault ( TimeZone . getTimeZone ( " America / New _ York " ) ) ; <nl> - Calendar c = Calendar . getInstance ( ) ; <nl> - c . set ( Calendar . YEAR , 2011 ) ; <nl> - c . set ( Calendar . MONTH , Calendar . MARCH ) ; <nl> - c . set ( Calendar . DAY _ OF _ MONTH , 8 ) ; <nl> - c . set ( Calendar . HOUR _ OF _ DAY , 0 ) ; <nl> - c . set ( Calendar . MINUTE , 0 ) ; <nl> - c . set ( Calendar . SECOND , 0 ) ; <nl> - c . set ( Calendar . MILLISECOND , 0 ) ; <nl> - Long ts = new Long ( 1299560400000L ) ; <nl> - assert ts . equals ( c . getTimeInMillis ( ) ) : c . getTimeInMillis ( ) ; <nl> - <nl> - / / create a uuid with a known time . <nl> - uuid = TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( ts . toString ( ) ) ) ; <nl> - assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( uuid . toString ( ) ) ) ) ; <nl> - assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( " 2011 - 03 - 08 00 : 00 " ) ) ) ; <nl> - assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( " 2011 - 03 - 08 00 : 00 : 00 " ) ) ) ; <nl> - assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( " 2011 - 03 - 08 00 : 00 - 0500 " ) ) ) ; <nl> - assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( " 2011 - 03 - 08 00 : 00 : 00 - 0500 " ) ) ) ; <nl> - assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( " 2011 - 03 - 08T00 : 00 " ) ) ) ; <nl> - assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( " 2011 - 03 - 08T00 : 00 - 0500 " ) ) ) ; <nl> - assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( " 2011 - 03 - 08T00 : 00 : 00 " ) ) ) ; <nl> - assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( " 2011 - 03 - 08T00 : 00 : 00 - 0500 " ) ) ) ; <nl> - assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( " 2011 - 03 - 08 " ) ) ) ; <nl> - assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( " 2011 - 03 - 08 - 0500 " ) ) ) ; <nl> } <nl> <nl> @ Test

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index ec446fb . . 9f8158f 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 645 , 39 + 645 , 10 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 private void prepareToJoin ( ) throws ConfigurationException 
 { 
 - joined = true ; 
 - 
 - Collection < Token > tokens = null ; 
 - Map < ApplicationState , VersionedValue > appStates = new HashMap < > ( ) ; 
 - 
 - if ( DatabaseDescriptor . getReplaceTokens ( ) . size ( ) > 0 | | DatabaseDescriptor . getReplaceNode ( ) ! = null ) 
 - throw new RuntimeException ( " Replace method removed ; use cassandra . replace _ address instead " ) ; 
 - if ( DatabaseDescriptor . isReplacing ( ) ) 
 - { 
 - if ( ! DatabaseDescriptor . isAutoBootstrap ( ) ) 
 - throw new RuntimeException ( " Trying to replace _ address with auto _ bootstrap disabled will not work , check your configuration " ) ; 
 - tokens = prepareReplacementInfo ( ) ; 
 - appStates . put ( ApplicationState . STATUS , valueFactory . hibernate ( true ) ) ; 
 - appStates . put ( ApplicationState . TOKENS , valueFactory . tokens ( tokens ) ) ; 
 - } 
 - else if ( shouldBootstrap ( ) & & ! joined ) 
 + if ( ! joined ) 
 { 
 - / / have to start the gossip service before we can see any info on other nodes . this is necessary 
 - / / for bootstrap to get the load info it needs . 
 - / / ( we won ' t be part of the storage ring though until we add a counterId to our state , below . ) 
 - / / Seed the host ID - to - endpoint map with our own ID . 
 - getTokenMetadata ( ) . updateHostId ( SystemKeyspace . getLocalHostId ( ) , FBUtilities . getBroadcastAddress ( ) ) ; 
 - appStates . put ( ApplicationState . NET _ VERSION , valueFactory . networkVersion ( ) ) ; 
 - appStates . put ( ApplicationState . HOST _ ID , valueFactory . hostId ( SystemKeyspace . getLocalHostId ( ) ) ) ; 
 - appStates . put ( ApplicationState . RPC _ ADDRESS , valueFactory . rpcaddress ( DatabaseDescriptor . getBroadcastRpcAddress ( ) ) ) ; 
 - appStates . put ( ApplicationState . RELEASE _ VERSION , valueFactory . releaseVersion ( ) ) ; 
 - logger . info ( " Starting up server gossip " ) ; 
 - Gossiper . instance . register ( this ) ; 
 - Gossiper . instance . start ( SystemKeyspace . incrementAndGetGeneration ( ) , appStates ) ; / / needed for node - ring gathering . 
 - / / gossip snitch infos ( local DC and rack ) 
 - gossipSnitchInfo ( ) ; 
 - / / gossip Schema . emptyVersion forcing immediate check for schema updates ( see MigrationManager # maybeScheduleSchemaPull ) 
 - Schema . instance . updateVersionAndAnnounce ( ) ; / / Ensure we know our own actual Schema UUID in preparation for updates 
 + Map < ApplicationState , VersionedValue > appStates = new HashMap < > ( ) ; 
 + 
 if ( DatabaseDescriptor . isReplacing ( ) & & ! ( Boolean . parseBoolean ( System . getProperty ( " cassandra . join _ ring " , " true " ) ) ) ) 
 throw new ConfigurationException ( " Cannot set both join _ ring = false and attempt to replace a node " ) ; 
 if ( DatabaseDescriptor . getReplaceTokens ( ) . size ( ) > 0 | | DatabaseDescriptor . getReplaceNode ( ) ! = null ) 
 @ @ - 694 , 6 + 665 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 { 
 checkForEndpointCollision ( ) ; 
 } 
 + 
 / / have to start the gossip service before we can see any info on other nodes . this is necessary 
 / / for bootstrap to get the load info it needs . 
 / / ( we won ' t be part of the storage ring though until we add a counterId to our state , below . ) 
 @ @ - 701 , 7 + 673 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 getTokenMetadata ( ) . updateHostId ( SystemKeyspace . getLocalHostId ( ) , FBUtilities . getBroadcastAddress ( ) ) ; 
 appStates . put ( ApplicationState . NET _ VERSION , valueFactory . networkVersion ( ) ) ; 
 appStates . put ( ApplicationState . HOST _ ID , valueFactory . hostId ( SystemKeyspace . getLocalHostId ( ) ) ) ; 
 - appStates . put ( ApplicationState . RPC _ ADDRESS , valueFactory . rpcaddress ( DatabaseDescriptor . getRpcAddress ( ) ) ) ; 
 + appStates . put ( ApplicationState . RPC _ ADDRESS , valueFactory . rpcaddress ( DatabaseDescriptor . getBroadcastRpcAddress ( ) ) ) ; 
 appStates . put ( ApplicationState . RELEASE _ VERSION , valueFactory . releaseVersion ( ) ) ; 
 logger . info ( " Starting up server gossip " ) ; 
 Gossiper . instance . register ( this ) ; 
 @ @ - 711 , 7 + 683 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 / / gossip Schema . emptyVersion forcing immediate check for schema updates ( see MigrationManager # maybeScheduleSchemaPull ) 
 Schema . instance . updateVersionAndAnnounce ( ) ; / / Ensure we know our own actual Schema UUID in preparation for updates 
 
 - 
 if ( ! MessagingService . instance ( ) . isListening ( ) ) 
 MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; 
 LoadBroadcaster . instance . startBroadcasting ( ) ;

NEAREST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java b / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java 
 index ef34ac5 . . 282bfc3 100644 
 - - - a / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java 
 + + + b / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java 
 @ @ - 118 , 32 + 118 , 6 @ @ public class RoundTripTest 
 
 assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( uuid . toString ( ) ) ) ) ; 
 assert JdbcTimeUUID . instance . toString ( uuid ) . equals ( uuid . toString ( ) ) ; 
 - 
 - TimeZone . setDefault ( TimeZone . getTimeZone ( " America / New _ York " ) ) ; 
 - Calendar c = Calendar . getInstance ( ) ; 
 - c . set ( Calendar . YEAR , 2011 ) ; 
 - c . set ( Calendar . MONTH , Calendar . MARCH ) ; 
 - c . set ( Calendar . DAY _ OF _ MONTH , 8 ) ; 
 - c . set ( Calendar . HOUR _ OF _ DAY , 0 ) ; 
 - c . set ( Calendar . MINUTE , 0 ) ; 
 - c . set ( Calendar . SECOND , 0 ) ; 
 - c . set ( Calendar . MILLISECOND , 0 ) ; 
 - Long ts = new Long ( 1299560400000L ) ; 
 - assert ts . equals ( c . getTimeInMillis ( ) ) : c . getTimeInMillis ( ) ; 
 - 
 - / / create a uuid with a known time . 
 - uuid = TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( ts . toString ( ) ) ) ; 
 - assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( uuid . toString ( ) ) ) ) ; 
 - assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( " 2011 - 03 - 08 00 : 00 " ) ) ) ; 
 - assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( " 2011 - 03 - 08 00 : 00 : 00 " ) ) ) ; 
 - assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( " 2011 - 03 - 08 00 : 00 - 0500 " ) ) ) ; 
 - assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( " 2011 - 03 - 08 00 : 00 : 00 - 0500 " ) ) ) ; 
 - assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( " 2011 - 03 - 08T00 : 00 " ) ) ) ; 
 - assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( " 2011 - 03 - 08T00 : 00 - 0500 " ) ) ) ; 
 - assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( " 2011 - 03 - 08T00 : 00 : 00 " ) ) ) ; 
 - assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( " 2011 - 03 - 08T00 : 00 : 00 - 0500 " ) ) ) ; 
 - assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( " 2011 - 03 - 08 " ) ) ) ; 
 - assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( " 2011 - 03 - 08 - 0500 " ) ) ) ; 
 } 
 
 @ Test
