BLEU SCORE: 0.024675789207681903

TEST MSG: Ensure SSTableWriter cleans up properly after failure
GENERATED MSG: add FileUtils . closeQuietly and finally - close blocks

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index c8cf1d4 . . 7aad4c0 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 12 : <nl> + * Ensure SSTableWriter cleans up properly after failure ( CASSANDRA - 8499 ) <nl> * Increase bf true positive count on key cache hit ( CASSANDRA - 8525 ) <nl> * Move MeteredFlusher to its own thread ( CASSANDRA - 8485 ) <nl> * Fix non - distinct results in DISTNCT queries on static columns when <nl> diff - - git a / src / java / org / apache / cassandra / io / compress / CompressedSequentialWriter . java b / src / java / org / apache / cassandra / io / compress / CompressedSequentialWriter . java <nl> index eef5b17 . . 909d822 100644 <nl> - - - a / src / java / org / apache / cassandra / io / compress / CompressedSequentialWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / compress / CompressedSequentialWriter . java <nl> @ @ - 271 , 6 + 271 , 12 @ @ public class CompressedSequentialWriter extends SequentialWriter <nl> } <nl> } <nl> <nl> + public void abort ( ) <nl> + { <nl> + super . abort ( ) ; <nl> + metadataWriter . abort ( ) ; <nl> + } <nl> + <nl> / * * <nl> * Class to hold a mark to the position of the file <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java <nl> index 231778a . . 5b0154b 100644 <nl> - - - a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java <nl> + + + b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java <nl> @ @ - 23 , 6 + 23 , 9 @ @ import java . util . * ; <nl> import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . primitives . Longs ; <nl> <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . db . TypeSizes ; <nl> import org . apache . cassandra . io . FSReadError ; <nl> @ @ - 40 , 6 + 43 , 8 @ @ import org . apache . cassandra . utils . Pair ; <nl> * / <nl> public class CompressionMetadata <nl> { <nl> + private static final Logger logger = LoggerFactory . getLogger ( CompressionMetadata . class ) ; <nl> + <nl> public final long dataLength ; <nl> public final long compressedFileLength ; <nl> public final boolean hasPostCompressionAdlerChecksums ; <nl> @ @ - 375 , 6 + 380 , 18 @ @ public class CompressionMetadata <nl> getChannel ( ) . force ( true ) ; <nl> super . close ( ) ; <nl> } <nl> + <nl> + public void abort ( ) <nl> + { <nl> + try <nl> + { <nl> + super . close ( ) ; <nl> + } <nl> + catch ( Throwable t ) <nl> + { <nl> + logger . warn ( " Suppressed exception while closing CompressionMetadata . Writer for { } " , filePath , t ) ; <nl> + } <nl> + } <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> index afa066d . . 08e5527 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> @ @ - 314 , 8 + 314 , 8 @ @ public class SSTableWriter extends SSTable <nl> public void abort ( ) <nl> { <nl> assert descriptor . temporary ; <nl> - FileUtils . closeQuietly ( iwriter ) ; <nl> - FileUtils . closeQuietly ( dataFile ) ; <nl> + iwriter . abort ( ) ; <nl> + dataFile . abort ( ) ; <nl> <nl> Set < Component > components = SSTable . componentsFor ( descriptor ) ; <nl> try <nl> @ @ - 391 , 6 + 391 , 7 @ @ public class SSTableWriter extends SSTable <nl> } <nl> catch ( IOException e ) <nl> { <nl> + out . abort ( ) ; <nl> throw new FSWriteError ( e , out . getPath ( ) ) ; <nl> } <nl> out . close ( ) ; <nl> @ @ - 498 , 6 + 499 , 12 @ @ public class SSTableWriter extends SSTable <nl> FileUtils . truncate ( indexFile . getPath ( ) , position ) ; <nl> } <nl> <nl> + public void abort ( ) <nl> + { <nl> + indexFile . abort ( ) ; <nl> + bf . close ( ) ; <nl> + } <nl> + <nl> public void mark ( ) <nl> { <nl> mark = indexFile . mark ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / util / SequentialWriter . java b / src / java / org / apache / cassandra / io / util / SequentialWriter . java <nl> index dc95676 . . b980cf1 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / SequentialWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / util / SequentialWriter . java <nl> @ @ - 20 , 6 + 20 , 9 @ @ package org . apache . cassandra . io . util ; <nl> import java . io . * ; <nl> import java . nio . channels . ClosedChannelException ; <nl> <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . io . FSReadError ; <nl> import org . apache . cassandra . io . FSWriteError ; <nl> @ @ - 31 , 6 + 34 , 8 @ @ import org . apache . cassandra . utils . CLibrary ; <nl> * / <nl> public class SequentialWriter extends OutputStream <nl> { <nl> + private static final Logger logger = LoggerFactory . getLogger ( SequentialWriter . class ) ; <nl> + <nl> / / isDirty - true if this . buffer contains any un - synced bytes <nl> protected boolean isDirty = false , syncNeeded = false ; <nl> <nl> @ @ - 385 , 17 + 390 , 31 @ @ public class SequentialWriter extends OutputStream <nl> if ( skipIOCache & & bytesSinceCacheFlush > 0 ) <nl> CLibrary . trySkipCache ( fd , 0 , 0 ) ; <nl> <nl> - try <nl> - { <nl> - out . close ( ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - throw new FSWriteError ( e , getPath ( ) ) ; <nl> - } <nl> + cleanup ( true ) ; <nl> + } <nl> <nl> + public void abort ( ) <nl> + { <nl> + cleanup ( false ) ; <nl> + } <nl> + <nl> + private void cleanup ( boolean throwExceptions ) <nl> + { <nl> FileUtils . closeQuietly ( metadata ) ; <nl> - CLibrary . tryCloseFD ( directoryFD ) ; <nl> + <nl> + try { CLibrary . tryCloseFD ( directoryFD ) ; } <nl> + catch ( Throwable t ) { handle ( t , throwExceptions ) ; } <nl> + <nl> + try { out . close ( ) ; } <nl> + catch ( Throwable t ) { handle ( t , throwExceptions ) ; } <nl> + } <nl> + <nl> + private void handle ( Throwable t , boolean throwExceptions ) <nl> + { <nl> + if ( ! throwExceptions ) <nl> + logger . warn ( " Suppressing exception thrown while aborting writer " , t ) ; <nl> + else <nl> + throw new FSWriteError ( t , getPath ( ) ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java b / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java <nl> index 0886edc . . 2ba4400 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java <nl> + + + b / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java <nl> @ @ - 31 , 7 + 31 , 7 @ @ public class AlwaysPresentFilter implements IFilter <nl> <nl> public void clear ( ) { } <nl> <nl> - public void close ( ) throws IOException { } <nl> + public void close ( ) { } <nl> <nl> public long serializedSize ( ) { return 0 ; } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / utils / BloomFilter . java b / src / java / org / apache / cassandra / utils / BloomFilter . java <nl> index 9fbb38e . . e50a746 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / BloomFilter . java <nl> + + + b / src / java / org / apache / cassandra / utils / BloomFilter . java <nl> @ @ - 112 , 7 + 112 , 7 @ @ public abstract class BloomFilter implements IFilter <nl> bitset . clear ( ) ; <nl> } <nl> <nl> - public void close ( ) throws IOException <nl> + public void close ( ) <nl> { <nl> bitset . close ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / IFilter . java b / src / java / org / apache / cassandra / utils / IFilter . java <nl> index aed5f39 . . f0771c6 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / IFilter . java <nl> + + + b / src / java / org / apache / cassandra / utils / IFilter . java <nl> @ @ - 35 , 4 + 35 , 6 @ @ public interface IFilter extends Closeable <nl> * @ return the amount of memory in bytes used off heap <nl> * / <nl> long offHeapSize ( ) ; <nl> + <nl> + void close ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / obs / IBitSet . java b / src / java / org / apache / cassandra / utils / obs / IBitSet . java <nl> index 47ba492 . . 42db722 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / obs / IBitSet . java <nl> + + + b / src / java / org / apache / cassandra / utils / obs / IBitSet . java <nl> @ @ - 55 , 4 + 55 , 6 @ @ public interface IBitSet extends Closeable <nl> * @ return the amount of memory in bytes used off heap <nl> * / <nl> public long offHeapSize ( ) ; <nl> + <nl> + public void close ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java b / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java <nl> index 5063d80 . . 7d47d14 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java <nl> + + + b / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java <nl> @ @ - 145 , 7 + 145 , 7 @ @ public class OffHeapBitSet implements IBitSet <nl> return new OffHeapBitSet ( memory ) ; <nl> } <nl> <nl> - public void close ( ) throws IOException <nl> + public void close ( ) <nl> { <nl> bytes . free ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java b / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java <nl> index 3e1efce . . b1abe08 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java <nl> + + + b / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java <nl> @ @ - 393 , 7 + 393 , 7 @ @ public class OpenBitSet implements IBitSet <nl> return ( int ) ( ( h > > 32 ) ^ h ) + 0x98761234 ; <nl> } <nl> <nl> - public void close ( ) throws IOException { <nl> + public void close ( ) { <nl> / / noop , let GC do the cleanup . <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / auth / SimpleAuthenticator . java b / src / java / org / apache / cassandra / auth / SimpleAuthenticator . java <nl> index 66c236c . . a8bfc5f 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / SimpleAuthenticator . java <nl> + + + b / src / java / org / apache / cassandra / auth / SimpleAuthenticator . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import java . util . Properties ; <nl> import java . util . Map ; <nl> <nl> import org . apache . cassandra . config . ConfigurationException ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . thrift . AuthenticationException ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> @ @ - 92 , 12 + 93 , 12 @ @ public class SimpleAuthenticator implements IAuthenticator <nl> <nl> boolean authenticated = false ; <nl> <nl> + InputStream in = null ; <nl> try <nl> { <nl> - FileInputStream in = new FileInputStream ( pfilename ) ; <nl> + in = new BufferedInputStream ( new FileInputStream ( pfilename ) ) ; <nl> Properties props = new Properties ( ) ; <nl> props . load ( in ) ; <nl> - in . close ( ) ; <nl> <nl> / / note we keep the message here and for the wrong password exactly the same to prevent attackers from guessing what users are valid <nl> if ( null = = props . getProperty ( username ) ) throw new AuthenticationException ( authenticationErrorMessage ( mode , username ) ) ; <nl> @ @ - 125 , 6 + 126 , 10 @ @ public class SimpleAuthenticator implements IAuthenticator <nl> { <nl> throw new RuntimeException ( " Unexpected authentication problem " , e ) ; <nl> } <nl> + finally <nl> + { <nl> + FileUtils . closeQuietly ( in ) ; <nl> + } <nl> <nl> if ( ! authenticated ) throw new AuthenticationException ( authenticationErrorMessage ( mode , username ) ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index a128cfa . . a1ba4fa 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 266 , 12 + 266 , 13 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> Set < DecoratedKey > keys = new TreeSet < DecoratedKey > ( ) ; <nl> if ( path . exists ( ) ) <nl> { <nl> + ObjectInputStream in = null ; <nl> try <nl> { <nl> long start = System . currentTimeMillis ( ) ; <nl> <nl> logger . info ( String . format ( " reading saved cache % s " , path ) ) ; <nl> - ObjectInputStream in = new ObjectInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) ) ; <nl> + in = new ObjectInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) ) ; <nl> while ( in . available ( ) > 0 ) <nl> { <nl> int size = in . readInt ( ) ; <nl> @ @ - 279 , 7 + 280 , 6 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> in . readFully ( bytes ) ; <nl> keys . add ( StorageService . getPartitioner ( ) . decorateKey ( ByteBuffer . wrap ( bytes ) ) ) ; <nl> } <nl> - in . close ( ) ; <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( String . format ( " completed reading ( % d ms ; % d keys ) saved cache % s " , <nl> System . currentTimeMillis ( ) - start , keys . size ( ) , path ) ) ; <nl> @ @ - 288 , 6 + 288 , 10 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> logger . warn ( String . format ( " error reading saved cache % s " , path . getAbsolutePath ( ) ) , ioe ) ; <nl> } <nl> + finally <nl> + { <nl> + FileUtils . closeQuietly ( in ) ; <nl> + } <nl> } <nl> return keys ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java <nl> index 8e6ced5 . . 1e4e403 100644 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java <nl> @ @ - 39 , 6 + 39 , 7 @ @ import org . apache . cassandra . io . sstable . IndexHelper ; <nl> import org . apache . cassandra . io . sstable . SSTableReader ; <nl> import org . apache . cassandra . io . util . FileDataInput ; <nl> import org . apache . cassandra . io . util . FileMark ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . utils . BloomFilter ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . slf4j . Logger ; <nl> @ @ - 78 , 14 + 79 , 7 @ @ public class SSTableNamesIterator extends SimpleAbstractColumnIterator implement <nl> } <nl> finally <nl> { <nl> - try <nl> - { <nl> - file . close ( ) ; <nl> - } <nl> - catch ( IOException ioe ) <nl> - { <nl> - logger . warn ( " error closing " + file . getPath ( ) ) ; <nl> - } <nl> + FileUtils . closeQuietly ( file ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> index 553c10e . . ff62aec 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> @ @ - 339 , 7 + 339 , 7 @ @ public class CommitLog <nl> } <nl> finally <nl> { <nl> - reader . close ( ) ; <nl> + FileUtils . closeQuietly ( reader ) ; <nl> logger . info ( " Finished reading " + file ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogHeader . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogHeader . java <nl> index 3efdc99 . . 538cbb9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogHeader . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogHeader . java <nl> @ @ - 25 , 8 + 25 , 8 @ @ import java . util . Map ; <nl> import java . util . zip . CRC32 ; <nl> import java . util . zip . Checksum ; <nl> <nl> - import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . io . ICompactSerializer2 ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> <nl> public class CommitLogHeader <nl> { <nl> @ @ - 132 , 13 + 132 , 12 @ @ public class CommitLogHeader <nl> DataInputStream reader = null ; <nl> try <nl> { <nl> - reader = new DataInputStream ( new FileInputStream ( headerFile ) ) ; <nl> + reader = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( headerFile ) ) ) ; <nl> return serializer . deserialize ( reader ) ; <nl> } <nl> finally <nl> { <nl> - if ( reader ! = null ) <nl> - reader . close ( ) ; <nl> + FileUtils . closeQuietly ( reader ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> index e1212b4 . . 1c7d4dc 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> @ @ - 18 , 10 + 18 , 12 @ @ <nl> <nl> package org . apache . cassandra . gms ; <nl> <nl> + import java . io . BufferedOutputStream ; <nl> import java . io . File ; <nl> import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> import java . io . IOError ; <nl> + import java . io . OutputStream ; <nl> import java . lang . management . ManagementFactory ; <nl> import java . util . * ; <nl> import javax . management . MBeanServer ; <nl> @ @ - 31 , 6 + 33 , 7 @ @ import org . apache . commons . lang . StringUtils ; <nl> <nl> import java . net . InetAddress ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . BoundedStatsDeque ; <nl> import org . slf4j . Logger ; <nl> @ @ - 83 , 17 + 86 , 21 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean <nl> * / <nl> public void dumpInterArrivalTimes ( ) <nl> { <nl> + OutputStream os = null ; <nl> try <nl> { <nl> File file = File . createTempFile ( " failuredetector - " , " . dat " ) ; <nl> - FileOutputStream fos = new FileOutputStream ( file , true ) ; <nl> - fos . write ( toString ( ) . getBytes ( ) ) ; <nl> - fos . close ( ) ; <nl> + os = new BufferedOutputStream ( new FileOutputStream ( file , true ) ) ; <nl> + os . write ( toString ( ) . getBytes ( ) ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> throw new IOError ( e ) ; <nl> } <nl> + finally <nl> + { <nl> + FileUtils . closeQuietly ( os ) ; <nl> + } <nl> } <nl> <nl> public void setPhiConvictThreshold ( int phi ) <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> index a697b89 . . d3d3ac0 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> <nl> package org . apache . cassandra . io . sstable ; <nl> <nl> + import java . io . BufferedInputStream ; <nl> import java . io . DataInput ; <nl> import java . io . DataInputStream ; <nl> import java . io . File ; <nl> @ @ - 53 , 6 + 54 , 7 @ @ import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . io . ICompactSerializer2 ; <nl> import org . apache . cassandra . io . util . BufferedRandomAccessFile ; <nl> import org . apache . cassandra . io . util . FileDataInput ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . io . util . SegmentedFile ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . * ; <nl> @ @ - 174 , 11 + 176 , 18 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> File statsFile = new File ( descriptor . filenameFor ( SSTable . COMPONENT _ STATS ) ) ; <nl> if ( statsFile . exists ( ) ) <nl> { <nl> - logger . debug ( " Load statistics for { } " , descriptor ) ; <nl> - DataInputStream dis = new DataInputStream ( new FileInputStream ( statsFile ) ) ; <nl> - rowSizes = EstimatedHistogram . serializer . deserialize ( dis ) ; <nl> - columnCounts = EstimatedHistogram . serializer . deserialize ( dis ) ; <nl> - dis . close ( ) ; <nl> + DataInputStream dis = null ; <nl> + try <nl> + { <nl> + logger . debug ( " Load statistics for { } " , descriptor ) ; <nl> + dis = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( statsFile ) ) ) ; <nl> + rowSizes = EstimatedHistogram . serializer . deserialize ( dis ) ; <nl> + columnCounts = EstimatedHistogram . serializer . deserialize ( dis ) ; <nl> + } <nl> + finally <nl> + { <nl> + FileUtils . closeQuietly ( dis ) ; <nl> + } <nl> } <nl> else <nl> { <nl> @ @ - 253 , 14 + 262 , 15 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> <nl> void loadBloomFilter ( ) throws IOException <nl> { <nl> - DataInputStream stream = new DataInputStream ( new FileInputStream ( descriptor . filenameFor ( Component . FILTER ) ) ) ; <nl> + DataInputStream stream = null ; <nl> try <nl> { <nl> + stream = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( descriptor . filenameFor ( Component . FILTER ) ) ) ) ; <nl> bf = BloomFilter . serializer ( ) . deserialize ( stream ) ; <nl> } <nl> finally <nl> { <nl> - stream . close ( ) ; <nl> + FileUtils . closeQuietly ( stream ) ; <nl> } <nl> } <nl> <nl> @ @ - 316 , 7 + 326 , 7 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> } <nl> finally <nl> { <nl> - input . close ( ) ; <nl> + FileUtils . closeQuietly ( input ) ; <nl> } <nl> <nl> / / finalize the state of the reader <nl> @ @ - 497 , 14 + 507 , 7 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> } <nl> finally <nl> { <nl> - try <nl> - { <nl> - input . close ( ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - logger . error ( " error closing file " , e ) ; <nl> - } <nl> + FileUtils . closeQuietly ( input ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java b / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java <nl> index 6090030 . . cb04c31 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java <nl> @ @ - 37 , 7 + 37 , 9 @ @ import org . apache . cassandra . cache . JMXInstrumentedCache ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . ColumnFamily ; <nl> import org . apache . cassandra . db . DecoratedKey ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . utils . Pair ; <nl> + <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 75 , 19 + 77 , 29 @ @ public class SSTableTracker implements Iterable < SSTableReader > <nl> logger . info ( " saving " + msgSuffix ) ; <nl> int count = 0 ; <nl> File tmpFile = File . createTempFile ( savedCachePath . getName ( ) , null , savedCachePath . getParentFile ( ) ) ; <nl> - FileOutputStream fout = new FileOutputStream ( tmpFile ) ; <nl> - ObjectOutputStream out = new ObjectOutputStream ( new BufferedOutputStream ( fout ) ) ; <nl> - FileDescriptor fd = fout . getFD ( ) ; <nl> - for ( K key : cache . getKeySet ( ) ) <nl> + <nl> + FileOutputStream fout = null ; <nl> + ObjectOutputStream out = null ; <nl> + try <nl> + { <nl> + fout = new FileOutputStream ( tmpFile ) ; <nl> + out = new ObjectOutputStream ( new BufferedOutputStream ( fout ) ) ; <nl> + FileDescriptor fd = fout . getFD ( ) ; <nl> + for ( K key : cache . getKeySet ( ) ) <nl> + { <nl> + ByteBuffer bytes = converter . apply ( key ) ; <nl> + out . writeInt ( bytes . remaining ( ) ) ; <nl> + out . write ( bytes . array ( ) , bytes . position ( ) + bytes . arrayOffset ( ) , bytes . remaining ( ) ) ; <nl> + + + count ; <nl> + } <nl> + out . flush ( ) ; <nl> + fd . sync ( ) ; <nl> + } <nl> + finally <nl> { <nl> - ByteBuffer bytes = converter . apply ( key ) ; <nl> - out . writeInt ( bytes . remaining ( ) ) ; <nl> - out . write ( bytes . array ( ) , bytes . position ( ) + bytes . arrayOffset ( ) , bytes . remaining ( ) ) ; <nl> - + + count ; <nl> + FileUtils . closeQuietly ( out ) ; <nl> + FileUtils . closeQuietly ( fout ) ; <nl> } <nl> - out . flush ( ) ; <nl> - fd . sync ( ) ; <nl> - out . close ( ) ; <nl> if ( ! tmpFile . renameTo ( savedCachePath ) ) <nl> throw new IOException ( " Unable to rename cache to " + savedCachePath ) ; <nl> if ( logger . isDebugEnabled ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / io / util / FileUtils . java b / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> index 42bc06a . . 6bd8537 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> + + + b / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> @ @ - 18 , 14 + 18 , 12 @ @ <nl> <nl> package org . apache . cassandra . io . util ; <nl> <nl> - import java . io . File ; <nl> - import java . io . FileNotFoundException ; <nl> - import java . io . IOException ; <nl> - import java . io . RandomAccessFile ; <nl> + import java . io . * ; <nl> import java . text . DecimalFormat ; <nl> import java . util . Comparator ; <nl> import java . util . List ; <nl> <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 85 , 6 + 83 , 19 @ @ public class FileUtils <nl> } <nl> } <nl> <nl> + public static void closeQuietly ( Closeable c ) <nl> + { <nl> + try <nl> + { <nl> + if ( c ! = null ) <nl> + c . close ( ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + logger _ . warn ( " Failed closing stream " , e ) ; <nl> + } <nl> + } <nl> + <nl> public static class FileComparator implements Comparator < File > <nl> { <nl> public int compare ( File f , File f2 ) <nl> diff - - git a / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java b / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java <nl> index 693d850 . . 7b58802 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java <nl> + + + b / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java <nl> @ @ - 173 , 14 + 173 , 7 @ @ public class MmappedSegmentedFile extends SegmentedFile <nl> } <nl> finally <nl> { <nl> - try <nl> - { <nl> - if ( raf ! = null ) raf . close ( ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - throw new IOError ( e ) ; <nl> - } <nl> + FileUtils . closeQuietly ( raf ) ; <nl> } <nl> return segments ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java <nl> index cedb5fa . . 9982e54 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java <nl> + + + b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java <nl> @ @ - 18 , 22 + 18 , 24 @ @ <nl> <nl> package org . apache . cassandra . locator ; <nl> <nl> + import java . io . BufferedReader ; <nl> import java . io . FileReader ; <nl> import java . io . IOException ; <nl> + import java . io . Reader ; <nl> import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> import java . util . Properties ; <nl> <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> - <nl> import org . apache . cassandra . config . ConfigurationException ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . ResourceWatcher ; <nl> import org . apache . cassandra . utils . WrappedRunnable ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> <nl> / * * <nl> * Used to determine if two IP ' s are in the same datacenter or on the same rack . <nl> @ @ - 112 , 14 + 114 , 20 @ @ public class PropertyFileSnitch extends AbstractNetworkTopologySnitch <nl> <nl> String rackPropertyFilename = FBUtilities . resourceToFile ( RACK _ PROPERTY _ FILENAME ) ; <nl> Properties properties = new Properties ( ) ; <nl> + Reader reader = null ; <nl> try <nl> { <nl> - properties . load ( new FileReader ( rackPropertyFilename ) ) ; <nl> + reader = new BufferedReader ( new FileReader ( rackPropertyFilename ) ) ; <nl> + properties . load ( reader ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> throw new ConfigurationException ( " Unable to read " + RACK _ PROPERTY _ FILENAME , e ) ; <nl> } <nl> + finally <nl> + { <nl> + FileUtils . closeQuietly ( reader ) ; <nl> + } <nl> <nl> for ( Map . Entry < Object , Object > entry : properties . entrySet ( ) ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / streaming / FileStreamTask . java b / src / java / org / apache / cassandra / streaming / FileStreamTask . java <nl> index 647fd4a . . e4d32c5 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / FileStreamTask . java <nl> + + + b / src / java / org / apache / cassandra / streaming / FileStreamTask . java <nl> @ @ - 25 , 7 + 25 , 7 @ @ import java . nio . ByteBuffer ; <nl> import java . nio . channels . FileChannel ; <nl> import java . nio . channels . SocketChannel ; <nl> <nl> - import org . apache . cassandra . streaming . StreamHeader ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 35 , 6 + 35 , 7 @ @ import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . utils . Pair ; <nl> import org . apache . cassandra . utils . WrappedRunnable ; <nl> <nl> + <nl> public class FileStreamTask extends WrappedRunnable <nl> { <nl> private static Logger logger = LoggerFactory . getLogger ( FileStreamTask . class ) ; <nl> @ @ - 109 , 14 + 110 , 7 @ @ public class FileStreamTask extends WrappedRunnable <nl> } <nl> finally <nl> { <nl> - try <nl> - { <nl> - raf . close ( ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - throw new AssertionError ( e ) ; <nl> - } <nl> + FileUtils . closeQuietly ( raf ) ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index c8cf1d4 . . 7aad4c0 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 12 : 
 + * Ensure SSTableWriter cleans up properly after failure ( CASSANDRA - 8499 ) 
 * Increase bf true positive count on key cache hit ( CASSANDRA - 8525 ) 
 * Move MeteredFlusher to its own thread ( CASSANDRA - 8485 ) 
 * Fix non - distinct results in DISTNCT queries on static columns when 
 diff - - git a / src / java / org / apache / cassandra / io / compress / CompressedSequentialWriter . java b / src / java / org / apache / cassandra / io / compress / CompressedSequentialWriter . java 
 index eef5b17 . . 909d822 100644 
 - - - a / src / java / org / apache / cassandra / io / compress / CompressedSequentialWriter . java 
 + + + b / src / java / org / apache / cassandra / io / compress / CompressedSequentialWriter . java 
 @ @ - 271 , 6 + 271 , 12 @ @ public class CompressedSequentialWriter extends SequentialWriter 
 } 
 } 
 
 + public void abort ( ) 
 + { 
 + super . abort ( ) ; 
 + metadataWriter . abort ( ) ; 
 + } 
 + 
 / * * 
 * Class to hold a mark to the position of the file 
 * / 
 diff - - git a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java 
 index 231778a . . 5b0154b 100644 
 - - - a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java 
 + + + b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java 
 @ @ - 23 , 6 + 23 , 9 @ @ import java . util . * ; 
 import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . primitives . Longs ; 
 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . db . TypeSizes ; 
 import org . apache . cassandra . io . FSReadError ; 
 @ @ - 40 , 6 + 43 , 8 @ @ import org . apache . cassandra . utils . Pair ; 
 * / 
 public class CompressionMetadata 
 { 
 + private static final Logger logger = LoggerFactory . getLogger ( CompressionMetadata . class ) ; 
 + 
 public final long dataLength ; 
 public final long compressedFileLength ; 
 public final boolean hasPostCompressionAdlerChecksums ; 
 @ @ - 375 , 6 + 380 , 18 @ @ public class CompressionMetadata 
 getChannel ( ) . force ( true ) ; 
 super . close ( ) ; 
 } 
 + 
 + public void abort ( ) 
 + { 
 + try 
 + { 
 + super . close ( ) ; 
 + } 
 + catch ( Throwable t ) 
 + { 
 + logger . warn ( " Suppressed exception while closing CompressionMetadata . Writer for { } " , filePath , t ) ; 
 + } 
 + } 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 index afa066d . . 08e5527 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 @ @ - 314 , 8 + 314 , 8 @ @ public class SSTableWriter extends SSTable 
 public void abort ( ) 
 { 
 assert descriptor . temporary ; 
 - FileUtils . closeQuietly ( iwriter ) ; 
 - FileUtils . closeQuietly ( dataFile ) ; 
 + iwriter . abort ( ) ; 
 + dataFile . abort ( ) ; 
 
 Set < Component > components = SSTable . componentsFor ( descriptor ) ; 
 try 
 @ @ - 391 , 6 + 391 , 7 @ @ public class SSTableWriter extends SSTable 
 } 
 catch ( IOException e ) 
 { 
 + out . abort ( ) ; 
 throw new FSWriteError ( e , out . getPath ( ) ) ; 
 } 
 out . close ( ) ; 
 @ @ - 498 , 6 + 499 , 12 @ @ public class SSTableWriter extends SSTable 
 FileUtils . truncate ( indexFile . getPath ( ) , position ) ; 
 } 
 
 + public void abort ( ) 
 + { 
 + indexFile . abort ( ) ; 
 + bf . close ( ) ; 
 + } 
 + 
 public void mark ( ) 
 { 
 mark = indexFile . mark ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / util / SequentialWriter . java b / src / java / org / apache / cassandra / io / util / SequentialWriter . java 
 index dc95676 . . b980cf1 100644 
 - - - a / src / java / org / apache / cassandra / io / util / SequentialWriter . java 
 + + + b / src / java / org / apache / cassandra / io / util / SequentialWriter . java 
 @ @ - 20 , 6 + 20 , 9 @ @ package org . apache . cassandra . io . util ; 
 import java . io . * ; 
 import java . nio . channels . ClosedChannelException ; 
 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . io . FSReadError ; 
 import org . apache . cassandra . io . FSWriteError ; 
 @ @ - 31 , 6 + 34 , 8 @ @ import org . apache . cassandra . utils . CLibrary ; 
 * / 
 public class SequentialWriter extends OutputStream 
 { 
 + private static final Logger logger = LoggerFactory . getLogger ( SequentialWriter . class ) ; 
 + 
 / / isDirty - true if this . buffer contains any un - synced bytes 
 protected boolean isDirty = false , syncNeeded = false ; 
 
 @ @ - 385 , 17 + 390 , 31 @ @ public class SequentialWriter extends OutputStream 
 if ( skipIOCache & & bytesSinceCacheFlush > 0 ) 
 CLibrary . trySkipCache ( fd , 0 , 0 ) ; 
 
 - try 
 - { 
 - out . close ( ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - throw new FSWriteError ( e , getPath ( ) ) ; 
 - } 
 + cleanup ( true ) ; 
 + } 
 
 + public void abort ( ) 
 + { 
 + cleanup ( false ) ; 
 + } 
 + 
 + private void cleanup ( boolean throwExceptions ) 
 + { 
 FileUtils . closeQuietly ( metadata ) ; 
 - CLibrary . tryCloseFD ( directoryFD ) ; 
 + 
 + try { CLibrary . tryCloseFD ( directoryFD ) ; } 
 + catch ( Throwable t ) { handle ( t , throwExceptions ) ; } 
 + 
 + try { out . close ( ) ; } 
 + catch ( Throwable t ) { handle ( t , throwExceptions ) ; } 
 + } 
 + 
 + private void handle ( Throwable t , boolean throwExceptions ) 
 + { 
 + if ( ! throwExceptions ) 
 + logger . warn ( " Suppressing exception thrown while aborting writer " , t ) ; 
 + else 
 + throw new FSWriteError ( t , getPath ( ) ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java b / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java 
 index 0886edc . . 2ba4400 100644 
 - - - a / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java 
 + + + b / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java 
 @ @ - 31 , 7 + 31 , 7 @ @ public class AlwaysPresentFilter implements IFilter 
 
 public void clear ( ) { } 
 
 - public void close ( ) throws IOException { } 
 + public void close ( ) { } 
 
 public long serializedSize ( ) { return 0 ; } 
 
 diff - - git a / src / java / org / apache / cassandra / utils / BloomFilter . java b / src / java / org / apache / cassandra / utils / BloomFilter . java 
 index 9fbb38e . . e50a746 100644 
 - - - a / src / java / org / apache / cassandra / utils / BloomFilter . java 
 + + + b / src / java / org / apache / cassandra / utils / BloomFilter . java 
 @ @ - 112 , 7 + 112 , 7 @ @ public abstract class BloomFilter implements IFilter 
 bitset . clear ( ) ; 
 } 
 
 - public void close ( ) throws IOException 
 + public void close ( ) 
 { 
 bitset . close ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / IFilter . java b / src / java / org / apache / cassandra / utils / IFilter . java 
 index aed5f39 . . f0771c6 100644 
 - - - a / src / java / org / apache / cassandra / utils / IFilter . java 
 + + + b / src / java / org / apache / cassandra / utils / IFilter . java 
 @ @ - 35 , 4 + 35 , 6 @ @ public interface IFilter extends Closeable 
 * @ return the amount of memory in bytes used off heap 
 * / 
 long offHeapSize ( ) ; 
 + 
 + void close ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / obs / IBitSet . java b / src / java / org / apache / cassandra / utils / obs / IBitSet . java 
 index 47ba492 . . 42db722 100644 
 - - - a / src / java / org / apache / cassandra / utils / obs / IBitSet . java 
 + + + b / src / java / org / apache / cassandra / utils / obs / IBitSet . java 
 @ @ - 55 , 4 + 55 , 6 @ @ public interface IBitSet extends Closeable 
 * @ return the amount of memory in bytes used off heap 
 * / 
 public long offHeapSize ( ) ; 
 + 
 + public void close ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java b / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java 
 index 5063d80 . . 7d47d14 100644 
 - - - a / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java 
 + + + b / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java 
 @ @ - 145 , 7 + 145 , 7 @ @ public class OffHeapBitSet implements IBitSet 
 return new OffHeapBitSet ( memory ) ; 
 } 
 
 - public void close ( ) throws IOException 
 + public void close ( ) 
 { 
 bytes . free ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java b / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java 
 index 3e1efce . . b1abe08 100644 
 - - - a / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java 
 + + + b / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java 
 @ @ - 393 , 7 + 393 , 7 @ @ public class OpenBitSet implements IBitSet 
 return ( int ) ( ( h > > 32 ) ^ h ) + 0x98761234 ; 
 } 
 
 - public void close ( ) throws IOException { 
 + public void close ( ) { 
 / / noop , let GC do the cleanup . 
 } 


NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / auth / SimpleAuthenticator . java b / src / java / org / apache / cassandra / auth / SimpleAuthenticator . java 
 index 66c236c . . a8bfc5f 100644 
 - - - a / src / java / org / apache / cassandra / auth / SimpleAuthenticator . java 
 + + + b / src / java / org / apache / cassandra / auth / SimpleAuthenticator . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import java . util . Properties ; 
 import java . util . Map ; 
 
 import org . apache . cassandra . config . ConfigurationException ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . thrift . AuthenticationException ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 @ @ - 92 , 12 + 93 , 12 @ @ public class SimpleAuthenticator implements IAuthenticator 
 
 boolean authenticated = false ; 
 
 + InputStream in = null ; 
 try 
 { 
 - FileInputStream in = new FileInputStream ( pfilename ) ; 
 + in = new BufferedInputStream ( new FileInputStream ( pfilename ) ) ; 
 Properties props = new Properties ( ) ; 
 props . load ( in ) ; 
 - in . close ( ) ; 
 
 / / note we keep the message here and for the wrong password exactly the same to prevent attackers from guessing what users are valid 
 if ( null = = props . getProperty ( username ) ) throw new AuthenticationException ( authenticationErrorMessage ( mode , username ) ) ; 
 @ @ - 125 , 6 + 126 , 10 @ @ public class SimpleAuthenticator implements IAuthenticator 
 { 
 throw new RuntimeException ( " Unexpected authentication problem " , e ) ; 
 } 
 + finally 
 + { 
 + FileUtils . closeQuietly ( in ) ; 
 + } 
 
 if ( ! authenticated ) throw new AuthenticationException ( authenticationErrorMessage ( mode , username ) ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index a128cfa . . a1ba4fa 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 266 , 12 + 266 , 13 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 Set < DecoratedKey > keys = new TreeSet < DecoratedKey > ( ) ; 
 if ( path . exists ( ) ) 
 { 
 + ObjectInputStream in = null ; 
 try 
 { 
 long start = System . currentTimeMillis ( ) ; 
 
 logger . info ( String . format ( " reading saved cache % s " , path ) ) ; 
 - ObjectInputStream in = new ObjectInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) ) ; 
 + in = new ObjectInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) ) ; 
 while ( in . available ( ) > 0 ) 
 { 
 int size = in . readInt ( ) ; 
 @ @ - 279 , 7 + 280 , 6 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 in . readFully ( bytes ) ; 
 keys . add ( StorageService . getPartitioner ( ) . decorateKey ( ByteBuffer . wrap ( bytes ) ) ) ; 
 } 
 - in . close ( ) ; 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( String . format ( " completed reading ( % d ms ; % d keys ) saved cache % s " , 
 System . currentTimeMillis ( ) - start , keys . size ( ) , path ) ) ; 
 @ @ - 288 , 6 + 288 , 10 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 logger . warn ( String . format ( " error reading saved cache % s " , path . getAbsolutePath ( ) ) , ioe ) ; 
 } 
 + finally 
 + { 
 + FileUtils . closeQuietly ( in ) ; 
 + } 
 } 
 return keys ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java 
 index 8e6ced5 . . 1e4e403 100644 
 - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java 
 + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java 
 @ @ - 39 , 6 + 39 , 7 @ @ import org . apache . cassandra . io . sstable . IndexHelper ; 
 import org . apache . cassandra . io . sstable . SSTableReader ; 
 import org . apache . cassandra . io . util . FileDataInput ; 
 import org . apache . cassandra . io . util . FileMark ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . utils . BloomFilter ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . slf4j . Logger ; 
 @ @ - 78 , 14 + 79 , 7 @ @ public class SSTableNamesIterator extends SimpleAbstractColumnIterator implement 
 } 
 finally 
 { 
 - try 
 - { 
 - file . close ( ) ; 
 - } 
 - catch ( IOException ioe ) 
 - { 
 - logger . warn ( " error closing " + file . getPath ( ) ) ; 
 - } 
 + FileUtils . closeQuietly ( file ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 index 553c10e . . ff62aec 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 @ @ - 339 , 7 + 339 , 7 @ @ public class CommitLog 
 } 
 finally 
 { 
 - reader . close ( ) ; 
 + FileUtils . closeQuietly ( reader ) ; 
 logger . info ( " Finished reading " + file ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogHeader . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogHeader . java 
 index 3efdc99 . . 538cbb9 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogHeader . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogHeader . java 
 @ @ - 25 , 8 + 25 , 8 @ @ import java . util . Map ; 
 import java . util . zip . CRC32 ; 
 import java . util . zip . Checksum ; 
 
 - import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . io . ICompactSerializer2 ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 
 public class CommitLogHeader 
 { 
 @ @ - 132 , 13 + 132 , 12 @ @ public class CommitLogHeader 
 DataInputStream reader = null ; 
 try 
 { 
 - reader = new DataInputStream ( new FileInputStream ( headerFile ) ) ; 
 + reader = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( headerFile ) ) ) ; 
 return serializer . deserialize ( reader ) ; 
 } 
 finally 
 { 
 - if ( reader ! = null ) 
 - reader . close ( ) ; 
 + FileUtils . closeQuietly ( reader ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 index e1212b4 . . 1c7d4dc 100644 
 - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java 
 + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 @ @ - 18 , 10 + 18 , 12 @ @ 
 
 package org . apache . cassandra . gms ; 
 
 + import java . io . BufferedOutputStream ; 
 import java . io . File ; 
 import java . io . FileOutputStream ; 
 import java . io . IOException ; 
 import java . io . IOError ; 
 + import java . io . OutputStream ; 
 import java . lang . management . ManagementFactory ; 
 import java . util . * ; 
 import javax . management . MBeanServer ; 
 @ @ - 31 , 6 + 33 , 7 @ @ import org . apache . commons . lang . StringUtils ; 
 
 import java . net . InetAddress ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . BoundedStatsDeque ; 
 import org . slf4j . Logger ; 
 @ @ - 83 , 17 + 86 , 21 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean 
 * / 
 public void dumpInterArrivalTimes ( ) 
 { 
 + OutputStream os = null ; 
 try 
 { 
 File file = File . createTempFile ( " failuredetector - " , " . dat " ) ; 
 - FileOutputStream fos = new FileOutputStream ( file , true ) ; 
 - fos . write ( toString ( ) . getBytes ( ) ) ; 
 - fos . close ( ) ; 
 + os = new BufferedOutputStream ( new FileOutputStream ( file , true ) ) ; 
 + os . write ( toString ( ) . getBytes ( ) ) ; 
 } 
 catch ( IOException e ) 
 { 
 throw new IOError ( e ) ; 
 } 
 + finally 
 + { 
 + FileUtils . closeQuietly ( os ) ; 
 + } 
 } 
 
 public void setPhiConvictThreshold ( int phi ) 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 index a697b89 . . d3d3ac0 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 
 package org . apache . cassandra . io . sstable ; 
 
 + import java . io . BufferedInputStream ; 
 import java . io . DataInput ; 
 import java . io . DataInputStream ; 
 import java . io . File ; 
 @ @ - 53 , 6 + 54 , 7 @ @ import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . io . ICompactSerializer2 ; 
 import org . apache . cassandra . io . util . BufferedRandomAccessFile ; 
 import org . apache . cassandra . io . util . FileDataInput ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . io . util . SegmentedFile ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . * ; 
 @ @ - 174 , 11 + 176 , 18 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 File statsFile = new File ( descriptor . filenameFor ( SSTable . COMPONENT _ STATS ) ) ; 
 if ( statsFile . exists ( ) ) 
 { 
 - logger . debug ( " Load statistics for { } " , descriptor ) ; 
 - DataInputStream dis = new DataInputStream ( new FileInputStream ( statsFile ) ) ; 
 - rowSizes = EstimatedHistogram . serializer . deserialize ( dis ) ; 
 - columnCounts = EstimatedHistogram . serializer . deserialize ( dis ) ; 
 - dis . close ( ) ; 
 + DataInputStream dis = null ; 
 + try 
 + { 
 + logger . debug ( " Load statistics for { } " , descriptor ) ; 
 + dis = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( statsFile ) ) ) ; 
 + rowSizes = EstimatedHistogram . serializer . deserialize ( dis ) ; 
 + columnCounts = EstimatedHistogram . serializer . deserialize ( dis ) ; 
 + } 
 + finally 
 + { 
 + FileUtils . closeQuietly ( dis ) ; 
 + } 
 } 
 else 
 { 
 @ @ - 253 , 14 + 262 , 15 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 
 void loadBloomFilter ( ) throws IOException 
 { 
 - DataInputStream stream = new DataInputStream ( new FileInputStream ( descriptor . filenameFor ( Component . FILTER ) ) ) ; 
 + DataInputStream stream = null ; 
 try 
 { 
 + stream = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( descriptor . filenameFor ( Component . FILTER ) ) ) ) ; 
 bf = BloomFilter . serializer ( ) . deserialize ( stream ) ; 
 } 
 finally 
 { 
 - stream . close ( ) ; 
 + FileUtils . closeQuietly ( stream ) ; 
 } 
 } 
 
 @ @ - 316 , 7 + 326 , 7 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 } 
 finally 
 { 
 - input . close ( ) ; 
 + FileUtils . closeQuietly ( input ) ; 
 } 
 
 / / finalize the state of the reader 
 @ @ - 497 , 14 + 507 , 7 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 } 
 finally 
 { 
 - try 
 - { 
 - input . close ( ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - logger . error ( " error closing file " , e ) ; 
 - } 
 + FileUtils . closeQuietly ( input ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java b / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java 
 index 6090030 . . cb04c31 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java 
 @ @ - 37 , 7 + 37 , 9 @ @ import org . apache . cassandra . cache . JMXInstrumentedCache ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . ColumnFamily ; 
 import org . apache . cassandra . db . DecoratedKey ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . utils . Pair ; 
 + 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 75 , 19 + 77 , 29 @ @ public class SSTableTracker implements Iterable < SSTableReader > 
 logger . info ( " saving " + msgSuffix ) ; 
 int count = 0 ; 
 File tmpFile = File . createTempFile ( savedCachePath . getName ( ) , null , savedCachePath . getParentFile ( ) ) ; 
 - FileOutputStream fout = new FileOutputStream ( tmpFile ) ; 
 - ObjectOutputStream out = new ObjectOutputStream ( new BufferedOutputStream ( fout ) ) ; 
 - FileDescriptor fd = fout . getFD ( ) ; 
 - for ( K key : cache . getKeySet ( ) ) 
 + 
 + FileOutputStream fout = null ; 
 + ObjectOutputStream out = null ; 
 + try 
 + { 
 + fout = new FileOutputStream ( tmpFile ) ; 
 + out = new ObjectOutputStream ( new BufferedOutputStream ( fout ) ) ; 
 + FileDescriptor fd = fout . getFD ( ) ; 
 + for ( K key : cache . getKeySet ( ) ) 
 + { 
 + ByteBuffer bytes = converter . apply ( key ) ; 
 + out . writeInt ( bytes . remaining ( ) ) ; 
 + out . write ( bytes . array ( ) , bytes . position ( ) + bytes . arrayOffset ( ) , bytes . remaining ( ) ) ; 
 + + + count ; 
 + } 
 + out . flush ( ) ; 
 + fd . sync ( ) ; 
 + } 
 + finally 
 { 
 - ByteBuffer bytes = converter . apply ( key ) ; 
 - out . writeInt ( bytes . remaining ( ) ) ; 
 - out . write ( bytes . array ( ) , bytes . position ( ) + bytes . arrayOffset ( ) , bytes . remaining ( ) ) ; 
 - + + count ; 
 + FileUtils . closeQuietly ( out ) ; 
 + FileUtils . closeQuietly ( fout ) ; 
 } 
 - out . flush ( ) ; 
 - fd . sync ( ) ; 
 - out . close ( ) ; 
 if ( ! tmpFile . renameTo ( savedCachePath ) ) 
 throw new IOException ( " Unable to rename cache to " + savedCachePath ) ; 
 if ( logger . isDebugEnabled ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / io / util / FileUtils . java b / src / java / org / apache / cassandra / io / util / FileUtils . java 
 index 42bc06a . . 6bd8537 100644 
 - - - a / src / java / org / apache / cassandra / io / util / FileUtils . java 
 + + + b / src / java / org / apache / cassandra / io / util / FileUtils . java 
 @ @ - 18 , 14 + 18 , 12 @ @ 
 
 package org . apache . cassandra . io . util ; 
 
 - import java . io . File ; 
 - import java . io . FileNotFoundException ; 
 - import java . io . IOException ; 
 - import java . io . RandomAccessFile ; 
 + import java . io . * ; 
 import java . text . DecimalFormat ; 
 import java . util . Comparator ; 
 import java . util . List ; 
 
 + import org . apache . cassandra . utils . FBUtilities ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 85 , 6 + 83 , 19 @ @ public class FileUtils 
 } 
 } 
 
 + public static void closeQuietly ( Closeable c ) 
 + { 
 + try 
 + { 
 + if ( c ! = null ) 
 + c . close ( ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + logger _ . warn ( " Failed closing stream " , e ) ; 
 + } 
 + } 
 + 
 public static class FileComparator implements Comparator < File > 
 { 
 public int compare ( File f , File f2 ) 
 diff - - git a / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java b / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java 
 index 693d850 . . 7b58802 100644 
 - - - a / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java 
 + + + b / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java 
 @ @ - 173 , 14 + 173 , 7 @ @ public class MmappedSegmentedFile extends SegmentedFile 
 } 
 finally 
 { 
 - try 
 - { 
 - if ( raf ! = null ) raf . close ( ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - throw new IOError ( e ) ; 
 - } 
 + FileUtils . closeQuietly ( raf ) ; 
 } 
 return segments ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java 
 index cedb5fa . . 9982e54 100644 
 - - - a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java 
 + + + b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java 
 @ @ - 18 , 22 + 18 , 24 @ @ 
 
 package org . apache . cassandra . locator ; 
 
 + import java . io . BufferedReader ; 
 import java . io . FileReader ; 
 import java . io . IOException ; 
 + import java . io . Reader ; 
 import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 import java . util . HashMap ; 
 import java . util . Map ; 
 import java . util . Properties ; 
 
 - import org . slf4j . Logger ; 
 - import org . slf4j . LoggerFactory ; 
 - 
 import org . apache . cassandra . config . ConfigurationException ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . ResourceWatcher ; 
 import org . apache . cassandra . utils . WrappedRunnable ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 
 / * * 
 * Used to determine if two IP ' s are in the same datacenter or on the same rack . 
 @ @ - 112 , 14 + 114 , 20 @ @ public class PropertyFileSnitch extends AbstractNetworkTopologySnitch 
 
 String rackPropertyFilename = FBUtilities . resourceToFile ( RACK _ PROPERTY _ FILENAME ) ; 
 Properties properties = new Properties ( ) ; 
 + Reader reader = null ; 
 try 
 { 
 - properties . load ( new FileReader ( rackPropertyFilename ) ) ; 
 + reader = new BufferedReader ( new FileReader ( rackPropertyFilename ) ) ; 
 + properties . load ( reader ) ; 
 } 
 catch ( IOException e ) 
 { 
 throw new ConfigurationException ( " Unable to read " + RACK _ PROPERTY _ FILENAME , e ) ; 
 } 
 + finally 
 + { 
 + FileUtils . closeQuietly ( reader ) ; 
 + } 
 
 for ( Map . Entry < Object , Object > entry : properties . entrySet ( ) ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / streaming / FileStreamTask . java b / src / java / org / apache / cassandra / streaming / FileStreamTask . java 
 index 647fd4a . . e4d32c5 100644 
 - - - a / src / java / org / apache / cassandra / streaming / FileStreamTask . java 
 + + + b / src / java / org / apache / cassandra / streaming / FileStreamTask . java 
 @ @ - 25 , 7 + 25 , 7 @ @ import java . nio . ByteBuffer ; 
 import java . nio . channels . FileChannel ; 
 import java . nio . channels . SocketChannel ; 
 
 - import org . apache . cassandra . streaming . StreamHeader ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 35 , 6 + 35 , 7 @ @ import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . utils . Pair ; 
 import org . apache . cassandra . utils . WrappedRunnable ; 
 
 + 
 public class FileStreamTask extends WrappedRunnable 
 { 
 private static Logger logger = LoggerFactory . getLogger ( FileStreamTask . class ) ; 
 @ @ - 109 , 14 + 110 , 7 @ @ public class FileStreamTask extends WrappedRunnable 
 } 
 finally 
 { 
 - try 
 - { 
 - raf . close ( ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - throw new AssertionError ( e ) ; 
 - } 
 + FileUtils . closeQuietly ( raf ) ; 
 } 
 } 

