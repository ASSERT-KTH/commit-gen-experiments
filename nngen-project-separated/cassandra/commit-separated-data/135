BLEU SCORE: 0.08310415003234632

TEST MSG: Allow noarg toppartitions
GENERATED MSG: Add tooling to detect hot partitions

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index aa4ef39 . . 01c67f4 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Allow nodetool toppartitions without specifying table ( CASSANDRA - 14360 ) <nl> * Audit logging for database activity ( CASSANDRA - 12151 ) <nl> * Clean up build artifacts in docs container ( CASSANDRA - 14432 ) <nl> * Minor network authz improvements ( Cassandra - 14413 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index dd2f178 . . a62af6f 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 33 , 9 + 33 , 13 @ @ import java . util . stream . StreamSupport ; <nl> <nl> import javax . annotation . Nullable ; <nl> import javax . management . * ; <nl> + import javax . management . openmbean . CompositeData ; <nl> + import javax . management . openmbean . CompositeDataSupport ; <nl> + import javax . management . openmbean . OpenDataException ; <nl> import javax . management . openmbean . TabularData ; <nl> import javax . management . openmbean . TabularDataSupport ; <nl> <nl> + import com . clearspring . analytics . stream . Counter ; <nl> import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . base . Preconditions ; <nl> import com . google . common . base . Predicate ; <nl> @ @ - 76 , 6 + 80 , 7 @ @ import org . apache . cassandra . io . sstable . SSTableLoader ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . locator . * ; <nl> import org . apache . cassandra . metrics . StorageMetrics ; <nl> + import org . apache . cassandra . metrics . TableMetrics . Sampler ; <nl> import org . apache . cassandra . net . * ; <nl> import org . apache . cassandra . repair . * ; <nl> import org . apache . cassandra . repair . messages . RepairOption ; <nl> @ @ - 99 , 6 + 104 , 7 @ @ import org . apache . cassandra . streaming . * ; <nl> import org . apache . cassandra . tracing . TraceKeyspace ; <nl> import org . apache . cassandra . transport . ProtocolVersion ; <nl> import org . apache . cassandra . utils . * ; <nl> + import org . apache . cassandra . utils . TopKSampler . SamplerResult ; <nl> import org . apache . cassandra . utils . logging . LoggingSupportFactory ; <nl> import org . apache . cassandra . utils . progress . ProgressEvent ; <nl> import org . apache . cassandra . utils . progress . ProgressEventType ; <nl> @ @ - 5269 , 6 + 5275 , 38 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> return sampledKeys ; <nl> } <nl> <nl> + / * <nl> + * little hard to parse for JMX MBean requirements , but the output looks something like : <nl> + * <nl> + * { " keyspace . table " : <nl> + * { " SAMPLER " : [ { cardinality : i partitions : [ { raw : " " , string : " " , count : i , error : i } , . . . ] } , . . . ] } <nl> + * } <nl> + * / <nl> + @ Override <nl> + public Map < String , Map < String , CompositeData > > samplePartitions ( long duration , int capacity , int count , List < String > samplers ) throws OpenDataException <nl> + { <nl> + for ( String sampler : samplers ) <nl> + { <nl> + for ( ColumnFamilyStore table : ColumnFamilyStore . all ( ) ) <nl> + { <nl> + table . beginLocalSampling ( sampler , capacity ) ; <nl> + } <nl> + } <nl> + <nl> + Uninterruptibles . sleepUninterruptibly ( duration , TimeUnit . MILLISECONDS ) ; <nl> + ConcurrentHashMap < String , Map < String , CompositeData > > result = new ConcurrentHashMap < > ( ) ; <nl> + for ( String sampler : samplers ) <nl> + { <nl> + for ( ColumnFamilyStore table : ColumnFamilyStore . all ( ) ) <nl> + { <nl> + String name = table . keyspace . getName ( ) + " . " + table . name ; <nl> + Map < String , CompositeData > topk = result . computeIfAbsent ( name , x - > new HashMap < > ( ) ) ; <nl> + topk . put ( sampler , table . finishLocalSampling ( sampler , count ) ) ; <nl> + } <nl> + } <nl> + return result ; <nl> + } <nl> + <nl> public void rebuildSecondaryIndex ( String ksName , String cfName , String . . . idxNames ) <nl> { <nl> String [ ] indices = asList ( idxNames ) . stream ( ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index 8c4b618 . . 1282105 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 27 , 9 + 27 , 12 @ @ import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . TimeoutException ; <nl> import javax . annotation . Nullable ; <nl> import javax . management . NotificationEmitter ; <nl> + import javax . management . openmbean . CompositeData ; <nl> + import javax . management . openmbean . OpenDataException ; <nl> import javax . management . openmbean . TabularData ; <nl> <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . metrics . TableMetrics . Sampler ; <nl> <nl> public interface StorageServiceMBean extends NotificationEmitter <nl> { <nl> @ @ - 628 , 6 + 631 , 8 @ @ public interface StorageServiceMBean extends NotificationEmitter <nl> * / <nl> public void setTraceProbability ( double probability ) ; <nl> <nl> + public Map < String , Map < String , CompositeData > > samplePartitions ( long duration , int capacity , int count , List < String > samplers ) throws OpenDataException ; <nl> + <nl> / * * <nl> * Returns the configured tracing probability . <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index f556ffc . . 7cec99d 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 89 , 6 + 89 , 7 @ @ import org . apache . cassandra . streaming . management . StreamStateCompositeData ; <nl> <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Strings ; <nl> + import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . Iterables ; <nl> import com . google . common . collect . Maps ; <nl> import com . google . common . collect . Multimap ; <nl> @ @ - 418 , 21 + 419 , 27 @ @ public class NodeProbe implements AutoCloseable <nl> } <nl> } <nl> } <nl> + public Map < String , Map < String , CompositeData > > getPartitionSample ( int capacity , int duration , int count , List < String > samplers ) throws OpenDataException <nl> + { <nl> + return ssProxy . samplePartitions ( duration , capacity , count , samplers ) ; <nl> + } <nl> <nl> - public Map < Sampler , CompositeData > getPartitionSample ( String ks , String cf , int capacity , int duration , int count , List < Sampler > samplers ) throws OpenDataException <nl> + public Map < String , Map < String , CompositeData > > getPartitionSample ( String ks , String cf , int capacity , int duration , int count , List < String > samplers ) throws OpenDataException <nl> { <nl> ColumnFamilyStoreMBean cfsProxy = getCfsProxy ( ks , cf ) ; <nl> - for ( Sampler sampler : samplers ) <nl> + for ( String sampler : samplers ) <nl> { <nl> - cfsProxy . beginLocalSampling ( sampler . name ( ) , capacity ) ; <nl> + cfsProxy . beginLocalSampling ( sampler , capacity ) ; <nl> } <nl> Uninterruptibles . sleepUninterruptibly ( duration , TimeUnit . MILLISECONDS ) ; <nl> - Map < Sampler , CompositeData > result = Maps . newHashMap ( ) ; <nl> - for ( Sampler sampler : samplers ) <nl> + Map < String , CompositeData > result = Maps . newHashMap ( ) ; <nl> + for ( String sampler : samplers ) <nl> { <nl> - result . put ( sampler , cfsProxy . finishLocalSampling ( sampler . name ( ) , count ) ) ; <nl> + result . put ( sampler , cfsProxy . finishLocalSampling ( sampler , count ) ) ; <nl> } <nl> - return result ; <nl> + return new ImmutableMap . Builder < String , Map < String , CompositeData > > ( ) <nl> + . put ( ks + " . " + cf , result ) <nl> + . build ( ) ; <nl> } <nl> <nl> public void invalidateCounterCache ( ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / TopPartitions . java b / src / java / org / apache / cassandra / tools / nodetool / TopPartitions . java <nl> index 73bf2fb . . ee03cd2 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / nodetool / TopPartitions . java <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / TopPartitions . java <nl> @ @ - 19 , 9 + 19 , 6 @ @ package org . apache . cassandra . tools . nodetool ; <nl> <nl> import static com . google . common . base . Preconditions . checkArgument ; <nl> import static org . apache . commons . lang3 . StringUtils . join ; <nl> - import io . airlift . airline . Arguments ; <nl> - import io . airlift . airline . Command ; <nl> - import io . airlift . airline . Option ; <nl> <nl> import java . util . ArrayList ; <nl> import java . util . Collections ; <nl> @ @ - 37 , 14 + 34 , 20 @ @ import org . apache . cassandra . metrics . TableMetrics ; <nl> import org . apache . cassandra . metrics . TableMetrics . Sampler ; <nl> import org . apache . cassandra . tools . NodeProbe ; <nl> import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; <nl> + import org . apache . cassandra . tools . nodetool . formatter . TableBuilder ; <nl> + import org . apache . cassandra . utils . Pair ; <nl> <nl> import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Ordering ; <nl> <nl> - @ Command ( name = " toppartitions " , description = " Sample and print the most active partitions for a given column family " ) <nl> + import io . airlift . airline . Arguments ; <nl> + import io . airlift . airline . Command ; <nl> + import io . airlift . airline . Option ; <nl> + <nl> + @ Command ( name = " toppartitions " , description = " Sample and print the most active partitions " ) <nl> public class TopPartitions extends NodeToolCmd <nl> { <nl> - @ Arguments ( usage = " < keyspace > < cfname > < duration > " , description = " The keyspace , column family name , and duration in milliseconds " ) <nl> + @ Arguments ( usage = " [ keyspace table ] [ duration ] " , description = " The keyspace , table name , and duration in milliseconds " ) <nl> private List < String > args = new ArrayList < > ( ) ; <nl> @ Option ( name = " - s " , description = " Capacity of stream summary , closer to the actual cardinality of partitions will yield more accurate results ( Default : 256 ) " ) <nl> private int size = 256 ; <nl> @ @ - 55 , 63 + 58 , 86 @ @ public class TopPartitions extends NodeToolCmd <nl> @ Override <nl> public void execute ( NodeProbe probe ) <nl> { <nl> - checkArgument ( args . size ( ) = = 3 , " toppartitions requires keyspace , column family name , and duration " ) ; <nl> + checkArgument ( args . size ( ) = = 3 | | args . size ( ) = = 1 | | args . size ( ) = = 0 , " Invalid arguments , either [ keyspace table duration ] or [ duration ] or no args " ) ; <nl> checkArgument ( topCount < size , " TopK count ( - k ) option must be smaller then the summary capacity ( - s ) " ) ; <nl> - String keyspace = args . get ( 0 ) ; <nl> - String cfname = args . get ( 1 ) ; <nl> - Integer duration = Integer . valueOf ( args . get ( 2 ) ) ; <nl> + String keyspace = null ; <nl> + String table = null ; <nl> + Integer duration = 10000 ; <nl> + if ( args . size ( ) = = 3 ) <nl> + { <nl> + keyspace = args . get ( 0 ) ; <nl> + table = args . get ( 1 ) ; <nl> + duration = Integer . valueOf ( args . get ( 2 ) ) ; <nl> + } <nl> + else if ( args . size ( ) = = 1 ) <nl> + { <nl> + duration = Integer . valueOf ( args . get ( 0 ) ) ; <nl> + } <nl> / / generate the list of samplers <nl> - List < Sampler > targets = Lists . newArrayList ( ) ; <nl> + List < String > targets = Lists . newArrayList ( ) ; <nl> for ( String s : samplers . split ( " , " ) ) <nl> { <nl> try <nl> { <nl> - targets . add ( Sampler . valueOf ( s . toUpperCase ( ) ) ) ; <nl> + targets . add ( Sampler . valueOf ( s . toUpperCase ( ) ) . toString ( ) ) ; <nl> } catch ( Exception e ) <nl> { <nl> throw new IllegalArgumentException ( s + " is not a valid sampler , choose one of : " + join ( Sampler . values ( ) , " , " ) ) ; <nl> } <nl> } <nl> <nl> - Map < Sampler , CompositeData > results ; <nl> + Map < String , Map < String , CompositeData > > results ; <nl> try <nl> { <nl> - results = probe . getPartitionSample ( keyspace , cfname , size , duration , topCount , targets ) ; <nl> + if ( keyspace = = null ) <nl> + { <nl> + results = probe . getPartitionSample ( size , duration , topCount , targets ) ; <nl> + } <nl> + else <nl> + { <nl> + results = probe . getPartitionSample ( keyspace , table , size , duration , topCount , targets ) ; <nl> + } <nl> } catch ( OpenDataException e ) <nl> { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> boolean first = true ; <nl> - for ( Entry < Sampler , CompositeData > result : results . entrySet ( ) ) <nl> + for ( String sampler : targets ) <nl> { <nl> - CompositeData sampling = result . getValue ( ) ; <nl> - / / weird casting for http : / / bugs . sun . com / view _ bug . do ? bug _ id = 6548436 <nl> - List < CompositeData > topk = ( List < CompositeData > ) ( Object ) Lists . newArrayList ( ( ( TabularDataSupport ) sampling . get ( " partitions " ) ) . values ( ) ) ; <nl> - Collections . sort ( topk , new Ordering < CompositeData > ( ) <nl> + if ( ! first ) <nl> + System . out . println ( ) ; <nl> + first = false ; <nl> + System . out . printf ( sampler + " Sampler Top % d partitions : % n " , topCount ) ; <nl> + TableBuilder out = new TableBuilder ( ) ; <nl> + out . add ( " \ t " , " Table " , " Partition " , " Count " , " + / - " ) ; <nl> + List < Pair < String , CompositeData > > topk = new ArrayList < > ( topCount ) ; <nl> + for ( Entry < String , Map < String , CompositeData > > tableResult : results . entrySet ( ) ) <nl> + { <nl> + String tableName = tableResult . getKey ( ) ; <nl> + CompositeData sampling = tableResult . getValue ( ) . get ( sampler ) ; <nl> + / / weird casting for http : / / bugs . sun . com / view _ bug . do ? bug _ id = 6548436 <nl> + for ( CompositeData cd : ( List < CompositeData > ) ( Object ) Lists . newArrayList ( ( ( TabularDataSupport ) sampling . get ( " partitions " ) ) . values ( ) ) ) <nl> + { <nl> + topk . add ( Pair . create ( tableName , cd ) ) ; <nl> + } <nl> + } <nl> + Collections . sort ( topk , new Ordering < Pair < String , CompositeData > > ( ) <nl> { <nl> - public int compare ( CompositeData left , CompositeData right ) <nl> + public int compare ( Pair < String , CompositeData > left , Pair < String , CompositeData > right ) <nl> { <nl> - return Long . compare ( ( long ) right . get ( " count " ) , ( long ) left . get ( " count " ) ) ; <nl> + return Long . compare ( ( long ) right . right . get ( " count " ) , ( long ) left . right . get ( " count " ) ) ; <nl> } <nl> } ) ; <nl> - if ( ! first ) <nl> - System . out . println ( ) ; <nl> - System . out . println ( result . getKey ( ) . toString ( ) + " Sampler : " ) ; <nl> - System . out . printf ( " Cardinality : ~ % d ( % d capacity ) % n " , sampling . get ( " cardinality " ) , size ) ; <nl> - System . out . printf ( " Top % d partitions : % n " , topCount ) ; <nl> - if ( topk . size ( ) = = 0 ) <nl> + for ( Pair < String , CompositeData > entry : topk . subList ( 0 , Math . min ( topk . size ( ) , 10 ) ) ) <nl> { <nl> - System . out . println ( " \ tNothing recorded during sampling period . . . " ) ; <nl> - } else <nl> + CompositeData cd = entry . right ; <nl> + out . add ( " \ t " , entry . left , cd . get ( " string " ) . toString ( ) , cd . get ( " count " ) . toString ( ) , cd . get ( " error " ) . toString ( ) ) ; <nl> + } <nl> + out . printTo ( System . out ) ; <nl> + if ( topk . size ( ) = = 0 ) <nl> { <nl> - int offset = 0 ; <nl> - for ( CompositeData entry : topk ) <nl> - offset = Math . max ( offset , entry . get ( " string " ) . toString ( ) . length ( ) ) ; <nl> - System . out . printf ( " \ t % - " + offset + " s % 10s % 10s % n " , " Partition " , " Count " , " + / - " ) ; <nl> - for ( CompositeData entry : topk ) <nl> - System . out . printf ( " \ t % - " + offset + " s % 10d % 10d % n " , entry . get ( " string " ) . toString ( ) , entry . get ( " count " ) , entry . get ( " error " ) ) ; <nl> + System . out . println ( " \ t Nothing recorded during sampling period . . . " ) ; <nl> } <nl> - first = false ; <nl> } <nl> } <nl> - } <nl> \ No newline at end of file <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / tools / TopPartitionsTest . java b / test / unit / org / apache / cassandra / tools / TopPartitionsTest . java <nl> new file mode 100644 <nl> index 0000000 . . 64cea3a <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / tools / TopPartitionsTest . java <nl> @ @ - 0 , 0 + 1 , 67 @ @ <nl> + package org . apache . cassandra . tools ; <nl> + <nl> + import static java . lang . String . format ; <nl> + import static org . apache . cassandra . cql3 . QueryProcessor . executeInternal ; <nl> + import static org . junit . Assert . assertEquals ; <nl> + <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . concurrent . ArrayBlockingQueue ; <nl> + import java . util . concurrent . BlockingQueue ; <nl> + import java . util . concurrent . Executors ; <nl> + import java . util . concurrent . TimeUnit ; <nl> + <nl> + import javax . management . openmbean . CompositeData ; <nl> + import javax . management . openmbean . TabularDataSupport ; <nl> + <nl> + import org . apache . cassandra . SchemaLoader ; <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . db . SystemKeyspace ; <nl> + import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + import com . google . common . collect . Lists ; <nl> + <nl> + public class TopPartitionsTest <nl> + { <nl> + @ BeforeClass <nl> + public static void loadSchema ( ) throws ConfigurationException <nl> + { <nl> + SchemaLoader . prepareServer ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testServiceTopPartitionsNoArg ( ) throws Exception <nl> + { <nl> + BlockingQueue < Map < String , Map < String , CompositeData > > > q = new ArrayBlockingQueue < > ( 1 ) ; <nl> + ColumnFamilyStore . all ( ) ; <nl> + Executors . newCachedThreadPool ( ) . execute ( ( ) - > <nl> + { <nl> + try <nl> + { <nl> + q . put ( StorageService . instance . samplePartitions ( 1000 , 100 , 10 , Lists . newArrayList ( " READS " , " WRITES " ) ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + } ) ; <nl> + SystemKeyspace . persistLocalMetadata ( ) ; <nl> + Map < String , Map < String , CompositeData > > result = q . poll ( 11 , TimeUnit . SECONDS ) ; <nl> + List < CompositeData > cd = ( List < CompositeData > ) ( Object ) Lists . newArrayList ( ( ( TabularDataSupport ) result . get ( " system . local " ) . get ( " WRITES " ) . get ( " partitions " ) ) . values ( ) ) ; <nl> + assertEquals ( 1 , cd . size ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testServiceTopPartitionsSingleTable ( ) throws Exception <nl> + { <nl> + ColumnFamilyStore . getIfExists ( " system " , " local " ) . beginLocalSampling ( " READS " , 5 ) ; <nl> + String req = " SELECT * FROM system . % s WHERE key = ' % s ' " ; <nl> + executeInternal ( format ( req , SystemKeyspace . LOCAL , SystemKeyspace . LOCAL ) ) ; <nl> + CompositeData result = ColumnFamilyStore . getIfExists ( " system " , " local " ) . finishLocalSampling ( " READS " , 5 ) ; <nl> + List < CompositeData > cd = ( List < CompositeData > ) ( Object ) Lists . newArrayList ( ( ( TabularDataSupport ) result . get ( " partitions " ) ) . values ( ) ) ; <nl> + assertEquals ( 1 , cd . size ( ) ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index aa4ef39 . . 01c67f4 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Allow nodetool toppartitions without specifying table ( CASSANDRA - 14360 ) 
 * Audit logging for database activity ( CASSANDRA - 12151 ) 
 * Clean up build artifacts in docs container ( CASSANDRA - 14432 ) 
 * Minor network authz improvements ( Cassandra - 14413 ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index dd2f178 . . a62af6f 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 33 , 9 + 33 , 13 @ @ import java . util . stream . StreamSupport ; 
 
 import javax . annotation . Nullable ; 
 import javax . management . * ; 
 + import javax . management . openmbean . CompositeData ; 
 + import javax . management . openmbean . CompositeDataSupport ; 
 + import javax . management . openmbean . OpenDataException ; 
 import javax . management . openmbean . TabularData ; 
 import javax . management . openmbean . TabularDataSupport ; 
 
 + import com . clearspring . analytics . stream . Counter ; 
 import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . base . Preconditions ; 
 import com . google . common . base . Predicate ; 
 @ @ - 76 , 6 + 80 , 7 @ @ import org . apache . cassandra . io . sstable . SSTableLoader ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . locator . * ; 
 import org . apache . cassandra . metrics . StorageMetrics ; 
 + import org . apache . cassandra . metrics . TableMetrics . Sampler ; 
 import org . apache . cassandra . net . * ; 
 import org . apache . cassandra . repair . * ; 
 import org . apache . cassandra . repair . messages . RepairOption ; 
 @ @ - 99 , 6 + 104 , 7 @ @ import org . apache . cassandra . streaming . * ; 
 import org . apache . cassandra . tracing . TraceKeyspace ; 
 import org . apache . cassandra . transport . ProtocolVersion ; 
 import org . apache . cassandra . utils . * ; 
 + import org . apache . cassandra . utils . TopKSampler . SamplerResult ; 
 import org . apache . cassandra . utils . logging . LoggingSupportFactory ; 
 import org . apache . cassandra . utils . progress . ProgressEvent ; 
 import org . apache . cassandra . utils . progress . ProgressEventType ; 
 @ @ - 5269 , 6 + 5275 , 38 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 return sampledKeys ; 
 } 
 
 + / * 
 + * little hard to parse for JMX MBean requirements , but the output looks something like : 
 + * 
 + * { " keyspace . table " : 
 + * { " SAMPLER " : [ { cardinality : i partitions : [ { raw : " " , string : " " , count : i , error : i } , . . . ] } , . . . ] } 
 + * } 
 + * / 
 + @ Override 
 + public Map < String , Map < String , CompositeData > > samplePartitions ( long duration , int capacity , int count , List < String > samplers ) throws OpenDataException 
 + { 
 + for ( String sampler : samplers ) 
 + { 
 + for ( ColumnFamilyStore table : ColumnFamilyStore . all ( ) ) 
 + { 
 + table . beginLocalSampling ( sampler , capacity ) ; 
 + } 
 + } 
 + 
 + Uninterruptibles . sleepUninterruptibly ( duration , TimeUnit . MILLISECONDS ) ; 
 + ConcurrentHashMap < String , Map < String , CompositeData > > result = new ConcurrentHashMap < > ( ) ; 
 + for ( String sampler : samplers ) 
 + { 
 + for ( ColumnFamilyStore table : ColumnFamilyStore . all ( ) ) 
 + { 
 + String name = table . keyspace . getName ( ) + " . " + table . name ; 
 + Map < String , CompositeData > topk = result . computeIfAbsent ( name , x - > new HashMap < > ( ) ) ; 
 + topk . put ( sampler , table . finishLocalSampling ( sampler , count ) ) ; 
 + } 
 + } 
 + return result ; 
 + } 
 + 
 public void rebuildSecondaryIndex ( String ksName , String cfName , String . . . idxNames ) 
 { 
 String [ ] indices = asList ( idxNames ) . stream ( ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index 8c4b618 . . 1282105 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 27 , 9 + 27 , 12 @ @ import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . TimeoutException ; 
 import javax . annotation . Nullable ; 
 import javax . management . NotificationEmitter ; 
 + import javax . management . openmbean . CompositeData ; 
 + import javax . management . openmbean . OpenDataException ; 
 import javax . management . openmbean . TabularData ; 
 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . metrics . TableMetrics . Sampler ; 
 
 public interface StorageServiceMBean extends NotificationEmitter 
 { 
 @ @ - 628 , 6 + 631 , 8 @ @ public interface StorageServiceMBean extends NotificationEmitter 
 * / 
 public void setTraceProbability ( double probability ) ; 
 
 + public Map < String , Map < String , CompositeData > > samplePartitions ( long duration , int capacity , int count , List < String > samplers ) throws OpenDataException ; 
 + 
 / * * 
 * Returns the configured tracing probability . 
 * / 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index f556ffc . . 7cec99d 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 89 , 6 + 89 , 7 @ @ import org . apache . cassandra . streaming . management . StreamStateCompositeData ; 
 
 import com . google . common . base . Function ; 
 import com . google . common . base . Strings ; 
 + import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . Iterables ; 
 import com . google . common . collect . Maps ; 
 import com . google . common . collect . Multimap ; 
 @ @ - 418 , 21 + 419 , 27 @ @ public class NodeProbe implements AutoCloseable 
 } 
 } 
 } 
 + public Map < String , Map < String , CompositeData > > getPartitionSample ( int capacity , int duration , int count , List < String > samplers ) throws OpenDataException 
 + { 
 + return ssProxy . samplePartitions ( duration , capacity , count , samplers ) ; 
 + } 
 
 - public Map < Sampler , CompositeData > getPartitionSample ( String ks , String cf , int capacity , int duration , int count , List < Sampler > samplers ) throws OpenDataException 
 + public Map < String , Map < String , CompositeData > > getPartitionSample ( String ks , String cf , int capacity , int duration , int count , List < String > samplers ) throws OpenDataException 
 { 
 ColumnFamilyStoreMBean cfsProxy = getCfsProxy ( ks , cf ) ; 
 - for ( Sampler sampler : samplers ) 
 + for ( String sampler : samplers ) 
 { 
 - cfsProxy . beginLocalSampling ( sampler . name ( ) , capacity ) ; 
 + cfsProxy . beginLocalSampling ( sampler , capacity ) ; 
 } 
 Uninterruptibles . sleepUninterruptibly ( duration , TimeUnit . MILLISECONDS ) ; 
 - Map < Sampler , CompositeData > result = Maps . newHashMap ( ) ; 
 - for ( Sampler sampler : samplers ) 
 + Map < String , CompositeData > result = Maps . newHashMap ( ) ; 
 + for ( String sampler : samplers ) 
 { 
 - result . put ( sampler , cfsProxy . finishLocalSampling ( sampler . name ( ) , count ) ) ; 
 + result . put ( sampler , cfsProxy . finishLocalSampling ( sampler , count ) ) ; 
 } 
 - return result ; 
 + return new ImmutableMap . Builder < String , Map < String , CompositeData > > ( ) 
 + . put ( ks + " . " + cf , result ) 
 + . build ( ) ; 
 } 
 
 public void invalidateCounterCache ( ) 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / TopPartitions . java b / src / java / org / apache / cassandra / tools / nodetool / TopPartitions . java 
 index 73bf2fb . . ee03cd2 100644 
 - - - a / src / java / org / apache / cassandra / tools / nodetool / TopPartitions . java 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / TopPartitions . java 
 @ @ - 19 , 9 + 19 , 6 @ @ package org . apache . cassandra . tools . nodetool ; 
 
 import static com . google . common . base . Preconditions . checkArgument ; 
 import static org . apache . commons . lang3 . StringUtils . join ; 
 - import io . airlift . airline . Arguments ; 
 - import io . airlift . airline . Command ; 
 - import io . airlift . airline . Option ; 
 
 import java . util . ArrayList ; 
 import java . util . Collections ; 
 @ @ - 37 , 14 + 34 , 20 @ @ import org . apache . cassandra . metrics . TableMetrics ; 
 import org . apache . cassandra . metrics . TableMetrics . Sampler ; 
 import org . apache . cassandra . tools . NodeProbe ; 
 import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; 
 + import org . apache . cassandra . tools . nodetool . formatter . TableBuilder ; 
 + import org . apache . cassandra . utils . Pair ; 
 
 import com . google . common . collect . Lists ; 
 import com . google . common . collect . Ordering ; 
 
 - @ Command ( name = " toppartitions " , description = " Sample and print the most active partitions for a given column family " ) 
 + import io . airlift . airline . Arguments ; 
 + import io . airlift . airline . Command ; 
 + import io . airlift . airline . Option ; 
 + 
 + @ Command ( name = " toppartitions " , description = " Sample and print the most active partitions " ) 
 public class TopPartitions extends NodeToolCmd 
 { 
 - @ Arguments ( usage = " < keyspace > < cfname > < duration > " , description = " The keyspace , column family name , and duration in milliseconds " ) 
 + @ Arguments ( usage = " [ keyspace table ] [ duration ] " , description = " The keyspace , table name , and duration in milliseconds " ) 
 private List < String > args = new ArrayList < > ( ) ; 
 @ Option ( name = " - s " , description = " Capacity of stream summary , closer to the actual cardinality of partitions will yield more accurate results ( Default : 256 ) " ) 
 private int size = 256 ; 
 @ @ - 55 , 63 + 58 , 86 @ @ public class TopPartitions extends NodeToolCmd 
 @ Override 
 public void execute ( NodeProbe probe ) 
 { 
 - checkArgument ( args . size ( ) = = 3 , " toppartitions requires keyspace , column family name , and duration " ) ; 
 + checkArgument ( args . size ( ) = = 3 | | args . size ( ) = = 1 | | args . size ( ) = = 0 , " Invalid arguments , either [ keyspace table duration ] or [ duration ] or no args " ) ; 
 checkArgument ( topCount < size , " TopK count ( - k ) option must be smaller then the summary capacity ( - s ) " ) ; 
 - String keyspace = args . get ( 0 ) ; 
 - String cfname = args . get ( 1 ) ; 
 - Integer duration = Integer . valueOf ( args . get ( 2 ) ) ; 
 + String keyspace = null ; 
 + String table = null ; 
 + Integer duration = 10000 ; 
 + if ( args . size ( ) = = 3 ) 
 + { 
 + keyspace = args . get ( 0 ) ; 
 + table = args . get ( 1 ) ; 
 + duration = Integer . valueOf ( args . get ( 2 ) ) ; 
 + } 
 + else if ( args . size ( ) = = 1 ) 
 + { 
 + duration = Integer . valueOf ( args . get ( 0 ) ) ; 
 + } 
 / / generate the list of samplers 
 - List < Sampler > targets = Lists . newArrayList ( ) ; 
 + List < String > targets = Lists . newArrayList ( ) ; 
 for ( String s : samplers . split ( " , " ) ) 
 { 
 try 
 { 
 - targets . add ( Sampler . valueOf ( s . toUpperCase ( ) ) ) ; 
 + targets . add ( Sampler . valueOf ( s . toUpperCase ( ) ) . toString ( ) ) ; 
 } catch ( Exception e ) 
 { 
 throw new IllegalArgumentException ( s + " is not a valid sampler , choose one of : " + join ( Sampler . values ( ) , " , " ) ) ; 
 } 
 } 
 
 - Map < Sampler , CompositeData > results ; 
 + Map < String , Map < String , CompositeData > > results ; 
 try 
 { 
 - results = probe . getPartitionSample ( keyspace , cfname , size , duration , topCount , targets ) ; 
 + if ( keyspace = = null ) 
 + { 
 + results = probe . getPartitionSample ( size , duration , topCount , targets ) ; 
 + } 
 + else 
 + { 
 + results = probe . getPartitionSample ( keyspace , table , size , duration , topCount , targets ) ; 
 + } 
 } catch ( OpenDataException e ) 
 { 
 throw new RuntimeException ( e ) ; 
 } 
 boolean first = true ; 
 - for ( Entry < Sampler , CompositeData > result : results . entrySet ( ) ) 
 + for ( String sampler : targets ) 
 { 
 - CompositeData sampling = result . getValue ( ) ; 
 - / / weird casting for http : / / bugs . sun . com / view _ bug . do ? bug _ id = 6548436 
 - List < CompositeData > topk = ( List < CompositeData > ) ( Object ) Lists . newArrayList ( ( ( TabularDataSupport ) sampling . get ( " partitions " ) ) . values ( ) ) ; 
 - Collections . sort ( topk , new Ordering < CompositeData > ( ) 
 + if ( ! first ) 
 + System . out . println ( ) ; 
 + first = false ; 
 + System . out . printf ( sampler + " Sampler Top % d partitions : % n " , topCount ) ; 
 + TableBuilder out = new TableBuilder ( ) ; 
 + out . add ( " \ t " , " Table " , " Partition " , " Count " , " + / - " ) ; 
 + List < Pair < String , CompositeData > > topk = new ArrayList < > ( topCount ) ; 
 + for ( Entry < String , Map < String , CompositeData > > tableResult : results . entrySet ( ) ) 
 + { 
 + String tableName = tableResult . getKey ( ) ; 
 + CompositeData sampling = tableResult . getValue ( ) . get ( sampler ) ; 
 + / / weird casting for http : / / bugs . sun . com / view _ bug . do ? bug _ id = 6548436 
 + for ( CompositeData cd : ( List < CompositeData > ) ( Object ) Lists . newArrayList ( ( ( TabularDataSupport ) sampling . get ( " partitions " ) ) . values ( ) ) ) 
 + { 
 + topk . add ( Pair . create ( tableName , cd ) ) ; 
 + } 
 + } 
 + Collections . sort ( topk , new Ordering < Pair < String , CompositeData > > ( ) 
 { 
 - public int compare ( CompositeData left , CompositeData right ) 
 + public int compare ( Pair < String , CompositeData > left , Pair < String , CompositeData > right ) 
 { 
 - return Long . compare ( ( long ) right . get ( " count " ) , ( long ) left . get ( " count " ) ) ; 
 + return Long . compare ( ( long ) right . right . get ( " count " ) , ( long ) left . right . get ( " count " ) ) ; 
 } 
 } ) ; 
 - if ( ! first ) 
 - System . out . println ( ) ; 
 - System . out . println ( result . getKey ( ) . toString ( ) + " Sampler : " ) ; 
 - System . out . printf ( " Cardinality : ~ % d ( % d capacity ) % n " , sampling . get ( " cardinality " ) , size ) ; 
 - System . out . printf ( " Top % d partitions : % n " , topCount ) ; 
 - if ( topk . size ( ) = = 0 ) 
 + for ( Pair < String , CompositeData > entry : topk . subList ( 0 , Math . min ( topk . size ( ) , 10 ) ) ) 
 { 
 - System . out . println ( " \ tNothing recorded during sampling period . . . " ) ; 
 - } else 
 + CompositeData cd = entry . right ; 
 + out . add ( " \ t " , entry . left , cd . get ( " string " ) . toString ( ) , cd . get ( " count " ) . toString ( ) , cd . get ( " error " ) . toString ( ) ) ; 
 + } 
 + out . printTo ( System . out ) ; 
 + if ( topk . size ( ) = = 0 ) 
 { 
 - int offset = 0 ; 
 - for ( CompositeData entry : topk ) 
 - offset = Math . max ( offset , entry . get ( " string " ) . toString ( ) . length ( ) ) ; 
 - System . out . printf ( " \ t % - " + offset + " s % 10s % 10s % n " , " Partition " , " Count " , " + / - " ) ; 
 - for ( CompositeData entry : topk ) 
 - System . out . printf ( " \ t % - " + offset + " s % 10d % 10d % n " , entry . get ( " string " ) . toString ( ) , entry . get ( " count " ) , entry . get ( " error " ) ) ; 
 + System . out . println ( " \ t Nothing recorded during sampling period . . . " ) ; 
 } 
 - first = false ; 
 } 
 } 
 - } 
 \ No newline at end of file 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / tools / TopPartitionsTest . java b / test / unit / org / apache / cassandra / tools / TopPartitionsTest . java 
 new file mode 100644 
 index 0000000 . . 64cea3a 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / tools / TopPartitionsTest . java 
 @ @ - 0 , 0 + 1 , 67 @ @ 
 + package org . apache . cassandra . tools ; 
 + 
 + import static java . lang . String . format ; 
 + import static org . apache . cassandra . cql3 . QueryProcessor . executeInternal ; 
 + import static org . junit . Assert . assertEquals ; 
 + 
 + import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . concurrent . ArrayBlockingQueue ; 
 + import java . util . concurrent . BlockingQueue ; 
 + import java . util . concurrent . Executors ; 
 + import java . util . concurrent . TimeUnit ; 
 + 
 + import javax . management . openmbean . CompositeData ; 
 + import javax . management . openmbean . TabularDataSupport ; 
 + 
 + import org . apache . cassandra . SchemaLoader ; 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . db . SystemKeyspace ; 
 + import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . service . StorageService ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + import com . google . common . collect . Lists ; 
 + 
 + public class TopPartitionsTest 
 + { 
 + @ BeforeClass 
 + public static void loadSchema ( ) throws ConfigurationException 
 + { 
 + SchemaLoader . prepareServer ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testServiceTopPartitionsNoArg ( ) throws Exception 
 + { 
 + BlockingQueue < Map < String , Map < String , CompositeData > > > q = new ArrayBlockingQueue < > ( 1 ) ; 
 + ColumnFamilyStore . all ( ) ; 
 + Executors . newCachedThreadPool ( ) . execute ( ( ) - > 
 + { 
 + try 
 + { 
 + q . put ( StorageService . instance . samplePartitions ( 1000 , 100 , 10 , Lists . newArrayList ( " READS " , " WRITES " ) ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + e . printStackTrace ( ) ; 
 + } 
 + } ) ; 
 + SystemKeyspace . persistLocalMetadata ( ) ; 
 + Map < String , Map < String , CompositeData > > result = q . poll ( 11 , TimeUnit . SECONDS ) ; 
 + List < CompositeData > cd = ( List < CompositeData > ) ( Object ) Lists . newArrayList ( ( ( TabularDataSupport ) result . get ( " system . local " ) . get ( " WRITES " ) . get ( " partitions " ) ) . values ( ) ) ; 
 + assertEquals ( 1 , cd . size ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testServiceTopPartitionsSingleTable ( ) throws Exception 
 + { 
 + ColumnFamilyStore . getIfExists ( " system " , " local " ) . beginLocalSampling ( " READS " , 5 ) ; 
 + String req = " SELECT * FROM system . % s WHERE key = ' % s ' " ; 
 + executeInternal ( format ( req , SystemKeyspace . LOCAL , SystemKeyspace . LOCAL ) ) ; 
 + CompositeData result = ColumnFamilyStore . getIfExists ( " system " , " local " ) . finishLocalSampling ( " READS " , 5 ) ; 
 + List < CompositeData > cd = ( List < CompositeData > ) ( Object ) Lists . newArrayList ( ( ( TabularDataSupport ) result . get ( " partitions " ) ) . values ( ) ) ; 
 + assertEquals ( 1 , cd . size ( ) ) ; 
 + } 
 + }

NEAREST DIFF:
ELIMINATEDSENTENCE
