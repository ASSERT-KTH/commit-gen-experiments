BLEU SCORE: 0.06567274736060397

TEST MSG: Remove UDF - as - class functionality
GENERATED MSG: Accept dollar - quoted strings in CQL

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b6a3766 . . cd3950f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 21 + 1 , 16 @ @ <nl> 3 . 0 <nl> * Keep sstable levels when bootstrapping ( CASSANDRA - 7460 ) <nl> * Add Sigar library and perform basic OS settings check on startup ( CASSANDRA - 7838 ) <nl> - * Support for scripting languages in user - defined functions ( CASSANDRA - 7526 ) <nl> * Support for aggregation functions ( CASSANDRA - 4914 ) <nl> - * Improve query to read paxos table on propose ( CASSANDRA - 7929 ) <nl> * Remove cassandra - cli ( CASSANDRA - 7920 ) <nl> - * Optimize java source - based UDF invocation ( CASSANDRA - 7924 ) <nl> * Accept dollar quoted strings in CQL ( CASSANDRA - 7769 ) <nl> * Make assassinate a first class command ( CASSANDRA - 7935 ) <nl> * Support IN clause on any clustering column ( CASSANDRA - 4762 ) <nl> * Improve compaction logging ( CASSANDRA - 7818 ) <nl> * Remove YamlFileNetworkTopologySnitch ( CASSANDRA - 7917 ) <nl> - * Support Java source code for user - defined functions ( CASSANDRA - 7562 ) <nl> - * Require arg types to disambiguate UDF drops ( CASSANDRA - 7812 ) <nl> * Do anticompaction in groups ( CASSANDRA - 6851 ) <nl> - * Verify that UDF class methods are static ( CASSANDRA - 7781 ) <nl> - * Support pure user - defined functions ( CASSANDRA - 7395 , 7740 ) <nl> + * Support pure user - defined functions ( CASSANDRA - 7395 , 7526 , 7562 , 7740 , 7781 , 7929 , <nl> + 7924 , 7812 , 8063 ) <nl> * Permit configurable timestamps with cassandra - stress ( CASSANDRA - 7416 ) <nl> * Move sstable RandomAccessReader to nio2 , which allows using the <nl> FILE _ SHARE _ DELETE flag on Windows ( CASSANDRA - 4050 ) <nl> diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py <nl> index 69fc277 . . 6980216 100644 <nl> - - - a / pylib / cqlshlib / cql3handling . py <nl> + + + b / pylib / cqlshlib / cql3handling . py <nl> @ @ - 1004 , 14 + 1004 , 7 @ @ syntax _ rules + = r ' ' ' <nl> ( " , " [ newcolname ] = < cident > < storageType > ) * ) ? <nl> " ) " ) ? <nl> " RETURNS " < storageType > <nl> - ( <nl> - ( " LANGUAGE " < cident > " AS " <nl> - ( <nl> - < stringLiteral > <nl> - ) <nl> - ) <nl> - | ( " USING " < stringLiteral > ) <nl> - ) <nl> + " LANGUAGE " < cident > " AS " < stringLiteral > <nl> ; <nl> <nl> ' ' ' <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> index 2ec9746 . . 81f7d25 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Cql . g <nl> + + + b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> @ @ - 493 , 8 + 493 , 6 @ @ createFunctionStatement returns [ CreateFunctionStatement expr ] <nl> boolean ifNotExists = false ; <nl> <nl> boolean deterministic = true ; <nl> - String language = " class " ; <nl> - String bodyOrClassName = null ; <nl> List < ColumnIdentifier > argsNames = new ArrayList < > ( ) ; <nl> List < CQL3Type . Raw > argsTypes = new ArrayList < > ( ) ; <nl> } <nl> @ @ - 509 , 19 + 507 , 10 @ @ createFunctionStatement returns [ CreateFunctionStatement expr ] <nl> ( ' , ' k = cident v = comparatorType { argsNames . add ( k ) ; argsTypes . add ( v ) ; } ) * <nl> ) ? <nl> ' ) ' <nl> - K _ RETURNS <nl> - rt = comparatorType <nl> - ( <nl> - ( K _ USING cls = STRING _ LITERAL { bodyOrClassName = $ cls . text ; } ) <nl> - | ( K _ LANGUAGE l = IDENT { language = $ l . text ; } K _ AS <nl> - ( <nl> - ( body = STRING _ LITERAL <nl> - { bodyOrClassName = $ body . text ; } <nl> - ) <nl> - ) <nl> - ) <nl> - ) <nl> - { $ expr = new CreateFunctionStatement ( fn , language . toLowerCase ( ) , bodyOrClassName , deterministic , argsNames , argsTypes , rt , orReplace , ifNotExists ) ; } <nl> + K _ RETURNS rt = comparatorType <nl> + K _ LANGUAGE language = IDENT <nl> + K _ AS body = STRING _ LITERAL <nl> + { $ expr = new CreateFunctionStatement ( fn , $ language . text . toLowerCase ( ) , $ body . text , deterministic , argsNames , argsTypes , rt , orReplace , ifNotExists ) ; } <nl> ; <nl> <nl> dropFunctionStatement returns [ DropFunctionStatement expr ] <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / ReflectionBasedUDF . java b / src / java / org / apache / cassandra / cql3 / functions / ReflectionBasedUDF . java <nl> deleted file mode 100644 <nl> index 911537f . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / ReflectionBasedUDF . java <nl> + + + / dev / null <nl> @ @ - 1 , 127 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . cql3 . functions ; <nl> - <nl> - import java . lang . invoke . MethodHandle ; <nl> - import java . lang . invoke . MethodHandles ; <nl> - import java . lang . invoke . MethodType ; <nl> - import java . nio . ByteBuffer ; <nl> - import java . util . Arrays ; <nl> - import java . util . List ; <nl> - <nl> - import org . apache . cassandra . cql3 . * ; <nl> - import org . apache . cassandra . db . marshal . AbstractType ; <nl> - import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> - <nl> - / * * <nl> - * User - defined function using a method in a class loaded on the classpath by <nl> - * reflection . <nl> - * <nl> - * This is used when the LANGUAGE of the UDF definition is " class " . <nl> - * / <nl> - final class ReflectionBasedUDF extends UDFunction <nl> - { <nl> - private final MethodHandle method ; <nl> - <nl> - ReflectionBasedUDF ( FunctionName name , <nl> - List < ColumnIdentifier > argNames , <nl> - List < AbstractType < ? > > argTypes , <nl> - AbstractType < ? > returnType , <nl> - String language , <nl> - String body , <nl> - boolean deterministic ) <nl> - throws InvalidRequestException <nl> - { <nl> - super ( name , argNames , argTypes , returnType , language , body , deterministic ) ; <nl> - assert language . equals ( " class " ) ; <nl> - this . method = resolveMethod ( ) ; <nl> - } <nl> - <nl> - private MethodHandle resolveMethod ( ) throws InvalidRequestException <nl> - { <nl> - Class < ? > jReturnType = javaType ( returnType ) ; <nl> - Class < ? > [ ] paramTypes = javaParamTypes ( argTypes ) ; <nl> - <nl> - String className ; <nl> - String methodName ; <nl> - int i = body . indexOf ( ' # ' ) ; <nl> - if ( i ! = - 1 ) <nl> - { <nl> - methodName = body . substring ( i + 1 ) ; <nl> - className = body . substring ( 0 , i ) ; <nl> - } <nl> - else <nl> - { <nl> - methodName = name . name ; <nl> - className = body ; <nl> - } <nl> - try <nl> - { <nl> - Class < ? > cls = Class . forName ( className , false , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> - <nl> - MethodHandles . Lookup handles = MethodHandles . lookup ( ) ; <nl> - MethodType methodType = MethodType . methodType ( jReturnType , paramTypes ) ; <nl> - MethodHandle handle = handles . findStatic ( cls , methodName , methodType ) ; <nl> - <nl> - return handle ; <nl> - } <nl> - catch ( ClassNotFoundException e ) <nl> - { <nl> - throw new InvalidRequestException ( " Class " + className + " does not exist " ) ; <nl> - } <nl> - catch ( NoSuchMethodException e ) <nl> - { <nl> - throw new InvalidRequestException ( " Method ' public static " + jReturnType . getName ( ) + ' ' + <nl> - className + ' . ' + methodName + ' ( ' + Arrays . toString ( paramTypes ) + <nl> - " ) ' does not exist - check for static , argument types and return type " ) ; <nl> - } <nl> - catch ( IllegalAccessException e ) <nl> - { <nl> - throw new InvalidRequestException ( " Method " + className + ' . ' + methodName + ' ( ' + Arrays . toString ( paramTypes ) + " ) is not accessible " ) ; <nl> - } <nl> - } <nl> - <nl> - public ByteBuffer execute ( List < ByteBuffer > parameters ) throws InvalidRequestException <nl> - { <nl> - Object [ ] parms = new Object [ argTypes . size ( ) ] ; <nl> - for ( int i = 0 ; i < parms . length ; i + + ) <nl> - { <nl> - ByteBuffer bb = parameters . get ( i ) ; <nl> - if ( bb ! = null ) <nl> - parms [ i ] = argTypes . get ( i ) . compose ( bb ) ; <nl> - } <nl> - <nl> - Object result ; <nl> - try <nl> - { <nl> - result = method . invokeWithArguments ( parms ) ; <nl> - @ SuppressWarnings ( " unchecked " ) ByteBuffer r = result ! = null ? ( ( AbstractType ) returnType ) . decompose ( result ) : null ; <nl> - return r ; <nl> - } <nl> - catch ( VirtualMachineError e ) <nl> - { <nl> - / / handle OutOfMemoryError and other fatals not here ! <nl> - throw e ; <nl> - } <nl> - catch ( Throwable e ) <nl> - { <nl> - logger . error ( " Invocation of function ' { } ' failed " , this , e ) ; <nl> - throw new InvalidRequestException ( " Invocation of function ' " + this + " ' failed : " + e ) ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> index 8c51b9e . . 3741008 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> @ @ - 82 , 7 + 82 , 6 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> { <nl> switch ( language ) <nl> { <nl> - case " class " : return new ReflectionBasedUDF ( name , argNames , argTypes , returnType , language , body , deterministic ) ; <nl> case " java " : return JavaSourceUDFFactory . buildUDF ( name , argNames , argTypes , returnType , body , deterministic ) ; <nl> default : return new ScriptBasedUDF ( name , argNames , argTypes , returnType , language , body , deterministic ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / UFTest . java b / test / unit / org / apache / cassandra / cql3 / UFTest . java <nl> index 46db578 . . 95bede4 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / UFTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / UFTest . java <nl> @ @ - 27 , 59 + 27 , 6 @ @ import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> <nl> public class UFTest extends CQLTester <nl> { <nl> - public static Double sin ( Double val ) <nl> - { <nl> - return val ! = null ? Math . sin ( val ) : null ; <nl> - } <nl> - <nl> - public static Float sin ( Float val ) <nl> - { <nl> - return val ! = null ? ( float ) Math . sin ( val ) : null ; <nl> - } <nl> - <nl> - public static Double badSin ( Double val ) <nl> - { <nl> - return 42 . 0 ; <nl> - } <nl> - <nl> - public static String badSinBadReturn ( Double val ) <nl> - { <nl> - return " foo " ; <nl> - } <nl> - <nl> - public Float nonStaticMethod ( Float val ) <nl> - { <nl> - return new Float ( 1 . 0 ) ; <nl> - } <nl> - <nl> - private static Float privateMethod ( Float val ) <nl> - { <nl> - return new Float ( 1 . 0 ) ; <nl> - } <nl> - <nl> - public static String repeat ( String v , Integer n ) <nl> - { <nl> - StringBuilder sb = new StringBuilder ( ) ; <nl> - for ( int i = 0 ; i < n ; i + + ) <nl> - sb . append ( v ) ; <nl> - return sb . toString ( ) ; <nl> - } <nl> - <nl> - public static String overloaded ( String v ) <nl> - { <nl> - return " f1 " ; <nl> - } <nl> - <nl> - public static String overloaded ( Integer v ) <nl> - { <nl> - return " f2 " ; <nl> - } <nl> - <nl> - public static String overloaded ( String v1 , String v2 ) <nl> - { <nl> - return " f3 " ; <nl> - } <nl> - <nl> @ Test <nl> public void testFunctionCreationAndDrop ( ) throws Throwable <nl> { <nl> @ @ - 89 , 26 + 36 , 12 @ @ public class UFTest extends CQLTester <nl> execute ( " INSERT INTO % s ( key , d ) VALUES ( ? , ? ) " , 2 , 2d ) ; <nl> execute ( " INSERT INTO % s ( key , d ) VALUES ( ? , ? ) " , 3 , 3d ) ; <nl> <nl> - / / creation with a bad class <nl> - assertInvalid ( " CREATE FUNCTION foo : : sin1 ( input double ) RETURNS double USING ' org . apache . cassandra . cql3 . DoesNotExist # doesnotexist ' " ) ; <nl> - / / and a good class but inexisting method <nl> - assertInvalid ( " CREATE FUNCTION foo : : sin2 ( input double ) RETURNS double USING ' org . apache . cassandra . cql3 . UFTest # doesnotexist ' " ) ; <nl> - / / with a non static method <nl> - assertInvalid ( " CREATE FUNCTION foo : : sin3 ( input float ) RETURNS float USING ' org . apache . cassandra . cql3 . UFTest # nonStaticMethod ' " ) ; <nl> - / / with a non public method <nl> - assertInvalid ( " CREATE FUNCTION foo : : sin4 ( input float ) RETURNS float USING ' org . apache . cassandra . cql3 . UFTest # privateMethod ' " ) ; <nl> - <nl> - / / creation with bad argument types <nl> - assertInvalid ( " CREATE FUNCTION foo : : sin5 ( input text ) RETURNS double USING ' org . apache . cassandra . cql3 . UFTest # sin ' " ) ; <nl> - / / with bad return types <nl> - assertInvalid ( " CREATE FUNCTION foo : : sin6 ( input double ) RETURNS text USING ' org . apache . cassandra . cql3 . UFTest # sin ' " ) ; <nl> - <nl> / / simple creation <nl> - execute ( " CREATE FUNCTION foo : : sin ( input double ) RETURNS double USING ' org . apache . cassandra . cql3 . UFTest # sin ' " ) ; <nl> + execute ( " CREATE FUNCTION foo : : sin ( input double ) RETURNS double LANGUAGE java AS ' return Double . valueOf ( Math . sin ( input . doubleValue ( ) ) ) ; ' " ) ; <nl> / / check we can ' t recreate the same function <nl> - assertInvalid ( " CREATE FUNCTION foo : : sin ( input double ) RETURNS double USING ' org . apache . cassandra . cql3 . UFTest # sin ' " ) ; <nl> + assertInvalid ( " CREATE FUNCTION foo : : sin ( input double ) RETURNS double LANGUAGE java AS ' return Double . valueOf ( Math . sin ( input . doubleValue ( ) ) ) ; ' " ) ; <nl> / / but that it doesn ' t complay with " IF NOT EXISTS " <nl> - execute ( " CREATE FUNCTION IF NOT EXISTS foo : : sin ( input double ) RETURNS double USING ' org . apache . cassandra . cql3 . UFTest # sin ' " ) ; <nl> + execute ( " CREATE FUNCTION IF NOT EXISTS foo : : sin ( input double ) RETURNS double LANGUAGE java AS ' return Double . valueOf ( Math . sin ( input . doubleValue ( ) ) ) ; ' " ) ; <nl> <nl> / / Validate that it works as expected <nl> assertRows ( execute ( " SELECT key , foo : : sin ( d ) FROM % s " ) , <nl> @ @ - 117 , 10 + 50 , 8 @ @ public class UFTest extends CQLTester <nl> row ( 3 , Math . sin ( 3d ) ) <nl> ) ; <nl> <nl> - / / Replace the method with incompatible return type <nl> - assertInvalid ( " CREATE OR REPLACE FUNCTION foo : : sin ( input double ) RETURNS text USING ' org . apache . cassandra . cql3 . UFTest # badSinBadReturn ' " ) ; <nl> / / proper replacement <nl> - execute ( " CREATE OR REPLACE FUNCTION foo : : sin ( input double ) RETURNS double USING ' org . apache . cassandra . cql3 . UFTest # badSin ' " ) ; <nl> + execute ( " CREATE OR REPLACE FUNCTION foo : : sin ( input double ) RETURNS double LANGUAGE java AS ' return Double . valueOf ( 42d ) ; ' " ) ; <nl> <nl> / / Validate the method as been replaced <nl> assertRows ( execute ( " SELECT key , foo : : sin ( d ) FROM % s " ) , <nl> @ @ - 130 , 7 + 61 , 7 @ @ public class UFTest extends CQLTester <nl> ) ; <nl> <nl> / / same function but without namespace <nl> - execute ( " CREATE FUNCTION sin ( input double ) RETURNS double USING ' org . apache . cassandra . cql3 . UFTest # sin ' " ) ; <nl> + execute ( " CREATE FUNCTION sin ( input double ) RETURNS double LANGUAGE java AS ' return Double . valueOf ( Math . sin ( input . doubleValue ( ) ) ) ; ' " ) ; <nl> assertRows ( execute ( " SELECT key , sin ( d ) FROM % s " ) , <nl> row ( 1 , Math . sin ( 1d ) ) , <nl> row ( 2 , Math . sin ( 2d ) ) , <nl> @ @ - 161 , 7 + 92 , 10 @ @ public class UFTest extends CQLTester <nl> <nl> execute ( " INSERT INTO % s ( v ) VALUES ( ? ) " , " aaa " ) ; <nl> <nl> - execute ( " CREATE FUNCTION repeat ( v text , n int ) RETURNS text USING ' org . apache . cassandra . cql3 . UFTest # repeat ' " ) ; <nl> + execute ( " CREATE FUNCTION repeat ( v text , n int ) RETURNS text LANGUAGE java AS ' StringBuilder sb = new StringBuilder ( ) ; \ n " + <nl> + " for ( int i = 0 ; i < n . intValue ( ) ; i + + ) \ n " + <nl> + " sb . append ( v ) ; \ n " + <nl> + " return sb . toString ( ) ; ' " ) ; <nl> <nl> assertRows ( execute ( " SELECT v FROM % s WHERE v = repeat ( ? , ? ) " , " a " , 3 ) , row ( " aaa " ) ) ; <nl> assertEmpty ( execute ( " SELECT v FROM % s WHERE v = repeat ( ? , ? ) " , " a " , 2 ) ) ; <nl> @ @ - 174 , 13 + 108 , 13 @ @ public class UFTest extends CQLTester <nl> <nl> execute ( " INSERT INTO % s ( k , v ) VALUES ( ? , ? ) " , " f2 " , 1 ) ; <nl> <nl> - execute ( " CREATE FUNCTION overloaded ( v varchar ) RETURNS text USING ' org . apache . cassandra . cql3 . UFTest ' " ) ; <nl> - execute ( " CREATE OR REPLACE FUNCTION overloaded ( i int ) RETURNS text USING ' org . apache . cassandra . cql3 . UFTest ' " ) ; <nl> - execute ( " CREATE OR REPLACE FUNCTION overloaded ( v1 text , v2 text ) RETURNS text USING ' org . apache . cassandra . cql3 . UFTest ' " ) ; <nl> - execute ( " CREATE OR REPLACE FUNCTION overloaded ( v ascii ) RETURNS text USING ' org . apache . cassandra . cql3 . UFTest ' " ) ; <nl> + execute ( " CREATE FUNCTION overloaded ( v varchar ) RETURNS text LANGUAGE java AS ' return \ " f1 \ " ; ' " ) ; <nl> + execute ( " CREATE OR REPLACE FUNCTION overloaded ( i int ) RETURNS text LANGUAGE java AS ' return \ " f2 \ " ; ' " ) ; <nl> + execute ( " CREATE OR REPLACE FUNCTION overloaded ( v1 text , v2 text ) RETURNS text LANGUAGE java AS ' return \ " f3 \ " ; ' " ) ; <nl> + execute ( " CREATE OR REPLACE FUNCTION overloaded ( v ascii ) RETURNS text LANGUAGE java AS ' return \ " f1 \ " ; ' " ) ; <nl> <nl> / / text = = varchar , so this should be considered as a duplicate <nl> - assertInvalid ( " CREATE FUNCTION overloaded ( v varchar ) RETURNS text USING ' org . apache . cassandra . cql3 . UFTest ' " ) ; <nl> + assertInvalid ( " CREATE FUNCTION overloaded ( v varchar ) RETURNS text LANGUAGE java AS ' return \ " f1 \ " ; ' " ) ; <nl> <nl> assertRows ( execute ( " SELECT overloaded ( k ) , overloaded ( v ) , overloaded ( k , k ) FROM % s " ) , <nl> row ( " f1 " , " f2 " , " f3 " ) <nl> @ @ - 445 , 7 + 379 , 7 @ @ public class UFTest extends CQLTester <nl> <nl> execute ( " create function foo : : pgfun1 ( input double ) returns text language java \ n " + <nl> " AS $ $ " + functionBody + " $ $ ; " ) ; <nl> - execute ( " CREATE FUNCTION foo : : pgsin ( input double ) RETURNS double USING $ $ org . apache . cassandra . cql3 . UFTest # sin $ $ " ) ; <nl> + execute ( " CREATE FUNCTION foo : : pgsin ( input double ) RETURNS double LANGUAGE java AS $ $ return Double . valueOf ( Math . sin ( input . doubleValue ( ) ) ) ; $ $ " ) ; <nl> <nl> assertRows ( execute ( " SELECT language , body FROM system . schema _ functions WHERE namespace = ' foo ' AND name = ' pgfun1 ' " ) , <nl> row ( " java " , functionBody ) ) ; <nl> @ @ - 600 , 7 + 534 , 7 @ @ public class UFTest extends CQLTester <nl> execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS decimal LANGUAGE javascript \ n " + <nl> " AS ' 100 ; ' ; " ) ; <nl> assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , <nl> - row ( 1 , 1d , BigDecimal . valueOf ( 100d ) ) ) ; <nl> + row ( 1 , 1d , BigDecimal . valueOf ( 100L ) ) ) ; <nl> execute ( " DROP FUNCTION js ( double ) " ) ; <nl> <nl> / / declared rtype = decimal , return type = double
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b6a3766 . . cd3950f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 21 + 1 , 16 @ @ 
 3 . 0 
 * Keep sstable levels when bootstrapping ( CASSANDRA - 7460 ) 
 * Add Sigar library and perform basic OS settings check on startup ( CASSANDRA - 7838 ) 
 - * Support for scripting languages in user - defined functions ( CASSANDRA - 7526 ) 
 * Support for aggregation functions ( CASSANDRA - 4914 ) 
 - * Improve query to read paxos table on propose ( CASSANDRA - 7929 ) 
 * Remove cassandra - cli ( CASSANDRA - 7920 ) 
 - * Optimize java source - based UDF invocation ( CASSANDRA - 7924 ) 
 * Accept dollar quoted strings in CQL ( CASSANDRA - 7769 ) 
 * Make assassinate a first class command ( CASSANDRA - 7935 ) 
 * Support IN clause on any clustering column ( CASSANDRA - 4762 ) 
 * Improve compaction logging ( CASSANDRA - 7818 ) 
 * Remove YamlFileNetworkTopologySnitch ( CASSANDRA - 7917 ) 
 - * Support Java source code for user - defined functions ( CASSANDRA - 7562 ) 
 - * Require arg types to disambiguate UDF drops ( CASSANDRA - 7812 ) 
 * Do anticompaction in groups ( CASSANDRA - 6851 ) 
 - * Verify that UDF class methods are static ( CASSANDRA - 7781 ) 
 - * Support pure user - defined functions ( CASSANDRA - 7395 , 7740 ) 
 + * Support pure user - defined functions ( CASSANDRA - 7395 , 7526 , 7562 , 7740 , 7781 , 7929 , 
 + 7924 , 7812 , 8063 ) 
 * Permit configurable timestamps with cassandra - stress ( CASSANDRA - 7416 ) 
 * Move sstable RandomAccessReader to nio2 , which allows using the 
 FILE _ SHARE _ DELETE flag on Windows ( CASSANDRA - 4050 ) 
 diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py 
 index 69fc277 . . 6980216 100644 
 - - - a / pylib / cqlshlib / cql3handling . py 
 + + + b / pylib / cqlshlib / cql3handling . py 
 @ @ - 1004 , 14 + 1004 , 7 @ @ syntax _ rules + = r ' ' ' 
 ( " , " [ newcolname ] = < cident > < storageType > ) * ) ? 
 " ) " ) ? 
 " RETURNS " < storageType > 
 - ( 
 - ( " LANGUAGE " < cident > " AS " 
 - ( 
 - < stringLiteral > 
 - ) 
 - ) 
 - | ( " USING " < stringLiteral > ) 
 - ) 
 + " LANGUAGE " < cident > " AS " < stringLiteral > 
 ; 
 
 ' ' ' 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g 
 index 2ec9746 . . 81f7d25 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Cql . g 
 + + + b / src / java / org / apache / cassandra / cql3 / Cql . g 
 @ @ - 493 , 8 + 493 , 6 @ @ createFunctionStatement returns [ CreateFunctionStatement expr ] 
 boolean ifNotExists = false ; 
 
 boolean deterministic = true ; 
 - String language = " class " ; 
 - String bodyOrClassName = null ; 
 List < ColumnIdentifier > argsNames = new ArrayList < > ( ) ; 
 List < CQL3Type . Raw > argsTypes = new ArrayList < > ( ) ; 
 } 
 @ @ - 509 , 19 + 507 , 10 @ @ createFunctionStatement returns [ CreateFunctionStatement expr ] 
 ( ' , ' k = cident v = comparatorType { argsNames . add ( k ) ; argsTypes . add ( v ) ; } ) * 
 ) ? 
 ' ) ' 
 - K _ RETURNS 
 - rt = comparatorType 
 - ( 
 - ( K _ USING cls = STRING _ LITERAL { bodyOrClassName = $ cls . text ; } ) 
 - | ( K _ LANGUAGE l = IDENT { language = $ l . text ; } K _ AS 
 - ( 
 - ( body = STRING _ LITERAL 
 - { bodyOrClassName = $ body . text ; } 
 - ) 
 - ) 
 - ) 
 - ) 
 - { $ expr = new CreateFunctionStatement ( fn , language . toLowerCase ( ) , bodyOrClassName , deterministic , argsNames , argsTypes , rt , orReplace , ifNotExists ) ; } 
 + K _ RETURNS rt = comparatorType 
 + K _ LANGUAGE language = IDENT 
 + K _ AS body = STRING _ LITERAL 
 + { $ expr = new CreateFunctionStatement ( fn , $ language . text . toLowerCase ( ) , $ body . text , deterministic , argsNames , argsTypes , rt , orReplace , ifNotExists ) ; } 
 ; 
 
 dropFunctionStatement returns [ DropFunctionStatement expr ] 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / ReflectionBasedUDF . java b / src / java / org / apache / cassandra / cql3 / functions / ReflectionBasedUDF . java 
 deleted file mode 100644 
 index 911537f . . 0000000 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / ReflectionBasedUDF . java 
 + + + / dev / null 
 @ @ - 1 , 127 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . cql3 . functions ; 
 - 
 - import java . lang . invoke . MethodHandle ; 
 - import java . lang . invoke . MethodHandles ; 
 - import java . lang . invoke . MethodType ; 
 - import java . nio . ByteBuffer ; 
 - import java . util . Arrays ; 
 - import java . util . List ; 
 - 
 - import org . apache . cassandra . cql3 . * ; 
 - import org . apache . cassandra . db . marshal . AbstractType ; 
 - import org . apache . cassandra . exceptions . InvalidRequestException ; 
 - 
 - / * * 
 - * User - defined function using a method in a class loaded on the classpath by 
 - * reflection . 
 - * 
 - * This is used when the LANGUAGE of the UDF definition is " class " . 
 - * / 
 - final class ReflectionBasedUDF extends UDFunction 
 - { 
 - private final MethodHandle method ; 
 - 
 - ReflectionBasedUDF ( FunctionName name , 
 - List < ColumnIdentifier > argNames , 
 - List < AbstractType < ? > > argTypes , 
 - AbstractType < ? > returnType , 
 - String language , 
 - String body , 
 - boolean deterministic ) 
 - throws InvalidRequestException 
 - { 
 - super ( name , argNames , argTypes , returnType , language , body , deterministic ) ; 
 - assert language . equals ( " class " ) ; 
 - this . method = resolveMethod ( ) ; 
 - } 
 - 
 - private MethodHandle resolveMethod ( ) throws InvalidRequestException 
 - { 
 - Class < ? > jReturnType = javaType ( returnType ) ; 
 - Class < ? > [ ] paramTypes = javaParamTypes ( argTypes ) ; 
 - 
 - String className ; 
 - String methodName ; 
 - int i = body . indexOf ( ' # ' ) ; 
 - if ( i ! = - 1 ) 
 - { 
 - methodName = body . substring ( i + 1 ) ; 
 - className = body . substring ( 0 , i ) ; 
 - } 
 - else 
 - { 
 - methodName = name . name ; 
 - className = body ; 
 - } 
 - try 
 - { 
 - Class < ? > cls = Class . forName ( className , false , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 - 
 - MethodHandles . Lookup handles = MethodHandles . lookup ( ) ; 
 - MethodType methodType = MethodType . methodType ( jReturnType , paramTypes ) ; 
 - MethodHandle handle = handles . findStatic ( cls , methodName , methodType ) ; 
 - 
 - return handle ; 
 - } 
 - catch ( ClassNotFoundException e ) 
 - { 
 - throw new InvalidRequestException ( " Class " + className + " does not exist " ) ; 
 - } 
 - catch ( NoSuchMethodException e ) 
 - { 
 - throw new InvalidRequestException ( " Method ' public static " + jReturnType . getName ( ) + ' ' + 
 - className + ' . ' + methodName + ' ( ' + Arrays . toString ( paramTypes ) + 
 - " ) ' does not exist - check for static , argument types and return type " ) ; 
 - } 
 - catch ( IllegalAccessException e ) 
 - { 
 - throw new InvalidRequestException ( " Method " + className + ' . ' + methodName + ' ( ' + Arrays . toString ( paramTypes ) + " ) is not accessible " ) ; 
 - } 
 - } 
 - 
 - public ByteBuffer execute ( List < ByteBuffer > parameters ) throws InvalidRequestException 
 - { 
 - Object [ ] parms = new Object [ argTypes . size ( ) ] ; 
 - for ( int i = 0 ; i < parms . length ; i + + ) 
 - { 
 - ByteBuffer bb = parameters . get ( i ) ; 
 - if ( bb ! = null ) 
 - parms [ i ] = argTypes . get ( i ) . compose ( bb ) ; 
 - } 
 - 
 - Object result ; 
 - try 
 - { 
 - result = method . invokeWithArguments ( parms ) ; 
 - @ SuppressWarnings ( " unchecked " ) ByteBuffer r = result ! = null ? ( ( AbstractType ) returnType ) . decompose ( result ) : null ; 
 - return r ; 
 - } 
 - catch ( VirtualMachineError e ) 
 - { 
 - / / handle OutOfMemoryError and other fatals not here ! 
 - throw e ; 
 - } 
 - catch ( Throwable e ) 
 - { 
 - logger . error ( " Invocation of function ' { } ' failed " , this , e ) ; 
 - throw new InvalidRequestException ( " Invocation of function ' " + this + " ' failed : " + e ) ; 
 - } 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 index 8c51b9e . . 3741008 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 @ @ - 82 , 7 + 82 , 6 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 { 
 switch ( language ) 
 { 
 - case " class " : return new ReflectionBasedUDF ( name , argNames , argTypes , returnType , language , body , deterministic ) ; 
 case " java " : return JavaSourceUDFFactory . buildUDF ( name , argNames , argTypes , returnType , body , deterministic ) ; 
 default : return new ScriptBasedUDF ( name , argNames , argTypes , returnType , language , body , deterministic ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / UFTest . java b / test / unit / org / apache / cassandra / cql3 / UFTest . java 
 index 46db578 . . 95bede4 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / UFTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / UFTest . java 
 @ @ - 27 , 59 + 27 , 6 @ @ import org . apache . cassandra . exceptions . InvalidRequestException ; 
 
 public class UFTest extends CQLTester 
 { 
 - public static Double sin ( Double val ) 
 - { 
 - return val ! = null ? Math . sin ( val ) : null ; 
 - } 
 - 
 - public static Float sin ( Float val ) 
 - { 
 - return val ! = null ? ( float ) Math . sin ( val ) : null ; 
 - } 
 - 
 - public static Double badSin ( Double val ) 
 - { 
 - return 42 . 0 ; 
 - } 
 - 
 - public static String badSinBadReturn ( Double val ) 
 - { 
 - return " foo " ; 
 - } 
 - 
 - public Float nonStaticMethod ( Float val ) 
 - { 
 - return new Float ( 1 . 0 ) ; 
 - } 
 - 
 - private static Float privateMethod ( Float val ) 
 - { 
 - return new Float ( 1 . 0 ) ; 
 - } 
 - 
 - public static String repeat ( String v , Integer n ) 
 - { 
 - StringBuilder sb = new StringBuilder ( ) ; 
 - for ( int i = 0 ; i < n ; i + + ) 
 - sb . append ( v ) ; 
 - return sb . toString ( ) ; 
 - } 
 - 
 - public static String overloaded ( String v ) 
 - { 
 - return " f1 " ; 
 - } 
 - 
 - public static String overloaded ( Integer v ) 
 - { 
 - return " f2 " ; 
 - } 
 - 
 - public static String overloaded ( String v1 , String v2 ) 
 - { 
 - return " f3 " ; 
 - } 
 - 
 @ Test 
 public void testFunctionCreationAndDrop ( ) throws Throwable 
 { 
 @ @ - 89 , 26 + 36 , 12 @ @ public class UFTest extends CQLTester 
 execute ( " INSERT INTO % s ( key , d ) VALUES ( ? , ? ) " , 2 , 2d ) ; 
 execute ( " INSERT INTO % s ( key , d ) VALUES ( ? , ? ) " , 3 , 3d ) ; 
 
 - / / creation with a bad class 
 - assertInvalid ( " CREATE FUNCTION foo : : sin1 ( input double ) RETURNS double USING ' org . apache . cassandra . cql3 . DoesNotExist # doesnotexist ' " ) ; 
 - / / and a good class but inexisting method 
 - assertInvalid ( " CREATE FUNCTION foo : : sin2 ( input double ) RETURNS double USING ' org . apache . cassandra . cql3 . UFTest # doesnotexist ' " ) ; 
 - / / with a non static method 
 - assertInvalid ( " CREATE FUNCTION foo : : sin3 ( input float ) RETURNS float USING ' org . apache . cassandra . cql3 . UFTest # nonStaticMethod ' " ) ; 
 - / / with a non public method 
 - assertInvalid ( " CREATE FUNCTION foo : : sin4 ( input float ) RETURNS float USING ' org . apache . cassandra . cql3 . UFTest # privateMethod ' " ) ; 
 - 
 - / / creation with bad argument types 
 - assertInvalid ( " CREATE FUNCTION foo : : sin5 ( input text ) RETURNS double USING ' org . apache . cassandra . cql3 . UFTest # sin ' " ) ; 
 - / / with bad return types 
 - assertInvalid ( " CREATE FUNCTION foo : : sin6 ( input double ) RETURNS text USING ' org . apache . cassandra . cql3 . UFTest # sin ' " ) ; 
 - 
 / / simple creation 
 - execute ( " CREATE FUNCTION foo : : sin ( input double ) RETURNS double USING ' org . apache . cassandra . cql3 . UFTest # sin ' " ) ; 
 + execute ( " CREATE FUNCTION foo : : sin ( input double ) RETURNS double LANGUAGE java AS ' return Double . valueOf ( Math . sin ( input . doubleValue ( ) ) ) ; ' " ) ; 
 / / check we can ' t recreate the same function 
 - assertInvalid ( " CREATE FUNCTION foo : : sin ( input double ) RETURNS double USING ' org . apache . cassandra . cql3 . UFTest # sin ' " ) ; 
 + assertInvalid ( " CREATE FUNCTION foo : : sin ( input double ) RETURNS double LANGUAGE java AS ' return Double . valueOf ( Math . sin ( input . doubleValue ( ) ) ) ; ' " ) ; 
 / / but that it doesn ' t complay with " IF NOT EXISTS " 
 - execute ( " CREATE FUNCTION IF NOT EXISTS foo : : sin ( input double ) RETURNS double USING ' org . apache . cassandra . cql3 . UFTest # sin ' " ) ; 
 + execute ( " CREATE FUNCTION IF NOT EXISTS foo : : sin ( input double ) RETURNS double LANGUAGE java AS ' return Double . valueOf ( Math . sin ( input . doubleValue ( ) ) ) ; ' " ) ; 
 
 / / Validate that it works as expected 
 assertRows ( execute ( " SELECT key , foo : : sin ( d ) FROM % s " ) , 
 @ @ - 117 , 10 + 50 , 8 @ @ public class UFTest extends CQLTester 
 row ( 3 , Math . sin ( 3d ) ) 
 ) ; 
 
 - / / Replace the method with incompatible return type 
 - assertInvalid ( " CREATE OR REPLACE FUNCTION foo : : sin ( input double ) RETURNS text USING ' org . apache . cassandra . cql3 . UFTest # badSinBadReturn ' " ) ; 
 / / proper replacement 
 - execute ( " CREATE OR REPLACE FUNCTION foo : : sin ( input double ) RETURNS double USING ' org . apache . cassandra . cql3 . UFTest # badSin ' " ) ; 
 + execute ( " CREATE OR REPLACE FUNCTION foo : : sin ( input double ) RETURNS double LANGUAGE java AS ' return Double . valueOf ( 42d ) ; ' " ) ; 
 
 / / Validate the method as been replaced 
 assertRows ( execute ( " SELECT key , foo : : sin ( d ) FROM % s " ) , 
 @ @ - 130 , 7 + 61 , 7 @ @ public class UFTest extends CQLTester 
 ) ; 
 
 / / same function but without namespace 
 - execute ( " CREATE FUNCTION sin ( input double ) RETURNS double USING ' org . apache . cassandra . cql3 . UFTest # sin ' " ) ; 
 + execute ( " CREATE FUNCTION sin ( input double ) RETURNS double LANGUAGE java AS ' return Double . valueOf ( Math . sin ( input . doubleValue ( ) ) ) ; ' " ) ; 
 assertRows ( execute ( " SELECT key , sin ( d ) FROM % s " ) , 
 row ( 1 , Math . sin ( 1d ) ) , 
 row ( 2 , Math . sin ( 2d ) ) , 
 @ @ - 161 , 7 + 92 , 10 @ @ public class UFTest extends CQLTester 
 
 execute ( " INSERT INTO % s ( v ) VALUES ( ? ) " , " aaa " ) ; 
 
 - execute ( " CREATE FUNCTION repeat ( v text , n int ) RETURNS text USING ' org . apache . cassandra . cql3 . UFTest # repeat ' " ) ; 
 + execute ( " CREATE FUNCTION repeat ( v text , n int ) RETURNS text LANGUAGE java AS ' StringBuilder sb = new StringBuilder ( ) ; \ n " + 
 + " for ( int i = 0 ; i < n . intValue ( ) ; i + + ) \ n " + 
 + " sb . append ( v ) ; \ n " + 
 + " return sb . toString ( ) ; ' " ) ; 
 
 assertRows ( execute ( " SELECT v FROM % s WHERE v = repeat ( ? , ? ) " , " a " , 3 ) , row ( " aaa " ) ) ; 
 assertEmpty ( execute ( " SELECT v FROM % s WHERE v = repeat ( ? , ? ) " , " a " , 2 ) ) ; 
 @ @ - 174 , 13 + 108 , 13 @ @ public class UFTest extends CQLTester 
 
 execute ( " INSERT INTO % s ( k , v ) VALUES ( ? , ? ) " , " f2 " , 1 ) ; 
 
 - execute ( " CREATE FUNCTION overloaded ( v varchar ) RETURNS text USING ' org . apache . cassandra . cql3 . UFTest ' " ) ; 
 - execute ( " CREATE OR REPLACE FUNCTION overloaded ( i int ) RETURNS text USING ' org . apache . cassandra . cql3 . UFTest ' " ) ; 
 - execute ( " CREATE OR REPLACE FUNCTION overloaded ( v1 text , v2 text ) RETURNS text USING ' org . apache . cassandra . cql3 . UFTest ' " ) ; 
 - execute ( " CREATE OR REPLACE FUNCTION overloaded ( v ascii ) RETURNS text USING ' org . apache . cassandra . cql3 . UFTest ' " ) ; 
 + execute ( " CREATE FUNCTION overloaded ( v varchar ) RETURNS text LANGUAGE java AS ' return \ " f1 \ " ; ' " ) ; 
 + execute ( " CREATE OR REPLACE FUNCTION overloaded ( i int ) RETURNS text LANGUAGE java AS ' return \ " f2 \ " ; ' " ) ; 
 + execute ( " CREATE OR REPLACE FUNCTION overloaded ( v1 text , v2 text ) RETURNS text LANGUAGE java AS ' return \ " f3 \ " ; ' " ) ; 
 + execute ( " CREATE OR REPLACE FUNCTION overloaded ( v ascii ) RETURNS text LANGUAGE java AS ' return \ " f1 \ " ; ' " ) ; 
 
 / / text = = varchar , so this should be considered as a duplicate 
 - assertInvalid ( " CREATE FUNCTION overloaded ( v varchar ) RETURNS text USING ' org . apache . cassandra . cql3 . UFTest ' " ) ; 
 + assertInvalid ( " CREATE FUNCTION overloaded ( v varchar ) RETURNS text LANGUAGE java AS ' return \ " f1 \ " ; ' " ) ; 
 
 assertRows ( execute ( " SELECT overloaded ( k ) , overloaded ( v ) , overloaded ( k , k ) FROM % s " ) , 
 row ( " f1 " , " f2 " , " f3 " ) 
 @ @ - 445 , 7 + 379 , 7 @ @ public class UFTest extends CQLTester 
 
 execute ( " create function foo : : pgfun1 ( input double ) returns text language java \ n " + 
 " AS $ $ " + functionBody + " $ $ ; " ) ; 
 - execute ( " CREATE FUNCTION foo : : pgsin ( input double ) RETURNS double USING $ $ org . apache . cassandra . cql3 . UFTest # sin $ $ " ) ; 
 + execute ( " CREATE FUNCTION foo : : pgsin ( input double ) RETURNS double LANGUAGE java AS $ $ return Double . valueOf ( Math . sin ( input . doubleValue ( ) ) ) ; $ $ " ) ; 
 
 assertRows ( execute ( " SELECT language , body FROM system . schema _ functions WHERE namespace = ' foo ' AND name = ' pgfun1 ' " ) , 
 row ( " java " , functionBody ) ) ; 
 @ @ - 600 , 7 + 534 , 7 @ @ public class UFTest extends CQLTester 
 execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS decimal LANGUAGE javascript \ n " + 
 " AS ' 100 ; ' ; " ) ; 
 assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , 
 - row ( 1 , 1d , BigDecimal . valueOf ( 100d ) ) ) ; 
 + row ( 1 , 1d , BigDecimal . valueOf ( 100L ) ) ) ; 
 execute ( " DROP FUNCTION js ( double ) " ) ; 
 
 / / declared rtype = decimal , return type = double

NEAREST DIFF:
ELIMINATEDSENTENCE
