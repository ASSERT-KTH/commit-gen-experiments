BLEU SCORE: 0.11598118436136108

TEST MSG: CQLSSTableWriter causes ArrayIndexOutOfBoundsException
GENERATED MSG: merge from 1 . 0

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 460b07c . . a492c74 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 15 : <nl> + * Fix ArrayIndexOutOfBoundsException in CQLSSTableWriter ( CASSANDRA - 8978 ) <nl> * Add shutdown gossip state to prevent timeouts during rolling restarts ( CASSANDRA - 8336 ) <nl> * Fix running with java . net . preferIPv6Addresses = true ( CASSANDRA - 9137 ) <nl> * Fix failed bootstrap / replace attempts being persisted in system . peers ( CASSANDRA - 9180 ) <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / AbstractSSTableSimpleWriter . java b / src / java / org / apache / cassandra / io / sstable / AbstractSSTableSimpleWriter . java <nl> index af1c43c . . d089770 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / AbstractSSTableSimpleWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / AbstractSSTableSimpleWriter . java <nl> @ @ - 187 , 6 + 187 , 15 @ @ public abstract class AbstractSSTableSimpleWriter implements Closeable <nl> return currentKey ; <nl> } <nl> <nl> + / * * <nl> + * Package protected for use by AbstractCQLSSTableWriter . <nl> + * Not meant to be exposed publicly . <nl> + * / <nl> + boolean shouldStartNewRow ( ) throws IOException <nl> + { <nl> + return currentKey = = null ; <nl> + } <nl> + <nl> protected abstract void writeRow ( DecoratedKey key , ColumnFamily columnFamily ) throws IOException ; <nl> <nl> protected abstract ColumnFamily getColumnFamily ( ) throws IOException ; <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java <nl> index fb4c186 . . 84b2863 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java <nl> @ @ - 218 , 7 + 218 , 7 @ @ public class CQLSSTableWriter implements Closeable <nl> { <nl> for ( ByteBuffer key : keys ) <nl> { <nl> - if ( writer . currentKey ( ) = = null | | ! key . equals ( writer . currentKey ( ) . key ) ) <nl> + if ( writer . shouldStartNewRow ( ) | | ! key . equals ( writer . currentKey ( ) . key ) ) <nl> writer . newRow ( key ) ; <nl> insert . addUpdateForKey ( writer . currentColumnFamily ( ) , key , clusteringPrefix , params , false ) ; <nl> } <nl> @ @ - 532 , 6 + 532 , 8 @ @ public class CQLSSTableWriter implements Closeable <nl> * / <nl> private static class BufferedWriter extends SSTableSimpleUnsortedWriter <nl> { <nl> + private boolean needsSync = false ; <nl> + <nl> public BufferedWriter ( File directory , CFMetaData metadata , IPartitioner partitioner , long bufferSizeInMB ) <nl> { <nl> super ( directory , metadata , partitioner , bufferSizeInMB ) ; <nl> @ @ - 560 , 6 + 562 , 28 @ @ public class CQLSSTableWriter implements Closeable <nl> } ; <nl> } <nl> <nl> + @ Override <nl> + protected void replaceColumnFamily ( ) throws IOException <nl> + { <nl> + needsSync = true ; <nl> + } <nl> + <nl> + @ Override <nl> + / * * <nl> + * If we have marked that the column family is being replaced , when we start the next row , <nl> + * we should sync out the previous partition and create a new row based on the current value . <nl> + * / <nl> + boolean shouldStartNewRow ( ) throws IOException <nl> + { <nl> + if ( needsSync ) <nl> + { <nl> + needsSync = false ; <nl> + super . sync ( ) ; <nl> + return true ; <nl> + } <nl> + return super . shouldStartNewRow ( ) ; <nl> + } <nl> + <nl> protected void addColumn ( Column column ) throws IOException <nl> { <nl> throw new UnsupportedOperationException ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java <nl> index 5bddea3 . . 955214d 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java <nl> @ @ - 119 , 7 + 119 , 7 @ @ public class SSTableSimpleUnsortedWriter extends AbstractSSTableSimpleWriter <nl> <nl> / / We don ' t want to sync in writeRow ( ) only as this might blow up the bufferSize for wide rows . <nl> if ( currentSize > bufferSize ) <nl> - sync ( ) ; <nl> + replaceColumnFamily ( ) ; <nl> } <nl> <nl> protected ColumnFamily getColumnFamily ( ) throws IOException <nl> @ @ - 159 , 7 + 159 , 13 @ @ public class SSTableSimpleUnsortedWriter extends AbstractSSTableSimpleWriter <nl> } <nl> } <nl> <nl> - private void sync ( ) throws IOException <nl> + / / This is overridden by CQLSSTableWriter to hold off replacing column family until the next iteration through <nl> + protected void replaceColumnFamily ( ) throws IOException <nl> + { <nl> + sync ( ) ; <nl> + } <nl> + <nl> + protected void sync ( ) throws IOException <nl> { <nl> if ( buffer . isEmpty ( ) ) <nl> return ; <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java <nl> index 0922502 . . 94fe309 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java <nl> @ @ - 138 , 10 + 138 , 12 @ @ public class CQLSSTableWriterTest <nl> / / > 1MB and validate that this created more than 1 sstable . <nl> File tempdir = Files . createTempDir ( ) ; <nl> String schema = " CREATE TABLE ks . test ( " <nl> - + " k int PRIMARY KEY , " <nl> - + " v blob " <nl> + + " k int , " <nl> + + " c int , " <nl> + + " v blob , " <nl> + + " PRIMARY KEY ( k , c ) " <nl> + " ) " ; <nl> - String insert = " INSERT INTO ks . test ( k , v ) VALUES ( ? , ? ) " ; <nl> + String insert = " INSERT INTO ks . test ( k , c , v ) VALUES ( ? , ? , ? ) " ; <nl> CQLSSTableWriter writer = CQLSSTableWriter . builder ( ) <nl> . inDirectory ( tempdir ) <nl> . forTable ( schema ) <nl> @ @ - 152 , 8 + 154 , 8 @ @ public class CQLSSTableWriterTest <nl> <nl> ByteBuffer val = ByteBuffer . allocate ( 1024 * 1050 ) ; <nl> <nl> - writer . addRow ( 0 , val ) ; <nl> - writer . addRow ( 1 , val ) ; <nl> + writer . addRow ( 0 , 0 , val ) ; <nl> + writer . addRow ( 0 , 1 , val ) ; <nl> writer . close ( ) ; <nl> <nl> FilenameFilter filterDataFiles = new FilenameFilter ( )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d518830 . . 52cc2c1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 29 , 7 + 29 , 7 @ @ <nl> * add scheduler JMX metrics ( CASSANDRA - 2962 ) <nl> * add block level checksum for compressed data ( CASSANDRA - 1717 ) <nl> * make column family backed column map pluggable and introduce unsynchronized <nl> - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) <nl> + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) <nl> * refactoring of the secondary index api ( CASSANDRA - 2982 ) <nl> * make CL > ONE reads wait for digest reconciliation before returning <nl> ( CASSANDRA - 2494 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> index c316a85 . . 71c7213 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor <nl> this . reversed = reversed ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public AbstractType < ? > getComparator ( ) <nl> { <nl> return comparator ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 1239d1c . . 38bc0d7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer <nl> this . cfm = cfm ; <nl> } <nl> <nl> - public ColumnFamily cloneMeShallow ( ) <nl> + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) <nl> { <nl> - ColumnFamily cf = ColumnFamily . create ( cfm ) ; <nl> + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; <nl> / / since deletion info is immutable , aliasing it is fine <nl> cf . deletionInfo . set ( deletionInfo . get ( ) ) ; <nl> return cf ; <nl> } <nl> <nl> + public ColumnFamily cloneMeShallow ( ) <nl> + { <nl> + return cloneMeShallow ( columns . getFactory ( ) ) ; <nl> + } <nl> + <nl> public AbstractType getSubComparator ( ) <nl> { <nl> IColumnSerializer s = getColumnSerializer ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 0bfd1c5 . . 552d3e9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> - * tombstones that are no longer relevant . * / <nl> + / * * <nl> + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> + * tombstones that are no longer relevant . <nl> + * The returned column family won ' t be thread safe . <nl> + * / <nl> ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) <nl> { <nl> / / special case slicing the entire row : <nl> @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; <nl> if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) <nl> { <nl> - ColumnFamily cf = cached . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> if ( sc ! = null ) <nl> cf . addColumn ( sc , HeapAllocator . instance ) ; <nl> return removeDeleted ( cf , gcBefore ) ; <nl> @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> <nl> IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; <nl> - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; <nl> / / TODO this is necessary because when we collate supercolumns together , we don ' t check <nl> / / their subcolumns for relevance , so we need to do a second prune post facto here . <nl> diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> index 37f5a60 . . 624dec7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns <nl> public ISortedColumns cloneMe ( ) ; <nl> <nl> / * * <nl> + * Returns the factory used for this ISortedColumns implementation . <nl> + * / <nl> + public Factory getFactory ( ) ; <nl> + <nl> + / * * <nl> * Adds a column to this column map . <nl> * If a column with the same name is already present in the map , it will <nl> * be replaced by the newly added column . <nl> diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> index cd2488a . . 13a111a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new ThreadSafeSortedColumns ( this ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> index 34e83dc . . 6c3fc42 100644 <nl> - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new TreeMapBackedSortedColumns ( this ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 460b07c . . a492c74 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 15 : 
 + * Fix ArrayIndexOutOfBoundsException in CQLSSTableWriter ( CASSANDRA - 8978 ) 
 * Add shutdown gossip state to prevent timeouts during rolling restarts ( CASSANDRA - 8336 ) 
 * Fix running with java . net . preferIPv6Addresses = true ( CASSANDRA - 9137 ) 
 * Fix failed bootstrap / replace attempts being persisted in system . peers ( CASSANDRA - 9180 ) 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / AbstractSSTableSimpleWriter . java b / src / java / org / apache / cassandra / io / sstable / AbstractSSTableSimpleWriter . java 
 index af1c43c . . d089770 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / AbstractSSTableSimpleWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / AbstractSSTableSimpleWriter . java 
 @ @ - 187 , 6 + 187 , 15 @ @ public abstract class AbstractSSTableSimpleWriter implements Closeable 
 return currentKey ; 
 } 
 
 + / * * 
 + * Package protected for use by AbstractCQLSSTableWriter . 
 + * Not meant to be exposed publicly . 
 + * / 
 + boolean shouldStartNewRow ( ) throws IOException 
 + { 
 + return currentKey = = null ; 
 + } 
 + 
 protected abstract void writeRow ( DecoratedKey key , ColumnFamily columnFamily ) throws IOException ; 
 
 protected abstract ColumnFamily getColumnFamily ( ) throws IOException ; 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java 
 index fb4c186 . . 84b2863 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java 
 @ @ - 218 , 7 + 218 , 7 @ @ public class CQLSSTableWriter implements Closeable 
 { 
 for ( ByteBuffer key : keys ) 
 { 
 - if ( writer . currentKey ( ) = = null | | ! key . equals ( writer . currentKey ( ) . key ) ) 
 + if ( writer . shouldStartNewRow ( ) | | ! key . equals ( writer . currentKey ( ) . key ) ) 
 writer . newRow ( key ) ; 
 insert . addUpdateForKey ( writer . currentColumnFamily ( ) , key , clusteringPrefix , params , false ) ; 
 } 
 @ @ - 532 , 6 + 532 , 8 @ @ public class CQLSSTableWriter implements Closeable 
 * / 
 private static class BufferedWriter extends SSTableSimpleUnsortedWriter 
 { 
 + private boolean needsSync = false ; 
 + 
 public BufferedWriter ( File directory , CFMetaData metadata , IPartitioner partitioner , long bufferSizeInMB ) 
 { 
 super ( directory , metadata , partitioner , bufferSizeInMB ) ; 
 @ @ - 560 , 6 + 562 , 28 @ @ public class CQLSSTableWriter implements Closeable 
 } ; 
 } 
 
 + @ Override 
 + protected void replaceColumnFamily ( ) throws IOException 
 + { 
 + needsSync = true ; 
 + } 
 + 
 + @ Override 
 + / * * 
 + * If we have marked that the column family is being replaced , when we start the next row , 
 + * we should sync out the previous partition and create a new row based on the current value . 
 + * / 
 + boolean shouldStartNewRow ( ) throws IOException 
 + { 
 + if ( needsSync ) 
 + { 
 + needsSync = false ; 
 + super . sync ( ) ; 
 + return true ; 
 + } 
 + return super . shouldStartNewRow ( ) ; 
 + } 
 + 
 protected void addColumn ( Column column ) throws IOException 
 { 
 throw new UnsupportedOperationException ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java 
 index 5bddea3 . . 955214d 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java 
 @ @ - 119 , 7 + 119 , 7 @ @ public class SSTableSimpleUnsortedWriter extends AbstractSSTableSimpleWriter 
 
 / / We don ' t want to sync in writeRow ( ) only as this might blow up the bufferSize for wide rows . 
 if ( currentSize > bufferSize ) 
 - sync ( ) ; 
 + replaceColumnFamily ( ) ; 
 } 
 
 protected ColumnFamily getColumnFamily ( ) throws IOException 
 @ @ - 159 , 7 + 159 , 13 @ @ public class SSTableSimpleUnsortedWriter extends AbstractSSTableSimpleWriter 
 } 
 } 
 
 - private void sync ( ) throws IOException 
 + / / This is overridden by CQLSSTableWriter to hold off replacing column family until the next iteration through 
 + protected void replaceColumnFamily ( ) throws IOException 
 + { 
 + sync ( ) ; 
 + } 
 + 
 + protected void sync ( ) throws IOException 
 { 
 if ( buffer . isEmpty ( ) ) 
 return ; 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java 
 index 0922502 . . 94fe309 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java 
 @ @ - 138 , 10 + 138 , 12 @ @ public class CQLSSTableWriterTest 
 / / > 1MB and validate that this created more than 1 sstable . 
 File tempdir = Files . createTempDir ( ) ; 
 String schema = " CREATE TABLE ks . test ( " 
 - + " k int PRIMARY KEY , " 
 - + " v blob " 
 + + " k int , " 
 + + " c int , " 
 + + " v blob , " 
 + + " PRIMARY KEY ( k , c ) " 
 + " ) " ; 
 - String insert = " INSERT INTO ks . test ( k , v ) VALUES ( ? , ? ) " ; 
 + String insert = " INSERT INTO ks . test ( k , c , v ) VALUES ( ? , ? , ? ) " ; 
 CQLSSTableWriter writer = CQLSSTableWriter . builder ( ) 
 . inDirectory ( tempdir ) 
 . forTable ( schema ) 
 @ @ - 152 , 8 + 154 , 8 @ @ public class CQLSSTableWriterTest 
 
 ByteBuffer val = ByteBuffer . allocate ( 1024 * 1050 ) ; 
 
 - writer . addRow ( 0 , val ) ; 
 - writer . addRow ( 1 , val ) ; 
 + writer . addRow ( 0 , 0 , val ) ; 
 + writer . addRow ( 0 , 1 , val ) ; 
 writer . close ( ) ; 
 
 FilenameFilter filterDataFiles = new FilenameFilter ( )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d518830 . . 52cc2c1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 29 , 7 + 29 , 7 @ @ 
 * add scheduler JMX metrics ( CASSANDRA - 2962 ) 
 * add block level checksum for compressed data ( CASSANDRA - 1717 ) 
 * make column family backed column map pluggable and introduce unsynchronized 
 - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) 
 + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) 
 * refactoring of the secondary index api ( CASSANDRA - 2982 ) 
 * make CL > ONE reads wait for digest reconciliation before returning 
 ( CASSANDRA - 2494 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 index c316a85 . . 71c7213 100644 
 - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor 
 this . reversed = reversed ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public AbstractType < ? > getComparator ( ) 
 { 
 return comparator ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 1239d1c . . 38bc0d7 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer 
 this . cfm = cfm ; 
 } 
 
 - public ColumnFamily cloneMeShallow ( ) 
 + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) 
 { 
 - ColumnFamily cf = ColumnFamily . create ( cfm ) ; 
 + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; 
 / / since deletion info is immutable , aliasing it is fine 
 cf . deletionInfo . set ( deletionInfo . get ( ) ) ; 
 return cf ; 
 } 
 
 + public ColumnFamily cloneMeShallow ( ) 
 + { 
 + return cloneMeShallow ( columns . getFactory ( ) ) ; 
 + } 
 + 
 public AbstractType getSubComparator ( ) 
 { 
 IColumnSerializer s = getColumnSerializer ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 0bfd1c5 . . 552d3e9 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 - * tombstones that are no longer relevant . * / 
 + / * * 
 + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 + * tombstones that are no longer relevant . 
 + * The returned column family won ' t be thread safe . 
 + * / 
 ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) 
 { 
 / / special case slicing the entire row : 
 @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; 
 if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) 
 { 
 - ColumnFamily cf = cached . cloneMeShallow ( ) ; 
 + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 if ( sc ! = null ) 
 cf . addColumn ( sc , HeapAllocator . instance ) ; 
 return removeDeleted ( cf , gcBefore ) ; 
 @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 
 IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; 
 - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; 
 + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; 
 / / TODO this is necessary because when we collate supercolumns together , we don ' t check 
 / / their subcolumns for relevance , so we need to do a second prune post facto here . 
 diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 index 37f5a60 . . 624dec7 100644 
 - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns 
 public ISortedColumns cloneMe ( ) ; 
 
 / * * 
 + * Returns the factory used for this ISortedColumns implementation . 
 + * / 
 + public Factory getFactory ( ) ; 
 + 
 + / * * 
 * Adds a column to this column map . 
 * If a column with the same name is already present in the map , it will 
 * be replaced by the newly added column . 
 diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 index cd2488a . . 13a111a 100644 
 - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new ThreadSafeSortedColumns ( this ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 index 34e83dc . . 6c3fc42 100644 
 - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new TreeMapBackedSortedColumns ( this ) ;
