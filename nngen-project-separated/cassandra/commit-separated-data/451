BLEU SCORE: 0.03283637368030199

TEST MSG: Add histogram for delay to deliver hints
GENERATED MSG: Expose metrics around client authentication

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 3acc2b4 . . 7247f36 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 38 , 6 + 38 , 7 @ @ <nl> * Conditionally update index built status to avoid unnecessary flushes ( CASSANDRA - 12969 ) <nl> * cqlsh auto completion : refactor definition of compaction strategy options ( CASSANDRA - 12946 ) <nl> * Add support for arithmetic operators ( CASSANDRA - 11935 ) <nl> + * Add histogram for delay to deliver hints ( CASSANDRA - 13234 ) <nl> <nl> <nl> 3 . 11 . 0 <nl> diff - - git a / doc / source / operating / metrics . rst b / doc / source / operating / metrics . rst <nl> index 373d4d2 . . af2e36e 100644 <nl> - - - a / doc / source / operating / metrics . rst <nl> + + + b / doc / source / operating / metrics . rst <nl> @ @ - 524 , 6 + 524 , 31 @ @ Hints _ created - < PeerIP > Counter Number of hints on disk for this pee <nl> Hints _ not _ stored - < PeerIP > Counter Number of hints not stored for this peer , due to being down past the configured hint window . <nl> = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> <nl> + HintsService Metrics <nl> + ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ <nl> + <nl> + Metrics specific to the Hints delivery service . There are also some metrics related to hints tracked in ` ` Storage Metrics ` ` <nl> + <nl> + These metrics include the peer endpoint * * in the metric name * * <nl> + <nl> + Reported name format : <nl> + <nl> + * * Metric Name * * <nl> + ` ` org . apache . cassandra . metrics . HintsService . < MetricName > ` ` <nl> + <nl> + * * JMX MBean * * <nl> + ` ` org . apache . cassandra . metrics : type = HintsService name = < MetricName > ` ` <nl> + <nl> + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> + Name Type Description <nl> + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> + HintsSucceeded Meter A meter of the hints successfully delivered <nl> + HintsFailed Meter A meter of the hints that failed deliver <nl> + HintsTimedOut Meter A meter of the hints that timed out <nl> + Hints _ delays Histogram Histogram of hint delivery delays ( in milliseconds ) <nl> + Hints _ delays - < PeerIP > Histogram Histogram of hint delivery delays ( in milliseconds ) per peer <nl> + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> + <nl> SSTable Index Metrics <nl> ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ <nl> <nl> diff - - git a / src / java / org / apache / cassandra / hints / EncodedHintMessage . java b / src / java / org / apache / cassandra / hints / EncodedHintMessage . java <nl> index 4fe05ac . . 50d1302 100644 <nl> - - - a / src / java / org / apache / cassandra / hints / EncodedHintMessage . java <nl> + + + b / src / java / org / apache / cassandra / hints / EncodedHintMessage . java <nl> @ @ - 58 , 6 + 58 , 11 @ @ final class EncodedHintMessage <nl> return new MessageOut < > ( MessagingService . Verb . HINT , this , serializer ) ; <nl> } <nl> <nl> + public long getHintCreationTime ( ) <nl> + { <nl> + return Hint . serializer . getHintCreationTime ( hint , version ) ; <nl> + } <nl> + <nl> private static class Serializer implements IVersionedSerializer < EncodedHintMessage > <nl> { <nl> public long serializedSize ( EncodedHintMessage message , int version ) <nl> diff - - git a / src / java / org / apache / cassandra / hints / Hint . java b / src / java / org / apache / cassandra / hints / Hint . java <nl> index 4e8f139 . . 1582a3c 100644 <nl> - - - a / src / java / org / apache / cassandra / hints / Hint . java <nl> + + + b / src / java / org / apache / cassandra / hints / Hint . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ <nl> package org . apache . cassandra . hints ; <nl> <nl> import java . io . IOException ; <nl> + import java . nio . ByteBuffer ; <nl> import java . util . concurrent . CompletableFuture ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> @ @ - 146 , 5 + 147 , 10 @ @ public final class Hint <nl> int gcgs = ( int ) in . readUnsignedVInt ( ) ; <nl> return new Hint ( Mutation . serializer . deserialize ( in , version ) , creationTime , gcgs ) ; <nl> } <nl> + <nl> + public long getHintCreationTime ( ByteBuffer hintBuffer , int version ) <nl> + { <nl> + return hintBuffer . getLong ( 0 ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / hints / HintsDispatcher . java b / src / java / org / apache / cassandra / hints / HintsDispatcher . java <nl> index 3ac77a3 . . 6fc55df 100644 <nl> - - - a / src / java / org / apache / cassandra / hints / HintsDispatcher . java <nl> + + + b / src / java / org / apache / cassandra / hints / HintsDispatcher . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import java . util . function . Function ; <nl> <nl> import com . google . common . util . concurrent . RateLimiter ; <nl> <nl> + import org . apache . cassandra . db . monitoring . ApproximateTime ; <nl> import org . apache . cassandra . exceptions . RequestFailureReason ; <nl> import org . apache . cassandra . metrics . HintsServiceMetrics ; <nl> import org . apache . cassandra . net . IAsyncCallbackWithFailure ; <nl> @ @ - 175 , 6 + 176 , 7 @ @ final class HintsDispatcher implements AutoCloseable <nl> { <nl> Callback callback = new Callback ( ) ; <nl> HintMessage message = new HintMessage ( hostId , hint ) ; <nl> + HintsServiceMetrics . updateDelayMetrics ( address , ApproximateTime . currentTimeMillis ( ) - hint . creationTime ) ; <nl> MessagingService . instance ( ) . sendRRWithFailure ( message . createMessageOut ( ) , address , callback ) ; <nl> return callback ; <nl> } <nl> @ @ - 187 , 6 + 189 , 7 @ @ final class HintsDispatcher implements AutoCloseable <nl> { <nl> Callback callback = new Callback ( ) ; <nl> EncodedHintMessage message = new EncodedHintMessage ( hostId , hint , messagingVersion ) ; <nl> + HintsServiceMetrics . updateDelayMetrics ( address , ApproximateTime . currentTimeMillis ( ) - message . getHintCreationTime ( ) ) ; <nl> MessagingService . instance ( ) . sendRRWithFailure ( message . createMessageOut ( ) , address , callback ) ; <nl> return callback ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / metrics / HintsServiceMetrics . java b / src / java / org / apache / cassandra / metrics / HintsServiceMetrics . java <nl> index ad85281 . . d6a75f7 100644 <nl> - - - a / src / java / org / apache / cassandra / metrics / HintsServiceMetrics . java <nl> + + + b / src / java / org / apache / cassandra / metrics / HintsServiceMetrics . java <nl> @ @ - 17 , 7 + 17 , 16 @ @ <nl> * / <nl> package org . apache . cassandra . metrics ; <nl> <nl> + import java . net . InetAddress ; <nl> + <nl> + import com . google . common . util . concurrent . MoreExecutors ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import com . codahale . metrics . Histogram ; <nl> import com . codahale . metrics . Meter ; <nl> + import com . github . benmanes . caffeine . cache . Caffeine ; <nl> + import com . github . benmanes . caffeine . cache . LoadingCache ; <nl> <nl> import static org . apache . cassandra . metrics . CassandraMetricsRegistry . Metrics ; <nl> <nl> @ @ - 26 , 9 + 35 , 31 @ @ import static org . apache . cassandra . metrics . CassandraMetricsRegistry . Metrics ; <nl> * / <nl> public final class HintsServiceMetrics <nl> { <nl> + private static final Logger logger = LoggerFactory . getLogger ( HintsServiceMetrics . class ) ; <nl> + <nl> private static final MetricNameFactory factory = new DefaultNameFactory ( " HintsService " ) ; <nl> <nl> public static final Meter hintsSucceeded = Metrics . meter ( factory . createMetricName ( " HintsSucceeded " ) ) ; <nl> public static final Meter hintsFailed = Metrics . meter ( factory . createMetricName ( " HintsFailed " ) ) ; <nl> public static final Meter hintsTimedOut = Metrics . meter ( factory . createMetricName ( " HintsTimedOut " ) ) ; <nl> + <nl> + / * * Histogram of all hint delivery delays * / <nl> + private static final Histogram globalDelayHistogram = Metrics . histogram ( factory . createMetricName ( " Hint _ delays " ) , false ) ; <nl> + <nl> + / * * Histograms per - endpoint of hint delivery delays , This is not a cache . * / <nl> + private static final LoadingCache < InetAddress , Histogram > delayByEndpoint = Caffeine . newBuilder ( ) <nl> + . executor ( MoreExecutors . directExecutor ( ) ) <nl> + . build ( address - > Metrics . histogram ( factory . createMetricName ( " Hint _ delays - " + address . getHostAddress ( ) . replace ( ' : ' , ' . ' ) ) , false ) ) ; <nl> + <nl> + public static void updateDelayMetrics ( InetAddress endpoint , long delay ) <nl> + { <nl> + if ( delay < = 0 ) <nl> + { <nl> + logger . warn ( " Invalid negative latency in hint delivery delay : { } " , delay ) ; <nl> + return ; <nl> + } <nl> + <nl> + globalDelayHistogram . update ( delay ) ; <nl> + delayByEndpoint . get ( endpoint ) . update ( delay ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 3acc2b4 . . 7247f36 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 38 , 6 + 38 , 7 @ @ 
 * Conditionally update index built status to avoid unnecessary flushes ( CASSANDRA - 12969 ) 
 * cqlsh auto completion : refactor definition of compaction strategy options ( CASSANDRA - 12946 ) 
 * Add support for arithmetic operators ( CASSANDRA - 11935 ) 
 + * Add histogram for delay to deliver hints ( CASSANDRA - 13234 ) 
 
 
 3 . 11 . 0 
 diff - - git a / doc / source / operating / metrics . rst b / doc / source / operating / metrics . rst 
 index 373d4d2 . . af2e36e 100644 
 - - - a / doc / source / operating / metrics . rst 
 + + + b / doc / source / operating / metrics . rst 
 @ @ - 524 , 6 + 524 , 31 @ @ Hints _ created - < PeerIP > Counter Number of hints on disk for this pee 
 Hints _ not _ stored - < PeerIP > Counter Number of hints not stored for this peer , due to being down past the configured hint window . 
 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 
 + HintsService Metrics 
 + ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
 + 
 + Metrics specific to the Hints delivery service . There are also some metrics related to hints tracked in ` ` Storage Metrics ` ` 
 + 
 + These metrics include the peer endpoint * * in the metric name * * 
 + 
 + Reported name format : 
 + 
 + * * Metric Name * * 
 + ` ` org . apache . cassandra . metrics . HintsService . < MetricName > ` ` 
 + 
 + * * JMX MBean * * 
 + ` ` org . apache . cassandra . metrics : type = HintsService name = < MetricName > ` ` 
 + 
 + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 + Name Type Description 
 + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 + HintsSucceeded Meter A meter of the hints successfully delivered 
 + HintsFailed Meter A meter of the hints that failed deliver 
 + HintsTimedOut Meter A meter of the hints that timed out 
 + Hints _ delays Histogram Histogram of hint delivery delays ( in milliseconds ) 
 + Hints _ delays - < PeerIP > Histogram Histogram of hint delivery delays ( in milliseconds ) per peer 
 + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 + 
 SSTable Index Metrics 
 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
 
 diff - - git a / src / java / org / apache / cassandra / hints / EncodedHintMessage . java b / src / java / org / apache / cassandra / hints / EncodedHintMessage . java 
 index 4fe05ac . . 50d1302 100644 
 - - - a / src / java / org / apache / cassandra / hints / EncodedHintMessage . java 
 + + + b / src / java / org / apache / cassandra / hints / EncodedHintMessage . java 
 @ @ - 58 , 6 + 58 , 11 @ @ final class EncodedHintMessage 
 return new MessageOut < > ( MessagingService . Verb . HINT , this , serializer ) ; 
 } 
 
 + public long getHintCreationTime ( ) 
 + { 
 + return Hint . serializer . getHintCreationTime ( hint , version ) ; 
 + } 
 + 
 private static class Serializer implements IVersionedSerializer < EncodedHintMessage > 
 { 
 public long serializedSize ( EncodedHintMessage message , int version ) 
 diff - - git a / src / java / org / apache / cassandra / hints / Hint . java b / src / java / org / apache / cassandra / hints / Hint . java 
 index 4e8f139 . . 1582a3c 100644 
 - - - a / src / java / org / apache / cassandra / hints / Hint . java 
 + + + b / src / java / org / apache / cassandra / hints / Hint . java 
 @ @ - 18 , 6 + 18 , 7 @ @ 
 package org . apache . cassandra . hints ; 
 
 import java . io . IOException ; 
 + import java . nio . ByteBuffer ; 
 import java . util . concurrent . CompletableFuture ; 
 import java . util . concurrent . TimeUnit ; 
 
 @ @ - 146 , 5 + 147 , 10 @ @ public final class Hint 
 int gcgs = ( int ) in . readUnsignedVInt ( ) ; 
 return new Hint ( Mutation . serializer . deserialize ( in , version ) , creationTime , gcgs ) ; 
 } 
 + 
 + public long getHintCreationTime ( ByteBuffer hintBuffer , int version ) 
 + { 
 + return hintBuffer . getLong ( 0 ) ; 
 + } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / hints / HintsDispatcher . java b / src / java / org / apache / cassandra / hints / HintsDispatcher . java 
 index 3ac77a3 . . 6fc55df 100644 
 - - - a / src / java / org / apache / cassandra / hints / HintsDispatcher . java 
 + + + b / src / java / org / apache / cassandra / hints / HintsDispatcher . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import java . util . function . Function ; 
 
 import com . google . common . util . concurrent . RateLimiter ; 
 
 + import org . apache . cassandra . db . monitoring . ApproximateTime ; 
 import org . apache . cassandra . exceptions . RequestFailureReason ; 
 import org . apache . cassandra . metrics . HintsServiceMetrics ; 
 import org . apache . cassandra . net . IAsyncCallbackWithFailure ; 
 @ @ - 175 , 6 + 176 , 7 @ @ final class HintsDispatcher implements AutoCloseable 
 { 
 Callback callback = new Callback ( ) ; 
 HintMessage message = new HintMessage ( hostId , hint ) ; 
 + HintsServiceMetrics . updateDelayMetrics ( address , ApproximateTime . currentTimeMillis ( ) - hint . creationTime ) ; 
 MessagingService . instance ( ) . sendRRWithFailure ( message . createMessageOut ( ) , address , callback ) ; 
 return callback ; 
 } 
 @ @ - 187 , 6 + 189 , 7 @ @ final class HintsDispatcher implements AutoCloseable 
 { 
 Callback callback = new Callback ( ) ; 
 EncodedHintMessage message = new EncodedHintMessage ( hostId , hint , messagingVersion ) ; 
 + HintsServiceMetrics . updateDelayMetrics ( address , ApproximateTime . currentTimeMillis ( ) - message . getHintCreationTime ( ) ) ; 
 MessagingService . instance ( ) . sendRRWithFailure ( message . createMessageOut ( ) , address , callback ) ; 
 return callback ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / metrics / HintsServiceMetrics . java b / src / java / org / apache / cassandra / metrics / HintsServiceMetrics . java 
 index ad85281 . . d6a75f7 100644 
 - - - a / src / java / org / apache / cassandra / metrics / HintsServiceMetrics . java 
 + + + b / src / java / org / apache / cassandra / metrics / HintsServiceMetrics . java 
 @ @ - 17 , 7 + 17 , 16 @ @ 
 * / 
 package org . apache . cassandra . metrics ; 
 
 + import java . net . InetAddress ; 
 + 
 + import com . google . common . util . concurrent . MoreExecutors ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + import com . codahale . metrics . Histogram ; 
 import com . codahale . metrics . Meter ; 
 + import com . github . benmanes . caffeine . cache . Caffeine ; 
 + import com . github . benmanes . caffeine . cache . LoadingCache ; 
 
 import static org . apache . cassandra . metrics . CassandraMetricsRegistry . Metrics ; 
 
 @ @ - 26 , 9 + 35 , 31 @ @ import static org . apache . cassandra . metrics . CassandraMetricsRegistry . Metrics ; 
 * / 
 public final class HintsServiceMetrics 
 { 
 + private static final Logger logger = LoggerFactory . getLogger ( HintsServiceMetrics . class ) ; 
 + 
 private static final MetricNameFactory factory = new DefaultNameFactory ( " HintsService " ) ; 
 
 public static final Meter hintsSucceeded = Metrics . meter ( factory . createMetricName ( " HintsSucceeded " ) ) ; 
 public static final Meter hintsFailed = Metrics . meter ( factory . createMetricName ( " HintsFailed " ) ) ; 
 public static final Meter hintsTimedOut = Metrics . meter ( factory . createMetricName ( " HintsTimedOut " ) ) ; 
 + 
 + / * * Histogram of all hint delivery delays * / 
 + private static final Histogram globalDelayHistogram = Metrics . histogram ( factory . createMetricName ( " Hint _ delays " ) , false ) ; 
 + 
 + / * * Histograms per - endpoint of hint delivery delays , This is not a cache . * / 
 + private static final LoadingCache < InetAddress , Histogram > delayByEndpoint = Caffeine . newBuilder ( ) 
 + . executor ( MoreExecutors . directExecutor ( ) ) 
 + . build ( address - > Metrics . histogram ( factory . createMetricName ( " Hint _ delays - " + address . getHostAddress ( ) . replace ( ' : ' , ' . ' ) ) , false ) ) ; 
 + 
 + public static void updateDelayMetrics ( InetAddress endpoint , long delay ) 
 + { 
 + if ( delay < = 0 ) 
 + { 
 + logger . warn ( " Invalid negative latency in hint delivery delay : { } " , delay ) ; 
 + return ; 
 + } 
 + 
 + globalDelayHistogram . update ( delay ) ; 
 + delayByEndpoint . get ( endpoint ) . update ( delay ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
