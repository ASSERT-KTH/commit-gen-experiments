BLEU SCORE: 0.026279617104084448

TEST MSG: " disk full " when running cleanup ( on a far from full disk )
GENERATED MSG: log number of rows read from saved cache

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 539c4c8 . . bab9421 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 14 : <nl> + * " disk full " when running cleanup ( CASSANDRA - 9036 ) <nl> * Make PasswordAuthenticator number of hashing rounds configurable ( CASSANDRA - 8085 ) <nl> * Lower logging level from ERROR to DEBUG when a scheduled schema pull <nl> cannot be completed due to a node being down ( CASSANDRA - 9032 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 74cf286 . . d8640e8 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1091 , 6 + 1091 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> for ( Pair < Long , Long > position : positions ) <nl> expectedFileSize + = position . right - position . left ; <nl> } <nl> + <nl> + double compressionRatio = getCompressionRatio ( ) ; <nl> + if ( compressionRatio > 0d ) <nl> + expectedFileSize * = compressionRatio ; <nl> + <nl> return expectedFileSize ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 70d9bbe . . 46646bf 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 48 , 6 + 48 , 7 @ @ <nl> * fix SecondaryIndex LelevedManifest save upon snapshot ( CASSANDRA - 4230 ) <nl> * fix missing arrayOffset in FBUtilities . hash ( CASSANDRA - 4250 ) <nl> * ( cql3 ) Add name of parameters in CqlResultSet ( CASSANDRA - 4242 ) <nl> + * ( cql3 ) Correctly validat order by queries ( CASSANDRA - 4246 ) <nl> Merged from 1 . 0 : <nl> * Fix super columns bug where cache is not updated ( CASSANDRA - 4190 ) <nl> * fix maxTimestamp to include row tombstones ( CASSANDRA - 4116 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index d3fb50a . . 35cb943 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 757 , 7 + 757 , 8 @ @ public class SelectStatement implements CQLStatement <nl> cqlRows . add ( new CqlRow ( row . key . key , thriftColumns ) ) ; <nl> } <nl> } <nl> - / / We don ' t allow reversed on range scan , but we do on multiget ( IN ( . . . ) ) , so let ' s reverse the rows there too . <nl> + <nl> + / / Internal calls always return columns in the comparator order , even when reverse was set <nl> if ( isReversed ) <nl> Collections . reverse ( cqlRows ) ; <nl> <nl> @ @ - 1013 , 14 + 1014 , 13 @ @ public class SelectStatement implements CQLStatement <nl> } <nl> assert isReversed ! = null ; <nl> stmt . isReversed = isReversed ; <nl> - } <nl> <nl> - / / Only allow reversed if the row key restriction is an equality , <nl> - / / since we don ' t know how to reverse otherwise <nl> - if ( stmt . isReversed ) <nl> - { <nl> - if ( stmt . keyRestriction = = null | | ! stmt . keyRestriction . isEquality ( ) ) <nl> - throw new InvalidRequestException ( " Descending order is only supported is the first part of the PRIMARY KEY is restricted by an Equal or a IN " ) ; <nl> + / / Only allow ordering if the row key restriction is an equality , <nl> + / / since otherwise the order will be primarily on the row key . <nl> + / / TODO : we could allow ordering for IN queries , as we can do the <nl> + / / sorting post - query easily , but we will have to add it <nl> + if ( stmt . keyRestriction = = null | | ! stmt . keyRestriction . isEquality ( ) | | stmt . keyRestriction . eqValues . size ( ) ! = 1 ) <nl> + throw new InvalidRequestException ( " Ordering is only supported is the first part of the PRIMARY KEY is restricted by an Equal or a IN " ) ; <nl> } <nl> <nl> / / If this is a query on tokens , it ' s necessary a range query ( there can be more than one key per token ) , so reject IN queries ( as we don ' t know how to do them )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 539c4c8 . . bab9421 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 14 : 
 + * " disk full " when running cleanup ( CASSANDRA - 9036 ) 
 * Make PasswordAuthenticator number of hashing rounds configurable ( CASSANDRA - 8085 ) 
 * Lower logging level from ERROR to DEBUG when a scheduled schema pull 
 cannot be completed due to a node being down ( CASSANDRA - 9032 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 74cf286 . . d8640e8 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1091 , 6 + 1091 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 for ( Pair < Long , Long > position : positions ) 
 expectedFileSize + = position . right - position . left ; 
 } 
 + 
 + double compressionRatio = getCompressionRatio ( ) ; 
 + if ( compressionRatio > 0d ) 
 + expectedFileSize * = compressionRatio ; 
 + 
 return expectedFileSize ; 
 } 


NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 70d9bbe . . 46646bf 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 48 , 6 + 48 , 7 @ @ 
 * fix SecondaryIndex LelevedManifest save upon snapshot ( CASSANDRA - 4230 ) 
 * fix missing arrayOffset in FBUtilities . hash ( CASSANDRA - 4250 ) 
 * ( cql3 ) Add name of parameters in CqlResultSet ( CASSANDRA - 4242 ) 
 + * ( cql3 ) Correctly validat order by queries ( CASSANDRA - 4246 ) 
 Merged from 1 . 0 : 
 * Fix super columns bug where cache is not updated ( CASSANDRA - 4190 ) 
 * fix maxTimestamp to include row tombstones ( CASSANDRA - 4116 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index d3fb50a . . 35cb943 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 757 , 7 + 757 , 8 @ @ public class SelectStatement implements CQLStatement 
 cqlRows . add ( new CqlRow ( row . key . key , thriftColumns ) ) ; 
 } 
 } 
 - / / We don ' t allow reversed on range scan , but we do on multiget ( IN ( . . . ) ) , so let ' s reverse the rows there too . 
 + 
 + / / Internal calls always return columns in the comparator order , even when reverse was set 
 if ( isReversed ) 
 Collections . reverse ( cqlRows ) ; 
 
 @ @ - 1013 , 14 + 1014 , 13 @ @ public class SelectStatement implements CQLStatement 
 } 
 assert isReversed ! = null ; 
 stmt . isReversed = isReversed ; 
 - } 
 
 - / / Only allow reversed if the row key restriction is an equality , 
 - / / since we don ' t know how to reverse otherwise 
 - if ( stmt . isReversed ) 
 - { 
 - if ( stmt . keyRestriction = = null | | ! stmt . keyRestriction . isEquality ( ) ) 
 - throw new InvalidRequestException ( " Descending order is only supported is the first part of the PRIMARY KEY is restricted by an Equal or a IN " ) ; 
 + / / Only allow ordering if the row key restriction is an equality , 
 + / / since otherwise the order will be primarily on the row key . 
 + / / TODO : we could allow ordering for IN queries , as we can do the 
 + / / sorting post - query easily , but we will have to add it 
 + if ( stmt . keyRestriction = = null | | ! stmt . keyRestriction . isEquality ( ) | | stmt . keyRestriction . eqValues . size ( ) ! = 1 ) 
 + throw new InvalidRequestException ( " Ordering is only supported is the first part of the PRIMARY KEY is restricted by an Equal or a IN " ) ; 
 } 
 
 / / If this is a query on tokens , it ' s necessary a range query ( there can be more than one key per token ) , so reject IN queries ( as we don ' t know how to do them )
