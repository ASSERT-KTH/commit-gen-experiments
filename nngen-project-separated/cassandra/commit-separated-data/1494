BLEU SCORE: 0.002819880908565337

TEST MSG: Remove dead iSchemaKeyspace / LegacySchemaMigrator code
GENERATED MSG: avoid optimization of not checking older memtable and SSTables if we find _ an _ answer early on ; it causes bugs

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / SystemKeyspace . java b / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> index f0c91d6 . . e8247a3 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> @ @ - 301 , 7 + 301 , 6 @ @ public final class SystemKeyspace <nl> + " default _ time _ to _ live int , " <nl> + " default _ validator text , " <nl> + " dropped _ columns map < text , bigint > , " <nl> - + " dropped _ columns _ types map < text , text > , " <nl> + " gc _ grace _ seconds int , " <nl> + " is _ dense boolean , " <nl> + " key _ validator text , " <nl> diff - - git a / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java b / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java <nl> index 4748820 . . 996b5ff 100644 <nl> - - - a / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java <nl> + + + b / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java <nl> @ @ - 330 , 12 + 330 , 7 @ @ public final class LegacySchemaMigrator <nl> cfm . bloomFilterFpChance ( cfm . getBloomFilterFpChance ( ) ) ; <nl> <nl> if ( tableRow . has ( " dropped _ columns " ) ) <nl> - { <nl> - Map < String , String > types = tableRow . has ( " dropped _ columns _ types " ) <nl> - ? tableRow . getMap ( " dropped _ columns _ types " , UTF8Type . instance , UTF8Type . instance ) <nl> - : Collections . < String , String > emptyMap ( ) ; <nl> - addDroppedColumns ( cfm , tableRow . getMap ( " dropped _ columns " , UTF8Type . instance , LongType . instance ) , types ) ; <nl> - } <nl> + addDroppedColumns ( cfm , tableRow . getMap ( " dropped _ columns " , UTF8Type . instance , LongType . instance ) , Collections . emptyMap ( ) ) ; <nl> <nl> cfm . triggers ( createTriggersFromTriggerRows ( triggerRows ) ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> index 5aad59f . . 8411104 100644 <nl> - - - a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> @ @ - 1010 , 18 + 1010 , 11 @ @ public final class SchemaKeyspace <nl> <nl> / / We don ' t really use the default validator but as we have it for backward compatibility , we use it to know if it ' s a counter table <nl> AbstractType < ? > defaultValidator = TypeParser . parse ( result . getString ( " default _ validator " ) ) ; <nl> - boolean isCounter = defaultValidator instanceof CounterColumnType ; <nl> + boolean isCounter = defaultValidator instanceof CounterColumnType ; <nl> <nl> UUID cfId = result . getUUID ( " cf _ id " ) ; <nl> <nl> boolean isCQLTable = ! isSuper & & ! isDense & & isCompound ; <nl> - boolean isStaticCompactTable = ! isDense & & ! isCompound ; <nl> - <nl> - / / Internally , compact tables have a specific layout , see CompactTables . But when upgrading from <nl> - / / previous versions , they may not have the expected schema , so detect if we need to upgrade and do <nl> - / / it in createColumnsFromColumnRows . <nl> - / / We can remove this once we don ' t support upgrade from versions < 3 . 0 . <nl> - boolean needsUpgrade = ! isCQLTable & & checkNeedsUpgrade ( serializedColumnDefinitions , isSuper , isStaticCompactTable ) ; <nl> <nl> List < ColumnDefinition > columnDefs = createColumnsFromColumnRows ( serializedColumnDefinitions , <nl> ksName , <nl> @ @ - 1029 , 12 + 1022 , 7 @ @ public final class SchemaKeyspace <nl> rawComparator , <nl> subComparator , <nl> isSuper , <nl> - isCQLTable , <nl> - isStaticCompactTable , <nl> - needsUpgrade ) ; <nl> - <nl> - if ( needsUpgrade ) <nl> - addDefinitionForUpgrade ( columnDefs , ksName , cfName , isStaticCompactTable , isSuper , rawComparator , subComparator , defaultValidator ) ; <nl> + isCQLTable ) ; <nl> <nl> CFMetaData cfm = CFMetaData . create ( ksName , cfName , cfId , isDense , isCompound , isSuper , isCounter , columnDefs ) ; <nl> <nl> @ @ - 1078 , 67 + 1066 , 6 @ @ public final class SchemaKeyspace <nl> return cfm ; <nl> } <nl> <nl> - / / Should only be called on compact tables <nl> - private static boolean checkNeedsUpgrade ( UntypedResultSet defs , boolean isSuper , boolean isStaticCompactTable ) <nl> - { <nl> - if ( isSuper ) <nl> - { <nl> - / / Check if we ' ve added the " supercolumn map " column yet or not <nl> - for ( UntypedResultSet . Row row : defs ) <nl> - { <nl> - if ( row . getString ( " column _ name " ) . isEmpty ( ) ) <nl> - return false ; <nl> - } <nl> - return true ; <nl> - } <nl> - <nl> - / / For static compact tables , we need to upgrade if the regular definitions haven ' t been converted to static yet , <nl> - / / i . e . if we don ' t have a static definition yet . <nl> - if ( isStaticCompactTable ) <nl> - return ! hasKind ( defs , ColumnDefinition . Kind . STATIC ) ; <nl> - <nl> - / / For dense compact tables , we need to upgrade if we don ' t have a compact value definition <nl> - return ! hasKind ( defs , ColumnDefinition . Kind . REGULAR ) ; <nl> - } <nl> - <nl> - private static void addDefinitionForUpgrade ( List < ColumnDefinition > defs , <nl> - String ksName , <nl> - String cfName , <nl> - boolean isStaticCompactTable , <nl> - boolean isSuper , <nl> - AbstractType < ? > rawComparator , <nl> - AbstractType < ? > subComparator , <nl> - AbstractType < ? > defaultValidator ) <nl> - { <nl> - CompactTables . DefaultNames names = CompactTables . defaultNameGenerator ( defs ) ; <nl> - <nl> - if ( isSuper ) <nl> - { <nl> - defs . add ( ColumnDefinition . regularDef ( ksName , cfName , CompactTables . SUPER _ COLUMN _ MAP _ COLUMN _ STR , MapType . getInstance ( subComparator , defaultValidator , true ) , null ) ) ; <nl> - } <nl> - else if ( isStaticCompactTable ) <nl> - { <nl> - defs . add ( ColumnDefinition . clusteringKeyDef ( ksName , cfName , names . defaultClusteringName ( ) , rawComparator , null ) ) ; <nl> - defs . add ( ColumnDefinition . regularDef ( ksName , cfName , names . defaultCompactValueName ( ) , defaultValidator , null ) ) ; <nl> - } <nl> - else <nl> - { <nl> - / / For dense compact tables , we get here if we don ' t have a compact value column , in which case we should add it <nl> - / / ( we use EmptyType to recognize that the compact value was not declared by the use ( see CreateTableStatement too ) ) <nl> - defs . add ( ColumnDefinition . regularDef ( ksName , cfName , names . defaultCompactValueName ( ) , EmptyType . instance , null ) ) ; <nl> - } <nl> - } <nl> - <nl> - private static boolean hasKind ( UntypedResultSet defs , ColumnDefinition . Kind kind ) <nl> - { <nl> - for ( UntypedResultSet . Row row : defs ) <nl> - { <nl> - if ( deserializeKind ( row . getString ( " type " ) ) = = kind ) <nl> - return true ; <nl> - } <nl> - return false ; <nl> - } <nl> - <nl> private static void addDroppedColumns ( CFMetaData cfm , Map < String , Long > droppedTimes , Map < String , String > types ) <nl> { <nl> for ( Map . Entry < String , Long > entry : droppedTimes . entrySet ( ) ) <nl> @ @ - 1201 , 13 + 1128 , 11 @ @ public final class SchemaKeyspace <nl> AbstractType < ? > rawComparator , <nl> AbstractType < ? > rawSubComparator , <nl> boolean isSuper , <nl> - boolean isCQLTable , <nl> - boolean isStaticCompactTable , <nl> - boolean needsUpgrade ) <nl> + boolean isCQLTable ) <nl> { <nl> List < ColumnDefinition > columns = new ArrayList < > ( ) ; <nl> for ( UntypedResultSet . Row row : rows ) <nl> - columns . add ( createColumnFromColumnRow ( row , keyspace , table , rawComparator , rawSubComparator , isSuper , isCQLTable , isStaticCompactTable , needsUpgrade ) ) ; <nl> + columns . add ( createColumnFromColumnRow ( row , keyspace , table , rawComparator , rawSubComparator , isSuper , isCQLTable ) ) ; <nl> return columns ; <nl> } <nl> <nl> @ @ - 1217 , 13 + 1142 , 9 @ @ public final class SchemaKeyspace <nl> AbstractType < ? > rawComparator , <nl> AbstractType < ? > rawSubComparator , <nl> boolean isSuper , <nl> - boolean isCQLTable , <nl> - boolean isStaticCompactTable , <nl> - boolean needsUpgrade ) <nl> + boolean isCQLTable ) <nl> { <nl> ColumnDefinition . Kind kind = deserializeKind ( row . getString ( " type " ) ) ; <nl> - if ( needsUpgrade & & isStaticCompactTable & & kind = = ColumnDefinition . Kind . REGULAR ) <nl> - kind = ColumnDefinition . Kind . STATIC ; <nl> <nl> Integer componentIndex = null ; <nl> if ( row . has ( " component _ index " ) ) <nl> diff - - git a / test / unit / org / apache / cassandra / schema / LegacySchemaMigratorTest . java b / test / unit / org / apache / cassandra / schema / LegacySchemaMigratorTest . java <nl> index 17cffaf . . 9275da7 100644 <nl> - - - a / test / unit / org / apache / cassandra / schema / LegacySchemaMigratorTest . java <nl> + + + b / test / unit / org / apache / cassandra / schema / LegacySchemaMigratorTest . java <nl> @ @ - 407 , 8 + 407 , 6 @ @ public class LegacySchemaMigratorTest <nl> String name = entry . getKey ( ) . toString ( ) ; <nl> CFMetaData . DroppedColumn column = entry . getValue ( ) ; <nl> adder . addMapEntry ( " dropped _ columns " , name , column . droppedTime ) ; <nl> - if ( column . type ! = null ) <nl> - adder . addMapEntry ( " dropped _ columns _ types " , name , column . type . toString ( ) ) ; <nl> } <nl> <nl> adder . add ( " is _ dense " , table . isDense ( ) ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / Column . java b / src / java / org / apache / cassandra / db / Column . java <nl> index c025dde . . 2734375 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Column . java <nl> + + + b / src / java / org / apache / cassandra / db / Column . java <nl> @ @ - 276 , 18 + 276 , 6 @ @ class ColumnSerializer implements ICompactSerializer2 < IColumn > <nl> if ( name . equals ( columnName ) ) <nl> { <nl> column = defreeze ( dis , name ) ; <nl> - if ( filter instanceof IdentityFilter ) <nl> - { <nl> - 	 / * <nl> - 	 * If this is being called with identity filter <nl> - 	 * since a column name is passed in we know <nl> - 	 * that this is a final call <nl> - 	 * Hence if the column is found set the filter to done <nl> - 	 * so that we do not look for the column in further files <nl> - 	 * / <nl> - 	 IdentityFilter f = ( IdentityFilter ) filter ; <nl> - 	 f . setDone ( ) ; <nl> - } <nl> } <nl> else <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 950b133 . . ca94586 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 532 , 10 + 532 , 6 @ @ public final class ColumnFamily <nl> if ( column ! = null ) <nl> { <nl> cf . addColumn ( column ) ; <nl> - if ( filter . isDone ( ) ) <nl> - { <nl> - break ; <nl> - } <nl> } <nl> } <nl> return cf ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index cb99e7e . . 111a060 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 522 , 17 + 522 , 12 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> List < ColumnFamily > columnFamilies = new ArrayList < ColumnFamily > ( ) ; <nl> / * Get the ColumnFamily from Memtable * / <nl> getColumnFamilyFromCurrentMemtable ( key , columnFamilyColumn , filter , columnFamilies ) ; <nl> - if ( columnFamilies . size ( ) = = 0 | | ! filter . isDone ( ) ) <nl> - { <nl> - / * Check if MemtableManager has any historical information * / <nl> - getUnflushedColumnFamily ( key , columnFamily _ , columnFamilyColumn , filter , columnFamilies ) ; <nl> - } <nl> - if ( columnFamilies . size ( ) = = 0 | | ! filter . isDone ( ) ) <nl> - { <nl> - long start = System . currentTimeMillis ( ) ; <nl> - getColumnFamilyFromDisk ( key , columnFamilyColumn , columnFamilies , filter ) ; <nl> - diskReadStats _ . add ( System . currentTimeMillis ( ) - start ) ; <nl> - } <nl> + / * Check if MemtableManager has any historical information * / <nl> + getUnflushedColumnFamily ( key , columnFamily _ , columnFamilyColumn , filter , columnFamilies ) ; <nl> + long start = System . currentTimeMillis ( ) ; <nl> + getColumnFamilyFromDisk ( key , columnFamilyColumn , columnFamilies , filter ) ; <nl> + diskReadStats _ . add ( System . currentTimeMillis ( ) - start ) ; <nl> + <nl> return columnFamilies ; <nl> } <nl> <nl> @ @ - 574 , 10 + 569 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> if ( columnFamily ! = null ) <nl> { <nl> columnFamilies . add ( columnFamily ) ; <nl> - if ( filter . isDone ( ) ) <nl> - { <nl> - break ; <nl> - } <nl> } <nl> } <nl> } <nl> @ @ - 1417 , 8 + 1408 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> if ( columnFamily ! = null ) <nl> { <nl> columnFamilies . add ( columnFamily ) ; <nl> - if ( filter . isDone ( ) ) <nl> - break ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / IFilter . java b / src / java / org / apache / cassandra / db / IFilter . java <nl> index c9fc38d . . f2a426e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / IFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / IFilter . java <nl> @ @ - 1 , 21 + 1 , 21 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , <nl> - * software distributed under the License is distributed on an <nl> - * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> - * KIND , either express or implied . See the License for the <nl> - * specific language governing permissions and limitations <nl> - * under the License . <nl> - * / <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> package org . apache . cassandra . db ; <nl> <nl> import java . io . DataInputStream ; <nl> @ @ - 27 , 7 + 27 , 6 @ @ import org . apache . cassandra . io . SSTable ; <nl> <nl> public interface IFilter <nl> { <nl> - 	 public boolean isDone ( ) ; <nl> 	 public ColumnFamily filter ( String cfName , ColumnFamily cf ) ; <nl> public IColumn filter ( IColumn column , DataInputStream dis ) throws IOException ; <nl> public DataInputBuffer next ( String key , String cf , SSTable ssTable ) throws IOException ; <nl> diff - - git a / src / java / org / apache / cassandra / db / IdentityFilter . java b / src / java / org / apache / cassandra / db / IdentityFilter . java <nl> index 2656667 . . d534534 100644 <nl> - - - a / src / java / org / apache / cassandra / db / IdentityFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / IdentityFilter . java <nl> @ @ - 28 , 42 + 28 , 13 @ @ import org . apache . cassandra . io . SSTable ; <nl> <nl> public class IdentityFilter implements IFilter <nl> { <nl> - private boolean isDone _ = false ; <nl> - <nl> - 	 public boolean isDone ( ) <nl> - 	 { <nl> - 	 	 return isDone _ ; <nl> - 	 } <nl> - <nl> 	 public ColumnFamily filter ( String cfString , ColumnFamily columnFamily ) <nl> 	 { <nl> - 	 String [ ] values = RowMutation . getColumnAndColumnFamily ( cfString ) ; <nl> - 	 if ( columnFamily = = null ) <nl> - 	 	 return columnFamily ; <nl> - <nl> - 	 	 if ( values . length = = 2 & & ! columnFamily . isSuper ( ) ) <nl> - 	 	 { <nl> - 	 	 	 Collection < IColumn > columns = columnFamily . getAllColumns ( ) ; <nl> - 	 	 	 if ( columns . size ( ) > = 1 ) <nl> - 	 	 	 	 isDone _ = true ; <nl> - 	 	 } <nl> - 	 	 if ( values . length = = 3 & & columnFamily . isSuper ( ) ) <nl> - 	 	 { <nl> - 	 	 Collection < IColumn > columns = columnFamily . getAllColumns ( ) ; <nl> - 	 	 for ( IColumn column : columns ) <nl> - 	 	 { <nl> - 	 	 	 SuperColumn superColumn = ( SuperColumn ) column ; <nl> - 	 	 Collection < IColumn > subColumns = superColumn . getSubColumns ( ) ; <nl> - 	 	 if ( subColumns . size ( ) > = 1 ) <nl> - 	 	 	 isDone _ = true ; <nl> - 	 	 } <nl> - 	 	 } <nl> 	 	 return columnFamily ; <nl> 	 } <nl> <nl> 	 public IColumn filter ( IColumn column , DataInputStream dis ) throws IOException <nl> 	 { <nl> - 	 	 / / TODO Auto - generated method stub <nl> 	 	 return column ; <nl> 	 } <nl> <nl> @ @ - 71 , 18 + 42 , 4 @ @ public class IdentityFilter implements IFilter <nl> 	 { <nl> 	 	 return ssTable . next ( key , cf ) ; <nl> 	 } <nl> - <nl> - 	 public void setDone ( ) <nl> - 	 { <nl> - 	 	 isDone _ = true ; <nl> - 	 } <nl> - 	 / * * <nl> - 	 * @ param args <nl> - 	 * / <nl> - 	 public static void main ( String [ ] args ) <nl> - 	 { <nl> - 	 	 / / TODO Auto - generated method stub <nl> - <nl> - 	 } <nl> - <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / NamesFilter . java b / src / java / org / apache / cassandra / db / NamesFilter . java <nl> index 2966c6f . . 39126de 100644 <nl> - - - a / src / java / org / apache / cassandra / db / NamesFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / NamesFilter . java <nl> @ @ - 54 , 13 + 54 , 8 @ @ public class NamesFilter implements IFilter <nl> 	 	 	 { <nl> 	 	 if ( names _ . contains ( column . name ( ) ) ) <nl> 	 	 { <nl> - 	 	 names _ . remove ( column . name ( ) ) ; <nl> 	 	 	 	 	 filteredCf . addColumn ( column ) ; <nl> 	 	 } <nl> - 	 	 	 	 if ( isDone ( ) ) <nl> - 	 	 	 	 { <nl> - 	 	 	 	 	 return filteredCf ; <nl> - 	 	 	 	 } <nl> 	 	 	 } <nl> 	 	 } <nl> 	 	 else if ( values . length = = 2 & & columnFamily . isSuper ( ) ) <nl> @ @ - 76 , 13 + 71 , 8 @ @ public class NamesFilter implements IFilter <nl> 	 	 { <nl> 	 	 if ( names _ . contains ( subColumn . name ( ) ) ) <nl> 	 	 { <nl> - 	 	 names _ . remove ( subColumn . name ( ) ) ; <nl> 	 	 filteredSuperColumn . addColumn ( subColumn ) ; <nl> 	 	 } <nl> - 	 	 	 	 if ( isDone ( ) ) <nl> - 	 	 	 	 { <nl> - 	 	 	 	 	 return filteredCf ; <nl> - 	 	 	 	 } <nl> 	 	 	 } <nl> 	 	 } <nl> 	 	 } <nl> @ @ - 95 , 24 + 85 , 13 @ @ public class NamesFilter implements IFilter <nl> <nl> public IColumn filter ( IColumn column , DataInputStream dis ) throws IOException <nl> { <nl> - String columnName = column . name ( ) ; <nl> - if ( names _ . contains ( columnName ) ) <nl> - { <nl> - names _ . remove ( columnName ) ; <nl> - } <nl> - else <nl> + if ( ! names _ . contains ( column . name ( ) ) ) <nl> { <nl> column = null ; <nl> } <nl> - <nl> return column ; <nl> } <nl> <nl> - public boolean isDone ( ) <nl> - { <nl> - return names _ . isEmpty ( ) ; <nl> - } <nl> - <nl> public DataInputBuffer next ( String key , String cf , SSTable ssTable ) throws IOException <nl> { <nl> 	 return ssTable . next ( key , cf , names _ , null ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / RangeFilter . java b / src / java / org / apache / cassandra / db / RangeFilter . java <nl> index 54eae61 . . 4a21a60 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RangeFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / RangeFilter . java <nl> @ @ - 33 , 14 + 33 , 12 @ @ public class RangeFilter implements IFilter <nl> { <nl> private final String colMin _ ; <nl> private final String colMax _ ; <nl> - private boolean isDone _ ; <nl> int count _ ; <nl> <nl> RangeFilter ( String colMin , String colMax ) <nl> { <nl> colMin _ = colMin ; <nl> colMax _ = colMax ; <nl> - isDone _ = false ; <nl> count _ = - 1 ; <nl> } <nl> <nl> @ @ - 48 , 7 + 46 , 6 @ @ public class RangeFilter implements IFilter <nl> { <nl> colMin _ = colMin ; <nl> colMax _ = colMax ; <nl> - isDone _ = false ; <nl> count _ = count ; <nl> } <nl> <nl> @ @ - 57 , 28 + 54 , 19 @ @ public class RangeFilter implements IFilter <nl> if ( cf = = null ) <nl> return null ; <nl> <nl> - if ( count _ = = 0 ) <nl> - { <nl> - isDone _ = true ; <nl> - return null ; <nl> - } <nl> - <nl> ColumnFamily filteredColumnFamily = cf . cloneMeShallow ( ) ; <nl> <nl> Collection < IColumn > columns = cf . getAllColumns ( ) ; <nl> + int i = 0 ; <nl> for ( IColumn c : columns ) <nl> { <nl> + if ( ( count _ > = 0 ) & & ( i > = count _ ) ) <nl> + break ; <nl> if ( c . name ( ) . compareTo ( colMin _ ) > = 0 <nl> & & c . name ( ) . compareTo ( colMax _ ) < = 0 ) <nl> { <nl> filteredColumnFamily . addColumn ( c ) ; <nl> - if ( count _ > 0 ) <nl> - count _ - - ; <nl> - if ( count _ = = 0 ) <nl> - { <nl> - isDone _ = true ; <nl> - break ; <nl> - } <nl> + i + + ; <nl> } <nl> } <nl> return filteredColumnFamily ; <nl> @ @ - 87 , 26 + 75 , 15 @ @ public class RangeFilter implements IFilter <nl> public IColumn filter ( IColumn column , DataInputStream dis ) <nl> throws IOException <nl> { <nl> - if ( column = = null | | isDone _ ) <nl> + if ( column = = null ) <nl> return null ; <nl> <nl> if ( column . name ( ) . compareTo ( colMin _ ) > = 0 <nl> & & column . name ( ) . compareTo ( colMax _ ) < = 0 ) <nl> { <nl> - if ( count _ > 0 ) <nl> - count _ - - ; <nl> - if ( count _ = = 0 ) <nl> - isDone _ = true ; <nl> return column ; <nl> - } else <nl> - { <nl> - return null ; <nl> } <nl> - } <nl> - <nl> - public boolean isDone ( ) <nl> - { <nl> - return isDone _ ; <nl> + return null ; <nl> } <nl> <nl> public DataInputBuffer next ( String key , String cf , SSTable ssTable ) <nl> diff - - git a / src / java / org / apache / cassandra / db / SuperColumn . java b / src / java / org / apache / cassandra / db / SuperColumn . java <nl> index a30216f . . 6114caa 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SuperColumn . java <nl> + + + b / src / java / org / apache / cassandra / db / SuperColumn . java <nl> @ @ - 422 , 10 + 422 , 6 @ @ class SuperColumnSerializer implements ICompactSerializer2 < IColumn > <nl> if ( column ! = null ) <nl> { <nl> superColumn . addColumn ( column ) ; <nl> - if ( filter . isDone ( ) ) <nl> - { <nl> - break ; <nl> - } <nl> } <nl> } <nl> return superColumn ; <nl> diff - - git a / src / java / org / apache / cassandra / db / TimeFilter . java b / src / java / org / apache / cassandra / db / TimeFilter . java <nl> index 7e21f16 . . d9263d5 100644 <nl> - - - a / src / java / org / apache / cassandra / db / TimeFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / TimeFilter . java <nl> @ @ - 36 , 12 + 36 , 10 @ @ import org . apache . cassandra . io . SSTable ; <nl> class TimeFilter implements IFilter <nl> { <nl> private long timeLimit _ ; <nl> - private boolean isDone _ ; <nl> <nl> TimeFilter ( long timeLimit ) <nl> { <nl> timeLimit _ = timeLimit ; <nl> - isDone _ = false ; <nl> } <nl> <nl> public ColumnFamily filter ( String cf , ColumnFamily columnFamily ) <nl> @ @ - 54 , 23 + 52 , 17 @ @ class TimeFilter implements IFilter <nl> if ( values . length = = 1 & & ! columnFamily . isSuper ( ) ) <nl> { <nl> Collection < IColumn > columns = columnFamily . getAllColumns ( ) ; <nl> - int i = 0 ; <nl> for ( IColumn column : columns ) <nl> { <nl> if ( column . timestamp ( ) > = timeLimit _ ) <nl> { <nl> filteredCf . addColumn ( column ) ; <nl> - + + i ; <nl> } <nl> else <nl> { <nl> break ; <nl> } <nl> } <nl> - if ( i < columns . size ( ) ) <nl> - { <nl> - isDone _ = true ; <nl> - } <nl> } <nl> else if ( values . length = = 2 & & columnFamily . isSuper ( ) ) <nl> { <nl> @ @ - 87 , 23 + 79 , 17 @ @ class TimeFilter implements IFilter <nl> filteredSuperColumn . markForDeleteAt ( column . getLocalDeletionTime ( ) , column . getMarkedForDeleteAt ( ) ) ; <nl> filteredCf . addColumn ( filteredSuperColumn ) ; <nl> Collection < IColumn > subColumns = superColumn . getSubColumns ( ) ; <nl> - int i = 0 ; <nl> for ( IColumn subColumn : subColumns ) <nl> { <nl> if ( subColumn . timestamp ( ) > = timeLimit _ ) <nl> { <nl> filteredSuperColumn . addColumn ( subColumn ) ; <nl> - + + i ; <nl> } <nl> else <nl> { <nl> break ; <nl> } <nl> } <nl> - if ( i < filteredSuperColumn . getColumnCount ( ) ) <nl> - { <nl> - isDone _ = true ; <nl> - } <nl> } <nl> } <nl> else <nl> @ @ - 130 , 19 + 116 , 12 @ @ class TimeFilter implements IFilter <nl> dis . reset ( ) ; <nl> if ( timeStamp < timeLimit _ ) <nl> { <nl> - isDone _ = true ; <nl> return null ; <nl> } <nl> } <nl> return column ; <nl> } <nl> <nl> - <nl> - public boolean isDone ( ) <nl> - { <nl> - return isDone _ ; <nl> - } <nl> - <nl> public DataInputBuffer next ( String key , String cfName , SSTable ssTable ) throws IOException <nl> { <nl> return ssTable . next ( key , cfName , null , new IndexHelper . TimeRange ( timeLimit _ , Long . MAX _ VALUE ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / RangeFilterTest . java b / test / unit / org / apache / cassandra / db / RangeFilterTest . java <nl> index 78c2360 . . 081bbf3 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RangeFilterTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RangeFilterTest . java <nl> @ @ - 41 , 7 + 41 , 6 @ @ public class RangeFilterTest <nl> ColumnFamily filteredCf = f . filter ( cf . name ( ) , cf ) ; <nl> <nl> assertEquals ( filteredCf . getColumnCount ( ) , 3 ) ; <nl> - assertFalse ( f . isDone ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 59 , 7 + 58 , 6 @ @ public class RangeFilterTest <nl> ColumnFamily filteredCf = f . filter ( cf . name ( ) , cf ) ; <nl> <nl> assertEquals ( filteredCf . getColumnCount ( ) , 2 ) ; <nl> - assertTrue ( f . isDone ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 100 , 7 + 98 , 6 @ @ public class RangeFilterTest <nl> <nl> col = filteredCf . getColumn ( " c " ) ; <nl> assertNotNull ( col ) ; <nl> - assertFalse ( f . isDone ( ) ) ; <nl> } <nl> <nl> }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / SystemKeyspace . java b / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 index f0c91d6 . . e8247a3 100644 
 - - - a / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 + + + b / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 @ @ - 301 , 7 + 301 , 6 @ @ public final class SystemKeyspace 
 + " default _ time _ to _ live int , " 
 + " default _ validator text , " 
 + " dropped _ columns map < text , bigint > , " 
 - + " dropped _ columns _ types map < text , text > , " 
 + " gc _ grace _ seconds int , " 
 + " is _ dense boolean , " 
 + " key _ validator text , " 
 diff - - git a / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java b / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java 
 index 4748820 . . 996b5ff 100644 
 - - - a / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java 
 + + + b / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java 
 @ @ - 330 , 12 + 330 , 7 @ @ public final class LegacySchemaMigrator 
 cfm . bloomFilterFpChance ( cfm . getBloomFilterFpChance ( ) ) ; 
 
 if ( tableRow . has ( " dropped _ columns " ) ) 
 - { 
 - Map < String , String > types = tableRow . has ( " dropped _ columns _ types " ) 
 - ? tableRow . getMap ( " dropped _ columns _ types " , UTF8Type . instance , UTF8Type . instance ) 
 - : Collections . < String , String > emptyMap ( ) ; 
 - addDroppedColumns ( cfm , tableRow . getMap ( " dropped _ columns " , UTF8Type . instance , LongType . instance ) , types ) ; 
 - } 
 + addDroppedColumns ( cfm , tableRow . getMap ( " dropped _ columns " , UTF8Type . instance , LongType . instance ) , Collections . emptyMap ( ) ) ; 
 
 cfm . triggers ( createTriggersFromTriggerRows ( triggerRows ) ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 index 5aad59f . . 8411104 100644 
 - - - a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 + + + b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 @ @ - 1010 , 18 + 1010 , 11 @ @ public final class SchemaKeyspace 
 
 / / We don ' t really use the default validator but as we have it for backward compatibility , we use it to know if it ' s a counter table 
 AbstractType < ? > defaultValidator = TypeParser . parse ( result . getString ( " default _ validator " ) ) ; 
 - boolean isCounter = defaultValidator instanceof CounterColumnType ; 
 + boolean isCounter = defaultValidator instanceof CounterColumnType ; 
 
 UUID cfId = result . getUUID ( " cf _ id " ) ; 
 
 boolean isCQLTable = ! isSuper & & ! isDense & & isCompound ; 
 - boolean isStaticCompactTable = ! isDense & & ! isCompound ; 
 - 
 - / / Internally , compact tables have a specific layout , see CompactTables . But when upgrading from 
 - / / previous versions , they may not have the expected schema , so detect if we need to upgrade and do 
 - / / it in createColumnsFromColumnRows . 
 - / / We can remove this once we don ' t support upgrade from versions < 3 . 0 . 
 - boolean needsUpgrade = ! isCQLTable & & checkNeedsUpgrade ( serializedColumnDefinitions , isSuper , isStaticCompactTable ) ; 
 
 List < ColumnDefinition > columnDefs = createColumnsFromColumnRows ( serializedColumnDefinitions , 
 ksName , 
 @ @ - 1029 , 12 + 1022 , 7 @ @ public final class SchemaKeyspace 
 rawComparator , 
 subComparator , 
 isSuper , 
 - isCQLTable , 
 - isStaticCompactTable , 
 - needsUpgrade ) ; 
 - 
 - if ( needsUpgrade ) 
 - addDefinitionForUpgrade ( columnDefs , ksName , cfName , isStaticCompactTable , isSuper , rawComparator , subComparator , defaultValidator ) ; 
 + isCQLTable ) ; 
 
 CFMetaData cfm = CFMetaData . create ( ksName , cfName , cfId , isDense , isCompound , isSuper , isCounter , columnDefs ) ; 
 
 @ @ - 1078 , 67 + 1066 , 6 @ @ public final class SchemaKeyspace 
 return cfm ; 
 } 
 
 - / / Should only be called on compact tables 
 - private static boolean checkNeedsUpgrade ( UntypedResultSet defs , boolean isSuper , boolean isStaticCompactTable ) 
 - { 
 - if ( isSuper ) 
 - { 
 - / / Check if we ' ve added the " supercolumn map " column yet or not 
 - for ( UntypedResultSet . Row row : defs ) 
 - { 
 - if ( row . getString ( " column _ name " ) . isEmpty ( ) ) 
 - return false ; 
 - } 
 - return true ; 
 - } 
 - 
 - / / For static compact tables , we need to upgrade if the regular definitions haven ' t been converted to static yet , 
 - / / i . e . if we don ' t have a static definition yet . 
 - if ( isStaticCompactTable ) 
 - return ! hasKind ( defs , ColumnDefinition . Kind . STATIC ) ; 
 - 
 - / / For dense compact tables , we need to upgrade if we don ' t have a compact value definition 
 - return ! hasKind ( defs , ColumnDefinition . Kind . REGULAR ) ; 
 - } 
 - 
 - private static void addDefinitionForUpgrade ( List < ColumnDefinition > defs , 
 - String ksName , 
 - String cfName , 
 - boolean isStaticCompactTable , 
 - boolean isSuper , 
 - AbstractType < ? > rawComparator , 
 - AbstractType < ? > subComparator , 
 - AbstractType < ? > defaultValidator ) 
 - { 
 - CompactTables . DefaultNames names = CompactTables . defaultNameGenerator ( defs ) ; 
 - 
 - if ( isSuper ) 
 - { 
 - defs . add ( ColumnDefinition . regularDef ( ksName , cfName , CompactTables . SUPER _ COLUMN _ MAP _ COLUMN _ STR , MapType . getInstance ( subComparator , defaultValidator , true ) , null ) ) ; 
 - } 
 - else if ( isStaticCompactTable ) 
 - { 
 - defs . add ( ColumnDefinition . clusteringKeyDef ( ksName , cfName , names . defaultClusteringName ( ) , rawComparator , null ) ) ; 
 - defs . add ( ColumnDefinition . regularDef ( ksName , cfName , names . defaultCompactValueName ( ) , defaultValidator , null ) ) ; 
 - } 
 - else 
 - { 
 - / / For dense compact tables , we get here if we don ' t have a compact value column , in which case we should add it 
 - / / ( we use EmptyType to recognize that the compact value was not declared by the use ( see CreateTableStatement too ) ) 
 - defs . add ( ColumnDefinition . regularDef ( ksName , cfName , names . defaultCompactValueName ( ) , EmptyType . instance , null ) ) ; 
 - } 
 - } 
 - 
 - private static boolean hasKind ( UntypedResultSet defs , ColumnDefinition . Kind kind ) 
 - { 
 - for ( UntypedResultSet . Row row : defs ) 
 - { 
 - if ( deserializeKind ( row . getString ( " type " ) ) = = kind ) 
 - return true ; 
 - } 
 - return false ; 
 - } 
 - 
 private static void addDroppedColumns ( CFMetaData cfm , Map < String , Long > droppedTimes , Map < String , String > types ) 
 { 
 for ( Map . Entry < String , Long > entry : droppedTimes . entrySet ( ) ) 
 @ @ - 1201 , 13 + 1128 , 11 @ @ public final class SchemaKeyspace 
 AbstractType < ? > rawComparator , 
 AbstractType < ? > rawSubComparator , 
 boolean isSuper , 
 - boolean isCQLTable , 
 - boolean isStaticCompactTable , 
 - boolean needsUpgrade ) 
 + boolean isCQLTable ) 
 { 
 List < ColumnDefinition > columns = new ArrayList < > ( ) ; 
 for ( UntypedResultSet . Row row : rows ) 
 - columns . add ( createColumnFromColumnRow ( row , keyspace , table , rawComparator , rawSubComparator , isSuper , isCQLTable , isStaticCompactTable , needsUpgrade ) ) ; 
 + columns . add ( createColumnFromColumnRow ( row , keyspace , table , rawComparator , rawSubComparator , isSuper , isCQLTable ) ) ; 
 return columns ; 
 } 
 
 @ @ - 1217 , 13 + 1142 , 9 @ @ public final class SchemaKeyspace 
 AbstractType < ? > rawComparator , 
 AbstractType < ? > rawSubComparator , 
 boolean isSuper , 
 - boolean isCQLTable , 
 - boolean isStaticCompactTable , 
 - boolean needsUpgrade ) 
 + boolean isCQLTable ) 
 { 
 ColumnDefinition . Kind kind = deserializeKind ( row . getString ( " type " ) ) ; 
 - if ( needsUpgrade & & isStaticCompactTable & & kind = = ColumnDefinition . Kind . REGULAR ) 
 - kind = ColumnDefinition . Kind . STATIC ; 
 
 Integer componentIndex = null ; 
 if ( row . has ( " component _ index " ) ) 
 diff - - git a / test / unit / org / apache / cassandra / schema / LegacySchemaMigratorTest . java b / test / unit / org / apache / cassandra / schema / LegacySchemaMigratorTest . java 
 index 17cffaf . . 9275da7 100644 
 - - - a / test / unit / org / apache / cassandra / schema / LegacySchemaMigratorTest . java 
 + + + b / test / unit / org / apache / cassandra / schema / LegacySchemaMigratorTest . java 
 @ @ - 407 , 8 + 407 , 6 @ @ public class LegacySchemaMigratorTest 
 String name = entry . getKey ( ) . toString ( ) ; 
 CFMetaData . DroppedColumn column = entry . getValue ( ) ; 
 adder . addMapEntry ( " dropped _ columns " , name , column . droppedTime ) ; 
 - if ( column . type ! = null ) 
 - adder . addMapEntry ( " dropped _ columns _ types " , name , column . type . toString ( ) ) ; 
 } 
 
 adder . add ( " is _ dense " , table . isDense ( ) ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / Column . java b / src / java / org / apache / cassandra / db / Column . java 
 index c025dde . . 2734375 100644 
 - - - a / src / java / org / apache / cassandra / db / Column . java 
 + + + b / src / java / org / apache / cassandra / db / Column . java 
 @ @ - 276 , 18 + 276 , 6 @ @ class ColumnSerializer implements ICompactSerializer2 < IColumn > 
 if ( name . equals ( columnName ) ) 
 { 
 column = defreeze ( dis , name ) ; 
 - if ( filter instanceof IdentityFilter ) 
 - { 
 - 	 / * 
 - 	 * If this is being called with identity filter 
 - 	 * since a column name is passed in we know 
 - 	 * that this is a final call 
 - 	 * Hence if the column is found set the filter to done 
 - 	 * so that we do not look for the column in further files 
 - 	 * / 
 - 	 IdentityFilter f = ( IdentityFilter ) filter ; 
 - 	 f . setDone ( ) ; 
 - } 
 } 
 else 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 950b133 . . ca94586 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 532 , 10 + 532 , 6 @ @ public final class ColumnFamily 
 if ( column ! = null ) 
 { 
 cf . addColumn ( column ) ; 
 - if ( filter . isDone ( ) ) 
 - { 
 - break ; 
 - } 
 } 
 } 
 return cf ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index cb99e7e . . 111a060 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 522 , 17 + 522 , 12 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 List < ColumnFamily > columnFamilies = new ArrayList < ColumnFamily > ( ) ; 
 / * Get the ColumnFamily from Memtable * / 
 getColumnFamilyFromCurrentMemtable ( key , columnFamilyColumn , filter , columnFamilies ) ; 
 - if ( columnFamilies . size ( ) = = 0 | | ! filter . isDone ( ) ) 
 - { 
 - / * Check if MemtableManager has any historical information * / 
 - getUnflushedColumnFamily ( key , columnFamily _ , columnFamilyColumn , filter , columnFamilies ) ; 
 - } 
 - if ( columnFamilies . size ( ) = = 0 | | ! filter . isDone ( ) ) 
 - { 
 - long start = System . currentTimeMillis ( ) ; 
 - getColumnFamilyFromDisk ( key , columnFamilyColumn , columnFamilies , filter ) ; 
 - diskReadStats _ . add ( System . currentTimeMillis ( ) - start ) ; 
 - } 
 + / * Check if MemtableManager has any historical information * / 
 + getUnflushedColumnFamily ( key , columnFamily _ , columnFamilyColumn , filter , columnFamilies ) ; 
 + long start = System . currentTimeMillis ( ) ; 
 + getColumnFamilyFromDisk ( key , columnFamilyColumn , columnFamilies , filter ) ; 
 + diskReadStats _ . add ( System . currentTimeMillis ( ) - start ) ; 
 + 
 return columnFamilies ; 
 } 
 
 @ @ - 574 , 10 + 569 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 if ( columnFamily ! = null ) 
 { 
 columnFamilies . add ( columnFamily ) ; 
 - if ( filter . isDone ( ) ) 
 - { 
 - break ; 
 - } 
 } 
 } 
 } 
 @ @ - 1417 , 8 + 1408 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 if ( columnFamily ! = null ) 
 { 
 columnFamilies . add ( columnFamily ) ; 
 - if ( filter . isDone ( ) ) 
 - break ; 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / IFilter . java b / src / java / org / apache / cassandra / db / IFilter . java 
 index c9fc38d . . f2a426e 100644 
 - - - a / src / java / org / apache / cassandra / db / IFilter . java 
 + + + b / src / java / org / apache / cassandra / db / IFilter . java 
 @ @ - 1 , 21 + 1 , 21 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , 
 - * software distributed under the License is distributed on an 
 - * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 - * KIND , either express or implied . See the License for the 
 - * specific language governing permissions and limitations 
 - * under the License . 
 - * / 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 package org . apache . cassandra . db ; 
 
 import java . io . DataInputStream ; 
 @ @ - 27 , 7 + 27 , 6 @ @ import org . apache . cassandra . io . SSTable ; 
 
 public interface IFilter 
 { 
 - 	 public boolean isDone ( ) ; 
 	 public ColumnFamily filter ( String cfName , ColumnFamily cf ) ; 
 public IColumn filter ( IColumn column , DataInputStream dis ) throws IOException ; 
 public DataInputBuffer next ( String key , String cf , SSTable ssTable ) throws IOException ; 
 diff - - git a / src / java / org / apache / cassandra / db / IdentityFilter . java b / src / java / org / apache / cassandra / db / IdentityFilter . java 
 index 2656667 . . d534534 100644 
 - - - a / src / java / org / apache / cassandra / db / IdentityFilter . java 
 + + + b / src / java / org / apache / cassandra / db / IdentityFilter . java 
 @ @ - 28 , 42 + 28 , 13 @ @ import org . apache . cassandra . io . SSTable ; 
 
 public class IdentityFilter implements IFilter 
 { 
 - private boolean isDone _ = false ; 
 - 
 - 	 public boolean isDone ( ) 
 - 	 { 
 - 	 	 return isDone _ ; 
 - 	 } 
 - 
 	 public ColumnFamily filter ( String cfString , ColumnFamily columnFamily ) 
 	 { 
 - 	 String [ ] values = RowMutation . getColumnAndColumnFamily ( cfString ) ; 
 - 	 if ( columnFamily = = null ) 
 - 	 	 return columnFamily ; 
 - 
 - 	 	 if ( values . length = = 2 & & ! columnFamily . isSuper ( ) ) 
 - 	 	 { 
 - 	 	 	 Collection < IColumn > columns = columnFamily . getAllColumns ( ) ; 
 - 	 	 	 if ( columns . size ( ) > = 1 ) 
 - 	 	 	 	 isDone _ = true ; 
 - 	 	 } 
 - 	 	 if ( values . length = = 3 & & columnFamily . isSuper ( ) ) 
 - 	 	 { 
 - 	 	 Collection < IColumn > columns = columnFamily . getAllColumns ( ) ; 
 - 	 	 for ( IColumn column : columns ) 
 - 	 	 { 
 - 	 	 	 SuperColumn superColumn = ( SuperColumn ) column ; 
 - 	 	 Collection < IColumn > subColumns = superColumn . getSubColumns ( ) ; 
 - 	 	 if ( subColumns . size ( ) > = 1 ) 
 - 	 	 	 isDone _ = true ; 
 - 	 	 } 
 - 	 	 } 
 	 	 return columnFamily ; 
 	 } 
 
 	 public IColumn filter ( IColumn column , DataInputStream dis ) throws IOException 
 	 { 
 - 	 	 / / TODO Auto - generated method stub 
 	 	 return column ; 
 	 } 
 
 @ @ - 71 , 18 + 42 , 4 @ @ public class IdentityFilter implements IFilter 
 	 { 
 	 	 return ssTable . next ( key , cf ) ; 
 	 } 
 - 
 - 	 public void setDone ( ) 
 - 	 { 
 - 	 	 isDone _ = true ; 
 - 	 } 
 - 	 / * * 
 - 	 * @ param args 
 - 	 * / 
 - 	 public static void main ( String [ ] args ) 
 - 	 { 
 - 	 	 / / TODO Auto - generated method stub 
 - 
 - 	 } 
 - 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / NamesFilter . java b / src / java / org / apache / cassandra / db / NamesFilter . java 
 index 2966c6f . . 39126de 100644 
 - - - a / src / java / org / apache / cassandra / db / NamesFilter . java 
 + + + b / src / java / org / apache / cassandra / db / NamesFilter . java 
 @ @ - 54 , 13 + 54 , 8 @ @ public class NamesFilter implements IFilter 
 	 	 	 { 
 	 	 if ( names _ . contains ( column . name ( ) ) ) 
 	 	 { 
 - 	 	 names _ . remove ( column . name ( ) ) ; 
 	 	 	 	 	 filteredCf . addColumn ( column ) ; 
 	 	 } 
 - 	 	 	 	 if ( isDone ( ) ) 
 - 	 	 	 	 { 
 - 	 	 	 	 	 return filteredCf ; 
 - 	 	 	 	 } 
 	 	 	 } 
 	 	 } 
 	 	 else if ( values . length = = 2 & & columnFamily . isSuper ( ) ) 
 @ @ - 76 , 13 + 71 , 8 @ @ public class NamesFilter implements IFilter 
 	 	 { 
 	 	 if ( names _ . contains ( subColumn . name ( ) ) ) 
 	 	 { 
 - 	 	 names _ . remove ( subColumn . name ( ) ) ; 
 	 	 filteredSuperColumn . addColumn ( subColumn ) ; 
 	 	 } 
 - 	 	 	 	 if ( isDone ( ) ) 
 - 	 	 	 	 { 
 - 	 	 	 	 	 return filteredCf ; 
 - 	 	 	 	 } 
 	 	 	 } 
 	 	 } 
 	 	 } 
 @ @ - 95 , 24 + 85 , 13 @ @ public class NamesFilter implements IFilter 
 
 public IColumn filter ( IColumn column , DataInputStream dis ) throws IOException 
 { 
 - String columnName = column . name ( ) ; 
 - if ( names _ . contains ( columnName ) ) 
 - { 
 - names _ . remove ( columnName ) ; 
 - } 
 - else 
 + if ( ! names _ . contains ( column . name ( ) ) ) 
 { 
 column = null ; 
 } 
 - 
 return column ; 
 } 
 
 - public boolean isDone ( ) 
 - { 
 - return names _ . isEmpty ( ) ; 
 - } 
 - 
 public DataInputBuffer next ( String key , String cf , SSTable ssTable ) throws IOException 
 { 
 	 return ssTable . next ( key , cf , names _ , null ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / RangeFilter . java b / src / java / org / apache / cassandra / db / RangeFilter . java 
 index 54eae61 . . 4a21a60 100644 
 - - - a / src / java / org / apache / cassandra / db / RangeFilter . java 
 + + + b / src / java / org / apache / cassandra / db / RangeFilter . java 
 @ @ - 33 , 14 + 33 , 12 @ @ public class RangeFilter implements IFilter 
 { 
 private final String colMin _ ; 
 private final String colMax _ ; 
 - private boolean isDone _ ; 
 int count _ ; 
 
 RangeFilter ( String colMin , String colMax ) 
 { 
 colMin _ = colMin ; 
 colMax _ = colMax ; 
 - isDone _ = false ; 
 count _ = - 1 ; 
 } 
 
 @ @ - 48 , 7 + 46 , 6 @ @ public class RangeFilter implements IFilter 
 { 
 colMin _ = colMin ; 
 colMax _ = colMax ; 
 - isDone _ = false ; 
 count _ = count ; 
 } 
 
 @ @ - 57 , 28 + 54 , 19 @ @ public class RangeFilter implements IFilter 
 if ( cf = = null ) 
 return null ; 
 
 - if ( count _ = = 0 ) 
 - { 
 - isDone _ = true ; 
 - return null ; 
 - } 
 - 
 ColumnFamily filteredColumnFamily = cf . cloneMeShallow ( ) ; 
 
 Collection < IColumn > columns = cf . getAllColumns ( ) ; 
 + int i = 0 ; 
 for ( IColumn c : columns ) 
 { 
 + if ( ( count _ > = 0 ) & & ( i > = count _ ) ) 
 + break ; 
 if ( c . name ( ) . compareTo ( colMin _ ) > = 0 
 & & c . name ( ) . compareTo ( colMax _ ) < = 0 ) 
 { 
 filteredColumnFamily . addColumn ( c ) ; 
 - if ( count _ > 0 ) 
 - count _ - - ; 
 - if ( count _ = = 0 ) 
 - { 
 - isDone _ = true ; 
 - break ; 
 - } 
 + i + + ; 
 } 
 } 
 return filteredColumnFamily ; 
 @ @ - 87 , 26 + 75 , 15 @ @ public class RangeFilter implements IFilter 
 public IColumn filter ( IColumn column , DataInputStream dis ) 
 throws IOException 
 { 
 - if ( column = = null | | isDone _ ) 
 + if ( column = = null ) 
 return null ; 
 
 if ( column . name ( ) . compareTo ( colMin _ ) > = 0 
 & & column . name ( ) . compareTo ( colMax _ ) < = 0 ) 
 { 
 - if ( count _ > 0 ) 
 - count _ - - ; 
 - if ( count _ = = 0 ) 
 - isDone _ = true ; 
 return column ; 
 - } else 
 - { 
 - return null ; 
 } 
 - } 
 - 
 - public boolean isDone ( ) 
 - { 
 - return isDone _ ; 
 + return null ; 
 } 
 
 public DataInputBuffer next ( String key , String cf , SSTable ssTable ) 
 diff - - git a / src / java / org / apache / cassandra / db / SuperColumn . java b / src / java / org / apache / cassandra / db / SuperColumn . java 
 index a30216f . . 6114caa 100644 
 - - - a / src / java / org / apache / cassandra / db / SuperColumn . java 
 + + + b / src / java / org / apache / cassandra / db / SuperColumn . java 
 @ @ - 422 , 10 + 422 , 6 @ @ class SuperColumnSerializer implements ICompactSerializer2 < IColumn > 
 if ( column ! = null ) 
 { 
 superColumn . addColumn ( column ) ; 
 - if ( filter . isDone ( ) ) 
 - { 
 - break ; 
 - } 
 } 
 } 
 return superColumn ; 
 diff - - git a / src / java / org / apache / cassandra / db / TimeFilter . java b / src / java / org / apache / cassandra / db / TimeFilter . java 
 index 7e21f16 . . d9263d5 100644 
 - - - a / src / java / org / apache / cassandra / db / TimeFilter . java 
 + + + b / src / java / org / apache / cassandra / db / TimeFilter . java 
 @ @ - 36 , 12 + 36 , 10 @ @ import org . apache . cassandra . io . SSTable ; 
 class TimeFilter implements IFilter 
 { 
 private long timeLimit _ ; 
 - private boolean isDone _ ; 
 
 TimeFilter ( long timeLimit ) 
 { 
 timeLimit _ = timeLimit ; 
 - isDone _ = false ; 
 } 
 
 public ColumnFamily filter ( String cf , ColumnFamily columnFamily ) 
 @ @ - 54 , 23 + 52 , 17 @ @ class TimeFilter implements IFilter 
 if ( values . length = = 1 & & ! columnFamily . isSuper ( ) ) 
 { 
 Collection < IColumn > columns = columnFamily . getAllColumns ( ) ; 
 - int i = 0 ; 
 for ( IColumn column : columns ) 
 { 
 if ( column . timestamp ( ) > = timeLimit _ ) 
 { 
 filteredCf . addColumn ( column ) ; 
 - + + i ; 
 } 
 else 
 { 
 break ; 
 } 
 } 
 - if ( i < columns . size ( ) ) 
 - { 
 - isDone _ = true ; 
 - } 
 } 
 else if ( values . length = = 2 & & columnFamily . isSuper ( ) ) 
 { 
 @ @ - 87 , 23 + 79 , 17 @ @ class TimeFilter implements IFilter 
 filteredSuperColumn . markForDeleteAt ( column . getLocalDeletionTime ( ) , column . getMarkedForDeleteAt ( ) ) ; 
 filteredCf . addColumn ( filteredSuperColumn ) ; 
 Collection < IColumn > subColumns = superColumn . getSubColumns ( ) ; 
 - int i = 0 ; 
 for ( IColumn subColumn : subColumns ) 
 { 
 if ( subColumn . timestamp ( ) > = timeLimit _ ) 
 { 
 filteredSuperColumn . addColumn ( subColumn ) ; 
 - + + i ; 
 } 
 else 
 { 
 break ; 
 } 
 } 
 - if ( i < filteredSuperColumn . getColumnCount ( ) ) 
 - { 
 - isDone _ = true ; 
 - } 
 } 
 } 
 else 
 @ @ - 130 , 19 + 116 , 12 @ @ class TimeFilter implements IFilter 
 dis . reset ( ) ; 
 if ( timeStamp < timeLimit _ ) 
 { 
 - isDone _ = true ; 
 return null ; 
 } 
 } 
 return column ; 
 } 
 
 - 
 - public boolean isDone ( ) 
 - { 
 - return isDone _ ; 
 - } 
 - 
 public DataInputBuffer next ( String key , String cfName , SSTable ssTable ) throws IOException 
 { 
 return ssTable . next ( key , cfName , null , new IndexHelper . TimeRange ( timeLimit _ , Long . MAX _ VALUE ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / RangeFilterTest . java b / test / unit / org / apache / cassandra / db / RangeFilterTest . java 
 index 78c2360 . . 081bbf3 100644 
 - - - a / test / unit / org / apache / cassandra / db / RangeFilterTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RangeFilterTest . java 
 @ @ - 41 , 7 + 41 , 6 @ @ public class RangeFilterTest 
 ColumnFamily filteredCf = f . filter ( cf . name ( ) , cf ) ; 
 
 assertEquals ( filteredCf . getColumnCount ( ) , 3 ) ; 
 - assertFalse ( f . isDone ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 59 , 7 + 58 , 6 @ @ public class RangeFilterTest 
 ColumnFamily filteredCf = f . filter ( cf . name ( ) , cf ) ; 
 
 assertEquals ( filteredCf . getColumnCount ( ) , 2 ) ; 
 - assertTrue ( f . isDone ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 100 , 7 + 98 , 6 @ @ public class RangeFilterTest 
 
 col = filteredCf . getColumn ( " c " ) ; 
 assertNotNull ( col ) ; 
 - assertFalse ( f . isDone ( ) ) ; 
 } 
 
 }
