BLEU SCORE: 0.03283637368030199

TEST MSG: Fix index build regression from 9669 .
GENERATED MSG: Stop compactions before butchering DataTracker in tests

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 45486c1 . . d86f941 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 937 , 11 + 937 , 14 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> * / <nl> public ListenableFuture < ReplayPosition > forceFlush ( ) <nl> { <nl> - Memtable current = data . getView ( ) . getCurrentMemtable ( ) ; <nl> - for ( ColumnFamilyStore cfs : concatWithIndexes ( ) ) <nl> - if ( ! cfs . data . getView ( ) . getCurrentMemtable ( ) . isClean ( ) ) <nl> - return switchMemtableIfCurrent ( current ) ; <nl> - return waitForFlushes ( ) ; <nl> + synchronized ( data ) <nl> + { <nl> + Memtable current = data . getView ( ) . getCurrentMemtable ( ) ; <nl> + for ( ColumnFamilyStore cfs : concatWithIndexes ( ) ) <nl> + if ( ! cfs . data . getView ( ) . getCurrentMemtable ( ) . isClean ( ) ) <nl> + return switchMemtableIfCurrent ( current ) ; <nl> + return waitForFlushes ( ) ; <nl> + } <nl> } <nl> <nl> / * *
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / compaction / Scrubber . java b / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> index 5809741 . . d0503b9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> @ @ - 127 , 8 + 127 , 11 @ @ public class Scrubber implements Closeable <nl> try <nl> { <nl> key = sstable . partitioner . decorateKey ( ByteBufferUtil . readWithShortLength ( dataFile ) ) ; <nl> - dataSize = dataFile . readLong ( ) ; <nl> - outputHandler . debug ( String . format ( " row % s is % s bytes " , ByteBufferUtil . bytesToHex ( key . key ) , dataSize ) ) ; <nl> + if ( sstable . descriptor . version . hasRowSizeAndColumnCount ) <nl> + { <nl> + dataSize = dataFile . readLong ( ) ; <nl> + outputHandler . debug ( String . format ( " row % s is % s bytes " , ByteBufferUtil . bytesToHex ( key . key ) , dataSize ) ) ; <nl> + } <nl> } <nl> catch ( Throwable th ) <nl> { <nl> @ @ - 155 , 11 + 158 , 23 @ @ public class Scrubber implements Closeable <nl> long dataStart = dataFile . getFilePointer ( ) ; <nl> long dataStartFromIndex = currentIndexKey = = null <nl> ? - 1 <nl> - : rowStart + 2 + currentIndexKey . remaining ( ) + 8 ; <nl> + : rowStart + 2 + currentIndexKey . remaining ( ) ; <nl> + if ( sstable . descriptor . version . hasRowSizeAndColumnCount ) <nl> + dataStartFromIndex + = 8 ; <nl> long dataSizeFromIndex = nextRowPositionFromIndex - dataStartFromIndex ; <nl> + <nl> + if ( ! sstable . descriptor . version . hasRowSizeAndColumnCount ) <nl> + { <nl> + dataSize = dataSizeFromIndex ; <nl> + outputHandler . debug ( String . format ( " row % s is % s bytes " , ByteBufferUtil . bytesToHex ( key . key ) , dataSize ) ) ; <nl> + } <nl> + else <nl> + { <nl> + if ( currentIndexKey ! = null ) <nl> + outputHandler . debug ( String . format ( " Index doublecheck : row % s is % s bytes " , ByteBufferUtil . bytesToHex ( currentIndexKey ) , dataSizeFromIndex ) ) ; <nl> + } <nl> + <nl> assert currentIndexKey ! = null | | indexFile . isEOF ( ) ; <nl> - if ( currentIndexKey ! = null ) <nl> - outputHandler . debug ( String . format ( " Index doublecheck : row % s is % s bytes " , ByteBufferUtil . bytesToHex ( currentIndexKey ) , dataSizeFromIndex ) ) ; <nl> <nl> writer . mark ( ) ; <nl> try

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 45486c1 . . d86f941 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 937 , 11 + 937 , 14 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 * / 
 public ListenableFuture < ReplayPosition > forceFlush ( ) 
 { 
 - Memtable current = data . getView ( ) . getCurrentMemtable ( ) ; 
 - for ( ColumnFamilyStore cfs : concatWithIndexes ( ) ) 
 - if ( ! cfs . data . getView ( ) . getCurrentMemtable ( ) . isClean ( ) ) 
 - return switchMemtableIfCurrent ( current ) ; 
 - return waitForFlushes ( ) ; 
 + synchronized ( data ) 
 + { 
 + Memtable current = data . getView ( ) . getCurrentMemtable ( ) ; 
 + for ( ColumnFamilyStore cfs : concatWithIndexes ( ) ) 
 + if ( ! cfs . data . getView ( ) . getCurrentMemtable ( ) . isClean ( ) ) 
 + return switchMemtableIfCurrent ( current ) ; 
 + return waitForFlushes ( ) ; 
 + } 
 } 
 
 / * *

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / compaction / Scrubber . java b / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 index 5809741 . . d0503b9 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 @ @ - 127 , 8 + 127 , 11 @ @ public class Scrubber implements Closeable 
 try 
 { 
 key = sstable . partitioner . decorateKey ( ByteBufferUtil . readWithShortLength ( dataFile ) ) ; 
 - dataSize = dataFile . readLong ( ) ; 
 - outputHandler . debug ( String . format ( " row % s is % s bytes " , ByteBufferUtil . bytesToHex ( key . key ) , dataSize ) ) ; 
 + if ( sstable . descriptor . version . hasRowSizeAndColumnCount ) 
 + { 
 + dataSize = dataFile . readLong ( ) ; 
 + outputHandler . debug ( String . format ( " row % s is % s bytes " , ByteBufferUtil . bytesToHex ( key . key ) , dataSize ) ) ; 
 + } 
 } 
 catch ( Throwable th ) 
 { 
 @ @ - 155 , 11 + 158 , 23 @ @ public class Scrubber implements Closeable 
 long dataStart = dataFile . getFilePointer ( ) ; 
 long dataStartFromIndex = currentIndexKey = = null 
 ? - 1 
 - : rowStart + 2 + currentIndexKey . remaining ( ) + 8 ; 
 + : rowStart + 2 + currentIndexKey . remaining ( ) ; 
 + if ( sstable . descriptor . version . hasRowSizeAndColumnCount ) 
 + dataStartFromIndex + = 8 ; 
 long dataSizeFromIndex = nextRowPositionFromIndex - dataStartFromIndex ; 
 + 
 + if ( ! sstable . descriptor . version . hasRowSizeAndColumnCount ) 
 + { 
 + dataSize = dataSizeFromIndex ; 
 + outputHandler . debug ( String . format ( " row % s is % s bytes " , ByteBufferUtil . bytesToHex ( key . key ) , dataSize ) ) ; 
 + } 
 + else 
 + { 
 + if ( currentIndexKey ! = null ) 
 + outputHandler . debug ( String . format ( " Index doublecheck : row % s is % s bytes " , ByteBufferUtil . bytesToHex ( currentIndexKey ) , dataSizeFromIndex ) ) ; 
 + } 
 + 
 assert currentIndexKey ! = null | | indexFile . isEOF ( ) ; 
 - if ( currentIndexKey ! = null ) 
 - outputHandler . debug ( String . format ( " Index doublecheck : row % s is % s bytes " , ByteBufferUtil . bytesToHex ( currentIndexKey ) , dataSizeFromIndex ) ) ; 
 
 writer . mark ( ) ; 
 try
