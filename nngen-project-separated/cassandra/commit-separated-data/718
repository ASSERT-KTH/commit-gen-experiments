BLEU SCORE: 0.005913578458639753

TEST MSG: Fixed ConcurrentModificationException when reading metrics in GraphiteReporter
GENERATED MSG: log cassandra and thrift versions at startup . patch by mdennis ; reviewed by jbellis for CASSANDRA - 972

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e8b8abb . . f0ceb70 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 9 <nl> + * Fixed ConcurrentModificationException when reading metrics in GraphiteReporter ( CASSANDRA - 11823 ) <nl> * Fix upgrade of super columns on thrift ( CASSANDRA - 12335 ) <nl> * Fixed flacky BlacklistingCompactionsTest , switched to fixed size types and increased corruption size ( CASSANDRA - 12359 ) <nl> * Rerun ReplicationAwareTokenAllocatorTest on failure to avoid flakiness ( CASSANDRA - 12277 ) <nl> diff - - git a / src / java / org / apache / cassandra / metrics / TableMetrics . java b / src / java / org / apache / cassandra / metrics / TableMetrics . java <nl> index 85bf7f6 . . a21e8ca 100644 <nl> - - - a / src / java / org / apache / cassandra / metrics / TableMetrics . java <nl> + + + b / src / java / org / apache / cassandra / metrics / TableMetrics . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . metrics ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> import java . util . concurrent . ConcurrentMap ; <nl> + import java . util . concurrent . ConcurrentHashMap ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> import com . codahale . metrics . * ; <nl> @ @ - 788 , 7 + 789 , 7 @ @ public class TableMetrics <nl> * / <nl> private boolean register ( String name , String alias , Metric metric ) <nl> { <nl> - boolean ret = allTableMetrics . putIfAbsent ( name , new HashSet < > ( ) ) = = null ; <nl> + boolean ret = allTableMetrics . putIfAbsent ( name , ConcurrentHashMap . newKeySet ( ) ) = = null ; <nl> allTableMetrics . get ( name ) . add ( metric ) ; <nl> all . put ( name , alias ) ; <nl> return ret ;
NEAREST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index d510f17 . . 699eace 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 45 , 7 + 45 , 11 @ @ <nl> < property name = " test . unit . src " value = " $ { test . dir } / unit " / > <nl> < property name = " test . long . src " value = " $ { test . dir } / long " / > <nl> < property name = " dist . dir " value = " $ { build . dir } / dist " / > <nl> - < property name = " version " value = " 0 . 6 . 3 " / > <nl> + < property name = " base . version " value = " 0 . 7 . 0 " / > <nl> + < condition property = " version " value = " $ { base . version } " > <nl> + < isset property = " release " / > <nl> + < / condition > <nl> + < property name = " version " value = " $ { base . version } - SNAPSHOT " / > <nl> < property name = " final . name " value = " $ { ant . project . name } - $ { version } " / > <nl> < property name = " ivy . version " value = " 2 . 1 . 0 " / > <nl> < property name = " ivy . url " <nl> @ @ - 234 , 6 + 238 , 14 @ @ <nl> < / exec > <nl> < / target > <nl> <nl> + < ! - - create properties file with C version - - > <nl> + < target name = " createVersionPropFile " > <nl> + < taskdef name = " propertyfile " classname = " org . apache . tools . ant . taskdefs . optional . PropertyFile " / > <nl> + < propertyfile file = " $ { build . classes } / org / apache / cassandra / config / version . properties " > <nl> + 	 < entry key = " CassandraVersion " value = " $ { version } " / > <nl> + < / propertyfile > <nl> + < / target > <nl> + <nl> < ! - - <nl> 	 The build target builds all the . class files <nl> - - > <nl> @ @ - 252 , 8 + 264 , 10 @ @ <nl> < classpath refid = " cassandra . classpath " / > <nl> < / javac > <nl> <nl> - < paranamer sourceDirectory = " $ { interface . avro . dir } " <nl> - outputDirectory = " $ { build . classes } " / > <nl> + 	 < paranamer sourceDirectory = " $ { interface . avro . dir } " <nl> + 	 	 outputDirectory = " $ { build . classes } " / > <nl> + <nl> + 	 < antcall target = " createVersionPropFile " / > <nl> < / target > <nl> <nl> < ! - - <nl> diff - - git a / src / java / org / apache / cassandra / avro / CassandraDaemon . java b / src / java / org / apache / cassandra / avro / CassandraDaemon . java <nl> index e98a0b0 . . 52f1e64 100644 <nl> - - - a / src / java / org / apache / cassandra / avro / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / avro / CassandraDaemon . java <nl> @ @ - 127 , 7 + 127 , 7 @ @ public class CassandraDaemon extends org . apache . cassandra . service . AbstractCassan <nl> logger . debug ( String . format ( " Binding avro service to % s : % s " , listenAddr , listenPort ) ) ; <nl> SpecificResponder responder = new SpecificResponder ( Cassandra . class , new CassandraServer ( ) ) ; <nl> <nl> - logger . info ( " Cassandra starting up . . . " ) ; <nl> + logger . info ( " Listening for avro clients . . . " ) ; <nl> Mx4jTool . maybeLoad ( ) ; <nl> / / FIXME : This isn ' t actually binding to listenAddr ( it should ) . <nl> server = new HttpServer ( responder , listenPort ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index a616fd0 . . c5696ca 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 62 , 6 + 62 , 7 @ @ import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . net . ResponseVerbHandler ; <nl> import org . apache . cassandra . service . AntiEntropyService . TreeRequestVerbHandler ; <nl> import org . apache . cassandra . streaming . * ; <nl> + import org . apache . cassandra . thrift . Constants ; <nl> import org . apache . cassandra . thrift . UnavailableException ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . WrappedRunnable ; <nl> @ @ - 330 , 6 + 331 , 9 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> <nl> public synchronized void initServer ( ) throws IOException <nl> { <nl> + logger _ . info ( " Cassandra version : " + FBUtilities . getCassandraVersionString ( ) ) ; <nl> + logger _ . info ( " Thrift API version : " + Constants . VERSION ) ; <nl> + <nl> if ( initialized ) <nl> { <nl> if ( isClientMode ) <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java <nl> index ea169f1 . . 8540d31 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java <nl> @ @ - 202 , 7 + 202 , 7 @ @ public class CassandraDaemon extends org . apache . cassandra . service . AbstractCassan <nl> / * * hook for JSVC * / <nl> public void start ( ) <nl> { <nl> - logger . info ( " Cassandra starting up . . . " ) ; <nl> + logger . info ( " Listening for thrift clients . . . " ) ; <nl> Mx4jTool . maybeLoad ( ) ; <nl> serverEngine . serve ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> index 32dcc69 . . ae63580 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> @ @ - 18 , 10 + 18 , 7 @ @ <nl> <nl> package org . apache . cassandra . utils ; <nl> <nl> - import java . io . DataInput ; <nl> - import java . io . DataOutput ; <nl> - import java . io . File ; <nl> - import java . io . IOException ; <nl> + import java . io . * ; <nl> import java . math . BigInteger ; <nl> import java . net . InetAddress ; <nl> import java . net . URL ; <nl> @ @ - 30 , 10 + 27 , 7 @ @ import java . nio . ByteBuffer ; <nl> import java . nio . charset . CharacterCodingException ; <nl> import java . nio . charset . CharsetDecoder ; <nl> import java . security . MessageDigest ; <nl> - import java . util . Arrays ; <nl> - import java . util . Collections ; <nl> - import java . util . Comparator ; <nl> - import java . util . List ; <nl> + import java . util . * ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> import java . util . concurrent . atomic . AtomicLong ; <nl> import java . util . concurrent . atomic . AtomicReference ; <nl> @ @ - 512 , 6 + 506 , 21 @ @ public class FBUtilities <nl> return scpurl . getFile ( ) ; <nl> } <nl> <nl> + public static String getCassandraVersionString ( ) <nl> + { <nl> + try <nl> + { <nl> + InputStream in = ClassLoader . getSystemClassLoader ( ) . getResourceAsStream ( " org / apache / cassandra / config / version . properties " ) ; <nl> + Properties props = new Properties ( ) ; <nl> + props . load ( in ) ; <nl> + return props . getProperty ( " CassandraVersion " ) ; <nl> + } <nl> + catch ( IOException ioe ) <nl> + { <nl> + throw new IOError ( ioe ) ; <nl> + } <nl> + } <nl> + <nl> public static long timestampMicros ( ) <nl> { <nl> / / we use microsecond resolution for compatibility with other client libraries , even though

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e8b8abb . . f0ceb70 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 9 
 + * Fixed ConcurrentModificationException when reading metrics in GraphiteReporter ( CASSANDRA - 11823 ) 
 * Fix upgrade of super columns on thrift ( CASSANDRA - 12335 ) 
 * Fixed flacky BlacklistingCompactionsTest , switched to fixed size types and increased corruption size ( CASSANDRA - 12359 ) 
 * Rerun ReplicationAwareTokenAllocatorTest on failure to avoid flakiness ( CASSANDRA - 12277 ) 
 diff - - git a / src / java / org / apache / cassandra / metrics / TableMetrics . java b / src / java / org / apache / cassandra / metrics / TableMetrics . java 
 index 85bf7f6 . . a21e8ca 100644 
 - - - a / src / java / org / apache / cassandra / metrics / TableMetrics . java 
 + + + b / src / java / org / apache / cassandra / metrics / TableMetrics . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . metrics ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 import java . util . concurrent . ConcurrentMap ; 
 + import java . util . concurrent . ConcurrentHashMap ; 
 import java . util . concurrent . TimeUnit ; 
 
 import com . codahale . metrics . * ; 
 @ @ - 788 , 7 + 789 , 7 @ @ public class TableMetrics 
 * / 
 private boolean register ( String name , String alias , Metric metric ) 
 { 
 - boolean ret = allTableMetrics . putIfAbsent ( name , new HashSet < > ( ) ) = = null ; 
 + boolean ret = allTableMetrics . putIfAbsent ( name , ConcurrentHashMap . newKeySet ( ) ) = = null ; 
 allTableMetrics . get ( name ) . add ( metric ) ; 
 all . put ( name , alias ) ; 
 return ret ;

NEAREST DIFF:
diff - - git a / build . xml b / build . xml 
 index d510f17 . . 699eace 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 45 , 7 + 45 , 11 @ @ 
 < property name = " test . unit . src " value = " $ { test . dir } / unit " / > 
 < property name = " test . long . src " value = " $ { test . dir } / long " / > 
 < property name = " dist . dir " value = " $ { build . dir } / dist " / > 
 - < property name = " version " value = " 0 . 6 . 3 " / > 
 + < property name = " base . version " value = " 0 . 7 . 0 " / > 
 + < condition property = " version " value = " $ { base . version } " > 
 + < isset property = " release " / > 
 + < / condition > 
 + < property name = " version " value = " $ { base . version } - SNAPSHOT " / > 
 < property name = " final . name " value = " $ { ant . project . name } - $ { version } " / > 
 < property name = " ivy . version " value = " 2 . 1 . 0 " / > 
 < property name = " ivy . url " 
 @ @ - 234 , 6 + 238 , 14 @ @ 
 < / exec > 
 < / target > 
 
 + < ! - - create properties file with C version - - > 
 + < target name = " createVersionPropFile " > 
 + < taskdef name = " propertyfile " classname = " org . apache . tools . ant . taskdefs . optional . PropertyFile " / > 
 + < propertyfile file = " $ { build . classes } / org / apache / cassandra / config / version . properties " > 
 + 	 < entry key = " CassandraVersion " value = " $ { version } " / > 
 + < / propertyfile > 
 + < / target > 
 + 
 < ! - - 
 	 The build target builds all the . class files 
 - - > 
 @ @ - 252 , 8 + 264 , 10 @ @ 
 < classpath refid = " cassandra . classpath " / > 
 < / javac > 
 
 - < paranamer sourceDirectory = " $ { interface . avro . dir } " 
 - outputDirectory = " $ { build . classes } " / > 
 + 	 < paranamer sourceDirectory = " $ { interface . avro . dir } " 
 + 	 	 outputDirectory = " $ { build . classes } " / > 
 + 
 + 	 < antcall target = " createVersionPropFile " / > 
 < / target > 
 
 < ! - - 
 diff - - git a / src / java / org / apache / cassandra / avro / CassandraDaemon . java b / src / java / org / apache / cassandra / avro / CassandraDaemon . java 
 index e98a0b0 . . 52f1e64 100644 
 - - - a / src / java / org / apache / cassandra / avro / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / avro / CassandraDaemon . java 
 @ @ - 127 , 7 + 127 , 7 @ @ public class CassandraDaemon extends org . apache . cassandra . service . AbstractCassan 
 logger . debug ( String . format ( " Binding avro service to % s : % s " , listenAddr , listenPort ) ) ; 
 SpecificResponder responder = new SpecificResponder ( Cassandra . class , new CassandraServer ( ) ) ; 
 
 - logger . info ( " Cassandra starting up . . . " ) ; 
 + logger . info ( " Listening for avro clients . . . " ) ; 
 Mx4jTool . maybeLoad ( ) ; 
 / / FIXME : This isn ' t actually binding to listenAddr ( it should ) . 
 server = new HttpServer ( responder , listenPort ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index a616fd0 . . c5696ca 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 62 , 6 + 62 , 7 @ @ import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . net . ResponseVerbHandler ; 
 import org . apache . cassandra . service . AntiEntropyService . TreeRequestVerbHandler ; 
 import org . apache . cassandra . streaming . * ; 
 + import org . apache . cassandra . thrift . Constants ; 
 import org . apache . cassandra . thrift . UnavailableException ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . WrappedRunnable ; 
 @ @ - 330 , 6 + 331 , 9 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 
 public synchronized void initServer ( ) throws IOException 
 { 
 + logger _ . info ( " Cassandra version : " + FBUtilities . getCassandraVersionString ( ) ) ; 
 + logger _ . info ( " Thrift API version : " + Constants . VERSION ) ; 
 + 
 if ( initialized ) 
 { 
 if ( isClientMode ) 
 diff - - git a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java 
 index ea169f1 . . 8540d31 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java 
 @ @ - 202 , 7 + 202 , 7 @ @ public class CassandraDaemon extends org . apache . cassandra . service . AbstractCassan 
 / * * hook for JSVC * / 
 public void start ( ) 
 { 
 - logger . info ( " Cassandra starting up . . . " ) ; 
 + logger . info ( " Listening for thrift clients . . . " ) ; 
 Mx4jTool . maybeLoad ( ) ; 
 serverEngine . serve ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 index 32dcc69 . . ae63580 100644 
 - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java 
 + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 @ @ - 18 , 10 + 18 , 7 @ @ 
 
 package org . apache . cassandra . utils ; 
 
 - import java . io . DataInput ; 
 - import java . io . DataOutput ; 
 - import java . io . File ; 
 - import java . io . IOException ; 
 + import java . io . * ; 
 import java . math . BigInteger ; 
 import java . net . InetAddress ; 
 import java . net . URL ; 
 @ @ - 30 , 10 + 27 , 7 @ @ import java . nio . ByteBuffer ; 
 import java . nio . charset . CharacterCodingException ; 
 import java . nio . charset . CharsetDecoder ; 
 import java . security . MessageDigest ; 
 - import java . util . Arrays ; 
 - import java . util . Collections ; 
 - import java . util . Comparator ; 
 - import java . util . List ; 
 + import java . util . * ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 import java . util . concurrent . atomic . AtomicLong ; 
 import java . util . concurrent . atomic . AtomicReference ; 
 @ @ - 512 , 6 + 506 , 21 @ @ public class FBUtilities 
 return scpurl . getFile ( ) ; 
 } 
 
 + public static String getCassandraVersionString ( ) 
 + { 
 + try 
 + { 
 + InputStream in = ClassLoader . getSystemClassLoader ( ) . getResourceAsStream ( " org / apache / cassandra / config / version . properties " ) ; 
 + Properties props = new Properties ( ) ; 
 + props . load ( in ) ; 
 + return props . getProperty ( " CassandraVersion " ) ; 
 + } 
 + catch ( IOException ioe ) 
 + { 
 + throw new IOError ( ioe ) ; 
 + } 
 + } 
 + 
 public static long timestampMicros ( ) 
 { 
 / / we use microsecond resolution for compatibility with other client libraries , even though
