BLEU SCORE: 0.04767707020457096

TEST MSG: Remove ternary construction of SegmentedFile . Builder in SSTableReader
GENERATED MSG: Use non - pooled SegmentedFile builders when bulk loading

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> index a761e6a . . 24540b8 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> @ @ - 643 , 10 + 643 , 8 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> * / <nl> private void load ( boolean recreateBloomFilter , boolean saveSummaryIfCreated ) throws IOException <nl> { <nl> - try ( SegmentedFile . Builder ibuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) ) ; <nl> - SegmentedFile . Builder dbuilder = compression <nl> - ? SegmentedFile . getCompressedBuilder ( ) <nl> - : SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) ) ) <nl> + try ( SegmentedFile . Builder ibuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) , false ) ; <nl> + SegmentedFile . Builder dbuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) , compression ) ) <nl> { <nl> boolean summaryLoaded = loadSummary ( ibuilder , dbuilder ) ; <nl> boolean builtSummary = false ; <nl> @ @ - 670 , 10 + 668 , 8 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> logger . info ( " Detected erroneously downsampled index summary ; will rebuild summary at full sampling " ) ; <nl> FileUtils . deleteWithConfirm ( new File ( descriptor . filenameFor ( Component . SUMMARY ) ) ) ; <nl> <nl> - try ( SegmentedFile . Builder ibuilderRebuild = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) ) ; <nl> - SegmentedFile . Builder dbuilderRebuild = compression <nl> - ? SegmentedFile . getCompressedBuilder ( ) <nl> - : SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) ) ) <nl> + try ( SegmentedFile . Builder ibuilderRebuild = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) , false ) ; <nl> + SegmentedFile . Builder dbuilderRebuild = SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) , compression ) ) <nl> { <nl> buildSummary ( false , ibuilderRebuild , dbuilderRebuild , false , Downsampling . BASE _ SAMPLING _ LEVEL ) ; <nl> ifile = ibuilderRebuild . complete ( descriptor . filenameFor ( Component . PRIMARY _ INDEX ) ) ; <nl> @ @ - 998 , 10 + 994 , 8 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> / / we can use the existing index summary to make a smaller one <nl> newSummary = IndexSummaryBuilder . downsample ( indexSummary , samplingLevel , minIndexInterval , partitioner ) ; <nl> <nl> - try ( SegmentedFile . Builder ibuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) ) ; <nl> - SegmentedFile . Builder dbuilder = compression <nl> - ? SegmentedFile . getCompressedBuilder ( ) <nl> - : SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) ) ) <nl> + try ( SegmentedFile . Builder ibuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) , false ) ; <nl> + SegmentedFile . Builder dbuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) , compression ) ) <nl> { <nl> saveSummary ( ibuilder , dbuilder , newSummary ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java <nl> index 1f1c42c . . 087e57a 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java <nl> @ @ - 78 , 7 + 78 , 7 @ @ public class BigTableWriter extends SSTableWriter <nl> else <nl> { <nl> dataFile = SequentialWriter . open ( new File ( getFilename ( ) ) , new File ( descriptor . filenameFor ( Component . CRC ) ) ) ; <nl> - dbuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) ) ; <nl> + dbuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) , false ) ; <nl> } <nl> iwriter = new IndexWriter ( keyCount , dataFile ) ; <nl> } <nl> @ @ - 487 , 7 + 487 , 7 @ @ public class BigTableWriter extends SSTableWriter <nl> IndexWriter ( long keyCount , final SequentialWriter dataFile ) <nl> { <nl> indexFile = SequentialWriter . open ( new File ( descriptor . filenameFor ( Component . PRIMARY _ INDEX ) ) ) ; <nl> - builder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) ) ; <nl> + builder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) , false ) ; <nl> summary = new IndexSummaryBuilder ( keyCount , metadata . getMinIndexInterval ( ) , Downsampling . BASE _ SAMPLING _ LEVEL ) ; <nl> bf = FilterFactory . getFilter ( keyCount , metadata . getBloomFilterFpChance ( ) , true ) ; <nl> / / register listeners to be alerted when the data files are flushed <nl> diff - - git a / src / java / org / apache / cassandra / io / util / SegmentedFile . java b / src / java / org / apache / cassandra / io / util / SegmentedFile . java <nl> index dbf2228 . . 98548e1 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / SegmentedFile . java <nl> + + + b / src / java / org / apache / cassandra / io / util / SegmentedFile . java <nl> @ @ - 131 , 16 + 131 , 13 @ @ public abstract class SegmentedFile extends SharedCloseableImpl <nl> / * * <nl> * @ return A SegmentedFile . Builder . <nl> * / <nl> - public static Builder getBuilder ( Config . DiskAccessMode mode ) <nl> + public static Builder getBuilder ( Config . DiskAccessMode mode , boolean compressed ) <nl> { <nl> + assert ! compressed | | mode ! = Config . DiskAccessMode . mmap ; <nl> return mode = = Config . DiskAccessMode . mmap <nl> ? new MmappedSegmentedFile . Builder ( ) <nl> - : new BufferedPoolingSegmentedFile . Builder ( ) ; <nl> - } <nl> - <nl> - public static Builder getCompressedBuilder ( ) <nl> - { <nl> - return getCompressedBuilder ( null ) ; <nl> + : compressed ? new CompressedSegmentedFile . Builder ( null ) <nl> + : new BufferedPoolingSegmentedFile . Builder ( ) ; <nl> } <nl> <nl> public static Builder getCompressedBuilder ( CompressedSequentialWriter writer ) <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java <nl> index 2cb451e . . 82cb8d5 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java <nl> @ @ - 376 , 10 + 376 , 8 @ @ public class SSTableReaderTest <nl> SSTableReader sstable = indexCfs . getSSTables ( ) . iterator ( ) . next ( ) ; <nl> assert sstable . first . getToken ( ) instanceof LocalToken ; <nl> <nl> - try ( SegmentedFile . Builder ibuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) ) ; <nl> - SegmentedFile . Builder dbuilder = sstable . compression <nl> - ? SegmentedFile . getCompressedBuilder ( ) <nl> - : SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) ) ) <nl> + try ( SegmentedFile . Builder ibuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) , false ) ; <nl> + SegmentedFile . Builder dbuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) , sstable . compression ) ) <nl> { <nl> sstable . saveSummary ( ibuilder , dbuilder ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6d95cef . . e2fcbb8 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 7 , 6 + 7 , 7 @ @ <nl> * ( Hadoop ) Make LOCAL _ ONE the default consistency level ( CASSANDRA - 6214 ) <nl> * Require logging in for Thrift CQL2 / 3 statement preparation ( CASSANDRA - 6254 ) <nl> * restrict max _ num _ tokens to 1536 ( CASSANDRA - 6267 ) <nl> + * Nodetool gets default JMX port from cassandra - env . sh ( CASSANDRA - 6273 ) <nl> <nl> <nl> 1 . 2 . 11 <nl> diff - - git a / bin / nodetool b / bin / nodetool <nl> index ef79f66 . . d4c0439 100755 <nl> - - - a / bin / nodetool <nl> + + + b / bin / nodetool <nl> @ @ - 47 , 6 + 47 , 36 @ @ if [ - z " $ CASSANDRA _ CONF " - o - z " $ CLASSPATH " ] ; then <nl> exit 1 <nl> fi <nl> <nl> + # Run cassandra - env . sh to pick up JMX _ PORT <nl> + if [ - f " $ CASSANDRA _ CONF / cassandra - env . sh " ] ; then <nl> + . " $ CASSANDRA _ CONF / cassandra - env . sh " <nl> + fi <nl> + <nl> + # JMX Port passed via cmd line args ( - p 9999 / - - port 9999 / - - port = 9999 ) <nl> + # should override the value from cassandra - env . sh <nl> + ARGS = " " <nl> + while true <nl> + do <nl> + if [ ! $ 1 ] ; then break ; fi <nl> + case $ 1 in <nl> + - p ) <nl> + JMX _ PORT = $ 2 <nl> + shift <nl> + ; ; <nl> + - - port = * ) <nl> + JMX _ PORT = $ ( echo $ 1 | cut - d ' = ' - f 2 ) <nl> + ; ; <nl> + - - port ) <nl> + JMX _ PORT = $ 2 <nl> + shift <nl> + ; ; <nl> + * ) <nl> + ARGS = " $ ARGS $ 1 " <nl> + ; ; <nl> + esac <nl> + shift <nl> + done <nl> + <nl> # Special - case path variables . <nl> case " ` uname ` " in <nl> CYGWIN * ) <nl> @ @ - 59 , 6 + 89 , 6 @ @ esac <nl> - Xmx32m \ <nl> - Dlog4j . configuration = log4j - tools . properties \ <nl> - Dstorage - config = " $ CASSANDRA _ CONF " \ <nl> - org . apache . cassandra . tools . NodeCmd $ { 1 + " $ @ " } <nl> + org . apache . cassandra . tools . NodeCmd - p $ JMX _ PORT $ ARGS <nl> <nl> # vi : ai sw = 4 ts = 4 tw = 0 et

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 index a761e6a . . 24540b8 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 @ @ - 643 , 10 + 643 , 8 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 * / 
 private void load ( boolean recreateBloomFilter , boolean saveSummaryIfCreated ) throws IOException 
 { 
 - try ( SegmentedFile . Builder ibuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) ) ; 
 - SegmentedFile . Builder dbuilder = compression 
 - ? SegmentedFile . getCompressedBuilder ( ) 
 - : SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) ) ) 
 + try ( SegmentedFile . Builder ibuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) , false ) ; 
 + SegmentedFile . Builder dbuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) , compression ) ) 
 { 
 boolean summaryLoaded = loadSummary ( ibuilder , dbuilder ) ; 
 boolean builtSummary = false ; 
 @ @ - 670 , 10 + 668 , 8 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 logger . info ( " Detected erroneously downsampled index summary ; will rebuild summary at full sampling " ) ; 
 FileUtils . deleteWithConfirm ( new File ( descriptor . filenameFor ( Component . SUMMARY ) ) ) ; 
 
 - try ( SegmentedFile . Builder ibuilderRebuild = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) ) ; 
 - SegmentedFile . Builder dbuilderRebuild = compression 
 - ? SegmentedFile . getCompressedBuilder ( ) 
 - : SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) ) ) 
 + try ( SegmentedFile . Builder ibuilderRebuild = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) , false ) ; 
 + SegmentedFile . Builder dbuilderRebuild = SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) , compression ) ) 
 { 
 buildSummary ( false , ibuilderRebuild , dbuilderRebuild , false , Downsampling . BASE _ SAMPLING _ LEVEL ) ; 
 ifile = ibuilderRebuild . complete ( descriptor . filenameFor ( Component . PRIMARY _ INDEX ) ) ; 
 @ @ - 998 , 10 + 994 , 8 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 / / we can use the existing index summary to make a smaller one 
 newSummary = IndexSummaryBuilder . downsample ( indexSummary , samplingLevel , minIndexInterval , partitioner ) ; 
 
 - try ( SegmentedFile . Builder ibuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) ) ; 
 - SegmentedFile . Builder dbuilder = compression 
 - ? SegmentedFile . getCompressedBuilder ( ) 
 - : SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) ) ) 
 + try ( SegmentedFile . Builder ibuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) , false ) ; 
 + SegmentedFile . Builder dbuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) , compression ) ) 
 { 
 saveSummary ( ibuilder , dbuilder , newSummary ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java 
 index 1f1c42c . . 087e57a 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java 
 @ @ - 78 , 7 + 78 , 7 @ @ public class BigTableWriter extends SSTableWriter 
 else 
 { 
 dataFile = SequentialWriter . open ( new File ( getFilename ( ) ) , new File ( descriptor . filenameFor ( Component . CRC ) ) ) ; 
 - dbuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) ) ; 
 + dbuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) , false ) ; 
 } 
 iwriter = new IndexWriter ( keyCount , dataFile ) ; 
 } 
 @ @ - 487 , 7 + 487 , 7 @ @ public class BigTableWriter extends SSTableWriter 
 IndexWriter ( long keyCount , final SequentialWriter dataFile ) 
 { 
 indexFile = SequentialWriter . open ( new File ( descriptor . filenameFor ( Component . PRIMARY _ INDEX ) ) ) ; 
 - builder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) ) ; 
 + builder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) , false ) ; 
 summary = new IndexSummaryBuilder ( keyCount , metadata . getMinIndexInterval ( ) , Downsampling . BASE _ SAMPLING _ LEVEL ) ; 
 bf = FilterFactory . getFilter ( keyCount , metadata . getBloomFilterFpChance ( ) , true ) ; 
 / / register listeners to be alerted when the data files are flushed 
 diff - - git a / src / java / org / apache / cassandra / io / util / SegmentedFile . java b / src / java / org / apache / cassandra / io / util / SegmentedFile . java 
 index dbf2228 . . 98548e1 100644 
 - - - a / src / java / org / apache / cassandra / io / util / SegmentedFile . java 
 + + + b / src / java / org / apache / cassandra / io / util / SegmentedFile . java 
 @ @ - 131 , 16 + 131 , 13 @ @ public abstract class SegmentedFile extends SharedCloseableImpl 
 / * * 
 * @ return A SegmentedFile . Builder . 
 * / 
 - public static Builder getBuilder ( Config . DiskAccessMode mode ) 
 + public static Builder getBuilder ( Config . DiskAccessMode mode , boolean compressed ) 
 { 
 + assert ! compressed | | mode ! = Config . DiskAccessMode . mmap ; 
 return mode = = Config . DiskAccessMode . mmap 
 ? new MmappedSegmentedFile . Builder ( ) 
 - : new BufferedPoolingSegmentedFile . Builder ( ) ; 
 - } 
 - 
 - public static Builder getCompressedBuilder ( ) 
 - { 
 - return getCompressedBuilder ( null ) ; 
 + : compressed ? new CompressedSegmentedFile . Builder ( null ) 
 + : new BufferedPoolingSegmentedFile . Builder ( ) ; 
 } 
 
 public static Builder getCompressedBuilder ( CompressedSequentialWriter writer ) 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java 
 index 2cb451e . . 82cb8d5 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java 
 @ @ - 376 , 10 + 376 , 8 @ @ public class SSTableReaderTest 
 SSTableReader sstable = indexCfs . getSSTables ( ) . iterator ( ) . next ( ) ; 
 assert sstable . first . getToken ( ) instanceof LocalToken ; 
 
 - try ( SegmentedFile . Builder ibuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) ) ; 
 - SegmentedFile . Builder dbuilder = sstable . compression 
 - ? SegmentedFile . getCompressedBuilder ( ) 
 - : SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) ) ) 
 + try ( SegmentedFile . Builder ibuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) , false ) ; 
 + SegmentedFile . Builder dbuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) , sstable . compression ) ) 
 { 
 sstable . saveSummary ( ibuilder , dbuilder ) ; 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6d95cef . . e2fcbb8 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 7 , 6 + 7 , 7 @ @ 
 * ( Hadoop ) Make LOCAL _ ONE the default consistency level ( CASSANDRA - 6214 ) 
 * Require logging in for Thrift CQL2 / 3 statement preparation ( CASSANDRA - 6254 ) 
 * restrict max _ num _ tokens to 1536 ( CASSANDRA - 6267 ) 
 + * Nodetool gets default JMX port from cassandra - env . sh ( CASSANDRA - 6273 ) 
 
 
 1 . 2 . 11 
 diff - - git a / bin / nodetool b / bin / nodetool 
 index ef79f66 . . d4c0439 100755 
 - - - a / bin / nodetool 
 + + + b / bin / nodetool 
 @ @ - 47 , 6 + 47 , 36 @ @ if [ - z " $ CASSANDRA _ CONF " - o - z " $ CLASSPATH " ] ; then 
 exit 1 
 fi 
 
 + # Run cassandra - env . sh to pick up JMX _ PORT 
 + if [ - f " $ CASSANDRA _ CONF / cassandra - env . sh " ] ; then 
 + . " $ CASSANDRA _ CONF / cassandra - env . sh " 
 + fi 
 + 
 + # JMX Port passed via cmd line args ( - p 9999 / - - port 9999 / - - port = 9999 ) 
 + # should override the value from cassandra - env . sh 
 + ARGS = " " 
 + while true 
 + do 
 + if [ ! $ 1 ] ; then break ; fi 
 + case $ 1 in 
 + - p ) 
 + JMX _ PORT = $ 2 
 + shift 
 + ; ; 
 + - - port = * ) 
 + JMX _ PORT = $ ( echo $ 1 | cut - d ' = ' - f 2 ) 
 + ; ; 
 + - - port ) 
 + JMX _ PORT = $ 2 
 + shift 
 + ; ; 
 + * ) 
 + ARGS = " $ ARGS $ 1 " 
 + ; ; 
 + esac 
 + shift 
 + done 
 + 
 # Special - case path variables . 
 case " ` uname ` " in 
 CYGWIN * ) 
 @ @ - 59 , 6 + 89 , 6 @ @ esac 
 - Xmx32m \ 
 - Dlog4j . configuration = log4j - tools . properties \ 
 - Dstorage - config = " $ CASSANDRA _ CONF " \ 
 - org . apache . cassandra . tools . NodeCmd $ { 1 + " $ @ " } 
 + org . apache . cassandra . tools . NodeCmd - p $ JMX _ PORT $ ARGS 
 
 # vi : ai sw = 4 ts = 4 tw = 0 et
