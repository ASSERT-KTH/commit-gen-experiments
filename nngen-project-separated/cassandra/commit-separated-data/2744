BLEU SCORE: 0.04266331692956902

TEST MSG: who forgets to add files ? I do .
GENERATED MSG: allow addIndex to create indexes that did not previously exist

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / hadoop / ReporterWrapper . java b / src / java / org / apache / cassandra / hadoop / ReporterWrapper . java <nl> new file mode 100644 <nl> index 0000000 . . 9940ba4 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / hadoop / ReporterWrapper . java <nl> @ @ - 0 , 0 + 1 , 57 @ @ <nl> + package org . apache . cassandra . hadoop ; <nl> + <nl> + import org . apache . hadoop . mapred . Counters ; <nl> + import org . apache . hadoop . mapred . InputSplit ; <nl> + import org . apache . hadoop . mapred . Reporter ; <nl> + import org . apache . hadoop . mapreduce . StatusReporter ; <nl> + <nl> + / * * <nl> + * A reporter that works with both mapred and mapreduce APIs . <nl> + * / <nl> + public class ReporterWrapper extends StatusReporter implements Reporter { <nl> + private Reporter wrappedReporter ; <nl> + <nl> + public ReporterWrapper ( Reporter reporter ) { <nl> + wrappedReporter = reporter ; <nl> + } <nl> + <nl> + @ Override <nl> + public Counters . Counter getCounter ( Enum < ? > anEnum ) { <nl> + return wrappedReporter . getCounter ( anEnum ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public Counters . Counter getCounter ( String s , String s1 ) { <nl> + return wrappedReporter . getCounter ( s , s1 ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void incrCounter ( Enum < ? > anEnum , long l ) { <nl> + wrappedReporter . incrCounter ( anEnum , l ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void incrCounter ( String s , String s1 , long l ) { <nl> + wrappedReporter . incrCounter ( s , s1 , l ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public InputSplit getInputSplit ( ) throws UnsupportedOperationException { <nl> + return wrappedReporter . getInputSplit ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void progress ( ) { <nl> + wrappedReporter . progress ( ) ; <nl> + } <nl> + <nl> + / / @ Override <nl> + public float getProgress ( ) { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void setStatus ( String s ) { <nl> + wrappedReporter . setStatus ( s ) ; <nl> + } <nl> + } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index 846429f . . 2836f1e 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 67 , 6 + 67 , 7 @ @ public final class CFMetaData <nl> public static final CFMetaData HintsCf = newSystemTable ( HintedHandOffManager . HINTS _ CF , 1 , " hinted handoff data " , BytesType . instance , BytesType . instance ) ; <nl> public static final CFMetaData MigrationsCf = newSystemTable ( Migration . MIGRATIONS _ CF , 2 , " individual schema mutations " , TimeUUIDType . instance , null ) ; <nl> public static final CFMetaData SchemaCf = newSystemTable ( Migration . SCHEMA _ CF , 3 , " current state of the schema " , UTF8Type . instance , null ) ; <nl> + public static final CFMetaData IndexCf = newSystemTable ( SystemTable . INDEX _ CF , 5 , " indexes that have been completed " , UTF8Type . instance , null ) ; <nl> <nl> private static CFMetaData newSystemTable ( String cfName , int cfId , String comment , AbstractType comparator , AbstractType subComparator ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index eaad4aa . . ffb5134 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 350 , 15 + 350 , 16 @ @ public class DatabaseDescriptor <nl> LocalStrategy . class , <nl> null , <nl> 1 , <nl> - new CFMetaData [ ] { CFMetaData . StatusCf , <nl> - CFMetaData . HintsCf , <nl> - CFMetaData . MigrationsCf , <nl> - CFMetaData . SchemaCf , <nl> - } ) ; <nl> + CFMetaData . StatusCf , <nl> + CFMetaData . HintsCf , <nl> + CFMetaData . MigrationsCf , <nl> + CFMetaData . SchemaCf , <nl> + CFMetaData . IndexCf ) ; <nl> CFMetaData . map ( CFMetaData . StatusCf ) ; <nl> CFMetaData . map ( CFMetaData . HintsCf ) ; <nl> CFMetaData . map ( CFMetaData . MigrationsCf ) ; <nl> CFMetaData . map ( CFMetaData . SchemaCf ) ; <nl> + CFMetaData . map ( CFMetaData . IndexCf ) ; <nl> tables . put ( Table . SYSTEM _ TABLE , systemMeta ) ; <nl> <nl> / * Load the seeds for node contact points * / <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index f4802ff . . b9635e8 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 27 , 6 + 27 , 8 @ @ import java . util . * ; <nl> import java . util . concurrent . * ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> import java . util . concurrent . atomic . AtomicReference ; <nl> + import javax . management . MBeanServer ; <nl> + import javax . management . ObjectName ; <nl> <nl> import com . google . common . collect . Iterables ; <nl> import org . apache . commons . collections . IteratorUtils ; <nl> @ @ - 41 , 7 + 43 , 6 @ @ import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . IClock . ClockRelationship ; <nl> - import org . apache . cassandra . db . clock . TimestampReconciler ; <nl> import org . apache . cassandra . db . columniterator . IColumnIterator ; <nl> import org . apache . cassandra . db . columniterator . IdentityQueryFilter ; <nl> import org . apache . cassandra . db . commitlog . CommitLog ; <nl> @ @ - 51 , 11 + 52 , 7 @ @ import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . db . marshal . BytesType ; <nl> import org . apache . cassandra . db . marshal . LocalByPartionerType ; <nl> import org . apache . cassandra . dht . * ; <nl> - import org . apache . cassandra . io . sstable . Component ; <nl> - import org . apache . cassandra . io . sstable . Descriptor ; <nl> - import org . apache . cassandra . io . sstable . SSTable ; <nl> - import org . apache . cassandra . io . sstable . SSTableReader ; <nl> - import org . apache . cassandra . io . sstable . SSTableTracker ; <nl> + import org . apache . cassandra . io . sstable . * ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . thrift . IndexClause ; <nl> @ @ - 66 , 9 + 63 , 6 @ @ import org . apache . cassandra . utils . LatencyTracker ; <nl> import org . apache . cassandra . utils . Pair ; <nl> import org . apache . cassandra . utils . WrappedRunnable ; <nl> <nl> - import javax . management . MBeanServer ; <nl> - import javax . management . ObjectName ; <nl> - <nl> public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> private static Logger logger = LoggerFactory . getLogger ( ColumnFamilyStore . class ) ; <nl> @ @ - 176 , 7 + 170 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> for ( ColumnDefinition info : metadata . column _ metadata . values ( ) ) <nl> { <nl> if ( info . index _ type ! = null ) <nl> - addIndex ( table , info ) ; <nl> + addIndex ( info ) ; <nl> } <nl> <nl> / / register the mbean <nl> @ @ - 194 , 17 + 188 , 35 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> - private void addIndex ( String table , ColumnDefinition info ) <nl> + public void addIndex ( final ColumnDefinition info ) <nl> { <nl> + assert info . index _ type ! = null ; <nl> IPartitioner rowPartitioner = StorageService . getPartitioner ( ) ; <nl> AbstractType columnComparator = ( rowPartitioner instanceof OrderPreservingPartitioner | | rowPartitioner instanceof ByteOrderedPartitioner ) <nl> ? BytesType . instance <nl> : new LocalByPartionerType ( StorageService . getPartitioner ( ) ) ; <nl> - CFMetaData indexedCfMetadata = CFMetaData . newIndexMetadata ( table , columnFamily , info , columnComparator ) ; <nl> + final CFMetaData indexedCfMetadata = CFMetaData . newIndexMetadata ( table , columnFamily , info , columnComparator ) ; <nl> ColumnFamilyStore indexedCfs = ColumnFamilyStore . createColumnFamilyStore ( table , <nl> indexedCfMetadata . cfName , <nl> new LocalPartitioner ( metadata . column _ metadata . get ( info . name ) . validator ) , <nl> indexedCfMetadata ) ; <nl> + if ( ! SystemTable . isIndexBuilt ( table , indexedCfMetadata . cfName ) ) <nl> + { <nl> + logger . info ( " Creating index { } . { } " , table , indexedCfMetadata . cfName ) ; <nl> + Runnable runnable = new WrappedRunnable ( ) <nl> + { <nl> + public void runMayThrow ( ) throws IOException , ExecutionException , InterruptedException <nl> + { <nl> + logger . debug ( " Submitting index build to compactionmanager " ) ; <nl> + ReducingKeyIterator iter = new ReducingKeyIterator ( getSSTables ( ) ) ; <nl> + Future future = CompactionManager . instance . submitIndexBuild ( ColumnFamilyStore . this , FBUtilities . getSingleColumnSet ( info . name ) , iter ) ; <nl> + future . get ( ) ; <nl> + logger . info ( " Index { } complete " , indexedCfMetadata . cfName ) ; <nl> + SystemTable . setIndexBuilt ( table , indexedCfMetadata . cfName ) ; <nl> + } <nl> + } ; <nl> + forceFlush ( runnable ) ; <nl> + } <nl> indexedColumns . put ( info . name , indexedCfs ) ; <nl> } <nl> <nl> @ @ - 397 , 7 + 409 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> <nl> / * * flush the given memtable and swap in a new one for its CFS , if it hasn ' t been frozen already . threadsafe . * / <nl> - Future < ? > maybeSwitchMemtable ( Memtable oldMemtable , final boolean writeCommitLog ) <nl> + Future < ? > maybeSwitchMemtable ( Memtable oldMemtable , final boolean writeCommitLog , final Runnable afterFlush ) <nl> { <nl> / * * <nl> * If we can get the writelock , that means no new updates can come in and <nl> @ @ - 436 , 6 + 448 , 8 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> / / if we ' re not writing to the commit log , we are replaying the log , so marking <nl> / / the log header with " you can discard anything written before the context " is not valid <nl> CommitLog . instance ( ) . discardCompletedSegments ( metadata . cfId , ctx ) ; <nl> + if ( afterFlush ! = null ) <nl> + afterFlush . run ( ) ; <nl> } <nl> } <nl> } ) ; <nl> @ @ - 465 , 10 + 479 , 15 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> public Future < ? > forceFlush ( ) <nl> { <nl> + return forceFlush ( null ) ; <nl> + } <nl> + <nl> + public Future < ? > forceFlush ( Runnable afterFlush ) <nl> + { <nl> if ( memtable . isClean ( ) ) <nl> return null ; <nl> <nl> - return maybeSwitchMemtable ( memtable , true ) ; <nl> + return maybeSwitchMemtable ( memtable , true , afterFlush ) ; <nl> } <nl> <nl> public void forceBlockingFlush ( ) throws ExecutionException , InterruptedException <nl> diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> index 3f97d44 . . 64289db 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> @ @ - 495 , 14 + 495 , 14 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return tablePairs ; <nl> } <nl> <nl> - public Future submitIndexBuild ( final ColumnFamilyStore cfs , final KeyIterator iter ) <nl> + public Future submitIndexBuild ( final ColumnFamilyStore cfs , final SortedSet < byte [ ] > columns , final IKeyIterator iter ) <nl> { <nl> Runnable runnable = new Runnable ( ) <nl> { <nl> public void run ( ) <nl> { <nl> executor . beginCompaction ( cfs , iter ) ; <nl> - Table . open ( cfs . table ) . rebuildIndex ( cfs , iter ) ; <nl> + Table . open ( cfs . table ) . rebuildIndex ( cfs , columns , iter ) ; <nl> } <nl> } ; <nl> return executor . submit ( runnable ) ; <nl> @ @ - 528 , 7 + 528 , 8 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return Range . isTokenInRanges ( ( ( SSTableIdentityIterator ) row ) . getKey ( ) . token , ranges ) ; <nl> } <nl> } ; <nl> - CollatingIterator iter = FBUtilities . < SSTableIdentityIterator > getCollatingIterator ( ) ; <nl> + / / TODO CollatingIterator iter = FBUtilities . < SSTableIdentityIterator > getCollatingIterator ( ) ; <nl> + CollatingIterator iter = FBUtilities . getCollatingIterator ( ) ; <nl> for ( SSTableReader sstable : sstables ) <nl> { <nl> SSTableScanner scanner = sstable . getScanner ( FILE _ BUFFER _ SIZE ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / SystemTable . java b / src / java / org / apache / cassandra / db / SystemTable . java <nl> index 72d2cb6 . . f5d5ce1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SystemTable . java <nl> + + + b / src / java / org / apache / cassandra / db / SystemTable . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ import org . slf4j . LoggerFactory ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . ConfigurationException ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . db . clock . TimestampReconciler ; <nl> import org . apache . cassandra . db . filter . QueryFilter ; <nl> import org . apache . cassandra . db . filter . QueryPath ; <nl> import org . apache . cassandra . db . marshal . BytesType ; <nl> @ @ - 49 , 6 + 50 , 7 @ @ public class SystemTable <nl> { <nl> private static Logger logger = LoggerFactory . getLogger ( SystemTable . class ) ; <nl> public static final String STATUS _ CF = " LocationInfo " ; / / keep the old CF string for backwards - compatibility <nl> + public static final String INDEX _ CF = " IndexInfo " ; <nl> private static final byte [ ] LOCATION _ KEY = " L " . getBytes ( UTF _ 8 ) ; <nl> private static final byte [ ] BOOTSTRAP _ KEY = " Bootstrap " . getBytes ( UTF _ 8 ) ; <nl> private static final byte [ ] COOKIE _ KEY = " Cookies " . getBytes ( UTF _ 8 ) ; <nl> @ @ - 336 , 6 + 338 , 24 @ @ public class SystemTable <nl> } <nl> } <nl> <nl> + public static boolean isIndexBuilt ( String table , String indexName ) <nl> + { <nl> + ColumnFamilyStore cfs = Table . open ( Table . SYSTEM _ TABLE ) . getColumnFamilyStore ( INDEX _ CF ) ; <nl> + QueryFilter filter = QueryFilter . getNamesFilter ( decorate ( table . getBytes ( UTF _ 8 ) ) , <nl> + new QueryPath ( INDEX _ CF ) , <nl> + indexName . getBytes ( UTF _ 8 ) ) ; <nl> + return cfs . getColumnFamily ( filter ) ! = null ; <nl> + } <nl> + <nl> + public static void setIndexBuilt ( String table , String indexName ) throws IOException <nl> + { <nl> + ColumnFamily cf = ColumnFamily . create ( Table . SYSTEM _ TABLE , INDEX _ CF ) ; <nl> + cf . addColumn ( new Column ( indexName . getBytes ( UTF _ 8 ) , ArrayUtils . EMPTY _ BYTE _ ARRAY , new TimestampClock ( System . currentTimeMillis ( ) ) ) ) ; <nl> + RowMutation rm = new RowMutation ( Table . SYSTEM _ TABLE , table . getBytes ( UTF _ 8 ) ) ; <nl> + rm . add ( cf ) ; <nl> + rm . apply ( ) ; <nl> + } <nl> + <nl> public static class StorageMetadata <nl> { <nl> private Token token ; <nl> diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java <nl> index 366b02b . . d96608b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Table . java <nl> + + + b / src / java / org / apache / cassandra / db / Table . java <nl> @ @ - 33 , 7 + 33 , 7 @ @ import org . apache . cassandra . config . * ; <nl> import org . apache . cassandra . db . clock . AbstractReconciler ; <nl> import org . apache . cassandra . db . commitlog . CommitLog ; <nl> import org . apache . cassandra . dht . LocalToken ; <nl> - import org . apache . cassandra . io . sstable . KeyIterator ; <nl> + import org . apache . cassandra . io . sstable . IKeyIterator ; <nl> import org . apache . cassandra . io . sstable . SSTableDeletingReference ; <nl> import org . apache . cassandra . io . sstable . SSTableReader ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> @ @ - 42 , 7 + 42 , 6 @ @ import org . apache . commons . lang . ArrayUtils ; <nl> <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . db . filter . * ; <nl> - import org . apache . cassandra . thrift . ColumnParent ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; <nl> <nl> @ @ - 386 , 7 + 385 , 7 @ @ public class Table <nl> <nl> / / flush memtables that got filled up . usually mTF will be empty and this will be a no - op <nl> for ( Map . Entry < ColumnFamilyStore , Memtable > entry : memtablesToFlush . entrySet ( ) ) <nl> - entry . getKey ( ) . maybeSwitchMemtable ( entry . getValue ( ) , writeCommitLog ) ; <nl> + entry . getKey ( ) . maybeSwitchMemtable ( entry . getValue ( ) , writeCommitLog , null ) ; <nl> } <nl> <nl> private static void ignoreObsoleteMutations ( ColumnFamily cf , AbstractReconciler reconciler , SortedSet < byte [ ] > mutatedIndexedColumns , ColumnFamily oldIndexedColumns ) <nl> @ @ - 444 , 18 + 443 , 19 @ @ public class Table <nl> } <nl> } <nl> <nl> - public void rebuildIndex ( ColumnFamilyStore cfs , KeyIterator iter ) <nl> + public void rebuildIndex ( ColumnFamilyStore cfs , SortedSet < byte [ ] > columns , IKeyIterator iter ) <nl> { <nl> while ( iter . hasNext ( ) ) <nl> { <nl> DecoratedKey key = iter . next ( ) ; <nl> + logger . debug ( " Indexing row { } " , key ) ; <nl> HashMap < ColumnFamilyStore , Memtable > memtablesToFlush = new HashMap < ColumnFamilyStore , Memtable > ( 2 ) ; <nl> flusherLock . readLock ( ) . lock ( ) ; <nl> try <nl> { <nl> synchronized ( indexLockFor ( key . key ) ) <nl> { <nl> - ColumnFamily cf = readCurrentIndexedColumns ( key , cfs , cfs . getIndexedColumns ( ) ) ; <nl> + ColumnFamily cf = readCurrentIndexedColumns ( key , cfs , columns ) ; <nl> applyIndexUpdates ( key . key , memtablesToFlush , cf , cfs , cf . getColumnNames ( ) , null ) ; <nl> } <nl> } <nl> @ @ - 465 , 7 + 465 , 16 @ @ public class Table <nl> } <nl> <nl> for ( Map . Entry < ColumnFamilyStore , Memtable > entry : memtablesToFlush . entrySet ( ) ) <nl> - entry . getKey ( ) . maybeSwitchMemtable ( entry . getValue ( ) , false ) ; <nl> + entry . getKey ( ) . maybeSwitchMemtable ( entry . getValue ( ) , false , null ) ; <nl> + } <nl> + <nl> + try <nl> + { <nl> + iter . close ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java b / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java <nl> index ae9ca6a . . b3519ad 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import org . apache . cassandra . io . sstable . SSTableReader ; <nl> import org . apache . cassandra . io . util . FileDataInput ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> public class NamesQueryFilter implements IFilter <nl> { <nl> @ @ - 42 , 21 + 43 , 7 @ @ public class NamesQueryFilter implements IFilter <nl> <nl> public NamesQueryFilter ( byte [ ] column ) <nl> { <nl> - this ( getSingleColumnSet ( column ) ) ; <nl> - } <nl> - <nl> - private static TreeSet < byte [ ] > getSingleColumnSet ( byte [ ] column ) <nl> - { <nl> - Comparator < byte [ ] > singleColumnComparator = new Comparator < byte [ ] > ( ) <nl> - { <nl> - public int compare ( byte [ ] o1 , byte [ ] o2 ) <nl> - { <nl> - return Arrays . equals ( o1 , o2 ) ? 0 : - 1 ; <nl> - } <nl> - } ; <nl> - TreeSet < byte [ ] > set = new TreeSet < byte [ ] > ( singleColumnComparator ) ; <nl> - set . add ( column ) ; <nl> - return set ; <nl> + this ( FBUtilities . getSingleColumnSet ( column ) ) ; <nl> } <nl> <nl> public IColumnIterator getMemtableColumnIterator ( ColumnFamily cf , DecoratedKey key , AbstractType comparator ) <nl> diff - - git a / src / java / org / apache / cassandra / io / CompactionIterator . java b / src / java / org / apache / cassandra / io / CompactionIterator . java <nl> index 53a1e98 . . 304e3dd 100644 <nl> - - - a / src / java / org / apache / cassandra / io / CompactionIterator . java <nl> + + + b / src / java / org / apache / cassandra / io / CompactionIterator . java <nl> @ @ - 78 , 7 + 78 , 8 @ @ implements Closeable , ICompactionInfo <nl> @ SuppressWarnings ( " unchecked " ) <nl> protected static CollatingIterator getCollatingIterator ( Iterable < SSTableReader > sstables ) throws IOException <nl> { <nl> - CollatingIterator iter = FBUtilities . < SSTableIdentityIterator > getCollatingIterator ( ) ; <nl> + / / TODO CollatingIterator iter = FBUtilities . < SSTableIdentityIterator > getCollatingIterator ( ) ; <nl> + CollatingIterator iter = FBUtilities . getCollatingIterator ( ) ; <nl> for ( SSTableReader sstable : sstables ) <nl> { <nl> iter . addIterator ( sstable . getScanner ( FILE _ BUFFER _ SIZE ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / IKeyIterator . java b / src / java / org / apache / cassandra / io / sstable / IKeyIterator . java <nl> new file mode 100644 <nl> index 0000000 . . 0776584 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / io / sstable / IKeyIterator . java <nl> @ @ - 0 , 0 + 1 , 11 @ @ <nl> + package org . apache . cassandra . io . sstable ; <nl> + <nl> + import java . io . Closeable ; <nl> + import java . util . Iterator ; <nl> + <nl> + import org . apache . cassandra . db . DecoratedKey ; <nl> + import org . apache . cassandra . io . ICompactionInfo ; <nl> + <nl> + public interface IKeyIterator extends Iterator < DecoratedKey > , ICompactionInfo , Closeable <nl> + { <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / KeyIterator . java b / src / java / org / apache / cassandra / io / sstable / KeyIterator . java <nl> index 646b261 . . b74c675 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / KeyIterator . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / KeyIterator . java <nl> @ @ - 13 , 15 + 13 , 22 @ @ import org . apache . cassandra . io . util . BufferedRandomAccessFile ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> - public class KeyIterator extends AbstractIterator < DecoratedKey > implements ICompactionInfo , Closeable <nl> + public class KeyIterator extends AbstractIterator < DecoratedKey > implements IKeyIterator <nl> { <nl> private final BufferedRandomAccessFile in ; <nl> private final Descriptor desc ; <nl> <nl> - public KeyIterator ( Descriptor desc ) throws IOException <nl> + public KeyIterator ( Descriptor desc ) <nl> { <nl> this . desc = desc ; <nl> - in = new BufferedRandomAccessFile ( new File ( desc . filenameFor ( SSTable . COMPONENT _ INDEX ) ) , " r " ) ; <nl> + try <nl> + { <nl> + in = new BufferedRandomAccessFile ( new File ( desc . filenameFor ( SSTable . COMPONENT _ INDEX ) ) , " r " ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new IOError ( e ) ; <nl> + } <nl> } <nl> <nl> protected DecoratedKey computeNext ( ) <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / ReducingKeyIterator . java b / src / java / org / apache / cassandra / io / sstable / ReducingKeyIterator . java <nl> new file mode 100644 <nl> index 0000000 . . e3ebaed <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / io / sstable / ReducingKeyIterator . java <nl> @ @ - 0 , 0 + 1 , 83 @ @ <nl> + package org . apache . cassandra . io . sstable ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . util . Collection ; <nl> + <nl> + import org . apache . commons . collections . iterators . CollatingIterator ; <nl> + <nl> + import org . apache . cassandra . db . DecoratedKey ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> + import org . apache . cassandra . utils . ReducingIterator ; <nl> + <nl> + public class ReducingKeyIterator implements IKeyIterator <nl> + { <nl> + private final CollatingIterator ci ; <nl> + private final ReducingIterator < DecoratedKey , DecoratedKey > iter ; <nl> + <nl> + public ReducingKeyIterator ( Collection < SSTableReader > sstables ) <nl> + { <nl> + ci = FBUtilities . getCollatingIterator ( ) ; <nl> + for ( SSTableReader sstable : sstables ) <nl> + { <nl> + ci . addIterator ( new KeyIterator ( sstable . desc ) ) ; <nl> + } <nl> + <nl> + iter = new ReducingIterator < DecoratedKey , DecoratedKey > ( ci ) <nl> + { <nl> + DecoratedKey reduced = null ; <nl> + <nl> + public void reduce ( DecoratedKey current ) <nl> + { <nl> + reduced = current ; <nl> + } <nl> + <nl> + protected DecoratedKey getReduced ( ) <nl> + { <nl> + return reduced ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + public void close ( ) throws IOException <nl> + { <nl> + for ( Object o : ci . getIterators ( ) ) <nl> + { <nl> + ( ( KeyIterator ) o ) . close ( ) ; <nl> + } <nl> + } <nl> + <nl> + public long getTotalBytes ( ) <nl> + { <nl> + long m = 0 ; <nl> + for ( Object o : ci . getIterators ( ) ) <nl> + { <nl> + m + = ( ( KeyIterator ) o ) . getTotalBytes ( ) ; <nl> + } <nl> + return m ; <nl> + } <nl> + <nl> + public long getBytesRead ( ) <nl> + { <nl> + long m = 0 ; <nl> + for ( Object o : ci . getIterators ( ) ) <nl> + { <nl> + m + = ( ( KeyIterator ) o ) . getBytesRead ( ) ; <nl> + } <nl> + return m ; <nl> + } <nl> + <nl> + public boolean hasNext ( ) <nl> + { <nl> + return iter . hasNext ( ) ; <nl> + } <nl> + <nl> + public DecoratedKey next ( ) <nl> + { <nl> + return ( DecoratedKey ) iter . next ( ) ; <nl> + } <nl> + <nl> + public void remove ( ) <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> index 59617b6 . . 6118339 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> @ @ - 276 , 7 + 276 , 7 @ @ public class SSTableWriter extends SSTable <nl> <nl> if ( ! cfs . getIndexedColumns ( ) . isEmpty ( ) ) <nl> { <nl> - Future future = CompactionManager . instance . submitIndexBuild ( cfs , new KeyIterator ( desc ) ) ; <nl> + Future future = CompactionManager . instance . submitIndexBuild ( cfs , cfs . getIndexedColumns ( ) , new KeyIterator ( desc ) ) ; <nl> try <nl> { <nl> future . get ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> index a898757 . . 48d90c0 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> @ @ - 338 , 6 + 338 , 8 @ @ public class FBUtilities <nl> } <nl> } <nl> <nl> + / * <nl> + TODO how to make this work w / ReducingKeyIterator ? <nl> public static < T extends Comparable < T > > CollatingIterator getCollatingIterator ( ) <nl> { <nl> / / CollatingIterator will happily NPE if you do not specify a comparator explicitly <nl> @ @ - 349 , 6 + 351 , 18 @ @ public class FBUtilities <nl> } <nl> } ) ; <nl> } <nl> + * / <nl> + public static CollatingIterator getCollatingIterator ( ) <nl> + { <nl> + / / CollatingIterator will happily NPE if you do not specify a comparator explicitly <nl> + return new CollatingIterator ( new Comparator ( ) <nl> + { <nl> + public int compare ( Object o1 , Object o2 ) <nl> + { <nl> + return ( ( Comparable ) o1 ) . compareTo ( o2 ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> <nl> public static void atomicSetMax ( AtomicInteger atomic , int i ) <nl> { <nl> @ @ - 656 , 4 + 670 , 18 @ @ public class FBUtilities <nl> } <nl> } <nl> } <nl> + <nl> + public static TreeSet < byte [ ] > getSingleColumnSet ( byte [ ] column ) <nl> + { <nl> + Comparator < byte [ ] > singleColumnComparator = new Comparator < byte [ ] > ( ) <nl> + { <nl> + public int compare ( byte [ ] o1 , byte [ ] o2 ) <nl> + { <nl> + return Arrays . equals ( o1 , o2 ) ? 0 : - 1 ; <nl> + } <nl> + } ; <nl> + TreeSet < byte [ ] > set = new TreeSet < byte [ ] > ( singleColumnComparator ) ; <nl> + set . add ( column ) ; <nl> + return set ; <nl> + } <nl> } <nl> diff - - git a / test / conf / cassandra . yaml b / test / conf / cassandra . yaml <nl> index d4ce0ab . . ce1784c 100644 <nl> - - - a / test / conf / cassandra . yaml <nl> + + + b / test / conf / cassandra . yaml <nl> @ @ - 74 , 6 + 74 , 12 @ @ keyspaces : <nl> validator _ class : LongType <nl> index _ type : KEYS <nl> <nl> + - name : Indexed2 <nl> + column _ metadata : <nl> + - name : birthdate <nl> + validator _ class : LongType <nl> + # index will be added dynamically <nl> + <nl> - name : Keyspace2 <nl> replica _ placement _ strategy : org . apache . cassandra . locator . SimpleStrategy <nl> replication _ factor : 1 <nl> diff - - git a / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java b / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java <nl> index 4871c15 . . 39a15ad 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java <nl> @ @ - 31 , 16 + 31 , 21 @ @ import org . junit . Test ; <nl> import static junit . framework . Assert . assertEquals ; <nl> import org . apache . cassandra . CleanupHelper ; <nl> import org . apache . cassandra . Util ; <nl> + import org . apache . cassandra . config . ColumnDefinition ; <nl> + import org . apache . cassandra . config . ConfigurationException ; <nl> import org . apache . cassandra . db . columniterator . IdentityQueryFilter ; <nl> import org . apache . cassandra . db . filter . * ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . thrift . IndexClause ; <nl> import org . apache . cassandra . thrift . IndexExpression ; <nl> import org . apache . cassandra . thrift . IndexOperator ; <nl> + import org . apache . cassandra . thrift . IndexType ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . WrappedRunnable ; <nl> <nl> import java . net . InetAddress ; <nl> + import java . util . concurrent . TimeUnit ; <nl> + <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . dht . CollatingOrderPreservingPartitioner ; <nl> @ @ - 253 , 6 + 258 , 34 @ @ public class ColumnFamilyStoreTest extends CleanupHelper <nl> assert Arrays . equals ( " k1 " . getBytes ( ) , rows . get ( 0 ) . key . key ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testIndexCreate ( ) throws IOException , ConfigurationException , InterruptedException <nl> + { <nl> + Table table = Table . open ( " Keyspace1 " ) ; <nl> + <nl> + / / create a row and update the birthdate value , test that the index query fetches the new version <nl> + RowMutation rm ; <nl> + rm = new RowMutation ( " Keyspace1 " , " k1 " . getBytes ( ) ) ; <nl> + rm . add ( new QueryPath ( " Indexed2 " , null , " birthdate " . getBytes ( " UTF8 " ) ) , FBUtilities . toByteArray ( 1L ) , new TimestampClock ( 1 ) ) ; <nl> + rm . apply ( ) ; <nl> + <nl> + ColumnFamilyStore cfs = table . getColumnFamilyStore ( " Indexed2 " ) ; <nl> + ColumnDefinition old = cfs . metadata . column _ metadata . get ( " birthdate " . getBytes ( " UTF8 " ) ) ; <nl> + ColumnDefinition cd = new ColumnDefinition ( old . name , old . validator . getClass ( ) . getName ( ) , IndexType . KEYS , " birthdate _ index " ) ; <nl> + cfs . addIndex ( cd ) ; <nl> + while ( ! SystemTable . isIndexBuilt ( " Keyspace1 " , cfs . getIndexedColumnFamilyStore ( " birthdate " . getBytes ( " UTF8 " ) ) . columnFamily ) ) <nl> + TimeUnit . MILLISECONDS . sleep ( 100 ) ; <nl> + <nl> + IndexExpression expr = new IndexExpression ( " birthdate " . getBytes ( " UTF8 " ) , IndexOperator . EQ , FBUtilities . toByteArray ( 1L ) ) ; <nl> + IndexClause clause = new IndexClause ( Arrays . asList ( expr ) , ArrayUtils . EMPTY _ BYTE _ ARRAY , 100 ) ; <nl> + IFilter filter = new IdentityQueryFilter ( ) ; <nl> + IPartitioner p = StorageService . getPartitioner ( ) ; <nl> + Range range = new Range ( p . getMinimumToken ( ) , p . getMinimumToken ( ) ) ; <nl> + List < Row > rows = table . getColumnFamilyStore ( " Indexed2 " ) . scan ( clause , range , filter ) ; <nl> + assert rows . size ( ) = = 1 : StringUtils . join ( rows , " , " ) ; <nl> + assert Arrays . equals ( " k1 " . getBytes ( ) , rows . get ( 0 ) . key . key ) ; <nl> + } <nl> + <nl> private ColumnFamilyStore insertKey1Key2 ( ) throws IOException , ExecutionException , InterruptedException <nl> { <nl> List < RowMutation > rms = new LinkedList < RowMutation > ( ) ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / hadoop / ReporterWrapper . java b / src / java / org / apache / cassandra / hadoop / ReporterWrapper . java 
 new file mode 100644 
 index 0000000 . . 9940ba4 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / hadoop / ReporterWrapper . java 
 @ @ - 0 , 0 + 1 , 57 @ @ 
 + package org . apache . cassandra . hadoop ; 
 + 
 + import org . apache . hadoop . mapred . Counters ; 
 + import org . apache . hadoop . mapred . InputSplit ; 
 + import org . apache . hadoop . mapred . Reporter ; 
 + import org . apache . hadoop . mapreduce . StatusReporter ; 
 + 
 + / * * 
 + * A reporter that works with both mapred and mapreduce APIs . 
 + * / 
 + public class ReporterWrapper extends StatusReporter implements Reporter { 
 + private Reporter wrappedReporter ; 
 + 
 + public ReporterWrapper ( Reporter reporter ) { 
 + wrappedReporter = reporter ; 
 + } 
 + 
 + @ Override 
 + public Counters . Counter getCounter ( Enum < ? > anEnum ) { 
 + return wrappedReporter . getCounter ( anEnum ) ; 
 + } 
 + 
 + @ Override 
 + public Counters . Counter getCounter ( String s , String s1 ) { 
 + return wrappedReporter . getCounter ( s , s1 ) ; 
 + } 
 + 
 + @ Override 
 + public void incrCounter ( Enum < ? > anEnum , long l ) { 
 + wrappedReporter . incrCounter ( anEnum , l ) ; 
 + } 
 + 
 + @ Override 
 + public void incrCounter ( String s , String s1 , long l ) { 
 + wrappedReporter . incrCounter ( s , s1 , l ) ; 
 + } 
 + 
 + @ Override 
 + public InputSplit getInputSplit ( ) throws UnsupportedOperationException { 
 + return wrappedReporter . getInputSplit ( ) ; 
 + } 
 + 
 + @ Override 
 + public void progress ( ) { 
 + wrappedReporter . progress ( ) ; 
 + } 
 + 
 + / / @ Override 
 + public float getProgress ( ) { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 + @ Override 
 + public void setStatus ( String s ) { 
 + wrappedReporter . setStatus ( s ) ; 
 + } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index 846429f . . 2836f1e 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 67 , 6 + 67 , 7 @ @ public final class CFMetaData 
 public static final CFMetaData HintsCf = newSystemTable ( HintedHandOffManager . HINTS _ CF , 1 , " hinted handoff data " , BytesType . instance , BytesType . instance ) ; 
 public static final CFMetaData MigrationsCf = newSystemTable ( Migration . MIGRATIONS _ CF , 2 , " individual schema mutations " , TimeUUIDType . instance , null ) ; 
 public static final CFMetaData SchemaCf = newSystemTable ( Migration . SCHEMA _ CF , 3 , " current state of the schema " , UTF8Type . instance , null ) ; 
 + public static final CFMetaData IndexCf = newSystemTable ( SystemTable . INDEX _ CF , 5 , " indexes that have been completed " , UTF8Type . instance , null ) ; 
 
 private static CFMetaData newSystemTable ( String cfName , int cfId , String comment , AbstractType comparator , AbstractType subComparator ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index eaad4aa . . ffb5134 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 350 , 15 + 350 , 16 @ @ public class DatabaseDescriptor 
 LocalStrategy . class , 
 null , 
 1 , 
 - new CFMetaData [ ] { CFMetaData . StatusCf , 
 - CFMetaData . HintsCf , 
 - CFMetaData . MigrationsCf , 
 - CFMetaData . SchemaCf , 
 - } ) ; 
 + CFMetaData . StatusCf , 
 + CFMetaData . HintsCf , 
 + CFMetaData . MigrationsCf , 
 + CFMetaData . SchemaCf , 
 + CFMetaData . IndexCf ) ; 
 CFMetaData . map ( CFMetaData . StatusCf ) ; 
 CFMetaData . map ( CFMetaData . HintsCf ) ; 
 CFMetaData . map ( CFMetaData . MigrationsCf ) ; 
 CFMetaData . map ( CFMetaData . SchemaCf ) ; 
 + CFMetaData . map ( CFMetaData . IndexCf ) ; 
 tables . put ( Table . SYSTEM _ TABLE , systemMeta ) ; 
 
 / * Load the seeds for node contact points * / 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index f4802ff . . b9635e8 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 27 , 6 + 27 , 8 @ @ import java . util . * ; 
 import java . util . concurrent . * ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 import java . util . concurrent . atomic . AtomicReference ; 
 + import javax . management . MBeanServer ; 
 + import javax . management . ObjectName ; 
 
 import com . google . common . collect . Iterables ; 
 import org . apache . commons . collections . IteratorUtils ; 
 @ @ - 41 , 7 + 43 , 6 @ @ import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . ColumnDefinition ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . IClock . ClockRelationship ; 
 - import org . apache . cassandra . db . clock . TimestampReconciler ; 
 import org . apache . cassandra . db . columniterator . IColumnIterator ; 
 import org . apache . cassandra . db . columniterator . IdentityQueryFilter ; 
 import org . apache . cassandra . db . commitlog . CommitLog ; 
 @ @ - 51 , 11 + 52 , 7 @ @ import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . db . marshal . BytesType ; 
 import org . apache . cassandra . db . marshal . LocalByPartionerType ; 
 import org . apache . cassandra . dht . * ; 
 - import org . apache . cassandra . io . sstable . Component ; 
 - import org . apache . cassandra . io . sstable . Descriptor ; 
 - import org . apache . cassandra . io . sstable . SSTable ; 
 - import org . apache . cassandra . io . sstable . SSTableReader ; 
 - import org . apache . cassandra . io . sstable . SSTableTracker ; 
 + import org . apache . cassandra . io . sstable . * ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . thrift . IndexClause ; 
 @ @ - 66 , 9 + 63 , 6 @ @ import org . apache . cassandra . utils . LatencyTracker ; 
 import org . apache . cassandra . utils . Pair ; 
 import org . apache . cassandra . utils . WrappedRunnable ; 
 
 - import javax . management . MBeanServer ; 
 - import javax . management . ObjectName ; 
 - 
 public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 private static Logger logger = LoggerFactory . getLogger ( ColumnFamilyStore . class ) ; 
 @ @ - 176 , 7 + 170 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 for ( ColumnDefinition info : metadata . column _ metadata . values ( ) ) 
 { 
 if ( info . index _ type ! = null ) 
 - addIndex ( table , info ) ; 
 + addIndex ( info ) ; 
 } 
 
 / / register the mbean 
 @ @ - 194 , 17 + 188 , 35 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 - private void addIndex ( String table , ColumnDefinition info ) 
 + public void addIndex ( final ColumnDefinition info ) 
 { 
 + assert info . index _ type ! = null ; 
 IPartitioner rowPartitioner = StorageService . getPartitioner ( ) ; 
 AbstractType columnComparator = ( rowPartitioner instanceof OrderPreservingPartitioner | | rowPartitioner instanceof ByteOrderedPartitioner ) 
 ? BytesType . instance 
 : new LocalByPartionerType ( StorageService . getPartitioner ( ) ) ; 
 - CFMetaData indexedCfMetadata = CFMetaData . newIndexMetadata ( table , columnFamily , info , columnComparator ) ; 
 + final CFMetaData indexedCfMetadata = CFMetaData . newIndexMetadata ( table , columnFamily , info , columnComparator ) ; 
 ColumnFamilyStore indexedCfs = ColumnFamilyStore . createColumnFamilyStore ( table , 
 indexedCfMetadata . cfName , 
 new LocalPartitioner ( metadata . column _ metadata . get ( info . name ) . validator ) , 
 indexedCfMetadata ) ; 
 + if ( ! SystemTable . isIndexBuilt ( table , indexedCfMetadata . cfName ) ) 
 + { 
 + logger . info ( " Creating index { } . { } " , table , indexedCfMetadata . cfName ) ; 
 + Runnable runnable = new WrappedRunnable ( ) 
 + { 
 + public void runMayThrow ( ) throws IOException , ExecutionException , InterruptedException 
 + { 
 + logger . debug ( " Submitting index build to compactionmanager " ) ; 
 + ReducingKeyIterator iter = new ReducingKeyIterator ( getSSTables ( ) ) ; 
 + Future future = CompactionManager . instance . submitIndexBuild ( ColumnFamilyStore . this , FBUtilities . getSingleColumnSet ( info . name ) , iter ) ; 
 + future . get ( ) ; 
 + logger . info ( " Index { } complete " , indexedCfMetadata . cfName ) ; 
 + SystemTable . setIndexBuilt ( table , indexedCfMetadata . cfName ) ; 
 + } 
 + } ; 
 + forceFlush ( runnable ) ; 
 + } 
 indexedColumns . put ( info . name , indexedCfs ) ; 
 } 
 
 @ @ - 397 , 7 + 409 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 
 / * * flush the given memtable and swap in a new one for its CFS , if it hasn ' t been frozen already . threadsafe . * / 
 - Future < ? > maybeSwitchMemtable ( Memtable oldMemtable , final boolean writeCommitLog ) 
 + Future < ? > maybeSwitchMemtable ( Memtable oldMemtable , final boolean writeCommitLog , final Runnable afterFlush ) 
 { 
 / * * 
 * If we can get the writelock , that means no new updates can come in and 
 @ @ - 436 , 6 + 448 , 8 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 / / if we ' re not writing to the commit log , we are replaying the log , so marking 
 / / the log header with " you can discard anything written before the context " is not valid 
 CommitLog . instance ( ) . discardCompletedSegments ( metadata . cfId , ctx ) ; 
 + if ( afterFlush ! = null ) 
 + afterFlush . run ( ) ; 
 } 
 } 
 } ) ; 
 @ @ - 465 , 10 + 479 , 15 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 public Future < ? > forceFlush ( ) 
 { 
 + return forceFlush ( null ) ; 
 + } 
 + 
 + public Future < ? > forceFlush ( Runnable afterFlush ) 
 + { 
 if ( memtable . isClean ( ) ) 
 return null ; 
 
 - return maybeSwitchMemtable ( memtable , true ) ; 
 + return maybeSwitchMemtable ( memtable , true , afterFlush ) ; 
 } 
 
 public void forceBlockingFlush ( ) throws ExecutionException , InterruptedException 
 diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java 
 index 3f97d44 . . 64289db 100644 
 - - - a / src / java / org / apache / cassandra / db / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / CompactionManager . java 
 @ @ - 495 , 14 + 495 , 14 @ @ public class CompactionManager implements CompactionManagerMBean 
 return tablePairs ; 
 } 
 
 - public Future submitIndexBuild ( final ColumnFamilyStore cfs , final KeyIterator iter ) 
 + public Future submitIndexBuild ( final ColumnFamilyStore cfs , final SortedSet < byte [ ] > columns , final IKeyIterator iter ) 
 { 
 Runnable runnable = new Runnable ( ) 
 { 
 public void run ( ) 
 { 
 executor . beginCompaction ( cfs , iter ) ; 
 - Table . open ( cfs . table ) . rebuildIndex ( cfs , iter ) ; 
 + Table . open ( cfs . table ) . rebuildIndex ( cfs , columns , iter ) ; 
 } 
 } ; 
 return executor . submit ( runnable ) ; 
 @ @ - 528 , 7 + 528 , 8 @ @ public class CompactionManager implements CompactionManagerMBean 
 return Range . isTokenInRanges ( ( ( SSTableIdentityIterator ) row ) . getKey ( ) . token , ranges ) ; 
 } 
 } ; 
 - CollatingIterator iter = FBUtilities . < SSTableIdentityIterator > getCollatingIterator ( ) ; 
 + / / TODO CollatingIterator iter = FBUtilities . < SSTableIdentityIterator > getCollatingIterator ( ) ; 
 + CollatingIterator iter = FBUtilities . getCollatingIterator ( ) ; 
 for ( SSTableReader sstable : sstables ) 
 { 
 SSTableScanner scanner = sstable . getScanner ( FILE _ BUFFER _ SIZE ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / SystemTable . java b / src / java / org / apache / cassandra / db / SystemTable . java 
 index 72d2cb6 . . f5d5ce1 100644 
 - - - a / src / java / org / apache / cassandra / db / SystemTable . java 
 + + + b / src / java / org / apache / cassandra / db / SystemTable . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import org . slf4j . LoggerFactory ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . ConfigurationException ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . db . clock . TimestampReconciler ; 
 import org . apache . cassandra . db . filter . QueryFilter ; 
 import org . apache . cassandra . db . filter . QueryPath ; 
 import org . apache . cassandra . db . marshal . BytesType ; 
 @ @ - 49 , 6 + 50 , 7 @ @ public class SystemTable 
 { 
 private static Logger logger = LoggerFactory . getLogger ( SystemTable . class ) ; 
 public static final String STATUS _ CF = " LocationInfo " ; / / keep the old CF string for backwards - compatibility 
 + public static final String INDEX _ CF = " IndexInfo " ; 
 private static final byte [ ] LOCATION _ KEY = " L " . getBytes ( UTF _ 8 ) ; 
 private static final byte [ ] BOOTSTRAP _ KEY = " Bootstrap " . getBytes ( UTF _ 8 ) ; 
 private static final byte [ ] COOKIE _ KEY = " Cookies " . getBytes ( UTF _ 8 ) ; 
 @ @ - 336 , 6 + 338 , 24 @ @ public class SystemTable 
 } 
 } 
 
 + public static boolean isIndexBuilt ( String table , String indexName ) 
 + { 
 + ColumnFamilyStore cfs = Table . open ( Table . SYSTEM _ TABLE ) . getColumnFamilyStore ( INDEX _ CF ) ; 
 + QueryFilter filter = QueryFilter . getNamesFilter ( decorate ( table . getBytes ( UTF _ 8 ) ) , 
 + new QueryPath ( INDEX _ CF ) , 
 + indexName . getBytes ( UTF _ 8 ) ) ; 
 + return cfs . getColumnFamily ( filter ) ! = null ; 
 + } 
 + 
 + public static void setIndexBuilt ( String table , String indexName ) throws IOException 
 + { 
 + ColumnFamily cf = ColumnFamily . create ( Table . SYSTEM _ TABLE , INDEX _ CF ) ; 
 + cf . addColumn ( new Column ( indexName . getBytes ( UTF _ 8 ) , ArrayUtils . EMPTY _ BYTE _ ARRAY , new TimestampClock ( System . currentTimeMillis ( ) ) ) ) ; 
 + RowMutation rm = new RowMutation ( Table . SYSTEM _ TABLE , table . getBytes ( UTF _ 8 ) ) ; 
 + rm . add ( cf ) ; 
 + rm . apply ( ) ; 
 + } 
 + 
 public static class StorageMetadata 
 { 
 private Token token ; 
 diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java 
 index 366b02b . . d96608b 100644 
 - - - a / src / java / org / apache / cassandra / db / Table . java 
 + + + b / src / java / org / apache / cassandra / db / Table . java 
 @ @ - 33 , 7 + 33 , 7 @ @ import org . apache . cassandra . config . * ; 
 import org . apache . cassandra . db . clock . AbstractReconciler ; 
 import org . apache . cassandra . db . commitlog . CommitLog ; 
 import org . apache . cassandra . dht . LocalToken ; 
 - import org . apache . cassandra . io . sstable . KeyIterator ; 
 + import org . apache . cassandra . io . sstable . IKeyIterator ; 
 import org . apache . cassandra . io . sstable . SSTableDeletingReference ; 
 import org . apache . cassandra . io . sstable . SSTableReader ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 @ @ - 42 , 7 + 42 , 6 @ @ import org . apache . commons . lang . ArrayUtils ; 
 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . db . filter . * ; 
 - import org . apache . cassandra . thrift . ColumnParent ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; 
 
 @ @ - 386 , 7 + 385 , 7 @ @ public class Table 
 
 / / flush memtables that got filled up . usually mTF will be empty and this will be a no - op 
 for ( Map . Entry < ColumnFamilyStore , Memtable > entry : memtablesToFlush . entrySet ( ) ) 
 - entry . getKey ( ) . maybeSwitchMemtable ( entry . getValue ( ) , writeCommitLog ) ; 
 + entry . getKey ( ) . maybeSwitchMemtable ( entry . getValue ( ) , writeCommitLog , null ) ; 
 } 
 
 private static void ignoreObsoleteMutations ( ColumnFamily cf , AbstractReconciler reconciler , SortedSet < byte [ ] > mutatedIndexedColumns , ColumnFamily oldIndexedColumns ) 
 @ @ - 444 , 18 + 443 , 19 @ @ public class Table 
 } 
 } 
 
 - public void rebuildIndex ( ColumnFamilyStore cfs , KeyIterator iter ) 
 + public void rebuildIndex ( ColumnFamilyStore cfs , SortedSet < byte [ ] > columns , IKeyIterator iter ) 
 { 
 while ( iter . hasNext ( ) ) 
 { 
 DecoratedKey key = iter . next ( ) ; 
 + logger . debug ( " Indexing row { } " , key ) ; 
 HashMap < ColumnFamilyStore , Memtable > memtablesToFlush = new HashMap < ColumnFamilyStore , Memtable > ( 2 ) ; 
 flusherLock . readLock ( ) . lock ( ) ; 
 try 
 { 
 synchronized ( indexLockFor ( key . key ) ) 
 { 
 - ColumnFamily cf = readCurrentIndexedColumns ( key , cfs , cfs . getIndexedColumns ( ) ) ; 
 + ColumnFamily cf = readCurrentIndexedColumns ( key , cfs , columns ) ; 
 applyIndexUpdates ( key . key , memtablesToFlush , cf , cfs , cf . getColumnNames ( ) , null ) ; 
 } 
 } 
 @ @ - 465 , 7 + 465 , 16 @ @ public class Table 
 } 
 
 for ( Map . Entry < ColumnFamilyStore , Memtable > entry : memtablesToFlush . entrySet ( ) ) 
 - entry . getKey ( ) . maybeSwitchMemtable ( entry . getValue ( ) , false ) ; 
 + entry . getKey ( ) . maybeSwitchMemtable ( entry . getValue ( ) , false , null ) ; 
 + } 
 + 
 + try 
 + { 
 + iter . close ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java b / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java 
 index ae9ca6a . . b3519ad 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import org . apache . cassandra . io . sstable . SSTableReader ; 
 import org . apache . cassandra . io . util . FileDataInput ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 
 public class NamesQueryFilter implements IFilter 
 { 
 @ @ - 42 , 21 + 43 , 7 @ @ public class NamesQueryFilter implements IFilter 
 
 public NamesQueryFilter ( byte [ ] column ) 
 { 
 - this ( getSingleColumnSet ( column ) ) ; 
 - } 
 - 
 - private static TreeSet < byte [ ] > getSingleColumnSet ( byte [ ] column ) 
 - { 
 - Comparator < byte [ ] > singleColumnComparator = new Comparator < byte [ ] > ( ) 
 - { 
 - public int compare ( byte [ ] o1 , byte [ ] o2 ) 
 - { 
 - return Arrays . equals ( o1 , o2 ) ? 0 : - 1 ; 
 - } 
 - } ; 
 - TreeSet < byte [ ] > set = new TreeSet < byte [ ] > ( singleColumnComparator ) ; 
 - set . add ( column ) ; 
 - return set ; 
 + this ( FBUtilities . getSingleColumnSet ( column ) ) ; 
 } 
 
 public IColumnIterator getMemtableColumnIterator ( ColumnFamily cf , DecoratedKey key , AbstractType comparator ) 
 diff - - git a / src / java / org / apache / cassandra / io / CompactionIterator . java b / src / java / org / apache / cassandra / io / CompactionIterator . java 
 index 53a1e98 . . 304e3dd 100644 
 - - - a / src / java / org / apache / cassandra / io / CompactionIterator . java 
 + + + b / src / java / org / apache / cassandra / io / CompactionIterator . java 
 @ @ - 78 , 7 + 78 , 8 @ @ implements Closeable , ICompactionInfo 
 @ SuppressWarnings ( " unchecked " ) 
 protected static CollatingIterator getCollatingIterator ( Iterable < SSTableReader > sstables ) throws IOException 
 { 
 - CollatingIterator iter = FBUtilities . < SSTableIdentityIterator > getCollatingIterator ( ) ; 
 + / / TODO CollatingIterator iter = FBUtilities . < SSTableIdentityIterator > getCollatingIterator ( ) ; 
 + CollatingIterator iter = FBUtilities . getCollatingIterator ( ) ; 
 for ( SSTableReader sstable : sstables ) 
 { 
 iter . addIterator ( sstable . getScanner ( FILE _ BUFFER _ SIZE ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / IKeyIterator . java b / src / java / org / apache / cassandra / io / sstable / IKeyIterator . java 
 new file mode 100644 
 index 0000000 . . 0776584 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / io / sstable / IKeyIterator . java 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + package org . apache . cassandra . io . sstable ; 
 + 
 + import java . io . Closeable ; 
 + import java . util . Iterator ; 
 + 
 + import org . apache . cassandra . db . DecoratedKey ; 
 + import org . apache . cassandra . io . ICompactionInfo ; 
 + 
 + public interface IKeyIterator extends Iterator < DecoratedKey > , ICompactionInfo , Closeable 
 + { 
 + } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / KeyIterator . java b / src / java / org / apache / cassandra / io / sstable / KeyIterator . java 
 index 646b261 . . b74c675 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / KeyIterator . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / KeyIterator . java 
 @ @ - 13 , 15 + 13 , 22 @ @ import org . apache . cassandra . io . util . BufferedRandomAccessFile ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 - public class KeyIterator extends AbstractIterator < DecoratedKey > implements ICompactionInfo , Closeable 
 + public class KeyIterator extends AbstractIterator < DecoratedKey > implements IKeyIterator 
 { 
 private final BufferedRandomAccessFile in ; 
 private final Descriptor desc ; 
 
 - public KeyIterator ( Descriptor desc ) throws IOException 
 + public KeyIterator ( Descriptor desc ) 
 { 
 this . desc = desc ; 
 - in = new BufferedRandomAccessFile ( new File ( desc . filenameFor ( SSTable . COMPONENT _ INDEX ) ) , " r " ) ; 
 + try 
 + { 
 + in = new BufferedRandomAccessFile ( new File ( desc . filenameFor ( SSTable . COMPONENT _ INDEX ) ) , " r " ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new IOError ( e ) ; 
 + } 
 } 
 
 protected DecoratedKey computeNext ( ) 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / ReducingKeyIterator . java b / src / java / org / apache / cassandra / io / sstable / ReducingKeyIterator . java 
 new file mode 100644 
 index 0000000 . . e3ebaed 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / io / sstable / ReducingKeyIterator . java 
 @ @ - 0 , 0 + 1 , 83 @ @ 
 + package org . apache . cassandra . io . sstable ; 
 + 
 + import java . io . IOException ; 
 + import java . util . Collection ; 
 + 
 + import org . apache . commons . collections . iterators . CollatingIterator ; 
 + 
 + import org . apache . cassandra . db . DecoratedKey ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 + import org . apache . cassandra . utils . ReducingIterator ; 
 + 
 + public class ReducingKeyIterator implements IKeyIterator 
 + { 
 + private final CollatingIterator ci ; 
 + private final ReducingIterator < DecoratedKey , DecoratedKey > iter ; 
 + 
 + public ReducingKeyIterator ( Collection < SSTableReader > sstables ) 
 + { 
 + ci = FBUtilities . getCollatingIterator ( ) ; 
 + for ( SSTableReader sstable : sstables ) 
 + { 
 + ci . addIterator ( new KeyIterator ( sstable . desc ) ) ; 
 + } 
 + 
 + iter = new ReducingIterator < DecoratedKey , DecoratedKey > ( ci ) 
 + { 
 + DecoratedKey reduced = null ; 
 + 
 + public void reduce ( DecoratedKey current ) 
 + { 
 + reduced = current ; 
 + } 
 + 
 + protected DecoratedKey getReduced ( ) 
 + { 
 + return reduced ; 
 + } 
 + } ; 
 + } 
 + 
 + public void close ( ) throws IOException 
 + { 
 + for ( Object o : ci . getIterators ( ) ) 
 + { 
 + ( ( KeyIterator ) o ) . close ( ) ; 
 + } 
 + } 
 + 
 + public long getTotalBytes ( ) 
 + { 
 + long m = 0 ; 
 + for ( Object o : ci . getIterators ( ) ) 
 + { 
 + m + = ( ( KeyIterator ) o ) . getTotalBytes ( ) ; 
 + } 
 + return m ; 
 + } 
 + 
 + public long getBytesRead ( ) 
 + { 
 + long m = 0 ; 
 + for ( Object o : ci . getIterators ( ) ) 
 + { 
 + m + = ( ( KeyIterator ) o ) . getBytesRead ( ) ; 
 + } 
 + return m ; 
 + } 
 + 
 + public boolean hasNext ( ) 
 + { 
 + return iter . hasNext ( ) ; 
 + } 
 + 
 + public DecoratedKey next ( ) 
 + { 
 + return ( DecoratedKey ) iter . next ( ) ; 
 + } 
 + 
 + public void remove ( ) 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 index 59617b6 . . 6118339 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 @ @ - 276 , 7 + 276 , 7 @ @ public class SSTableWriter extends SSTable 
 
 if ( ! cfs . getIndexedColumns ( ) . isEmpty ( ) ) 
 { 
 - Future future = CompactionManager . instance . submitIndexBuild ( cfs , new KeyIterator ( desc ) ) ; 
 + Future future = CompactionManager . instance . submitIndexBuild ( cfs , cfs . getIndexedColumns ( ) , new KeyIterator ( desc ) ) ; 
 try 
 { 
 future . get ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 index a898757 . . 48d90c0 100644 
 - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java 
 + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 @ @ - 338 , 6 + 338 , 8 @ @ public class FBUtilities 
 } 
 } 
 
 + / * 
 + TODO how to make this work w / ReducingKeyIterator ? 
 public static < T extends Comparable < T > > CollatingIterator getCollatingIterator ( ) 
 { 
 / / CollatingIterator will happily NPE if you do not specify a comparator explicitly 
 @ @ - 349 , 6 + 351 , 18 @ @ public class FBUtilities 
 } 
 } ) ; 
 } 
 + * / 
 + public static CollatingIterator getCollatingIterator ( ) 
 + { 
 + / / CollatingIterator will happily NPE if you do not specify a comparator explicitly 
 + return new CollatingIterator ( new Comparator ( ) 
 + { 
 + public int compare ( Object o1 , Object o2 ) 
 + { 
 + return ( ( Comparable ) o1 ) . compareTo ( o2 ) ; 
 + } 
 + } ) ; 
 + } 
 
 public static void atomicSetMax ( AtomicInteger atomic , int i ) 
 { 
 @ @ - 656 , 4 + 670 , 18 @ @ public class FBUtilities 
 } 
 } 
 } 
 + 
 + public static TreeSet < byte [ ] > getSingleColumnSet ( byte [ ] column ) 
 + { 
 + Comparator < byte [ ] > singleColumnComparator = new Comparator < byte [ ] > ( ) 
 + { 
 + public int compare ( byte [ ] o1 , byte [ ] o2 ) 
 + { 
 + return Arrays . equals ( o1 , o2 ) ? 0 : - 1 ; 
 + } 
 + } ; 
 + TreeSet < byte [ ] > set = new TreeSet < byte [ ] > ( singleColumnComparator ) ; 
 + set . add ( column ) ; 
 + return set ; 
 + } 
 } 
 diff - - git a / test / conf / cassandra . yaml b / test / conf / cassandra . yaml 
 index d4ce0ab . . ce1784c 100644 
 - - - a / test / conf / cassandra . yaml 
 + + + b / test / conf / cassandra . yaml 
 @ @ - 74 , 6 + 74 , 12 @ @ keyspaces : 
 validator _ class : LongType 
 index _ type : KEYS 
 
 + - name : Indexed2 
 + column _ metadata : 
 + - name : birthdate 
 + validator _ class : LongType 
 + # index will be added dynamically 
 + 
 - name : Keyspace2 
 replica _ placement _ strategy : org . apache . cassandra . locator . SimpleStrategy 
 replication _ factor : 1 
 diff - - git a / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java b / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java 
 index 4871c15 . . 39a15ad 100644 
 - - - a / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java 
 + + + b / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java 
 @ @ - 31 , 16 + 31 , 21 @ @ import org . junit . Test ; 
 import static junit . framework . Assert . assertEquals ; 
 import org . apache . cassandra . CleanupHelper ; 
 import org . apache . cassandra . Util ; 
 + import org . apache . cassandra . config . ColumnDefinition ; 
 + import org . apache . cassandra . config . ConfigurationException ; 
 import org . apache . cassandra . db . columniterator . IdentityQueryFilter ; 
 import org . apache . cassandra . db . filter . * ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . thrift . IndexClause ; 
 import org . apache . cassandra . thrift . IndexExpression ; 
 import org . apache . cassandra . thrift . IndexOperator ; 
 + import org . apache . cassandra . thrift . IndexType ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . WrappedRunnable ; 
 
 import java . net . InetAddress ; 
 + import java . util . concurrent . TimeUnit ; 
 + 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . dht . CollatingOrderPreservingPartitioner ; 
 @ @ - 253 , 6 + 258 , 34 @ @ public class ColumnFamilyStoreTest extends CleanupHelper 
 assert Arrays . equals ( " k1 " . getBytes ( ) , rows . get ( 0 ) . key . key ) ; 
 } 
 
 + @ Test 
 + public void testIndexCreate ( ) throws IOException , ConfigurationException , InterruptedException 
 + { 
 + Table table = Table . open ( " Keyspace1 " ) ; 
 + 
 + / / create a row and update the birthdate value , test that the index query fetches the new version 
 + RowMutation rm ; 
 + rm = new RowMutation ( " Keyspace1 " , " k1 " . getBytes ( ) ) ; 
 + rm . add ( new QueryPath ( " Indexed2 " , null , " birthdate " . getBytes ( " UTF8 " ) ) , FBUtilities . toByteArray ( 1L ) , new TimestampClock ( 1 ) ) ; 
 + rm . apply ( ) ; 
 + 
 + ColumnFamilyStore cfs = table . getColumnFamilyStore ( " Indexed2 " ) ; 
 + ColumnDefinition old = cfs . metadata . column _ metadata . get ( " birthdate " . getBytes ( " UTF8 " ) ) ; 
 + ColumnDefinition cd = new ColumnDefinition ( old . name , old . validator . getClass ( ) . getName ( ) , IndexType . KEYS , " birthdate _ index " ) ; 
 + cfs . addIndex ( cd ) ; 
 + while ( ! SystemTable . isIndexBuilt ( " Keyspace1 " , cfs . getIndexedColumnFamilyStore ( " birthdate " . getBytes ( " UTF8 " ) ) . columnFamily ) ) 
 + TimeUnit . MILLISECONDS . sleep ( 100 ) ; 
 + 
 + IndexExpression expr = new IndexExpression ( " birthdate " . getBytes ( " UTF8 " ) , IndexOperator . EQ , FBUtilities . toByteArray ( 1L ) ) ; 
 + IndexClause clause = new IndexClause ( Arrays . asList ( expr ) , ArrayUtils . EMPTY _ BYTE _ ARRAY , 100 ) ; 
 + IFilter filter = new IdentityQueryFilter ( ) ; 
 + IPartitioner p = StorageService . getPartitioner ( ) ; 
 + Range range = new Range ( p . getMinimumToken ( ) , p . getMinimumToken ( ) ) ; 
 + List < Row > rows = table . getColumnFamilyStore ( " Indexed2 " ) . scan ( clause , range , filter ) ; 
 + assert rows . size ( ) = = 1 : StringUtils . join ( rows , " , " ) ; 
 + assert Arrays . equals ( " k1 " . getBytes ( ) , rows . get ( 0 ) . key . key ) ; 
 + } 
 + 
 private ColumnFamilyStore insertKey1Key2 ( ) throws IOException , ExecutionException , InterruptedException 
 { 
 List < RowMutation > rms = new LinkedList < RowMutation > ( ) ;
