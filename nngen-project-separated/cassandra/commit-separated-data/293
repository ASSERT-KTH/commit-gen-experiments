BLEU SCORE: 0.03283637368030199

TEST MSG: Change repair midpoint logging for tiny ranges
GENERATED MSG: merge from 0 . 6

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index a3eccf2 . . 4302fdf 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 15 <nl> + * Change repair midpoint logging for tiny ranges ( CASSANDRA - 13603 ) <nl> * Better handle corrupt final commitlog segment ( CASSANDRA - 11995 ) <nl> * StreamingHistogram is not thread safe ( CASSANDRA - 13756 ) <nl> * Fix MV timestamp issues ( CASSANDRA - 11500 ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / MerkleTree . java b / src / java / org / apache / cassandra / utils / MerkleTree . java <nl> index 0d5a469 . . 22b61e8 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / MerkleTree . java <nl> + + + b / src / java / org / apache / cassandra / utils / MerkleTree . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . io . IOException ; <nl> import java . io . Serializable ; <nl> import java . util . * ; <nl> <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . base . Preconditions ; <nl> import com . google . common . collect . PeekingIterator ; <nl> <nl> @ @ - 246 , 12 + 247 , 20 @ @ public class MerkleTree implements Serializable <nl> <nl> if ( lhash ! = null & & rhash ! = null & & ! Arrays . equals ( lhash , rhash ) ) <nl> { <nl> - logger . debug ( " Digest mismatch detected , traversing trees [ { } , { } ] " , ltree , rtree ) ; <nl> - if ( FULLY _ INCONSISTENT = = differenceHelper ( ltree , rtree , diff , active ) ) <nl> + if ( lnode instanceof Leaf | | rnode instanceof Leaf ) <nl> { <nl> - logger . debug ( " Range { } fully inconsistent " , active ) ; <nl> + logger . debug ( " Digest mismatch detected among leaf nodes { } , { } " , lnode , rnode ) ; <nl> diff . add ( active ) ; <nl> } <nl> + else <nl> + { <nl> + logger . debug ( " Digest mismatch detected , traversing trees [ { } , { } ] " , ltree , rtree ) ; <nl> + if ( FULLY _ INCONSISTENT = = differenceHelper ( ltree , rtree , diff , active ) ) <nl> + { <nl> + logger . debug ( " Range { } fully inconsistent " , active ) ; <nl> + diff . add ( active ) ; <nl> + } <nl> + } <nl> } <nl> else if ( lhash = = null | | rhash = = null ) <nl> diff . add ( active ) ; <nl> @ @ - 265 , 6 + 274 , 7 @ @ public class MerkleTree implements Serializable <nl> * Takes two trees and a range for which they have hashes , but are inconsistent . <nl> * @ return FULLY _ INCONSISTENT if active is inconsistent , PARTIALLY _ INCONSISTENT if only a subrange is inconsistent . <nl> * / <nl> + @ VisibleForTesting <nl> static int differenceHelper ( MerkleTree ltree , MerkleTree rtree , List < TreeRange > diff , TreeRange active ) <nl> { <nl> if ( active . depth = = Byte . MAX _ VALUE ) <nl> @ @ - 274 , 10 + 284 , 9 @ @ public class MerkleTree implements Serializable <nl> / / sanity check for midpoint calculation , see CASSANDRA - 13052 <nl> if ( midpoint . equals ( active . left ) | | midpoint . equals ( active . right ) ) <nl> { <nl> - / / Unfortunately we can ' t throw here to abort the validation process , as the code is executed in it ' s own <nl> - / / thread with the caller waiting for a condition to be signaled after completion and without an option <nl> - / / to indicate an error ( 2 . x only ) . <nl> - logger . error ( " Invalid midpoint { } for [ { } , { } ] , range will be reported inconsistent " , midpoint , active . left , active . right ) ; <nl> + / / If the midpoint equals either the left or the right , we have a range that ' s too small to split - we ' ll simply report the <nl> + / / whole range as inconsistent <nl> + logger . debug ( " ( { } ) No sane midpoint ( { } ) for range { } , marking whole range as inconsistent " , active . depth , midpoint , active ) ; <nl> return FULLY _ INCONSISTENT ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / utils / MerkleTreeTest . java b / test / unit / org / apache / cassandra / utils / MerkleTreeTest . java <nl> index c9aa09f . . 64aea24 100644 <nl> - - - a / test / unit / org / apache / cassandra / utils / MerkleTreeTest . java <nl> + + + b / test / unit / org / apache / cassandra / utils / MerkleTreeTest . java <nl> @ @ - 472 , 6 + 472 , 40 @ @ public class MerkleTreeTest <nl> <nl> List < TreeRange > diffs = MerkleTree . difference ( ltree , rtree ) ; <nl> assertEquals ( Lists . newArrayList ( range ) , diffs ) ; <nl> + assertEquals ( MerkleTree . FULLY _ INCONSISTENT , MerkleTree . differenceHelper ( ltree , rtree , new ArrayList < > ( ) , new MerkleTree . TreeDifference ( ltree . fullRange . left , ltree . fullRange . right , ( byte ) 0 ) ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * matching should behave as expected , even with extremely small ranges <nl> + * / <nl> + @ Test <nl> + public void matchingSmallRange ( ) <nl> + { <nl> + Token start = new BigIntegerToken ( " 9 " ) ; <nl> + Token end = new BigIntegerToken ( " 10 " ) ; <nl> + Range < Token > range = new Range < > ( start , end ) ; <nl> + <nl> + MerkleTree ltree = new MerkleTree ( partitioner , range , RECOMMENDED _ DEPTH , 16 ) ; <nl> + ltree . init ( ) ; <nl> + MerkleTree rtree = new MerkleTree ( partitioner , range , RECOMMENDED _ DEPTH , 16 ) ; <nl> + rtree . init ( ) ; <nl> + <nl> + byte [ ] h1 = " asdf " . getBytes ( ) ; <nl> + byte [ ] h2 = " asdf " . getBytes ( ) ; <nl> + <nl> + <nl> + / / add dummy hashes to both trees <nl> + for ( TreeRange tree : ltree . invalids ( ) ) <nl> + { <nl> + tree . addHash ( new RowHash ( range . right , h1 , h1 . length ) ) ; <nl> + } <nl> + for ( TreeRange tree : rtree . invalids ( ) ) <nl> + { <nl> + tree . addHash ( new RowHash ( range . right , h2 , h2 . length ) ) ; <nl> + } <nl> + <nl> + / / top level difference ( ) should show no differences <nl> + assertEquals ( MerkleTree . difference ( ltree , rtree ) , Lists . newArrayList ( ) ) ; <nl> } <nl> <nl> / * *
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 8d9e2ea . . c97b17f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 7 + 1 , 10 @ @ <nl> dev <nl> * sstable versioning ( CASSANDRA - 389 ) <nl> <nl> - 0 . 6 . 0 - dev <nl> + 0 . 6 . 0 - RC1 <nl> + * fix compaction bucketing bug ( CASSANDRA - 814 ) <nl> + <nl> + 0 . 6 . 0 - beta1 / beta2 <nl> * add batch _ mutate thrift command , deprecating batch _ insert ( CASSANDRA - 336 ) <nl> * remove get _ key _ range Thrift API , deprecated in 0 . 5 ( CASSANDRA - 710 ) <nl> * add optional login ( ) Thrift call for authentication ( CASSANDRA - 547 ) <nl> @ @ - 42 , 7 + 45 , 9 @ @ dev <nl> * allow larger numbers of keys ( > 140M ) in a sstable bloom filter <nl> ( CASSANDRA - 790 ) <nl> * include jvm argument improvements from CASSANDRA - 504 in debian package <nl> - * change streaming chunk size to 32MB ( was 64MB ) ( CASSANDRA - 795 ) <nl> + * change streaming chunk size to 32MB to accomodate Windows XP limitations <nl> + ( was 64MB ) ( CASSANDRA - 795 ) <nl> + * fix get _ range _ slice returning results in the wrong order ( CASSANDRA - 781 ) <nl> <nl> <nl> 0 . 5 . 0 final <nl> diff - - git a / build . xml b / build . xml <nl> index ea79876 . . 54ef12d 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 314 , 6 + 314 , 7 @ @ <nl> < include name = " * * " / > <nl> < exclude name = " build / * * " / > <nl> < exclude name = " src / gen - java / * * " / > <nl> + < exclude name = " interface / avro / * * " / > <nl> < / tarfileset > <nl> < / tar > <nl> < / target > <nl> diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> index fbd5ebb . . 1b5b6b1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return 0 ; <nl> } <nl> logger . debug ( " Checking to see if compaction of " + cfs . columnFamily _ + " would be useful " ) ; <nl> - Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> + Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> updateEstimateFor ( cfs , buckets ) ; <nl> <nl> for ( List < SSTableReader > sstables : buckets ) <nl> @ @ - 441 , 7 + 441 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> / * <nl> * Group files of similar size into buckets . <nl> * / <nl> - static Set < List < SSTableReader > > getCompactionBuckets ( Iterable < SSTableReader > files , long min ) <nl> + static Set < List < SSTableReader > > getBuckets ( Iterable < SSTableReader > files , long min ) <nl> { <nl> Map < List < SSTableReader > , Long > buckets = new HashMap < List < SSTableReader > , Long > ( ) ; <nl> for ( SSTableReader sstable : files ) <nl> @ @ - 461 , 7 + 461 , 8 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> / / remove and re - add because adding changes the hash <nl> buckets . remove ( bucket ) ; <nl> - averageSize = ( averageSize + size ) / 2 ; <nl> + long totalSize = bucket . size ( ) * averageSize ; <nl> + averageSize = ( totalSize + size ) / ( bucket . size ( ) + 1 ) ; <nl> bucket . add ( sstable ) ; <nl> buckets . put ( bucket , averageSize ) ; <nl> bFound = true ; <nl> @ @ - 538 , 7 + 539 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> public void run ( ) <nl> { <nl> logger . debug ( " Estimating compactions for " + cfs . columnFamily _ ) ; <nl> - final Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> + final Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> updateEstimateFor ( cfs , buckets ) ; <nl> } <nl> } ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index a3eccf2 . . 4302fdf 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 15 
 + * Change repair midpoint logging for tiny ranges ( CASSANDRA - 13603 ) 
 * Better handle corrupt final commitlog segment ( CASSANDRA - 11995 ) 
 * StreamingHistogram is not thread safe ( CASSANDRA - 13756 ) 
 * Fix MV timestamp issues ( CASSANDRA - 11500 ) 
 diff - - git a / src / java / org / apache / cassandra / utils / MerkleTree . java b / src / java / org / apache / cassandra / utils / MerkleTree . java 
 index 0d5a469 . . 22b61e8 100644 
 - - - a / src / java / org / apache / cassandra / utils / MerkleTree . java 
 + + + b / src / java / org / apache / cassandra / utils / MerkleTree . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . io . IOException ; 
 import java . io . Serializable ; 
 import java . util . * ; 
 
 + import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . base . Preconditions ; 
 import com . google . common . collect . PeekingIterator ; 
 
 @ @ - 246 , 12 + 247 , 20 @ @ public class MerkleTree implements Serializable 
 
 if ( lhash ! = null & & rhash ! = null & & ! Arrays . equals ( lhash , rhash ) ) 
 { 
 - logger . debug ( " Digest mismatch detected , traversing trees [ { } , { } ] " , ltree , rtree ) ; 
 - if ( FULLY _ INCONSISTENT = = differenceHelper ( ltree , rtree , diff , active ) ) 
 + if ( lnode instanceof Leaf | | rnode instanceof Leaf ) 
 { 
 - logger . debug ( " Range { } fully inconsistent " , active ) ; 
 + logger . debug ( " Digest mismatch detected among leaf nodes { } , { } " , lnode , rnode ) ; 
 diff . add ( active ) ; 
 } 
 + else 
 + { 
 + logger . debug ( " Digest mismatch detected , traversing trees [ { } , { } ] " , ltree , rtree ) ; 
 + if ( FULLY _ INCONSISTENT = = differenceHelper ( ltree , rtree , diff , active ) ) 
 + { 
 + logger . debug ( " Range { } fully inconsistent " , active ) ; 
 + diff . add ( active ) ; 
 + } 
 + } 
 } 
 else if ( lhash = = null | | rhash = = null ) 
 diff . add ( active ) ; 
 @ @ - 265 , 6 + 274 , 7 @ @ public class MerkleTree implements Serializable 
 * Takes two trees and a range for which they have hashes , but are inconsistent . 
 * @ return FULLY _ INCONSISTENT if active is inconsistent , PARTIALLY _ INCONSISTENT if only a subrange is inconsistent . 
 * / 
 + @ VisibleForTesting 
 static int differenceHelper ( MerkleTree ltree , MerkleTree rtree , List < TreeRange > diff , TreeRange active ) 
 { 
 if ( active . depth = = Byte . MAX _ VALUE ) 
 @ @ - 274 , 10 + 284 , 9 @ @ public class MerkleTree implements Serializable 
 / / sanity check for midpoint calculation , see CASSANDRA - 13052 
 if ( midpoint . equals ( active . left ) | | midpoint . equals ( active . right ) ) 
 { 
 - / / Unfortunately we can ' t throw here to abort the validation process , as the code is executed in it ' s own 
 - / / thread with the caller waiting for a condition to be signaled after completion and without an option 
 - / / to indicate an error ( 2 . x only ) . 
 - logger . error ( " Invalid midpoint { } for [ { } , { } ] , range will be reported inconsistent " , midpoint , active . left , active . right ) ; 
 + / / If the midpoint equals either the left or the right , we have a range that ' s too small to split - we ' ll simply report the 
 + / / whole range as inconsistent 
 + logger . debug ( " ( { } ) No sane midpoint ( { } ) for range { } , marking whole range as inconsistent " , active . depth , midpoint , active ) ; 
 return FULLY _ INCONSISTENT ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / utils / MerkleTreeTest . java b / test / unit / org / apache / cassandra / utils / MerkleTreeTest . java 
 index c9aa09f . . 64aea24 100644 
 - - - a / test / unit / org / apache / cassandra / utils / MerkleTreeTest . java 
 + + + b / test / unit / org / apache / cassandra / utils / MerkleTreeTest . java 
 @ @ - 472 , 6 + 472 , 40 @ @ public class MerkleTreeTest 
 
 List < TreeRange > diffs = MerkleTree . difference ( ltree , rtree ) ; 
 assertEquals ( Lists . newArrayList ( range ) , diffs ) ; 
 + assertEquals ( MerkleTree . FULLY _ INCONSISTENT , MerkleTree . differenceHelper ( ltree , rtree , new ArrayList < > ( ) , new MerkleTree . TreeDifference ( ltree . fullRange . left , ltree . fullRange . right , ( byte ) 0 ) ) ) ; 
 + } 
 + 
 + / * * 
 + * matching should behave as expected , even with extremely small ranges 
 + * / 
 + @ Test 
 + public void matchingSmallRange ( ) 
 + { 
 + Token start = new BigIntegerToken ( " 9 " ) ; 
 + Token end = new BigIntegerToken ( " 10 " ) ; 
 + Range < Token > range = new Range < > ( start , end ) ; 
 + 
 + MerkleTree ltree = new MerkleTree ( partitioner , range , RECOMMENDED _ DEPTH , 16 ) ; 
 + ltree . init ( ) ; 
 + MerkleTree rtree = new MerkleTree ( partitioner , range , RECOMMENDED _ DEPTH , 16 ) ; 
 + rtree . init ( ) ; 
 + 
 + byte [ ] h1 = " asdf " . getBytes ( ) ; 
 + byte [ ] h2 = " asdf " . getBytes ( ) ; 
 + 
 + 
 + / / add dummy hashes to both trees 
 + for ( TreeRange tree : ltree . invalids ( ) ) 
 + { 
 + tree . addHash ( new RowHash ( range . right , h1 , h1 . length ) ) ; 
 + } 
 + for ( TreeRange tree : rtree . invalids ( ) ) 
 + { 
 + tree . addHash ( new RowHash ( range . right , h2 , h2 . length ) ) ; 
 + } 
 + 
 + / / top level difference ( ) should show no differences 
 + assertEquals ( MerkleTree . difference ( ltree , rtree ) , Lists . newArrayList ( ) ) ; 
 } 
 
 / * *

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 8d9e2ea . . c97b17f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 7 + 1 , 10 @ @ 
 dev 
 * sstable versioning ( CASSANDRA - 389 ) 
 
 - 0 . 6 . 0 - dev 
 + 0 . 6 . 0 - RC1 
 + * fix compaction bucketing bug ( CASSANDRA - 814 ) 
 + 
 + 0 . 6 . 0 - beta1 / beta2 
 * add batch _ mutate thrift command , deprecating batch _ insert ( CASSANDRA - 336 ) 
 * remove get _ key _ range Thrift API , deprecated in 0 . 5 ( CASSANDRA - 710 ) 
 * add optional login ( ) Thrift call for authentication ( CASSANDRA - 547 ) 
 @ @ - 42 , 7 + 45 , 9 @ @ dev 
 * allow larger numbers of keys ( > 140M ) in a sstable bloom filter 
 ( CASSANDRA - 790 ) 
 * include jvm argument improvements from CASSANDRA - 504 in debian package 
 - * change streaming chunk size to 32MB ( was 64MB ) ( CASSANDRA - 795 ) 
 + * change streaming chunk size to 32MB to accomodate Windows XP limitations 
 + ( was 64MB ) ( CASSANDRA - 795 ) 
 + * fix get _ range _ slice returning results in the wrong order ( CASSANDRA - 781 ) 
 
 
 0 . 5 . 0 final 
 diff - - git a / build . xml b / build . xml 
 index ea79876 . . 54ef12d 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 314 , 6 + 314 , 7 @ @ 
 < include name = " * * " / > 
 < exclude name = " build / * * " / > 
 < exclude name = " src / gen - java / * * " / > 
 + < exclude name = " interface / avro / * * " / > 
 < / tarfileset > 
 < / tar > 
 < / target > 
 diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java 
 index fbd5ebb . . 1b5b6b1 100644 
 - - - a / src / java / org / apache / cassandra / db / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / CompactionManager . java 
 @ @ - 89 , 7 + 89 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 return 0 ; 
 } 
 logger . debug ( " Checking to see if compaction of " + cfs . columnFamily _ + " would be useful " ) ; 
 - Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 + Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 updateEstimateFor ( cfs , buckets ) ; 
 
 for ( List < SSTableReader > sstables : buckets ) 
 @ @ - 441 , 7 + 441 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 / * 
 * Group files of similar size into buckets . 
 * / 
 - static Set < List < SSTableReader > > getCompactionBuckets ( Iterable < SSTableReader > files , long min ) 
 + static Set < List < SSTableReader > > getBuckets ( Iterable < SSTableReader > files , long min ) 
 { 
 Map < List < SSTableReader > , Long > buckets = new HashMap < List < SSTableReader > , Long > ( ) ; 
 for ( SSTableReader sstable : files ) 
 @ @ - 461 , 7 + 461 , 8 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 / / remove and re - add because adding changes the hash 
 buckets . remove ( bucket ) ; 
 - averageSize = ( averageSize + size ) / 2 ; 
 + long totalSize = bucket . size ( ) * averageSize ; 
 + averageSize = ( totalSize + size ) / ( bucket . size ( ) + 1 ) ; 
 bucket . add ( sstable ) ; 
 buckets . put ( bucket , averageSize ) ; 
 bFound = true ; 
 @ @ - 538 , 7 + 539 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 public void run ( ) 
 { 
 logger . debug ( " Estimating compactions for " + cfs . columnFamily _ ) ; 
 - final Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 + final Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 updateEstimateFor ( cfs , buckets ) ; 
 } 
 } ;
