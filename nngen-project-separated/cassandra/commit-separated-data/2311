BLEU SCORE: 0.020980574531482755

TEST MSG: Ninja : fix grammar for tuple type in CQL docs
GENERATED MSG: Add composite partition keys support to CQL3 doc

TEST DIFF (one line): diff - - git a / doc / cql3 / CQL . textile b / doc / cql3 / CQL . textile <nl> index 2d45cf1 . . 225491a 100644 <nl> - - - a / doc / cql3 / CQL . textile <nl> + + + b / doc / cql3 / CQL . textile <nl> @ @ - 923 , 7 + 923 , 7 @ @ bc ( syntax ) . . <nl> < collection - type > : : = list ' < ' < native - type > ' > ' <nl> | set ' < ' < native - type > ' > ' <nl> | map ' < ' < native - type > ' , ' < native - type > ' > ' <nl> - < tuple - type > : : = tuple ' < ' < native - type > ( ' , ' < native - type > ) * ' > ' <nl> + < tuple - type > : : = tuple ' < ' < type > ( ' , ' < type > ) * ' > ' <nl> p . Note that the native types are keywords and as such are case - insensitive . They are however not reserved ones . <nl> <nl> p . The following table gives additional informations on the native data types , and on which kind of " constants " : # constants each type supports :
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / tracing / TracingAppender . java b / src / java / org / apache / cassandra / tracing / TracingAppender . java <nl> index 4d4a9a0 . . ff8fc62 100644 <nl> - - - a / src / java / org / apache / cassandra / tracing / TracingAppender . java <nl> + + + b / src / java / org / apache / cassandra / tracing / TracingAppender . java <nl> @ @ - 49 , 6 + 49 , 7 @ @ public class TracingAppender extends AppenderSkeleton <nl> return ; <nl> <nl> final int elapsed = state . elapsed ( ) ; <nl> + final String threadName = event . getThreadName ( ) ; <nl> final ByteBuffer eventId = ByteBufferUtil . bytes ( UUIDGen . makeType1UUIDFromHost ( FBUtilities . getBroadcastAddress ( ) ) ) ; <nl> StageManager . getStage ( Stage . TRACING ) . execute ( new WrappedRunnable ( ) <nl> { <nl> @ @ - 57 , 7 + 58 , 7 @ @ public class TracingAppender extends AppenderSkeleton <nl> CFMetaData cfMeta = CFMetaData . TraceEventsCf ; <nl> ColumnFamily cf = ColumnFamily . create ( cfMeta ) ; <nl> addColumn ( cf , buildName ( cfMeta , eventId , bytes ( " source " ) ) , FBUtilities . getBroadcastAddress ( ) ) ; <nl> - addColumn ( cf , buildName ( cfMeta , eventId , bytes ( " thread " ) ) , event . getThreadName ( ) ) ; <nl> + addColumn ( cf , buildName ( cfMeta , eventId , bytes ( " thread " ) ) , threadName ) ; <nl> addColumn ( cf , buildName ( cfMeta , eventId , bytes ( " source _ elapsed " ) ) , elapsed ) ; <nl> addColumn ( cf , buildName ( cfMeta , eventId , bytes ( " activity " ) ) , event . getMessage ( ) . toString ( ) ) ; <nl> RowMutation mutation = new RowMutation ( Tracing . TRACE _ KS , state . sessionIdBytes ) ;

TEST DIFF:
diff - - git a / doc / cql3 / CQL . textile b / doc / cql3 / CQL . textile 
 index 2d45cf1 . . 225491a 100644 
 - - - a / doc / cql3 / CQL . textile 
 + + + b / doc / cql3 / CQL . textile 
 @ @ - 923 , 7 + 923 , 7 @ @ bc ( syntax ) . . 
 < collection - type > : : = list ' < ' < native - type > ' > ' 
 | set ' < ' < native - type > ' > ' 
 | map ' < ' < native - type > ' , ' < native - type > ' > ' 
 - < tuple - type > : : = tuple ' < ' < native - type > ( ' , ' < native - type > ) * ' > ' 
 + < tuple - type > : : = tuple ' < ' < type > ( ' , ' < type > ) * ' > ' 
 p . Note that the native types are keywords and as such are case - insensitive . They are however not reserved ones . 
 
 p . The following table gives additional informations on the native data types , and on which kind of " constants " : # constants each type supports :

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / tracing / TracingAppender . java b / src / java / org / apache / cassandra / tracing / TracingAppender . java 
 index 4d4a9a0 . . ff8fc62 100644 
 - - - a / src / java / org / apache / cassandra / tracing / TracingAppender . java 
 + + + b / src / java / org / apache / cassandra / tracing / TracingAppender . java 
 @ @ - 49 , 6 + 49 , 7 @ @ public class TracingAppender extends AppenderSkeleton 
 return ; 
 
 final int elapsed = state . elapsed ( ) ; 
 + final String threadName = event . getThreadName ( ) ; 
 final ByteBuffer eventId = ByteBufferUtil . bytes ( UUIDGen . makeType1UUIDFromHost ( FBUtilities . getBroadcastAddress ( ) ) ) ; 
 StageManager . getStage ( Stage . TRACING ) . execute ( new WrappedRunnable ( ) 
 { 
 @ @ - 57 , 7 + 58 , 7 @ @ public class TracingAppender extends AppenderSkeleton 
 CFMetaData cfMeta = CFMetaData . TraceEventsCf ; 
 ColumnFamily cf = ColumnFamily . create ( cfMeta ) ; 
 addColumn ( cf , buildName ( cfMeta , eventId , bytes ( " source " ) ) , FBUtilities . getBroadcastAddress ( ) ) ; 
 - addColumn ( cf , buildName ( cfMeta , eventId , bytes ( " thread " ) ) , event . getThreadName ( ) ) ; 
 + addColumn ( cf , buildName ( cfMeta , eventId , bytes ( " thread " ) ) , threadName ) ; 
 addColumn ( cf , buildName ( cfMeta , eventId , bytes ( " source _ elapsed " ) ) , elapsed ) ; 
 addColumn ( cf , buildName ( cfMeta , eventId , bytes ( " activity " ) ) , event . getMessage ( ) . toString ( ) ) ; 
 RowMutation mutation = new RowMutation ( Tracing . TRACE _ KS , state . sessionIdBytes ) ;
