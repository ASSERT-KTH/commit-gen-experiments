BLEU SCORE: 0.040583489434387374

TEST MSG: Fix ArrayIndexOutOfBoundsException in 2ndary index query
GENERATED MSG: Make reloading the compaction strategy safe

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d55b658 . . c7592fb 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 41 , 6 + 41 , 7 @ @ <nl> * Fix NPE when streaming connection is not yet established ( CASSANDRA - 6210 ) <nl> * Avoid rare duplicate read repair triggering ( CASSANDRA - 6606 ) <nl> * Fix paging discardFirst ( CASSANDRA - 6555 ) <nl> + * Fix ArrayIndexOutOfBoundsException in 2ndary index query ( CASSANDRA - 6470 ) <nl> Merged from 1 . 2 : <nl> * fsync compression metadata ( CASSANDRA - 6531 ) <nl> * Validate CF existence on execution for prepared statement ( CASSANDRA - 6535 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / DataRange . java b / src / java / org / apache / cassandra / db / DataRange . java <nl> index 453b16a . . 91ff512 100644 <nl> - - - a / src / java / org / apache / cassandra / db / DataRange . java <nl> + + + b / src / java / org / apache / cassandra / db / DataRange . java <nl> @ @ - 185 , 8 + 185 , 10 @ @ public class DataRange <nl> private ColumnSlice [ ] slicesForKey ( ByteBuffer key ) <nl> { <nl> / / We don ' t call that until it ' s necessary , so assume we have to do some hard work <nl> - Composite newStart = equals ( startKey ( ) , key ) ? columnStart : null ; <nl> - Composite newFinish = equals ( stopKey ( ) , key ) ? columnFinish : null ; <nl> + / / it doesn ' t expand on them . As such , we can ignore the case where they are empty and we do <nl> + / / as it screw up with the logic below ( see # 6592 ) <nl> + Composite newStart = equals ( startKey ( ) , key ) & & ! columnStart . isEmpty ( ) ? columnStart : null ; <nl> + Composite newFinish = equals ( stopKey ( ) , key ) & & ! columnFinish . isEmpty ( ) ? columnFinish : null ; <nl> <nl> List < ColumnSlice > newSlices = new ArrayList < ColumnSlice > ( sliceFilter . slices . length ) ; / / in the common case , we ' ll have the same number of slices <nl>
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 4640036 . . b782fbe 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 26 , 6 + 26 , 9 @ @ <nl> * CompactionManager is now responsible for checking for new candidates <nl> post - task execution , enabling more consistent leveled compaction <nl> ( CASSANDRA - 3391 ) <nl> + * fix cassandra hanging on jsvc stop ( CASSANDRA - 3302 ) <nl> + * Avoid leveled compaction getting blocked on errors ( CASSANDRA - 3408 ) <nl> + * Make reloading the compaction strategy safe ( CASSANDRA - 3409 ) <nl> Merged from 0 . 8 : <nl> * ( CQL ) update grammar to require key clause in DELETE statement <nl> ( CASSANDRA - 3349 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 231a058 . . 93f04f3 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 178 , 8 + 178 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> if ( ! rowCacheKeysToSave . isModified ( ) ) <nl> rowCacheKeysToSave = new DefaultInteger ( metadata . getRowCacheKeysToSave ( ) ) ; <nl> <nl> - compactionStrategy . shutdown ( ) ; <nl> - compactionStrategy = metadata . createCompactionStrategyInstance ( this ) ; <nl> + maybeReloadCompactionStrategy ( ) ; <nl> <nl> updateCacheSizes ( ) ; <nl> scheduleCacheSaving ( rowCacheSaveInSeconds . value ( ) , keyCacheSaveInSeconds . value ( ) , rowCacheKeysToSave . value ( ) ) ; <nl> @ @ - 187 , 6 + 186 , 24 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> indexManager . reload ( ) ; <nl> } <nl> <nl> + private void maybeReloadCompactionStrategy ( ) <nl> + { <nl> + / / Check if there is a need for reloading <nl> + if ( metadata . compactionStrategyClass . equals ( compactionStrategy . getClass ( ) ) & & metadata . compactionStrategyOptions . equals ( compactionStrategy . getOptions ( ) ) ) <nl> + return ; <nl> + <nl> + CompactionManager . instance . getCompactionLock ( ) . lock ( ) ; <nl> + try <nl> + { <nl> + compactionStrategy . shutdown ( ) ; <nl> + compactionStrategy = metadata . createCompactionStrategyInstance ( this ) ; <nl> + } <nl> + finally <nl> + { <nl> + CompactionManager . instance . getCompactionLock ( ) . unlock ( ) ; <nl> + } <nl> + } <nl> + <nl> private ColumnFamilyStore ( Table table , String columnFamilyName , IPartitioner partitioner , int generation , CFMetaData metadata ) <nl> { <nl> assert metadata ! = null : " null metadata for " + table + " : " + columnFamilyName ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> index fc9dd74 . . ec28332 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> @ @ - 63 , 6 + 63 , 11 @ @ public abstract class AbstractCompactionStrategy <nl> StorageService . optionalTasks . schedule ( runnable , 5 * 60 , TimeUnit . SECONDS ) ; <nl> } <nl> <nl> + public Map < String , String > getOptions ( ) <nl> + { <nl> + return options ; <nl> + } <nl> + <nl> / * * <nl> * Releases any resources if this strategy is shutdown ( when the CFS is reloaded after a schema change ) . <nl> * Default is to do nothing . <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java <nl> index bbc6701 . . dbcd8cd 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java <nl> @ @ - 67 , 7 + 67 , 10 @ @ public abstract class AbstractCompactionTask <nl> Set < SSTableReader > marked = cfs . getDataTracker ( ) . markCompacting ( sstables , min , max ) ; <nl> <nl> if ( marked = = null | | marked . isEmpty ( ) ) <nl> + { <nl> + cancel ( ) ; <nl> return false ; <nl> + } <nl> <nl> this . sstables = marked ; <nl> return true ; <nl> @ @ - 77 , 4 + 80 , 8 @ @ public abstract class AbstractCompactionTask <nl> { <nl> cfs . getDataTracker ( ) . unmarkCompacting ( sstables ) ; <nl> } <nl> + <nl> + / / Can be overriden for action that need to be performed if the task won ' t <nl> + / / execute ( if sstable can ' t be marked successfully ) <nl> + protected void cancel ( ) { } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java <nl> index 2571d93 . . b0b605a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java <nl> @ @ - 52 , 9 + 52 , 15 @ @ public class LeveledCompactionTask extends CompactionTask <nl> @ Override <nl> public int execute ( CompactionManager . CompactionExecutorStatsCollector collector ) throws IOException <nl> { <nl> - int n = super . execute ( collector ) ; <nl> - latch . countDown ( ) ; <nl> - return n ; <nl> + try <nl> + { <nl> + int n = super . execute ( collector ) ; <nl> + return n ; <nl> + } <nl> + finally <nl> + { <nl> + latch . countDown ( ) ; <nl> + } <nl> } <nl> <nl> public boolean isDone ( ) <nl> @ @ - 79 , 4 + 85 , 10 @ @ public class LeveledCompactionTask extends CompactionTask <nl> { <nl> return false ; <nl> } <nl> + <nl> + @ Override <nl> + protected void cancel ( ) <nl> + { <nl> + latch . countDown ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java b / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java <nl> index 38577f1 . . 4076d10 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java <nl> + + + b / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java <nl> @ @ - 174 , 4 + 174 , 12 @ @ public class TCustomServerSocket extends TServerTransport <nl> serverSocket _ = null ; <nl> } <nl> } <nl> + <nl> + @ Override <nl> + public void interrupt ( ) <nl> + { <nl> + / / The thread - safeness of this is dubious , but Java documentation suggests <nl> + / / that it is safe to do this from a different thread context <nl> + close ( ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d55b658 . . c7592fb 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 41 , 6 + 41 , 7 @ @ 
 * Fix NPE when streaming connection is not yet established ( CASSANDRA - 6210 ) 
 * Avoid rare duplicate read repair triggering ( CASSANDRA - 6606 ) 
 * Fix paging discardFirst ( CASSANDRA - 6555 ) 
 + * Fix ArrayIndexOutOfBoundsException in 2ndary index query ( CASSANDRA - 6470 ) 
 Merged from 1 . 2 : 
 * fsync compression metadata ( CASSANDRA - 6531 ) 
 * Validate CF existence on execution for prepared statement ( CASSANDRA - 6535 ) 
 diff - - git a / src / java / org / apache / cassandra / db / DataRange . java b / src / java / org / apache / cassandra / db / DataRange . java 
 index 453b16a . . 91ff512 100644 
 - - - a / src / java / org / apache / cassandra / db / DataRange . java 
 + + + b / src / java / org / apache / cassandra / db / DataRange . java 
 @ @ - 185 , 8 + 185 , 10 @ @ public class DataRange 
 private ColumnSlice [ ] slicesForKey ( ByteBuffer key ) 
 { 
 / / We don ' t call that until it ' s necessary , so assume we have to do some hard work 
 - Composite newStart = equals ( startKey ( ) , key ) ? columnStart : null ; 
 - Composite newFinish = equals ( stopKey ( ) , key ) ? columnFinish : null ; 
 + / / it doesn ' t expand on them . As such , we can ignore the case where they are empty and we do 
 + / / as it screw up with the logic below ( see # 6592 ) 
 + Composite newStart = equals ( startKey ( ) , key ) & & ! columnStart . isEmpty ( ) ? columnStart : null ; 
 + Composite newFinish = equals ( stopKey ( ) , key ) & & ! columnFinish . isEmpty ( ) ? columnFinish : null ; 
 
 List < ColumnSlice > newSlices = new ArrayList < ColumnSlice > ( sliceFilter . slices . length ) ; / / in the common case , we ' ll have the same number of slices 


NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 4640036 . . b782fbe 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 26 , 6 + 26 , 9 @ @ 
 * CompactionManager is now responsible for checking for new candidates 
 post - task execution , enabling more consistent leveled compaction 
 ( CASSANDRA - 3391 ) 
 + * fix cassandra hanging on jsvc stop ( CASSANDRA - 3302 ) 
 + * Avoid leveled compaction getting blocked on errors ( CASSANDRA - 3408 ) 
 + * Make reloading the compaction strategy safe ( CASSANDRA - 3409 ) 
 Merged from 0 . 8 : 
 * ( CQL ) update grammar to require key clause in DELETE statement 
 ( CASSANDRA - 3349 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 231a058 . . 93f04f3 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 178 , 8 + 178 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 if ( ! rowCacheKeysToSave . isModified ( ) ) 
 rowCacheKeysToSave = new DefaultInteger ( metadata . getRowCacheKeysToSave ( ) ) ; 
 
 - compactionStrategy . shutdown ( ) ; 
 - compactionStrategy = metadata . createCompactionStrategyInstance ( this ) ; 
 + maybeReloadCompactionStrategy ( ) ; 
 
 updateCacheSizes ( ) ; 
 scheduleCacheSaving ( rowCacheSaveInSeconds . value ( ) , keyCacheSaveInSeconds . value ( ) , rowCacheKeysToSave . value ( ) ) ; 
 @ @ - 187 , 6 + 186 , 24 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 indexManager . reload ( ) ; 
 } 
 
 + private void maybeReloadCompactionStrategy ( ) 
 + { 
 + / / Check if there is a need for reloading 
 + if ( metadata . compactionStrategyClass . equals ( compactionStrategy . getClass ( ) ) & & metadata . compactionStrategyOptions . equals ( compactionStrategy . getOptions ( ) ) ) 
 + return ; 
 + 
 + CompactionManager . instance . getCompactionLock ( ) . lock ( ) ; 
 + try 
 + { 
 + compactionStrategy . shutdown ( ) ; 
 + compactionStrategy = metadata . createCompactionStrategyInstance ( this ) ; 
 + } 
 + finally 
 + { 
 + CompactionManager . instance . getCompactionLock ( ) . unlock ( ) ; 
 + } 
 + } 
 + 
 private ColumnFamilyStore ( Table table , String columnFamilyName , IPartitioner partitioner , int generation , CFMetaData metadata ) 
 { 
 assert metadata ! = null : " null metadata for " + table + " : " + columnFamilyName ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 index fc9dd74 . . ec28332 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 @ @ - 63 , 6 + 63 , 11 @ @ public abstract class AbstractCompactionStrategy 
 StorageService . optionalTasks . schedule ( runnable , 5 * 60 , TimeUnit . SECONDS ) ; 
 } 
 
 + public Map < String , String > getOptions ( ) 
 + { 
 + return options ; 
 + } 
 + 
 / * * 
 * Releases any resources if this strategy is shutdown ( when the CFS is reloaded after a schema change ) . 
 * Default is to do nothing . 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java 
 index bbc6701 . . dbcd8cd 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java 
 @ @ - 67 , 7 + 67 , 10 @ @ public abstract class AbstractCompactionTask 
 Set < SSTableReader > marked = cfs . getDataTracker ( ) . markCompacting ( sstables , min , max ) ; 
 
 if ( marked = = null | | marked . isEmpty ( ) ) 
 + { 
 + cancel ( ) ; 
 return false ; 
 + } 
 
 this . sstables = marked ; 
 return true ; 
 @ @ - 77 , 4 + 80 , 8 @ @ public abstract class AbstractCompactionTask 
 { 
 cfs . getDataTracker ( ) . unmarkCompacting ( sstables ) ; 
 } 
 + 
 + / / Can be overriden for action that need to be performed if the task won ' t 
 + / / execute ( if sstable can ' t be marked successfully ) 
 + protected void cancel ( ) { } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java 
 index 2571d93 . . b0b605a 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java 
 @ @ - 52 , 9 + 52 , 15 @ @ public class LeveledCompactionTask extends CompactionTask 
 @ Override 
 public int execute ( CompactionManager . CompactionExecutorStatsCollector collector ) throws IOException 
 { 
 - int n = super . execute ( collector ) ; 
 - latch . countDown ( ) ; 
 - return n ; 
 + try 
 + { 
 + int n = super . execute ( collector ) ; 
 + return n ; 
 + } 
 + finally 
 + { 
 + latch . countDown ( ) ; 
 + } 
 } 
 
 public boolean isDone ( ) 
 @ @ - 79 , 4 + 85 , 10 @ @ public class LeveledCompactionTask extends CompactionTask 
 { 
 return false ; 
 } 
 + 
 + @ Override 
 + protected void cancel ( ) 
 + { 
 + latch . countDown ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java b / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java 
 index 38577f1 . . 4076d10 100644 
 - - - a / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java 
 + + + b / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java 
 @ @ - 174 , 4 + 174 , 12 @ @ public class TCustomServerSocket extends TServerTransport 
 serverSocket _ = null ; 
 } 
 } 
 + 
 + @ Override 
 + public void interrupt ( ) 
 + { 
 + / / The thread - safeness of this is dubious , but Java documentation suggests 
 + / / that it is safe to do this from a different thread context 
 + close ( ) ; 
 + } 
 }
