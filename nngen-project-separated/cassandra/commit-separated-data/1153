BLEU SCORE: 0.020998444584734318

TEST MSG: Fix completion problems in cqlsh
GENERATED MSG: cqlsh : Don ' t show ' null ' in place of empty values

TEST DIFF (one line): diff - - git a / bin / cqlsh . py b / bin / cqlsh . py <nl> index 027a45e . . a5a2bfa 100644 <nl> - - - a / bin / cqlsh . py <nl> + + + b / bin / cqlsh . py <nl> @ @ - 2330 , 7 + 2330 , 7 @ @ class ImportProcess ( mp . Process ) : <nl> table _ meta = new _ cluster . metadata . keyspaces [ self . ks ] . tables [ self . cf ] <nl> <nl> pk _ cols = [ col . name for col in table _ meta . primary _ key ] <nl> - cqltypes = [ table _ meta . columns [ name ] . typestring for name in self . columns ] <nl> + cqltypes = [ table _ meta . columns [ name ] . cql _ type for name in self . columns ] <nl> pk _ indexes = [ self . columns . index ( col . name ) for col in table _ meta . primary _ key ] <nl> is _ counter _ table = ( " counter " in cqltypes ) <nl> <nl> diff - - git a / lib / cassandra - driver - internal - only - 3 . 0 . 0 - 6af642d . zip b / lib / cassandra - driver - internal - only - 3 . 0 . 0 - 6af642d . zip <nl> new file mode 100644 <nl> index 0000000 . . 507370b <nl> Binary files / dev / null and b / lib / cassandra - driver - internal - only - 3 . 0 . 0 - 6af642d . zip differ <nl> diff - - git a / lib / cassandra - driver - internal - only - 3 . 0 . 0a3 . post0 - c535450 . zip b / lib / cassandra - driver - internal - only - 3 . 0 . 0a3 . post0 - c535450 . zip <nl> deleted file mode 100644 <nl> index 9c75cd6 . . 0000000 <nl> Binary files a / lib / cassandra - driver - internal - only - 3 . 0 . 0a3 . post0 - c535450 . zip and / dev / null differ <nl> diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py <nl> index aed7d01 . . 4c21f7a 100644 <nl> - - - a / pylib / cqlshlib / cql3handling . py <nl> + + + b / pylib / cqlshlib / cql3handling . py <nl> @ @ - 767 , 21 + 767 , 20 @ @ def relation _ token _ subject _ completer ( ctxt , cass ) : <nl> @ completer _ for ( ' relation ' , ' rel _ lhs ' ) <nl> def select _ relation _ lhs _ completer ( ctxt , cass ) : <nl> layout = get _ table _ meta ( ctxt , cass ) <nl> - filterable = set ( ( layout . partition _ key [ 0 ] . name , layout . clustering _ key [ 0 ] . name ) ) <nl> + filterable = set ( ) <nl> already _ filtered _ on = map ( dequote _ name , ctxt . get _ binding ( ' rel _ lhs ' , ( ) ) ) <nl> - for num in range ( 1 , len ( layout . partition _ key ) ) : <nl> - if layout . partition _ key [ num - 1 ] . name in already _ filtered _ on : <nl> + for num in range ( 0 , len ( layout . partition _ key ) ) : <nl> + if num = = 0 or layout . partition _ key [ num - 1 ] . name in already _ filtered _ on : <nl> filterable . add ( layout . partition _ key [ num ] . name ) <nl> else : <nl> break <nl> - for num in range ( 1 , len ( layout . clustering _ key ) ) : <nl> - if layout . clustering _ key [ num - 1 ] . name in already _ filtered _ on : <nl> + for num in range ( 0 , len ( layout . clustering _ key ) ) : <nl> + if num = = 0 or layout . clustering _ key [ num - 1 ] . name in already _ filtered _ on : <nl> filterable . add ( layout . clustering _ key [ num ] . name ) <nl> else : <nl> break <nl> - for cd in layout . columns . values ( ) : <nl> - if cd . index : <nl> - filterable . add ( cd . name ) <nl> + for idx in layout . indexes . itervalues ( ) : <nl> + filterable . add ( idx . index _ options [ " target " ] ) <nl> return map ( maybe _ escape _ name , filterable ) <nl> <nl> explain _ completion ( ' selector ' , ' colname ' ) <nl> @ @ - 830 , 16 + 829 , 16 @ @ def insert _ newval _ completer ( ctxt , cass ) : <nl> if len ( valuesdone ) > = len ( insertcols ) : <nl> return [ ] <nl> curcol = insertcols [ len ( valuesdone ) ] <nl> - cqltype = layout . columns [ curcol ] . data _ type <nl> - coltype = cqltype . typename <nl> + coltype = layout . columns [ curcol ] . cql _ type <nl> if coltype in ( ' map ' , ' set ' ) : <nl> return [ ' { ' ] <nl> if coltype = = ' list ' : <nl> return [ ' [ ' ] <nl> if coltype = = ' boolean ' : <nl> return [ ' true ' , ' false ' ] <nl> + <nl> return [ Hint ( ' < value for % s ( % s ) > ' % ( maybe _ escape _ name ( curcol ) , <nl> - cqltype . cql _ parameterized _ type ( ) ) ) ] <nl> + coltype ) ) ] <nl> <nl> <nl> @ completer _ for ( ' insertStatement ' , ' valcomma ' ) <nl> @ @ - 899 , 29 + 898 , 28 @ @ def update _ col _ completer ( ctxt , cass ) : <nl> def update _ countername _ completer ( ctxt , cass ) : <nl> layout = get _ table _ meta ( ctxt , cass ) <nl> curcol = dequote _ name ( ctxt . get _ binding ( ' updatecol ' , ' ' ) ) <nl> - cqltype = layout . columns [ curcol ] . data _ type <nl> - coltype = cqltype . typename <nl> + coltype = layout . columns [ curcol ] . cql _ type <nl> if coltype = = ' counter ' : <nl> return [ maybe _ escape _ name ( curcol ) ] <nl> if coltype in ( ' map ' , ' set ' ) : <nl> return [ " { " ] <nl> if coltype = = ' list ' : <nl> return [ " [ " ] <nl> - return [ Hint ( ' < term ( % s ) > ' % cqltype . cql _ parameterized _ type ( ) ) ] <nl> + return [ Hint ( ' < term ( % s ) > ' % coltype ) ] <nl> <nl> <nl> @ completer _ for ( ' assignment ' , ' counterop ' ) <nl> def update _ counterop _ completer ( ctxt , cass ) : <nl> layout = get _ table _ meta ( ctxt , cass ) <nl> curcol = dequote _ name ( ctxt . get _ binding ( ' updatecol ' , ' ' ) ) <nl> - return [ ' + ' , ' - ' ] if layout . columns [ curcol ] . data _ type . typename = = ' counter ' else [ ] <nl> + return [ ' + ' , ' - ' ] if layout . columns [ curcol ] . cql _ type = = ' counter ' else [ ] <nl> <nl> <nl> @ completer _ for ( ' assignment ' , ' inc ' ) <nl> def update _ counter _ inc _ completer ( ctxt , cass ) : <nl> layout = get _ table _ meta ( ctxt , cass ) <nl> curcol = dequote _ name ( ctxt . get _ binding ( ' updatecol ' , ' ' ) ) <nl> - if layout . columns [ curcol ] . data _ type . typename = = ' counter ' : <nl> + if layout . columns [ curcol ] . cql _ type = = ' counter ' : <nl> return [ Hint ( ' < wholenumber > ' ) ] <nl> return [ ] <nl> <nl> @ @ - 947 , 7 + 945 , 7 @ @ def update _ listcol _ completer ( ctxt , cass ) : <nl> def update _ indexbracket _ completer ( ctxt , cass ) : <nl> layout = get _ table _ meta ( ctxt , cass ) <nl> curcol = dequote _ name ( ctxt . get _ binding ( ' updatecol ' , ' ' ) ) <nl> - coltype = layout . columns [ curcol ] . data _ type . typename <nl> + coltype = layout . columns [ curcol ] . cql _ type <nl> if coltype in ( ' map ' , ' list ' ) : <nl> return [ ' [ ' ] <nl> return [ ] <nl> @ @ - 1174 , 8 + 1172 , 10 @ @ explain _ completion ( ' createUserTypeStatement ' , ' newcol ' , ' < new _ field _ name > ' ) <nl> <nl> @ completer _ for ( ' createIndexStatement ' , ' col ' ) <nl> def create _ index _ col _ completer ( ctxt , cass ) : <nl> + " " " Return the columns for which an index doesn ' t exist yet . " " " <nl> layout = get _ table _ meta ( ctxt , cass ) <nl> - colnames = [ cd . name for cd in layout . columns . values ( ) if not cd . index ] <nl> + idx _ targets = [ idx . index _ options [ " target " ] for idx in layout . indexes . itervalues ( ) ] <nl> + colnames = [ cd . name for cd in layout . columns . values ( ) if cd . name not in idx _ targets ] <nl> return map ( maybe _ escape _ name , colnames ) <nl> <nl> syntax _ rules + = r ' ' ' <nl> diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ completion . py b / pylib / cqlshlib / test / test _ cqlsh _ completion . py <nl> index 7cf583d . . e5eb9e1 100644 <nl> - - - a / pylib / cqlshlib / test / test _ cqlsh _ completion . py <nl> + + + b / pylib / cqlshlib / test / test _ cqlsh _ completion . py <nl> @ @ - 341 , 18 + 341 , 18 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : <nl> self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' " , <nl> choices = [ ' , ' , ' WHERE ' ] ) <nl> self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' WHERE " , <nl> - choices = [ ' TOKEN ( ' , ' < identifier > ' , ' < quotedName > ' ] ) <nl> + choices = [ ' TOKEN ( ' , ' lonelykey ' ] ) <nl> self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' WHERE " , <nl> - choices = [ ' TOKEN ( ' , ' < identifier > ' , ' < quotedName > ' ] ) <nl> + choices = [ ' TOKEN ( ' , ' lonelykey ' ] ) <nl> <nl> self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' WHERE lonel " , <nl> - choices = [ ' < quotedName > ' , ' < identifier > ' ] ) <nl> + immediate = ' ykey ' ) <nl> self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' WHERE lonelykey " , <nl> choices = [ ' = ' , ' < = ' , ' > = ' , ' > ' , ' < ' , ' CONTAINS ' , ' IN ' , ' [ ' ] ) <nl> self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' WHERE lonelykey = 0 . 0 " , <nl> choices = [ ' AND ' , ' IF ' , ' ; ' ] ) <nl> self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' WHERE lonelykey = 0 . 0 AND " , <nl> - choices = [ ' TOKEN ( ' , ' < identifier > ' , ' < quotedName > ' ] ) <nl> + choices = [ ' TOKEN ( ' , ' lonelykey ' ] ) <nl> <nl> self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' WHERE TOKEN ( lonelykey " , <nl> choices = [ ' , ' , ' ) ' ] ) <nl> @ @ - 654 , 7 + 654 , 8 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : <nl> choices = [ ' base _ time _ seconds ' , ' max _ sstable _ age _ days ' , <nl> ' timestamp _ resolution ' , ' min _ threshold ' , ' class ' , ' max _ threshold ' , <nl> ' tombstone _ compaction _ interval ' , ' tombstone _ threshold ' , <nl> - ' enabled ' , ' unchecked _ tombstone _ compaction ' ] ) <nl> + ' enabled ' , ' unchecked _ tombstone _ compaction ' , <nl> + ' max _ window _ size _ seconds ' ] ) <nl> <nl> def test _ complete _ in _ create _ columnfamily ( self ) : <nl> self . trycompletions ( ' CREATE C ' , choices = [ ' COLUMNFAMILY ' , ' CUSTOM ' ] ) <nl> diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ output . py b / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> index 3246541 . . 7a2fc86 100644 <nl> - - - a / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> + + + b / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> @ @ - 369 , 21 + 369 , 6 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> " " " ) , <nl> ) , env = { ' TZ ' : ' Etc / UTC ' } ) <nl> <nl> - self . assertQueriesGiveColoredOutput ( ( <nl> - ( ' ' ' select timestampcol from has _ all _ types where num = 0 ; ' ' ' , " " " <nl> - timestampcol <nl> - MMMMMMMMMMMM <nl> - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> - <nl> - 2012 - 05 - 14 07 : 53 : 20 - 0500 <nl> - GGGGGGGGGGGGGGGGGGGGGGGG <nl> - <nl> - <nl> - ( 1 rows ) <nl> - nnnnnnnn <nl> - " " " ) , <nl> - ) , env = { ' TZ ' : ' EST ' } ) <nl> - <nl> def test _ boolean _ output ( self ) : <nl> self . assertCqlverQueriesGiveColoredOutput ( ( <nl> ( ' select num , booleancol from has _ all _ types where num in ( 0 , 1 , 2 , 3 ) ; ' , " " "
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 24d4c9e . . e7e8652 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> 1 . 2 . 7 <nl> * Fix serialization of the LEFT gossip value ( CASSANDRA - 5696 ) <nl> * Pig : support for cql3 tables ( CASSANDRA - 5234 ) <nl> + * cqlsh : Don ' t show ' null ' in place of empty values ( CASSANDRA - 5675 ) <nl> <nl> 1 . 2 . 6 <nl> * Fix tracing when operation completes before all responses arrive ( CASSANDRA - 5668 ) <nl> diff - - git a / bin / cqlsh b / bin / cqlsh <nl> index 70b70f5 . . 9f1e6cf 100755 <nl> - - - a / bin / cqlsh <nl> + + + b / bin / cqlsh <nl> @ @ - 567 , 6 + 567 , 17 @ @ class Shell ( cmd . Cmd ) : <nl> def myformat _ colname ( self , name , nametype ) : <nl> return self . myformat _ value ( name , nametype , colormap = COLUMN _ NAME _ COLORS ) <nl> <nl> + # cql / cursor . py : Cursor . decode _ row ( ) function , modified to not turn ' ' into None . <nl> + def decode _ row ( self , cursor , row ) : <nl> + values = [ ] <nl> + bytevals = cursor . columnvalues ( row ) <nl> + for val , vtype , nameinfo in zip ( bytevals , cursor . column _ types , cursor . name _ info ) : <nl> + if val = = ' ' : <nl> + values . append ( val ) <nl> + else : <nl> + values . append ( cursor . decoder . decode _ value ( val , vtype , nameinfo [ 0 ] ) ) <nl> + return values <nl> + <nl> def report _ connection ( self ) : <nl> self . show _ host ( ) <nl> self . show _ version ( ) <nl> @ @ - 1115 , 7 + 1126 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> colnames = [ d [ 0 ] for d in cursor . description ] <nl> colnames _ t = [ ( name , self . get _ nametype ( cursor , n ) ) for ( n , name ) in enumerate ( colnames ) ] <nl> formatted _ names = [ self . myformat _ colname ( name , nametype ) for ( name , nametype ) in colnames _ t ] <nl> - formatted _ values = [ map ( self . myformat _ value , row , cursor . column _ types ) for row in cursor ] <nl> + formatted _ values = [ map ( self . myformat _ value , self . decode _ row ( cursor , row ) , cursor . column _ types ) for row in cursor . result ] <nl> if self . expand _ enabled : <nl> self . print _ formatted _ result _ vertically ( formatted _ names , formatted _ values ) <nl> else : <nl> @ @ - 1153 , 11 + 1164 , 12 @ @ class Shell ( cmd . Cmd ) : <nl> self . writeresult ( ' ' ) <nl> <nl> def print _ dynamic _ result ( self , cursor ) : <nl> - for row in cursor : <nl> + for row in cursor . result : <nl> + cursor . fetchone ( ) <nl> colnames = [ d [ 0 ] for d in cursor . description ] <nl> colnames _ t = [ ( name , self . get _ nametype ( cursor , n ) ) for ( n , name ) in enumerate ( colnames ) ] <nl> colnames = [ self . myformat _ colname ( name , nametype ) for ( name , nametype ) in colnames _ t ] <nl> - colvals = map ( self . myformat _ value , row , cursor . column _ types ) <nl> + colvals = map ( self . myformat _ value , self . decode _ row ( cursor , row ) , cursor . column _ types ) <nl> line = ' | ' . join ( ' % s , % s ' % ( n . coloredval , v . coloredval ) for ( n , v ) in zip ( colnames , colvals ) ) <nl> self . writeresult ( ' ' + line ) <nl> <nl> @ @ - 1680 , 14 + 1692 , 18 @ @ class Shell ( cmd . Cmd ) : <nl> def do _ import _ row ( self , columns , nullval , layout , row ) : <nl> rowmap = { } <nl> for name , value in zip ( columns , row ) : <nl> + type = layout . get _ column ( name ) . cqltype <nl> + if issubclass ( type , ReversedType ) : <nl> + type = type . subtypes [ 0 ] <nl> + cqltype = type . cql _ parameterized _ type ( ) <nl> + <nl> if value ! = nullval : <nl> - type = layout . get _ column ( name ) . cqltype <nl> - if issubclass ( type , ReversedType ) : <nl> - type = type . subtypes [ 0 ] <nl> - if type . cql _ parameterized _ type ( ) in ( ' ascii ' , ' text ' , ' timestamp ' , ' inet ' ) : <nl> + if cqltype in ( ' ascii ' , ' text ' , ' timestamp ' , ' inet ' ) : <nl> rowmap [ name ] = self . cql _ protect _ value ( value ) <nl> else : <nl> rowmap [ name ] = value <nl> + elif name in layout . column _ aliases and not type . empty _ binary _ ok : <nl> + rowmap [ name ] = ' blobAs % s ( 0x ) ' % cqltype . title ( ) <nl> else : <nl> rowmap [ name ] = ' null ' <nl> return self . do _ import _ insert ( layout , rowmap ) <nl> diff - - git a / pylib / cqlshlib / displaying . py b / pylib / cqlshlib / displaying . py <nl> index 22ff763 . . 13e3cf4 100644 <nl> - - - a / pylib / cqlshlib / displaying . py <nl> + + + b / pylib / cqlshlib / displaying . py <nl> @ @ - 93 , 7 + 93 , 7 @ @ DEFAULT _ VALUE _ COLORS = dict ( <nl> default = YELLOW , <nl> text = YELLOW , <nl> error = RED , <nl> - hex = DARK _ MAGENTA , <nl> + blob = DARK _ MAGENTA , <nl> timestamp = GREEN , <nl> int = GREEN , <nl> float = GREEN , <nl> @ @ - 107 , 6 + 107 , 6 @ @ DEFAULT _ VALUE _ COLORS = dict ( <nl> <nl> COLUMN _ NAME _ COLORS = defaultdict ( lambda : MAGENTA , <nl> error = RED , <nl> - hex = DARK _ MAGENTA , <nl> + blob = DARK _ MAGENTA , <nl> reset = ANSI _ RESET , <nl> ) <nl> diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py <nl> index a3d4666 . . 87f692b 100644 <nl> - - - a / pylib / cqlshlib / formatting . py <nl> + + + b / pylib / cqlshlib / formatting . py <nl> @ @ - 79 , 7 + 79 , 7 @ @ def color _ text ( bval , colormap , displaywidth = None ) : <nl> <nl> if displaywidth is None : <nl> displaywidth = len ( bval ) <nl> - tbr = _ make _ turn _ bits _ red _ f ( colormap [ ' hex ' ] , colormap [ ' text ' ] ) <nl> + tbr = _ make _ turn _ bits _ red _ f ( colormap [ ' blob ' ] , colormap [ ' text ' ] ) <nl> coloredval = colormap [ ' text ' ] + bits _ to _ turn _ red _ re . sub ( tbr , bval ) + colormap [ ' reset ' ] <nl> if colormap [ ' text ' ] : <nl> displaywidth - = bval . count ( r ' \ \ ' ) <nl> @ @ - 96 , 6 + 96 , 8 @ @ def format _ value _ default ( val , colormap , * * _ ) : <nl> _ formatters = { } <nl> <nl> def format _ value ( cqltype , val , * * kwargs ) : <nl> + if val = = ' ' and not cqltype . empty _ binary _ ok : <nl> + return format _ value _ default ( val , * * kwargs ) <nl> formatter = _ formatters . get ( cqltype . typename , format _ value _ default ) <nl> return formatter ( val , subtypes = cqltype . subtypes , * * kwargs ) <nl> <nl> @ @ - 108 , 7 + 110 , 7 @ @ def formatter _ for ( typname ) : <nl> @ formatter _ for ( ' blob ' ) <nl> def format _ value _ blob ( val , colormap , * * _ ) : <nl> bval = ' 0x ' + ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) <nl> - return colorme ( bval , colormap , ' hex ' ) <nl> + return colorme ( bval , colormap , ' blob ' ) <nl> <nl> def format _ python _ formatted _ type ( val , colormap , color ) : <nl> bval = str ( val ) <nl> diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ output . py b / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> index 6ca251e . . 07abc29 100644 <nl> - - - a / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> + + + b / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> @ @ - 153 , 7 + 153 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> MMMMM <nl> - - - - - - - <nl> <nl> - 4 <nl> + 5 <nl> G <nl> <nl> " " " ) , <nl> @ @ - 371 , 7 + 371 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> self . assertCqlverQueriesGiveColoredOutput ( ( <nl> ( ' ' ' select intcol , bigintcol , varintcol \ <nl> from has _ all _ types \ <nl> - where num in ( 0 , 1 , 2 , 3 ) ; ' ' ' , " " " <nl> + where num in ( 0 , 1 , 2 , 3 , 4 ) ; ' ' ' , " " " <nl> intcol | bigintcol | varintcol <nl> MMMMMM MMMMMMMMM MMMMMMMMM <nl> - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> @ @ - 384 , 12 + 384 , 12 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> GGGGGGGGGGG GGGGGGGGGGGGGGGGGGGG GGGGGGGGGGGGGGGGGGGGGGGGGGG <nl> - 2147483648 | - 9223372036854775808 | - 10000000000000000000000000 <nl> GGGGGGGGGGG GGGGGGGGGGGGGGGGGGGG GGGGGGGGGGGGGGGGGGGGGGGGGGG <nl> - <nl> + | | <nl> " " " ) , <nl> <nl> ( ' ' ' select decimalcol , doublecol , floatcol \ <nl> from has _ all _ types \ <nl> - where num in ( 0 , 1 , 2 , 3 ) ; ' ' ' , " " " <nl> + where num in ( 0 , 1 , 2 , 3 , 4 ) ; ' ' ' , " " " <nl> decimalcol | doublecol | floatcol <nl> MMMMMMMMMM MMMMMMMMM MMMMMMMM <nl> - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - + - - - - - - - - - - <nl> @ @ - 402 , 7 + 402 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> GGGGGGGGGGGGGGGG GGGGGGG GGGGG <nl> 10 . 0000000000000 | - 1004 . 1 | 1e + 08 <nl> GGGGGGGGGGGGGGGG GGGGGGG GGGGG <nl> - <nl> + | | <nl> " " " ) , <nl> ) , cqlver = ( 2 , 3 ) ) <nl> <nl> diff - - git a / pylib / cqlshlib / test / test _ keyspace _ init2 . cql b / pylib / cqlshlib / test / test _ keyspace _ init2 . cql <nl> index ca5f4a4 . . 7194e8a 100644 <nl> - - - a / pylib / cqlshlib / test / test _ keyspace _ init2 . cql <nl> + + + b / pylib / cqlshlib / test / test _ keyspace _ init2 . cql <nl> @ @ - 44 , 6 + 44 , 10 @ @ VALUES ( 3 , - 2147483648 , ' ' ' ' ' ' ' ' , - 9223372036854775808 , ' 80 ' , ' false ' , <nl> 10 . 0000000000000 , - 1004 . 10 , 100000000 . 9 , ' 龍 馭 鬱 ' , ' 2038 - 01 - 19T03 : 14 - 1200 ' , <nl> ffffffff - ffff - 1fff - 8fff - ffffffffffff , ' ' ' ' , - 10000000000000000000000000 ) ; <nl> <nl> + INSERT INTO has _ all _ types ( num , intcol , asciicol , bigintcol , blobcol , booleancol , <nl> + decimalcol , doublecol , floatcol , textcol , <nl> + timestampcol , uuidcol , varcharcol , varintcol ) <nl> + VALUES ( 4 , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' ) ; <nl> <nl> <nl> CREATE TABLE has _ value _ encoding _ errors (

TEST DIFF:
diff - - git a / bin / cqlsh . py b / bin / cqlsh . py 
 index 027a45e . . a5a2bfa 100644 
 - - - a / bin / cqlsh . py 
 + + + b / bin / cqlsh . py 
 @ @ - 2330 , 7 + 2330 , 7 @ @ class ImportProcess ( mp . Process ) : 
 table _ meta = new _ cluster . metadata . keyspaces [ self . ks ] . tables [ self . cf ] 
 
 pk _ cols = [ col . name for col in table _ meta . primary _ key ] 
 - cqltypes = [ table _ meta . columns [ name ] . typestring for name in self . columns ] 
 + cqltypes = [ table _ meta . columns [ name ] . cql _ type for name in self . columns ] 
 pk _ indexes = [ self . columns . index ( col . name ) for col in table _ meta . primary _ key ] 
 is _ counter _ table = ( " counter " in cqltypes ) 
 
 diff - - git a / lib / cassandra - driver - internal - only - 3 . 0 . 0 - 6af642d . zip b / lib / cassandra - driver - internal - only - 3 . 0 . 0 - 6af642d . zip 
 new file mode 100644 
 index 0000000 . . 507370b 
 Binary files / dev / null and b / lib / cassandra - driver - internal - only - 3 . 0 . 0 - 6af642d . zip differ 
 diff - - git a / lib / cassandra - driver - internal - only - 3 . 0 . 0a3 . post0 - c535450 . zip b / lib / cassandra - driver - internal - only - 3 . 0 . 0a3 . post0 - c535450 . zip 
 deleted file mode 100644 
 index 9c75cd6 . . 0000000 
 Binary files a / lib / cassandra - driver - internal - only - 3 . 0 . 0a3 . post0 - c535450 . zip and / dev / null differ 
 diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py 
 index aed7d01 . . 4c21f7a 100644 
 - - - a / pylib / cqlshlib / cql3handling . py 
 + + + b / pylib / cqlshlib / cql3handling . py 
 @ @ - 767 , 21 + 767 , 20 @ @ def relation _ token _ subject _ completer ( ctxt , cass ) : 
 @ completer _ for ( ' relation ' , ' rel _ lhs ' ) 
 def select _ relation _ lhs _ completer ( ctxt , cass ) : 
 layout = get _ table _ meta ( ctxt , cass ) 
 - filterable = set ( ( layout . partition _ key [ 0 ] . name , layout . clustering _ key [ 0 ] . name ) ) 
 + filterable = set ( ) 
 already _ filtered _ on = map ( dequote _ name , ctxt . get _ binding ( ' rel _ lhs ' , ( ) ) ) 
 - for num in range ( 1 , len ( layout . partition _ key ) ) : 
 - if layout . partition _ key [ num - 1 ] . name in already _ filtered _ on : 
 + for num in range ( 0 , len ( layout . partition _ key ) ) : 
 + if num = = 0 or layout . partition _ key [ num - 1 ] . name in already _ filtered _ on : 
 filterable . add ( layout . partition _ key [ num ] . name ) 
 else : 
 break 
 - for num in range ( 1 , len ( layout . clustering _ key ) ) : 
 - if layout . clustering _ key [ num - 1 ] . name in already _ filtered _ on : 
 + for num in range ( 0 , len ( layout . clustering _ key ) ) : 
 + if num = = 0 or layout . clustering _ key [ num - 1 ] . name in already _ filtered _ on : 
 filterable . add ( layout . clustering _ key [ num ] . name ) 
 else : 
 break 
 - for cd in layout . columns . values ( ) : 
 - if cd . index : 
 - filterable . add ( cd . name ) 
 + for idx in layout . indexes . itervalues ( ) : 
 + filterable . add ( idx . index _ options [ " target " ] ) 
 return map ( maybe _ escape _ name , filterable ) 
 
 explain _ completion ( ' selector ' , ' colname ' ) 
 @ @ - 830 , 16 + 829 , 16 @ @ def insert _ newval _ completer ( ctxt , cass ) : 
 if len ( valuesdone ) > = len ( insertcols ) : 
 return [ ] 
 curcol = insertcols [ len ( valuesdone ) ] 
 - cqltype = layout . columns [ curcol ] . data _ type 
 - coltype = cqltype . typename 
 + coltype = layout . columns [ curcol ] . cql _ type 
 if coltype in ( ' map ' , ' set ' ) : 
 return [ ' { ' ] 
 if coltype = = ' list ' : 
 return [ ' [ ' ] 
 if coltype = = ' boolean ' : 
 return [ ' true ' , ' false ' ] 
 + 
 return [ Hint ( ' < value for % s ( % s ) > ' % ( maybe _ escape _ name ( curcol ) , 
 - cqltype . cql _ parameterized _ type ( ) ) ) ] 
 + coltype ) ) ] 
 
 
 @ completer _ for ( ' insertStatement ' , ' valcomma ' ) 
 @ @ - 899 , 29 + 898 , 28 @ @ def update _ col _ completer ( ctxt , cass ) : 
 def update _ countername _ completer ( ctxt , cass ) : 
 layout = get _ table _ meta ( ctxt , cass ) 
 curcol = dequote _ name ( ctxt . get _ binding ( ' updatecol ' , ' ' ) ) 
 - cqltype = layout . columns [ curcol ] . data _ type 
 - coltype = cqltype . typename 
 + coltype = layout . columns [ curcol ] . cql _ type 
 if coltype = = ' counter ' : 
 return [ maybe _ escape _ name ( curcol ) ] 
 if coltype in ( ' map ' , ' set ' ) : 
 return [ " { " ] 
 if coltype = = ' list ' : 
 return [ " [ " ] 
 - return [ Hint ( ' < term ( % s ) > ' % cqltype . cql _ parameterized _ type ( ) ) ] 
 + return [ Hint ( ' < term ( % s ) > ' % coltype ) ] 
 
 
 @ completer _ for ( ' assignment ' , ' counterop ' ) 
 def update _ counterop _ completer ( ctxt , cass ) : 
 layout = get _ table _ meta ( ctxt , cass ) 
 curcol = dequote _ name ( ctxt . get _ binding ( ' updatecol ' , ' ' ) ) 
 - return [ ' + ' , ' - ' ] if layout . columns [ curcol ] . data _ type . typename = = ' counter ' else [ ] 
 + return [ ' + ' , ' - ' ] if layout . columns [ curcol ] . cql _ type = = ' counter ' else [ ] 
 
 
 @ completer _ for ( ' assignment ' , ' inc ' ) 
 def update _ counter _ inc _ completer ( ctxt , cass ) : 
 layout = get _ table _ meta ( ctxt , cass ) 
 curcol = dequote _ name ( ctxt . get _ binding ( ' updatecol ' , ' ' ) ) 
 - if layout . columns [ curcol ] . data _ type . typename = = ' counter ' : 
 + if layout . columns [ curcol ] . cql _ type = = ' counter ' : 
 return [ Hint ( ' < wholenumber > ' ) ] 
 return [ ] 
 
 @ @ - 947 , 7 + 945 , 7 @ @ def update _ listcol _ completer ( ctxt , cass ) : 
 def update _ indexbracket _ completer ( ctxt , cass ) : 
 layout = get _ table _ meta ( ctxt , cass ) 
 curcol = dequote _ name ( ctxt . get _ binding ( ' updatecol ' , ' ' ) ) 
 - coltype = layout . columns [ curcol ] . data _ type . typename 
 + coltype = layout . columns [ curcol ] . cql _ type 
 if coltype in ( ' map ' , ' list ' ) : 
 return [ ' [ ' ] 
 return [ ] 
 @ @ - 1174 , 8 + 1172 , 10 @ @ explain _ completion ( ' createUserTypeStatement ' , ' newcol ' , ' < new _ field _ name > ' ) 
 
 @ completer _ for ( ' createIndexStatement ' , ' col ' ) 
 def create _ index _ col _ completer ( ctxt , cass ) : 
 + " " " Return the columns for which an index doesn ' t exist yet . " " " 
 layout = get _ table _ meta ( ctxt , cass ) 
 - colnames = [ cd . name for cd in layout . columns . values ( ) if not cd . index ] 
 + idx _ targets = [ idx . index _ options [ " target " ] for idx in layout . indexes . itervalues ( ) ] 
 + colnames = [ cd . name for cd in layout . columns . values ( ) if cd . name not in idx _ targets ] 
 return map ( maybe _ escape _ name , colnames ) 
 
 syntax _ rules + = r ' ' ' 
 diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ completion . py b / pylib / cqlshlib / test / test _ cqlsh _ completion . py 
 index 7cf583d . . e5eb9e1 100644 
 - - - a / pylib / cqlshlib / test / test _ cqlsh _ completion . py 
 + + + b / pylib / cqlshlib / test / test _ cqlsh _ completion . py 
 @ @ - 341 , 18 + 341 , 18 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : 
 self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' " , 
 choices = [ ' , ' , ' WHERE ' ] ) 
 self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' WHERE " , 
 - choices = [ ' TOKEN ( ' , ' < identifier > ' , ' < quotedName > ' ] ) 
 + choices = [ ' TOKEN ( ' , ' lonelykey ' ] ) 
 self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' WHERE " , 
 - choices = [ ' TOKEN ( ' , ' < identifier > ' , ' < quotedName > ' ] ) 
 + choices = [ ' TOKEN ( ' , ' lonelykey ' ] ) 
 
 self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' WHERE lonel " , 
 - choices = [ ' < quotedName > ' , ' < identifier > ' ] ) 
 + immediate = ' ykey ' ) 
 self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' WHERE lonelykey " , 
 choices = [ ' = ' , ' < = ' , ' > = ' , ' > ' , ' < ' , ' CONTAINS ' , ' IN ' , ' [ ' ] ) 
 self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' WHERE lonelykey = 0 . 0 " , 
 choices = [ ' AND ' , ' IF ' , ' ; ' ] ) 
 self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' WHERE lonelykey = 0 . 0 AND " , 
 - choices = [ ' TOKEN ( ' , ' < identifier > ' , ' < quotedName > ' ] ) 
 + choices = [ ' TOKEN ( ' , ' lonelykey ' ] ) 
 
 self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' WHERE TOKEN ( lonelykey " , 
 choices = [ ' , ' , ' ) ' ] ) 
 @ @ - 654 , 7 + 654 , 8 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : 
 choices = [ ' base _ time _ seconds ' , ' max _ sstable _ age _ days ' , 
 ' timestamp _ resolution ' , ' min _ threshold ' , ' class ' , ' max _ threshold ' , 
 ' tombstone _ compaction _ interval ' , ' tombstone _ threshold ' , 
 - ' enabled ' , ' unchecked _ tombstone _ compaction ' ] ) 
 + ' enabled ' , ' unchecked _ tombstone _ compaction ' , 
 + ' max _ window _ size _ seconds ' ] ) 
 
 def test _ complete _ in _ create _ columnfamily ( self ) : 
 self . trycompletions ( ' CREATE C ' , choices = [ ' COLUMNFAMILY ' , ' CUSTOM ' ] ) 
 diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ output . py b / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 index 3246541 . . 7a2fc86 100644 
 - - - a / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 + + + b / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 @ @ - 369 , 21 + 369 , 6 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 " " " ) , 
 ) , env = { ' TZ ' : ' Etc / UTC ' } ) 
 
 - self . assertQueriesGiveColoredOutput ( ( 
 - ( ' ' ' select timestampcol from has _ all _ types where num = 0 ; ' ' ' , " " " 
 - timestampcol 
 - MMMMMMMMMMMM 
 - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 - 
 - 2012 - 05 - 14 07 : 53 : 20 - 0500 
 - GGGGGGGGGGGGGGGGGGGGGGGG 
 - 
 - 
 - ( 1 rows ) 
 - nnnnnnnn 
 - " " " ) , 
 - ) , env = { ' TZ ' : ' EST ' } ) 
 - 
 def test _ boolean _ output ( self ) : 
 self . assertCqlverQueriesGiveColoredOutput ( ( 
 ( ' select num , booleancol from has _ all _ types where num in ( 0 , 1 , 2 , 3 ) ; ' , " " "

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 24d4c9e . . e7e8652 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 1 . 2 . 7 
 * Fix serialization of the LEFT gossip value ( CASSANDRA - 5696 ) 
 * Pig : support for cql3 tables ( CASSANDRA - 5234 ) 
 + * cqlsh : Don ' t show ' null ' in place of empty values ( CASSANDRA - 5675 ) 
 
 1 . 2 . 6 
 * Fix tracing when operation completes before all responses arrive ( CASSANDRA - 5668 ) 
 diff - - git a / bin / cqlsh b / bin / cqlsh 
 index 70b70f5 . . 9f1e6cf 100755 
 - - - a / bin / cqlsh 
 + + + b / bin / cqlsh 
 @ @ - 567 , 6 + 567 , 17 @ @ class Shell ( cmd . Cmd ) : 
 def myformat _ colname ( self , name , nametype ) : 
 return self . myformat _ value ( name , nametype , colormap = COLUMN _ NAME _ COLORS ) 
 
 + # cql / cursor . py : Cursor . decode _ row ( ) function , modified to not turn ' ' into None . 
 + def decode _ row ( self , cursor , row ) : 
 + values = [ ] 
 + bytevals = cursor . columnvalues ( row ) 
 + for val , vtype , nameinfo in zip ( bytevals , cursor . column _ types , cursor . name _ info ) : 
 + if val = = ' ' : 
 + values . append ( val ) 
 + else : 
 + values . append ( cursor . decoder . decode _ value ( val , vtype , nameinfo [ 0 ] ) ) 
 + return values 
 + 
 def report _ connection ( self ) : 
 self . show _ host ( ) 
 self . show _ version ( ) 
 @ @ - 1115 , 7 + 1126 , 7 @ @ class Shell ( cmd . Cmd ) : 
 colnames = [ d [ 0 ] for d in cursor . description ] 
 colnames _ t = [ ( name , self . get _ nametype ( cursor , n ) ) for ( n , name ) in enumerate ( colnames ) ] 
 formatted _ names = [ self . myformat _ colname ( name , nametype ) for ( name , nametype ) in colnames _ t ] 
 - formatted _ values = [ map ( self . myformat _ value , row , cursor . column _ types ) for row in cursor ] 
 + formatted _ values = [ map ( self . myformat _ value , self . decode _ row ( cursor , row ) , cursor . column _ types ) for row in cursor . result ] 
 if self . expand _ enabled : 
 self . print _ formatted _ result _ vertically ( formatted _ names , formatted _ values ) 
 else : 
 @ @ - 1153 , 11 + 1164 , 12 @ @ class Shell ( cmd . Cmd ) : 
 self . writeresult ( ' ' ) 
 
 def print _ dynamic _ result ( self , cursor ) : 
 - for row in cursor : 
 + for row in cursor . result : 
 + cursor . fetchone ( ) 
 colnames = [ d [ 0 ] for d in cursor . description ] 
 colnames _ t = [ ( name , self . get _ nametype ( cursor , n ) ) for ( n , name ) in enumerate ( colnames ) ] 
 colnames = [ self . myformat _ colname ( name , nametype ) for ( name , nametype ) in colnames _ t ] 
 - colvals = map ( self . myformat _ value , row , cursor . column _ types ) 
 + colvals = map ( self . myformat _ value , self . decode _ row ( cursor , row ) , cursor . column _ types ) 
 line = ' | ' . join ( ' % s , % s ' % ( n . coloredval , v . coloredval ) for ( n , v ) in zip ( colnames , colvals ) ) 
 self . writeresult ( ' ' + line ) 
 
 @ @ - 1680 , 14 + 1692 , 18 @ @ class Shell ( cmd . Cmd ) : 
 def do _ import _ row ( self , columns , nullval , layout , row ) : 
 rowmap = { } 
 for name , value in zip ( columns , row ) : 
 + type = layout . get _ column ( name ) . cqltype 
 + if issubclass ( type , ReversedType ) : 
 + type = type . subtypes [ 0 ] 
 + cqltype = type . cql _ parameterized _ type ( ) 
 + 
 if value ! = nullval : 
 - type = layout . get _ column ( name ) . cqltype 
 - if issubclass ( type , ReversedType ) : 
 - type = type . subtypes [ 0 ] 
 - if type . cql _ parameterized _ type ( ) in ( ' ascii ' , ' text ' , ' timestamp ' , ' inet ' ) : 
 + if cqltype in ( ' ascii ' , ' text ' , ' timestamp ' , ' inet ' ) : 
 rowmap [ name ] = self . cql _ protect _ value ( value ) 
 else : 
 rowmap [ name ] = value 
 + elif name in layout . column _ aliases and not type . empty _ binary _ ok : 
 + rowmap [ name ] = ' blobAs % s ( 0x ) ' % cqltype . title ( ) 
 else : 
 rowmap [ name ] = ' null ' 
 return self . do _ import _ insert ( layout , rowmap ) 
 diff - - git a / pylib / cqlshlib / displaying . py b / pylib / cqlshlib / displaying . py 
 index 22ff763 . . 13e3cf4 100644 
 - - - a / pylib / cqlshlib / displaying . py 
 + + + b / pylib / cqlshlib / displaying . py 
 @ @ - 93 , 7 + 93 , 7 @ @ DEFAULT _ VALUE _ COLORS = dict ( 
 default = YELLOW , 
 text = YELLOW , 
 error = RED , 
 - hex = DARK _ MAGENTA , 
 + blob = DARK _ MAGENTA , 
 timestamp = GREEN , 
 int = GREEN , 
 float = GREEN , 
 @ @ - 107 , 6 + 107 , 6 @ @ DEFAULT _ VALUE _ COLORS = dict ( 
 
 COLUMN _ NAME _ COLORS = defaultdict ( lambda : MAGENTA , 
 error = RED , 
 - hex = DARK _ MAGENTA , 
 + blob = DARK _ MAGENTA , 
 reset = ANSI _ RESET , 
 ) 
 diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py 
 index a3d4666 . . 87f692b 100644 
 - - - a / pylib / cqlshlib / formatting . py 
 + + + b / pylib / cqlshlib / formatting . py 
 @ @ - 79 , 7 + 79 , 7 @ @ def color _ text ( bval , colormap , displaywidth = None ) : 
 
 if displaywidth is None : 
 displaywidth = len ( bval ) 
 - tbr = _ make _ turn _ bits _ red _ f ( colormap [ ' hex ' ] , colormap [ ' text ' ] ) 
 + tbr = _ make _ turn _ bits _ red _ f ( colormap [ ' blob ' ] , colormap [ ' text ' ] ) 
 coloredval = colormap [ ' text ' ] + bits _ to _ turn _ red _ re . sub ( tbr , bval ) + colormap [ ' reset ' ] 
 if colormap [ ' text ' ] : 
 displaywidth - = bval . count ( r ' \ \ ' ) 
 @ @ - 96 , 6 + 96 , 8 @ @ def format _ value _ default ( val , colormap , * * _ ) : 
 _ formatters = { } 
 
 def format _ value ( cqltype , val , * * kwargs ) : 
 + if val = = ' ' and not cqltype . empty _ binary _ ok : 
 + return format _ value _ default ( val , * * kwargs ) 
 formatter = _ formatters . get ( cqltype . typename , format _ value _ default ) 
 return formatter ( val , subtypes = cqltype . subtypes , * * kwargs ) 
 
 @ @ - 108 , 7 + 110 , 7 @ @ def formatter _ for ( typname ) : 
 @ formatter _ for ( ' blob ' ) 
 def format _ value _ blob ( val , colormap , * * _ ) : 
 bval = ' 0x ' + ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) 
 - return colorme ( bval , colormap , ' hex ' ) 
 + return colorme ( bval , colormap , ' blob ' ) 
 
 def format _ python _ formatted _ type ( val , colormap , color ) : 
 bval = str ( val ) 
 diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ output . py b / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 index 6ca251e . . 07abc29 100644 
 - - - a / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 + + + b / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 @ @ - 153 , 7 + 153 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 MMMMM 
 - - - - - - - 
 
 - 4 
 + 5 
 G 
 
 " " " ) , 
 @ @ - 371 , 7 + 371 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 self . assertCqlverQueriesGiveColoredOutput ( ( 
 ( ' ' ' select intcol , bigintcol , varintcol \ 
 from has _ all _ types \ 
 - where num in ( 0 , 1 , 2 , 3 ) ; ' ' ' , " " " 
 + where num in ( 0 , 1 , 2 , 3 , 4 ) ; ' ' ' , " " " 
 intcol | bigintcol | varintcol 
 MMMMMM MMMMMMMMM MMMMMMMMM 
 - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 @ @ - 384 , 12 + 384 , 12 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 GGGGGGGGGGG GGGGGGGGGGGGGGGGGGGG GGGGGGGGGGGGGGGGGGGGGGGGGGG 
 - 2147483648 | - 9223372036854775808 | - 10000000000000000000000000 
 GGGGGGGGGGG GGGGGGGGGGGGGGGGGGGG GGGGGGGGGGGGGGGGGGGGGGGGGGG 
 - 
 + | | 
 " " " ) , 
 
 ( ' ' ' select decimalcol , doublecol , floatcol \ 
 from has _ all _ types \ 
 - where num in ( 0 , 1 , 2 , 3 ) ; ' ' ' , " " " 
 + where num in ( 0 , 1 , 2 , 3 , 4 ) ; ' ' ' , " " " 
 decimalcol | doublecol | floatcol 
 MMMMMMMMMM MMMMMMMMM MMMMMMMM 
 - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - + - - - - - - - - - - 
 @ @ - 402 , 7 + 402 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 GGGGGGGGGGGGGGGG GGGGGGG GGGGG 
 10 . 0000000000000 | - 1004 . 1 | 1e + 08 
 GGGGGGGGGGGGGGGG GGGGGGG GGGGG 
 - 
 + | | 
 " " " ) , 
 ) , cqlver = ( 2 , 3 ) ) 
 
 diff - - git a / pylib / cqlshlib / test / test _ keyspace _ init2 . cql b / pylib / cqlshlib / test / test _ keyspace _ init2 . cql 
 index ca5f4a4 . . 7194e8a 100644 
 - - - a / pylib / cqlshlib / test / test _ keyspace _ init2 . cql 
 + + + b / pylib / cqlshlib / test / test _ keyspace _ init2 . cql 
 @ @ - 44 , 6 + 44 , 10 @ @ VALUES ( 3 , - 2147483648 , ' ' ' ' ' ' ' ' , - 9223372036854775808 , ' 80 ' , ' false ' , 
 10 . 0000000000000 , - 1004 . 10 , 100000000 . 9 , ' 龍 馭 鬱 ' , ' 2038 - 01 - 19T03 : 14 - 1200 ' , 
 ffffffff - ffff - 1fff - 8fff - ffffffffffff , ' ' ' ' , - 10000000000000000000000000 ) ; 
 
 + INSERT INTO has _ all _ types ( num , intcol , asciicol , bigintcol , blobcol , booleancol , 
 + decimalcol , doublecol , floatcol , textcol , 
 + timestampcol , uuidcol , varcharcol , varintcol ) 
 + VALUES ( 4 , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' ) ; 
 
 
 CREATE TABLE has _ value _ encoding _ errors (
