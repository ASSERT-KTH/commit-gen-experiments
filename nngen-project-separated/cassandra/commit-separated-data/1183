BLEU SCORE: 0.03283637368030199

TEST MSG: Notify indexers of partition deletion during cleanup
GENERATED MSG: merge from 2 . 1

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f00b36d . . f214200 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 1 <nl> + * Notify indexers of partition delete during cleanup ( CASSANDRA - 10685 ) <nl> * Keep the file open in trySkipCache ( CASSANDRA - 10669 ) <nl> * Updated trigger example ( CASSANDRA - 10257 ) <nl> Merged from 2 . 2 : <nl> diff - - git a / src / java / org / apache / cassandra / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / index / SecondaryIndexManager . java <nl> index 92b04fe . . db53c25 100644 <nl> - - - a / src / java / org / apache / cassandra / index / SecondaryIndexManager . java <nl> + + + b / src / java / org / apache / cassandra / index / SecondaryIndexManager . java <nl> @ @ - 530 , 7 + 530 , 7 @ @ public class SecondaryIndexManager implements IndexRegistry <nl> partition . columns ( ) , <nl> nowInSec ) ; <nl> indexTransaction . start ( ) ; <nl> - indexTransaction . onPartitionDeletion ( partition . partitionLevelDeletion ( ) ) ; <nl> + indexTransaction . onPartitionDeletion ( new DeletionTime ( FBUtilities . timestampMicros ( ) , nowInSec ) ) ; <nl> indexTransaction . commit ( ) ; <nl> <nl> while ( partition . hasNext ( ) ) <nl> @ @ - 978 , 8 + 978 , 13 @ @ public class SecondaryIndexManager implements IndexRegistry <nl> { <nl> Index . Indexer indexer = index . indexerFor ( key , nowInSec , opGroup , Type . CLEANUP ) ; <nl> indexer . begin ( ) ; <nl> + <nl> + if ( partitionDelete ! = null ) <nl> + indexer . partitionDelete ( partitionDelete ) ; <nl> + <nl> if ( row ! = null ) <nl> indexer . removeRow ( row ) ; <nl> + <nl> indexer . finish ( ) ; <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / index / CustomIndexTest . java b / test / unit / org / apache / cassandra / index / CustomIndexTest . java <nl> index b372c59 . . b305868 100644 <nl> - - - a / test / unit / org / apache / cassandra / index / CustomIndexTest . java <nl> + + + b / test / unit / org / apache / cassandra / index / CustomIndexTest . java <nl> @ @ - 9 , 6 + 9 , 7 @ @ import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import org . junit . Test ; <nl> <nl> + import org . apache . cassandra . Util ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . cql3 . CQLTester ; <nl> import org . apache . cassandra . cql3 . ColumnIdentifier ; <nl> @ @ - 18 , 12 + 19 , 15 @ @ import org . apache . cassandra . cql3 . statements . ModificationStatement ; <nl> import org . apache . cassandra . cql3 . statements . SelectStatement ; <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . ReadCommand ; <nl> + import org . apache . cassandra . db . ReadOrderGroup ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . db . marshal . Int32Type ; <nl> import org . apache . cassandra . db . marshal . UTF8Type ; <nl> + import org . apache . cassandra . db . partitions . UnfilteredPartitionIterator ; <nl> import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> import org . apache . cassandra . schema . IndexMetadata ; <nl> import org . apache . cassandra . schema . Indexes ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> import static org . apache . cassandra . Util . throwAssert ; <nl> import static org . apache . cassandra . cql3 . statements . IndexTarget . CUSTOM _ INDEX _ OPTION _ NAME ; <nl> @ @ - 471 , 6 + 475 , 35 @ @ public class CustomIndexTest extends CQLTester <nl> assertEquals ( 1 , index . reloads . get ( ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void notifyIndexersOfPartitionAndRowRemovalDuringCleanup ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int , c int , v int , PRIMARY KEY ( k , c ) ) " ) ; <nl> + createIndex ( String . format ( " CREATE CUSTOM INDEX cleanup _ index ON % % s ( ) USING ' % s ' " , StubIndex . class . getName ( ) ) ) ; <nl> + ColumnFamilyStore cfs = getCurrentColumnFamilyStore ( ) ; <nl> + StubIndex index = ( StubIndex ) cfs . indexManager . getIndexByName ( " cleanup _ index " ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , c , v ) VALUES ( ? , ? , ? ) " , 0 , 0 , 0 ) ; <nl> + execute ( " INSERT INTO % s ( k , c , v ) VALUES ( ? , ? , ? ) " , 0 , 1 , 1 ) ; <nl> + execute ( " INSERT INTO % s ( k , c , v ) VALUES ( ? , ? , ? ) " , 0 , 2 , 2 ) ; <nl> + execute ( " INSERT INTO % s ( k , c , v ) VALUES ( ? , ? , ? ) " , 3 , 3 , 3 ) ; <nl> + assertEquals ( 4 , index . rowsInserted . size ( ) ) ; <nl> + assertEquals ( 0 , index . partitionDeletions . size ( ) ) ; <nl> + <nl> + ReadCommand cmd = Util . cmd ( cfs , 0 ) . build ( ) ; <nl> + try ( ReadOrderGroup orderGroup = cmd . startOrderGroup ( ) ; <nl> + UnfilteredPartitionIterator iterator = cmd . executeLocally ( orderGroup ) ) <nl> + { <nl> + assertTrue ( iterator . hasNext ( ) ) ; <nl> + cfs . indexManager . deletePartition ( iterator . next ( ) , FBUtilities . nowInSeconds ( ) ) ; <nl> + } <nl> + <nl> + assertEquals ( 1 , index . partitionDeletions . size ( ) ) ; <nl> + assertEquals ( 3 , index . rowsDeleted . size ( ) ) ; <nl> + for ( int i = 0 ; i < 3 ; i + + ) <nl> + assertEquals ( index . rowsDeleted . get ( i ) . clustering ( ) , index . rowsInserted . get ( i ) . clustering ( ) ) ; <nl> + } <nl> + <nl> private void testCreateIndex ( String indexName , String . . . targetColumnNames ) throws Throwable <nl> { <nl> createIndex ( String . format ( " CREATE CUSTOM INDEX % s ON % % s ( % s ) USING ' % s ' " ,
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f00b36d . . f214200 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 1 
 + * Notify indexers of partition delete during cleanup ( CASSANDRA - 10685 ) 
 * Keep the file open in trySkipCache ( CASSANDRA - 10669 ) 
 * Updated trigger example ( CASSANDRA - 10257 ) 
 Merged from 2 . 2 : 
 diff - - git a / src / java / org / apache / cassandra / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / index / SecondaryIndexManager . java 
 index 92b04fe . . db53c25 100644 
 - - - a / src / java / org / apache / cassandra / index / SecondaryIndexManager . java 
 + + + b / src / java / org / apache / cassandra / index / SecondaryIndexManager . java 
 @ @ - 530 , 7 + 530 , 7 @ @ public class SecondaryIndexManager implements IndexRegistry 
 partition . columns ( ) , 
 nowInSec ) ; 
 indexTransaction . start ( ) ; 
 - indexTransaction . onPartitionDeletion ( partition . partitionLevelDeletion ( ) ) ; 
 + indexTransaction . onPartitionDeletion ( new DeletionTime ( FBUtilities . timestampMicros ( ) , nowInSec ) ) ; 
 indexTransaction . commit ( ) ; 
 
 while ( partition . hasNext ( ) ) 
 @ @ - 978 , 8 + 978 , 13 @ @ public class SecondaryIndexManager implements IndexRegistry 
 { 
 Index . Indexer indexer = index . indexerFor ( key , nowInSec , opGroup , Type . CLEANUP ) ; 
 indexer . begin ( ) ; 
 + 
 + if ( partitionDelete ! = null ) 
 + indexer . partitionDelete ( partitionDelete ) ; 
 + 
 if ( row ! = null ) 
 indexer . removeRow ( row ) ; 
 + 
 indexer . finish ( ) ; 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / index / CustomIndexTest . java b / test / unit / org / apache / cassandra / index / CustomIndexTest . java 
 index b372c59 . . b305868 100644 
 - - - a / test / unit / org / apache / cassandra / index / CustomIndexTest . java 
 + + + b / test / unit / org / apache / cassandra / index / CustomIndexTest . java 
 @ @ - 9 , 6 + 9 , 7 @ @ import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 import org . junit . Test ; 
 
 + import org . apache . cassandra . Util ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . cql3 . CQLTester ; 
 import org . apache . cassandra . cql3 . ColumnIdentifier ; 
 @ @ - 18 , 12 + 19 , 15 @ @ import org . apache . cassandra . cql3 . statements . ModificationStatement ; 
 import org . apache . cassandra . cql3 . statements . SelectStatement ; 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . ReadCommand ; 
 + import org . apache . cassandra . db . ReadOrderGroup ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . db . marshal . Int32Type ; 
 import org . apache . cassandra . db . marshal . UTF8Type ; 
 + import org . apache . cassandra . db . partitions . UnfilteredPartitionIterator ; 
 import org . apache . cassandra . exceptions . InvalidRequestException ; 
 import org . apache . cassandra . schema . IndexMetadata ; 
 import org . apache . cassandra . schema . Indexes ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 
 import static org . apache . cassandra . Util . throwAssert ; 
 import static org . apache . cassandra . cql3 . statements . IndexTarget . CUSTOM _ INDEX _ OPTION _ NAME ; 
 @ @ - 471 , 6 + 475 , 35 @ @ public class CustomIndexTest extends CQLTester 
 assertEquals ( 1 , index . reloads . get ( ) ) ; 
 } 
 
 + @ Test 
 + public void notifyIndexersOfPartitionAndRowRemovalDuringCleanup ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k int , c int , v int , PRIMARY KEY ( k , c ) ) " ) ; 
 + createIndex ( String . format ( " CREATE CUSTOM INDEX cleanup _ index ON % % s ( ) USING ' % s ' " , StubIndex . class . getName ( ) ) ) ; 
 + ColumnFamilyStore cfs = getCurrentColumnFamilyStore ( ) ; 
 + StubIndex index = ( StubIndex ) cfs . indexManager . getIndexByName ( " cleanup _ index " ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , c , v ) VALUES ( ? , ? , ? ) " , 0 , 0 , 0 ) ; 
 + execute ( " INSERT INTO % s ( k , c , v ) VALUES ( ? , ? , ? ) " , 0 , 1 , 1 ) ; 
 + execute ( " INSERT INTO % s ( k , c , v ) VALUES ( ? , ? , ? ) " , 0 , 2 , 2 ) ; 
 + execute ( " INSERT INTO % s ( k , c , v ) VALUES ( ? , ? , ? ) " , 3 , 3 , 3 ) ; 
 + assertEquals ( 4 , index . rowsInserted . size ( ) ) ; 
 + assertEquals ( 0 , index . partitionDeletions . size ( ) ) ; 
 + 
 + ReadCommand cmd = Util . cmd ( cfs , 0 ) . build ( ) ; 
 + try ( ReadOrderGroup orderGroup = cmd . startOrderGroup ( ) ; 
 + UnfilteredPartitionIterator iterator = cmd . executeLocally ( orderGroup ) ) 
 + { 
 + assertTrue ( iterator . hasNext ( ) ) ; 
 + cfs . indexManager . deletePartition ( iterator . next ( ) , FBUtilities . nowInSeconds ( ) ) ; 
 + } 
 + 
 + assertEquals ( 1 , index . partitionDeletions . size ( ) ) ; 
 + assertEquals ( 3 , index . rowsDeleted . size ( ) ) ; 
 + for ( int i = 0 ; i < 3 ; i + + ) 
 + assertEquals ( index . rowsDeleted . get ( i ) . clustering ( ) , index . rowsInserted . get ( i ) . clustering ( ) ) ; 
 + } 
 + 
 private void testCreateIndex ( String indexName , String . . . targetColumnNames ) throws Throwable 
 { 
 createIndex ( String . format ( " CREATE CUSTOM INDEX % s ON % % s ( % s ) USING ' % s ' " ,

NEAREST DIFF:
ELIMINATEDSENTENCE
