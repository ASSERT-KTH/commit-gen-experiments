BLEU SCORE: 0.013139808552042212

TEST MSG: Doc change : Describe replacement cases based on CASSANDRA - 8523 and CASSANDRA - 12344
GENERATED MSG: improve streaming comments

TEST DIFF (one line): diff - - git a / doc / source / operating / topo _ changes . rst b / doc / source / operating / topo _ changes . rst <nl> index c42708e . . 6c8f8ec 100644 <nl> - - - a / doc / source / operating / topo _ changes . rst <nl> + + + b / doc / source / operating / topo _ changes . rst <nl> @ @ - 98 , 16 + 98 , 21 @ @ Replacing a dead node <nl> <nl> In order to replace a dead node , start cassandra with the JVM startup flag <nl> ` ` - Dcassandra . replace _ address _ first _ boot = < dead _ node _ ip > ` ` . Once this property is enabled the node starts in a hibernate <nl> - state , during which all the other nodes will see this node to be down . <nl> + state , during which all the other nodes will see this node to be DOWN ( DN ) , however this node will see itself as UP <nl> + ( UN ) . Accurate replacement state can be found in ` ` nodetool netstats ` ` . <nl> <nl> - The replacing node will now start to bootstrap the data from the rest of the nodes in the cluster . The main difference <nl> - between normal bootstrapping of a new node is that this new node will not accept any writes during this phase . <nl> + The replacing node will now start to bootstrap the data from the rest of the nodes in the cluster . A replacing node will <nl> + only receive writes during the bootstrapping phase if it has a different ip address to the node that is being replaced . <nl> + ( See CASSANDRA - 8523 and CASSANDRA - 12344 ) <nl> <nl> - Once the bootstrapping is complete the node will be marked " UP " , we rely on the hinted handoff ' s for making this node <nl> - consistent ( since we don ' t accept writes since the start of the bootstrap ) . <nl> + Once the bootstrapping is complete the node will be marked " UP " . <nl> <nl> - . . Note : : If the replacement process takes longer than ` ` max _ hint _ window _ in _ ms ` ` you * * MUST * * run repair to make the <nl> - replaced node consistent again , since it missed ongoing writes during bootstrapping . <nl> + . . Note : : If any of the following cases apply , you * * MUST * * run repair to make the replaced node consistent again , since <nl> + it missed ongoing writes during / prior to bootstrapping . The * replacement * timeframe refers to the period from when the <nl> + node initially dies to when a new node completes the replacement process . <nl> + <nl> + 1 . The node is down for longer than ` ` max _ hint _ window _ in _ ms ` ` before being replaced . <nl> + 2 . You are replacing using the same IP address as the dead node * * and * * replacement takes longer than ` ` max _ hint _ window _ in _ ms ` ` . <nl> <nl> Monitoring progress <nl> ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^
NEAREST DIFF (one line): diff - - git a / debian / control b / debian / control <nl> index 6b06d72 . . 01cf8e7 100644 <nl> - - - a / debian / control <nl> + + + b / debian / control <nl> @ @ - 2 , 7 + 2 , 7 @ @ Source : cassandra <nl> Section : misc <nl> Priority : extra <nl> Maintainer : Eric Evans < eevans @ apache . org > <nl> - Build - Depends : debhelper ( > = 5 ) , openjdk - 6 - jdk ( > = 6b11 ) | java6 - sdk , ant ( > = 1 . 7 ) <nl> + Build - Depends : debhelper ( > = 5 ) , openjdk - 6 - jdk ( > = 6b11 ) | java6 - sdk , ant ( > = 1 . 7 ) , ant - optional ( > = 1 . 7 ) <nl> Homepage : http : / / cassandra . apache . org <nl> Vcs - Svn : https : / / svn . apache . org / repos / asf / cassandra / trunk <nl> Vcs - Browser : http : / / svn . apache . org / viewvc / cassandra / trunk <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 24c9cbc . . 372513e 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 63 , 8 + 63 , 6 @ @ public class DatabaseDescriptor <nl> private static SeedProvider seedProvider ; <nl> / * Current index into the above list of directories * / <nl> private static int currentIndex = 0 ; <nl> - private static int consistencyThreads = 4 ; / / not configurable <nl> - <nl> <nl> static Map < String , KSMetaData > tables = new HashMap < String , KSMetaData > ( ) ; <nl> <nl> @ @ - 691 , 11 + 689 , 6 @ @ public class DatabaseDescriptor <nl> return conf . phi _ convict _ threshold ; <nl> } <nl> <nl> - public static int getConsistencyThreads ( ) <nl> - { <nl> - return consistencyThreads ; <nl> - } <nl> - <nl> public static int getConcurrentReaders ( ) <nl> { <nl> return conf . concurrent _ reads ; <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamOut . java b / src / java / org / apache / cassandra / streaming / StreamOut . java <nl> index c9ac671 . . d9e8530 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamOut . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamOut . java <nl> @ @ - 42 , 18 + 42 , 31 @ @ import org . apache . cassandra . utils . Pair ; <nl> / * * <nl> * This class handles streaming data from one node to another . <nl> * <nl> - * The source node is in charge of the streaming session . It begins the stream by sending <nl> + * The source node [ the Out side ] is always in charge of the streaming session . Streams may <nl> + * be initiated either directly by the source via the methods in this class , <nl> + * or on demand from the target ( via StreamRequest ) . <nl> + * <nl> + * Files to stream are grouped into sessions , which can have callbacks associated <nl> + * with them so that ( for instance ) we can mark a new node a full member of the <nl> + * cluster after all the data it needs has been streamed . <nl> + * <nl> + * The source begins a session by sending <nl> * a Message with the stream bit flag in the Header turned on . Part of that Message <nl> * will include a StreamHeader that includes the files that will be streamed as part <nl> * of that session , as well as the first file - to - be - streamed . ( Combining session list <nl> * and first file like this is inconvenient , but not as inconvenient as the old <nl> * three - part send - file - list , wait - for - ack , start - first - file dance . ) <nl> * <nl> - * After each file , the target will send a StreamReply indicating success <nl> + * This is done over a separate TCP connection to avoid blocking ordinary intra - node <nl> + * traffic during the stream . So there is no Handler for the main stream of data - - <nl> + * when a connection sets the Stream bit , IncomingTcpConnection knows what to expect <nl> + * without any further Messages . <nl> + * <nl> + * After each file , the target node [ the In side ] will send a StreamReply indicating success <nl> * ( FILE _ FINISHED ) or failure ( FILE _ RETRY ) . <nl> * <nl> - * When all files have been successfully transferred and integrated the source will send <nl> - * SESSION _ FINISHED and the session is complete . <nl> + * When all files have been successfully transferred and integrated the target will <nl> + * send an additional SESSION _ FINISHED reply and the session is complete . <nl> * <nl> * For Stream requests ( for bootstrap ) , one subtlety is that we always have to <nl> * create at least one stream reply , even if the list of files is empty , otherwise the

TEST DIFF:
diff - - git a / doc / source / operating / topo _ changes . rst b / doc / source / operating / topo _ changes . rst 
 index c42708e . . 6c8f8ec 100644 
 - - - a / doc / source / operating / topo _ changes . rst 
 + + + b / doc / source / operating / topo _ changes . rst 
 @ @ - 98 , 16 + 98 , 21 @ @ Replacing a dead node 
 
 In order to replace a dead node , start cassandra with the JVM startup flag 
 ` ` - Dcassandra . replace _ address _ first _ boot = < dead _ node _ ip > ` ` . Once this property is enabled the node starts in a hibernate 
 - state , during which all the other nodes will see this node to be down . 
 + state , during which all the other nodes will see this node to be DOWN ( DN ) , however this node will see itself as UP 
 + ( UN ) . Accurate replacement state can be found in ` ` nodetool netstats ` ` . 
 
 - The replacing node will now start to bootstrap the data from the rest of the nodes in the cluster . The main difference 
 - between normal bootstrapping of a new node is that this new node will not accept any writes during this phase . 
 + The replacing node will now start to bootstrap the data from the rest of the nodes in the cluster . A replacing node will 
 + only receive writes during the bootstrapping phase if it has a different ip address to the node that is being replaced . 
 + ( See CASSANDRA - 8523 and CASSANDRA - 12344 ) 
 
 - Once the bootstrapping is complete the node will be marked " UP " , we rely on the hinted handoff ' s for making this node 
 - consistent ( since we don ' t accept writes since the start of the bootstrap ) . 
 + Once the bootstrapping is complete the node will be marked " UP " . 
 
 - . . Note : : If the replacement process takes longer than ` ` max _ hint _ window _ in _ ms ` ` you * * MUST * * run repair to make the 
 - replaced node consistent again , since it missed ongoing writes during bootstrapping . 
 + . . Note : : If any of the following cases apply , you * * MUST * * run repair to make the replaced node consistent again , since 
 + it missed ongoing writes during / prior to bootstrapping . The * replacement * timeframe refers to the period from when the 
 + node initially dies to when a new node completes the replacement process . 
 + 
 + 1 . The node is down for longer than ` ` max _ hint _ window _ in _ ms ` ` before being replaced . 
 + 2 . You are replacing using the same IP address as the dead node * * and * * replacement takes longer than ` ` max _ hint _ window _ in _ ms ` ` . 
 
 Monitoring progress 
 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^

NEAREST DIFF:
diff - - git a / debian / control b / debian / control 
 index 6b06d72 . . 01cf8e7 100644 
 - - - a / debian / control 
 + + + b / debian / control 
 @ @ - 2 , 7 + 2 , 7 @ @ Source : cassandra 
 Section : misc 
 Priority : extra 
 Maintainer : Eric Evans < eevans @ apache . org > 
 - Build - Depends : debhelper ( > = 5 ) , openjdk - 6 - jdk ( > = 6b11 ) | java6 - sdk , ant ( > = 1 . 7 ) 
 + Build - Depends : debhelper ( > = 5 ) , openjdk - 6 - jdk ( > = 6b11 ) | java6 - sdk , ant ( > = 1 . 7 ) , ant - optional ( > = 1 . 7 ) 
 Homepage : http : / / cassandra . apache . org 
 Vcs - Svn : https : / / svn . apache . org / repos / asf / cassandra / trunk 
 Vcs - Browser : http : / / svn . apache . org / viewvc / cassandra / trunk 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 24c9cbc . . 372513e 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 63 , 8 + 63 , 6 @ @ public class DatabaseDescriptor 
 private static SeedProvider seedProvider ; 
 / * Current index into the above list of directories * / 
 private static int currentIndex = 0 ; 
 - private static int consistencyThreads = 4 ; / / not configurable 
 - 
 
 static Map < String , KSMetaData > tables = new HashMap < String , KSMetaData > ( ) ; 
 
 @ @ - 691 , 11 + 689 , 6 @ @ public class DatabaseDescriptor 
 return conf . phi _ convict _ threshold ; 
 } 
 
 - public static int getConsistencyThreads ( ) 
 - { 
 - return consistencyThreads ; 
 - } 
 - 
 public static int getConcurrentReaders ( ) 
 { 
 return conf . concurrent _ reads ; 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamOut . java b / src / java / org / apache / cassandra / streaming / StreamOut . java 
 index c9ac671 . . d9e8530 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamOut . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamOut . java 
 @ @ - 42 , 18 + 42 , 31 @ @ import org . apache . cassandra . utils . Pair ; 
 / * * 
 * This class handles streaming data from one node to another . 
 * 
 - * The source node is in charge of the streaming session . It begins the stream by sending 
 + * The source node [ the Out side ] is always in charge of the streaming session . Streams may 
 + * be initiated either directly by the source via the methods in this class , 
 + * or on demand from the target ( via StreamRequest ) . 
 + * 
 + * Files to stream are grouped into sessions , which can have callbacks associated 
 + * with them so that ( for instance ) we can mark a new node a full member of the 
 + * cluster after all the data it needs has been streamed . 
 + * 
 + * The source begins a session by sending 
 * a Message with the stream bit flag in the Header turned on . Part of that Message 
 * will include a StreamHeader that includes the files that will be streamed as part 
 * of that session , as well as the first file - to - be - streamed . ( Combining session list 
 * and first file like this is inconvenient , but not as inconvenient as the old 
 * three - part send - file - list , wait - for - ack , start - first - file dance . ) 
 * 
 - * After each file , the target will send a StreamReply indicating success 
 + * This is done over a separate TCP connection to avoid blocking ordinary intra - node 
 + * traffic during the stream . So there is no Handler for the main stream of data - - 
 + * when a connection sets the Stream bit , IncomingTcpConnection knows what to expect 
 + * without any further Messages . 
 + * 
 + * After each file , the target node [ the In side ] will send a StreamReply indicating success 
 * ( FILE _ FINISHED ) or failure ( FILE _ RETRY ) . 
 * 
 - * When all files have been successfully transferred and integrated the source will send 
 - * SESSION _ FINISHED and the session is complete . 
 + * When all files have been successfully transferred and integrated the target will 
 + * send an additional SESSION _ FINISHED reply and the session is complete . 
 * 
 * For Stream requests ( for bootstrap ) , one subtlety is that we always have to 
 * create at least one stream reply , even if the list of files is empty , otherwise the
