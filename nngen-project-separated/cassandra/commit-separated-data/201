BLEU SCORE: 0.011246923682765546

TEST MSG: Add nodetool clientlist
GENERATED MSG: add MessagingService . get [ Recently ] DroppedMessages and StorageService . getExceptionCount

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 9ead79e . . a10b6eb 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Add nodetool clientlist ( CASSANDRA - 13665 ) <nl> * Revert ProtocolVersion changes from CASSANDRA - 7544 ( CASSANDRA - 14211 ) <nl> * Non - disruptive seed node list reload ( CASSANDRA - 14190 ) <nl> * Nodetool tablehistograms to print statics for all the tables ( CASSANDRA - 14185 ) <nl> diff - - git a / doc / source / operating / metrics . rst b / doc / source / operating / metrics . rst <nl> index 2df1cf8 . . 345fc3e 100644 <nl> - - - a / doc / source / operating / metrics . rst <nl> + + + b / doc / source / operating / metrics . rst <nl> @ @ - 631 , 11 + 631 , 13 @ @ Reported name format : <nl> * * JMX MBean * * <nl> ` ` org . apache . cassandra . metrics : type = Client name = < MetricName > ` ` <nl> <nl> - = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> - Name Type Description <nl> - = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> - connectedNativeClients Counter Number of clients connected to this nodes native protocol server <nl> - = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> + Name Type Description <nl> + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> + connectedNativeClients Gauge < Integer > Number of clients connected to this nodes native protocol server <nl> + connections Gauge < List < Map < String , String > > List of all connections and their state information <nl> + connectedNativeClientsByUser Gauge < Map < String , Int > Number of connnective native clients by username <nl> + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> <nl> <nl> Batch Metrics <nl> diff - - git a / src / java / org / apache / cassandra / metrics / ClientMetrics . java b / src / java / org / apache / cassandra / metrics / ClientMetrics . java <nl> index db6422c . . 8ca3480 100644 <nl> - - - a / src / java / org / apache / cassandra / metrics / ClientMetrics . java <nl> + + + b / src / java / org / apache / cassandra / metrics / ClientMetrics . java <nl> @ @ - 36 , 9 + 36 , 9 @ @ public class ClientMetrics <nl> { <nl> } <nl> <nl> - public void addCounter ( String name , final Callable < Integer > provider ) <nl> + public < T > void addGauge ( String name , final Callable < T > provider ) <nl> { <nl> - Metrics . register ( factory . createMetricName ( name ) , ( Gauge < Integer > ) ( ) - > { <nl> + Metrics . register ( factory . createMetricName ( name ) , ( Gauge < T > ) ( ) - > { <nl> try <nl> { <nl> return provider . call ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / NativeTransportService . java b / src / java / org / apache / cassandra / service / NativeTransportService . java <nl> index b184442 . . 42764e1 100644 <nl> - - - a / src / java / org / apache / cassandra / service / NativeTransportService . java <nl> + + + b / src / java / org / apache / cassandra / service / NativeTransportService . java <nl> @ @ - 18 , 12 + 18 , 19 @ @ <nl> package org . apache . cassandra . service ; <nl> <nl> import java . net . InetAddress ; <nl> + import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . Collection ; <nl> import java . util . Collections ; <nl> + import java . util . HashMap ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . Map . Entry ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> import com . google . common . annotations . VisibleForTesting ; <nl> + import com . google . common . collect . Lists ; <nl> + <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 109 , 14 + 116 , 39 @ @ public class NativeTransportService <nl> } <nl> <nl> / / register metrics <nl> - ClientMetrics . instance . addCounter ( " connectedNativeClients " , ( ) - > <nl> + ClientMetrics . instance . addGauge ( " connectedNativeClients " , ( ) - > <nl> { <nl> int ret = 0 ; <nl> for ( Server server : servers ) <nl> ret + = server . getConnectedClients ( ) ; <nl> return ret ; <nl> } ) ; <nl> + ClientMetrics . instance . addGauge ( " connectedNativeClientsByUser " , ( ) - > <nl> + { <nl> + Map < String , Integer > result = new HashMap < > ( ) ; <nl> + for ( Server server : servers ) <nl> + { <nl> + for ( Entry < String , Integer > e : server . getConnectedClientsByUser ( ) . entrySet ( ) ) <nl> + { <nl> + String user = e . getKey ( ) ; <nl> + result . put ( user , result . getOrDefault ( user , 0 ) + e . getValue ( ) ) ; <nl> + } <nl> + } <nl> + return result ; <nl> + } ) ; <nl> <nl> + ClientMetrics . instance . addGauge ( " connections " , ( ) - > <nl> + { <nl> + List < Map < String , String > > result = new ArrayList < > ( ) ; <nl> + for ( Server server : servers ) <nl> + { <nl> + for ( Map < String , String > e : server . getConnectionStates ( ) ) <nl> + { <nl> + result . add ( e ) ; <nl> + } <nl> + } <nl> + return result ; <nl> + } ) ; <nl> AuthMetrics . init ( ) ; <nl> <nl> initialized = true ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index dcf0cab . . e2125d4 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 74 , 6 + 74 , 7 @ @ import org . apache . cassandra . service . paxos . ProposeCallback ; <nl> import org . apache . cassandra . service . paxos . ProposeVerbHandler ; <nl> import org . apache . cassandra . net . MessagingService . Verb ; <nl> import org . apache . cassandra . tracing . Tracing ; <nl> + import org . apache . cassandra . transport . Server ; <nl> import org . apache . cassandra . triggers . TriggerExecutor ; <nl> import org . apache . cassandra . utils . * ; <nl> import org . apache . cassandra . utils . AbstractIterator ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index ec8f7ba . . 69b64ab 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 1493 , 6 + 1493 , 32 @ @ public class NodeProbe implements AutoCloseable <nl> <nl> / * * <nl> * Retrieve Proxy metrics <nl> + * @ param connections , connectedNativeClients , connectedNativeClientsByUser <nl> + * / <nl> + public Object getClientMetric ( String metricName ) <nl> + { <nl> + try <nl> + { <nl> + switch ( metricName ) <nl> + { <nl> + case " connections " : / / List < Map < String , String > > - list of all native connections and their properties <nl> + case " connectedNativeClients " : / / number of connected native clients <nl> + case " connectedNativeClientsByUser " : / / number of native clients by username <nl> + return JMX . newMBeanProxy ( mbeanServerConn , <nl> + new ObjectName ( " org . apache . cassandra . metrics : type = Client , name = " + metricName ) , <nl> + CassandraMetricsRegistry . JmxGaugeMBean . class ) . getValue ( ) ; <nl> + default : <nl> + throw new RuntimeException ( " Unknown client metric " + metricName ) ; <nl> + } <nl> + } <nl> + catch ( MalformedObjectNameException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Retrieve Proxy metrics <nl> * @ param metricName Exceptions , Load , TotalHints or TotalHintsInProgress . <nl> * / <nl> public long getStorageMetric ( String metricName ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeTool . java b / src / java / org / apache / cassandra / tools / NodeTool . java <nl> index f7b7f76 . . 81f2023 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeTool . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeTool . java <nl> @ @ - 59 , 6 + 59 , 7 @ @ public class NodeTool <nl> TableHistograms . class , <nl> Cleanup . class , <nl> ClearSnapshot . class , <nl> + ClientStats . class , <nl> Compact . class , <nl> Scrub . class , <nl> Verify . class , <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / ClientStats . java b / src / java / org / apache / cassandra / tools / nodetool / ClientStats . java <nl> new file mode 100644 <nl> index 0000000 . . 21915cb <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / ClientStats . java <nl> @ @ - 0 , 0 + 1 , 69 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . tools . nodetool ; <nl> + <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . Map . Entry ; <nl> + <nl> + import org . apache . cassandra . tools . NodeProbe ; <nl> + import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; <nl> + import org . apache . cassandra . tools . nodetool . formatter . TableBuilder ; <nl> + <nl> + import io . airlift . airline . Command ; <nl> + import io . airlift . airline . Option ; <nl> + <nl> + @ Command ( name = " clientstats " , description = " Print information about connected clients " ) <nl> + public class ClientStats extends NodeToolCmd <nl> + { <nl> + @ Option ( title = " list _ connections " , name = " - - all " , description = " Lists all connections " ) <nl> + private boolean listConnections = false ; <nl> + <nl> + @ Override <nl> + public void execute ( NodeProbe probe ) <nl> + { <nl> + if ( listConnections ) <nl> + { <nl> + List < Map < String , String > > clients = ( List < Map < String , String > > ) probe . getClientMetric ( " connections " ) ; <nl> + if ( ! clients . isEmpty ( ) ) <nl> + { <nl> + TableBuilder table = new TableBuilder ( ) ; <nl> + table . add ( " Address " , " SSL " , " Version " , " User " , " Keyspace " , " Requests " ) ; <nl> + for ( Map < String , String > conn : clients ) <nl> + { <nl> + table . add ( conn . get ( " address " ) , conn . get ( " ssl " ) , conn . get ( " version " ) , <nl> + conn . get ( " user " ) , conn . get ( " keyspace " ) , conn . get ( " requests " ) ) ; <nl> + } <nl> + table . printTo ( System . out ) ; <nl> + System . out . println ( ) ; <nl> + } <nl> + } <nl> + <nl> + Map < String , Integer > connectionsByUser = ( Map < String , Integer > ) probe . getClientMetric ( " connectedNativeClientsByUser " ) ; <nl> + int total = connectionsByUser . values ( ) . stream ( ) . reduce ( 0 , Integer : : sum ) ; <nl> + System . out . println ( " Total connected clients : " + total ) ; <nl> + System . out . println ( ) ; <nl> + TableBuilder table = new TableBuilder ( ) ; <nl> + table . add ( " User " , " Connections " ) ; <nl> + for ( Entry < String , Integer > entry : connectionsByUser . entrySet ( ) ) <nl> + { <nl> + table . add ( entry . getKey ( ) , entry . getValue ( ) . toString ( ) ) ; <nl> + } <nl> + table . printTo ( System . out ) ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / transport / Message . java b / src / java / org / apache / cassandra / transport / Message . java <nl> index 2da2ca7 . . f71d640 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Message . java <nl> + + + b / src / java / org / apache / cassandra / transport / Message . java <nl> @ @ - 514 , 6 + 514 , 7 @ @ public abstract class Message <nl> QueryState qstate = connection . validateNewMessage ( request . type , connection . getVersion ( ) , request . getStreamId ( ) ) ; <nl> <nl> logger . trace ( " Received : { } , v = { } " , request , connection . getVersion ( ) ) ; <nl> + connection . requests . inc ( ) ; <nl> response = request . execute ( qstate , queryStartNanoTime ) ; <nl> response . setStreamId ( request . getStreamId ( ) ) ; <nl> response . setWarnings ( ClientWarn . instance . getWarnings ( ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java <nl> index cd04edc . . 2c5e28a 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Server . java <nl> + + + b / src / java / org / apache / cassandra / transport / Server . java <nl> @ @ - 30 , 6 + 30 , 8 @ @ import javax . net . ssl . SSLEngine ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import com . google . common . collect . ImmutableMap ; <nl> + <nl> import io . netty . bootstrap . ServerBootstrap ; <nl> import io . netty . buffer . ByteBuf ; <nl> import io . netty . buffer . ByteBufAllocator ; <nl> @ @ - 173 , 6 + 175 , 33 @ @ public class Server implements CassandraDaemon . Server <nl> return connectionTracker . getConnectedClients ( ) ; <nl> } <nl> <nl> + public Map < String , Integer > getConnectedClientsByUser ( ) <nl> + { <nl> + return connectionTracker . getConnectedClientsByUser ( ) ; <nl> + } <nl> + <nl> + public List < Map < String , String > > getConnectionStates ( ) <nl> + { <nl> + List < Map < String , String > > result = new ArrayList < > ( ) ; <nl> + for ( Channel c : connectionTracker . allChannels ) <nl> + { <nl> + Connection connection = c . attr ( Connection . attributeKey ) . get ( ) ; <nl> + if ( connection instanceof ServerConnection ) <nl> + { <nl> + ServerConnection conn = ( ServerConnection ) connection ; <nl> + result . add ( new ImmutableMap . Builder < String , String > ( ) <nl> + . put ( " user " , conn . getClientState ( ) . getUser ( ) . getName ( ) ) <nl> + . put ( " keyspace " , conn . getClientState ( ) . getRawKeyspace ( ) = = null ? " " : conn . getClientState ( ) . getRawKeyspace ( ) ) <nl> + . put ( " address " , conn . getClientState ( ) . getRemoteAddress ( ) . toString ( ) ) <nl> + . put ( " version " , String . valueOf ( conn . getVersion ( ) . asInt ( ) ) ) <nl> + . put ( " requests " , String . valueOf ( conn . requests . getCount ( ) ) ) <nl> + . put ( " ssl " , conn . channel ( ) . pipeline ( ) . get ( SslHandler . class ) = = null ? " false " : " true " ) <nl> + . build ( ) ) ; <nl> + } <nl> + } <nl> + return result ; <nl> + } <nl> + <nl> private void close ( ) <nl> { <nl> / / Close opened connections <nl> @ @ - 285 , 6 + 314 , 22 @ @ public class Server implements CassandraDaemon . Server <nl> * / <nl> return allChannels . size ( ) ! = 0 ? allChannels . size ( ) - 1 : 0 ; <nl> } <nl> + <nl> + public Map < String , Integer > getConnectedClientsByUser ( ) <nl> + { <nl> + Map < String , Integer > result = new HashMap < > ( ) ; <nl> + for ( Channel c : allChannels ) <nl> + { <nl> + Connection connection = c . attr ( Connection . attributeKey ) . get ( ) ; <nl> + if ( connection instanceof ServerConnection ) <nl> + { <nl> + ServerConnection conn = ( ServerConnection ) connection ; <nl> + String name = conn . getClientState ( ) . getUser ( ) . getName ( ) ; <nl> + result . put ( name , result . getOrDefault ( name , 0 ) + 1 ) ; <nl> + } <nl> + } <nl> + return result ; <nl> + } <nl> } <nl> <nl> private static class Initializer extends ChannelInitializer < Channel > <nl> diff - - git a / src / java / org / apache / cassandra / transport / ServerConnection . java b / src / java / org / apache / cassandra / transport / ServerConnection . java <nl> index 9374ca0 . . 1ebf81c 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / ServerConnection . java <nl> + + + b / src / java / org / apache / cassandra / transport / ServerConnection . java <nl> @ @ - 26 , 6 + 26 , 8 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . service . ClientState ; <nl> import org . apache . cassandra . service . QueryState ; <nl> <nl> + import com . codahale . metrics . Counter ; <nl> + <nl> public class ServerConnection extends Connection <nl> { <nl> private enum State { UNINITIALIZED , AUTHENTICATION , READY } <nl> @ @ - 33 , 6 + 35 , 7 @ @ public class ServerConnection extends Connection <nl> private volatile IAuthenticator . SaslNegotiator saslNegotiator ; <nl> private final ClientState clientState ; <nl> private volatile State state ; <nl> + public final Counter requests = new Counter ( ) ; <nl> <nl> private final ConcurrentMap < Integer , QueryState > queryStates = new ConcurrentHashMap < > ( ) ; <nl> <nl> @ @ - 56 , 6 + 59 , 11 @ @ public class ServerConnection extends Connection <nl> return qState ; <nl> } <nl> <nl> + public ClientState getClientState ( ) <nl> + { <nl> + return clientState ; <nl> + } <nl> + <nl> public QueryState validateNewMessage ( Message . Type type , ProtocolVersion version , int streamId ) <nl> { <nl> switch ( state )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 4a9107a . . 42edc72 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 32 , 6 + 32 , 7 @ @ <nl> * allow deleting a row and updating indexed columns in it in the <nl> same mutation ( CASSANDRA - 2773 ) <nl> * improve cli treatment of multiline comments ( CASSANDRA - 2852 ) <nl> + * fix describeOwnership for OPP ( CASSANDRA - 2800 ) <nl> <nl> <nl> 0 . 7 . 6 <nl> diff - - git a / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java b / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java <nl> index 5a2e6b3 . . 031cbeb 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java <nl> + + + b / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java <nl> @ @ - 188 , 7 + 188 , 7 @ @ public class OrderPreservingPartitioner implements IPartitioner < StringToken > <nl> for ( Range r : sortedRanges ) <nl> { <nl> / / Looping over every KS : CF : Range , get the splits size and add it to the count <nl> - allTokens . put ( r . right , allTokens . get ( r . right ) + StorageService . instance . getSplits ( ks , cfmd . cfName , r , 1 ) . size ( ) ) ; <nl> + allTokens . put ( r . right , allTokens . get ( r . right ) + StorageService . instance . getSplits ( ks , cfmd . cfName , r , DatabaseDescriptor . getIndexInterval ( ) ) . size ( ) ) ; <nl> } <nl> } <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 9ead79e . . a10b6eb 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Add nodetool clientlist ( CASSANDRA - 13665 ) 
 * Revert ProtocolVersion changes from CASSANDRA - 7544 ( CASSANDRA - 14211 ) 
 * Non - disruptive seed node list reload ( CASSANDRA - 14190 ) 
 * Nodetool tablehistograms to print statics for all the tables ( CASSANDRA - 14185 ) 
 diff - - git a / doc / source / operating / metrics . rst b / doc / source / operating / metrics . rst 
 index 2df1cf8 . . 345fc3e 100644 
 - - - a / doc / source / operating / metrics . rst 
 + + + b / doc / source / operating / metrics . rst 
 @ @ - 631 , 11 + 631 , 13 @ @ Reported name format : 
 * * JMX MBean * * 
 ` ` org . apache . cassandra . metrics : type = Client name = < MetricName > ` ` 
 
 - = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 - Name Type Description 
 - = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 - connectedNativeClients Counter Number of clients connected to this nodes native protocol server 
 - = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 + Name Type Description 
 + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 + connectedNativeClients Gauge < Integer > Number of clients connected to this nodes native protocol server 
 + connections Gauge < List < Map < String , String > > List of all connections and their state information 
 + connectedNativeClientsByUser Gauge < Map < String , Int > Number of connnective native clients by username 
 + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 
 
 Batch Metrics 
 diff - - git a / src / java / org / apache / cassandra / metrics / ClientMetrics . java b / src / java / org / apache / cassandra / metrics / ClientMetrics . java 
 index db6422c . . 8ca3480 100644 
 - - - a / src / java / org / apache / cassandra / metrics / ClientMetrics . java 
 + + + b / src / java / org / apache / cassandra / metrics / ClientMetrics . java 
 @ @ - 36 , 9 + 36 , 9 @ @ public class ClientMetrics 
 { 
 } 
 
 - public void addCounter ( String name , final Callable < Integer > provider ) 
 + public < T > void addGauge ( String name , final Callable < T > provider ) 
 { 
 - Metrics . register ( factory . createMetricName ( name ) , ( Gauge < Integer > ) ( ) - > { 
 + Metrics . register ( factory . createMetricName ( name ) , ( Gauge < T > ) ( ) - > { 
 try 
 { 
 return provider . call ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / NativeTransportService . java b / src / java / org / apache / cassandra / service / NativeTransportService . java 
 index b184442 . . 42764e1 100644 
 - - - a / src / java / org / apache / cassandra / service / NativeTransportService . java 
 + + + b / src / java / org / apache / cassandra / service / NativeTransportService . java 
 @ @ - 18 , 12 + 18 , 19 @ @ 
 package org . apache . cassandra . service ; 
 
 import java . net . InetAddress ; 
 + import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . Collection ; 
 import java . util . Collections ; 
 + import java . util . HashMap ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . Map . Entry ; 
 import java . util . concurrent . TimeUnit ; 
 
 import com . google . common . annotations . VisibleForTesting ; 
 + import com . google . common . collect . Lists ; 
 + 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 109 , 14 + 116 , 39 @ @ public class NativeTransportService 
 } 
 
 / / register metrics 
 - ClientMetrics . instance . addCounter ( " connectedNativeClients " , ( ) - > 
 + ClientMetrics . instance . addGauge ( " connectedNativeClients " , ( ) - > 
 { 
 int ret = 0 ; 
 for ( Server server : servers ) 
 ret + = server . getConnectedClients ( ) ; 
 return ret ; 
 } ) ; 
 + ClientMetrics . instance . addGauge ( " connectedNativeClientsByUser " , ( ) - > 
 + { 
 + Map < String , Integer > result = new HashMap < > ( ) ; 
 + for ( Server server : servers ) 
 + { 
 + for ( Entry < String , Integer > e : server . getConnectedClientsByUser ( ) . entrySet ( ) ) 
 + { 
 + String user = e . getKey ( ) ; 
 + result . put ( user , result . getOrDefault ( user , 0 ) + e . getValue ( ) ) ; 
 + } 
 + } 
 + return result ; 
 + } ) ; 
 
 + ClientMetrics . instance . addGauge ( " connections " , ( ) - > 
 + { 
 + List < Map < String , String > > result = new ArrayList < > ( ) ; 
 + for ( Server server : servers ) 
 + { 
 + for ( Map < String , String > e : server . getConnectionStates ( ) ) 
 + { 
 + result . add ( e ) ; 
 + } 
 + } 
 + return result ; 
 + } ) ; 
 AuthMetrics . init ( ) ; 
 
 initialized = true ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index dcf0cab . . e2125d4 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 74 , 6 + 74 , 7 @ @ import org . apache . cassandra . service . paxos . ProposeCallback ; 
 import org . apache . cassandra . service . paxos . ProposeVerbHandler ; 
 import org . apache . cassandra . net . MessagingService . Verb ; 
 import org . apache . cassandra . tracing . Tracing ; 
 + import org . apache . cassandra . transport . Server ; 
 import org . apache . cassandra . triggers . TriggerExecutor ; 
 import org . apache . cassandra . utils . * ; 
 import org . apache . cassandra . utils . AbstractIterator ; 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index ec8f7ba . . 69b64ab 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 1493 , 6 + 1493 , 32 @ @ public class NodeProbe implements AutoCloseable 
 
 / * * 
 * Retrieve Proxy metrics 
 + * @ param connections , connectedNativeClients , connectedNativeClientsByUser 
 + * / 
 + public Object getClientMetric ( String metricName ) 
 + { 
 + try 
 + { 
 + switch ( metricName ) 
 + { 
 + case " connections " : / / List < Map < String , String > > - list of all native connections and their properties 
 + case " connectedNativeClients " : / / number of connected native clients 
 + case " connectedNativeClientsByUser " : / / number of native clients by username 
 + return JMX . newMBeanProxy ( mbeanServerConn , 
 + new ObjectName ( " org . apache . cassandra . metrics : type = Client , name = " + metricName ) , 
 + CassandraMetricsRegistry . JmxGaugeMBean . class ) . getValue ( ) ; 
 + default : 
 + throw new RuntimeException ( " Unknown client metric " + metricName ) ; 
 + } 
 + } 
 + catch ( MalformedObjectNameException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Retrieve Proxy metrics 
 * @ param metricName Exceptions , Load , TotalHints or TotalHintsInProgress . 
 * / 
 public long getStorageMetric ( String metricName ) 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeTool . java b / src / java / org / apache / cassandra / tools / NodeTool . java 
 index f7b7f76 . . 81f2023 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeTool . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeTool . java 
 @ @ - 59 , 6 + 59 , 7 @ @ public class NodeTool 
 TableHistograms . class , 
 Cleanup . class , 
 ClearSnapshot . class , 
 + ClientStats . class , 
 Compact . class , 
 Scrub . class , 
 Verify . class , 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / ClientStats . java b / src / java / org / apache / cassandra / tools / nodetool / ClientStats . java 
 new file mode 100644 
 index 0000000 . . 21915cb 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / ClientStats . java 
 @ @ - 0 , 0 + 1 , 69 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . tools . nodetool ; 
 + 
 + import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . Map . Entry ; 
 + 
 + import org . apache . cassandra . tools . NodeProbe ; 
 + import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; 
 + import org . apache . cassandra . tools . nodetool . formatter . TableBuilder ; 
 + 
 + import io . airlift . airline . Command ; 
 + import io . airlift . airline . Option ; 
 + 
 + @ Command ( name = " clientstats " , description = " Print information about connected clients " ) 
 + public class ClientStats extends NodeToolCmd 
 + { 
 + @ Option ( title = " list _ connections " , name = " - - all " , description = " Lists all connections " ) 
 + private boolean listConnections = false ; 
 + 
 + @ Override 
 + public void execute ( NodeProbe probe ) 
 + { 
 + if ( listConnections ) 
 + { 
 + List < Map < String , String > > clients = ( List < Map < String , String > > ) probe . getClientMetric ( " connections " ) ; 
 + if ( ! clients . isEmpty ( ) ) 
 + { 
 + TableBuilder table = new TableBuilder ( ) ; 
 + table . add ( " Address " , " SSL " , " Version " , " User " , " Keyspace " , " Requests " ) ; 
 + for ( Map < String , String > conn : clients ) 
 + { 
 + table . add ( conn . get ( " address " ) , conn . get ( " ssl " ) , conn . get ( " version " ) , 
 + conn . get ( " user " ) , conn . get ( " keyspace " ) , conn . get ( " requests " ) ) ; 
 + } 
 + table . printTo ( System . out ) ; 
 + System . out . println ( ) ; 
 + } 
 + } 
 + 
 + Map < String , Integer > connectionsByUser = ( Map < String , Integer > ) probe . getClientMetric ( " connectedNativeClientsByUser " ) ; 
 + int total = connectionsByUser . values ( ) . stream ( ) . reduce ( 0 , Integer : : sum ) ; 
 + System . out . println ( " Total connected clients : " + total ) ; 
 + System . out . println ( ) ; 
 + TableBuilder table = new TableBuilder ( ) ; 
 + table . add ( " User " , " Connections " ) ; 
 + for ( Entry < String , Integer > entry : connectionsByUser . entrySet ( ) ) 
 + { 
 + table . add ( entry . getKey ( ) , entry . getValue ( ) . toString ( ) ) ; 
 + } 
 + table . printTo ( System . out ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / transport / Message . java b / src / java / org / apache / cassandra / transport / Message . java 
 index 2da2ca7 . . f71d640 100644 
 - - - a / src / java / org / apache / cassandra / transport / Message . java 
 + + + b / src / java / org / apache / cassandra / transport / Message . java 
 @ @ - 514 , 6 + 514 , 7 @ @ public abstract class Message 
 QueryState qstate = connection . validateNewMessage ( request . type , connection . getVersion ( ) , request . getStreamId ( ) ) ; 
 
 logger . trace ( " Received : { } , v = { } " , request , connection . getVersion ( ) ) ; 
 + connection . requests . inc ( ) ; 
 response = request . execute ( qstate , queryStartNanoTime ) ; 
 response . setStreamId ( request . getStreamId ( ) ) ; 
 response . setWarnings ( ClientWarn . instance . getWarnings ( ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java 
 index cd04edc . . 2c5e28a 100644 
 - - - a / src / java / org / apache / cassandra / transport / Server . java 
 + + + b / src / java / org / apache / cassandra / transport / Server . java 
 @ @ - 30 , 6 + 30 , 8 @ @ import javax . net . ssl . SSLEngine ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import com . google . common . collect . ImmutableMap ; 
 + 
 import io . netty . bootstrap . ServerBootstrap ; 
 import io . netty . buffer . ByteBuf ; 
 import io . netty . buffer . ByteBufAllocator ; 
 @ @ - 173 , 6 + 175 , 33 @ @ public class Server implements CassandraDaemon . Server 
 return connectionTracker . getConnectedClients ( ) ; 
 } 
 
 + public Map < String , Integer > getConnectedClientsByUser ( ) 
 + { 
 + return connectionTracker . getConnectedClientsByUser ( ) ; 
 + } 
 + 
 + public List < Map < String , String > > getConnectionStates ( ) 
 + { 
 + List < Map < String , String > > result = new ArrayList < > ( ) ; 
 + for ( Channel c : connectionTracker . allChannels ) 
 + { 
 + Connection connection = c . attr ( Connection . attributeKey ) . get ( ) ; 
 + if ( connection instanceof ServerConnection ) 
 + { 
 + ServerConnection conn = ( ServerConnection ) connection ; 
 + result . add ( new ImmutableMap . Builder < String , String > ( ) 
 + . put ( " user " , conn . getClientState ( ) . getUser ( ) . getName ( ) ) 
 + . put ( " keyspace " , conn . getClientState ( ) . getRawKeyspace ( ) = = null ? " " : conn . getClientState ( ) . getRawKeyspace ( ) ) 
 + . put ( " address " , conn . getClientState ( ) . getRemoteAddress ( ) . toString ( ) ) 
 + . put ( " version " , String . valueOf ( conn . getVersion ( ) . asInt ( ) ) ) 
 + . put ( " requests " , String . valueOf ( conn . requests . getCount ( ) ) ) 
 + . put ( " ssl " , conn . channel ( ) . pipeline ( ) . get ( SslHandler . class ) = = null ? " false " : " true " ) 
 + . build ( ) ) ; 
 + } 
 + } 
 + return result ; 
 + } 
 + 
 private void close ( ) 
 { 
 / / Close opened connections 
 @ @ - 285 , 6 + 314 , 22 @ @ public class Server implements CassandraDaemon . Server 
 * / 
 return allChannels . size ( ) ! = 0 ? allChannels . size ( ) - 1 : 0 ; 
 } 
 + 
 + public Map < String , Integer > getConnectedClientsByUser ( ) 
 + { 
 + Map < String , Integer > result = new HashMap < > ( ) ; 
 + for ( Channel c : allChannels ) 
 + { 
 + Connection connection = c . attr ( Connection . attributeKey ) . get ( ) ; 
 + if ( connection instanceof ServerConnection ) 
 + { 
 + ServerConnection conn = ( ServerConnection ) connection ; 
 + String name = conn . getClientState ( ) . getUser ( ) . getName ( ) ; 
 + result . put ( name , result . getOrDefault ( name , 0 ) + 1 ) ; 
 + } 
 + } 
 + return result ; 
 + } 
 } 
 
 private static class Initializer extends ChannelInitializer < Channel > 
 diff - - git a / src / java / org / apache / cassandra / transport / ServerConnection . java b / src / java / org / apache / cassandra / transport / ServerConnection . java 
 index 9374ca0 . . 1ebf81c 100644 
 - - - a / src / java / org / apache / cassandra / transport / ServerConnection . java 
 + + + b / src / java / org / apache / cassandra / transport / ServerConnection . java 
 @ @ - 26 , 6 + 26 , 8 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . service . ClientState ; 
 import org . apache . cassandra . service . QueryState ; 
 
 + import com . codahale . metrics . Counter ; 
 + 
 public class ServerConnection extends Connection 
 { 
 private enum State { UNINITIALIZED , AUTHENTICATION , READY } 
 @ @ - 33 , 6 + 35 , 7 @ @ public class ServerConnection extends Connection 
 private volatile IAuthenticator . SaslNegotiator saslNegotiator ; 
 private final ClientState clientState ; 
 private volatile State state ; 
 + public final Counter requests = new Counter ( ) ; 
 
 private final ConcurrentMap < Integer , QueryState > queryStates = new ConcurrentHashMap < > ( ) ; 
 
 @ @ - 56 , 6 + 59 , 11 @ @ public class ServerConnection extends Connection 
 return qState ; 
 } 
 
 + public ClientState getClientState ( ) 
 + { 
 + return clientState ; 
 + } 
 + 
 public QueryState validateNewMessage ( Message . Type type , ProtocolVersion version , int streamId ) 
 { 
 switch ( state )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 4a9107a . . 42edc72 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 32 , 6 + 32 , 7 @ @ 
 * allow deleting a row and updating indexed columns in it in the 
 same mutation ( CASSANDRA - 2773 ) 
 * improve cli treatment of multiline comments ( CASSANDRA - 2852 ) 
 + * fix describeOwnership for OPP ( CASSANDRA - 2800 ) 
 
 
 0 . 7 . 6 
 diff - - git a / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java b / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java 
 index 5a2e6b3 . . 031cbeb 100644 
 - - - a / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java 
 + + + b / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java 
 @ @ - 188 , 7 + 188 , 7 @ @ public class OrderPreservingPartitioner implements IPartitioner < StringToken > 
 for ( Range r : sortedRanges ) 
 { 
 / / Looping over every KS : CF : Range , get the splits size and add it to the count 
 - allTokens . put ( r . right , allTokens . get ( r . right ) + StorageService . instance . getSplits ( ks , cfmd . cfName , r , 1 ) . size ( ) ) ; 
 + allTokens . put ( r . right , allTokens . get ( r . right ) + StorageService . instance . getSplits ( ks , cfmd . cfName , r , DatabaseDescriptor . getIndexInterval ( ) ) . size ( ) ) ; 
 } 
 } 
 }
