BLEU SCORE: 0.020980574531482755

TEST MSG: Fix CHANGES . txt for 3 . 0 . 3
GENERATED MSG: clean up merge

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e167126 . . dd1896c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 7 + 1 , 5 @ @ <nl> - 3 . 0 . 2 <nl> - * Fix upgrade data loss due to range tombstone deleting more data than then should <nl> - ( CASSANDRA - 10822 ) <nl> - Merged from 2 . 2 <nl> + 3 . 0 . 3 <nl> + Merged from 2 . 2 : <nl> * Add property to allow listening on broadcast interface ( CASSANDRA - 9748 ) <nl> * Fix regression in split size on CqlInputFormat ( CASSANDRA - 10835 ) <nl> * Better handling of SSL connection errors inter - node ( CASSANDRA - 10816 ) <nl> @ @ - 15 , 6 + 13 , 11 @ @ Merged from 2 . 1 : <nl> * Allow cancellation of index summary redistribution ( CASSANDRA - 8805 ) <nl> <nl> <nl> + 3 . 0 . 2 <nl> + * Fix upgrade data loss due to range tombstone deleting more data than then should <nl> + ( CASSANDRA - 10822 ) <nl> + <nl> + <nl> 3 . 0 . 1 <nl> * Avoid MV race during node decommission ( CASSANDRA - 10674 ) <nl> * Disable reloading of GossipingPropertyFileSnitch ( CASSANDRA - 9474 )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d3973b6 . . 7b1970c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 7 , 6 + 7 , 7 @ @ <nl> * Improve batchlog replay behavior and hint ttl handling ( CASSANDRA - 5314 ) <nl> * Exclude localTimestamp from validation for tombstones ( CASSANDRA - 5398 ) <nl> * cqlsh : add custom prompt support ( CASSANDRA - 5539 ) <nl> + * Reuse prepared statements in hot auth queries ( CASSANDRA - 5594 ) <nl> Merged from 1 . 1 : <nl> * Remove buggy thrift max message length option ( CASSANDRA - 5529 ) <nl> * Fix NPE in Pig ' s widerow mode ( CASSANDRA - 5488 ) <nl> diff - - git a / src / java / org / apache / cassandra / auth / Auth . java b / src / java / org / apache / cassandra / auth / Auth . java <nl> index 7ec5a33 . . c561aab 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / Auth . java <nl> + + + b / src / java / org / apache / cassandra / auth / Auth . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . auth ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . Lists ; <nl> import org . apache . commons . lang . StringUtils ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 29 , 12 + 30 , 14 @ @ import org . apache . cassandra . config . KSMetaData ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . cql3 . UntypedResultSet ; <nl> import org . apache . cassandra . cql3 . QueryProcessor ; <nl> + import org . apache . cassandra . cql3 . statements . SelectStatement ; <nl> import org . apache . cassandra . db . ConsistencyLevel ; <nl> import org . apache . cassandra . exceptions . RequestExecutionException ; <nl> + import org . apache . cassandra . exceptions . RequestValidationException ; <nl> import org . apache . cassandra . locator . SimpleStrategy ; <nl> - import org . apache . cassandra . service . IMigrationListener ; <nl> - import org . apache . cassandra . service . MigrationManager ; <nl> - import org . apache . cassandra . service . StorageService ; <nl> + import org . apache . cassandra . service . * ; <nl> + import org . apache . cassandra . transport . messages . ResultMessage ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> public class Auth <nl> @ @ - 57 , 6 + 60 , 8 @ @ public class Auth <nl> USERS _ CF , <nl> 90 * 24 * 60 * 60 ) ; / / 3 months . <nl> <nl> + private static SelectStatement selectUserStatement ; <nl> + <nl> / * * <nl> * Checks if the username is stored in AUTH _ KS . USERS _ CF . <nl> * <nl> @ @ - 65 , 15 + 70 , 7 @ @ public class Auth <nl> * / <nl> public static boolean isExistingUser ( String username ) <nl> { <nl> - String query = String . format ( " SELECT * FROM % s . % s WHERE name = ' % s ' " , AUTH _ KS , USERS _ CF , escape ( username ) ) ; <nl> - try <nl> - { <nl> - return ! QueryProcessor . process ( query , consistencyForUser ( username ) ) . isEmpty ( ) ; <nl> - } <nl> - catch ( RequestExecutionException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + return ! selectUser ( username ) . isEmpty ( ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 84 , 16 + 81 , 8 @ @ public class Auth <nl> * / <nl> public static boolean isSuperuser ( String username ) <nl> { <nl> - String query = String . format ( " SELECT super FROM % s . % s WHERE name = ' % s ' " , AUTH _ KS , USERS _ CF , escape ( username ) ) ; <nl> - try <nl> - { <nl> - UntypedResultSet result = QueryProcessor . process ( query , consistencyForUser ( username ) ) ; <nl> - return ! result . isEmpty ( ) & & result . one ( ) . getBoolean ( " super " ) ; <nl> - } <nl> - catch ( RequestExecutionException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + UntypedResultSet result = selectUser ( username ) ; <nl> + return ! result . isEmpty ( ) & & result . one ( ) . getBoolean ( " super " ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 157 , 6 + 146 , 16 @ @ public class Auth <nl> SUPERUSER _ SETUP _ DELAY , <nl> TimeUnit . MILLISECONDS ) ; <nl> } <nl> + <nl> + try <nl> + { <nl> + String query = String . format ( " SELECT * FROM % s . % s WHERE name = ? " , AUTH _ KS , USERS _ CF ) ; <nl> + selectUserStatement = ( SelectStatement ) QueryProcessor . parseStatement ( query ) . prepare ( ) . statement ; <nl> + } <nl> + catch ( RequestValidationException e ) <nl> + { <nl> + throw new AssertionError ( e ) ; / / not supposed to happen <nl> + } <nl> } <nl> <nl> / / Only use QUORUM cl for the default superuser . <nl> @ @ - 227 , 6 + 226 , 25 @ @ public class Auth <nl> return StringUtils . replace ( name , " ' " , " ' ' " ) ; <nl> } <nl> <nl> + private static UntypedResultSet selectUser ( String username ) <nl> + { <nl> + try <nl> + { <nl> + ResultMessage . Rows rows = selectUserStatement . execute ( consistencyForUser ( username ) , <nl> + new QueryState ( new ClientState ( true ) ) , <nl> + Lists . newArrayList ( ByteBufferUtil . bytes ( username ) ) ) ; <nl> + return new UntypedResultSet ( rows . result ) ; <nl> + } <nl> + catch ( RequestValidationException e ) <nl> + { <nl> + throw new AssertionError ( e ) ; / / not supposed to happen <nl> + } <nl> + catch ( RequestExecutionException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> / * * <nl> * IMigrationListener implementation that cleans up permissions on dropped resources . <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / auth / CassandraAuthorizer . java b / src / java / org / apache / cassandra / auth / CassandraAuthorizer . java <nl> index 0518734 . . 396be71 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / CassandraAuthorizer . java <nl> + + + b / src / java / org / apache / cassandra / auth / CassandraAuthorizer . java <nl> @ @ - 28 , 9 + 28 , 14 @ @ import org . slf4j . LoggerFactory ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . cql3 . UntypedResultSet ; <nl> import org . apache . cassandra . cql3 . QueryProcessor ; <nl> + import org . apache . cassandra . cql3 . statements . SelectStatement ; <nl> import org . apache . cassandra . db . ConsistencyLevel ; <nl> import org . apache . cassandra . db . marshal . UTF8Type ; <nl> import org . apache . cassandra . exceptions . * ; <nl> + import org . apache . cassandra . service . ClientState ; <nl> + import org . apache . cassandra . service . QueryState ; <nl> + import org . apache . cassandra . transport . messages . ResultMessage ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> / * * <nl> * CassandraAuthorizer is an IAuthorizer implementation that keeps <nl> @ @ - 55 , 20 + 60 , 26 @ @ public class CassandraAuthorizer implements IAuthorizer <nl> PERMISSIONS _ CF , <nl> 90 * 24 * 60 * 60 ) ; / / 3 months . <nl> <nl> + private SelectStatement authorizeStatement ; <nl> + <nl> / / Returns every permission on the resource granted to the user . <nl> public Set < Permission > authorize ( AuthenticatedUser user , IResource resource ) <nl> { <nl> if ( user . isSuper ( ) ) <nl> return Permission . ALL ; <nl> <nl> - UntypedResultSet rows ; <nl> + UntypedResultSet result ; <nl> try <nl> { <nl> - rows = process ( String . format ( " SELECT permissions FROM % s . % s WHERE username = ' % s ' AND resource = ' % s ' " , <nl> - Auth . AUTH _ KS , <nl> - PERMISSIONS _ CF , <nl> - escape ( user . getName ( ) ) , <nl> - escape ( resource . getName ( ) ) ) ) ; <nl> + ResultMessage . Rows rows = authorizeStatement . execute ( ConsistencyLevel . ONE , <nl> + new QueryState ( new ClientState ( true ) ) , <nl> + Lists . newArrayList ( ByteBufferUtil . bytes ( user . getName ( ) ) , <nl> + ByteBufferUtil . bytes ( resource . getName ( ) ) ) ) ; <nl> + result = new UntypedResultSet ( rows . result ) ; <nl> + } <nl> + catch ( RequestValidationException e ) <nl> + { <nl> + throw new AssertionError ( e ) ; / / not supposed to happen <nl> } <nl> catch ( RequestExecutionException e ) <nl> { <nl> @ @ - 76 , 11 + 87 , 11 @ @ public class CassandraAuthorizer implements IAuthorizer <nl> return Permission . NONE ; <nl> } <nl> <nl> - if ( rows . isEmpty ( ) | | ! rows . one ( ) . has ( PERMISSIONS ) ) <nl> + if ( result . isEmpty ( ) | | ! result . one ( ) . has ( PERMISSIONS ) ) <nl> return Permission . NONE ; <nl> <nl> Set < Permission > permissions = EnumSet . noneOf ( Permission . class ) ; <nl> - for ( String perm : rows . one ( ) . getSet ( PERMISSIONS , UTF8Type . instance ) ) <nl> + for ( String perm : result . one ( ) . getSet ( PERMISSIONS , UTF8Type . instance ) ) <nl> permissions . add ( Permission . valueOf ( perm ) ) ; <nl> return permissions ; <nl> } <nl> @ @ - 239 , 6 + 250 , 16 @ @ public class CassandraAuthorizer implements IAuthorizer <nl> throw new AssertionError ( e ) ; <nl> } <nl> } <nl> + <nl> + try <nl> + { <nl> + String query = String . format ( " SELECT permissions FROM % s . % s WHERE username = ? AND resource = ? " , Auth . AUTH _ KS , PERMISSIONS _ CF ) ; <nl> + authorizeStatement = ( SelectStatement ) QueryProcessor . parseStatement ( query ) . prepare ( ) . statement ; <nl> + } <nl> + catch ( RequestValidationException e ) <nl> + { <nl> + throw new AssertionError ( e ) ; / / not supposed to happen <nl> + } <nl> } <nl> <nl> / / We only worry about one character ( ' ) . Make sure it ' s properly escaped . <nl> diff - - git a / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java b / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java <nl> index 01adb1b . . bcbdd29 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java <nl> + + + b / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . util . Set ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> import com . google . common . collect . ImmutableSet ; <nl> + import com . google . common . collect . Lists ; <nl> import org . apache . commons . lang . StringUtils ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 30 , 12 + 31 , 14 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . cql3 . UntypedResultSet ; <nl> import org . apache . cassandra . cql3 . QueryProcessor ; <nl> + import org . apache . cassandra . cql3 . statements . SelectStatement ; <nl> import org . apache . cassandra . db . ConsistencyLevel ; <nl> - import org . apache . cassandra . exceptions . AuthenticationException ; <nl> - import org . apache . cassandra . exceptions . ConfigurationException ; <nl> - import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> - import org . apache . cassandra . exceptions . RequestExecutionException ; <nl> + import org . apache . cassandra . exceptions . * ; <nl> + import org . apache . cassandra . service . ClientState ; <nl> + import org . apache . cassandra . service . QueryState ; <nl> import org . apache . cassandra . service . StorageService ; <nl> + import org . apache . cassandra . transport . messages . ResultMessage ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . mindrot . jbcrypt . BCrypt ; <nl> <nl> @ @ - 68 , 6 + 71 , 8 @ @ public class PasswordAuthenticator implements IAuthenticator <nl> CREDENTIALS _ CF , <nl> 90 * 24 * 60 * 60 ) ; / / 3 months . <nl> <nl> + private SelectStatement authenticateStatement ; <nl> + <nl> / / No anonymous access . <nl> public boolean requireAuthentication ( ) <nl> { <nl> @ @ - 98 , 12 + 103 , 14 @ @ public class PasswordAuthenticator implements IAuthenticator <nl> UntypedResultSet result ; <nl> try <nl> { <nl> - result = process ( String . format ( " SELECT % s FROM % s . % s WHERE username = ' % s ' " , <nl> - SALTED _ HASH , <nl> - Auth . AUTH _ KS , <nl> - CREDENTIALS _ CF , <nl> - escape ( username ) ) , <nl> - consistencyForUser ( username ) ) ; <nl> + ResultMessage . Rows rows = authenticateStatement . execute ( consistencyForUser ( username ) , <nl> + new QueryState ( new ClientState ( true ) ) , <nl> + Lists . newArrayList ( ByteBufferUtil . bytes ( username ) ) ) ; <nl> + result = new UntypedResultSet ( rows . result ) ; <nl> + } <nl> + catch ( RequestValidationException e ) <nl> + { <nl> + throw new AssertionError ( e ) ; / / not supposed to happen <nl> } <nl> catch ( RequestExecutionException e ) <nl> { <nl> @ @ - 174 , 6 + 181 , 19 @ @ public class PasswordAuthenticator implements IAuthenticator <nl> Auth . SUPERUSER _ SETUP _ DELAY , <nl> TimeUnit . MILLISECONDS ) ; <nl> } <nl> + <nl> + try <nl> + { <nl> + String query = String . format ( " SELECT % s FROM % s . % s WHERE username = ? " , <nl> + SALTED _ HASH , <nl> + Auth . AUTH _ KS , <nl> + CREDENTIALS _ CF ) ; <nl> + authenticateStatement = ( SelectStatement ) QueryProcessor . parseStatement ( query ) . prepare ( ) . statement ; <nl> + } <nl> + catch ( RequestValidationException e ) <nl> + { <nl> + throw new AssertionError ( e ) ; / / not supposed to happen <nl> + } <nl> } <nl> <nl> private void setupCredentialsTable ( )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e167126 . . dd1896c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 7 + 1 , 5 @ @ 
 - 3 . 0 . 2 
 - * Fix upgrade data loss due to range tombstone deleting more data than then should 
 - ( CASSANDRA - 10822 ) 
 - Merged from 2 . 2 
 + 3 . 0 . 3 
 + Merged from 2 . 2 : 
 * Add property to allow listening on broadcast interface ( CASSANDRA - 9748 ) 
 * Fix regression in split size on CqlInputFormat ( CASSANDRA - 10835 ) 
 * Better handling of SSL connection errors inter - node ( CASSANDRA - 10816 ) 
 @ @ - 15 , 6 + 13 , 11 @ @ Merged from 2 . 1 : 
 * Allow cancellation of index summary redistribution ( CASSANDRA - 8805 ) 
 
 
 + 3 . 0 . 2 
 + * Fix upgrade data loss due to range tombstone deleting more data than then should 
 + ( CASSANDRA - 10822 ) 
 + 
 + 
 3 . 0 . 1 
 * Avoid MV race during node decommission ( CASSANDRA - 10674 ) 
 * Disable reloading of GossipingPropertyFileSnitch ( CASSANDRA - 9474 )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d3973b6 . . 7b1970c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 7 , 6 + 7 , 7 @ @ 
 * Improve batchlog replay behavior and hint ttl handling ( CASSANDRA - 5314 ) 
 * Exclude localTimestamp from validation for tombstones ( CASSANDRA - 5398 ) 
 * cqlsh : add custom prompt support ( CASSANDRA - 5539 ) 
 + * Reuse prepared statements in hot auth queries ( CASSANDRA - 5594 ) 
 Merged from 1 . 1 : 
 * Remove buggy thrift max message length option ( CASSANDRA - 5529 ) 
 * Fix NPE in Pig ' s widerow mode ( CASSANDRA - 5488 ) 
 diff - - git a / src / java / org / apache / cassandra / auth / Auth . java b / src / java / org / apache / cassandra / auth / Auth . java 
 index 7ec5a33 . . c561aab 100644 
 - - - a / src / java / org / apache / cassandra / auth / Auth . java 
 + + + b / src / java / org / apache / cassandra / auth / Auth . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . auth ; 
 import java . util . concurrent . TimeUnit ; 
 
 import com . google . common . collect . ImmutableMap ; 
 + import com . google . common . collect . Lists ; 
 import org . apache . commons . lang . StringUtils ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 29 , 12 + 30 , 14 @ @ import org . apache . cassandra . config . KSMetaData ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . cql3 . UntypedResultSet ; 
 import org . apache . cassandra . cql3 . QueryProcessor ; 
 + import org . apache . cassandra . cql3 . statements . SelectStatement ; 
 import org . apache . cassandra . db . ConsistencyLevel ; 
 import org . apache . cassandra . exceptions . RequestExecutionException ; 
 + import org . apache . cassandra . exceptions . RequestValidationException ; 
 import org . apache . cassandra . locator . SimpleStrategy ; 
 - import org . apache . cassandra . service . IMigrationListener ; 
 - import org . apache . cassandra . service . MigrationManager ; 
 - import org . apache . cassandra . service . StorageService ; 
 + import org . apache . cassandra . service . * ; 
 + import org . apache . cassandra . transport . messages . ResultMessage ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 public class Auth 
 @ @ - 57 , 6 + 60 , 8 @ @ public class Auth 
 USERS _ CF , 
 90 * 24 * 60 * 60 ) ; / / 3 months . 
 
 + private static SelectStatement selectUserStatement ; 
 + 
 / * * 
 * Checks if the username is stored in AUTH _ KS . USERS _ CF . 
 * 
 @ @ - 65 , 15 + 70 , 7 @ @ public class Auth 
 * / 
 public static boolean isExistingUser ( String username ) 
 { 
 - String query = String . format ( " SELECT * FROM % s . % s WHERE name = ' % s ' " , AUTH _ KS , USERS _ CF , escape ( username ) ) ; 
 - try 
 - { 
 - return ! QueryProcessor . process ( query , consistencyForUser ( username ) ) . isEmpty ( ) ; 
 - } 
 - catch ( RequestExecutionException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 + return ! selectUser ( username ) . isEmpty ( ) ; 
 } 
 
 / * * 
 @ @ - 84 , 16 + 81 , 8 @ @ public class Auth 
 * / 
 public static boolean isSuperuser ( String username ) 
 { 
 - String query = String . format ( " SELECT super FROM % s . % s WHERE name = ' % s ' " , AUTH _ KS , USERS _ CF , escape ( username ) ) ; 
 - try 
 - { 
 - UntypedResultSet result = QueryProcessor . process ( query , consistencyForUser ( username ) ) ; 
 - return ! result . isEmpty ( ) & & result . one ( ) . getBoolean ( " super " ) ; 
 - } 
 - catch ( RequestExecutionException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 + UntypedResultSet result = selectUser ( username ) ; 
 + return ! result . isEmpty ( ) & & result . one ( ) . getBoolean ( " super " ) ; 
 } 
 
 / * * 
 @ @ - 157 , 6 + 146 , 16 @ @ public class Auth 
 SUPERUSER _ SETUP _ DELAY , 
 TimeUnit . MILLISECONDS ) ; 
 } 
 + 
 + try 
 + { 
 + String query = String . format ( " SELECT * FROM % s . % s WHERE name = ? " , AUTH _ KS , USERS _ CF ) ; 
 + selectUserStatement = ( SelectStatement ) QueryProcessor . parseStatement ( query ) . prepare ( ) . statement ; 
 + } 
 + catch ( RequestValidationException e ) 
 + { 
 + throw new AssertionError ( e ) ; / / not supposed to happen 
 + } 
 } 
 
 / / Only use QUORUM cl for the default superuser . 
 @ @ - 227 , 6 + 226 , 25 @ @ public class Auth 
 return StringUtils . replace ( name , " ' " , " ' ' " ) ; 
 } 
 
 + private static UntypedResultSet selectUser ( String username ) 
 + { 
 + try 
 + { 
 + ResultMessage . Rows rows = selectUserStatement . execute ( consistencyForUser ( username ) , 
 + new QueryState ( new ClientState ( true ) ) , 
 + Lists . newArrayList ( ByteBufferUtil . bytes ( username ) ) ) ; 
 + return new UntypedResultSet ( rows . result ) ; 
 + } 
 + catch ( RequestValidationException e ) 
 + { 
 + throw new AssertionError ( e ) ; / / not supposed to happen 
 + } 
 + catch ( RequestExecutionException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 / * * 
 * IMigrationListener implementation that cleans up permissions on dropped resources . 
 * / 
 diff - - git a / src / java / org / apache / cassandra / auth / CassandraAuthorizer . java b / src / java / org / apache / cassandra / auth / CassandraAuthorizer . java 
 index 0518734 . . 396be71 100644 
 - - - a / src / java / org / apache / cassandra / auth / CassandraAuthorizer . java 
 + + + b / src / java / org / apache / cassandra / auth / CassandraAuthorizer . java 
 @ @ - 28 , 9 + 28 , 14 @ @ import org . slf4j . LoggerFactory ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . cql3 . UntypedResultSet ; 
 import org . apache . cassandra . cql3 . QueryProcessor ; 
 + import org . apache . cassandra . cql3 . statements . SelectStatement ; 
 import org . apache . cassandra . db . ConsistencyLevel ; 
 import org . apache . cassandra . db . marshal . UTF8Type ; 
 import org . apache . cassandra . exceptions . * ; 
 + import org . apache . cassandra . service . ClientState ; 
 + import org . apache . cassandra . service . QueryState ; 
 + import org . apache . cassandra . transport . messages . ResultMessage ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 / * * 
 * CassandraAuthorizer is an IAuthorizer implementation that keeps 
 @ @ - 55 , 20 + 60 , 26 @ @ public class CassandraAuthorizer implements IAuthorizer 
 PERMISSIONS _ CF , 
 90 * 24 * 60 * 60 ) ; / / 3 months . 
 
 + private SelectStatement authorizeStatement ; 
 + 
 / / Returns every permission on the resource granted to the user . 
 public Set < Permission > authorize ( AuthenticatedUser user , IResource resource ) 
 { 
 if ( user . isSuper ( ) ) 
 return Permission . ALL ; 
 
 - UntypedResultSet rows ; 
 + UntypedResultSet result ; 
 try 
 { 
 - rows = process ( String . format ( " SELECT permissions FROM % s . % s WHERE username = ' % s ' AND resource = ' % s ' " , 
 - Auth . AUTH _ KS , 
 - PERMISSIONS _ CF , 
 - escape ( user . getName ( ) ) , 
 - escape ( resource . getName ( ) ) ) ) ; 
 + ResultMessage . Rows rows = authorizeStatement . execute ( ConsistencyLevel . ONE , 
 + new QueryState ( new ClientState ( true ) ) , 
 + Lists . newArrayList ( ByteBufferUtil . bytes ( user . getName ( ) ) , 
 + ByteBufferUtil . bytes ( resource . getName ( ) ) ) ) ; 
 + result = new UntypedResultSet ( rows . result ) ; 
 + } 
 + catch ( RequestValidationException e ) 
 + { 
 + throw new AssertionError ( e ) ; / / not supposed to happen 
 } 
 catch ( RequestExecutionException e ) 
 { 
 @ @ - 76 , 11 + 87 , 11 @ @ public class CassandraAuthorizer implements IAuthorizer 
 return Permission . NONE ; 
 } 
 
 - if ( rows . isEmpty ( ) | | ! rows . one ( ) . has ( PERMISSIONS ) ) 
 + if ( result . isEmpty ( ) | | ! result . one ( ) . has ( PERMISSIONS ) ) 
 return Permission . NONE ; 
 
 Set < Permission > permissions = EnumSet . noneOf ( Permission . class ) ; 
 - for ( String perm : rows . one ( ) . getSet ( PERMISSIONS , UTF8Type . instance ) ) 
 + for ( String perm : result . one ( ) . getSet ( PERMISSIONS , UTF8Type . instance ) ) 
 permissions . add ( Permission . valueOf ( perm ) ) ; 
 return permissions ; 
 } 
 @ @ - 239 , 6 + 250 , 16 @ @ public class CassandraAuthorizer implements IAuthorizer 
 throw new AssertionError ( e ) ; 
 } 
 } 
 + 
 + try 
 + { 
 + String query = String . format ( " SELECT permissions FROM % s . % s WHERE username = ? AND resource = ? " , Auth . AUTH _ KS , PERMISSIONS _ CF ) ; 
 + authorizeStatement = ( SelectStatement ) QueryProcessor . parseStatement ( query ) . prepare ( ) . statement ; 
 + } 
 + catch ( RequestValidationException e ) 
 + { 
 + throw new AssertionError ( e ) ; / / not supposed to happen 
 + } 
 } 
 
 / / We only worry about one character ( ' ) . Make sure it ' s properly escaped . 
 diff - - git a / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java b / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java 
 index 01adb1b . . bcbdd29 100644 
 - - - a / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java 
 + + + b / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . util . Set ; 
 import java . util . concurrent . TimeUnit ; 
 
 import com . google . common . collect . ImmutableSet ; 
 + import com . google . common . collect . Lists ; 
 import org . apache . commons . lang . StringUtils ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 30 , 12 + 31 , 14 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . cql3 . UntypedResultSet ; 
 import org . apache . cassandra . cql3 . QueryProcessor ; 
 + import org . apache . cassandra . cql3 . statements . SelectStatement ; 
 import org . apache . cassandra . db . ConsistencyLevel ; 
 - import org . apache . cassandra . exceptions . AuthenticationException ; 
 - import org . apache . cassandra . exceptions . ConfigurationException ; 
 - import org . apache . cassandra . exceptions . InvalidRequestException ; 
 - import org . apache . cassandra . exceptions . RequestExecutionException ; 
 + import org . apache . cassandra . exceptions . * ; 
 + import org . apache . cassandra . service . ClientState ; 
 + import org . apache . cassandra . service . QueryState ; 
 import org . apache . cassandra . service . StorageService ; 
 + import org . apache . cassandra . transport . messages . ResultMessage ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . mindrot . jbcrypt . BCrypt ; 
 
 @ @ - 68 , 6 + 71 , 8 @ @ public class PasswordAuthenticator implements IAuthenticator 
 CREDENTIALS _ CF , 
 90 * 24 * 60 * 60 ) ; / / 3 months . 
 
 + private SelectStatement authenticateStatement ; 
 + 
 / / No anonymous access . 
 public boolean requireAuthentication ( ) 
 { 
 @ @ - 98 , 12 + 103 , 14 @ @ public class PasswordAuthenticator implements IAuthenticator 
 UntypedResultSet result ; 
 try 
 { 
 - result = process ( String . format ( " SELECT % s FROM % s . % s WHERE username = ' % s ' " , 
 - SALTED _ HASH , 
 - Auth . AUTH _ KS , 
 - CREDENTIALS _ CF , 
 - escape ( username ) ) , 
 - consistencyForUser ( username ) ) ; 
 + ResultMessage . Rows rows = authenticateStatement . execute ( consistencyForUser ( username ) , 
 + new QueryState ( new ClientState ( true ) ) , 
 + Lists . newArrayList ( ByteBufferUtil . bytes ( username ) ) ) ; 
 + result = new UntypedResultSet ( rows . result ) ; 
 + } 
 + catch ( RequestValidationException e ) 
 + { 
 + throw new AssertionError ( e ) ; / / not supposed to happen 
 } 
 catch ( RequestExecutionException e ) 
 { 
 @ @ - 174 , 6 + 181 , 19 @ @ public class PasswordAuthenticator implements IAuthenticator 
 Auth . SUPERUSER _ SETUP _ DELAY , 
 TimeUnit . MILLISECONDS ) ; 
 } 
 + 
 + try 
 + { 
 + String query = String . format ( " SELECT % s FROM % s . % s WHERE username = ? " , 
 + SALTED _ HASH , 
 + Auth . AUTH _ KS , 
 + CREDENTIALS _ CF ) ; 
 + authenticateStatement = ( SelectStatement ) QueryProcessor . parseStatement ( query ) . prepare ( ) . statement ; 
 + } 
 + catch ( RequestValidationException e ) 
 + { 
 + throw new AssertionError ( e ) ; / / not supposed to happen 
 + } 
 } 
 
 private void setupCredentialsTable ( )
