BLEU SCORE: 0.027611988917697356

TEST MSG: Backport CASSANDRA - 8013 to 2 . 0
GENERATED MSG: Fix AssertionError in RangeTombstoneList diff

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 905445e . . 0e4ade3 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 17 <nl> + * Backport CASSANDRA - 8013 to 2 . 0 ( CASSANDRA - 10144 ) <nl> * Make getFullyExpiredSSTables less expensive ( CASSANDRA - 9882 ) <nl> * Add tool to find why expired sstables are not getting dropped ( CASSANDRA - 10015 ) <nl> * Remove erroneous pending HH tasks from tpstats / jmx ( CASSANDRA - 9129 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / RangeTombstoneList . java b / src / java / org / apache / cassandra / db / RangeTombstoneList . java <nl> index 165718e . . cfdd54e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RangeTombstoneList . java <nl> + + + b / src / java / org / apache / cassandra / db / RangeTombstoneList . java <nl> @ @ - 343 , 29 + 343 , 37 @ @ public class RangeTombstoneList implements Iterable < RangeTombstone > <nl> if ( isEmpty ( ) ) <nl> return superset ; <nl> <nl> - assert size < = superset . size ; <nl> - <nl> RangeTombstoneList diff = null ; <nl> <nl> int j = 0 ; / / index to iterate through our own list <nl> for ( int i = 0 ; i < superset . size ; i + + ) <nl> { <nl> - boolean sameStart = j < size & & starts [ j ] . equals ( superset . starts [ i ] ) ; <nl> - / / don ' t care about local deletion time here . for RR it doesn ' t makes sense <nl> - if ( ! sameStart <nl> + / / we can assume that this list is a subset of the superset list <nl> + while ( j < size & & comparator . compare ( starts [ j ] , superset . starts [ i ] ) < 0 ) <nl> + j + + ; <nl> + <nl> + if ( j > = size ) <nl> + { <nl> + / / we ' re at the end of our own list , add the remainder of the superset to the diff <nl> + if ( i < superset . size ) <nl> + { <nl> + if ( diff = = null ) <nl> + diff = new RangeTombstoneList ( comparator , superset . size - i ) ; <nl> + <nl> + for ( int k = i ; k < superset . size ; k + + ) <nl> + diff . add ( superset . starts [ k ] , superset . ends [ k ] , superset . markedAts [ k ] , superset . delTimes [ k ] ) ; <nl> + } <nl> + return diff ; <nl> + } <nl> + <nl> + / / we don ' t care about local deletion time here , because it doesn ' t matter for read repair <nl> + if ( ! starts [ j ] . equals ( superset . starts [ i ] ) <nl> | | ! ends [ j ] . equals ( superset . ends [ i ] ) <nl> | | markedAts [ j ] ! = superset . markedAts [ i ] ) <nl> { <nl> if ( diff = = null ) <nl> diff = new RangeTombstoneList ( comparator , Math . min ( 8 , superset . size - i ) ) ; <nl> diff . add ( superset . starts [ i ] , superset . ends [ i ] , superset . markedAts [ i ] , superset . delTimes [ i ] ) ; <nl> - <nl> - if ( sameStart ) <nl> - j + + ; <nl> - } <nl> - else <nl> - { <nl> - j + + ; <nl> } <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / db / RangeTombstoneListTest . java b / test / unit / org / apache / cassandra / db / RangeTombstoneListTest . java <nl> index 2a7c90f . . d4bc463 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RangeTombstoneListTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RangeTombstoneListTest . java <nl> @ @ - 32 , 6 + 32 , 177 @ @ public class RangeTombstoneListTest <nl> private static final Comparator < ByteBuffer > cmp = IntegerType . instance ; <nl> <nl> @ Test <nl> + public void testDiff ( ) <nl> + { <nl> + RangeTombstoneList superset ; <nl> + RangeTombstoneList subset ; <nl> + RangeTombstoneList diff ; <nl> + Iterator < RangeTombstone > iter ; <nl> + <nl> + / / no difference <nl> + superset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + subset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + superset . add ( rt ( 1 , 10 , 10 ) ) ; <nl> + superset . add ( rt ( 20 , 30 , 10 ) ) ; <nl> + superset . add ( rt ( 40 , 50 , 10 ) ) ; <nl> + subset . add ( rt ( 1 , 10 , 10 ) ) ; <nl> + subset . add ( rt ( 20 , 30 , 10 ) ) ; <nl> + subset . add ( rt ( 40 , 50 , 10 ) ) ; <nl> + assertNull ( subset . diff ( superset ) ) ; <nl> + <nl> + / / all items in subset are contained by the first range in the superset <nl> + superset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + subset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + subset . add ( rt ( 1 , 2 , 3 ) ) ; <nl> + subset . add ( rt ( 3 , 4 , 4 ) ) ; <nl> + subset . add ( rt ( 5 , 6 , 5 ) ) ; <nl> + superset . add ( rt ( 1 , 10 , 10 ) ) ; <nl> + superset . add ( rt ( 20 , 30 , 10 ) ) ; <nl> + superset . add ( rt ( 40 , 50 , 10 ) ) ; <nl> + diff = subset . diff ( superset ) ; <nl> + iter = diff . iterator ( ) ; <nl> + assertRT ( rt ( 1 , 10 , 10 ) , iter . next ( ) ) ; <nl> + assertRT ( rt ( 20 , 30 , 10 ) , iter . next ( ) ) ; <nl> + assertRT ( rt ( 40 , 50 , 10 ) , iter . next ( ) ) ; <nl> + assertFalse ( iter . hasNext ( ) ) ; <nl> + <nl> + / / multiple subset RTs are contained by superset RTs <nl> + superset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + subset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + subset . add ( rt ( 1 , 2 , 1 ) ) ; <nl> + subset . add ( rt ( 3 , 4 , 2 ) ) ; <nl> + subset . add ( rt ( 5 , 6 , 3 ) ) ; <nl> + superset . add ( rt ( 1 , 5 , 2 ) ) ; <nl> + superset . add ( rt ( 5 , 6 , 3 ) ) ; <nl> + superset . add ( rt ( 6 , 10 , 2 ) ) ; <nl> + diff = subset . diff ( superset ) ; <nl> + iter = diff . iterator ( ) ; <nl> + assertRT ( rt ( 1 , 5 , 2 ) , iter . next ( ) ) ; <nl> + assertRT ( rt ( 6 , 10 , 2 ) , iter . next ( ) ) ; <nl> + assertFalse ( iter . hasNext ( ) ) ; <nl> + <nl> + / / the superset has one RT that covers the entire subset <nl> + superset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + subset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + superset . add ( rt ( 1 , 50 , 10 ) ) ; <nl> + subset . add ( rt ( 1 , 10 , 10 ) ) ; <nl> + subset . add ( rt ( 20 , 30 , 10 ) ) ; <nl> + subset . add ( rt ( 40 , 50 , 10 ) ) ; <nl> + diff = subset . diff ( superset ) ; <nl> + iter = diff . iterator ( ) ; <nl> + assertRT ( rt ( 1 , 50 , 10 ) , iter . next ( ) ) ; <nl> + assertFalse ( iter . hasNext ( ) ) ; <nl> + <nl> + / / the superset has one RT that covers the remainder of the subset <nl> + superset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + subset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + superset . add ( rt ( 1 , 10 , 10 ) ) ; <nl> + superset . add ( rt ( 20 , 50 , 10 ) ) ; <nl> + subset . add ( rt ( 1 , 10 , 10 ) ) ; <nl> + subset . add ( rt ( 20 , 30 , 10 ) ) ; <nl> + subset . add ( rt ( 40 , 50 , 10 ) ) ; <nl> + diff = subset . diff ( superset ) ; <nl> + iter = diff . iterator ( ) ; <nl> + assertRT ( rt ( 20 , 50 , 10 ) , iter . next ( ) ) ; <nl> + assertFalse ( iter . hasNext ( ) ) ; <nl> + <nl> + / / only the timestamp differs on one RT <nl> + superset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + subset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + superset . add ( rt ( 1 , 10 , 10 ) ) ; <nl> + superset . add ( rt ( 20 , 30 , 20 ) ) ; <nl> + superset . add ( rt ( 40 , 50 , 10 ) ) ; <nl> + subset . add ( rt ( 1 , 10 , 10 ) ) ; <nl> + subset . add ( rt ( 20 , 30 , 10 ) ) ; <nl> + subset . add ( rt ( 40 , 50 , 10 ) ) ; <nl> + diff = subset . diff ( superset ) ; <nl> + iter = diff . iterator ( ) ; <nl> + assertRT ( rt ( 20 , 30 , 20 ) , iter . next ( ) ) ; <nl> + assertFalse ( iter . hasNext ( ) ) ; <nl> + <nl> + / / superset has a large range on an RT at the start <nl> + superset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + subset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + superset . add ( rt ( 1 , 10 , 10 ) ) ; <nl> + superset . add ( rt ( 20 , 30 , 10 ) ) ; <nl> + superset . add ( rt ( 40 , 50 , 10 ) ) ; <nl> + subset . add ( rt ( 1 , 2 , 3 ) ) ; <nl> + subset . add ( rt ( 20 , 30 , 10 ) ) ; <nl> + subset . add ( rt ( 40 , 50 , 10 ) ) ; <nl> + diff = subset . diff ( superset ) ; <nl> + iter = diff . iterator ( ) ; <nl> + assertRT ( rt ( 1 , 10 , 10 ) , iter . next ( ) ) ; <nl> + assertFalse ( iter . hasNext ( ) ) ; <nl> + <nl> + / / superset has a larger range on an RT in the middle <nl> + superset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + subset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + superset . add ( rt ( 1 , 10 , 10 ) ) ; <nl> + superset . add ( rt ( 20 , 30 , 10 ) ) ; <nl> + superset . add ( rt ( 40 , 50 , 10 ) ) ; <nl> + subset . add ( rt ( 1 , 10 , 10 ) ) ; <nl> + subset . add ( rt ( 20 , 25 , 10 ) ) ; <nl> + subset . add ( rt ( 40 , 50 , 10 ) ) ; <nl> + diff = subset . diff ( superset ) ; <nl> + iter = diff . iterator ( ) ; <nl> + assertRT ( rt ( 20 , 30 , 10 ) , iter . next ( ) ) ; <nl> + assertFalse ( iter . hasNext ( ) ) ; <nl> + <nl> + / / superset has a larger range on an RT at the end <nl> + superset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + subset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + superset . add ( rt ( 1 , 10 , 10 ) ) ; <nl> + superset . add ( rt ( 20 , 30 , 10 ) ) ; <nl> + superset . add ( rt ( 40 , 55 , 10 ) ) ; <nl> + subset . add ( rt ( 1 , 10 , 10 ) ) ; <nl> + subset . add ( rt ( 20 , 30 , 10 ) ) ; <nl> + subset . add ( rt ( 40 , 50 , 10 ) ) ; <nl> + diff = subset . diff ( superset ) ; <nl> + iter = diff . iterator ( ) ; <nl> + assertRT ( rt ( 40 , 55 , 10 ) , iter . next ( ) ) ; <nl> + assertFalse ( iter . hasNext ( ) ) ; <nl> + <nl> + / / superset has one additional RT in the middle <nl> + superset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + subset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + superset . add ( rt ( 1 , 10 , 10 ) ) ; <nl> + superset . add ( rt ( 20 , 30 , 10 ) ) ; <nl> + superset . add ( rt ( 40 , 50 , 10 ) ) ; <nl> + subset . add ( rt ( 1 , 10 , 10 ) ) ; <nl> + subset . add ( rt ( 40 , 50 , 10 ) ) ; <nl> + diff = subset . diff ( superset ) ; <nl> + iter = diff . iterator ( ) ; <nl> + assertRT ( rt ( 20 , 30 , 10 ) , iter . next ( ) ) ; <nl> + assertFalse ( iter . hasNext ( ) ) ; <nl> + <nl> + / / superset has one additional RT at the start <nl> + superset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + subset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + superset . add ( rt ( 1 , 10 , 10 ) ) ; <nl> + superset . add ( rt ( 20 , 30 , 10 ) ) ; <nl> + superset . add ( rt ( 40 , 50 , 10 ) ) ; <nl> + subset . add ( rt ( 20 , 30 , 10 ) ) ; <nl> + subset . add ( rt ( 40 , 50 , 10 ) ) ; <nl> + diff = subset . diff ( superset ) ; <nl> + iter = diff . iterator ( ) ; <nl> + assertRT ( rt ( 1 , 10 , 10 ) , iter . next ( ) ) ; <nl> + assertFalse ( iter . hasNext ( ) ) ; <nl> + <nl> + / / superset has one additional RT at the end <nl> + superset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + subset = new RangeTombstoneList ( cmp , 10 ) ; <nl> + superset . add ( rt ( 1 , 10 , 10 ) ) ; <nl> + superset . add ( rt ( 20 , 30 , 10 ) ) ; <nl> + superset . add ( rt ( 40 , 50 , 10 ) ) ; <nl> + subset . add ( rt ( 1 , 10 , 10 ) ) ; <nl> + subset . add ( rt ( 20 , 30 , 10 ) ) ; <nl> + diff = subset . diff ( superset ) ; <nl> + iter = diff . iterator ( ) ; <nl> + assertRT ( rt ( 40 , 50 , 10 ) , iter . next ( ) ) ; <nl> + assertFalse ( iter . hasNext ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void sortedAdditionTest ( ) <nl> { <nl> sortedAdditionTest ( 0 ) ; <nl> @ @ - 193 , 12 + 364 , 6 @ @ public class RangeTombstoneListTest <nl> @ Test <nl> public void addAllTest ( ) <nl> { <nl> - / / addAllTest ( false ) ; <nl> - addAllTest ( true ) ; <nl> - } <nl> - <nl> - private void addAllTest ( boolean doMerge ) <nl> - { <nl> RangeTombstoneList l1 = new RangeTombstoneList ( cmp , 0 ) ; <nl> l1 . add ( rt ( 0 , 4 , 5 ) ) ; <nl> l1 . add ( rt ( 6 , 10 , 2 ) ) ; <nl> @ @ - 364 , 6 + 529 , 7 @ @ public class RangeTombstoneListTest <nl> { <nl> System . out . println ( " Error merging : " ) ; <nl> System . out . println ( " l1 : " + toString ( l1Initial ) ) ; <nl> + System . out . println ( " l2 : " + toString ( l2 ) ) ; <nl> System . out . println ( " Seed was : " + seed ) ; <nl> throw e ; <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 905445e . . 0e4ade3 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 17 
 + * Backport CASSANDRA - 8013 to 2 . 0 ( CASSANDRA - 10144 ) 
 * Make getFullyExpiredSSTables less expensive ( CASSANDRA - 9882 ) 
 * Add tool to find why expired sstables are not getting dropped ( CASSANDRA - 10015 ) 
 * Remove erroneous pending HH tasks from tpstats / jmx ( CASSANDRA - 9129 ) 
 diff - - git a / src / java / org / apache / cassandra / db / RangeTombstoneList . java b / src / java / org / apache / cassandra / db / RangeTombstoneList . java 
 index 165718e . . cfdd54e 100644 
 - - - a / src / java / org / apache / cassandra / db / RangeTombstoneList . java 
 + + + b / src / java / org / apache / cassandra / db / RangeTombstoneList . java 
 @ @ - 343 , 29 + 343 , 37 @ @ public class RangeTombstoneList implements Iterable < RangeTombstone > 
 if ( isEmpty ( ) ) 
 return superset ; 
 
 - assert size < = superset . size ; 
 - 
 RangeTombstoneList diff = null ; 
 
 int j = 0 ; / / index to iterate through our own list 
 for ( int i = 0 ; i < superset . size ; i + + ) 
 { 
 - boolean sameStart = j < size & & starts [ j ] . equals ( superset . starts [ i ] ) ; 
 - / / don ' t care about local deletion time here . for RR it doesn ' t makes sense 
 - if ( ! sameStart 
 + / / we can assume that this list is a subset of the superset list 
 + while ( j < size & & comparator . compare ( starts [ j ] , superset . starts [ i ] ) < 0 ) 
 + j + + ; 
 + 
 + if ( j > = size ) 
 + { 
 + / / we ' re at the end of our own list , add the remainder of the superset to the diff 
 + if ( i < superset . size ) 
 + { 
 + if ( diff = = null ) 
 + diff = new RangeTombstoneList ( comparator , superset . size - i ) ; 
 + 
 + for ( int k = i ; k < superset . size ; k + + ) 
 + diff . add ( superset . starts [ k ] , superset . ends [ k ] , superset . markedAts [ k ] , superset . delTimes [ k ] ) ; 
 + } 
 + return diff ; 
 + } 
 + 
 + / / we don ' t care about local deletion time here , because it doesn ' t matter for read repair 
 + if ( ! starts [ j ] . equals ( superset . starts [ i ] ) 
 | | ! ends [ j ] . equals ( superset . ends [ i ] ) 
 | | markedAts [ j ] ! = superset . markedAts [ i ] ) 
 { 
 if ( diff = = null ) 
 diff = new RangeTombstoneList ( comparator , Math . min ( 8 , superset . size - i ) ) ; 
 diff . add ( superset . starts [ i ] , superset . ends [ i ] , superset . markedAts [ i ] , superset . delTimes [ i ] ) ; 
 - 
 - if ( sameStart ) 
 - j + + ; 
 - } 
 - else 
 - { 
 - j + + ; 
 } 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / db / RangeTombstoneListTest . java b / test / unit / org / apache / cassandra / db / RangeTombstoneListTest . java 
 index 2a7c90f . . d4bc463 100644 
 - - - a / test / unit / org / apache / cassandra / db / RangeTombstoneListTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RangeTombstoneListTest . java 
 @ @ - 32 , 6 + 32 , 177 @ @ public class RangeTombstoneListTest 
 private static final Comparator < ByteBuffer > cmp = IntegerType . instance ; 
 
 @ Test 
 + public void testDiff ( ) 
 + { 
 + RangeTombstoneList superset ; 
 + RangeTombstoneList subset ; 
 + RangeTombstoneList diff ; 
 + Iterator < RangeTombstone > iter ; 
 + 
 + / / no difference 
 + superset = new RangeTombstoneList ( cmp , 10 ) ; 
 + subset = new RangeTombstoneList ( cmp , 10 ) ; 
 + superset . add ( rt ( 1 , 10 , 10 ) ) ; 
 + superset . add ( rt ( 20 , 30 , 10 ) ) ; 
 + superset . add ( rt ( 40 , 50 , 10 ) ) ; 
 + subset . add ( rt ( 1 , 10 , 10 ) ) ; 
 + subset . add ( rt ( 20 , 30 , 10 ) ) ; 
 + subset . add ( rt ( 40 , 50 , 10 ) ) ; 
 + assertNull ( subset . diff ( superset ) ) ; 
 + 
 + / / all items in subset are contained by the first range in the superset 
 + superset = new RangeTombstoneList ( cmp , 10 ) ; 
 + subset = new RangeTombstoneList ( cmp , 10 ) ; 
 + subset . add ( rt ( 1 , 2 , 3 ) ) ; 
 + subset . add ( rt ( 3 , 4 , 4 ) ) ; 
 + subset . add ( rt ( 5 , 6 , 5 ) ) ; 
 + superset . add ( rt ( 1 , 10 , 10 ) ) ; 
 + superset . add ( rt ( 20 , 30 , 10 ) ) ; 
 + superset . add ( rt ( 40 , 50 , 10 ) ) ; 
 + diff = subset . diff ( superset ) ; 
 + iter = diff . iterator ( ) ; 
 + assertRT ( rt ( 1 , 10 , 10 ) , iter . next ( ) ) ; 
 + assertRT ( rt ( 20 , 30 , 10 ) , iter . next ( ) ) ; 
 + assertRT ( rt ( 40 , 50 , 10 ) , iter . next ( ) ) ; 
 + assertFalse ( iter . hasNext ( ) ) ; 
 + 
 + / / multiple subset RTs are contained by superset RTs 
 + superset = new RangeTombstoneList ( cmp , 10 ) ; 
 + subset = new RangeTombstoneList ( cmp , 10 ) ; 
 + subset . add ( rt ( 1 , 2 , 1 ) ) ; 
 + subset . add ( rt ( 3 , 4 , 2 ) ) ; 
 + subset . add ( rt ( 5 , 6 , 3 ) ) ; 
 + superset . add ( rt ( 1 , 5 , 2 ) ) ; 
 + superset . add ( rt ( 5 , 6 , 3 ) ) ; 
 + superset . add ( rt ( 6 , 10 , 2 ) ) ; 
 + diff = subset . diff ( superset ) ; 
 + iter = diff . iterator ( ) ; 
 + assertRT ( rt ( 1 , 5 , 2 ) , iter . next ( ) ) ; 
 + assertRT ( rt ( 6 , 10 , 2 ) , iter . next ( ) ) ; 
 + assertFalse ( iter . hasNext ( ) ) ; 
 + 
 + / / the superset has one RT that covers the entire subset 
 + superset = new RangeTombstoneList ( cmp , 10 ) ; 
 + subset = new RangeTombstoneList ( cmp , 10 ) ; 
 + superset . add ( rt ( 1 , 50 , 10 ) ) ; 
 + subset . add ( rt ( 1 , 10 , 10 ) ) ; 
 + subset . add ( rt ( 20 , 30 , 10 ) ) ; 
 + subset . add ( rt ( 40 , 50 , 10 ) ) ; 
 + diff = subset . diff ( superset ) ; 
 + iter = diff . iterator ( ) ; 
 + assertRT ( rt ( 1 , 50 , 10 ) , iter . next ( ) ) ; 
 + assertFalse ( iter . hasNext ( ) ) ; 
 + 
 + / / the superset has one RT that covers the remainder of the subset 
 + superset = new RangeTombstoneList ( cmp , 10 ) ; 
 + subset = new RangeTombstoneList ( cmp , 10 ) ; 
 + superset . add ( rt ( 1 , 10 , 10 ) ) ; 
 + superset . add ( rt ( 20 , 50 , 10 ) ) ; 
 + subset . add ( rt ( 1 , 10 , 10 ) ) ; 
 + subset . add ( rt ( 20 , 30 , 10 ) ) ; 
 + subset . add ( rt ( 40 , 50 , 10 ) ) ; 
 + diff = subset . diff ( superset ) ; 
 + iter = diff . iterator ( ) ; 
 + assertRT ( rt ( 20 , 50 , 10 ) , iter . next ( ) ) ; 
 + assertFalse ( iter . hasNext ( ) ) ; 
 + 
 + / / only the timestamp differs on one RT 
 + superset = new RangeTombstoneList ( cmp , 10 ) ; 
 + subset = new RangeTombstoneList ( cmp , 10 ) ; 
 + superset . add ( rt ( 1 , 10 , 10 ) ) ; 
 + superset . add ( rt ( 20 , 30 , 20 ) ) ; 
 + superset . add ( rt ( 40 , 50 , 10 ) ) ; 
 + subset . add ( rt ( 1 , 10 , 10 ) ) ; 
 + subset . add ( rt ( 20 , 30 , 10 ) ) ; 
 + subset . add ( rt ( 40 , 50 , 10 ) ) ; 
 + diff = subset . diff ( superset ) ; 
 + iter = diff . iterator ( ) ; 
 + assertRT ( rt ( 20 , 30 , 20 ) , iter . next ( ) ) ; 
 + assertFalse ( iter . hasNext ( ) ) ; 
 + 
 + / / superset has a large range on an RT at the start 
 + superset = new RangeTombstoneList ( cmp , 10 ) ; 
 + subset = new RangeTombstoneList ( cmp , 10 ) ; 
 + superset . add ( rt ( 1 , 10 , 10 ) ) ; 
 + superset . add ( rt ( 20 , 30 , 10 ) ) ; 
 + superset . add ( rt ( 40 , 50 , 10 ) ) ; 
 + subset . add ( rt ( 1 , 2 , 3 ) ) ; 
 + subset . add ( rt ( 20 , 30 , 10 ) ) ; 
 + subset . add ( rt ( 40 , 50 , 10 ) ) ; 
 + diff = subset . diff ( superset ) ; 
 + iter = diff . iterator ( ) ; 
 + assertRT ( rt ( 1 , 10 , 10 ) , iter . next ( ) ) ; 
 + assertFalse ( iter . hasNext ( ) ) ; 
 + 
 + / / superset has a larger range on an RT in the middle 
 + superset = new RangeTombstoneList ( cmp , 10 ) ; 
 + subset = new RangeTombstoneList ( cmp , 10 ) ; 
 + superset . add ( rt ( 1 , 10 , 10 ) ) ; 
 + superset . add ( rt ( 20 , 30 , 10 ) ) ; 
 + superset . add ( rt ( 40 , 50 , 10 ) ) ; 
 + subset . add ( rt ( 1 , 10 , 10 ) ) ; 
 + subset . add ( rt ( 20 , 25 , 10 ) ) ; 
 + subset . add ( rt ( 40 , 50 , 10 ) ) ; 
 + diff = subset . diff ( superset ) ; 
 + iter = diff . iterator ( ) ; 
 + assertRT ( rt ( 20 , 30 , 10 ) , iter . next ( ) ) ; 
 + assertFalse ( iter . hasNext ( ) ) ; 
 + 
 + / / superset has a larger range on an RT at the end 
 + superset = new RangeTombstoneList ( cmp , 10 ) ; 
 + subset = new RangeTombstoneList ( cmp , 10 ) ; 
 + superset . add ( rt ( 1 , 10 , 10 ) ) ; 
 + superset . add ( rt ( 20 , 30 , 10 ) ) ; 
 + superset . add ( rt ( 40 , 55 , 10 ) ) ; 
 + subset . add ( rt ( 1 , 10 , 10 ) ) ; 
 + subset . add ( rt ( 20 , 30 , 10 ) ) ; 
 + subset . add ( rt ( 40 , 50 , 10 ) ) ; 
 + diff = subset . diff ( superset ) ; 
 + iter = diff . iterator ( ) ; 
 + assertRT ( rt ( 40 , 55 , 10 ) , iter . next ( ) ) ; 
 + assertFalse ( iter . hasNext ( ) ) ; 
 + 
 + / / superset has one additional RT in the middle 
 + superset = new RangeTombstoneList ( cmp , 10 ) ; 
 + subset = new RangeTombstoneList ( cmp , 10 ) ; 
 + superset . add ( rt ( 1 , 10 , 10 ) ) ; 
 + superset . add ( rt ( 20 , 30 , 10 ) ) ; 
 + superset . add ( rt ( 40 , 50 , 10 ) ) ; 
 + subset . add ( rt ( 1 , 10 , 10 ) ) ; 
 + subset . add ( rt ( 40 , 50 , 10 ) ) ; 
 + diff = subset . diff ( superset ) ; 
 + iter = diff . iterator ( ) ; 
 + assertRT ( rt ( 20 , 30 , 10 ) , iter . next ( ) ) ; 
 + assertFalse ( iter . hasNext ( ) ) ; 
 + 
 + / / superset has one additional RT at the start 
 + superset = new RangeTombstoneList ( cmp , 10 ) ; 
 + subset = new RangeTombstoneList ( cmp , 10 ) ; 
 + superset . add ( rt ( 1 , 10 , 10 ) ) ; 
 + superset . add ( rt ( 20 , 30 , 10 ) ) ; 
 + superset . add ( rt ( 40 , 50 , 10 ) ) ; 
 + subset . add ( rt ( 20 , 30 , 10 ) ) ; 
 + subset . add ( rt ( 40 , 50 , 10 ) ) ; 
 + diff = subset . diff ( superset ) ; 
 + iter = diff . iterator ( ) ; 
 + assertRT ( rt ( 1 , 10 , 10 ) , iter . next ( ) ) ; 
 + assertFalse ( iter . hasNext ( ) ) ; 
 + 
 + / / superset has one additional RT at the end 
 + superset = new RangeTombstoneList ( cmp , 10 ) ; 
 + subset = new RangeTombstoneList ( cmp , 10 ) ; 
 + superset . add ( rt ( 1 , 10 , 10 ) ) ; 
 + superset . add ( rt ( 20 , 30 , 10 ) ) ; 
 + superset . add ( rt ( 40 , 50 , 10 ) ) ; 
 + subset . add ( rt ( 1 , 10 , 10 ) ) ; 
 + subset . add ( rt ( 20 , 30 , 10 ) ) ; 
 + diff = subset . diff ( superset ) ; 
 + iter = diff . iterator ( ) ; 
 + assertRT ( rt ( 40 , 50 , 10 ) , iter . next ( ) ) ; 
 + assertFalse ( iter . hasNext ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void sortedAdditionTest ( ) 
 { 
 sortedAdditionTest ( 0 ) ; 
 @ @ - 193 , 12 + 364 , 6 @ @ public class RangeTombstoneListTest 
 @ Test 
 public void addAllTest ( ) 
 { 
 - / / addAllTest ( false ) ; 
 - addAllTest ( true ) ; 
 - } 
 - 
 - private void addAllTest ( boolean doMerge ) 
 - { 
 RangeTombstoneList l1 = new RangeTombstoneList ( cmp , 0 ) ; 
 l1 . add ( rt ( 0 , 4 , 5 ) ) ; 
 l1 . add ( rt ( 6 , 10 , 2 ) ) ; 
 @ @ - 364 , 6 + 529 , 7 @ @ public class RangeTombstoneListTest 
 { 
 System . out . println ( " Error merging : " ) ; 
 System . out . println ( " l1 : " + toString ( l1Initial ) ) ; 
 + System . out . println ( " l2 : " + toString ( l2 ) ) ; 
 System . out . println ( " Seed was : " + seed ) ; 
 throw e ; 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
