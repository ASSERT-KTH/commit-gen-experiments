BLEU SCORE: 0.020980574531482755

TEST MSG: Ninja : add beforeAndAfterFlush to 2i and filtering tests .
GENERATED MSG: Support Restricting non - PK Cols in MV Select Statements

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java <nl> index 05c11a4 . . 5cb76c9 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java <nl> @ @ - 174 , 10 + 174 , 12 @ @ public class SecondaryIndexTest extends CQLTester <nl> execute ( " INSERT INTO % s ( userid , firstname , lastname , age ) VALUES ( ? , ' Frodo ' , ' Baggins ' , 32 ) " , id1 ) ; <nl> execute ( " UPDATE % s SET firstname = ' Samwise ' , lastname = ' Gamgee ' , age = 33 WHERE userid = ? " , id2 ) ; <nl> <nl> - assertEmpty ( execute ( " SELECT firstname FROM % s WHERE userid = ? AND age = 33 " , id1 ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertEmpty ( execute ( " SELECT firstname FROM % s WHERE userid = ? AND age = 33 " , id1 ) ) ; <nl> <nl> - assertRows ( execute ( " SELECT firstname FROM % s WHERE userid = ? AND age = 33 " , id2 ) , <nl> - row ( " Samwise " ) ) ; <nl> + assertRows ( execute ( " SELECT firstname FROM % s WHERE userid = ? AND age = 33 " , id2 ) , <nl> + row ( " Samwise " ) ) ; <nl> + } ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 195 , 9 + 197 , 11 @ @ public class SecondaryIndexTest extends CQLTester <nl> execute ( " INSERT INTO % s ( id , birth _ year ) VALUES ( ' Paul ' , 24 ) " ) ; <nl> execute ( " INSERT INTO % s ( id , birth _ year ) VALUES ( ' Bob ' , 42 ) " ) ; <nl> <nl> - assertRows ( execute ( " SELECT id FROM % s WHERE birth _ year = 42 " ) , <nl> - row ( " Tom " ) , <nl> - row ( " Bob " ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertRows ( execute ( " SELECT id FROM % s WHERE birth _ year = 42 " ) , <nl> + row ( " Tom " ) , <nl> + row ( " Bob " ) ) ; <nl> + } ) ; <nl> <nl> execute ( " DROP INDEX % s _ birth _ year _ idx " ) ; <nl> <nl> @ @ - 221 , 8 + 225 , 10 @ @ public class SecondaryIndexTest extends CQLTester <nl> <nl> assertInvalid ( " SELECT * FROM % s WHERE setid = 0 AND row < 1 " ) ; <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE setid = 0 AND row < 1 ALLOW FILTERING " ) , <nl> - row ( 0 , 0 , 0 ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE setid = 0 AND row < 1 ALLOW FILTERING " ) , <nl> + row ( 0 , 0 , 0 ) ) ; <nl> + } ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 267 , 27 + 273 , 33 @ @ public class SecondaryIndexTest extends CQLTester <nl> <nl> assertTrue ( waitForIndex ( keyspace ( ) , tableName , " authoridx " ) ) ; <nl> <nl> - assertRows ( execute ( " SELECT blog _ id , timestamp FROM % s WHERE author = ' bob ' " ) , <nl> - row ( 1 , 0 ) , <nl> - row ( 0 , 0 ) , <nl> - row ( 0 , 2 ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertRows ( execute ( " SELECT blog _ id , timestamp FROM % s WHERE author = ' bob ' " ) , <nl> + row ( 1 , 0 ) , <nl> + row ( 0 , 0 ) , <nl> + row ( 0 , 2 ) ) ; <nl> + } ) ; <nl> <nl> execute ( " INSERT INTO % s ( blog _ id , timestamp , author , content ) VALUES ( ? , ? , ? , ? ) " , 1 , 1 , " tom " , " 6th post " ) ; <nl> execute ( " INSERT INTO % s ( blog _ id , timestamp , author , content ) VALUES ( ? , ? , ? , ? ) " , 1 , 2 , " tom " , " 7th post " ) ; <nl> execute ( " INSERT INTO % s ( blog _ id , timestamp , author , content ) VALUES ( ? , ? , ? , ? ) " , 1 , 3 , " bob " , " 8th post " ) ; <nl> <nl> - assertRows ( execute ( " SELECT blog _ id , timestamp FROM % s WHERE author = ' bob ' " ) , <nl> - row ( 1 , 0 ) , <nl> - row ( 1 , 3 ) , <nl> - row ( 0 , 0 ) , <nl> - row ( 0 , 2 ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertRows ( execute ( " SELECT blog _ id , timestamp FROM % s WHERE author = ' bob ' " ) , <nl> + row ( 1 , 0 ) , <nl> + row ( 1 , 3 ) , <nl> + row ( 0 , 0 ) , <nl> + row ( 0 , 2 ) ) ; <nl> + } ) ; <nl> <nl> execute ( " DELETE FROM % s WHERE blog _ id = 0 AND timestamp = 2 " ) ; <nl> <nl> - assertRows ( execute ( " SELECT blog _ id , timestamp FROM % s WHERE author = ' bob ' " ) , <nl> - row ( 1 , 0 ) , <nl> - row ( 1 , 3 ) , <nl> - row ( 0 , 0 ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertRows ( execute ( " SELECT blog _ id , timestamp FROM % s WHERE author = ' bob ' " ) , <nl> + row ( 1 , 0 ) , <nl> + row ( 1 , 3 ) , <nl> + row ( 0 , 0 ) ) ; <nl> + } ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 337 , 17 + 349 , 19 @ @ public class SecondaryIndexTest extends CQLTester <nl> execute ( " INSERT INTO % s ( pk0 , pk1 , ck0 , ck1 , ck2 , value ) VALUES ( 4 , 5 , 0 , 1 , 2 , 3 ) " ) ; <nl> execute ( " INSERT INTO % s ( pk0 , pk1 , ck0 , ck1 , ck2 , value ) VALUES ( 5 , 0 , 1 , 2 , 3 , 4 ) " ) ; <nl> <nl> - assertRows ( execute ( " SELECT value FROM % s WHERE pk0 = 2 " ) , <nl> - row ( 1 ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertRows ( execute ( " SELECT value FROM % s WHERE pk0 = 2 " ) , <nl> + row ( 1 ) ) ; <nl> <nl> - assertRows ( execute ( " SELECT value FROM % s WHERE ck0 = 0 " ) , <nl> - row ( 3 ) ) ; <nl> + assertRows ( execute ( " SELECT value FROM % s WHERE ck0 = 0 " ) , <nl> + row ( 3 ) ) ; <nl> <nl> - assertRows ( execute ( " SELECT value FROM % s WHERE pk0 = 3 AND pk1 = 4 AND ck1 = 0 " ) , <nl> - row ( 2 ) ) ; <nl> + assertRows ( execute ( " SELECT value FROM % s WHERE pk0 = 3 AND pk1 = 4 AND ck1 = 0 " ) , <nl> + row ( 2 ) ) ; <nl> <nl> - assertRows ( execute ( " SELECT value FROM % s WHERE pk0 = 5 AND pk1 = 0 AND ck0 = 1 AND ck2 = 3 ALLOW FILTERING " ) , <nl> - row ( 4 ) ) ; <nl> + assertRows ( execute ( " SELECT value FROM % s WHERE pk0 = 5 AND pk1 = 0 AND ck0 = 1 AND ck2 = 3 ALLOW FILTERING " ) , <nl> + row ( 4 ) ) ; <nl> + } ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 370 , 8 + 384 , 11 @ @ public class SecondaryIndexTest extends CQLTester <nl> execute ( " insert into % s ( interval , seq , id , severity ) values ( ' t ' , 2 , 3 , 1 ) " ) ; <nl> execute ( " insert into % s ( interval , seq , id , severity ) values ( ' t ' , 2 , 4 , 2 ) " ) ; <nl> <nl> - assertRows ( execute ( " select * from % s where severity = 3 and interval = ' t ' and seq = 1 " ) , <nl> - row ( " t " , 1 , 4 , 3 ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertRows ( execute ( " select * from % s where severity = 3 and interval = ' t ' and seq = 1 " ) , <nl> + row ( " t " , 1 , 4 , 3 ) ) ; <nl> + <nl> + } ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 402 , 23 + 419 , 25 @ @ public class SecondaryIndexTest extends CQLTester <nl> execute ( " INSERT INTO % s ( k , v , l , s , m ) VALUES ( 1 , 0 , [ 1 , 2 , 4 ] , { } , { ' b ' : 1 } ) " ) ; <nl> execute ( " INSERT INTO % s ( k , v , l , s , m ) VALUES ( 1 , 1 , [ 4 , 5 ] , { ' d ' } , { ' a ' : 1 , ' b ' : 3 } ) " ) ; <nl> <nl> - / / lists <nl> - assertRows ( execute ( " SELECT k , v FROM % s WHERE l CONTAINS 1 " ) , row ( 1 , 0 ) , row ( 0 , 0 ) , row ( 0 , 2 ) ) ; <nl> - assertRows ( execute ( " SELECT k , v FROM % s WHERE k = 0 AND l CONTAINS 1 " ) , row ( 0 , 0 ) , row ( 0 , 2 ) ) ; <nl> - assertRows ( execute ( " SELECT k , v FROM % s WHERE l CONTAINS 2 " ) , row ( 1 , 0 ) , row ( 0 , 0 ) ) ; <nl> - assertEmpty ( execute ( " SELECT k , v FROM % s WHERE l CONTAINS 6 " ) ) ; <nl> - <nl> - / / sets <nl> - assertRows ( execute ( " SELECT k , v FROM % s WHERE s CONTAINS ' a ' " ) , row ( 0 , 0 ) , row ( 0 , 2 ) ) ; <nl> - assertRows ( execute ( " SELECT k , v FROM % s WHERE k = 0 AND s CONTAINS ' a ' " ) , row ( 0 , 0 ) , row ( 0 , 2 ) ) ; <nl> - assertRows ( execute ( " SELECT k , v FROM % s WHERE s CONTAINS ' d ' " ) , row ( 1 , 1 ) ) ; <nl> - assertEmpty ( execute ( " SELECT k , v FROM % s WHERE s CONTAINS ' e ' " ) ) ; <nl> - <nl> - / / maps <nl> - assertRows ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS 1 " ) , row ( 1 , 0 ) , row ( 1 , 1 ) , row ( 0 , 0 ) , row ( 0 , 1 ) ) ; <nl> - assertRows ( execute ( " SELECT k , v FROM % s WHERE k = 0 AND m CONTAINS 1 " ) , row ( 0 , 0 ) , row ( 0 , 1 ) ) ; <nl> - assertRows ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS 2 " ) , row ( 0 , 1 ) ) ; <nl> - assertEmpty ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS 4 " ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + / / lists <nl> + assertRows ( execute ( " SELECT k , v FROM % s WHERE l CONTAINS 1 " ) , row ( 1 , 0 ) , row ( 0 , 0 ) , row ( 0 , 2 ) ) ; <nl> + assertRows ( execute ( " SELECT k , v FROM % s WHERE k = 0 AND l CONTAINS 1 " ) , row ( 0 , 0 ) , row ( 0 , 2 ) ) ; <nl> + assertRows ( execute ( " SELECT k , v FROM % s WHERE l CONTAINS 2 " ) , row ( 1 , 0 ) , row ( 0 , 0 ) ) ; <nl> + assertEmpty ( execute ( " SELECT k , v FROM % s WHERE l CONTAINS 6 " ) ) ; <nl> + <nl> + / / sets <nl> + assertRows ( execute ( " SELECT k , v FROM % s WHERE s CONTAINS ' a ' " ) , row ( 0 , 0 ) , row ( 0 , 2 ) ) ; <nl> + assertRows ( execute ( " SELECT k , v FROM % s WHERE k = 0 AND s CONTAINS ' a ' " ) , row ( 0 , 0 ) , row ( 0 , 2 ) ) ; <nl> + assertRows ( execute ( " SELECT k , v FROM % s WHERE s CONTAINS ' d ' " ) , row ( 1 , 1 ) ) ; <nl> + assertEmpty ( execute ( " SELECT k , v FROM % s WHERE s CONTAINS ' e ' " ) ) ; <nl> + <nl> + / / maps <nl> + assertRows ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS 1 " ) , row ( 1 , 0 ) , row ( 1 , 1 ) , row ( 0 , 0 ) , row ( 0 , 1 ) ) ; <nl> + assertRows ( execute ( " SELECT k , v FROM % s WHERE k = 0 AND m CONTAINS 1 " ) , row ( 0 , 0 ) , row ( 0 , 1 ) ) ; <nl> + assertRows ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS 2 " ) , row ( 0 , 1 ) ) ; <nl> + assertEmpty ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS 4 " ) ) ; <nl> + } ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 438 , 10 + 457 , 12 @ @ public class SecondaryIndexTest extends CQLTester <nl> execute ( " INSERT INTO % s ( k , v , m ) VALUES ( 1 , 1 , { ' a ' : 1 , ' b ' : 3 } ) " ) ; <nl> <nl> / / maps <nl> - assertRows ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS KEY ' a ' " ) , row ( 1 , 1 ) , row ( 0 , 0 ) , row ( 0 , 1 ) ) ; <nl> - assertRows ( execute ( " SELECT k , v FROM % s WHERE k = 0 AND m CONTAINS KEY ' a ' " ) , row ( 0 , 0 ) , row ( 0 , 1 ) ) ; <nl> - assertRows ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS KEY ' c ' " ) , row ( 0 , 2 ) ) ; <nl> - assertEmpty ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS KEY ' d ' " ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertRows ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS KEY ' a ' " ) , row ( 1 , 1 ) , row ( 0 , 0 ) , row ( 0 , 1 ) ) ; <nl> + assertRows ( execute ( " SELECT k , v FROM % s WHERE k = 0 AND m CONTAINS KEY ' a ' " ) , row ( 0 , 0 ) , row ( 0 , 1 ) ) ; <nl> + assertRows ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS KEY ' c ' " ) , row ( 0 , 2 ) ) ; <nl> + assertEmpty ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS KEY ' d ' " ) ) ; <nl> + } ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 464 , 10 + 485 , 12 @ @ public class SecondaryIndexTest extends CQLTester <nl> execute ( " INSERT INTO % s ( k1 , k2 , v ) VALUES ( 2 , 1 , 8 ) " ) ; <nl> execute ( " INSERT INTO % s ( k1 , k2 , v ) VALUES ( 3 , 0 , 1 ) " ) ; <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE k2 = 0 AND v > = 2 ALLOW FILTERING " ) , <nl> - row ( 2 , 0 , 7 ) , <nl> - row ( 0 , 0 , 3 ) , <nl> - row ( 1 , 0 , 4 ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE k2 = 0 AND v > = 2 ALLOW FILTERING " ) , <nl> + row ( 2 , 0 , 7 ) , <nl> + row ( 0 , 0 , 3 ) , <nl> + row ( 1 , 0 , 4 ) ) ; <nl> + } ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 482 , 11 + 505 , 15 @ @ public class SecondaryIndexTest extends CQLTester <nl> createIndex ( " create index ON % s ( app _ name ) " ) ; <nl> createIndex ( " create index ON % s ( last _ access ) " ) ; <nl> <nl> - assertRows ( execute ( " select count ( * ) from % s where app _ name = ' foo ' and account = ' bar ' and last _ access > 4 allow filtering " ) , row ( 0L ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertRows ( execute ( " select count ( * ) from % s where app _ name = ' foo ' and account = ' bar ' and last _ access > 4 allow filtering " ) , row ( 0L ) ) ; <nl> + } ) ; <nl> <nl> execute ( " insert into % s ( username , session _ id , app _ name , account , last _ access , created _ on ) values ( ' toto ' , ' foo ' , ' foo ' , ' bar ' , 12 , 13 ) " ) ; <nl> <nl> - assertRows ( execute ( " select count ( * ) from % s where app _ name = ' foo ' and account = ' bar ' and last _ access > 4 allow filtering " ) , row ( 1L ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertRows ( execute ( " select count ( * ) from % s where app _ name = ' foo ' and account = ' bar ' and last _ access > 4 allow filtering " ) , row ( 1L ) ) ; <nl> + } ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java <nl> index 7d56a14 . . f167955 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java <nl> @ @ - 379 , 29 + 379 , 31 @ @ public class SelectTest extends CQLTester <nl> <nl> execute ( " INSERT INTO % s ( account , id , categories ) VALUES ( ? , ? , ? ) " , " test " , 5 , set ( " lmn " ) ) ; <nl> <nl> - assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " xyz " , " lmn " ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " xyz " , " lmn " ) ) ; <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE categories CONTAINS ? " , " lmn " ) , <nl> - row ( " test " , 5 , set ( " lmn " ) ) <nl> - ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE categories CONTAINS ? " , " lmn " ) , <nl> + row ( " test " , 5 , set ( " lmn " ) ) <nl> + ) ; <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " test " , " lmn " ) , <nl> - row ( " test " , 5 , set ( " lmn " ) ) <nl> - ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " test " , " lmn " ) , <nl> + row ( " test " , 5 , set ( " lmn " ) ) <nl> + ) ; <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , " lmn " ) , <nl> - row ( " test " , 5 , set ( " lmn " ) ) <nl> - ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , " lmn " ) , <nl> + row ( " test " , 5 , set ( " lmn " ) ) <nl> + ) ; <nl> <nl> - assertInvalidMessage ( " Unsupported null value for column categories " , <nl> - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , null ) ; <nl> + assertInvalidMessage ( " Unsupported null value for column categories " , <nl> + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , null ) ; <nl> <nl> - assertInvalidMessage ( " Unsupported unset value for column categories " , <nl> - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , unset ( ) ) ; <nl> + assertInvalidMessage ( " Unsupported unset value for column categories " , <nl> + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , unset ( ) ) ; <nl> <nl> - assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , <nl> - " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND categories CONTAINS ? " , " xyz " , " lmn " , " notPresent " ) ; <nl> - assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND categories CONTAINS ? ALLOW FILTERING " , " xyz " , " lmn " , " notPresent " ) ) ; <nl> + assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , <nl> + " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND categories CONTAINS ? " , " xyz " , " lmn " , " notPresent " ) ; <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND categories CONTAINS ? ALLOW FILTERING " , " xyz " , " lmn " , " notPresent " ) ) ; <nl> + } ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 411 , 32 + 413 , 33 @ @ public class SelectTest extends CQLTester <nl> createIndex ( " CREATE INDEX ON % s ( categories ) " ) ; <nl> <nl> execute ( " INSERT INTO % s ( account , id , categories ) VALUES ( ? , ? , ? ) " , " test " , 5 , list ( " lmn " ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " xyz " , " lmn " ) ) ; <nl> <nl> - assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " xyz " , " lmn " ) ) ; <nl> - <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? ; " , " test " , " lmn " ) , <nl> - row ( " test " , 5 , list ( " lmn " ) ) <nl> - ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? ; " , " test " , " lmn " ) , <nl> + row ( " test " , 5 , list ( " lmn " ) ) <nl> + ) ; <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE categories CONTAINS ? " , " lmn " ) , <nl> - row ( " test " , 5 , list ( " lmn " ) ) <nl> - ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE categories CONTAINS ? " , " lmn " ) , <nl> + row ( " test " , 5 , list ( " lmn " ) ) <nl> + ) ; <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? ; " , " test " , 5 , " lmn " ) , <nl> - row ( " test " , 5 , list ( " lmn " ) ) <nl> - ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? ; " , " test " , 5 , " lmn " ) , <nl> + row ( " test " , 5 , list ( " lmn " ) ) <nl> + ) ; <nl> <nl> - assertInvalidMessage ( " Unsupported null value for column categories " , <nl> - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , null ) ; <nl> + assertInvalidMessage ( " Unsupported null value for column categories " , <nl> + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , null ) ; <nl> <nl> - assertInvalidMessage ( " Unsupported unset value for column categories " , <nl> - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , unset ( ) ) ; <nl> + assertInvalidMessage ( " Unsupported unset value for column categories " , <nl> + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , unset ( ) ) ; <nl> <nl> - assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , <nl> - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? " , <nl> - " test " , 5 , " lmn " , " notPresent " ) ; <nl> - assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? ALLOW FILTERING " , <nl> - " test " , 5 , " lmn " , " notPresent " ) ) ; <nl> + assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , <nl> + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? " , <nl> + " test " , 5 , " lmn " , " notPresent " ) ; <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? ALLOW FILTERING " , <nl> + " test " , 5 , " lmn " , " notPresent " ) ) ; <nl> + } ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 452 , 9 + 455 , 12 @ @ public class SelectTest extends CQLTester <nl> { <nl> execute ( " INSERT INTO % s ( e , f , s ) VALUES ( ? , ? , ? ) " , i , list ( " Dubai " ) , 3 ) ; <nl> } <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE f CONTAINS ? AND s = ? allow filtering " , " Dubai " , 3 ) , <nl> - row ( 4 , list ( " Dubai " ) , 3 ) , <nl> - row ( 3 , list ( " Dubai " ) , 3 ) ) ; <nl> + <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE f CONTAINS ? AND s = ? allow filtering " , " Dubai " , 3 ) , <nl> + row ( 4 , list ( " Dubai " ) , 3 ) , <nl> + row ( 3 , list ( " Dubai " ) , 3 ) ) ; <nl> + } ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 465 , 34 + 471 , 36 @ @ public class SelectTest extends CQLTester <nl> <nl> execute ( " INSERT INTO % s ( account , id , categories ) VALUES ( ? , ? , ? ) " , " test " , 5 , map ( " lmn " , " foo " ) ) ; <nl> <nl> - assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? " , " xyz " , " lmn " ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? " , " xyz " , " lmn " ) ) ; <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? " , " test " , " lmn " ) , <nl> - row ( " test " , 5 , map ( " lmn " , " foo " ) ) <nl> - ) ; <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE categories CONTAINS KEY ? " , " lmn " ) , <nl> - row ( " test " , 5 , map ( " lmn " , " foo " ) ) <nl> - ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? " , " test " , " lmn " ) , <nl> + row ( " test " , 5 , map ( " lmn " , " foo " ) ) <nl> + ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE categories CONTAINS KEY ? " , " lmn " ) , <nl> + row ( " test " , 5 , map ( " lmn " , " foo " ) ) <nl> + ) ; <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? " , " test " , 5 , " lmn " ) , <nl> - row ( " test " , 5 , map ( " lmn " , " foo " ) ) <nl> - ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? " , " test " , 5 , " lmn " ) , <nl> + row ( " test " , 5 , map ( " lmn " , " foo " ) ) <nl> + ) ; <nl> <nl> - assertInvalidMessage ( " Unsupported null value for column categories " , <nl> - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? " , " test " , 5 , null ) ; <nl> + assertInvalidMessage ( " Unsupported null value for column categories " , <nl> + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? " , " test " , 5 , null ) ; <nl> <nl> - assertInvalidMessage ( " Unsupported unset value for column categories " , <nl> - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? " , " test " , 5 , unset ( ) ) ; <nl> + assertInvalidMessage ( " Unsupported unset value for column categories " , <nl> + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? " , " test " , 5 , unset ( ) ) ; <nl> <nl> - assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , <nl> - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? AND categories CONTAINS KEY ? " , <nl> - " test " , 5 , " lmn " , " notPresent " ) ; <nl> - assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? AND categories CONTAINS KEY ? ALLOW FILTERING " , <nl> - " test " , 5 , " lmn " , " notPresent " ) ) ; <nl> + assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , <nl> + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? AND categories CONTAINS KEY ? " , <nl> + " test " , 5 , " lmn " , " notPresent " ) ; <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? AND categories CONTAINS KEY ? ALLOW FILTERING " , <nl> + " test " , 5 , " lmn " , " notPresent " ) ) ; <nl> <nl> - assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , <nl> - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? AND categories CONTAINS ? " , <nl> - " test " , 5 , " lmn " , " foo " ) ; <nl> + assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , <nl> + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? AND categories CONTAINS ? " , <nl> + " test " , 5 , " lmn " , " foo " ) ; <nl> + } ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 503 , 32 + 511 , 34 @ @ public class SelectTest extends CQLTester <nl> <nl> execute ( " INSERT INTO % s ( account , id , categories ) VALUES ( ? , ? , ? ) " , " test " , 5 , map ( " lmn " , " foo " ) ) ; <nl> <nl> - assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " xyz " , " foo " ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " xyz " , " foo " ) ) ; <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " test " , " foo " ) , <nl> - row ( " test " , 5 , map ( " lmn " , " foo " ) ) <nl> - ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " test " , " foo " ) , <nl> + row ( " test " , 5 , map ( " lmn " , " foo " ) ) <nl> + ) ; <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE categories CONTAINS ? " , " foo " ) , <nl> - row ( " test " , 5 , map ( " lmn " , " foo " ) ) <nl> - ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE categories CONTAINS ? " , " foo " ) , <nl> + row ( " test " , 5 , map ( " lmn " , " foo " ) ) <nl> + ) ; <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , " foo " ) , <nl> - row ( " test " , 5 , map ( " lmn " , " foo " ) ) <nl> - ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , " foo " ) , <nl> + row ( " test " , 5 , map ( " lmn " , " foo " ) ) <nl> + ) ; <nl> <nl> - assertInvalidMessage ( " Unsupported null value for column categories " , <nl> - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , null ) ; <nl> + assertInvalidMessage ( " Unsupported null value for column categories " , <nl> + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , null ) ; <nl> <nl> - assertInvalidMessage ( " Unsupported unset value for column categories " , <nl> - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , unset ( ) ) ; <nl> + assertInvalidMessage ( " Unsupported unset value for column categories " , <nl> + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , unset ( ) ) ; <nl> <nl> - assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , <nl> - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? " <nl> - , " test " , 5 , " foo " , " notPresent " ) ; <nl> + assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , <nl> + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? " , <nl> + " test " , 5 , " foo " , " notPresent " ) ; <nl> <nl> - assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? ALLOW FILTERING " <nl> - , " test " , 5 , " foo " , " notPresent " ) ) ; <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? ALLOW FILTERING " , <nl> + " test " , 5 , " foo " , " notPresent " ) ) ; <nl> + } ) ; <nl> } <nl> <nl> / / See CASSANDRA - 7525 <nl> @ @ - 541 , 16 + 551 , 16 @ @ public class SelectTest extends CQLTester <nl> createIndex ( " CREATE INDEX id _ index ON % s ( id ) " ) ; <nl> createIndex ( " CREATE INDEX categories _ values _ index ON % s ( categories ) " ) ; <nl> <nl> - execute ( " INSERT INTO % s ( account , id , categories ) VALUES ( ? , ? , ? ) " , " test " , 5 , map ( " lmn " , " foo " ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE categories CONTAINS ? AND id = ? ALLOW FILTERING " , " foo " , 5 ) , <nl> - row ( " test " , 5 , map ( " lmn " , " foo " ) ) <nl> - ) ; <nl> + execute ( " INSERT INTO % s ( account , id , categories ) VALUES ( ? , ? , ? ) " , " test " , 5 , map ( " lmn " , " foo " ) ) ; <nl> <nl> - assertRows ( <nl> - execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND id = ? ALLOW FILTERING " , " test " , " foo " , 5 ) , <nl> - row ( " test " , 5 , map ( " lmn " , " foo " ) ) <nl> - ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE categories CONTAINS ? AND id = ? ALLOW FILTERING " , " foo " , 5 ) , <nl> + row ( " test " , 5 , map ( " lmn " , " foo " ) ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND id = ? ALLOW FILTERING " , " test " , " foo " , 5 ) , <nl> + row ( " test " , 5 , map ( " lmn " , " foo " ) ) ) ; <nl> + } ) ; <nl> } <nl> <nl> / / See CASSANDRA - 8033 <nl> @ @ - 565 , 16 + 575 , 18 @ @ public class SelectTest extends CQLTester <nl> execute ( " INSERT INTO % s ( k1 , k2 , v ) VALUES ( ? , ? , ? ) " , 1 , 0 , set ( 3 , 4 , 5 ) ) ; <nl> execute ( " INSERT INTO % s ( k1 , k2 , v ) VALUES ( ? , ? , ? ) " , 1 , 1 , set ( 4 , 5 , 6 ) ) ; <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE k2 = ? " , 1 ) , <nl> - row ( 0 , 1 , set ( 2 , 3 , 4 ) ) , <nl> - row ( 1 , 1 , set ( 4 , 5 , 6 ) ) <nl> - ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE k2 = ? " , 1 ) , <nl> + row ( 0 , 1 , set ( 2 , 3 , 4 ) ) , <nl> + row ( 1 , 1 , set ( 4 , 5 , 6 ) ) <nl> + ) ; <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE k2 = ? AND v CONTAINS ? ALLOW FILTERING " , 1 , 6 ) , <nl> - row ( 1 , 1 , set ( 4 , 5 , 6 ) ) <nl> - ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE k2 = ? AND v CONTAINS ? ALLOW FILTERING " , 1 , 6 ) , <nl> + row ( 1 , 1 , set ( 4 , 5 , 6 ) ) <nl> + ) ; <nl> <nl> - assertEmpty ( execute ( " SELECT * FROM % s WHERE k2 = ? AND v CONTAINS ? ALLOW FILTERING " , 1 , 7 ) ) ; <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE k2 = ? AND v CONTAINS ? ALLOW FILTERING " , 1 , 7 ) ) ; <nl> + } ) ; <nl> } <nl> <nl> / / See CASSANDRA - 8073 <nl> @ @ - 583 , 23 + 595 , 26 @ @ public class SelectTest extends CQLTester <nl> { <nl> createTable ( " CREATE TABLE % s ( a int , b int , c int , d set < int > , PRIMARY KEY ( a , b , c ) ) " ) ; <nl> createIndex ( " CREATE INDEX ON % s ( d ) " ) ; <nl> + <nl> execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 0 , 0 , 0 , set ( 1 , 2 , 3 ) ) ; <nl> execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 0 , 0 , 1 , set ( 3 , 4 , 5 ) ) ; <nl> execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 0 , 1 , 0 , set ( 1 , 2 , 3 ) ) ; <nl> execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 0 , 1 , 1 , set ( 3 , 4 , 5 ) ) ; <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? AND d CONTAINS ? " , 0 , 1 , 3 ) , <nl> - row ( 0 , 1 , 0 , set ( 1 , 2 , 3 ) ) , <nl> - row ( 0 , 1 , 1 , set ( 3 , 4 , 5 ) ) <nl> - ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? AND d CONTAINS ? " , 0 , 1 , 3 ) , <nl> + row ( 0 , 1 , 0 , set ( 1 , 2 , 3 ) ) , <nl> + row ( 0 , 1 , 1 , set ( 3 , 4 , 5 ) ) <nl> + ) ; <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? AND d CONTAINS ? " , 0 , 1 , 2 ) , <nl> - row ( 0 , 1 , 0 , set ( 1 , 2 , 3 ) ) <nl> - ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? AND d CONTAINS ? " , 0 , 1 , 2 ) , <nl> + row ( 0 , 1 , 0 , set ( 1 , 2 , 3 ) ) <nl> + ) ; <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? AND d CONTAINS ? " , 0 , 1 , 5 ) , <nl> - row ( 0 , 1 , 1 , set ( 3 , 4 , 5 ) ) <nl> - ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? AND d CONTAINS ? " , 0 , 1 , 5 ) , <nl> + row ( 0 , 1 , 1 , set ( 3 , 4 , 5 ) ) <nl> + ) ; <nl> + } ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 611 , 18 + 626 , 20 @ @ public class SelectTest extends CQLTester <nl> execute ( " INSERT INTO % s ( account , id , categories ) VALUES ( ? , ? , ? ) " , " test " , 5 , map ( " lmn " , " foo " ) ) ; <nl> execute ( " INSERT INTO % s ( account , id , categories ) VALUES ( ? , ? , ? ) " , " test " , 6 , map ( " lmn " , " foo2 " ) ) ; <nl> <nl> - assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , <nl> - " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " test " , " foo " ) ; <nl> - <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? " , " test " , " lmn " ) , <nl> - row ( " test " , 5 , map ( " lmn " , " foo " ) ) , <nl> - row ( " test " , 6 , map ( " lmn " , " foo2 " ) ) ) ; <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? AND categories CONTAINS ? ALLOW FILTERING " , <nl> - " test " , " lmn " , " foo " ) , <nl> - row ( " test " , 5 , map ( " lmn " , " foo " ) ) ) ; <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND categories CONTAINS KEY ? ALLOW FILTERING " , <nl> - " test " , " foo " , " lmn " ) , <nl> - row ( " test " , 5 , map ( " lmn " , " foo " ) ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , <nl> + " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " test " , " foo " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? " , " test " , " lmn " ) , <nl> + row ( " test " , 5 , map ( " lmn " , " foo " ) ) , <nl> + row ( " test " , 6 , map ( " lmn " , " foo2 " ) ) ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? AND categories CONTAINS ? ALLOW FILTERING " , <nl> + " test " , " lmn " , " foo " ) , <nl> + row ( " test " , 5 , map ( " lmn " , " foo " ) ) ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND categories CONTAINS KEY ? ALLOW FILTERING " , <nl> + " test " , " foo " , " lmn " ) , <nl> + row ( " test " , 5 , map ( " lmn " , " foo " ) ) ) ; <nl> + } ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 634 , 18 + 651 , 20 @ @ public class SelectTest extends CQLTester <nl> execute ( " INSERT INTO % s ( account , id , categories ) VALUES ( ? , ? , ? ) " , " test " , 5 , map ( " lmn " , " foo " ) ) ; <nl> execute ( " INSERT INTO % s ( account , id , categories ) VALUES ( ? , ? , ? ) " , " test " , 6 , map ( " lmn2 " , " foo " ) ) ; <nl> <nl> - assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , <nl> - " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? " , " test " , " lmn " ) ; <nl> - <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " test " , " foo " ) , <nl> - row ( " test " , 5 , map ( " lmn " , " foo " ) ) , <nl> - row ( " test " , 6 , map ( " lmn2 " , " foo " ) ) ) ; <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? AND categories CONTAINS ? ALLOW FILTERING " , <nl> - " test " , " lmn " , " foo " ) , <nl> - row ( " test " , 5 , map ( " lmn " , " foo " ) ) ) ; <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND categories CONTAINS KEY ? ALLOW FILTERING " , <nl> - " test " , " foo " , " lmn " ) , <nl> - row ( " test " , 5 , map ( " lmn " , " foo " ) ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , <nl> + " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? " , " test " , " lmn " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " test " , " foo " ) , <nl> + row ( " test " , 5 , map ( " lmn " , " foo " ) ) , <nl> + row ( " test " , 6 , map ( " lmn2 " , " foo " ) ) ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? AND categories CONTAINS ? ALLOW FILTERING " , <nl> + " test " , " lmn " , " foo " ) , <nl> + row ( " test " , 5 , map ( " lmn " , " foo " ) ) ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND categories CONTAINS KEY ? ALLOW FILTERING " , <nl> + " test " , " foo " , " lmn " ) , <nl> + row ( " test " , 5 , map ( " lmn " , " foo " ) ) ) ; <nl> + } ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 1313 , 18 + 1332 , 20 @ @ public class SelectTest extends CQLTester <nl> <nl> execute ( " INSERT INTO % s ( k , a , b , s , s1 ) VALUES ( ? , ? , ? , ? , ? ) " , 2 , 10 , 10 , 10 , 10 ) ; <nl> <nl> - assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE s = 90 AND s1 = 90 ALLOW FILTERING " ) , <nl> - row ( 9 , 90 , 90 ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE s = 90 AND s1 = 90 ALLOW FILTERING " ) , <nl> + row ( 9 , 90 , 90 ) ) ; <nl> <nl> - assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE s = 90 AND s1 = 90 ALLOW FILTERING " ) , <nl> - row ( 9 , 90 , 90 ) ) ; <nl> + assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE s = 90 AND s1 = 90 ALLOW FILTERING " ) , <nl> + row ( 9 , 90 , 90 ) ) ; <nl> <nl> - assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE s = 10 AND s1 = 10 ALLOW FILTERING " ) , <nl> - row ( 1 , 10 , 10 ) , <nl> - row ( 2 , 10 , 10 ) ) ; <nl> + assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE s = 10 AND s1 = 10 ALLOW FILTERING " ) , <nl> + row ( 1 , 10 , 10 ) , <nl> + row ( 2 , 10 , 10 ) ) ; <nl> <nl> - assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE k = 1 AND s = 10 AND s1 = 10 ALLOW FILTERING " ) , <nl> - row ( 1 , 10 , 10 ) ) ; <nl> + assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE k = 1 AND s = 10 AND s1 = 10 ALLOW FILTERING " ) , <nl> + row ( 1 , 10 , 10 ) ) ; <nl> + } ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 1425 , 18 + 1446 , 20 @ @ public class SelectTest extends CQLTester <nl> execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , i , j , j , i + j ) ; <nl> } <nl> <nl> - assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE a > = 1 AND c = 2 AND s > = 1 ALLOW FILTERING " ) , <nl> - row ( 1 , 2 , 1 , 2 , 3 ) , <nl> - row ( 3 , 2 , 3 , 2 , 5 ) , <nl> - row ( 4 , 2 , 4 , 2 , 6 ) ) ; <nl> - <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE a > = 1 AND c = 2 AND s > = 1 LIMIT 2 ALLOW FILTERING " ) , <nl> - row ( 1 , 2 , 1 , 2 , 3 ) , <nl> - row ( 4 , 2 , 4 , 2 , 6 ) ) ; <nl> - <nl> - assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE a > = 3 AND c = 2 AND s > = 1 LIMIT 2 ALLOW FILTERING " ) , <nl> - row ( 4 , 2 , 4 , 2 , 6 ) , <nl> - row ( 3 , 2 , 3 , 2 , 5 ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE a > = 1 AND c = 2 AND s > = 1 ALLOW FILTERING " ) , <nl> + row ( 1 , 2 , 1 , 2 , 3 ) , <nl> + row ( 3 , 2 , 3 , 2 , 5 ) , <nl> + row ( 4 , 2 , 4 , 2 , 6 ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE a > = 1 AND c = 2 AND s > = 1 LIMIT 2 ALLOW FILTERING " ) , <nl> + row ( 1 , 2 , 1 , 2 , 3 ) , <nl> + row ( 4 , 2 , 4 , 2 , 6 ) ) ; <nl> + <nl> + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE a > = 3 AND c = 2 AND s > = 1 LIMIT 2 ALLOW FILTERING " ) , <nl> + row ( 4 , 2 , 4 , 2 , 6 ) , <nl> + row ( 3 , 2 , 3 , 2 , 5 ) ) ; <nl> + } ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 1452 , 9 + 1475 , 11 @ @ public class SelectTest extends CQLTester <nl> execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , i , j , j , i + j ) ; <nl> } <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE c = 2 AND s > = 1 LIMIT 2 ALLOW FILTERING " ) , <nl> - row ( 1 , 2 , 1 , 2 , 3 ) , <nl> - row ( 4 , 2 , 4 , 2 , 6 ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE c = 2 AND s > = 1 LIMIT 2 ALLOW FILTERING " ) , <nl> + row ( 1 , 2 , 1 , 2 , 3 ) , <nl> + row ( 4 , 2 , 4 , 2 , 6 ) ) ; <nl> + } ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 1477 , 7 + 1502 , 7 @ @ public class SelectTest extends CQLTester <nl> execute ( " DELETE FROM % s WHERE a = 2 AND b = 2 " ) ; <nl> <nl> beforeAndAfterFlush ( ( ) - > { <nl> - <nl> + <nl> / / Checks filtering <nl> assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , <nl> " SELECT * FROM % s WHERE c = 4 AND d = 8 " ) ; <nl> @ @ - 3925 , 10 + 3950 , 16 @ @ public class SelectTest extends CQLTester <nl> execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , " a " , 1 , " b " , 2 ) ; <nl> execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , " a " , 2 , " b " , 3 ) ; <nl> execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , " c " , 3 , " b " , 4 ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , " d " , 4 , " d " , 5 ) ; <nl> + <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertRows ( executeFilteringOnly ( " SELECT * FROM % s WHERE a = ' a ' AND b > 0 AND c = ' b ' " ) , <nl> + row ( " a " , 1 , " b " , 2 ) , <nl> + row ( " a " , 2 , " b " , 3 ) ) ; <nl> <nl> - assertRows ( executeFilteringOnly ( " SELECT * FROM % s WHERE a = ' a ' AND b > 0 AND c = ' b ' " ) , <nl> - row ( " a " , 1 , " b " , 2 ) , <nl> - row ( " a " , 2 , " b " , 3 ) ) ; <nl> + assertRows ( executeFilteringOnly ( " SELECT * FROM % s WHERE c = ' b ' AND d = 4 " ) , <nl> + row ( " c " , 3 , " b " , 4 ) ) ; <nl> + } ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 4064 , 22 + 4095 , 24 @ @ public class SelectTest extends CQLTester <nl> execute ( " INSERT INTO % s ( pk , c1 , c2 , c3 , v ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , i , i , i , i ) ; <nl> } <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 > 0 AND c1 < 5 AND c2 = 1 AND v = 3 ALLOW FILTERING ; " ) , <nl> - row ( 1 , 1 , 1 , 3 , 3 ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 > 0 AND c1 < 5 AND c2 = 1 AND v = 3 ALLOW FILTERING ; " ) , <nl> + row ( 1 , 1 , 1 , 3 , 3 ) ) ; <nl> <nl> - assertEmpty ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 > 1 AND c1 < 5 AND c2 = 1 AND v = 3 ALLOW FILTERING ; " ) ) ; <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 > 1 AND c1 < 5 AND c2 = 1 AND v = 3 ALLOW FILTERING ; " ) ) ; <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 > 1 AND c2 > 2 AND c3 > 2 AND v = 3 ALLOW FILTERING ; " ) , <nl> - row ( 1 , 3 , 3 , 3 , 3 ) ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 > 1 AND c2 > 2 AND c3 > 2 AND v = 3 ALLOW FILTERING ; " ) , <nl> + row ( 1 , 3 , 3 , 3 , 3 ) ) ; <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 > 1 AND c2 > 2 AND c3 = 3 AND v = 3 ALLOW FILTERING ; " ) , <nl> - row ( 1 , 3 , 3 , 3 , 3 ) ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 > 1 AND c2 > 2 AND c3 = 3 AND v = 3 ALLOW FILTERING ; " ) , <nl> + row ( 1 , 3 , 3 , 3 , 3 ) ) ; <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 IN ( 0 , 1 , 2 ) AND c2 = 1 AND v = 3 ALLOW FILTERING ; " ) , <nl> - row ( 1 , 1 , 1 , 3 , 3 ) ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 IN ( 0 , 1 , 2 ) AND c2 = 1 AND v = 3 ALLOW FILTERING ; " ) , <nl> + row ( 1 , 1 , 1 , 3 , 3 ) ) ; <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 IN ( 0 , 1 , 2 ) AND c2 = 1 AND v = 3 " ) , <nl> - row ( 1 , 1 , 1 , 3 , 3 ) ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 IN ( 0 , 1 , 2 ) AND c2 = 1 AND v = 3 " ) , <nl> + row ( 1 , 1 , 1 , 3 , 3 ) ) ; <nl> + } ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 4094 , 9 + 4127 , 11 @ @ public class SelectTest extends CQLTester <nl> execute ( " INSERT INTO % s ( p1 , p2 , v ) values ( ? , ? , ? ) " , 1 , 2 , 3 ) ; <nl> execute ( " INSERT INTO % s ( p1 , p2 , v ) values ( ? , ? , ? ) " , 2 , 1 , 3 ) ; <nl> <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE p1 = 1 AND v = 3 ALLOW FILTERING " ) , <nl> - row ( 1 , 2 , 3 ) , <nl> - row ( 1 , 1 , 3 ) ) ; <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE p1 = 1 AND v = 3 ALLOW FILTERING " ) , <nl> + row ( 1 , 2 , 3 ) , <nl> + row ( 1 , 1 , 3 ) ) ; <nl> + } ) ; <nl> } <nl> <nl> @ Test
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java 
 index 05c11a4 . . 5cb76c9 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java 
 @ @ - 174 , 10 + 174 , 12 @ @ public class SecondaryIndexTest extends CQLTester 
 execute ( " INSERT INTO % s ( userid , firstname , lastname , age ) VALUES ( ? , ' Frodo ' , ' Baggins ' , 32 ) " , id1 ) ; 
 execute ( " UPDATE % s SET firstname = ' Samwise ' , lastname = ' Gamgee ' , age = 33 WHERE userid = ? " , id2 ) ; 
 
 - assertEmpty ( execute ( " SELECT firstname FROM % s WHERE userid = ? AND age = 33 " , id1 ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertEmpty ( execute ( " SELECT firstname FROM % s WHERE userid = ? AND age = 33 " , id1 ) ) ; 
 
 - assertRows ( execute ( " SELECT firstname FROM % s WHERE userid = ? AND age = 33 " , id2 ) , 
 - row ( " Samwise " ) ) ; 
 + assertRows ( execute ( " SELECT firstname FROM % s WHERE userid = ? AND age = 33 " , id2 ) , 
 + row ( " Samwise " ) ) ; 
 + } ) ; 
 } 
 
 / * * 
 @ @ - 195 , 9 + 197 , 11 @ @ public class SecondaryIndexTest extends CQLTester 
 execute ( " INSERT INTO % s ( id , birth _ year ) VALUES ( ' Paul ' , 24 ) " ) ; 
 execute ( " INSERT INTO % s ( id , birth _ year ) VALUES ( ' Bob ' , 42 ) " ) ; 
 
 - assertRows ( execute ( " SELECT id FROM % s WHERE birth _ year = 42 " ) , 
 - row ( " Tom " ) , 
 - row ( " Bob " ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertRows ( execute ( " SELECT id FROM % s WHERE birth _ year = 42 " ) , 
 + row ( " Tom " ) , 
 + row ( " Bob " ) ) ; 
 + } ) ; 
 
 execute ( " DROP INDEX % s _ birth _ year _ idx " ) ; 
 
 @ @ - 221 , 8 + 225 , 10 @ @ public class SecondaryIndexTest extends CQLTester 
 
 assertInvalid ( " SELECT * FROM % s WHERE setid = 0 AND row < 1 " ) ; 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE setid = 0 AND row < 1 ALLOW FILTERING " ) , 
 - row ( 0 , 0 , 0 ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertRows ( execute ( " SELECT * FROM % s WHERE setid = 0 AND row < 1 ALLOW FILTERING " ) , 
 + row ( 0 , 0 , 0 ) ) ; 
 + } ) ; 
 } 
 
 / * * 
 @ @ - 267 , 27 + 273 , 33 @ @ public class SecondaryIndexTest extends CQLTester 
 
 assertTrue ( waitForIndex ( keyspace ( ) , tableName , " authoridx " ) ) ; 
 
 - assertRows ( execute ( " SELECT blog _ id , timestamp FROM % s WHERE author = ' bob ' " ) , 
 - row ( 1 , 0 ) , 
 - row ( 0 , 0 ) , 
 - row ( 0 , 2 ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertRows ( execute ( " SELECT blog _ id , timestamp FROM % s WHERE author = ' bob ' " ) , 
 + row ( 1 , 0 ) , 
 + row ( 0 , 0 ) , 
 + row ( 0 , 2 ) ) ; 
 + } ) ; 
 
 execute ( " INSERT INTO % s ( blog _ id , timestamp , author , content ) VALUES ( ? , ? , ? , ? ) " , 1 , 1 , " tom " , " 6th post " ) ; 
 execute ( " INSERT INTO % s ( blog _ id , timestamp , author , content ) VALUES ( ? , ? , ? , ? ) " , 1 , 2 , " tom " , " 7th post " ) ; 
 execute ( " INSERT INTO % s ( blog _ id , timestamp , author , content ) VALUES ( ? , ? , ? , ? ) " , 1 , 3 , " bob " , " 8th post " ) ; 
 
 - assertRows ( execute ( " SELECT blog _ id , timestamp FROM % s WHERE author = ' bob ' " ) , 
 - row ( 1 , 0 ) , 
 - row ( 1 , 3 ) , 
 - row ( 0 , 0 ) , 
 - row ( 0 , 2 ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertRows ( execute ( " SELECT blog _ id , timestamp FROM % s WHERE author = ' bob ' " ) , 
 + row ( 1 , 0 ) , 
 + row ( 1 , 3 ) , 
 + row ( 0 , 0 ) , 
 + row ( 0 , 2 ) ) ; 
 + } ) ; 
 
 execute ( " DELETE FROM % s WHERE blog _ id = 0 AND timestamp = 2 " ) ; 
 
 - assertRows ( execute ( " SELECT blog _ id , timestamp FROM % s WHERE author = ' bob ' " ) , 
 - row ( 1 , 0 ) , 
 - row ( 1 , 3 ) , 
 - row ( 0 , 0 ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertRows ( execute ( " SELECT blog _ id , timestamp FROM % s WHERE author = ' bob ' " ) , 
 + row ( 1 , 0 ) , 
 + row ( 1 , 3 ) , 
 + row ( 0 , 0 ) ) ; 
 + } ) ; 
 } 
 
 / * * 
 @ @ - 337 , 17 + 349 , 19 @ @ public class SecondaryIndexTest extends CQLTester 
 execute ( " INSERT INTO % s ( pk0 , pk1 , ck0 , ck1 , ck2 , value ) VALUES ( 4 , 5 , 0 , 1 , 2 , 3 ) " ) ; 
 execute ( " INSERT INTO % s ( pk0 , pk1 , ck0 , ck1 , ck2 , value ) VALUES ( 5 , 0 , 1 , 2 , 3 , 4 ) " ) ; 
 
 - assertRows ( execute ( " SELECT value FROM % s WHERE pk0 = 2 " ) , 
 - row ( 1 ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertRows ( execute ( " SELECT value FROM % s WHERE pk0 = 2 " ) , 
 + row ( 1 ) ) ; 
 
 - assertRows ( execute ( " SELECT value FROM % s WHERE ck0 = 0 " ) , 
 - row ( 3 ) ) ; 
 + assertRows ( execute ( " SELECT value FROM % s WHERE ck0 = 0 " ) , 
 + row ( 3 ) ) ; 
 
 - assertRows ( execute ( " SELECT value FROM % s WHERE pk0 = 3 AND pk1 = 4 AND ck1 = 0 " ) , 
 - row ( 2 ) ) ; 
 + assertRows ( execute ( " SELECT value FROM % s WHERE pk0 = 3 AND pk1 = 4 AND ck1 = 0 " ) , 
 + row ( 2 ) ) ; 
 
 - assertRows ( execute ( " SELECT value FROM % s WHERE pk0 = 5 AND pk1 = 0 AND ck0 = 1 AND ck2 = 3 ALLOW FILTERING " ) , 
 - row ( 4 ) ) ; 
 + assertRows ( execute ( " SELECT value FROM % s WHERE pk0 = 5 AND pk1 = 0 AND ck0 = 1 AND ck2 = 3 ALLOW FILTERING " ) , 
 + row ( 4 ) ) ; 
 + } ) ; 
 } 
 
 / * * 
 @ @ - 370 , 8 + 384 , 11 @ @ public class SecondaryIndexTest extends CQLTester 
 execute ( " insert into % s ( interval , seq , id , severity ) values ( ' t ' , 2 , 3 , 1 ) " ) ; 
 execute ( " insert into % s ( interval , seq , id , severity ) values ( ' t ' , 2 , 4 , 2 ) " ) ; 
 
 - assertRows ( execute ( " select * from % s where severity = 3 and interval = ' t ' and seq = 1 " ) , 
 - row ( " t " , 1 , 4 , 3 ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertRows ( execute ( " select * from % s where severity = 3 and interval = ' t ' and seq = 1 " ) , 
 + row ( " t " , 1 , 4 , 3 ) ) ; 
 + 
 + } ) ; 
 } 
 
 / * * 
 @ @ - 402 , 23 + 419 , 25 @ @ public class SecondaryIndexTest extends CQLTester 
 execute ( " INSERT INTO % s ( k , v , l , s , m ) VALUES ( 1 , 0 , [ 1 , 2 , 4 ] , { } , { ' b ' : 1 } ) " ) ; 
 execute ( " INSERT INTO % s ( k , v , l , s , m ) VALUES ( 1 , 1 , [ 4 , 5 ] , { ' d ' } , { ' a ' : 1 , ' b ' : 3 } ) " ) ; 
 
 - / / lists 
 - assertRows ( execute ( " SELECT k , v FROM % s WHERE l CONTAINS 1 " ) , row ( 1 , 0 ) , row ( 0 , 0 ) , row ( 0 , 2 ) ) ; 
 - assertRows ( execute ( " SELECT k , v FROM % s WHERE k = 0 AND l CONTAINS 1 " ) , row ( 0 , 0 ) , row ( 0 , 2 ) ) ; 
 - assertRows ( execute ( " SELECT k , v FROM % s WHERE l CONTAINS 2 " ) , row ( 1 , 0 ) , row ( 0 , 0 ) ) ; 
 - assertEmpty ( execute ( " SELECT k , v FROM % s WHERE l CONTAINS 6 " ) ) ; 
 - 
 - / / sets 
 - assertRows ( execute ( " SELECT k , v FROM % s WHERE s CONTAINS ' a ' " ) , row ( 0 , 0 ) , row ( 0 , 2 ) ) ; 
 - assertRows ( execute ( " SELECT k , v FROM % s WHERE k = 0 AND s CONTAINS ' a ' " ) , row ( 0 , 0 ) , row ( 0 , 2 ) ) ; 
 - assertRows ( execute ( " SELECT k , v FROM % s WHERE s CONTAINS ' d ' " ) , row ( 1 , 1 ) ) ; 
 - assertEmpty ( execute ( " SELECT k , v FROM % s WHERE s CONTAINS ' e ' " ) ) ; 
 - 
 - / / maps 
 - assertRows ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS 1 " ) , row ( 1 , 0 ) , row ( 1 , 1 ) , row ( 0 , 0 ) , row ( 0 , 1 ) ) ; 
 - assertRows ( execute ( " SELECT k , v FROM % s WHERE k = 0 AND m CONTAINS 1 " ) , row ( 0 , 0 ) , row ( 0 , 1 ) ) ; 
 - assertRows ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS 2 " ) , row ( 0 , 1 ) ) ; 
 - assertEmpty ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS 4 " ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + / / lists 
 + assertRows ( execute ( " SELECT k , v FROM % s WHERE l CONTAINS 1 " ) , row ( 1 , 0 ) , row ( 0 , 0 ) , row ( 0 , 2 ) ) ; 
 + assertRows ( execute ( " SELECT k , v FROM % s WHERE k = 0 AND l CONTAINS 1 " ) , row ( 0 , 0 ) , row ( 0 , 2 ) ) ; 
 + assertRows ( execute ( " SELECT k , v FROM % s WHERE l CONTAINS 2 " ) , row ( 1 , 0 ) , row ( 0 , 0 ) ) ; 
 + assertEmpty ( execute ( " SELECT k , v FROM % s WHERE l CONTAINS 6 " ) ) ; 
 + 
 + / / sets 
 + assertRows ( execute ( " SELECT k , v FROM % s WHERE s CONTAINS ' a ' " ) , row ( 0 , 0 ) , row ( 0 , 2 ) ) ; 
 + assertRows ( execute ( " SELECT k , v FROM % s WHERE k = 0 AND s CONTAINS ' a ' " ) , row ( 0 , 0 ) , row ( 0 , 2 ) ) ; 
 + assertRows ( execute ( " SELECT k , v FROM % s WHERE s CONTAINS ' d ' " ) , row ( 1 , 1 ) ) ; 
 + assertEmpty ( execute ( " SELECT k , v FROM % s WHERE s CONTAINS ' e ' " ) ) ; 
 + 
 + / / maps 
 + assertRows ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS 1 " ) , row ( 1 , 0 ) , row ( 1 , 1 ) , row ( 0 , 0 ) , row ( 0 , 1 ) ) ; 
 + assertRows ( execute ( " SELECT k , v FROM % s WHERE k = 0 AND m CONTAINS 1 " ) , row ( 0 , 0 ) , row ( 0 , 1 ) ) ; 
 + assertRows ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS 2 " ) , row ( 0 , 1 ) ) ; 
 + assertEmpty ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS 4 " ) ) ; 
 + } ) ; 
 } 
 
 / * * 
 @ @ - 438 , 10 + 457 , 12 @ @ public class SecondaryIndexTest extends CQLTester 
 execute ( " INSERT INTO % s ( k , v , m ) VALUES ( 1 , 1 , { ' a ' : 1 , ' b ' : 3 } ) " ) ; 
 
 / / maps 
 - assertRows ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS KEY ' a ' " ) , row ( 1 , 1 ) , row ( 0 , 0 ) , row ( 0 , 1 ) ) ; 
 - assertRows ( execute ( " SELECT k , v FROM % s WHERE k = 0 AND m CONTAINS KEY ' a ' " ) , row ( 0 , 0 ) , row ( 0 , 1 ) ) ; 
 - assertRows ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS KEY ' c ' " ) , row ( 0 , 2 ) ) ; 
 - assertEmpty ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS KEY ' d ' " ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertRows ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS KEY ' a ' " ) , row ( 1 , 1 ) , row ( 0 , 0 ) , row ( 0 , 1 ) ) ; 
 + assertRows ( execute ( " SELECT k , v FROM % s WHERE k = 0 AND m CONTAINS KEY ' a ' " ) , row ( 0 , 0 ) , row ( 0 , 1 ) ) ; 
 + assertRows ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS KEY ' c ' " ) , row ( 0 , 2 ) ) ; 
 + assertEmpty ( execute ( " SELECT k , v FROM % s WHERE m CONTAINS KEY ' d ' " ) ) ; 
 + } ) ; 
 } 
 
 / * * 
 @ @ - 464 , 10 + 485 , 12 @ @ public class SecondaryIndexTest extends CQLTester 
 execute ( " INSERT INTO % s ( k1 , k2 , v ) VALUES ( 2 , 1 , 8 ) " ) ; 
 execute ( " INSERT INTO % s ( k1 , k2 , v ) VALUES ( 3 , 0 , 1 ) " ) ; 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE k2 = 0 AND v > = 2 ALLOW FILTERING " ) , 
 - row ( 2 , 0 , 7 ) , 
 - row ( 0 , 0 , 3 ) , 
 - row ( 1 , 0 , 4 ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertRows ( execute ( " SELECT * FROM % s WHERE k2 = 0 AND v > = 2 ALLOW FILTERING " ) , 
 + row ( 2 , 0 , 7 ) , 
 + row ( 0 , 0 , 3 ) , 
 + row ( 1 , 0 , 4 ) ) ; 
 + } ) ; 
 } 
 
 / * * 
 @ @ - 482 , 11 + 505 , 15 @ @ public class SecondaryIndexTest extends CQLTester 
 createIndex ( " create index ON % s ( app _ name ) " ) ; 
 createIndex ( " create index ON % s ( last _ access ) " ) ; 
 
 - assertRows ( execute ( " select count ( * ) from % s where app _ name = ' foo ' and account = ' bar ' and last _ access > 4 allow filtering " ) , row ( 0L ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertRows ( execute ( " select count ( * ) from % s where app _ name = ' foo ' and account = ' bar ' and last _ access > 4 allow filtering " ) , row ( 0L ) ) ; 
 + } ) ; 
 
 execute ( " insert into % s ( username , session _ id , app _ name , account , last _ access , created _ on ) values ( ' toto ' , ' foo ' , ' foo ' , ' bar ' , 12 , 13 ) " ) ; 
 
 - assertRows ( execute ( " select count ( * ) from % s where app _ name = ' foo ' and account = ' bar ' and last _ access > 4 allow filtering " ) , row ( 1L ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertRows ( execute ( " select count ( * ) from % s where app _ name = ' foo ' and account = ' bar ' and last _ access > 4 allow filtering " ) , row ( 1L ) ) ; 
 + } ) ; 
 } 
 
 @ Test 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java 
 index 7d56a14 . . f167955 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java 
 @ @ - 379 , 29 + 379 , 31 @ @ public class SelectTest extends CQLTester 
 
 execute ( " INSERT INTO % s ( account , id , categories ) VALUES ( ? , ? , ? ) " , " test " , 5 , set ( " lmn " ) ) ; 
 
 - assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " xyz " , " lmn " ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " xyz " , " lmn " ) ) ; 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE categories CONTAINS ? " , " lmn " ) , 
 - row ( " test " , 5 , set ( " lmn " ) ) 
 - ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE categories CONTAINS ? " , " lmn " ) , 
 + row ( " test " , 5 , set ( " lmn " ) ) 
 + ) ; 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " test " , " lmn " ) , 
 - row ( " test " , 5 , set ( " lmn " ) ) 
 - ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " test " , " lmn " ) , 
 + row ( " test " , 5 , set ( " lmn " ) ) 
 + ) ; 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , " lmn " ) , 
 - row ( " test " , 5 , set ( " lmn " ) ) 
 - ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , " lmn " ) , 
 + row ( " test " , 5 , set ( " lmn " ) ) 
 + ) ; 
 
 - assertInvalidMessage ( " Unsupported null value for column categories " , 
 - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , null ) ; 
 + assertInvalidMessage ( " Unsupported null value for column categories " , 
 + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , null ) ; 
 
 - assertInvalidMessage ( " Unsupported unset value for column categories " , 
 - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , unset ( ) ) ; 
 + assertInvalidMessage ( " Unsupported unset value for column categories " , 
 + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , unset ( ) ) ; 
 
 - assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , 
 - " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND categories CONTAINS ? " , " xyz " , " lmn " , " notPresent " ) ; 
 - assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND categories CONTAINS ? ALLOW FILTERING " , " xyz " , " lmn " , " notPresent " ) ) ; 
 + assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , 
 + " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND categories CONTAINS ? " , " xyz " , " lmn " , " notPresent " ) ; 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND categories CONTAINS ? ALLOW FILTERING " , " xyz " , " lmn " , " notPresent " ) ) ; 
 + } ) ; 
 } 
 
 @ Test 
 @ @ - 411 , 32 + 413 , 33 @ @ public class SelectTest extends CQLTester 
 createIndex ( " CREATE INDEX ON % s ( categories ) " ) ; 
 
 execute ( " INSERT INTO % s ( account , id , categories ) VALUES ( ? , ? , ? ) " , " test " , 5 , list ( " lmn " ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " xyz " , " lmn " ) ) ; 
 
 - assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " xyz " , " lmn " ) ) ; 
 - 
 - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? ; " , " test " , " lmn " ) , 
 - row ( " test " , 5 , list ( " lmn " ) ) 
 - ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? ; " , " test " , " lmn " ) , 
 + row ( " test " , 5 , list ( " lmn " ) ) 
 + ) ; 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE categories CONTAINS ? " , " lmn " ) , 
 - row ( " test " , 5 , list ( " lmn " ) ) 
 - ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE categories CONTAINS ? " , " lmn " ) , 
 + row ( " test " , 5 , list ( " lmn " ) ) 
 + ) ; 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? ; " , " test " , 5 , " lmn " ) , 
 - row ( " test " , 5 , list ( " lmn " ) ) 
 - ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? ; " , " test " , 5 , " lmn " ) , 
 + row ( " test " , 5 , list ( " lmn " ) ) 
 + ) ; 
 
 - assertInvalidMessage ( " Unsupported null value for column categories " , 
 - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , null ) ; 
 + assertInvalidMessage ( " Unsupported null value for column categories " , 
 + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , null ) ; 
 
 - assertInvalidMessage ( " Unsupported unset value for column categories " , 
 - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , unset ( ) ) ; 
 + assertInvalidMessage ( " Unsupported unset value for column categories " , 
 + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , unset ( ) ) ; 
 
 - assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , 
 - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? " , 
 - " test " , 5 , " lmn " , " notPresent " ) ; 
 - assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? ALLOW FILTERING " , 
 - " test " , 5 , " lmn " , " notPresent " ) ) ; 
 + assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , 
 + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? " , 
 + " test " , 5 , " lmn " , " notPresent " ) ; 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? ALLOW FILTERING " , 
 + " test " , 5 , " lmn " , " notPresent " ) ) ; 
 + } ) ; 
 } 
 
 @ Test 
 @ @ - 452 , 9 + 455 , 12 @ @ public class SelectTest extends CQLTester 
 { 
 execute ( " INSERT INTO % s ( e , f , s ) VALUES ( ? , ? , ? ) " , i , list ( " Dubai " ) , 3 ) ; 
 } 
 - assertRows ( execute ( " SELECT * FROM % s WHERE f CONTAINS ? AND s = ? allow filtering " , " Dubai " , 3 ) , 
 - row ( 4 , list ( " Dubai " ) , 3 ) , 
 - row ( 3 , list ( " Dubai " ) , 3 ) ) ; 
 + 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertRows ( execute ( " SELECT * FROM % s WHERE f CONTAINS ? AND s = ? allow filtering " , " Dubai " , 3 ) , 
 + row ( 4 , list ( " Dubai " ) , 3 ) , 
 + row ( 3 , list ( " Dubai " ) , 3 ) ) ; 
 + } ) ; 
 } 
 
 @ Test 
 @ @ - 465 , 34 + 471 , 36 @ @ public class SelectTest extends CQLTester 
 
 execute ( " INSERT INTO % s ( account , id , categories ) VALUES ( ? , ? , ? ) " , " test " , 5 , map ( " lmn " , " foo " ) ) ; 
 
 - assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? " , " xyz " , " lmn " ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? " , " xyz " , " lmn " ) ) ; 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? " , " test " , " lmn " ) , 
 - row ( " test " , 5 , map ( " lmn " , " foo " ) ) 
 - ) ; 
 - assertRows ( execute ( " SELECT * FROM % s WHERE categories CONTAINS KEY ? " , " lmn " ) , 
 - row ( " test " , 5 , map ( " lmn " , " foo " ) ) 
 - ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? " , " test " , " lmn " ) , 
 + row ( " test " , 5 , map ( " lmn " , " foo " ) ) 
 + ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE categories CONTAINS KEY ? " , " lmn " ) , 
 + row ( " test " , 5 , map ( " lmn " , " foo " ) ) 
 + ) ; 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? " , " test " , 5 , " lmn " ) , 
 - row ( " test " , 5 , map ( " lmn " , " foo " ) ) 
 - ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? " , " test " , 5 , " lmn " ) , 
 + row ( " test " , 5 , map ( " lmn " , " foo " ) ) 
 + ) ; 
 
 - assertInvalidMessage ( " Unsupported null value for column categories " , 
 - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? " , " test " , 5 , null ) ; 
 + assertInvalidMessage ( " Unsupported null value for column categories " , 
 + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? " , " test " , 5 , null ) ; 
 
 - assertInvalidMessage ( " Unsupported unset value for column categories " , 
 - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? " , " test " , 5 , unset ( ) ) ; 
 + assertInvalidMessage ( " Unsupported unset value for column categories " , 
 + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? " , " test " , 5 , unset ( ) ) ; 
 
 - assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , 
 - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? AND categories CONTAINS KEY ? " , 
 - " test " , 5 , " lmn " , " notPresent " ) ; 
 - assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? AND categories CONTAINS KEY ? ALLOW FILTERING " , 
 - " test " , 5 , " lmn " , " notPresent " ) ) ; 
 + assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , 
 + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? AND categories CONTAINS KEY ? " , 
 + " test " , 5 , " lmn " , " notPresent " ) ; 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? AND categories CONTAINS KEY ? ALLOW FILTERING " , 
 + " test " , 5 , " lmn " , " notPresent " ) ) ; 
 
 - assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , 
 - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? AND categories CONTAINS ? " , 
 - " test " , 5 , " lmn " , " foo " ) ; 
 + assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , 
 + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? AND categories CONTAINS ? " , 
 + " test " , 5 , " lmn " , " foo " ) ; 
 + } ) ; 
 } 
 
 @ Test 
 @ @ - 503 , 32 + 511 , 34 @ @ public class SelectTest extends CQLTester 
 
 execute ( " INSERT INTO % s ( account , id , categories ) VALUES ( ? , ? , ? ) " , " test " , 5 , map ( " lmn " , " foo " ) ) ; 
 
 - assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " xyz " , " foo " ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " xyz " , " foo " ) ) ; 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " test " , " foo " ) , 
 - row ( " test " , 5 , map ( " lmn " , " foo " ) ) 
 - ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " test " , " foo " ) , 
 + row ( " test " , 5 , map ( " lmn " , " foo " ) ) 
 + ) ; 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE categories CONTAINS ? " , " foo " ) , 
 - row ( " test " , 5 , map ( " lmn " , " foo " ) ) 
 - ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE categories CONTAINS ? " , " foo " ) , 
 + row ( " test " , 5 , map ( " lmn " , " foo " ) ) 
 + ) ; 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , " foo " ) , 
 - row ( " test " , 5 , map ( " lmn " , " foo " ) ) 
 - ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , " foo " ) , 
 + row ( " test " , 5 , map ( " lmn " , " foo " ) ) 
 + ) ; 
 
 - assertInvalidMessage ( " Unsupported null value for column categories " , 
 - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , null ) ; 
 + assertInvalidMessage ( " Unsupported null value for column categories " , 
 + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , null ) ; 
 
 - assertInvalidMessage ( " Unsupported unset value for column categories " , 
 - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , unset ( ) ) ; 
 + assertInvalidMessage ( " Unsupported unset value for column categories " , 
 + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , unset ( ) ) ; 
 
 - assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , 
 - " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? " 
 - , " test " , 5 , " foo " , " notPresent " ) ; 
 + assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , 
 + " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? " , 
 + " test " , 5 , " foo " , " notPresent " ) ; 
 
 - assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? ALLOW FILTERING " 
 - , " test " , 5 , " foo " , " notPresent " ) ) ; 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? ALLOW FILTERING " , 
 + " test " , 5 , " foo " , " notPresent " ) ) ; 
 + } ) ; 
 } 
 
 / / See CASSANDRA - 7525 
 @ @ - 541 , 16 + 551 , 16 @ @ public class SelectTest extends CQLTester 
 createIndex ( " CREATE INDEX id _ index ON % s ( id ) " ) ; 
 createIndex ( " CREATE INDEX categories _ values _ index ON % s ( categories ) " ) ; 
 
 - execute ( " INSERT INTO % s ( account , id , categories ) VALUES ( ? , ? , ? ) " , " test " , 5 , map ( " lmn " , " foo " ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE categories CONTAINS ? AND id = ? ALLOW FILTERING " , " foo " , 5 ) , 
 - row ( " test " , 5 , map ( " lmn " , " foo " ) ) 
 - ) ; 
 + execute ( " INSERT INTO % s ( account , id , categories ) VALUES ( ? , ? , ? ) " , " test " , 5 , map ( " lmn " , " foo " ) ) ; 
 
 - assertRows ( 
 - execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND id = ? ALLOW FILTERING " , " test " , " foo " , 5 ) , 
 - row ( " test " , 5 , map ( " lmn " , " foo " ) ) 
 - ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE categories CONTAINS ? AND id = ? ALLOW FILTERING " , " foo " , 5 ) , 
 + row ( " test " , 5 , map ( " lmn " , " foo " ) ) ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND id = ? ALLOW FILTERING " , " test " , " foo " , 5 ) , 
 + row ( " test " , 5 , map ( " lmn " , " foo " ) ) ) ; 
 + } ) ; 
 } 
 
 / / See CASSANDRA - 8033 
 @ @ - 565 , 16 + 575 , 18 @ @ public class SelectTest extends CQLTester 
 execute ( " INSERT INTO % s ( k1 , k2 , v ) VALUES ( ? , ? , ? ) " , 1 , 0 , set ( 3 , 4 , 5 ) ) ; 
 execute ( " INSERT INTO % s ( k1 , k2 , v ) VALUES ( ? , ? , ? ) " , 1 , 1 , set ( 4 , 5 , 6 ) ) ; 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE k2 = ? " , 1 ) , 
 - row ( 0 , 1 , set ( 2 , 3 , 4 ) ) , 
 - row ( 1 , 1 , set ( 4 , 5 , 6 ) ) 
 - ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertRows ( execute ( " SELECT * FROM % s WHERE k2 = ? " , 1 ) , 
 + row ( 0 , 1 , set ( 2 , 3 , 4 ) ) , 
 + row ( 1 , 1 , set ( 4 , 5 , 6 ) ) 
 + ) ; 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE k2 = ? AND v CONTAINS ? ALLOW FILTERING " , 1 , 6 ) , 
 - row ( 1 , 1 , set ( 4 , 5 , 6 ) ) 
 - ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE k2 = ? AND v CONTAINS ? ALLOW FILTERING " , 1 , 6 ) , 
 + row ( 1 , 1 , set ( 4 , 5 , 6 ) ) 
 + ) ; 
 
 - assertEmpty ( execute ( " SELECT * FROM % s WHERE k2 = ? AND v CONTAINS ? ALLOW FILTERING " , 1 , 7 ) ) ; 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE k2 = ? AND v CONTAINS ? ALLOW FILTERING " , 1 , 7 ) ) ; 
 + } ) ; 
 } 
 
 / / See CASSANDRA - 8073 
 @ @ - 583 , 23 + 595 , 26 @ @ public class SelectTest extends CQLTester 
 { 
 createTable ( " CREATE TABLE % s ( a int , b int , c int , d set < int > , PRIMARY KEY ( a , b , c ) ) " ) ; 
 createIndex ( " CREATE INDEX ON % s ( d ) " ) ; 
 + 
 execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 0 , 0 , 0 , set ( 1 , 2 , 3 ) ) ; 
 execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 0 , 0 , 1 , set ( 3 , 4 , 5 ) ) ; 
 execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 0 , 1 , 0 , set ( 1 , 2 , 3 ) ) ; 
 execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 0 , 1 , 1 , set ( 3 , 4 , 5 ) ) ; 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? AND d CONTAINS ? " , 0 , 1 , 3 ) , 
 - row ( 0 , 1 , 0 , set ( 1 , 2 , 3 ) ) , 
 - row ( 0 , 1 , 1 , set ( 3 , 4 , 5 ) ) 
 - ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertRows ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? AND d CONTAINS ? " , 0 , 1 , 3 ) , 
 + row ( 0 , 1 , 0 , set ( 1 , 2 , 3 ) ) , 
 + row ( 0 , 1 , 1 , set ( 3 , 4 , 5 ) ) 
 + ) ; 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? AND d CONTAINS ? " , 0 , 1 , 2 ) , 
 - row ( 0 , 1 , 0 , set ( 1 , 2 , 3 ) ) 
 - ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? AND d CONTAINS ? " , 0 , 1 , 2 ) , 
 + row ( 0 , 1 , 0 , set ( 1 , 2 , 3 ) ) 
 + ) ; 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? AND d CONTAINS ? " , 0 , 1 , 5 ) , 
 - row ( 0 , 1 , 1 , set ( 3 , 4 , 5 ) ) 
 - ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? AND d CONTAINS ? " , 0 , 1 , 5 ) , 
 + row ( 0 , 1 , 1 , set ( 3 , 4 , 5 ) ) 
 + ) ; 
 + } ) ; 
 } 
 
 @ Test 
 @ @ - 611 , 18 + 626 , 20 @ @ public class SelectTest extends CQLTester 
 execute ( " INSERT INTO % s ( account , id , categories ) VALUES ( ? , ? , ? ) " , " test " , 5 , map ( " lmn " , " foo " ) ) ; 
 execute ( " INSERT INTO % s ( account , id , categories ) VALUES ( ? , ? , ? ) " , " test " , 6 , map ( " lmn " , " foo2 " ) ) ; 
 
 - assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , 
 - " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " test " , " foo " ) ; 
 - 
 - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? " , " test " , " lmn " ) , 
 - row ( " test " , 5 , map ( " lmn " , " foo " ) ) , 
 - row ( " test " , 6 , map ( " lmn " , " foo2 " ) ) ) ; 
 - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? AND categories CONTAINS ? ALLOW FILTERING " , 
 - " test " , " lmn " , " foo " ) , 
 - row ( " test " , 5 , map ( " lmn " , " foo " ) ) ) ; 
 - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND categories CONTAINS KEY ? ALLOW FILTERING " , 
 - " test " , " foo " , " lmn " ) , 
 - row ( " test " , 5 , map ( " lmn " , " foo " ) ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , 
 + " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " test " , " foo " ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? " , " test " , " lmn " ) , 
 + row ( " test " , 5 , map ( " lmn " , " foo " ) ) , 
 + row ( " test " , 6 , map ( " lmn " , " foo2 " ) ) ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? AND categories CONTAINS ? ALLOW FILTERING " , 
 + " test " , " lmn " , " foo " ) , 
 + row ( " test " , 5 , map ( " lmn " , " foo " ) ) ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND categories CONTAINS KEY ? ALLOW FILTERING " , 
 + " test " , " foo " , " lmn " ) , 
 + row ( " test " , 5 , map ( " lmn " , " foo " ) ) ) ; 
 + } ) ; 
 } 
 
 @ Test 
 @ @ - 634 , 18 + 651 , 20 @ @ public class SelectTest extends CQLTester 
 execute ( " INSERT INTO % s ( account , id , categories ) VALUES ( ? , ? , ? ) " , " test " , 5 , map ( " lmn " , " foo " ) ) ; 
 execute ( " INSERT INTO % s ( account , id , categories ) VALUES ( ? , ? , ? ) " , " test " , 6 , map ( " lmn2 " , " foo " ) ) ; 
 
 - assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , 
 - " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? " , " test " , " lmn " ) ; 
 - 
 - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " test " , " foo " ) , 
 - row ( " test " , 5 , map ( " lmn " , " foo " ) ) , 
 - row ( " test " , 6 , map ( " lmn2 " , " foo " ) ) ) ; 
 - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? AND categories CONTAINS ? ALLOW FILTERING " , 
 - " test " , " lmn " , " foo " ) , 
 - row ( " test " , 5 , map ( " lmn " , " foo " ) ) ) ; 
 - assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND categories CONTAINS KEY ? ALLOW FILTERING " , 
 - " test " , " foo " , " lmn " ) , 
 - row ( " test " , 5 , map ( " lmn " , " foo " ) ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , 
 + " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? " , " test " , " lmn " ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? " , " test " , " foo " ) , 
 + row ( " test " , 5 , map ( " lmn " , " foo " ) ) , 
 + row ( " test " , 6 , map ( " lmn2 " , " foo " ) ) ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS KEY ? AND categories CONTAINS ? ALLOW FILTERING " , 
 + " test " , " lmn " , " foo " ) , 
 + row ( " test " , 5 , map ( " lmn " , " foo " ) ) ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND categories CONTAINS KEY ? ALLOW FILTERING " , 
 + " test " , " foo " , " lmn " ) , 
 + row ( " test " , 5 , map ( " lmn " , " foo " ) ) ) ; 
 + } ) ; 
 } 
 
 / * * 
 @ @ - 1313 , 18 + 1332 , 20 @ @ public class SelectTest extends CQLTester 
 
 execute ( " INSERT INTO % s ( k , a , b , s , s1 ) VALUES ( ? , ? , ? , ? , ? ) " , 2 , 10 , 10 , 10 , 10 ) ; 
 
 - assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE s = 90 AND s1 = 90 ALLOW FILTERING " ) , 
 - row ( 9 , 90 , 90 ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE s = 90 AND s1 = 90 ALLOW FILTERING " ) , 
 + row ( 9 , 90 , 90 ) ) ; 
 
 - assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE s = 90 AND s1 = 90 ALLOW FILTERING " ) , 
 - row ( 9 , 90 , 90 ) ) ; 
 + assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE s = 90 AND s1 = 90 ALLOW FILTERING " ) , 
 + row ( 9 , 90 , 90 ) ) ; 
 
 - assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE s = 10 AND s1 = 10 ALLOW FILTERING " ) , 
 - row ( 1 , 10 , 10 ) , 
 - row ( 2 , 10 , 10 ) ) ; 
 + assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE s = 10 AND s1 = 10 ALLOW FILTERING " ) , 
 + row ( 1 , 10 , 10 ) , 
 + row ( 2 , 10 , 10 ) ) ; 
 
 - assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE k = 1 AND s = 10 AND s1 = 10 ALLOW FILTERING " ) , 
 - row ( 1 , 10 , 10 ) ) ; 
 + assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE k = 1 AND s = 10 AND s1 = 10 ALLOW FILTERING " ) , 
 + row ( 1 , 10 , 10 ) ) ; 
 + } ) ; 
 } 
 
 / * * 
 @ @ - 1425 , 18 + 1446 , 20 @ @ public class SelectTest extends CQLTester 
 execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , i , j , j , i + j ) ; 
 } 
 
 - assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE a > = 1 AND c = 2 AND s > = 1 ALLOW FILTERING " ) , 
 - row ( 1 , 2 , 1 , 2 , 3 ) , 
 - row ( 3 , 2 , 3 , 2 , 5 ) , 
 - row ( 4 , 2 , 4 , 2 , 6 ) ) ; 
 - 
 - assertRows ( execute ( " SELECT * FROM % s WHERE a > = 1 AND c = 2 AND s > = 1 LIMIT 2 ALLOW FILTERING " ) , 
 - row ( 1 , 2 , 1 , 2 , 3 ) , 
 - row ( 4 , 2 , 4 , 2 , 6 ) ) ; 
 - 
 - assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE a > = 3 AND c = 2 AND s > = 1 LIMIT 2 ALLOW FILTERING " ) , 
 - row ( 4 , 2 , 4 , 2 , 6 ) , 
 - row ( 3 , 2 , 3 , 2 , 5 ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE a > = 1 AND c = 2 AND s > = 1 ALLOW FILTERING " ) , 
 + row ( 1 , 2 , 1 , 2 , 3 ) , 
 + row ( 3 , 2 , 3 , 2 , 5 ) , 
 + row ( 4 , 2 , 4 , 2 , 6 ) ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s WHERE a > = 1 AND c = 2 AND s > = 1 LIMIT 2 ALLOW FILTERING " ) , 
 + row ( 1 , 2 , 1 , 2 , 3 ) , 
 + row ( 4 , 2 , 4 , 2 , 6 ) ) ; 
 + 
 + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE a > = 3 AND c = 2 AND s > = 1 LIMIT 2 ALLOW FILTERING " ) , 
 + row ( 4 , 2 , 4 , 2 , 6 ) , 
 + row ( 3 , 2 , 3 , 2 , 5 ) ) ; 
 + } ) ; 
 } 
 
 @ Test 
 @ @ - 1452 , 9 + 1475 , 11 @ @ public class SelectTest extends CQLTester 
 execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , i , j , j , i + j ) ; 
 } 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE c = 2 AND s > = 1 LIMIT 2 ALLOW FILTERING " ) , 
 - row ( 1 , 2 , 1 , 2 , 3 ) , 
 - row ( 4 , 2 , 4 , 2 , 6 ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertRows ( execute ( " SELECT * FROM % s WHERE c = 2 AND s > = 1 LIMIT 2 ALLOW FILTERING " ) , 
 + row ( 1 , 2 , 1 , 2 , 3 ) , 
 + row ( 4 , 2 , 4 , 2 , 6 ) ) ; 
 + } ) ; 
 } 
 
 @ Test 
 @ @ - 1477 , 7 + 1502 , 7 @ @ public class SelectTest extends CQLTester 
 execute ( " DELETE FROM % s WHERE a = 2 AND b = 2 " ) ; 
 
 beforeAndAfterFlush ( ( ) - > { 
 - 
 + 
 / / Checks filtering 
 assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , 
 " SELECT * FROM % s WHERE c = 4 AND d = 8 " ) ; 
 @ @ - 3925 , 10 + 3950 , 16 @ @ public class SelectTest extends CQLTester 
 execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , " a " , 1 , " b " , 2 ) ; 
 execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , " a " , 2 , " b " , 3 ) ; 
 execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , " c " , 3 , " b " , 4 ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , " d " , 4 , " d " , 5 ) ; 
 + 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertRows ( executeFilteringOnly ( " SELECT * FROM % s WHERE a = ' a ' AND b > 0 AND c = ' b ' " ) , 
 + row ( " a " , 1 , " b " , 2 ) , 
 + row ( " a " , 2 , " b " , 3 ) ) ; 
 
 - assertRows ( executeFilteringOnly ( " SELECT * FROM % s WHERE a = ' a ' AND b > 0 AND c = ' b ' " ) , 
 - row ( " a " , 1 , " b " , 2 ) , 
 - row ( " a " , 2 , " b " , 3 ) ) ; 
 + assertRows ( executeFilteringOnly ( " SELECT * FROM % s WHERE c = ' b ' AND d = 4 " ) , 
 + row ( " c " , 3 , " b " , 4 ) ) ; 
 + } ) ; 
 } 
 
 @ Test 
 @ @ - 4064 , 22 + 4095 , 24 @ @ public class SelectTest extends CQLTester 
 execute ( " INSERT INTO % s ( pk , c1 , c2 , c3 , v ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , i , i , i , i ) ; 
 } 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 > 0 AND c1 < 5 AND c2 = 1 AND v = 3 ALLOW FILTERING ; " ) , 
 - row ( 1 , 1 , 1 , 3 , 3 ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertRows ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 > 0 AND c1 < 5 AND c2 = 1 AND v = 3 ALLOW FILTERING ; " ) , 
 + row ( 1 , 1 , 1 , 3 , 3 ) ) ; 
 
 - assertEmpty ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 > 1 AND c1 < 5 AND c2 = 1 AND v = 3 ALLOW FILTERING ; " ) ) ; 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 > 1 AND c1 < 5 AND c2 = 1 AND v = 3 ALLOW FILTERING ; " ) ) ; 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 > 1 AND c2 > 2 AND c3 > 2 AND v = 3 ALLOW FILTERING ; " ) , 
 - row ( 1 , 3 , 3 , 3 , 3 ) ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 > 1 AND c2 > 2 AND c3 > 2 AND v = 3 ALLOW FILTERING ; " ) , 
 + row ( 1 , 3 , 3 , 3 , 3 ) ) ; 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 > 1 AND c2 > 2 AND c3 = 3 AND v = 3 ALLOW FILTERING ; " ) , 
 - row ( 1 , 3 , 3 , 3 , 3 ) ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 > 1 AND c2 > 2 AND c3 = 3 AND v = 3 ALLOW FILTERING ; " ) , 
 + row ( 1 , 3 , 3 , 3 , 3 ) ) ; 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 IN ( 0 , 1 , 2 ) AND c2 = 1 AND v = 3 ALLOW FILTERING ; " ) , 
 - row ( 1 , 1 , 1 , 3 , 3 ) ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 IN ( 0 , 1 , 2 ) AND c2 = 1 AND v = 3 ALLOW FILTERING ; " ) , 
 + row ( 1 , 1 , 1 , 3 , 3 ) ) ; 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 IN ( 0 , 1 , 2 ) AND c2 = 1 AND v = 3 " ) , 
 - row ( 1 , 1 , 1 , 3 , 3 ) ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE pk = 1 AND c1 IN ( 0 , 1 , 2 ) AND c2 = 1 AND v = 3 " ) , 
 + row ( 1 , 1 , 1 , 3 , 3 ) ) ; 
 + } ) ; 
 } 
 
 @ Test 
 @ @ - 4094 , 9 + 4127 , 11 @ @ public class SelectTest extends CQLTester 
 execute ( " INSERT INTO % s ( p1 , p2 , v ) values ( ? , ? , ? ) " , 1 , 2 , 3 ) ; 
 execute ( " INSERT INTO % s ( p1 , p2 , v ) values ( ? , ? , ? ) " , 2 , 1 , 3 ) ; 
 
 - assertRows ( execute ( " SELECT * FROM % s WHERE p1 = 1 AND v = 3 ALLOW FILTERING " ) , 
 - row ( 1 , 2 , 3 ) , 
 - row ( 1 , 1 , 3 ) ) ; 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertRows ( execute ( " SELECT * FROM % s WHERE p1 = 1 AND v = 3 ALLOW FILTERING " ) , 
 + row ( 1 , 2 , 3 ) , 
 + row ( 1 , 1 , 3 ) ) ; 
 + } ) ; 
 } 
 
 @ Test

NEAREST DIFF:
ELIMINATEDSENTENCE
