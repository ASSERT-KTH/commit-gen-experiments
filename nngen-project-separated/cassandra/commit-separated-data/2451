BLEU SCORE: 0.027611988917697356

TEST MSG: Fix cql3 reader when columns is reversed .
GENERATED MSG: add CqlPagingRecordReader support for ReversedType in Thrift table

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java b / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java <nl> index 1492ce0 . . 03d9ae9 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java <nl> @ @ - 27 , 13 + 27 , 14 @ @ import java . util . * ; <nl> import com . google . common . base . Optional ; <nl> import com . google . common . collect . AbstractIterator ; <nl> import com . google . common . collect . Iterables ; <nl> + <nl> import org . apache . cassandra . hadoop . HadoopCompat ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> - <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . db . marshal . CompositeType ; <nl> import org . apache . cassandra . db . marshal . LongType ; <nl> + import org . apache . cassandra . db . marshal . ReversedType ; <nl> import org . apache . cassandra . db . marshal . TypeParser ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> @ @ - 507 , 7 + 508 , 7 @ @ public class CqlPagingRecordReader extends RecordReader < Map < String , ByteBuffer > , <nl> private Pair < Integer , String > whereClause ( List < BoundColumn > column , int position ) <nl> { <nl> if ( position = = column . size ( ) - 1 | | column . get ( position + 1 ) . value = = null ) <nl> - return Pair . create ( position + 2 , String . format ( " AND % s > ? " , quote ( column . get ( position ) . name ) ) ) ; <nl> + return Pair . create ( position + 2 , String . format ( " AND % s % s ? " , quote ( column . get ( position ) . name ) , column . get ( position ) . reversed ? " < " : " > " ) ) ; <nl> <nl> Pair < Integer , String > clause = whereClause ( column , position + 1 ) ; <nl> return Pair . create ( clause . left , String . format ( " AND % s = ? % s " , quote ( column . get ( position ) . name ) , clause . right ) ) ; <nl> @ @ - 711 , 6 + 712 , 20 @ @ public class CqlPagingRecordReader extends RecordReader < Map < String , ByteBuffer > , <nl> { <nl> partitionBoundColumns . get ( 0 ) . validator = keyValidator ; <nl> } <nl> + <nl> + Column rawComparator = cqlRow . columns . get ( 3 ) ; <nl> + String comparator = ByteBufferUtil . string ( ByteBuffer . wrap ( rawComparator . getValue ( ) ) ) ; <nl> + logger . debug ( " comparator : { } " , comparator ) ; <nl> + AbstractType comparatorValidator = parseType ( comparator ) ; <nl> + if ( comparatorValidator instanceof CompositeType ) <nl> + { <nl> + for ( int i = 0 ; i < clusterColumns . size ( ) ; i + + ) <nl> + clusterColumns . get ( i ) . reversed = ( ( ( CompositeType ) comparatorValidator ) . types . get ( i ) instanceof ReversedType ) ; <nl> + } <nl> + else if ( comparatorValidator instanceof ReversedType ) <nl> + { <nl> + clusterColumns . get ( 0 ) . reversed = true ; <nl> + } <nl> } <nl> <nl> / * * check whether current row is at the end of range * / <nl> @ @ - 762 , 6 + 777 , 7 @ @ public class CqlPagingRecordReader extends RecordReader < Map < String , ByteBuffer > , <nl> final String name ; <nl> ByteBuffer value ; <nl> AbstractType < ? > validator ; <nl> + boolean reversed = false ; <nl> <nl> public BoundColumn ( String name ) <nl> {
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 67227a1 . . af94bc8 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 25 , 9 + 25 , 6 @ @ Merged from 1 . 2 : <nl> ( CASSANDRA - 5752 ) <nl> * add " all time blocked " to StatusLogger output ( CASSANDRA - 5825 ) <nl> * Future - proof inter - major - version schema migrations ( CASSANDRA - 5845 ) <nl> - <nl> - <nl> - 1 . 2 . 8 <nl> * Fix reading DeletionTime from 1 . 1 - format sstables ( CASSANDRA - 5814 ) <nl> * cqlsh : add collections support to COPY ( CASSANDRA - 5698 ) <nl> * retry important messages for any IOException ( CASSANDRA - 5804 )

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java b / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java 
 index 1492ce0 . . 03d9ae9 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java 
 + + + b / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java 
 @ @ - 27 , 13 + 27 , 14 @ @ import java . util . * ; 
 import com . google . common . base . Optional ; 
 import com . google . common . collect . AbstractIterator ; 
 import com . google . common . collect . Iterables ; 
 + 
 import org . apache . cassandra . hadoop . HadoopCompat ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 - 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . db . marshal . CompositeType ; 
 import org . apache . cassandra . db . marshal . LongType ; 
 + import org . apache . cassandra . db . marshal . ReversedType ; 
 import org . apache . cassandra . db . marshal . TypeParser ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 @ @ - 507 , 7 + 508 , 7 @ @ public class CqlPagingRecordReader extends RecordReader < Map < String , ByteBuffer > , 
 private Pair < Integer , String > whereClause ( List < BoundColumn > column , int position ) 
 { 
 if ( position = = column . size ( ) - 1 | | column . get ( position + 1 ) . value = = null ) 
 - return Pair . create ( position + 2 , String . format ( " AND % s > ? " , quote ( column . get ( position ) . name ) ) ) ; 
 + return Pair . create ( position + 2 , String . format ( " AND % s % s ? " , quote ( column . get ( position ) . name ) , column . get ( position ) . reversed ? " < " : " > " ) ) ; 
 
 Pair < Integer , String > clause = whereClause ( column , position + 1 ) ; 
 return Pair . create ( clause . left , String . format ( " AND % s = ? % s " , quote ( column . get ( position ) . name ) , clause . right ) ) ; 
 @ @ - 711 , 6 + 712 , 20 @ @ public class CqlPagingRecordReader extends RecordReader < Map < String , ByteBuffer > , 
 { 
 partitionBoundColumns . get ( 0 ) . validator = keyValidator ; 
 } 
 + 
 + Column rawComparator = cqlRow . columns . get ( 3 ) ; 
 + String comparator = ByteBufferUtil . string ( ByteBuffer . wrap ( rawComparator . getValue ( ) ) ) ; 
 + logger . debug ( " comparator : { } " , comparator ) ; 
 + AbstractType comparatorValidator = parseType ( comparator ) ; 
 + if ( comparatorValidator instanceof CompositeType ) 
 + { 
 + for ( int i = 0 ; i < clusterColumns . size ( ) ; i + + ) 
 + clusterColumns . get ( i ) . reversed = ( ( ( CompositeType ) comparatorValidator ) . types . get ( i ) instanceof ReversedType ) ; 
 + } 
 + else if ( comparatorValidator instanceof ReversedType ) 
 + { 
 + clusterColumns . get ( 0 ) . reversed = true ; 
 + } 
 } 
 
 / * * check whether current row is at the end of range * / 
 @ @ - 762 , 6 + 777 , 7 @ @ public class CqlPagingRecordReader extends RecordReader < Map < String , ByteBuffer > , 
 final String name ; 
 ByteBuffer value ; 
 AbstractType < ? > validator ; 
 + boolean reversed = false ; 
 
 public BoundColumn ( String name ) 
 {

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 67227a1 . . af94bc8 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 25 , 9 + 25 , 6 @ @ Merged from 1 . 2 : 
 ( CASSANDRA - 5752 ) 
 * add " all time blocked " to StatusLogger output ( CASSANDRA - 5825 ) 
 * Future - proof inter - major - version schema migrations ( CASSANDRA - 5845 ) 
 - 
 - 
 - 1 . 2 . 8 
 * Fix reading DeletionTime from 1 . 1 - format sstables ( CASSANDRA - 5814 ) 
 * cqlsh : add collections support to COPY ( CASSANDRA - 5698 ) 
 * retry important messages for any IOException ( CASSANDRA - 5804 )
