BLEU SCORE: 0.04408194605881708

TEST MSG: Allow IN restrictions on column families with collections
GENERATED MSG: Fix sorting for queries with an IN condition on partition key columns

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 1563d6b . . d4da5c4 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 12 <nl> + * Allow IN restrictions on column families with collections ( CASSANDRA - 12654 ) <nl> * Move to FastThreadLocalThread and FastThreadLocal ( CASSANDRA - 13034 ) <nl> * nodetool stopdaemon errors out ( CASSANDRA - 13030 ) <nl> * Log message size in trace message in OutboundTcpConnection ( CASSANDRA - 13028 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java b / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java <nl> index 6b89579 . . 0d5d403 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java <nl> @ @ - 36 , 7 + 36 , 6 @ @ import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> import org . apache . cassandra . index . Index ; <nl> import org . apache . cassandra . index . SecondaryIndexManager ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> - import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . btree . BTreeSet ; <nl> <nl> import static org . apache . cassandra . cql3 . statements . RequestValidations . checkFalse ; <nl> @ @ - 122 , 7 + 121 , 6 @ @ public final class StatementRestrictions <nl> WhereClause whereClause , <nl> VariableSpecifications boundNames , <nl> boolean selectsOnlyStaticColumns , <nl> - boolean selectsComplexColumn , <nl> boolean allowFiltering , <nl> boolean forView ) <nl> { <nl> @ @ - 218 , 7 + 216 , 6 @ @ public final class StatementRestrictions <nl> <nl> processClusteringColumnsRestrictions ( hasQueriableIndex , <nl> selectsOnlyStaticColumns , <nl> - selectsComplexColumn , <nl> forView , <nl> allowFiltering ) ; <nl> <nl> @ @ - 487 , 11 + 484 , 9 @ @ public final class StatementRestrictions <nl> * @ param hasQueriableIndex < code > true < / code > if some of the queried data are indexed , < code > false < / code > otherwise <nl> * @ param selectsOnlyStaticColumns < code > true < / code > if the selected or modified columns are all statics , <nl> * < code > false < / code > otherwise . <nl> - * @ param selectsComplexColumn < code > true < / code > if the query should return a collection column <nl> * / <nl> private void processClusteringColumnsRestrictions ( boolean hasQueriableIndex , <nl> boolean selectsOnlyStaticColumns , <nl> - boolean selectsComplexColumn , <nl> boolean forView , <nl> boolean allowFiltering ) <nl> { <nl> @ @ - 507 , 8 + 502 , 6 @ @ public final class StatementRestrictions <nl> } <nl> else <nl> { <nl> - checkFalse ( clusteringColumnsRestrictions . hasIN ( ) & & selectsComplexColumn , <nl> - " Cannot restrict clustering columns by IN relations when a collection is selected by the query " ) ; <nl> checkFalse ( clusteringColumnsRestrictions . hasContains ( ) & & ! hasQueriableIndex & & ! allowFiltering , <nl> <nl> " Clustering columns can only be restricted with CONTAINS with a secondary index or filtering " ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / selection / Selection . java b / src / java / org / apache / cassandra / cql3 / selection / Selection . java <nl> index 0d76b4e . . 401442f 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / selection / Selection . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / selection / Selection . java <nl> @ @ - 116 , 20 + 116 , 6 @ @ public abstract class Selection <nl> return true ; <nl> } <nl> <nl> - / * * <nl> - * Checks if this selection contains a complex column . <nl> - * <nl> - * @ return < code > true < / code > if this selection contains a multicell collection or UDT , < code > false < / code > otherwise . <nl> - * / <nl> - public boolean containsAComplexColumn ( ) <nl> - { <nl> - for ( ColumnDefinition def : getColumns ( ) ) <nl> - if ( def . isComplex ( ) ) <nl> - return true ; <nl> - <nl> - return false ; <nl> - } <nl> - <nl> public ResultSet . ResultMetadata getResultMetadata ( boolean isJson ) <nl> { <nl> if ( ! isJson ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> index 5f3a2b3 . . 99395ed 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> @ @ - 887 , 7 + 887 , 7 @ @ public abstract class ModificationStatement implements CQLStatement <nl> throw new InvalidRequestException ( CUSTOM _ EXPRESSIONS _ NOT _ ALLOWED ) ; <nl> <nl> boolean applyOnlyToStaticColumns = appliesOnlyToStaticColumns ( operations , conditions ) ; <nl> - return new StatementRestrictions ( type , cfm , where , boundNames , applyOnlyToStaticColumns , false , false , false ) ; <nl> + return new StatementRestrictions ( type , cfm , where , boundNames , applyOnlyToStaticColumns , false , false ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index 1744e70 . . 8e28ceb 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 995 , 7 + 995 , 6 @ @ public class SelectStatement implements CQLStatement <nl> whereClause , <nl> boundNames , <nl> selection . containsOnlyStaticColumns ( ) , <nl> - selection . containsAComplexColumn ( ) , <nl> parameters . allowFiltering , <nl> forView ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java <nl> index 6bcfd9c . . b097ded 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java <nl> @ @ - 184 , 7 + 184 , 6 @ @ public class UpdateStatement extends ModificationStatement <nl> boundNames , <nl> applyOnlyToStaticColumns , <nl> false , <nl> - false , <nl> false ) ; <nl> <nl> return new UpdateStatement ( type , <nl> @ @ - 253 , 7 + 252 , 6 @ @ public class UpdateStatement extends ModificationStatement <nl> boundNames , <nl> applyOnlyToStaticColumns , <nl> false , <nl> - false , <nl> false ) ; <nl> <nl> return new UpdateStatement ( type , <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java <nl> index 0c59d6f . . 20cbe29 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java <nl> @ @ - 564 , 17 + 564 , 54 @ @ public class CollectionsTest extends CQLTester <nl> assertInvalid ( " SELECT writetime ( l ) FROM % s WHERE k = 0 " ) ; <nl> } <nl> <nl> - / * * <nl> - * Migrated from cql _ tests . py : TestCQL . bug _ 5376 ( ) <nl> - * / <nl> @ Test <nl> - public void testInClauseWithCollections ( ) throws Throwable <nl> + public void testInRestrictionWithCollection ( ) throws Throwable <nl> { <nl> - createTable ( " CREATE TABLE % s ( key text , c bigint , v text , x set < text > , PRIMARY KEY ( key , c ) ) " ) ; <nl> - <nl> - assertInvalid ( " select * from % s where key = ' foo ' and c in ( 1 , 3 , 4 ) " ) ; <nl> + for ( boolean frozen : new boolean [ ] { true , false } ) <nl> + { <nl> + createTable ( frozen ? " CREATE TABLE % s ( a int , b int , c int , d frozen < list < int > > , e frozen < map < int , int > > , f frozen < set < int > > , PRIMARY KEY ( a , b , c ) ) " <nl> + : " CREATE TABLE % s ( a int , b int , c int , d list < int > , e map < int , int > , f set < int > , PRIMARY KEY ( a , b , c ) ) " ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( a , b , c , d , e , f ) VALUES ( 1 , 1 , 1 , [ 1 , 2 ] , { 1 : 2 } , { 1 , 2 } ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d , e , f ) VALUES ( 1 , 1 , 2 , [ 1 , 3 ] , { 1 : 3 } , { 1 , 3 } ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d , e , f ) VALUES ( 1 , 1 , 3 , [ 1 , 4 ] , { 1 : 4 } , { 1 , 4 } ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d , e , f ) VALUES ( 1 , 2 , 3 , [ 1 , 3 ] , { 1 : 3 } , { 1 , 3 } ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d , e , f ) VALUES ( 1 , 2 , 4 , [ 1 , 3 ] , { 1 : 3 } , { 1 , 3 } ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d , e , f ) VALUES ( 2 , 1 , 1 , [ 1 , 2 ] , { 2 : 2 } , { 1 , 2 } ) " ) ; <nl> + <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE a in ( 1 , 2 ) " ) , <nl> + row ( 1 , 1 , 1 , list ( 1 , 2 ) , map ( 1 , 2 ) , set ( 1 , 2 ) ) , <nl> + row ( 1 , 1 , 2 , list ( 1 , 3 ) , map ( 1 , 3 ) , set ( 1 , 3 ) ) , <nl> + row ( 1 , 1 , 3 , list ( 1 , 4 ) , map ( 1 , 4 ) , set ( 1 , 4 ) ) , <nl> + row ( 1 , 2 , 3 , list ( 1 , 3 ) , map ( 1 , 3 ) , set ( 1 , 3 ) ) , <nl> + row ( 1 , 2 , 4 , list ( 1 , 3 ) , map ( 1 , 3 ) , set ( 1 , 3 ) ) , <nl> + row ( 2 , 1 , 1 , list ( 1 , 2 ) , map ( 2 , 2 ) , set ( 1 , 2 ) ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE a = 1 AND b IN ( 1 , 2 ) " ) , <nl> + row ( 1 , 1 , 1 , list ( 1 , 2 ) , map ( 1 , 2 ) , set ( 1 , 2 ) ) , <nl> + row ( 1 , 1 , 2 , list ( 1 , 3 ) , map ( 1 , 3 ) , set ( 1 , 3 ) ) , <nl> + row ( 1 , 1 , 3 , list ( 1 , 4 ) , map ( 1 , 4 ) , set ( 1 , 4 ) ) , <nl> + row ( 1 , 2 , 3 , list ( 1 , 3 ) , map ( 1 , 3 ) , set ( 1 , 3 ) ) , <nl> + row ( 1 , 2 , 4 , list ( 1 , 3 ) , map ( 1 , 3 ) , set ( 1 , 3 ) ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE a = 1 AND b = 1 AND c in ( 1 , 2 ) " ) , <nl> + row ( 1 , 1 , 1 , list ( 1 , 2 ) , map ( 1 , 2 ) , set ( 1 , 2 ) ) , <nl> + row ( 1 , 1 , 2 , list ( 1 , 3 ) , map ( 1 , 3 ) , set ( 1 , 3 ) ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE a = 1 AND b IN ( 1 , 2 ) AND c in ( 1 , 2 , 3 ) " ) , <nl> + row ( 1 , 1 , 1 , list ( 1 , 2 ) , map ( 1 , 2 ) , set ( 1 , 2 ) ) , <nl> + row ( 1 , 1 , 2 , list ( 1 , 3 ) , map ( 1 , 3 ) , set ( 1 , 3 ) ) , <nl> + row ( 1 , 1 , 3 , list ( 1 , 4 ) , map ( 1 , 4 ) , set ( 1 , 4 ) ) , <nl> + row ( 1 , 2 , 3 , list ( 1 , 3 ) , map ( 1 , 3 ) , set ( 1 , 3 ) ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE a = 1 AND b IN ( 1 , 2 ) AND c in ( 1 , 2 , 3 ) AND d CONTAINS 4 ALLOW FILTERING " ) , <nl> + row ( 1 , 1 , 3 , list ( 1 , 4 ) , map ( 1 , 4 ) , set ( 1 , 4 ) ) ) ; <nl> + } ) ; <nl> + } <nl> } <nl> <nl> + <nl> / * * <nl> * Test for bug # 5795 , <nl> * migrated from cql _ tests . py : TestCQL . nonpure _ function _ collection _ test ( )
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 1563d6b . . d4da5c4 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 12 
 + * Allow IN restrictions on column families with collections ( CASSANDRA - 12654 ) 
 * Move to FastThreadLocalThread and FastThreadLocal ( CASSANDRA - 13034 ) 
 * nodetool stopdaemon errors out ( CASSANDRA - 13030 ) 
 * Log message size in trace message in OutboundTcpConnection ( CASSANDRA - 13028 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java b / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java 
 index 6b89579 . . 0d5d403 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java 
 + + + b / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java 
 @ @ - 36 , 7 + 36 , 6 @ @ import org . apache . cassandra . exceptions . InvalidRequestException ; 
 import org . apache . cassandra . index . Index ; 
 import org . apache . cassandra . index . SecondaryIndexManager ; 
 import org . apache . cassandra . net . MessagingService ; 
 - import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . btree . BTreeSet ; 
 
 import static org . apache . cassandra . cql3 . statements . RequestValidations . checkFalse ; 
 @ @ - 122 , 7 + 121 , 6 @ @ public final class StatementRestrictions 
 WhereClause whereClause , 
 VariableSpecifications boundNames , 
 boolean selectsOnlyStaticColumns , 
 - boolean selectsComplexColumn , 
 boolean allowFiltering , 
 boolean forView ) 
 { 
 @ @ - 218 , 7 + 216 , 6 @ @ public final class StatementRestrictions 
 
 processClusteringColumnsRestrictions ( hasQueriableIndex , 
 selectsOnlyStaticColumns , 
 - selectsComplexColumn , 
 forView , 
 allowFiltering ) ; 
 
 @ @ - 487 , 11 + 484 , 9 @ @ public final class StatementRestrictions 
 * @ param hasQueriableIndex < code > true < / code > if some of the queried data are indexed , < code > false < / code > otherwise 
 * @ param selectsOnlyStaticColumns < code > true < / code > if the selected or modified columns are all statics , 
 * < code > false < / code > otherwise . 
 - * @ param selectsComplexColumn < code > true < / code > if the query should return a collection column 
 * / 
 private void processClusteringColumnsRestrictions ( boolean hasQueriableIndex , 
 boolean selectsOnlyStaticColumns , 
 - boolean selectsComplexColumn , 
 boolean forView , 
 boolean allowFiltering ) 
 { 
 @ @ - 507 , 8 + 502 , 6 @ @ public final class StatementRestrictions 
 } 
 else 
 { 
 - checkFalse ( clusteringColumnsRestrictions . hasIN ( ) & & selectsComplexColumn , 
 - " Cannot restrict clustering columns by IN relations when a collection is selected by the query " ) ; 
 checkFalse ( clusteringColumnsRestrictions . hasContains ( ) & & ! hasQueriableIndex & & ! allowFiltering , 
 
 " Clustering columns can only be restricted with CONTAINS with a secondary index or filtering " ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / selection / Selection . java b / src / java / org / apache / cassandra / cql3 / selection / Selection . java 
 index 0d76b4e . . 401442f 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / selection / Selection . java 
 + + + b / src / java / org / apache / cassandra / cql3 / selection / Selection . java 
 @ @ - 116 , 20 + 116 , 6 @ @ public abstract class Selection 
 return true ; 
 } 
 
 - / * * 
 - * Checks if this selection contains a complex column . 
 - * 
 - * @ return < code > true < / code > if this selection contains a multicell collection or UDT , < code > false < / code > otherwise . 
 - * / 
 - public boolean containsAComplexColumn ( ) 
 - { 
 - for ( ColumnDefinition def : getColumns ( ) ) 
 - if ( def . isComplex ( ) ) 
 - return true ; 
 - 
 - return false ; 
 - } 
 - 
 public ResultSet . ResultMetadata getResultMetadata ( boolean isJson ) 
 { 
 if ( ! isJson ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 index 5f3a2b3 . . 99395ed 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 @ @ - 887 , 7 + 887 , 7 @ @ public abstract class ModificationStatement implements CQLStatement 
 throw new InvalidRequestException ( CUSTOM _ EXPRESSIONS _ NOT _ ALLOWED ) ; 
 
 boolean applyOnlyToStaticColumns = appliesOnlyToStaticColumns ( operations , conditions ) ; 
 - return new StatementRestrictions ( type , cfm , where , boundNames , applyOnlyToStaticColumns , false , false , false ) ; 
 + return new StatementRestrictions ( type , cfm , where , boundNames , applyOnlyToStaticColumns , false , false ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index 1744e70 . . 8e28ceb 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 995 , 7 + 995 , 6 @ @ public class SelectStatement implements CQLStatement 
 whereClause , 
 boundNames , 
 selection . containsOnlyStaticColumns ( ) , 
 - selection . containsAComplexColumn ( ) , 
 parameters . allowFiltering , 
 forView ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java 
 index 6bcfd9c . . b097ded 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java 
 @ @ - 184 , 7 + 184 , 6 @ @ public class UpdateStatement extends ModificationStatement 
 boundNames , 
 applyOnlyToStaticColumns , 
 false , 
 - false , 
 false ) ; 
 
 return new UpdateStatement ( type , 
 @ @ - 253 , 7 + 252 , 6 @ @ public class UpdateStatement extends ModificationStatement 
 boundNames , 
 applyOnlyToStaticColumns , 
 false , 
 - false , 
 false ) ; 
 
 return new UpdateStatement ( type , 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java 
 index 0c59d6f . . 20cbe29 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java 
 @ @ - 564 , 17 + 564 , 54 @ @ public class CollectionsTest extends CQLTester 
 assertInvalid ( " SELECT writetime ( l ) FROM % s WHERE k = 0 " ) ; 
 } 
 
 - / * * 
 - * Migrated from cql _ tests . py : TestCQL . bug _ 5376 ( ) 
 - * / 
 @ Test 
 - public void testInClauseWithCollections ( ) throws Throwable 
 + public void testInRestrictionWithCollection ( ) throws Throwable 
 { 
 - createTable ( " CREATE TABLE % s ( key text , c bigint , v text , x set < text > , PRIMARY KEY ( key , c ) ) " ) ; 
 - 
 - assertInvalid ( " select * from % s where key = ' foo ' and c in ( 1 , 3 , 4 ) " ) ; 
 + for ( boolean frozen : new boolean [ ] { true , false } ) 
 + { 
 + createTable ( frozen ? " CREATE TABLE % s ( a int , b int , c int , d frozen < list < int > > , e frozen < map < int , int > > , f frozen < set < int > > , PRIMARY KEY ( a , b , c ) ) " 
 + : " CREATE TABLE % s ( a int , b int , c int , d list < int > , e map < int , int > , f set < int > , PRIMARY KEY ( a , b , c ) ) " ) ; 
 + 
 + execute ( " INSERT INTO % s ( a , b , c , d , e , f ) VALUES ( 1 , 1 , 1 , [ 1 , 2 ] , { 1 : 2 } , { 1 , 2 } ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d , e , f ) VALUES ( 1 , 1 , 2 , [ 1 , 3 ] , { 1 : 3 } , { 1 , 3 } ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d , e , f ) VALUES ( 1 , 1 , 3 , [ 1 , 4 ] , { 1 : 4 } , { 1 , 4 } ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d , e , f ) VALUES ( 1 , 2 , 3 , [ 1 , 3 ] , { 1 : 3 } , { 1 , 3 } ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d , e , f ) VALUES ( 1 , 2 , 4 , [ 1 , 3 ] , { 1 : 3 } , { 1 , 3 } ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d , e , f ) VALUES ( 2 , 1 , 1 , [ 1 , 2 ] , { 2 : 2 } , { 1 , 2 } ) " ) ; 
 + 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertRows ( execute ( " SELECT * FROM % s WHERE a in ( 1 , 2 ) " ) , 
 + row ( 1 , 1 , 1 , list ( 1 , 2 ) , map ( 1 , 2 ) , set ( 1 , 2 ) ) , 
 + row ( 1 , 1 , 2 , list ( 1 , 3 ) , map ( 1 , 3 ) , set ( 1 , 3 ) ) , 
 + row ( 1 , 1 , 3 , list ( 1 , 4 ) , map ( 1 , 4 ) , set ( 1 , 4 ) ) , 
 + row ( 1 , 2 , 3 , list ( 1 , 3 ) , map ( 1 , 3 ) , set ( 1 , 3 ) ) , 
 + row ( 1 , 2 , 4 , list ( 1 , 3 ) , map ( 1 , 3 ) , set ( 1 , 3 ) ) , 
 + row ( 2 , 1 , 1 , list ( 1 , 2 ) , map ( 2 , 2 ) , set ( 1 , 2 ) ) ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s WHERE a = 1 AND b IN ( 1 , 2 ) " ) , 
 + row ( 1 , 1 , 1 , list ( 1 , 2 ) , map ( 1 , 2 ) , set ( 1 , 2 ) ) , 
 + row ( 1 , 1 , 2 , list ( 1 , 3 ) , map ( 1 , 3 ) , set ( 1 , 3 ) ) , 
 + row ( 1 , 1 , 3 , list ( 1 , 4 ) , map ( 1 , 4 ) , set ( 1 , 4 ) ) , 
 + row ( 1 , 2 , 3 , list ( 1 , 3 ) , map ( 1 , 3 ) , set ( 1 , 3 ) ) , 
 + row ( 1 , 2 , 4 , list ( 1 , 3 ) , map ( 1 , 3 ) , set ( 1 , 3 ) ) ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s WHERE a = 1 AND b = 1 AND c in ( 1 , 2 ) " ) , 
 + row ( 1 , 1 , 1 , list ( 1 , 2 ) , map ( 1 , 2 ) , set ( 1 , 2 ) ) , 
 + row ( 1 , 1 , 2 , list ( 1 , 3 ) , map ( 1 , 3 ) , set ( 1 , 3 ) ) ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s WHERE a = 1 AND b IN ( 1 , 2 ) AND c in ( 1 , 2 , 3 ) " ) , 
 + row ( 1 , 1 , 1 , list ( 1 , 2 ) , map ( 1 , 2 ) , set ( 1 , 2 ) ) , 
 + row ( 1 , 1 , 2 , list ( 1 , 3 ) , map ( 1 , 3 ) , set ( 1 , 3 ) ) , 
 + row ( 1 , 1 , 3 , list ( 1 , 4 ) , map ( 1 , 4 ) , set ( 1 , 4 ) ) , 
 + row ( 1 , 2 , 3 , list ( 1 , 3 ) , map ( 1 , 3 ) , set ( 1 , 3 ) ) ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s WHERE a = 1 AND b IN ( 1 , 2 ) AND c in ( 1 , 2 , 3 ) AND d CONTAINS 4 ALLOW FILTERING " ) , 
 + row ( 1 , 1 , 3 , list ( 1 , 4 ) , map ( 1 , 4 ) , set ( 1 , 4 ) ) ) ; 
 + } ) ; 
 + } 
 } 
 
 + 
 / * * 
 * Test for bug # 5795 , 
 * migrated from cql _ tests . py : TestCQL . nonpure _ function _ collection _ test ( )

NEAREST DIFF:
ELIMINATEDSENTENCE
