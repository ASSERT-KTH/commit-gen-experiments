BLEU SCORE: 0.05522397783539471

TEST MSG: Fixed the error when tracing query with cqlsh
GENERATED MSG: cqlsh : handle CUSTOM 2i in DESCRIBE output

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index fd1f5af . . e48117a 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 1 <nl> + * ( cqlsh ) Error when tracing query ( CASSANDRA - 7613 ) <nl> * Avoid IOOBE when building SyntaxError message snippet ( CASSANDRA - 7569 ) <nl> * SSTableExport uses correct validator to create string representation of partition <nl> keys ( CASSANDRA - 7498 ) <nl> diff - - git a / bin / cqlsh b / bin / cqlsh <nl> index 5b63696 . . 1a2df86 100755 <nl> - - - a / bin / cqlsh <nl> + + + b / bin / cqlsh <nl> @ @ - 584 , 13 + 584 , 14 @ @ class Shell ( cmd . Cmd ) : <nl> self . decoding _ errors . append ( err ) <nl> return format _ value ( err , self . output _ codec . name , addcolor = self . color ) <nl> <nl> - def myformat _ colname ( self , name , cfMetaData ) : <nl> + def myformat _ colname ( self , name , cfMetaData = None ) : <nl> column _ colors = COLUMN _ NAME _ COLORS . copy ( ) <nl> # check column role and color appropriately <nl> - if name in [ col . name for col in cfMetaData . partition _ key ] : <nl> - column _ colors . default _ factory = lambda : RED <nl> - elif name in [ col . name for col in cfMetaData . clustering _ key ] : <nl> - column _ colors . default _ factory = lambda : CYAN <nl> + if cfMetaData : <nl> + if name in [ col . name for col in cfMetaData . partition _ key ] : <nl> + column _ colors . default _ factory = lambda : RED <nl> + elif name in [ col . name for col in cfMetaData . clustering _ key ] : <nl> + column _ colors . default _ factory = lambda : CYAN <nl> return self . myformat _ value ( name , colormap = column _ colors ) <nl> <nl> def report _ connection ( self ) :
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index 5639292 . . 3611986 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 91 , 81 + 91 , 80 @ @ public final class CFMetaData <nl> / / Note that this is the default only for user created tables <nl> public final static String DEFAULT _ COMPRESSOR = LZ4Compressor . class . getCanonicalName ( ) ; <nl> <nl> - public static final CFMetaData IndexCf = compile ( 5 , " CREATE TABLE \ " " + SystemKeyspace . INDEX _ CF + " \ " ( " <nl> - + " table _ name text , " <nl> - + " index _ name text , " <nl> - + " PRIMARY KEY ( table _ name , index _ name ) " <nl> - + " ) WITH COMPACT STORAGE AND COMMENT = ' indexes that have been completed ' " ) ; <nl> - <nl> - public static final CFMetaData CounterIdCf = compile ( 6 , " CREATE TABLE \ " " + SystemKeyspace . COUNTER _ ID _ CF + " \ " ( " <nl> - + " key text , " <nl> - + " id timeuuid , " <nl> - + " PRIMARY KEY ( key , id ) " <nl> - + " ) WITH COMPACT STORAGE AND COMMENT = ' counter node IDs ' " ) ; <nl> - <nl> - / / new - style schema <nl> - public static final CFMetaData SchemaKeyspacesCf = compile ( 8 , " CREATE TABLE " + SystemKeyspace . SCHEMA _ KEYSPACES _ CF + " ( " <nl> - + " keyspace _ name text PRIMARY KEY , " <nl> - + " durable _ writes boolean , " <nl> - + " strategy _ class text , " <nl> - + " strategy _ options text " <nl> - + " ) WITH COMPACT STORAGE AND COMMENT = ' keyspace definitions ' AND gc _ grace _ seconds = 8640 " ) ; <nl> - <nl> - public static final CFMetaData SchemaColumnFamiliesCf = compile ( 9 , " CREATE TABLE " + SystemKeyspace . SCHEMA _ COLUMNFAMILIES _ CF + " ( " <nl> - + " keyspace _ name text , " <nl> - + " columnfamily _ name text , " <nl> - + " type text , " <nl> - + " comparator text , " <nl> - + " subcomparator text , " <nl> - + " comment text , " <nl> - + " read _ repair _ chance double , " <nl> - + " local _ read _ repair _ chance double , " <nl> - + " replicate _ on _ write boolean , " <nl> - + " gc _ grace _ seconds int , " <nl> - + " default _ validator text , " <nl> - + " key _ validator text , " <nl> - + " min _ compaction _ threshold int , " <nl> - + " max _ compaction _ threshold int , " <nl> - + " memtable _ flush _ period _ in _ ms int , " <nl> - + " key _ alias text , " / / that one is kept for compatibility sake <nl> - + " key _ aliases text , " <nl> - + " bloom _ filter _ fp _ chance double , " <nl> - + " caching text , " <nl> - + " default _ time _ to _ live int , " <nl> - + " compaction _ strategy _ class text , " <nl> - + " compression _ parameters text , " <nl> - + " value _ alias text , " <nl> - + " column _ aliases text , " <nl> - + " compaction _ strategy _ options text , " <nl> - + " default _ read _ consistency text , " <nl> - + " default _ write _ consistency text , " <nl> - + " speculative _ retry text , " <nl> - + " populate _ io _ cache _ on _ flush boolean , " <nl> - + " index _ interval int , " <nl> - + " dropped _ columns map < text , bigint > , " <nl> - + " PRIMARY KEY ( keyspace _ name , columnfamily _ name ) " <nl> - + " ) WITH COMMENT = ' ColumnFamily definitions ' AND gc _ grace _ seconds = 8640 " ) ; <nl> - <nl> - public static final CFMetaData SchemaColumnsCf = compile ( 10 , " CREATE TABLE " + SystemKeyspace . SCHEMA _ COLUMNS _ CF + " ( " <nl> - + " keyspace _ name text , " <nl> - + " columnfamily _ name text , " <nl> - + " column _ name text , " <nl> - + " validator text , " <nl> - + " index _ type text , " <nl> - + " index _ options text , " <nl> - + " index _ name text , " <nl> - + " component _ index int , " <nl> - + " type text , " <nl> - + " PRIMARY KEY ( keyspace _ name , columnfamily _ name , column _ name ) " <nl> - + " ) WITH COMMENT = ' ColumnFamily column attributes ' AND gc _ grace _ seconds = 8640 " ) ; <nl> - <nl> - public static final CFMetaData SchemaTriggerCf = compile ( " CREATE TABLE \ " " + SystemKeyspace . SCHEMA _ TRIGGERS _ CF + " \ " ( " <nl> - + " keyspace _ name text , " <nl> - + " column _ family text , " <nl> - + " trigger _ name text , " <nl> - + " trigger _ options map < text , text > , " <nl> - + " PRIMARY KEY ( keyspace _ name , column _ family , trigger _ name ) " <nl> - + " ) WITH COMMENT = ' triggers metadata table ' " ) ; <nl> + public static final CFMetaData IndexCf = compile ( " CREATE TABLE \ " " + SystemKeyspace . INDEX _ CF + " \ " ( " <nl> + + " table _ name text , " <nl> + + " index _ name text , " <nl> + + " PRIMARY KEY ( table _ name , index _ name ) " <nl> + + " ) WITH COMPACT STORAGE AND COMMENT = ' indexes that have been completed ' " ) ; <nl> + <nl> + public static final CFMetaData CounterIdCf = compile ( " CREATE TABLE \ " " + SystemKeyspace . COUNTER _ ID _ CF + " \ " ( " <nl> + + " key text , " <nl> + + " id timeuuid , " <nl> + + " PRIMARY KEY ( key , id ) " <nl> + + " ) WITH COMPACT STORAGE AND COMMENT = ' counter node IDs ' " ) ; <nl> + <nl> + public static final CFMetaData SchemaKeyspacesCf = compile ( " CREATE TABLE " + SystemKeyspace . SCHEMA _ KEYSPACES _ CF + " ( " <nl> + + " keyspace _ name text PRIMARY KEY , " <nl> + + " durable _ writes boolean , " <nl> + + " strategy _ class text , " <nl> + + " strategy _ options text " <nl> + + " ) WITH COMPACT STORAGE AND COMMENT = ' keyspace definitions ' AND gc _ grace _ seconds = 8640 " ) ; <nl> + <nl> + public static final CFMetaData SchemaColumnFamiliesCf = compile ( " CREATE TABLE " + SystemKeyspace . SCHEMA _ COLUMNFAMILIES _ CF + " ( " <nl> + + " keyspace _ name text , " <nl> + + " columnfamily _ name text , " <nl> + + " type text , " <nl> + + " comparator text , " <nl> + + " subcomparator text , " <nl> + + " comment text , " <nl> + + " read _ repair _ chance double , " <nl> + + " local _ read _ repair _ chance double , " <nl> + + " replicate _ on _ write boolean , " <nl> + + " gc _ grace _ seconds int , " <nl> + + " default _ validator text , " <nl> + + " key _ validator text , " <nl> + + " min _ compaction _ threshold int , " <nl> + + " max _ compaction _ threshold int , " <nl> + + " memtable _ flush _ period _ in _ ms int , " <nl> + + " key _ alias text , " / / that one is kept for compatibility sake <nl> + + " key _ aliases text , " <nl> + + " bloom _ filter _ fp _ chance double , " <nl> + + " caching text , " <nl> + + " default _ time _ to _ live int , " <nl> + + " compaction _ strategy _ class text , " <nl> + + " compression _ parameters text , " <nl> + + " value _ alias text , " <nl> + + " column _ aliases text , " <nl> + + " compaction _ strategy _ options text , " <nl> + + " default _ read _ consistency text , " <nl> + + " default _ write _ consistency text , " <nl> + + " speculative _ retry text , " <nl> + + " populate _ io _ cache _ on _ flush boolean , " <nl> + + " index _ interval int , " <nl> + + " dropped _ columns map < text , bigint > , " <nl> + + " PRIMARY KEY ( keyspace _ name , columnfamily _ name ) " <nl> + + " ) WITH COMMENT = ' ColumnFamily definitions ' AND gc _ grace _ seconds = 8640 " ) ; <nl> + <nl> + public static final CFMetaData SchemaColumnsCf = compile ( " CREATE TABLE " + SystemKeyspace . SCHEMA _ COLUMNS _ CF + " ( " <nl> + + " keyspace _ name text , " <nl> + + " columnfamily _ name text , " <nl> + + " column _ name text , " <nl> + + " validator text , " <nl> + + " index _ type text , " <nl> + + " index _ options text , " <nl> + + " index _ name text , " <nl> + + " component _ index int , " <nl> + + " type text , " <nl> + + " PRIMARY KEY ( keyspace _ name , columnfamily _ name , column _ name ) " <nl> + + " ) WITH COMMENT = ' ColumnFamily column attributes ' AND gc _ grace _ seconds = 8640 " ) ; <nl> + <nl> + public static final CFMetaData SchemaTriggersCf = compile ( " CREATE TABLE " + SystemKeyspace . SCHEMA _ TRIGGERS _ CF + " ( " <nl> + + " keyspace _ name text , " <nl> + + " columnfamily _ name text , " <nl> + + " trigger _ name text , " <nl> + + " trigger _ options map < text , text > , " <nl> + + " PRIMARY KEY ( keyspace _ name , columnfamily _ name , trigger _ name ) " <nl> + + " ) WITH COMMENT = ' triggers metadata table ' " ) ; <nl> <nl> public static final CFMetaData HintsCf = compile ( " CREATE TABLE " + SystemKeyspace . HINTS _ CF + " ( " <nl> + " target _ id uuid , " <nl> @ @ - 353 , 7 + 352 , 7 @ @ public final class CFMetaData <nl> public final String ksName ; / / name of keyspace <nl> public final String cfName ; / / name of this column family <nl> public final ColumnFamilyType cfType ; / / standard , super <nl> - public volatile AbstractType < ? > comparator ; / / bytes , long , timeuuid , utf8 , etc . <nl> + public volatile AbstractType < ? > comparator ; / / bytes , long , timeuuid , utf8 , etc . <nl> <nl> / / OPTIONAL <nl> private volatile String comment = " " ; <nl> @ @ - 372 , 7 + 371 , 7 @ @ public final class CFMetaData <nl> private volatile int defaultTimeToLive = DEFAULT _ DEFAULT _ TIME _ TO _ LIVE ; <nl> private volatile SpeculativeRetry speculativeRetry = DEFAULT _ SPECULATIVE _ RETRY ; <nl> private volatile boolean populateIoCacheOnFlush = DEFAULT _ POPULATE _ IO _ CACHE _ ON _ FLUSH ; <nl> - private volatile Map < ByteBuffer , Long > droppedColumns = new HashMap < ByteBuffer , Long > ( ) ; <nl> + private volatile Map < ByteBuffer , Long > droppedColumns = new HashMap < > ( ) ; <nl> private volatile Map < String , Map < String , String > > triggers = new HashMap < > ( ) ; <nl> private volatile Collection < String > cachedTriggers ; <nl> <nl> @ @ - 452 , 19 + 451 , 19 @ @ public final class CFMetaData <nl> return new HashMap < > ( triggers ) ; <nl> } <nl> <nl> - private static CFMetaData compile ( String cql , String keyspace ) <nl> + private static CFMetaData compile ( String cql ) <nl> { <nl> - return compile ( null , cql , keyspace ) ; <nl> + return compile ( cql , Keyspace . SYSTEM _ KS ) ; <nl> } <nl> <nl> - private static CFMetaData compile ( Integer id , String cql , String keyspace ) <nl> + private static CFMetaData compile ( String cql , String keyspace ) <nl> { <nl> try <nl> { <nl> CreateTableStatement statement = ( CreateTableStatement ) QueryProcessor . parseStatement ( cql ) . prepare ( ) . statement ; <nl> - CFMetaData cfmd = newSystemMetadata ( keyspace , statement . columnFamily ( ) , " " , statement . comparator , null ) ; <nl> - statement . applyPropertiesTo ( cfmd ) ; <nl> - return cfmd . rebuild ( ) ; <nl> + CFMetaData cfm = newSystemMetadata ( keyspace , statement . columnFamily ( ) , " " , statement . comparator , null ) ; <nl> + statement . applyPropertiesTo ( cfm ) ; <nl> + return cfm . rebuild ( ) ; <nl> } <nl> catch ( RequestValidationException e ) <nl> { <nl> @ @ - 472 , 16 + 471 , 6 @ @ public final class CFMetaData <nl> } <nl> } <nl> <nl> - private static CFMetaData compile ( String cql ) <nl> - { <nl> - return compile ( null , cql , Keyspace . SYSTEM _ KS ) ; <nl> - } <nl> - <nl> - private static CFMetaData compile ( int id , String cql ) <nl> - { <nl> - return compile ( id , cql , Keyspace . SYSTEM _ KS ) ; <nl> - } <nl> - <nl> private static AbstractType < ? > makeComparator ( ColumnFamilyType cftype , AbstractType < ? > comp , AbstractType < ? > subcc ) <nl> { <nl> return cftype = = ColumnFamilyType . Super <nl> @ @ - 1441 , 7 + 1430 , 7 @ @ public final class CFMetaData <nl> if ( fromThrift & & cd . type ! = ColumnDefinition . Type . REGULAR ) <nl> continue ; <nl> <nl> - cd . deleteFromSchema ( rm , cfName , getColumnDefinitionComparator ( cd ) , modificationTimestamp ) ; <nl> + cd . deleteFromSchema ( rm , cfName , modificationTimestamp ) ; <nl> } <nl> <nl> / / newly added columns <nl> @ @ - 1482 , 12 + 1471 , 12 @ @ public final class CFMetaData <nl> cf . addAtom ( new RangeTombstone ( builder . build ( ) , builder . buildAsEndOfRange ( ) , timestamp , ldt ) ) ; <nl> <nl> ColumnFamily tcf = rm . addOrGet ( SystemKeyspace . SCHEMA _ TRIGGERS _ CF ) ; <nl> - ColumnNameBuilder tbuilder = SchemaTriggerCf . getCfDef ( ) . getColumnNameBuilder ( ) ; <nl> + ColumnNameBuilder tbuilder = SchemaTriggersCf . getCfDef ( ) . getColumnNameBuilder ( ) ; <nl> tbuilder . add ( ByteBufferUtil . bytes ( cfName ) ) ; <nl> tcf . addAtom ( new RangeTombstone ( tbuilder . build ( ) , tbuilder . buildAsEndOfRange ( ) , timestamp , ldt ) ) ; <nl> <nl> for ( ColumnDefinition cd : column _ metadata . values ( ) ) <nl> - cd . deleteFromSchema ( rm , cfName , getColumnDefinitionComparator ( cd ) , timestamp ) ; <nl> + cd . deleteFromSchema ( rm , cfName , timestamp ) ; <nl> <nl> return rm ; <nl> } <nl> @ @ - 1776 , 8 + 1765 , 7 @ @ public final class CFMetaData <nl> <nl> public boolean removeColumnDefinition ( ColumnDefinition def ) <nl> { <nl> - boolean removed = column _ metadata . remove ( def . name ) ! = null ; <nl> - return removed ; <nl> + return column _ metadata . remove ( def . name ) ! = null ; <nl> } <nl> <nl> public void recordColumnDrop ( ColumnDefinition def ) <nl> diff - - git a / src / java / org / apache / cassandra / config / ColumnDefinition . java b / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> index 00a784f . . 6b979b7 100644 <nl> - - - a / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> + + + b / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> @ @ - 195 , 7 + 195 , 7 @ @ public class ColumnDefinition <nl> * @ param cfName The name of the parent ColumnFamily <nl> * @ param timestamp The timestamp to use for column modification <nl> * / <nl> - public void deleteFromSchema ( RowMutation rm , String cfName , AbstractType < ? > comparator , long timestamp ) <nl> + public void deleteFromSchema ( RowMutation rm , String cfName , long timestamp ) <nl> { <nl> ColumnFamily cf = rm . addOrGet ( SystemKeyspace . SCHEMA _ COLUMNS _ CF ) ; <nl> int ldt = ( int ) ( System . currentTimeMillis ( ) / 1000 ) ; <nl> diff - - git a / src / java / org / apache / cassandra / config / KSMetaData . java b / src / java / org / apache / cassandra / config / KSMetaData . java <nl> index 798a688 . . edeb20e 100644 <nl> - - - a / src / java / org / apache / cassandra / config / KSMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / KSMetaData . java <nl> @ @ - 84 , 7 + 84 , 7 @ @ public final class KSMetaData <nl> CFMetaData . PeerEventsCf , <nl> CFMetaData . HintsCf , <nl> CFMetaData . IndexCf , <nl> - CFMetaData . SchemaTriggerCf , <nl> + CFMetaData . SchemaTriggersCf , <nl> CFMetaData . CounterIdCf , <nl> CFMetaData . SchemaKeyspacesCf , <nl> CFMetaData . SchemaColumnFamiliesCf , <nl> diff - - git a / src / java / org / apache / cassandra / config / TriggerOptions . java b / src / java / org / apache / cassandra / config / TriggerOptions . java <nl> index 95d99bd . . 7411756 100644 <nl> - - - a / src / java / org / apache / cassandra / config / TriggerOptions . java <nl> + + + b / src / java / org / apache / cassandra / config / TriggerOptions . java <nl> @ @ - 43 , 7 + 43 , 7 @ @ public class TriggerOptions <nl> <nl> public static Map < String , Map < String , String > > getAllTriggers ( String ksName , String cfName ) <nl> { <nl> - String req = " SELECT * FROM system . % s WHERE keyspace _ name = ' % s ' AND column _ family = ' % s ' " ; <nl> + String req = " SELECT * FROM system . % s WHERE keyspace _ name = ' % s ' AND columnfamily _ name = ' % s ' " ; <nl> UntypedResultSet result = processInternal ( String . format ( req , SystemKeyspace . SCHEMA _ TRIGGERS _ CF , ksName , cfName ) ) ; <nl> Map < String , Map < String , String > > triggers = new HashMap < > ( ) ; <nl> if ( result . isEmpty ( ) ) <nl> @ @ - 57 , 7 + 57 , 7 @ @ public class TriggerOptions <nl> { <nl> ColumnFamily cf = rm . addOrGet ( SystemKeyspace . SCHEMA _ TRIGGERS _ CF ) ; <nl> assert tentry . getValue ( ) . get ( CLASS _ KEY ) ! = null ; <nl> - ColumnNameBuilder builder = CFMetaData . SchemaTriggerCf . getCfDef ( ) . getColumnNameBuilder ( ) ; <nl> + ColumnNameBuilder builder = CFMetaData . SchemaTriggersCf . getCfDef ( ) . getColumnNameBuilder ( ) ; <nl> builder . add ( ByteBufferUtil . bytes ( cfName ) ) . add ( ByteBufferUtil . bytes ( tentry . getKey ( ) ) ) . add ( ByteBufferUtil . bytes ( OPTIONS _ KEY ) ) ; <nl> for ( Entry < String , String > entry : tentry . getValue ( ) . entrySet ( ) ) <nl> { <nl> @ @ - 71 , 7 + 71 , 7 @ @ public class TriggerOptions <nl> { <nl> ColumnFamily cf = rm . addOrGet ( SystemKeyspace . SCHEMA _ TRIGGERS _ CF ) ; <nl> int ldt = ( int ) ( System . currentTimeMillis ( ) / 1000 ) ; <nl> - ColumnNameBuilder builder = CFMetaData . SchemaTriggerCf . getCfDef ( ) . getColumnNameBuilder ( ) ; <nl> + ColumnNameBuilder builder = CFMetaData . SchemaTriggersCf . getCfDef ( ) . getColumnNameBuilder ( ) ; <nl> builder . add ( ByteBufferUtil . bytes ( cfName ) ) . add ( ByteBufferUtil . bytes ( tentry . getKey ( ) ) ) ; <nl> cf . addAtom ( new RangeTombstone ( builder . build ( ) , builder . buildAsEndOfRange ( ) , modificationTimestamp , ldt ) ) ; <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index fd1f5af . . e48117a 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 1 
 + * ( cqlsh ) Error when tracing query ( CASSANDRA - 7613 ) 
 * Avoid IOOBE when building SyntaxError message snippet ( CASSANDRA - 7569 ) 
 * SSTableExport uses correct validator to create string representation of partition 
 keys ( CASSANDRA - 7498 ) 
 diff - - git a / bin / cqlsh b / bin / cqlsh 
 index 5b63696 . . 1a2df86 100755 
 - - - a / bin / cqlsh 
 + + + b / bin / cqlsh 
 @ @ - 584 , 13 + 584 , 14 @ @ class Shell ( cmd . Cmd ) : 
 self . decoding _ errors . append ( err ) 
 return format _ value ( err , self . output _ codec . name , addcolor = self . color ) 
 
 - def myformat _ colname ( self , name , cfMetaData ) : 
 + def myformat _ colname ( self , name , cfMetaData = None ) : 
 column _ colors = COLUMN _ NAME _ COLORS . copy ( ) 
 # check column role and color appropriately 
 - if name in [ col . name for col in cfMetaData . partition _ key ] : 
 - column _ colors . default _ factory = lambda : RED 
 - elif name in [ col . name for col in cfMetaData . clustering _ key ] : 
 - column _ colors . default _ factory = lambda : CYAN 
 + if cfMetaData : 
 + if name in [ col . name for col in cfMetaData . partition _ key ] : 
 + column _ colors . default _ factory = lambda : RED 
 + elif name in [ col . name for col in cfMetaData . clustering _ key ] : 
 + column _ colors . default _ factory = lambda : CYAN 
 return self . myformat _ value ( name , colormap = column _ colors ) 
 
 def report _ connection ( self ) :

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index 5639292 . . 3611986 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 91 , 81 + 91 , 80 @ @ public final class CFMetaData 
 / / Note that this is the default only for user created tables 
 public final static String DEFAULT _ COMPRESSOR = LZ4Compressor . class . getCanonicalName ( ) ; 
 
 - public static final CFMetaData IndexCf = compile ( 5 , " CREATE TABLE \ " " + SystemKeyspace . INDEX _ CF + " \ " ( " 
 - + " table _ name text , " 
 - + " index _ name text , " 
 - + " PRIMARY KEY ( table _ name , index _ name ) " 
 - + " ) WITH COMPACT STORAGE AND COMMENT = ' indexes that have been completed ' " ) ; 
 - 
 - public static final CFMetaData CounterIdCf = compile ( 6 , " CREATE TABLE \ " " + SystemKeyspace . COUNTER _ ID _ CF + " \ " ( " 
 - + " key text , " 
 - + " id timeuuid , " 
 - + " PRIMARY KEY ( key , id ) " 
 - + " ) WITH COMPACT STORAGE AND COMMENT = ' counter node IDs ' " ) ; 
 - 
 - / / new - style schema 
 - public static final CFMetaData SchemaKeyspacesCf = compile ( 8 , " CREATE TABLE " + SystemKeyspace . SCHEMA _ KEYSPACES _ CF + " ( " 
 - + " keyspace _ name text PRIMARY KEY , " 
 - + " durable _ writes boolean , " 
 - + " strategy _ class text , " 
 - + " strategy _ options text " 
 - + " ) WITH COMPACT STORAGE AND COMMENT = ' keyspace definitions ' AND gc _ grace _ seconds = 8640 " ) ; 
 - 
 - public static final CFMetaData SchemaColumnFamiliesCf = compile ( 9 , " CREATE TABLE " + SystemKeyspace . SCHEMA _ COLUMNFAMILIES _ CF + " ( " 
 - + " keyspace _ name text , " 
 - + " columnfamily _ name text , " 
 - + " type text , " 
 - + " comparator text , " 
 - + " subcomparator text , " 
 - + " comment text , " 
 - + " read _ repair _ chance double , " 
 - + " local _ read _ repair _ chance double , " 
 - + " replicate _ on _ write boolean , " 
 - + " gc _ grace _ seconds int , " 
 - + " default _ validator text , " 
 - + " key _ validator text , " 
 - + " min _ compaction _ threshold int , " 
 - + " max _ compaction _ threshold int , " 
 - + " memtable _ flush _ period _ in _ ms int , " 
 - + " key _ alias text , " / / that one is kept for compatibility sake 
 - + " key _ aliases text , " 
 - + " bloom _ filter _ fp _ chance double , " 
 - + " caching text , " 
 - + " default _ time _ to _ live int , " 
 - + " compaction _ strategy _ class text , " 
 - + " compression _ parameters text , " 
 - + " value _ alias text , " 
 - + " column _ aliases text , " 
 - + " compaction _ strategy _ options text , " 
 - + " default _ read _ consistency text , " 
 - + " default _ write _ consistency text , " 
 - + " speculative _ retry text , " 
 - + " populate _ io _ cache _ on _ flush boolean , " 
 - + " index _ interval int , " 
 - + " dropped _ columns map < text , bigint > , " 
 - + " PRIMARY KEY ( keyspace _ name , columnfamily _ name ) " 
 - + " ) WITH COMMENT = ' ColumnFamily definitions ' AND gc _ grace _ seconds = 8640 " ) ; 
 - 
 - public static final CFMetaData SchemaColumnsCf = compile ( 10 , " CREATE TABLE " + SystemKeyspace . SCHEMA _ COLUMNS _ CF + " ( " 
 - + " keyspace _ name text , " 
 - + " columnfamily _ name text , " 
 - + " column _ name text , " 
 - + " validator text , " 
 - + " index _ type text , " 
 - + " index _ options text , " 
 - + " index _ name text , " 
 - + " component _ index int , " 
 - + " type text , " 
 - + " PRIMARY KEY ( keyspace _ name , columnfamily _ name , column _ name ) " 
 - + " ) WITH COMMENT = ' ColumnFamily column attributes ' AND gc _ grace _ seconds = 8640 " ) ; 
 - 
 - public static final CFMetaData SchemaTriggerCf = compile ( " CREATE TABLE \ " " + SystemKeyspace . SCHEMA _ TRIGGERS _ CF + " \ " ( " 
 - + " keyspace _ name text , " 
 - + " column _ family text , " 
 - + " trigger _ name text , " 
 - + " trigger _ options map < text , text > , " 
 - + " PRIMARY KEY ( keyspace _ name , column _ family , trigger _ name ) " 
 - + " ) WITH COMMENT = ' triggers metadata table ' " ) ; 
 + public static final CFMetaData IndexCf = compile ( " CREATE TABLE \ " " + SystemKeyspace . INDEX _ CF + " \ " ( " 
 + + " table _ name text , " 
 + + " index _ name text , " 
 + + " PRIMARY KEY ( table _ name , index _ name ) " 
 + + " ) WITH COMPACT STORAGE AND COMMENT = ' indexes that have been completed ' " ) ; 
 + 
 + public static final CFMetaData CounterIdCf = compile ( " CREATE TABLE \ " " + SystemKeyspace . COUNTER _ ID _ CF + " \ " ( " 
 + + " key text , " 
 + + " id timeuuid , " 
 + + " PRIMARY KEY ( key , id ) " 
 + + " ) WITH COMPACT STORAGE AND COMMENT = ' counter node IDs ' " ) ; 
 + 
 + public static final CFMetaData SchemaKeyspacesCf = compile ( " CREATE TABLE " + SystemKeyspace . SCHEMA _ KEYSPACES _ CF + " ( " 
 + + " keyspace _ name text PRIMARY KEY , " 
 + + " durable _ writes boolean , " 
 + + " strategy _ class text , " 
 + + " strategy _ options text " 
 + + " ) WITH COMPACT STORAGE AND COMMENT = ' keyspace definitions ' AND gc _ grace _ seconds = 8640 " ) ; 
 + 
 + public static final CFMetaData SchemaColumnFamiliesCf = compile ( " CREATE TABLE " + SystemKeyspace . SCHEMA _ COLUMNFAMILIES _ CF + " ( " 
 + + " keyspace _ name text , " 
 + + " columnfamily _ name text , " 
 + + " type text , " 
 + + " comparator text , " 
 + + " subcomparator text , " 
 + + " comment text , " 
 + + " read _ repair _ chance double , " 
 + + " local _ read _ repair _ chance double , " 
 + + " replicate _ on _ write boolean , " 
 + + " gc _ grace _ seconds int , " 
 + + " default _ validator text , " 
 + + " key _ validator text , " 
 + + " min _ compaction _ threshold int , " 
 + + " max _ compaction _ threshold int , " 
 + + " memtable _ flush _ period _ in _ ms int , " 
 + + " key _ alias text , " / / that one is kept for compatibility sake 
 + + " key _ aliases text , " 
 + + " bloom _ filter _ fp _ chance double , " 
 + + " caching text , " 
 + + " default _ time _ to _ live int , " 
 + + " compaction _ strategy _ class text , " 
 + + " compression _ parameters text , " 
 + + " value _ alias text , " 
 + + " column _ aliases text , " 
 + + " compaction _ strategy _ options text , " 
 + + " default _ read _ consistency text , " 
 + + " default _ write _ consistency text , " 
 + + " speculative _ retry text , " 
 + + " populate _ io _ cache _ on _ flush boolean , " 
 + + " index _ interval int , " 
 + + " dropped _ columns map < text , bigint > , " 
 + + " PRIMARY KEY ( keyspace _ name , columnfamily _ name ) " 
 + + " ) WITH COMMENT = ' ColumnFamily definitions ' AND gc _ grace _ seconds = 8640 " ) ; 
 + 
 + public static final CFMetaData SchemaColumnsCf = compile ( " CREATE TABLE " + SystemKeyspace . SCHEMA _ COLUMNS _ CF + " ( " 
 + + " keyspace _ name text , " 
 + + " columnfamily _ name text , " 
 + + " column _ name text , " 
 + + " validator text , " 
 + + " index _ type text , " 
 + + " index _ options text , " 
 + + " index _ name text , " 
 + + " component _ index int , " 
 + + " type text , " 
 + + " PRIMARY KEY ( keyspace _ name , columnfamily _ name , column _ name ) " 
 + + " ) WITH COMMENT = ' ColumnFamily column attributes ' AND gc _ grace _ seconds = 8640 " ) ; 
 + 
 + public static final CFMetaData SchemaTriggersCf = compile ( " CREATE TABLE " + SystemKeyspace . SCHEMA _ TRIGGERS _ CF + " ( " 
 + + " keyspace _ name text , " 
 + + " columnfamily _ name text , " 
 + + " trigger _ name text , " 
 + + " trigger _ options map < text , text > , " 
 + + " PRIMARY KEY ( keyspace _ name , columnfamily _ name , trigger _ name ) " 
 + + " ) WITH COMMENT = ' triggers metadata table ' " ) ; 
 
 public static final CFMetaData HintsCf = compile ( " CREATE TABLE " + SystemKeyspace . HINTS _ CF + " ( " 
 + " target _ id uuid , " 
 @ @ - 353 , 7 + 352 , 7 @ @ public final class CFMetaData 
 public final String ksName ; / / name of keyspace 
 public final String cfName ; / / name of this column family 
 public final ColumnFamilyType cfType ; / / standard , super 
 - public volatile AbstractType < ? > comparator ; / / bytes , long , timeuuid , utf8 , etc . 
 + public volatile AbstractType < ? > comparator ; / / bytes , long , timeuuid , utf8 , etc . 
 
 / / OPTIONAL 
 private volatile String comment = " " ; 
 @ @ - 372 , 7 + 371 , 7 @ @ public final class CFMetaData 
 private volatile int defaultTimeToLive = DEFAULT _ DEFAULT _ TIME _ TO _ LIVE ; 
 private volatile SpeculativeRetry speculativeRetry = DEFAULT _ SPECULATIVE _ RETRY ; 
 private volatile boolean populateIoCacheOnFlush = DEFAULT _ POPULATE _ IO _ CACHE _ ON _ FLUSH ; 
 - private volatile Map < ByteBuffer , Long > droppedColumns = new HashMap < ByteBuffer , Long > ( ) ; 
 + private volatile Map < ByteBuffer , Long > droppedColumns = new HashMap < > ( ) ; 
 private volatile Map < String , Map < String , String > > triggers = new HashMap < > ( ) ; 
 private volatile Collection < String > cachedTriggers ; 
 
 @ @ - 452 , 19 + 451 , 19 @ @ public final class CFMetaData 
 return new HashMap < > ( triggers ) ; 
 } 
 
 - private static CFMetaData compile ( String cql , String keyspace ) 
 + private static CFMetaData compile ( String cql ) 
 { 
 - return compile ( null , cql , keyspace ) ; 
 + return compile ( cql , Keyspace . SYSTEM _ KS ) ; 
 } 
 
 - private static CFMetaData compile ( Integer id , String cql , String keyspace ) 
 + private static CFMetaData compile ( String cql , String keyspace ) 
 { 
 try 
 { 
 CreateTableStatement statement = ( CreateTableStatement ) QueryProcessor . parseStatement ( cql ) . prepare ( ) . statement ; 
 - CFMetaData cfmd = newSystemMetadata ( keyspace , statement . columnFamily ( ) , " " , statement . comparator , null ) ; 
 - statement . applyPropertiesTo ( cfmd ) ; 
 - return cfmd . rebuild ( ) ; 
 + CFMetaData cfm = newSystemMetadata ( keyspace , statement . columnFamily ( ) , " " , statement . comparator , null ) ; 
 + statement . applyPropertiesTo ( cfm ) ; 
 + return cfm . rebuild ( ) ; 
 } 
 catch ( RequestValidationException e ) 
 { 
 @ @ - 472 , 16 + 471 , 6 @ @ public final class CFMetaData 
 } 
 } 
 
 - private static CFMetaData compile ( String cql ) 
 - { 
 - return compile ( null , cql , Keyspace . SYSTEM _ KS ) ; 
 - } 
 - 
 - private static CFMetaData compile ( int id , String cql ) 
 - { 
 - return compile ( id , cql , Keyspace . SYSTEM _ KS ) ; 
 - } 
 - 
 private static AbstractType < ? > makeComparator ( ColumnFamilyType cftype , AbstractType < ? > comp , AbstractType < ? > subcc ) 
 { 
 return cftype = = ColumnFamilyType . Super 
 @ @ - 1441 , 7 + 1430 , 7 @ @ public final class CFMetaData 
 if ( fromThrift & & cd . type ! = ColumnDefinition . Type . REGULAR ) 
 continue ; 
 
 - cd . deleteFromSchema ( rm , cfName , getColumnDefinitionComparator ( cd ) , modificationTimestamp ) ; 
 + cd . deleteFromSchema ( rm , cfName , modificationTimestamp ) ; 
 } 
 
 / / newly added columns 
 @ @ - 1482 , 12 + 1471 , 12 @ @ public final class CFMetaData 
 cf . addAtom ( new RangeTombstone ( builder . build ( ) , builder . buildAsEndOfRange ( ) , timestamp , ldt ) ) ; 
 
 ColumnFamily tcf = rm . addOrGet ( SystemKeyspace . SCHEMA _ TRIGGERS _ CF ) ; 
 - ColumnNameBuilder tbuilder = SchemaTriggerCf . getCfDef ( ) . getColumnNameBuilder ( ) ; 
 + ColumnNameBuilder tbuilder = SchemaTriggersCf . getCfDef ( ) . getColumnNameBuilder ( ) ; 
 tbuilder . add ( ByteBufferUtil . bytes ( cfName ) ) ; 
 tcf . addAtom ( new RangeTombstone ( tbuilder . build ( ) , tbuilder . buildAsEndOfRange ( ) , timestamp , ldt ) ) ; 
 
 for ( ColumnDefinition cd : column _ metadata . values ( ) ) 
 - cd . deleteFromSchema ( rm , cfName , getColumnDefinitionComparator ( cd ) , timestamp ) ; 
 + cd . deleteFromSchema ( rm , cfName , timestamp ) ; 
 
 return rm ; 
 } 
 @ @ - 1776 , 8 + 1765 , 7 @ @ public final class CFMetaData 
 
 public boolean removeColumnDefinition ( ColumnDefinition def ) 
 { 
 - boolean removed = column _ metadata . remove ( def . name ) ! = null ; 
 - return removed ; 
 + return column _ metadata . remove ( def . name ) ! = null ; 
 } 
 
 public void recordColumnDrop ( ColumnDefinition def ) 
 diff - - git a / src / java / org / apache / cassandra / config / ColumnDefinition . java b / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 index 00a784f . . 6b979b7 100644 
 - - - a / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 + + + b / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 @ @ - 195 , 7 + 195 , 7 @ @ public class ColumnDefinition 
 * @ param cfName The name of the parent ColumnFamily 
 * @ param timestamp The timestamp to use for column modification 
 * / 
 - public void deleteFromSchema ( RowMutation rm , String cfName , AbstractType < ? > comparator , long timestamp ) 
 + public void deleteFromSchema ( RowMutation rm , String cfName , long timestamp ) 
 { 
 ColumnFamily cf = rm . addOrGet ( SystemKeyspace . SCHEMA _ COLUMNS _ CF ) ; 
 int ldt = ( int ) ( System . currentTimeMillis ( ) / 1000 ) ; 
 diff - - git a / src / java / org / apache / cassandra / config / KSMetaData . java b / src / java / org / apache / cassandra / config / KSMetaData . java 
 index 798a688 . . edeb20e 100644 
 - - - a / src / java / org / apache / cassandra / config / KSMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / KSMetaData . java 
 @ @ - 84 , 7 + 84 , 7 @ @ public final class KSMetaData 
 CFMetaData . PeerEventsCf , 
 CFMetaData . HintsCf , 
 CFMetaData . IndexCf , 
 - CFMetaData . SchemaTriggerCf , 
 + CFMetaData . SchemaTriggersCf , 
 CFMetaData . CounterIdCf , 
 CFMetaData . SchemaKeyspacesCf , 
 CFMetaData . SchemaColumnFamiliesCf , 
 diff - - git a / src / java / org / apache / cassandra / config / TriggerOptions . java b / src / java / org / apache / cassandra / config / TriggerOptions . java 
 index 95d99bd . . 7411756 100644 
 - - - a / src / java / org / apache / cassandra / config / TriggerOptions . java 
 + + + b / src / java / org / apache / cassandra / config / TriggerOptions . java 
 @ @ - 43 , 7 + 43 , 7 @ @ public class TriggerOptions 
 
 public static Map < String , Map < String , String > > getAllTriggers ( String ksName , String cfName ) 
 { 
 - String req = " SELECT * FROM system . % s WHERE keyspace _ name = ' % s ' AND column _ family = ' % s ' " ; 
 + String req = " SELECT * FROM system . % s WHERE keyspace _ name = ' % s ' AND columnfamily _ name = ' % s ' " ; 
 UntypedResultSet result = processInternal ( String . format ( req , SystemKeyspace . SCHEMA _ TRIGGERS _ CF , ksName , cfName ) ) ; 
 Map < String , Map < String , String > > triggers = new HashMap < > ( ) ; 
 if ( result . isEmpty ( ) ) 
 @ @ - 57 , 7 + 57 , 7 @ @ public class TriggerOptions 
 { 
 ColumnFamily cf = rm . addOrGet ( SystemKeyspace . SCHEMA _ TRIGGERS _ CF ) ; 
 assert tentry . getValue ( ) . get ( CLASS _ KEY ) ! = null ; 
 - ColumnNameBuilder builder = CFMetaData . SchemaTriggerCf . getCfDef ( ) . getColumnNameBuilder ( ) ; 
 + ColumnNameBuilder builder = CFMetaData . SchemaTriggersCf . getCfDef ( ) . getColumnNameBuilder ( ) ; 
 builder . add ( ByteBufferUtil . bytes ( cfName ) ) . add ( ByteBufferUtil . bytes ( tentry . getKey ( ) ) ) . add ( ByteBufferUtil . bytes ( OPTIONS _ KEY ) ) ; 
 for ( Entry < String , String > entry : tentry . getValue ( ) . entrySet ( ) ) 
 { 
 @ @ - 71 , 7 + 71 , 7 @ @ public class TriggerOptions 
 { 
 ColumnFamily cf = rm . addOrGet ( SystemKeyspace . SCHEMA _ TRIGGERS _ CF ) ; 
 int ldt = ( int ) ( System . currentTimeMillis ( ) / 1000 ) ; 
 - ColumnNameBuilder builder = CFMetaData . SchemaTriggerCf . getCfDef ( ) . getColumnNameBuilder ( ) ; 
 + ColumnNameBuilder builder = CFMetaData . SchemaTriggersCf . getCfDef ( ) . getColumnNameBuilder ( ) ; 
 builder . add ( ByteBufferUtil . bytes ( cfName ) ) . add ( ByteBufferUtil . bytes ( tentry . getKey ( ) ) ) ; 
 cf . addAtom ( new RangeTombstone ( builder . build ( ) , builder . buildAsEndOfRange ( ) , modificationTimestamp , ldt ) ) ; 
 }
