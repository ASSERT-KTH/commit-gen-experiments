BLEU SCORE: 0.07809849842300641

TEST MSG: Support Thrift tables clustering columns on CqlPagingInputFormat
GENERATED MSG: Support thrift tables in Pig CqlStorage

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6adef97 . . 9fbcd9a 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 3 + 1 , 6 @ @ <nl> + 1 . 2 . 18 <nl> + * Support Thrift tables clustering columns on CqlPagingInputFormat ( CASSANDRA - 7445 ) <nl> + <nl> 1 . 2 . 17 <nl> * cqlsh : Fix CompositeType columns in DESCRIBE TABLE output ( CASSANDRA - 7399 ) <nl> * Expose global ColmunFamily metrics ( CASSANDRA - 7273 ) <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java b / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java <nl> index b6e793c . . 0542f7e 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java <nl> @ @ - 261 , 7 + 261 , 7 @ @ public class CqlPagingRecordReader extends RecordReader < Map < String , ByteBuffer > , <nl> { <nl> value . clear ( ) ; <nl> value . putAll ( getCurrentValue ( ) ) ; <nl> - <nl> + <nl> keys . clear ( ) ; <nl> keys . putAll ( getCurrentKey ( ) ) ; <nl> <nl> @ @ - 703 , 7 + 703 , 7 @ @ public class CqlPagingRecordReader extends RecordReader < Map < String , ByteBuffer > , <nl> clusterColumns . add ( new BoundColumn ( key ) ) ; <nl> <nl> parseKeyValidators ( ByteBufferUtil . string ( ByteBuffer . wrap ( cqlRow . columns . get ( 2 ) . getValue ( ) ) ) ) ; <nl> - <nl> + <nl> Column rawComparator = cqlRow . columns . get ( 3 ) ; <nl> String comparator = ByteBufferUtil . string ( ByteBuffer . wrap ( rawComparator . getValue ( ) ) ) ; <nl> logger . debug ( " comparator : { } " , comparator ) ; <nl> @ @ - 719 , 8 + 719 , 8 @ @ public class CqlPagingRecordReader extends RecordReader < Map < String , ByteBuffer > , <nl> } <nl> } <nl> <nl> - / * * <nl> - * retrieve the fake partition keys and cluster keys for classic thrift table <nl> + / * * <nl> + * retrieve the fake partition keys and cluster keys for classic thrift table <nl> * use CFDefinition to get keys and columns <nl> * * / <nl> private void retrieveKeysForThriftTables ( ) throws Exception <nl> @ @ - 732 , 8 + 732 , 10 @ @ public class CqlPagingRecordReader extends RecordReader < Map < String , ByteBuffer > , <nl> { <nl> CFMetaData cfMeta = CFMetaData . fromThrift ( cfDef ) ; <nl> CFDefinition cfDefinition = new CFDefinition ( cfMeta ) ; <nl> - for ( ColumnIdentifier columnIdentifier : cfDefinition . keys . keySet ( ) ) <nl> - partitionBoundColumns . add ( new BoundColumn ( columnIdentifier . toString ( ) ) ) ; <nl> + for ( ColumnIdentifier key : cfDefinition . keys . keySet ( ) ) <nl> + partitionBoundColumns . add ( new BoundColumn ( key . toString ( ) ) ) ; <nl> + for ( ColumnIdentifier column : cfDefinition . columns . keySet ( ) ) <nl> + clusterColumns . add ( new BoundColumn ( column . toString ( ) ) ) ; <nl> parseKeyValidators ( cfDef . key _ validation _ class ) ; <nl> return ; <nl> } <nl> @ @ - 814 , 7 + 816 , 7 @ @ public class CqlPagingRecordReader extends RecordReader < Map < String , ByteBuffer > , <nl> this . name = name ; <nl> } <nl> } <nl> - <nl> + <nl> / * * get string from a ByteBuffer , catch the exception and throw it as runtime exception * / <nl> private static String stringValue ( ByteBuffer value ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / pig / ThriftColumnFamilyTest . java b / test / unit / org / apache / cassandra / pig / ThriftColumnFamilyTest . java <nl> index 223cbf4 . . 6f6aa0b 100644 <nl> - - - a / test / unit / org / apache / cassandra / pig / ThriftColumnFamilyTest . java <nl> + + + b / test / unit / org / apache / cassandra / pig / ThriftColumnFamilyTest . java <nl> @ @ - 47 , 7 + 47 , 7 @ @ import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> <nl> public class ThriftColumnFamilyTest extends PigTestBase <nl> - { <nl> + { <nl> private static String [ ] statements = { <nl> " create keyspace thriftKs with placement _ strategy = ' org . apache . cassandra . locator . SimpleStrategy ' and " + <nl> " strategy _ options = { replication _ factor : 1 } ; " , <nl> @ @ - 125 , 7 + 125 , 7 @ @ public class ThriftColumnFamilyTest extends PigTestBase <nl> " create column family U8 with " + <nl> " key _ validation _ class = UTF8Type and " + <nl> " comparator = UTF8Type ; " , <nl> - <nl> + <nl> " create column family Bytes with " + <nl> " key _ validation _ class = BytesType and " + <nl> " comparator = UTF8Type ; " , <nl> @ @ - 181 , 7 + 181 , 22 @ @ public class ThriftColumnFamilyTest extends PigTestBase <nl> " create column family CompoKeyCopy " + <nl> " with key _ validation _ class = ' CompositeType ( UTF8Type , LongType ) ' " + <nl> " and default _ validation _ class = UTF8Type " + <nl> - " and comparator = LongType ; " <nl> + " and comparator = LongType ; " , <nl> + <nl> + <nl> + " create column family WideCf " + <nl> + " with comparator = UTF8Type " + <nl> + " and default _ validation _ class = UTF8Type " + <nl> + " and key _ validation _ class = UTF8Type " + <nl> + " and comparator = UTF8Type ; " , <nl> + <nl> + " set WideCf [ ' 2014 - 06 - 06 ' ] [ ' 1 ' ] = ' event1 ' ; " , <nl> + " set WideCf [ ' 2014 - 06 - 06 ' ] [ ' 2 ' ] = ' event2 ' ; " , <nl> + <nl> + " set WideCf [ ' 2014 - 06 - 07 ' ] [ ' 3 ' ] = ' event3 ' ; " , <nl> + " set WideCf [ ' 2014 - 06 - 07 ' ] [ ' 4 ' ] = ' event4 ' ; " , <nl> + " set WideCf [ ' 2014 - 06 - 07 ' ] [ ' 5 ' ] = ' event5 ' ; " , <nl> + " set WideCf [ ' 2014 - 06 - 07 ' ] [ ' 6 ' ] = ' event6 ' ; " , <nl> } ; <nl> <nl> @ BeforeClass <nl> @ @ - 326 , 6 + 341 , 36 @ @ public class ThriftColumnFamilyTest extends PigTestBase <nl> } <nl> <nl> @ Test <nl> + public void testCqlStorageWithThriftWideRowCf ( ) throws IOException , ClassNotFoundException , TException , TimedOutException , NotFoundException , InvalidRequestException , NoSuchFieldException , UnavailableException , IllegalAccessException , InstantiationException , AuthenticationException , AuthorizationException <nl> + { <nl> + / / regular thrift wide row column family with page size set to 1 to cause CASSANDRA - 7445 <nl> + pig . registerQuery ( " rows = load ' cql : / / thriftKs / WideCf ? " + defaultParameters + " & page _ size = 1 ' using CqlStorage ( ) ; " ) ; <nl> + <nl> + / * * <nl> + " set WideCf [ ' 2014 - 06 - 06 ' ] [ ' 1 ' ] = ' event1 ' ; " , <nl> + " set WideCf [ ' 2014 - 06 - 06 ' ] [ ' 2 ' ] = ' event2 ' ; " , <nl> + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> + " set WideCf [ ' 2014 - 06 - 07 ' ] [ ' 3 ' ] = ' event3 ' ; " , <nl> + " set WideCf [ ' 2014 - 06 - 07 ' ] [ ' 4 ' ] = ' event4 ' ; " , <nl> + " set WideCf [ ' 2014 - 06 - 07 ' ] [ ' 5 ' ] = ' event5 ' ; " , <nl> + " set WideCf [ ' 2014 - 06 - 07 ' ] [ ' 6 ' ] = ' event6 ' ; " , <nl> + * / <nl> + <nl> + Iterator < Tuple > it = pig . openIterator ( " rows " ) ; <nl> + for ( Integer i = 1 ; i < = 6 ; i + + ) { <nl> + Assert . assertTrue ( it . hasNext ( ) ) ; <nl> + Tuple t = it . next ( ) ; <nl> + if ( i < 3 ) { <nl> + Assert . assertEquals ( t . get ( 0 ) . toString ( ) , " 2014 - 06 - 06 " ) ; <nl> + } else { <nl> + Assert . assertEquals ( t . get ( 0 ) . toString ( ) , " 2014 - 06 - 07 " ) ; <nl> + } <nl> + Assert . assertEquals ( t . get ( 1 ) . toString ( ) , i . toString ( ) ) ; <nl> + Assert . assertEquals ( t . get ( 2 ) . toString ( ) , " event " + i ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> public void testCassandraStorageSchema ( ) throws IOException , ClassNotFoundException , TException , TimedOutException , NotFoundException , InvalidRequestException , NoSuchFieldException , UnavailableException , IllegalAccessException , InstantiationException <nl> { <nl> / / results : ( qux , ( atomic _ weight , 0 . 660161815846869 ) , ( created , 1335890877 ) , ( name , User Qux ) , ( percent , 64 . 7 ) , <nl> @ @ - 707 , 7 + 752 , 7 @ @ public class ThriftColumnFamilyTest extends PigTestBase <nl> Iterator < Tuple > it = pig . openIterator ( " compokeys " ) ; <nl> if ( it . hasNext ( ) ) { <nl> Tuple t = it . next ( ) ; <nl> - Tuple key = ( Tuple ) t . get ( 0 ) ; <nl> + Tuple key = ( Tuple ) t . get ( 0 ) ; <nl> Assert . assertEquals ( key . get ( 0 ) , " clock " ) ; <nl> Assert . assertEquals ( key . get ( 1 ) , 40L ) ; <nl> DataBag columns = ( DataBag ) t . get ( 1 ) ; <nl> @ @ - 735 , 7 + 780 , 7 @ @ public class ThriftColumnFamilyTest extends PigTestBase <nl> count + + ; <nl> if ( count = = 1 ) <nl> { <nl> - Tuple key = ( Tuple ) t . get ( 0 ) ; <nl> + Tuple key = ( Tuple ) t . get ( 0 ) ; <nl> Assert . assertEquals ( key . get ( 0 ) , " clock " ) ; <nl> Assert . assertEquals ( key . get ( 1 ) , 10L ) ; <nl> DataBag columns = ( DataBag ) t . get ( 1 ) ; <nl> @ @ - 749 , 7 + 794 , 7 @ @ public class ThriftColumnFamilyTest extends PigTestBase <nl> } <nl> else if ( count = = 2 ) <nl> { <nl> - Tuple key = ( Tuple ) t . get ( 0 ) ; <nl> + Tuple key = ( Tuple ) t . get ( 0 ) ; <nl> Assert . assertEquals ( key . get ( 0 ) , " clock " ) ; <nl> Assert . assertEquals ( key . get ( 1 ) , 20L ) ; <nl> DataBag columns = ( DataBag ) t . get ( 1 ) ; <nl> @ @ - 763 , 7 + 808 , 7 @ @ public class ThriftColumnFamilyTest extends PigTestBase <nl> } <nl> else if ( count = = 3 ) <nl> { <nl> - Tuple key = ( Tuple ) t . get ( 0 ) ; <nl> + Tuple key = ( Tuple ) t . get ( 0 ) ; <nl> Assert . assertEquals ( key . get ( 0 ) , " clock " ) ; <nl> Assert . assertEquals ( key . get ( 1 ) , 30L ) ; <nl> DataBag columns = ( DataBag ) t . get ( 1 ) ; <nl> @ @ - 777 , 7 + 822 , 7 @ @ public class ThriftColumnFamilyTest extends PigTestBase <nl> } <nl> else if ( count = = 4 ) <nl> { <nl> - Tuple key = ( Tuple ) t . get ( 0 ) ; <nl> + Tuple key = ( Tuple ) t . get ( 0 ) ; <nl> Assert . assertEquals ( key . get ( 0 ) , " clock " ) ; <nl> Assert . assertEquals ( key . get ( 1 ) , 40L ) ; <nl> DataBag columns = ( DataBag ) t . get ( 1 ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java b / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java <nl> index 577fd38 . . 645f723 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java <nl> @ @ - 27 , 22 + 27 , 7 @ @ import org . apache . cassandra . db . Column ; <nl> import org . apache . cassandra . db . marshal . * ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . hadoop . * ; <nl> - import org . apache . cassandra . thrift . Cassandra ; <nl> - import org . apache . cassandra . thrift . CfDef ; <nl> - import org . apache . cassandra . thrift . ColumnDef ; <nl> - import org . apache . cassandra . thrift . ColumnOrSuperColumn ; <nl> - import org . apache . cassandra . thrift . Deletion ; <nl> - import org . apache . cassandra . thrift . IndexClause ; <nl> - import org . apache . cassandra . thrift . IndexExpression ; <nl> - import org . apache . cassandra . thrift . IndexOperator ; <nl> - import org . apache . cassandra . thrift . InvalidRequestException ; <nl> - import org . apache . cassandra . thrift . Mutation ; <nl> - import org . apache . cassandra . thrift . SchemaDisagreementException ; <nl> - import org . apache . cassandra . thrift . SlicePredicate ; <nl> - import org . apache . cassandra . thrift . SliceRange ; <nl> - import org . apache . cassandra . thrift . SuperColumn ; <nl> - import org . apache . cassandra . thrift . TimedOutException ; <nl> - import org . apache . cassandra . thrift . UnavailableException ; <nl> + import org . apache . cassandra . thrift . * ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . Hex ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6adef97 . . 9fbcd9a 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 3 + 1 , 6 @ @ 
 + 1 . 2 . 18 
 + * Support Thrift tables clustering columns on CqlPagingInputFormat ( CASSANDRA - 7445 ) 
 + 
 1 . 2 . 17 
 * cqlsh : Fix CompositeType columns in DESCRIBE TABLE output ( CASSANDRA - 7399 ) 
 * Expose global ColmunFamily metrics ( CASSANDRA - 7273 ) 
 diff - - git a / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java b / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java 
 index b6e793c . . 0542f7e 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java 
 + + + b / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java 
 @ @ - 261 , 7 + 261 , 7 @ @ public class CqlPagingRecordReader extends RecordReader < Map < String , ByteBuffer > , 
 { 
 value . clear ( ) ; 
 value . putAll ( getCurrentValue ( ) ) ; 
 - 
 + 
 keys . clear ( ) ; 
 keys . putAll ( getCurrentKey ( ) ) ; 
 
 @ @ - 703 , 7 + 703 , 7 @ @ public class CqlPagingRecordReader extends RecordReader < Map < String , ByteBuffer > , 
 clusterColumns . add ( new BoundColumn ( key ) ) ; 
 
 parseKeyValidators ( ByteBufferUtil . string ( ByteBuffer . wrap ( cqlRow . columns . get ( 2 ) . getValue ( ) ) ) ) ; 
 - 
 + 
 Column rawComparator = cqlRow . columns . get ( 3 ) ; 
 String comparator = ByteBufferUtil . string ( ByteBuffer . wrap ( rawComparator . getValue ( ) ) ) ; 
 logger . debug ( " comparator : { } " , comparator ) ; 
 @ @ - 719 , 8 + 719 , 8 @ @ public class CqlPagingRecordReader extends RecordReader < Map < String , ByteBuffer > , 
 } 
 } 
 
 - / * * 
 - * retrieve the fake partition keys and cluster keys for classic thrift table 
 + / * * 
 + * retrieve the fake partition keys and cluster keys for classic thrift table 
 * use CFDefinition to get keys and columns 
 * * / 
 private void retrieveKeysForThriftTables ( ) throws Exception 
 @ @ - 732 , 8 + 732 , 10 @ @ public class CqlPagingRecordReader extends RecordReader < Map < String , ByteBuffer > , 
 { 
 CFMetaData cfMeta = CFMetaData . fromThrift ( cfDef ) ; 
 CFDefinition cfDefinition = new CFDefinition ( cfMeta ) ; 
 - for ( ColumnIdentifier columnIdentifier : cfDefinition . keys . keySet ( ) ) 
 - partitionBoundColumns . add ( new BoundColumn ( columnIdentifier . toString ( ) ) ) ; 
 + for ( ColumnIdentifier key : cfDefinition . keys . keySet ( ) ) 
 + partitionBoundColumns . add ( new BoundColumn ( key . toString ( ) ) ) ; 
 + for ( ColumnIdentifier column : cfDefinition . columns . keySet ( ) ) 
 + clusterColumns . add ( new BoundColumn ( column . toString ( ) ) ) ; 
 parseKeyValidators ( cfDef . key _ validation _ class ) ; 
 return ; 
 } 
 @ @ - 814 , 7 + 816 , 7 @ @ public class CqlPagingRecordReader extends RecordReader < Map < String , ByteBuffer > , 
 this . name = name ; 
 } 
 } 
 - 
 + 
 / * * get string from a ByteBuffer , catch the exception and throw it as runtime exception * / 
 private static String stringValue ( ByteBuffer value ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / pig / ThriftColumnFamilyTest . java b / test / unit / org / apache / cassandra / pig / ThriftColumnFamilyTest . java 
 index 223cbf4 . . 6f6aa0b 100644 
 - - - a / test / unit / org / apache / cassandra / pig / ThriftColumnFamilyTest . java 
 + + + b / test / unit / org / apache / cassandra / pig / ThriftColumnFamilyTest . java 
 @ @ - 47 , 7 + 47 , 7 @ @ import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 
 public class ThriftColumnFamilyTest extends PigTestBase 
 - { 
 + { 
 private static String [ ] statements = { 
 " create keyspace thriftKs with placement _ strategy = ' org . apache . cassandra . locator . SimpleStrategy ' and " + 
 " strategy _ options = { replication _ factor : 1 } ; " , 
 @ @ - 125 , 7 + 125 , 7 @ @ public class ThriftColumnFamilyTest extends PigTestBase 
 " create column family U8 with " + 
 " key _ validation _ class = UTF8Type and " + 
 " comparator = UTF8Type ; " , 
 - 
 + 
 " create column family Bytes with " + 
 " key _ validation _ class = BytesType and " + 
 " comparator = UTF8Type ; " , 
 @ @ - 181 , 7 + 181 , 22 @ @ public class ThriftColumnFamilyTest extends PigTestBase 
 " create column family CompoKeyCopy " + 
 " with key _ validation _ class = ' CompositeType ( UTF8Type , LongType ) ' " + 
 " and default _ validation _ class = UTF8Type " + 
 - " and comparator = LongType ; " 
 + " and comparator = LongType ; " , 
 + 
 + 
 + " create column family WideCf " + 
 + " with comparator = UTF8Type " + 
 + " and default _ validation _ class = UTF8Type " + 
 + " and key _ validation _ class = UTF8Type " + 
 + " and comparator = UTF8Type ; " , 
 + 
 + " set WideCf [ ' 2014 - 06 - 06 ' ] [ ' 1 ' ] = ' event1 ' ; " , 
 + " set WideCf [ ' 2014 - 06 - 06 ' ] [ ' 2 ' ] = ' event2 ' ; " , 
 + 
 + " set WideCf [ ' 2014 - 06 - 07 ' ] [ ' 3 ' ] = ' event3 ' ; " , 
 + " set WideCf [ ' 2014 - 06 - 07 ' ] [ ' 4 ' ] = ' event4 ' ; " , 
 + " set WideCf [ ' 2014 - 06 - 07 ' ] [ ' 5 ' ] = ' event5 ' ; " , 
 + " set WideCf [ ' 2014 - 06 - 07 ' ] [ ' 6 ' ] = ' event6 ' ; " , 
 } ; 
 
 @ BeforeClass 
 @ @ - 326 , 6 + 341 , 36 @ @ public class ThriftColumnFamilyTest extends PigTestBase 
 } 
 
 @ Test 
 + public void testCqlStorageWithThriftWideRowCf ( ) throws IOException , ClassNotFoundException , TException , TimedOutException , NotFoundException , InvalidRequestException , NoSuchFieldException , UnavailableException , IllegalAccessException , InstantiationException , AuthenticationException , AuthorizationException 
 + { 
 + / / regular thrift wide row column family with page size set to 1 to cause CASSANDRA - 7445 
 + pig . registerQuery ( " rows = load ' cql : / / thriftKs / WideCf ? " + defaultParameters + " & page _ size = 1 ' using CqlStorage ( ) ; " ) ; 
 + 
 + / * * 
 + " set WideCf [ ' 2014 - 06 - 06 ' ] [ ' 1 ' ] = ' event1 ' ; " , 
 + " set WideCf [ ' 2014 - 06 - 06 ' ] [ ' 2 ' ] = ' event2 ' ; " , 
 + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 + " set WideCf [ ' 2014 - 06 - 07 ' ] [ ' 3 ' ] = ' event3 ' ; " , 
 + " set WideCf [ ' 2014 - 06 - 07 ' ] [ ' 4 ' ] = ' event4 ' ; " , 
 + " set WideCf [ ' 2014 - 06 - 07 ' ] [ ' 5 ' ] = ' event5 ' ; " , 
 + " set WideCf [ ' 2014 - 06 - 07 ' ] [ ' 6 ' ] = ' event6 ' ; " , 
 + * / 
 + 
 + Iterator < Tuple > it = pig . openIterator ( " rows " ) ; 
 + for ( Integer i = 1 ; i < = 6 ; i + + ) { 
 + Assert . assertTrue ( it . hasNext ( ) ) ; 
 + Tuple t = it . next ( ) ; 
 + if ( i < 3 ) { 
 + Assert . assertEquals ( t . get ( 0 ) . toString ( ) , " 2014 - 06 - 06 " ) ; 
 + } else { 
 + Assert . assertEquals ( t . get ( 0 ) . toString ( ) , " 2014 - 06 - 07 " ) ; 
 + } 
 + Assert . assertEquals ( t . get ( 1 ) . toString ( ) , i . toString ( ) ) ; 
 + Assert . assertEquals ( t . get ( 2 ) . toString ( ) , " event " + i ) ; 
 + } 
 + } 
 + 
 + @ Test 
 public void testCassandraStorageSchema ( ) throws IOException , ClassNotFoundException , TException , TimedOutException , NotFoundException , InvalidRequestException , NoSuchFieldException , UnavailableException , IllegalAccessException , InstantiationException 
 { 
 / / results : ( qux , ( atomic _ weight , 0 . 660161815846869 ) , ( created , 1335890877 ) , ( name , User Qux ) , ( percent , 64 . 7 ) , 
 @ @ - 707 , 7 + 752 , 7 @ @ public class ThriftColumnFamilyTest extends PigTestBase 
 Iterator < Tuple > it = pig . openIterator ( " compokeys " ) ; 
 if ( it . hasNext ( ) ) { 
 Tuple t = it . next ( ) ; 
 - Tuple key = ( Tuple ) t . get ( 0 ) ; 
 + Tuple key = ( Tuple ) t . get ( 0 ) ; 
 Assert . assertEquals ( key . get ( 0 ) , " clock " ) ; 
 Assert . assertEquals ( key . get ( 1 ) , 40L ) ; 
 DataBag columns = ( DataBag ) t . get ( 1 ) ; 
 @ @ - 735 , 7 + 780 , 7 @ @ public class ThriftColumnFamilyTest extends PigTestBase 
 count + + ; 
 if ( count = = 1 ) 
 { 
 - Tuple key = ( Tuple ) t . get ( 0 ) ; 
 + Tuple key = ( Tuple ) t . get ( 0 ) ; 
 Assert . assertEquals ( key . get ( 0 ) , " clock " ) ; 
 Assert . assertEquals ( key . get ( 1 ) , 10L ) ; 
 DataBag columns = ( DataBag ) t . get ( 1 ) ; 
 @ @ - 749 , 7 + 794 , 7 @ @ public class ThriftColumnFamilyTest extends PigTestBase 
 } 
 else if ( count = = 2 ) 
 { 
 - Tuple key = ( Tuple ) t . get ( 0 ) ; 
 + Tuple key = ( Tuple ) t . get ( 0 ) ; 
 Assert . assertEquals ( key . get ( 0 ) , " clock " ) ; 
 Assert . assertEquals ( key . get ( 1 ) , 20L ) ; 
 DataBag columns = ( DataBag ) t . get ( 1 ) ; 
 @ @ - 763 , 7 + 808 , 7 @ @ public class ThriftColumnFamilyTest extends PigTestBase 
 } 
 else if ( count = = 3 ) 
 { 
 - Tuple key = ( Tuple ) t . get ( 0 ) ; 
 + Tuple key = ( Tuple ) t . get ( 0 ) ; 
 Assert . assertEquals ( key . get ( 0 ) , " clock " ) ; 
 Assert . assertEquals ( key . get ( 1 ) , 30L ) ; 
 DataBag columns = ( DataBag ) t . get ( 1 ) ; 
 @ @ - 777 , 7 + 822 , 7 @ @ public class ThriftColumnFamilyTest extends PigTestBase 
 } 
 else if ( count = = 4 ) 
 { 
 - Tuple key = ( Tuple ) t . get ( 0 ) ; 
 + Tuple key = ( Tuple ) t . get ( 0 ) ; 
 Assert . assertEquals ( key . get ( 0 ) , " clock " ) ; 
 Assert . assertEquals ( key . get ( 1 ) , 40L ) ; 
 DataBag columns = ( DataBag ) t . get ( 1 ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java b / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java 
 index 577fd38 . . 645f723 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java 
 + + + b / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java 
 @ @ - 27 , 22 + 27 , 7 @ @ import org . apache . cassandra . db . Column ; 
 import org . apache . cassandra . db . marshal . * ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . hadoop . * ; 
 - import org . apache . cassandra . thrift . Cassandra ; 
 - import org . apache . cassandra . thrift . CfDef ; 
 - import org . apache . cassandra . thrift . ColumnDef ; 
 - import org . apache . cassandra . thrift . ColumnOrSuperColumn ; 
 - import org . apache . cassandra . thrift . Deletion ; 
 - import org . apache . cassandra . thrift . IndexClause ; 
 - import org . apache . cassandra . thrift . IndexExpression ; 
 - import org . apache . cassandra . thrift . IndexOperator ; 
 - import org . apache . cassandra . thrift . InvalidRequestException ; 
 - import org . apache . cassandra . thrift . Mutation ; 
 - import org . apache . cassandra . thrift . SchemaDisagreementException ; 
 - import org . apache . cassandra . thrift . SlicePredicate ; 
 - import org . apache . cassandra . thrift . SliceRange ; 
 - import org . apache . cassandra . thrift . SuperColumn ; 
 - import org . apache . cassandra . thrift . TimedOutException ; 
 - import org . apache . cassandra . thrift . UnavailableException ; 
 + import org . apache . cassandra . thrift . * ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . Hex ;
