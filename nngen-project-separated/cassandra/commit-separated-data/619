BLEU SCORE: 0.02383853510228548

TEST MSG: Avoid sstable corrupt exception due to dropped static column
GENERATED MSG: Fix ColumnFamilyStoreTest failure

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 894113a . . a517995 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 10 <nl> + * Avoid sstable corrupt exception due to dropped static column ( CASSANDRA - 12582 ) <nl> * Make stress use client mode to avoid checking commit log size on startup ( CASSANDRA - 12478 ) <nl> * Fix exceptions with new vnode allocation ( CASSANDRA - 12715 ) <nl> * Unify drain and shutdown processes ( CASSANDRA - 12509 ) <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index c0f8d2d . . a702902 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 665 , 11 + 665 , 19 @ @ public final class CFMetaData <nl> return droppedColumns ; <nl> } <nl> <nl> + public ColumnDefinition getDroppedColumnDefinition ( ByteBuffer name ) <nl> + { <nl> + return getDroppedColumnDefinition ( name , false ) ; <nl> + } <nl> + <nl> / * * <nl> * Returns a " fake " ColumnDefinition corresponding to the dropped column { @ code name } <nl> * of { @ code null } if there is no such dropped column . <nl> + * <nl> + * @ param name - the column name <nl> + * @ param isStatic - whether the column was a static column , if known <nl> * / <nl> - public ColumnDefinition getDroppedColumnDefinition ( ByteBuffer name ) <nl> + public ColumnDefinition getDroppedColumnDefinition ( ByteBuffer name , boolean isStatic ) <nl> { <nl> DroppedColumn dropped = droppedColumns . get ( name ) ; <nl> if ( dropped = = null ) <nl> @ @ - 679 , 7 + 687 , 9 @ @ public final class CFMetaData <nl> / / it means that it ' s a dropped column from before 3 . 0 , and in that case using <nl> / / BytesType is fine for what we ' ll be using it for , even if that ' s a hack . <nl> AbstractType < ? > type = dropped . type = = null ? BytesType . instance : dropped . type ; <nl> - return ColumnDefinition . regularDef ( this , name , type ) ; <nl> + return isStatic <nl> + ? ColumnDefinition . staticDef ( this , name , type ) <nl> + : ColumnDefinition . regularDef ( this , name , type ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / db / SerializationHeader . java b / src / java / org / apache / cassandra / db / SerializationHeader . java <nl> index 0fd1281 . . 19dad95 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SerializationHeader . java <nl> + + + b / src / java / org / apache / cassandra / db / SerializationHeader . java <nl> @ @ - 331 , 7 + 331 , 8 @ @ public class SerializationHeader <nl> / / If we don ' t find the definition , it could be we have data for a dropped column , and we shouldn ' t <nl> / / fail deserialization because of that . So we grab a " fake " ColumnDefinition that ensure proper <nl> / / deserialization . The column will be ignore later on anyway . <nl> - column = metadata . getDroppedColumnDefinition ( name ) ; <nl> + boolean isStatic = staticColumns . containsKey ( name ) ; <nl> + column = metadata . getDroppedColumnDefinition ( name , isStatic ) ; <nl> if ( column = = null ) <nl> throw new RuntimeException ( " Unknown column " + UTF8Type . instance . getString ( name ) + " during deserialization " ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / bin / cqlsh b / bin / cqlsh <nl> index 4e93db7 . . f984618 100755 <nl> - - - a / bin / cqlsh <nl> + + + b / bin / cqlsh <nl> @ @ - 1884 , 7 + 1884 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> return names <nl> <nl> def columnize ( self , slist , * a , * * kw ) : <nl> - return cmd . Cmd . columnize ( self , [ u . upper ( ) for u in slist ] , * a , * * kw ) <nl> + return cmd . Cmd . columnize ( self , sorted ( [ u . upper ( ) for u in slist ] ) , * a , * * kw ) <nl> <nl> def do _ help ( self , parsed ) : <nl> " " "

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 894113a . . a517995 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 10 
 + * Avoid sstable corrupt exception due to dropped static column ( CASSANDRA - 12582 ) 
 * Make stress use client mode to avoid checking commit log size on startup ( CASSANDRA - 12478 ) 
 * Fix exceptions with new vnode allocation ( CASSANDRA - 12715 ) 
 * Unify drain and shutdown processes ( CASSANDRA - 12509 ) 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index c0f8d2d . . a702902 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 665 , 11 + 665 , 19 @ @ public final class CFMetaData 
 return droppedColumns ; 
 } 
 
 + public ColumnDefinition getDroppedColumnDefinition ( ByteBuffer name ) 
 + { 
 + return getDroppedColumnDefinition ( name , false ) ; 
 + } 
 + 
 / * * 
 * Returns a " fake " ColumnDefinition corresponding to the dropped column { @ code name } 
 * of { @ code null } if there is no such dropped column . 
 + * 
 + * @ param name - the column name 
 + * @ param isStatic - whether the column was a static column , if known 
 * / 
 - public ColumnDefinition getDroppedColumnDefinition ( ByteBuffer name ) 
 + public ColumnDefinition getDroppedColumnDefinition ( ByteBuffer name , boolean isStatic ) 
 { 
 DroppedColumn dropped = droppedColumns . get ( name ) ; 
 if ( dropped = = null ) 
 @ @ - 679 , 7 + 687 , 9 @ @ public final class CFMetaData 
 / / it means that it ' s a dropped column from before 3 . 0 , and in that case using 
 / / BytesType is fine for what we ' ll be using it for , even if that ' s a hack . 
 AbstractType < ? > type = dropped . type = = null ? BytesType . instance : dropped . type ; 
 - return ColumnDefinition . regularDef ( this , name , type ) ; 
 + return isStatic 
 + ? ColumnDefinition . staticDef ( this , name , type ) 
 + : ColumnDefinition . regularDef ( this , name , type ) ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / db / SerializationHeader . java b / src / java / org / apache / cassandra / db / SerializationHeader . java 
 index 0fd1281 . . 19dad95 100644 
 - - - a / src / java / org / apache / cassandra / db / SerializationHeader . java 
 + + + b / src / java / org / apache / cassandra / db / SerializationHeader . java 
 @ @ - 331 , 7 + 331 , 8 @ @ public class SerializationHeader 
 / / If we don ' t find the definition , it could be we have data for a dropped column , and we shouldn ' t 
 / / fail deserialization because of that . So we grab a " fake " ColumnDefinition that ensure proper 
 / / deserialization . The column will be ignore later on anyway . 
 - column = metadata . getDroppedColumnDefinition ( name ) ; 
 + boolean isStatic = staticColumns . containsKey ( name ) ; 
 + column = metadata . getDroppedColumnDefinition ( name , isStatic ) ; 
 if ( column = = null ) 
 throw new RuntimeException ( " Unknown column " + UTF8Type . instance . getString ( name ) + " during deserialization " ) ; 
 }

NEAREST DIFF:
diff - - git a / bin / cqlsh b / bin / cqlsh 
 index 4e93db7 . . f984618 100755 
 - - - a / bin / cqlsh 
 + + + b / bin / cqlsh 
 @ @ - 1884 , 7 + 1884 , 7 @ @ class Shell ( cmd . Cmd ) : 
 return names 
 
 def columnize ( self , slist , * a , * * kw ) : 
 - return cmd . Cmd . columnize ( self , [ u . upper ( ) for u in slist ] , * a , * * kw ) 
 + return cmd . Cmd . columnize ( self , sorted ( [ u . upper ( ) for u in slist ] ) , * a , * * kw ) 
 
 def do _ help ( self , parsed ) : 
 " " "
