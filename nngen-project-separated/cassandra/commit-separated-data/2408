BLEU SCORE: 0.02383853510228548

TEST MSG: Add per - CF range read request latency metrics
GENERATED MSG: Update sstablesPerReadHistogram to use biased sampling

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 18579a1 . . 0d716a6 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 9 <nl> + * Add per - CF range read request latency metrics ( CASSANDRA - 7338 ) <nl> * Fix NPE in StreamTransferTask . createMessageForRetry ( ) ( CASSANDRA - 7323 ) <nl> * Add conditional CREATE / DROP USER support ( CASSANDRA - 7264 ) <nl> * Swap local and global default read repair chances ( CASSANDRA - 7320 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 709935a . . c641f3a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1703 , 7 + 1703 , 15 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> public List < Row > getRangeSlice ( ExtendedFilter filter ) <nl> { <nl> - return filter ( getSequentialIterator ( filter . dataRange , filter . timestamp ) , filter ) ; <nl> + long start = System . nanoTime ( ) ; <nl> + try <nl> + { <nl> + return filter ( getSequentialIterator ( filter . dataRange , filter . timestamp ) , filter ) ; <nl> + } <nl> + finally <nl> + { <nl> + metric . rangeLatency . addNano ( System . nanoTime ( ) - start ) ; <nl> + } <nl> } <nl> <nl> @ VisibleForTesting <nl> diff - - git a / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java b / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java <nl> index 8880485 . . 50c80fc 100644 <nl> - - - a / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java <nl> + + + b / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java <nl> @ @ - 52 , 6 + 52 , 8 @ @ public class ColumnFamilyMetrics <nl> public final Histogram sstablesPerReadHistogram ; <nl> / * * ( Local ) read metrics * / <nl> public final LatencyMetrics readLatency ; <nl> + / * * ( Local ) range slice metrics * / <nl> + public final LatencyMetrics rangeLatency ; <nl> / * * ( Local ) write metrics * / <nl> public final LatencyMetrics writeLatency ; <nl> / * * Estimated number of tasks pending for this column family * / <nl> @ @ - 177 , 6 + 179 , 7 @ @ public class ColumnFamilyMetrics <nl> } ) ; <nl> readLatency = new LatencyMetrics ( factory , " Read " ) ; <nl> writeLatency = new LatencyMetrics ( factory , " Write " ) ; <nl> + rangeLatency = new LatencyMetrics ( factory , " Range " ) ; <nl> pendingCompactions = Metrics . newGauge ( factory . createMetricName ( " PendingCompactions " ) , new Gauge < Integer > ( ) <nl> { <nl> public Integer value ( ) <nl> @ @ - 343 , 6 + 346 , 7 @ @ public class ColumnFamilyMetrics <nl> { <nl> readLatency . release ( ) ; <nl> writeLatency . release ( ) ; <nl> + rangeLatency . release ( ) ; <nl> Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " AllMemtablesDataSize " ) ) ; <nl> Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " MemtableColumnsCount " ) ) ; <nl> Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " MemtableDataSize " ) ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> index ef58c86 . . 9ee7568 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> @ @ - 287 , 9 + 287 , 11 @ @ public interface ColumnFamilyStoreMBean <nl> public void disableAutoCompaction ( ) ; <nl> <nl> / * * Number of tombstoned cells retreived during the last slicequery * / <nl> + @ Deprecated <nl> public double getTombstonesPerSlice ( ) ; <nl> <nl> / * * Number of live cells retreived during the last slicequery * / <nl> + @ Deprecated <nl> public double getLiveCellsPerSlice ( ) ; <nl> <nl> public long estimateKeys ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> index 4416a37 . . 86f9eef 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> @ @ - 916 , 6 + 916 , 8 @ @ public class NodeCmd <nl> outs . println ( " \ t \ tCompacted row minimum size : " + cfstore . getMinRowSize ( ) ) ; <nl> outs . println ( " \ t \ tCompacted row maximum size : " + cfstore . getMaxRowSize ( ) ) ; <nl> outs . println ( " \ t \ tCompacted row mean size : " + cfstore . getMeanRowSize ( ) ) ; <nl> + outs . println ( " \ t \ tAverage live cells per slice ( last five minutes ) : " + cfstore . getLiveCellsPerSlice ( ) ) ; <nl> + outs . println ( " \ t \ tAverage tombstones per slice ( last five minutes ) : " + cfstore . getTombstonesPerSlice ( ) ) ; <nl> <nl> outs . println ( " " ) ; <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 18579a1 . . 0d716a6 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 9 
 + * Add per - CF range read request latency metrics ( CASSANDRA - 7338 ) 
 * Fix NPE in StreamTransferTask . createMessageForRetry ( ) ( CASSANDRA - 7323 ) 
 * Add conditional CREATE / DROP USER support ( CASSANDRA - 7264 ) 
 * Swap local and global default read repair chances ( CASSANDRA - 7320 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 709935a . . c641f3a 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1703 , 7 + 1703 , 15 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 public List < Row > getRangeSlice ( ExtendedFilter filter ) 
 { 
 - return filter ( getSequentialIterator ( filter . dataRange , filter . timestamp ) , filter ) ; 
 + long start = System . nanoTime ( ) ; 
 + try 
 + { 
 + return filter ( getSequentialIterator ( filter . dataRange , filter . timestamp ) , filter ) ; 
 + } 
 + finally 
 + { 
 + metric . rangeLatency . addNano ( System . nanoTime ( ) - start ) ; 
 + } 
 } 
 
 @ VisibleForTesting 
 diff - - git a / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java b / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java 
 index 8880485 . . 50c80fc 100644 
 - - - a / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java 
 + + + b / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java 
 @ @ - 52 , 6 + 52 , 8 @ @ public class ColumnFamilyMetrics 
 public final Histogram sstablesPerReadHistogram ; 
 / * * ( Local ) read metrics * / 
 public final LatencyMetrics readLatency ; 
 + / * * ( Local ) range slice metrics * / 
 + public final LatencyMetrics rangeLatency ; 
 / * * ( Local ) write metrics * / 
 public final LatencyMetrics writeLatency ; 
 / * * Estimated number of tasks pending for this column family * / 
 @ @ - 177 , 6 + 179 , 7 @ @ public class ColumnFamilyMetrics 
 } ) ; 
 readLatency = new LatencyMetrics ( factory , " Read " ) ; 
 writeLatency = new LatencyMetrics ( factory , " Write " ) ; 
 + rangeLatency = new LatencyMetrics ( factory , " Range " ) ; 
 pendingCompactions = Metrics . newGauge ( factory . createMetricName ( " PendingCompactions " ) , new Gauge < Integer > ( ) 
 { 
 public Integer value ( ) 
 @ @ - 343 , 6 + 346 , 7 @ @ public class ColumnFamilyMetrics 
 { 
 readLatency . release ( ) ; 
 writeLatency . release ( ) ; 
 + rangeLatency . release ( ) ; 
 Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " AllMemtablesDataSize " ) ) ; 
 Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " MemtableColumnsCount " ) ) ; 
 Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " MemtableDataSize " ) ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 index ef58c86 . . 9ee7568 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 @ @ - 287 , 9 + 287 , 11 @ @ public interface ColumnFamilyStoreMBean 
 public void disableAutoCompaction ( ) ; 
 
 / * * Number of tombstoned cells retreived during the last slicequery * / 
 + @ Deprecated 
 public double getTombstonesPerSlice ( ) ; 
 
 / * * Number of live cells retreived during the last slicequery * / 
 + @ Deprecated 
 public double getLiveCellsPerSlice ( ) ; 
 
 public long estimateKeys ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 index 4416a37 . . 86f9eef 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 @ @ - 916 , 6 + 916 , 8 @ @ public class NodeCmd 
 outs . println ( " \ t \ tCompacted row minimum size : " + cfstore . getMinRowSize ( ) ) ; 
 outs . println ( " \ t \ tCompacted row maximum size : " + cfstore . getMaxRowSize ( ) ) ; 
 outs . println ( " \ t \ tCompacted row mean size : " + cfstore . getMeanRowSize ( ) ) ; 
 + outs . println ( " \ t \ tAverage live cells per slice ( last five minutes ) : " + cfstore . getLiveCellsPerSlice ( ) ) ; 
 + outs . println ( " \ t \ tAverage tombstones per slice ( last five minutes ) : " + cfstore . getTombstonesPerSlice ( ) ) ; 
 
 outs . println ( " " ) ; 
 }
