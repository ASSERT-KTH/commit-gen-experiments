BLEU SCORE: 0.04799810699119213

TEST MSG: Support scripting languages for UDFs
GENERATED MSG: Accept Java source code for user - defined functions

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d3f2046 . . 9d522b7 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 <nl> + * Support for scripting languages in user - defined functions ( CASSANDRA - 7526 ) <nl> * Support for aggregation functions ( CASSANDRA - 4914 ) <nl> * Improve query to read paxos table on propose ( CASSANDRA - 7929 ) <nl> * Remove cassandra - cli ( CASSANDRA - 7920 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDF . java b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDF . java <nl> new file mode 100644 <nl> index 0000000 . . 73fc43b <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDF . java <nl> @ @ - 0 , 0 + 1 , 150 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . cql3 . functions ; <nl> + <nl> + import java . math . BigDecimal ; <nl> + import java . math . BigInteger ; <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . HashMap ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + <nl> + import javax . script . Bindings ; <nl> + import javax . script . Compilable ; <nl> + import javax . script . CompiledScript ; <nl> + import javax . script . ScriptEngine ; <nl> + import javax . script . ScriptEngineFactory ; <nl> + import javax . script . ScriptEngineManager ; <nl> + import javax . script . ScriptException ; <nl> + import javax . script . SimpleBindings ; <nl> + <nl> + import org . apache . cassandra . cql3 . ColumnIdentifier ; <nl> + import org . apache . cassandra . db . marshal . AbstractType ; <nl> + import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> + <nl> + public class ScriptBasedUDF extends UDFunction <nl> + { <nl> + static final Map < String , Compilable > scriptEngines = new HashMap < > ( ) ; <nl> + <nl> + static { <nl> + ScriptEngineManager scriptEngineManager = new ScriptEngineManager ( ) ; <nl> + for ( ScriptEngineFactory scriptEngineFactory : scriptEngineManager . getEngineFactories ( ) ) <nl> + { <nl> + ScriptEngine scriptEngine = scriptEngineFactory . getScriptEngine ( ) ; <nl> + boolean compilable = scriptEngine instanceof Compilable ; <nl> + if ( compilable ) <nl> + { <nl> + logger . info ( " Found scripting engine { } { } - { } { } - language names : { } " , <nl> + scriptEngineFactory . getEngineName ( ) , scriptEngineFactory . getEngineVersion ( ) , <nl> + scriptEngineFactory . getLanguageName ( ) , scriptEngineFactory . getLanguageVersion ( ) , <nl> + scriptEngineFactory . getNames ( ) ) ; <nl> + for ( String name : scriptEngineFactory . getNames ( ) ) <nl> + scriptEngines . put ( name , ( Compilable ) scriptEngine ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + private final CompiledScript script ; <nl> + <nl> + ScriptBasedUDF ( FunctionName name , <nl> + List < ColumnIdentifier > argNames , <nl> + List < AbstractType < ? > > argTypes , <nl> + AbstractType < ? > returnType , <nl> + String language , <nl> + String body , <nl> + boolean deterministic ) <nl> + throws InvalidRequestException <nl> + { <nl> + super ( name , argNames , argTypes , returnType , language , body , deterministic ) ; <nl> + <nl> + Compilable scriptEngine = scriptEngines . get ( language ) ; <nl> + if ( scriptEngine = = null ) <nl> + throw new InvalidRequestException ( String . format ( " Invalid language ' % s ' for function ' % s ' " , language , name ) ) ; <nl> + <nl> + try <nl> + { <nl> + this . script = scriptEngine . compile ( body ) ; <nl> + } <nl> + catch ( RuntimeException | ScriptException e ) <nl> + { <nl> + logger . info ( " Failed to compile function ' { } ' for language { } : " , name , language , e ) ; <nl> + throw new InvalidRequestException ( <nl> + String . format ( " Failed to compile function ' % s ' for language % s : % s " , name , language , e ) ) ; <nl> + } <nl> + } <nl> + <nl> + public ByteBuffer execute ( List < ByteBuffer > parameters ) throws InvalidRequestException <nl> + { <nl> + Object [ ] params = new Object [ argTypes . size ( ) ] ; <nl> + for ( int i = 0 ; i < params . length ; i + + ) <nl> + { <nl> + ByteBuffer bb = parameters . get ( i ) ; <nl> + if ( bb ! = null ) <nl> + params [ i ] = argTypes . get ( i ) . compose ( bb ) ; <nl> + } <nl> + <nl> + try <nl> + { <nl> + Bindings bindings = new SimpleBindings ( ) ; <nl> + for ( int i = 0 ; i < params . length ; i + + ) <nl> + bindings . put ( argNames . get ( i ) . toString ( ) , params [ i ] ) ; <nl> + <nl> + Object result = script . eval ( bindings ) ; <nl> + if ( result = = null ) <nl> + return null ; <nl> + <nl> + Class < ? > javaReturnType = returnType . getSerializer ( ) . getType ( ) ; <nl> + Class < ? > resultType = result . getClass ( ) ; <nl> + if ( ! javaReturnType . isAssignableFrom ( resultType ) ) <nl> + { <nl> + if ( result instanceof Number ) <nl> + { <nl> + Number rNumber = ( Number ) result ; <nl> + if ( javaReturnType = = Integer . class ) <nl> + result = rNumber . intValue ( ) ; <nl> + else if ( javaReturnType = = Long . class ) <nl> + result = rNumber . longValue ( ) ; <nl> + else if ( javaReturnType = = Float . class ) <nl> + result = rNumber . floatValue ( ) ; <nl> + else if ( javaReturnType = = Double . class ) <nl> + result = rNumber . doubleValue ( ) ; <nl> + else if ( javaReturnType = = BigInteger . class ) <nl> + { <nl> + if ( rNumber instanceof BigDecimal ) <nl> + result = ( ( BigDecimal ) rNumber ) . toBigInteger ( ) ; <nl> + else if ( rNumber instanceof Double | | rNumber instanceof Float ) <nl> + result = new BigDecimal ( rNumber . toString ( ) ) . toBigInteger ( ) ; <nl> + else <nl> + result = BigInteger . valueOf ( rNumber . longValue ( ) ) ; <nl> + } <nl> + else if ( javaReturnType = = BigDecimal . class ) <nl> + / / String c ' tor of BigDecimal is more accurate than valueOf ( double ) <nl> + result = new BigDecimal ( rNumber . toString ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ SuppressWarnings ( " unchecked " ) ByteBuffer r = ( ( AbstractType ) returnType ) . decompose ( result ) ; <nl> + return r ; <nl> + } <nl> + catch ( RuntimeException | ScriptException e ) <nl> + { <nl> + logger . info ( " Execution of UDF ' { } ' failed " , name , e ) ; <nl> + throw new InvalidRequestException ( " Execution of user - defined function ' " + name + " ' failed : " + e ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> index 264998c . . 8c51b9e 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> @ @ - 59 , 6 + 59 , 7 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> boolean deterministic ) <nl> { <nl> super ( name , argTypes , returnType ) ; <nl> + assert new HashSet < > ( argNames ) . size ( ) = = argNames . size ( ) : " duplicate argument names " ; <nl> this . argNames = argNames ; <nl> this . language = language ; <nl> this . body = body ; <nl> @ @ - 83 , 7 + 84 , 7 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> { <nl> case " class " : return new ReflectionBasedUDF ( name , argNames , argTypes , returnType , language , body , deterministic ) ; <nl> case " java " : return JavaSourceUDFFactory . buildUDF ( name , argNames , argTypes , returnType , body , deterministic ) ; <nl> - default : throw new InvalidRequestException ( String . format ( " Invalid language % s for ' % s ' " , language , name ) ) ; <nl> + default : return new ScriptBasedUDF ( name , argNames , argTypes , returnType , language , body , deterministic ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java <nl> index a54409e . . 712a474 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ <nl> package org . apache . cassandra . cql3 . statements ; <nl> <nl> import java . util . ArrayList ; <nl> + import java . util . HashSet ; <nl> import java . util . List ; <nl> <nl> import org . apache . cassandra . auth . Permission ; <nl> @ @ - 89 , 6 + 90 , 10 @ @ public final class CreateFunctionStatement extends SchemaAlteringStatement <nl> <nl> public boolean announceMigration ( boolean isLocalOnly ) throws RequestValidationException <nl> { <nl> + if ( new HashSet < > ( argNames ) . size ( ) ! = argNames . size ( ) ) <nl> + throw new InvalidRequestException ( String . format ( " duplicate argument names for given function % s with argument names % s " , <nl> + functionName , argNames ) ) ; <nl> + <nl> List < AbstractType < ? > > argTypes = new ArrayList < > ( argRawTypes . size ( ) ) ; <nl> for ( CQL3Type . Raw rawType : argRawTypes ) <nl> / / We have no proper keyspace to give , which means that this will break ( NPE currently ) <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> index 31708aa . . a456ea8 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> @ @ - 18 , 6 + 18 , 8 @ @ <nl> package org . apache . cassandra . cql3 ; <nl> <nl> import java . io . File ; <nl> + import java . math . BigDecimal ; <nl> + import java . math . BigInteger ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> import java . util . concurrent . CountDownLatch ; <nl> @ @ - 613 , 6 + 615 , 12 @ @ public abstract class CQLTester <nl> if ( value instanceof Double ) <nl> return DoubleType . instance ; <nl> <nl> + if ( value instanceof BigInteger ) <nl> + return IntegerType . instance ; <nl> + <nl> + if ( value instanceof BigDecimal ) <nl> + return DecimalType . instance ; <nl> + <nl> if ( value instanceof String ) <nl> return UTF8Type . instance ; <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / UFTest . java b / test / unit / org / apache / cassandra / cql3 / UFTest . java <nl> index 5dd77bf . . 46db578 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / UFTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / UFTest . java <nl> @ @ - 17 , 6 + 17 , 9 @ @ <nl> * / <nl> package org . apache . cassandra . cql3 ; <nl> <nl> + import java . math . BigDecimal ; <nl> + import java . math . BigInteger ; <nl> + <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 447 , 4 + 450 , 214 @ @ public class UFTest extends CQLTester <nl> assertRows ( execute ( " SELECT language , body FROM system . schema _ functions WHERE namespace = ' foo ' AND name = ' pgfun1 ' " ) , <nl> row ( " java " , functionBody ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testJavascriptFunction ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( key int primary key , val double ) " ) ; <nl> + <nl> + String functionBody = " \ n " + <nl> + " Math . sin ( val ) ; \ n " ; <nl> + <nl> + String cql = " CREATE OR REPLACE FUNCTION jsft ( val double ) RETURNS double LANGUAGE javascript \ n " + <nl> + " AS ' " + functionBody + " ' ; " ; <nl> + <nl> + execute ( cql ) ; <nl> + <nl> + assertRows ( execute ( " SELECT language , body FROM system . schema _ functions WHERE namespace = ' ' AND name = ' jsft ' " ) , <nl> + row ( " javascript " , functionBody ) ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( key , val ) VALUES ( ? , ? ) " , 1 , 1d ) ; <nl> + execute ( " INSERT INTO % s ( key , val ) VALUES ( ? , ? ) " , 2 , 2d ) ; <nl> + execute ( " INSERT INTO % s ( key , val ) VALUES ( ? , ? ) " , 3 , 3d ) ; <nl> + assertRows ( execute ( " SELECT key , val , jsft ( val ) FROM % s " ) , <nl> + row ( 1 , 1d , Math . sin ( 1d ) ) , <nl> + row ( 2 , 2d , Math . sin ( 2d ) ) , <nl> + row ( 3 , 3d , Math . sin ( 3d ) ) <nl> + ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testJavascriptBadReturnType ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( key int primary key , val double ) " ) ; <nl> + <nl> + execute ( " CREATE OR REPLACE FUNCTION jsft ( val double ) RETURNS double LANGUAGE javascript \ n " + <nl> + " AS ' \ " string \ " ; ' ; " ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( key , val ) VALUES ( ? , ? ) " , 1 , 1d ) ; <nl> + / / throws IRE with ClassCastException <nl> + assertInvalid ( " SELECT key , val , jsft ( val ) FROM % s " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testJavascriptThrow ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( key int primary key , val double ) " ) ; <nl> + <nl> + execute ( " CREATE OR REPLACE FUNCTION jsft ( val double ) RETURNS double LANGUAGE javascript \ n " + <nl> + " AS ' throw \ " fool \ " ; ' ; " ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( key , val ) VALUES ( ? , ? ) " , 1 , 1d ) ; <nl> + / / throws IRE with ScriptException <nl> + assertInvalid ( " SELECT key , val , jsft ( val ) FROM % s " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testDuplicateArgNames ( ) throws Throwable <nl> + { <nl> + assertInvalid ( " CREATE OR REPLACE FUNCTION scrinv ( val double , val text ) RETURNS text LANGUAGE javascript \ n " + <nl> + " AS ' \ " foo bar \ " ; ' ; " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testJavascriptCompileFailure ( ) throws Throwable <nl> + { <nl> + assertInvalid ( " CREATE OR REPLACE FUNCTION scrinv ( val double ) RETURNS double LANGUAGE javascript \ n " + <nl> + " AS ' foo bar ' ; " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testScriptInvalidLanguage ( ) throws Throwable <nl> + { <nl> + assertInvalid ( " CREATE OR REPLACE FUNCTION scrinv ( val double ) RETURNS double LANGUAGE artificial _ intelligence \ n " + <nl> + " AS ' question for 42 ? ' ; " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testScriptReturnTypeCasting ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( key int primary key , val double ) " ) ; <nl> + execute ( " INSERT INTO % s ( key , val ) VALUES ( ? , ? ) " , 1 , 1d ) ; <nl> + <nl> + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS boolean LANGUAGE javascript \ n " + <nl> + " AS ' true ; ' ; " ) ; <nl> + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , <nl> + row ( 1 , 1d , true ) ) ; <nl> + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS boolean LANGUAGE javascript \ n " + <nl> + " AS ' false ; ' ; " ) ; <nl> + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , <nl> + row ( 1 , 1d , false ) ) ; <nl> + execute ( " DROP FUNCTION js ( double ) " ) ; <nl> + <nl> + / / declared rtype = int , return type = int <nl> + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS int LANGUAGE javascript \ n " + <nl> + " AS ' 100 ; ' ; " ) ; <nl> + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , <nl> + row ( 1 , 1d , 100 ) ) ; <nl> + execute ( " DROP FUNCTION js ( double ) " ) ; <nl> + <nl> + / / declared rtype = int , return type = double <nl> + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS int LANGUAGE javascript \ n " + <nl> + " AS ' 100 . ; ' ; " ) ; <nl> + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , <nl> + row ( 1 , 1d , 100 ) ) ; <nl> + execute ( " DROP FUNCTION js ( double ) " ) ; <nl> + <nl> + / / declared rtype = double , return type = int <nl> + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS double LANGUAGE javascript \ n " + <nl> + " AS ' 100 ; ' ; " ) ; <nl> + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , <nl> + row ( 1 , 1d , 100d ) ) ; <nl> + execute ( " DROP FUNCTION js ( double ) " ) ; <nl> + <nl> + / / declared rtype = double , return type = double <nl> + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS double LANGUAGE javascript \ n " + <nl> + " AS ' 100 . ; ' ; " ) ; <nl> + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , <nl> + row ( 1 , 1d , 100d ) ) ; <nl> + execute ( " DROP FUNCTION js ( double ) " ) ; <nl> + <nl> + / / declared rtype = bigint , return type = int <nl> + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS bigint LANGUAGE javascript \ n " + <nl> + " AS ' 100 ; ' ; " ) ; <nl> + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , <nl> + row ( 1 , 1d , 100L ) ) ; <nl> + execute ( " DROP FUNCTION js ( double ) " ) ; <nl> + <nl> + / / declared rtype = bigint , return type = double <nl> + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS bigint LANGUAGE javascript \ n " + <nl> + " AS ' 100 . ; ' ; " ) ; <nl> + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , <nl> + row ( 1 , 1d , 100L ) ) ; <nl> + execute ( " DROP FUNCTION js ( double ) " ) ; <nl> + <nl> + / / declared rtype = varint , return type = int <nl> + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS varint LANGUAGE javascript \ n " + <nl> + " AS ' 100 ; ' ; " ) ; <nl> + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , <nl> + row ( 1 , 1d , BigInteger . valueOf ( 100L ) ) ) ; <nl> + execute ( " DROP FUNCTION js ( double ) " ) ; <nl> + <nl> + / / declared rtype = varint , return type = double <nl> + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS varint LANGUAGE javascript \ n " + <nl> + " AS ' 100 . ; ' ; " ) ; <nl> + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , <nl> + row ( 1 , 1d , BigInteger . valueOf ( 100L ) ) ) ; <nl> + execute ( " DROP FUNCTION js ( double ) " ) ; <nl> + <nl> + / / declared rtype = decimal , return type = int <nl> + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS decimal LANGUAGE javascript \ n " + <nl> + " AS ' 100 ; ' ; " ) ; <nl> + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , <nl> + row ( 1 , 1d , BigDecimal . valueOf ( 100d ) ) ) ; <nl> + execute ( " DROP FUNCTION js ( double ) " ) ; <nl> + <nl> + / / declared rtype = decimal , return type = double <nl> + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS decimal LANGUAGE javascript \ n " + <nl> + " AS ' 100 . ; ' ; " ) ; <nl> + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , <nl> + row ( 1 , 1d , BigDecimal . valueOf ( 100d ) ) ) ; <nl> + execute ( " DROP FUNCTION js ( double ) " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testScriptParamReturnTypes ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( key int primary key , ival int , lval bigint , fval float , dval double , vval varint , ddval decimal ) " ) ; <nl> + execute ( " INSERT INTO % s ( key , ival , lval , fval , dval , vval , ddval ) VALUES ( ? , ? , ? , ? , ? , ? , ? ) " , 1 , <nl> + 1 , 1L , 1f , 1d , BigInteger . valueOf ( 1L ) , BigDecimal . valueOf ( 1d ) ) ; <nl> + <nl> + / / type = int <nl> + execute ( " CREATE OR REPLACE FUNCTION jsint ( val int ) RETURNS int LANGUAGE javascript \ n " + <nl> + " AS ' val + 1 ; ' ; " ) ; <nl> + assertRows ( execute ( " SELECT key , ival , jsint ( ival ) FROM % s " ) , <nl> + row ( 1 , 1 , 2 ) ) ; <nl> + execute ( " DROP FUNCTION jsint ( int ) " ) ; <nl> + <nl> + / / bigint <nl> + execute ( " CREATE OR REPLACE FUNCTION jsbigint ( val bigint ) RETURNS bigint LANGUAGE javascript \ n " + <nl> + " AS ' val + 1 ; ' ; " ) ; <nl> + assertRows ( execute ( " SELECT key , lval , jsbigint ( lval ) FROM % s " ) , <nl> + row ( 1 , 1L , 2L ) ) ; <nl> + execute ( " DROP FUNCTION jsbigint ( bigint ) " ) ; <nl> + <nl> + / / float <nl> + execute ( " CREATE OR REPLACE FUNCTION jsfloat ( val float ) RETURNS float LANGUAGE javascript \ n " + <nl> + " AS ' val + 1 ; ' ; " ) ; <nl> + assertRows ( execute ( " SELECT key , fval , jsfloat ( fval ) FROM % s " ) , <nl> + row ( 1 , 1f , 2f ) ) ; <nl> + execute ( " DROP FUNCTION jsfloat ( float ) " ) ; <nl> + <nl> + / / double <nl> + execute ( " CREATE OR REPLACE FUNCTION jsdouble ( val double ) RETURNS double LANGUAGE javascript \ n " + <nl> + " AS ' val + 1 ; ' ; " ) ; <nl> + assertRows ( execute ( " SELECT key , dval , jsdouble ( dval ) FROM % s " ) , <nl> + row ( 1 , 1d , 2d ) ) ; <nl> + execute ( " DROP FUNCTION jsdouble ( double ) " ) ; <nl> + <nl> + / / varint <nl> + execute ( " CREATE OR REPLACE FUNCTION jsvarint ( val varint ) RETURNS varint LANGUAGE javascript \ n " + <nl> + " AS ' val + 1 ; ' ; " ) ; <nl> + assertRows ( execute ( " SELECT key , vval , jsvarint ( vval ) FROM % s " ) , <nl> + row ( 1 , BigInteger . valueOf ( 1L ) , BigInteger . valueOf ( 2L ) ) ) ; <nl> + execute ( " DROP FUNCTION jsvarint ( varint ) " ) ; <nl> + <nl> + / / decimal <nl> + execute ( " CREATE OR REPLACE FUNCTION jsdecimal ( val decimal ) RETURNS decimal LANGUAGE javascript \ n " + <nl> + " AS ' val + 1 ; ' ; " ) ; <nl> + assertRows ( execute ( " SELECT key , ddval , jsdecimal ( ddval ) FROM % s " ) , <nl> + row ( 1 , BigDecimal . valueOf ( 1d ) , BigDecimal . valueOf ( 2d ) ) ) ; <nl> + execute ( " DROP FUNCTION jsdecimal ( decimal ) " ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d3f2046 . . 9d522b7 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 
 + * Support for scripting languages in user - defined functions ( CASSANDRA - 7526 ) 
 * Support for aggregation functions ( CASSANDRA - 4914 ) 
 * Improve query to read paxos table on propose ( CASSANDRA - 7929 ) 
 * Remove cassandra - cli ( CASSANDRA - 7920 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDF . java b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDF . java 
 new file mode 100644 
 index 0000000 . . 73fc43b 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDF . java 
 @ @ - 0 , 0 + 1 , 150 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . cql3 . functions ; 
 + 
 + import java . math . BigDecimal ; 
 + import java . math . BigInteger ; 
 + import java . nio . ByteBuffer ; 
 + import java . util . HashMap ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + 
 + import javax . script . Bindings ; 
 + import javax . script . Compilable ; 
 + import javax . script . CompiledScript ; 
 + import javax . script . ScriptEngine ; 
 + import javax . script . ScriptEngineFactory ; 
 + import javax . script . ScriptEngineManager ; 
 + import javax . script . ScriptException ; 
 + import javax . script . SimpleBindings ; 
 + 
 + import org . apache . cassandra . cql3 . ColumnIdentifier ; 
 + import org . apache . cassandra . db . marshal . AbstractType ; 
 + import org . apache . cassandra . exceptions . InvalidRequestException ; 
 + 
 + public class ScriptBasedUDF extends UDFunction 
 + { 
 + static final Map < String , Compilable > scriptEngines = new HashMap < > ( ) ; 
 + 
 + static { 
 + ScriptEngineManager scriptEngineManager = new ScriptEngineManager ( ) ; 
 + for ( ScriptEngineFactory scriptEngineFactory : scriptEngineManager . getEngineFactories ( ) ) 
 + { 
 + ScriptEngine scriptEngine = scriptEngineFactory . getScriptEngine ( ) ; 
 + boolean compilable = scriptEngine instanceof Compilable ; 
 + if ( compilable ) 
 + { 
 + logger . info ( " Found scripting engine { } { } - { } { } - language names : { } " , 
 + scriptEngineFactory . getEngineName ( ) , scriptEngineFactory . getEngineVersion ( ) , 
 + scriptEngineFactory . getLanguageName ( ) , scriptEngineFactory . getLanguageVersion ( ) , 
 + scriptEngineFactory . getNames ( ) ) ; 
 + for ( String name : scriptEngineFactory . getNames ( ) ) 
 + scriptEngines . put ( name , ( Compilable ) scriptEngine ) ; 
 + } 
 + } 
 + } 
 + 
 + private final CompiledScript script ; 
 + 
 + ScriptBasedUDF ( FunctionName name , 
 + List < ColumnIdentifier > argNames , 
 + List < AbstractType < ? > > argTypes , 
 + AbstractType < ? > returnType , 
 + String language , 
 + String body , 
 + boolean deterministic ) 
 + throws InvalidRequestException 
 + { 
 + super ( name , argNames , argTypes , returnType , language , body , deterministic ) ; 
 + 
 + Compilable scriptEngine = scriptEngines . get ( language ) ; 
 + if ( scriptEngine = = null ) 
 + throw new InvalidRequestException ( String . format ( " Invalid language ' % s ' for function ' % s ' " , language , name ) ) ; 
 + 
 + try 
 + { 
 + this . script = scriptEngine . compile ( body ) ; 
 + } 
 + catch ( RuntimeException | ScriptException e ) 
 + { 
 + logger . info ( " Failed to compile function ' { } ' for language { } : " , name , language , e ) ; 
 + throw new InvalidRequestException ( 
 + String . format ( " Failed to compile function ' % s ' for language % s : % s " , name , language , e ) ) ; 
 + } 
 + } 
 + 
 + public ByteBuffer execute ( List < ByteBuffer > parameters ) throws InvalidRequestException 
 + { 
 + Object [ ] params = new Object [ argTypes . size ( ) ] ; 
 + for ( int i = 0 ; i < params . length ; i + + ) 
 + { 
 + ByteBuffer bb = parameters . get ( i ) ; 
 + if ( bb ! = null ) 
 + params [ i ] = argTypes . get ( i ) . compose ( bb ) ; 
 + } 
 + 
 + try 
 + { 
 + Bindings bindings = new SimpleBindings ( ) ; 
 + for ( int i = 0 ; i < params . length ; i + + ) 
 + bindings . put ( argNames . get ( i ) . toString ( ) , params [ i ] ) ; 
 + 
 + Object result = script . eval ( bindings ) ; 
 + if ( result = = null ) 
 + return null ; 
 + 
 + Class < ? > javaReturnType = returnType . getSerializer ( ) . getType ( ) ; 
 + Class < ? > resultType = result . getClass ( ) ; 
 + if ( ! javaReturnType . isAssignableFrom ( resultType ) ) 
 + { 
 + if ( result instanceof Number ) 
 + { 
 + Number rNumber = ( Number ) result ; 
 + if ( javaReturnType = = Integer . class ) 
 + result = rNumber . intValue ( ) ; 
 + else if ( javaReturnType = = Long . class ) 
 + result = rNumber . longValue ( ) ; 
 + else if ( javaReturnType = = Float . class ) 
 + result = rNumber . floatValue ( ) ; 
 + else if ( javaReturnType = = Double . class ) 
 + result = rNumber . doubleValue ( ) ; 
 + else if ( javaReturnType = = BigInteger . class ) 
 + { 
 + if ( rNumber instanceof BigDecimal ) 
 + result = ( ( BigDecimal ) rNumber ) . toBigInteger ( ) ; 
 + else if ( rNumber instanceof Double | | rNumber instanceof Float ) 
 + result = new BigDecimal ( rNumber . toString ( ) ) . toBigInteger ( ) ; 
 + else 
 + result = BigInteger . valueOf ( rNumber . longValue ( ) ) ; 
 + } 
 + else if ( javaReturnType = = BigDecimal . class ) 
 + / / String c ' tor of BigDecimal is more accurate than valueOf ( double ) 
 + result = new BigDecimal ( rNumber . toString ( ) ) ; 
 + } 
 + } 
 + 
 + @ SuppressWarnings ( " unchecked " ) ByteBuffer r = ( ( AbstractType ) returnType ) . decompose ( result ) ; 
 + return r ; 
 + } 
 + catch ( RuntimeException | ScriptException e ) 
 + { 
 + logger . info ( " Execution of UDF ' { } ' failed " , name , e ) ; 
 + throw new InvalidRequestException ( " Execution of user - defined function ' " + name + " ' failed : " + e ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 index 264998c . . 8c51b9e 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 @ @ - 59 , 6 + 59 , 7 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 boolean deterministic ) 
 { 
 super ( name , argTypes , returnType ) ; 
 + assert new HashSet < > ( argNames ) . size ( ) = = argNames . size ( ) : " duplicate argument names " ; 
 this . argNames = argNames ; 
 this . language = language ; 
 this . body = body ; 
 @ @ - 83 , 7 + 84 , 7 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 { 
 case " class " : return new ReflectionBasedUDF ( name , argNames , argTypes , returnType , language , body , deterministic ) ; 
 case " java " : return JavaSourceUDFFactory . buildUDF ( name , argNames , argTypes , returnType , body , deterministic ) ; 
 - default : throw new InvalidRequestException ( String . format ( " Invalid language % s for ' % s ' " , language , name ) ) ; 
 + default : return new ScriptBasedUDF ( name , argNames , argTypes , returnType , language , body , deterministic ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java 
 index a54409e . . 712a474 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java 
 @ @ - 18 , 6 + 18 , 7 @ @ 
 package org . apache . cassandra . cql3 . statements ; 
 
 import java . util . ArrayList ; 
 + import java . util . HashSet ; 
 import java . util . List ; 
 
 import org . apache . cassandra . auth . Permission ; 
 @ @ - 89 , 6 + 90 , 10 @ @ public final class CreateFunctionStatement extends SchemaAlteringStatement 
 
 public boolean announceMigration ( boolean isLocalOnly ) throws RequestValidationException 
 { 
 + if ( new HashSet < > ( argNames ) . size ( ) ! = argNames . size ( ) ) 
 + throw new InvalidRequestException ( String . format ( " duplicate argument names for given function % s with argument names % s " , 
 + functionName , argNames ) ) ; 
 + 
 List < AbstractType < ? > > argTypes = new ArrayList < > ( argRawTypes . size ( ) ) ; 
 for ( CQL3Type . Raw rawType : argRawTypes ) 
 / / We have no proper keyspace to give , which means that this will break ( NPE currently ) 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 index 31708aa . . a456ea8 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 @ @ - 18 , 6 + 18 , 8 @ @ 
 package org . apache . cassandra . cql3 ; 
 
 import java . io . File ; 
 + import java . math . BigDecimal ; 
 + import java . math . BigInteger ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 import java . util . concurrent . CountDownLatch ; 
 @ @ - 613 , 6 + 615 , 12 @ @ public abstract class CQLTester 
 if ( value instanceof Double ) 
 return DoubleType . instance ; 
 
 + if ( value instanceof BigInteger ) 
 + return IntegerType . instance ; 
 + 
 + if ( value instanceof BigDecimal ) 
 + return DecimalType . instance ; 
 + 
 if ( value instanceof String ) 
 return UTF8Type . instance ; 
 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / UFTest . java b / test / unit / org / apache / cassandra / cql3 / UFTest . java 
 index 5dd77bf . . 46db578 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / UFTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / UFTest . java 
 @ @ - 17 , 6 + 17 , 9 @ @ 
 * / 
 package org . apache . cassandra . cql3 ; 
 
 + import java . math . BigDecimal ; 
 + import java . math . BigInteger ; 
 + 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 
 @ @ - 447 , 4 + 450 , 214 @ @ public class UFTest extends CQLTester 
 assertRows ( execute ( " SELECT language , body FROM system . schema _ functions WHERE namespace = ' foo ' AND name = ' pgfun1 ' " ) , 
 row ( " java " , functionBody ) ) ; 
 } 
 + 
 + @ Test 
 + public void testJavascriptFunction ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( key int primary key , val double ) " ) ; 
 + 
 + String functionBody = " \ n " + 
 + " Math . sin ( val ) ; \ n " ; 
 + 
 + String cql = " CREATE OR REPLACE FUNCTION jsft ( val double ) RETURNS double LANGUAGE javascript \ n " + 
 + " AS ' " + functionBody + " ' ; " ; 
 + 
 + execute ( cql ) ; 
 + 
 + assertRows ( execute ( " SELECT language , body FROM system . schema _ functions WHERE namespace = ' ' AND name = ' jsft ' " ) , 
 + row ( " javascript " , functionBody ) ) ; 
 + 
 + execute ( " INSERT INTO % s ( key , val ) VALUES ( ? , ? ) " , 1 , 1d ) ; 
 + execute ( " INSERT INTO % s ( key , val ) VALUES ( ? , ? ) " , 2 , 2d ) ; 
 + execute ( " INSERT INTO % s ( key , val ) VALUES ( ? , ? ) " , 3 , 3d ) ; 
 + assertRows ( execute ( " SELECT key , val , jsft ( val ) FROM % s " ) , 
 + row ( 1 , 1d , Math . sin ( 1d ) ) , 
 + row ( 2 , 2d , Math . sin ( 2d ) ) , 
 + row ( 3 , 3d , Math . sin ( 3d ) ) 
 + ) ; 
 + } 
 + 
 + @ Test 
 + public void testJavascriptBadReturnType ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( key int primary key , val double ) " ) ; 
 + 
 + execute ( " CREATE OR REPLACE FUNCTION jsft ( val double ) RETURNS double LANGUAGE javascript \ n " + 
 + " AS ' \ " string \ " ; ' ; " ) ; 
 + 
 + execute ( " INSERT INTO % s ( key , val ) VALUES ( ? , ? ) " , 1 , 1d ) ; 
 + / / throws IRE with ClassCastException 
 + assertInvalid ( " SELECT key , val , jsft ( val ) FROM % s " ) ; 
 + } 
 + 
 + @ Test 
 + public void testJavascriptThrow ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( key int primary key , val double ) " ) ; 
 + 
 + execute ( " CREATE OR REPLACE FUNCTION jsft ( val double ) RETURNS double LANGUAGE javascript \ n " + 
 + " AS ' throw \ " fool \ " ; ' ; " ) ; 
 + 
 + execute ( " INSERT INTO % s ( key , val ) VALUES ( ? , ? ) " , 1 , 1d ) ; 
 + / / throws IRE with ScriptException 
 + assertInvalid ( " SELECT key , val , jsft ( val ) FROM % s " ) ; 
 + } 
 + 
 + @ Test 
 + public void testDuplicateArgNames ( ) throws Throwable 
 + { 
 + assertInvalid ( " CREATE OR REPLACE FUNCTION scrinv ( val double , val text ) RETURNS text LANGUAGE javascript \ n " + 
 + " AS ' \ " foo bar \ " ; ' ; " ) ; 
 + } 
 + 
 + @ Test 
 + public void testJavascriptCompileFailure ( ) throws Throwable 
 + { 
 + assertInvalid ( " CREATE OR REPLACE FUNCTION scrinv ( val double ) RETURNS double LANGUAGE javascript \ n " + 
 + " AS ' foo bar ' ; " ) ; 
 + } 
 + 
 + @ Test 
 + public void testScriptInvalidLanguage ( ) throws Throwable 
 + { 
 + assertInvalid ( " CREATE OR REPLACE FUNCTION scrinv ( val double ) RETURNS double LANGUAGE artificial _ intelligence \ n " + 
 + " AS ' question for 42 ? ' ; " ) ; 
 + } 
 + 
 + @ Test 
 + public void testScriptReturnTypeCasting ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( key int primary key , val double ) " ) ; 
 + execute ( " INSERT INTO % s ( key , val ) VALUES ( ? , ? ) " , 1 , 1d ) ; 
 + 
 + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS boolean LANGUAGE javascript \ n " + 
 + " AS ' true ; ' ; " ) ; 
 + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , 
 + row ( 1 , 1d , true ) ) ; 
 + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS boolean LANGUAGE javascript \ n " + 
 + " AS ' false ; ' ; " ) ; 
 + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , 
 + row ( 1 , 1d , false ) ) ; 
 + execute ( " DROP FUNCTION js ( double ) " ) ; 
 + 
 + / / declared rtype = int , return type = int 
 + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS int LANGUAGE javascript \ n " + 
 + " AS ' 100 ; ' ; " ) ; 
 + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , 
 + row ( 1 , 1d , 100 ) ) ; 
 + execute ( " DROP FUNCTION js ( double ) " ) ; 
 + 
 + / / declared rtype = int , return type = double 
 + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS int LANGUAGE javascript \ n " + 
 + " AS ' 100 . ; ' ; " ) ; 
 + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , 
 + row ( 1 , 1d , 100 ) ) ; 
 + execute ( " DROP FUNCTION js ( double ) " ) ; 
 + 
 + / / declared rtype = double , return type = int 
 + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS double LANGUAGE javascript \ n " + 
 + " AS ' 100 ; ' ; " ) ; 
 + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , 
 + row ( 1 , 1d , 100d ) ) ; 
 + execute ( " DROP FUNCTION js ( double ) " ) ; 
 + 
 + / / declared rtype = double , return type = double 
 + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS double LANGUAGE javascript \ n " + 
 + " AS ' 100 . ; ' ; " ) ; 
 + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , 
 + row ( 1 , 1d , 100d ) ) ; 
 + execute ( " DROP FUNCTION js ( double ) " ) ; 
 + 
 + / / declared rtype = bigint , return type = int 
 + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS bigint LANGUAGE javascript \ n " + 
 + " AS ' 100 ; ' ; " ) ; 
 + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , 
 + row ( 1 , 1d , 100L ) ) ; 
 + execute ( " DROP FUNCTION js ( double ) " ) ; 
 + 
 + / / declared rtype = bigint , return type = double 
 + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS bigint LANGUAGE javascript \ n " + 
 + " AS ' 100 . ; ' ; " ) ; 
 + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , 
 + row ( 1 , 1d , 100L ) ) ; 
 + execute ( " DROP FUNCTION js ( double ) " ) ; 
 + 
 + / / declared rtype = varint , return type = int 
 + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS varint LANGUAGE javascript \ n " + 
 + " AS ' 100 ; ' ; " ) ; 
 + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , 
 + row ( 1 , 1d , BigInteger . valueOf ( 100L ) ) ) ; 
 + execute ( " DROP FUNCTION js ( double ) " ) ; 
 + 
 + / / declared rtype = varint , return type = double 
 + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS varint LANGUAGE javascript \ n " + 
 + " AS ' 100 . ; ' ; " ) ; 
 + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , 
 + row ( 1 , 1d , BigInteger . valueOf ( 100L ) ) ) ; 
 + execute ( " DROP FUNCTION js ( double ) " ) ; 
 + 
 + / / declared rtype = decimal , return type = int 
 + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS decimal LANGUAGE javascript \ n " + 
 + " AS ' 100 ; ' ; " ) ; 
 + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , 
 + row ( 1 , 1d , BigDecimal . valueOf ( 100d ) ) ) ; 
 + execute ( " DROP FUNCTION js ( double ) " ) ; 
 + 
 + / / declared rtype = decimal , return type = double 
 + execute ( " CREATE OR REPLACE FUNCTION js ( val double ) RETURNS decimal LANGUAGE javascript \ n " + 
 + " AS ' 100 . ; ' ; " ) ; 
 + assertRows ( execute ( " SELECT key , val , js ( val ) FROM % s " ) , 
 + row ( 1 , 1d , BigDecimal . valueOf ( 100d ) ) ) ; 
 + execute ( " DROP FUNCTION js ( double ) " ) ; 
 + } 
 + 
 + @ Test 
 + public void testScriptParamReturnTypes ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( key int primary key , ival int , lval bigint , fval float , dval double , vval varint , ddval decimal ) " ) ; 
 + execute ( " INSERT INTO % s ( key , ival , lval , fval , dval , vval , ddval ) VALUES ( ? , ? , ? , ? , ? , ? , ? ) " , 1 , 
 + 1 , 1L , 1f , 1d , BigInteger . valueOf ( 1L ) , BigDecimal . valueOf ( 1d ) ) ; 
 + 
 + / / type = int 
 + execute ( " CREATE OR REPLACE FUNCTION jsint ( val int ) RETURNS int LANGUAGE javascript \ n " + 
 + " AS ' val + 1 ; ' ; " ) ; 
 + assertRows ( execute ( " SELECT key , ival , jsint ( ival ) FROM % s " ) , 
 + row ( 1 , 1 , 2 ) ) ; 
 + execute ( " DROP FUNCTION jsint ( int ) " ) ; 
 + 
 + / / bigint 
 + execute ( " CREATE OR REPLACE FUNCTION jsbigint ( val bigint ) RETURNS bigint LANGUAGE javascript \ n " + 
 + " AS ' val + 1 ; ' ; " ) ; 
 + assertRows ( execute ( " SELECT key , lval , jsbigint ( lval ) FROM % s " ) , 
 + row ( 1 , 1L , 2L ) ) ; 
 + execute ( " DROP FUNCTION jsbigint ( bigint ) " ) ; 
 + 
 + / / float 
 + execute ( " CREATE OR REPLACE FUNCTION jsfloat ( val float ) RETURNS float LANGUAGE javascript \ n " + 
 + " AS ' val + 1 ; ' ; " ) ; 
 + assertRows ( execute ( " SELECT key , fval , jsfloat ( fval ) FROM % s " ) , 
 + row ( 1 , 1f , 2f ) ) ; 
 + execute ( " DROP FUNCTION jsfloat ( float ) " ) ; 
 + 
 + / / double 
 + execute ( " CREATE OR REPLACE FUNCTION jsdouble ( val double ) RETURNS double LANGUAGE javascript \ n " + 
 + " AS ' val + 1 ; ' ; " ) ; 
 + assertRows ( execute ( " SELECT key , dval , jsdouble ( dval ) FROM % s " ) , 
 + row ( 1 , 1d , 2d ) ) ; 
 + execute ( " DROP FUNCTION jsdouble ( double ) " ) ; 
 + 
 + / / varint 
 + execute ( " CREATE OR REPLACE FUNCTION jsvarint ( val varint ) RETURNS varint LANGUAGE javascript \ n " + 
 + " AS ' val + 1 ; ' ; " ) ; 
 + assertRows ( execute ( " SELECT key , vval , jsvarint ( vval ) FROM % s " ) , 
 + row ( 1 , BigInteger . valueOf ( 1L ) , BigInteger . valueOf ( 2L ) ) ) ; 
 + execute ( " DROP FUNCTION jsvarint ( varint ) " ) ; 
 + 
 + / / decimal 
 + execute ( " CREATE OR REPLACE FUNCTION jsdecimal ( val decimal ) RETURNS decimal LANGUAGE javascript \ n " + 
 + " AS ' val + 1 ; ' ; " ) ; 
 + assertRows ( execute ( " SELECT key , ddval , jsdecimal ( ddval ) FROM % s " ) , 
 + row ( 1 , BigDecimal . valueOf ( 1d ) , BigDecimal . valueOf ( 2d ) ) ) ; 
 + execute ( " DROP FUNCTION jsdecimal ( decimal ) " ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
