BLEU SCORE: 0.6389431042462724

TEST MSG: Revert " Metrics for prepared stmt usage and eviction "
GENERATED MSG: Metrics for prepared stmt usage and eviction

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index cf7112c . . 3ee938a 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 5 + 1 , 4 @ @ <nl> 2 . 0 . 11 : <nl> - * Add metrics for prepared statement usage and eviction ( CASSANDRA - 7930 ) <nl> * Make CQLSSTableWriter sync within partitions ( CASSANDRA - 7360 ) <nl> * Potentially use non - local replicas in CqlConfigHelper ( CASSANDRA - 7906 ) <nl> * Explicitly disallowing mixing multi - column and single - column <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> index ee188a3 . . a59fe9b 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> @ @ - 19 , 14 + 19 , 11 @ @ package org . apache . cassandra . cql3 ; <nl> <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> - import java . util . concurrent . TimeUnit ; <nl> - import java . util . concurrent . atomic . AtomicLong ; <nl> <nl> import com . google . common . primitives . Ints ; <nl> <nl> import com . googlecode . concurrentlinkedhashmap . ConcurrentLinkedHashMap ; <nl> import com . googlecode . concurrentlinkedhashmap . EntryWeigher ; <nl> - import com . googlecode . concurrentlinkedhashmap . EvictionListener ; <nl> import org . antlr . runtime . * ; <nl> import org . github . jamm . MemoryMeter ; <nl> import org . slf4j . Logger ; <nl> @ @ - 35 , 10 + 32 , 8 @ @ import org . slf4j . LoggerFactory ; <nl> import org . apache . cassandra . cql3 . statements . * ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . exceptions . * ; <nl> - import org . apache . cassandra . metrics . CqlStatementMetrics ; <nl> import org . apache . cassandra . service . ClientState ; <nl> import org . apache . cassandra . service . QueryState ; <nl> - import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . thrift . ThriftClientState ; <nl> import org . apache . cassandra . tracing . Tracing ; <nl> import org . apache . cassandra . transport . messages . ResultMessage ; <nl> @ @ - 78 , 9 + 73 , 6 @ @ public class QueryProcessor implements QueryHandler <nl> private static final ConcurrentLinkedHashMap < MD5Digest , CQLStatement > preparedStatements ; <nl> private static final ConcurrentLinkedHashMap < Integer , CQLStatement > thriftPreparedStatements ; <nl> <nl> - public static final CqlStatementMetrics metrics = new CqlStatementMetrics ( ) ; <nl> - private static AtomicLong evictionCount = new AtomicLong ( 0 ) ; <nl> - <nl> static <nl> { <nl> if ( MemoryMeter . isInitialized ( ) ) <nl> @ @ - 88 , 29 + 80 , 11 @ @ public class QueryProcessor implements QueryHandler <nl> preparedStatements = new ConcurrentLinkedHashMap . Builder < MD5Digest , CQLStatement > ( ) <nl> . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED _ MEMORY ) <nl> . weigher ( cqlMemoryUsageWeigher ) <nl> - . listener ( new EvictionListener < MD5Digest , CQLStatement > ( ) <nl> - { <nl> - @ Override <nl> - public void onEviction ( MD5Digest md5Digest , CQLStatement prepared ) <nl> - { <nl> - metrics . activePreparedStatements . dec ( ) ; <nl> - metrics . evictedPreparedStatements . inc ( ) ; <nl> - evictionCount . incrementAndGet ( ) ; <nl> - } <nl> - } ) . build ( ) ; <nl> + . build ( ) ; <nl> thriftPreparedStatements = new ConcurrentLinkedHashMap . Builder < Integer , CQLStatement > ( ) <nl> . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED _ MEMORY ) <nl> . weigher ( thriftMemoryUsageWeigher ) <nl> - . listener ( new EvictionListener < Integer , CQLStatement > ( ) <nl> - { <nl> - @ Override <nl> - public void onEviction ( Integer i , CQLStatement prepared ) <nl> - { <nl> - metrics . activePreparedStatements . dec ( ) ; <nl> - metrics . evictedPreparedStatements . inc ( ) ; <nl> - evictionCount . incrementAndGet ( ) ; <nl> - } <nl> - } ) . build ( ) ; <nl> + . build ( ) ; <nl> } <nl> else <nl> { <nl> @ @ - 123 , 17 + 97 , 6 @ @ public class QueryProcessor implements QueryHandler <nl> . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED _ COUNT ) <nl> . build ( ) ; <nl> } <nl> - <nl> - StorageService . scheduledTasks . scheduleAtFixedRate ( new Runnable ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - long count = evictionCount . getAndSet ( 0 ) ; <nl> - if ( count > 0 ) <nl> - { <nl> - logger . info ( " { } prepared statements discarded in the last minute because cache limit reached ( cache limit = { } bytes ) " , count , MAX _ CACHE _ PREPARED _ MEMORY ) ; <nl> - } <nl> - } <nl> - } , 1 , 1 , TimeUnit . MINUTES ) ; <nl> } <nl> <nl> private QueryProcessor ( ) <nl> @ @ - 209 , 9 + 172 , 6 @ @ public class QueryProcessor implements QueryHandler <nl> if ( prepared . getBoundTerms ( ) ! = options . getValues ( ) . size ( ) ) <nl> throw new InvalidRequestException ( " Invalid amount of bind variables " ) ; <nl> <nl> - if ( ! queryState . getClientState ( ) . isInternal ) <nl> - metrics . executedUnprepared . inc ( ) ; <nl> - <nl> return processStatement ( prepared , queryState , options ) ; <nl> } <nl> <nl> @ @ - 311 , 7 + 271 , 6 @ @ public class QueryProcessor implements QueryHandler <nl> { <nl> int statementId = toHash . hashCode ( ) ; <nl> thriftPreparedStatements . put ( statementId , prepared . statement ) ; <nl> - metrics . activePreparedStatements . inc ( ) ; <nl> logger . trace ( String . format ( " Stored prepared statement # % d with % d bind markers " , <nl> statementId , <nl> prepared . statement . getBoundTerms ( ) ) ) ; <nl> @ @ - 321 , 7 + 280 , 6 @ @ public class QueryProcessor implements QueryHandler <nl> { <nl> MD5Digest statementId = MD5Digest . compute ( toHash ) ; <nl> preparedStatements . put ( statementId , prepared . statement ) ; <nl> - metrics . activePreparedStatements . inc ( ) ; <nl> logger . trace ( String . format ( " Stored prepared statement % s with % d bind markers " , <nl> statementId , <nl> prepared . statement . getBoundTerms ( ) ) ) ; <nl> @ @ - 348 , 7 + 306 , 6 @ @ public class QueryProcessor implements QueryHandler <nl> logger . trace ( " [ { } ] ' { } ' " , i + 1 , variables . get ( i ) ) ; <nl> } <nl> <nl> - metrics . executedPrepared . inc ( ) ; <nl> return processStatement ( statement , queryState , options ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / metrics / CqlStatementMetrics . java b / src / java / org / apache / cassandra / metrics / CqlStatementMetrics . java <nl> deleted file mode 100644 <nl> index ba27d89 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / metrics / CqlStatementMetrics . java <nl> + + + / dev / null <nl> @ @ - 1 , 54 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . metrics ; <nl> - <nl> - import com . yammer . metrics . Metrics ; <nl> - import com . yammer . metrics . core . Counter ; <nl> - import com . yammer . metrics . core . Gauge ; <nl> - import com . yammer . metrics . util . RatioGauge ; <nl> - <nl> - <nl> - public class CqlStatementMetrics <nl> - { <nl> - private final MetricNameFactory factory = new DefaultNameFactory ( " CqlStatement " ) ; <nl> - public final Counter activePreparedStatements = Metrics . newCounter ( factory . createMetricName ( " ActivePreparedStatements " ) ) ; <nl> - public final Counter evictedPreparedStatements = Metrics . newCounter ( factory . createMetricName ( " EvictedPreparedStatements " ) ) ; <nl> - public final Counter executedPrepared = Metrics . newCounter ( factory . createMetricName ( " ExecutedPrepared " ) ) ; <nl> - public final Counter executedUnprepared = Metrics . newCounter ( factory . createMetricName ( " ExecutedUnPrepared " ) ) ; <nl> - <nl> - public final Gauge < Double > preparedRatio = Metrics . newGauge ( factory . createMetricName ( " PreparedUnpreparedRatio " ) , new RatioGauge ( ) <nl> - { <nl> - protected double getNumerator ( ) <nl> - { <nl> - long num = executedPrepared . count ( ) ; <nl> - return num = = 0 ? 1 : num ; <nl> - } <nl> - <nl> - protected double getDenominator ( ) <nl> - { <nl> - long den = executedUnprepared . count ( ) ; <nl> - return den = = 0 ? 1 : den ; <nl> - } <nl> - } ) ; <nl> - <nl> - public void reset ( ) <nl> - { <nl> - executedPrepared . clear ( ) ; <nl> - executedUnprepared . clear ( ) ; <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / service / ClientState . java b / src / java / org / apache / cassandra / service / ClientState . java <nl> index c14540d . . be3b895 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ClientState . java <nl> + + + b / src / java / org / apache / cassandra / service / ClientState . java <nl> @ @ - 102 , 7 + 102 , 7 @ @ public class ClientState <nl> <nl> / / isInternal is used to mark ClientState as used by some internal component <nl> / / that should have an ability to modify system keyspace . <nl> - public final boolean isInternal ; <nl> + private final boolean isInternal ; <nl> <nl> / / The remote address of the client - null for internal clients . <nl> private final SocketAddress remoteAddress ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index cf7112c . . 3ee938a 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 5 + 1 , 4 @ @ 
 2 . 0 . 11 : 
 - * Add metrics for prepared statement usage and eviction ( CASSANDRA - 7930 ) 
 * Make CQLSSTableWriter sync within partitions ( CASSANDRA - 7360 ) 
 * Potentially use non - local replicas in CqlConfigHelper ( CASSANDRA - 7906 ) 
 * Explicitly disallowing mixing multi - column and single - column 
 diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 index ee188a3 . . a59fe9b 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 @ @ - 19 , 14 + 19 , 11 @ @ package org . apache . cassandra . cql3 ; 
 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 - import java . util . concurrent . TimeUnit ; 
 - import java . util . concurrent . atomic . AtomicLong ; 
 
 import com . google . common . primitives . Ints ; 
 
 import com . googlecode . concurrentlinkedhashmap . ConcurrentLinkedHashMap ; 
 import com . googlecode . concurrentlinkedhashmap . EntryWeigher ; 
 - import com . googlecode . concurrentlinkedhashmap . EvictionListener ; 
 import org . antlr . runtime . * ; 
 import org . github . jamm . MemoryMeter ; 
 import org . slf4j . Logger ; 
 @ @ - 35 , 10 + 32 , 8 @ @ import org . slf4j . LoggerFactory ; 
 import org . apache . cassandra . cql3 . statements . * ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . exceptions . * ; 
 - import org . apache . cassandra . metrics . CqlStatementMetrics ; 
 import org . apache . cassandra . service . ClientState ; 
 import org . apache . cassandra . service . QueryState ; 
 - import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . thrift . ThriftClientState ; 
 import org . apache . cassandra . tracing . Tracing ; 
 import org . apache . cassandra . transport . messages . ResultMessage ; 
 @ @ - 78 , 9 + 73 , 6 @ @ public class QueryProcessor implements QueryHandler 
 private static final ConcurrentLinkedHashMap < MD5Digest , CQLStatement > preparedStatements ; 
 private static final ConcurrentLinkedHashMap < Integer , CQLStatement > thriftPreparedStatements ; 
 
 - public static final CqlStatementMetrics metrics = new CqlStatementMetrics ( ) ; 
 - private static AtomicLong evictionCount = new AtomicLong ( 0 ) ; 
 - 
 static 
 { 
 if ( MemoryMeter . isInitialized ( ) ) 
 @ @ - 88 , 29 + 80 , 11 @ @ public class QueryProcessor implements QueryHandler 
 preparedStatements = new ConcurrentLinkedHashMap . Builder < MD5Digest , CQLStatement > ( ) 
 . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED _ MEMORY ) 
 . weigher ( cqlMemoryUsageWeigher ) 
 - . listener ( new EvictionListener < MD5Digest , CQLStatement > ( ) 
 - { 
 - @ Override 
 - public void onEviction ( MD5Digest md5Digest , CQLStatement prepared ) 
 - { 
 - metrics . activePreparedStatements . dec ( ) ; 
 - metrics . evictedPreparedStatements . inc ( ) ; 
 - evictionCount . incrementAndGet ( ) ; 
 - } 
 - } ) . build ( ) ; 
 + . build ( ) ; 
 thriftPreparedStatements = new ConcurrentLinkedHashMap . Builder < Integer , CQLStatement > ( ) 
 . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED _ MEMORY ) 
 . weigher ( thriftMemoryUsageWeigher ) 
 - . listener ( new EvictionListener < Integer , CQLStatement > ( ) 
 - { 
 - @ Override 
 - public void onEviction ( Integer i , CQLStatement prepared ) 
 - { 
 - metrics . activePreparedStatements . dec ( ) ; 
 - metrics . evictedPreparedStatements . inc ( ) ; 
 - evictionCount . incrementAndGet ( ) ; 
 - } 
 - } ) . build ( ) ; 
 + . build ( ) ; 
 } 
 else 
 { 
 @ @ - 123 , 17 + 97 , 6 @ @ public class QueryProcessor implements QueryHandler 
 . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED _ COUNT ) 
 . build ( ) ; 
 } 
 - 
 - StorageService . scheduledTasks . scheduleAtFixedRate ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - long count = evictionCount . getAndSet ( 0 ) ; 
 - if ( count > 0 ) 
 - { 
 - logger . info ( " { } prepared statements discarded in the last minute because cache limit reached ( cache limit = { } bytes ) " , count , MAX _ CACHE _ PREPARED _ MEMORY ) ; 
 - } 
 - } 
 - } , 1 , 1 , TimeUnit . MINUTES ) ; 
 } 
 
 private QueryProcessor ( ) 
 @ @ - 209 , 9 + 172 , 6 @ @ public class QueryProcessor implements QueryHandler 
 if ( prepared . getBoundTerms ( ) ! = options . getValues ( ) . size ( ) ) 
 throw new InvalidRequestException ( " Invalid amount of bind variables " ) ; 
 
 - if ( ! queryState . getClientState ( ) . isInternal ) 
 - metrics . executedUnprepared . inc ( ) ; 
 - 
 return processStatement ( prepared , queryState , options ) ; 
 } 
 
 @ @ - 311 , 7 + 271 , 6 @ @ public class QueryProcessor implements QueryHandler 
 { 
 int statementId = toHash . hashCode ( ) ; 
 thriftPreparedStatements . put ( statementId , prepared . statement ) ; 
 - metrics . activePreparedStatements . inc ( ) ; 
 logger . trace ( String . format ( " Stored prepared statement # % d with % d bind markers " , 
 statementId , 
 prepared . statement . getBoundTerms ( ) ) ) ; 
 @ @ - 321 , 7 + 280 , 6 @ @ public class QueryProcessor implements QueryHandler 
 { 
 MD5Digest statementId = MD5Digest . compute ( toHash ) ; 
 preparedStatements . put ( statementId , prepared . statement ) ; 
 - metrics . activePreparedStatements . inc ( ) ; 
 logger . trace ( String . format ( " Stored prepared statement % s with % d bind markers " , 
 statementId , 
 prepared . statement . getBoundTerms ( ) ) ) ; 
 @ @ - 348 , 7 + 306 , 6 @ @ public class QueryProcessor implements QueryHandler 
 logger . trace ( " [ { } ] ' { } ' " , i + 1 , variables . get ( i ) ) ; 
 } 
 
 - metrics . executedPrepared . inc ( ) ; 
 return processStatement ( statement , queryState , options ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / metrics / CqlStatementMetrics . java b / src / java / org / apache / cassandra / metrics / CqlStatementMetrics . java 
 deleted file mode 100644 
 index ba27d89 . . 0000000 
 - - - a / src / java / org / apache / cassandra / metrics / CqlStatementMetrics . java 
 + + + / dev / null 
 @ @ - 1 , 54 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . metrics ; 
 - 
 - import com . yammer . metrics . Metrics ; 
 - import com . yammer . metrics . core . Counter ; 
 - import com . yammer . metrics . core . Gauge ; 
 - import com . yammer . metrics . util . RatioGauge ; 
 - 
 - 
 - public class CqlStatementMetrics 
 - { 
 - private final MetricNameFactory factory = new DefaultNameFactory ( " CqlStatement " ) ; 
 - public final Counter activePreparedStatements = Metrics . newCounter ( factory . createMetricName ( " ActivePreparedStatements " ) ) ; 
 - public final Counter evictedPreparedStatements = Metrics . newCounter ( factory . createMetricName ( " EvictedPreparedStatements " ) ) ; 
 - public final Counter executedPrepared = Metrics . newCounter ( factory . createMetricName ( " ExecutedPrepared " ) ) ; 
 - public final Counter executedUnprepared = Metrics . newCounter ( factory . createMetricName ( " ExecutedUnPrepared " ) ) ; 
 - 
 - public final Gauge < Double > preparedRatio = Metrics . newGauge ( factory . createMetricName ( " PreparedUnpreparedRatio " ) , new RatioGauge ( ) 
 - { 
 - protected double getNumerator ( ) 
 - { 
 - long num = executedPrepared . count ( ) ; 
 - return num = = 0 ? 1 : num ; 
 - } 
 - 
 - protected double getDenominator ( ) 
 - { 
 - long den = executedUnprepared . count ( ) ; 
 - return den = = 0 ? 1 : den ; 
 - } 
 - } ) ; 
 - 
 - public void reset ( ) 
 - { 
 - executedPrepared . clear ( ) ; 
 - executedUnprepared . clear ( ) ; 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / service / ClientState . java b / src / java / org / apache / cassandra / service / ClientState . java 
 index c14540d . . be3b895 100644 
 - - - a / src / java / org / apache / cassandra / service / ClientState . java 
 + + + b / src / java / org / apache / cassandra / service / ClientState . java 
 @ @ - 102 , 7 + 102 , 7 @ @ public class ClientState 
 
 / / isInternal is used to mark ClientState as used by some internal component 
 / / that should have an ability to modify system keyspace . 
 - public final boolean isInternal ; 
 + private final boolean isInternal ; 
 
 / / The remote address of the client - null for internal clients . 
 private final SocketAddress remoteAddress ;

NEAREST DIFF:
ELIMINATEDSENTENCE
