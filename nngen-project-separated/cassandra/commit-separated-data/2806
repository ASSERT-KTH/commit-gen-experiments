BLEU SCORE: 0.004773955310936996

TEST MSG: improve logging of settings at startup
GENERATED MSG: assert that we ' re not using the size of a freed memory region ( a sign of reference - counting bugs )

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index cef5e14 . . 4b627c8 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 140 , 9 + 140 , 6 @ @ public class DatabaseDescriptor <nl> { <nl> conf = config ; <nl> <nl> - logger . info ( " Data files directories : { } " , Arrays . toString ( conf . data _ file _ directories ) ) ; <nl> - logger . info ( " Commit log directory : { } " , conf . commitlog _ directory ) ; <nl> - <nl> if ( conf . commitlog _ sync = = null ) <nl> { <nl> throw new ConfigurationException ( " Missing required directive CommitLogSync " ) ; <nl> @ @ - 195 , 8 + 192 , 6 @ @ public class DatabaseDescriptor <nl> logger . info ( " DiskAccessMode is { } , indexAccessMode is { } " , conf . disk _ access _ mode , indexAccessMode ) ; <nl> } <nl> <nl> - logger . info ( " disk _ failure _ policy is { } " , conf . disk _ failure _ policy ) ; <nl> - <nl> / * Authentication and authorization backend , implementing IAuthenticator and IAuthorizer * / <nl> if ( conf . authenticator ! = null ) <nl> authenticator = FBUtilities . newAuthenticator ( conf . authenticator ) ; <nl> @ @ - 393 , 11 + 388 , 6 @ @ public class DatabaseDescriptor <nl> requestSchedulerId = RequestSchedulerId . keyspace ; <nl> } <nl> <nl> - if ( logger . isDebugEnabled ( ) & & conf . auto _ bootstrap ! = null ) <nl> - { <nl> - logger . debug ( " setting auto _ bootstrap to { } " , conf . auto _ bootstrap ) ; <nl> - } <nl> - <nl> if ( conf . in _ memory _ compaction _ limit _ in _ mb ! = null & & conf . in _ memory _ compaction _ limit _ in _ mb < = 0 ) <nl> { <nl> throw new ConfigurationException ( " in _ memory _ compaction _ limit _ in _ mb must be a positive integer " ) ; <nl> diff - - git a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java <nl> index d8a138c . . aefc431 100644 <nl> - - - a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java <nl> + + + b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java <nl> @ @ - 18 , 16 + 18 , 21 @ @ <nl> package org . apache . cassandra . config ; <nl> <nl> import java . beans . IntrospectionException ; <nl> - import java . io . IOException ; <nl> + import java . io . ByteArrayInputStream ; <nl> import java . io . InputStream ; <nl> + import java . io . IOException ; <nl> import java . net . URL ; <nl> import java . util . HashSet ; <nl> + import java . util . Map ; <nl> import java . util . Set ; <nl> + import java . util . TreeMap ; <nl> <nl> + import com . google . common . base . Joiner ; <nl> + import com . google . common . io . ByteStreams ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> + <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> - import org . apache . cassandra . io . util . FileUtils ; <nl> import org . yaml . snakeyaml . TypeDescription ; <nl> import org . yaml . snakeyaml . Yaml ; <nl> import org . yaml . snakeyaml . error . YAMLException ; <nl> @ @ - 69 , 20 + 74 , 23 @ @ public class YamlConfigurationLoader implements ConfigurationLoader <nl> <nl> public Config loadConfig ( ) throws ConfigurationException <nl> { <nl> - InputStream input = null ; <nl> try <nl> { <nl> URL url = getStorageConfigURL ( ) ; <nl> logger . info ( " Loading settings from { } " , url ) ; <nl> - try <nl> + byte [ ] configBytes ; <nl> + try ( InputStream is = url . openStream ( ) ) <nl> { <nl> - input = url . openStream ( ) ; <nl> + configBytes = ByteStreams . toByteArray ( is ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> / / getStorageConfigURL should have ruled this out <nl> throw new AssertionError ( e ) ; <nl> } <nl> + <nl> + logConfig ( configBytes ) ; <nl> + <nl> org . yaml . snakeyaml . constructor . Constructor constructor = new org . yaml . snakeyaml . constructor . Constructor ( Config . class ) ; <nl> TypeDescription seedDesc = new TypeDescription ( SeedProviderDef . class ) ; <nl> seedDesc . putMapPropertyType ( " parameters " , String . class , String . class ) ; <nl> @ @ - 90 , 7 + 98 , 7 @ @ public class YamlConfigurationLoader implements ConfigurationLoader <nl> MissingPropertiesChecker propertiesChecker = new MissingPropertiesChecker ( ) ; <nl> constructor . setPropertyUtils ( propertiesChecker ) ; <nl> Yaml yaml = new Yaml ( constructor ) ; <nl> - Config result = yaml . loadAs ( input , Config . class ) ; <nl> + Config result = yaml . loadAs ( new ByteArrayInputStream ( configBytes ) , Config . class ) ; <nl> propertiesChecker . check ( ) ; <nl> return result ; <nl> } <nl> @ @ - 98 , 10 + 106 , 20 @ @ public class YamlConfigurationLoader implements ConfigurationLoader <nl> { <nl> throw new ConfigurationException ( " Invalid yaml " , e ) ; <nl> } <nl> - finally <nl> + } <nl> + <nl> + private void logConfig ( byte [ ] configBytes ) <nl> + { <nl> + Map < Object , Object > configMap = new TreeMap < > ( ( Map < ? , ? > ) new Yaml ( ) . load ( new ByteArrayInputStream ( configBytes ) ) ) ; <nl> + / / these keys contain passwords , don ' t log them <nl> + for ( String sensitiveKey : new String [ ] { " client _ encryption _ options " , " server _ encryption _ options " } ) <nl> { <nl> - FileUtils . closeQuietly ( input ) ; <nl> + if ( configMap . containsKey ( sensitiveKey ) ) <nl> + { <nl> + configMap . put ( sensitiveKey , " < REDACTED > " ) ; <nl> + } <nl> } <nl> + logger . info ( " Node configuration : [ " + Joiner . on ( " ; " ) . join ( configMap . entrySet ( ) ) + " ] " ) ; <nl> } <nl> <nl> private static class MissingPropertiesChecker extends PropertyUtils <nl> diff - - git a / src / java / org / apache / cassandra / service / CacheService . java b / src / java / org / apache / cassandra / service / CacheService . java <nl> index db024de . . 59fb59e 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CacheService . java <nl> + + + b / src / java / org / apache / cassandra / service / CacheService . java <nl> @ @ - 116 , 10 + 116 , 6 @ @ public class CacheService implements CacheServiceMBean <nl> <nl> int keyCacheKeysToSave = DatabaseDescriptor . getKeyCacheKeysToSave ( ) ; <nl> <nl> - logger . info ( " Scheduling key cache save to each { } seconds ( going to save { } keys ) . " , <nl> - DatabaseDescriptor . getKeyCacheSavePeriod ( ) , <nl> - keyCacheKeysToSave = = Integer . MAX _ VALUE ? " all " : keyCacheKeysToSave ) ; <nl> - <nl> keyCache . scheduleSaving ( DatabaseDescriptor . getKeyCacheSavePeriod ( ) , keyCacheKeysToSave ) ; <nl> <nl> return keyCache ; <nl> @ @ - 140 , 10 + 136 , 6 @ @ public class CacheService implements CacheServiceMBean <nl> <nl> int rowCacheKeysToSave = DatabaseDescriptor . getRowCacheKeysToSave ( ) ; <nl> <nl> - logger . info ( " Scheduling row cache save to each { } seconds ( going to save { } keys ) . " , <nl> - DatabaseDescriptor . getRowCacheSavePeriod ( ) , <nl> - rowCacheKeysToSave = = Integer . MAX _ VALUE ? " all " : rowCacheKeysToSave ) ; <nl> - <nl> rowCache . scheduleSaving ( DatabaseDescriptor . getRowCacheSavePeriod ( ) , rowCacheKeysToSave ) ; <nl> <nl> return rowCache ; <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index a5c7df5 . . 0cadf96 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import java . io . File ; <nl> import java . io . IOException ; <nl> import java . lang . management . ManagementFactory ; <nl> import java . net . InetAddress ; <nl> + import java . net . UnknownHostException ; <nl> import java . util . Arrays ; <nl> import java . util . Map ; <nl> import java . util . UUID ; <nl> @ @ - 94 , 6 + 95 , 14 @ @ public class CassandraDaemon <nl> * / <nl> protected void setup ( ) <nl> { <nl> + try <nl> + { <nl> + logger . info ( " Hostname : { } " , InetAddress . getLocalHost ( ) . getHostName ( ) ) ; <nl> + } <nl> + catch ( UnknownHostException e1 ) <nl> + { <nl> + logger . info ( " Could not resolve local host " ) ; <nl> + } <nl> / / log warnings for different kinds of sub - optimal JVMs . tldr use 64 - bit Oracle > = 1 . 6u32 <nl> if ( ! System . getProperty ( " os . arch " ) . contains ( " 64 " ) ) <nl> logger . info ( " 32bit JVM detected . It is recommended to run Cassandra on a 64bit JVM for better performance . " ) ; <nl> diff - - git a / src / java / org / apache / cassandra / thrift / TServerCustomFactory . java b / src / java / org / apache / cassandra / thrift / TServerCustomFactory . java <nl> index 3c21d3a . . 3c5b967 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / TServerCustomFactory . java <nl> + + + b / src / java / org / apache / cassandra / thrift / TServerCustomFactory . java <nl> @ @ - 44 , 7 + 44 , 6 @ @ public class TServerCustomFactory implements TServerFactory <nl> if ( ThriftServer . SYNC . equalsIgnoreCase ( serverType ) ) <nl> { <nl> server = new CustomTThreadPoolServer . Factory ( ) . buildTServer ( args ) ; <nl> - logger . info ( String . format ( " Using synchronous / threadpool thrift server on % s : % s " , args . addr . getHostName ( ) , args . addr . getPort ( ) ) ) ; <nl> } <nl> else if ( ThriftServer . ASYNC . equalsIgnoreCase ( serverType ) ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / thrift / ThriftServer . java b / src / java / org / apache / cassandra / thrift / ThriftServer . java <nl> index 593fcf0 . . d233850 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / ThriftServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / ThriftServer . java <nl> @ @ - 98 , 7 + 98 , 6 @ @ public class ThriftServer implements CassandraDaemon . Server <nl> protected TTransportFactory getTransportFactory ( ) <nl> { <nl> int tFramedTransportSize = DatabaseDescriptor . getThriftFramedTransportSize ( ) ; <nl> - logger . info ( " Using TFramedTransport with a max frame size of { } bytes . " , tFramedTransportSize ) ; <nl> return new TFramedTransport . Factory ( tFramedTransportSize ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 87be6fa . . 70bb919 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 3 + 1 , 7 @ @ <nl> + 1 . 2 . 12 <nl> + * ( Hadoop ) Require CFRR batchSize to be at least 2 ( CASSANDRA - 6114 ) <nl> + <nl> + <nl> 1 . 2 . 11 <nl> * Add a warning for small LCS sstable size ( CASSANDRA - 6191 ) <nl> * Add ability to list specific KS / CF combinations in nodetool cfstats ( CASSANDRA - 4191 ) <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java <nl> index 701260a . . 6846356 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java <nl> @ @ - 144 , 6 + 144 , 9 @ @ public class ColumnFamilyRecordReader extends RecordReader < ByteBuffer , SortedMap <nl> cfName = ConfigHelper . getInputColumnFamily ( conf ) ; <nl> consistencyLevel = ConsistencyLevel . valueOf ( ConfigHelper . getReadConsistencyLevel ( conf ) ) ; <nl> keyspace = ConfigHelper . getInputKeyspace ( conf ) ; <nl> + <nl> + if ( batchSize < 2 ) <nl> + throw new IllegalArgumentException ( " Minimum batchSize is 2 . Suggested batchSize is 100 or more " ) ; <nl> <nl> try <nl> {

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index cef5e14 . . 4b627c8 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 140 , 9 + 140 , 6 @ @ public class DatabaseDescriptor 
 { 
 conf = config ; 
 
 - logger . info ( " Data files directories : { } " , Arrays . toString ( conf . data _ file _ directories ) ) ; 
 - logger . info ( " Commit log directory : { } " , conf . commitlog _ directory ) ; 
 - 
 if ( conf . commitlog _ sync = = null ) 
 { 
 throw new ConfigurationException ( " Missing required directive CommitLogSync " ) ; 
 @ @ - 195 , 8 + 192 , 6 @ @ public class DatabaseDescriptor 
 logger . info ( " DiskAccessMode is { } , indexAccessMode is { } " , conf . disk _ access _ mode , indexAccessMode ) ; 
 } 
 
 - logger . info ( " disk _ failure _ policy is { } " , conf . disk _ failure _ policy ) ; 
 - 
 / * Authentication and authorization backend , implementing IAuthenticator and IAuthorizer * / 
 if ( conf . authenticator ! = null ) 
 authenticator = FBUtilities . newAuthenticator ( conf . authenticator ) ; 
 @ @ - 393 , 11 + 388 , 6 @ @ public class DatabaseDescriptor 
 requestSchedulerId = RequestSchedulerId . keyspace ; 
 } 
 
 - if ( logger . isDebugEnabled ( ) & & conf . auto _ bootstrap ! = null ) 
 - { 
 - logger . debug ( " setting auto _ bootstrap to { } " , conf . auto _ bootstrap ) ; 
 - } 
 - 
 if ( conf . in _ memory _ compaction _ limit _ in _ mb ! = null & & conf . in _ memory _ compaction _ limit _ in _ mb < = 0 ) 
 { 
 throw new ConfigurationException ( " in _ memory _ compaction _ limit _ in _ mb must be a positive integer " ) ; 
 diff - - git a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java 
 index d8a138c . . aefc431 100644 
 - - - a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java 
 + + + b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java 
 @ @ - 18 , 16 + 18 , 21 @ @ 
 package org . apache . cassandra . config ; 
 
 import java . beans . IntrospectionException ; 
 - import java . io . IOException ; 
 + import java . io . ByteArrayInputStream ; 
 import java . io . InputStream ; 
 + import java . io . IOException ; 
 import java . net . URL ; 
 import java . util . HashSet ; 
 + import java . util . Map ; 
 import java . util . Set ; 
 + import java . util . TreeMap ; 
 
 + import com . google . common . base . Joiner ; 
 + import com . google . common . io . ByteStreams ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 + 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 - import org . apache . cassandra . io . util . FileUtils ; 
 import org . yaml . snakeyaml . TypeDescription ; 
 import org . yaml . snakeyaml . Yaml ; 
 import org . yaml . snakeyaml . error . YAMLException ; 
 @ @ - 69 , 20 + 74 , 23 @ @ public class YamlConfigurationLoader implements ConfigurationLoader 
 
 public Config loadConfig ( ) throws ConfigurationException 
 { 
 - InputStream input = null ; 
 try 
 { 
 URL url = getStorageConfigURL ( ) ; 
 logger . info ( " Loading settings from { } " , url ) ; 
 - try 
 + byte [ ] configBytes ; 
 + try ( InputStream is = url . openStream ( ) ) 
 { 
 - input = url . openStream ( ) ; 
 + configBytes = ByteStreams . toByteArray ( is ) ; 
 } 
 catch ( IOException e ) 
 { 
 / / getStorageConfigURL should have ruled this out 
 throw new AssertionError ( e ) ; 
 } 
 + 
 + logConfig ( configBytes ) ; 
 + 
 org . yaml . snakeyaml . constructor . Constructor constructor = new org . yaml . snakeyaml . constructor . Constructor ( Config . class ) ; 
 TypeDescription seedDesc = new TypeDescription ( SeedProviderDef . class ) ; 
 seedDesc . putMapPropertyType ( " parameters " , String . class , String . class ) ; 
 @ @ - 90 , 7 + 98 , 7 @ @ public class YamlConfigurationLoader implements ConfigurationLoader 
 MissingPropertiesChecker propertiesChecker = new MissingPropertiesChecker ( ) ; 
 constructor . setPropertyUtils ( propertiesChecker ) ; 
 Yaml yaml = new Yaml ( constructor ) ; 
 - Config result = yaml . loadAs ( input , Config . class ) ; 
 + Config result = yaml . loadAs ( new ByteArrayInputStream ( configBytes ) , Config . class ) ; 
 propertiesChecker . check ( ) ; 
 return result ; 
 } 
 @ @ - 98 , 10 + 106 , 20 @ @ public class YamlConfigurationLoader implements ConfigurationLoader 
 { 
 throw new ConfigurationException ( " Invalid yaml " , e ) ; 
 } 
 - finally 
 + } 
 + 
 + private void logConfig ( byte [ ] configBytes ) 
 + { 
 + Map < Object , Object > configMap = new TreeMap < > ( ( Map < ? , ? > ) new Yaml ( ) . load ( new ByteArrayInputStream ( configBytes ) ) ) ; 
 + / / these keys contain passwords , don ' t log them 
 + for ( String sensitiveKey : new String [ ] { " client _ encryption _ options " , " server _ encryption _ options " } ) 
 { 
 - FileUtils . closeQuietly ( input ) ; 
 + if ( configMap . containsKey ( sensitiveKey ) ) 
 + { 
 + configMap . put ( sensitiveKey , " < REDACTED > " ) ; 
 + } 
 } 
 + logger . info ( " Node configuration : [ " + Joiner . on ( " ; " ) . join ( configMap . entrySet ( ) ) + " ] " ) ; 
 } 
 
 private static class MissingPropertiesChecker extends PropertyUtils 
 diff - - git a / src / java / org / apache / cassandra / service / CacheService . java b / src / java / org / apache / cassandra / service / CacheService . java 
 index db024de . . 59fb59e 100644 
 - - - a / src / java / org / apache / cassandra / service / CacheService . java 
 + + + b / src / java / org / apache / cassandra / service / CacheService . java 
 @ @ - 116 , 10 + 116 , 6 @ @ public class CacheService implements CacheServiceMBean 
 
 int keyCacheKeysToSave = DatabaseDescriptor . getKeyCacheKeysToSave ( ) ; 
 
 - logger . info ( " Scheduling key cache save to each { } seconds ( going to save { } keys ) . " , 
 - DatabaseDescriptor . getKeyCacheSavePeriod ( ) , 
 - keyCacheKeysToSave = = Integer . MAX _ VALUE ? " all " : keyCacheKeysToSave ) ; 
 - 
 keyCache . scheduleSaving ( DatabaseDescriptor . getKeyCacheSavePeriod ( ) , keyCacheKeysToSave ) ; 
 
 return keyCache ; 
 @ @ - 140 , 10 + 136 , 6 @ @ public class CacheService implements CacheServiceMBean 
 
 int rowCacheKeysToSave = DatabaseDescriptor . getRowCacheKeysToSave ( ) ; 
 
 - logger . info ( " Scheduling row cache save to each { } seconds ( going to save { } keys ) . " , 
 - DatabaseDescriptor . getRowCacheSavePeriod ( ) , 
 - rowCacheKeysToSave = = Integer . MAX _ VALUE ? " all " : rowCacheKeysToSave ) ; 
 - 
 rowCache . scheduleSaving ( DatabaseDescriptor . getRowCacheSavePeriod ( ) , rowCacheKeysToSave ) ; 
 
 return rowCache ; 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index a5c7df5 . . 0cadf96 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import java . io . File ; 
 import java . io . IOException ; 
 import java . lang . management . ManagementFactory ; 
 import java . net . InetAddress ; 
 + import java . net . UnknownHostException ; 
 import java . util . Arrays ; 
 import java . util . Map ; 
 import java . util . UUID ; 
 @ @ - 94 , 6 + 95 , 14 @ @ public class CassandraDaemon 
 * / 
 protected void setup ( ) 
 { 
 + try 
 + { 
 + logger . info ( " Hostname : { } " , InetAddress . getLocalHost ( ) . getHostName ( ) ) ; 
 + } 
 + catch ( UnknownHostException e1 ) 
 + { 
 + logger . info ( " Could not resolve local host " ) ; 
 + } 
 / / log warnings for different kinds of sub - optimal JVMs . tldr use 64 - bit Oracle > = 1 . 6u32 
 if ( ! System . getProperty ( " os . arch " ) . contains ( " 64 " ) ) 
 logger . info ( " 32bit JVM detected . It is recommended to run Cassandra on a 64bit JVM for better performance . " ) ; 
 diff - - git a / src / java / org / apache / cassandra / thrift / TServerCustomFactory . java b / src / java / org / apache / cassandra / thrift / TServerCustomFactory . java 
 index 3c21d3a . . 3c5b967 100644 
 - - - a / src / java / org / apache / cassandra / thrift / TServerCustomFactory . java 
 + + + b / src / java / org / apache / cassandra / thrift / TServerCustomFactory . java 
 @ @ - 44 , 7 + 44 , 6 @ @ public class TServerCustomFactory implements TServerFactory 
 if ( ThriftServer . SYNC . equalsIgnoreCase ( serverType ) ) 
 { 
 server = new CustomTThreadPoolServer . Factory ( ) . buildTServer ( args ) ; 
 - logger . info ( String . format ( " Using synchronous / threadpool thrift server on % s : % s " , args . addr . getHostName ( ) , args . addr . getPort ( ) ) ) ; 
 } 
 else if ( ThriftServer . ASYNC . equalsIgnoreCase ( serverType ) ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / thrift / ThriftServer . java b / src / java / org / apache / cassandra / thrift / ThriftServer . java 
 index 593fcf0 . . d233850 100644 
 - - - a / src / java / org / apache / cassandra / thrift / ThriftServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / ThriftServer . java 
 @ @ - 98 , 7 + 98 , 6 @ @ public class ThriftServer implements CassandraDaemon . Server 
 protected TTransportFactory getTransportFactory ( ) 
 { 
 int tFramedTransportSize = DatabaseDescriptor . getThriftFramedTransportSize ( ) ; 
 - logger . info ( " Using TFramedTransport with a max frame size of { } bytes . " , tFramedTransportSize ) ; 
 return new TFramedTransport . Factory ( tFramedTransportSize ) ; 
 } 


NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 87be6fa . . 70bb919 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 3 + 1 , 7 @ @ 
 + 1 . 2 . 12 
 + * ( Hadoop ) Require CFRR batchSize to be at least 2 ( CASSANDRA - 6114 ) 
 + 
 + 
 1 . 2 . 11 
 * Add a warning for small LCS sstable size ( CASSANDRA - 6191 ) 
 * Add ability to list specific KS / CF combinations in nodetool cfstats ( CASSANDRA - 4191 ) 
 diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java 
 index 701260a . . 6846356 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java 
 + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java 
 @ @ - 144 , 6 + 144 , 9 @ @ public class ColumnFamilyRecordReader extends RecordReader < ByteBuffer , SortedMap 
 cfName = ConfigHelper . getInputColumnFamily ( conf ) ; 
 consistencyLevel = ConsistencyLevel . valueOf ( ConfigHelper . getReadConsistencyLevel ( conf ) ) ; 
 keyspace = ConfigHelper . getInputKeyspace ( conf ) ; 
 + 
 + if ( batchSize < 2 ) 
 + throw new IllegalArgumentException ( " Minimum batchSize is 2 . Suggested batchSize is 100 or more " ) ; 
 
 try 
 {
