BLEU SCORE: 0.05341087579952926

TEST MSG: apply BTree update function correctly
GENERATED MSG: 

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d346499 . . 912e6af 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 6 , 7 + 6 , 7 @ @ <nl> * Add broadcast _ rpc _ address option to cassandra . yaml ( CASSANDRA - 5899 ) <nl> * Auto reload GossipingPropertyFileSnitch config ( CASSANDRA - 5897 ) <nl> * Fix overflow of memtable _ total _ space _ in _ mb ( CASSANDRA - 6573 ) <nl> - * Fix ABTC NPE ( CASSANDRA - 6692 ) <nl> + * Fix ABTC NPE and apply update function correctly ( CASSANDRA - 6692 ) <nl> * Allow nodetool to use a file or prompt for password ( CASSANDRA - 6660 ) <nl> * Fix AIOOBE when concurrently accessing ABSC ( CASSANDRA - 6742 ) <nl> * Fix assertion error in ALTER TYPE RENAME ( CASSANDRA - 6705 ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / btree / BTree . java b / src / java / org / apache / cassandra / utils / btree / BTree . java <nl> index 69cf145 . . ad5065e 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / btree / BTree . java <nl> + + + b / src / java / org / apache / cassandra / utils / btree / BTree . java <nl> @ @ - 83 , 6 + 83 , 11 @ @ public class BTree <nl> return EMPTY _ LEAF ; <nl> } <nl> <nl> + public static < V > Object [ ] build ( Collection < V > source , Comparator < V > comparator , boolean sorted , UpdateFunction < V > updateF ) <nl> + { <nl> + return build ( source , source . size ( ) , comparator , sorted , updateF ) ; <nl> + } <nl> + <nl> / * * <nl> * Creates a BTree containing all of the objects in the provided collection <nl> * <nl> @ @ - 92 , 17 + 97 , 23 @ @ public class BTree <nl> * @ param < V > <nl> * @ return <nl> * / <nl> - public static < V > Object [ ] build ( Collection < V > source , Comparator < V > comparator , boolean sorted , UpdateFunction < V > updateF ) <nl> + public static < V > Object [ ] build ( Iterable < V > source , int size , Comparator < V > comparator , boolean sorted , UpdateFunction < V > updateF ) <nl> { <nl> - int size = source . size ( ) ; <nl> - <nl> if ( size < FAN _ FACTOR ) <nl> { <nl> / / pad to even length to match contract that all leaf nodes are even <nl> - V [ ] values = source . toArray ( ( V [ ] ) new Object [ size + ( size & 1 ) ] ) ; <nl> + V [ ] values = ( V [ ] ) new Object [ size + ( size & 1 ) ] ; <nl> + { <nl> + int i = 0 ; <nl> + for ( V v : source ) <nl> + values [ i + + ] = v ; <nl> + } <nl> + <nl> / / inline sorting since we ' re already calling toArray <nl> if ( ! sorted ) <nl> Arrays . sort ( values , 0 , size , comparator ) ; <nl> + <nl> + / / if updateF is specified <nl> if ( updateF ! = null ) <nl> { <nl> for ( int i = 0 ; i < size ; i + + ) <nl> @ @ - 119 , 7 + 130 , 7 @ @ public class BTree <nl> Builder builder = queue . poll ( ) ; <nl> if ( builder = = null ) <nl> builder = new Builder ( ) ; <nl> - Object [ ] btree = builder . build ( source , size ) ; <nl> + Object [ ] btree = builder . build ( source , updateF , size ) ; <nl> queue . add ( builder ) ; <nl> return btree ; <nl> } <nl> @ @ - 139 , 6 + 150 , 15 @ @ public class BTree <nl> return update ( btree , comparator , updateWith , updateWithIsSorted , UpdateFunction . NoOp . < V > instance ( ) ) ; <nl> } <nl> <nl> + public static < V > Object [ ] update ( Object [ ] btree , <nl> + Comparator < V > comparator , <nl> + Collection < V > updateWith , <nl> + boolean updateWithIsSorted , <nl> + UpdateFunction < V > updateF ) <nl> + { <nl> + return update ( btree , comparator , updateWith , updateWith . size ( ) , updateWithIsSorted , updateF ) ; <nl> + } <nl> + <nl> / * * <nl> * Returns a new BTree with the provided set inserting / replacing as necessary any equal items <nl> * <nl> @ @ - 152 , 15 + 172 , 16 @ @ public class BTree <nl> * / <nl> public static < V > Object [ ] update ( Object [ ] btree , <nl> Comparator < V > comparator , <nl> - Collection < V > updateWith , <nl> + Iterable < V > updateWith , <nl> + int updateWithLength , <nl> boolean updateWithIsSorted , <nl> UpdateFunction < V > updateF ) <nl> { <nl> if ( btree . length = = 0 ) <nl> - return build ( updateWith , comparator , updateWithIsSorted , updateF ) ; <nl> + return build ( updateWith , updateWithLength , comparator , updateWithIsSorted , updateF ) ; <nl> <nl> if ( ! updateWithIsSorted ) <nl> - updateWith = sorted ( updateWith , comparator , updateWith . size ( ) ) ; <nl> + updateWith = sorted ( updateWith , comparator , updateWithLength ) ; <nl> <nl> Queue < Builder > queue = modifier . get ( ) ; <nl> Builder builder = queue . poll ( ) ; <nl> @ @ - 316 , 6 + 337 , 11 @ @ public class BTree <nl> return ( node . length & 1 ) = = 0 ; <nl> } <nl> <nl> + public static boolean isEmpty ( Object [ ] tree ) <nl> + { <nl> + return tree . length = = 0 ; <nl> + } <nl> + <nl> / / Special class for making certain operations easier , so we can define a + / - Inf <nl> private static interface Special extends Comparable < Object > { } <nl> static final Special POSITIVE _ INFINITY = new Special ( ) <nl> @ @ - 343 , 9 + 369 , 12 @ @ public class BTree <nl> } ; <nl> <nl> / / return a sorted collection <nl> - private static < V > Collection < V > sorted ( Collection < V > collection , Comparator < V > comparator , int size ) <nl> + private static < V > Collection < V > sorted ( Iterable < V > source , Comparator < V > comparator , int size ) <nl> { <nl> - V [ ] vs = collection . toArray ( ( V [ ] ) new Object [ size ] ) ; <nl> + V [ ] vs = ( V [ ] ) new Object [ size ] ; <nl> + int i = 0 ; <nl> + for ( V v : source ) <nl> + vs [ i + + ] = v ; <nl> Arrays . sort ( vs , comparator ) ; <nl> return Arrays . asList ( vs ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / btree / Builder . java b / src / java / org / apache / cassandra / utils / btree / Builder . java <nl> index 03a7941 . . 36325fe 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / btree / Builder . java <nl> + + + b / src / java / org / apache / cassandra / utils / btree / Builder . java <nl> @ @ - 55 , 7 + 55 , 7 @ @ final class Builder <nl> * we assume @ param source has been sorted , e . g . by BTree . update , so the update of each key resumes where <nl> * the previous left off . <nl> * / <nl> - public < V > Object [ ] update ( Object [ ] btree , Comparator < V > comparator , Collection < V > source , UpdateFunction < V > updateF ) <nl> + public < V > Object [ ] update ( Object [ ] btree , Comparator < V > comparator , Iterable < V > source , UpdateFunction < V > updateF ) <nl> { <nl> assert updateF ! = null ; <nl> <nl> @ @ - 97 , 15 + 97 , 17 @ @ final class Builder <nl> return r ; <nl> } <nl> <nl> - public < V > Object [ ] build ( Collection < V > source , int size ) <nl> + public < V > Object [ ] build ( Iterable < V > source , UpdateFunction < V > updateF , int size ) <nl> { <nl> + assert updateF ! = null ; <nl> + <nl> NodeBuilder current = rootBuilder ; <nl> / / we descend only to avoid wasting memory ; in update ( ) we will often descend into existing trees <nl> / / so here we want to descend also , so we don ' t have lg max ( N ) depth in both directions <nl> while ( ( size > > = FAN _ SHIFT ) > 0 ) <nl> current = current . ensureChild ( ) ; <nl> <nl> - current . reset ( EMPTY _ LEAF , POSITIVE _ INFINITY , UpdateFunction . NoOp . instance ( ) , null ) ; <nl> + current . reset ( EMPTY _ LEAF , POSITIVE _ INFINITY , updateF , null ) ; <nl> for ( V key : source ) <nl> current . addNewKey ( key ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java b / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java <nl> index 759ffaa . . 7039380 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java <nl> + + + b / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java <nl> @ @ - 280 , 7 + 280 , 7 @ @ final class NodeBuilder <nl> void addNewKey ( Object key ) <nl> { <nl> ensureRoom ( buildKeyPosition + 1 ) ; <nl> - buildKeys [ buildKeyPosition + + ] = key ; <nl> + buildKeys [ buildKeyPosition + + ] = updateFunction . apply ( key ) ; <nl> } <nl> <nl> / / copies children from copyf to the builder , up to the provided index in copyf ( exclusive ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / btree / UpdateFunction . java b / src / java / org / apache / cassandra / utils / btree / UpdateFunction . java <nl> index e4062a4 . . 355028e 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / btree / UpdateFunction . java <nl> + + + b / src / java / org / apache / cassandra / utils / btree / UpdateFunction . java <nl> @ @ - 19 , 7 + 19 , 6 @ @ <nl> package org . apache . cassandra . utils . btree ; <nl> <nl> import com . google . common . base . Function ; <nl> - <nl> / * * <nl> * An interface defining a function to be applied to both the object we are replacing in a BTree and <nl> * the object that is intended to replace it , returning the object to actually replace it . <nl> diff - - git a / test / unit / org / apache / cassandra / utils / BTreeTest . java b / test / unit / org / apache / cassandra / utils / BTreeTest . java <nl> new file mode 100644 <nl> index 0000000 . . b4a960b <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / utils / BTreeTest . java <nl> @ @ - 0 , 0 + 1 , 125 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . utils ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . Comparator ; <nl> + import java . util . List ; <nl> + import java . util . Random ; <nl> + import java . util . concurrent . ThreadLocalRandom ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . utils . btree . BTree ; <nl> + import org . apache . cassandra . utils . btree . BTreeSet ; <nl> + import org . apache . cassandra . utils . btree . UpdateFunction ; <nl> + <nl> + public class BTreeTest <nl> + { <nl> + <nl> + static Integer [ ] ints = new Integer [ 20 ] ; <nl> + static <nl> + { <nl> + System . setProperty ( " cassandra . btree . fanfactor " , " 4 " ) ; <nl> + for ( int i = 0 ; i < ints . length ; i + + ) <nl> + ints [ i ] = new Integer ( i ) ; <nl> + } <nl> + <nl> + static final UpdateFunction < Integer > updateF = new UpdateFunction < Integer > ( ) <nl> + { <nl> + public Integer apply ( Integer replacing , Integer update ) <nl> + { <nl> + return ints [ update ] ; <nl> + } <nl> + <nl> + public boolean abortEarly ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public void allocated ( long heapSize ) <nl> + { <nl> + <nl> + } <nl> + <nl> + public Integer apply ( Integer integer ) <nl> + { <nl> + return ints [ integer ] ; <nl> + } <nl> + } ; <nl> + <nl> + private static List < Integer > seq ( int count ) <nl> + { <nl> + List < Integer > r = new ArrayList < > ( ) ; <nl> + for ( int i = 0 ; i < count ; i + + ) <nl> + r . add ( i ) ; <nl> + return r ; <nl> + } <nl> + <nl> + private static List < Integer > rand ( int count ) <nl> + { <nl> + Random rand = ThreadLocalRandom . current ( ) ; <nl> + List < Integer > r = seq ( count ) ; <nl> + for ( int i = 0 ; i < count - 1 ; i + + ) <nl> + { <nl> + int swap = i + rand . nextInt ( count - i ) ; <nl> + Integer tmp = r . get ( i ) ; <nl> + r . set ( i , r . get ( swap ) ) ; <nl> + r . set ( swap , tmp ) ; <nl> + } <nl> + return r ; <nl> + } <nl> + <nl> + private static final Comparator < Integer > CMP = new Comparator < Integer > ( ) <nl> + { <nl> + public int compare ( Integer o1 , Integer o2 ) <nl> + { <nl> + return Integer . compare ( o1 , o2 ) ; <nl> + } <nl> + } ; <nl> + <nl> + @ Test <nl> + public void testBuilding _ UpdateFunctionReplacement ( ) <nl> + { <nl> + for ( int i = 0 ; i < 20 ; i + + ) <nl> + { <nl> + checkResult ( i , BTree . build ( seq ( i ) , CMP , true , updateF ) ) ; <nl> + checkResult ( i , BTree . build ( rand ( i ) , CMP , false , updateF ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testUpdate _ UpdateFunctionReplacement ( ) <nl> + { <nl> + for ( int i = 0 ; i < 20 ; i + + ) <nl> + { <nl> + checkResult ( i , BTree . update ( BTree . build ( seq ( i ) , CMP , true , UpdateFunction . NoOp . < Integer > instance ( ) ) , CMP , seq ( i ) , true , updateF ) ) ; <nl> + checkResult ( i , BTree . update ( BTree . build ( rand ( i ) , CMP , false , UpdateFunction . NoOp . < Integer > instance ( ) ) , CMP , rand ( i ) , false , updateF ) ) ; <nl> + } <nl> + } <nl> + <nl> + private static void checkResult ( int count , Object [ ] btree ) <nl> + { <nl> + BTreeSet < Integer > vs = new BTreeSet < > ( btree , CMP ) ; <nl> + assert vs . size ( ) = = count ; <nl> + int i = 0 ; <nl> + for ( Integer j : vs ) <nl> + assert j = = ints [ i + + ] ; <nl> + } <nl> + <nl> + }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index c9c8150 . . a57d547 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 25 , 7 + 25 , 7 @ @ <nl> ( CASSANDRA - 1962 ) <nl> * allow specifying specific SSTables to compact from JMX ( CASSANDRA - 1963 ) <nl> * fix race condition in MessagingService . targets ( CASSANDRA - 1959 ) <nl> - <nl> + * zero - copy reads ( CASSANDRA - 1714 ) <nl> <nl> 0 . 7 . 0 - dev <nl> * fix offsets to ByteBuffer . get ( CASSANDRA - 1939 )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d346499 . . 912e6af 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 6 , 7 + 6 , 7 @ @ 
 * Add broadcast _ rpc _ address option to cassandra . yaml ( CASSANDRA - 5899 ) 
 * Auto reload GossipingPropertyFileSnitch config ( CASSANDRA - 5897 ) 
 * Fix overflow of memtable _ total _ space _ in _ mb ( CASSANDRA - 6573 ) 
 - * Fix ABTC NPE ( CASSANDRA - 6692 ) 
 + * Fix ABTC NPE and apply update function correctly ( CASSANDRA - 6692 ) 
 * Allow nodetool to use a file or prompt for password ( CASSANDRA - 6660 ) 
 * Fix AIOOBE when concurrently accessing ABSC ( CASSANDRA - 6742 ) 
 * Fix assertion error in ALTER TYPE RENAME ( CASSANDRA - 6705 ) 
 diff - - git a / src / java / org / apache / cassandra / utils / btree / BTree . java b / src / java / org / apache / cassandra / utils / btree / BTree . java 
 index 69cf145 . . ad5065e 100644 
 - - - a / src / java / org / apache / cassandra / utils / btree / BTree . java 
 + + + b / src / java / org / apache / cassandra / utils / btree / BTree . java 
 @ @ - 83 , 6 + 83 , 11 @ @ public class BTree 
 return EMPTY _ LEAF ; 
 } 
 
 + public static < V > Object [ ] build ( Collection < V > source , Comparator < V > comparator , boolean sorted , UpdateFunction < V > updateF ) 
 + { 
 + return build ( source , source . size ( ) , comparator , sorted , updateF ) ; 
 + } 
 + 
 / * * 
 * Creates a BTree containing all of the objects in the provided collection 
 * 
 @ @ - 92 , 17 + 97 , 23 @ @ public class BTree 
 * @ param < V > 
 * @ return 
 * / 
 - public static < V > Object [ ] build ( Collection < V > source , Comparator < V > comparator , boolean sorted , UpdateFunction < V > updateF ) 
 + public static < V > Object [ ] build ( Iterable < V > source , int size , Comparator < V > comparator , boolean sorted , UpdateFunction < V > updateF ) 
 { 
 - int size = source . size ( ) ; 
 - 
 if ( size < FAN _ FACTOR ) 
 { 
 / / pad to even length to match contract that all leaf nodes are even 
 - V [ ] values = source . toArray ( ( V [ ] ) new Object [ size + ( size & 1 ) ] ) ; 
 + V [ ] values = ( V [ ] ) new Object [ size + ( size & 1 ) ] ; 
 + { 
 + int i = 0 ; 
 + for ( V v : source ) 
 + values [ i + + ] = v ; 
 + } 
 + 
 / / inline sorting since we ' re already calling toArray 
 if ( ! sorted ) 
 Arrays . sort ( values , 0 , size , comparator ) ; 
 + 
 + / / if updateF is specified 
 if ( updateF ! = null ) 
 { 
 for ( int i = 0 ; i < size ; i + + ) 
 @ @ - 119 , 7 + 130 , 7 @ @ public class BTree 
 Builder builder = queue . poll ( ) ; 
 if ( builder = = null ) 
 builder = new Builder ( ) ; 
 - Object [ ] btree = builder . build ( source , size ) ; 
 + Object [ ] btree = builder . build ( source , updateF , size ) ; 
 queue . add ( builder ) ; 
 return btree ; 
 } 
 @ @ - 139 , 6 + 150 , 15 @ @ public class BTree 
 return update ( btree , comparator , updateWith , updateWithIsSorted , UpdateFunction . NoOp . < V > instance ( ) ) ; 
 } 
 
 + public static < V > Object [ ] update ( Object [ ] btree , 
 + Comparator < V > comparator , 
 + Collection < V > updateWith , 
 + boolean updateWithIsSorted , 
 + UpdateFunction < V > updateF ) 
 + { 
 + return update ( btree , comparator , updateWith , updateWith . size ( ) , updateWithIsSorted , updateF ) ; 
 + } 
 + 
 / * * 
 * Returns a new BTree with the provided set inserting / replacing as necessary any equal items 
 * 
 @ @ - 152 , 15 + 172 , 16 @ @ public class BTree 
 * / 
 public static < V > Object [ ] update ( Object [ ] btree , 
 Comparator < V > comparator , 
 - Collection < V > updateWith , 
 + Iterable < V > updateWith , 
 + int updateWithLength , 
 boolean updateWithIsSorted , 
 UpdateFunction < V > updateF ) 
 { 
 if ( btree . length = = 0 ) 
 - return build ( updateWith , comparator , updateWithIsSorted , updateF ) ; 
 + return build ( updateWith , updateWithLength , comparator , updateWithIsSorted , updateF ) ; 
 
 if ( ! updateWithIsSorted ) 
 - updateWith = sorted ( updateWith , comparator , updateWith . size ( ) ) ; 
 + updateWith = sorted ( updateWith , comparator , updateWithLength ) ; 
 
 Queue < Builder > queue = modifier . get ( ) ; 
 Builder builder = queue . poll ( ) ; 
 @ @ - 316 , 6 + 337 , 11 @ @ public class BTree 
 return ( node . length & 1 ) = = 0 ; 
 } 
 
 + public static boolean isEmpty ( Object [ ] tree ) 
 + { 
 + return tree . length = = 0 ; 
 + } 
 + 
 / / Special class for making certain operations easier , so we can define a + / - Inf 
 private static interface Special extends Comparable < Object > { } 
 static final Special POSITIVE _ INFINITY = new Special ( ) 
 @ @ - 343 , 9 + 369 , 12 @ @ public class BTree 
 } ; 
 
 / / return a sorted collection 
 - private static < V > Collection < V > sorted ( Collection < V > collection , Comparator < V > comparator , int size ) 
 + private static < V > Collection < V > sorted ( Iterable < V > source , Comparator < V > comparator , int size ) 
 { 
 - V [ ] vs = collection . toArray ( ( V [ ] ) new Object [ size ] ) ; 
 + V [ ] vs = ( V [ ] ) new Object [ size ] ; 
 + int i = 0 ; 
 + for ( V v : source ) 
 + vs [ i + + ] = v ; 
 Arrays . sort ( vs , comparator ) ; 
 return Arrays . asList ( vs ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / btree / Builder . java b / src / java / org / apache / cassandra / utils / btree / Builder . java 
 index 03a7941 . . 36325fe 100644 
 - - - a / src / java / org / apache / cassandra / utils / btree / Builder . java 
 + + + b / src / java / org / apache / cassandra / utils / btree / Builder . java 
 @ @ - 55 , 7 + 55 , 7 @ @ final class Builder 
 * we assume @ param source has been sorted , e . g . by BTree . update , so the update of each key resumes where 
 * the previous left off . 
 * / 
 - public < V > Object [ ] update ( Object [ ] btree , Comparator < V > comparator , Collection < V > source , UpdateFunction < V > updateF ) 
 + public < V > Object [ ] update ( Object [ ] btree , Comparator < V > comparator , Iterable < V > source , UpdateFunction < V > updateF ) 
 { 
 assert updateF ! = null ; 
 
 @ @ - 97 , 15 + 97 , 17 @ @ final class Builder 
 return r ; 
 } 
 
 - public < V > Object [ ] build ( Collection < V > source , int size ) 
 + public < V > Object [ ] build ( Iterable < V > source , UpdateFunction < V > updateF , int size ) 
 { 
 + assert updateF ! = null ; 
 + 
 NodeBuilder current = rootBuilder ; 
 / / we descend only to avoid wasting memory ; in update ( ) we will often descend into existing trees 
 / / so here we want to descend also , so we don ' t have lg max ( N ) depth in both directions 
 while ( ( size > > = FAN _ SHIFT ) > 0 ) 
 current = current . ensureChild ( ) ; 
 
 - current . reset ( EMPTY _ LEAF , POSITIVE _ INFINITY , UpdateFunction . NoOp . instance ( ) , null ) ; 
 + current . reset ( EMPTY _ LEAF , POSITIVE _ INFINITY , updateF , null ) ; 
 for ( V key : source ) 
 current . addNewKey ( key ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java b / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java 
 index 759ffaa . . 7039380 100644 
 - - - a / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java 
 + + + b / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java 
 @ @ - 280 , 7 + 280 , 7 @ @ final class NodeBuilder 
 void addNewKey ( Object key ) 
 { 
 ensureRoom ( buildKeyPosition + 1 ) ; 
 - buildKeys [ buildKeyPosition + + ] = key ; 
 + buildKeys [ buildKeyPosition + + ] = updateFunction . apply ( key ) ; 
 } 
 
 / / copies children from copyf to the builder , up to the provided index in copyf ( exclusive ) 
 diff - - git a / src / java / org / apache / cassandra / utils / btree / UpdateFunction . java b / src / java / org / apache / cassandra / utils / btree / UpdateFunction . java 
 index e4062a4 . . 355028e 100644 
 - - - a / src / java / org / apache / cassandra / utils / btree / UpdateFunction . java 
 + + + b / src / java / org / apache / cassandra / utils / btree / UpdateFunction . java 
 @ @ - 19 , 7 + 19 , 6 @ @ 
 package org . apache . cassandra . utils . btree ; 
 
 import com . google . common . base . Function ; 
 - 
 / * * 
 * An interface defining a function to be applied to both the object we are replacing in a BTree and 
 * the object that is intended to replace it , returning the object to actually replace it . 
 diff - - git a / test / unit / org / apache / cassandra / utils / BTreeTest . java b / test / unit / org / apache / cassandra / utils / BTreeTest . java 
 new file mode 100644 
 index 0000000 . . b4a960b 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / utils / BTreeTest . java 
 @ @ - 0 , 0 + 1 , 125 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . utils ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . Comparator ; 
 + import java . util . List ; 
 + import java . util . Random ; 
 + import java . util . concurrent . ThreadLocalRandom ; 
 + 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . utils . btree . BTree ; 
 + import org . apache . cassandra . utils . btree . BTreeSet ; 
 + import org . apache . cassandra . utils . btree . UpdateFunction ; 
 + 
 + public class BTreeTest 
 + { 
 + 
 + static Integer [ ] ints = new Integer [ 20 ] ; 
 + static 
 + { 
 + System . setProperty ( " cassandra . btree . fanfactor " , " 4 " ) ; 
 + for ( int i = 0 ; i < ints . length ; i + + ) 
 + ints [ i ] = new Integer ( i ) ; 
 + } 
 + 
 + static final UpdateFunction < Integer > updateF = new UpdateFunction < Integer > ( ) 
 + { 
 + public Integer apply ( Integer replacing , Integer update ) 
 + { 
 + return ints [ update ] ; 
 + } 
 + 
 + public boolean abortEarly ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + public void allocated ( long heapSize ) 
 + { 
 + 
 + } 
 + 
 + public Integer apply ( Integer integer ) 
 + { 
 + return ints [ integer ] ; 
 + } 
 + } ; 
 + 
 + private static List < Integer > seq ( int count ) 
 + { 
 + List < Integer > r = new ArrayList < > ( ) ; 
 + for ( int i = 0 ; i < count ; i + + ) 
 + r . add ( i ) ; 
 + return r ; 
 + } 
 + 
 + private static List < Integer > rand ( int count ) 
 + { 
 + Random rand = ThreadLocalRandom . current ( ) ; 
 + List < Integer > r = seq ( count ) ; 
 + for ( int i = 0 ; i < count - 1 ; i + + ) 
 + { 
 + int swap = i + rand . nextInt ( count - i ) ; 
 + Integer tmp = r . get ( i ) ; 
 + r . set ( i , r . get ( swap ) ) ; 
 + r . set ( swap , tmp ) ; 
 + } 
 + return r ; 
 + } 
 + 
 + private static final Comparator < Integer > CMP = new Comparator < Integer > ( ) 
 + { 
 + public int compare ( Integer o1 , Integer o2 ) 
 + { 
 + return Integer . compare ( o1 , o2 ) ; 
 + } 
 + } ; 
 + 
 + @ Test 
 + public void testBuilding _ UpdateFunctionReplacement ( ) 
 + { 
 + for ( int i = 0 ; i < 20 ; i + + ) 
 + { 
 + checkResult ( i , BTree . build ( seq ( i ) , CMP , true , updateF ) ) ; 
 + checkResult ( i , BTree . build ( rand ( i ) , CMP , false , updateF ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testUpdate _ UpdateFunctionReplacement ( ) 
 + { 
 + for ( int i = 0 ; i < 20 ; i + + ) 
 + { 
 + checkResult ( i , BTree . update ( BTree . build ( seq ( i ) , CMP , true , UpdateFunction . NoOp . < Integer > instance ( ) ) , CMP , seq ( i ) , true , updateF ) ) ; 
 + checkResult ( i , BTree . update ( BTree . build ( rand ( i ) , CMP , false , UpdateFunction . NoOp . < Integer > instance ( ) ) , CMP , rand ( i ) , false , updateF ) ) ; 
 + } 
 + } 
 + 
 + private static void checkResult ( int count , Object [ ] btree ) 
 + { 
 + BTreeSet < Integer > vs = new BTreeSet < > ( btree , CMP ) ; 
 + assert vs . size ( ) = = count ; 
 + int i = 0 ; 
 + for ( Integer j : vs ) 
 + assert j = = ints [ i + + ] ; 
 + } 
 + 
 + }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index c9c8150 . . a57d547 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 25 , 7 + 25 , 7 @ @ 
 ( CASSANDRA - 1962 ) 
 * allow specifying specific SSTables to compact from JMX ( CASSANDRA - 1963 ) 
 * fix race condition in MessagingService . targets ( CASSANDRA - 1959 ) 
 - 
 + * zero - copy reads ( CASSANDRA - 1714 ) 
 
 0 . 7 . 0 - dev 
 * fix offsets to ByteBuffer . get ( CASSANDRA - 1939 )
