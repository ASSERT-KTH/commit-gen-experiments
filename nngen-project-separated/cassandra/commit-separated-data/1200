BLEU SCORE: 0.015445276590783498

TEST MSG: Always update system keyspace to the most up - to - date version
GENERATED MSG: merge from 1 . 1

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 538d5e4 . . 7e969a5 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 4 <nl> + * Use most up - to - date version of schema for system tables ( CASSANDRA - 10652 ) <nl> * Deprecate memory _ allocator in cassandra . yaml ( CASSANDRA - 10581 , 10628 ) <nl> * Expose phi values from failure detector via JMX and tweak debug <nl> and trace logging ( CASSANDRA - 9526 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> index 9087672 . . ec7448a 100644 <nl> - - - a / src / java / org / apache / cassandra / service / MigrationManager . java <nl> + + + b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> @ @ - 277 , 12 + 277 , 32 @ @ public class MigrationManager <nl> <nl> public static void announceNewColumnFamily ( CFMetaData cfm , boolean announceLocally ) throws ConfigurationException <nl> { <nl> + announceNewColumnFamily ( cfm , announceLocally , true ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Announces the table even if the definition is already know locally . <nl> + * This should generally be avoided but is used internally when we want to force the most up to date version of <nl> + * a system table schema ( Note that we don ' t know if the schema we force _ is _ the most recent version or not , we <nl> + * just rely on idempotency to basically ignore that announce if it ' s not . That ' s why we can ' t use announceUpdateColumnFamily , <nl> + * it would for instance delete new columns if this is not called with the most up - to - date version ) <nl> + * <nl> + * Note that this is only safe for system tables where we know the cfId is fixed and will be the same whatever version <nl> + * of the definition is used . <nl> + * / <nl> + public static void forceAnnounceNewColumnFamily ( CFMetaData cfm ) throws ConfigurationException <nl> + { <nl> + announceNewColumnFamily ( cfm , false , false ) ; <nl> + } <nl> + <nl> + private static void announceNewColumnFamily ( CFMetaData cfm , boolean announceLocally , boolean throwOnDuplicate ) throws ConfigurationException <nl> + { <nl> cfm . validate ( ) ; <nl> <nl> KSMetaData ksm = Schema . instance . getKSMetaData ( cfm . ksName ) ; <nl> if ( ksm = = null ) <nl> throw new ConfigurationException ( String . format ( " Cannot add table ' % s ' to non existing keyspace ' % s ' . " , cfm . cfName , cfm . ksName ) ) ; <nl> - else if ( ksm . cfMetaData ( ) . containsKey ( cfm . cfName ) ) <nl> + else if ( throwOnDuplicate & & ksm . cfMetaData ( ) . containsKey ( cfm . cfName ) ) <nl> throw new AlreadyExistsException ( cfm . ksName , cfm . cfName ) ; <nl> <nl> logger . info ( String . format ( " Create new table : % s " , cfm ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 77483f2 . . ad209fc 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 950 , 11 + 950 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> } <nl> <nl> / / if we don ' t have system _ traces keyspace at this point , then create it manually <nl> - if ( Schema . instance . getKSMetaData ( TraceKeyspace . NAME ) = = null ) <nl> - maybeAddKeyspace ( TraceKeyspace . definition ( ) ) ; <nl> - <nl> - if ( Schema . instance . getKSMetaData ( SystemDistributedKeyspace . NAME ) = = null ) <nl> - MigrationManager . announceNewKeyspace ( SystemDistributedKeyspace . definition ( ) , 0 , false ) ; <nl> + maybeAddOrUpdateKeyspace ( TraceKeyspace . definition ( ) ) ; <nl> + maybeAddOrUpdateKeyspace ( SystemDistributedKeyspace . definition ( ) ) ; <nl> <nl> if ( ! isSurveyMode ) <nl> { <nl> @ @ - 1020 , 24 + 1017 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> private void doAuthSetup ( ) <nl> { <nl> - try <nl> - { <nl> - / / if we don ' t have system _ auth keyspace at this point , then create it <nl> - if ( Schema . instance . getKSMetaData ( AuthKeyspace . NAME ) = = null ) <nl> - maybeAddKeyspace ( AuthKeyspace . definition ( ) ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - throw new AssertionError ( e ) ; / / shouldn ' t ever happen . <nl> - } <nl> - <nl> - / / create any necessary tables as we may be upgrading in which case <nl> - / / the ks exists with the only the legacy tables defined . <nl> - / / Also , the addKeyspace above can be racy if multiple nodes are started <nl> - / / concurrently - see CASSANDRA - 9201 <nl> - for ( Map . Entry < String , CFMetaData > table : AuthKeyspace . definition ( ) . cfMetaData ( ) . entrySet ( ) ) <nl> - if ( Schema . instance . getCFMetaData ( AuthKeyspace . NAME , table . getKey ( ) ) = = null ) <nl> - maybeAddTable ( table . getValue ( ) ) ; <nl> + maybeAddOrUpdateKeyspace ( AuthKeyspace . definition ( ) ) ; <nl> <nl> DatabaseDescriptor . getRoleManager ( ) . setup ( ) ; <nl> DatabaseDescriptor . getAuthenticator ( ) . setup ( ) ; <nl> @ @ - 1069 , 6 + 1049 , 36 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> } <nl> } <nl> <nl> + / * * <nl> + * Ensure the schema of a pseudo - system keyspace ( a distributed system keyspace : traces , auth and the so - called distributedKeyspace ) , <nl> + * is up to date with what we expected ( creating it if it doesn ' t exist and updating tables that may have been upgraded ) . <nl> + * / <nl> + private void maybeAddOrUpdateKeyspace ( KSMetaData expected ) <nl> + { <nl> + / / Note that want to deal with the keyspace and its table a bit differently : for the keyspace definition <nl> + / / itself , we want to create it if it doesn ' t exist yet , but if it does exist , we don ' t want to modify it , <nl> + / / because user can modify the definition to change the replication factor ( # 6016 ) and we don ' t want to <nl> + / / override it . For the tables however , we have to deal with the fact that new version can add new columns <nl> + / / ( # 8162 being an example ) , so even if the table definition exists , we still need to force the " current " <nl> + / / version of the schema , the one the node will be expecting . <nl> + <nl> + KSMetaData defined = Schema . instance . getKSMetaData ( expected . name ) ; <nl> + if ( defined = = null ) <nl> + { <nl> + / / The keyspace doesn ' t exist , create it <nl> + maybeAddKeyspace ( expected ) ; <nl> + return ; <nl> + } <nl> + <nl> + / / While the keyspace exists , it might miss table or have outdated one <nl> + for ( CFMetaData expectedTable : expected . cfMetaData ( ) . values ( ) ) <nl> + { <nl> + CFMetaData definedTable = defined . cfMetaData ( ) . get ( expectedTable . cfName ) ; <nl> + if ( definedTable = = null | | ! definedTable . equals ( expectedTable ) ) <nl> + MigrationManager . forceAnnounceNewColumnFamily ( expectedTable ) ; <nl> + } <nl> + } <nl> + <nl> public boolean isJoined ( ) <nl> { <nl> return joined & & ! isSurveyMode ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / HintedHandOffManager . java b / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> index a83fbab . . e2dc046 100644 <nl> - - - a / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> + + + b / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> @ @ - 391 , 7 + 391 , 9 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean <nl> { <nl> Token < ? > token = StorageService . getPartitioner ( ) . getTokenFactory ( ) . fromByteArray ( row . key . key ) ; <nl> InetAddress target = StorageService . instance . getTokenMetadata ( ) . getEndpoint ( token ) ; <nl> - scheduleHintDelivery ( target ) ; <nl> + / / token may have since been removed ( in which case we have just read back a tombstone ) <nl> + if ( target ! = null ) <nl> + scheduleHintDelivery ( target ) ; <nl> } <nl> <nl> if ( logger _ . isDebugEnabled ( ) )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 538d5e4 . . 7e969a5 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 4 
 + * Use most up - to - date version of schema for system tables ( CASSANDRA - 10652 ) 
 * Deprecate memory _ allocator in cassandra . yaml ( CASSANDRA - 10581 , 10628 ) 
 * Expose phi values from failure detector via JMX and tweak debug 
 and trace logging ( CASSANDRA - 9526 ) 
 diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java 
 index 9087672 . . ec7448a 100644 
 - - - a / src / java / org / apache / cassandra / service / MigrationManager . java 
 + + + b / src / java / org / apache / cassandra / service / MigrationManager . java 
 @ @ - 277 , 12 + 277 , 32 @ @ public class MigrationManager 
 
 public static void announceNewColumnFamily ( CFMetaData cfm , boolean announceLocally ) throws ConfigurationException 
 { 
 + announceNewColumnFamily ( cfm , announceLocally , true ) ; 
 + } 
 + 
 + / * * 
 + * Announces the table even if the definition is already know locally . 
 + * This should generally be avoided but is used internally when we want to force the most up to date version of 
 + * a system table schema ( Note that we don ' t know if the schema we force _ is _ the most recent version or not , we 
 + * just rely on idempotency to basically ignore that announce if it ' s not . That ' s why we can ' t use announceUpdateColumnFamily , 
 + * it would for instance delete new columns if this is not called with the most up - to - date version ) 
 + * 
 + * Note that this is only safe for system tables where we know the cfId is fixed and will be the same whatever version 
 + * of the definition is used . 
 + * / 
 + public static void forceAnnounceNewColumnFamily ( CFMetaData cfm ) throws ConfigurationException 
 + { 
 + announceNewColumnFamily ( cfm , false , false ) ; 
 + } 
 + 
 + private static void announceNewColumnFamily ( CFMetaData cfm , boolean announceLocally , boolean throwOnDuplicate ) throws ConfigurationException 
 + { 
 cfm . validate ( ) ; 
 
 KSMetaData ksm = Schema . instance . getKSMetaData ( cfm . ksName ) ; 
 if ( ksm = = null ) 
 throw new ConfigurationException ( String . format ( " Cannot add table ' % s ' to non existing keyspace ' % s ' . " , cfm . cfName , cfm . ksName ) ) ; 
 - else if ( ksm . cfMetaData ( ) . containsKey ( cfm . cfName ) ) 
 + else if ( throwOnDuplicate & & ksm . cfMetaData ( ) . containsKey ( cfm . cfName ) ) 
 throw new AlreadyExistsException ( cfm . ksName , cfm . cfName ) ; 
 
 logger . info ( String . format ( " Create new table : % s " , cfm ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 77483f2 . . ad209fc 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 950 , 11 + 950 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 } 
 
 / / if we don ' t have system _ traces keyspace at this point , then create it manually 
 - if ( Schema . instance . getKSMetaData ( TraceKeyspace . NAME ) = = null ) 
 - maybeAddKeyspace ( TraceKeyspace . definition ( ) ) ; 
 - 
 - if ( Schema . instance . getKSMetaData ( SystemDistributedKeyspace . NAME ) = = null ) 
 - MigrationManager . announceNewKeyspace ( SystemDistributedKeyspace . definition ( ) , 0 , false ) ; 
 + maybeAddOrUpdateKeyspace ( TraceKeyspace . definition ( ) ) ; 
 + maybeAddOrUpdateKeyspace ( SystemDistributedKeyspace . definition ( ) ) ; 
 
 if ( ! isSurveyMode ) 
 { 
 @ @ - 1020 , 24 + 1017 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 private void doAuthSetup ( ) 
 { 
 - try 
 - { 
 - / / if we don ' t have system _ auth keyspace at this point , then create it 
 - if ( Schema . instance . getKSMetaData ( AuthKeyspace . NAME ) = = null ) 
 - maybeAddKeyspace ( AuthKeyspace . definition ( ) ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - throw new AssertionError ( e ) ; / / shouldn ' t ever happen . 
 - } 
 - 
 - / / create any necessary tables as we may be upgrading in which case 
 - / / the ks exists with the only the legacy tables defined . 
 - / / Also , the addKeyspace above can be racy if multiple nodes are started 
 - / / concurrently - see CASSANDRA - 9201 
 - for ( Map . Entry < String , CFMetaData > table : AuthKeyspace . definition ( ) . cfMetaData ( ) . entrySet ( ) ) 
 - if ( Schema . instance . getCFMetaData ( AuthKeyspace . NAME , table . getKey ( ) ) = = null ) 
 - maybeAddTable ( table . getValue ( ) ) ; 
 + maybeAddOrUpdateKeyspace ( AuthKeyspace . definition ( ) ) ; 
 
 DatabaseDescriptor . getRoleManager ( ) . setup ( ) ; 
 DatabaseDescriptor . getAuthenticator ( ) . setup ( ) ; 
 @ @ - 1069 , 6 + 1049 , 36 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 } 
 } 
 
 + / * * 
 + * Ensure the schema of a pseudo - system keyspace ( a distributed system keyspace : traces , auth and the so - called distributedKeyspace ) , 
 + * is up to date with what we expected ( creating it if it doesn ' t exist and updating tables that may have been upgraded ) . 
 + * / 
 + private void maybeAddOrUpdateKeyspace ( KSMetaData expected ) 
 + { 
 + / / Note that want to deal with the keyspace and its table a bit differently : for the keyspace definition 
 + / / itself , we want to create it if it doesn ' t exist yet , but if it does exist , we don ' t want to modify it , 
 + / / because user can modify the definition to change the replication factor ( # 6016 ) and we don ' t want to 
 + / / override it . For the tables however , we have to deal with the fact that new version can add new columns 
 + / / ( # 8162 being an example ) , so even if the table definition exists , we still need to force the " current " 
 + / / version of the schema , the one the node will be expecting . 
 + 
 + KSMetaData defined = Schema . instance . getKSMetaData ( expected . name ) ; 
 + if ( defined = = null ) 
 + { 
 + / / The keyspace doesn ' t exist , create it 
 + maybeAddKeyspace ( expected ) ; 
 + return ; 
 + } 
 + 
 + / / While the keyspace exists , it might miss table or have outdated one 
 + for ( CFMetaData expectedTable : expected . cfMetaData ( ) . values ( ) ) 
 + { 
 + CFMetaData definedTable = defined . cfMetaData ( ) . get ( expectedTable . cfName ) ; 
 + if ( definedTable = = null | | ! definedTable . equals ( expectedTable ) ) 
 + MigrationManager . forceAnnounceNewColumnFamily ( expectedTable ) ; 
 + } 
 + } 
 + 
 public boolean isJoined ( ) 
 { 
 return joined & & ! isSurveyMode ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / HintedHandOffManager . java b / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 index a83fbab . . e2dc046 100644 
 - - - a / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 + + + b / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 @ @ - 391 , 7 + 391 , 9 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean 
 { 
 Token < ? > token = StorageService . getPartitioner ( ) . getTokenFactory ( ) . fromByteArray ( row . key . key ) ; 
 InetAddress target = StorageService . instance . getTokenMetadata ( ) . getEndpoint ( token ) ; 
 - scheduleHintDelivery ( target ) ; 
 + / / token may have since been removed ( in which case we have just read back a tombstone ) 
 + if ( target ! = null ) 
 + scheduleHintDelivery ( target ) ; 
 } 
 
 if ( logger _ . isDebugEnabled ( ) )
