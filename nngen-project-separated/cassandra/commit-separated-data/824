BLEU SCORE: 0.031251907639724415

TEST MSG: Fix TimeTypeTest - comparing AbstractType . compare ( ) with - 1 or 1 .
GENERATED MSG: Make help and validation types match in cassandra - cli .

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / marshal / TimeTypeTest . java b / test / unit / org / apache / cassandra / db / marshal / TimeTypeTest . java <nl> index 3057b9c . . 699c805 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / marshal / TimeTypeTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / marshal / TimeTypeTest . java <nl> @ @ - 48 , 14 + 48 , 14 @ @ public class TimeTypeTest <nl> <nl> b1 = TimeSerializer . instance . serialize ( 0L ) ; <nl> b2 = TimeSerializer . instance . serialize ( 10000000L ) ; <nl> - assert TimeType . instance . compare ( b1 , b2 ) = = - 1 : " Failed < comparison on 0 " ; <nl> + assert TimeType . instance . compare ( b1 , b2 ) < 0 : " Failed < comparison on 0 " ; <nl> <nl> b1 = TimeSerializer . instance . serialize ( 0L ) ; <nl> b2 = TimeSerializer . instance . serialize ( TimeUnit . DAYS . toNanos ( 1 ) ) ; <nl> - assert TimeType . instance . compare ( b1 , b2 ) = = - 1 : " Failed < comparison against max range . " ; <nl> + assert TimeType . instance . compare ( b1 , b2 ) < 0 : " Failed < comparison against max range . " ; <nl> <nl> b1 = TimeSerializer . instance . serialize ( TimeUnit . DAYS . toNanos ( 1 ) ) ; <nl> b2 = TimeSerializer . instance . serialize ( 0L ) ; <nl> - assert TimeType . instance . compare ( b1 , b2 ) = = 1 : " Failed > comparison against max range . " ; <nl> + assert TimeType . instance . compare ( b1 , b2 ) > 0 : " Failed > comparison against max range . " ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 38df16d . . d78028e 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 25 , 6 + 25 , 8 @ @ <nl> * initialize local ep state prior to gossip startup if needed ( CASSANDRA - 2638 ) <nl> * fix counter increment lost after restart ( CASSANDRA - 2642 ) <nl> * add quote - escaping via backslash to CLI ( CASSANDRA - 2623 ) <nl> + * fig pig example script ( CASSANDRA - 2487 ) <nl> + * fix dynamic snitch race in adding latencies ( CASSANDRA - 2618 ) <nl> <nl> <nl> 0 . 8 . 0 - beta2 <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index 4f7bcff . . 0b2c57e 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 62 , 6 + 62 , 15 @ @ JMX <nl> - By default , JMX now listens on port 7199 . <nl> <nl> <nl> + 0 . 7 . 6 <nl> + = = = = = <nl> + <nl> + Upgrading <nl> + - - - - - - - - - <nl> + - Nothing specific to 0 . 7 . 6 , but see 0 . 7 . 3 Upgrading if upgrading <nl> + from earlier than 0 . 7 . 1 . <nl> + <nl> + <nl> 0 . 7 . 5 <nl> = = = = = <nl> <nl> diff - - git a / debian / init b / debian / init <nl> index 709bb6a . . ef3430c 100644 <nl> - - - a / debian / init <nl> + + + b / debian / init <nl> @ @ - 1 , 8 + 1 , 10 @ @ <nl> # ! / bin / sh <nl> # # # BEGIN INIT INFO <nl> # Provides : cassandra <nl> - # Required - Start : $ remote _ fs <nl> - # Required - Stop : $ remote _ fs <nl> + # Required - Start : $ remote _ fs $ network $ named $ time <nl> + # Required - Stop : $ remote _ fs $ network $ named $ time <nl> + # Should - Start : ntp mdadm <nl> + # Should - Stop : ntp mdadm <nl> # Default - Start : 2 3 4 5 <nl> # Default - Stop : 0 1 6 <nl> # Short - Description : distributed storage system for structured data <nl> diff - - git a / debian / rules b / debian / rules <nl> index 4bab97e . . f4ab5f4 100755 <nl> - - - a / debian / rules <nl> + + + b / debian / rules <nl> @ @ - 51 , 7 + 51 , 7 @ @ binary - indep : build install <nl> 	 dh _ testdir <nl> 	 dh _ testroot <nl> 	 dh _ installchangelogs <nl> - 	 dh _ installinit <nl> + 	 dh _ installinit - u ' start 50 2 3 4 5 . stop 50 0 1 6 ' <nl> 	 dh _ installdocs README . txt CHANGES . txt NEWS . txt <nl> 	 dh _ compress <nl> 	 dh _ fixperms <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index bb20177 . . 7eb1ffb 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 280 , 7 + 280 , 6 @ @ public final class MessagingService implements MessagingServiceMBean <nl> public String sendRR ( Message message , InetAddress to , IMessageCallback cb ) <nl> { <nl> String id = nextId ( ) ; <nl> - logger _ . debug ( " Message id to { } is { } " , to , id ) ; <nl> addCallback ( cb , id , to ) ; <nl> sendOneWay ( message , id , to ) ; <nl> return id ; <nl> @ @ - 288 , 9 + 287 , 7 @ @ public final class MessagingService implements MessagingServiceMBean <nl> <nl> public void sendOneWay ( Message message , InetAddress to ) <nl> { <nl> - String id = nextId ( ) ; <nl> - logger _ . debug ( " Message id to { } is { } " , to , id ) ; <nl> - sendOneWay ( message , id , to ) ; <nl> + sendOneWay ( message , nextId ( ) , to ) ; <nl> } <nl> <nl> public void sendReply ( Message message , String id , InetAddress to ) <nl> diff - - git a / src / java / org / apache / cassandra / service / AbstractRowResolver . java b / src / java / org / apache / cassandra / service / AbstractRowResolver . java <nl> index 9e9f9d1 . . 18d44e4 100644 <nl> - - - a / src / java / org / apache / cassandra / service / AbstractRowResolver . java <nl> + + + b / src / java / org / apache / cassandra / service / AbstractRowResolver . java <nl> @ @ - 55 , 15 + 55 , 16 @ @ public abstract class AbstractRowResolver implements IResponseResolver < Row > <nl> this . table = table ; <nl> } <nl> <nl> - public ReadResponse preprocess ( Message message ) <nl> + public void preprocess ( Message message ) <nl> { <nl> byte [ ] body = message . getMessageBody ( ) ; <nl> ByteArrayInputStream bufIn = new ByteArrayInputStream ( body ) ; <nl> try <nl> { <nl> ReadResponse result = ReadResponse . serializer ( ) . deserialize ( new DataInputStream ( bufIn ) , message . getVersion ( ) ) ; <nl> + if ( logger . isDebugEnabled ( ) ) <nl> + logger . debug ( " Preprocessed { } response " , result . isDigestQuery ( ) ? " digest " : " data " ) ; <nl> replies . put ( message , result ) ; <nl> - return result ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / service / DatacenterReadCallback . java b / src / java / org / apache / cassandra / service / DatacenterReadCallback . java <nl> index e3d26a3 . . 7d03aa4 100644 <nl> - - - a / src / java / org / apache / cassandra / service / DatacenterReadCallback . java <nl> + + + b / src / java / org / apache / cassandra / service / DatacenterReadCallback . java <nl> @ @ - 48 , 11 + 48 , 17 @ @ public class DatacenterReadCallback < T > extends ReadCallback < T > <nl> } <nl> <nl> @ Override <nl> - protected boolean waitingFor ( ReadResponse response , InetAddress from ) <nl> + protected boolean waitingFor ( Message message ) <nl> + { <nl> + return localdc . equals ( snitch . getDatacenter ( message . getFrom ( ) ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected boolean waitingFor ( ReadResponse response ) <nl> { <nl> / / cheat and leverage our knowledge that a local read is the only way the ReadResponse <nl> / / version of this method gets called <nl> - return localdc . equals ( snitch . getDatacenter ( from ) ) ; <nl> + return true ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / service / IResponseResolver . java b / src / java / org / apache / cassandra / service / IResponseResolver . java <nl> index 0dce952 . . f4f972a 100644 <nl> - - - a / src / java / org / apache / cassandra / service / IResponseResolver . java <nl> + + + b / src / java / org / apache / cassandra / service / IResponseResolver . java <nl> @ @ - 20 , 7 + 20 , 6 @ @ package org . apache . cassandra . service ; <nl> <nl> import java . io . IOException ; <nl> <nl> - import org . apache . cassandra . db . ReadResponse ; <nl> import org . apache . cassandra . net . Message ; <nl> <nl> public interface IResponseResolver < T > { <nl> @ @ - 42 , 6 + 41 , 6 @ @ public interface IResponseResolver < T > { <nl> * / <nl> public T getData ( ) throws IOException ; <nl> <nl> - public ReadResponse preprocess ( Message message ) ; <nl> + public void preprocess ( Message message ) ; <nl> public Iterable < Message > getMessages ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java b / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java <nl> index c3ad66a . . 6077e38 100644 <nl> - - - a / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java <nl> + + + b / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java <nl> @ @ - 24 , 11 + 24 , 16 @ @ import java . util . * ; <nl> import java . util . concurrent . LinkedBlockingQueue ; <nl> <nl> import com . google . common . collect . AbstractIterator ; <nl> + import com . google . common . collect . Iterables ; <nl> + import com . google . common . collect . Iterators ; <nl> import org . apache . commons . collections . iterators . CollatingIterator ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import org . apache . cassandra . db . * ; <nl> + import org . apache . cassandra . db . ColumnFamily ; <nl> + import org . apache . cassandra . db . DecoratedKey ; <nl> + import org . apache . cassandra . db . RangeSliceReply ; <nl> + import org . apache . cassandra . db . Row ; <nl> import org . apache . cassandra . net . Message ; <nl> import org . apache . cassandra . utils . Pair ; <nl> import org . apache . cassandra . utils . ReducingIterator ; <nl> @ @ - 109 , 7 + 114 , 7 @ @ public class RangeSliceResponseResolver implements IResponseResolver < Iterable < Ro <nl> } ; <nl> } <nl> <nl> - public ReadResponse preprocess ( Message message ) <nl> + public void preprocess ( Message message ) <nl> { <nl> responses . add ( message ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / ReadCallback . java b / src / java / org / apache / cassandra / service / ReadCallback . java <nl> index 33d2218 . . 74c3905 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ReadCallback . java <nl> + + + b / src / java / org / apache / cassandra / service / ReadCallback . java <nl> @ @ - 42 , 7 + 42 , 6 @ @ import org . apache . cassandra . net . Message ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . thrift . ConsistencyLevel ; <nl> import org . apache . cassandra . thrift . UnavailableException ; <nl> - import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . SimpleCondition ; <nl> import org . apache . cassandra . utils . WrappedRunnable ; <nl> <nl> @ @ - 126 , 13 + 125 , 10 @ @ public class ReadCallback < T > implements IAsyncCallback <nl> <nl> public void response ( Message message ) <nl> { <nl> - ReadResponse result = resolver . preprocess ( message ) ; <nl> - int n = waitingFor ( result , message . getFrom ( ) ) <nl> + resolver . preprocess ( message ) ; <nl> + int n = waitingFor ( message ) <nl> ? received . incrementAndGet ( ) <nl> : received . get ( ) ; <nl> - if ( logger . isDebugEnabled ( ) ) <nl> - logger . debug ( " { } response ; { } qualifying responses seen . Data is { } present " , <nl> - new Object [ ] { result . isDigestQuery ( ) ? " digest " : " data " , n , resolver . isDataPresent ( ) ? " " : " not " } ) ; <nl> if ( n > = blockfor & & resolver . isDataPresent ( ) ) <nl> { <nl> condition . signal ( ) ; <nl> @ @ - 141 , 9 + 137 , 18 @ @ public class ReadCallback < T > implements IAsyncCallback <nl> } <nl> <nl> / * * <nl> + * @ return true if the message counts towards the blockfor threshold <nl> + * TODO turn the Message into a response so we don ' t need two versions of this method <nl> + * / <nl> + protected boolean waitingFor ( Message message ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + / * * <nl> * @ return true if the response counts towards the blockfor threshold <nl> * / <nl> - protected boolean waitingFor ( ReadResponse response , InetAddress from ) <nl> + protected boolean waitingFor ( ReadResponse response ) <nl> { <nl> return true ; <nl> } <nl> @ @ - 151 , 9 + 156 , 7 @ @ public class ReadCallback < T > implements IAsyncCallback <nl> public void response ( ReadResponse result ) <nl> { <nl> ( ( RowDigestResolver ) resolver ) . injectPreProcessed ( result ) ; <nl> - if ( logger . isDebugEnabled ( ) ) <nl> - logger . debug ( " Preprocessed { } response " , result . isDigestQuery ( ) ? " digest " : " data " ) ; <nl> - int n = waitingFor ( result , FBUtilities . getLocalAddress ( ) ) <nl> + int n = waitingFor ( result ) <nl> ? received . incrementAndGet ( ) <nl> : received . get ( ) ; <nl> if ( n > = blockfor & & resolver . isDataPresent ( ) )

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / marshal / TimeTypeTest . java b / test / unit / org / apache / cassandra / db / marshal / TimeTypeTest . java 
 index 3057b9c . . 699c805 100644 
 - - - a / test / unit / org / apache / cassandra / db / marshal / TimeTypeTest . java 
 + + + b / test / unit / org / apache / cassandra / db / marshal / TimeTypeTest . java 
 @ @ - 48 , 14 + 48 , 14 @ @ public class TimeTypeTest 
 
 b1 = TimeSerializer . instance . serialize ( 0L ) ; 
 b2 = TimeSerializer . instance . serialize ( 10000000L ) ; 
 - assert TimeType . instance . compare ( b1 , b2 ) = = - 1 : " Failed < comparison on 0 " ; 
 + assert TimeType . instance . compare ( b1 , b2 ) < 0 : " Failed < comparison on 0 " ; 
 
 b1 = TimeSerializer . instance . serialize ( 0L ) ; 
 b2 = TimeSerializer . instance . serialize ( TimeUnit . DAYS . toNanos ( 1 ) ) ; 
 - assert TimeType . instance . compare ( b1 , b2 ) = = - 1 : " Failed < comparison against max range . " ; 
 + assert TimeType . instance . compare ( b1 , b2 ) < 0 : " Failed < comparison against max range . " ; 
 
 b1 = TimeSerializer . instance . serialize ( TimeUnit . DAYS . toNanos ( 1 ) ) ; 
 b2 = TimeSerializer . instance . serialize ( 0L ) ; 
 - assert TimeType . instance . compare ( b1 , b2 ) = = 1 : " Failed > comparison against max range . " ; 
 + assert TimeType . instance . compare ( b1 , b2 ) > 0 : " Failed > comparison against max range . " ; 
 } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 38df16d . . d78028e 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 25 , 6 + 25 , 8 @ @ 
 * initialize local ep state prior to gossip startup if needed ( CASSANDRA - 2638 ) 
 * fix counter increment lost after restart ( CASSANDRA - 2642 ) 
 * add quote - escaping via backslash to CLI ( CASSANDRA - 2623 ) 
 + * fig pig example script ( CASSANDRA - 2487 ) 
 + * fix dynamic snitch race in adding latencies ( CASSANDRA - 2618 ) 
 
 
 0 . 8 . 0 - beta2 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index 4f7bcff . . 0b2c57e 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 62 , 6 + 62 , 15 @ @ JMX 
 - By default , JMX now listens on port 7199 . 
 
 
 + 0 . 7 . 6 
 + = = = = = 
 + 
 + Upgrading 
 + - - - - - - - - - 
 + - Nothing specific to 0 . 7 . 6 , but see 0 . 7 . 3 Upgrading if upgrading 
 + from earlier than 0 . 7 . 1 . 
 + 
 + 
 0 . 7 . 5 
 = = = = = 
 
 diff - - git a / debian / init b / debian / init 
 index 709bb6a . . ef3430c 100644 
 - - - a / debian / init 
 + + + b / debian / init 
 @ @ - 1 , 8 + 1 , 10 @ @ 
 # ! / bin / sh 
 # # # BEGIN INIT INFO 
 # Provides : cassandra 
 - # Required - Start : $ remote _ fs 
 - # Required - Stop : $ remote _ fs 
 + # Required - Start : $ remote _ fs $ network $ named $ time 
 + # Required - Stop : $ remote _ fs $ network $ named $ time 
 + # Should - Start : ntp mdadm 
 + # Should - Stop : ntp mdadm 
 # Default - Start : 2 3 4 5 
 # Default - Stop : 0 1 6 
 # Short - Description : distributed storage system for structured data 
 diff - - git a / debian / rules b / debian / rules 
 index 4bab97e . . f4ab5f4 100755 
 - - - a / debian / rules 
 + + + b / debian / rules 
 @ @ - 51 , 7 + 51 , 7 @ @ binary - indep : build install 
 	 dh _ testdir 
 	 dh _ testroot 
 	 dh _ installchangelogs 
 - 	 dh _ installinit 
 + 	 dh _ installinit - u ' start 50 2 3 4 5 . stop 50 0 1 6 ' 
 	 dh _ installdocs README . txt CHANGES . txt NEWS . txt 
 	 dh _ compress 
 	 dh _ fixperms 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index bb20177 . . 7eb1ffb 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 280 , 7 + 280 , 6 @ @ public final class MessagingService implements MessagingServiceMBean 
 public String sendRR ( Message message , InetAddress to , IMessageCallback cb ) 
 { 
 String id = nextId ( ) ; 
 - logger _ . debug ( " Message id to { } is { } " , to , id ) ; 
 addCallback ( cb , id , to ) ; 
 sendOneWay ( message , id , to ) ; 
 return id ; 
 @ @ - 288 , 9 + 287 , 7 @ @ public final class MessagingService implements MessagingServiceMBean 
 
 public void sendOneWay ( Message message , InetAddress to ) 
 { 
 - String id = nextId ( ) ; 
 - logger _ . debug ( " Message id to { } is { } " , to , id ) ; 
 - sendOneWay ( message , id , to ) ; 
 + sendOneWay ( message , nextId ( ) , to ) ; 
 } 
 
 public void sendReply ( Message message , String id , InetAddress to ) 
 diff - - git a / src / java / org / apache / cassandra / service / AbstractRowResolver . java b / src / java / org / apache / cassandra / service / AbstractRowResolver . java 
 index 9e9f9d1 . . 18d44e4 100644 
 - - - a / src / java / org / apache / cassandra / service / AbstractRowResolver . java 
 + + + b / src / java / org / apache / cassandra / service / AbstractRowResolver . java 
 @ @ - 55 , 15 + 55 , 16 @ @ public abstract class AbstractRowResolver implements IResponseResolver < Row > 
 this . table = table ; 
 } 
 
 - public ReadResponse preprocess ( Message message ) 
 + public void preprocess ( Message message ) 
 { 
 byte [ ] body = message . getMessageBody ( ) ; 
 ByteArrayInputStream bufIn = new ByteArrayInputStream ( body ) ; 
 try 
 { 
 ReadResponse result = ReadResponse . serializer ( ) . deserialize ( new DataInputStream ( bufIn ) , message . getVersion ( ) ) ; 
 + if ( logger . isDebugEnabled ( ) ) 
 + logger . debug ( " Preprocessed { } response " , result . isDigestQuery ( ) ? " digest " : " data " ) ; 
 replies . put ( message , result ) ; 
 - return result ; 
 } 
 catch ( IOException e ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / service / DatacenterReadCallback . java b / src / java / org / apache / cassandra / service / DatacenterReadCallback . java 
 index e3d26a3 . . 7d03aa4 100644 
 - - - a / src / java / org / apache / cassandra / service / DatacenterReadCallback . java 
 + + + b / src / java / org / apache / cassandra / service / DatacenterReadCallback . java 
 @ @ - 48 , 11 + 48 , 17 @ @ public class DatacenterReadCallback < T > extends ReadCallback < T > 
 } 
 
 @ Override 
 - protected boolean waitingFor ( ReadResponse response , InetAddress from ) 
 + protected boolean waitingFor ( Message message ) 
 + { 
 + return localdc . equals ( snitch . getDatacenter ( message . getFrom ( ) ) ) ; 
 + } 
 + 
 + @ Override 
 + protected boolean waitingFor ( ReadResponse response ) 
 { 
 / / cheat and leverage our knowledge that a local read is the only way the ReadResponse 
 / / version of this method gets called 
 - return localdc . equals ( snitch . getDatacenter ( from ) ) ; 
 + return true ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / service / IResponseResolver . java b / src / java / org / apache / cassandra / service / IResponseResolver . java 
 index 0dce952 . . f4f972a 100644 
 - - - a / src / java / org / apache / cassandra / service / IResponseResolver . java 
 + + + b / src / java / org / apache / cassandra / service / IResponseResolver . java 
 @ @ - 20 , 7 + 20 , 6 @ @ package org . apache . cassandra . service ; 
 
 import java . io . IOException ; 
 
 - import org . apache . cassandra . db . ReadResponse ; 
 import org . apache . cassandra . net . Message ; 
 
 public interface IResponseResolver < T > { 
 @ @ - 42 , 6 + 41 , 6 @ @ public interface IResponseResolver < T > { 
 * / 
 public T getData ( ) throws IOException ; 
 
 - public ReadResponse preprocess ( Message message ) ; 
 + public void preprocess ( Message message ) ; 
 public Iterable < Message > getMessages ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java b / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java 
 index c3ad66a . . 6077e38 100644 
 - - - a / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java 
 + + + b / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java 
 @ @ - 24 , 11 + 24 , 16 @ @ import java . util . * ; 
 import java . util . concurrent . LinkedBlockingQueue ; 
 
 import com . google . common . collect . AbstractIterator ; 
 + import com . google . common . collect . Iterables ; 
 + import com . google . common . collect . Iterators ; 
 import org . apache . commons . collections . iterators . CollatingIterator ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import org . apache . cassandra . db . * ; 
 + import org . apache . cassandra . db . ColumnFamily ; 
 + import org . apache . cassandra . db . DecoratedKey ; 
 + import org . apache . cassandra . db . RangeSliceReply ; 
 + import org . apache . cassandra . db . Row ; 
 import org . apache . cassandra . net . Message ; 
 import org . apache . cassandra . utils . Pair ; 
 import org . apache . cassandra . utils . ReducingIterator ; 
 @ @ - 109 , 7 + 114 , 7 @ @ public class RangeSliceResponseResolver implements IResponseResolver < Iterable < Ro 
 } ; 
 } 
 
 - public ReadResponse preprocess ( Message message ) 
 + public void preprocess ( Message message ) 
 { 
 responses . add ( message ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / ReadCallback . java b / src / java / org / apache / cassandra / service / ReadCallback . java 
 index 33d2218 . . 74c3905 100644 
 - - - a / src / java / org / apache / cassandra / service / ReadCallback . java 
 + + + b / src / java / org / apache / cassandra / service / ReadCallback . java 
 @ @ - 42 , 7 + 42 , 6 @ @ import org . apache . cassandra . net . Message ; 
 import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . thrift . ConsistencyLevel ; 
 import org . apache . cassandra . thrift . UnavailableException ; 
 - import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . SimpleCondition ; 
 import org . apache . cassandra . utils . WrappedRunnable ; 
 
 @ @ - 126 , 13 + 125 , 10 @ @ public class ReadCallback < T > implements IAsyncCallback 
 
 public void response ( Message message ) 
 { 
 - ReadResponse result = resolver . preprocess ( message ) ; 
 - int n = waitingFor ( result , message . getFrom ( ) ) 
 + resolver . preprocess ( message ) ; 
 + int n = waitingFor ( message ) 
 ? received . incrementAndGet ( ) 
 : received . get ( ) ; 
 - if ( logger . isDebugEnabled ( ) ) 
 - logger . debug ( " { } response ; { } qualifying responses seen . Data is { } present " , 
 - new Object [ ] { result . isDigestQuery ( ) ? " digest " : " data " , n , resolver . isDataPresent ( ) ? " " : " not " } ) ; 
 if ( n > = blockfor & & resolver . isDataPresent ( ) ) 
 { 
 condition . signal ( ) ; 
 @ @ - 141 , 9 + 137 , 18 @ @ public class ReadCallback < T > implements IAsyncCallback 
 } 
 
 / * * 
 + * @ return true if the message counts towards the blockfor threshold 
 + * TODO turn the Message into a response so we don ' t need two versions of this method 
 + * / 
 + protected boolean waitingFor ( Message message ) 
 + { 
 + return true ; 
 + } 
 + 
 + / * * 
 * @ return true if the response counts towards the blockfor threshold 
 * / 
 - protected boolean waitingFor ( ReadResponse response , InetAddress from ) 
 + protected boolean waitingFor ( ReadResponse response ) 
 { 
 return true ; 
 } 
 @ @ - 151 , 9 + 156 , 7 @ @ public class ReadCallback < T > implements IAsyncCallback 
 public void response ( ReadResponse result ) 
 { 
 ( ( RowDigestResolver ) resolver ) . injectPreProcessed ( result ) ; 
 - if ( logger . isDebugEnabled ( ) ) 
 - logger . debug ( " Preprocessed { } response " , result . isDigestQuery ( ) ? " digest " : " data " ) ; 
 - int n = waitingFor ( result , FBUtilities . getLocalAddress ( ) ) 
 + int n = waitingFor ( result ) 
 ? received . incrementAndGet ( ) 
 : received . get ( ) ; 
 if ( n > = blockfor & & resolver . isDataPresent ( ) )
