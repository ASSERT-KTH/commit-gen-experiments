BLEU SCORE: 0.0208362582256928

TEST MSG: Add paranoid disk failure option .
GENERATED MSG: reduce window where dropped CF sstables may not be deleted

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 040af7c . . 86d4e6f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 14 , 6 + 14 , 7 @ @ <nl> * Correctly compare BooleanType values other than 0 and 1 ( CASSANDRA - 6779 ) <nl> * Read message id as string from earlier versions ( CASSANDRA - 6840 ) <nl> * Properly use the Paxos consistency for ( non - protocol ) batch ( CASSANDRA - 6837 ) <nl> + * Add paranoid disk failure option ( CASSANDRA - 6646 ) <nl> Merged from 1 . 2 : <nl> * add extra SSL cipher suites ( CASSANDRA - 6613 ) <nl> * fix nodetool getsstables for blob PK ( CASSANDRA - 6803 ) <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index dc71c0f . . d3c91ef 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 111 , 6 + 111 , 7 @ @ data _ file _ directories : <nl> commitlog _ directory : / var / lib / cassandra / commitlog <nl> <nl> # policy for data disk failures : <nl> + # stop _ paranoid : shut down gossip and Thrift even for single - sstable errors . <nl> # stop : shut down gossip and Thrift , leaving the node effectively dead , but <nl> # can still be inspected via JMX . <nl> # best _ effort : stop using the failed disk and respond to requests based on <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index e8e43e2 . . 5317fb8 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 275 , 6 + 275 , 7 @ @ public class Config <nl> best _ effort , <nl> stop , <nl> ignore , <nl> + stop _ paranoid , <nl> } <nl> <nl> public static enum CommitFailurePolicy <nl> diff - - git a / src / java / org / apache / cassandra / io / util / FileUtils . java b / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> index e091465 . . a12745c 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> + + + b / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> @ @ - 38 , 6 + 38 , 7 @ @ import org . apache . cassandra . db . Keyspace ; <nl> import org . apache . cassandra . io . FSError ; <nl> import org . apache . cassandra . io . FSReadError ; <nl> import org . apache . cassandra . io . FSWriteError ; <nl> + import org . apache . cassandra . io . sstable . CorruptSSTableException ; <nl> import org . apache . cassandra . service . StorageService ; <nl> <nl> public class FileUtils <nl> @ @ - 407 , 11 + 408 , 18 @ @ public class FileUtils <nl> n + = skipped ; <nl> } <nl> } <nl> + <nl> + public static void handleCorruptSSTable ( CorruptSSTableException e ) <nl> + { <nl> + if ( DatabaseDescriptor . getDiskFailurePolicy ( ) = = Config . DiskFailurePolicy . stop _ paranoid ) <nl> + StorageService . instance . stopTransports ( ) ; <nl> + } <nl> <nl> public static void handleFSError ( FSError e ) <nl> { <nl> switch ( DatabaseDescriptor . getDiskFailurePolicy ( ) ) <nl> { <nl> + case stop _ paranoid : <nl> case stop : <nl> StorageService . instance . stopTransports ( ) ; <nl> break ; <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index d8c56f1 . . 0970776 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 36 , 6 + 36 , 8 @ @ import com . addthis . metrics . reporter . config . ReporterConfig ; <nl> <nl> import com . google . common . collect . Iterables ; <nl> import com . google . common . util . concurrent . Uninterruptibles ; <nl> + <nl> + import org . apache . cassandra . io . sstable . CorruptSSTableException ; <nl> import org . apache . log4j . PropertyConfigurator ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 207 , 6 + 209 , 13 @ @ public class CassandraDaemon <nl> logger . error ( " Exception in thread " + t , e2 ) ; <nl> FileUtils . handleFSError ( ( FSError ) e2 ) ; <nl> } <nl> + <nl> + if ( e2 instanceof CorruptSSTableException ) <nl> + { <nl> + if ( e2 ! = e ) <nl> + logger . error ( " Exception in thread " + t , e2 ) ; <nl> + FileUtils . handleCorruptSSTable ( ( CorruptSSTableException ) e2 ) ; <nl> + } <nl> } <nl> } <nl> } ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index cf4cff7 . . 4eb0642 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 38 , 6 + 38 , 8 @ @ <nl> * fix parsing of the Keyspace and ColumnFamily names in numeric <nl> and string representations in CLI ( CASSANDRA - 3075 ) <nl> * always hint counters ( CASSANDRA - 3099 ) <nl> + * fix log4j initialization in EmbeddedCassandraService ( CASSANDRA - 2857 ) <nl> + <nl> <nl> 0 . 8 . 4 <nl> * include files - to - be - streamed in StreamInSession . getSources ( CASSANDRA - 2972 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java b / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java <nl> index 203ecc8 . . ea2391d 100644 <nl> - - - a / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java <nl> @ @ - 62 , 17 + 62 , 19 @ @ import org . apache . cassandra . utils . Mx4jTool ; <nl> * / <nl> public abstract class AbstractCassandraDaemon implements CassandraDaemon <nl> { <nl> - / / Initialize logging in such a way that it checks for config changes every 10 seconds . <nl> - static <nl> + / * * <nl> + * Initialize logging in such a way that it checks for config changes every 10 seconds . <nl> + * / <nl> + public static void initLog4j ( ) <nl> { <nl> String config = System . getProperty ( " log4j . configuration " , " log4j - server . properties " ) ; <nl> URL configLocation = null ; <nl> - try <nl> + try <nl> { <nl> / / try loading from a physical location first . <nl> configLocation = new URL ( config ) ; <nl> } <nl> - catch ( MalformedURLException ex ) <nl> + catch ( MalformedURLException ex ) <nl> { <nl> / / then try loading from the classpath . <nl> configLocation = AbstractCassandraDaemon . class . getClassLoader ( ) . getResource ( config ) ; <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java <nl> index 8738470 . . 6d7d818 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . LinkedBlockingQueue ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> + import org . apache . cassandra . service . AbstractCassandraDaemon ; <nl> import org . apache . thrift . server . TNonblockingServer ; <nl> import org . apache . thrift . server . TThreadPoolServer ; <nl> import org . slf4j . Logger ; <nl> @ @ - 53 , 6 + 54 , 11 @ @ import org . apache . thrift . transport . TTransportFactory ; <nl> <nl> public class CassandraDaemon extends org . apache . cassandra . service . AbstractCassandraDaemon <nl> { <nl> + static <nl> + { <nl> + AbstractCassandraDaemon . initLog4j ( ) ; <nl> + } <nl> + <nl> private static Logger logger = LoggerFactory . getLogger ( CassandraDaemon . class ) ; <nl> private final static String SYNC = " sync " ; <nl> private final static String ASYNC = " async " ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 040af7c . . 86d4e6f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 14 , 6 + 14 , 7 @ @ 
 * Correctly compare BooleanType values other than 0 and 1 ( CASSANDRA - 6779 ) 
 * Read message id as string from earlier versions ( CASSANDRA - 6840 ) 
 * Properly use the Paxos consistency for ( non - protocol ) batch ( CASSANDRA - 6837 ) 
 + * Add paranoid disk failure option ( CASSANDRA - 6646 ) 
 Merged from 1 . 2 : 
 * add extra SSL cipher suites ( CASSANDRA - 6613 ) 
 * fix nodetool getsstables for blob PK ( CASSANDRA - 6803 ) 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index dc71c0f . . d3c91ef 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 111 , 6 + 111 , 7 @ @ data _ file _ directories : 
 commitlog _ directory : / var / lib / cassandra / commitlog 
 
 # policy for data disk failures : 
 + # stop _ paranoid : shut down gossip and Thrift even for single - sstable errors . 
 # stop : shut down gossip and Thrift , leaving the node effectively dead , but 
 # can still be inspected via JMX . 
 # best _ effort : stop using the failed disk and respond to requests based on 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index e8e43e2 . . 5317fb8 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 275 , 6 + 275 , 7 @ @ public class Config 
 best _ effort , 
 stop , 
 ignore , 
 + stop _ paranoid , 
 } 
 
 public static enum CommitFailurePolicy 
 diff - - git a / src / java / org / apache / cassandra / io / util / FileUtils . java b / src / java / org / apache / cassandra / io / util / FileUtils . java 
 index e091465 . . a12745c 100644 
 - - - a / src / java / org / apache / cassandra / io / util / FileUtils . java 
 + + + b / src / java / org / apache / cassandra / io / util / FileUtils . java 
 @ @ - 38 , 6 + 38 , 7 @ @ import org . apache . cassandra . db . Keyspace ; 
 import org . apache . cassandra . io . FSError ; 
 import org . apache . cassandra . io . FSReadError ; 
 import org . apache . cassandra . io . FSWriteError ; 
 + import org . apache . cassandra . io . sstable . CorruptSSTableException ; 
 import org . apache . cassandra . service . StorageService ; 
 
 public class FileUtils 
 @ @ - 407 , 11 + 408 , 18 @ @ public class FileUtils 
 n + = skipped ; 
 } 
 } 
 + 
 + public static void handleCorruptSSTable ( CorruptSSTableException e ) 
 + { 
 + if ( DatabaseDescriptor . getDiskFailurePolicy ( ) = = Config . DiskFailurePolicy . stop _ paranoid ) 
 + StorageService . instance . stopTransports ( ) ; 
 + } 
 
 public static void handleFSError ( FSError e ) 
 { 
 switch ( DatabaseDescriptor . getDiskFailurePolicy ( ) ) 
 { 
 + case stop _ paranoid : 
 case stop : 
 StorageService . instance . stopTransports ( ) ; 
 break ; 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index d8c56f1 . . 0970776 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 36 , 6 + 36 , 8 @ @ import com . addthis . metrics . reporter . config . ReporterConfig ; 
 
 import com . google . common . collect . Iterables ; 
 import com . google . common . util . concurrent . Uninterruptibles ; 
 + 
 + import org . apache . cassandra . io . sstable . CorruptSSTableException ; 
 import org . apache . log4j . PropertyConfigurator ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 207 , 6 + 209 , 13 @ @ public class CassandraDaemon 
 logger . error ( " Exception in thread " + t , e2 ) ; 
 FileUtils . handleFSError ( ( FSError ) e2 ) ; 
 } 
 + 
 + if ( e2 instanceof CorruptSSTableException ) 
 + { 
 + if ( e2 ! = e ) 
 + logger . error ( " Exception in thread " + t , e2 ) ; 
 + FileUtils . handleCorruptSSTable ( ( CorruptSSTableException ) e2 ) ; 
 + } 
 } 
 } 
 } ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index cf4cff7 . . 4eb0642 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 38 , 6 + 38 , 8 @ @ 
 * fix parsing of the Keyspace and ColumnFamily names in numeric 
 and string representations in CLI ( CASSANDRA - 3075 ) 
 * always hint counters ( CASSANDRA - 3099 ) 
 + * fix log4j initialization in EmbeddedCassandraService ( CASSANDRA - 2857 ) 
 + 
 
 0 . 8 . 4 
 * include files - to - be - streamed in StreamInSession . getSources ( CASSANDRA - 2972 ) 
 diff - - git a / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java b / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java 
 index 203ecc8 . . ea2391d 100644 
 - - - a / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java 
 @ @ - 62 , 17 + 62 , 19 @ @ import org . apache . cassandra . utils . Mx4jTool ; 
 * / 
 public abstract class AbstractCassandraDaemon implements CassandraDaemon 
 { 
 - / / Initialize logging in such a way that it checks for config changes every 10 seconds . 
 - static 
 + / * * 
 + * Initialize logging in such a way that it checks for config changes every 10 seconds . 
 + * / 
 + public static void initLog4j ( ) 
 { 
 String config = System . getProperty ( " log4j . configuration " , " log4j - server . properties " ) ; 
 URL configLocation = null ; 
 - try 
 + try 
 { 
 / / try loading from a physical location first . 
 configLocation = new URL ( config ) ; 
 } 
 - catch ( MalformedURLException ex ) 
 + catch ( MalformedURLException ex ) 
 { 
 / / then try loading from the classpath . 
 configLocation = AbstractCassandraDaemon . class . getClassLoader ( ) . getResource ( config ) ; 
 diff - - git a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java 
 index 8738470 . . 6d7d818 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . LinkedBlockingQueue ; 
 import java . util . concurrent . TimeUnit ; 
 
 + import org . apache . cassandra . service . AbstractCassandraDaemon ; 
 import org . apache . thrift . server . TNonblockingServer ; 
 import org . apache . thrift . server . TThreadPoolServer ; 
 import org . slf4j . Logger ; 
 @ @ - 53 , 6 + 54 , 11 @ @ import org . apache . thrift . transport . TTransportFactory ; 
 
 public class CassandraDaemon extends org . apache . cassandra . service . AbstractCassandraDaemon 
 { 
 + static 
 + { 
 + AbstractCassandraDaemon . initLog4j ( ) ; 
 + } 
 + 
 private static Logger logger = LoggerFactory . getLogger ( CassandraDaemon . class ) ; 
 private final static String SYNC = " sync " ; 
 private final static String ASYNC = " async " ;
