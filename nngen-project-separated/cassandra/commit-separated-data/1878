BLEU SCORE: 0.034353182138500235

TEST MSG: Stop compactions before exiting offline tools
GENERATED MSG: Add commit _ failure _ policy .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d273350 . . fce4898 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 3 <nl> + * Stop compactions before exiting offline tools ( CASSANDRA - 8623 ) <nl> * Update tools / stress / README . txt to match current behaviour ( CASSANDRA - 7933 ) <nl> * Fix schema from Thrift conversion with empty metadata ( CASSANDRA - 8695 ) <nl> * Safer Resource Management ( CASSANDRA - 7705 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index f59938f . . 68313a3 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 50 , 6 + 50 , 7 @ @ import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Multimap ; <nl> import com . google . common . collect . Multiset ; <nl> import com . google . common . collect . Sets ; <nl> + import com . google . common . util . concurrent . Futures ; <nl> import com . google . common . util . concurrent . RateLimiter ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 178 , 9 + 179 , 13 @ @ public class CompactionManager implements CompactionManagerMBean <nl> cfs . name , <nl> cfs . getCompactionStrategy ( ) . getName ( ) ) ; <nl> List < Future < ? > > futures = new ArrayList < Future < ? > > ( ) ; <nl> - <nl> / / we must schedule it at least once , otherwise compaction will stop for a CF until next flush <nl> do { <nl> + if ( executor . isShutdown ( ) ) <nl> + { <nl> + logger . info ( " Executor has shut down , not submitting background task " ) ; <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> compactingCF . add ( cfs ) ; <nl> futures . add ( executor . submit ( new BackgroundCompactionTask ( cfs ) ) ) ; <nl> / / if we have room for more compactions , then fill up executor <nl> @ @ - 197 , 6 + 202 , 12 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return false ; <nl> } <nl> <nl> + public void finishCompactionsAndShutdown ( long timeout , TimeUnit unit ) throws InterruptedException <nl> + { <nl> + executor . shutdown ( ) ; <nl> + executor . awaitTermination ( timeout , unit ) ; <nl> + } <nl> + <nl> / / the actual sstables to compact are not determined until we run the BCT ; that way , if new sstables <nl> / / are created between task submission and execution , we execute against the most up - to - date information <nl> class BackgroundCompactionTask implements Runnable <nl> @ @ - 256 , 6 + 267 , 12 @ @ public class CompactionManager implements CompactionManagerMBean <nl> <nl> for ( final SSTableReader sstable : sstables ) <nl> { <nl> + if ( executor . isShutdown ( ) ) <nl> + { <nl> + logger . info ( " Executor has shut down , not submitting task " ) ; <nl> + return AllSSTableOpStatus . ABORTED ; <nl> + } <nl> + <nl> futures . add ( executor . submit ( new Callable < Object > ( ) <nl> { <nl> @ Override <nl> @ @ - 394 , 6 + 411 , 12 @ @ public class CompactionManager implements CompactionManagerMBean <nl> performAnticompaction ( cfs , ranges , sstables , repairedAt ) ; <nl> } <nl> } ; <nl> + if ( executor . isShutdown ( ) ) <nl> + { <nl> + logger . info ( " Compaction executor has shut down , not submitting anticompaction " ) ; <nl> + return Futures . immediateCancelledFuture ( ) ; <nl> + } <nl> + <nl> return executor . submit ( runnable ) ; <nl> } <nl> <nl> @ @ - 489 , 6 + 512 , 11 @ @ public class CompactionManager implements CompactionManagerMBean <nl> task . execute ( metrics ) ; <nl> } <nl> } ; <nl> + if ( executor . isShutdown ( ) ) <nl> + { <nl> + logger . info ( " Compaction executor has shut down , not submitting task " ) ; <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> futures . add ( executor . submit ( runnable ) ) ; <nl> } <nl> return futures ; <nl> @ @ - 554 , 6 + 582 , 12 @ @ public class CompactionManager implements CompactionManagerMBean <nl> } <nl> } <nl> } ; <nl> + if ( executor . isShutdown ( ) ) <nl> + { <nl> + logger . info ( " Compaction executor has shut down , not submitting task " ) ; <nl> + return Futures . immediateCancelledFuture ( ) ; <nl> + } <nl> + <nl> return executor . submit ( runnable ) ; <nl> } <nl> <nl> @ @ - 1090 , 6 + 1124 , 11 @ @ public class CompactionManager implements CompactionManagerMBean <nl> } <nl> } <nl> } ; <nl> + if ( executor . isShutdown ( ) ) <nl> + { <nl> + logger . info ( " Compaction executor has shut down , not submitting index build " ) ; <nl> + return null ; <nl> + } <nl> <nl> return executor . submit ( runnable ) ; <nl> } <nl> @ @ - 1123 , 6 + 1162 , 11 @ @ public class CompactionManager implements CompactionManagerMBean <nl> } <nl> } <nl> } ; <nl> + if ( executor . isShutdown ( ) ) <nl> + { <nl> + logger . info ( " Executor has shut down , not submitting background task " ) ; <nl> + Futures . immediateCancelledFuture ( ) ; <nl> + } <nl> return executor . submit ( runnable ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> index 63a3727 . . 1bc2674 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> + + + b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . tools ; <nl> <nl> import java . io . File ; <nl> import java . util . * ; <nl> + import java . util . concurrent . TimeUnit ; <nl> <nl> import com . google . common . base . Predicate ; <nl> import com . google . common . base . Predicates ; <nl> @ @ - 33 , 6 + 34 , 7 @ @ import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . Directories ; <nl> import org . apache . cassandra . db . Keyspace ; <nl> import org . apache . cassandra . db . compaction . AbstractCompactionStrategy ; <nl> + import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . db . compaction . LeveledCompactionStrategy ; <nl> import org . apache . cassandra . db . compaction . LeveledManifest ; <nl> import org . apache . cassandra . db . compaction . Scrubber ; <nl> @ @ - 131 , 7 + 133 , 7 @ @ public class StandaloneScrubber <nl> <nl> / / Check ( and repair ) manifests <nl> checkManifest ( cfs . getCompactionStrategy ( ) , cfs , sstables ) ; <nl> - <nl> + CompactionManager . instance . finishCompactionsAndShutdown ( 5 , TimeUnit . MINUTES ) ; <nl> SSTableDeletingTask . waitForDeletions ( ) ; <nl> System . exit ( 0 ) ; / / We need that to stop non daemonized threads <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / tools / StandaloneSplitter . java b / src / java / org / apache / cassandra / tools / StandaloneSplitter . java <nl> index 5ed1543 . . 242b1c0 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / StandaloneSplitter . java <nl> + + + b / src / java / org / apache / cassandra / tools / StandaloneSplitter . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package org . apache . cassandra . tools ; <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> import java . util . * ; <nl> + import java . util . concurrent . TimeUnit ; <nl> <nl> import org . apache . commons . cli . * ; <nl> <nl> @ @ - 28 , 6 + 29 , 7 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . Directories ; <nl> import org . apache . cassandra . db . Keyspace ; <nl> + import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . db . compaction . SSTableSplitter ; <nl> import org . apache . cassandra . io . sstable . * ; <nl> import org . apache . cassandra . utils . JVMStabilityInspector ; <nl> @ @ - 108 , 7 + 110 , 6 @ @ public class StandaloneSplitter <nl> / / Do not load sstables since they might be broken <nl> Keyspace keyspace = Keyspace . openWithoutSSTables ( ksName ) ; <nl> ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( cfName ) ; <nl> - <nl> String snapshotName = " pre - split - " + System . currentTimeMillis ( ) ; <nl> <nl> List < SSTableReader > sstables = new ArrayList < SSTableReader > ( ) ; <nl> @ @ - 159 , 6 + 160 , 7 @ @ public class StandaloneSplitter <nl> e . printStackTrace ( System . err ) ; <nl> } <nl> } <nl> + CompactionManager . instance . finishCompactionsAndShutdown ( 5 , TimeUnit . MINUTES ) ; <nl> SSTableDeletingTask . waitForDeletions ( ) ; <nl> System . exit ( 0 ) ; / / We need that to stop non daemonized threads <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java b / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java <nl> index 92b6445 . . 8fa5b60 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java <nl> + + + b / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . tools ; <nl> <nl> import java . io . IOException ; <nl> import java . util . * ; <nl> + import java . util . concurrent . TimeUnit ; <nl> <nl> import org . apache . commons . cli . * ; <nl> <nl> @ @ - 27 , 6 + 28 , 7 @ @ import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . Directories ; <nl> import org . apache . cassandra . db . Keyspace ; <nl> + import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . db . compaction . Upgrader ; <nl> import org . apache . cassandra . io . sstable . * ; <nl> import org . apache . cassandra . utils . JVMStabilityInspector ; <nl> @ @ - 107 , 7 + 109 , 7 @ @ public class StandaloneUpgrader <nl> e . printStackTrace ( System . err ) ; <nl> } <nl> } <nl> - <nl> + CompactionManager . instance . finishCompactionsAndShutdown ( 5 , TimeUnit . MINUTES ) ; <nl> SSTableDeletingTask . waitForDeletions ( ) ; <nl> System . exit ( 0 ) ; <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d273350 . . fce4898 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 3 
 + * Stop compactions before exiting offline tools ( CASSANDRA - 8623 ) 
 * Update tools / stress / README . txt to match current behaviour ( CASSANDRA - 7933 ) 
 * Fix schema from Thrift conversion with empty metadata ( CASSANDRA - 8695 ) 
 * Safer Resource Management ( CASSANDRA - 7705 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index f59938f . . 68313a3 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 50 , 6 + 50 , 7 @ @ import com . google . common . collect . Lists ; 
 import com . google . common . collect . Multimap ; 
 import com . google . common . collect . Multiset ; 
 import com . google . common . collect . Sets ; 
 + import com . google . common . util . concurrent . Futures ; 
 import com . google . common . util . concurrent . RateLimiter ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 178 , 9 + 179 , 13 @ @ public class CompactionManager implements CompactionManagerMBean 
 cfs . name , 
 cfs . getCompactionStrategy ( ) . getName ( ) ) ; 
 List < Future < ? > > futures = new ArrayList < Future < ? > > ( ) ; 
 - 
 / / we must schedule it at least once , otherwise compaction will stop for a CF until next flush 
 do { 
 + if ( executor . isShutdown ( ) ) 
 + { 
 + logger . info ( " Executor has shut down , not submitting background task " ) ; 
 + return Collections . emptyList ( ) ; 
 + } 
 compactingCF . add ( cfs ) ; 
 futures . add ( executor . submit ( new BackgroundCompactionTask ( cfs ) ) ) ; 
 / / if we have room for more compactions , then fill up executor 
 @ @ - 197 , 6 + 202 , 12 @ @ public class CompactionManager implements CompactionManagerMBean 
 return false ; 
 } 
 
 + public void finishCompactionsAndShutdown ( long timeout , TimeUnit unit ) throws InterruptedException 
 + { 
 + executor . shutdown ( ) ; 
 + executor . awaitTermination ( timeout , unit ) ; 
 + } 
 + 
 / / the actual sstables to compact are not determined until we run the BCT ; that way , if new sstables 
 / / are created between task submission and execution , we execute against the most up - to - date information 
 class BackgroundCompactionTask implements Runnable 
 @ @ - 256 , 6 + 267 , 12 @ @ public class CompactionManager implements CompactionManagerMBean 
 
 for ( final SSTableReader sstable : sstables ) 
 { 
 + if ( executor . isShutdown ( ) ) 
 + { 
 + logger . info ( " Executor has shut down , not submitting task " ) ; 
 + return AllSSTableOpStatus . ABORTED ; 
 + } 
 + 
 futures . add ( executor . submit ( new Callable < Object > ( ) 
 { 
 @ Override 
 @ @ - 394 , 6 + 411 , 12 @ @ public class CompactionManager implements CompactionManagerMBean 
 performAnticompaction ( cfs , ranges , sstables , repairedAt ) ; 
 } 
 } ; 
 + if ( executor . isShutdown ( ) ) 
 + { 
 + logger . info ( " Compaction executor has shut down , not submitting anticompaction " ) ; 
 + return Futures . immediateCancelledFuture ( ) ; 
 + } 
 + 
 return executor . submit ( runnable ) ; 
 } 
 
 @ @ - 489 , 6 + 512 , 11 @ @ public class CompactionManager implements CompactionManagerMBean 
 task . execute ( metrics ) ; 
 } 
 } ; 
 + if ( executor . isShutdown ( ) ) 
 + { 
 + logger . info ( " Compaction executor has shut down , not submitting task " ) ; 
 + return Collections . emptyList ( ) ; 
 + } 
 futures . add ( executor . submit ( runnable ) ) ; 
 } 
 return futures ; 
 @ @ - 554 , 6 + 582 , 12 @ @ public class CompactionManager implements CompactionManagerMBean 
 } 
 } 
 } ; 
 + if ( executor . isShutdown ( ) ) 
 + { 
 + logger . info ( " Compaction executor has shut down , not submitting task " ) ; 
 + return Futures . immediateCancelledFuture ( ) ; 
 + } 
 + 
 return executor . submit ( runnable ) ; 
 } 
 
 @ @ - 1090 , 6 + 1124 , 11 @ @ public class CompactionManager implements CompactionManagerMBean 
 } 
 } 
 } ; 
 + if ( executor . isShutdown ( ) ) 
 + { 
 + logger . info ( " Compaction executor has shut down , not submitting index build " ) ; 
 + return null ; 
 + } 
 
 return executor . submit ( runnable ) ; 
 } 
 @ @ - 1123 , 6 + 1162 , 11 @ @ public class CompactionManager implements CompactionManagerMBean 
 } 
 } 
 } ; 
 + if ( executor . isShutdown ( ) ) 
 + { 
 + logger . info ( " Executor has shut down , not submitting background task " ) ; 
 + Futures . immediateCancelledFuture ( ) ; 
 + } 
 return executor . submit ( runnable ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 index 63a3727 . . 1bc2674 100644 
 - - - a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 + + + b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . tools ; 
 
 import java . io . File ; 
 import java . util . * ; 
 + import java . util . concurrent . TimeUnit ; 
 
 import com . google . common . base . Predicate ; 
 import com . google . common . base . Predicates ; 
 @ @ - 33 , 6 + 34 , 7 @ @ import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . Directories ; 
 import org . apache . cassandra . db . Keyspace ; 
 import org . apache . cassandra . db . compaction . AbstractCompactionStrategy ; 
 + import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . db . compaction . LeveledCompactionStrategy ; 
 import org . apache . cassandra . db . compaction . LeveledManifest ; 
 import org . apache . cassandra . db . compaction . Scrubber ; 
 @ @ - 131 , 7 + 133 , 7 @ @ public class StandaloneScrubber 
 
 / / Check ( and repair ) manifests 
 checkManifest ( cfs . getCompactionStrategy ( ) , cfs , sstables ) ; 
 - 
 + CompactionManager . instance . finishCompactionsAndShutdown ( 5 , TimeUnit . MINUTES ) ; 
 SSTableDeletingTask . waitForDeletions ( ) ; 
 System . exit ( 0 ) ; / / We need that to stop non daemonized threads 
 } 
 diff - - git a / src / java / org / apache / cassandra / tools / StandaloneSplitter . java b / src / java / org / apache / cassandra / tools / StandaloneSplitter . java 
 index 5ed1543 . . 242b1c0 100644 
 - - - a / src / java / org / apache / cassandra / tools / StandaloneSplitter . java 
 + + + b / src / java / org / apache / cassandra / tools / StandaloneSplitter . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package org . apache . cassandra . tools ; 
 import java . io . File ; 
 import java . io . IOException ; 
 import java . util . * ; 
 + import java . util . concurrent . TimeUnit ; 
 
 import org . apache . commons . cli . * ; 
 
 @ @ - 28 , 6 + 29 , 7 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . Directories ; 
 import org . apache . cassandra . db . Keyspace ; 
 + import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . db . compaction . SSTableSplitter ; 
 import org . apache . cassandra . io . sstable . * ; 
 import org . apache . cassandra . utils . JVMStabilityInspector ; 
 @ @ - 108 , 7 + 110 , 6 @ @ public class StandaloneSplitter 
 / / Do not load sstables since they might be broken 
 Keyspace keyspace = Keyspace . openWithoutSSTables ( ksName ) ; 
 ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( cfName ) ; 
 - 
 String snapshotName = " pre - split - " + System . currentTimeMillis ( ) ; 
 
 List < SSTableReader > sstables = new ArrayList < SSTableReader > ( ) ; 
 @ @ - 159 , 6 + 160 , 7 @ @ public class StandaloneSplitter 
 e . printStackTrace ( System . err ) ; 
 } 
 } 
 + CompactionManager . instance . finishCompactionsAndShutdown ( 5 , TimeUnit . MINUTES ) ; 
 SSTableDeletingTask . waitForDeletions ( ) ; 
 System . exit ( 0 ) ; / / We need that to stop non daemonized threads 
 } 
 diff - - git a / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java b / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java 
 index 92b6445 . . 8fa5b60 100644 
 - - - a / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java 
 + + + b / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java 
 @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . tools ; 
 
 import java . io . IOException ; 
 import java . util . * ; 
 + import java . util . concurrent . TimeUnit ; 
 
 import org . apache . commons . cli . * ; 
 
 @ @ - 27 , 6 + 28 , 7 @ @ import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . Directories ; 
 import org . apache . cassandra . db . Keyspace ; 
 + import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . db . compaction . Upgrader ; 
 import org . apache . cassandra . io . sstable . * ; 
 import org . apache . cassandra . utils . JVMStabilityInspector ; 
 @ @ - 107 , 7 + 109 , 7 @ @ public class StandaloneUpgrader 
 e . printStackTrace ( System . err ) ; 
 } 
 } 
 - 
 + CompactionManager . instance . finishCompactionsAndShutdown ( 5 , TimeUnit . MINUTES ) ; 
 SSTableDeletingTask . waitForDeletions ( ) ; 
 System . exit ( 0 ) ; 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
