BLEU SCORE: 0.02383853510228548

TEST MSG: Move all hints related tasks to hints internal executor
GENERATED MSG: revert # 2061

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 516b4a2 . . 1ad2de5 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 12 : <nl> + * Move all hints related tasks to hints internal executor ( CASSANDRA - 8285 ) <nl> * Fix paging for multi - partition IN queries ( CASSANDRA - 8408 ) <nl> * Fix MOVED _ NODE topology event never being emitted when a node <nl> moves its token ( CASSANDRA - 8373 ) <nl> diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableScheduledThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableScheduledThreadPoolExecutor . java <nl> index a41df54 . . 1699c0f 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / DebuggableScheduledThreadPoolExecutor . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / DebuggableScheduledThreadPoolExecutor . java <nl> @ @ - 33 , 6 + 33 , 11 @ @ public class DebuggableScheduledThreadPoolExecutor extends ScheduledThreadPoolEx <nl> super ( corePoolSize , new NamedThreadFactory ( threadPoolName , priority ) ) ; <nl> } <nl> <nl> + public DebuggableScheduledThreadPoolExecutor ( int corePoolSize , ThreadFactory threadFactory ) <nl> + { <nl> + super ( corePoolSize , threadFactory ) ; <nl> + } <nl> + <nl> public DebuggableScheduledThreadPoolExecutor ( String threadPoolName ) <nl> { <nl> this ( 1 , threadPoolName , Thread . NORM _ PRIORITY ) ; <nl> diff - - git a / src / java / org / apache / cassandra / concurrent / JMXEnabledScheduledThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / JMXEnabledScheduledThreadPoolExecutor . java <nl> new file mode 100644 <nl> index 0000000 . . 64d9267 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / concurrent / JMXEnabledScheduledThreadPoolExecutor . java <nl> @ @ - 0 , 0 + 1 , 137 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . concurrent ; <nl> + <nl> + import java . lang . management . ManagementFactory ; <nl> + import java . util . List ; <nl> + <nl> + import javax . management . MBeanServer ; <nl> + import javax . management . ObjectName ; <nl> + <nl> + import org . apache . cassandra . metrics . ThreadPoolMetrics ; <nl> + <nl> + / * * <nl> + * A JMX enabled wrapper for DebuggableScheduledThreadPoolExecutor . <nl> + * / <nl> + public class JMXEnabledScheduledThreadPoolExecutor extends DebuggableScheduledThreadPoolExecutor implements JMXEnabledScheduledThreadPoolExecutorMBean <nl> + { <nl> + private final String mbeanName ; <nl> + private final ThreadPoolMetrics metrics ; <nl> + <nl> + public JMXEnabledScheduledThreadPoolExecutor ( int corePoolSize , NamedThreadFactory threadFactory , String jmxPath ) <nl> + { <nl> + super ( corePoolSize , threadFactory ) ; <nl> + <nl> + metrics = new ThreadPoolMetrics ( this , jmxPath , threadFactory . id ) ; <nl> + <nl> + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> + mbeanName = " org . apache . cassandra . " + jmxPath + " : type = " + threadFactory . id ; <nl> + <nl> + try <nl> + { <nl> + mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + private void unregisterMBean ( ) <nl> + { <nl> + try <nl> + { <nl> + ManagementFactory . getPlatformMBeanServer ( ) . unregisterMBean ( new ObjectName ( mbeanName ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + <nl> + / / release metrics <nl> + metrics . release ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public synchronized void shutdown ( ) <nl> + { <nl> + / / synchronized , because there is no way to access super . mainLock , which would be <nl> + / / the preferred way to make this threadsafe <nl> + if ( ! isShutdown ( ) ) <nl> + unregisterMBean ( ) ; <nl> + <nl> + super . shutdown ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public synchronized List < Runnable > shutdownNow ( ) <nl> + { <nl> + / / synchronized , because there is no way to access super . mainLock , which would be <nl> + / / the preferred way to make this threadsafe <nl> + if ( ! isShutdown ( ) ) <nl> + unregisterMBean ( ) ; <nl> + <nl> + return super . shutdownNow ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Get the number of completed tasks <nl> + * / <nl> + public long getCompletedTasks ( ) <nl> + { <nl> + return getCompletedTaskCount ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Get the number of tasks waiting to be executed <nl> + * / <nl> + public long getPendingTasks ( ) <nl> + { <nl> + return getTaskCount ( ) - getCompletedTaskCount ( ) ; <nl> + } <nl> + <nl> + public int getTotalBlockedTasks ( ) <nl> + { <nl> + return ( int ) metrics . totalBlocked . count ( ) ; <nl> + } <nl> + <nl> + public int getCurrentlyBlockedTasks ( ) <nl> + { <nl> + return ( int ) metrics . currentBlocked . count ( ) ; <nl> + } <nl> + <nl> + public int getCoreThreads ( ) <nl> + { <nl> + return getCorePoolSize ( ) ; <nl> + } <nl> + <nl> + public void setCoreThreads ( int number ) <nl> + { <nl> + setCorePoolSize ( number ) ; <nl> + } <nl> + <nl> + public int getMaximumThreads ( ) <nl> + { <nl> + return getMaximumPoolSize ( ) ; <nl> + } <nl> + <nl> + public void setMaximumThreads ( int number ) <nl> + { <nl> + setMaximumPoolSize ( number ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / concurrent / JMXEnabledScheduledThreadPoolExecutorMBean . java b / src / java / org / apache / cassandra / concurrent / JMXEnabledScheduledThreadPoolExecutorMBean . java <nl> new file mode 100644 <nl> index 0000000 . . d9c45e3 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / concurrent / JMXEnabledScheduledThreadPoolExecutorMBean . java <nl> @ @ - 0 , 0 + 1 , 26 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . concurrent ; <nl> + <nl> + / * * <nl> + * @ see org . apache . cassandra . metrics . ThreadPoolMetrics <nl> + * / <nl> + @ Deprecated <nl> + public interface JMXEnabledScheduledThreadPoolExecutorMBean extends JMXEnabledThreadPoolExecutorMBean <nl> + { <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / db / HintedHandOffManager . java b / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> index 87260b2 . . c8c3845 100644 <nl> - - - a / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> + + + b / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> @ @ - 34 , 20 + 34 , 16 @ @ import com . google . common . collect . ImmutableSortedSet ; <nl> import com . google . common . collect . Lists ; <nl> import com . google . common . util . concurrent . RateLimiter ; <nl> import com . google . common . util . concurrent . Uninterruptibles ; <nl> - <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; <nl> + import org . apache . cassandra . concurrent . JMXEnabledScheduledThreadPoolExecutor ; <nl> import org . apache . cassandra . concurrent . NamedThreadFactory ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . db . filter . * ; <nl> - import org . apache . cassandra . db . marshal . AbstractType ; <nl> - import org . apache . cassandra . db . marshal . CompositeType ; <nl> - import org . apache . cassandra . db . marshal . Int32Type ; <nl> - import org . apache . cassandra . db . marshal . UUIDType ; <nl> + import org . apache . cassandra . db . marshal . * ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . dht . Token ; <nl> @ @ - 106 , 12 + 102 , 11 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean <nl> <nl> private final NonBlockingHashSet < InetAddress > queuedDeliveries = new NonBlockingHashSet < InetAddress > ( ) ; <nl> <nl> - private final ThreadPoolExecutor executor = new JMXEnabledThreadPoolExecutor ( DatabaseDescriptor . getMaxHintsThread ( ) , <nl> - Integer . MAX _ VALUE , <nl> - TimeUnit . SECONDS , <nl> - new LinkedBlockingQueue < Runnable > ( ) , <nl> - new NamedThreadFactory ( " HintedHandoff " , Thread . MIN _ PRIORITY ) , <nl> - " internal " ) ; <nl> + private final JMXEnabledScheduledThreadPoolExecutor executor = <nl> + new JMXEnabledScheduledThreadPoolExecutor ( <nl> + DatabaseDescriptor . getMaxHintsThread ( ) , <nl> + new NamedThreadFactory ( " HintedHandoff " , Thread . MIN _ PRIORITY ) , <nl> + " internal " ) ; <nl> <nl> private final ColumnFamilyStore hintStore = Keyspace . open ( Keyspace . SYSTEM _ KS ) . getColumnFamilyStore ( SystemKeyspace . HINTS _ CF ) ; <nl> <nl> @ @ - 174 , 7 + 169 , 7 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean <nl> metrics . log ( ) ; <nl> } <nl> } ; <nl> - StorageService . optionalTasks . scheduleWithFixedDelay ( runnable , 10 , 10 , TimeUnit . MINUTES ) ; <nl> + executor . scheduleWithFixedDelay ( runnable , 10 , 10 , TimeUnit . MINUTES ) ; <nl> } <nl> <nl> private static void deleteHint ( ByteBuffer tokenBytes , ByteBuffer columnName , long timestamp ) <nl> @ @ - 225 , 7 + 220 , 7 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean <nl> } <nl> } <nl> } ; <nl> - StorageService . optionalTasks . submit ( runnable ) ; <nl> + executor . submit ( runnable ) ; <nl> } <nl> <nl> / / foobar <nl> @ @ - 246 , 7 + 241 , 7 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean <nl> } <nl> } <nl> } ; <nl> - StorageService . optionalTasks . submit ( runnable ) . get ( ) ; <nl> + executor . submit ( runnable ) . get ( ) ; <nl> <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index 083c710 . . ea05b09 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 255 , 7 + 255 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener <nl> <nl> liveEndpoints _ . remove ( endpoint ) ; <nl> unreachableEndpoints _ . remove ( endpoint ) ; <nl> - endpointStateMap _ . remove ( endpoint ) ; <nl> + / / do not remove endpointState until the quarantine expires <nl> FailureDetector . instance . remove ( endpoint ) ; <nl> justRemovedEndpoints _ . put ( endpoint , System . currentTimeMillis ( ) ) ; <nl> } <nl> @ @ - 326 , 8 + 326 , 6 @ @ public class Gossiper implements IFailureDetectionEventListener <nl> ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; <nl> DataOutputStream dos = new DataOutputStream ( bos ) ; <nl> GossipDigestAckMessage . serializer ( ) . serialize ( gDigestAckMessage , dos ) ; <nl> - if ( logger _ . isTraceEnabled ( ) ) <nl> - logger _ . trace ( " @ @ @ @ Size of GossipDigestAckMessage is " + bos . toByteArray ( ) . length ) ; <nl> return new Message ( localEndpoint _ , StorageService . Verb . GOSSIP _ DIGEST _ ACK , bos . toByteArray ( ) ) ; <nl> } <nl> <nl> @ @ - 436 , 7 + 434 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener <nl> else <nl> { <nl> logger _ . info ( " FatClient " + endpoint + " has been silent for " + FatClientTimeout _ + " ms , removing from gossip " ) ; <nl> - removeEndpoint ( endpoint ) ; <nl> + if ( ! justRemovedEndpoints _ . containsKey ( endpoint ) ) / / if the node was decommissioned , it will have been removed but still appear as a fat client <nl> + removeEndpoint ( endpoint ) ; / / after quarantine justRemoveEndpoints will remove the state <nl> } <nl> } <nl> <nl> @ @ - 457 , 6 + 456 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener <nl> if ( logger _ . isDebugEnabled ( ) ) <nl> logger _ . debug ( QUARANTINE _ DELAY + " elapsed , " + entry . getKey ( ) + " gossip quarantine over " ) ; <nl> justRemovedEndpoints _ . remove ( entry . getKey ( ) ) ; <nl> + endpointStateMap _ . remove ( entry . getKey ( ) ) ; <nl> } <nl> } <nl> } <nl> @ @ - 469 , 8 + 469 , 6 @ @ public class Gossiper implements IFailureDetectionEventListener <nl> <nl> EndpointState getStateForVersionBiggerThan ( InetAddress forEndpoint , int version ) <nl> { <nl> - if ( logger _ . isTraceEnabled ( ) ) <nl> - logger _ . trace ( " Scanning for state greater than " + version + " for " + forEndpoint ) ; <nl> EndpointState epState = endpointStateMap _ . get ( forEndpoint ) ; <nl> EndpointState reqdEndpointState = null ; <nl> <nl> @ @ - 488 , 6 + 486 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener <nl> if ( localHbVersion > version ) <nl> { <nl> reqdEndpointState = new EndpointState ( epState . getHeartBeatState ( ) ) ; <nl> + if ( logger _ . isTraceEnabled ( ) ) <nl> + logger _ . trace ( " local heartbeat version " + localHbVersion + " greater than " + version + " for " + forEndpoint ) ; <nl> } <nl> / * Accumulate all application states whose versions are greater than " version " variable * / <nl> for ( Entry < ApplicationState , VersionedValue > entry : epState . getApplicationStateMap ( ) . entrySet ( ) ) <nl> @ @ - 668 , 6 + 668 , 11 @ @ public class Gossiper implements IFailureDetectionEventListener <nl> 	 applyApplicationStateLocally ( ep , localEpStatePtr , remoteState ) ; <nl> 	 } <nl> 	 } <nl> + else <nl> + { <nl> + if ( logger _ . isTraceEnabled ( ) ) <nl> + logger _ . trace ( " Ignoring remote generation " + remoteGeneration + " < " + localGeneration ) ; <nl> + } <nl> } <nl> else <nl> { <nl> @ @ - 683 , 6 + 688 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener <nl> <nl> if ( remoteHbState . getGeneration ( ) > localHbState . getGeneration ( ) ) <nl> { <nl> + if ( logger _ . isTraceEnabled ( ) ) <nl> + logger _ . trace ( " Updating heartbeat state generation to " + remoteHbState . getGeneration ( ) + " from " + localHbState . getGeneration ( ) + " for " + addr ) ; <nl> localState . setHeartBeatState ( remoteHbState ) ; <nl> } <nl> if ( localHbState . getGeneration ( ) = = remoteHbState . getGeneration ( ) ) <nl> @ @ - 694 , 6 + 701 , 11 @ @ public class Gossiper implements IFailureDetectionEventListener <nl> if ( logger _ . isTraceEnabled ( ) ) <nl> logger _ . trace ( " Updating heartbeat state version to " + localState . getHeartBeatState ( ) . getHeartBeatVersion ( ) + " from " + oldVersion + " for " + addr + " . . . " ) ; <nl> } <nl> + else <nl> + { <nl> + if ( logger _ . isTraceEnabled ( ) ) <nl> + logger _ . trace ( " Ignoring lower version " + remoteHbState . getHeartBeatVersion ( ) + " for " + addr + " which is lower than " + localHbState . getHeartBeatVersion ( ) ) ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 777 , 6 + 789 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener <nl> { <nl> / * We are here since we have no data for this endpoint locally so request everthing . * / <nl> deltaGossipDigestList . add ( new GossipDigest ( gDigest . getEndpoint ( ) , remoteGeneration , 0 ) ) ; <nl> + if ( logger _ . isTraceEnabled ( ) ) <nl> + logger _ . trace ( " requestAll for " + gDigest . getEndpoint ( ) ) ; <nl> } <nl> <nl> / * Send all the data with version greater than maxRemoteVersion * / <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 234d73d . . 54450e3 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 1602 , 9 + 1602 , 10 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> calculatePendingRanges ( ) ; <nl> <nl> Gossiper . instance . addLocalApplicationState ( ApplicationState . STATUS , valueFactory . left ( getLocalToken ( ) ) ) ; <nl> + logger _ . info ( " Announcing that I have left the ring for " + RING _ DELAY + " ms " ) ; <nl> try <nl> { <nl> - Thread . sleep ( 2 * Gossiper . intervalInMillis _ ) ; <nl> + Thread . sleep ( RING _ DELAY ) ; <nl> } <nl> catch ( InterruptedException e ) <nl> {

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 516b4a2 . . 1ad2de5 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 12 : 
 + * Move all hints related tasks to hints internal executor ( CASSANDRA - 8285 ) 
 * Fix paging for multi - partition IN queries ( CASSANDRA - 8408 ) 
 * Fix MOVED _ NODE topology event never being emitted when a node 
 moves its token ( CASSANDRA - 8373 ) 
 diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableScheduledThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableScheduledThreadPoolExecutor . java 
 index a41df54 . . 1699c0f 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / DebuggableScheduledThreadPoolExecutor . java 
 + + + b / src / java / org / apache / cassandra / concurrent / DebuggableScheduledThreadPoolExecutor . java 
 @ @ - 33 , 6 + 33 , 11 @ @ public class DebuggableScheduledThreadPoolExecutor extends ScheduledThreadPoolEx 
 super ( corePoolSize , new NamedThreadFactory ( threadPoolName , priority ) ) ; 
 } 
 
 + public DebuggableScheduledThreadPoolExecutor ( int corePoolSize , ThreadFactory threadFactory ) 
 + { 
 + super ( corePoolSize , threadFactory ) ; 
 + } 
 + 
 public DebuggableScheduledThreadPoolExecutor ( String threadPoolName ) 
 { 
 this ( 1 , threadPoolName , Thread . NORM _ PRIORITY ) ; 
 diff - - git a / src / java / org / apache / cassandra / concurrent / JMXEnabledScheduledThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / JMXEnabledScheduledThreadPoolExecutor . java 
 new file mode 100644 
 index 0000000 . . 64d9267 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / concurrent / JMXEnabledScheduledThreadPoolExecutor . java 
 @ @ - 0 , 0 + 1 , 137 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . concurrent ; 
 + 
 + import java . lang . management . ManagementFactory ; 
 + import java . util . List ; 
 + 
 + import javax . management . MBeanServer ; 
 + import javax . management . ObjectName ; 
 + 
 + import org . apache . cassandra . metrics . ThreadPoolMetrics ; 
 + 
 + / * * 
 + * A JMX enabled wrapper for DebuggableScheduledThreadPoolExecutor . 
 + * / 
 + public class JMXEnabledScheduledThreadPoolExecutor extends DebuggableScheduledThreadPoolExecutor implements JMXEnabledScheduledThreadPoolExecutorMBean 
 + { 
 + private final String mbeanName ; 
 + private final ThreadPoolMetrics metrics ; 
 + 
 + public JMXEnabledScheduledThreadPoolExecutor ( int corePoolSize , NamedThreadFactory threadFactory , String jmxPath ) 
 + { 
 + super ( corePoolSize , threadFactory ) ; 
 + 
 + metrics = new ThreadPoolMetrics ( this , jmxPath , threadFactory . id ) ; 
 + 
 + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 + mbeanName = " org . apache . cassandra . " + jmxPath + " : type = " + threadFactory . id ; 
 + 
 + try 
 + { 
 + mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + private void unregisterMBean ( ) 
 + { 
 + try 
 + { 
 + ManagementFactory . getPlatformMBeanServer ( ) . unregisterMBean ( new ObjectName ( mbeanName ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + 
 + / / release metrics 
 + metrics . release ( ) ; 
 + } 
 + 
 + @ Override 
 + public synchronized void shutdown ( ) 
 + { 
 + / / synchronized , because there is no way to access super . mainLock , which would be 
 + / / the preferred way to make this threadsafe 
 + if ( ! isShutdown ( ) ) 
 + unregisterMBean ( ) ; 
 + 
 + super . shutdown ( ) ; 
 + } 
 + 
 + @ Override 
 + public synchronized List < Runnable > shutdownNow ( ) 
 + { 
 + / / synchronized , because there is no way to access super . mainLock , which would be 
 + / / the preferred way to make this threadsafe 
 + if ( ! isShutdown ( ) ) 
 + unregisterMBean ( ) ; 
 + 
 + return super . shutdownNow ( ) ; 
 + } 
 + 
 + / * * 
 + * Get the number of completed tasks 
 + * / 
 + public long getCompletedTasks ( ) 
 + { 
 + return getCompletedTaskCount ( ) ; 
 + } 
 + 
 + / * * 
 + * Get the number of tasks waiting to be executed 
 + * / 
 + public long getPendingTasks ( ) 
 + { 
 + return getTaskCount ( ) - getCompletedTaskCount ( ) ; 
 + } 
 + 
 + public int getTotalBlockedTasks ( ) 
 + { 
 + return ( int ) metrics . totalBlocked . count ( ) ; 
 + } 
 + 
 + public int getCurrentlyBlockedTasks ( ) 
 + { 
 + return ( int ) metrics . currentBlocked . count ( ) ; 
 + } 
 + 
 + public int getCoreThreads ( ) 
 + { 
 + return getCorePoolSize ( ) ; 
 + } 
 + 
 + public void setCoreThreads ( int number ) 
 + { 
 + setCorePoolSize ( number ) ; 
 + } 
 + 
 + public int getMaximumThreads ( ) 
 + { 
 + return getMaximumPoolSize ( ) ; 
 + } 
 + 
 + public void setMaximumThreads ( int number ) 
 + { 
 + setMaximumPoolSize ( number ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / concurrent / JMXEnabledScheduledThreadPoolExecutorMBean . java b / src / java / org / apache / cassandra / concurrent / JMXEnabledScheduledThreadPoolExecutorMBean . java 
 new file mode 100644 
 index 0000000 . . d9c45e3 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / concurrent / JMXEnabledScheduledThreadPoolExecutorMBean . java 
 @ @ - 0 , 0 + 1 , 26 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . concurrent ; 
 + 
 + / * * 
 + * @ see org . apache . cassandra . metrics . ThreadPoolMetrics 
 + * / 
 + @ Deprecated 
 + public interface JMXEnabledScheduledThreadPoolExecutorMBean extends JMXEnabledThreadPoolExecutorMBean 
 + { 
 + } 
 diff - - git a / src / java / org / apache / cassandra / db / HintedHandOffManager . java b / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 index 87260b2 . . c8c3845 100644 
 - - - a / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 + + + b / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 @ @ - 34 , 20 + 34 , 16 @ @ import com . google . common . collect . ImmutableSortedSet ; 
 import com . google . common . collect . Lists ; 
 import com . google . common . util . concurrent . RateLimiter ; 
 import com . google . common . util . concurrent . Uninterruptibles ; 
 - 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; 
 + import org . apache . cassandra . concurrent . JMXEnabledScheduledThreadPoolExecutor ; 
 import org . apache . cassandra . concurrent . NamedThreadFactory ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . db . filter . * ; 
 - import org . apache . cassandra . db . marshal . AbstractType ; 
 - import org . apache . cassandra . db . marshal . CompositeType ; 
 - import org . apache . cassandra . db . marshal . Int32Type ; 
 - import org . apache . cassandra . db . marshal . UUIDType ; 
 + import org . apache . cassandra . db . marshal . * ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . dht . Token ; 
 @ @ - 106 , 12 + 102 , 11 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean 
 
 private final NonBlockingHashSet < InetAddress > queuedDeliveries = new NonBlockingHashSet < InetAddress > ( ) ; 
 
 - private final ThreadPoolExecutor executor = new JMXEnabledThreadPoolExecutor ( DatabaseDescriptor . getMaxHintsThread ( ) , 
 - Integer . MAX _ VALUE , 
 - TimeUnit . SECONDS , 
 - new LinkedBlockingQueue < Runnable > ( ) , 
 - new NamedThreadFactory ( " HintedHandoff " , Thread . MIN _ PRIORITY ) , 
 - " internal " ) ; 
 + private final JMXEnabledScheduledThreadPoolExecutor executor = 
 + new JMXEnabledScheduledThreadPoolExecutor ( 
 + DatabaseDescriptor . getMaxHintsThread ( ) , 
 + new NamedThreadFactory ( " HintedHandoff " , Thread . MIN _ PRIORITY ) , 
 + " internal " ) ; 
 
 private final ColumnFamilyStore hintStore = Keyspace . open ( Keyspace . SYSTEM _ KS ) . getColumnFamilyStore ( SystemKeyspace . HINTS _ CF ) ; 
 
 @ @ - 174 , 7 + 169 , 7 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean 
 metrics . log ( ) ; 
 } 
 } ; 
 - StorageService . optionalTasks . scheduleWithFixedDelay ( runnable , 10 , 10 , TimeUnit . MINUTES ) ; 
 + executor . scheduleWithFixedDelay ( runnable , 10 , 10 , TimeUnit . MINUTES ) ; 
 } 
 
 private static void deleteHint ( ByteBuffer tokenBytes , ByteBuffer columnName , long timestamp ) 
 @ @ - 225 , 7 + 220 , 7 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean 
 } 
 } 
 } ; 
 - StorageService . optionalTasks . submit ( runnable ) ; 
 + executor . submit ( runnable ) ; 
 } 
 
 / / foobar 
 @ @ - 246 , 7 + 241 , 7 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean 
 } 
 } 
 } ; 
 - StorageService . optionalTasks . submit ( runnable ) . get ( ) ; 
 + executor . submit ( runnable ) . get ( ) ; 
 
 } 


NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index 083c710 . . ea05b09 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 255 , 7 + 255 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener 
 
 liveEndpoints _ . remove ( endpoint ) ; 
 unreachableEndpoints _ . remove ( endpoint ) ; 
 - endpointStateMap _ . remove ( endpoint ) ; 
 + / / do not remove endpointState until the quarantine expires 
 FailureDetector . instance . remove ( endpoint ) ; 
 justRemovedEndpoints _ . put ( endpoint , System . currentTimeMillis ( ) ) ; 
 } 
 @ @ - 326 , 8 + 326 , 6 @ @ public class Gossiper implements IFailureDetectionEventListener 
 ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; 
 DataOutputStream dos = new DataOutputStream ( bos ) ; 
 GossipDigestAckMessage . serializer ( ) . serialize ( gDigestAckMessage , dos ) ; 
 - if ( logger _ . isTraceEnabled ( ) ) 
 - logger _ . trace ( " @ @ @ @ Size of GossipDigestAckMessage is " + bos . toByteArray ( ) . length ) ; 
 return new Message ( localEndpoint _ , StorageService . Verb . GOSSIP _ DIGEST _ ACK , bos . toByteArray ( ) ) ; 
 } 
 
 @ @ - 436 , 7 + 434 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener 
 else 
 { 
 logger _ . info ( " FatClient " + endpoint + " has been silent for " + FatClientTimeout _ + " ms , removing from gossip " ) ; 
 - removeEndpoint ( endpoint ) ; 
 + if ( ! justRemovedEndpoints _ . containsKey ( endpoint ) ) / / if the node was decommissioned , it will have been removed but still appear as a fat client 
 + removeEndpoint ( endpoint ) ; / / after quarantine justRemoveEndpoints will remove the state 
 } 
 } 
 
 @ @ - 457 , 6 + 456 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener 
 if ( logger _ . isDebugEnabled ( ) ) 
 logger _ . debug ( QUARANTINE _ DELAY + " elapsed , " + entry . getKey ( ) + " gossip quarantine over " ) ; 
 justRemovedEndpoints _ . remove ( entry . getKey ( ) ) ; 
 + endpointStateMap _ . remove ( entry . getKey ( ) ) ; 
 } 
 } 
 } 
 @ @ - 469 , 8 + 469 , 6 @ @ public class Gossiper implements IFailureDetectionEventListener 
 
 EndpointState getStateForVersionBiggerThan ( InetAddress forEndpoint , int version ) 
 { 
 - if ( logger _ . isTraceEnabled ( ) ) 
 - logger _ . trace ( " Scanning for state greater than " + version + " for " + forEndpoint ) ; 
 EndpointState epState = endpointStateMap _ . get ( forEndpoint ) ; 
 EndpointState reqdEndpointState = null ; 
 
 @ @ - 488 , 6 + 486 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener 
 if ( localHbVersion > version ) 
 { 
 reqdEndpointState = new EndpointState ( epState . getHeartBeatState ( ) ) ; 
 + if ( logger _ . isTraceEnabled ( ) ) 
 + logger _ . trace ( " local heartbeat version " + localHbVersion + " greater than " + version + " for " + forEndpoint ) ; 
 } 
 / * Accumulate all application states whose versions are greater than " version " variable * / 
 for ( Entry < ApplicationState , VersionedValue > entry : epState . getApplicationStateMap ( ) . entrySet ( ) ) 
 @ @ - 668 , 6 + 668 , 11 @ @ public class Gossiper implements IFailureDetectionEventListener 
 	 applyApplicationStateLocally ( ep , localEpStatePtr , remoteState ) ; 
 	 } 
 	 } 
 + else 
 + { 
 + if ( logger _ . isTraceEnabled ( ) ) 
 + logger _ . trace ( " Ignoring remote generation " + remoteGeneration + " < " + localGeneration ) ; 
 + } 
 } 
 else 
 { 
 @ @ - 683 , 6 + 688 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener 
 
 if ( remoteHbState . getGeneration ( ) > localHbState . getGeneration ( ) ) 
 { 
 + if ( logger _ . isTraceEnabled ( ) ) 
 + logger _ . trace ( " Updating heartbeat state generation to " + remoteHbState . getGeneration ( ) + " from " + localHbState . getGeneration ( ) + " for " + addr ) ; 
 localState . setHeartBeatState ( remoteHbState ) ; 
 } 
 if ( localHbState . getGeneration ( ) = = remoteHbState . getGeneration ( ) ) 
 @ @ - 694 , 6 + 701 , 11 @ @ public class Gossiper implements IFailureDetectionEventListener 
 if ( logger _ . isTraceEnabled ( ) ) 
 logger _ . trace ( " Updating heartbeat state version to " + localState . getHeartBeatState ( ) . getHeartBeatVersion ( ) + " from " + oldVersion + " for " + addr + " . . . " ) ; 
 } 
 + else 
 + { 
 + if ( logger _ . isTraceEnabled ( ) ) 
 + logger _ . trace ( " Ignoring lower version " + remoteHbState . getHeartBeatVersion ( ) + " for " + addr + " which is lower than " + localHbState . getHeartBeatVersion ( ) ) ; 
 + } 
 } 
 } 
 
 @ @ - 777 , 6 + 789 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener 
 { 
 / * We are here since we have no data for this endpoint locally so request everthing . * / 
 deltaGossipDigestList . add ( new GossipDigest ( gDigest . getEndpoint ( ) , remoteGeneration , 0 ) ) ; 
 + if ( logger _ . isTraceEnabled ( ) ) 
 + logger _ . trace ( " requestAll for " + gDigest . getEndpoint ( ) ) ; 
 } 
 
 / * Send all the data with version greater than maxRemoteVersion * / 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 234d73d . . 54450e3 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 1602 , 9 + 1602 , 10 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 calculatePendingRanges ( ) ; 
 
 Gossiper . instance . addLocalApplicationState ( ApplicationState . STATUS , valueFactory . left ( getLocalToken ( ) ) ) ; 
 + logger _ . info ( " Announcing that I have left the ring for " + RING _ DELAY + " ms " ) ; 
 try 
 { 
 - Thread . sleep ( 2 * Gossiper . intervalInMillis _ ) ; 
 + Thread . sleep ( RING _ DELAY ) ; 
 } 
 catch ( InterruptedException e ) 
 {
