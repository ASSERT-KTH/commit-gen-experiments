BLEU SCORE: 0.05341087579952926

TEST MSG: SSTableExport supports secondary index tables
GENERATED MSG: Allow disabling SlabAllocator

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 87691f9 . . 28de247 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 5 <nl> + * SSTableExport supports secondary index tables ( CASSANDRA - 11330 ) <nl> * Fix sstabledump to include missing info in debug output ( CASSANDRA - 11321 ) <nl> * Establish and implement canonical bulk reading workload ( s ) ( CASSANDRA - 10331 ) <nl> * Fix paging for IN queries on tables without clustering columns ( CASSANDRA - 11208 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / SerializationHeader . java b / src / java / org / apache / cassandra / db / SerializationHeader . java <nl> index 6aee0b6 . . 6e03756 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SerializationHeader . java <nl> + + + b / src / java / org / apache / cassandra / db / SerializationHeader . java <nl> @ @ - 362 , 7 + 362 , 7 @ @ public class SerializationHeader <nl> keyType , clusteringTypes , staticColumns , regularColumns , stats ) ; <nl> } <nl> <nl> - public AbstractType < ? > getKetType ( ) <nl> + public AbstractType < ? > getKeyType ( ) <nl> { <nl> return keyType ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / tools / SSTableExport . java b / src / java / org / apache / cassandra / tools / SSTableExport . java <nl> index 3ee9193 . . fd3b9cb 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / SSTableExport . java <nl> + + + b / src / java / org / apache / cassandra / tools / SSTableExport . java <nl> @ @ - 35 , 10 + 35 , 9 @ @ import org . apache . cassandra . db . PartitionPosition ; <nl> import org . apache . cassandra . db . SerializationHeader ; <nl> import org . apache . cassandra . db . marshal . UTF8Type ; <nl> import org . apache . cassandra . db . rows . UnfilteredRowIterator ; <nl> - import org . apache . cassandra . dht . AbstractBounds ; <nl> - import org . apache . cassandra . dht . Bounds ; <nl> - import org . apache . cassandra . dht . IPartitioner ; <nl> + import org . apache . cassandra . dht . * ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . index . SecondaryIndexManager ; <nl> import org . apache . cassandra . io . sstable . Descriptor ; <nl> import org . apache . cassandra . io . sstable . ISSTableScanner ; <nl> import org . apache . cassandra . io . sstable . KeyIterator ; <nl> @ @ - 100 , 7 + 99 , 10 @ @ public class SSTableExport <nl> ValidationMetadata validationMetadata = ( ValidationMetadata ) sstableMetadata . get ( MetadataType . VALIDATION ) ; <nl> SerializationHeader . Component header = ( SerializationHeader . Component ) sstableMetadata . get ( MetadataType . HEADER ) ; <nl> <nl> - IPartitioner partitioner = FBUtilities . newPartitioner ( validationMetadata . partitioner ) ; <nl> + IPartitioner partitioner = SecondaryIndexManager . isIndexColumnFamily ( desc . cfname ) <nl> + ? new LocalPartitioner ( header . getKeyType ( ) ) <nl> + : FBUtilities . newPartitioner ( validationMetadata . partitioner ) ; <nl> + <nl> CFMetaData . Builder builder = CFMetaData . Builder . create ( " keyspace " , " table " ) . withPartitioner ( partitioner ) ; <nl> header . getStaticColumns ( ) . entrySet ( ) . stream ( ) <nl> . forEach ( entry - > { <nl> @ @ - 112 , 7 + 114 , 7 @ @ public class SSTableExport <nl> ColumnIdentifier ident = ColumnIdentifier . getInterned ( UTF8Type . instance . getString ( entry . getKey ( ) ) , true ) ; <nl> builder . addRegularColumn ( ident , entry . getValue ( ) ) ; <nl> } ) ; <nl> - builder . addPartitionKey ( " PartitionKey " , header . getKetType ( ) ) ; <nl> + builder . addPartitionKey ( " PartitionKey " , header . getKeyType ( ) ) ; <nl> for ( int i = 0 ; i < header . getClusteringTypes ( ) . size ( ) ; i + + ) <nl> { <nl> builder . addClusteringColumn ( " clustering " + ( i > 0 ? i : " " ) , header . getClusteringTypes ( ) . get ( i ) ) ; <nl> @ @ - 250 , 4 + 252 , 4 @ @ public class SSTableExport <nl> String header = " Dump contents of given SSTable to standard output in JSON format . " ; <nl> new HelpFormatter ( ) . printHelp ( usage , header , options , " " ) ; <nl> } <nl> - } <nl> \ No newline at end of file <nl> + }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 13b4214 . . 45e6497 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> 1 . 2 . 10 <nl> * Allow disabling SlabAllocator ( CASSANDRA - 5935 ) <nl> + * Make user - defined compaction JMX blocking ( CASSANDRA - 4952 ) <nl> <nl> <nl> 1 . 2 . 9 <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index c9e1b79 . . 44b973f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 56 , 10 + 56 , 7 @ @ import org . apache . cassandra . metrics . CompactionMetrics ; <nl> import org . apache . cassandra . service . AntiEntropyService ; <nl> import org . apache . cassandra . service . CacheService ; <nl> import org . apache . cassandra . service . StorageService ; <nl> - import org . apache . cassandra . utils . CloseableIterator ; <nl> - import org . apache . cassandra . utils . CounterId ; <nl> - import org . apache . cassandra . utils . Pair ; <nl> - import org . apache . cassandra . utils . WrappedRunnable ; <nl> + import org . apache . cassandra . utils . * ; <nl> <nl> / * * <nl> * A singleton which manages a private executor of ongoing compactions . A readwrite lock <nl> @ @ - 405 , 7 + 402 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> } <nl> <nl> ColumnFamilyStore cfs = Table . open ( ksname ) . getColumnFamilyStore ( cfname ) ; <nl> - submitUserDefined ( cfs , descriptors , getDefaultGcBefore ( cfs ) ) ; <nl> + FBUtilities . waitOnFuture ( submitUserDefined ( cfs , descriptors , getDefaultGcBefore ( cfs ) ) ) ; <nl> } <nl> <nl> public Future < ? > submitUserDefined ( final ColumnFamilyStore cfs , final Collection < Descriptor > dataFiles , final int gcBefore )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 87691f9 . . 28de247 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 5 
 + * SSTableExport supports secondary index tables ( CASSANDRA - 11330 ) 
 * Fix sstabledump to include missing info in debug output ( CASSANDRA - 11321 ) 
 * Establish and implement canonical bulk reading workload ( s ) ( CASSANDRA - 10331 ) 
 * Fix paging for IN queries on tables without clustering columns ( CASSANDRA - 11208 ) 
 diff - - git a / src / java / org / apache / cassandra / db / SerializationHeader . java b / src / java / org / apache / cassandra / db / SerializationHeader . java 
 index 6aee0b6 . . 6e03756 100644 
 - - - a / src / java / org / apache / cassandra / db / SerializationHeader . java 
 + + + b / src / java / org / apache / cassandra / db / SerializationHeader . java 
 @ @ - 362 , 7 + 362 , 7 @ @ public class SerializationHeader 
 keyType , clusteringTypes , staticColumns , regularColumns , stats ) ; 
 } 
 
 - public AbstractType < ? > getKetType ( ) 
 + public AbstractType < ? > getKeyType ( ) 
 { 
 return keyType ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / tools / SSTableExport . java b / src / java / org / apache / cassandra / tools / SSTableExport . java 
 index 3ee9193 . . fd3b9cb 100644 
 - - - a / src / java / org / apache / cassandra / tools / SSTableExport . java 
 + + + b / src / java / org / apache / cassandra / tools / SSTableExport . java 
 @ @ - 35 , 10 + 35 , 9 @ @ import org . apache . cassandra . db . PartitionPosition ; 
 import org . apache . cassandra . db . SerializationHeader ; 
 import org . apache . cassandra . db . marshal . UTF8Type ; 
 import org . apache . cassandra . db . rows . UnfilteredRowIterator ; 
 - import org . apache . cassandra . dht . AbstractBounds ; 
 - import org . apache . cassandra . dht . Bounds ; 
 - import org . apache . cassandra . dht . IPartitioner ; 
 + import org . apache . cassandra . dht . * ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . index . SecondaryIndexManager ; 
 import org . apache . cassandra . io . sstable . Descriptor ; 
 import org . apache . cassandra . io . sstable . ISSTableScanner ; 
 import org . apache . cassandra . io . sstable . KeyIterator ; 
 @ @ - 100 , 7 + 99 , 10 @ @ public class SSTableExport 
 ValidationMetadata validationMetadata = ( ValidationMetadata ) sstableMetadata . get ( MetadataType . VALIDATION ) ; 
 SerializationHeader . Component header = ( SerializationHeader . Component ) sstableMetadata . get ( MetadataType . HEADER ) ; 
 
 - IPartitioner partitioner = FBUtilities . newPartitioner ( validationMetadata . partitioner ) ; 
 + IPartitioner partitioner = SecondaryIndexManager . isIndexColumnFamily ( desc . cfname ) 
 + ? new LocalPartitioner ( header . getKeyType ( ) ) 
 + : FBUtilities . newPartitioner ( validationMetadata . partitioner ) ; 
 + 
 CFMetaData . Builder builder = CFMetaData . Builder . create ( " keyspace " , " table " ) . withPartitioner ( partitioner ) ; 
 header . getStaticColumns ( ) . entrySet ( ) . stream ( ) 
 . forEach ( entry - > { 
 @ @ - 112 , 7 + 114 , 7 @ @ public class SSTableExport 
 ColumnIdentifier ident = ColumnIdentifier . getInterned ( UTF8Type . instance . getString ( entry . getKey ( ) ) , true ) ; 
 builder . addRegularColumn ( ident , entry . getValue ( ) ) ; 
 } ) ; 
 - builder . addPartitionKey ( " PartitionKey " , header . getKetType ( ) ) ; 
 + builder . addPartitionKey ( " PartitionKey " , header . getKeyType ( ) ) ; 
 for ( int i = 0 ; i < header . getClusteringTypes ( ) . size ( ) ; i + + ) 
 { 
 builder . addClusteringColumn ( " clustering " + ( i > 0 ? i : " " ) , header . getClusteringTypes ( ) . get ( i ) ) ; 
 @ @ - 250 , 4 + 252 , 4 @ @ public class SSTableExport 
 String header = " Dump contents of given SSTable to standard output in JSON format . " ; 
 new HelpFormatter ( ) . printHelp ( usage , header , options , " " ) ; 
 } 
 - } 
 \ No newline at end of file 
 + }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 13b4214 . . 45e6497 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 1 . 2 . 10 
 * Allow disabling SlabAllocator ( CASSANDRA - 5935 ) 
 + * Make user - defined compaction JMX blocking ( CASSANDRA - 4952 ) 
 
 
 1 . 2 . 9 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index c9e1b79 . . 44b973f 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 56 , 10 + 56 , 7 @ @ import org . apache . cassandra . metrics . CompactionMetrics ; 
 import org . apache . cassandra . service . AntiEntropyService ; 
 import org . apache . cassandra . service . CacheService ; 
 import org . apache . cassandra . service . StorageService ; 
 - import org . apache . cassandra . utils . CloseableIterator ; 
 - import org . apache . cassandra . utils . CounterId ; 
 - import org . apache . cassandra . utils . Pair ; 
 - import org . apache . cassandra . utils . WrappedRunnable ; 
 + import org . apache . cassandra . utils . * ; 
 
 / * * 
 * A singleton which manages a private executor of ongoing compactions . A readwrite lock 
 @ @ - 405 , 7 + 402 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 } 
 
 ColumnFamilyStore cfs = Table . open ( ksname ) . getColumnFamilyStore ( cfname ) ; 
 - submitUserDefined ( cfs , descriptors , getDefaultGcBefore ( cfs ) ) ; 
 + FBUtilities . waitOnFuture ( submitUserDefined ( cfs , descriptors , getDefaultGcBefore ( cfs ) ) ) ; 
 } 
 
 public Future < ? > submitUserDefined ( final ColumnFamilyStore cfs , final Collection < Descriptor > dataFiles , final int gcBefore )
