BLEU SCORE: 1.0

TEST MSG: Add redhat RPM build directory
GENERATED MSG: Add redhat RPM build directory

TEST DIFF (one line): diff - - git a / redhat / README . md b / redhat / README . md <nl> new file mode 100644 <nl> index 0000000 . . 0b2ab0d <nl> - - - / dev / null <nl> + + + b / redhat / README . md <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + # Apache Cassandra rpmbuild <nl> + <nl> + # # # Requirements : <nl> + - The build system needs to have Apache Cassandra ` ant artifacts ` build dependencies installed . <nl> + - Since Apache Cassandra depends on Python 2 . 7 , the earliest version supported is RHEL / CentOS 7 . 0 . <nl> + <nl> + # # # Step 1 : <nl> + - Build and copy sources to build tree : <nl> + ` ` ` <nl> + ant artifacts <nl> + cp build / apache - cassandra - * - src . tar . gz $ RPM _ BUILD _ DIR / SOURCES / <nl> + ` ` ` <nl> + <nl> + # # # Step 2 : <nl> + - Since there is no version specified in the SPEC file , one needs to be passed at ` rpmbuild ` time ( example with 4 . 0 ) : <nl> + ` ` ` <nl> + rpmbuild - - define = " version 4 . 0 " - ba redhat / cassandra . spec <nl> + ` ` ` <nl> + <nl> + - RPM files can be found in their respective build tree directories : <nl> + ` ` ` <nl> + ls - l $ RPM _ BUILD _ DIR / { SRPMS , RPMS } / <nl> + ` ` ` <nl> + <nl> + # # # Hint : <nl> + - Don ' t build packages as root . . <nl> + ` ` ` <nl> + # this makes your RPM _ BUILD _ DIR = ~ / rpmbuild <nl> + mkdir - p ~ / rpmbuild / { BUILD , RPMS , SOURCES , SPECS , SRPMS } <nl> + echo ' % _ topdir % ( echo $ HOME ) / rpmbuild ' > ~ / . rpmmacros <nl> + ` ` ` <nl> diff - - git a / redhat / cassandra b / redhat / cassandra <nl> new file mode 100644 <nl> index 0000000 . . 3e59534 <nl> - - - / dev / null <nl> + + + b / redhat / cassandra <nl> @ @ - 0 , 0 + 1 , 94 @ @ <nl> + # ! / bin / bash <nl> + # <nl> + # / etc / init . d / cassandra <nl> + # <nl> + # Startup script for Cassandra <nl> + # <nl> + # chkconfig : 2345 20 80 <nl> + # description : Starts and stops Cassandra <nl> + <nl> + . / etc / rc . d / init . d / functions <nl> + <nl> + export CASSANDRA _ HOME = / usr / share / cassandra <nl> + export CASSANDRA _ CONF = / etc / cassandra / conf <nl> + export CASSANDRA _ INCLUDE = $ CASSANDRA _ HOME / cassandra . in . sh <nl> + export CASSANDRA _ OWNR = cassandra <nl> + NAME = " cassandra " <nl> + log _ file = / var / log / cassandra / cassandra . log <nl> + pid _ file = / var / run / cassandra / cassandra . pid <nl> + lock _ file = / var / lock / subsys / $ NAME <nl> + CASSANDRA _ PROG = / usr / sbin / cassandra <nl> + <nl> + # The first existing directory is used for JAVA _ HOME if needed . <nl> + JVM _ SEARCH _ DIRS = " / usr / lib / jvm / jre / usr / lib / jvm / jre - 1 . 7 . * / usr / lib / jvm / java - 1 . 7 . * / jre " <nl> + <nl> + # Read configuration variable file if it is present <nl> + [ - r / etc / default / $ NAME ] & & . / etc / default / $ NAME <nl> + <nl> + # If JAVA _ HOME has not been set , try to determine it . <nl> + if [ - z " $ JAVA _ HOME " ] ; then <nl> + # If java is in PATH , use a JAVA _ HOME that corresponds to that . This is <nl> + # both consistent with how the upstream startup script works , and with <nl> + # the use of alternatives to set a system JVM ( as is done on Debian and <nl> + # Red Hat derivatives ) . <nl> + java = " ` / usr / bin / which java 2 > / dev / null ` " <nl> + if [ - n " $ java " ] ; then <nl> + java = ` readlink - - canonicalize " $ java " ` <nl> + JAVA _ HOME = ` dirname " \ ` dirname \ $ java \ ` " ` <nl> + else <nl> + # No JAVA _ HOME set and no java found in PATH ; search for a JVM . <nl> + for jdir in $ JVM _ SEARCH _ DIRS ; do <nl> + if [ - x " $ jdir / bin / java " ] ; then <nl> + JAVA _ HOME = " $ jdir " <nl> + break <nl> + fi <nl> + done <nl> + # if JAVA _ HOME is still empty here , punt . <nl> + fi <nl> + fi <nl> + JAVA = " $ JAVA _ HOME / bin / java " <nl> + export JAVA _ HOME JAVA <nl> + <nl> + case " $ 1 " in <nl> + start ) <nl> + # Cassandra startup <nl> + echo - n " Starting Cassandra : " <nl> + su $ CASSANDRA _ OWNR - c " $ CASSANDRA _ PROG - p $ pid _ file " > $ log _ file 2 > & 1 <nl> + retval = $ ? <nl> + [ $ retval - eq 0 ] & & touch $ lock _ file <nl> + echo " OK " <nl> + ; ; <nl> + stop ) <nl> + # Cassandra shutdown <nl> + echo - n " Shutdown Cassandra : " <nl> + su $ CASSANDRA _ OWNR - c " kill ` cat $ pid _ file ` " <nl> + retval = $ ? <nl> + [ $ retval - eq 0 ] & & rm - f $ lock _ file <nl> + for t in ` seq 40 ` ; do $ 0 status > / dev / null 2 > & 1 & & sleep 0 . 5 | | break ; done <nl> + # Adding a sleep here to give jmx time to wind down ( CASSANDRA - 4483 ) . Not ideal . . . <nl> + # Adam Holmberg suggests this , but that would break if the jmx port is changed <nl> + # for t in ` seq 40 ` ; do netstat - tnlp | grep " 0 . 0 . 0 . 0 : 7199 " > / dev / null 2 > & 1 & & sleep 0 . 1 | | break ; done <nl> + sleep 5 <nl> + STATUS = ` $ 0 status ` <nl> + if [ [ $ STATUS = = " $ NAME is stopped " ] ] ; then <nl> + echo " OK " <nl> + else <nl> + echo " ERROR : could not stop $ NAME : $ STATUS " <nl> + exit 1 <nl> + fi <nl> + ; ; <nl> + reload | restart ) <nl> + $ 0 stop <nl> + $ 0 start <nl> + ; ; <nl> + status ) <nl> + status - p $ pid _ file cassandra <nl> + exit $ ? <nl> + ; ; <nl> + * ) <nl> + echo " Usage : ` basename $ 0 ` start | stop | status | restart | reload " <nl> + exit 1 <nl> + esac <nl> + <nl> + exit 0 <nl> + <nl> diff - - git a / redhat / cassandra . conf b / redhat / cassandra . conf <nl> new file mode 100644 <nl> index 0000000 . . a5aebe1 <nl> - - - / dev / null <nl> + + + b / redhat / cassandra . conf <nl> @ @ - 0 , 0 + 1 , 4 @ @ <nl> + cassandra - memlock unlimited <nl> + cassandra - nofile 100000 <nl> + cassandra - nproc 32768 <nl> + cassandra - as unlimited <nl> diff - - git a / redhat / cassandra . in . sh b / redhat / cassandra . in . sh <nl> new file mode 100644 <nl> index 0000000 . . ca71782 <nl> - - - / dev / null <nl> + + + b / redhat / cassandra . in . sh <nl> @ @ - 0 , 0 + 1 , 30 @ @ <nl> + <nl> + # The directory where Cassandra ' s configs live ( required ) <nl> + CASSANDRA _ CONF = / etc / cassandra / conf <nl> + <nl> + CASSANDRA _ HOME = / usr / share / cassandra <nl> + <nl> + # The java classpath ( required ) <nl> + if [ - n " $ CLASSPATH " ] ; then <nl> + CLASSPATH = $ CLASSPATH : $ CASSANDRA _ CONF <nl> + else <nl> + CLASSPATH = $ CASSANDRA _ CONF <nl> + fi <nl> + <nl> + for jar in / usr / share / cassandra / lib / * . jar ; do <nl> + CLASSPATH = $ CLASSPATH : $ jar <nl> + done <nl> + <nl> + for jar in / usr / share / cassandra / * . jar ; do <nl> + CLASSPATH = $ CLASSPATH : $ jar <nl> + done <nl> + <nl> + CLASSPATH = " $ CLASSPATH : $ EXTRA _ CLASSPATH " <nl> + <nl> + <nl> + # set JVM javaagent opts to avoid warnings / errors <nl> + if [ " $ JVM _ VENDOR " ! = " OpenJDK " - o " $ JVM _ VERSION " \ > " 1 . 6 . 0 " ] \ <nl> + | | [ " $ JVM _ VERSION " = " 1 . 6 . 0 " - a " $ JVM _ PATCH _ VERSION " - ge 23 ] <nl> + then <nl> + JAVA _ AGENT = " $ JAVA _ AGENT - javaagent : $ CASSANDRA _ HOME / lib / jamm - 0 . 3 . 0 . jar " <nl> + fi <nl> diff - - git a / redhat / cassandra . spec b / redhat / cassandra . spec <nl> new file mode 100644 <nl> index 0000000 . . a1bfa5d <nl> - - - / dev / null <nl> + + + b / redhat / cassandra . spec <nl> @ @ - 0 , 0 + 1 , 177 @ @ <nl> + % define _ _ jar _ repack % { nil } <nl> + # Turn off the brp - python - bytecompile script <nl> + % global _ _ os _ install _ post % ( echo ' % { _ _ os _ install _ post } ' | sed - e ' s ! / usr / lib [ ^ [ : space : ] ] * / brp - python - bytecompile [ [ : space : ] ] . * $ ! ! g ' ) <nl> + <nl> + % global username cassandra <nl> + <nl> + % define relname apache - cassandra - % { version } <nl> + % define revision 1 <nl> + <nl> + Name : cassandra <nl> + Version : % { version } <nl> + Release : % { revision } <nl> + Summary : Cassandra is a highly scalable , eventually consistent , distributed , structured key - value store . <nl> + <nl> + Group : Development / Libraries <nl> + License : Apache Software License 2 . 0 <nl> + URL : http : / / cassandra . apache . org / <nl> + Source0 : % { relname } - src . tar . gz <nl> + BuildRoot : % { _ tmppath } / % { relname } root - % ( % { _ _ id _ u } - n ) <nl> + <nl> + BuildRequires : ant <nl> + <nl> + Requires : jre > = 1 . 8 . 0 <nl> + Requires : python ( abi ) > = 2 . 7 <nl> + Requires ( pre ) : user ( cassandra ) <nl> + Requires ( pre ) : group ( cassandra ) <nl> + Requires ( pre ) : shadow - utils <nl> + Provides : user ( cassandra ) <nl> + Provides : group ( cassandra ) <nl> + <nl> + BuildArch : noarch <nl> + <nl> + # Don ' t examine the . so files we bundle for dependencies <nl> + AutoReqProv : no <nl> + <nl> + % description <nl> + Cassandra is a distributed ( peer - to - peer ) system for the management and storage of structured data . <nl> + <nl> + % prep <nl> + % setup - q - n % { relname } - src <nl> + <nl> + % build <nl> + export LANG = en _ US . UTF - 8 <nl> + export JAVA _ TOOL _ OPTIONS = " - Dfile . encoding = UTF - 8 " <nl> + ant clean jar - Dversion = % { version } <nl> + <nl> + % install <nl> + % { _ _ rm } - rf % { buildroot } <nl> + mkdir - p % { buildroot } / % { _ sysconfdir } / % { username } <nl> + mkdir - p % { buildroot } / usr / share / % { username } <nl> + mkdir - p % { buildroot } / usr / share / % { username } / lib <nl> + mkdir - p % { buildroot } / % { _ sysconfdir } / % { username } / default . conf <nl> + mkdir - p % { buildroot } / % { _ sysconfdir } / rc . d / init . d <nl> + mkdir - p % { buildroot } / % { _ sysconfdir } / security / limits . d <nl> + mkdir - p % { buildroot } / % { _ sysconfdir } / default <nl> + mkdir - p % { buildroot } / usr / sbin <nl> + mkdir - p % { buildroot } / usr / bin <nl> + mkdir - p % { buildroot } / var / lib / % { username } / commitlog <nl> + mkdir - p % { buildroot } / var / lib / % { username } / data <nl> + mkdir - p % { buildroot } / var / lib / % { username } / saved _ caches <nl> + mkdir - p % { buildroot } / var / lib / % { username } / hints <nl> + mkdir - p % { buildroot } / var / run / % { username } <nl> + mkdir - p % { buildroot } / var / log / % { username } <nl> + ( cd pylib & & python2 . 7 setup . py install - - no - compile - - root % { buildroot } ; ) <nl> + <nl> + # patches for data and log paths <nl> + patch - p1 < debian / patches / 001cassandra _ yaml _ dirs . dpatch <nl> + patch - p1 < debian / patches / 002cassandra _ logdir _ fix . dpatch <nl> + # uncomment hints _ directory path <nl> + sed - i ' s / ^ # hints _ directory : / hints _ directory : / ' conf / cassandra . yaml <nl> + <nl> + # remove batch , powershell , and other files not being installed <nl> + rm conf / * . ps1 <nl> + rm bin / * . bat <nl> + rm bin / * . orig <nl> + rm bin / * . ps1 <nl> + rm bin / cassandra . in . sh <nl> + rm lib / sigar - bin / * winnt * # strip segfaults on dll . . <nl> + rm tools / bin / * . bat <nl> + rm tools / bin / cassandra . in . sh <nl> + <nl> + # copy default configs <nl> + cp - pr conf / * % { buildroot } / % { _ sysconfdir } / % { username } / default . conf / <nl> + <nl> + # step on default config with our redhat one <nl> + cp - p redhat / % { username } . in . sh % { buildroot } / usr / share / % { username } / % { username } . in . sh <nl> + cp - p redhat / % { username } % { buildroot } / % { _ sysconfdir } / rc . d / init . d / % { username } <nl> + cp - p redhat / % { username } . conf % { buildroot } / % { _ sysconfdir } / security / limits . d / <nl> + cp - p redhat / default % { buildroot } / % { _ sysconfdir } / default / % { username } <nl> + <nl> + # copy cassandra bundled libs <nl> + cp - pr lib / * % { buildroot } / usr / share / % { username } / lib / <nl> + <nl> + # copy stress jar <nl> + cp - p build / tools / lib / stress . jar % { buildroot } / usr / share / % { username } / <nl> + <nl> + # copy binaries <nl> + mv bin / cassandra % { buildroot } / usr / sbin / <nl> + cp - p bin / * % { buildroot } / usr / bin / <nl> + cp - p tools / bin / * % { buildroot } / usr / bin / <nl> + <nl> + # copy cassandra , thrift jars <nl> + cp build / apache - cassandra - % { version } . jar % { buildroot } / usr / share / % { username } / <nl> + cp build / apache - cassandra - thrift - % { version } . jar % { buildroot } / usr / share / % { username } / <nl> + <nl> + % clean <nl> + % { _ _ rm } - rf % { buildroot } <nl> + <nl> + % pre <nl> + getent group % { username } > / dev / null | | groupadd - r % { username } <nl> + getent passwd % { username } > / dev / null | | \ <nl> + useradd - d / var / lib / % { username } - g % { username } - M - r % { username } <nl> + exit 0 <nl> + <nl> + % files <nl> + % defattr ( 0644 , root , root , 0755 ) <nl> + % doc CHANGES . txt LICENSE . txt README . asc NEWS . txt NOTICE . txt <nl> + % attr ( 755 , root , root ) % { _ bindir } / cassandra - stress <nl> + % attr ( 755 , root , root ) % { _ bindir } / cqlsh <nl> + % attr ( 755 , root , root ) % { _ bindir } / cqlsh . py <nl> + % attr ( 755 , root , root ) % { _ bindir } / debug - cql <nl> + % attr ( 755 , root , root ) % { _ bindir } / nodetool <nl> + % attr ( 755 , root , root ) % { _ bindir } / sstableloader <nl> + % attr ( 755 , root , root ) % { _ bindir } / sstablescrub <nl> + % attr ( 755 , root , root ) % { _ bindir } / sstableupgrade <nl> + % attr ( 755 , root , root ) % { _ bindir } / sstableutil <nl> + % attr ( 755 , root , root ) % { _ bindir } / sstableverify <nl> + % attr ( 755 , root , root ) % { _ bindir } / stop - server <nl> + % attr ( 755 , root , root ) % { _ sbindir } / cassandra <nl> + % attr ( 755 , root , root ) / % { _ sysconfdir } / rc . d / init . d / % { username } <nl> + % attr ( 755 , root , root ) / % { _ sysconfdir } / default / % { username } <nl> + % attr ( 755 , root , root ) / % { _ sysconfdir } / security / limits . d / % { username } . conf <nl> + % attr ( 755 , % { username } , % { username } ) / usr / share / % { username } * <nl> + % attr ( 755 , % { username } , % { username } ) % config ( noreplace ) / % { _ sysconfdir } / % { username } <nl> + % attr ( 755 , % { username } , % { username } ) % config ( noreplace ) / var / lib / % { username } / * <nl> + % attr ( 755 , % { username } , % { username } ) / var / log / % { username } * <nl> + % attr ( 755 , % { username } , % { username } ) / var / run / % { username } * <nl> + / usr / lib / python2 . 7 / site - packages / cqlshlib / <nl> + / usr / lib / python2 . 7 / site - packages / cassandra _ pylib * . egg - info <nl> + <nl> + % post <nl> + alternatives - - install / % { _ sysconfdir } / % { username } / conf % { username } / % { _ sysconfdir } / % { username } / default . conf / 0 <nl> + exit 0 <nl> + <nl> + % preun <nl> + # only delete alternative on removal , not upgrade <nl> + if [ " $ 1 " = " 0 " ] ; then <nl> + alternatives - - remove % { username } / % { _ sysconfdir } / % { username } / default . conf / <nl> + fi <nl> + exit 0 <nl> + <nl> + <nl> + % package tools <nl> + Summary : Extra tools for Cassandra . Cassandra is a highly scalable , eventually consistent , distributed , structured key - value store . <nl> + Group : Development / Libraries <nl> + Requires : cassandra = % { version } - % { revision } <nl> + <nl> + % description tools <nl> + Cassandra is a distributed ( peer - to - peer ) system for the management and storage of structured data . <nl> + . <nl> + This package contains extra tools for working with Cassandra clusters . <nl> + <nl> + % files tools <nl> + % attr ( 755 , root , root ) % { _ bindir } / sstabledump <nl> + % attr ( 755 , root , root ) % { _ bindir } / cassandra - stressd <nl> + % attr ( 755 , root , root ) % { _ bindir } / sstableexpiredblockers <nl> + % attr ( 755 , root , root ) % { _ bindir } / sstablelevelreset <nl> + % attr ( 755 , root , root ) % { _ bindir } / sstablemetadata <nl> + % attr ( 755 , root , root ) % { _ bindir } / sstableofflinerelevel <nl> + % attr ( 755 , root , root ) % { _ bindir } / sstablerepairedset <nl> + % attr ( 755 , root , root ) % { _ bindir } / sstablesplit <nl> + <nl> + <nl> + % changelog <nl> + * Mon Dec 05 2016 Michael Shuler < mshuler @ apache . org > <nl> + - 2 . 1 . 17 , 2 . 2 . 9 , 3 . 0 . 11 , 3 . 10 <nl> + - Reintroduce RPM packaging <nl> diff - - git a / redhat / default b / redhat / default <nl> new file mode 100644 <nl> index 0000000 . . 1b56a98 <nl> - - - / dev / null <nl> + + + b / redhat / default <nl> @ @ - 0 , 0 + 1 , 7 @ @ <nl> + # NOTICE : See also / etc / cassandra / cassandra - env . sh <nl> + <nl> + # EXTRA _ CLASSPATH provides the means to extend Cassandra ' s classpath with <nl> + # additional libraries . It is formatted as a colon - delimited list of <nl> + # class directories and / or jar files . For example , to enable the <nl> + # JMX - to - web bridge install libmx4j - java and uncomment the following . <nl> + # EXTRA _ CLASSPATH = " / usr / share / java / mx4j - tools . jar "
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / redhat / README . md b / redhat / README . md 
 new file mode 100644 
 index 0000000 . . 0b2ab0d 
 - - - / dev / null 
 + + + b / redhat / README . md 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + # Apache Cassandra rpmbuild 
 + 
 + # # # Requirements : 
 + - The build system needs to have Apache Cassandra ` ant artifacts ` build dependencies installed . 
 + - Since Apache Cassandra depends on Python 2 . 7 , the earliest version supported is RHEL / CentOS 7 . 0 . 
 + 
 + # # # Step 1 : 
 + - Build and copy sources to build tree : 
 + ` ` ` 
 + ant artifacts 
 + cp build / apache - cassandra - * - src . tar . gz $ RPM _ BUILD _ DIR / SOURCES / 
 + ` ` ` 
 + 
 + # # # Step 2 : 
 + - Since there is no version specified in the SPEC file , one needs to be passed at ` rpmbuild ` time ( example with 4 . 0 ) : 
 + ` ` ` 
 + rpmbuild - - define = " version 4 . 0 " - ba redhat / cassandra . spec 
 + ` ` ` 
 + 
 + - RPM files can be found in their respective build tree directories : 
 + ` ` ` 
 + ls - l $ RPM _ BUILD _ DIR / { SRPMS , RPMS } / 
 + ` ` ` 
 + 
 + # # # Hint : 
 + - Don ' t build packages as root . . 
 + ` ` ` 
 + # this makes your RPM _ BUILD _ DIR = ~ / rpmbuild 
 + mkdir - p ~ / rpmbuild / { BUILD , RPMS , SOURCES , SPECS , SRPMS } 
 + echo ' % _ topdir % ( echo $ HOME ) / rpmbuild ' > ~ / . rpmmacros 
 + ` ` ` 
 diff - - git a / redhat / cassandra b / redhat / cassandra 
 new file mode 100644 
 index 0000000 . . 3e59534 
 - - - / dev / null 
 + + + b / redhat / cassandra 
 @ @ - 0 , 0 + 1 , 94 @ @ 
 + # ! / bin / bash 
 + # 
 + # / etc / init . d / cassandra 
 + # 
 + # Startup script for Cassandra 
 + # 
 + # chkconfig : 2345 20 80 
 + # description : Starts and stops Cassandra 
 + 
 + . / etc / rc . d / init . d / functions 
 + 
 + export CASSANDRA _ HOME = / usr / share / cassandra 
 + export CASSANDRA _ CONF = / etc / cassandra / conf 
 + export CASSANDRA _ INCLUDE = $ CASSANDRA _ HOME / cassandra . in . sh 
 + export CASSANDRA _ OWNR = cassandra 
 + NAME = " cassandra " 
 + log _ file = / var / log / cassandra / cassandra . log 
 + pid _ file = / var / run / cassandra / cassandra . pid 
 + lock _ file = / var / lock / subsys / $ NAME 
 + CASSANDRA _ PROG = / usr / sbin / cassandra 
 + 
 + # The first existing directory is used for JAVA _ HOME if needed . 
 + JVM _ SEARCH _ DIRS = " / usr / lib / jvm / jre / usr / lib / jvm / jre - 1 . 7 . * / usr / lib / jvm / java - 1 . 7 . * / jre " 
 + 
 + # Read configuration variable file if it is present 
 + [ - r / etc / default / $ NAME ] & & . / etc / default / $ NAME 
 + 
 + # If JAVA _ HOME has not been set , try to determine it . 
 + if [ - z " $ JAVA _ HOME " ] ; then 
 + # If java is in PATH , use a JAVA _ HOME that corresponds to that . This is 
 + # both consistent with how the upstream startup script works , and with 
 + # the use of alternatives to set a system JVM ( as is done on Debian and 
 + # Red Hat derivatives ) . 
 + java = " ` / usr / bin / which java 2 > / dev / null ` " 
 + if [ - n " $ java " ] ; then 
 + java = ` readlink - - canonicalize " $ java " ` 
 + JAVA _ HOME = ` dirname " \ ` dirname \ $ java \ ` " ` 
 + else 
 + # No JAVA _ HOME set and no java found in PATH ; search for a JVM . 
 + for jdir in $ JVM _ SEARCH _ DIRS ; do 
 + if [ - x " $ jdir / bin / java " ] ; then 
 + JAVA _ HOME = " $ jdir " 
 + break 
 + fi 
 + done 
 + # if JAVA _ HOME is still empty here , punt . 
 + fi 
 + fi 
 + JAVA = " $ JAVA _ HOME / bin / java " 
 + export JAVA _ HOME JAVA 
 + 
 + case " $ 1 " in 
 + start ) 
 + # Cassandra startup 
 + echo - n " Starting Cassandra : " 
 + su $ CASSANDRA _ OWNR - c " $ CASSANDRA _ PROG - p $ pid _ file " > $ log _ file 2 > & 1 
 + retval = $ ? 
 + [ $ retval - eq 0 ] & & touch $ lock _ file 
 + echo " OK " 
 + ; ; 
 + stop ) 
 + # Cassandra shutdown 
 + echo - n " Shutdown Cassandra : " 
 + su $ CASSANDRA _ OWNR - c " kill ` cat $ pid _ file ` " 
 + retval = $ ? 
 + [ $ retval - eq 0 ] & & rm - f $ lock _ file 
 + for t in ` seq 40 ` ; do $ 0 status > / dev / null 2 > & 1 & & sleep 0 . 5 | | break ; done 
 + # Adding a sleep here to give jmx time to wind down ( CASSANDRA - 4483 ) . Not ideal . . . 
 + # Adam Holmberg suggests this , but that would break if the jmx port is changed 
 + # for t in ` seq 40 ` ; do netstat - tnlp | grep " 0 . 0 . 0 . 0 : 7199 " > / dev / null 2 > & 1 & & sleep 0 . 1 | | break ; done 
 + sleep 5 
 + STATUS = ` $ 0 status ` 
 + if [ [ $ STATUS = = " $ NAME is stopped " ] ] ; then 
 + echo " OK " 
 + else 
 + echo " ERROR : could not stop $ NAME : $ STATUS " 
 + exit 1 
 + fi 
 + ; ; 
 + reload | restart ) 
 + $ 0 stop 
 + $ 0 start 
 + ; ; 
 + status ) 
 + status - p $ pid _ file cassandra 
 + exit $ ? 
 + ; ; 
 + * ) 
 + echo " Usage : ` basename $ 0 ` start | stop | status | restart | reload " 
 + exit 1 
 + esac 
 + 
 + exit 0 
 + 
 diff - - git a / redhat / cassandra . conf b / redhat / cassandra . conf 
 new file mode 100644 
 index 0000000 . . a5aebe1 
 - - - / dev / null 
 + + + b / redhat / cassandra . conf 
 @ @ - 0 , 0 + 1 , 4 @ @ 
 + cassandra - memlock unlimited 
 + cassandra - nofile 100000 
 + cassandra - nproc 32768 
 + cassandra - as unlimited 
 diff - - git a / redhat / cassandra . in . sh b / redhat / cassandra . in . sh 
 new file mode 100644 
 index 0000000 . . ca71782 
 - - - / dev / null 
 + + + b / redhat / cassandra . in . sh 
 @ @ - 0 , 0 + 1 , 30 @ @ 
 + 
 + # The directory where Cassandra ' s configs live ( required ) 
 + CASSANDRA _ CONF = / etc / cassandra / conf 
 + 
 + CASSANDRA _ HOME = / usr / share / cassandra 
 + 
 + # The java classpath ( required ) 
 + if [ - n " $ CLASSPATH " ] ; then 
 + CLASSPATH = $ CLASSPATH : $ CASSANDRA _ CONF 
 + else 
 + CLASSPATH = $ CASSANDRA _ CONF 
 + fi 
 + 
 + for jar in / usr / share / cassandra / lib / * . jar ; do 
 + CLASSPATH = $ CLASSPATH : $ jar 
 + done 
 + 
 + for jar in / usr / share / cassandra / * . jar ; do 
 + CLASSPATH = $ CLASSPATH : $ jar 
 + done 
 + 
 + CLASSPATH = " $ CLASSPATH : $ EXTRA _ CLASSPATH " 
 + 
 + 
 + # set JVM javaagent opts to avoid warnings / errors 
 + if [ " $ JVM _ VENDOR " ! = " OpenJDK " - o " $ JVM _ VERSION " \ > " 1 . 6 . 0 " ] \ 
 + | | [ " $ JVM _ VERSION " = " 1 . 6 . 0 " - a " $ JVM _ PATCH _ VERSION " - ge 23 ] 
 + then 
 + JAVA _ AGENT = " $ JAVA _ AGENT - javaagent : $ CASSANDRA _ HOME / lib / jamm - 0 . 3 . 0 . jar " 
 + fi 
 diff - - git a / redhat / cassandra . spec b / redhat / cassandra . spec 
 new file mode 100644 
 index 0000000 . . a1bfa5d 
 - - - / dev / null 
 + + + b / redhat / cassandra . spec 
 @ @ - 0 , 0 + 1 , 177 @ @ 
 + % define _ _ jar _ repack % { nil } 
 + # Turn off the brp - python - bytecompile script 
 + % global _ _ os _ install _ post % ( echo ' % { _ _ os _ install _ post } ' | sed - e ' s ! / usr / lib [ ^ [ : space : ] ] * / brp - python - bytecompile [ [ : space : ] ] . * $ ! ! g ' ) 
 + 
 + % global username cassandra 
 + 
 + % define relname apache - cassandra - % { version } 
 + % define revision 1 
 + 
 + Name : cassandra 
 + Version : % { version } 
 + Release : % { revision } 
 + Summary : Cassandra is a highly scalable , eventually consistent , distributed , structured key - value store . 
 + 
 + Group : Development / Libraries 
 + License : Apache Software License 2 . 0 
 + URL : http : / / cassandra . apache . org / 
 + Source0 : % { relname } - src . tar . gz 
 + BuildRoot : % { _ tmppath } / % { relname } root - % ( % { _ _ id _ u } - n ) 
 + 
 + BuildRequires : ant 
 + 
 + Requires : jre > = 1 . 8 . 0 
 + Requires : python ( abi ) > = 2 . 7 
 + Requires ( pre ) : user ( cassandra ) 
 + Requires ( pre ) : group ( cassandra ) 
 + Requires ( pre ) : shadow - utils 
 + Provides : user ( cassandra ) 
 + Provides : group ( cassandra ) 
 + 
 + BuildArch : noarch 
 + 
 + # Don ' t examine the . so files we bundle for dependencies 
 + AutoReqProv : no 
 + 
 + % description 
 + Cassandra is a distributed ( peer - to - peer ) system for the management and storage of structured data . 
 + 
 + % prep 
 + % setup - q - n % { relname } - src 
 + 
 + % build 
 + export LANG = en _ US . UTF - 8 
 + export JAVA _ TOOL _ OPTIONS = " - Dfile . encoding = UTF - 8 " 
 + ant clean jar - Dversion = % { version } 
 + 
 + % install 
 + % { _ _ rm } - rf % { buildroot } 
 + mkdir - p % { buildroot } / % { _ sysconfdir } / % { username } 
 + mkdir - p % { buildroot } / usr / share / % { username } 
 + mkdir - p % { buildroot } / usr / share / % { username } / lib 
 + mkdir - p % { buildroot } / % { _ sysconfdir } / % { username } / default . conf 
 + mkdir - p % { buildroot } / % { _ sysconfdir } / rc . d / init . d 
 + mkdir - p % { buildroot } / % { _ sysconfdir } / security / limits . d 
 + mkdir - p % { buildroot } / % { _ sysconfdir } / default 
 + mkdir - p % { buildroot } / usr / sbin 
 + mkdir - p % { buildroot } / usr / bin 
 + mkdir - p % { buildroot } / var / lib / % { username } / commitlog 
 + mkdir - p % { buildroot } / var / lib / % { username } / data 
 + mkdir - p % { buildroot } / var / lib / % { username } / saved _ caches 
 + mkdir - p % { buildroot } / var / lib / % { username } / hints 
 + mkdir - p % { buildroot } / var / run / % { username } 
 + mkdir - p % { buildroot } / var / log / % { username } 
 + ( cd pylib & & python2 . 7 setup . py install - - no - compile - - root % { buildroot } ; ) 
 + 
 + # patches for data and log paths 
 + patch - p1 < debian / patches / 001cassandra _ yaml _ dirs . dpatch 
 + patch - p1 < debian / patches / 002cassandra _ logdir _ fix . dpatch 
 + # uncomment hints _ directory path 
 + sed - i ' s / ^ # hints _ directory : / hints _ directory : / ' conf / cassandra . yaml 
 + 
 + # remove batch , powershell , and other files not being installed 
 + rm conf / * . ps1 
 + rm bin / * . bat 
 + rm bin / * . orig 
 + rm bin / * . ps1 
 + rm bin / cassandra . in . sh 
 + rm lib / sigar - bin / * winnt * # strip segfaults on dll . . 
 + rm tools / bin / * . bat 
 + rm tools / bin / cassandra . in . sh 
 + 
 + # copy default configs 
 + cp - pr conf / * % { buildroot } / % { _ sysconfdir } / % { username } / default . conf / 
 + 
 + # step on default config with our redhat one 
 + cp - p redhat / % { username } . in . sh % { buildroot } / usr / share / % { username } / % { username } . in . sh 
 + cp - p redhat / % { username } % { buildroot } / % { _ sysconfdir } / rc . d / init . d / % { username } 
 + cp - p redhat / % { username } . conf % { buildroot } / % { _ sysconfdir } / security / limits . d / 
 + cp - p redhat / default % { buildroot } / % { _ sysconfdir } / default / % { username } 
 + 
 + # copy cassandra bundled libs 
 + cp - pr lib / * % { buildroot } / usr / share / % { username } / lib / 
 + 
 + # copy stress jar 
 + cp - p build / tools / lib / stress . jar % { buildroot } / usr / share / % { username } / 
 + 
 + # copy binaries 
 + mv bin / cassandra % { buildroot } / usr / sbin / 
 + cp - p bin / * % { buildroot } / usr / bin / 
 + cp - p tools / bin / * % { buildroot } / usr / bin / 
 + 
 + # copy cassandra , thrift jars 
 + cp build / apache - cassandra - % { version } . jar % { buildroot } / usr / share / % { username } / 
 + cp build / apache - cassandra - thrift - % { version } . jar % { buildroot } / usr / share / % { username } / 
 + 
 + % clean 
 + % { _ _ rm } - rf % { buildroot } 
 + 
 + % pre 
 + getent group % { username } > / dev / null | | groupadd - r % { username } 
 + getent passwd % { username } > / dev / null | | \ 
 + useradd - d / var / lib / % { username } - g % { username } - M - r % { username } 
 + exit 0 
 + 
 + % files 
 + % defattr ( 0644 , root , root , 0755 ) 
 + % doc CHANGES . txt LICENSE . txt README . asc NEWS . txt NOTICE . txt 
 + % attr ( 755 , root , root ) % { _ bindir } / cassandra - stress 
 + % attr ( 755 , root , root ) % { _ bindir } / cqlsh 
 + % attr ( 755 , root , root ) % { _ bindir } / cqlsh . py 
 + % attr ( 755 , root , root ) % { _ bindir } / debug - cql 
 + % attr ( 755 , root , root ) % { _ bindir } / nodetool 
 + % attr ( 755 , root , root ) % { _ bindir } / sstableloader 
 + % attr ( 755 , root , root ) % { _ bindir } / sstablescrub 
 + % attr ( 755 , root , root ) % { _ bindir } / sstableupgrade 
 + % attr ( 755 , root , root ) % { _ bindir } / sstableutil 
 + % attr ( 755 , root , root ) % { _ bindir } / sstableverify 
 + % attr ( 755 , root , root ) % { _ bindir } / stop - server 
 + % attr ( 755 , root , root ) % { _ sbindir } / cassandra 
 + % attr ( 755 , root , root ) / % { _ sysconfdir } / rc . d / init . d / % { username } 
 + % attr ( 755 , root , root ) / % { _ sysconfdir } / default / % { username } 
 + % attr ( 755 , root , root ) / % { _ sysconfdir } / security / limits . d / % { username } . conf 
 + % attr ( 755 , % { username } , % { username } ) / usr / share / % { username } * 
 + % attr ( 755 , % { username } , % { username } ) % config ( noreplace ) / % { _ sysconfdir } / % { username } 
 + % attr ( 755 , % { username } , % { username } ) % config ( noreplace ) / var / lib / % { username } / * 
 + % attr ( 755 , % { username } , % { username } ) / var / log / % { username } * 
 + % attr ( 755 , % { username } , % { username } ) / var / run / % { username } * 
 + / usr / lib / python2 . 7 / site - packages / cqlshlib / 
 + / usr / lib / python2 . 7 / site - packages / cassandra _ pylib * . egg - info 
 + 
 + % post 
 + alternatives - - install / % { _ sysconfdir } / % { username } / conf % { username } / % { _ sysconfdir } / % { username } / default . conf / 0 
 + exit 0 
 + 
 + % preun 
 + # only delete alternative on removal , not upgrade 
 + if [ " $ 1 " = " 0 " ] ; then 
 + alternatives - - remove % { username } / % { _ sysconfdir } / % { username } / default . conf / 
 + fi 
 + exit 0 
 + 
 + 
 + % package tools 
 + Summary : Extra tools for Cassandra . Cassandra is a highly scalable , eventually consistent , distributed , structured key - value store . 
 + Group : Development / Libraries 
 + Requires : cassandra = % { version } - % { revision } 
 + 
 + % description tools 
 + Cassandra is a distributed ( peer - to - peer ) system for the management and storage of structured data . 
 + . 
 + This package contains extra tools for working with Cassandra clusters . 
 + 
 + % files tools 
 + % attr ( 755 , root , root ) % { _ bindir } / sstabledump 
 + % attr ( 755 , root , root ) % { _ bindir } / cassandra - stressd 
 + % attr ( 755 , root , root ) % { _ bindir } / sstableexpiredblockers 
 + % attr ( 755 , root , root ) % { _ bindir } / sstablelevelreset 
 + % attr ( 755 , root , root ) % { _ bindir } / sstablemetadata 
 + % attr ( 755 , root , root ) % { _ bindir } / sstableofflinerelevel 
 + % attr ( 755 , root , root ) % { _ bindir } / sstablerepairedset 
 + % attr ( 755 , root , root ) % { _ bindir } / sstablesplit 
 + 
 + 
 + % changelog 
 + * Mon Dec 05 2016 Michael Shuler < mshuler @ apache . org > 
 + - 2 . 1 . 17 , 2 . 2 . 9 , 3 . 0 . 11 , 3 . 10 
 + - Reintroduce RPM packaging 
 diff - - git a / redhat / default b / redhat / default 
 new file mode 100644 
 index 0000000 . . 1b56a98 
 - - - / dev / null 
 + + + b / redhat / default 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + # NOTICE : See also / etc / cassandra / cassandra - env . sh 
 + 
 + # EXTRA _ CLASSPATH provides the means to extend Cassandra ' s classpath with 
 + # additional libraries . It is formatted as a colon - delimited list of 
 + # class directories and / or jar files . For example , to enable the 
 + # JMX - to - web bridge install libmx4j - java and uncomment the following . 
 + # EXTRA _ CLASSPATH = " / usr / share / java / mx4j - tools . jar "

NEAREST DIFF:
ELIMINATEDSENTENCE
