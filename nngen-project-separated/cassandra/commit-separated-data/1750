BLEU SCORE: 0.02286956778061902

TEST MSG: Delay " node up " and " node added " notifications until native protocol server is started
GENERATED MSG: Fix binary protocol NEW _ NODE event

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e66b724 . . 8b95fb3 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 <nl> + * Delay " node up " and " node added " notifications until native protocol server is started ( CASSANDRA - 8236 ) <nl> * Compressed Commit Log ( CASSANDRA - 6809 ) <nl> * Optimise IntervalTree ( CASSANDRA - 8988 ) <nl> * Add a key - value payload for third party usage ( CASSANDRA - 8553 ) <nl> diff - - git a / src / java / org / apache / cassandra / gms / ApplicationState . java b / src / java / org / apache / cassandra / gms / ApplicationState . java <nl> index 777dfc5 . . ade9208 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / ApplicationState . java <nl> + + + b / src / java / org / apache / cassandra / gms / ApplicationState . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ public enum ApplicationState <nl> NET _ VERSION , <nl> HOST _ ID , <nl> TOKENS , <nl> + RPC _ READY , <nl> / / pad to allow adding new states to existing cluster <nl> X1 , <nl> X2 , <nl> diff - - git a / src / java / org / apache / cassandra / gms / EndpointState . java b / src / java / org / apache / cassandra / gms / EndpointState . java <nl> index 1029374 . . 0e6985a 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / EndpointState . java <nl> + + + b / src / java / org / apache / cassandra / gms / EndpointState . java <nl> @ @ - 114 , 6 + 114 , 23 @ @ public class EndpointState <nl> isAlive = false ; <nl> } <nl> <nl> + public boolean isRpcReady ( ) <nl> + { <nl> + VersionedValue rpcState = getApplicationState ( ApplicationState . RPC _ READY ) ; <nl> + return rpcState ! = null & & Boolean . parseBoolean ( rpcState . value ) ; <nl> + } <nl> + <nl> + public String getStatus ( ) <nl> + { <nl> + VersionedValue status = getApplicationState ( ApplicationState . STATUS ) ; <nl> + if ( status = = null ) <nl> + return " " ; <nl> + <nl> + String [ ] pieces = status . value . split ( VersionedValue . DELIMITER _ STR , - 1 ) ; <nl> + assert ( pieces . length > 0 ) ; <nl> + return pieces [ 0 ] ; <nl> + } <nl> + <nl> public String toString ( ) <nl> { <nl> return " EndpointState : HeartBeatState = " + hbState + " , AppStateMap = " + applicationState ; <nl> diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index ff1240a . . 07f2615 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 979 , 14 + 979 , 19 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> subscriber . onJoin ( ep , epState ) ; <nl> } <nl> <nl> + public boolean isAlive ( InetAddress endpoint ) <nl> + { <nl> + EndpointState epState = getEndpointStateForEndpoint ( endpoint ) ; <nl> + if ( epState = = null ) <nl> + return false ; <nl> + return epState . isAlive ( ) & & ! isDeadState ( epState ) ; <nl> + } <nl> + <nl> public boolean isDeadState ( EndpointState epState ) <nl> { <nl> - if ( epState . getApplicationState ( ApplicationState . STATUS ) = = null ) <nl> + String state = epState . getStatus ( ) ; <nl> + if ( state . isEmpty ( ) ) <nl> return false ; <nl> - String value = epState . getApplicationState ( ApplicationState . STATUS ) . value ; <nl> - String [ ] pieces = value . split ( VersionedValue . DELIMITER _ STR , - 1 ) ; <nl> - assert ( pieces . length > 0 ) ; <nl> - String state = pieces [ 0 ] ; <nl> for ( String deadstate : DEAD _ STATES ) <nl> { <nl> if ( state . equals ( deadstate ) ) <nl> diff - - git a / src / java / org / apache / cassandra / gms / VersionedValue . java b / src / java / org / apache / cassandra / gms / VersionedValue . java <nl> index e8cf748 . . 203f3a7 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / VersionedValue . java <nl> + + + b / src / java / org / apache / cassandra / gms / VersionedValue . java <nl> @ @ - 212 , 6 + 212 , 11 @ @ public class VersionedValue implements Comparable < VersionedValue > <nl> return new VersionedValue ( VersionedValue . HIBERNATE + VersionedValue . DELIMITER + value ) ; <nl> } <nl> <nl> + public VersionedValue rpcReady ( boolean value ) <nl> + { <nl> + return new VersionedValue ( String . valueOf ( value ) ) ; <nl> + } <nl> + <nl> public VersionedValue datacenter ( String dcId ) <nl> { <nl> return new VersionedValue ( dcId ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index 74e356d . . d6b2d24 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 425 , 7 + 425 , 9 @ @ public class CassandraDaemon <nl> { <nl> String nativeFlag = System . getProperty ( " cassandra . start _ native _ transport " ) ; <nl> if ( ( nativeFlag ! = null & & Boolean . parseBoolean ( nativeFlag ) ) | | ( nativeFlag = = null & & DatabaseDescriptor . startNativeTransport ( ) ) ) <nl> + { <nl> nativeServer . start ( ) ; <nl> + } <nl> else <nl> logger . info ( " Not starting native transport as requested . Use JMX ( StorageService - > startNativeTransport ( ) ) or nodetool ( enablebinary ) to start it " ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index a75c08c . . 40686e5 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 1541 , 6 + 1541 , 9 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> case HOST _ ID : <nl> SystemKeyspace . updatePeerInfo ( endpoint , " host _ id " , UUID . fromString ( value . value ) ) ; <nl> break ; <nl> + case RPC _ READY : <nl> + notifyRpcChange ( endpoint , epState . isRpcReady ( ) ) ; <nl> + break ; <nl> } <nl> } <nl> } <nl> @ @ - 1587 , 6 + 1590 , 71 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> return vvalue . getBytes ( ISO _ 8859 _ 1 ) ; <nl> } <nl> <nl> + private void notifyRpcChange ( InetAddress endpoint , boolean ready ) <nl> + { <nl> + if ( ready ) <nl> + { <nl> + notifyUp ( endpoint ) ; <nl> + notifyJoined ( endpoint ) ; <nl> + } <nl> + else <nl> + { <nl> + notifyDown ( endpoint ) ; <nl> + } <nl> + } <nl> + <nl> + private void notifyUp ( InetAddress endpoint ) <nl> + { <nl> + if ( ! isRpcReady ( endpoint ) | | ! Gossiper . instance . isAlive ( endpoint ) ) <nl> + return ; <nl> + <nl> + for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) <nl> + subscriber . onUp ( endpoint ) ; <nl> + } <nl> + <nl> + private void notifyDown ( InetAddress endpoint ) <nl> + { <nl> + for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) <nl> + subscriber . onDown ( endpoint ) ; <nl> + } <nl> + <nl> + private void notifyJoined ( InetAddress endpoint ) <nl> + { <nl> + if ( ! isRpcReady ( endpoint ) | | ! isStatus ( endpoint , VersionedValue . STATUS _ NORMAL ) ) <nl> + return ; <nl> + <nl> + for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) <nl> + subscriber . onJoinCluster ( endpoint ) ; <nl> + } <nl> + <nl> + private void notifyMoved ( InetAddress endpoint ) <nl> + { <nl> + for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) <nl> + subscriber . onMove ( endpoint ) ; <nl> + } <nl> + <nl> + private void notifyLeft ( InetAddress endpoint ) <nl> + { <nl> + for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) <nl> + subscriber . onLeaveCluster ( endpoint ) ; <nl> + } <nl> + <nl> + private boolean isStatus ( InetAddress endpoint , String status ) <nl> + { <nl> + return Gossiper . instance . getEndpointStateForEndpoint ( endpoint ) . getStatus ( ) . equals ( status ) ; <nl> + } <nl> + <nl> + private boolean isRpcReady ( InetAddress endpoint ) <nl> + { <nl> + return MessagingService . instance ( ) . getVersion ( endpoint ) < MessagingService . VERSION _ 30 | | <nl> + Gossiper . instance . getEndpointStateForEndpoint ( endpoint ) . isRpcReady ( ) ; <nl> + } <nl> + <nl> + public void setRpcReady ( boolean value ) <nl> + { <nl> + Gossiper . instance . addLocalApplicationState ( ApplicationState . RPC _ READY , valueFactory . rpcReady ( value ) ) ; <nl> + } <nl> + <nl> private Collection < Token > getTokensFor ( InetAddress endpoint ) <nl> { <nl> try <nl> @ @ - 1756 , 13 + 1824 , 11 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> if ( isMoving | | operationMode = = Mode . MOVING ) <nl> { <nl> tokenMetadata . removeFromMoving ( endpoint ) ; <nl> - for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) <nl> - subscriber . onMove ( endpoint ) ; <nl> + notifyMoved ( endpoint ) ; <nl> } <nl> else <nl> { <nl> - for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) <nl> - subscriber . onJoinCluster ( endpoint ) ; <nl> + notifyJoined ( endpoint ) ; <nl> } <nl> <nl> PendingRangeCalculatorService . instance . update ( ) ; <nl> @ @ - 1902 , 8 + 1968 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> tokenMetadata . removeEndpoint ( endpoint ) ; <nl> tokenMetadata . removeBootstrapTokens ( tokens ) ; <nl> <nl> - for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) <nl> - subscriber . onLeaveCluster ( endpoint ) ; <nl> + notifyLeft ( endpoint ) ; <nl> PendingRangeCalculatorService . instance . update ( ) ; <nl> } <nl> <nl> @ @ - 2118 , 8 + 2183 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> if ( tokenMetadata . isMember ( endpoint ) ) <nl> { <nl> HintedHandOffManager . instance . scheduleHintDelivery ( endpoint , true ) ; <nl> - for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) <nl> - subscriber . onUp ( endpoint ) ; <nl> + notifyUp ( endpoint ) ; <nl> } <nl> } <nl> <nl> @ @ - 2132 , 8 + 2196 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> public void onDead ( InetAddress endpoint , EndpointState state ) <nl> { <nl> MessagingService . instance ( ) . convict ( endpoint ) ; <nl> - for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) <nl> - subscriber . onDown ( endpoint ) ; <nl> + notifyDown ( endpoint ) ; <nl> } <nl> <nl> public void onRestart ( InetAddress endpoint , EndpointState state ) <nl> diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java <nl> index 3ef7162 . . c7c1bdb 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Server . java <nl> + + + b / src / java / org / apache / cassandra / transport / Server . java <nl> @ @ - 180 , 6 + 180 , 8 @ @ public class Server implements CassandraDaemon . Server <nl> <nl> connectionTracker . allChannels . add ( bindFuture . channel ( ) ) ; <nl> isRunning . set ( true ) ; <nl> + <nl> + StorageService . instance . setRpcReady ( true ) ; <nl> } <nl> <nl> private void registerMetrics ( ) <nl> @ @ - 204 , 6 + 206 , 8 @ @ public class Server implements CassandraDaemon . Server <nl> eventExecutorGroup . shutdown ( ) ; <nl> eventExecutorGroup = null ; <nl> logger . info ( " Stop listening for CQL clients " ) ; <nl> + <nl> + StorageService . instance . setRpcReady ( false ) ; <nl> } <nl> <nl> <nl> @ @ - 211 , 7 + 215 , 7 @ @ public class Server implements CassandraDaemon . Server <nl> { <nl> / / TODO : should we be using the GlobalEventExecutor or defining our own ? <nl> public final ChannelGroup allChannels = new DefaultChannelGroup ( GlobalEventExecutor . INSTANCE ) ; <nl> - private final EnumMap < Event . Type , ChannelGroup > groups = new EnumMap < Event . Type , ChannelGroup > ( Event . Type . class ) ; <nl> + private final EnumMap < Event . Type , ChannelGroup > groups = new EnumMap < > ( Event . Type . class ) ; <nl> <nl> public ConnectionTracker ( ) <nl> { <nl> @ @ - 333 , 10 + 337 , 48 @ @ public class Server implements CassandraDaemon . Server <nl> } <nl> } <nl> <nl> + private static class LatestEvent <nl> + { <nl> + public final Event . StatusChange . Status status ; <nl> + public final Event . TopologyChange . Change topology ; <nl> + <nl> + private LatestEvent ( Event . StatusChange . Status status , Event . TopologyChange . Change topology ) <nl> + { <nl> + this . status = status ; <nl> + this . topology = topology ; <nl> + } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return String . format ( " Status % s , Topology % s " , status , topology ) ; <nl> + } <nl> + <nl> + public static LatestEvent forStatusChange ( Event . StatusChange . Status status , LatestEvent prev ) <nl> + { <nl> + return new LatestEvent ( status , <nl> + prev = = null ? <nl> + null : <nl> + prev . topology ) ; <nl> + } <nl> + <nl> + public static LatestEvent forTopologyChange ( Event . TopologyChange . Change change , LatestEvent prev ) <nl> + { <nl> + return new LatestEvent ( prev = = null ? <nl> + null : <nl> + prev . status , <nl> + change ) ; <nl> + } <nl> + } <nl> + <nl> private static class EventNotifier extends MigrationListener implements IEndpointLifecycleSubscriber <nl> { <nl> private final Server server ; <nl> - private final Map < InetAddress , Event . StatusChange . Status > lastStatusChange = new ConcurrentHashMap < > ( ) ; <nl> + <nl> + / / We keep track of the latest events we have sent to avoid sending duplicates <nl> + / / since StorageService may send duplicate notifications ( CASSANDRA - 7816 , CASSANDRA - 8236 ) <nl> + private final Map < InetAddress , LatestEvent > latestEvents = new ConcurrentHashMap < > ( ) ; <nl> + <nl> private static final InetAddress bindAll ; <nl> static { <nl> try <nl> @ @ - 376 , 31 + 418 , 55 @ @ public class Server implements CassandraDaemon . Server <nl> <nl> public void onJoinCluster ( InetAddress endpoint ) <nl> { <nl> - server . connectionTracker . send ( Event . TopologyChange . newNode ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; <nl> + onTopologyChange ( endpoint , Event . TopologyChange . newNode ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; <nl> } <nl> <nl> public void onLeaveCluster ( InetAddress endpoint ) <nl> { <nl> - server . connectionTracker . send ( Event . TopologyChange . removedNode ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; <nl> + onTopologyChange ( endpoint , Event . TopologyChange . removedNode ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; <nl> } <nl> <nl> public void onMove ( InetAddress endpoint ) <nl> { <nl> - server . connectionTracker . send ( Event . TopologyChange . movedNode ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; <nl> + onTopologyChange ( endpoint , Event . TopologyChange . movedNode ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; <nl> } <nl> <nl> public void onUp ( InetAddress endpoint ) <nl> { <nl> - Event . StatusChange . Status prev = lastStatusChange . put ( endpoint , Event . StatusChange . Status . UP ) ; <nl> - if ( prev = = null | | prev ! = Event . StatusChange . Status . UP ) <nl> - server . connectionTracker . send ( Event . StatusChange . nodeUp ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; <nl> + onStatusChange ( endpoint , Event . StatusChange . nodeUp ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; <nl> } <nl> <nl> public void onDown ( InetAddress endpoint ) <nl> { <nl> - Event . StatusChange . Status prev = lastStatusChange . put ( endpoint , Event . StatusChange . Status . DOWN ) ; <nl> - if ( prev = = null | | prev ! = Event . StatusChange . Status . DOWN ) <nl> - server . connectionTracker . send ( Event . StatusChange . nodeDown ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; <nl> + onStatusChange ( endpoint , Event . StatusChange . nodeDown ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; <nl> + } <nl> + <nl> + private void onTopologyChange ( InetAddress endpoint , Event . TopologyChange event ) <nl> + { <nl> + if ( logger . isTraceEnabled ( ) ) <nl> + logger . trace ( " Topology changed event : { } , { } " , endpoint , event . change ) ; <nl> + <nl> + LatestEvent prev = latestEvents . get ( endpoint ) ; <nl> + if ( prev = = null | | prev . topology ! = event . change ) <nl> + { <nl> + LatestEvent ret = latestEvents . put ( endpoint , LatestEvent . forTopologyChange ( event . change , prev ) ) ; <nl> + if ( ret = = prev ) <nl> + server . connectionTracker . send ( event ) ; <nl> + } <nl> + } <nl> + <nl> + private void onStatusChange ( InetAddress endpoint , Event . StatusChange event ) <nl> + { <nl> + if ( logger . isTraceEnabled ( ) ) <nl> + logger . trace ( " Status changed event : { } , { } " , endpoint , event . status ) ; <nl> + <nl> + LatestEvent prev = latestEvents . get ( endpoint ) ; <nl> + if ( prev = = null | | prev . status ! = event . status ) <nl> + { <nl> + LatestEvent ret = latestEvents . put ( endpoint , LatestEvent . forStatusChange ( event . status , prev ) ) ; <nl> + if ( ret = = prev ) <nl> + server . connectionTracker . send ( event ) ; <nl> + } <nl> } <nl> <nl> public void onCreateKeyspace ( String ksName )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e25bfbf . . 1416351 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 2 - beta2 <nl> + * add extension point for sstable components ( CASSANDRA - 4049 ) <nl> * improve tracing output ( CASSANDRA - 4852 , 4862 ) <nl> * make TRACE verb droppable ( CASSANDRA - 4672 ) <nl> * fix BulkLoader recognition of CQL3 columnfamilies ( CASSANDRA - 4755 ) <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / Component . java b / src / java / org / apache / cassandra / io / sstable / Component . java <nl> index 7a001ab . . cbc12d9 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / Component . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / Component . java <nl> @ @ - 34 , 7 + 34 , 7 @ @ public class Component <nl> public static final char separator = ' - ' ; <nl> <nl> final static EnumSet < Type > TYPES = EnumSet . allOf ( Type . class ) ; <nl> - enum Type <nl> + public enum Type <nl> { <nl> / / the base data for an sstable : the remaining components can be regenerated <nl> / / based on the data component <nl> @ @ - 54 , 7 + 54 , 11 @ @ public class Component <nl> / / holds sha1 sum of the data file ( to be checked by sha1sum ) <nl> DIGEST ( " Digest . sha1 " ) , <nl> / / holds SSTable Index Summary and Boundaries <nl> - SUMMARY ( " Summary . db " ) ; <nl> + SUMMARY ( " Summary . db " ) , <nl> + / / table of contents , stores the list of all components for the sstable <nl> + TOC ( " TOC . txt " ) , <nl> + / / custom component , used by e . g . custom compaction strategy <nl> + CUSTOM ( null ) ; <nl> <nl> final String repr ; <nl> Type ( String repr ) <nl> @ @ - 67 , 34 + 71 , 37 @ @ public class Component <nl> for ( Type type : TYPES ) <nl> if ( repr . equals ( type . repr ) ) <nl> return type ; <nl> - throw new RuntimeException ( " Invalid SSTable component : ' " + repr + " ' " ) ; <nl> + return CUSTOM ; <nl> } <nl> } <nl> <nl> / / singleton components for types that don ' t need ids <nl> - public final static Component DATA = new Component ( Type . DATA , - 1 ) ; <nl> - public final static Component PRIMARY _ INDEX = new Component ( Type . PRIMARY _ INDEX , - 1 ) ; <nl> - public final static Component FILTER = new Component ( Type . FILTER , - 1 ) ; <nl> - public final static Component COMPACTED _ MARKER = new Component ( Type . COMPACTED _ MARKER , - 1 ) ; <nl> - public final static Component COMPRESSION _ INFO = new Component ( Type . COMPRESSION _ INFO , - 1 ) ; <nl> - public final static Component STATS = new Component ( Type . STATS , - 1 ) ; <nl> - public final static Component DIGEST = new Component ( Type . DIGEST , - 1 ) ; <nl> - public final static Component SUMMARY = new Component ( Type . SUMMARY , - 1 ) ; <nl> + public final static Component DATA = new Component ( Type . DATA ) ; <nl> + public final static Component PRIMARY _ INDEX = new Component ( Type . PRIMARY _ INDEX ) ; <nl> + public final static Component FILTER = new Component ( Type . FILTER ) ; <nl> + public final static Component COMPACTED _ MARKER = new Component ( Type . COMPACTED _ MARKER ) ; <nl> + public final static Component COMPRESSION _ INFO = new Component ( Type . COMPRESSION _ INFO ) ; <nl> + public final static Component STATS = new Component ( Type . STATS ) ; <nl> + public final static Component DIGEST = new Component ( Type . DIGEST ) ; <nl> + public final static Component SUMMARY = new Component ( Type . SUMMARY ) ; <nl> + public final static Component TOC = new Component ( Type . TOC ) ; <nl> <nl> public final Type type ; <nl> - public final int id ; <nl> + public final String name ; <nl> public final int hashCode ; <nl> <nl> public Component ( Type type ) <nl> { <nl> - this ( type , - 1 ) ; <nl> + this ( type , type . repr ) ; <nl> + assert type ! = Type . CUSTOM ; <nl> } <nl> <nl> - public Component ( Type type , int id ) <nl> + public Component ( Type type , String name ) <nl> { <nl> + assert name ! = null : " Component name cannot be null " ; <nl> this . type = type ; <nl> - this . id = id ; <nl> - this . hashCode = Objects . hashCode ( type , id ) ; <nl> + this . name = name ; <nl> + this . hashCode = Objects . hashCode ( type , name ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 102 , 7 + 109 , 7 @ @ public class Component <nl> * / <nl> public String name ( ) <nl> { <nl> - return type . repr ; <nl> + return name ; <nl> } <nl> <nl> / * * <nl> @ @ - 120 , 14 + 127 , 16 @ @ public class Component <nl> Component component ; <nl> switch ( type ) <nl> { <nl> - case DATA : component = Component . DATA ; break ; <nl> - case PRIMARY _ INDEX : component = Component . PRIMARY _ INDEX ; break ; <nl> - case FILTER : component = Component . FILTER ; break ; <nl> - case COMPACTED _ MARKER : component = Component . COMPACTED _ MARKER ; break ; <nl> - case COMPRESSION _ INFO : component = Component . COMPRESSION _ INFO ; break ; <nl> - case STATS : component = Component . STATS ; break ; <nl> - case DIGEST : component = Component . DIGEST ; break ; <nl> + case DATA : component = Component . DATA ; break ; <nl> + case PRIMARY _ INDEX : component = Component . PRIMARY _ INDEX ; break ; <nl> + case FILTER : component = Component . FILTER ; break ; <nl> + case COMPACTED _ MARKER : component = Component . COMPACTED _ MARKER ; break ; <nl> + case COMPRESSION _ INFO : component = Component . COMPRESSION _ INFO ; break ; <nl> + case STATS : component = Component . STATS ; break ; <nl> + case DIGEST : component = Component . DIGEST ; break ; <nl> case SUMMARY : component = Component . SUMMARY ; break ; <nl> + case TOC : component = Component . TOC ; break ; <nl> + case CUSTOM : component = new Component ( Type . CUSTOM , path . right ) ; break ; <nl> default : <nl> throw new IllegalStateException ( ) ; <nl> } <nl> @ @ - 149 , 7 + 158 , 7 @ @ public class Component <nl> if ( ! ( o instanceof Component ) ) <nl> return false ; <nl> Component that = ( Component ) o ; <nl> - return this . type = = that . type & & this . id = = that . id ; <nl> + return this . type = = that . type & & this . name . equals ( that . name ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTable . java b / src / java / org / apache / cassandra / io / sstable / SSTable . java <nl> index 8b4bafb . . c7486ba 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTable . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTable . java <nl> @ @ - 17 , 20 + 17 , 24 @ @ <nl> * / <nl> package org . apache . cassandra . io . sstable ; <nl> <nl> - import java . io . File ; <nl> - import java . io . IOException ; <nl> + import java . io . * ; <nl> + import java . nio . charset . Charset ; <nl> import java . util . * ; <nl> + import java . util . concurrent . CopyOnWriteArraySet ; <nl> <nl> + import com . google . common . base . Predicates ; <nl> + import com . google . common . collect . Collections2 ; <nl> import com . google . common . collect . Ordering ; <nl> import com . google . common . collect . Sets ; <nl> - <nl> - import org . apache . cassandra . db . DecoratedKey ; <nl> + import com . google . common . io . Files ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . config . CFMetaData ; <nl> + import org . apache . cassandra . db . DecoratedKey ; <nl> import org . apache . cassandra . db . RowIndexEntry ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> + import org . apache . cassandra . io . FSWriteError ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . io . util . RandomAccessReader ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> @ @ - 103 , 7 + 107 , 7 @ @ public abstract class SSTable <nl> assert component . type ! = Component . Type . COMPACTED _ MARKER ; <nl> <nl> this . compression = dataComponents . contains ( Component . COMPRESSION _ INFO ) ; <nl> - this . components = Collections . unmodifiableSet ( dataComponents ) ; <nl> + this . components = new CopyOnWriteArraySet < Component > ( dataComponents ) ; <nl> this . metadata = metadata ; <nl> this . partitioner = partitioner ; <nl> } <nl> @ @ - 183 , 36 + 187 , 52 @ @ public abstract class SSTable <nl> } <nl> <nl> / * * <nl> - * @ return A Descriptor , Component pair , or null if not a valid sstable component . <nl> + * @ return A Descriptor , Component pair . If component is of unknown type , returns CUSTOM component . <nl> * / <nl> public static Pair < Descriptor , Component > tryComponentFromFilename ( File dir , String name ) <nl> { <nl> + return Component . fromFilename ( dir , name ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Discovers existing components for the descriptor . Slow : only intended for use outside the critical path . <nl> + * / <nl> + static Set < Component > componentsFor ( final Descriptor desc ) <nl> + { <nl> try <nl> { <nl> - return Component . fromFilename ( dir , name ) ; <nl> + try <nl> + { <nl> + return readTOC ( desc ) ; <nl> + } <nl> + catch ( FileNotFoundException e ) <nl> + { <nl> + Set < Component > components = discoverComponentsFor ( desc ) ; <nl> + if ( components . isEmpty ( ) ) <nl> + return components ; / / sstable doesn ' t exist yet <nl> + <nl> + if ( ! components . contains ( Component . TOC ) ) <nl> + components . add ( Component . TOC ) ; <nl> + appendTOC ( desc , components ) ; <nl> + return components ; <nl> + } <nl> } <nl> - catch ( Exception e ) <nl> + catch ( IOException e ) <nl> { <nl> - if ( ! " snapshots " . equals ( name ) & & ! " backups " . equals ( name ) <nl> - & & ! name . contains ( " . json " ) ) <nl> - logger . warn ( " Invalid file ' { } ' in data directory { } . " , name , dir ) ; <nl> - return null ; <nl> + throw new IOError ( e ) ; <nl> } <nl> } <nl> <nl> - / * * <nl> - * Discovers existing components for the descriptor . Slow : only intended for use outside the critical path . <nl> - * / <nl> - static Set < Component > componentsFor ( final Descriptor desc ) <nl> + private static Set < Component > discoverComponentsFor ( Descriptor desc ) <nl> { <nl> - Set < Component > components = Sets . newHashSetWithExpectedSize ( Component . TYPES . size ( ) ) ; <nl> - for ( Component . Type componentType : Component . TYPES ) <nl> + Set < Component . Type > knownTypes = Sets . difference ( Component . TYPES , Collections . singleton ( Component . Type . CUSTOM ) ) ; <nl> + Set < Component > components = Sets . newHashSetWithExpectedSize ( knownTypes . size ( ) ) ; <nl> + for ( Component . Type componentType : knownTypes ) <nl> { <nl> Component component = new Component ( componentType ) ; <nl> if ( new File ( desc . filenameFor ( component ) ) . exists ( ) ) <nl> components . add ( component ) ; <nl> } <nl> - <nl> return components ; <nl> } <nl> <nl> @ @ - 261 , 4 + 281 , 60 @ @ public abstract class SSTable <nl> " path = ' " + getFilename ( ) + ' \ ' ' + <nl> ' ) ' ; <nl> } <nl> + <nl> + / * * <nl> + * Reads the list of components from the TOC component . <nl> + * @ return set of components found in the TOC <nl> + * / <nl> + protected static Set < Component > readTOC ( Descriptor descriptor ) throws IOException <nl> + { <nl> + File tocFile = new File ( descriptor . filenameFor ( Component . TOC ) ) ; <nl> + List < String > componentNames = Files . readLines ( tocFile , Charset . defaultCharset ( ) ) ; <nl> + Set < Component > components = Sets . newHashSetWithExpectedSize ( componentNames . size ( ) ) ; <nl> + for ( String componentName : componentNames ) <nl> + { <nl> + Component component = new Component ( Component . Type . fromRepresentation ( componentName ) , componentName ) ; <nl> + if ( ! new File ( descriptor . filenameFor ( component ) ) . exists ( ) ) <nl> + logger . error ( " Missing component : " + descriptor . filenameFor ( component ) ) ; <nl> + else <nl> + components . add ( component ) ; <nl> + } <nl> + return components ; <nl> + } <nl> + <nl> + / * * <nl> + * Appends new component names to the TOC component . <nl> + * / <nl> + protected static void appendTOC ( Descriptor descriptor , Collection < Component > components ) <nl> + { <nl> + File tocFile = new File ( descriptor . filenameFor ( Component . TOC ) ) ; <nl> + PrintWriter w = null ; <nl> + try <nl> + { <nl> + w = new PrintWriter ( new FileWriter ( tocFile , true ) ) ; <nl> + for ( Component component : components ) <nl> + w . println ( component . name ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new FSWriteError ( e , tocFile ) ; <nl> + } <nl> + finally <nl> + { <nl> + FileUtils . closeQuietly ( w ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Registers new custom components . Used by custom compaction strategies . <nl> + * Adding a component for the second time is a no - op . <nl> + * Don ' t remove this - this method is a part of the public API , intended for use by custom compaction strategies . <nl> + * @ param newComponents collection of components to be added <nl> + * / <nl> + public synchronized void addComponents ( Collection < Component > newComponents ) <nl> + { <nl> + Collection < Component > componentsToAdd = Collections2 . filter ( newComponents , Predicates . not ( Predicates . in ( components ) ) ) ; <nl> + appendTOC ( descriptor , componentsToAdd ) ; <nl> + components . addAll ( componentsToAdd ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> index 06e6826 . . c17de4c 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> @ @ - 62 , 10 + 62 , 11 @ @ public class SSTableWriter extends SSTable <nl> private static Set < Component > components ( CFMetaData metadata ) <nl> { <nl> Set < Component > components = new HashSet < Component > ( Arrays . asList ( Component . DATA , <nl> - Component . FILTER , <nl> - Component . PRIMARY _ INDEX , <nl> - Component . STATS , <nl> - Component . SUMMARY ) ) ; <nl> + Component . FILTER , <nl> + Component . PRIMARY _ INDEX , <nl> + Component . STATS , <nl> + Component . SUMMARY , <nl> + Component . TOC ) ) ; <nl> <nl> if ( metadata . compressionParameters ( ) . sstableCompressor ! = null ) <nl> components . add ( Component . COMPRESSION _ INFO ) ; <nl> @ @ - 324 , 6 + 325 , 9 @ @ public class SSTableWriter extends SSTable <nl> writeMetadata ( descriptor , sstableMetadata ) ; <nl> maybeWriteDigest ( ) ; <nl> <nl> + / / save the table of components <nl> + SSTable . appendTOC ( descriptor , components ) ; <nl> + <nl> / / remove the ' tmp ' marker from all components <nl> final Descriptor newdesc = rename ( descriptor , components ) ; <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e66b724 . . 8b95fb3 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 
 + * Delay " node up " and " node added " notifications until native protocol server is started ( CASSANDRA - 8236 ) 
 * Compressed Commit Log ( CASSANDRA - 6809 ) 
 * Optimise IntervalTree ( CASSANDRA - 8988 ) 
 * Add a key - value payload for third party usage ( CASSANDRA - 8553 ) 
 diff - - git a / src / java / org / apache / cassandra / gms / ApplicationState . java b / src / java / org / apache / cassandra / gms / ApplicationState . java 
 index 777dfc5 . . ade9208 100644 
 - - - a / src / java / org / apache / cassandra / gms / ApplicationState . java 
 + + + b / src / java / org / apache / cassandra / gms / ApplicationState . java 
 @ @ - 33 , 6 + 33 , 7 @ @ public enum ApplicationState 
 NET _ VERSION , 
 HOST _ ID , 
 TOKENS , 
 + RPC _ READY , 
 / / pad to allow adding new states to existing cluster 
 X1 , 
 X2 , 
 diff - - git a / src / java / org / apache / cassandra / gms / EndpointState . java b / src / java / org / apache / cassandra / gms / EndpointState . java 
 index 1029374 . . 0e6985a 100644 
 - - - a / src / java / org / apache / cassandra / gms / EndpointState . java 
 + + + b / src / java / org / apache / cassandra / gms / EndpointState . java 
 @ @ - 114 , 6 + 114 , 23 @ @ public class EndpointState 
 isAlive = false ; 
 } 
 
 + public boolean isRpcReady ( ) 
 + { 
 + VersionedValue rpcState = getApplicationState ( ApplicationState . RPC _ READY ) ; 
 + return rpcState ! = null & & Boolean . parseBoolean ( rpcState . value ) ; 
 + } 
 + 
 + public String getStatus ( ) 
 + { 
 + VersionedValue status = getApplicationState ( ApplicationState . STATUS ) ; 
 + if ( status = = null ) 
 + return " " ; 
 + 
 + String [ ] pieces = status . value . split ( VersionedValue . DELIMITER _ STR , - 1 ) ; 
 + assert ( pieces . length > 0 ) ; 
 + return pieces [ 0 ] ; 
 + } 
 + 
 public String toString ( ) 
 { 
 return " EndpointState : HeartBeatState = " + hbState + " , AppStateMap = " + applicationState ; 
 diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index ff1240a . . 07f2615 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 979 , 14 + 979 , 19 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 subscriber . onJoin ( ep , epState ) ; 
 } 
 
 + public boolean isAlive ( InetAddress endpoint ) 
 + { 
 + EndpointState epState = getEndpointStateForEndpoint ( endpoint ) ; 
 + if ( epState = = null ) 
 + return false ; 
 + return epState . isAlive ( ) & & ! isDeadState ( epState ) ; 
 + } 
 + 
 public boolean isDeadState ( EndpointState epState ) 
 { 
 - if ( epState . getApplicationState ( ApplicationState . STATUS ) = = null ) 
 + String state = epState . getStatus ( ) ; 
 + if ( state . isEmpty ( ) ) 
 return false ; 
 - String value = epState . getApplicationState ( ApplicationState . STATUS ) . value ; 
 - String [ ] pieces = value . split ( VersionedValue . DELIMITER _ STR , - 1 ) ; 
 - assert ( pieces . length > 0 ) ; 
 - String state = pieces [ 0 ] ; 
 for ( String deadstate : DEAD _ STATES ) 
 { 
 if ( state . equals ( deadstate ) ) 
 diff - - git a / src / java / org / apache / cassandra / gms / VersionedValue . java b / src / java / org / apache / cassandra / gms / VersionedValue . java 
 index e8cf748 . . 203f3a7 100644 
 - - - a / src / java / org / apache / cassandra / gms / VersionedValue . java 
 + + + b / src / java / org / apache / cassandra / gms / VersionedValue . java 
 @ @ - 212 , 6 + 212 , 11 @ @ public class VersionedValue implements Comparable < VersionedValue > 
 return new VersionedValue ( VersionedValue . HIBERNATE + VersionedValue . DELIMITER + value ) ; 
 } 
 
 + public VersionedValue rpcReady ( boolean value ) 
 + { 
 + return new VersionedValue ( String . valueOf ( value ) ) ; 
 + } 
 + 
 public VersionedValue datacenter ( String dcId ) 
 { 
 return new VersionedValue ( dcId ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index 74e356d . . d6b2d24 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 425 , 7 + 425 , 9 @ @ public class CassandraDaemon 
 { 
 String nativeFlag = System . getProperty ( " cassandra . start _ native _ transport " ) ; 
 if ( ( nativeFlag ! = null & & Boolean . parseBoolean ( nativeFlag ) ) | | ( nativeFlag = = null & & DatabaseDescriptor . startNativeTransport ( ) ) ) 
 + { 
 nativeServer . start ( ) ; 
 + } 
 else 
 logger . info ( " Not starting native transport as requested . Use JMX ( StorageService - > startNativeTransport ( ) ) or nodetool ( enablebinary ) to start it " ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index a75c08c . . 40686e5 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 1541 , 6 + 1541 , 9 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 case HOST _ ID : 
 SystemKeyspace . updatePeerInfo ( endpoint , " host _ id " , UUID . fromString ( value . value ) ) ; 
 break ; 
 + case RPC _ READY : 
 + notifyRpcChange ( endpoint , epState . isRpcReady ( ) ) ; 
 + break ; 
 } 
 } 
 } 
 @ @ - 1587 , 6 + 1590 , 71 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 return vvalue . getBytes ( ISO _ 8859 _ 1 ) ; 
 } 
 
 + private void notifyRpcChange ( InetAddress endpoint , boolean ready ) 
 + { 
 + if ( ready ) 
 + { 
 + notifyUp ( endpoint ) ; 
 + notifyJoined ( endpoint ) ; 
 + } 
 + else 
 + { 
 + notifyDown ( endpoint ) ; 
 + } 
 + } 
 + 
 + private void notifyUp ( InetAddress endpoint ) 
 + { 
 + if ( ! isRpcReady ( endpoint ) | | ! Gossiper . instance . isAlive ( endpoint ) ) 
 + return ; 
 + 
 + for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) 
 + subscriber . onUp ( endpoint ) ; 
 + } 
 + 
 + private void notifyDown ( InetAddress endpoint ) 
 + { 
 + for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) 
 + subscriber . onDown ( endpoint ) ; 
 + } 
 + 
 + private void notifyJoined ( InetAddress endpoint ) 
 + { 
 + if ( ! isRpcReady ( endpoint ) | | ! isStatus ( endpoint , VersionedValue . STATUS _ NORMAL ) ) 
 + return ; 
 + 
 + for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) 
 + subscriber . onJoinCluster ( endpoint ) ; 
 + } 
 + 
 + private void notifyMoved ( InetAddress endpoint ) 
 + { 
 + for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) 
 + subscriber . onMove ( endpoint ) ; 
 + } 
 + 
 + private void notifyLeft ( InetAddress endpoint ) 
 + { 
 + for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) 
 + subscriber . onLeaveCluster ( endpoint ) ; 
 + } 
 + 
 + private boolean isStatus ( InetAddress endpoint , String status ) 
 + { 
 + return Gossiper . instance . getEndpointStateForEndpoint ( endpoint ) . getStatus ( ) . equals ( status ) ; 
 + } 
 + 
 + private boolean isRpcReady ( InetAddress endpoint ) 
 + { 
 + return MessagingService . instance ( ) . getVersion ( endpoint ) < MessagingService . VERSION _ 30 | | 
 + Gossiper . instance . getEndpointStateForEndpoint ( endpoint ) . isRpcReady ( ) ; 
 + } 
 + 
 + public void setRpcReady ( boolean value ) 
 + { 
 + Gossiper . instance . addLocalApplicationState ( ApplicationState . RPC _ READY , valueFactory . rpcReady ( value ) ) ; 
 + } 
 + 
 private Collection < Token > getTokensFor ( InetAddress endpoint ) 
 { 
 try 
 @ @ - 1756 , 13 + 1824 , 11 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 if ( isMoving | | operationMode = = Mode . MOVING ) 
 { 
 tokenMetadata . removeFromMoving ( endpoint ) ; 
 - for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) 
 - subscriber . onMove ( endpoint ) ; 
 + notifyMoved ( endpoint ) ; 
 } 
 else 
 { 
 - for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) 
 - subscriber . onJoinCluster ( endpoint ) ; 
 + notifyJoined ( endpoint ) ; 
 } 
 
 PendingRangeCalculatorService . instance . update ( ) ; 
 @ @ - 1902 , 8 + 1968 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 tokenMetadata . removeEndpoint ( endpoint ) ; 
 tokenMetadata . removeBootstrapTokens ( tokens ) ; 
 
 - for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) 
 - subscriber . onLeaveCluster ( endpoint ) ; 
 + notifyLeft ( endpoint ) ; 
 PendingRangeCalculatorService . instance . update ( ) ; 
 } 
 
 @ @ - 2118 , 8 + 2183 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 if ( tokenMetadata . isMember ( endpoint ) ) 
 { 
 HintedHandOffManager . instance . scheduleHintDelivery ( endpoint , true ) ; 
 - for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) 
 - subscriber . onUp ( endpoint ) ; 
 + notifyUp ( endpoint ) ; 
 } 
 } 
 
 @ @ - 2132 , 8 + 2196 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 public void onDead ( InetAddress endpoint , EndpointState state ) 
 { 
 MessagingService . instance ( ) . convict ( endpoint ) ; 
 - for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) 
 - subscriber . onDown ( endpoint ) ; 
 + notifyDown ( endpoint ) ; 
 } 
 
 public void onRestart ( InetAddress endpoint , EndpointState state ) 
 diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java 
 index 3ef7162 . . c7c1bdb 100644 
 - - - a / src / java / org / apache / cassandra / transport / Server . java 
 + + + b / src / java / org / apache / cassandra / transport / Server . java 
 @ @ - 180 , 6 + 180 , 8 @ @ public class Server implements CassandraDaemon . Server 
 
 connectionTracker . allChannels . add ( bindFuture . channel ( ) ) ; 
 isRunning . set ( true ) ; 
 + 
 + StorageService . instance . setRpcReady ( true ) ; 
 } 
 
 private void registerMetrics ( ) 
 @ @ - 204 , 6 + 206 , 8 @ @ public class Server implements CassandraDaemon . Server 
 eventExecutorGroup . shutdown ( ) ; 
 eventExecutorGroup = null ; 
 logger . info ( " Stop listening for CQL clients " ) ; 
 + 
 + StorageService . instance . setRpcReady ( false ) ; 
 } 
 
 
 @ @ - 211 , 7 + 215 , 7 @ @ public class Server implements CassandraDaemon . Server 
 { 
 / / TODO : should we be using the GlobalEventExecutor or defining our own ? 
 public final ChannelGroup allChannels = new DefaultChannelGroup ( GlobalEventExecutor . INSTANCE ) ; 
 - private final EnumMap < Event . Type , ChannelGroup > groups = new EnumMap < Event . Type , ChannelGroup > ( Event . Type . class ) ; 
 + private final EnumMap < Event . Type , ChannelGroup > groups = new EnumMap < > ( Event . Type . class ) ; 
 
 public ConnectionTracker ( ) 
 { 
 @ @ - 333 , 10 + 337 , 48 @ @ public class Server implements CassandraDaemon . Server 
 } 
 } 
 
 + private static class LatestEvent 
 + { 
 + public final Event . StatusChange . Status status ; 
 + public final Event . TopologyChange . Change topology ; 
 + 
 + private LatestEvent ( Event . StatusChange . Status status , Event . TopologyChange . Change topology ) 
 + { 
 + this . status = status ; 
 + this . topology = topology ; 
 + } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return String . format ( " Status % s , Topology % s " , status , topology ) ; 
 + } 
 + 
 + public static LatestEvent forStatusChange ( Event . StatusChange . Status status , LatestEvent prev ) 
 + { 
 + return new LatestEvent ( status , 
 + prev = = null ? 
 + null : 
 + prev . topology ) ; 
 + } 
 + 
 + public static LatestEvent forTopologyChange ( Event . TopologyChange . Change change , LatestEvent prev ) 
 + { 
 + return new LatestEvent ( prev = = null ? 
 + null : 
 + prev . status , 
 + change ) ; 
 + } 
 + } 
 + 
 private static class EventNotifier extends MigrationListener implements IEndpointLifecycleSubscriber 
 { 
 private final Server server ; 
 - private final Map < InetAddress , Event . StatusChange . Status > lastStatusChange = new ConcurrentHashMap < > ( ) ; 
 + 
 + / / We keep track of the latest events we have sent to avoid sending duplicates 
 + / / since StorageService may send duplicate notifications ( CASSANDRA - 7816 , CASSANDRA - 8236 ) 
 + private final Map < InetAddress , LatestEvent > latestEvents = new ConcurrentHashMap < > ( ) ; 
 + 
 private static final InetAddress bindAll ; 
 static { 
 try 
 @ @ - 376 , 31 + 418 , 55 @ @ public class Server implements CassandraDaemon . Server 
 
 public void onJoinCluster ( InetAddress endpoint ) 
 { 
 - server . connectionTracker . send ( Event . TopologyChange . newNode ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; 
 + onTopologyChange ( endpoint , Event . TopologyChange . newNode ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; 
 } 
 
 public void onLeaveCluster ( InetAddress endpoint ) 
 { 
 - server . connectionTracker . send ( Event . TopologyChange . removedNode ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; 
 + onTopologyChange ( endpoint , Event . TopologyChange . removedNode ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; 
 } 
 
 public void onMove ( InetAddress endpoint ) 
 { 
 - server . connectionTracker . send ( Event . TopologyChange . movedNode ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; 
 + onTopologyChange ( endpoint , Event . TopologyChange . movedNode ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; 
 } 
 
 public void onUp ( InetAddress endpoint ) 
 { 
 - Event . StatusChange . Status prev = lastStatusChange . put ( endpoint , Event . StatusChange . Status . UP ) ; 
 - if ( prev = = null | | prev ! = Event . StatusChange . Status . UP ) 
 - server . connectionTracker . send ( Event . StatusChange . nodeUp ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; 
 + onStatusChange ( endpoint , Event . StatusChange . nodeUp ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; 
 } 
 
 public void onDown ( InetAddress endpoint ) 
 { 
 - Event . StatusChange . Status prev = lastStatusChange . put ( endpoint , Event . StatusChange . Status . DOWN ) ; 
 - if ( prev = = null | | prev ! = Event . StatusChange . Status . DOWN ) 
 - server . connectionTracker . send ( Event . StatusChange . nodeDown ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; 
 + onStatusChange ( endpoint , Event . StatusChange . nodeDown ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; 
 + } 
 + 
 + private void onTopologyChange ( InetAddress endpoint , Event . TopologyChange event ) 
 + { 
 + if ( logger . isTraceEnabled ( ) ) 
 + logger . trace ( " Topology changed event : { } , { } " , endpoint , event . change ) ; 
 + 
 + LatestEvent prev = latestEvents . get ( endpoint ) ; 
 + if ( prev = = null | | prev . topology ! = event . change ) 
 + { 
 + LatestEvent ret = latestEvents . put ( endpoint , LatestEvent . forTopologyChange ( event . change , prev ) ) ; 
 + if ( ret = = prev ) 
 + server . connectionTracker . send ( event ) ; 
 + } 
 + } 
 + 
 + private void onStatusChange ( InetAddress endpoint , Event . StatusChange event ) 
 + { 
 + if ( logger . isTraceEnabled ( ) ) 
 + logger . trace ( " Status changed event : { } , { } " , endpoint , event . status ) ; 
 + 
 + LatestEvent prev = latestEvents . get ( endpoint ) ; 
 + if ( prev = = null | | prev . status ! = event . status ) 
 + { 
 + LatestEvent ret = latestEvents . put ( endpoint , LatestEvent . forStatusChange ( event . status , prev ) ) ; 
 + if ( ret = = prev ) 
 + server . connectionTracker . send ( event ) ; 
 + } 
 } 
 
 public void onCreateKeyspace ( String ksName )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e25bfbf . . 1416351 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 2 - beta2 
 + * add extension point for sstable components ( CASSANDRA - 4049 ) 
 * improve tracing output ( CASSANDRA - 4852 , 4862 ) 
 * make TRACE verb droppable ( CASSANDRA - 4672 ) 
 * fix BulkLoader recognition of CQL3 columnfamilies ( CASSANDRA - 4755 ) 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / Component . java b / src / java / org / apache / cassandra / io / sstable / Component . java 
 index 7a001ab . . cbc12d9 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / Component . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / Component . java 
 @ @ - 34 , 7 + 34 , 7 @ @ public class Component 
 public static final char separator = ' - ' ; 
 
 final static EnumSet < Type > TYPES = EnumSet . allOf ( Type . class ) ; 
 - enum Type 
 + public enum Type 
 { 
 / / the base data for an sstable : the remaining components can be regenerated 
 / / based on the data component 
 @ @ - 54 , 7 + 54 , 11 @ @ public class Component 
 / / holds sha1 sum of the data file ( to be checked by sha1sum ) 
 DIGEST ( " Digest . sha1 " ) , 
 / / holds SSTable Index Summary and Boundaries 
 - SUMMARY ( " Summary . db " ) ; 
 + SUMMARY ( " Summary . db " ) , 
 + / / table of contents , stores the list of all components for the sstable 
 + TOC ( " TOC . txt " ) , 
 + / / custom component , used by e . g . custom compaction strategy 
 + CUSTOM ( null ) ; 
 
 final String repr ; 
 Type ( String repr ) 
 @ @ - 67 , 34 + 71 , 37 @ @ public class Component 
 for ( Type type : TYPES ) 
 if ( repr . equals ( type . repr ) ) 
 return type ; 
 - throw new RuntimeException ( " Invalid SSTable component : ' " + repr + " ' " ) ; 
 + return CUSTOM ; 
 } 
 } 
 
 / / singleton components for types that don ' t need ids 
 - public final static Component DATA = new Component ( Type . DATA , - 1 ) ; 
 - public final static Component PRIMARY _ INDEX = new Component ( Type . PRIMARY _ INDEX , - 1 ) ; 
 - public final static Component FILTER = new Component ( Type . FILTER , - 1 ) ; 
 - public final static Component COMPACTED _ MARKER = new Component ( Type . COMPACTED _ MARKER , - 1 ) ; 
 - public final static Component COMPRESSION _ INFO = new Component ( Type . COMPRESSION _ INFO , - 1 ) ; 
 - public final static Component STATS = new Component ( Type . STATS , - 1 ) ; 
 - public final static Component DIGEST = new Component ( Type . DIGEST , - 1 ) ; 
 - public final static Component SUMMARY = new Component ( Type . SUMMARY , - 1 ) ; 
 + public final static Component DATA = new Component ( Type . DATA ) ; 
 + public final static Component PRIMARY _ INDEX = new Component ( Type . PRIMARY _ INDEX ) ; 
 + public final static Component FILTER = new Component ( Type . FILTER ) ; 
 + public final static Component COMPACTED _ MARKER = new Component ( Type . COMPACTED _ MARKER ) ; 
 + public final static Component COMPRESSION _ INFO = new Component ( Type . COMPRESSION _ INFO ) ; 
 + public final static Component STATS = new Component ( Type . STATS ) ; 
 + public final static Component DIGEST = new Component ( Type . DIGEST ) ; 
 + public final static Component SUMMARY = new Component ( Type . SUMMARY ) ; 
 + public final static Component TOC = new Component ( Type . TOC ) ; 
 
 public final Type type ; 
 - public final int id ; 
 + public final String name ; 
 public final int hashCode ; 
 
 public Component ( Type type ) 
 { 
 - this ( type , - 1 ) ; 
 + this ( type , type . repr ) ; 
 + assert type ! = Type . CUSTOM ; 
 } 
 
 - public Component ( Type type , int id ) 
 + public Component ( Type type , String name ) 
 { 
 + assert name ! = null : " Component name cannot be null " ; 
 this . type = type ; 
 - this . id = id ; 
 - this . hashCode = Objects . hashCode ( type , id ) ; 
 + this . name = name ; 
 + this . hashCode = Objects . hashCode ( type , name ) ; 
 } 
 
 / * * 
 @ @ - 102 , 7 + 109 , 7 @ @ public class Component 
 * / 
 public String name ( ) 
 { 
 - return type . repr ; 
 + return name ; 
 } 
 
 / * * 
 @ @ - 120 , 14 + 127 , 16 @ @ public class Component 
 Component component ; 
 switch ( type ) 
 { 
 - case DATA : component = Component . DATA ; break ; 
 - case PRIMARY _ INDEX : component = Component . PRIMARY _ INDEX ; break ; 
 - case FILTER : component = Component . FILTER ; break ; 
 - case COMPACTED _ MARKER : component = Component . COMPACTED _ MARKER ; break ; 
 - case COMPRESSION _ INFO : component = Component . COMPRESSION _ INFO ; break ; 
 - case STATS : component = Component . STATS ; break ; 
 - case DIGEST : component = Component . DIGEST ; break ; 
 + case DATA : component = Component . DATA ; break ; 
 + case PRIMARY _ INDEX : component = Component . PRIMARY _ INDEX ; break ; 
 + case FILTER : component = Component . FILTER ; break ; 
 + case COMPACTED _ MARKER : component = Component . COMPACTED _ MARKER ; break ; 
 + case COMPRESSION _ INFO : component = Component . COMPRESSION _ INFO ; break ; 
 + case STATS : component = Component . STATS ; break ; 
 + case DIGEST : component = Component . DIGEST ; break ; 
 case SUMMARY : component = Component . SUMMARY ; break ; 
 + case TOC : component = Component . TOC ; break ; 
 + case CUSTOM : component = new Component ( Type . CUSTOM , path . right ) ; break ; 
 default : 
 throw new IllegalStateException ( ) ; 
 } 
 @ @ - 149 , 7 + 158 , 7 @ @ public class Component 
 if ( ! ( o instanceof Component ) ) 
 return false ; 
 Component that = ( Component ) o ; 
 - return this . type = = that . type & & this . id = = that . id ; 
 + return this . type = = that . type & & this . name . equals ( that . name ) ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTable . java b / src / java / org / apache / cassandra / io / sstable / SSTable . java 
 index 8b4bafb . . c7486ba 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTable . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTable . java 
 @ @ - 17 , 20 + 17 , 24 @ @ 
 * / 
 package org . apache . cassandra . io . sstable ; 
 
 - import java . io . File ; 
 - import java . io . IOException ; 
 + import java . io . * ; 
 + import java . nio . charset . Charset ; 
 import java . util . * ; 
 + import java . util . concurrent . CopyOnWriteArraySet ; 
 
 + import com . google . common . base . Predicates ; 
 + import com . google . common . collect . Collections2 ; 
 import com . google . common . collect . Ordering ; 
 import com . google . common . collect . Sets ; 
 - 
 - import org . apache . cassandra . db . DecoratedKey ; 
 + import com . google . common . io . Files ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . config . CFMetaData ; 
 + import org . apache . cassandra . db . DecoratedKey ; 
 import org . apache . cassandra . db . RowIndexEntry ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 + import org . apache . cassandra . io . FSWriteError ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . io . util . RandomAccessReader ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 @ @ - 103 , 7 + 107 , 7 @ @ public abstract class SSTable 
 assert component . type ! = Component . Type . COMPACTED _ MARKER ; 
 
 this . compression = dataComponents . contains ( Component . COMPRESSION _ INFO ) ; 
 - this . components = Collections . unmodifiableSet ( dataComponents ) ; 
 + this . components = new CopyOnWriteArraySet < Component > ( dataComponents ) ; 
 this . metadata = metadata ; 
 this . partitioner = partitioner ; 
 } 
 @ @ - 183 , 36 + 187 , 52 @ @ public abstract class SSTable 
 } 
 
 / * * 
 - * @ return A Descriptor , Component pair , or null if not a valid sstable component . 
 + * @ return A Descriptor , Component pair . If component is of unknown type , returns CUSTOM component . 
 * / 
 public static Pair < Descriptor , Component > tryComponentFromFilename ( File dir , String name ) 
 { 
 + return Component . fromFilename ( dir , name ) ; 
 + } 
 + 
 + / * * 
 + * Discovers existing components for the descriptor . Slow : only intended for use outside the critical path . 
 + * / 
 + static Set < Component > componentsFor ( final Descriptor desc ) 
 + { 
 try 
 { 
 - return Component . fromFilename ( dir , name ) ; 
 + try 
 + { 
 + return readTOC ( desc ) ; 
 + } 
 + catch ( FileNotFoundException e ) 
 + { 
 + Set < Component > components = discoverComponentsFor ( desc ) ; 
 + if ( components . isEmpty ( ) ) 
 + return components ; / / sstable doesn ' t exist yet 
 + 
 + if ( ! components . contains ( Component . TOC ) ) 
 + components . add ( Component . TOC ) ; 
 + appendTOC ( desc , components ) ; 
 + return components ; 
 + } 
 } 
 - catch ( Exception e ) 
 + catch ( IOException e ) 
 { 
 - if ( ! " snapshots " . equals ( name ) & & ! " backups " . equals ( name ) 
 - & & ! name . contains ( " . json " ) ) 
 - logger . warn ( " Invalid file ' { } ' in data directory { } . " , name , dir ) ; 
 - return null ; 
 + throw new IOError ( e ) ; 
 } 
 } 
 
 - / * * 
 - * Discovers existing components for the descriptor . Slow : only intended for use outside the critical path . 
 - * / 
 - static Set < Component > componentsFor ( final Descriptor desc ) 
 + private static Set < Component > discoverComponentsFor ( Descriptor desc ) 
 { 
 - Set < Component > components = Sets . newHashSetWithExpectedSize ( Component . TYPES . size ( ) ) ; 
 - for ( Component . Type componentType : Component . TYPES ) 
 + Set < Component . Type > knownTypes = Sets . difference ( Component . TYPES , Collections . singleton ( Component . Type . CUSTOM ) ) ; 
 + Set < Component > components = Sets . newHashSetWithExpectedSize ( knownTypes . size ( ) ) ; 
 + for ( Component . Type componentType : knownTypes ) 
 { 
 Component component = new Component ( componentType ) ; 
 if ( new File ( desc . filenameFor ( component ) ) . exists ( ) ) 
 components . add ( component ) ; 
 } 
 - 
 return components ; 
 } 
 
 @ @ - 261 , 4 + 281 , 60 @ @ public abstract class SSTable 
 " path = ' " + getFilename ( ) + ' \ ' ' + 
 ' ) ' ; 
 } 
 + 
 + / * * 
 + * Reads the list of components from the TOC component . 
 + * @ return set of components found in the TOC 
 + * / 
 + protected static Set < Component > readTOC ( Descriptor descriptor ) throws IOException 
 + { 
 + File tocFile = new File ( descriptor . filenameFor ( Component . TOC ) ) ; 
 + List < String > componentNames = Files . readLines ( tocFile , Charset . defaultCharset ( ) ) ; 
 + Set < Component > components = Sets . newHashSetWithExpectedSize ( componentNames . size ( ) ) ; 
 + for ( String componentName : componentNames ) 
 + { 
 + Component component = new Component ( Component . Type . fromRepresentation ( componentName ) , componentName ) ; 
 + if ( ! new File ( descriptor . filenameFor ( component ) ) . exists ( ) ) 
 + logger . error ( " Missing component : " + descriptor . filenameFor ( component ) ) ; 
 + else 
 + components . add ( component ) ; 
 + } 
 + return components ; 
 + } 
 + 
 + / * * 
 + * Appends new component names to the TOC component . 
 + * / 
 + protected static void appendTOC ( Descriptor descriptor , Collection < Component > components ) 
 + { 
 + File tocFile = new File ( descriptor . filenameFor ( Component . TOC ) ) ; 
 + PrintWriter w = null ; 
 + try 
 + { 
 + w = new PrintWriter ( new FileWriter ( tocFile , true ) ) ; 
 + for ( Component component : components ) 
 + w . println ( component . name ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new FSWriteError ( e , tocFile ) ; 
 + } 
 + finally 
 + { 
 + FileUtils . closeQuietly ( w ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Registers new custom components . Used by custom compaction strategies . 
 + * Adding a component for the second time is a no - op . 
 + * Don ' t remove this - this method is a part of the public API , intended for use by custom compaction strategies . 
 + * @ param newComponents collection of components to be added 
 + * / 
 + public synchronized void addComponents ( Collection < Component > newComponents ) 
 + { 
 + Collection < Component > componentsToAdd = Collections2 . filter ( newComponents , Predicates . not ( Predicates . in ( components ) ) ) ; 
 + appendTOC ( descriptor , componentsToAdd ) ; 
 + components . addAll ( componentsToAdd ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 index 06e6826 . . c17de4c 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 @ @ - 62 , 10 + 62 , 11 @ @ public class SSTableWriter extends SSTable 
 private static Set < Component > components ( CFMetaData metadata ) 
 { 
 Set < Component > components = new HashSet < Component > ( Arrays . asList ( Component . DATA , 
 - Component . FILTER , 
 - Component . PRIMARY _ INDEX , 
 - Component . STATS , 
 - Component . SUMMARY ) ) ; 
 + Component . FILTER , 
 + Component . PRIMARY _ INDEX , 
 + Component . STATS , 
 + Component . SUMMARY , 
 + Component . TOC ) ) ; 
 
 if ( metadata . compressionParameters ( ) . sstableCompressor ! = null ) 
 components . add ( Component . COMPRESSION _ INFO ) ; 
 @ @ - 324 , 6 + 325 , 9 @ @ public class SSTableWriter extends SSTable 
 writeMetadata ( descriptor , sstableMetadata ) ; 
 maybeWriteDigest ( ) ; 
 
 + / / save the table of components 
 + SSTable . appendTOC ( descriptor , components ) ; 
 + 
 / / remove the ' tmp ' marker from all components 
 final Descriptor newdesc = rename ( descriptor , components ) ; 

