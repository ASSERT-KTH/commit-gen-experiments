BLEU SCORE: 0.034353182138500235

TEST MSG: 10018 - 3 . 0 patch
GENERATED MSG: Add stats back to nodetool tpstats output

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / metrics / ThreadPoolMetrics . java b / src / java / org / apache / cassandra / metrics / ThreadPoolMetrics . java <nl> index fba92c4 . . 268e878 100644 <nl> - - - a / src / java / org / apache / cassandra / metrics / ThreadPoolMetrics . java <nl> + + + b / src / java / org / apache / cassandra / metrics / ThreadPoolMetrics . java <nl> @ @ - 17 , 6 + 17 , 8 @ @ <nl> * / <nl> package org . apache . cassandra . metrics ; <nl> <nl> + import java . io . IOException ; <nl> + import java . util . Set ; <nl> import java . util . concurrent . ThreadPoolExecutor ; <nl> <nl> import com . codahale . metrics . Counter ; <nl> @ @ - 25 , 8 + 27 , 12 @ @ import com . codahale . metrics . JmxReporter ; <nl> <nl> import javax . management . JMX ; <nl> import javax . management . MBeanServerConnection ; <nl> + import javax . management . MalformedObjectNameException ; <nl> import javax . management . ObjectName ; <nl> <nl> + import com . google . common . collect . HashMultimap ; <nl> + import com . google . common . collect . Multimap ; <nl> + <nl> import static org . apache . cassandra . metrics . CassandraMetricsRegistry . Metrics ; <nl> <nl> <nl> @ @ - 106 , 7 + 112 , 6 @ @ public class ThreadPoolMetrics <nl> Metrics . remove ( factory . createMetricName ( " MaxPoolSize " ) ) ; <nl> } <nl> <nl> - <nl> public static Object getJmxMetric ( MBeanServerConnection mbeanServerConn , String jmxPath , String poolName , String metricName ) <nl> { <nl> String name = String . format ( " org . apache . cassandra . metrics : type = ThreadPools , path = % s , scope = % s , name = % s " , jmxPath , poolName , metricName ) ; <nl> @ @ - 138 , 4 + 143 , 28 @ @ public class ThreadPoolMetrics <nl> } <nl> } <nl> <nl> + public static Multimap < String , String > getJmxThreadPools ( MBeanServerConnection mbeanServerConn ) <nl> + { <nl> + try <nl> + { <nl> + Multimap < String , String > threadPools = HashMultimap . create ( ) ; <nl> + Set < ObjectName > threadPoolObjectNames = mbeanServerConn . queryNames ( new ObjectName ( " org . apache . cassandra . metrics : type = ThreadPools , * " ) , <nl> + null ) ; <nl> + for ( ObjectName oName : threadPoolObjectNames ) <nl> + { <nl> + threadPools . put ( oName . getKeyProperty ( " path " ) , oName . getKeyProperty ( " scope " ) ) ; <nl> + } <nl> + <nl> + return threadPools ; <nl> + } <nl> + catch ( MalformedObjectNameException e ) <nl> + { <nl> + throw new RuntimeException ( " Bad query to JMX server : " , e ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( " Error getting threadpool names from JMX " , e ) ; <nl> + } <nl> + } <nl> + <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index 2c5f91d . . 099876b 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 53 , 7 + 53 , 6 @ @ import javax . management . remote . JMXConnectorFactory ; <nl> import javax . management . remote . JMXServiceURL ; <nl> import javax . rmi . ssl . SslRMIClientSocketFactory ; <nl> <nl> - import org . apache . cassandra . concurrent . Stage ; <nl> import org . apache . cassandra . batchlog . BatchlogManager ; <nl> import org . apache . cassandra . batchlog . BatchlogManagerMBean ; <nl> import org . apache . cassandra . db . ColumnFamilyStoreMBean ; <nl> @ @ - 87 , 6 + 86 , 7 @ @ import org . apache . cassandra . streaming . management . StreamStateCompositeData ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . collect . Iterables ; <nl> import com . google . common . collect . Maps ; <nl> + import com . google . common . collect . Multimap ; <nl> import com . google . common . collect . Sets ; <nl> import com . google . common . util . concurrent . Uninterruptibles ; <nl> <nl> @ @ - 1084 , 9 + 1084 , 18 @ @ public class NodeProbe implements AutoCloseable <nl> } <nl> } <nl> <nl> - public Object getThreadPoolMetric ( Stage stage , String metricName ) <nl> + public Object getThreadPoolMetric ( String pathName , String poolName , String metricName ) <nl> { <nl> - return ThreadPoolMetrics . getJmxMetric ( mbeanServerConn , stage . getJmxType ( ) , stage . getJmxName ( ) , metricName ) ; <nl> + return ThreadPoolMetrics . getJmxMetric ( mbeanServerConn , pathName , poolName , metricName ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Retrieve threadpool paths and names for threadpools with metrics . <nl> + * @ return Multimap from path ( internal , request , etc . ) to name <nl> + * / <nl> + public Multimap < String , String > getThreadPools ( ) <nl> + { <nl> + return ThreadPoolMetrics . getJmxThreadPools ( mbeanServerConn ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / TpStats . java b / src / java / org / apache / cassandra / tools / nodetool / TpStats . java <nl> index 5e47f50 . . 5d3eab7 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / nodetool / TpStats . java <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / TpStats . java <nl> @ @ - 21 , 7 + 21 , 8 @ @ import io . airlift . command . Command ; <nl> <nl> import java . util . Map ; <nl> <nl> - import org . apache . cassandra . concurrent . Stage ; <nl> + import com . google . common . collect . Multimap ; <nl> + <nl> import org . apache . cassandra . tools . NodeProbe ; <nl> import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; <nl> <nl> @ @ - 31 , 17 + 32 , 19 @ @ public class TpStats extends NodeToolCmd <nl> @ Override <nl> public void execute ( NodeProbe probe ) <nl> { <nl> - System . out . printf ( " % - 30s % 10s % 10s % 15s % 10s % 18s % n " , " Pool Name " , " Active " , " Pending " , " Completed " , " Blocked " , " All time blocked " ) ; <nl> + System . out . printf ( " % - 25s % 10s % 10s % 15s % 10s % 18s % n " , " Pool Name " , " Active " , " Pending " , " Completed " , " Blocked " , " All time blocked " ) ; <nl> + <nl> <nl> - for ( Stage stage : Stage . jmxEnabledStages ( ) ) <nl> + Multimap < String , String > threadPools = probe . getThreadPools ( ) ; <nl> + for ( Map . Entry < String , String > tpool : threadPools . entries ( ) ) <nl> { <nl> - System . out . printf ( " % - 30s % 10s % 10s % 15s % 10s % 18s % n " , <nl> - stage . getJmxName ( ) , <nl> - probe . getThreadPoolMetric ( stage , " ActiveTasks " ) , <nl> - probe . getThreadPoolMetric ( stage , " PendingTasks " ) , <nl> - probe . getThreadPoolMetric ( stage , " CompletedTasks " ) , <nl> - probe . getThreadPoolMetric ( stage , " CurrentlyBlockedTasks " ) , <nl> - probe . getThreadPoolMetric ( stage , " TotalBlockedTasks " ) ) ; <nl> + System . out . printf ( " % - 25s % 10s % 10s % 15s % 10s % 18s % n " , <nl> + tpool . getValue ( ) , <nl> + probe . getThreadPoolMetric ( tpool . getKey ( ) , tpool . getValue ( ) , " ActiveTasks " ) , <nl> + probe . getThreadPoolMetric ( tpool . getKey ( ) , tpool . getValue ( ) , " PendingTasks " ) , <nl> + probe . getThreadPoolMetric ( tpool . getKey ( ) , tpool . getValue ( ) , " CompletedTasks " ) , <nl> + probe . getThreadPoolMetric ( tpool . getKey ( ) , tpool . getValue ( ) , " CurrentlyBlockedTasks " ) , <nl> + probe . getThreadPoolMetric ( tpool . getKey ( ) , tpool . getValue ( ) , " TotalBlockedTasks " ) ) ; <nl> } <nl> <nl> System . out . printf ( " % n % - 20s % 10s % n " , " Message type " , " Dropped " ) ; <nl> diff - - git a / src / java / org / apache / cassandra / utils / StatusLogger . java b / src / java / org / apache / cassandra / utils / StatusLogger . java <nl> index 5f4eaf2 . . 712e8f7 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / StatusLogger . java <nl> + + + b / src / java / org / apache / cassandra / utils / StatusLogger . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ <nl> package org . apache . cassandra . utils ; <nl> <nl> import java . lang . management . ManagementFactory ; <nl> + import java . util . Map ; <nl> import java . util . Set ; <nl> import javax . management . * ; <nl> <nl> @ @ - 50 , 15 + 51 , 15 @ @ public class StatusLogger <nl> / / everything from o . a . c . concurrent <nl> logger . info ( String . format ( " % - 25s % 10s % 10s % 15s % 10s % 18s " , " Pool Name " , " Active " , " Pending " , " Completed " , " Blocked " , " All Time Blocked " ) ) ; <nl> <nl> - for ( Stage stage : Stage . jmxEnabledStages ( ) ) <nl> + for ( Map . Entry < String , String > tpool : ThreadPoolMetrics . getJmxThreadPools ( server ) . entries ( ) ) <nl> { <nl> logger . info ( String . format ( " % - 25s % 10s % 10s % 15s % 10s % 18s % n " , <nl> - stage . getJmxName ( ) , <nl> - ThreadPoolMetrics . getJmxMetric ( server , stage . getJmxType ( ) , stage . getJmxName ( ) , " ActiveTasks " ) , <nl> - ThreadPoolMetrics . getJmxMetric ( server , stage . getJmxType ( ) , stage . getJmxName ( ) , " PendingTasks " ) , <nl> - ThreadPoolMetrics . getJmxMetric ( server , stage . getJmxType ( ) , stage . getJmxName ( ) , " CompletedTasks " ) , <nl> - ThreadPoolMetrics . getJmxMetric ( server , stage . getJmxType ( ) , stage . getJmxName ( ) , " CurrentlyBlockedTasks " ) , <nl> - ThreadPoolMetrics . getJmxMetric ( server , stage . getJmxType ( ) , stage . getJmxName ( ) , " TotalBlockedTasks " ) ) ) ; <nl> + tpool . getValue ( ) , <nl> + ThreadPoolMetrics . getJmxMetric ( server , tpool . getKey ( ) , tpool . getValue ( ) , " ActiveTasks " ) , <nl> + ThreadPoolMetrics . getJmxMetric ( server , tpool . getKey ( ) , tpool . getValue ( ) , " PendingTasks " ) , <nl> + ThreadPoolMetrics . getJmxMetric ( server , tpool . getKey ( ) , tpool . getValue ( ) , " CompletedTasks " ) , <nl> + ThreadPoolMetrics . getJmxMetric ( server , tpool . getKey ( ) , tpool . getValue ( ) , " CurrentlyBlockedTasks " ) , <nl> + ThreadPoolMetrics . getJmxMetric ( server , tpool . getKey ( ) , tpool . getValue ( ) , " TotalBlockedTasks " ) ) ) ; <nl> } <nl> <nl> / / one offs
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / metrics / ThreadPoolMetrics . java b / src / java / org / apache / cassandra / metrics / ThreadPoolMetrics . java 
 index fba92c4 . . 268e878 100644 
 - - - a / src / java / org / apache / cassandra / metrics / ThreadPoolMetrics . java 
 + + + b / src / java / org / apache / cassandra / metrics / ThreadPoolMetrics . java 
 @ @ - 17 , 6 + 17 , 8 @ @ 
 * / 
 package org . apache . cassandra . metrics ; 
 
 + import java . io . IOException ; 
 + import java . util . Set ; 
 import java . util . concurrent . ThreadPoolExecutor ; 
 
 import com . codahale . metrics . Counter ; 
 @ @ - 25 , 8 + 27 , 12 @ @ import com . codahale . metrics . JmxReporter ; 
 
 import javax . management . JMX ; 
 import javax . management . MBeanServerConnection ; 
 + import javax . management . MalformedObjectNameException ; 
 import javax . management . ObjectName ; 
 
 + import com . google . common . collect . HashMultimap ; 
 + import com . google . common . collect . Multimap ; 
 + 
 import static org . apache . cassandra . metrics . CassandraMetricsRegistry . Metrics ; 
 
 
 @ @ - 106 , 7 + 112 , 6 @ @ public class ThreadPoolMetrics 
 Metrics . remove ( factory . createMetricName ( " MaxPoolSize " ) ) ; 
 } 
 
 - 
 public static Object getJmxMetric ( MBeanServerConnection mbeanServerConn , String jmxPath , String poolName , String metricName ) 
 { 
 String name = String . format ( " org . apache . cassandra . metrics : type = ThreadPools , path = % s , scope = % s , name = % s " , jmxPath , poolName , metricName ) ; 
 @ @ - 138 , 4 + 143 , 28 @ @ public class ThreadPoolMetrics 
 } 
 } 
 
 + public static Multimap < String , String > getJmxThreadPools ( MBeanServerConnection mbeanServerConn ) 
 + { 
 + try 
 + { 
 + Multimap < String , String > threadPools = HashMultimap . create ( ) ; 
 + Set < ObjectName > threadPoolObjectNames = mbeanServerConn . queryNames ( new ObjectName ( " org . apache . cassandra . metrics : type = ThreadPools , * " ) , 
 + null ) ; 
 + for ( ObjectName oName : threadPoolObjectNames ) 
 + { 
 + threadPools . put ( oName . getKeyProperty ( " path " ) , oName . getKeyProperty ( " scope " ) ) ; 
 + } 
 + 
 + return threadPools ; 
 + } 
 + catch ( MalformedObjectNameException e ) 
 + { 
 + throw new RuntimeException ( " Bad query to JMX server : " , e ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( " Error getting threadpool names from JMX " , e ) ; 
 + } 
 + } 
 + 
 } 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index 2c5f91d . . 099876b 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 53 , 7 + 53 , 6 @ @ import javax . management . remote . JMXConnectorFactory ; 
 import javax . management . remote . JMXServiceURL ; 
 import javax . rmi . ssl . SslRMIClientSocketFactory ; 
 
 - import org . apache . cassandra . concurrent . Stage ; 
 import org . apache . cassandra . batchlog . BatchlogManager ; 
 import org . apache . cassandra . batchlog . BatchlogManagerMBean ; 
 import org . apache . cassandra . db . ColumnFamilyStoreMBean ; 
 @ @ - 87 , 6 + 86 , 7 @ @ import org . apache . cassandra . streaming . management . StreamStateCompositeData ; 
 import com . google . common . base . Function ; 
 import com . google . common . collect . Iterables ; 
 import com . google . common . collect . Maps ; 
 + import com . google . common . collect . Multimap ; 
 import com . google . common . collect . Sets ; 
 import com . google . common . util . concurrent . Uninterruptibles ; 
 
 @ @ - 1084 , 9 + 1084 , 18 @ @ public class NodeProbe implements AutoCloseable 
 } 
 } 
 
 - public Object getThreadPoolMetric ( Stage stage , String metricName ) 
 + public Object getThreadPoolMetric ( String pathName , String poolName , String metricName ) 
 { 
 - return ThreadPoolMetrics . getJmxMetric ( mbeanServerConn , stage . getJmxType ( ) , stage . getJmxName ( ) , metricName ) ; 
 + return ThreadPoolMetrics . getJmxMetric ( mbeanServerConn , pathName , poolName , metricName ) ; 
 + } 
 + 
 + / * * 
 + * Retrieve threadpool paths and names for threadpools with metrics . 
 + * @ return Multimap from path ( internal , request , etc . ) to name 
 + * / 
 + public Multimap < String , String > getThreadPools ( ) 
 + { 
 + return ThreadPoolMetrics . getJmxThreadPools ( mbeanServerConn ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / TpStats . java b / src / java / org / apache / cassandra / tools / nodetool / TpStats . java 
 index 5e47f50 . . 5d3eab7 100644 
 - - - a / src / java / org / apache / cassandra / tools / nodetool / TpStats . java 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / TpStats . java 
 @ @ - 21 , 7 + 21 , 8 @ @ import io . airlift . command . Command ; 
 
 import java . util . Map ; 
 
 - import org . apache . cassandra . concurrent . Stage ; 
 + import com . google . common . collect . Multimap ; 
 + 
 import org . apache . cassandra . tools . NodeProbe ; 
 import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; 
 
 @ @ - 31 , 17 + 32 , 19 @ @ public class TpStats extends NodeToolCmd 
 @ Override 
 public void execute ( NodeProbe probe ) 
 { 
 - System . out . printf ( " % - 30s % 10s % 10s % 15s % 10s % 18s % n " , " Pool Name " , " Active " , " Pending " , " Completed " , " Blocked " , " All time blocked " ) ; 
 + System . out . printf ( " % - 25s % 10s % 10s % 15s % 10s % 18s % n " , " Pool Name " , " Active " , " Pending " , " Completed " , " Blocked " , " All time blocked " ) ; 
 + 
 
 - for ( Stage stage : Stage . jmxEnabledStages ( ) ) 
 + Multimap < String , String > threadPools = probe . getThreadPools ( ) ; 
 + for ( Map . Entry < String , String > tpool : threadPools . entries ( ) ) 
 { 
 - System . out . printf ( " % - 30s % 10s % 10s % 15s % 10s % 18s % n " , 
 - stage . getJmxName ( ) , 
 - probe . getThreadPoolMetric ( stage , " ActiveTasks " ) , 
 - probe . getThreadPoolMetric ( stage , " PendingTasks " ) , 
 - probe . getThreadPoolMetric ( stage , " CompletedTasks " ) , 
 - probe . getThreadPoolMetric ( stage , " CurrentlyBlockedTasks " ) , 
 - probe . getThreadPoolMetric ( stage , " TotalBlockedTasks " ) ) ; 
 + System . out . printf ( " % - 25s % 10s % 10s % 15s % 10s % 18s % n " , 
 + tpool . getValue ( ) , 
 + probe . getThreadPoolMetric ( tpool . getKey ( ) , tpool . getValue ( ) , " ActiveTasks " ) , 
 + probe . getThreadPoolMetric ( tpool . getKey ( ) , tpool . getValue ( ) , " PendingTasks " ) , 
 + probe . getThreadPoolMetric ( tpool . getKey ( ) , tpool . getValue ( ) , " CompletedTasks " ) , 
 + probe . getThreadPoolMetric ( tpool . getKey ( ) , tpool . getValue ( ) , " CurrentlyBlockedTasks " ) , 
 + probe . getThreadPoolMetric ( tpool . getKey ( ) , tpool . getValue ( ) , " TotalBlockedTasks " ) ) ; 
 } 
 
 System . out . printf ( " % n % - 20s % 10s % n " , " Message type " , " Dropped " ) ; 
 diff - - git a / src / java / org / apache / cassandra / utils / StatusLogger . java b / src / java / org / apache / cassandra / utils / StatusLogger . java 
 index 5f4eaf2 . . 712e8f7 100644 
 - - - a / src / java / org / apache / cassandra / utils / StatusLogger . java 
 + + + b / src / java / org / apache / cassandra / utils / StatusLogger . java 
 @ @ - 18 , 6 + 18 , 7 @ @ 
 package org . apache . cassandra . utils ; 
 
 import java . lang . management . ManagementFactory ; 
 + import java . util . Map ; 
 import java . util . Set ; 
 import javax . management . * ; 
 
 @ @ - 50 , 15 + 51 , 15 @ @ public class StatusLogger 
 / / everything from o . a . c . concurrent 
 logger . info ( String . format ( " % - 25s % 10s % 10s % 15s % 10s % 18s " , " Pool Name " , " Active " , " Pending " , " Completed " , " Blocked " , " All Time Blocked " ) ) ; 
 
 - for ( Stage stage : Stage . jmxEnabledStages ( ) ) 
 + for ( Map . Entry < String , String > tpool : ThreadPoolMetrics . getJmxThreadPools ( server ) . entries ( ) ) 
 { 
 logger . info ( String . format ( " % - 25s % 10s % 10s % 15s % 10s % 18s % n " , 
 - stage . getJmxName ( ) , 
 - ThreadPoolMetrics . getJmxMetric ( server , stage . getJmxType ( ) , stage . getJmxName ( ) , " ActiveTasks " ) , 
 - ThreadPoolMetrics . getJmxMetric ( server , stage . getJmxType ( ) , stage . getJmxName ( ) , " PendingTasks " ) , 
 - ThreadPoolMetrics . getJmxMetric ( server , stage . getJmxType ( ) , stage . getJmxName ( ) , " CompletedTasks " ) , 
 - ThreadPoolMetrics . getJmxMetric ( server , stage . getJmxType ( ) , stage . getJmxName ( ) , " CurrentlyBlockedTasks " ) , 
 - ThreadPoolMetrics . getJmxMetric ( server , stage . getJmxType ( ) , stage . getJmxName ( ) , " TotalBlockedTasks " ) ) ) ; 
 + tpool . getValue ( ) , 
 + ThreadPoolMetrics . getJmxMetric ( server , tpool . getKey ( ) , tpool . getValue ( ) , " ActiveTasks " ) , 
 + ThreadPoolMetrics . getJmxMetric ( server , tpool . getKey ( ) , tpool . getValue ( ) , " PendingTasks " ) , 
 + ThreadPoolMetrics . getJmxMetric ( server , tpool . getKey ( ) , tpool . getValue ( ) , " CompletedTasks " ) , 
 + ThreadPoolMetrics . getJmxMetric ( server , tpool . getKey ( ) , tpool . getValue ( ) , " CurrentlyBlockedTasks " ) , 
 + ThreadPoolMetrics . getJmxMetric ( server , tpool . getKey ( ) , tpool . getValue ( ) , " TotalBlockedTasks " ) ) ) ; 
 } 
 
 / / one offs

NEAREST DIFF:
ELIMINATEDSENTENCE
