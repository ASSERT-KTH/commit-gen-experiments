BLEU SCORE: 0.03283637368030199

TEST MSG: Fix BTree . clear for large updates
GENERATED MSG: optimize AtomicBTree

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index ceeb0c1 . . 11dd6bd 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 0 - beta2 <nl> + * Fix BTree . clear for large updates ( CASSANDRA - 6943 ) <nl> * Fail write instead of logging a warning when unable to append to CL <nl> ( CASSANDRA - 6764 ) <nl> * Eliminate possibility of CL segment appearing twice in active list <nl> diff - - git a / src / java / org / apache / cassandra / utils / btree / BTree . java b / src / java / org / apache / cassandra / utils / btree / BTree . java <nl> index 5ca5006 . . 0e8f156 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / btree / BTree . java <nl> + + + b / src / java / org / apache / cassandra / utils / btree / BTree . java <nl> @ @ - 26 , 6 + 26 , 8 @ @ import java . util . Queue ; <nl> <nl> import org . apache . cassandra . utils . ObjectSizes ; <nl> <nl> + import static org . apache . cassandra . utils . btree . UpdateFunction . NoOp ; <nl> + <nl> public class BTree <nl> { <nl> / * * <nl> @ @ - 141 , 7 + 143 , 7 @ @ public class BTree <nl> * / <nl> public static < V > Object [ ] update ( Object [ ] btree , Comparator < V > comparator , Collection < V > updateWith , boolean updateWithIsSorted ) <nl> { <nl> - return update ( btree , comparator , updateWith , updateWithIsSorted , UpdateFunction . NoOp . < V > instance ( ) ) ; <nl> + return update ( btree , comparator , updateWith , updateWithIsSorted , NoOp . < V > instance ( ) ) ; <nl> } <nl> <nl> public static < V > Object [ ] update ( Object [ ] btree , <nl> diff - - git a / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java b / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java <nl> index 7039380 . . 5a9b149 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java <nl> + + + b / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java <nl> @ @ - 69 , 17 + 69 , 25 @ @ final class NodeBuilder <nl> void clear ( ) <nl> { <nl> NodeBuilder current = this ; <nl> - while ( current ! = null ) <nl> + while ( current ! = null & & current . upperBound ! = null ) <nl> { <nl> - if ( current . upperBound ! = null ) <nl> - { <nl> - current . reset ( null , null , null , null ) ; <nl> - Arrays . fill ( current . buildKeys , 0 , current . maxBuildKeyPosition , null ) ; <nl> - Arrays . fill ( current . buildChildren , 0 , current . maxBuildKeyPosition + 1 , null ) ; <nl> - current . maxBuildKeyPosition = 0 ; <nl> - } <nl> + current . clearSelf ( ) ; <nl> current = current . child ; <nl> } <nl> + current = parent ; <nl> + while ( current ! = null & & current . upperBound ! = null ) <nl> + { <nl> + current . clearSelf ( ) ; <nl> + current = current . parent ; <nl> + } <nl> + } <nl> + <nl> + void clearSelf ( ) <nl> + { <nl> + reset ( null , null , null , null ) ; <nl> + Arrays . fill ( buildKeys , 0 , maxBuildKeyPosition , null ) ; <nl> + Arrays . fill ( buildChildren , 0 , maxBuildKeyPosition + 1 , null ) ; <nl> + maxBuildKeyPosition = 0 ; <nl> } <nl> <nl> / / reset counters / setup to copy from provided node <nl> diff - - git a / test / long / org / apache / cassandra / utils / LongBTreeTest . java b / test / long / org / apache / cassandra / utils / LongBTreeTest . java <nl> index 514d166 . . 76ff2bf 100644 <nl> - - - a / test / long / org / apache / cassandra / utils / LongBTreeTest . java <nl> + + + b / test / long / org / apache / cassandra / utils / LongBTreeTest . java <nl> @ @ - 25 , 6 + 25 , 8 @ @ import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . Executors ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> + import javax . annotation . Nullable ; <nl> + <nl> import com . google . common . util . concurrent . Futures ; <nl> import com . google . common . util . concurrent . ListenableFuture ; <nl> import com . google . common . util . concurrent . ListenableFutureTask ; <nl> @ @ - 38 , 6 + 40 , 7 @ @ import com . yammer . metrics . stats . Snapshot ; <nl> import org . apache . cassandra . concurrent . NamedThreadFactory ; <nl> import org . apache . cassandra . utils . btree . BTree ; <nl> import org . apache . cassandra . utils . btree . BTreeSet ; <nl> + import org . apache . cassandra . utils . btree . UpdateFunction ; <nl> <nl> / / TODO : should probably lower fan - factor for tests to make them more intensive <nl> public class LongBTreeTest <nl> @ @ - 47 , 6 + 50 , 7 @ @ public class LongBTreeTest <nl> private static final Timer TREE _ TIMER = Metrics . newTimer ( BTree . class , " TREE " , TimeUnit . NANOSECONDS , TimeUnit . NANOSECONDS ) ; <nl> private static final ExecutorService MODIFY = Executors . newFixedThreadPool ( Runtime . getRuntime ( ) . availableProcessors ( ) , new NamedThreadFactory ( " MODIFY " ) ) ; <nl> private static final ExecutorService COMPARE = Executors . newFixedThreadPool ( Runtime . getRuntime ( ) . availableProcessors ( ) , new NamedThreadFactory ( " COMPARE " ) ) ; <nl> + private static final RandomAbort < Integer > SPORADIC _ ABORT = new RandomAbort < > ( new Random ( ) , 0 . 0001f ) ; <nl> <nl> static <nl> { <nl> @ @ - 94 , 7 + 98 , 7 @ @ public class LongBTreeTest <nl> @ Test <nl> public void testLargeBatchesLargeRange ( ) throws ExecutionException , InterruptedException <nl> { <nl> - testInsertions ( 10000000 , 5000 , 3 , 100 , true ) ; <nl> + testInsertions ( 100000000 , 5000 , 3 , 100 , true ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 178 , 16 + 182 , 21 @ @ public class LongBTreeTest <nl> canon . putAll ( buffer ) ; <nl> ctxt . stop ( ) ; <nl> ctxt = BTREE _ TIMER . time ( ) ; <nl> - btree = BTree . update ( btree , ICMP , buffer . keySet ( ) , true , null ) ; <nl> + Object [ ] next = null ; <nl> + while ( next = = null ) <nl> + next = BTree . update ( btree , ICMP , buffer . keySet ( ) , true , SPORADIC _ ABORT ) ; <nl> + btree = next ; <nl> ctxt . stop ( ) ; <nl> <nl> + if ( ! BTree . isWellFormed ( btree , ICMP ) ) <nl> + { <nl> + System . out . println ( " ERROR : Not well formed " ) ; <nl> + throw new AssertionError ( " Not well formed ! " ) ; <nl> + } <nl> if ( quickEquality ) <nl> testEqual ( " " , BTree . < Integer > slice ( btree , true ) , canon . keySet ( ) . iterator ( ) ) ; <nl> else <nl> r . addAll ( testAllSlices ( " RND " , btree , new TreeSet < > ( canon . keySet ( ) ) ) ) ; <nl> - <nl> - if ( ! BTree . isWellFormed ( btree ) ) <nl> - System . out . println ( " ERROR : Not well formed " ) ; <nl> } <nl> return r ; <nl> } <nl> @ @ - 207 , 7 + 216 , 10 @ @ public class LongBTreeTest <nl> String id = String . format ( " [ 0 . . % d ) " , canon . size ( ) ) ; <nl> System . out . println ( " Testing " + id ) ; <nl> Futures . allAsList ( testAllSlices ( id , cur , canon ) ) . get ( ) ; <nl> - cur = BTree . update ( cur , ICMP , Arrays . asList ( i ) , true , null ) ; <nl> + Object [ ] next = null ; <nl> + while ( next = = null ) <nl> + next = BTree . update ( cur , ICMP , Arrays . asList ( i ) , true , SPORADIC _ ABORT ) ; <nl> + cur = next ; <nl> canon . add ( i ) ; <nl> } <nl> } <nl> @ @ - 277 , 7 + 289 , 7 @ @ public class LongBTreeTest <nl> } <nl> } <nl> <nl> - private static < V > boolean testEqual ( String id , Iterator < V > btree , Iterator < V > canon ) <nl> + private static < V > void testEqual ( String id , Iterator < V > btree , Iterator < V > canon ) <nl> { <nl> boolean equal = true ; <nl> while ( btree . hasNext ( ) & & canon . hasNext ( ) ) <nl> @ @ - 300 , 7 + 312 , 8 @ @ public class LongBTreeTest <nl> System . out . println ( String . format ( " % s : Expected % d , Got Nil " , id , canon . next ( ) ) ) ; <nl> equal = false ; <nl> } <nl> - return equal ; <nl> + if ( ! equal ) <nl> + throw new AssertionError ( " Not equal " ) ; <nl> } <nl> <nl> / / should only be called on sets that range from 0 - > N or N - > 0 <nl> @ @ - 354 , 4 + 367 , 35 @ @ public class LongBTreeTest <nl> } ; <nl> } <nl> <nl> + private static final class RandomAbort < V > implements UpdateFunction < V > <nl> + { <nl> + final Random rnd ; <nl> + final float chance ; <nl> + private RandomAbort ( Random rnd , float chance ) <nl> + { <nl> + this . rnd = rnd ; <nl> + this . chance = chance ; <nl> + } <nl> + <nl> + public V apply ( V replacing , V update ) <nl> + { <nl> + return update ; <nl> + } <nl> + <nl> + public boolean abortEarly ( ) <nl> + { <nl> + return rnd . nextFloat ( ) < chance ; <nl> + } <nl> + <nl> + public void allocated ( long heapSize ) <nl> + { <nl> + <nl> + } <nl> + <nl> + public V apply ( V v ) <nl> + { <nl> + return v ; <nl> + } <nl> + } <nl> + <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / utils / BTreeTest . java b / test / unit / org / apache / cassandra / utils / BTreeTest . java <nl> index b4a960b . . a6d4528 100644 <nl> - - - a / test / unit / org / apache / cassandra / utils / BTreeTest . java <nl> + + + b / test / unit / org / apache / cassandra / utils / BTreeTest . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . util . concurrent . ThreadLocalRandom ; <nl> <nl> import org . junit . Test ; <nl> <nl> + import junit . framework . Assert ; <nl> import org . apache . cassandra . utils . btree . BTree ; <nl> import org . apache . cassandra . utils . btree . BTreeSet ; <nl> import org . apache . cassandra . utils . btree . UpdateFunction ; <nl> @ @ - 119 , 7 + 120 , 65 @ @ public class BTreeTest <nl> assert vs . size ( ) = = count ; <nl> int i = 0 ; <nl> for ( Integer j : vs ) <nl> - assert j = = ints [ i + + ] ; <nl> + Assert . assertEquals ( j , ints [ i + + ] ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testClearOnAbort ( ) <nl> + { <nl> + final Comparator < String > cmp = new Comparator < String > ( ) <nl> + { <nl> + public int compare ( String o1 , String o2 ) <nl> + { <nl> + return o1 . compareTo ( o2 ) ; <nl> + } <nl> + } ; <nl> + <nl> + Object [ ] btree = BTree . build ( ranges ( range ( 0 , 8 ) ) , cmp , true , UpdateFunction . NoOp . < String > instance ( ) ) ; <nl> + BTree . update ( btree , cmp , ranges ( range ( 0 , 94 ) ) , false , new AbortAfterX ( 90 ) ) ; <nl> + btree = BTree . update ( btree , cmp , ranges ( range ( 0 , 94 ) ) , false , UpdateFunction . NoOp . < String > instance ( ) ) ; <nl> + Assert . assertTrue ( BTree . isWellFormed ( btree , cmp ) ) ; <nl> + } <nl> + <nl> + private static final class AbortAfterX implements UpdateFunction < String > <nl> + { <nl> + int counter ; <nl> + final int abortAfter ; <nl> + private AbortAfterX ( int abortAfter ) <nl> + { <nl> + this . abortAfter = abortAfter ; <nl> + } <nl> + public String apply ( String replacing , String update ) <nl> + { <nl> + return update ; <nl> + } <nl> + public boolean abortEarly ( ) <nl> + { <nl> + return counter + + > abortAfter ; <nl> + } <nl> + public void allocated ( long heapSize ) <nl> + { <nl> + } <nl> + public String apply ( String v ) <nl> + { <nl> + return v ; <nl> + } <nl> + } <nl> + <nl> + private static int [ ] range ( int lb , int ub ) <nl> + { <nl> + return new int [ ] { lb , ub } ; <nl> + } <nl> + <nl> + private static List < String > ranges ( int [ ] . . . ranges ) <nl> + { <nl> + <nl> + List < String > r = new ArrayList < > ( ) ; <nl> + for ( int [ ] range : ranges ) <nl> + { <nl> + for ( int i = range [ 0 ] ; i < range [ 1 ] ; i + = 1 ) <nl> + r . add ( Integer . toString ( i ) ) ; <nl> + } <nl> + return r ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index ceeb0c1 . . 11dd6bd 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 0 - beta2 
 + * Fix BTree . clear for large updates ( CASSANDRA - 6943 ) 
 * Fail write instead of logging a warning when unable to append to CL 
 ( CASSANDRA - 6764 ) 
 * Eliminate possibility of CL segment appearing twice in active list 
 diff - - git a / src / java / org / apache / cassandra / utils / btree / BTree . java b / src / java / org / apache / cassandra / utils / btree / BTree . java 
 index 5ca5006 . . 0e8f156 100644 
 - - - a / src / java / org / apache / cassandra / utils / btree / BTree . java 
 + + + b / src / java / org / apache / cassandra / utils / btree / BTree . java 
 @ @ - 26 , 6 + 26 , 8 @ @ import java . util . Queue ; 
 
 import org . apache . cassandra . utils . ObjectSizes ; 
 
 + import static org . apache . cassandra . utils . btree . UpdateFunction . NoOp ; 
 + 
 public class BTree 
 { 
 / * * 
 @ @ - 141 , 7 + 143 , 7 @ @ public class BTree 
 * / 
 public static < V > Object [ ] update ( Object [ ] btree , Comparator < V > comparator , Collection < V > updateWith , boolean updateWithIsSorted ) 
 { 
 - return update ( btree , comparator , updateWith , updateWithIsSorted , UpdateFunction . NoOp . < V > instance ( ) ) ; 
 + return update ( btree , comparator , updateWith , updateWithIsSorted , NoOp . < V > instance ( ) ) ; 
 } 
 
 public static < V > Object [ ] update ( Object [ ] btree , 
 diff - - git a / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java b / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java 
 index 7039380 . . 5a9b149 100644 
 - - - a / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java 
 + + + b / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java 
 @ @ - 69 , 17 + 69 , 25 @ @ final class NodeBuilder 
 void clear ( ) 
 { 
 NodeBuilder current = this ; 
 - while ( current ! = null ) 
 + while ( current ! = null & & current . upperBound ! = null ) 
 { 
 - if ( current . upperBound ! = null ) 
 - { 
 - current . reset ( null , null , null , null ) ; 
 - Arrays . fill ( current . buildKeys , 0 , current . maxBuildKeyPosition , null ) ; 
 - Arrays . fill ( current . buildChildren , 0 , current . maxBuildKeyPosition + 1 , null ) ; 
 - current . maxBuildKeyPosition = 0 ; 
 - } 
 + current . clearSelf ( ) ; 
 current = current . child ; 
 } 
 + current = parent ; 
 + while ( current ! = null & & current . upperBound ! = null ) 
 + { 
 + current . clearSelf ( ) ; 
 + current = current . parent ; 
 + } 
 + } 
 + 
 + void clearSelf ( ) 
 + { 
 + reset ( null , null , null , null ) ; 
 + Arrays . fill ( buildKeys , 0 , maxBuildKeyPosition , null ) ; 
 + Arrays . fill ( buildChildren , 0 , maxBuildKeyPosition + 1 , null ) ; 
 + maxBuildKeyPosition = 0 ; 
 } 
 
 / / reset counters / setup to copy from provided node 
 diff - - git a / test / long / org / apache / cassandra / utils / LongBTreeTest . java b / test / long / org / apache / cassandra / utils / LongBTreeTest . java 
 index 514d166 . . 76ff2bf 100644 
 - - - a / test / long / org / apache / cassandra / utils / LongBTreeTest . java 
 + + + b / test / long / org / apache / cassandra / utils / LongBTreeTest . java 
 @ @ - 25 , 6 + 25 , 8 @ @ import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . Executors ; 
 import java . util . concurrent . TimeUnit ; 
 
 + import javax . annotation . Nullable ; 
 + 
 import com . google . common . util . concurrent . Futures ; 
 import com . google . common . util . concurrent . ListenableFuture ; 
 import com . google . common . util . concurrent . ListenableFutureTask ; 
 @ @ - 38 , 6 + 40 , 7 @ @ import com . yammer . metrics . stats . Snapshot ; 
 import org . apache . cassandra . concurrent . NamedThreadFactory ; 
 import org . apache . cassandra . utils . btree . BTree ; 
 import org . apache . cassandra . utils . btree . BTreeSet ; 
 + import org . apache . cassandra . utils . btree . UpdateFunction ; 
 
 / / TODO : should probably lower fan - factor for tests to make them more intensive 
 public class LongBTreeTest 
 @ @ - 47 , 6 + 50 , 7 @ @ public class LongBTreeTest 
 private static final Timer TREE _ TIMER = Metrics . newTimer ( BTree . class , " TREE " , TimeUnit . NANOSECONDS , TimeUnit . NANOSECONDS ) ; 
 private static final ExecutorService MODIFY = Executors . newFixedThreadPool ( Runtime . getRuntime ( ) . availableProcessors ( ) , new NamedThreadFactory ( " MODIFY " ) ) ; 
 private static final ExecutorService COMPARE = Executors . newFixedThreadPool ( Runtime . getRuntime ( ) . availableProcessors ( ) , new NamedThreadFactory ( " COMPARE " ) ) ; 
 + private static final RandomAbort < Integer > SPORADIC _ ABORT = new RandomAbort < > ( new Random ( ) , 0 . 0001f ) ; 
 
 static 
 { 
 @ @ - 94 , 7 + 98 , 7 @ @ public class LongBTreeTest 
 @ Test 
 public void testLargeBatchesLargeRange ( ) throws ExecutionException , InterruptedException 
 { 
 - testInsertions ( 10000000 , 5000 , 3 , 100 , true ) ; 
 + testInsertions ( 100000000 , 5000 , 3 , 100 , true ) ; 
 } 
 
 @ Test 
 @ @ - 178 , 16 + 182 , 21 @ @ public class LongBTreeTest 
 canon . putAll ( buffer ) ; 
 ctxt . stop ( ) ; 
 ctxt = BTREE _ TIMER . time ( ) ; 
 - btree = BTree . update ( btree , ICMP , buffer . keySet ( ) , true , null ) ; 
 + Object [ ] next = null ; 
 + while ( next = = null ) 
 + next = BTree . update ( btree , ICMP , buffer . keySet ( ) , true , SPORADIC _ ABORT ) ; 
 + btree = next ; 
 ctxt . stop ( ) ; 
 
 + if ( ! BTree . isWellFormed ( btree , ICMP ) ) 
 + { 
 + System . out . println ( " ERROR : Not well formed " ) ; 
 + throw new AssertionError ( " Not well formed ! " ) ; 
 + } 
 if ( quickEquality ) 
 testEqual ( " " , BTree . < Integer > slice ( btree , true ) , canon . keySet ( ) . iterator ( ) ) ; 
 else 
 r . addAll ( testAllSlices ( " RND " , btree , new TreeSet < > ( canon . keySet ( ) ) ) ) ; 
 - 
 - if ( ! BTree . isWellFormed ( btree ) ) 
 - System . out . println ( " ERROR : Not well formed " ) ; 
 } 
 return r ; 
 } 
 @ @ - 207 , 7 + 216 , 10 @ @ public class LongBTreeTest 
 String id = String . format ( " [ 0 . . % d ) " , canon . size ( ) ) ; 
 System . out . println ( " Testing " + id ) ; 
 Futures . allAsList ( testAllSlices ( id , cur , canon ) ) . get ( ) ; 
 - cur = BTree . update ( cur , ICMP , Arrays . asList ( i ) , true , null ) ; 
 + Object [ ] next = null ; 
 + while ( next = = null ) 
 + next = BTree . update ( cur , ICMP , Arrays . asList ( i ) , true , SPORADIC _ ABORT ) ; 
 + cur = next ; 
 canon . add ( i ) ; 
 } 
 } 
 @ @ - 277 , 7 + 289 , 7 @ @ public class LongBTreeTest 
 } 
 } 
 
 - private static < V > boolean testEqual ( String id , Iterator < V > btree , Iterator < V > canon ) 
 + private static < V > void testEqual ( String id , Iterator < V > btree , Iterator < V > canon ) 
 { 
 boolean equal = true ; 
 while ( btree . hasNext ( ) & & canon . hasNext ( ) ) 
 @ @ - 300 , 7 + 312 , 8 @ @ public class LongBTreeTest 
 System . out . println ( String . format ( " % s : Expected % d , Got Nil " , id , canon . next ( ) ) ) ; 
 equal = false ; 
 } 
 - return equal ; 
 + if ( ! equal ) 
 + throw new AssertionError ( " Not equal " ) ; 
 } 
 
 / / should only be called on sets that range from 0 - > N or N - > 0 
 @ @ - 354 , 4 + 367 , 35 @ @ public class LongBTreeTest 
 } ; 
 } 
 
 + private static final class RandomAbort < V > implements UpdateFunction < V > 
 + { 
 + final Random rnd ; 
 + final float chance ; 
 + private RandomAbort ( Random rnd , float chance ) 
 + { 
 + this . rnd = rnd ; 
 + this . chance = chance ; 
 + } 
 + 
 + public V apply ( V replacing , V update ) 
 + { 
 + return update ; 
 + } 
 + 
 + public boolean abortEarly ( ) 
 + { 
 + return rnd . nextFloat ( ) < chance ; 
 + } 
 + 
 + public void allocated ( long heapSize ) 
 + { 
 + 
 + } 
 + 
 + public V apply ( V v ) 
 + { 
 + return v ; 
 + } 
 + } 
 + 
 } 
 diff - - git a / test / unit / org / apache / cassandra / utils / BTreeTest . java b / test / unit / org / apache / cassandra / utils / BTreeTest . java 
 index b4a960b . . a6d4528 100644 
 - - - a / test / unit / org / apache / cassandra / utils / BTreeTest . java 
 + + + b / test / unit / org / apache / cassandra / utils / BTreeTest . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . util . concurrent . ThreadLocalRandom ; 
 
 import org . junit . Test ; 
 
 + import junit . framework . Assert ; 
 import org . apache . cassandra . utils . btree . BTree ; 
 import org . apache . cassandra . utils . btree . BTreeSet ; 
 import org . apache . cassandra . utils . btree . UpdateFunction ; 
 @ @ - 119 , 7 + 120 , 65 @ @ public class BTreeTest 
 assert vs . size ( ) = = count ; 
 int i = 0 ; 
 for ( Integer j : vs ) 
 - assert j = = ints [ i + + ] ; 
 + Assert . assertEquals ( j , ints [ i + + ] ) ; 
 } 
 
 + @ Test 
 + public void testClearOnAbort ( ) 
 + { 
 + final Comparator < String > cmp = new Comparator < String > ( ) 
 + { 
 + public int compare ( String o1 , String o2 ) 
 + { 
 + return o1 . compareTo ( o2 ) ; 
 + } 
 + } ; 
 + 
 + Object [ ] btree = BTree . build ( ranges ( range ( 0 , 8 ) ) , cmp , true , UpdateFunction . NoOp . < String > instance ( ) ) ; 
 + BTree . update ( btree , cmp , ranges ( range ( 0 , 94 ) ) , false , new AbortAfterX ( 90 ) ) ; 
 + btree = BTree . update ( btree , cmp , ranges ( range ( 0 , 94 ) ) , false , UpdateFunction . NoOp . < String > instance ( ) ) ; 
 + Assert . assertTrue ( BTree . isWellFormed ( btree , cmp ) ) ; 
 + } 
 + 
 + private static final class AbortAfterX implements UpdateFunction < String > 
 + { 
 + int counter ; 
 + final int abortAfter ; 
 + private AbortAfterX ( int abortAfter ) 
 + { 
 + this . abortAfter = abortAfter ; 
 + } 
 + public String apply ( String replacing , String update ) 
 + { 
 + return update ; 
 + } 
 + public boolean abortEarly ( ) 
 + { 
 + return counter + + > abortAfter ; 
 + } 
 + public void allocated ( long heapSize ) 
 + { 
 + } 
 + public String apply ( String v ) 
 + { 
 + return v ; 
 + } 
 + } 
 + 
 + private static int [ ] range ( int lb , int ub ) 
 + { 
 + return new int [ ] { lb , ub } ; 
 + } 
 + 
 + private static List < String > ranges ( int [ ] . . . ranges ) 
 + { 
 + 
 + List < String > r = new ArrayList < > ( ) ; 
 + for ( int [ ] range : ranges ) 
 + { 
 + for ( int i = range [ 0 ] ; i < range [ 1 ] ; i + = 1 ) 
 + r . add ( Integer . toString ( i ) ) ; 
 + } 
 + return r ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
