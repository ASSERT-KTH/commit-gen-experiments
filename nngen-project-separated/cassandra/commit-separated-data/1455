BLEU SCORE: 0.024893534183931972

TEST MSG: fix build
GENERATED MSG: replace FBUtilities . unchecked with Throwables . propagate

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / lifecycle / View . java b / src / java / org / apache / cassandra / db / lifecycle / View . java <nl> index 324dbc1 . . 75590fa 100644 <nl> - - - a / src / java / org / apache / cassandra / db / lifecycle / View . java <nl> + + + b / src / java / org / apache / cassandra / db / lifecycle / View . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . db . lifecycle ; <nl> <nl> import java . util . * ; <nl> <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Functions ; <nl> import com . google . common . base . Predicate ; <nl> @ @ - 41 , 6 + 42 , 7 @ @ import static com . google . common . collect . Iterables . filter ; <nl> import static com . google . common . collect . Iterables . transform ; <nl> import static java . util . Collections . singleton ; <nl> import static org . apache . cassandra . db . lifecycle . Helpers . emptySet ; <nl> + import static org . apache . cassandra . db . lifecycle . Helpers . filterOut ; <nl> import static org . apache . cassandra . db . lifecycle . Helpers . replace ; <nl> <nl> / * * <nl> @ @ - 124 , 6 + 126 , 14 @ @ public class View <nl> return select ( sstableSet , filter ( sstables , filter ) ) ; <nl> } <nl> <nl> + / / any sstable known by this tracker in any form ; we have a special method here since it ' s only used for testing / debug <nl> + / / ( strong leak detection ) , and it does not follow the normal pattern <nl> + @ VisibleForTesting <nl> + public Iterable < SSTableReader > allKnownSSTables ( ) <nl> + { <nl> + return Iterables . concat ( sstables , filterOut ( compacting , sstables ) ) ; <nl> + } <nl> + <nl> private Iterable < SSTableReader > select ( SSTableSet sstableSet , Iterable < SSTableReader > sstables ) <nl> { <nl> switch ( sstableSet ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / concurrent / Ref . java b / src / java / org / apache / cassandra / utils / concurrent / Ref . java <nl> index 522caca . . 92c1a0c 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / concurrent / Ref . java <nl> + + + b / src / java / org / apache / cassandra / utils / concurrent / Ref . java <nl> @ @ - 498 , 7 + 498 , 7 @ @ public final class Ref < T > implements RefCounted < T > <nl> for ( ColumnFamilyStore cfs : ks . getColumnFamilyStores ( ) ) <nl> { <nl> View view = cfs . getTracker ( ) . getView ( ) ; <nl> - for ( SSTableReader reader : Iterables . concat ( view . sstables , view . compacting ) ) <nl> + for ( SSTableReader reader : view . allKnownSSTables ( ) ) <nl> reader . addTo ( expected ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index fd6991c . . 78d7267 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 28 , 6 + 28 , 7 @ @ Merged from 1 . 0 : <nl> * Fix LCS splitting sstable base on uncompressed size ( CASSANDRA - 4419 ) <nl> * Bootstraps that fail are detected upon restart and will retry safely without <nl> needing to delete existing data first ( CASSANDRA - 4427 ) <nl> + * seed status no longer disables bootstrap ( CASSANDRA - 4427 ) <nl> * ( cqlsh ) add a COPY TO command to copy a CF to a CSV file ( CASSANDRA - 4434 ) <nl> * Don ' t purge columns during upgradesstables ( CASSANDRA - 4462 ) <nl> * Push the validation of secondary index values to the SecondaryIndexManager ( CASSANDRA - 4240 ) <nl> diff - - git a / src / java / org / apache / cassandra / config / Schema . java b / src / java / org / apache / cassandra / config / Schema . java <nl> index 9501778 . . 95d092f 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Schema . java <nl> + + + b / src / java / org / apache / cassandra / config / Schema . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package org . apache . cassandra . config ; <nl> import java . io . IOError ; <nl> import java . nio . ByteBuffer ; <nl> import java . security . MessageDigest ; <nl> + import java . security . NoSuchAlgorithmException ; <nl> import java . util . * ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> import java . util . concurrent . locks . ReadWriteLock ; <nl> @ @ - 69 , 8 + 70 , 20 @ @ public class Schema <nl> private final BiMap < Pair < String , String > , Integer > cfIdMap = HashBiMap . create ( ) ; <nl> <nl> private volatile UUID version ; <nl> - private final ReadWriteLock versionLock = new ReentrantReadWriteLock ( ) ; <nl> <nl> + public static final UUID emptyVersion ; <nl> + <nl> + static <nl> + { <nl> + try <nl> + { <nl> + emptyVersion = UUID . nameUUIDFromBytes ( MessageDigest . getInstance ( " MD5 " ) . digest ( ) ) ; <nl> + } <nl> + catch ( NoSuchAlgorithmException e ) <nl> + { <nl> + throw new AssertionError ( ) ; <nl> + } <nl> + } <nl> <nl> / * * <nl> * Initialize empty schema object <nl> @ @ - 428 , 16 + 441 , 7 @ @ public class Schema <nl> * / <nl> public UUID getVersion ( ) <nl> { <nl> - versionLock . readLock ( ) . lock ( ) ; <nl> - <nl> - try <nl> - { <nl> - return version ; <nl> - } <nl> - finally <nl> - { <nl> - versionLock . readLock ( ) . unlock ( ) ; <nl> - } <nl> + return version ; <nl> } <nl> <nl> / * * <nl> @ @ - 446 , 8 + 450 , 6 @ @ public class Schema <nl> * / <nl> public void updateVersion ( ) <nl> { <nl> - versionLock . writeLock ( ) . lock ( ) ; <nl> - <nl> try <nl> { <nl> MessageDigest versionDigest = MessageDigest . getInstance ( " MD5 " ) ; <nl> @ @ - 466 , 10 + 468 , 6 @ @ public class Schema <nl> { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> - finally <nl> - { <nl> - versionLock . writeLock ( ) . unlock ( ) ; <nl> - } <nl> } <nl> <nl> / * <nl> diff - - git a / src / java / org / apache / cassandra / gms / VersionedValue . java b / src / java / org / apache / cassandra / gms / VersionedValue . java <nl> index 85c9b38 . . 0b89c5a 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / VersionedValue . java <nl> + + + b / src / java / org / apache / cassandra / gms / VersionedValue . java <nl> @ @ - 113 , 7 + 113 , 7 @ @ public class VersionedValue implements Comparable < VersionedValue > <nl> return new VersionedValue ( String . valueOf ( load ) ) ; <nl> } <nl> <nl> - public VersionedValue migration ( UUID newVersion ) <nl> + public VersionedValue schema ( UUID newVersion ) <nl> { <nl> return new VersionedValue ( newVersion . toString ( ) ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> index a067de3 . . eedb20d 100644 <nl> - - - a / src / java / org / apache / cassandra / service / MigrationManager . java <nl> + + + b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> @ @ - 236 , 7 + 236 , 7 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber <nl> public static void passiveAnnounce ( UUID version ) <nl> { <nl> assert Gossiper . instance . isEnabled ( ) ; <nl> - Gossiper . instance . addLocalApplicationState ( ApplicationState . SCHEMA , StorageService . instance . valueFactory . migration ( version ) ) ; <nl> + Gossiper . instance . addLocalApplicationState ( ApplicationState . SCHEMA , StorageService . instance . valueFactory . schema ( version ) ) ; <nl> logger . debug ( " Gossiping my schema version " + version ) ; <nl> } <nl> <nl> @ @ - 403 , 7 + 403 , 6 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber <nl> <nl> IAsyncCallback cb = new IAsyncCallback ( ) <nl> { <nl> - @ Override <nl> public void response ( Message message ) <nl> { <nl> try <nl> @ @ - 420 , 7 + 419 , 6 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber <nl> } <nl> } <nl> <nl> - @ Override <nl> public boolean isLatencyForSnitch ( ) <nl> { <nl> return false ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index bfc8c81 . . 5591488 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 557 , 30 + 557 , 47 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> <nl> HintedHandOffManager . instance . start ( ) ; <nl> <nl> - if ( DatabaseDescriptor . isAutoBootstrap ( ) <nl> - & & DatabaseDescriptor . getSeeds ( ) . contains ( FBUtilities . getBroadcastAddress ( ) ) <nl> - & & ! SystemTable . bootstrapComplete ( ) ) <nl> - logger _ . info ( " This node will not auto bootstrap because it is configured to be a seed node . " ) ; <nl> + boolean schemaPresent = false ; <nl> + if ( DatabaseDescriptor . isAutoBootstrap ( ) & & ! SystemTable . bootstrapComplete ( ) & & delay > 0 ) <nl> + { <nl> + / / wait a couple gossip rounds so our schema check has something to go by <nl> + FBUtilities . sleep ( 2 * Gossiper . intervalInMillis ) ; <nl> + } <nl> + for ( Entry < InetAddress , EndpointState > entry : Gossiper . instance . getEndpointStates ( ) ) <nl> + { <nl> + if ( entry . getKey ( ) . equals ( FBUtilities . getBroadcastAddress ( ) ) ) <nl> + { <nl> + / / skip ourselves to avoid confusing the tests , which always load a schema first thing <nl> + continue ; <nl> + } <nl> <nl> - InetAddress current = null ; <nl> - / / we can bootstrap at startup , or if we detect a previous attempt that failed , which is to say : <nl> - / / DD . isAutoBootstrap must be true AND : <nl> - / / bootstrap is not recorded as complete , OR <nl> - / / DD . getSeeds does not contain our BCA , OR <nl> - / / we do not have non - system tables already <nl> - / / OR : <nl> - / / we detect that we were previously trying to bootstrap ( ST . bootstrapInProgress is true ) <nl> + if ( ! entry . getValue ( ) . getApplicationState ( ApplicationState . SCHEMA ) . value . equals ( Schema . emptyVersion . toString ( ) ) ) <nl> + { <nl> + schemaPresent = true ; <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + / / We can bootstrap at startup , or if we detect a previous attempt that failed . Either way , if the user <nl> + / / manually sets auto _ bootstrap to false , we ' ll skip streaming data from other nodes and jump directly <nl> + / / into the ring . <nl> + / / <nl> + / / The one exception is if after the above sleep we still have no schema information , we ' ll assume <nl> + / / we ' re part of a fresh cluster start , and also skip bootstrap . This is less confusing for new users , <nl> + / / as well as avoiding the nonsensical state of trying to stream from cluster with no active peers . <nl> Token < ? > token ; <nl> + InetAddress current = null ; <nl> + logger _ . debug ( " Bootstrap variables : % s % s % s % s " , <nl> + new Object [ ] { DatabaseDescriptor . isAutoBootstrap ( ) , SystemTable . bootstrapInProgress ( ) , SystemTable . bootstrapComplete ( ) , schemaPresent } ) ; <nl> if ( DatabaseDescriptor . isAutoBootstrap ( ) <nl> - & & ! ( SystemTable . bootstrapComplete ( ) | | DatabaseDescriptor . getSeeds ( ) . contains ( FBUtilities . getBroadcastAddress ( ) ) | | ! Schema . instance . getNonSystemTables ( ) . isEmpty ( ) ) <nl> - | | SystemTable . bootstrapInProgress ( ) ) <nl> + & & ( SystemTable . bootstrapInProgress ( ) | | ( ! SystemTable . bootstrapComplete ( ) & & schemaPresent ) ) ) <nl> { <nl> if ( SystemTable . bootstrapInProgress ( ) ) <nl> logger _ . warn ( " Detected previous bootstrap failure ; retrying " ) ; <nl> else <nl> SystemTable . setBootstrapState ( SystemTable . BootstrapState . IN _ PROGRESS ) ; <nl> - setMode ( Mode . JOINING , " waiting for ring and schema information " , true ) ; <nl> - / / first sleep the delay to make sure we see the schema <nl> + setMode ( Mode . JOINING , " waiting for ring information " , true ) ; <nl> + / / first sleep the delay to make sure we see all our peers <nl> try <nl> { <nl> Thread . sleep ( delay ) ; <nl> @ @ - 589 , 7 + 606 , 8 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> { <nl> throw new AssertionError ( e ) ; <nl> } <nl> - / / now if our schema hasn ' t matched , keep sleeping until it does <nl> + / / if our schema hasn ' t matched yet , keep sleeping until it does <nl> + / / ( post CASSANDRA - 1391 we don ' t expect this to be necessary very often , but it doesn ' t hurt to be careful ) <nl> while ( ! MigrationManager . isReadyForBootstrap ( ) ) <nl> { <nl> setMode ( Mode . JOINING , " waiting for schema information to complete " , true ) ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / lifecycle / View . java b / src / java / org / apache / cassandra / db / lifecycle / View . java 
 index 324dbc1 . . 75590fa 100644 
 - - - a / src / java / org / apache / cassandra / db / lifecycle / View . java 
 + + + b / src / java / org / apache / cassandra / db / lifecycle / View . java 
 @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . db . lifecycle ; 
 
 import java . util . * ; 
 
 + import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . base . Function ; 
 import com . google . common . base . Functions ; 
 import com . google . common . base . Predicate ; 
 @ @ - 41 , 6 + 42 , 7 @ @ import static com . google . common . collect . Iterables . filter ; 
 import static com . google . common . collect . Iterables . transform ; 
 import static java . util . Collections . singleton ; 
 import static org . apache . cassandra . db . lifecycle . Helpers . emptySet ; 
 + import static org . apache . cassandra . db . lifecycle . Helpers . filterOut ; 
 import static org . apache . cassandra . db . lifecycle . Helpers . replace ; 
 
 / * * 
 @ @ - 124 , 6 + 126 , 14 @ @ public class View 
 return select ( sstableSet , filter ( sstables , filter ) ) ; 
 } 
 
 + / / any sstable known by this tracker in any form ; we have a special method here since it ' s only used for testing / debug 
 + / / ( strong leak detection ) , and it does not follow the normal pattern 
 + @ VisibleForTesting 
 + public Iterable < SSTableReader > allKnownSSTables ( ) 
 + { 
 + return Iterables . concat ( sstables , filterOut ( compacting , sstables ) ) ; 
 + } 
 + 
 private Iterable < SSTableReader > select ( SSTableSet sstableSet , Iterable < SSTableReader > sstables ) 
 { 
 switch ( sstableSet ) 
 diff - - git a / src / java / org / apache / cassandra / utils / concurrent / Ref . java b / src / java / org / apache / cassandra / utils / concurrent / Ref . java 
 index 522caca . . 92c1a0c 100644 
 - - - a / src / java / org / apache / cassandra / utils / concurrent / Ref . java 
 + + + b / src / java / org / apache / cassandra / utils / concurrent / Ref . java 
 @ @ - 498 , 7 + 498 , 7 @ @ public final class Ref < T > implements RefCounted < T > 
 for ( ColumnFamilyStore cfs : ks . getColumnFamilyStores ( ) ) 
 { 
 View view = cfs . getTracker ( ) . getView ( ) ; 
 - for ( SSTableReader reader : Iterables . concat ( view . sstables , view . compacting ) ) 
 + for ( SSTableReader reader : view . allKnownSSTables ( ) ) 
 reader . addTo ( expected ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index fd6991c . . 78d7267 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 28 , 6 + 28 , 7 @ @ Merged from 1 . 0 : 
 * Fix LCS splitting sstable base on uncompressed size ( CASSANDRA - 4419 ) 
 * Bootstraps that fail are detected upon restart and will retry safely without 
 needing to delete existing data first ( CASSANDRA - 4427 ) 
 + * seed status no longer disables bootstrap ( CASSANDRA - 4427 ) 
 * ( cqlsh ) add a COPY TO command to copy a CF to a CSV file ( CASSANDRA - 4434 ) 
 * Don ' t purge columns during upgradesstables ( CASSANDRA - 4462 ) 
 * Push the validation of secondary index values to the SecondaryIndexManager ( CASSANDRA - 4240 ) 
 diff - - git a / src / java / org / apache / cassandra / config / Schema . java b / src / java / org / apache / cassandra / config / Schema . java 
 index 9501778 . . 95d092f 100644 
 - - - a / src / java / org / apache / cassandra / config / Schema . java 
 + + + b / src / java / org / apache / cassandra / config / Schema . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package org . apache . cassandra . config ; 
 import java . io . IOError ; 
 import java . nio . ByteBuffer ; 
 import java . security . MessageDigest ; 
 + import java . security . NoSuchAlgorithmException ; 
 import java . util . * ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 import java . util . concurrent . locks . ReadWriteLock ; 
 @ @ - 69 , 8 + 70 , 20 @ @ public class Schema 
 private final BiMap < Pair < String , String > , Integer > cfIdMap = HashBiMap . create ( ) ; 
 
 private volatile UUID version ; 
 - private final ReadWriteLock versionLock = new ReentrantReadWriteLock ( ) ; 
 
 + public static final UUID emptyVersion ; 
 + 
 + static 
 + { 
 + try 
 + { 
 + emptyVersion = UUID . nameUUIDFromBytes ( MessageDigest . getInstance ( " MD5 " ) . digest ( ) ) ; 
 + } 
 + catch ( NoSuchAlgorithmException e ) 
 + { 
 + throw new AssertionError ( ) ; 
 + } 
 + } 
 
 / * * 
 * Initialize empty schema object 
 @ @ - 428 , 16 + 441 , 7 @ @ public class Schema 
 * / 
 public UUID getVersion ( ) 
 { 
 - versionLock . readLock ( ) . lock ( ) ; 
 - 
 - try 
 - { 
 - return version ; 
 - } 
 - finally 
 - { 
 - versionLock . readLock ( ) . unlock ( ) ; 
 - } 
 + return version ; 
 } 
 
 / * * 
 @ @ - 446 , 8 + 450 , 6 @ @ public class Schema 
 * / 
 public void updateVersion ( ) 
 { 
 - versionLock . writeLock ( ) . lock ( ) ; 
 - 
 try 
 { 
 MessageDigest versionDigest = MessageDigest . getInstance ( " MD5 " ) ; 
 @ @ - 466 , 10 + 468 , 6 @ @ public class Schema 
 { 
 throw new RuntimeException ( e ) ; 
 } 
 - finally 
 - { 
 - versionLock . writeLock ( ) . unlock ( ) ; 
 - } 
 } 
 
 / * 
 diff - - git a / src / java / org / apache / cassandra / gms / VersionedValue . java b / src / java / org / apache / cassandra / gms / VersionedValue . java 
 index 85c9b38 . . 0b89c5a 100644 
 - - - a / src / java / org / apache / cassandra / gms / VersionedValue . java 
 + + + b / src / java / org / apache / cassandra / gms / VersionedValue . java 
 @ @ - 113 , 7 + 113 , 7 @ @ public class VersionedValue implements Comparable < VersionedValue > 
 return new VersionedValue ( String . valueOf ( load ) ) ; 
 } 
 
 - public VersionedValue migration ( UUID newVersion ) 
 + public VersionedValue schema ( UUID newVersion ) 
 { 
 return new VersionedValue ( newVersion . toString ( ) ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java 
 index a067de3 . . eedb20d 100644 
 - - - a / src / java / org / apache / cassandra / service / MigrationManager . java 
 + + + b / src / java / org / apache / cassandra / service / MigrationManager . java 
 @ @ - 236 , 7 + 236 , 7 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber 
 public static void passiveAnnounce ( UUID version ) 
 { 
 assert Gossiper . instance . isEnabled ( ) ; 
 - Gossiper . instance . addLocalApplicationState ( ApplicationState . SCHEMA , StorageService . instance . valueFactory . migration ( version ) ) ; 
 + Gossiper . instance . addLocalApplicationState ( ApplicationState . SCHEMA , StorageService . instance . valueFactory . schema ( version ) ) ; 
 logger . debug ( " Gossiping my schema version " + version ) ; 
 } 
 
 @ @ - 403 , 7 + 403 , 6 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber 
 
 IAsyncCallback cb = new IAsyncCallback ( ) 
 { 
 - @ Override 
 public void response ( Message message ) 
 { 
 try 
 @ @ - 420 , 7 + 419 , 6 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber 
 } 
 } 
 
 - @ Override 
 public boolean isLatencyForSnitch ( ) 
 { 
 return false ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index bfc8c81 . . 5591488 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 557 , 30 + 557 , 47 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 
 HintedHandOffManager . instance . start ( ) ; 
 
 - if ( DatabaseDescriptor . isAutoBootstrap ( ) 
 - & & DatabaseDescriptor . getSeeds ( ) . contains ( FBUtilities . getBroadcastAddress ( ) ) 
 - & & ! SystemTable . bootstrapComplete ( ) ) 
 - logger _ . info ( " This node will not auto bootstrap because it is configured to be a seed node . " ) ; 
 + boolean schemaPresent = false ; 
 + if ( DatabaseDescriptor . isAutoBootstrap ( ) & & ! SystemTable . bootstrapComplete ( ) & & delay > 0 ) 
 + { 
 + / / wait a couple gossip rounds so our schema check has something to go by 
 + FBUtilities . sleep ( 2 * Gossiper . intervalInMillis ) ; 
 + } 
 + for ( Entry < InetAddress , EndpointState > entry : Gossiper . instance . getEndpointStates ( ) ) 
 + { 
 + if ( entry . getKey ( ) . equals ( FBUtilities . getBroadcastAddress ( ) ) ) 
 + { 
 + / / skip ourselves to avoid confusing the tests , which always load a schema first thing 
 + continue ; 
 + } 
 
 - InetAddress current = null ; 
 - / / we can bootstrap at startup , or if we detect a previous attempt that failed , which is to say : 
 - / / DD . isAutoBootstrap must be true AND : 
 - / / bootstrap is not recorded as complete , OR 
 - / / DD . getSeeds does not contain our BCA , OR 
 - / / we do not have non - system tables already 
 - / / OR : 
 - / / we detect that we were previously trying to bootstrap ( ST . bootstrapInProgress is true ) 
 + if ( ! entry . getValue ( ) . getApplicationState ( ApplicationState . SCHEMA ) . value . equals ( Schema . emptyVersion . toString ( ) ) ) 
 + { 
 + schemaPresent = true ; 
 + break ; 
 + } 
 + } 
 + 
 + / / We can bootstrap at startup , or if we detect a previous attempt that failed . Either way , if the user 
 + / / manually sets auto _ bootstrap to false , we ' ll skip streaming data from other nodes and jump directly 
 + / / into the ring . 
 + / / 
 + / / The one exception is if after the above sleep we still have no schema information , we ' ll assume 
 + / / we ' re part of a fresh cluster start , and also skip bootstrap . This is less confusing for new users , 
 + / / as well as avoiding the nonsensical state of trying to stream from cluster with no active peers . 
 Token < ? > token ; 
 + InetAddress current = null ; 
 + logger _ . debug ( " Bootstrap variables : % s % s % s % s " , 
 + new Object [ ] { DatabaseDescriptor . isAutoBootstrap ( ) , SystemTable . bootstrapInProgress ( ) , SystemTable . bootstrapComplete ( ) , schemaPresent } ) ; 
 if ( DatabaseDescriptor . isAutoBootstrap ( ) 
 - & & ! ( SystemTable . bootstrapComplete ( ) | | DatabaseDescriptor . getSeeds ( ) . contains ( FBUtilities . getBroadcastAddress ( ) ) | | ! Schema . instance . getNonSystemTables ( ) . isEmpty ( ) ) 
 - | | SystemTable . bootstrapInProgress ( ) ) 
 + & & ( SystemTable . bootstrapInProgress ( ) | | ( ! SystemTable . bootstrapComplete ( ) & & schemaPresent ) ) ) 
 { 
 if ( SystemTable . bootstrapInProgress ( ) ) 
 logger _ . warn ( " Detected previous bootstrap failure ; retrying " ) ; 
 else 
 SystemTable . setBootstrapState ( SystemTable . BootstrapState . IN _ PROGRESS ) ; 
 - setMode ( Mode . JOINING , " waiting for ring and schema information " , true ) ; 
 - / / first sleep the delay to make sure we see the schema 
 + setMode ( Mode . JOINING , " waiting for ring information " , true ) ; 
 + / / first sleep the delay to make sure we see all our peers 
 try 
 { 
 Thread . sleep ( delay ) ; 
 @ @ - 589 , 7 + 606 , 8 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 { 
 throw new AssertionError ( e ) ; 
 } 
 - / / now if our schema hasn ' t matched , keep sleeping until it does 
 + / / if our schema hasn ' t matched yet , keep sleeping until it does 
 + / / ( post CASSANDRA - 1391 we don ' t expect this to be necessary very often , but it doesn ' t hurt to be careful ) 
 while ( ! MigrationManager . isReadyForBootstrap ( ) ) 
 { 
 setMode ( Mode . JOINING , " waiting for schema information to complete " , true ) ;
