BLEU SCORE: 0.12600736402830257

TEST MSG: Introduce background cache refreshing to permissions cache
GENERATED MSG: Allow permissions cache to be set via JMX

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 9ccbf45 . . adb374a 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 6 @ @ <nl> 2 . 0 . 12 : <nl> + * Introduce background cache refreshing to permissions cache <nl> + ( CASSANDRA - 8194 ) <nl> * Fix race condition in StreamTransferTask that could lead to <nl> infinite loops and premature sstable deletion ( CASSANDRA - 7704 ) <nl> * Add an extra version check to MigrationTask ( CASSANDRA - 8462 ) <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index 5eaffc2 . . 45290aa 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 79 , 6 + 79 , 14 @ @ authorizer : AllowAllAuthorizer <nl> # Will be disabled automatically for AllowAllAuthorizer . <nl> permissions _ validity _ in _ ms : 2000 <nl> <nl> + # Refresh interval for permissions cache ( if enabled ) . <nl> + # After this interval , cache entries become eligible for refresh . Upon next <nl> + # access , an async reload is scheduled and the old value returned until it <nl> + # completes . If permissions _ validity _ in _ ms is non - zero , then this must be <nl> + # also . <nl> + # Defaults to the same value as permissions _ validity _ in _ ms . <nl> + # permissions _ update _ interval _ in _ ms : 1000 <nl> + <nl> # The partitioner is responsible for distributing groups of rows ( by <nl> # partition key ) across nodes in the cluster . You should leave this <nl> # alone for new clusters . The partitioner can NOT be changed without <nl> diff - - git a / src / java / org / apache / cassandra / auth / Auth . java b / src / java / org / apache / cassandra / auth / Auth . java <nl> index 94d4b3d . . 465643d 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / Auth . java <nl> + + + b / src / java / org / apache / cassandra / auth / Auth . java <nl> @ @ - 20 , 9 + 20 , 6 @ @ package org . apache . cassandra . auth ; <nl> import java . util . Set ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> - import com . google . common . cache . CacheBuilder ; <nl> - import com . google . common . cache . CacheLoader ; <nl> - import com . google . common . cache . LoadingCache ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . Lists ; <nl> import org . apache . commons . lang3 . StringUtils ; <nl> @ @ - 32 , 9 + 29 , 9 @ @ import org . slf4j . LoggerFactory ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . KSMetaData ; <nl> import org . apache . cassandra . config . Schema ; <nl> - import org . apache . cassandra . cql3 . UntypedResultSet ; <nl> - import org . apache . cassandra . cql3 . QueryProcessor ; <nl> import org . apache . cassandra . cql3 . QueryOptions ; <nl> + import org . apache . cassandra . cql3 . QueryProcessor ; <nl> + import org . apache . cassandra . cql3 . UntypedResultSet ; <nl> import org . apache . cassandra . cql3 . statements . SelectStatement ; <nl> import org . apache . cassandra . db . ConsistencyLevel ; <nl> import org . apache . cassandra . exceptions . RequestExecutionException ; <nl> @ @ - 43 , 9 + 40 , 8 @ @ import org . apache . cassandra . locator . SimpleStrategy ; <nl> import org . apache . cassandra . service . * ; <nl> import org . apache . cassandra . transport . messages . ResultMessage ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> - import org . apache . cassandra . utils . Pair ; <nl> <nl> - public class Auth implements AuthMBean <nl> + public class Auth <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( Auth . class ) ; <nl> <nl> @ @ - 57 , 8 + 53 , 10 @ @ public class Auth implements AuthMBean <nl> public static final String USERS _ CF = " users " ; <nl> <nl> / / User - level permissions cache . <nl> - public static volatile LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > permissionsCache = initPermissionsCache ( null ) ; <nl> - <nl> + private static final PermissionsCache permissionsCache = new PermissionsCache ( DatabaseDescriptor . getPermissionsValidity ( ) , <nl> + DatabaseDescriptor . getPermissionsUpdateInterval ( ) , <nl> + DatabaseDescriptor . getPermissionsCacheMaxEntries ( ) , <nl> + DatabaseDescriptor . getAuthorizer ( ) ) ; <nl> <nl> private static final String USERS _ CF _ SCHEMA = String . format ( " CREATE TABLE % s . % s ( " <nl> + " name text , " <nl> @ @ - 71 , 44 + 69 , 9 @ @ public class Auth implements AuthMBean <nl> <nl> private static SelectStatement selectUserStatement ; <nl> <nl> - public int getPermissionsValidity ( ) <nl> - { <nl> - return DatabaseDescriptor . getPermissionsValidity ( ) ; <nl> - } <nl> - <nl> - public void setPermissionsValidity ( int timeoutInMs ) <nl> - { <nl> - DatabaseDescriptor . setPermissionsValidity ( timeoutInMs ) ; <nl> - permissionsCache = initPermissionsCache ( permissionsCache ) ; <nl> - } <nl> - <nl> - public void invalidatePermissionsCache ( ) <nl> - { <nl> - permissionsCache = initPermissionsCache ( null ) ; <nl> - } <nl> - <nl> - private static LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > initPermissionsCache ( LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > oldCache ) <nl> + public static Set < Permission > getPermissions ( AuthenticatedUser user , IResource resource ) <nl> { <nl> - if ( DatabaseDescriptor . getAuthorizer ( ) instanceof AllowAllAuthorizer ) <nl> - return null ; <nl> - <nl> - int validityPeriod = DatabaseDescriptor . getPermissionsValidity ( ) ; <nl> - if ( validityPeriod < = 0 ) <nl> - return null ; <nl> - <nl> - LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > newCache = <nl> - CacheBuilder . newBuilder ( ) . expireAfterWrite ( validityPeriod , TimeUnit . MILLISECONDS ) <nl> - . build ( new CacheLoader < Pair < AuthenticatedUser , IResource > , Set < Permission > > ( ) <nl> - { <nl> - public Set < Permission > load ( Pair < AuthenticatedUser , IResource > userResource ) <nl> - { <nl> - return DatabaseDescriptor . getAuthorizer ( ) . authorize ( userResource . left , <nl> - userResource . right ) ; <nl> - } <nl> - } ) ; <nl> - if ( oldCache ! = null ) <nl> - newCache . putAll ( oldCache . asMap ( ) ) ; <nl> - return newCache ; <nl> + return permissionsCache . getPermissions ( user , resource ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / auth / AuthMBean . java b / src / java / org / apache / cassandra / auth / AuthMBean . java <nl> deleted file mode 100644 <nl> index db11f21 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / auth / AuthMBean . java <nl> + + + / dev / null <nl> @ @ - 1 , 27 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . auth ; <nl> - <nl> - public interface AuthMBean <nl> - { <nl> - public int getPermissionsValidity ( ) ; <nl> - <nl> - public void setPermissionsValidity ( int timeoutInMs ) ; <nl> - <nl> - public void invalidatePermissionsCache ( ) ; <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / auth / PermissionsCache . java b / src / java / org / apache / cassandra / auth / PermissionsCache . java <nl> new file mode 100644 <nl> index 0000000 . . 9e0dfa9 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / auth / PermissionsCache . java <nl> @ @ - 0 , 0 + 1 , 108 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . auth ; <nl> + <nl> + import java . util . Set ; <nl> + import java . util . concurrent . * ; <nl> + <nl> + import com . google . common . cache . CacheBuilder ; <nl> + import com . google . common . cache . CacheLoader ; <nl> + import com . google . common . cache . LoadingCache ; <nl> + import com . google . common . util . concurrent . ListenableFuture ; <nl> + import com . google . common . util . concurrent . ListenableFutureTask ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; <nl> + import org . apache . cassandra . utils . Pair ; <nl> + <nl> + public class PermissionsCache <nl> + { <nl> + private static final Logger logger = LoggerFactory . getLogger ( PermissionsCache . class ) ; <nl> + <nl> + private final ThreadPoolExecutor cacheRefreshExecutor = new DebuggableThreadPoolExecutor ( " PermissionsCacheRefresh " , <nl> + Thread . NORM _ PRIORITY ) ; <nl> + private final IAuthorizer authorizer ; <nl> + private final LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > cache ; <nl> + <nl> + public PermissionsCache ( int validityPeriod , int updateInterval , int maxEntries , IAuthorizer authorizer ) <nl> + { <nl> + this . authorizer = authorizer ; <nl> + this . cache = initCache ( validityPeriod , updateInterval , maxEntries ) ; <nl> + } <nl> + <nl> + public Set < Permission > getPermissions ( AuthenticatedUser user , IResource resource ) <nl> + { <nl> + if ( cache = = null ) <nl> + return authorizer . authorize ( user , resource ) ; <nl> + <nl> + try <nl> + { <nl> + return cache . get ( Pair . create ( user , resource ) ) ; <nl> + } <nl> + catch ( ExecutionException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + private LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > initCache ( int validityPeriod , <nl> + int updateInterval , <nl> + int maxEntries ) <nl> + { <nl> + if ( authorizer instanceof AllowAllAuthorizer ) <nl> + return null ; <nl> + <nl> + if ( validityPeriod < = 0 ) <nl> + return null ; <nl> + <nl> + return CacheBuilder . newBuilder ( ) <nl> + . refreshAfterWrite ( updateInterval , TimeUnit . MILLISECONDS ) <nl> + . expireAfterWrite ( validityPeriod , TimeUnit . MILLISECONDS ) <nl> + . maximumSize ( maxEntries ) <nl> + . build ( new CacheLoader < Pair < AuthenticatedUser , IResource > , Set < Permission > > ( ) <nl> + { <nl> + public Set < Permission > load ( Pair < AuthenticatedUser , IResource > userResource ) <nl> + { <nl> + return authorizer . authorize ( userResource . left , userResource . right ) ; <nl> + } <nl> + <nl> + public ListenableFuture < Set < Permission > > reload ( final Pair < AuthenticatedUser , IResource > userResource , <nl> + final Set < Permission > oldValue ) <nl> + { <nl> + ListenableFutureTask < Set < Permission > > task = ListenableFutureTask . create ( new Callable < Set < Permission > > ( ) <nl> + { <nl> + public Set < Permission > call ( ) throws Exception <nl> + { <nl> + try <nl> + { <nl> + return authorizer . authorize ( userResource . left , userResource . right ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + logger . debug ( " Error performing async refresh of user permissions " , e ) ; <nl> + throw e ; <nl> + } <nl> + } <nl> + } ) ; <nl> + cacheRefreshExecutor . execute ( task ) ; <nl> + return task ; <nl> + } <nl> + } ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index aab5025 . . 4dd71aa 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 43 , 6 + 43 , 8 @ @ public class Config <nl> public String authenticator ; <nl> public String authorizer ; <nl> public int permissions _ validity _ in _ ms = 2000 ; <nl> + public int permissions _ cache _ max _ entries = 1000 ; <nl> + public int permissions _ update _ interval _ in _ ms = - 1 ; <nl> <nl> / * Hashing strategy Random or OPHF * / <nl> public String partitioner ; <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 92ef79a . . 2bfdb16 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 578 , 11 + 578 , 17 @ @ public class DatabaseDescriptor <nl> return conf . permissions _ validity _ in _ ms ; <nl> } <nl> <nl> - public static void setPermissionsValidity ( int timeout ) <nl> + public static int getPermissionsCacheMaxEntries ( ) <nl> { <nl> - conf . permissions _ validity _ in _ ms = timeout ; <nl> + return conf . permissions _ cache _ max _ entries ; <nl> } <nl> <nl> + public static int getPermissionsUpdateInterval ( ) <nl> + { <nl> + return conf . permissions _ update _ interval _ in _ ms = = - 1 <nl> + ? conf . permissions _ validity _ in _ ms <nl> + : conf . permissions _ update _ interval _ in _ ms ; <nl> + } <nl> <nl> public static int getThriftFramedTransportSize ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / service / ClientState . java b / src / java / org / apache / cassandra / service / ClientState . java <nl> index 7611a14 . . 63c9431 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ClientState . java <nl> + + + b / src / java / org / apache / cassandra / service / ClientState . java <nl> @ @ - 19 , 7 + 19 , 6 @ @ package org . apache . cassandra . service ; <nl> <nl> import java . net . SocketAddress ; <nl> import java . util . * ; <nl> - import java . util . concurrent . ExecutionException ; <nl> <nl> import com . google . common . collect . Iterables ; <nl> import com . google . common . collect . Sets ; <nl> @ @ - 40 , 7 + 39 , 6 @ @ import org . apache . cassandra . exceptions . UnauthorizedException ; <nl> import org . apache . cassandra . tracing . Tracing ; <nl> import org . apache . cassandra . thrift . ThriftValidation ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> - import org . apache . cassandra . utils . Pair ; <nl> import org . apache . cassandra . utils . SemanticVersion ; <nl> <nl> / * * <nl> @ @ - 313 , 17 + 311 , 6 @ @ public class ClientState <nl> <nl> private Set < Permission > authorize ( IResource resource ) <nl> { <nl> - / / AllowAllAuthorizer or manually disabled caching . <nl> - if ( Auth . permissionsCache = = null ) <nl> - return DatabaseDescriptor . getAuthorizer ( ) . authorize ( user , resource ) ; <nl> - <nl> - try <nl> - { <nl> - return Auth . permissionsCache . get ( Pair . create ( user , resource ) ) ; <nl> - } <nl> - catch ( ExecutionException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + return Auth . getPermissions ( user , resource ) ; <nl> } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 9ccbf45 . . adb374a 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 6 @ @ 
 2 . 0 . 12 : 
 + * Introduce background cache refreshing to permissions cache 
 + ( CASSANDRA - 8194 ) 
 * Fix race condition in StreamTransferTask that could lead to 
 infinite loops and premature sstable deletion ( CASSANDRA - 7704 ) 
 * Add an extra version check to MigrationTask ( CASSANDRA - 8462 ) 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index 5eaffc2 . . 45290aa 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 79 , 6 + 79 , 14 @ @ authorizer : AllowAllAuthorizer 
 # Will be disabled automatically for AllowAllAuthorizer . 
 permissions _ validity _ in _ ms : 2000 
 
 + # Refresh interval for permissions cache ( if enabled ) . 
 + # After this interval , cache entries become eligible for refresh . Upon next 
 + # access , an async reload is scheduled and the old value returned until it 
 + # completes . If permissions _ validity _ in _ ms is non - zero , then this must be 
 + # also . 
 + # Defaults to the same value as permissions _ validity _ in _ ms . 
 + # permissions _ update _ interval _ in _ ms : 1000 
 + 
 # The partitioner is responsible for distributing groups of rows ( by 
 # partition key ) across nodes in the cluster . You should leave this 
 # alone for new clusters . The partitioner can NOT be changed without 
 diff - - git a / src / java / org / apache / cassandra / auth / Auth . java b / src / java / org / apache / cassandra / auth / Auth . java 
 index 94d4b3d . . 465643d 100644 
 - - - a / src / java / org / apache / cassandra / auth / Auth . java 
 + + + b / src / java / org / apache / cassandra / auth / Auth . java 
 @ @ - 20 , 9 + 20 , 6 @ @ package org . apache . cassandra . auth ; 
 import java . util . Set ; 
 import java . util . concurrent . TimeUnit ; 
 
 - import com . google . common . cache . CacheBuilder ; 
 - import com . google . common . cache . CacheLoader ; 
 - import com . google . common . cache . LoadingCache ; 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . Lists ; 
 import org . apache . commons . lang3 . StringUtils ; 
 @ @ - 32 , 9 + 29 , 9 @ @ import org . slf4j . LoggerFactory ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . KSMetaData ; 
 import org . apache . cassandra . config . Schema ; 
 - import org . apache . cassandra . cql3 . UntypedResultSet ; 
 - import org . apache . cassandra . cql3 . QueryProcessor ; 
 import org . apache . cassandra . cql3 . QueryOptions ; 
 + import org . apache . cassandra . cql3 . QueryProcessor ; 
 + import org . apache . cassandra . cql3 . UntypedResultSet ; 
 import org . apache . cassandra . cql3 . statements . SelectStatement ; 
 import org . apache . cassandra . db . ConsistencyLevel ; 
 import org . apache . cassandra . exceptions . RequestExecutionException ; 
 @ @ - 43 , 9 + 40 , 8 @ @ import org . apache . cassandra . locator . SimpleStrategy ; 
 import org . apache . cassandra . service . * ; 
 import org . apache . cassandra . transport . messages . ResultMessage ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 - import org . apache . cassandra . utils . Pair ; 
 
 - public class Auth implements AuthMBean 
 + public class Auth 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( Auth . class ) ; 
 
 @ @ - 57 , 8 + 53 , 10 @ @ public class Auth implements AuthMBean 
 public static final String USERS _ CF = " users " ; 
 
 / / User - level permissions cache . 
 - public static volatile LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > permissionsCache = initPermissionsCache ( null ) ; 
 - 
 + private static final PermissionsCache permissionsCache = new PermissionsCache ( DatabaseDescriptor . getPermissionsValidity ( ) , 
 + DatabaseDescriptor . getPermissionsUpdateInterval ( ) , 
 + DatabaseDescriptor . getPermissionsCacheMaxEntries ( ) , 
 + DatabaseDescriptor . getAuthorizer ( ) ) ; 
 
 private static final String USERS _ CF _ SCHEMA = String . format ( " CREATE TABLE % s . % s ( " 
 + " name text , " 
 @ @ - 71 , 44 + 69 , 9 @ @ public class Auth implements AuthMBean 
 
 private static SelectStatement selectUserStatement ; 
 
 - public int getPermissionsValidity ( ) 
 - { 
 - return DatabaseDescriptor . getPermissionsValidity ( ) ; 
 - } 
 - 
 - public void setPermissionsValidity ( int timeoutInMs ) 
 - { 
 - DatabaseDescriptor . setPermissionsValidity ( timeoutInMs ) ; 
 - permissionsCache = initPermissionsCache ( permissionsCache ) ; 
 - } 
 - 
 - public void invalidatePermissionsCache ( ) 
 - { 
 - permissionsCache = initPermissionsCache ( null ) ; 
 - } 
 - 
 - private static LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > initPermissionsCache ( LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > oldCache ) 
 + public static Set < Permission > getPermissions ( AuthenticatedUser user , IResource resource ) 
 { 
 - if ( DatabaseDescriptor . getAuthorizer ( ) instanceof AllowAllAuthorizer ) 
 - return null ; 
 - 
 - int validityPeriod = DatabaseDescriptor . getPermissionsValidity ( ) ; 
 - if ( validityPeriod < = 0 ) 
 - return null ; 
 - 
 - LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > newCache = 
 - CacheBuilder . newBuilder ( ) . expireAfterWrite ( validityPeriod , TimeUnit . MILLISECONDS ) 
 - . build ( new CacheLoader < Pair < AuthenticatedUser , IResource > , Set < Permission > > ( ) 
 - { 
 - public Set < Permission > load ( Pair < AuthenticatedUser , IResource > userResource ) 
 - { 
 - return DatabaseDescriptor . getAuthorizer ( ) . authorize ( userResource . left , 
 - userResource . right ) ; 
 - } 
 - } ) ; 
 - if ( oldCache ! = null ) 
 - newCache . putAll ( oldCache . asMap ( ) ) ; 
 - return newCache ; 
 + return permissionsCache . getPermissions ( user , resource ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / auth / AuthMBean . java b / src / java / org / apache / cassandra / auth / AuthMBean . java 
 deleted file mode 100644 
 index db11f21 . . 0000000 
 - - - a / src / java / org / apache / cassandra / auth / AuthMBean . java 
 + + + / dev / null 
 @ @ - 1 , 27 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . auth ; 
 - 
 - public interface AuthMBean 
 - { 
 - public int getPermissionsValidity ( ) ; 
 - 
 - public void setPermissionsValidity ( int timeoutInMs ) ; 
 - 
 - public void invalidatePermissionsCache ( ) ; 
 - } 
 diff - - git a / src / java / org / apache / cassandra / auth / PermissionsCache . java b / src / java / org / apache / cassandra / auth / PermissionsCache . java 
 new file mode 100644 
 index 0000000 . . 9e0dfa9 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / auth / PermissionsCache . java 
 @ @ - 0 , 0 + 1 , 108 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . auth ; 
 + 
 + import java . util . Set ; 
 + import java . util . concurrent . * ; 
 + 
 + import com . google . common . cache . CacheBuilder ; 
 + import com . google . common . cache . CacheLoader ; 
 + import com . google . common . cache . LoadingCache ; 
 + import com . google . common . util . concurrent . ListenableFuture ; 
 + import com . google . common . util . concurrent . ListenableFutureTask ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; 
 + import org . apache . cassandra . utils . Pair ; 
 + 
 + public class PermissionsCache 
 + { 
 + private static final Logger logger = LoggerFactory . getLogger ( PermissionsCache . class ) ; 
 + 
 + private final ThreadPoolExecutor cacheRefreshExecutor = new DebuggableThreadPoolExecutor ( " PermissionsCacheRefresh " , 
 + Thread . NORM _ PRIORITY ) ; 
 + private final IAuthorizer authorizer ; 
 + private final LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > cache ; 
 + 
 + public PermissionsCache ( int validityPeriod , int updateInterval , int maxEntries , IAuthorizer authorizer ) 
 + { 
 + this . authorizer = authorizer ; 
 + this . cache = initCache ( validityPeriod , updateInterval , maxEntries ) ; 
 + } 
 + 
 + public Set < Permission > getPermissions ( AuthenticatedUser user , IResource resource ) 
 + { 
 + if ( cache = = null ) 
 + return authorizer . authorize ( user , resource ) ; 
 + 
 + try 
 + { 
 + return cache . get ( Pair . create ( user , resource ) ) ; 
 + } 
 + catch ( ExecutionException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + private LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > initCache ( int validityPeriod , 
 + int updateInterval , 
 + int maxEntries ) 
 + { 
 + if ( authorizer instanceof AllowAllAuthorizer ) 
 + return null ; 
 + 
 + if ( validityPeriod < = 0 ) 
 + return null ; 
 + 
 + return CacheBuilder . newBuilder ( ) 
 + . refreshAfterWrite ( updateInterval , TimeUnit . MILLISECONDS ) 
 + . expireAfterWrite ( validityPeriod , TimeUnit . MILLISECONDS ) 
 + . maximumSize ( maxEntries ) 
 + . build ( new CacheLoader < Pair < AuthenticatedUser , IResource > , Set < Permission > > ( ) 
 + { 
 + public Set < Permission > load ( Pair < AuthenticatedUser , IResource > userResource ) 
 + { 
 + return authorizer . authorize ( userResource . left , userResource . right ) ; 
 + } 
 + 
 + public ListenableFuture < Set < Permission > > reload ( final Pair < AuthenticatedUser , IResource > userResource , 
 + final Set < Permission > oldValue ) 
 + { 
 + ListenableFutureTask < Set < Permission > > task = ListenableFutureTask . create ( new Callable < Set < Permission > > ( ) 
 + { 
 + public Set < Permission > call ( ) throws Exception 
 + { 
 + try 
 + { 
 + return authorizer . authorize ( userResource . left , userResource . right ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + logger . debug ( " Error performing async refresh of user permissions " , e ) ; 
 + throw e ; 
 + } 
 + } 
 + } ) ; 
 + cacheRefreshExecutor . execute ( task ) ; 
 + return task ; 
 + } 
 + } ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index aab5025 . . 4dd71aa 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 43 , 6 + 43 , 8 @ @ public class Config 
 public String authenticator ; 
 public String authorizer ; 
 public int permissions _ validity _ in _ ms = 2000 ; 
 + public int permissions _ cache _ max _ entries = 1000 ; 
 + public int permissions _ update _ interval _ in _ ms = - 1 ; 
 
 / * Hashing strategy Random or OPHF * / 
 public String partitioner ; 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 92ef79a . . 2bfdb16 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 578 , 11 + 578 , 17 @ @ public class DatabaseDescriptor 
 return conf . permissions _ validity _ in _ ms ; 
 } 
 
 - public static void setPermissionsValidity ( int timeout ) 
 + public static int getPermissionsCacheMaxEntries ( ) 
 { 
 - conf . permissions _ validity _ in _ ms = timeout ; 
 + return conf . permissions _ cache _ max _ entries ; 
 } 
 
 + public static int getPermissionsUpdateInterval ( ) 
 + { 
 + return conf . permissions _ update _ interval _ in _ ms = = - 1 
 + ? conf . permissions _ validity _ in _ ms 
 + : conf . permissions _ update _ interval _ in _ ms ; 
 + } 
 
 public static int getThriftFramedTransportSize ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / service / ClientState . java b / src / java / org / apache / cassandra / service / ClientState . java 
 index 7611a14 . . 63c9431 100644 
 - - - a / src / java / org / apache / cassandra / service / ClientState . java 
 + + + b / src / java / org / apache / cassandra / service / ClientState . java 
 @ @ - 19 , 7 + 19 , 6 @ @ package org . apache . cassandra . service ; 
 
 import java . net . SocketAddress ; 
 import java . util . * ; 
 - import java . util . concurrent . ExecutionException ; 
 
 import com . google . common . collect . Iterables ; 
 import com . google . common . collect . Sets ; 
 @ @ - 40 , 7 + 39 , 6 @ @ import org . apache . cassandra . exceptions . UnauthorizedException ; 
 import org . apache . cassandra . tracing . Tracing ; 
 import org . apache . cassandra . thrift . ThriftValidation ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 - import org . apache . cassandra . utils . Pair ; 
 import org . apache . cassandra . utils . SemanticVersion ; 
 
 / * * 
 @ @ - 313 , 17 + 311 , 6 @ @ public class ClientState 
 
 private Set < Permission > authorize ( IResource resource ) 
 { 
 - / / AllowAllAuthorizer or manually disabled caching . 
 - if ( Auth . permissionsCache = = null ) 
 - return DatabaseDescriptor . getAuthorizer ( ) . authorize ( user , resource ) ; 
 - 
 - try 
 - { 
 - return Auth . permissionsCache . get ( Pair . create ( user , resource ) ) ; 
 - } 
 - catch ( ExecutionException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 + return Auth . getPermissions ( user , resource ) ; 
 } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
