BLEU SCORE: 0.037477767366779206

TEST MSG: Add flag to disable SASI indexes , and warning on creation
GENERATED MSG: Add commit _ failure _ policy .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 2f9813e . . f520aed 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 10 + 1 , 11 @ @ <nl> 3 . 11 . 5 <nl> + * Add flag to disable SASI indexes , and warnings on creation ( CASSANDRA - 14866 ) <nl> Merged from 3 . 0 : <nl> * Improve ` nodetool status - r ` speed ( CASSANDRA - 14847 ) <nl> * Improve merkle tree size and time on heap ( CASSANDRA - 14096 ) <nl> * Add missing commands to nodetool _ completion ( CASSANDRA - 14916 ) <nl> * Anti - compaction temporarily corrupts sstable state for readers ( CASSANDRA - 15004 ) <nl> - Merged from 2 . 2 : <nl> + Merged from 2 . 2 : <nl> * Multi - version in - JVM dtests ( CASSANDRA - 14937 ) <nl> <nl> <nl> @ @ - 43 , 7 + 44 , 7 @ @ Merged from 3 . 0 : <nl> * Fix static column order for SELECT * wildcard queries ( CASSANDRA - 14638 ) <nl> * sstableloader should use discovered broadcast address to connect intra - cluster ( CASSANDRA - 14522 ) <nl> * Fix reading columns with non - UTF names from schema ( CASSANDRA - 14468 ) <nl> - Merged from 2 . 2 : <nl> + Merged from 2 . 2 : <nl> * CircleCI docker image should bake in more dependencies ( CASSANDRA - 14985 ) <nl> * Don ' t enable client transports when bootstrap is pending ( CASSANDRA - 14525 ) <nl> * MigrationManager attempts to pull schema from different major version nodes ( CASSANDRA - 14928 ) <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index d5a9128 . . 2feac81 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 50 , 6 + 50 , 14 @ @ Upgrading <nl> 	 - repair _ session _ max _ tree _ depth setting has been added to cassandra . yaml to allow operators to reduce <nl> 	 merkle tree size if repair is creating too much heap pressure . See CASSANDRA - 14096 for details . <nl> <nl> + Experimental features <nl> + - - - - - - - - - - - - - - - - - - - - - <nl> + - An ' enable _ sasi _ indexes ' flag , true by default , has been added to cassandra . yaml to allow operators to prevent <nl> + the creation of new SASI indexes , which are considered experimental and are not recommended for production use . <nl> + ( See https : / / www . mail - archive . com / dev @ cassandra . apache . org / msg13582 . html ) <nl> + - The flags ' enable _ sasi _ indexes ' and ' enable _ materialized _ views ' have been grouped under an experimental features <nl> + section in cassandra . yaml . <nl> + <nl> 3 . 11 . 4 <nl> = = = = = = <nl> <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index a263d8a . . 9182008 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 1112 , 10 + 1112 , 6 @ @ enable _ user _ defined _ functions : false <nl> # This option has no effect , if enable _ user _ defined _ functions is false . <nl> enable _ scripted _ user _ defined _ functions : false <nl> <nl> - # Enables materialized view creation on this node . <nl> - # Materialized views are considered experimental and are not recommended for production use . <nl> - enable _ materialized _ views : true <nl> - <nl> # The default Windows kernel timer and scheduling resolution is 15 . 6ms for power conservation . <nl> # Lowering this value on Windows can provide much tighter latency and better throughput , however <nl> # some virtualized environments may see a negative performance impact from changing this setting <nl> @ @ - 1247 , 4 + 1243 , 17 @ @ back _ pressure _ strategy : <nl> # time and queue contention while iterating the backlog of messages . <nl> # An interval of 0 disables any wait time , which is the behavior of former Cassandra versions . <nl> # <nl> - # otc _ backlog _ expiration _ interval _ ms : 200 <nl> \ No newline at end of file <nl> + # otc _ backlog _ expiration _ interval _ ms : 200 <nl> + <nl> + <nl> + # # # # # # # # # # # # # # # # # # # # # # # # # <nl> + # EXPERIMENTAL FEATURES # <nl> + # # # # # # # # # # # # # # # # # # # # # # # # # <nl> + <nl> + # Enables materialized view creation on this node . <nl> + # Materialized views are considered experimental and are not recommended for production use . <nl> + enable _ materialized _ views : true <nl> + <nl> + # Enables SASI index creation on this node . <nl> + # SASI indexes are considered experimental and are not recommended for production use . <nl> + enable _ sasi _ indexes : true <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index 528cf4f . . 1976b95 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 348 , 6 + 348 , 8 @ @ public class Config <nl> <nl> public boolean enable _ materialized _ views = true ; <nl> <nl> + public boolean enable _ sasi _ indexes = true ; <nl> + <nl> / * * <nl> * Optionally disable asynchronous UDF execution . <nl> * Disabling asynchronous UDF execution also implicitly disables the security - manager ! <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 069a17e . . 99f8575 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 2407 , 11 + 2407 , 26 @ @ public class DatabaseDescriptor <nl> conf . user _ defined _ function _ warn _ timeout = userDefinedFunctionWarnTimeout ; <nl> } <nl> <nl> - public static boolean enableMaterializedViews ( ) <nl> + public static boolean getEnableMaterializedViews ( ) <nl> { <nl> return conf . enable _ materialized _ views ; <nl> } <nl> <nl> + public static void setEnableMaterializedViews ( boolean enableMaterializedViews ) <nl> + { <nl> + conf . enable _ materialized _ views = enableMaterializedViews ; <nl> + } <nl> + <nl> + public static boolean getEnableSASIIndexes ( ) <nl> + { <nl> + return conf . enable _ sasi _ indexes ; <nl> + } <nl> + <nl> + public static void setEnableSASIIndexes ( boolean enableSASIIndexes ) <nl> + { <nl> + conf . enable _ sasi _ indexes = enableSASIIndexes ; <nl> + } <nl> + <nl> public static long getUserDefinedFunctionFailTimeout ( ) <nl> { <nl> return conf . user _ defined _ function _ fail _ timeout ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java <nl> index 88afc6b . . d615917 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java <nl> @ @ - 29 , 18 + 29 , 20 @ @ import org . slf4j . LoggerFactory ; <nl> import org . apache . cassandra . auth . Permission ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . cql3 . CFName ; <nl> import org . apache . cassandra . cql3 . ColumnIdentifier ; <nl> import org . apache . cassandra . cql3 . IndexName ; <nl> - import org . apache . cassandra . db . marshal . DurationType ; <nl> import org . apache . cassandra . db . marshal . MapType ; <nl> import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> import org . apache . cassandra . exceptions . RequestValidationException ; <nl> import org . apache . cassandra . exceptions . UnauthorizedException ; <nl> + import org . apache . cassandra . index . sasi . SASIIndex ; <nl> import org . apache . cassandra . schema . IndexMetadata ; <nl> import org . apache . cassandra . schema . Indexes ; <nl> import org . apache . cassandra . service . ClientState ; <nl> + import org . apache . cassandra . service . ClientWarn ; <nl> import org . apache . cassandra . service . MigrationManager ; <nl> import org . apache . cassandra . service . QueryState ; <nl> import org . apache . cassandra . thrift . ThriftValidation ; <nl> @ @ - 229 , 6 + 231 , 17 @ @ public class CreateIndexStatement extends SchemaAlteringStatement <nl> { <nl> kind = IndexMetadata . Kind . CUSTOM ; <nl> indexOptions = properties . getOptions ( ) ; <nl> + <nl> + if ( properties . customClass . equals ( SASIIndex . class . getName ( ) ) ) <nl> + { <nl> + if ( ! DatabaseDescriptor . getEnableSASIIndexes ( ) ) <nl> + throw new InvalidRequestException ( " SASI indexes are disabled . Enable in cassandra . yaml to use . " ) ; <nl> + <nl> + logger . warn ( " Creating SASI index { } for { } . { } . { } " , <nl> + acceptedName , cfm . ksName , cfm . cfName , SASIIndex . USAGE _ WARNING ) ; <nl> + <nl> + ClientWarn . instance . warn ( SASIIndex . USAGE _ WARNING ) ; <nl> + } <nl> } <nl> else <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateViewStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateViewStatement . java <nl> index c191fa1 . . 51e0aaf 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateViewStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateViewStatement . java <nl> @ @ - 123 , 7 + 123 , 7 @ @ public class CreateViewStatement extends SchemaAlteringStatement <nl> <nl> public Event . SchemaChange announceMigration ( QueryState queryState , boolean isLocalOnly ) throws RequestValidationException <nl> { <nl> - if ( ! DatabaseDescriptor . enableMaterializedViews ( ) ) <nl> + if ( ! DatabaseDescriptor . getEnableMaterializedViews ( ) ) <nl> { <nl> throw new InvalidRequestException ( " Materialized views are disabled . Enable in cassandra . yaml to use . " ) ; <nl> } <nl> @ @ - 327 , 13 + 327 , 12 @ @ public class CreateViewStatement extends SchemaAlteringStatement <nl> whereClauseText , <nl> viewCfm ) ; <nl> <nl> - logger . warn ( " Creating materialized view { } for { } . { } . " + <nl> - " Materialized views are experimental and are not recommended for production use . " , <nl> - definition . viewName , cfm . ksName , cfm . cfName ) ; <nl> + logger . warn ( " Creating materialized view { } for { } . { } . { } " , <nl> + definition . viewName , cfm . ksName , cfm . cfName , View . USAGE _ WARNING ) ; <nl> <nl> try <nl> { <nl> - ClientWarn . instance . warn ( " Materialized views are experimental and are not recommended for production use . " ) ; <nl> + ClientWarn . instance . warn ( View . USAGE _ WARNING ) ; <nl> MigrationManager . announceNewView ( definition , isLocalOnly ) ; <nl> return new Event . SchemaChange ( Event . SchemaChange . Change . CREATED , Event . SchemaChange . Target . TABLE , keyspace ( ) , columnFamily ( ) ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / view / View . java b / src / java / org / apache / cassandra / db / view / View . java <nl> index 9a00b13 . . d7cd827 100644 <nl> - - - a / src / java / org / apache / cassandra / db / view / View . java <nl> + + + b / src / java / org / apache / cassandra / db / view / View . java <nl> @ @ - 33 , 7 + 33 , 6 @ @ import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . config . ViewDefinition ; <nl> - import org . apache . cassandra . cql3 . ColumnIdentifier ; <nl> import org . apache . cassandra . cql3 . MultiColumnRelation ; <nl> import org . apache . cassandra . cql3 . QueryOptions ; <nl> import org . apache . cassandra . cql3 . Relation ; <nl> @ @ - 57 , 6 + 56 , 8 @ @ import org . apache . cassandra . utils . FBUtilities ; <nl> * / <nl> public class View <nl> { <nl> + public final static String USAGE _ WARNING = " Materialized views are experimental and are not recommended for production use . " ; <nl> + <nl> private static final Logger logger = LoggerFactory . getLogger ( View . class ) ; <nl> <nl> public final String name ; <nl> diff - - git a / src / java / org / apache / cassandra / index / sasi / SASIIndex . java b / src / java / org / apache / cassandra / index / sasi / SASIIndex . java <nl> index 2c1d088 . . 4bf94ef 100644 <nl> - - - a / src / java / org / apache / cassandra / index / sasi / SASIIndex . java <nl> + + + b / src / java / org / apache / cassandra / index / sasi / SASIIndex . java <nl> @ @ - 59 , 6 + 59 , 8 @ @ import org . apache . cassandra . utils . concurrent . OpOrder ; <nl> <nl> public class SASIIndex implements Index , INotificationConsumer <nl> { <nl> + public final static String USAGE _ WARNING = " SASI indexes are experimental and are not recommended for production use . " ; <nl> + <nl> private static class SASIIndexBuildingSupport implements IndexBuildingSupport <nl> { <nl> public SecondaryIndexBuilder getIndexBuildTask ( ColumnFamilyStore cfs , <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / ViewTest . java b / test / unit / org / apache / cassandra / cql3 / ViewTest . java <nl> index eb9c855 . . 8a98a8e 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / ViewTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / ViewTest . java <nl> @ @ - 18 , 12 + 18 , 9 @ @ <nl> <nl> package org . apache . cassandra . cql3 ; <nl> <nl> - import static org . junit . Assert . * ; <nl> - <nl> import java . util . ArrayList ; <nl> import java . util . HashSet ; <nl> import java . util . List ; <nl> - import java . util . UUID ; <nl> import java . util . concurrent . Future ; <nl> import java . util . concurrent . TimeUnit ; <nl> import com . google . common . util . concurrent . Uninterruptibles ; <nl> @ @ - 43 , 14 + 40 , 16 @ @ import org . apache . cassandra . concurrent . Stage ; <nl> import org . apache . cassandra . concurrent . StageManager ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . Keyspace ; <nl> import org . apache . cassandra . db . SystemKeyspace ; <nl> import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . db . marshal . AsciiType ; <nl> - import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> + import org . apache . cassandra . db . view . View ; <nl> import org . apache . cassandra . exceptions . SyntaxException ; <nl> import org . apache . cassandra . schema . KeyspaceParams ; <nl> + import org . apache . cassandra . service . ClientWarn ; <nl> import org . apache . cassandra . transport . ProtocolVersion ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> @ @ - 1421 , 4 + 1420 , 52 @ @ public class ViewTest extends CQLTester <nl> { <nl> execute ( " CREATE MATERIALIZED VIEW myview AS SELECT a , b FROM \ " \ " WHERE b IS NOT NULL PRIMARY KEY ( b , a ) " ) ; <nl> } <nl> + <nl> + / * * <nl> + * Tests that a client warning is issued on materialized view creation . <nl> + * / <nl> + @ Test <nl> + public void testClientWarningOnCreate ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , v int ) " ) ; <nl> + <nl> + ClientWarn . instance . captureWarnings ( ) ; <nl> + String viewName = keyspace ( ) + " . warning _ view " ; <nl> + execute ( " CREATE MATERIALIZED VIEW " + viewName + <nl> + " AS SELECT v FROM % s WHERE k IS NOT NULL AND v IS NOT NULL PRIMARY KEY ( v , k ) " ) ; <nl> + views . add ( viewName ) ; <nl> + List < String > warnings = ClientWarn . instance . getWarnings ( ) ; <nl> + <nl> + Assert . assertNotNull ( warnings ) ; <nl> + Assert . assertEquals ( 1 , warnings . size ( ) ) ; <nl> + Assert . assertEquals ( View . USAGE _ WARNING , warnings . get ( 0 ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Tests the configuration flag to disable materialized views . <nl> + * / <nl> + @ Test <nl> + public void testDisableMaterializedViews ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , v int ) " ) ; <nl> + <nl> + executeNet ( protocolVersion , " USE " + keyspace ( ) ) ; <nl> + <nl> + boolean enableMaterializedViews = DatabaseDescriptor . getEnableMaterializedViews ( ) ; <nl> + try <nl> + { <nl> + DatabaseDescriptor . setEnableMaterializedViews ( false ) ; <nl> + createView ( " view1 " , " CREATE MATERIALIZED VIEW % s AS SELECT v FROM % % s WHERE k IS NOT NULL AND v IS NOT NULL PRIMARY KEY ( v , k ) " ) ; <nl> + Assert . fail ( " Should not be able to create a materialized view if they are disabled " ) ; <nl> + } <nl> + catch ( Throwable e ) <nl> + { <nl> + Assert . assertTrue ( e instanceof InvalidQueryException ) ; <nl> + Assert . assertTrue ( e . getMessage ( ) . contains ( " Materialized views are disabled " ) ) ; <nl> + } <nl> + finally <nl> + { <nl> + DatabaseDescriptor . setEnableMaterializedViews ( enableMaterializedViews ) ; <nl> + } <nl> + } <nl> } <nl> \ No newline at end of file <nl> diff - - git a / test / unit / org / apache / cassandra / index / sasi / SASICQLTest . java b / test / unit / org / apache / cassandra / index / sasi / SASICQLTest . java <nl> index efef880 . . 17bd196 100644 <nl> - - - a / test / unit / org / apache / cassandra / index / sasi / SASICQLTest . java <nl> + + + b / test / unit / org / apache / cassandra / index / sasi / SASICQLTest . java <nl> @ @ - 28 , 7 + 28 , 10 @ @ import com . datastax . driver . core . Row ; <nl> import com . datastax . driver . core . Session ; <nl> import com . datastax . driver . core . SimpleStatement ; <nl> import junit . framework . Assert ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . cql3 . CQLTester ; <nl> + import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> + import org . apache . cassandra . service . ClientWarn ; <nl> <nl> public class SASICQLTest extends CQLTester <nl> { <nl> @ @ - 78 , 4 + 81 , 49 @ @ public class SASICQLTest extends CQLTester <nl> Assert . assertEquals ( 20 , rs . size ( ) ) ; <nl> } <nl> } <nl> + <nl> + / * * <nl> + * Tests that a client warning is issued on SASI index creation . <nl> + * / <nl> + @ Test <nl> + public void testClientWarningOnCreate ( ) <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , v int ) " ) ; <nl> + <nl> + ClientWarn . instance . captureWarnings ( ) ; <nl> + createIndex ( " CREATE CUSTOM INDEX ON % s ( v ) USING ' org . apache . cassandra . index . sasi . SASIIndex ' " ) ; <nl> + List < String > warnings = ClientWarn . instance . getWarnings ( ) ; <nl> + <nl> + Assert . assertNotNull ( warnings ) ; <nl> + Assert . assertEquals ( 1 , warnings . size ( ) ) ; <nl> + Assert . assertEquals ( SASIIndex . USAGE _ WARNING , warnings . get ( 0 ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Tests the configuration flag to disable SASI indexes . <nl> + * / <nl> + @ Test <nl> + public void testDisableSASIIndexes ( ) <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , v int ) " ) ; <nl> + <nl> + boolean enableSASIIndexes = DatabaseDescriptor . getEnableSASIIndexes ( ) ; <nl> + try <nl> + { <nl> + DatabaseDescriptor . setEnableSASIIndexes ( false ) ; <nl> + createIndex ( " CREATE CUSTOM INDEX ON % s ( v ) USING ' org . apache . cassandra . index . sasi . SASIIndex ' " ) ; <nl> + Assert . fail ( " Should not be able to create a SASI index if they are disabled " ) ; <nl> + } <nl> + catch ( RuntimeException e ) <nl> + { <nl> + Throwable cause = e . getCause ( ) ; <nl> + Assert . assertNotNull ( cause ) ; <nl> + Assert . assertTrue ( cause instanceof InvalidRequestException ) ; <nl> + Assert . assertTrue ( cause . getMessage ( ) . contains ( " SASI indexes are disabled " ) ) ; <nl> + } <nl> + finally <nl> + { <nl> + DatabaseDescriptor . setEnableSASIIndexes ( enableSASIIndexes ) ; <nl> + } <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 2f9813e . . f520aed 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 10 + 1 , 11 @ @ 
 3 . 11 . 5 
 + * Add flag to disable SASI indexes , and warnings on creation ( CASSANDRA - 14866 ) 
 Merged from 3 . 0 : 
 * Improve ` nodetool status - r ` speed ( CASSANDRA - 14847 ) 
 * Improve merkle tree size and time on heap ( CASSANDRA - 14096 ) 
 * Add missing commands to nodetool _ completion ( CASSANDRA - 14916 ) 
 * Anti - compaction temporarily corrupts sstable state for readers ( CASSANDRA - 15004 ) 
 - Merged from 2 . 2 : 
 + Merged from 2 . 2 : 
 * Multi - version in - JVM dtests ( CASSANDRA - 14937 ) 
 
 
 @ @ - 43 , 7 + 44 , 7 @ @ Merged from 3 . 0 : 
 * Fix static column order for SELECT * wildcard queries ( CASSANDRA - 14638 ) 
 * sstableloader should use discovered broadcast address to connect intra - cluster ( CASSANDRA - 14522 ) 
 * Fix reading columns with non - UTF names from schema ( CASSANDRA - 14468 ) 
 - Merged from 2 . 2 : 
 + Merged from 2 . 2 : 
 * CircleCI docker image should bake in more dependencies ( CASSANDRA - 14985 ) 
 * Don ' t enable client transports when bootstrap is pending ( CASSANDRA - 14525 ) 
 * MigrationManager attempts to pull schema from different major version nodes ( CASSANDRA - 14928 ) 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index d5a9128 . . 2feac81 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 50 , 6 + 50 , 14 @ @ Upgrading 
 	 - repair _ session _ max _ tree _ depth setting has been added to cassandra . yaml to allow operators to reduce 
 	 merkle tree size if repair is creating too much heap pressure . See CASSANDRA - 14096 for details . 
 
 + Experimental features 
 + - - - - - - - - - - - - - - - - - - - - - 
 + - An ' enable _ sasi _ indexes ' flag , true by default , has been added to cassandra . yaml to allow operators to prevent 
 + the creation of new SASI indexes , which are considered experimental and are not recommended for production use . 
 + ( See https : / / www . mail - archive . com / dev @ cassandra . apache . org / msg13582 . html ) 
 + - The flags ' enable _ sasi _ indexes ' and ' enable _ materialized _ views ' have been grouped under an experimental features 
 + section in cassandra . yaml . 
 + 
 3 . 11 . 4 
 = = = = = = 
 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index a263d8a . . 9182008 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 1112 , 10 + 1112 , 6 @ @ enable _ user _ defined _ functions : false 
 # This option has no effect , if enable _ user _ defined _ functions is false . 
 enable _ scripted _ user _ defined _ functions : false 
 
 - # Enables materialized view creation on this node . 
 - # Materialized views are considered experimental and are not recommended for production use . 
 - enable _ materialized _ views : true 
 - 
 # The default Windows kernel timer and scheduling resolution is 15 . 6ms for power conservation . 
 # Lowering this value on Windows can provide much tighter latency and better throughput , however 
 # some virtualized environments may see a negative performance impact from changing this setting 
 @ @ - 1247 , 4 + 1243 , 17 @ @ back _ pressure _ strategy : 
 # time and queue contention while iterating the backlog of messages . 
 # An interval of 0 disables any wait time , which is the behavior of former Cassandra versions . 
 # 
 - # otc _ backlog _ expiration _ interval _ ms : 200 
 \ No newline at end of file 
 + # otc _ backlog _ expiration _ interval _ ms : 200 
 + 
 + 
 + # # # # # # # # # # # # # # # # # # # # # # # # # 
 + # EXPERIMENTAL FEATURES # 
 + # # # # # # # # # # # # # # # # # # # # # # # # # 
 + 
 + # Enables materialized view creation on this node . 
 + # Materialized views are considered experimental and are not recommended for production use . 
 + enable _ materialized _ views : true 
 + 
 + # Enables SASI index creation on this node . 
 + # SASI indexes are considered experimental and are not recommended for production use . 
 + enable _ sasi _ indexes : true 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index 528cf4f . . 1976b95 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 348 , 6 + 348 , 8 @ @ public class Config 
 
 public boolean enable _ materialized _ views = true ; 
 
 + public boolean enable _ sasi _ indexes = true ; 
 + 
 / * * 
 * Optionally disable asynchronous UDF execution . 
 * Disabling asynchronous UDF execution also implicitly disables the security - manager ! 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 069a17e . . 99f8575 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 2407 , 11 + 2407 , 26 @ @ public class DatabaseDescriptor 
 conf . user _ defined _ function _ warn _ timeout = userDefinedFunctionWarnTimeout ; 
 } 
 
 - public static boolean enableMaterializedViews ( ) 
 + public static boolean getEnableMaterializedViews ( ) 
 { 
 return conf . enable _ materialized _ views ; 
 } 
 
 + public static void setEnableMaterializedViews ( boolean enableMaterializedViews ) 
 + { 
 + conf . enable _ materialized _ views = enableMaterializedViews ; 
 + } 
 + 
 + public static boolean getEnableSASIIndexes ( ) 
 + { 
 + return conf . enable _ sasi _ indexes ; 
 + } 
 + 
 + public static void setEnableSASIIndexes ( boolean enableSASIIndexes ) 
 + { 
 + conf . enable _ sasi _ indexes = enableSASIIndexes ; 
 + } 
 + 
 public static long getUserDefinedFunctionFailTimeout ( ) 
 { 
 return conf . user _ defined _ function _ fail _ timeout ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java 
 index 88afc6b . . d615917 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java 
 @ @ - 29 , 18 + 29 , 20 @ @ import org . slf4j . LoggerFactory ; 
 import org . apache . cassandra . auth . Permission ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . ColumnDefinition ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . cql3 . CFName ; 
 import org . apache . cassandra . cql3 . ColumnIdentifier ; 
 import org . apache . cassandra . cql3 . IndexName ; 
 - import org . apache . cassandra . db . marshal . DurationType ; 
 import org . apache . cassandra . db . marshal . MapType ; 
 import org . apache . cassandra . exceptions . InvalidRequestException ; 
 import org . apache . cassandra . exceptions . RequestValidationException ; 
 import org . apache . cassandra . exceptions . UnauthorizedException ; 
 + import org . apache . cassandra . index . sasi . SASIIndex ; 
 import org . apache . cassandra . schema . IndexMetadata ; 
 import org . apache . cassandra . schema . Indexes ; 
 import org . apache . cassandra . service . ClientState ; 
 + import org . apache . cassandra . service . ClientWarn ; 
 import org . apache . cassandra . service . MigrationManager ; 
 import org . apache . cassandra . service . QueryState ; 
 import org . apache . cassandra . thrift . ThriftValidation ; 
 @ @ - 229 , 6 + 231 , 17 @ @ public class CreateIndexStatement extends SchemaAlteringStatement 
 { 
 kind = IndexMetadata . Kind . CUSTOM ; 
 indexOptions = properties . getOptions ( ) ; 
 + 
 + if ( properties . customClass . equals ( SASIIndex . class . getName ( ) ) ) 
 + { 
 + if ( ! DatabaseDescriptor . getEnableSASIIndexes ( ) ) 
 + throw new InvalidRequestException ( " SASI indexes are disabled . Enable in cassandra . yaml to use . " ) ; 
 + 
 + logger . warn ( " Creating SASI index { } for { } . { } . { } " , 
 + acceptedName , cfm . ksName , cfm . cfName , SASIIndex . USAGE _ WARNING ) ; 
 + 
 + ClientWarn . instance . warn ( SASIIndex . USAGE _ WARNING ) ; 
 + } 
 } 
 else 
 { 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateViewStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateViewStatement . java 
 index c191fa1 . . 51e0aaf 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateViewStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateViewStatement . java 
 @ @ - 123 , 7 + 123 , 7 @ @ public class CreateViewStatement extends SchemaAlteringStatement 
 
 public Event . SchemaChange announceMigration ( QueryState queryState , boolean isLocalOnly ) throws RequestValidationException 
 { 
 - if ( ! DatabaseDescriptor . enableMaterializedViews ( ) ) 
 + if ( ! DatabaseDescriptor . getEnableMaterializedViews ( ) ) 
 { 
 throw new InvalidRequestException ( " Materialized views are disabled . Enable in cassandra . yaml to use . " ) ; 
 } 
 @ @ - 327 , 13 + 327 , 12 @ @ public class CreateViewStatement extends SchemaAlteringStatement 
 whereClauseText , 
 viewCfm ) ; 
 
 - logger . warn ( " Creating materialized view { } for { } . { } . " + 
 - " Materialized views are experimental and are not recommended for production use . " , 
 - definition . viewName , cfm . ksName , cfm . cfName ) ; 
 + logger . warn ( " Creating materialized view { } for { } . { } . { } " , 
 + definition . viewName , cfm . ksName , cfm . cfName , View . USAGE _ WARNING ) ; 
 
 try 
 { 
 - ClientWarn . instance . warn ( " Materialized views are experimental and are not recommended for production use . " ) ; 
 + ClientWarn . instance . warn ( View . USAGE _ WARNING ) ; 
 MigrationManager . announceNewView ( definition , isLocalOnly ) ; 
 return new Event . SchemaChange ( Event . SchemaChange . Change . CREATED , Event . SchemaChange . Target . TABLE , keyspace ( ) , columnFamily ( ) ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / view / View . java b / src / java / org / apache / cassandra / db / view / View . java 
 index 9a00b13 . . d7cd827 100644 
 - - - a / src / java / org / apache / cassandra / db / view / View . java 
 + + + b / src / java / org / apache / cassandra / db / view / View . java 
 @ @ - 33 , 7 + 33 , 6 @ @ import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . ColumnDefinition ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . config . ViewDefinition ; 
 - import org . apache . cassandra . cql3 . ColumnIdentifier ; 
 import org . apache . cassandra . cql3 . MultiColumnRelation ; 
 import org . apache . cassandra . cql3 . QueryOptions ; 
 import org . apache . cassandra . cql3 . Relation ; 
 @ @ - 57 , 6 + 56 , 8 @ @ import org . apache . cassandra . utils . FBUtilities ; 
 * / 
 public class View 
 { 
 + public final static String USAGE _ WARNING = " Materialized views are experimental and are not recommended for production use . " ; 
 + 
 private static final Logger logger = LoggerFactory . getLogger ( View . class ) ; 
 
 public final String name ; 
 diff - - git a / src / java / org / apache / cassandra / index / sasi / SASIIndex . java b / src / java / org / apache / cassandra / index / sasi / SASIIndex . java 
 index 2c1d088 . . 4bf94ef 100644 
 - - - a / src / java / org / apache / cassandra / index / sasi / SASIIndex . java 
 + + + b / src / java / org / apache / cassandra / index / sasi / SASIIndex . java 
 @ @ - 59 , 6 + 59 , 8 @ @ import org . apache . cassandra . utils . concurrent . OpOrder ; 
 
 public class SASIIndex implements Index , INotificationConsumer 
 { 
 + public final static String USAGE _ WARNING = " SASI indexes are experimental and are not recommended for production use . " ; 
 + 
 private static class SASIIndexBuildingSupport implements IndexBuildingSupport 
 { 
 public SecondaryIndexBuilder getIndexBuildTask ( ColumnFamilyStore cfs , 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / ViewTest . java b / test / unit / org / apache / cassandra / cql3 / ViewTest . java 
 index eb9c855 . . 8a98a8e 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / ViewTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / ViewTest . java 
 @ @ - 18 , 12 + 18 , 9 @ @ 
 
 package org . apache . cassandra . cql3 ; 
 
 - import static org . junit . Assert . * ; 
 - 
 import java . util . ArrayList ; 
 import java . util . HashSet ; 
 import java . util . List ; 
 - import java . util . UUID ; 
 import java . util . concurrent . Future ; 
 import java . util . concurrent . TimeUnit ; 
 import com . google . common . util . concurrent . Uninterruptibles ; 
 @ @ - 43 , 14 + 40 , 16 @ @ import org . apache . cassandra . concurrent . Stage ; 
 import org . apache . cassandra . concurrent . StageManager ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . ColumnDefinition ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . Keyspace ; 
 import org . apache . cassandra . db . SystemKeyspace ; 
 import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . db . marshal . AsciiType ; 
 - import org . apache . cassandra . exceptions . InvalidRequestException ; 
 + import org . apache . cassandra . db . view . View ; 
 import org . apache . cassandra . exceptions . SyntaxException ; 
 import org . apache . cassandra . schema . KeyspaceParams ; 
 + import org . apache . cassandra . service . ClientWarn ; 
 import org . apache . cassandra . transport . ProtocolVersion ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 @ @ - 1421 , 4 + 1420 , 52 @ @ public class ViewTest extends CQLTester 
 { 
 execute ( " CREATE MATERIALIZED VIEW myview AS SELECT a , b FROM \ " \ " WHERE b IS NOT NULL PRIMARY KEY ( b , a ) " ) ; 
 } 
 + 
 + / * * 
 + * Tests that a client warning is issued on materialized view creation . 
 + * / 
 + @ Test 
 + public void testClientWarningOnCreate ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , v int ) " ) ; 
 + 
 + ClientWarn . instance . captureWarnings ( ) ; 
 + String viewName = keyspace ( ) + " . warning _ view " ; 
 + execute ( " CREATE MATERIALIZED VIEW " + viewName + 
 + " AS SELECT v FROM % s WHERE k IS NOT NULL AND v IS NOT NULL PRIMARY KEY ( v , k ) " ) ; 
 + views . add ( viewName ) ; 
 + List < String > warnings = ClientWarn . instance . getWarnings ( ) ; 
 + 
 + Assert . assertNotNull ( warnings ) ; 
 + Assert . assertEquals ( 1 , warnings . size ( ) ) ; 
 + Assert . assertEquals ( View . USAGE _ WARNING , warnings . get ( 0 ) ) ; 
 + } 
 + 
 + / * * 
 + * Tests the configuration flag to disable materialized views . 
 + * / 
 + @ Test 
 + public void testDisableMaterializedViews ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , v int ) " ) ; 
 + 
 + executeNet ( protocolVersion , " USE " + keyspace ( ) ) ; 
 + 
 + boolean enableMaterializedViews = DatabaseDescriptor . getEnableMaterializedViews ( ) ; 
 + try 
 + { 
 + DatabaseDescriptor . setEnableMaterializedViews ( false ) ; 
 + createView ( " view1 " , " CREATE MATERIALIZED VIEW % s AS SELECT v FROM % % s WHERE k IS NOT NULL AND v IS NOT NULL PRIMARY KEY ( v , k ) " ) ; 
 + Assert . fail ( " Should not be able to create a materialized view if they are disabled " ) ; 
 + } 
 + catch ( Throwable e ) 
 + { 
 + Assert . assertTrue ( e instanceof InvalidQueryException ) ; 
 + Assert . assertTrue ( e . getMessage ( ) . contains ( " Materialized views are disabled " ) ) ; 
 + } 
 + finally 
 + { 
 + DatabaseDescriptor . setEnableMaterializedViews ( enableMaterializedViews ) ; 
 + } 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / test / unit / org / apache / cassandra / index / sasi / SASICQLTest . java b / test / unit / org / apache / cassandra / index / sasi / SASICQLTest . java 
 index efef880 . . 17bd196 100644 
 - - - a / test / unit / org / apache / cassandra / index / sasi / SASICQLTest . java 
 + + + b / test / unit / org / apache / cassandra / index / sasi / SASICQLTest . java 
 @ @ - 28 , 7 + 28 , 10 @ @ import com . datastax . driver . core . Row ; 
 import com . datastax . driver . core . Session ; 
 import com . datastax . driver . core . SimpleStatement ; 
 import junit . framework . Assert ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . cql3 . CQLTester ; 
 + import org . apache . cassandra . exceptions . InvalidRequestException ; 
 + import org . apache . cassandra . service . ClientWarn ; 
 
 public class SASICQLTest extends CQLTester 
 { 
 @ @ - 78 , 4 + 81 , 49 @ @ public class SASICQLTest extends CQLTester 
 Assert . assertEquals ( 20 , rs . size ( ) ) ; 
 } 
 } 
 + 
 + / * * 
 + * Tests that a client warning is issued on SASI index creation . 
 + * / 
 + @ Test 
 + public void testClientWarningOnCreate ( ) 
 + { 
 + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , v int ) " ) ; 
 + 
 + ClientWarn . instance . captureWarnings ( ) ; 
 + createIndex ( " CREATE CUSTOM INDEX ON % s ( v ) USING ' org . apache . cassandra . index . sasi . SASIIndex ' " ) ; 
 + List < String > warnings = ClientWarn . instance . getWarnings ( ) ; 
 + 
 + Assert . assertNotNull ( warnings ) ; 
 + Assert . assertEquals ( 1 , warnings . size ( ) ) ; 
 + Assert . assertEquals ( SASIIndex . USAGE _ WARNING , warnings . get ( 0 ) ) ; 
 + } 
 + 
 + / * * 
 + * Tests the configuration flag to disable SASI indexes . 
 + * / 
 + @ Test 
 + public void testDisableSASIIndexes ( ) 
 + { 
 + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , v int ) " ) ; 
 + 
 + boolean enableSASIIndexes = DatabaseDescriptor . getEnableSASIIndexes ( ) ; 
 + try 
 + { 
 + DatabaseDescriptor . setEnableSASIIndexes ( false ) ; 
 + createIndex ( " CREATE CUSTOM INDEX ON % s ( v ) USING ' org . apache . cassandra . index . sasi . SASIIndex ' " ) ; 
 + Assert . fail ( " Should not be able to create a SASI index if they are disabled " ) ; 
 + } 
 + catch ( RuntimeException e ) 
 + { 
 + Throwable cause = e . getCause ( ) ; 
 + Assert . assertNotNull ( cause ) ; 
 + Assert . assertTrue ( cause instanceof InvalidRequestException ) ; 
 + Assert . assertTrue ( cause . getMessage ( ) . contains ( " SASI indexes are disabled " ) ) ; 
 + } 
 + finally 
 + { 
 + DatabaseDescriptor . setEnableSASIIndexes ( enableSASIIndexes ) ; 
 + } 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
