BLEU SCORE: 0.028398387225677897

TEST MSG: cqlsh pg - style - strings broken if line ends with ' ; '
GENERATED MSG: cqlsh : fix handling of semicolons inside BATCH queries

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 5c912a1 . . 288f204 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 6 <nl> + * cqlsh pg - style - strings broken if line ends with ' ; ' ( CASSANDRA - 11123 ) <nl> * Use cloned TokenMetadata in size estimates to avoid race against membership check <nl> ( CASSANDRA - 10736 ) <nl> * Always persist upsampled index summaries ( CASSANDRA - 10512 ) <nl> diff - - git a / bin / cqlsh . py b / bin / cqlsh . py <nl> index 630c92b . . 08cc6f4 100644 <nl> - - - a / bin / cqlsh . py <nl> + + + b / bin / cqlsh . py <nl> @ @ - 1108 , 7 + 1108 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> " " " <nl> <nl> try : <nl> - statements , in _ batch = cqlruleset . cql _ split _ statements ( statementtext ) <nl> + statements , endtoken _ escaped = cqlruleset . cql _ split _ statements ( statementtext ) <nl> except pylexotron . LexingError , e : <nl> if self . show _ line _ nums : <nl> self . printerr ( ' Invalid syntax at char % d ' % ( e . charnum , ) ) <nl> @ @ - 1124 , 7 + 1124 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> statements = statements [ : - 1 ] <nl> if not statements : <nl> return True <nl> - if in _ batch or statements [ - 1 ] [ - 1 ] [ 0 ] ! = ' endtoken ' : <nl> + if endtoken _ escaped or statements [ - 1 ] [ - 1 ] [ 0 ] ! = ' endtoken ' : <nl> self . set _ continue _ prompt ( ) <nl> return <nl> for st in statements : <nl> diff - - git a / pylib / cqlshlib / cqlhandling . py b / pylib / cqlshlib / cqlhandling . py <nl> index c17dc6b . . a8a0ba8 100644 <nl> - - - a / pylib / cqlshlib / cqlhandling . py <nl> + + + b / pylib / cqlshlib / cqlhandling . py <nl> @ @ - 142 , 6 + 142 , 7 @ @ class CqlParsingRuleSet ( pylexotron . ParsingRuleSet ) : <nl> stmts = util . split _ list ( tokens , lambda t : t [ 0 ] = = ' endtoken ' ) <nl> output = [ ] <nl> in _ batch = False <nl> + in _ pg _ string = len ( [ st for st in tokens if len ( st ) > 0 and st [ 0 ] = = ' unclosedPgString ' ] ) = = 1 <nl> for stmt in stmts : <nl> if in _ batch : <nl> output [ - 1 ] . extend ( stmt ) <nl> @ @ - 152 , 7 + 153 , 7 @ @ class CqlParsingRuleSet ( pylexotron . ParsingRuleSet ) : <nl> in _ batch = False <nl> elif stmt [ 0 ] [ 1 ] . upper ( ) = = ' BEGIN ' : <nl> in _ batch = True <nl> - return output , in _ batch <nl> + return output , in _ batch or in _ pg _ string <nl> <nl> def cql _ complete _ single ( self , text , partial , init _ bindings = { } , ignore _ case = True , <nl> startsymbol = ' Start ' ) : <nl> diff - - git a / pylib / cqlshlib / test / cassconnect . py b / pylib / cqlshlib / test / cassconnect . py <nl> index a93647a . . 94910a6 100644 <nl> - - - a / pylib / cqlshlib / test / cassconnect . py <nl> + + + b / pylib / cqlshlib / test / cassconnect . py <nl> @ @ - 57 , 8 + 57 , 8 @ @ def create _ test _ keyspace ( cursor ) : <nl> <nl> def split _ cql _ commands ( source ) : <nl> ruleset = cql _ rule _ set ( ) <nl> - statements , in _ batch = ruleset . cql _ split _ statements ( source ) <nl> - if in _ batch : <nl> + statements , endtoken _ escaped = ruleset . cql _ split _ statements ( source ) <nl> + if endtoken _ escaped : <nl> raise ValueError ( " CQL source ends unexpectedly " ) <nl> <nl> return [ ruleset . cql _ extract _ orig ( toks , source ) for toks in statements if toks ]
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 4b7dcc5 . . 88683c2 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 72 , 7 + 72 , 7 @ @ <nl> * Move resultset type information into prepare , not execute ( CASSANDRA - 5649 ) <nl> * Auto paging in binary protocol ( CASSANDRA - 4415 , 5714 ) <nl> * Don ' t tie client side use of AbstractType to JDBC ( CASSANDRA - 4495 ) <nl> - * Adds new TimestampType to replace DateType ( CASSANDRA - 5723 ) <nl> + * Adds new TimestampType to replace DateType ( CASSANDRA - 5723 , CASSANDRA - 5729 ) <nl> <nl> <nl> 1 . 2 . 7 <nl> diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py <nl> index 110fd6a . . 40d22c6 100644 <nl> - - - a / pylib / cqlshlib / cql3handling . py <nl> + + + b / pylib / cqlshlib / cql3handling . py <nl> @ @ - 18 , 7 + 18 , 7 @ @ import re <nl> from warnings import warn <nl> from . cqlhandling import CqlParsingRuleSet , Hint <nl> from cql . cqltypes import ( cql _ types , lookup _ casstype , CompositeType , UTF8Type , <nl> - ColumnToCollectionType , CounterColumnType ) <nl> + ColumnToCollectionType , CounterColumnType , DateType ) <nl> from . import helptopics <nl> <nl> simple _ cql _ types = set ( cql _ types ) <nl> @ @ - 31 , 6 + 31 , 10 @ @ try : <nl> except ImportError : <nl> import simplejson as json <nl> <nl> + # temporarily have this here until a newer cassandra - dbapi2 is bundled with C * <nl> + class TimestampType ( DateType ) : <nl> + pass <nl> + <nl> class UnexpectedTableStructure ( UserWarning ) : <nl> def _ _ init _ _ ( self , msg ) : <nl> self . msg = msg

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 5c912a1 . . 288f204 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 6 
 + * cqlsh pg - style - strings broken if line ends with ' ; ' ( CASSANDRA - 11123 ) 
 * Use cloned TokenMetadata in size estimates to avoid race against membership check 
 ( CASSANDRA - 10736 ) 
 * Always persist upsampled index summaries ( CASSANDRA - 10512 ) 
 diff - - git a / bin / cqlsh . py b / bin / cqlsh . py 
 index 630c92b . . 08cc6f4 100644 
 - - - a / bin / cqlsh . py 
 + + + b / bin / cqlsh . py 
 @ @ - 1108 , 7 + 1108 , 7 @ @ class Shell ( cmd . Cmd ) : 
 " " " 
 
 try : 
 - statements , in _ batch = cqlruleset . cql _ split _ statements ( statementtext ) 
 + statements , endtoken _ escaped = cqlruleset . cql _ split _ statements ( statementtext ) 
 except pylexotron . LexingError , e : 
 if self . show _ line _ nums : 
 self . printerr ( ' Invalid syntax at char % d ' % ( e . charnum , ) ) 
 @ @ - 1124 , 7 + 1124 , 7 @ @ class Shell ( cmd . Cmd ) : 
 statements = statements [ : - 1 ] 
 if not statements : 
 return True 
 - if in _ batch or statements [ - 1 ] [ - 1 ] [ 0 ] ! = ' endtoken ' : 
 + if endtoken _ escaped or statements [ - 1 ] [ - 1 ] [ 0 ] ! = ' endtoken ' : 
 self . set _ continue _ prompt ( ) 
 return 
 for st in statements : 
 diff - - git a / pylib / cqlshlib / cqlhandling . py b / pylib / cqlshlib / cqlhandling . py 
 index c17dc6b . . a8a0ba8 100644 
 - - - a / pylib / cqlshlib / cqlhandling . py 
 + + + b / pylib / cqlshlib / cqlhandling . py 
 @ @ - 142 , 6 + 142 , 7 @ @ class CqlParsingRuleSet ( pylexotron . ParsingRuleSet ) : 
 stmts = util . split _ list ( tokens , lambda t : t [ 0 ] = = ' endtoken ' ) 
 output = [ ] 
 in _ batch = False 
 + in _ pg _ string = len ( [ st for st in tokens if len ( st ) > 0 and st [ 0 ] = = ' unclosedPgString ' ] ) = = 1 
 for stmt in stmts : 
 if in _ batch : 
 output [ - 1 ] . extend ( stmt ) 
 @ @ - 152 , 7 + 153 , 7 @ @ class CqlParsingRuleSet ( pylexotron . ParsingRuleSet ) : 
 in _ batch = False 
 elif stmt [ 0 ] [ 1 ] . upper ( ) = = ' BEGIN ' : 
 in _ batch = True 
 - return output , in _ batch 
 + return output , in _ batch or in _ pg _ string 
 
 def cql _ complete _ single ( self , text , partial , init _ bindings = { } , ignore _ case = True , 
 startsymbol = ' Start ' ) : 
 diff - - git a / pylib / cqlshlib / test / cassconnect . py b / pylib / cqlshlib / test / cassconnect . py 
 index a93647a . . 94910a6 100644 
 - - - a / pylib / cqlshlib / test / cassconnect . py 
 + + + b / pylib / cqlshlib / test / cassconnect . py 
 @ @ - 57 , 8 + 57 , 8 @ @ def create _ test _ keyspace ( cursor ) : 
 
 def split _ cql _ commands ( source ) : 
 ruleset = cql _ rule _ set ( ) 
 - statements , in _ batch = ruleset . cql _ split _ statements ( source ) 
 - if in _ batch : 
 + statements , endtoken _ escaped = ruleset . cql _ split _ statements ( source ) 
 + if endtoken _ escaped : 
 raise ValueError ( " CQL source ends unexpectedly " ) 
 
 return [ ruleset . cql _ extract _ orig ( toks , source ) for toks in statements if toks ]

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 4b7dcc5 . . 88683c2 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 72 , 7 + 72 , 7 @ @ 
 * Move resultset type information into prepare , not execute ( CASSANDRA - 5649 ) 
 * Auto paging in binary protocol ( CASSANDRA - 4415 , 5714 ) 
 * Don ' t tie client side use of AbstractType to JDBC ( CASSANDRA - 4495 ) 
 - * Adds new TimestampType to replace DateType ( CASSANDRA - 5723 ) 
 + * Adds new TimestampType to replace DateType ( CASSANDRA - 5723 , CASSANDRA - 5729 ) 
 
 
 1 . 2 . 7 
 diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py 
 index 110fd6a . . 40d22c6 100644 
 - - - a / pylib / cqlshlib / cql3handling . py 
 + + + b / pylib / cqlshlib / cql3handling . py 
 @ @ - 18 , 7 + 18 , 7 @ @ import re 
 from warnings import warn 
 from . cqlhandling import CqlParsingRuleSet , Hint 
 from cql . cqltypes import ( cql _ types , lookup _ casstype , CompositeType , UTF8Type , 
 - ColumnToCollectionType , CounterColumnType ) 
 + ColumnToCollectionType , CounterColumnType , DateType ) 
 from . import helptopics 
 
 simple _ cql _ types = set ( cql _ types ) 
 @ @ - 31 , 6 + 31 , 10 @ @ try : 
 except ImportError : 
 import simplejson as json 
 
 + # temporarily have this here until a newer cassandra - dbapi2 is bundled with C * 
 + class TimestampType ( DateType ) : 
 + pass 
 + 
 class UnexpectedTableStructure ( UserWarning ) : 
 def _ _ init _ _ ( self , msg ) : 
 self . msg = msg
