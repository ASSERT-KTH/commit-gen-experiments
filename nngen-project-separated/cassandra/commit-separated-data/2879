BLEU SCORE: 0.17866908637482337

TEST MSG: merge from 1 . 2
GENERATED MSG: add back droppable tombstones metadata to 1 . 2

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 89ef6e1 . . 5450b8a 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 11 , 8 + 11 , 10 @ @ <nl> * cqlsh : handle symlinks properly ( CASSANDRA - 6425 ) <nl> * Don ' t resubmit counter mutation runnables internally ( CASSANDRA - 6427 ) <nl> Merged from 1 . 2 : <nl> + * Improved error message on bad properties in DDL queries ( CASSANDRA - 6453 ) <nl> * Randomize batchlog candidates selection ( CASSANDRA - 6481 ) <nl> * Fix thundering herd on endpoint cache invalidation ( CASSANDRA - 6345 , 6485 ) <nl> + * Improve batchlog write performance with vnodes ( CASSANDRA - 6488 ) <nl> * cqlsh : quote single quotes in strings inside collections ( CASSANDRA - 6172 ) <nl> * Improve gossip performance for typical messages ( CASSANDRA - 6409 ) <nl> * Throw IRE if a prepared statement has more markers than supported <nl> @ @ - 25 , 8 + 27 , 6 @ @ Merged from 1 . 2 : <nl> ( CASSANDRA - 6413 ) <nl> * ( Hadoop ) add describe _ local _ ring ( CASSANDRA - 6268 ) <nl> * Fix handling of concurrent directory creation failure ( CASSANDRA - 6459 ) <nl> - * Randomize batchlog candidates selection ( CASSANDRA - 6481 ) <nl> - * Improve batchlog write performance with vnodes ( CASSANDRA - 6488 ) <nl> <nl> <nl> 2 . 0 . 3 <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> index e70fc75 . . bdaf79a 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Cql . g <nl> + + + b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> @ @ - 107 , 12 + 107 , 18 @ @ options { <nl> <nl> if ( ! ( entry . left instanceof Constants . Literal ) ) <nl> { <nl> - addRecognitionError ( " Invalid property name : " + entry . left ) ; <nl> + String msg = " Invalid property name : " + entry . left ; <nl> + if ( entry . left instanceof AbstractMarker . Raw ) <nl> + msg + = " ( bind variables are not supported in DDL queries ) " ; <nl> + addRecognitionError ( msg ) ; <nl> break ; <nl> } <nl> if ( ! ( entry . right instanceof Constants . Literal ) ) <nl> { <nl> - addRecognitionError ( " Invalid property value : " + entry . right ) ; <nl> + String msg = " Invalid property value : " + entry . right + " for property : " + entry . left ; <nl> + if ( entry . right instanceof AbstractMarker . Raw ) <nl> + msg + = " ( bind variables are not supported in DDL queries ) " ; <nl> + addRecognitionError ( msg ) ; <nl> break ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java <nl> index e3634af . . f4a2662 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java <nl> + + + b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java <nl> @ @ - 107 , 7 + 107 , 7 @ @ public abstract class AbstractReplicationStrategy <nl> ArrayList < InetAddress > endpoints = getCachedEndpoints ( keyToken ) ; <nl> if ( endpoints = = null ) <nl> { <nl> - TokenMetadata tm = tokenMetadata . cloneOnlyTokenMap ( ) ; <nl> + TokenMetadata tm = tokenMetadata . cachedOnlyTokenMap ( ) ; <nl> / / if our cache got invalidated , it ' s possible there is a new token to account for too <nl> keyToken = TokenMetadata . firstToken ( tm . sortedTokens ( ) , searchToken ) ; <nl> endpoints = new ArrayList < InetAddress > ( calculateNaturalEndpoints ( searchToken , tm ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / locator / TokenMetadata . java b / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> index 00f4d3c . . aa1c81b 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> + + + b / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> @ @ - 591 , 12 + 591 , 31 @ @ public class TokenMetadata <nl> / * * <nl> * Create a copy of TokenMetadata with only tokenToEndpointMap . That is , pending ranges , <nl> * bootstrap tokens and leaving endpoints are not included in the copy . <nl> - * <nl> - * This uses a cached copy that is invalided when the ring changes , so in the common case <nl> - * no extra locking is required . <nl> * / <nl> public TokenMetadata cloneOnlyTokenMap ( ) <nl> { <nl> + lock . readLock ( ) . lock ( ) ; <nl> + try <nl> + { <nl> + return new TokenMetadata ( SortedBiMultiValMap . < Token , InetAddress > create ( tokenToEndpointMap , null , inetaddressCmp ) , <nl> + HashBiMap . create ( endpointToHostIdMap ) , <nl> + new Topology ( topology ) ) ; <nl> + } <nl> + finally <nl> + { <nl> + lock . readLock ( ) . unlock ( ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Return a cached TokenMetadata with only tokenToEndpointMap , i . e . , the same as cloneOnlyTokenMap but <nl> + * uses a cached copy that is invalided when the ring changes , so in the common case <nl> + * no extra locking is required . <nl> + * <nl> + * Callers must * NOT * mutate the returned metadata object . <nl> + * / <nl> + public TokenMetadata cachedOnlyTokenMap ( ) <nl> + { <nl> TokenMetadata tm = cachedTokenMap . get ( ) ; <nl> if ( tm ! = null ) <nl> return tm ; <nl> @ @ - 604 , 6 + 623 , 9 @ @ public class TokenMetadata <nl> / / synchronize is to prevent thundering herd ( CASSANDRA - 6345 ) ; lock . readLock is for correctness vs updates to our internals <nl> synchronized ( this ) <nl> { <nl> + if ( ( tm = cachedTokenMap . get ( ) ) ! = null ) <nl> + return tm ; <nl> + <nl> lock . readLock ( ) . lock ( ) ; <nl> try <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index 7f97da9 . . 4b53246 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 773 , 7 + 773 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> private static Collection < InetAddress > getBatchlogEndpoints ( String localDataCenter , ConsistencyLevel consistencyLevel ) <nl> throws UnavailableException <nl> { <nl> - TokenMetadata . Topology topology = StorageService . instance . getTokenMetadata ( ) . cloneOnlyTokenMap ( ) . getTopology ( ) ; <nl> + TokenMetadata . Topology topology = StorageService . instance . getTokenMetadata ( ) . cachedOnlyTokenMap ( ) . getTopology ( ) ; <nl> List < InetAddress > localEndpoints = new ArrayList < > ( topology . getDatacenterEndpoints ( ) . get ( localDataCenter ) ) ; <nl> <nl> / / special case for single - node datacenters
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java b / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java <nl> index eab1548 . . d319037 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java <nl> @ @ - 70 , 7 + 70 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> <nl> while ( bb1 . remaining ( ) > 0 & & bb2 . remaining ( ) > 0 ) <nl> { <nl> - AbstractType < ? > comparator = getNextComparator ( i , bb1 , bb2 ) ; <nl> + AbstractType < ? > comparator = getComparator ( i , bb1 , bb2 ) ; <nl> <nl> ByteBuffer value1 = getWithShortLength ( bb1 ) ; <nl> ByteBuffer value2 = getWithShortLength ( bb2 ) ; <nl> @ @ - 117 , 7 + 117 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> int i = 0 ; <nl> while ( bb . remaining ( ) > 0 ) <nl> { <nl> - getNextComparator ( i + + , bb ) ; <nl> + getComparator ( i + + , bb ) ; <nl> l . add ( getWithShortLength ( bb ) ) ; <nl> bb . get ( ) ; / / skip end - of - component <nl> } <nl> @ @ - 135 , 7 + 135 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> if ( bb . remaining ( ) ! = bytes . remaining ( ) ) <nl> sb . append ( " : " ) ; <nl> <nl> - AbstractType < ? > comparator = getAndAppendNextComparator ( i , bb , sb ) ; <nl> + AbstractType < ? > comparator = getAndAppendComparator ( i , bb , sb ) ; <nl> ByteBuffer value = getWithShortLength ( bb ) ; <nl> <nl> sb . append ( comparator . getString ( value ) ) ; <nl> @ @ - 172 , 7 + 172 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> <nl> while ( bb . remaining ( ) > 0 ) <nl> { <nl> - AbstractType comparator = getNextComparator ( i , bb ) ; <nl> + AbstractType comparator = getComparator ( i , bb ) ; <nl> ByteBuffer value = getWithShortLength ( bb ) ; <nl> <nl> list . add ( new CompositeComponent ( comparator , value ) ) ; <nl> @ @ - 205 , 7 + 205 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> break ; <nl> } <nl> <nl> - ParsedComparator p = parseNextComparator ( i , part ) ; <nl> + ParsedComparator p = parseComparator ( i , part ) ; <nl> AbstractType < ? > type = p . getAbstractType ( ) ; <nl> part = p . getRemainingPart ( ) ; <nl> <nl> @ @ - 240 , 7 + 240 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> int i = 0 ; <nl> while ( bb . remaining ( ) > 0 ) <nl> { <nl> - AbstractType < ? > comparator = validateNextComparator ( i , bb ) ; <nl> + AbstractType < ? > comparator = validateComparator ( i , bb ) ; <nl> <nl> if ( bb . remaining ( ) < 2 ) <nl> throw new MarshalException ( " Not enough bytes to read value size of component " + i ) ; <nl> @ @ - 271 , 11 + 271 , 32 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> return value ; <nl> } <nl> <nl> - abstract protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb ) ; <nl> - abstract protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) ; <nl> - abstract protected AbstractType < ? > getAndAppendNextComparator ( int i , ByteBuffer bb , StringBuilder sb ) ; <nl> - abstract protected ParsedComparator parseNextComparator ( int i , String part ) ; <nl> - abstract protected AbstractType < ? > validateNextComparator ( int i , ByteBuffer bb ) throws MarshalException ; <nl> + / * * <nl> + * @ return the comparator for the given component . static CompositeType will consult <nl> + * @ param i ; DynamicCompositeType will read the type information from @ param bb <nl> + * / <nl> + abstract protected AbstractType < ? > getComparator ( int i , ByteBuffer bb ) ; <nl> + <nl> + / * * <nl> + * Adds DynamicCompositeType type information from @ param bb1 to @ param bb2 . <nl> + * @ param i is ignored . <nl> + * / <nl> + abstract protected AbstractType < ? > getComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) ; <nl> + <nl> + / * * <nl> + * Adds type information from @ param bb to @ param sb . @ param i is ignored . <nl> + * / <nl> + abstract protected AbstractType < ? > getAndAppendComparator ( int i , ByteBuffer bb , StringBuilder sb ) ; <nl> + <nl> + / * * <nl> + * Like getComparator , but validates that @ param i does not exceed the defined range <nl> + * / <nl> + abstract protected AbstractType < ? > validateComparator ( int i , ByteBuffer bb ) throws MarshalException ; <nl> + <nl> + / * * <nl> + * Used by fromString <nl> + * / <nl> + abstract protected ParsedComparator parseComparator ( int i , String part ) ; <nl> <nl> protected static interface ParsedComparator <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / CompositeType . java b / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> index 2e32725 . . 1b59ae9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> @ @ - 80 , 27 + 80 , 27 @ @ public class CompositeType extends AbstractCompositeType <nl> this . types = types ; <nl> } <nl> <nl> - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb ) <nl> + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb ) <nl> { <nl> return types . get ( i ) ; <nl> } <nl> <nl> - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) <nl> + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) <nl> { <nl> return types . get ( i ) ; <nl> } <nl> <nl> - protected AbstractType < ? > getAndAppendNextComparator ( int i , ByteBuffer bb , StringBuilder sb ) <nl> + protected AbstractType < ? > getAndAppendComparator ( int i , ByteBuffer bb , StringBuilder sb ) <nl> { <nl> return types . get ( i ) ; <nl> } <nl> <nl> - protected ParsedComparator parseNextComparator ( int i , String part ) <nl> + protected ParsedComparator parseComparator ( int i , String part ) <nl> { <nl> return new StaticParsedComparator ( types . get ( i ) , part ) ; <nl> } <nl> <nl> - protected AbstractType < ? > validateNextComparator ( int i , ByteBuffer bb ) throws MarshalException <nl> + protected AbstractType < ? > validateComparator ( int i , ByteBuffer bb ) throws MarshalException <nl> { <nl> if ( i > = types . size ( ) ) <nl> throw new MarshalException ( " Too many bytes for comparator " ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> index 89116f2 . . e3f4839 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> @ @ - 102 , 12 + 102 , 12 @ @ public class DynamicCompositeType extends AbstractCompositeType <nl> } <nl> } <nl> <nl> - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb ) <nl> + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb ) <nl> { <nl> return getComparator ( bb ) ; <nl> } <nl> <nl> - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) <nl> + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) <nl> { <nl> AbstractType < ? > comp1 = getComparator ( bb1 ) ; <nl> AbstractType < ? > comp2 = getComparator ( bb2 ) ; <nl> @ @ - 135 , 7 + 135 , 7 @ @ public class DynamicCompositeType extends AbstractCompositeType <nl> return comp1 ; <nl> } <nl> <nl> - protected AbstractType < ? > getAndAppendNextComparator ( int i , ByteBuffer bb , StringBuilder sb ) <nl> + protected AbstractType < ? > getAndAppendComparator ( int i , ByteBuffer bb , StringBuilder sb ) <nl> { <nl> try <nl> { <nl> @ @ - 162 , 12 + 162 , 12 @ @ public class DynamicCompositeType extends AbstractCompositeType <nl> } <nl> } <nl> <nl> - protected ParsedComparator parseNextComparator ( int i , String part ) <nl> + protected ParsedComparator parseComparator ( int i , String part ) <nl> { <nl> return new DynamicParsedComparator ( part ) ; <nl> } <nl> <nl> - protected AbstractType < ? > validateNextComparator ( int i , ByteBuffer bb ) throws MarshalException <nl> + protected AbstractType < ? > validateComparator ( int i , ByteBuffer bb ) throws MarshalException <nl> { <nl> AbstractType < ? > comparator = null ; <nl> if ( bb . remaining ( ) < 2 )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 89ef6e1 . . 5450b8a 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 11 , 8 + 11 , 10 @ @ 
 * cqlsh : handle symlinks properly ( CASSANDRA - 6425 ) 
 * Don ' t resubmit counter mutation runnables internally ( CASSANDRA - 6427 ) 
 Merged from 1 . 2 : 
 + * Improved error message on bad properties in DDL queries ( CASSANDRA - 6453 ) 
 * Randomize batchlog candidates selection ( CASSANDRA - 6481 ) 
 * Fix thundering herd on endpoint cache invalidation ( CASSANDRA - 6345 , 6485 ) 
 + * Improve batchlog write performance with vnodes ( CASSANDRA - 6488 ) 
 * cqlsh : quote single quotes in strings inside collections ( CASSANDRA - 6172 ) 
 * Improve gossip performance for typical messages ( CASSANDRA - 6409 ) 
 * Throw IRE if a prepared statement has more markers than supported 
 @ @ - 25 , 8 + 27 , 6 @ @ Merged from 1 . 2 : 
 ( CASSANDRA - 6413 ) 
 * ( Hadoop ) add describe _ local _ ring ( CASSANDRA - 6268 ) 
 * Fix handling of concurrent directory creation failure ( CASSANDRA - 6459 ) 
 - * Randomize batchlog candidates selection ( CASSANDRA - 6481 ) 
 - * Improve batchlog write performance with vnodes ( CASSANDRA - 6488 ) 
 
 
 2 . 0 . 3 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g 
 index e70fc75 . . bdaf79a 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Cql . g 
 + + + b / src / java / org / apache / cassandra / cql3 / Cql . g 
 @ @ - 107 , 12 + 107 , 18 @ @ options { 
 
 if ( ! ( entry . left instanceof Constants . Literal ) ) 
 { 
 - addRecognitionError ( " Invalid property name : " + entry . left ) ; 
 + String msg = " Invalid property name : " + entry . left ; 
 + if ( entry . left instanceof AbstractMarker . Raw ) 
 + msg + = " ( bind variables are not supported in DDL queries ) " ; 
 + addRecognitionError ( msg ) ; 
 break ; 
 } 
 if ( ! ( entry . right instanceof Constants . Literal ) ) 
 { 
 - addRecognitionError ( " Invalid property value : " + entry . right ) ; 
 + String msg = " Invalid property value : " + entry . right + " for property : " + entry . left ; 
 + if ( entry . right instanceof AbstractMarker . Raw ) 
 + msg + = " ( bind variables are not supported in DDL queries ) " ; 
 + addRecognitionError ( msg ) ; 
 break ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java 
 index e3634af . . f4a2662 100644 
 - - - a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java 
 + + + b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java 
 @ @ - 107 , 7 + 107 , 7 @ @ public abstract class AbstractReplicationStrategy 
 ArrayList < InetAddress > endpoints = getCachedEndpoints ( keyToken ) ; 
 if ( endpoints = = null ) 
 { 
 - TokenMetadata tm = tokenMetadata . cloneOnlyTokenMap ( ) ; 
 + TokenMetadata tm = tokenMetadata . cachedOnlyTokenMap ( ) ; 
 / / if our cache got invalidated , it ' s possible there is a new token to account for too 
 keyToken = TokenMetadata . firstToken ( tm . sortedTokens ( ) , searchToken ) ; 
 endpoints = new ArrayList < InetAddress > ( calculateNaturalEndpoints ( searchToken , tm ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / locator / TokenMetadata . java b / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 index 00f4d3c . . aa1c81b 100644 
 - - - a / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 + + + b / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 @ @ - 591 , 12 + 591 , 31 @ @ public class TokenMetadata 
 / * * 
 * Create a copy of TokenMetadata with only tokenToEndpointMap . That is , pending ranges , 
 * bootstrap tokens and leaving endpoints are not included in the copy . 
 - * 
 - * This uses a cached copy that is invalided when the ring changes , so in the common case 
 - * no extra locking is required . 
 * / 
 public TokenMetadata cloneOnlyTokenMap ( ) 
 { 
 + lock . readLock ( ) . lock ( ) ; 
 + try 
 + { 
 + return new TokenMetadata ( SortedBiMultiValMap . < Token , InetAddress > create ( tokenToEndpointMap , null , inetaddressCmp ) , 
 + HashBiMap . create ( endpointToHostIdMap ) , 
 + new Topology ( topology ) ) ; 
 + } 
 + finally 
 + { 
 + lock . readLock ( ) . unlock ( ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Return a cached TokenMetadata with only tokenToEndpointMap , i . e . , the same as cloneOnlyTokenMap but 
 + * uses a cached copy that is invalided when the ring changes , so in the common case 
 + * no extra locking is required . 
 + * 
 + * Callers must * NOT * mutate the returned metadata object . 
 + * / 
 + public TokenMetadata cachedOnlyTokenMap ( ) 
 + { 
 TokenMetadata tm = cachedTokenMap . get ( ) ; 
 if ( tm ! = null ) 
 return tm ; 
 @ @ - 604 , 6 + 623 , 9 @ @ public class TokenMetadata 
 / / synchronize is to prevent thundering herd ( CASSANDRA - 6345 ) ; lock . readLock is for correctness vs updates to our internals 
 synchronized ( this ) 
 { 
 + if ( ( tm = cachedTokenMap . get ( ) ) ! = null ) 
 + return tm ; 
 + 
 lock . readLock ( ) . lock ( ) ; 
 try 
 { 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index 7f97da9 . . 4b53246 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 773 , 7 + 773 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 private static Collection < InetAddress > getBatchlogEndpoints ( String localDataCenter , ConsistencyLevel consistencyLevel ) 
 throws UnavailableException 
 { 
 - TokenMetadata . Topology topology = StorageService . instance . getTokenMetadata ( ) . cloneOnlyTokenMap ( ) . getTopology ( ) ; 
 + TokenMetadata . Topology topology = StorageService . instance . getTokenMetadata ( ) . cachedOnlyTokenMap ( ) . getTopology ( ) ; 
 List < InetAddress > localEndpoints = new ArrayList < > ( topology . getDatacenterEndpoints ( ) . get ( localDataCenter ) ) ; 
 
 / / special case for single - node datacenters

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java b / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java 
 index eab1548 . . d319037 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java 
 @ @ - 70 , 7 + 70 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 
 while ( bb1 . remaining ( ) > 0 & & bb2 . remaining ( ) > 0 ) 
 { 
 - AbstractType < ? > comparator = getNextComparator ( i , bb1 , bb2 ) ; 
 + AbstractType < ? > comparator = getComparator ( i , bb1 , bb2 ) ; 
 
 ByteBuffer value1 = getWithShortLength ( bb1 ) ; 
 ByteBuffer value2 = getWithShortLength ( bb2 ) ; 
 @ @ - 117 , 7 + 117 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 int i = 0 ; 
 while ( bb . remaining ( ) > 0 ) 
 { 
 - getNextComparator ( i + + , bb ) ; 
 + getComparator ( i + + , bb ) ; 
 l . add ( getWithShortLength ( bb ) ) ; 
 bb . get ( ) ; / / skip end - of - component 
 } 
 @ @ - 135 , 7 + 135 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 if ( bb . remaining ( ) ! = bytes . remaining ( ) ) 
 sb . append ( " : " ) ; 
 
 - AbstractType < ? > comparator = getAndAppendNextComparator ( i , bb , sb ) ; 
 + AbstractType < ? > comparator = getAndAppendComparator ( i , bb , sb ) ; 
 ByteBuffer value = getWithShortLength ( bb ) ; 
 
 sb . append ( comparator . getString ( value ) ) ; 
 @ @ - 172 , 7 + 172 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 
 while ( bb . remaining ( ) > 0 ) 
 { 
 - AbstractType comparator = getNextComparator ( i , bb ) ; 
 + AbstractType comparator = getComparator ( i , bb ) ; 
 ByteBuffer value = getWithShortLength ( bb ) ; 
 
 list . add ( new CompositeComponent ( comparator , value ) ) ; 
 @ @ - 205 , 7 + 205 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 break ; 
 } 
 
 - ParsedComparator p = parseNextComparator ( i , part ) ; 
 + ParsedComparator p = parseComparator ( i , part ) ; 
 AbstractType < ? > type = p . getAbstractType ( ) ; 
 part = p . getRemainingPart ( ) ; 
 
 @ @ - 240 , 7 + 240 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 int i = 0 ; 
 while ( bb . remaining ( ) > 0 ) 
 { 
 - AbstractType < ? > comparator = validateNextComparator ( i , bb ) ; 
 + AbstractType < ? > comparator = validateComparator ( i , bb ) ; 
 
 if ( bb . remaining ( ) < 2 ) 
 throw new MarshalException ( " Not enough bytes to read value size of component " + i ) ; 
 @ @ - 271 , 11 + 271 , 32 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 return value ; 
 } 
 
 - abstract protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb ) ; 
 - abstract protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) ; 
 - abstract protected AbstractType < ? > getAndAppendNextComparator ( int i , ByteBuffer bb , StringBuilder sb ) ; 
 - abstract protected ParsedComparator parseNextComparator ( int i , String part ) ; 
 - abstract protected AbstractType < ? > validateNextComparator ( int i , ByteBuffer bb ) throws MarshalException ; 
 + / * * 
 + * @ return the comparator for the given component . static CompositeType will consult 
 + * @ param i ; DynamicCompositeType will read the type information from @ param bb 
 + * / 
 + abstract protected AbstractType < ? > getComparator ( int i , ByteBuffer bb ) ; 
 + 
 + / * * 
 + * Adds DynamicCompositeType type information from @ param bb1 to @ param bb2 . 
 + * @ param i is ignored . 
 + * / 
 + abstract protected AbstractType < ? > getComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) ; 
 + 
 + / * * 
 + * Adds type information from @ param bb to @ param sb . @ param i is ignored . 
 + * / 
 + abstract protected AbstractType < ? > getAndAppendComparator ( int i , ByteBuffer bb , StringBuilder sb ) ; 
 + 
 + / * * 
 + * Like getComparator , but validates that @ param i does not exceed the defined range 
 + * / 
 + abstract protected AbstractType < ? > validateComparator ( int i , ByteBuffer bb ) throws MarshalException ; 
 + 
 + / * * 
 + * Used by fromString 
 + * / 
 + abstract protected ParsedComparator parseComparator ( int i , String part ) ; 
 
 protected static interface ParsedComparator 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / CompositeType . java b / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 index 2e32725 . . 1b59ae9 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 @ @ - 80 , 27 + 80 , 27 @ @ public class CompositeType extends AbstractCompositeType 
 this . types = types ; 
 } 
 
 - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb ) 
 + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb ) 
 { 
 return types . get ( i ) ; 
 } 
 
 - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) 
 + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) 
 { 
 return types . get ( i ) ; 
 } 
 
 - protected AbstractType < ? > getAndAppendNextComparator ( int i , ByteBuffer bb , StringBuilder sb ) 
 + protected AbstractType < ? > getAndAppendComparator ( int i , ByteBuffer bb , StringBuilder sb ) 
 { 
 return types . get ( i ) ; 
 } 
 
 - protected ParsedComparator parseNextComparator ( int i , String part ) 
 + protected ParsedComparator parseComparator ( int i , String part ) 
 { 
 return new StaticParsedComparator ( types . get ( i ) , part ) ; 
 } 
 
 - protected AbstractType < ? > validateNextComparator ( int i , ByteBuffer bb ) throws MarshalException 
 + protected AbstractType < ? > validateComparator ( int i , ByteBuffer bb ) throws MarshalException 
 { 
 if ( i > = types . size ( ) ) 
 throw new MarshalException ( " Too many bytes for comparator " ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 index 89116f2 . . e3f4839 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 @ @ - 102 , 12 + 102 , 12 @ @ public class DynamicCompositeType extends AbstractCompositeType 
 } 
 } 
 
 - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb ) 
 + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb ) 
 { 
 return getComparator ( bb ) ; 
 } 
 
 - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) 
 + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) 
 { 
 AbstractType < ? > comp1 = getComparator ( bb1 ) ; 
 AbstractType < ? > comp2 = getComparator ( bb2 ) ; 
 @ @ - 135 , 7 + 135 , 7 @ @ public class DynamicCompositeType extends AbstractCompositeType 
 return comp1 ; 
 } 
 
 - protected AbstractType < ? > getAndAppendNextComparator ( int i , ByteBuffer bb , StringBuilder sb ) 
 + protected AbstractType < ? > getAndAppendComparator ( int i , ByteBuffer bb , StringBuilder sb ) 
 { 
 try 
 { 
 @ @ - 162 , 12 + 162 , 12 @ @ public class DynamicCompositeType extends AbstractCompositeType 
 } 
 } 
 
 - protected ParsedComparator parseNextComparator ( int i , String part ) 
 + protected ParsedComparator parseComparator ( int i , String part ) 
 { 
 return new DynamicParsedComparator ( part ) ; 
 } 
 
 - protected AbstractType < ? > validateNextComparator ( int i , ByteBuffer bb ) throws MarshalException 
 + protected AbstractType < ? > validateComparator ( int i , ByteBuffer bb ) throws MarshalException 
 { 
 AbstractType < ? > comparator = null ; 
 if ( bb . remaining ( ) < 2 )
