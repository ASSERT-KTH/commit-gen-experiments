BLEU SCORE: 0.001878312692764171

TEST MSG: Fix SSTableLoaderTest on Windows
GENERATED MSG: fix saved key cache not loading at startup ; patch by yukim reviewed by jbellis for CASSANDRA - 5166

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableLoaderTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableLoaderTest . java <nl> index 3370e56 . . 4eebdeb 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableLoaderTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableLoaderTest . java <nl> @ @ - 38 , 6 + 38 , 7 @ @ import org . apache . cassandra . db . partitions . * ; <nl> import org . apache . cassandra . db . marshal . AsciiType ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . dht . Token ; <nl> + import org . apache . cassandra . io . FSWriteError ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . schema . KeyspaceParams ; <nl> import org . apache . cassandra . service . StorageService ; <nl> @ @ - 80 , 7 + 81 , 18 @ @ public class SSTableLoaderTest <nl> @ After <nl> public void cleanup ( ) <nl> { <nl> - FileUtils . deleteRecursive ( tmpdir ) ; <nl> + try { <nl> + FileUtils . deleteRecursive ( tmpdir ) ; <nl> + } catch ( FSWriteError e ) { <nl> + / * * <nl> + * Windows does not allow a mapped file to be deleted , so we probably forgot to clean the buffers somewhere . <nl> + * We force a GC here to force buffer deallocation , and then try deleting the directory again . <nl> + * For more information , see : http : / / bugs . java . com / bugdatabase / view _ bug . do ? bug _ id = 4715154 <nl> + * If this is not the problem , the exception will be rethrown anyway . <nl> + * / <nl> + System . gc ( ) ; <nl> + FileUtils . deleteRecursive ( tmpdir ) ; <nl> + } <nl> } <nl> <nl> private static final class TestClient extends SSTableLoader . Client
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index d550bb6 . . 9ee2f61 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 995 , 11 + 995 , 15 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> } <nl> } <nl> <nl> + public void start ( int generationNumber ) <nl> + { <nl> + start ( generationNumber , new HashMap < ApplicationState , VersionedValue > ( ) ) ; <nl> + } <nl> + <nl> / * * <nl> - * Start the gossiper with the generation # retrieved from the System <nl> - * table <nl> + * Start the gossiper with the generation number , preloading the map of application states before starting <nl> * / <nl> - public void start ( int generationNbr ) <nl> + public void start ( int generationNbr , Map < ApplicationState , VersionedValue > preloadLocalStates ) <nl> { <nl> / * Get the seeds from the config and initialize them . * / <nl> Set < InetAddress > seedHosts = DatabaseDescriptor . getSeeds ( ) ; <nl> @ @ - 1013 , 6 + 1017 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> / * initialize the heartbeat state for this localEndpoint * / <nl> maybeInitializeLocalState ( generationNbr ) ; <nl> EndpointState localState = endpointStateMap . get ( FBUtilities . getBroadcastAddress ( ) ) ; <nl> + for ( Map . Entry < ApplicationState , VersionedValue > entry : preloadLocalStates . entrySet ( ) ) <nl> + localState . addApplicationState ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> <nl> / / notify snitches that Gossiper is about to start <nl> DatabaseDescriptor . getEndpointSnitch ( ) . gossiperStarting ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 4c0a9ce . . 2f178b6 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 524 , 24 + 524 , 24 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> / / have to start the gossip service before we can see any info on other nodes . this is necessary <nl> / / for bootstrap to get the load info it needs . <nl> / / ( we won ' t be part of the storage ring though until we add a counterId to our state , below . ) <nl> + Map < ApplicationState , VersionedValue > appStates = new HashMap < ApplicationState , VersionedValue > ( ) ; <nl> + appStates . put ( ApplicationState . NET _ VERSION , valueFactory . networkVersion ( ) ) ; <nl> + appStates . put ( ApplicationState . HOST _ ID , valueFactory . hostId ( SystemTable . getLocalHostId ( ) ) ) ; <nl> + appStates . put ( ApplicationState . RPC _ ADDRESS , valueFactory . rpcaddress ( DatabaseDescriptor . getRpcAddress ( ) ) ) ; <nl> + if ( 0 ! = DatabaseDescriptor . getReplaceTokens ( ) . size ( ) ) <nl> + appStates . put ( ApplicationState . STATUS , valueFactory . hibernate ( true ) ) ; <nl> + appStates . put ( ApplicationState . RELEASE _ VERSION , valueFactory . releaseVersion ( ) ) ; <nl> Gossiper . instance . register ( this ) ; <nl> Gossiper . instance . register ( migrationManager ) ; <nl> - Gossiper . instance . start ( SystemTable . incrementAndGetGeneration ( ) ) ; / / needed for node - ring gathering . <nl> - / / gossip network proto version <nl> - Gossiper . instance . addLocalApplicationState ( ApplicationState . NET _ VERSION , valueFactory . networkVersion ( ) ) ; <nl> - Gossiper . instance . addLocalApplicationState ( ApplicationState . HOST _ ID , valueFactory . hostId ( SystemTable . getLocalHostId ( ) ) ) ; <nl> + Gossiper . instance . start ( SystemTable . incrementAndGetGeneration ( ) , appStates ) ; / / needed for node - ring gathering . <nl> / / gossip snitch infos ( local DC and rack ) <nl> gossipSnitchInfo ( ) ; <nl> + / / gossip Schema . emptyVersion forcing immediate check for schema updates ( see MigrationManager # maybeScheduleSchemaPull ) <nl> Schema . instance . updateVersionAndAnnounce ( ) ; / / Ensure we know our own actual Schema UUID in preparation for updates <nl> <nl> - / / add rpc listening info <nl> - Gossiper . instance . addLocalApplicationState ( ApplicationState . RPC _ ADDRESS , valueFactory . rpcaddress ( DatabaseDescriptor . getRpcAddress ( ) ) ) ; <nl> - if ( 0 ! = DatabaseDescriptor . getReplaceTokens ( ) . size ( ) ) <nl> - Gossiper . instance . addLocalApplicationState ( ApplicationState . STATUS , valueFactory . hibernate ( true ) ) ; <nl> <nl> MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; <nl> LoadBroadcaster . instance . startBroadcasting ( ) ; <nl> - Gossiper . instance . addLocalApplicationState ( ApplicationState . RELEASE _ VERSION , valueFactory . releaseVersion ( ) ) ; <nl> <nl> HintedHandOffManager . instance . start ( ) ; <nl> BatchlogManager . instance . start ( ) ;

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableLoaderTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableLoaderTest . java 
 index 3370e56 . . 4eebdeb 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableLoaderTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableLoaderTest . java 
 @ @ - 38 , 6 + 38 , 7 @ @ import org . apache . cassandra . db . partitions . * ; 
 import org . apache . cassandra . db . marshal . AsciiType ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . dht . Token ; 
 + import org . apache . cassandra . io . FSWriteError ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . schema . KeyspaceParams ; 
 import org . apache . cassandra . service . StorageService ; 
 @ @ - 80 , 7 + 81 , 18 @ @ public class SSTableLoaderTest 
 @ After 
 public void cleanup ( ) 
 { 
 - FileUtils . deleteRecursive ( tmpdir ) ; 
 + try { 
 + FileUtils . deleteRecursive ( tmpdir ) ; 
 + } catch ( FSWriteError e ) { 
 + / * * 
 + * Windows does not allow a mapped file to be deleted , so we probably forgot to clean the buffers somewhere . 
 + * We force a GC here to force buffer deallocation , and then try deleting the directory again . 
 + * For more information , see : http : / / bugs . java . com / bugdatabase / view _ bug . do ? bug _ id = 4715154 
 + * If this is not the problem , the exception will be rethrown anyway . 
 + * / 
 + System . gc ( ) ; 
 + FileUtils . deleteRecursive ( tmpdir ) ; 
 + } 
 } 
 
 private static final class TestClient extends SSTableLoader . Client

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index d550bb6 . . 9ee2f61 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 995 , 11 + 995 , 15 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 } 
 } 
 
 + public void start ( int generationNumber ) 
 + { 
 + start ( generationNumber , new HashMap < ApplicationState , VersionedValue > ( ) ) ; 
 + } 
 + 
 / * * 
 - * Start the gossiper with the generation # retrieved from the System 
 - * table 
 + * Start the gossiper with the generation number , preloading the map of application states before starting 
 * / 
 - public void start ( int generationNbr ) 
 + public void start ( int generationNbr , Map < ApplicationState , VersionedValue > preloadLocalStates ) 
 { 
 / * Get the seeds from the config and initialize them . * / 
 Set < InetAddress > seedHosts = DatabaseDescriptor . getSeeds ( ) ; 
 @ @ - 1013 , 6 + 1017 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 / * initialize the heartbeat state for this localEndpoint * / 
 maybeInitializeLocalState ( generationNbr ) ; 
 EndpointState localState = endpointStateMap . get ( FBUtilities . getBroadcastAddress ( ) ) ; 
 + for ( Map . Entry < ApplicationState , VersionedValue > entry : preloadLocalStates . entrySet ( ) ) 
 + localState . addApplicationState ( entry . getKey ( ) , entry . getValue ( ) ) ; 
 
 / / notify snitches that Gossiper is about to start 
 DatabaseDescriptor . getEndpointSnitch ( ) . gossiperStarting ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 4c0a9ce . . 2f178b6 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 524 , 24 + 524 , 24 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 / / have to start the gossip service before we can see any info on other nodes . this is necessary 
 / / for bootstrap to get the load info it needs . 
 / / ( we won ' t be part of the storage ring though until we add a counterId to our state , below . ) 
 + Map < ApplicationState , VersionedValue > appStates = new HashMap < ApplicationState , VersionedValue > ( ) ; 
 + appStates . put ( ApplicationState . NET _ VERSION , valueFactory . networkVersion ( ) ) ; 
 + appStates . put ( ApplicationState . HOST _ ID , valueFactory . hostId ( SystemTable . getLocalHostId ( ) ) ) ; 
 + appStates . put ( ApplicationState . RPC _ ADDRESS , valueFactory . rpcaddress ( DatabaseDescriptor . getRpcAddress ( ) ) ) ; 
 + if ( 0 ! = DatabaseDescriptor . getReplaceTokens ( ) . size ( ) ) 
 + appStates . put ( ApplicationState . STATUS , valueFactory . hibernate ( true ) ) ; 
 + appStates . put ( ApplicationState . RELEASE _ VERSION , valueFactory . releaseVersion ( ) ) ; 
 Gossiper . instance . register ( this ) ; 
 Gossiper . instance . register ( migrationManager ) ; 
 - Gossiper . instance . start ( SystemTable . incrementAndGetGeneration ( ) ) ; / / needed for node - ring gathering . 
 - / / gossip network proto version 
 - Gossiper . instance . addLocalApplicationState ( ApplicationState . NET _ VERSION , valueFactory . networkVersion ( ) ) ; 
 - Gossiper . instance . addLocalApplicationState ( ApplicationState . HOST _ ID , valueFactory . hostId ( SystemTable . getLocalHostId ( ) ) ) ; 
 + Gossiper . instance . start ( SystemTable . incrementAndGetGeneration ( ) , appStates ) ; / / needed for node - ring gathering . 
 / / gossip snitch infos ( local DC and rack ) 
 gossipSnitchInfo ( ) ; 
 + / / gossip Schema . emptyVersion forcing immediate check for schema updates ( see MigrationManager # maybeScheduleSchemaPull ) 
 Schema . instance . updateVersionAndAnnounce ( ) ; / / Ensure we know our own actual Schema UUID in preparation for updates 
 
 - / / add rpc listening info 
 - Gossiper . instance . addLocalApplicationState ( ApplicationState . RPC _ ADDRESS , valueFactory . rpcaddress ( DatabaseDescriptor . getRpcAddress ( ) ) ) ; 
 - if ( 0 ! = DatabaseDescriptor . getReplaceTokens ( ) . size ( ) ) 
 - Gossiper . instance . addLocalApplicationState ( ApplicationState . STATUS , valueFactory . hibernate ( true ) ) ; 
 
 MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; 
 LoadBroadcaster . instance . startBroadcasting ( ) ; 
 - Gossiper . instance . addLocalApplicationState ( ApplicationState . RELEASE _ VERSION , valueFactory . releaseVersion ( ) ) ; 
 
 HintedHandOffManager . instance . start ( ) ; 
 BatchlogManager . instance . start ( ) ;
