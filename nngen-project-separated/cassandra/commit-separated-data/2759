BLEU SCORE: 0.05522397783539471

TEST MSG: Failure detector correctly converts initial value to nanos
GENERATED MSG: Update guava to 15 . 0

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6e3c2c2 . . 85c6533 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 6 <nl> + * Failure detector correctly converts initial value to nanos ( CASSANDRA - 6658 ) <nl> * Add nodetool taketoken to relocate vnodes ( CASSANDRA - 4445 ) <nl> * Fix upgradesstables NPE for non - CF - based indexes ( CASSANDRA - 6645 ) <nl> * Improve nodetool cfhistograms formatting ( CASSANDRA - 6360 ) <nl> diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> index a7eb82f . . 36776bc 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> import java . util . * ; <nl> import java . util . concurrent . CopyOnWriteArrayList ; <nl> + import java . util . concurrent . TimeUnit ; <nl> import javax . management . MBeanServer ; <nl> import javax . management . ObjectName ; <nl> <nl> @ @ - 45 , 7 + 46 , 7 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean <nl> { <nl> public static final String MBEAN _ NAME = " org . apache . cassandra . net : type = FailureDetector " ; <nl> private static final int SAMPLE _ SIZE = 1000 ; <nl> - protected static final int INITIAL _ VALUE = getInitialValue ( ) ; <nl> + protected static final long INITIAL _ VALUE _ NANOS = TimeUnit . NANOSECONDS . convert ( getInitialValue ( ) , TimeUnit . MILLISECONDS ) ; <nl> <nl> public static final IFailureDetector instance = new FailureDetector ( ) ; <nl> private static final Logger logger = LoggerFactory . getLogger ( FailureDetector . class ) ; <nl> @ @ - 73 , 7 + 74 , 7 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean <nl> } <nl> } <nl> <nl> - private static int getInitialValue ( ) <nl> + private static long getInitialValue ( ) <nl> { <nl> String newvalue = System . getProperty ( " cassandra . fd _ initial _ value _ ms " ) ; <nl> if ( newvalue ! = null ) <nl> @ @ - 296 , 29 + 297 , 27 @ @ class ArrivalWindow <nl> / / change . <nl> private final double PHI _ FACTOR = 1 . 0 / Math . log ( 10 . 0 ) ; <nl> <nl> - private static final long MILLI _ TO _ NANO = 1000000L ; <nl> - <nl> / / in the event of a long partition , never record an interval longer than the rpc timeout , <nl> / / since if a host is regularly experiencing connectivity problems lasting this long we ' d <nl> / / rather mark it down quickly instead of adapting <nl> / / this value defaults to the same initial value the FD is seeded with <nl> - private final long MAX _ INTERVAL _ IN _ NANO = getMaxInterval ( ) * MILLI _ TO _ NANO ; <nl> + private final long MAX _ INTERVAL _ IN _ NANO = getMaxInterval ( ) ; <nl> <nl> ArrivalWindow ( int size ) <nl> { <nl> arrivalIntervals = new BoundedStatsDeque ( size ) ; <nl> } <nl> <nl> - private static int getMaxInterval ( ) <nl> + private static long getMaxInterval ( ) <nl> { <nl> String newvalue = System . getProperty ( " cassandra . fd _ max _ interval _ ms " ) ; <nl> if ( newvalue ! = null ) <nl> { <nl> logger . info ( " Overriding FD MAX _ INTERVAL to { } ms " , newvalue ) ; <nl> - return Integer . parseInt ( newvalue ) ; <nl> + return TimeUnit . NANOSECONDS . convert ( Integer . parseInt ( newvalue ) , TimeUnit . MILLISECONDS ) ; <nl> } <nl> else <nl> - return FailureDetector . INITIAL _ VALUE ; <nl> + return FailureDetector . INITIAL _ VALUE _ NANOS ; <nl> } <nl> <nl> synchronized void add ( long value ) <nl> @ @ - 337 , 7 + 336 , 7 @ @ class ArrivalWindow <nl> / / We use a very large initial interval since the " right " average depends on the cluster size <nl> / / and it ' s better to err high ( false negatives , which will be corrected by waiting a bit longer ) <nl> / / than low ( false positives , which cause " flapping " ) . <nl> - arrivalIntervals . add ( FailureDetector . INITIAL _ VALUE ) ; <nl> + arrivalIntervals . add ( FailureDetector . INITIAL _ VALUE _ NANOS ) ; <nl> } <nl> tLast = value ; <nl> }
NEAREST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index 50a1b36 . . d0bb1c5 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 25 , 7 + 25 , 7 @ @ <nl> < property name = " debuglevel " value = " source , lines , vars " / > <nl> <nl> < ! - - default version and SCM information - - > <nl> - < property name = " base . version " value = " 2 . 0 . 0 " / > <nl> + < property name = " base . version " value = " 2 . 1 " / > <nl> < property name = " scm . connection " value = " scm : git : / / git . apache . org / cassandra . git " / > <nl> < property name = " scm . developerConnection " value = " scm : git : / / git . apache . org / cassandra . git " / > <nl> < property name = " scm . url " value = " http : / / git - wip - us . apache . org / repos / asf ? p = cassandra . git ; a = tree " / >

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6e3c2c2 . . 85c6533 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 6 
 + * Failure detector correctly converts initial value to nanos ( CASSANDRA - 6658 ) 
 * Add nodetool taketoken to relocate vnodes ( CASSANDRA - 4445 ) 
 * Fix upgradesstables NPE for non - CF - based indexes ( CASSANDRA - 6645 ) 
 * Improve nodetool cfhistograms formatting ( CASSANDRA - 6360 ) 
 diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 index a7eb82f . . 36776bc 100644 
 - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java 
 + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 import java . util . * ; 
 import java . util . concurrent . CopyOnWriteArrayList ; 
 + import java . util . concurrent . TimeUnit ; 
 import javax . management . MBeanServer ; 
 import javax . management . ObjectName ; 
 
 @ @ - 45 , 7 + 46 , 7 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean 
 { 
 public static final String MBEAN _ NAME = " org . apache . cassandra . net : type = FailureDetector " ; 
 private static final int SAMPLE _ SIZE = 1000 ; 
 - protected static final int INITIAL _ VALUE = getInitialValue ( ) ; 
 + protected static final long INITIAL _ VALUE _ NANOS = TimeUnit . NANOSECONDS . convert ( getInitialValue ( ) , TimeUnit . MILLISECONDS ) ; 
 
 public static final IFailureDetector instance = new FailureDetector ( ) ; 
 private static final Logger logger = LoggerFactory . getLogger ( FailureDetector . class ) ; 
 @ @ - 73 , 7 + 74 , 7 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean 
 } 
 } 
 
 - private static int getInitialValue ( ) 
 + private static long getInitialValue ( ) 
 { 
 String newvalue = System . getProperty ( " cassandra . fd _ initial _ value _ ms " ) ; 
 if ( newvalue ! = null ) 
 @ @ - 296 , 29 + 297 , 27 @ @ class ArrivalWindow 
 / / change . 
 private final double PHI _ FACTOR = 1 . 0 / Math . log ( 10 . 0 ) ; 
 
 - private static final long MILLI _ TO _ NANO = 1000000L ; 
 - 
 / / in the event of a long partition , never record an interval longer than the rpc timeout , 
 / / since if a host is regularly experiencing connectivity problems lasting this long we ' d 
 / / rather mark it down quickly instead of adapting 
 / / this value defaults to the same initial value the FD is seeded with 
 - private final long MAX _ INTERVAL _ IN _ NANO = getMaxInterval ( ) * MILLI _ TO _ NANO ; 
 + private final long MAX _ INTERVAL _ IN _ NANO = getMaxInterval ( ) ; 
 
 ArrivalWindow ( int size ) 
 { 
 arrivalIntervals = new BoundedStatsDeque ( size ) ; 
 } 
 
 - private static int getMaxInterval ( ) 
 + private static long getMaxInterval ( ) 
 { 
 String newvalue = System . getProperty ( " cassandra . fd _ max _ interval _ ms " ) ; 
 if ( newvalue ! = null ) 
 { 
 logger . info ( " Overriding FD MAX _ INTERVAL to { } ms " , newvalue ) ; 
 - return Integer . parseInt ( newvalue ) ; 
 + return TimeUnit . NANOSECONDS . convert ( Integer . parseInt ( newvalue ) , TimeUnit . MILLISECONDS ) ; 
 } 
 else 
 - return FailureDetector . INITIAL _ VALUE ; 
 + return FailureDetector . INITIAL _ VALUE _ NANOS ; 
 } 
 
 synchronized void add ( long value ) 
 @ @ - 337 , 7 + 336 , 7 @ @ class ArrivalWindow 
 / / We use a very large initial interval since the " right " average depends on the cluster size 
 / / and it ' s better to err high ( false negatives , which will be corrected by waiting a bit longer ) 
 / / than low ( false positives , which cause " flapping " ) . 
 - arrivalIntervals . add ( FailureDetector . INITIAL _ VALUE ) ; 
 + arrivalIntervals . add ( FailureDetector . INITIAL _ VALUE _ NANOS ) ; 
 } 
 tLast = value ; 
 }

NEAREST DIFF:
diff - - git a / build . xml b / build . xml 
 index 50a1b36 . . d0bb1c5 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 25 , 7 + 25 , 7 @ @ 
 < property name = " debuglevel " value = " source , lines , vars " / > 
 
 < ! - - default version and SCM information - - > 
 - < property name = " base . version " value = " 2 . 0 . 0 " / > 
 + < property name = " base . version " value = " 2 . 1 " / > 
 < property name = " scm . connection " value = " scm : git : / / git . apache . org / cassandra . git " / > 
 < property name = " scm . developerConnection " value = " scm : git : / / git . apache . org / cassandra . git " / > 
 < property name = " scm . url " value = " http : / / git - wip - us . apache . org / repos / asf ? p = cassandra . git ; a = tree " / >
