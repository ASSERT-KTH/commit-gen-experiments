BLEU SCORE: 0.026341919627252283

TEST MSG: fixing CASSANDRA - 13123 test
GENERATED MSG: Disable passing control to post - flush after flush failure to prevent

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / commitlog / CommitLogSegmentBackpressureTest . java b / test / unit / org / apache / cassandra / db / commitlog / CommitLogSegmentBackpressureTest . java <nl> new file mode 100644 <nl> index 0000000 . . b651098 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / db / commitlog / CommitLogSegmentBackpressureTest . java <nl> @ @ - 0 , 0 + 1 , 140 @ @ <nl> + / * <nl> + * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * <nl> + * / <nl> + package org . apache . cassandra . db . commitlog ; <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . Random ; <nl> + import java . util . concurrent . Semaphore ; <nl> + <nl> + import com . google . common . collect . ImmutableMap ; <nl> + <nl> + import org . junit . Assert ; <nl> + import org . junit . Test ; <nl> + import org . junit . runner . RunWith ; <nl> + <nl> + import org . apache . cassandra . SchemaLoader ; <nl> + import org . apache . cassandra . Util ; <nl> + import org . apache . cassandra . config . Config . CommitLogSync ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . config . ParameterizedClass ; <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . db . Keyspace ; <nl> + import org . apache . cassandra . db . Mutation ; <nl> + import org . apache . cassandra . db . RowUpdateBuilder ; <nl> + import org . apache . cassandra . db . compaction . CompactionManager ; <nl> + import org . apache . cassandra . db . marshal . AsciiType ; <nl> + import org . apache . cassandra . db . marshal . BytesType ; <nl> + import org . apache . cassandra . schema . KeyspaceParams ; <nl> + import org . jboss . byteman . contrib . bmunit . BMRule ; <nl> + import org . jboss . byteman . contrib . bmunit . BMRules ; <nl> + import org . jboss . byteman . contrib . bmunit . BMUnitRunner ; <nl> + <nl> + / * * <nl> + * Since this test depends on byteman rules being setup during initialization , you shouldn ' t add tests to this class <nl> + * / <nl> + @ RunWith ( BMUnitRunner . class ) <nl> + public class CommitLogSegmentBackpressureTest <nl> + { <nl> + / / Block commit log service from syncing <nl> + private static final Semaphore allowSync = new Semaphore ( 1 ) ; <nl> + <nl> + private static final String KEYSPACE1 = " CommitLogTest " ; <nl> + private static final String STANDARD1 = " Standard1 " ; <nl> + private static final String STANDARD2 = " Standard2 " ; <nl> + <nl> + private final static byte [ ] entropy = new byte [ 1024 * 256 ] ; <nl> + <nl> + @ Test <nl> + @ BMRules ( rules = { @ BMRule ( name = " Acquire Semaphore before sync " , <nl> + targetClass = " AbstractCommitLogService $ 1 " , <nl> + targetMethod = " run " , <nl> + targetLocation = " AT INVOKE org . apache . cassandra . db . commitlog . CommitLog . sync " , <nl> + action = " org . apache . cassandra . db . commitlog . CommitLogSegmentBackpressureTest . allowSync . acquire ( ) " ) , <nl> + @ BMRule ( name = " Release Semaphore after sync " , <nl> + targetClass = " AbstractCommitLogService $ 1 " , <nl> + targetMethod = " run " , <nl> + targetLocation = " AFTER INVOKE org . apache . cassandra . db . commitlog . CommitLog . sync " , <nl> + action = " org . apache . cassandra . db . commitlog . CommitLogSegmentBackpressureTest . allowSync . release ( ) " ) } ) <nl> + public void testCompressedCommitLogBackpressure ( ) throws Throwable <nl> + { <nl> + / / Perform all initialization before making CommitLog . Sync blocking <nl> + / / Doing the initialization within the method guarantee that Byteman has performed its injections when we start <nl> + new Random ( ) . nextBytes ( entropy ) ; <nl> + DatabaseDescriptor . setCommitLogCompression ( new ParameterizedClass ( " LZ4Compressor " , ImmutableMap . of ( ) ) ) ; <nl> + DatabaseDescriptor . setCommitLogSegmentSize ( 1 ) ; <nl> + DatabaseDescriptor . setCommitLogSync ( CommitLogSync . periodic ) ; <nl> + DatabaseDescriptor . setCommitLogSyncPeriod ( 10 * 1000 ) ; <nl> + SchemaLoader . prepareServer ( ) ; <nl> + SchemaLoader . createKeyspace ( KEYSPACE1 , <nl> + KeyspaceParams . simple ( 1 ) , <nl> + SchemaLoader . standardCFMD ( KEYSPACE1 , STANDARD1 , 0 , AsciiType . instance , BytesType . instance ) , <nl> + SchemaLoader . standardCFMD ( KEYSPACE1 , STANDARD2 , 0 , AsciiType . instance , BytesType . instance ) ) ; <nl> + <nl> + CompactionManager . instance . disableAutoCompaction ( ) ; <nl> + <nl> + ColumnFamilyStore cfs1 = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( STANDARD1 ) ; <nl> + <nl> + final Mutation m = new RowUpdateBuilder ( cfs1 . metadata , 0 , " k " ) . clustering ( " bytes " ) <nl> + . add ( " val " , ByteBuffer . wrap ( entropy ) ) <nl> + . build ( ) ; <nl> + <nl> + Thread dummyThread = new Thread ( ( ) - > { <nl> + for ( int i = 0 ; i < 20 ; i + + ) <nl> + CommitLog . instance . add ( m ) ; <nl> + } ) ; <nl> + <nl> + try <nl> + { <nl> + / / Makes sure any call to CommitLog . sync is blocking <nl> + allowSync . acquire ( ) ; <nl> + <nl> + dummyThread . start ( ) ; <nl> + <nl> + CommitLogSegmentManager clsm = CommitLog . instance . allocator ; <nl> + <nl> + Util . spinAssertEquals ( 3 , ( ) - > clsm . getActiveSegments ( ) . size ( ) , 5 ) ; <nl> + <nl> + Thread . sleep ( 1000 ) ; <nl> + <nl> + / / Should only be able to create 3 segments ( not 7 ) because it blocks waiting for truncation that never <nl> + / / comes . <nl> + Assert . assertEquals ( 3 , clsm . getActiveSegments ( ) . size ( ) ) ; <nl> + <nl> + clsm . getActiveSegments ( ) . forEach ( segment - > clsm . recycleSegment ( segment ) ) ; <nl> + <nl> + Util . spinAssertEquals ( 3 , ( ) - > clsm . getActiveSegments ( ) . size ( ) , 5 ) ; <nl> + } <nl> + finally <nl> + { <nl> + / / Allow the CommitLog . sync to perform normally . <nl> + allowSync . release ( ) ; <nl> + } <nl> + try <nl> + { <nl> + / / Wait for the dummy thread to die <nl> + dummyThread . join ( ) ; <nl> + } <nl> + catch ( InterruptedException e ) <nl> + { <nl> + Thread . currentThread ( ) . interrupt ( ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / db / commitlog / CommitLogSegmentManagerTest . java b / test / unit / org / apache / cassandra / db / commitlog / CommitLogSegmentManagerTest . java <nl> deleted file mode 100644 <nl> index 41f5ed5 . . 0000000 <nl> - - - a / test / unit / org / apache / cassandra / db / commitlog / CommitLogSegmentManagerTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 167 + 0 , 0 @ @ <nl> - / * <nl> - * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , <nl> - * software distributed under the License is distributed on an <nl> - * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> - * KIND , either express or implied . See the License for the <nl> - * specific language governing permissions and limitations <nl> - * under the License . <nl> - * <nl> - * / <nl> - package org . apache . cassandra . db . commitlog ; <nl> - <nl> - import java . io . File ; <nl> - import java . nio . ByteBuffer ; <nl> - import java . util . Random ; <nl> - import java . util . UUID ; <nl> - import java . util . concurrent . Semaphore ; <nl> - <nl> - import com . google . common . collect . ImmutableMap ; <nl> - <nl> - import org . junit . Assert ; <nl> - import org . junit . Test ; <nl> - import org . junit . runner . RunWith ; <nl> - <nl> - import org . apache . cassandra . SchemaLoader ; <nl> - import org . apache . cassandra . Util ; <nl> - import org . apache . cassandra . config . Config . CommitLogSync ; <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - import org . apache . cassandra . config . ParameterizedClass ; <nl> - import org . apache . cassandra . db . ColumnFamilyStore ; <nl> - import org . apache . cassandra . db . Keyspace ; <nl> - import org . apache . cassandra . db . Mutation ; <nl> - import org . apache . cassandra . db . RowUpdateBuilder ; <nl> - import org . apache . cassandra . db . compaction . CompactionManager ; <nl> - import org . apache . cassandra . db . marshal . AsciiType ; <nl> - import org . apache . cassandra . db . marshal . BytesType ; <nl> - import org . apache . cassandra . schema . KeyspaceParams ; <nl> - import org . jboss . byteman . contrib . bmunit . BMRule ; <nl> - import org . jboss . byteman . contrib . bmunit . BMRules ; <nl> - import org . jboss . byteman . contrib . bmunit . BMUnitRunner ; <nl> - <nl> - @ RunWith ( BMUnitRunner . class ) <nl> - public class CommitLogSegmentManagerTest <nl> - { <nl> - / / Block commit log service from syncing <nl> - private static final Semaphore allowSync = new Semaphore ( 1 ) ; <nl> - <nl> - private static final String KEYSPACE1 = " CommitLogTest " ; <nl> - private static final String STANDARD1 = " Standard1 " ; <nl> - private static final String STANDARD2 = " Standard2 " ; <nl> - <nl> - private final static byte [ ] entropy = new byte [ 1024 * 256 ] ; <nl> - <nl> - @ Test <nl> - @ BMRules ( rules = { @ BMRule ( name = " Acquire Semaphore before sync " , <nl> - targetClass = " AbstractCommitLogService $ 1 " , <nl> - targetMethod = " run " , <nl> - targetLocation = " AT INVOKE org . apache . cassandra . db . commitlog . CommitLog . sync " , <nl> - action = " org . apache . cassandra . db . commitlog . CommitLogSegmentManagerTest . allowSync . acquire ( ) " ) , <nl> - @ BMRule ( name = " Release Semaphore after sync " , <nl> - targetClass = " AbstractCommitLogService $ 1 " , <nl> - targetMethod = " run " , <nl> - targetLocation = " AFTER INVOKE org . apache . cassandra . db . commitlog . CommitLog . sync " , <nl> - action = " org . apache . cassandra . db . commitlog . CommitLogSegmentManagerTest . allowSync . release ( ) " ) } ) <nl> - public void testCompressedCommitLogBackpressure ( ) throws Throwable <nl> - { <nl> - / / Perform all initialization before making CommitLog . Sync blocking <nl> - / / Doing the initialization within the method guarantee that Byteman has performed its injections when we start <nl> - new Random ( ) . nextBytes ( entropy ) ; <nl> - DatabaseDescriptor . setCommitLogCompression ( new ParameterizedClass ( " LZ4Compressor " , ImmutableMap . of ( ) ) ) ; <nl> - DatabaseDescriptor . setCommitLogSegmentSize ( 1 ) ; <nl> - DatabaseDescriptor . setCommitLogSync ( CommitLogSync . periodic ) ; <nl> - DatabaseDescriptor . setCommitLogSyncPeriod ( 10 * 1000 ) ; <nl> - SchemaLoader . prepareServer ( ) ; <nl> - SchemaLoader . createKeyspace ( KEYSPACE1 , <nl> - KeyspaceParams . simple ( 1 ) , <nl> - SchemaLoader . standardCFMD ( KEYSPACE1 , STANDARD1 , 0 , AsciiType . instance , BytesType . instance ) , <nl> - SchemaLoader . standardCFMD ( KEYSPACE1 , STANDARD2 , 0 , AsciiType . instance , BytesType . instance ) ) ; <nl> - <nl> - CompactionManager . instance . disableAutoCompaction ( ) ; <nl> - <nl> - ColumnFamilyStore cfs1 = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( STANDARD1 ) ; <nl> - <nl> - final Mutation m = new RowUpdateBuilder ( cfs1 . metadata , 0 , " k " ) . clustering ( " bytes " ) <nl> - . add ( " val " , ByteBuffer . wrap ( entropy ) ) <nl> - . build ( ) ; <nl> - <nl> - Thread dummyThread = new Thread ( ( ) - > { <nl> - for ( int i = 0 ; i < 20 ; i + + ) <nl> - CommitLog . instance . add ( m ) ; <nl> - } ) ; <nl> - <nl> - try <nl> - { <nl> - / / Makes sure any call to CommitLog . sync is blocking <nl> - allowSync . acquire ( ) ; <nl> - <nl> - dummyThread . start ( ) ; <nl> - <nl> - CommitLogSegmentManager clsm = CommitLog . instance . allocator ; <nl> - <nl> - Util . spinAssertEquals ( 3 , ( ) - > clsm . getActiveSegments ( ) . size ( ) , 5 ) ; <nl> - <nl> - Thread . sleep ( 1000 ) ; <nl> - <nl> - / / Should only be able to create 3 segments ( not 7 ) because it blocks waiting for truncation that never <nl> - / / comes . <nl> - Assert . assertEquals ( 3 , clsm . getActiveSegments ( ) . size ( ) ) ; <nl> - <nl> - clsm . getActiveSegments ( ) . forEach ( segment - > clsm . recycleSegment ( segment ) ) ; <nl> - <nl> - Util . spinAssertEquals ( 3 , ( ) - > clsm . getActiveSegments ( ) . size ( ) , 5 ) ; <nl> - } <nl> - finally <nl> - { <nl> - / / Allow the CommitLog . sync to perform normally . <nl> - allowSync . release ( ) ; <nl> - } <nl> - try <nl> - { <nl> - / / Wait for the dummy thread to die <nl> - dummyThread . join ( ) ; <nl> - } <nl> - catch ( InterruptedException e ) <nl> - { <nl> - Thread . currentThread ( ) . interrupt ( ) ; <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> - @ BMRule ( name = " Make removing commitlog segments slow " , <nl> - targetClass = " CommitLogSegment " , <nl> - targetMethod = " discard " , <nl> - action = " Thread . sleep ( 50 ) " ) <nl> - public void testShutdownWithPendingTasks ( ) throws Throwable { <nl> - CommitLog . instance . resetUnsafe ( true ) ; <nl> - ColumnFamilyStore cfs1 = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( STANDARD1 ) ; <nl> - <nl> - final Mutation m = new RowUpdateBuilder ( cfs1 . metadata , 0 , " k " ) <nl> - . clustering ( " bytes " ) <nl> - . add ( " val " , ByteBuffer . wrap ( entropy ) ) <nl> - . build ( ) ; <nl> - <nl> - / / force creating several commitlog files <nl> - for ( int i = 0 ; i < 10 ; i + + ) { <nl> - CommitLog . instance . add ( m ) ; <nl> - } <nl> - <nl> - / / schedule discarding completed segments and immediately issue a shutdown <nl> - UUID cfid = m . getColumnFamilyIds ( ) . iterator ( ) . next ( ) ; <nl> - CommitLog . instance . discardCompletedSegments ( cfid , ReplayPosition . NONE , CommitLog . instance . getContext ( ) ) ; <nl> - CommitLog . instance . shutdownBlocking ( ) ; <nl> - <nl> - / / the shutdown should block until all logs except the currently active one and perhaps a new , empty one are gone <nl> - Assert . assertTrue ( new File ( CommitLog . instance . location ) . listFiles ( ) . length < = 2 ) ; <nl> - } <nl> - } <nl> diff - - git a / test / unit / org / apache / cassandra / db / commitlog / CommitlogShutdownTest . java b / test / unit / org / apache / cassandra / db / commitlog / CommitlogShutdownTest . java <nl> new file mode 100644 <nl> index 0000000 . . ee3f111 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / db / commitlog / CommitlogShutdownTest . java <nl> @ @ - 0 , 0 + 1 , 98 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . db . commitlog ; <nl> + <nl> + import java . io . File ; <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . Random ; <nl> + import java . util . UUID ; <nl> + <nl> + import com . google . common . collect . ImmutableMap ; <nl> + import org . junit . Assert ; <nl> + import org . junit . Test ; <nl> + import org . junit . runner . RunWith ; <nl> + <nl> + import org . apache . cassandra . SchemaLoader ; <nl> + import org . apache . cassandra . config . Config ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . config . ParameterizedClass ; <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . db . Keyspace ; <nl> + import org . apache . cassandra . db . Mutation ; <nl> + import org . apache . cassandra . db . RowUpdateBuilder ; <nl> + import org . apache . cassandra . db . compaction . CompactionManager ; <nl> + import org . apache . cassandra . db . marshal . AsciiType ; <nl> + import org . apache . cassandra . db . marshal . BytesType ; <nl> + import org . apache . cassandra . schema . KeyspaceParams ; <nl> + import org . jboss . byteman . contrib . bmunit . BMRule ; <nl> + import org . jboss . byteman . contrib . bmunit . BMUnitRunner ; <nl> + <nl> + / * * <nl> + * Since this test depends on byteman rules being setup during initialization , you shouldn ' t add tests to this class <nl> + * / <nl> + @ RunWith ( BMUnitRunner . class ) <nl> + public class CommitlogShutdownTest <nl> + { <nl> + private static final String KEYSPACE1 = " CommitLogTest " ; <nl> + private static final String STANDARD1 = " Standard1 " ; <nl> + <nl> + private final static byte [ ] entropy = new byte [ 1024 * 256 ] ; <nl> + <nl> + @ Test <nl> + @ BMRule ( name = " Make removing commitlog segments slow " , <nl> + targetClass = " CommitLogSegment " , <nl> + targetMethod = " discard " , <nl> + action = " Thread . sleep ( 50 ) " ) <nl> + public void testShutdownWithPendingTasks ( ) throws Exception <nl> + { <nl> + new Random ( ) . nextBytes ( entropy ) ; <nl> + DatabaseDescriptor . setCommitLogCompression ( new ParameterizedClass ( " LZ4Compressor " , ImmutableMap . of ( ) ) ) ; <nl> + DatabaseDescriptor . setCommitLogSegmentSize ( 1 ) ; <nl> + DatabaseDescriptor . setCommitLogSync ( Config . CommitLogSync . periodic ) ; <nl> + DatabaseDescriptor . setCommitLogSyncPeriod ( 10 * 1000 ) ; <nl> + SchemaLoader . prepareServer ( ) ; <nl> + SchemaLoader . createKeyspace ( KEYSPACE1 , <nl> + KeyspaceParams . simple ( 1 ) , <nl> + SchemaLoader . standardCFMD ( KEYSPACE1 , STANDARD1 , 0 , AsciiType . instance , BytesType . instance ) ) ; <nl> + <nl> + CompactionManager . instance . disableAutoCompaction ( ) ; <nl> + <nl> + CommitLog . instance . resetUnsafe ( true ) ; <nl> + ColumnFamilyStore cfs1 = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( STANDARD1 ) ; <nl> + <nl> + final Mutation m = new RowUpdateBuilder ( cfs1 . metadata , 0 , " k " ) <nl> + . clustering ( " bytes " ) <nl> + . add ( " val " , ByteBuffer . wrap ( entropy ) ) <nl> + . build ( ) ; <nl> + <nl> + / / force creating several commitlog files <nl> + for ( int i = 0 ; i < 10 ; i + + ) <nl> + { <nl> + CommitLog . instance . add ( m ) ; <nl> + } <nl> + <nl> + / / schedule discarding completed segments and immediately issue a shutdown <nl> + UUID cfid = m . getColumnFamilyIds ( ) . iterator ( ) . next ( ) ; <nl> + CommitLog . instance . discardCompletedSegments ( cfid , ReplayPosition . NONE , CommitLog . instance . getContext ( ) ) ; <nl> + CommitLog . instance . shutdownBlocking ( ) ; <nl> + <nl> + / / the shutdown should block until all logs except the currently active one and perhaps a new , empty one are gone <nl> + Assert . assertTrue ( new File ( CommitLog . instance . location ) . listFiles ( ) . length < = 2 ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / commitlog / CommitLogSegmentBackpressureTest . java b / test / unit / org / apache / cassandra / db / commitlog / CommitLogSegmentBackpressureTest . java 
 new file mode 100644 
 index 0000000 . . b651098 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / db / commitlog / CommitLogSegmentBackpressureTest . java 
 @ @ - 0 , 0 + 1 , 140 @ @ 
 + / * 
 + * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * 
 + * / 
 + package org . apache . cassandra . db . commitlog ; 
 + 
 + import java . nio . ByteBuffer ; 
 + import java . util . Random ; 
 + import java . util . concurrent . Semaphore ; 
 + 
 + import com . google . common . collect . ImmutableMap ; 
 + 
 + import org . junit . Assert ; 
 + import org . junit . Test ; 
 + import org . junit . runner . RunWith ; 
 + 
 + import org . apache . cassandra . SchemaLoader ; 
 + import org . apache . cassandra . Util ; 
 + import org . apache . cassandra . config . Config . CommitLogSync ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . config . ParameterizedClass ; 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . db . Keyspace ; 
 + import org . apache . cassandra . db . Mutation ; 
 + import org . apache . cassandra . db . RowUpdateBuilder ; 
 + import org . apache . cassandra . db . compaction . CompactionManager ; 
 + import org . apache . cassandra . db . marshal . AsciiType ; 
 + import org . apache . cassandra . db . marshal . BytesType ; 
 + import org . apache . cassandra . schema . KeyspaceParams ; 
 + import org . jboss . byteman . contrib . bmunit . BMRule ; 
 + import org . jboss . byteman . contrib . bmunit . BMRules ; 
 + import org . jboss . byteman . contrib . bmunit . BMUnitRunner ; 
 + 
 + / * * 
 + * Since this test depends on byteman rules being setup during initialization , you shouldn ' t add tests to this class 
 + * / 
 + @ RunWith ( BMUnitRunner . class ) 
 + public class CommitLogSegmentBackpressureTest 
 + { 
 + / / Block commit log service from syncing 
 + private static final Semaphore allowSync = new Semaphore ( 1 ) ; 
 + 
 + private static final String KEYSPACE1 = " CommitLogTest " ; 
 + private static final String STANDARD1 = " Standard1 " ; 
 + private static final String STANDARD2 = " Standard2 " ; 
 + 
 + private final static byte [ ] entropy = new byte [ 1024 * 256 ] ; 
 + 
 + @ Test 
 + @ BMRules ( rules = { @ BMRule ( name = " Acquire Semaphore before sync " , 
 + targetClass = " AbstractCommitLogService $ 1 " , 
 + targetMethod = " run " , 
 + targetLocation = " AT INVOKE org . apache . cassandra . db . commitlog . CommitLog . sync " , 
 + action = " org . apache . cassandra . db . commitlog . CommitLogSegmentBackpressureTest . allowSync . acquire ( ) " ) , 
 + @ BMRule ( name = " Release Semaphore after sync " , 
 + targetClass = " AbstractCommitLogService $ 1 " , 
 + targetMethod = " run " , 
 + targetLocation = " AFTER INVOKE org . apache . cassandra . db . commitlog . CommitLog . sync " , 
 + action = " org . apache . cassandra . db . commitlog . CommitLogSegmentBackpressureTest . allowSync . release ( ) " ) } ) 
 + public void testCompressedCommitLogBackpressure ( ) throws Throwable 
 + { 
 + / / Perform all initialization before making CommitLog . Sync blocking 
 + / / Doing the initialization within the method guarantee that Byteman has performed its injections when we start 
 + new Random ( ) . nextBytes ( entropy ) ; 
 + DatabaseDescriptor . setCommitLogCompression ( new ParameterizedClass ( " LZ4Compressor " , ImmutableMap . of ( ) ) ) ; 
 + DatabaseDescriptor . setCommitLogSegmentSize ( 1 ) ; 
 + DatabaseDescriptor . setCommitLogSync ( CommitLogSync . periodic ) ; 
 + DatabaseDescriptor . setCommitLogSyncPeriod ( 10 * 1000 ) ; 
 + SchemaLoader . prepareServer ( ) ; 
 + SchemaLoader . createKeyspace ( KEYSPACE1 , 
 + KeyspaceParams . simple ( 1 ) , 
 + SchemaLoader . standardCFMD ( KEYSPACE1 , STANDARD1 , 0 , AsciiType . instance , BytesType . instance ) , 
 + SchemaLoader . standardCFMD ( KEYSPACE1 , STANDARD2 , 0 , AsciiType . instance , BytesType . instance ) ) ; 
 + 
 + CompactionManager . instance . disableAutoCompaction ( ) ; 
 + 
 + ColumnFamilyStore cfs1 = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( STANDARD1 ) ; 
 + 
 + final Mutation m = new RowUpdateBuilder ( cfs1 . metadata , 0 , " k " ) . clustering ( " bytes " ) 
 + . add ( " val " , ByteBuffer . wrap ( entropy ) ) 
 + . build ( ) ; 
 + 
 + Thread dummyThread = new Thread ( ( ) - > { 
 + for ( int i = 0 ; i < 20 ; i + + ) 
 + CommitLog . instance . add ( m ) ; 
 + } ) ; 
 + 
 + try 
 + { 
 + / / Makes sure any call to CommitLog . sync is blocking 
 + allowSync . acquire ( ) ; 
 + 
 + dummyThread . start ( ) ; 
 + 
 + CommitLogSegmentManager clsm = CommitLog . instance . allocator ; 
 + 
 + Util . spinAssertEquals ( 3 , ( ) - > clsm . getActiveSegments ( ) . size ( ) , 5 ) ; 
 + 
 + Thread . sleep ( 1000 ) ; 
 + 
 + / / Should only be able to create 3 segments ( not 7 ) because it blocks waiting for truncation that never 
 + / / comes . 
 + Assert . assertEquals ( 3 , clsm . getActiveSegments ( ) . size ( ) ) ; 
 + 
 + clsm . getActiveSegments ( ) . forEach ( segment - > clsm . recycleSegment ( segment ) ) ; 
 + 
 + Util . spinAssertEquals ( 3 , ( ) - > clsm . getActiveSegments ( ) . size ( ) , 5 ) ; 
 + } 
 + finally 
 + { 
 + / / Allow the CommitLog . sync to perform normally . 
 + allowSync . release ( ) ; 
 + } 
 + try 
 + { 
 + / / Wait for the dummy thread to die 
 + dummyThread . join ( ) ; 
 + } 
 + catch ( InterruptedException e ) 
 + { 
 + Thread . currentThread ( ) . interrupt ( ) ; 
 + } 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / db / commitlog / CommitLogSegmentManagerTest . java b / test / unit / org / apache / cassandra / db / commitlog / CommitLogSegmentManagerTest . java 
 deleted file mode 100644 
 index 41f5ed5 . . 0000000 
 - - - a / test / unit / org / apache / cassandra / db / commitlog / CommitLogSegmentManagerTest . java 
 + + + / dev / null 
 @ @ - 1 , 167 + 0 , 0 @ @ 
 - / * 
 - * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , 
 - * software distributed under the License is distributed on an 
 - * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 - * KIND , either express or implied . See the License for the 
 - * specific language governing permissions and limitations 
 - * under the License . 
 - * 
 - * / 
 - package org . apache . cassandra . db . commitlog ; 
 - 
 - import java . io . File ; 
 - import java . nio . ByteBuffer ; 
 - import java . util . Random ; 
 - import java . util . UUID ; 
 - import java . util . concurrent . Semaphore ; 
 - 
 - import com . google . common . collect . ImmutableMap ; 
 - 
 - import org . junit . Assert ; 
 - import org . junit . Test ; 
 - import org . junit . runner . RunWith ; 
 - 
 - import org . apache . cassandra . SchemaLoader ; 
 - import org . apache . cassandra . Util ; 
 - import org . apache . cassandra . config . Config . CommitLogSync ; 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 - import org . apache . cassandra . config . ParameterizedClass ; 
 - import org . apache . cassandra . db . ColumnFamilyStore ; 
 - import org . apache . cassandra . db . Keyspace ; 
 - import org . apache . cassandra . db . Mutation ; 
 - import org . apache . cassandra . db . RowUpdateBuilder ; 
 - import org . apache . cassandra . db . compaction . CompactionManager ; 
 - import org . apache . cassandra . db . marshal . AsciiType ; 
 - import org . apache . cassandra . db . marshal . BytesType ; 
 - import org . apache . cassandra . schema . KeyspaceParams ; 
 - import org . jboss . byteman . contrib . bmunit . BMRule ; 
 - import org . jboss . byteman . contrib . bmunit . BMRules ; 
 - import org . jboss . byteman . contrib . bmunit . BMUnitRunner ; 
 - 
 - @ RunWith ( BMUnitRunner . class ) 
 - public class CommitLogSegmentManagerTest 
 - { 
 - / / Block commit log service from syncing 
 - private static final Semaphore allowSync = new Semaphore ( 1 ) ; 
 - 
 - private static final String KEYSPACE1 = " CommitLogTest " ; 
 - private static final String STANDARD1 = " Standard1 " ; 
 - private static final String STANDARD2 = " Standard2 " ; 
 - 
 - private final static byte [ ] entropy = new byte [ 1024 * 256 ] ; 
 - 
 - @ Test 
 - @ BMRules ( rules = { @ BMRule ( name = " Acquire Semaphore before sync " , 
 - targetClass = " AbstractCommitLogService $ 1 " , 
 - targetMethod = " run " , 
 - targetLocation = " AT INVOKE org . apache . cassandra . db . commitlog . CommitLog . sync " , 
 - action = " org . apache . cassandra . db . commitlog . CommitLogSegmentManagerTest . allowSync . acquire ( ) " ) , 
 - @ BMRule ( name = " Release Semaphore after sync " , 
 - targetClass = " AbstractCommitLogService $ 1 " , 
 - targetMethod = " run " , 
 - targetLocation = " AFTER INVOKE org . apache . cassandra . db . commitlog . CommitLog . sync " , 
 - action = " org . apache . cassandra . db . commitlog . CommitLogSegmentManagerTest . allowSync . release ( ) " ) } ) 
 - public void testCompressedCommitLogBackpressure ( ) throws Throwable 
 - { 
 - / / Perform all initialization before making CommitLog . Sync blocking 
 - / / Doing the initialization within the method guarantee that Byteman has performed its injections when we start 
 - new Random ( ) . nextBytes ( entropy ) ; 
 - DatabaseDescriptor . setCommitLogCompression ( new ParameterizedClass ( " LZ4Compressor " , ImmutableMap . of ( ) ) ) ; 
 - DatabaseDescriptor . setCommitLogSegmentSize ( 1 ) ; 
 - DatabaseDescriptor . setCommitLogSync ( CommitLogSync . periodic ) ; 
 - DatabaseDescriptor . setCommitLogSyncPeriod ( 10 * 1000 ) ; 
 - SchemaLoader . prepareServer ( ) ; 
 - SchemaLoader . createKeyspace ( KEYSPACE1 , 
 - KeyspaceParams . simple ( 1 ) , 
 - SchemaLoader . standardCFMD ( KEYSPACE1 , STANDARD1 , 0 , AsciiType . instance , BytesType . instance ) , 
 - SchemaLoader . standardCFMD ( KEYSPACE1 , STANDARD2 , 0 , AsciiType . instance , BytesType . instance ) ) ; 
 - 
 - CompactionManager . instance . disableAutoCompaction ( ) ; 
 - 
 - ColumnFamilyStore cfs1 = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( STANDARD1 ) ; 
 - 
 - final Mutation m = new RowUpdateBuilder ( cfs1 . metadata , 0 , " k " ) . clustering ( " bytes " ) 
 - . add ( " val " , ByteBuffer . wrap ( entropy ) ) 
 - . build ( ) ; 
 - 
 - Thread dummyThread = new Thread ( ( ) - > { 
 - for ( int i = 0 ; i < 20 ; i + + ) 
 - CommitLog . instance . add ( m ) ; 
 - } ) ; 
 - 
 - try 
 - { 
 - / / Makes sure any call to CommitLog . sync is blocking 
 - allowSync . acquire ( ) ; 
 - 
 - dummyThread . start ( ) ; 
 - 
 - CommitLogSegmentManager clsm = CommitLog . instance . allocator ; 
 - 
 - Util . spinAssertEquals ( 3 , ( ) - > clsm . getActiveSegments ( ) . size ( ) , 5 ) ; 
 - 
 - Thread . sleep ( 1000 ) ; 
 - 
 - / / Should only be able to create 3 segments ( not 7 ) because it blocks waiting for truncation that never 
 - / / comes . 
 - Assert . assertEquals ( 3 , clsm . getActiveSegments ( ) . size ( ) ) ; 
 - 
 - clsm . getActiveSegments ( ) . forEach ( segment - > clsm . recycleSegment ( segment ) ) ; 
 - 
 - Util . spinAssertEquals ( 3 , ( ) - > clsm . getActiveSegments ( ) . size ( ) , 5 ) ; 
 - } 
 - finally 
 - { 
 - / / Allow the CommitLog . sync to perform normally . 
 - allowSync . release ( ) ; 
 - } 
 - try 
 - { 
 - / / Wait for the dummy thread to die 
 - dummyThread . join ( ) ; 
 - } 
 - catch ( InterruptedException e ) 
 - { 
 - Thread . currentThread ( ) . interrupt ( ) ; 
 - } 
 - } 
 - 
 - @ Test 
 - @ BMRule ( name = " Make removing commitlog segments slow " , 
 - targetClass = " CommitLogSegment " , 
 - targetMethod = " discard " , 
 - action = " Thread . sleep ( 50 ) " ) 
 - public void testShutdownWithPendingTasks ( ) throws Throwable { 
 - CommitLog . instance . resetUnsafe ( true ) ; 
 - ColumnFamilyStore cfs1 = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( STANDARD1 ) ; 
 - 
 - final Mutation m = new RowUpdateBuilder ( cfs1 . metadata , 0 , " k " ) 
 - . clustering ( " bytes " ) 
 - . add ( " val " , ByteBuffer . wrap ( entropy ) ) 
 - . build ( ) ; 
 - 
 - / / force creating several commitlog files 
 - for ( int i = 0 ; i < 10 ; i + + ) { 
 - CommitLog . instance . add ( m ) ; 
 - } 
 - 
 - / / schedule discarding completed segments and immediately issue a shutdown 
 - UUID cfid = m . getColumnFamilyIds ( ) . iterator ( ) . next ( ) ; 
 - CommitLog . instance . discardCompletedSegments ( cfid , ReplayPosition . NONE , CommitLog . instance . getContext ( ) ) ; 
 - CommitLog . instance . shutdownBlocking ( ) ; 
 - 
 - / / the shutdown should block until all logs except the currently active one and perhaps a new , empty one are gone 
 - Assert . assertTrue ( new File ( CommitLog . instance . location ) . listFiles ( ) . length < = 2 ) ; 
 - } 
 - } 
 diff - - git a / test / unit / org / apache / cassandra / db / commitlog / CommitlogShutdownTest . java b / test / unit / org / apache / cassandra / db / commitlog / CommitlogShutdownTest . java 
 new file mode 100644 
 index 0000000 . . ee3f111 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / db / commitlog / CommitlogShutdownTest . java 
 @ @ - 0 , 0 + 1 , 98 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . db . commitlog ; 
 + 
 + import java . io . File ; 
 + import java . nio . ByteBuffer ; 
 + import java . util . Random ; 
 + import java . util . UUID ; 
 + 
 + import com . google . common . collect . ImmutableMap ; 
 + import org . junit . Assert ; 
 + import org . junit . Test ; 
 + import org . junit . runner . RunWith ; 
 + 
 + import org . apache . cassandra . SchemaLoader ; 
 + import org . apache . cassandra . config . Config ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . config . ParameterizedClass ; 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . db . Keyspace ; 
 + import org . apache . cassandra . db . Mutation ; 
 + import org . apache . cassandra . db . RowUpdateBuilder ; 
 + import org . apache . cassandra . db . compaction . CompactionManager ; 
 + import org . apache . cassandra . db . marshal . AsciiType ; 
 + import org . apache . cassandra . db . marshal . BytesType ; 
 + import org . apache . cassandra . schema . KeyspaceParams ; 
 + import org . jboss . byteman . contrib . bmunit . BMRule ; 
 + import org . jboss . byteman . contrib . bmunit . BMUnitRunner ; 
 + 
 + / * * 
 + * Since this test depends on byteman rules being setup during initialization , you shouldn ' t add tests to this class 
 + * / 
 + @ RunWith ( BMUnitRunner . class ) 
 + public class CommitlogShutdownTest 
 + { 
 + private static final String KEYSPACE1 = " CommitLogTest " ; 
 + private static final String STANDARD1 = " Standard1 " ; 
 + 
 + private final static byte [ ] entropy = new byte [ 1024 * 256 ] ; 
 + 
 + @ Test 
 + @ BMRule ( name = " Make removing commitlog segments slow " , 
 + targetClass = " CommitLogSegment " , 
 + targetMethod = " discard " , 
 + action = " Thread . sleep ( 50 ) " ) 
 + public void testShutdownWithPendingTasks ( ) throws Exception 
 + { 
 + new Random ( ) . nextBytes ( entropy ) ; 
 + DatabaseDescriptor . setCommitLogCompression ( new ParameterizedClass ( " LZ4Compressor " , ImmutableMap . of ( ) ) ) ; 
 + DatabaseDescriptor . setCommitLogSegmentSize ( 1 ) ; 
 + DatabaseDescriptor . setCommitLogSync ( Config . CommitLogSync . periodic ) ; 
 + DatabaseDescriptor . setCommitLogSyncPeriod ( 10 * 1000 ) ; 
 + SchemaLoader . prepareServer ( ) ; 
 + SchemaLoader . createKeyspace ( KEYSPACE1 , 
 + KeyspaceParams . simple ( 1 ) , 
 + SchemaLoader . standardCFMD ( KEYSPACE1 , STANDARD1 , 0 , AsciiType . instance , BytesType . instance ) ) ; 
 + 
 + CompactionManager . instance . disableAutoCompaction ( ) ; 
 + 
 + CommitLog . instance . resetUnsafe ( true ) ; 
 + ColumnFamilyStore cfs1 = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( STANDARD1 ) ; 
 + 
 + final Mutation m = new RowUpdateBuilder ( cfs1 . metadata , 0 , " k " ) 
 + . clustering ( " bytes " ) 
 + . add ( " val " , ByteBuffer . wrap ( entropy ) ) 
 + . build ( ) ; 
 + 
 + / / force creating several commitlog files 
 + for ( int i = 0 ; i < 10 ; i + + ) 
 + { 
 + CommitLog . instance . add ( m ) ; 
 + } 
 + 
 + / / schedule discarding completed segments and immediately issue a shutdown 
 + UUID cfid = m . getColumnFamilyIds ( ) . iterator ( ) . next ( ) ; 
 + CommitLog . instance . discardCompletedSegments ( cfid , ReplayPosition . NONE , CommitLog . instance . getContext ( ) ) ; 
 + CommitLog . instance . shutdownBlocking ( ) ; 
 + 
 + / / the shutdown should block until all logs except the currently active one and perhaps a new , empty one are gone 
 + Assert . assertTrue ( new File ( CommitLog . instance . location ) . listFiles ( ) . length < = 2 ) ; 
 + } 
 + }

NEAREST DIFF:
ELIMINATEDSENTENCE
