BLEU SCORE: 0.027611988917697356

TEST MSG: More fixes to connection error handling in CqlRecordWriter
GENERATED MSG: merge from 2 . 1

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordWriter . java b / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordWriter . java <nl> index c507197 . . 91753a2 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordWriter . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordWriter . java <nl> @ @ - 26 , 30 + 26 , 18 @ @ import java . util . concurrent . * ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - <nl> - import com . datastax . driver . core . exceptions . AuthenticationException ; <nl> - import com . datastax . driver . core . exceptions . DriverException ; <nl> - import com . datastax . driver . core . exceptions . InvalidQueryException ; <nl> - import com . datastax . driver . core . exceptions . NoHostAvailableException ; <nl> - import com . datastax . driver . core . BoundStatement ; <nl> - import com . datastax . driver . core . ColumnMetadata ; <nl> - import com . datastax . driver . core . Host ; <nl> - import com . datastax . driver . core . Metadata ; <nl> - import com . datastax . driver . core . PreparedStatement ; <nl> - import com . datastax . driver . core . Session ; <nl> - import com . datastax . driver . core . TableMetadata ; <nl> - import com . datastax . driver . core . TokenRange ; <nl> - import org . apache . cassandra . db . marshal . AbstractType ; <nl> + import com . datastax . driver . core . * ; <nl> + import com . datastax . driver . core . exceptions . * ; <nl> import org . apache . cassandra . db . marshal . CompositeType ; <nl> - import org . apache . cassandra . db . marshal . LongType ; <nl> - import org . apache . cassandra . db . marshal . TypeParser ; <nl> - import org . apache . cassandra . dht . * ; <nl> - import org . apache . cassandra . exceptions . ConfigurationException ; <nl> - import org . apache . cassandra . exceptions . SyntaxException ; <nl> - import org . apache . cassandra . hadoop . * ; <nl> - import org . apache . cassandra . utils . * ; <nl> + import org . apache . cassandra . dht . IPartitioner ; <nl> + import org . apache . cassandra . dht . Token ; <nl> + import org . apache . cassandra . hadoop . ColumnFamilyOutputFormat ; <nl> + import org . apache . cassandra . hadoop . ConfigHelper ; <nl> + import org . apache . cassandra . hadoop . HadoopCompat ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . hadoop . conf . Configuration ; <nl> - import org . apache . hadoop . mapreduce . * ; <nl> + import org . apache . hadoop . mapreduce . RecordWriter ; <nl> + import org . apache . hadoop . mapreduce . TaskAttemptContext ; <nl> import org . apache . hadoop . util . Progressable ; <nl> <nl> / * * <nl> @ @ - 214 , 7 + 202 , 7 @ @ class CqlRecordWriter extends RecordWriter < Map < String , ByteBuffer > , List < ByteBuf <nl> TokenRange range = ringCache . getRange ( getPartitionKey ( keyColumns ) ) ; <nl> <nl> / / get the client for the given range , or create a new one <nl> - 	 final InetAddress address = ringCache . getEndpoints ( range ) . get ( 0 ) ; <nl> + final InetAddress address = ringCache . getEndpoints ( range ) . get ( 0 ) ; <nl> RangeClient client = clients . get ( address ) ; <nl> if ( client = = null ) <nl> { <nl> @ @ - 325 , 8 + 313 , 8 @ @ class CqlRecordWriter extends RecordWriter < Map < String , ByteBuffer > , List < ByteBuf <nl> / / There are too many ways for the Thread . interrupted ( ) state to be cleared , so <nl> / / we can ' t rely on that here . Until the java driver gives us a better way of knowing <nl> / / that this exception came from an InterruptedException , this is the best solution . <nl> - if ( e instanceof DriverException & & e . getMessage ( ) . contains ( " Connection thread interrupted " ) ) { <nl> - lastException = new IOException ( e ) ; <nl> + if ( canRetryDriverConnection ( e ) ) <nl> + { <nl> iter . previous ( ) ; <nl> } <nl> closeInternal ( ) ; <nl> @ @ - 417 , 7 + 405 , 6 @ @ class CqlRecordWriter extends RecordWriter < Map < String , ByteBuffer > , List < ByteBuf <nl> throw lastException ; <nl> } <nl> <nl> - <nl> protected void closeInternal ( ) <nl> { <nl> if ( client ! = null ) <nl> @ @ - 425 , 6 + 412 , 24 @ @ class CqlRecordWriter extends RecordWriter < Map < String , ByteBuffer > , List < ByteBuf <nl> client . close ( ) ; ; <nl> } <nl> } <nl> + <nl> + private boolean canRetryDriverConnection ( Exception e ) <nl> + { <nl> + if ( e instanceof DriverException & & e . getMessage ( ) . contains ( " Connection thread interrupted " ) ) <nl> + return true ; <nl> + if ( e instanceof NoHostAvailableException ) <nl> + { <nl> + if ( ( ( NoHostAvailableException ) e ) . getErrors ( ) . values ( ) . size ( ) = = 1 ) <nl> + { <nl> + Throwable cause = ( ( NoHostAvailableException ) e ) . getErrors ( ) . values ( ) . iterator ( ) . next ( ) ; <nl> + if ( cause ! = null & & cause . getCause ( ) instanceof java . nio . channels . ClosedByInterruptException ) <nl> + { <nl> + return true ; <nl> + } <nl> + } <nl> + } <nl> + return false ; <nl> + } <nl> } <nl> <nl> private ByteBuffer getPartitionKey ( Map < String , ByteBuffer > keyColumns )
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordWriter . java b / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordWriter . java 
 index c507197 . . 91753a2 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordWriter . java 
 + + + b / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordWriter . java 
 @ @ - 26 , 30 + 26 , 18 @ @ import java . util . concurrent . * ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - 
 - import com . datastax . driver . core . exceptions . AuthenticationException ; 
 - import com . datastax . driver . core . exceptions . DriverException ; 
 - import com . datastax . driver . core . exceptions . InvalidQueryException ; 
 - import com . datastax . driver . core . exceptions . NoHostAvailableException ; 
 - import com . datastax . driver . core . BoundStatement ; 
 - import com . datastax . driver . core . ColumnMetadata ; 
 - import com . datastax . driver . core . Host ; 
 - import com . datastax . driver . core . Metadata ; 
 - import com . datastax . driver . core . PreparedStatement ; 
 - import com . datastax . driver . core . Session ; 
 - import com . datastax . driver . core . TableMetadata ; 
 - import com . datastax . driver . core . TokenRange ; 
 - import org . apache . cassandra . db . marshal . AbstractType ; 
 + import com . datastax . driver . core . * ; 
 + import com . datastax . driver . core . exceptions . * ; 
 import org . apache . cassandra . db . marshal . CompositeType ; 
 - import org . apache . cassandra . db . marshal . LongType ; 
 - import org . apache . cassandra . db . marshal . TypeParser ; 
 - import org . apache . cassandra . dht . * ; 
 - import org . apache . cassandra . exceptions . ConfigurationException ; 
 - import org . apache . cassandra . exceptions . SyntaxException ; 
 - import org . apache . cassandra . hadoop . * ; 
 - import org . apache . cassandra . utils . * ; 
 + import org . apache . cassandra . dht . IPartitioner ; 
 + import org . apache . cassandra . dht . Token ; 
 + import org . apache . cassandra . hadoop . ColumnFamilyOutputFormat ; 
 + import org . apache . cassandra . hadoop . ConfigHelper ; 
 + import org . apache . cassandra . hadoop . HadoopCompat ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . hadoop . conf . Configuration ; 
 - import org . apache . hadoop . mapreduce . * ; 
 + import org . apache . hadoop . mapreduce . RecordWriter ; 
 + import org . apache . hadoop . mapreduce . TaskAttemptContext ; 
 import org . apache . hadoop . util . Progressable ; 
 
 / * * 
 @ @ - 214 , 7 + 202 , 7 @ @ class CqlRecordWriter extends RecordWriter < Map < String , ByteBuffer > , List < ByteBuf 
 TokenRange range = ringCache . getRange ( getPartitionKey ( keyColumns ) ) ; 
 
 / / get the client for the given range , or create a new one 
 - 	 final InetAddress address = ringCache . getEndpoints ( range ) . get ( 0 ) ; 
 + final InetAddress address = ringCache . getEndpoints ( range ) . get ( 0 ) ; 
 RangeClient client = clients . get ( address ) ; 
 if ( client = = null ) 
 { 
 @ @ - 325 , 8 + 313 , 8 @ @ class CqlRecordWriter extends RecordWriter < Map < String , ByteBuffer > , List < ByteBuf 
 / / There are too many ways for the Thread . interrupted ( ) state to be cleared , so 
 / / we can ' t rely on that here . Until the java driver gives us a better way of knowing 
 / / that this exception came from an InterruptedException , this is the best solution . 
 - if ( e instanceof DriverException & & e . getMessage ( ) . contains ( " Connection thread interrupted " ) ) { 
 - lastException = new IOException ( e ) ; 
 + if ( canRetryDriverConnection ( e ) ) 
 + { 
 iter . previous ( ) ; 
 } 
 closeInternal ( ) ; 
 @ @ - 417 , 7 + 405 , 6 @ @ class CqlRecordWriter extends RecordWriter < Map < String , ByteBuffer > , List < ByteBuf 
 throw lastException ; 
 } 
 
 - 
 protected void closeInternal ( ) 
 { 
 if ( client ! = null ) 
 @ @ - 425 , 6 + 412 , 24 @ @ class CqlRecordWriter extends RecordWriter < Map < String , ByteBuffer > , List < ByteBuf 
 client . close ( ) ; ; 
 } 
 } 
 + 
 + private boolean canRetryDriverConnection ( Exception e ) 
 + { 
 + if ( e instanceof DriverException & & e . getMessage ( ) . contains ( " Connection thread interrupted " ) ) 
 + return true ; 
 + if ( e instanceof NoHostAvailableException ) 
 + { 
 + if ( ( ( NoHostAvailableException ) e ) . getErrors ( ) . values ( ) . size ( ) = = 1 ) 
 + { 
 + Throwable cause = ( ( NoHostAvailableException ) e ) . getErrors ( ) . values ( ) . iterator ( ) . next ( ) ; 
 + if ( cause ! = null & & cause . getCause ( ) instanceof java . nio . channels . ClosedByInterruptException ) 
 + { 
 + return true ; 
 + } 
 + } 
 + } 
 + return false ; 
 + } 
 } 
 
 private ByteBuffer getPartitionKey ( Map < String , ByteBuffer > keyColumns )

NEAREST DIFF:
ELIMINATEDSENTENCE
