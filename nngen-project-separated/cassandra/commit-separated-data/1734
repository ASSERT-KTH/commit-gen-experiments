BLEU SCORE: 0.02139089632303349

TEST MSG: follow up to CASSANDRA - 8670 :
GENERATED MSG: reduce window where dropped CF sstables may not be deleted

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> index 7fa7575 . . cf38d44 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> @ @ - 29 , 10 + 29 , 10 @ @ import com . google . common . annotations . VisibleForTesting ; <nl> <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> - <nl> import org . apache . commons . lang3 . StringUtils ; <nl> <nl> import com . github . tjake . ICRC32 ; <nl> + <nl> import org . apache . cassandra . config . Config ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . ParameterizedClass ; <nl> @ @ - 41 , 6 + 41 , 7 @ @ import org . apache . cassandra . io . FSWriteError ; <nl> import org . apache . cassandra . io . compress . CompressionParameters ; <nl> import org . apache . cassandra . io . compress . ICompressor ; <nl> import org . apache . cassandra . io . util . BufferedDataOutputStreamPlus ; <nl> + import org . apache . cassandra . io . util . DataOutputBufferFixed ; <nl> import org . apache . cassandra . metrics . CommitLogMetrics ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . service . StorageService ; <nl> @ @ - 251 , 7 + 252 , 7 @ @ public class CommitLog implements CommitLogMBean <nl> { <nl> ICRC32 checksum = CRC32Factory . instance . create ( ) ; <nl> final ByteBuffer buffer = alloc . getBuffer ( ) ; <nl> - BufferedDataOutputStreamPlus dos = new BufferedDataOutputStreamPlus ( null , buffer ) ; <nl> + BufferedDataOutputStreamPlus dos = new DataOutputBufferFixed ( buffer ) ; <nl> <nl> / / checksummed length <nl> dos . writeInt ( ( int ) size ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / CompositeType . java b / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> index 9ee9fb3 . . 1bc772d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ import org . apache . cassandra . exceptions . SyntaxException ; <nl> import org . apache . cassandra . cql3 . ColumnIdentifier ; <nl> import org . apache . cassandra . cql3 . Operator ; <nl> import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> + import org . apache . cassandra . io . util . DataOutputBufferFixed ; <nl> import org . apache . cassandra . serializers . MarshalException ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> @ @ - 403 , 7 + 404 , 7 @ @ public class CompositeType extends AbstractCompositeType <nl> { <nl> try <nl> { <nl> - DataOutputBuffer out = new DataOutputBuffer ( serializedSize ) ; <nl> + DataOutputBuffer out = new DataOutputBufferFixed ( serializedSize ) ; <nl> if ( isStatic ) <nl> out . writeShort ( STATIC _ MARKER ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / util / BufferedDataOutputStreamPlus . java b / src / java / org / apache / cassandra / io / util / BufferedDataOutputStreamPlus . java <nl> index f4f46a1 . . 5669a8d 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / BufferedDataOutputStreamPlus . java <nl> + + + b / src / java / org / apache / cassandra / io / util / BufferedDataOutputStreamPlus . java <nl> @ @ - 75 , 13 + 75 , 13 @ @ public class BufferedDataOutputStreamPlus extends DataOutputStreamPlus <nl> Preconditions . checkArgument ( bufferSize > = 8 , " Buffer size must be large enough to accommodate a long / double " ) ; <nl> } <nl> <nl> - public BufferedDataOutputStreamPlus ( WritableByteChannel channel , ByteBuffer buffer ) <nl> + protected BufferedDataOutputStreamPlus ( WritableByteChannel channel , ByteBuffer buffer ) <nl> { <nl> super ( channel ) ; <nl> this . buffer = buffer ; <nl> } <nl> <nl> - public BufferedDataOutputStreamPlus ( ByteBuffer buffer ) <nl> + protected BufferedDataOutputStreamPlus ( ByteBuffer buffer ) <nl> { <nl> super ( ) ; <nl> this . buffer = buffer ; <nl> diff - - git a / src / java / org / apache / cassandra / io / util / DataOutputBufferFixed . java b / src / java / org / apache / cassandra / io / util / DataOutputBufferFixed . java <nl> new file mode 100644 <nl> index 0000000 . . fb8d671 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / io / util / DataOutputBufferFixed . java <nl> @ @ - 0 , 0 + 1 , 65 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . io . util ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . nio . BufferOverflowException ; <nl> + import java . nio . ByteBuffer ; <nl> + <nl> + <nl> + / * * <nl> + * An implementation of the DataOutputStream interface using a FastByteArrayOutputStream and exposing <nl> + * its buffer so copies can be avoided . This version does not expand if it runs out of capacity and <nl> + * throws BufferOverflowException instead . <nl> + * <nl> + * This class is completely thread unsafe . <nl> + * / <nl> + public class DataOutputBufferFixed extends DataOutputBuffer <nl> + { <nl> + public DataOutputBufferFixed ( ) <nl> + { <nl> + this ( 128 ) ; <nl> + } <nl> + <nl> + public DataOutputBufferFixed ( int size ) <nl> + { <nl> + super ( ByteBuffer . allocate ( size ) ) ; <nl> + } <nl> + <nl> + public DataOutputBufferFixed ( ByteBuffer buffer ) <nl> + { <nl> + super ( buffer ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void doFlush ( ) throws IOException <nl> + { <nl> + throw new BufferOverflowException ( ) ; <nl> + } <nl> + <nl> + / * <nl> + * Not currently reachable ( all paths hit doFLush first ) , but in the spirit of things this should throw <nl> + * if it is called . <nl> + * @ see org . apache . cassandra . io . util . DataOutputBuffer # reallocate ( long ) <nl> + * / <nl> + @ Override <nl> + protected void reallocate ( long newSize ) <nl> + { <nl> + throw new BufferOverflowException ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / service / pager / PagingState . java b / src / java / org / apache / cassandra / service / pager / PagingState . java <nl> index 43d3cb8 . . ff461ab 100644 <nl> - - - a / src / java / org / apache / cassandra / service / pager / PagingState . java <nl> + + + b / src / java / org / apache / cassandra / service / pager / PagingState . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> <nl> import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> + import org . apache . cassandra . io . util . DataOutputBufferFixed ; <nl> import org . apache . cassandra . transport . ProtocolException ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> @ @ - 61 , 7 + 62 , 7 @ @ public class PagingState <nl> { <nl> try <nl> { <nl> - DataOutputBuffer out = new DataOutputBuffer ( serializedSize ( ) ) ; <nl> + DataOutputBuffer out = new DataOutputBufferFixed ( serializedSize ( ) ) ; <nl> ByteBufferUtil . writeWithShortLength ( partitionKey , out ) ; <nl> ByteBufferUtil . writeWithShortLength ( cellName , out ) ; <nl> out . writeInt ( remaining ) ; <nl> diff - - git a / src / java / org / apache / cassandra / streaming / messages / StreamInitMessage . java b / src / java / org / apache / cassandra / streaming / messages / StreamInitMessage . java <nl> index 0937f71 . . 03ac944 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / messages / StreamInitMessage . java <nl> + + + b / src / java / org / apache / cassandra / streaming / messages / StreamInitMessage . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . util . UUID ; <nl> import org . apache . cassandra . db . TypeSizes ; <nl> import org . apache . cassandra . io . IVersionedSerializer ; <nl> import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> + import org . apache . cassandra . io . util . DataOutputBufferFixed ; <nl> import org . apache . cassandra . io . util . DataOutputPlus ; <nl> import org . apache . cassandra . net . CompactEndpointSerializationHelper ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> @ @ - 80 , 7 + 81 , 7 @ @ public class StreamInitMessage <nl> try <nl> { <nl> int size = ( int ) StreamInitMessage . serializer . serializedSize ( this , version ) ; <nl> - DataOutputBuffer buffer = new DataOutputBuffer ( size ) ; <nl> + DataOutputBuffer buffer = new DataOutputBufferFixed ( size ) ; <nl> StreamInitMessage . serializer . serialize ( this , buffer , version ) ; <nl> bytes = buffer . getData ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> index be7cbd8 . . dd54ae1 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> @ @ - 49 , 6 + 49 , 7 @ @ import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . io . IVersionedSerializer ; <nl> import org . apache . cassandra . io . compress . CompressionParameters ; <nl> import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> + import org . apache . cassandra . io . util . DataOutputBufferFixed ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . net . AsyncOneResponse ; <nl> import org . apache . thrift . * ; <nl> @ @ - 719 , 7 + 720 , 7 @ @ public class FBUtilities <nl> try <nl> { <nl> int size = ( int ) serializer . serializedSize ( object , version ) ; <nl> - DataOutputBuffer buffer = new DataOutputBuffer ( size ) ; <nl> + DataOutputBuffer buffer = new DataOutputBufferFixed ( size ) ; <nl> serializer . serialize ( object , buffer , version ) ; <nl> assert buffer . getLength ( ) = = size & & buffer . getData ( ) . length = = size <nl> : String . format ( " Final buffer length % s to accommodate data size of % s ( predicted % s ) for % s " , <nl> diff - - git a / test / unit / org / apache / cassandra / io / util / BufferedDataOutputStreamTest . java b / test / unit / org / apache / cassandra / io / util / BufferedDataOutputStreamTest . java <nl> index 8eaea31 . . f5b239c 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / util / BufferedDataOutputStreamTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / util / BufferedDataOutputStreamTest . java <nl> @ @ - 6 , 16 + 6 , 55 @ @ import java . io . IOException ; <nl> import java . io . OutputStream ; <nl> import java . io . UTFDataFormatException ; <nl> import java . lang . reflect . Field ; <nl> + import java . nio . BufferOverflowException ; <nl> import java . nio . ByteBuffer ; <nl> import java . nio . channels . WritableByteChannel ; <nl> import java . util . Random ; <nl> <nl> import org . junit . Test ; <nl> <nl> + import com . google . common . base . Throwables ; <nl> + <nl> import static org . junit . Assert . * ; <nl> <nl> public class BufferedDataOutputStreamTest <nl> { <nl> + <nl> + @ Test ( expected = BufferOverflowException . class ) <nl> + public void testDataOutputBufferFixedByes ( ) throws Exception <nl> + { <nl> + try ( DataOutputBufferFixed dob = new DataOutputBufferFixed ( ) ) <nl> + { <nl> + try <nl> + { <nl> + for ( int ii = 0 ; ii < 128 ; ii + + ) <nl> + dob . write ( 0 ) ; <nl> + } <nl> + catch ( BufferOverflowException e ) <nl> + { <nl> + fail ( " Should not throw BufferOverflowException yet " ) ; <nl> + } <nl> + dob . write ( 0 ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test ( expected = BufferOverflowException . class ) <nl> + public void testDataOutputBufferFixedByteBuffer ( ) throws Exception <nl> + { <nl> + try ( DataOutputBufferFixed dob = new DataOutputBufferFixed ( ) ) <nl> + { <nl> + try <nl> + { <nl> + dob . write ( ByteBuffer . allocateDirect ( 128 ) ) ; <nl> + } <nl> + catch ( BufferOverflowException e ) <nl> + { <nl> + fail ( " Should not throw BufferOverflowException yet " ) ; <nl> + } <nl> + dob . write ( ByteBuffer . allocateDirect ( 1 ) ) ; <nl> + } <nl> + } <nl> + <nl> WritableByteChannel adapter = new WritableByteChannel ( ) <nl> { <nl>
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index cf4cff7 . . 4eb0642 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 38 , 6 + 38 , 8 @ @ <nl> * fix parsing of the Keyspace and ColumnFamily names in numeric <nl> and string representations in CLI ( CASSANDRA - 3075 ) <nl> * always hint counters ( CASSANDRA - 3099 ) <nl> + * fix log4j initialization in EmbeddedCassandraService ( CASSANDRA - 2857 ) <nl> + <nl> <nl> 0 . 8 . 4 <nl> * include files - to - be - streamed in StreamInSession . getSources ( CASSANDRA - 2972 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java b / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java <nl> index 203ecc8 . . ea2391d 100644 <nl> - - - a / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java <nl> @ @ - 62 , 17 + 62 , 19 @ @ import org . apache . cassandra . utils . Mx4jTool ; <nl> * / <nl> public abstract class AbstractCassandraDaemon implements CassandraDaemon <nl> { <nl> - / / Initialize logging in such a way that it checks for config changes every 10 seconds . <nl> - static <nl> + / * * <nl> + * Initialize logging in such a way that it checks for config changes every 10 seconds . <nl> + * / <nl> + public static void initLog4j ( ) <nl> { <nl> String config = System . getProperty ( " log4j . configuration " , " log4j - server . properties " ) ; <nl> URL configLocation = null ; <nl> - try <nl> + try <nl> { <nl> / / try loading from a physical location first . <nl> configLocation = new URL ( config ) ; <nl> } <nl> - catch ( MalformedURLException ex ) <nl> + catch ( MalformedURLException ex ) <nl> { <nl> / / then try loading from the classpath . <nl> configLocation = AbstractCassandraDaemon . class . getClassLoader ( ) . getResource ( config ) ; <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java <nl> index 8738470 . . 6d7d818 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . LinkedBlockingQueue ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> + import org . apache . cassandra . service . AbstractCassandraDaemon ; <nl> import org . apache . thrift . server . TNonblockingServer ; <nl> import org . apache . thrift . server . TThreadPoolServer ; <nl> import org . slf4j . Logger ; <nl> @ @ - 53 , 6 + 54 , 11 @ @ import org . apache . thrift . transport . TTransportFactory ; <nl> <nl> public class CassandraDaemon extends org . apache . cassandra . service . AbstractCassandraDaemon <nl> { <nl> + static <nl> + { <nl> + AbstractCassandraDaemon . initLog4j ( ) ; <nl> + } <nl> + <nl> private static Logger logger = LoggerFactory . getLogger ( CassandraDaemon . class ) ; <nl> private final static String SYNC = " sync " ; <nl> private final static String ASYNC = " async " ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 index 7fa7575 . . cf38d44 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 @ @ - 29 , 10 + 29 , 10 @ @ import com . google . common . annotations . VisibleForTesting ; 
 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 - 
 import org . apache . commons . lang3 . StringUtils ; 
 
 import com . github . tjake . ICRC32 ; 
 + 
 import org . apache . cassandra . config . Config ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . ParameterizedClass ; 
 @ @ - 41 , 6 + 41 , 7 @ @ import org . apache . cassandra . io . FSWriteError ; 
 import org . apache . cassandra . io . compress . CompressionParameters ; 
 import org . apache . cassandra . io . compress . ICompressor ; 
 import org . apache . cassandra . io . util . BufferedDataOutputStreamPlus ; 
 + import org . apache . cassandra . io . util . DataOutputBufferFixed ; 
 import org . apache . cassandra . metrics . CommitLogMetrics ; 
 import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . service . StorageService ; 
 @ @ - 251 , 7 + 252 , 7 @ @ public class CommitLog implements CommitLogMBean 
 { 
 ICRC32 checksum = CRC32Factory . instance . create ( ) ; 
 final ByteBuffer buffer = alloc . getBuffer ( ) ; 
 - BufferedDataOutputStreamPlus dos = new BufferedDataOutputStreamPlus ( null , buffer ) ; 
 + BufferedDataOutputStreamPlus dos = new DataOutputBufferFixed ( buffer ) ; 
 
 / / checksummed length 
 dos . writeInt ( ( int ) size ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / CompositeType . java b / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 index 9ee9fb3 . . 1bc772d 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 @ @ - 32 , 6 + 32 , 7 @ @ import org . apache . cassandra . exceptions . SyntaxException ; 
 import org . apache . cassandra . cql3 . ColumnIdentifier ; 
 import org . apache . cassandra . cql3 . Operator ; 
 import org . apache . cassandra . io . util . DataOutputBuffer ; 
 + import org . apache . cassandra . io . util . DataOutputBufferFixed ; 
 import org . apache . cassandra . serializers . MarshalException ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 @ @ - 403 , 7 + 404 , 7 @ @ public class CompositeType extends AbstractCompositeType 
 { 
 try 
 { 
 - DataOutputBuffer out = new DataOutputBuffer ( serializedSize ) ; 
 + DataOutputBuffer out = new DataOutputBufferFixed ( serializedSize ) ; 
 if ( isStatic ) 
 out . writeShort ( STATIC _ MARKER ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / io / util / BufferedDataOutputStreamPlus . java b / src / java / org / apache / cassandra / io / util / BufferedDataOutputStreamPlus . java 
 index f4f46a1 . . 5669a8d 100644 
 - - - a / src / java / org / apache / cassandra / io / util / BufferedDataOutputStreamPlus . java 
 + + + b / src / java / org / apache / cassandra / io / util / BufferedDataOutputStreamPlus . java 
 @ @ - 75 , 13 + 75 , 13 @ @ public class BufferedDataOutputStreamPlus extends DataOutputStreamPlus 
 Preconditions . checkArgument ( bufferSize > = 8 , " Buffer size must be large enough to accommodate a long / double " ) ; 
 } 
 
 - public BufferedDataOutputStreamPlus ( WritableByteChannel channel , ByteBuffer buffer ) 
 + protected BufferedDataOutputStreamPlus ( WritableByteChannel channel , ByteBuffer buffer ) 
 { 
 super ( channel ) ; 
 this . buffer = buffer ; 
 } 
 
 - public BufferedDataOutputStreamPlus ( ByteBuffer buffer ) 
 + protected BufferedDataOutputStreamPlus ( ByteBuffer buffer ) 
 { 
 super ( ) ; 
 this . buffer = buffer ; 
 diff - - git a / src / java / org / apache / cassandra / io / util / DataOutputBufferFixed . java b / src / java / org / apache / cassandra / io / util / DataOutputBufferFixed . java 
 new file mode 100644 
 index 0000000 . . fb8d671 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / io / util / DataOutputBufferFixed . java 
 @ @ - 0 , 0 + 1 , 65 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . io . util ; 
 + 
 + import java . io . IOException ; 
 + import java . nio . BufferOverflowException ; 
 + import java . nio . ByteBuffer ; 
 + 
 + 
 + / * * 
 + * An implementation of the DataOutputStream interface using a FastByteArrayOutputStream and exposing 
 + * its buffer so copies can be avoided . This version does not expand if it runs out of capacity and 
 + * throws BufferOverflowException instead . 
 + * 
 + * This class is completely thread unsafe . 
 + * / 
 + public class DataOutputBufferFixed extends DataOutputBuffer 
 + { 
 + public DataOutputBufferFixed ( ) 
 + { 
 + this ( 128 ) ; 
 + } 
 + 
 + public DataOutputBufferFixed ( int size ) 
 + { 
 + super ( ByteBuffer . allocate ( size ) ) ; 
 + } 
 + 
 + public DataOutputBufferFixed ( ByteBuffer buffer ) 
 + { 
 + super ( buffer ) ; 
 + } 
 + 
 + @ Override 
 + protected void doFlush ( ) throws IOException 
 + { 
 + throw new BufferOverflowException ( ) ; 
 + } 
 + 
 + / * 
 + * Not currently reachable ( all paths hit doFLush first ) , but in the spirit of things this should throw 
 + * if it is called . 
 + * @ see org . apache . cassandra . io . util . DataOutputBuffer # reallocate ( long ) 
 + * / 
 + @ Override 
 + protected void reallocate ( long newSize ) 
 + { 
 + throw new BufferOverflowException ( ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / service / pager / PagingState . java b / src / java / org / apache / cassandra / service / pager / PagingState . java 
 index 43d3cb8 . . ff461ab 100644 
 - - - a / src / java / org / apache / cassandra / service / pager / PagingState . java 
 + + + b / src / java / org / apache / cassandra / service / pager / PagingState . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 
 import org . apache . cassandra . io . util . DataOutputBuffer ; 
 + import org . apache . cassandra . io . util . DataOutputBufferFixed ; 
 import org . apache . cassandra . transport . ProtocolException ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 @ @ - 61 , 7 + 62 , 7 @ @ public class PagingState 
 { 
 try 
 { 
 - DataOutputBuffer out = new DataOutputBuffer ( serializedSize ( ) ) ; 
 + DataOutputBuffer out = new DataOutputBufferFixed ( serializedSize ( ) ) ; 
 ByteBufferUtil . writeWithShortLength ( partitionKey , out ) ; 
 ByteBufferUtil . writeWithShortLength ( cellName , out ) ; 
 out . writeInt ( remaining ) ; 
 diff - - git a / src / java / org / apache / cassandra / streaming / messages / StreamInitMessage . java b / src / java / org / apache / cassandra / streaming / messages / StreamInitMessage . java 
 index 0937f71 . . 03ac944 100644 
 - - - a / src / java / org / apache / cassandra / streaming / messages / StreamInitMessage . java 
 + + + b / src / java / org / apache / cassandra / streaming / messages / StreamInitMessage . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . util . UUID ; 
 import org . apache . cassandra . db . TypeSizes ; 
 import org . apache . cassandra . io . IVersionedSerializer ; 
 import org . apache . cassandra . io . util . DataOutputBuffer ; 
 + import org . apache . cassandra . io . util . DataOutputBufferFixed ; 
 import org . apache . cassandra . io . util . DataOutputPlus ; 
 import org . apache . cassandra . net . CompactEndpointSerializationHelper ; 
 import org . apache . cassandra . net . MessagingService ; 
 @ @ - 80 , 7 + 81 , 7 @ @ public class StreamInitMessage 
 try 
 { 
 int size = ( int ) StreamInitMessage . serializer . serializedSize ( this , version ) ; 
 - DataOutputBuffer buffer = new DataOutputBuffer ( size ) ; 
 + DataOutputBuffer buffer = new DataOutputBufferFixed ( size ) ; 
 StreamInitMessage . serializer . serialize ( this , buffer , version ) ; 
 bytes = buffer . getData ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 index be7cbd8 . . dd54ae1 100644 
 - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java 
 + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 @ @ - 49 , 6 + 49 , 7 @ @ import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . io . IVersionedSerializer ; 
 import org . apache . cassandra . io . compress . CompressionParameters ; 
 import org . apache . cassandra . io . util . DataOutputBuffer ; 
 + import org . apache . cassandra . io . util . DataOutputBufferFixed ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . net . AsyncOneResponse ; 
 import org . apache . thrift . * ; 
 @ @ - 719 , 7 + 720 , 7 @ @ public class FBUtilities 
 try 
 { 
 int size = ( int ) serializer . serializedSize ( object , version ) ; 
 - DataOutputBuffer buffer = new DataOutputBuffer ( size ) ; 
 + DataOutputBuffer buffer = new DataOutputBufferFixed ( size ) ; 
 serializer . serialize ( object , buffer , version ) ; 
 assert buffer . getLength ( ) = = size & & buffer . getData ( ) . length = = size 
 : String . format ( " Final buffer length % s to accommodate data size of % s ( predicted % s ) for % s " , 
 diff - - git a / test / unit / org / apache / cassandra / io / util / BufferedDataOutputStreamTest . java b / test / unit / org / apache / cassandra / io / util / BufferedDataOutputStreamTest . java 
 index 8eaea31 . . f5b239c 100644 
 - - - a / test / unit / org / apache / cassandra / io / util / BufferedDataOutputStreamTest . java 
 + + + b / test / unit / org / apache / cassandra / io / util / BufferedDataOutputStreamTest . java 
 @ @ - 6 , 16 + 6 , 55 @ @ import java . io . IOException ; 
 import java . io . OutputStream ; 
 import java . io . UTFDataFormatException ; 
 import java . lang . reflect . Field ; 
 + import java . nio . BufferOverflowException ; 
 import java . nio . ByteBuffer ; 
 import java . nio . channels . WritableByteChannel ; 
 import java . util . Random ; 
 
 import org . junit . Test ; 
 
 + import com . google . common . base . Throwables ; 
 + 
 import static org . junit . Assert . * ; 
 
 public class BufferedDataOutputStreamTest 
 { 
 + 
 + @ Test ( expected = BufferOverflowException . class ) 
 + public void testDataOutputBufferFixedByes ( ) throws Exception 
 + { 
 + try ( DataOutputBufferFixed dob = new DataOutputBufferFixed ( ) ) 
 + { 
 + try 
 + { 
 + for ( int ii = 0 ; ii < 128 ; ii + + ) 
 + dob . write ( 0 ) ; 
 + } 
 + catch ( BufferOverflowException e ) 
 + { 
 + fail ( " Should not throw BufferOverflowException yet " ) ; 
 + } 
 + dob . write ( 0 ) ; 
 + } 
 + } 
 + 
 + @ Test ( expected = BufferOverflowException . class ) 
 + public void testDataOutputBufferFixedByteBuffer ( ) throws Exception 
 + { 
 + try ( DataOutputBufferFixed dob = new DataOutputBufferFixed ( ) ) 
 + { 
 + try 
 + { 
 + dob . write ( ByteBuffer . allocateDirect ( 128 ) ) ; 
 + } 
 + catch ( BufferOverflowException e ) 
 + { 
 + fail ( " Should not throw BufferOverflowException yet " ) ; 
 + } 
 + dob . write ( ByteBuffer . allocateDirect ( 1 ) ) ; 
 + } 
 + } 
 + 
 WritableByteChannel adapter = new WritableByteChannel ( ) 
 { 


NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index cf4cff7 . . 4eb0642 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 38 , 6 + 38 , 8 @ @ 
 * fix parsing of the Keyspace and ColumnFamily names in numeric 
 and string representations in CLI ( CASSANDRA - 3075 ) 
 * always hint counters ( CASSANDRA - 3099 ) 
 + * fix log4j initialization in EmbeddedCassandraService ( CASSANDRA - 2857 ) 
 + 
 
 0 . 8 . 4 
 * include files - to - be - streamed in StreamInSession . getSources ( CASSANDRA - 2972 ) 
 diff - - git a / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java b / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java 
 index 203ecc8 . . ea2391d 100644 
 - - - a / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java 
 @ @ - 62 , 17 + 62 , 19 @ @ import org . apache . cassandra . utils . Mx4jTool ; 
 * / 
 public abstract class AbstractCassandraDaemon implements CassandraDaemon 
 { 
 - / / Initialize logging in such a way that it checks for config changes every 10 seconds . 
 - static 
 + / * * 
 + * Initialize logging in such a way that it checks for config changes every 10 seconds . 
 + * / 
 + public static void initLog4j ( ) 
 { 
 String config = System . getProperty ( " log4j . configuration " , " log4j - server . properties " ) ; 
 URL configLocation = null ; 
 - try 
 + try 
 { 
 / / try loading from a physical location first . 
 configLocation = new URL ( config ) ; 
 } 
 - catch ( MalformedURLException ex ) 
 + catch ( MalformedURLException ex ) 
 { 
 / / then try loading from the classpath . 
 configLocation = AbstractCassandraDaemon . class . getClassLoader ( ) . getResource ( config ) ; 
 diff - - git a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java 
 index 8738470 . . 6d7d818 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . LinkedBlockingQueue ; 
 import java . util . concurrent . TimeUnit ; 
 
 + import org . apache . cassandra . service . AbstractCassandraDaemon ; 
 import org . apache . thrift . server . TNonblockingServer ; 
 import org . apache . thrift . server . TThreadPoolServer ; 
 import org . slf4j . Logger ; 
 @ @ - 53 , 6 + 54 , 11 @ @ import org . apache . thrift . transport . TTransportFactory ; 
 
 public class CassandraDaemon extends org . apache . cassandra . service . AbstractCassandraDaemon 
 { 
 + static 
 + { 
 + AbstractCassandraDaemon . initLog4j ( ) ; 
 + } 
 + 
 private static Logger logger = LoggerFactory . getLogger ( CassandraDaemon . class ) ; 
 private final static String SYNC = " sync " ; 
 private final static String ASYNC = " async " ;
