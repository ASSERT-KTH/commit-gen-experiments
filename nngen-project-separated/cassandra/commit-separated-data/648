BLEU SCORE: 0.028398387225677897

TEST MSG: Extend ColumnIdentifier . internedInstances key to include the type that generated the byte buffer
GENERATED MSG: Precompute partial ColumnIdentifier comparison

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 5fd8e5e . . b61c76c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 10 <nl> + * Extend ColumnIdentifier . internedInstances key to include the type that generated the byte buffer ( CASSANDRA - 12516 ) <nl> * Backport CASSANDRA - 10756 ( race condition in NativeTransportService shutdown ) ( CASSANDRA - 12472 ) <nl> <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java b / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java <nl> index afb65e1 . . 1e25b23 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java <nl> @ @ - 60 , 7 + 60 , 38 @ @ public class ColumnIdentifier extends Selectable implements IMeasurableMemory , C <nl> <nl> private static final long EMPTY _ SIZE = ObjectSizes . measure ( new ColumnIdentifier ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , " " , false ) ) ; <nl> <nl> - private static final ConcurrentMap < ByteBuffer , ColumnIdentifier > internedInstances = new MapMaker ( ) . weakValues ( ) . makeMap ( ) ; <nl> + private static final ConcurrentMap < InternedKey , ColumnIdentifier > internedInstances = new MapMaker ( ) . weakValues ( ) . makeMap ( ) ; <nl> + <nl> + private static final class InternedKey <nl> + { <nl> + private final AbstractType < ? > type ; <nl> + private final ByteBuffer bytes ; <nl> + <nl> + InternedKey ( AbstractType < ? > type , ByteBuffer bytes ) <nl> + { <nl> + this . type = type ; <nl> + this . bytes = bytes ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean equals ( Object o ) <nl> + { <nl> + if ( this = = o ) <nl> + return true ; <nl> + <nl> + if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) <nl> + return false ; <nl> + <nl> + InternedKey that = ( InternedKey ) o ; <nl> + return bytes . equals ( that . bytes ) & & type . equals ( that . type ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int hashCode ( ) <nl> + { <nl> + return bytes . hashCode ( ) + 31 * type . hashCode ( ) ; <nl> + } <nl> + } <nl> <nl> private static long prefixComparison ( ByteBuffer bytes ) <nl> { <nl> @ @ - 103 , 24 + 134 , 25 @ @ public class ColumnIdentifier extends Selectable implements IMeasurableMemory , C <nl> <nl> public static ColumnIdentifier getInterned ( ByteBuffer bytes , AbstractType < ? > type ) <nl> { <nl> - return getInterned ( bytes , type . getString ( bytes ) ) ; <nl> + return getInterned ( type , bytes , type . getString ( bytes ) ) ; <nl> } <nl> <nl> public static ColumnIdentifier getInterned ( String rawText , boolean keepCase ) <nl> { <nl> String text = keepCase ? rawText : rawText . toLowerCase ( Locale . US ) ; <nl> ByteBuffer bytes = ByteBufferUtil . bytes ( text ) ; <nl> - return getInterned ( bytes , text ) ; <nl> + return getInterned ( UTF8Type . instance , bytes , text ) ; <nl> } <nl> <nl> - public static ColumnIdentifier getInterned ( ByteBuffer bytes , String text ) <nl> + public static ColumnIdentifier getInterned ( AbstractType < ? > type , ByteBuffer bytes , String text ) <nl> { <nl> - ColumnIdentifier id = internedInstances . get ( bytes ) ; <nl> + InternedKey key = new InternedKey ( type , bytes ) ; <nl> + ColumnIdentifier id = internedInstances . get ( key ) ; <nl> if ( id ! = null ) <nl> return id ; <nl> <nl> ColumnIdentifier created = new ColumnIdentifier ( bytes , text , true ) ; <nl> - ColumnIdentifier previous = internedInstances . putIfAbsent ( bytes , created ) ; <nl> + ColumnIdentifier previous = internedInstances . putIfAbsent ( key , created ) ; <nl> return previous = = null ? created : previous ; <nl> } <nl> <nl> @ @ - 246 , 7 + 278 , 7 @ @ public class ColumnIdentifier extends Selectable implements IMeasurableMemory , C <nl> if ( def . name . bytes . equals ( bufferName ) ) <nl> return def . name ; <nl> } <nl> - return getInterned ( thriftColumnNameType . fromString ( rawText ) , text ) ; <nl> + return getInterned ( thriftColumnNameType , thriftColumnNameType . fromString ( rawText ) , text ) ; <nl> } <nl> <nl> public boolean processesSelection ( ) <nl> diff - - git a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> index e3756ec . . 84a5e13 100644 <nl> - - - a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> @ @ - 1001 , 8 + 1001 , 6 @ @ public final class SchemaKeyspace <nl> String keyspace = row . getString ( " keyspace _ name " ) ; <nl> String table = row . getString ( " table _ name " ) ; <nl> <nl> - ColumnIdentifier name = ColumnIdentifier . getInterned ( row . getBytes ( " column _ name _ bytes " ) , row . getString ( " column _ name " ) ) ; <nl> - <nl> ColumnDefinition . Kind kind = ColumnDefinition . Kind . valueOf ( row . getString ( " kind " ) . toUpperCase ( ) ) ; <nl> <nl> int position = row . getInt ( " position " ) ; <nl> @ @ - 1012 , 6 + 1010 , 10 @ @ public final class SchemaKeyspace <nl> if ( order = = ClusteringOrder . DESC ) <nl> type = ReversedType . getInstance ( type ) ; <nl> <nl> + ColumnIdentifier name = ColumnIdentifier . getInterned ( type , <nl> + row . getBytes ( " column _ name _ bytes " ) , <nl> + row . getString ( " column _ name " ) ) ; <nl> + <nl> return new ColumnDefinition ( keyspace , table , name , type , position , kind ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / utils / NativeSSTableLoaderClient . java b / src / java / org / apache / cassandra / utils / NativeSSTableLoaderClient . java <nl> index 5bcbcf7 . . 4c6b12e 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / NativeSSTableLoaderClient . java <nl> + + + b / src / java / org / apache / cassandra / utils / NativeSSTableLoaderClient . java <nl> @ @ - 198 , 13 + 198 , 15 @ @ public class NativeSSTableLoaderClient extends SSTableLoader . Client <nl> <nl> private static ColumnDefinition createDefinitionFromRow ( Row row , String keyspace , String table , Types types ) <nl> { <nl> - ColumnIdentifier name = ColumnIdentifier . getInterned ( row . getBytes ( " column _ name _ bytes " ) , row . getString ( " column _ name " ) ) ; <nl> - <nl> ClusteringOrder order = ClusteringOrder . valueOf ( row . getString ( " clustering _ order " ) . toUpperCase ( ) ) ; <nl> AbstractType < ? > type = CQLTypeParser . parse ( keyspace , row . getString ( " type " ) , types ) ; <nl> if ( order = = ClusteringOrder . DESC ) <nl> type = ReversedType . getInstance ( type ) ; <nl> <nl> + ColumnIdentifier name = ColumnIdentifier . getInterned ( type , <nl> + row . getBytes ( " column _ name _ bytes " ) , <nl> + row . getString ( " column _ name " ) ) ; <nl> + <nl> int position = row . getInt ( " position " ) ; <nl> ColumnDefinition . Kind kind = ColumnDefinition . Kind . valueOf ( row . getString ( " kind " ) . toUpperCase ( ) ) ; <nl> return new ColumnDefinition ( keyspace , table , name , type , position , kind ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / ColumnIdentifierTest . java b / test / unit / org / apache / cassandra / cql3 / ColumnIdentifierTest . java <nl> index c287883 . . c4b43b8 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / ColumnIdentifierTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / ColumnIdentifierTest . java <nl> @ @ - 24 , 7 + 24 , 9 @ @ import java . util . concurrent . ThreadLocalRandom ; <nl> import org . junit . Test ; <nl> <nl> import junit . framework . Assert ; <nl> + import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . db . marshal . BytesType ; <nl> + import org . apache . cassandra . db . marshal . UTF8Type ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> public class ColumnIdentifierTest <nl> @ @ - 58 , 4 + 60 , 26 @ @ public class ColumnIdentifierTest <nl> return v < 0 ? - 1 : v > 0 ? 1 : 0 ; <nl> } <nl> <nl> + @ Test <nl> + public void testInternedCache ( ) <nl> + { <nl> + AbstractType < ? > utf8Type = UTF8Type . instance ; <nl> + AbstractType < ? > bytesType = BytesType . instance ; <nl> + <nl> + byte [ ] bytes = new byte [ ] { 0x63 , ( byte ) 0x32 } ; <nl> + String text = " c2 " ; / / the UTF - 8 encoding of this string is the same as bytes , 0x630x32 <nl> + <nl> + ColumnIdentifier c1 = ColumnIdentifier . getInterned ( ByteBuffer . wrap ( bytes ) , bytesType ) ; <nl> + ColumnIdentifier c2 = ColumnIdentifier . getInterned ( utf8Type , utf8Type . fromString ( text ) , text ) ; <nl> + ColumnIdentifier c3 = ColumnIdentifier . getInterned ( text , true ) ; <nl> + <nl> + Assert . assertTrue ( c1 . isInterned ( ) ) ; <nl> + Assert . assertTrue ( c2 . isInterned ( ) ) ; <nl> + Assert . assertTrue ( c3 . isInterned ( ) ) ; <nl> + <nl> + Assert . assertEquals ( " 6332 " , c1 . toString ( ) ) ; <nl> + Assert . assertEquals ( text , c2 . toString ( ) ) ; <nl> + Assert . assertEquals ( text , c3 . toString ( ) ) ; <nl> + } <nl> + <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 5fd8e5e . . b61c76c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 10 
 + * Extend ColumnIdentifier . internedInstances key to include the type that generated the byte buffer ( CASSANDRA - 12516 ) 
 * Backport CASSANDRA - 10756 ( race condition in NativeTransportService shutdown ) ( CASSANDRA - 12472 ) 
 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java b / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java 
 index afb65e1 . . 1e25b23 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java 
 + + + b / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java 
 @ @ - 60 , 7 + 60 , 38 @ @ public class ColumnIdentifier extends Selectable implements IMeasurableMemory , C 
 
 private static final long EMPTY _ SIZE = ObjectSizes . measure ( new ColumnIdentifier ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , " " , false ) ) ; 
 
 - private static final ConcurrentMap < ByteBuffer , ColumnIdentifier > internedInstances = new MapMaker ( ) . weakValues ( ) . makeMap ( ) ; 
 + private static final ConcurrentMap < InternedKey , ColumnIdentifier > internedInstances = new MapMaker ( ) . weakValues ( ) . makeMap ( ) ; 
 + 
 + private static final class InternedKey 
 + { 
 + private final AbstractType < ? > type ; 
 + private final ByteBuffer bytes ; 
 + 
 + InternedKey ( AbstractType < ? > type , ByteBuffer bytes ) 
 + { 
 + this . type = type ; 
 + this . bytes = bytes ; 
 + } 
 + 
 + @ Override 
 + public boolean equals ( Object o ) 
 + { 
 + if ( this = = o ) 
 + return true ; 
 + 
 + if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) 
 + return false ; 
 + 
 + InternedKey that = ( InternedKey ) o ; 
 + return bytes . equals ( that . bytes ) & & type . equals ( that . type ) ; 
 + } 
 + 
 + @ Override 
 + public int hashCode ( ) 
 + { 
 + return bytes . hashCode ( ) + 31 * type . hashCode ( ) ; 
 + } 
 + } 
 
 private static long prefixComparison ( ByteBuffer bytes ) 
 { 
 @ @ - 103 , 24 + 134 , 25 @ @ public class ColumnIdentifier extends Selectable implements IMeasurableMemory , C 
 
 public static ColumnIdentifier getInterned ( ByteBuffer bytes , AbstractType < ? > type ) 
 { 
 - return getInterned ( bytes , type . getString ( bytes ) ) ; 
 + return getInterned ( type , bytes , type . getString ( bytes ) ) ; 
 } 
 
 public static ColumnIdentifier getInterned ( String rawText , boolean keepCase ) 
 { 
 String text = keepCase ? rawText : rawText . toLowerCase ( Locale . US ) ; 
 ByteBuffer bytes = ByteBufferUtil . bytes ( text ) ; 
 - return getInterned ( bytes , text ) ; 
 + return getInterned ( UTF8Type . instance , bytes , text ) ; 
 } 
 
 - public static ColumnIdentifier getInterned ( ByteBuffer bytes , String text ) 
 + public static ColumnIdentifier getInterned ( AbstractType < ? > type , ByteBuffer bytes , String text ) 
 { 
 - ColumnIdentifier id = internedInstances . get ( bytes ) ; 
 + InternedKey key = new InternedKey ( type , bytes ) ; 
 + ColumnIdentifier id = internedInstances . get ( key ) ; 
 if ( id ! = null ) 
 return id ; 
 
 ColumnIdentifier created = new ColumnIdentifier ( bytes , text , true ) ; 
 - ColumnIdentifier previous = internedInstances . putIfAbsent ( bytes , created ) ; 
 + ColumnIdentifier previous = internedInstances . putIfAbsent ( key , created ) ; 
 return previous = = null ? created : previous ; 
 } 
 
 @ @ - 246 , 7 + 278 , 7 @ @ public class ColumnIdentifier extends Selectable implements IMeasurableMemory , C 
 if ( def . name . bytes . equals ( bufferName ) ) 
 return def . name ; 
 } 
 - return getInterned ( thriftColumnNameType . fromString ( rawText ) , text ) ; 
 + return getInterned ( thriftColumnNameType , thriftColumnNameType . fromString ( rawText ) , text ) ; 
 } 
 
 public boolean processesSelection ( ) 
 diff - - git a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 index e3756ec . . 84a5e13 100644 
 - - - a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 + + + b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 @ @ - 1001 , 8 + 1001 , 6 @ @ public final class SchemaKeyspace 
 String keyspace = row . getString ( " keyspace _ name " ) ; 
 String table = row . getString ( " table _ name " ) ; 
 
 - ColumnIdentifier name = ColumnIdentifier . getInterned ( row . getBytes ( " column _ name _ bytes " ) , row . getString ( " column _ name " ) ) ; 
 - 
 ColumnDefinition . Kind kind = ColumnDefinition . Kind . valueOf ( row . getString ( " kind " ) . toUpperCase ( ) ) ; 
 
 int position = row . getInt ( " position " ) ; 
 @ @ - 1012 , 6 + 1010 , 10 @ @ public final class SchemaKeyspace 
 if ( order = = ClusteringOrder . DESC ) 
 type = ReversedType . getInstance ( type ) ; 
 
 + ColumnIdentifier name = ColumnIdentifier . getInterned ( type , 
 + row . getBytes ( " column _ name _ bytes " ) , 
 + row . getString ( " column _ name " ) ) ; 
 + 
 return new ColumnDefinition ( keyspace , table , name , type , position , kind ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / utils / NativeSSTableLoaderClient . java b / src / java / org / apache / cassandra / utils / NativeSSTableLoaderClient . java 
 index 5bcbcf7 . . 4c6b12e 100644 
 - - - a / src / java / org / apache / cassandra / utils / NativeSSTableLoaderClient . java 
 + + + b / src / java / org / apache / cassandra / utils / NativeSSTableLoaderClient . java 
 @ @ - 198 , 13 + 198 , 15 @ @ public class NativeSSTableLoaderClient extends SSTableLoader . Client 
 
 private static ColumnDefinition createDefinitionFromRow ( Row row , String keyspace , String table , Types types ) 
 { 
 - ColumnIdentifier name = ColumnIdentifier . getInterned ( row . getBytes ( " column _ name _ bytes " ) , row . getString ( " column _ name " ) ) ; 
 - 
 ClusteringOrder order = ClusteringOrder . valueOf ( row . getString ( " clustering _ order " ) . toUpperCase ( ) ) ; 
 AbstractType < ? > type = CQLTypeParser . parse ( keyspace , row . getString ( " type " ) , types ) ; 
 if ( order = = ClusteringOrder . DESC ) 
 type = ReversedType . getInstance ( type ) ; 
 
 + ColumnIdentifier name = ColumnIdentifier . getInterned ( type , 
 + row . getBytes ( " column _ name _ bytes " ) , 
 + row . getString ( " column _ name " ) ) ; 
 + 
 int position = row . getInt ( " position " ) ; 
 ColumnDefinition . Kind kind = ColumnDefinition . Kind . valueOf ( row . getString ( " kind " ) . toUpperCase ( ) ) ; 
 return new ColumnDefinition ( keyspace , table , name , type , position , kind ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / ColumnIdentifierTest . java b / test / unit / org / apache / cassandra / cql3 / ColumnIdentifierTest . java 
 index c287883 . . c4b43b8 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / ColumnIdentifierTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / ColumnIdentifierTest . java 
 @ @ - 24 , 7 + 24 , 9 @ @ import java . util . concurrent . ThreadLocalRandom ; 
 import org . junit . Test ; 
 
 import junit . framework . Assert ; 
 + import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . db . marshal . BytesType ; 
 + import org . apache . cassandra . db . marshal . UTF8Type ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 public class ColumnIdentifierTest 
 @ @ - 58 , 4 + 60 , 26 @ @ public class ColumnIdentifierTest 
 return v < 0 ? - 1 : v > 0 ? 1 : 0 ; 
 } 
 
 + @ Test 
 + public void testInternedCache ( ) 
 + { 
 + AbstractType < ? > utf8Type = UTF8Type . instance ; 
 + AbstractType < ? > bytesType = BytesType . instance ; 
 + 
 + byte [ ] bytes = new byte [ ] { 0x63 , ( byte ) 0x32 } ; 
 + String text = " c2 " ; / / the UTF - 8 encoding of this string is the same as bytes , 0x630x32 
 + 
 + ColumnIdentifier c1 = ColumnIdentifier . getInterned ( ByteBuffer . wrap ( bytes ) , bytesType ) ; 
 + ColumnIdentifier c2 = ColumnIdentifier . getInterned ( utf8Type , utf8Type . fromString ( text ) , text ) ; 
 + ColumnIdentifier c3 = ColumnIdentifier . getInterned ( text , true ) ; 
 + 
 + Assert . assertTrue ( c1 . isInterned ( ) ) ; 
 + Assert . assertTrue ( c2 . isInterned ( ) ) ; 
 + Assert . assertTrue ( c3 . isInterned ( ) ) ; 
 + 
 + Assert . assertEquals ( " 6332 " , c1 . toString ( ) ) ; 
 + Assert . assertEquals ( text , c2 . toString ( ) ) ; 
 + Assert . assertEquals ( text , c3 . toString ( ) ) ; 
 + } 
 + 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
