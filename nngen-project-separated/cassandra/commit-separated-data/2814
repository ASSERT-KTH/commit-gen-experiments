BLEU SCORE: 0.040583489434387374

TEST MSG: Pre - 6504 cleanup and fixups
GENERATED MSG: flesh out BatchlogManagerMBean

TEST DIFF (one line): diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index 1f9fd8b . . 2f1c8fa 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 157 , 7 + 157 , 7 @ @ key _ cache _ save _ period : 14400 <nl> row _ cache _ size _ in _ mb : 0 <nl> <nl> # Duration in seconds after which Cassandra should <nl> - # safe the row cache . Caches are saved to saved _ caches _ directory as specified <nl> + # save the row cache . Caches are saved to saved _ caches _ directory as specified <nl> # in this configuration file . <nl> # <nl> # Saved caches greatly improve cold - start speeds , and is relatively cheap in <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index cdc4cdb . . 817d4a3 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 2149 , 6 + 2149 , 11 @ @ public final class CFMetaData <nl> return true ; <nl> } <nl> <nl> + public boolean isCounter ( ) <nl> + { <nl> + return defaultValidator . isCounter ( ) ; <nl> + } <nl> + <nl> public void validateColumns ( Iterable < Cell > columns ) <nl> { <nl> for ( Cell cell : columns ) <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index 5c737d4 . . 2ea8e38 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 50 , 25 + 50 , 25 @ @ public class Config <nl> public String initial _ token ; <nl> public Integer num _ tokens = 1 ; <nl> <nl> - public volatile Long request _ timeout _ in _ ms = new Long ( 10000 ) ; <nl> + public volatile Long request _ timeout _ in _ ms = 10000L ; <nl> <nl> - public Long read _ request _ timeout _ in _ ms = new Long ( 5000 ) ; <nl> + public volatile Long read _ request _ timeout _ in _ ms = 5000L ; <nl> <nl> - public Long range _ request _ timeout _ in _ ms = new Long ( 10000 ) ; <nl> + public volatile Long range _ request _ timeout _ in _ ms = 10000L ; <nl> <nl> - public Long write _ request _ timeout _ in _ ms = new Long ( 2000 ) ; <nl> + public volatile Long write _ request _ timeout _ in _ ms = 2000L ; <nl> <nl> - public Long cas _ contention _ timeout _ in _ ms = new Long ( 1000 ) ; <nl> + public volatile Long cas _ contention _ timeout _ in _ ms = 1000L ; <nl> <nl> - public Long truncate _ request _ timeout _ in _ ms = new Long ( 60000 ) ; <nl> + public volatile Long truncate _ request _ timeout _ in _ ms = 60000L ; <nl> <nl> - public Integer streaming _ socket _ timeout _ in _ ms = new Integer ( 0 ) ; <nl> + public Integer streaming _ socket _ timeout _ in _ ms = 0 ; <nl> <nl> public boolean cross _ node _ timeout = false ; <nl> <nl> public volatile Double phi _ convict _ threshold = 8 . 0 ; <nl> <nl> - public Integer concurrent _ reads = 8 ; <nl> + public Integer concurrent _ reads = 32 ; <nl> public Integer concurrent _ writes = 32 ; <nl> public Integer concurrent _ replicates = 32 ; <nl> <nl> @ @ - 161 , 7 + 161 , 7 @ @ public class Config <nl> <nl> public Long key _ cache _ size _ in _ mb = null ; <nl> public volatile int key _ cache _ save _ period = 14400 ; <nl> - public int key _ cache _ keys _ to _ save = Integer . MAX _ VALUE ; <nl> + public volatile int key _ cache _ keys _ to _ save = Integer . MAX _ VALUE ; <nl> <nl> public long row _ cache _ size _ in _ mb = 0 ; <nl> public volatile int row _ cache _ save _ period = 0 ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java <nl> index ca43d20 . . d0478f5 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java <nl> @ @ - 69 , 7 + 69 , 7 @ @ public class CreateIndexStatement extends SchemaAlteringStatement <nl> public void validate ( ClientState state ) throws RequestValidationException <nl> { <nl> CFMetaData cfm = ThriftValidation . validateColumnFamily ( keyspace ( ) , columnFamily ( ) ) ; <nl> - if ( cfm . getDefaultValidator ( ) . isCommutative ( ) ) <nl> + if ( cfm . isCounter ( ) ) <nl> throw new InvalidRequestException ( " Secondary indexes are not supported on counter tables " ) ; <nl> <nl> ColumnDefinition cd = cfm . getColumnDefinition ( target . column ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> index 148edda . . c2a0080 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> @ @ - 91 , 7 + 91 , 7 @ @ public abstract class ModificationStatement implements CQLStatement , MeasurableF <nl> <nl> public boolean isCounter ( ) <nl> { <nl> - return cfm . getDefaultValidator ( ) . isCommutative ( ) ; <nl> + return cfm . isCounter ( ) ; <nl> } <nl> <nl> public long getTimestamp ( long now , List < ByteBuffer > variables ) throws InvalidRequestException <nl> diff - - git a / src / java / org / apache / cassandra / db / Cell . java b / src / java / org / apache / cassandra / db / Cell . java <nl> index 537a744 . . 3e04f9b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Cell . java <nl> + + + b / src / java / org / apache / cassandra / db / Cell . java <nl> @ @ - 268 , 15 + 268 , 11 @ @ public class Cell implements OnDiskAtom <nl> <nl> public String getString ( CellNameType comparator ) <nl> { <nl> - StringBuilder sb = new StringBuilder ( ) ; <nl> - sb . append ( comparator . getString ( name ) ) ; <nl> - sb . append ( " : " ) ; <nl> - sb . append ( isMarkedForDelete ( System . currentTimeMillis ( ) ) ) ; <nl> - sb . append ( " : " ) ; <nl> - sb . append ( value . remaining ( ) ) ; <nl> - sb . append ( " @ " ) ; <nl> - sb . append ( timestamp ( ) ) ; <nl> - return sb . toString ( ) ; <nl> + return String . format ( " % s : % b : % d @ % d " , <nl> + comparator . getString ( name ) , <nl> + isMarkedForDelete ( System . currentTimeMillis ( ) ) , <nl> + value . remaining ( ) , <nl> + timestamp ) ; <nl> } <nl> <nl> protected void validateName ( CFMetaData metadata ) throws MarshalException <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 2ea60f1 . . 9ce6b0c 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 125 , 7 + 125 , 7 @ @ public abstract class ColumnFamily implements Iterable < Cell > , IRowCacheEntry <nl> <nl> public void addColumn ( CellName name , ByteBuffer value , long timestamp , int timeToLive ) <nl> { <nl> - assert ! metadata ( ) . getDefaultValidator ( ) . isCommutative ( ) ; <nl> + assert ! metadata ( ) . isCounter ( ) ; <nl> Cell cell = Cell . create ( name , value , timestamp , timeToLive , metadata ( ) ) ; <nl> addColumn ( cell ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / CounterCell . java b / src / java / org / apache / cassandra / db / CounterCell . java <nl> index 0a1c992 . . 76949d4 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CounterCell . java <nl> + + + b / src / java / org / apache / cassandra / db / CounterCell . java <nl> @ @ - 21 , 9 + 21 , 6 @ @ import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> import java . security . MessageDigest ; <nl> <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> - <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . db . composites . CellName ; <nl> import org . apache . cassandra . db . composites . CellNameType ; <nl> @ @ - 39 , 8 + 36 , 6 @ @ import org . apache . cassandra . utils . * ; <nl> * / <nl> public class CounterCell extends Cell <nl> { <nl> - private static final Logger logger = LoggerFactory . getLogger ( CounterCell . class ) ; <nl> - <nl> protected static final CounterContext contextManager = CounterContext . instance ( ) ; <nl> <nl> private final long timestampOfLastDelete ; <nl> @ @ - 92 , 10 + 87 , 7 @ @ public class CounterCell extends Cell <nl> @ Override <nl> public int dataSize ( ) <nl> { <nl> - / * <nl> - * A counter column adds to a Cell : <nl> - * + 8 bytes for timestampOfLastDelete <nl> - * / <nl> + / / A counter column adds 8 bytes for timestampOfLastDelete to Cell . <nl> return super . dataSize ( ) + TypeSizes . NATIVE . sizeof ( timestampOfLastDelete ) ; <nl> } <nl> <nl> @ @ - 157 , 8 + 149 , 6 @ @ public class CounterCell extends Cell <nl> @ Override <nl> public Cell reconcile ( Cell cell , Allocator allocator ) <nl> { <nl> - assert ( cell instanceof CounterCell ) | | ( cell instanceof DeletedCell ) : " Wrong class type : " + cell . getClass ( ) ; <nl> - <nl> / / live + tombstone : track last tombstone <nl> if ( cell . isMarkedForDelete ( Long . MIN _ VALUE ) ) / / cannot be an expired cell , so the current time is irrelevant <nl> { <nl> @ @ - 175 , 6 + 165 , 9 @ @ public class CounterCell extends Cell <nl> / / live last delete < tombstone <nl> return new CounterCell ( name ( ) , value ( ) , timestamp ( ) , cell . timestamp ( ) ) ; <nl> } <nl> + <nl> + assert cell instanceof CounterCell : " Wrong class type : " + cell . getClass ( ) ; <nl> + <nl> / / live < live last delete <nl> if ( timestamp ( ) < ( ( CounterCell ) cell ) . timestampOfLastDelete ( ) ) <nl> return cell ; <nl> @ @ - 182 , 11 + 175 , 10 @ @ public class CounterCell extends Cell <nl> if ( timestampOfLastDelete ( ) > cell . timestamp ( ) ) <nl> return this ; <nl> / / live + live : merge clocks ; update value <nl> - return new CounterCell ( <nl> - name ( ) , <nl> - contextManager . merge ( value ( ) , cell . value ( ) , allocator ) , <nl> - Math . max ( timestamp ( ) , cell . timestamp ( ) ) , <nl> - Math . max ( timestampOfLastDelete ( ) , ( ( CounterCell ) cell ) . timestampOfLastDelete ( ) ) ) ; <nl> + return new CounterCell ( name ( ) , <nl> + contextManager . merge ( value ( ) , cell . value ( ) , allocator ) , <nl> + Math . max ( timestamp ( ) , cell . timestamp ( ) ) , <nl> + Math . max ( timestampOfLastDelete ( ) , ( ( CounterCell ) cell ) . timestampOfLastDelete ( ) ) ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 199 , 9 + 191 , 7 @ @ public class CounterCell extends Cell <nl> @ Override <nl> public int hashCode ( ) <nl> { <nl> - int result = super . hashCode ( ) ; <nl> - result = 31 * result + ( int ) ( timestampOfLastDelete ^ ( timestampOfLastDelete > > > 32 ) ) ; <nl> - return result ; <nl> + return 31 * super . hashCode ( ) + ( int ) ( timestampOfLastDelete ^ ( timestampOfLastDelete > > > 32 ) ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 219 , 17 + 209 , 11 @ @ public class CounterCell extends Cell <nl> @ Override <nl> public String getString ( CellNameType comparator ) <nl> { <nl> - StringBuilder sb = new StringBuilder ( ) ; <nl> - sb . append ( comparator . getString ( name ) ) ; <nl> - sb . append ( " : " ) ; <nl> - sb . append ( false ) ; <nl> - sb . append ( " : " ) ; <nl> - sb . append ( contextManager . toString ( value ) ) ; <nl> - sb . append ( " @ " ) ; <nl> - sb . append ( timestamp ( ) ) ; <nl> - sb . append ( " ! " ) ; <nl> - sb . append ( timestampOfLastDelete ) ; <nl> - return sb . toString ( ) ; <nl> + return String . format ( " % s : false : % s @ % d ! % d " , <nl> + comparator . getString ( name ) , <nl> + contextManager . toString ( value ) , <nl> + timestamp , <nl> + timestampOfLastDelete ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / db / CounterMutation . java b / src / java / org / apache / cassandra / db / CounterMutation . java <nl> index a07dd9b . . 7dcb05c 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CounterMutation . java <nl> + + + b / src / java / org / apache / cassandra / db / CounterMutation . java <nl> @ @ - 78 , 7 + 78 , 7 @ @ public class CounterMutation implements IMutation <nl> <nl> public Mutation makeReplicationMutation ( ) <nl> { <nl> - List < ReadCommand > readCommands = new LinkedList < ReadCommand > ( ) ; <nl> + List < ReadCommand > readCommands = new LinkedList < > ( ) ; <nl> long timestamp = System . currentTimeMillis ( ) ; <nl> for ( ColumnFamily columnFamily : mutation . getColumnFamilies ( ) ) <nl> { <nl> @ @ - 111 , 7 + 111 , 7 @ @ public class CounterMutation implements IMutation <nl> <nl> public MessageOut < CounterMutation > makeMutationMessage ( ) <nl> { <nl> - return new MessageOut < CounterMutation > ( MessagingService . Verb . COUNTER _ MUTATION , this , serializer ) ; <nl> + return new MessageOut < > ( MessagingService . Verb . COUNTER _ MUTATION , this , serializer ) ; <nl> } <nl> <nl> public boolean shouldReplicateOnWrite ( ) <nl> @ @ - 133 , 9 + 133 , 7 @ @ public class CounterMutation implements IMutation <nl> ColumnFamily cf = cf _ . cloneMeShallow ( ) ; <nl> ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( cf . id ( ) ) ; <nl> for ( Cell cell : cf _ ) <nl> - { <nl> cf . addColumn ( cell . localCopy ( cfs ) , HeapAllocator . instance ) ; <nl> - } <nl> m . add ( cf ) ; <nl> } <nl> m . apply ( ) ; <nl> @ @ - 145 , 7 + 143 , 6 @ @ public class CounterMutation implements IMutation <nl> { <nl> if ( ! ( m instanceof CounterMutation ) ) <nl> throw new IllegalArgumentException ( ) ; <nl> - <nl> CounterMutation cm = ( CounterMutation ) m ; <nl> mutation . addAll ( cm . mutation ) ; <nl> } <nl> @ @ - 158 , 10 + 155 , 7 @ @ public class CounterMutation implements IMutation <nl> <nl> public String toString ( boolean shallow ) <nl> { <nl> - StringBuilder buff = new StringBuilder ( " CounterMutation ( " ) ; <nl> - buff . append ( mutation . toString ( shallow ) ) ; <nl> - buff . append ( " , " ) . append ( consistency . toString ( ) ) ; <nl> - return buff . append ( " ) " ) . toString ( ) ; <nl> + return String . format ( " CounterMutation ( % s , % s ) " , mutation . toString ( shallow ) , consistency ) ; <nl> } <nl> <nl> public static class CounterMutationSerializer implements IVersionedSerializer < CounterMutation > <nl> diff - - git a / src / java / org / apache / cassandra / db / CounterMutationVerbHandler . java b / src / java / org / apache / cassandra / db / CounterMutationVerbHandler . java <nl> index 966a015 . . d65fbd7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CounterMutationVerbHandler . java <nl> + + + b / src / java / org / apache / cassandra / db / CounterMutationVerbHandler . java <nl> @ @ - 37 , 8 + 37 , 7 @ @ public class CounterMutationVerbHandler implements IVerbHandler < CounterMutation > <nl> try <nl> { <nl> final CounterMutation cm = message . payload ; <nl> - if ( logger . isDebugEnabled ( ) ) <nl> - logger . debug ( " Applying forwarded { } " , cm ) ; <nl> + logger . debug ( " Applying forwarded { } " , cm ) ; <nl> <nl> String localDataCenter = DatabaseDescriptor . getEndpointSnitch ( ) . getDatacenter ( FBUtilities . getBroadcastAddress ( ) ) ; <nl> / / We should not wait for the result of the write in this thread , <nl> @ @ - 48 , 11 + 47 , 11 @ @ public class CounterMutationVerbHandler implements IVerbHandler < CounterMutation > <nl> / / will not be called if the request timeout , but this is ok <nl> / / because the coordinator of the counter mutation will timeout on <nl> / / it ' s own in that case . <nl> - StorageProxy . applyCounterMutationOnLeader ( cm , localDataCenter , new Runnable ( ) { <nl> + StorageProxy . applyCounterMutationOnLeader ( cm , localDataCenter , new Runnable ( ) <nl> + { <nl> public void run ( ) <nl> { <nl> - WriteResponse response = new WriteResponse ( ) ; <nl> - MessagingService . instance ( ) . sendReply ( response . createMessage ( ) , id , message . from ) ; <nl> + MessagingService . instance ( ) . sendReply ( new WriteResponse ( ) . createMessage ( ) , id , message . from ) ; <nl> } <nl> } ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / CounterUpdateCell . java b / src / java / org / apache / cassandra / db / CounterUpdateCell . java <nl> index f6bb3d4 . . dd2bf2a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CounterUpdateCell . java <nl> + + + b / src / java / org / apache / cassandra / db / CounterUpdateCell . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . db ; <nl> import java . nio . ByteBuffer ; <nl> <nl> import org . apache . cassandra . db . composites . CellName ; <nl> + import org . apache . cassandra . db . composites . CellNameType ; <nl> import org . apache . cassandra . db . context . CounterContext ; <nl> import org . apache . cassandra . utils . Allocator ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> @ @ - 96 , 4 + 97 , 10 @ @ public class CounterUpdateCell extends Cell <nl> timestamp ( ) , <nl> Long . MIN _ VALUE ) ; <nl> } <nl> + <nl> + @ Override <nl> + public String getString ( CellNameType comparator ) <nl> + { <nl> + return String . format ( " % s : % s @ % d " , comparator . getString ( name ) , ByteBufferUtil . toLong ( value ) , timestamp ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / ExpiringCell . java b / src / java / org / apache / cassandra / db / ExpiringCell . java <nl> index 2b9541c . . b15514e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ExpiringCell . java <nl> + + + b / src / java / org / apache / cassandra / db / ExpiringCell . java <nl> @ @ - 147 , 11 + 147 , 7 @ @ public class ExpiringCell extends Cell <nl> @ Override <nl> public String getString ( CellNameType comparator ) <nl> { <nl> - StringBuilder sb = new StringBuilder ( ) ; <nl> - sb . append ( super . getString ( comparator ) ) ; <nl> - sb . append ( " ! " ) ; <nl> - sb . append ( timeToLive ) ; <nl> - return sb . toString ( ) ; <nl> + return String . format ( " % s ! % d " , super . getString ( comparator ) , timeToLive ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index 7927574 . . 2a8d68d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 616 , 7 + 616 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> public static CleanupStrategy get ( ColumnFamilyStore cfs , Collection < Range < Token > > ranges , CounterId . OneShotRenewer renewer ) <nl> { <nl> - if ( cfs . indexManager . hasIndexes ( ) | | cfs . metadata . getDefaultValidator ( ) . isCommutative ( ) ) <nl> + if ( cfs . indexManager . hasIndexes ( ) | | cfs . metadata . isCounter ( ) ) <nl> return new Full ( cfs , ranges , renewer ) ; <nl> <nl> return new Bounded ( cfs , ranges ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / Scrubber . java b / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> index eabfdbc . . 978865c 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> @ @ - 84 , 7 + 84 , 7 @ @ public class Scrubber implements Closeable <nl> this . controller = isOffline <nl> ? new ScrubController ( cfs ) <nl> : new CompactionController ( cfs , Collections . singleton ( sstable ) , CompactionManager . getDefaultGcBefore ( cfs ) ) ; <nl> - this . isCommutative = cfs . metadata . getDefaultValidator ( ) . isCommutative ( ) ; <nl> + this . isCommutative = cfs . metadata . isCounter ( ) ; <nl> this . expectedBloomFilterSize = Math . max ( cfs . metadata . getIndexInterval ( ) , ( int ) ( SSTableReader . getApproximateKeyCount ( toScrub ) ) ) ; <nl> <nl> / / loop through each row , deserializing to check for damage . <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractCommutativeType . java b / src / java / org / apache / cassandra / db / marshal / AbstractCommutativeType . java <nl> deleted file mode 100644 <nl> index 4b26d5d . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / AbstractCommutativeType . java <nl> + + + / dev / null <nl> @ @ - 1 , 50 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . db . marshal ; <nl> - <nl> - import java . nio . ByteBuffer ; <nl> - <nl> - import org . apache . cassandra . db . Cell ; <nl> - import org . apache . cassandra . db . composites . CellName ; <nl> - import org . apache . cassandra . db . context . CounterContext ; <nl> - import org . apache . cassandra . utils . ByteBufferUtil ; <nl> - <nl> - public abstract class AbstractCommutativeType extends AbstractType < Long > <nl> - { <nl> - public boolean isCommutative ( ) <nl> - { <nl> - return true ; <nl> - } <nl> - <nl> - @ Override <nl> - public Long compose ( ByteBuffer bytes ) <nl> - { <nl> - return CounterContext . instance ( ) . total ( bytes ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public ByteBuffer decompose ( Long value ) <nl> - { <nl> - return ByteBufferUtil . bytes ( value ) ; <nl> - } <nl> - <nl> - / * * <nl> - * create commutative column <nl> - * / <nl> - public abstract Cell createColumn ( CellName name , ByteBuffer value , long timestamp ) ; <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractType . java b / src / java / org / apache / cassandra / db / marshal / AbstractType . java <nl> index cefa465 . . ce233de 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / AbstractType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / AbstractType . java <nl> @ @ - 104 , 12 + 104 , 6 @ @ public abstract class AbstractType < T > implements Comparator < ByteBuffer > <nl> <nl> public abstract TypeSerializer < T > getSerializer ( ) ; <nl> <nl> - / * * @ deprecated use reverseComparator field instead * / <nl> - public Comparator < ByteBuffer > getReverseComparator ( ) <nl> - { <nl> - return reverseComparator ; <nl> - } <nl> - <nl> / * convenience method * / <nl> public String getString ( Collection < ByteBuffer > names ) <nl> { <nl> @ @ - 121 , 7 + 115 , 7 @ @ public abstract class AbstractType < T > implements Comparator < ByteBuffer > <nl> return builder . toString ( ) ; <nl> } <nl> <nl> - public boolean isCommutative ( ) <nl> + public boolean isCounter ( ) <nl> { <nl> return false ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / CounterColumnType . java b / src / java / org / apache / cassandra / db / marshal / CounterColumnType . java <nl> index e1a886d . . 73e9f6f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / CounterColumnType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / CounterColumnType . java <nl> @ @ - 20 , 18 + 20 , 34 @ @ package org . apache . cassandra . db . marshal ; <nl> import java . nio . ByteBuffer ; <nl> <nl> import org . apache . cassandra . cql3 . CQL3Type ; <nl> - import org . apache . cassandra . db . * ; <nl> - import org . apache . cassandra . db . composites . CellName ; <nl> + import org . apache . cassandra . db . context . CounterContext ; <nl> import org . apache . cassandra . serializers . TypeSerializer ; <nl> import org . apache . cassandra . serializers . CounterSerializer ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> - public class CounterColumnType extends AbstractCommutativeType <nl> + public class CounterColumnType extends AbstractType < Long > <nl> { <nl> public static final CounterColumnType instance = new CounterColumnType ( ) ; <nl> <nl> CounterColumnType ( ) { } / / singleton <nl> <nl> + public boolean isCounter ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public Long compose ( ByteBuffer bytes ) <nl> + { <nl> + return CounterContext . instance ( ) . total ( bytes ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public ByteBuffer decompose ( Long value ) <nl> + { <nl> + return ByteBufferUtil . bytes ( value ) ; <nl> + } <nl> + <nl> public int compare ( ByteBuffer o1 , ByteBuffer o2 ) <nl> { <nl> if ( o1 = = null ) <nl> @ @ - 45 , 14 + 61 , 6 @ @ public class CounterColumnType extends AbstractCommutativeType <nl> return ByteBufferUtil . bytesToHex ( bytes ) ; <nl> } <nl> <nl> - / * * <nl> - * create commutative column <nl> - * / <nl> - public Cell createColumn ( CellName name , ByteBuffer value , long timestamp ) <nl> - { <nl> - return new CounterUpdateCell ( name , value , timestamp ) ; <nl> - } <nl> - <nl> public ByteBuffer fromString ( String source ) <nl> { <nl> return ByteBufferUtil . hexToBytes ( source ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index d4bd4ff . . cf8636b 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 139 , 10 + 139 , 9 @ @ public class StorageProxy implements StorageProxyMBean <nl> Iterable < InetAddress > targets , <nl> AbstractWriteResponseHandler responseHandler , <nl> String localDataCenter , <nl> - ConsistencyLevel consistency _ level ) <nl> + ConsistencyLevel consistencyLevel ) <nl> { <nl> - Runnable runnable = counterWriteTask ( mutation , targets , responseHandler , localDataCenter , consistency _ level ) ; <nl> - runnable . run ( ) ; <nl> + counterWriteTask ( mutation , targets , responseHandler , localDataCenter ) . run ( ) ; <nl> } <nl> } ; <nl> <nl> @ @ - 152 , 10 + 151 , 9 @ @ public class StorageProxy implements StorageProxyMBean <nl> Iterable < InetAddress > targets , <nl> AbstractWriteResponseHandler responseHandler , <nl> String localDataCenter , <nl> - ConsistencyLevel consistency _ level ) <nl> + ConsistencyLevel consistencyLevel ) <nl> { <nl> - Runnable runnable = counterWriteTask ( mutation , targets , responseHandler , localDataCenter , consistency _ level ) ; <nl> - StageManager . getStage ( Stage . MUTATION ) . execute ( runnable ) ; <nl> + StageManager . getStage ( Stage . MUTATION ) . execute ( counterWriteTask ( mutation , targets , responseHandler , localDataCenter ) ) ; <nl> } <nl> } ; <nl> } <nl> @ @ - 1100 , 8 + 1098 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> private static Runnable counterWriteTask ( final IMutation mutation , <nl> final Iterable < InetAddress > targets , <nl> final AbstractWriteResponseHandler responseHandler , <nl> - final String localDataCenter , <nl> - final ConsistencyLevel consistency _ level ) <nl> + final String localDataCenter ) <nl> { <nl> return new DroppableRunnable ( MessagingService . Verb . COUNTER _ MUTATION ) <nl> { <nl> @ @ - 1120 , 7 + 1117 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> <nl> / / then send to replicas , if any <nl> final Set < InetAddress > remotes = Sets . difference ( ImmutableSet . copyOf ( targets ) , ImmutableSet . of ( FBUtilities . getBroadcastAddress ( ) ) ) ; <nl> - if ( cm . shouldReplicateOnWrite ( ) & & ! remotes . isEmpty ( ) ) <nl> + if ( ! remotes . isEmpty ( ) & & cm . shouldReplicateOnWrite ( ) ) <nl> { <nl> / / We do the replication on another stage because it involves a read ( see CM . makeReplicationMutation ) <nl> / / and we want to avoid blocking too much the MUTATION stage <nl> @ @ - 2003 , 7 + 2000 , 11 @ @ public class StorageProxy implements StorageProxyMBean <nl> <nl> public interface WritePerformer <nl> { <nl> - public void apply ( IMutation mutation , Iterable < InetAddress > targets , AbstractWriteResponseHandler responseHandler , String localDataCenter , ConsistencyLevel consistency _ level ) throws OverloadedException ; <nl> + public void apply ( IMutation mutation , <nl> + Iterable < InetAddress > targets , <nl> + AbstractWriteResponseHandler responseHandler , <nl> + String localDataCenter , <nl> + ConsistencyLevel consistencyLevel ) throws OverloadedException ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> index 5859f92 . . 2c2e821 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> @ @ - 286 , 7 + 286 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> <nl> if ( cf . metadata ( ) . isSuper ( ) ) <nl> { <nl> - boolean isCounterCF = cf . metadata ( ) . getDefaultValidator ( ) . isCommutative ( ) ; <nl> + boolean isCounterCF = cf . metadata ( ) . isCounter ( ) ; <nl> return thriftifySuperColumns ( cf . getSortedColumns ( ) , reverseOrder , now , subcolumnsOnly , isCounterCF ) ; <nl> } <nl> else <nl> @ @ - 829 , 7 + 829 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> ThriftValidation . validateKey ( metadata , key ) ; <nl> <nl> org . apache . cassandra . db . Mutation mutation ; <nl> - if ( metadata . getDefaultValidator ( ) . isCommutative ( ) ) <nl> + if ( metadata . isCounter ( ) ) <nl> { <nl> ThriftConversion . fromThrift ( consistency _ level ) . validateCounterForWrite ( metadata ) ; <nl> counterMutation = counterMutation = = null ? new org . apache . cassandra . db . Mutation ( keyspace , key ) : counterMutation ; <nl> diff - - git a / src / java / org / apache / cassandra / thrift / ThriftValidation . java b / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> index d491636 . . 49cf39b 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> + + + b / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> @ @ - 92 , 12 + 92 , 12 @ @ public class ThriftValidation <nl> <nl> if ( isCommutativeOp ) <nl> { <nl> - if ( ! metadata . getDefaultValidator ( ) . isCommutative ( ) ) <nl> + if ( ! metadata . isCounter ( ) ) <nl> throw new org . apache . cassandra . exceptions . InvalidRequestException ( " invalid operation for non commutative columnfamily " + cfName ) ; <nl> } <nl> else <nl> { <nl> - if ( metadata . getDefaultValidator ( ) . isCommutative ( ) ) <nl> + if ( metadata . isCounter ( ) ) <nl> throw new org . apache . cassandra . exceptions . InvalidRequestException ( " invalid operation for commutative columnfamily " + cfName ) ; <nl> } <nl> return metadata ; <nl> @ @ - 297 , 7 + 297 , 7 @ @ public class ThriftValidation <nl> public static void validateColumnOrSuperColumn ( CFMetaData metadata , ColumnOrSuperColumn cosc ) <nl> throws org . apache . cassandra . exceptions . InvalidRequestException <nl> { <nl> - boolean isCommutative = metadata . getDefaultValidator ( ) . isCommutative ( ) ; <nl> + boolean isCommutative = metadata . isCounter ( ) ; <nl> <nl> int nulls = 0 ; <nl> if ( cosc . column = = null ) nulls + + ; <nl> @ @ - 405 , 7 + 405 , 7 @ @ public class ThriftValidation <nl> throw new org . apache . cassandra . exceptions . InvalidRequestException ( msg ) ; <nl> } <nl> <nl> - if ( metadata . getDefaultValidator ( ) . isCommutative ( ) ) <nl> + if ( metadata . isCounter ( ) ) <nl> { <nl> / / forcing server timestamp even if a timestamp was set for coherence with other counter operation <nl> del . timestamp = System . currentTimeMillis ( ) ;
NEAREST DIFF (one line): diff - - git a / bin / cqlsh b / bin / cqlsh <nl> index 6b61364 . . 8d98c28 100755 <nl> - - - a / bin / cqlsh <nl> + + + b / bin / cqlsh <nl> @ @ - 121 , 8 + 121 , 10 @ @ precedence over any defaults . " " " % globals ( ) <nl> parser = optparse . OptionParser ( description = description , epilog = epilog , <nl> usage = " Usage : % prog [ options ] [ host [ port ] ] " , <nl> version = ' cqlsh ' + version ) <nl> - parser . add _ option ( " - C " , " - - color " , action = " store _ true " , <nl> - help = " Enable color output . " ) <nl> + parser . add _ option ( " - C " , " - - color " , action = ' store _ true ' , dest = ' color ' , <nl> + help = ' Always use color output ' ) <nl> + parser . add _ option ( " - - no - color " , action = ' store _ false ' , dest = ' color ' , <nl> + help = ' Never use color output ' ) <nl> parser . add _ option ( " - u " , " - - username " , help = " Authenticate as user . " ) <nl> parser . add _ option ( " - p " , " - - password " , help = " Authenticate using password . " ) <nl> parser . add _ option ( ' - k ' , ' - - keyspace ' , help = ' Authenticate to the given keyspace . ' ) <nl> @ @ - 2598 , 9 + 2600 , 6 @ @ def read _ options ( cmdlineargs , environment ) : <nl> optvalues . keyspace = option _ with _ default ( configs . get , ' authentication ' , ' keyspace ' ) <nl> optvalues . completekey = option _ with _ default ( configs . get , ' ui ' , ' completekey ' , ' tab ' ) <nl> optvalues . color = option _ with _ default ( configs . getboolean , ' ui ' , ' color ' ) <nl> - if optvalues . color is None : <nl> - # default yes if tty <nl> - optvalues . color = should _ use _ color ( ) <nl> optvalues . debug = False <nl> optvalues . file = None <nl> optvalues . tty = sys . stdin . isatty ( ) <nl> @ @ - 2620 , 9 + 2619 , 16 @ @ def read _ options ( cmdlineargs , environment ) : <nl> port = arguments [ 1 ] <nl> <nl> if options . file is not None : <nl> - options . color = False <nl> options . tty = False <nl> <nl> + if optvalues . color in ( True , False ) : <nl> + options . color = optvalues . color <nl> + else : <nl> + if options . file is not None : <nl> + options . color = False <nl> + else : <nl> + options . color = should _ use _ color ( ) <nl> + <nl> options . cqlversion , cqlvertup = full _ cql _ version ( options . cqlversion ) <nl> if cqlvertup [ 0 ] < 3 : <nl> options . cqlmodule = cqlhandling

TEST DIFF:
diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index 1f9fd8b . . 2f1c8fa 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 157 , 7 + 157 , 7 @ @ key _ cache _ save _ period : 14400 
 row _ cache _ size _ in _ mb : 0 
 
 # Duration in seconds after which Cassandra should 
 - # safe the row cache . Caches are saved to saved _ caches _ directory as specified 
 + # save the row cache . Caches are saved to saved _ caches _ directory as specified 
 # in this configuration file . 
 # 
 # Saved caches greatly improve cold - start speeds , and is relatively cheap in 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index cdc4cdb . . 817d4a3 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 2149 , 6 + 2149 , 11 @ @ public final class CFMetaData 
 return true ; 
 } 
 
 + public boolean isCounter ( ) 
 + { 
 + return defaultValidator . isCounter ( ) ; 
 + } 
 + 
 public void validateColumns ( Iterable < Cell > columns ) 
 { 
 for ( Cell cell : columns ) 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index 5c737d4 . . 2ea8e38 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 50 , 25 + 50 , 25 @ @ public class Config 
 public String initial _ token ; 
 public Integer num _ tokens = 1 ; 
 
 - public volatile Long request _ timeout _ in _ ms = new Long ( 10000 ) ; 
 + public volatile Long request _ timeout _ in _ ms = 10000L ; 
 
 - public Long read _ request _ timeout _ in _ ms = new Long ( 5000 ) ; 
 + public volatile Long read _ request _ timeout _ in _ ms = 5000L ; 
 
 - public Long range _ request _ timeout _ in _ ms = new Long ( 10000 ) ; 
 + public volatile Long range _ request _ timeout _ in _ ms = 10000L ; 
 
 - public Long write _ request _ timeout _ in _ ms = new Long ( 2000 ) ; 
 + public volatile Long write _ request _ timeout _ in _ ms = 2000L ; 
 
 - public Long cas _ contention _ timeout _ in _ ms = new Long ( 1000 ) ; 
 + public volatile Long cas _ contention _ timeout _ in _ ms = 1000L ; 
 
 - public Long truncate _ request _ timeout _ in _ ms = new Long ( 60000 ) ; 
 + public volatile Long truncate _ request _ timeout _ in _ ms = 60000L ; 
 
 - public Integer streaming _ socket _ timeout _ in _ ms = new Integer ( 0 ) ; 
 + public Integer streaming _ socket _ timeout _ in _ ms = 0 ; 
 
 public boolean cross _ node _ timeout = false ; 
 
 public volatile Double phi _ convict _ threshold = 8 . 0 ; 
 
 - public Integer concurrent _ reads = 8 ; 
 + public Integer concurrent _ reads = 32 ; 
 public Integer concurrent _ writes = 32 ; 
 public Integer concurrent _ replicates = 32 ; 
 
 @ @ - 161 , 7 + 161 , 7 @ @ public class Config 
 
 public Long key _ cache _ size _ in _ mb = null ; 
 public volatile int key _ cache _ save _ period = 14400 ; 
 - public int key _ cache _ keys _ to _ save = Integer . MAX _ VALUE ; 
 + public volatile int key _ cache _ keys _ to _ save = Integer . MAX _ VALUE ; 
 
 public long row _ cache _ size _ in _ mb = 0 ; 
 public volatile int row _ cache _ save _ period = 0 ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java 
 index ca43d20 . . d0478f5 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java 
 @ @ - 69 , 7 + 69 , 7 @ @ public class CreateIndexStatement extends SchemaAlteringStatement 
 public void validate ( ClientState state ) throws RequestValidationException 
 { 
 CFMetaData cfm = ThriftValidation . validateColumnFamily ( keyspace ( ) , columnFamily ( ) ) ; 
 - if ( cfm . getDefaultValidator ( ) . isCommutative ( ) ) 
 + if ( cfm . isCounter ( ) ) 
 throw new InvalidRequestException ( " Secondary indexes are not supported on counter tables " ) ; 
 
 ColumnDefinition cd = cfm . getColumnDefinition ( target . column ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 index 148edda . . c2a0080 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 @ @ - 91 , 7 + 91 , 7 @ @ public abstract class ModificationStatement implements CQLStatement , MeasurableF 
 
 public boolean isCounter ( ) 
 { 
 - return cfm . getDefaultValidator ( ) . isCommutative ( ) ; 
 + return cfm . isCounter ( ) ; 
 } 
 
 public long getTimestamp ( long now , List < ByteBuffer > variables ) throws InvalidRequestException 
 diff - - git a / src / java / org / apache / cassandra / db / Cell . java b / src / java / org / apache / cassandra / db / Cell . java 
 index 537a744 . . 3e04f9b 100644 
 - - - a / src / java / org / apache / cassandra / db / Cell . java 
 + + + b / src / java / org / apache / cassandra / db / Cell . java 
 @ @ - 268 , 15 + 268 , 11 @ @ public class Cell implements OnDiskAtom 
 
 public String getString ( CellNameType comparator ) 
 { 
 - StringBuilder sb = new StringBuilder ( ) ; 
 - sb . append ( comparator . getString ( name ) ) ; 
 - sb . append ( " : " ) ; 
 - sb . append ( isMarkedForDelete ( System . currentTimeMillis ( ) ) ) ; 
 - sb . append ( " : " ) ; 
 - sb . append ( value . remaining ( ) ) ; 
 - sb . append ( " @ " ) ; 
 - sb . append ( timestamp ( ) ) ; 
 - return sb . toString ( ) ; 
 + return String . format ( " % s : % b : % d @ % d " , 
 + comparator . getString ( name ) , 
 + isMarkedForDelete ( System . currentTimeMillis ( ) ) , 
 + value . remaining ( ) , 
 + timestamp ) ; 
 } 
 
 protected void validateName ( CFMetaData metadata ) throws MarshalException 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 2ea60f1 . . 9ce6b0c 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 125 , 7 + 125 , 7 @ @ public abstract class ColumnFamily implements Iterable < Cell > , IRowCacheEntry 
 
 public void addColumn ( CellName name , ByteBuffer value , long timestamp , int timeToLive ) 
 { 
 - assert ! metadata ( ) . getDefaultValidator ( ) . isCommutative ( ) ; 
 + assert ! metadata ( ) . isCounter ( ) ; 
 Cell cell = Cell . create ( name , value , timestamp , timeToLive , metadata ( ) ) ; 
 addColumn ( cell ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / CounterCell . java b / src / java / org / apache / cassandra / db / CounterCell . java 
 index 0a1c992 . . 76949d4 100644 
 - - - a / src / java / org / apache / cassandra / db / CounterCell . java 
 + + + b / src / java / org / apache / cassandra / db / CounterCell . java 
 @ @ - 21 , 9 + 21 , 6 @ @ import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 import java . security . MessageDigest ; 
 
 - import org . slf4j . Logger ; 
 - import org . slf4j . LoggerFactory ; 
 - 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . db . composites . CellName ; 
 import org . apache . cassandra . db . composites . CellNameType ; 
 @ @ - 39 , 8 + 36 , 6 @ @ import org . apache . cassandra . utils . * ; 
 * / 
 public class CounterCell extends Cell 
 { 
 - private static final Logger logger = LoggerFactory . getLogger ( CounterCell . class ) ; 
 - 
 protected static final CounterContext contextManager = CounterContext . instance ( ) ; 
 
 private final long timestampOfLastDelete ; 
 @ @ - 92 , 10 + 87 , 7 @ @ public class CounterCell extends Cell 
 @ Override 
 public int dataSize ( ) 
 { 
 - / * 
 - * A counter column adds to a Cell : 
 - * + 8 bytes for timestampOfLastDelete 
 - * / 
 + / / A counter column adds 8 bytes for timestampOfLastDelete to Cell . 
 return super . dataSize ( ) + TypeSizes . NATIVE . sizeof ( timestampOfLastDelete ) ; 
 } 
 
 @ @ - 157 , 8 + 149 , 6 @ @ public class CounterCell extends Cell 
 @ Override 
 public Cell reconcile ( Cell cell , Allocator allocator ) 
 { 
 - assert ( cell instanceof CounterCell ) | | ( cell instanceof DeletedCell ) : " Wrong class type : " + cell . getClass ( ) ; 
 - 
 / / live + tombstone : track last tombstone 
 if ( cell . isMarkedForDelete ( Long . MIN _ VALUE ) ) / / cannot be an expired cell , so the current time is irrelevant 
 { 
 @ @ - 175 , 6 + 165 , 9 @ @ public class CounterCell extends Cell 
 / / live last delete < tombstone 
 return new CounterCell ( name ( ) , value ( ) , timestamp ( ) , cell . timestamp ( ) ) ; 
 } 
 + 
 + assert cell instanceof CounterCell : " Wrong class type : " + cell . getClass ( ) ; 
 + 
 / / live < live last delete 
 if ( timestamp ( ) < ( ( CounterCell ) cell ) . timestampOfLastDelete ( ) ) 
 return cell ; 
 @ @ - 182 , 11 + 175 , 10 @ @ public class CounterCell extends Cell 
 if ( timestampOfLastDelete ( ) > cell . timestamp ( ) ) 
 return this ; 
 / / live + live : merge clocks ; update value 
 - return new CounterCell ( 
 - name ( ) , 
 - contextManager . merge ( value ( ) , cell . value ( ) , allocator ) , 
 - Math . max ( timestamp ( ) , cell . timestamp ( ) ) , 
 - Math . max ( timestampOfLastDelete ( ) , ( ( CounterCell ) cell ) . timestampOfLastDelete ( ) ) ) ; 
 + return new CounterCell ( name ( ) , 
 + contextManager . merge ( value ( ) , cell . value ( ) , allocator ) , 
 + Math . max ( timestamp ( ) , cell . timestamp ( ) ) , 
 + Math . max ( timestampOfLastDelete ( ) , ( ( CounterCell ) cell ) . timestampOfLastDelete ( ) ) ) ; 
 } 
 
 @ Override 
 @ @ - 199 , 9 + 191 , 7 @ @ public class CounterCell extends Cell 
 @ Override 
 public int hashCode ( ) 
 { 
 - int result = super . hashCode ( ) ; 
 - result = 31 * result + ( int ) ( timestampOfLastDelete ^ ( timestampOfLastDelete > > > 32 ) ) ; 
 - return result ; 
 + return 31 * super . hashCode ( ) + ( int ) ( timestampOfLastDelete ^ ( timestampOfLastDelete > > > 32 ) ) ; 
 } 
 
 @ Override 
 @ @ - 219 , 17 + 209 , 11 @ @ public class CounterCell extends Cell 
 @ Override 
 public String getString ( CellNameType comparator ) 
 { 
 - StringBuilder sb = new StringBuilder ( ) ; 
 - sb . append ( comparator . getString ( name ) ) ; 
 - sb . append ( " : " ) ; 
 - sb . append ( false ) ; 
 - sb . append ( " : " ) ; 
 - sb . append ( contextManager . toString ( value ) ) ; 
 - sb . append ( " @ " ) ; 
 - sb . append ( timestamp ( ) ) ; 
 - sb . append ( " ! " ) ; 
 - sb . append ( timestampOfLastDelete ) ; 
 - return sb . toString ( ) ; 
 + return String . format ( " % s : false : % s @ % d ! % d " , 
 + comparator . getString ( name ) , 
 + contextManager . toString ( value ) , 
 + timestamp , 
 + timestampOfLastDelete ) ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / db / CounterMutation . java b / src / java / org / apache / cassandra / db / CounterMutation . java 
 index a07dd9b . . 7dcb05c 100644 
 - - - a / src / java / org / apache / cassandra / db / CounterMutation . java 
 + + + b / src / java / org / apache / cassandra / db / CounterMutation . java 
 @ @ - 78 , 7 + 78 , 7 @ @ public class CounterMutation implements IMutation 
 
 public Mutation makeReplicationMutation ( ) 
 { 
 - List < ReadCommand > readCommands = new LinkedList < ReadCommand > ( ) ; 
 + List < ReadCommand > readCommands = new LinkedList < > ( ) ; 
 long timestamp = System . currentTimeMillis ( ) ; 
 for ( ColumnFamily columnFamily : mutation . getColumnFamilies ( ) ) 
 { 
 @ @ - 111 , 7 + 111 , 7 @ @ public class CounterMutation implements IMutation 
 
 public MessageOut < CounterMutation > makeMutationMessage ( ) 
 { 
 - return new MessageOut < CounterMutation > ( MessagingService . Verb . COUNTER _ MUTATION , this , serializer ) ; 
 + return new MessageOut < > ( MessagingService . Verb . COUNTER _ MUTATION , this , serializer ) ; 
 } 
 
 public boolean shouldReplicateOnWrite ( ) 
 @ @ - 133 , 9 + 133 , 7 @ @ public class CounterMutation implements IMutation 
 ColumnFamily cf = cf _ . cloneMeShallow ( ) ; 
 ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( cf . id ( ) ) ; 
 for ( Cell cell : cf _ ) 
 - { 
 cf . addColumn ( cell . localCopy ( cfs ) , HeapAllocator . instance ) ; 
 - } 
 m . add ( cf ) ; 
 } 
 m . apply ( ) ; 
 @ @ - 145 , 7 + 143 , 6 @ @ public class CounterMutation implements IMutation 
 { 
 if ( ! ( m instanceof CounterMutation ) ) 
 throw new IllegalArgumentException ( ) ; 
 - 
 CounterMutation cm = ( CounterMutation ) m ; 
 mutation . addAll ( cm . mutation ) ; 
 } 
 @ @ - 158 , 10 + 155 , 7 @ @ public class CounterMutation implements IMutation 
 
 public String toString ( boolean shallow ) 
 { 
 - StringBuilder buff = new StringBuilder ( " CounterMutation ( " ) ; 
 - buff . append ( mutation . toString ( shallow ) ) ; 
 - buff . append ( " , " ) . append ( consistency . toString ( ) ) ; 
 - return buff . append ( " ) " ) . toString ( ) ; 
 + return String . format ( " CounterMutation ( % s , % s ) " , mutation . toString ( shallow ) , consistency ) ; 
 } 
 
 public static class CounterMutationSerializer implements IVersionedSerializer < CounterMutation > 
 diff - - git a / src / java / org / apache / cassandra / db / CounterMutationVerbHandler . java b / src / java / org / apache / cassandra / db / CounterMutationVerbHandler . java 
 index 966a015 . . d65fbd7 100644 
 - - - a / src / java / org / apache / cassandra / db / CounterMutationVerbHandler . java 
 + + + b / src / java / org / apache / cassandra / db / CounterMutationVerbHandler . java 
 @ @ - 37 , 8 + 37 , 7 @ @ public class CounterMutationVerbHandler implements IVerbHandler < CounterMutation > 
 try 
 { 
 final CounterMutation cm = message . payload ; 
 - if ( logger . isDebugEnabled ( ) ) 
 - logger . debug ( " Applying forwarded { } " , cm ) ; 
 + logger . debug ( " Applying forwarded { } " , cm ) ; 
 
 String localDataCenter = DatabaseDescriptor . getEndpointSnitch ( ) . getDatacenter ( FBUtilities . getBroadcastAddress ( ) ) ; 
 / / We should not wait for the result of the write in this thread , 
 @ @ - 48 , 11 + 47 , 11 @ @ public class CounterMutationVerbHandler implements IVerbHandler < CounterMutation > 
 / / will not be called if the request timeout , but this is ok 
 / / because the coordinator of the counter mutation will timeout on 
 / / it ' s own in that case . 
 - StorageProxy . applyCounterMutationOnLeader ( cm , localDataCenter , new Runnable ( ) { 
 + StorageProxy . applyCounterMutationOnLeader ( cm , localDataCenter , new Runnable ( ) 
 + { 
 public void run ( ) 
 { 
 - WriteResponse response = new WriteResponse ( ) ; 
 - MessagingService . instance ( ) . sendReply ( response . createMessage ( ) , id , message . from ) ; 
 + MessagingService . instance ( ) . sendReply ( new WriteResponse ( ) . createMessage ( ) , id , message . from ) ; 
 } 
 } ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / CounterUpdateCell . java b / src / java / org / apache / cassandra / db / CounterUpdateCell . java 
 index f6bb3d4 . . dd2bf2a 100644 
 - - - a / src / java / org / apache / cassandra / db / CounterUpdateCell . java 
 + + + b / src / java / org / apache / cassandra / db / CounterUpdateCell . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . db ; 
 import java . nio . ByteBuffer ; 
 
 import org . apache . cassandra . db . composites . CellName ; 
 + import org . apache . cassandra . db . composites . CellNameType ; 
 import org . apache . cassandra . db . context . CounterContext ; 
 import org . apache . cassandra . utils . Allocator ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 @ @ - 96 , 4 + 97 , 10 @ @ public class CounterUpdateCell extends Cell 
 timestamp ( ) , 
 Long . MIN _ VALUE ) ; 
 } 
 + 
 + @ Override 
 + public String getString ( CellNameType comparator ) 
 + { 
 + return String . format ( " % s : % s @ % d " , comparator . getString ( name ) , ByteBufferUtil . toLong ( value ) , timestamp ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / ExpiringCell . java b / src / java / org / apache / cassandra / db / ExpiringCell . java 
 index 2b9541c . . b15514e 100644 
 - - - a / src / java / org / apache / cassandra / db / ExpiringCell . java 
 + + + b / src / java / org / apache / cassandra / db / ExpiringCell . java 
 @ @ - 147 , 11 + 147 , 7 @ @ public class ExpiringCell extends Cell 
 @ Override 
 public String getString ( CellNameType comparator ) 
 { 
 - StringBuilder sb = new StringBuilder ( ) ; 
 - sb . append ( super . getString ( comparator ) ) ; 
 - sb . append ( " ! " ) ; 
 - sb . append ( timeToLive ) ; 
 - return sb . toString ( ) ; 
 + return String . format ( " % s ! % d " , super . getString ( comparator ) , timeToLive ) ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index 7927574 . . 2a8d68d 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 616 , 7 + 616 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 public static CleanupStrategy get ( ColumnFamilyStore cfs , Collection < Range < Token > > ranges , CounterId . OneShotRenewer renewer ) 
 { 
 - if ( cfs . indexManager . hasIndexes ( ) | | cfs . metadata . getDefaultValidator ( ) . isCommutative ( ) ) 
 + if ( cfs . indexManager . hasIndexes ( ) | | cfs . metadata . isCounter ( ) ) 
 return new Full ( cfs , ranges , renewer ) ; 
 
 return new Bounded ( cfs , ranges ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / Scrubber . java b / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 index eabfdbc . . 978865c 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 @ @ - 84 , 7 + 84 , 7 @ @ public class Scrubber implements Closeable 
 this . controller = isOffline 
 ? new ScrubController ( cfs ) 
 : new CompactionController ( cfs , Collections . singleton ( sstable ) , CompactionManager . getDefaultGcBefore ( cfs ) ) ; 
 - this . isCommutative = cfs . metadata . getDefaultValidator ( ) . isCommutative ( ) ; 
 + this . isCommutative = cfs . metadata . isCounter ( ) ; 
 this . expectedBloomFilterSize = Math . max ( cfs . metadata . getIndexInterval ( ) , ( int ) ( SSTableReader . getApproximateKeyCount ( toScrub ) ) ) ; 
 
 / / loop through each row , deserializing to check for damage . 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractCommutativeType . java b / src / java / org / apache / cassandra / db / marshal / AbstractCommutativeType . java 
 deleted file mode 100644 
 index 4b26d5d . . 0000000 
 - - - a / src / java / org / apache / cassandra / db / marshal / AbstractCommutativeType . java 
 + + + / dev / null 
 @ @ - 1 , 50 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . db . marshal ; 
 - 
 - import java . nio . ByteBuffer ; 
 - 
 - import org . apache . cassandra . db . Cell ; 
 - import org . apache . cassandra . db . composites . CellName ; 
 - import org . apache . cassandra . db . context . CounterContext ; 
 - import org . apache . cassandra . utils . ByteBufferUtil ; 
 - 
 - public abstract class AbstractCommutativeType extends AbstractType < Long > 
 - { 
 - public boolean isCommutative ( ) 
 - { 
 - return true ; 
 - } 
 - 
 - @ Override 
 - public Long compose ( ByteBuffer bytes ) 
 - { 
 - return CounterContext . instance ( ) . total ( bytes ) ; 
 - } 
 - 
 - @ Override 
 - public ByteBuffer decompose ( Long value ) 
 - { 
 - return ByteBufferUtil . bytes ( value ) ; 
 - } 
 - 
 - / * * 
 - * create commutative column 
 - * / 
 - public abstract Cell createColumn ( CellName name , ByteBuffer value , long timestamp ) ; 
 - } 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractType . java b / src / java / org / apache / cassandra / db / marshal / AbstractType . java 
 index cefa465 . . ce233de 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / AbstractType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / AbstractType . java 
 @ @ - 104 , 12 + 104 , 6 @ @ public abstract class AbstractType < T > implements Comparator < ByteBuffer > 
 
 public abstract TypeSerializer < T > getSerializer ( ) ; 
 
 - / * * @ deprecated use reverseComparator field instead * / 
 - public Comparator < ByteBuffer > getReverseComparator ( ) 
 - { 
 - return reverseComparator ; 
 - } 
 - 
 / * convenience method * / 
 public String getString ( Collection < ByteBuffer > names ) 
 { 
 @ @ - 121 , 7 + 115 , 7 @ @ public abstract class AbstractType < T > implements Comparator < ByteBuffer > 
 return builder . toString ( ) ; 
 } 
 
 - public boolean isCommutative ( ) 
 + public boolean isCounter ( ) 
 { 
 return false ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / CounterColumnType . java b / src / java / org / apache / cassandra / db / marshal / CounterColumnType . java 
 index e1a886d . . 73e9f6f 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / CounterColumnType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / CounterColumnType . java 
 @ @ - 20 , 18 + 20 , 34 @ @ package org . apache . cassandra . db . marshal ; 
 import java . nio . ByteBuffer ; 
 
 import org . apache . cassandra . cql3 . CQL3Type ; 
 - import org . apache . cassandra . db . * ; 
 - import org . apache . cassandra . db . composites . CellName ; 
 + import org . apache . cassandra . db . context . CounterContext ; 
 import org . apache . cassandra . serializers . TypeSerializer ; 
 import org . apache . cassandra . serializers . CounterSerializer ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 - public class CounterColumnType extends AbstractCommutativeType 
 + public class CounterColumnType extends AbstractType < Long > 
 { 
 public static final CounterColumnType instance = new CounterColumnType ( ) ; 
 
 CounterColumnType ( ) { } / / singleton 
 
 + public boolean isCounter ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public Long compose ( ByteBuffer bytes ) 
 + { 
 + return CounterContext . instance ( ) . total ( bytes ) ; 
 + } 
 + 
 + @ Override 
 + public ByteBuffer decompose ( Long value ) 
 + { 
 + return ByteBufferUtil . bytes ( value ) ; 
 + } 
 + 
 public int compare ( ByteBuffer o1 , ByteBuffer o2 ) 
 { 
 if ( o1 = = null ) 
 @ @ - 45 , 14 + 61 , 6 @ @ public class CounterColumnType extends AbstractCommutativeType 
 return ByteBufferUtil . bytesToHex ( bytes ) ; 
 } 
 
 - / * * 
 - * create commutative column 
 - * / 
 - public Cell createColumn ( CellName name , ByteBuffer value , long timestamp ) 
 - { 
 - return new CounterUpdateCell ( name , value , timestamp ) ; 
 - } 
 - 
 public ByteBuffer fromString ( String source ) 
 { 
 return ByteBufferUtil . hexToBytes ( source ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index d4bd4ff . . cf8636b 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 139 , 10 + 139 , 9 @ @ public class StorageProxy implements StorageProxyMBean 
 Iterable < InetAddress > targets , 
 AbstractWriteResponseHandler responseHandler , 
 String localDataCenter , 
 - ConsistencyLevel consistency _ level ) 
 + ConsistencyLevel consistencyLevel ) 
 { 
 - Runnable runnable = counterWriteTask ( mutation , targets , responseHandler , localDataCenter , consistency _ level ) ; 
 - runnable . run ( ) ; 
 + counterWriteTask ( mutation , targets , responseHandler , localDataCenter ) . run ( ) ; 
 } 
 } ; 
 
 @ @ - 152 , 10 + 151 , 9 @ @ public class StorageProxy implements StorageProxyMBean 
 Iterable < InetAddress > targets , 
 AbstractWriteResponseHandler responseHandler , 
 String localDataCenter , 
 - ConsistencyLevel consistency _ level ) 
 + ConsistencyLevel consistencyLevel ) 
 { 
 - Runnable runnable = counterWriteTask ( mutation , targets , responseHandler , localDataCenter , consistency _ level ) ; 
 - StageManager . getStage ( Stage . MUTATION ) . execute ( runnable ) ; 
 + StageManager . getStage ( Stage . MUTATION ) . execute ( counterWriteTask ( mutation , targets , responseHandler , localDataCenter ) ) ; 
 } 
 } ; 
 } 
 @ @ - 1100 , 8 + 1098 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 private static Runnable counterWriteTask ( final IMutation mutation , 
 final Iterable < InetAddress > targets , 
 final AbstractWriteResponseHandler responseHandler , 
 - final String localDataCenter , 
 - final ConsistencyLevel consistency _ level ) 
 + final String localDataCenter ) 
 { 
 return new DroppableRunnable ( MessagingService . Verb . COUNTER _ MUTATION ) 
 { 
 @ @ - 1120 , 7 + 1117 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 
 / / then send to replicas , if any 
 final Set < InetAddress > remotes = Sets . difference ( ImmutableSet . copyOf ( targets ) , ImmutableSet . of ( FBUtilities . getBroadcastAddress ( ) ) ) ; 
 - if ( cm . shouldReplicateOnWrite ( ) & & ! remotes . isEmpty ( ) ) 
 + if ( ! remotes . isEmpty ( ) & & cm . shouldReplicateOnWrite ( ) ) 
 { 
 / / We do the replication on another stage because it involves a read ( see CM . makeReplicationMutation ) 
 / / and we want to avoid blocking too much the MUTATION stage 
 @ @ - 2003 , 7 + 2000 , 11 @ @ public class StorageProxy implements StorageProxyMBean 
 
 public interface WritePerformer 
 { 
 - public void apply ( IMutation mutation , Iterable < InetAddress > targets , AbstractWriteResponseHandler responseHandler , String localDataCenter , ConsistencyLevel consistency _ level ) throws OverloadedException ; 
 + public void apply ( IMutation mutation , 
 + Iterable < InetAddress > targets , 
 + AbstractWriteResponseHandler responseHandler , 
 + String localDataCenter , 
 + ConsistencyLevel consistencyLevel ) throws OverloadedException ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 index 5859f92 . . 2c2e821 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 @ @ - 286 , 7 + 286 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 
 if ( cf . metadata ( ) . isSuper ( ) ) 
 { 
 - boolean isCounterCF = cf . metadata ( ) . getDefaultValidator ( ) . isCommutative ( ) ; 
 + boolean isCounterCF = cf . metadata ( ) . isCounter ( ) ; 
 return thriftifySuperColumns ( cf . getSortedColumns ( ) , reverseOrder , now , subcolumnsOnly , isCounterCF ) ; 
 } 
 else 
 @ @ - 829 , 7 + 829 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 ThriftValidation . validateKey ( metadata , key ) ; 
 
 org . apache . cassandra . db . Mutation mutation ; 
 - if ( metadata . getDefaultValidator ( ) . isCommutative ( ) ) 
 + if ( metadata . isCounter ( ) ) 
 { 
 ThriftConversion . fromThrift ( consistency _ level ) . validateCounterForWrite ( metadata ) ; 
 counterMutation = counterMutation = = null ? new org . apache . cassandra . db . Mutation ( keyspace , key ) : counterMutation ; 
 diff - - git a / src / java / org / apache / cassandra / thrift / ThriftValidation . java b / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 index d491636 . . 49cf39b 100644 
 - - - a / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 + + + b / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 @ @ - 92 , 12 + 92 , 12 @ @ public class ThriftValidation 
 
 if ( isCommutativeOp ) 
 { 
 - if ( ! metadata . getDefaultValidator ( ) . isCommutative ( ) ) 
 + if ( ! metadata . isCounter ( ) ) 
 throw new org . apache . cassandra . exceptions . InvalidRequestException ( " invalid operation for non commutative columnfamily " + cfName ) ; 
 } 
 else 
 { 
 - if ( metadata . getDefaultValidator ( ) . isCommutative ( ) ) 
 + if ( metadata . isCounter ( ) ) 
 throw new org . apache . cassandra . exceptions . InvalidRequestException ( " invalid operation for commutative columnfamily " + cfName ) ; 
 } 
 return metadata ; 
 @ @ - 297 , 7 + 297 , 7 @ @ public class ThriftValidation 
 public static void validateColumnOrSuperColumn ( CFMetaData metadata , ColumnOrSuperColumn cosc ) 
 throws org . apache . cassandra . exceptions . InvalidRequestException 
 { 
 - boolean isCommutative = metadata . getDefaultValidator ( ) . isCommutative ( ) ; 
 + boolean isCommutative = metadata . isCounter ( ) ; 
 
 int nulls = 0 ; 
 if ( cosc . column = = null ) nulls + + ; 
 @ @ - 405 , 7 + 405 , 7 @ @ public class ThriftValidation 
 throw new org . apache . cassandra . exceptions . InvalidRequestException ( msg ) ; 
 } 
 
 - if ( metadata . getDefaultValidator ( ) . isCommutative ( ) ) 
 + if ( metadata . isCounter ( ) ) 
 { 
 / / forcing server timestamp even if a timestamp was set for coherence with other counter operation 
 del . timestamp = System . currentTimeMillis ( ) ;

NEAREST DIFF:
diff - - git a / bin / cqlsh b / bin / cqlsh 
 index 6b61364 . . 8d98c28 100755 
 - - - a / bin / cqlsh 
 + + + b / bin / cqlsh 
 @ @ - 121 , 8 + 121 , 10 @ @ precedence over any defaults . " " " % globals ( ) 
 parser = optparse . OptionParser ( description = description , epilog = epilog , 
 usage = " Usage : % prog [ options ] [ host [ port ] ] " , 
 version = ' cqlsh ' + version ) 
 - parser . add _ option ( " - C " , " - - color " , action = " store _ true " , 
 - help = " Enable color output . " ) 
 + parser . add _ option ( " - C " , " - - color " , action = ' store _ true ' , dest = ' color ' , 
 + help = ' Always use color output ' ) 
 + parser . add _ option ( " - - no - color " , action = ' store _ false ' , dest = ' color ' , 
 + help = ' Never use color output ' ) 
 parser . add _ option ( " - u " , " - - username " , help = " Authenticate as user . " ) 
 parser . add _ option ( " - p " , " - - password " , help = " Authenticate using password . " ) 
 parser . add _ option ( ' - k ' , ' - - keyspace ' , help = ' Authenticate to the given keyspace . ' ) 
 @ @ - 2598 , 9 + 2600 , 6 @ @ def read _ options ( cmdlineargs , environment ) : 
 optvalues . keyspace = option _ with _ default ( configs . get , ' authentication ' , ' keyspace ' ) 
 optvalues . completekey = option _ with _ default ( configs . get , ' ui ' , ' completekey ' , ' tab ' ) 
 optvalues . color = option _ with _ default ( configs . getboolean , ' ui ' , ' color ' ) 
 - if optvalues . color is None : 
 - # default yes if tty 
 - optvalues . color = should _ use _ color ( ) 
 optvalues . debug = False 
 optvalues . file = None 
 optvalues . tty = sys . stdin . isatty ( ) 
 @ @ - 2620 , 9 + 2619 , 16 @ @ def read _ options ( cmdlineargs , environment ) : 
 port = arguments [ 1 ] 
 
 if options . file is not None : 
 - options . color = False 
 options . tty = False 
 
 + if optvalues . color in ( True , False ) : 
 + options . color = optvalues . color 
 + else : 
 + if options . file is not None : 
 + options . color = False 
 + else : 
 + options . color = should _ use _ color ( ) 
 + 
 options . cqlversion , cqlvertup = full _ cql _ version ( options . cqlversion ) 
 if cqlvertup [ 0 ] < 3 : 
 options . cqlmodule = cqlhandling
