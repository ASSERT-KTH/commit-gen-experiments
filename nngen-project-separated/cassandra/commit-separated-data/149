BLEU SCORE: 0.04767707020457096

TEST MSG: Client TOPOLOGY _ CHANGE messages have wrong port .
GENERATED MSG: Decommissioned nodes will not rejoin the cluster .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6c9e30a . . a8dbbba 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Client TOPOLOGY _ CHANGE messages have wrong port . ( CASSANDRA - 14398 ) <nl> * Add ability to load new SSTables from a separate directory ( CASSANDRA - 6719 ) <nl> * Eliminate background repair and probablistic read _ repair _ chance table options <nl> ( CASSANDRA - 13910 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 6cbc49a . . 4f62dd5 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 1699 , 7 + 1699 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> { <nl> try <nl> { <nl> - InetAddressAndPort address = InetAddressAndPort . getByName ( Gossiper . instance . getEndpointStateForEndpoint ( endpoint ) . getApplicationState ( ApplicationState . RPC _ ADDRESS ) . value ) ; <nl> + InetAddressAndPort address = InetAddressAndPort . getByName ( Gossiper . instance . getEndpointStateForEndpoint ( endpoint ) . getApplicationState ( ApplicationState . NATIVE _ ADDRESS _ AND _ PORT ) . value ) ; <nl> return address . getHostAddress ( withPort ) ; <nl> } <nl> catch ( UnknownHostException e ) <nl> diff - - git a / test / unit / org / apache / cassandra / service / StorageServiceServerTest . java b / test / unit / org / apache / cassandra / service / StorageServiceServerTest . java <nl> index 3884f5a . . 8c4f5f6 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / StorageServiceServerTest . java <nl> + + + b / test / unit / org / apache / cassandra / service / StorageServiceServerTest . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . io . File ; <nl> import java . io . FileWriter ; <nl> import java . io . IOException ; <nl> import java . io . PrintWriter ; <nl> + import java . net . InetAddress ; <nl> import java . util . * ; <nl> <nl> import com . google . common . collect . HashMultimap ; <nl> @ @ - 34 , 6 + 35 , 9 @ @ import org . junit . runner . RunWith ; <nl> import org . apache . cassandra . OrderedJUnit4ClassRunner ; <nl> import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . gms . ApplicationState ; <nl> + import org . apache . cassandra . gms . Gossiper ; <nl> + import org . apache . cassandra . gms . VersionedValue ; <nl> import org . apache . cassandra . locator . InetAddressAndPort ; <nl> import org . apache . cassandra . schema . SchemaConstants ; <nl> import org . apache . cassandra . schema . KeyspaceMetadata ; <nl> @ @ - 592 , 4 + 596 , 26 @ @ public class StorageServiceServerTest <nl> repairRangeFrom = StorageService . instance . createRepairRangeFrom ( " 2000 " , " 2000 " ) ; <nl> assert repairRangeFrom . size ( ) = = 0 ; <nl> } <nl> + <nl> + / * * <nl> + * Test that StorageService . getNativeAddress returns the correct value based on available yaml and gossip state <nl> + * @ throws Exception <nl> + * / <nl> + @ Test <nl> + public void testGetNativeAddress ( ) throws Exception <nl> + { <nl> + String internalAddressString = " 127 . 0 . 0 . 2 : 666 " ; <nl> + InetAddressAndPort internalAddress = InetAddressAndPort . getByName ( internalAddressString ) ; <nl> + Gossiper . instance . addSavedEndpoint ( internalAddress ) ; <nl> + / / Default to using the provided address with the configured port <nl> + assertEquals ( " 127 . 0 . 0 . 2 : " + DatabaseDescriptor . getNativeTransportPort ( ) , StorageService . instance . getNativeaddress ( internalAddress , true ) ) ; <nl> + <nl> + VersionedValue . VersionedValueFactory valueFactory = new VersionedValue . VersionedValueFactory ( Murmur3Partitioner . instance ) ; <nl> + / / If we don ' t have the port use the gossip address , but with the configured port <nl> + Gossiper . instance . getEndpointStateForEndpoint ( internalAddress ) . addApplicationState ( ApplicationState . RPC _ ADDRESS , valueFactory . rpcaddress ( InetAddress . getByName ( " 127 . 0 . 0 . 3 " ) ) ) ; <nl> + assertEquals ( " 127 . 0 . 0 . 3 : " + DatabaseDescriptor . getNativeTransportPort ( ) , StorageService . instance . getNativeaddress ( internalAddress , true ) ) ; <nl> + / / If we have the address and port in gossip use that <nl> + Gossiper . instance . getEndpointStateForEndpoint ( internalAddress ) . addApplicationState ( ApplicationState . NATIVE _ ADDRESS _ AND _ PORT , valueFactory . nativeaddressAndPort ( InetAddressAndPort . getByName ( " 127 . 0 . 0 . 3 : 666 " ) ) ) ; <nl> + assertEquals ( " 127 . 0 . 0 . 3 : 666 " , StorageService . instance . getNativeaddress ( internalAddress , true ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6c9e30a . . a8dbbba 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Client TOPOLOGY _ CHANGE messages have wrong port . ( CASSANDRA - 14398 ) 
 * Add ability to load new SSTables from a separate directory ( CASSANDRA - 6719 ) 
 * Eliminate background repair and probablistic read _ repair _ chance table options 
 ( CASSANDRA - 13910 ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 6cbc49a . . 4f62dd5 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 1699 , 7 + 1699 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 { 
 try 
 { 
 - InetAddressAndPort address = InetAddressAndPort . getByName ( Gossiper . instance . getEndpointStateForEndpoint ( endpoint ) . getApplicationState ( ApplicationState . RPC _ ADDRESS ) . value ) ; 
 + InetAddressAndPort address = InetAddressAndPort . getByName ( Gossiper . instance . getEndpointStateForEndpoint ( endpoint ) . getApplicationState ( ApplicationState . NATIVE _ ADDRESS _ AND _ PORT ) . value ) ; 
 return address . getHostAddress ( withPort ) ; 
 } 
 catch ( UnknownHostException e ) 
 diff - - git a / test / unit / org / apache / cassandra / service / StorageServiceServerTest . java b / test / unit / org / apache / cassandra / service / StorageServiceServerTest . java 
 index 3884f5a . . 8c4f5f6 100644 
 - - - a / test / unit / org / apache / cassandra / service / StorageServiceServerTest . java 
 + + + b / test / unit / org / apache / cassandra / service / StorageServiceServerTest . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . io . File ; 
 import java . io . FileWriter ; 
 import java . io . IOException ; 
 import java . io . PrintWriter ; 
 + import java . net . InetAddress ; 
 import java . util . * ; 
 
 import com . google . common . collect . HashMultimap ; 
 @ @ - 34 , 6 + 35 , 9 @ @ import org . junit . runner . RunWith ; 
 import org . apache . cassandra . OrderedJUnit4ClassRunner ; 
 import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . gms . ApplicationState ; 
 + import org . apache . cassandra . gms . Gossiper ; 
 + import org . apache . cassandra . gms . VersionedValue ; 
 import org . apache . cassandra . locator . InetAddressAndPort ; 
 import org . apache . cassandra . schema . SchemaConstants ; 
 import org . apache . cassandra . schema . KeyspaceMetadata ; 
 @ @ - 592 , 4 + 596 , 26 @ @ public class StorageServiceServerTest 
 repairRangeFrom = StorageService . instance . createRepairRangeFrom ( " 2000 " , " 2000 " ) ; 
 assert repairRangeFrom . size ( ) = = 0 ; 
 } 
 + 
 + / * * 
 + * Test that StorageService . getNativeAddress returns the correct value based on available yaml and gossip state 
 + * @ throws Exception 
 + * / 
 + @ Test 
 + public void testGetNativeAddress ( ) throws Exception 
 + { 
 + String internalAddressString = " 127 . 0 . 0 . 2 : 666 " ; 
 + InetAddressAndPort internalAddress = InetAddressAndPort . getByName ( internalAddressString ) ; 
 + Gossiper . instance . addSavedEndpoint ( internalAddress ) ; 
 + / / Default to using the provided address with the configured port 
 + assertEquals ( " 127 . 0 . 0 . 2 : " + DatabaseDescriptor . getNativeTransportPort ( ) , StorageService . instance . getNativeaddress ( internalAddress , true ) ) ; 
 + 
 + VersionedValue . VersionedValueFactory valueFactory = new VersionedValue . VersionedValueFactory ( Murmur3Partitioner . instance ) ; 
 + / / If we don ' t have the port use the gossip address , but with the configured port 
 + Gossiper . instance . getEndpointStateForEndpoint ( internalAddress ) . addApplicationState ( ApplicationState . RPC _ ADDRESS , valueFactory . rpcaddress ( InetAddress . getByName ( " 127 . 0 . 0 . 3 " ) ) ) ; 
 + assertEquals ( " 127 . 0 . 0 . 3 : " + DatabaseDescriptor . getNativeTransportPort ( ) , StorageService . instance . getNativeaddress ( internalAddress , true ) ) ; 
 + / / If we have the address and port in gossip use that 
 + Gossiper . instance . getEndpointStateForEndpoint ( internalAddress ) . addApplicationState ( ApplicationState . NATIVE _ ADDRESS _ AND _ PORT , valueFactory . nativeaddressAndPort ( InetAddressAndPort . getByName ( " 127 . 0 . 0 . 3 : 666 " ) ) ) ; 
 + assertEquals ( " 127 . 0 . 0 . 3 : 666 " , StorageService . instance . getNativeaddress ( internalAddress , true ) ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
