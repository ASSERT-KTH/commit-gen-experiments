BLEU SCORE: 0.023309208103306354

TEST MSG: Wait for gossip to settle before accepting client connections
GENERATED MSG: move more gossip log messages to trace and de - obfuscate some variable and method names .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d0b63a0 . . e96a8e0 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 5 <nl> + * Wait for gossip to settle before accepting client connections ( CASSANDRA - 4288 ) <nl> * Delete unfinished compaction incrementally ( CASSANDRA - 6086 ) <nl> * Allow specifying custom secondary index options in CQL3 ( CASSANDRA - 6480 ) <nl> Merged from 1 . 2 : <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index d36b0db . . d497a38 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 34 , 10 + 34 , 14 @ @ import javax . management . StandardMBean ; <nl> import com . addthis . metrics . reporter . config . ReporterConfig ; <nl> <nl> import com . google . common . collect . Iterables ; <nl> + import com . google . common . util . concurrent . Uninterruptibles ; <nl> import org . apache . log4j . PropertyConfigurator ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; <nl> + import org . apache . cassandra . concurrent . Stage ; <nl> + import org . apache . cassandra . concurrent . StageManager ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . Schema ; <nl> @ @ - 365 , 6 + 369 , 8 @ @ public class CassandraDaemon <nl> } <nl> } <nl> <nl> + waitForGossipToSettle ( ) ; <nl> + <nl> / / Thift <nl> InetAddress rpcAddr = DatabaseDescriptor . getRpcAddress ( ) ; <nl> int rpcPort = DatabaseDescriptor . getRpcPort ( ) ; <nl> @ @ - 489 , 6 + 495 , 50 @ @ public class CassandraDaemon <nl> destroy ( ) ; <nl> } <nl> <nl> + <nl> + private void waitForGossipToSettle ( ) <nl> + { <nl> + int forceAfter = Integer . getInteger ( " cassandra . skip _ wait _ for _ gossip _ to _ settle " , - 1 ) ; <nl> + if ( forceAfter = = 0 ) <nl> + { <nl> + return ; <nl> + } <nl> + final int GOSSIP _ SETTLE _ MIN _ WAIT _ MS = 5000 ; <nl> + final int GOSSIP _ SETTLE _ POLL _ INTERVAL _ MS = 1000 ; <nl> + final int GOSSIP _ SETTLE _ POLL _ SUCCESSES _ REQUIRED = 3 ; <nl> + <nl> + logger . info ( " waiting for gossip to settle before accepting client requests . . . " ) ; <nl> + Uninterruptibles . sleepUninterruptibly ( GOSSIP _ SETTLE _ MIN _ WAIT _ MS , TimeUnit . MILLISECONDS ) ; <nl> + int totalPolls = 0 ; <nl> + int numOkay = 0 ; <nl> + JMXEnabledThreadPoolExecutor gossipStage = ( JMXEnabledThreadPoolExecutor ) StageManager . getStage ( Stage . GOSSIP ) ; <nl> + while ( numOkay < GOSSIP _ SETTLE _ POLL _ SUCCESSES _ REQUIRED ) <nl> + { <nl> + Uninterruptibles . sleepUninterruptibly ( GOSSIP _ SETTLE _ POLL _ INTERVAL _ MS , TimeUnit . MILLISECONDS ) ; <nl> + long completed = gossipStage . getCompletedTasks ( ) ; <nl> + long active = gossipStage . getActiveCount ( ) ; <nl> + long pending = gossipStage . getPendingTasks ( ) ; <nl> + totalPolls + + ; <nl> + if ( active = = 0 & & pending = = 0 ) <nl> + { <nl> + logger . debug ( " gossip looks settled . CompletedTasks : { } " , completed ) ; <nl> + numOkay + + ; <nl> + } <nl> + else <nl> + { <nl> + logger . info ( " gossip not settled after { } polls . Gossip Stage active / pending / completed : { } / { } / { } " , totalPolls , active , pending , completed ) ; <nl> + numOkay = 0 ; <nl> + } <nl> + if ( forceAfter > 0 & & totalPolls > forceAfter ) <nl> + { <nl> + logger . warn ( " Gossip not settled but startup forced by cassandra . skip _ wait _ for _ gossip _ to _ settle . Gossip Stage active / pending / completed : { } / { } / { } " , <nl> + totalPolls , active , pending , completed ) ; <nl> + break ; <nl> + } <nl> + } <nl> + logger . info ( " gossip settled after { } extra polls ; proceeding " , totalPolls - GOSSIP _ SETTLE _ POLL _ SUCCESSES _ REQUIRED ) ; <nl> + } <nl> + <nl> public static void stop ( String [ ] args ) <nl> { <nl> instance . deactivate ( ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> index 77c0276 . . cb54bba 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> @ @ - 157 , 15 + 157 , 15 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean <nl> <nl> public void report ( EndPoint ep ) <nl> { <nl> - logger _ . debug ( " reporting as failed " + ep ) ; <nl> + logger _ . trace ( " reporting " + ep ) ; <nl> long now = System . currentTimeMillis ( ) ; <nl> - ArrivalWindow hbWnd = arrivalSamples _ . get ( ep ) ; <nl> - if ( hbWnd = = null ) <nl> + ArrivalWindow heartbeatWindow = arrivalSamples _ . get ( ep ) ; <nl> + if ( heartbeatWindow = = null ) <nl> { <nl> - hbWnd = new ArrivalWindow ( sampleSize _ ) ; <nl> - arrivalSamples _ . put ( ep , hbWnd ) ; <nl> + heartbeatWindow = new ArrivalWindow ( sampleSize _ ) ; <nl> + arrivalSamples _ . put ( ep , heartbeatWindow ) ; <nl> } <nl> - hbWnd . add ( now ) ; <nl> + heartbeatWindow . add ( now ) ; <nl> } <nl> <nl> public void intepret ( EndPoint ep ) <nl> diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index 69e12f8 . . 340804e 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 33 , 8 + 33 , 6 @ @ import org . apache . cassandra . service . IComponentShutdown ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . LogUtil ; <nl> import org . apache . log4j . Logger ; <nl> - import org . apache . cassandra . utils . * ; <nl> - import org . apache . cassandra . net . * ; <nl> <nl> / * * <nl> * This module is responsible for Gossiping information for the local endpoint . This abstraction <nl> @ @ - 617 , 9 + 615 , 9 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> } <nl> } <nl> <nl> - void resusitate ( EndPoint addr , EndPointState localState ) <nl> + void markAlive ( EndPoint addr , EndPointState localState ) <nl> { <nl> - logger _ . debug ( " Attempting to resusitate " + addr ) ; <nl> + logger _ . trace ( " marking as alive " + addr ) ; <nl> if ( ! localState . isAlive ( ) ) <nl> { <nl> isAlive ( addr , localState , true ) ; <nl> @ @ - 667 , 7 + 665 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> 	 int remoteMaxVersion = getMaxEndPointStateVersion ( remoteState ) ; <nl> 	 if ( remoteMaxVersion > localMaxVersion ) <nl> 	 { <nl> - 	 resusitate ( ep , localEpStatePtr ) ; <nl> + 	 markAlive ( ep , localEpStatePtr ) ; <nl> 	 applyHeartBeatStateLocally ( ep , localEpStatePtr , remoteState ) ; <nl> 	 / * apply ApplicationState * / <nl> 	 applyApplicationStateLocally ( ep , localEpStatePtr , remoteState ) ; <nl> @ @ - 688 , 7 + 686 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> <nl> if ( remoteHbState . getGeneration ( ) > localHbState . getGeneration ( ) ) <nl> { <nl> - resusitate ( addr , localState ) ; <nl> + markAlive ( addr , localState ) ; <nl> localState . setHeartBeatState ( remoteHbState ) ; <nl> } <nl> if ( localHbState . getGeneration ( ) = = remoteHbState . getGeneration ( ) ) <nl> @ @ - 697 , 7 + 695 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> { <nl> int oldVersion = localHbState . getHeartBeatVersion ( ) ; <nl> localState . setHeartBeatState ( remoteHbState ) ; <nl> - logger _ . debug ( " Updating heartbeat state version to " + localState . getHeartBeatState ( ) . getHeartBeatVersion ( ) + " from " + oldVersion + " for " + addr + " . . . " ) ; <nl> + logger _ . trace ( " Updating heartbeat state version to " + localState . getHeartBeatState ( ) . getHeartBeatVersion ( ) + " from " + oldVersion + " for " + addr + " . . . " ) ; <nl> } <nl> } <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d0b63a0 . . e96a8e0 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 5 
 + * Wait for gossip to settle before accepting client connections ( CASSANDRA - 4288 ) 
 * Delete unfinished compaction incrementally ( CASSANDRA - 6086 ) 
 * Allow specifying custom secondary index options in CQL3 ( CASSANDRA - 6480 ) 
 Merged from 1 . 2 : 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index d36b0db . . d497a38 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 34 , 10 + 34 , 14 @ @ import javax . management . StandardMBean ; 
 import com . addthis . metrics . reporter . config . ReporterConfig ; 
 
 import com . google . common . collect . Iterables ; 
 + import com . google . common . util . concurrent . Uninterruptibles ; 
 import org . apache . log4j . PropertyConfigurator ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; 
 + import org . apache . cassandra . concurrent . Stage ; 
 + import org . apache . cassandra . concurrent . StageManager ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . Schema ; 
 @ @ - 365 , 6 + 369 , 8 @ @ public class CassandraDaemon 
 } 
 } 
 
 + waitForGossipToSettle ( ) ; 
 + 
 / / Thift 
 InetAddress rpcAddr = DatabaseDescriptor . getRpcAddress ( ) ; 
 int rpcPort = DatabaseDescriptor . getRpcPort ( ) ; 
 @ @ - 489 , 6 + 495 , 50 @ @ public class CassandraDaemon 
 destroy ( ) ; 
 } 
 
 + 
 + private void waitForGossipToSettle ( ) 
 + { 
 + int forceAfter = Integer . getInteger ( " cassandra . skip _ wait _ for _ gossip _ to _ settle " , - 1 ) ; 
 + if ( forceAfter = = 0 ) 
 + { 
 + return ; 
 + } 
 + final int GOSSIP _ SETTLE _ MIN _ WAIT _ MS = 5000 ; 
 + final int GOSSIP _ SETTLE _ POLL _ INTERVAL _ MS = 1000 ; 
 + final int GOSSIP _ SETTLE _ POLL _ SUCCESSES _ REQUIRED = 3 ; 
 + 
 + logger . info ( " waiting for gossip to settle before accepting client requests . . . " ) ; 
 + Uninterruptibles . sleepUninterruptibly ( GOSSIP _ SETTLE _ MIN _ WAIT _ MS , TimeUnit . MILLISECONDS ) ; 
 + int totalPolls = 0 ; 
 + int numOkay = 0 ; 
 + JMXEnabledThreadPoolExecutor gossipStage = ( JMXEnabledThreadPoolExecutor ) StageManager . getStage ( Stage . GOSSIP ) ; 
 + while ( numOkay < GOSSIP _ SETTLE _ POLL _ SUCCESSES _ REQUIRED ) 
 + { 
 + Uninterruptibles . sleepUninterruptibly ( GOSSIP _ SETTLE _ POLL _ INTERVAL _ MS , TimeUnit . MILLISECONDS ) ; 
 + long completed = gossipStage . getCompletedTasks ( ) ; 
 + long active = gossipStage . getActiveCount ( ) ; 
 + long pending = gossipStage . getPendingTasks ( ) ; 
 + totalPolls + + ; 
 + if ( active = = 0 & & pending = = 0 ) 
 + { 
 + logger . debug ( " gossip looks settled . CompletedTasks : { } " , completed ) ; 
 + numOkay + + ; 
 + } 
 + else 
 + { 
 + logger . info ( " gossip not settled after { } polls . Gossip Stage active / pending / completed : { } / { } / { } " , totalPolls , active , pending , completed ) ; 
 + numOkay = 0 ; 
 + } 
 + if ( forceAfter > 0 & & totalPolls > forceAfter ) 
 + { 
 + logger . warn ( " Gossip not settled but startup forced by cassandra . skip _ wait _ for _ gossip _ to _ settle . Gossip Stage active / pending / completed : { } / { } / { } " , 
 + totalPolls , active , pending , completed ) ; 
 + break ; 
 + } 
 + } 
 + logger . info ( " gossip settled after { } extra polls ; proceeding " , totalPolls - GOSSIP _ SETTLE _ POLL _ SUCCESSES _ REQUIRED ) ; 
 + } 
 + 
 public static void stop ( String [ ] args ) 
 { 
 instance . deactivate ( ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 index 77c0276 . . cb54bba 100644 
 - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java 
 + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 @ @ - 157 , 15 + 157 , 15 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean 
 
 public void report ( EndPoint ep ) 
 { 
 - logger _ . debug ( " reporting as failed " + ep ) ; 
 + logger _ . trace ( " reporting " + ep ) ; 
 long now = System . currentTimeMillis ( ) ; 
 - ArrivalWindow hbWnd = arrivalSamples _ . get ( ep ) ; 
 - if ( hbWnd = = null ) 
 + ArrivalWindow heartbeatWindow = arrivalSamples _ . get ( ep ) ; 
 + if ( heartbeatWindow = = null ) 
 { 
 - hbWnd = new ArrivalWindow ( sampleSize _ ) ; 
 - arrivalSamples _ . put ( ep , hbWnd ) ; 
 + heartbeatWindow = new ArrivalWindow ( sampleSize _ ) ; 
 + arrivalSamples _ . put ( ep , heartbeatWindow ) ; 
 } 
 - hbWnd . add ( now ) ; 
 + heartbeatWindow . add ( now ) ; 
 } 
 
 public void intepret ( EndPoint ep ) 
 diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index 69e12f8 . . 340804e 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 33 , 8 + 33 , 6 @ @ import org . apache . cassandra . service . IComponentShutdown ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . LogUtil ; 
 import org . apache . log4j . Logger ; 
 - import org . apache . cassandra . utils . * ; 
 - import org . apache . cassandra . net . * ; 
 
 / * * 
 * This module is responsible for Gossiping information for the local endpoint . This abstraction 
 @ @ - 617 , 9 + 615 , 9 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 } 
 } 
 
 - void resusitate ( EndPoint addr , EndPointState localState ) 
 + void markAlive ( EndPoint addr , EndPointState localState ) 
 { 
 - logger _ . debug ( " Attempting to resusitate " + addr ) ; 
 + logger _ . trace ( " marking as alive " + addr ) ; 
 if ( ! localState . isAlive ( ) ) 
 { 
 isAlive ( addr , localState , true ) ; 
 @ @ - 667 , 7 + 665 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 	 int remoteMaxVersion = getMaxEndPointStateVersion ( remoteState ) ; 
 	 if ( remoteMaxVersion > localMaxVersion ) 
 	 { 
 - 	 resusitate ( ep , localEpStatePtr ) ; 
 + 	 markAlive ( ep , localEpStatePtr ) ; 
 	 applyHeartBeatStateLocally ( ep , localEpStatePtr , remoteState ) ; 
 	 / * apply ApplicationState * / 
 	 applyApplicationStateLocally ( ep , localEpStatePtr , remoteState ) ; 
 @ @ - 688 , 7 + 686 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 
 if ( remoteHbState . getGeneration ( ) > localHbState . getGeneration ( ) ) 
 { 
 - resusitate ( addr , localState ) ; 
 + markAlive ( addr , localState ) ; 
 localState . setHeartBeatState ( remoteHbState ) ; 
 } 
 if ( localHbState . getGeneration ( ) = = remoteHbState . getGeneration ( ) ) 
 @ @ - 697 , 7 + 695 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 { 
 int oldVersion = localHbState . getHeartBeatVersion ( ) ; 
 localState . setHeartBeatState ( remoteHbState ) ; 
 - logger _ . debug ( " Updating heartbeat state version to " + localState . getHeartBeatState ( ) . getHeartBeatVersion ( ) + " from " + oldVersion + " for " + addr + " . . . " ) ; 
 + logger _ . trace ( " Updating heartbeat state version to " + localState . getHeartBeatState ( ) . getHeartBeatVersion ( ) + " from " + oldVersion + " for " + addr + " . . . " ) ; 
 } 
 } 
 }
