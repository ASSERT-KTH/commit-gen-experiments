BLEU SCORE: 0.015445276590783498

TEST MSG: ( cqlsh ) fix cqlsh _ copy _ tests when vnodes are disabled
GENERATED MSG: merge from 1 . 0 . 0

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 9c73adf . . 74fd45b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 13 <nl> + * ( cqlsh ) fix cqlsh _ copy _ tests when vnodes are disabled ( CASSANDRA - 10997 ) <nl> * ( cqlsh ) fix formatting bytearray values ( CASSANDRA - 10839 ) <nl> * ( cqlsh ) Add request timeout option to cqlsh ( CASSANDRA - 10686 ) <nl> * Avoid AssertionError while submitting hint with LWT ( CASSANDRA - 10477 ) <nl> diff - - git a / pylib / cqlshlib / copyutil . py b / pylib / cqlshlib / copyutil . py <nl> index 381701e . . b015a77 100644 <nl> - - - a / pylib / cqlshlib / copyutil . py <nl> + + + b / pylib / cqlshlib / copyutil . py <nl> @ @ - 492 , 30 + 492 , 33 @ @ class ExportTask ( CopyTask ) : <nl> ring = shell . get _ ring ( self . ks ) . items ( ) <nl> ring . sort ( ) <nl> <nl> - # If the ring is empty we get the entire ring from the host we are currently connected to <nl> if not ring : <nl> + # If the ring is empty we get the entire ring from the host we are currently connected to <nl> ranges [ ( begin _ token , end _ token ) ] = make _ range _ data ( ) <nl> - return ranges <nl> - <nl> - first _ range _ data = None <nl> - previous = None <nl> - for token , replicas in ring : <nl> - if previous is None and token . value = = min _ token : <nl> - continue # avoids looping entire ring <nl> - <nl> - if previous is None : # we use it at the end when wrapping around <nl> - first _ range _ data = make _ range _ data ( replicas ) <nl> - <nl> - current _ range = make _ range ( previous , token . value ) <nl> - if not current _ range : <nl> - continue <nl> - <nl> - ranges [ current _ range ] = make _ range _ data ( replicas ) <nl> - previous = token . value <nl> - <nl> - # For the last ring interval we query the same replicas that hold the first token in the ring <nl> - if previous is not None and ( not end _ token or previous < end _ token ) : <nl> - ranges [ ( previous , end _ token ) ] = first _ range _ data <nl> + elif len ( ring ) = = 1 : <nl> + # If there is only one token we get the entire ring from the replicas for that token <nl> + ranges [ ( begin _ token , end _ token ) ] = make _ range _ data ( ring [ 0 ] [ 1 ] ) <nl> + else : <nl> + # else we loop on the ring <nl> + first _ range _ data = None <nl> + previous = None <nl> + for token , replicas in ring : <nl> + if not first _ range _ data : <nl> + first _ range _ data = make _ range _ data ( replicas ) # we use it at the end when wrapping around <nl> + <nl> + if token . value = = min _ token : <nl> + continue # avoids looping entire ring <nl> + <nl> + current _ range = make _ range ( previous , token . value ) <nl> + if not current _ range : <nl> + continue <nl> + <nl> + ranges [ current _ range ] = make _ range _ data ( replicas ) <nl> + previous = token . value <nl> + <nl> + # For the last ring interval we query the same replicas that hold the first token in the ring <nl> + if previous is not None and ( not end _ token or previous < end _ token ) : <nl> + ranges [ ( previous , end _ token ) ] = first _ range _ data <nl> <nl> if not ranges : <nl> shell . printerr ( ' Found no ranges to query , check begin and end tokens : % s - % s ' % ( begin _ token , end _ token ) )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 630ee2e . . 1f0f0e9 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 10 @ @ <nl> - 1 . 0 - dev <nl> + 1 . 1 - dev <nl> + <nl> + <nl> + 1 . 0 . 1 <nl> + <nl> + <nl> + 1 . 0 <nl> * removed binarymemtable ( CASSANDRA - 2692 ) <nl> * add commitlog _ total _ space _ in _ mb to prevent fragmented logs ( CASSANDRA - 2427 ) <nl> * removed commitlog _ rotation _ threshold _ in _ mb configuration ( CASSANDRA - 2771 )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 9c73adf . . 74fd45b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 13 
 + * ( cqlsh ) fix cqlsh _ copy _ tests when vnodes are disabled ( CASSANDRA - 10997 ) 
 * ( cqlsh ) fix formatting bytearray values ( CASSANDRA - 10839 ) 
 * ( cqlsh ) Add request timeout option to cqlsh ( CASSANDRA - 10686 ) 
 * Avoid AssertionError while submitting hint with LWT ( CASSANDRA - 10477 ) 
 diff - - git a / pylib / cqlshlib / copyutil . py b / pylib / cqlshlib / copyutil . py 
 index 381701e . . b015a77 100644 
 - - - a / pylib / cqlshlib / copyutil . py 
 + + + b / pylib / cqlshlib / copyutil . py 
 @ @ - 492 , 30 + 492 , 33 @ @ class ExportTask ( CopyTask ) : 
 ring = shell . get _ ring ( self . ks ) . items ( ) 
 ring . sort ( ) 
 
 - # If the ring is empty we get the entire ring from the host we are currently connected to 
 if not ring : 
 + # If the ring is empty we get the entire ring from the host we are currently connected to 
 ranges [ ( begin _ token , end _ token ) ] = make _ range _ data ( ) 
 - return ranges 
 - 
 - first _ range _ data = None 
 - previous = None 
 - for token , replicas in ring : 
 - if previous is None and token . value = = min _ token : 
 - continue # avoids looping entire ring 
 - 
 - if previous is None : # we use it at the end when wrapping around 
 - first _ range _ data = make _ range _ data ( replicas ) 
 - 
 - current _ range = make _ range ( previous , token . value ) 
 - if not current _ range : 
 - continue 
 - 
 - ranges [ current _ range ] = make _ range _ data ( replicas ) 
 - previous = token . value 
 - 
 - # For the last ring interval we query the same replicas that hold the first token in the ring 
 - if previous is not None and ( not end _ token or previous < end _ token ) : 
 - ranges [ ( previous , end _ token ) ] = first _ range _ data 
 + elif len ( ring ) = = 1 : 
 + # If there is only one token we get the entire ring from the replicas for that token 
 + ranges [ ( begin _ token , end _ token ) ] = make _ range _ data ( ring [ 0 ] [ 1 ] ) 
 + else : 
 + # else we loop on the ring 
 + first _ range _ data = None 
 + previous = None 
 + for token , replicas in ring : 
 + if not first _ range _ data : 
 + first _ range _ data = make _ range _ data ( replicas ) # we use it at the end when wrapping around 
 + 
 + if token . value = = min _ token : 
 + continue # avoids looping entire ring 
 + 
 + current _ range = make _ range ( previous , token . value ) 
 + if not current _ range : 
 + continue 
 + 
 + ranges [ current _ range ] = make _ range _ data ( replicas ) 
 + previous = token . value 
 + 
 + # For the last ring interval we query the same replicas that hold the first token in the ring 
 + if previous is not None and ( not end _ token or previous < end _ token ) : 
 + ranges [ ( previous , end _ token ) ] = first _ range _ data 
 
 if not ranges : 
 shell . printerr ( ' Found no ranges to query , check begin and end tokens : % s - % s ' % ( begin _ token , end _ token ) )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 630ee2e . . 1f0f0e9 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 10 @ @ 
 - 1 . 0 - dev 
 + 1 . 1 - dev 
 + 
 + 
 + 1 . 0 . 1 
 + 
 + 
 + 1 . 0 
 * removed binarymemtable ( CASSANDRA - 2692 ) 
 * add commitlog _ total _ space _ in _ mb to prevent fragmented logs ( CASSANDRA - 2427 ) 
 * removed commitlog _ rotation _ threshold _ in _ mb configuration ( CASSANDRA - 2771 )
