BLEU SCORE: 0.02383853510228548

TEST MSG: Ensure that UDF and UDAs are keyspace - isolated
GENERATED MSG: Properly reject unknown UDT fields

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 0ce90ce . . 4e79ea0 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 <nl> + * Ensure that UDF and UDAs are keyspace - isolated ( CASSANDRA - 9409 ) <nl> Merged from 2 . 1 : <nl> * Use configured gcgs in anticompaction ( CASSANDRA - 9397 ) <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / CQL3Type . java b / src / java / org / apache / cassandra / cql3 / CQL3Type . java <nl> index fb2716e . . e3ece93 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / CQL3Type . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / CQL3Type . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . util . List ; <nl> <nl> import org . apache . cassandra . config . KSMetaData ; <nl> import org . apache . cassandra . config . Schema ; <nl> + import org . apache . cassandra . db . SystemKeyspace ; <nl> import org . apache . cassandra . db . marshal . * ; <nl> import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> @ @ - 499 , 7 + 500 , 7 @ @ public interface CQL3Type <nl> { <nl> / / The provided keyspace is the one of the current statement this is part of . If it ' s different from the keyspace of <nl> / / the UTName , we reject since we want to limit user types to their own keyspace ( see # 6643 ) <nl> - if ( keyspace ! = null & & ! keyspace . equals ( name . getKeyspace ( ) ) ) <nl> + if ( keyspace ! = null & & ! SystemKeyspace . NAME . equals ( name . getKeyspace ( ) ) & & ! keyspace . equals ( name . getKeyspace ( ) ) ) <nl> throw new InvalidRequestException ( String . format ( " Statement on keyspace % s cannot refer to a user type in keyspace % s ; " <nl> + " user types can only be used in the keyspace they are defined in " , <nl> keyspace , name . getKeyspace ( ) ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> index 3600cd1 . . ec63183 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Cql . g <nl> + + + b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> @ @ - 555 , 10 + 555 , 10 @ @ createAggregateStatement returns [ CreateAggregateStatement expr ] <nl> ( ' , ' v = comparatorType { argsTypes . add ( v ) ; } ) * <nl> ) ? <nl> ' ) ' <nl> - K _ SFUNC sfunc = allowedFunctionName <nl> + K _ SFUNC sfunc = functionName <nl> K _ STYPE stype = comparatorType <nl> ( <nl> - K _ FINALFUNC ffunc = allowedFunctionName <nl> + K _ FINALFUNC ffunc = functionName <nl> ) ? <nl> ( <nl> K _ INITCOND ival = term <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java <nl> index 2524a7c . . 7682184 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . cql3 . * ; <nl> import org . apache . cassandra . cql3 . functions . * ; <nl> + import org . apache . cassandra . db . SystemKeyspace ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . exceptions . * ; <nl> import org . apache . cassandra . service . ClientState ; <nl> @ @ - 43 , 8 + 44 , 8 @ @ public final class CreateAggregateStatement extends SchemaAlteringStatement <nl> private final boolean orReplace ; <nl> private final boolean ifNotExists ; <nl> private FunctionName functionName ; <nl> - private final String stateFunc ; <nl> - private final String finalFunc ; <nl> + private FunctionName stateFunc ; <nl> + private FunctionName finalFunc ; <nl> private final CQL3Type . Raw stateTypeRaw ; <nl> <nl> private final List < CQL3Type . Raw > argRawTypes ; <nl> @ @ - 61 , 9 + 62 , 9 @ @ public final class CreateAggregateStatement extends SchemaAlteringStatement <nl> <nl> public CreateAggregateStatement ( FunctionName functionName , <nl> List < CQL3Type . Raw > argRawTypes , <nl> - String stateFunc , <nl> + FunctionName stateFunc , <nl> CQL3Type . Raw stateType , <nl> - String finalFunc , <nl> + FunctionName finalFunc , <nl> Term . Raw ival , <nl> boolean orReplace , <nl> boolean ifNotExists ) <nl> @ @ - 85 , 10 + 86 , 9 @ @ public final class CreateAggregateStatement extends SchemaAlteringStatement <nl> argTypes . add ( rawType . prepare ( functionName . keyspace ) . getType ( ) ) ; <nl> <nl> AbstractType < ? > stateType = stateTypeRaw . prepare ( functionName . keyspace ) . getType ( ) ; <nl> - FunctionName stateFuncName = new FunctionName ( functionName . keyspace , stateFunc ) ; <nl> - Function f = Functions . find ( stateFuncName , stateArguments ( stateType , argTypes ) ) ; <nl> + Function f = Functions . find ( stateFunc , stateArguments ( stateType , argTypes ) ) ; <nl> if ( ! ( f instanceof ScalarFunction ) ) <nl> - throw new InvalidRequestException ( " State function " + stateFuncSig ( stateFuncName , stateTypeRaw , argRawTypes ) + " does not exist or is not a scalar function " ) ; <nl> + throw new InvalidRequestException ( " State function " + stateFuncSig ( stateFunc , stateTypeRaw , argRawTypes ) + " does not exist or is not a scalar function " ) ; <nl> stateFunction = ( ScalarFunction ) f ; <nl> <nl> AbstractType < ? > stateReturnType = stateFunction . returnType ( ) ; <nl> @ @ - 97 , 10 + 97 , 9 @ @ public final class CreateAggregateStatement extends SchemaAlteringStatement <nl> <nl> if ( finalFunc ! = null ) <nl> { <nl> - FunctionName finalFuncName = new FunctionName ( functionName . keyspace , finalFunc ) ; <nl> - f = Functions . find ( finalFuncName , Collections . < AbstractType < ? > > singletonList ( stateType ) ) ; <nl> + f = Functions . find ( finalFunc , Collections . < AbstractType < ? > > singletonList ( stateType ) ) ; <nl> if ( ! ( f instanceof ScalarFunction ) ) <nl> - throw new InvalidRequestException ( " Final function " + finalFuncName + ' ( ' + stateTypeRaw + " ) does not exist or is not a scalar function " ) ; <nl> + throw new InvalidRequestException ( " Final function " + finalFunc + ' ( ' + stateTypeRaw + " ) does not exist or is not a scalar function " ) ; <nl> finalFunction = ( ScalarFunction ) f ; <nl> returnType = finalFunction . returnType ( ) ; <nl> } <nl> @ @ - 126 , 9 + 125 , 25 @ @ public final class CreateAggregateStatement extends SchemaAlteringStatement <nl> if ( ! functionName . hasKeyspace ( ) ) <nl> throw new InvalidRequestException ( " Functions must be fully qualified with a keyspace name if a keyspace is not set for the session " ) ; <nl> <nl> + stateFunc = validateFunctionKeyspace ( stateFunc ) ; <nl> + <nl> + if ( finalFunc ! = null ) <nl> + finalFunc = validateFunctionKeyspace ( finalFunc ) ; <nl> + <nl> ThriftValidation . validateKeyspaceNotSystem ( functionName . keyspace ) ; <nl> } <nl> <nl> + private FunctionName validateFunctionKeyspace ( FunctionName func ) <nl> + { <nl> + if ( ! func . hasKeyspace ( ) ) <nl> + return new FunctionName ( functionName . keyspace , func . name ) ; <nl> + else if ( ! SystemKeyspace . NAME . equals ( func . keyspace ) & & ! functionName . keyspace . equals ( func . keyspace ) ) <nl> + throw new InvalidRequestException ( String . format ( " Statement on keyspace % s cannot refer to a user function in keyspace % s ; " <nl> + + " user functions can only be used in the keyspace they are defined in " , <nl> + functionName . keyspace , func . keyspace ) ) ; <nl> + return func ; <nl> + } <nl> + <nl> protected void grantPermissionsToCreator ( QueryState state ) <nl> { <nl> try <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java <nl> index 4ceecba . . a2a440b 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java <nl> @ @ - 36 , 7 + 36 , 7 @ @ import org . apache . cassandra . thrift . ThriftValidation ; <nl> import org . apache . cassandra . transport . Event ; <nl> <nl> / * * <nl> - * A < code > CREATE FUNCTION < / code > statement parsed from a CQL query . <nl> + * A { @ code CREATE FUNCTION } statement parsed from a CQL query . <nl> * / <nl> public final class CreateFunctionStatement extends SchemaAlteringStatement <nl> { <nl> @ @ - 85 , 9 + 85 , 9 @ @ public final class CreateFunctionStatement extends SchemaAlteringStatement <nl> <nl> argTypes = new ArrayList < > ( argRawTypes . size ( ) ) ; <nl> for ( CQL3Type . Raw rawType : argRawTypes ) <nl> - argTypes . add ( rawType . prepare ( typeKeyspace ( rawType ) ) . getType ( ) ) ; <nl> + argTypes . add ( rawType . prepare ( functionName . keyspace ) . getType ( ) ) ; <nl> <nl> - returnType = rawReturnType . prepare ( typeKeyspace ( rawReturnType ) ) . getType ( ) ; <nl> + returnType = rawReturnType . prepare ( functionName . keyspace ) . getType ( ) ; <nl> return super . prepare ( ) ; <nl> } <nl> <nl> @ @ - 174 , 12 + 174 , 4 @ @ public final class CreateFunctionStatement extends SchemaAlteringStatement <nl> <nl> return true ; <nl> } <nl> - <nl> - private String typeKeyspace ( CQL3Type . Raw rawType ) <nl> - { <nl> - String ks = rawType . keyspace ( ) ; <nl> - if ( ks ! = null ) <nl> - return ks ; <nl> - return functionName . keyspace ; <nl> - } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / AggregationTest . java <nl> index 7bec8a1 . . f1a0b94 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / AggregationTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / AggregationTest . java <nl> @ @ - 1043 , 11 + 1043 , 94 @ @ public class AggregationTest extends CQLTester <nl> " AS ' return Integer . valueOf ( 1 ) ; ' ; " ) ; <nl> <nl> assertInvalidMessage ( " return type must be the same as the first argument type - check STYPE , argument and return types " , <nl> - " CREATE AGGREGATE % s ( int ) " + <nl> - " SFUNC " + shortFunctionName ( fState ) + ' ' + <nl> - " STYPE int " + <nl> - " FINALFUNC " + shortFunctionName ( fFinal ) + ' ' + <nl> - " INITCOND 1 " ) ; <nl> + " CREATE AGGREGATE % s ( int ) " + <nl> + " SFUNC " + shortFunctionName ( fState ) + ' ' + <nl> + " STYPE int " + <nl> + " FINALFUNC " + shortFunctionName ( fFinal ) + ' ' + <nl> + " INITCOND 1 " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testWrongKeyspace ( ) throws Throwable <nl> + { <nl> + String typeName = createType ( " CREATE TYPE % s ( txt text , i int ) " ) ; <nl> + String type = KEYSPACE + ' . ' + typeName ; <nl> + <nl> + String fState = createFunction ( KEYSPACE _ PER _ TEST , <nl> + " int , int " , <nl> + " CREATE FUNCTION % s ( a int , b int ) " + <nl> + " CALLED ON NULL INPUT " + <nl> + " RETURNS double " + <nl> + " LANGUAGE java " + <nl> + " AS ' return Double . valueOf ( 1 . 0 ) ; ' " ) ; <nl> + <nl> + String fFinal = createFunction ( KEYSPACE _ PER _ TEST , <nl> + " int " , <nl> + " CREATE FUNCTION % s ( a int ) " + <nl> + " CALLED ON NULL INPUT " + <nl> + " RETURNS int " + <nl> + " LANGUAGE java " + <nl> + " AS ' return Integer . valueOf ( 1 ) ; ' ; " ) ; <nl> + <nl> + String fStateWrong = createFunction ( KEYSPACE , <nl> + " int , int " , <nl> + " CREATE FUNCTION % s ( a int , b int ) " + <nl> + " CALLED ON NULL INPUT " + <nl> + " RETURNS double " + <nl> + " LANGUAGE java " + <nl> + " AS ' return Double . valueOf ( 1 . 0 ) ; ' " ) ; <nl> + <nl> + String fFinalWrong = createFunction ( KEYSPACE , <nl> + " int " , <nl> + " CREATE FUNCTION % s ( a int ) " + <nl> + " CALLED ON NULL INPUT " + <nl> + " RETURNS int " + <nl> + " LANGUAGE java " + <nl> + " AS ' return Integer . valueOf ( 1 ) ; ' ; " ) ; <nl> + <nl> + assertInvalidMessage ( String . format ( " Statement on keyspace % s cannot refer to a user type in keyspace % s ; user types can only be used in the keyspace they are defined in " , <nl> + KEYSPACE _ PER _ TEST , KEYSPACE ) , <nl> + " CREATE AGGREGATE " + KEYSPACE _ PER _ TEST + " . test _ wrong _ ks ( int ) " + <nl> + " SFUNC " + shortFunctionName ( fState ) + ' ' + <nl> + " STYPE frozen < " + type + " > " + <nl> + " FINALFUNC " + shortFunctionName ( fFinal ) + ' ' + <nl> + " INITCOND 1 " ) ; <nl> + <nl> + assertInvalidMessage ( String . format ( " Statement on keyspace % s cannot refer to a user function in keyspace % s ; user functions can only be used in the keyspace they are defined in " , <nl> + KEYSPACE _ PER _ TEST , KEYSPACE ) , <nl> + " CREATE AGGREGATE " + KEYSPACE _ PER _ TEST + " . test _ wrong _ ks ( int ) " + <nl> + " SFUNC " + fStateWrong + ' ' + <nl> + " STYPE frozen < " + type + " > " + <nl> + " FINALFUNC " + shortFunctionName ( fFinal ) + ' ' + <nl> + " INITCOND 1 " ) ; <nl> + <nl> + assertInvalidMessage ( String . format ( " Statement on keyspace % s cannot refer to a user function in keyspace % s ; user functions can only be used in the keyspace they are defined in " , <nl> + KEYSPACE _ PER _ TEST , KEYSPACE ) , <nl> + " CREATE AGGREGATE " + KEYSPACE _ PER _ TEST + " . test _ wrong _ ks ( int ) " + <nl> + " SFUNC " + shortFunctionName ( fState ) + ' ' + <nl> + " STYPE frozen < " + type + " > " + <nl> + " FINALFUNC " + fFinalWrong + ' ' + <nl> + " INITCOND 1 " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSystemKeyspace ( ) throws Throwable <nl> + { <nl> + String fState = createFunction ( KEYSPACE , <nl> + " text , text " , <nl> + " CREATE FUNCTION % s ( a text , b text ) " + <nl> + " CALLED ON NULL INPUT " + <nl> + " RETURNS text " + <nl> + " LANGUAGE java " + <nl> + " AS ' return \ " foobar \ " ; ' " ) ; <nl> + <nl> + createAggregate ( KEYSPACE , <nl> + " text " , <nl> + " CREATE AGGREGATE % s ( text ) " + <nl> + " SFUNC " + shortFunctionName ( fState ) + ' ' + <nl> + " STYPE text " + <nl> + " FINALFUNC system . varcharasblob " + <nl> + " INITCOND ' foobar ' " ) ; <nl> } <nl> <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / UFTest . java b / test / unit / org / apache / cassandra / cql3 / UFTest . java <nl> index 78c6dd9 . . 79d63a9 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / UFTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / UFTest . java <nl> @ @ - 919 , 6 + 919 , 29 @ @ public class UFTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> + public void testWrongKeyspace ( ) throws Throwable <nl> + { <nl> + String typeName = createType ( " CREATE TYPE % s ( txt text , i int ) " ) ; <nl> + String type = KEYSPACE + ' . ' + typeName ; <nl> + <nl> + assertInvalidMessage ( String . format ( " Statement on keyspace % s cannot refer to a user type in keyspace % s ; user types can only be used in the keyspace they are defined in " , <nl> + KEYSPACE _ PER _ TEST , KEYSPACE ) , <nl> + " CREATE FUNCTION " + KEYSPACE _ PER _ TEST + " . test _ wrong _ ks ( val int ) " + <nl> + " CALLED ON NULL INPUT " + <nl> + " RETURNS frozen < " + type + " > " + <nl> + " LANGUAGE java \ n " + <nl> + " AS $ $ return val ; $ $ ; " ) ; <nl> + <nl> + assertInvalidMessage ( String . format ( " Statement on keyspace % s cannot refer to a user type in keyspace % s ; user types can only be used in the keyspace they are defined in " , <nl> + KEYSPACE _ PER _ TEST , KEYSPACE ) , <nl> + " CREATE FUNCTION " + KEYSPACE _ PER _ TEST + " . test _ wrong _ ks ( val frozen < " + type + " > ) " + <nl> + " CALLED ON NULL INPUT " + <nl> + " RETURNS int " + <nl> + " LANGUAGE java \ n " + <nl> + " AS $ $ return val ; $ $ ; " ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testComplexNullValues ( ) throws Throwable <nl> { <nl> String type = KEYSPACE + ' . ' + createType ( " CREATE TYPE % s ( txt text , i int ) " ) ; <nl> @ @ - 1174 , 22 + 1197 , 6 @ @ public class UFTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void testJavaUserTypeOtherKeyspace ( ) throws Throwable <nl> - { <nl> - String type = KEYSPACE + ' . ' + createType ( " CREATE TYPE % s ( txt text , i int ) " ) ; <nl> - <nl> - String fName = createFunction ( KEYSPACE _ PER _ TEST , " frozen < " + type + ' > ' , <nl> - " CREATE FUNCTION % s ( udt frozen < " + type + " > ) " + <nl> - " RETURNS NULL ON NULL INPUT " + <nl> - " RETURNS frozen < " + type + " > " + <nl> - " LANGUAGE java " + <nl> - " AS $ $ return " + <nl> - " udt ; $ $ ; " ) ; <nl> - <nl> - execute ( " DROP FUNCTION " + fName ) ; <nl> - } <nl> - <nl> - @ Test <nl> public void testJavaUserType ( ) throws Throwable <nl> { <nl> String type = KEYSPACE + ' . ' + createType ( " CREATE TYPE % s ( txt text , i int ) " ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0ce90ce . . 4e79ea0 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 
 + * Ensure that UDF and UDAs are keyspace - isolated ( CASSANDRA - 9409 ) 
 Merged from 2 . 1 : 
 * Use configured gcgs in anticompaction ( CASSANDRA - 9397 ) 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / CQL3Type . java b / src / java / org / apache / cassandra / cql3 / CQL3Type . java 
 index fb2716e . . e3ece93 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / CQL3Type . java 
 + + + b / src / java / org / apache / cassandra / cql3 / CQL3Type . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . util . List ; 
 
 import org . apache . cassandra . config . KSMetaData ; 
 import org . apache . cassandra . config . Schema ; 
 + import org . apache . cassandra . db . SystemKeyspace ; 
 import org . apache . cassandra . db . marshal . * ; 
 import org . apache . cassandra . exceptions . InvalidRequestException ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 @ @ - 499 , 7 + 500 , 7 @ @ public interface CQL3Type 
 { 
 / / The provided keyspace is the one of the current statement this is part of . If it ' s different from the keyspace of 
 / / the UTName , we reject since we want to limit user types to their own keyspace ( see # 6643 ) 
 - if ( keyspace ! = null & & ! keyspace . equals ( name . getKeyspace ( ) ) ) 
 + if ( keyspace ! = null & & ! SystemKeyspace . NAME . equals ( name . getKeyspace ( ) ) & & ! keyspace . equals ( name . getKeyspace ( ) ) ) 
 throw new InvalidRequestException ( String . format ( " Statement on keyspace % s cannot refer to a user type in keyspace % s ; " 
 + " user types can only be used in the keyspace they are defined in " , 
 keyspace , name . getKeyspace ( ) ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g 
 index 3600cd1 . . ec63183 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Cql . g 
 + + + b / src / java / org / apache / cassandra / cql3 / Cql . g 
 @ @ - 555 , 10 + 555 , 10 @ @ createAggregateStatement returns [ CreateAggregateStatement expr ] 
 ( ' , ' v = comparatorType { argsTypes . add ( v ) ; } ) * 
 ) ? 
 ' ) ' 
 - K _ SFUNC sfunc = allowedFunctionName 
 + K _ SFUNC sfunc = functionName 
 K _ STYPE stype = comparatorType 
 ( 
 - K _ FINALFUNC ffunc = allowedFunctionName 
 + K _ FINALFUNC ffunc = functionName 
 ) ? 
 ( 
 K _ INITCOND ival = term 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java 
 index 2524a7c . . 7682184 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . cql3 . * ; 
 import org . apache . cassandra . cql3 . functions . * ; 
 + import org . apache . cassandra . db . SystemKeyspace ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . exceptions . * ; 
 import org . apache . cassandra . service . ClientState ; 
 @ @ - 43 , 8 + 44 , 8 @ @ public final class CreateAggregateStatement extends SchemaAlteringStatement 
 private final boolean orReplace ; 
 private final boolean ifNotExists ; 
 private FunctionName functionName ; 
 - private final String stateFunc ; 
 - private final String finalFunc ; 
 + private FunctionName stateFunc ; 
 + private FunctionName finalFunc ; 
 private final CQL3Type . Raw stateTypeRaw ; 
 
 private final List < CQL3Type . Raw > argRawTypes ; 
 @ @ - 61 , 9 + 62 , 9 @ @ public final class CreateAggregateStatement extends SchemaAlteringStatement 
 
 public CreateAggregateStatement ( FunctionName functionName , 
 List < CQL3Type . Raw > argRawTypes , 
 - String stateFunc , 
 + FunctionName stateFunc , 
 CQL3Type . Raw stateType , 
 - String finalFunc , 
 + FunctionName finalFunc , 
 Term . Raw ival , 
 boolean orReplace , 
 boolean ifNotExists ) 
 @ @ - 85 , 10 + 86 , 9 @ @ public final class CreateAggregateStatement extends SchemaAlteringStatement 
 argTypes . add ( rawType . prepare ( functionName . keyspace ) . getType ( ) ) ; 
 
 AbstractType < ? > stateType = stateTypeRaw . prepare ( functionName . keyspace ) . getType ( ) ; 
 - FunctionName stateFuncName = new FunctionName ( functionName . keyspace , stateFunc ) ; 
 - Function f = Functions . find ( stateFuncName , stateArguments ( stateType , argTypes ) ) ; 
 + Function f = Functions . find ( stateFunc , stateArguments ( stateType , argTypes ) ) ; 
 if ( ! ( f instanceof ScalarFunction ) ) 
 - throw new InvalidRequestException ( " State function " + stateFuncSig ( stateFuncName , stateTypeRaw , argRawTypes ) + " does not exist or is not a scalar function " ) ; 
 + throw new InvalidRequestException ( " State function " + stateFuncSig ( stateFunc , stateTypeRaw , argRawTypes ) + " does not exist or is not a scalar function " ) ; 
 stateFunction = ( ScalarFunction ) f ; 
 
 AbstractType < ? > stateReturnType = stateFunction . returnType ( ) ; 
 @ @ - 97 , 10 + 97 , 9 @ @ public final class CreateAggregateStatement extends SchemaAlteringStatement 
 
 if ( finalFunc ! = null ) 
 { 
 - FunctionName finalFuncName = new FunctionName ( functionName . keyspace , finalFunc ) ; 
 - f = Functions . find ( finalFuncName , Collections . < AbstractType < ? > > singletonList ( stateType ) ) ; 
 + f = Functions . find ( finalFunc , Collections . < AbstractType < ? > > singletonList ( stateType ) ) ; 
 if ( ! ( f instanceof ScalarFunction ) ) 
 - throw new InvalidRequestException ( " Final function " + finalFuncName + ' ( ' + stateTypeRaw + " ) does not exist or is not a scalar function " ) ; 
 + throw new InvalidRequestException ( " Final function " + finalFunc + ' ( ' + stateTypeRaw + " ) does not exist or is not a scalar function " ) ; 
 finalFunction = ( ScalarFunction ) f ; 
 returnType = finalFunction . returnType ( ) ; 
 } 
 @ @ - 126 , 9 + 125 , 25 @ @ public final class CreateAggregateStatement extends SchemaAlteringStatement 
 if ( ! functionName . hasKeyspace ( ) ) 
 throw new InvalidRequestException ( " Functions must be fully qualified with a keyspace name if a keyspace is not set for the session " ) ; 
 
 + stateFunc = validateFunctionKeyspace ( stateFunc ) ; 
 + 
 + if ( finalFunc ! = null ) 
 + finalFunc = validateFunctionKeyspace ( finalFunc ) ; 
 + 
 ThriftValidation . validateKeyspaceNotSystem ( functionName . keyspace ) ; 
 } 
 
 + private FunctionName validateFunctionKeyspace ( FunctionName func ) 
 + { 
 + if ( ! func . hasKeyspace ( ) ) 
 + return new FunctionName ( functionName . keyspace , func . name ) ; 
 + else if ( ! SystemKeyspace . NAME . equals ( func . keyspace ) & & ! functionName . keyspace . equals ( func . keyspace ) ) 
 + throw new InvalidRequestException ( String . format ( " Statement on keyspace % s cannot refer to a user function in keyspace % s ; " 
 + + " user functions can only be used in the keyspace they are defined in " , 
 + functionName . keyspace , func . keyspace ) ) ; 
 + return func ; 
 + } 
 + 
 protected void grantPermissionsToCreator ( QueryState state ) 
 { 
 try 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java 
 index 4ceecba . . a2a440b 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java 
 @ @ - 36 , 7 + 36 , 7 @ @ import org . apache . cassandra . thrift . ThriftValidation ; 
 import org . apache . cassandra . transport . Event ; 
 
 / * * 
 - * A < code > CREATE FUNCTION < / code > statement parsed from a CQL query . 
 + * A { @ code CREATE FUNCTION } statement parsed from a CQL query . 
 * / 
 public final class CreateFunctionStatement extends SchemaAlteringStatement 
 { 
 @ @ - 85 , 9 + 85 , 9 @ @ public final class CreateFunctionStatement extends SchemaAlteringStatement 
 
 argTypes = new ArrayList < > ( argRawTypes . size ( ) ) ; 
 for ( CQL3Type . Raw rawType : argRawTypes ) 
 - argTypes . add ( rawType . prepare ( typeKeyspace ( rawType ) ) . getType ( ) ) ; 
 + argTypes . add ( rawType . prepare ( functionName . keyspace ) . getType ( ) ) ; 
 
 - returnType = rawReturnType . prepare ( typeKeyspace ( rawReturnType ) ) . getType ( ) ; 
 + returnType = rawReturnType . prepare ( functionName . keyspace ) . getType ( ) ; 
 return super . prepare ( ) ; 
 } 
 
 @ @ - 174 , 12 + 174 , 4 @ @ public final class CreateFunctionStatement extends SchemaAlteringStatement 
 
 return true ; 
 } 
 - 
 - private String typeKeyspace ( CQL3Type . Raw rawType ) 
 - { 
 - String ks = rawType . keyspace ( ) ; 
 - if ( ks ! = null ) 
 - return ks ; 
 - return functionName . keyspace ; 
 - } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / AggregationTest . java 
 index 7bec8a1 . . f1a0b94 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / AggregationTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / AggregationTest . java 
 @ @ - 1043 , 11 + 1043 , 94 @ @ public class AggregationTest extends CQLTester 
 " AS ' return Integer . valueOf ( 1 ) ; ' ; " ) ; 
 
 assertInvalidMessage ( " return type must be the same as the first argument type - check STYPE , argument and return types " , 
 - " CREATE AGGREGATE % s ( int ) " + 
 - " SFUNC " + shortFunctionName ( fState ) + ' ' + 
 - " STYPE int " + 
 - " FINALFUNC " + shortFunctionName ( fFinal ) + ' ' + 
 - " INITCOND 1 " ) ; 
 + " CREATE AGGREGATE % s ( int ) " + 
 + " SFUNC " + shortFunctionName ( fState ) + ' ' + 
 + " STYPE int " + 
 + " FINALFUNC " + shortFunctionName ( fFinal ) + ' ' + 
 + " INITCOND 1 " ) ; 
 + } 
 + 
 + @ Test 
 + public void testWrongKeyspace ( ) throws Throwable 
 + { 
 + String typeName = createType ( " CREATE TYPE % s ( txt text , i int ) " ) ; 
 + String type = KEYSPACE + ' . ' + typeName ; 
 + 
 + String fState = createFunction ( KEYSPACE _ PER _ TEST , 
 + " int , int " , 
 + " CREATE FUNCTION % s ( a int , b int ) " + 
 + " CALLED ON NULL INPUT " + 
 + " RETURNS double " + 
 + " LANGUAGE java " + 
 + " AS ' return Double . valueOf ( 1 . 0 ) ; ' " ) ; 
 + 
 + String fFinal = createFunction ( KEYSPACE _ PER _ TEST , 
 + " int " , 
 + " CREATE FUNCTION % s ( a int ) " + 
 + " CALLED ON NULL INPUT " + 
 + " RETURNS int " + 
 + " LANGUAGE java " + 
 + " AS ' return Integer . valueOf ( 1 ) ; ' ; " ) ; 
 + 
 + String fStateWrong = createFunction ( KEYSPACE , 
 + " int , int " , 
 + " CREATE FUNCTION % s ( a int , b int ) " + 
 + " CALLED ON NULL INPUT " + 
 + " RETURNS double " + 
 + " LANGUAGE java " + 
 + " AS ' return Double . valueOf ( 1 . 0 ) ; ' " ) ; 
 + 
 + String fFinalWrong = createFunction ( KEYSPACE , 
 + " int " , 
 + " CREATE FUNCTION % s ( a int ) " + 
 + " CALLED ON NULL INPUT " + 
 + " RETURNS int " + 
 + " LANGUAGE java " + 
 + " AS ' return Integer . valueOf ( 1 ) ; ' ; " ) ; 
 + 
 + assertInvalidMessage ( String . format ( " Statement on keyspace % s cannot refer to a user type in keyspace % s ; user types can only be used in the keyspace they are defined in " , 
 + KEYSPACE _ PER _ TEST , KEYSPACE ) , 
 + " CREATE AGGREGATE " + KEYSPACE _ PER _ TEST + " . test _ wrong _ ks ( int ) " + 
 + " SFUNC " + shortFunctionName ( fState ) + ' ' + 
 + " STYPE frozen < " + type + " > " + 
 + " FINALFUNC " + shortFunctionName ( fFinal ) + ' ' + 
 + " INITCOND 1 " ) ; 
 + 
 + assertInvalidMessage ( String . format ( " Statement on keyspace % s cannot refer to a user function in keyspace % s ; user functions can only be used in the keyspace they are defined in " , 
 + KEYSPACE _ PER _ TEST , KEYSPACE ) , 
 + " CREATE AGGREGATE " + KEYSPACE _ PER _ TEST + " . test _ wrong _ ks ( int ) " + 
 + " SFUNC " + fStateWrong + ' ' + 
 + " STYPE frozen < " + type + " > " + 
 + " FINALFUNC " + shortFunctionName ( fFinal ) + ' ' + 
 + " INITCOND 1 " ) ; 
 + 
 + assertInvalidMessage ( String . format ( " Statement on keyspace % s cannot refer to a user function in keyspace % s ; user functions can only be used in the keyspace they are defined in " , 
 + KEYSPACE _ PER _ TEST , KEYSPACE ) , 
 + " CREATE AGGREGATE " + KEYSPACE _ PER _ TEST + " . test _ wrong _ ks ( int ) " + 
 + " SFUNC " + shortFunctionName ( fState ) + ' ' + 
 + " STYPE frozen < " + type + " > " + 
 + " FINALFUNC " + fFinalWrong + ' ' + 
 + " INITCOND 1 " ) ; 
 + } 
 + 
 + @ Test 
 + public void testSystemKeyspace ( ) throws Throwable 
 + { 
 + String fState = createFunction ( KEYSPACE , 
 + " text , text " , 
 + " CREATE FUNCTION % s ( a text , b text ) " + 
 + " CALLED ON NULL INPUT " + 
 + " RETURNS text " + 
 + " LANGUAGE java " + 
 + " AS ' return \ " foobar \ " ; ' " ) ; 
 + 
 + createAggregate ( KEYSPACE , 
 + " text " , 
 + " CREATE AGGREGATE % s ( text ) " + 
 + " SFUNC " + shortFunctionName ( fState ) + ' ' + 
 + " STYPE text " + 
 + " FINALFUNC system . varcharasblob " + 
 + " INITCOND ' foobar ' " ) ; 
 } 
 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / UFTest . java b / test / unit / org / apache / cassandra / cql3 / UFTest . java 
 index 78c6dd9 . . 79d63a9 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / UFTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / UFTest . java 
 @ @ - 919 , 6 + 919 , 29 @ @ public class UFTest extends CQLTester 
 } 
 
 @ Test 
 + public void testWrongKeyspace ( ) throws Throwable 
 + { 
 + String typeName = createType ( " CREATE TYPE % s ( txt text , i int ) " ) ; 
 + String type = KEYSPACE + ' . ' + typeName ; 
 + 
 + assertInvalidMessage ( String . format ( " Statement on keyspace % s cannot refer to a user type in keyspace % s ; user types can only be used in the keyspace they are defined in " , 
 + KEYSPACE _ PER _ TEST , KEYSPACE ) , 
 + " CREATE FUNCTION " + KEYSPACE _ PER _ TEST + " . test _ wrong _ ks ( val int ) " + 
 + " CALLED ON NULL INPUT " + 
 + " RETURNS frozen < " + type + " > " + 
 + " LANGUAGE java \ n " + 
 + " AS $ $ return val ; $ $ ; " ) ; 
 + 
 + assertInvalidMessage ( String . format ( " Statement on keyspace % s cannot refer to a user type in keyspace % s ; user types can only be used in the keyspace they are defined in " , 
 + KEYSPACE _ PER _ TEST , KEYSPACE ) , 
 + " CREATE FUNCTION " + KEYSPACE _ PER _ TEST + " . test _ wrong _ ks ( val frozen < " + type + " > ) " + 
 + " CALLED ON NULL INPUT " + 
 + " RETURNS int " + 
 + " LANGUAGE java \ n " + 
 + " AS $ $ return val ; $ $ ; " ) ; 
 + } 
 + 
 + @ Test 
 public void testComplexNullValues ( ) throws Throwable 
 { 
 String type = KEYSPACE + ' . ' + createType ( " CREATE TYPE % s ( txt text , i int ) " ) ; 
 @ @ - 1174 , 22 + 1197 , 6 @ @ public class UFTest extends CQLTester 
 } 
 
 @ Test 
 - public void testJavaUserTypeOtherKeyspace ( ) throws Throwable 
 - { 
 - String type = KEYSPACE + ' . ' + createType ( " CREATE TYPE % s ( txt text , i int ) " ) ; 
 - 
 - String fName = createFunction ( KEYSPACE _ PER _ TEST , " frozen < " + type + ' > ' , 
 - " CREATE FUNCTION % s ( udt frozen < " + type + " > ) " + 
 - " RETURNS NULL ON NULL INPUT " + 
 - " RETURNS frozen < " + type + " > " + 
 - " LANGUAGE java " + 
 - " AS $ $ return " + 
 - " udt ; $ $ ; " ) ; 
 - 
 - execute ( " DROP FUNCTION " + fName ) ; 
 - } 
 - 
 - @ Test 
 public void testJavaUserType ( ) throws Throwable 
 { 
 String type = KEYSPACE + ' . ' + createType ( " CREATE TYPE % s ( txt text , i int ) " ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
