BLEU SCORE: 0.11598118436136108

TEST MSG: use StringBuilder correctly
GENERATED MSG: Add new types to Stress

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / metrics / TableMetrics . java b / src / java / org / apache / cassandra / metrics / TableMetrics . java <nl> index c57f240 . . 0a726d4 100644 <nl> - - - a / src / java / org / apache / cassandra / metrics / TableMetrics . java <nl> + + + b / src / java / org / apache / cassandra / metrics / TableMetrics . java <nl> @ @ - 952 , 7 + 952 , 7 @ @ public class TableMetrics <nl> String groupName = TableMetrics . class . getPackage ( ) . getName ( ) ; <nl> StringBuilder mbeanName = new StringBuilder ( ) ; <nl> mbeanName . append ( groupName ) . append ( " : " ) ; <nl> - mbeanName . append ( " type = " + type ) ; <nl> + mbeanName . append ( " type = " ) . append ( type ) ; <nl> mbeanName . append ( " , name = " ) . append ( metricName ) ; <nl> return new CassandraMetricsRegistry . MetricName ( groupName , type , metricName , " all " , mbeanName . toString ( ) ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / Ring . java b / src / java / org / apache / cassandra / tools / nodetool / Ring . java <nl> index 55220a1 . . c6b9af1 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / nodetool / Ring . java <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / Ring . java <nl> @ @ - 72 , 7 + 72 , 7 @ @ public class Ring extends NodeToolCmd <nl> String formatPlaceholder = " % % - % ds % % - 12s % % - 7s % % - 8s % % - 16s % % - 20s % % - 44s % % n " ; <nl> String format = format ( formatPlaceholder , maxAddressLength ) ; <nl> <nl> - StringBuffer errors = new StringBuffer ( ) ; <nl> + StringBuilder errors = new StringBuilder ( ) ; <nl> boolean showEffectiveOwnership = true ; <nl> / / Calculate per - token ownership of the ring <nl> Map < InetAddress , Float > ownerships ; <nl> @ @ - 83 , 7 + 83 , 7 @ @ public class Ring extends NodeToolCmd <nl> catch ( IllegalStateException ex ) <nl> { <nl> ownerships = probe . getOwnership ( ) ; <nl> - errors . append ( " Note : " + ex . getMessage ( ) + " % n " ) ; <nl> + errors . append ( " Note : " ) . append ( ex . getMessage ( ) ) . append ( " % n " ) ; <nl> showEffectiveOwnership = false ; <nl> } <nl> catch ( IllegalArgumentException ex ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / Status . java b / src / java / org / apache / cassandra / tools / nodetool / Status . java <nl> index a43b703 . . f7bb1e5 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / nodetool / Status . java <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / Status . java <nl> @ @ - 65 , 7 + 65 , 7 @ @ public class Status extends NodeToolCmd <nl> hostIDMap = probe . getHostIdMap ( ) ; <nl> epSnitchInfo = probe . getEndpointSnitchInfoProxy ( ) ; <nl> <nl> - StringBuffer errors = new StringBuffer ( ) ; <nl> + StringBuilder errors = new StringBuilder ( ) ; <nl> <nl> Map < InetAddress , Float > ownerships = null ; <nl> boolean hasEffectiveOwns = false ; <nl> @ @ - 77 , 7 + 77 , 7 @ @ public class Status extends NodeToolCmd <nl> catch ( IllegalStateException e ) <nl> { <nl> ownerships = probe . getOwnership ( ) ; <nl> - errors . append ( " Note : " + e . getMessage ( ) + " % n " ) ; <nl> + errors . append ( " Note : " ) . append ( e . getMessage ( ) ) . append ( " % n " ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) <nl> { <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressProfile . java b / tools / stress / src / org / apache / cassandra / stress / StressProfile . java <nl> index 9e2783d . . 1343cf1 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / StressProfile . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / StressProfile . java <nl> @ @ - 464 , 7 + 464 , 7 @ @ public class StressProfile implements Serializable <nl> List < ColumnDefinition > allColumns = com . google . common . collect . Lists . newArrayList ( cfMetaData . allColumnsInSelectOrder ( ) ) ; <nl> <nl> StringBuilder sb = new StringBuilder ( ) ; <nl> - sb . append ( " INSERT INTO " ) . append ( quoteIdentifier ( keyspaceName ) + " . " + quoteIdentifier ( tableName ) ) . append ( " ( " ) ; <nl> + sb . append ( " INSERT INTO " ) . append ( quoteIdentifier ( keyspaceName ) ) . append ( " . " ) . append ( quoteIdentifier ( tableName ) ) . append ( " ( " ) ; <nl> StringBuilder value = new StringBuilder ( ) ; <nl> for ( ColumnDefinition c : allColumns ) <nl> { <nl> @ @ - 664 , 7 + 664 , 7 @ @ public class StressProfile implements Serializable <nl> return first ; <nl> if ( val ! = null & & val . trim ( ) . length ( ) > 0 ) <nl> return builder . apply ( val ) ; <nl> - <nl> + <nl> return builder . apply ( defValue ) ; <nl> } <nl> <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / OptionAnyProbabilities . java b / tools / stress / src / org / apache / cassandra / stress / settings / OptionAnyProbabilities . java <nl> index 181f4d6 . . 0d045c0 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / settings / OptionAnyProbabilities . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / settings / OptionAnyProbabilities . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> package org . apache . cassandra . stress . settings ; <nl> / * <nl> - * <nl> + * <nl> * Licensed to the Apache Software Foundation ( ASF ) under one <nl> * or more contributor license agreements . See the NOTICE file <nl> * distributed with this work for additional information <nl> @ @ - 8 , 16 + 8 , 16 @ @ package org . apache . cassandra . stress . settings ; <nl> * to you under the Apache License , Version 2 . 0 ( the <nl> * " License " ) ; you may not use this file except in compliance <nl> * with the License . You may obtain a copy of the License at <nl> - * <nl> + * <nl> * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> + * <nl> * Unless required by applicable law or agreed to in writing , <nl> * software distributed under the License is distributed on an <nl> * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> * KIND , either express or implied . See the License for the <nl> * specific language governing permissions and limitations <nl> * under the License . <nl> - * <nl> + * <nl> * / <nl> <nl> <nl> @ @ - 63 , 7 + 63 , 7 @ @ public final class OptionAnyProbabilities extends OptionMulti <nl> StringBuilder sb = new StringBuilder ( ) ; <nl> for ( Map . Entry < String , Double > entry : options . entrySet ( ) ) <nl> { <nl> - sb . append ( entry . getKey ( ) + " = " + entry . getValue ( ) + " , " ) ; <nl> + sb . append ( entry . getKey ( ) ) . append ( " = " ) . append ( entry . getValue ( ) ) . append ( " , " ) ; <nl> } <nl> return sb . toString ( ) ; <nl> } <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / OptionMulti . java b / tools / stress / src / org / apache / cassandra / stress / settings / OptionMulti . java <nl> index d051554 . . 1d7ae72 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / settings / OptionMulti . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / settings / OptionMulti . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> package org . apache . cassandra . stress . settings ; <nl> / * <nl> - * <nl> + * <nl> * Licensed to the Apache Software Foundation ( ASF ) under one <nl> * or more contributor license agreements . See the NOTICE file <nl> * distributed with this work for additional information <nl> @ @ - 8 , 16 + 8 , 16 @ @ package org . apache . cassandra . stress . settings ; <nl> * to you under the Apache License , Version 2 . 0 ( the <nl> * " License " ) ; you may not use this file except in compliance <nl> * with the License . You may obtain a copy of the License at <nl> - * <nl> + * <nl> * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> + * <nl> * Unless required by applicable law or agreed to in writing , <nl> * software distributed under the License is distributed on an <nl> * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> * KIND , either express or implied . See the License for the <nl> * specific language governing permissions and limitations <nl> * under the License . <nl> - * <nl> + * <nl> * / <nl> <nl> <nl> @ @ - 112 , 7 + 112 , 7 @ @ abstract class OptionMulti extends Option <nl> public String getOptionAsString ( ) <nl> { <nl> StringBuilder sb = new StringBuilder ( ) ; <nl> - sb . append ( name + " : " ) ; <nl> + sb . append ( name ) . append ( " : " ) ; <nl> sb . append ( delegate . getOptionAsString ( ) ) ; <nl> sb . append ( " ; " ) ; <nl> if ( collectAsMap ! = null ) <nl> @ @ - 188 , 7 + 188 , 7 @ @ abstract class OptionMulti extends Option <nl> StringBuilder sb = new StringBuilder ( ) ; <nl> for ( Map . Entry < String , String > entry : options . entrySet ( ) ) <nl> { <nl> - sb . append ( entry . getKey ( ) + " = " + entry . getValue ( ) + " , " ) ; <nl> + sb . append ( entry . getKey ( ) ) . append ( " = " ) . append ( entry . getValue ( ) ) . append ( " , " ) ; <nl> } <nl> return sb . toString ( ) ; <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / metrics / TableMetrics . java b / src / java / org / apache / cassandra / metrics / TableMetrics . java 
 index c57f240 . . 0a726d4 100644 
 - - - a / src / java / org / apache / cassandra / metrics / TableMetrics . java 
 + + + b / src / java / org / apache / cassandra / metrics / TableMetrics . java 
 @ @ - 952 , 7 + 952 , 7 @ @ public class TableMetrics 
 String groupName = TableMetrics . class . getPackage ( ) . getName ( ) ; 
 StringBuilder mbeanName = new StringBuilder ( ) ; 
 mbeanName . append ( groupName ) . append ( " : " ) ; 
 - mbeanName . append ( " type = " + type ) ; 
 + mbeanName . append ( " type = " ) . append ( type ) ; 
 mbeanName . append ( " , name = " ) . append ( metricName ) ; 
 return new CassandraMetricsRegistry . MetricName ( groupName , type , metricName , " all " , mbeanName . toString ( ) ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / Ring . java b / src / java / org / apache / cassandra / tools / nodetool / Ring . java 
 index 55220a1 . . c6b9af1 100644 
 - - - a / src / java / org / apache / cassandra / tools / nodetool / Ring . java 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / Ring . java 
 @ @ - 72 , 7 + 72 , 7 @ @ public class Ring extends NodeToolCmd 
 String formatPlaceholder = " % % - % ds % % - 12s % % - 7s % % - 8s % % - 16s % % - 20s % % - 44s % % n " ; 
 String format = format ( formatPlaceholder , maxAddressLength ) ; 
 
 - StringBuffer errors = new StringBuffer ( ) ; 
 + StringBuilder errors = new StringBuilder ( ) ; 
 boolean showEffectiveOwnership = true ; 
 / / Calculate per - token ownership of the ring 
 Map < InetAddress , Float > ownerships ; 
 @ @ - 83 , 7 + 83 , 7 @ @ public class Ring extends NodeToolCmd 
 catch ( IllegalStateException ex ) 
 { 
 ownerships = probe . getOwnership ( ) ; 
 - errors . append ( " Note : " + ex . getMessage ( ) + " % n " ) ; 
 + errors . append ( " Note : " ) . append ( ex . getMessage ( ) ) . append ( " % n " ) ; 
 showEffectiveOwnership = false ; 
 } 
 catch ( IllegalArgumentException ex ) 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / Status . java b / src / java / org / apache / cassandra / tools / nodetool / Status . java 
 index a43b703 . . f7bb1e5 100644 
 - - - a / src / java / org / apache / cassandra / tools / nodetool / Status . java 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / Status . java 
 @ @ - 65 , 7 + 65 , 7 @ @ public class Status extends NodeToolCmd 
 hostIDMap = probe . getHostIdMap ( ) ; 
 epSnitchInfo = probe . getEndpointSnitchInfoProxy ( ) ; 
 
 - StringBuffer errors = new StringBuffer ( ) ; 
 + StringBuilder errors = new StringBuilder ( ) ; 
 
 Map < InetAddress , Float > ownerships = null ; 
 boolean hasEffectiveOwns = false ; 
 @ @ - 77 , 7 + 77 , 7 @ @ public class Status extends NodeToolCmd 
 catch ( IllegalStateException e ) 
 { 
 ownerships = probe . getOwnership ( ) ; 
 - errors . append ( " Note : " + e . getMessage ( ) + " % n " ) ; 
 + errors . append ( " Note : " ) . append ( e . getMessage ( ) ) . append ( " % n " ) ; 
 } 
 catch ( IllegalArgumentException ex ) 
 { 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressProfile . java b / tools / stress / src / org / apache / cassandra / stress / StressProfile . java 
 index 9e2783d . . 1343cf1 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / StressProfile . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / StressProfile . java 
 @ @ - 464 , 7 + 464 , 7 @ @ public class StressProfile implements Serializable 
 List < ColumnDefinition > allColumns = com . google . common . collect . Lists . newArrayList ( cfMetaData . allColumnsInSelectOrder ( ) ) ; 
 
 StringBuilder sb = new StringBuilder ( ) ; 
 - sb . append ( " INSERT INTO " ) . append ( quoteIdentifier ( keyspaceName ) + " . " + quoteIdentifier ( tableName ) ) . append ( " ( " ) ; 
 + sb . append ( " INSERT INTO " ) . append ( quoteIdentifier ( keyspaceName ) ) . append ( " . " ) . append ( quoteIdentifier ( tableName ) ) . append ( " ( " ) ; 
 StringBuilder value = new StringBuilder ( ) ; 
 for ( ColumnDefinition c : allColumns ) 
 { 
 @ @ - 664 , 7 + 664 , 7 @ @ public class StressProfile implements Serializable 
 return first ; 
 if ( val ! = null & & val . trim ( ) . length ( ) > 0 ) 
 return builder . apply ( val ) ; 
 - 
 + 
 return builder . apply ( defValue ) ; 
 } 
 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / OptionAnyProbabilities . java b / tools / stress / src / org / apache / cassandra / stress / settings / OptionAnyProbabilities . java 
 index 181f4d6 . . 0d045c0 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / settings / OptionAnyProbabilities . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / settings / OptionAnyProbabilities . java 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package org . apache . cassandra . stress . settings ; 
 / * 
 - * 
 + * 
 * Licensed to the Apache Software Foundation ( ASF ) under one 
 * or more contributor license agreements . See the NOTICE file 
 * distributed with this work for additional information 
 @ @ - 8 , 16 + 8 , 16 @ @ package org . apache . cassandra . stress . settings ; 
 * to you under the Apache License , Version 2 . 0 ( the 
 * " License " ) ; you may not use this file except in compliance 
 * with the License . You may obtain a copy of the License at 
 - * 
 + * 
 * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 + * 
 * Unless required by applicable law or agreed to in writing , 
 * software distributed under the License is distributed on an 
 * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 * KIND , either express or implied . See the License for the 
 * specific language governing permissions and limitations 
 * under the License . 
 - * 
 + * 
 * / 
 
 
 @ @ - 63 , 7 + 63 , 7 @ @ public final class OptionAnyProbabilities extends OptionMulti 
 StringBuilder sb = new StringBuilder ( ) ; 
 for ( Map . Entry < String , Double > entry : options . entrySet ( ) ) 
 { 
 - sb . append ( entry . getKey ( ) + " = " + entry . getValue ( ) + " , " ) ; 
 + sb . append ( entry . getKey ( ) ) . append ( " = " ) . append ( entry . getValue ( ) ) . append ( " , " ) ; 
 } 
 return sb . toString ( ) ; 
 } 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / OptionMulti . java b / tools / stress / src / org / apache / cassandra / stress / settings / OptionMulti . java 
 index d051554 . . 1d7ae72 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / settings / OptionMulti . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / settings / OptionMulti . java 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package org . apache . cassandra . stress . settings ; 
 / * 
 - * 
 + * 
 * Licensed to the Apache Software Foundation ( ASF ) under one 
 * or more contributor license agreements . See the NOTICE file 
 * distributed with this work for additional information 
 @ @ - 8 , 16 + 8 , 16 @ @ package org . apache . cassandra . stress . settings ; 
 * to you under the Apache License , Version 2 . 0 ( the 
 * " License " ) ; you may not use this file except in compliance 
 * with the License . You may obtain a copy of the License at 
 - * 
 + * 
 * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 + * 
 * Unless required by applicable law or agreed to in writing , 
 * software distributed under the License is distributed on an 
 * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 * KIND , either express or implied . See the License for the 
 * specific language governing permissions and limitations 
 * under the License . 
 - * 
 + * 
 * / 
 
 
 @ @ - 112 , 7 + 112 , 7 @ @ abstract class OptionMulti extends Option 
 public String getOptionAsString ( ) 
 { 
 StringBuilder sb = new StringBuilder ( ) ; 
 - sb . append ( name + " : " ) ; 
 + sb . append ( name ) . append ( " : " ) ; 
 sb . append ( delegate . getOptionAsString ( ) ) ; 
 sb . append ( " ; " ) ; 
 if ( collectAsMap ! = null ) 
 @ @ - 188 , 7 + 188 , 7 @ @ abstract class OptionMulti extends Option 
 StringBuilder sb = new StringBuilder ( ) ; 
 for ( Map . Entry < String , String > entry : options . entrySet ( ) ) 
 { 
 - sb . append ( entry . getKey ( ) + " = " + entry . getValue ( ) + " , " ) ; 
 + sb . append ( entry . getKey ( ) ) . append ( " = " ) . append ( entry . getValue ( ) ) . append ( " , " ) ; 
 } 
 return sb . toString ( ) ; 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
