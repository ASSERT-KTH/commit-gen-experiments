BLEU SCORE: 0.015445276590783498

TEST MSG: Move * PropDefs to o . a . c . cql3 . statements
GENERATED MSG: fix merge

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cql3 / CFPropDefs . java b / src / java / org / apache / cassandra / cql3 / CFPropDefs . java <nl> deleted file mode 100644 <nl> index 3838ad2 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / cql3 / CFPropDefs . java <nl> + + + / dev / null <nl> @ @ - 1 , 189 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . cql3 ; <nl> - <nl> - import java . util . * ; <nl> - <nl> - import org . apache . cassandra . config . CFMetaData ; <nl> - import org . apache . cassandra . config . CFMetaData . SpeculativeRetry ; <nl> - import org . apache . cassandra . db . compaction . AbstractCompactionStrategy ; <nl> - import org . apache . cassandra . exceptions . ConfigurationException ; <nl> - import org . apache . cassandra . exceptions . SyntaxException ; <nl> - import org . apache . cassandra . io . compress . CompressionParameters ; <nl> - <nl> - public class CFPropDefs extends PropertyDefinitions <nl> - { <nl> - public static final String KW _ COMMENT = " comment " ; <nl> - public static final String KW _ READREPAIRCHANCE = " read _ repair _ chance " ; <nl> - public static final String KW _ DCLOCALREADREPAIRCHANCE = " dclocal _ read _ repair _ chance " ; <nl> - public static final String KW _ GCGRACESECONDS = " gc _ grace _ seconds " ; <nl> - public static final String KW _ MINCOMPACTIONTHRESHOLD = " min _ threshold " ; <nl> - public static final String KW _ MAXCOMPACTIONTHRESHOLD = " max _ threshold " ; <nl> - public static final String KW _ REPLICATEONWRITE = " replicate _ on _ write " ; <nl> - public static final String KW _ CACHING = " caching " ; <nl> - public static final String KW _ DEFAULT _ TIME _ TO _ LIVE = " default _ time _ to _ live " ; <nl> - public static final String KW _ INDEX _ INTERVAL = " index _ interval " ; <nl> - public static final String KW _ SPECULATIVE _ RETRY = " speculative _ retry " ; <nl> - public static final String KW _ POPULATE _ IO _ CACHE _ ON _ FLUSH = " populate _ io _ cache _ on _ flush " ; <nl> - public static final String KW _ BF _ FP _ CHANCE = " bloom _ filter _ fp _ chance " ; <nl> - public static final String KW _ MEMTABLE _ FLUSH _ PERIOD = " memtable _ flush _ period _ in _ ms " ; <nl> - <nl> - public static final String KW _ COMPACTION = " compaction " ; <nl> - public static final String KW _ COMPRESSION = " compression " ; <nl> - <nl> - public static final String COMPACTION _ STRATEGY _ CLASS _ KEY = " class " ; <nl> - <nl> - public static final Set < String > keywords = new HashSet < > ( ) ; <nl> - public static final Set < String > obsoleteKeywords = new HashSet < > ( ) ; <nl> - <nl> - static <nl> - { <nl> - keywords . add ( KW _ COMMENT ) ; <nl> - keywords . add ( KW _ READREPAIRCHANCE ) ; <nl> - keywords . add ( KW _ DCLOCALREADREPAIRCHANCE ) ; <nl> - keywords . add ( KW _ GCGRACESECONDS ) ; <nl> - keywords . add ( KW _ REPLICATEONWRITE ) ; <nl> - keywords . add ( KW _ CACHING ) ; <nl> - keywords . add ( KW _ DEFAULT _ TIME _ TO _ LIVE ) ; <nl> - keywords . add ( KW _ INDEX _ INTERVAL ) ; <nl> - keywords . add ( KW _ SPECULATIVE _ RETRY ) ; <nl> - keywords . add ( KW _ POPULATE _ IO _ CACHE _ ON _ FLUSH ) ; <nl> - keywords . add ( KW _ BF _ FP _ CHANCE ) ; <nl> - keywords . add ( KW _ COMPACTION ) ; <nl> - keywords . add ( KW _ COMPRESSION ) ; <nl> - keywords . add ( KW _ MEMTABLE _ FLUSH _ PERIOD ) ; <nl> - } <nl> - <nl> - private Class < ? extends AbstractCompactionStrategy > compactionStrategyClass = null ; <nl> - <nl> - public void validate ( ) throws ConfigurationException , SyntaxException <nl> - { <nl> - / / Skip validation if the comapction strategy class is already set as it means we ' ve alreayd <nl> - / / prepared ( and redoing it would set strategyClass back to null , which we don ' t want ) <nl> - if ( compactionStrategyClass ! = null ) <nl> - return ; <nl> - <nl> - validate ( keywords , obsoleteKeywords ) ; <nl> - <nl> - Map < String , String > compactionOptions = getCompactionOptions ( ) ; <nl> - if ( ! compactionOptions . isEmpty ( ) ) <nl> - { <nl> - String strategy = compactionOptions . get ( COMPACTION _ STRATEGY _ CLASS _ KEY ) ; <nl> - if ( strategy = = null ) <nl> - throw new ConfigurationException ( " Missing sub - option ' " + COMPACTION _ STRATEGY _ CLASS _ KEY + " ' for the ' " + KW _ COMPACTION + " ' option . " ) ; <nl> - <nl> - compactionStrategyClass = CFMetaData . createCompactionStrategy ( strategy ) ; <nl> - compactionOptions . remove ( COMPACTION _ STRATEGY _ CLASS _ KEY ) ; <nl> - <nl> - CFMetaData . validateCompactionOptions ( compactionStrategyClass , compactionOptions ) ; <nl> - } <nl> - <nl> - Map < String , String > compressionOptions = getCompressionOptions ( ) ; <nl> - if ( ! compressionOptions . isEmpty ( ) ) <nl> - { <nl> - String sstableCompressionClass = compressionOptions . get ( CompressionParameters . SSTABLE _ COMPRESSION ) ; <nl> - if ( sstableCompressionClass = = null ) <nl> - throw new ConfigurationException ( " Missing sub - option ' " + CompressionParameters . SSTABLE _ COMPRESSION + " ' for the ' " + KW _ COMPRESSION + " ' option . " ) ; <nl> - <nl> - Integer chunkLength = CompressionParameters . DEFAULT _ CHUNK _ LENGTH ; <nl> - if ( compressionOptions . containsKey ( CompressionParameters . CHUNK _ LENGTH _ KB ) ) <nl> - chunkLength = CompressionParameters . parseChunkLength ( compressionOptions . get ( CompressionParameters . CHUNK _ LENGTH _ KB ) ) ; <nl> - <nl> - Map < String , String > remainingOptions = new HashMap < > ( compressionOptions ) ; <nl> - remainingOptions . remove ( CompressionParameters . SSTABLE _ COMPRESSION ) ; <nl> - remainingOptions . remove ( CompressionParameters . CHUNK _ LENGTH _ KB ) ; <nl> - CompressionParameters cp = new CompressionParameters ( sstableCompressionClass , chunkLength , remainingOptions ) ; <nl> - cp . validate ( ) ; <nl> - } <nl> - <nl> - validateMinimumInt ( KW _ DEFAULT _ TIME _ TO _ LIVE , 0 , CFMetaData . DEFAULT _ DEFAULT _ TIME _ TO _ LIVE ) ; <nl> - validateMinimumInt ( KW _ INDEX _ INTERVAL , 1 , CFMetaData . DEFAULT _ INDEX _ INTERVAL ) ; <nl> - <nl> - SpeculativeRetry . fromString ( getString ( KW _ SPECULATIVE _ RETRY , SpeculativeRetry . RetryType . NONE . name ( ) ) ) ; <nl> - } <nl> - <nl> - public Class < ? extends AbstractCompactionStrategy > getCompactionStrategy ( ) <nl> - { <nl> - return compactionStrategyClass ; <nl> - } <nl> - <nl> - public Map < String , String > getCompactionOptions ( ) throws SyntaxException <nl> - { <nl> - Map < String , String > compactionOptions = getMap ( KW _ COMPACTION ) ; <nl> - if ( compactionOptions = = null ) <nl> - return new HashMap < > ( ) ; <nl> - return compactionOptions ; <nl> - } <nl> - <nl> - public Map < String , String > getCompressionOptions ( ) throws SyntaxException <nl> - { <nl> - Map < String , String > compressionOptions = getMap ( KW _ COMPRESSION ) ; <nl> - if ( compressionOptions = = null ) <nl> - return new HashMap < > ( ) ; <nl> - return compressionOptions ; <nl> - } <nl> - <nl> - public void applyToCFMetadata ( CFMetaData cfm ) throws ConfigurationException , SyntaxException <nl> - { <nl> - if ( hasProperty ( KW _ COMMENT ) ) <nl> - cfm . comment ( getString ( KW _ COMMENT , " " ) ) ; <nl> - <nl> - cfm . readRepairChance ( getDouble ( KW _ READREPAIRCHANCE , cfm . getReadRepairChance ( ) ) ) ; <nl> - cfm . dcLocalReadRepairChance ( getDouble ( KW _ DCLOCALREADREPAIRCHANCE , cfm . getDcLocalReadRepair ( ) ) ) ; <nl> - cfm . gcGraceSeconds ( getInt ( KW _ GCGRACESECONDS , cfm . getGcGraceSeconds ( ) ) ) ; <nl> - cfm . replicateOnWrite ( getBoolean ( KW _ REPLICATEONWRITE , cfm . getReplicateOnWrite ( ) ) ) ; <nl> - int minCompactionThreshold = toInt ( KW _ MINCOMPACTIONTHRESHOLD , getCompactionOptions ( ) . get ( KW _ MINCOMPACTIONTHRESHOLD ) , cfm . getMinCompactionThreshold ( ) ) ; <nl> - int maxCompactionThreshold = toInt ( KW _ MAXCOMPACTIONTHRESHOLD , getCompactionOptions ( ) . get ( KW _ MAXCOMPACTIONTHRESHOLD ) , cfm . getMaxCompactionThreshold ( ) ) ; <nl> - if ( minCompactionThreshold < = 0 | | maxCompactionThreshold < = 0 ) <nl> - throw new ConfigurationException ( " Disabling compaction by setting compaction thresholds to 0 has been deprecated , set the compaction option ' enabled ' to false instead . " ) ; <nl> - cfm . minCompactionThreshold ( minCompactionThreshold ) ; <nl> - cfm . maxCompactionThreshold ( maxCompactionThreshold ) ; <nl> - cfm . caching ( CFMetaData . Caching . fromString ( getString ( KW _ CACHING , cfm . getCaching ( ) . toString ( ) ) ) ) ; <nl> - cfm . defaultTimeToLive ( getInt ( KW _ DEFAULT _ TIME _ TO _ LIVE , cfm . getDefaultTimeToLive ( ) ) ) ; <nl> - cfm . speculativeRetry ( CFMetaData . SpeculativeRetry . fromString ( getString ( KW _ SPECULATIVE _ RETRY , cfm . getSpeculativeRetry ( ) . toString ( ) ) ) ) ; <nl> - cfm . memtableFlushPeriod ( getInt ( KW _ MEMTABLE _ FLUSH _ PERIOD , cfm . getMemtableFlushPeriod ( ) ) ) ; <nl> - cfm . populateIoCacheOnFlush ( getBoolean ( KW _ POPULATE _ IO _ CACHE _ ON _ FLUSH , cfm . populateIoCacheOnFlush ( ) ) ) ; <nl> - cfm . indexInterval ( getInt ( KW _ INDEX _ INTERVAL , cfm . getIndexInterval ( ) ) ) ; <nl> - <nl> - if ( compactionStrategyClass ! = null ) <nl> - { <nl> - cfm . compactionStrategyClass ( compactionStrategyClass ) ; <nl> - cfm . compactionStrategyOptions ( new HashMap < > ( getCompactionOptions ( ) ) ) ; <nl> - } <nl> - <nl> - cfm . bloomFilterFpChance ( getDouble ( KW _ BF _ FP _ CHANCE , cfm . getBloomFilterFpChance ( ) ) ) ; <nl> - <nl> - if ( ! getCompressionOptions ( ) . isEmpty ( ) ) <nl> - cfm . compressionParameters ( CompressionParameters . create ( getCompressionOptions ( ) ) ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public String toString ( ) <nl> - { <nl> - return String . format ( " CFPropDefs ( % s ) " , properties . toString ( ) ) ; <nl> - } <nl> - <nl> - private void validateMinimumInt ( String field , int minimumValue , int defaultValue ) throws SyntaxException , ConfigurationException <nl> - { <nl> - Integer val = getInt ( field , null ) ; <nl> - if ( val ! = null & & val < minimumValue ) <nl> - throw new ConfigurationException ( String . format ( " % s cannot be smaller than % s , ( default % s ) " , <nl> - field , minimumValue , defaultValue ) ) ; <nl> - <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / KSPropDefs . java b / src / java / org / apache / cassandra / cql3 / KSPropDefs . java <nl> deleted file mode 100644 <nl> index 12fbc51 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / cql3 / KSPropDefs . java <nl> + + + / dev / null <nl> @ @ - 1 , 89 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . cql3 ; <nl> - <nl> - import java . util . * ; <nl> - <nl> - import org . apache . cassandra . config . KSMetaData ; <nl> - import org . apache . cassandra . exceptions . * ; <nl> - <nl> - public class KSPropDefs extends PropertyDefinitions <nl> - { <nl> - public static final String KW _ DURABLE _ WRITES = " durable _ writes " ; <nl> - public static final String KW _ REPLICATION = " replication " ; <nl> - <nl> - public static final String REPLICATION _ STRATEGY _ CLASS _ KEY = " class " ; <nl> - <nl> - public static final Set < String > keywords = new HashSet < > ( ) ; <nl> - public static final Set < String > obsoleteKeywords = new HashSet < > ( ) ; <nl> - <nl> - static <nl> - { <nl> - keywords . add ( KW _ DURABLE _ WRITES ) ; <nl> - keywords . add ( KW _ REPLICATION ) ; <nl> - } <nl> - <nl> - private String strategyClass ; <nl> - <nl> - public void validate ( ) throws SyntaxException <nl> - { <nl> - / / Skip validation if the strategy class is already set as it means we ' ve alreayd <nl> - / / prepared ( and redoing it would set strategyClass back to null , which we don ' t want ) <nl> - if ( strategyClass ! = null ) <nl> - return ; <nl> - <nl> - validate ( keywords , obsoleteKeywords ) ; <nl> - <nl> - Map < String , String > replicationOptions = getReplicationOptions ( ) ; <nl> - if ( ! replicationOptions . isEmpty ( ) ) <nl> - { <nl> - strategyClass = replicationOptions . get ( REPLICATION _ STRATEGY _ CLASS _ KEY ) ; <nl> - replicationOptions . remove ( REPLICATION _ STRATEGY _ CLASS _ KEY ) ; <nl> - } <nl> - } <nl> - <nl> - public Map < String , String > getReplicationOptions ( ) throws SyntaxException <nl> - { <nl> - Map < String , String > replicationOptions = getMap ( KW _ REPLICATION ) ; <nl> - if ( replicationOptions = = null ) <nl> - return Collections . emptyMap ( ) ; <nl> - return replicationOptions ; <nl> - } <nl> - <nl> - public String getReplicationStrategyClass ( ) <nl> - { <nl> - return strategyClass ; <nl> - } <nl> - <nl> - public KSMetaData asKSMetadata ( String ksName ) throws RequestValidationException <nl> - { <nl> - return KSMetaData . newKeyspace ( ksName , getReplicationStrategyClass ( ) , getReplicationOptions ( ) , getBoolean ( KW _ DURABLE _ WRITES , true ) ) ; <nl> - } <nl> - <nl> - public KSMetaData asKSMetadataUpdate ( KSMetaData old ) throws RequestValidationException <nl> - { <nl> - String sClass = strategyClass ; <nl> - Map < String , String > sOptions = getReplicationOptions ( ) ; <nl> - if ( sClass = = null ) <nl> - { <nl> - sClass = old . strategyClass . getName ( ) ; <nl> - sOptions = old . strategyOptions ; <nl> - } <nl> - return KSMetaData . newKeyspace ( old . name , sClass , sOptions , getBoolean ( KW _ DURABLE _ WRITES , old . durableWrites ) ) ; <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / PropertyDefinitions . java b / src / java / org / apache / cassandra / cql3 / PropertyDefinitions . java <nl> deleted file mode 100644 <nl> index b48d27a . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / cql3 / PropertyDefinitions . java <nl> + + + / dev / null <nl> @ @ - 1 , 143 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . cql3 ; <nl> - <nl> - import java . util . * ; <nl> - <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> - <nl> - import org . apache . cassandra . exceptions . SyntaxException ; <nl> - <nl> - public class PropertyDefinitions <nl> - { <nl> - protected static final Logger logger = LoggerFactory . getLogger ( PropertyDefinitions . class ) ; <nl> - <nl> - protected final Map < String , Object > properties = new HashMap < String , Object > ( ) ; <nl> - <nl> - public void addProperty ( String name , String value ) throws SyntaxException <nl> - { <nl> - if ( properties . put ( name , value ) ! = null ) <nl> - throw new SyntaxException ( String . format ( " Multiple definition for property ' % s ' " , name ) ) ; <nl> - } <nl> - <nl> - public void addProperty ( String name , Map < String , String > value ) throws SyntaxException <nl> - { <nl> - if ( properties . put ( name , value ) ! = null ) <nl> - throw new SyntaxException ( String . format ( " Multiple definition for property ' % s ' " , name ) ) ; <nl> - } <nl> - <nl> - public void validate ( Set < String > keywords , Set < String > obsolete ) throws SyntaxException <nl> - { <nl> - for ( String name : properties . keySet ( ) ) <nl> - { <nl> - if ( keywords . contains ( name ) ) <nl> - continue ; <nl> - <nl> - if ( obsolete . contains ( name ) ) <nl> - logger . warn ( " Ignoring obsolete property { } " , name ) ; <nl> - else <nl> - throw new SyntaxException ( String . format ( " Unknown property ' % s ' " , name ) ) ; <nl> - } <nl> - } <nl> - <nl> - protected String getSimple ( String name ) throws SyntaxException <nl> - { <nl> - Object val = properties . get ( name ) ; <nl> - if ( val = = null ) <nl> - return null ; <nl> - if ( ! ( val instanceof String ) ) <nl> - throw new SyntaxException ( String . format ( " Invalid value for property ' % s ' . It should be a string " , name ) ) ; <nl> - return ( String ) val ; <nl> - } <nl> - <nl> - protected Map < String , String > getMap ( String name ) throws SyntaxException <nl> - { <nl> - Object val = properties . get ( name ) ; <nl> - if ( val = = null ) <nl> - return null ; <nl> - if ( ! ( val instanceof Map ) ) <nl> - throw new SyntaxException ( String . format ( " Invalid value for property ' % s ' . It should be a map . " , name ) ) ; <nl> - return ( Map < String , String > ) val ; <nl> - } <nl> - <nl> - public Boolean hasProperty ( String name ) <nl> - { <nl> - return properties . containsKey ( name ) ; <nl> - } <nl> - <nl> - public String getString ( String key , String defaultValue ) throws SyntaxException <nl> - { <nl> - String value = getSimple ( key ) ; <nl> - return value ! = null ? value : defaultValue ; <nl> - } <nl> - <nl> - / / Return a property value , typed as a Boolean <nl> - public Boolean getBoolean ( String key , Boolean defaultValue ) throws SyntaxException <nl> - { <nl> - String value = getSimple ( key ) ; <nl> - return ( value = = null ) ? defaultValue : value . toLowerCase ( ) . matches ( " ( 1 | true | yes ) " ) ; <nl> - } <nl> - <nl> - / / Return a property value , typed as a Double <nl> - public Double getDouble ( String key , Double defaultValue ) throws SyntaxException <nl> - { <nl> - String value = getSimple ( key ) ; <nl> - if ( value = = null ) <nl> - { <nl> - return defaultValue ; <nl> - } <nl> - else <nl> - { <nl> - try <nl> - { <nl> - return Double . valueOf ( value ) ; <nl> - } <nl> - catch ( NumberFormatException e ) <nl> - { <nl> - throw new SyntaxException ( String . format ( " Invalid double value % s for ' % s ' " , value , key ) ) ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - / / Return a property value , typed as an Integer <nl> - public Integer getInt ( String key , Integer defaultValue ) throws SyntaxException <nl> - { <nl> - String value = getSimple ( key ) ; <nl> - return toInt ( key , value , defaultValue ) ; <nl> - } <nl> - <nl> - public static Integer toInt ( String key , String value , Integer defaultValue ) throws SyntaxException <nl> - { <nl> - if ( value = = null ) <nl> - { <nl> - return defaultValue ; <nl> - } <nl> - else <nl> - { <nl> - try <nl> - { <nl> - return Integer . valueOf ( value ) ; <nl> - } <nl> - catch ( NumberFormatException e ) <nl> - { <nl> - throw new SyntaxException ( String . format ( " Invalid integer value % s for ' % s ' " , value , key ) ) ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java <nl> index d05fe26 . . 39d1cde 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java <nl> @ @ - 21 , 7 + 21 , 6 @ @ import org . apache . cassandra . auth . Permission ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . KSMetaData ; <nl> import org . apache . cassandra . config . Schema ; <nl> - import org . apache . cassandra . cql3 . KSPropDefs ; <nl> import org . apache . cassandra . db . Keyspace ; <nl> import org . apache . cassandra . exceptions . * ; <nl> import org . apache . cassandra . locator . AbstractReplicationStrategy ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CFPropDefs . java b / src / java / org / apache / cassandra / cql3 / statements / CFPropDefs . java <nl> new file mode 100644 <nl> index 0000000 . . 6ce6406 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CFPropDefs . java <nl> @ @ - 0 , 0 + 1 , 189 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . cql3 . statements ; <nl> + <nl> + import java . util . * ; <nl> + <nl> + import org . apache . cassandra . config . CFMetaData ; <nl> + import org . apache . cassandra . config . CFMetaData . SpeculativeRetry ; <nl> + import org . apache . cassandra . db . compaction . AbstractCompactionStrategy ; <nl> + import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . exceptions . SyntaxException ; <nl> + import org . apache . cassandra . io . compress . CompressionParameters ; <nl> + <nl> + public class CFPropDefs extends PropertyDefinitions <nl> + { <nl> + public static final String KW _ COMMENT = " comment " ; <nl> + public static final String KW _ READREPAIRCHANCE = " read _ repair _ chance " ; <nl> + public static final String KW _ DCLOCALREADREPAIRCHANCE = " dclocal _ read _ repair _ chance " ; <nl> + public static final String KW _ GCGRACESECONDS = " gc _ grace _ seconds " ; <nl> + public static final String KW _ MINCOMPACTIONTHRESHOLD = " min _ threshold " ; <nl> + public static final String KW _ MAXCOMPACTIONTHRESHOLD = " max _ threshold " ; <nl> + public static final String KW _ REPLICATEONWRITE = " replicate _ on _ write " ; <nl> + public static final String KW _ CACHING = " caching " ; <nl> + public static final String KW _ DEFAULT _ TIME _ TO _ LIVE = " default _ time _ to _ live " ; <nl> + public static final String KW _ INDEX _ INTERVAL = " index _ interval " ; <nl> + public static final String KW _ SPECULATIVE _ RETRY = " speculative _ retry " ; <nl> + public static final String KW _ POPULATE _ IO _ CACHE _ ON _ FLUSH = " populate _ io _ cache _ on _ flush " ; <nl> + public static final String KW _ BF _ FP _ CHANCE = " bloom _ filter _ fp _ chance " ; <nl> + public static final String KW _ MEMTABLE _ FLUSH _ PERIOD = " memtable _ flush _ period _ in _ ms " ; <nl> + <nl> + public static final String KW _ COMPACTION = " compaction " ; <nl> + public static final String KW _ COMPRESSION = " compression " ; <nl> + <nl> + public static final String COMPACTION _ STRATEGY _ CLASS _ KEY = " class " ; <nl> + <nl> + public static final Set < String > keywords = new HashSet < > ( ) ; <nl> + public static final Set < String > obsoleteKeywords = new HashSet < > ( ) ; <nl> + <nl> + static <nl> + { <nl> + keywords . add ( KW _ COMMENT ) ; <nl> + keywords . add ( KW _ READREPAIRCHANCE ) ; <nl> + keywords . add ( KW _ DCLOCALREADREPAIRCHANCE ) ; <nl> + keywords . add ( KW _ GCGRACESECONDS ) ; <nl> + keywords . add ( KW _ REPLICATEONWRITE ) ; <nl> + keywords . add ( KW _ CACHING ) ; <nl> + keywords . add ( KW _ DEFAULT _ TIME _ TO _ LIVE ) ; <nl> + keywords . add ( KW _ INDEX _ INTERVAL ) ; <nl> + keywords . add ( KW _ SPECULATIVE _ RETRY ) ; <nl> + keywords . add ( KW _ POPULATE _ IO _ CACHE _ ON _ FLUSH ) ; <nl> + keywords . add ( KW _ BF _ FP _ CHANCE ) ; <nl> + keywords . add ( KW _ COMPACTION ) ; <nl> + keywords . add ( KW _ COMPRESSION ) ; <nl> + keywords . add ( KW _ MEMTABLE _ FLUSH _ PERIOD ) ; <nl> + } <nl> + <nl> + private Class < ? extends AbstractCompactionStrategy > compactionStrategyClass = null ; <nl> + <nl> + public void validate ( ) throws ConfigurationException , SyntaxException <nl> + { <nl> + / / Skip validation if the comapction strategy class is already set as it means we ' ve alreayd <nl> + / / prepared ( and redoing it would set strategyClass back to null , which we don ' t want ) <nl> + if ( compactionStrategyClass ! = null ) <nl> + return ; <nl> + <nl> + validate ( keywords , obsoleteKeywords ) ; <nl> + <nl> + Map < String , String > compactionOptions = getCompactionOptions ( ) ; <nl> + if ( ! compactionOptions . isEmpty ( ) ) <nl> + { <nl> + String strategy = compactionOptions . get ( COMPACTION _ STRATEGY _ CLASS _ KEY ) ; <nl> + if ( strategy = = null ) <nl> + throw new ConfigurationException ( " Missing sub - option ' " + COMPACTION _ STRATEGY _ CLASS _ KEY + " ' for the ' " + KW _ COMPACTION + " ' option . " ) ; <nl> + <nl> + compactionStrategyClass = CFMetaData . createCompactionStrategy ( strategy ) ; <nl> + compactionOptions . remove ( COMPACTION _ STRATEGY _ CLASS _ KEY ) ; <nl> + <nl> + CFMetaData . validateCompactionOptions ( compactionStrategyClass , compactionOptions ) ; <nl> + } <nl> + <nl> + Map < String , String > compressionOptions = getCompressionOptions ( ) ; <nl> + if ( ! compressionOptions . isEmpty ( ) ) <nl> + { <nl> + String sstableCompressionClass = compressionOptions . get ( CompressionParameters . SSTABLE _ COMPRESSION ) ; <nl> + if ( sstableCompressionClass = = null ) <nl> + throw new ConfigurationException ( " Missing sub - option ' " + CompressionParameters . SSTABLE _ COMPRESSION + " ' for the ' " + KW _ COMPRESSION + " ' option . " ) ; <nl> + <nl> + Integer chunkLength = CompressionParameters . DEFAULT _ CHUNK _ LENGTH ; <nl> + if ( compressionOptions . containsKey ( CompressionParameters . CHUNK _ LENGTH _ KB ) ) <nl> + chunkLength = CompressionParameters . parseChunkLength ( compressionOptions . get ( CompressionParameters . CHUNK _ LENGTH _ KB ) ) ; <nl> + <nl> + Map < String , String > remainingOptions = new HashMap < > ( compressionOptions ) ; <nl> + remainingOptions . remove ( CompressionParameters . SSTABLE _ COMPRESSION ) ; <nl> + remainingOptions . remove ( CompressionParameters . CHUNK _ LENGTH _ KB ) ; <nl> + CompressionParameters cp = new CompressionParameters ( sstableCompressionClass , chunkLength , remainingOptions ) ; <nl> + cp . validate ( ) ; <nl> + } <nl> + <nl> + validateMinimumInt ( KW _ DEFAULT _ TIME _ TO _ LIVE , 0 , CFMetaData . DEFAULT _ DEFAULT _ TIME _ TO _ LIVE ) ; <nl> + validateMinimumInt ( KW _ INDEX _ INTERVAL , 1 , CFMetaData . DEFAULT _ INDEX _ INTERVAL ) ; <nl> + <nl> + SpeculativeRetry . fromString ( getString ( KW _ SPECULATIVE _ RETRY , SpeculativeRetry . RetryType . NONE . name ( ) ) ) ; <nl> + } <nl> + <nl> + public Class < ? extends AbstractCompactionStrategy > getCompactionStrategy ( ) <nl> + { <nl> + return compactionStrategyClass ; <nl> + } <nl> + <nl> + public Map < String , String > getCompactionOptions ( ) throws SyntaxException <nl> + { <nl> + Map < String , String > compactionOptions = getMap ( KW _ COMPACTION ) ; <nl> + if ( compactionOptions = = null ) <nl> + return new HashMap < > ( ) ; <nl> + return compactionOptions ; <nl> + } <nl> + <nl> + public Map < String , String > getCompressionOptions ( ) throws SyntaxException <nl> + { <nl> + Map < String , String > compressionOptions = getMap ( KW _ COMPRESSION ) ; <nl> + if ( compressionOptions = = null ) <nl> + return new HashMap < > ( ) ; <nl> + return compressionOptions ; <nl> + } <nl> + <nl> + public void applyToCFMetadata ( CFMetaData cfm ) throws ConfigurationException , SyntaxException <nl> + { <nl> + if ( hasProperty ( KW _ COMMENT ) ) <nl> + cfm . comment ( getString ( KW _ COMMENT , " " ) ) ; <nl> + <nl> + cfm . readRepairChance ( getDouble ( KW _ READREPAIRCHANCE , cfm . getReadRepairChance ( ) ) ) ; <nl> + cfm . dcLocalReadRepairChance ( getDouble ( KW _ DCLOCALREADREPAIRCHANCE , cfm . getDcLocalReadRepair ( ) ) ) ; <nl> + cfm . gcGraceSeconds ( getInt ( KW _ GCGRACESECONDS , cfm . getGcGraceSeconds ( ) ) ) ; <nl> + cfm . replicateOnWrite ( getBoolean ( KW _ REPLICATEONWRITE , cfm . getReplicateOnWrite ( ) ) ) ; <nl> + int minCompactionThreshold = toInt ( KW _ MINCOMPACTIONTHRESHOLD , getCompactionOptions ( ) . get ( KW _ MINCOMPACTIONTHRESHOLD ) , cfm . getMinCompactionThreshold ( ) ) ; <nl> + int maxCompactionThreshold = toInt ( KW _ MAXCOMPACTIONTHRESHOLD , getCompactionOptions ( ) . get ( KW _ MAXCOMPACTIONTHRESHOLD ) , cfm . getMaxCompactionThreshold ( ) ) ; <nl> + if ( minCompactionThreshold < = 0 | | maxCompactionThreshold < = 0 ) <nl> + throw new ConfigurationException ( " Disabling compaction by setting compaction thresholds to 0 has been deprecated , set the compaction option ' enabled ' to false instead . " ) ; <nl> + cfm . minCompactionThreshold ( minCompactionThreshold ) ; <nl> + cfm . maxCompactionThreshold ( maxCompactionThreshold ) ; <nl> + cfm . caching ( CFMetaData . Caching . fromString ( getString ( KW _ CACHING , cfm . getCaching ( ) . toString ( ) ) ) ) ; <nl> + cfm . defaultTimeToLive ( getInt ( KW _ DEFAULT _ TIME _ TO _ LIVE , cfm . getDefaultTimeToLive ( ) ) ) ; <nl> + cfm . speculativeRetry ( CFMetaData . SpeculativeRetry . fromString ( getString ( KW _ SPECULATIVE _ RETRY , cfm . getSpeculativeRetry ( ) . toString ( ) ) ) ) ; <nl> + cfm . memtableFlushPeriod ( getInt ( KW _ MEMTABLE _ FLUSH _ PERIOD , cfm . getMemtableFlushPeriod ( ) ) ) ; <nl> + cfm . populateIoCacheOnFlush ( getBoolean ( KW _ POPULATE _ IO _ CACHE _ ON _ FLUSH , cfm . populateIoCacheOnFlush ( ) ) ) ; <nl> + cfm . indexInterval ( getInt ( KW _ INDEX _ INTERVAL , cfm . getIndexInterval ( ) ) ) ; <nl> + <nl> + if ( compactionStrategyClass ! = null ) <nl> + { <nl> + cfm . compactionStrategyClass ( compactionStrategyClass ) ; <nl> + cfm . compactionStrategyOptions ( new HashMap < > ( getCompactionOptions ( ) ) ) ; <nl> + } <nl> + <nl> + cfm . bloomFilterFpChance ( getDouble ( KW _ BF _ FP _ CHANCE , cfm . getBloomFilterFpChance ( ) ) ) ; <nl> + <nl> + if ( ! getCompressionOptions ( ) . isEmpty ( ) ) <nl> + cfm . compressionParameters ( CompressionParameters . create ( getCompressionOptions ( ) ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return String . format ( " CFPropDefs ( % s ) " , properties . toString ( ) ) ; <nl> + } <nl> + <nl> + private void validateMinimumInt ( String field , int minimumValue , int defaultValue ) throws SyntaxException , ConfigurationException <nl> + { <nl> + Integer val = getInt ( field , null ) ; <nl> + if ( val ! = null & & val < minimumValue ) <nl> + throw new ConfigurationException ( String . format ( " % s cannot be smaller than % s , ( default % s ) " , <nl> + field , minimumValue , defaultValue ) ) ; <nl> + <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java <nl> index 8245453 . . 2ed1d91 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java <nl> @ @ - 21 , 7 + 21 , 6 @ @ import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . auth . Permission ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . Schema ; <nl> - import org . apache . cassandra . cql3 . KSPropDefs ; <nl> import org . apache . cassandra . exceptions . AlreadyExistsException ; <nl> import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> import org . apache . cassandra . exceptions . RequestValidationException ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / KSPropDefs . java b / src / java / org / apache / cassandra / cql3 / statements / KSPropDefs . java <nl> new file mode 100644 <nl> index 0000000 . . 7c05435 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / KSPropDefs . java <nl> @ @ - 0 , 0 + 1 , 89 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . cql3 . statements ; <nl> + <nl> + import java . util . * ; <nl> + <nl> + import org . apache . cassandra . config . KSMetaData ; <nl> + import org . apache . cassandra . exceptions . * ; <nl> + <nl> + public class KSPropDefs extends PropertyDefinitions <nl> + { <nl> + public static final String KW _ DURABLE _ WRITES = " durable _ writes " ; <nl> + public static final String KW _ REPLICATION = " replication " ; <nl> + <nl> + public static final String REPLICATION _ STRATEGY _ CLASS _ KEY = " class " ; <nl> + <nl> + public static final Set < String > keywords = new HashSet < > ( ) ; <nl> + public static final Set < String > obsoleteKeywords = new HashSet < > ( ) ; <nl> + <nl> + static <nl> + { <nl> + keywords . add ( KW _ DURABLE _ WRITES ) ; <nl> + keywords . add ( KW _ REPLICATION ) ; <nl> + } <nl> + <nl> + private String strategyClass ; <nl> + <nl> + public void validate ( ) throws SyntaxException <nl> + { <nl> + / / Skip validation if the strategy class is already set as it means we ' ve alreayd <nl> + / / prepared ( and redoing it would set strategyClass back to null , which we don ' t want ) <nl> + if ( strategyClass ! = null ) <nl> + return ; <nl> + <nl> + validate ( keywords , obsoleteKeywords ) ; <nl> + <nl> + Map < String , String > replicationOptions = getReplicationOptions ( ) ; <nl> + if ( ! replicationOptions . isEmpty ( ) ) <nl> + { <nl> + strategyClass = replicationOptions . get ( REPLICATION _ STRATEGY _ CLASS _ KEY ) ; <nl> + replicationOptions . remove ( REPLICATION _ STRATEGY _ CLASS _ KEY ) ; <nl> + } <nl> + } <nl> + <nl> + public Map < String , String > getReplicationOptions ( ) throws SyntaxException <nl> + { <nl> + Map < String , String > replicationOptions = getMap ( KW _ REPLICATION ) ; <nl> + if ( replicationOptions = = null ) <nl> + return Collections . emptyMap ( ) ; <nl> + return replicationOptions ; <nl> + } <nl> + <nl> + public String getReplicationStrategyClass ( ) <nl> + { <nl> + return strategyClass ; <nl> + } <nl> + <nl> + public KSMetaData asKSMetadata ( String ksName ) throws RequestValidationException <nl> + { <nl> + return KSMetaData . newKeyspace ( ksName , getReplicationStrategyClass ( ) , getReplicationOptions ( ) , getBoolean ( KW _ DURABLE _ WRITES , true ) ) ; <nl> + } <nl> + <nl> + public KSMetaData asKSMetadataUpdate ( KSMetaData old ) throws RequestValidationException <nl> + { <nl> + String sClass = strategyClass ; <nl> + Map < String , String > sOptions = getReplicationOptions ( ) ; <nl> + if ( sClass = = null ) <nl> + { <nl> + sClass = old . strategyClass . getName ( ) ; <nl> + sOptions = old . strategyOptions ; <nl> + } <nl> + return KSMetaData . newKeyspace ( old . name , sClass , sOptions , getBoolean ( KW _ DURABLE _ WRITES , old . durableWrites ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / PropertyDefinitions . java b / src / java / org / apache / cassandra / cql3 / statements / PropertyDefinitions . java <nl> new file mode 100644 <nl> index 0000000 . . eb4f074 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / PropertyDefinitions . java <nl> @ @ - 0 , 0 + 1 , 143 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . cql3 . statements ; <nl> + <nl> + import java . util . * ; <nl> + <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import org . apache . cassandra . exceptions . SyntaxException ; <nl> + <nl> + public class PropertyDefinitions <nl> + { <nl> + protected static final Logger logger = LoggerFactory . getLogger ( PropertyDefinitions . class ) ; <nl> + <nl> + protected final Map < String , Object > properties = new HashMap < String , Object > ( ) ; <nl> + <nl> + public void addProperty ( String name , String value ) throws SyntaxException <nl> + { <nl> + if ( properties . put ( name , value ) ! = null ) <nl> + throw new SyntaxException ( String . format ( " Multiple definition for property ' % s ' " , name ) ) ; <nl> + } <nl> + <nl> + public void addProperty ( String name , Map < String , String > value ) throws SyntaxException <nl> + { <nl> + if ( properties . put ( name , value ) ! = null ) <nl> + throw new SyntaxException ( String . format ( " Multiple definition for property ' % s ' " , name ) ) ; <nl> + } <nl> + <nl> + public void validate ( Set < String > keywords , Set < String > obsolete ) throws SyntaxException <nl> + { <nl> + for ( String name : properties . keySet ( ) ) <nl> + { <nl> + if ( keywords . contains ( name ) ) <nl> + continue ; <nl> + <nl> + if ( obsolete . contains ( name ) ) <nl> + logger . warn ( " Ignoring obsolete property { } " , name ) ; <nl> + else <nl> + throw new SyntaxException ( String . format ( " Unknown property ' % s ' " , name ) ) ; <nl> + } <nl> + } <nl> + <nl> + protected String getSimple ( String name ) throws SyntaxException <nl> + { <nl> + Object val = properties . get ( name ) ; <nl> + if ( val = = null ) <nl> + return null ; <nl> + if ( ! ( val instanceof String ) ) <nl> + throw new SyntaxException ( String . format ( " Invalid value for property ' % s ' . It should be a string " , name ) ) ; <nl> + return ( String ) val ; <nl> + } <nl> + <nl> + protected Map < String , String > getMap ( String name ) throws SyntaxException <nl> + { <nl> + Object val = properties . get ( name ) ; <nl> + if ( val = = null ) <nl> + return null ; <nl> + if ( ! ( val instanceof Map ) ) <nl> + throw new SyntaxException ( String . format ( " Invalid value for property ' % s ' . It should be a map . " , name ) ) ; <nl> + return ( Map < String , String > ) val ; <nl> + } <nl> + <nl> + public Boolean hasProperty ( String name ) <nl> + { <nl> + return properties . containsKey ( name ) ; <nl> + } <nl> + <nl> + public String getString ( String key , String defaultValue ) throws SyntaxException <nl> + { <nl> + String value = getSimple ( key ) ; <nl> + return value ! = null ? value : defaultValue ; <nl> + } <nl> + <nl> + / / Return a property value , typed as a Boolean <nl> + public Boolean getBoolean ( String key , Boolean defaultValue ) throws SyntaxException <nl> + { <nl> + String value = getSimple ( key ) ; <nl> + return ( value = = null ) ? defaultValue : value . toLowerCase ( ) . matches ( " ( 1 | true | yes ) " ) ; <nl> + } <nl> + <nl> + / / Return a property value , typed as a Double <nl> + public Double getDouble ( String key , Double defaultValue ) throws SyntaxException <nl> + { <nl> + String value = getSimple ( key ) ; <nl> + if ( value = = null ) <nl> + { <nl> + return defaultValue ; <nl> + } <nl> + else <nl> + { <nl> + try <nl> + { <nl> + return Double . valueOf ( value ) ; <nl> + } <nl> + catch ( NumberFormatException e ) <nl> + { <nl> + throw new SyntaxException ( String . format ( " Invalid double value % s for ' % s ' " , value , key ) ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + / / Return a property value , typed as an Integer <nl> + public Integer getInt ( String key , Integer defaultValue ) throws SyntaxException <nl> + { <nl> + String value = getSimple ( key ) ; <nl> + return toInt ( key , value , defaultValue ) ; <nl> + } <nl> + <nl> + public static Integer toInt ( String key , String value , Integer defaultValue ) throws SyntaxException <nl> + { <nl> + if ( value = = null ) <nl> + { <nl> + return defaultValue ; <nl> + } <nl> + else <nl> + { <nl> + try <nl> + { <nl> + return Integer . valueOf ( value ) ; <nl> + } <nl> + catch ( NumberFormatException e ) <nl> + { <nl> + throw new SyntaxException ( String . format ( " Invalid integer value % s for ' % s ' " , value , key ) ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> index 51464ab . . 0f94918 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> @ @ - 26 , 7 + 26 , 7 @ @ import com . google . common . collect . Lists ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import org . apache . cassandra . cql3 . CFPropDefs ; <nl> + import org . apache . cassandra . cql3 . statements . CFPropDefs ; <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . io . sstable . SSTableReader ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / service / ConsistencyChecker . java b / src / java / org / apache / cassandra / service / ConsistencyChecker . java <nl> index cf6c5d1 . . 983f73f 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ConsistencyChecker . java <nl> + + + b / src / java / org / apache / cassandra / service / ConsistencyChecker . java <nl> @ @ - 49 , 7 + 49 , 7 @ @ import org . slf4j . LoggerFactory ; <nl> <nl> class ConsistencyChecker implements Runnable <nl> { <nl> - private static Logger logger _ = LoggerFactory . getLogger ( ConsistencyManager . class ) ; <nl> + private static Logger logger _ = LoggerFactory . getLogger ( ConsistencyChecker . class ) ; <nl> private static ExpiringMap < String , String > readRepairTable _ = new ExpiringMap < String , String > ( DatabaseDescriptor . getRpcTimeout ( ) ) ; <nl> <nl> private final String table _ ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / cql3 / CFPropDefs . java b / src / java / org / apache / cassandra / cql3 / CFPropDefs . java 
 deleted file mode 100644 
 index 3838ad2 . . 0000000 
 - - - a / src / java / org / apache / cassandra / cql3 / CFPropDefs . java 
 + + + / dev / null 
 @ @ - 1 , 189 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . cql3 ; 
 - 
 - import java . util . * ; 
 - 
 - import org . apache . cassandra . config . CFMetaData ; 
 - import org . apache . cassandra . config . CFMetaData . SpeculativeRetry ; 
 - import org . apache . cassandra . db . compaction . AbstractCompactionStrategy ; 
 - import org . apache . cassandra . exceptions . ConfigurationException ; 
 - import org . apache . cassandra . exceptions . SyntaxException ; 
 - import org . apache . cassandra . io . compress . CompressionParameters ; 
 - 
 - public class CFPropDefs extends PropertyDefinitions 
 - { 
 - public static final String KW _ COMMENT = " comment " ; 
 - public static final String KW _ READREPAIRCHANCE = " read _ repair _ chance " ; 
 - public static final String KW _ DCLOCALREADREPAIRCHANCE = " dclocal _ read _ repair _ chance " ; 
 - public static final String KW _ GCGRACESECONDS = " gc _ grace _ seconds " ; 
 - public static final String KW _ MINCOMPACTIONTHRESHOLD = " min _ threshold " ; 
 - public static final String KW _ MAXCOMPACTIONTHRESHOLD = " max _ threshold " ; 
 - public static final String KW _ REPLICATEONWRITE = " replicate _ on _ write " ; 
 - public static final String KW _ CACHING = " caching " ; 
 - public static final String KW _ DEFAULT _ TIME _ TO _ LIVE = " default _ time _ to _ live " ; 
 - public static final String KW _ INDEX _ INTERVAL = " index _ interval " ; 
 - public static final String KW _ SPECULATIVE _ RETRY = " speculative _ retry " ; 
 - public static final String KW _ POPULATE _ IO _ CACHE _ ON _ FLUSH = " populate _ io _ cache _ on _ flush " ; 
 - public static final String KW _ BF _ FP _ CHANCE = " bloom _ filter _ fp _ chance " ; 
 - public static final String KW _ MEMTABLE _ FLUSH _ PERIOD = " memtable _ flush _ period _ in _ ms " ; 
 - 
 - public static final String KW _ COMPACTION = " compaction " ; 
 - public static final String KW _ COMPRESSION = " compression " ; 
 - 
 - public static final String COMPACTION _ STRATEGY _ CLASS _ KEY = " class " ; 
 - 
 - public static final Set < String > keywords = new HashSet < > ( ) ; 
 - public static final Set < String > obsoleteKeywords = new HashSet < > ( ) ; 
 - 
 - static 
 - { 
 - keywords . add ( KW _ COMMENT ) ; 
 - keywords . add ( KW _ READREPAIRCHANCE ) ; 
 - keywords . add ( KW _ DCLOCALREADREPAIRCHANCE ) ; 
 - keywords . add ( KW _ GCGRACESECONDS ) ; 
 - keywords . add ( KW _ REPLICATEONWRITE ) ; 
 - keywords . add ( KW _ CACHING ) ; 
 - keywords . add ( KW _ DEFAULT _ TIME _ TO _ LIVE ) ; 
 - keywords . add ( KW _ INDEX _ INTERVAL ) ; 
 - keywords . add ( KW _ SPECULATIVE _ RETRY ) ; 
 - keywords . add ( KW _ POPULATE _ IO _ CACHE _ ON _ FLUSH ) ; 
 - keywords . add ( KW _ BF _ FP _ CHANCE ) ; 
 - keywords . add ( KW _ COMPACTION ) ; 
 - keywords . add ( KW _ COMPRESSION ) ; 
 - keywords . add ( KW _ MEMTABLE _ FLUSH _ PERIOD ) ; 
 - } 
 - 
 - private Class < ? extends AbstractCompactionStrategy > compactionStrategyClass = null ; 
 - 
 - public void validate ( ) throws ConfigurationException , SyntaxException 
 - { 
 - / / Skip validation if the comapction strategy class is already set as it means we ' ve alreayd 
 - / / prepared ( and redoing it would set strategyClass back to null , which we don ' t want ) 
 - if ( compactionStrategyClass ! = null ) 
 - return ; 
 - 
 - validate ( keywords , obsoleteKeywords ) ; 
 - 
 - Map < String , String > compactionOptions = getCompactionOptions ( ) ; 
 - if ( ! compactionOptions . isEmpty ( ) ) 
 - { 
 - String strategy = compactionOptions . get ( COMPACTION _ STRATEGY _ CLASS _ KEY ) ; 
 - if ( strategy = = null ) 
 - throw new ConfigurationException ( " Missing sub - option ' " + COMPACTION _ STRATEGY _ CLASS _ KEY + " ' for the ' " + KW _ COMPACTION + " ' option . " ) ; 
 - 
 - compactionStrategyClass = CFMetaData . createCompactionStrategy ( strategy ) ; 
 - compactionOptions . remove ( COMPACTION _ STRATEGY _ CLASS _ KEY ) ; 
 - 
 - CFMetaData . validateCompactionOptions ( compactionStrategyClass , compactionOptions ) ; 
 - } 
 - 
 - Map < String , String > compressionOptions = getCompressionOptions ( ) ; 
 - if ( ! compressionOptions . isEmpty ( ) ) 
 - { 
 - String sstableCompressionClass = compressionOptions . get ( CompressionParameters . SSTABLE _ COMPRESSION ) ; 
 - if ( sstableCompressionClass = = null ) 
 - throw new ConfigurationException ( " Missing sub - option ' " + CompressionParameters . SSTABLE _ COMPRESSION + " ' for the ' " + KW _ COMPRESSION + " ' option . " ) ; 
 - 
 - Integer chunkLength = CompressionParameters . DEFAULT _ CHUNK _ LENGTH ; 
 - if ( compressionOptions . containsKey ( CompressionParameters . CHUNK _ LENGTH _ KB ) ) 
 - chunkLength = CompressionParameters . parseChunkLength ( compressionOptions . get ( CompressionParameters . CHUNK _ LENGTH _ KB ) ) ; 
 - 
 - Map < String , String > remainingOptions = new HashMap < > ( compressionOptions ) ; 
 - remainingOptions . remove ( CompressionParameters . SSTABLE _ COMPRESSION ) ; 
 - remainingOptions . remove ( CompressionParameters . CHUNK _ LENGTH _ KB ) ; 
 - CompressionParameters cp = new CompressionParameters ( sstableCompressionClass , chunkLength , remainingOptions ) ; 
 - cp . validate ( ) ; 
 - } 
 - 
 - validateMinimumInt ( KW _ DEFAULT _ TIME _ TO _ LIVE , 0 , CFMetaData . DEFAULT _ DEFAULT _ TIME _ TO _ LIVE ) ; 
 - validateMinimumInt ( KW _ INDEX _ INTERVAL , 1 , CFMetaData . DEFAULT _ INDEX _ INTERVAL ) ; 
 - 
 - SpeculativeRetry . fromString ( getString ( KW _ SPECULATIVE _ RETRY , SpeculativeRetry . RetryType . NONE . name ( ) ) ) ; 
 - } 
 - 
 - public Class < ? extends AbstractCompactionStrategy > getCompactionStrategy ( ) 
 - { 
 - return compactionStrategyClass ; 
 - } 
 - 
 - public Map < String , String > getCompactionOptions ( ) throws SyntaxException 
 - { 
 - Map < String , String > compactionOptions = getMap ( KW _ COMPACTION ) ; 
 - if ( compactionOptions = = null ) 
 - return new HashMap < > ( ) ; 
 - return compactionOptions ; 
 - } 
 - 
 - public Map < String , String > getCompressionOptions ( ) throws SyntaxException 
 - { 
 - Map < String , String > compressionOptions = getMap ( KW _ COMPRESSION ) ; 
 - if ( compressionOptions = = null ) 
 - return new HashMap < > ( ) ; 
 - return compressionOptions ; 
 - } 
 - 
 - public void applyToCFMetadata ( CFMetaData cfm ) throws ConfigurationException , SyntaxException 
 - { 
 - if ( hasProperty ( KW _ COMMENT ) ) 
 - cfm . comment ( getString ( KW _ COMMENT , " " ) ) ; 
 - 
 - cfm . readRepairChance ( getDouble ( KW _ READREPAIRCHANCE , cfm . getReadRepairChance ( ) ) ) ; 
 - cfm . dcLocalReadRepairChance ( getDouble ( KW _ DCLOCALREADREPAIRCHANCE , cfm . getDcLocalReadRepair ( ) ) ) ; 
 - cfm . gcGraceSeconds ( getInt ( KW _ GCGRACESECONDS , cfm . getGcGraceSeconds ( ) ) ) ; 
 - cfm . replicateOnWrite ( getBoolean ( KW _ REPLICATEONWRITE , cfm . getReplicateOnWrite ( ) ) ) ; 
 - int minCompactionThreshold = toInt ( KW _ MINCOMPACTIONTHRESHOLD , getCompactionOptions ( ) . get ( KW _ MINCOMPACTIONTHRESHOLD ) , cfm . getMinCompactionThreshold ( ) ) ; 
 - int maxCompactionThreshold = toInt ( KW _ MAXCOMPACTIONTHRESHOLD , getCompactionOptions ( ) . get ( KW _ MAXCOMPACTIONTHRESHOLD ) , cfm . getMaxCompactionThreshold ( ) ) ; 
 - if ( minCompactionThreshold < = 0 | | maxCompactionThreshold < = 0 ) 
 - throw new ConfigurationException ( " Disabling compaction by setting compaction thresholds to 0 has been deprecated , set the compaction option ' enabled ' to false instead . " ) ; 
 - cfm . minCompactionThreshold ( minCompactionThreshold ) ; 
 - cfm . maxCompactionThreshold ( maxCompactionThreshold ) ; 
 - cfm . caching ( CFMetaData . Caching . fromString ( getString ( KW _ CACHING , cfm . getCaching ( ) . toString ( ) ) ) ) ; 
 - cfm . defaultTimeToLive ( getInt ( KW _ DEFAULT _ TIME _ TO _ LIVE , cfm . getDefaultTimeToLive ( ) ) ) ; 
 - cfm . speculativeRetry ( CFMetaData . SpeculativeRetry . fromString ( getString ( KW _ SPECULATIVE _ RETRY , cfm . getSpeculativeRetry ( ) . toString ( ) ) ) ) ; 
 - cfm . memtableFlushPeriod ( getInt ( KW _ MEMTABLE _ FLUSH _ PERIOD , cfm . getMemtableFlushPeriod ( ) ) ) ; 
 - cfm . populateIoCacheOnFlush ( getBoolean ( KW _ POPULATE _ IO _ CACHE _ ON _ FLUSH , cfm . populateIoCacheOnFlush ( ) ) ) ; 
 - cfm . indexInterval ( getInt ( KW _ INDEX _ INTERVAL , cfm . getIndexInterval ( ) ) ) ; 
 - 
 - if ( compactionStrategyClass ! = null ) 
 - { 
 - cfm . compactionStrategyClass ( compactionStrategyClass ) ; 
 - cfm . compactionStrategyOptions ( new HashMap < > ( getCompactionOptions ( ) ) ) ; 
 - } 
 - 
 - cfm . bloomFilterFpChance ( getDouble ( KW _ BF _ FP _ CHANCE , cfm . getBloomFilterFpChance ( ) ) ) ; 
 - 
 - if ( ! getCompressionOptions ( ) . isEmpty ( ) ) 
 - cfm . compressionParameters ( CompressionParameters . create ( getCompressionOptions ( ) ) ) ; 
 - } 
 - 
 - @ Override 
 - public String toString ( ) 
 - { 
 - return String . format ( " CFPropDefs ( % s ) " , properties . toString ( ) ) ; 
 - } 
 - 
 - private void validateMinimumInt ( String field , int minimumValue , int defaultValue ) throws SyntaxException , ConfigurationException 
 - { 
 - Integer val = getInt ( field , null ) ; 
 - if ( val ! = null & & val < minimumValue ) 
 - throw new ConfigurationException ( String . format ( " % s cannot be smaller than % s , ( default % s ) " , 
 - field , minimumValue , defaultValue ) ) ; 
 - 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / KSPropDefs . java b / src / java / org / apache / cassandra / cql3 / KSPropDefs . java 
 deleted file mode 100644 
 index 12fbc51 . . 0000000 
 - - - a / src / java / org / apache / cassandra / cql3 / KSPropDefs . java 
 + + + / dev / null 
 @ @ - 1 , 89 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . cql3 ; 
 - 
 - import java . util . * ; 
 - 
 - import org . apache . cassandra . config . KSMetaData ; 
 - import org . apache . cassandra . exceptions . * ; 
 - 
 - public class KSPropDefs extends PropertyDefinitions 
 - { 
 - public static final String KW _ DURABLE _ WRITES = " durable _ writes " ; 
 - public static final String KW _ REPLICATION = " replication " ; 
 - 
 - public static final String REPLICATION _ STRATEGY _ CLASS _ KEY = " class " ; 
 - 
 - public static final Set < String > keywords = new HashSet < > ( ) ; 
 - public static final Set < String > obsoleteKeywords = new HashSet < > ( ) ; 
 - 
 - static 
 - { 
 - keywords . add ( KW _ DURABLE _ WRITES ) ; 
 - keywords . add ( KW _ REPLICATION ) ; 
 - } 
 - 
 - private String strategyClass ; 
 - 
 - public void validate ( ) throws SyntaxException 
 - { 
 - / / Skip validation if the strategy class is already set as it means we ' ve alreayd 
 - / / prepared ( and redoing it would set strategyClass back to null , which we don ' t want ) 
 - if ( strategyClass ! = null ) 
 - return ; 
 - 
 - validate ( keywords , obsoleteKeywords ) ; 
 - 
 - Map < String , String > replicationOptions = getReplicationOptions ( ) ; 
 - if ( ! replicationOptions . isEmpty ( ) ) 
 - { 
 - strategyClass = replicationOptions . get ( REPLICATION _ STRATEGY _ CLASS _ KEY ) ; 
 - replicationOptions . remove ( REPLICATION _ STRATEGY _ CLASS _ KEY ) ; 
 - } 
 - } 
 - 
 - public Map < String , String > getReplicationOptions ( ) throws SyntaxException 
 - { 
 - Map < String , String > replicationOptions = getMap ( KW _ REPLICATION ) ; 
 - if ( replicationOptions = = null ) 
 - return Collections . emptyMap ( ) ; 
 - return replicationOptions ; 
 - } 
 - 
 - public String getReplicationStrategyClass ( ) 
 - { 
 - return strategyClass ; 
 - } 
 - 
 - public KSMetaData asKSMetadata ( String ksName ) throws RequestValidationException 
 - { 
 - return KSMetaData . newKeyspace ( ksName , getReplicationStrategyClass ( ) , getReplicationOptions ( ) , getBoolean ( KW _ DURABLE _ WRITES , true ) ) ; 
 - } 
 - 
 - public KSMetaData asKSMetadataUpdate ( KSMetaData old ) throws RequestValidationException 
 - { 
 - String sClass = strategyClass ; 
 - Map < String , String > sOptions = getReplicationOptions ( ) ; 
 - if ( sClass = = null ) 
 - { 
 - sClass = old . strategyClass . getName ( ) ; 
 - sOptions = old . strategyOptions ; 
 - } 
 - return KSMetaData . newKeyspace ( old . name , sClass , sOptions , getBoolean ( KW _ DURABLE _ WRITES , old . durableWrites ) ) ; 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / PropertyDefinitions . java b / src / java / org / apache / cassandra / cql3 / PropertyDefinitions . java 
 deleted file mode 100644 
 index b48d27a . . 0000000 
 - - - a / src / java / org / apache / cassandra / cql3 / PropertyDefinitions . java 
 + + + / dev / null 
 @ @ - 1 , 143 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . cql3 ; 
 - 
 - import java . util . * ; 
 - 
 - import org . slf4j . Logger ; 
 - import org . slf4j . LoggerFactory ; 
 - 
 - import org . apache . cassandra . exceptions . SyntaxException ; 
 - 
 - public class PropertyDefinitions 
 - { 
 - protected static final Logger logger = LoggerFactory . getLogger ( PropertyDefinitions . class ) ; 
 - 
 - protected final Map < String , Object > properties = new HashMap < String , Object > ( ) ; 
 - 
 - public void addProperty ( String name , String value ) throws SyntaxException 
 - { 
 - if ( properties . put ( name , value ) ! = null ) 
 - throw new SyntaxException ( String . format ( " Multiple definition for property ' % s ' " , name ) ) ; 
 - } 
 - 
 - public void addProperty ( String name , Map < String , String > value ) throws SyntaxException 
 - { 
 - if ( properties . put ( name , value ) ! = null ) 
 - throw new SyntaxException ( String . format ( " Multiple definition for property ' % s ' " , name ) ) ; 
 - } 
 - 
 - public void validate ( Set < String > keywords , Set < String > obsolete ) throws SyntaxException 
 - { 
 - for ( String name : properties . keySet ( ) ) 
 - { 
 - if ( keywords . contains ( name ) ) 
 - continue ; 
 - 
 - if ( obsolete . contains ( name ) ) 
 - logger . warn ( " Ignoring obsolete property { } " , name ) ; 
 - else 
 - throw new SyntaxException ( String . format ( " Unknown property ' % s ' " , name ) ) ; 
 - } 
 - } 
 - 
 - protected String getSimple ( String name ) throws SyntaxException 
 - { 
 - Object val = properties . get ( name ) ; 
 - if ( val = = null ) 
 - return null ; 
 - if ( ! ( val instanceof String ) ) 
 - throw new SyntaxException ( String . format ( " Invalid value for property ' % s ' . It should be a string " , name ) ) ; 
 - return ( String ) val ; 
 - } 
 - 
 - protected Map < String , String > getMap ( String name ) throws SyntaxException 
 - { 
 - Object val = properties . get ( name ) ; 
 - if ( val = = null ) 
 - return null ; 
 - if ( ! ( val instanceof Map ) ) 
 - throw new SyntaxException ( String . format ( " Invalid value for property ' % s ' . It should be a map . " , name ) ) ; 
 - return ( Map < String , String > ) val ; 
 - } 
 - 
 - public Boolean hasProperty ( String name ) 
 - { 
 - return properties . containsKey ( name ) ; 
 - } 
 - 
 - public String getString ( String key , String defaultValue ) throws SyntaxException 
 - { 
 - String value = getSimple ( key ) ; 
 - return value ! = null ? value : defaultValue ; 
 - } 
 - 
 - / / Return a property value , typed as a Boolean 
 - public Boolean getBoolean ( String key , Boolean defaultValue ) throws SyntaxException 
 - { 
 - String value = getSimple ( key ) ; 
 - return ( value = = null ) ? defaultValue : value . toLowerCase ( ) . matches ( " ( 1 | true | yes ) " ) ; 
 - } 
 - 
 - / / Return a property value , typed as a Double 
 - public Double getDouble ( String key , Double defaultValue ) throws SyntaxException 
 - { 
 - String value = getSimple ( key ) ; 
 - if ( value = = null ) 
 - { 
 - return defaultValue ; 
 - } 
 - else 
 - { 
 - try 
 - { 
 - return Double . valueOf ( value ) ; 
 - } 
 - catch ( NumberFormatException e ) 
 - { 
 - throw new SyntaxException ( String . format ( " Invalid double value % s for ' % s ' " , value , key ) ) ; 
 - } 
 - } 
 - } 
 - 
 - / / Return a property value , typed as an Integer 
 - public Integer getInt ( String key , Integer defaultValue ) throws SyntaxException 
 - { 
 - String value = getSimple ( key ) ; 
 - return toInt ( key , value , defaultValue ) ; 
 - } 
 - 
 - public static Integer toInt ( String key , String value , Integer defaultValue ) throws SyntaxException 
 - { 
 - if ( value = = null ) 
 - { 
 - return defaultValue ; 
 - } 
 - else 
 - { 
 - try 
 - { 
 - return Integer . valueOf ( value ) ; 
 - } 
 - catch ( NumberFormatException e ) 
 - { 
 - throw new SyntaxException ( String . format ( " Invalid integer value % s for ' % s ' " , value , key ) ) ; 
 - } 
 - } 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java 
 index d05fe26 . . 39d1cde 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java 
 @ @ - 21 , 7 + 21 , 6 @ @ import org . apache . cassandra . auth . Permission ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . KSMetaData ; 
 import org . apache . cassandra . config . Schema ; 
 - import org . apache . cassandra . cql3 . KSPropDefs ; 
 import org . apache . cassandra . db . Keyspace ; 
 import org . apache . cassandra . exceptions . * ; 
 import org . apache . cassandra . locator . AbstractReplicationStrategy ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CFPropDefs . java b / src / java / org / apache / cassandra / cql3 / statements / CFPropDefs . java 
 new file mode 100644 
 index 0000000 . . 6ce6406 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CFPropDefs . java 
 @ @ - 0 , 0 + 1 , 189 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . cql3 . statements ; 
 + 
 + import java . util . * ; 
 + 
 + import org . apache . cassandra . config . CFMetaData ; 
 + import org . apache . cassandra . config . CFMetaData . SpeculativeRetry ; 
 + import org . apache . cassandra . db . compaction . AbstractCompactionStrategy ; 
 + import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . exceptions . SyntaxException ; 
 + import org . apache . cassandra . io . compress . CompressionParameters ; 
 + 
 + public class CFPropDefs extends PropertyDefinitions 
 + { 
 + public static final String KW _ COMMENT = " comment " ; 
 + public static final String KW _ READREPAIRCHANCE = " read _ repair _ chance " ; 
 + public static final String KW _ DCLOCALREADREPAIRCHANCE = " dclocal _ read _ repair _ chance " ; 
 + public static final String KW _ GCGRACESECONDS = " gc _ grace _ seconds " ; 
 + public static final String KW _ MINCOMPACTIONTHRESHOLD = " min _ threshold " ; 
 + public static final String KW _ MAXCOMPACTIONTHRESHOLD = " max _ threshold " ; 
 + public static final String KW _ REPLICATEONWRITE = " replicate _ on _ write " ; 
 + public static final String KW _ CACHING = " caching " ; 
 + public static final String KW _ DEFAULT _ TIME _ TO _ LIVE = " default _ time _ to _ live " ; 
 + public static final String KW _ INDEX _ INTERVAL = " index _ interval " ; 
 + public static final String KW _ SPECULATIVE _ RETRY = " speculative _ retry " ; 
 + public static final String KW _ POPULATE _ IO _ CACHE _ ON _ FLUSH = " populate _ io _ cache _ on _ flush " ; 
 + public static final String KW _ BF _ FP _ CHANCE = " bloom _ filter _ fp _ chance " ; 
 + public static final String KW _ MEMTABLE _ FLUSH _ PERIOD = " memtable _ flush _ period _ in _ ms " ; 
 + 
 + public static final String KW _ COMPACTION = " compaction " ; 
 + public static final String KW _ COMPRESSION = " compression " ; 
 + 
 + public static final String COMPACTION _ STRATEGY _ CLASS _ KEY = " class " ; 
 + 
 + public static final Set < String > keywords = new HashSet < > ( ) ; 
 + public static final Set < String > obsoleteKeywords = new HashSet < > ( ) ; 
 + 
 + static 
 + { 
 + keywords . add ( KW _ COMMENT ) ; 
 + keywords . add ( KW _ READREPAIRCHANCE ) ; 
 + keywords . add ( KW _ DCLOCALREADREPAIRCHANCE ) ; 
 + keywords . add ( KW _ GCGRACESECONDS ) ; 
 + keywords . add ( KW _ REPLICATEONWRITE ) ; 
 + keywords . add ( KW _ CACHING ) ; 
 + keywords . add ( KW _ DEFAULT _ TIME _ TO _ LIVE ) ; 
 + keywords . add ( KW _ INDEX _ INTERVAL ) ; 
 + keywords . add ( KW _ SPECULATIVE _ RETRY ) ; 
 + keywords . add ( KW _ POPULATE _ IO _ CACHE _ ON _ FLUSH ) ; 
 + keywords . add ( KW _ BF _ FP _ CHANCE ) ; 
 + keywords . add ( KW _ COMPACTION ) ; 
 + keywords . add ( KW _ COMPRESSION ) ; 
 + keywords . add ( KW _ MEMTABLE _ FLUSH _ PERIOD ) ; 
 + } 
 + 
 + private Class < ? extends AbstractCompactionStrategy > compactionStrategyClass = null ; 
 + 
 + public void validate ( ) throws ConfigurationException , SyntaxException 
 + { 
 + / / Skip validation if the comapction strategy class is already set as it means we ' ve alreayd 
 + / / prepared ( and redoing it would set strategyClass back to null , which we don ' t want ) 
 + if ( compactionStrategyClass ! = null ) 
 + return ; 
 + 
 + validate ( keywords , obsoleteKeywords ) ; 
 + 
 + Map < String , String > compactionOptions = getCompactionOptions ( ) ; 
 + if ( ! compactionOptions . isEmpty ( ) ) 
 + { 
 + String strategy = compactionOptions . get ( COMPACTION _ STRATEGY _ CLASS _ KEY ) ; 
 + if ( strategy = = null ) 
 + throw new ConfigurationException ( " Missing sub - option ' " + COMPACTION _ STRATEGY _ CLASS _ KEY + " ' for the ' " + KW _ COMPACTION + " ' option . " ) ; 
 + 
 + compactionStrategyClass = CFMetaData . createCompactionStrategy ( strategy ) ; 
 + compactionOptions . remove ( COMPACTION _ STRATEGY _ CLASS _ KEY ) ; 
 + 
 + CFMetaData . validateCompactionOptions ( compactionStrategyClass , compactionOptions ) ; 
 + } 
 + 
 + Map < String , String > compressionOptions = getCompressionOptions ( ) ; 
 + if ( ! compressionOptions . isEmpty ( ) ) 
 + { 
 + String sstableCompressionClass = compressionOptions . get ( CompressionParameters . SSTABLE _ COMPRESSION ) ; 
 + if ( sstableCompressionClass = = null ) 
 + throw new ConfigurationException ( " Missing sub - option ' " + CompressionParameters . SSTABLE _ COMPRESSION + " ' for the ' " + KW _ COMPRESSION + " ' option . " ) ; 
 + 
 + Integer chunkLength = CompressionParameters . DEFAULT _ CHUNK _ LENGTH ; 
 + if ( compressionOptions . containsKey ( CompressionParameters . CHUNK _ LENGTH _ KB ) ) 
 + chunkLength = CompressionParameters . parseChunkLength ( compressionOptions . get ( CompressionParameters . CHUNK _ LENGTH _ KB ) ) ; 
 + 
 + Map < String , String > remainingOptions = new HashMap < > ( compressionOptions ) ; 
 + remainingOptions . remove ( CompressionParameters . SSTABLE _ COMPRESSION ) ; 
 + remainingOptions . remove ( CompressionParameters . CHUNK _ LENGTH _ KB ) ; 
 + CompressionParameters cp = new CompressionParameters ( sstableCompressionClass , chunkLength , remainingOptions ) ; 
 + cp . validate ( ) ; 
 + } 
 + 
 + validateMinimumInt ( KW _ DEFAULT _ TIME _ TO _ LIVE , 0 , CFMetaData . DEFAULT _ DEFAULT _ TIME _ TO _ LIVE ) ; 
 + validateMinimumInt ( KW _ INDEX _ INTERVAL , 1 , CFMetaData . DEFAULT _ INDEX _ INTERVAL ) ; 
 + 
 + SpeculativeRetry . fromString ( getString ( KW _ SPECULATIVE _ RETRY , SpeculativeRetry . RetryType . NONE . name ( ) ) ) ; 
 + } 
 + 
 + public Class < ? extends AbstractCompactionStrategy > getCompactionStrategy ( ) 
 + { 
 + return compactionStrategyClass ; 
 + } 
 + 
 + public Map < String , String > getCompactionOptions ( ) throws SyntaxException 
 + { 
 + Map < String , String > compactionOptions = getMap ( KW _ COMPACTION ) ; 
 + if ( compactionOptions = = null ) 
 + return new HashMap < > ( ) ; 
 + return compactionOptions ; 
 + } 
 + 
 + public Map < String , String > getCompressionOptions ( ) throws SyntaxException 
 + { 
 + Map < String , String > compressionOptions = getMap ( KW _ COMPRESSION ) ; 
 + if ( compressionOptions = = null ) 
 + return new HashMap < > ( ) ; 
 + return compressionOptions ; 
 + } 
 + 
 + public void applyToCFMetadata ( CFMetaData cfm ) throws ConfigurationException , SyntaxException 
 + { 
 + if ( hasProperty ( KW _ COMMENT ) ) 
 + cfm . comment ( getString ( KW _ COMMENT , " " ) ) ; 
 + 
 + cfm . readRepairChance ( getDouble ( KW _ READREPAIRCHANCE , cfm . getReadRepairChance ( ) ) ) ; 
 + cfm . dcLocalReadRepairChance ( getDouble ( KW _ DCLOCALREADREPAIRCHANCE , cfm . getDcLocalReadRepair ( ) ) ) ; 
 + cfm . gcGraceSeconds ( getInt ( KW _ GCGRACESECONDS , cfm . getGcGraceSeconds ( ) ) ) ; 
 + cfm . replicateOnWrite ( getBoolean ( KW _ REPLICATEONWRITE , cfm . getReplicateOnWrite ( ) ) ) ; 
 + int minCompactionThreshold = toInt ( KW _ MINCOMPACTIONTHRESHOLD , getCompactionOptions ( ) . get ( KW _ MINCOMPACTIONTHRESHOLD ) , cfm . getMinCompactionThreshold ( ) ) ; 
 + int maxCompactionThreshold = toInt ( KW _ MAXCOMPACTIONTHRESHOLD , getCompactionOptions ( ) . get ( KW _ MAXCOMPACTIONTHRESHOLD ) , cfm . getMaxCompactionThreshold ( ) ) ; 
 + if ( minCompactionThreshold < = 0 | | maxCompactionThreshold < = 0 ) 
 + throw new ConfigurationException ( " Disabling compaction by setting compaction thresholds to 0 has been deprecated , set the compaction option ' enabled ' to false instead . " ) ; 
 + cfm . minCompactionThreshold ( minCompactionThreshold ) ; 
 + cfm . maxCompactionThreshold ( maxCompactionThreshold ) ; 
 + cfm . caching ( CFMetaData . Caching . fromString ( getString ( KW _ CACHING , cfm . getCaching ( ) . toString ( ) ) ) ) ; 
 + cfm . defaultTimeToLive ( getInt ( KW _ DEFAULT _ TIME _ TO _ LIVE , cfm . getDefaultTimeToLive ( ) ) ) ; 
 + cfm . speculativeRetry ( CFMetaData . SpeculativeRetry . fromString ( getString ( KW _ SPECULATIVE _ RETRY , cfm . getSpeculativeRetry ( ) . toString ( ) ) ) ) ; 
 + cfm . memtableFlushPeriod ( getInt ( KW _ MEMTABLE _ FLUSH _ PERIOD , cfm . getMemtableFlushPeriod ( ) ) ) ; 
 + cfm . populateIoCacheOnFlush ( getBoolean ( KW _ POPULATE _ IO _ CACHE _ ON _ FLUSH , cfm . populateIoCacheOnFlush ( ) ) ) ; 
 + cfm . indexInterval ( getInt ( KW _ INDEX _ INTERVAL , cfm . getIndexInterval ( ) ) ) ; 
 + 
 + if ( compactionStrategyClass ! = null ) 
 + { 
 + cfm . compactionStrategyClass ( compactionStrategyClass ) ; 
 + cfm . compactionStrategyOptions ( new HashMap < > ( getCompactionOptions ( ) ) ) ; 
 + } 
 + 
 + cfm . bloomFilterFpChance ( getDouble ( KW _ BF _ FP _ CHANCE , cfm . getBloomFilterFpChance ( ) ) ) ; 
 + 
 + if ( ! getCompressionOptions ( ) . isEmpty ( ) ) 
 + cfm . compressionParameters ( CompressionParameters . create ( getCompressionOptions ( ) ) ) ; 
 + } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return String . format ( " CFPropDefs ( % s ) " , properties . toString ( ) ) ; 
 + } 
 + 
 + private void validateMinimumInt ( String field , int minimumValue , int defaultValue ) throws SyntaxException , ConfigurationException 
 + { 
 + Integer val = getInt ( field , null ) ; 
 + if ( val ! = null & & val < minimumValue ) 
 + throw new ConfigurationException ( String . format ( " % s cannot be smaller than % s , ( default % s ) " , 
 + field , minimumValue , defaultValue ) ) ; 
 + 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java 
 index 8245453 . . 2ed1d91 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java 
 @ @ - 21 , 7 + 21 , 6 @ @ import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . auth . Permission ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . Schema ; 
 - import org . apache . cassandra . cql3 . KSPropDefs ; 
 import org . apache . cassandra . exceptions . AlreadyExistsException ; 
 import org . apache . cassandra . exceptions . InvalidRequestException ; 
 import org . apache . cassandra . exceptions . RequestValidationException ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / KSPropDefs . java b / src / java / org / apache / cassandra / cql3 / statements / KSPropDefs . java 
 new file mode 100644 
 index 0000000 . . 7c05435 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / KSPropDefs . java 
 @ @ - 0 , 0 + 1 , 89 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . cql3 . statements ; 
 + 
 + import java . util . * ; 
 + 
 + import org . apache . cassandra . config . KSMetaData ; 
 + import org . apache . cassandra . exceptions . * ; 
 + 
 + public class KSPropDefs extends PropertyDefinitions 
 + { 
 + public static final String KW _ DURABLE _ WRITES = " durable _ writes " ; 
 + public static final String KW _ REPLICATION = " replication " ; 
 + 
 + public static final String REPLICATION _ STRATEGY _ CLASS _ KEY = " class " ; 
 + 
 + public static final Set < String > keywords = new HashSet < > ( ) ; 
 + public static final Set < String > obsoleteKeywords = new HashSet < > ( ) ; 
 + 
 + static 
 + { 
 + keywords . add ( KW _ DURABLE _ WRITES ) ; 
 + keywords . add ( KW _ REPLICATION ) ; 
 + } 
 + 
 + private String strategyClass ; 
 + 
 + public void validate ( ) throws SyntaxException 
 + { 
 + / / Skip validation if the strategy class is already set as it means we ' ve alreayd 
 + / / prepared ( and redoing it would set strategyClass back to null , which we don ' t want ) 
 + if ( strategyClass ! = null ) 
 + return ; 
 + 
 + validate ( keywords , obsoleteKeywords ) ; 
 + 
 + Map < String , String > replicationOptions = getReplicationOptions ( ) ; 
 + if ( ! replicationOptions . isEmpty ( ) ) 
 + { 
 + strategyClass = replicationOptions . get ( REPLICATION _ STRATEGY _ CLASS _ KEY ) ; 
 + replicationOptions . remove ( REPLICATION _ STRATEGY _ CLASS _ KEY ) ; 
 + } 
 + } 
 + 
 + public Map < String , String > getReplicationOptions ( ) throws SyntaxException 
 + { 
 + Map < String , String > replicationOptions = getMap ( KW _ REPLICATION ) ; 
 + if ( replicationOptions = = null ) 
 + return Collections . emptyMap ( ) ; 
 + return replicationOptions ; 
 + } 
 + 
 + public String getReplicationStrategyClass ( ) 
 + { 
 + return strategyClass ; 
 + } 
 + 
 + public KSMetaData asKSMetadata ( String ksName ) throws RequestValidationException 
 + { 
 + return KSMetaData . newKeyspace ( ksName , getReplicationStrategyClass ( ) , getReplicationOptions ( ) , getBoolean ( KW _ DURABLE _ WRITES , true ) ) ; 
 + } 
 + 
 + public KSMetaData asKSMetadataUpdate ( KSMetaData old ) throws RequestValidationException 
 + { 
 + String sClass = strategyClass ; 
 + Map < String , String > sOptions = getReplicationOptions ( ) ; 
 + if ( sClass = = null ) 
 + { 
 + sClass = old . strategyClass . getName ( ) ; 
 + sOptions = old . strategyOptions ; 
 + } 
 + return KSMetaData . newKeyspace ( old . name , sClass , sOptions , getBoolean ( KW _ DURABLE _ WRITES , old . durableWrites ) ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / PropertyDefinitions . java b / src / java / org / apache / cassandra / cql3 / statements / PropertyDefinitions . java 
 new file mode 100644 
 index 0000000 . . eb4f074 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / PropertyDefinitions . java 
 @ @ - 0 , 0 + 1 , 143 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . cql3 . statements ; 
 + 
 + import java . util . * ; 
 + 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + import org . apache . cassandra . exceptions . SyntaxException ; 
 + 
 + public class PropertyDefinitions 
 + { 
 + protected static final Logger logger = LoggerFactory . getLogger ( PropertyDefinitions . class ) ; 
 + 
 + protected final Map < String , Object > properties = new HashMap < String , Object > ( ) ; 
 + 
 + public void addProperty ( String name , String value ) throws SyntaxException 
 + { 
 + if ( properties . put ( name , value ) ! = null ) 
 + throw new SyntaxException ( String . format ( " Multiple definition for property ' % s ' " , name ) ) ; 
 + } 
 + 
 + public void addProperty ( String name , Map < String , String > value ) throws SyntaxException 
 + { 
 + if ( properties . put ( name , value ) ! = null ) 
 + throw new SyntaxException ( String . format ( " Multiple definition for property ' % s ' " , name ) ) ; 
 + } 
 + 
 + public void validate ( Set < String > keywords , Set < String > obsolete ) throws SyntaxException 
 + { 
 + for ( String name : properties . keySet ( ) ) 
 + { 
 + if ( keywords . contains ( name ) ) 
 + continue ; 
 + 
 + if ( obsolete . contains ( name ) ) 
 + logger . warn ( " Ignoring obsolete property { } " , name ) ; 
 + else 
 + throw new SyntaxException ( String . format ( " Unknown property ' % s ' " , name ) ) ; 
 + } 
 + } 
 + 
 + protected String getSimple ( String name ) throws SyntaxException 
 + { 
 + Object val = properties . get ( name ) ; 
 + if ( val = = null ) 
 + return null ; 
 + if ( ! ( val instanceof String ) ) 
 + throw new SyntaxException ( String . format ( " Invalid value for property ' % s ' . It should be a string " , name ) ) ; 
 + return ( String ) val ; 
 + } 
 + 
 + protected Map < String , String > getMap ( String name ) throws SyntaxException 
 + { 
 + Object val = properties . get ( name ) ; 
 + if ( val = = null ) 
 + return null ; 
 + if ( ! ( val instanceof Map ) ) 
 + throw new SyntaxException ( String . format ( " Invalid value for property ' % s ' . It should be a map . " , name ) ) ; 
 + return ( Map < String , String > ) val ; 
 + } 
 + 
 + public Boolean hasProperty ( String name ) 
 + { 
 + return properties . containsKey ( name ) ; 
 + } 
 + 
 + public String getString ( String key , String defaultValue ) throws SyntaxException 
 + { 
 + String value = getSimple ( key ) ; 
 + return value ! = null ? value : defaultValue ; 
 + } 
 + 
 + / / Return a property value , typed as a Boolean 
 + public Boolean getBoolean ( String key , Boolean defaultValue ) throws SyntaxException 
 + { 
 + String value = getSimple ( key ) ; 
 + return ( value = = null ) ? defaultValue : value . toLowerCase ( ) . matches ( " ( 1 | true | yes ) " ) ; 
 + } 
 + 
 + / / Return a property value , typed as a Double 
 + public Double getDouble ( String key , Double defaultValue ) throws SyntaxException 
 + { 
 + String value = getSimple ( key ) ; 
 + if ( value = = null ) 
 + { 
 + return defaultValue ; 
 + } 
 + else 
 + { 
 + try 
 + { 
 + return Double . valueOf ( value ) ; 
 + } 
 + catch ( NumberFormatException e ) 
 + { 
 + throw new SyntaxException ( String . format ( " Invalid double value % s for ' % s ' " , value , key ) ) ; 
 + } 
 + } 
 + } 
 + 
 + / / Return a property value , typed as an Integer 
 + public Integer getInt ( String key , Integer defaultValue ) throws SyntaxException 
 + { 
 + String value = getSimple ( key ) ; 
 + return toInt ( key , value , defaultValue ) ; 
 + } 
 + 
 + public static Integer toInt ( String key , String value , Integer defaultValue ) throws SyntaxException 
 + { 
 + if ( value = = null ) 
 + { 
 + return defaultValue ; 
 + } 
 + else 
 + { 
 + try 
 + { 
 + return Integer . valueOf ( value ) ; 
 + } 
 + catch ( NumberFormatException e ) 
 + { 
 + throw new SyntaxException ( String . format ( " Invalid integer value % s for ' % s ' " , value , key ) ) ; 
 + } 
 + } 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 index 51464ab . . 0f94918 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 @ @ - 26 , 7 + 26 , 7 @ @ import com . google . common . collect . Lists ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import org . apache . cassandra . cql3 . CFPropDefs ; 
 + import org . apache . cassandra . cql3 . statements . CFPropDefs ; 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . io . sstable . SSTableReader ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / service / ConsistencyChecker . java b / src / java / org / apache / cassandra / service / ConsistencyChecker . java 
 index cf6c5d1 . . 983f73f 100644 
 - - - a / src / java / org / apache / cassandra / service / ConsistencyChecker . java 
 + + + b / src / java / org / apache / cassandra / service / ConsistencyChecker . java 
 @ @ - 49 , 7 + 49 , 7 @ @ import org . slf4j . LoggerFactory ; 
 
 class ConsistencyChecker implements Runnable 
 { 
 - private static Logger logger _ = LoggerFactory . getLogger ( ConsistencyManager . class ) ; 
 + private static Logger logger _ = LoggerFactory . getLogger ( ConsistencyChecker . class ) ; 
 private static ExpiringMap < String , String > readRepairTable _ = new ExpiringMap < String , String > ( DatabaseDescriptor . getRpcTimeout ( ) ) ; 
 
 private final String table _ ;
