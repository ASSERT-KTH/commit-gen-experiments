BLEU SCORE: 8.872520916507042E-4

TEST MSG: ninja fix busted test
GENERATED MSG: resolve circular initializer dependency deadlock . patch by Erik Onnen and Gary Dusbabek , reviewed by Jonathan Ellis . CASSANDRA - 1756

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / cql3 / DeleteTest . java b / test / unit / org / apache / cassandra / cql3 / DeleteTest . java <nl> index d2dbc79 . . 7782f12 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / DeleteTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / DeleteTest . java <nl> @ @ - 33 , 7 + 33 , 7 @ @ import org . junit . Test ; <nl> <nl> import java . io . IOException ; <nl> <nl> - public class DeleteTest <nl> + public class DeleteTest extends SchemaLoader <nl> { <nl> private static EmbeddedCassandraService cassandra ; <nl> <nl> @ @ - 51 , 6 + 51 , 8 @ @ public class DeleteTest <nl> @ BeforeClass ( ) <nl> public static void setup ( ) throws ConfigurationException , IOException <nl> { <nl> + Schema . instance . clear ( ) ; <nl> + <nl> cassandra = new EmbeddedCassandraService ( ) ; <nl> cassandra . start ( ) ; <nl>
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e4d8d3f . . 5bcf52c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 41 , 6 + 41 , 7 @ @ dev <nl> * fix sstableimport regression ( CASSANDRA - 1753 ) <nl> * fix for bootstrap when no non - system tables are defined ( CASSANDRA - 1732 ) <nl> * handle replica unavailability in index scan ( CASSANDRA - 1755 ) <nl> + * fix service initialization order deadlock ( CASSANDRA - 1756 ) <nl> <nl> <nl> 0 . 7 . 0 - beta3 <nl> diff - - git a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> index 3c9973b . . db3d15b 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> + + + b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> @ @ - 77 , 7 + 77 , 7 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa <nl> MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> try <nl> { <nl> - mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . db : type = DynamicEndpointSnitch " ) ) ; <nl> + mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . db : type = DynamicEndpointSnitch , instance = " + hashCode ( ) ) ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 178 , 6 + 178 , 8 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa <nl> <nl> private void updateScores ( ) / / this is expensive <nl> { <nl> + if ( ! StorageService . instance . isInitialized ( ) ) <nl> + return ; <nl> if ( ! registered ) <nl> { <nl> 	 ILatencyPublisher handler = ( ILatencyPublisher ) MessagingService . instance . getVerbHandler ( StorageService . Verb . REQUEST _ RESPONSE ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 8c28ad6 . . 296f448 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 196 , 11 + 196 , 11 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> } } ; <nl> <nl> <nl> + public static final RetryingScheduledThreadPoolExecutor scheduledTasks = new RetryingScheduledThreadPoolExecutor ( " ScheduledTasks " ) ; <nl> + <nl> private static IPartitioner partitioner _ = DatabaseDescriptor . getPartitioner ( ) ; <nl> public static VersionedValue . VersionedValueFactory valueFactory = new VersionedValue . VersionedValueFactory ( partitioner _ ) ; <nl> - <nl> - public static RetryingScheduledThreadPoolExecutor scheduledTasks = new RetryingScheduledThreadPoolExecutor ( " ScheduledTasks " ) ; <nl> - <nl> + <nl> public static final StorageService instance = new StorageService ( ) ; <nl> <nl> public static IPartitioner getPartitioner ( ) { <nl> @ @ - 309 , 6 + 309 , 11 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> MessagingService . shutdown ( ) ; <nl> StageManager . shutdownNow ( ) ; <nl> } <nl> + <nl> + public boolean isInitialized ( ) <nl> + { <nl> + return initialized ; <nl> + } <nl> <nl> public synchronized void initClient ( ) throws IOException <nl> { <nl> diff - - git a / test / conf / cassandra . yaml b / test / conf / cassandra . yaml <nl> index b74da12 . . bf5f161 100644 <nl> - - - a / test / conf / cassandra . yaml <nl> + + + b / test / conf / cassandra . yaml <nl> @ @ - 21 , 6 + 21 , 7 @ @ disk _ access _ mode : mmap <nl> seeds : <nl> - 127 . 0 . 0 . 2 <nl> endpoint _ snitch : org . apache . cassandra . locator . SimpleSnitch <nl> + dynamic _ snitch : true <nl> request _ scheduler : org . apache . cassandra . scheduler . RoundRobinScheduler <nl> request _ scheduler _ id : keyspace <nl> keyspaces : <nl> diff - - git a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java <nl> index c7eb982 . . daeacf9 100644 <nl> - - - a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java <nl> + + + b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java <nl> @ @ - 19 , 10 + 19 , 11 @ @ <nl> <nl> package org . apache . cassandra . locator ; <nl> <nl> + import java . io . IOException ; <nl> import java . net . InetAddress ; <nl> - import java . net . UnknownHostException ; <nl> import java . util . ArrayList ; <nl> <nl> + import org . apache . cassandra . service . StorageService ; <nl> import org . junit . Test ; <nl> <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> @ @ - 30 , 8 + 31 , 10 @ @ import org . apache . cassandra . utils . FBUtilities ; <nl> public class DynamicEndpointSnitchTest <nl> { <nl> @ Test <nl> - public void testSnitch ( ) throws UnknownHostException , InterruptedException <nl> + public void testSnitch ( ) throws InterruptedException , IOException <nl> { <nl> + / / do this because SS needs to be initialized before DES can work properly . <nl> + StorageService . instance . initClient ( ) ; <nl> int sleeptime = 150 ; <nl> DynamicEndpointSnitch dsnitch = new DynamicEndpointSnitch ( new SimpleSnitch ( ) ) ; <nl> InetAddress self = FBUtilities . getLocalAddress ( ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / service / InitClientTest . java b / test / unit / org / apache / cassandra / service / InitClientTest . java <nl> new file mode 100644 <nl> index 0000000 . . 025a775 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / service / InitClientTest . java <nl> @ @ - 0 , 0 + 1 , 37 @ @ <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import java . io . IOException ; <nl> + <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + <nl> + public class InitClientTest / / extends CleanupHelper <nl> + { <nl> + @ Test <nl> + public void testInitClientStartup ( ) <nl> + { <nl> + try { <nl> + StorageService . instance . initClient ( ) ; <nl> + } catch ( IOException ex ) { <nl> + throw new AssertionError ( ex . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + }

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / cql3 / DeleteTest . java b / test / unit / org / apache / cassandra / cql3 / DeleteTest . java 
 index d2dbc79 . . 7782f12 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / DeleteTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / DeleteTest . java 
 @ @ - 33 , 7 + 33 , 7 @ @ import org . junit . Test ; 
 
 import java . io . IOException ; 
 
 - public class DeleteTest 
 + public class DeleteTest extends SchemaLoader 
 { 
 private static EmbeddedCassandraService cassandra ; 
 
 @ @ - 51 , 6 + 51 , 8 @ @ public class DeleteTest 
 @ BeforeClass ( ) 
 public static void setup ( ) throws ConfigurationException , IOException 
 { 
 + Schema . instance . clear ( ) ; 
 + 
 cassandra = new EmbeddedCassandraService ( ) ; 
 cassandra . start ( ) ; 


NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e4d8d3f . . 5bcf52c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 41 , 6 + 41 , 7 @ @ dev 
 * fix sstableimport regression ( CASSANDRA - 1753 ) 
 * fix for bootstrap when no non - system tables are defined ( CASSANDRA - 1732 ) 
 * handle replica unavailability in index scan ( CASSANDRA - 1755 ) 
 + * fix service initialization order deadlock ( CASSANDRA - 1756 ) 
 
 
 0 . 7 . 0 - beta3 
 diff - - git a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 index 3c9973b . . db3d15b 100644 
 - - - a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 + + + b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 @ @ - 77 , 7 + 77 , 7 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa 
 MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 try 
 { 
 - mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . db : type = DynamicEndpointSnitch " ) ) ; 
 + mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . db : type = DynamicEndpointSnitch , instance = " + hashCode ( ) ) ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 178 , 6 + 178 , 8 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa 
 
 private void updateScores ( ) / / this is expensive 
 { 
 + if ( ! StorageService . instance . isInitialized ( ) ) 
 + return ; 
 if ( ! registered ) 
 { 
 	 ILatencyPublisher handler = ( ILatencyPublisher ) MessagingService . instance . getVerbHandler ( StorageService . Verb . REQUEST _ RESPONSE ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 8c28ad6 . . 296f448 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 196 , 11 + 196 , 11 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 } } ; 
 
 
 + public static final RetryingScheduledThreadPoolExecutor scheduledTasks = new RetryingScheduledThreadPoolExecutor ( " ScheduledTasks " ) ; 
 + 
 private static IPartitioner partitioner _ = DatabaseDescriptor . getPartitioner ( ) ; 
 public static VersionedValue . VersionedValueFactory valueFactory = new VersionedValue . VersionedValueFactory ( partitioner _ ) ; 
 - 
 - public static RetryingScheduledThreadPoolExecutor scheduledTasks = new RetryingScheduledThreadPoolExecutor ( " ScheduledTasks " ) ; 
 - 
 + 
 public static final StorageService instance = new StorageService ( ) ; 
 
 public static IPartitioner getPartitioner ( ) { 
 @ @ - 309 , 6 + 309 , 11 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 MessagingService . shutdown ( ) ; 
 StageManager . shutdownNow ( ) ; 
 } 
 + 
 + public boolean isInitialized ( ) 
 + { 
 + return initialized ; 
 + } 
 
 public synchronized void initClient ( ) throws IOException 
 { 
 diff - - git a / test / conf / cassandra . yaml b / test / conf / cassandra . yaml 
 index b74da12 . . bf5f161 100644 
 - - - a / test / conf / cassandra . yaml 
 + + + b / test / conf / cassandra . yaml 
 @ @ - 21 , 6 + 21 , 7 @ @ disk _ access _ mode : mmap 
 seeds : 
 - 127 . 0 . 0 . 2 
 endpoint _ snitch : org . apache . cassandra . locator . SimpleSnitch 
 + dynamic _ snitch : true 
 request _ scheduler : org . apache . cassandra . scheduler . RoundRobinScheduler 
 request _ scheduler _ id : keyspace 
 keyspaces : 
 diff - - git a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java 
 index c7eb982 . . daeacf9 100644 
 - - - a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java 
 + + + b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java 
 @ @ - 19 , 10 + 19 , 11 @ @ 
 
 package org . apache . cassandra . locator ; 
 
 + import java . io . IOException ; 
 import java . net . InetAddress ; 
 - import java . net . UnknownHostException ; 
 import java . util . ArrayList ; 
 
 + import org . apache . cassandra . service . StorageService ; 
 import org . junit . Test ; 
 
 import org . apache . cassandra . utils . FBUtilities ; 
 @ @ - 30 , 8 + 31 , 10 @ @ import org . apache . cassandra . utils . FBUtilities ; 
 public class DynamicEndpointSnitchTest 
 { 
 @ Test 
 - public void testSnitch ( ) throws UnknownHostException , InterruptedException 
 + public void testSnitch ( ) throws InterruptedException , IOException 
 { 
 + / / do this because SS needs to be initialized before DES can work properly . 
 + StorageService . instance . initClient ( ) ; 
 int sleeptime = 150 ; 
 DynamicEndpointSnitch dsnitch = new DynamicEndpointSnitch ( new SimpleSnitch ( ) ) ; 
 InetAddress self = FBUtilities . getLocalAddress ( ) ; 
 diff - - git a / test / unit / org / apache / cassandra / service / InitClientTest . java b / test / unit / org / apache / cassandra / service / InitClientTest . java 
 new file mode 100644 
 index 0000000 . . 025a775 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / service / InitClientTest . java 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + package org . apache . cassandra . service ; 
 + 
 + import org . junit . Test ; 
 + 
 + import java . io . IOException ; 
 + 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + 
 + public class InitClientTest / / extends CleanupHelper 
 + { 
 + @ Test 
 + public void testInitClientStartup ( ) 
 + { 
 + try { 
 + StorageService . instance . initClient ( ) ; 
 + } catch ( IOException ex ) { 
 + throw new AssertionError ( ex . getMessage ( ) ) ; 
 + } 
 + } 
 + }
