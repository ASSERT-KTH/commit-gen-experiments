BLEU SCORE: 0.05630400552901077

TEST MSG: Fix typo in v3 native protocol spec
GENERATED MSG: Ninja - fix native proto spec typo ( v2 )

TEST DIFF (one line): diff - - git a / doc / native _ protocol _ v3 . spec b / doc / native _ protocol _ v3 . spec <nl> index c26feeb . . 13b6ac6 100644 <nl> - - - a / doc / native _ protocol _ v3 . spec <nl> + + + b / doc / native _ protocol _ v3 . spec <nl> @ @ - 446 , 7 + 446 , 7 @ @ Table of Contents <nl> Indicates an error processing a request . The body of the message will be an <nl> error code ( [ int ] ) followed by a [ string ] error message . Then , depending on <nl> the exception , more content may follow . The error codes are defined in <nl> - Section 8 , along with their additional content if any . <nl> + Section 9 , along with their additional content if any . <nl> <nl> <nl> 4 . 2 . 2 . READY
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / compaction / ParallelCompactionIterable . java b / src / java / org / apache / cassandra / db / compaction / ParallelCompactionIterable . java <nl> index 1d380f6 . . a8baf7a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / ParallelCompactionIterable . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / ParallelCompactionIterable . java <nl> @ @ - 195 , 7 + 195 , 7 @ @ public class ParallelCompactionIterable extends AbstractCompactionIterable <nl> private class DeserializedColumnIterator implements OnDiskAtomIterator <nl> { <nl> private final Row row ; <nl> - private Iterator < Column > iter ; <nl> + private final Iterator < Column > iter ; <nl> <nl> public DeserializedColumnIterator ( Row row ) <nl> { <nl> @ @ - 236 , 7 + 236 , 6 @ @ public class ParallelCompactionIterable extends AbstractCompactionIterable <nl> { <nl> private final LinkedBlockingQueue < RowContainer > queue = new LinkedBlockingQueue < RowContainer > ( 1 ) ; <nl> private static final RowContainer finished = new RowContainer ( ( Row ) null ) ; <nl> - private Condition condition ; <nl> private final ICompactionScanner scanner ; <nl> <nl> public Deserializer ( ICompactionScanner ssts , final int maxInMemorySize ) <nl> @ @ - 246 , 11 + 245 , 14 @ @ public class ParallelCompactionIterable extends AbstractCompactionIterable <nl> { <nl> protected void runMayThrow ( ) throws Exception <nl> { <nl> + SimpleCondition condition = null ; <nl> while ( true ) <nl> { <nl> if ( condition ! = null ) <nl> + { <nl> condition . await ( ) ; <nl> - <nl> + condition = null ; <nl> + } <nl> if ( ! scanner . hasNext ( ) ) <nl> { <nl> queue . put ( finished ) ; <nl> @ @ - 260 , 13 + 262 , 13 @ @ public class ParallelCompactionIterable extends AbstractCompactionIterable <nl> SSTableIdentityIterator iter = ( SSTableIdentityIterator ) scanner . next ( ) ; <nl> if ( iter . dataSize > maxInMemorySize ) <nl> { <nl> - logger . debug ( " parallel lazy deserialize from " + iter . getPath ( ) ) ; <nl> + logger . debug ( " parallel lazy deserialize from { } " , iter . getPath ( ) ) ; <nl> condition = new SimpleCondition ( ) ; <nl> queue . put ( new RowContainer ( new NotifyingSSTableIdentityIterator ( iter , condition ) ) ) ; <nl> } <nl> else <nl> { <nl> - logger . debug ( " parallel eager deserialize from " + iter . getPath ( ) ) ; <nl> + logger . debug ( " parallel eager deserialize from { } " , iter . getPath ( ) ) ; <nl> queue . put ( new RowContainer ( new Row ( iter . getKey ( ) , iter . getColumnFamilyWithColumns ( ArrayBackedSortedColumns . factory ) ) ) ) ; <nl> } <nl> } <nl> @ @ - 301 , 9 + 303 , 9 @ @ public class ParallelCompactionIterable extends AbstractCompactionIterable <nl> private static class NotifyingSSTableIdentityIterator implements OnDiskAtomIterator <nl> { <nl> private final SSTableIdentityIterator wrapped ; <nl> - private final Condition condition ; <nl> + private final SimpleCondition condition ; <nl> <nl> - public NotifyingSSTableIdentityIterator ( SSTableIdentityIterator wrapped , Condition condition ) <nl> + public NotifyingSSTableIdentityIterator ( SSTableIdentityIterator wrapped , SimpleCondition condition ) <nl> { <nl> this . wrapped = wrapped ; <nl> this . condition = condition ; <nl> @ @ - 321 , 8 + 323 , 14 @ @ public class ParallelCompactionIterable extends AbstractCompactionIterable <nl> <nl> public void close ( ) throws IOException <nl> { <nl> - wrapped . close ( ) ; <nl> - condition . signal ( ) ; <nl> + try <nl> + { <nl> + wrapped . close ( ) ; <nl> + } <nl> + finally <nl> + { <nl> + condition . signalAll ( ) ; <nl> + } <nl> } <nl> <nl> public boolean hasNext ( ) <nl> diff - - git a / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java b / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java <nl> index 7be4c29 . . 1740ee2 100644 <nl> - - - a / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java <nl> + + + b / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java <nl> @ @ - 100 , 7 + 100 , 7 @ @ public abstract class AbstractWriteResponseHandler implements IAsyncCallback <nl> <nl> protected void signal ( ) <nl> { <nl> - condition . signal ( ) ; <nl> + condition . signalAll ( ) ; <nl> if ( callback ! = null ) <nl> callback . run ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / ReadCallback . java b / src / java / org / apache / cassandra / service / ReadCallback . java <nl> index 7cb5a23 . . bd8b025 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ReadCallback . java <nl> + + + b / src / java / org / apache / cassandra / service / ReadCallback . java <nl> @ @ - 117 , 7 + 117 , 7 @ @ public class ReadCallback < TMessage , TResolved > implements IAsyncCallback < TMessag <nl> : received . get ( ) ; <nl> if ( n > = blockfor & & resolver . isDataPresent ( ) ) <nl> { <nl> - condition . signal ( ) ; <nl> + condition . signalAll ( ) ; <nl> maybeResolveForRepair ( ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / TruncateResponseHandler . java b / src / java / org / apache / cassandra / service / TruncateResponseHandler . java <nl> index 3920b91 . . 3bacad8 100644 <nl> - - - a / src / java / org / apache / cassandra / service / TruncateResponseHandler . java <nl> + + + b / src / java / org / apache / cassandra / service / TruncateResponseHandler . java <nl> @ @ - 70 , 7 + 70 , 7 @ @ public class TruncateResponseHandler implements IAsyncCallback <nl> { <nl> responses . incrementAndGet ( ) ; <nl> if ( responses . get ( ) > = responseCount ) <nl> - condition . signal ( ) ; <nl> + condition . signalAll ( ) ; <nl> } <nl> <nl> public boolean isLatencyForSnitch ( ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / SimpleCondition . java b / src / java / org / apache / cassandra / utils / SimpleCondition . java <nl> index 6086f3b . . 4d5f896 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / SimpleCondition . java <nl> + + + b / src / java / org / apache / cassandra / utils / SimpleCondition . java <nl> @ @ - 51 , 10 + 51 , 9 @ @ public class SimpleCondition implements Condition <nl> return set ; <nl> } <nl> <nl> - public synchronized void signal ( ) <nl> + public void signal ( ) <nl> { <nl> - set = true ; <nl> - notify ( ) ; <nl> + throw new UnsupportedOperationException ( ) ; <nl> } <nl> <nl> public synchronized void signalAll ( )

TEST DIFF:
diff - - git a / doc / native _ protocol _ v3 . spec b / doc / native _ protocol _ v3 . spec 
 index c26feeb . . 13b6ac6 100644 
 - - - a / doc / native _ protocol _ v3 . spec 
 + + + b / doc / native _ protocol _ v3 . spec 
 @ @ - 446 , 7 + 446 , 7 @ @ Table of Contents 
 Indicates an error processing a request . The body of the message will be an 
 error code ( [ int ] ) followed by a [ string ] error message . Then , depending on 
 the exception , more content may follow . The error codes are defined in 
 - Section 8 , along with their additional content if any . 
 + Section 9 , along with their additional content if any . 
 
 
 4 . 2 . 2 . READY

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / compaction / ParallelCompactionIterable . java b / src / java / org / apache / cassandra / db / compaction / ParallelCompactionIterable . java 
 index 1d380f6 . . a8baf7a 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / ParallelCompactionIterable . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / ParallelCompactionIterable . java 
 @ @ - 195 , 7 + 195 , 7 @ @ public class ParallelCompactionIterable extends AbstractCompactionIterable 
 private class DeserializedColumnIterator implements OnDiskAtomIterator 
 { 
 private final Row row ; 
 - private Iterator < Column > iter ; 
 + private final Iterator < Column > iter ; 
 
 public DeserializedColumnIterator ( Row row ) 
 { 
 @ @ - 236 , 7 + 236 , 6 @ @ public class ParallelCompactionIterable extends AbstractCompactionIterable 
 { 
 private final LinkedBlockingQueue < RowContainer > queue = new LinkedBlockingQueue < RowContainer > ( 1 ) ; 
 private static final RowContainer finished = new RowContainer ( ( Row ) null ) ; 
 - private Condition condition ; 
 private final ICompactionScanner scanner ; 
 
 public Deserializer ( ICompactionScanner ssts , final int maxInMemorySize ) 
 @ @ - 246 , 11 + 245 , 14 @ @ public class ParallelCompactionIterable extends AbstractCompactionIterable 
 { 
 protected void runMayThrow ( ) throws Exception 
 { 
 + SimpleCondition condition = null ; 
 while ( true ) 
 { 
 if ( condition ! = null ) 
 + { 
 condition . await ( ) ; 
 - 
 + condition = null ; 
 + } 
 if ( ! scanner . hasNext ( ) ) 
 { 
 queue . put ( finished ) ; 
 @ @ - 260 , 13 + 262 , 13 @ @ public class ParallelCompactionIterable extends AbstractCompactionIterable 
 SSTableIdentityIterator iter = ( SSTableIdentityIterator ) scanner . next ( ) ; 
 if ( iter . dataSize > maxInMemorySize ) 
 { 
 - logger . debug ( " parallel lazy deserialize from " + iter . getPath ( ) ) ; 
 + logger . debug ( " parallel lazy deserialize from { } " , iter . getPath ( ) ) ; 
 condition = new SimpleCondition ( ) ; 
 queue . put ( new RowContainer ( new NotifyingSSTableIdentityIterator ( iter , condition ) ) ) ; 
 } 
 else 
 { 
 - logger . debug ( " parallel eager deserialize from " + iter . getPath ( ) ) ; 
 + logger . debug ( " parallel eager deserialize from { } " , iter . getPath ( ) ) ; 
 queue . put ( new RowContainer ( new Row ( iter . getKey ( ) , iter . getColumnFamilyWithColumns ( ArrayBackedSortedColumns . factory ) ) ) ) ; 
 } 
 } 
 @ @ - 301 , 9 + 303 , 9 @ @ public class ParallelCompactionIterable extends AbstractCompactionIterable 
 private static class NotifyingSSTableIdentityIterator implements OnDiskAtomIterator 
 { 
 private final SSTableIdentityIterator wrapped ; 
 - private final Condition condition ; 
 + private final SimpleCondition condition ; 
 
 - public NotifyingSSTableIdentityIterator ( SSTableIdentityIterator wrapped , Condition condition ) 
 + public NotifyingSSTableIdentityIterator ( SSTableIdentityIterator wrapped , SimpleCondition condition ) 
 { 
 this . wrapped = wrapped ; 
 this . condition = condition ; 
 @ @ - 321 , 8 + 323 , 14 @ @ public class ParallelCompactionIterable extends AbstractCompactionIterable 
 
 public void close ( ) throws IOException 
 { 
 - wrapped . close ( ) ; 
 - condition . signal ( ) ; 
 + try 
 + { 
 + wrapped . close ( ) ; 
 + } 
 + finally 
 + { 
 + condition . signalAll ( ) ; 
 + } 
 } 
 
 public boolean hasNext ( ) 
 diff - - git a / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java b / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java 
 index 7be4c29 . . 1740ee2 100644 
 - - - a / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java 
 + + + b / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java 
 @ @ - 100 , 7 + 100 , 7 @ @ public abstract class AbstractWriteResponseHandler implements IAsyncCallback 
 
 protected void signal ( ) 
 { 
 - condition . signal ( ) ; 
 + condition . signalAll ( ) ; 
 if ( callback ! = null ) 
 callback . run ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / ReadCallback . java b / src / java / org / apache / cassandra / service / ReadCallback . java 
 index 7cb5a23 . . bd8b025 100644 
 - - - a / src / java / org / apache / cassandra / service / ReadCallback . java 
 + + + b / src / java / org / apache / cassandra / service / ReadCallback . java 
 @ @ - 117 , 7 + 117 , 7 @ @ public class ReadCallback < TMessage , TResolved > implements IAsyncCallback < TMessag 
 : received . get ( ) ; 
 if ( n > = blockfor & & resolver . isDataPresent ( ) ) 
 { 
 - condition . signal ( ) ; 
 + condition . signalAll ( ) ; 
 maybeResolveForRepair ( ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / TruncateResponseHandler . java b / src / java / org / apache / cassandra / service / TruncateResponseHandler . java 
 index 3920b91 . . 3bacad8 100644 
 - - - a / src / java / org / apache / cassandra / service / TruncateResponseHandler . java 
 + + + b / src / java / org / apache / cassandra / service / TruncateResponseHandler . java 
 @ @ - 70 , 7 + 70 , 7 @ @ public class TruncateResponseHandler implements IAsyncCallback 
 { 
 responses . incrementAndGet ( ) ; 
 if ( responses . get ( ) > = responseCount ) 
 - condition . signal ( ) ; 
 + condition . signalAll ( ) ; 
 } 
 
 public boolean isLatencyForSnitch ( ) 
 diff - - git a / src / java / org / apache / cassandra / utils / SimpleCondition . java b / src / java / org / apache / cassandra / utils / SimpleCondition . java 
 index 6086f3b . . 4d5f896 100644 
 - - - a / src / java / org / apache / cassandra / utils / SimpleCondition . java 
 + + + b / src / java / org / apache / cassandra / utils / SimpleCondition . java 
 @ @ - 51 , 10 + 51 , 9 @ @ public class SimpleCondition implements Condition 
 return set ; 
 } 
 
 - public synchronized void signal ( ) 
 + public void signal ( ) 
 { 
 - set = true ; 
 - notify ( ) ; 
 + throw new UnsupportedOperationException ( ) ; 
 } 
 
 public synchronized void signalAll ( )
