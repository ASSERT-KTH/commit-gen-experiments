BLEU SCORE: 0.040583489434387374

TEST MSG: Fix crossNode value when receiving messages
GENERATED MSG: Added slow query log

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 25facd5 . . 40aace3 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 10 <nl> + * Fix crossNode value when receiving messages ( CASSANDRA - 12791 ) <nl> * Don ' t load MX4J beans twice ( CASSANDRA - 12869 ) <nl> * Extend native protocol request flags , add versions to SUPPORTED , and introduce ProtocolVersion enum ( CASSANDRA - 12838 ) <nl> * Set JOINING mode when running pre - join tasks ( CASSANDRA - 12836 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ReadCommandVerbHandler . java b / src / java / org / apache / cassandra / db / ReadCommandVerbHandler . java <nl> index 7948590 . . a71e92d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ReadCommandVerbHandler . java <nl> + + + b / src / java / org / apache / cassandra / db / ReadCommandVerbHandler . java <nl> @ @ - 41 , 7 + 41 , 7 @ @ public class ReadCommandVerbHandler implements IVerbHandler < ReadCommand > <nl> } <nl> <nl> ReadCommand command = message . payload ; <nl> - command . setMonitoringTime ( message . constructionTime , message . getTimeout ( ) , message . getSlowQueryTimeout ( ) ) ; <nl> + command . setMonitoringTime ( message . constructionTime , message . isCrossNode ( ) , message . getTimeout ( ) , message . getSlowQueryTimeout ( ) ) ; <nl> <nl> ReadResponse response ; <nl> try ( ReadExecutionController executionController = command . executionController ( ) ; <nl> @ @ - 53 , 7 + 53 , 7 @ @ public class ReadCommandVerbHandler implements IVerbHandler < ReadCommand > <nl> if ( ! command . complete ( ) ) <nl> { <nl> Tracing . trace ( " Discarding partial response to { } ( timed out ) " , message . from ) ; <nl> - MessagingService . instance ( ) . incrementDroppedMessages ( message , System . currentTimeMillis ( ) - message . constructionTime . timestamp ) ; <nl> + MessagingService . instance ( ) . incrementDroppedMessages ( message , message . getLifetimeInMS ( ) ) ; <nl> return ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / monitoring / ConstructionTime . java b / src / java / org / apache / cassandra / db / monitoring / ConstructionTime . java <nl> deleted file mode 100644 <nl> index d6b6078 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / db / monitoring / ConstructionTime . java <nl> + + + / dev / null <nl> @ @ - 1 , 41 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package org . apache . cassandra . db . monitoring ; <nl> - <nl> - public final class ConstructionTime <nl> - { <nl> - public final long timestamp ; <nl> - public final boolean isCrossNode ; <nl> - <nl> - public ConstructionTime ( ) <nl> - { <nl> - this ( ApproximateTime . currentTimeMillis ( ) ) ; <nl> - } <nl> - <nl> - public ConstructionTime ( long timestamp ) <nl> - { <nl> - this ( timestamp , false ) ; <nl> - } <nl> - <nl> - public ConstructionTime ( long timestamp , boolean isCrossNode ) <nl> - { <nl> - this . timestamp = timestamp ; <nl> - this . isCrossNode = isCrossNode ; <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / db / monitoring / Monitorable . java b / src / java / org / apache / cassandra / db / monitoring / Monitorable . java <nl> index f4c5ee8 . . c9bf94e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / monitoring / Monitorable . java <nl> + + + b / src / java / org / apache / cassandra / db / monitoring / Monitorable . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . db . monitoring ; <nl> public interface Monitorable <nl> { <nl> String name ( ) ; <nl> - ConstructionTime constructionTime ( ) ; <nl> + long constructionTime ( ) ; <nl> long timeout ( ) ; <nl> long slowTimeout ( ) ; <nl> <nl> @ @ - 29 , 6 + 29 , 7 @ @ public interface Monitorable <nl> boolean isAborted ( ) ; <nl> boolean isCompleted ( ) ; <nl> boolean isSlow ( ) ; <nl> + boolean isCrossNode ( ) ; <nl> <nl> boolean abort ( ) ; <nl> boolean complete ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / monitoring / MonitorableImpl . java b / src / java / org / apache / cassandra / db / monitoring / MonitorableImpl . java <nl> index 7363e10 . . 48c8152 100644 <nl> - - - a / src / java / org / apache / cassandra / db / monitoring / MonitorableImpl . java <nl> + + + b / src / java / org / apache / cassandra / db / monitoring / MonitorableImpl . java <nl> @ @ - 22 , 9 + 22 , 10 @ @ public abstract class MonitorableImpl implements Monitorable <nl> { <nl> private MonitoringState state ; <nl> private boolean isSlow ; <nl> - private ConstructionTime constructionTime ; <nl> + private long constructionTime = - 1 ; <nl> private long timeout ; <nl> private long slowTimeout ; <nl> + private boolean isCrossNode ; <nl> <nl> protected MonitorableImpl ( ) <nl> { <nl> @ @ - 37 , 14 + 38 , 16 @ @ public abstract class MonitorableImpl implements Monitorable <nl> * is too complex , it would require passing new parameters to all serializers <nl> * or specializing the serializers to accept these message properties . <nl> * / <nl> - public void setMonitoringTime ( ConstructionTime constructionTime , long timeout , long slowTimeout ) <nl> + public void setMonitoringTime ( long constructionTime , boolean isCrossNode , long timeout , long slowTimeout ) <nl> { <nl> + assert constructionTime > = 0 ; <nl> this . constructionTime = constructionTime ; <nl> + this . isCrossNode = isCrossNode ; <nl> this . timeout = timeout ; <nl> this . slowTimeout = slowTimeout ; <nl> } <nl> <nl> - public ConstructionTime constructionTime ( ) <nl> + public long constructionTime ( ) <nl> { <nl> return constructionTime ; <nl> } <nl> @ @ - 54 , 6 + 57 , 11 @ @ public abstract class MonitorableImpl implements Monitorable <nl> return timeout ; <nl> } <nl> <nl> + public boolean isCrossNode ( ) <nl> + { <nl> + return isCrossNode ; <nl> + } <nl> + <nl> public long slowTimeout ( ) <nl> { <nl> return slowTimeout ; <nl> @ @ - 87 , 7 + 95 , 7 @ @ public abstract class MonitorableImpl implements Monitorable <nl> { <nl> if ( state = = MonitoringState . IN _ PROGRESS ) <nl> { <nl> - if ( constructionTime ! = null ) <nl> + if ( constructionTime > = 0 ) <nl> MonitoringTask . addFailedOperation ( this , ApproximateTime . currentTimeMillis ( ) ) ; <nl> <nl> state = MonitoringState . ABORTED ; <nl> @ @ - 101 , 7 + 109 , 7 @ @ public abstract class MonitorableImpl implements Monitorable <nl> { <nl> if ( state = = MonitoringState . IN _ PROGRESS ) <nl> { <nl> - if ( isSlow & & slowTimeout > 0 & & constructionTime ! = null ) <nl> + if ( isSlow & & slowTimeout > 0 & & constructionTime > = 0 ) <nl> MonitoringTask . addSlowOperation ( this , ApproximateTime . currentTimeMillis ( ) ) ; <nl> <nl> state = MonitoringState . COMPLETED ; <nl> @ @ - 113 , 10 + 121 , 10 @ @ public abstract class MonitorableImpl implements Monitorable <nl> <nl> private void check ( ) <nl> { <nl> - if ( constructionTime = = null | | state ! = MonitoringState . IN _ PROGRESS ) <nl> + if ( constructionTime < 0 | | state ! = MonitoringState . IN _ PROGRESS ) <nl> return ; <nl> <nl> - long elapsed = ApproximateTime . currentTimeMillis ( ) - constructionTime . timestamp ; <nl> + long elapsed = ApproximateTime . currentTimeMillis ( ) - constructionTime ; <nl> <nl> if ( elapsed > = slowTimeout & & ! isSlow ) <nl> isSlow = true ; <nl> diff - - git a / src / java / org / apache / cassandra / db / monitoring / MonitoringTask . java b / src / java / org / apache / cassandra / db / monitoring / MonitoringTask . java <nl> index b116485 . . 9426042 100644 <nl> - - - a / src / java / org / apache / cassandra / db / monitoring / MonitoringTask . java <nl> + + + b / src / java / org / apache / cassandra / db / monitoring / MonitoringTask . java <nl> @ @ - 330 , 7 + 330 , 7 @ @ class MonitoringTask <nl> { <nl> this . operation = operation ; <nl> numTimesReported = 1 ; <nl> - totalTime = failedAt - operation . constructionTime ( ) . timestamp ; <nl> + totalTime = failedAt - operation . constructionTime ( ) ; <nl> minTime = totalTime ; <nl> maxTime = totalTime ; <nl> } <nl> @ @ - 370 , 7 + 370 , 7 @ @ class MonitoringTask <nl> name ( ) , <nl> totalTime , <nl> operation . timeout ( ) , <nl> - operation . constructionTime ( ) . isCrossNode ? " msec / cross - node " : " msec " ) ; <nl> + operation . isCrossNode ( ) ? " msec / cross - node " : " msec " ) ; <nl> else <nl> return String . format ( " < % s > timed out % d times , avg / min / max % d / % d / % d msec , timeout % d % s " , <nl> name ( ) , <nl> @ @ - 379 , 7 + 379 , 7 @ @ class MonitoringTask <nl> minTime , <nl> maxTime , <nl> operation . timeout ( ) , <nl> - operation . constructionTime ( ) . isCrossNode ? " msec / cross - node " : " msec " ) ; <nl> + operation . isCrossNode ( ) ? " msec / cross - node " : " msec " ) ; <nl> } <nl> } <nl> <nl> @ @ - 400 , 7 + 400 , 7 @ @ class MonitoringTask <nl> name ( ) , <nl> totalTime , <nl> operation . slowTimeout ( ) , <nl> - operation . constructionTime ( ) . isCrossNode ? " msec / cross - node " : " msec " ) ; <nl> + operation . isCrossNode ( ) ? " msec / cross - node " : " msec " ) ; <nl> else <nl> return String . format ( " < % s > , was slow % d times : avg / min / max % d / % d / % d msec - slow timeout % d % s " , <nl> name ( ) , <nl> @ @ - 409 , 7 + 409 , 7 @ @ class MonitoringTask <nl> minTime , <nl> maxTime , <nl> operation . slowTimeout ( ) , <nl> - operation . constructionTime ( ) . isCrossNode ? " msec / cross - node " : " msec " ) ; <nl> + operation . isCrossNode ( ) ? " msec / cross - node " : " msec " ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java <nl> index cd80e00 . . 7d3c607 100644 <nl> - - - a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java <nl> @ @ - 188 , 7 + 188 , 7 @ @ public class IncomingTcpConnection extends FastThreadLocalThread implements Clos <nl> else <nl> id = input . readInt ( ) ; <nl> <nl> - MessageIn message = MessageIn . read ( input , version , id , MessageIn . readTimestamp ( from , input , System . currentTimeMillis ( ) ) ) ; <nl> + MessageIn message = MessageIn . read ( input , version , id , MessageIn . readConstructionTime ( from , input ) ) ; <nl> if ( message = = null ) <nl> { <nl> / / callback expired ; nothing to do <nl> diff - - git a / src / java / org / apache / cassandra / net / MessageDeliveryTask . java b / src / java / org / apache / cassandra / net / MessageDeliveryTask . java <nl> index c97a98f . . c91e9da 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessageDeliveryTask . java <nl> + + + b / src / java / org / apache / cassandra / net / MessageDeliveryTask . java <nl> @ @ - 46 , 7 + 46 , 7 @ @ public class MessageDeliveryTask implements Runnable <nl> public void run ( ) <nl> { <nl> MessagingService . Verb verb = message . verb ; <nl> - long timeTaken = System . currentTimeMillis ( ) - message . constructionTime . timestamp ; <nl> + long timeTaken = message . getLifetimeInMS ( ) ; <nl> if ( MessagingService . DROPPABLE _ VERBS . contains ( verb ) <nl> & & timeTaken > message . getTimeout ( ) ) <nl> { <nl> @ @ - 82 , 7 + 82 , 7 @ @ public class MessageDeliveryTask implements Runnable <nl> } <nl> <nl> if ( GOSSIP _ VERBS . contains ( message . verb ) ) <nl> - Gossiper . instance . setLastProcessedMessageAt ( message . constructionTime . timestamp ) ; <nl> + Gossiper . instance . setLastProcessedMessageAt ( message . constructionTime ) ; <nl> } <nl> <nl> private void handleFailure ( Throwable t ) <nl> diff - - git a / src / java / org / apache / cassandra / net / MessageIn . java b / src / java / org / apache / cassandra / net / MessageIn . java <nl> index 0562df6 . . a254741 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessageIn . java <nl> + + + b / src / java / org / apache / cassandra / net / MessageIn . java <nl> @ @ - 26 , 7 + 26 , 7 @ @ import com . google . common . collect . ImmutableMap ; <nl> <nl> import org . apache . cassandra . concurrent . Stage ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - import org . apache . cassandra . db . monitoring . ConstructionTime ; <nl> + import org . apache . cassandra . db . monitoring . ApproximateTime ; <nl> import org . apache . cassandra . exceptions . RequestFailureReason ; <nl> import org . apache . cassandra . io . IVersionedSerializer ; <nl> import org . apache . cassandra . io . util . DataInputBuffer ; <nl> @ @ - 39 , 14 + 39 , 14 @ @ public class MessageIn < T > <nl> public final Map < String , byte [ ] > parameters ; <nl> public final MessagingService . Verb verb ; <nl> public final int version ; <nl> - public final ConstructionTime constructionTime ; <nl> + public final long constructionTime ; <nl> <nl> private MessageIn ( InetAddress from , <nl> T payload , <nl> Map < String , byte [ ] > parameters , <nl> MessagingService . Verb verb , <nl> int version , <nl> - ConstructionTime constructionTime ) <nl> + long constructionTime ) <nl> { <nl> this . from = from ; <nl> this . payload = payload ; <nl> @ @ - 61 , 17 + 61 , 26 @ @ public class MessageIn < T > <nl> Map < String , byte [ ] > parameters , <nl> MessagingService . Verb verb , <nl> int version , <nl> - ConstructionTime constructionTime ) <nl> + long constructionTime ) <nl> { <nl> return new MessageIn < > ( from , payload , parameters , verb , version , constructionTime ) ; <nl> } <nl> <nl> + public static < T > MessageIn < T > create ( InetAddress from , <nl> + T payload , <nl> + Map < String , byte [ ] > parameters , <nl> + MessagingService . Verb verb , <nl> + int version ) <nl> + { <nl> + return new MessageIn < > ( from , payload , parameters , verb , version , ApproximateTime . currentTimeMillis ( ) ) ; <nl> + } <nl> + <nl> public static < T2 > MessageIn < T2 > read ( DataInputPlus in , int version , int id ) throws IOException <nl> { <nl> - return read ( in , version , id , new ConstructionTime ( ) ) ; <nl> + return read ( in , version , id , ApproximateTime . currentTimeMillis ( ) ) ; <nl> } <nl> <nl> - public static < T2 > MessageIn < T2 > read ( DataInputPlus in , int version , int id , ConstructionTime constructionTime ) throws IOException <nl> + public static < T2 > MessageIn < T2 > read ( DataInputPlus in , int version , int id , long constructionTime ) throws IOException <nl> { <nl> InetAddress from = CompactEndpointSerializationHelper . deserialize ( in ) ; <nl> <nl> @ @ - 115 , 28 + 124 , 42 @ @ public class MessageIn < T > <nl> return MessageIn . create ( from , payload , parameters , verb , version , constructionTime ) ; <nl> } <nl> <nl> - public static ConstructionTime createTimestamp ( ) <nl> + public static long readConstructionTime ( InetAddress from , DataInputPlus input ) throws IOException <nl> { <nl> - return new ConstructionTime ( ) ; <nl> + long currentTime = ApproximateTime . currentTimeMillis ( ) ; <nl> + <nl> + / / Reconstruct the message construction time sent by the remote host ( we sent only the lower 4 bytes , assuming the <nl> + / / higher 4 bytes wouldn ' t change between the sender and receiver ) <nl> + int partial = input . readInt ( ) ; / / make sure to readInt , even if cross _ node _ to is not enabled <nl> + long sentConstructionTime = ( currentTime & 0xFFFFFFFF00000000L ) | ( ( ( partial & 0xFFFFFFFFL ) < < 2 ) > > 2 ) ; <nl> + <nl> + / / Because nodes may not have their clock perfectly in sync , it ' s actually possible the sentConstructionTime is <nl> + / / later than the currentTime ( the received time ) . If that ' s the case , as we definitively know there is a lack <nl> + / / of proper synchronziation of the clock , we ignore sentConstructionTime . We also ignore that <nl> + / / sentConstructionTime if we ' re told to . <nl> + long elapsed = currentTime - sentConstructionTime ; <nl> + if ( elapsed > 0 ) <nl> + MessagingService . instance ( ) . metrics . addTimeTaken ( from , elapsed ) ; <nl> + <nl> + boolean useSentTime = DatabaseDescriptor . hasCrossNodeTimeout ( ) & & elapsed > 0 ; <nl> + return useSentTime ? sentConstructionTime : currentTime ; <nl> } <nl> <nl> - public static ConstructionTime readTimestamp ( InetAddress from , DataInputPlus input , long timestamp ) throws IOException <nl> + / * * <nl> + * Since how long ( in milliseconds ) the message has lived . <nl> + * / <nl> + public long getLifetimeInMS ( ) <nl> { <nl> - / / make sure to readInt , even if cross _ node _ to is not enabled <nl> - int partial = input . readInt ( ) ; <nl> - long crossNodeTimestamp = ( timestamp & 0xFFFFFFFF00000000L ) | ( ( ( partial & 0xFFFFFFFFL ) < < 2 ) > > 2 ) ; <nl> - if ( timestamp > crossNodeTimestamp ) <nl> - { <nl> - MessagingService . instance ( ) . metrics . addTimeTaken ( from , timestamp - crossNodeTimestamp ) ; <nl> - } <nl> - if ( DatabaseDescriptor . hasCrossNodeTimeout ( ) ) <nl> - { <nl> - return new ConstructionTime ( crossNodeTimestamp , timestamp ! = crossNodeTimestamp ) ; <nl> - } <nl> - else <nl> - { <nl> - return new ConstructionTime ( ) ; <nl> - } <nl> + return ApproximateTime . currentTimeMillis ( ) - constructionTime ; <nl> + } <nl> + <nl> + / * * <nl> + * Whether the message has crossed the node boundary , that is whether it originated from another node . <nl> + * <nl> + * / <nl> + public boolean isCrossNode ( ) <nl> + { <nl> + return ! from . equals ( DatabaseDescriptor . getBroadcastAddress ( ) ) ; <nl> } <nl> <nl> public Stage getMessageType ( ) <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index ba40a58 . . f82e80b 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 426 , 14 + 426 , 14 @ @ public final class MessagingService implements MessagingServiceMBean <nl> private static final class DroppedMessages <nl> { <nl> final DroppedMessageMetrics metrics ; <nl> - final AtomicInteger droppedInternalTimeout ; <nl> - final AtomicInteger droppedCrossNodeTimeout ; <nl> + final AtomicInteger droppedInternal ; <nl> + final AtomicInteger droppedCrossNode ; <nl> <nl> DroppedMessages ( Verb verb ) <nl> { <nl> this . metrics = new DroppedMessageMetrics ( verb ) ; <nl> - this . droppedInternalTimeout = new AtomicInteger ( 0 ) ; <nl> - this . droppedCrossNodeTimeout = new AtomicInteger ( 0 ) ; <nl> + this . droppedInternal = new AtomicInteger ( 0 ) ; <nl> + this . droppedCrossNode = new AtomicInteger ( 0 ) ; <nl> } <nl> <nl> } <nl> @ @ - 1160 , 19 + 1160 , 19 @ @ public final class MessagingService implements MessagingServiceMBean <nl> { <nl> updateDroppedMutationCount ( ( IMutation ) message . payload ) ; <nl> } <nl> - incrementDroppedMessages ( message . verb , timeTaken , message . constructionTime . isCrossNode ) ; <nl> + incrementDroppedMessages ( message . verb , timeTaken , message . isCrossNode ( ) ) ; <nl> } <nl> <nl> - public void incrementDroppedMessages ( Verb verb , long timeTaken , boolean isCrossNodeTimeout ) <nl> + public void incrementDroppedMessages ( Verb verb , long timeTaken , boolean isCrossNode ) <nl> { <nl> assert DROPPABLE _ VERBS . contains ( verb ) : " Verb " + verb + " should not legally be dropped " ; <nl> - incrementDroppedMessages ( droppedMessagesMap . get ( verb ) , timeTaken , isCrossNodeTimeout ) ; <nl> + incrementDroppedMessages ( droppedMessagesMap . get ( verb ) , timeTaken , isCrossNode ) ; <nl> } <nl> <nl> - public void incrementDroppedMessages ( Verb verb , boolean isCrossNodeTimeout ) <nl> + public void incrementDroppedMessages ( Verb verb , boolean isCrossNode ) <nl> { <nl> assert DROPPABLE _ VERBS . contains ( verb ) : " Verb " + verb + " should not legally be dropped " ; <nl> - incrementDroppedMessages ( droppedMessagesMap . get ( verb ) , isCrossNodeTimeout ) ; <nl> + incrementDroppedMessages ( droppedMessagesMap . get ( verb ) , isCrossNode ) ; <nl> } <nl> <nl> private void updateDroppedMutationCount ( IMutation mutation ) <nl> @ @ - 1189 , 22 + 1189 , 22 @ @ public final class MessagingService implements MessagingServiceMBean <nl> } <nl> } <nl> <nl> - private void incrementDroppedMessages ( DroppedMessages droppedMessages , long timeTaken , boolean isCrossNodeTimeout ) <nl> + private void incrementDroppedMessages ( DroppedMessages droppedMessages , long timeTaken , boolean isCrossNode ) <nl> { <nl> - if ( isCrossNodeTimeout ) <nl> + if ( isCrossNode ) <nl> droppedMessages . metrics . crossNodeDroppedLatency . update ( timeTaken , TimeUnit . MILLISECONDS ) ; <nl> else <nl> droppedMessages . metrics . internalDroppedLatency . update ( timeTaken , TimeUnit . MILLISECONDS ) ; <nl> - incrementDroppedMessages ( droppedMessages , isCrossNodeTimeout ) ; <nl> + incrementDroppedMessages ( droppedMessages , isCrossNode ) ; <nl> } <nl> <nl> - private void incrementDroppedMessages ( DroppedMessages droppedMessages , boolean isCrossNodeTimeout ) <nl> + private void incrementDroppedMessages ( DroppedMessages droppedMessages , boolean isCrossNode ) <nl> { <nl> droppedMessages . metrics . dropped . mark ( ) ; <nl> - if ( isCrossNodeTimeout ) <nl> - droppedMessages . droppedCrossNodeTimeout . incrementAndGet ( ) ; <nl> + if ( isCrossNode ) <nl> + droppedMessages . droppedCrossNode . incrementAndGet ( ) ; <nl> else <nl> - droppedMessages . droppedInternalTimeout . incrementAndGet ( ) ; <nl> + droppedMessages . droppedInternal . incrementAndGet ( ) ; <nl> } <nl> <nl> private void logDroppedMessages ( ) <nl> @ @ - 1226 , 16 + 1226 , 16 @ @ public final class MessagingService implements MessagingServiceMBean <nl> Verb verb = entry . getKey ( ) ; <nl> DroppedMessages droppedMessages = entry . getValue ( ) ; <nl> <nl> - int droppedInternalTimeout = droppedMessages . droppedInternalTimeout . getAndSet ( 0 ) ; <nl> - int droppedCrossNodeTimeout = droppedMessages . droppedCrossNodeTimeout . getAndSet ( 0 ) ; <nl> - if ( droppedInternalTimeout > 0 | | droppedCrossNodeTimeout > 0 ) <nl> + int droppedInternal = droppedMessages . droppedInternal . getAndSet ( 0 ) ; <nl> + int droppedCrossNode = droppedMessages . droppedCrossNode . getAndSet ( 0 ) ; <nl> + if ( droppedInternal > 0 | | droppedCrossNode > 0 ) <nl> { <nl> - ret . add ( String . format ( " % s messages were dropped in last % d ms : % d for internal timeout and % d for cross node timeout . " <nl> + ret . add ( String . format ( " % s messages were dropped in last % d ms : % d internal and % d cross node . " <nl> + " Mean internal dropped latency : % d ms and Mean cross - node dropped latency : % d ms " , <nl> verb , <nl> LOG _ DROPPED _ INTERVAL _ IN _ MS , <nl> - droppedInternalTimeout , <nl> - droppedCrossNodeTimeout , <nl> + droppedInternal , <nl> + droppedCrossNode , <nl> TimeUnit . NANOSECONDS . toMillis ( ( long ) droppedMessages . metrics . internalDroppedLatency . getSnapshot ( ) . getMean ( ) ) , <nl> TimeUnit . NANOSECONDS . toMillis ( ( long ) droppedMessages . metrics . crossNodeDroppedLatency . getSnapshot ( ) . getMean ( ) ) ) ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / ReadCallback . java b / src / java / org / apache / cassandra / service / ReadCallback . java <nl> index b5cb477 . . 11c0b12 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ReadCallback . java <nl> + + + b / src / java / org / apache / cassandra / service / ReadCallback . java <nl> @ @ - 198 , 8 + 198 , 7 @ @ public class ReadCallback implements IAsyncCallbackWithFailure < ReadResponse > <nl> result , <nl> Collections . < String , byte [ ] > emptyMap ( ) , <nl> MessagingService . Verb . INTERNAL _ RESPONSE , <nl> - MessagingService . current _ version , <nl> - MessageIn . createTimestamp ( ) ) ; <nl> + MessagingService . current _ version ) ; <nl> response ( message ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index 529e4e3 . . e0be68c 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 52 , 7 + 52 , 6 @ @ import org . apache . cassandra . config . SchemaConstants ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . filter . DataLimits ; <nl> import org . apache . cassandra . db . filter . TombstoneOverwhelmingException ; <nl> - import org . apache . cassandra . db . monitoring . ConstructionTime ; <nl> import org . apache . cassandra . db . partitions . * ; <nl> import org . apache . cassandra . db . rows . RowIterator ; <nl> import org . apache . cassandra . db . view . ViewUtils ; <nl> @ @ - 1876 , 7 + 1875 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> { <nl> try <nl> { <nl> - command . setMonitoringTime ( new ConstructionTime ( constructionTime ) , verb . getTimeout ( ) , DatabaseDescriptor . getSlowQueryTimeout ( ) ) ; <nl> + command . setMonitoringTime ( constructionTime , false , verb . getTimeout ( ) , DatabaseDescriptor . getSlowQueryTimeout ( ) ) ; <nl> <nl> ReadResponse response ; <nl> try ( ReadExecutionController executionController = command . executionController ( ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / monitoring / MonitoringTaskTest . java b / test / unit / org / apache / cassandra / db / monitoring / MonitoringTaskTest . java <nl> index 14659e3 . . acc988f 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / monitoring / MonitoringTaskTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / monitoring / MonitoringTaskTest . java <nl> @ @ - 65 , 10 + 65 , 10 @ @ public class MonitoringTaskTest <nl> { <nl> private final String name ; <nl> <nl> - TestMonitor ( String name , ConstructionTime constructionTime , long timeout , long slow ) <nl> + TestMonitor ( String name , long timestamp , boolean isCrossNode , long timeout , long slow ) <nl> { <nl> this . name = name ; <nl> - setMonitoringTime ( constructionTime , timeout , slow ) ; <nl> + setMonitoringTime ( timestamp , isCrossNode , timeout , slow ) ; <nl> } <nl> <nl> public String name ( ) <nl> @ @ - 124 , 7 + 124 , 7 @ @ public class MonitoringTaskTest <nl> @ Test <nl> public void testAbort ( ) throws InterruptedException <nl> { <nl> - Monitorable operation = new TestMonitor ( " Test abort " , new ConstructionTime ( System . currentTimeMillis ( ) ) , timeout , slowTimeout ) ; <nl> + Monitorable operation = new TestMonitor ( " Test abort " , System . currentTimeMillis ( ) , false , timeout , slowTimeout ) ; <nl> waitForOperationsToComplete ( operation ) ; <nl> <nl> assertTrue ( operation . isAborted ( ) ) ; <nl> @ @ - 135 , 7 + 135 , 7 @ @ public class MonitoringTaskTest <nl> @ Test <nl> public void testAbortIdemPotent ( ) throws InterruptedException <nl> { <nl> - Monitorable operation = new TestMonitor ( " Test abort " , new ConstructionTime ( System . currentTimeMillis ( ) ) , timeout , slowTimeout ) ; <nl> + Monitorable operation = new TestMonitor ( " Test abort " , System . currentTimeMillis ( ) , false , timeout , slowTimeout ) ; <nl> waitForOperationsToComplete ( operation ) ; <nl> <nl> assertTrue ( operation . abort ( ) ) ; <nl> @ @ - 148 , 7 + 148 , 7 @ @ public class MonitoringTaskTest <nl> @ Test <nl> public void testAbortCrossNode ( ) throws InterruptedException <nl> { <nl> - Monitorable operation = new TestMonitor ( " Test for cross node " , new ConstructionTime ( System . currentTimeMillis ( ) , true ) , timeout , slowTimeout ) ; <nl> + Monitorable operation = new TestMonitor ( " Test for cross node " , System . currentTimeMillis ( ) , true , timeout , slowTimeout ) ; <nl> waitForOperationsToComplete ( operation ) ; <nl> <nl> assertTrue ( operation . isAborted ( ) ) ; <nl> @ @ - 159 , 7 + 159 , 7 @ @ public class MonitoringTaskTest <nl> @ Test <nl> public void testComplete ( ) throws InterruptedException <nl> { <nl> - Monitorable operation = new TestMonitor ( " Test complete " , new ConstructionTime ( System . currentTimeMillis ( ) ) , timeout , slowTimeout ) ; <nl> + Monitorable operation = new TestMonitor ( " Test complete " , System . currentTimeMillis ( ) , false , timeout , slowTimeout ) ; <nl> operation . complete ( ) ; <nl> waitForOperationsToComplete ( operation ) ; <nl> <nl> @ @ - 171 , 7 + 171 , 7 @ @ public class MonitoringTaskTest <nl> @ Test <nl> public void testCompleteIdemPotent ( ) throws InterruptedException <nl> { <nl> - Monitorable operation = new TestMonitor ( " Test complete " , new ConstructionTime ( System . currentTimeMillis ( ) ) , timeout , slowTimeout ) ; <nl> + Monitorable operation = new TestMonitor ( " Test complete " , System . currentTimeMillis ( ) , false , timeout , slowTimeout ) ; <nl> operation . complete ( ) ; <nl> waitForOperationsToComplete ( operation ) ; <nl> <nl> @ @ - 185 , 7 + 185 , 7 @ @ public class MonitoringTaskTest <nl> @ Test <nl> public void testReportSlow ( ) throws InterruptedException <nl> { <nl> - Monitorable operation = new TestMonitor ( " Test report slow " , new ConstructionTime ( System . currentTimeMillis ( ) ) , timeout , slowTimeout ) ; <nl> + Monitorable operation = new TestMonitor ( " Test report slow " , System . currentTimeMillis ( ) , false , timeout , slowTimeout ) ; <nl> waitForOperationsToBeReportedAsSlow ( operation ) ; <nl> <nl> assertTrue ( operation . isSlow ( ) ) ; <nl> @ @ - 199 , 7 + 199 , 7 @ @ public class MonitoringTaskTest <nl> public void testNoReportSlowIfZeroSlowTimeout ( ) throws InterruptedException <nl> { <nl> / / when the slow timeout is set to zero then operation won ' t be reported as slow <nl> - Monitorable operation = new TestMonitor ( " Test report slow disabled " , new ConstructionTime ( System . currentTimeMillis ( ) ) , timeout , 0 ) ; <nl> + Monitorable operation = new TestMonitor ( " Test report slow disabled " , System . currentTimeMillis ( ) , false , timeout , 0 ) ; <nl> waitForOperationsToBeReportedAsSlow ( operation ) ; <nl> <nl> assertTrue ( operation . isSlow ( ) ) ; <nl> @ @ - 212 , 7 + 212 , 7 @ @ public class MonitoringTaskTest <nl> @ Test <nl> public void testReport ( ) throws InterruptedException <nl> { <nl> - Monitorable operation = new TestMonitor ( " Test report " , new ConstructionTime ( System . currentTimeMillis ( ) ) , timeout , slowTimeout ) ; <nl> + Monitorable operation = new TestMonitor ( " Test report " , System . currentTimeMillis ( ) , false , timeout , slowTimeout ) ; <nl> waitForOperationsToComplete ( operation ) ; <nl> <nl> assertTrue ( operation . isSlow ( ) ) ; <nl> @ @ - 233 , 13 + 233 , 13 @ @ public class MonitoringTaskTest <nl> MonitoringTask . instance = MonitoringTask . make ( 10 , - 1 ) ; <nl> try <nl> { <nl> - Monitorable operation1 = new TestMonitor ( " Test report 1 " , new ConstructionTime ( System . currentTimeMillis ( ) ) , timeout , slowTimeout ) ; <nl> + Monitorable operation1 = new TestMonitor ( " Test report 1 " , System . currentTimeMillis ( ) , false , timeout , slowTimeout ) ; <nl> waitForOperationsToComplete ( operation1 ) ; <nl> <nl> assertTrue ( operation1 . isAborted ( ) ) ; <nl> assertFalse ( operation1 . isCompleted ( ) ) ; <nl> <nl> - Monitorable operation2 = new TestMonitor ( " Test report 2 " , new ConstructionTime ( System . currentTimeMillis ( ) ) , timeout , slowTimeout ) ; <nl> + Monitorable operation2 = new TestMonitor ( " Test report 2 " , System . currentTimeMillis ( ) , false , timeout , slowTimeout ) ; <nl> waitForOperationsToBeReportedAsSlow ( operation2 ) ; <nl> <nl> operation2 . complete ( ) ; <nl> @ @ - 266 , 7 + 266 , 7 @ @ public class MonitoringTaskTest <nl> for ( int i = 0 ; i < opCount ; i + + ) <nl> { <nl> executorService . submit ( ( ) - > <nl> - operations . add ( new TestMonitor ( UUID . randomUUID ( ) . toString ( ) , new ConstructionTime ( ) , timeout , slowTimeout ) ) <nl> + operations . add ( new TestMonitor ( UUID . randomUUID ( ) . toString ( ) , System . currentTimeMillis ( ) , false , timeout , slowTimeout ) ) <nl> ) ; <nl> } <nl> <nl> @ @ - 311 , 13 + 311 , 17 @ @ public class MonitoringTaskTest <nl> for ( int j = 0 ; j < numTimes ; j + + ) <nl> { <nl> Monitorable operation1 = new TestMonitor ( operationName , <nl> - new ConstructionTime ( System . currentTimeMillis ( ) ) , <nl> - timeout , slowTimeout ) ; <nl> + System . currentTimeMillis ( ) , <nl> + false , <nl> + timeout , <nl> + slowTimeout ) ; <nl> waitForOperationsToComplete ( operation1 ) ; <nl> <nl> Monitorable operation2 = new TestMonitor ( operationName , <nl> - new ConstructionTime ( System . currentTimeMillis ( ) ) , <nl> - timeout , slowTimeout ) ; <nl> + System . currentTimeMillis ( ) , <nl> + false , <nl> + timeout , <nl> + slowTimeout ) ; <nl> waitForOperationsToBeReportedAsSlow ( operation2 ) ; <nl> operation2 . complete ( ) ; <nl> } <nl> @ @ - 362 , 8 + 366 , 10 @ @ public class MonitoringTaskTest <nl> try <nl> { <nl> Monitorable operation = new TestMonitor ( " Test testMultipleThreadsSameName failed " , <nl> - new ConstructionTime ( System . currentTimeMillis ( ) ) , <nl> - timeout , slowTimeout ) ; <nl> + System . currentTimeMillis ( ) , <nl> + false , <nl> + timeout , <nl> + slowTimeout ) ; <nl> operations . add ( operation ) ; <nl> } <nl> finally <nl> @ @ - 394 , 8 + 400 , 10 @ @ public class MonitoringTaskTest <nl> try <nl> { <nl> Monitorable operation = new TestMonitor ( " Test testMultipleThreadsSameName slow " , <nl> - new ConstructionTime ( System . currentTimeMillis ( ) ) , <nl> - timeout , slowTimeout ) ; <nl> + System . currentTimeMillis ( ) , <nl> + false , <nl> + timeout , <nl> + slowTimeout ) ; <nl> operations . add ( operation ) ; <nl> } <nl> finally <nl> @ @ - 428 , 8 + 436 , 10 @ @ public class MonitoringTaskTest <nl> try <nl> { <nl> Monitorable operation = new TestMonitor ( " Test thread " + Thread . currentThread ( ) . getName ( ) , <nl> - new ConstructionTime ( System . currentTimeMillis ( ) ) , <nl> - timeout , slowTimeout ) ; <nl> + System . currentTimeMillis ( ) , <nl> + false , <nl> + timeout , <nl> + slowTimeout ) ; <nl> operations . add ( operation ) ; <nl> operation . complete ( ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / hints / HintTest . java b / test / unit / org / apache / cassandra / hints / HintTest . java <nl> index 4cc2188 . . e4a33fd 100644 <nl> - - - a / test / unit / org / apache / cassandra / hints / HintTest . java <nl> + + + b / test / unit / org / apache / cassandra / hints / HintTest . java <nl> @ @ - 232 , 7 + 232 , 7 @ @ public class HintTest <nl> / / Process hint message . <nl> HintMessage message = new HintMessage ( localId , hint ) ; <nl> MessagingService . instance ( ) . getVerbHandler ( MessagingService . Verb . HINT ) . doVerb ( <nl> - MessageIn . create ( local , message , Collections . emptyMap ( ) , MessagingService . Verb . HINT , MessagingService . current _ version , MessageIn . createTimestamp ( ) ) , <nl> + MessageIn . create ( local , message , Collections . emptyMap ( ) , MessagingService . Verb . HINT , MessagingService . current _ version ) , <nl> - 1 ) ; <nl> <nl> / / hint should not be applied as we no longer are a replica <nl> @ @ - 277 , 7 + 277 , 7 @ @ public class HintTest <nl> / / Process hint message . <nl> HintMessage message = new HintMessage ( localId , hint ) ; <nl> MessagingService . instance ( ) . getVerbHandler ( MessagingService . Verb . HINT ) . doVerb ( <nl> - MessageIn . create ( local , message , Collections . emptyMap ( ) , MessagingService . Verb . HINT , MessagingService . current _ version , MessageIn . createTimestamp ( ) ) , <nl> + MessageIn . create ( local , message , Collections . emptyMap ( ) , MessagingService . Verb . HINT , MessagingService . current _ version ) , <nl> - 1 ) ; <nl> <nl> / / hint should not be applied as we no longer are a replica <nl> diff - - git a / test / unit / org / apache / cassandra / hints / HintsServiceTest . java b / test / unit / org / apache / cassandra / hints / HintsServiceTest . java <nl> index ffb7f73 . . 077a9d1 100644 <nl> - - - a / test / unit / org / apache / cassandra / hints / HintsServiceTest . java <nl> + + + b / test / unit / org / apache / cassandra / hints / HintsServiceTest . java <nl> @ @ - 184 , 8 + 184 , 7 @ @ public class HintsServiceTest <nl> HintResponse . instance , <nl> Collections . emptyMap ( ) , <nl> MessagingService . Verb . REQUEST _ RESPONSE , <nl> - MessagingService . current _ version , <nl> - MessageIn . createTimestamp ( ) ) ; <nl> + MessagingService . current _ version ) ; <nl> <nl> MockMessagingSpy spy ; <nl> if ( noOfResponses ! = - 1 ) <nl> diff - - git a / test / unit / org / apache / cassandra / net / MatcherResponse . java b / test / unit / org / apache / cassandra / net / MatcherResponse . java <nl> index c8984eb . . 21a75c9 100644 <nl> - - - a / test / unit / org / apache / cassandra / net / MatcherResponse . java <nl> + + + b / test / unit / org / apache / cassandra / net / MatcherResponse . java <nl> @ @ - 106 , 7 + 106 , 7 @ @ public class MatcherResponse <nl> if ( payload = = null ) <nl> return null ; <nl> else <nl> - return MessageIn . create ( to , payload , Collections . emptyMap ( ) , verb , MessagingService . current _ version , MessageIn . createTimestamp ( ) ) ; <nl> + return MessageIn . create ( to , payload , Collections . emptyMap ( ) , verb , MessagingService . current _ version ) ; <nl> } , <nl> limit ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / net / MessagingServiceTest . java b / test / unit / org / apache / cassandra / net / MessagingServiceTest . java <nl> index 2a3ecbe . . ec27b7e 100644 <nl> - - - a / test / unit / org / apache / cassandra / net / MessagingServiceTest . java <nl> + + + b / test / unit / org / apache / cassandra / net / MessagingServiceTest . java <nl> @ @ - 82 , 8 + 82 , 8 @ @ public class MessagingServiceTest <nl> <nl> List < String > logs = messagingService . getDroppedMessagesLogs ( ) ; <nl> assertEquals ( 1 , logs . size ( ) ) ; <nl> - assertEquals ( " READ messages were dropped in last 5000 ms : 2500 for internal timeout and 2500 for cross node timeout . Mean internal dropped latency : 2730 ms and Mean cross - node dropped latency : 2731 ms " , logs . get ( 0 ) ) ; <nl> - assertEquals ( 5000 , ( int ) messagingService . getDroppedMessages ( ) . get ( verb . toString ( ) ) ) ; <nl> + assertEquals ( " READ messages were dropped in last 5000 ms : 2500 internal and 2500 cross node . Mean internal dropped latency : 2730 ms and Mean cross - node dropped latency : 2731 ms " , logs . get ( 0 ) ) ; <nl> + assertEquals ( 5000 , ( int ) messagingService . getDroppedMessages ( ) . get ( verb . toString ( ) ) ) ; <nl> <nl> logs = messagingService . getDroppedMessagesLogs ( ) ; <nl> assertEquals ( 0 , logs . size ( ) ) ; <nl> @ @ - 92 , 8 + 92 , 8 @ @ public class MessagingServiceTest <nl> messagingService . incrementDroppedMessages ( verb , i , i % 2 = = 0 ) ; <nl> <nl> logs = messagingService . getDroppedMessagesLogs ( ) ; <nl> - assertEquals ( " READ messages were dropped in last 5000 ms : 1250 for internal timeout and 1250 for cross node timeout . Mean internal dropped latency : 2277 ms and Mean cross - node dropped latency : 2278 ms " , logs . get ( 0 ) ) ; <nl> - assertEquals ( 7500 , ( int ) messagingService . getDroppedMessages ( ) . get ( verb . toString ( ) ) ) ; <nl> + assertEquals ( " READ messages were dropped in last 5000 ms : 1250 internal and 1250 cross node . Mean internal dropped latency : 2277 ms and Mean cross - node dropped latency : 2278 ms " , logs . get ( 0 ) ) ; <nl> + assertEquals ( 7500 , ( int ) messagingService . getDroppedMessages ( ) . get ( verb . toString ( ) ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 108 , 7 + 108 , 7 @ @ public class MessagingServiceTest <nl> long sentAt = now - latency ; <nl> <nl> assertNull ( dcLatency . get ( " datacenter1 " ) ) ; <nl> - addDCLatency ( sentAt , now ) ; <nl> + addDCLatency ( sentAt ) ; <nl> assertNotNull ( dcLatency . get ( " datacenter1 " ) ) ; <nl> assertEquals ( 1 , dcLatency . get ( " datacenter1 " ) . getCount ( ) ) ; <nl> long expectedBucket = bucketOffsets [ Math . abs ( Arrays . binarySearch ( bucketOffsets , TimeUnit . MILLISECONDS . toNanos ( latency ) ) ) - 1 ] ; <nl> @ @ - 128 , 7 + 128 , 7 @ @ public class MessagingServiceTest <nl> long sentAt = now - latency ; <nl> <nl> assertNull ( dcLatency . get ( " datacenter1 " ) ) ; <nl> - addDCLatency ( sentAt , now ) ; <nl> + addDCLatency ( sentAt ) ; <nl> assertNull ( dcLatency . get ( " datacenter1 " ) ) ; <nl> } <nl> <nl> @ @ - 221 , 7 + 221 , 7 @ @ public class MessagingServiceTest <nl> assertFalse ( MockBackPressureStrategy . applied ) ; <nl> } <nl> <nl> - private static void addDCLatency ( long sentAt , long now ) throws IOException <nl> + private static void addDCLatency ( long sentAt ) throws IOException <nl> { <nl> ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; <nl> try ( DataOutputStreamPlus out = new WrappedDataOutputStreamPlus ( baos ) ) <nl> @ @ - 229 , 7 + 229 , 7 @ @ public class MessagingServiceTest <nl> out . writeInt ( ( int ) sentAt ) ; <nl> } <nl> DataInputStreamPlus in = new DataInputStreamPlus ( new ByteArrayInputStream ( baos . toByteArray ( ) ) ) ; <nl> - MessageIn . readTimestamp ( InetAddress . getLocalHost ( ) , in , now ) ; <nl> + MessageIn . readConstructionTime ( InetAddress . getLocalHost ( ) , in ) ; <nl> } <nl> <nl> public static class MockBackPressureStrategy implements BackPressureStrategy < MockBackPressureStrategy . MockBackPressureState > <nl> diff - - git a / test / unit / org / apache / cassandra / net / MockMessagingServiceTest . java b / test / unit / org / apache / cassandra / net / MockMessagingServiceTest . java <nl> index ce94f33 . . 3f6564e 100644 <nl> - - - a / test / unit / org / apache / cassandra / net / MockMessagingServiceTest . java <nl> + + + b / test / unit / org / apache / cassandra / net / MockMessagingServiceTest . java <nl> @ @ - 59 , 9 + 59 , 7 @ @ public class MockMessagingServiceTest <nl> EchoMessage . instance , <nl> Collections . emptyMap ( ) , <nl> MessagingService . Verb . ECHO , <nl> - MessagingService . current _ version , <nl> - MessageIn . createTimestamp ( ) <nl> - ) ; <nl> + MessagingService . current _ version ) ; <nl> MockMessagingSpy spy = MockMessagingService <nl> . when ( <nl> all ( <nl> @ @ - 94 , 4 + 92 , 4 @ @ public class MockMessagingServiceTest <nl> / / and return a mocked response <nl> assertEquals ( 1 , spy . mockedMessageResponses ) ; <nl> } <nl> - } <nl> \ No newline at end of file <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / service / DataResolverTest . java b / test / unit / org / apache / cassandra / service / DataResolverTest . java <nl> index 93415ba . . b7624ca 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / DataResolverTest . java <nl> + + + b / test / unit / org / apache / cassandra / service / DataResolverTest . java <nl> @ @ - 828 , 8 + 828 , 7 @ @ public class DataResolverTest <nl> ReadResponse . createRemoteDataResponse ( partitionIterator , cmd ) , <nl> Collections . EMPTY _ MAP , <nl> MessagingService . Verb . REQUEST _ RESPONSE , <nl> - MessagingService . current _ version , <nl> - MessageIn . createTimestamp ( ) ) ; <nl> + MessagingService . current _ version ) ; <nl> } <nl> <nl> private RangeTombstone tombstone ( Object start , Object end , long markedForDeleteAt , int localDeletionTime )
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 25facd5 . . 40aace3 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 10 
 + * Fix crossNode value when receiving messages ( CASSANDRA - 12791 ) 
 * Don ' t load MX4J beans twice ( CASSANDRA - 12869 ) 
 * Extend native protocol request flags , add versions to SUPPORTED , and introduce ProtocolVersion enum ( CASSANDRA - 12838 ) 
 * Set JOINING mode when running pre - join tasks ( CASSANDRA - 12836 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ReadCommandVerbHandler . java b / src / java / org / apache / cassandra / db / ReadCommandVerbHandler . java 
 index 7948590 . . a71e92d 100644 
 - - - a / src / java / org / apache / cassandra / db / ReadCommandVerbHandler . java 
 + + + b / src / java / org / apache / cassandra / db / ReadCommandVerbHandler . java 
 @ @ - 41 , 7 + 41 , 7 @ @ public class ReadCommandVerbHandler implements IVerbHandler < ReadCommand > 
 } 
 
 ReadCommand command = message . payload ; 
 - command . setMonitoringTime ( message . constructionTime , message . getTimeout ( ) , message . getSlowQueryTimeout ( ) ) ; 
 + command . setMonitoringTime ( message . constructionTime , message . isCrossNode ( ) , message . getTimeout ( ) , message . getSlowQueryTimeout ( ) ) ; 
 
 ReadResponse response ; 
 try ( ReadExecutionController executionController = command . executionController ( ) ; 
 @ @ - 53 , 7 + 53 , 7 @ @ public class ReadCommandVerbHandler implements IVerbHandler < ReadCommand > 
 if ( ! command . complete ( ) ) 
 { 
 Tracing . trace ( " Discarding partial response to { } ( timed out ) " , message . from ) ; 
 - MessagingService . instance ( ) . incrementDroppedMessages ( message , System . currentTimeMillis ( ) - message . constructionTime . timestamp ) ; 
 + MessagingService . instance ( ) . incrementDroppedMessages ( message , message . getLifetimeInMS ( ) ) ; 
 return ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / monitoring / ConstructionTime . java b / src / java / org / apache / cassandra / db / monitoring / ConstructionTime . java 
 deleted file mode 100644 
 index d6b6078 . . 0000000 
 - - - a / src / java / org / apache / cassandra / db / monitoring / ConstructionTime . java 
 + + + / dev / null 
 @ @ - 1 , 41 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package org . apache . cassandra . db . monitoring ; 
 - 
 - public final class ConstructionTime 
 - { 
 - public final long timestamp ; 
 - public final boolean isCrossNode ; 
 - 
 - public ConstructionTime ( ) 
 - { 
 - this ( ApproximateTime . currentTimeMillis ( ) ) ; 
 - } 
 - 
 - public ConstructionTime ( long timestamp ) 
 - { 
 - this ( timestamp , false ) ; 
 - } 
 - 
 - public ConstructionTime ( long timestamp , boolean isCrossNode ) 
 - { 
 - this . timestamp = timestamp ; 
 - this . isCrossNode = isCrossNode ; 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / db / monitoring / Monitorable . java b / src / java / org / apache / cassandra / db / monitoring / Monitorable . java 
 index f4c5ee8 . . c9bf94e 100644 
 - - - a / src / java / org / apache / cassandra / db / monitoring / Monitorable . java 
 + + + b / src / java / org / apache / cassandra / db / monitoring / Monitorable . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . db . monitoring ; 
 public interface Monitorable 
 { 
 String name ( ) ; 
 - ConstructionTime constructionTime ( ) ; 
 + long constructionTime ( ) ; 
 long timeout ( ) ; 
 long slowTimeout ( ) ; 
 
 @ @ - 29 , 6 + 29 , 7 @ @ public interface Monitorable 
 boolean isAborted ( ) ; 
 boolean isCompleted ( ) ; 
 boolean isSlow ( ) ; 
 + boolean isCrossNode ( ) ; 
 
 boolean abort ( ) ; 
 boolean complete ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / monitoring / MonitorableImpl . java b / src / java / org / apache / cassandra / db / monitoring / MonitorableImpl . java 
 index 7363e10 . . 48c8152 100644 
 - - - a / src / java / org / apache / cassandra / db / monitoring / MonitorableImpl . java 
 + + + b / src / java / org / apache / cassandra / db / monitoring / MonitorableImpl . java 
 @ @ - 22 , 9 + 22 , 10 @ @ public abstract class MonitorableImpl implements Monitorable 
 { 
 private MonitoringState state ; 
 private boolean isSlow ; 
 - private ConstructionTime constructionTime ; 
 + private long constructionTime = - 1 ; 
 private long timeout ; 
 private long slowTimeout ; 
 + private boolean isCrossNode ; 
 
 protected MonitorableImpl ( ) 
 { 
 @ @ - 37 , 14 + 38 , 16 @ @ public abstract class MonitorableImpl implements Monitorable 
 * is too complex , it would require passing new parameters to all serializers 
 * or specializing the serializers to accept these message properties . 
 * / 
 - public void setMonitoringTime ( ConstructionTime constructionTime , long timeout , long slowTimeout ) 
 + public void setMonitoringTime ( long constructionTime , boolean isCrossNode , long timeout , long slowTimeout ) 
 { 
 + assert constructionTime > = 0 ; 
 this . constructionTime = constructionTime ; 
 + this . isCrossNode = isCrossNode ; 
 this . timeout = timeout ; 
 this . slowTimeout = slowTimeout ; 
 } 
 
 - public ConstructionTime constructionTime ( ) 
 + public long constructionTime ( ) 
 { 
 return constructionTime ; 
 } 
 @ @ - 54 , 6 + 57 , 11 @ @ public abstract class MonitorableImpl implements Monitorable 
 return timeout ; 
 } 
 
 + public boolean isCrossNode ( ) 
 + { 
 + return isCrossNode ; 
 + } 
 + 
 public long slowTimeout ( ) 
 { 
 return slowTimeout ; 
 @ @ - 87 , 7 + 95 , 7 @ @ public abstract class MonitorableImpl implements Monitorable 
 { 
 if ( state = = MonitoringState . IN _ PROGRESS ) 
 { 
 - if ( constructionTime ! = null ) 
 + if ( constructionTime > = 0 ) 
 MonitoringTask . addFailedOperation ( this , ApproximateTime . currentTimeMillis ( ) ) ; 
 
 state = MonitoringState . ABORTED ; 
 @ @ - 101 , 7 + 109 , 7 @ @ public abstract class MonitorableImpl implements Monitorable 
 { 
 if ( state = = MonitoringState . IN _ PROGRESS ) 
 { 
 - if ( isSlow & & slowTimeout > 0 & & constructionTime ! = null ) 
 + if ( isSlow & & slowTimeout > 0 & & constructionTime > = 0 ) 
 MonitoringTask . addSlowOperation ( this , ApproximateTime . currentTimeMillis ( ) ) ; 
 
 state = MonitoringState . COMPLETED ; 
 @ @ - 113 , 10 + 121 , 10 @ @ public abstract class MonitorableImpl implements Monitorable 
 
 private void check ( ) 
 { 
 - if ( constructionTime = = null | | state ! = MonitoringState . IN _ PROGRESS ) 
 + if ( constructionTime < 0 | | state ! = MonitoringState . IN _ PROGRESS ) 
 return ; 
 
 - long elapsed = ApproximateTime . currentTimeMillis ( ) - constructionTime . timestamp ; 
 + long elapsed = ApproximateTime . currentTimeMillis ( ) - constructionTime ; 
 
 if ( elapsed > = slowTimeout & & ! isSlow ) 
 isSlow = true ; 
 diff - - git a / src / java / org / apache / cassandra / db / monitoring / MonitoringTask . java b / src / java / org / apache / cassandra / db / monitoring / MonitoringTask . java 
 index b116485 . . 9426042 100644 
 - - - a / src / java / org / apache / cassandra / db / monitoring / MonitoringTask . java 
 + + + b / src / java / org / apache / cassandra / db / monitoring / MonitoringTask . java 
 @ @ - 330 , 7 + 330 , 7 @ @ class MonitoringTask 
 { 
 this . operation = operation ; 
 numTimesReported = 1 ; 
 - totalTime = failedAt - operation . constructionTime ( ) . timestamp ; 
 + totalTime = failedAt - operation . constructionTime ( ) ; 
 minTime = totalTime ; 
 maxTime = totalTime ; 
 } 
 @ @ - 370 , 7 + 370 , 7 @ @ class MonitoringTask 
 name ( ) , 
 totalTime , 
 operation . timeout ( ) , 
 - operation . constructionTime ( ) . isCrossNode ? " msec / cross - node " : " msec " ) ; 
 + operation . isCrossNode ( ) ? " msec / cross - node " : " msec " ) ; 
 else 
 return String . format ( " < % s > timed out % d times , avg / min / max % d / % d / % d msec , timeout % d % s " , 
 name ( ) , 
 @ @ - 379 , 7 + 379 , 7 @ @ class MonitoringTask 
 minTime , 
 maxTime , 
 operation . timeout ( ) , 
 - operation . constructionTime ( ) . isCrossNode ? " msec / cross - node " : " msec " ) ; 
 + operation . isCrossNode ( ) ? " msec / cross - node " : " msec " ) ; 
 } 
 } 
 
 @ @ - 400 , 7 + 400 , 7 @ @ class MonitoringTask 
 name ( ) , 
 totalTime , 
 operation . slowTimeout ( ) , 
 - operation . constructionTime ( ) . isCrossNode ? " msec / cross - node " : " msec " ) ; 
 + operation . isCrossNode ( ) ? " msec / cross - node " : " msec " ) ; 
 else 
 return String . format ( " < % s > , was slow % d times : avg / min / max % d / % d / % d msec - slow timeout % d % s " , 
 name ( ) , 
 @ @ - 409 , 7 + 409 , 7 @ @ class MonitoringTask 
 minTime , 
 maxTime , 
 operation . slowTimeout ( ) , 
 - operation . constructionTime ( ) . isCrossNode ? " msec / cross - node " : " msec " ) ; 
 + operation . isCrossNode ( ) ? " msec / cross - node " : " msec " ) ; 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java 
 index cd80e00 . . 7d3c607 100644 
 - - - a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java 
 + + + b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java 
 @ @ - 188 , 7 + 188 , 7 @ @ public class IncomingTcpConnection extends FastThreadLocalThread implements Clos 
 else 
 id = input . readInt ( ) ; 
 
 - MessageIn message = MessageIn . read ( input , version , id , MessageIn . readTimestamp ( from , input , System . currentTimeMillis ( ) ) ) ; 
 + MessageIn message = MessageIn . read ( input , version , id , MessageIn . readConstructionTime ( from , input ) ) ; 
 if ( message = = null ) 
 { 
 / / callback expired ; nothing to do 
 diff - - git a / src / java / org / apache / cassandra / net / MessageDeliveryTask . java b / src / java / org / apache / cassandra / net / MessageDeliveryTask . java 
 index c97a98f . . c91e9da 100644 
 - - - a / src / java / org / apache / cassandra / net / MessageDeliveryTask . java 
 + + + b / src / java / org / apache / cassandra / net / MessageDeliveryTask . java 
 @ @ - 46 , 7 + 46 , 7 @ @ public class MessageDeliveryTask implements Runnable 
 public void run ( ) 
 { 
 MessagingService . Verb verb = message . verb ; 
 - long timeTaken = System . currentTimeMillis ( ) - message . constructionTime . timestamp ; 
 + long timeTaken = message . getLifetimeInMS ( ) ; 
 if ( MessagingService . DROPPABLE _ VERBS . contains ( verb ) 
 & & timeTaken > message . getTimeout ( ) ) 
 { 
 @ @ - 82 , 7 + 82 , 7 @ @ public class MessageDeliveryTask implements Runnable 
 } 
 
 if ( GOSSIP _ VERBS . contains ( message . verb ) ) 
 - Gossiper . instance . setLastProcessedMessageAt ( message . constructionTime . timestamp ) ; 
 + Gossiper . instance . setLastProcessedMessageAt ( message . constructionTime ) ; 
 } 
 
 private void handleFailure ( Throwable t ) 
 diff - - git a / src / java / org / apache / cassandra / net / MessageIn . java b / src / java / org / apache / cassandra / net / MessageIn . java 
 index 0562df6 . . a254741 100644 
 - - - a / src / java / org / apache / cassandra / net / MessageIn . java 
 + + + b / src / java / org / apache / cassandra / net / MessageIn . java 
 @ @ - 26 , 7 + 26 , 7 @ @ import com . google . common . collect . ImmutableMap ; 
 
 import org . apache . cassandra . concurrent . Stage ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 - import org . apache . cassandra . db . monitoring . ConstructionTime ; 
 + import org . apache . cassandra . db . monitoring . ApproximateTime ; 
 import org . apache . cassandra . exceptions . RequestFailureReason ; 
 import org . apache . cassandra . io . IVersionedSerializer ; 
 import org . apache . cassandra . io . util . DataInputBuffer ; 
 @ @ - 39 , 14 + 39 , 14 @ @ public class MessageIn < T > 
 public final Map < String , byte [ ] > parameters ; 
 public final MessagingService . Verb verb ; 
 public final int version ; 
 - public final ConstructionTime constructionTime ; 
 + public final long constructionTime ; 
 
 private MessageIn ( InetAddress from , 
 T payload , 
 Map < String , byte [ ] > parameters , 
 MessagingService . Verb verb , 
 int version , 
 - ConstructionTime constructionTime ) 
 + long constructionTime ) 
 { 
 this . from = from ; 
 this . payload = payload ; 
 @ @ - 61 , 17 + 61 , 26 @ @ public class MessageIn < T > 
 Map < String , byte [ ] > parameters , 
 MessagingService . Verb verb , 
 int version , 
 - ConstructionTime constructionTime ) 
 + long constructionTime ) 
 { 
 return new MessageIn < > ( from , payload , parameters , verb , version , constructionTime ) ; 
 } 
 
 + public static < T > MessageIn < T > create ( InetAddress from , 
 + T payload , 
 + Map < String , byte [ ] > parameters , 
 + MessagingService . Verb verb , 
 + int version ) 
 + { 
 + return new MessageIn < > ( from , payload , parameters , verb , version , ApproximateTime . currentTimeMillis ( ) ) ; 
 + } 
 + 
 public static < T2 > MessageIn < T2 > read ( DataInputPlus in , int version , int id ) throws IOException 
 { 
 - return read ( in , version , id , new ConstructionTime ( ) ) ; 
 + return read ( in , version , id , ApproximateTime . currentTimeMillis ( ) ) ; 
 } 
 
 - public static < T2 > MessageIn < T2 > read ( DataInputPlus in , int version , int id , ConstructionTime constructionTime ) throws IOException 
 + public static < T2 > MessageIn < T2 > read ( DataInputPlus in , int version , int id , long constructionTime ) throws IOException 
 { 
 InetAddress from = CompactEndpointSerializationHelper . deserialize ( in ) ; 
 
 @ @ - 115 , 28 + 124 , 42 @ @ public class MessageIn < T > 
 return MessageIn . create ( from , payload , parameters , verb , version , constructionTime ) ; 
 } 
 
 - public static ConstructionTime createTimestamp ( ) 
 + public static long readConstructionTime ( InetAddress from , DataInputPlus input ) throws IOException 
 { 
 - return new ConstructionTime ( ) ; 
 + long currentTime = ApproximateTime . currentTimeMillis ( ) ; 
 + 
 + / / Reconstruct the message construction time sent by the remote host ( we sent only the lower 4 bytes , assuming the 
 + / / higher 4 bytes wouldn ' t change between the sender and receiver ) 
 + int partial = input . readInt ( ) ; / / make sure to readInt , even if cross _ node _ to is not enabled 
 + long sentConstructionTime = ( currentTime & 0xFFFFFFFF00000000L ) | ( ( ( partial & 0xFFFFFFFFL ) < < 2 ) > > 2 ) ; 
 + 
 + / / Because nodes may not have their clock perfectly in sync , it ' s actually possible the sentConstructionTime is 
 + / / later than the currentTime ( the received time ) . If that ' s the case , as we definitively know there is a lack 
 + / / of proper synchronziation of the clock , we ignore sentConstructionTime . We also ignore that 
 + / / sentConstructionTime if we ' re told to . 
 + long elapsed = currentTime - sentConstructionTime ; 
 + if ( elapsed > 0 ) 
 + MessagingService . instance ( ) . metrics . addTimeTaken ( from , elapsed ) ; 
 + 
 + boolean useSentTime = DatabaseDescriptor . hasCrossNodeTimeout ( ) & & elapsed > 0 ; 
 + return useSentTime ? sentConstructionTime : currentTime ; 
 } 
 
 - public static ConstructionTime readTimestamp ( InetAddress from , DataInputPlus input , long timestamp ) throws IOException 
 + / * * 
 + * Since how long ( in milliseconds ) the message has lived . 
 + * / 
 + public long getLifetimeInMS ( ) 
 { 
 - / / make sure to readInt , even if cross _ node _ to is not enabled 
 - int partial = input . readInt ( ) ; 
 - long crossNodeTimestamp = ( timestamp & 0xFFFFFFFF00000000L ) | ( ( ( partial & 0xFFFFFFFFL ) < < 2 ) > > 2 ) ; 
 - if ( timestamp > crossNodeTimestamp ) 
 - { 
 - MessagingService . instance ( ) . metrics . addTimeTaken ( from , timestamp - crossNodeTimestamp ) ; 
 - } 
 - if ( DatabaseDescriptor . hasCrossNodeTimeout ( ) ) 
 - { 
 - return new ConstructionTime ( crossNodeTimestamp , timestamp ! = crossNodeTimestamp ) ; 
 - } 
 - else 
 - { 
 - return new ConstructionTime ( ) ; 
 - } 
 + return ApproximateTime . currentTimeMillis ( ) - constructionTime ; 
 + } 
 + 
 + / * * 
 + * Whether the message has crossed the node boundary , that is whether it originated from another node . 
 + * 
 + * / 
 + public boolean isCrossNode ( ) 
 + { 
 + return ! from . equals ( DatabaseDescriptor . getBroadcastAddress ( ) ) ; 
 } 
 
 public Stage getMessageType ( ) 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index ba40a58 . . f82e80b 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 426 , 14 + 426 , 14 @ @ public final class MessagingService implements MessagingServiceMBean 
 private static final class DroppedMessages 
 { 
 final DroppedMessageMetrics metrics ; 
 - final AtomicInteger droppedInternalTimeout ; 
 - final AtomicInteger droppedCrossNodeTimeout ; 
 + final AtomicInteger droppedInternal ; 
 + final AtomicInteger droppedCrossNode ; 
 
 DroppedMessages ( Verb verb ) 
 { 
 this . metrics = new DroppedMessageMetrics ( verb ) ; 
 - this . droppedInternalTimeout = new AtomicInteger ( 0 ) ; 
 - this . droppedCrossNodeTimeout = new AtomicInteger ( 0 ) ; 
 + this . droppedInternal = new AtomicInteger ( 0 ) ; 
 + this . droppedCrossNode = new AtomicInteger ( 0 ) ; 
 } 
 
 } 
 @ @ - 1160 , 19 + 1160 , 19 @ @ public final class MessagingService implements MessagingServiceMBean 
 { 
 updateDroppedMutationCount ( ( IMutation ) message . payload ) ; 
 } 
 - incrementDroppedMessages ( message . verb , timeTaken , message . constructionTime . isCrossNode ) ; 
 + incrementDroppedMessages ( message . verb , timeTaken , message . isCrossNode ( ) ) ; 
 } 
 
 - public void incrementDroppedMessages ( Verb verb , long timeTaken , boolean isCrossNodeTimeout ) 
 + public void incrementDroppedMessages ( Verb verb , long timeTaken , boolean isCrossNode ) 
 { 
 assert DROPPABLE _ VERBS . contains ( verb ) : " Verb " + verb + " should not legally be dropped " ; 
 - incrementDroppedMessages ( droppedMessagesMap . get ( verb ) , timeTaken , isCrossNodeTimeout ) ; 
 + incrementDroppedMessages ( droppedMessagesMap . get ( verb ) , timeTaken , isCrossNode ) ; 
 } 
 
 - public void incrementDroppedMessages ( Verb verb , boolean isCrossNodeTimeout ) 
 + public void incrementDroppedMessages ( Verb verb , boolean isCrossNode ) 
 { 
 assert DROPPABLE _ VERBS . contains ( verb ) : " Verb " + verb + " should not legally be dropped " ; 
 - incrementDroppedMessages ( droppedMessagesMap . get ( verb ) , isCrossNodeTimeout ) ; 
 + incrementDroppedMessages ( droppedMessagesMap . get ( verb ) , isCrossNode ) ; 
 } 
 
 private void updateDroppedMutationCount ( IMutation mutation ) 
 @ @ - 1189 , 22 + 1189 , 22 @ @ public final class MessagingService implements MessagingServiceMBean 
 } 
 } 
 
 - private void incrementDroppedMessages ( DroppedMessages droppedMessages , long timeTaken , boolean isCrossNodeTimeout ) 
 + private void incrementDroppedMessages ( DroppedMessages droppedMessages , long timeTaken , boolean isCrossNode ) 
 { 
 - if ( isCrossNodeTimeout ) 
 + if ( isCrossNode ) 
 droppedMessages . metrics . crossNodeDroppedLatency . update ( timeTaken , TimeUnit . MILLISECONDS ) ; 
 else 
 droppedMessages . metrics . internalDroppedLatency . update ( timeTaken , TimeUnit . MILLISECONDS ) ; 
 - incrementDroppedMessages ( droppedMessages , isCrossNodeTimeout ) ; 
 + incrementDroppedMessages ( droppedMessages , isCrossNode ) ; 
 } 
 
 - private void incrementDroppedMessages ( DroppedMessages droppedMessages , boolean isCrossNodeTimeout ) 
 + private void incrementDroppedMessages ( DroppedMessages droppedMessages , boolean isCrossNode ) 
 { 
 droppedMessages . metrics . dropped . mark ( ) ; 
 - if ( isCrossNodeTimeout ) 
 - droppedMessages . droppedCrossNodeTimeout . incrementAndGet ( ) ; 
 + if ( isCrossNode ) 
 + droppedMessages . droppedCrossNode . incrementAndGet ( ) ; 
 else 
 - droppedMessages . droppedInternalTimeout . incrementAndGet ( ) ; 
 + droppedMessages . droppedInternal . incrementAndGet ( ) ; 
 } 
 
 private void logDroppedMessages ( ) 
 @ @ - 1226 , 16 + 1226 , 16 @ @ public final class MessagingService implements MessagingServiceMBean 
 Verb verb = entry . getKey ( ) ; 
 DroppedMessages droppedMessages = entry . getValue ( ) ; 
 
 - int droppedInternalTimeout = droppedMessages . droppedInternalTimeout . getAndSet ( 0 ) ; 
 - int droppedCrossNodeTimeout = droppedMessages . droppedCrossNodeTimeout . getAndSet ( 0 ) ; 
 - if ( droppedInternalTimeout > 0 | | droppedCrossNodeTimeout > 0 ) 
 + int droppedInternal = droppedMessages . droppedInternal . getAndSet ( 0 ) ; 
 + int droppedCrossNode = droppedMessages . droppedCrossNode . getAndSet ( 0 ) ; 
 + if ( droppedInternal > 0 | | droppedCrossNode > 0 ) 
 { 
 - ret . add ( String . format ( " % s messages were dropped in last % d ms : % d for internal timeout and % d for cross node timeout . " 
 + ret . add ( String . format ( " % s messages were dropped in last % d ms : % d internal and % d cross node . " 
 + " Mean internal dropped latency : % d ms and Mean cross - node dropped latency : % d ms " , 
 verb , 
 LOG _ DROPPED _ INTERVAL _ IN _ MS , 
 - droppedInternalTimeout , 
 - droppedCrossNodeTimeout , 
 + droppedInternal , 
 + droppedCrossNode , 
 TimeUnit . NANOSECONDS . toMillis ( ( long ) droppedMessages . metrics . internalDroppedLatency . getSnapshot ( ) . getMean ( ) ) , 
 TimeUnit . NANOSECONDS . toMillis ( ( long ) droppedMessages . metrics . crossNodeDroppedLatency . getSnapshot ( ) . getMean ( ) ) ) ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / ReadCallback . java b / src / java / org / apache / cassandra / service / ReadCallback . java 
 index b5cb477 . . 11c0b12 100644 
 - - - a / src / java / org / apache / cassandra / service / ReadCallback . java 
 + + + b / src / java / org / apache / cassandra / service / ReadCallback . java 
 @ @ - 198 , 8 + 198 , 7 @ @ public class ReadCallback implements IAsyncCallbackWithFailure < ReadResponse > 
 result , 
 Collections . < String , byte [ ] > emptyMap ( ) , 
 MessagingService . Verb . INTERNAL _ RESPONSE , 
 - MessagingService . current _ version , 
 - MessageIn . createTimestamp ( ) ) ; 
 + MessagingService . current _ version ) ; 
 response ( message ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index 529e4e3 . . e0be68c 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 52 , 7 + 52 , 6 @ @ import org . apache . cassandra . config . SchemaConstants ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . filter . DataLimits ; 
 import org . apache . cassandra . db . filter . TombstoneOverwhelmingException ; 
 - import org . apache . cassandra . db . monitoring . ConstructionTime ; 
 import org . apache . cassandra . db . partitions . * ; 
 import org . apache . cassandra . db . rows . RowIterator ; 
 import org . apache . cassandra . db . view . ViewUtils ; 
 @ @ - 1876 , 7 + 1875 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 { 
 try 
 { 
 - command . setMonitoringTime ( new ConstructionTime ( constructionTime ) , verb . getTimeout ( ) , DatabaseDescriptor . getSlowQueryTimeout ( ) ) ; 
 + command . setMonitoringTime ( constructionTime , false , verb . getTimeout ( ) , DatabaseDescriptor . getSlowQueryTimeout ( ) ) ; 
 
 ReadResponse response ; 
 try ( ReadExecutionController executionController = command . executionController ( ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / monitoring / MonitoringTaskTest . java b / test / unit / org / apache / cassandra / db / monitoring / MonitoringTaskTest . java 
 index 14659e3 . . acc988f 100644 
 - - - a / test / unit / org / apache / cassandra / db / monitoring / MonitoringTaskTest . java 
 + + + b / test / unit / org / apache / cassandra / db / monitoring / MonitoringTaskTest . java 
 @ @ - 65 , 10 + 65 , 10 @ @ public class MonitoringTaskTest 
 { 
 private final String name ; 
 
 - TestMonitor ( String name , ConstructionTime constructionTime , long timeout , long slow ) 
 + TestMonitor ( String name , long timestamp , boolean isCrossNode , long timeout , long slow ) 
 { 
 this . name = name ; 
 - setMonitoringTime ( constructionTime , timeout , slow ) ; 
 + setMonitoringTime ( timestamp , isCrossNode , timeout , slow ) ; 
 } 
 
 public String name ( ) 
 @ @ - 124 , 7 + 124 , 7 @ @ public class MonitoringTaskTest 
 @ Test 
 public void testAbort ( ) throws InterruptedException 
 { 
 - Monitorable operation = new TestMonitor ( " Test abort " , new ConstructionTime ( System . currentTimeMillis ( ) ) , timeout , slowTimeout ) ; 
 + Monitorable operation = new TestMonitor ( " Test abort " , System . currentTimeMillis ( ) , false , timeout , slowTimeout ) ; 
 waitForOperationsToComplete ( operation ) ; 
 
 assertTrue ( operation . isAborted ( ) ) ; 
 @ @ - 135 , 7 + 135 , 7 @ @ public class MonitoringTaskTest 
 @ Test 
 public void testAbortIdemPotent ( ) throws InterruptedException 
 { 
 - Monitorable operation = new TestMonitor ( " Test abort " , new ConstructionTime ( System . currentTimeMillis ( ) ) , timeout , slowTimeout ) ; 
 + Monitorable operation = new TestMonitor ( " Test abort " , System . currentTimeMillis ( ) , false , timeout , slowTimeout ) ; 
 waitForOperationsToComplete ( operation ) ; 
 
 assertTrue ( operation . abort ( ) ) ; 
 @ @ - 148 , 7 + 148 , 7 @ @ public class MonitoringTaskTest 
 @ Test 
 public void testAbortCrossNode ( ) throws InterruptedException 
 { 
 - Monitorable operation = new TestMonitor ( " Test for cross node " , new ConstructionTime ( System . currentTimeMillis ( ) , true ) , timeout , slowTimeout ) ; 
 + Monitorable operation = new TestMonitor ( " Test for cross node " , System . currentTimeMillis ( ) , true , timeout , slowTimeout ) ; 
 waitForOperationsToComplete ( operation ) ; 
 
 assertTrue ( operation . isAborted ( ) ) ; 
 @ @ - 159 , 7 + 159 , 7 @ @ public class MonitoringTaskTest 
 @ Test 
 public void testComplete ( ) throws InterruptedException 
 { 
 - Monitorable operation = new TestMonitor ( " Test complete " , new ConstructionTime ( System . currentTimeMillis ( ) ) , timeout , slowTimeout ) ; 
 + Monitorable operation = new TestMonitor ( " Test complete " , System . currentTimeMillis ( ) , false , timeout , slowTimeout ) ; 
 operation . complete ( ) ; 
 waitForOperationsToComplete ( operation ) ; 
 
 @ @ - 171 , 7 + 171 , 7 @ @ public class MonitoringTaskTest 
 @ Test 
 public void testCompleteIdemPotent ( ) throws InterruptedException 
 { 
 - Monitorable operation = new TestMonitor ( " Test complete " , new ConstructionTime ( System . currentTimeMillis ( ) ) , timeout , slowTimeout ) ; 
 + Monitorable operation = new TestMonitor ( " Test complete " , System . currentTimeMillis ( ) , false , timeout , slowTimeout ) ; 
 operation . complete ( ) ; 
 waitForOperationsToComplete ( operation ) ; 
 
 @ @ - 185 , 7 + 185 , 7 @ @ public class MonitoringTaskTest 
 @ Test 
 public void testReportSlow ( ) throws InterruptedException 
 { 
 - Monitorable operation = new TestMonitor ( " Test report slow " , new ConstructionTime ( System . currentTimeMillis ( ) ) , timeout , slowTimeout ) ; 
 + Monitorable operation = new TestMonitor ( " Test report slow " , System . currentTimeMillis ( ) , false , timeout , slowTimeout ) ; 
 waitForOperationsToBeReportedAsSlow ( operation ) ; 
 
 assertTrue ( operation . isSlow ( ) ) ; 
 @ @ - 199 , 7 + 199 , 7 @ @ public class MonitoringTaskTest 
 public void testNoReportSlowIfZeroSlowTimeout ( ) throws InterruptedException 
 { 
 / / when the slow timeout is set to zero then operation won ' t be reported as slow 
 - Monitorable operation = new TestMonitor ( " Test report slow disabled " , new ConstructionTime ( System . currentTimeMillis ( ) ) , timeout , 0 ) ; 
 + Monitorable operation = new TestMonitor ( " Test report slow disabled " , System . currentTimeMillis ( ) , false , timeout , 0 ) ; 
 waitForOperationsToBeReportedAsSlow ( operation ) ; 
 
 assertTrue ( operation . isSlow ( ) ) ; 
 @ @ - 212 , 7 + 212 , 7 @ @ public class MonitoringTaskTest 
 @ Test 
 public void testReport ( ) throws InterruptedException 
 { 
 - Monitorable operation = new TestMonitor ( " Test report " , new ConstructionTime ( System . currentTimeMillis ( ) ) , timeout , slowTimeout ) ; 
 + Monitorable operation = new TestMonitor ( " Test report " , System . currentTimeMillis ( ) , false , timeout , slowTimeout ) ; 
 waitForOperationsToComplete ( operation ) ; 
 
 assertTrue ( operation . isSlow ( ) ) ; 
 @ @ - 233 , 13 + 233 , 13 @ @ public class MonitoringTaskTest 
 MonitoringTask . instance = MonitoringTask . make ( 10 , - 1 ) ; 
 try 
 { 
 - Monitorable operation1 = new TestMonitor ( " Test report 1 " , new ConstructionTime ( System . currentTimeMillis ( ) ) , timeout , slowTimeout ) ; 
 + Monitorable operation1 = new TestMonitor ( " Test report 1 " , System . currentTimeMillis ( ) , false , timeout , slowTimeout ) ; 
 waitForOperationsToComplete ( operation1 ) ; 
 
 assertTrue ( operation1 . isAborted ( ) ) ; 
 assertFalse ( operation1 . isCompleted ( ) ) ; 
 
 - Monitorable operation2 = new TestMonitor ( " Test report 2 " , new ConstructionTime ( System . currentTimeMillis ( ) ) , timeout , slowTimeout ) ; 
 + Monitorable operation2 = new TestMonitor ( " Test report 2 " , System . currentTimeMillis ( ) , false , timeout , slowTimeout ) ; 
 waitForOperationsToBeReportedAsSlow ( operation2 ) ; 
 
 operation2 . complete ( ) ; 
 @ @ - 266 , 7 + 266 , 7 @ @ public class MonitoringTaskTest 
 for ( int i = 0 ; i < opCount ; i + + ) 
 { 
 executorService . submit ( ( ) - > 
 - operations . add ( new TestMonitor ( UUID . randomUUID ( ) . toString ( ) , new ConstructionTime ( ) , timeout , slowTimeout ) ) 
 + operations . add ( new TestMonitor ( UUID . randomUUID ( ) . toString ( ) , System . currentTimeMillis ( ) , false , timeout , slowTimeout ) ) 
 ) ; 
 } 
 
 @ @ - 311 , 13 + 311 , 17 @ @ public class MonitoringTaskTest 
 for ( int j = 0 ; j < numTimes ; j + + ) 
 { 
 Monitorable operation1 = new TestMonitor ( operationName , 
 - new ConstructionTime ( System . currentTimeMillis ( ) ) , 
 - timeout , slowTimeout ) ; 
 + System . currentTimeMillis ( ) , 
 + false , 
 + timeout , 
 + slowTimeout ) ; 
 waitForOperationsToComplete ( operation1 ) ; 
 
 Monitorable operation2 = new TestMonitor ( operationName , 
 - new ConstructionTime ( System . currentTimeMillis ( ) ) , 
 - timeout , slowTimeout ) ; 
 + System . currentTimeMillis ( ) , 
 + false , 
 + timeout , 
 + slowTimeout ) ; 
 waitForOperationsToBeReportedAsSlow ( operation2 ) ; 
 operation2 . complete ( ) ; 
 } 
 @ @ - 362 , 8 + 366 , 10 @ @ public class MonitoringTaskTest 
 try 
 { 
 Monitorable operation = new TestMonitor ( " Test testMultipleThreadsSameName failed " , 
 - new ConstructionTime ( System . currentTimeMillis ( ) ) , 
 - timeout , slowTimeout ) ; 
 + System . currentTimeMillis ( ) , 
 + false , 
 + timeout , 
 + slowTimeout ) ; 
 operations . add ( operation ) ; 
 } 
 finally 
 @ @ - 394 , 8 + 400 , 10 @ @ public class MonitoringTaskTest 
 try 
 { 
 Monitorable operation = new TestMonitor ( " Test testMultipleThreadsSameName slow " , 
 - new ConstructionTime ( System . currentTimeMillis ( ) ) , 
 - timeout , slowTimeout ) ; 
 + System . currentTimeMillis ( ) , 
 + false , 
 + timeout , 
 + slowTimeout ) ; 
 operations . add ( operation ) ; 
 } 
 finally 
 @ @ - 428 , 8 + 436 , 10 @ @ public class MonitoringTaskTest 
 try 
 { 
 Monitorable operation = new TestMonitor ( " Test thread " + Thread . currentThread ( ) . getName ( ) , 
 - new ConstructionTime ( System . currentTimeMillis ( ) ) , 
 - timeout , slowTimeout ) ; 
 + System . currentTimeMillis ( ) , 
 + false , 
 + timeout , 
 + slowTimeout ) ; 
 operations . add ( operation ) ; 
 operation . complete ( ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / hints / HintTest . java b / test / unit / org / apache / cassandra / hints / HintTest . java 
 index 4cc2188 . . e4a33fd 100644 
 - - - a / test / unit / org / apache / cassandra / hints / HintTest . java 
 + + + b / test / unit / org / apache / cassandra / hints / HintTest . java 
 @ @ - 232 , 7 + 232 , 7 @ @ public class HintTest 
 / / Process hint message . 
 HintMessage message = new HintMessage ( localId , hint ) ; 
 MessagingService . instance ( ) . getVerbHandler ( MessagingService . Verb . HINT ) . doVerb ( 
 - MessageIn . create ( local , message , Collections . emptyMap ( ) , MessagingService . Verb . HINT , MessagingService . current _ version , MessageIn . createTimestamp ( ) ) , 
 + MessageIn . create ( local , message , Collections . emptyMap ( ) , MessagingService . Verb . HINT , MessagingService . current _ version ) , 
 - 1 ) ; 
 
 / / hint should not be applied as we no longer are a replica 
 @ @ - 277 , 7 + 277 , 7 @ @ public class HintTest 
 / / Process hint message . 
 HintMessage message = new HintMessage ( localId , hint ) ; 
 MessagingService . instance ( ) . getVerbHandler ( MessagingService . Verb . HINT ) . doVerb ( 
 - MessageIn . create ( local , message , Collections . emptyMap ( ) , MessagingService . Verb . HINT , MessagingService . current _ version , MessageIn . createTimestamp ( ) ) , 
 + MessageIn . create ( local , message , Collections . emptyMap ( ) , MessagingService . Verb . HINT , MessagingService . current _ version ) , 
 - 1 ) ; 
 
 / / hint should not be applied as we no longer are a replica 
 diff - - git a / test / unit / org / apache / cassandra / hints / HintsServiceTest . java b / test / unit / org / apache / cassandra / hints / HintsServiceTest . java 
 index ffb7f73 . . 077a9d1 100644 
 - - - a / test / unit / org / apache / cassandra / hints / HintsServiceTest . java 
 + + + b / test / unit / org / apache / cassandra / hints / HintsServiceTest . java 
 @ @ - 184 , 8 + 184 , 7 @ @ public class HintsServiceTest 
 HintResponse . instance , 
 Collections . emptyMap ( ) , 
 MessagingService . Verb . REQUEST _ RESPONSE , 
 - MessagingService . current _ version , 
 - MessageIn . createTimestamp ( ) ) ; 
 + MessagingService . current _ version ) ; 
 
 MockMessagingSpy spy ; 
 if ( noOfResponses ! = - 1 ) 
 diff - - git a / test / unit / org / apache / cassandra / net / MatcherResponse . java b / test / unit / org / apache / cassandra / net / MatcherResponse . java 
 index c8984eb . . 21a75c9 100644 
 - - - a / test / unit / org / apache / cassandra / net / MatcherResponse . java 
 + + + b / test / unit / org / apache / cassandra / net / MatcherResponse . java 
 @ @ - 106 , 7 + 106 , 7 @ @ public class MatcherResponse 
 if ( payload = = null ) 
 return null ; 
 else 
 - return MessageIn . create ( to , payload , Collections . emptyMap ( ) , verb , MessagingService . current _ version , MessageIn . createTimestamp ( ) ) ; 
 + return MessageIn . create ( to , payload , Collections . emptyMap ( ) , verb , MessagingService . current _ version ) ; 
 } , 
 limit ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / net / MessagingServiceTest . java b / test / unit / org / apache / cassandra / net / MessagingServiceTest . java 
 index 2a3ecbe . . ec27b7e 100644 
 - - - a / test / unit / org / apache / cassandra / net / MessagingServiceTest . java 
 + + + b / test / unit / org / apache / cassandra / net / MessagingServiceTest . java 
 @ @ - 82 , 8 + 82 , 8 @ @ public class MessagingServiceTest 
 
 List < String > logs = messagingService . getDroppedMessagesLogs ( ) ; 
 assertEquals ( 1 , logs . size ( ) ) ; 
 - assertEquals ( " READ messages were dropped in last 5000 ms : 2500 for internal timeout and 2500 for cross node timeout . Mean internal dropped latency : 2730 ms and Mean cross - node dropped latency : 2731 ms " , logs . get ( 0 ) ) ; 
 - assertEquals ( 5000 , ( int ) messagingService . getDroppedMessages ( ) . get ( verb . toString ( ) ) ) ; 
 + assertEquals ( " READ messages were dropped in last 5000 ms : 2500 internal and 2500 cross node . Mean internal dropped latency : 2730 ms and Mean cross - node dropped latency : 2731 ms " , logs . get ( 0 ) ) ; 
 + assertEquals ( 5000 , ( int ) messagingService . getDroppedMessages ( ) . get ( verb . toString ( ) ) ) ; 
 
 logs = messagingService . getDroppedMessagesLogs ( ) ; 
 assertEquals ( 0 , logs . size ( ) ) ; 
 @ @ - 92 , 8 + 92 , 8 @ @ public class MessagingServiceTest 
 messagingService . incrementDroppedMessages ( verb , i , i % 2 = = 0 ) ; 
 
 logs = messagingService . getDroppedMessagesLogs ( ) ; 
 - assertEquals ( " READ messages were dropped in last 5000 ms : 1250 for internal timeout and 1250 for cross node timeout . Mean internal dropped latency : 2277 ms and Mean cross - node dropped latency : 2278 ms " , logs . get ( 0 ) ) ; 
 - assertEquals ( 7500 , ( int ) messagingService . getDroppedMessages ( ) . get ( verb . toString ( ) ) ) ; 
 + assertEquals ( " READ messages were dropped in last 5000 ms : 1250 internal and 1250 cross node . Mean internal dropped latency : 2277 ms and Mean cross - node dropped latency : 2278 ms " , logs . get ( 0 ) ) ; 
 + assertEquals ( 7500 , ( int ) messagingService . getDroppedMessages ( ) . get ( verb . toString ( ) ) ) ; 
 } 
 
 @ Test 
 @ @ - 108 , 7 + 108 , 7 @ @ public class MessagingServiceTest 
 long sentAt = now - latency ; 
 
 assertNull ( dcLatency . get ( " datacenter1 " ) ) ; 
 - addDCLatency ( sentAt , now ) ; 
 + addDCLatency ( sentAt ) ; 
 assertNotNull ( dcLatency . get ( " datacenter1 " ) ) ; 
 assertEquals ( 1 , dcLatency . get ( " datacenter1 " ) . getCount ( ) ) ; 
 long expectedBucket = bucketOffsets [ Math . abs ( Arrays . binarySearch ( bucketOffsets , TimeUnit . MILLISECONDS . toNanos ( latency ) ) ) - 1 ] ; 
 @ @ - 128 , 7 + 128 , 7 @ @ public class MessagingServiceTest 
 long sentAt = now - latency ; 
 
 assertNull ( dcLatency . get ( " datacenter1 " ) ) ; 
 - addDCLatency ( sentAt , now ) ; 
 + addDCLatency ( sentAt ) ; 
 assertNull ( dcLatency . get ( " datacenter1 " ) ) ; 
 } 
 
 @ @ - 221 , 7 + 221 , 7 @ @ public class MessagingServiceTest 
 assertFalse ( MockBackPressureStrategy . applied ) ; 
 } 
 
 - private static void addDCLatency ( long sentAt , long now ) throws IOException 
 + private static void addDCLatency ( long sentAt ) throws IOException 
 { 
 ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; 
 try ( DataOutputStreamPlus out = new WrappedDataOutputStreamPlus ( baos ) ) 
 @ @ - 229 , 7 + 229 , 7 @ @ public class MessagingServiceTest 
 out . writeInt ( ( int ) sentAt ) ; 
 } 
 DataInputStreamPlus in = new DataInputStreamPlus ( new ByteArrayInputStream ( baos . toByteArray ( ) ) ) ; 
 - MessageIn . readTimestamp ( InetAddress . getLocalHost ( ) , in , now ) ; 
 + MessageIn . readConstructionTime ( InetAddress . getLocalHost ( ) , in ) ; 
 } 
 
 public static class MockBackPressureStrategy implements BackPressureStrategy < MockBackPressureStrategy . MockBackPressureState > 
 diff - - git a / test / unit / org / apache / cassandra / net / MockMessagingServiceTest . java b / test / unit / org / apache / cassandra / net / MockMessagingServiceTest . java 
 index ce94f33 . . 3f6564e 100644 
 - - - a / test / unit / org / apache / cassandra / net / MockMessagingServiceTest . java 
 + + + b / test / unit / org / apache / cassandra / net / MockMessagingServiceTest . java 
 @ @ - 59 , 9 + 59 , 7 @ @ public class MockMessagingServiceTest 
 EchoMessage . instance , 
 Collections . emptyMap ( ) , 
 MessagingService . Verb . ECHO , 
 - MessagingService . current _ version , 
 - MessageIn . createTimestamp ( ) 
 - ) ; 
 + MessagingService . current _ version ) ; 
 MockMessagingSpy spy = MockMessagingService 
 . when ( 
 all ( 
 @ @ - 94 , 4 + 92 , 4 @ @ public class MockMessagingServiceTest 
 / / and return a mocked response 
 assertEquals ( 1 , spy . mockedMessageResponses ) ; 
 } 
 - } 
 \ No newline at end of file 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / service / DataResolverTest . java b / test / unit / org / apache / cassandra / service / DataResolverTest . java 
 index 93415ba . . b7624ca 100644 
 - - - a / test / unit / org / apache / cassandra / service / DataResolverTest . java 
 + + + b / test / unit / org / apache / cassandra / service / DataResolverTest . java 
 @ @ - 828 , 8 + 828 , 7 @ @ public class DataResolverTest 
 ReadResponse . createRemoteDataResponse ( partitionIterator , cmd ) , 
 Collections . EMPTY _ MAP , 
 MessagingService . Verb . REQUEST _ RESPONSE , 
 - MessagingService . current _ version , 
 - MessageIn . createTimestamp ( ) ) ; 
 + MessagingService . current _ version ) ; 
 } 
 
 private RangeTombstone tombstone ( Object start , Object end , long markedForDeleteAt , int localDeletionTime )

NEAREST DIFF:
ELIMINATEDSENTENCE
