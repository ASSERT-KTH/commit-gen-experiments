BLEU SCORE: 0.028398387225677897

TEST MSG: Add prepared query parameter to trace for " Execute CQL3 prepared query " session
GENERATED MSG: move cache classes to cassandra . cache package .

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> index 39a9c03 . . feedfc4 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> @ @ - 71 , 7 + 71 , 7 @ @ public class QueryProcessor implements QueryHandler <nl> @ Override <nl> public int weightOf ( MD5Digest key , ParsedStatement . Prepared value ) <nl> { <nl> - return Ints . checkedCast ( measure ( key ) + measure ( value . statement ) + measure ( value . boundNames ) ) ; <nl> + return Ints . checkedCast ( measure ( key ) + measure ( value . rawCQLStatement ) + measure ( value . statement ) + measure ( value . boundNames ) ) ; <nl> } <nl> } ; <nl> <nl> @ @ - 80 , 7 + 80 , 7 @ @ public class QueryProcessor implements QueryHandler <nl> @ Override <nl> public int weightOf ( Integer key , ParsedStatement . Prepared value ) <nl> { <nl> - return Ints . checkedCast ( measure ( key ) + measure ( value . statement ) + measure ( value . boundNames ) ) ; <nl> + return Ints . checkedCast ( measure ( key ) + measure ( value . rawCQLStatement ) + measure ( value . statement ) + measure ( value . boundNames ) ) ; <nl> } <nl> } ; <nl> <nl> @ @ - 386 , 6 + 386 , 7 @ @ public class QueryProcessor implements QueryHandler <nl> return existing ; <nl> <nl> ParsedStatement . Prepared prepared = getStatement ( queryString , clientState ) ; <nl> + prepared . rawCQLStatement = queryString ; <nl> int boundTerms = prepared . statement . getBoundTerms ( ) ; <nl> if ( boundTerms > FBUtilities . MAX _ UNSIGNED _ SHORT ) <nl> throw new InvalidRequestException ( String . format ( " Too many markers ( ? ) . % d markers exceed the allowed maximum of % d " , boundTerms , FBUtilities . MAX _ UNSIGNED _ SHORT ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ParsedStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ParsedStatement . java <nl> index 4c3f8a9 . . 5f6c42c 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / ParsedStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / ParsedStatement . java <nl> @ @ - 48 , 6 + 48 , 14 @ @ public abstract class ParsedStatement <nl> <nl> public static class Prepared <nl> { <nl> + / * * <nl> + * Contains the CQL statement source if the statement has been " regularly " perpared via <nl> + * { @ link org . apache . cassandra . cql3 . QueryProcessor # prepare ( java . lang . String , org . apache . cassandra . service . ClientState , boolean ) } / <nl> + * { @ link QueryHandler # prepare ( java . lang . String , org . apache . cassandra . service . QueryState , java . util . Map ) } . <nl> + * Other usages of this class may or may not contain the CQL statement source . <nl> + * / <nl> + public String rawCQLStatement ; <nl> + <nl> public final CQLStatement statement ; <nl> public final List < ColumnSpecification > boundNames ; <nl> public final Short [ ] partitionKeyBindIndexes ; <nl> @ @ - 57 , 6 + 65 , 7 @ @ public abstract class ParsedStatement <nl> this . statement = statement ; <nl> this . boundNames = boundNames ; <nl> this . partitionKeyBindIndexes = partitionKeyBindIndexes ; <nl> + this . rawCQLStatement = " " ; <nl> } <nl> <nl> public Prepared ( CQLStatement statement , VariableSpecifications names , Short [ ] partitionKeyBindIndexes ) <nl> diff - - git a / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java b / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java <nl> index df6acc0 . . c5e775e 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java <nl> + + + b / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java <nl> @ @ - 119 , 6 + 119 , 7 @ @ public class ExecuteMessage extends Message . Request <nl> builder . put ( " consistency _ level " , options . getConsistency ( ) . name ( ) ) ; <nl> if ( options . getSerialConsistency ( ) ! = null ) <nl> builder . put ( " serial _ consistency _ level " , options . getSerialConsistency ( ) . name ( ) ) ; <nl> + builder . put ( " query " , prepared . rawCQLStatement ) ; <nl> <nl> / / TODO we don ' t have [ typed ] access to CQL bind variables here . CASSANDRA - 4560 is open to add support . <nl> Tracing . instance . begin ( " Execute CQL3 prepared query " , state . getClientAddress ( ) , builder . build ( ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / TraceCqlTest . java b / test / unit / org / apache / cassandra / cql3 / TraceCqlTest . java <nl> new file mode 100644 <nl> index 0000000 . . bd68940 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / cql3 / TraceCqlTest . java <nl> @ @ - 0 , 0 + 1 , 51 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . cql3 ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import com . datastax . driver . core . PreparedStatement ; <nl> + import com . datastax . driver . core . QueryTrace ; <nl> + import com . datastax . driver . core . Session ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + <nl> + public class TraceCqlTest extends CQLTester <nl> + { <nl> + @ Test <nl> + public void testCqlStatementTracing ( ) throws Throwable <nl> + { <nl> + requireNetwork ( ) ; <nl> + <nl> + createTable ( " CREATE TABLE % s ( id int primary key , v1 text , v2 text ) " ) ; <nl> + execute ( " INSERT INTO % s ( id , v1 , v2 ) VALUES ( ? , ? , ? ) " , 1 , " Apache " , " Cassandra " ) ; <nl> + execute ( " INSERT INTO % s ( id , v1 , v2 ) VALUES ( ? , ? , ? ) " , 2 , " trace " , " test " ) ; <nl> + <nl> + try ( Session session = sessionNet ( ) ) <nl> + { <nl> + String cql = " SELECT id , v1 , v2 FROM " + KEYSPACE + ' . ' + currentTable ( ) + " WHERE id = ? " ; <nl> + PreparedStatement pstmt = session . prepare ( cql ) <nl> + . enableTracing ( ) ; <nl> + QueryTrace trace = session . execute ( pstmt . bind ( 1 ) ) . getExecutionInfo ( ) . getQueryTrace ( ) ; <nl> + assertEquals ( cql , trace . getParameters ( ) . get ( " query " ) ) ; <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cache / ICacheExpungeHook . java b / src / java / org / apache / cassandra / cache / ICacheExpungeHook . java <nl> new file mode 100644 <nl> index 0000000 . . c11055a <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cache / ICacheExpungeHook . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . cache ; <nl> + <nl> + / * * <nl> + * Created by IntelliJ IDEA . <nl> + * User : lakshman <nl> + * Date : Aug 16 , 2005 <nl> + * Time : 1 : 08 : 58 PM <nl> + * To change this template use File | Settings | File Templates . <nl> + * / <nl> + public interface ICacheExpungeHook < K , V > <nl> + { <nl> + public void callMe ( K key , V value ) ; <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / cache / ICachetable . java b / src / java / org / apache / cassandra / cache / ICachetable . java <nl> new file mode 100644 <nl> index 0000000 . . 98d6ffa <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cache / ICachetable . java <nl> @ @ - 0 , 0 + 1 , 35 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . cache ; <nl> + <nl> + import java . util . Set ; <nl> + <nl> + public interface ICachetable < K , V > <nl> + { <nl> + public void put ( K key , V value ) ; <nl> + public void put ( K key , V value , ICacheExpungeHook < K , V > hook ) ; <nl> + 	 public V get ( K key ) ; <nl> + public V remove ( K key ) ; <nl> + public int size ( ) ; <nl> + public boolean containsKey ( K key ) ; <nl> + public boolean containsValue ( V value ) ; <nl> + public boolean isEmpty ( ) ; <nl> + public Set < K > keySet ( ) ; <nl> + public void shutdown ( ) ; <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / cache / InstrumentedCache . java b / src / java / org / apache / cassandra / cache / InstrumentedCache . java <nl> new file mode 100644 <nl> index 0000000 . . d197c77 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cache / InstrumentedCache . java <nl> @ @ - 0 , 0 + 1 , 65 @ @ <nl> + package org . apache . cassandra . cache ; <nl> + <nl> + import java . lang . management . ManagementFactory ; <nl> + import javax . management . MBeanServer ; <nl> + import javax . management . ObjectName ; <nl> + <nl> + import com . reardencommerce . kernel . collections . shared . evictable . ConcurrentLinkedHashMap ; <nl> + import org . apache . cassandra . utils . TimedStatsDeque ; <nl> + <nl> + public class InstrumentedCache < K , V > implements InstrumentedCacheMBean <nl> + { <nl> + private final int capacity ; <nl> + private final ConcurrentLinkedHashMap < K , V > map ; <nl> + private final TimedStatsDeque stats ; <nl> + <nl> + public InstrumentedCache ( String table , String name , int capacity ) <nl> + { <nl> + this . capacity = capacity ; <nl> + map = ConcurrentLinkedHashMap . create ( ConcurrentLinkedHashMap . EvictionPolicy . SECOND _ CHANCE , capacity ) ; <nl> + stats = new TimedStatsDeque ( 60000 ) ; <nl> + <nl> + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> + try <nl> + { <nl> + String mbeanName = " org . apache . cassandra . db : type = Caches , keyspace = " + table + " , cache = " + name ; <nl> + mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + public void put ( K key , V value ) <nl> + { <nl> + map . put ( key , value ) ; <nl> + } <nl> + <nl> + public V get ( K key ) <nl> + { <nl> + V v = map . get ( key ) ; <nl> + stats . add ( v = = null ? 0 : 1 ) ; <nl> + return v ; <nl> + } <nl> + <nl> + public void remove ( K key ) <nl> + { <nl> + map . remove ( key ) ; <nl> + } <nl> + <nl> + public int getCapacity ( ) <nl> + { <nl> + return capacity ; <nl> + } <nl> + <nl> + public int getSize ( ) <nl> + { <nl> + return map . size ( ) ; <nl> + } <nl> + <nl> + public double getHitRate ( ) <nl> + { <nl> + return stats . mean ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / cache / InstrumentedCacheMBean . java b / src / java / org / apache / cassandra / cache / InstrumentedCacheMBean . java <nl> new file mode 100644 <nl> index 0000000 . . e2c01f6 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cache / InstrumentedCacheMBean . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package org . apache . cassandra . cache ; <nl> + <nl> + public interface InstrumentedCacheMBean <nl> + { <nl> + public int getCapacity ( ) ; <nl> + public int getSize ( ) ; <nl> + public double getHitRate ( ) ; <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 5df9c8e . . c77aa76 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import java . util . concurrent . locks . Condition ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> import java . util . concurrent . atomic . AtomicReference ; <nl> <nl> + import org . apache . cassandra . cache . InstrumentedCache ; <nl> import org . apache . cassandra . service . SliceRange ; <nl> import org . apache . log4j . Logger ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index 8109d8f . . d08938c 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ <nl> <nl> package org . apache . cassandra . net ; <nl> <nl> + import org . apache . cassandra . cache . ICachetable ; <nl> import org . apache . cassandra . concurrent . * ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . gms . FailureDetector ; <nl> diff - - git a / src / java / org / apache / cassandra / service / ConsistencyManager . java b / src / java / org / apache / cassandra / service / ConsistencyManager . java <nl> index e8a8287 . . 5b48749 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ConsistencyManager . java <nl> + + + b / src / java / org / apache / cassandra / service / ConsistencyManager . java <nl> @ @ - 25 , 6 + 25 , 8 @ @ import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> <nl> + import org . apache . cassandra . cache . ICacheExpungeHook ; <nl> + import org . apache . cassandra . cache . ICachetable ; <nl> import org . apache . cassandra . db . ReadCommand ; <nl> import org . apache . cassandra . db . ReadResponse ; <nl> import org . apache . cassandra . db . Row ; <nl> diff - - git a / src / java / org / apache / cassandra / service / ReadRepairManager . java b / src / java / org / apache / cassandra / service / ReadRepairManager . java <nl> index 1180b5f . . 9bbc3d8 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ReadRepairManager . java <nl> + + + b / src / java / org / apache / cassandra / service / ReadRepairManager . java <nl> @ @ - 30 , 8 + 30 , 8 @ @ import org . apache . cassandra . net . Message ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . utils . Cachetable ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> - import org . apache . cassandra . utils . ICacheExpungeHook ; <nl> - import org . apache . cassandra . utils . ICachetable ; <nl> + import org . apache . cassandra . cache . ICacheExpungeHook ; <nl> + import org . apache . cassandra . cache . ICachetable ; <nl> <nl> import org . apache . log4j . Logger ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / utils / Cachetable . java b / src / java / org / apache / cassandra / utils / Cachetable . java <nl> index e72ad8c . . e112647 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / Cachetable . java <nl> + + + b / src / java / org / apache / cassandra / utils / Cachetable . java <nl> @ @ - 22 , 6 + 22 , 9 @ @ import java . util . * ; <nl> <nl> import org . apache . log4j . Logger ; <nl> <nl> + import org . apache . cassandra . cache . ICacheExpungeHook ; <nl> + import org . apache . cassandra . cache . ICachetable ; <nl> + <nl> public class Cachetable < K , V > implements ICachetable < K , V > <nl> { <nl> private class CacheableObject <nl> diff - - git a / src / java / org / apache / cassandra / utils / ICacheExpungeHook . java b / src / java / org / apache / cassandra / utils / ICacheExpungeHook . java <nl> deleted file mode 100644 <nl> index 1248355 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / utils / ICacheExpungeHook . java <nl> + + + / dev / null <nl> @ @ - 1 , 31 + 0 , 0 @ @ <nl> - / * * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package org . apache . cassandra . utils ; <nl> - <nl> - / * * <nl> - * Created by IntelliJ IDEA . <nl> - * User : lakshman <nl> - * Date : Aug 16 , 2005 <nl> - * Time : 1 : 08 : 58 PM <nl> - * To change this template use File | Settings | File Templates . <nl> - * / <nl> - public interface ICacheExpungeHook < K , V > <nl> - { <nl> - public void callMe ( K key , V value ) ; <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / utils / ICachetable . java b / src / java / org / apache / cassandra / utils / ICachetable . java <nl> deleted file mode 100644 <nl> index f3a6ed1 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / utils / ICachetable . java <nl> + + + / dev / null <nl> @ @ - 1 , 36 + 0 , 0 @ @ <nl> - / * * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package org . apache . cassandra . utils ; <nl> - <nl> - import java . util . Enumeration ; <nl> - import java . util . Set ; <nl> - <nl> - public interface ICachetable < K , V > <nl> - { <nl> - public void put ( K key , V value ) ; <nl> - public void put ( K key , V value , ICacheExpungeHook < K , V > hook ) ; <nl> - 	 public V get ( K key ) ; <nl> - public V remove ( K key ) ; <nl> - public int size ( ) ; <nl> - public boolean containsKey ( K key ) ; <nl> - public boolean containsValue ( V value ) ; <nl> - public boolean isEmpty ( ) ; <nl> - public Set < K > keySet ( ) ; <nl> - public void shutdown ( ) ; <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / utils / InstrumentedCache . java b / src / java / org / apache / cassandra / utils / InstrumentedCache . java <nl> deleted file mode 100644 <nl> index 8e267e5 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / utils / InstrumentedCache . java <nl> + + + / dev / null <nl> @ @ - 1 , 64 + 0 , 0 @ @ <nl> - package org . apache . cassandra . utils ; <nl> - <nl> - import java . lang . management . ManagementFactory ; <nl> - import javax . management . MBeanServer ; <nl> - import javax . management . ObjectName ; <nl> - <nl> - import com . reardencommerce . kernel . collections . shared . evictable . ConcurrentLinkedHashMap ; <nl> - <nl> - public class InstrumentedCache < K , V > implements InstrumentedCacheMBean <nl> - { <nl> - private final int capacity ; <nl> - private final ConcurrentLinkedHashMap < K , V > map ; <nl> - private final TimedStatsDeque stats ; <nl> - <nl> - public InstrumentedCache ( String table , String name , int capacity ) <nl> - { <nl> - this . capacity = capacity ; <nl> - map = ConcurrentLinkedHashMap . create ( ConcurrentLinkedHashMap . EvictionPolicy . SECOND _ CHANCE , capacity ) ; <nl> - stats = new TimedStatsDeque ( 60000 ) ; <nl> - <nl> - MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> - try <nl> - { <nl> - String mbeanName = " org . apache . cassandra . db : type = Caches , keyspace = " + table + " , cache = " + name ; <nl> - mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - } <nl> - <nl> - public void put ( K key , V value ) <nl> - { <nl> - map . put ( key , value ) ; <nl> - } <nl> - <nl> - public V get ( K key ) <nl> - { <nl> - V v = map . get ( key ) ; <nl> - stats . add ( v = = null ? 0 : 1 ) ; <nl> - return v ; <nl> - } <nl> - <nl> - public void remove ( K key ) <nl> - { <nl> - map . remove ( key ) ; <nl> - } <nl> - <nl> - public int getCapacity ( ) <nl> - { <nl> - return capacity ; <nl> - } <nl> - <nl> - public int getSize ( ) <nl> - { <nl> - return map . size ( ) ; <nl> - } <nl> - <nl> - public double getHitRate ( ) <nl> - { <nl> - return stats . mean ( ) ; <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / utils / InstrumentedCacheMBean . java b / src / java / org / apache / cassandra / utils / InstrumentedCacheMBean . java <nl> deleted file mode 100644 <nl> index 4e1788a . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / utils / InstrumentedCacheMBean . java <nl> + + + / dev / null <nl> @ @ - 1 , 8 + 0 , 0 @ @ <nl> - package org . apache . cassandra . utils ; <nl> - <nl> - public interface InstrumentedCacheMBean <nl> - { <nl> - public int getCapacity ( ) ; <nl> - public int getSize ( ) ; <nl> - public double getHitRate ( ) ; <nl> - }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 index 39a9c03 . . feedfc4 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 @ @ - 71 , 7 + 71 , 7 @ @ public class QueryProcessor implements QueryHandler 
 @ Override 
 public int weightOf ( MD5Digest key , ParsedStatement . Prepared value ) 
 { 
 - return Ints . checkedCast ( measure ( key ) + measure ( value . statement ) + measure ( value . boundNames ) ) ; 
 + return Ints . checkedCast ( measure ( key ) + measure ( value . rawCQLStatement ) + measure ( value . statement ) + measure ( value . boundNames ) ) ; 
 } 
 } ; 
 
 @ @ - 80 , 7 + 80 , 7 @ @ public class QueryProcessor implements QueryHandler 
 @ Override 
 public int weightOf ( Integer key , ParsedStatement . Prepared value ) 
 { 
 - return Ints . checkedCast ( measure ( key ) + measure ( value . statement ) + measure ( value . boundNames ) ) ; 
 + return Ints . checkedCast ( measure ( key ) + measure ( value . rawCQLStatement ) + measure ( value . statement ) + measure ( value . boundNames ) ) ; 
 } 
 } ; 
 
 @ @ - 386 , 6 + 386 , 7 @ @ public class QueryProcessor implements QueryHandler 
 return existing ; 
 
 ParsedStatement . Prepared prepared = getStatement ( queryString , clientState ) ; 
 + prepared . rawCQLStatement = queryString ; 
 int boundTerms = prepared . statement . getBoundTerms ( ) ; 
 if ( boundTerms > FBUtilities . MAX _ UNSIGNED _ SHORT ) 
 throw new InvalidRequestException ( String . format ( " Too many markers ( ? ) . % d markers exceed the allowed maximum of % d " , boundTerms , FBUtilities . MAX _ UNSIGNED _ SHORT ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ParsedStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ParsedStatement . java 
 index 4c3f8a9 . . 5f6c42c 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / ParsedStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / ParsedStatement . java 
 @ @ - 48 , 6 + 48 , 14 @ @ public abstract class ParsedStatement 
 
 public static class Prepared 
 { 
 + / * * 
 + * Contains the CQL statement source if the statement has been " regularly " perpared via 
 + * { @ link org . apache . cassandra . cql3 . QueryProcessor # prepare ( java . lang . String , org . apache . cassandra . service . ClientState , boolean ) } / 
 + * { @ link QueryHandler # prepare ( java . lang . String , org . apache . cassandra . service . QueryState , java . util . Map ) } . 
 + * Other usages of this class may or may not contain the CQL statement source . 
 + * / 
 + public String rawCQLStatement ; 
 + 
 public final CQLStatement statement ; 
 public final List < ColumnSpecification > boundNames ; 
 public final Short [ ] partitionKeyBindIndexes ; 
 @ @ - 57 , 6 + 65 , 7 @ @ public abstract class ParsedStatement 
 this . statement = statement ; 
 this . boundNames = boundNames ; 
 this . partitionKeyBindIndexes = partitionKeyBindIndexes ; 
 + this . rawCQLStatement = " " ; 
 } 
 
 public Prepared ( CQLStatement statement , VariableSpecifications names , Short [ ] partitionKeyBindIndexes ) 
 diff - - git a / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java b / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java 
 index df6acc0 . . c5e775e 100644 
 - - - a / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java 
 + + + b / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java 
 @ @ - 119 , 6 + 119 , 7 @ @ public class ExecuteMessage extends Message . Request 
 builder . put ( " consistency _ level " , options . getConsistency ( ) . name ( ) ) ; 
 if ( options . getSerialConsistency ( ) ! = null ) 
 builder . put ( " serial _ consistency _ level " , options . getSerialConsistency ( ) . name ( ) ) ; 
 + builder . put ( " query " , prepared . rawCQLStatement ) ; 
 
 / / TODO we don ' t have [ typed ] access to CQL bind variables here . CASSANDRA - 4560 is open to add support . 
 Tracing . instance . begin ( " Execute CQL3 prepared query " , state . getClientAddress ( ) , builder . build ( ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / TraceCqlTest . java b / test / unit / org / apache / cassandra / cql3 / TraceCqlTest . java 
 new file mode 100644 
 index 0000000 . . bd68940 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / cql3 / TraceCqlTest . java 
 @ @ - 0 , 0 + 1 , 51 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . cql3 ; 
 + 
 + import java . util . List ; 
 + 
 + import org . junit . Test ; 
 + 
 + import com . datastax . driver . core . PreparedStatement ; 
 + import com . datastax . driver . core . QueryTrace ; 
 + import com . datastax . driver . core . Session ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + 
 + public class TraceCqlTest extends CQLTester 
 + { 
 + @ Test 
 + public void testCqlStatementTracing ( ) throws Throwable 
 + { 
 + requireNetwork ( ) ; 
 + 
 + createTable ( " CREATE TABLE % s ( id int primary key , v1 text , v2 text ) " ) ; 
 + execute ( " INSERT INTO % s ( id , v1 , v2 ) VALUES ( ? , ? , ? ) " , 1 , " Apache " , " Cassandra " ) ; 
 + execute ( " INSERT INTO % s ( id , v1 , v2 ) VALUES ( ? , ? , ? ) " , 2 , " trace " , " test " ) ; 
 + 
 + try ( Session session = sessionNet ( ) ) 
 + { 
 + String cql = " SELECT id , v1 , v2 FROM " + KEYSPACE + ' . ' + currentTable ( ) + " WHERE id = ? " ; 
 + PreparedStatement pstmt = session . prepare ( cql ) 
 + . enableTracing ( ) ; 
 + QueryTrace trace = session . execute ( pstmt . bind ( 1 ) ) . getExecutionInfo ( ) . getQueryTrace ( ) ; 
 + assertEquals ( cql , trace . getParameters ( ) . get ( " query " ) ) ; 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cache / ICacheExpungeHook . java b / src / java / org / apache / cassandra / cache / ICacheExpungeHook . java 
 new file mode 100644 
 index 0000000 . . c11055a 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cache / ICacheExpungeHook . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . cache ; 
 + 
 + / * * 
 + * Created by IntelliJ IDEA . 
 + * User : lakshman 
 + * Date : Aug 16 , 2005 
 + * Time : 1 : 08 : 58 PM 
 + * To change this template use File | Settings | File Templates . 
 + * / 
 + public interface ICacheExpungeHook < K , V > 
 + { 
 + public void callMe ( K key , V value ) ; 
 + } 
 diff - - git a / src / java / org / apache / cassandra / cache / ICachetable . java b / src / java / org / apache / cassandra / cache / ICachetable . java 
 new file mode 100644 
 index 0000000 . . 98d6ffa 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cache / ICachetable . java 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . cache ; 
 + 
 + import java . util . Set ; 
 + 
 + public interface ICachetable < K , V > 
 + { 
 + public void put ( K key , V value ) ; 
 + public void put ( K key , V value , ICacheExpungeHook < K , V > hook ) ; 
 + 	 public V get ( K key ) ; 
 + public V remove ( K key ) ; 
 + public int size ( ) ; 
 + public boolean containsKey ( K key ) ; 
 + public boolean containsValue ( V value ) ; 
 + public boolean isEmpty ( ) ; 
 + public Set < K > keySet ( ) ; 
 + public void shutdown ( ) ; 
 + } 
 diff - - git a / src / java / org / apache / cassandra / cache / InstrumentedCache . java b / src / java / org / apache / cassandra / cache / InstrumentedCache . java 
 new file mode 100644 
 index 0000000 . . d197c77 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cache / InstrumentedCache . java 
 @ @ - 0 , 0 + 1 , 65 @ @ 
 + package org . apache . cassandra . cache ; 
 + 
 + import java . lang . management . ManagementFactory ; 
 + import javax . management . MBeanServer ; 
 + import javax . management . ObjectName ; 
 + 
 + import com . reardencommerce . kernel . collections . shared . evictable . ConcurrentLinkedHashMap ; 
 + import org . apache . cassandra . utils . TimedStatsDeque ; 
 + 
 + public class InstrumentedCache < K , V > implements InstrumentedCacheMBean 
 + { 
 + private final int capacity ; 
 + private final ConcurrentLinkedHashMap < K , V > map ; 
 + private final TimedStatsDeque stats ; 
 + 
 + public InstrumentedCache ( String table , String name , int capacity ) 
 + { 
 + this . capacity = capacity ; 
 + map = ConcurrentLinkedHashMap . create ( ConcurrentLinkedHashMap . EvictionPolicy . SECOND _ CHANCE , capacity ) ; 
 + stats = new TimedStatsDeque ( 60000 ) ; 
 + 
 + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 + try 
 + { 
 + String mbeanName = " org . apache . cassandra . db : type = Caches , keyspace = " + table + " , cache = " + name ; 
 + mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + public void put ( K key , V value ) 
 + { 
 + map . put ( key , value ) ; 
 + } 
 + 
 + public V get ( K key ) 
 + { 
 + V v = map . get ( key ) ; 
 + stats . add ( v = = null ? 0 : 1 ) ; 
 + return v ; 
 + } 
 + 
 + public void remove ( K key ) 
 + { 
 + map . remove ( key ) ; 
 + } 
 + 
 + public int getCapacity ( ) 
 + { 
 + return capacity ; 
 + } 
 + 
 + public int getSize ( ) 
 + { 
 + return map . size ( ) ; 
 + } 
 + 
 + public double getHitRate ( ) 
 + { 
 + return stats . mean ( ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / cache / InstrumentedCacheMBean . java b / src / java / org / apache / cassandra / cache / InstrumentedCacheMBean . java 
 new file mode 100644 
 index 0000000 . . e2c01f6 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cache / InstrumentedCacheMBean . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package org . apache . cassandra . cache ; 
 + 
 + public interface InstrumentedCacheMBean 
 + { 
 + public int getCapacity ( ) ; 
 + public int getSize ( ) ; 
 + public double getHitRate ( ) ; 
 + } 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 5df9c8e . . c77aa76 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import java . util . concurrent . locks . Condition ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 import java . util . concurrent . atomic . AtomicReference ; 
 
 + import org . apache . cassandra . cache . InstrumentedCache ; 
 import org . apache . cassandra . service . SliceRange ; 
 import org . apache . log4j . Logger ; 
 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index 8109d8f . . d08938c 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 18 , 6 + 18 , 7 @ @ 
 
 package org . apache . cassandra . net ; 
 
 + import org . apache . cassandra . cache . ICachetable ; 
 import org . apache . cassandra . concurrent . * ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . gms . FailureDetector ; 
 diff - - git a / src / java / org / apache / cassandra / service / ConsistencyManager . java b / src / java / org / apache / cassandra / service / ConsistencyManager . java 
 index e8a8287 . . 5b48749 100644 
 - - - a / src / java / org / apache / cassandra / service / ConsistencyManager . java 
 + + + b / src / java / org / apache / cassandra / service / ConsistencyManager . java 
 @ @ - 25 , 6 + 25 , 8 @ @ import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 
 + import org . apache . cassandra . cache . ICacheExpungeHook ; 
 + import org . apache . cassandra . cache . ICachetable ; 
 import org . apache . cassandra . db . ReadCommand ; 
 import org . apache . cassandra . db . ReadResponse ; 
 import org . apache . cassandra . db . Row ; 
 diff - - git a / src / java / org / apache / cassandra / service / ReadRepairManager . java b / src / java / org / apache / cassandra / service / ReadRepairManager . java 
 index 1180b5f . . 9bbc3d8 100644 
 - - - a / src / java / org / apache / cassandra / service / ReadRepairManager . java 
 + + + b / src / java / org / apache / cassandra / service / ReadRepairManager . java 
 @ @ - 30 , 8 + 30 , 8 @ @ import org . apache . cassandra . net . Message ; 
 import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . utils . Cachetable ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 - import org . apache . cassandra . utils . ICacheExpungeHook ; 
 - import org . apache . cassandra . utils . ICachetable ; 
 + import org . apache . cassandra . cache . ICacheExpungeHook ; 
 + import org . apache . cassandra . cache . ICachetable ; 
 
 import org . apache . log4j . Logger ; 
 
 diff - - git a / src / java / org / apache / cassandra / utils / Cachetable . java b / src / java / org / apache / cassandra / utils / Cachetable . java 
 index e72ad8c . . e112647 100644 
 - - - a / src / java / org / apache / cassandra / utils / Cachetable . java 
 + + + b / src / java / org / apache / cassandra / utils / Cachetable . java 
 @ @ - 22 , 6 + 22 , 9 @ @ import java . util . * ; 
 
 import org . apache . log4j . Logger ; 
 
 + import org . apache . cassandra . cache . ICacheExpungeHook ; 
 + import org . apache . cassandra . cache . ICachetable ; 
 + 
 public class Cachetable < K , V > implements ICachetable < K , V > 
 { 
 private class CacheableObject 
 diff - - git a / src / java / org / apache / cassandra / utils / ICacheExpungeHook . java b / src / java / org / apache / cassandra / utils / ICacheExpungeHook . java 
 deleted file mode 100644 
 index 1248355 . . 0000000 
 - - - a / src / java / org / apache / cassandra / utils / ICacheExpungeHook . java 
 + + + / dev / null 
 @ @ - 1 , 31 + 0 , 0 @ @ 
 - / * * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package org . apache . cassandra . utils ; 
 - 
 - / * * 
 - * Created by IntelliJ IDEA . 
 - * User : lakshman 
 - * Date : Aug 16 , 2005 
 - * Time : 1 : 08 : 58 PM 
 - * To change this template use File | Settings | File Templates . 
 - * / 
 - public interface ICacheExpungeHook < K , V > 
 - { 
 - public void callMe ( K key , V value ) ; 
 - } 
 diff - - git a / src / java / org / apache / cassandra / utils / ICachetable . java b / src / java / org / apache / cassandra / utils / ICachetable . java 
 deleted file mode 100644 
 index f3a6ed1 . . 0000000 
 - - - a / src / java / org / apache / cassandra / utils / ICachetable . java 
 + + + / dev / null 
 @ @ - 1 , 36 + 0 , 0 @ @ 
 - / * * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package org . apache . cassandra . utils ; 
 - 
 - import java . util . Enumeration ; 
 - import java . util . Set ; 
 - 
 - public interface ICachetable < K , V > 
 - { 
 - public void put ( K key , V value ) ; 
 - public void put ( K key , V value , ICacheExpungeHook < K , V > hook ) ; 
 - 	 public V get ( K key ) ; 
 - public V remove ( K key ) ; 
 - public int size ( ) ; 
 - public boolean containsKey ( K key ) ; 
 - public boolean containsValue ( V value ) ; 
 - public boolean isEmpty ( ) ; 
 - public Set < K > keySet ( ) ; 
 - public void shutdown ( ) ; 
 - } 
 diff - - git a / src / java / org / apache / cassandra / utils / InstrumentedCache . java b / src / java / org / apache / cassandra / utils / InstrumentedCache . java 
 deleted file mode 100644 
 index 8e267e5 . . 0000000 
 - - - a / src / java / org / apache / cassandra / utils / InstrumentedCache . java 
 + + + / dev / null 
 @ @ - 1 , 64 + 0 , 0 @ @ 
 - package org . apache . cassandra . utils ; 
 - 
 - import java . lang . management . ManagementFactory ; 
 - import javax . management . MBeanServer ; 
 - import javax . management . ObjectName ; 
 - 
 - import com . reardencommerce . kernel . collections . shared . evictable . ConcurrentLinkedHashMap ; 
 - 
 - public class InstrumentedCache < K , V > implements InstrumentedCacheMBean 
 - { 
 - private final int capacity ; 
 - private final ConcurrentLinkedHashMap < K , V > map ; 
 - private final TimedStatsDeque stats ; 
 - 
 - public InstrumentedCache ( String table , String name , int capacity ) 
 - { 
 - this . capacity = capacity ; 
 - map = ConcurrentLinkedHashMap . create ( ConcurrentLinkedHashMap . EvictionPolicy . SECOND _ CHANCE , capacity ) ; 
 - stats = new TimedStatsDeque ( 60000 ) ; 
 - 
 - MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 - try 
 - { 
 - String mbeanName = " org . apache . cassandra . db : type = Caches , keyspace = " + table + " , cache = " + name ; 
 - mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - } 
 - 
 - public void put ( K key , V value ) 
 - { 
 - map . put ( key , value ) ; 
 - } 
 - 
 - public V get ( K key ) 
 - { 
 - V v = map . get ( key ) ; 
 - stats . add ( v = = null ? 0 : 1 ) ; 
 - return v ; 
 - } 
 - 
 - public void remove ( K key ) 
 - { 
 - map . remove ( key ) ; 
 - } 
 - 
 - public int getCapacity ( ) 
 - { 
 - return capacity ; 
 - } 
 - 
 - public int getSize ( ) 
 - { 
 - return map . size ( ) ; 
 - } 
 - 
 - public double getHitRate ( ) 
 - { 
 - return stats . mean ( ) ; 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / utils / InstrumentedCacheMBean . java b / src / java / org / apache / cassandra / utils / InstrumentedCacheMBean . java 
 deleted file mode 100644 
 index 4e1788a . . 0000000 
 - - - a / src / java / org / apache / cassandra / utils / InstrumentedCacheMBean . java 
 + + + / dev / null 
 @ @ - 1 , 8 + 0 , 0 @ @ 
 - package org . apache . cassandra . utils ; 
 - 
 - public interface InstrumentedCacheMBean 
 - { 
 - public int getCapacity ( ) ; 
 - public int getSize ( ) ; 
 - public double getHitRate ( ) ; 
 - }
