BLEU SCORE: 0.026341919627252283

TEST MSG: Add bind variables to trace
GENERATED MSG: Workaround for netty issue causing corrupted data to come off the wire

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d18fc9d . . 309a48d 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 8 <nl> + * Add bind variables to trace ( CASSANDRA - 11719 ) <nl> * Switch counter shards ' clock to timestamps ( CASSANDRA - 9811 ) <nl> * Introduce HdrHistogram and response / service / wait separation to stress tool ( CASSANDRA - 11853 ) <nl> * entry - weighers in QueryProcessor should respect partitionKeyBindIndexes field ( CASSANDRA - 11718 ) <nl> diff - - git a / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java b / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java <nl> index c5e775e . . a5348a4 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java <nl> + + + b / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import com . google . common . collect . ImmutableMap ; <nl> import io . netty . buffer . ByteBuf ; <nl> <nl> import org . apache . cassandra . cql3 . CQLStatement ; <nl> + import org . apache . cassandra . cql3 . ColumnSpecification ; <nl> import org . apache . cassandra . cql3 . QueryHandler ; <nl> import org . apache . cassandra . cql3 . QueryOptions ; <nl> import org . apache . cassandra . cql3 . statements . ParsedStatement ; <nl> @ @ - 121 , 7 + 122 , 21 @ @ public class ExecuteMessage extends Message . Request <nl> builder . put ( " serial _ consistency _ level " , options . getSerialConsistency ( ) . name ( ) ) ; <nl> builder . put ( " query " , prepared . rawCQLStatement ) ; <nl> <nl> - / / TODO we don ' t have [ typed ] access to CQL bind variables here . CASSANDRA - 4560 is open to add support . <nl> + for ( int i = 0 ; i < prepared . boundNames . size ( ) ; i + + ) <nl> + { <nl> + ColumnSpecification cs = prepared . boundNames . get ( i ) ; <nl> + String boundName = cs . name . toString ( ) ; <nl> + String boundValue = cs . type . asCQL3Type ( ) . toCQLLiteral ( options . getValues ( ) . get ( i ) , options . getProtocolVersion ( ) ) ; <nl> + if ( boundValue . length ( ) > 1000 ) <nl> + { <nl> + boundValue = boundValue . substring ( 0 , 1000 ) + " . . . ' " ; <nl> + } <nl> + <nl> + / / Here we prefix boundName with the index to avoid possible collission in builder keys due to <nl> + / / having multiple boundValues for the same variable <nl> + builder . put ( " bound _ var _ " + Integer . toString ( i ) + " _ " + boundName , boundValue ) ; <nl> + } <nl> + <nl> Tracing . instance . begin ( " Execute CQL3 prepared query " , state . getClientAddress ( ) , builder . build ( ) ) ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / TraceCqlTest . java b / test / unit / org / apache / cassandra / cql3 / TraceCqlTest . java <nl> index bd68940 . . 735fb6a 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / TraceCqlTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / TraceCqlTest . java <nl> @ @ - 18 , 13 + 18 , 16 @ @ <nl> <nl> package org . apache . cassandra . cql3 ; <nl> <nl> - import java . util . List ; <nl> - <nl> import org . junit . Test ; <nl> <nl> + import com . datastax . driver . core . CodecRegistry ; <nl> + import com . datastax . driver . core . DataType ; <nl> import com . datastax . driver . core . PreparedStatement ; <nl> + import com . datastax . driver . core . ProtocolVersion ; <nl> import com . datastax . driver . core . QueryTrace ; <nl> import com . datastax . driver . core . Session ; <nl> + import com . datastax . driver . core . TupleType ; <nl> + import com . datastax . driver . core . TupleValue ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> <nl> @ @ - 46 , 6 + 49 , 78 @ @ public class TraceCqlTest extends CQLTester <nl> . enableTracing ( ) ; <nl> QueryTrace trace = session . execute ( pstmt . bind ( 1 ) ) . getExecutionInfo ( ) . getQueryTrace ( ) ; <nl> assertEquals ( cql , trace . getParameters ( ) . get ( " query " ) ) ; <nl> + <nl> + assertEquals ( " 1 " , trace . getParameters ( ) . get ( " bound _ var _ 0 _ id " ) ) ; <nl> + <nl> + String cql2 = " SELECT id , v1 , v2 FROM " + KEYSPACE + ' . ' + currentTable ( ) + " WHERE id IN ( ? , ? , ? ) " ; <nl> + pstmt = session . prepare ( cql2 ) . enableTracing ( ) ; <nl> + trace = session . execute ( pstmt . bind ( 19 , 15 , 16 ) ) . getExecutionInfo ( ) . getQueryTrace ( ) ; <nl> + assertEquals ( cql2 , trace . getParameters ( ) . get ( " query " ) ) ; <nl> + assertEquals ( " 19 " , trace . getParameters ( ) . get ( " bound _ var _ 0 _ id " ) ) ; <nl> + assertEquals ( " 15 " , trace . getParameters ( ) . get ( " bound _ var _ 1 _ id " ) ) ; <nl> + assertEquals ( " 16 " , trace . getParameters ( ) . get ( " bound _ var _ 2 _ id " ) ) ; <nl> + <nl> + / / some more complex tests for tables with map and tuple data types and long bound values <nl> + createTable ( " CREATE TABLE % s ( id int primary key , v1 text , v2 tuple < int , text , float > , v3 map < int , text > ) " ) ; <nl> + execute ( " INSERT INTO % s ( id , v1 , v2 , v3 ) values ( ? , ? , ? , ? ) " , 12 , " mahdix " , tuple ( 3 , " bar " , 2 . 1f ) , <nl> + map ( 1290 , " birthday " , 39 , " anniversary " ) ) ; <nl> + execute ( " INSERT INTO % s ( id , v1 , v2 , v3 ) values ( ? , ? , ? , ? ) " , 274 , " CassandraRocks " , tuple ( 9 , " foo " , 3 . 14f ) , <nl> + map ( 9181 , " statement " , 716 , " public speech " ) ) ; <nl> + <nl> + cql = " SELECT id , v1 , v2 , v3 FROM " + KEYSPACE + ' . ' + currentTable ( ) + " WHERE v2 = ? ALLOW FILTERING " ; <nl> + pstmt = session . prepare ( cql ) <nl> + . enableTracing ( ) ; <nl> + TupleType tt = TupleType . of ( ProtocolVersion . NEWEST _ SUPPORTED , CodecRegistry . DEFAULT _ INSTANCE , DataType . cint ( ) , <nl> + DataType . text ( ) , DataType . cfloat ( ) ) ; <nl> + TupleValue value = tt . newValue ( ) ; <nl> + value . setInt ( 0 , 3 ) ; <nl> + value . setString ( 1 , " bar " ) ; <nl> + value . setFloat ( 2 , 2 . 1f ) ; <nl> + <nl> + trace = session . execute ( pstmt . bind ( value ) ) . getExecutionInfo ( ) . getQueryTrace ( ) ; <nl> + assertEquals ( cql , trace . getParameters ( ) . get ( " query " ) ) ; <nl> + assertEquals ( " ( 3 , ' bar ' , 2 . 1 ) " , trace . getParameters ( ) . get ( " bound _ var _ 0 _ v2 " ) ) ; <nl> + <nl> + cql2 = " SELECT id , v1 , v2 , v3 FROM " + KEYSPACE + ' . ' + currentTable ( ) + " WHERE v3 CONTAINS KEY ? ALLOW FILTERING " ; <nl> + pstmt = session . prepare ( cql2 ) . enableTracing ( ) ; <nl> + trace = session . execute ( pstmt . bind ( 9181 ) ) . getExecutionInfo ( ) . getQueryTrace ( ) ; <nl> + <nl> + assertEquals ( cql2 , trace . getParameters ( ) . get ( " query " ) ) ; <nl> + assertEquals ( " 9181 " , trace . getParameters ( ) . get ( " bound _ var _ 0 _ key ( v3 ) " ) ) ; <nl> + <nl> + String boundValue = " Indulgence announcing uncommonly met she continuing two unpleasing terminated . Now " + <nl> + " busy say down the shed eyes roof paid her . Of shameless collected suspicion existence " + <nl> + " in . Share walls stuff think but the arise guest . Course suffer to do he sussex it " + <nl> + " window advice . Yet matter enable misery end extent common men should . Her indulgence " + <nl> + " but assistance favourable cultivated everything collecting . " + <nl> + " On projection apartments unsatiable so if he entreaties appearance . Rose you wife " + <nl> + " how set lady half wish . Hard sing an in true felt . Welcomed stronger if steepest " + <nl> + " ecstatic an suitable finished of oh . Entered at excited at forming between so " + <nl> + " produce . Chicken unknown besides attacks gay compact out you . Continuing no " + <nl> + " simplicity no favourable on reasonably melancholy estimating . Own hence views two " + <nl> + " ask right whole ten seems . What near kept met call old west dine . Our announcing " + <nl> + " sufficient why pianoforte . Full age foo set feel her told . Tastes giving in passed " + <nl> + " direct me valley as supply . End great stood boy noisy often way taken short . Rent the " + <nl> + " size our more door . Years no place abode in \ uFEFFno child my . Man pianoforte too " + <nl> + " solicitude friendship devonshire ten ask . Course sooner its silent but formal she " + <nl> + " led . Extensive he assurance extremity at breakfast . Dear sure ye sold fine sell on . " + <nl> + " Projection at up connection literature insensible motionless projecting . " + <nl> + " Nor hence hoped her after other known defer his . For county now sister engage had " + <nl> + " season better had waited . Occasional mrs interested far expression acceptance . Day " + <nl> + " either mrs talent pulled men rather regret admire but . Life ye sake it shed . Five " + <nl> + " lady he cold in meet up . Service get met adapted matters offence for . Principles man " + <nl> + " any insipidity age you simplicity understood . Do offering pleasure no ecstatic " + <nl> + " whatever on mr directly . " ; <nl> + <nl> + String cql3 = " SELECT id , v1 , v2 , v3 FROM " + KEYSPACE + ' . ' + currentTable ( ) + " WHERE v3 CONTAINS ? ALLOW FILTERING " ; <nl> + pstmt = session . prepare ( cql3 ) . enableTracing ( ) ; <nl> + trace = session . execute ( pstmt . bind ( boundValue ) ) . getExecutionInfo ( ) . getQueryTrace ( ) ; <nl> + <nl> + assertEquals ( cql3 , trace . getParameters ( ) . get ( " query " ) ) ; <nl> + <nl> + / / when tracing is done , this boundValue will be surrounded by single quote , and first 1000 characters <nl> + / / will be filtered . Here we take into account single quotes by adding them to the expected output <nl> + assertEquals ( " ' " + boundValue . substring ( 0 , 999 ) + " . . . ' " , trace . getParameters ( ) . get ( " bound _ var _ 0 _ value ( v3 ) " ) ) ; <nl> } <nl> } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d18fc9d . . 309a48d 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 8 
 + * Add bind variables to trace ( CASSANDRA - 11719 ) 
 * Switch counter shards ' clock to timestamps ( CASSANDRA - 9811 ) 
 * Introduce HdrHistogram and response / service / wait separation to stress tool ( CASSANDRA - 11853 ) 
 * entry - weighers in QueryProcessor should respect partitionKeyBindIndexes field ( CASSANDRA - 11718 ) 
 diff - - git a / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java b / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java 
 index c5e775e . . a5348a4 100644 
 - - - a / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java 
 + + + b / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import com . google . common . collect . ImmutableMap ; 
 import io . netty . buffer . ByteBuf ; 
 
 import org . apache . cassandra . cql3 . CQLStatement ; 
 + import org . apache . cassandra . cql3 . ColumnSpecification ; 
 import org . apache . cassandra . cql3 . QueryHandler ; 
 import org . apache . cassandra . cql3 . QueryOptions ; 
 import org . apache . cassandra . cql3 . statements . ParsedStatement ; 
 @ @ - 121 , 7 + 122 , 21 @ @ public class ExecuteMessage extends Message . Request 
 builder . put ( " serial _ consistency _ level " , options . getSerialConsistency ( ) . name ( ) ) ; 
 builder . put ( " query " , prepared . rawCQLStatement ) ; 
 
 - / / TODO we don ' t have [ typed ] access to CQL bind variables here . CASSANDRA - 4560 is open to add support . 
 + for ( int i = 0 ; i < prepared . boundNames . size ( ) ; i + + ) 
 + { 
 + ColumnSpecification cs = prepared . boundNames . get ( i ) ; 
 + String boundName = cs . name . toString ( ) ; 
 + String boundValue = cs . type . asCQL3Type ( ) . toCQLLiteral ( options . getValues ( ) . get ( i ) , options . getProtocolVersion ( ) ) ; 
 + if ( boundValue . length ( ) > 1000 ) 
 + { 
 + boundValue = boundValue . substring ( 0 , 1000 ) + " . . . ' " ; 
 + } 
 + 
 + / / Here we prefix boundName with the index to avoid possible collission in builder keys due to 
 + / / having multiple boundValues for the same variable 
 + builder . put ( " bound _ var _ " + Integer . toString ( i ) + " _ " + boundName , boundValue ) ; 
 + } 
 + 
 Tracing . instance . begin ( " Execute CQL3 prepared query " , state . getClientAddress ( ) , builder . build ( ) ) ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / TraceCqlTest . java b / test / unit / org / apache / cassandra / cql3 / TraceCqlTest . java 
 index bd68940 . . 735fb6a 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / TraceCqlTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / TraceCqlTest . java 
 @ @ - 18 , 13 + 18 , 16 @ @ 
 
 package org . apache . cassandra . cql3 ; 
 
 - import java . util . List ; 
 - 
 import org . junit . Test ; 
 
 + import com . datastax . driver . core . CodecRegistry ; 
 + import com . datastax . driver . core . DataType ; 
 import com . datastax . driver . core . PreparedStatement ; 
 + import com . datastax . driver . core . ProtocolVersion ; 
 import com . datastax . driver . core . QueryTrace ; 
 import com . datastax . driver . core . Session ; 
 + import com . datastax . driver . core . TupleType ; 
 + import com . datastax . driver . core . TupleValue ; 
 
 import static org . junit . Assert . assertEquals ; 
 
 @ @ - 46 , 6 + 49 , 78 @ @ public class TraceCqlTest extends CQLTester 
 . enableTracing ( ) ; 
 QueryTrace trace = session . execute ( pstmt . bind ( 1 ) ) . getExecutionInfo ( ) . getQueryTrace ( ) ; 
 assertEquals ( cql , trace . getParameters ( ) . get ( " query " ) ) ; 
 + 
 + assertEquals ( " 1 " , trace . getParameters ( ) . get ( " bound _ var _ 0 _ id " ) ) ; 
 + 
 + String cql2 = " SELECT id , v1 , v2 FROM " + KEYSPACE + ' . ' + currentTable ( ) + " WHERE id IN ( ? , ? , ? ) " ; 
 + pstmt = session . prepare ( cql2 ) . enableTracing ( ) ; 
 + trace = session . execute ( pstmt . bind ( 19 , 15 , 16 ) ) . getExecutionInfo ( ) . getQueryTrace ( ) ; 
 + assertEquals ( cql2 , trace . getParameters ( ) . get ( " query " ) ) ; 
 + assertEquals ( " 19 " , trace . getParameters ( ) . get ( " bound _ var _ 0 _ id " ) ) ; 
 + assertEquals ( " 15 " , trace . getParameters ( ) . get ( " bound _ var _ 1 _ id " ) ) ; 
 + assertEquals ( " 16 " , trace . getParameters ( ) . get ( " bound _ var _ 2 _ id " ) ) ; 
 + 
 + / / some more complex tests for tables with map and tuple data types and long bound values 
 + createTable ( " CREATE TABLE % s ( id int primary key , v1 text , v2 tuple < int , text , float > , v3 map < int , text > ) " ) ; 
 + execute ( " INSERT INTO % s ( id , v1 , v2 , v3 ) values ( ? , ? , ? , ? ) " , 12 , " mahdix " , tuple ( 3 , " bar " , 2 . 1f ) , 
 + map ( 1290 , " birthday " , 39 , " anniversary " ) ) ; 
 + execute ( " INSERT INTO % s ( id , v1 , v2 , v3 ) values ( ? , ? , ? , ? ) " , 274 , " CassandraRocks " , tuple ( 9 , " foo " , 3 . 14f ) , 
 + map ( 9181 , " statement " , 716 , " public speech " ) ) ; 
 + 
 + cql = " SELECT id , v1 , v2 , v3 FROM " + KEYSPACE + ' . ' + currentTable ( ) + " WHERE v2 = ? ALLOW FILTERING " ; 
 + pstmt = session . prepare ( cql ) 
 + . enableTracing ( ) ; 
 + TupleType tt = TupleType . of ( ProtocolVersion . NEWEST _ SUPPORTED , CodecRegistry . DEFAULT _ INSTANCE , DataType . cint ( ) , 
 + DataType . text ( ) , DataType . cfloat ( ) ) ; 
 + TupleValue value = tt . newValue ( ) ; 
 + value . setInt ( 0 , 3 ) ; 
 + value . setString ( 1 , " bar " ) ; 
 + value . setFloat ( 2 , 2 . 1f ) ; 
 + 
 + trace = session . execute ( pstmt . bind ( value ) ) . getExecutionInfo ( ) . getQueryTrace ( ) ; 
 + assertEquals ( cql , trace . getParameters ( ) . get ( " query " ) ) ; 
 + assertEquals ( " ( 3 , ' bar ' , 2 . 1 ) " , trace . getParameters ( ) . get ( " bound _ var _ 0 _ v2 " ) ) ; 
 + 
 + cql2 = " SELECT id , v1 , v2 , v3 FROM " + KEYSPACE + ' . ' + currentTable ( ) + " WHERE v3 CONTAINS KEY ? ALLOW FILTERING " ; 
 + pstmt = session . prepare ( cql2 ) . enableTracing ( ) ; 
 + trace = session . execute ( pstmt . bind ( 9181 ) ) . getExecutionInfo ( ) . getQueryTrace ( ) ; 
 + 
 + assertEquals ( cql2 , trace . getParameters ( ) . get ( " query " ) ) ; 
 + assertEquals ( " 9181 " , trace . getParameters ( ) . get ( " bound _ var _ 0 _ key ( v3 ) " ) ) ; 
 + 
 + String boundValue = " Indulgence announcing uncommonly met she continuing two unpleasing terminated . Now " + 
 + " busy say down the shed eyes roof paid her . Of shameless collected suspicion existence " + 
 + " in . Share walls stuff think but the arise guest . Course suffer to do he sussex it " + 
 + " window advice . Yet matter enable misery end extent common men should . Her indulgence " + 
 + " but assistance favourable cultivated everything collecting . " + 
 + " On projection apartments unsatiable so if he entreaties appearance . Rose you wife " + 
 + " how set lady half wish . Hard sing an in true felt . Welcomed stronger if steepest " + 
 + " ecstatic an suitable finished of oh . Entered at excited at forming between so " + 
 + " produce . Chicken unknown besides attacks gay compact out you . Continuing no " + 
 + " simplicity no favourable on reasonably melancholy estimating . Own hence views two " + 
 + " ask right whole ten seems . What near kept met call old west dine . Our announcing " + 
 + " sufficient why pianoforte . Full age foo set feel her told . Tastes giving in passed " + 
 + " direct me valley as supply . End great stood boy noisy often way taken short . Rent the " + 
 + " size our more door . Years no place abode in \ uFEFFno child my . Man pianoforte too " + 
 + " solicitude friendship devonshire ten ask . Course sooner its silent but formal she " + 
 + " led . Extensive he assurance extremity at breakfast . Dear sure ye sold fine sell on . " + 
 + " Projection at up connection literature insensible motionless projecting . " + 
 + " Nor hence hoped her after other known defer his . For county now sister engage had " + 
 + " season better had waited . Occasional mrs interested far expression acceptance . Day " + 
 + " either mrs talent pulled men rather regret admire but . Life ye sake it shed . Five " + 
 + " lady he cold in meet up . Service get met adapted matters offence for . Principles man " + 
 + " any insipidity age you simplicity understood . Do offering pleasure no ecstatic " + 
 + " whatever on mr directly . " ; 
 + 
 + String cql3 = " SELECT id , v1 , v2 , v3 FROM " + KEYSPACE + ' . ' + currentTable ( ) + " WHERE v3 CONTAINS ? ALLOW FILTERING " ; 
 + pstmt = session . prepare ( cql3 ) . enableTracing ( ) ; 
 + trace = session . execute ( pstmt . bind ( boundValue ) ) . getExecutionInfo ( ) . getQueryTrace ( ) ; 
 + 
 + assertEquals ( cql3 , trace . getParameters ( ) . get ( " query " ) ) ; 
 + 
 + / / when tracing is done , this boundValue will be surrounded by single quote , and first 1000 characters 
 + / / will be filtered . Here we take into account single quotes by adding them to the expected output 
 + assertEquals ( " ' " + boundValue . substring ( 0 , 999 ) + " . . . ' " , trace . getParameters ( ) . get ( " bound _ var _ 0 _ value ( v3 ) " ) ) ; 
 } 
 } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
