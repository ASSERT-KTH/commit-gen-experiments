BLEU SCORE: 0.044568827606990644

TEST MSG: Fix streaming _ socket _ timeout _ in _ ms not enforced
GENERATED MSG: Add optional socket timeout for streaming

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e7c997a . . 4b505f8 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 14 <nl> + * Fix streaming _ socket _ timeout _ in _ ms not enforced ( CASSANDRA - 11286 ) <nl> * Avoid dropping message too quickly due to missing unit conversion ( CASSANDRA - 11302 ) <nl> * COPY FROM on large datasets : fix progress report and debug performance ( CASSANDRA - 11053 ) <nl> * InvalidateKeys should have a weak ref to key cache ( CASSANDRA - 11176 ) <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index 1fa04e6 . . 0da4800 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 630 , 10 + 630 , 9 @ @ request _ timeout _ in _ ms : 10000 <nl> # and the times are synchronized between the nodes . <nl> cross _ node _ timeout : false <nl> <nl> - # Enable socket timeout for streaming operation . <nl> - # When a timeout occurs during streaming , streaming is retried from the start <nl> - # of the current file . This _ can _ involve re - streaming an important amount of <nl> - # data , so you should avoid setting the value too low . <nl> + # Set socket timeout for streaming operation . <nl> + # The stream session is failed if no data is received by any of the <nl> + # participants within that period . <nl> # Default value is 3600000 , which means streams timeout after an hour . <nl> # streaming _ socket _ timeout _ in _ ms : 3600000 <nl> <nl> diff - - git a / src / java / org / apache / cassandra / net / IncomingStreamingConnection . java b / src / java / org / apache / cassandra / net / IncomingStreamingConnection . java <nl> index 1f98bc4 . . 5ced786 100644 <nl> - - - a / src / java / org / apache / cassandra / net / IncomingStreamingConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / IncomingStreamingConnection . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import java . util . Set ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . streaming . StreamResultFuture ; <nl> import org . apache . cassandra . streaming . messages . StreamInitMessage ; <nl> import org . apache . cassandra . streaming . messages . StreamMessage ; <nl> @ @ - 62 , 6 + 63 , 10 @ @ public class IncomingStreamingConnection extends Thread implements Closeable <nl> DataInput input = new DataInputStream ( socket . getInputStream ( ) ) ; <nl> StreamInitMessage init = StreamInitMessage . serializer . deserialize ( input , version ) ; <nl> <nl> + / / Set SO _ TIMEOUT on follower side <nl> + if ( ! init . isForOutgoing ) <nl> + socket . setSoTimeout ( DatabaseDescriptor . getStreamingSocketTimeout ( ) ) ; <nl> + <nl> / / The initiator makes two connections , one for incoming and one for outgoing . <nl> / / The receiving side distinguish two connections by looking at StreamInitMessage # isForOutgoing . <nl> / / Note : we cannot use the same socket for incoming and outgoing streams because we want to <nl> @ @ - 74 , 7 + 79 , 7 @ @ public class IncomingStreamingConnection extends Thread implements Closeable <nl> close ( ) ; <nl> } <nl> } <nl> - <nl> + <nl> @ Override <nl> public void close ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / streaming / ConnectionHandler . java b / src / java / org / apache / cassandra / streaming / ConnectionHandler . java <nl> index ac267f9 . . 52268b2 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / ConnectionHandler . java <nl> + + + b / src / java / org / apache / cassandra / streaming / ConnectionHandler . java <nl> @ @ - 105 , 12 + 105 , 22 @ @ public class ConnectionHandler <nl> { <nl> logger . debug ( " [ Stream # { } ] Closing stream connection handler on { } " , session . planId ( ) , session . peer ) ; <nl> <nl> - ListenableFuture < ? > inClosed = incoming = = null ? Futures . immediateFuture ( null ) : incoming . close ( ) ; <nl> - ListenableFuture < ? > outClosed = outgoing = = null ? Futures . immediateFuture ( null ) : outgoing . close ( ) ; <nl> + ListenableFuture < ? > inClosed = closeIncoming ( ) ; <nl> + ListenableFuture < ? > outClosed = closeOutgoing ( ) ; <nl> <nl> return Futures . allAsList ( inClosed , outClosed ) ; <nl> } <nl> <nl> + public ListenableFuture < ? > closeOutgoing ( ) <nl> + { <nl> + return outgoing = = null ? Futures . immediateFuture ( null ) : outgoing . close ( ) ; <nl> + } <nl> + <nl> + public ListenableFuture < ? > closeIncoming ( ) <nl> + { <nl> + return incoming = = null ? Futures . immediateFuture ( null ) : incoming . close ( ) ; <nl> + } <nl> + <nl> / * * <nl> * Enqueue messages to be sent . <nl> * <nl> @ @ - 165 , 11 + 175 , 8 @ @ public class ConnectionHandler <nl> <nl> protected static ReadableByteChannel getReadChannel ( Socket socket ) throws IOException <nl> { <nl> - ReadableByteChannel in = socket . getChannel ( ) ; <nl> - / / socket channel is null when encrypted ( SSL ) <nl> - return in = = null <nl> - ? Channels . newChannel ( socket . getInputStream ( ) ) <nl> - : in ; <nl> + / / we do this instead of socket . getChannel ( ) so socketSoTimeout is respected <nl> + return Channels . newChannel ( socket . getInputStream ( ) ) ; <nl> } <nl> <nl> public void sendInitMessage ( Socket socket , boolean isForOutgoing ) throws IOException <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamSession . java b / src / java / org / apache / cassandra / streaming / StreamSession . java <nl> index 98a6f1f . . 642e837 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamSession . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamSession . java <nl> @ @ - 609 , 6 + 609 , 7 @ @ public class StreamSession implements IEndpointStateChangeSubscriber <nl> else <nl> { <nl> state ( State . WAIT _ COMPLETE ) ; <nl> + handler . closeIncoming ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 696 , 6 + 697 , 7 @ @ public class StreamSession implements IEndpointStateChangeSubscriber <nl> handler . sendMessage ( new CompleteMessage ( ) ) ; <nl> completeSent = true ; <nl> state ( State . WAIT _ COMPLETE ) ; <nl> + handler . closeOutgoing ( ) ; <nl> } <nl> } <nl> return completed ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 44b53bc . . cc044b9 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 52 , 7 + 52 , 7 @ @ <nl> * Allow rangeSlice queries to be start / end inclusive / exclusive ( CASSANDRA - 3749 ) <nl> * Fix BulkLoader to support new SSTable layout and add stream <nl> throttling to prevent an NPE when there is no yaml config ( CASSANDRA - 3752 ) <nl> - * Allow concurrent schema migrations ( CASSANDRA - 1391 ) <nl> + * Allow concurrent schema migrations ( CASSANDRA - 1391 , 3832 ) <nl> * Add SnapshotCommand to trigger snapshot on remote node ( CASSANDRA - 3721 ) <nl> * Make CFMetaData conversions to / from thrift / native schema inverses <nl> ( CASSANDRA _ 3559 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> index 7771815 . . 0d8df1d 100644 <nl> - - - a / src / java / org / apache / cassandra / service / MigrationManager . java <nl> + + + b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> @ @ - 91 , 10 + 91 , 13 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber <nl> <nl> / * * <nl> * if versions differ this node sends request with local migration list to the endpoint <nl> - * and expecting to receive a list of migrations to apply locally <nl> + * and expecting to receive a list of migrations to apply locally . <nl> + * <nl> + * Do not de - ref the future because that causes distributed deadlock ( CASSANDRA - 3832 ) because we are <nl> + * running in the gossip stage . <nl> * / <nl> <nl> - Future f = StageManager . getStage ( Stage . MIGRATION ) . submit ( new WrappedRunnable ( ) <nl> + StageManager . getStage ( Stage . MIGRATION ) . submit ( new WrappedRunnable ( ) <nl> { <nl> public void runMayThrow ( ) throws Exception <nl> { <nl> @ @ - 128 , 8 + 131 , 6 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber <nl> } <nl> } <nl> } ) ; <nl> - <nl> - FBUtilities . waitOnFuture ( f ) ; <nl> } <nl> <nl> public static boolean isReadyForBootstrap ( )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e7c997a . . 4b505f8 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 14 
 + * Fix streaming _ socket _ timeout _ in _ ms not enforced ( CASSANDRA - 11286 ) 
 * Avoid dropping message too quickly due to missing unit conversion ( CASSANDRA - 11302 ) 
 * COPY FROM on large datasets : fix progress report and debug performance ( CASSANDRA - 11053 ) 
 * InvalidateKeys should have a weak ref to key cache ( CASSANDRA - 11176 ) 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index 1fa04e6 . . 0da4800 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 630 , 10 + 630 , 9 @ @ request _ timeout _ in _ ms : 10000 
 # and the times are synchronized between the nodes . 
 cross _ node _ timeout : false 
 
 - # Enable socket timeout for streaming operation . 
 - # When a timeout occurs during streaming , streaming is retried from the start 
 - # of the current file . This _ can _ involve re - streaming an important amount of 
 - # data , so you should avoid setting the value too low . 
 + # Set socket timeout for streaming operation . 
 + # The stream session is failed if no data is received by any of the 
 + # participants within that period . 
 # Default value is 3600000 , which means streams timeout after an hour . 
 # streaming _ socket _ timeout _ in _ ms : 3600000 
 
 diff - - git a / src / java / org / apache / cassandra / net / IncomingStreamingConnection . java b / src / java / org / apache / cassandra / net / IncomingStreamingConnection . java 
 index 1f98bc4 . . 5ced786 100644 
 - - - a / src / java / org / apache / cassandra / net / IncomingStreamingConnection . java 
 + + + b / src / java / org / apache / cassandra / net / IncomingStreamingConnection . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import java . util . Set ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . streaming . StreamResultFuture ; 
 import org . apache . cassandra . streaming . messages . StreamInitMessage ; 
 import org . apache . cassandra . streaming . messages . StreamMessage ; 
 @ @ - 62 , 6 + 63 , 10 @ @ public class IncomingStreamingConnection extends Thread implements Closeable 
 DataInput input = new DataInputStream ( socket . getInputStream ( ) ) ; 
 StreamInitMessage init = StreamInitMessage . serializer . deserialize ( input , version ) ; 
 
 + / / Set SO _ TIMEOUT on follower side 
 + if ( ! init . isForOutgoing ) 
 + socket . setSoTimeout ( DatabaseDescriptor . getStreamingSocketTimeout ( ) ) ; 
 + 
 / / The initiator makes two connections , one for incoming and one for outgoing . 
 / / The receiving side distinguish two connections by looking at StreamInitMessage # isForOutgoing . 
 / / Note : we cannot use the same socket for incoming and outgoing streams because we want to 
 @ @ - 74 , 7 + 79 , 7 @ @ public class IncomingStreamingConnection extends Thread implements Closeable 
 close ( ) ; 
 } 
 } 
 - 
 + 
 @ Override 
 public void close ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / streaming / ConnectionHandler . java b / src / java / org / apache / cassandra / streaming / ConnectionHandler . java 
 index ac267f9 . . 52268b2 100644 
 - - - a / src / java / org / apache / cassandra / streaming / ConnectionHandler . java 
 + + + b / src / java / org / apache / cassandra / streaming / ConnectionHandler . java 
 @ @ - 105 , 12 + 105 , 22 @ @ public class ConnectionHandler 
 { 
 logger . debug ( " [ Stream # { } ] Closing stream connection handler on { } " , session . planId ( ) , session . peer ) ; 
 
 - ListenableFuture < ? > inClosed = incoming = = null ? Futures . immediateFuture ( null ) : incoming . close ( ) ; 
 - ListenableFuture < ? > outClosed = outgoing = = null ? Futures . immediateFuture ( null ) : outgoing . close ( ) ; 
 + ListenableFuture < ? > inClosed = closeIncoming ( ) ; 
 + ListenableFuture < ? > outClosed = closeOutgoing ( ) ; 
 
 return Futures . allAsList ( inClosed , outClosed ) ; 
 } 
 
 + public ListenableFuture < ? > closeOutgoing ( ) 
 + { 
 + return outgoing = = null ? Futures . immediateFuture ( null ) : outgoing . close ( ) ; 
 + } 
 + 
 + public ListenableFuture < ? > closeIncoming ( ) 
 + { 
 + return incoming = = null ? Futures . immediateFuture ( null ) : incoming . close ( ) ; 
 + } 
 + 
 / * * 
 * Enqueue messages to be sent . 
 * 
 @ @ - 165 , 11 + 175 , 8 @ @ public class ConnectionHandler 
 
 protected static ReadableByteChannel getReadChannel ( Socket socket ) throws IOException 
 { 
 - ReadableByteChannel in = socket . getChannel ( ) ; 
 - / / socket channel is null when encrypted ( SSL ) 
 - return in = = null 
 - ? Channels . newChannel ( socket . getInputStream ( ) ) 
 - : in ; 
 + / / we do this instead of socket . getChannel ( ) so socketSoTimeout is respected 
 + return Channels . newChannel ( socket . getInputStream ( ) ) ; 
 } 
 
 public void sendInitMessage ( Socket socket , boolean isForOutgoing ) throws IOException 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamSession . java b / src / java / org / apache / cassandra / streaming / StreamSession . java 
 index 98a6f1f . . 642e837 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamSession . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamSession . java 
 @ @ - 609 , 6 + 609 , 7 @ @ public class StreamSession implements IEndpointStateChangeSubscriber 
 else 
 { 
 state ( State . WAIT _ COMPLETE ) ; 
 + handler . closeIncoming ( ) ; 
 } 
 } 
 
 @ @ - 696 , 6 + 697 , 7 @ @ public class StreamSession implements IEndpointStateChangeSubscriber 
 handler . sendMessage ( new CompleteMessage ( ) ) ; 
 completeSent = true ; 
 state ( State . WAIT _ COMPLETE ) ; 
 + handler . closeOutgoing ( ) ; 
 } 
 } 
 return completed ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 44b53bc . . cc044b9 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 52 , 7 + 52 , 7 @ @ 
 * Allow rangeSlice queries to be start / end inclusive / exclusive ( CASSANDRA - 3749 ) 
 * Fix BulkLoader to support new SSTable layout and add stream 
 throttling to prevent an NPE when there is no yaml config ( CASSANDRA - 3752 ) 
 - * Allow concurrent schema migrations ( CASSANDRA - 1391 ) 
 + * Allow concurrent schema migrations ( CASSANDRA - 1391 , 3832 ) 
 * Add SnapshotCommand to trigger snapshot on remote node ( CASSANDRA - 3721 ) 
 * Make CFMetaData conversions to / from thrift / native schema inverses 
 ( CASSANDRA _ 3559 ) 
 diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java 
 index 7771815 . . 0d8df1d 100644 
 - - - a / src / java / org / apache / cassandra / service / MigrationManager . java 
 + + + b / src / java / org / apache / cassandra / service / MigrationManager . java 
 @ @ - 91 , 10 + 91 , 13 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber 
 
 / * * 
 * if versions differ this node sends request with local migration list to the endpoint 
 - * and expecting to receive a list of migrations to apply locally 
 + * and expecting to receive a list of migrations to apply locally . 
 + * 
 + * Do not de - ref the future because that causes distributed deadlock ( CASSANDRA - 3832 ) because we are 
 + * running in the gossip stage . 
 * / 
 
 - Future f = StageManager . getStage ( Stage . MIGRATION ) . submit ( new WrappedRunnable ( ) 
 + StageManager . getStage ( Stage . MIGRATION ) . submit ( new WrappedRunnable ( ) 
 { 
 public void runMayThrow ( ) throws Exception 
 { 
 @ @ - 128 , 8 + 131 , 6 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber 
 } 
 } 
 } ) ; 
 - 
 - FBUtilities . waitOnFuture ( f ) ; 
 } 
 
 public static boolean isReadyForBootstrap ( )
