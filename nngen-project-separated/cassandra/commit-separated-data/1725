BLEU SCORE: 0.03283637368030199

TEST MSG: Backport CASSANDRA - 6863 without digest updates
GENERATED MSG: merge from 1 . 0

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 28f79f9 . . 8815a92 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 15 : <nl> + * Backport CASSANDRA - 6863 without digest updates ( CASSANDRA - 8989 ) <nl> * Don ' t include tmp files when doing offline relevel ( CASSANDRA - 9088 ) <nl> * Use the proper CAS WriteType when finishing a previous round during Paxos <nl> preparation ( CASSANDRA - 8672 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 38c72e0 . . a294525 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 321 , 6 + 321 , 8 @ @ public abstract class ColumnFamily implements Iterable < Column > , IRowCacheEntry <nl> } <nl> } <nl> <nl> + cfDiff . setDeletionInfo ( deletionInfo ( ) . diff ( cfComposite . deletionInfo ( ) ) ) ; <nl> + <nl> if ( ! cfDiff . isEmpty ( ) ) <nl> return cfDiff ; <nl> return null ; <nl> diff - - git a / src / java / org / apache / cassandra / db / DeletionInfo . java b / src / java / org / apache / cassandra / db / DeletionInfo . java <nl> index 23f46bf . . 27811b3 100644 <nl> - - - a / src / java / org / apache / cassandra / db / DeletionInfo . java <nl> + + + b / src / java / org / apache / cassandra / db / DeletionInfo . java <nl> @ @ - 171 , 6 + 171 , 22 @ @ public class DeletionInfo <nl> } <nl> <nl> / * * <nl> + * Evaluates difference between this deletion info and superset for read repair <nl> + * <nl> + * @ return the difference between the two , or LIVE if no difference <nl> + * / <nl> + public DeletionInfo diff ( DeletionInfo superset ) <nl> + { <nl> + RangeTombstoneList rangeDiff = superset . ranges = = null | | superset . ranges . isEmpty ( ) <nl> + ? null <nl> + : ranges = = null ? superset . ranges : ranges . diff ( superset . ranges ) ; <nl> + <nl> + return topLevel . markedForDeleteAt ! = superset . topLevel . markedForDeleteAt | | rangeDiff ! = null <nl> + ? new DeletionInfo ( superset . topLevel , rangeDiff ) <nl> + : DeletionInfo . live ( ) ; <nl> + } <nl> + <nl> + / * * <nl> * Returns true if { @ code purge } would remove the top - level tombstone or any of the range <nl> * tombstones , false otherwise . <nl> * @ param gcBefore timestamp ( in seconds ) before which tombstones should be purged <nl> diff - - git a / src / java / org / apache / cassandra / db / RangeTombstoneList . java b / src / java / org / apache / cassandra / db / RangeTombstoneList . java <nl> index dadcc20 . . b49c2fc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RangeTombstoneList . java <nl> + + + b / src / java / org / apache / cassandra / db / RangeTombstoneList . java <nl> @ @ - 333 , 6 + 333 , 45 @ @ public class RangeTombstoneList implements Iterable < RangeTombstone > <nl> } ; <nl> } <nl> <nl> + / * * <nl> + * Evaluates a diff between superset ( known to be all merged tombstones ) and this list for read repair <nl> + * <nl> + * @ return null if there is no difference <nl> + * / <nl> + public RangeTombstoneList diff ( RangeTombstoneList superset ) <nl> + { <nl> + if ( isEmpty ( ) ) <nl> + return superset ; <nl> + <nl> + assert size < = superset . size ; <nl> + <nl> + RangeTombstoneList diff = null ; <nl> + <nl> + int j = 0 ; / / index to iterate through our own list <nl> + for ( int i = 0 ; i < superset . size ; i + + ) <nl> + { <nl> + boolean sameStart = j < size & & starts [ j ] . equals ( superset . starts [ i ] ) ; <nl> + / / don ' t care about local deletion time here . for RR it doesn ' t makes sense <nl> + if ( ! sameStart <nl> + | | ! ends [ j ] . equals ( superset . ends [ i ] ) <nl> + | | markedAts [ j ] ! = superset . markedAts [ i ] ) <nl> + { <nl> + if ( diff = = null ) <nl> + diff = new RangeTombstoneList ( comparator , Math . min ( 8 , superset . size - i ) ) ; <nl> + diff . add ( superset . starts [ i ] , superset . ends [ i ] , superset . markedAts [ i ] , superset . delTimes [ i ] ) ; <nl> + <nl> + if ( sameStart ) <nl> + j + + ; <nl> + } <nl> + else <nl> + { <nl> + j + + ; <nl> + } <nl> + } <nl> + <nl> + return diff ; <nl> + } <nl> + <nl> @ Override <nl> public boolean equals ( Object o ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / Util . java b / test / unit / org / apache / cassandra / Util . java <nl> index a71dc48 . . 76afa37 100644 <nl> - - - a / test / unit / org / apache / cassandra / Util . java <nl> + + + b / test / unit / org / apache / cassandra / Util . java <nl> @ @ - 281 , 4 + 281 , 9 @ @ public class Util <nl> <nl> assert thrown : exception . getName ( ) + " not received " ; <nl> } <nl> + <nl> + public static RangeTombstone tombstone ( String start , String finish , long timestamp , int localtime ) <nl> + { <nl> + return new RangeTombstone ( ByteBufferUtil . bytes ( start ) , ByteBufferUtil . bytes ( finish ) , timestamp , localtime ) ; <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / RowTest . java b / test / unit / org / apache / cassandra / db / RowTest . java <nl> index 2571fa5 . . c7c7023 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RowTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RowTest . java <nl> @ @ - 21 , 15 + 21 , 16 @ @ package org . apache . cassandra . db ; <nl> import java . util . Arrays ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> - import org . apache . cassandra . SchemaLoader ; <nl> + import com . google . common . util . concurrent . Uninterruptibles ; <nl> import org . junit . Test ; <nl> <nl> - import static org . junit . Assert . assertEquals ; <nl> - import static org . apache . cassandra . Util . column ; <nl> + import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> - import com . google . common . util . concurrent . Uninterruptibles ; <nl> + import static org . junit . Assert . assertEquals ; <nl> <nl> + import static org . apache . cassandra . Util . column ; <nl> + import static org . apache . cassandra . Util . tombstone ; <nl> <nl> public class RowTest extends SchemaLoader <nl> { <nl> @ @ - 46 , 6 + 47 , 38 @ @ public class RowTest extends SchemaLoader <nl> ColumnFamily cfDiff = cf1 . diff ( cf2 ) ; <nl> assertEquals ( cfDiff . getColumnCount ( ) , 0 ) ; <nl> assertEquals ( cfDiff . deletionInfo ( ) , delInfo ) ; <nl> + <nl> + RangeTombstone tombstone1 = tombstone ( " 1 " , " 11 " , ( long ) 123 , 123 ) ; <nl> + RangeTombstone tombstone1 _ 2 = tombstone ( " 111 " , " 112 " , ( long ) 1230 , 123 ) ; <nl> + RangeTombstone tombstone2 _ 1 = tombstone ( " 2 " , " 22 " , ( long ) 123 , 123 ) ; <nl> + RangeTombstone tombstone2 _ 2 = tombstone ( " 2 " , " 24 " , ( long ) 123 , 123 ) ; <nl> + RangeTombstone tombstone3 _ 1 = tombstone ( " 3 " , " 31 " , ( long ) 123 , 123 ) ; <nl> + RangeTombstone tombstone3 _ 2 = tombstone ( " 3 " , " 31 " , ( long ) 1230 , 123 ) ; <nl> + RangeTombstone tombstone4 _ 1 = tombstone ( " 4 " , " 41 " , ( long ) 123 , 123 ) ; <nl> + RangeTombstone tombstone4 _ 2 = tombstone ( " 4 " , " 41 " , ( long ) 123 , 1230 ) ; <nl> + RangeTombstone tombstone5 _ 2 = tombstone ( " 5 " , " 51 " , ( long ) 123 , 1230 ) ; <nl> + cf1 . delete ( tombstone1 ) ; <nl> + cf1 . delete ( tombstone2 _ 1 ) ; <nl> + cf1 . delete ( tombstone3 _ 1 ) ; <nl> + cf1 . delete ( tombstone4 _ 1 ) ; <nl> + <nl> + cf2 . delete ( tombstone1 ) ; <nl> + cf2 . delete ( tombstone1 _ 2 ) ; <nl> + cf2 . delete ( tombstone2 _ 2 ) ; <nl> + cf2 . delete ( tombstone3 _ 2 ) ; <nl> + cf2 . delete ( tombstone4 _ 2 ) ; <nl> + cf2 . delete ( tombstone5 _ 2 ) ; <nl> + <nl> + cfDiff = cf1 . diff ( cf2 ) ; <nl> + assertEquals ( 0 , cfDiff . getColumnCount ( ) ) ; <nl> + <nl> + / / only tmbstones which differ in superset or have more recent timestamp to be in diff <nl> + delInfo . add ( tombstone1 _ 2 , cf1 . getComparator ( ) ) ; <nl> + delInfo . add ( tombstone2 _ 2 , cf1 . getComparator ( ) ) ; <nl> + delInfo . add ( tombstone3 _ 2 , cf1 . getComparator ( ) ) ; <nl> + delInfo . add ( tombstone5 _ 2 , cf1 . getComparator ( ) ) ; <nl> + <nl> + assertEquals ( delInfo , cfDiff . deletionInfo ( ) ) ; <nl> } <nl> <nl> @ Test
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d518830 . . 52cc2c1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 29 , 7 + 29 , 7 @ @ <nl> * add scheduler JMX metrics ( CASSANDRA - 2962 ) <nl> * add block level checksum for compressed data ( CASSANDRA - 1717 ) <nl> * make column family backed column map pluggable and introduce unsynchronized <nl> - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) <nl> + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) <nl> * refactoring of the secondary index api ( CASSANDRA - 2982 ) <nl> * make CL > ONE reads wait for digest reconciliation before returning <nl> ( CASSANDRA - 2494 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> index c316a85 . . 71c7213 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor <nl> this . reversed = reversed ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public AbstractType < ? > getComparator ( ) <nl> { <nl> return comparator ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 1239d1c . . 38bc0d7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer <nl> this . cfm = cfm ; <nl> } <nl> <nl> - public ColumnFamily cloneMeShallow ( ) <nl> + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) <nl> { <nl> - ColumnFamily cf = ColumnFamily . create ( cfm ) ; <nl> + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; <nl> / / since deletion info is immutable , aliasing it is fine <nl> cf . deletionInfo . set ( deletionInfo . get ( ) ) ; <nl> return cf ; <nl> } <nl> <nl> + public ColumnFamily cloneMeShallow ( ) <nl> + { <nl> + return cloneMeShallow ( columns . getFactory ( ) ) ; <nl> + } <nl> + <nl> public AbstractType getSubComparator ( ) <nl> { <nl> IColumnSerializer s = getColumnSerializer ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 0bfd1c5 . . 552d3e9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> - * tombstones that are no longer relevant . * / <nl> + / * * <nl> + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> + * tombstones that are no longer relevant . <nl> + * The returned column family won ' t be thread safe . <nl> + * / <nl> ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) <nl> { <nl> / / special case slicing the entire row : <nl> @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; <nl> if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) <nl> { <nl> - ColumnFamily cf = cached . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> if ( sc ! = null ) <nl> cf . addColumn ( sc , HeapAllocator . instance ) ; <nl> return removeDeleted ( cf , gcBefore ) ; <nl> @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> <nl> IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; <nl> - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; <nl> / / TODO this is necessary because when we collate supercolumns together , we don ' t check <nl> / / their subcolumns for relevance , so we need to do a second prune post facto here . <nl> diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> index 37f5a60 . . 624dec7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns <nl> public ISortedColumns cloneMe ( ) ; <nl> <nl> / * * <nl> + * Returns the factory used for this ISortedColumns implementation . <nl> + * / <nl> + public Factory getFactory ( ) ; <nl> + <nl> + / * * <nl> * Adds a column to this column map . <nl> * If a column with the same name is already present in the map , it will <nl> * be replaced by the newly added column . <nl> diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> index cd2488a . . 13a111a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new ThreadSafeSortedColumns ( this ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> index 34e83dc . . 6c3fc42 100644 <nl> - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new TreeMapBackedSortedColumns ( this ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 28f79f9 . . 8815a92 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 15 : 
 + * Backport CASSANDRA - 6863 without digest updates ( CASSANDRA - 8989 ) 
 * Don ' t include tmp files when doing offline relevel ( CASSANDRA - 9088 ) 
 * Use the proper CAS WriteType when finishing a previous round during Paxos 
 preparation ( CASSANDRA - 8672 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 38c72e0 . . a294525 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 321 , 6 + 321 , 8 @ @ public abstract class ColumnFamily implements Iterable < Column > , IRowCacheEntry 
 } 
 } 
 
 + cfDiff . setDeletionInfo ( deletionInfo ( ) . diff ( cfComposite . deletionInfo ( ) ) ) ; 
 + 
 if ( ! cfDiff . isEmpty ( ) ) 
 return cfDiff ; 
 return null ; 
 diff - - git a / src / java / org / apache / cassandra / db / DeletionInfo . java b / src / java / org / apache / cassandra / db / DeletionInfo . java 
 index 23f46bf . . 27811b3 100644 
 - - - a / src / java / org / apache / cassandra / db / DeletionInfo . java 
 + + + b / src / java / org / apache / cassandra / db / DeletionInfo . java 
 @ @ - 171 , 6 + 171 , 22 @ @ public class DeletionInfo 
 } 
 
 / * * 
 + * Evaluates difference between this deletion info and superset for read repair 
 + * 
 + * @ return the difference between the two , or LIVE if no difference 
 + * / 
 + public DeletionInfo diff ( DeletionInfo superset ) 
 + { 
 + RangeTombstoneList rangeDiff = superset . ranges = = null | | superset . ranges . isEmpty ( ) 
 + ? null 
 + : ranges = = null ? superset . ranges : ranges . diff ( superset . ranges ) ; 
 + 
 + return topLevel . markedForDeleteAt ! = superset . topLevel . markedForDeleteAt | | rangeDiff ! = null 
 + ? new DeletionInfo ( superset . topLevel , rangeDiff ) 
 + : DeletionInfo . live ( ) ; 
 + } 
 + 
 + / * * 
 * Returns true if { @ code purge } would remove the top - level tombstone or any of the range 
 * tombstones , false otherwise . 
 * @ param gcBefore timestamp ( in seconds ) before which tombstones should be purged 
 diff - - git a / src / java / org / apache / cassandra / db / RangeTombstoneList . java b / src / java / org / apache / cassandra / db / RangeTombstoneList . java 
 index dadcc20 . . b49c2fc 100644 
 - - - a / src / java / org / apache / cassandra / db / RangeTombstoneList . java 
 + + + b / src / java / org / apache / cassandra / db / RangeTombstoneList . java 
 @ @ - 333 , 6 + 333 , 45 @ @ public class RangeTombstoneList implements Iterable < RangeTombstone > 
 } ; 
 } 
 
 + / * * 
 + * Evaluates a diff between superset ( known to be all merged tombstones ) and this list for read repair 
 + * 
 + * @ return null if there is no difference 
 + * / 
 + public RangeTombstoneList diff ( RangeTombstoneList superset ) 
 + { 
 + if ( isEmpty ( ) ) 
 + return superset ; 
 + 
 + assert size < = superset . size ; 
 + 
 + RangeTombstoneList diff = null ; 
 + 
 + int j = 0 ; / / index to iterate through our own list 
 + for ( int i = 0 ; i < superset . size ; i + + ) 
 + { 
 + boolean sameStart = j < size & & starts [ j ] . equals ( superset . starts [ i ] ) ; 
 + / / don ' t care about local deletion time here . for RR it doesn ' t makes sense 
 + if ( ! sameStart 
 + | | ! ends [ j ] . equals ( superset . ends [ i ] ) 
 + | | markedAts [ j ] ! = superset . markedAts [ i ] ) 
 + { 
 + if ( diff = = null ) 
 + diff = new RangeTombstoneList ( comparator , Math . min ( 8 , superset . size - i ) ) ; 
 + diff . add ( superset . starts [ i ] , superset . ends [ i ] , superset . markedAts [ i ] , superset . delTimes [ i ] ) ; 
 + 
 + if ( sameStart ) 
 + j + + ; 
 + } 
 + else 
 + { 
 + j + + ; 
 + } 
 + } 
 + 
 + return diff ; 
 + } 
 + 
 @ Override 
 public boolean equals ( Object o ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / Util . java b / test / unit / org / apache / cassandra / Util . java 
 index a71dc48 . . 76afa37 100644 
 - - - a / test / unit / org / apache / cassandra / Util . java 
 + + + b / test / unit / org / apache / cassandra / Util . java 
 @ @ - 281 , 4 + 281 , 9 @ @ public class Util 
 
 assert thrown : exception . getName ( ) + " not received " ; 
 } 
 + 
 + public static RangeTombstone tombstone ( String start , String finish , long timestamp , int localtime ) 
 + { 
 + return new RangeTombstone ( ByteBufferUtil . bytes ( start ) , ByteBufferUtil . bytes ( finish ) , timestamp , localtime ) ; 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / RowTest . java b / test / unit / org / apache / cassandra / db / RowTest . java 
 index 2571fa5 . . c7c7023 100644 
 - - - a / test / unit / org / apache / cassandra / db / RowTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RowTest . java 
 @ @ - 21 , 15 + 21 , 16 @ @ package org . apache . cassandra . db ; 
 import java . util . Arrays ; 
 import java . util . concurrent . TimeUnit ; 
 
 - import org . apache . cassandra . SchemaLoader ; 
 + import com . google . common . util . concurrent . Uninterruptibles ; 
 import org . junit . Test ; 
 
 - import static org . junit . Assert . assertEquals ; 
 - import static org . apache . cassandra . Util . column ; 
 + import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 - import com . google . common . util . concurrent . Uninterruptibles ; 
 + import static org . junit . Assert . assertEquals ; 
 
 + import static org . apache . cassandra . Util . column ; 
 + import static org . apache . cassandra . Util . tombstone ; 
 
 public class RowTest extends SchemaLoader 
 { 
 @ @ - 46 , 6 + 47 , 38 @ @ public class RowTest extends SchemaLoader 
 ColumnFamily cfDiff = cf1 . diff ( cf2 ) ; 
 assertEquals ( cfDiff . getColumnCount ( ) , 0 ) ; 
 assertEquals ( cfDiff . deletionInfo ( ) , delInfo ) ; 
 + 
 + RangeTombstone tombstone1 = tombstone ( " 1 " , " 11 " , ( long ) 123 , 123 ) ; 
 + RangeTombstone tombstone1 _ 2 = tombstone ( " 111 " , " 112 " , ( long ) 1230 , 123 ) ; 
 + RangeTombstone tombstone2 _ 1 = tombstone ( " 2 " , " 22 " , ( long ) 123 , 123 ) ; 
 + RangeTombstone tombstone2 _ 2 = tombstone ( " 2 " , " 24 " , ( long ) 123 , 123 ) ; 
 + RangeTombstone tombstone3 _ 1 = tombstone ( " 3 " , " 31 " , ( long ) 123 , 123 ) ; 
 + RangeTombstone tombstone3 _ 2 = tombstone ( " 3 " , " 31 " , ( long ) 1230 , 123 ) ; 
 + RangeTombstone tombstone4 _ 1 = tombstone ( " 4 " , " 41 " , ( long ) 123 , 123 ) ; 
 + RangeTombstone tombstone4 _ 2 = tombstone ( " 4 " , " 41 " , ( long ) 123 , 1230 ) ; 
 + RangeTombstone tombstone5 _ 2 = tombstone ( " 5 " , " 51 " , ( long ) 123 , 1230 ) ; 
 + cf1 . delete ( tombstone1 ) ; 
 + cf1 . delete ( tombstone2 _ 1 ) ; 
 + cf1 . delete ( tombstone3 _ 1 ) ; 
 + cf1 . delete ( tombstone4 _ 1 ) ; 
 + 
 + cf2 . delete ( tombstone1 ) ; 
 + cf2 . delete ( tombstone1 _ 2 ) ; 
 + cf2 . delete ( tombstone2 _ 2 ) ; 
 + cf2 . delete ( tombstone3 _ 2 ) ; 
 + cf2 . delete ( tombstone4 _ 2 ) ; 
 + cf2 . delete ( tombstone5 _ 2 ) ; 
 + 
 + cfDiff = cf1 . diff ( cf2 ) ; 
 + assertEquals ( 0 , cfDiff . getColumnCount ( ) ) ; 
 + 
 + / / only tmbstones which differ in superset or have more recent timestamp to be in diff 
 + delInfo . add ( tombstone1 _ 2 , cf1 . getComparator ( ) ) ; 
 + delInfo . add ( tombstone2 _ 2 , cf1 . getComparator ( ) ) ; 
 + delInfo . add ( tombstone3 _ 2 , cf1 . getComparator ( ) ) ; 
 + delInfo . add ( tombstone5 _ 2 , cf1 . getComparator ( ) ) ; 
 + 
 + assertEquals ( delInfo , cfDiff . deletionInfo ( ) ) ; 
 } 
 
 @ Test

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d518830 . . 52cc2c1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 29 , 7 + 29 , 7 @ @ 
 * add scheduler JMX metrics ( CASSANDRA - 2962 ) 
 * add block level checksum for compressed data ( CASSANDRA - 1717 ) 
 * make column family backed column map pluggable and introduce unsynchronized 
 - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) 
 + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) 
 * refactoring of the secondary index api ( CASSANDRA - 2982 ) 
 * make CL > ONE reads wait for digest reconciliation before returning 
 ( CASSANDRA - 2494 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 index c316a85 . . 71c7213 100644 
 - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor 
 this . reversed = reversed ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public AbstractType < ? > getComparator ( ) 
 { 
 return comparator ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 1239d1c . . 38bc0d7 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer 
 this . cfm = cfm ; 
 } 
 
 - public ColumnFamily cloneMeShallow ( ) 
 + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) 
 { 
 - ColumnFamily cf = ColumnFamily . create ( cfm ) ; 
 + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; 
 / / since deletion info is immutable , aliasing it is fine 
 cf . deletionInfo . set ( deletionInfo . get ( ) ) ; 
 return cf ; 
 } 
 
 + public ColumnFamily cloneMeShallow ( ) 
 + { 
 + return cloneMeShallow ( columns . getFactory ( ) ) ; 
 + } 
 + 
 public AbstractType getSubComparator ( ) 
 { 
 IColumnSerializer s = getColumnSerializer ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 0bfd1c5 . . 552d3e9 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 - * tombstones that are no longer relevant . * / 
 + / * * 
 + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 + * tombstones that are no longer relevant . 
 + * The returned column family won ' t be thread safe . 
 + * / 
 ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) 
 { 
 / / special case slicing the entire row : 
 @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; 
 if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) 
 { 
 - ColumnFamily cf = cached . cloneMeShallow ( ) ; 
 + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 if ( sc ! = null ) 
 cf . addColumn ( sc , HeapAllocator . instance ) ; 
 return removeDeleted ( cf , gcBefore ) ; 
 @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 
 IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; 
 - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; 
 + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; 
 / / TODO this is necessary because when we collate supercolumns together , we don ' t check 
 / / their subcolumns for relevance , so we need to do a second prune post facto here . 
 diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 index 37f5a60 . . 624dec7 100644 
 - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns 
 public ISortedColumns cloneMe ( ) ; 
 
 / * * 
 + * Returns the factory used for this ISortedColumns implementation . 
 + * / 
 + public Factory getFactory ( ) ; 
 + 
 + / * * 
 * Adds a column to this column map . 
 * If a column with the same name is already present in the map , it will 
 * be replaced by the newly added column . 
 diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 index cd2488a . . 13a111a 100644 
 - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new ThreadSafeSortedColumns ( this ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 index 34e83dc . . 6c3fc42 100644 
 - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new TreeMapBackedSortedColumns ( this ) ;
