BLEU SCORE: 0.016087046643979717

TEST MSG: Switch stress to use ITransportFactory
GENERATED MSG: Version and licenses for 2 . 0 . 0 - beta2

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 56a72ef . . 94b21d4 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 17 , 6 + 17 , 7 @ @ <nl> * Add AbstractCompactionStrategy . startup ( ) method ( CASSANDRA - 6637 ) <nl> * SSTableScanner may skip rows during cleanup ( CASSANDRA - 6638 ) <nl> * sstables from stalled repair sessions can resurrect deleted data ( CASSANDRA - 6503 ) <nl> + * Switch stress to use ITransportFactory ( CASSANDRA - 6641 ) <nl> Merged from 1 . 2 : <nl> * fsync compression metadata ( CASSANDRA - 6531 ) <nl> * Validate CF existence on execution for prepared statement ( CASSANDRA - 6535 ) <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliOptions . java b / src / java / org / apache / cassandra / cli / CliOptions . java <nl> index 68f17c9 . . 7894bf9 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliOptions . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliOptions . java <nl> @ @ - 17 , 9 + 17 , 15 @ @ <nl> * / <nl> package org . apache . cassandra . cli ; <nl> <nl> + import java . util . HashMap ; <nl> + import java . util . Map ; <nl> + <nl> + import com . google . common . base . Joiner ; <nl> import org . apache . commons . cli . * ; <nl> <nl> + import org . apache . cassandra . config . EncryptionOptions ; <nl> import org . apache . cassandra . thrift . ITransportFactory ; <nl> + import org . apache . cassandra . thrift . SSLTransportFactory ; <nl> <nl> / * * <nl> * <nl> @ @ - 114 , 11 + 120 , 6 @ @ public class CliOptions <nl> css . hostName = DEFAULT _ HOST ; <nl> } <nl> <nl> - if ( cmd . hasOption ( TRANSPORT _ FACTORY ) ) <nl> - { <nl> - css . transportFactory = validateAndSetTransportFactory ( cmd . getOptionValue ( TRANSPORT _ FACTORY ) ) ; <nl> - } <nl> - <nl> if ( cmd . hasOption ( DEBUG _ OPTION ) ) <nl> { <nl> css . debug = true ; <nl> @ @ - 217 , 6 + 218 , 12 @ @ public class CliOptions <nl> css . encOptions . cipher _ suites = cmd . getOptionValue ( SSL _ CIPHER _ SUITES ) . split ( " , " ) ; <nl> } <nl> <nl> + if ( cmd . hasOption ( TRANSPORT _ FACTORY ) ) <nl> + { <nl> + css . transportFactory = validateAndSetTransportFactory ( cmd . getOptionValue ( TRANSPORT _ FACTORY ) ) ; <nl> + configureTransportFactory ( css . transportFactory , css . encOptions ) ; <nl> + } <nl> + <nl> / / Abort if there are any unrecognized arguments left <nl> if ( cmd . getArgs ( ) . length > 0 ) <nl> { <nl> @ @ - 281 , 4 + 288 , 32 @ @ public class CliOptions <nl> throw new IllegalArgumentException ( String . format ( " Cannot create a transport factory ' % s ' . " , transportFactory ) , e ) ; <nl> } <nl> } <nl> + <nl> + private static void configureTransportFactory ( ITransportFactory transportFactory , EncryptionOptions encOptions ) <nl> + { <nl> + Map < String , String > options = new HashMap < > ( ) ; <nl> + / / If the supplied factory supports the same set of options as our SSL impl , set those <nl> + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . TRUSTSTORE ) ) <nl> + options . put ( SSLTransportFactory . TRUSTSTORE , encOptions . truststore ) ; <nl> + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . TRUSTSTORE _ PASSWORD ) ) <nl> + options . put ( SSLTransportFactory . TRUSTSTORE _ PASSWORD , encOptions . truststore _ password ) ; <nl> + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . PROTOCOL ) ) <nl> + options . put ( SSLTransportFactory . PROTOCOL , encOptions . protocol ) ; <nl> + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . CIPHER _ SUITES ) ) <nl> + options . put ( SSLTransportFactory . CIPHER _ SUITES , Joiner . on ( ' , ' ) . join ( encOptions . cipher _ suites ) ) ; <nl> + <nl> + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . KEYSTORE ) <nl> + & & encOptions . require _ client _ auth ) <nl> + options . put ( SSLTransportFactory . KEYSTORE , encOptions . keystore ) ; <nl> + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . KEYSTORE _ PASSWORD ) <nl> + & & encOptions . require _ client _ auth ) <nl> + options . put ( SSLTransportFactory . KEYSTORE _ PASSWORD , encOptions . keystore _ password ) ; <nl> + <nl> + / / Now check if any of the factory ' s supported options are set as system properties <nl> + for ( String optionKey : transportFactory . supportedOptions ( ) ) <nl> + if ( System . getProperty ( optionKey ) ! = null ) <nl> + options . put ( optionKey , System . getProperty ( optionKey ) ) ; <nl> + <nl> + transportFactory . setOptions ( options ) ; <nl> + } <nl> } <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / Session . java b / tools / stress / src / org / apache / cassandra / stress / Session . java <nl> index 242fa14 . . 9ac865d 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / Session . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / Session . java <nl> @ @ - 24 , 29 + 24 , 25 @ @ import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> + import com . google . common . base . Joiner ; <nl> + import org . apache . commons . cli . * ; <nl> + import org . apache . commons . lang3 . StringUtils ; <nl> import com . yammer . metrics . Metrics ; <nl> <nl> import org . apache . cassandra . auth . IAuthenticator ; <nl> - import org . apache . cassandra . cli . transport . FramedTransportFactory ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> - import org . apache . cassandra . config . EncryptionOptions ; <nl> import org . apache . cassandra . config . EncryptionOptions . ClientEncryptionOptions ; <nl> + import org . apache . cassandra . config . EncryptionOptions ; <nl> + import org . apache . cassandra . db . ColumnFamilyType ; <nl> + import org . apache . cassandra . db . marshal . * ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . exceptions . SyntaxException ; <nl> - import org . apache . cassandra . db . marshal . * ; <nl> - import org . apache . commons . cli . * ; <nl> - <nl> - import org . apache . cassandra . db . ColumnFamilyType ; <nl> import org . apache . cassandra . stress . util . CassandraClient ; <nl> - import org . apache . cassandra . transport . SimpleClient ; <nl> import org . apache . cassandra . thrift . * ; <nl> - import org . apache . commons . lang3 . StringUtils ; <nl> - <nl> + import org . apache . cassandra . transport . SimpleClient ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . thrift . protocol . TBinaryProtocol ; <nl> - import org . apache . thrift . transport . TSocket ; <nl> import org . apache . thrift . transport . TTransport ; <nl> - import org . apache . thrift . transport . TTransportFactory ; <nl> <nl> public class Session implements Serializable <nl> { <nl> @ @ - 175 , 7 + 171 , 7 @ @ public class Session implements Serializable <nl> public final boolean timeUUIDComparator ; <nl> public double traceProbability = 0 . 0 ; <nl> public EncryptionOptions encOptions = new ClientEncryptionOptions ( ) ; <nl> - public TTransportFactory transportFactory = new FramedTransportFactory ( ) ; <nl> + public ITransportFactory transportFactory = new TFramedTransportFactory ( ) ; <nl> <nl> public Session ( String [ ] arguments ) throws IllegalArgumentException , SyntaxException <nl> { <nl> @ @ - 455 , 7 + 451 , 10 @ @ public class Session implements Serializable <nl> encOptions . cipher _ suites = cmd . getOptionValue ( SSL _ CIPHER _ SUITES ) . split ( " , " ) ; <nl> <nl> if ( cmd . hasOption ( " tf " ) ) <nl> + { <nl> transportFactory = validateAndSetTransportFactory ( cmd . getOptionValue ( " tf " ) ) ; <nl> + configureTransportFactory ( transportFactory , encOptions ) ; <nl> + } <nl> <nl> if ( cmd . hasOption ( " un " ) ) <nl> username = cmd . getOptionValue ( " un " ) ; <nl> @ @ - 476 , 17 + 475 , 17 @ @ public class Session implements Serializable <nl> sigma = numDifferentKeys * STDev ; <nl> } <nl> <nl> - private TTransportFactory validateAndSetTransportFactory ( String transportFactory ) <nl> + private ITransportFactory validateAndSetTransportFactory ( String transportFactory ) <nl> { <nl> try <nl> { <nl> Class factory = Class . forName ( transportFactory ) ; <nl> <nl> - if ( ! TTransportFactory . class . isAssignableFrom ( factory ) ) <nl> + if ( ! ITransportFactory . class . isAssignableFrom ( factory ) ) <nl> throw new IllegalArgumentException ( String . format ( " transport factory ' % s ' " + <nl> - " not derived from TTransportFactory " , transportFactory ) ) ; <nl> + " not derived from ITransportFactory " , transportFactory ) ) ; <nl> <nl> - return ( TTransportFactory ) factory . newInstance ( ) ; <nl> + return ( ITransportFactory ) factory . newInstance ( ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 494 , 6 + 493 , 34 @ @ public class Session implements Serializable <nl> } <nl> } <nl> <nl> + private void configureTransportFactory ( ITransportFactory transportFactory , EncryptionOptions encOptions ) <nl> + { <nl> + Map < String , String > options = new HashMap < > ( ) ; <nl> + / / If the supplied factory supports the same set of options as our SSL impl , set those <nl> + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . TRUSTSTORE ) ) <nl> + options . put ( SSLTransportFactory . TRUSTSTORE , encOptions . truststore ) ; <nl> + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . TRUSTSTORE _ PASSWORD ) ) <nl> + options . put ( SSLTransportFactory . TRUSTSTORE _ PASSWORD , encOptions . truststore _ password ) ; <nl> + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . PROTOCOL ) ) <nl> + options . put ( SSLTransportFactory . PROTOCOL , encOptions . protocol ) ; <nl> + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . CIPHER _ SUITES ) ) <nl> + options . put ( SSLTransportFactory . CIPHER _ SUITES , Joiner . on ( ' , ' ) . join ( encOptions . cipher _ suites ) ) ; <nl> + <nl> + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . KEYSTORE ) <nl> + & & encOptions . require _ client _ auth ) <nl> + options . put ( SSLTransportFactory . KEYSTORE , encOptions . keystore ) ; <nl> + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . KEYSTORE _ PASSWORD ) <nl> + & & encOptions . require _ client _ auth ) <nl> + options . put ( SSLTransportFactory . KEYSTORE _ PASSWORD , encOptions . keystore _ password ) ; <nl> + <nl> + / / Now check if any of the factory ' s supported options are set as system properties <nl> + for ( String optionKey : transportFactory . supportedOptions ( ) ) <nl> + if ( System . getProperty ( optionKey ) ! = null ) <nl> + options . put ( optionKey , System . getProperty ( optionKey ) ) ; <nl> + <nl> + transportFactory . setOptions ( options ) ; <nl> + } <nl> + <nl> public int getCardinality ( ) <nl> { <nl> return cardinality ; <nl> @ @ - 748 , 12 + 775 , 11 @ @ public class Session implements Serializable <nl> / / random node selection for fake load balancing <nl> String currentNode = nodes [ Stress . randomizer . nextInt ( nodes . length ) ] ; <nl> <nl> - TSocket socket = new TSocket ( currentNode , port ) ; <nl> - TTransport transport = transportFactory . getTransport ( socket ) ; <nl> - CassandraClient client = new CassandraClient ( new TBinaryProtocol ( transport ) ) ; <nl> - <nl> try <nl> { <nl> + TTransport transport = transportFactory . openTransport ( currentNode , port ) ; <nl> + CassandraClient client = new CassandraClient ( new TBinaryProtocol ( transport ) ) ; <nl> + <nl> if ( ! transport . isOpen ( ) ) <nl> transport . open ( ) ; <nl> <nl> @ @ - 771 , 6 + 797 , 7 @ @ public class Session implements Serializable <nl> AuthenticationRequest authenticationRequest = new AuthenticationRequest ( credentials ) ; <nl> client . login ( authenticationRequest ) ; <nl> } <nl> + return client ; <nl> } <nl> catch ( AuthenticationException e ) <nl> { <nl> @ @ - 788 , 8 + 815 , 6 @ @ public class Session implements Serializable <nl> { <nl> throw new RuntimeException ( e . getMessage ( ) ) ; <nl> } <nl> - <nl> - return client ; <nl> } <nl> <nl> public SimpleClient getNativeClient ( )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f7beb5e . . 9f1aa1d 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 3 + 1 , 7 @ @ <nl> + 2 . 0 . 0 - rc1 <nl> + * fix potential spurious wakeup in AsyncOneResponse ( CASSANDRA - 5690 ) <nl> + <nl> + <nl> 2 . 0 . 0 - beta2 <nl> * Replace countPendingHints with Hints Created metric ( CASSANDRA - 5746 ) <nl> * Allow nodetool with no args , and with help to run without a server ( CASSANDRA - 5734 ) <nl> diff - - git a / src / java / org / apache / cassandra / net / AsyncOneResponse . java b / src / java / org / apache / cassandra / net / AsyncOneResponse . java <nl> index bb3058e . . b7ef227 100644 <nl> - - - a / src / java / org / apache / cassandra / net / AsyncOneResponse . java <nl> + + + b / src / java / org / apache / cassandra / net / AsyncOneResponse . java <nl> @ @ - 19 , 10 + 19 , 6 @ @ package org . apache . cassandra . net ; <nl> <nl> import java . util . concurrent . TimeUnit ; <nl> import java . util . concurrent . TimeoutException ; <nl> - import java . util . concurrent . atomic . AtomicBoolean ; <nl> - import java . util . concurrent . locks . Condition ; <nl> - import java . util . concurrent . locks . Lock ; <nl> - import java . util . concurrent . locks . ReentrantLock ; <nl> <nl> / * * <nl> * A callback specialized for returning a value from a single target ; that is , this is for messages <nl> @ @ - 31 , 64 + 27 , 52 @ @ import java . util . concurrent . locks . ReentrantLock ; <nl> public class AsyncOneResponse < T > implements IAsyncCallback < T > <nl> { <nl> private T result ; <nl> - private final AtomicBoolean done = new AtomicBoolean ( false ) ; <nl> - private final Lock lock = new ReentrantLock ( ) ; <nl> - private final Condition condition ; <nl> - private final long start ; <nl> - <nl> - public AsyncOneResponse ( ) <nl> - { <nl> - condition = lock . newCondition ( ) ; <nl> - start = System . nanoTime ( ) ; <nl> - } <nl> + private boolean done ; <nl> + private final long start = System . nanoTime ( ) ; <nl> <nl> public T get ( long timeout , TimeUnit tu ) throws TimeoutException <nl> { <nl> - lock . lock ( ) ; <nl> + timeout = tu . toNanos ( timeout ) ; <nl> + boolean interrupted = false ; <nl> try <nl> { <nl> - boolean bVal = true ; <nl> - try <nl> + synchronized ( this ) <nl> { <nl> - if ( ! done . get ( ) ) <nl> + while ( ! done ) <nl> { <nl> - timeout = tu . toNanos ( timeout ) ; <nl> - long overall _ timeout = timeout - ( System . nanoTime ( ) - start ) ; <nl> - bVal = overall _ timeout > 0 & & condition . await ( overall _ timeout , TimeUnit . NANOSECONDS ) ; <nl> + try <nl> + { <nl> + long overallTimeout = timeout - ( System . nanoTime ( ) - start ) ; <nl> + if ( overallTimeout < = 0 ) <nl> + { <nl> + throw new TimeoutException ( " Operation timed out . " ) ; <nl> + } <nl> + TimeUnit . NANOSECONDS . timedWait ( this , overallTimeout ) ; <nl> + } <nl> + catch ( InterruptedException e ) <nl> + { <nl> + interrupted = true ; <nl> + } <nl> } <nl> } <nl> - catch ( InterruptedException ex ) <nl> - { <nl> - throw new AssertionError ( ex ) ; <nl> - } <nl> - <nl> - if ( ! bVal & & ! done . get ( ) ) <nl> - { <nl> - throw new TimeoutException ( " Operation timed out . " ) ; <nl> - } <nl> } <nl> finally <nl> { <nl> - lock . unlock ( ) ; <nl> + if ( interrupted ) <nl> + { <nl> + Thread . currentThread ( ) . interrupt ( ) ; <nl> + } <nl> } <nl> return result ; <nl> } <nl> <nl> - public void response ( MessageIn < T > response ) <nl> + public synchronized void response ( MessageIn < T > response ) <nl> { <nl> - try <nl> - { <nl> - lock . lock ( ) ; <nl> - if ( ! done . get ( ) ) <nl> - { <nl> - result = response . payload ; <nl> - done . set ( true ) ; <nl> - condition . signal ( ) ; <nl> - } <nl> - } <nl> - finally <nl> + if ( ! done ) <nl> { <nl> - lock . unlock ( ) ; <nl> + result = response . payload ; <nl> + done = true ; <nl> + this . notifyAll ( ) ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 56a72ef . . 94b21d4 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 17 , 6 + 17 , 7 @ @ 
 * Add AbstractCompactionStrategy . startup ( ) method ( CASSANDRA - 6637 ) 
 * SSTableScanner may skip rows during cleanup ( CASSANDRA - 6638 ) 
 * sstables from stalled repair sessions can resurrect deleted data ( CASSANDRA - 6503 ) 
 + * Switch stress to use ITransportFactory ( CASSANDRA - 6641 ) 
 Merged from 1 . 2 : 
 * fsync compression metadata ( CASSANDRA - 6531 ) 
 * Validate CF existence on execution for prepared statement ( CASSANDRA - 6535 ) 
 diff - - git a / src / java / org / apache / cassandra / cli / CliOptions . java b / src / java / org / apache / cassandra / cli / CliOptions . java 
 index 68f17c9 . . 7894bf9 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliOptions . java 
 + + + b / src / java / org / apache / cassandra / cli / CliOptions . java 
 @ @ - 17 , 9 + 17 , 15 @ @ 
 * / 
 package org . apache . cassandra . cli ; 
 
 + import java . util . HashMap ; 
 + import java . util . Map ; 
 + 
 + import com . google . common . base . Joiner ; 
 import org . apache . commons . cli . * ; 
 
 + import org . apache . cassandra . config . EncryptionOptions ; 
 import org . apache . cassandra . thrift . ITransportFactory ; 
 + import org . apache . cassandra . thrift . SSLTransportFactory ; 
 
 / * * 
 * 
 @ @ - 114 , 11 + 120 , 6 @ @ public class CliOptions 
 css . hostName = DEFAULT _ HOST ; 
 } 
 
 - if ( cmd . hasOption ( TRANSPORT _ FACTORY ) ) 
 - { 
 - css . transportFactory = validateAndSetTransportFactory ( cmd . getOptionValue ( TRANSPORT _ FACTORY ) ) ; 
 - } 
 - 
 if ( cmd . hasOption ( DEBUG _ OPTION ) ) 
 { 
 css . debug = true ; 
 @ @ - 217 , 6 + 218 , 12 @ @ public class CliOptions 
 css . encOptions . cipher _ suites = cmd . getOptionValue ( SSL _ CIPHER _ SUITES ) . split ( " , " ) ; 
 } 
 
 + if ( cmd . hasOption ( TRANSPORT _ FACTORY ) ) 
 + { 
 + css . transportFactory = validateAndSetTransportFactory ( cmd . getOptionValue ( TRANSPORT _ FACTORY ) ) ; 
 + configureTransportFactory ( css . transportFactory , css . encOptions ) ; 
 + } 
 + 
 / / Abort if there are any unrecognized arguments left 
 if ( cmd . getArgs ( ) . length > 0 ) 
 { 
 @ @ - 281 , 4 + 288 , 32 @ @ public class CliOptions 
 throw new IllegalArgumentException ( String . format ( " Cannot create a transport factory ' % s ' . " , transportFactory ) , e ) ; 
 } 
 } 
 + 
 + private static void configureTransportFactory ( ITransportFactory transportFactory , EncryptionOptions encOptions ) 
 + { 
 + Map < String , String > options = new HashMap < > ( ) ; 
 + / / If the supplied factory supports the same set of options as our SSL impl , set those 
 + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . TRUSTSTORE ) ) 
 + options . put ( SSLTransportFactory . TRUSTSTORE , encOptions . truststore ) ; 
 + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . TRUSTSTORE _ PASSWORD ) ) 
 + options . put ( SSLTransportFactory . TRUSTSTORE _ PASSWORD , encOptions . truststore _ password ) ; 
 + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . PROTOCOL ) ) 
 + options . put ( SSLTransportFactory . PROTOCOL , encOptions . protocol ) ; 
 + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . CIPHER _ SUITES ) ) 
 + options . put ( SSLTransportFactory . CIPHER _ SUITES , Joiner . on ( ' , ' ) . join ( encOptions . cipher _ suites ) ) ; 
 + 
 + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . KEYSTORE ) 
 + & & encOptions . require _ client _ auth ) 
 + options . put ( SSLTransportFactory . KEYSTORE , encOptions . keystore ) ; 
 + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . KEYSTORE _ PASSWORD ) 
 + & & encOptions . require _ client _ auth ) 
 + options . put ( SSLTransportFactory . KEYSTORE _ PASSWORD , encOptions . keystore _ password ) ; 
 + 
 + / / Now check if any of the factory ' s supported options are set as system properties 
 + for ( String optionKey : transportFactory . supportedOptions ( ) ) 
 + if ( System . getProperty ( optionKey ) ! = null ) 
 + options . put ( optionKey , System . getProperty ( optionKey ) ) ; 
 + 
 + transportFactory . setOptions ( options ) ; 
 + } 
 } 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / Session . java b / tools / stress / src / org / apache / cassandra / stress / Session . java 
 index 242fa14 . . 9ac865d 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / Session . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / Session . java 
 @ @ - 24 , 29 + 24 , 25 @ @ import java . nio . ByteBuffer ; 
 import java . util . * ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 
 + import com . google . common . base . Joiner ; 
 + import org . apache . commons . cli . * ; 
 + import org . apache . commons . lang3 . StringUtils ; 
 import com . yammer . metrics . Metrics ; 
 
 import org . apache . cassandra . auth . IAuthenticator ; 
 - import org . apache . cassandra . cli . transport . FramedTransportFactory ; 
 import org . apache . cassandra . config . CFMetaData ; 
 - import org . apache . cassandra . config . EncryptionOptions ; 
 import org . apache . cassandra . config . EncryptionOptions . ClientEncryptionOptions ; 
 + import org . apache . cassandra . config . EncryptionOptions ; 
 + import org . apache . cassandra . db . ColumnFamilyType ; 
 + import org . apache . cassandra . db . marshal . * ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . exceptions . SyntaxException ; 
 - import org . apache . cassandra . db . marshal . * ; 
 - import org . apache . commons . cli . * ; 
 - 
 - import org . apache . cassandra . db . ColumnFamilyType ; 
 import org . apache . cassandra . stress . util . CassandraClient ; 
 - import org . apache . cassandra . transport . SimpleClient ; 
 import org . apache . cassandra . thrift . * ; 
 - import org . apache . commons . lang3 . StringUtils ; 
 - 
 + import org . apache . cassandra . transport . SimpleClient ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . thrift . protocol . TBinaryProtocol ; 
 - import org . apache . thrift . transport . TSocket ; 
 import org . apache . thrift . transport . TTransport ; 
 - import org . apache . thrift . transport . TTransportFactory ; 
 
 public class Session implements Serializable 
 { 
 @ @ - 175 , 7 + 171 , 7 @ @ public class Session implements Serializable 
 public final boolean timeUUIDComparator ; 
 public double traceProbability = 0 . 0 ; 
 public EncryptionOptions encOptions = new ClientEncryptionOptions ( ) ; 
 - public TTransportFactory transportFactory = new FramedTransportFactory ( ) ; 
 + public ITransportFactory transportFactory = new TFramedTransportFactory ( ) ; 
 
 public Session ( String [ ] arguments ) throws IllegalArgumentException , SyntaxException 
 { 
 @ @ - 455 , 7 + 451 , 10 @ @ public class Session implements Serializable 
 encOptions . cipher _ suites = cmd . getOptionValue ( SSL _ CIPHER _ SUITES ) . split ( " , " ) ; 
 
 if ( cmd . hasOption ( " tf " ) ) 
 + { 
 transportFactory = validateAndSetTransportFactory ( cmd . getOptionValue ( " tf " ) ) ; 
 + configureTransportFactory ( transportFactory , encOptions ) ; 
 + } 
 
 if ( cmd . hasOption ( " un " ) ) 
 username = cmd . getOptionValue ( " un " ) ; 
 @ @ - 476 , 17 + 475 , 17 @ @ public class Session implements Serializable 
 sigma = numDifferentKeys * STDev ; 
 } 
 
 - private TTransportFactory validateAndSetTransportFactory ( String transportFactory ) 
 + private ITransportFactory validateAndSetTransportFactory ( String transportFactory ) 
 { 
 try 
 { 
 Class factory = Class . forName ( transportFactory ) ; 
 
 - if ( ! TTransportFactory . class . isAssignableFrom ( factory ) ) 
 + if ( ! ITransportFactory . class . isAssignableFrom ( factory ) ) 
 throw new IllegalArgumentException ( String . format ( " transport factory ' % s ' " + 
 - " not derived from TTransportFactory " , transportFactory ) ) ; 
 + " not derived from ITransportFactory " , transportFactory ) ) ; 
 
 - return ( TTransportFactory ) factory . newInstance ( ) ; 
 + return ( ITransportFactory ) factory . newInstance ( ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 494 , 6 + 493 , 34 @ @ public class Session implements Serializable 
 } 
 } 
 
 + private void configureTransportFactory ( ITransportFactory transportFactory , EncryptionOptions encOptions ) 
 + { 
 + Map < String , String > options = new HashMap < > ( ) ; 
 + / / If the supplied factory supports the same set of options as our SSL impl , set those 
 + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . TRUSTSTORE ) ) 
 + options . put ( SSLTransportFactory . TRUSTSTORE , encOptions . truststore ) ; 
 + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . TRUSTSTORE _ PASSWORD ) ) 
 + options . put ( SSLTransportFactory . TRUSTSTORE _ PASSWORD , encOptions . truststore _ password ) ; 
 + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . PROTOCOL ) ) 
 + options . put ( SSLTransportFactory . PROTOCOL , encOptions . protocol ) ; 
 + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . CIPHER _ SUITES ) ) 
 + options . put ( SSLTransportFactory . CIPHER _ SUITES , Joiner . on ( ' , ' ) . join ( encOptions . cipher _ suites ) ) ; 
 + 
 + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . KEYSTORE ) 
 + & & encOptions . require _ client _ auth ) 
 + options . put ( SSLTransportFactory . KEYSTORE , encOptions . keystore ) ; 
 + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . KEYSTORE _ PASSWORD ) 
 + & & encOptions . require _ client _ auth ) 
 + options . put ( SSLTransportFactory . KEYSTORE _ PASSWORD , encOptions . keystore _ password ) ; 
 + 
 + / / Now check if any of the factory ' s supported options are set as system properties 
 + for ( String optionKey : transportFactory . supportedOptions ( ) ) 
 + if ( System . getProperty ( optionKey ) ! = null ) 
 + options . put ( optionKey , System . getProperty ( optionKey ) ) ; 
 + 
 + transportFactory . setOptions ( options ) ; 
 + } 
 + 
 public int getCardinality ( ) 
 { 
 return cardinality ; 
 @ @ - 748 , 12 + 775 , 11 @ @ public class Session implements Serializable 
 / / random node selection for fake load balancing 
 String currentNode = nodes [ Stress . randomizer . nextInt ( nodes . length ) ] ; 
 
 - TSocket socket = new TSocket ( currentNode , port ) ; 
 - TTransport transport = transportFactory . getTransport ( socket ) ; 
 - CassandraClient client = new CassandraClient ( new TBinaryProtocol ( transport ) ) ; 
 - 
 try 
 { 
 + TTransport transport = transportFactory . openTransport ( currentNode , port ) ; 
 + CassandraClient client = new CassandraClient ( new TBinaryProtocol ( transport ) ) ; 
 + 
 if ( ! transport . isOpen ( ) ) 
 transport . open ( ) ; 
 
 @ @ - 771 , 6 + 797 , 7 @ @ public class Session implements Serializable 
 AuthenticationRequest authenticationRequest = new AuthenticationRequest ( credentials ) ; 
 client . login ( authenticationRequest ) ; 
 } 
 + return client ; 
 } 
 catch ( AuthenticationException e ) 
 { 
 @ @ - 788 , 8 + 815 , 6 @ @ public class Session implements Serializable 
 { 
 throw new RuntimeException ( e . getMessage ( ) ) ; 
 } 
 - 
 - return client ; 
 } 
 
 public SimpleClient getNativeClient ( )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f7beb5e . . 9f1aa1d 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 3 + 1 , 7 @ @ 
 + 2 . 0 . 0 - rc1 
 + * fix potential spurious wakeup in AsyncOneResponse ( CASSANDRA - 5690 ) 
 + 
 + 
 2 . 0 . 0 - beta2 
 * Replace countPendingHints with Hints Created metric ( CASSANDRA - 5746 ) 
 * Allow nodetool with no args , and with help to run without a server ( CASSANDRA - 5734 ) 
 diff - - git a / src / java / org / apache / cassandra / net / AsyncOneResponse . java b / src / java / org / apache / cassandra / net / AsyncOneResponse . java 
 index bb3058e . . b7ef227 100644 
 - - - a / src / java / org / apache / cassandra / net / AsyncOneResponse . java 
 + + + b / src / java / org / apache / cassandra / net / AsyncOneResponse . java 
 @ @ - 19 , 10 + 19 , 6 @ @ package org . apache . cassandra . net ; 
 
 import java . util . concurrent . TimeUnit ; 
 import java . util . concurrent . TimeoutException ; 
 - import java . util . concurrent . atomic . AtomicBoolean ; 
 - import java . util . concurrent . locks . Condition ; 
 - import java . util . concurrent . locks . Lock ; 
 - import java . util . concurrent . locks . ReentrantLock ; 
 
 / * * 
 * A callback specialized for returning a value from a single target ; that is , this is for messages 
 @ @ - 31 , 64 + 27 , 52 @ @ import java . util . concurrent . locks . ReentrantLock ; 
 public class AsyncOneResponse < T > implements IAsyncCallback < T > 
 { 
 private T result ; 
 - private final AtomicBoolean done = new AtomicBoolean ( false ) ; 
 - private final Lock lock = new ReentrantLock ( ) ; 
 - private final Condition condition ; 
 - private final long start ; 
 - 
 - public AsyncOneResponse ( ) 
 - { 
 - condition = lock . newCondition ( ) ; 
 - start = System . nanoTime ( ) ; 
 - } 
 + private boolean done ; 
 + private final long start = System . nanoTime ( ) ; 
 
 public T get ( long timeout , TimeUnit tu ) throws TimeoutException 
 { 
 - lock . lock ( ) ; 
 + timeout = tu . toNanos ( timeout ) ; 
 + boolean interrupted = false ; 
 try 
 { 
 - boolean bVal = true ; 
 - try 
 + synchronized ( this ) 
 { 
 - if ( ! done . get ( ) ) 
 + while ( ! done ) 
 { 
 - timeout = tu . toNanos ( timeout ) ; 
 - long overall _ timeout = timeout - ( System . nanoTime ( ) - start ) ; 
 - bVal = overall _ timeout > 0 & & condition . await ( overall _ timeout , TimeUnit . NANOSECONDS ) ; 
 + try 
 + { 
 + long overallTimeout = timeout - ( System . nanoTime ( ) - start ) ; 
 + if ( overallTimeout < = 0 ) 
 + { 
 + throw new TimeoutException ( " Operation timed out . " ) ; 
 + } 
 + TimeUnit . NANOSECONDS . timedWait ( this , overallTimeout ) ; 
 + } 
 + catch ( InterruptedException e ) 
 + { 
 + interrupted = true ; 
 + } 
 } 
 } 
 - catch ( InterruptedException ex ) 
 - { 
 - throw new AssertionError ( ex ) ; 
 - } 
 - 
 - if ( ! bVal & & ! done . get ( ) ) 
 - { 
 - throw new TimeoutException ( " Operation timed out . " ) ; 
 - } 
 } 
 finally 
 { 
 - lock . unlock ( ) ; 
 + if ( interrupted ) 
 + { 
 + Thread . currentThread ( ) . interrupt ( ) ; 
 + } 
 } 
 return result ; 
 } 
 
 - public void response ( MessageIn < T > response ) 
 + public synchronized void response ( MessageIn < T > response ) 
 { 
 - try 
 - { 
 - lock . lock ( ) ; 
 - if ( ! done . get ( ) ) 
 - { 
 - result = response . payload ; 
 - done . set ( true ) ; 
 - condition . signal ( ) ; 
 - } 
 - } 
 - finally 
 + if ( ! done ) 
 { 
 - lock . unlock ( ) ; 
 + result = response . payload ; 
 + done = true ; 
 + this . notifyAll ( ) ; 
 } 
 } 

