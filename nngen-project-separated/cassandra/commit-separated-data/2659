BLEU SCORE: 0.027611988917697356

TEST MSG: Move ByteBuffer functions to ByteBufferUtil and avoid duplication
GENERATED MSG: EMPTY

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / composites / AbstractComposite . java b / src / java / org / apache / cassandra / db / composites / AbstractComposite . java <nl> index fbff930 . . 97417676 100644 <nl> - - - a / src / java / org / apache / cassandra / db / composites / AbstractComposite . java <nl> + + + b / src / java / org / apache / cassandra / db / composites / AbstractComposite . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . nio . ByteBuffer ; <nl> import org . apache . cassandra . db . filter . ColumnSlice ; <nl> import org . apache . cassandra . db . marshal . AbstractCompositeType ; <nl> import org . apache . cassandra . db . marshal . CompositeType ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> public abstract class AbstractComposite implements Composite <nl> { <nl> @ @ - 75 , 12 + 76 , 12 @ @ public abstract class AbstractComposite implements Composite <nl> / / See org . apache . cassandra . db . marshal . CompositeType for details . <nl> ByteBuffer result = ByteBuffer . allocate ( dataSize ( ) + 3 * size ( ) + ( isStatic ( ) ? 2 : 0 ) ) ; <nl> if ( isStatic ( ) ) <nl> - AbstractCompositeType . putShortLength ( result , CompositeType . STATIC _ MARKER ) ; <nl> + ByteBufferUtil . writeShortLength ( result , CompositeType . STATIC _ MARKER ) ; <nl> <nl> for ( int i = 0 ; i < size ( ) ; i + + ) <nl> { <nl> ByteBuffer bb = get ( i ) ; <nl> - AbstractCompositeType . putShortLength ( result , bb . remaining ( ) ) ; <nl> + ByteBufferUtil . writeShortLength ( result , bb . remaining ( ) ) ; <nl> result . put ( bb . duplicate ( ) ) ; <nl> result . put ( ( byte ) 0 ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java b / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java <nl> index 236abc7 . . 8f3aec4 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java <nl> @ @ - 17 , 15 + 17 , 16 @ @ <nl> * / <nl> package org . apache . cassandra . db . marshal ; <nl> <nl> - import org . apache . cassandra . serializers . TypeSerializer ; <nl> - import org . apache . cassandra . serializers . BytesSerializer ; <nl> - import org . apache . cassandra . serializers . MarshalException ; <nl> - <nl> import java . nio . ByteBuffer ; <nl> import java . util . ArrayList ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> <nl> + import org . apache . cassandra . serializers . TypeSerializer ; <nl> + import org . apache . cassandra . serializers . BytesSerializer ; <nl> + import org . apache . cassandra . serializers . MarshalException ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + <nl> / * * <nl> * A class avoiding class duplication between CompositeType and <nl> * DynamicCompositeType . <nl> @ @ - 34 , 44 + 35 , 6 @ @ import java . util . List ; <nl> * / <nl> public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> { <nl> - <nl> - / / changes bb position <nl> - public static int getShortLength ( ByteBuffer bb ) <nl> - { <nl> - int length = ( bb . get ( ) & 0xFF ) < < 8 ; <nl> - return length | ( bb . get ( ) & 0xFF ) ; <nl> - } <nl> - <nl> - / / Doesn ' t change bb position <nl> - protected static int getShortLength ( ByteBuffer bb , int position ) <nl> - { <nl> - int length = ( bb . get ( position ) & 0xFF ) < < 8 ; <nl> - return length | ( bb . get ( position + 1 ) & 0xFF ) ; <nl> - } <nl> - <nl> - / / changes bb position <nl> - public static void putShortLength ( ByteBuffer bb , int length ) <nl> - { <nl> - bb . put ( ( byte ) ( ( length > > 8 ) & 0xFF ) ) ; <nl> - bb . put ( ( byte ) ( length & 0xFF ) ) ; <nl> - } <nl> - <nl> - / / changes bb position <nl> - public static ByteBuffer getBytes ( ByteBuffer bb , int length ) <nl> - { <nl> - ByteBuffer copy = bb . duplicate ( ) ; <nl> - copy . limit ( copy . position ( ) + length ) ; <nl> - bb . position ( bb . position ( ) + length ) ; <nl> - return copy ; <nl> - } <nl> - <nl> - / / changes bb position <nl> - public static ByteBuffer getWithShortLength ( ByteBuffer bb ) <nl> - { <nl> - int length = getShortLength ( bb ) ; <nl> - return getBytes ( bb , length ) ; <nl> - } <nl> - <nl> public int compare ( ByteBuffer o1 , ByteBuffer o2 ) <nl> { <nl> if ( o1 = = null | | ! o1 . hasRemaining ( ) ) <nl> @ @ - 95 , 8 + 58 , 8 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> { <nl> AbstractType < ? > comparator = getComparator ( i , bb1 , bb2 ) ; <nl> <nl> - ByteBuffer value1 = getWithShortLength ( bb1 ) ; <nl> - ByteBuffer value2 = getWithShortLength ( bb2 ) ; <nl> + ByteBuffer value1 = ByteBufferUtil . readBytesWithShortLength ( bb1 ) ; <nl> + ByteBuffer value2 = ByteBufferUtil . readBytesWithShortLength ( bb2 ) ; <nl> <nl> int cmp = comparator . compareCollectionMembers ( value1 , value2 , previous ) ; <nl> if ( cmp ! = 0 ) <nl> @ @ - 135 , 7 + 98 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> while ( bb . remaining ( ) > 0 ) <nl> { <nl> getComparator ( i + + , bb ) ; <nl> - l . add ( getWithShortLength ( bb ) ) ; <nl> + l . add ( ByteBufferUtil . readBytesWithShortLength ( bb ) ) ; <nl> bb . get ( ) ; / / skip end - of - component <nl> } <nl> return l . toArray ( new ByteBuffer [ l . size ( ) ] ) ; <nl> @ @ - 164 , 7 + 127 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> while ( bb . remaining ( ) > 0 ) <nl> { <nl> AbstractType comparator = getComparator ( i , bb ) ; <nl> - ByteBuffer value = getWithShortLength ( bb ) ; <nl> + ByteBuffer value = ByteBufferUtil . readBytesWithShortLength ( bb ) ; <nl> <nl> list . add ( new CompositeComponent ( comparator , value ) ) ; <nl> <nl> @ @ - 237 , 7 + 200 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> sb . append ( " : " ) ; <nl> <nl> AbstractType < ? > comparator = getAndAppendComparator ( i , bb , sb ) ; <nl> - ByteBuffer value = getWithShortLength ( bb ) ; <nl> + ByteBuffer value = ByteBufferUtil . readBytesWithShortLength ( bb ) ; <nl> <nl> sb . append ( escape ( comparator . getString ( value ) ) ) ; <nl> <nl> @ @ - 290 , 7 + 253 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> for ( ByteBuffer component : components ) <nl> { <nl> comparators . get ( i ) . serializeComparator ( bb ) ; <nl> - putShortLength ( bb , component . remaining ( ) ) ; <nl> + ByteBufferUtil . writeShortLength ( bb , component . remaining ( ) ) ; <nl> bb . put ( component ) ; / / it ' s ok to consume component as we won ' t use it anymore <nl> bb . put ( ( byte ) 0 ) ; <nl> + + i ; <nl> @ @ - 318 , 11 + 281 , 11 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> <nl> if ( bb . remaining ( ) < 2 ) <nl> throw new MarshalException ( " Not enough bytes to read value size of component " + i ) ; <nl> - int length = getShortLength ( bb ) ; <nl> + int length = ByteBufferUtil . readShortLength ( bb ) ; <nl> <nl> if ( bb . remaining ( ) < length ) <nl> throw new MarshalException ( " Not enough bytes to read value of component " + i ) ; <nl> - ByteBuffer value = getBytes ( bb , length ) ; <nl> + ByteBuffer value = ByteBufferUtil . readBytes ( bb , length ) ; <nl> <nl> comparator . validateCollectionMember ( value , previous ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / CollectionType . java b / src / java / org / apache / cassandra / db / marshal / CollectionType . java <nl> index fe672e4 . . 02d01ff 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / CollectionType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / CollectionType . java <nl> @ @ - 146 , 12 + 146 , 6 @ @ public abstract class CollectionType < T > extends AbstractType < T > <nl> return pack ( buffers , elements , size ) ; <nl> } <nl> <nl> - protected static int getUnsignedShort ( ByteBuffer bb ) <nl> - { <nl> - int length = ( bb . get ( ) & 0xFF ) < < 8 ; <nl> - return length | ( bb . get ( ) & 0xFF ) ; <nl> - } <nl> - <nl> public CQL3Type asCQL3Type ( ) <nl> { <nl> return new CQL3Type . Collection ( this ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / CompositeType . java b / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> index af1f3eb . . 5797af4 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> @ @ - 89 , 11 + 89 , 11 @ @ public class CompositeType extends AbstractCompositeType <nl> if ( bb . remaining ( ) < 2 ) <nl> return false ; <nl> <nl> - int header = getShortLength ( bb , bb . position ( ) ) ; <nl> + int header = ByteBufferUtil . getShortLength ( bb , bb . position ( ) ) ; <nl> if ( ( header & 0xFFFF ) ! = STATIC _ MARKER ) <nl> return false ; <nl> <nl> - getShortLength ( bb ) ; / / Skip header <nl> + ByteBufferUtil . readShortLength ( bb ) ; / / Skip header <nl> return true ; <nl> } <nl> <nl> @ @ - 179 , 7 + 179 , 7 @ @ public class CompositeType extends AbstractCompositeType <nl> int i = 0 ; <nl> while ( bb . remaining ( ) > 0 ) <nl> { <nl> - l [ i + + ] = getWithShortLength ( bb ) ; <nl> + l [ i + + ] = ByteBufferUtil . readBytesWithShortLength ( bb ) ; <nl> bb . get ( ) ; / / skip end - of - component <nl> } <nl> return i = = l . length ? l : Arrays . copyOfRange ( l , 0 , i ) ; <nl> @ @ - 193 , 7 + 193 , 7 @ @ public class CompositeType extends AbstractCompositeType <nl> int i = 0 ; <nl> while ( bb . remaining ( ) > 0 ) <nl> { <nl> - ByteBuffer c = getWithShortLength ( bb ) ; <nl> + ByteBuffer c = ByteBufferUtil . readBytesWithShortLength ( bb ) ; <nl> if ( i = = idx ) <nl> return c ; <nl> <nl> @ @ - 212 , 7 + 212 , 7 @ @ public class CompositeType extends AbstractCompositeType <nl> <nl> public static boolean isStaticName ( ByteBuffer bb ) <nl> { <nl> - return bb . remaining ( ) > = 2 & & ( getShortLength ( bb , bb . position ( ) ) & 0xFFFF ) = = STATIC _ MARKER ; <nl> + return bb . remaining ( ) > = 2 & & ( ByteBufferUtil . getShortLength ( bb , bb . position ( ) ) & 0xFFFF ) = = STATIC _ MARKER ; <nl> } <nl> <nl> @ Override <nl> @ @ - 324 , 7 + 324 , 7 @ @ public class CompositeType extends AbstractCompositeType <nl> ByteBuffer out = ByteBuffer . allocate ( totalLength ) ; <nl> for ( ByteBuffer bb : buffers ) <nl> { <nl> - putShortLength ( out , bb . remaining ( ) ) ; <nl> + ByteBufferUtil . writeShortLength ( out , bb . remaining ( ) ) ; <nl> out . put ( bb . duplicate ( ) ) ; <nl> out . put ( ( byte ) 0 ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> index 7f30fde . . 8311e7e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> @ @ - 90 , 10 + 90 , 10 @ @ public class DynamicCompositeType extends AbstractCompositeType <nl> { <nl> try <nl> { <nl> - int header = getShortLength ( bb ) ; <nl> + int header = ByteBufferUtil . readShortLength ( bb ) ; <nl> if ( ( header & 0x8000 ) = = 0 ) <nl> { <nl> - String name = ByteBufferUtil . string ( getBytes ( bb , header ) ) ; <nl> + String name = ByteBufferUtil . string ( ByteBufferUtil . readBytes ( bb , header ) ) ; <nl> return TypeParser . parse ( name ) ; <nl> } <nl> else <nl> @ @ - 152 , 10 + 152 , 10 @ @ public class DynamicCompositeType extends AbstractCompositeType <nl> { <nl> try <nl> { <nl> - int header = getShortLength ( bb ) ; <nl> + int header = ByteBufferUtil . readShortLength ( bb ) ; <nl> if ( ( header & 0x8000 ) = = 0 ) <nl> { <nl> - String name = ByteBufferUtil . string ( getBytes ( bb , header ) ) ; <nl> + String name = ByteBufferUtil . string ( ByteBufferUtil . readBytes ( bb , header ) ) ; <nl> sb . append ( name ) . append ( " @ " ) ; <nl> return TypeParser . parse ( name ) ; <nl> } <nl> @ @ - 189 , 13 + 189 , 13 @ @ public class DynamicCompositeType extends AbstractCompositeType <nl> AbstractType < ? > comparator = null ; <nl> if ( bb . remaining ( ) < 2 ) <nl> throw new MarshalException ( " Not enough bytes to header of the comparator part of component " + i ) ; <nl> - int header = getShortLength ( bb ) ; <nl> + int header = ByteBufferUtil . readShortLength ( bb ) ; <nl> if ( ( header & 0x8000 ) = = 0 ) <nl> { <nl> if ( bb . remaining ( ) < header ) <nl> throw new MarshalException ( " Not enough bytes to read comparator name of component " + i ) ; <nl> <nl> - ByteBuffer value = getBytes ( bb , header ) ; <nl> + ByteBuffer value = ByteBufferUtil . readBytes ( bb , header ) ; <nl> String valueStr = null ; <nl> try <nl> { <nl> @ @ - 325 , 7 + 325 , 7 @ @ public class DynamicCompositeType extends AbstractCompositeType <nl> header = 0x8000 | ( ( ( byte ) comparatorName . charAt ( 0 ) ) & 0xFF ) ; <nl> else <nl> header = comparatorName . length ( ) ; <nl> - putShortLength ( bb , header ) ; <nl> + ByteBufferUtil . writeShortLength ( bb , header ) ; <nl> <nl> if ( ! isAlias ) <nl> bb . put ( ByteBufferUtil . bytes ( comparatorName ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / serializers / CollectionSerializer . java b / src / java / org / apache / cassandra / serializers / CollectionSerializer . java <nl> index 9d4e4a4 . . 83a391d 100644 <nl> - - - a / src / java / org / apache / cassandra / serializers / CollectionSerializer . java <nl> + + + b / src / java / org / apache / cassandra / serializers / CollectionSerializer . java <nl> @ @ - 48 , 10 + 48 , 4 @ @ public abstract class CollectionSerializer < T > implements TypeSerializer < T > <nl> size + = 2 + bb . remaining ( ) ; <nl> return pack ( buffers , elements , size ) ; <nl> } <nl> - <nl> - protected static int getUnsignedShort ( ByteBuffer bb ) <nl> - { <nl> - int length = ( bb . get ( ) & 0xFF ) < < 8 ; <nl> - return length | ( bb . get ( ) & 0xFF ) ; <nl> - } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / serializers / ListSerializer . java b / src / java / org / apache / cassandra / serializers / ListSerializer . java <nl> index 0272618 . . 59f25d2 100644 <nl> - - - a / src / java / org / apache / cassandra / serializers / ListSerializer . java <nl> + + + b / src / java / org / apache / cassandra / serializers / ListSerializer . java <nl> @ @ - 22 , 6 + 22 , 8 @ @ import java . nio . BufferUnderflowException ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + <nl> public class ListSerializer < T > extends CollectionSerializer < List < T > > <nl> { <nl> / / interning instances <nl> @ @ - 50 , 14 + 52 , 11 @ @ public class ListSerializer < T > extends CollectionSerializer < List < T > > <nl> try <nl> { <nl> ByteBuffer input = bytes . duplicate ( ) ; <nl> - int n = getUnsignedShort ( input ) ; <nl> + int n = ByteBufferUtil . readShortLength ( input ) ; <nl> List < T > l = new ArrayList < T > ( n ) ; <nl> for ( int i = 0 ; i < n ; i + + ) <nl> { <nl> - int s = getUnsignedShort ( input ) ; <nl> - byte [ ] data = new byte [ s ] ; <nl> - input . get ( data ) ; <nl> - ByteBuffer databb = ByteBuffer . wrap ( data ) ; <nl> + ByteBuffer databb = ByteBufferUtil . readBytesWithShortLength ( input ) ; <nl> elements . validate ( databb ) ; <nl> l . add ( elements . deserialize ( databb ) ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / serializers / MapSerializer . java b / src / java / org / apache / cassandra / serializers / MapSerializer . java <nl> index f04de6d . . f79d07f 100644 <nl> - - - a / src / java / org / apache / cassandra / serializers / MapSerializer . java <nl> + + + b / src / java / org / apache / cassandra / serializers / MapSerializer . java <nl> @ @ - 18 , 12 + 18 , 13 @ @ <nl> <nl> package org . apache . cassandra . serializers ; <nl> <nl> - import org . apache . cassandra . utils . Pair ; <nl> - <nl> import java . nio . BufferUnderflowException ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . Pair ; <nl> + <nl> public class MapSerializer < K , V > extends CollectionSerializer < Map < K , V > > <nl> { <nl> / / interning instances <nl> @ @ - 55 , 20 + 56 , 14 @ @ public class MapSerializer < K , V > extends CollectionSerializer < Map < K , V > > <nl> try <nl> { <nl> ByteBuffer input = bytes . duplicate ( ) ; <nl> - int n = getUnsignedShort ( input ) ; <nl> + int n = ByteBufferUtil . readShortLength ( input ) ; <nl> Map < K , V > m = new LinkedHashMap < K , V > ( n ) ; <nl> for ( int i = 0 ; i < n ; i + + ) <nl> { <nl> - int sk = getUnsignedShort ( input ) ; <nl> - byte [ ] datak = new byte [ sk ] ; <nl> - input . get ( datak ) ; <nl> - ByteBuffer kbb = ByteBuffer . wrap ( datak ) ; <nl> + ByteBuffer kbb = ByteBufferUtil . readBytesWithShortLength ( input ) ; <nl> keys . validate ( kbb ) ; <nl> <nl> - int sv = getUnsignedShort ( input ) ; <nl> - byte [ ] datav = new byte [ sv ] ; <nl> - input . get ( datav ) ; <nl> - ByteBuffer vbb = ByteBuffer . wrap ( datav ) ; <nl> + ByteBuffer vbb = ByteBufferUtil . readBytesWithShortLength ( input ) ; <nl> values . validate ( vbb ) ; <nl> <nl> m . put ( keys . deserialize ( kbb ) , values . deserialize ( vbb ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / serializers / SetSerializer . java b / src / java / org / apache / cassandra / serializers / SetSerializer . java <nl> index d424a11 . . d6d7062 100644 <nl> - - - a / src / java / org / apache / cassandra / serializers / SetSerializer . java <nl> + + + b / src / java / org / apache / cassandra / serializers / SetSerializer . java <nl> @ @ - 22 , 6 + 22 , 8 @ @ import java . nio . BufferUnderflowException ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + <nl> public class SetSerializer < T > extends CollectionSerializer < Set < T > > <nl> { <nl> / / interning instances <nl> @ @ - 50 , 14 + 52 , 11 @ @ public class SetSerializer < T > extends CollectionSerializer < Set < T > > <nl> try <nl> { <nl> ByteBuffer input = bytes . duplicate ( ) ; <nl> - int n = getUnsignedShort ( input ) ; <nl> + int n = ByteBufferUtil . readShortLength ( input ) ; <nl> Set < T > l = new LinkedHashSet < T > ( n ) ; <nl> for ( int i = 0 ; i < n ; i + + ) <nl> { <nl> - int s = getUnsignedShort ( input ) ; <nl> - byte [ ] data = new byte [ s ] ; <nl> - input . get ( data ) ; <nl> - ByteBuffer databb = ByteBuffer . wrap ( data ) ; <nl> + ByteBuffer databb = ByteBufferUtil . readBytesWithShortLength ( input ) ; <nl> elements . validate ( databb ) ; <nl> l . add ( elements . deserialize ( databb ) ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java <nl> index 20abaee . . 0d1b141 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java <nl> + + + b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java <nl> @ @ - 558 , 4 + 558 , 41 @ @ public class ByteBufferUtil <nl> { <nl> return buf . capacity ( ) > buf . remaining ( ) ? ByteBuffer . wrap ( getArray ( buf ) ) : buf ; <nl> } <nl> + <nl> + / / Doesn ' t change bb position <nl> + public static int getShortLength ( ByteBuffer bb , int position ) <nl> + { <nl> + int length = ( bb . get ( position ) & 0xFF ) < < 8 ; <nl> + return length | ( bb . get ( position + 1 ) & 0xFF ) ; <nl> + } <nl> + <nl> + / / changes bb position <nl> + public static int readShortLength ( ByteBuffer bb ) <nl> + { <nl> + int length = ( bb . get ( ) & 0xFF ) < < 8 ; <nl> + return length | ( bb . get ( ) & 0xFF ) ; <nl> + } <nl> + <nl> + / / changes bb position <nl> + public static void writeShortLength ( ByteBuffer bb , int length ) <nl> + { <nl> + bb . put ( ( byte ) ( ( length > > 8 ) & 0xFF ) ) ; <nl> + bb . put ( ( byte ) ( length & 0xFF ) ) ; <nl> + } <nl> + <nl> + / / changes bb position <nl> + public static ByteBuffer readBytes ( ByteBuffer bb , int length ) <nl> + { <nl> + ByteBuffer copy = bb . duplicate ( ) ; <nl> + copy . limit ( copy . position ( ) + length ) ; <nl> + bb . position ( bb . position ( ) + length ) ; <nl> + return copy ; <nl> + } <nl> + <nl> + / / changes bb position <nl> + public static ByteBuffer readBytesWithShortLength ( ByteBuffer bb ) <nl> + { <nl> + int length = readShortLength ( bb ) ; <nl> + return readBytes ( bb , length ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 7765252 . . 16ea033 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 4 , 6 + 4 , 7 @ @ dev <nl> * rename o . a . c . internal . AntientropyStage - > AntiEntropyStage , <nl> o . a . c . request . Request _ responseStage - > RequestResponseStage , <nl> o . a . c . internal . Internal _ responseStage - > InternalResponseStage <nl> + * add AbstractType . fromString ( CASSANDRA - 1767 ) <nl> <nl> <nl> 0 . 7 . 0 - rc1 <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java <nl> index 9736253 . . eedbfdf 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliClient . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliClient . java <nl> @ @ - 1437 , 63 + 1437 , 10 @ @ public class CliClient extends CliUserHelp <nl> * / <nl> private ByteBuffer getBytesAccordingToType ( String object , AbstractType comparator ) <nl> { <nl> - / / TODO there is tension here between using this function to generate default values , <nl> - / / and using it to parse input . For instance , normally we want to convert empty string <nl> - / / to empty byte array for any type - - all types special case empty byte [ ] to mean <nl> - / / " minimum value " - - but we also want timeuuid ( ) to create a valid uuid for us . <nl> - / / For now , this function takes the create - valid - values approach , and we leave <nl> - / / other use cases to special case " " - > byte [ 0 ] before calling this . <nl> - if ( comparator instanceof LongType ) <nl> - { <nl> - long longType ; <nl> - try <nl> - { <nl> - longType = Long . valueOf ( object ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - throw new RuntimeException ( " ' " + object + " ' could not be translated into a LongType . " ) ; <nl> - } <nl> - <nl> - return FBUtilities . toByteBuffer ( longType ) ; <nl> - } <nl> - else if ( comparator instanceof LexicalUUIDType | | comparator instanceof TimeUUIDType ) <nl> - { <nl> - / / generate new time based UUID if object is empty <nl> - / / this means that we have timeuuid ( ) call <nl> - if ( comparator instanceof TimeUUIDType & & object . isEmpty ( ) ) <nl> - return ByteBuffer . wrap ( UUIDGenerator . getInstance ( ) . generateTimeBasedUUID ( ) . asByteArray ( ) ) ; <nl> - <nl> - UUID uuid = ( object . isEmpty ( ) ) ? UUID . randomUUID ( ) : UUID . fromString ( object ) ; <nl> - <nl> - if ( comparator instanceof TimeUUIDType & & uuid . version ( ) ! = 1 ) <nl> - throw new IllegalArgumentException ( " TimeUUID supports only version 1 UUIDs " ) ; <nl> + if ( comparator = = null ) / / default comparator is BytesType <nl> + comparator = BytesType . instance ; <nl> <nl> - return ByteBuffer . wrap ( UUIDGen . decompose ( uuid ) ) ; <nl> - } <nl> - else if ( comparator instanceof IntegerType ) <nl> - { <nl> - BigInteger integerType ; <nl> - <nl> - try <nl> - { <nl> - integerType = new BigInteger ( object ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - throw new RuntimeException ( " ' " + object + " ' could not be translated into an IntegerType . " ) ; <nl> - } <nl> - <nl> - return ByteBuffer . wrap ( integerType . toByteArray ( ) ) ; <nl> - } <nl> - else if ( comparator instanceof AsciiType ) <nl> - { <nl> - return ByteBuffer . wrap ( object . getBytes ( Charsets . US _ ASCII ) ) ; <nl> - } <nl> - else <nl> - { <nl> - return ByteBuffer . wrap ( object . getBytes ( Charsets . UTF _ 8 ) ) ; <nl> - } <nl> + return comparator . fromString ( object ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 1592 , 7 + 1539 , 7 @ @ public class CliClient extends CliUserHelp <nl> * @ param columnName - column name to which value belongs <nl> * @ param columnFamilyName - column family name <nl> * @ param columnValue - actual column value <nl> - * @ return byte [ ] - value in byte array representation <nl> + * @ return value in byte array representation <nl> * / <nl> private ByteBuffer columnValueAsBytes ( ByteBuffer columnName , String columnFamilyName , String columnValue ) <nl> { <nl> @ @ - 1602 , 7 + 1549 , 7 @ @ public class CliClient extends CliUserHelp <nl> { <nl> byte [ ] currentColumnName = columnDefinition . getName ( ) ; <nl> <nl> - if ( ByteBufferUtil . compare ( currentColumnName , columnName ) = = 0 ) <nl> + if ( ByteBufferUtil . compare ( currentColumnName , columnName ) = = 0 ) <nl> { <nl> try <nl> { <nl> @ @ - 1710 , 7 + 1657 , 32 @ @ public class CliClient extends CliUserHelp <nl> <nl> try <nl> { <nl> - ByteBuffer value = getBytesAccordingToType ( functionArg , validator ) ; <nl> + <nl> + ByteBuffer value ; <nl> + <nl> + if ( functionArg . isEmpty ( ) ) <nl> + { <nl> + if ( validator instanceof TimeUUIDType ) <nl> + { <nl> + value = ByteBuffer . wrap ( UUIDGenerator . getInstance ( ) . generateTimeBasedUUID ( ) . asByteArray ( ) ) ; <nl> + } <nl> + else if ( validator instanceof LexicalUUIDType ) <nl> + { <nl> + value = ByteBuffer . wrap ( UUIDGen . decompose ( UUID . randomUUID ( ) ) ) ; <nl> + } <nl> + else if ( validator instanceof BytesType ) <nl> + { <nl> + value = ByteBuffer . wrap ( new byte [ 0 ] ) ; <nl> + } <nl> + else <nl> + { <nl> + throw new RuntimeException ( String . format ( " Argument for ' % s ' could not be empty . " , functionName ) ) ; <nl> + } <nl> + } <nl> + else <nl> + { <nl> + value = getBytesAccordingToType ( functionArg , validator ) ; <nl> + } <nl> <nl> / / performing ColumnDef local validator update <nl> if ( withUpdate ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractType . java b / src / java / org / apache / cassandra / db / marshal / AbstractType . java <nl> index 0395022 . . 94592fc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / AbstractType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / AbstractType . java <nl> @ @ - 40 , 7 + 40 , 14 @ @ public abstract class AbstractType implements Comparator < ByteBuffer > <nl> / * * get a string representation of the bytes suitable for log messages * / <nl> public abstract String getString ( ByteBuffer bytes ) ; <nl> <nl> - / * * validate that the byte array is a valid sequence for the type we are supposed to be comparing * / <nl> + / * * get a byte representation of the given string . <nl> + * defaults to unsupportedoperation so people deploying custom Types can update at their leisure . * / <nl> + public ByteBuffer fromString ( String source ) <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> + / * validate that the byte array is a valid sequence for the type we are supposed to be comparing * / <nl> public void validate ( ByteBuffer bytes ) <nl> { <nl> getString ( bytes ) ; <nl> @ @ - 66 , 7 + 73 , 7 @ @ public abstract class AbstractType implements Comparator < ByteBuffer > <nl> } ; <nl> } <nl> <nl> - / * * convenience method * / <nl> + / * convenience method * / <nl> public String getString ( Collection < ByteBuffer > names ) <nl> { <nl> StringBuilder builder = new StringBuilder ( ) ; <nl> @ @ - 77 , 7 + 84 , 7 @ @ public abstract class AbstractType implements Comparator < ByteBuffer > <nl> return builder . toString ( ) ; <nl> } <nl> <nl> - / * * convenience method * / <nl> + / * convenience method * / <nl> public String getColumnsString ( Collection < IColumn > columns ) <nl> { <nl> StringBuilder builder = new StringBuilder ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / AsciiType . java b / src / java / org / apache / cassandra / db / marshal / AsciiType . java <nl> index 7fb6e62 . . a84f5a6 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / AsciiType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / AsciiType . java <nl> @ @ - 38 , 4 + 38 , 9 @ @ public class AsciiType extends BytesType <nl> { <nl> return ByteBufferUtil . string ( bytes , Charsets . US _ ASCII ) ; <nl> } <nl> + <nl> + public ByteBuffer fromString ( String source ) <nl> + { <nl> + return ByteBuffer . wrap ( source . getBytes ( Charsets . US _ ASCII ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / BytesType . java b / src / java / org / apache / cassandra / db / marshal / BytesType . java <nl> index bbfeb62 . . 56823eb 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / BytesType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / BytesType . java <nl> @ @ - 46 , 4 + 46 , 9 @ @ public class BytesType extends AbstractType <nl> { <nl> return FBUtilities . bytesToHex ( bytes ) ; <nl> } <nl> + <nl> + public ByteBuffer fromString ( String source ) <nl> + { <nl> + return ByteBuffer . wrap ( source . getBytes ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / IntegerType . java b / src / java / org / apache / cassandra / db / marshal / IntegerType . java <nl> index 8a3d0f2 . . 528bb55 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / IntegerType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / IntegerType . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> <nl> package org . apache . cassandra . db . marshal ; <nl> <nl> + import java . math . BigInteger ; <nl> import java . nio . ByteBuffer ; <nl> <nl> import org . apache . thrift . TBaseHelper ; <nl> @ @ - 122 , 4 + 123 , 20 @ @ public final class IntegerType extends AbstractType <nl> <nl> return new java . math . BigInteger ( TBaseHelper . byteBufferToByteArray ( bytes ) ) . toString ( 10 ) ; <nl> } <nl> + <nl> + public ByteBuffer fromString ( String source ) <nl> + { <nl> + BigInteger integerType ; <nl> + <nl> + try <nl> + { <nl> + integerType = new BigInteger ( source ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( " ' " + source + " ' could not be translated into an IntegerType . " ) ; <nl> + } <nl> + <nl> + return ByteBuffer . wrap ( integerType . toByteArray ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java b / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java <nl> index 475b34d . . 33cafcc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package org . apache . cassandra . db . marshal ; <nl> <nl> <nl> import java . nio . ByteBuffer ; <nl> + import java . util . UUID ; <nl> <nl> import org . apache . cassandra . utils . UUIDGen ; <nl> <nl> @ @ - 57 , 4 + 58 , 9 @ @ public class LexicalUUIDType extends AbstractType <nl> } <nl> return UUIDGen . getUUID ( bytes ) . toString ( ) ; <nl> } <nl> + <nl> + public ByteBuffer fromString ( String source ) <nl> + { <nl> + return ByteBuffer . wrap ( UUIDGen . decompose ( UUID . fromString ( source ) ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / LocalByPartionerType . java b / src / java / org / apache / cassandra / db / marshal / LocalByPartionerType . java <nl> index bba064e . . f518fbc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / LocalByPartionerType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / LocalByPartionerType . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import java . nio . ByteBuffer ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . dht . Token ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> + import org . apache . commons . lang . NotImplementedException ; <nl> <nl> / * * for sorting columns representing row keys in the row ordering as determined by a partitioner . <nl> * Not intended for user - defined CFs , and will in fact error out if used with such . * / <nl> @ @ - 41 , 6 + 42 , 11 @ @ public class LocalByPartionerType < T extends Token > extends AbstractType <nl> return FBUtilities . bytesToHex ( bytes ) ; <nl> } <nl> <nl> + public ByteBuffer fromString ( String source ) <nl> + { <nl> + throw new NotImplementedException ( ) ; <nl> + } <nl> + <nl> public int compare ( ByteBuffer o1 , ByteBuffer o2 ) <nl> { <nl> return partitioner . decorateKey ( o1 ) . compareTo ( partitioner . decorateKey ( o2 ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / LongType . java b / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> index 6a4a206 . . f9bf574 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ package org . apache . cassandra . db . marshal ; <nl> import java . nio . ByteBuffer ; <nl> <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> public class LongType extends AbstractType <nl> { <nl> @ @ - 64 , 4 + 65 , 20 @ @ public class LongType extends AbstractType <nl> <nl> return String . valueOf ( bytes . getLong ( bytes . position ( ) + bytes . arrayOffset ( ) ) ) ; <nl> } <nl> + <nl> + public ByteBuffer fromString ( String source ) <nl> + { <nl> + long longType ; <nl> + <nl> + try <nl> + { <nl> + longType = Long . valueOf ( source ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( " ' " + source + " ' could not be translated into a LongType . " ) ; <nl> + } <nl> + <nl> + return FBUtilities . toByteBuffer ( longType ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> index 5a72423 . . 3a5b9fb 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . nio . ByteBuffer ; <nl> import java . util . UUID ; <nl> <nl> import org . apache . cassandra . utils . UUIDGen ; <nl> + import org . safehaus . uuid . UUIDGenerator ; <nl> <nl> public class TimeUUIDType extends AbstractType <nl> { <nl> @ @ - 87 , 4 + 88 , 14 @ @ public class TimeUUIDType extends AbstractType <nl> } <nl> return uuid . toString ( ) ; <nl> } <nl> + <nl> + public ByteBuffer fromString ( String source ) <nl> + { <nl> + UUID uuid = UUID . fromString ( source ) ; <nl> + <nl> + if ( uuid . version ( ) ! = 1 ) <nl> + throw new IllegalArgumentException ( " TimeUUID supports only version 1 UUIDs " ) ; <nl> + <nl> + return ByteBuffer . wrap ( UUIDGen . decompose ( uuid ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / UTF8Type . java b / src / java / org / apache / cassandra / db / marshal / UTF8Type . java <nl> index 818b297 . . fc98c13 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / UTF8Type . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / UTF8Type . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import java . nio . ByteBuffer ; <nl> import java . nio . charset . CharacterCodingException ; <nl> import java . util . Arrays ; <nl> <nl> + import com . google . common . base . Charsets ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> public class UTF8Type extends BytesType <nl> @ @ - 43 , 4 + 44 , 9 @ @ public class UTF8Type extends BytesType <nl> throw new MarshalException ( " invalid UTF8 bytes " + Arrays . toString ( bytes . array ( ) ) ) ; <nl> } <nl> } <nl> + <nl> + public ByteBuffer fromString ( String source ) <nl> + { <nl> + return ByteBuffer . wrap ( source . getBytes ( Charsets . UTF _ 8 ) ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / composites / AbstractComposite . java b / src / java / org / apache / cassandra / db / composites / AbstractComposite . java 
 index fbff930 . . 97417676 100644 
 - - - a / src / java / org / apache / cassandra / db / composites / AbstractComposite . java 
 + + + b / src / java / org / apache / cassandra / db / composites / AbstractComposite . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . nio . ByteBuffer ; 
 import org . apache . cassandra . db . filter . ColumnSlice ; 
 import org . apache . cassandra . db . marshal . AbstractCompositeType ; 
 import org . apache . cassandra . db . marshal . CompositeType ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 public abstract class AbstractComposite implements Composite 
 { 
 @ @ - 75 , 12 + 76 , 12 @ @ public abstract class AbstractComposite implements Composite 
 / / See org . apache . cassandra . db . marshal . CompositeType for details . 
 ByteBuffer result = ByteBuffer . allocate ( dataSize ( ) + 3 * size ( ) + ( isStatic ( ) ? 2 : 0 ) ) ; 
 if ( isStatic ( ) ) 
 - AbstractCompositeType . putShortLength ( result , CompositeType . STATIC _ MARKER ) ; 
 + ByteBufferUtil . writeShortLength ( result , CompositeType . STATIC _ MARKER ) ; 
 
 for ( int i = 0 ; i < size ( ) ; i + + ) 
 { 
 ByteBuffer bb = get ( i ) ; 
 - AbstractCompositeType . putShortLength ( result , bb . remaining ( ) ) ; 
 + ByteBufferUtil . writeShortLength ( result , bb . remaining ( ) ) ; 
 result . put ( bb . duplicate ( ) ) ; 
 result . put ( ( byte ) 0 ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java b / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java 
 index 236abc7 . . 8f3aec4 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java 
 @ @ - 17 , 15 + 17 , 16 @ @ 
 * / 
 package org . apache . cassandra . db . marshal ; 
 
 - import org . apache . cassandra . serializers . TypeSerializer ; 
 - import org . apache . cassandra . serializers . BytesSerializer ; 
 - import org . apache . cassandra . serializers . MarshalException ; 
 - 
 import java . nio . ByteBuffer ; 
 import java . util . ArrayList ; 
 import java . util . Collections ; 
 import java . util . List ; 
 
 + import org . apache . cassandra . serializers . TypeSerializer ; 
 + import org . apache . cassandra . serializers . BytesSerializer ; 
 + import org . apache . cassandra . serializers . MarshalException ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + 
 / * * 
 * A class avoiding class duplication between CompositeType and 
 * DynamicCompositeType . 
 @ @ - 34 , 44 + 35 , 6 @ @ import java . util . List ; 
 * / 
 public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 { 
 - 
 - / / changes bb position 
 - public static int getShortLength ( ByteBuffer bb ) 
 - { 
 - int length = ( bb . get ( ) & 0xFF ) < < 8 ; 
 - return length | ( bb . get ( ) & 0xFF ) ; 
 - } 
 - 
 - / / Doesn ' t change bb position 
 - protected static int getShortLength ( ByteBuffer bb , int position ) 
 - { 
 - int length = ( bb . get ( position ) & 0xFF ) < < 8 ; 
 - return length | ( bb . get ( position + 1 ) & 0xFF ) ; 
 - } 
 - 
 - / / changes bb position 
 - public static void putShortLength ( ByteBuffer bb , int length ) 
 - { 
 - bb . put ( ( byte ) ( ( length > > 8 ) & 0xFF ) ) ; 
 - bb . put ( ( byte ) ( length & 0xFF ) ) ; 
 - } 
 - 
 - / / changes bb position 
 - public static ByteBuffer getBytes ( ByteBuffer bb , int length ) 
 - { 
 - ByteBuffer copy = bb . duplicate ( ) ; 
 - copy . limit ( copy . position ( ) + length ) ; 
 - bb . position ( bb . position ( ) + length ) ; 
 - return copy ; 
 - } 
 - 
 - / / changes bb position 
 - public static ByteBuffer getWithShortLength ( ByteBuffer bb ) 
 - { 
 - int length = getShortLength ( bb ) ; 
 - return getBytes ( bb , length ) ; 
 - } 
 - 
 public int compare ( ByteBuffer o1 , ByteBuffer o2 ) 
 { 
 if ( o1 = = null | | ! o1 . hasRemaining ( ) ) 
 @ @ - 95 , 8 + 58 , 8 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 { 
 AbstractType < ? > comparator = getComparator ( i , bb1 , bb2 ) ; 
 
 - ByteBuffer value1 = getWithShortLength ( bb1 ) ; 
 - ByteBuffer value2 = getWithShortLength ( bb2 ) ; 
 + ByteBuffer value1 = ByteBufferUtil . readBytesWithShortLength ( bb1 ) ; 
 + ByteBuffer value2 = ByteBufferUtil . readBytesWithShortLength ( bb2 ) ; 
 
 int cmp = comparator . compareCollectionMembers ( value1 , value2 , previous ) ; 
 if ( cmp ! = 0 ) 
 @ @ - 135 , 7 + 98 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 while ( bb . remaining ( ) > 0 ) 
 { 
 getComparator ( i + + , bb ) ; 
 - l . add ( getWithShortLength ( bb ) ) ; 
 + l . add ( ByteBufferUtil . readBytesWithShortLength ( bb ) ) ; 
 bb . get ( ) ; / / skip end - of - component 
 } 
 return l . toArray ( new ByteBuffer [ l . size ( ) ] ) ; 
 @ @ - 164 , 7 + 127 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 while ( bb . remaining ( ) > 0 ) 
 { 
 AbstractType comparator = getComparator ( i , bb ) ; 
 - ByteBuffer value = getWithShortLength ( bb ) ; 
 + ByteBuffer value = ByteBufferUtil . readBytesWithShortLength ( bb ) ; 
 
 list . add ( new CompositeComponent ( comparator , value ) ) ; 
 
 @ @ - 237 , 7 + 200 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 sb . append ( " : " ) ; 
 
 AbstractType < ? > comparator = getAndAppendComparator ( i , bb , sb ) ; 
 - ByteBuffer value = getWithShortLength ( bb ) ; 
 + ByteBuffer value = ByteBufferUtil . readBytesWithShortLength ( bb ) ; 
 
 sb . append ( escape ( comparator . getString ( value ) ) ) ; 
 
 @ @ - 290 , 7 + 253 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 for ( ByteBuffer component : components ) 
 { 
 comparators . get ( i ) . serializeComparator ( bb ) ; 
 - putShortLength ( bb , component . remaining ( ) ) ; 
 + ByteBufferUtil . writeShortLength ( bb , component . remaining ( ) ) ; 
 bb . put ( component ) ; / / it ' s ok to consume component as we won ' t use it anymore 
 bb . put ( ( byte ) 0 ) ; 
 + + i ; 
 @ @ - 318 , 11 + 281 , 11 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 
 if ( bb . remaining ( ) < 2 ) 
 throw new MarshalException ( " Not enough bytes to read value size of component " + i ) ; 
 - int length = getShortLength ( bb ) ; 
 + int length = ByteBufferUtil . readShortLength ( bb ) ; 
 
 if ( bb . remaining ( ) < length ) 
 throw new MarshalException ( " Not enough bytes to read value of component " + i ) ; 
 - ByteBuffer value = getBytes ( bb , length ) ; 
 + ByteBuffer value = ByteBufferUtil . readBytes ( bb , length ) ; 
 
 comparator . validateCollectionMember ( value , previous ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / CollectionType . java b / src / java / org / apache / cassandra / db / marshal / CollectionType . java 
 index fe672e4 . . 02d01ff 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / CollectionType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / CollectionType . java 
 @ @ - 146 , 12 + 146 , 6 @ @ public abstract class CollectionType < T > extends AbstractType < T > 
 return pack ( buffers , elements , size ) ; 
 } 
 
 - protected static int getUnsignedShort ( ByteBuffer bb ) 
 - { 
 - int length = ( bb . get ( ) & 0xFF ) < < 8 ; 
 - return length | ( bb . get ( ) & 0xFF ) ; 
 - } 
 - 
 public CQL3Type asCQL3Type ( ) 
 { 
 return new CQL3Type . Collection ( this ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / CompositeType . java b / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 index af1f3eb . . 5797af4 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 @ @ - 89 , 11 + 89 , 11 @ @ public class CompositeType extends AbstractCompositeType 
 if ( bb . remaining ( ) < 2 ) 
 return false ; 
 
 - int header = getShortLength ( bb , bb . position ( ) ) ; 
 + int header = ByteBufferUtil . getShortLength ( bb , bb . position ( ) ) ; 
 if ( ( header & 0xFFFF ) ! = STATIC _ MARKER ) 
 return false ; 
 
 - getShortLength ( bb ) ; / / Skip header 
 + ByteBufferUtil . readShortLength ( bb ) ; / / Skip header 
 return true ; 
 } 
 
 @ @ - 179 , 7 + 179 , 7 @ @ public class CompositeType extends AbstractCompositeType 
 int i = 0 ; 
 while ( bb . remaining ( ) > 0 ) 
 { 
 - l [ i + + ] = getWithShortLength ( bb ) ; 
 + l [ i + + ] = ByteBufferUtil . readBytesWithShortLength ( bb ) ; 
 bb . get ( ) ; / / skip end - of - component 
 } 
 return i = = l . length ? l : Arrays . copyOfRange ( l , 0 , i ) ; 
 @ @ - 193 , 7 + 193 , 7 @ @ public class CompositeType extends AbstractCompositeType 
 int i = 0 ; 
 while ( bb . remaining ( ) > 0 ) 
 { 
 - ByteBuffer c = getWithShortLength ( bb ) ; 
 + ByteBuffer c = ByteBufferUtil . readBytesWithShortLength ( bb ) ; 
 if ( i = = idx ) 
 return c ; 
 
 @ @ - 212 , 7 + 212 , 7 @ @ public class CompositeType extends AbstractCompositeType 
 
 public static boolean isStaticName ( ByteBuffer bb ) 
 { 
 - return bb . remaining ( ) > = 2 & & ( getShortLength ( bb , bb . position ( ) ) & 0xFFFF ) = = STATIC _ MARKER ; 
 + return bb . remaining ( ) > = 2 & & ( ByteBufferUtil . getShortLength ( bb , bb . position ( ) ) & 0xFFFF ) = = STATIC _ MARKER ; 
 } 
 
 @ Override 
 @ @ - 324 , 7 + 324 , 7 @ @ public class CompositeType extends AbstractCompositeType 
 ByteBuffer out = ByteBuffer . allocate ( totalLength ) ; 
 for ( ByteBuffer bb : buffers ) 
 { 
 - putShortLength ( out , bb . remaining ( ) ) ; 
 + ByteBufferUtil . writeShortLength ( out , bb . remaining ( ) ) ; 
 out . put ( bb . duplicate ( ) ) ; 
 out . put ( ( byte ) 0 ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 index 7f30fde . . 8311e7e 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 @ @ - 90 , 10 + 90 , 10 @ @ public class DynamicCompositeType extends AbstractCompositeType 
 { 
 try 
 { 
 - int header = getShortLength ( bb ) ; 
 + int header = ByteBufferUtil . readShortLength ( bb ) ; 
 if ( ( header & 0x8000 ) = = 0 ) 
 { 
 - String name = ByteBufferUtil . string ( getBytes ( bb , header ) ) ; 
 + String name = ByteBufferUtil . string ( ByteBufferUtil . readBytes ( bb , header ) ) ; 
 return TypeParser . parse ( name ) ; 
 } 
 else 
 @ @ - 152 , 10 + 152 , 10 @ @ public class DynamicCompositeType extends AbstractCompositeType 
 { 
 try 
 { 
 - int header = getShortLength ( bb ) ; 
 + int header = ByteBufferUtil . readShortLength ( bb ) ; 
 if ( ( header & 0x8000 ) = = 0 ) 
 { 
 - String name = ByteBufferUtil . string ( getBytes ( bb , header ) ) ; 
 + String name = ByteBufferUtil . string ( ByteBufferUtil . readBytes ( bb , header ) ) ; 
 sb . append ( name ) . append ( " @ " ) ; 
 return TypeParser . parse ( name ) ; 
 } 
 @ @ - 189 , 13 + 189 , 13 @ @ public class DynamicCompositeType extends AbstractCompositeType 
 AbstractType < ? > comparator = null ; 
 if ( bb . remaining ( ) < 2 ) 
 throw new MarshalException ( " Not enough bytes to header of the comparator part of component " + i ) ; 
 - int header = getShortLength ( bb ) ; 
 + int header = ByteBufferUtil . readShortLength ( bb ) ; 
 if ( ( header & 0x8000 ) = = 0 ) 
 { 
 if ( bb . remaining ( ) < header ) 
 throw new MarshalException ( " Not enough bytes to read comparator name of component " + i ) ; 
 
 - ByteBuffer value = getBytes ( bb , header ) ; 
 + ByteBuffer value = ByteBufferUtil . readBytes ( bb , header ) ; 
 String valueStr = null ; 
 try 
 { 
 @ @ - 325 , 7 + 325 , 7 @ @ public class DynamicCompositeType extends AbstractCompositeType 
 header = 0x8000 | ( ( ( byte ) comparatorName . charAt ( 0 ) ) & 0xFF ) ; 
 else 
 header = comparatorName . length ( ) ; 
 - putShortLength ( bb , header ) ; 
 + ByteBufferUtil . writeShortLength ( bb , header ) ; 
 
 if ( ! isAlias ) 
 bb . put ( ByteBufferUtil . bytes ( comparatorName ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / serializers / CollectionSerializer . java b / src / java / org / apache / cassandra / serializers / CollectionSerializer . java 
 index 9d4e4a4 . . 83a391d 100644 
 - - - a / src / java / org / apache / cassandra / serializers / CollectionSerializer . java 
 + + + b / src / java / org / apache / cassandra / serializers / CollectionSerializer . java 
 @ @ - 48 , 10 + 48 , 4 @ @ public abstract class CollectionSerializer < T > implements TypeSerializer < T > 
 size + = 2 + bb . remaining ( ) ; 
 return pack ( buffers , elements , size ) ; 
 } 
 - 
 - protected static int getUnsignedShort ( ByteBuffer bb ) 
 - { 
 - int length = ( bb . get ( ) & 0xFF ) < < 8 ; 
 - return length | ( bb . get ( ) & 0xFF ) ; 
 - } 
 } 
 diff - - git a / src / java / org / apache / cassandra / serializers / ListSerializer . java b / src / java / org / apache / cassandra / serializers / ListSerializer . java 
 index 0272618 . . 59f25d2 100644 
 - - - a / src / java / org / apache / cassandra / serializers / ListSerializer . java 
 + + + b / src / java / org / apache / cassandra / serializers / ListSerializer . java 
 @ @ - 22 , 6 + 22 , 8 @ @ import java . nio . BufferUnderflowException ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + 
 public class ListSerializer < T > extends CollectionSerializer < List < T > > 
 { 
 / / interning instances 
 @ @ - 50 , 14 + 52 , 11 @ @ public class ListSerializer < T > extends CollectionSerializer < List < T > > 
 try 
 { 
 ByteBuffer input = bytes . duplicate ( ) ; 
 - int n = getUnsignedShort ( input ) ; 
 + int n = ByteBufferUtil . readShortLength ( input ) ; 
 List < T > l = new ArrayList < T > ( n ) ; 
 for ( int i = 0 ; i < n ; i + + ) 
 { 
 - int s = getUnsignedShort ( input ) ; 
 - byte [ ] data = new byte [ s ] ; 
 - input . get ( data ) ; 
 - ByteBuffer databb = ByteBuffer . wrap ( data ) ; 
 + ByteBuffer databb = ByteBufferUtil . readBytesWithShortLength ( input ) ; 
 elements . validate ( databb ) ; 
 l . add ( elements . deserialize ( databb ) ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / serializers / MapSerializer . java b / src / java / org / apache / cassandra / serializers / MapSerializer . java 
 index f04de6d . . f79d07f 100644 
 - - - a / src / java / org / apache / cassandra / serializers / MapSerializer . java 
 + + + b / src / java / org / apache / cassandra / serializers / MapSerializer . java 
 @ @ - 18 , 12 + 18 , 13 @ @ 
 
 package org . apache . cassandra . serializers ; 
 
 - import org . apache . cassandra . utils . Pair ; 
 - 
 import java . nio . BufferUnderflowException ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . Pair ; 
 + 
 public class MapSerializer < K , V > extends CollectionSerializer < Map < K , V > > 
 { 
 / / interning instances 
 @ @ - 55 , 20 + 56 , 14 @ @ public class MapSerializer < K , V > extends CollectionSerializer < Map < K , V > > 
 try 
 { 
 ByteBuffer input = bytes . duplicate ( ) ; 
 - int n = getUnsignedShort ( input ) ; 
 + int n = ByteBufferUtil . readShortLength ( input ) ; 
 Map < K , V > m = new LinkedHashMap < K , V > ( n ) ; 
 for ( int i = 0 ; i < n ; i + + ) 
 { 
 - int sk = getUnsignedShort ( input ) ; 
 - byte [ ] datak = new byte [ sk ] ; 
 - input . get ( datak ) ; 
 - ByteBuffer kbb = ByteBuffer . wrap ( datak ) ; 
 + ByteBuffer kbb = ByteBufferUtil . readBytesWithShortLength ( input ) ; 
 keys . validate ( kbb ) ; 
 
 - int sv = getUnsignedShort ( input ) ; 
 - byte [ ] datav = new byte [ sv ] ; 
 - input . get ( datav ) ; 
 - ByteBuffer vbb = ByteBuffer . wrap ( datav ) ; 
 + ByteBuffer vbb = ByteBufferUtil . readBytesWithShortLength ( input ) ; 
 values . validate ( vbb ) ; 
 
 m . put ( keys . deserialize ( kbb ) , values . deserialize ( vbb ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / serializers / SetSerializer . java b / src / java / org / apache / cassandra / serializers / SetSerializer . java 
 index d424a11 . . d6d7062 100644 
 - - - a / src / java / org / apache / cassandra / serializers / SetSerializer . java 
 + + + b / src / java / org / apache / cassandra / serializers / SetSerializer . java 
 @ @ - 22 , 6 + 22 , 8 @ @ import java . nio . BufferUnderflowException ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + 
 public class SetSerializer < T > extends CollectionSerializer < Set < T > > 
 { 
 / / interning instances 
 @ @ - 50 , 14 + 52 , 11 @ @ public class SetSerializer < T > extends CollectionSerializer < Set < T > > 
 try 
 { 
 ByteBuffer input = bytes . duplicate ( ) ; 
 - int n = getUnsignedShort ( input ) ; 
 + int n = ByteBufferUtil . readShortLength ( input ) ; 
 Set < T > l = new LinkedHashSet < T > ( n ) ; 
 for ( int i = 0 ; i < n ; i + + ) 
 { 
 - int s = getUnsignedShort ( input ) ; 
 - byte [ ] data = new byte [ s ] ; 
 - input . get ( data ) ; 
 - ByteBuffer databb = ByteBuffer . wrap ( data ) ; 
 + ByteBuffer databb = ByteBufferUtil . readBytesWithShortLength ( input ) ; 
 elements . validate ( databb ) ; 
 l . add ( elements . deserialize ( databb ) ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java 
 index 20abaee . . 0d1b141 100644 
 - - - a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java 
 + + + b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java 
 @ @ - 558 , 4 + 558 , 41 @ @ public class ByteBufferUtil 
 { 
 return buf . capacity ( ) > buf . remaining ( ) ? ByteBuffer . wrap ( getArray ( buf ) ) : buf ; 
 } 
 + 
 + / / Doesn ' t change bb position 
 + public static int getShortLength ( ByteBuffer bb , int position ) 
 + { 
 + int length = ( bb . get ( position ) & 0xFF ) < < 8 ; 
 + return length | ( bb . get ( position + 1 ) & 0xFF ) ; 
 + } 
 + 
 + / / changes bb position 
 + public static int readShortLength ( ByteBuffer bb ) 
 + { 
 + int length = ( bb . get ( ) & 0xFF ) < < 8 ; 
 + return length | ( bb . get ( ) & 0xFF ) ; 
 + } 
 + 
 + / / changes bb position 
 + public static void writeShortLength ( ByteBuffer bb , int length ) 
 + { 
 + bb . put ( ( byte ) ( ( length > > 8 ) & 0xFF ) ) ; 
 + bb . put ( ( byte ) ( length & 0xFF ) ) ; 
 + } 
 + 
 + / / changes bb position 
 + public static ByteBuffer readBytes ( ByteBuffer bb , int length ) 
 + { 
 + ByteBuffer copy = bb . duplicate ( ) ; 
 + copy . limit ( copy . position ( ) + length ) ; 
 + bb . position ( bb . position ( ) + length ) ; 
 + return copy ; 
 + } 
 + 
 + / / changes bb position 
 + public static ByteBuffer readBytesWithShortLength ( ByteBuffer bb ) 
 + { 
 + int length = readShortLength ( bb ) ; 
 + return readBytes ( bb , length ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 7765252 . . 16ea033 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 4 , 6 + 4 , 7 @ @ dev 
 * rename o . a . c . internal . AntientropyStage - > AntiEntropyStage , 
 o . a . c . request . Request _ responseStage - > RequestResponseStage , 
 o . a . c . internal . Internal _ responseStage - > InternalResponseStage 
 + * add AbstractType . fromString ( CASSANDRA - 1767 ) 
 
 
 0 . 7 . 0 - rc1 
 diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java 
 index 9736253 . . eedbfdf 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliClient . java 
 + + + b / src / java / org / apache / cassandra / cli / CliClient . java 
 @ @ - 1437 , 63 + 1437 , 10 @ @ public class CliClient extends CliUserHelp 
 * / 
 private ByteBuffer getBytesAccordingToType ( String object , AbstractType comparator ) 
 { 
 - / / TODO there is tension here between using this function to generate default values , 
 - / / and using it to parse input . For instance , normally we want to convert empty string 
 - / / to empty byte array for any type - - all types special case empty byte [ ] to mean 
 - / / " minimum value " - - but we also want timeuuid ( ) to create a valid uuid for us . 
 - / / For now , this function takes the create - valid - values approach , and we leave 
 - / / other use cases to special case " " - > byte [ 0 ] before calling this . 
 - if ( comparator instanceof LongType ) 
 - { 
 - long longType ; 
 - try 
 - { 
 - longType = Long . valueOf ( object ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - throw new RuntimeException ( " ' " + object + " ' could not be translated into a LongType . " ) ; 
 - } 
 - 
 - return FBUtilities . toByteBuffer ( longType ) ; 
 - } 
 - else if ( comparator instanceof LexicalUUIDType | | comparator instanceof TimeUUIDType ) 
 - { 
 - / / generate new time based UUID if object is empty 
 - / / this means that we have timeuuid ( ) call 
 - if ( comparator instanceof TimeUUIDType & & object . isEmpty ( ) ) 
 - return ByteBuffer . wrap ( UUIDGenerator . getInstance ( ) . generateTimeBasedUUID ( ) . asByteArray ( ) ) ; 
 - 
 - UUID uuid = ( object . isEmpty ( ) ) ? UUID . randomUUID ( ) : UUID . fromString ( object ) ; 
 - 
 - if ( comparator instanceof TimeUUIDType & & uuid . version ( ) ! = 1 ) 
 - throw new IllegalArgumentException ( " TimeUUID supports only version 1 UUIDs " ) ; 
 + if ( comparator = = null ) / / default comparator is BytesType 
 + comparator = BytesType . instance ; 
 
 - return ByteBuffer . wrap ( UUIDGen . decompose ( uuid ) ) ; 
 - } 
 - else if ( comparator instanceof IntegerType ) 
 - { 
 - BigInteger integerType ; 
 - 
 - try 
 - { 
 - integerType = new BigInteger ( object ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - throw new RuntimeException ( " ' " + object + " ' could not be translated into an IntegerType . " ) ; 
 - } 
 - 
 - return ByteBuffer . wrap ( integerType . toByteArray ( ) ) ; 
 - } 
 - else if ( comparator instanceof AsciiType ) 
 - { 
 - return ByteBuffer . wrap ( object . getBytes ( Charsets . US _ ASCII ) ) ; 
 - } 
 - else 
 - { 
 - return ByteBuffer . wrap ( object . getBytes ( Charsets . UTF _ 8 ) ) ; 
 - } 
 + return comparator . fromString ( object ) ; 
 } 
 
 / * * 
 @ @ - 1592 , 7 + 1539 , 7 @ @ public class CliClient extends CliUserHelp 
 * @ param columnName - column name to which value belongs 
 * @ param columnFamilyName - column family name 
 * @ param columnValue - actual column value 
 - * @ return byte [ ] - value in byte array representation 
 + * @ return value in byte array representation 
 * / 
 private ByteBuffer columnValueAsBytes ( ByteBuffer columnName , String columnFamilyName , String columnValue ) 
 { 
 @ @ - 1602 , 7 + 1549 , 7 @ @ public class CliClient extends CliUserHelp 
 { 
 byte [ ] currentColumnName = columnDefinition . getName ( ) ; 
 
 - if ( ByteBufferUtil . compare ( currentColumnName , columnName ) = = 0 ) 
 + if ( ByteBufferUtil . compare ( currentColumnName , columnName ) = = 0 ) 
 { 
 try 
 { 
 @ @ - 1710 , 7 + 1657 , 32 @ @ public class CliClient extends CliUserHelp 
 
 try 
 { 
 - ByteBuffer value = getBytesAccordingToType ( functionArg , validator ) ; 
 + 
 + ByteBuffer value ; 
 + 
 + if ( functionArg . isEmpty ( ) ) 
 + { 
 + if ( validator instanceof TimeUUIDType ) 
 + { 
 + value = ByteBuffer . wrap ( UUIDGenerator . getInstance ( ) . generateTimeBasedUUID ( ) . asByteArray ( ) ) ; 
 + } 
 + else if ( validator instanceof LexicalUUIDType ) 
 + { 
 + value = ByteBuffer . wrap ( UUIDGen . decompose ( UUID . randomUUID ( ) ) ) ; 
 + } 
 + else if ( validator instanceof BytesType ) 
 + { 
 + value = ByteBuffer . wrap ( new byte [ 0 ] ) ; 
 + } 
 + else 
 + { 
 + throw new RuntimeException ( String . format ( " Argument for ' % s ' could not be empty . " , functionName ) ) ; 
 + } 
 + } 
 + else 
 + { 
 + value = getBytesAccordingToType ( functionArg , validator ) ; 
 + } 
 
 / / performing ColumnDef local validator update 
 if ( withUpdate ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractType . java b / src / java / org / apache / cassandra / db / marshal / AbstractType . java 
 index 0395022 . . 94592fc 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / AbstractType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / AbstractType . java 
 @ @ - 40 , 7 + 40 , 14 @ @ public abstract class AbstractType implements Comparator < ByteBuffer > 
 / * * get a string representation of the bytes suitable for log messages * / 
 public abstract String getString ( ByteBuffer bytes ) ; 
 
 - / * * validate that the byte array is a valid sequence for the type we are supposed to be comparing * / 
 + / * * get a byte representation of the given string . 
 + * defaults to unsupportedoperation so people deploying custom Types can update at their leisure . * / 
 + public ByteBuffer fromString ( String source ) 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 + / * validate that the byte array is a valid sequence for the type we are supposed to be comparing * / 
 public void validate ( ByteBuffer bytes ) 
 { 
 getString ( bytes ) ; 
 @ @ - 66 , 7 + 73 , 7 @ @ public abstract class AbstractType implements Comparator < ByteBuffer > 
 } ; 
 } 
 
 - / * * convenience method * / 
 + / * convenience method * / 
 public String getString ( Collection < ByteBuffer > names ) 
 { 
 StringBuilder builder = new StringBuilder ( ) ; 
 @ @ - 77 , 7 + 84 , 7 @ @ public abstract class AbstractType implements Comparator < ByteBuffer > 
 return builder . toString ( ) ; 
 } 
 
 - / * * convenience method * / 
 + / * convenience method * / 
 public String getColumnsString ( Collection < IColumn > columns ) 
 { 
 StringBuilder builder = new StringBuilder ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / AsciiType . java b / src / java / org / apache / cassandra / db / marshal / AsciiType . java 
 index 7fb6e62 . . a84f5a6 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / AsciiType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / AsciiType . java 
 @ @ - 38 , 4 + 38 , 9 @ @ public class AsciiType extends BytesType 
 { 
 return ByteBufferUtil . string ( bytes , Charsets . US _ ASCII ) ; 
 } 
 + 
 + public ByteBuffer fromString ( String source ) 
 + { 
 + return ByteBuffer . wrap ( source . getBytes ( Charsets . US _ ASCII ) ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / BytesType . java b / src / java / org / apache / cassandra / db / marshal / BytesType . java 
 index bbfeb62 . . 56823eb 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / BytesType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / BytesType . java 
 @ @ - 46 , 4 + 46 , 9 @ @ public class BytesType extends AbstractType 
 { 
 return FBUtilities . bytesToHex ( bytes ) ; 
 } 
 + 
 + public ByteBuffer fromString ( String source ) 
 + { 
 + return ByteBuffer . wrap ( source . getBytes ( ) ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / IntegerType . java b / src / java / org / apache / cassandra / db / marshal / IntegerType . java 
 index 8a3d0f2 . . 528bb55 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / IntegerType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / IntegerType . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 
 package org . apache . cassandra . db . marshal ; 
 
 + import java . math . BigInteger ; 
 import java . nio . ByteBuffer ; 
 
 import org . apache . thrift . TBaseHelper ; 
 @ @ - 122 , 4 + 123 , 20 @ @ public final class IntegerType extends AbstractType 
 
 return new java . math . BigInteger ( TBaseHelper . byteBufferToByteArray ( bytes ) ) . toString ( 10 ) ; 
 } 
 + 
 + public ByteBuffer fromString ( String source ) 
 + { 
 + BigInteger integerType ; 
 + 
 + try 
 + { 
 + integerType = new BigInteger ( source ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( " ' " + source + " ' could not be translated into an IntegerType . " ) ; 
 + } 
 + 
 + return ByteBuffer . wrap ( integerType . toByteArray ( ) ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java b / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java 
 index 475b34d . . 33cafcc 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package org . apache . cassandra . db . marshal ; 
 
 
 import java . nio . ByteBuffer ; 
 + import java . util . UUID ; 
 
 import org . apache . cassandra . utils . UUIDGen ; 
 
 @ @ - 57 , 4 + 58 , 9 @ @ public class LexicalUUIDType extends AbstractType 
 } 
 return UUIDGen . getUUID ( bytes ) . toString ( ) ; 
 } 
 + 
 + public ByteBuffer fromString ( String source ) 
 + { 
 + return ByteBuffer . wrap ( UUIDGen . decompose ( UUID . fromString ( source ) ) ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / LocalByPartionerType . java b / src / java / org / apache / cassandra / db / marshal / LocalByPartionerType . java 
 index bba064e . . f518fbc 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / LocalByPartionerType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / LocalByPartionerType . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import java . nio . ByteBuffer ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . dht . Token ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 + import org . apache . commons . lang . NotImplementedException ; 
 
 / * * for sorting columns representing row keys in the row ordering as determined by a partitioner . 
 * Not intended for user - defined CFs , and will in fact error out if used with such . * / 
 @ @ - 41 , 6 + 42 , 11 @ @ public class LocalByPartionerType < T extends Token > extends AbstractType 
 return FBUtilities . bytesToHex ( bytes ) ; 
 } 
 
 + public ByteBuffer fromString ( String source ) 
 + { 
 + throw new NotImplementedException ( ) ; 
 + } 
 + 
 public int compare ( ByteBuffer o1 , ByteBuffer o2 ) 
 { 
 return partitioner . decorateKey ( o1 ) . compareTo ( partitioner . decorateKey ( o2 ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / LongType . java b / src / java / org / apache / cassandra / db / marshal / LongType . java 
 index 6a4a206 . . f9bf574 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / LongType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / LongType . java 
 @ @ - 24 , 6 + 24 , 7 @ @ package org . apache . cassandra . db . marshal ; 
 import java . nio . ByteBuffer ; 
 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 
 public class LongType extends AbstractType 
 { 
 @ @ - 64 , 4 + 65 , 20 @ @ public class LongType extends AbstractType 
 
 return String . valueOf ( bytes . getLong ( bytes . position ( ) + bytes . arrayOffset ( ) ) ) ; 
 } 
 + 
 + public ByteBuffer fromString ( String source ) 
 + { 
 + long longType ; 
 + 
 + try 
 + { 
 + longType = Long . valueOf ( source ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( " ' " + source + " ' could not be translated into a LongType . " ) ; 
 + } 
 + 
 + return FBUtilities . toByteBuffer ( longType ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 index 5a72423 . . 3a5b9fb 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . nio . ByteBuffer ; 
 import java . util . UUID ; 
 
 import org . apache . cassandra . utils . UUIDGen ; 
 + import org . safehaus . uuid . UUIDGenerator ; 
 
 public class TimeUUIDType extends AbstractType 
 { 
 @ @ - 87 , 4 + 88 , 14 @ @ public class TimeUUIDType extends AbstractType 
 } 
 return uuid . toString ( ) ; 
 } 
 + 
 + public ByteBuffer fromString ( String source ) 
 + { 
 + UUID uuid = UUID . fromString ( source ) ; 
 + 
 + if ( uuid . version ( ) ! = 1 ) 
 + throw new IllegalArgumentException ( " TimeUUID supports only version 1 UUIDs " ) ; 
 + 
 + return ByteBuffer . wrap ( UUIDGen . decompose ( uuid ) ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / UTF8Type . java b / src / java / org / apache / cassandra / db / marshal / UTF8Type . java 
 index 818b297 . . fc98c13 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / UTF8Type . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / UTF8Type . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import java . nio . ByteBuffer ; 
 import java . nio . charset . CharacterCodingException ; 
 import java . util . Arrays ; 
 
 + import com . google . common . base . Charsets ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 public class UTF8Type extends BytesType 
 @ @ - 43 , 4 + 44 , 9 @ @ public class UTF8Type extends BytesType 
 throw new MarshalException ( " invalid UTF8 bytes " + Arrays . toString ( bytes . array ( ) ) ) ; 
 } 
 } 
 + 
 + public ByteBuffer fromString ( String source ) 
 + { 
 + return ByteBuffer . wrap ( source . getBytes ( Charsets . UTF _ 8 ) ) ; 
 + } 
 }
