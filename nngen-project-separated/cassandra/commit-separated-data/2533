BLEU SCORE: 0.015445276590783498

TEST MSG: buffer writing of compression meta data , and make sure stream is closed
GENERATED MSG: Try harder to close files after compaction

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java <nl> index 8cd8c9f . . abb067f 100644 <nl> - - - a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java <nl> + + + b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java <nl> @ @ - 17 , 6 + 17 , 7 @ @ <nl> * / <nl> package org . apache . cassandra . io . compress ; <nl> <nl> + import java . io . BufferedOutputStream ; <nl> import java . io . DataInput ; <nl> import java . io . DataInputStream ; <nl> import java . io . DataOutput ; <nl> @ @ - 49 , 6 + 50 , 7 @ @ import org . apache . cassandra . io . sstable . Descriptor ; <nl> import org . apache . cassandra . io . util . DataOutputPlus ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . io . util . Memory ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . Pair ; <nl> <nl> / * * <nl> @ @ - 329 , 7 + 331 , 7 @ @ public class CompressionMetadata <nl> * / <nl> public long chunkOffsetBy ( int chunkIndex ) <nl> { <nl> - return offsets . getLong ( chunkIndex * 8 ) ; <nl> + return offsets . getLong ( chunkIndex * 8L ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 343 , 12 + 345 , 19 @ @ public class CompressionMetadata <nl> <nl> public void close ( long dataLength , int chunks ) throws IOException <nl> { <nl> - final DataOutputStream out = new DataOutputStream ( new FileOutputStream ( filePath ) ) ; <nl> - assert chunks = = count ; <nl> - writeHeader ( out , dataLength , chunks ) ; <nl> - for ( int i = 0 ; i < count ; i + + ) <nl> - out . writeLong ( offsets . getLong ( i * 8 ) ) ; <nl> - out . close ( ) ; <nl> + DataOutputStream out = null ; <nl> + try <nl> + { <nl> + 	 out = new DataOutputStream ( new BufferedOutputStream ( new FileOutputStream ( filePath ) ) ) ; <nl> + 	 assert chunks = = count ; <nl> + 	 writeHeader ( out , dataLength , chunks ) ; <nl> + 	 for ( int i = 0 ; i < count ; i + + ) <nl> + 	 out . writeLong ( offsets . getLong ( i * 8 ) ) ; <nl> + } <nl> + finally <nl> + { <nl> + FileUtils . closeQuietly ( out ) ; <nl> + } <nl> } <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / tools / stress / bin / stress b / tools / stress / bin / stress <nl> index eb1ec45 . . 4e60686 100755 <nl> - - - a / tools / stress / bin / stress <nl> + + + b / tools / stress / bin / stress <nl> @ @ - 48 , 4 + 48 , 4 @ @ if [ " x $ JAVA " = " x " ] ; then <nl> exit 1 <nl> fi <nl> <nl> - $ JAVA - server - cp $ CLASSPATH org . apache . cassandra . contrib . stress . Stress $ @ <nl> + $ JAVA - server - cp $ CLASSPATH org . apache . cassandra . stress . Stress $ @ <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CounterAdder . java b / tools / stress / src / org / apache / cassandra / stress / operations / CounterAdder . java <nl> index 347686f . . 89fe857 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CounterAdder . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CounterAdder . java <nl> @ @ - 62 , 7 + 62 , 7 @ @ public class CounterAdder extends Operation <nl> } <nl> <nl> String rawKey = String . format ( format , index ) ; <nl> - Map < ByteBuffer , Map < String , List < CounterMutation > > > record = new HashMap < ByteBuffer , Map < String , List < CounterMutation > > > ( ) ; <nl> + Map < ByteBuffer , Map < String , List < Mutation > > > record = new HashMap < ByteBuffer , Map < String , List < Mutation > > > ( ) ; <nl> <nl> record . put ( ByteBufferUtil . bytes ( rawKey ) , session . getColumnFamilyType ( ) = = ColumnFamilyType . Super <nl> ? getSuperColumnsMutationMap ( superColumns ) <nl> @ @ - 80 , 7 + 80 , 7 @ @ public class CounterAdder extends Operation <nl> <nl> try <nl> { <nl> - client . batch _ add ( record , session . getConsistencyLevel ( ) ) ; <nl> + client . batch _ mutate ( record , session . getConsistencyLevel ( ) ) ; <nl> success = true ; <nl> } <nl> catch ( Exception e ) <nl> @ @ - 104 , 15 + 104 , 15 @ @ public class CounterAdder extends Operation <nl> session . latency . getAndAdd ( System . currentTimeMillis ( ) - start ) ; <nl> } <nl> <nl> - private Map < String , List < CounterMutation > > getSuperColumnsMutationMap ( List < CounterSuperColumn > superColumns ) <nl> + private Map < String , List < Mutation > > getSuperColumnsMutationMap ( List < CounterSuperColumn > superColumns ) <nl> { <nl> - List < CounterMutation > mutations = new ArrayList < CounterMutation > ( ) ; <nl> - Map < String , List < CounterMutation > > mutationMap = new HashMap < String , List < CounterMutation > > ( ) ; <nl> + List < Mutation > mutations = new ArrayList < Mutation > ( ) ; <nl> + Map < String , List < Mutation > > mutationMap = new HashMap < String , List < Mutation > > ( ) ; <nl> <nl> for ( CounterSuperColumn s : superColumns ) <nl> { <nl> Counter counter = new Counter ( ) . setSuper _ column ( s ) ; <nl> - mutations . add ( new CounterMutation ( ) . setCounter ( counter ) ) ; <nl> + mutations . add ( new Mutation ( ) . setCounter ( counter ) ) ; <nl> } <nl> <nl> mutationMap . put ( " SuperCounter1 " , mutations ) ; <nl> @ @ - 120 , 15 + 120 , 15 @ @ public class CounterAdder extends Operation <nl> return mutationMap ; <nl> } <nl> <nl> - private Map < String , List < CounterMutation > > getColumnsMutationMap ( List < CounterColumn > columns ) <nl> + private Map < String , List < Mutation > > getColumnsMutationMap ( List < CounterColumn > columns ) <nl> { <nl> - List < CounterMutation > mutations = new ArrayList < CounterMutation > ( ) ; <nl> - Map < String , List < CounterMutation > > mutationMap = new HashMap < String , List < CounterMutation > > ( ) ; <nl> + List < Mutation > mutations = new ArrayList < Mutation > ( ) ; <nl> + Map < String , List < Mutation > > mutationMap = new HashMap < String , List < Mutation > > ( ) ; <nl> <nl> for ( CounterColumn c : columns ) <nl> { <nl> Counter counter = new Counter ( ) . setColumn ( c ) ; <nl> - mutations . add ( new CounterMutation ( ) . setCounter ( counter ) ) ; <nl> + mutations . add ( new Mutation ( ) . setCounter ( counter ) ) ; <nl> } <nl> <nl> mutationMap . put ( " Counter1 " , mutations ) ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java 
 index 8cd8c9f . . abb067f 100644 
 - - - a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java 
 + + + b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java 
 @ @ - 17 , 6 + 17 , 7 @ @ 
 * / 
 package org . apache . cassandra . io . compress ; 
 
 + import java . io . BufferedOutputStream ; 
 import java . io . DataInput ; 
 import java . io . DataInputStream ; 
 import java . io . DataOutput ; 
 @ @ - 49 , 6 + 50 , 7 @ @ import org . apache . cassandra . io . sstable . Descriptor ; 
 import org . apache . cassandra . io . util . DataOutputPlus ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . io . util . Memory ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . Pair ; 
 
 / * * 
 @ @ - 329 , 7 + 331 , 7 @ @ public class CompressionMetadata 
 * / 
 public long chunkOffsetBy ( int chunkIndex ) 
 { 
 - return offsets . getLong ( chunkIndex * 8 ) ; 
 + return offsets . getLong ( chunkIndex * 8L ) ; 
 } 
 
 / * * 
 @ @ - 343 , 12 + 345 , 19 @ @ public class CompressionMetadata 
 
 public void close ( long dataLength , int chunks ) throws IOException 
 { 
 - final DataOutputStream out = new DataOutputStream ( new FileOutputStream ( filePath ) ) ; 
 - assert chunks = = count ; 
 - writeHeader ( out , dataLength , chunks ) ; 
 - for ( int i = 0 ; i < count ; i + + ) 
 - out . writeLong ( offsets . getLong ( i * 8 ) ) ; 
 - out . close ( ) ; 
 + DataOutputStream out = null ; 
 + try 
 + { 
 + 	 out = new DataOutputStream ( new BufferedOutputStream ( new FileOutputStream ( filePath ) ) ) ; 
 + 	 assert chunks = = count ; 
 + 	 writeHeader ( out , dataLength , chunks ) ; 
 + 	 for ( int i = 0 ; i < count ; i + + ) 
 + 	 out . writeLong ( offsets . getLong ( i * 8 ) ) ; 
 + } 
 + finally 
 + { 
 + FileUtils . closeQuietly ( out ) ; 
 + } 
 } 
 } 


NEAREST DIFF:
diff - - git a / tools / stress / bin / stress b / tools / stress / bin / stress 
 index eb1ec45 . . 4e60686 100755 
 - - - a / tools / stress / bin / stress 
 + + + b / tools / stress / bin / stress 
 @ @ - 48 , 4 + 48 , 4 @ @ if [ " x $ JAVA " = " x " ] ; then 
 exit 1 
 fi 
 
 - $ JAVA - server - cp $ CLASSPATH org . apache . cassandra . contrib . stress . Stress $ @ 
 + $ JAVA - server - cp $ CLASSPATH org . apache . cassandra . stress . Stress $ @ 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CounterAdder . java b / tools / stress / src / org / apache / cassandra / stress / operations / CounterAdder . java 
 index 347686f . . 89fe857 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CounterAdder . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CounterAdder . java 
 @ @ - 62 , 7 + 62 , 7 @ @ public class CounterAdder extends Operation 
 } 
 
 String rawKey = String . format ( format , index ) ; 
 - Map < ByteBuffer , Map < String , List < CounterMutation > > > record = new HashMap < ByteBuffer , Map < String , List < CounterMutation > > > ( ) ; 
 + Map < ByteBuffer , Map < String , List < Mutation > > > record = new HashMap < ByteBuffer , Map < String , List < Mutation > > > ( ) ; 
 
 record . put ( ByteBufferUtil . bytes ( rawKey ) , session . getColumnFamilyType ( ) = = ColumnFamilyType . Super 
 ? getSuperColumnsMutationMap ( superColumns ) 
 @ @ - 80 , 7 + 80 , 7 @ @ public class CounterAdder extends Operation 
 
 try 
 { 
 - client . batch _ add ( record , session . getConsistencyLevel ( ) ) ; 
 + client . batch _ mutate ( record , session . getConsistencyLevel ( ) ) ; 
 success = true ; 
 } 
 catch ( Exception e ) 
 @ @ - 104 , 15 + 104 , 15 @ @ public class CounterAdder extends Operation 
 session . latency . getAndAdd ( System . currentTimeMillis ( ) - start ) ; 
 } 
 
 - private Map < String , List < CounterMutation > > getSuperColumnsMutationMap ( List < CounterSuperColumn > superColumns ) 
 + private Map < String , List < Mutation > > getSuperColumnsMutationMap ( List < CounterSuperColumn > superColumns ) 
 { 
 - List < CounterMutation > mutations = new ArrayList < CounterMutation > ( ) ; 
 - Map < String , List < CounterMutation > > mutationMap = new HashMap < String , List < CounterMutation > > ( ) ; 
 + List < Mutation > mutations = new ArrayList < Mutation > ( ) ; 
 + Map < String , List < Mutation > > mutationMap = new HashMap < String , List < Mutation > > ( ) ; 
 
 for ( CounterSuperColumn s : superColumns ) 
 { 
 Counter counter = new Counter ( ) . setSuper _ column ( s ) ; 
 - mutations . add ( new CounterMutation ( ) . setCounter ( counter ) ) ; 
 + mutations . add ( new Mutation ( ) . setCounter ( counter ) ) ; 
 } 
 
 mutationMap . put ( " SuperCounter1 " , mutations ) ; 
 @ @ - 120 , 15 + 120 , 15 @ @ public class CounterAdder extends Operation 
 return mutationMap ; 
 } 
 
 - private Map < String , List < CounterMutation > > getColumnsMutationMap ( List < CounterColumn > columns ) 
 + private Map < String , List < Mutation > > getColumnsMutationMap ( List < CounterColumn > columns ) 
 { 
 - List < CounterMutation > mutations = new ArrayList < CounterMutation > ( ) ; 
 - Map < String , List < CounterMutation > > mutationMap = new HashMap < String , List < CounterMutation > > ( ) ; 
 + List < Mutation > mutations = new ArrayList < Mutation > ( ) ; 
 + Map < String , List < Mutation > > mutationMap = new HashMap < String , List < Mutation > > ( ) ; 
 
 for ( CounterColumn c : columns ) 
 { 
 Counter counter = new Counter ( ) . setColumn ( c ) ; 
 - mutations . add ( new CounterMutation ( ) . setCounter ( counter ) ) ; 
 + mutations . add ( new Mutation ( ) . setCounter ( counter ) ) ; 
 } 
 
 mutationMap . put ( " Counter1 " , mutations ) ;
