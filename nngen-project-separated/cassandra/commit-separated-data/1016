BLEU SCORE: 0.03283637368030199

TEST MSG: Add query time validation method on Index
GENERATED MSG: Make naming for secondary indexes consistent

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index a7669bb . . 52fc3ab 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 4 <nl> + * Add query time validation method on Index ( CASSANDRA - 11043 ) <nl> * Avoid potential AssertionError in mixed version cluster ( CASSANDRA - 11128 ) <nl> * Properly handle hinted handoff after topology changes ( CASSANDRA - 5902 ) <nl> * AssertionError when listing sstable files on inconsistent disk state ( CASSANDRA - 11156 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index e84ab28 . . 931813a 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 46 , 6 + 46 , 7 @ @ import org . apache . cassandra . db . rows . RowIterator ; <nl> import org . apache . cassandra . db . view . View ; <nl> import org . apache . cassandra . dht . AbstractBounds ; <nl> import org . apache . cassandra . exceptions . * ; <nl> + import org . apache . cassandra . index . Index ; <nl> import org . apache . cassandra . index . SecondaryIndexManager ; <nl> import org . apache . cassandra . serializers . MarshalException ; <nl> import org . apache . cassandra . service . ClientState ; <nl> @ @ - 490 , 9 + 491 , 24 @ @ public class SelectStatement implements CQLStatement <nl> / / The LIMIT provided by the user is the number of CQL row he wants returned . <nl> / / We want to have getRangeSlice to count the number of columns , not the number of keys . <nl> AbstractBounds < PartitionPosition > keyBounds = restrictions . getPartitionKeyBounds ( options ) ; <nl> - return keyBounds = = null <nl> - ? ReadQuery . EMPTY <nl> - : new PartitionRangeReadCommand ( cfm , nowInSec , queriedColumns , rowFilter , limit , new DataRange ( keyBounds , clusteringIndexFilter ) , Optional . empty ( ) ) ; <nl> + if ( keyBounds = = null ) <nl> + return ReadQuery . EMPTY ; <nl> + <nl> + PartitionRangeReadCommand command = new PartitionRangeReadCommand ( cfm , <nl> + nowInSec , <nl> + queriedColumns , <nl> + rowFilter , <nl> + limit , <nl> + new DataRange ( keyBounds , clusteringIndexFilter ) , <nl> + Optional . empty ( ) ) ; <nl> + / / If there ' s a secondary index that the command can use , have it validate <nl> + / / the request parameters . Note that as a side effect , if a viable Index is <nl> + / / identified by the CFS ' s index manager , it will be cached in the command <nl> + / / and serialized during distribution to replicas in order to avoid performing <nl> + / / further lookups . <nl> + command . maybeValidateIndex ( ) ; <nl> + <nl> + return command ; <nl> } <nl> <nl> private ClusteringIndexFilter makeClusteringIndexFilter ( QueryOptions options ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ReadCommand . java b / src / java / org / apache / cassandra / db / ReadCommand . java <nl> index 97c3d07 . . c792a5a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ReadCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / ReadCommand . java <nl> @ @ - 321 , 6 + 321 , 19 @ @ public abstract class ReadCommand implements ReadQuery <nl> } <nl> <nl> / * * <nl> + * If the index manager for the CFS determines that there ' s an applicable <nl> + * 2i that can be used to execute this command , call its ( optional ) <nl> + * validation method to check that nothing in this command ' s parameters <nl> + * violates the implementation specific validation rules . <nl> + * / <nl> + public void maybeValidateIndex ( ) <nl> + { <nl> + Index index = getIndex ( Keyspace . openAndGetStore ( metadata ) ) ; <nl> + if ( null ! = index ) <nl> + index . validate ( this ) ; <nl> + } <nl> + <nl> + / * * <nl> * Executes this command on the local host . <nl> * <nl> * @ param orderGroup the operation group spanning this command <nl> diff - - git a / src / java / org / apache / cassandra / index / Index . java b / src / java / org / apache / cassandra / index / Index . java <nl> index 71dcfc9 . . ab6665d 100644 <nl> - - - a / src / java / org / apache / cassandra / index / Index . java <nl> + + + b / src / java / org / apache / cassandra / index / Index . java <nl> @ @ - 395 , 6 + 395 , 24 @ @ public interface Index <nl> * / <nl> <nl> / * * <nl> + * Used to validate the various parameters of a supplied { @ code } ReadCommand { @ code } , <nl> + * this is called prior to execution . In theory , any command instance may be checked <nl> + * by any { @ code } Index { @ code } instance , but in practice the index will be the one <nl> + * returned by a call to the { @ code } getIndex ( ColumnFamilyStore cfs ) { @ code } method on <nl> + * the supplied command . <nl> + * <nl> + * Custom index implementations should perform any validation of query expressions here and throw a meaningful <nl> + * InvalidRequestException when any expression or other parameter is invalid . <nl> + * <nl> + * @ param command a ReadCommand whose parameters are to be verified <nl> + * @ throws InvalidRequestException if the details of the command fail to meet the <nl> + * index ' s validation rules <nl> + * / <nl> + default void validate ( ReadCommand command ) throws InvalidRequestException <nl> + { <nl> + } <nl> + <nl> + / * * <nl> * Return a function which performs post processing on the results of a partition range read command . <nl> * In future , this may be used as a generalized mechanism for transforming results on the coordinator prior <nl> * to returning them to the caller . <nl> @ @ - 412 , 15 + 430 , 11 @ @ public interface Index <nl> <nl> / * * <nl> * Factory method for query time search helper . <nl> - * Custom index implementations should perform any validation of query expressions here and throw a meaningful <nl> - * InvalidRequestException when any expression is invalid . <nl> * <nl> * @ param command the read command being executed <nl> * @ return an Searcher with which to perform the supplied command <nl> - * @ throws InvalidRequestException if the command ' s expressions are invalid according to the <nl> - * specific syntax supported by the index implementation . <nl> * / <nl> - public Searcher searcherFor ( ReadCommand command ) throws InvalidRequestException ; <nl> + public Searcher searcherFor ( ReadCommand command ) ; <nl> <nl> / * * <nl> * Performs the actual index lookup during execution of a ReadCommand . <nl> diff - - git a / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java b / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java <nl> index fd35b29 . . 6ad8649 100644 <nl> - - - a / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java <nl> + + + b / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java <nl> @ @ - 27 , 6 + 27 , 8 @ @ import org . apache . cassandra . db . filter . DataLimits ; <nl> import org . apache . cassandra . db . rows . Row ; <nl> import org . apache . cassandra . dht . * ; <nl> import org . apache . cassandra . exceptions . RequestExecutionException ; <nl> + import org . apache . cassandra . index . Index ; <nl> + import org . apache . cassandra . schema . IndexMetadata ; <nl> <nl> / * * <nl> * Pages a RangeSliceCommand whose predicate is a slice query . <nl> @ @ - 89 , 9 + 91 , 9 @ @ public class RangeSliceQueryPager extends AbstractQueryPager <nl> } <nl> } <nl> <nl> - / / it won ' t hurt for the next page command to query the index manager <nl> - / / again to check for an applicable index , so don ' t supply one here <nl> - return new PartitionRangeReadCommand ( command . metadata ( ) , command . nowInSec ( ) , command . columnFilter ( ) , command . rowFilter ( ) , limits , pageRange , Optional . empty ( ) ) ; <nl> + Index index = command . getIndex ( Keyspace . openAndGetStore ( command . metadata ( ) ) ) ; <nl> + Optional < IndexMetadata > indexMetadata = index ! = null ? Optional . of ( index . getIndexMetadata ( ) ) : Optional . empty ( ) ; <nl> + return new PartitionRangeReadCommand ( command . metadata ( ) , command . nowInSec ( ) , command . columnFilter ( ) , command . rowFilter ( ) , limits , pageRange , indexMetadata ) ; <nl> } <nl> <nl> protected void recordLast ( DecoratedKey key , Row last ) <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> index ee86f9d . . ee3bfa3 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> @ @ - 48 , 6 + 48 , 7 @ @ import org . apache . cassandra . db . view . View ; <nl> import org . apache . cassandra . dht . * ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . exceptions . * ; <nl> + import org . apache . cassandra . index . Index ; <nl> import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> import org . apache . cassandra . locator . DynamicEndpointSnitch ; <nl> import org . apache . cassandra . metrics . ClientMetrics ; <nl> @ @ - 1715 , 6 + 1716 , 13 @ @ public class CassandraServer implements Cassandra . Iface <nl> limits , <nl> new DataRange ( bounds , filter ) , <nl> Optional . empty ( ) ) ; <nl> + / / If there ' s a secondary index that the command can use , have it validate <nl> + / / the request parameters . Note that as a side effect , if a viable Index is <nl> + / / identified by the CFS ' s index manager , it will be cached in the command <nl> + / / and serialized during distribution to replicas in order to avoid performing <nl> + / / further lookups . <nl> + cmd . maybeValidateIndex ( ) ; <nl> + <nl> try ( PartitionIterator results = StorageProxy . getRangeSlice ( cmd , consistencyLevel ) ) <nl> { <nl> return thriftifyKeySlices ( results , column _ parent , limits . perPartitionCount ( ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> index 71bc238 . . 43de101 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> @ @ - 31 , 18 + 31 , 15 @ @ import java . util . concurrent . TimeUnit ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> import java . util . stream . Collectors ; <nl> <nl> - import com . datastax . driver . core . * ; <nl> - import com . datastax . driver . core . ResultSet ; <nl> - <nl> import com . google . common . base . Objects ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableSet ; <nl> - <nl> import org . junit . * ; <nl> - <nl> - import com . datastax . driver . core . Cluster ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> + <nl> + import com . datastax . driver . core . * ; <nl> + import com . datastax . driver . core . ResultSet ; <nl> import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> @ @ - 56 , 7 + 53 , 8 @ @ import org . apache . cassandra . db . commitlog . CommitLog ; <nl> import org . apache . cassandra . db . marshal . * ; <nl> import org . apache . cassandra . db . marshal . TupleType ; <nl> import org . apache . cassandra . dht . Murmur3Partitioner ; <nl> - import org . apache . cassandra . exceptions . * ; <nl> + import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . exceptions . SyntaxException ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . serializers . TypeSerializer ; <nl> import org . apache . cassandra . service . ClientState ; <nl> @ @ - 66 , 6 + 64 , 7 @ @ import org . apache . cassandra . transport . Event ; <nl> import org . apache . cassandra . transport . Server ; <nl> import org . apache . cassandra . transport . messages . ResultMessage ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + <nl> import static junit . framework . Assert . assertNotNull ; <nl> <nl> / * * <nl> @ @ - 1005 , 15 + 1004 , 30 @ @ public abstract class CQLTester <nl> <nl> protected void assertInvalidThrowMessage ( String errorMessage , Class < ? extends Throwable > exception , String query , Object . . . values ) throws Throwable <nl> { <nl> + assertInvalidThrowMessage ( Integer . MIN _ VALUE , errorMessage , exception , query , values ) ; <nl> + } <nl> + <nl> + / / if a protocol version > Integer . MIN _ VALUE is supplied , executes <nl> + / / the query via the java driver , mimicking a real client . <nl> + protected void assertInvalidThrowMessage ( int protocolVersion , <nl> + String errorMessage , <nl> + Class < ? extends Throwable > exception , <nl> + String query , <nl> + Object . . . values ) throws Throwable <nl> + { <nl> try <nl> { <nl> - execute ( query , values ) ; <nl> + if ( protocolVersion = = Integer . MIN _ VALUE ) <nl> + execute ( query , values ) ; <nl> + else <nl> + executeNet ( protocolVersion , query , values ) ; <nl> + <nl> String q = USE _ PREPARED _ VALUES <nl> ? query + " ( values : " + formatAllValues ( values ) + " ) " <nl> : replaceValues ( query , values ) ; <nl> Assert . fail ( " Query should be invalid but no error was thrown . Query is : " + q ) ; <nl> } <nl> - catch ( CassandraException e ) <nl> + catch ( Exception e ) <nl> { <nl> if ( exception ! = null & & ! exception . isAssignableFrom ( e . getClass ( ) ) ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / index / CustomIndexTest . java b / test / unit / org / apache / cassandra / index / CustomIndexTest . java <nl> index 3bfb6a5 . . bc432ca 100644 <nl> - - - a / test / unit / org / apache / cassandra / index / CustomIndexTest . java <nl> + + + b / test / unit / org / apache / cassandra / index / CustomIndexTest . java <nl> @ @ - 9 , 6 + 9 , 7 @ @ import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import org . junit . Test ; <nl> <nl> + import com . datastax . driver . core . exceptions . QueryValidationException ; <nl> import org . apache . cassandra . Util ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . cql3 . CQLTester ; <nl> @ @ - 27 , 6 + 28 , 7 @ @ import org . apache . cassandra . db . partitions . UnfilteredPartitionIterator ; <nl> import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> import org . apache . cassandra . schema . IndexMetadata ; <nl> import org . apache . cassandra . schema . Indexes ; <nl> + import org . apache . cassandra . transport . Server ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> import static org . apache . cassandra . Util . throwAssert ; <nl> @ @ - 321 , 8 + 323 , 10 @ @ public class CustomIndexTest extends CQLTester <nl> <nl> createIndex ( String . format ( " CREATE CUSTOM INDEX custom _ index ON % % s ( c ) USING ' % s ' " , StubIndex . class . getName ( ) ) ) ; <nl> <nl> - assertInvalidMessage ( String . format ( IndexRestrictions . INDEX _ NOT _ FOUND , " no _ such _ index " , keyspace ( ) , currentTable ( ) ) , <nl> - " SELECT * FROM % s WHERE expr ( no _ such _ index , ' foo bar baz ' ) " ) ; <nl> + assertInvalidThrowMessage ( Server . CURRENT _ VERSION , <nl> + String . format ( IndexRestrictions . INDEX _ NOT _ FOUND , " no _ such _ index " , keyspace ( ) , currentTable ( ) ) , <nl> + QueryValidationException . class , <nl> + " SELECT * FROM % s WHERE expr ( no _ such _ index , ' foo bar baz ' ) " ) ; <nl> <nl> / / simple case <nl> assertRows ( execute ( " SELECT * FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) , row ) ; <nl> @ @ - 330 , 16 + 334 , 22 @ @ public class CustomIndexTest extends CQLTester <nl> assertRows ( execute ( " SELECT * FROM % s WHERE expr ( custom _ index , $ $ foo \ " ~ ~ ~ bar Baz $ $ ) " ) , row ) ; <nl> <nl> / / multiple expressions on the same index <nl> - assertInvalidMessage ( IndexRestrictions . MULTIPLE _ EXPRESSIONS , <nl> - " SELECT * FROM % s WHERE expr ( custom _ index , ' foo ' ) AND expr ( custom _ index , ' bar ' ) " ) ; <nl> + assertInvalidThrowMessage ( Server . CURRENT _ VERSION , <nl> + IndexRestrictions . MULTIPLE _ EXPRESSIONS , <nl> + QueryValidationException . class , <nl> + " SELECT * FROM % s WHERE expr ( custom _ index , ' foo ' ) AND expr ( custom _ index , ' bar ' ) " ) ; <nl> <nl> / / multiple expressions on different indexes <nl> createIndex ( String . format ( " CREATE CUSTOM INDEX other _ custom _ index ON % % s ( d ) USING ' % s ' " , StubIndex . class . getName ( ) ) ) ; <nl> - assertInvalidMessage ( IndexRestrictions . MULTIPLE _ EXPRESSIONS , <nl> - " SELECT * FROM % s WHERE expr ( custom _ index , ' foo ' ) AND expr ( other _ custom _ index , ' bar ' ) " ) ; <nl> - <nl> - assertInvalidMessage ( SelectStatement . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , <nl> - " SELECT * FROM % s WHERE expr ( custom _ index , ' foo ' ) AND d = 0 " ) ; <nl> + assertInvalidThrowMessage ( Server . CURRENT _ VERSION , <nl> + IndexRestrictions . MULTIPLE _ EXPRESSIONS , <nl> + QueryValidationException . class , <nl> + " SELECT * FROM % s WHERE expr ( custom _ index , ' foo ' ) AND expr ( other _ custom _ index , ' bar ' ) " ) ; <nl> + <nl> + assertInvalidThrowMessage ( Server . CURRENT _ VERSION , <nl> + SelectStatement . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , <nl> + QueryValidationException . class , <nl> + " SELECT * FROM % s WHERE expr ( custom _ index , ' foo ' ) AND d = 0 " ) ; <nl> assertRows ( execute ( " SELECT * FROM % s WHERE expr ( custom _ index , ' foo ' ) AND d = 0 ALLOW FILTERING " ) , row ) ; <nl> } <nl> <nl> @ @ - 349 , 8 + 359 , 10 @ @ public class CustomIndexTest extends CQLTester <nl> createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b ) ) " ) ; <nl> createIndex ( String . format ( " CREATE CUSTOM INDEX custom _ index ON % % s ( c ) USING ' % s ' " , <nl> NoCustomExpressionsIndex . class . getName ( ) ) ) ; <nl> - assertInvalidMessage ( String . format ( IndexRestrictions . CUSTOM _ EXPRESSION _ NOT _ SUPPORTED , " custom _ index " ) , <nl> - " SELECT * FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; <nl> + assertInvalidThrowMessage ( Server . CURRENT _ VERSION , <nl> + String . format ( IndexRestrictions . CUSTOM _ EXPRESSION _ NOT _ SUPPORTED , " custom _ index " ) , <nl> + QueryValidationException . class , <nl> + " SELECT * FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 358 , 8 + 370 , 11 @ @ public class CustomIndexTest extends CQLTester <nl> { <nl> createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b ) ) " ) ; <nl> createIndex ( String . format ( " CREATE CUSTOM INDEX custom _ index ON % % s ( c ) USING ' % s ' " , <nl> - ExpressionRejectingIndex . class . getName ( ) ) ) ; <nl> - assertInvalidMessage ( " None shall pass " , " SELECT * FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; <nl> + AlwaysRejectIndex . class . getName ( ) ) ) ; <nl> + assertInvalidThrowMessage ( Server . CURRENT _ VERSION , <nl> + " None shall pass " , <nl> + QueryValidationException . class , <nl> + " SELECT * FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 367 , 8 + 382 , 10 @ @ public class CustomIndexTest extends CQLTester <nl> { <nl> createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b ) ) " ) ; <nl> createIndex ( " CREATE INDEX non _ custom _ index ON % s ( c ) " ) ; <nl> - assertInvalidMessage ( String . format ( IndexRestrictions . NON _ CUSTOM _ INDEX _ IN _ EXPRESSION , " non _ custom _ index " ) , <nl> - " SELECT * FROM % s WHERE expr ( non _ custom _ index , ' c = 0 ' ) " ) ; <nl> + assertInvalidThrowMessage ( Server . CURRENT _ VERSION , <nl> + String . format ( IndexRestrictions . NON _ CUSTOM _ INDEX _ IN _ EXPRESSION , " non _ custom _ index " ) , <nl> + QueryValidationException . class , <nl> + " SELECT * FROM % s WHERE expr ( non _ custom _ index , ' c = 0 ' ) " ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 377 , 10 + 394 , 14 @ @ public class CustomIndexTest extends CQLTester <nl> createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b ) ) " ) ; <nl> createIndex ( String . format ( " CREATE CUSTOM INDEX custom _ index ON % % s ( c ) USING ' % s ' " , StubIndex . class . getName ( ) ) ) ; <nl> <nl> - assertInvalidMessage ( ModificationStatement . CUSTOM _ EXPRESSIONS _ NOT _ ALLOWED , <nl> - " DELETE FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; <nl> - assertInvalidMessage ( ModificationStatement . CUSTOM _ EXPRESSIONS _ NOT _ ALLOWED , <nl> - " UPDATE % s SET d = 0 WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; <nl> + assertInvalidThrowMessage ( Server . CURRENT _ VERSION , <nl> + ModificationStatement . CUSTOM _ EXPRESSIONS _ NOT _ ALLOWED , <nl> + QueryValidationException . class , <nl> + " DELETE FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; <nl> + assertInvalidThrowMessage ( Server . CURRENT _ VERSION , <nl> + ModificationStatement . CUSTOM _ EXPRESSIONS _ NOT _ ALLOWED , <nl> + QueryValidationException . class , <nl> + " UPDATE % s SET d = 0 WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 451 , 12 + 472 , 16 @ @ public class CustomIndexTest extends CQLTester <nl> UTF8ExpressionIndex . class . getName ( ) ) ) ; <nl> <nl> execute ( " SELECT * FROM % s WHERE expr ( text _ index , ' foo ' ) " ) ; <nl> - assertInvalidMessage ( " Invalid INTEGER constant ( 99 ) for \ " custom index expression \ " of type text " , <nl> - " SELECT * FROM % s WHERE expr ( text _ index , 99 ) " ) ; <nl> + assertInvalidThrowMessage ( Server . CURRENT _ VERSION , <nl> + " Invalid INTEGER constant ( 99 ) for \ " custom index expression \ " of type text " , <nl> + QueryValidationException . class , <nl> + " SELECT * FROM % s WHERE expr ( text _ index , 99 ) " ) ; <nl> <nl> execute ( " SELECT * FROM % s WHERE expr ( int _ index , 99 ) " ) ; <nl> - assertInvalidMessage ( " Invalid STRING constant ( foo ) for \ " custom index expression \ " of type int " , <nl> - " SELECT * FROM % s WHERE expr ( int _ index , ' foo ' ) " ) ; <nl> + assertInvalidThrowMessage ( Server . CURRENT _ VERSION , <nl> + " Invalid STRING constant ( foo ) for \ " custom index expression \ " of type int " , <nl> + QueryValidationException . class , <nl> + " SELECT * FROM % s WHERE expr ( int _ index , ' foo ' ) " ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 683 , 17 + 708 , 22 @ @ public class CustomIndexTest extends CQLTester <nl> } <nl> } <nl> <nl> - public static final class ExpressionRejectingIndex extends StubIndex <nl> + public static final class AlwaysRejectIndex extends StubIndex <nl> { <nl> - public ExpressionRejectingIndex ( ColumnFamilyStore baseCfs , IndexMetadata metadata ) <nl> + public AlwaysRejectIndex ( ColumnFamilyStore baseCfs , IndexMetadata metadata ) <nl> { <nl> super ( baseCfs , metadata ) ; <nl> } <nl> <nl> - public Searcher searcherFor ( ReadCommand command ) throws InvalidRequestException <nl> + public void validate ( ReadCommand command ) throws InvalidRequestException <nl> { <nl> throw new InvalidRequestException ( " None shall pass " ) ; <nl> } <nl> + <nl> + public Searcher searcherFor ( ReadCommand command ) <nl> + { <nl> + throw new InvalidRequestException ( " None shall pass ( though I ' d have expected to fail faster ) " ) ; <nl> + } <nl> } <nl> <nl> public static final class IndexWithValidateOptions extends StubIndex
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index a7669bb . . 52fc3ab 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 4 
 + * Add query time validation method on Index ( CASSANDRA - 11043 ) 
 * Avoid potential AssertionError in mixed version cluster ( CASSANDRA - 11128 ) 
 * Properly handle hinted handoff after topology changes ( CASSANDRA - 5902 ) 
 * AssertionError when listing sstable files on inconsistent disk state ( CASSANDRA - 11156 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index e84ab28 . . 931813a 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 46 , 6 + 46 , 7 @ @ import org . apache . cassandra . db . rows . RowIterator ; 
 import org . apache . cassandra . db . view . View ; 
 import org . apache . cassandra . dht . AbstractBounds ; 
 import org . apache . cassandra . exceptions . * ; 
 + import org . apache . cassandra . index . Index ; 
 import org . apache . cassandra . index . SecondaryIndexManager ; 
 import org . apache . cassandra . serializers . MarshalException ; 
 import org . apache . cassandra . service . ClientState ; 
 @ @ - 490 , 9 + 491 , 24 @ @ public class SelectStatement implements CQLStatement 
 / / The LIMIT provided by the user is the number of CQL row he wants returned . 
 / / We want to have getRangeSlice to count the number of columns , not the number of keys . 
 AbstractBounds < PartitionPosition > keyBounds = restrictions . getPartitionKeyBounds ( options ) ; 
 - return keyBounds = = null 
 - ? ReadQuery . EMPTY 
 - : new PartitionRangeReadCommand ( cfm , nowInSec , queriedColumns , rowFilter , limit , new DataRange ( keyBounds , clusteringIndexFilter ) , Optional . empty ( ) ) ; 
 + if ( keyBounds = = null ) 
 + return ReadQuery . EMPTY ; 
 + 
 + PartitionRangeReadCommand command = new PartitionRangeReadCommand ( cfm , 
 + nowInSec , 
 + queriedColumns , 
 + rowFilter , 
 + limit , 
 + new DataRange ( keyBounds , clusteringIndexFilter ) , 
 + Optional . empty ( ) ) ; 
 + / / If there ' s a secondary index that the command can use , have it validate 
 + / / the request parameters . Note that as a side effect , if a viable Index is 
 + / / identified by the CFS ' s index manager , it will be cached in the command 
 + / / and serialized during distribution to replicas in order to avoid performing 
 + / / further lookups . 
 + command . maybeValidateIndex ( ) ; 
 + 
 + return command ; 
 } 
 
 private ClusteringIndexFilter makeClusteringIndexFilter ( QueryOptions options ) 
 diff - - git a / src / java / org / apache / cassandra / db / ReadCommand . java b / src / java / org / apache / cassandra / db / ReadCommand . java 
 index 97c3d07 . . c792a5a 100644 
 - - - a / src / java / org / apache / cassandra / db / ReadCommand . java 
 + + + b / src / java / org / apache / cassandra / db / ReadCommand . java 
 @ @ - 321 , 6 + 321 , 19 @ @ public abstract class ReadCommand implements ReadQuery 
 } 
 
 / * * 
 + * If the index manager for the CFS determines that there ' s an applicable 
 + * 2i that can be used to execute this command , call its ( optional ) 
 + * validation method to check that nothing in this command ' s parameters 
 + * violates the implementation specific validation rules . 
 + * / 
 + public void maybeValidateIndex ( ) 
 + { 
 + Index index = getIndex ( Keyspace . openAndGetStore ( metadata ) ) ; 
 + if ( null ! = index ) 
 + index . validate ( this ) ; 
 + } 
 + 
 + / * * 
 * Executes this command on the local host . 
 * 
 * @ param orderGroup the operation group spanning this command 
 diff - - git a / src / java / org / apache / cassandra / index / Index . java b / src / java / org / apache / cassandra / index / Index . java 
 index 71dcfc9 . . ab6665d 100644 
 - - - a / src / java / org / apache / cassandra / index / Index . java 
 + + + b / src / java / org / apache / cassandra / index / Index . java 
 @ @ - 395 , 6 + 395 , 24 @ @ public interface Index 
 * / 
 
 / * * 
 + * Used to validate the various parameters of a supplied { @ code } ReadCommand { @ code } , 
 + * this is called prior to execution . In theory , any command instance may be checked 
 + * by any { @ code } Index { @ code } instance , but in practice the index will be the one 
 + * returned by a call to the { @ code } getIndex ( ColumnFamilyStore cfs ) { @ code } method on 
 + * the supplied command . 
 + * 
 + * Custom index implementations should perform any validation of query expressions here and throw a meaningful 
 + * InvalidRequestException when any expression or other parameter is invalid . 
 + * 
 + * @ param command a ReadCommand whose parameters are to be verified 
 + * @ throws InvalidRequestException if the details of the command fail to meet the 
 + * index ' s validation rules 
 + * / 
 + default void validate ( ReadCommand command ) throws InvalidRequestException 
 + { 
 + } 
 + 
 + / * * 
 * Return a function which performs post processing on the results of a partition range read command . 
 * In future , this may be used as a generalized mechanism for transforming results on the coordinator prior 
 * to returning them to the caller . 
 @ @ - 412 , 15 + 430 , 11 @ @ public interface Index 
 
 / * * 
 * Factory method for query time search helper . 
 - * Custom index implementations should perform any validation of query expressions here and throw a meaningful 
 - * InvalidRequestException when any expression is invalid . 
 * 
 * @ param command the read command being executed 
 * @ return an Searcher with which to perform the supplied command 
 - * @ throws InvalidRequestException if the command ' s expressions are invalid according to the 
 - * specific syntax supported by the index implementation . 
 * / 
 - public Searcher searcherFor ( ReadCommand command ) throws InvalidRequestException ; 
 + public Searcher searcherFor ( ReadCommand command ) ; 
 
 / * * 
 * Performs the actual index lookup during execution of a ReadCommand . 
 diff - - git a / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java b / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java 
 index fd35b29 . . 6ad8649 100644 
 - - - a / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java 
 + + + b / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java 
 @ @ - 27 , 6 + 27 , 8 @ @ import org . apache . cassandra . db . filter . DataLimits ; 
 import org . apache . cassandra . db . rows . Row ; 
 import org . apache . cassandra . dht . * ; 
 import org . apache . cassandra . exceptions . RequestExecutionException ; 
 + import org . apache . cassandra . index . Index ; 
 + import org . apache . cassandra . schema . IndexMetadata ; 
 
 / * * 
 * Pages a RangeSliceCommand whose predicate is a slice query . 
 @ @ - 89 , 9 + 91 , 9 @ @ public class RangeSliceQueryPager extends AbstractQueryPager 
 } 
 } 
 
 - / / it won ' t hurt for the next page command to query the index manager 
 - / / again to check for an applicable index , so don ' t supply one here 
 - return new PartitionRangeReadCommand ( command . metadata ( ) , command . nowInSec ( ) , command . columnFilter ( ) , command . rowFilter ( ) , limits , pageRange , Optional . empty ( ) ) ; 
 + Index index = command . getIndex ( Keyspace . openAndGetStore ( command . metadata ( ) ) ) ; 
 + Optional < IndexMetadata > indexMetadata = index ! = null ? Optional . of ( index . getIndexMetadata ( ) ) : Optional . empty ( ) ; 
 + return new PartitionRangeReadCommand ( command . metadata ( ) , command . nowInSec ( ) , command . columnFilter ( ) , command . rowFilter ( ) , limits , pageRange , indexMetadata ) ; 
 } 
 
 protected void recordLast ( DecoratedKey key , Row last ) 
 diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 index ee86f9d . . ee3bfa3 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 @ @ - 48 , 6 + 48 , 7 @ @ import org . apache . cassandra . db . view . View ; 
 import org . apache . cassandra . dht . * ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . exceptions . * ; 
 + import org . apache . cassandra . index . Index ; 
 import org . apache . cassandra . io . util . DataOutputBuffer ; 
 import org . apache . cassandra . locator . DynamicEndpointSnitch ; 
 import org . apache . cassandra . metrics . ClientMetrics ; 
 @ @ - 1715 , 6 + 1716 , 13 @ @ public class CassandraServer implements Cassandra . Iface 
 limits , 
 new DataRange ( bounds , filter ) , 
 Optional . empty ( ) ) ; 
 + / / If there ' s a secondary index that the command can use , have it validate 
 + / / the request parameters . Note that as a side effect , if a viable Index is 
 + / / identified by the CFS ' s index manager , it will be cached in the command 
 + / / and serialized during distribution to replicas in order to avoid performing 
 + / / further lookups . 
 + cmd . maybeValidateIndex ( ) ; 
 + 
 try ( PartitionIterator results = StorageProxy . getRangeSlice ( cmd , consistencyLevel ) ) 
 { 
 return thriftifyKeySlices ( results , column _ parent , limits . perPartitionCount ( ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 index 71bc238 . . 43de101 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 @ @ - 31 , 18 + 31 , 15 @ @ import java . util . concurrent . TimeUnit ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 import java . util . stream . Collectors ; 
 
 - import com . datastax . driver . core . * ; 
 - import com . datastax . driver . core . ResultSet ; 
 - 
 import com . google . common . base . Objects ; 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableSet ; 
 - 
 import org . junit . * ; 
 - 
 - import com . datastax . driver . core . Cluster ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 + 
 + import com . datastax . driver . core . * ; 
 + import com . datastax . driver . core . ResultSet ; 
 import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 import org . apache . cassandra . config . CFMetaData ; 
 @ @ - 56 , 7 + 53 , 8 @ @ import org . apache . cassandra . db . commitlog . CommitLog ; 
 import org . apache . cassandra . db . marshal . * ; 
 import org . apache . cassandra . db . marshal . TupleType ; 
 import org . apache . cassandra . dht . Murmur3Partitioner ; 
 - import org . apache . cassandra . exceptions . * ; 
 + import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . exceptions . SyntaxException ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . serializers . TypeSerializer ; 
 import org . apache . cassandra . service . ClientState ; 
 @ @ - 66 , 6 + 64 , 7 @ @ import org . apache . cassandra . transport . Event ; 
 import org . apache . cassandra . transport . Server ; 
 import org . apache . cassandra . transport . messages . ResultMessage ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 + 
 import static junit . framework . Assert . assertNotNull ; 
 
 / * * 
 @ @ - 1005 , 15 + 1004 , 30 @ @ public abstract class CQLTester 
 
 protected void assertInvalidThrowMessage ( String errorMessage , Class < ? extends Throwable > exception , String query , Object . . . values ) throws Throwable 
 { 
 + assertInvalidThrowMessage ( Integer . MIN _ VALUE , errorMessage , exception , query , values ) ; 
 + } 
 + 
 + / / if a protocol version > Integer . MIN _ VALUE is supplied , executes 
 + / / the query via the java driver , mimicking a real client . 
 + protected void assertInvalidThrowMessage ( int protocolVersion , 
 + String errorMessage , 
 + Class < ? extends Throwable > exception , 
 + String query , 
 + Object . . . values ) throws Throwable 
 + { 
 try 
 { 
 - execute ( query , values ) ; 
 + if ( protocolVersion = = Integer . MIN _ VALUE ) 
 + execute ( query , values ) ; 
 + else 
 + executeNet ( protocolVersion , query , values ) ; 
 + 
 String q = USE _ PREPARED _ VALUES 
 ? query + " ( values : " + formatAllValues ( values ) + " ) " 
 : replaceValues ( query , values ) ; 
 Assert . fail ( " Query should be invalid but no error was thrown . Query is : " + q ) ; 
 } 
 - catch ( CassandraException e ) 
 + catch ( Exception e ) 
 { 
 if ( exception ! = null & & ! exception . isAssignableFrom ( e . getClass ( ) ) ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / index / CustomIndexTest . java b / test / unit / org / apache / cassandra / index / CustomIndexTest . java 
 index 3bfb6a5 . . bc432ca 100644 
 - - - a / test / unit / org / apache / cassandra / index / CustomIndexTest . java 
 + + + b / test / unit / org / apache / cassandra / index / CustomIndexTest . java 
 @ @ - 9 , 6 + 9 , 7 @ @ import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 import org . junit . Test ; 
 
 + import com . datastax . driver . core . exceptions . QueryValidationException ; 
 import org . apache . cassandra . Util ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . cql3 . CQLTester ; 
 @ @ - 27 , 6 + 28 , 7 @ @ import org . apache . cassandra . db . partitions . UnfilteredPartitionIterator ; 
 import org . apache . cassandra . exceptions . InvalidRequestException ; 
 import org . apache . cassandra . schema . IndexMetadata ; 
 import org . apache . cassandra . schema . Indexes ; 
 + import org . apache . cassandra . transport . Server ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 import static org . apache . cassandra . Util . throwAssert ; 
 @ @ - 321 , 8 + 323 , 10 @ @ public class CustomIndexTest extends CQLTester 
 
 createIndex ( String . format ( " CREATE CUSTOM INDEX custom _ index ON % % s ( c ) USING ' % s ' " , StubIndex . class . getName ( ) ) ) ; 
 
 - assertInvalidMessage ( String . format ( IndexRestrictions . INDEX _ NOT _ FOUND , " no _ such _ index " , keyspace ( ) , currentTable ( ) ) , 
 - " SELECT * FROM % s WHERE expr ( no _ such _ index , ' foo bar baz ' ) " ) ; 
 + assertInvalidThrowMessage ( Server . CURRENT _ VERSION , 
 + String . format ( IndexRestrictions . INDEX _ NOT _ FOUND , " no _ such _ index " , keyspace ( ) , currentTable ( ) ) , 
 + QueryValidationException . class , 
 + " SELECT * FROM % s WHERE expr ( no _ such _ index , ' foo bar baz ' ) " ) ; 
 
 / / simple case 
 assertRows ( execute ( " SELECT * FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) , row ) ; 
 @ @ - 330 , 16 + 334 , 22 @ @ public class CustomIndexTest extends CQLTester 
 assertRows ( execute ( " SELECT * FROM % s WHERE expr ( custom _ index , $ $ foo \ " ~ ~ ~ bar Baz $ $ ) " ) , row ) ; 
 
 / / multiple expressions on the same index 
 - assertInvalidMessage ( IndexRestrictions . MULTIPLE _ EXPRESSIONS , 
 - " SELECT * FROM % s WHERE expr ( custom _ index , ' foo ' ) AND expr ( custom _ index , ' bar ' ) " ) ; 
 + assertInvalidThrowMessage ( Server . CURRENT _ VERSION , 
 + IndexRestrictions . MULTIPLE _ EXPRESSIONS , 
 + QueryValidationException . class , 
 + " SELECT * FROM % s WHERE expr ( custom _ index , ' foo ' ) AND expr ( custom _ index , ' bar ' ) " ) ; 
 
 / / multiple expressions on different indexes 
 createIndex ( String . format ( " CREATE CUSTOM INDEX other _ custom _ index ON % % s ( d ) USING ' % s ' " , StubIndex . class . getName ( ) ) ) ; 
 - assertInvalidMessage ( IndexRestrictions . MULTIPLE _ EXPRESSIONS , 
 - " SELECT * FROM % s WHERE expr ( custom _ index , ' foo ' ) AND expr ( other _ custom _ index , ' bar ' ) " ) ; 
 - 
 - assertInvalidMessage ( SelectStatement . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , 
 - " SELECT * FROM % s WHERE expr ( custom _ index , ' foo ' ) AND d = 0 " ) ; 
 + assertInvalidThrowMessage ( Server . CURRENT _ VERSION , 
 + IndexRestrictions . MULTIPLE _ EXPRESSIONS , 
 + QueryValidationException . class , 
 + " SELECT * FROM % s WHERE expr ( custom _ index , ' foo ' ) AND expr ( other _ custom _ index , ' bar ' ) " ) ; 
 + 
 + assertInvalidThrowMessage ( Server . CURRENT _ VERSION , 
 + SelectStatement . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , 
 + QueryValidationException . class , 
 + " SELECT * FROM % s WHERE expr ( custom _ index , ' foo ' ) AND d = 0 " ) ; 
 assertRows ( execute ( " SELECT * FROM % s WHERE expr ( custom _ index , ' foo ' ) AND d = 0 ALLOW FILTERING " ) , row ) ; 
 } 
 
 @ @ - 349 , 8 + 359 , 10 @ @ public class CustomIndexTest extends CQLTester 
 createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b ) ) " ) ; 
 createIndex ( String . format ( " CREATE CUSTOM INDEX custom _ index ON % % s ( c ) USING ' % s ' " , 
 NoCustomExpressionsIndex . class . getName ( ) ) ) ; 
 - assertInvalidMessage ( String . format ( IndexRestrictions . CUSTOM _ EXPRESSION _ NOT _ SUPPORTED , " custom _ index " ) , 
 - " SELECT * FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; 
 + assertInvalidThrowMessage ( Server . CURRENT _ VERSION , 
 + String . format ( IndexRestrictions . CUSTOM _ EXPRESSION _ NOT _ SUPPORTED , " custom _ index " ) , 
 + QueryValidationException . class , 
 + " SELECT * FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; 
 } 
 
 @ Test 
 @ @ - 358 , 8 + 370 , 11 @ @ public class CustomIndexTest extends CQLTester 
 { 
 createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b ) ) " ) ; 
 createIndex ( String . format ( " CREATE CUSTOM INDEX custom _ index ON % % s ( c ) USING ' % s ' " , 
 - ExpressionRejectingIndex . class . getName ( ) ) ) ; 
 - assertInvalidMessage ( " None shall pass " , " SELECT * FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; 
 + AlwaysRejectIndex . class . getName ( ) ) ) ; 
 + assertInvalidThrowMessage ( Server . CURRENT _ VERSION , 
 + " None shall pass " , 
 + QueryValidationException . class , 
 + " SELECT * FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; 
 } 
 
 @ Test 
 @ @ - 367 , 8 + 382 , 10 @ @ public class CustomIndexTest extends CQLTester 
 { 
 createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b ) ) " ) ; 
 createIndex ( " CREATE INDEX non _ custom _ index ON % s ( c ) " ) ; 
 - assertInvalidMessage ( String . format ( IndexRestrictions . NON _ CUSTOM _ INDEX _ IN _ EXPRESSION , " non _ custom _ index " ) , 
 - " SELECT * FROM % s WHERE expr ( non _ custom _ index , ' c = 0 ' ) " ) ; 
 + assertInvalidThrowMessage ( Server . CURRENT _ VERSION , 
 + String . format ( IndexRestrictions . NON _ CUSTOM _ INDEX _ IN _ EXPRESSION , " non _ custom _ index " ) , 
 + QueryValidationException . class , 
 + " SELECT * FROM % s WHERE expr ( non _ custom _ index , ' c = 0 ' ) " ) ; 
 } 
 
 @ Test 
 @ @ - 377 , 10 + 394 , 14 @ @ public class CustomIndexTest extends CQLTester 
 createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b ) ) " ) ; 
 createIndex ( String . format ( " CREATE CUSTOM INDEX custom _ index ON % % s ( c ) USING ' % s ' " , StubIndex . class . getName ( ) ) ) ; 
 
 - assertInvalidMessage ( ModificationStatement . CUSTOM _ EXPRESSIONS _ NOT _ ALLOWED , 
 - " DELETE FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; 
 - assertInvalidMessage ( ModificationStatement . CUSTOM _ EXPRESSIONS _ NOT _ ALLOWED , 
 - " UPDATE % s SET d = 0 WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; 
 + assertInvalidThrowMessage ( Server . CURRENT _ VERSION , 
 + ModificationStatement . CUSTOM _ EXPRESSIONS _ NOT _ ALLOWED , 
 + QueryValidationException . class , 
 + " DELETE FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; 
 + assertInvalidThrowMessage ( Server . CURRENT _ VERSION , 
 + ModificationStatement . CUSTOM _ EXPRESSIONS _ NOT _ ALLOWED , 
 + QueryValidationException . class , 
 + " UPDATE % s SET d = 0 WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; 
 } 
 
 @ Test 
 @ @ - 451 , 12 + 472 , 16 @ @ public class CustomIndexTest extends CQLTester 
 UTF8ExpressionIndex . class . getName ( ) ) ) ; 
 
 execute ( " SELECT * FROM % s WHERE expr ( text _ index , ' foo ' ) " ) ; 
 - assertInvalidMessage ( " Invalid INTEGER constant ( 99 ) for \ " custom index expression \ " of type text " , 
 - " SELECT * FROM % s WHERE expr ( text _ index , 99 ) " ) ; 
 + assertInvalidThrowMessage ( Server . CURRENT _ VERSION , 
 + " Invalid INTEGER constant ( 99 ) for \ " custom index expression \ " of type text " , 
 + QueryValidationException . class , 
 + " SELECT * FROM % s WHERE expr ( text _ index , 99 ) " ) ; 
 
 execute ( " SELECT * FROM % s WHERE expr ( int _ index , 99 ) " ) ; 
 - assertInvalidMessage ( " Invalid STRING constant ( foo ) for \ " custom index expression \ " of type int " , 
 - " SELECT * FROM % s WHERE expr ( int _ index , ' foo ' ) " ) ; 
 + assertInvalidThrowMessage ( Server . CURRENT _ VERSION , 
 + " Invalid STRING constant ( foo ) for \ " custom index expression \ " of type int " , 
 + QueryValidationException . class , 
 + " SELECT * FROM % s WHERE expr ( int _ index , ' foo ' ) " ) ; 
 } 
 
 @ Test 
 @ @ - 683 , 17 + 708 , 22 @ @ public class CustomIndexTest extends CQLTester 
 } 
 } 
 
 - public static final class ExpressionRejectingIndex extends StubIndex 
 + public static final class AlwaysRejectIndex extends StubIndex 
 { 
 - public ExpressionRejectingIndex ( ColumnFamilyStore baseCfs , IndexMetadata metadata ) 
 + public AlwaysRejectIndex ( ColumnFamilyStore baseCfs , IndexMetadata metadata ) 
 { 
 super ( baseCfs , metadata ) ; 
 } 
 
 - public Searcher searcherFor ( ReadCommand command ) throws InvalidRequestException 
 + public void validate ( ReadCommand command ) throws InvalidRequestException 
 { 
 throw new InvalidRequestException ( " None shall pass " ) ; 
 } 
 + 
 + public Searcher searcherFor ( ReadCommand command ) 
 + { 
 + throw new InvalidRequestException ( " None shall pass ( though I ' d have expected to fail faster ) " ) ; 
 + } 
 } 
 
 public static final class IndexWithValidateOptions extends StubIndex

NEAREST DIFF:
ELIMINATEDSENTENCE
