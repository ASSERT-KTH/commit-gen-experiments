BLEU SCORE: 0.05341087579952926

TEST MSG: fix merge left - over
GENERATED MSG: Restrict script UDFs to Nashorn

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java <nl> index 6faaf8a . . af9ec1a 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java <nl> @ @ - 17 , 7 + 17 , 6 @ @ <nl> * / <nl> package org . apache . cassandra . cql3 . validation . entities ; <nl> <nl> - import java . security . AccessControlException ; <nl> import java . util . ArrayList ; <nl> import java . util . Date ; <nl> import java . util . List ; <nl> @ @ - 28 , 8 + 27 , 6 @ @ import org . junit . Test ; <nl> <nl> import com . datastax . driver . core . * ; <nl> import com . datastax . driver . core . exceptions . InvalidQueryException ; <nl> - import org . apache . cassandra . config . Config ; <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . cql3 . CQLTester ; <nl> import org . apache . cassandra . cql3 . QueryProcessor ; <nl> @ @ - 37 , 13 + 34 , 10 @ @ import org . apache . cassandra . cql3 . UntypedResultSet ; <nl> import org . apache . cassandra . cql3 . functions . FunctionName ; <nl> import org . apache . cassandra . cql3 . functions . JavaBasedUDFunction ; <nl> import org . apache . cassandra . cql3 . functions . UDFunction ; <nl> - import org . apache . cassandra . cql3 . functions . UDHelper ; <nl> import org . apache . cassandra . db . marshal . CollectionType ; <nl> - import org . apache . cassandra . exceptions . FunctionExecutionException ; <nl> import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> import org . apache . cassandra . schema . KeyspaceMetadata ; <nl> import org . apache . cassandra . service . ClientState ; <nl> - import org . apache . cassandra . service . ClientWarn ; <nl> import org . apache . cassandra . transport . * ; <nl> import org . apache . cassandra . transport . ProtocolVersion ; <nl> import org . apache . cassandra . transport . messages . ResultMessage ; <nl> @ @ - 878 , 228 + 872 , 6 @ @ public class UFTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void testSecurityPermissions ( ) throws Throwable <nl> - { <nl> - createTable ( " CREATE TABLE % s ( key int primary key , dval double ) " ) ; <nl> - execute ( " INSERT INTO % s ( key , dval ) VALUES ( ? , ? ) " , 1 , 1d ) ; <nl> - <nl> - / / Java UDFs <nl> - <nl> - try <nl> - { <nl> - String fName = createFunction ( KEYSPACE _ PER _ TEST , " double " , <nl> - " CREATE OR REPLACE FUNCTION % s ( val double ) " + <nl> - " RETURNS NULL ON NULL INPUT " + <nl> - " RETURNS double " + <nl> - " LANGUAGE JAVA \ n " + <nl> - " AS ' System . getProperty ( \ " foo . bar . baz \ " ) ; return 0d ; ' ; " ) ; <nl> - execute ( " SELECT " + fName + " ( dval ) FROM % s WHERE key = 1 " ) ; <nl> - Assert . fail ( ) ; <nl> - } <nl> - catch ( FunctionExecutionException e ) <nl> - { <nl> - assertAccessControlException ( " System . getProperty ( \ " foo . bar . baz \ " ) ; return 0d ; " , e ) ; <nl> - } <nl> - <nl> - String [ ] [ ] typesAndSources = <nl> - { <nl> - { " " , " try { Class . forName ( \ " " + UDHelper . class . getName ( ) + " \ " ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } return 0d ; " } , <nl> - { " sun . misc . Unsafe " , " sun . misc . Unsafe . getUnsafe ( ) ; return 0d ; " } , <nl> - { " " , " try { Class . forName ( \ " sun . misc . Unsafe \ " ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } return 0d ; " } , <nl> - { " java . nio . file . FileSystems " , " try { " + <nl> - " java . nio . file . FileSystems . getDefault ( ) ; return 0d ; " + <nl> - " } catch ( Exception t ) { " + <nl> - " throw new RuntimeException ( t ) ; " + <nl> - ' } ' } , <nl> - { " java . nio . channels . FileChannel " , " try { " + <nl> - " java . nio . channels . FileChannel . open ( java . nio . file . FileSystems . getDefault ( ) . getPath ( \ " / etc / passwd \ " ) ) . close ( ) ; return 0d ; " + <nl> - " } catch ( Exception t ) { " + <nl> - " throw new RuntimeException ( t ) ; " + <nl> - ' } ' } , <nl> - { " java . nio . channels . SocketChannel " , " try { " + <nl> - " java . nio . channels . SocketChannel . open ( ) . close ( ) ; return 0d ; " + <nl> - " } catch ( Exception t ) { " + <nl> - " throw new RuntimeException ( t ) ; " + <nl> - ' } ' } , <nl> - { " java . io . FileInputStream " , " try { " + <nl> - " new java . io . FileInputStream ( \ " . / foobar \ " ) . close ( ) ; return 0d ; " + <nl> - " } catch ( Exception t ) { " + <nl> - " throw new RuntimeException ( t ) ; " + <nl> - ' } ' } , <nl> - { " java . lang . Runtime " , " try { " + <nl> - " java . lang . Runtime . getRuntime ( ) ; return 0d ; " + <nl> - " } catch ( Exception t ) { " + <nl> - " throw new RuntimeException ( t ) ; " + <nl> - ' } ' } , <nl> - { " org . apache . cassandra . service . StorageService " , <nl> - " try { " + <nl> - " org . apache . cassandra . service . StorageService v = org . apache . cassandra . service . StorageService . instance ; v . isShutdown ( ) ; return 0d ; " + <nl> - " } catch ( Exception t ) { " + <nl> - " throw new RuntimeException ( t ) ; " + <nl> - ' } ' } , <nl> - { " java . net . ServerSocket " , " try { " + <nl> - " new java . net . ServerSocket ( ) . bind ( ) ; return 0d ; " + <nl> - " } catch ( Exception t ) { " + <nl> - " throw new RuntimeException ( t ) ; " + <nl> - ' } ' } , <nl> - { " java . io . FileOutputStream " , " try { " + <nl> - " new java . io . FileOutputStream ( \ " . foo \ " ) ; return 0d ; " + <nl> - " } catch ( Exception t ) { " + <nl> - " throw new RuntimeException ( t ) ; " + <nl> - ' } ' } , <nl> - { " java . lang . Runtime " , " try { " + <nl> - " java . lang . Runtime . getRuntime ( ) . exec ( \ " / tmp / foo \ " ) ; return 0d ; " + <nl> - " } catch ( Exception t ) { " + <nl> - " throw new RuntimeException ( t ) ; " + <nl> - ' } ' } <nl> - } ; <nl> - <nl> - for ( String [ ] typeAndSource : typesAndSources ) <nl> - { <nl> - assertInvalidMessage ( typeAndSource [ 0 ] + " cannot be resolved " , <nl> - " CREATE OR REPLACE FUNCTION " + KEYSPACE + " . invalid _ class _ access ( val double ) " + <nl> - " RETURNS NULL ON NULL INPUT " + <nl> - " RETURNS double " + <nl> - " LANGUAGE JAVA \ n " + <nl> - " AS ' " + typeAndSource [ 1 ] + " ' ; " ) ; <nl> - } <nl> - <nl> - / / JavaScript UDFs <nl> - <nl> - try <nl> - { <nl> - String fName = createFunction ( KEYSPACE _ PER _ TEST , " double " , <nl> - " CREATE OR REPLACE FUNCTION % s ( val double ) " + <nl> - " RETURNS NULL ON NULL INPUT " + <nl> - " RETURNS double " + <nl> - " LANGUAGE javascript \ n " + <nl> - " AS ' org . apache . cassandra . service . StorageService . instance . isShutdown ( ) ; 0 ; ' ; " ) ; <nl> - execute ( " SELECT " + fName + " ( dval ) FROM % s WHERE key = 1 " ) ; <nl> - Assert . fail ( " Javascript security check failed " ) ; <nl> - } <nl> - catch ( FunctionExecutionException e ) <nl> - { <nl> - assertAccessControlException ( " " , e ) ; <nl> - } <nl> - <nl> - String [ ] javascript = <nl> - { <nl> - " java . lang . management . ManagmentFactory . getThreadMXBean ( ) ; 0 ; " , <nl> - " new java . io . FileInputStream ( \ " / tmp / foo \ " ) ; 0 ; " , <nl> - " new java . io . FileOutputStream ( \ " / tmp / foo \ " ) ; 0 ; " , <nl> - " java . nio . file . FileSystems . getDefault ( ) . createFileExclusively ( \ " . / foo _ bar _ baz \ " ) ; 0 ; " , <nl> - " java . nio . channels . FileChannel . open ( java . nio . file . FileSystems . getDefault ( ) . getPath ( \ " / etc / passwd \ " ) ) ; 0 ; " , <nl> - " java . nio . channels . SocketChannel . open ( ) ; 0 ; " , <nl> - " new java . net . ServerSocket ( ) . bind ( null ) ; 0 ; " , <nl> - " var thread = new java . lang . Thread ( ) ; thread . start ( ) ; 0 ; " , <nl> - " java . lang . System . getProperty ( \ " foo . bar . baz \ " ) ; 0 ; " , <nl> - " java . lang . Class . forName ( \ " java . lang . System \ " ) ; 0 ; " , <nl> - " java . lang . Runtime . getRuntime ( ) . exec ( \ " / tmp / foo \ " ) ; 0 ; " , <nl> - " java . lang . Runtime . getRuntime ( ) . loadLibrary ( \ " foobar \ " ) ; 0 ; " , <nl> - " java . lang . Runtime . getRuntime ( ) . loadLibrary ( \ " foobar \ " ) ; 0 ; " , <nl> - / / TODO these ( ugly ) calls are still possible - these can consume CPU ( as one could do with an evil loop , too ) <nl> - / / " java . lang . Runtime . getRuntime ( ) . traceMethodCalls ( true ) ; 0 ; " , <nl> - / / " java . lang . Runtime . getRuntime ( ) . gc ( ) ; 0 ; " , <nl> - / / " java . lang . Runtime . getRuntime ( ) ; 0 ; " , <nl> - } ; <nl> - <nl> - for ( String script : javascript ) <nl> - { <nl> - try <nl> - { <nl> - String fName = createFunction ( KEYSPACE _ PER _ TEST , " double " , <nl> - " CREATE OR REPLACE FUNCTION % s ( val double ) " + <nl> - " RETURNS NULL ON NULL INPUT " + <nl> - " RETURNS double " + <nl> - " LANGUAGE javascript \ n " + <nl> - " AS ' " + script + " ' ; " ) ; <nl> - execute ( " SELECT " + fName + " ( dval ) FROM % s WHERE key = 1 " ) ; <nl> - Assert . fail ( " Javascript security check failed : " + script ) ; <nl> - } <nl> - catch ( FunctionExecutionException e ) <nl> - { <nl> - assertAccessControlException ( script , e ) ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - private static void assertAccessControlException ( String script , FunctionExecutionException e ) <nl> - { <nl> - for ( Throwable t = e ; t ! = null & & t ! = t . getCause ( ) ; t = t . getCause ( ) ) <nl> - if ( t instanceof AccessControlException ) <nl> - return ; <nl> - Assert . fail ( " no AccessControlException for " + script + " ( got " + e + ' ) ' ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testAmokUDF ( ) throws Throwable <nl> - { <nl> - createTable ( " CREATE TABLE % s ( key int primary key , dval double ) " ) ; <nl> - execute ( " INSERT INTO % s ( key , dval ) VALUES ( ? , ? ) " , 1 , 1d ) ; <nl> - <nl> - long udfWarnTimeout = DatabaseDescriptor . getUserDefinedFunctionWarnTimeout ( ) ; <nl> - long udfFailTimeout = DatabaseDescriptor . getUserDefinedFunctionFailTimeout ( ) ; <nl> - int maxTries = 5 ; <nl> - for ( int i = 1 ; i < = maxTries ; i + + ) <nl> - { <nl> - try <nl> - { <nl> - / / short timeout <nl> - DatabaseDescriptor . setUserDefinedFunctionWarnTimeout ( 10 ) ; <nl> - DatabaseDescriptor . setUserDefinedFunctionFailTimeout ( 250 ) ; <nl> - / / don ' t kill the unit test . . . - default policy is " die " <nl> - DatabaseDescriptor . setUserFunctionTimeoutPolicy ( Config . UserFunctionTimeoutPolicy . ignore ) ; <nl> - <nl> - ClientWarn . instance . captureWarnings ( ) ; <nl> - String fName = createFunction ( KEYSPACE _ PER _ TEST , " double " , <nl> - " CREATE OR REPLACE FUNCTION % s ( val double ) " + <nl> - " RETURNS NULL ON NULL INPUT " + <nl> - " RETURNS double " + <nl> - " LANGUAGE JAVA \ n " + <nl> - " AS ' long t = System . currentTimeMillis ( ) + 110 ; while ( t > System . currentTimeMillis ( ) ) { } ; return 0d ; ' " ) ; <nl> - execute ( " SELECT " + fName + " ( dval ) FROM % s WHERE key = 1 " ) ; <nl> - List < String > warnings = ClientWarn . instance . getWarnings ( ) ; <nl> - Assert . assertNotNull ( warnings ) ; <nl> - Assert . assertFalse ( warnings . isEmpty ( ) ) ; <nl> - ClientWarn . instance . resetWarnings ( ) ; <nl> - <nl> - / / Java UDF <nl> - <nl> - fName = createFunction ( KEYSPACE _ PER _ TEST , " double " , <nl> - " CREATE OR REPLACE FUNCTION % s ( val double ) " + <nl> - " RETURNS NULL ON NULL INPUT " + <nl> - " RETURNS double " + <nl> - " LANGUAGE JAVA \ n " + <nl> - " AS ' long t = System . currentTimeMillis ( ) + 500 ; while ( t > System . currentTimeMillis ( ) ) { } ; return 0d ; ' ; " ) ; <nl> - assertInvalidMessage ( " ran longer than 250ms " , " SELECT " + fName + " ( dval ) FROM % s WHERE key = 1 " ) ; <nl> - <nl> - / / Javascript UDF <nl> - <nl> - fName = createFunction ( KEYSPACE _ PER _ TEST , " double " , <nl> - " CREATE OR REPLACE FUNCTION % s ( val double ) " + <nl> - " RETURNS NULL ON NULL INPUT " + <nl> - " RETURNS double " + <nl> - " LANGUAGE JAVASCRIPT \ n " + <nl> - " AS ' var t = java . lang . System . currentTimeMillis ( ) + 500 ; while ( t > java . lang . System . currentTimeMillis ( ) ) { } ; 0 ; ' ; " ) ; <nl> - assertInvalidMessage ( " ran longer than 250ms " , " SELECT " + fName + " ( dval ) FROM % s WHERE key = 1 " ) ; <nl> - <nl> - return ; <nl> - } <nl> - catch ( Error | RuntimeException e ) <nl> - { <nl> - if ( i = = maxTries ) <nl> - throw e ; <nl> - } <nl> - finally <nl> - { <nl> - / / reset to defaults <nl> - DatabaseDescriptor . setUserDefinedFunctionWarnTimeout ( udfWarnTimeout ) ; <nl> - DatabaseDescriptor . setUserDefinedFunctionFailTimeout ( udfFailTimeout ) ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> public void testArgumentGenerics ( ) throws Throwable <nl> { <nl> createTable ( " CREATE TABLE % s ( key int primary key , sval text , aval ascii , bval blob , empty _ int int ) " ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java 
 index 6faaf8a . . af9ec1a 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java 
 @ @ - 17 , 7 + 17 , 6 @ @ 
 * / 
 package org . apache . cassandra . cql3 . validation . entities ; 
 
 - import java . security . AccessControlException ; 
 import java . util . ArrayList ; 
 import java . util . Date ; 
 import java . util . List ; 
 @ @ - 28 , 8 + 27 , 6 @ @ import org . junit . Test ; 
 
 import com . datastax . driver . core . * ; 
 import com . datastax . driver . core . exceptions . InvalidQueryException ; 
 - import org . apache . cassandra . config . Config ; 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . cql3 . CQLTester ; 
 import org . apache . cassandra . cql3 . QueryProcessor ; 
 @ @ - 37 , 13 + 34 , 10 @ @ import org . apache . cassandra . cql3 . UntypedResultSet ; 
 import org . apache . cassandra . cql3 . functions . FunctionName ; 
 import org . apache . cassandra . cql3 . functions . JavaBasedUDFunction ; 
 import org . apache . cassandra . cql3 . functions . UDFunction ; 
 - import org . apache . cassandra . cql3 . functions . UDHelper ; 
 import org . apache . cassandra . db . marshal . CollectionType ; 
 - import org . apache . cassandra . exceptions . FunctionExecutionException ; 
 import org . apache . cassandra . exceptions . InvalidRequestException ; 
 import org . apache . cassandra . schema . KeyspaceMetadata ; 
 import org . apache . cassandra . service . ClientState ; 
 - import org . apache . cassandra . service . ClientWarn ; 
 import org . apache . cassandra . transport . * ; 
 import org . apache . cassandra . transport . ProtocolVersion ; 
 import org . apache . cassandra . transport . messages . ResultMessage ; 
 @ @ - 878 , 228 + 872 , 6 @ @ public class UFTest extends CQLTester 
 } 
 
 @ Test 
 - public void testSecurityPermissions ( ) throws Throwable 
 - { 
 - createTable ( " CREATE TABLE % s ( key int primary key , dval double ) " ) ; 
 - execute ( " INSERT INTO % s ( key , dval ) VALUES ( ? , ? ) " , 1 , 1d ) ; 
 - 
 - / / Java UDFs 
 - 
 - try 
 - { 
 - String fName = createFunction ( KEYSPACE _ PER _ TEST , " double " , 
 - " CREATE OR REPLACE FUNCTION % s ( val double ) " + 
 - " RETURNS NULL ON NULL INPUT " + 
 - " RETURNS double " + 
 - " LANGUAGE JAVA \ n " + 
 - " AS ' System . getProperty ( \ " foo . bar . baz \ " ) ; return 0d ; ' ; " ) ; 
 - execute ( " SELECT " + fName + " ( dval ) FROM % s WHERE key = 1 " ) ; 
 - Assert . fail ( ) ; 
 - } 
 - catch ( FunctionExecutionException e ) 
 - { 
 - assertAccessControlException ( " System . getProperty ( \ " foo . bar . baz \ " ) ; return 0d ; " , e ) ; 
 - } 
 - 
 - String [ ] [ ] typesAndSources = 
 - { 
 - { " " , " try { Class . forName ( \ " " + UDHelper . class . getName ( ) + " \ " ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } return 0d ; " } , 
 - { " sun . misc . Unsafe " , " sun . misc . Unsafe . getUnsafe ( ) ; return 0d ; " } , 
 - { " " , " try { Class . forName ( \ " sun . misc . Unsafe \ " ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } return 0d ; " } , 
 - { " java . nio . file . FileSystems " , " try { " + 
 - " java . nio . file . FileSystems . getDefault ( ) ; return 0d ; " + 
 - " } catch ( Exception t ) { " + 
 - " throw new RuntimeException ( t ) ; " + 
 - ' } ' } , 
 - { " java . nio . channels . FileChannel " , " try { " + 
 - " java . nio . channels . FileChannel . open ( java . nio . file . FileSystems . getDefault ( ) . getPath ( \ " / etc / passwd \ " ) ) . close ( ) ; return 0d ; " + 
 - " } catch ( Exception t ) { " + 
 - " throw new RuntimeException ( t ) ; " + 
 - ' } ' } , 
 - { " java . nio . channels . SocketChannel " , " try { " + 
 - " java . nio . channels . SocketChannel . open ( ) . close ( ) ; return 0d ; " + 
 - " } catch ( Exception t ) { " + 
 - " throw new RuntimeException ( t ) ; " + 
 - ' } ' } , 
 - { " java . io . FileInputStream " , " try { " + 
 - " new java . io . FileInputStream ( \ " . / foobar \ " ) . close ( ) ; return 0d ; " + 
 - " } catch ( Exception t ) { " + 
 - " throw new RuntimeException ( t ) ; " + 
 - ' } ' } , 
 - { " java . lang . Runtime " , " try { " + 
 - " java . lang . Runtime . getRuntime ( ) ; return 0d ; " + 
 - " } catch ( Exception t ) { " + 
 - " throw new RuntimeException ( t ) ; " + 
 - ' } ' } , 
 - { " org . apache . cassandra . service . StorageService " , 
 - " try { " + 
 - " org . apache . cassandra . service . StorageService v = org . apache . cassandra . service . StorageService . instance ; v . isShutdown ( ) ; return 0d ; " + 
 - " } catch ( Exception t ) { " + 
 - " throw new RuntimeException ( t ) ; " + 
 - ' } ' } , 
 - { " java . net . ServerSocket " , " try { " + 
 - " new java . net . ServerSocket ( ) . bind ( ) ; return 0d ; " + 
 - " } catch ( Exception t ) { " + 
 - " throw new RuntimeException ( t ) ; " + 
 - ' } ' } , 
 - { " java . io . FileOutputStream " , " try { " + 
 - " new java . io . FileOutputStream ( \ " . foo \ " ) ; return 0d ; " + 
 - " } catch ( Exception t ) { " + 
 - " throw new RuntimeException ( t ) ; " + 
 - ' } ' } , 
 - { " java . lang . Runtime " , " try { " + 
 - " java . lang . Runtime . getRuntime ( ) . exec ( \ " / tmp / foo \ " ) ; return 0d ; " + 
 - " } catch ( Exception t ) { " + 
 - " throw new RuntimeException ( t ) ; " + 
 - ' } ' } 
 - } ; 
 - 
 - for ( String [ ] typeAndSource : typesAndSources ) 
 - { 
 - assertInvalidMessage ( typeAndSource [ 0 ] + " cannot be resolved " , 
 - " CREATE OR REPLACE FUNCTION " + KEYSPACE + " . invalid _ class _ access ( val double ) " + 
 - " RETURNS NULL ON NULL INPUT " + 
 - " RETURNS double " + 
 - " LANGUAGE JAVA \ n " + 
 - " AS ' " + typeAndSource [ 1 ] + " ' ; " ) ; 
 - } 
 - 
 - / / JavaScript UDFs 
 - 
 - try 
 - { 
 - String fName = createFunction ( KEYSPACE _ PER _ TEST , " double " , 
 - " CREATE OR REPLACE FUNCTION % s ( val double ) " + 
 - " RETURNS NULL ON NULL INPUT " + 
 - " RETURNS double " + 
 - " LANGUAGE javascript \ n " + 
 - " AS ' org . apache . cassandra . service . StorageService . instance . isShutdown ( ) ; 0 ; ' ; " ) ; 
 - execute ( " SELECT " + fName + " ( dval ) FROM % s WHERE key = 1 " ) ; 
 - Assert . fail ( " Javascript security check failed " ) ; 
 - } 
 - catch ( FunctionExecutionException e ) 
 - { 
 - assertAccessControlException ( " " , e ) ; 
 - } 
 - 
 - String [ ] javascript = 
 - { 
 - " java . lang . management . ManagmentFactory . getThreadMXBean ( ) ; 0 ; " , 
 - " new java . io . FileInputStream ( \ " / tmp / foo \ " ) ; 0 ; " , 
 - " new java . io . FileOutputStream ( \ " / tmp / foo \ " ) ; 0 ; " , 
 - " java . nio . file . FileSystems . getDefault ( ) . createFileExclusively ( \ " . / foo _ bar _ baz \ " ) ; 0 ; " , 
 - " java . nio . channels . FileChannel . open ( java . nio . file . FileSystems . getDefault ( ) . getPath ( \ " / etc / passwd \ " ) ) ; 0 ; " , 
 - " java . nio . channels . SocketChannel . open ( ) ; 0 ; " , 
 - " new java . net . ServerSocket ( ) . bind ( null ) ; 0 ; " , 
 - " var thread = new java . lang . Thread ( ) ; thread . start ( ) ; 0 ; " , 
 - " java . lang . System . getProperty ( \ " foo . bar . baz \ " ) ; 0 ; " , 
 - " java . lang . Class . forName ( \ " java . lang . System \ " ) ; 0 ; " , 
 - " java . lang . Runtime . getRuntime ( ) . exec ( \ " / tmp / foo \ " ) ; 0 ; " , 
 - " java . lang . Runtime . getRuntime ( ) . loadLibrary ( \ " foobar \ " ) ; 0 ; " , 
 - " java . lang . Runtime . getRuntime ( ) . loadLibrary ( \ " foobar \ " ) ; 0 ; " , 
 - / / TODO these ( ugly ) calls are still possible - these can consume CPU ( as one could do with an evil loop , too ) 
 - / / " java . lang . Runtime . getRuntime ( ) . traceMethodCalls ( true ) ; 0 ; " , 
 - / / " java . lang . Runtime . getRuntime ( ) . gc ( ) ; 0 ; " , 
 - / / " java . lang . Runtime . getRuntime ( ) ; 0 ; " , 
 - } ; 
 - 
 - for ( String script : javascript ) 
 - { 
 - try 
 - { 
 - String fName = createFunction ( KEYSPACE _ PER _ TEST , " double " , 
 - " CREATE OR REPLACE FUNCTION % s ( val double ) " + 
 - " RETURNS NULL ON NULL INPUT " + 
 - " RETURNS double " + 
 - " LANGUAGE javascript \ n " + 
 - " AS ' " + script + " ' ; " ) ; 
 - execute ( " SELECT " + fName + " ( dval ) FROM % s WHERE key = 1 " ) ; 
 - Assert . fail ( " Javascript security check failed : " + script ) ; 
 - } 
 - catch ( FunctionExecutionException e ) 
 - { 
 - assertAccessControlException ( script , e ) ; 
 - } 
 - } 
 - } 
 - 
 - private static void assertAccessControlException ( String script , FunctionExecutionException e ) 
 - { 
 - for ( Throwable t = e ; t ! = null & & t ! = t . getCause ( ) ; t = t . getCause ( ) ) 
 - if ( t instanceof AccessControlException ) 
 - return ; 
 - Assert . fail ( " no AccessControlException for " + script + " ( got " + e + ' ) ' ) ; 
 - } 
 - 
 - @ Test 
 - public void testAmokUDF ( ) throws Throwable 
 - { 
 - createTable ( " CREATE TABLE % s ( key int primary key , dval double ) " ) ; 
 - execute ( " INSERT INTO % s ( key , dval ) VALUES ( ? , ? ) " , 1 , 1d ) ; 
 - 
 - long udfWarnTimeout = DatabaseDescriptor . getUserDefinedFunctionWarnTimeout ( ) ; 
 - long udfFailTimeout = DatabaseDescriptor . getUserDefinedFunctionFailTimeout ( ) ; 
 - int maxTries = 5 ; 
 - for ( int i = 1 ; i < = maxTries ; i + + ) 
 - { 
 - try 
 - { 
 - / / short timeout 
 - DatabaseDescriptor . setUserDefinedFunctionWarnTimeout ( 10 ) ; 
 - DatabaseDescriptor . setUserDefinedFunctionFailTimeout ( 250 ) ; 
 - / / don ' t kill the unit test . . . - default policy is " die " 
 - DatabaseDescriptor . setUserFunctionTimeoutPolicy ( Config . UserFunctionTimeoutPolicy . ignore ) ; 
 - 
 - ClientWarn . instance . captureWarnings ( ) ; 
 - String fName = createFunction ( KEYSPACE _ PER _ TEST , " double " , 
 - " CREATE OR REPLACE FUNCTION % s ( val double ) " + 
 - " RETURNS NULL ON NULL INPUT " + 
 - " RETURNS double " + 
 - " LANGUAGE JAVA \ n " + 
 - " AS ' long t = System . currentTimeMillis ( ) + 110 ; while ( t > System . currentTimeMillis ( ) ) { } ; return 0d ; ' " ) ; 
 - execute ( " SELECT " + fName + " ( dval ) FROM % s WHERE key = 1 " ) ; 
 - List < String > warnings = ClientWarn . instance . getWarnings ( ) ; 
 - Assert . assertNotNull ( warnings ) ; 
 - Assert . assertFalse ( warnings . isEmpty ( ) ) ; 
 - ClientWarn . instance . resetWarnings ( ) ; 
 - 
 - / / Java UDF 
 - 
 - fName = createFunction ( KEYSPACE _ PER _ TEST , " double " , 
 - " CREATE OR REPLACE FUNCTION % s ( val double ) " + 
 - " RETURNS NULL ON NULL INPUT " + 
 - " RETURNS double " + 
 - " LANGUAGE JAVA \ n " + 
 - " AS ' long t = System . currentTimeMillis ( ) + 500 ; while ( t > System . currentTimeMillis ( ) ) { } ; return 0d ; ' ; " ) ; 
 - assertInvalidMessage ( " ran longer than 250ms " , " SELECT " + fName + " ( dval ) FROM % s WHERE key = 1 " ) ; 
 - 
 - / / Javascript UDF 
 - 
 - fName = createFunction ( KEYSPACE _ PER _ TEST , " double " , 
 - " CREATE OR REPLACE FUNCTION % s ( val double ) " + 
 - " RETURNS NULL ON NULL INPUT " + 
 - " RETURNS double " + 
 - " LANGUAGE JAVASCRIPT \ n " + 
 - " AS ' var t = java . lang . System . currentTimeMillis ( ) + 500 ; while ( t > java . lang . System . currentTimeMillis ( ) ) { } ; 0 ; ' ; " ) ; 
 - assertInvalidMessage ( " ran longer than 250ms " , " SELECT " + fName + " ( dval ) FROM % s WHERE key = 1 " ) ; 
 - 
 - return ; 
 - } 
 - catch ( Error | RuntimeException e ) 
 - { 
 - if ( i = = maxTries ) 
 - throw e ; 
 - } 
 - finally 
 - { 
 - / / reset to defaults 
 - DatabaseDescriptor . setUserDefinedFunctionWarnTimeout ( udfWarnTimeout ) ; 
 - DatabaseDescriptor . setUserDefinedFunctionFailTimeout ( udfFailTimeout ) ; 
 - } 
 - } 
 - } 
 - 
 - @ Test 
 public void testArgumentGenerics ( ) throws Throwable 
 { 
 createTable ( " CREATE TABLE % s ( key int primary key , sval text , aval ascii , bval blob , empty _ int int ) " ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
