BLEU SCORE: 0.0313926928713252

TEST MSG: kill yaml snitch
GENERATED MSG: Add yaml network topology snitch for mixed ec2 / other envs

TEST DIFF (one line): diff - - git a / conf / cassandra - topology . yaml b / conf / cassandra - topology . yaml <nl> deleted file mode 100644 <nl> index 11c37d0 . . 0000000 <nl> - - - a / conf / cassandra - topology . yaml <nl> + + + / dev / null <nl> @ @ - 1 , 25 + 0 , 0 @ @ <nl> - # YAML topology configuration file for Cassandra , <nl> - # to be used with YamlFileNetworkTopologySnitch . <nl> - <nl> - # The topology , as a list of data centers . <nl> - topology : <nl> - # Each data center has a name and a list of racks . <nl> - - dc _ name : DC1 <nl> - racks : <nl> - # Each rack has a name and a list of nodes . <nl> - - rack _ name : c1 <nl> - nodes : <nl> - # Each node has a broadcast address ( required ) <nl> - # and a data - center - local address ( optional ) . <nl> - # If dc _ local _ address is specified , its peers <nl> - # in the same data center will attempt to <nl> - # reconnect over that address instead . <nl> - - broadcast _ address : 1 . 2 . 3 . 4 <nl> - dc _ local _ address : 5 . 6 . 7 . 8 <nl> - <nl> - # Default data center name for unknown nodes ; defaults to " UNKNOWN " <nl> - # default _ dc _ name : UNKNOWN <nl> - <nl> - # Default rack name for unknown nodes <nl> - # default _ rack _ name : UNKNOWN ; defaults to " UNKNOWN " <nl> - <nl> diff - - git a / src / java / org / apache / cassandra / locator / YamlFileNetworkTopologySnitch . java b / src / java / org / apache / cassandra / locator / YamlFileNetworkTopologySnitch . java <nl> deleted file mode 100644 <nl> index 93e76f0 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / locator / YamlFileNetworkTopologySnitch . java <nl> + + + / dev / null <nl> @ @ - 1 , 415 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . locator ; <nl> - <nl> - import java . io . InputStream ; <nl> - import java . net . InetAddress ; <nl> - import java . util . Collections ; <nl> - import java . util . HashMap ; <nl> - import java . util . List ; <nl> - import java . util . Map ; <nl> - <nl> - import org . apache . cassandra . exceptions . ConfigurationException ; <nl> - import org . apache . cassandra . gms . ApplicationState ; <nl> - import org . apache . cassandra . gms . EndpointState ; <nl> - import org . apache . cassandra . gms . Gossiper ; <nl> - import org . apache . cassandra . gms . VersionedValue ; <nl> - import org . apache . cassandra . io . util . FileUtils ; <nl> - import org . apache . cassandra . service . StorageService ; <nl> - import org . apache . cassandra . utils . FBUtilities ; <nl> - import org . apache . cassandra . utils . ResourceWatcher ; <nl> - import org . apache . cassandra . utils . WrappedRunnable ; <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> - import org . yaml . snakeyaml . TypeDescription ; <nl> - import org . yaml . snakeyaml . Yaml ; <nl> - import org . yaml . snakeyaml . constructor . Constructor ; <nl> - <nl> - import com . google . common . base . Objects ; <nl> - import com . google . common . net . InetAddresses ; <nl> - <nl> - / * * <nl> - * Network topology snitch that reads its configuration from a YAML file . <nl> - * < p > <nl> - * This snitch supports connections over preferred addresses , such as a data - center - local address , based on the <nl> - * reconnection trick used in { @ link Ec2MultiRegionSnitch } . The configuration file , { @ code cassandra - topology . yaml } , is <nl> - * checked periodically for updates . <nl> - * < / p > <nl> - * / <nl> - public class YamlFileNetworkTopologySnitch <nl> - extends AbstractNetworkTopologySnitch <nl> - { <nl> - <nl> - private static final Logger logger = LoggerFactory . getLogger ( YamlFileNetworkTopologySnitch . class ) ; <nl> - <nl> - / * * <nl> - * How often to check the topology configuration file , in milliseconds ; defaults to one minute . <nl> - * / <nl> - private static final int CHECK _ PERIOD _ IN _ MS = 60 * 1000 ; <nl> - <nl> - / * * Default name for the topology configuration file . * / <nl> - private static final String DEFAULT _ TOPOLOGY _ CONFIG _ FILENAME = " cassandra - topology . yaml " ; <nl> - <nl> - / * * Node data map , keyed by broadcast address . * / <nl> - private volatile Map < InetAddress , NodeData > nodeDataMap ; <nl> - <nl> - / * * Node data for this node . * / <nl> - private volatile NodeData localNodeData ; <nl> - <nl> - / * * Node data to fall back to when there is no match . * / <nl> - private volatile NodeData defaultNodeData ; <nl> - <nl> - / * * Name of the topology configuration file . * / <nl> - private final String topologyConfigFilename ; <nl> - <nl> - / * * True if the gossiper has been initialized . * / <nl> - private volatile boolean gossiperInitialized = false ; <nl> - <nl> - / * * <nl> - * Constructor . <nl> - * <nl> - * @ throws ConfigurationException <nl> - * on failure <nl> - * / <nl> - public YamlFileNetworkTopologySnitch ( ) throws ConfigurationException <nl> - { <nl> - this ( DEFAULT _ TOPOLOGY _ CONFIG _ FILENAME ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Constructor . <nl> - * <nl> - * @ param topologyConfigFilename <nl> - * name of the topology configuration file <nl> - * @ throws ConfigurationException <nl> - * on failure <nl> - * / <nl> - YamlFileNetworkTopologySnitch ( final String topologyConfigFilename ) <nl> - throws ConfigurationException <nl> - { <nl> - logger . warn ( " YamlFileNetworkTopologySnitch is deprecated ; switch to GossipingPropertyFileSnitch instead " ) ; <nl> - this . topologyConfigFilename = topologyConfigFilename ; <nl> - loadTopologyConfiguration ( ) ; <nl> - <nl> - try <nl> - { <nl> - / * <nl> - * Check if the topology configuration file is a plain file . <nl> - * / <nl> - FBUtilities . resourceToFile ( topologyConfigFilename ) ; <nl> - <nl> - final Runnable runnable = new WrappedRunnable ( ) <nl> - { <nl> - / * * <nl> - * Loads the topology . <nl> - * / <nl> - protected void runMayThrow ( ) throws ConfigurationException <nl> - { <nl> - loadTopologyConfiguration ( ) ; <nl> - } <nl> - } ; <nl> - ResourceWatcher . watch ( topologyConfigFilename , runnable , <nl> - CHECK _ PERIOD _ IN _ MS ) ; <nl> - } <nl> - catch ( final ConfigurationException e ) <nl> - { <nl> - logger . debug ( <nl> - " { } found , but does not look like a plain file . Will not watch it for changes " , <nl> - topologyConfigFilename ) ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * Returns the name of the rack for the endpoint , or { @ code UNKNOWN } if not known . <nl> - * <nl> - * @ return the name of the data center for the endpoint , or { @ code UNKNOWN } if not known <nl> - * / <nl> - @ Override <nl> - public String getRack ( final InetAddress endpoint ) <nl> - { <nl> - final NodeData nodeData = nodeDataMap . get ( endpoint ) ; <nl> - return nodeData ! = null ? nodeData . rack : defaultNodeData . rack ; <nl> - } <nl> - <nl> - / * * <nl> - * Returns the name of the data center for the endpoint , or { @ code UNKNOWN } if not known . <nl> - * <nl> - * @ return the name of the data center for the endpoint , or { @ code UNKNOWN } if not known <nl> - * / <nl> - @ Override <nl> - public String getDatacenter ( final InetAddress endpoint ) <nl> - { <nl> - final NodeData nodeData = nodeDataMap . get ( endpoint ) ; <nl> - return nodeData ! = null ? nodeData . datacenter <nl> - : defaultNodeData . datacenter ; <nl> - } <nl> - <nl> - / * * <nl> - * Root object type for the YAML topology configuration . <nl> - * / <nl> - public static class TopologyConfig <nl> - { <nl> - public List < Datacenter > topology ; <nl> - public String default _ dc _ name = " UNKNOWN " ; <nl> - public String default _ rack _ name = " UNKNOWN " ; <nl> - } <nl> - <nl> - / * * <nl> - * Data center object type for the YAML topology configuration . <nl> - * / <nl> - public static class Datacenter <nl> - { <nl> - public String dc _ name ; <nl> - public List < Rack > racks = Collections . emptyList ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Rack object type for the YAML topology configuration . <nl> - * / <nl> - public static class Rack <nl> - { <nl> - public String rack _ name ; <nl> - public List < Node > nodes = Collections . emptyList ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Node object type for the YAML topology configuration . <nl> - * / <nl> - public static class Node <nl> - { <nl> - public String broadcast _ address ; <nl> - public String dc _ local _ address ; <nl> - } <nl> - <nl> - / * * <nl> - * Loads the topology configuration file . <nl> - * <nl> - * @ throws ConfigurationException <nl> - * on failure <nl> - * / <nl> - private synchronized void loadTopologyConfiguration ( ) <nl> - throws ConfigurationException <nl> - { <nl> - logger . debug ( " Loading topology configuration from { } " , <nl> - topologyConfigFilename ) ; <nl> - <nl> - final TypeDescription topologyConfigTypeDescription = new TypeDescription ( <nl> - TopologyConfig . class ) ; <nl> - topologyConfigTypeDescription . putListPropertyType ( " topology " , <nl> - Datacenter . class ) ; <nl> - <nl> - final TypeDescription topologyTypeDescription = new TypeDescription ( <nl> - Datacenter . class ) ; <nl> - topologyTypeDescription . putListPropertyType ( " racks " , Rack . class ) ; <nl> - <nl> - final TypeDescription rackTypeDescription = new TypeDescription ( <nl> - Rack . class ) ; <nl> - rackTypeDescription . putListPropertyType ( " nodes " , Node . class ) ; <nl> - <nl> - final Constructor configConstructor = new Constructor ( <nl> - TopologyConfig . class ) ; <nl> - configConstructor . addTypeDescription ( topologyConfigTypeDescription ) ; <nl> - configConstructor . addTypeDescription ( topologyTypeDescription ) ; <nl> - configConstructor . addTypeDescription ( rackTypeDescription ) ; <nl> - <nl> - final InputStream configFileInputStream = getClass ( ) . getClassLoader ( ) <nl> - . getResourceAsStream ( topologyConfigFilename ) ; <nl> - if ( configFileInputStream = = null ) <nl> - { <nl> - throw new ConfigurationException ( <nl> - " Could not read topology config file " <nl> - + topologyConfigFilename ) ; <nl> - } <nl> - Yaml yaml ; <nl> - TopologyConfig topologyConfig ; <nl> - try <nl> - { <nl> - yaml = new Yaml ( configConstructor ) ; <nl> - topologyConfig = ( TopologyConfig ) yaml . load ( configFileInputStream ) ; <nl> - } <nl> - finally <nl> - { <nl> - FileUtils . closeQuietly ( configFileInputStream ) ; <nl> - } <nl> - final Map < InetAddress , NodeData > nodeDataMap = new HashMap < InetAddress , NodeData > ( ) ; <nl> - <nl> - if ( topologyConfig . topology = = null ) <nl> - { <nl> - throw new ConfigurationException ( <nl> - " Topology configuration file is missing the topology section " ) ; <nl> - } <nl> - <nl> - for ( final Datacenter datacenter : topologyConfig . topology ) <nl> - { <nl> - if ( datacenter . dc _ name = = null ) <nl> - { <nl> - throw new ConfigurationException ( <nl> - " Topology configuration file is missing a data center name for some data center " ) ; <nl> - } <nl> - <nl> - for ( final Rack rack : datacenter . racks ) <nl> - { <nl> - if ( rack . rack _ name = = null ) <nl> - { <nl> - throw new ConfigurationException ( <nl> - String . format ( <nl> - " Topology configuration file is missing a rack name for some rack under data center ' % s ' " , <nl> - datacenter . dc _ name ) ) ; <nl> - } <nl> - <nl> - for ( final Node node : rack . nodes ) <nl> - { <nl> - if ( node . broadcast _ address = = null ) <nl> - { <nl> - throw new ConfigurationException ( <nl> - String . format ( <nl> - " Topology configuration file is missing a broadcast address for some node under data center ' % s ' rack ' % s ' " , <nl> - datacenter . dc _ name , rack . rack _ name ) ) ; <nl> - } <nl> - <nl> - final InetAddress endpoint = InetAddresses <nl> - . forString ( node . broadcast _ address ) ; <nl> - final InetAddress dcLocalAddress = node . dc _ local _ address = = null ? null <nl> - : InetAddresses . forString ( node . dc _ local _ address ) ; <nl> - <nl> - final NodeData nodeData = new NodeData ( ) ; <nl> - nodeData . datacenter = datacenter . dc _ name ; <nl> - nodeData . rack = rack . rack _ name ; <nl> - nodeData . dcLocalAddress = dcLocalAddress ; <nl> - <nl> - if ( nodeDataMap . put ( endpoint , nodeData ) ! = null ) <nl> - { <nl> - throw new ConfigurationException ( <nl> - String . format ( <nl> - " IP address ' % s ' appears more than once in the topology configuration file " , <nl> - endpoint ) ) ; <nl> - } <nl> - <nl> - if ( dcLocalAddress ! = null <nl> - & & nodeDataMap . put ( dcLocalAddress , nodeData ) ! = null ) <nl> - { <nl> - throw new ConfigurationException ( <nl> - String . format ( <nl> - " IP address ' % s ' appears more than once in the topology configuration file " , <nl> - dcLocalAddress ) ) ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> - <nl> - final NodeData localNodeData = nodeDataMap . get ( FBUtilities <nl> - . getBroadcastAddress ( ) ) ; <nl> - if ( localNodeData = = null ) <nl> - { <nl> - throw new ConfigurationException ( <nl> - " Topology configuration missing information for the local node " ) ; <nl> - } <nl> - <nl> - final NodeData defaultNodeData = new NodeData ( ) ; <nl> - <nl> - if ( topologyConfig . default _ dc _ name = = null ) <nl> - { <nl> - throw new ConfigurationException ( <nl> - " default _ dc _ name must be specified " ) ; <nl> - } <nl> - if ( topologyConfig . default _ rack _ name = = null ) <nl> - { <nl> - throw new ConfigurationException ( <nl> - " default _ rack _ name must be specified " ) ; <nl> - } <nl> - <nl> - defaultNodeData . datacenter = topologyConfig . default _ dc _ name ; <nl> - defaultNodeData . rack = topologyConfig . default _ rack _ name ; <nl> - <nl> - / / YAML configuration looks good ; now make the changes <nl> - <nl> - this . nodeDataMap = nodeDataMap ; <nl> - this . localNodeData = localNodeData ; <nl> - this . defaultNodeData = defaultNodeData ; <nl> - maybeSetApplicationState ( ) ; <nl> - <nl> - if ( logger . isDebugEnabled ( ) ) <nl> - { <nl> - logger . debug ( <nl> - " Built topology map from config file : localNodeData = { } , nodeDataMap = { } " , <nl> - localNodeData , nodeDataMap ) ; <nl> - } <nl> - <nl> - if ( gossiperInitialized ) <nl> - { <nl> - StorageService . instance . gossipSnitchInfo ( ) ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * be careful about just blindly updating ApplicationState . INTERNAL _ IP everytime we read the yaml file , <nl> - * as that can cause connections to get unnecessarily reset ( via IESCS . onChange ( ) ) . <nl> - * / <nl> - private void maybeSetApplicationState ( ) <nl> - { <nl> - if ( localNodeData . dcLocalAddress = = null ) <nl> - return ; <nl> - final EndpointState es = Gossiper . instance . getEndpointStateForEndpoint ( FBUtilities . getBroadcastAddress ( ) ) ; <nl> - if ( es = = null ) <nl> - return ; <nl> - final VersionedValue vv = es . getApplicationState ( ApplicationState . INTERNAL _ IP ) ; <nl> - if ( ( vv ! = null & & ! vv . value . equals ( localNodeData . dcLocalAddress . getHostAddress ( ) ) ) <nl> - | | vv = = null ) <nl> - { <nl> - Gossiper . instance . addLocalApplicationState ( ApplicationState . INTERNAL _ IP , <nl> - StorageService . instance . valueFactory . internalIP ( localNodeData . dcLocalAddress . getHostAddress ( ) ) ) ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * Topology data for a node . <nl> - * / <nl> - private class NodeData <nl> - { <nl> - / * * Data center name . * / <nl> - public String datacenter ; <nl> - / * * Rack name . * / <nl> - public String rack ; <nl> - / * * Data - center - local address . * / <nl> - public InetAddress dcLocalAddress ; <nl> - <nl> - / * * <nl> - * Returns a simple key - value string representation of this node ' s data . <nl> - * <nl> - * @ return a simple key - value string representation of this node ' s data <nl> - * / <nl> - public String toString ( ) <nl> - { <nl> - return Objects . toStringHelper ( this ) . add ( " datacenter " , datacenter ) <nl> - . add ( " rack " , rack ) . add ( " dcLocalAddress " , dcLocalAddress ) <nl> - . toString ( ) ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * Called in preparation for the initiation of the gossip loop . <nl> - * / <nl> - @ Override <nl> - public synchronized void gossiperStarting ( ) <nl> - { <nl> - gossiperInitialized = true ; <nl> - StorageService . instance . gossipSnitchInfo ( ) ; <nl> - Gossiper . instance . register ( new ReconnectableSnitchHelper ( this , localNodeData . datacenter , true ) ) ; <nl> - } <nl> - <nl> - } <nl> diff - - git a / test / conf / cassandra - topology . yaml b / test / conf / cassandra - topology . yaml <nl> deleted file mode 100644 <nl> index 51542da . . 0000000 <nl> - - - a / test / conf / cassandra - topology . yaml <nl> + + + / dev / null <nl> @ @ - 1 , 74 + 0 , 0 @ @ <nl> - # Test YAML topology configuration file for Cassandra , <nl> - # to be used with YamlFileNetworkTopologySnitch . <nl> - <nl> - # The topology , as a list of data centers . <nl> - topology : <nl> - # Each data center has a name and a list of racks . <nl> - - dc _ name : DC1 <nl> - racks : <nl> - # Each rack has a name and a list of nodes . <nl> - - rack _ name : RAC1 <nl> - nodes : <nl> - # Each node has a broadcast address ( required ) <nl> - # and a data - center - local address ( optional ) . <nl> - # If dc _ local _ address is specified , its peers <nl> - # in the same data center will attempt to <nl> - # reconnect over that address instead . <nl> - - broadcast _ address : 127 . 0 . 0 . 1 <nl> - dc _ local _ address : 9 . 0 . 0 . 1 <nl> - - broadcast _ address : 192 . 168 . 1 . 100 <nl> - dc _ local _ address : 9 . 0 . 0 . 2 <nl> - - broadcast _ address : 10 . 0 . 0 . 10 <nl> - dc _ local _ address : 9 . 0 . 0 . 3 <nl> - - broadcast _ address : 10 . 0 . 0 . 11 <nl> - dc _ local _ address : 9 . 0 . 0 . 4 <nl> - - rack _ name : RAC2 <nl> - nodes : <nl> - - broadcast _ address : 192 . 168 . 2 . 200 <nl> - - broadcast _ address : 10 . 0 . 0 . 12 <nl> - - broadcast _ address : 10 . 0 . 0 . 13 <nl> - - broadcast _ address : 127 . 0 . 0 . 2 <nl> - - rack _ name : RAC3 <nl> - nodes : <nl> - - broadcast _ address : 127 . 0 . 0 . 3 <nl> - - dc _ name : DC2 <nl> - racks : <nl> - - rack _ name : RAC1 <nl> - nodes : <nl> - - broadcast _ address : 10 . 20 . 114 . 10 <nl> - - broadcast _ address : 10 . 20 . 114 . 11 <nl> - - rack _ name : RAC2 <nl> - nodes : <nl> - - broadcast _ address : 10 . 20 . 114 . 15 <nl> - - rack _ name : RAC4 <nl> - nodes : <nl> - - broadcast _ address : 127 . 0 . 0 . 4 <nl> - - rack _ name : RAC5 <nl> - nodes : <nl> - - broadcast _ address : 127 . 0 . 0 . 5 <nl> - - dc _ name : DC3 <nl> - racks : <nl> - - rack _ name : RAC1 <nl> - nodes : <nl> - - broadcast _ address : 10 . 21 . 119 . 13 <nl> - - broadcast _ address : 10 . 21 . 119 . 10 <nl> - - rack _ name : RAC2 <nl> - nodes : <nl> - - broadcast _ address : 10 . 21 . 119 . 14 <nl> - - rack _ name : RAC6 <nl> - nodes : <nl> - - broadcast _ address : 127 . 0 . 0 . 6 <nl> - - rack _ name : RAC7 <nl> - nodes : <nl> - - broadcast _ address : 127 . 0 . 0 . 7 <nl> - - rack _ name : RAC8 <nl> - nodes : <nl> - - broadcast _ address : 127 . 0 . 0 . 8 <nl> - <nl> - <nl> - # Default data center name for unknown nodes <nl> - default _ dc _ name : DC1 <nl> - <nl> - # Default rack name for unknown nodes <nl> - default _ rack _ name : r1 <nl> - <nl> diff - - git a / test / unit / org / apache / cassandra / locator / GossipingPropertyFileSnitchTest . java b / test / unit / org / apache / cassandra / locator / GossipingPropertyFileSnitchTest . java <nl> index 9026ebf . . 16557b3 100644 <nl> - - - a / test / unit / org / apache / cassandra / locator / GossipingPropertyFileSnitchTest . java <nl> + + + b / test / unit / org / apache / cassandra / locator / GossipingPropertyFileSnitchTest . java <nl> @ @ - 17 , 11 + 17 , 14 @ @ <nl> * / <nl> package org . apache . cassandra . locator ; <nl> <nl> + import java . net . InetAddress ; <nl> import java . nio . file . Files ; <nl> import java . nio . file . Path ; <nl> import java . nio . file . Paths ; <nl> <nl> + import com . google . common . net . InetAddresses ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> + import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> / * * <nl> @ @ - 29 , 13 + 32 , 22 @ @ import org . junit . Test ; <nl> * / <nl> public class GossipingPropertyFileSnitchTest <nl> { <nl> + public static void checkEndpoint ( final AbstractNetworkTopologySnitch snitch , <nl> + final String endpointString , final String expectedDatacenter , <nl> + final String expectedRack ) <nl> + { <nl> + final InetAddress endpoint = InetAddresses . forString ( endpointString ) ; <nl> + Assert . assertEquals ( expectedDatacenter , snitch . getDatacenter ( endpoint ) ) ; <nl> + Assert . assertEquals ( expectedRack , snitch . getRack ( endpoint ) ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testAutoReloadConfig ( ) throws Exception <nl> { <nl> String confFile = FBUtilities . resourceToFile ( SnitchProperties . RACKDC _ PROPERTY _ FILENAME ) ; <nl> <nl> final GossipingPropertyFileSnitch snitch = new GossipingPropertyFileSnitch ( / * refreshPeriodInSeconds * / 1 ) ; <nl> - YamlFileNetworkTopologySnitchTest . checkEndpoint ( snitch , FBUtilities . getBroadcastAddress ( ) . getHostAddress ( ) , " DC1 " , " RAC1 " ) ; <nl> + checkEndpoint ( snitch , FBUtilities . getBroadcastAddress ( ) . getHostAddress ( ) , " DC1 " , " RAC1 " ) ; <nl> <nl> final Path effectiveFile = Paths . get ( confFile ) ; <nl> final Path backupFile = Paths . get ( confFile + " . bak " ) ; <nl> @ @ - 48 , 7 + 60 , 7 @ @ public class GossipingPropertyFileSnitchTest <nl> <nl> Thread . sleep ( 1500 ) ; <nl> <nl> - YamlFileNetworkTopologySnitchTest . checkEndpoint ( snitch , FBUtilities . getBroadcastAddress ( ) . getHostAddress ( ) , " DC2 " , " RAC2 " ) ; <nl> + checkEndpoint ( snitch , FBUtilities . getBroadcastAddress ( ) . getHostAddress ( ) , " DC2 " , " RAC2 " ) ; <nl> } <nl> finally <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / locator / YamlFileNetworkTopologySnitchTest . java b / test / unit / org / apache / cassandra / locator / YamlFileNetworkTopologySnitchTest . java <nl> deleted file mode 100644 <nl> index af1a7e9 . . 0000000 <nl> - - - a / test / unit / org / apache / cassandra / locator / YamlFileNetworkTopologySnitchTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 100 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . locator ; <nl> - <nl> - import java . net . InetAddress ; <nl> - <nl> - import org . apache . cassandra . exceptions . ConfigurationException ; <nl> - import org . apache . cassandra . utils . FBUtilities ; <nl> - import org . junit . Assert ; <nl> - import org . junit . Test ; <nl> - <nl> - import com . google . common . net . InetAddresses ; <nl> - <nl> - / * * <nl> - * Unit tests for { @ link YamlFileNetworkTopologySnitch } . <nl> - * / <nl> - public class YamlFileNetworkTopologySnitchTest <nl> - { <nl> - <nl> - / * * <nl> - * Testing variant of { @ link YamlFileNetworkTopologySnitch } . <nl> - * <nl> - * / <nl> - private class TestYamlFileNetworkTopologySnitch <nl> - extends YamlFileNetworkTopologySnitch <nl> - { <nl> - <nl> - / * * <nl> - * Constructor . <nl> - * <nl> - * @ throws ConfigurationException <nl> - * on configuration error <nl> - * / <nl> - public TestYamlFileNetworkTopologySnitch ( <nl> - final String topologyConfigFilename ) <nl> - throws ConfigurationException <nl> - { <nl> - super ( topologyConfigFilename ) ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * A basic test case . <nl> - * <nl> - * @ throws Exception <nl> - * on failure <nl> - * / <nl> - @ Test <nl> - public void testBasic ( ) throws Exception <nl> - { <nl> - final TestYamlFileNetworkTopologySnitch snitch = new TestYamlFileNetworkTopologySnitch ( <nl> - " cassandra - topology . yaml " ) ; <nl> - checkEndpoint ( snitch , FBUtilities . getBroadcastAddress ( ) <nl> - . getHostAddress ( ) , " DC1 " , " RAC1 " ) ; <nl> - checkEndpoint ( snitch , " 192 . 168 . 1 . 100 " , " DC1 " , " RAC1 " ) ; <nl> - checkEndpoint ( snitch , " 10 . 0 . 0 . 12 " , " DC1 " , " RAC2 " ) ; <nl> - checkEndpoint ( snitch , " 127 . 0 . 0 . 3 " , " DC1 " , " RAC3 " ) ; <nl> - checkEndpoint ( snitch , " 10 . 20 . 114 . 10 " , " DC2 " , " RAC1 " ) ; <nl> - checkEndpoint ( snitch , " 127 . 0 . 0 . 8 " , " DC3 " , " RAC8 " ) ; <nl> - checkEndpoint ( snitch , " 6 . 6 . 6 . 6 " , " DC1 " , " r1 " ) ; <nl> - <nl> - } <nl> - <nl> - / * * <nl> - * Asserts that a snitch ' s determination of data center and rack for an endpoint match what we expect . <nl> - * <nl> - * @ param snitch <nl> - * snitch <nl> - * @ param endpointString <nl> - * endpoint address as a string <nl> - * @ param expectedDatacenter <nl> - * expected data center <nl> - * @ param expectedRack <nl> - * expected rack <nl> - * / <nl> - public static void checkEndpoint ( final AbstractNetworkTopologySnitch snitch , <nl> - final String endpointString , final String expectedDatacenter , <nl> - final String expectedRack ) <nl> - { <nl> - final InetAddress endpoint = InetAddresses . forString ( endpointString ) ; <nl> - Assert . assertEquals ( expectedDatacenter , snitch . getDatacenter ( endpoint ) ) ; <nl> - Assert . assertEquals ( expectedRack , snitch . getRack ( endpoint ) ) ; <nl> - } <nl> - <nl> - }
NEAREST DIFF (one line): diff - - git a / debian / cassandra . install b / debian / cassandra . install <nl> index 28983d4 . . a3b73c1 100644 <nl> - - - a / debian / cassandra . install <nl> + + + b / debian / cassandra . install <nl> @ @ - 1 , 3 + 1 , 4 @ @ <nl> + conf / cassandra - topology . yaml etc / cassandra <nl> conf / log4j - server . properties etc / cassandra <nl> conf / cassandra . yaml etc / cassandra <nl> conf / cassandra - env . sh etc / cassandra

TEST DIFF:
diff - - git a / conf / cassandra - topology . yaml b / conf / cassandra - topology . yaml 
 deleted file mode 100644 
 index 11c37d0 . . 0000000 
 - - - a / conf / cassandra - topology . yaml 
 + + + / dev / null 
 @ @ - 1 , 25 + 0 , 0 @ @ 
 - # YAML topology configuration file for Cassandra , 
 - # to be used with YamlFileNetworkTopologySnitch . 
 - 
 - # The topology , as a list of data centers . 
 - topology : 
 - # Each data center has a name and a list of racks . 
 - - dc _ name : DC1 
 - racks : 
 - # Each rack has a name and a list of nodes . 
 - - rack _ name : c1 
 - nodes : 
 - # Each node has a broadcast address ( required ) 
 - # and a data - center - local address ( optional ) . 
 - # If dc _ local _ address is specified , its peers 
 - # in the same data center will attempt to 
 - # reconnect over that address instead . 
 - - broadcast _ address : 1 . 2 . 3 . 4 
 - dc _ local _ address : 5 . 6 . 7 . 8 
 - 
 - # Default data center name for unknown nodes ; defaults to " UNKNOWN " 
 - # default _ dc _ name : UNKNOWN 
 - 
 - # Default rack name for unknown nodes 
 - # default _ rack _ name : UNKNOWN ; defaults to " UNKNOWN " 
 - 
 diff - - git a / src / java / org / apache / cassandra / locator / YamlFileNetworkTopologySnitch . java b / src / java / org / apache / cassandra / locator / YamlFileNetworkTopologySnitch . java 
 deleted file mode 100644 
 index 93e76f0 . . 0000000 
 - - - a / src / java / org / apache / cassandra / locator / YamlFileNetworkTopologySnitch . java 
 + + + / dev / null 
 @ @ - 1 , 415 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . locator ; 
 - 
 - import java . io . InputStream ; 
 - import java . net . InetAddress ; 
 - import java . util . Collections ; 
 - import java . util . HashMap ; 
 - import java . util . List ; 
 - import java . util . Map ; 
 - 
 - import org . apache . cassandra . exceptions . ConfigurationException ; 
 - import org . apache . cassandra . gms . ApplicationState ; 
 - import org . apache . cassandra . gms . EndpointState ; 
 - import org . apache . cassandra . gms . Gossiper ; 
 - import org . apache . cassandra . gms . VersionedValue ; 
 - import org . apache . cassandra . io . util . FileUtils ; 
 - import org . apache . cassandra . service . StorageService ; 
 - import org . apache . cassandra . utils . FBUtilities ; 
 - import org . apache . cassandra . utils . ResourceWatcher ; 
 - import org . apache . cassandra . utils . WrappedRunnable ; 
 - import org . slf4j . Logger ; 
 - import org . slf4j . LoggerFactory ; 
 - import org . yaml . snakeyaml . TypeDescription ; 
 - import org . yaml . snakeyaml . Yaml ; 
 - import org . yaml . snakeyaml . constructor . Constructor ; 
 - 
 - import com . google . common . base . Objects ; 
 - import com . google . common . net . InetAddresses ; 
 - 
 - / * * 
 - * Network topology snitch that reads its configuration from a YAML file . 
 - * < p > 
 - * This snitch supports connections over preferred addresses , such as a data - center - local address , based on the 
 - * reconnection trick used in { @ link Ec2MultiRegionSnitch } . The configuration file , { @ code cassandra - topology . yaml } , is 
 - * checked periodically for updates . 
 - * < / p > 
 - * / 
 - public class YamlFileNetworkTopologySnitch 
 - extends AbstractNetworkTopologySnitch 
 - { 
 - 
 - private static final Logger logger = LoggerFactory . getLogger ( YamlFileNetworkTopologySnitch . class ) ; 
 - 
 - / * * 
 - * How often to check the topology configuration file , in milliseconds ; defaults to one minute . 
 - * / 
 - private static final int CHECK _ PERIOD _ IN _ MS = 60 * 1000 ; 
 - 
 - / * * Default name for the topology configuration file . * / 
 - private static final String DEFAULT _ TOPOLOGY _ CONFIG _ FILENAME = " cassandra - topology . yaml " ; 
 - 
 - / * * Node data map , keyed by broadcast address . * / 
 - private volatile Map < InetAddress , NodeData > nodeDataMap ; 
 - 
 - / * * Node data for this node . * / 
 - private volatile NodeData localNodeData ; 
 - 
 - / * * Node data to fall back to when there is no match . * / 
 - private volatile NodeData defaultNodeData ; 
 - 
 - / * * Name of the topology configuration file . * / 
 - private final String topologyConfigFilename ; 
 - 
 - / * * True if the gossiper has been initialized . * / 
 - private volatile boolean gossiperInitialized = false ; 
 - 
 - / * * 
 - * Constructor . 
 - * 
 - * @ throws ConfigurationException 
 - * on failure 
 - * / 
 - public YamlFileNetworkTopologySnitch ( ) throws ConfigurationException 
 - { 
 - this ( DEFAULT _ TOPOLOGY _ CONFIG _ FILENAME ) ; 
 - } 
 - 
 - / * * 
 - * Constructor . 
 - * 
 - * @ param topologyConfigFilename 
 - * name of the topology configuration file 
 - * @ throws ConfigurationException 
 - * on failure 
 - * / 
 - YamlFileNetworkTopologySnitch ( final String topologyConfigFilename ) 
 - throws ConfigurationException 
 - { 
 - logger . warn ( " YamlFileNetworkTopologySnitch is deprecated ; switch to GossipingPropertyFileSnitch instead " ) ; 
 - this . topologyConfigFilename = topologyConfigFilename ; 
 - loadTopologyConfiguration ( ) ; 
 - 
 - try 
 - { 
 - / * 
 - * Check if the topology configuration file is a plain file . 
 - * / 
 - FBUtilities . resourceToFile ( topologyConfigFilename ) ; 
 - 
 - final Runnable runnable = new WrappedRunnable ( ) 
 - { 
 - / * * 
 - * Loads the topology . 
 - * / 
 - protected void runMayThrow ( ) throws ConfigurationException 
 - { 
 - loadTopologyConfiguration ( ) ; 
 - } 
 - } ; 
 - ResourceWatcher . watch ( topologyConfigFilename , runnable , 
 - CHECK _ PERIOD _ IN _ MS ) ; 
 - } 
 - catch ( final ConfigurationException e ) 
 - { 
 - logger . debug ( 
 - " { } found , but does not look like a plain file . Will not watch it for changes " , 
 - topologyConfigFilename ) ; 
 - } 
 - } 
 - 
 - / * * 
 - * Returns the name of the rack for the endpoint , or { @ code UNKNOWN } if not known . 
 - * 
 - * @ return the name of the data center for the endpoint , or { @ code UNKNOWN } if not known 
 - * / 
 - @ Override 
 - public String getRack ( final InetAddress endpoint ) 
 - { 
 - final NodeData nodeData = nodeDataMap . get ( endpoint ) ; 
 - return nodeData ! = null ? nodeData . rack : defaultNodeData . rack ; 
 - } 
 - 
 - / * * 
 - * Returns the name of the data center for the endpoint , or { @ code UNKNOWN } if not known . 
 - * 
 - * @ return the name of the data center for the endpoint , or { @ code UNKNOWN } if not known 
 - * / 
 - @ Override 
 - public String getDatacenter ( final InetAddress endpoint ) 
 - { 
 - final NodeData nodeData = nodeDataMap . get ( endpoint ) ; 
 - return nodeData ! = null ? nodeData . datacenter 
 - : defaultNodeData . datacenter ; 
 - } 
 - 
 - / * * 
 - * Root object type for the YAML topology configuration . 
 - * / 
 - public static class TopologyConfig 
 - { 
 - public List < Datacenter > topology ; 
 - public String default _ dc _ name = " UNKNOWN " ; 
 - public String default _ rack _ name = " UNKNOWN " ; 
 - } 
 - 
 - / * * 
 - * Data center object type for the YAML topology configuration . 
 - * / 
 - public static class Datacenter 
 - { 
 - public String dc _ name ; 
 - public List < Rack > racks = Collections . emptyList ( ) ; 
 - } 
 - 
 - / * * 
 - * Rack object type for the YAML topology configuration . 
 - * / 
 - public static class Rack 
 - { 
 - public String rack _ name ; 
 - public List < Node > nodes = Collections . emptyList ( ) ; 
 - } 
 - 
 - / * * 
 - * Node object type for the YAML topology configuration . 
 - * / 
 - public static class Node 
 - { 
 - public String broadcast _ address ; 
 - public String dc _ local _ address ; 
 - } 
 - 
 - / * * 
 - * Loads the topology configuration file . 
 - * 
 - * @ throws ConfigurationException 
 - * on failure 
 - * / 
 - private synchronized void loadTopologyConfiguration ( ) 
 - throws ConfigurationException 
 - { 
 - logger . debug ( " Loading topology configuration from { } " , 
 - topologyConfigFilename ) ; 
 - 
 - final TypeDescription topologyConfigTypeDescription = new TypeDescription ( 
 - TopologyConfig . class ) ; 
 - topologyConfigTypeDescription . putListPropertyType ( " topology " , 
 - Datacenter . class ) ; 
 - 
 - final TypeDescription topologyTypeDescription = new TypeDescription ( 
 - Datacenter . class ) ; 
 - topologyTypeDescription . putListPropertyType ( " racks " , Rack . class ) ; 
 - 
 - final TypeDescription rackTypeDescription = new TypeDescription ( 
 - Rack . class ) ; 
 - rackTypeDescription . putListPropertyType ( " nodes " , Node . class ) ; 
 - 
 - final Constructor configConstructor = new Constructor ( 
 - TopologyConfig . class ) ; 
 - configConstructor . addTypeDescription ( topologyConfigTypeDescription ) ; 
 - configConstructor . addTypeDescription ( topologyTypeDescription ) ; 
 - configConstructor . addTypeDescription ( rackTypeDescription ) ; 
 - 
 - final InputStream configFileInputStream = getClass ( ) . getClassLoader ( ) 
 - . getResourceAsStream ( topologyConfigFilename ) ; 
 - if ( configFileInputStream = = null ) 
 - { 
 - throw new ConfigurationException ( 
 - " Could not read topology config file " 
 - + topologyConfigFilename ) ; 
 - } 
 - Yaml yaml ; 
 - TopologyConfig topologyConfig ; 
 - try 
 - { 
 - yaml = new Yaml ( configConstructor ) ; 
 - topologyConfig = ( TopologyConfig ) yaml . load ( configFileInputStream ) ; 
 - } 
 - finally 
 - { 
 - FileUtils . closeQuietly ( configFileInputStream ) ; 
 - } 
 - final Map < InetAddress , NodeData > nodeDataMap = new HashMap < InetAddress , NodeData > ( ) ; 
 - 
 - if ( topologyConfig . topology = = null ) 
 - { 
 - throw new ConfigurationException ( 
 - " Topology configuration file is missing the topology section " ) ; 
 - } 
 - 
 - for ( final Datacenter datacenter : topologyConfig . topology ) 
 - { 
 - if ( datacenter . dc _ name = = null ) 
 - { 
 - throw new ConfigurationException ( 
 - " Topology configuration file is missing a data center name for some data center " ) ; 
 - } 
 - 
 - for ( final Rack rack : datacenter . racks ) 
 - { 
 - if ( rack . rack _ name = = null ) 
 - { 
 - throw new ConfigurationException ( 
 - String . format ( 
 - " Topology configuration file is missing a rack name for some rack under data center ' % s ' " , 
 - datacenter . dc _ name ) ) ; 
 - } 
 - 
 - for ( final Node node : rack . nodes ) 
 - { 
 - if ( node . broadcast _ address = = null ) 
 - { 
 - throw new ConfigurationException ( 
 - String . format ( 
 - " Topology configuration file is missing a broadcast address for some node under data center ' % s ' rack ' % s ' " , 
 - datacenter . dc _ name , rack . rack _ name ) ) ; 
 - } 
 - 
 - final InetAddress endpoint = InetAddresses 
 - . forString ( node . broadcast _ address ) ; 
 - final InetAddress dcLocalAddress = node . dc _ local _ address = = null ? null 
 - : InetAddresses . forString ( node . dc _ local _ address ) ; 
 - 
 - final NodeData nodeData = new NodeData ( ) ; 
 - nodeData . datacenter = datacenter . dc _ name ; 
 - nodeData . rack = rack . rack _ name ; 
 - nodeData . dcLocalAddress = dcLocalAddress ; 
 - 
 - if ( nodeDataMap . put ( endpoint , nodeData ) ! = null ) 
 - { 
 - throw new ConfigurationException ( 
 - String . format ( 
 - " IP address ' % s ' appears more than once in the topology configuration file " , 
 - endpoint ) ) ; 
 - } 
 - 
 - if ( dcLocalAddress ! = null 
 - & & nodeDataMap . put ( dcLocalAddress , nodeData ) ! = null ) 
 - { 
 - throw new ConfigurationException ( 
 - String . format ( 
 - " IP address ' % s ' appears more than once in the topology configuration file " , 
 - dcLocalAddress ) ) ; 
 - } 
 - } 
 - } 
 - } 
 - 
 - final NodeData localNodeData = nodeDataMap . get ( FBUtilities 
 - . getBroadcastAddress ( ) ) ; 
 - if ( localNodeData = = null ) 
 - { 
 - throw new ConfigurationException ( 
 - " Topology configuration missing information for the local node " ) ; 
 - } 
 - 
 - final NodeData defaultNodeData = new NodeData ( ) ; 
 - 
 - if ( topologyConfig . default _ dc _ name = = null ) 
 - { 
 - throw new ConfigurationException ( 
 - " default _ dc _ name must be specified " ) ; 
 - } 
 - if ( topologyConfig . default _ rack _ name = = null ) 
 - { 
 - throw new ConfigurationException ( 
 - " default _ rack _ name must be specified " ) ; 
 - } 
 - 
 - defaultNodeData . datacenter = topologyConfig . default _ dc _ name ; 
 - defaultNodeData . rack = topologyConfig . default _ rack _ name ; 
 - 
 - / / YAML configuration looks good ; now make the changes 
 - 
 - this . nodeDataMap = nodeDataMap ; 
 - this . localNodeData = localNodeData ; 
 - this . defaultNodeData = defaultNodeData ; 
 - maybeSetApplicationState ( ) ; 
 - 
 - if ( logger . isDebugEnabled ( ) ) 
 - { 
 - logger . debug ( 
 - " Built topology map from config file : localNodeData = { } , nodeDataMap = { } " , 
 - localNodeData , nodeDataMap ) ; 
 - } 
 - 
 - if ( gossiperInitialized ) 
 - { 
 - StorageService . instance . gossipSnitchInfo ( ) ; 
 - } 
 - } 
 - 
 - / * * 
 - * be careful about just blindly updating ApplicationState . INTERNAL _ IP everytime we read the yaml file , 
 - * as that can cause connections to get unnecessarily reset ( via IESCS . onChange ( ) ) . 
 - * / 
 - private void maybeSetApplicationState ( ) 
 - { 
 - if ( localNodeData . dcLocalAddress = = null ) 
 - return ; 
 - final EndpointState es = Gossiper . instance . getEndpointStateForEndpoint ( FBUtilities . getBroadcastAddress ( ) ) ; 
 - if ( es = = null ) 
 - return ; 
 - final VersionedValue vv = es . getApplicationState ( ApplicationState . INTERNAL _ IP ) ; 
 - if ( ( vv ! = null & & ! vv . value . equals ( localNodeData . dcLocalAddress . getHostAddress ( ) ) ) 
 - | | vv = = null ) 
 - { 
 - Gossiper . instance . addLocalApplicationState ( ApplicationState . INTERNAL _ IP , 
 - StorageService . instance . valueFactory . internalIP ( localNodeData . dcLocalAddress . getHostAddress ( ) ) ) ; 
 - } 
 - } 
 - 
 - / * * 
 - * Topology data for a node . 
 - * / 
 - private class NodeData 
 - { 
 - / * * Data center name . * / 
 - public String datacenter ; 
 - / * * Rack name . * / 
 - public String rack ; 
 - / * * Data - center - local address . * / 
 - public InetAddress dcLocalAddress ; 
 - 
 - / * * 
 - * Returns a simple key - value string representation of this node ' s data . 
 - * 
 - * @ return a simple key - value string representation of this node ' s data 
 - * / 
 - public String toString ( ) 
 - { 
 - return Objects . toStringHelper ( this ) . add ( " datacenter " , datacenter ) 
 - . add ( " rack " , rack ) . add ( " dcLocalAddress " , dcLocalAddress ) 
 - . toString ( ) ; 
 - } 
 - } 
 - 
 - / * * 
 - * Called in preparation for the initiation of the gossip loop . 
 - * / 
 - @ Override 
 - public synchronized void gossiperStarting ( ) 
 - { 
 - gossiperInitialized = true ; 
 - StorageService . instance . gossipSnitchInfo ( ) ; 
 - Gossiper . instance . register ( new ReconnectableSnitchHelper ( this , localNodeData . datacenter , true ) ) ; 
 - } 
 - 
 - } 
 diff - - git a / test / conf / cassandra - topology . yaml b / test / conf / cassandra - topology . yaml 
 deleted file mode 100644 
 index 51542da . . 0000000 
 - - - a / test / conf / cassandra - topology . yaml 
 + + + / dev / null 
 @ @ - 1 , 74 + 0 , 0 @ @ 
 - # Test YAML topology configuration file for Cassandra , 
 - # to be used with YamlFileNetworkTopologySnitch . 
 - 
 - # The topology , as a list of data centers . 
 - topology : 
 - # Each data center has a name and a list of racks . 
 - - dc _ name : DC1 
 - racks : 
 - # Each rack has a name and a list of nodes . 
 - - rack _ name : RAC1 
 - nodes : 
 - # Each node has a broadcast address ( required ) 
 - # and a data - center - local address ( optional ) . 
 - # If dc _ local _ address is specified , its peers 
 - # in the same data center will attempt to 
 - # reconnect over that address instead . 
 - - broadcast _ address : 127 . 0 . 0 . 1 
 - dc _ local _ address : 9 . 0 . 0 . 1 
 - - broadcast _ address : 192 . 168 . 1 . 100 
 - dc _ local _ address : 9 . 0 . 0 . 2 
 - - broadcast _ address : 10 . 0 . 0 . 10 
 - dc _ local _ address : 9 . 0 . 0 . 3 
 - - broadcast _ address : 10 . 0 . 0 . 11 
 - dc _ local _ address : 9 . 0 . 0 . 4 
 - - rack _ name : RAC2 
 - nodes : 
 - - broadcast _ address : 192 . 168 . 2 . 200 
 - - broadcast _ address : 10 . 0 . 0 . 12 
 - - broadcast _ address : 10 . 0 . 0 . 13 
 - - broadcast _ address : 127 . 0 . 0 . 2 
 - - rack _ name : RAC3 
 - nodes : 
 - - broadcast _ address : 127 . 0 . 0 . 3 
 - - dc _ name : DC2 
 - racks : 
 - - rack _ name : RAC1 
 - nodes : 
 - - broadcast _ address : 10 . 20 . 114 . 10 
 - - broadcast _ address : 10 . 20 . 114 . 11 
 - - rack _ name : RAC2 
 - nodes : 
 - - broadcast _ address : 10 . 20 . 114 . 15 
 - - rack _ name : RAC4 
 - nodes : 
 - - broadcast _ address : 127 . 0 . 0 . 4 
 - - rack _ name : RAC5 
 - nodes : 
 - - broadcast _ address : 127 . 0 . 0 . 5 
 - - dc _ name : DC3 
 - racks : 
 - - rack _ name : RAC1 
 - nodes : 
 - - broadcast _ address : 10 . 21 . 119 . 13 
 - - broadcast _ address : 10 . 21 . 119 . 10 
 - - rack _ name : RAC2 
 - nodes : 
 - - broadcast _ address : 10 . 21 . 119 . 14 
 - - rack _ name : RAC6 
 - nodes : 
 - - broadcast _ address : 127 . 0 . 0 . 6 
 - - rack _ name : RAC7 
 - nodes : 
 - - broadcast _ address : 127 . 0 . 0 . 7 
 - - rack _ name : RAC8 
 - nodes : 
 - - broadcast _ address : 127 . 0 . 0 . 8 
 - 
 - 
 - # Default data center name for unknown nodes 
 - default _ dc _ name : DC1 
 - 
 - # Default rack name for unknown nodes 
 - default _ rack _ name : r1 
 - 
 diff - - git a / test / unit / org / apache / cassandra / locator / GossipingPropertyFileSnitchTest . java b / test / unit / org / apache / cassandra / locator / GossipingPropertyFileSnitchTest . java 
 index 9026ebf . . 16557b3 100644 
 - - - a / test / unit / org / apache / cassandra / locator / GossipingPropertyFileSnitchTest . java 
 + + + b / test / unit / org / apache / cassandra / locator / GossipingPropertyFileSnitchTest . java 
 @ @ - 17 , 11 + 17 , 14 @ @ 
 * / 
 package org . apache . cassandra . locator ; 
 
 + import java . net . InetAddress ; 
 import java . nio . file . Files ; 
 import java . nio . file . Path ; 
 import java . nio . file . Paths ; 
 
 + import com . google . common . net . InetAddresses ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 + import org . junit . Assert ; 
 import org . junit . Test ; 
 
 / * * 
 @ @ - 29 , 13 + 32 , 22 @ @ import org . junit . Test ; 
 * / 
 public class GossipingPropertyFileSnitchTest 
 { 
 + public static void checkEndpoint ( final AbstractNetworkTopologySnitch snitch , 
 + final String endpointString , final String expectedDatacenter , 
 + final String expectedRack ) 
 + { 
 + final InetAddress endpoint = InetAddresses . forString ( endpointString ) ; 
 + Assert . assertEquals ( expectedDatacenter , snitch . getDatacenter ( endpoint ) ) ; 
 + Assert . assertEquals ( expectedRack , snitch . getRack ( endpoint ) ) ; 
 + } 
 + 
 @ Test 
 public void testAutoReloadConfig ( ) throws Exception 
 { 
 String confFile = FBUtilities . resourceToFile ( SnitchProperties . RACKDC _ PROPERTY _ FILENAME ) ; 
 
 final GossipingPropertyFileSnitch snitch = new GossipingPropertyFileSnitch ( / * refreshPeriodInSeconds * / 1 ) ; 
 - YamlFileNetworkTopologySnitchTest . checkEndpoint ( snitch , FBUtilities . getBroadcastAddress ( ) . getHostAddress ( ) , " DC1 " , " RAC1 " ) ; 
 + checkEndpoint ( snitch , FBUtilities . getBroadcastAddress ( ) . getHostAddress ( ) , " DC1 " , " RAC1 " ) ; 
 
 final Path effectiveFile = Paths . get ( confFile ) ; 
 final Path backupFile = Paths . get ( confFile + " . bak " ) ; 
 @ @ - 48 , 7 + 60 , 7 @ @ public class GossipingPropertyFileSnitchTest 
 
 Thread . sleep ( 1500 ) ; 
 
 - YamlFileNetworkTopologySnitchTest . checkEndpoint ( snitch , FBUtilities . getBroadcastAddress ( ) . getHostAddress ( ) , " DC2 " , " RAC2 " ) ; 
 + checkEndpoint ( snitch , FBUtilities . getBroadcastAddress ( ) . getHostAddress ( ) , " DC2 " , " RAC2 " ) ; 
 } 
 finally 
 { 
 diff - - git a / test / unit / org / apache / cassandra / locator / YamlFileNetworkTopologySnitchTest . java b / test / unit / org / apache / cassandra / locator / YamlFileNetworkTopologySnitchTest . java 
 deleted file mode 100644 
 index af1a7e9 . . 0000000 
 - - - a / test / unit / org / apache / cassandra / locator / YamlFileNetworkTopologySnitchTest . java 
 + + + / dev / null 
 @ @ - 1 , 100 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . locator ; 
 - 
 - import java . net . InetAddress ; 
 - 
 - import org . apache . cassandra . exceptions . ConfigurationException ; 
 - import org . apache . cassandra . utils . FBUtilities ; 
 - import org . junit . Assert ; 
 - import org . junit . Test ; 
 - 
 - import com . google . common . net . InetAddresses ; 
 - 
 - / * * 
 - * Unit tests for { @ link YamlFileNetworkTopologySnitch } . 
 - * / 
 - public class YamlFileNetworkTopologySnitchTest 
 - { 
 - 
 - / * * 
 - * Testing variant of { @ link YamlFileNetworkTopologySnitch } . 
 - * 
 - * / 
 - private class TestYamlFileNetworkTopologySnitch 
 - extends YamlFileNetworkTopologySnitch 
 - { 
 - 
 - / * * 
 - * Constructor . 
 - * 
 - * @ throws ConfigurationException 
 - * on configuration error 
 - * / 
 - public TestYamlFileNetworkTopologySnitch ( 
 - final String topologyConfigFilename ) 
 - throws ConfigurationException 
 - { 
 - super ( topologyConfigFilename ) ; 
 - } 
 - } 
 - 
 - / * * 
 - * A basic test case . 
 - * 
 - * @ throws Exception 
 - * on failure 
 - * / 
 - @ Test 
 - public void testBasic ( ) throws Exception 
 - { 
 - final TestYamlFileNetworkTopologySnitch snitch = new TestYamlFileNetworkTopologySnitch ( 
 - " cassandra - topology . yaml " ) ; 
 - checkEndpoint ( snitch , FBUtilities . getBroadcastAddress ( ) 
 - . getHostAddress ( ) , " DC1 " , " RAC1 " ) ; 
 - checkEndpoint ( snitch , " 192 . 168 . 1 . 100 " , " DC1 " , " RAC1 " ) ; 
 - checkEndpoint ( snitch , " 10 . 0 . 0 . 12 " , " DC1 " , " RAC2 " ) ; 
 - checkEndpoint ( snitch , " 127 . 0 . 0 . 3 " , " DC1 " , " RAC3 " ) ; 
 - checkEndpoint ( snitch , " 10 . 20 . 114 . 10 " , " DC2 " , " RAC1 " ) ; 
 - checkEndpoint ( snitch , " 127 . 0 . 0 . 8 " , " DC3 " , " RAC8 " ) ; 
 - checkEndpoint ( snitch , " 6 . 6 . 6 . 6 " , " DC1 " , " r1 " ) ; 
 - 
 - } 
 - 
 - / * * 
 - * Asserts that a snitch ' s determination of data center and rack for an endpoint match what we expect . 
 - * 
 - * @ param snitch 
 - * snitch 
 - * @ param endpointString 
 - * endpoint address as a string 
 - * @ param expectedDatacenter 
 - * expected data center 
 - * @ param expectedRack 
 - * expected rack 
 - * / 
 - public static void checkEndpoint ( final AbstractNetworkTopologySnitch snitch , 
 - final String endpointString , final String expectedDatacenter , 
 - final String expectedRack ) 
 - { 
 - final InetAddress endpoint = InetAddresses . forString ( endpointString ) ; 
 - Assert . assertEquals ( expectedDatacenter , snitch . getDatacenter ( endpoint ) ) ; 
 - Assert . assertEquals ( expectedRack , snitch . getRack ( endpoint ) ) ; 
 - } 
 - 
 - }

NEAREST DIFF:
diff - - git a / debian / cassandra . install b / debian / cassandra . install 
 index 28983d4 . . a3b73c1 100644 
 - - - a / debian / cassandra . install 
 + + + b / debian / cassandra . install 
 @ @ - 1 , 3 + 1 , 4 @ @ 
 + conf / cassandra - topology . yaml etc / cassandra 
 conf / log4j - server . properties etc / cassandra 
 conf / cassandra . yaml etc / cassandra 
 conf / cassandra - env . sh etc / cassandra
