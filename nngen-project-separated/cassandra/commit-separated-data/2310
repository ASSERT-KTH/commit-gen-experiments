BLEU SCORE: 0.007549714872297866

TEST MSG: update column _ index _ size _ in _ kb description
GENERATED MSG: Add missing comments / options to cassandra . yaml . Patch by brandonwilliams , reviewed by jbellis for CASSANDRA - 1390

TEST DIFF (one line): diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index f067635 . . c8064d1 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 421 , 13 + 421 , 15 @ @ auto _ snapshot : true <nl> tombstone _ warn _ threshold : 1000 <nl> tombstone _ failure _ threshold : 100000 <nl> <nl> - # Add column indexes to a row after its contents reach this size . <nl> - # Increase if your column values are large , or if you have a very large <nl> - # number of columns . The competing causes are , Cassandra has to <nl> - # deserialize this much of the row to read a single column , so you want <nl> - # it to be small - at least if you do many partial - row reads - but all <nl> - # the index data is read for each access , so you don ' t want to generate <nl> - # that wastefully either . <nl> + # Granularity of the collation index of rows within a partition . <nl> + # Increase if your rows are large , or if you have a very large <nl> + # number of rows per partition . The competing goals are these : <nl> + # 1 ) a smaller granularity means more index entries are generated <nl> + # and looking up rows withing the partition by collation column <nl> + # is faster <nl> + # 2 ) but , Cassandra will keep the collation index in memory for hot <nl> + # rows ( as part of the key cache ) , so a larger granularity means <nl> + # you can cache more hot rows <nl> column _ index _ size _ in _ kb : 64 <nl> <nl>
NEAREST DIFF (one line): diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index e6b3ed6 . . 4fae68d 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 2 , 9 + 2 , 22 @ @ <nl> # See http : / / wiki . apache . org / cassandra / StorageConfiguration for <nl> # explanations of configuration directives . <nl> <nl> - # name of the cluster <nl> + # The name of the cluster . This is mainly used to prevent machines in <nl> + # one logical cluster from joining another . <nl> cluster _ name : ' Test Cluster ' <nl> <nl> + # If you are using an order - preserving partitioner and you know your key <nl> + # distribution , you can specify the token for this node to use . ( Keys <nl> + # are sent to the node with the " closest " token , so distributing your <nl> + # tokens equally along the key distribution space will spread keys <nl> + # evenly across your cluster . ) This setting is only checked the first <nl> + # time a node is started . <nl> + <nl> + # This can also be useful with RandomPartitioner to force equal spacing <nl> + # of tokens around the hash space , especially for clusters with a small <nl> + # number of nodes . <nl> + initial _ token : <nl> + <nl> # Set to true to make new [ non - seed ] nodes automatically migrate data <nl> # to themselves from the pre - existing nodes in the cluster . Defaults <nl> # to false because you can only bootstrap N machines at a time from <nl> @ @ - 25 , 14 + 38 , 35 @ @ authority : org . apache . cassandra . auth . AllowAllAuthority <nl> # any IPartitioner may be used , including your own as long as it is on <nl> # the classpath . Out of the box , Cassandra provides <nl> # org . apache . cassandra . dht . RandomPartitioner <nl> + # org . apache . cassandra . dht . ByteOrderedPartitioner , <nl> # org . apache . cassandra . dht . OrderPreservingPartitioner , and <nl> # org . apache . cassandra . dht . CollatingOrderPreservingPartitioner . <nl> + # ( CollatingOPP colates according to EN , US rules , not naive byte <nl> + # ordering . Use this as an example if you need locale - aware collation . ) <nl> partitioner : org . apache . cassandra . dht . RandomPartitioner <nl> <nl> # directories where Cassandra should store data on disk . <nl> data _ file _ directories : <nl> - / var / lib / cassandra / data <nl> <nl> + # commit log <nl> + commitlog _ directory : / var / lib / cassandra / commitlog <nl> + <nl> + # Size to allow commitlog to grow to before creating a new segment <nl> + commitlog _ rotation _ threshold _ in _ mb : 128 <nl> + <nl> + # commitlog _ sync may be either " periodic " or " batch . " <nl> + # When in batch mode , Cassandra won ' t ack writes until the commit log <nl> + # has been fsynced to disk . It will wait up to <nl> + # CommitLogSyncBatchWindowInMS milliseconds for other writes , before <nl> + # performing the sync . <nl> + commitlog _ sync : periodic <nl> + <nl> + # the other option is " timed , " where writes may be acked immediately <nl> + # and the CommitLog is simply synced every commitlog _ sync _ period _ in _ ms <nl> + # milliseconds . <nl> + commitlog _ sync _ period _ in _ ms : 10000 <nl> + <nl> # Addresses of hosts that are deemed contact points . <nl> # Cassandra nodes use this list of hosts to find each other and learn <nl> # the topology of the ring . You must change this if you are running <nl> @ @ - 90 , 6 + 124 , 10 @ @ thrift _ framed _ transport _ size _ in _ mb : 15 <nl> # internal thrift overhead . <nl> thrift _ max _ message _ length _ in _ mb : 16 <nl> <nl> + # Whether or not to take a snapshot before each compaction . Be <nl> + # careful using this option , since Cassandra won ' t clean up the <nl> + # snapshots for you . Mostly useful if you ' re paranoid when there <nl> + # is a data format change . <nl> snapshot _ before _ compaction : false <nl> <nl> # change this to increase the compaction thread ' s priority . In java , 1 is the <nl> @ @ - 111 , 28 + 149 , 20 @ @ memtable _ throughput _ in _ mb : 64 <nl> # Number of objects in millions in the memtable before it is flushed <nl> memtable _ operations _ in _ millions : 0 . 3 <nl> <nl> + # Add column indexes to a row after its contents reach this size . <nl> + # Increase if your column values are large , or if you have a very large <nl> + # number of columns . The competing causes are , Cassandra has to <nl> + # deserialize this much of the row to read a single column , so you want <nl> + # it to be small - at least if you do many partial - row reads - but all <nl> + # the index data is read for each access , so you don ' t want to generate <nl> + # that wastefully either . <nl> column _ index _ size _ in _ kb : 64 <nl> <nl> + # Size limit for rows being compacted in memory . Larger rows will spill <nl> + # over to disk and use a slower two - pass compaction process . A message <nl> + # will be logged specifying the row key . <nl> in _ memory _ compaction _ limit _ in _ mb : 64 <nl> <nl> - # commit log <nl> - commitlog _ directory : / var / lib / cassandra / commitlog <nl> - <nl> - # Size to allow commitlog to grow to before creating a new segment <nl> - commitlog _ rotation _ threshold _ in _ mb : 128 <nl> - <nl> - # commitlog _ sync may be either " periodic " or " batch . " <nl> - # When in batch mode , Cassandra won ' t ack writes until the commit log <nl> - # has been fsynced to disk . It will wait up to <nl> - # CommitLogSyncBatchWindowInMS milliseconds for other writes , before <nl> - # performing the sync . <nl> - commitlog _ sync : periodic <nl> - <nl> - # the other option is " timed , " where writes may be acked immediately <nl> - # and the CommitLog is simply synced every commitlog _ sync _ period _ in _ ms <nl> - # milliseconds . <nl> - commitlog _ sync _ period _ in _ ms : 10000 <nl> - <nl> # Time to wait for a reply from other nodes before failing the command <nl> rpc _ timeout _ in _ ms : 10000 <nl>

TEST DIFF:
diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index f067635 . . c8064d1 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 421 , 13 + 421 , 15 @ @ auto _ snapshot : true 
 tombstone _ warn _ threshold : 1000 
 tombstone _ failure _ threshold : 100000 
 
 - # Add column indexes to a row after its contents reach this size . 
 - # Increase if your column values are large , or if you have a very large 
 - # number of columns . The competing causes are , Cassandra has to 
 - # deserialize this much of the row to read a single column , so you want 
 - # it to be small - at least if you do many partial - row reads - but all 
 - # the index data is read for each access , so you don ' t want to generate 
 - # that wastefully either . 
 + # Granularity of the collation index of rows within a partition . 
 + # Increase if your rows are large , or if you have a very large 
 + # number of rows per partition . The competing goals are these : 
 + # 1 ) a smaller granularity means more index entries are generated 
 + # and looking up rows withing the partition by collation column 
 + # is faster 
 + # 2 ) but , Cassandra will keep the collation index in memory for hot 
 + # rows ( as part of the key cache ) , so a larger granularity means 
 + # you can cache more hot rows 
 column _ index _ size _ in _ kb : 64 
 


NEAREST DIFF:
diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index e6b3ed6 . . 4fae68d 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 2 , 9 + 2 , 22 @ @ 
 # See http : / / wiki . apache . org / cassandra / StorageConfiguration for 
 # explanations of configuration directives . 
 
 - # name of the cluster 
 + # The name of the cluster . This is mainly used to prevent machines in 
 + # one logical cluster from joining another . 
 cluster _ name : ' Test Cluster ' 
 
 + # If you are using an order - preserving partitioner and you know your key 
 + # distribution , you can specify the token for this node to use . ( Keys 
 + # are sent to the node with the " closest " token , so distributing your 
 + # tokens equally along the key distribution space will spread keys 
 + # evenly across your cluster . ) This setting is only checked the first 
 + # time a node is started . 
 + 
 + # This can also be useful with RandomPartitioner to force equal spacing 
 + # of tokens around the hash space , especially for clusters with a small 
 + # number of nodes . 
 + initial _ token : 
 + 
 # Set to true to make new [ non - seed ] nodes automatically migrate data 
 # to themselves from the pre - existing nodes in the cluster . Defaults 
 # to false because you can only bootstrap N machines at a time from 
 @ @ - 25 , 14 + 38 , 35 @ @ authority : org . apache . cassandra . auth . AllowAllAuthority 
 # any IPartitioner may be used , including your own as long as it is on 
 # the classpath . Out of the box , Cassandra provides 
 # org . apache . cassandra . dht . RandomPartitioner 
 + # org . apache . cassandra . dht . ByteOrderedPartitioner , 
 # org . apache . cassandra . dht . OrderPreservingPartitioner , and 
 # org . apache . cassandra . dht . CollatingOrderPreservingPartitioner . 
 + # ( CollatingOPP colates according to EN , US rules , not naive byte 
 + # ordering . Use this as an example if you need locale - aware collation . ) 
 partitioner : org . apache . cassandra . dht . RandomPartitioner 
 
 # directories where Cassandra should store data on disk . 
 data _ file _ directories : 
 - / var / lib / cassandra / data 
 
 + # commit log 
 + commitlog _ directory : / var / lib / cassandra / commitlog 
 + 
 + # Size to allow commitlog to grow to before creating a new segment 
 + commitlog _ rotation _ threshold _ in _ mb : 128 
 + 
 + # commitlog _ sync may be either " periodic " or " batch . " 
 + # When in batch mode , Cassandra won ' t ack writes until the commit log 
 + # has been fsynced to disk . It will wait up to 
 + # CommitLogSyncBatchWindowInMS milliseconds for other writes , before 
 + # performing the sync . 
 + commitlog _ sync : periodic 
 + 
 + # the other option is " timed , " where writes may be acked immediately 
 + # and the CommitLog is simply synced every commitlog _ sync _ period _ in _ ms 
 + # milliseconds . 
 + commitlog _ sync _ period _ in _ ms : 10000 
 + 
 # Addresses of hosts that are deemed contact points . 
 # Cassandra nodes use this list of hosts to find each other and learn 
 # the topology of the ring . You must change this if you are running 
 @ @ - 90 , 6 + 124 , 10 @ @ thrift _ framed _ transport _ size _ in _ mb : 15 
 # internal thrift overhead . 
 thrift _ max _ message _ length _ in _ mb : 16 
 
 + # Whether or not to take a snapshot before each compaction . Be 
 + # careful using this option , since Cassandra won ' t clean up the 
 + # snapshots for you . Mostly useful if you ' re paranoid when there 
 + # is a data format change . 
 snapshot _ before _ compaction : false 
 
 # change this to increase the compaction thread ' s priority . In java , 1 is the 
 @ @ - 111 , 28 + 149 , 20 @ @ memtable _ throughput _ in _ mb : 64 
 # Number of objects in millions in the memtable before it is flushed 
 memtable _ operations _ in _ millions : 0 . 3 
 
 + # Add column indexes to a row after its contents reach this size . 
 + # Increase if your column values are large , or if you have a very large 
 + # number of columns . The competing causes are , Cassandra has to 
 + # deserialize this much of the row to read a single column , so you want 
 + # it to be small - at least if you do many partial - row reads - but all 
 + # the index data is read for each access , so you don ' t want to generate 
 + # that wastefully either . 
 column _ index _ size _ in _ kb : 64 
 
 + # Size limit for rows being compacted in memory . Larger rows will spill 
 + # over to disk and use a slower two - pass compaction process . A message 
 + # will be logged specifying the row key . 
 in _ memory _ compaction _ limit _ in _ mb : 64 
 
 - # commit log 
 - commitlog _ directory : / var / lib / cassandra / commitlog 
 - 
 - # Size to allow commitlog to grow to before creating a new segment 
 - commitlog _ rotation _ threshold _ in _ mb : 128 
 - 
 - # commitlog _ sync may be either " periodic " or " batch . " 
 - # When in batch mode , Cassandra won ' t ack writes until the commit log 
 - # has been fsynced to disk . It will wait up to 
 - # CommitLogSyncBatchWindowInMS milliseconds for other writes , before 
 - # performing the sync . 
 - commitlog _ sync : periodic 
 - 
 - # the other option is " timed , " where writes may be acked immediately 
 - # and the CommitLog is simply synced every commitlog _ sync _ period _ in _ ms 
 - # milliseconds . 
 - commitlog _ sync _ period _ in _ ms : 10000 
 - 
 # Time to wait for a reply from other nodes before failing the command 
 rpc _ timeout _ in _ ms : 10000 

