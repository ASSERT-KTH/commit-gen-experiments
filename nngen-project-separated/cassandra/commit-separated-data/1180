BLEU SCORE: 0.040583489434387374

TEST MSG: Improve performance of the folderSize function
GENERATED MSG: Remove transient RAF usage

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 0a7fb2d . . b466e70 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 2 <nl> + * Improve performance of the folderSize function ( CASSANDRA - 10677 ) <nl> * Add support for type casting in selection clause ( CASSANDRA - 10310 ) <nl> * Added graphing option to cassandra - stress ( CASSANDRA - 7918 ) <nl> * Abort in - progress queries that time out ( CASSANDRA - 7392 ) <nl> diff - - git a / src / java / org / apache / cassandra / io / util / FileUtils . java b / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> index 46f2de5 . . d982e15 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> + + + b / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . nio . channels . FileChannel ; <nl> import java . nio . charset . Charset ; <nl> import java . nio . charset . StandardCharsets ; <nl> import java . nio . file . * ; <nl> + import java . nio . file . attribute . BasicFileAttributes ; <nl> import java . text . DecimalFormat ; <nl> import java . util . Arrays ; <nl> import java . util . Collections ; <nl> @ @ - 518 , 25 + 519 , 34 @ @ public class FileUtils <nl> break ; <nl> } <nl> } <nl> + <nl> / * * <nl> * Get the size of a directory in bytes <nl> - * @ param directory The directory for which we need size . <nl> + * @ param folder The directory for which we need size . <nl> * @ return The size of the directory <nl> * / <nl> - public static long folderSize ( File directory ) <nl> + public static long folderSize ( File folder ) <nl> { <nl> - long length = 0 ; <nl> - for ( File file : directory . listFiles ( ) ) <nl> + final long [ ] sizeArr = { 0L } ; <nl> + try <nl> { <nl> - if ( file . isFile ( ) ) <nl> - length + = file . length ( ) ; <nl> - else <nl> - length + = folderSize ( file ) ; <nl> + Files . walkFileTree ( folder . toPath ( ) , new SimpleFileVisitor < Path > ( ) <nl> + { <nl> + @ Override <nl> + public FileVisitResult visitFile ( Path file , BasicFileAttributes attrs ) <nl> + { <nl> + sizeArr [ 0 ] + = attrs . size ( ) ; <nl> + return FileVisitResult . CONTINUE ; <nl> + } <nl> + } ) ; <nl> } <nl> - return length ; <nl> + catch ( IOException e ) <nl> + { <nl> + logger . error ( " Error while getting { } folder size . { } " , folder , e ) ; <nl> + } <nl> + return sizeArr [ 0 ] ; <nl> } <nl> <nl> - <nl> public static void copyTo ( DataInput in , OutputStream out , int length ) throws IOException <nl> { <nl> byte [ ] buffer = new byte [ 64 * 1024 ] ; <nl> diff - - git a / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java b / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java <nl> index 7110504 . . ee33107 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java <nl> @ @ - 20 , 11 + 20 , 20 @ @ package org . apache . cassandra . io . util ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> + import java . io . RandomAccessFile ; <nl> import java . nio . charset . Charset ; <nl> import java . nio . file . Files ; <nl> + import java . nio . file . Path ; <nl> + import java . nio . file . Paths ; <nl> + import java . util . Arrays ; <nl> <nl> import org . junit . Test ; <nl> <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . cql3 . CQLTester ; <nl> + import org . apache . cassandra . schema . SchemaKeyspace ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> + <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertTrue ; <nl> <nl> @ @ - 52 , 4 + 61 , 47 @ @ public class FileUtilsTest <nl> assertEquals ( 0 , b . length ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testFolderSize ( ) throws Exception <nl> + { <nl> + File folder = createFolder ( Paths . get ( DatabaseDescriptor . getAllDataFileLocations ( ) [ 0 ] , " testFolderSize " ) ) ; <nl> + folder . deleteOnExit ( ) ; <nl> + <nl> + File childFolder = createFolder ( Paths . get ( folder . getPath ( ) , " child " ) ) ; <nl> + <nl> + File [ ] files = { <nl> + createFile ( new File ( folder , " 001 " ) , 10000 ) , <nl> + createFile ( new File ( folder , " 002 " ) , 1000 ) , <nl> + createFile ( new File ( folder , " 003 " ) , 100 ) , <nl> + createFile ( new File ( childFolder , " 001 " ) , 1000 ) , <nl> + createFile ( new File ( childFolder , " 002 " ) , 2000 ) , <nl> + } ; <nl> + <nl> + assertEquals ( 0 , FileUtils . folderSize ( new File ( folder , " i _ dont _ exist " ) ) ) ; <nl> + assertEquals ( files [ 0 ] . length ( ) , FileUtils . folderSize ( files [ 0 ] ) ) ; <nl> + <nl> + long size = FileUtils . folderSize ( folder ) ; <nl> + assertEquals ( Arrays . stream ( files ) . mapToLong ( f - > f . length ( ) ) . sum ( ) , size ) ; <nl> + } <nl> + <nl> + private File createFolder ( Path path ) <nl> + { <nl> + File folder = path . toFile ( ) ; <nl> + FileUtils . createDirectory ( folder ) ; <nl> + return folder ; <nl> + } <nl> + <nl> + private File createFile ( File file , long size ) <nl> + { <nl> + try <nl> + { <nl> + RandomAccessFile f = new RandomAccessFile ( file , " rw " ) ; <nl> + f . setLength ( size ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + System . err . println ( e ) ; <nl> + } <nl> + return file ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0a7fb2d . . b466e70 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 2 
 + * Improve performance of the folderSize function ( CASSANDRA - 10677 ) 
 * Add support for type casting in selection clause ( CASSANDRA - 10310 ) 
 * Added graphing option to cassandra - stress ( CASSANDRA - 7918 ) 
 * Abort in - progress queries that time out ( CASSANDRA - 7392 ) 
 diff - - git a / src / java / org / apache / cassandra / io / util / FileUtils . java b / src / java / org / apache / cassandra / io / util / FileUtils . java 
 index 46f2de5 . . d982e15 100644 
 - - - a / src / java / org / apache / cassandra / io / util / FileUtils . java 
 + + + b / src / java / org / apache / cassandra / io / util / FileUtils . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . nio . channels . FileChannel ; 
 import java . nio . charset . Charset ; 
 import java . nio . charset . StandardCharsets ; 
 import java . nio . file . * ; 
 + import java . nio . file . attribute . BasicFileAttributes ; 
 import java . text . DecimalFormat ; 
 import java . util . Arrays ; 
 import java . util . Collections ; 
 @ @ - 518 , 25 + 519 , 34 @ @ public class FileUtils 
 break ; 
 } 
 } 
 + 
 / * * 
 * Get the size of a directory in bytes 
 - * @ param directory The directory for which we need size . 
 + * @ param folder The directory for which we need size . 
 * @ return The size of the directory 
 * / 
 - public static long folderSize ( File directory ) 
 + public static long folderSize ( File folder ) 
 { 
 - long length = 0 ; 
 - for ( File file : directory . listFiles ( ) ) 
 + final long [ ] sizeArr = { 0L } ; 
 + try 
 { 
 - if ( file . isFile ( ) ) 
 - length + = file . length ( ) ; 
 - else 
 - length + = folderSize ( file ) ; 
 + Files . walkFileTree ( folder . toPath ( ) , new SimpleFileVisitor < Path > ( ) 
 + { 
 + @ Override 
 + public FileVisitResult visitFile ( Path file , BasicFileAttributes attrs ) 
 + { 
 + sizeArr [ 0 ] + = attrs . size ( ) ; 
 + return FileVisitResult . CONTINUE ; 
 + } 
 + } ) ; 
 } 
 - return length ; 
 + catch ( IOException e ) 
 + { 
 + logger . error ( " Error while getting { } folder size . { } " , folder , e ) ; 
 + } 
 + return sizeArr [ 0 ] ; 
 } 
 
 - 
 public static void copyTo ( DataInput in , OutputStream out , int length ) throws IOException 
 { 
 byte [ ] buffer = new byte [ 64 * 1024 ] ; 
 diff - - git a / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java b / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java 
 index 7110504 . . ee33107 100644 
 - - - a / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java 
 + + + b / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java 
 @ @ - 20 , 11 + 20 , 20 @ @ package org . apache . cassandra . io . util ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 + import java . io . RandomAccessFile ; 
 import java . nio . charset . Charset ; 
 import java . nio . file . Files ; 
 + import java . nio . file . Path ; 
 + import java . nio . file . Paths ; 
 + import java . util . Arrays ; 
 
 import org . junit . Test ; 
 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . cql3 . CQLTester ; 
 + import org . apache . cassandra . schema . SchemaKeyspace ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 + 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertTrue ; 
 
 @ @ - 52 , 4 + 61 , 47 @ @ public class FileUtilsTest 
 assertEquals ( 0 , b . length ) ; 
 } 
 
 + @ Test 
 + public void testFolderSize ( ) throws Exception 
 + { 
 + File folder = createFolder ( Paths . get ( DatabaseDescriptor . getAllDataFileLocations ( ) [ 0 ] , " testFolderSize " ) ) ; 
 + folder . deleteOnExit ( ) ; 
 + 
 + File childFolder = createFolder ( Paths . get ( folder . getPath ( ) , " child " ) ) ; 
 + 
 + File [ ] files = { 
 + createFile ( new File ( folder , " 001 " ) , 10000 ) , 
 + createFile ( new File ( folder , " 002 " ) , 1000 ) , 
 + createFile ( new File ( folder , " 003 " ) , 100 ) , 
 + createFile ( new File ( childFolder , " 001 " ) , 1000 ) , 
 + createFile ( new File ( childFolder , " 002 " ) , 2000 ) , 
 + } ; 
 + 
 + assertEquals ( 0 , FileUtils . folderSize ( new File ( folder , " i _ dont _ exist " ) ) ) ; 
 + assertEquals ( files [ 0 ] . length ( ) , FileUtils . folderSize ( files [ 0 ] ) ) ; 
 + 
 + long size = FileUtils . folderSize ( folder ) ; 
 + assertEquals ( Arrays . stream ( files ) . mapToLong ( f - > f . length ( ) ) . sum ( ) , size ) ; 
 + } 
 + 
 + private File createFolder ( Path path ) 
 + { 
 + File folder = path . toFile ( ) ; 
 + FileUtils . createDirectory ( folder ) ; 
 + return folder ; 
 + } 
 + 
 + private File createFile ( File file , long size ) 
 + { 
 + try 
 + { 
 + RandomAccessFile f = new RandomAccessFile ( file , " rw " ) ; 
 + f . setLength ( size ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + System . err . println ( e ) ; 
 + } 
 + return file ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
