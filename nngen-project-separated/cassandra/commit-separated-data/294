BLEU SCORE: 0.05341087579952926

TEST MSG: StreamingHistogram is not thread safe
GENERATED MSG: Log Merkle tree precision stats

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 1ed3fe6 . . 853bf61 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 15 <nl> + * StreamingHistogram is not thread safe ( CASSANDRA - 13756 ) <nl> * Fix MV timestamp issues ( CASSANDRA - 11500 ) <nl> * Better tolerate improperly formatted bcrypt hashes ( CASSANDRA - 13626 ) <nl> * Fix race condition in read command serialization ( CASSANDRA - 13363 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 183176c . . 983d6b1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 2415 , 7 + 2415 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> long allColumns = 0 ; <nl> int localTime = ( int ) ( System . currentTimeMillis ( ) / 1000 ) ; <nl> <nl> - for ( SSTableReader sstable : getSSTables ( SSTableSet . LIVE ) ) <nl> + for ( SSTableReader sstable : getSSTables ( SSTableSet . CANONICAL ) ) <nl> { <nl> allDroppable + = sstable . getDroppableTombstonesBefore ( localTime - sstable . metadata . params . gcGraceSeconds ) ; <nl> allColumns + = sstable . getEstimatedColumnCount ( ) . mean ( ) * sstable . getEstimatedColumnCount ( ) . count ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java b / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java <nl> index 3b13cf4 . . 487a932 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java <nl> @ @ - 59 , 9 + 59 , 9 @ @ public class MetadataCollector implements PartitionStatisticsCollector <nl> return new EstimatedHistogram ( 150 ) ; <nl> } <nl> <nl> - static StreamingHistogram defaultTombstoneDropTimeHistogram ( ) <nl> + static StreamingHistogram . StreamingHistogramBuilder defaultTombstoneDropTimeHistogramBuilder ( ) <nl> { <nl> - return new StreamingHistogram ( SSTable . TOMBSTONE _ HISTOGRAM _ BIN _ SIZE , SSTable . TOMBSTONE _ HISTOGRAM _ SPOOL _ SIZE , SSTable . TOMBSTONE _ HISTOGRAM _ TTL _ ROUND _ SECONDS ) ; <nl> + return new StreamingHistogram . StreamingHistogramBuilder ( SSTable . TOMBSTONE _ HISTOGRAM _ BIN _ SIZE , SSTable . TOMBSTONE _ HISTOGRAM _ SPOOL _ SIZE , SSTable . TOMBSTONE _ HISTOGRAM _ TTL _ ROUND _ SECONDS ) ; <nl> } <nl> <nl> public static StatsMetadata defaultStatsMetadata ( ) <nl> @ @ - 76 , 7 + 76 , 7 @ @ public class MetadataCollector implements PartitionStatisticsCollector <nl> 0 , <nl> Integer . MAX _ VALUE , <nl> NO _ COMPRESSION _ RATIO , <nl> - defaultTombstoneDropTimeHistogram ( ) , <nl> + defaultTombstoneDropTimeHistogramBuilder ( ) . build ( ) , <nl> 0 , <nl> Collections . < ByteBuffer > emptyList ( ) , <nl> Collections . < ByteBuffer > emptyList ( ) , <nl> @ @ - 94 , 7 + 94 , 7 @ @ public class MetadataCollector implements PartitionStatisticsCollector <nl> protected final MinMaxIntTracker localDeletionTimeTracker = new MinMaxIntTracker ( Cell . NO _ DELETION _ TIME , Cell . NO _ DELETION _ TIME ) ; <nl> protected final MinMaxIntTracker ttlTracker = new MinMaxIntTracker ( Cell . NO _ TTL , Cell . NO _ TTL ) ; <nl> protected double compressionRatio = NO _ COMPRESSION _ RATIO ; <nl> - protected StreamingHistogram estimatedTombstoneDropTime = defaultTombstoneDropTimeHistogram ( ) ; <nl> + protected StreamingHistogram . StreamingHistogramBuilder estimatedTombstoneDropTime = defaultTombstoneDropTimeHistogramBuilder ( ) ; <nl> protected int sstableLevel ; <nl> protected ByteBuffer [ ] minClusteringValues ; <nl> protected ByteBuffer [ ] maxClusteringValues ; <nl> @ @ - 292 , 7 + 292 , 7 @ @ public class MetadataCollector implements PartitionStatisticsCollector <nl> ttlTracker . min ( ) , <nl> ttlTracker . max ( ) , <nl> compressionRatio , <nl> - estimatedTombstoneDropTime , <nl> + estimatedTombstoneDropTime . build ( ) , <nl> sstableLevel , <nl> makeList ( minClusteringValues ) , <nl> makeList ( maxClusteringValues ) , <nl> diff - - git a / src / java / org / apache / cassandra / utils / StreamingHistogram . java b / src / java / org / apache / cassandra / utils / StreamingHistogram . java <nl> index f1752a9 . . 6500a1a 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / StreamingHistogram . java <nl> + + + b / src / java / org / apache / cassandra / utils / StreamingHistogram . java <nl> @ @ - 40 , 145 + 40 , 12 @ @ public class StreamingHistogram <nl> <nl> / / TreeMap to hold bins of histogram . <nl> private final TreeMap < Double , Long > bin ; <nl> - <nl> - / / Keep a second , larger buffer to spool data in , before finalizing it into ` bin ` <nl> - private final TreeMap < Double , Long > spool ; <nl> - <nl> - / / maximum bin size for this histogram <nl> private final int maxBinSize ; <nl> <nl> - / / maximum size of the spool <nl> - private final int maxSpoolSize ; <nl> - <nl> - / / voluntarily give up resolution for speed <nl> - private final int roundSeconds ; <nl> - <nl> - / * * <nl> - * Creates a new histogram with max bin size of maxBinSize <nl> - * @ param maxBinSize maximum number of bins this histogram can have <nl> - * / <nl> - public StreamingHistogram ( int maxBinSize , int maxSpoolSize , int roundSeconds ) <nl> + private StreamingHistogram ( int maxBinSize , Map < Double , Long > bin ) <nl> { <nl> this . maxBinSize = maxBinSize ; <nl> - this . maxSpoolSize = maxSpoolSize ; <nl> - this . roundSeconds = roundSeconds ; <nl> - bin = new TreeMap < > ( ) ; <nl> - spool = new TreeMap < > ( ) ; <nl> - } <nl> - <nl> - private StreamingHistogram ( int maxBinSize , int maxSpoolSize , int roundSeconds , Map < Double , Long > bin ) <nl> - { <nl> - this . maxBinSize = maxBinSize ; <nl> - this . maxSpoolSize = maxSpoolSize ; <nl> - this . roundSeconds = roundSeconds ; <nl> this . bin = new TreeMap < > ( bin ) ; <nl> - this . spool = new TreeMap < > ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Adds new point p to this histogram . <nl> - * @ param p <nl> - * / <nl> - public void update ( double p ) <nl> - { <nl> - update ( p , 1 ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Adds new point p with value m to this histogram . <nl> - * @ param p <nl> - * @ param m <nl> - * / <nl> - public void update ( double p , long m ) <nl> - { <nl> - double d = p % this . roundSeconds ; <nl> - if ( d > 0 ) <nl> - p = p + ( this . roundSeconds - d ) ; <nl> - <nl> - Long mi = spool . get ( p ) ; <nl> - if ( mi ! = null ) <nl> - { <nl> - / / we found the same p so increment that counter <nl> - spool . put ( p , mi + m ) ; <nl> - } <nl> - else <nl> - { <nl> - spool . put ( p , m ) ; <nl> - } <nl> - if ( spool . size ( ) > maxSpoolSize ) <nl> - flushHistogram ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Drain the temporary spool into the final bins <nl> - * / <nl> - public void flushHistogram ( ) <nl> - { <nl> - if ( spool . size ( ) > 0 ) <nl> - { <nl> - Long spoolValue ; <nl> - Long binValue ; <nl> - <nl> - / / Iterate over the spool , copying the value into the primary bin map <nl> - / / and compacting that map as necessary <nl> - for ( Map . Entry < Double , Long > entry : spool . entrySet ( ) ) <nl> - { <nl> - Double key = entry . getKey ( ) ; <nl> - spoolValue = entry . getValue ( ) ; <nl> - binValue = bin . get ( key ) ; <nl> - <nl> - if ( binValue ! = null ) <nl> - { <nl> - binValue + = spoolValue ; <nl> - bin . put ( key , binValue ) ; <nl> - } else <nl> - { <nl> - bin . put ( key , spoolValue ) ; <nl> - } <nl> - <nl> - / / if bin size exceeds maximum bin size then trim down to max size <nl> - if ( bin . size ( ) > maxBinSize ) <nl> - { <nl> - / / find points p1 , p2 which have smallest difference <nl> - Iterator < Double > keys = bin . keySet ( ) . iterator ( ) ; <nl> - double p1 = keys . next ( ) ; <nl> - double p2 = keys . next ( ) ; <nl> - double smallestDiff = p2 - p1 ; <nl> - double q1 = p1 , q2 = p2 ; <nl> - while ( keys . hasNext ( ) ) { <nl> - p1 = p2 ; <nl> - p2 = keys . next ( ) ; <nl> - double diff = p2 - p1 ; <nl> - if ( diff < smallestDiff ) { <nl> - smallestDiff = diff ; <nl> - q1 = p1 ; <nl> - q2 = p2 ; <nl> - } <nl> - } <nl> - / / merge those two <nl> - long k1 = bin . remove ( q1 ) ; <nl> - long k2 = bin . remove ( q2 ) ; <nl> - bin . put ( ( q1 * k1 + q2 * k2 ) / ( k1 + k2 ) , k1 + k2 ) ; <nl> - } <nl> - } <nl> - spool . clear ( ) ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * Merges given histogram with this histogram . <nl> - * <nl> - * @ param other histogram to merge <nl> - * / <nl> - public void merge ( StreamingHistogram other ) <nl> - { <nl> - if ( other = = null ) <nl> - return ; <nl> - <nl> - flushHistogram ( ) ; <nl> - <nl> - for ( Map . Entry < Double , Long > entry : other . getAsMap ( ) . entrySet ( ) ) <nl> - update ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 189 , 7 + 56 , 6 @ @ public class StreamingHistogram <nl> * / <nl> public double sum ( double b ) <nl> { <nl> - flushHistogram ( ) ; <nl> double sum = 0 ; <nl> / / find the points pi , pnext which satisfy pi < = b < pnext <nl> Map . Entry < Double , Long > pnext = bin . higherEntry ( b ) ; <nl> @ @ - 219 , 10 + 85 , 150 @ @ public class StreamingHistogram <nl> <nl> public Map < Double , Long > getAsMap ( ) <nl> { <nl> - flushHistogram ( ) ; <nl> return Collections . unmodifiableMap ( bin ) ; <nl> } <nl> <nl> + public static class StreamingHistogramBuilder <nl> + { <nl> + / / TreeMap to hold bins of histogram . <nl> + private final TreeMap < Double , Long > bin ; <nl> + <nl> + / / Keep a second , larger buffer to spool data in , before finalizing it into ` bin ` <nl> + private final TreeMap < Double , Long > spool ; <nl> + <nl> + / / maximum bin size for this histogram <nl> + private final int maxBinSize ; <nl> + <nl> + / / maximum size of the spool <nl> + private final int maxSpoolSize ; <nl> + <nl> + / / voluntarily give up resolution for speed <nl> + private final int roundSeconds ; <nl> + / * * <nl> + * Creates a new histogram with max bin size of maxBinSize <nl> + * @ param maxBinSize maximum number of bins this histogram can have <nl> + * / <nl> + public StreamingHistogramBuilder ( int maxBinSize , int maxSpoolSize , int roundSeconds ) <nl> + { <nl> + this . maxBinSize = maxBinSize ; <nl> + this . maxSpoolSize = maxSpoolSize ; <nl> + this . roundSeconds = roundSeconds ; <nl> + bin = new TreeMap < > ( ) ; <nl> + spool = new TreeMap < > ( ) ; <nl> + } <nl> + <nl> + public StreamingHistogram build ( ) <nl> + { <nl> + flushHistogram ( ) ; <nl> + return new StreamingHistogram ( maxBinSize , bin ) ; <nl> + } <nl> + / * * <nl> + * Adds new point p to this histogram . <nl> + * @ param p <nl> + * / <nl> + public void update ( double p ) <nl> + { <nl> + update ( p , 1 ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Adds new point p with value m to this histogram . <nl> + * @ param p <nl> + * @ param m <nl> + * / <nl> + public void update ( double p , long m ) <nl> + { <nl> + double d = p % this . roundSeconds ; <nl> + if ( d > 0 ) <nl> + p = p + ( this . roundSeconds - d ) ; <nl> + <nl> + Long mi = spool . get ( p ) ; <nl> + if ( mi ! = null ) <nl> + { <nl> + / / we found the same p so increment that counter <nl> + spool . put ( p , mi + m ) ; <nl> + } <nl> + else <nl> + { <nl> + spool . put ( p , m ) ; <nl> + } <nl> + if ( spool . size ( ) > maxSpoolSize ) <nl> + flushHistogram ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Drain the temporary spool into the final bins <nl> + * / <nl> + public void flushHistogram ( ) <nl> + { <nl> + if ( spool . size ( ) > 0 ) <nl> + { <nl> + Long spoolValue ; <nl> + Long binValue ; <nl> + <nl> + / / Iterate over the spool , copying the value into the primary bin map <nl> + / / and compacting that map as necessary <nl> + for ( Map . Entry < Double , Long > entry : spool . entrySet ( ) ) <nl> + { <nl> + Double key = entry . getKey ( ) ; <nl> + spoolValue = entry . getValue ( ) ; <nl> + binValue = bin . get ( key ) ; <nl> + <nl> + if ( binValue ! = null ) <nl> + { <nl> + binValue + = spoolValue ; <nl> + bin . put ( key , binValue ) ; <nl> + } else <nl> + { <nl> + bin . put ( key , spoolValue ) ; <nl> + } <nl> + <nl> + / / if bin size exceeds maximum bin size then trim down to max size <nl> + if ( bin . size ( ) > maxBinSize ) <nl> + { <nl> + / / find points p1 , p2 which have smallest difference <nl> + Iterator < Double > keys = bin . keySet ( ) . iterator ( ) ; <nl> + double p1 = keys . next ( ) ; <nl> + double p2 = keys . next ( ) ; <nl> + double smallestDiff = p2 - p1 ; <nl> + double q1 = p1 , q2 = p2 ; <nl> + while ( keys . hasNext ( ) ) { <nl> + p1 = p2 ; <nl> + p2 = keys . next ( ) ; <nl> + double diff = p2 - p1 ; <nl> + if ( diff < smallestDiff ) { <nl> + smallestDiff = diff ; <nl> + q1 = p1 ; <nl> + q2 = p2 ; <nl> + } <nl> + } <nl> + / / merge those two <nl> + long k1 = bin . remove ( q1 ) ; <nl> + long k2 = bin . remove ( q2 ) ; <nl> + bin . put ( ( q1 * k1 + q2 * k2 ) / ( k1 + k2 ) , k1 + k2 ) ; <nl> + } <nl> + } <nl> + spool . clear ( ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Merges given histogram with this histogram . <nl> + * <nl> + * @ param other histogram to merge <nl> + * / <nl> + public void merge ( StreamingHistogram other ) <nl> + { <nl> + if ( other = = null ) <nl> + return ; <nl> + <nl> + flushHistogram ( ) ; <nl> + <nl> + for ( Map . Entry < Double , Long > entry : other . getAsMap ( ) . entrySet ( ) ) <nl> + update ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> + } <nl> + } <nl> + <nl> public static class StreamingHistogramSerializer implements ISerializer < StreamingHistogram > <nl> { <nl> public void serialize ( StreamingHistogram histogram , DataOutputPlus out ) throws IOException <nl> @ @ - 247 , 7 + 253 , 7 @ @ public class StreamingHistogram <nl> tmp . put ( in . readDouble ( ) , in . readLong ( ) ) ; <nl> } <nl> <nl> - return new StreamingHistogram ( maxBinSize , maxBinSize , 1 , tmp ) ; <nl> + return new StreamingHistogram ( maxBinSize , tmp ) ; <nl> } <nl> <nl> public long serializedSize ( StreamingHistogram histogram ) <nl> @ @ - 272 , 14 + 278 , 12 @ @ public class StreamingHistogram <nl> <nl> StreamingHistogram that = ( StreamingHistogram ) o ; <nl> return maxBinSize = = that . maxBinSize <nl> - & & spool . equals ( that . spool ) <nl> & & bin . equals ( that . bin ) ; <nl> } <nl> <nl> @ Override <nl> public int hashCode ( ) <nl> { <nl> - return Objects . hashCode ( bin . hashCode ( ) , spool . hashCode ( ) , maxBinSize ) ; <nl> + return Objects . hashCode ( bin . hashCode ( ) , maxBinSize ) ; <nl> } <nl> - <nl> } <nl> diff - - git a / test / microbench / org / apache / cassandra / test / microbench / StreamingHistogramBench . java b / test / microbench / org / apache / cassandra / test / microbench / StreamingHistogramBench . java <nl> index 23e8f4e . . c1ecf6d 100644 <nl> - - - a / test / microbench / org / apache / cassandra / test / microbench / StreamingHistogramBench . java <nl> + + + b / test / microbench / org / apache / cassandra / test / microbench / StreamingHistogramBench . java <nl> @ @ - 36 , 39 + 36 , 38 @ @ import org . openjdk . jmh . annotations . * ; <nl> @ State ( Scope . Benchmark ) <nl> public class StreamingHistogramBench <nl> { <nl> - <nl> - StreamingHistogram streamingHistogram ; <nl> - StreamingHistogram newStreamingHistogram ; <nl> - StreamingHistogram newStreamingHistogram2 ; <nl> - StreamingHistogram newStreamingHistogram3 ; <nl> - StreamingHistogram newStreamingHistogram4 ; <nl> - StreamingHistogram newStreamingHistogram5 ; <nl> - StreamingHistogram newStreamingHistogram6 ; <nl> - StreamingHistogram streamingHistogram60 ; <nl> - StreamingHistogram newStreamingHistogram60 ; <nl> - StreamingHistogram newStreamingHistogram100x60 ; <nl> - <nl> - StreamingHistogram narrowstreamingHistogram ; <nl> - StreamingHistogram narrownewStreamingHistogram ; <nl> - StreamingHistogram narrownewStreamingHistogram2 ; <nl> - StreamingHistogram narrownewStreamingHistogram3 ; <nl> - StreamingHistogram narrownewStreamingHistogram4 ; <nl> - StreamingHistogram narrownewStreamingHistogram5 ; <nl> - StreamingHistogram narrownewStreamingHistogram6 ; <nl> - StreamingHistogram narrownewStreamingHistogram60 ; <nl> - StreamingHistogram narrowstreamingHistogram60 ; <nl> - StreamingHistogram narrownewStreamingHistogram100x60 ; <nl> - <nl> - StreamingHistogram sparsestreamingHistogram ; <nl> - StreamingHistogram sparsenewStreamingHistogram ; <nl> - StreamingHistogram sparsenewStreamingHistogram2 ; <nl> - StreamingHistogram sparsenewStreamingHistogram3 ; <nl> - StreamingHistogram sparsenewStreamingHistogram4 ; <nl> - StreamingHistogram sparsenewStreamingHistogram5 ; <nl> - StreamingHistogram sparsenewStreamingHistogram6 ; <nl> - StreamingHistogram sparsestreamingHistogram60 ; <nl> - StreamingHistogram sparsenewStreamingHistogram60 ; <nl> - StreamingHistogram sparsenewStreamingHistogram100x60 ; <nl> + StreamingHistogram . StreamingHistogramBuilder streamingHistogram ; <nl> + StreamingHistogram . StreamingHistogramBuilder newStreamingHistogram ; <nl> + StreamingHistogram . StreamingHistogramBuilder newStreamingHistogram2 ; <nl> + StreamingHistogram . StreamingHistogramBuilder newStreamingHistogram3 ; <nl> + StreamingHistogram . StreamingHistogramBuilder newStreamingHistogram4 ; <nl> + StreamingHistogram . StreamingHistogramBuilder newStreamingHistogram5 ; <nl> + StreamingHistogram . StreamingHistogramBuilder newStreamingHistogram6 ; <nl> + StreamingHistogram . StreamingHistogramBuilder streamingHistogram60 ; <nl> + StreamingHistogram . StreamingHistogramBuilder newStreamingHistogram60 ; <nl> + StreamingHistogram . StreamingHistogramBuilder newStreamingHistogram100x60 ; <nl> + <nl> + StreamingHistogram . StreamingHistogramBuilder narrowstreamingHistogram ; <nl> + StreamingHistogram . StreamingHistogramBuilder narrownewStreamingHistogram ; <nl> + StreamingHistogram . StreamingHistogramBuilder narrownewStreamingHistogram2 ; <nl> + StreamingHistogram . StreamingHistogramBuilder narrownewStreamingHistogram3 ; <nl> + StreamingHistogram . StreamingHistogramBuilder narrownewStreamingHistogram4 ; <nl> + StreamingHistogram . StreamingHistogramBuilder narrownewStreamingHistogram5 ; <nl> + StreamingHistogram . StreamingHistogramBuilder narrownewStreamingHistogram6 ; <nl> + StreamingHistogram . StreamingHistogramBuilder narrownewStreamingHistogram60 ; <nl> + StreamingHistogram . StreamingHistogramBuilder narrowstreamingHistogram60 ; <nl> + StreamingHistogram . StreamingHistogramBuilder narrownewStreamingHistogram100x60 ; <nl> + <nl> + StreamingHistogram . StreamingHistogramBuilder sparsestreamingHistogram ; <nl> + StreamingHistogram . StreamingHistogramBuilder sparsenewStreamingHistogram ; <nl> + StreamingHistogram . StreamingHistogramBuilder sparsenewStreamingHistogram2 ; <nl> + StreamingHistogram . StreamingHistogramBuilder sparsenewStreamingHistogram3 ; <nl> + StreamingHistogram . StreamingHistogramBuilder sparsenewStreamingHistogram4 ; <nl> + StreamingHistogram . StreamingHistogramBuilder sparsenewStreamingHistogram5 ; <nl> + StreamingHistogram . StreamingHistogramBuilder sparsenewStreamingHistogram6 ; <nl> + StreamingHistogram . StreamingHistogramBuilder sparsestreamingHistogram60 ; <nl> + StreamingHistogram . StreamingHistogramBuilder sparsenewStreamingHistogram60 ; <nl> + StreamingHistogram . StreamingHistogramBuilder sparsenewStreamingHistogram100x60 ; <nl> <nl> static int [ ] ttls = new int [ 10000000 ] ; <nl> static int [ ] narrowttls = new int [ 10000000 ] ; <nl> @ @ - 91 , 39 + 90 , 39 @ @ public class StreamingHistogramBench <nl> public void setup ( ) throws Throwable <nl> { <nl> <nl> - streamingHistogram = new StreamingHistogram ( 100 , 0 , 1 ) ; <nl> - newStreamingHistogram = new StreamingHistogram ( 100 , 1000 , 1 ) ; <nl> - newStreamingHistogram2 = new StreamingHistogram ( 100 , 10000 , 1 ) ; <nl> - newStreamingHistogram3 = new StreamingHistogram ( 100 , 100000 , 1 ) ; <nl> - newStreamingHistogram4 = new StreamingHistogram ( 50 , 100000 , 1 ) ; <nl> - newStreamingHistogram5 = new StreamingHistogram ( 50 , 10000 , 1 ) ; <nl> - newStreamingHistogram6 = new StreamingHistogram ( 100 , 1000000 , 1 ) ; <nl> - streamingHistogram60 = new StreamingHistogram ( 100 , 0 , 60 ) ; <nl> - newStreamingHistogram60 = new StreamingHistogram ( 100 , 100000 , 60 ) ; <nl> - newStreamingHistogram100x60 = new StreamingHistogram ( 100 , 10000 , 60 ) ; <nl> - <nl> - narrowstreamingHistogram = new StreamingHistogram ( 100 , 0 , 1 ) ; <nl> - narrownewStreamingHistogram = new StreamingHistogram ( 100 , 1000 , 1 ) ; <nl> - narrownewStreamingHistogram2 = new StreamingHistogram ( 100 , 10000 , 1 ) ; <nl> - narrownewStreamingHistogram3 = new StreamingHistogram ( 100 , 100000 , 1 ) ; <nl> - narrownewStreamingHistogram4 = new StreamingHistogram ( 50 , 100000 , 1 ) ; <nl> - narrownewStreamingHistogram5 = new StreamingHistogram ( 50 , 10000 , 1 ) ; <nl> - narrownewStreamingHistogram6 = new StreamingHistogram ( 100 , 1000000 , 1 ) ; <nl> - narrowstreamingHistogram60 = new StreamingHistogram ( 100 , 0 , 60 ) ; <nl> - narrownewStreamingHistogram60 = new StreamingHistogram ( 100 , 100000 , 60 ) ; <nl> - narrownewStreamingHistogram100x60 = new StreamingHistogram ( 100 , 10000 , 60 ) ; <nl> - <nl> - <nl> - sparsestreamingHistogram = new StreamingHistogram ( 100 , 0 , 1 ) ; <nl> - sparsenewStreamingHistogram = new StreamingHistogram ( 100 , 1000 , 1 ) ; <nl> - sparsenewStreamingHistogram2 = new StreamingHistogram ( 100 , 10000 , 1 ) ; <nl> - sparsenewStreamingHistogram3 = new StreamingHistogram ( 100 , 100000 , 1 ) ; <nl> - sparsenewStreamingHistogram4 = new StreamingHistogram ( 50 , 100000 , 1 ) ; <nl> - sparsenewStreamingHistogram5 = new StreamingHistogram ( 50 , 10000 , 1 ) ; <nl> - sparsenewStreamingHistogram6 = new StreamingHistogram ( 100 , 1000000 , 1 ) ; <nl> - sparsestreamingHistogram60 = new StreamingHistogram ( 100 , 0 , 60 ) ; <nl> - sparsenewStreamingHistogram60 = new StreamingHistogram ( 100 , 100000 , 60 ) ; <nl> - sparsenewStreamingHistogram100x60 = new StreamingHistogram ( 100 , 10000 , 60 ) ; <nl> + streamingHistogram = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 0 , 1 ) ; <nl> + newStreamingHistogram = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 1000 , 1 ) ; <nl> + newStreamingHistogram2 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 10000 , 1 ) ; <nl> + newStreamingHistogram3 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 100000 , 1 ) ; <nl> + newStreamingHistogram4 = new StreamingHistogram . StreamingHistogramBuilder ( 50 , 100000 , 1 ) ; <nl> + newStreamingHistogram5 = new StreamingHistogram . StreamingHistogramBuilder ( 50 , 10000 , 1 ) ; <nl> + newStreamingHistogram6 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 1000000 , 1 ) ; <nl> + streamingHistogram60 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 0 , 60 ) ; <nl> + newStreamingHistogram60 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 100000 , 60 ) ; <nl> + newStreamingHistogram100x60 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 10000 , 60 ) ; <nl> + <nl> + narrowstreamingHistogram = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 0 , 1 ) ; <nl> + narrownewStreamingHistogram = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 1000 , 1 ) ; <nl> + narrownewStreamingHistogram2 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 10000 , 1 ) ; <nl> + narrownewStreamingHistogram3 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 100000 , 1 ) ; <nl> + narrownewStreamingHistogram4 = new StreamingHistogram . StreamingHistogramBuilder ( 50 , 100000 , 1 ) ; <nl> + narrownewStreamingHistogram5 = new StreamingHistogram . StreamingHistogramBuilder ( 50 , 10000 , 1 ) ; <nl> + narrownewStreamingHistogram6 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 1000000 , 1 ) ; <nl> + narrowstreamingHistogram60 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 0 , 60 ) ; <nl> + narrownewStreamingHistogram60 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 100000 , 60 ) ; <nl> + narrownewStreamingHistogram100x60 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 10000 , 60 ) ; <nl> + <nl> + <nl> + sparsestreamingHistogram = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 0 , 1 ) ; <nl> + sparsenewStreamingHistogram = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 1000 , 1 ) ; <nl> + sparsenewStreamingHistogram2 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 10000 , 1 ) ; <nl> + sparsenewStreamingHistogram3 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 100000 , 1 ) ; <nl> + sparsenewStreamingHistogram4 = new StreamingHistogram . StreamingHistogramBuilder ( 50 , 100000 , 1 ) ; <nl> + sparsenewStreamingHistogram5 = new StreamingHistogram . StreamingHistogramBuilder ( 50 , 10000 , 1 ) ; <nl> + sparsenewStreamingHistogram6 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 1000000 , 1 ) ; <nl> + sparsestreamingHistogram60 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 0 , 60 ) ; <nl> + sparsenewStreamingHistogram60 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 100000 , 60 ) ; <nl> + sparsenewStreamingHistogram100x60 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 10000 , 60 ) ; <nl> <nl> } <nl> <nl> @ @ - 138 , 7 + 137 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> streamingHistogram . update ( ttls [ i ] ) ; <nl> - streamingHistogram . flushHistogram ( ) ; <nl> + streamingHistogram . build ( ) ; <nl> } <nl> <nl> @ Benchmark <nl> @ @ - 146 , 7 + 145 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> newStreamingHistogram . update ( ttls [ i ] ) ; <nl> - newStreamingHistogram . flushHistogram ( ) ; <nl> + newStreamingHistogram . build ( ) ; <nl> <nl> } <nl> <nl> @ @ - 155 , 7 + 154 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> newStreamingHistogram2 . update ( ttls [ i ] ) ; <nl> - newStreamingHistogram2 . flushHistogram ( ) ; <nl> + newStreamingHistogram2 . build ( ) ; <nl> <nl> } <nl> <nl> @ @ - 164 , 7 + 163 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> newStreamingHistogram3 . update ( ttls [ i ] ) ; <nl> - newStreamingHistogram3 . flushHistogram ( ) ; <nl> + newStreamingHistogram3 . build ( ) ; <nl> <nl> } <nl> <nl> @ @ - 173 , 7 + 172 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> newStreamingHistogram6 . update ( ttls [ i ] ) ; <nl> - newStreamingHistogram6 . flushHistogram ( ) ; <nl> + newStreamingHistogram6 . build ( ) ; <nl> <nl> } <nl> <nl> @ @ - 183 , 7 + 182 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> newStreamingHistogram4 . update ( ttls [ i ] ) ; <nl> - newStreamingHistogram4 . flushHistogram ( ) ; <nl> + newStreamingHistogram4 . build ( ) ; <nl> <nl> } <nl> <nl> @ @ - 192 , 7 + 191 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> newStreamingHistogram5 . update ( ttls [ i ] ) ; <nl> - newStreamingHistogram5 . flushHistogram ( ) ; <nl> + newStreamingHistogram5 . build ( ) ; <nl> <nl> } <nl> <nl> @ @ - 201 , 7 + 200 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> streamingHistogram60 . update ( sparsettls [ i ] ) ; <nl> - streamingHistogram60 . flushHistogram ( ) ; <nl> + streamingHistogram60 . build ( ) ; <nl> <nl> } <nl> <nl> @ @ - 210 , 7 + 209 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> newStreamingHistogram60 . update ( sparsettls [ i ] ) ; <nl> - newStreamingHistogram60 . flushHistogram ( ) ; <nl> + newStreamingHistogram60 . build ( ) ; <nl> } <nl> <nl> @ Benchmark <nl> @ @ - 218 , 7 + 217 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> newStreamingHistogram100x60 . update ( sparsettls [ i ] ) ; <nl> - newStreamingHistogram100x60 . flushHistogram ( ) ; <nl> + newStreamingHistogram100x60 . build ( ) ; <nl> } <nl> <nl> <nl> @ @ - 227 , 7 + 226 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> narrowstreamingHistogram . update ( narrowttls [ i ] ) ; <nl> - narrowstreamingHistogram . flushHistogram ( ) ; <nl> + narrowstreamingHistogram . build ( ) ; <nl> } <nl> <nl> @ Benchmark <nl> @ @ - 235 , 7 + 234 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> narrownewStreamingHistogram . update ( narrowttls [ i ] ) ; <nl> - narrownewStreamingHistogram . flushHistogram ( ) ; <nl> + narrownewStreamingHistogram . build ( ) ; <nl> <nl> } <nl> <nl> @ @ - 244 , 7 + 243 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> narrownewStreamingHistogram2 . update ( narrowttls [ i ] ) ; <nl> - narrownewStreamingHistogram2 . flushHistogram ( ) ; <nl> + narrownewStreamingHistogram2 . build ( ) ; <nl> <nl> } <nl> <nl> @ @ - 253 , 7 + 252 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> narrownewStreamingHistogram3 . update ( narrowttls [ i ] ) ; <nl> - narrownewStreamingHistogram3 . flushHistogram ( ) ; <nl> + narrownewStreamingHistogram3 . build ( ) ; <nl> <nl> } <nl> <nl> @ @ - 262 , 7 + 261 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> narrownewStreamingHistogram6 . update ( ttls [ i ] ) ; <nl> - narrownewStreamingHistogram6 . flushHistogram ( ) ; <nl> + narrownewStreamingHistogram6 . build ( ) ; <nl> <nl> } <nl> <nl> @ @ - 272 , 7 + 271 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> narrownewStreamingHistogram4 . update ( narrowttls [ i ] ) ; <nl> - narrownewStreamingHistogram4 . flushHistogram ( ) ; <nl> + narrownewStreamingHistogram4 . build ( ) ; <nl> <nl> } <nl> <nl> @ @ - 281 , 7 + 280 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> narrownewStreamingHistogram5 . update ( narrowttls [ i ] ) ; <nl> - narrownewStreamingHistogram5 . flushHistogram ( ) ; <nl> + narrownewStreamingHistogram5 . build ( ) ; <nl> <nl> } <nl> <nl> @ @ - 290 , 7 + 289 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> narrowstreamingHistogram60 . update ( sparsettls [ i ] ) ; <nl> - narrowstreamingHistogram60 . flushHistogram ( ) ; <nl> + narrowstreamingHistogram60 . build ( ) ; <nl> <nl> } <nl> <nl> @ @ - 299 , 7 + 298 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> narrownewStreamingHistogram60 . update ( sparsettls [ i ] ) ; <nl> - narrownewStreamingHistogram60 . flushHistogram ( ) ; <nl> + narrownewStreamingHistogram60 . build ( ) ; <nl> <nl> } <nl> <nl> @ @ - 308 , 7 + 307 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> narrownewStreamingHistogram100x60 . update ( sparsettls [ i ] ) ; <nl> - narrownewStreamingHistogram100x60 . flushHistogram ( ) ; <nl> + narrownewStreamingHistogram100x60 . build ( ) ; <nl> <nl> } <nl> <nl> @ @ - 318 , 7 + 317 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> sparsestreamingHistogram . update ( sparsettls [ i ] ) ; <nl> - sparsestreamingHistogram . flushHistogram ( ) ; <nl> + sparsestreamingHistogram . build ( ) ; <nl> } <nl> <nl> @ Benchmark <nl> @ @ - 326 , 7 + 325 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> sparsenewStreamingHistogram . update ( sparsettls [ i ] ) ; <nl> - sparsenewStreamingHistogram . flushHistogram ( ) ; <nl> + sparsenewStreamingHistogram . build ( ) ; <nl> <nl> } <nl> <nl> @ @ - 335 , 7 + 334 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> sparsenewStreamingHistogram2 . update ( sparsettls [ i ] ) ; <nl> - sparsenewStreamingHistogram2 . flushHistogram ( ) ; <nl> + sparsenewStreamingHistogram2 . build ( ) ; <nl> <nl> } <nl> <nl> @ @ - 344 , 7 + 343 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> sparsenewStreamingHistogram3 . update ( sparsettls [ i ] ) ; <nl> - sparsenewStreamingHistogram3 . flushHistogram ( ) ; <nl> + sparsenewStreamingHistogram3 . build ( ) ; <nl> <nl> } <nl> <nl> @ @ - 353 , 7 + 352 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> sparsenewStreamingHistogram6 . update ( ttls [ i ] ) ; <nl> - sparsenewStreamingHistogram6 . flushHistogram ( ) ; <nl> + sparsenewStreamingHistogram6 . build ( ) ; <nl> } <nl> <nl> <nl> @ @ - 362 , 7 + 361 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> sparsenewStreamingHistogram4 . update ( sparsettls [ i ] ) ; <nl> - sparsenewStreamingHistogram4 . flushHistogram ( ) ; <nl> + sparsenewStreamingHistogram4 . build ( ) ; <nl> <nl> } <nl> <nl> @ @ - 371 , 7 + 370 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> sparsenewStreamingHistogram5 . update ( sparsettls [ i ] ) ; <nl> - sparsenewStreamingHistogram5 . flushHistogram ( ) ; <nl> + sparsenewStreamingHistogram5 . build ( ) ; <nl> <nl> } <nl> <nl> @ @ - 380 , 7 + 379 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> sparsestreamingHistogram60 . update ( sparsettls [ i ] ) ; <nl> - sparsestreamingHistogram60 . flushHistogram ( ) ; <nl> + sparsestreamingHistogram60 . build ( ) ; <nl> <nl> } <nl> <nl> @ @ - 389 , 7 + 388 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> sparsenewStreamingHistogram60 . update ( sparsettls [ i ] ) ; <nl> - sparsenewStreamingHistogram60 . flushHistogram ( ) ; <nl> + sparsenewStreamingHistogram60 . build ( ) ; <nl> <nl> } <nl> <nl> @ @ - 398 , 8 + 397 , 7 @ @ public class StreamingHistogramBench <nl> { <nl> for ( int i = 0 ; i < ttls . length ; i + + ) <nl> sparsenewStreamingHistogram100x60 . update ( sparsettls [ i ] ) ; <nl> - sparsenewStreamingHistogram100x60 . flushHistogram ( ) ; <nl> + sparsenewStreamingHistogram100x60 . build ( ) ; <nl> <nl> } <nl> - <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / utils / StreamingHistogramTest . java b / test / unit / org / apache / cassandra / utils / StreamingHistogramTest . java <nl> index 21c736e . . b107600 100644 <nl> - - - a / test / unit / org / apache / cassandra / utils / StreamingHistogramTest . java <nl> + + + b / test / unit / org / apache / cassandra / utils / StreamingHistogramTest . java <nl> @ @ - 32 , 7 + 32 , 7 @ @ public class StreamingHistogramTest <nl> @ Test <nl> public void testFunction ( ) throws Exception <nl> { <nl> - StreamingHistogram hist = new StreamingHistogram ( 5 , 5 , 1 ) ; <nl> + StreamingHistogram . StreamingHistogramBuilder hist = new StreamingHistogram . StreamingHistogramBuilder ( 5 , 5 , 1 ) ; <nl> long [ ] samples = new long [ ] { 23 , 19 , 10 , 16 , 36 , 2 , 9 , 32 , 30 , 45 } ; <nl> <nl> / / add 7 points to histogram of 5 bins <nl> @ @ - 50 , 7 + 50 , 7 @ @ public class StreamingHistogramTest <nl> expected1 . put ( 36 . 0 , 1L ) ; <nl> <nl> Iterator < Map . Entry < Double , Long > > expectedItr = expected1 . entrySet ( ) . iterator ( ) ; <nl> - for ( Map . Entry < Double , Long > actual : hist . getAsMap ( ) . entrySet ( ) ) <nl> + for ( Map . Entry < Double , Long > actual : hist . build ( ) . getAsMap ( ) . entrySet ( ) ) <nl> { <nl> Map . Entry < Double , Long > entry = expectedItr . next ( ) ; <nl> assertEquals ( entry . getKey ( ) , actual . getKey ( ) , 0 . 01 ) ; <nl> @ @ - 58 , 12 + 58 , 13 @ @ public class StreamingHistogramTest <nl> } <nl> <nl> / / merge test <nl> - StreamingHistogram hist2 = new StreamingHistogram ( 3 , 0 , 1 ) ; <nl> + StreamingHistogram . StreamingHistogramBuilder hist2 = new StreamingHistogram . StreamingHistogramBuilder ( 3 , 0 , 1 ) ; <nl> for ( int i = 7 ; i < samples . length ; i + + ) <nl> { <nl> hist2 . update ( samples [ i ] ) ; <nl> } <nl> - hist . merge ( hist2 ) ; <nl> + hist . merge ( hist2 . build ( ) ) ; <nl> + StreamingHistogram histBuilt = hist . build ( ) ; <nl> / / should end up ( 2 , 1 ) , ( 9 . 5 , 2 ) , ( 19 . 33 , 3 ) , ( 32 . 67 , 3 ) , ( 45 , 1 ) <nl> Map < Double , Long > expected2 = new LinkedHashMap < Double , Long > ( 5 ) ; <nl> expected2 . put ( 2 . 0 , 1L ) ; <nl> @ @ - 72 , 7 + 73 , 7 @ @ public class StreamingHistogramTest <nl> expected2 . put ( 32 . 67 , 3L ) ; <nl> expected2 . put ( 45 . 0 , 1L ) ; <nl> expectedItr = expected2 . entrySet ( ) . iterator ( ) ; <nl> - for ( Map . Entry < Double , Long > actual : hist . getAsMap ( ) . entrySet ( ) ) <nl> + for ( Map . Entry < Double , Long > actual : histBuilt . getAsMap ( ) . entrySet ( ) ) <nl> { <nl> Map . Entry < Double , Long > entry = expectedItr . next ( ) ; <nl> assertEquals ( entry . getKey ( ) , actual . getKey ( ) , 0 . 01 ) ; <nl> @ @ - 80 , 22 + 81 , 23 @ @ public class StreamingHistogramTest <nl> } <nl> <nl> / / sum test <nl> - assertEquals ( 3 . 28 , hist . sum ( 15 ) , 0 . 01 ) ; <nl> + assertEquals ( 3 . 28 , histBuilt . sum ( 15 ) , 0 . 01 ) ; <nl> / / sum test ( b > max ( hist ) ) <nl> - assertEquals ( 10 . 0 , hist . sum ( 50 ) , 0 . 01 ) ; <nl> + assertEquals ( 10 . 0 , histBuilt . sum ( 50 ) , 0 . 01 ) ; <nl> } <nl> <nl> @ Test <nl> public void testSerDe ( ) throws Exception <nl> { <nl> - StreamingHistogram hist = new StreamingHistogram ( 5 , 0 , 1 ) ; <nl> + StreamingHistogram . StreamingHistogramBuilder histogramBuilder = new StreamingHistogram . StreamingHistogramBuilder ( 5 , 0 , 1 ) ; <nl> long [ ] samples = new long [ ] { 23 , 19 , 10 , 16 , 36 , 2 , 9 } ; <nl> <nl> / / add 7 points to histogram of 5 bins <nl> for ( int i = 0 ; i < samples . length ; i + + ) <nl> { <nl> - hist . update ( samples [ i ] ) ; <nl> + histogramBuilder . update ( samples [ i ] ) ; <nl> } <nl> + StreamingHistogram hist = histogramBuilder . build ( ) ; <nl> <nl> DataOutputBuffer out = new DataOutputBuffer ( ) ; <nl> StreamingHistogram . serializer . serialize ( hist , out ) ; <nl> @ @ - 123 , 7 + 125 , 7 @ @ public class StreamingHistogramTest <nl> @ Test <nl> public void testOverflow ( ) throws Exception <nl> { <nl> - StreamingHistogram hist = new StreamingHistogram ( 5 , 10 , 1 ) ; <nl> + StreamingHistogram . StreamingHistogramBuilder histogramBuilder = new StreamingHistogram . StreamingHistogramBuilder ( 5 , 10 , 1 ) ; <nl> long [ ] samples = new long [ ] { 23 , 19 , 10 , 16 , 36 , 2 , 9 , 32 , 30 , 45 , 31 , <nl> 32 , 32 , 33 , 34 , 35 , 70 , 78 , 80 , 90 , 100 , <nl> 32 , 32 , 33 , 34 , 35 , 70 , 78 , 80 , 90 , 100 <nl> @ @ - 132 , 20 + 134 , 21 @ @ public class StreamingHistogramTest <nl> / / Hit the spool cap , force it to make bins <nl> for ( int i = 0 ; i < samples . length ; i + + ) <nl> { <nl> - hist . update ( samples [ i ] ) ; <nl> + histogramBuilder . update ( samples [ i ] ) ; <nl> } <nl> - assertEquals ( 5 , hist . getAsMap ( ) . keySet ( ) . size ( ) ) ; <nl> + assertEquals ( 5 , histogramBuilder . build ( ) . getAsMap ( ) . keySet ( ) . size ( ) ) ; <nl> <nl> } <nl> <nl> @ Test <nl> public void testRounding ( ) throws Exception <nl> { <nl> - StreamingHistogram hist = new StreamingHistogram ( 5 , 10 , 60 ) ; <nl> + StreamingHistogram . StreamingHistogramBuilder histogramBuilder = new StreamingHistogram . StreamingHistogramBuilder ( 5 , 10 , 60 ) ; <nl> long [ ] samples = new long [ ] { 59 , 60 , 119 , 180 , 181 , 300 } ; / / 60 , 60 , 120 , 180 , 240 , 300 <nl> for ( int i = 0 ; i < samples . length ; i + + ) <nl> - hist . update ( samples [ i ] ) ; <nl> + histogramBuilder . update ( samples [ i ] ) ; <nl> <nl> + StreamingHistogram hist = histogramBuilder . build ( ) ; <nl> assertEquals ( hist . getAsMap ( ) . keySet ( ) . size ( ) , ( int ) 5 ) ; <nl> assertEquals ( ( long ) hist . getAsMap ( ) . get ( Double . valueOf ( 60 ) ) , ( long ) 2L ) ; <nl> assertEquals ( ( long ) hist . getAsMap ( ) . get ( Double . valueOf ( 120 ) ) , ( long ) 1L ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 25c0217 . . 859e7f9 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 2 . 9 <nl> + * add - - migrate option to sstableupgrade and sstablescrub ( CASSANDRA - 5831 ) <nl> * fix bulk - loading compressed sstables ( CASSANDRA - 5820 ) <nl> * ( Hadoop ) fix quoting in CqlPagingRecordReader and CqlRecordWriter <nl> ( CASSANDRA - 5824 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / SystemTable . java b / src / java / org / apache / cassandra / db / SystemTable . java <nl> index 4c74df5 . . 318b34d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SystemTable . java <nl> + + + b / src / java / org / apache / cassandra / db / SystemTable . java <nl> @ @ - 147 , 6 + 147 , 7 @ @ public class SystemTable <nl> ColumnFamilyStore oldStatusCfs = table . getColumnFamilyStore ( OLD _ STATUS _ CF ) ; <nl> if ( oldStatusCfs . getSSTables ( ) . size ( ) > 0 ) <nl> { <nl> + logger . info ( " Old system data found in { } . { } ; migrating to new format in { } . { } " , Table . SYSTEM _ KS , OLD _ STATUS _ CF , Table . SYSTEM _ KS , LOCAL _ CF ) ; <nl> SortedSet < ByteBuffer > cols = new TreeSet < ByteBuffer > ( BytesType . instance ) ; <nl> cols . add ( ByteBufferUtil . bytes ( " ClusterName " ) ) ; <nl> cols . add ( ByteBufferUtil . bytes ( " Token " ) ) ; <nl> @ @ - 428 , 24 + 429 , 51 @ @ public class SystemTable <nl> ex . initCause ( err ) ; <nl> throw ex ; <nl> } <nl> - ColumnFamilyStore cfs = table . getColumnFamilyStore ( LOCAL _ CF ) ; <nl> <nl> - String req = " SELECT cluster _ name FROM system . % s WHERE key = ' % s ' " ; <nl> - UntypedResultSet result = processInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY ) ) ; <nl> + String savedClusterName ; <nl> <nl> - if ( result . isEmpty ( ) | | ! result . one ( ) . has ( " cluster _ name " ) ) <nl> + / / See if there is still data in System . LocationInfo , indicating that the system data has not yet been <nl> + / / upgraded by SystemTable . upgradeSystemData ( ) <nl> + ColumnFamilyStore oldStatusCfs = table . getColumnFamilyStore ( OLD _ STATUS _ CF ) ; <nl> + if ( oldStatusCfs . getSSTables ( ) . size ( ) > 0 ) <nl> + { <nl> + logger . debug ( " Detected system data in { } . { } , checking saved cluster name " , Table . SYSTEM _ KS , OLD _ STATUS _ CF ) ; <nl> + SortedSet < ByteBuffer > cols = new TreeSet < ByteBuffer > ( BytesType . instance ) ; <nl> + cols . add ( ByteBufferUtil . bytes ( " ClusterName " ) ) ; <nl> + QueryFilter filter = QueryFilter . getNamesFilter ( decorate ( ByteBufferUtil . bytes ( " L " ) ) , new QueryPath ( OLD _ STATUS _ CF ) , cols ) ; <nl> + ColumnFamily oldCf = oldStatusCfs . getColumnFamily ( filter ) ; <nl> + try <nl> + { <nl> + savedClusterName = ByteBufferUtil . string ( oldCf . getColumn ( ByteBufferUtil . bytes ( " ClusterName " ) ) . value ( ) ) ; <nl> + } <nl> + catch ( CharacterCodingException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + else <nl> { <nl> - / / this is a brand new node <nl> - if ( ! cfs . getSSTables ( ) . isEmpty ( ) ) <nl> - throw new ConfigurationException ( " Found system table files , but they couldn ' t be loaded ! " ) ; <nl> + ColumnFamilyStore cfs = table . getColumnFamilyStore ( LOCAL _ CF ) ; <nl> <nl> - / / no system files . this is a new node . <nl> - req = " INSERT INTO system . % s ( key , cluster _ name ) VALUES ( ' % s ' , ' % s ' ) " ; <nl> - processInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY , DatabaseDescriptor . getClusterName ( ) ) ) ; <nl> - return ; <nl> + String req = " SELECT cluster _ name FROM system . % s WHERE key = ' % s ' " ; <nl> + UntypedResultSet result = processInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY ) ) ; <nl> + <nl> + if ( result . isEmpty ( ) | | ! result . one ( ) . has ( " cluster _ name " ) ) <nl> + { <nl> + <nl> + / / this is a brand new node <nl> + if ( ! cfs . getSSTables ( ) . isEmpty ( ) ) <nl> + throw new ConfigurationException ( " Found system table files , but they couldn ' t be loaded ! " ) ; <nl> + <nl> + / / no system files . this is a new node . <nl> + req = " INSERT INTO system . % s ( key , cluster _ name ) VALUES ( ' % s ' , ' % s ' ) " ; <nl> + processInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY , DatabaseDescriptor . getClusterName ( ) ) ) ; <nl> + return ; <nl> + } <nl> + <nl> + savedClusterName = result . one ( ) . getString ( " cluster _ name " ) ; <nl> } <nl> <nl> - String savedClusterName = result . one ( ) . getString ( " cluster _ name " ) ; <nl> if ( ! DatabaseDescriptor . getClusterName ( ) . equals ( savedClusterName ) ) <nl> throw new ConfigurationException ( " Saved cluster name " + savedClusterName + " ! = configured name " + DatabaseDescriptor . getClusterName ( ) ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> index 0542756 . . d59a7d1 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> + + + b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> @ @ - 49 , 15 + 49 , 30 @ @ public class StandaloneScrubber <nl> private static final String DEBUG _ OPTION = " debug " ; <nl> private static final String HELP _ OPTION = " help " ; <nl> private static final String MANIFEST _ CHECK _ OPTION = " manifest - check " ; <nl> + private static final String MIGRATE _ OPTION = " migrate " ; <nl> <nl> public static void main ( String args [ ] ) throws IOException <nl> { <nl> Options options = Options . parseArgs ( args ) ; <nl> try <nl> { <nl> + OutputHandler handler = new OutputHandler . SystemOutput ( options . verbose , options . debug ) ; <nl> + <nl> / / Migrate sstables from pre - # 2749 to the correct location <nl> if ( Directories . sstablesNeedsMigration ( ) ) <nl> + { <nl> + if ( ! options . migrate ) <nl> + { <nl> + System . err . println ( " Detected a pre - 1 . 1 data directory layout . For this tool to work , a migration " + <nl> + " must be performed to the 1 . 1 + format for directories and filenames . Re - run " + <nl> + TOOL _ NAME + " with the - - " + MIGRATE _ OPTION + " option to automatically " + <nl> + " migrate * all * keyspaces and column families to the new layout . " ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + handler . output ( " Detected a pre - 1 . 1 data directory layout . All keyspace and column family directories " + <nl> + " will be migrated to the 1 . 1 + format . " ) ; <nl> Directories . migrateSSTables ( ) ; <nl> + } <nl> <nl> / / load keyspace descriptions . <nl> DatabaseDescriptor . loadSchemas ( ) ; <nl> @ @ - 72 , 7 + 87 , 6 @ @ public class StandaloneScrubber <nl> ColumnFamilyStore cfs = table . getColumnFamilyStore ( options . cfName ) ; <nl> String snapshotName = " pre - scrub - " + System . currentTimeMillis ( ) ; <nl> <nl> - OutputHandler handler = new OutputHandler . SystemOutput ( options . verbose , options . debug ) ; <nl> Directories . SSTableLister lister = cfs . directories . sstableLister ( ) . skipTemporary ( true ) ; <nl> <nl> List < SSTableReader > sstables = new ArrayList < SSTableReader > ( ) ; <nl> @ @ - 184 , 6 + 198 , 7 @ @ public class StandaloneScrubber <nl> public boolean debug ; <nl> public boolean verbose ; <nl> public boolean manifestCheckOnly ; <nl> + public boolean migrate ; <nl> <nl> private Options ( String tableName , String cfName ) <nl> { <nl> @ @ - 222 , 6 + 237 , 7 @ @ public class StandaloneScrubber <nl> opts . debug = cmd . hasOption ( DEBUG _ OPTION ) ; <nl> opts . verbose = cmd . hasOption ( VERBOSE _ OPTION ) ; <nl> opts . manifestCheckOnly = cmd . hasOption ( MANIFEST _ CHECK _ OPTION ) ; <nl> + opts . migrate = cmd . hasOption ( MIGRATE _ OPTION ) ; <nl> <nl> return opts ; <nl> } <nl> @ @ - 246 , 6 + 262 , 7 @ @ public class StandaloneScrubber <nl> options . addOption ( " v " , VERBOSE _ OPTION , " verbose output " ) ; <nl> options . addOption ( " h " , HELP _ OPTION , " display this help message " ) ; <nl> options . addOption ( " m " , MANIFEST _ CHECK _ OPTION , " only check and repair the leveled manifest , without actually scrubbing the sstables " ) ; <nl> + options . addOption ( null , MIGRATE _ OPTION , " convert directory layout and filenames to 1 . 1 + structure " ) ; <nl> return options ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java b / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java <nl> index 357e99c . . 16bf588 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java <nl> + + + b / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java <nl> @ @ - 47 , 12 + 47 , 30 @ @ public class StandaloneUpgrader <nl> private static final String TOOL _ NAME = " sstableupgrade " ; <nl> private static final String DEBUG _ OPTION = " debug " ; <nl> private static final String HELP _ OPTION = " help " ; <nl> + private static final String MIGRATE _ OPTION = " migrate " ; <nl> <nl> public static void main ( String args [ ] ) throws IOException <nl> { <nl> Options options = Options . parseArgs ( args ) ; <nl> try <nl> { <nl> + OutputHandler handler = new OutputHandler . SystemOutput ( false , options . debug ) ; <nl> + / / Migrate sstables from pre - # 2749 to the correct location <nl> + if ( Directories . sstablesNeedsMigration ( ) ) <nl> + { <nl> + if ( ! options . migrate ) <nl> + { <nl> + System . err . println ( " Detected a pre - 1 . 1 data directory layout . For this tool to work , a migration " + <nl> + " must be performed to the 1 . 1 + format for directories and filenames . Re - run " + <nl> + TOOL _ NAME + " with the - - " + MIGRATE _ OPTION + " option to automatically " + <nl> + " migrate * all * keyspaces and column families to the new layout . " ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + handler . output ( " Detected a pre - 1 . 1 data directory layout . All keyspace and column family directories " + <nl> + " will be migrated to the 1 . 1 + format . " ) ; <nl> + Directories . migrateSSTables ( ) ; <nl> + } <nl> + <nl> / / load keyspace descriptions . <nl> DatabaseDescriptor . loadSchemas ( ) ; <nl> <nl> @ @ - 64 , 7 + 82 , 6 @ @ public class StandaloneUpgrader <nl> Table table = Table . openWithoutSSTables ( options . keyspace ) ; <nl> ColumnFamilyStore cfs = table . getColumnFamilyStore ( options . cf ) ; <nl> <nl> - OutputHandler handler = new OutputHandler . SystemOutput ( false , options . debug ) ; <nl> Directories . SSTableLister lister = cfs . directories . sstableLister ( ) ; <nl> if ( options . snapshot ! = null ) <nl> lister . onlyBackups ( true ) . snapshots ( options . snapshot ) ; <nl> @ @ - 137 , 6 + 154 , 7 @ @ public class StandaloneUpgrader <nl> public final String snapshot ; <nl> <nl> public boolean debug ; <nl> + public boolean migrate ; <nl> <nl> private Options ( String keyspace , String cf , String snapshot ) <nl> { <nl> @ @ - 176 , 6 + 194 , 7 @ @ public class StandaloneUpgrader <nl> Options opts = new Options ( keyspace , cf , snapshot ) ; <nl> <nl> opts . debug = cmd . hasOption ( DEBUG _ OPTION ) ; <nl> + opts . migrate = cmd . hasOption ( MIGRATE _ OPTION ) ; <nl> <nl> return opts ; <nl> } <nl> @ @ - 197 , 6 + 216 , 7 @ @ public class StandaloneUpgrader <nl> { <nl> CmdLineOptions options = new CmdLineOptions ( ) ; <nl> options . addOption ( null , DEBUG _ OPTION , " display stack traces " ) ; <nl> + options . addOption ( null , MIGRATE _ OPTION , " convert directory layout and filenames to 1 . 1 + structure " ) ; <nl> options . addOption ( " h " , HELP _ OPTION , " display this help message " ) ; <nl> return options ; <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 1ed3fe6 . . 853bf61 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 15 
 + * StreamingHistogram is not thread safe ( CASSANDRA - 13756 ) 
 * Fix MV timestamp issues ( CASSANDRA - 11500 ) 
 * Better tolerate improperly formatted bcrypt hashes ( CASSANDRA - 13626 ) 
 * Fix race condition in read command serialization ( CASSANDRA - 13363 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 183176c . . 983d6b1 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 2415 , 7 + 2415 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 long allColumns = 0 ; 
 int localTime = ( int ) ( System . currentTimeMillis ( ) / 1000 ) ; 
 
 - for ( SSTableReader sstable : getSSTables ( SSTableSet . LIVE ) ) 
 + for ( SSTableReader sstable : getSSTables ( SSTableSet . CANONICAL ) ) 
 { 
 allDroppable + = sstable . getDroppableTombstonesBefore ( localTime - sstable . metadata . params . gcGraceSeconds ) ; 
 allColumns + = sstable . getEstimatedColumnCount ( ) . mean ( ) * sstable . getEstimatedColumnCount ( ) . count ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java b / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java 
 index 3b13cf4 . . 487a932 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java 
 @ @ - 59 , 9 + 59 , 9 @ @ public class MetadataCollector implements PartitionStatisticsCollector 
 return new EstimatedHistogram ( 150 ) ; 
 } 
 
 - static StreamingHistogram defaultTombstoneDropTimeHistogram ( ) 
 + static StreamingHistogram . StreamingHistogramBuilder defaultTombstoneDropTimeHistogramBuilder ( ) 
 { 
 - return new StreamingHistogram ( SSTable . TOMBSTONE _ HISTOGRAM _ BIN _ SIZE , SSTable . TOMBSTONE _ HISTOGRAM _ SPOOL _ SIZE , SSTable . TOMBSTONE _ HISTOGRAM _ TTL _ ROUND _ SECONDS ) ; 
 + return new StreamingHistogram . StreamingHistogramBuilder ( SSTable . TOMBSTONE _ HISTOGRAM _ BIN _ SIZE , SSTable . TOMBSTONE _ HISTOGRAM _ SPOOL _ SIZE , SSTable . TOMBSTONE _ HISTOGRAM _ TTL _ ROUND _ SECONDS ) ; 
 } 
 
 public static StatsMetadata defaultStatsMetadata ( ) 
 @ @ - 76 , 7 + 76 , 7 @ @ public class MetadataCollector implements PartitionStatisticsCollector 
 0 , 
 Integer . MAX _ VALUE , 
 NO _ COMPRESSION _ RATIO , 
 - defaultTombstoneDropTimeHistogram ( ) , 
 + defaultTombstoneDropTimeHistogramBuilder ( ) . build ( ) , 
 0 , 
 Collections . < ByteBuffer > emptyList ( ) , 
 Collections . < ByteBuffer > emptyList ( ) , 
 @ @ - 94 , 7 + 94 , 7 @ @ public class MetadataCollector implements PartitionStatisticsCollector 
 protected final MinMaxIntTracker localDeletionTimeTracker = new MinMaxIntTracker ( Cell . NO _ DELETION _ TIME , Cell . NO _ DELETION _ TIME ) ; 
 protected final MinMaxIntTracker ttlTracker = new MinMaxIntTracker ( Cell . NO _ TTL , Cell . NO _ TTL ) ; 
 protected double compressionRatio = NO _ COMPRESSION _ RATIO ; 
 - protected StreamingHistogram estimatedTombstoneDropTime = defaultTombstoneDropTimeHistogram ( ) ; 
 + protected StreamingHistogram . StreamingHistogramBuilder estimatedTombstoneDropTime = defaultTombstoneDropTimeHistogramBuilder ( ) ; 
 protected int sstableLevel ; 
 protected ByteBuffer [ ] minClusteringValues ; 
 protected ByteBuffer [ ] maxClusteringValues ; 
 @ @ - 292 , 7 + 292 , 7 @ @ public class MetadataCollector implements PartitionStatisticsCollector 
 ttlTracker . min ( ) , 
 ttlTracker . max ( ) , 
 compressionRatio , 
 - estimatedTombstoneDropTime , 
 + estimatedTombstoneDropTime . build ( ) , 
 sstableLevel , 
 makeList ( minClusteringValues ) , 
 makeList ( maxClusteringValues ) , 
 diff - - git a / src / java / org / apache / cassandra / utils / StreamingHistogram . java b / src / java / org / apache / cassandra / utils / StreamingHistogram . java 
 index f1752a9 . . 6500a1a 100644 
 - - - a / src / java / org / apache / cassandra / utils / StreamingHistogram . java 
 + + + b / src / java / org / apache / cassandra / utils / StreamingHistogram . java 
 @ @ - 40 , 145 + 40 , 12 @ @ public class StreamingHistogram 
 
 / / TreeMap to hold bins of histogram . 
 private final TreeMap < Double , Long > bin ; 
 - 
 - / / Keep a second , larger buffer to spool data in , before finalizing it into ` bin ` 
 - private final TreeMap < Double , Long > spool ; 
 - 
 - / / maximum bin size for this histogram 
 private final int maxBinSize ; 
 
 - / / maximum size of the spool 
 - private final int maxSpoolSize ; 
 - 
 - / / voluntarily give up resolution for speed 
 - private final int roundSeconds ; 
 - 
 - / * * 
 - * Creates a new histogram with max bin size of maxBinSize 
 - * @ param maxBinSize maximum number of bins this histogram can have 
 - * / 
 - public StreamingHistogram ( int maxBinSize , int maxSpoolSize , int roundSeconds ) 
 + private StreamingHistogram ( int maxBinSize , Map < Double , Long > bin ) 
 { 
 this . maxBinSize = maxBinSize ; 
 - this . maxSpoolSize = maxSpoolSize ; 
 - this . roundSeconds = roundSeconds ; 
 - bin = new TreeMap < > ( ) ; 
 - spool = new TreeMap < > ( ) ; 
 - } 
 - 
 - private StreamingHistogram ( int maxBinSize , int maxSpoolSize , int roundSeconds , Map < Double , Long > bin ) 
 - { 
 - this . maxBinSize = maxBinSize ; 
 - this . maxSpoolSize = maxSpoolSize ; 
 - this . roundSeconds = roundSeconds ; 
 this . bin = new TreeMap < > ( bin ) ; 
 - this . spool = new TreeMap < > ( ) ; 
 - } 
 - 
 - / * * 
 - * Adds new point p to this histogram . 
 - * @ param p 
 - * / 
 - public void update ( double p ) 
 - { 
 - update ( p , 1 ) ; 
 - } 
 - 
 - / * * 
 - * Adds new point p with value m to this histogram . 
 - * @ param p 
 - * @ param m 
 - * / 
 - public void update ( double p , long m ) 
 - { 
 - double d = p % this . roundSeconds ; 
 - if ( d > 0 ) 
 - p = p + ( this . roundSeconds - d ) ; 
 - 
 - Long mi = spool . get ( p ) ; 
 - if ( mi ! = null ) 
 - { 
 - / / we found the same p so increment that counter 
 - spool . put ( p , mi + m ) ; 
 - } 
 - else 
 - { 
 - spool . put ( p , m ) ; 
 - } 
 - if ( spool . size ( ) > maxSpoolSize ) 
 - flushHistogram ( ) ; 
 - } 
 - 
 - / * * 
 - * Drain the temporary spool into the final bins 
 - * / 
 - public void flushHistogram ( ) 
 - { 
 - if ( spool . size ( ) > 0 ) 
 - { 
 - Long spoolValue ; 
 - Long binValue ; 
 - 
 - / / Iterate over the spool , copying the value into the primary bin map 
 - / / and compacting that map as necessary 
 - for ( Map . Entry < Double , Long > entry : spool . entrySet ( ) ) 
 - { 
 - Double key = entry . getKey ( ) ; 
 - spoolValue = entry . getValue ( ) ; 
 - binValue = bin . get ( key ) ; 
 - 
 - if ( binValue ! = null ) 
 - { 
 - binValue + = spoolValue ; 
 - bin . put ( key , binValue ) ; 
 - } else 
 - { 
 - bin . put ( key , spoolValue ) ; 
 - } 
 - 
 - / / if bin size exceeds maximum bin size then trim down to max size 
 - if ( bin . size ( ) > maxBinSize ) 
 - { 
 - / / find points p1 , p2 which have smallest difference 
 - Iterator < Double > keys = bin . keySet ( ) . iterator ( ) ; 
 - double p1 = keys . next ( ) ; 
 - double p2 = keys . next ( ) ; 
 - double smallestDiff = p2 - p1 ; 
 - double q1 = p1 , q2 = p2 ; 
 - while ( keys . hasNext ( ) ) { 
 - p1 = p2 ; 
 - p2 = keys . next ( ) ; 
 - double diff = p2 - p1 ; 
 - if ( diff < smallestDiff ) { 
 - smallestDiff = diff ; 
 - q1 = p1 ; 
 - q2 = p2 ; 
 - } 
 - } 
 - / / merge those two 
 - long k1 = bin . remove ( q1 ) ; 
 - long k2 = bin . remove ( q2 ) ; 
 - bin . put ( ( q1 * k1 + q2 * k2 ) / ( k1 + k2 ) , k1 + k2 ) ; 
 - } 
 - } 
 - spool . clear ( ) ; 
 - } 
 - } 
 - 
 - / * * 
 - * Merges given histogram with this histogram . 
 - * 
 - * @ param other histogram to merge 
 - * / 
 - public void merge ( StreamingHistogram other ) 
 - { 
 - if ( other = = null ) 
 - return ; 
 - 
 - flushHistogram ( ) ; 
 - 
 - for ( Map . Entry < Double , Long > entry : other . getAsMap ( ) . entrySet ( ) ) 
 - update ( entry . getKey ( ) , entry . getValue ( ) ) ; 
 } 
 
 / * * 
 @ @ - 189 , 7 + 56 , 6 @ @ public class StreamingHistogram 
 * / 
 public double sum ( double b ) 
 { 
 - flushHistogram ( ) ; 
 double sum = 0 ; 
 / / find the points pi , pnext which satisfy pi < = b < pnext 
 Map . Entry < Double , Long > pnext = bin . higherEntry ( b ) ; 
 @ @ - 219 , 10 + 85 , 150 @ @ public class StreamingHistogram 
 
 public Map < Double , Long > getAsMap ( ) 
 { 
 - flushHistogram ( ) ; 
 return Collections . unmodifiableMap ( bin ) ; 
 } 
 
 + public static class StreamingHistogramBuilder 
 + { 
 + / / TreeMap to hold bins of histogram . 
 + private final TreeMap < Double , Long > bin ; 
 + 
 + / / Keep a second , larger buffer to spool data in , before finalizing it into ` bin ` 
 + private final TreeMap < Double , Long > spool ; 
 + 
 + / / maximum bin size for this histogram 
 + private final int maxBinSize ; 
 + 
 + / / maximum size of the spool 
 + private final int maxSpoolSize ; 
 + 
 + / / voluntarily give up resolution for speed 
 + private final int roundSeconds ; 
 + / * * 
 + * Creates a new histogram with max bin size of maxBinSize 
 + * @ param maxBinSize maximum number of bins this histogram can have 
 + * / 
 + public StreamingHistogramBuilder ( int maxBinSize , int maxSpoolSize , int roundSeconds ) 
 + { 
 + this . maxBinSize = maxBinSize ; 
 + this . maxSpoolSize = maxSpoolSize ; 
 + this . roundSeconds = roundSeconds ; 
 + bin = new TreeMap < > ( ) ; 
 + spool = new TreeMap < > ( ) ; 
 + } 
 + 
 + public StreamingHistogram build ( ) 
 + { 
 + flushHistogram ( ) ; 
 + return new StreamingHistogram ( maxBinSize , bin ) ; 
 + } 
 + / * * 
 + * Adds new point p to this histogram . 
 + * @ param p 
 + * / 
 + public void update ( double p ) 
 + { 
 + update ( p , 1 ) ; 
 + } 
 + 
 + / * * 
 + * Adds new point p with value m to this histogram . 
 + * @ param p 
 + * @ param m 
 + * / 
 + public void update ( double p , long m ) 
 + { 
 + double d = p % this . roundSeconds ; 
 + if ( d > 0 ) 
 + p = p + ( this . roundSeconds - d ) ; 
 + 
 + Long mi = spool . get ( p ) ; 
 + if ( mi ! = null ) 
 + { 
 + / / we found the same p so increment that counter 
 + spool . put ( p , mi + m ) ; 
 + } 
 + else 
 + { 
 + spool . put ( p , m ) ; 
 + } 
 + if ( spool . size ( ) > maxSpoolSize ) 
 + flushHistogram ( ) ; 
 + } 
 + 
 + / * * 
 + * Drain the temporary spool into the final bins 
 + * / 
 + public void flushHistogram ( ) 
 + { 
 + if ( spool . size ( ) > 0 ) 
 + { 
 + Long spoolValue ; 
 + Long binValue ; 
 + 
 + / / Iterate over the spool , copying the value into the primary bin map 
 + / / and compacting that map as necessary 
 + for ( Map . Entry < Double , Long > entry : spool . entrySet ( ) ) 
 + { 
 + Double key = entry . getKey ( ) ; 
 + spoolValue = entry . getValue ( ) ; 
 + binValue = bin . get ( key ) ; 
 + 
 + if ( binValue ! = null ) 
 + { 
 + binValue + = spoolValue ; 
 + bin . put ( key , binValue ) ; 
 + } else 
 + { 
 + bin . put ( key , spoolValue ) ; 
 + } 
 + 
 + / / if bin size exceeds maximum bin size then trim down to max size 
 + if ( bin . size ( ) > maxBinSize ) 
 + { 
 + / / find points p1 , p2 which have smallest difference 
 + Iterator < Double > keys = bin . keySet ( ) . iterator ( ) ; 
 + double p1 = keys . next ( ) ; 
 + double p2 = keys . next ( ) ; 
 + double smallestDiff = p2 - p1 ; 
 + double q1 = p1 , q2 = p2 ; 
 + while ( keys . hasNext ( ) ) { 
 + p1 = p2 ; 
 + p2 = keys . next ( ) ; 
 + double diff = p2 - p1 ; 
 + if ( diff < smallestDiff ) { 
 + smallestDiff = diff ; 
 + q1 = p1 ; 
 + q2 = p2 ; 
 + } 
 + } 
 + / / merge those two 
 + long k1 = bin . remove ( q1 ) ; 
 + long k2 = bin . remove ( q2 ) ; 
 + bin . put ( ( q1 * k1 + q2 * k2 ) / ( k1 + k2 ) , k1 + k2 ) ; 
 + } 
 + } 
 + spool . clear ( ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Merges given histogram with this histogram . 
 + * 
 + * @ param other histogram to merge 
 + * / 
 + public void merge ( StreamingHistogram other ) 
 + { 
 + if ( other = = null ) 
 + return ; 
 + 
 + flushHistogram ( ) ; 
 + 
 + for ( Map . Entry < Double , Long > entry : other . getAsMap ( ) . entrySet ( ) ) 
 + update ( entry . getKey ( ) , entry . getValue ( ) ) ; 
 + } 
 + } 
 + 
 public static class StreamingHistogramSerializer implements ISerializer < StreamingHistogram > 
 { 
 public void serialize ( StreamingHistogram histogram , DataOutputPlus out ) throws IOException 
 @ @ - 247 , 7 + 253 , 7 @ @ public class StreamingHistogram 
 tmp . put ( in . readDouble ( ) , in . readLong ( ) ) ; 
 } 
 
 - return new StreamingHistogram ( maxBinSize , maxBinSize , 1 , tmp ) ; 
 + return new StreamingHistogram ( maxBinSize , tmp ) ; 
 } 
 
 public long serializedSize ( StreamingHistogram histogram ) 
 @ @ - 272 , 14 + 278 , 12 @ @ public class StreamingHistogram 
 
 StreamingHistogram that = ( StreamingHistogram ) o ; 
 return maxBinSize = = that . maxBinSize 
 - & & spool . equals ( that . spool ) 
 & & bin . equals ( that . bin ) ; 
 } 
 
 @ Override 
 public int hashCode ( ) 
 { 
 - return Objects . hashCode ( bin . hashCode ( ) , spool . hashCode ( ) , maxBinSize ) ; 
 + return Objects . hashCode ( bin . hashCode ( ) , maxBinSize ) ; 
 } 
 - 
 } 
 diff - - git a / test / microbench / org / apache / cassandra / test / microbench / StreamingHistogramBench . java b / test / microbench / org / apache / cassandra / test / microbench / StreamingHistogramBench . java 
 index 23e8f4e . . c1ecf6d 100644 
 - - - a / test / microbench / org / apache / cassandra / test / microbench / StreamingHistogramBench . java 
 + + + b / test / microbench / org / apache / cassandra / test / microbench / StreamingHistogramBench . java 
 @ @ - 36 , 39 + 36 , 38 @ @ import org . openjdk . jmh . annotations . * ; 
 @ State ( Scope . Benchmark ) 
 public class StreamingHistogramBench 
 { 
 - 
 - StreamingHistogram streamingHistogram ; 
 - StreamingHistogram newStreamingHistogram ; 
 - StreamingHistogram newStreamingHistogram2 ; 
 - StreamingHistogram newStreamingHistogram3 ; 
 - StreamingHistogram newStreamingHistogram4 ; 
 - StreamingHistogram newStreamingHistogram5 ; 
 - StreamingHistogram newStreamingHistogram6 ; 
 - StreamingHistogram streamingHistogram60 ; 
 - StreamingHistogram newStreamingHistogram60 ; 
 - StreamingHistogram newStreamingHistogram100x60 ; 
 - 
 - StreamingHistogram narrowstreamingHistogram ; 
 - StreamingHistogram narrownewStreamingHistogram ; 
 - StreamingHistogram narrownewStreamingHistogram2 ; 
 - StreamingHistogram narrownewStreamingHistogram3 ; 
 - StreamingHistogram narrownewStreamingHistogram4 ; 
 - StreamingHistogram narrownewStreamingHistogram5 ; 
 - StreamingHistogram narrownewStreamingHistogram6 ; 
 - StreamingHistogram narrownewStreamingHistogram60 ; 
 - StreamingHistogram narrowstreamingHistogram60 ; 
 - StreamingHistogram narrownewStreamingHistogram100x60 ; 
 - 
 - StreamingHistogram sparsestreamingHistogram ; 
 - StreamingHistogram sparsenewStreamingHistogram ; 
 - StreamingHistogram sparsenewStreamingHistogram2 ; 
 - StreamingHistogram sparsenewStreamingHistogram3 ; 
 - StreamingHistogram sparsenewStreamingHistogram4 ; 
 - StreamingHistogram sparsenewStreamingHistogram5 ; 
 - StreamingHistogram sparsenewStreamingHistogram6 ; 
 - StreamingHistogram sparsestreamingHistogram60 ; 
 - StreamingHistogram sparsenewStreamingHistogram60 ; 
 - StreamingHistogram sparsenewStreamingHistogram100x60 ; 
 + StreamingHistogram . StreamingHistogramBuilder streamingHistogram ; 
 + StreamingHistogram . StreamingHistogramBuilder newStreamingHistogram ; 
 + StreamingHistogram . StreamingHistogramBuilder newStreamingHistogram2 ; 
 + StreamingHistogram . StreamingHistogramBuilder newStreamingHistogram3 ; 
 + StreamingHistogram . StreamingHistogramBuilder newStreamingHistogram4 ; 
 + StreamingHistogram . StreamingHistogramBuilder newStreamingHistogram5 ; 
 + StreamingHistogram . StreamingHistogramBuilder newStreamingHistogram6 ; 
 + StreamingHistogram . StreamingHistogramBuilder streamingHistogram60 ; 
 + StreamingHistogram . StreamingHistogramBuilder newStreamingHistogram60 ; 
 + StreamingHistogram . StreamingHistogramBuilder newStreamingHistogram100x60 ; 
 + 
 + StreamingHistogram . StreamingHistogramBuilder narrowstreamingHistogram ; 
 + StreamingHistogram . StreamingHistogramBuilder narrownewStreamingHistogram ; 
 + StreamingHistogram . StreamingHistogramBuilder narrownewStreamingHistogram2 ; 
 + StreamingHistogram . StreamingHistogramBuilder narrownewStreamingHistogram3 ; 
 + StreamingHistogram . StreamingHistogramBuilder narrownewStreamingHistogram4 ; 
 + StreamingHistogram . StreamingHistogramBuilder narrownewStreamingHistogram5 ; 
 + StreamingHistogram . StreamingHistogramBuilder narrownewStreamingHistogram6 ; 
 + StreamingHistogram . StreamingHistogramBuilder narrownewStreamingHistogram60 ; 
 + StreamingHistogram . StreamingHistogramBuilder narrowstreamingHistogram60 ; 
 + StreamingHistogram . StreamingHistogramBuilder narrownewStreamingHistogram100x60 ; 
 + 
 + StreamingHistogram . StreamingHistogramBuilder sparsestreamingHistogram ; 
 + StreamingHistogram . StreamingHistogramBuilder sparsenewStreamingHistogram ; 
 + StreamingHistogram . StreamingHistogramBuilder sparsenewStreamingHistogram2 ; 
 + StreamingHistogram . StreamingHistogramBuilder sparsenewStreamingHistogram3 ; 
 + StreamingHistogram . StreamingHistogramBuilder sparsenewStreamingHistogram4 ; 
 + StreamingHistogram . StreamingHistogramBuilder sparsenewStreamingHistogram5 ; 
 + StreamingHistogram . StreamingHistogramBuilder sparsenewStreamingHistogram6 ; 
 + StreamingHistogram . StreamingHistogramBuilder sparsestreamingHistogram60 ; 
 + StreamingHistogram . StreamingHistogramBuilder sparsenewStreamingHistogram60 ; 
 + StreamingHistogram . StreamingHistogramBuilder sparsenewStreamingHistogram100x60 ; 
 
 static int [ ] ttls = new int [ 10000000 ] ; 
 static int [ ] narrowttls = new int [ 10000000 ] ; 
 @ @ - 91 , 39 + 90 , 39 @ @ public class StreamingHistogramBench 
 public void setup ( ) throws Throwable 
 { 
 
 - streamingHistogram = new StreamingHistogram ( 100 , 0 , 1 ) ; 
 - newStreamingHistogram = new StreamingHistogram ( 100 , 1000 , 1 ) ; 
 - newStreamingHistogram2 = new StreamingHistogram ( 100 , 10000 , 1 ) ; 
 - newStreamingHistogram3 = new StreamingHistogram ( 100 , 100000 , 1 ) ; 
 - newStreamingHistogram4 = new StreamingHistogram ( 50 , 100000 , 1 ) ; 
 - newStreamingHistogram5 = new StreamingHistogram ( 50 , 10000 , 1 ) ; 
 - newStreamingHistogram6 = new StreamingHistogram ( 100 , 1000000 , 1 ) ; 
 - streamingHistogram60 = new StreamingHistogram ( 100 , 0 , 60 ) ; 
 - newStreamingHistogram60 = new StreamingHistogram ( 100 , 100000 , 60 ) ; 
 - newStreamingHistogram100x60 = new StreamingHistogram ( 100 , 10000 , 60 ) ; 
 - 
 - narrowstreamingHistogram = new StreamingHistogram ( 100 , 0 , 1 ) ; 
 - narrownewStreamingHistogram = new StreamingHistogram ( 100 , 1000 , 1 ) ; 
 - narrownewStreamingHistogram2 = new StreamingHistogram ( 100 , 10000 , 1 ) ; 
 - narrownewStreamingHistogram3 = new StreamingHistogram ( 100 , 100000 , 1 ) ; 
 - narrownewStreamingHistogram4 = new StreamingHistogram ( 50 , 100000 , 1 ) ; 
 - narrownewStreamingHistogram5 = new StreamingHistogram ( 50 , 10000 , 1 ) ; 
 - narrownewStreamingHistogram6 = new StreamingHistogram ( 100 , 1000000 , 1 ) ; 
 - narrowstreamingHistogram60 = new StreamingHistogram ( 100 , 0 , 60 ) ; 
 - narrownewStreamingHistogram60 = new StreamingHistogram ( 100 , 100000 , 60 ) ; 
 - narrownewStreamingHistogram100x60 = new StreamingHistogram ( 100 , 10000 , 60 ) ; 
 - 
 - 
 - sparsestreamingHistogram = new StreamingHistogram ( 100 , 0 , 1 ) ; 
 - sparsenewStreamingHistogram = new StreamingHistogram ( 100 , 1000 , 1 ) ; 
 - sparsenewStreamingHistogram2 = new StreamingHistogram ( 100 , 10000 , 1 ) ; 
 - sparsenewStreamingHistogram3 = new StreamingHistogram ( 100 , 100000 , 1 ) ; 
 - sparsenewStreamingHistogram4 = new StreamingHistogram ( 50 , 100000 , 1 ) ; 
 - sparsenewStreamingHistogram5 = new StreamingHistogram ( 50 , 10000 , 1 ) ; 
 - sparsenewStreamingHistogram6 = new StreamingHistogram ( 100 , 1000000 , 1 ) ; 
 - sparsestreamingHistogram60 = new StreamingHistogram ( 100 , 0 , 60 ) ; 
 - sparsenewStreamingHistogram60 = new StreamingHistogram ( 100 , 100000 , 60 ) ; 
 - sparsenewStreamingHistogram100x60 = new StreamingHistogram ( 100 , 10000 , 60 ) ; 
 + streamingHistogram = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 0 , 1 ) ; 
 + newStreamingHistogram = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 1000 , 1 ) ; 
 + newStreamingHistogram2 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 10000 , 1 ) ; 
 + newStreamingHistogram3 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 100000 , 1 ) ; 
 + newStreamingHistogram4 = new StreamingHistogram . StreamingHistogramBuilder ( 50 , 100000 , 1 ) ; 
 + newStreamingHistogram5 = new StreamingHistogram . StreamingHistogramBuilder ( 50 , 10000 , 1 ) ; 
 + newStreamingHistogram6 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 1000000 , 1 ) ; 
 + streamingHistogram60 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 0 , 60 ) ; 
 + newStreamingHistogram60 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 100000 , 60 ) ; 
 + newStreamingHistogram100x60 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 10000 , 60 ) ; 
 + 
 + narrowstreamingHistogram = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 0 , 1 ) ; 
 + narrownewStreamingHistogram = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 1000 , 1 ) ; 
 + narrownewStreamingHistogram2 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 10000 , 1 ) ; 
 + narrownewStreamingHistogram3 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 100000 , 1 ) ; 
 + narrownewStreamingHistogram4 = new StreamingHistogram . StreamingHistogramBuilder ( 50 , 100000 , 1 ) ; 
 + narrownewStreamingHistogram5 = new StreamingHistogram . StreamingHistogramBuilder ( 50 , 10000 , 1 ) ; 
 + narrownewStreamingHistogram6 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 1000000 , 1 ) ; 
 + narrowstreamingHistogram60 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 0 , 60 ) ; 
 + narrownewStreamingHistogram60 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 100000 , 60 ) ; 
 + narrownewStreamingHistogram100x60 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 10000 , 60 ) ; 
 + 
 + 
 + sparsestreamingHistogram = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 0 , 1 ) ; 
 + sparsenewStreamingHistogram = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 1000 , 1 ) ; 
 + sparsenewStreamingHistogram2 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 10000 , 1 ) ; 
 + sparsenewStreamingHistogram3 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 100000 , 1 ) ; 
 + sparsenewStreamingHistogram4 = new StreamingHistogram . StreamingHistogramBuilder ( 50 , 100000 , 1 ) ; 
 + sparsenewStreamingHistogram5 = new StreamingHistogram . StreamingHistogramBuilder ( 50 , 10000 , 1 ) ; 
 + sparsenewStreamingHistogram6 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 1000000 , 1 ) ; 
 + sparsestreamingHistogram60 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 0 , 60 ) ; 
 + sparsenewStreamingHistogram60 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 100000 , 60 ) ; 
 + sparsenewStreamingHistogram100x60 = new StreamingHistogram . StreamingHistogramBuilder ( 100 , 10000 , 60 ) ; 
 
 } 
 
 @ @ - 138 , 7 + 137 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 streamingHistogram . update ( ttls [ i ] ) ; 
 - streamingHistogram . flushHistogram ( ) ; 
 + streamingHistogram . build ( ) ; 
 } 
 
 @ Benchmark 
 @ @ - 146 , 7 + 145 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 newStreamingHistogram . update ( ttls [ i ] ) ; 
 - newStreamingHistogram . flushHistogram ( ) ; 
 + newStreamingHistogram . build ( ) ; 
 
 } 
 
 @ @ - 155 , 7 + 154 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 newStreamingHistogram2 . update ( ttls [ i ] ) ; 
 - newStreamingHistogram2 . flushHistogram ( ) ; 
 + newStreamingHistogram2 . build ( ) ; 
 
 } 
 
 @ @ - 164 , 7 + 163 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 newStreamingHistogram3 . update ( ttls [ i ] ) ; 
 - newStreamingHistogram3 . flushHistogram ( ) ; 
 + newStreamingHistogram3 . build ( ) ; 
 
 } 
 
 @ @ - 173 , 7 + 172 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 newStreamingHistogram6 . update ( ttls [ i ] ) ; 
 - newStreamingHistogram6 . flushHistogram ( ) ; 
 + newStreamingHistogram6 . build ( ) ; 
 
 } 
 
 @ @ - 183 , 7 + 182 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 newStreamingHistogram4 . update ( ttls [ i ] ) ; 
 - newStreamingHistogram4 . flushHistogram ( ) ; 
 + newStreamingHistogram4 . build ( ) ; 
 
 } 
 
 @ @ - 192 , 7 + 191 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 newStreamingHistogram5 . update ( ttls [ i ] ) ; 
 - newStreamingHistogram5 . flushHistogram ( ) ; 
 + newStreamingHistogram5 . build ( ) ; 
 
 } 
 
 @ @ - 201 , 7 + 200 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 streamingHistogram60 . update ( sparsettls [ i ] ) ; 
 - streamingHistogram60 . flushHistogram ( ) ; 
 + streamingHistogram60 . build ( ) ; 
 
 } 
 
 @ @ - 210 , 7 + 209 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 newStreamingHistogram60 . update ( sparsettls [ i ] ) ; 
 - newStreamingHistogram60 . flushHistogram ( ) ; 
 + newStreamingHistogram60 . build ( ) ; 
 } 
 
 @ Benchmark 
 @ @ - 218 , 7 + 217 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 newStreamingHistogram100x60 . update ( sparsettls [ i ] ) ; 
 - newStreamingHistogram100x60 . flushHistogram ( ) ; 
 + newStreamingHistogram100x60 . build ( ) ; 
 } 
 
 
 @ @ - 227 , 7 + 226 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 narrowstreamingHistogram . update ( narrowttls [ i ] ) ; 
 - narrowstreamingHistogram . flushHistogram ( ) ; 
 + narrowstreamingHistogram . build ( ) ; 
 } 
 
 @ Benchmark 
 @ @ - 235 , 7 + 234 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 narrownewStreamingHistogram . update ( narrowttls [ i ] ) ; 
 - narrownewStreamingHistogram . flushHistogram ( ) ; 
 + narrownewStreamingHistogram . build ( ) ; 
 
 } 
 
 @ @ - 244 , 7 + 243 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 narrownewStreamingHistogram2 . update ( narrowttls [ i ] ) ; 
 - narrownewStreamingHistogram2 . flushHistogram ( ) ; 
 + narrownewStreamingHistogram2 . build ( ) ; 
 
 } 
 
 @ @ - 253 , 7 + 252 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 narrownewStreamingHistogram3 . update ( narrowttls [ i ] ) ; 
 - narrownewStreamingHistogram3 . flushHistogram ( ) ; 
 + narrownewStreamingHistogram3 . build ( ) ; 
 
 } 
 
 @ @ - 262 , 7 + 261 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 narrownewStreamingHistogram6 . update ( ttls [ i ] ) ; 
 - narrownewStreamingHistogram6 . flushHistogram ( ) ; 
 + narrownewStreamingHistogram6 . build ( ) ; 
 
 } 
 
 @ @ - 272 , 7 + 271 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 narrownewStreamingHistogram4 . update ( narrowttls [ i ] ) ; 
 - narrownewStreamingHistogram4 . flushHistogram ( ) ; 
 + narrownewStreamingHistogram4 . build ( ) ; 
 
 } 
 
 @ @ - 281 , 7 + 280 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 narrownewStreamingHistogram5 . update ( narrowttls [ i ] ) ; 
 - narrownewStreamingHistogram5 . flushHistogram ( ) ; 
 + narrownewStreamingHistogram5 . build ( ) ; 
 
 } 
 
 @ @ - 290 , 7 + 289 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 narrowstreamingHistogram60 . update ( sparsettls [ i ] ) ; 
 - narrowstreamingHistogram60 . flushHistogram ( ) ; 
 + narrowstreamingHistogram60 . build ( ) ; 
 
 } 
 
 @ @ - 299 , 7 + 298 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 narrownewStreamingHistogram60 . update ( sparsettls [ i ] ) ; 
 - narrownewStreamingHistogram60 . flushHistogram ( ) ; 
 + narrownewStreamingHistogram60 . build ( ) ; 
 
 } 
 
 @ @ - 308 , 7 + 307 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 narrownewStreamingHistogram100x60 . update ( sparsettls [ i ] ) ; 
 - narrownewStreamingHistogram100x60 . flushHistogram ( ) ; 
 + narrownewStreamingHistogram100x60 . build ( ) ; 
 
 } 
 
 @ @ - 318 , 7 + 317 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 sparsestreamingHistogram . update ( sparsettls [ i ] ) ; 
 - sparsestreamingHistogram . flushHistogram ( ) ; 
 + sparsestreamingHistogram . build ( ) ; 
 } 
 
 @ Benchmark 
 @ @ - 326 , 7 + 325 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 sparsenewStreamingHistogram . update ( sparsettls [ i ] ) ; 
 - sparsenewStreamingHistogram . flushHistogram ( ) ; 
 + sparsenewStreamingHistogram . build ( ) ; 
 
 } 
 
 @ @ - 335 , 7 + 334 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 sparsenewStreamingHistogram2 . update ( sparsettls [ i ] ) ; 
 - sparsenewStreamingHistogram2 . flushHistogram ( ) ; 
 + sparsenewStreamingHistogram2 . build ( ) ; 
 
 } 
 
 @ @ - 344 , 7 + 343 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 sparsenewStreamingHistogram3 . update ( sparsettls [ i ] ) ; 
 - sparsenewStreamingHistogram3 . flushHistogram ( ) ; 
 + sparsenewStreamingHistogram3 . build ( ) ; 
 
 } 
 
 @ @ - 353 , 7 + 352 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 sparsenewStreamingHistogram6 . update ( ttls [ i ] ) ; 
 - sparsenewStreamingHistogram6 . flushHistogram ( ) ; 
 + sparsenewStreamingHistogram6 . build ( ) ; 
 } 
 
 
 @ @ - 362 , 7 + 361 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 sparsenewStreamingHistogram4 . update ( sparsettls [ i ] ) ; 
 - sparsenewStreamingHistogram4 . flushHistogram ( ) ; 
 + sparsenewStreamingHistogram4 . build ( ) ; 
 
 } 
 
 @ @ - 371 , 7 + 370 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 sparsenewStreamingHistogram5 . update ( sparsettls [ i ] ) ; 
 - sparsenewStreamingHistogram5 . flushHistogram ( ) ; 
 + sparsenewStreamingHistogram5 . build ( ) ; 
 
 } 
 
 @ @ - 380 , 7 + 379 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 sparsestreamingHistogram60 . update ( sparsettls [ i ] ) ; 
 - sparsestreamingHistogram60 . flushHistogram ( ) ; 
 + sparsestreamingHistogram60 . build ( ) ; 
 
 } 
 
 @ @ - 389 , 7 + 388 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 sparsenewStreamingHistogram60 . update ( sparsettls [ i ] ) ; 
 - sparsenewStreamingHistogram60 . flushHistogram ( ) ; 
 + sparsenewStreamingHistogram60 . build ( ) ; 
 
 } 
 
 @ @ - 398 , 8 + 397 , 7 @ @ public class StreamingHistogramBench 
 { 
 for ( int i = 0 ; i < ttls . length ; i + + ) 
 sparsenewStreamingHistogram100x60 . update ( sparsettls [ i ] ) ; 
 - sparsenewStreamingHistogram100x60 . flushHistogram ( ) ; 
 + sparsenewStreamingHistogram100x60 . build ( ) ; 
 
 } 
 - 
 } 
 diff - - git a / test / unit / org / apache / cassandra / utils / StreamingHistogramTest . java b / test / unit / org / apache / cassandra / utils / StreamingHistogramTest . java 
 index 21c736e . . b107600 100644 
 - - - a / test / unit / org / apache / cassandra / utils / StreamingHistogramTest . java 
 + + + b / test / unit / org / apache / cassandra / utils / StreamingHistogramTest . java 
 @ @ - 32 , 7 + 32 , 7 @ @ public class StreamingHistogramTest 
 @ Test 
 public void testFunction ( ) throws Exception 
 { 
 - StreamingHistogram hist = new StreamingHistogram ( 5 , 5 , 1 ) ; 
 + StreamingHistogram . StreamingHistogramBuilder hist = new StreamingHistogram . StreamingHistogramBuilder ( 5 , 5 , 1 ) ; 
 long [ ] samples = new long [ ] { 23 , 19 , 10 , 16 , 36 , 2 , 9 , 32 , 30 , 45 } ; 
 
 / / add 7 points to histogram of 5 bins 
 @ @ - 50 , 7 + 50 , 7 @ @ public class StreamingHistogramTest 
 expected1 . put ( 36 . 0 , 1L ) ; 
 
 Iterator < Map . Entry < Double , Long > > expectedItr = expected1 . entrySet ( ) . iterator ( ) ; 
 - for ( Map . Entry < Double , Long > actual : hist . getAsMap ( ) . entrySet ( ) ) 
 + for ( Map . Entry < Double , Long > actual : hist . build ( ) . getAsMap ( ) . entrySet ( ) ) 
 { 
 Map . Entry < Double , Long > entry = expectedItr . next ( ) ; 
 assertEquals ( entry . getKey ( ) , actual . getKey ( ) , 0 . 01 ) ; 
 @ @ - 58 , 12 + 58 , 13 @ @ public class StreamingHistogramTest 
 } 
 
 / / merge test 
 - StreamingHistogram hist2 = new StreamingHistogram ( 3 , 0 , 1 ) ; 
 + StreamingHistogram . StreamingHistogramBuilder hist2 = new StreamingHistogram . StreamingHistogramBuilder ( 3 , 0 , 1 ) ; 
 for ( int i = 7 ; i < samples . length ; i + + ) 
 { 
 hist2 . update ( samples [ i ] ) ; 
 } 
 - hist . merge ( hist2 ) ; 
 + hist . merge ( hist2 . build ( ) ) ; 
 + StreamingHistogram histBuilt = hist . build ( ) ; 
 / / should end up ( 2 , 1 ) , ( 9 . 5 , 2 ) , ( 19 . 33 , 3 ) , ( 32 . 67 , 3 ) , ( 45 , 1 ) 
 Map < Double , Long > expected2 = new LinkedHashMap < Double , Long > ( 5 ) ; 
 expected2 . put ( 2 . 0 , 1L ) ; 
 @ @ - 72 , 7 + 73 , 7 @ @ public class StreamingHistogramTest 
 expected2 . put ( 32 . 67 , 3L ) ; 
 expected2 . put ( 45 . 0 , 1L ) ; 
 expectedItr = expected2 . entrySet ( ) . iterator ( ) ; 
 - for ( Map . Entry < Double , Long > actual : hist . getAsMap ( ) . entrySet ( ) ) 
 + for ( Map . Entry < Double , Long > actual : histBuilt . getAsMap ( ) . entrySet ( ) ) 
 { 
 Map . Entry < Double , Long > entry = expectedItr . next ( ) ; 
 assertEquals ( entry . getKey ( ) , actual . getKey ( ) , 0 . 01 ) ; 
 @ @ - 80 , 22 + 81 , 23 @ @ public class StreamingHistogramTest 
 } 
 
 / / sum test 
 - assertEquals ( 3 . 28 , hist . sum ( 15 ) , 0 . 01 ) ; 
 + assertEquals ( 3 . 28 , histBuilt . sum ( 15 ) , 0 . 01 ) ; 
 / / sum test ( b > max ( hist ) ) 
 - assertEquals ( 10 . 0 , hist . sum ( 50 ) , 0 . 01 ) ; 
 + assertEquals ( 10 . 0 , histBuilt . sum ( 50 ) , 0 . 01 ) ; 
 } 
 
 @ Test 
 public void testSerDe ( ) throws Exception 
 { 
 - StreamingHistogram hist = new StreamingHistogram ( 5 , 0 , 1 ) ; 
 + StreamingHistogram . StreamingHistogramBuilder histogramBuilder = new StreamingHistogram . StreamingHistogramBuilder ( 5 , 0 , 1 ) ; 
 long [ ] samples = new long [ ] { 23 , 19 , 10 , 16 , 36 , 2 , 9 } ; 
 
 / / add 7 points to histogram of 5 bins 
 for ( int i = 0 ; i < samples . length ; i + + ) 
 { 
 - hist . update ( samples [ i ] ) ; 
 + histogramBuilder . update ( samples [ i ] ) ; 
 } 
 + StreamingHistogram hist = histogramBuilder . build ( ) ; 
 
 DataOutputBuffer out = new DataOutputBuffer ( ) ; 
 StreamingHistogram . serializer . serialize ( hist , out ) ; 
 @ @ - 123 , 7 + 125 , 7 @ @ public class StreamingHistogramTest 
 @ Test 
 public void testOverflow ( ) throws Exception 
 { 
 - StreamingHistogram hist = new StreamingHistogram ( 5 , 10 , 1 ) ; 
 + StreamingHistogram . StreamingHistogramBuilder histogramBuilder = new StreamingHistogram . StreamingHistogramBuilder ( 5 , 10 , 1 ) ; 
 long [ ] samples = new long [ ] { 23 , 19 , 10 , 16 , 36 , 2 , 9 , 32 , 30 , 45 , 31 , 
 32 , 32 , 33 , 34 , 35 , 70 , 78 , 80 , 90 , 100 , 
 32 , 32 , 33 , 34 , 35 , 70 , 78 , 80 , 90 , 100 
 @ @ - 132 , 20 + 134 , 21 @ @ public class StreamingHistogramTest 
 / / Hit the spool cap , force it to make bins 
 for ( int i = 0 ; i < samples . length ; i + + ) 
 { 
 - hist . update ( samples [ i ] ) ; 
 + histogramBuilder . update ( samples [ i ] ) ; 
 } 
 - assertEquals ( 5 , hist . getAsMap ( ) . keySet ( ) . size ( ) ) ; 
 + assertEquals ( 5 , histogramBuilder . build ( ) . getAsMap ( ) . keySet ( ) . size ( ) ) ; 
 
 } 
 
 @ Test 
 public void testRounding ( ) throws Exception 
 { 
 - StreamingHistogram hist = new StreamingHistogram ( 5 , 10 , 60 ) ; 
 + StreamingHistogram . StreamingHistogramBuilder histogramBuilder = new StreamingHistogram . StreamingHistogramBuilder ( 5 , 10 , 60 ) ; 
 long [ ] samples = new long [ ] { 59 , 60 , 119 , 180 , 181 , 300 } ; / / 60 , 60 , 120 , 180 , 240 , 300 
 for ( int i = 0 ; i < samples . length ; i + + ) 
 - hist . update ( samples [ i ] ) ; 
 + histogramBuilder . update ( samples [ i ] ) ; 
 
 + StreamingHistogram hist = histogramBuilder . build ( ) ; 
 assertEquals ( hist . getAsMap ( ) . keySet ( ) . size ( ) , ( int ) 5 ) ; 
 assertEquals ( ( long ) hist . getAsMap ( ) . get ( Double . valueOf ( 60 ) ) , ( long ) 2L ) ; 
 assertEquals ( ( long ) hist . getAsMap ( ) . get ( Double . valueOf ( 120 ) ) , ( long ) 1L ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 25c0217 . . 859e7f9 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 2 . 9 
 + * add - - migrate option to sstableupgrade and sstablescrub ( CASSANDRA - 5831 ) 
 * fix bulk - loading compressed sstables ( CASSANDRA - 5820 ) 
 * ( Hadoop ) fix quoting in CqlPagingRecordReader and CqlRecordWriter 
 ( CASSANDRA - 5824 ) 
 diff - - git a / src / java / org / apache / cassandra / db / SystemTable . java b / src / java / org / apache / cassandra / db / SystemTable . java 
 index 4c74df5 . . 318b34d 100644 
 - - - a / src / java / org / apache / cassandra / db / SystemTable . java 
 + + + b / src / java / org / apache / cassandra / db / SystemTable . java 
 @ @ - 147 , 6 + 147 , 7 @ @ public class SystemTable 
 ColumnFamilyStore oldStatusCfs = table . getColumnFamilyStore ( OLD _ STATUS _ CF ) ; 
 if ( oldStatusCfs . getSSTables ( ) . size ( ) > 0 ) 
 { 
 + logger . info ( " Old system data found in { } . { } ; migrating to new format in { } . { } " , Table . SYSTEM _ KS , OLD _ STATUS _ CF , Table . SYSTEM _ KS , LOCAL _ CF ) ; 
 SortedSet < ByteBuffer > cols = new TreeSet < ByteBuffer > ( BytesType . instance ) ; 
 cols . add ( ByteBufferUtil . bytes ( " ClusterName " ) ) ; 
 cols . add ( ByteBufferUtil . bytes ( " Token " ) ) ; 
 @ @ - 428 , 24 + 429 , 51 @ @ public class SystemTable 
 ex . initCause ( err ) ; 
 throw ex ; 
 } 
 - ColumnFamilyStore cfs = table . getColumnFamilyStore ( LOCAL _ CF ) ; 
 
 - String req = " SELECT cluster _ name FROM system . % s WHERE key = ' % s ' " ; 
 - UntypedResultSet result = processInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY ) ) ; 
 + String savedClusterName ; 
 
 - if ( result . isEmpty ( ) | | ! result . one ( ) . has ( " cluster _ name " ) ) 
 + / / See if there is still data in System . LocationInfo , indicating that the system data has not yet been 
 + / / upgraded by SystemTable . upgradeSystemData ( ) 
 + ColumnFamilyStore oldStatusCfs = table . getColumnFamilyStore ( OLD _ STATUS _ CF ) ; 
 + if ( oldStatusCfs . getSSTables ( ) . size ( ) > 0 ) 
 + { 
 + logger . debug ( " Detected system data in { } . { } , checking saved cluster name " , Table . SYSTEM _ KS , OLD _ STATUS _ CF ) ; 
 + SortedSet < ByteBuffer > cols = new TreeSet < ByteBuffer > ( BytesType . instance ) ; 
 + cols . add ( ByteBufferUtil . bytes ( " ClusterName " ) ) ; 
 + QueryFilter filter = QueryFilter . getNamesFilter ( decorate ( ByteBufferUtil . bytes ( " L " ) ) , new QueryPath ( OLD _ STATUS _ CF ) , cols ) ; 
 + ColumnFamily oldCf = oldStatusCfs . getColumnFamily ( filter ) ; 
 + try 
 + { 
 + savedClusterName = ByteBufferUtil . string ( oldCf . getColumn ( ByteBufferUtil . bytes ( " ClusterName " ) ) . value ( ) ) ; 
 + } 
 + catch ( CharacterCodingException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + else 
 { 
 - / / this is a brand new node 
 - if ( ! cfs . getSSTables ( ) . isEmpty ( ) ) 
 - throw new ConfigurationException ( " Found system table files , but they couldn ' t be loaded ! " ) ; 
 + ColumnFamilyStore cfs = table . getColumnFamilyStore ( LOCAL _ CF ) ; 
 
 - / / no system files . this is a new node . 
 - req = " INSERT INTO system . % s ( key , cluster _ name ) VALUES ( ' % s ' , ' % s ' ) " ; 
 - processInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY , DatabaseDescriptor . getClusterName ( ) ) ) ; 
 - return ; 
 + String req = " SELECT cluster _ name FROM system . % s WHERE key = ' % s ' " ; 
 + UntypedResultSet result = processInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY ) ) ; 
 + 
 + if ( result . isEmpty ( ) | | ! result . one ( ) . has ( " cluster _ name " ) ) 
 + { 
 + 
 + / / this is a brand new node 
 + if ( ! cfs . getSSTables ( ) . isEmpty ( ) ) 
 + throw new ConfigurationException ( " Found system table files , but they couldn ' t be loaded ! " ) ; 
 + 
 + / / no system files . this is a new node . 
 + req = " INSERT INTO system . % s ( key , cluster _ name ) VALUES ( ' % s ' , ' % s ' ) " ; 
 + processInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY , DatabaseDescriptor . getClusterName ( ) ) ) ; 
 + return ; 
 + } 
 + 
 + savedClusterName = result . one ( ) . getString ( " cluster _ name " ) ; 
 } 
 
 - String savedClusterName = result . one ( ) . getString ( " cluster _ name " ) ; 
 if ( ! DatabaseDescriptor . getClusterName ( ) . equals ( savedClusterName ) ) 
 throw new ConfigurationException ( " Saved cluster name " + savedClusterName + " ! = configured name " + DatabaseDescriptor . getClusterName ( ) ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 index 0542756 . . d59a7d1 100644 
 - - - a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 + + + b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 @ @ - 49 , 15 + 49 , 30 @ @ public class StandaloneScrubber 
 private static final String DEBUG _ OPTION = " debug " ; 
 private static final String HELP _ OPTION = " help " ; 
 private static final String MANIFEST _ CHECK _ OPTION = " manifest - check " ; 
 + private static final String MIGRATE _ OPTION = " migrate " ; 
 
 public static void main ( String args [ ] ) throws IOException 
 { 
 Options options = Options . parseArgs ( args ) ; 
 try 
 { 
 + OutputHandler handler = new OutputHandler . SystemOutput ( options . verbose , options . debug ) ; 
 + 
 / / Migrate sstables from pre - # 2749 to the correct location 
 if ( Directories . sstablesNeedsMigration ( ) ) 
 + { 
 + if ( ! options . migrate ) 
 + { 
 + System . err . println ( " Detected a pre - 1 . 1 data directory layout . For this tool to work , a migration " + 
 + " must be performed to the 1 . 1 + format for directories and filenames . Re - run " + 
 + TOOL _ NAME + " with the - - " + MIGRATE _ OPTION + " option to automatically " + 
 + " migrate * all * keyspaces and column families to the new layout . " ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + handler . output ( " Detected a pre - 1 . 1 data directory layout . All keyspace and column family directories " + 
 + " will be migrated to the 1 . 1 + format . " ) ; 
 Directories . migrateSSTables ( ) ; 
 + } 
 
 / / load keyspace descriptions . 
 DatabaseDescriptor . loadSchemas ( ) ; 
 @ @ - 72 , 7 + 87 , 6 @ @ public class StandaloneScrubber 
 ColumnFamilyStore cfs = table . getColumnFamilyStore ( options . cfName ) ; 
 String snapshotName = " pre - scrub - " + System . currentTimeMillis ( ) ; 
 
 - OutputHandler handler = new OutputHandler . SystemOutput ( options . verbose , options . debug ) ; 
 Directories . SSTableLister lister = cfs . directories . sstableLister ( ) . skipTemporary ( true ) ; 
 
 List < SSTableReader > sstables = new ArrayList < SSTableReader > ( ) ; 
 @ @ - 184 , 6 + 198 , 7 @ @ public class StandaloneScrubber 
 public boolean debug ; 
 public boolean verbose ; 
 public boolean manifestCheckOnly ; 
 + public boolean migrate ; 
 
 private Options ( String tableName , String cfName ) 
 { 
 @ @ - 222 , 6 + 237 , 7 @ @ public class StandaloneScrubber 
 opts . debug = cmd . hasOption ( DEBUG _ OPTION ) ; 
 opts . verbose = cmd . hasOption ( VERBOSE _ OPTION ) ; 
 opts . manifestCheckOnly = cmd . hasOption ( MANIFEST _ CHECK _ OPTION ) ; 
 + opts . migrate = cmd . hasOption ( MIGRATE _ OPTION ) ; 
 
 return opts ; 
 } 
 @ @ - 246 , 6 + 262 , 7 @ @ public class StandaloneScrubber 
 options . addOption ( " v " , VERBOSE _ OPTION , " verbose output " ) ; 
 options . addOption ( " h " , HELP _ OPTION , " display this help message " ) ; 
 options . addOption ( " m " , MANIFEST _ CHECK _ OPTION , " only check and repair the leveled manifest , without actually scrubbing the sstables " ) ; 
 + options . addOption ( null , MIGRATE _ OPTION , " convert directory layout and filenames to 1 . 1 + structure " ) ; 
 return options ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java b / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java 
 index 357e99c . . 16bf588 100644 
 - - - a / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java 
 + + + b / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java 
 @ @ - 47 , 12 + 47 , 30 @ @ public class StandaloneUpgrader 
 private static final String TOOL _ NAME = " sstableupgrade " ; 
 private static final String DEBUG _ OPTION = " debug " ; 
 private static final String HELP _ OPTION = " help " ; 
 + private static final String MIGRATE _ OPTION = " migrate " ; 
 
 public static void main ( String args [ ] ) throws IOException 
 { 
 Options options = Options . parseArgs ( args ) ; 
 try 
 { 
 + OutputHandler handler = new OutputHandler . SystemOutput ( false , options . debug ) ; 
 + / / Migrate sstables from pre - # 2749 to the correct location 
 + if ( Directories . sstablesNeedsMigration ( ) ) 
 + { 
 + if ( ! options . migrate ) 
 + { 
 + System . err . println ( " Detected a pre - 1 . 1 data directory layout . For this tool to work , a migration " + 
 + " must be performed to the 1 . 1 + format for directories and filenames . Re - run " + 
 + TOOL _ NAME + " with the - - " + MIGRATE _ OPTION + " option to automatically " + 
 + " migrate * all * keyspaces and column families to the new layout . " ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + handler . output ( " Detected a pre - 1 . 1 data directory layout . All keyspace and column family directories " + 
 + " will be migrated to the 1 . 1 + format . " ) ; 
 + Directories . migrateSSTables ( ) ; 
 + } 
 + 
 / / load keyspace descriptions . 
 DatabaseDescriptor . loadSchemas ( ) ; 
 
 @ @ - 64 , 7 + 82 , 6 @ @ public class StandaloneUpgrader 
 Table table = Table . openWithoutSSTables ( options . keyspace ) ; 
 ColumnFamilyStore cfs = table . getColumnFamilyStore ( options . cf ) ; 
 
 - OutputHandler handler = new OutputHandler . SystemOutput ( false , options . debug ) ; 
 Directories . SSTableLister lister = cfs . directories . sstableLister ( ) ; 
 if ( options . snapshot ! = null ) 
 lister . onlyBackups ( true ) . snapshots ( options . snapshot ) ; 
 @ @ - 137 , 6 + 154 , 7 @ @ public class StandaloneUpgrader 
 public final String snapshot ; 
 
 public boolean debug ; 
 + public boolean migrate ; 
 
 private Options ( String keyspace , String cf , String snapshot ) 
 { 
 @ @ - 176 , 6 + 194 , 7 @ @ public class StandaloneUpgrader 
 Options opts = new Options ( keyspace , cf , snapshot ) ; 
 
 opts . debug = cmd . hasOption ( DEBUG _ OPTION ) ; 
 + opts . migrate = cmd . hasOption ( MIGRATE _ OPTION ) ; 
 
 return opts ; 
 } 
 @ @ - 197 , 6 + 216 , 7 @ @ public class StandaloneUpgrader 
 { 
 CmdLineOptions options = new CmdLineOptions ( ) ; 
 options . addOption ( null , DEBUG _ OPTION , " display stack traces " ) ; 
 + options . addOption ( null , MIGRATE _ OPTION , " convert directory layout and filenames to 1 . 1 + structure " ) ; 
 options . addOption ( " h " , HELP _ OPTION , " display this help message " ) ; 
 return options ; 
 }
