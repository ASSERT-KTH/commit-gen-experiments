BLEU SCORE: 0.040583489434387374

TEST MSG: Make FROZEN and TUPLE unreserved keywords
GENERATED MSG: Allow empty blob literals in CQL3

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 64fa75f . . 8854261 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 4 <nl> + * Make FROZEN and TUPLE unreserved keywords in CQL ( CASSANDRA - 9047 ) <nl> * Prevent AssertionError from SizeEstimatesRecorder ( CASSANDRA - 9034 ) <nl> * Avoid overwriting index summaries for sstables with an older format that <nl> does not support downsampling ; rebuild summaries on startup when this <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> index a1545d3 . . b7d1b09 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Cql . g <nl> + + + b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> @ @ - 1234 , 6 + 1234 , 8 @ @ basic _ unreserved _ keyword returns [ String str ] <nl> | K _ DISTINCT <nl> | K _ CONTAINS <nl> | K _ STATIC <nl> + | K _ FROZEN <nl> + | K _ TUPLE <nl> ) { $ str = $ k . text ; } <nl> ; <nl>
NEAREST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / io / CompactSerializerTest . java b / test / unit / org / apache / cassandra / io / CompactSerializerTest . java <nl> deleted file mode 100644 <nl> index a436702 . . 0000000 <nl> - - - a / test / unit / org / apache / cassandra / io / CompactSerializerTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 163 + 0 , 0 @ @ <nl> - package org . apache . cassandra . io ; <nl> - / * <nl> - * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , <nl> - * software distributed under the License is distributed on an <nl> - * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> - * KIND , either express or implied . See the License for the <nl> - * specific language governing permissions and limitations <nl> - * under the License . <nl> - * <nl> - * / <nl> - <nl> - <nl> - import org . apache . cassandra . SchemaLoader ; <nl> - import org . junit . BeforeClass ; <nl> - import org . junit . Test ; <nl> - <nl> - import java . io . File ; <nl> - import java . lang . reflect . ParameterizedType ; <nl> - import java . lang . reflect . Type ; <nl> - import java . util . ArrayList ; <nl> - import java . util . HashSet ; <nl> - import java . util . List ; <nl> - import java . util . Set ; <nl> - <nl> - public class CompactSerializerTest extends SchemaLoader <nl> - { <nl> - private static Set < String > expectedClassNames ; <nl> - private static List < String > discoveredClassNames ; <nl> - <nl> - @ BeforeClass <nl> - public static void scanClasspath ( ) <nl> - { <nl> - expectedClassNames = new HashSet < String > ( ) ; <nl> - expectedClassNames . add ( " RangeSliceCommandSerializer " ) ; <nl> - expectedClassNames . add ( " IndexScanCommandSerializer " ) ; <nl> - expectedClassNames . add ( " ReadCommandSerializer " ) ; <nl> - expectedClassNames . add ( " ReadResponseSerializer " ) ; <nl> - expectedClassNames . add ( " RowSerializer " ) ; <nl> - expectedClassNames . add ( " RowMutationSerializer " ) ; <nl> - expectedClassNames . add ( " SliceByNamesReadCommandSerializer " ) ; <nl> - expectedClassNames . add ( " SliceFromReadCommandSerializer " ) ; <nl> - expectedClassNames . add ( " TruncateResponseSerializer " ) ; <nl> - expectedClassNames . add ( " TruncationSerializer " ) ; <nl> - expectedClassNames . add ( " WriteResponseSerializer " ) ; <nl> - expectedClassNames . add ( " EndpointStateSerializer " ) ; <nl> - expectedClassNames . add ( " GossipDigestSerializer " ) ; <nl> - expectedClassNames . add ( " GossipDigestAck2Serializer " ) ; <nl> - expectedClassNames . add ( " GossipDigestAckSerializer " ) ; <nl> - expectedClassNames . add ( " GossipDigestSynSerializer " ) ; <nl> - expectedClassNames . add ( " HeartBeatStateSerializer " ) ; <nl> - expectedClassNames . add ( " VersionedValueSerializer " ) ; <nl> - expectedClassNames . add ( " PendingFileSerializer " ) ; <nl> - expectedClassNames . add ( " StreamHeaderSerializer " ) ; <nl> - expectedClassNames . add ( " FileStatusSerializer " ) ; <nl> - expectedClassNames . add ( " StreamRequestSerializer " ) ; <nl> - expectedClassNames . add ( " CounterMutationSerializer " ) ; <nl> - expectedClassNames . add ( " HashableSerializer " ) ; <nl> - expectedClassNames . add ( " StreamingRepairTaskSerializer " ) ; <nl> - expectedClassNames . add ( " AbstractBoundsSerializer " ) ; <nl> - expectedClassNames . add ( " SnapshotCommandSerializer " ) ; <nl> - expectedClassNames . add ( " RangeSliceReplySerializer " ) ; <nl> - expectedClassNames . add ( " StringSerializer " ) ; <nl> - expectedClassNames . add ( " CallbackDeterminedSerializer " ) ; <nl> - expectedClassNames . add ( " TreeRequestSerializer " ) ; <nl> - expectedClassNames . add ( " ValidatorSerializer " ) ; <nl> - expectedClassNames . add ( " MigrationsSerializer " ) ; <nl> - expectedClassNames . add ( " InnerSerializer " ) ; <nl> - expectedClassNames . add ( " LeafSerializer " ) ; <nl> - expectedClassNames . add ( " MerkleTreeSerializer " ) ; <nl> - expectedClassNames . add ( " UUIDSerializer " ) ; <nl> - expectedClassNames . add ( " Serializer " ) ; <nl> - expectedClassNames . add ( " ColumnFamilySerializer " ) ; <nl> - expectedClassNames . add ( " CompressionInfoSerializer " ) ; <nl> - expectedClassNames . add ( " ChunkSerializer " ) ; <nl> - expectedClassNames . add ( " EchoMessageSerializer " ) ; <nl> - <nl> - discoveredClassNames = new ArrayList < String > ( ) ; <nl> - String cp = System . getProperty ( " java . class . path " ) ; <nl> - assert cp ! = null ; <nl> - String [ ] parts = cp . split ( File . pathSeparator , - 1 ) ; <nl> - class DirScanner <nl> - { <nl> - void scan ( File f , String ctx ) <nl> - { <nl> - String newCtx = ctx = = null ? f . getName ( ) . equals ( " org " ) ? f . getName ( ) : null : ctx + " . " + f . getName ( ) ; <nl> - if ( f . isDirectory ( ) ) <nl> - { <nl> - for ( File child : f . listFiles ( ) ) <nl> - { <nl> - scan ( child , newCtx ) ; <nl> - } <nl> - } <nl> - else if ( f . getName ( ) . endsWith ( " . class " ) ) <nl> - { <nl> - String fName = f . getName ( ) ; <nl> - String className = ctx + " . " + fName . substring ( 0 , fName . lastIndexOf ( ' . ' ) ) ; <nl> - try <nl> - { <nl> - Class cls = Class . forName ( className ) ; <nl> - String simpleName = cls . getSimpleName ( ) ; <nl> - classTraversal : while ( cls ! = null ) <nl> - { <nl> - Type [ ] interfaces = cls . getGenericInterfaces ( ) ; <nl> - for ( Type t : interfaces ) <nl> - { <nl> - if ( t instanceof ParameterizedType ) <nl> - { <nl> - ParameterizedType pt = ( ParameterizedType ) t ; <nl> - if ( ( ( Class ) pt . getRawType ( ) ) . getSimpleName ( ) . equals ( " IVersionedSerializer " ) ) <nl> - { <nl> - discoveredClassNames . add ( simpleName ) ; <nl> - break classTraversal ; <nl> - } <nl> - } <nl> - } <nl> - cls = cls . getSuperclass ( ) ; <nl> - } <nl> - } <nl> - catch ( ClassNotFoundException ex ) <nl> - { <nl> - throw new RuntimeException ( ex ) ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> - <nl> - DirScanner dirScanner = new DirScanner ( ) ; <nl> - for ( String cpItem : parts ) <nl> - { <nl> - File f = new File ( cpItem ) ; <nl> - if ( f . exists ( ) & & f . isDirectory ( ) ) <nl> - dirScanner . scan ( f , null ) ; <nl> - } <nl> - } <nl> - <nl> - / * * look for classes I expect to find . * / <nl> - @ Test <nl> - public void verifyAllSimpleNamesTest ( ) <nl> - { <nl> - for ( String clsName : expectedClassNames ) <nl> - assert discoveredClassNames . contains ( clsName ) : clsName + " was not discovered " ; <nl> - } <nl> - <nl> - / * * look for classes I do not expect to find . * / <nl> - @ Test <nl> - public void noOthersTest ( ) <nl> - { <nl> - for ( String clsName : discoveredClassNames ) <nl> - assert expectedClassNames . contains ( clsName ) : clsName + " was discovered " ; <nl> - assert true ; <nl> - } <nl> - }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 64fa75f . . 8854261 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 4 
 + * Make FROZEN and TUPLE unreserved keywords in CQL ( CASSANDRA - 9047 ) 
 * Prevent AssertionError from SizeEstimatesRecorder ( CASSANDRA - 9034 ) 
 * Avoid overwriting index summaries for sstables with an older format that 
 does not support downsampling ; rebuild summaries on startup when this 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g 
 index a1545d3 . . b7d1b09 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Cql . g 
 + + + b / src / java / org / apache / cassandra / cql3 / Cql . g 
 @ @ - 1234 , 6 + 1234 , 8 @ @ basic _ unreserved _ keyword returns [ String str ] 
 | K _ DISTINCT 
 | K _ CONTAINS 
 | K _ STATIC 
 + | K _ FROZEN 
 + | K _ TUPLE 
 ) { $ str = $ k . text ; } 
 ; 


NEAREST DIFF:
diff - - git a / test / unit / org / apache / cassandra / io / CompactSerializerTest . java b / test / unit / org / apache / cassandra / io / CompactSerializerTest . java 
 deleted file mode 100644 
 index a436702 . . 0000000 
 - - - a / test / unit / org / apache / cassandra / io / CompactSerializerTest . java 
 + + + / dev / null 
 @ @ - 1 , 163 + 0 , 0 @ @ 
 - package org . apache . cassandra . io ; 
 - / * 
 - * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , 
 - * software distributed under the License is distributed on an 
 - * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 - * KIND , either express or implied . See the License for the 
 - * specific language governing permissions and limitations 
 - * under the License . 
 - * 
 - * / 
 - 
 - 
 - import org . apache . cassandra . SchemaLoader ; 
 - import org . junit . BeforeClass ; 
 - import org . junit . Test ; 
 - 
 - import java . io . File ; 
 - import java . lang . reflect . ParameterizedType ; 
 - import java . lang . reflect . Type ; 
 - import java . util . ArrayList ; 
 - import java . util . HashSet ; 
 - import java . util . List ; 
 - import java . util . Set ; 
 - 
 - public class CompactSerializerTest extends SchemaLoader 
 - { 
 - private static Set < String > expectedClassNames ; 
 - private static List < String > discoveredClassNames ; 
 - 
 - @ BeforeClass 
 - public static void scanClasspath ( ) 
 - { 
 - expectedClassNames = new HashSet < String > ( ) ; 
 - expectedClassNames . add ( " RangeSliceCommandSerializer " ) ; 
 - expectedClassNames . add ( " IndexScanCommandSerializer " ) ; 
 - expectedClassNames . add ( " ReadCommandSerializer " ) ; 
 - expectedClassNames . add ( " ReadResponseSerializer " ) ; 
 - expectedClassNames . add ( " RowSerializer " ) ; 
 - expectedClassNames . add ( " RowMutationSerializer " ) ; 
 - expectedClassNames . add ( " SliceByNamesReadCommandSerializer " ) ; 
 - expectedClassNames . add ( " SliceFromReadCommandSerializer " ) ; 
 - expectedClassNames . add ( " TruncateResponseSerializer " ) ; 
 - expectedClassNames . add ( " TruncationSerializer " ) ; 
 - expectedClassNames . add ( " WriteResponseSerializer " ) ; 
 - expectedClassNames . add ( " EndpointStateSerializer " ) ; 
 - expectedClassNames . add ( " GossipDigestSerializer " ) ; 
 - expectedClassNames . add ( " GossipDigestAck2Serializer " ) ; 
 - expectedClassNames . add ( " GossipDigestAckSerializer " ) ; 
 - expectedClassNames . add ( " GossipDigestSynSerializer " ) ; 
 - expectedClassNames . add ( " HeartBeatStateSerializer " ) ; 
 - expectedClassNames . add ( " VersionedValueSerializer " ) ; 
 - expectedClassNames . add ( " PendingFileSerializer " ) ; 
 - expectedClassNames . add ( " StreamHeaderSerializer " ) ; 
 - expectedClassNames . add ( " FileStatusSerializer " ) ; 
 - expectedClassNames . add ( " StreamRequestSerializer " ) ; 
 - expectedClassNames . add ( " CounterMutationSerializer " ) ; 
 - expectedClassNames . add ( " HashableSerializer " ) ; 
 - expectedClassNames . add ( " StreamingRepairTaskSerializer " ) ; 
 - expectedClassNames . add ( " AbstractBoundsSerializer " ) ; 
 - expectedClassNames . add ( " SnapshotCommandSerializer " ) ; 
 - expectedClassNames . add ( " RangeSliceReplySerializer " ) ; 
 - expectedClassNames . add ( " StringSerializer " ) ; 
 - expectedClassNames . add ( " CallbackDeterminedSerializer " ) ; 
 - expectedClassNames . add ( " TreeRequestSerializer " ) ; 
 - expectedClassNames . add ( " ValidatorSerializer " ) ; 
 - expectedClassNames . add ( " MigrationsSerializer " ) ; 
 - expectedClassNames . add ( " InnerSerializer " ) ; 
 - expectedClassNames . add ( " LeafSerializer " ) ; 
 - expectedClassNames . add ( " MerkleTreeSerializer " ) ; 
 - expectedClassNames . add ( " UUIDSerializer " ) ; 
 - expectedClassNames . add ( " Serializer " ) ; 
 - expectedClassNames . add ( " ColumnFamilySerializer " ) ; 
 - expectedClassNames . add ( " CompressionInfoSerializer " ) ; 
 - expectedClassNames . add ( " ChunkSerializer " ) ; 
 - expectedClassNames . add ( " EchoMessageSerializer " ) ; 
 - 
 - discoveredClassNames = new ArrayList < String > ( ) ; 
 - String cp = System . getProperty ( " java . class . path " ) ; 
 - assert cp ! = null ; 
 - String [ ] parts = cp . split ( File . pathSeparator , - 1 ) ; 
 - class DirScanner 
 - { 
 - void scan ( File f , String ctx ) 
 - { 
 - String newCtx = ctx = = null ? f . getName ( ) . equals ( " org " ) ? f . getName ( ) : null : ctx + " . " + f . getName ( ) ; 
 - if ( f . isDirectory ( ) ) 
 - { 
 - for ( File child : f . listFiles ( ) ) 
 - { 
 - scan ( child , newCtx ) ; 
 - } 
 - } 
 - else if ( f . getName ( ) . endsWith ( " . class " ) ) 
 - { 
 - String fName = f . getName ( ) ; 
 - String className = ctx + " . " + fName . substring ( 0 , fName . lastIndexOf ( ' . ' ) ) ; 
 - try 
 - { 
 - Class cls = Class . forName ( className ) ; 
 - String simpleName = cls . getSimpleName ( ) ; 
 - classTraversal : while ( cls ! = null ) 
 - { 
 - Type [ ] interfaces = cls . getGenericInterfaces ( ) ; 
 - for ( Type t : interfaces ) 
 - { 
 - if ( t instanceof ParameterizedType ) 
 - { 
 - ParameterizedType pt = ( ParameterizedType ) t ; 
 - if ( ( ( Class ) pt . getRawType ( ) ) . getSimpleName ( ) . equals ( " IVersionedSerializer " ) ) 
 - { 
 - discoveredClassNames . add ( simpleName ) ; 
 - break classTraversal ; 
 - } 
 - } 
 - } 
 - cls = cls . getSuperclass ( ) ; 
 - } 
 - } 
 - catch ( ClassNotFoundException ex ) 
 - { 
 - throw new RuntimeException ( ex ) ; 
 - } 
 - } 
 - } 
 - } 
 - 
 - DirScanner dirScanner = new DirScanner ( ) ; 
 - for ( String cpItem : parts ) 
 - { 
 - File f = new File ( cpItem ) ; 
 - if ( f . exists ( ) & & f . isDirectory ( ) ) 
 - dirScanner . scan ( f , null ) ; 
 - } 
 - } 
 - 
 - / * * look for classes I expect to find . * / 
 - @ Test 
 - public void verifyAllSimpleNamesTest ( ) 
 - { 
 - for ( String clsName : expectedClassNames ) 
 - assert discoveredClassNames . contains ( clsName ) : clsName + " was not discovered " ; 
 - } 
 - 
 - / * * look for classes I do not expect to find . * / 
 - @ Test 
 - public void noOthersTest ( ) 
 - { 
 - for ( String clsName : discoveredClassNames ) 
 - assert expectedClassNames . contains ( clsName ) : clsName + " was discovered " ; 
 - assert true ; 
 - } 
 - }
