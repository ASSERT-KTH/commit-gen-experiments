BLEU SCORE: 0.03283637368030199

TEST MSG: Add sequence distribution type to cassandra stress
GENERATED MSG: Log Merkle tree precision stats

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index fd843dd . . 12bedfa 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 10 <nl> + * Add sequence distribution type to cassandra stress ( CASSANDRA - 12490 ) <nl> * " SELECT * FROM foo LIMIT ; " does not error out ( CASSANDRA - 12154 ) <nl> * Define executeLocally ( ) at the ReadQuery Level ( CASSANDRA - 12474 ) <nl> * Extend read / write failure messages with a map of replica addresses <nl> diff - - git a / tools / cqlstress - counter - example . yaml b / tools / cqlstress - counter - example . yaml <nl> index f8f70ea . . 9084e84 100644 <nl> - - - a / tools / cqlstress - counter - example . yaml <nl> + + + b / tools / cqlstress - counter - example . yaml <nl> @ @ - 48 , 6 + 48 , 7 @ @ table _ definition : | <nl> # GAUSSIAN ( min . . max , mean , stdev ) A gaussian / normal distribution , with explicitly defined mean and stdev <nl> # UNIFORM ( min . . max ) A uniform distribution over the range [ min , max ] <nl> # FIXED ( val ) A fixed distribution , always returning the same value <nl> + # SEQ ( min . . max ) A fixed sequence , returning values from min to max sequentially , wrapping if necessary . <nl> # Aliases : extr , gauss , normal , norm , weibull <nl> # <nl> # If preceded by ~ , the distribution is inverted <nl> diff - - git a / tools / cqlstress - example . yaml b / tools / cqlstress - example . yaml <nl> index 835a4cb . . b2b915d 100644 <nl> - - - a / tools / cqlstress - example . yaml <nl> + + + b / tools / cqlstress - example . yaml <nl> @ @ - 59 , 6 + 59 , 7 @ @ table _ definition : | <nl> # GAUSSIAN ( min . . max , mean , stdev ) A gaussian / normal distribution , with explicitly defined mean and stdev <nl> # UNIFORM ( min . . max ) A uniform distribution over the range [ min , max ] <nl> # FIXED ( val ) A fixed distribution , always returning the same value <nl> + # SEQ ( min . . max ) A fixed sequence , returning values from min to max sequentially , wrapping if necessary . <nl> # Aliases : extr , gauss , normal , norm , weibull <nl> # <nl> # If preceded by ~ , the distribution is inverted <nl> diff - - git a / tools / cqlstress - insanity - example . yaml b / tools / cqlstress - insanity - example . yaml <nl> index a286625 . . 35bcd4a 100644 <nl> - - - a / tools / cqlstress - insanity - example . yaml <nl> + + + b / tools / cqlstress - insanity - example . yaml <nl> @ @ - 58 , 6 + 58 , 7 @ @ table _ definition : | <nl> # GAUSSIAN ( min . . max , mean , stdev ) A gaussian / normal distribution , with explicitly defined mean and stdev <nl> # UNIFORM ( min . . max ) A uniform distribution over the range [ min , max ] <nl> # FIXED ( val ) A fixed distribution , always returning the same value <nl> + # SEQ ( min . . max ) A fixed sequence , returning values from min to max sequentially , wrapping if necessary . <nl> # Aliases : extr , gauss , normal , norm , weibull <nl> # <nl> # If preceded by ~ , the distribution is inverted <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / generate / DistributionSequence . java b / tools / stress / src / org / apache / cassandra / stress / generate / DistributionSequence . java <nl> new file mode 100644 <nl> index 0000000 . . 424c661 <nl> - - - / dev / null <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / generate / DistributionSequence . java <nl> @ @ - 0 , 0 + 1 , 69 @ @ <nl> + / * <nl> + * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * <nl> + * / <nl> + <nl> + package org . apache . cassandra . stress . generate ; <nl> + <nl> + import java . util . concurrent . atomic . AtomicLong ; <nl> + <nl> + public class DistributionSequence extends Distribution <nl> + { <nl> + <nl> + private final long start ; <nl> + private final long totalCount ; <nl> + private final AtomicLong next = new AtomicLong ( ) ; <nl> + <nl> + public DistributionSequence ( long start , long end ) <nl> + { <nl> + if ( start > end ) <nl> + throw new IllegalStateException ( ) ; <nl> + this . start = start ; <nl> + this . totalCount = 1 + end - start ; <nl> + } <nl> + <nl> + private long nextWithWrap ( ) <nl> + { <nl> + long next = this . next . getAndIncrement ( ) ; <nl> + return start + ( next % totalCount ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public long next ( ) <nl> + { <nl> + return nextWithWrap ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public double nextDouble ( ) <nl> + { <nl> + return nextWithWrap ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public long inverseCumProb ( double cumProb ) <nl> + { <nl> + return ( long ) ( start + ( totalCount - 1 ) * cumProb ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void setSeed ( long seed ) { } <nl> + <nl> + } <nl> + <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / OptionDistribution . java b / tools / stress / src / org / apache / cassandra / stress / settings / OptionDistribution . java <nl> index 6c18fbb . . f613985 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / settings / OptionDistribution . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / settings / OptionDistribution . java <nl> @ @ - 124 , 6 + 124 , 7 @ @ public class OptionDistribution extends Option <nl> GroupedOptions . formatMultiLine ( " GAUSSIAN ( min . . max , mean , stdev ) " , " A gaussian / normal distribution , with explicitly defined mean and stdev " ) , <nl> GroupedOptions . formatMultiLine ( " UNIFORM ( min . . max ) " , " A uniform distribution over the range [ min , max ] " ) , <nl> GroupedOptions . formatMultiLine ( " FIXED ( val ) " , " A fixed distribution , always returning the same value " ) , <nl> + GroupedOptions . formatMultiLine ( " SEQ ( min . . max ) " , " A fixed sequence , returning values from min to max sequentially , wrapping if necessary . " ) , <nl> " Preceding the name with ~ will invert the distribution , e . g . ~ exp ( 1 . . 10 ) will yield 10 most , instead of least , often " , <nl> " Aliases : extr , qextr , gauss , normal , norm , weibull " <nl> ) ; <nl> @ @ - 166 , 6 + 167 , 7 @ @ public class OptionDistribution extends Option <nl> lookup . put ( " norm " , lookup . get ( " gaussian " ) ) ; <nl> lookup . put ( " uniform " , new UniformImpl ( ) ) ; <nl> lookup . put ( " fixed " , new FixedImpl ( ) ) ; <nl> + lookup . put ( " seq " , new SequenceImpl ( ) ) ; <nl> LOOKUP = lookup ; <nl> } <nl> <nl> @ @ - 339 , 18 + 341 , 49 @ @ public class OptionDistribution extends Option <nl> public DistributionFactory getFactory ( List < String > params ) <nl> { <nl> if ( params . size ( ) ! = 1 ) <nl> - throw new IllegalArgumentException ( " Invalid parameter list for uniform distribution : " + params ) ; <nl> + throw new IllegalArgumentException ( " Invalid parameter list for fixed distribution : " + params ) ; <nl> try <nl> { <nl> final long key = parseLong ( params . get ( 0 ) ) ; <nl> return new FixedFactory ( key ) ; <nl> } catch ( Exception ignore ) <nl> { <nl> - throw new IllegalArgumentException ( " Invalid parameter list for uniform distribution : " + params ) ; <nl> + throw new IllegalArgumentException ( " Invalid parameter list for fixed distribution : " + params ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + private static final class SequenceImpl implements Impl <nl> + { <nl> + <nl> + @ Override <nl> + public DistributionFactory getFactory ( List < String > params ) <nl> + { <nl> + if ( params . size ( ) ! = 1 ) <nl> + throw new IllegalArgumentException ( " Invalid parameter list for sequence distribution : " + params ) ; <nl> + final long min ; <nl> + final long max ; <nl> + try <nl> + { <nl> + String [ ] bounds = params . get ( 0 ) . split ( " \ \ . \ \ . + " ) ; <nl> + min = parseLong ( bounds [ 0 ] ) ; <nl> + max = parseLong ( bounds [ 1 ] ) ; <nl> + } catch ( Exception ignore ) <nl> + { <nl> + throw new IllegalArgumentException ( " Invalid parameter list for sequence distribution : " + params ) ; <nl> } <nl> + if ( min = = max ) <nl> + throw new IllegalArgumentException ( " Invalid parameter list for sequence distribution ( min = = max ) : " + params ) ; <nl> + <nl> + if ( min > max ) <nl> + throw new IllegalArgumentException ( " Invalid parameter list for sequence distribution ( min > max ) : " + params ) ; <nl> + <nl> + return new SequenceFactory ( min , max ) ; <nl> + <nl> } <nl> } <nl> <nl> + <nl> private static final class InverseFactory implements DistributionFactory <nl> { <nl> final DistributionFactory wrapped ; <nl> @ @ - 492 , 6 + 525 , 29 @ @ public class OptionDistribution extends Option <nl> <nl> } <nl> <nl> + private static final class SequenceFactory implements DistributionFactory <nl> + { <nl> + final long start ; <nl> + final long end ; <nl> + <nl> + private SequenceFactory ( long start , long end ) <nl> + { <nl> + this . start = start ; <nl> + this . end = end ; <nl> + } <nl> + <nl> + @ Override <nl> + public Distribution get ( ) <nl> + { <nl> + return new DistributionSequence ( start , end ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getConfigAsString ( ) { return String . format ( " Sequence : start = % d , end = % d " , start , end ) ; } <nl> + <nl> + } <nl> + <nl> + <nl> @ Override <nl> public int hashCode ( ) <nl> { <nl> diff - - git a / tools / stress / test / unit / org / apache / cassandra / stress / generate / DistributionSequenceTest . java b / tools / stress / test / unit / org / apache / cassandra / stress / generate / DistributionSequenceTest . java <nl> new file mode 100644 <nl> index 0000000 . . 6f184d7 <nl> - - - / dev / null <nl> + + + b / tools / stress / test / unit / org / apache / cassandra / stress / generate / DistributionSequenceTest . java <nl> @ @ - 0 , 0 + 1 , 99 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . stress . generate ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . stress . settings . OptionDistribution ; <nl> + <nl> + import static org . junit . Assert . * ; <nl> + <nl> + public class DistributionSequenceTest <nl> + { <nl> + @ Test <nl> + public void simpleSequence ( ) throws Exception <nl> + { <nl> + Distribution dist = OptionDistribution . get ( " seq ( 1 . . 10 ) " ) . get ( ) ; <nl> + assertTrue ( dist instanceof DistributionSequence ) ; <nl> + <nl> + assertEquals ( 1 , dist . minValue ( ) ) ; <nl> + assertEquals ( 10 , dist . maxValue ( ) ) ; <nl> + assertEquals ( 5 , dist . average ( ) ) ; <nl> + <nl> + assertEquals ( 1 , dist . inverseCumProb ( 0d ) ) ; <nl> + assertEquals ( 10 , dist . inverseCumProb ( 1d ) ) ; <nl> + <nl> + long min = dist . next ( ) ; <nl> + assertEquals ( 1 , min ) ; <nl> + <nl> + long last = min ; <nl> + for ( int i = 0 ; i < 9 ; i + + ) <nl> + { <nl> + long next = dist . next ( ) ; <nl> + assertEquals ( next , last + 1 ) ; / / increase by one each step <nl> + last = next ; <nl> + } <nl> + <nl> + assertEquals ( 1 , dist . next ( ) ) ; / / wrapping <nl> + } <nl> + <nl> + <nl> + @ Test <nl> + public void negValueSequence ( ) throws Exception <nl> + { <nl> + Distribution dist = OptionDistribution . get ( " seq ( - 1000 . . - 10 ) " ) . get ( ) ; <nl> + assertTrue ( dist instanceof DistributionSequence ) ; <nl> + <nl> + assertEquals ( - 1000 , dist . minValue ( ) ) ; <nl> + assertEquals ( - 10 , dist . maxValue ( ) ) ; <nl> + assertEquals ( - 504 , dist . average ( ) ) ; <nl> + <nl> + assertEquals ( - 1000 , dist . inverseCumProb ( 0d ) ) ; <nl> + assertEquals ( - 10 , dist . inverseCumProb ( 1d ) ) ; <nl> + <nl> + long min = dist . next ( ) ; <nl> + assertEquals ( - 1000 , min ) ; <nl> + <nl> + long last = min ; <nl> + long next = dist . next ( ) ; <nl> + while ( last < next ) <nl> + { <nl> + assertEquals ( next , last + 1 ) ; / / increase by one each step <nl> + last = next ; <nl> + next = dist . next ( ) ; <nl> + } <nl> + <nl> + assertEquals ( - 10 , last ) ; / / wrapping <nl> + assertEquals ( - 1000 , next ) ; / / wrapping <nl> + } <nl> + <nl> + @ Test <nl> + public void bigSequence ( ) throws Exception <nl> + { <nl> + Distribution dist = OptionDistribution . get ( String . format ( " seq ( 1 . . % d ) " , Long . MAX _ VALUE ) ) . get ( ) ; <nl> + assertTrue ( dist instanceof DistributionSequence ) ; <nl> + <nl> + assertEquals ( 1 , dist . minValue ( ) ) ; <nl> + assertEquals ( Long . MAX _ VALUE , dist . maxValue ( ) ) ; <nl> + <nl> + assertEquals ( 1 , dist . inverseCumProb ( 0d ) ) ; <nl> + assertEquals ( Long . MAX _ VALUE , dist . inverseCumProb ( 1d ) ) ; <nl> + <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 25c0217 . . 859e7f9 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 2 . 9 <nl> + * add - - migrate option to sstableupgrade and sstablescrub ( CASSANDRA - 5831 ) <nl> * fix bulk - loading compressed sstables ( CASSANDRA - 5820 ) <nl> * ( Hadoop ) fix quoting in CqlPagingRecordReader and CqlRecordWriter <nl> ( CASSANDRA - 5824 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / SystemTable . java b / src / java / org / apache / cassandra / db / SystemTable . java <nl> index 4c74df5 . . 318b34d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SystemTable . java <nl> + + + b / src / java / org / apache / cassandra / db / SystemTable . java <nl> @ @ - 147 , 6 + 147 , 7 @ @ public class SystemTable <nl> ColumnFamilyStore oldStatusCfs = table . getColumnFamilyStore ( OLD _ STATUS _ CF ) ; <nl> if ( oldStatusCfs . getSSTables ( ) . size ( ) > 0 ) <nl> { <nl> + logger . info ( " Old system data found in { } . { } ; migrating to new format in { } . { } " , Table . SYSTEM _ KS , OLD _ STATUS _ CF , Table . SYSTEM _ KS , LOCAL _ CF ) ; <nl> SortedSet < ByteBuffer > cols = new TreeSet < ByteBuffer > ( BytesType . instance ) ; <nl> cols . add ( ByteBufferUtil . bytes ( " ClusterName " ) ) ; <nl> cols . add ( ByteBufferUtil . bytes ( " Token " ) ) ; <nl> @ @ - 428 , 24 + 429 , 51 @ @ public class SystemTable <nl> ex . initCause ( err ) ; <nl> throw ex ; <nl> } <nl> - ColumnFamilyStore cfs = table . getColumnFamilyStore ( LOCAL _ CF ) ; <nl> <nl> - String req = " SELECT cluster _ name FROM system . % s WHERE key = ' % s ' " ; <nl> - UntypedResultSet result = processInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY ) ) ; <nl> + String savedClusterName ; <nl> <nl> - if ( result . isEmpty ( ) | | ! result . one ( ) . has ( " cluster _ name " ) ) <nl> + / / See if there is still data in System . LocationInfo , indicating that the system data has not yet been <nl> + / / upgraded by SystemTable . upgradeSystemData ( ) <nl> + ColumnFamilyStore oldStatusCfs = table . getColumnFamilyStore ( OLD _ STATUS _ CF ) ; <nl> + if ( oldStatusCfs . getSSTables ( ) . size ( ) > 0 ) <nl> + { <nl> + logger . debug ( " Detected system data in { } . { } , checking saved cluster name " , Table . SYSTEM _ KS , OLD _ STATUS _ CF ) ; <nl> + SortedSet < ByteBuffer > cols = new TreeSet < ByteBuffer > ( BytesType . instance ) ; <nl> + cols . add ( ByteBufferUtil . bytes ( " ClusterName " ) ) ; <nl> + QueryFilter filter = QueryFilter . getNamesFilter ( decorate ( ByteBufferUtil . bytes ( " L " ) ) , new QueryPath ( OLD _ STATUS _ CF ) , cols ) ; <nl> + ColumnFamily oldCf = oldStatusCfs . getColumnFamily ( filter ) ; <nl> + try <nl> + { <nl> + savedClusterName = ByteBufferUtil . string ( oldCf . getColumn ( ByteBufferUtil . bytes ( " ClusterName " ) ) . value ( ) ) ; <nl> + } <nl> + catch ( CharacterCodingException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + else <nl> { <nl> - / / this is a brand new node <nl> - if ( ! cfs . getSSTables ( ) . isEmpty ( ) ) <nl> - throw new ConfigurationException ( " Found system table files , but they couldn ' t be loaded ! " ) ; <nl> + ColumnFamilyStore cfs = table . getColumnFamilyStore ( LOCAL _ CF ) ; <nl> <nl> - / / no system files . this is a new node . <nl> - req = " INSERT INTO system . % s ( key , cluster _ name ) VALUES ( ' % s ' , ' % s ' ) " ; <nl> - processInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY , DatabaseDescriptor . getClusterName ( ) ) ) ; <nl> - return ; <nl> + String req = " SELECT cluster _ name FROM system . % s WHERE key = ' % s ' " ; <nl> + UntypedResultSet result = processInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY ) ) ; <nl> + <nl> + if ( result . isEmpty ( ) | | ! result . one ( ) . has ( " cluster _ name " ) ) <nl> + { <nl> + <nl> + / / this is a brand new node <nl> + if ( ! cfs . getSSTables ( ) . isEmpty ( ) ) <nl> + throw new ConfigurationException ( " Found system table files , but they couldn ' t be loaded ! " ) ; <nl> + <nl> + / / no system files . this is a new node . <nl> + req = " INSERT INTO system . % s ( key , cluster _ name ) VALUES ( ' % s ' , ' % s ' ) " ; <nl> + processInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY , DatabaseDescriptor . getClusterName ( ) ) ) ; <nl> + return ; <nl> + } <nl> + <nl> + savedClusterName = result . one ( ) . getString ( " cluster _ name " ) ; <nl> } <nl> <nl> - String savedClusterName = result . one ( ) . getString ( " cluster _ name " ) ; <nl> if ( ! DatabaseDescriptor . getClusterName ( ) . equals ( savedClusterName ) ) <nl> throw new ConfigurationException ( " Saved cluster name " + savedClusterName + " ! = configured name " + DatabaseDescriptor . getClusterName ( ) ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> index 0542756 . . d59a7d1 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> + + + b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> @ @ - 49 , 15 + 49 , 30 @ @ public class StandaloneScrubber <nl> private static final String DEBUG _ OPTION = " debug " ; <nl> private static final String HELP _ OPTION = " help " ; <nl> private static final String MANIFEST _ CHECK _ OPTION = " manifest - check " ; <nl> + private static final String MIGRATE _ OPTION = " migrate " ; <nl> <nl> public static void main ( String args [ ] ) throws IOException <nl> { <nl> Options options = Options . parseArgs ( args ) ; <nl> try <nl> { <nl> + OutputHandler handler = new OutputHandler . SystemOutput ( options . verbose , options . debug ) ; <nl> + <nl> / / Migrate sstables from pre - # 2749 to the correct location <nl> if ( Directories . sstablesNeedsMigration ( ) ) <nl> + { <nl> + if ( ! options . migrate ) <nl> + { <nl> + System . err . println ( " Detected a pre - 1 . 1 data directory layout . For this tool to work , a migration " + <nl> + " must be performed to the 1 . 1 + format for directories and filenames . Re - run " + <nl> + TOOL _ NAME + " with the - - " + MIGRATE _ OPTION + " option to automatically " + <nl> + " migrate * all * keyspaces and column families to the new layout . " ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + handler . output ( " Detected a pre - 1 . 1 data directory layout . All keyspace and column family directories " + <nl> + " will be migrated to the 1 . 1 + format . " ) ; <nl> Directories . migrateSSTables ( ) ; <nl> + } <nl> <nl> / / load keyspace descriptions . <nl> DatabaseDescriptor . loadSchemas ( ) ; <nl> @ @ - 72 , 7 + 87 , 6 @ @ public class StandaloneScrubber <nl> ColumnFamilyStore cfs = table . getColumnFamilyStore ( options . cfName ) ; <nl> String snapshotName = " pre - scrub - " + System . currentTimeMillis ( ) ; <nl> <nl> - OutputHandler handler = new OutputHandler . SystemOutput ( options . verbose , options . debug ) ; <nl> Directories . SSTableLister lister = cfs . directories . sstableLister ( ) . skipTemporary ( true ) ; <nl> <nl> List < SSTableReader > sstables = new ArrayList < SSTableReader > ( ) ; <nl> @ @ - 184 , 6 + 198 , 7 @ @ public class StandaloneScrubber <nl> public boolean debug ; <nl> public boolean verbose ; <nl> public boolean manifestCheckOnly ; <nl> + public boolean migrate ; <nl> <nl> private Options ( String tableName , String cfName ) <nl> { <nl> @ @ - 222 , 6 + 237 , 7 @ @ public class StandaloneScrubber <nl> opts . debug = cmd . hasOption ( DEBUG _ OPTION ) ; <nl> opts . verbose = cmd . hasOption ( VERBOSE _ OPTION ) ; <nl> opts . manifestCheckOnly = cmd . hasOption ( MANIFEST _ CHECK _ OPTION ) ; <nl> + opts . migrate = cmd . hasOption ( MIGRATE _ OPTION ) ; <nl> <nl> return opts ; <nl> } <nl> @ @ - 246 , 6 + 262 , 7 @ @ public class StandaloneScrubber <nl> options . addOption ( " v " , VERBOSE _ OPTION , " verbose output " ) ; <nl> options . addOption ( " h " , HELP _ OPTION , " display this help message " ) ; <nl> options . addOption ( " m " , MANIFEST _ CHECK _ OPTION , " only check and repair the leveled manifest , without actually scrubbing the sstables " ) ; <nl> + options . addOption ( null , MIGRATE _ OPTION , " convert directory layout and filenames to 1 . 1 + structure " ) ; <nl> return options ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java b / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java <nl> index 357e99c . . 16bf588 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java <nl> + + + b / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java <nl> @ @ - 47 , 12 + 47 , 30 @ @ public class StandaloneUpgrader <nl> private static final String TOOL _ NAME = " sstableupgrade " ; <nl> private static final String DEBUG _ OPTION = " debug " ; <nl> private static final String HELP _ OPTION = " help " ; <nl> + private static final String MIGRATE _ OPTION = " migrate " ; <nl> <nl> public static void main ( String args [ ] ) throws IOException <nl> { <nl> Options options = Options . parseArgs ( args ) ; <nl> try <nl> { <nl> + OutputHandler handler = new OutputHandler . SystemOutput ( false , options . debug ) ; <nl> + / / Migrate sstables from pre - # 2749 to the correct location <nl> + if ( Directories . sstablesNeedsMigration ( ) ) <nl> + { <nl> + if ( ! options . migrate ) <nl> + { <nl> + System . err . println ( " Detected a pre - 1 . 1 data directory layout . For this tool to work , a migration " + <nl> + " must be performed to the 1 . 1 + format for directories and filenames . Re - run " + <nl> + TOOL _ NAME + " with the - - " + MIGRATE _ OPTION + " option to automatically " + <nl> + " migrate * all * keyspaces and column families to the new layout . " ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + handler . output ( " Detected a pre - 1 . 1 data directory layout . All keyspace and column family directories " + <nl> + " will be migrated to the 1 . 1 + format . " ) ; <nl> + Directories . migrateSSTables ( ) ; <nl> + } <nl> + <nl> / / load keyspace descriptions . <nl> DatabaseDescriptor . loadSchemas ( ) ; <nl> <nl> @ @ - 64 , 7 + 82 , 6 @ @ public class StandaloneUpgrader <nl> Table table = Table . openWithoutSSTables ( options . keyspace ) ; <nl> ColumnFamilyStore cfs = table . getColumnFamilyStore ( options . cf ) ; <nl> <nl> - OutputHandler handler = new OutputHandler . SystemOutput ( false , options . debug ) ; <nl> Directories . SSTableLister lister = cfs . directories . sstableLister ( ) ; <nl> if ( options . snapshot ! = null ) <nl> lister . onlyBackups ( true ) . snapshots ( options . snapshot ) ; <nl> @ @ - 137 , 6 + 154 , 7 @ @ public class StandaloneUpgrader <nl> public final String snapshot ; <nl> <nl> public boolean debug ; <nl> + public boolean migrate ; <nl> <nl> private Options ( String keyspace , String cf , String snapshot ) <nl> { <nl> @ @ - 176 , 6 + 194 , 7 @ @ public class StandaloneUpgrader <nl> Options opts = new Options ( keyspace , cf , snapshot ) ; <nl> <nl> opts . debug = cmd . hasOption ( DEBUG _ OPTION ) ; <nl> + opts . migrate = cmd . hasOption ( MIGRATE _ OPTION ) ; <nl> <nl> return opts ; <nl> } <nl> @ @ - 197 , 6 + 216 , 7 @ @ public class StandaloneUpgrader <nl> { <nl> CmdLineOptions options = new CmdLineOptions ( ) ; <nl> options . addOption ( null , DEBUG _ OPTION , " display stack traces " ) ; <nl> + options . addOption ( null , MIGRATE _ OPTION , " convert directory layout and filenames to 1 . 1 + structure " ) ; <nl> options . addOption ( " h " , HELP _ OPTION , " display this help message " ) ; <nl> return options ; <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index fd843dd . . 12bedfa 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 10 
 + * Add sequence distribution type to cassandra stress ( CASSANDRA - 12490 ) 
 * " SELECT * FROM foo LIMIT ; " does not error out ( CASSANDRA - 12154 ) 
 * Define executeLocally ( ) at the ReadQuery Level ( CASSANDRA - 12474 ) 
 * Extend read / write failure messages with a map of replica addresses 
 diff - - git a / tools / cqlstress - counter - example . yaml b / tools / cqlstress - counter - example . yaml 
 index f8f70ea . . 9084e84 100644 
 - - - a / tools / cqlstress - counter - example . yaml 
 + + + b / tools / cqlstress - counter - example . yaml 
 @ @ - 48 , 6 + 48 , 7 @ @ table _ definition : | 
 # GAUSSIAN ( min . . max , mean , stdev ) A gaussian / normal distribution , with explicitly defined mean and stdev 
 # UNIFORM ( min . . max ) A uniform distribution over the range [ min , max ] 
 # FIXED ( val ) A fixed distribution , always returning the same value 
 + # SEQ ( min . . max ) A fixed sequence , returning values from min to max sequentially , wrapping if necessary . 
 # Aliases : extr , gauss , normal , norm , weibull 
 # 
 # If preceded by ~ , the distribution is inverted 
 diff - - git a / tools / cqlstress - example . yaml b / tools / cqlstress - example . yaml 
 index 835a4cb . . b2b915d 100644 
 - - - a / tools / cqlstress - example . yaml 
 + + + b / tools / cqlstress - example . yaml 
 @ @ - 59 , 6 + 59 , 7 @ @ table _ definition : | 
 # GAUSSIAN ( min . . max , mean , stdev ) A gaussian / normal distribution , with explicitly defined mean and stdev 
 # UNIFORM ( min . . max ) A uniform distribution over the range [ min , max ] 
 # FIXED ( val ) A fixed distribution , always returning the same value 
 + # SEQ ( min . . max ) A fixed sequence , returning values from min to max sequentially , wrapping if necessary . 
 # Aliases : extr , gauss , normal , norm , weibull 
 # 
 # If preceded by ~ , the distribution is inverted 
 diff - - git a / tools / cqlstress - insanity - example . yaml b / tools / cqlstress - insanity - example . yaml 
 index a286625 . . 35bcd4a 100644 
 - - - a / tools / cqlstress - insanity - example . yaml 
 + + + b / tools / cqlstress - insanity - example . yaml 
 @ @ - 58 , 6 + 58 , 7 @ @ table _ definition : | 
 # GAUSSIAN ( min . . max , mean , stdev ) A gaussian / normal distribution , with explicitly defined mean and stdev 
 # UNIFORM ( min . . max ) A uniform distribution over the range [ min , max ] 
 # FIXED ( val ) A fixed distribution , always returning the same value 
 + # SEQ ( min . . max ) A fixed sequence , returning values from min to max sequentially , wrapping if necessary . 
 # Aliases : extr , gauss , normal , norm , weibull 
 # 
 # If preceded by ~ , the distribution is inverted 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / generate / DistributionSequence . java b / tools / stress / src / org / apache / cassandra / stress / generate / DistributionSequence . java 
 new file mode 100644 
 index 0000000 . . 424c661 
 - - - / dev / null 
 + + + b / tools / stress / src / org / apache / cassandra / stress / generate / DistributionSequence . java 
 @ @ - 0 , 0 + 1 , 69 @ @ 
 + / * 
 + * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * 
 + * / 
 + 
 + package org . apache . cassandra . stress . generate ; 
 + 
 + import java . util . concurrent . atomic . AtomicLong ; 
 + 
 + public class DistributionSequence extends Distribution 
 + { 
 + 
 + private final long start ; 
 + private final long totalCount ; 
 + private final AtomicLong next = new AtomicLong ( ) ; 
 + 
 + public DistributionSequence ( long start , long end ) 
 + { 
 + if ( start > end ) 
 + throw new IllegalStateException ( ) ; 
 + this . start = start ; 
 + this . totalCount = 1 + end - start ; 
 + } 
 + 
 + private long nextWithWrap ( ) 
 + { 
 + long next = this . next . getAndIncrement ( ) ; 
 + return start + ( next % totalCount ) ; 
 + } 
 + 
 + @ Override 
 + public long next ( ) 
 + { 
 + return nextWithWrap ( ) ; 
 + } 
 + 
 + @ Override 
 + public double nextDouble ( ) 
 + { 
 + return nextWithWrap ( ) ; 
 + } 
 + 
 + @ Override 
 + public long inverseCumProb ( double cumProb ) 
 + { 
 + return ( long ) ( start + ( totalCount - 1 ) * cumProb ) ; 
 + } 
 + 
 + @ Override 
 + public void setSeed ( long seed ) { } 
 + 
 + } 
 + 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / OptionDistribution . java b / tools / stress / src / org / apache / cassandra / stress / settings / OptionDistribution . java 
 index 6c18fbb . . f613985 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / settings / OptionDistribution . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / settings / OptionDistribution . java 
 @ @ - 124 , 6 + 124 , 7 @ @ public class OptionDistribution extends Option 
 GroupedOptions . formatMultiLine ( " GAUSSIAN ( min . . max , mean , stdev ) " , " A gaussian / normal distribution , with explicitly defined mean and stdev " ) , 
 GroupedOptions . formatMultiLine ( " UNIFORM ( min . . max ) " , " A uniform distribution over the range [ min , max ] " ) , 
 GroupedOptions . formatMultiLine ( " FIXED ( val ) " , " A fixed distribution , always returning the same value " ) , 
 + GroupedOptions . formatMultiLine ( " SEQ ( min . . max ) " , " A fixed sequence , returning values from min to max sequentially , wrapping if necessary . " ) , 
 " Preceding the name with ~ will invert the distribution , e . g . ~ exp ( 1 . . 10 ) will yield 10 most , instead of least , often " , 
 " Aliases : extr , qextr , gauss , normal , norm , weibull " 
 ) ; 
 @ @ - 166 , 6 + 167 , 7 @ @ public class OptionDistribution extends Option 
 lookup . put ( " norm " , lookup . get ( " gaussian " ) ) ; 
 lookup . put ( " uniform " , new UniformImpl ( ) ) ; 
 lookup . put ( " fixed " , new FixedImpl ( ) ) ; 
 + lookup . put ( " seq " , new SequenceImpl ( ) ) ; 
 LOOKUP = lookup ; 
 } 
 
 @ @ - 339 , 18 + 341 , 49 @ @ public class OptionDistribution extends Option 
 public DistributionFactory getFactory ( List < String > params ) 
 { 
 if ( params . size ( ) ! = 1 ) 
 - throw new IllegalArgumentException ( " Invalid parameter list for uniform distribution : " + params ) ; 
 + throw new IllegalArgumentException ( " Invalid parameter list for fixed distribution : " + params ) ; 
 try 
 { 
 final long key = parseLong ( params . get ( 0 ) ) ; 
 return new FixedFactory ( key ) ; 
 } catch ( Exception ignore ) 
 { 
 - throw new IllegalArgumentException ( " Invalid parameter list for uniform distribution : " + params ) ; 
 + throw new IllegalArgumentException ( " Invalid parameter list for fixed distribution : " + params ) ; 
 + } 
 + } 
 + } 
 + 
 + private static final class SequenceImpl implements Impl 
 + { 
 + 
 + @ Override 
 + public DistributionFactory getFactory ( List < String > params ) 
 + { 
 + if ( params . size ( ) ! = 1 ) 
 + throw new IllegalArgumentException ( " Invalid parameter list for sequence distribution : " + params ) ; 
 + final long min ; 
 + final long max ; 
 + try 
 + { 
 + String [ ] bounds = params . get ( 0 ) . split ( " \ \ . \ \ . + " ) ; 
 + min = parseLong ( bounds [ 0 ] ) ; 
 + max = parseLong ( bounds [ 1 ] ) ; 
 + } catch ( Exception ignore ) 
 + { 
 + throw new IllegalArgumentException ( " Invalid parameter list for sequence distribution : " + params ) ; 
 } 
 + if ( min = = max ) 
 + throw new IllegalArgumentException ( " Invalid parameter list for sequence distribution ( min = = max ) : " + params ) ; 
 + 
 + if ( min > max ) 
 + throw new IllegalArgumentException ( " Invalid parameter list for sequence distribution ( min > max ) : " + params ) ; 
 + 
 + return new SequenceFactory ( min , max ) ; 
 + 
 } 
 } 
 
 + 
 private static final class InverseFactory implements DistributionFactory 
 { 
 final DistributionFactory wrapped ; 
 @ @ - 492 , 6 + 525 , 29 @ @ public class OptionDistribution extends Option 
 
 } 
 
 + private static final class SequenceFactory implements DistributionFactory 
 + { 
 + final long start ; 
 + final long end ; 
 + 
 + private SequenceFactory ( long start , long end ) 
 + { 
 + this . start = start ; 
 + this . end = end ; 
 + } 
 + 
 + @ Override 
 + public Distribution get ( ) 
 + { 
 + return new DistributionSequence ( start , end ) ; 
 + } 
 + 
 + @ Override 
 + public String getConfigAsString ( ) { return String . format ( " Sequence : start = % d , end = % d " , start , end ) ; } 
 + 
 + } 
 + 
 + 
 @ Override 
 public int hashCode ( ) 
 { 
 diff - - git a / tools / stress / test / unit / org / apache / cassandra / stress / generate / DistributionSequenceTest . java b / tools / stress / test / unit / org / apache / cassandra / stress / generate / DistributionSequenceTest . java 
 new file mode 100644 
 index 0000000 . . 6f184d7 
 - - - / dev / null 
 + + + b / tools / stress / test / unit / org / apache / cassandra / stress / generate / DistributionSequenceTest . java 
 @ @ - 0 , 0 + 1 , 99 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . stress . generate ; 
 + 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . stress . settings . OptionDistribution ; 
 + 
 + import static org . junit . Assert . * ; 
 + 
 + public class DistributionSequenceTest 
 + { 
 + @ Test 
 + public void simpleSequence ( ) throws Exception 
 + { 
 + Distribution dist = OptionDistribution . get ( " seq ( 1 . . 10 ) " ) . get ( ) ; 
 + assertTrue ( dist instanceof DistributionSequence ) ; 
 + 
 + assertEquals ( 1 , dist . minValue ( ) ) ; 
 + assertEquals ( 10 , dist . maxValue ( ) ) ; 
 + assertEquals ( 5 , dist . average ( ) ) ; 
 + 
 + assertEquals ( 1 , dist . inverseCumProb ( 0d ) ) ; 
 + assertEquals ( 10 , dist . inverseCumProb ( 1d ) ) ; 
 + 
 + long min = dist . next ( ) ; 
 + assertEquals ( 1 , min ) ; 
 + 
 + long last = min ; 
 + for ( int i = 0 ; i < 9 ; i + + ) 
 + { 
 + long next = dist . next ( ) ; 
 + assertEquals ( next , last + 1 ) ; / / increase by one each step 
 + last = next ; 
 + } 
 + 
 + assertEquals ( 1 , dist . next ( ) ) ; / / wrapping 
 + } 
 + 
 + 
 + @ Test 
 + public void negValueSequence ( ) throws Exception 
 + { 
 + Distribution dist = OptionDistribution . get ( " seq ( - 1000 . . - 10 ) " ) . get ( ) ; 
 + assertTrue ( dist instanceof DistributionSequence ) ; 
 + 
 + assertEquals ( - 1000 , dist . minValue ( ) ) ; 
 + assertEquals ( - 10 , dist . maxValue ( ) ) ; 
 + assertEquals ( - 504 , dist . average ( ) ) ; 
 + 
 + assertEquals ( - 1000 , dist . inverseCumProb ( 0d ) ) ; 
 + assertEquals ( - 10 , dist . inverseCumProb ( 1d ) ) ; 
 + 
 + long min = dist . next ( ) ; 
 + assertEquals ( - 1000 , min ) ; 
 + 
 + long last = min ; 
 + long next = dist . next ( ) ; 
 + while ( last < next ) 
 + { 
 + assertEquals ( next , last + 1 ) ; / / increase by one each step 
 + last = next ; 
 + next = dist . next ( ) ; 
 + } 
 + 
 + assertEquals ( - 10 , last ) ; / / wrapping 
 + assertEquals ( - 1000 , next ) ; / / wrapping 
 + } 
 + 
 + @ Test 
 + public void bigSequence ( ) throws Exception 
 + { 
 + Distribution dist = OptionDistribution . get ( String . format ( " seq ( 1 . . % d ) " , Long . MAX _ VALUE ) ) . get ( ) ; 
 + assertTrue ( dist instanceof DistributionSequence ) ; 
 + 
 + assertEquals ( 1 , dist . minValue ( ) ) ; 
 + assertEquals ( Long . MAX _ VALUE , dist . maxValue ( ) ) ; 
 + 
 + assertEquals ( 1 , dist . inverseCumProb ( 0d ) ) ; 
 + assertEquals ( Long . MAX _ VALUE , dist . inverseCumProb ( 1d ) ) ; 
 + 
 + } 
 + }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 25c0217 . . 859e7f9 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 2 . 9 
 + * add - - migrate option to sstableupgrade and sstablescrub ( CASSANDRA - 5831 ) 
 * fix bulk - loading compressed sstables ( CASSANDRA - 5820 ) 
 * ( Hadoop ) fix quoting in CqlPagingRecordReader and CqlRecordWriter 
 ( CASSANDRA - 5824 ) 
 diff - - git a / src / java / org / apache / cassandra / db / SystemTable . java b / src / java / org / apache / cassandra / db / SystemTable . java 
 index 4c74df5 . . 318b34d 100644 
 - - - a / src / java / org / apache / cassandra / db / SystemTable . java 
 + + + b / src / java / org / apache / cassandra / db / SystemTable . java 
 @ @ - 147 , 6 + 147 , 7 @ @ public class SystemTable 
 ColumnFamilyStore oldStatusCfs = table . getColumnFamilyStore ( OLD _ STATUS _ CF ) ; 
 if ( oldStatusCfs . getSSTables ( ) . size ( ) > 0 ) 
 { 
 + logger . info ( " Old system data found in { } . { } ; migrating to new format in { } . { } " , Table . SYSTEM _ KS , OLD _ STATUS _ CF , Table . SYSTEM _ KS , LOCAL _ CF ) ; 
 SortedSet < ByteBuffer > cols = new TreeSet < ByteBuffer > ( BytesType . instance ) ; 
 cols . add ( ByteBufferUtil . bytes ( " ClusterName " ) ) ; 
 cols . add ( ByteBufferUtil . bytes ( " Token " ) ) ; 
 @ @ - 428 , 24 + 429 , 51 @ @ public class SystemTable 
 ex . initCause ( err ) ; 
 throw ex ; 
 } 
 - ColumnFamilyStore cfs = table . getColumnFamilyStore ( LOCAL _ CF ) ; 
 
 - String req = " SELECT cluster _ name FROM system . % s WHERE key = ' % s ' " ; 
 - UntypedResultSet result = processInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY ) ) ; 
 + String savedClusterName ; 
 
 - if ( result . isEmpty ( ) | | ! result . one ( ) . has ( " cluster _ name " ) ) 
 + / / See if there is still data in System . LocationInfo , indicating that the system data has not yet been 
 + / / upgraded by SystemTable . upgradeSystemData ( ) 
 + ColumnFamilyStore oldStatusCfs = table . getColumnFamilyStore ( OLD _ STATUS _ CF ) ; 
 + if ( oldStatusCfs . getSSTables ( ) . size ( ) > 0 ) 
 + { 
 + logger . debug ( " Detected system data in { } . { } , checking saved cluster name " , Table . SYSTEM _ KS , OLD _ STATUS _ CF ) ; 
 + SortedSet < ByteBuffer > cols = new TreeSet < ByteBuffer > ( BytesType . instance ) ; 
 + cols . add ( ByteBufferUtil . bytes ( " ClusterName " ) ) ; 
 + QueryFilter filter = QueryFilter . getNamesFilter ( decorate ( ByteBufferUtil . bytes ( " L " ) ) , new QueryPath ( OLD _ STATUS _ CF ) , cols ) ; 
 + ColumnFamily oldCf = oldStatusCfs . getColumnFamily ( filter ) ; 
 + try 
 + { 
 + savedClusterName = ByteBufferUtil . string ( oldCf . getColumn ( ByteBufferUtil . bytes ( " ClusterName " ) ) . value ( ) ) ; 
 + } 
 + catch ( CharacterCodingException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + else 
 { 
 - / / this is a brand new node 
 - if ( ! cfs . getSSTables ( ) . isEmpty ( ) ) 
 - throw new ConfigurationException ( " Found system table files , but they couldn ' t be loaded ! " ) ; 
 + ColumnFamilyStore cfs = table . getColumnFamilyStore ( LOCAL _ CF ) ; 
 
 - / / no system files . this is a new node . 
 - req = " INSERT INTO system . % s ( key , cluster _ name ) VALUES ( ' % s ' , ' % s ' ) " ; 
 - processInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY , DatabaseDescriptor . getClusterName ( ) ) ) ; 
 - return ; 
 + String req = " SELECT cluster _ name FROM system . % s WHERE key = ' % s ' " ; 
 + UntypedResultSet result = processInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY ) ) ; 
 + 
 + if ( result . isEmpty ( ) | | ! result . one ( ) . has ( " cluster _ name " ) ) 
 + { 
 + 
 + / / this is a brand new node 
 + if ( ! cfs . getSSTables ( ) . isEmpty ( ) ) 
 + throw new ConfigurationException ( " Found system table files , but they couldn ' t be loaded ! " ) ; 
 + 
 + / / no system files . this is a new node . 
 + req = " INSERT INTO system . % s ( key , cluster _ name ) VALUES ( ' % s ' , ' % s ' ) " ; 
 + processInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY , DatabaseDescriptor . getClusterName ( ) ) ) ; 
 + return ; 
 + } 
 + 
 + savedClusterName = result . one ( ) . getString ( " cluster _ name " ) ; 
 } 
 
 - String savedClusterName = result . one ( ) . getString ( " cluster _ name " ) ; 
 if ( ! DatabaseDescriptor . getClusterName ( ) . equals ( savedClusterName ) ) 
 throw new ConfigurationException ( " Saved cluster name " + savedClusterName + " ! = configured name " + DatabaseDescriptor . getClusterName ( ) ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 index 0542756 . . d59a7d1 100644 
 - - - a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 + + + b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 @ @ - 49 , 15 + 49 , 30 @ @ public class StandaloneScrubber 
 private static final String DEBUG _ OPTION = " debug " ; 
 private static final String HELP _ OPTION = " help " ; 
 private static final String MANIFEST _ CHECK _ OPTION = " manifest - check " ; 
 + private static final String MIGRATE _ OPTION = " migrate " ; 
 
 public static void main ( String args [ ] ) throws IOException 
 { 
 Options options = Options . parseArgs ( args ) ; 
 try 
 { 
 + OutputHandler handler = new OutputHandler . SystemOutput ( options . verbose , options . debug ) ; 
 + 
 / / Migrate sstables from pre - # 2749 to the correct location 
 if ( Directories . sstablesNeedsMigration ( ) ) 
 + { 
 + if ( ! options . migrate ) 
 + { 
 + System . err . println ( " Detected a pre - 1 . 1 data directory layout . For this tool to work , a migration " + 
 + " must be performed to the 1 . 1 + format for directories and filenames . Re - run " + 
 + TOOL _ NAME + " with the - - " + MIGRATE _ OPTION + " option to automatically " + 
 + " migrate * all * keyspaces and column families to the new layout . " ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + handler . output ( " Detected a pre - 1 . 1 data directory layout . All keyspace and column family directories " + 
 + " will be migrated to the 1 . 1 + format . " ) ; 
 Directories . migrateSSTables ( ) ; 
 + } 
 
 / / load keyspace descriptions . 
 DatabaseDescriptor . loadSchemas ( ) ; 
 @ @ - 72 , 7 + 87 , 6 @ @ public class StandaloneScrubber 
 ColumnFamilyStore cfs = table . getColumnFamilyStore ( options . cfName ) ; 
 String snapshotName = " pre - scrub - " + System . currentTimeMillis ( ) ; 
 
 - OutputHandler handler = new OutputHandler . SystemOutput ( options . verbose , options . debug ) ; 
 Directories . SSTableLister lister = cfs . directories . sstableLister ( ) . skipTemporary ( true ) ; 
 
 List < SSTableReader > sstables = new ArrayList < SSTableReader > ( ) ; 
 @ @ - 184 , 6 + 198 , 7 @ @ public class StandaloneScrubber 
 public boolean debug ; 
 public boolean verbose ; 
 public boolean manifestCheckOnly ; 
 + public boolean migrate ; 
 
 private Options ( String tableName , String cfName ) 
 { 
 @ @ - 222 , 6 + 237 , 7 @ @ public class StandaloneScrubber 
 opts . debug = cmd . hasOption ( DEBUG _ OPTION ) ; 
 opts . verbose = cmd . hasOption ( VERBOSE _ OPTION ) ; 
 opts . manifestCheckOnly = cmd . hasOption ( MANIFEST _ CHECK _ OPTION ) ; 
 + opts . migrate = cmd . hasOption ( MIGRATE _ OPTION ) ; 
 
 return opts ; 
 } 
 @ @ - 246 , 6 + 262 , 7 @ @ public class StandaloneScrubber 
 options . addOption ( " v " , VERBOSE _ OPTION , " verbose output " ) ; 
 options . addOption ( " h " , HELP _ OPTION , " display this help message " ) ; 
 options . addOption ( " m " , MANIFEST _ CHECK _ OPTION , " only check and repair the leveled manifest , without actually scrubbing the sstables " ) ; 
 + options . addOption ( null , MIGRATE _ OPTION , " convert directory layout and filenames to 1 . 1 + structure " ) ; 
 return options ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java b / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java 
 index 357e99c . . 16bf588 100644 
 - - - a / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java 
 + + + b / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java 
 @ @ - 47 , 12 + 47 , 30 @ @ public class StandaloneUpgrader 
 private static final String TOOL _ NAME = " sstableupgrade " ; 
 private static final String DEBUG _ OPTION = " debug " ; 
 private static final String HELP _ OPTION = " help " ; 
 + private static final String MIGRATE _ OPTION = " migrate " ; 
 
 public static void main ( String args [ ] ) throws IOException 
 { 
 Options options = Options . parseArgs ( args ) ; 
 try 
 { 
 + OutputHandler handler = new OutputHandler . SystemOutput ( false , options . debug ) ; 
 + / / Migrate sstables from pre - # 2749 to the correct location 
 + if ( Directories . sstablesNeedsMigration ( ) ) 
 + { 
 + if ( ! options . migrate ) 
 + { 
 + System . err . println ( " Detected a pre - 1 . 1 data directory layout . For this tool to work , a migration " + 
 + " must be performed to the 1 . 1 + format for directories and filenames . Re - run " + 
 + TOOL _ NAME + " with the - - " + MIGRATE _ OPTION + " option to automatically " + 
 + " migrate * all * keyspaces and column families to the new layout . " ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + handler . output ( " Detected a pre - 1 . 1 data directory layout . All keyspace and column family directories " + 
 + " will be migrated to the 1 . 1 + format . " ) ; 
 + Directories . migrateSSTables ( ) ; 
 + } 
 + 
 / / load keyspace descriptions . 
 DatabaseDescriptor . loadSchemas ( ) ; 
 
 @ @ - 64 , 7 + 82 , 6 @ @ public class StandaloneUpgrader 
 Table table = Table . openWithoutSSTables ( options . keyspace ) ; 
 ColumnFamilyStore cfs = table . getColumnFamilyStore ( options . cf ) ; 
 
 - OutputHandler handler = new OutputHandler . SystemOutput ( false , options . debug ) ; 
 Directories . SSTableLister lister = cfs . directories . sstableLister ( ) ; 
 if ( options . snapshot ! = null ) 
 lister . onlyBackups ( true ) . snapshots ( options . snapshot ) ; 
 @ @ - 137 , 6 + 154 , 7 @ @ public class StandaloneUpgrader 
 public final String snapshot ; 
 
 public boolean debug ; 
 + public boolean migrate ; 
 
 private Options ( String keyspace , String cf , String snapshot ) 
 { 
 @ @ - 176 , 6 + 194 , 7 @ @ public class StandaloneUpgrader 
 Options opts = new Options ( keyspace , cf , snapshot ) ; 
 
 opts . debug = cmd . hasOption ( DEBUG _ OPTION ) ; 
 + opts . migrate = cmd . hasOption ( MIGRATE _ OPTION ) ; 
 
 return opts ; 
 } 
 @ @ - 197 , 6 + 216 , 7 @ @ public class StandaloneUpgrader 
 { 
 CmdLineOptions options = new CmdLineOptions ( ) ; 
 options . addOption ( null , DEBUG _ OPTION , " display stack traces " ) ; 
 + options . addOption ( null , MIGRATE _ OPTION , " convert directory layout and filenames to 1 . 1 + structure " ) ; 
 options . addOption ( " h " , HELP _ OPTION , " display this help message " ) ; 
 return options ; 
 }
