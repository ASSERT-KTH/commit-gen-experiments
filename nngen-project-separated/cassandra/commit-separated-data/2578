BLEU SCORE: 0.037477767366779206

TEST MSG: Fix bad merge of 6825 into cassandra - 2 . 1
GENERATED MSG: Handle short slice start / finishes of different lengths

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / filter / ColumnSlice . java b / src / java / org / apache / cassandra / db / filter / ColumnSlice . java <nl> index 227297e . . 6e2fa68 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / ColumnSlice . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / ColumnSlice . java <nl> @ @ - 88 , 7 + 88 , 8 @ @ public class ColumnSlice <nl> ByteBuffer f = i < sEnd . size ( ) ? sEnd . get ( i ) : ByteBufferUtil . EMPTY _ BYTE _ BUFFER ; <nl> <nl> / / we already know the first component falls within its min / max range ( otherwise we wouldn ' t get here ) <nl> - if ( i > 0 & & ( t . compare ( f , minCellNames . get ( i ) ) < 0 | | t . compare ( s , maxCellNames . get ( i ) ) > 0 ) ) <nl> + if ( i > 0 & & ( i < sEnd . size ( ) & & t . compare ( f , minCellNames . get ( i ) ) < 0 | | <nl> + i < sStart . size ( ) & & t . compare ( s , maxCellNames . get ( i ) ) > 0 ) ) <nl> return false ; <nl> <nl> / / if this component isn ' t equal in the start and finish , we don ' t need to check any more <nl> diff - - git a / test / unit / org / apache / cassandra / db / filter / ColumnSliceTest . java b / test / unit / org / apache / cassandra / db / filter / ColumnSliceTest . java <nl> index e2de0e6 . . 6553de5 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / filter / ColumnSliceTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / filter / ColumnSliceTest . java <nl> @ @ - 165 , 6 + 165 , 10 @ @ public class ColumnSliceTest <nl> slice = new ColumnSlice ( composite ( 1 ) , composite ( 1 , 2 ) ) ; <nl> assertTrue ( slice . intersects ( columnNames ( 1 , 0 , 0 ) , columnNames ( 2 , 2 , 2 ) , nameType , false ) ) ; <nl> <nl> + / / same case , but with an equal first component and missing start and end components <nl> + slice = new ColumnSlice ( composite ( 1 ) , composite ( 1 ) ) ; <nl> + assertTrue ( slice . intersects ( columnNames ( 1 , 0 , 0 ) , columnNames ( 2 , 2 , 2 ) , nameType , false ) ) ; <nl> + <nl> / / slice falls entirely within sstable ( slice start and end are the same ) <nl> slice = new ColumnSlice ( composite ( 1 , 1 , 1 ) , composite ( 1 , 1 , 1 ) ) ; <nl> assertTrue ( slice . intersects ( columnNames ( 1 , 0 , 0 ) , columnNames ( 2 , 2 , 2 ) , nameType , false ) ) ; <nl> @ @ - 281 , 7 + 285 , 7 @ @ public class ColumnSliceTest <nl> types . add ( Int32Type . instance ) ; <nl> types . add ( Int32Type . instance ) ; <nl> CompoundDenseCellNameType nameType = new CompoundDenseCellNameType ( types ) ; <nl> - return nameType . make ( components ) ; <nl> + return nameType . make ( ( Object [ ] ) components ) ; <nl> } <nl> <nl> private static List < ByteBuffer > columnNames ( Integer . . . components ) <nl> @ @ - 291 , 4 + 295 , 4 @ @ public class ColumnSliceTest <nl> names . add ( ByteBufferUtil . bytes ( component ) ) ; <nl> return names ; <nl> } <nl> - } <nl> + } <nl> \ No newline at end of file
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / filter / ColumnSlice . java b / src / java / org / apache / cassandra / db / filter / ColumnSlice . java 
 index 227297e . . 6e2fa68 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / ColumnSlice . java 
 + + + b / src / java / org / apache / cassandra / db / filter / ColumnSlice . java 
 @ @ - 88 , 7 + 88 , 8 @ @ public class ColumnSlice 
 ByteBuffer f = i < sEnd . size ( ) ? sEnd . get ( i ) : ByteBufferUtil . EMPTY _ BYTE _ BUFFER ; 
 
 / / we already know the first component falls within its min / max range ( otherwise we wouldn ' t get here ) 
 - if ( i > 0 & & ( t . compare ( f , minCellNames . get ( i ) ) < 0 | | t . compare ( s , maxCellNames . get ( i ) ) > 0 ) ) 
 + if ( i > 0 & & ( i < sEnd . size ( ) & & t . compare ( f , minCellNames . get ( i ) ) < 0 | | 
 + i < sStart . size ( ) & & t . compare ( s , maxCellNames . get ( i ) ) > 0 ) ) 
 return false ; 
 
 / / if this component isn ' t equal in the start and finish , we don ' t need to check any more 
 diff - - git a / test / unit / org / apache / cassandra / db / filter / ColumnSliceTest . java b / test / unit / org / apache / cassandra / db / filter / ColumnSliceTest . java 
 index e2de0e6 . . 6553de5 100644 
 - - - a / test / unit / org / apache / cassandra / db / filter / ColumnSliceTest . java 
 + + + b / test / unit / org / apache / cassandra / db / filter / ColumnSliceTest . java 
 @ @ - 165 , 6 + 165 , 10 @ @ public class ColumnSliceTest 
 slice = new ColumnSlice ( composite ( 1 ) , composite ( 1 , 2 ) ) ; 
 assertTrue ( slice . intersects ( columnNames ( 1 , 0 , 0 ) , columnNames ( 2 , 2 , 2 ) , nameType , false ) ) ; 
 
 + / / same case , but with an equal first component and missing start and end components 
 + slice = new ColumnSlice ( composite ( 1 ) , composite ( 1 ) ) ; 
 + assertTrue ( slice . intersects ( columnNames ( 1 , 0 , 0 ) , columnNames ( 2 , 2 , 2 ) , nameType , false ) ) ; 
 + 
 / / slice falls entirely within sstable ( slice start and end are the same ) 
 slice = new ColumnSlice ( composite ( 1 , 1 , 1 ) , composite ( 1 , 1 , 1 ) ) ; 
 assertTrue ( slice . intersects ( columnNames ( 1 , 0 , 0 ) , columnNames ( 2 , 2 , 2 ) , nameType , false ) ) ; 
 @ @ - 281 , 7 + 285 , 7 @ @ public class ColumnSliceTest 
 types . add ( Int32Type . instance ) ; 
 types . add ( Int32Type . instance ) ; 
 CompoundDenseCellNameType nameType = new CompoundDenseCellNameType ( types ) ; 
 - return nameType . make ( components ) ; 
 + return nameType . make ( ( Object [ ] ) components ) ; 
 } 
 
 private static List < ByteBuffer > columnNames ( Integer . . . components ) 
 @ @ - 291 , 4 + 295 , 4 @ @ public class ColumnSliceTest 
 names . add ( ByteBufferUtil . bytes ( component ) ) ; 
 return names ; 
 } 
 - } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
ELIMINATEDSENTENCE
