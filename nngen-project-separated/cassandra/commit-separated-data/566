BLEU SCORE: 0.040583489434387374

TEST MSG: Remove timing window in test case
GENERATED MSG: Add cross - DC latency metrics

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 2cd0eb0 . . 9579781 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 6 @ @ <nl> 3 . 10 <nl> + * Remove timing window in test case ( CASSANDRA - 12875 ) <nl> + * Resolve unit testing without JCE security libraries installed ( CASSANDRA - 12945 ) <nl> * Fix inconsistencies in cassandra - stress load balancing policy ( CASSANDRA - 12919 ) <nl> * Fix validation of non - frozen UDT cells ( CASSANDRA - 12916 ) <nl> * Don ' t shut down socket input / output on StreamSession ( CASSANDRA - 12903 ) <nl> diff - - git a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java <nl> index 7d3c607 . . 9878590 100644 <nl> - - - a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java <nl> @ @ - 39 , 6 + 39 , 7 @ @ import org . apache . cassandra . config . Config ; <nl> import org . xerial . snappy . SnappyInputStream ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . UnknownColumnFamilyException ; <nl> + import org . apache . cassandra . db . monitoring . ApproximateTime ; <nl> import org . apache . cassandra . io . util . DataInputPlus ; <nl> import org . apache . cassandra . io . util . DataInputPlus . DataInputStreamPlus ; <nl> import org . apache . cassandra . io . util . NIODataInputStream ; <nl> @ @ - 187 , 8 + 188 , 8 @ @ public class IncomingTcpConnection extends FastThreadLocalThread implements Clos <nl> id = Integer . parseInt ( input . readUTF ( ) ) ; <nl> else <nl> id = input . readInt ( ) ; <nl> - <nl> - MessageIn message = MessageIn . read ( input , version , id , MessageIn . readConstructionTime ( from , input ) ) ; <nl> + long currentTime = ApproximateTime . currentTimeMillis ( ) ; <nl> + MessageIn message = MessageIn . read ( input , version , id , MessageIn . readConstructionTime ( from , input , currentTime ) ) ; <nl> if ( message = = null ) <nl> { <nl> / / callback expired ; nothing to do <nl> diff - - git a / src / java / org / apache / cassandra / net / MessageIn . java b / src / java / org / apache / cassandra / net / MessageIn . java <nl> index a254741 . . 0de9520 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessageIn . java <nl> + + + b / src / java / org / apache / cassandra / net / MessageIn . java <nl> @ @ - 124 , 10 + 124 , 8 @ @ public class MessageIn < T > <nl> return MessageIn . create ( from , payload , parameters , verb , version , constructionTime ) ; <nl> } <nl> <nl> - public static long readConstructionTime ( InetAddress from , DataInputPlus input ) throws IOException <nl> + public static long readConstructionTime ( InetAddress from , DataInputPlus input , long currentTime ) throws IOException <nl> { <nl> - long currentTime = ApproximateTime . currentTimeMillis ( ) ; <nl> - <nl> / / Reconstruct the message construction time sent by the remote host ( we sent only the lower 4 bytes , assuming the <nl> / / higher 4 bytes wouldn ' t change between the sender and receiver ) <nl> int partial = input . readInt ( ) ; / / make sure to readInt , even if cross _ node _ to is not enabled <nl> diff - - git a / test / unit / org / apache / cassandra / net / MessagingServiceTest . java b / test / unit / org / apache / cassandra / net / MessagingServiceTest . java <nl> index ec27b7e . . 11d17b8 100644 <nl> - - - a / test / unit / org / apache / cassandra / net / MessagingServiceTest . java <nl> + + + b / test / unit / org / apache / cassandra / net / MessagingServiceTest . java <nl> @ @ - 34 , 20 + 34 , 18 @ @ import java . util . concurrent . ConcurrentHashMap ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> import com . google . common . collect . Iterables ; <nl> - <nl> import com . codahale . metrics . Timer ; <nl> <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . db . monitoring . ApproximateTime ; <nl> import org . apache . cassandra . io . util . DataInputPlus . DataInputStreamPlus ; <nl> import org . apache . cassandra . io . util . DataOutputStreamPlus ; <nl> import org . apache . cassandra . io . util . WrappedDataOutputStreamPlus ; <nl> import org . caffinitas . ohc . histo . EstimatedHistogram ; <nl> - <nl> import org . junit . Before ; <nl> import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - <nl> import static org . junit . Assert . * ; <nl> <nl> public class MessagingServiceTest <nl> @ @ - 100 , 15 + 98 , 13 @ @ public class MessagingServiceTest <nl> public void testDCLatency ( ) throws Exception <nl> { <nl> int latency = 100 ; <nl> - <nl> ConcurrentHashMap < String , Timer > dcLatency = MessagingService . instance ( ) . metrics . dcLatency ; <nl> dcLatency . clear ( ) ; <nl> <nl> - long now = System . currentTimeMillis ( ) ; <nl> + long now = ApproximateTime . currentTimeMillis ( ) ; <nl> long sentAt = now - latency ; <nl> - <nl> assertNull ( dcLatency . get ( " datacenter1 " ) ) ; <nl> - addDCLatency ( sentAt ) ; <nl> + addDCLatency ( sentAt , now ) ; <nl> assertNotNull ( dcLatency . get ( " datacenter1 " ) ) ; <nl> assertEquals ( 1 , dcLatency . get ( " datacenter1 " ) . getCount ( ) ) ; <nl> long expectedBucket = bucketOffsets [ Math . abs ( Arrays . binarySearch ( bucketOffsets , TimeUnit . MILLISECONDS . toNanos ( latency ) ) ) - 1 ] ; <nl> @ @ - 124 , 11 + 120 , 11 @ @ public class MessagingServiceTest <nl> ConcurrentHashMap < String , Timer > dcLatency = MessagingService . instance ( ) . metrics . dcLatency ; <nl> dcLatency . clear ( ) ; <nl> <nl> - long now = System . currentTimeMillis ( ) ; <nl> + long now = ApproximateTime . currentTimeMillis ( ) ; <nl> long sentAt = now - latency ; <nl> <nl> assertNull ( dcLatency . get ( " datacenter1 " ) ) ; <nl> - addDCLatency ( sentAt ) ; <nl> + addDCLatency ( sentAt , now ) ; <nl> assertNull ( dcLatency . get ( " datacenter1 " ) ) ; <nl> } <nl> <nl> @ @ - 221 , 7 + 217 , 7 @ @ public class MessagingServiceTest <nl> assertFalse ( MockBackPressureStrategy . applied ) ; <nl> } <nl> <nl> - private static void addDCLatency ( long sentAt ) throws IOException <nl> + private static void addDCLatency ( long sentAt , long nowTime ) throws IOException <nl> { <nl> ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; <nl> try ( DataOutputStreamPlus out = new WrappedDataOutputStreamPlus ( baos ) ) <nl> @ @ - 229 , 7 + 225 , 7 @ @ public class MessagingServiceTest <nl> out . writeInt ( ( int ) sentAt ) ; <nl> } <nl> DataInputStreamPlus in = new DataInputStreamPlus ( new ByteArrayInputStream ( baos . toByteArray ( ) ) ) ; <nl> - MessageIn . readConstructionTime ( InetAddress . getLocalHost ( ) , in ) ; <nl> + MessageIn . readConstructionTime ( InetAddress . getLocalHost ( ) , in , nowTime ) ; <nl> } <nl> <nl> public static class MockBackPressureStrategy implements BackPressureStrategy < MockBackPressureStrategy . MockBackPressureState >
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 2cd0eb0 . . 9579781 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 6 @ @ 
 3 . 10 
 + * Remove timing window in test case ( CASSANDRA - 12875 ) 
 + * Resolve unit testing without JCE security libraries installed ( CASSANDRA - 12945 ) 
 * Fix inconsistencies in cassandra - stress load balancing policy ( CASSANDRA - 12919 ) 
 * Fix validation of non - frozen UDT cells ( CASSANDRA - 12916 ) 
 * Don ' t shut down socket input / output on StreamSession ( CASSANDRA - 12903 ) 
 diff - - git a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java 
 index 7d3c607 . . 9878590 100644 
 - - - a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java 
 + + + b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java 
 @ @ - 39 , 6 + 39 , 7 @ @ import org . apache . cassandra . config . Config ; 
 import org . xerial . snappy . SnappyInputStream ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . UnknownColumnFamilyException ; 
 + import org . apache . cassandra . db . monitoring . ApproximateTime ; 
 import org . apache . cassandra . io . util . DataInputPlus ; 
 import org . apache . cassandra . io . util . DataInputPlus . DataInputStreamPlus ; 
 import org . apache . cassandra . io . util . NIODataInputStream ; 
 @ @ - 187 , 8 + 188 , 8 @ @ public class IncomingTcpConnection extends FastThreadLocalThread implements Clos 
 id = Integer . parseInt ( input . readUTF ( ) ) ; 
 else 
 id = input . readInt ( ) ; 
 - 
 - MessageIn message = MessageIn . read ( input , version , id , MessageIn . readConstructionTime ( from , input ) ) ; 
 + long currentTime = ApproximateTime . currentTimeMillis ( ) ; 
 + MessageIn message = MessageIn . read ( input , version , id , MessageIn . readConstructionTime ( from , input , currentTime ) ) ; 
 if ( message = = null ) 
 { 
 / / callback expired ; nothing to do 
 diff - - git a / src / java / org / apache / cassandra / net / MessageIn . java b / src / java / org / apache / cassandra / net / MessageIn . java 
 index a254741 . . 0de9520 100644 
 - - - a / src / java / org / apache / cassandra / net / MessageIn . java 
 + + + b / src / java / org / apache / cassandra / net / MessageIn . java 
 @ @ - 124 , 10 + 124 , 8 @ @ public class MessageIn < T > 
 return MessageIn . create ( from , payload , parameters , verb , version , constructionTime ) ; 
 } 
 
 - public static long readConstructionTime ( InetAddress from , DataInputPlus input ) throws IOException 
 + public static long readConstructionTime ( InetAddress from , DataInputPlus input , long currentTime ) throws IOException 
 { 
 - long currentTime = ApproximateTime . currentTimeMillis ( ) ; 
 - 
 / / Reconstruct the message construction time sent by the remote host ( we sent only the lower 4 bytes , assuming the 
 / / higher 4 bytes wouldn ' t change between the sender and receiver ) 
 int partial = input . readInt ( ) ; / / make sure to readInt , even if cross _ node _ to is not enabled 
 diff - - git a / test / unit / org / apache / cassandra / net / MessagingServiceTest . java b / test / unit / org / apache / cassandra / net / MessagingServiceTest . java 
 index ec27b7e . . 11d17b8 100644 
 - - - a / test / unit / org / apache / cassandra / net / MessagingServiceTest . java 
 + + + b / test / unit / org / apache / cassandra / net / MessagingServiceTest . java 
 @ @ - 34 , 20 + 34 , 18 @ @ import java . util . concurrent . ConcurrentHashMap ; 
 import java . util . concurrent . TimeUnit ; 
 
 import com . google . common . collect . Iterables ; 
 - 
 import com . codahale . metrics . Timer ; 
 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . db . monitoring . ApproximateTime ; 
 import org . apache . cassandra . io . util . DataInputPlus . DataInputStreamPlus ; 
 import org . apache . cassandra . io . util . DataOutputStreamPlus ; 
 import org . apache . cassandra . io . util . WrappedDataOutputStreamPlus ; 
 import org . caffinitas . ohc . histo . EstimatedHistogram ; 
 - 
 import org . junit . Before ; 
 import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 - 
 import static org . junit . Assert . * ; 
 
 public class MessagingServiceTest 
 @ @ - 100 , 15 + 98 , 13 @ @ public class MessagingServiceTest 
 public void testDCLatency ( ) throws Exception 
 { 
 int latency = 100 ; 
 - 
 ConcurrentHashMap < String , Timer > dcLatency = MessagingService . instance ( ) . metrics . dcLatency ; 
 dcLatency . clear ( ) ; 
 
 - long now = System . currentTimeMillis ( ) ; 
 + long now = ApproximateTime . currentTimeMillis ( ) ; 
 long sentAt = now - latency ; 
 - 
 assertNull ( dcLatency . get ( " datacenter1 " ) ) ; 
 - addDCLatency ( sentAt ) ; 
 + addDCLatency ( sentAt , now ) ; 
 assertNotNull ( dcLatency . get ( " datacenter1 " ) ) ; 
 assertEquals ( 1 , dcLatency . get ( " datacenter1 " ) . getCount ( ) ) ; 
 long expectedBucket = bucketOffsets [ Math . abs ( Arrays . binarySearch ( bucketOffsets , TimeUnit . MILLISECONDS . toNanos ( latency ) ) ) - 1 ] ; 
 @ @ - 124 , 11 + 120 , 11 @ @ public class MessagingServiceTest 
 ConcurrentHashMap < String , Timer > dcLatency = MessagingService . instance ( ) . metrics . dcLatency ; 
 dcLatency . clear ( ) ; 
 
 - long now = System . currentTimeMillis ( ) ; 
 + long now = ApproximateTime . currentTimeMillis ( ) ; 
 long sentAt = now - latency ; 
 
 assertNull ( dcLatency . get ( " datacenter1 " ) ) ; 
 - addDCLatency ( sentAt ) ; 
 + addDCLatency ( sentAt , now ) ; 
 assertNull ( dcLatency . get ( " datacenter1 " ) ) ; 
 } 
 
 @ @ - 221 , 7 + 217 , 7 @ @ public class MessagingServiceTest 
 assertFalse ( MockBackPressureStrategy . applied ) ; 
 } 
 
 - private static void addDCLatency ( long sentAt ) throws IOException 
 + private static void addDCLatency ( long sentAt , long nowTime ) throws IOException 
 { 
 ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; 
 try ( DataOutputStreamPlus out = new WrappedDataOutputStreamPlus ( baos ) ) 
 @ @ - 229 , 7 + 225 , 7 @ @ public class MessagingServiceTest 
 out . writeInt ( ( int ) sentAt ) ; 
 } 
 DataInputStreamPlus in = new DataInputStreamPlus ( new ByteArrayInputStream ( baos . toByteArray ( ) ) ) ; 
 - MessageIn . readConstructionTime ( InetAddress . getLocalHost ( ) , in ) ; 
 + MessageIn . readConstructionTime ( InetAddress . getLocalHost ( ) , in , nowTime ) ; 
 } 
 
 public static class MockBackPressureStrategy implements BackPressureStrategy < MockBackPressureStrategy . MockBackPressureState >

NEAREST DIFF:
ELIMINATEDSENTENCE
