BLEU SCORE: 5.888394700380497E-4

TEST MSG: Clean up Memtable . resolve ( )
GENERATED MSG: Rename BootstrapMetadata and friends to StreamRequest * as that is what those essentially are . Move them to cassandra . io where rest of streaming stuff resides . patch by Jaakko Laine ; reviewed by jbellis for CASSANDRA - 564

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java <nl> index b229060 . . b6fceda 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Memtable . java <nl> + + + b / src / java / org / apache / cassandra / db / Memtable . java <nl> @ @ - 192 , 7 + 192 , 6 @ @ public class Memtable <nl> { <nl> ColumnFamily previous = columnFamilies . get ( key ) ; <nl> <nl> - long sizeDelta = 0 ; <nl> if ( previous = = null ) <nl> { <nl> / / AtomicSortedColumns doesn ' t work for super columns ( see # 3821 ) <nl> @ @ - 200 , 13 + 199 , 10 @ @ public class Memtable <nl> / / We ' ll add the columns later . This avoids wasting works if we get beaten in the putIfAbsent <nl> previous = columnFamilies . putIfAbsent ( new DecoratedKey ( key . token , allocator . clone ( key . key ) ) , empty ) ; <nl> if ( previous = = null ) <nl> - { <nl> previous = empty ; <nl> - sizeDelta + = empty . deletionInfo ( ) . dataSize ( ) ; <nl> - } <nl> } <nl> <nl> - sizeDelta = previous . addAllWithSizeDelta ( cf , allocator , localCopyFunction , indexer ) ; <nl> + long sizeDelta = previous . addAllWithSizeDelta ( cf , allocator , localCopyFunction , indexer ) ; <nl> currentSize . addAndGet ( sizeDelta ) ; <nl> currentOperations . addAndGet ( cf . getColumnCount ( ) + ( cf . isMarkedForDelete ( ) ? 1 : 0 ) + cf . deletionInfo ( ) . rangeCount ( ) ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / dht / BootStrapper . java b / src / java / org / apache / cassandra / dht / BootStrapper . java <nl> index c1eb684 . . 43c2302 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / BootStrapper . java <nl> + + + b / src / java / org / apache / cassandra / dht / BootStrapper . java <nl> @ @ - 33 , 21 + 33 , 13 @ @ package org . apache . cassandra . dht ; <nl> import org . apache . cassandra . locator . TokenMetadata ; <nl> import org . apache . cassandra . locator . AbstractReplicationStrategy ; <nl> import org . apache . cassandra . net . * ; <nl> - import org . apache . cassandra . net . io . StreamContextManager ; <nl> - import org . apache . cassandra . net . io . IStreamComplete ; <nl> import org . apache . cassandra . service . StorageService ; <nl> - import org . apache . cassandra . service . StreamManager ; <nl> - import org . apache . cassandra . utils . LogUtil ; <nl> import org . apache . cassandra . utils . SimpleCondition ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . gms . FailureDetector ; <nl> import org . apache . cassandra . gms . IFailureDetector ; <nl> - import org . apache . cassandra . io . DataInputBuffer ; <nl> - import org . apache . cassandra . io . SSTableReader ; <nl> - import org . apache . cassandra . io . SSTableWriter ; <nl> - import org . apache . cassandra . db . ColumnFamilyStore ; <nl> - import org . apache . cassandra . db . Table ; <nl> + import org . apache . cassandra . io . Streaming ; <nl> import com . google . common . collect . Multimap ; <nl> import com . google . common . collect . ArrayListMultimap ; <nl> <nl> @ @ - 56 , 7 + 48 , 7 @ @ package org . apache . cassandra . dht ; <nl> * This class handles the bootstrapping responsibilities for the local endpoint . <nl> * <nl> * - bootstrapTokenVerb asks the most - loaded node what Token to use to split its Range in two . <nl> - * - bootstrapMetadataVerb tells source nodes to send us the necessary Ranges <nl> + * - streamRequestVerb tells source nodes to send us the necessary Ranges <nl> * - source nodes send streamInitiateVerb to us to say " get ready to receive data " [ if there is data to send ] <nl> * - when we have everything set up to receive the data , we send streamInitiateDoneVerb back to the source nodes and they start streaming <nl> * - when streaming is complete , we send streamFinishedVerb to the source so it can clean up on its end <nl> @ @ - 96 , 12 + 88 , 10 @ @ public class BootStrapper <nl> for ( Map . Entry < InetAddress , Collection < Range > > entry : getWorkMap ( rangesWithSourceTarget ) . asMap ( ) . entrySet ( ) ) <nl> { <nl> InetAddress source = entry . getKey ( ) ; <nl> - if ( logger . isDebugEnabled ( ) ) <nl> - logger . debug ( " Sending BootstrapMetadataMessage to " + source + " for " + StringUtils . join ( entry . getValue ( ) , " , " ) ) ; <nl> - BootstrapMetadata bsMetadata = new BootstrapMetadata ( address , entry . getValue ( ) ) ; <nl> - Message message = BootstrapMetadataMessage . makeBootstrapMetadataMessage ( new BootstrapMetadataMessage ( bsMetadata ) ) ; <nl> - MessagingService . instance ( ) . sendOneWay ( message , source ) ; <nl> StorageService . instance ( ) . addBootstrapSource ( source ) ; <nl> + if ( logger . isDebugEnabled ( ) ) <nl> + logger . debug ( " Requesting from " + source + " ranges " + StringUtils . join ( entry . getValue ( ) , " , " ) ) ; <nl> + Streaming . requestRanges ( source , entry . getValue ( ) ) ; <nl> } <nl> } <nl> } ) . start ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / dht / BootstrapMetadata . java b / src / java / org / apache / cassandra / dht / BootstrapMetadata . java <nl> deleted file mode 100644 <nl> index ef5401b . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / dht / BootstrapMetadata . java <nl> + + + / dev / null <nl> @ @ - 1 , 101 + 0 , 0 @ @ <nl> - / * * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package org . apache . cassandra . dht ; <nl> - <nl> - import java . io . DataInputStream ; <nl> - import java . io . DataOutputStream ; <nl> - import java . io . IOException ; <nl> - import java . util . ArrayList ; <nl> - import java . util . List ; <nl> - import java . util . Collection ; <nl> - <nl> - import org . apache . cassandra . io . ICompactSerializer ; <nl> - import org . apache . cassandra . net . CompactEndPointSerializationHelper ; <nl> - import java . net . InetAddress ; <nl> - <nl> - <nl> - <nl> - / * * <nl> - * This encapsulates information of the list of <nl> - * ranges that a target node requires in order to <nl> - * be bootstrapped . This will be bundled in a <nl> - * BootstrapMetadataMessage and sent to nodes that <nl> - * are going to handoff the data . <nl> - * / <nl> - class BootstrapMetadata <nl> - { <nl> - private static ICompactSerializer < BootstrapMetadata > serializer _ ; <nl> - static <nl> - { <nl> - serializer _ = new BootstrapMetadataSerializer ( ) ; <nl> - } <nl> - <nl> - protected static ICompactSerializer < BootstrapMetadata > serializer ( ) <nl> - { <nl> - return serializer _ ; <nl> - } <nl> - <nl> - protected InetAddress target _ ; <nl> - protected Collection < Range > ranges _ ; <nl> - <nl> - BootstrapMetadata ( InetAddress target , Collection < Range > ranges ) <nl> - { <nl> - target _ = target ; <nl> - ranges _ = ranges ; <nl> - } <nl> - <nl> - public String toString ( ) <nl> - { <nl> - StringBuilder sb = new StringBuilder ( " " ) ; <nl> - sb . append ( target _ ) ; <nl> - sb . append ( " - - - - - - - > " ) ; <nl> - for ( Range range : ranges _ ) <nl> - { <nl> - sb . append ( range ) ; <nl> - sb . append ( " " ) ; <nl> - } <nl> - return sb . toString ( ) ; <nl> - } <nl> - } <nl> - <nl> - class BootstrapMetadataSerializer implements ICompactSerializer < BootstrapMetadata > <nl> - { <nl> - public void serialize ( BootstrapMetadata bsMetadata , DataOutputStream dos ) throws IOException <nl> - { <nl> - CompactEndPointSerializationHelper . serialize ( bsMetadata . target _ , dos ) ; <nl> - dos . writeInt ( bsMetadata . ranges _ . size ( ) ) ; <nl> - for ( Range range : bsMetadata . ranges _ ) <nl> - { <nl> - Range . serializer ( ) . serialize ( range , dos ) ; <nl> - } <nl> - } <nl> - <nl> - public BootstrapMetadata deserialize ( DataInputStream dis ) throws IOException <nl> - { <nl> - InetAddress target = CompactEndPointSerializationHelper . deserialize ( dis ) ; <nl> - int size = dis . readInt ( ) ; <nl> - List < Range > ranges = ( size = = 0 ) ? null : new ArrayList < Range > ( ) ; <nl> - for ( int i = 0 ; i < size ; + + i ) <nl> - { <nl> - ranges . add ( Range . serializer ( ) . deserialize ( dis ) ) ; <nl> - } <nl> - return new BootstrapMetadata ( target , ranges ) ; <nl> - } <nl> - } <nl> - <nl> diff - - git a / src / java / org / apache / cassandra / dht / BootstrapMetadataMessage . java b / src / java / org / apache / cassandra / dht / BootstrapMetadataMessage . java <nl> deleted file mode 100644 <nl> index 719ca50 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / dht / BootstrapMetadataMessage . java <nl> + + + / dev / null <nl> @ @ - 1 , 96 + 0 , 0 @ @ <nl> - / * * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package org . apache . cassandra . dht ; <nl> - <nl> - import java . io . * ; <nl> - <nl> - import org . apache . cassandra . io . ICompactSerializer ; <nl> - import org . apache . cassandra . net . Message ; <nl> - import org . apache . cassandra . service . StorageService ; <nl> - import org . apache . cassandra . utils . FBUtilities ; <nl> - import org . apache . cassandra . concurrent . StageManager ; <nl> - <nl> - <nl> - / * * <nl> - * This class encapsulates the message that needs to be sent <nl> - * to nodes that handoff data . The message contains information <nl> - * about the node to be bootstrapped and the ranges with which <nl> - * it needs to be bootstrapped . <nl> - * / <nl> - class BootstrapMetadataMessage <nl> - { <nl> - private static ICompactSerializer < BootstrapMetadataMessage > serializer _ ; <nl> - static <nl> - { <nl> - serializer _ = new BootstrapMetadataMessageSerializer ( ) ; <nl> - } <nl> - <nl> - protected static ICompactSerializer < BootstrapMetadataMessage > serializer ( ) <nl> - { <nl> - return serializer _ ; <nl> - } <nl> - <nl> - protected static Message makeBootstrapMetadataMessage ( BootstrapMetadataMessage bsMetadataMessage ) <nl> - { <nl> - ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; <nl> - DataOutputStream dos = new DataOutputStream ( bos ) ; <nl> - try <nl> - { <nl> - BootstrapMetadataMessage . serializer ( ) . serialize ( bsMetadataMessage , dos ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - throw new IOError ( e ) ; <nl> - } <nl> - return new Message ( FBUtilities . getLocalAddress ( ) , StageManager . streamStage _ , StorageService . bootstrapMetadataVerbHandler _ , bos . toByteArray ( ) ) ; <nl> - } <nl> - <nl> - protected BootstrapMetadata [ ] bsMetadata _ = new BootstrapMetadata [ 0 ] ; <nl> - <nl> - / / TODO only actually ever need one BM , not an array <nl> - BootstrapMetadataMessage ( BootstrapMetadata . . . bsMetadata ) <nl> - { <nl> - assert bsMetadata ! = null ; <nl> - bsMetadata _ = bsMetadata ; <nl> - } <nl> - } <nl> - <nl> - class BootstrapMetadataMessageSerializer implements ICompactSerializer < BootstrapMetadataMessage > <nl> - { <nl> - public void serialize ( BootstrapMetadataMessage bsMetadataMessage , DataOutputStream dos ) throws IOException <nl> - { <nl> - BootstrapMetadata [ ] bsMetadata = bsMetadataMessage . bsMetadata _ ; <nl> - dos . writeInt ( bsMetadata . length ) ; <nl> - for ( BootstrapMetadata bsmd : bsMetadata ) <nl> - { <nl> - BootstrapMetadata . serializer ( ) . serialize ( bsmd , dos ) ; <nl> - } <nl> - } <nl> - <nl> - public BootstrapMetadataMessage deserialize ( DataInputStream dis ) throws IOException <nl> - { <nl> - int size = dis . readInt ( ) ; <nl> - BootstrapMetadata [ ] bsMetadata = new BootstrapMetadata [ size ] ; <nl> - for ( int i = 0 ; i < size ; + + i ) <nl> - { <nl> - bsMetadata [ i ] = BootstrapMetadata . serializer ( ) . deserialize ( dis ) ; <nl> - } <nl> - return new BootstrapMetadataMessage ( bsMetadata ) ; <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / dht / BootstrapMetadataVerbHandler . java b / src / java / org / apache / cassandra / dht / BootstrapMetadataVerbHandler . java <nl> deleted file mode 100644 <nl> index 90fac4c . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / dht / BootstrapMetadataVerbHandler . java <nl> + + + / dev / null <nl> @ @ - 1 , 82 + 0 , 0 @ @ <nl> - / * * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package org . apache . cassandra . dht ; <nl> - <nl> - import java . io . File ; <nl> - import java . io . IOException ; <nl> - import java . io . IOError ; <nl> - import java . util . ArrayList ; <nl> - import java . util . List ; <nl> - import java . util . Collection ; <nl> - <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - import org . apache . cassandra . db . Table ; <nl> - import org . apache . cassandra . io . DataInputBuffer ; <nl> - import org . apache . cassandra . io . SSTableReader ; <nl> - import org . apache . cassandra . io . Streaming ; <nl> - <nl> - import java . net . InetAddress ; <nl> - import org . apache . cassandra . net . IVerbHandler ; <nl> - import org . apache . cassandra . net . Message ; <nl> - import org . apache . cassandra . net . MessagingService ; <nl> - import org . apache . cassandra . net . io . StreamContextManager ; <nl> - import org . apache . cassandra . service . StorageService ; <nl> - import org . apache . cassandra . service . StreamManager ; <nl> - <nl> - import org . apache . log4j . Logger ; <nl> - import org . apache . commons . lang . StringUtils ; <nl> - <nl> - / * * <nl> - * This verb handler handles the BootstrapMetadataMessage that is sent <nl> - * by the leader to the nodes that are responsible for handing off data . <nl> - * / <nl> - public class BootstrapMetadataVerbHandler implements IVerbHandler <nl> - { <nl> - private static Logger logger _ = Logger . getLogger ( BootstrapMetadataVerbHandler . class ) ; <nl> - <nl> - public void doVerb ( Message message ) <nl> - { <nl> - if ( logger _ . isDebugEnabled ( ) ) <nl> - logger _ . debug ( " Received a BootstrapMetadataMessage from " + message . getFrom ( ) ) ; <nl> - <nl> - / * Cannot bootstrap another node if I ' m in bootstrap mode myself ! * / <nl> - assert ! StorageService . instance ( ) . isBootstrapMode ( ) ; <nl> - <nl> - byte [ ] body = message . getMessageBody ( ) ; <nl> - DataInputBuffer bufIn = new DataInputBuffer ( ) ; <nl> - bufIn . reset ( body , body . length ) ; <nl> - try <nl> - { <nl> - BootstrapMetadataMessage bsMetadataMessage = BootstrapMetadataMessage . serializer ( ) . deserialize ( bufIn ) ; <nl> - BootstrapMetadata [ ] bsMetadata = bsMetadataMessage . bsMetadata _ ; <nl> - <nl> - for ( BootstrapMetadata bsmd : bsMetadata ) <nl> - { <nl> - if ( logger _ . isDebugEnabled ( ) ) <nl> - logger _ . debug ( bsmd . toString ( ) ) ; <nl> - Streaming . transferRanges ( bsmd . target _ , bsmd . ranges _ , null ) ; <nl> - } <nl> - } <nl> - catch ( IOException ex ) <nl> - { <nl> - throw new IOError ( ex ) ; <nl> - } <nl> - } <nl> - } <nl> - <nl> diff - - git a / src / java / org / apache / cassandra / io / StreamRequestMessage . java b / src / java / org / apache / cassandra / io / StreamRequestMessage . java <nl> new file mode 100644 <nl> index 0000000 . . a1b3d01 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / io / StreamRequestMessage . java <nl> @ @ - 0 , 0 + 1 , 93 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . io ; <nl> + <nl> + import java . io . * ; <nl> + <nl> + import org . apache . cassandra . net . Message ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> + import org . apache . cassandra . concurrent . StageManager ; <nl> + <nl> + / * * <nl> + * This class encapsulates the message that needs to be sent to nodes <nl> + * that handoff data . The message contains information about ranges <nl> + * that need to be transferred and the target node . <nl> + * / <nl> + class StreamRequestMessage <nl> + { <nl> + private static ICompactSerializer < StreamRequestMessage > serializer _ ; <nl> + static <nl> + { <nl> + serializer _ = new StreamRequestMessageSerializer ( ) ; <nl> + } <nl> + <nl> + protected static ICompactSerializer < StreamRequestMessage > serializer ( ) <nl> + { <nl> + return serializer _ ; <nl> + } <nl> + <nl> + protected static Message makeStreamRequestMessage ( StreamRequestMessage streamRequestMessage ) <nl> + { <nl> + ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; <nl> + DataOutputStream dos = new DataOutputStream ( bos ) ; <nl> + try <nl> + { <nl> + StreamRequestMessage . serializer ( ) . serialize ( streamRequestMessage , dos ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new IOError ( e ) ; <nl> + } <nl> + return new Message ( FBUtilities . getLocalAddress ( ) , StageManager . streamStage _ , StorageService . streamRequestVerbHandler _ , bos . toByteArray ( ) ) ; <nl> + } <nl> + <nl> + protected StreamRequestMetadata [ ] streamRequestMetadata _ = new StreamRequestMetadata [ 0 ] ; <nl> + <nl> + / / TODO only actually ever need one BM , not an array <nl> + StreamRequestMessage ( StreamRequestMetadata . . . streamRequestMetadata ) <nl> + { <nl> + assert streamRequestMetadata ! = null ; <nl> + streamRequestMetadata _ = streamRequestMetadata ; <nl> + } <nl> + } <nl> + <nl> + class StreamRequestMessageSerializer implements ICompactSerializer < StreamRequestMessage > <nl> + { <nl> + public void serialize ( StreamRequestMessage streamRequestMessage , DataOutputStream dos ) throws IOException <nl> + { <nl> + StreamRequestMetadata [ ] streamRequestMetadata = streamRequestMessage . streamRequestMetadata _ ; <nl> + dos . writeInt ( streamRequestMetadata . length ) ; <nl> + for ( StreamRequestMetadata bsmd : streamRequestMetadata ) <nl> + { <nl> + StreamRequestMetadata . serializer ( ) . serialize ( bsmd , dos ) ; <nl> + } <nl> + } <nl> + <nl> + public StreamRequestMessage deserialize ( DataInputStream dis ) throws IOException <nl> + { <nl> + int size = dis . readInt ( ) ; <nl> + StreamRequestMetadata [ ] streamRequestMetadata = new StreamRequestMetadata [ size ] ; <nl> + for ( int i = 0 ; i < size ; + + i ) <nl> + { <nl> + streamRequestMetadata [ i ] = StreamRequestMetadata . serializer ( ) . deserialize ( dis ) ; <nl> + } <nl> + return new StreamRequestMessage ( streamRequestMetadata ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / io / StreamRequestMetadata . java b / src / java / org / apache / cassandra / io / StreamRequestMetadata . java <nl> new file mode 100644 <nl> index 0000000 . . eff563f <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / io / StreamRequestMetadata . java <nl> @ @ - 0 , 0 + 1 , 98 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . io ; <nl> + <nl> + import java . io . DataInputStream ; <nl> + import java . io . DataOutputStream ; <nl> + import java . io . IOException ; <nl> + import java . net . InetAddress ; <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + import java . util . Collection ; <nl> + <nl> + import org . apache . cassandra . net . CompactEndPointSerializationHelper ; <nl> + import org . apache . cassandra . dht . Range ; <nl> + <nl> + / * * <nl> + * This encapsulates information of the list of ranges that a target <nl> + * node requires to be transferred . This will be bundled in a <nl> + * StreamRequestsMessage and sent to nodes that are going to handoff <nl> + * the data . <nl> + * / <nl> + class StreamRequestMetadata <nl> + { <nl> + private static ICompactSerializer < StreamRequestMetadata > serializer _ ; <nl> + static <nl> + { <nl> + serializer _ = new StreamRequestMetadataSerializer ( ) ; <nl> + } <nl> + <nl> + protected static ICompactSerializer < StreamRequestMetadata > serializer ( ) <nl> + { <nl> + return serializer _ ; <nl> + } <nl> + <nl> + protected InetAddress target _ ; <nl> + protected Collection < Range > ranges _ ; <nl> + <nl> + StreamRequestMetadata ( InetAddress target , Collection < Range > ranges ) <nl> + { <nl> + target _ = target ; <nl> + ranges _ = ranges ; <nl> + } <nl> + <nl> + public String toString ( ) <nl> + { <nl> + StringBuilder sb = new StringBuilder ( " " ) ; <nl> + sb . append ( target _ ) ; <nl> + sb . append ( " - - - - - - - > " ) ; <nl> + for ( Range range : ranges _ ) <nl> + { <nl> + sb . append ( range ) ; <nl> + sb . append ( " " ) ; <nl> + } <nl> + return sb . toString ( ) ; <nl> + } <nl> + } <nl> + <nl> + class StreamRequestMetadataSerializer implements ICompactSerializer < StreamRequestMetadata > <nl> + { <nl> + public void serialize ( StreamRequestMetadata srMetadata , DataOutputStream dos ) throws IOException <nl> + { <nl> + CompactEndPointSerializationHelper . serialize ( srMetadata . target _ , dos ) ; <nl> + dos . writeInt ( srMetadata . ranges _ . size ( ) ) ; <nl> + for ( Range range : srMetadata . ranges _ ) <nl> + { <nl> + Range . serializer ( ) . serialize ( range , dos ) ; <nl> + } <nl> + } <nl> + <nl> + public StreamRequestMetadata deserialize ( DataInputStream dis ) throws IOException <nl> + { <nl> + InetAddress target = CompactEndPointSerializationHelper . deserialize ( dis ) ; <nl> + int size = dis . readInt ( ) ; <nl> + List < Range > ranges = ( size = = 0 ) ? null : new ArrayList < Range > ( ) ; <nl> + for ( int i = 0 ; i < size ; + + i ) <nl> + { <nl> + ranges . add ( Range . serializer ( ) . deserialize ( dis ) ) ; <nl> + } <nl> + return new StreamRequestMetadata ( target , ranges ) ; <nl> + } <nl> + } <nl> + <nl> diff - - git a / src / java / org / apache / cassandra / io / StreamRequestVerbHandler . java b / src / java / org / apache / cassandra / io / StreamRequestVerbHandler . java <nl> new file mode 100644 <nl> index 0000000 . . 5a4a954 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / io / StreamRequestVerbHandler . java <nl> @ @ - 0 , 0 + 1 , 76 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . io ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . io . IOError ; <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + import java . util . Collection ; <nl> + <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . db . Table ; <nl> + <nl> + import java . net . InetAddress ; <nl> + import org . apache . cassandra . net . IVerbHandler ; <nl> + import org . apache . cassandra . net . Message ; <nl> + import org . apache . cassandra . net . MessagingService ; <nl> + import org . apache . cassandra . net . io . StreamContextManager ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> + import org . apache . cassandra . service . StreamManager ; <nl> + <nl> + import org . apache . log4j . Logger ; <nl> + import org . apache . commons . lang . StringUtils ; <nl> + <nl> + / * * <nl> + * This verb handler handles the StreamRequestMessage that is sent by <nl> + * the node requesting range transfer . <nl> + * / <nl> + public class StreamRequestVerbHandler implements IVerbHandler <nl> + { <nl> + private static Logger logger _ = Logger . getLogger ( StreamRequestVerbHandler . class ) ; <nl> + <nl> + public void doVerb ( Message message ) <nl> + { <nl> + if ( logger _ . isDebugEnabled ( ) ) <nl> + logger _ . debug ( " Received a StreamRequestMessage from " + message . getFrom ( ) ) ; <nl> + <nl> + byte [ ] body = message . getMessageBody ( ) ; <nl> + DataInputBuffer bufIn = new DataInputBuffer ( ) ; <nl> + bufIn . reset ( body , body . length ) ; <nl> + try <nl> + { <nl> + StreamRequestMessage streamRequestMessage = StreamRequestMessage . serializer ( ) . deserialize ( bufIn ) ; <nl> + StreamRequestMetadata [ ] streamRequestMetadata = streamRequestMessage . streamRequestMetadata _ ; <nl> + <nl> + for ( StreamRequestMetadata srm : streamRequestMetadata ) <nl> + { <nl> + if ( logger _ . isDebugEnabled ( ) ) <nl> + logger _ . debug ( srm . toString ( ) ) ; <nl> + Streaming . transferRanges ( srm . target _ , srm . ranges _ , null ) ; <nl> + } <nl> + } <nl> + catch ( IOException ex ) <nl> + { <nl> + throw new IOError ( ex ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> diff - - git a / src / java / org / apache / cassandra / io / Streaming . java b / src / java / org / apache / cassandra / io / Streaming . java <nl> index 7d2e1d5 . . 4033f94 100644 <nl> - - - a / src / java / org / apache / cassandra / io / Streaming . java <nl> + + + b / src / java / org / apache / cassandra / io / Streaming . java <nl> @ @ - 126 , 6 + 126 , 16 @ @ public class Streaming <nl> } <nl> } <nl> <nl> + / * * <nl> + * Request ranges to be transferred <nl> + * / <nl> + public static void requestRanges ( InetAddress source , Collection < Range > ranges ) <nl> + { <nl> + StreamRequestMetadata streamRequestMetadata = new StreamRequestMetadata ( FBUtilities . getLocalAddress ( ) , ranges ) ; <nl> + Message message = StreamRequestMessage . makeStreamRequestMessage ( new StreamRequestMessage ( streamRequestMetadata ) ) ; <nl> + MessagingService . instance ( ) . sendOneWay ( message , source ) ; <nl> + } <nl> + <nl> public static class StreamInitiateVerbHandler implements IVerbHandler <nl> { <nl> / * <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index ce2a93d . . 759a404 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 41 , 7 + 41 , 6 @ @ import org . apache . cassandra . utils . Pair ; <nl> import org . apache . cassandra . locator . TokenMetadata ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . dht . Range ; <nl> - import org . apache . cassandra . dht . Token ; <nl> import org . apache . cassandra . gms . FailureDetector ; <nl> import org . apache . cassandra . concurrent . StageManager ; <nl> <nl> @ @ - 83 , 14 + 82 , 6 @ @ public class StorageProxy implements StorageProxyMBean <nl> } <nl> } ; <nl> <nl> - private static Comparator < Row > rowComparator = new Comparator < Row > ( ) <nl> - { <nl> - public int compare ( Row r1 , Row r2 ) <nl> - { <nl> - return keyComparator . compare ( r1 . key , r2 . key ) ; <nl> - } <nl> - } ; <nl> - <nl> / * * <nl> * Use this method to have this RowMutation applied <nl> * across all replicas . This method will take care <nl> @ @ - 308 , 7 + 299 , 6 @ @ public class StorageProxy implements StorageProxyMBean <nl> <nl> List < Row > rows = new ArrayList < Row > ( ) ; <nl> List < IAsyncResult > iars = new ArrayList < IAsyncResult > ( ) ; <nl> - int commandIndex = 0 ; <nl> <nl> for ( ReadCommand command : commands ) <nl> { <nl> @ @ - 337 , 7 + 327 , 6 @ @ public class StorageProxy implements StorageProxyMBean <nl> ReadResponse response = ReadResponse . serializer ( ) . deserialize ( bufIn ) ; <nl> if ( response . row ( ) ! = null ) <nl> rows . add ( response . row ( ) ) ; <nl> - commandIndex + + ; <nl> } <nl> return rows ; <nl> } <nl> @ @ - 412 , 7 + 401 , 6 @ @ public class StorageProxy implements StorageProxyMBean <nl> <nl> for ( ReadCommand command : commands ) <nl> { <nl> - / / TODO : throw a thrift exception if we do not have N nodes <nl> assert ! command . isDigestQuery ( ) ; <nl> ReadCommand readMessageDigestOnly = command . copy ( ) ; <nl> readMessageDigestOnly . setDigestQuery ( true ) ; <nl> @ @ - 707 , 7 + 695 , 6 @ @ public class StorageProxy implements StorageProxyMBean <nl> List < InetAddress > endpoints = StorageService . instance ( ) . getLiveNaturalEndpoints ( command . key ) ; <nl> / * Remove the local storage endpoint from the list . * / <nl> endpoints . remove ( FBUtilities . getLocalAddress ( ) ) ; <nl> - / / TODO : throw a thrift exception if we do not have N nodes <nl> <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( " weakreadlocal reading " + command ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 634aaef . . cab71f2 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 42 , 6 + 42 , 7 @ @ import org . apache . cassandra . utils . LogUtil ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . io . SSTableReader ; <nl> import org . apache . cassandra . io . Streaming ; <nl> + import org . apache . cassandra . io . StreamRequestVerbHandler ; <nl> <nl> import org . apache . log4j . Logger ; <nl> import org . apache . log4j . Level ; <nl> @ @ - 76 , 7 + 77 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> public final static String streamInitiateDoneVerbHandler _ = " BOOTSTRAP - INITIATE - DONE - VERB - HANDLER " ; <nl> public final static String streamFinishedVerbHandler _ = " BOOTSTRAP - TERMINATE - VERB - HANDLER " ; <nl> public final static String dataFileVerbHandler _ = " DATA - FILE - VERB - HANDLER " ; <nl> - public final static String bootstrapMetadataVerbHandler _ = " BS - METADATA - VERB - HANDLER " ; <nl> + public final static String streamRequestVerbHandler _ = " BS - METADATA - VERB - HANDLER " ; <nl> public final static String rangeVerbHandler _ = " RANGE - VERB - HANDLER " ; <nl> public final static String rangeSliceVerbHandler _ = " RANGE - SLICE - VERB - HANDLER " ; <nl> public final static String bootstrapTokenVerbHandler _ = " SPLITS - VERB - HANDLER " ; <nl> @ @ - 216 , 7 + 217 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> MessagingService . instance ( ) . registerVerbHandlers ( rangeSliceVerbHandler _ , new RangeSliceVerbHandler ( ) ) ; <nl> / / see BootStrapper for a summary of how the bootstrap verbs interact <nl> MessagingService . instance ( ) . registerVerbHandlers ( bootstrapTokenVerbHandler _ , new BootStrapper . BootstrapTokenVerbHandler ( ) ) ; <nl> - MessagingService . instance ( ) . registerVerbHandlers ( bootstrapMetadataVerbHandler _ , new BootstrapMetadataVerbHandler ( ) ) ; <nl> + MessagingService . instance ( ) . registerVerbHandlers ( streamRequestVerbHandler _ , new StreamRequestVerbHandler ( ) ) ; <nl> MessagingService . instance ( ) . registerVerbHandlers ( streamInitiateVerbHandler _ , new Streaming . StreamInitiateVerbHandler ( ) ) ; <nl> MessagingService . instance ( ) . registerVerbHandlers ( streamInitiateDoneVerbHandler _ , new Streaming . StreamInitiateDoneVerbHandler ( ) ) ; <nl> MessagingService . instance ( ) . registerVerbHandlers ( streamFinishedVerbHandler _ , new Streaming . StreamFinishedVerbHandler ( ) ) ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java 
 index b229060 . . b6fceda 100644 
 - - - a / src / java / org / apache / cassandra / db / Memtable . java 
 + + + b / src / java / org / apache / cassandra / db / Memtable . java 
 @ @ - 192 , 7 + 192 , 6 @ @ public class Memtable 
 { 
 ColumnFamily previous = columnFamilies . get ( key ) ; 
 
 - long sizeDelta = 0 ; 
 if ( previous = = null ) 
 { 
 / / AtomicSortedColumns doesn ' t work for super columns ( see # 3821 ) 
 @ @ - 200 , 13 + 199 , 10 @ @ public class Memtable 
 / / We ' ll add the columns later . This avoids wasting works if we get beaten in the putIfAbsent 
 previous = columnFamilies . putIfAbsent ( new DecoratedKey ( key . token , allocator . clone ( key . key ) ) , empty ) ; 
 if ( previous = = null ) 
 - { 
 previous = empty ; 
 - sizeDelta + = empty . deletionInfo ( ) . dataSize ( ) ; 
 - } 
 } 
 
 - sizeDelta = previous . addAllWithSizeDelta ( cf , allocator , localCopyFunction , indexer ) ; 
 + long sizeDelta = previous . addAllWithSizeDelta ( cf , allocator , localCopyFunction , indexer ) ; 
 currentSize . addAndGet ( sizeDelta ) ; 
 currentOperations . addAndGet ( cf . getColumnCount ( ) + ( cf . isMarkedForDelete ( ) ? 1 : 0 ) + cf . deletionInfo ( ) . rangeCount ( ) ) ; 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / dht / BootStrapper . java b / src / java / org / apache / cassandra / dht / BootStrapper . java 
 index c1eb684 . . 43c2302 100644 
 - - - a / src / java / org / apache / cassandra / dht / BootStrapper . java 
 + + + b / src / java / org / apache / cassandra / dht / BootStrapper . java 
 @ @ - 33 , 21 + 33 , 13 @ @ package org . apache . cassandra . dht ; 
 import org . apache . cassandra . locator . TokenMetadata ; 
 import org . apache . cassandra . locator . AbstractReplicationStrategy ; 
 import org . apache . cassandra . net . * ; 
 - import org . apache . cassandra . net . io . StreamContextManager ; 
 - import org . apache . cassandra . net . io . IStreamComplete ; 
 import org . apache . cassandra . service . StorageService ; 
 - import org . apache . cassandra . service . StreamManager ; 
 - import org . apache . cassandra . utils . LogUtil ; 
 import org . apache . cassandra . utils . SimpleCondition ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . gms . FailureDetector ; 
 import org . apache . cassandra . gms . IFailureDetector ; 
 - import org . apache . cassandra . io . DataInputBuffer ; 
 - import org . apache . cassandra . io . SSTableReader ; 
 - import org . apache . cassandra . io . SSTableWriter ; 
 - import org . apache . cassandra . db . ColumnFamilyStore ; 
 - import org . apache . cassandra . db . Table ; 
 + import org . apache . cassandra . io . Streaming ; 
 import com . google . common . collect . Multimap ; 
 import com . google . common . collect . ArrayListMultimap ; 
 
 @ @ - 56 , 7 + 48 , 7 @ @ package org . apache . cassandra . dht ; 
 * This class handles the bootstrapping responsibilities for the local endpoint . 
 * 
 * - bootstrapTokenVerb asks the most - loaded node what Token to use to split its Range in two . 
 - * - bootstrapMetadataVerb tells source nodes to send us the necessary Ranges 
 + * - streamRequestVerb tells source nodes to send us the necessary Ranges 
 * - source nodes send streamInitiateVerb to us to say " get ready to receive data " [ if there is data to send ] 
 * - when we have everything set up to receive the data , we send streamInitiateDoneVerb back to the source nodes and they start streaming 
 * - when streaming is complete , we send streamFinishedVerb to the source so it can clean up on its end 
 @ @ - 96 , 12 + 88 , 10 @ @ public class BootStrapper 
 for ( Map . Entry < InetAddress , Collection < Range > > entry : getWorkMap ( rangesWithSourceTarget ) . asMap ( ) . entrySet ( ) ) 
 { 
 InetAddress source = entry . getKey ( ) ; 
 - if ( logger . isDebugEnabled ( ) ) 
 - logger . debug ( " Sending BootstrapMetadataMessage to " + source + " for " + StringUtils . join ( entry . getValue ( ) , " , " ) ) ; 
 - BootstrapMetadata bsMetadata = new BootstrapMetadata ( address , entry . getValue ( ) ) ; 
 - Message message = BootstrapMetadataMessage . makeBootstrapMetadataMessage ( new BootstrapMetadataMessage ( bsMetadata ) ) ; 
 - MessagingService . instance ( ) . sendOneWay ( message , source ) ; 
 StorageService . instance ( ) . addBootstrapSource ( source ) ; 
 + if ( logger . isDebugEnabled ( ) ) 
 + logger . debug ( " Requesting from " + source + " ranges " + StringUtils . join ( entry . getValue ( ) , " , " ) ) ; 
 + Streaming . requestRanges ( source , entry . getValue ( ) ) ; 
 } 
 } 
 } ) . start ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / dht / BootstrapMetadata . java b / src / java / org / apache / cassandra / dht / BootstrapMetadata . java 
 deleted file mode 100644 
 index ef5401b . . 0000000 
 - - - a / src / java / org / apache / cassandra / dht / BootstrapMetadata . java 
 + + + / dev / null 
 @ @ - 1 , 101 + 0 , 0 @ @ 
 - / * * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package org . apache . cassandra . dht ; 
 - 
 - import java . io . DataInputStream ; 
 - import java . io . DataOutputStream ; 
 - import java . io . IOException ; 
 - import java . util . ArrayList ; 
 - import java . util . List ; 
 - import java . util . Collection ; 
 - 
 - import org . apache . cassandra . io . ICompactSerializer ; 
 - import org . apache . cassandra . net . CompactEndPointSerializationHelper ; 
 - import java . net . InetAddress ; 
 - 
 - 
 - 
 - / * * 
 - * This encapsulates information of the list of 
 - * ranges that a target node requires in order to 
 - * be bootstrapped . This will be bundled in a 
 - * BootstrapMetadataMessage and sent to nodes that 
 - * are going to handoff the data . 
 - * / 
 - class BootstrapMetadata 
 - { 
 - private static ICompactSerializer < BootstrapMetadata > serializer _ ; 
 - static 
 - { 
 - serializer _ = new BootstrapMetadataSerializer ( ) ; 
 - } 
 - 
 - protected static ICompactSerializer < BootstrapMetadata > serializer ( ) 
 - { 
 - return serializer _ ; 
 - } 
 - 
 - protected InetAddress target _ ; 
 - protected Collection < Range > ranges _ ; 
 - 
 - BootstrapMetadata ( InetAddress target , Collection < Range > ranges ) 
 - { 
 - target _ = target ; 
 - ranges _ = ranges ; 
 - } 
 - 
 - public String toString ( ) 
 - { 
 - StringBuilder sb = new StringBuilder ( " " ) ; 
 - sb . append ( target _ ) ; 
 - sb . append ( " - - - - - - - > " ) ; 
 - for ( Range range : ranges _ ) 
 - { 
 - sb . append ( range ) ; 
 - sb . append ( " " ) ; 
 - } 
 - return sb . toString ( ) ; 
 - } 
 - } 
 - 
 - class BootstrapMetadataSerializer implements ICompactSerializer < BootstrapMetadata > 
 - { 
 - public void serialize ( BootstrapMetadata bsMetadata , DataOutputStream dos ) throws IOException 
 - { 
 - CompactEndPointSerializationHelper . serialize ( bsMetadata . target _ , dos ) ; 
 - dos . writeInt ( bsMetadata . ranges _ . size ( ) ) ; 
 - for ( Range range : bsMetadata . ranges _ ) 
 - { 
 - Range . serializer ( ) . serialize ( range , dos ) ; 
 - } 
 - } 
 - 
 - public BootstrapMetadata deserialize ( DataInputStream dis ) throws IOException 
 - { 
 - InetAddress target = CompactEndPointSerializationHelper . deserialize ( dis ) ; 
 - int size = dis . readInt ( ) ; 
 - List < Range > ranges = ( size = = 0 ) ? null : new ArrayList < Range > ( ) ; 
 - for ( int i = 0 ; i < size ; + + i ) 
 - { 
 - ranges . add ( Range . serializer ( ) . deserialize ( dis ) ) ; 
 - } 
 - return new BootstrapMetadata ( target , ranges ) ; 
 - } 
 - } 
 - 
 diff - - git a / src / java / org / apache / cassandra / dht / BootstrapMetadataMessage . java b / src / java / org / apache / cassandra / dht / BootstrapMetadataMessage . java 
 deleted file mode 100644 
 index 719ca50 . . 0000000 
 - - - a / src / java / org / apache / cassandra / dht / BootstrapMetadataMessage . java 
 + + + / dev / null 
 @ @ - 1 , 96 + 0 , 0 @ @ 
 - / * * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package org . apache . cassandra . dht ; 
 - 
 - import java . io . * ; 
 - 
 - import org . apache . cassandra . io . ICompactSerializer ; 
 - import org . apache . cassandra . net . Message ; 
 - import org . apache . cassandra . service . StorageService ; 
 - import org . apache . cassandra . utils . FBUtilities ; 
 - import org . apache . cassandra . concurrent . StageManager ; 
 - 
 - 
 - / * * 
 - * This class encapsulates the message that needs to be sent 
 - * to nodes that handoff data . The message contains information 
 - * about the node to be bootstrapped and the ranges with which 
 - * it needs to be bootstrapped . 
 - * / 
 - class BootstrapMetadataMessage 
 - { 
 - private static ICompactSerializer < BootstrapMetadataMessage > serializer _ ; 
 - static 
 - { 
 - serializer _ = new BootstrapMetadataMessageSerializer ( ) ; 
 - } 
 - 
 - protected static ICompactSerializer < BootstrapMetadataMessage > serializer ( ) 
 - { 
 - return serializer _ ; 
 - } 
 - 
 - protected static Message makeBootstrapMetadataMessage ( BootstrapMetadataMessage bsMetadataMessage ) 
 - { 
 - ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; 
 - DataOutputStream dos = new DataOutputStream ( bos ) ; 
 - try 
 - { 
 - BootstrapMetadataMessage . serializer ( ) . serialize ( bsMetadataMessage , dos ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - throw new IOError ( e ) ; 
 - } 
 - return new Message ( FBUtilities . getLocalAddress ( ) , StageManager . streamStage _ , StorageService . bootstrapMetadataVerbHandler _ , bos . toByteArray ( ) ) ; 
 - } 
 - 
 - protected BootstrapMetadata [ ] bsMetadata _ = new BootstrapMetadata [ 0 ] ; 
 - 
 - / / TODO only actually ever need one BM , not an array 
 - BootstrapMetadataMessage ( BootstrapMetadata . . . bsMetadata ) 
 - { 
 - assert bsMetadata ! = null ; 
 - bsMetadata _ = bsMetadata ; 
 - } 
 - } 
 - 
 - class BootstrapMetadataMessageSerializer implements ICompactSerializer < BootstrapMetadataMessage > 
 - { 
 - public void serialize ( BootstrapMetadataMessage bsMetadataMessage , DataOutputStream dos ) throws IOException 
 - { 
 - BootstrapMetadata [ ] bsMetadata = bsMetadataMessage . bsMetadata _ ; 
 - dos . writeInt ( bsMetadata . length ) ; 
 - for ( BootstrapMetadata bsmd : bsMetadata ) 
 - { 
 - BootstrapMetadata . serializer ( ) . serialize ( bsmd , dos ) ; 
 - } 
 - } 
 - 
 - public BootstrapMetadataMessage deserialize ( DataInputStream dis ) throws IOException 
 - { 
 - int size = dis . readInt ( ) ; 
 - BootstrapMetadata [ ] bsMetadata = new BootstrapMetadata [ size ] ; 
 - for ( int i = 0 ; i < size ; + + i ) 
 - { 
 - bsMetadata [ i ] = BootstrapMetadata . serializer ( ) . deserialize ( dis ) ; 
 - } 
 - return new BootstrapMetadataMessage ( bsMetadata ) ; 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / dht / BootstrapMetadataVerbHandler . java b / src / java / org / apache / cassandra / dht / BootstrapMetadataVerbHandler . java 
 deleted file mode 100644 
 index 90fac4c . . 0000000 
 - - - a / src / java / org / apache / cassandra / dht / BootstrapMetadataVerbHandler . java 
 + + + / dev / null 
 @ @ - 1 , 82 + 0 , 0 @ @ 
 - / * * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package org . apache . cassandra . dht ; 
 - 
 - import java . io . File ; 
 - import java . io . IOException ; 
 - import java . io . IOError ; 
 - import java . util . ArrayList ; 
 - import java . util . List ; 
 - import java . util . Collection ; 
 - 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 - import org . apache . cassandra . db . Table ; 
 - import org . apache . cassandra . io . DataInputBuffer ; 
 - import org . apache . cassandra . io . SSTableReader ; 
 - import org . apache . cassandra . io . Streaming ; 
 - 
 - import java . net . InetAddress ; 
 - import org . apache . cassandra . net . IVerbHandler ; 
 - import org . apache . cassandra . net . Message ; 
 - import org . apache . cassandra . net . MessagingService ; 
 - import org . apache . cassandra . net . io . StreamContextManager ; 
 - import org . apache . cassandra . service . StorageService ; 
 - import org . apache . cassandra . service . StreamManager ; 
 - 
 - import org . apache . log4j . Logger ; 
 - import org . apache . commons . lang . StringUtils ; 
 - 
 - / * * 
 - * This verb handler handles the BootstrapMetadataMessage that is sent 
 - * by the leader to the nodes that are responsible for handing off data . 
 - * / 
 - public class BootstrapMetadataVerbHandler implements IVerbHandler 
 - { 
 - private static Logger logger _ = Logger . getLogger ( BootstrapMetadataVerbHandler . class ) ; 
 - 
 - public void doVerb ( Message message ) 
 - { 
 - if ( logger _ . isDebugEnabled ( ) ) 
 - logger _ . debug ( " Received a BootstrapMetadataMessage from " + message . getFrom ( ) ) ; 
 - 
 - / * Cannot bootstrap another node if I ' m in bootstrap mode myself ! * / 
 - assert ! StorageService . instance ( ) . isBootstrapMode ( ) ; 
 - 
 - byte [ ] body = message . getMessageBody ( ) ; 
 - DataInputBuffer bufIn = new DataInputBuffer ( ) ; 
 - bufIn . reset ( body , body . length ) ; 
 - try 
 - { 
 - BootstrapMetadataMessage bsMetadataMessage = BootstrapMetadataMessage . serializer ( ) . deserialize ( bufIn ) ; 
 - BootstrapMetadata [ ] bsMetadata = bsMetadataMessage . bsMetadata _ ; 
 - 
 - for ( BootstrapMetadata bsmd : bsMetadata ) 
 - { 
 - if ( logger _ . isDebugEnabled ( ) ) 
 - logger _ . debug ( bsmd . toString ( ) ) ; 
 - Streaming . transferRanges ( bsmd . target _ , bsmd . ranges _ , null ) ; 
 - } 
 - } 
 - catch ( IOException ex ) 
 - { 
 - throw new IOError ( ex ) ; 
 - } 
 - } 
 - } 
 - 
 diff - - git a / src / java / org / apache / cassandra / io / StreamRequestMessage . java b / src / java / org / apache / cassandra / io / StreamRequestMessage . java 
 new file mode 100644 
 index 0000000 . . a1b3d01 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / io / StreamRequestMessage . java 
 @ @ - 0 , 0 + 1 , 93 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . io ; 
 + 
 + import java . io . * ; 
 + 
 + import org . apache . cassandra . net . Message ; 
 + import org . apache . cassandra . service . StorageService ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 + import org . apache . cassandra . concurrent . StageManager ; 
 + 
 + / * * 
 + * This class encapsulates the message that needs to be sent to nodes 
 + * that handoff data . The message contains information about ranges 
 + * that need to be transferred and the target node . 
 + * / 
 + class StreamRequestMessage 
 + { 
 + private static ICompactSerializer < StreamRequestMessage > serializer _ ; 
 + static 
 + { 
 + serializer _ = new StreamRequestMessageSerializer ( ) ; 
 + } 
 + 
 + protected static ICompactSerializer < StreamRequestMessage > serializer ( ) 
 + { 
 + return serializer _ ; 
 + } 
 + 
 + protected static Message makeStreamRequestMessage ( StreamRequestMessage streamRequestMessage ) 
 + { 
 + ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; 
 + DataOutputStream dos = new DataOutputStream ( bos ) ; 
 + try 
 + { 
 + StreamRequestMessage . serializer ( ) . serialize ( streamRequestMessage , dos ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new IOError ( e ) ; 
 + } 
 + return new Message ( FBUtilities . getLocalAddress ( ) , StageManager . streamStage _ , StorageService . streamRequestVerbHandler _ , bos . toByteArray ( ) ) ; 
 + } 
 + 
 + protected StreamRequestMetadata [ ] streamRequestMetadata _ = new StreamRequestMetadata [ 0 ] ; 
 + 
 + / / TODO only actually ever need one BM , not an array 
 + StreamRequestMessage ( StreamRequestMetadata . . . streamRequestMetadata ) 
 + { 
 + assert streamRequestMetadata ! = null ; 
 + streamRequestMetadata _ = streamRequestMetadata ; 
 + } 
 + } 
 + 
 + class StreamRequestMessageSerializer implements ICompactSerializer < StreamRequestMessage > 
 + { 
 + public void serialize ( StreamRequestMessage streamRequestMessage , DataOutputStream dos ) throws IOException 
 + { 
 + StreamRequestMetadata [ ] streamRequestMetadata = streamRequestMessage . streamRequestMetadata _ ; 
 + dos . writeInt ( streamRequestMetadata . length ) ; 
 + for ( StreamRequestMetadata bsmd : streamRequestMetadata ) 
 + { 
 + StreamRequestMetadata . serializer ( ) . serialize ( bsmd , dos ) ; 
 + } 
 + } 
 + 
 + public StreamRequestMessage deserialize ( DataInputStream dis ) throws IOException 
 + { 
 + int size = dis . readInt ( ) ; 
 + StreamRequestMetadata [ ] streamRequestMetadata = new StreamRequestMetadata [ size ] ; 
 + for ( int i = 0 ; i < size ; + + i ) 
 + { 
 + streamRequestMetadata [ i ] = StreamRequestMetadata . serializer ( ) . deserialize ( dis ) ; 
 + } 
 + return new StreamRequestMessage ( streamRequestMetadata ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / io / StreamRequestMetadata . java b / src / java / org / apache / cassandra / io / StreamRequestMetadata . java 
 new file mode 100644 
 index 0000000 . . eff563f 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / io / StreamRequestMetadata . java 
 @ @ - 0 , 0 + 1 , 98 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . io ; 
 + 
 + import java . io . DataInputStream ; 
 + import java . io . DataOutputStream ; 
 + import java . io . IOException ; 
 + import java . net . InetAddress ; 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + import java . util . Collection ; 
 + 
 + import org . apache . cassandra . net . CompactEndPointSerializationHelper ; 
 + import org . apache . cassandra . dht . Range ; 
 + 
 + / * * 
 + * This encapsulates information of the list of ranges that a target 
 + * node requires to be transferred . This will be bundled in a 
 + * StreamRequestsMessage and sent to nodes that are going to handoff 
 + * the data . 
 + * / 
 + class StreamRequestMetadata 
 + { 
 + private static ICompactSerializer < StreamRequestMetadata > serializer _ ; 
 + static 
 + { 
 + serializer _ = new StreamRequestMetadataSerializer ( ) ; 
 + } 
 + 
 + protected static ICompactSerializer < StreamRequestMetadata > serializer ( ) 
 + { 
 + return serializer _ ; 
 + } 
 + 
 + protected InetAddress target _ ; 
 + protected Collection < Range > ranges _ ; 
 + 
 + StreamRequestMetadata ( InetAddress target , Collection < Range > ranges ) 
 + { 
 + target _ = target ; 
 + ranges _ = ranges ; 
 + } 
 + 
 + public String toString ( ) 
 + { 
 + StringBuilder sb = new StringBuilder ( " " ) ; 
 + sb . append ( target _ ) ; 
 + sb . append ( " - - - - - - - > " ) ; 
 + for ( Range range : ranges _ ) 
 + { 
 + sb . append ( range ) ; 
 + sb . append ( " " ) ; 
 + } 
 + return sb . toString ( ) ; 
 + } 
 + } 
 + 
 + class StreamRequestMetadataSerializer implements ICompactSerializer < StreamRequestMetadata > 
 + { 
 + public void serialize ( StreamRequestMetadata srMetadata , DataOutputStream dos ) throws IOException 
 + { 
 + CompactEndPointSerializationHelper . serialize ( srMetadata . target _ , dos ) ; 
 + dos . writeInt ( srMetadata . ranges _ . size ( ) ) ; 
 + for ( Range range : srMetadata . ranges _ ) 
 + { 
 + Range . serializer ( ) . serialize ( range , dos ) ; 
 + } 
 + } 
 + 
 + public StreamRequestMetadata deserialize ( DataInputStream dis ) throws IOException 
 + { 
 + InetAddress target = CompactEndPointSerializationHelper . deserialize ( dis ) ; 
 + int size = dis . readInt ( ) ; 
 + List < Range > ranges = ( size = = 0 ) ? null : new ArrayList < Range > ( ) ; 
 + for ( int i = 0 ; i < size ; + + i ) 
 + { 
 + ranges . add ( Range . serializer ( ) . deserialize ( dis ) ) ; 
 + } 
 + return new StreamRequestMetadata ( target , ranges ) ; 
 + } 
 + } 
 + 
 diff - - git a / src / java / org / apache / cassandra / io / StreamRequestVerbHandler . java b / src / java / org / apache / cassandra / io / StreamRequestVerbHandler . java 
 new file mode 100644 
 index 0000000 . . 5a4a954 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / io / StreamRequestVerbHandler . java 
 @ @ - 0 , 0 + 1 , 76 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . io ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + import java . io . IOError ; 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + import java . util . Collection ; 
 + 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . db . Table ; 
 + 
 + import java . net . InetAddress ; 
 + import org . apache . cassandra . net . IVerbHandler ; 
 + import org . apache . cassandra . net . Message ; 
 + import org . apache . cassandra . net . MessagingService ; 
 + import org . apache . cassandra . net . io . StreamContextManager ; 
 + import org . apache . cassandra . service . StorageService ; 
 + import org . apache . cassandra . service . StreamManager ; 
 + 
 + import org . apache . log4j . Logger ; 
 + import org . apache . commons . lang . StringUtils ; 
 + 
 + / * * 
 + * This verb handler handles the StreamRequestMessage that is sent by 
 + * the node requesting range transfer . 
 + * / 
 + public class StreamRequestVerbHandler implements IVerbHandler 
 + { 
 + private static Logger logger _ = Logger . getLogger ( StreamRequestVerbHandler . class ) ; 
 + 
 + public void doVerb ( Message message ) 
 + { 
 + if ( logger _ . isDebugEnabled ( ) ) 
 + logger _ . debug ( " Received a StreamRequestMessage from " + message . getFrom ( ) ) ; 
 + 
 + byte [ ] body = message . getMessageBody ( ) ; 
 + DataInputBuffer bufIn = new DataInputBuffer ( ) ; 
 + bufIn . reset ( body , body . length ) ; 
 + try 
 + { 
 + StreamRequestMessage streamRequestMessage = StreamRequestMessage . serializer ( ) . deserialize ( bufIn ) ; 
 + StreamRequestMetadata [ ] streamRequestMetadata = streamRequestMessage . streamRequestMetadata _ ; 
 + 
 + for ( StreamRequestMetadata srm : streamRequestMetadata ) 
 + { 
 + if ( logger _ . isDebugEnabled ( ) ) 
 + logger _ . debug ( srm . toString ( ) ) ; 
 + Streaming . transferRanges ( srm . target _ , srm . ranges _ , null ) ; 
 + } 
 + } 
 + catch ( IOException ex ) 
 + { 
 + throw new IOError ( ex ) ; 
 + } 
 + } 
 + } 
 + 
 diff - - git a / src / java / org / apache / cassandra / io / Streaming . java b / src / java / org / apache / cassandra / io / Streaming . java 
 index 7d2e1d5 . . 4033f94 100644 
 - - - a / src / java / org / apache / cassandra / io / Streaming . java 
 + + + b / src / java / org / apache / cassandra / io / Streaming . java 
 @ @ - 126 , 6 + 126 , 16 @ @ public class Streaming 
 } 
 } 
 
 + / * * 
 + * Request ranges to be transferred 
 + * / 
 + public static void requestRanges ( InetAddress source , Collection < Range > ranges ) 
 + { 
 + StreamRequestMetadata streamRequestMetadata = new StreamRequestMetadata ( FBUtilities . getLocalAddress ( ) , ranges ) ; 
 + Message message = StreamRequestMessage . makeStreamRequestMessage ( new StreamRequestMessage ( streamRequestMetadata ) ) ; 
 + MessagingService . instance ( ) . sendOneWay ( message , source ) ; 
 + } 
 + 
 public static class StreamInitiateVerbHandler implements IVerbHandler 
 { 
 / * 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index ce2a93d . . 759a404 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 41 , 7 + 41 , 6 @ @ import org . apache . cassandra . utils . Pair ; 
 import org . apache . cassandra . locator . TokenMetadata ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . dht . Range ; 
 - import org . apache . cassandra . dht . Token ; 
 import org . apache . cassandra . gms . FailureDetector ; 
 import org . apache . cassandra . concurrent . StageManager ; 
 
 @ @ - 83 , 14 + 82 , 6 @ @ public class StorageProxy implements StorageProxyMBean 
 } 
 } ; 
 
 - private static Comparator < Row > rowComparator = new Comparator < Row > ( ) 
 - { 
 - public int compare ( Row r1 , Row r2 ) 
 - { 
 - return keyComparator . compare ( r1 . key , r2 . key ) ; 
 - } 
 - } ; 
 - 
 / * * 
 * Use this method to have this RowMutation applied 
 * across all replicas . This method will take care 
 @ @ - 308 , 7 + 299 , 6 @ @ public class StorageProxy implements StorageProxyMBean 
 
 List < Row > rows = new ArrayList < Row > ( ) ; 
 List < IAsyncResult > iars = new ArrayList < IAsyncResult > ( ) ; 
 - int commandIndex = 0 ; 
 
 for ( ReadCommand command : commands ) 
 { 
 @ @ - 337 , 7 + 327 , 6 @ @ public class StorageProxy implements StorageProxyMBean 
 ReadResponse response = ReadResponse . serializer ( ) . deserialize ( bufIn ) ; 
 if ( response . row ( ) ! = null ) 
 rows . add ( response . row ( ) ) ; 
 - commandIndex + + ; 
 } 
 return rows ; 
 } 
 @ @ - 412 , 7 + 401 , 6 @ @ public class StorageProxy implements StorageProxyMBean 
 
 for ( ReadCommand command : commands ) 
 { 
 - / / TODO : throw a thrift exception if we do not have N nodes 
 assert ! command . isDigestQuery ( ) ; 
 ReadCommand readMessageDigestOnly = command . copy ( ) ; 
 readMessageDigestOnly . setDigestQuery ( true ) ; 
 @ @ - 707 , 7 + 695 , 6 @ @ public class StorageProxy implements StorageProxyMBean 
 List < InetAddress > endpoints = StorageService . instance ( ) . getLiveNaturalEndpoints ( command . key ) ; 
 / * Remove the local storage endpoint from the list . * / 
 endpoints . remove ( FBUtilities . getLocalAddress ( ) ) ; 
 - / / TODO : throw a thrift exception if we do not have N nodes 
 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( " weakreadlocal reading " + command ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 634aaef . . cab71f2 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 42 , 6 + 42 , 7 @ @ import org . apache . cassandra . utils . LogUtil ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . io . SSTableReader ; 
 import org . apache . cassandra . io . Streaming ; 
 + import org . apache . cassandra . io . StreamRequestVerbHandler ; 
 
 import org . apache . log4j . Logger ; 
 import org . apache . log4j . Level ; 
 @ @ - 76 , 7 + 77 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 public final static String streamInitiateDoneVerbHandler _ = " BOOTSTRAP - INITIATE - DONE - VERB - HANDLER " ; 
 public final static String streamFinishedVerbHandler _ = " BOOTSTRAP - TERMINATE - VERB - HANDLER " ; 
 public final static String dataFileVerbHandler _ = " DATA - FILE - VERB - HANDLER " ; 
 - public final static String bootstrapMetadataVerbHandler _ = " BS - METADATA - VERB - HANDLER " ; 
 + public final static String streamRequestVerbHandler _ = " BS - METADATA - VERB - HANDLER " ; 
 public final static String rangeVerbHandler _ = " RANGE - VERB - HANDLER " ; 
 public final static String rangeSliceVerbHandler _ = " RANGE - SLICE - VERB - HANDLER " ; 
 public final static String bootstrapTokenVerbHandler _ = " SPLITS - VERB - HANDLER " ; 
 @ @ - 216 , 7 + 217 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 MessagingService . instance ( ) . registerVerbHandlers ( rangeSliceVerbHandler _ , new RangeSliceVerbHandler ( ) ) ; 
 / / see BootStrapper for a summary of how the bootstrap verbs interact 
 MessagingService . instance ( ) . registerVerbHandlers ( bootstrapTokenVerbHandler _ , new BootStrapper . BootstrapTokenVerbHandler ( ) ) ; 
 - MessagingService . instance ( ) . registerVerbHandlers ( bootstrapMetadataVerbHandler _ , new BootstrapMetadataVerbHandler ( ) ) ; 
 + MessagingService . instance ( ) . registerVerbHandlers ( streamRequestVerbHandler _ , new StreamRequestVerbHandler ( ) ) ; 
 MessagingService . instance ( ) . registerVerbHandlers ( streamInitiateVerbHandler _ , new Streaming . StreamInitiateVerbHandler ( ) ) ; 
 MessagingService . instance ( ) . registerVerbHandlers ( streamInitiateDoneVerbHandler _ , new Streaming . StreamInitiateDoneVerbHandler ( ) ) ; 
 MessagingService . instance ( ) . registerVerbHandlers ( streamFinishedVerbHandler _ , new Streaming . StreamFinishedVerbHandler ( ) ) ;
