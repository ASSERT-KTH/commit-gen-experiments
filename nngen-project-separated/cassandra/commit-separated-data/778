BLEU SCORE: 1.0

TEST MSG: Improve digest calculation in the presence of overlapping tombstones .
GENERATED MSG: Improve digest calculation in the presence of overlapping tombstones .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 0967ce4 . . b1dcbe1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> 2 . 1 . 16 <nl> * Fix filtering on clustering columns when 2i is used ( CASSANDRA - 11907 ) <nl> * Reduce contention getting instances of CompositeType ( CASSANDRA - 10433 ) <nl> + * Improve digest calculation in the presence of overlapping tombstones ( CASSANDRA - 11349 ) <nl> <nl> 2 . 1 . 15 <nl> * Account for partition deletions in tombstone histogram ( CASSANDRA - 12112 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnIndex . java b / src / java / org / apache / cassandra / db / ColumnIndex . java <nl> index f63dfe1 . . 8f147cc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnIndex . java <nl> @ @ - 68 , 12 + 68 , 20 @ @ public class ColumnIndex <nl> private final ByteBuffer key ; <nl> private final DeletionInfo deletionInfo ; / / only used for serializing and calculating row header size <nl> <nl> - private final OnDiskAtom . Serializer atomSerializer ; <nl> + private final OnDiskAtom . SerializerForWriting atomSerializer ; <nl> <nl> public Builder ( ColumnFamily cf , <nl> ByteBuffer key , <nl> DataOutputPlus output ) <nl> { <nl> + this ( cf , key , output , cf . getComparator ( ) . onDiskAtomSerializer ( ) ) ; <nl> + } <nl> + <nl> + public Builder ( ColumnFamily cf , <nl> + ByteBuffer key , <nl> + DataOutputPlus output , <nl> + OnDiskAtom . SerializerForWriting serializer ) <nl> + { <nl> assert cf ! = null ; <nl> assert key ! = null ; <nl> assert output ! = null ; <nl> @ @ - 84 , 7 + 92 , 7 @ @ public class ColumnIndex <nl> this . result = new ColumnIndex ( new ArrayList < IndexHelper . IndexInfo > ( ) ) ; <nl> this . output = output ; <nl> this . tombstoneTracker = new RangeTombstone . Tracker ( cf . getComparator ( ) ) ; <nl> - this . atomSerializer = cf . getComparator ( ) . onDiskAtomSerializer ( ) ; <nl> + this . atomSerializer = serializer ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / db / OnDiskAtom . java b / src / java / org / apache / cassandra / db / OnDiskAtom . java <nl> index b53e43b . . 3e768ea 100644 <nl> - - - a / src / java / org / apache / cassandra / db / OnDiskAtom . java <nl> + + + b / src / java / org / apache / cassandra / db / OnDiskAtom . java <nl> @ @ - 43 , 7 + 43 , 13 @ @ public interface OnDiskAtom <nl> public void validateFields ( CFMetaData metadata ) throws MarshalException ; <nl> public void updateDigest ( MessageDigest digest ) ; <nl> <nl> - public static class Serializer implements ISSTableSerializer < OnDiskAtom > <nl> + public interface SerializerForWriting <nl> + { <nl> + public void serializeForSSTable ( OnDiskAtom atom , DataOutputPlus out ) throws IOException ; <nl> + public long serializedSizeForSSTable ( OnDiskAtom atom ) ; <nl> + } <nl> + <nl> + public static class Serializer implements ISSTableSerializer < OnDiskAtom > , SerializerForWriting <nl> { <nl> private final CellNameType type ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / RangeTombstone . java b / src / java / org / apache / cassandra / db / RangeTombstone . java <nl> index 5e41792 . . 9dc2723 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RangeTombstone . java <nl> + + + b / src / java / org / apache / cassandra / db / RangeTombstone . java <nl> @ @ - 152 , 7 + 152 , 7 @ @ public class RangeTombstone extends Interval < Composite , DeletionTime > implements <nl> * @ return the total serialized size of said tombstones and write them to <nl> * { @ code out } it if isn ' t null . <nl> * / <nl> - public long writeOpenedMarkers ( Composite startPos , DataOutputPlus out , OnDiskAtom . Serializer atomSerializer ) throws IOException <nl> + public long writeOpenedMarkers ( Composite startPos , DataOutputPlus out , OnDiskAtom . SerializerForWriting atomSerializer ) throws IOException <nl> { <nl> long size = 0 ; <nl> <nl> @ @ - 172 , 7 + 172 , 7 @ @ public class RangeTombstone extends Interval < Composite , DeletionTime > implements <nl> * <nl> * @ return the serialized size of written tombstones <nl> * / <nl> - public long writeUnwrittenTombstones ( DataOutputPlus out , OnDiskAtom . Serializer atomSerializer ) throws IOException <nl> + public long writeUnwrittenTombstones ( DataOutputPlus out , OnDiskAtom . SerializerForWriting atomSerializer ) throws IOException <nl> { <nl> long size = 0 ; <nl> for ( RangeTombstone rt : unwrittenTombstones ) <nl> @ @ - 183 , 7 + 183 , 7 @ @ public class RangeTombstone extends Interval < Composite , DeletionTime > implements <nl> return size ; <nl> } <nl> <nl> - private long writeTombstone ( RangeTombstone rt , DataOutputPlus out , OnDiskAtom . Serializer atomSerializer ) <nl> + private long writeTombstone ( RangeTombstone rt , DataOutputPlus out , OnDiskAtom . SerializerForWriting atomSerializer ) <nl> throws IOException <nl> { <nl> long size = atomSerializer . serializedSizeForSSTable ( rt ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java b / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java <nl> index e9aecb2 . . f912da2 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java <nl> @ @ - 148 , 16 + 148 , 30 @ @ public class LazilyCompactedRow extends AbstractCompactedRow <nl> return RowIndexEntry . create ( currentPosition , emptyColumnFamily . deletionInfo ( ) . getTopLevelDeletion ( ) , columnsIndex ) ; <nl> } <nl> <nl> - public void update ( MessageDigest digest ) <nl> + public void update ( final MessageDigest digest ) <nl> { <nl> assert ! closed ; <nl> <nl> / / no special - case for rows . size = = 1 , we ' re actually skipping some bytes here so just <nl> / / blindly updating everything wouldn ' t be correct <nl> DataOutputBuffer out = new DataOutputBuffer ( ) ; <nl> + OnDiskAtom . SerializerForWriting serializer = new OnDiskAtom . SerializerForWriting ( ) <nl> + { <nl> + @ Override <nl> + public void serializeForSSTable ( OnDiskAtom atom , DataOutputPlus out ) throws IOException <nl> + { <nl> + atom . updateDigest ( digest ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public long serializedSizeForSSTable ( OnDiskAtom atom ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + } ; <nl> <nl> / / initialize indexBuilder for the benefit of its tombstoneTracker , used by our reducing iterator <nl> - indexBuilder = new ColumnIndex . Builder ( emptyColumnFamily , key . getKey ( ) , out ) ; <nl> + indexBuilder = new ColumnIndex . Builder ( emptyColumnFamily , key . getKey ( ) , out , serializer ) ; <nl> <nl> try <nl> { <nl> @ @ - 171 , 14 + 185 , 13 @ @ public class LazilyCompactedRow extends AbstractCompactedRow <nl> { <nl> digest . update ( out . getData ( ) , 0 , out . getLength ( ) ) ; <nl> } <nl> + indexBuilder . buildForCompaction ( merger ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> throw new AssertionError ( e ) ; <nl> } <nl> <nl> - while ( merger . hasNext ( ) ) <nl> - merger . next ( ) . updateDigest ( digest ) ; <nl> close ( ) ; <nl> } <nl>
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0967ce4 . . b1dcbe1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 2 . 1 . 16 
 * Fix filtering on clustering columns when 2i is used ( CASSANDRA - 11907 ) 
 * Reduce contention getting instances of CompositeType ( CASSANDRA - 10433 ) 
 + * Improve digest calculation in the presence of overlapping tombstones ( CASSANDRA - 11349 ) 
 
 2 . 1 . 15 
 * Account for partition deletions in tombstone histogram ( CASSANDRA - 12112 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnIndex . java b / src / java / org / apache / cassandra / db / ColumnIndex . java 
 index f63dfe1 . . 8f147cc 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnIndex . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnIndex . java 
 @ @ - 68 , 12 + 68 , 20 @ @ public class ColumnIndex 
 private final ByteBuffer key ; 
 private final DeletionInfo deletionInfo ; / / only used for serializing and calculating row header size 
 
 - private final OnDiskAtom . Serializer atomSerializer ; 
 + private final OnDiskAtom . SerializerForWriting atomSerializer ; 
 
 public Builder ( ColumnFamily cf , 
 ByteBuffer key , 
 DataOutputPlus output ) 
 { 
 + this ( cf , key , output , cf . getComparator ( ) . onDiskAtomSerializer ( ) ) ; 
 + } 
 + 
 + public Builder ( ColumnFamily cf , 
 + ByteBuffer key , 
 + DataOutputPlus output , 
 + OnDiskAtom . SerializerForWriting serializer ) 
 + { 
 assert cf ! = null ; 
 assert key ! = null ; 
 assert output ! = null ; 
 @ @ - 84 , 7 + 92 , 7 @ @ public class ColumnIndex 
 this . result = new ColumnIndex ( new ArrayList < IndexHelper . IndexInfo > ( ) ) ; 
 this . output = output ; 
 this . tombstoneTracker = new RangeTombstone . Tracker ( cf . getComparator ( ) ) ; 
 - this . atomSerializer = cf . getComparator ( ) . onDiskAtomSerializer ( ) ; 
 + this . atomSerializer = serializer ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / db / OnDiskAtom . java b / src / java / org / apache / cassandra / db / OnDiskAtom . java 
 index b53e43b . . 3e768ea 100644 
 - - - a / src / java / org / apache / cassandra / db / OnDiskAtom . java 
 + + + b / src / java / org / apache / cassandra / db / OnDiskAtom . java 
 @ @ - 43 , 7 + 43 , 13 @ @ public interface OnDiskAtom 
 public void validateFields ( CFMetaData metadata ) throws MarshalException ; 
 public void updateDigest ( MessageDigest digest ) ; 
 
 - public static class Serializer implements ISSTableSerializer < OnDiskAtom > 
 + public interface SerializerForWriting 
 + { 
 + public void serializeForSSTable ( OnDiskAtom atom , DataOutputPlus out ) throws IOException ; 
 + public long serializedSizeForSSTable ( OnDiskAtom atom ) ; 
 + } 
 + 
 + public static class Serializer implements ISSTableSerializer < OnDiskAtom > , SerializerForWriting 
 { 
 private final CellNameType type ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / RangeTombstone . java b / src / java / org / apache / cassandra / db / RangeTombstone . java 
 index 5e41792 . . 9dc2723 100644 
 - - - a / src / java / org / apache / cassandra / db / RangeTombstone . java 
 + + + b / src / java / org / apache / cassandra / db / RangeTombstone . java 
 @ @ - 152 , 7 + 152 , 7 @ @ public class RangeTombstone extends Interval < Composite , DeletionTime > implements 
 * @ return the total serialized size of said tombstones and write them to 
 * { @ code out } it if isn ' t null . 
 * / 
 - public long writeOpenedMarkers ( Composite startPos , DataOutputPlus out , OnDiskAtom . Serializer atomSerializer ) throws IOException 
 + public long writeOpenedMarkers ( Composite startPos , DataOutputPlus out , OnDiskAtom . SerializerForWriting atomSerializer ) throws IOException 
 { 
 long size = 0 ; 
 
 @ @ - 172 , 7 + 172 , 7 @ @ public class RangeTombstone extends Interval < Composite , DeletionTime > implements 
 * 
 * @ return the serialized size of written tombstones 
 * / 
 - public long writeUnwrittenTombstones ( DataOutputPlus out , OnDiskAtom . Serializer atomSerializer ) throws IOException 
 + public long writeUnwrittenTombstones ( DataOutputPlus out , OnDiskAtom . SerializerForWriting atomSerializer ) throws IOException 
 { 
 long size = 0 ; 
 for ( RangeTombstone rt : unwrittenTombstones ) 
 @ @ - 183 , 7 + 183 , 7 @ @ public class RangeTombstone extends Interval < Composite , DeletionTime > implements 
 return size ; 
 } 
 
 - private long writeTombstone ( RangeTombstone rt , DataOutputPlus out , OnDiskAtom . Serializer atomSerializer ) 
 + private long writeTombstone ( RangeTombstone rt , DataOutputPlus out , OnDiskAtom . SerializerForWriting atomSerializer ) 
 throws IOException 
 { 
 long size = atomSerializer . serializedSizeForSSTable ( rt ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java b / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java 
 index e9aecb2 . . f912da2 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java 
 @ @ - 148 , 16 + 148 , 30 @ @ public class LazilyCompactedRow extends AbstractCompactedRow 
 return RowIndexEntry . create ( currentPosition , emptyColumnFamily . deletionInfo ( ) . getTopLevelDeletion ( ) , columnsIndex ) ; 
 } 
 
 - public void update ( MessageDigest digest ) 
 + public void update ( final MessageDigest digest ) 
 { 
 assert ! closed ; 
 
 / / no special - case for rows . size = = 1 , we ' re actually skipping some bytes here so just 
 / / blindly updating everything wouldn ' t be correct 
 DataOutputBuffer out = new DataOutputBuffer ( ) ; 
 + OnDiskAtom . SerializerForWriting serializer = new OnDiskAtom . SerializerForWriting ( ) 
 + { 
 + @ Override 
 + public void serializeForSSTable ( OnDiskAtom atom , DataOutputPlus out ) throws IOException 
 + { 
 + atom . updateDigest ( digest ) ; 
 + } 
 + 
 + @ Override 
 + public long serializedSizeForSSTable ( OnDiskAtom atom ) 
 + { 
 + return 0 ; 
 + } 
 + } ; 
 
 / / initialize indexBuilder for the benefit of its tombstoneTracker , used by our reducing iterator 
 - indexBuilder = new ColumnIndex . Builder ( emptyColumnFamily , key . getKey ( ) , out ) ; 
 + indexBuilder = new ColumnIndex . Builder ( emptyColumnFamily , key . getKey ( ) , out , serializer ) ; 
 
 try 
 { 
 @ @ - 171 , 14 + 185 , 13 @ @ public class LazilyCompactedRow extends AbstractCompactedRow 
 { 
 digest . update ( out . getData ( ) , 0 , out . getLength ( ) ) ; 
 } 
 + indexBuilder . buildForCompaction ( merger ) ; 
 } 
 catch ( IOException e ) 
 { 
 throw new AssertionError ( e ) ; 
 } 
 
 - while ( merger . hasNext ( ) ) 
 - merger . next ( ) . updateDigest ( digest ) ; 
 close ( ) ; 
 } 


NEAREST DIFF:
ELIMINATEDSENTENCE
