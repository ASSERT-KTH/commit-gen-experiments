BLEU SCORE: 0.009690650671856618

TEST MSG: Fix cqlsh DESC TYPES errors
GENERATED MSG: cqlsh : fix DESCRIBE command patch by Aleksey Yeschenko ; reviewed by brandonwilliams for CASSANDRA - 4913

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index cc8ef21 . . d951b07 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 9 <nl> + * cqlsh : fix DESC TYPES errors ( CASSANDRA - 12914 ) <nl> * Fix leak on skipped SSTables in sstableupgrade ( CASSANDRA - 12899 ) <nl> * Avoid blocking gossip during pending range calculation ( CASSANDRA - 12281 ) <nl> * Fix purgeability of tombstones with max timestamp ( CASSANDRA - 12792 ) <nl> diff - - git a / bin / cqlsh . py b / bin / cqlsh . py <nl> index 514fada . . a9c5ff1 100644 <nl> - - - a / bin / cqlsh . py <nl> + + + b / bin / cqlsh . py <nl> @ @ - 1497 , 12 + 1497 , 10 @ @ class Shell ( cmd . Cmd ) : <nl> name = protect _ name ( ksmeta . name ) <nl> print ' Keyspace % s ' % ( name , ) <nl> print ' - - - - - - - - - % s ' % ( ' - ' * len ( name ) ) <nl> - cmd . Cmd . columnize ( self , protect _ names ( ksmeta . functions . keys ( ) ) ) <nl> - print <nl> + self . _ columnize _ unicode ( ksmeta . functions . keys ( ) ) <nl> else : <nl> ksmeta = self . get _ keyspace _ meta ( ksname ) <nl> - cmd . Cmd . columnize ( self , protect _ names ( ksmeta . functions . keys ( ) ) ) <nl> - print <nl> + self . _ columnize _ unicode ( ksmeta . functions . keys ( ) ) <nl> <nl> def describe _ function ( self , ksname , functionname ) : <nl> if ksname is None : <nl> @ @ - 1524 , 12 + 1522 , 10 @ @ class Shell ( cmd . Cmd ) : <nl> name = protect _ name ( ksmeta . name ) <nl> print ' Keyspace % s ' % ( name , ) <nl> print ' - - - - - - - - - % s ' % ( ' - ' * len ( name ) ) <nl> - cmd . Cmd . columnize ( self , protect _ names ( ksmeta . aggregates . keys ( ) ) ) <nl> - print <nl> + self . _ columnize _ unicode ( ksmeta . aggregates . keys ( ) ) <nl> else : <nl> ksmeta = self . get _ keyspace _ meta ( ksname ) <nl> - cmd . Cmd . columnize ( self , protect _ names ( ksmeta . aggregates . keys ( ) ) ) <nl> - print <nl> + self . _ columnize _ unicode ( ksmeta . aggregates . keys ( ) ) <nl> <nl> def describe _ aggregate ( self , ksname , aggregatename ) : <nl> if ksname is None : <nl> @ @ - 1551 , 12 + 1547 , 10 @ @ class Shell ( cmd . Cmd ) : <nl> name = protect _ name ( ksmeta . name ) <nl> print ' Keyspace % s ' % ( name , ) <nl> print ' - - - - - - - - - % s ' % ( ' - ' * len ( name ) ) <nl> - cmd . Cmd . columnize ( self , protect _ names ( ksmeta . user _ types . keys ( ) ) ) <nl> - print <nl> + self . _ columnize _ unicode ( ksmeta . user _ types . keys ( ) , quote = True ) <nl> else : <nl> ksmeta = self . get _ keyspace _ meta ( ksname ) <nl> - cmd . Cmd . columnize ( self , protect _ names ( ksmeta . user _ types . keys ( ) ) ) <nl> - print <nl> + self . _ columnize _ unicode ( ksmeta . user _ types . keys ( ) , quote = True ) <nl> <nl> def describe _ usertype ( self , ksname , typename ) : <nl> if ksname is None : <nl> @ @ - 1572 , 6 + 1566 , 16 @ @ class Shell ( cmd . Cmd ) : <nl> print usertype . as _ cql _ query ( formatted = True ) <nl> print <nl> <nl> + def _ columnize _ unicode ( self , name _ list , quote = False ) : <nl> + " " " <nl> + Used when columnizing identifiers that may contain unicode <nl> + " " " <nl> + names = [ n . encode ( ' utf - 8 ' ) for n in name _ list ] <nl> + if quote : <nl> + names = protect _ names ( names ) <nl> + cmd . Cmd . columnize ( self , names ) <nl> + print <nl> + <nl> def describe _ cluster ( self ) : <nl> print ' \ nCluster : % s ' % self . get _ cluster _ name ( ) <nl> p = trim _ if _ present ( self . get _ partitioner ( ) , ' org . apache . cassandra . dht . ' )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 0ac5b66 . . 7d4882d 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 2 - rc1 <nl> + * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) <nl> * save truncation position in system table ( CASSANDRA - 4906 ) <nl> * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) <nl> * allow CLI to GET cql3 columnfamily data ( CASSANDRA - 4924 ) <nl> diff - - git a / bin / cqlsh b / bin / cqlsh <nl> index 27eef7b . . 53eef8a 100755 <nl> - - - a / bin / cqlsh <nl> + + + b / bin / cqlsh <nl> @ @ - 627 , 10 + 627 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> raise ColumnFamilyNotFound ( " Unconfigured column family % r " % ( cfname , ) ) <nl> <nl> def get _ columnfamily _ names ( self , ksname = None ) : <nl> - if self . cqlver _ atleast ( 3 ) and ksname not in SYSTEM _ KEYSPACES : <nl> - # since cql3 tables may be left out of thrift results , but <nl> - # info on tables in system keyspaces still aren ' t included <nl> - # in system . schema _ * <nl> + if self . cqlver _ atleast ( 3 ) : <nl> return self . get _ columnfamily _ names _ cql3 ( ksname = ksname ) <nl> return [ c . name for c in self . get _ columnfamilies ( ksname ) ] <nl> <nl> @ @ - 730 , 7 + 727 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> cf _ q = " " " select " columnfamily " from system . schema _ columnfamilies <nl> where " keyspace " = : ks " " " <nl> self . cursor . execute ( cf _ q , { ' ks ' : ksname } ) <nl> - return [ row [ 0 ] for row in self . cursor . fetchall ( ) ] <nl> + return [ str ( row [ 0 ] ) for row in self . cursor . fetchall ( ) ] <nl> <nl> def get _ columnfamily _ layout ( self , ksname , cfname ) : <nl> if ksname is None : <nl> @ @ - 1156 , 12 + 1153 , 13 @ @ class Shell ( cmd . Cmd ) : <nl> out . write ( " \ n AND strategy _ options : % s = % s " % ( opname , self . cql _ protect _ value ( opval ) ) ) <nl> out . write ( ' ; \ n ' ) <nl> <nl> - if ksdef . cf _ defs : <nl> + cfs = self . get _ columnfamily _ names ( ksname ) <nl> + if cfs : <nl> out . write ( ' \ nUSE % s ; \ n ' % ksname ) <nl> - for cf in ksdef . cf _ defs : <nl> + for cf in cfs : <nl> out . write ( ' \ n ' ) <nl> # yes , cf might be looked up again . oh well . <nl> - self . print _ recreate _ columnfamily ( ksdef . name , cf . name , out ) <nl> + self . print _ recreate _ columnfamily ( ksdef . name , cf , out ) <nl> <nl> def print _ recreate _ columnfamily ( self , ksname , cfname , out ) : <nl> " " " <nl> @ @ - 1327 , 20 + 1325 , 19 @ @ class Shell ( cmd . Cmd ) : <nl> print <nl> <nl> def describe _ columnfamilies ( self , ksname ) : <nl> + print <nl> if ksname is None : <nl> for k in self . get _ keyspaces ( ) : <nl> print ' Keyspace % s ' % ( k . name , ) <nl> - print ' - - - - - - - - - % s \ n ' % ( ' - ' * len ( k . name ) ) <nl> - cmd . Cmd . columnize ( self , [ c . name for c in k . cf _ defs ] ) <nl> + print ' - - - - - - - - - % s ' % ( ' - ' * len ( k . name ) ) <nl> + cmd . Cmd . columnize ( self , self . get _ columnfamily _ names ( k . name ) ) <nl> print <nl> else : <nl> - names = self . get _ columnfamily _ names ( ksname ) <nl> - print <nl> - cmd . Cmd . columnize ( self , names ) <nl> + cmd . Cmd . columnize ( self , self . get _ columnfamily _ names ( ksname ) ) <nl> print <nl> <nl> def describe _ cluster ( self ) : <nl> - print ' Cluster : % s ' % self . get _ cluster _ name ( ) <nl> + print ' \ nCluster : % s ' % self . get _ cluster _ name ( ) <nl> p = trim _ if _ present ( self . get _ partitioner ( ) , ' org . apache . cassandra . dht . ' ) <nl> print ' Partitioner : % s ' % p <nl> snitch = trim _ if _ present ( self . get _ snitch ( ) , ' org . apache . cassandra . locator . ' )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index cc8ef21 . . d951b07 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 9 
 + * cqlsh : fix DESC TYPES errors ( CASSANDRA - 12914 ) 
 * Fix leak on skipped SSTables in sstableupgrade ( CASSANDRA - 12899 ) 
 * Avoid blocking gossip during pending range calculation ( CASSANDRA - 12281 ) 
 * Fix purgeability of tombstones with max timestamp ( CASSANDRA - 12792 ) 
 diff - - git a / bin / cqlsh . py b / bin / cqlsh . py 
 index 514fada . . a9c5ff1 100644 
 - - - a / bin / cqlsh . py 
 + + + b / bin / cqlsh . py 
 @ @ - 1497 , 12 + 1497 , 10 @ @ class Shell ( cmd . Cmd ) : 
 name = protect _ name ( ksmeta . name ) 
 print ' Keyspace % s ' % ( name , ) 
 print ' - - - - - - - - - % s ' % ( ' - ' * len ( name ) ) 
 - cmd . Cmd . columnize ( self , protect _ names ( ksmeta . functions . keys ( ) ) ) 
 - print 
 + self . _ columnize _ unicode ( ksmeta . functions . keys ( ) ) 
 else : 
 ksmeta = self . get _ keyspace _ meta ( ksname ) 
 - cmd . Cmd . columnize ( self , protect _ names ( ksmeta . functions . keys ( ) ) ) 
 - print 
 + self . _ columnize _ unicode ( ksmeta . functions . keys ( ) ) 
 
 def describe _ function ( self , ksname , functionname ) : 
 if ksname is None : 
 @ @ - 1524 , 12 + 1522 , 10 @ @ class Shell ( cmd . Cmd ) : 
 name = protect _ name ( ksmeta . name ) 
 print ' Keyspace % s ' % ( name , ) 
 print ' - - - - - - - - - % s ' % ( ' - ' * len ( name ) ) 
 - cmd . Cmd . columnize ( self , protect _ names ( ksmeta . aggregates . keys ( ) ) ) 
 - print 
 + self . _ columnize _ unicode ( ksmeta . aggregates . keys ( ) ) 
 else : 
 ksmeta = self . get _ keyspace _ meta ( ksname ) 
 - cmd . Cmd . columnize ( self , protect _ names ( ksmeta . aggregates . keys ( ) ) ) 
 - print 
 + self . _ columnize _ unicode ( ksmeta . aggregates . keys ( ) ) 
 
 def describe _ aggregate ( self , ksname , aggregatename ) : 
 if ksname is None : 
 @ @ - 1551 , 12 + 1547 , 10 @ @ class Shell ( cmd . Cmd ) : 
 name = protect _ name ( ksmeta . name ) 
 print ' Keyspace % s ' % ( name , ) 
 print ' - - - - - - - - - % s ' % ( ' - ' * len ( name ) ) 
 - cmd . Cmd . columnize ( self , protect _ names ( ksmeta . user _ types . keys ( ) ) ) 
 - print 
 + self . _ columnize _ unicode ( ksmeta . user _ types . keys ( ) , quote = True ) 
 else : 
 ksmeta = self . get _ keyspace _ meta ( ksname ) 
 - cmd . Cmd . columnize ( self , protect _ names ( ksmeta . user _ types . keys ( ) ) ) 
 - print 
 + self . _ columnize _ unicode ( ksmeta . user _ types . keys ( ) , quote = True ) 
 
 def describe _ usertype ( self , ksname , typename ) : 
 if ksname is None : 
 @ @ - 1572 , 6 + 1566 , 16 @ @ class Shell ( cmd . Cmd ) : 
 print usertype . as _ cql _ query ( formatted = True ) 
 print 
 
 + def _ columnize _ unicode ( self , name _ list , quote = False ) : 
 + " " " 
 + Used when columnizing identifiers that may contain unicode 
 + " " " 
 + names = [ n . encode ( ' utf - 8 ' ) for n in name _ list ] 
 + if quote : 
 + names = protect _ names ( names ) 
 + cmd . Cmd . columnize ( self , names ) 
 + print 
 + 
 def describe _ cluster ( self ) : 
 print ' \ nCluster : % s ' % self . get _ cluster _ name ( ) 
 p = trim _ if _ present ( self . get _ partitioner ( ) , ' org . apache . cassandra . dht . ' )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0ac5b66 . . 7d4882d 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 2 - rc1 
 + * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) 
 * save truncation position in system table ( CASSANDRA - 4906 ) 
 * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) 
 * allow CLI to GET cql3 columnfamily data ( CASSANDRA - 4924 ) 
 diff - - git a / bin / cqlsh b / bin / cqlsh 
 index 27eef7b . . 53eef8a 100755 
 - - - a / bin / cqlsh 
 + + + b / bin / cqlsh 
 @ @ - 627 , 10 + 627 , 7 @ @ class Shell ( cmd . Cmd ) : 
 raise ColumnFamilyNotFound ( " Unconfigured column family % r " % ( cfname , ) ) 
 
 def get _ columnfamily _ names ( self , ksname = None ) : 
 - if self . cqlver _ atleast ( 3 ) and ksname not in SYSTEM _ KEYSPACES : 
 - # since cql3 tables may be left out of thrift results , but 
 - # info on tables in system keyspaces still aren ' t included 
 - # in system . schema _ * 
 + if self . cqlver _ atleast ( 3 ) : 
 return self . get _ columnfamily _ names _ cql3 ( ksname = ksname ) 
 return [ c . name for c in self . get _ columnfamilies ( ksname ) ] 
 
 @ @ - 730 , 7 + 727 , 7 @ @ class Shell ( cmd . Cmd ) : 
 cf _ q = " " " select " columnfamily " from system . schema _ columnfamilies 
 where " keyspace " = : ks " " " 
 self . cursor . execute ( cf _ q , { ' ks ' : ksname } ) 
 - return [ row [ 0 ] for row in self . cursor . fetchall ( ) ] 
 + return [ str ( row [ 0 ] ) for row in self . cursor . fetchall ( ) ] 
 
 def get _ columnfamily _ layout ( self , ksname , cfname ) : 
 if ksname is None : 
 @ @ - 1156 , 12 + 1153 , 13 @ @ class Shell ( cmd . Cmd ) : 
 out . write ( " \ n AND strategy _ options : % s = % s " % ( opname , self . cql _ protect _ value ( opval ) ) ) 
 out . write ( ' ; \ n ' ) 
 
 - if ksdef . cf _ defs : 
 + cfs = self . get _ columnfamily _ names ( ksname ) 
 + if cfs : 
 out . write ( ' \ nUSE % s ; \ n ' % ksname ) 
 - for cf in ksdef . cf _ defs : 
 + for cf in cfs : 
 out . write ( ' \ n ' ) 
 # yes , cf might be looked up again . oh well . 
 - self . print _ recreate _ columnfamily ( ksdef . name , cf . name , out ) 
 + self . print _ recreate _ columnfamily ( ksdef . name , cf , out ) 
 
 def print _ recreate _ columnfamily ( self , ksname , cfname , out ) : 
 " " " 
 @ @ - 1327 , 20 + 1325 , 19 @ @ class Shell ( cmd . Cmd ) : 
 print 
 
 def describe _ columnfamilies ( self , ksname ) : 
 + print 
 if ksname is None : 
 for k in self . get _ keyspaces ( ) : 
 print ' Keyspace % s ' % ( k . name , ) 
 - print ' - - - - - - - - - % s \ n ' % ( ' - ' * len ( k . name ) ) 
 - cmd . Cmd . columnize ( self , [ c . name for c in k . cf _ defs ] ) 
 + print ' - - - - - - - - - % s ' % ( ' - ' * len ( k . name ) ) 
 + cmd . Cmd . columnize ( self , self . get _ columnfamily _ names ( k . name ) ) 
 print 
 else : 
 - names = self . get _ columnfamily _ names ( ksname ) 
 - print 
 - cmd . Cmd . columnize ( self , names ) 
 + cmd . Cmd . columnize ( self , self . get _ columnfamily _ names ( ksname ) ) 
 print 
 
 def describe _ cluster ( self ) : 
 - print ' Cluster : % s ' % self . get _ cluster _ name ( ) 
 + print ' \ nCluster : % s ' % self . get _ cluster _ name ( ) 
 p = trim _ if _ present ( self . get _ partitioner ( ) , ' org . apache . cassandra . dht . ' ) 
 print ' Partitioner : % s ' % p 
 snitch = trim _ if _ present ( self . get _ snitch ( ) , ' org . apache . cassandra . locator . ' )
