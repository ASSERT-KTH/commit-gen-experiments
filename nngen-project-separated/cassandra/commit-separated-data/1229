BLEU SCORE: 0.12068076399341783

TEST MSG: Remove token generator
GENERATED MSG: Add a token generator to standard tools .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f737a2b . . 0457917 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 <nl> + * Remove token generator ( CASSANDRA - 5261 ) <nl> * RolesCache should not be created for any authenticator that does not requireAuthentication ( CASSANDRA - 10562 ) <nl> * Fix LogTransaction checking only a single directory for files ( CASSANDRA - 10421 ) <nl> * Support encrypted and plain traffic on the same port ( CASSANDRA - 10559 ) <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index 3edd46c . . 3021a7b 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 45 , 6 + 45 , 7 @ @ New features <nl> <nl> Upgrading <nl> - - - - - - - - - <nl> + - token - generator tool has been removed . <nl> - Upgrade to 3 . 0 is supported from Cassandra 2 . 1 versions greater or equal to 2 . 1 . 9 , <nl> or Cassandra 2 . 2 versions greater or equal to 2 . 2 . 2 . Upgrade from Cassandra 2 . 0 and <nl> older versions is not supported . <nl> diff - - git a / tools / bin / token - generator b / tools / bin / token - generator <nl> deleted file mode 100755 <nl> index b70866d . . 0000000 <nl> - - - a / tools / bin / token - generator <nl> + + + / dev / null <nl> @ @ - 1 , 356 + 0 , 0 @ @ <nl> - # ! / usr / bin / env python <nl> - <nl> - # Licensed to the Apache Software Foundation ( ASF ) under one <nl> - # or more contributor license agreements . See the NOTICE file <nl> - # distributed with this work for additional information <nl> - # regarding copyright ownership . The ASF licenses this file <nl> - # to you under the Apache License , Version 2 . 0 ( the <nl> - # " License " ) ; you may not use this file except in compliance <nl> - # with the License . You may obtain a copy of the License at <nl> - # <nl> - # http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - # <nl> - # Unless required by applicable law or agreed to in writing , software <nl> - # distributed under the License is distributed on an " AS IS " BASIS , <nl> - # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - # See the License for the specific language governing permissions and <nl> - # limitations under the License . <nl> - <nl> - from _ _ future _ _ import with _ statement <nl> - <nl> - import os <nl> - import sys <nl> - import math <nl> - import optparse <nl> - import webbrowser <nl> - import urllib <nl> - from time import sleep <nl> - from itertools import cycle <nl> - from tempfile import NamedTemporaryFile <nl> - <nl> - description = ' ' ' Given a list of numbers indicating the number of nodes <nl> - in each separate datacenter , outputs a recommended list of tokens to use <nl> - with Murmur3Partitioner ( by default ) or with RandomPartitioner . <nl> - The list contains one token for each node in each datacenter . <nl> - ' ' ' <nl> - <nl> - usage = " % prog < nodes _ in _ dc1 > [ < nodes _ in _ dc2 > [ . . . ] ] " <nl> - <nl> - parser = optparse . OptionParser ( description = description , usage = usage ) <nl> - <nl> - def part _ murmur3 ( option , opt , value , parser ) : <nl> - parser . values . ringoffset = - ( 1 < < 63 ) <nl> - parser . values . ringrange = ( 1 < < 64 ) <nl> - return <nl> - def part _ random ( option , opt , value , parser ) : <nl> - parser . values . ringoffset = 0 <nl> - parser . values . ringrange = ( 1 < < 127 ) <nl> - return <nl> - parser . add _ option ( ' - - murmur3 ' , action = ' callback ' , callback = part _ murmur3 , <nl> - help = ' Generate tokens for Murmur3Partitioner ( default ) . ' ) <nl> - parser . add _ option ( ' - - random ' , action = ' callback ' , callback = part _ random , <nl> - help = ' Generate tokens for RandomPartitioner . ' ) <nl> - parser . add _ option ( ' - - ringoffset ' , type = ' int ' , <nl> - help = optparse . SUPPRESS _ HELP ) <nl> - parser . add _ option ( ' - - ringrange ' , type = ' int ' , <nl> - help = optparse . SUPPRESS _ HELP ) <nl> - <nl> - parser . add _ option ( ' - - graph ' , action = ' store _ true ' , <nl> - help = ' Show a rendering of the generated tokens as line ' <nl> - ' segments in a circle , colored according to datacenter ' ) <nl> - parser . add _ option ( ' - n ' , ' - - nts ' , action = ' store _ const ' , dest = ' strat ' , const = ' nts ' , <nl> - help = optparse . SUPPRESS _ HELP ) <nl> - parser . add _ option ( ' - o ' , ' - - onts ' , action = ' store _ const ' , dest = ' strat ' , const = ' onts ' , <nl> - help = optparse . SUPPRESS _ HELP ) <nl> - <nl> - parser . add _ option ( ' - - test ' , action = ' store _ true ' , <nl> - help = ' Run in test mode , outputting an HTML file to display ' <nl> - ' various generated ring arrangements . ' ) <nl> - <nl> - parser . add _ option ( ' - - html - output ' , help = optparse . SUPPRESS _ HELP ) <nl> - parser . add _ option ( ' - - browser - wait - time ' , type = ' float ' , help = optparse . SUPPRESS _ HELP ) <nl> - parser . add _ option ( ' - - test - colors ' , help = optparse . SUPPRESS _ HELP ) <nl> - parser . add _ option ( ' - - test - graphsize ' , type = ' int ' , help = optparse . SUPPRESS _ HELP ) <nl> - <nl> - <nl> - parser . set _ defaults ( <nl> - # default is Murmur3 <nl> - ringoffset = - ( 1 < < 63 ) , <nl> - ringrange = ( 1 < < 64 ) , <nl> - <nl> - # whether to create ( and try to display ) graph output <nl> - graph = False , <nl> - <nl> - # ' nts ' or ' onts ' ; the replication strategy for which to optimize <nl> - strat = ' nts ' , <nl> - <nl> - # durr <nl> - test = False , <nl> - <nl> - # size of the generated graph <nl> - graphsize = 600 , <nl> - <nl> - # where to write generated graph ( HTML ) output , or ' * tmp * ' to write a <nl> - # temporary file , and remove it after telling a browser to open it . ' - ' <nl> - # to write to stdout . <nl> - html _ output = ' * tmp * ' , <nl> - <nl> - # how long , in seconds , to wait before cleaning up a temporary html file <nl> - # after telling the browser to open it <nl> - browser _ wait _ time = 5 . 0 , <nl> - <nl> - # comma - separated list of HTML color codes , used in order to represent <nl> - # respective datacenter nodes <nl> - test _ colors = ' # 000 , # 00F , # 0F0 , # F00 , # 0FF , # FF0 , # F0F ' , <nl> - <nl> - # size of the per - test graphs <nl> - test _ graphsize = 200 , <nl> - ) <nl> - <nl> - class Ring : <nl> - MIN _ DC _ OFFSET _ DIVIDER = 235 <nl> - offset _ spacer = 2 <nl> - <nl> - def _ _ init _ _ ( self , dc _ counts , ringoffset , ringrange , strategy = ' nts ' ) : <nl> - self . ringoffset = ringoffset <nl> - self . ringrange = ringrange <nl> - self . dc _ counts = dc _ counts <nl> - self . calculate _ offset _ tokens = getattr ( self , ' calc _ offset _ tokens _ ' + strategy ) <nl> - <nl> - def best _ per _ dc _ offset ( self ) : <nl> - " " " <nl> - Calculate a per - dc offset for NTS DC spacing , such that there is a little <nl> - bit of room between nodes which would otherwise have been at the same token ; <nl> - ( hopefully ) large enough that the difference can show when - - graph is used , <nl> - but small enough that it there ' s no chance of the relative ordering changing . <nl> - " " " <nl> - lowest _ division = len ( self . dc _ counts ) * max ( self . dc _ counts ) * self . offset _ spacer <nl> - division = max ( lowest _ division , self . MIN _ DC _ OFFSET _ DIVIDER ) <nl> - return - self . ringrange / / division <nl> - <nl> - def bound _ token ( self , tok ) : <nl> - if tok < self . ringoffset : <nl> - tok + = self . ringrange <nl> - return tok <nl> - <nl> - def calc _ offset _ tokens _ nts ( self ) : <nl> - dc _ offset = self . best _ per _ dc _ offset ( ) <nl> - dcs = [ ] <nl> - for ( dcnum , dccount ) in enumerate ( self . dc _ counts ) : <nl> - offset = dcnum * dc _ offset <nl> - arcsize = self . ringrange / / ( dccount or 1 ) <nl> - dcs . append ( sorted ( [ self . bound _ token ( ( n * arcsize + offset ) - self . ringoffset % self . ringrange ) for n in xrange ( dccount ) ] ) ) <nl> - return dcs <nl> - <nl> - def calc _ offset _ tokens _ onts ( self ) : <nl> - dcs _ by _ count = sorted ( enumerate ( self . dc _ counts ) , key = lambda d : d [ 1 ] , reverse = True ) <nl> - biggest = dcs _ by _ count [ 0 ] [ 1 ] <nl> - nodes = [ dcnum for ( dcnum , dccount ) in dcs _ by _ count for x in range ( dccount ) ] <nl> - layout = [ nodes [ n ] for i in range ( biggest ) for n in range ( i , len ( nodes ) , biggest ) ] <nl> - <nl> - final = [ [ ] for x in dcs _ by _ count ] <nl> - for pos , dc in enumerate ( layout ) : <nl> - final [ dc ] . append ( self . ringoffset + pos * self . ringrange / / len ( layout ) ) <nl> - return final <nl> - <nl> - <nl> - def print _ tokens ( tokens , tokenwidth , indent = 0 ) : <nl> - indentstr = ' ' * indent <nl> - for dcnum , toklist in enumerate ( tokens ) : <nl> - print " % sDC # % d : " % ( indentstr , dcnum + 1 ) <nl> - nwidth = len ( str ( len ( toklist ) ) ) <nl> - for tnum , tok in enumerate ( toklist ) : <nl> - print " % s Node # % 0 * d : % * d " % ( indentstr , nwidth , tnum + 1 , tokenwidth , tok ) <nl> - <nl> - def calculate _ ideal _ tokens ( datacenters , ringoffset , ringrange , strategy ) : <nl> - return Ring ( datacenters , ringoffset , ringrange , strategy ) . calculate _ offset _ tokens ( ) <nl> - <nl> - def file _ to _ url ( path ) : <nl> - path = os . path . abspath ( path ) <nl> - if os . name = = ' nt ' : <nl> - host , path = os . path . splitunc ( path ) <nl> - drive , path = os . path . splitdrive ( path ) <nl> - path = ( host or ( drive + ' | ' ) ) + path . replace ( os . sep , ' / ' ) <nl> - return ' file : / / ' + urllib . quote ( path , safe = ' / ' ) <nl> - <nl> - html _ template = " " " < ! DOCTYPE html > <nl> - < html > <nl> - < body > <nl> - <nl> - % ( generated _ body ) s <nl> - <nl> - < / body > <nl> - < / html > <nl> - " " " <nl> - <nl> - chart _ template = " " " <nl> - < canvas id = " % ( id ) s " width = " % ( size ) s " height = " % ( size ) s " style = " border : 1px solid # c3c3c3 ; " > <nl> - Your browser does not support the canvas element . <nl> - < / canvas > <nl> - < script type = " text / javascript " > <nl> - var c = document . getElementById ( " % ( id ) s " ) ; <nl> - var ctx = c . getContext ( " 2d " ) ; <nl> - % ( generated _ script ) s <nl> - < / script > <nl> - " " " <nl> - <nl> - chart _ js _ template = " " " <nl> - ctx . beginPath ( ) ; <nl> - ctx . strokeStyle = " % ( color ) s " ; <nl> - ctx . moveTo ( % ( center ) s , % ( center ) s ) ; <nl> - ctx . lineTo ( % ( x ) s , % ( y ) s ) ; <nl> - ctx . stroke ( ) ; <nl> - ctx . closePath ( ) ; <nl> - " " " <nl> - <nl> - class RingRenderer : <nl> - border _ fraction = 0 . 08 <nl> - <nl> - def _ _ init _ _ ( self , ringrange , graphsize , colors ) : <nl> - self . ringrange = ringrange <nl> - self . graphsize = graphsize <nl> - self . colors = colors <nl> - self . anglefactor = 2 * math . pi / ringrange <nl> - self . linelength = graphsize * ( 1 - self . border _ fraction ) / 2 <nl> - self . center = graphsize / 2 <nl> - <nl> - def calc _ coords ( self , tokens ) : <nl> - these _ calcs = [ ] <nl> - <nl> - for toklist in tokens : <nl> - coordlist = [ ] <nl> - for tok in toklist : <nl> - angle = tok * self . anglefactor <nl> - x2 = self . center + self . linelength * math . sin ( angle ) <nl> - y2 = self . center - self . linelength * math . cos ( angle ) <nl> - coordlist . append ( ( x2 , y2 ) ) <nl> - these _ calcs . append ( coordlist ) <nl> - <nl> - return these _ calcs <nl> - <nl> - def make _ html ( self , tokensets ) : <nl> - coordinate _ sets = map ( self . calc _ coords , tokensets ) <nl> - all _ charts = [ ] <nl> - for chart _ index , chart _ set in enumerate ( coordinate _ sets ) : <nl> - chart _ code = [ ] <nl> - for coordlist , color in zip ( chart _ set , cycle ( self . colors ) ) : <nl> - for x , y in coordlist : <nl> - chart _ code . append ( chart _ js _ template <nl> - % dict ( color = color , x = x , y = y , <nl> - center = ( self . graphsize / 2 ) ) ) <nl> - this _ chart = chart _ template % dict ( generated _ script = ' ' . join ( chart _ code ) , <nl> - id = chart _ index , size = self . graphsize ) <nl> - all _ charts . append ( this _ chart ) <nl> - return html _ template % dict ( generated _ body = ' ' . join ( all _ charts ) ) <nl> - <nl> - # = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> - # Tests <nl> - <nl> - def run _ tests ( opts ) : <nl> - tests = [ <nl> - [ 1 ] , <nl> - [ 1 , 1 ] , <nl> - [ 2 , 2 ] , <nl> - [ 1 , 2 , 2 ] , <nl> - [ 2 , 2 , 2 ] , <nl> - [ 2 , 0 , 0 ] , <nl> - [ 0 , 2 , 0 ] , <nl> - [ 0 , 0 , 2 ] , <nl> - [ 2 , 2 , 0 ] , <nl> - [ 2 , 0 , 2 ] , <nl> - [ 0 , 2 , 2 ] , <nl> - [ 0 , 0 , 1 , 1 , 0 , 1 , 1 ] , <nl> - [ 6 ] , <nl> - [ 3 , 3 , 3 ] , <nl> - [ 9 ] , <nl> - [ 1 , 1 , 1 , 1 ] , <nl> - [ 4 ] , <nl> - [ 3 , 3 , 6 , 4 , 2 ] <nl> - ] <nl> - <nl> - tokensets = [ ] <nl> - for test in tests : <nl> - print " Test % r " % ( test , ) <nl> - tokens = calculate _ ideal _ tokens ( test , opts . ringoffset , opts . ringrange , opts . strat ) <nl> - print _ tokens ( tokens , len ( str ( opts . ringrange ) ) + 1 , indent = 2 ) <nl> - tokensets . append ( tokens ) <nl> - return tokensets <nl> - <nl> - # = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> - <nl> - def display _ html ( html , wait _ time ) : <nl> - with NamedTemporaryFile ( suffix = ' . html ' ) as f : <nl> - f . write ( html ) <nl> - f . flush ( ) <nl> - webbrowser . open ( file _ to _ url ( f . name ) , new = 2 ) <nl> - # this is stupid . webbrowser . open really can ' t wait until the <nl> - # browser has said " yes I ' ve got it " ? <nl> - sleep ( wait _ time ) <nl> - <nl> - def write _ output ( html , opts ) : <nl> - if opts . html _ output = = ' - ' : <nl> - sys . stdout . write ( html ) <nl> - elif opts . html _ output = = ' * tmp * ' : <nl> - display _ html ( html , opts . browser _ wait _ time ) <nl> - else : <nl> - with open ( opts . html _ output , ' w ' ) as f : <nl> - f . write ( html ) <nl> - <nl> - def readnum ( prompt , min = None , max = None ) : <nl> - while True : <nl> - x = raw _ input ( prompt + ' ' ) <nl> - try : <nl> - val = int ( x ) <nl> - except ValueError : <nl> - print " Oops , % r is not an integer . Try again . \ n " % ( x , ) <nl> - continue <nl> - if min is not None and val < min : <nl> - print " Oops , the answer must be at least % d . Try again . \ n " % ( min , ) <nl> - elif max is not None and val > max : <nl> - print " Oops , the answer must be at most % d . Try again . \ n " % ( max , ) <nl> - else : <nl> - return val <nl> - <nl> - def get _ dc _ sizes _ interactive ( ) : <nl> - print " Token Generator Interactive Mode " <nl> - print " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " <nl> - print <nl> - dcs = readnum ( " How many datacenters will participate in this Cassandra cluster ? " , min = 1 ) <nl> - sizes = [ ] <nl> - for n in xrange ( dcs ) : <nl> - sizes . append ( readnum ( " How many nodes are in datacenter # % d ? " % ( n + 1 ) , min = 0 ) ) <nl> - print <nl> - return sizes <nl> - <nl> - def main ( opts , args ) : <nl> - opts . colorlist = [ s . strip ( ) for s in opts . test _ colors . split ( ' , ' ) ] <nl> - if opts . test : <nl> - opts . graph = True <nl> - tokensets = run _ tests ( opts ) <nl> - renderer = RingRenderer ( ringrange = opts . ringrange , graphsize = opts . test _ graphsize , <nl> - colors = opts . colorlist ) <nl> - else : <nl> - if len ( args ) = = 0 : <nl> - args = get _ dc _ sizes _ interactive ( ) <nl> - try : <nl> - datacenters = map ( int , args ) <nl> - except ValueError , e : <nl> - parser . error ( ' Arguments should be integers . ' ) <nl> - renderer = RingRenderer ( ringrange = opts . ringrange , graphsize = opts . graphsize , <nl> - colors = opts . colorlist ) <nl> - tokens = calculate _ ideal _ tokens ( datacenters , opts . ringoffset , opts . ringrange , opts . strat ) <nl> - print _ tokens ( tokens , len ( str ( opts . ringrange ) ) + 1 ) <nl> - tokensets = [ tokens ] <nl> - <nl> - if opts . graph : <nl> - html = renderer . make _ html ( tokensets ) <nl> - write _ output ( html , opts ) <nl> - return 0 <nl> - <nl> - if _ _ name _ _ = = ' _ _ main _ _ ' : <nl> - opts , args = parser . parse _ args ( ) <nl> - try : <nl> - res = main ( opts , args ) <nl> - except KeyboardInterrupt : <nl> - res = - 128 <nl> - sys . exit ( res ) <nl> diff - - git a / tools / bin / token - generator . bat b / tools / bin / token - generator . bat <nl> deleted file mode 100644 <nl> index a7188db . . 0000000 <nl> - - - a / tools / bin / token - generator . bat <nl> + + + / dev / null <nl> @ @ - 1 , 34 + 0 , 0 @ @ <nl> - @ ECHO OFF <nl> - @ REM <nl> - @ REM Licensed to the Apache Software Foundation ( ASF ) under one or more <nl> - @ REM contributor license agreements . See the NOTICE file distributed with <nl> - @ REM this work for additional information regarding copyright ownership . <nl> - @ REM The ASF licenses this file to You under the Apache License , Version 2 . 0 <nl> - @ REM ( the " License " ) ; you may not use this file except in compliance with <nl> - @ REM the License . You may obtain a copy of the License at <nl> - @ REM <nl> - @ REM http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - @ REM <nl> - @ REM Unless required by applicable law or agreed to in writing , software <nl> - @ REM distributed under the License is distributed on an " AS IS " BASIS , <nl> - @ REM WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - @ REM See the License for the specific language governing permissions and <nl> - @ REM limitations under the License . <nl> - <nl> - @ echo off <nl> - <nl> - if " % OS % " = = " Windows _ NT " setlocal <nl> - <nl> - python - V > nul 2 > & 1 <nl> - if ERRORLEVEL 1 goto err <nl> - <nl> - python " % ~ dp0 \ token - generator " % * <nl> - goto finally <nl> - <nl> - : err <nl> - echo Can ' t detect Python version ! <nl> - <nl> - : finally <nl> - <nl> - ENDLOCAL <nl> -
NEAREST DIFF (one line): diff - - git a / examples / pig / test / populate - cli . txt b / examples / pig / test / populate - cli . txt <nl> index 7ec6cd6 . . 1f59642 100644 <nl> - - - a / examples / pig / test / populate - cli . txt <nl> + + + b / examples / pig / test / populate - cli . txt <nl> @ @ - 112 , 3 + 112 , 23 @ @ set CompoInt [ ' clock ' ] [ ' 1 : 0 ' ] = ' z ' ; <nl> set CompoInt [ ' clock ' ] [ ' 1 : 30 ' ] = ' zzzz ' ; <nl> set CompoInt [ ' clock ' ] [ ' 2 : 30 ' ] = ' daddy ? ' ; <nl> set CompoInt [ ' clock ' ] [ ' 6 : 30 ' ] = ' coffee . . . ' ; <nl> + <nl> + create column family CompoIntCopy <nl> + with key _ validation _ class = UTF8Type <nl> + and default _ validation _ class = UTF8Type <nl> + and comparator = ' CompositeType ( LongType , LongType ) ' ; <nl> + <nl> + create column family CompoKey <nl> + with key _ validation _ class = ' CompositeType ( UTF8Type , LongType ) ' <nl> + and default _ validation _ class = UTF8Type <nl> + and comparator = LongType ; <nl> + <nl> + set CompoKey [ ' clock : 10 ' ] [ ' 1 ' ] = ' z ' ; <nl> + set CompoKey [ ' clock : 20 ' ] [ ' 1 ' ] = ' zzzz ' ; <nl> + set CompoKey [ ' clock : 30 ' ] [ ' 2 ' ] = ' daddy ? ' ; <nl> + set CompoKey [ ' clock : 40 ' ] [ ' 6 ' ] = ' coffee . . . ' ; <nl> + <nl> + create column family CompoKeyCopy <nl> + with key _ validation _ class = ' CompositeType ( UTF8Type , LongType ) ' <nl> + and default _ validation _ class = UTF8Type <nl> + and comparator = LongType ; <nl> diff - - git a / examples / pig / test / test _ storage . pig b / examples / pig / test / test _ storage . pig <nl> index a0157f7 . . 026cb02 100644 <nl> - - - a / examples / pig / test / test _ storage . pig <nl> + + + b / examples / pig / test / test _ storage . pig <nl> @ @ - 67 , 4 + 67 , 19 @ @ night = foreach night generate ( int ) columns : : name . $ 0 + ( double ) columns : : name . $ 1 / 60 <nl> - - What happens at the darkest hour ? <nl> darkest = filter night by hour > 2 and hour < 5 ; <nl> <nl> - dump darkest ; <nl> \ No newline at end of file <nl> + dump darkest ; <nl> + <nl> + compo _ int _ rows = LOAD ' cassandra : / / PigTest / CompoInt ' USING CassandraStorage ( ) ; <nl> + STORE compo _ int _ rows INTO ' cassandra : / / PigTest / CompoIntCopy ' USING CassandraStorage ( ) ; <nl> + <nl> + - - <nl> + - - Test CompositeKey <nl> + - - <nl> + <nl> + compokeys = load ' cassandra : / / PigTest / CompoKey ' using CassandraStorage ( ) ; <nl> + compokeys = filter compokeys by key . $ 1 = = 40 ; <nl> + <nl> + dump compokeys ; <nl> + <nl> + compo _ key _ rows = LOAD ' cassandra : / / PigTest / CompoKey ' USING CassandraStorage ( ) ; <nl> + STORE compo _ key _ rows INTO ' cassandra : / / PigTest / CompoKeyCopy ' USING CassandraStorage ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java b / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java <nl> index 5742cb9 . . 454330c 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java <nl> @ @ - 131 , 7 + 131 , 7 @ @ public class CassandraStorage extends LoadFunc implements StoreFuncInterface , Lo <nl> { <nl> return limit ; <nl> } <nl> - <nl> + <nl> public Tuple getNextWide ( ) throws IOException <nl> { <nl> CfDef cfDef = getCfDef ( loadSignature ) ; <nl> @ @ - 223 , 10 + 223 , 10 @ @ public class CassandraStorage extends LoadFunc implements StoreFuncInterface , Lo <nl> <nl> / / output tuple , will hold the key , each indexed column in a tuple , then a bag of the rest <nl> / / NOTE : we ' re setting the tuple size here only for the key so we can use setTupleValue on it <nl> - Tuple tuple = TupleFactory . getInstance ( ) . newTuple ( 1 ) ; <nl> + <nl> + Tuple tuple = keyToTuple ( key , cfDef , parseType ( cfDef . getKey _ validation _ class ( ) ) ) ; <nl> DefaultDataBag bag = new DefaultDataBag ( ) ; <nl> - / / set the key <nl> - setTupleValue ( tuple , 0 , getDefaultMarshallers ( cfDef ) . get ( 2 ) . compose ( key ) ) ; <nl> + <nl> / / we must add all the indexed columns first to match the schema <nl> Map < ByteBuffer , Boolean > added = new HashMap < ByteBuffer , Boolean > ( ) ; <nl> / / take care to iterate these in the same order as the schema does <nl> @ @ - 283 , 6 + 283 , 20 @ @ public class CassandraStorage extends LoadFunc implements StoreFuncInterface , Lo <nl> return t ; <nl> } <nl> <nl> + private Tuple keyToTuple ( ByteBuffer key , CfDef cfDef , AbstractType comparator ) throws IOException <nl> + { <nl> + Tuple tuple = TupleFactory . getInstance ( ) . newTuple ( 1 ) ; <nl> + if ( comparator instanceof AbstractCompositeType ) <nl> + { <nl> + setTupleValue ( tuple , 0 , composeComposite ( ( AbstractCompositeType ) comparator , key ) ) ; <nl> + } <nl> + else <nl> + { <nl> + setTupleValue ( tuple , 0 , getDefaultMarshallers ( cfDef ) . get ( 2 ) . compose ( key ) ) ; <nl> + } <nl> + return tuple ; <nl> + } <nl> + <nl> private Tuple columnToTuple ( IColumn col , CfDef cfDef , AbstractType comparator ) throws IOException <nl> { <nl> Tuple pair = TupleFactory . getInstance ( ) . newTuple ( 2 ) ; <nl> @ @ - 825 , 6 + 839 , 28 @ @ public class CassandraStorage extends LoadFunc implements StoreFuncInterface , Lo <nl> return DoubleType . instance . decompose ( ( Double ) o ) ; <nl> if ( o instanceof UUID ) <nl> return ByteBuffer . wrap ( UUIDGen . decompose ( ( UUID ) o ) ) ; <nl> + if ( o instanceof Tuple ) { <nl> + List < Object > objects = ( ( Tuple ) o ) . getAll ( ) ; <nl> + List < ByteBuffer > serialized = new ArrayList < ByteBuffer > ( objects . size ( ) ) ; <nl> + int totalLength = 0 ; <nl> + for ( Object sub : objects ) <nl> + { <nl> + ByteBuffer buffer = objToBB ( sub ) ; <nl> + serialized . add ( buffer ) ; <nl> + totalLength + = 2 + buffer . remaining ( ) + 1 ; <nl> + } <nl> + ByteBuffer out = ByteBuffer . allocate ( totalLength ) ; <nl> + for ( ByteBuffer bb : serialized ) <nl> + { <nl> + int length = bb . remaining ( ) ; <nl> + out . put ( ( byte ) ( ( length > > 8 ) & 0xFF ) ) ; <nl> + out . put ( ( byte ) ( length & 0xFF ) ) ; <nl> + out . put ( bb ) ; <nl> + out . put ( ( byte ) 0 ) ; <nl> + } <nl> + out . flip ( ) ; <nl> + return out ; <nl> + } <nl> <nl> return ByteBuffer . wrap ( ( ( DataByteArray ) o ) . get ( ) ) ; <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f737a2b . . 0457917 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 
 + * Remove token generator ( CASSANDRA - 5261 ) 
 * RolesCache should not be created for any authenticator that does not requireAuthentication ( CASSANDRA - 10562 ) 
 * Fix LogTransaction checking only a single directory for files ( CASSANDRA - 10421 ) 
 * Support encrypted and plain traffic on the same port ( CASSANDRA - 10559 ) 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index 3edd46c . . 3021a7b 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 45 , 6 + 45 , 7 @ @ New features 
 
 Upgrading 
 - - - - - - - - - 
 + - token - generator tool has been removed . 
 - Upgrade to 3 . 0 is supported from Cassandra 2 . 1 versions greater or equal to 2 . 1 . 9 , 
 or Cassandra 2 . 2 versions greater or equal to 2 . 2 . 2 . Upgrade from Cassandra 2 . 0 and 
 older versions is not supported . 
 diff - - git a / tools / bin / token - generator b / tools / bin / token - generator 
 deleted file mode 100755 
 index b70866d . . 0000000 
 - - - a / tools / bin / token - generator 
 + + + / dev / null 
 @ @ - 1 , 356 + 0 , 0 @ @ 
 - # ! / usr / bin / env python 
 - 
 - # Licensed to the Apache Software Foundation ( ASF ) under one 
 - # or more contributor license agreements . See the NOTICE file 
 - # distributed with this work for additional information 
 - # regarding copyright ownership . The ASF licenses this file 
 - # to you under the Apache License , Version 2 . 0 ( the 
 - # " License " ) ; you may not use this file except in compliance 
 - # with the License . You may obtain a copy of the License at 
 - # 
 - # http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - # 
 - # Unless required by applicable law or agreed to in writing , software 
 - # distributed under the License is distributed on an " AS IS " BASIS , 
 - # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - # See the License for the specific language governing permissions and 
 - # limitations under the License . 
 - 
 - from _ _ future _ _ import with _ statement 
 - 
 - import os 
 - import sys 
 - import math 
 - import optparse 
 - import webbrowser 
 - import urllib 
 - from time import sleep 
 - from itertools import cycle 
 - from tempfile import NamedTemporaryFile 
 - 
 - description = ' ' ' Given a list of numbers indicating the number of nodes 
 - in each separate datacenter , outputs a recommended list of tokens to use 
 - with Murmur3Partitioner ( by default ) or with RandomPartitioner . 
 - The list contains one token for each node in each datacenter . 
 - ' ' ' 
 - 
 - usage = " % prog < nodes _ in _ dc1 > [ < nodes _ in _ dc2 > [ . . . ] ] " 
 - 
 - parser = optparse . OptionParser ( description = description , usage = usage ) 
 - 
 - def part _ murmur3 ( option , opt , value , parser ) : 
 - parser . values . ringoffset = - ( 1 < < 63 ) 
 - parser . values . ringrange = ( 1 < < 64 ) 
 - return 
 - def part _ random ( option , opt , value , parser ) : 
 - parser . values . ringoffset = 0 
 - parser . values . ringrange = ( 1 < < 127 ) 
 - return 
 - parser . add _ option ( ' - - murmur3 ' , action = ' callback ' , callback = part _ murmur3 , 
 - help = ' Generate tokens for Murmur3Partitioner ( default ) . ' ) 
 - parser . add _ option ( ' - - random ' , action = ' callback ' , callback = part _ random , 
 - help = ' Generate tokens for RandomPartitioner . ' ) 
 - parser . add _ option ( ' - - ringoffset ' , type = ' int ' , 
 - help = optparse . SUPPRESS _ HELP ) 
 - parser . add _ option ( ' - - ringrange ' , type = ' int ' , 
 - help = optparse . SUPPRESS _ HELP ) 
 - 
 - parser . add _ option ( ' - - graph ' , action = ' store _ true ' , 
 - help = ' Show a rendering of the generated tokens as line ' 
 - ' segments in a circle , colored according to datacenter ' ) 
 - parser . add _ option ( ' - n ' , ' - - nts ' , action = ' store _ const ' , dest = ' strat ' , const = ' nts ' , 
 - help = optparse . SUPPRESS _ HELP ) 
 - parser . add _ option ( ' - o ' , ' - - onts ' , action = ' store _ const ' , dest = ' strat ' , const = ' onts ' , 
 - help = optparse . SUPPRESS _ HELP ) 
 - 
 - parser . add _ option ( ' - - test ' , action = ' store _ true ' , 
 - help = ' Run in test mode , outputting an HTML file to display ' 
 - ' various generated ring arrangements . ' ) 
 - 
 - parser . add _ option ( ' - - html - output ' , help = optparse . SUPPRESS _ HELP ) 
 - parser . add _ option ( ' - - browser - wait - time ' , type = ' float ' , help = optparse . SUPPRESS _ HELP ) 
 - parser . add _ option ( ' - - test - colors ' , help = optparse . SUPPRESS _ HELP ) 
 - parser . add _ option ( ' - - test - graphsize ' , type = ' int ' , help = optparse . SUPPRESS _ HELP ) 
 - 
 - 
 - parser . set _ defaults ( 
 - # default is Murmur3 
 - ringoffset = - ( 1 < < 63 ) , 
 - ringrange = ( 1 < < 64 ) , 
 - 
 - # whether to create ( and try to display ) graph output 
 - graph = False , 
 - 
 - # ' nts ' or ' onts ' ; the replication strategy for which to optimize 
 - strat = ' nts ' , 
 - 
 - # durr 
 - test = False , 
 - 
 - # size of the generated graph 
 - graphsize = 600 , 
 - 
 - # where to write generated graph ( HTML ) output , or ' * tmp * ' to write a 
 - # temporary file , and remove it after telling a browser to open it . ' - ' 
 - # to write to stdout . 
 - html _ output = ' * tmp * ' , 
 - 
 - # how long , in seconds , to wait before cleaning up a temporary html file 
 - # after telling the browser to open it 
 - browser _ wait _ time = 5 . 0 , 
 - 
 - # comma - separated list of HTML color codes , used in order to represent 
 - # respective datacenter nodes 
 - test _ colors = ' # 000 , # 00F , # 0F0 , # F00 , # 0FF , # FF0 , # F0F ' , 
 - 
 - # size of the per - test graphs 
 - test _ graphsize = 200 , 
 - ) 
 - 
 - class Ring : 
 - MIN _ DC _ OFFSET _ DIVIDER = 235 
 - offset _ spacer = 2 
 - 
 - def _ _ init _ _ ( self , dc _ counts , ringoffset , ringrange , strategy = ' nts ' ) : 
 - self . ringoffset = ringoffset 
 - self . ringrange = ringrange 
 - self . dc _ counts = dc _ counts 
 - self . calculate _ offset _ tokens = getattr ( self , ' calc _ offset _ tokens _ ' + strategy ) 
 - 
 - def best _ per _ dc _ offset ( self ) : 
 - " " " 
 - Calculate a per - dc offset for NTS DC spacing , such that there is a little 
 - bit of room between nodes which would otherwise have been at the same token ; 
 - ( hopefully ) large enough that the difference can show when - - graph is used , 
 - but small enough that it there ' s no chance of the relative ordering changing . 
 - " " " 
 - lowest _ division = len ( self . dc _ counts ) * max ( self . dc _ counts ) * self . offset _ spacer 
 - division = max ( lowest _ division , self . MIN _ DC _ OFFSET _ DIVIDER ) 
 - return - self . ringrange / / division 
 - 
 - def bound _ token ( self , tok ) : 
 - if tok < self . ringoffset : 
 - tok + = self . ringrange 
 - return tok 
 - 
 - def calc _ offset _ tokens _ nts ( self ) : 
 - dc _ offset = self . best _ per _ dc _ offset ( ) 
 - dcs = [ ] 
 - for ( dcnum , dccount ) in enumerate ( self . dc _ counts ) : 
 - offset = dcnum * dc _ offset 
 - arcsize = self . ringrange / / ( dccount or 1 ) 
 - dcs . append ( sorted ( [ self . bound _ token ( ( n * arcsize + offset ) - self . ringoffset % self . ringrange ) for n in xrange ( dccount ) ] ) ) 
 - return dcs 
 - 
 - def calc _ offset _ tokens _ onts ( self ) : 
 - dcs _ by _ count = sorted ( enumerate ( self . dc _ counts ) , key = lambda d : d [ 1 ] , reverse = True ) 
 - biggest = dcs _ by _ count [ 0 ] [ 1 ] 
 - nodes = [ dcnum for ( dcnum , dccount ) in dcs _ by _ count for x in range ( dccount ) ] 
 - layout = [ nodes [ n ] for i in range ( biggest ) for n in range ( i , len ( nodes ) , biggest ) ] 
 - 
 - final = [ [ ] for x in dcs _ by _ count ] 
 - for pos , dc in enumerate ( layout ) : 
 - final [ dc ] . append ( self . ringoffset + pos * self . ringrange / / len ( layout ) ) 
 - return final 
 - 
 - 
 - def print _ tokens ( tokens , tokenwidth , indent = 0 ) : 
 - indentstr = ' ' * indent 
 - for dcnum , toklist in enumerate ( tokens ) : 
 - print " % sDC # % d : " % ( indentstr , dcnum + 1 ) 
 - nwidth = len ( str ( len ( toklist ) ) ) 
 - for tnum , tok in enumerate ( toklist ) : 
 - print " % s Node # % 0 * d : % * d " % ( indentstr , nwidth , tnum + 1 , tokenwidth , tok ) 
 - 
 - def calculate _ ideal _ tokens ( datacenters , ringoffset , ringrange , strategy ) : 
 - return Ring ( datacenters , ringoffset , ringrange , strategy ) . calculate _ offset _ tokens ( ) 
 - 
 - def file _ to _ url ( path ) : 
 - path = os . path . abspath ( path ) 
 - if os . name = = ' nt ' : 
 - host , path = os . path . splitunc ( path ) 
 - drive , path = os . path . splitdrive ( path ) 
 - path = ( host or ( drive + ' | ' ) ) + path . replace ( os . sep , ' / ' ) 
 - return ' file : / / ' + urllib . quote ( path , safe = ' / ' ) 
 - 
 - html _ template = " " " < ! DOCTYPE html > 
 - < html > 
 - < body > 
 - 
 - % ( generated _ body ) s 
 - 
 - < / body > 
 - < / html > 
 - " " " 
 - 
 - chart _ template = " " " 
 - < canvas id = " % ( id ) s " width = " % ( size ) s " height = " % ( size ) s " style = " border : 1px solid # c3c3c3 ; " > 
 - Your browser does not support the canvas element . 
 - < / canvas > 
 - < script type = " text / javascript " > 
 - var c = document . getElementById ( " % ( id ) s " ) ; 
 - var ctx = c . getContext ( " 2d " ) ; 
 - % ( generated _ script ) s 
 - < / script > 
 - " " " 
 - 
 - chart _ js _ template = " " " 
 - ctx . beginPath ( ) ; 
 - ctx . strokeStyle = " % ( color ) s " ; 
 - ctx . moveTo ( % ( center ) s , % ( center ) s ) ; 
 - ctx . lineTo ( % ( x ) s , % ( y ) s ) ; 
 - ctx . stroke ( ) ; 
 - ctx . closePath ( ) ; 
 - " " " 
 - 
 - class RingRenderer : 
 - border _ fraction = 0 . 08 
 - 
 - def _ _ init _ _ ( self , ringrange , graphsize , colors ) : 
 - self . ringrange = ringrange 
 - self . graphsize = graphsize 
 - self . colors = colors 
 - self . anglefactor = 2 * math . pi / ringrange 
 - self . linelength = graphsize * ( 1 - self . border _ fraction ) / 2 
 - self . center = graphsize / 2 
 - 
 - def calc _ coords ( self , tokens ) : 
 - these _ calcs = [ ] 
 - 
 - for toklist in tokens : 
 - coordlist = [ ] 
 - for tok in toklist : 
 - angle = tok * self . anglefactor 
 - x2 = self . center + self . linelength * math . sin ( angle ) 
 - y2 = self . center - self . linelength * math . cos ( angle ) 
 - coordlist . append ( ( x2 , y2 ) ) 
 - these _ calcs . append ( coordlist ) 
 - 
 - return these _ calcs 
 - 
 - def make _ html ( self , tokensets ) : 
 - coordinate _ sets = map ( self . calc _ coords , tokensets ) 
 - all _ charts = [ ] 
 - for chart _ index , chart _ set in enumerate ( coordinate _ sets ) : 
 - chart _ code = [ ] 
 - for coordlist , color in zip ( chart _ set , cycle ( self . colors ) ) : 
 - for x , y in coordlist : 
 - chart _ code . append ( chart _ js _ template 
 - % dict ( color = color , x = x , y = y , 
 - center = ( self . graphsize / 2 ) ) ) 
 - this _ chart = chart _ template % dict ( generated _ script = ' ' . join ( chart _ code ) , 
 - id = chart _ index , size = self . graphsize ) 
 - all _ charts . append ( this _ chart ) 
 - return html _ template % dict ( generated _ body = ' ' . join ( all _ charts ) ) 
 - 
 - # = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 - # Tests 
 - 
 - def run _ tests ( opts ) : 
 - tests = [ 
 - [ 1 ] , 
 - [ 1 , 1 ] , 
 - [ 2 , 2 ] , 
 - [ 1 , 2 , 2 ] , 
 - [ 2 , 2 , 2 ] , 
 - [ 2 , 0 , 0 ] , 
 - [ 0 , 2 , 0 ] , 
 - [ 0 , 0 , 2 ] , 
 - [ 2 , 2 , 0 ] , 
 - [ 2 , 0 , 2 ] , 
 - [ 0 , 2 , 2 ] , 
 - [ 0 , 0 , 1 , 1 , 0 , 1 , 1 ] , 
 - [ 6 ] , 
 - [ 3 , 3 , 3 ] , 
 - [ 9 ] , 
 - [ 1 , 1 , 1 , 1 ] , 
 - [ 4 ] , 
 - [ 3 , 3 , 6 , 4 , 2 ] 
 - ] 
 - 
 - tokensets = [ ] 
 - for test in tests : 
 - print " Test % r " % ( test , ) 
 - tokens = calculate _ ideal _ tokens ( test , opts . ringoffset , opts . ringrange , opts . strat ) 
 - print _ tokens ( tokens , len ( str ( opts . ringrange ) ) + 1 , indent = 2 ) 
 - tokensets . append ( tokens ) 
 - return tokensets 
 - 
 - # = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 - 
 - def display _ html ( html , wait _ time ) : 
 - with NamedTemporaryFile ( suffix = ' . html ' ) as f : 
 - f . write ( html ) 
 - f . flush ( ) 
 - webbrowser . open ( file _ to _ url ( f . name ) , new = 2 ) 
 - # this is stupid . webbrowser . open really can ' t wait until the 
 - # browser has said " yes I ' ve got it " ? 
 - sleep ( wait _ time ) 
 - 
 - def write _ output ( html , opts ) : 
 - if opts . html _ output = = ' - ' : 
 - sys . stdout . write ( html ) 
 - elif opts . html _ output = = ' * tmp * ' : 
 - display _ html ( html , opts . browser _ wait _ time ) 
 - else : 
 - with open ( opts . html _ output , ' w ' ) as f : 
 - f . write ( html ) 
 - 
 - def readnum ( prompt , min = None , max = None ) : 
 - while True : 
 - x = raw _ input ( prompt + ' ' ) 
 - try : 
 - val = int ( x ) 
 - except ValueError : 
 - print " Oops , % r is not an integer . Try again . \ n " % ( x , ) 
 - continue 
 - if min is not None and val < min : 
 - print " Oops , the answer must be at least % d . Try again . \ n " % ( min , ) 
 - elif max is not None and val > max : 
 - print " Oops , the answer must be at most % d . Try again . \ n " % ( max , ) 
 - else : 
 - return val 
 - 
 - def get _ dc _ sizes _ interactive ( ) : 
 - print " Token Generator Interactive Mode " 
 - print " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " 
 - print 
 - dcs = readnum ( " How many datacenters will participate in this Cassandra cluster ? " , min = 1 ) 
 - sizes = [ ] 
 - for n in xrange ( dcs ) : 
 - sizes . append ( readnum ( " How many nodes are in datacenter # % d ? " % ( n + 1 ) , min = 0 ) ) 
 - print 
 - return sizes 
 - 
 - def main ( opts , args ) : 
 - opts . colorlist = [ s . strip ( ) for s in opts . test _ colors . split ( ' , ' ) ] 
 - if opts . test : 
 - opts . graph = True 
 - tokensets = run _ tests ( opts ) 
 - renderer = RingRenderer ( ringrange = opts . ringrange , graphsize = opts . test _ graphsize , 
 - colors = opts . colorlist ) 
 - else : 
 - if len ( args ) = = 0 : 
 - args = get _ dc _ sizes _ interactive ( ) 
 - try : 
 - datacenters = map ( int , args ) 
 - except ValueError , e : 
 - parser . error ( ' Arguments should be integers . ' ) 
 - renderer = RingRenderer ( ringrange = opts . ringrange , graphsize = opts . graphsize , 
 - colors = opts . colorlist ) 
 - tokens = calculate _ ideal _ tokens ( datacenters , opts . ringoffset , opts . ringrange , opts . strat ) 
 - print _ tokens ( tokens , len ( str ( opts . ringrange ) ) + 1 ) 
 - tokensets = [ tokens ] 
 - 
 - if opts . graph : 
 - html = renderer . make _ html ( tokensets ) 
 - write _ output ( html , opts ) 
 - return 0 
 - 
 - if _ _ name _ _ = = ' _ _ main _ _ ' : 
 - opts , args = parser . parse _ args ( ) 
 - try : 
 - res = main ( opts , args ) 
 - except KeyboardInterrupt : 
 - res = - 128 
 - sys . exit ( res ) 
 diff - - git a / tools / bin / token - generator . bat b / tools / bin / token - generator . bat 
 deleted file mode 100644 
 index a7188db . . 0000000 
 - - - a / tools / bin / token - generator . bat 
 + + + / dev / null 
 @ @ - 1 , 34 + 0 , 0 @ @ 
 - @ ECHO OFF 
 - @ REM 
 - @ REM Licensed to the Apache Software Foundation ( ASF ) under one or more 
 - @ REM contributor license agreements . See the NOTICE file distributed with 
 - @ REM this work for additional information regarding copyright ownership . 
 - @ REM The ASF licenses this file to You under the Apache License , Version 2 . 0 
 - @ REM ( the " License " ) ; you may not use this file except in compliance with 
 - @ REM the License . You may obtain a copy of the License at 
 - @ REM 
 - @ REM http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - @ REM 
 - @ REM Unless required by applicable law or agreed to in writing , software 
 - @ REM distributed under the License is distributed on an " AS IS " BASIS , 
 - @ REM WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - @ REM See the License for the specific language governing permissions and 
 - @ REM limitations under the License . 
 - 
 - @ echo off 
 - 
 - if " % OS % " = = " Windows _ NT " setlocal 
 - 
 - python - V > nul 2 > & 1 
 - if ERRORLEVEL 1 goto err 
 - 
 - python " % ~ dp0 \ token - generator " % * 
 - goto finally 
 - 
 - : err 
 - echo Can ' t detect Python version ! 
 - 
 - : finally 
 - 
 - ENDLOCAL 
 -

NEAREST DIFF:
diff - - git a / examples / pig / test / populate - cli . txt b / examples / pig / test / populate - cli . txt 
 index 7ec6cd6 . . 1f59642 100644 
 - - - a / examples / pig / test / populate - cli . txt 
 + + + b / examples / pig / test / populate - cli . txt 
 @ @ - 112 , 3 + 112 , 23 @ @ set CompoInt [ ' clock ' ] [ ' 1 : 0 ' ] = ' z ' ; 
 set CompoInt [ ' clock ' ] [ ' 1 : 30 ' ] = ' zzzz ' ; 
 set CompoInt [ ' clock ' ] [ ' 2 : 30 ' ] = ' daddy ? ' ; 
 set CompoInt [ ' clock ' ] [ ' 6 : 30 ' ] = ' coffee . . . ' ; 
 + 
 + create column family CompoIntCopy 
 + with key _ validation _ class = UTF8Type 
 + and default _ validation _ class = UTF8Type 
 + and comparator = ' CompositeType ( LongType , LongType ) ' ; 
 + 
 + create column family CompoKey 
 + with key _ validation _ class = ' CompositeType ( UTF8Type , LongType ) ' 
 + and default _ validation _ class = UTF8Type 
 + and comparator = LongType ; 
 + 
 + set CompoKey [ ' clock : 10 ' ] [ ' 1 ' ] = ' z ' ; 
 + set CompoKey [ ' clock : 20 ' ] [ ' 1 ' ] = ' zzzz ' ; 
 + set CompoKey [ ' clock : 30 ' ] [ ' 2 ' ] = ' daddy ? ' ; 
 + set CompoKey [ ' clock : 40 ' ] [ ' 6 ' ] = ' coffee . . . ' ; 
 + 
 + create column family CompoKeyCopy 
 + with key _ validation _ class = ' CompositeType ( UTF8Type , LongType ) ' 
 + and default _ validation _ class = UTF8Type 
 + and comparator = LongType ; 
 diff - - git a / examples / pig / test / test _ storage . pig b / examples / pig / test / test _ storage . pig 
 index a0157f7 . . 026cb02 100644 
 - - - a / examples / pig / test / test _ storage . pig 
 + + + b / examples / pig / test / test _ storage . pig 
 @ @ - 67 , 4 + 67 , 19 @ @ night = foreach night generate ( int ) columns : : name . $ 0 + ( double ) columns : : name . $ 1 / 60 
 - - What happens at the darkest hour ? 
 darkest = filter night by hour > 2 and hour < 5 ; 
 
 - dump darkest ; 
 \ No newline at end of file 
 + dump darkest ; 
 + 
 + compo _ int _ rows = LOAD ' cassandra : / / PigTest / CompoInt ' USING CassandraStorage ( ) ; 
 + STORE compo _ int _ rows INTO ' cassandra : / / PigTest / CompoIntCopy ' USING CassandraStorage ( ) ; 
 + 
 + - - 
 + - - Test CompositeKey 
 + - - 
 + 
 + compokeys = load ' cassandra : / / PigTest / CompoKey ' using CassandraStorage ( ) ; 
 + compokeys = filter compokeys by key . $ 1 = = 40 ; 
 + 
 + dump compokeys ; 
 + 
 + compo _ key _ rows = LOAD ' cassandra : / / PigTest / CompoKey ' USING CassandraStorage ( ) ; 
 + STORE compo _ key _ rows INTO ' cassandra : / / PigTest / CompoKeyCopy ' USING CassandraStorage ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java b / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java 
 index 5742cb9 . . 454330c 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java 
 + + + b / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java 
 @ @ - 131 , 7 + 131 , 7 @ @ public class CassandraStorage extends LoadFunc implements StoreFuncInterface , Lo 
 { 
 return limit ; 
 } 
 - 
 + 
 public Tuple getNextWide ( ) throws IOException 
 { 
 CfDef cfDef = getCfDef ( loadSignature ) ; 
 @ @ - 223 , 10 + 223 , 10 @ @ public class CassandraStorage extends LoadFunc implements StoreFuncInterface , Lo 
 
 / / output tuple , will hold the key , each indexed column in a tuple , then a bag of the rest 
 / / NOTE : we ' re setting the tuple size here only for the key so we can use setTupleValue on it 
 - Tuple tuple = TupleFactory . getInstance ( ) . newTuple ( 1 ) ; 
 + 
 + Tuple tuple = keyToTuple ( key , cfDef , parseType ( cfDef . getKey _ validation _ class ( ) ) ) ; 
 DefaultDataBag bag = new DefaultDataBag ( ) ; 
 - / / set the key 
 - setTupleValue ( tuple , 0 , getDefaultMarshallers ( cfDef ) . get ( 2 ) . compose ( key ) ) ; 
 + 
 / / we must add all the indexed columns first to match the schema 
 Map < ByteBuffer , Boolean > added = new HashMap < ByteBuffer , Boolean > ( ) ; 
 / / take care to iterate these in the same order as the schema does 
 @ @ - 283 , 6 + 283 , 20 @ @ public class CassandraStorage extends LoadFunc implements StoreFuncInterface , Lo 
 return t ; 
 } 
 
 + private Tuple keyToTuple ( ByteBuffer key , CfDef cfDef , AbstractType comparator ) throws IOException 
 + { 
 + Tuple tuple = TupleFactory . getInstance ( ) . newTuple ( 1 ) ; 
 + if ( comparator instanceof AbstractCompositeType ) 
 + { 
 + setTupleValue ( tuple , 0 , composeComposite ( ( AbstractCompositeType ) comparator , key ) ) ; 
 + } 
 + else 
 + { 
 + setTupleValue ( tuple , 0 , getDefaultMarshallers ( cfDef ) . get ( 2 ) . compose ( key ) ) ; 
 + } 
 + return tuple ; 
 + } 
 + 
 private Tuple columnToTuple ( IColumn col , CfDef cfDef , AbstractType comparator ) throws IOException 
 { 
 Tuple pair = TupleFactory . getInstance ( ) . newTuple ( 2 ) ; 
 @ @ - 825 , 6 + 839 , 28 @ @ public class CassandraStorage extends LoadFunc implements StoreFuncInterface , Lo 
 return DoubleType . instance . decompose ( ( Double ) o ) ; 
 if ( o instanceof UUID ) 
 return ByteBuffer . wrap ( UUIDGen . decompose ( ( UUID ) o ) ) ; 
 + if ( o instanceof Tuple ) { 
 + List < Object > objects = ( ( Tuple ) o ) . getAll ( ) ; 
 + List < ByteBuffer > serialized = new ArrayList < ByteBuffer > ( objects . size ( ) ) ; 
 + int totalLength = 0 ; 
 + for ( Object sub : objects ) 
 + { 
 + ByteBuffer buffer = objToBB ( sub ) ; 
 + serialized . add ( buffer ) ; 
 + totalLength + = 2 + buffer . remaining ( ) + 1 ; 
 + } 
 + ByteBuffer out = ByteBuffer . allocate ( totalLength ) ; 
 + for ( ByteBuffer bb : serialized ) 
 + { 
 + int length = bb . remaining ( ) ; 
 + out . put ( ( byte ) ( ( length > > 8 ) & 0xFF ) ) ; 
 + out . put ( ( byte ) ( length & 0xFF ) ) ; 
 + out . put ( bb ) ; 
 + out . put ( ( byte ) 0 ) ; 
 + } 
 + out . flip ( ) ; 
 + return out ; 
 + } 
 
 return ByteBuffer . wrap ( ( ( DataByteArray ) o ) . get ( ) ) ; 
 }
