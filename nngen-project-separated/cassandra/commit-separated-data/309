BLEU SCORE: 0.028465126651392333

TEST MSG: Dont throw IOExceptions in when opening sstables
GENERATED MSG: Optimize componentsFor method for compaction and startup time

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index ba35152 . . 5ccd5cd 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 15 <nl> + * Don ' t skip corrupted sstables on startup ( CASSANDRA - 13620 ) <nl> * Fix the merging of cells with different user type versions ( CASSANDRA - 13776 ) <nl> * Copy session properties on cqlsh . py do _ login ( CASSANDRA - 13640 ) <nl> * Potential AssertionError during ReadRepair of range tombstone and partition deletions ( CASSANDRA - 13719 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index f720330 . . 7251244 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 59 , 8 + 59 , 10 @ @ import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . index . SecondaryIndexManager ; <nl> import org . apache . cassandra . index . internal . CassandraIndex ; <nl> import org . apache . cassandra . index . transactions . UpdateTransaction ; <nl> + import org . apache . cassandra . io . FSError ; <nl> import org . apache . cassandra . io . FSWriteError ; <nl> import org . apache . cassandra . io . sstable . Component ; <nl> + import org . apache . cassandra . io . sstable . CorruptSSTableException ; <nl> import org . apache . cassandra . io . sstable . Descriptor ; <nl> import org . apache . cassandra . io . sstable . SSTableMultiWriter ; <nl> import org . apache . cassandra . io . sstable . format . * ; <nl> @ @ - 691 , 7 + 693 , 8 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> catch ( IOException e ) <nl> { <nl> - SSTableReader . logOpenException ( entry . getKey ( ) , e ) ; <nl> + FileUtils . handleCorruptSSTable ( new CorruptSSTableException ( e , entry . getKey ( ) . filenameFor ( Component . STATS ) ) ) ; <nl> + logger . error ( " Cannot read sstable { } ; other IO error , skipping table " , entry , e ) ; <nl> continue ; <nl> } <nl> <nl> @ @ - 718 , 9 + 721 , 22 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> reader = SSTableReader . open ( newDescriptor , entry . getValue ( ) , metadata ) ; <nl> } <nl> - catch ( IOException e ) <nl> + catch ( CorruptSSTableException ex ) <nl> + { <nl> + FileUtils . handleCorruptSSTable ( ex ) ; <nl> + logger . error ( " Corrupt sstable { } ; skipping table " , entry , ex ) ; <nl> + continue ; <nl> + } <nl> + catch ( FSError ex ) <nl> + { <nl> + FileUtils . handleFSError ( ex ) ; <nl> + logger . error ( " Cannot read sstable { } ; file system error , skipping table " , entry , ex ) ; <nl> + continue ; <nl> + } <nl> + catch ( IOException ex ) <nl> { <nl> - SSTableReader . logOpenException ( entry . getKey ( ) , e ) ; <nl> + FileUtils . handleCorruptSSTable ( new CorruptSSTableException ( ex , entry . getKey ( ) . filenameFor ( Component . DATA ) ) ) ; <nl> + logger . error ( " Cannot read sstable { } ; other IO error , skipping table " , entry , ex ) ; <nl> continue ; <nl> } <nl> newSSTables . add ( reader ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> index cd41b5b . . d56b3e7 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> @ @ - 446 , 7 + 446 , 16 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> assert ! descriptor . version . storeRows ( ) | | components . contains ( Component . STATS ) : " Stats component is missing for sstable " + descriptor ; <nl> <nl> EnumSet < MetadataType > types = EnumSet . of ( MetadataType . VALIDATION , MetadataType . STATS , MetadataType . HEADER ) ; <nl> - Map < MetadataType , MetadataComponent > sstableMetadata = descriptor . getMetadataSerializer ( ) . deserialize ( descriptor , types ) ; <nl> + <nl> + Map < MetadataType , MetadataComponent > sstableMetadata ; <nl> + try <nl> + { <nl> + sstableMetadata = descriptor . getMetadataSerializer ( ) . deserialize ( descriptor , types ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new CorruptSSTableException ( e , descriptor . filenameFor ( Component . STATS ) ) ; <nl> + } <nl> ValidationMetadata validationMetadata = ( ValidationMetadata ) sstableMetadata . get ( MetadataType . VALIDATION ) ; <nl> StatsMetadata statsMetadata = ( StatsMetadata ) sstableMetadata . get ( MetadataType . STATS ) ; <nl> SerializationHeader . Component header = ( SerializationHeader . Component ) sstableMetadata . get ( MetadataType . HEADER ) ; <nl> @ @ - 488 , 6 + 497 , 11 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> <nl> return sstable ; <nl> } <nl> + catch ( IOException e ) <nl> + { <nl> + sstable . selfRef ( ) . release ( ) ; <nl> + throw new CorruptSSTableException ( e , sstable . getFilename ( ) ) ; <nl> + } <nl> catch ( Throwable t ) <nl> { <nl> sstable . selfRef ( ) . release ( ) ; <nl> @ @ - 534 , 6 + 548 , 7 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> } <nl> catch ( IOException ex ) <nl> { <nl> + FileUtils . handleCorruptSSTable ( new CorruptSSTableException ( ex , entry . getKey ( ) . filenameFor ( Component . DATA ) ) ) ; <nl> logger . error ( " Cannot read sstable { } ; other IO error , skipping table " , entry , ex ) ; <nl> return ; <nl> } <nl> @ @ - 1177 , 7 + 1192 , 7 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> { <nl> if ( this . first . compareTo ( this . last ) > 0 ) <nl> { <nl> - throw new IllegalStateException ( String . format ( " SSTable first key % s > last key % s " , this . first , this . last ) ) ; <nl> + throw new CorruptSSTableException ( new IllegalStateException ( String . format ( " SSTable first key % s > last key % s " , this . first , this . last ) ) , getFilename ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / db / ScrubTest . java b / test / unit / org / apache / cassandra / db / ScrubTest . java <nl> index f97d9a9 . . 08336a1 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / ScrubTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / ScrubTest . java <nl> @ @ - 349 , 7 + 349 , 7 @ @ public class ScrubTest <nl> SSTableReader . open ( desc , cfs . metadata ) ; <nl> fail ( " SSTR validation should have caught the out - of - order rows " ) ; <nl> } <nl> - catch ( IllegalStateException ise ) <nl> + catch ( CorruptSSTableException ise ) <nl> { / * this is expected * / } <nl> <nl> / / open without validation for scrubbing
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 528e538 . . 470a5b2 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> 1 . 1 - dev <nl> * " defragment " rows for name - based queries under STCS , again ( CASSANDRA - 2503 ) <nl> - * Recycle commitlog segments for improved performance ( CASSANDRA - 3411 ) <nl> + * Recycle commitlog segments for improved performance ( CASSANDRA - 3411 , 3543 ) <nl> * update size - tiered compaction to prioritize small tiers ( CASSANDRA - 2407 ) <nl> * add message expiration logic to OutboundTcpConnection ( CASSANDRA - 3005 ) <nl> * off - heap cache to use sun . misc . Unsafe instead of JNA ( CASSANDRA - 3271 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> index f4a469f . . 782e0c2 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> @ @ - 130 , 19 + 130 , 23 @ @ public class CommitLog implements CommitLogMBean <nl> } <nl> } ) ; <nl> <nl> + int replayed = 0 ; <nl> if ( files . length = = 0 ) <nl> { <nl> logger . info ( " No commitlog files found ; skipping replay " ) ; <nl> - return 0 ; <nl> } <nl> - <nl> - Arrays . sort ( files , new FileUtils . FileComparator ( ) ) ; <nl> - logger . info ( " Replaying " + StringUtils . join ( files , " , " ) ) ; <nl> - int replayed = recover ( files ) ; <nl> - logger . info ( " Log replay complete , " + replayed + " replayed mutations " ) ; <nl> + else <nl> + { <nl> + Arrays . sort ( files , new FileUtils . FileComparator ( ) ) ; <nl> + logger . info ( " Replaying " + StringUtils . join ( files , " , " ) ) ; <nl> + replayed = recover ( files ) ; <nl> + logger . info ( " Log replay complete , " + replayed + " replayed mutations " ) ; <nl> + <nl> + for ( File f : files ) <nl> + CommitLog . instance . allocator . recycleSegment ( f ) ; <nl> + } <nl> <nl> - for ( File f : files ) <nl> - CommitLog . instance . allocator . recycleSegment ( f ) ; <nl> + allocator . enableReserveSegmentCreation ( ) ; <nl> return replayed ; <nl> } <nl> <nl> @ @ - 348 , 8 + 352 , 6 @ @ public class CommitLog implements CommitLogMBean <nl> futures . addAll ( table . flush ( ) ) ; <nl> FBUtilities . waitOnFutures ( futures ) ; <nl> <nl> - allocator . enableReserveSegmentCreation ( ) ; <nl> - <nl> return replayedCount . get ( ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index ba35152 . . 5ccd5cd 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 15 
 + * Don ' t skip corrupted sstables on startup ( CASSANDRA - 13620 ) 
 * Fix the merging of cells with different user type versions ( CASSANDRA - 13776 ) 
 * Copy session properties on cqlsh . py do _ login ( CASSANDRA - 13640 ) 
 * Potential AssertionError during ReadRepair of range tombstone and partition deletions ( CASSANDRA - 13719 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index f720330 . . 7251244 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 59 , 8 + 59 , 10 @ @ import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . index . SecondaryIndexManager ; 
 import org . apache . cassandra . index . internal . CassandraIndex ; 
 import org . apache . cassandra . index . transactions . UpdateTransaction ; 
 + import org . apache . cassandra . io . FSError ; 
 import org . apache . cassandra . io . FSWriteError ; 
 import org . apache . cassandra . io . sstable . Component ; 
 + import org . apache . cassandra . io . sstable . CorruptSSTableException ; 
 import org . apache . cassandra . io . sstable . Descriptor ; 
 import org . apache . cassandra . io . sstable . SSTableMultiWriter ; 
 import org . apache . cassandra . io . sstable . format . * ; 
 @ @ - 691 , 7 + 693 , 8 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 catch ( IOException e ) 
 { 
 - SSTableReader . logOpenException ( entry . getKey ( ) , e ) ; 
 + FileUtils . handleCorruptSSTable ( new CorruptSSTableException ( e , entry . getKey ( ) . filenameFor ( Component . STATS ) ) ) ; 
 + logger . error ( " Cannot read sstable { } ; other IO error , skipping table " , entry , e ) ; 
 continue ; 
 } 
 
 @ @ - 718 , 9 + 721 , 22 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 reader = SSTableReader . open ( newDescriptor , entry . getValue ( ) , metadata ) ; 
 } 
 - catch ( IOException e ) 
 + catch ( CorruptSSTableException ex ) 
 + { 
 + FileUtils . handleCorruptSSTable ( ex ) ; 
 + logger . error ( " Corrupt sstable { } ; skipping table " , entry , ex ) ; 
 + continue ; 
 + } 
 + catch ( FSError ex ) 
 + { 
 + FileUtils . handleFSError ( ex ) ; 
 + logger . error ( " Cannot read sstable { } ; file system error , skipping table " , entry , ex ) ; 
 + continue ; 
 + } 
 + catch ( IOException ex ) 
 { 
 - SSTableReader . logOpenException ( entry . getKey ( ) , e ) ; 
 + FileUtils . handleCorruptSSTable ( new CorruptSSTableException ( ex , entry . getKey ( ) . filenameFor ( Component . DATA ) ) ) ; 
 + logger . error ( " Cannot read sstable { } ; other IO error , skipping table " , entry , ex ) ; 
 continue ; 
 } 
 newSSTables . add ( reader ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 index cd41b5b . . d56b3e7 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 @ @ - 446 , 7 + 446 , 16 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 assert ! descriptor . version . storeRows ( ) | | components . contains ( Component . STATS ) : " Stats component is missing for sstable " + descriptor ; 
 
 EnumSet < MetadataType > types = EnumSet . of ( MetadataType . VALIDATION , MetadataType . STATS , MetadataType . HEADER ) ; 
 - Map < MetadataType , MetadataComponent > sstableMetadata = descriptor . getMetadataSerializer ( ) . deserialize ( descriptor , types ) ; 
 + 
 + Map < MetadataType , MetadataComponent > sstableMetadata ; 
 + try 
 + { 
 + sstableMetadata = descriptor . getMetadataSerializer ( ) . deserialize ( descriptor , types ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new CorruptSSTableException ( e , descriptor . filenameFor ( Component . STATS ) ) ; 
 + } 
 ValidationMetadata validationMetadata = ( ValidationMetadata ) sstableMetadata . get ( MetadataType . VALIDATION ) ; 
 StatsMetadata statsMetadata = ( StatsMetadata ) sstableMetadata . get ( MetadataType . STATS ) ; 
 SerializationHeader . Component header = ( SerializationHeader . Component ) sstableMetadata . get ( MetadataType . HEADER ) ; 
 @ @ - 488 , 6 + 497 , 11 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 
 return sstable ; 
 } 
 + catch ( IOException e ) 
 + { 
 + sstable . selfRef ( ) . release ( ) ; 
 + throw new CorruptSSTableException ( e , sstable . getFilename ( ) ) ; 
 + } 
 catch ( Throwable t ) 
 { 
 sstable . selfRef ( ) . release ( ) ; 
 @ @ - 534 , 6 + 548 , 7 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 } 
 catch ( IOException ex ) 
 { 
 + FileUtils . handleCorruptSSTable ( new CorruptSSTableException ( ex , entry . getKey ( ) . filenameFor ( Component . DATA ) ) ) ; 
 logger . error ( " Cannot read sstable { } ; other IO error , skipping table " , entry , ex ) ; 
 return ; 
 } 
 @ @ - 1177 , 7 + 1192 , 7 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 { 
 if ( this . first . compareTo ( this . last ) > 0 ) 
 { 
 - throw new IllegalStateException ( String . format ( " SSTable first key % s > last key % s " , this . first , this . last ) ) ; 
 + throw new CorruptSSTableException ( new IllegalStateException ( String . format ( " SSTable first key % s > last key % s " , this . first , this . last ) ) , getFilename ( ) ) ; 
 } 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / db / ScrubTest . java b / test / unit / org / apache / cassandra / db / ScrubTest . java 
 index f97d9a9 . . 08336a1 100644 
 - - - a / test / unit / org / apache / cassandra / db / ScrubTest . java 
 + + + b / test / unit / org / apache / cassandra / db / ScrubTest . java 
 @ @ - 349 , 7 + 349 , 7 @ @ public class ScrubTest 
 SSTableReader . open ( desc , cfs . metadata ) ; 
 fail ( " SSTR validation should have caught the out - of - order rows " ) ; 
 } 
 - catch ( IllegalStateException ise ) 
 + catch ( CorruptSSTableException ise ) 
 { / * this is expected * / } 
 
 / / open without validation for scrubbing

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 528e538 . . 470a5b2 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 1 . 1 - dev 
 * " defragment " rows for name - based queries under STCS , again ( CASSANDRA - 2503 ) 
 - * Recycle commitlog segments for improved performance ( CASSANDRA - 3411 ) 
 + * Recycle commitlog segments for improved performance ( CASSANDRA - 3411 , 3543 ) 
 * update size - tiered compaction to prioritize small tiers ( CASSANDRA - 2407 ) 
 * add message expiration logic to OutboundTcpConnection ( CASSANDRA - 3005 ) 
 * off - heap cache to use sun . misc . Unsafe instead of JNA ( CASSANDRA - 3271 ) 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 index f4a469f . . 782e0c2 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 @ @ - 130 , 19 + 130 , 23 @ @ public class CommitLog implements CommitLogMBean 
 } 
 } ) ; 
 
 + int replayed = 0 ; 
 if ( files . length = = 0 ) 
 { 
 logger . info ( " No commitlog files found ; skipping replay " ) ; 
 - return 0 ; 
 } 
 - 
 - Arrays . sort ( files , new FileUtils . FileComparator ( ) ) ; 
 - logger . info ( " Replaying " + StringUtils . join ( files , " , " ) ) ; 
 - int replayed = recover ( files ) ; 
 - logger . info ( " Log replay complete , " + replayed + " replayed mutations " ) ; 
 + else 
 + { 
 + Arrays . sort ( files , new FileUtils . FileComparator ( ) ) ; 
 + logger . info ( " Replaying " + StringUtils . join ( files , " , " ) ) ; 
 + replayed = recover ( files ) ; 
 + logger . info ( " Log replay complete , " + replayed + " replayed mutations " ) ; 
 + 
 + for ( File f : files ) 
 + CommitLog . instance . allocator . recycleSegment ( f ) ; 
 + } 
 
 - for ( File f : files ) 
 - CommitLog . instance . allocator . recycleSegment ( f ) ; 
 + allocator . enableReserveSegmentCreation ( ) ; 
 return replayed ; 
 } 
 
 @ @ - 348 , 8 + 352 , 6 @ @ public class CommitLog implements CommitLogMBean 
 futures . addAll ( table . flush ( ) ) ; 
 FBUtilities . waitOnFutures ( futures ) ; 
 
 - allocator . enableReserveSegmentCreation ( ) ; 
 - 
 return replayedCount . get ( ) ; 
 } 

