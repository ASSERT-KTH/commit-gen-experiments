BLEU SCORE: 0.09688464563433238

TEST MSG: Expose global CF metrics
GENERATED MSG: Track metrics at a keyspace level

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d84f267 . . f837515 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 2 . 17 <nl> + * Expose global ColmunFamily metrics ( CASSANDRA - 7273 ) <nl> * Handle possible integer overflow in FastByteArrayOutputStream ( CASSANDRA - 7373 ) <nl> * cqlsh : ' ascii ' values weren ' t formatted as text ( CASSANDRA - 7407 ) <nl> * cqlsh : ignore . cassandra permission errors ( CASSANDRA - 7266 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 1100fb9 . . c003f45 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1916 , 12 + 1916 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> public double getTombstonesPerSlice ( ) <nl> { <nl> - return metric . tombstoneScannedHistogram . getSnapshot ( ) . getMedian ( ) ; <nl> + return metric . tombstoneScannedHistogram . cf . getSnapshot ( ) . getMedian ( ) ; <nl> } <nl> <nl> public double getLiveCellsPerSlice ( ) <nl> { <nl> - return metric . liveScannedHistogram . getSnapshot ( ) . getMedian ( ) ; <nl> + return metric . liveScannedHistogram . cf . getSnapshot ( ) . getMedian ( ) ; <nl> } <nl> <nl> / / End JMX get / set . <nl> diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java <nl> index 611fd9a . . 939f800 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Table . java <nl> + + + b / src / java / org / apache / cassandra / db / Table . java <nl> @ @ - 269 , 12 + 269 , 12 @ @ public class Table <nl> for ( int i = 0 ; i < indexLocks . length ; i + + ) <nl> indexLocks [ i ] = new Object ( ) ; <nl> <nl> + this . metric = new KeyspaceMetrics ( this ) ; <nl> for ( CFMetaData cfm : new ArrayList < CFMetaData > ( Schema . instance . getTableDefinition ( table ) . cfMetaData ( ) . values ( ) ) ) <nl> { <nl> logger . debug ( " Initializing { } . { } " , name , cfm . cfName ) ; <nl> initCf ( cfm . cfId , cfm . cfName , loadSSTables ) ; <nl> } <nl> - this . metric = new KeyspaceMetrics ( this ) ; <nl> } <nl> <nl> public void createReplicationStrategy ( KSMetaData ksm ) <nl> diff - - git a / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java b / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java <nl> index a665365 . . ed3b6f9 100644 <nl> - - - a / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java <nl> + + + b / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java <nl> @ @ - 17 , 11 + 17 , 14 @ @ <nl> * / <nl> package org . apache . cassandra . metrics ; <nl> <nl> + import java . util . HashSet ; <nl> + import java . util . Set ; <nl> + import java . util . concurrent . ConcurrentMap ; <nl> + <nl> + import com . google . common . collect . Maps ; <nl> + import com . google . common . collect . Sets ; <nl> import com . yammer . metrics . Metrics ; <nl> - import com . yammer . metrics . core . Counter ; <nl> - import com . yammer . metrics . core . Gauge ; <nl> - import com . yammer . metrics . core . Histogram ; <nl> - import com . yammer . metrics . core . MetricName ; <nl> + import com . yammer . metrics . core . * ; <nl> import com . yammer . metrics . util . RatioGauge ; <nl> <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> @ @ - 48 , 7 + 51 , 7 @ @ public class ColumnFamilyMetrics <nl> / * * Histogram of estimated number of columns . * / <nl> public final Gauge < long [ ] > estimatedColumnCountHistogram ; <nl> / * * Histogram of the number of sstable data files accessed per read * / <nl> - public final Histogram sstablesPerReadHistogram ; <nl> + public final ColumnFamilyHistogram sstablesPerReadHistogram ; <nl> / * * Read metrics * / <nl> public final LatencyMetrics readLatency ; <nl> / * * Write metrics * / <nl> @ @ - 80 , 16 + 83 , 31 @ @ public class ColumnFamilyMetrics <nl> / * * Key cache hit rate for this CF * / <nl> public final Gauge < Double > keyCacheHitRate ; <nl> / * * Tombstones scanned in queries on this CF * / <nl> - public final Histogram tombstoneScannedHistogram ; <nl> + public final ColumnFamilyHistogram tombstoneScannedHistogram ; <nl> / * * Live cells scanned in queries on this CF * / <nl> - public final Histogram liveScannedHistogram ; <nl> + public final ColumnFamilyHistogram liveScannedHistogram ; <nl> <nl> private final MetricNameFactory factory ; <nl> + private static final MetricNameFactory globalNameFactory = new AllColumnFamilyMetricNameFactory ( ) ; ; <nl> <nl> / / for backward compatibility <nl> @ Deprecated public final EstimatedHistogram sstablesPerRead = new EstimatedHistogram ( 35 ) ; <nl> @ Deprecated public final EstimatedHistogram recentSSTablesPerRead = new EstimatedHistogram ( 35 ) ; <nl> - <nl> + <nl> + public final static LatencyMetrics globalReadLatency = new LatencyMetrics ( globalNameFactory , " Read " ) ; <nl> + public final static LatencyMetrics globalWriteLatency = new LatencyMetrics ( globalNameFactory , " Write " ) ; <nl> + public final static LatencyMetrics globalRangeLatency = new LatencyMetrics ( globalNameFactory , " Range " ) ; <nl> + <nl> + / * * <nl> + * stores metrics that will be rolled into a single global metric <nl> + * / <nl> + public final static ConcurrentMap < String , Set < Metric > > allColumnFamilyMetrics = Maps . newConcurrentMap ( ) ; <nl> + <nl> + / * * <nl> + * Stores all metric names created that can be used when unregistering <nl> + * / <nl> + public final static Set < String > all = Sets . newHashSet ( ) ; <nl> + <nl> / * * <nl> * Creates metrics for given { @ link ColumnFamilyStore } . <nl> * <nl> @ @ - 99 , 21 + 117 , 21 @ @ public class ColumnFamilyMetrics <nl> { <nl> factory = new ColumnFamilyMetricNameFactory ( cfs ) ; <nl> <nl> - memtableColumnsCount = Metrics . newGauge ( factory . createMetricName ( " MemtableColumnsCount " ) , new Gauge < Long > ( ) <nl> + memtableColumnsCount = createColumnFamilyGauge ( " MemtableColumnsCount " , new Gauge < Long > ( ) <nl> { <nl> public Long value ( ) <nl> { <nl> return cfs . getDataTracker ( ) . getMemtable ( ) . getOperations ( ) ; <nl> } <nl> } ) ; <nl> - memtableDataSize = Metrics . newGauge ( factory . createMetricName ( " MemtableDataSize " ) , new Gauge < Long > ( ) <nl> + memtableDataSize = createColumnFamilyGauge ( " MemtableDataSize " , new Gauge < Long > ( ) <nl> { <nl> public Long value ( ) <nl> { <nl> return cfs . getDataTracker ( ) . getMemtable ( ) . getLiveSize ( ) ; <nl> } <nl> } ) ; <nl> - memtableSwitchCount = Metrics . newCounter ( factory . createMetricName ( " MemtableSwitchCount " ) ) ; <nl> + memtableSwitchCount = createColumnFamilyCounter ( " MemtableSwitchCount " ) ; <nl> estimatedRowSizeHistogram = Metrics . newGauge ( factory . createMetricName ( " EstimatedRowSizeHistogram " ) , new Gauge < long [ ] > ( ) <nl> { <nl> public long [ ] value ( ) <nl> @ @ - 142 , 8 + 160 , 8 @ @ public class ColumnFamilyMetrics <nl> return histogram ; <nl> } <nl> } ) ; <nl> - sstablesPerReadHistogram = Metrics . newHistogram ( factory . createMetricName ( " SSTablesPerReadHistogram " ) , true ) ; <nl> - compressionRatio = Metrics . newGauge ( factory . createMetricName ( " CompressionRatio " ) , new Gauge < Double > ( ) <nl> + sstablesPerReadHistogram = createColumnFamilyHistogram ( " SSTablesPerReadHistogram " , cfs . table . metric . sstablesPerReadHistogram ) ; <nl> + compressionRatio = createColumnFamilyGauge ( " CompressionRatio " , new Gauge < Double > ( ) <nl> { <nl> public Double value ( ) <nl> { <nl> @ @ - 157 , 11 + 175 , 30 @ @ public class ColumnFamilyMetrics <nl> total + + ; <nl> } <nl> } <nl> - return total ! = 0 ? ( double ) sum / total : 0 ; <nl> + return total ! = 0 ? sum / total : 0 ; <nl> + } <nl> + } , new Gauge < Double > ( ) / / global gauge <nl> + { <nl> + public Double value ( ) <nl> + { <nl> + double sum = 0 ; <nl> + int total = 0 ; <nl> + for ( Table keyspace : Table . all ( ) ) <nl> + { <nl> + for ( SSTableReader sstable : keyspace . getAllSSTables ( ) ) <nl> + { <nl> + if ( sstable . getCompressionRatio ( ) ! = SSTableMetadata . NO _ COMPRESSION _ RATIO ) <nl> + { <nl> + sum + = sstable . getCompressionRatio ( ) ; <nl> + total + + ; <nl> + } <nl> + } <nl> + } <nl> + return total ! = 0 ? sum / total : 0 ; <nl> } <nl> } ) ; <nl> - readLatency = new LatencyMetrics ( factory , " Read " ) ; <nl> - writeLatency = new LatencyMetrics ( factory , " Write " ) ; <nl> + readLatency = new LatencyMetrics ( factory , " Read " , cfs . table . metric . readLatency , globalReadLatency ) ; <nl> + writeLatency = new LatencyMetrics ( factory , " Write " , cfs . table . metric . writeLatency , globalWriteLatency ) ; <nl> pendingTasks = Metrics . newGauge ( factory . createMetricName ( " PendingTasks " ) , new Gauge < Integer > ( ) <nl> { <nl> public Integer value ( ) <nl> @ @ - 170 , 16 + 207 , 16 @ @ public class ColumnFamilyMetrics <nl> return Table . switchLock . getQueueLength ( ) ; <nl> } <nl> } ) ; <nl> - liveSSTableCount = Metrics . newGauge ( factory . createMetricName ( " LiveSSTableCount " ) , new Gauge < Integer > ( ) <nl> + liveSSTableCount = createColumnFamilyGauge ( " LiveSSTableCount " , new Gauge < Integer > ( ) <nl> { <nl> public Integer value ( ) <nl> { <nl> return cfs . getDataTracker ( ) . getSSTables ( ) . size ( ) ; <nl> } <nl> } ) ; <nl> - liveDiskSpaceUsed = Metrics . newCounter ( factory . createMetricName ( " LiveDiskSpaceUsed " ) ) ; <nl> - totalDiskSpaceUsed = Metrics . newCounter ( factory . createMetricName ( " TotalDiskSpaceUsed " ) ) ; <nl> - minRowSize = Metrics . newGauge ( factory . createMetricName ( " MinRowSize " ) , new Gauge < Long > ( ) <nl> + liveDiskSpaceUsed = createColumnFamilyCounter ( " LiveDiskSpaceUsed " ) ; <nl> + totalDiskSpaceUsed = createColumnFamilyCounter ( " TotalDiskSpaceUsed " ) ; <nl> + minRowSize = createColumnFamilyGauge ( " MinRowSize " , new Gauge < Long > ( ) <nl> { <nl> public Long value ( ) <nl> { <nl> @ @ - 191 , 8 + 228 , 19 @ @ public class ColumnFamilyMetrics <nl> } <nl> return min ; <nl> } <nl> + } , new Gauge < Long > ( ) / / global gauge <nl> + { <nl> + public Long value ( ) <nl> + { <nl> + long min = Long . MAX _ VALUE ; <nl> + for ( Metric cfGauge : allColumnFamilyMetrics . get ( " MinRowSize " ) ) <nl> + { <nl> + min = Math . min ( min , ( ( Gauge < ? extends Number > ) cfGauge ) . value ( ) . longValue ( ) ) ; <nl> + } <nl> + return min ; <nl> + } <nl> } ) ; <nl> - maxRowSize = Metrics . newGauge ( factory . createMetricName ( " MaxRowSize " ) , new Gauge < Long > ( ) <nl> + maxRowSize = createColumnFamilyGauge ( " MaxRowSize " , new Gauge < Long > ( ) <nl> { <nl> public Long value ( ) <nl> { <nl> @ @ - 204 , 8 + 252 , 19 @ @ public class ColumnFamilyMetrics <nl> } <nl> return max ; <nl> } <nl> + } , new Gauge < Long > ( ) / / global gauge <nl> + { <nl> + public Long value ( ) <nl> + { <nl> + long max = 0 ; <nl> + for ( Metric cfGauge : allColumnFamilyMetrics . get ( " MaxRowSize " ) ) <nl> + { <nl> + max = Math . max ( max , ( ( Gauge < ? extends Number > ) cfGauge ) . value ( ) . longValue ( ) ) ; <nl> + } <nl> + return max ; <nl> + } <nl> } ) ; <nl> - meanRowSize = Metrics . newGauge ( factory . createMetricName ( " MeanRowSize " ) , new Gauge < Long > ( ) <nl> + meanRowSize = createColumnFamilyGauge ( " MeanRowSize " , new Gauge < Long > ( ) <nl> { <nl> public Long value ( ) <nl> { <nl> @ @ - 219 , 8 + 278 , 25 @ @ public class ColumnFamilyMetrics <nl> } <nl> return count > 0 ? sum / count : 0 ; <nl> } <nl> + } , new Gauge < Long > ( ) / / global gauge <nl> + { <nl> + public Long value ( ) <nl> + { <nl> + long sum = 0 ; <nl> + long count = 0 ; <nl> + for ( Table keyspace : Table . all ( ) ) <nl> + { <nl> + for ( SSTableReader sstable : keyspace . getAllSSTables ( ) ) <nl> + { <nl> + long n = sstable . getEstimatedRowSize ( ) . count ( ) ; <nl> + sum + = sstable . getEstimatedRowSize ( ) . mean ( ) * n ; <nl> + count + = n ; <nl> + } <nl> + } <nl> + return count > 0 ? sum / count : 0 ; <nl> + } <nl> } ) ; <nl> - bloomFilterFalsePositives = Metrics . newGauge ( factory . createMetricName ( " BloomFilterFalsePositives " ) , new Gauge < Long > ( ) <nl> + bloomFilterFalsePositives = createColumnFamilyGauge ( " BloomFilterFalsePositives " , new Gauge < Long > ( ) <nl> { <nl> public Long value ( ) <nl> { <nl> @ @ - 230 , 23 + 306 , 23 @ @ public class ColumnFamilyMetrics <nl> return count ; <nl> } <nl> } ) ; <nl> - recentBloomFilterFalsePositives = Metrics . newGauge ( factory . createMetricName ( " RecentBloomFilterFalsePositives " ) , new Gauge < Long > ( ) <nl> + recentBloomFilterFalsePositives = createColumnFamilyGauge ( " RecentBloomFilterFalsePositives " , new Gauge < Long > ( ) <nl> { <nl> public Long value ( ) <nl> { <nl> long count = 0L ; <nl> - for ( SSTableReader sstable : cfs . getSSTables ( ) ) <nl> + for ( SSTableReader sstable : cfs . getSSTables ( ) ) <nl> count + = sstable . getRecentBloomFilterFalsePositiveCount ( ) ; <nl> return count ; <nl> } <nl> } ) ; <nl> - bloomFilterFalseRatio = Metrics . newGauge ( factory . createMetricName ( " BloomFilterFalseRatio " ) , new Gauge < Double > ( ) <nl> + bloomFilterFalseRatio = createColumnFamilyGauge ( " BloomFilterFalseRatio " , new Gauge < Double > ( ) <nl> { <nl> public Double value ( ) <nl> { <nl> long falseCount = 0L ; <nl> long trueCount = 0L ; <nl> - for ( SSTableReader sstable : cfs . getSSTables ( ) ) <nl> + for ( SSTableReader sstable : cfs . getSSTables ( ) ) <nl> { <nl> falseCount + = sstable . getBloomFilterFalsePositiveCount ( ) ; <nl> trueCount + = sstable . getBloomFilterTruePositiveCount ( ) ; <nl> @ @ - 255 , 8 + 331 , 26 @ @ public class ColumnFamilyMetrics <nl> return 0d ; <nl> return ( double ) falseCount / ( trueCount + falseCount ) ; <nl> } <nl> + } , new Gauge < Double > ( ) / / global gauge <nl> + { <nl> + public Double value ( ) <nl> + { <nl> + long falseCount = 0L ; <nl> + long trueCount = 0L ; <nl> + for ( Table keyspace : Table . all ( ) ) <nl> + { <nl> + for ( SSTableReader sstable : keyspace . getAllSSTables ( ) ) <nl> + { <nl> + falseCount + = sstable . getBloomFilterFalsePositiveCount ( ) ; <nl> + trueCount + = sstable . getBloomFilterTruePositiveCount ( ) ; <nl> + } <nl> + } <nl> + if ( falseCount = = 0L & & trueCount = = 0L ) <nl> + return 0d ; <nl> + return ( double ) falseCount / ( trueCount + falseCount ) ; <nl> + } <nl> } ) ; <nl> - recentBloomFilterFalseRatio = Metrics . newGauge ( factory . createMetricName ( " RecentBloomFilterFalseRatio " ) , new Gauge < Double > ( ) <nl> + recentBloomFilterFalseRatio = createColumnFamilyGauge ( " RecentBloomFilterFalseRatio " , new Gauge < Double > ( ) <nl> { <nl> public Double value ( ) <nl> { <nl> @ @ - 271 , 8 + 365 , 26 @ @ public class ColumnFamilyMetrics <nl> return 0d ; <nl> return ( double ) falseCount / ( trueCount + falseCount ) ; <nl> } <nl> + } , new Gauge < Double > ( ) / / global gauge <nl> + { <nl> + public Double value ( ) <nl> + { <nl> + long falseCount = 0L ; <nl> + long trueCount = 0L ; <nl> + for ( Table keyspace : Table . all ( ) ) <nl> + { <nl> + for ( SSTableReader sstable : keyspace . getAllSSTables ( ) ) <nl> + { <nl> + falseCount + = sstable . getRecentBloomFilterFalsePositiveCount ( ) ; <nl> + trueCount + = sstable . getRecentBloomFilterTruePositiveCount ( ) ; <nl> + } <nl> + } <nl> + if ( falseCount = = 0L & & trueCount = = 0L ) <nl> + return 0d ; <nl> + return ( double ) falseCount / ( trueCount + falseCount ) ; <nl> + } <nl> } ) ; <nl> - bloomFilterDiskSpaceUsed = Metrics . newGauge ( factory . createMetricName ( " BloomFilterDiskSpaceUsed " ) , new Gauge < Long > ( ) <nl> + bloomFilterDiskSpaceUsed = createColumnFamilyGauge ( " BloomFilterDiskSpaceUsed " , new Gauge < Long > ( ) <nl> { <nl> public Long value ( ) <nl> { <nl> @ @ - 300 , 8 + 412 , 8 @ @ public class ColumnFamilyMetrics <nl> return Math . max ( requests , 1 ) ; / / to avoid NaN . <nl> } <nl> } ) ; <nl> - tombstoneScannedHistogram = Metrics . newHistogram ( factory . createMetricName ( " TombstoneScannedHistogram " ) , true ) ; <nl> - liveScannedHistogram = Metrics . newHistogram ( factory . createMetricName ( " LiveScannedHistogram " ) , true ) ; <nl> + tombstoneScannedHistogram = createColumnFamilyHistogram ( " TombstoneScannedHistogram " , cfs . table . metric . tombstoneScannedHistogram ) ; <nl> + liveScannedHistogram = createColumnFamilyHistogram ( " LiveScannedHistogram " , cfs . table . metric . liveScannedHistogram ) ; <nl> } <nl> <nl> public void updateSSTableIterated ( int count ) <nl> @ @ - 316 , 32 + 428 , 121 @ @ public class ColumnFamilyMetrics <nl> * / <nl> public void release ( ) <nl> { <nl> + for ( String name : all ) <nl> + { <nl> + allColumnFamilyMetrics . get ( name ) . remove ( Metrics . defaultRegistry ( ) . allMetrics ( ) . get ( factory . createMetricName ( name ) ) ) ; <nl> + Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( name ) ) ; <nl> + } <nl> readLatency . release ( ) ; <nl> writeLatency . release ( ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " MemtableColumnsCount " ) ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " MemtableDataSize " ) ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " MemtableSwitchCount " ) ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " CompressionRatio " ) ) ; <nl> Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " EstimatedRowSizeHistogram " ) ) ; <nl> Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " EstimatedColumnCountHistogram " ) ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " SSTablesPerReadHistogram " ) ) ; <nl> Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " PendingTasks " ) ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " LiveSSTableCount " ) ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " LiveDiskSpaceUsed " ) ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " TotalDiskSpaceUsed " ) ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " MinRowSize " ) ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " MaxRowSize " ) ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " MeanRowSize " ) ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " BloomFilterFalsePositives " ) ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " RecentBloomFilterFalsePositives " ) ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " BloomFilterFalseRatio " ) ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " RecentBloomFilterFalseRatio " ) ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " BloomFilterDiskSpaceUsed " ) ) ; <nl> Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " KeyCacheHitRate " ) ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " TombstoneScannedHistogram " ) ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " LiveScannedHistogram " ) ) ; <nl> } <nl> <nl> + <nl> + / * * <nl> + * Create a gauge that will be part of a merged version of all column families . The global gauge <nl> + * will merge each CF gauge by adding their values <nl> + * / <nl> + protected < T extends Number > Gauge < T > createColumnFamilyGauge ( final String name , Gauge < T > gauge ) <nl> + { <nl> + return createColumnFamilyGauge ( name , gauge , new Gauge < Long > ( ) <nl> + { <nl> + public Long value ( ) <nl> + { <nl> + long total = 0 ; <nl> + for ( Metric cfGauge : allColumnFamilyMetrics . get ( name ) ) <nl> + { <nl> + total = total + ( ( Gauge < ? extends Number > ) cfGauge ) . value ( ) . longValue ( ) ; <nl> + } <nl> + return total ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Create a gauge that will be part of a merged version of all column families . The global gauge <nl> + * is defined as the globalGauge parameter <nl> + * / <nl> + protected < G , T > Gauge < T > createColumnFamilyGauge ( String name , Gauge < T > gauge , Gauge < G > globalGauge ) <nl> + { <nl> + Gauge < T > cfGauge = Metrics . newGauge ( factory . createMetricName ( name ) , gauge ) ; <nl> + if ( register ( name , cfGauge ) ) <nl> + { <nl> + Metrics . newGauge ( globalNameFactory . createMetricName ( name ) , globalGauge ) ; <nl> + } <nl> + return cfGauge ; <nl> + } <nl> + <nl> + / * * <nl> + * Creates a counter that will also have a global counter thats the sum of all counters across <nl> + * different column families <nl> + * / <nl> + protected Counter createColumnFamilyCounter ( final String name ) <nl> + { <nl> + Counter cfCounter = Metrics . newCounter ( factory . createMetricName ( name ) ) ; <nl> + if ( register ( name , cfCounter ) ) <nl> + { <nl> + Metrics . newGauge ( globalNameFactory . createMetricName ( name ) , new Gauge < Long > ( ) <nl> + { <nl> + public Long value ( ) <nl> + { <nl> + long total = 0 ; <nl> + for ( Metric cfGauge : allColumnFamilyMetrics . get ( name ) ) <nl> + { <nl> + total + = ( ( Counter ) cfGauge ) . count ( ) ; <nl> + } <nl> + return total ; <nl> + } <nl> + } ) ; <nl> + } <nl> + return cfCounter ; <nl> + } <nl> + <nl> + / * * <nl> + * Create a histogram - like interface that will register both a CF , keyspace and global level <nl> + * histogram and forward any updates to both <nl> + * / <nl> + protected ColumnFamilyHistogram createColumnFamilyHistogram ( String name , Histogram keyspaceHistogram ) <nl> + { <nl> + Histogram cfHistogram = Metrics . newHistogram ( factory . createMetricName ( name ) , true ) ; <nl> + register ( name , cfHistogram ) ; <nl> + return new ColumnFamilyHistogram ( cfHistogram , keyspaceHistogram , Metrics . newHistogram ( globalNameFactory . createMetricName ( name ) , true ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Registers a metric to be removed when unloading CF . <nl> + * @ return true if first time metric with that name has been registered <nl> + * / <nl> + private boolean register ( String name , Metric metric ) <nl> + { <nl> + boolean ret = allColumnFamilyMetrics . putIfAbsent ( name , new HashSet < Metric > ( ) ) = = null ; <nl> + allColumnFamilyMetrics . get ( name ) . add ( metric ) ; <nl> + all . add ( name ) ; <nl> + return ret ; <nl> + } <nl> + <nl> + public class ColumnFamilyHistogram <nl> + { <nl> + public final Histogram [ ] all ; <nl> + public final Histogram cf ; <nl> + private ColumnFamilyHistogram ( Histogram cf , Histogram keyspace , Histogram global ) <nl> + { <nl> + this . cf = cf ; <nl> + this . all = new Histogram [ ] { cf , keyspace , global } ; <nl> + } <nl> + <nl> + public void update ( long i ) <nl> + { <nl> + for ( Histogram histo : all ) <nl> + { <nl> + histo . update ( i ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> class ColumnFamilyMetricNameFactory implements MetricNameFactory <nl> { <nl> private final String keyspaceName ; <nl> @ @ - 370 , 4 + 571 , 17 @ @ public class ColumnFamilyMetrics <nl> return new MetricName ( groupName , type , metricName , keyspaceName + " . " + columnFamilyName , mbeanName . toString ( ) ) ; <nl> } <nl> } <nl> + <nl> + static class AllColumnFamilyMetricNameFactory implements MetricNameFactory <nl> + { <nl> + public MetricName createMetricName ( String metricName ) <nl> + { <nl> + String groupName = ColumnFamilyMetrics . class . getPackage ( ) . getName ( ) ; <nl> + StringBuilder mbeanName = new StringBuilder ( ) ; <nl> + mbeanName . append ( groupName ) . append ( " : " ) ; <nl> + mbeanName . append ( " type = ColumnFamily " ) ; <nl> + mbeanName . append ( " , name = " ) . append ( metricName ) ; <nl> + return new MetricName ( groupName , " ColumnFamily " , metricName , " all " , mbeanName . toString ( ) ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / metrics / KeyspaceMetrics . java b / src / java / org / apache / cassandra / metrics / KeyspaceMetrics . java <nl> index 936187c . . ccc9a49 100644 <nl> - - - a / src / java / org / apache / cassandra / metrics / KeyspaceMetrics . java <nl> + + + b / src / java / org / apache / cassandra / metrics / KeyspaceMetrics . java <nl> @ @ - 18 , 12 + 18 , 16 @ @ <nl> package org . apache . cassandra . metrics ; <nl> <nl> <nl> - import com . yammer . metrics . Metrics ; <nl> - import com . yammer . metrics . core . * ; <nl> + import java . util . Set ; <nl> <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . Table ; <nl> <nl> + import com . google . common . collect . Lists ; <nl> + import com . google . common . collect . Sets ; <nl> + import com . yammer . metrics . Metrics ; <nl> + import com . yammer . metrics . core . * ; <nl> + <nl> / * * <nl> * Metrics for { @ link ColumnFamilyStore } . <nl> * / <nl> @ @ - 43 , 9 + 47 , 25 @ @ public class KeyspaceMetrics <nl> public final Gauge < Long > totalDiskSpaceUsed ; <nl> / * * Disk space used by bloom filter * / <nl> public final Gauge < Long > bloomFilterDiskSpaceUsed ; <nl> - <nl> + / * * ( Local ) read metrics * / <nl> + public final LatencyMetrics readLatency ; <nl> + / * * ( Local ) range slice metrics * / <nl> + public final LatencyMetrics rangeLatency ; <nl> + / * * ( Local ) write metrics * / <nl> + public final LatencyMetrics writeLatency ; <nl> + / * * Histogram of the number of sstable data files accessed per read * / <nl> + public final Histogram sstablesPerReadHistogram ; <nl> + / * * Tombstones scanned in queries on this Keyspace * / <nl> + public final Histogram tombstoneScannedHistogram ; <nl> + / * * Live cells scanned in queries on this Keyspace * / <nl> + public final Histogram liveScannedHistogram ; <nl> + <nl> private final MetricNameFactory factory ; <nl> - <nl> + private Table keyspace ; <nl> + <nl> + / * * set containing names of all the metrics stored here , for releasing later * / <nl> + private Set < String > allMetrics = Sets . newHashSet ( ) ; <nl> + <nl> / * * <nl> * Creates metrics for given { @ link ColumnFamilyStore } . <nl> * <nl> @ @ - 54 , 39 + 74 , 26 @ @ public class KeyspaceMetrics <nl> public KeyspaceMetrics ( final Table ks ) <nl> { <nl> factory = new KeyspaceMetricNameFactory ( ks ) ; <nl> - <nl> - memtableColumnsCount = Metrics . newGauge ( factory . createMetricName ( " MemtableColumnsCount " ) , new Gauge < Long > ( ) <nl> + keyspace = ks ; <nl> + memtableColumnsCount = createKeyspaceGauge ( " MemtableColumnsCount " , new MetricValue ( ) <nl> { <nl> - public Long value ( ) <nl> + public Long getValue ( ColumnFamilyMetrics metric ) <nl> { <nl> - long total = 0 ; <nl> - for ( ColumnFamilyStore cf : ks . getColumnFamilyStores ( ) ) <nl> - { <nl> - total + = cf . metric . memtableColumnsCount . value ( ) ; <nl> - } <nl> - return total ; <nl> + return metric . memtableColumnsCount . value ( ) ; <nl> } <nl> } ) ; <nl> - memtableDataSize = Metrics . newGauge ( factory . createMetricName ( " MemtableDataSize " ) , new Gauge < Long > ( ) <nl> + memtableDataSize = createKeyspaceGauge ( " MemtableDataSize " , new MetricValue ( ) <nl> { <nl> - public Long value ( ) <nl> + public Long getValue ( ColumnFamilyMetrics metric ) <nl> { <nl> - long total = 0 ; <nl> - for ( ColumnFamilyStore cf : ks . getColumnFamilyStores ( ) ) <nl> - { <nl> - total + = cf . metric . memtableDataSize . value ( ) ; <nl> - } <nl> - return total ; <nl> + return metric . memtableDataSize . value ( ) ; <nl> } <nl> } ) ; <nl> - memtableSwitchCount = Metrics . newGauge ( factory . createMetricName ( " MemtableSwitchCount " ) , new Gauge < Long > ( ) <nl> + memtableSwitchCount = createKeyspaceGauge ( " MemtableSwitchCount " , new MetricValue ( ) <nl> { <nl> - public Long value ( ) <nl> + public Long getValue ( ColumnFamilyMetrics metric ) <nl> { <nl> - long sum = 0 ; <nl> - for ( ColumnFamilyStore cf : ks . getColumnFamilyStores ( ) ) <nl> - sum + = cf . metric . memtableSwitchCount . count ( ) ; <nl> - return sum ; <nl> + return metric . memtableSwitchCount . count ( ) ; <nl> } <nl> } ) ; <nl> pendingTasks = Metrics . newGauge ( factory . createMetricName ( " PendingTasks " ) , new Gauge < Integer > ( ) <nl> @ @ - 96 , 40 + 103 , 37 @ @ public class KeyspaceMetrics <nl> return Table . switchLock . getQueueLength ( ) ; <nl> } <nl> } ) ; <nl> - liveDiskSpaceUsed = Metrics . newGauge ( factory . createMetricName ( " LiveDiskSpaceUsed " ) , new Gauge < Long > ( ) <nl> + liveDiskSpaceUsed = createKeyspaceGauge ( " LiveDiskSpaceUsed " , new MetricValue ( ) <nl> { <nl> - public Long value ( ) <nl> + public Long getValue ( ColumnFamilyMetrics metric ) <nl> { <nl> - long sum = 0 ; <nl> - for ( ColumnFamilyStore cf : ks . getColumnFamilyStores ( ) ) <nl> - { <nl> - sum + = cf . metric . liveDiskSpaceUsed . count ( ) ; <nl> - } <nl> - return sum ; <nl> + return metric . liveDiskSpaceUsed . count ( ) ; <nl> } <nl> } ) ; <nl> - totalDiskSpaceUsed = Metrics . newGauge ( factory . createMetricName ( " TotalDiskSpaceUsed " ) , new Gauge < Long > ( ) <nl> + totalDiskSpaceUsed = createKeyspaceGauge ( " TotalDiskSpaceUsed " , new MetricValue ( ) <nl> { <nl> - public Long value ( ) <nl> + public Long getValue ( ColumnFamilyMetrics metric ) <nl> { <nl> - long sum = 0 ; <nl> - for ( ColumnFamilyStore cf : ks . getColumnFamilyStores ( ) ) <nl> - { <nl> - sum + = cf . metric . totalDiskSpaceUsed . count ( ) ; <nl> - } <nl> - return sum ; <nl> + return metric . totalDiskSpaceUsed . count ( ) ; <nl> } <nl> } ) ; <nl> - bloomFilterDiskSpaceUsed = Metrics . newGauge ( factory . createMetricName ( " BloomFilterDiskSpaceUsed " ) , new Gauge < Long > ( ) <nl> + bloomFilterDiskSpaceUsed = createKeyspaceGauge ( " BloomFilterDiskSpaceUsed " , new MetricValue ( ) <nl> { <nl> - public Long value ( ) <nl> + public Long getValue ( ColumnFamilyMetrics metric ) <nl> { <nl> - long total = 0 ; <nl> - for ( ColumnFamilyStore cf : ks . getColumnFamilyStores ( ) ) <nl> - total + = cf . metric . bloomFilterDiskSpaceUsed . value ( ) ; <nl> - return total ; <nl> + return metric . bloomFilterDiskSpaceUsed . value ( ) ; <nl> } <nl> } ) ; <nl> + / / latency metrics for ColumnFamilyMetrics to update <nl> + readLatency = new LatencyMetrics ( factory , " Read " ) ; <nl> + writeLatency = new LatencyMetrics ( factory , " Write " ) ; <nl> + rangeLatency = new LatencyMetrics ( factory , " Range " ) ; <nl> + / / create histograms for ColumnFamilyMetrics to replicate updates to <nl> + sstablesPerReadHistogram = Metrics . newHistogram ( factory . createMetricName ( " SSTablesPerReadHistogram " ) , true ) ; <nl> + tombstoneScannedHistogram = Metrics . newHistogram ( factory . createMetricName ( " TombstoneScannedHistogram " ) , true ) ; <nl> + liveScannedHistogram = Metrics . newHistogram ( factory . createMetricName ( " LiveScannedHistogram " ) , true ) ; <nl> + / / add manually since histograms do not use createKeyspaceGauge method <nl> + allMetrics . addAll ( Lists . newArrayList ( " SSTablesPerReadHistogram " , " TombstoneScannedHistogram " , " LiveScannedHistogram " ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 137 , 14 + 141 , 51 @ @ public class KeyspaceMetrics <nl> * / <nl> public void release ( ) <nl> { <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " AllMemtablesDataSize " ) ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " MemtableColumnsCount " ) ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " MemtableDataSize " ) ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " MemtableSwitchCount " ) ) ; <nl> + for ( String name : allMetrics ) <nl> + { <nl> + Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( name ) ) ; <nl> + } <nl> + / / latency metrics contain multiple metrics internally and need to be released manually <nl> + readLatency . release ( ) ; <nl> + writeLatency . release ( ) ; <nl> + rangeLatency . release ( ) ; <nl> Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " PendingTasks " ) ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " LiveDiskSpaceUsed " ) ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " TotalDiskSpaceUsed " ) ) ; <nl> - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " BloomFilterDiskSpaceUsed " ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Represents a column family metric value . <nl> + * / <nl> + private interface MetricValue <nl> + { <nl> + / * * <nl> + * get value of a metric <nl> + * @ param columnfamilymetrics of a column family in this keyspace <nl> + * @ return current value of a metric <nl> + * / <nl> + public Long getValue ( ColumnFamilyMetrics metric ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Creates a gauge that will sum the current value of a metric for all column families in this keyspace <nl> + * @ param name <nl> + * @ param MetricValue <nl> + * @ return Gauge & gt ; Long > that computes sum of MetricValue . getValue ( ) <nl> + * / <nl> + private < T extends Number > Gauge < Long > createKeyspaceGauge ( String name , final MetricValue extractor ) <nl> + { <nl> + allMetrics . add ( name ) ; <nl> + return Metrics . newGauge ( factory . createMetricName ( name ) , new Gauge < Long > ( ) <nl> + { <nl> + public Long value ( ) <nl> + { <nl> + long sum = 0 ; <nl> + for ( ColumnFamilyStore cf : keyspace . getColumnFamilyStores ( ) ) <nl> + { <nl> + sum + = extractor . getValue ( cf . metric ) ; <nl> + } <nl> + return sum ; <nl> + } <nl> + } ) ; <nl> } <nl> <nl> class KeyspaceMetricNameFactory implements MetricNameFactory <nl> diff - - git a / src / java / org / apache / cassandra / metrics / LatencyMetrics . java b / src / java / org / apache / cassandra / metrics / LatencyMetrics . java <nl> index c2c48f2 . . 5928cc9 100644 <nl> - - - a / src / java / org / apache / cassandra / metrics / LatencyMetrics . java <nl> + + + b / src / java / org / apache / cassandra / metrics / LatencyMetrics . java <nl> @ @ - 17 , 14 + 17 , 17 @ @ <nl> * / <nl> package org . apache . cassandra . metrics ; <nl> <nl> + import java . util . List ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> + import org . apache . cassandra . utils . EstimatedHistogram ; <nl> + <nl> + import com . google . common . collect . ImmutableList ; <nl> + import com . google . common . collect . Lists ; <nl> import com . yammer . metrics . Metrics ; <nl> import com . yammer . metrics . core . Counter ; <nl> import com . yammer . metrics . core . Timer ; <nl> <nl> - import org . apache . cassandra . utils . EstimatedHistogram ; <nl> - <nl> / * * <nl> * Metrics about latencies <nl> * / <nl> @ @ - 35 , 6 + 38 , 9 @ @ public class LatencyMetrics <nl> / * * Total latency in micro sec * / <nl> public final Counter totalLatency ; <nl> <nl> + / * * parent metrics to replicate any updates to * * / <nl> + private List < LatencyMetrics > parents = Lists . newArrayList ( ) ; <nl> + <nl> protected final MetricNameFactory factory ; <nl> protected final String namePrefix ; <nl> <nl> @ @ - 80 , 6 + 86 , 20 @ @ public class LatencyMetrics <nl> latency = Metrics . newTimer ( factory . createMetricName ( namePrefix + " Latency " ) , TimeUnit . MICROSECONDS , TimeUnit . SECONDS ) ; <nl> totalLatency = Metrics . newCounter ( factory . createMetricName ( namePrefix + " TotalLatency " ) ) ; <nl> } <nl> + <nl> + / * * <nl> + * Create LatencyMetrics with given group , type , prefix to append to each metric name , and scope . Any updates <nl> + * to this will also run on parent <nl> + * <nl> + * @ param factory MetricName factory to use <nl> + * @ param namePrefix Prefix to append to each metric name <nl> + * @ param parents . . . any amount of parents to replicate updates to <nl> + * / <nl> + public LatencyMetrics ( MetricNameFactory factory , String namePrefix , LatencyMetrics . . . parents ) <nl> + { <nl> + this ( factory , namePrefix ) ; <nl> + this . parents . addAll ( ImmutableList . copyOf ( parents ) ) ; <nl> + } <nl> <nl> / * * takes nanoseconds * * / <nl> public void addNano ( long nanos ) <nl> @ @ - 97 , 6 + 117 , 10 @ @ public class LatencyMetrics <nl> } <nl> totalLatencyHistogram . add ( micros ) ; <nl> recentLatencyHistogram . add ( micros ) ; <nl> + for ( LatencyMetrics parent : parents ) <nl> + { <nl> + parent . addMicro ( micros ) ; <nl> + } <nl> } <nl> <nl> public void release ( )
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d84f267 . . f837515 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 2 . 17 
 + * Expose global ColmunFamily metrics ( CASSANDRA - 7273 ) 
 * Handle possible integer overflow in FastByteArrayOutputStream ( CASSANDRA - 7373 ) 
 * cqlsh : ' ascii ' values weren ' t formatted as text ( CASSANDRA - 7407 ) 
 * cqlsh : ignore . cassandra permission errors ( CASSANDRA - 7266 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 1100fb9 . . c003f45 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1916 , 12 + 1916 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 public double getTombstonesPerSlice ( ) 
 { 
 - return metric . tombstoneScannedHistogram . getSnapshot ( ) . getMedian ( ) ; 
 + return metric . tombstoneScannedHistogram . cf . getSnapshot ( ) . getMedian ( ) ; 
 } 
 
 public double getLiveCellsPerSlice ( ) 
 { 
 - return metric . liveScannedHistogram . getSnapshot ( ) . getMedian ( ) ; 
 + return metric . liveScannedHistogram . cf . getSnapshot ( ) . getMedian ( ) ; 
 } 
 
 / / End JMX get / set . 
 diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java 
 index 611fd9a . . 939f800 100644 
 - - - a / src / java / org / apache / cassandra / db / Table . java 
 + + + b / src / java / org / apache / cassandra / db / Table . java 
 @ @ - 269 , 12 + 269 , 12 @ @ public class Table 
 for ( int i = 0 ; i < indexLocks . length ; i + + ) 
 indexLocks [ i ] = new Object ( ) ; 
 
 + this . metric = new KeyspaceMetrics ( this ) ; 
 for ( CFMetaData cfm : new ArrayList < CFMetaData > ( Schema . instance . getTableDefinition ( table ) . cfMetaData ( ) . values ( ) ) ) 
 { 
 logger . debug ( " Initializing { } . { } " , name , cfm . cfName ) ; 
 initCf ( cfm . cfId , cfm . cfName , loadSSTables ) ; 
 } 
 - this . metric = new KeyspaceMetrics ( this ) ; 
 } 
 
 public void createReplicationStrategy ( KSMetaData ksm ) 
 diff - - git a / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java b / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java 
 index a665365 . . ed3b6f9 100644 
 - - - a / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java 
 + + + b / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java 
 @ @ - 17 , 11 + 17 , 14 @ @ 
 * / 
 package org . apache . cassandra . metrics ; 
 
 + import java . util . HashSet ; 
 + import java . util . Set ; 
 + import java . util . concurrent . ConcurrentMap ; 
 + 
 + import com . google . common . collect . Maps ; 
 + import com . google . common . collect . Sets ; 
 import com . yammer . metrics . Metrics ; 
 - import com . yammer . metrics . core . Counter ; 
 - import com . yammer . metrics . core . Gauge ; 
 - import com . yammer . metrics . core . Histogram ; 
 - import com . yammer . metrics . core . MetricName ; 
 + import com . yammer . metrics . core . * ; 
 import com . yammer . metrics . util . RatioGauge ; 
 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 @ @ - 48 , 7 + 51 , 7 @ @ public class ColumnFamilyMetrics 
 / * * Histogram of estimated number of columns . * / 
 public final Gauge < long [ ] > estimatedColumnCountHistogram ; 
 / * * Histogram of the number of sstable data files accessed per read * / 
 - public final Histogram sstablesPerReadHistogram ; 
 + public final ColumnFamilyHistogram sstablesPerReadHistogram ; 
 / * * Read metrics * / 
 public final LatencyMetrics readLatency ; 
 / * * Write metrics * / 
 @ @ - 80 , 16 + 83 , 31 @ @ public class ColumnFamilyMetrics 
 / * * Key cache hit rate for this CF * / 
 public final Gauge < Double > keyCacheHitRate ; 
 / * * Tombstones scanned in queries on this CF * / 
 - public final Histogram tombstoneScannedHistogram ; 
 + public final ColumnFamilyHistogram tombstoneScannedHistogram ; 
 / * * Live cells scanned in queries on this CF * / 
 - public final Histogram liveScannedHistogram ; 
 + public final ColumnFamilyHistogram liveScannedHistogram ; 
 
 private final MetricNameFactory factory ; 
 + private static final MetricNameFactory globalNameFactory = new AllColumnFamilyMetricNameFactory ( ) ; ; 
 
 / / for backward compatibility 
 @ Deprecated public final EstimatedHistogram sstablesPerRead = new EstimatedHistogram ( 35 ) ; 
 @ Deprecated public final EstimatedHistogram recentSSTablesPerRead = new EstimatedHistogram ( 35 ) ; 
 - 
 + 
 + public final static LatencyMetrics globalReadLatency = new LatencyMetrics ( globalNameFactory , " Read " ) ; 
 + public final static LatencyMetrics globalWriteLatency = new LatencyMetrics ( globalNameFactory , " Write " ) ; 
 + public final static LatencyMetrics globalRangeLatency = new LatencyMetrics ( globalNameFactory , " Range " ) ; 
 + 
 + / * * 
 + * stores metrics that will be rolled into a single global metric 
 + * / 
 + public final static ConcurrentMap < String , Set < Metric > > allColumnFamilyMetrics = Maps . newConcurrentMap ( ) ; 
 + 
 + / * * 
 + * Stores all metric names created that can be used when unregistering 
 + * / 
 + public final static Set < String > all = Sets . newHashSet ( ) ; 
 + 
 / * * 
 * Creates metrics for given { @ link ColumnFamilyStore } . 
 * 
 @ @ - 99 , 21 + 117 , 21 @ @ public class ColumnFamilyMetrics 
 { 
 factory = new ColumnFamilyMetricNameFactory ( cfs ) ; 
 
 - memtableColumnsCount = Metrics . newGauge ( factory . createMetricName ( " MemtableColumnsCount " ) , new Gauge < Long > ( ) 
 + memtableColumnsCount = createColumnFamilyGauge ( " MemtableColumnsCount " , new Gauge < Long > ( ) 
 { 
 public Long value ( ) 
 { 
 return cfs . getDataTracker ( ) . getMemtable ( ) . getOperations ( ) ; 
 } 
 } ) ; 
 - memtableDataSize = Metrics . newGauge ( factory . createMetricName ( " MemtableDataSize " ) , new Gauge < Long > ( ) 
 + memtableDataSize = createColumnFamilyGauge ( " MemtableDataSize " , new Gauge < Long > ( ) 
 { 
 public Long value ( ) 
 { 
 return cfs . getDataTracker ( ) . getMemtable ( ) . getLiveSize ( ) ; 
 } 
 } ) ; 
 - memtableSwitchCount = Metrics . newCounter ( factory . createMetricName ( " MemtableSwitchCount " ) ) ; 
 + memtableSwitchCount = createColumnFamilyCounter ( " MemtableSwitchCount " ) ; 
 estimatedRowSizeHistogram = Metrics . newGauge ( factory . createMetricName ( " EstimatedRowSizeHistogram " ) , new Gauge < long [ ] > ( ) 
 { 
 public long [ ] value ( ) 
 @ @ - 142 , 8 + 160 , 8 @ @ public class ColumnFamilyMetrics 
 return histogram ; 
 } 
 } ) ; 
 - sstablesPerReadHistogram = Metrics . newHistogram ( factory . createMetricName ( " SSTablesPerReadHistogram " ) , true ) ; 
 - compressionRatio = Metrics . newGauge ( factory . createMetricName ( " CompressionRatio " ) , new Gauge < Double > ( ) 
 + sstablesPerReadHistogram = createColumnFamilyHistogram ( " SSTablesPerReadHistogram " , cfs . table . metric . sstablesPerReadHistogram ) ; 
 + compressionRatio = createColumnFamilyGauge ( " CompressionRatio " , new Gauge < Double > ( ) 
 { 
 public Double value ( ) 
 { 
 @ @ - 157 , 11 + 175 , 30 @ @ public class ColumnFamilyMetrics 
 total + + ; 
 } 
 } 
 - return total ! = 0 ? ( double ) sum / total : 0 ; 
 + return total ! = 0 ? sum / total : 0 ; 
 + } 
 + } , new Gauge < Double > ( ) / / global gauge 
 + { 
 + public Double value ( ) 
 + { 
 + double sum = 0 ; 
 + int total = 0 ; 
 + for ( Table keyspace : Table . all ( ) ) 
 + { 
 + for ( SSTableReader sstable : keyspace . getAllSSTables ( ) ) 
 + { 
 + if ( sstable . getCompressionRatio ( ) ! = SSTableMetadata . NO _ COMPRESSION _ RATIO ) 
 + { 
 + sum + = sstable . getCompressionRatio ( ) ; 
 + total + + ; 
 + } 
 + } 
 + } 
 + return total ! = 0 ? sum / total : 0 ; 
 } 
 } ) ; 
 - readLatency = new LatencyMetrics ( factory , " Read " ) ; 
 - writeLatency = new LatencyMetrics ( factory , " Write " ) ; 
 + readLatency = new LatencyMetrics ( factory , " Read " , cfs . table . metric . readLatency , globalReadLatency ) ; 
 + writeLatency = new LatencyMetrics ( factory , " Write " , cfs . table . metric . writeLatency , globalWriteLatency ) ; 
 pendingTasks = Metrics . newGauge ( factory . createMetricName ( " PendingTasks " ) , new Gauge < Integer > ( ) 
 { 
 public Integer value ( ) 
 @ @ - 170 , 16 + 207 , 16 @ @ public class ColumnFamilyMetrics 
 return Table . switchLock . getQueueLength ( ) ; 
 } 
 } ) ; 
 - liveSSTableCount = Metrics . newGauge ( factory . createMetricName ( " LiveSSTableCount " ) , new Gauge < Integer > ( ) 
 + liveSSTableCount = createColumnFamilyGauge ( " LiveSSTableCount " , new Gauge < Integer > ( ) 
 { 
 public Integer value ( ) 
 { 
 return cfs . getDataTracker ( ) . getSSTables ( ) . size ( ) ; 
 } 
 } ) ; 
 - liveDiskSpaceUsed = Metrics . newCounter ( factory . createMetricName ( " LiveDiskSpaceUsed " ) ) ; 
 - totalDiskSpaceUsed = Metrics . newCounter ( factory . createMetricName ( " TotalDiskSpaceUsed " ) ) ; 
 - minRowSize = Metrics . newGauge ( factory . createMetricName ( " MinRowSize " ) , new Gauge < Long > ( ) 
 + liveDiskSpaceUsed = createColumnFamilyCounter ( " LiveDiskSpaceUsed " ) ; 
 + totalDiskSpaceUsed = createColumnFamilyCounter ( " TotalDiskSpaceUsed " ) ; 
 + minRowSize = createColumnFamilyGauge ( " MinRowSize " , new Gauge < Long > ( ) 
 { 
 public Long value ( ) 
 { 
 @ @ - 191 , 8 + 228 , 19 @ @ public class ColumnFamilyMetrics 
 } 
 return min ; 
 } 
 + } , new Gauge < Long > ( ) / / global gauge 
 + { 
 + public Long value ( ) 
 + { 
 + long min = Long . MAX _ VALUE ; 
 + for ( Metric cfGauge : allColumnFamilyMetrics . get ( " MinRowSize " ) ) 
 + { 
 + min = Math . min ( min , ( ( Gauge < ? extends Number > ) cfGauge ) . value ( ) . longValue ( ) ) ; 
 + } 
 + return min ; 
 + } 
 } ) ; 
 - maxRowSize = Metrics . newGauge ( factory . createMetricName ( " MaxRowSize " ) , new Gauge < Long > ( ) 
 + maxRowSize = createColumnFamilyGauge ( " MaxRowSize " , new Gauge < Long > ( ) 
 { 
 public Long value ( ) 
 { 
 @ @ - 204 , 8 + 252 , 19 @ @ public class ColumnFamilyMetrics 
 } 
 return max ; 
 } 
 + } , new Gauge < Long > ( ) / / global gauge 
 + { 
 + public Long value ( ) 
 + { 
 + long max = 0 ; 
 + for ( Metric cfGauge : allColumnFamilyMetrics . get ( " MaxRowSize " ) ) 
 + { 
 + max = Math . max ( max , ( ( Gauge < ? extends Number > ) cfGauge ) . value ( ) . longValue ( ) ) ; 
 + } 
 + return max ; 
 + } 
 } ) ; 
 - meanRowSize = Metrics . newGauge ( factory . createMetricName ( " MeanRowSize " ) , new Gauge < Long > ( ) 
 + meanRowSize = createColumnFamilyGauge ( " MeanRowSize " , new Gauge < Long > ( ) 
 { 
 public Long value ( ) 
 { 
 @ @ - 219 , 8 + 278 , 25 @ @ public class ColumnFamilyMetrics 
 } 
 return count > 0 ? sum / count : 0 ; 
 } 
 + } , new Gauge < Long > ( ) / / global gauge 
 + { 
 + public Long value ( ) 
 + { 
 + long sum = 0 ; 
 + long count = 0 ; 
 + for ( Table keyspace : Table . all ( ) ) 
 + { 
 + for ( SSTableReader sstable : keyspace . getAllSSTables ( ) ) 
 + { 
 + long n = sstable . getEstimatedRowSize ( ) . count ( ) ; 
 + sum + = sstable . getEstimatedRowSize ( ) . mean ( ) * n ; 
 + count + = n ; 
 + } 
 + } 
 + return count > 0 ? sum / count : 0 ; 
 + } 
 } ) ; 
 - bloomFilterFalsePositives = Metrics . newGauge ( factory . createMetricName ( " BloomFilterFalsePositives " ) , new Gauge < Long > ( ) 
 + bloomFilterFalsePositives = createColumnFamilyGauge ( " BloomFilterFalsePositives " , new Gauge < Long > ( ) 
 { 
 public Long value ( ) 
 { 
 @ @ - 230 , 23 + 306 , 23 @ @ public class ColumnFamilyMetrics 
 return count ; 
 } 
 } ) ; 
 - recentBloomFilterFalsePositives = Metrics . newGauge ( factory . createMetricName ( " RecentBloomFilterFalsePositives " ) , new Gauge < Long > ( ) 
 + recentBloomFilterFalsePositives = createColumnFamilyGauge ( " RecentBloomFilterFalsePositives " , new Gauge < Long > ( ) 
 { 
 public Long value ( ) 
 { 
 long count = 0L ; 
 - for ( SSTableReader sstable : cfs . getSSTables ( ) ) 
 + for ( SSTableReader sstable : cfs . getSSTables ( ) ) 
 count + = sstable . getRecentBloomFilterFalsePositiveCount ( ) ; 
 return count ; 
 } 
 } ) ; 
 - bloomFilterFalseRatio = Metrics . newGauge ( factory . createMetricName ( " BloomFilterFalseRatio " ) , new Gauge < Double > ( ) 
 + bloomFilterFalseRatio = createColumnFamilyGauge ( " BloomFilterFalseRatio " , new Gauge < Double > ( ) 
 { 
 public Double value ( ) 
 { 
 long falseCount = 0L ; 
 long trueCount = 0L ; 
 - for ( SSTableReader sstable : cfs . getSSTables ( ) ) 
 + for ( SSTableReader sstable : cfs . getSSTables ( ) ) 
 { 
 falseCount + = sstable . getBloomFilterFalsePositiveCount ( ) ; 
 trueCount + = sstable . getBloomFilterTruePositiveCount ( ) ; 
 @ @ - 255 , 8 + 331 , 26 @ @ public class ColumnFamilyMetrics 
 return 0d ; 
 return ( double ) falseCount / ( trueCount + falseCount ) ; 
 } 
 + } , new Gauge < Double > ( ) / / global gauge 
 + { 
 + public Double value ( ) 
 + { 
 + long falseCount = 0L ; 
 + long trueCount = 0L ; 
 + for ( Table keyspace : Table . all ( ) ) 
 + { 
 + for ( SSTableReader sstable : keyspace . getAllSSTables ( ) ) 
 + { 
 + falseCount + = sstable . getBloomFilterFalsePositiveCount ( ) ; 
 + trueCount + = sstable . getBloomFilterTruePositiveCount ( ) ; 
 + } 
 + } 
 + if ( falseCount = = 0L & & trueCount = = 0L ) 
 + return 0d ; 
 + return ( double ) falseCount / ( trueCount + falseCount ) ; 
 + } 
 } ) ; 
 - recentBloomFilterFalseRatio = Metrics . newGauge ( factory . createMetricName ( " RecentBloomFilterFalseRatio " ) , new Gauge < Double > ( ) 
 + recentBloomFilterFalseRatio = createColumnFamilyGauge ( " RecentBloomFilterFalseRatio " , new Gauge < Double > ( ) 
 { 
 public Double value ( ) 
 { 
 @ @ - 271 , 8 + 365 , 26 @ @ public class ColumnFamilyMetrics 
 return 0d ; 
 return ( double ) falseCount / ( trueCount + falseCount ) ; 
 } 
 + } , new Gauge < Double > ( ) / / global gauge 
 + { 
 + public Double value ( ) 
 + { 
 + long falseCount = 0L ; 
 + long trueCount = 0L ; 
 + for ( Table keyspace : Table . all ( ) ) 
 + { 
 + for ( SSTableReader sstable : keyspace . getAllSSTables ( ) ) 
 + { 
 + falseCount + = sstable . getRecentBloomFilterFalsePositiveCount ( ) ; 
 + trueCount + = sstable . getRecentBloomFilterTruePositiveCount ( ) ; 
 + } 
 + } 
 + if ( falseCount = = 0L & & trueCount = = 0L ) 
 + return 0d ; 
 + return ( double ) falseCount / ( trueCount + falseCount ) ; 
 + } 
 } ) ; 
 - bloomFilterDiskSpaceUsed = Metrics . newGauge ( factory . createMetricName ( " BloomFilterDiskSpaceUsed " ) , new Gauge < Long > ( ) 
 + bloomFilterDiskSpaceUsed = createColumnFamilyGauge ( " BloomFilterDiskSpaceUsed " , new Gauge < Long > ( ) 
 { 
 public Long value ( ) 
 { 
 @ @ - 300 , 8 + 412 , 8 @ @ public class ColumnFamilyMetrics 
 return Math . max ( requests , 1 ) ; / / to avoid NaN . 
 } 
 } ) ; 
 - tombstoneScannedHistogram = Metrics . newHistogram ( factory . createMetricName ( " TombstoneScannedHistogram " ) , true ) ; 
 - liveScannedHistogram = Metrics . newHistogram ( factory . createMetricName ( " LiveScannedHistogram " ) , true ) ; 
 + tombstoneScannedHistogram = createColumnFamilyHistogram ( " TombstoneScannedHistogram " , cfs . table . metric . tombstoneScannedHistogram ) ; 
 + liveScannedHistogram = createColumnFamilyHistogram ( " LiveScannedHistogram " , cfs . table . metric . liveScannedHistogram ) ; 
 } 
 
 public void updateSSTableIterated ( int count ) 
 @ @ - 316 , 32 + 428 , 121 @ @ public class ColumnFamilyMetrics 
 * / 
 public void release ( ) 
 { 
 + for ( String name : all ) 
 + { 
 + allColumnFamilyMetrics . get ( name ) . remove ( Metrics . defaultRegistry ( ) . allMetrics ( ) . get ( factory . createMetricName ( name ) ) ) ; 
 + Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( name ) ) ; 
 + } 
 readLatency . release ( ) ; 
 writeLatency . release ( ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " MemtableColumnsCount " ) ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " MemtableDataSize " ) ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " MemtableSwitchCount " ) ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " CompressionRatio " ) ) ; 
 Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " EstimatedRowSizeHistogram " ) ) ; 
 Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " EstimatedColumnCountHistogram " ) ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " SSTablesPerReadHistogram " ) ) ; 
 Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " PendingTasks " ) ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " LiveSSTableCount " ) ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " LiveDiskSpaceUsed " ) ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " TotalDiskSpaceUsed " ) ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " MinRowSize " ) ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " MaxRowSize " ) ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " MeanRowSize " ) ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " BloomFilterFalsePositives " ) ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " RecentBloomFilterFalsePositives " ) ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " BloomFilterFalseRatio " ) ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " RecentBloomFilterFalseRatio " ) ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " BloomFilterDiskSpaceUsed " ) ) ; 
 Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " KeyCacheHitRate " ) ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " TombstoneScannedHistogram " ) ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " LiveScannedHistogram " ) ) ; 
 } 
 
 + 
 + / * * 
 + * Create a gauge that will be part of a merged version of all column families . The global gauge 
 + * will merge each CF gauge by adding their values 
 + * / 
 + protected < T extends Number > Gauge < T > createColumnFamilyGauge ( final String name , Gauge < T > gauge ) 
 + { 
 + return createColumnFamilyGauge ( name , gauge , new Gauge < Long > ( ) 
 + { 
 + public Long value ( ) 
 + { 
 + long total = 0 ; 
 + for ( Metric cfGauge : allColumnFamilyMetrics . get ( name ) ) 
 + { 
 + total = total + ( ( Gauge < ? extends Number > ) cfGauge ) . value ( ) . longValue ( ) ; 
 + } 
 + return total ; 
 + } 
 + } ) ; 
 + } 
 + 
 + / * * 
 + * Create a gauge that will be part of a merged version of all column families . The global gauge 
 + * is defined as the globalGauge parameter 
 + * / 
 + protected < G , T > Gauge < T > createColumnFamilyGauge ( String name , Gauge < T > gauge , Gauge < G > globalGauge ) 
 + { 
 + Gauge < T > cfGauge = Metrics . newGauge ( factory . createMetricName ( name ) , gauge ) ; 
 + if ( register ( name , cfGauge ) ) 
 + { 
 + Metrics . newGauge ( globalNameFactory . createMetricName ( name ) , globalGauge ) ; 
 + } 
 + return cfGauge ; 
 + } 
 + 
 + / * * 
 + * Creates a counter that will also have a global counter thats the sum of all counters across 
 + * different column families 
 + * / 
 + protected Counter createColumnFamilyCounter ( final String name ) 
 + { 
 + Counter cfCounter = Metrics . newCounter ( factory . createMetricName ( name ) ) ; 
 + if ( register ( name , cfCounter ) ) 
 + { 
 + Metrics . newGauge ( globalNameFactory . createMetricName ( name ) , new Gauge < Long > ( ) 
 + { 
 + public Long value ( ) 
 + { 
 + long total = 0 ; 
 + for ( Metric cfGauge : allColumnFamilyMetrics . get ( name ) ) 
 + { 
 + total + = ( ( Counter ) cfGauge ) . count ( ) ; 
 + } 
 + return total ; 
 + } 
 + } ) ; 
 + } 
 + return cfCounter ; 
 + } 
 + 
 + / * * 
 + * Create a histogram - like interface that will register both a CF , keyspace and global level 
 + * histogram and forward any updates to both 
 + * / 
 + protected ColumnFamilyHistogram createColumnFamilyHistogram ( String name , Histogram keyspaceHistogram ) 
 + { 
 + Histogram cfHistogram = Metrics . newHistogram ( factory . createMetricName ( name ) , true ) ; 
 + register ( name , cfHistogram ) ; 
 + return new ColumnFamilyHistogram ( cfHistogram , keyspaceHistogram , Metrics . newHistogram ( globalNameFactory . createMetricName ( name ) , true ) ) ; 
 + } 
 + 
 + / * * 
 + * Registers a metric to be removed when unloading CF . 
 + * @ return true if first time metric with that name has been registered 
 + * / 
 + private boolean register ( String name , Metric metric ) 
 + { 
 + boolean ret = allColumnFamilyMetrics . putIfAbsent ( name , new HashSet < Metric > ( ) ) = = null ; 
 + allColumnFamilyMetrics . get ( name ) . add ( metric ) ; 
 + all . add ( name ) ; 
 + return ret ; 
 + } 
 + 
 + public class ColumnFamilyHistogram 
 + { 
 + public final Histogram [ ] all ; 
 + public final Histogram cf ; 
 + private ColumnFamilyHistogram ( Histogram cf , Histogram keyspace , Histogram global ) 
 + { 
 + this . cf = cf ; 
 + this . all = new Histogram [ ] { cf , keyspace , global } ; 
 + } 
 + 
 + public void update ( long i ) 
 + { 
 + for ( Histogram histo : all ) 
 + { 
 + histo . update ( i ) ; 
 + } 
 + } 
 + } 
 + 
 class ColumnFamilyMetricNameFactory implements MetricNameFactory 
 { 
 private final String keyspaceName ; 
 @ @ - 370 , 4 + 571 , 17 @ @ public class ColumnFamilyMetrics 
 return new MetricName ( groupName , type , metricName , keyspaceName + " . " + columnFamilyName , mbeanName . toString ( ) ) ; 
 } 
 } 
 + 
 + static class AllColumnFamilyMetricNameFactory implements MetricNameFactory 
 + { 
 + public MetricName createMetricName ( String metricName ) 
 + { 
 + String groupName = ColumnFamilyMetrics . class . getPackage ( ) . getName ( ) ; 
 + StringBuilder mbeanName = new StringBuilder ( ) ; 
 + mbeanName . append ( groupName ) . append ( " : " ) ; 
 + mbeanName . append ( " type = ColumnFamily " ) ; 
 + mbeanName . append ( " , name = " ) . append ( metricName ) ; 
 + return new MetricName ( groupName , " ColumnFamily " , metricName , " all " , mbeanName . toString ( ) ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / metrics / KeyspaceMetrics . java b / src / java / org / apache / cassandra / metrics / KeyspaceMetrics . java 
 index 936187c . . ccc9a49 100644 
 - - - a / src / java / org / apache / cassandra / metrics / KeyspaceMetrics . java 
 + + + b / src / java / org / apache / cassandra / metrics / KeyspaceMetrics . java 
 @ @ - 18 , 12 + 18 , 16 @ @ 
 package org . apache . cassandra . metrics ; 
 
 
 - import com . yammer . metrics . Metrics ; 
 - import com . yammer . metrics . core . * ; 
 + import java . util . Set ; 
 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . Table ; 
 
 + import com . google . common . collect . Lists ; 
 + import com . google . common . collect . Sets ; 
 + import com . yammer . metrics . Metrics ; 
 + import com . yammer . metrics . core . * ; 
 + 
 / * * 
 * Metrics for { @ link ColumnFamilyStore } . 
 * / 
 @ @ - 43 , 9 + 47 , 25 @ @ public class KeyspaceMetrics 
 public final Gauge < Long > totalDiskSpaceUsed ; 
 / * * Disk space used by bloom filter * / 
 public final Gauge < Long > bloomFilterDiskSpaceUsed ; 
 - 
 + / * * ( Local ) read metrics * / 
 + public final LatencyMetrics readLatency ; 
 + / * * ( Local ) range slice metrics * / 
 + public final LatencyMetrics rangeLatency ; 
 + / * * ( Local ) write metrics * / 
 + public final LatencyMetrics writeLatency ; 
 + / * * Histogram of the number of sstable data files accessed per read * / 
 + public final Histogram sstablesPerReadHistogram ; 
 + / * * Tombstones scanned in queries on this Keyspace * / 
 + public final Histogram tombstoneScannedHistogram ; 
 + / * * Live cells scanned in queries on this Keyspace * / 
 + public final Histogram liveScannedHistogram ; 
 + 
 private final MetricNameFactory factory ; 
 - 
 + private Table keyspace ; 
 + 
 + / * * set containing names of all the metrics stored here , for releasing later * / 
 + private Set < String > allMetrics = Sets . newHashSet ( ) ; 
 + 
 / * * 
 * Creates metrics for given { @ link ColumnFamilyStore } . 
 * 
 @ @ - 54 , 39 + 74 , 26 @ @ public class KeyspaceMetrics 
 public KeyspaceMetrics ( final Table ks ) 
 { 
 factory = new KeyspaceMetricNameFactory ( ks ) ; 
 - 
 - memtableColumnsCount = Metrics . newGauge ( factory . createMetricName ( " MemtableColumnsCount " ) , new Gauge < Long > ( ) 
 + keyspace = ks ; 
 + memtableColumnsCount = createKeyspaceGauge ( " MemtableColumnsCount " , new MetricValue ( ) 
 { 
 - public Long value ( ) 
 + public Long getValue ( ColumnFamilyMetrics metric ) 
 { 
 - long total = 0 ; 
 - for ( ColumnFamilyStore cf : ks . getColumnFamilyStores ( ) ) 
 - { 
 - total + = cf . metric . memtableColumnsCount . value ( ) ; 
 - } 
 - return total ; 
 + return metric . memtableColumnsCount . value ( ) ; 
 } 
 } ) ; 
 - memtableDataSize = Metrics . newGauge ( factory . createMetricName ( " MemtableDataSize " ) , new Gauge < Long > ( ) 
 + memtableDataSize = createKeyspaceGauge ( " MemtableDataSize " , new MetricValue ( ) 
 { 
 - public Long value ( ) 
 + public Long getValue ( ColumnFamilyMetrics metric ) 
 { 
 - long total = 0 ; 
 - for ( ColumnFamilyStore cf : ks . getColumnFamilyStores ( ) ) 
 - { 
 - total + = cf . metric . memtableDataSize . value ( ) ; 
 - } 
 - return total ; 
 + return metric . memtableDataSize . value ( ) ; 
 } 
 } ) ; 
 - memtableSwitchCount = Metrics . newGauge ( factory . createMetricName ( " MemtableSwitchCount " ) , new Gauge < Long > ( ) 
 + memtableSwitchCount = createKeyspaceGauge ( " MemtableSwitchCount " , new MetricValue ( ) 
 { 
 - public Long value ( ) 
 + public Long getValue ( ColumnFamilyMetrics metric ) 
 { 
 - long sum = 0 ; 
 - for ( ColumnFamilyStore cf : ks . getColumnFamilyStores ( ) ) 
 - sum + = cf . metric . memtableSwitchCount . count ( ) ; 
 - return sum ; 
 + return metric . memtableSwitchCount . count ( ) ; 
 } 
 } ) ; 
 pendingTasks = Metrics . newGauge ( factory . createMetricName ( " PendingTasks " ) , new Gauge < Integer > ( ) 
 @ @ - 96 , 40 + 103 , 37 @ @ public class KeyspaceMetrics 
 return Table . switchLock . getQueueLength ( ) ; 
 } 
 } ) ; 
 - liveDiskSpaceUsed = Metrics . newGauge ( factory . createMetricName ( " LiveDiskSpaceUsed " ) , new Gauge < Long > ( ) 
 + liveDiskSpaceUsed = createKeyspaceGauge ( " LiveDiskSpaceUsed " , new MetricValue ( ) 
 { 
 - public Long value ( ) 
 + public Long getValue ( ColumnFamilyMetrics metric ) 
 { 
 - long sum = 0 ; 
 - for ( ColumnFamilyStore cf : ks . getColumnFamilyStores ( ) ) 
 - { 
 - sum + = cf . metric . liveDiskSpaceUsed . count ( ) ; 
 - } 
 - return sum ; 
 + return metric . liveDiskSpaceUsed . count ( ) ; 
 } 
 } ) ; 
 - totalDiskSpaceUsed = Metrics . newGauge ( factory . createMetricName ( " TotalDiskSpaceUsed " ) , new Gauge < Long > ( ) 
 + totalDiskSpaceUsed = createKeyspaceGauge ( " TotalDiskSpaceUsed " , new MetricValue ( ) 
 { 
 - public Long value ( ) 
 + public Long getValue ( ColumnFamilyMetrics metric ) 
 { 
 - long sum = 0 ; 
 - for ( ColumnFamilyStore cf : ks . getColumnFamilyStores ( ) ) 
 - { 
 - sum + = cf . metric . totalDiskSpaceUsed . count ( ) ; 
 - } 
 - return sum ; 
 + return metric . totalDiskSpaceUsed . count ( ) ; 
 } 
 } ) ; 
 - bloomFilterDiskSpaceUsed = Metrics . newGauge ( factory . createMetricName ( " BloomFilterDiskSpaceUsed " ) , new Gauge < Long > ( ) 
 + bloomFilterDiskSpaceUsed = createKeyspaceGauge ( " BloomFilterDiskSpaceUsed " , new MetricValue ( ) 
 { 
 - public Long value ( ) 
 + public Long getValue ( ColumnFamilyMetrics metric ) 
 { 
 - long total = 0 ; 
 - for ( ColumnFamilyStore cf : ks . getColumnFamilyStores ( ) ) 
 - total + = cf . metric . bloomFilterDiskSpaceUsed . value ( ) ; 
 - return total ; 
 + return metric . bloomFilterDiskSpaceUsed . value ( ) ; 
 } 
 } ) ; 
 + / / latency metrics for ColumnFamilyMetrics to update 
 + readLatency = new LatencyMetrics ( factory , " Read " ) ; 
 + writeLatency = new LatencyMetrics ( factory , " Write " ) ; 
 + rangeLatency = new LatencyMetrics ( factory , " Range " ) ; 
 + / / create histograms for ColumnFamilyMetrics to replicate updates to 
 + sstablesPerReadHistogram = Metrics . newHistogram ( factory . createMetricName ( " SSTablesPerReadHistogram " ) , true ) ; 
 + tombstoneScannedHistogram = Metrics . newHistogram ( factory . createMetricName ( " TombstoneScannedHistogram " ) , true ) ; 
 + liveScannedHistogram = Metrics . newHistogram ( factory . createMetricName ( " LiveScannedHistogram " ) , true ) ; 
 + / / add manually since histograms do not use createKeyspaceGauge method 
 + allMetrics . addAll ( Lists . newArrayList ( " SSTablesPerReadHistogram " , " TombstoneScannedHistogram " , " LiveScannedHistogram " ) ) ; 
 } 
 
 / * * 
 @ @ - 137 , 14 + 141 , 51 @ @ public class KeyspaceMetrics 
 * / 
 public void release ( ) 
 { 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " AllMemtablesDataSize " ) ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " MemtableColumnsCount " ) ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " MemtableDataSize " ) ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " MemtableSwitchCount " ) ) ; 
 + for ( String name : allMetrics ) 
 + { 
 + Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( name ) ) ; 
 + } 
 + / / latency metrics contain multiple metrics internally and need to be released manually 
 + readLatency . release ( ) ; 
 + writeLatency . release ( ) ; 
 + rangeLatency . release ( ) ; 
 Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " PendingTasks " ) ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " LiveDiskSpaceUsed " ) ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " TotalDiskSpaceUsed " ) ) ; 
 - Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " BloomFilterDiskSpaceUsed " ) ) ; 
 + } 
 + 
 + / * * 
 + * Represents a column family metric value . 
 + * / 
 + private interface MetricValue 
 + { 
 + / * * 
 + * get value of a metric 
 + * @ param columnfamilymetrics of a column family in this keyspace 
 + * @ return current value of a metric 
 + * / 
 + public Long getValue ( ColumnFamilyMetrics metric ) ; 
 + } 
 + 
 + / * * 
 + * Creates a gauge that will sum the current value of a metric for all column families in this keyspace 
 + * @ param name 
 + * @ param MetricValue 
 + * @ return Gauge & gt ; Long > that computes sum of MetricValue . getValue ( ) 
 + * / 
 + private < T extends Number > Gauge < Long > createKeyspaceGauge ( String name , final MetricValue extractor ) 
 + { 
 + allMetrics . add ( name ) ; 
 + return Metrics . newGauge ( factory . createMetricName ( name ) , new Gauge < Long > ( ) 
 + { 
 + public Long value ( ) 
 + { 
 + long sum = 0 ; 
 + for ( ColumnFamilyStore cf : keyspace . getColumnFamilyStores ( ) ) 
 + { 
 + sum + = extractor . getValue ( cf . metric ) ; 
 + } 
 + return sum ; 
 + } 
 + } ) ; 
 } 
 
 class KeyspaceMetricNameFactory implements MetricNameFactory 
 diff - - git a / src / java / org / apache / cassandra / metrics / LatencyMetrics . java b / src / java / org / apache / cassandra / metrics / LatencyMetrics . java 
 index c2c48f2 . . 5928cc9 100644 
 - - - a / src / java / org / apache / cassandra / metrics / LatencyMetrics . java 
 + + + b / src / java / org / apache / cassandra / metrics / LatencyMetrics . java 
 @ @ - 17 , 14 + 17 , 17 @ @ 
 * / 
 package org . apache . cassandra . metrics ; 
 
 + import java . util . List ; 
 import java . util . concurrent . TimeUnit ; 
 
 + import org . apache . cassandra . utils . EstimatedHistogram ; 
 + 
 + import com . google . common . collect . ImmutableList ; 
 + import com . google . common . collect . Lists ; 
 import com . yammer . metrics . Metrics ; 
 import com . yammer . metrics . core . Counter ; 
 import com . yammer . metrics . core . Timer ; 
 
 - import org . apache . cassandra . utils . EstimatedHistogram ; 
 - 
 / * * 
 * Metrics about latencies 
 * / 
 @ @ - 35 , 6 + 38 , 9 @ @ public class LatencyMetrics 
 / * * Total latency in micro sec * / 
 public final Counter totalLatency ; 
 
 + / * * parent metrics to replicate any updates to * * / 
 + private List < LatencyMetrics > parents = Lists . newArrayList ( ) ; 
 + 
 protected final MetricNameFactory factory ; 
 protected final String namePrefix ; 
 
 @ @ - 80 , 6 + 86 , 20 @ @ public class LatencyMetrics 
 latency = Metrics . newTimer ( factory . createMetricName ( namePrefix + " Latency " ) , TimeUnit . MICROSECONDS , TimeUnit . SECONDS ) ; 
 totalLatency = Metrics . newCounter ( factory . createMetricName ( namePrefix + " TotalLatency " ) ) ; 
 } 
 + 
 + / * * 
 + * Create LatencyMetrics with given group , type , prefix to append to each metric name , and scope . Any updates 
 + * to this will also run on parent 
 + * 
 + * @ param factory MetricName factory to use 
 + * @ param namePrefix Prefix to append to each metric name 
 + * @ param parents . . . any amount of parents to replicate updates to 
 + * / 
 + public LatencyMetrics ( MetricNameFactory factory , String namePrefix , LatencyMetrics . . . parents ) 
 + { 
 + this ( factory , namePrefix ) ; 
 + this . parents . addAll ( ImmutableList . copyOf ( parents ) ) ; 
 + } 
 
 / * * takes nanoseconds * * / 
 public void addNano ( long nanos ) 
 @ @ - 97 , 6 + 117 , 10 @ @ public class LatencyMetrics 
 } 
 totalLatencyHistogram . add ( micros ) ; 
 recentLatencyHistogram . add ( micros ) ; 
 + for ( LatencyMetrics parent : parents ) 
 + { 
 + parent . addMicro ( micros ) ; 
 + } 
 } 
 
 public void release ( )

NEAREST DIFF:
ELIMINATEDSENTENCE
