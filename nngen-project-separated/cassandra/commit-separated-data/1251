BLEU SCORE: 0.05061867434834411

TEST MSG: Revert 7486 , make CMS default GC , move gc opts to conf / jvm . options
GENERATED MSG: Change default GC to G1

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 54b505a . . 66e34b6 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 6 @ @ <nl> 3 . 0 - rc2 <nl> + * Revert CASSANDRA - 7486 , make CMS default GC , move GC config to <nl> + conf / jvm . options ( CASSANDRA - 10403 ) <nl> * Fix TeeingAppender causing some logs to be truncated / empty ( CASSANDRA - 10447 ) <nl> * Allow EACH _ QUORUM for reads ( CASSANDRA - 9602 ) <nl> * Fix potential ClassCastException while upgrading ( CASSANDRA - 10468 ) <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index 1176dcd . . 9ff43a2 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 54 , 7 + 54 , 7 @ @ Upgrading <nl> - Max mutation size is now configurable via max _ mutation _ size _ in _ kb setting in <nl> cassandra . yaml ; the default is half the size commitlog _ segment _ size _ in _ mb * 1024 . <nl> - 3 . 0 requires Java 8u40 or later . <nl> - - The default JVM GC has been changed to G1GC . <nl> + - Garbage collection options were moved from cassandra - env to jvm . options file . <nl> - New transaction log files have been introduced to replace the compactions _ in _ progress <nl> system table , temporary file markers ( tmp and tmplink ) and sstable ancerstors . <nl> Therefore , compaction metadata no longer contains ancestors . Transaction log files <nl> diff - - git a / conf / cassandra - env . ps1 b / conf / cassandra - env . ps1 <nl> index 7a4a61e . . 3c9d815 100644 <nl> - - - a / conf / cassandra - env . ps1 <nl> + + + b / conf / cassandra - env . ps1 <nl> @ @ - 128 , 16 + 128 , 18 @ @ Function CalculateHeapSizes <nl> } <nl> <nl> # Validate that we need to run this function and that our config is good <nl> - if ( $ env : MAX _ HEAP _ SIZE ) <nl> + if ( ( $ env : MAX _ HEAP _ SIZE - and ! $ env : HEAP _ NEWSIZE ) - or ( ! $ env : MAX _ HEAP _ SIZE - and $ env : HEAP _ NEWSIZE ) ) <nl> { <nl> - return <nl> + echo " Please set or unset MAX _ HEAP _ SIZE and HEAP _ NEWSIZE in pairs . Aborting startup . " <nl> + exit 1 <nl> } <nl> <nl> $ memObject = Get - WMIObject - class win32 _ physicalmemory <nl> if ( $ memObject - eq $ null ) <nl> { <nl> - echo " WARNING ! Could not determine system memory . Defaulting to 2G heap . Manually override in conf \ cassandra - env . ps1 for different heap values . " <nl> + echo " WARNING ! Could not determine system memory . Defaulting to 2G heap , 512M newgen . Manually override in conf \ jvm . options for different heap values . " <nl> $ env : MAX _ HEAP _ SIZE = " 2048M " <nl> + $ env : HEAP _ NEWSIZE = " 512M " <nl> return <nl> } <nl> <nl> @ @ - 174 , 6 + 176 , 20 @ @ Function CalculateHeapSizes <nl> $ maxHeapMB = $ quarterMem <nl> } <nl> $ env : MAX _ HEAP _ SIZE = [ System . Convert ] : : ToString ( $ maxHeapMB ) + " M " <nl> + <nl> + # Young gen : min ( max _ sensible _ per _ modern _ cpu _ core * num _ cores , 1 / 4 <nl> + $ maxYGPerCore = 100 <nl> + $ maxYGTotal = $ maxYGPerCore * $ systemCores <nl> + $ desiredYG = [ Math ] : : Truncate ( $ maxHeapMB / 4 ) <nl> + <nl> + if ( $ desiredYG - gt $ maxYGTotal ) <nl> + { <nl> + $ env : HEAP _ NEWSIZE = [ System . Convert ] : : ToString ( $ maxYGTotal ) + " M " <nl> + } <nl> + else <nl> + { <nl> + $ env : HEAP _ NEWSIZE = [ System . Convert ] : : ToString ( $ desiredYG ) + " M " <nl> + } <nl> } <nl> <nl> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> @ @ - 294 , 12 + 310 , 71 @ @ Function SetCassandraEnvironment <nl> # Override these to set the amount of memory to allocate to the JVM at <nl> # start - up . For production use you may wish to adjust this for your <nl> # environment . MAX _ HEAP _ SIZE is the total amount of memory dedicated <nl> - # to the Java heap . <nl> + # to the Java heap . HEAP _ NEWSIZE refers to the size of the young <nl> + # generation . Both MAX _ HEAP _ SIZE and HEAP _ NEWSIZE should be either set <nl> + # or not ( if you set one , set the other ) . <nl> + # <nl> + # The main trade - off for the young generation is that the larger it <nl> + # is , the longer GC pause times will be . The shorter it is , the more <nl> + # expensive GC will be ( usually ) . <nl> + # <nl> + # The example HEAP _ NEWSIZE assumes a modern 8 - core + machine for decent <nl> + # times . If in doubt , and if you do not particularly want to tweak , go <nl> + # 100 MB per physical CPU core . <nl> <nl> # $ env : MAX _ HEAP _ SIZE = " 4096M " <nl> + # $ env : HEAP _ NEWSIZE = " 800M " <nl> CalculateHeapSizes <nl> <nl> ParseJVMInfo <nl> + <nl> + # Read user - defined JVM options from jvm . options file <nl> + $ content = Get - Content " $ env : CASSANDRA _ CONF \ jvm . options " <nl> + for ( $ i = 0 ; $ i - lt $ content . Count ; $ i + + ) <nl> + { <nl> + $ line = $ content [ $ i ] <nl> + if ( $ line . StartsWith ( " - " ) ) <nl> + { <nl> + $ env : JVM _ OPTS = " $ env : JVM _ OPTS $ line " <nl> + } <nl> + } <nl> + <nl> + $ defined _ xmn = $ env : JVM _ OPTS - like ' * Xmn * ' <nl> + $ defined _ xmx = $ env : JVM _ OPTS - like ' * Xmx * ' <nl> + $ defined _ xms = $ env : JVM _ OPTS - like ' * Xms * ' <nl> + $ using _ cms = $ env : JVM _ OPTS - like ' * UseConcMarkSweepGC * ' <nl> + <nl> + # We only set - Xms and - Xmx if they were not defined on jvm . options file <nl> + # If defined , both Xmx and Xms should be defined together . <nl> + if ( ( $ defined _ xmx - eq $ false ) - and ( $ defined _ xms - eq $ false ) ) <nl> + { <nl> + $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Xms $ env : MAX _ HEAP _ SIZE " <nl> + $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Xmx $ env : MAX _ HEAP _ SIZE " <nl> + } <nl> + elseif ( ( $ defined _ xmx - eq $ false ) - or ( $ defined _ xms - eq $ false ) ) <nl> + { <nl> + echo " Please set or unset - Xmx and - Xms flags in pairs on jvm . options file . " <nl> + exit <nl> + } <nl> + <nl> + # We only set - Xmn flag if it was not defined in jvm . options file <nl> + # and if the CMS GC is being used <nl> + # If defined , both Xmn and Xmx should be defined together . <nl> + if ( ( $ defined _ xmn - eq $ true ) - and ( $ defined _ xmx - eq $ false ) ) <nl> + { <nl> + echo " Please set or unset - Xmx and - Xmn flags in pairs on jvm . options file . " <nl> + exit <nl> + } <nl> + elseif ( ( $ defined _ xmn - eq $ false ) - and ( $ using _ cms - eq $ true ) ) <nl> + { <nl> + $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Xmn $ env : HEAP _ NEWSIZE " <nl> + } <nl> + <nl> + if ( ( $ env : JVM _ ARCH - eq " 64 - Bit " ) - and ( $ using _ cms - eq $ true ) ) <nl> + { <nl> + $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + UseCondCardMark " <nl> + } <nl> + <nl> # Add sigar env - see Cassandra - 7838 <nl> $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Djava . library . path = " " $ env : CASSANDRA _ HOME \ lib \ sigar - bin " " " <nl> <nl> @ @ - 355 , 10 + 430 , 6 @ @ Function SetCassandraEnvironment <nl> # see http : / / tech . stolsvik . com / 2010 / 01 / linux - java - thread - priorities - workar <nl> $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : ThreadPriorityPolicy = 42 " <nl> <nl> - # min and max heap sizes should be set to the same value to avoid <nl> - # stop - the - world GC pauses during resize . <nl> - $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Xms $ env : MAX _ HEAP _ SIZE " <nl> - $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Xmx $ env : MAX _ HEAP _ SIZE " <nl> $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + HeapDumpOnOutOfMemoryError " <nl> <nl> # Per - thread stack size . <nl> @ @ - 367 , 28 + 438 , 6 @ @ Function SetCassandraEnvironment <nl> # Larger interned string table , for gossip ' s benefit ( CASSANDRA - 6410 ) <nl> $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : StringTableSize = 1000003 " <nl> <nl> - # GC tuning options <nl> - # Use the Hotspot garbage - first collector . <nl> - $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + UseG1GC " <nl> - <nl> - # Have the JVM do less remembered set work during STW , instead <nl> - # preferring concurrent GC . Reduces p99 . 9 latency . <nl> - $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : G1RSetUpdatingPauseTimePercent = 5 " <nl> - <nl> - # The JVM maximum is 8 PGC threads and 1 / 4 of that for ConcGC . <nl> - # Machines with > 10 cores may need additional threads . Increase to < = full cores . <nl> - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : ParallelGCThreads = 16 " <nl> - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : ConcGCThreads = 16 " <nl> - <nl> - # Main G1GC tunable : lowering the pause target will lower throughput and vise versa . <nl> - # 200ms is the JVM default and lowest viable setting <nl> - # 1000ms increases throughput . Keep it smaller than the timeouts in cassandra . yaml . <nl> - $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : MaxGCPauseMillis = 500 " <nl> - <nl> - # Save CPU time on large ( > = 16GB ) heaps by delaying region scanning <nl> - 	 # until the heap is 70 % full . The default in Hotspot 8u40 is 40 % . <nl> - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : InitiatingHeapOccupancyPercent = 70 " <nl> - <nl> # Make sure all memory is faulted and zeroed on startup . <nl> # This helps prevent soft faults in containers and makes <nl> # transparent hugepage allocation more effective . <nl> @ @ - 404 , 19 + 453 , 6 @ @ Function SetCassandraEnvironment <nl> # http : / / www . evanjones . ca / jvm - mmap - pause . html <nl> $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + PerfDisableSharedMem " <nl> <nl> - # GC logging options - - uncomment to enable <nl> - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + PrintGCDetails " <nl> - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + PrintGCDateStamps " <nl> - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + PrintHeapAtGC " <nl> - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + PrintTenuringDistribution " <nl> - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + PrintGCApplicationStoppedTime " <nl> - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + PrintPromotionFailure " <nl> - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : PrintFLSStatistics = 1 " <nl> - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Xloggc : $ env : CASSANDRA _ HOME / logs / gc . log " <nl> - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + UseGCLogFileRotation " <nl> - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : NumberOfGCLogFiles = 10 " <nl> - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : GCLogFileSize = 10M " <nl> - <nl> # Configure the following for JEMallocAllocator and if jemalloc is not available in the system <nl> # library path . <nl> # set LD _ LIBRARY _ PATH = < JEMALLOC _ HOME > / lib / <nl> diff - - git a / conf / cassandra - env . sh b / conf / cassandra - env . sh <nl> index 0a5bada . . 1d72070 100644 <nl> - - - a / conf / cassandra - env . sh <nl> + + + b / conf / cassandra - env . sh <nl> @ @ - 71 , 6 + 71 , 19 @ @ calculate _ heap _ sizes ( ) <nl> max _ heap _ size _ in _ mb = " $ quarter _ system _ memory _ in _ mb " <nl> fi <nl> MAX _ HEAP _ SIZE = " $ { max _ heap _ size _ in _ mb } M " <nl> + <nl> + # Young gen : min ( max _ sensible _ per _ modern _ cpu _ core * num _ cores , 1 / 4 * heap size ) <nl> + max _ sensible _ yg _ per _ core _ in _ mb = " 100 " <nl> + max _ sensible _ yg _ in _ mb = ` expr $ max _ sensible _ yg _ per _ core _ in _ mb " * " $ system _ cpu _ cores ` <nl> + <nl> + desired _ yg _ in _ mb = ` expr $ max _ heap _ size _ in _ mb / 4 ` <nl> + <nl> + if [ " $ desired _ yg _ in _ mb " - gt " $ max _ sensible _ yg _ in _ mb " ] <nl> + then <nl> + HEAP _ NEWSIZE = " $ { max _ sensible _ yg _ in _ mb } M " <nl> + else <nl> + HEAP _ NEWSIZE = " $ { desired _ yg _ in _ mb } M " <nl> + fi <nl> } <nl> <nl> # Determine the sort of JVM we ' ll be running on . <nl> @ @ - 89 , 19 + 102 , 54 @ @ if [ " $ JVM _ VERSION " \ < " 1 . 8 " ] & & [ " $ JVM _ PATCH _ VERSION " \ < " 40 " ] ; then <nl> exit 1 ; <nl> fi <nl> <nl> + jvm = ` echo " $ java _ ver _ output " | grep - A 1 ' java version ' | awk ' NR = = 2 { print $ 1 } ' ` <nl> + case " $ jvm " in <nl> + OpenJDK ) <nl> + JVM _ VENDOR = OpenJDK <nl> + # this will be " 64 - Bit " or " 32 - Bit " <nl> + JVM _ ARCH = ` echo " $ java _ ver _ output " | awk ' NR = = 3 { print $ 2 } ' ` <nl> + ; ; <nl> + " Java ( TM ) " ) <nl> + JVM _ VENDOR = Oracle <nl> + # this will be " 64 - Bit " or " 32 - Bit " <nl> + JVM _ ARCH = ` echo " $ java _ ver _ output " | awk ' NR = = 3 { print $ 3 } ' ` <nl> + ; ; <nl> + * ) <nl> + # Help fill in other JVM values <nl> + JVM _ VENDOR = other <nl> + JVM _ ARCH = unknown <nl> + ; ; <nl> + esac <nl> + <nl> # Override these to set the amount of memory to allocate to the JVM at <nl> # start - up . For production use you may wish to adjust this for your <nl> # environment . MAX _ HEAP _ SIZE is the total amount of memory dedicated <nl> - # to the Java heap . <nl> + # to the Java heap . HEAP _ NEWSIZE refers to the size of the young <nl> + # generation . Both MAX _ HEAP _ SIZE and HEAP _ NEWSIZE should be either set <nl> + # or not ( if you set one , set the other ) . <nl> + # <nl> + # The main trade - off for the young generation is that the larger it <nl> + # is , the longer GC pause times will be . The shorter it is , the more <nl> + # expensive GC will be ( usually ) . <nl> + # <nl> + # The example HEAP _ NEWSIZE assumes a modern 8 - core + machine for decent pause <nl> + # times . If in doubt , and if you do not particularly want to tweak , go with <nl> + # 100 MB per physical CPU core . <nl> <nl> # MAX _ HEAP _ SIZE = " 4G " <nl> + # HEAP _ NEWSIZE = " 800M " <nl> <nl> # Set this to control the amount of arenas per - thread in glibc <nl> # export MALLOC _ ARENA _ MAX = 4 <nl> <nl> # only calculate the size if it ' s not set manually <nl> - if [ " x $ MAX _ HEAP _ SIZE " = " x " ] ; then <nl> + if [ " x $ MAX _ HEAP _ SIZE " = " x " ] & & [ " x $ HEAP _ NEWSIZE " = " x " ] ; then <nl> calculate _ heap _ sizes <nl> + else <nl> + if [ " x $ MAX _ HEAP _ SIZE " = " x " ] | | [ " x $ HEAP _ NEWSIZE " = " x " ] ; then <nl> + echo " please set or unset MAX _ HEAP _ SIZE and HEAP _ NEWSIZE in pairs ( see cassandra - env . sh ) " <nl> + exit 1 <nl> + fi <nl> fi <nl> <nl> if [ " x $ MALLOC _ ARENA _ MAX " = " x " ] ; then <nl> @ @ - 158 , 41 + 206 , 54 @ @ esac <nl> # Here we create the arguments that will get passed to the jvm when <nl> # starting cassandra . <nl> <nl> + # Read user - defined JVM options from jvm . options file <nl> + JVM _ OPTS _ FILE = $ CASSANDRA _ CONF / jvm . options <nl> + for opt in ` grep " ^ - " $ JVM _ OPTS _ FILE ` <nl> + do <nl> + JVM _ OPTS = " $ JVM _ OPTS $ opt " <nl> + done <nl> + <nl> + # Check what parameters were defined on jvm . options file to avoid conflicts <nl> + echo $ JVM _ OPTS | grep - q Xmn <nl> + DEFINED _ XMN = $ ? <nl> + echo $ JVM _ OPTS | grep - q Xmx <nl> + DEFINED _ XMX = $ ? <nl> + echo $ JVM _ OPTS | grep - q Xms <nl> + DEFINED _ XMS = $ ? <nl> + echo $ JVM _ OPTS | grep - q UseConcMarkSweepGC <nl> + USING _ CMS = $ ? <nl> + <nl> + # We only set - Xms and - Xmx if they were not defined on jvm . options file <nl> + # If defined , both Xmx and Xms should be defined together . <nl> + if [ $ DEFINED _ XMX - ne 0 ] & & [ $ DEFINED _ XMS - ne 0 ] ; then <nl> + JVM _ OPTS = " $ JVM _ OPTS - Xms $ { MAX _ HEAP _ SIZE } " <nl> + JVM _ OPTS = " $ JVM _ OPTS - Xmx $ { MAX _ HEAP _ SIZE } " <nl> + elif [ $ DEFINED _ XMX - ne 0 ] | | [ $ DEFINED _ XMS - ne 0 ] ; then <nl> + echo " Please set or unset - Xmx and - Xms flags in pairs on jvm . options file . " <nl> + exit 1 <nl> + fi <nl> + <nl> + # We only set - Xmn flag if it was not defined in jvm . options file <nl> + # and if the CMS GC is being used <nl> + # If defined , both Xmn and Xmx should be defined together . <nl> + if [ $ DEFINED _ XMN - eq 0 ] & & [ $ DEFINED _ XMX - ne 0 ] ; then <nl> + echo " Please set or unset - Xmx and - Xmn flags in pairs on jvm . options file . " <nl> + exit 1 <nl> + elif [ $ DEFINED _ XMN - ne 0 ] & & [ $ USING _ CMS - eq 0 ] ; then <nl> + JVM _ OPTS = " $ JVM _ OPTS - Xmn $ { HEAP _ NEWSIZE } " <nl> + fi <nl> + <nl> + if [ " $ JVM _ ARCH " = " 64 - Bit " ] & & [ $ USING _ CMS - eq 0 ] ; then <nl> + JVM _ OPTS = " $ JVM _ OPTS - XX : + UseCondCardMark " <nl> + fi <nl> + <nl> # enable assertions . disabling this in production will give a modest <nl> # performance benefit ( around 5 % ) . <nl> JVM _ OPTS = " $ JVM _ OPTS - ea " <nl> <nl> - # min and max heap sizes should be set to the same value to avoid <nl> - # stop - the - world GC pauses during resize , and so that we can lock the <nl> - # heap in memory on startup to prevent any of it from being swapped <nl> - # out . <nl> - JVM _ OPTS = " $ JVM _ OPTS - Xms $ { MAX _ HEAP _ SIZE } " <nl> - JVM _ OPTS = " $ JVM _ OPTS - Xmx $ { MAX _ HEAP _ SIZE } " <nl> - <nl> # Per - thread stack size . <nl> JVM _ OPTS = " $ JVM _ OPTS - Xss256k " <nl> <nl> - # Use the Hotspot garbage - first collector . <nl> - JVM _ OPTS = " $ JVM _ OPTS - XX : + UseG1GC " <nl> - <nl> - # Have the JVM do less remembered set work during STW , instead <nl> - # preferring concurrent GC . Reduces p99 . 9 latency . <nl> - JVM _ OPTS = " $ JVM _ OPTS - XX : G1RSetUpdatingPauseTimePercent = 5 " <nl> - <nl> - # The JVM maximum is 8 PGC threads and 1 / 4 of that for ConcGC . <nl> - # Machines with > 10 cores may need additional threads . Increase to < = full cores . <nl> - # JVM _ OPTS = " $ JVM _ OPTS - XX : ParallelGCThreads = 16 " <nl> - # JVM _ OPTS = " $ JVM _ OPTS - XX : ConcGCThreads = 16 " <nl> - <nl> - # Main G1GC tunable : lowering the pause target will lower throughput and vise versa . <nl> - # 200ms is the JVM default and lowest viable setting <nl> - # 1000ms increases throughput . Keep it smaller than the timeouts in cassandra . yaml . <nl> - JVM _ OPTS = " $ JVM _ OPTS - XX : MaxGCPauseMillis = 500 " <nl> - <nl> - # Save CPU time on large ( > = 16GB ) heaps by delaying region scanning <nl> - # until the heap is 70 % full . The default in Hotspot 8u40 is 40 % . <nl> - # JVM _ OPTS = " $ JVM _ OPTS - XX : InitiatingHeapOccupancyPercent = 70 " <nl> - <nl> # Make sure all memory is faulted and zeroed on startup . <nl> # This helps prevent soft faults in containers and makes <nl> # transparent hugepage allocation more effective . <nl> @ @ - 230 , 19 + 291 , 6 @ @ if [ " x $ CASSANDRA _ HEAPDUMP _ DIR " ! = " x " ] ; then <nl> JVM _ OPTS = " $ JVM _ OPTS - XX : HeapDumpPath = $ CASSANDRA _ HEAPDUMP _ DIR / cassandra - ` date + % s ` - pid $ $ . hprof " <nl> fi <nl> <nl> - # GC logging options - - uncomment to enable <nl> - # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintGCDetails " <nl> - # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintGCDateStamps " <nl> - # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintHeapAtGC " <nl> - # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintTenuringDistribution " <nl> - # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintGCApplicationStoppedTime " <nl> - # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintPromotionFailure " <nl> - # JVM _ OPTS = " $ JVM _ OPTS - XX : PrintFLSStatistics = 1 " <nl> - # JVM _ OPTS = " $ JVM _ OPTS - Xloggc : / var / log / cassandra / gc . log " <nl> - # JVM _ OPTS = " $ JVM _ OPTS - XX : + UseGCLogFileRotation " <nl> - # JVM _ OPTS = " $ JVM _ OPTS - XX : NumberOfGCLogFiles = 10 " <nl> - # JVM _ OPTS = " $ JVM _ OPTS - XX : GCLogFileSize = 10M " <nl> - <nl> # Configure the following for JEMallocAllocator and if jemalloc is not available in the system <nl> # library path ( Example : / usr / local / lib / ) . Usually " make install " will do the right thing . <nl> # export LD _ LIBRARY _ PATH = < JEMALLOC _ HOME > / lib / <nl> diff - - git a / conf / jvm . options b / conf / jvm . options <nl> new file mode 100644 <nl> index 0000000 . . 60f0f10 <nl> - - - / dev / null <nl> + + + b / conf / jvm . options <nl> @ @ - 0 , 0 + 1 , 105 @ @ <nl> + # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # <nl> + # jvm . options # <nl> + # # <nl> + # - all flags defined here will be used by cassandra to startup the JVM # <nl> + # - one flag should be specified per line # <nl> + # - lines that do not start with ' - ' will be ignored # <nl> + # - only static flags are accepted ( no variables or parameters ) # <nl> + # - dynamic flags will be appended to these on cassandra - env # <nl> + # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # <nl> + <nl> + # # # # # # # # # # # # # # # # # <nl> + # HEAP SETTINGS # <nl> + # # # # # # # # # # # # # # # # # <nl> + <nl> + # Heap size is automatically calculated by cassandra - env based on this <nl> + # formula : max ( min ( 1 / 2 ram , 1024MB ) , min ( 1 / 4 ram , 8GB ) ) <nl> + # That is : <nl> + # - calculate 1 / 2 ram and cap to 1024MB <nl> + # - calculate 1 / 4 ram and cap to 8192MB <nl> + # - pick the max <nl> + # <nl> + # For production use you may wish to adjust this for your environment . <nl> + # If that ' s the case , uncomment the - Xmx and Xms options below to override the <nl> + # automatic calculation of JVM heap memory . <nl> + # <nl> + # It is recommended to set min ( - Xms ) and max ( - Xmx ) heap sizes to <nl> + # the same value to avoid stop - the - world GC pauses during resize , and <nl> + # so that we can lock the heap in memory on startup to prevent any <nl> + # of it from being swapped out . <nl> + # - Xms4G <nl> + # - Xmx4G <nl> + <nl> + # Young generation size is automatically calculated by cassandra - env <nl> + # based on this formula : min ( 100 * num _ cores , 1 / 4 * heap size ) <nl> + # <nl> + # The main trade - off for the young generation is that the larger it <nl> + # is , the longer GC pause times will be . The shorter it is , the more <nl> + # expensive GC will be ( usually ) . <nl> + # <nl> + # It is not recommended to set the young generation size if using the <nl> + # G1 GC , since that will override the target pause - time goal . <nl> + # More info : http : / / www . oracle . com / technetwork / articles / java / g1gc - 1984535 . html <nl> + # <nl> + # The example below assumes a modern 8 - core + machine for decent <nl> + # times . If in doubt , and if you do not particularly want to tweak , go <nl> + # 100 MB per physical CPU core . <nl> + # - Xmn800M <nl> + <nl> + # # # # # # # # # # # # # # # # # <nl> + # GC SETTINGS # <nl> + # # # # # # # # # # # # # # # # # <nl> + <nl> + # # # CMS Settings <nl> + <nl> + - XX : + UseParNewGC <nl> + - XX : + UseConcMarkSweepGC <nl> + - XX : + CMSParallelRemarkEnabled <nl> + - XX : SurvivorRatio = 8 <nl> + - XX : MaxTenuringThreshold = 1 <nl> + - XX : CMSInitiatingOccupancyFraction = 75 <nl> + - XX : + UseCMSInitiatingOccupancyOnly <nl> + - XX : CMSWaitDuration = 10000 <nl> + - XX : + CMSParallelInitialMarkEnabled <nl> + - XX : + CMSEdenChunksRecordAlways <nl> + # some JVMs will fill up their heap when accessed via JMX , see CASSANDRA - 6541 <nl> + - XX : + CMSClassUnloadingEnabled <nl> + <nl> + # # # G1 Settings ( experimental , comment previous section and uncomment section below to enable ) <nl> + <nl> + # # Use the Hotspot garbage - first collector . <nl> + # - XX : + UseG1GC <nl> + # <nl> + # # Have the JVM do less remembered set work during STW , instead <nl> + # # preferring concurrent GC . Reduces p99 . 9 latency . <nl> + # - XX : G1RSetUpdatingPauseTimePercent = 5 <nl> + # <nl> + # # Main G1GC tunable : lowering the pause target will lower throughput and vise versa . <nl> + # # 200ms is the JVM default and lowest viable setting <nl> + # # 1000ms increases throughput . Keep it smaller than the timeouts in cassandra . yaml . <nl> + # - XX : MaxGCPauseMillis = 500 <nl> + <nl> + # # Optional G1 Settings <nl> + <nl> + # Save CPU time on large ( > = 16GB ) heaps by delaying region scanning <nl> + # until the heap is 70 % full . The default in Hotspot 8u40 is 40 % . <nl> + # - XX : InitiatingHeapOccupancyPercent = 70 <nl> + <nl> + # The JVM maximum is 8 PGC threads and 1 / 4 of that for ConcGC . <nl> + # Machines with > 10 cores may need additional threads . Increase to < = full cores . <nl> + # - XX : ParallelGCThreads = 16 <nl> + # - XX : ConcGCThreads = 16 <nl> + <nl> + # # # GC logging options - - uncomment to enable <nl> + <nl> + # - XX : + PrintGCDetails <nl> + # - XX : + PrintGCDateStamps <nl> + # - XX : + PrintHeapAtGC <nl> + # - XX : + PrintTenuringDistribution <nl> + # - XX : + PrintGCApplicationStoppedTime <nl> + # - XX : + PrintPromotionFailure <nl> + # - XX : PrintFLSStatistics = 1 <nl> + # - Xloggc : / var / log / cassandra / gc . log <nl> + # - XX : + UseGCLogFileRotation <nl> + # - XX : NumberOfGCLogFiles = 10 <nl> + # - XX : GCLogFileSize = 10M <nl> diff - - git a / debian / cassandra . install b / debian / cassandra . install <nl> index ecb6f49 . . 1b66426 100644 <nl> - - - a / debian / cassandra . install <nl> + + + b / debian / cassandra . install <nl> @ @ - 5 , 6 + 5 , 7 @ @ conf / commitlog _ archiving . properties etc / cassandra <nl> conf / cassandra - topology . properties etc / cassandra <nl> conf / logback . xml etc / cassandra <nl> conf / logback - tools . xml etc / cassandra <nl> + conf / jvm . options etc / cassandra <nl> conf / triggers / * etc / cassandra / triggers <nl> debian / cassandra . in . sh usr / share / cassandra <nl> debian / cassandra . conf etc / security / limits . d <nl> diff - - git a / debian / init b / debian / init <nl> index 56f2523 . . a835811 100644 <nl> - - - a / debian / init <nl> + + + b / debian / init <nl> @ @ - 21 , 6 + 21 , 7 @ @ SCRIPTNAME = / etc / init . d / $ NAME <nl> CONFDIR = / etc / cassandra <nl> WAIT _ FOR _ START = 10 <nl> CASSANDRA _ HOME = / usr / share / cassandra <nl> + CASSANDRA _ CONF = $ CONFDIR <nl> FD _ LIMIT = 100000 <nl> <nl> [ - e / usr / share / cassandra / apache - cassandra . jar ] | | exit 0
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 54b505a . . 66e34b6 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 6 @ @ 
 3 . 0 - rc2 
 + * Revert CASSANDRA - 7486 , make CMS default GC , move GC config to 
 + conf / jvm . options ( CASSANDRA - 10403 ) 
 * Fix TeeingAppender causing some logs to be truncated / empty ( CASSANDRA - 10447 ) 
 * Allow EACH _ QUORUM for reads ( CASSANDRA - 9602 ) 
 * Fix potential ClassCastException while upgrading ( CASSANDRA - 10468 ) 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index 1176dcd . . 9ff43a2 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 54 , 7 + 54 , 7 @ @ Upgrading 
 - Max mutation size is now configurable via max _ mutation _ size _ in _ kb setting in 
 cassandra . yaml ; the default is half the size commitlog _ segment _ size _ in _ mb * 1024 . 
 - 3 . 0 requires Java 8u40 or later . 
 - - The default JVM GC has been changed to G1GC . 
 + - Garbage collection options were moved from cassandra - env to jvm . options file . 
 - New transaction log files have been introduced to replace the compactions _ in _ progress 
 system table , temporary file markers ( tmp and tmplink ) and sstable ancerstors . 
 Therefore , compaction metadata no longer contains ancestors . Transaction log files 
 diff - - git a / conf / cassandra - env . ps1 b / conf / cassandra - env . ps1 
 index 7a4a61e . . 3c9d815 100644 
 - - - a / conf / cassandra - env . ps1 
 + + + b / conf / cassandra - env . ps1 
 @ @ - 128 , 16 + 128 , 18 @ @ Function CalculateHeapSizes 
 } 
 
 # Validate that we need to run this function and that our config is good 
 - if ( $ env : MAX _ HEAP _ SIZE ) 
 + if ( ( $ env : MAX _ HEAP _ SIZE - and ! $ env : HEAP _ NEWSIZE ) - or ( ! $ env : MAX _ HEAP _ SIZE - and $ env : HEAP _ NEWSIZE ) ) 
 { 
 - return 
 + echo " Please set or unset MAX _ HEAP _ SIZE and HEAP _ NEWSIZE in pairs . Aborting startup . " 
 + exit 1 
 } 
 
 $ memObject = Get - WMIObject - class win32 _ physicalmemory 
 if ( $ memObject - eq $ null ) 
 { 
 - echo " WARNING ! Could not determine system memory . Defaulting to 2G heap . Manually override in conf \ cassandra - env . ps1 for different heap values . " 
 + echo " WARNING ! Could not determine system memory . Defaulting to 2G heap , 512M newgen . Manually override in conf \ jvm . options for different heap values . " 
 $ env : MAX _ HEAP _ SIZE = " 2048M " 
 + $ env : HEAP _ NEWSIZE = " 512M " 
 return 
 } 
 
 @ @ - 174 , 6 + 176 , 20 @ @ Function CalculateHeapSizes 
 $ maxHeapMB = $ quarterMem 
 } 
 $ env : MAX _ HEAP _ SIZE = [ System . Convert ] : : ToString ( $ maxHeapMB ) + " M " 
 + 
 + # Young gen : min ( max _ sensible _ per _ modern _ cpu _ core * num _ cores , 1 / 4 
 + $ maxYGPerCore = 100 
 + $ maxYGTotal = $ maxYGPerCore * $ systemCores 
 + $ desiredYG = [ Math ] : : Truncate ( $ maxHeapMB / 4 ) 
 + 
 + if ( $ desiredYG - gt $ maxYGTotal ) 
 + { 
 + $ env : HEAP _ NEWSIZE = [ System . Convert ] : : ToString ( $ maxYGTotal ) + " M " 
 + } 
 + else 
 + { 
 + $ env : HEAP _ NEWSIZE = [ System . Convert ] : : ToString ( $ desiredYG ) + " M " 
 + } 
 } 
 
 # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 @ @ - 294 , 12 + 310 , 71 @ @ Function SetCassandraEnvironment 
 # Override these to set the amount of memory to allocate to the JVM at 
 # start - up . For production use you may wish to adjust this for your 
 # environment . MAX _ HEAP _ SIZE is the total amount of memory dedicated 
 - # to the Java heap . 
 + # to the Java heap . HEAP _ NEWSIZE refers to the size of the young 
 + # generation . Both MAX _ HEAP _ SIZE and HEAP _ NEWSIZE should be either set 
 + # or not ( if you set one , set the other ) . 
 + # 
 + # The main trade - off for the young generation is that the larger it 
 + # is , the longer GC pause times will be . The shorter it is , the more 
 + # expensive GC will be ( usually ) . 
 + # 
 + # The example HEAP _ NEWSIZE assumes a modern 8 - core + machine for decent 
 + # times . If in doubt , and if you do not particularly want to tweak , go 
 + # 100 MB per physical CPU core . 
 
 # $ env : MAX _ HEAP _ SIZE = " 4096M " 
 + # $ env : HEAP _ NEWSIZE = " 800M " 
 CalculateHeapSizes 
 
 ParseJVMInfo 
 + 
 + # Read user - defined JVM options from jvm . options file 
 + $ content = Get - Content " $ env : CASSANDRA _ CONF \ jvm . options " 
 + for ( $ i = 0 ; $ i - lt $ content . Count ; $ i + + ) 
 + { 
 + $ line = $ content [ $ i ] 
 + if ( $ line . StartsWith ( " - " ) ) 
 + { 
 + $ env : JVM _ OPTS = " $ env : JVM _ OPTS $ line " 
 + } 
 + } 
 + 
 + $ defined _ xmn = $ env : JVM _ OPTS - like ' * Xmn * ' 
 + $ defined _ xmx = $ env : JVM _ OPTS - like ' * Xmx * ' 
 + $ defined _ xms = $ env : JVM _ OPTS - like ' * Xms * ' 
 + $ using _ cms = $ env : JVM _ OPTS - like ' * UseConcMarkSweepGC * ' 
 + 
 + # We only set - Xms and - Xmx if they were not defined on jvm . options file 
 + # If defined , both Xmx and Xms should be defined together . 
 + if ( ( $ defined _ xmx - eq $ false ) - and ( $ defined _ xms - eq $ false ) ) 
 + { 
 + $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Xms $ env : MAX _ HEAP _ SIZE " 
 + $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Xmx $ env : MAX _ HEAP _ SIZE " 
 + } 
 + elseif ( ( $ defined _ xmx - eq $ false ) - or ( $ defined _ xms - eq $ false ) ) 
 + { 
 + echo " Please set or unset - Xmx and - Xms flags in pairs on jvm . options file . " 
 + exit 
 + } 
 + 
 + # We only set - Xmn flag if it was not defined in jvm . options file 
 + # and if the CMS GC is being used 
 + # If defined , both Xmn and Xmx should be defined together . 
 + if ( ( $ defined _ xmn - eq $ true ) - and ( $ defined _ xmx - eq $ false ) ) 
 + { 
 + echo " Please set or unset - Xmx and - Xmn flags in pairs on jvm . options file . " 
 + exit 
 + } 
 + elseif ( ( $ defined _ xmn - eq $ false ) - and ( $ using _ cms - eq $ true ) ) 
 + { 
 + $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Xmn $ env : HEAP _ NEWSIZE " 
 + } 
 + 
 + if ( ( $ env : JVM _ ARCH - eq " 64 - Bit " ) - and ( $ using _ cms - eq $ true ) ) 
 + { 
 + $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + UseCondCardMark " 
 + } 
 + 
 # Add sigar env - see Cassandra - 7838 
 $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Djava . library . path = " " $ env : CASSANDRA _ HOME \ lib \ sigar - bin " " " 
 
 @ @ - 355 , 10 + 430 , 6 @ @ Function SetCassandraEnvironment 
 # see http : / / tech . stolsvik . com / 2010 / 01 / linux - java - thread - priorities - workar 
 $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : ThreadPriorityPolicy = 42 " 
 
 - # min and max heap sizes should be set to the same value to avoid 
 - # stop - the - world GC pauses during resize . 
 - $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Xms $ env : MAX _ HEAP _ SIZE " 
 - $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Xmx $ env : MAX _ HEAP _ SIZE " 
 $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + HeapDumpOnOutOfMemoryError " 
 
 # Per - thread stack size . 
 @ @ - 367 , 28 + 438 , 6 @ @ Function SetCassandraEnvironment 
 # Larger interned string table , for gossip ' s benefit ( CASSANDRA - 6410 ) 
 $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : StringTableSize = 1000003 " 
 
 - # GC tuning options 
 - # Use the Hotspot garbage - first collector . 
 - $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + UseG1GC " 
 - 
 - # Have the JVM do less remembered set work during STW , instead 
 - # preferring concurrent GC . Reduces p99 . 9 latency . 
 - $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : G1RSetUpdatingPauseTimePercent = 5 " 
 - 
 - # The JVM maximum is 8 PGC threads and 1 / 4 of that for ConcGC . 
 - # Machines with > 10 cores may need additional threads . Increase to < = full cores . 
 - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : ParallelGCThreads = 16 " 
 - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : ConcGCThreads = 16 " 
 - 
 - # Main G1GC tunable : lowering the pause target will lower throughput and vise versa . 
 - # 200ms is the JVM default and lowest viable setting 
 - # 1000ms increases throughput . Keep it smaller than the timeouts in cassandra . yaml . 
 - $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : MaxGCPauseMillis = 500 " 
 - 
 - # Save CPU time on large ( > = 16GB ) heaps by delaying region scanning 
 - 	 # until the heap is 70 % full . The default in Hotspot 8u40 is 40 % . 
 - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : InitiatingHeapOccupancyPercent = 70 " 
 - 
 # Make sure all memory is faulted and zeroed on startup . 
 # This helps prevent soft faults in containers and makes 
 # transparent hugepage allocation more effective . 
 @ @ - 404 , 19 + 453 , 6 @ @ Function SetCassandraEnvironment 
 # http : / / www . evanjones . ca / jvm - mmap - pause . html 
 $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + PerfDisableSharedMem " 
 
 - # GC logging options - - uncomment to enable 
 - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + PrintGCDetails " 
 - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + PrintGCDateStamps " 
 - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + PrintHeapAtGC " 
 - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + PrintTenuringDistribution " 
 - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + PrintGCApplicationStoppedTime " 
 - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + PrintPromotionFailure " 
 - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : PrintFLSStatistics = 1 " 
 - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Xloggc : $ env : CASSANDRA _ HOME / logs / gc . log " 
 - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + UseGCLogFileRotation " 
 - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : NumberOfGCLogFiles = 10 " 
 - # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : GCLogFileSize = 10M " 
 - 
 # Configure the following for JEMallocAllocator and if jemalloc is not available in the system 
 # library path . 
 # set LD _ LIBRARY _ PATH = < JEMALLOC _ HOME > / lib / 
 diff - - git a / conf / cassandra - env . sh b / conf / cassandra - env . sh 
 index 0a5bada . . 1d72070 100644 
 - - - a / conf / cassandra - env . sh 
 + + + b / conf / cassandra - env . sh 
 @ @ - 71 , 6 + 71 , 19 @ @ calculate _ heap _ sizes ( ) 
 max _ heap _ size _ in _ mb = " $ quarter _ system _ memory _ in _ mb " 
 fi 
 MAX _ HEAP _ SIZE = " $ { max _ heap _ size _ in _ mb } M " 
 + 
 + # Young gen : min ( max _ sensible _ per _ modern _ cpu _ core * num _ cores , 1 / 4 * heap size ) 
 + max _ sensible _ yg _ per _ core _ in _ mb = " 100 " 
 + max _ sensible _ yg _ in _ mb = ` expr $ max _ sensible _ yg _ per _ core _ in _ mb " * " $ system _ cpu _ cores ` 
 + 
 + desired _ yg _ in _ mb = ` expr $ max _ heap _ size _ in _ mb / 4 ` 
 + 
 + if [ " $ desired _ yg _ in _ mb " - gt " $ max _ sensible _ yg _ in _ mb " ] 
 + then 
 + HEAP _ NEWSIZE = " $ { max _ sensible _ yg _ in _ mb } M " 
 + else 
 + HEAP _ NEWSIZE = " $ { desired _ yg _ in _ mb } M " 
 + fi 
 } 
 
 # Determine the sort of JVM we ' ll be running on . 
 @ @ - 89 , 19 + 102 , 54 @ @ if [ " $ JVM _ VERSION " \ < " 1 . 8 " ] & & [ " $ JVM _ PATCH _ VERSION " \ < " 40 " ] ; then 
 exit 1 ; 
 fi 
 
 + jvm = ` echo " $ java _ ver _ output " | grep - A 1 ' java version ' | awk ' NR = = 2 { print $ 1 } ' ` 
 + case " $ jvm " in 
 + OpenJDK ) 
 + JVM _ VENDOR = OpenJDK 
 + # this will be " 64 - Bit " or " 32 - Bit " 
 + JVM _ ARCH = ` echo " $ java _ ver _ output " | awk ' NR = = 3 { print $ 2 } ' ` 
 + ; ; 
 + " Java ( TM ) " ) 
 + JVM _ VENDOR = Oracle 
 + # this will be " 64 - Bit " or " 32 - Bit " 
 + JVM _ ARCH = ` echo " $ java _ ver _ output " | awk ' NR = = 3 { print $ 3 } ' ` 
 + ; ; 
 + * ) 
 + # Help fill in other JVM values 
 + JVM _ VENDOR = other 
 + JVM _ ARCH = unknown 
 + ; ; 
 + esac 
 + 
 # Override these to set the amount of memory to allocate to the JVM at 
 # start - up . For production use you may wish to adjust this for your 
 # environment . MAX _ HEAP _ SIZE is the total amount of memory dedicated 
 - # to the Java heap . 
 + # to the Java heap . HEAP _ NEWSIZE refers to the size of the young 
 + # generation . Both MAX _ HEAP _ SIZE and HEAP _ NEWSIZE should be either set 
 + # or not ( if you set one , set the other ) . 
 + # 
 + # The main trade - off for the young generation is that the larger it 
 + # is , the longer GC pause times will be . The shorter it is , the more 
 + # expensive GC will be ( usually ) . 
 + # 
 + # The example HEAP _ NEWSIZE assumes a modern 8 - core + machine for decent pause 
 + # times . If in doubt , and if you do not particularly want to tweak , go with 
 + # 100 MB per physical CPU core . 
 
 # MAX _ HEAP _ SIZE = " 4G " 
 + # HEAP _ NEWSIZE = " 800M " 
 
 # Set this to control the amount of arenas per - thread in glibc 
 # export MALLOC _ ARENA _ MAX = 4 
 
 # only calculate the size if it ' s not set manually 
 - if [ " x $ MAX _ HEAP _ SIZE " = " x " ] ; then 
 + if [ " x $ MAX _ HEAP _ SIZE " = " x " ] & & [ " x $ HEAP _ NEWSIZE " = " x " ] ; then 
 calculate _ heap _ sizes 
 + else 
 + if [ " x $ MAX _ HEAP _ SIZE " = " x " ] | | [ " x $ HEAP _ NEWSIZE " = " x " ] ; then 
 + echo " please set or unset MAX _ HEAP _ SIZE and HEAP _ NEWSIZE in pairs ( see cassandra - env . sh ) " 
 + exit 1 
 + fi 
 fi 
 
 if [ " x $ MALLOC _ ARENA _ MAX " = " x " ] ; then 
 @ @ - 158 , 41 + 206 , 54 @ @ esac 
 # Here we create the arguments that will get passed to the jvm when 
 # starting cassandra . 
 
 + # Read user - defined JVM options from jvm . options file 
 + JVM _ OPTS _ FILE = $ CASSANDRA _ CONF / jvm . options 
 + for opt in ` grep " ^ - " $ JVM _ OPTS _ FILE ` 
 + do 
 + JVM _ OPTS = " $ JVM _ OPTS $ opt " 
 + done 
 + 
 + # Check what parameters were defined on jvm . options file to avoid conflicts 
 + echo $ JVM _ OPTS | grep - q Xmn 
 + DEFINED _ XMN = $ ? 
 + echo $ JVM _ OPTS | grep - q Xmx 
 + DEFINED _ XMX = $ ? 
 + echo $ JVM _ OPTS | grep - q Xms 
 + DEFINED _ XMS = $ ? 
 + echo $ JVM _ OPTS | grep - q UseConcMarkSweepGC 
 + USING _ CMS = $ ? 
 + 
 + # We only set - Xms and - Xmx if they were not defined on jvm . options file 
 + # If defined , both Xmx and Xms should be defined together . 
 + if [ $ DEFINED _ XMX - ne 0 ] & & [ $ DEFINED _ XMS - ne 0 ] ; then 
 + JVM _ OPTS = " $ JVM _ OPTS - Xms $ { MAX _ HEAP _ SIZE } " 
 + JVM _ OPTS = " $ JVM _ OPTS - Xmx $ { MAX _ HEAP _ SIZE } " 
 + elif [ $ DEFINED _ XMX - ne 0 ] | | [ $ DEFINED _ XMS - ne 0 ] ; then 
 + echo " Please set or unset - Xmx and - Xms flags in pairs on jvm . options file . " 
 + exit 1 
 + fi 
 + 
 + # We only set - Xmn flag if it was not defined in jvm . options file 
 + # and if the CMS GC is being used 
 + # If defined , both Xmn and Xmx should be defined together . 
 + if [ $ DEFINED _ XMN - eq 0 ] & & [ $ DEFINED _ XMX - ne 0 ] ; then 
 + echo " Please set or unset - Xmx and - Xmn flags in pairs on jvm . options file . " 
 + exit 1 
 + elif [ $ DEFINED _ XMN - ne 0 ] & & [ $ USING _ CMS - eq 0 ] ; then 
 + JVM _ OPTS = " $ JVM _ OPTS - Xmn $ { HEAP _ NEWSIZE } " 
 + fi 
 + 
 + if [ " $ JVM _ ARCH " = " 64 - Bit " ] & & [ $ USING _ CMS - eq 0 ] ; then 
 + JVM _ OPTS = " $ JVM _ OPTS - XX : + UseCondCardMark " 
 + fi 
 + 
 # enable assertions . disabling this in production will give a modest 
 # performance benefit ( around 5 % ) . 
 JVM _ OPTS = " $ JVM _ OPTS - ea " 
 
 - # min and max heap sizes should be set to the same value to avoid 
 - # stop - the - world GC pauses during resize , and so that we can lock the 
 - # heap in memory on startup to prevent any of it from being swapped 
 - # out . 
 - JVM _ OPTS = " $ JVM _ OPTS - Xms $ { MAX _ HEAP _ SIZE } " 
 - JVM _ OPTS = " $ JVM _ OPTS - Xmx $ { MAX _ HEAP _ SIZE } " 
 - 
 # Per - thread stack size . 
 JVM _ OPTS = " $ JVM _ OPTS - Xss256k " 
 
 - # Use the Hotspot garbage - first collector . 
 - JVM _ OPTS = " $ JVM _ OPTS - XX : + UseG1GC " 
 - 
 - # Have the JVM do less remembered set work during STW , instead 
 - # preferring concurrent GC . Reduces p99 . 9 latency . 
 - JVM _ OPTS = " $ JVM _ OPTS - XX : G1RSetUpdatingPauseTimePercent = 5 " 
 - 
 - # The JVM maximum is 8 PGC threads and 1 / 4 of that for ConcGC . 
 - # Machines with > 10 cores may need additional threads . Increase to < = full cores . 
 - # JVM _ OPTS = " $ JVM _ OPTS - XX : ParallelGCThreads = 16 " 
 - # JVM _ OPTS = " $ JVM _ OPTS - XX : ConcGCThreads = 16 " 
 - 
 - # Main G1GC tunable : lowering the pause target will lower throughput and vise versa . 
 - # 200ms is the JVM default and lowest viable setting 
 - # 1000ms increases throughput . Keep it smaller than the timeouts in cassandra . yaml . 
 - JVM _ OPTS = " $ JVM _ OPTS - XX : MaxGCPauseMillis = 500 " 
 - 
 - # Save CPU time on large ( > = 16GB ) heaps by delaying region scanning 
 - # until the heap is 70 % full . The default in Hotspot 8u40 is 40 % . 
 - # JVM _ OPTS = " $ JVM _ OPTS - XX : InitiatingHeapOccupancyPercent = 70 " 
 - 
 # Make sure all memory is faulted and zeroed on startup . 
 # This helps prevent soft faults in containers and makes 
 # transparent hugepage allocation more effective . 
 @ @ - 230 , 19 + 291 , 6 @ @ if [ " x $ CASSANDRA _ HEAPDUMP _ DIR " ! = " x " ] ; then 
 JVM _ OPTS = " $ JVM _ OPTS - XX : HeapDumpPath = $ CASSANDRA _ HEAPDUMP _ DIR / cassandra - ` date + % s ` - pid $ $ . hprof " 
 fi 
 
 - # GC logging options - - uncomment to enable 
 - # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintGCDetails " 
 - # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintGCDateStamps " 
 - # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintHeapAtGC " 
 - # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintTenuringDistribution " 
 - # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintGCApplicationStoppedTime " 
 - # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintPromotionFailure " 
 - # JVM _ OPTS = " $ JVM _ OPTS - XX : PrintFLSStatistics = 1 " 
 - # JVM _ OPTS = " $ JVM _ OPTS - Xloggc : / var / log / cassandra / gc . log " 
 - # JVM _ OPTS = " $ JVM _ OPTS - XX : + UseGCLogFileRotation " 
 - # JVM _ OPTS = " $ JVM _ OPTS - XX : NumberOfGCLogFiles = 10 " 
 - # JVM _ OPTS = " $ JVM _ OPTS - XX : GCLogFileSize = 10M " 
 - 
 # Configure the following for JEMallocAllocator and if jemalloc is not available in the system 
 # library path ( Example : / usr / local / lib / ) . Usually " make install " will do the right thing . 
 # export LD _ LIBRARY _ PATH = < JEMALLOC _ HOME > / lib / 
 diff - - git a / conf / jvm . options b / conf / jvm . options 
 new file mode 100644 
 index 0000000 . . 60f0f10 
 - - - / dev / null 
 + + + b / conf / jvm . options 
 @ @ - 0 , 0 + 1 , 105 @ @ 
 + # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
 + # jvm . options # 
 + # # 
 + # - all flags defined here will be used by cassandra to startup the JVM # 
 + # - one flag should be specified per line # 
 + # - lines that do not start with ' - ' will be ignored # 
 + # - only static flags are accepted ( no variables or parameters ) # 
 + # - dynamic flags will be appended to these on cassandra - env # 
 + # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
 + 
 + # # # # # # # # # # # # # # # # # 
 + # HEAP SETTINGS # 
 + # # # # # # # # # # # # # # # # # 
 + 
 + # Heap size is automatically calculated by cassandra - env based on this 
 + # formula : max ( min ( 1 / 2 ram , 1024MB ) , min ( 1 / 4 ram , 8GB ) ) 
 + # That is : 
 + # - calculate 1 / 2 ram and cap to 1024MB 
 + # - calculate 1 / 4 ram and cap to 8192MB 
 + # - pick the max 
 + # 
 + # For production use you may wish to adjust this for your environment . 
 + # If that ' s the case , uncomment the - Xmx and Xms options below to override the 
 + # automatic calculation of JVM heap memory . 
 + # 
 + # It is recommended to set min ( - Xms ) and max ( - Xmx ) heap sizes to 
 + # the same value to avoid stop - the - world GC pauses during resize , and 
 + # so that we can lock the heap in memory on startup to prevent any 
 + # of it from being swapped out . 
 + # - Xms4G 
 + # - Xmx4G 
 + 
 + # Young generation size is automatically calculated by cassandra - env 
 + # based on this formula : min ( 100 * num _ cores , 1 / 4 * heap size ) 
 + # 
 + # The main trade - off for the young generation is that the larger it 
 + # is , the longer GC pause times will be . The shorter it is , the more 
 + # expensive GC will be ( usually ) . 
 + # 
 + # It is not recommended to set the young generation size if using the 
 + # G1 GC , since that will override the target pause - time goal . 
 + # More info : http : / / www . oracle . com / technetwork / articles / java / g1gc - 1984535 . html 
 + # 
 + # The example below assumes a modern 8 - core + machine for decent 
 + # times . If in doubt , and if you do not particularly want to tweak , go 
 + # 100 MB per physical CPU core . 
 + # - Xmn800M 
 + 
 + # # # # # # # # # # # # # # # # # 
 + # GC SETTINGS # 
 + # # # # # # # # # # # # # # # # # 
 + 
 + # # # CMS Settings 
 + 
 + - XX : + UseParNewGC 
 + - XX : + UseConcMarkSweepGC 
 + - XX : + CMSParallelRemarkEnabled 
 + - XX : SurvivorRatio = 8 
 + - XX : MaxTenuringThreshold = 1 
 + - XX : CMSInitiatingOccupancyFraction = 75 
 + - XX : + UseCMSInitiatingOccupancyOnly 
 + - XX : CMSWaitDuration = 10000 
 + - XX : + CMSParallelInitialMarkEnabled 
 + - XX : + CMSEdenChunksRecordAlways 
 + # some JVMs will fill up their heap when accessed via JMX , see CASSANDRA - 6541 
 + - XX : + CMSClassUnloadingEnabled 
 + 
 + # # # G1 Settings ( experimental , comment previous section and uncomment section below to enable ) 
 + 
 + # # Use the Hotspot garbage - first collector . 
 + # - XX : + UseG1GC 
 + # 
 + # # Have the JVM do less remembered set work during STW , instead 
 + # # preferring concurrent GC . Reduces p99 . 9 latency . 
 + # - XX : G1RSetUpdatingPauseTimePercent = 5 
 + # 
 + # # Main G1GC tunable : lowering the pause target will lower throughput and vise versa . 
 + # # 200ms is the JVM default and lowest viable setting 
 + # # 1000ms increases throughput . Keep it smaller than the timeouts in cassandra . yaml . 
 + # - XX : MaxGCPauseMillis = 500 
 + 
 + # # Optional G1 Settings 
 + 
 + # Save CPU time on large ( > = 16GB ) heaps by delaying region scanning 
 + # until the heap is 70 % full . The default in Hotspot 8u40 is 40 % . 
 + # - XX : InitiatingHeapOccupancyPercent = 70 
 + 
 + # The JVM maximum is 8 PGC threads and 1 / 4 of that for ConcGC . 
 + # Machines with > 10 cores may need additional threads . Increase to < = full cores . 
 + # - XX : ParallelGCThreads = 16 
 + # - XX : ConcGCThreads = 16 
 + 
 + # # # GC logging options - - uncomment to enable 
 + 
 + # - XX : + PrintGCDetails 
 + # - XX : + PrintGCDateStamps 
 + # - XX : + PrintHeapAtGC 
 + # - XX : + PrintTenuringDistribution 
 + # - XX : + PrintGCApplicationStoppedTime 
 + # - XX : + PrintPromotionFailure 
 + # - XX : PrintFLSStatistics = 1 
 + # - Xloggc : / var / log / cassandra / gc . log 
 + # - XX : + UseGCLogFileRotation 
 + # - XX : NumberOfGCLogFiles = 10 
 + # - XX : GCLogFileSize = 10M 
 diff - - git a / debian / cassandra . install b / debian / cassandra . install 
 index ecb6f49 . . 1b66426 100644 
 - - - a / debian / cassandra . install 
 + + + b / debian / cassandra . install 
 @ @ - 5 , 6 + 5 , 7 @ @ conf / commitlog _ archiving . properties etc / cassandra 
 conf / cassandra - topology . properties etc / cassandra 
 conf / logback . xml etc / cassandra 
 conf / logback - tools . xml etc / cassandra 
 + conf / jvm . options etc / cassandra 
 conf / triggers / * etc / cassandra / triggers 
 debian / cassandra . in . sh usr / share / cassandra 
 debian / cassandra . conf etc / security / limits . d 
 diff - - git a / debian / init b / debian / init 
 index 56f2523 . . a835811 100644 
 - - - a / debian / init 
 + + + b / debian / init 
 @ @ - 21 , 6 + 21 , 7 @ @ SCRIPTNAME = / etc / init . d / $ NAME 
 CONFDIR = / etc / cassandra 
 WAIT _ FOR _ START = 10 
 CASSANDRA _ HOME = / usr / share / cassandra 
 + CASSANDRA _ CONF = $ CONFDIR 
 FD _ LIMIT = 100000 
 
 [ - e / usr / share / cassandra / apache - cassandra . jar ] | | exit 0

NEAREST DIFF:
ELIMINATEDSENTENCE
