BLEU SCORE: 0.033864985683445356

TEST MSG: Delay hints store excise by write timeout to avoid race with decommission
GENERATED MSG: Fix Digest mismatch Exception if hints file has UnknownColumnFamily

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index cf470d6 . . 857cf96 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 17 <nl> + * Delay hints store excise by write timeout to avoid race with decommission ( CASSANDRA - 13740 ) <nl> * Deprecate background repair and probablistic read _ repair _ chance table options <nl> ( CASSANDRA - 13910 ) <nl> * Add missed CQL keywords to documentation ( CASSANDRA - 14359 ) <nl> diff - - git a / src / java / org / apache / cassandra / hints / HintsCatalog . java b / src / java / org / apache / cassandra / hints / HintsCatalog . java <nl> index 6d01629 . . d1f6fba 100644 <nl> - - - a / src / java / org / apache / cassandra / hints / HintsCatalog . java <nl> + + + b / src / java / org / apache / cassandra / hints / HintsCatalog . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . nio . file . Files ; <nl> import java . util . * ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> import java . util . stream . Stream ; <nl> + import javax . annotation . Nullable ; <nl> <nl> import com . google . common . collect . ImmutableMap ; <nl> <nl> @ @ - 94 , 6 + 95 , 12 @ @ final class HintsCatalog <nl> : store ; <nl> } <nl> <nl> + @ Nullable <nl> + HintsStore getNullable ( UUID hostId ) <nl> + { <nl> + return stores . get ( hostId ) ; <nl> + } <nl> + <nl> / * * <nl> * Delete all hints for all host ids . <nl> * <nl> diff - - git a / src / java / org / apache / cassandra / hints / HintsService . java b / src / java / org / apache / cassandra / hints / HintsService . java <nl> index 9cd4ed3 . . 268ee1f 100644 <nl> - - - a / src / java / org / apache / cassandra / hints / HintsService . java <nl> + + + b / src / java / org / apache / cassandra / hints / HintsService . java <nl> @ @ - 302 , 7 + 302 , 7 @ @ public final class HintsService implements HintsServiceMBean <nl> * / <nl> public void excise ( UUID hostId ) <nl> { <nl> - HintsStore store = catalog . get ( hostId ) ; <nl> + HintsStore store = catalog . getNullable ( hostId ) ; <nl> if ( store = = null ) <nl> return ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / hints / HintsStore . java b / src / java / org / apache / cassandra / hints / HintsStore . java <nl> index c066331 . . bb3aa0f 100644 <nl> - - - a / src / java / org / apache / cassandra / hints / HintsStore . java <nl> + + + b / src / java / org / apache / cassandra / hints / HintsStore . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . util . concurrent . ConcurrentHashMap ; <nl> import java . util . concurrent . ConcurrentLinkedDeque ; <nl> import java . util . concurrent . ConcurrentLinkedQueue ; <nl> <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 77 , 6 + 78 , 12 @ @ final class HintsStore <nl> return new HintsStore ( hostId , hintsDirectory , writerParams , descriptors ) ; <nl> } <nl> <nl> + @ VisibleForTesting <nl> + int getDispatchQueueSize ( ) <nl> + { <nl> + return dispatchDequeue . size ( ) ; <nl> + } <nl> + <nl> InetAddress address ( ) <nl> { <nl> return StorageService . instance . getEndpointForHostId ( hostId ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 77fcb81 . . 5f76f7d 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 2276 , 7 + 2276 , 12 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> UUID hostId = tokenMetadata . getHostId ( endpoint ) ; <nl> if ( hostId ! = null & & tokenMetadata . isMember ( endpoint ) ) <nl> - HintsService . instance . excise ( hostId ) ; <nl> + { <nl> + / / enough time for writes to expire and MessagingService timeout reporter callback to fire , which is where <nl> + / / hints are mostly written from - using getMinRpcTimeout ( ) / 2 for the interval . <nl> + long delay = DatabaseDescriptor . getMinRpcTimeout ( ) + DatabaseDescriptor . getWriteRpcTimeout ( ) ; <nl> + ScheduledExecutors . optionalTasks . schedule ( ( ) - > HintsService . instance . excise ( hostId ) , delay , TimeUnit . MILLISECONDS ) ; <nl> + } <nl> <nl> removeEndpoint ( endpoint ) ; <nl> tokenMetadata . removeEndpoint ( endpoint ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / hints / HintsCatalogTest . java b / test / unit / org / apache / cassandra / hints / HintsCatalogTest . java <nl> index 51b6aa3 . . 928fd31 100644 <nl> - - - a / test / unit / org / apache / cassandra / hints / HintsCatalogTest . java <nl> + + + b / test / unit / org / apache / cassandra / hints / HintsCatalogTest . java <nl> @ @ - 19 , 16 + 19 , 42 @ @ package org . apache . cassandra . hints ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> + import java . nio . ByteBuffer ; <nl> import java . nio . file . Files ; <nl> import java . util . * ; <nl> <nl> import com . google . common . collect . ImmutableMap ; <nl> + import org . apache . cassandra . SchemaLoader ; <nl> + import org . apache . cassandra . config . Schema ; <nl> + import org . apache . cassandra . db . Mutation ; <nl> + import org . apache . cassandra . db . RowUpdateBuilder ; <nl> + import org . apache . cassandra . schema . KeyspaceParams ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> + import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> <nl> import static junit . framework . Assert . * ; <nl> + import static org . apache . cassandra . Util . dk ; <nl> <nl> public class HintsCatalogTest <nl> { <nl> + private static final String KEYSPACE = " hint _ test " ; <nl> + private static final String TABLE0 = " table _ 0 " ; <nl> + private static final String TABLE1 = " table _ 1 " ; <nl> + private static final String TABLE2 = " table _ 2 " ; <nl> + private static final int WRITE _ BUFFER _ SIZE = 256 < < 10 ; <nl> + <nl> + @ BeforeClass <nl> + public static void defineSchema ( ) <nl> + { <nl> + SchemaLoader . prepareServer ( ) ; <nl> + SchemaLoader . createKeyspace ( KEYSPACE , <nl> + KeyspaceParams . simple ( 1 ) , <nl> + SchemaLoader . standardCFMD ( KEYSPACE , TABLE0 ) , <nl> + SchemaLoader . standardCFMD ( KEYSPACE , TABLE1 ) , <nl> + SchemaLoader . standardCFMD ( KEYSPACE , TABLE2 ) ) ; <nl> + } <nl> + <nl> @ Test <nl> public void loadCompletenessAndOrderTest ( ) throws IOException <nl> { <nl> @ @ - 43 , 7 + 69 , 21 @ @ public class HintsCatalogTest <nl> } <nl> } <nl> <nl> - public static void loadCompletenessAndOrderTest ( File directory ) throws IOException <nl> + @ Test <nl> + public void exciseHintFiles ( ) throws IOException <nl> + { <nl> + File directory = Files . createTempDirectory ( null ) . toFile ( ) ; <nl> + try <nl> + { <nl> + exciseHintFiles ( directory ) ; <nl> + } <nl> + finally <nl> + { <nl> + directory . deleteOnExit ( ) ; <nl> + } <nl> + } <nl> + <nl> + private void loadCompletenessAndOrderTest ( File directory ) throws IOException <nl> { <nl> UUID hostId1 = UUID . randomUUID ( ) ; <nl> UUID hostId2 = UUID . randomUUID ( ) ; <nl> @ @ - 79 , 6 + 119 , 39 @ @ public class HintsCatalogTest <nl> assertNull ( store2 . poll ( ) ) ; <nl> } <nl> <nl> + private static void exciseHintFiles ( File directory ) throws IOException <nl> + { <nl> + UUID hostId = UUID . randomUUID ( ) ; <nl> + <nl> + HintsDescriptor descriptor1 = new HintsDescriptor ( hostId , System . currentTimeMillis ( ) ) ; <nl> + HintsDescriptor descriptor2 = new HintsDescriptor ( hostId , System . currentTimeMillis ( ) + 1 ) ; <nl> + HintsDescriptor descriptor3 = new HintsDescriptor ( hostId , System . currentTimeMillis ( ) + 2 ) ; <nl> + HintsDescriptor descriptor4 = new HintsDescriptor ( hostId , System . currentTimeMillis ( ) + 3 ) ; <nl> + <nl> + createHintFile ( directory , descriptor1 ) ; <nl> + createHintFile ( directory , descriptor2 ) ; <nl> + createHintFile ( directory , descriptor3 ) ; <nl> + createHintFile ( directory , descriptor4 ) ; <nl> + <nl> + HintsCatalog catalog = HintsCatalog . load ( directory , ImmutableMap . of ( ) ) ; <nl> + assertEquals ( 1 , catalog . stores ( ) . count ( ) ) ; <nl> + <nl> + HintsStore store = catalog . get ( hostId ) ; <nl> + <nl> + / / should have 4 hint files <nl> + assertEquals ( 4 , store . getDispatchQueueSize ( ) ) ; <nl> + <nl> + / / excise store as a result it should remove all the hint files <nl> + catalog . exciseStore ( hostId ) ; <nl> + <nl> + catalog = HintsCatalog . load ( directory , ImmutableMap . of ( ) ) ; <nl> + assertEquals ( 0 , catalog . stores ( ) . count ( ) ) ; <nl> + store = catalog . get ( hostId ) ; <nl> + <nl> + / / should have 0 hint files now <nl> + assertEquals ( 0 , store . getDispatchQueueSize ( ) ) ; <nl> + } <nl> + <nl> @ SuppressWarnings ( " EmptyTryBlock " ) <nl> private static void writeDescriptor ( File directory , HintsDescriptor descriptor ) throws IOException <nl> { <nl> @ @ - 86 , 4 + 159 , 43 @ @ public class HintsCatalogTest <nl> { <nl> } <nl> } <nl> + <nl> + private static Mutation createMutation ( String key , long now ) <nl> + { <nl> + Mutation mutation = new Mutation ( KEYSPACE , dk ( key ) ) ; <nl> + <nl> + new RowUpdateBuilder ( Schema . instance . getCFMetaData ( KEYSPACE , TABLE0 ) , now , mutation ) <nl> + . clustering ( " column0 " ) <nl> + . add ( " val " , " value0 " ) <nl> + . build ( ) ; <nl> + <nl> + new RowUpdateBuilder ( Schema . instance . getCFMetaData ( KEYSPACE , TABLE1 ) , now + 1 , mutation ) <nl> + . clustering ( " column1 " ) <nl> + . add ( " val " , " value1 " ) <nl> + . build ( ) ; <nl> + <nl> + new RowUpdateBuilder ( Schema . instance . getCFMetaData ( KEYSPACE , TABLE2 ) , now + 2 , mutation ) <nl> + . clustering ( " column2 " ) <nl> + . add ( " val " , " value2 " ) <nl> + . build ( ) ; <nl> + <nl> + return mutation ; <nl> + } <nl> + <nl> + @ SuppressWarnings ( " EmptyTryBlock " ) <nl> + private static void createHintFile ( File directory , HintsDescriptor descriptor ) throws IOException <nl> + { <nl> + try ( HintsWriter writer = HintsWriter . create ( directory , descriptor ) ) <nl> + { <nl> + ByteBuffer writeBuffer = ByteBuffer . allocateDirect ( WRITE _ BUFFER _ SIZE ) ; <nl> + try ( HintsWriter . Session session = writer . newSession ( writeBuffer ) ) <nl> + { <nl> + long now = FBUtilities . timestampMicros ( ) ; <nl> + Mutation mutation = createMutation ( " testSerializer " , now ) ; <nl> + Hint hint = Hint . create ( mutation , now / 1000 ) ; <nl> + <nl> + session . append ( hint ) ; <nl> + } <nl> + } <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index cf470d6 . . 857cf96 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 17 
 + * Delay hints store excise by write timeout to avoid race with decommission ( CASSANDRA - 13740 ) 
 * Deprecate background repair and probablistic read _ repair _ chance table options 
 ( CASSANDRA - 13910 ) 
 * Add missed CQL keywords to documentation ( CASSANDRA - 14359 ) 
 diff - - git a / src / java / org / apache / cassandra / hints / HintsCatalog . java b / src / java / org / apache / cassandra / hints / HintsCatalog . java 
 index 6d01629 . . d1f6fba 100644 
 - - - a / src / java / org / apache / cassandra / hints / HintsCatalog . java 
 + + + b / src / java / org / apache / cassandra / hints / HintsCatalog . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . nio . file . Files ; 
 import java . util . * ; 
 import java . util . concurrent . ConcurrentHashMap ; 
 import java . util . stream . Stream ; 
 + import javax . annotation . Nullable ; 
 
 import com . google . common . collect . ImmutableMap ; 
 
 @ @ - 94 , 6 + 95 , 12 @ @ final class HintsCatalog 
 : store ; 
 } 
 
 + @ Nullable 
 + HintsStore getNullable ( UUID hostId ) 
 + { 
 + return stores . get ( hostId ) ; 
 + } 
 + 
 / * * 
 * Delete all hints for all host ids . 
 * 
 diff - - git a / src / java / org / apache / cassandra / hints / HintsService . java b / src / java / org / apache / cassandra / hints / HintsService . java 
 index 9cd4ed3 . . 268ee1f 100644 
 - - - a / src / java / org / apache / cassandra / hints / HintsService . java 
 + + + b / src / java / org / apache / cassandra / hints / HintsService . java 
 @ @ - 302 , 7 + 302 , 7 @ @ public final class HintsService implements HintsServiceMBean 
 * / 
 public void excise ( UUID hostId ) 
 { 
 - HintsStore store = catalog . get ( hostId ) ; 
 + HintsStore store = catalog . getNullable ( hostId ) ; 
 if ( store = = null ) 
 return ; 
 
 diff - - git a / src / java / org / apache / cassandra / hints / HintsStore . java b / src / java / org / apache / cassandra / hints / HintsStore . java 
 index c066331 . . bb3aa0f 100644 
 - - - a / src / java / org / apache / cassandra / hints / HintsStore . java 
 + + + b / src / java / org / apache / cassandra / hints / HintsStore . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . util . concurrent . ConcurrentHashMap ; 
 import java . util . concurrent . ConcurrentLinkedDeque ; 
 import java . util . concurrent . ConcurrentLinkedQueue ; 
 
 + import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . collect . ImmutableMap ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 77 , 6 + 78 , 12 @ @ final class HintsStore 
 return new HintsStore ( hostId , hintsDirectory , writerParams , descriptors ) ; 
 } 
 
 + @ VisibleForTesting 
 + int getDispatchQueueSize ( ) 
 + { 
 + return dispatchDequeue . size ( ) ; 
 + } 
 + 
 InetAddress address ( ) 
 { 
 return StorageService . instance . getEndpointForHostId ( hostId ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 77fcb81 . . 5f76f7d 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 2276 , 7 + 2276 , 12 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 UUID hostId = tokenMetadata . getHostId ( endpoint ) ; 
 if ( hostId ! = null & & tokenMetadata . isMember ( endpoint ) ) 
 - HintsService . instance . excise ( hostId ) ; 
 + { 
 + / / enough time for writes to expire and MessagingService timeout reporter callback to fire , which is where 
 + / / hints are mostly written from - using getMinRpcTimeout ( ) / 2 for the interval . 
 + long delay = DatabaseDescriptor . getMinRpcTimeout ( ) + DatabaseDescriptor . getWriteRpcTimeout ( ) ; 
 + ScheduledExecutors . optionalTasks . schedule ( ( ) - > HintsService . instance . excise ( hostId ) , delay , TimeUnit . MILLISECONDS ) ; 
 + } 
 
 removeEndpoint ( endpoint ) ; 
 tokenMetadata . removeEndpoint ( endpoint ) ; 
 diff - - git a / test / unit / org / apache / cassandra / hints / HintsCatalogTest . java b / test / unit / org / apache / cassandra / hints / HintsCatalogTest . java 
 index 51b6aa3 . . 928fd31 100644 
 - - - a / test / unit / org / apache / cassandra / hints / HintsCatalogTest . java 
 + + + b / test / unit / org / apache / cassandra / hints / HintsCatalogTest . java 
 @ @ - 19 , 16 + 19 , 42 @ @ package org . apache . cassandra . hints ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 + import java . nio . ByteBuffer ; 
 import java . nio . file . Files ; 
 import java . util . * ; 
 
 import com . google . common . collect . ImmutableMap ; 
 + import org . apache . cassandra . SchemaLoader ; 
 + import org . apache . cassandra . config . Schema ; 
 + import org . apache . cassandra . db . Mutation ; 
 + import org . apache . cassandra . db . RowUpdateBuilder ; 
 + import org . apache . cassandra . schema . KeyspaceParams ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 + import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 
 import static junit . framework . Assert . * ; 
 + import static org . apache . cassandra . Util . dk ; 
 
 public class HintsCatalogTest 
 { 
 + private static final String KEYSPACE = " hint _ test " ; 
 + private static final String TABLE0 = " table _ 0 " ; 
 + private static final String TABLE1 = " table _ 1 " ; 
 + private static final String TABLE2 = " table _ 2 " ; 
 + private static final int WRITE _ BUFFER _ SIZE = 256 < < 10 ; 
 + 
 + @ BeforeClass 
 + public static void defineSchema ( ) 
 + { 
 + SchemaLoader . prepareServer ( ) ; 
 + SchemaLoader . createKeyspace ( KEYSPACE , 
 + KeyspaceParams . simple ( 1 ) , 
 + SchemaLoader . standardCFMD ( KEYSPACE , TABLE0 ) , 
 + SchemaLoader . standardCFMD ( KEYSPACE , TABLE1 ) , 
 + SchemaLoader . standardCFMD ( KEYSPACE , TABLE2 ) ) ; 
 + } 
 + 
 @ Test 
 public void loadCompletenessAndOrderTest ( ) throws IOException 
 { 
 @ @ - 43 , 7 + 69 , 21 @ @ public class HintsCatalogTest 
 } 
 } 
 
 - public static void loadCompletenessAndOrderTest ( File directory ) throws IOException 
 + @ Test 
 + public void exciseHintFiles ( ) throws IOException 
 + { 
 + File directory = Files . createTempDirectory ( null ) . toFile ( ) ; 
 + try 
 + { 
 + exciseHintFiles ( directory ) ; 
 + } 
 + finally 
 + { 
 + directory . deleteOnExit ( ) ; 
 + } 
 + } 
 + 
 + private void loadCompletenessAndOrderTest ( File directory ) throws IOException 
 { 
 UUID hostId1 = UUID . randomUUID ( ) ; 
 UUID hostId2 = UUID . randomUUID ( ) ; 
 @ @ - 79 , 6 + 119 , 39 @ @ public class HintsCatalogTest 
 assertNull ( store2 . poll ( ) ) ; 
 } 
 
 + private static void exciseHintFiles ( File directory ) throws IOException 
 + { 
 + UUID hostId = UUID . randomUUID ( ) ; 
 + 
 + HintsDescriptor descriptor1 = new HintsDescriptor ( hostId , System . currentTimeMillis ( ) ) ; 
 + HintsDescriptor descriptor2 = new HintsDescriptor ( hostId , System . currentTimeMillis ( ) + 1 ) ; 
 + HintsDescriptor descriptor3 = new HintsDescriptor ( hostId , System . currentTimeMillis ( ) + 2 ) ; 
 + HintsDescriptor descriptor4 = new HintsDescriptor ( hostId , System . currentTimeMillis ( ) + 3 ) ; 
 + 
 + createHintFile ( directory , descriptor1 ) ; 
 + createHintFile ( directory , descriptor2 ) ; 
 + createHintFile ( directory , descriptor3 ) ; 
 + createHintFile ( directory , descriptor4 ) ; 
 + 
 + HintsCatalog catalog = HintsCatalog . load ( directory , ImmutableMap . of ( ) ) ; 
 + assertEquals ( 1 , catalog . stores ( ) . count ( ) ) ; 
 + 
 + HintsStore store = catalog . get ( hostId ) ; 
 + 
 + / / should have 4 hint files 
 + assertEquals ( 4 , store . getDispatchQueueSize ( ) ) ; 
 + 
 + / / excise store as a result it should remove all the hint files 
 + catalog . exciseStore ( hostId ) ; 
 + 
 + catalog = HintsCatalog . load ( directory , ImmutableMap . of ( ) ) ; 
 + assertEquals ( 0 , catalog . stores ( ) . count ( ) ) ; 
 + store = catalog . get ( hostId ) ; 
 + 
 + / / should have 0 hint files now 
 + assertEquals ( 0 , store . getDispatchQueueSize ( ) ) ; 
 + } 
 + 
 @ SuppressWarnings ( " EmptyTryBlock " ) 
 private static void writeDescriptor ( File directory , HintsDescriptor descriptor ) throws IOException 
 { 
 @ @ - 86 , 4 + 159 , 43 @ @ public class HintsCatalogTest 
 { 
 } 
 } 
 + 
 + private static Mutation createMutation ( String key , long now ) 
 + { 
 + Mutation mutation = new Mutation ( KEYSPACE , dk ( key ) ) ; 
 + 
 + new RowUpdateBuilder ( Schema . instance . getCFMetaData ( KEYSPACE , TABLE0 ) , now , mutation ) 
 + . clustering ( " column0 " ) 
 + . add ( " val " , " value0 " ) 
 + . build ( ) ; 
 + 
 + new RowUpdateBuilder ( Schema . instance . getCFMetaData ( KEYSPACE , TABLE1 ) , now + 1 , mutation ) 
 + . clustering ( " column1 " ) 
 + . add ( " val " , " value1 " ) 
 + . build ( ) ; 
 + 
 + new RowUpdateBuilder ( Schema . instance . getCFMetaData ( KEYSPACE , TABLE2 ) , now + 2 , mutation ) 
 + . clustering ( " column2 " ) 
 + . add ( " val " , " value2 " ) 
 + . build ( ) ; 
 + 
 + return mutation ; 
 + } 
 + 
 + @ SuppressWarnings ( " EmptyTryBlock " ) 
 + private static void createHintFile ( File directory , HintsDescriptor descriptor ) throws IOException 
 + { 
 + try ( HintsWriter writer = HintsWriter . create ( directory , descriptor ) ) 
 + { 
 + ByteBuffer writeBuffer = ByteBuffer . allocateDirect ( WRITE _ BUFFER _ SIZE ) ; 
 + try ( HintsWriter . Session session = writer . newSession ( writeBuffer ) ) 
 + { 
 + long now = FBUtilities . timestampMicros ( ) ; 
 + Mutation mutation = createMutation ( " testSerializer " , now ) ; 
 + Hint hint = Hint . create ( mutation , now / 1000 ) ; 
 + 
 + session . append ( hint ) ; 
 + } 
 + } 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
