BLEU SCORE: 0.04767707020457096

TEST MSG: Refuse range queries with strict bounds on compact tables
GENERATED MSG: Fix validation of IN with 2ndary indexes

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index c3fe8d7 . . 2b3ace3 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 23 , 6 + 23 , 8 @ @ <nl> * Accept subtypes for function results , type casts ( CASSANDRA - 6766 ) <nl> * Support DISTINCT for static columns and fix behaviour when DISTINC is <nl> not use ( CASSANDRA - 7305 ) . <nl> + * Refuse range queries with strict bounds on compact tables since they <nl> + are broken ( CASSANDRA - 7059 ) <nl> Merged from 1 . 2 : <nl> * Expose global ColumnFamily metrics ( CASSANDRA - 7273 ) <nl> * cqlsh : Fix CompositeType columns in DESCRIBE TABLE output ( CASSANDRA - 7399 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / SingleColumnRelation . java b / src / java / org / apache / cassandra / cql3 / SingleColumnRelation . java <nl> index 5464c23 . . 642be66 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / SingleColumnRelation . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / SingleColumnRelation . java <nl> @ @ - 84 , 6 + 84 , 16 @ @ public class SingleColumnRelation extends Relation <nl> return false ; <nl> } <nl> <nl> + public SingleColumnRelation withNonStrictOperator ( ) <nl> + { <nl> + switch ( relationType ) <nl> + { <nl> + case GT : return new SingleColumnRelation ( entity , Type . GTE , value ) ; <nl> + case LT : return new SingleColumnRelation ( entity , Type . LTE , value ) ; <nl> + default : return this ; <nl> + } <nl> + } <nl> + <nl> @ Override <nl> public String toString ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index f106402 . . 98bd99a 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 1977 , 6 + 1977 , 40 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> " thus may have unpredictable performance . If you want to execute " + <nl> " this query despite the performance unpredictability , use ALLOW FILTERING " ) ; <nl> } <nl> + <nl> + / / We don ' t internally support exclusive slice bounds on non - composite tables . To deal with it we do an <nl> + / / inclusive slice and remove post - query the value that shouldn ' t be returned . One problem however is that <nl> + / / if there is a user limit , that limit may make the query return before the end of the slice is reached , <nl> + / / in which case , once we ' ll have removed bound post - query , we might end up with less results than <nl> + / / requested which would be incorrect . For single - partition query , this is not a problem , we just ask for <nl> + / / one more result ( see updateLimitForQuery ( ) ) since that ' s enough to compensate for that problem . For key <nl> + / / range however , each returned row may include one result that will have to be trimmed , so we would have <nl> + / / to bump the query limit by N where N is the number of rows we will return , but we don ' t know that in <nl> + / / advance . So , since we currently don ' t have a good way to handle such query , we refuse it
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d101c74 . . b2fa36e 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 26 , 6 + 26 , 7 @ @ <nl> * Support variadic parameters for IN clauses ( CASSANDRA - 4210 ) <nl> * cqlsh : return the result of CAS writes ( CASSANDRA - 5796 ) <nl> * Fix validation of IN clauses with 2ndary indexes ( CASSANDRA - 6050 ) <nl> + * Support named bind variables in CQL ( CASSANDRA - 6033 ) <nl> Merged from 1 . 2 : <nl> * Avoid second - guessing out - of - space state ( CASSANDRA - 5605 ) <nl> * Tuning knobs for dealing with large blobs and many CFs ( CASSANDRA - 5982 ) <nl> diff - - git a / doc / cql3 / CQL . textile b / doc / cql3 / CQL . textile <nl> index a880c08 . . ee0d700 100644 <nl> - - - a / doc / cql3 / CQL . textile <nl> + + + b / doc / cql3 / CQL . textile <nl> @ @ - 96 , 6 + 96 , 7 @ @ bc ( syntax ) . . <nl> | < boolean > <nl> | < hex > <nl> < variable > : : = ' ? ' <nl> + | ' : ' < identifier > <nl> < term > : : = < constant > <nl> | < collection - literal > <nl> | < variable > <nl> @ @ - 115 , 7 + 116 , 7 @ @ bc ( syntax ) . . <nl> p . <nl> Please note that not every possible productions of the grammar above will be valid in practice . Most notably , @ < variable > @ and nested @ < collection - literal > @ are currently not allowed inside @ < collection - literal > @ . <nl> <nl> - p . The question mark ( @ ? @ ) of @ < variable > @ is a bind variables for " prepared statements " : # preparedStatement . <nl> + p . A @ < variable > @ can be either anonymous ( a question mark ( @ ? @ ) ) or named ( an identifier preceded by @ : @ ) . Both declare a bind variables for " prepared statements " : # preparedStatement . The only difference between an anymous and a named variable is that a named one will be easier to refer to ( how exactly depends on the client driver used ) . <nl> <nl> p . The @ < properties > @ production is use by statement that create and alter keyspaces and tables . Each @ < property > @ is either a _ simple _ one , in which case it just has a value , or a _ map _ one , in which case it ' s value is a map grouping sub - options . The following will refer to one or the other as the _ kind _ ( _ simple _ or _ map _ ) of the property . <nl> <nl> @ @ - 128 , 7 + 129 , 7 @ @ h3 ( # preparedStatement ) . Prepared Statement <nl> <nl> CQL supports _ prepared statements _ . Prepared statement is an optimization that allows to parse a query only once but execute it multiple times with different concrete values . <nl> <nl> - In a statement , each time a column value is expected ( in the data manipulation and query statements ) , a bind variable marker ( denoted by a @ ? @ symbol ) can be used instead . A statement with bind variables must then be _ prepared _ . Once it has been prepared , it can executed by providing concrete values for the bind variables ( values for bind variables must be provided in the order the bind variables are defined in the query string ) . The exact procedure to prepare a statement and execute a prepared statement depends on the CQL driver used and is beyond the scope of this document . <nl> + In a statement , each time a column value is expected ( in the data manipulation and query statements ) , a @ < variable > @ ( see above ) can be used instead . A statement with bind variables must then be _ prepared _ . Once it has been prepared , it can executed by providing concrete values for the bind variables . The exact procedure to prepare a statement and execute a prepared statement depends on the CQL driver used and is beyond the scope of this document . <nl> <nl> <nl> h2 ( # dataDefinition ) . Data Definition <nl> @ @ - 1090 , 6 + 1091 , 7 @ @ h3 . 3 . 1 . 1 <nl> <nl> * @ SELECT @ statement now allows listing the partition keys ( using the @ DISTINCT @ modifier ) . See " CASSANDRA - 4536 " : https : / / issues . apache . org / jira / browse / CASSANDRA - 4536 . <nl> * The syntax @ c IN ? @ is now supported in @ WHERE @ clauses . In that case , the value expected for the bind variable will be a list of whatever type @ c @ is . <nl> + * It is now possible to use named bind variables ( using @ : name @ instead of @ ? @ ) . <nl> <nl> h3 . 3 . 1 . 0 <nl> <nl> diff - - git a / doc / native _ protocol _ v2 . spec b / doc / native _ protocol _ v2 . spec <nl> index 8f081df . . b0449bb 100644 <nl> - - - a / doc / native _ protocol _ v2 . spec <nl> + + + b / doc / native _ protocol _ v2 . spec <nl> @ @ - 497 , 15 + 497 , 21 @ @ Table of Contents <nl> < flags > . If present , it is composed of two [ string ] representing the <nl> ( unique ) keyspace name and table name the columns return are of . <nl> - < col _ spec _ i > specifies the columns returned in the query . There is <nl> - < column _ count > such column specification that are composed of : <nl> - ( < ksname > < tablename > ) ? < column _ name > < type > <nl> + < column _ count > such column specifications that are composed of : <nl> + ( < ksname > < tablename > ) ? < name > < type > <nl> The initial < ksname > and < tablename > are two [ string ] are only present <nl> if the Global _ tables _ spec flag is not set . The < column _ name > is a <nl> - [ string ] and < type > is an [ option ] that correspond to the column name <nl> - and type . The option for < type > is either a native type ( see below ) , <nl> - in which case the option has no value , or a ' custom ' type , in which <nl> - case the value is a [ string ] representing the full qualified class <nl> - name of the type represented . Valid option ids are : <nl> + [ string ] and < type > is an [ option ] that correspond to the description <nl> + ( what this description is depends a bit on the context : in results to <nl> + selects , this will be either the user chosen alias or the selection used <nl> + ( often a colum name , but it can be a function call too ) . In results to <nl> + a PREPARE , this will be either the name of the bind variable corresponding <nl> + or the column name for the variable if it is " anonymous " ) and type of <nl> + the corresponding result . The option for < type > is either a native <nl> + type ( see below ) , in which case the option has no value , or a <nl> + ' custom ' type , in which case the value is a [ string ] representing <nl> + the full qualified class name of the type represented . Valid option <nl> + ids are : <nl> 0x0000 Custom : the value is a [ string ] , see above . <nl> 0x0001 Ascii <nl> 0x0002 Bigint <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / AbstractMarker . java b / src / java / org / apache / cassandra / cql3 / AbstractMarker . java <nl> index 0de0153 . . 165cb00 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / AbstractMarker . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / AbstractMarker . java <nl> @ @ - 36 , 9 + 36 , 9 @ @ public abstract class AbstractMarker extends Term . NonTerminal <nl> this . receiver = receiver ; <nl> } <nl> <nl> - public void collectMarkerSpecification ( ColumnSpecification [ ] boundNames ) <nl> + public void collectMarkerSpecification ( VariableSpecifications boundNames ) <nl> { <nl> - boundNames [ bindIndex ] = receiver ; <nl> + boundNames . add ( bindIndex , receiver ) ; <nl> } <nl> <nl> public boolean containsBindMarker ( ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Attributes . java b / src / java / org / apache / cassandra / cql3 / Attributes . java <nl> index 360f54a . . a92cc80 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Attributes . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / Attributes . java <nl> @ @ - 105 , 7 + 105 , 7 @ @ public class Attributes <nl> return ttl ; <nl> } <nl> <nl> - public void collectMarkerSpecification ( ColumnSpecification [ ] boundNames ) <nl> + public void collectMarkerSpecification ( VariableSpecifications boundNames ) <nl> { <nl> if ( timestamp ! = null ) <nl> timestamp . collectMarkerSpecification ( boundNames ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> index 5e11b39 . . 6fb0db4 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Cql . g <nl> + + + b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> @ @ - 50 , 8 + 50 , 22 @ @ options { <nl> } <nl> <nl> @ members { <nl> - private List < String > recognitionErrors = new ArrayList < String > ( ) ; <nl> - private int currentBindMarkerIdx = - 1 ; <nl> + private final List < String > recognitionErrors = new ArrayList < String > ( ) ; <nl> + private final List < ColumnIdentifier > bindVariables = new ArrayList < ColumnIdentifier > ( ) ; <nl> + <nl> + public AbstractMarker . Raw newBindVariables ( ColumnIdentifier name ) <nl> + { <nl> + AbstractMarker . Raw marker = new AbstractMarker . Raw ( bindVariables . size ( ) ) ; <nl> + bindVariables . add ( name ) ; <nl> + return marker ; <nl> + } <nl> + <nl> + public AbstractMarker . INRaw newINBindVariables ( ColumnIdentifier name ) <nl> + { <nl> + AbstractMarker . INRaw marker = new AbstractMarker . INRaw ( bindVariables . size ( ) ) ; <nl> + bindVariables . add ( name ) ; <nl> + return marker ; <nl> + } <nl> <nl> public void displayRecognitionError ( String [ ] tokenNames , RecognitionException e ) <nl> { <nl> @ @ - 170 , 7 + 184 , 7 @ @ query returns [ ParsedStatement stmnt ] <nl> ; <nl> <nl> cqlStatement returns [ ParsedStatement stmt ] <nl> - @ after { if ( stmt ! = null ) stmt . setBoundTerms ( currentBindMarkerIdx + 1 ) ; } <nl> + @ after { if ( stmt ! = null ) stmt . setBoundVariables ( bindVariables ) ; } <nl> : st1 = selectStatement { $ stmt = st1 ; } <nl> | st2 = insertStatement { $ stmt = st2 ; } <nl> | st3 = updateStatement { $ stmt = st3 ; } <nl> @ @ - 759 , 13 + 773 , 15 @ @ value returns [ Term . Raw value ] <nl> : c = constant { $ value = c ; } <nl> | l = collection _ literal { $ value = l ; } <nl> | K _ NULL { $ value = Constants . NULL _ LITERAL ; } <nl> - | QMARK { $ value = new AbstractMarker . Raw ( + + currentBindMarkerIdx ) ; } <nl> + | ' : ' id = cident { $ value = newBindVariables ( id ) ; } <nl> + | QMARK { $ value = newBindVariables ( null ) ; } <nl> ; <nl> <nl> intValue returns [ Term . Raw value ] <nl> : <nl> - | t = INTEGER { $ value = Constants . Literal . integer ( $ t . text ) ; } <nl> - | QMARK { $ value = new AbstractMarker . Raw ( + + currentBindMarkerIdx ) ; } <nl> + | t = INTEGER { $ value = Constants . Literal . integer ( $ t . text ) ; } <nl> + | ' : ' id = cident { $ value = newBindVariables ( id ) ; } <nl> + | QMARK { $ value = newBindVariables ( null ) ; } <nl> ; <nl> <nl> functionName returns [ String s ] <nl> @ @ - 853 , 7 + 869 , 8 @ @ relation [ List < Relation > clauses ] <nl> for ( ColumnIdentifier id : l ) <nl> $ clauses . add ( new Relation ( id , type , t , true ) ) ; <nl> } <nl> - | name = cident K _ IN QMARK { $ clauses . add ( new Relation ( name , Relation . Type . IN , new AbstractMarker . INRaw ( + + currentBindMarkerIdx ) ) ) ; } <nl> + | name = cident K _ IN { Term . Raw marker = null ; } ( QMARK { marker = newINBindVariables ( null ) ; } | ' : ' mid = cident { marker = newINBindVariables ( mid ) ; } ) <nl> + { $ clauses . add ( new Relation ( name , Relation . Type . IN , marker ) ) ; } <nl> | name = cident K _ IN { Relation rel = Relation . createInRelation ( $ name . id ) ; } <nl> ' ( ' ( f1 = term { rel . addInValue ( f1 ) ; } ( ' , ' fN = term { rel . addInValue ( fN ) ; } ) * ) ? ' ) ' { $ clauses . add ( rel ) ; } <nl> ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Lists . java b / src / java / org / apache / cassandra / cql3 / Lists . java <nl> index 803e4c9 . . 4ca5eb3 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Lists . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / Lists . java <nl> @ @ - 174 , 7 + 174 , 7 @ @ public abstract class Lists <nl> return false ; <nl> } <nl> <nl> - public void collectMarkerSpecification ( ColumnSpecification [ ] boundNames ) <nl> + public void collectMarkerSpecification ( VariableSpecifications boundNames ) <nl> { <nl> } <nl> <nl> @ @ - 289 , 7 + 289 , 7 @ @ public abstract class Lists <nl> } <nl> <nl> @ Override <nl> - public void collectMarkerSpecification ( ColumnSpecification [ ] boundNames ) <nl> + public void collectMarkerSpecification ( VariableSpecifications boundNames ) <nl> { <nl> super . collectMarkerSpecification ( boundNames ) ; <nl> idx . collectMarkerSpecification ( boundNames ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Maps . java b / src / java / org / apache / cassandra / cql3 / Maps . java <nl> index 8d5bf3d . . 30d796c 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Maps . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / Maps . java <nl> @ @ - 187 , 7 + 187 , 7 @ @ public abstract class Maps <nl> return false ; <nl> } <nl> <nl> - public void collectMarkerSpecification ( ColumnSpecification [ ] boundNames ) <nl> + public void collectMarkerSpecification ( VariableSpecifications boundNames ) <nl> { <nl> } <nl> <nl> @ @ - 261 , 7 + 261 , 7 @ @ public abstract class Maps <nl> } <nl> <nl> @ Override <nl> - public void collectMarkerSpecification ( ColumnSpecification [ ] boundNames ) <nl> + public void collectMarkerSpecification ( VariableSpecifications boundNames ) <nl> { <nl> super . collectMarkerSpecification ( boundNames ) ; <nl> k . collectMarkerSpecification ( boundNames ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Operation . java b / src / java / org / apache / cassandra / cql3 / Operation . java <nl> index 2e16cea . . d84f57b 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Operation . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / Operation . java <nl> @ @ - 69 , 7 + 69 , 7 @ @ public abstract class Operation <nl> * @ param boundNames the list of column specification where to collect the <nl> * bind variables of this term in . <nl> * / <nl> - public void collectMarkerSpecification ( ColumnSpecification [ ] boundNames ) <nl> + public void collectMarkerSpecification ( VariableSpecifications boundNames ) <nl> { <nl> if ( t ! = null ) <nl> t . collectMarkerSpecification ( boundNames ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Sets . java b / src / java / org / apache / cassandra / cql3 / Sets . java <nl> index 9c3edf3 . . 0fcb8bf 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Sets . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / Sets . java <nl> @ @ - 179 , 7 + 179 , 7 @ @ public abstract class Sets <nl> return false ; <nl> } <nl> <nl> - public void collectMarkerSpecification ( ColumnSpecification [ ] boundNames ) <nl> + public void collectMarkerSpecification ( VariableSpecifications boundNames ) <nl> { <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Term . java b / src / java / org / apache / cassandra / cql3 / Term . java <nl> index f2fd74e . . d69fc33 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Term . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / Term . java <nl> @ @ - 35 , 10 + 35 , 10 @ @ public interface Term <nl> * Collects the column specification for the bind variables in this Term . <nl> * This is obviously a no - op if the term is Terminal . <nl> * <nl> - * @ param boundNames the list of column specification where to collect the <nl> + * @ param boundNames the variables specification where to collect the <nl> * bind variables of this term in . <nl> * / <nl> - public void collectMarkerSpecification ( ColumnSpecification [ ] boundNames ) ; <nl> + public void collectMarkerSpecification ( VariableSpecifications boundNames ) ; <nl> <nl> / * * <nl> * Bind the values in this term to the values contained in { @ code values } . <nl> @ @ - 107 , 7 + 107 , 7 @ @ public interface Term <nl> * / <nl> public abstract class Terminal implements Term <nl> { <nl> - public void collectMarkerSpecification ( ColumnSpecification [ ] boundNames ) { } <nl> + public void collectMarkerSpecification ( VariableSpecifications boundNames ) { } <nl> public Terminal bind ( List < ByteBuffer > values ) { return this ; } <nl> <nl> / / While some NonTerminal may not have bind markers , no Term can be Terminal <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / VariableSpecifications . java b / src / java / org / apache / cassandra / cql3 / VariableSpecifications . java <nl> new file mode 100644 <nl> index 0000000 . . ecdba6f <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cql3 / VariableSpecifications . java <nl> @ @ - 0 , 0 + 1 , 52 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . cql3 ; <nl> + <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> + <nl> + public class VariableSpecifications <nl> + { <nl> + private final List < ColumnIdentifier > variableNames ; <nl> + private final ColumnSpecification [ ] specs ; <nl> + <nl> + public VariableSpecifications ( List < ColumnIdentifier > variableNames ) <nl> + { <nl> + this . variableNames = variableNames ; <nl> + this . specs = new ColumnSpecification [ variableNames . size ( ) ] ; <nl> + } <nl> + <nl> + public int size ( ) <nl> + { <nl> + return variableNames . size ( ) ; <nl> + } <nl> + <nl> + public List < ColumnSpecification > getSpecifications ( ) <nl> + { <nl> + return Arrays . asList ( specs ) ; <nl> + } <nl> + <nl> + public void add ( int bindIndex , ColumnSpecification spec ) <nl> + { <nl> + ColumnIdentifier name = variableNames . get ( bindIndex ) ; <nl> + / / Use the user name , if there is one <nl> + if ( name ! = null ) <nl> + spec = new ColumnSpecification ( spec . ksName , spec . cfName , name , spec . type ) ; <nl> + specs [ bindIndex ] = spec ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java b / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java <nl> index a6b86a2 . . 8db03e6 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java <nl> @ @ - 21 , 12 + 21 , 7 @ @ import java . nio . ByteBuffer ; <nl> import java . util . ArrayList ; <nl> import java . util . List ; <nl> <nl> - import org . apache . cassandra . cql3 . ColumnSpecification ; <nl> - import org . apache . cassandra . cql3 . Constants ; <nl> - import org . apache . cassandra . cql3 . Lists ; <nl> - import org . apache . cassandra . cql3 . Maps ; <nl> - import org . apache . cassandra . cql3 . Sets ; <nl> - import org . apache . cassandra . cql3 . Term ; <nl> + import org . apache . cassandra . cql3 . * ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . db . marshal . CollectionType ; <nl> import org . apache . cassandra . db . marshal . ListType ; <nl> @ @ - 45 , 7 + 40 , 7 @ @ public class FunctionCall extends Term . NonTerminal <nl> this . terms = terms ; <nl> } <nl> <nl> - public void collectMarkerSpecification ( ColumnSpecification [ ] boundNames ) <nl> + public void collectMarkerSpecification ( VariableSpecifications boundNames ) <nl> { <nl> for ( Term t : terms ) <nl> t . collectMarkerSpecification ( boundNames ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> index bf9e315 . . cb9ff59 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> @ @ - 191 , 7 + 191 , 7 @ @ public class BatchStatement implements CQLStatement <nl> <nl> public ParsedStatement . Prepared prepare ( ) throws InvalidRequestException <nl> { <nl> - ColumnSpecification [ ] boundNames = new ColumnSpecification [ getBoundsTerms ( ) ] ; <nl> + VariableSpecifications boundNames = getBoundsVariables ( ) ; <nl> <nl> List < ModificationStatement > statements = new ArrayList < ModificationStatement > ( parsedStatements . size ( ) ) ; <nl> for ( ModificationStatement . Parsed parsed : parsedStatements ) <nl> @ @ - 212 , 7 + 212 , 7 @ @ public class BatchStatement implements CQLStatement <nl> Attributes prepAttrs = attrs . prepare ( " [ batch ] " , " [ batch ] " ) ; <nl> prepAttrs . collectMarkerSpecification ( boundNames ) ; <nl> <nl> - return new ParsedStatement . Prepared ( new BatchStatement ( getBoundsTerms ( ) , type , statements , prepAttrs ) , Arrays . < ColumnSpecification > asList ( boundNames ) ) ; <nl> + return new ParsedStatement . Prepared ( new BatchStatement ( boundNames . size ( ) , type , statements , prepAttrs ) , boundNames ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java <nl> index d3b8bde . . 74f7570 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java <nl> @ @ - 196 , 7 + 196 , 6 @ @ public class CreateTableStatement extends SchemaAlteringStatement <nl> properties . validate ( ) ; <nl> <nl> CreateTableStatement stmt = new CreateTableStatement ( cfName , properties , ifNotExists ) ; <nl> - stmt . setBoundTerms ( getBoundsTerms ( ) ) ; <nl> <nl> Map < ByteBuffer , CollectionType > definedCollections = null ; <nl> for ( Map . Entry < ColumnIdentifier , CQL3Type > entry : definitions . entrySet ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java <nl> index 54a1034 . . 4006bdb 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java <nl> @ @ - 103 , 9 + 103 , 9 @ @ public class DeleteStatement extends ModificationStatement <nl> this . whereClause = whereClause ; <nl> } <nl> <nl> - protected ModificationStatement prepareInternal ( CFDefinition cfDef , ColumnSpecification [ ] boundNames , Attributes attrs ) throws InvalidRequestException <nl> + protected ModificationStatement prepareInternal ( CFDefinition cfDef , VariableSpecifications boundNames , Attributes attrs ) throws InvalidRequestException <nl> { <nl> - DeleteStatement stmt = new DeleteStatement ( getBoundsTerms ( ) , cfDef . cfm , attrs ) ; <nl> + DeleteStatement stmt = new DeleteStatement ( boundNames . size ( ) , cfDef . cfm , attrs ) ; <nl> <nl> for ( Operation . RawDeletion deletion : deletions ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> index 2f1785d . . 4470b51 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> @ @ - 146 , 7 + 146 , 7 @ @ public abstract class ModificationStatement implements CQLStatement <nl> addKeyValues ( name , new Restriction . EQ ( value , false ) ) ; <nl> } <nl> <nl> - public void processWhereClause ( List < Relation > whereClause , ColumnSpecification [ ] names ) throws InvalidRequestException <nl> + public void processWhereClause ( List < Relation > whereClause , VariableSpecifications names ) throws InvalidRequestException <nl> { <nl> CFDefinition cfDef = cfm . getCfDef ( ) ; <nl> for ( Relation rel : whereClause ) <nl> @ @ - 565 , 12 + 565 , 12 @ @ public abstract class ModificationStatement implements CQLStatement <nl> <nl> public ParsedStatement . Prepared prepare ( ) throws InvalidRequestException <nl> { <nl> - ColumnSpecification [ ] boundNames = new ColumnSpecification [ getBoundsTerms ( ) ] ; <nl> + VariableSpecifications boundNames = getBoundsVariables ( ) ; <nl> ModificationStatement statement = prepare ( boundNames ) ; <nl> - return new ParsedStatement . Prepared ( statement , Arrays . < ColumnSpecification > asList ( boundNames ) ) ; <nl> + return new ParsedStatement . Prepared ( statement , boundNames ) ; <nl> } <nl> <nl> - public ModificationStatement prepare ( ColumnSpecification [ ] boundNames ) throws InvalidRequestException <nl> + public ModificationStatement prepare ( VariableSpecifications boundNames ) throws InvalidRequestException <nl> { <nl> CFMetaData metadata = ThriftValidation . validateColumnFamily ( keyspace ( ) , columnFamily ( ) ) ; <nl> CFDefinition cfDef = metadata . getCfDef ( ) ; <nl> @ @ - 633 , 6 + 633 , 6 @ @ public abstract class ModificationStatement implements CQLStatement <nl> return stmt ; <nl> } <nl> <nl> - protected abstract ModificationStatement prepareInternal ( CFDefinition cfDef , ColumnSpecification [ ] boundNames , Attributes attrs ) throws InvalidRequestException ; <nl> + protected abstract ModificationStatement prepareInternal ( CFDefinition cfDef , VariableSpecifications boundNames , Attributes attrs ) throws InvalidRequestException ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ParsedStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ParsedStatement . java <nl> index ffcb7ae . . ecf8a8a 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / ParsedStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / ParsedStatement . java <nl> @ @ - 25 , 17 + 25 , 17 @ @ import org . apache . cassandra . exceptions . RequestValidationException ; <nl> <nl> public abstract class ParsedStatement <nl> { <nl> - private int boundTerms ; <nl> + private VariableSpecifications variables ; <nl> <nl> - public int getBoundsTerms ( ) <nl> + public VariableSpecifications getBoundsVariables ( ) <nl> { <nl> - return boundTerms ; <nl> + return variables ; <nl> } <nl> <nl> / / Used by the parser and preparable statement <nl> - public void setBoundTerms ( int boundTerms ) <nl> + public void setBoundVariables ( List < ColumnIdentifier > boundNames ) <nl> { <nl> - this . boundTerms = boundTerms ; <nl> + this . variables = new VariableSpecifications ( boundNames ) ; <nl> } <nl> <nl> public abstract Prepared prepare ( ) throws RequestValidationException ; <nl> @ @ - 51 , 6 + 51 , 11 @ @ public abstract class ParsedStatement <nl> this . boundNames = boundNames ; <nl> } <nl> <nl> + public Prepared ( CQLStatement statement , VariableSpecifications names ) <nl> + { <nl> + this ( statement , names . getSpecifications ( ) ) ; <nl> + } <nl> + <nl> public Prepared ( CQLStatement statement ) <nl> { <nl> this ( statement , Collections . < ColumnSpecification > emptyList ( ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java <nl> index 968be9f . . f2904e4 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java <nl> @ @ - 44 , 6 + 44 , 11 @ @ public abstract class SchemaAlteringStatement extends CFStatement implements CQL <nl> this . isColumnFamilyLevel = true ; <nl> } <nl> <nl> + public int getBoundsTerms ( ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + <nl> @ Override <nl> public void prepareKeyspace ( ClientState state ) throws InvalidRequestException <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index 86dad85 . . ff6d4d3 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 1061 , 7 + 1061 , 7 @ @ public class SelectStatement implements CQLStatement <nl> <nl> CFDefinition cfDef = cfm . getCfDef ( ) ; <nl> <nl> - ColumnSpecification [ ] names = new ColumnSpecification [ getBoundsTerms ( ) ] ; <nl> + VariableSpecifications names = getBoundsVariables ( ) ; <nl> <nl> / / Select clause <nl> if ( parameters . isCount & & ! selectClause . isEmpty ( ) ) <nl> @ @ - 1081 , 7 + 1081 , 7 @ @ public class SelectStatement implements CQLStatement <nl> prepLimit . collectMarkerSpecification ( names ) ; <nl> } <nl> <nl> - SelectStatement stmt = new SelectStatement ( cfDef , getBoundsTerms ( ) , parameters , selection , prepLimit ) ; <nl> + SelectStatement stmt = new SelectStatement ( cfDef , names . size ( ) , parameters , selection , prepLimit ) ; <nl> <nl> / * <nl> * WHERE clause . For a given entity , rules are : <nl> @ @ - 1392 , 7 + 1392 , 7 @ @ public class SelectStatement implements CQLStatement <nl> + " If you want to execute this query despite the performance unpredictability , use ALLOW FILTERING " ) ; <nl> } <nl> <nl> - return new ParsedStatement . Prepared ( stmt , Arrays . < ColumnSpecification > asList ( names ) ) ; <nl> + return new ParsedStatement . Prepared ( stmt , names ) ; <nl> } <nl> <nl> private void validateDistinctSelection ( Collection < CFDefinition . Name > requestedColumns , Collection < CFDefinition . Name > partitionKey ) <nl> @ @ - 1423 , 7 + 1423 , 7 @ @ public class SelectStatement implements CQLStatement <nl> return new ColumnSpecification ( keyspace ( ) , columnFamily ( ) , new ColumnIdentifier ( " [ limit ] " , true ) , Int32Type . instance ) ; <nl> } <nl> <nl> - Restriction updateRestriction ( CFDefinition . Name name , Restriction restriction , Relation newRel , ColumnSpecification [ ] boundNames ) throws InvalidRequestException <nl> + Restriction updateRestriction ( CFDefinition . Name name , Restriction restriction , Relation newRel , VariableSpecifications boundNames ) throws InvalidRequestException <nl> { <nl> ColumnSpecification receiver = name ; <nl> if ( newRel . onToken ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / TruncateStatement . java b / src / java / org / apache / cassandra / cql3 / statements / TruncateStatement . java <nl> index b58d3fd . . d5baedf 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / TruncateStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / TruncateStatement . java <nl> @ @ - 36 , 6 + 36 , 11 @ @ public class TruncateStatement extends CFStatement implements CQLStatement <nl> super ( name ) ; <nl> } <nl> <nl> + public int getBoundsTerms ( ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + <nl> public Prepared prepare ( ) throws InvalidRequestException <nl> { <nl> return new Prepared ( this ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java <nl> index d27493f . . 2db24ea 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java <nl> @ @ - 124 , 9 + 124 , 9 @ @ public class UpdateStatement extends ModificationStatement <nl> this . columnValues = columnValues ; <nl> } <nl> <nl> - protected ModificationStatement prepareInternal ( CFDefinition cfDef , ColumnSpecification [ ] boundNames , Attributes attrs ) throws InvalidRequestException <nl> + protected ModificationStatement prepareInternal ( CFDefinition cfDef , VariableSpecifications boundNames , Attributes attrs ) throws InvalidRequestException <nl> { <nl> - UpdateStatement stmt = new UpdateStatement ( getBoundsTerms ( ) , cfDef . cfm , attrs ) ; <nl> + UpdateStatement stmt = new UpdateStatement ( boundNames . size ( ) , cfDef . cfm , attrs ) ; <nl> <nl> / / Created from an INSERT <nl> if ( stmt . isCounter ( ) ) <nl> @ @ - 194 , 9 + 194 , 9 @ @ public class UpdateStatement extends ModificationStatement <nl> this . whereClause = whereClause ; <nl> } <nl> <nl> - protected ModificationStatement prepareInternal ( CFDefinition cfDef , ColumnSpecification [ ] boundNames , Attributes attrs ) throws InvalidRequestException <nl> + protected ModificationStatement prepareInternal ( CFDefinition cfDef , VariableSpecifications boundNames , Attributes attrs ) throws InvalidRequestException <nl> { <nl> - UpdateStatement stmt = new UpdateStatement ( getBoundsTerms ( ) , cfDef . cfm , attrs ) ; <nl> + UpdateStatement stmt = new UpdateStatement ( boundNames . size ( ) , cfDef . cfm , attrs ) ; <nl> <nl> for ( Pair < ColumnIdentifier , Operation . RawUpdate > entry : updates ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / UseStatement . java b / src / java / org / apache / cassandra / cql3 / statements / UseStatement . java <nl> index 11f3078 . . db2435f 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / UseStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / UseStatement . java <nl> @ @ - 34 , 6 + 34 , 11 @ @ public class UseStatement extends ParsedStatement implements CQLStatement <nl> this . keyspace = keyspace ; <nl> } <nl> <nl> + public int getBoundsTerms ( ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + <nl> public Prepared prepare ( ) throws InvalidRequestException <nl> { <nl> return new Prepared ( this ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index c3fe8d7 . . 2b3ace3 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 23 , 6 + 23 , 8 @ @ 
 * Accept subtypes for function results , type casts ( CASSANDRA - 6766 ) 
 * Support DISTINCT for static columns and fix behaviour when DISTINC is 
 not use ( CASSANDRA - 7305 ) . 
 + * Refuse range queries with strict bounds on compact tables since they 
 + are broken ( CASSANDRA - 7059 ) 
 Merged from 1 . 2 : 
 * Expose global ColumnFamily metrics ( CASSANDRA - 7273 ) 
 * cqlsh : Fix CompositeType columns in DESCRIBE TABLE output ( CASSANDRA - 7399 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / SingleColumnRelation . java b / src / java / org / apache / cassandra / cql3 / SingleColumnRelation . java 
 index 5464c23 . . 642be66 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / SingleColumnRelation . java 
 + + + b / src / java / org / apache / cassandra / cql3 / SingleColumnRelation . java 
 @ @ - 84 , 6 + 84 , 16 @ @ public class SingleColumnRelation extends Relation 
 return false ; 
 } 
 
 + public SingleColumnRelation withNonStrictOperator ( ) 
 + { 
 + switch ( relationType ) 
 + { 
 + case GT : return new SingleColumnRelation ( entity , Type . GTE , value ) ; 
 + case LT : return new SingleColumnRelation ( entity , Type . LTE , value ) ; 
 + default : return this ; 
 + } 
 + } 
 + 
 @ Override 
 public String toString ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index f106402 . . 98bd99a 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 1977 , 6 + 1977 , 40 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 " thus may have unpredictable performance . If you want to execute " + 
 " this query despite the performance unpredictability , use ALLOW FILTERING " ) ; 
 } 
 + 
 + / / We don ' t internally support exclusive slice bounds on non - composite tables . To deal with it we do an 
 + / / inclusive slice and remove post - query the value that shouldn ' t be returned . One problem however is that 
 + / / if there is a user limit , that limit may make the query return before the end of the slice is reached , 
 + / / in which case , once we ' ll have removed bound post - query , we might end up with less results than 
 + / / requested which would be incorrect . For single - partition query , this is not a problem , we just ask for 
 + / / one more result ( see updateLimitForQuery ( ) ) since that ' s enough to compensate for that problem . For key 
 + / / range however , each returned row may include one result that will have to be trimmed , so we would have 
 + / / to bump the query limit by N where N is the number of rows we will return , but we don ' t know that in 
 + / / advance . So , since we currently don ' t have a good way to handle such query , we refuse it

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d101c74 . . b2fa36e 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 26 , 6 + 26 , 7 @ @ 
 * Support variadic parameters for IN clauses ( CASSANDRA - 4210 ) 
 * cqlsh : return the result of CAS writes ( CASSANDRA - 5796 ) 
 * Fix validation of IN clauses with 2ndary indexes ( CASSANDRA - 6050 ) 
 + * Support named bind variables in CQL ( CASSANDRA - 6033 ) 
 Merged from 1 . 2 : 
 * Avoid second - guessing out - of - space state ( CASSANDRA - 5605 ) 
 * Tuning knobs for dealing with large blobs and many CFs ( CASSANDRA - 5982 ) 
 diff - - git a / doc / cql3 / CQL . textile b / doc / cql3 / CQL . textile 
 index a880c08 . . ee0d700 100644 
 - - - a / doc / cql3 / CQL . textile 
 + + + b / doc / cql3 / CQL . textile 
 @ @ - 96 , 6 + 96 , 7 @ @ bc ( syntax ) . . 
 | < boolean > 
 | < hex > 
 < variable > : : = ' ? ' 
 + | ' : ' < identifier > 
 < term > : : = < constant > 
 | < collection - literal > 
 | < variable > 
 @ @ - 115 , 7 + 116 , 7 @ @ bc ( syntax ) . . 
 p . 
 Please note that not every possible productions of the grammar above will be valid in practice . Most notably , @ < variable > @ and nested @ < collection - literal > @ are currently not allowed inside @ < collection - literal > @ . 
 
 - p . The question mark ( @ ? @ ) of @ < variable > @ is a bind variables for " prepared statements " : # preparedStatement . 
 + p . A @ < variable > @ can be either anonymous ( a question mark ( @ ? @ ) ) or named ( an identifier preceded by @ : @ ) . Both declare a bind variables for " prepared statements " : # preparedStatement . The only difference between an anymous and a named variable is that a named one will be easier to refer to ( how exactly depends on the client driver used ) . 
 
 p . The @ < properties > @ production is use by statement that create and alter keyspaces and tables . Each @ < property > @ is either a _ simple _ one , in which case it just has a value , or a _ map _ one , in which case it ' s value is a map grouping sub - options . The following will refer to one or the other as the _ kind _ ( _ simple _ or _ map _ ) of the property . 
 
 @ @ - 128 , 7 + 129 , 7 @ @ h3 ( # preparedStatement ) . Prepared Statement 
 
 CQL supports _ prepared statements _ . Prepared statement is an optimization that allows to parse a query only once but execute it multiple times with different concrete values . 
 
 - In a statement , each time a column value is expected ( in the data manipulation and query statements ) , a bind variable marker ( denoted by a @ ? @ symbol ) can be used instead . A statement with bind variables must then be _ prepared _ . Once it has been prepared , it can executed by providing concrete values for the bind variables ( values for bind variables must be provided in the order the bind variables are defined in the query string ) . The exact procedure to prepare a statement and execute a prepared statement depends on the CQL driver used and is beyond the scope of this document . 
 + In a statement , each time a column value is expected ( in the data manipulation and query statements ) , a @ < variable > @ ( see above ) can be used instead . A statement with bind variables must then be _ prepared _ . Once it has been prepared , it can executed by providing concrete values for the bind variables . The exact procedure to prepare a statement and execute a prepared statement depends on the CQL driver used and is beyond the scope of this document . 
 
 
 h2 ( # dataDefinition ) . Data Definition 
 @ @ - 1090 , 6 + 1091 , 7 @ @ h3 . 3 . 1 . 1 
 
 * @ SELECT @ statement now allows listing the partition keys ( using the @ DISTINCT @ modifier ) . See " CASSANDRA - 4536 " : https : / / issues . apache . org / jira / browse / CASSANDRA - 4536 . 
 * The syntax @ c IN ? @ is now supported in @ WHERE @ clauses . In that case , the value expected for the bind variable will be a list of whatever type @ c @ is . 
 + * It is now possible to use named bind variables ( using @ : name @ instead of @ ? @ ) . 
 
 h3 . 3 . 1 . 0 
 
 diff - - git a / doc / native _ protocol _ v2 . spec b / doc / native _ protocol _ v2 . spec 
 index 8f081df . . b0449bb 100644 
 - - - a / doc / native _ protocol _ v2 . spec 
 + + + b / doc / native _ protocol _ v2 . spec 
 @ @ - 497 , 15 + 497 , 21 @ @ Table of Contents 
 < flags > . If present , it is composed of two [ string ] representing the 
 ( unique ) keyspace name and table name the columns return are of . 
 - < col _ spec _ i > specifies the columns returned in the query . There is 
 - < column _ count > such column specification that are composed of : 
 - ( < ksname > < tablename > ) ? < column _ name > < type > 
 + < column _ count > such column specifications that are composed of : 
 + ( < ksname > < tablename > ) ? < name > < type > 
 The initial < ksname > and < tablename > are two [ string ] are only present 
 if the Global _ tables _ spec flag is not set . The < column _ name > is a 
 - [ string ] and < type > is an [ option ] that correspond to the column name 
 - and type . The option for < type > is either a native type ( see below ) , 
 - in which case the option has no value , or a ' custom ' type , in which 
 - case the value is a [ string ] representing the full qualified class 
 - name of the type represented . Valid option ids are : 
 + [ string ] and < type > is an [ option ] that correspond to the description 
 + ( what this description is depends a bit on the context : in results to 
 + selects , this will be either the user chosen alias or the selection used 
 + ( often a colum name , but it can be a function call too ) . In results to 
 + a PREPARE , this will be either the name of the bind variable corresponding 
 + or the column name for the variable if it is " anonymous " ) and type of 
 + the corresponding result . The option for < type > is either a native 
 + type ( see below ) , in which case the option has no value , or a 
 + ' custom ' type , in which case the value is a [ string ] representing 
 + the full qualified class name of the type represented . Valid option 
 + ids are : 
 0x0000 Custom : the value is a [ string ] , see above . 
 0x0001 Ascii 
 0x0002 Bigint 
 diff - - git a / src / java / org / apache / cassandra / cql3 / AbstractMarker . java b / src / java / org / apache / cassandra / cql3 / AbstractMarker . java 
 index 0de0153 . . 165cb00 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / AbstractMarker . java 
 + + + b / src / java / org / apache / cassandra / cql3 / AbstractMarker . java 
 @ @ - 36 , 9 + 36 , 9 @ @ public abstract class AbstractMarker extends Term . NonTerminal 
 this . receiver = receiver ; 
 } 
 
 - public void collectMarkerSpecification ( ColumnSpecification [ ] boundNames ) 
 + public void collectMarkerSpecification ( VariableSpecifications boundNames ) 
 { 
 - boundNames [ bindIndex ] = receiver ; 
 + boundNames . add ( bindIndex , receiver ) ; 
 } 
 
 public boolean containsBindMarker ( ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Attributes . java b / src / java / org / apache / cassandra / cql3 / Attributes . java 
 index 360f54a . . a92cc80 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Attributes . java 
 + + + b / src / java / org / apache / cassandra / cql3 / Attributes . java 
 @ @ - 105 , 7 + 105 , 7 @ @ public class Attributes 
 return ttl ; 
 } 
 
 - public void collectMarkerSpecification ( ColumnSpecification [ ] boundNames ) 
 + public void collectMarkerSpecification ( VariableSpecifications boundNames ) 
 { 
 if ( timestamp ! = null ) 
 timestamp . collectMarkerSpecification ( boundNames ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g 
 index 5e11b39 . . 6fb0db4 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Cql . g 
 + + + b / src / java / org / apache / cassandra / cql3 / Cql . g 
 @ @ - 50 , 8 + 50 , 22 @ @ options { 
 } 
 
 @ members { 
 - private List < String > recognitionErrors = new ArrayList < String > ( ) ; 
 - private int currentBindMarkerIdx = - 1 ; 
 + private final List < String > recognitionErrors = new ArrayList < String > ( ) ; 
 + private final List < ColumnIdentifier > bindVariables = new ArrayList < ColumnIdentifier > ( ) ; 
 + 
 + public AbstractMarker . Raw newBindVariables ( ColumnIdentifier name ) 
 + { 
 + AbstractMarker . Raw marker = new AbstractMarker . Raw ( bindVariables . size ( ) ) ; 
 + bindVariables . add ( name ) ; 
 + return marker ; 
 + } 
 + 
 + public AbstractMarker . INRaw newINBindVariables ( ColumnIdentifier name ) 
 + { 
 + AbstractMarker . INRaw marker = new AbstractMarker . INRaw ( bindVariables . size ( ) ) ; 
 + bindVariables . add ( name ) ; 
 + return marker ; 
 + } 
 
 public void displayRecognitionError ( String [ ] tokenNames , RecognitionException e ) 
 { 
 @ @ - 170 , 7 + 184 , 7 @ @ query returns [ ParsedStatement stmnt ] 
 ; 
 
 cqlStatement returns [ ParsedStatement stmt ] 
 - @ after { if ( stmt ! = null ) stmt . setBoundTerms ( currentBindMarkerIdx + 1 ) ; } 
 + @ after { if ( stmt ! = null ) stmt . setBoundVariables ( bindVariables ) ; } 
 : st1 = selectStatement { $ stmt = st1 ; } 
 | st2 = insertStatement { $ stmt = st2 ; } 
 | st3 = updateStatement { $ stmt = st3 ; } 
 @ @ - 759 , 13 + 773 , 15 @ @ value returns [ Term . Raw value ] 
 : c = constant { $ value = c ; } 
 | l = collection _ literal { $ value = l ; } 
 | K _ NULL { $ value = Constants . NULL _ LITERAL ; } 
 - | QMARK { $ value = new AbstractMarker . Raw ( + + currentBindMarkerIdx ) ; } 
 + | ' : ' id = cident { $ value = newBindVariables ( id ) ; } 
 + | QMARK { $ value = newBindVariables ( null ) ; } 
 ; 
 
 intValue returns [ Term . Raw value ] 
 : 
 - | t = INTEGER { $ value = Constants . Literal . integer ( $ t . text ) ; } 
 - | QMARK { $ value = new AbstractMarker . Raw ( + + currentBindMarkerIdx ) ; } 
 + | t = INTEGER { $ value = Constants . Literal . integer ( $ t . text ) ; } 
 + | ' : ' id = cident { $ value = newBindVariables ( id ) ; } 
 + | QMARK { $ value = newBindVariables ( null ) ; } 
 ; 
 
 functionName returns [ String s ] 
 @ @ - 853 , 7 + 869 , 8 @ @ relation [ List < Relation > clauses ] 
 for ( ColumnIdentifier id : l ) 
 $ clauses . add ( new Relation ( id , type , t , true ) ) ; 
 } 
 - | name = cident K _ IN QMARK { $ clauses . add ( new Relation ( name , Relation . Type . IN , new AbstractMarker . INRaw ( + + currentBindMarkerIdx ) ) ) ; } 
 + | name = cident K _ IN { Term . Raw marker = null ; } ( QMARK { marker = newINBindVariables ( null ) ; } | ' : ' mid = cident { marker = newINBindVariables ( mid ) ; } ) 
 + { $ clauses . add ( new Relation ( name , Relation . Type . IN , marker ) ) ; } 
 | name = cident K _ IN { Relation rel = Relation . createInRelation ( $ name . id ) ; } 
 ' ( ' ( f1 = term { rel . addInValue ( f1 ) ; } ( ' , ' fN = term { rel . addInValue ( fN ) ; } ) * ) ? ' ) ' { $ clauses . add ( rel ) ; } 
 ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Lists . java b / src / java / org / apache / cassandra / cql3 / Lists . java 
 index 803e4c9 . . 4ca5eb3 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Lists . java 
 + + + b / src / java / org / apache / cassandra / cql3 / Lists . java 
 @ @ - 174 , 7 + 174 , 7 @ @ public abstract class Lists 
 return false ; 
 } 
 
 - public void collectMarkerSpecification ( ColumnSpecification [ ] boundNames ) 
 + public void collectMarkerSpecification ( VariableSpecifications boundNames ) 
 { 
 } 
 
 @ @ - 289 , 7 + 289 , 7 @ @ public abstract class Lists 
 } 
 
 @ Override 
 - public void collectMarkerSpecification ( ColumnSpecification [ ] boundNames ) 
 + public void collectMarkerSpecification ( VariableSpecifications boundNames ) 
 { 
 super . collectMarkerSpecification ( boundNames ) ; 
 idx . collectMarkerSpecification ( boundNames ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Maps . java b / src / java / org / apache / cassandra / cql3 / Maps . java 
 index 8d5bf3d . . 30d796c 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Maps . java 
 + + + b / src / java / org / apache / cassandra / cql3 / Maps . java 
 @ @ - 187 , 7 + 187 , 7 @ @ public abstract class Maps 
 return false ; 
 } 
 
 - public void collectMarkerSpecification ( ColumnSpecification [ ] boundNames ) 
 + public void collectMarkerSpecification ( VariableSpecifications boundNames ) 
 { 
 } 
 
 @ @ - 261 , 7 + 261 , 7 @ @ public abstract class Maps 
 } 
 
 @ Override 
 - public void collectMarkerSpecification ( ColumnSpecification [ ] boundNames ) 
 + public void collectMarkerSpecification ( VariableSpecifications boundNames ) 
 { 
 super . collectMarkerSpecification ( boundNames ) ; 
 k . collectMarkerSpecification ( boundNames ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Operation . java b / src / java / org / apache / cassandra / cql3 / Operation . java 
 index 2e16cea . . d84f57b 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Operation . java 
 + + + b / src / java / org / apache / cassandra / cql3 / Operation . java 
 @ @ - 69 , 7 + 69 , 7 @ @ public abstract class Operation 
 * @ param boundNames the list of column specification where to collect the 
 * bind variables of this term in . 
 * / 
 - public void collectMarkerSpecification ( ColumnSpecification [ ] boundNames ) 
 + public void collectMarkerSpecification ( VariableSpecifications boundNames ) 
 { 
 if ( t ! = null ) 
 t . collectMarkerSpecification ( boundNames ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Sets . java b / src / java / org / apache / cassandra / cql3 / Sets . java 
 index 9c3edf3 . . 0fcb8bf 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Sets . java 
 + + + b / src / java / org / apache / cassandra / cql3 / Sets . java 
 @ @ - 179 , 7 + 179 , 7 @ @ public abstract class Sets 
 return false ; 
 } 
 
 - public void collectMarkerSpecification ( ColumnSpecification [ ] boundNames ) 
 + public void collectMarkerSpecification ( VariableSpecifications boundNames ) 
 { 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Term . java b / src / java / org / apache / cassandra / cql3 / Term . java 
 index f2fd74e . . d69fc33 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Term . java 
 + + + b / src / java / org / apache / cassandra / cql3 / Term . java 
 @ @ - 35 , 10 + 35 , 10 @ @ public interface Term 
 * Collects the column specification for the bind variables in this Term . 
 * This is obviously a no - op if the term is Terminal . 
 * 
 - * @ param boundNames the list of column specification where to collect the 
 + * @ param boundNames the variables specification where to collect the 
 * bind variables of this term in . 
 * / 
 - public void collectMarkerSpecification ( ColumnSpecification [ ] boundNames ) ; 
 + public void collectMarkerSpecification ( VariableSpecifications boundNames ) ; 
 
 / * * 
 * Bind the values in this term to the values contained in { @ code values } . 
 @ @ - 107 , 7 + 107 , 7 @ @ public interface Term 
 * / 
 public abstract class Terminal implements Term 
 { 
 - public void collectMarkerSpecification ( ColumnSpecification [ ] boundNames ) { } 
 + public void collectMarkerSpecification ( VariableSpecifications boundNames ) { } 
 public Terminal bind ( List < ByteBuffer > values ) { return this ; } 
 
 / / While some NonTerminal may not have bind markers , no Term can be Terminal 
 diff - - git a / src / java / org / apache / cassandra / cql3 / VariableSpecifications . java b / src / java / org / apache / cassandra / cql3 / VariableSpecifications . java 
 new file mode 100644 
 index 0000000 . . ecdba6f 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cql3 / VariableSpecifications . java 
 @ @ - 0 , 0 + 1 , 52 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . cql3 ; 
 + 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 + 
 + public class VariableSpecifications 
 + { 
 + private final List < ColumnIdentifier > variableNames ; 
 + private final ColumnSpecification [ ] specs ; 
 + 
 + public VariableSpecifications ( List < ColumnIdentifier > variableNames ) 
 + { 
 + this . variableNames = variableNames ; 
 + this . specs = new ColumnSpecification [ variableNames . size ( ) ] ; 
 + } 
 + 
 + public int size ( ) 
 + { 
 + return variableNames . size ( ) ; 
 + } 
 + 
 + public List < ColumnSpecification > getSpecifications ( ) 
 + { 
 + return Arrays . asList ( specs ) ; 
 + } 
 + 
 + public void add ( int bindIndex , ColumnSpecification spec ) 
 + { 
 + ColumnIdentifier name = variableNames . get ( bindIndex ) ; 
 + / / Use the user name , if there is one 
 + if ( name ! = null ) 
 + spec = new ColumnSpecification ( spec . ksName , spec . cfName , name , spec . type ) ; 
 + specs [ bindIndex ] = spec ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java b / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java 
 index a6b86a2 . . 8db03e6 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java 
 @ @ - 21 , 12 + 21 , 7 @ @ import java . nio . ByteBuffer ; 
 import java . util . ArrayList ; 
 import java . util . List ; 
 
 - import org . apache . cassandra . cql3 . ColumnSpecification ; 
 - import org . apache . cassandra . cql3 . Constants ; 
 - import org . apache . cassandra . cql3 . Lists ; 
 - import org . apache . cassandra . cql3 . Maps ; 
 - import org . apache . cassandra . cql3 . Sets ; 
 - import org . apache . cassandra . cql3 . Term ; 
 + import org . apache . cassandra . cql3 . * ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . db . marshal . CollectionType ; 
 import org . apache . cassandra . db . marshal . ListType ; 
 @ @ - 45 , 7 + 40 , 7 @ @ public class FunctionCall extends Term . NonTerminal 
 this . terms = terms ; 
 } 
 
 - public void collectMarkerSpecification ( ColumnSpecification [ ] boundNames ) 
 + public void collectMarkerSpecification ( VariableSpecifications boundNames ) 
 { 
 for ( Term t : terms ) 
 t . collectMarkerSpecification ( boundNames ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 index bf9e315 . . cb9ff59 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 @ @ - 191 , 7 + 191 , 7 @ @ public class BatchStatement implements CQLStatement 
 
 public ParsedStatement . Prepared prepare ( ) throws InvalidRequestException 
 { 
 - ColumnSpecification [ ] boundNames = new ColumnSpecification [ getBoundsTerms ( ) ] ; 
 + VariableSpecifications boundNames = getBoundsVariables ( ) ; 
 
 List < ModificationStatement > statements = new ArrayList < ModificationStatement > ( parsedStatements . size ( ) ) ; 
 for ( ModificationStatement . Parsed parsed : parsedStatements ) 
 @ @ - 212 , 7 + 212 , 7 @ @ public class BatchStatement implements CQLStatement 
 Attributes prepAttrs = attrs . prepare ( " [ batch ] " , " [ batch ] " ) ; 
 prepAttrs . collectMarkerSpecification ( boundNames ) ; 
 
 - return new ParsedStatement . Prepared ( new BatchStatement ( getBoundsTerms ( ) , type , statements , prepAttrs ) , Arrays . < ColumnSpecification > asList ( boundNames ) ) ; 
 + return new ParsedStatement . Prepared ( new BatchStatement ( boundNames . size ( ) , type , statements , prepAttrs ) , boundNames ) ; 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java 
 index d3b8bde . . 74f7570 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java 
 @ @ - 196 , 7 + 196 , 6 @ @ public class CreateTableStatement extends SchemaAlteringStatement 
 properties . validate ( ) ; 
 
 CreateTableStatement stmt = new CreateTableStatement ( cfName , properties , ifNotExists ) ; 
 - stmt . setBoundTerms ( getBoundsTerms ( ) ) ; 
 
 Map < ByteBuffer , CollectionType > definedCollections = null ; 
 for ( Map . Entry < ColumnIdentifier , CQL3Type > entry : definitions . entrySet ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java 
 index 54a1034 . . 4006bdb 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java 
 @ @ - 103 , 9 + 103 , 9 @ @ public class DeleteStatement extends ModificationStatement 
 this . whereClause = whereClause ; 
 } 
 
 - protected ModificationStatement prepareInternal ( CFDefinition cfDef , ColumnSpecification [ ] boundNames , Attributes attrs ) throws InvalidRequestException 
 + protected ModificationStatement prepareInternal ( CFDefinition cfDef , VariableSpecifications boundNames , Attributes attrs ) throws InvalidRequestException 
 { 
 - DeleteStatement stmt = new DeleteStatement ( getBoundsTerms ( ) , cfDef . cfm , attrs ) ; 
 + DeleteStatement stmt = new DeleteStatement ( boundNames . size ( ) , cfDef . cfm , attrs ) ; 
 
 for ( Operation . RawDeletion deletion : deletions ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 index 2f1785d . . 4470b51 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 @ @ - 146 , 7 + 146 , 7 @ @ public abstract class ModificationStatement implements CQLStatement 
 addKeyValues ( name , new Restriction . EQ ( value , false ) ) ; 
 } 
 
 - public void processWhereClause ( List < Relation > whereClause , ColumnSpecification [ ] names ) throws InvalidRequestException 
 + public void processWhereClause ( List < Relation > whereClause , VariableSpecifications names ) throws InvalidRequestException 
 { 
 CFDefinition cfDef = cfm . getCfDef ( ) ; 
 for ( Relation rel : whereClause ) 
 @ @ - 565 , 12 + 565 , 12 @ @ public abstract class ModificationStatement implements CQLStatement 
 
 public ParsedStatement . Prepared prepare ( ) throws InvalidRequestException 
 { 
 - ColumnSpecification [ ] boundNames = new ColumnSpecification [ getBoundsTerms ( ) ] ; 
 + VariableSpecifications boundNames = getBoundsVariables ( ) ; 
 ModificationStatement statement = prepare ( boundNames ) ; 
 - return new ParsedStatement . Prepared ( statement , Arrays . < ColumnSpecification > asList ( boundNames ) ) ; 
 + return new ParsedStatement . Prepared ( statement , boundNames ) ; 
 } 
 
 - public ModificationStatement prepare ( ColumnSpecification [ ] boundNames ) throws InvalidRequestException 
 + public ModificationStatement prepare ( VariableSpecifications boundNames ) throws InvalidRequestException 
 { 
 CFMetaData metadata = ThriftValidation . validateColumnFamily ( keyspace ( ) , columnFamily ( ) ) ; 
 CFDefinition cfDef = metadata . getCfDef ( ) ; 
 @ @ - 633 , 6 + 633 , 6 @ @ public abstract class ModificationStatement implements CQLStatement 
 return stmt ; 
 } 
 
 - protected abstract ModificationStatement prepareInternal ( CFDefinition cfDef , ColumnSpecification [ ] boundNames , Attributes attrs ) throws InvalidRequestException ; 
 + protected abstract ModificationStatement prepareInternal ( CFDefinition cfDef , VariableSpecifications boundNames , Attributes attrs ) throws InvalidRequestException ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ParsedStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ParsedStatement . java 
 index ffcb7ae . . ecf8a8a 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / ParsedStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / ParsedStatement . java 
 @ @ - 25 , 17 + 25 , 17 @ @ import org . apache . cassandra . exceptions . RequestValidationException ; 
 
 public abstract class ParsedStatement 
 { 
 - private int boundTerms ; 
 + private VariableSpecifications variables ; 
 
 - public int getBoundsTerms ( ) 
 + public VariableSpecifications getBoundsVariables ( ) 
 { 
 - return boundTerms ; 
 + return variables ; 
 } 
 
 / / Used by the parser and preparable statement 
 - public void setBoundTerms ( int boundTerms ) 
 + public void setBoundVariables ( List < ColumnIdentifier > boundNames ) 
 { 
 - this . boundTerms = boundTerms ; 
 + this . variables = new VariableSpecifications ( boundNames ) ; 
 } 
 
 public abstract Prepared prepare ( ) throws RequestValidationException ; 
 @ @ - 51 , 6 + 51 , 11 @ @ public abstract class ParsedStatement 
 this . boundNames = boundNames ; 
 } 
 
 + public Prepared ( CQLStatement statement , VariableSpecifications names ) 
 + { 
 + this ( statement , names . getSpecifications ( ) ) ; 
 + } 
 + 
 public Prepared ( CQLStatement statement ) 
 { 
 this ( statement , Collections . < ColumnSpecification > emptyList ( ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java 
 index 968be9f . . f2904e4 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java 
 @ @ - 44 , 6 + 44 , 11 @ @ public abstract class SchemaAlteringStatement extends CFStatement implements CQL 
 this . isColumnFamilyLevel = true ; 
 } 
 
 + public int getBoundsTerms ( ) 
 + { 
 + return 0 ; 
 + } 
 + 
 @ Override 
 public void prepareKeyspace ( ClientState state ) throws InvalidRequestException 
 { 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index 86dad85 . . ff6d4d3 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 1061 , 7 + 1061 , 7 @ @ public class SelectStatement implements CQLStatement 
 
 CFDefinition cfDef = cfm . getCfDef ( ) ; 
 
 - ColumnSpecification [ ] names = new ColumnSpecification [ getBoundsTerms ( ) ] ; 
 + VariableSpecifications names = getBoundsVariables ( ) ; 
 
 / / Select clause 
 if ( parameters . isCount & & ! selectClause . isEmpty ( ) ) 
 @ @ - 1081 , 7 + 1081 , 7 @ @ public class SelectStatement implements CQLStatement 
 prepLimit . collectMarkerSpecification ( names ) ; 
 } 
 
 - SelectStatement stmt = new SelectStatement ( cfDef , getBoundsTerms ( ) , parameters , selection , prepLimit ) ; 
 + SelectStatement stmt = new SelectStatement ( cfDef , names . size ( ) , parameters , selection , prepLimit ) ; 
 
 / * 
 * WHERE clause . For a given entity , rules are : 
 @ @ - 1392 , 7 + 1392 , 7 @ @ public class SelectStatement implements CQLStatement 
 + " If you want to execute this query despite the performance unpredictability , use ALLOW FILTERING " ) ; 
 } 
 
 - return new ParsedStatement . Prepared ( stmt , Arrays . < ColumnSpecification > asList ( names ) ) ; 
 + return new ParsedStatement . Prepared ( stmt , names ) ; 
 } 
 
 private void validateDistinctSelection ( Collection < CFDefinition . Name > requestedColumns , Collection < CFDefinition . Name > partitionKey ) 
 @ @ - 1423 , 7 + 1423 , 7 @ @ public class SelectStatement implements CQLStatement 
 return new ColumnSpecification ( keyspace ( ) , columnFamily ( ) , new ColumnIdentifier ( " [ limit ] " , true ) , Int32Type . instance ) ; 
 } 
 
 - Restriction updateRestriction ( CFDefinition . Name name , Restriction restriction , Relation newRel , ColumnSpecification [ ] boundNames ) throws InvalidRequestException 
 + Restriction updateRestriction ( CFDefinition . Name name , Restriction restriction , Relation newRel , VariableSpecifications boundNames ) throws InvalidRequestException 
 { 
 ColumnSpecification receiver = name ; 
 if ( newRel . onToken ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / TruncateStatement . java b / src / java / org / apache / cassandra / cql3 / statements / TruncateStatement . java 
 index b58d3fd . . d5baedf 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / TruncateStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / TruncateStatement . java 
 @ @ - 36 , 6 + 36 , 11 @ @ public class TruncateStatement extends CFStatement implements CQLStatement 
 super ( name ) ; 
 } 
 
 + public int getBoundsTerms ( ) 
 + { 
 + return 0 ; 
 + } 
 + 
 public Prepared prepare ( ) throws InvalidRequestException 
 { 
 return new Prepared ( this ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java 
 index d27493f . . 2db24ea 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java 
 @ @ - 124 , 9 + 124 , 9 @ @ public class UpdateStatement extends ModificationStatement 
 this . columnValues = columnValues ; 
 } 
 
 - protected ModificationStatement prepareInternal ( CFDefinition cfDef , ColumnSpecification [ ] boundNames , Attributes attrs ) throws InvalidRequestException 
 + protected ModificationStatement prepareInternal ( CFDefinition cfDef , VariableSpecifications boundNames , Attributes attrs ) throws InvalidRequestException 
 { 
 - UpdateStatement stmt = new UpdateStatement ( getBoundsTerms ( ) , cfDef . cfm , attrs ) ; 
 + UpdateStatement stmt = new UpdateStatement ( boundNames . size ( ) , cfDef . cfm , attrs ) ; 
 
 / / Created from an INSERT 
 if ( stmt . isCounter ( ) ) 
 @ @ - 194 , 9 + 194 , 9 @ @ public class UpdateStatement extends ModificationStatement 
 this . whereClause = whereClause ; 
 } 
 
 - protected ModificationStatement prepareInternal ( CFDefinition cfDef , ColumnSpecification [ ] boundNames , Attributes attrs ) throws InvalidRequestException 
 + protected ModificationStatement prepareInternal ( CFDefinition cfDef , VariableSpecifications boundNames , Attributes attrs ) throws InvalidRequestException 
 { 
 - UpdateStatement stmt = new UpdateStatement ( getBoundsTerms ( ) , cfDef . cfm , attrs ) ; 
 + UpdateStatement stmt = new UpdateStatement ( boundNames . size ( ) , cfDef . cfm , attrs ) ; 
 
 for ( Pair < ColumnIdentifier , Operation . RawUpdate > entry : updates ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / UseStatement . java b / src / java / org / apache / cassandra / cql3 / statements / UseStatement . java 
 index 11f3078 . . db2435f 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / UseStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / UseStatement . java 
 @ @ - 34 , 6 + 34 , 11 @ @ public class UseStatement extends ParsedStatement implements CQLStatement 
 this . keyspace = keyspace ; 
 } 
 
 + public int getBoundsTerms ( ) 
 + { 
 + return 0 ; 
 + } 
 + 
 public Prepared prepare ( ) throws InvalidRequestException 
 { 
 return new Prepared ( this ) ;
