BLEU SCORE: 0.02399905349559606

TEST MSG: Use configured gcgs when anticompacting
GENERATED MSG: Fix snapshots in use get deleted during snapshot repair

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index c85d031 . . 198935b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 6 <nl> + * Use configured gcgs in anticompaction ( CASSANDRA - 9397 ) <nl> * Warn on misuse of unlogged batches ( CASSANDRA - 9282 ) <nl> * Failure detector detects and ignores local pauses ( CASSANDRA - 9183 ) <nl> * Add utility class to support for rate limiting a given log statement ( CASSANDRA - 9029 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index cc0dde0 . . c7232a0 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 1072 , 7 + 1072 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> SSTableRewriter unRepairedSSTableWriter = new SSTableRewriter ( cfs , sstableAsSet , sstable . maxDataAge , false ) ; <nl> <nl> try ( AbstractCompactionStrategy . ScannerList scanners = cfs . getCompactionStrategy ( ) . getScanners ( new HashSet < > ( Collections . singleton ( sstable ) ) ) ; <nl> - CompactionController controller = new CompactionController ( cfs , sstableAsSet , CFMetaData . DEFAULT _ GC _ GRACE _ SECONDS ) ) <nl> + CompactionController controller = new CompactionController ( cfs , sstableAsSet , getDefaultGcBefore ( cfs ) ) ) <nl> { <nl> int expectedBloomFilterSize = Math . max ( cfs . metadata . getMinIndexInterval ( ) , ( int ) sstable . estimatedKeys ( ) ) ; <nl> repairedSSTableWriter . switchWriter ( CompactionManager . createWriter ( cfs , destination , expectedBloomFilterSize , repairedAt , sstable ) ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e124ac0 . . ad32460 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 18 , 6 + 18 , 7 @ @ <nl> * Replace the deprecated MapMaker with CacheLoader ( CASSANDRA - 6007 ) <nl> * Add SSTableDeletingNotification to DataTracker ( CASSANDRA - 6010 ) <nl> * Fix snapshots in use get deleted during snapshot repair ( CASSANDRA - 6011 ) <nl> + * Move hints and exception count to o . a . c . metrics ( CASSANDRA - 6017 ) <nl> <nl> <nl> 1 . 2 . 9 <nl> diff - - git a / src / java / org / apache / cassandra / metrics / StorageMetrics . java b / src / java / org / apache / cassandra / metrics / StorageMetrics . java <nl> index 3cda71e . . ab7b886 100644 <nl> - - - a / src / java / org / apache / cassandra / metrics / StorageMetrics . java <nl> + + + b / src / java / org / apache / cassandra / metrics / StorageMetrics . java <nl> @ @ - 27 , 4 + 27 , 7 @ @ import com . yammer . metrics . core . MetricName ; <nl> public class StorageMetrics <nl> { <nl> public static final Counter load = Metrics . newCounter ( new MetricName ( " org . apache . cassandra . metrics " , " Storage " , " Load " ) ) ; <nl> + public static final Counter exceptions = Metrics . newCounter ( new MetricName ( " org . apache . cassandra . metrics " , " Storage " , " Exceptions " ) ) ; <nl> + public static final Counter totalHintsInProgress = Metrics . newCounter ( new MetricName ( " org . apache . cassandra . metrics " , " Storage " , " TotalHintsInProgress " ) ) ; <nl> + public static final Counter totalHints = Metrics . newCounter ( new MetricName ( " org . apache . cassandra . metrics " , " Storage " , " TotalHints " ) ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index af21f07 . . b2fc367 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 45 , 6 + 45 , 7 @ @ import org . apache . cassandra . db . commitlog . CommitLog ; <nl> import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . io . FSError ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> + import org . apache . cassandra . metrics . StorageMetrics ; <nl> import org . apache . cassandra . thrift . ThriftServer ; <nl> import org . apache . cassandra . tracing . Tracing ; <nl> import org . apache . cassandra . utils . CLibrary ; <nl> @ @ - 123 , 8 + 124 , 6 @ @ public class CassandraDaemon <nl> <nl> private static final CassandraDaemon instance = new CassandraDaemon ( ) ; <nl> <nl> - static final AtomicInteger exceptions = new AtomicInteger ( ) ; <nl> - <nl> public Server thriftServer ; <nl> public Server nativeServer ; <nl> <nl> @ @ - 188 , 7 + 187 , 7 @ @ public class CassandraDaemon <nl> { <nl> public void uncaughtException ( Thread t , Throwable e ) <nl> { <nl> - exceptions . incrementAndGet ( ) ; <nl> + StorageMetrics . exceptions . inc ( ) ; <nl> logger . error ( " Exception in thread " + t , e ) ; <nl> Tracing . trace ( " Exception in thread " + t , e ) ; <nl> for ( Throwable e2 = e ; e2 ! = null ; e2 = e2 . getCause ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index 23d73ec . . be92213 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 61 , 6 + 61 , 7 @ @ import org . apache . cassandra . locator . IEndpointSnitch ; <nl> import org . apache . cassandra . locator . TokenMetadata ; <nl> import org . apache . cassandra . metrics . ClientRequestMetrics ; <nl> import org . apache . cassandra . metrics . ReadRepairMetrics ; <nl> + import org . apache . cassandra . metrics . StorageMetrics ; <nl> import org . apache . cassandra . net . * ; <nl> import org . apache . cassandra . tracing . Tracing ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> @ @ - 82 , 7 + 83 , 6 @ @ public class StorageProxy implements StorageProxyMBean <nl> public static final StorageProxy instance = new StorageProxy ( ) ; <nl> <nl> private static volatile int maxHintsInProgress = 1024 * FBUtilities . getAvailableProcessors ( ) ; <nl> - private static final AtomicInteger totalHintsInProgress = new AtomicInteger ( ) ; <nl> private static final CacheLoader < InetAddress , AtomicInteger > hintsInProgress = new CacheLoader < InetAddress , AtomicInteger > ( ) <nl> { <nl> public AtomicInteger load ( InetAddress inetAddress ) <nl> @ @ - 90 , 7 + 90 , 6 @ @ public class StorageProxy implements StorageProxyMBean <nl> return new AtomicInteger ( 0 ) ; <nl> } <nl> } ; <nl> - private static final AtomicLong totalHints = new AtomicLong ( ) ; <nl> private static final ClientRequestMetrics readMetrics = new ClientRequestMetrics ( " Read " ) ; <nl> private static final ClientRequestMetrics rangeMetrics = new ClientRequestMetrics ( " RangeSlice " ) ; <nl> private static final ClientRequestMetrics writeMetrics = new ClientRequestMetrics ( " Write " ) ; <nl> @ @ - 488 , 10 + 487 , 10 @ @ public class StorageProxy implements StorageProxyMBean <nl> / / The idea is that if we have over maxHintsInProgress hints in flight , this is probably due to <nl> / / a small number of nodes causing problems , so we should avoid shutting down writes completely to <nl> / / healthy nodes . Any node with no hintsInProgress is considered healthy . <nl> - if ( totalHintsInProgress . get ( ) > maxHintsInProgress <nl> + if ( StorageMetrics . totalHintsInProgress . count ( ) > maxHintsInProgress <nl> & & ( getHintsInProgressFor ( destination ) . get ( ) > 0 & & shouldHint ( destination ) ) ) <nl> { <nl> - throw new OverloadedException ( " Too many in flight hints : " + totalHintsInProgress . get ( ) ) ; <nl> + throw new OverloadedException ( " Too many in flight hints : " + StorageMetrics . totalHintsInProgress . count ( ) ) ; <nl> } <nl> <nl> if ( FailureDetector . instance . isAlive ( destination ) ) <nl> @ @ - 583 , 7 + 582 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> <nl> private static Future < Void > submitHint ( HintRunnable runnable ) <nl> { <nl> - totalHintsInProgress . incrementAndGet ( ) ; <nl> + StorageMetrics . totalHintsInProgress . inc ( ) ; <nl> getHintsInProgressFor ( runnable . target ) . incrementAndGet ( ) ; <nl> return ( Future < Void > ) StageManager . getStage ( Stage . MUTATION ) . submit ( runnable ) ; <nl> } <nl> @ @ - 599 , 7 + 598 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> } <nl> assert hostId ! = null : " Missing host ID for " + target . getHostAddress ( ) ; <nl> mutation . toHint ( ttl , hostId ) . apply ( ) ; <nl> - totalHints . incrementAndGet ( ) ; <nl> + StorageMetrics . totalHints . inc ( ) ; <nl> } <nl> <nl> private static void sendMessagesToOneDC ( MessageOut message , Collection < InetAddress > targets , boolean localDC , AbstractWriteResponseHandler handler ) <nl> @ @ - 1685 , 7 + 1684 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> } <nl> finally <nl> { <nl> - totalHintsInProgress . decrementAndGet ( ) ; <nl> + StorageMetrics . totalHintsInProgress . dec ( ) ; <nl> getHintsInProgressFor ( target ) . decrementAndGet ( ) ; <nl> } <nl> } <nl> @ @ - 1695 , 7 + 1694 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> <nl> public long getTotalHints ( ) <nl> { <nl> - return totalHints . get ( ) ; <nl> + return StorageMetrics . totalHints . count ( ) ; <nl> } <nl> <nl> public int getMaxHintsInProgress ( ) <nl> @ @ - 1710 , 7 + 1709 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> <nl> public int getHintsInProgress ( ) <nl> { <nl> - return totalHintsInProgress . get ( ) ; <nl> + return ( int ) StorageMetrics . totalHintsInProgress . count ( ) ; <nl> } <nl> <nl> public void verifyNoHintsInProgress ( ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 2c3a1c8 . . 7a5bbbc 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 3859 , 7 + 3859 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> public int getExceptionCount ( ) <nl> { <nl> - return CassandraDaemon . exceptions . get ( ) ; <nl> + return ( int ) StorageMetrics . exceptions . count ( ) ; <nl> } <nl> <nl> public void rescheduleFailedDeletions ( ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index 2c63b46 . . 4fbed9c 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 403 , 6 + 403 , 7 @ @ public interface StorageServiceMBean extends NotificationEmitter <nl> public void joinRing ( ) throws IOException ; <nl> public boolean isJoined ( ) ; <nl> <nl> + @ Deprecated <nl> public int getExceptionCount ( ) ; <nl> <nl> public void setStreamThroughputMbPerSec ( int value ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index c85d031 . . 198935b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 6 
 + * Use configured gcgs in anticompaction ( CASSANDRA - 9397 ) 
 * Warn on misuse of unlogged batches ( CASSANDRA - 9282 ) 
 * Failure detector detects and ignores local pauses ( CASSANDRA - 9183 ) 
 * Add utility class to support for rate limiting a given log statement ( CASSANDRA - 9029 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index cc0dde0 . . c7232a0 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 1072 , 7 + 1072 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 SSTableRewriter unRepairedSSTableWriter = new SSTableRewriter ( cfs , sstableAsSet , sstable . maxDataAge , false ) ; 
 
 try ( AbstractCompactionStrategy . ScannerList scanners = cfs . getCompactionStrategy ( ) . getScanners ( new HashSet < > ( Collections . singleton ( sstable ) ) ) ; 
 - CompactionController controller = new CompactionController ( cfs , sstableAsSet , CFMetaData . DEFAULT _ GC _ GRACE _ SECONDS ) ) 
 + CompactionController controller = new CompactionController ( cfs , sstableAsSet , getDefaultGcBefore ( cfs ) ) ) 
 { 
 int expectedBloomFilterSize = Math . max ( cfs . metadata . getMinIndexInterval ( ) , ( int ) sstable . estimatedKeys ( ) ) ; 
 repairedSSTableWriter . switchWriter ( CompactionManager . createWriter ( cfs , destination , expectedBloomFilterSize , repairedAt , sstable ) ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e124ac0 . . ad32460 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 18 , 6 + 18 , 7 @ @ 
 * Replace the deprecated MapMaker with CacheLoader ( CASSANDRA - 6007 ) 
 * Add SSTableDeletingNotification to DataTracker ( CASSANDRA - 6010 ) 
 * Fix snapshots in use get deleted during snapshot repair ( CASSANDRA - 6011 ) 
 + * Move hints and exception count to o . a . c . metrics ( CASSANDRA - 6017 ) 
 
 
 1 . 2 . 9 
 diff - - git a / src / java / org / apache / cassandra / metrics / StorageMetrics . java b / src / java / org / apache / cassandra / metrics / StorageMetrics . java 
 index 3cda71e . . ab7b886 100644 
 - - - a / src / java / org / apache / cassandra / metrics / StorageMetrics . java 
 + + + b / src / java / org / apache / cassandra / metrics / StorageMetrics . java 
 @ @ - 27 , 4 + 27 , 7 @ @ import com . yammer . metrics . core . MetricName ; 
 public class StorageMetrics 
 { 
 public static final Counter load = Metrics . newCounter ( new MetricName ( " org . apache . cassandra . metrics " , " Storage " , " Load " ) ) ; 
 + public static final Counter exceptions = Metrics . newCounter ( new MetricName ( " org . apache . cassandra . metrics " , " Storage " , " Exceptions " ) ) ; 
 + public static final Counter totalHintsInProgress = Metrics . newCounter ( new MetricName ( " org . apache . cassandra . metrics " , " Storage " , " TotalHintsInProgress " ) ) ; 
 + public static final Counter totalHints = Metrics . newCounter ( new MetricName ( " org . apache . cassandra . metrics " , " Storage " , " TotalHints " ) ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index af21f07 . . b2fc367 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 45 , 6 + 45 , 7 @ @ import org . apache . cassandra . db . commitlog . CommitLog ; 
 import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . io . FSError ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 + import org . apache . cassandra . metrics . StorageMetrics ; 
 import org . apache . cassandra . thrift . ThriftServer ; 
 import org . apache . cassandra . tracing . Tracing ; 
 import org . apache . cassandra . utils . CLibrary ; 
 @ @ - 123 , 8 + 124 , 6 @ @ public class CassandraDaemon 
 
 private static final CassandraDaemon instance = new CassandraDaemon ( ) ; 
 
 - static final AtomicInteger exceptions = new AtomicInteger ( ) ; 
 - 
 public Server thriftServer ; 
 public Server nativeServer ; 
 
 @ @ - 188 , 7 + 187 , 7 @ @ public class CassandraDaemon 
 { 
 public void uncaughtException ( Thread t , Throwable e ) 
 { 
 - exceptions . incrementAndGet ( ) ; 
 + StorageMetrics . exceptions . inc ( ) ; 
 logger . error ( " Exception in thread " + t , e ) ; 
 Tracing . trace ( " Exception in thread " + t , e ) ; 
 for ( Throwable e2 = e ; e2 ! = null ; e2 = e2 . getCause ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index 23d73ec . . be92213 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 61 , 6 + 61 , 7 @ @ import org . apache . cassandra . locator . IEndpointSnitch ; 
 import org . apache . cassandra . locator . TokenMetadata ; 
 import org . apache . cassandra . metrics . ClientRequestMetrics ; 
 import org . apache . cassandra . metrics . ReadRepairMetrics ; 
 + import org . apache . cassandra . metrics . StorageMetrics ; 
 import org . apache . cassandra . net . * ; 
 import org . apache . cassandra . tracing . Tracing ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 @ @ - 82 , 7 + 83 , 6 @ @ public class StorageProxy implements StorageProxyMBean 
 public static final StorageProxy instance = new StorageProxy ( ) ; 
 
 private static volatile int maxHintsInProgress = 1024 * FBUtilities . getAvailableProcessors ( ) ; 
 - private static final AtomicInteger totalHintsInProgress = new AtomicInteger ( ) ; 
 private static final CacheLoader < InetAddress , AtomicInteger > hintsInProgress = new CacheLoader < InetAddress , AtomicInteger > ( ) 
 { 
 public AtomicInteger load ( InetAddress inetAddress ) 
 @ @ - 90 , 7 + 90 , 6 @ @ public class StorageProxy implements StorageProxyMBean 
 return new AtomicInteger ( 0 ) ; 
 } 
 } ; 
 - private static final AtomicLong totalHints = new AtomicLong ( ) ; 
 private static final ClientRequestMetrics readMetrics = new ClientRequestMetrics ( " Read " ) ; 
 private static final ClientRequestMetrics rangeMetrics = new ClientRequestMetrics ( " RangeSlice " ) ; 
 private static final ClientRequestMetrics writeMetrics = new ClientRequestMetrics ( " Write " ) ; 
 @ @ - 488 , 10 + 487 , 10 @ @ public class StorageProxy implements StorageProxyMBean 
 / / The idea is that if we have over maxHintsInProgress hints in flight , this is probably due to 
 / / a small number of nodes causing problems , so we should avoid shutting down writes completely to 
 / / healthy nodes . Any node with no hintsInProgress is considered healthy . 
 - if ( totalHintsInProgress . get ( ) > maxHintsInProgress 
 + if ( StorageMetrics . totalHintsInProgress . count ( ) > maxHintsInProgress 
 & & ( getHintsInProgressFor ( destination ) . get ( ) > 0 & & shouldHint ( destination ) ) ) 
 { 
 - throw new OverloadedException ( " Too many in flight hints : " + totalHintsInProgress . get ( ) ) ; 
 + throw new OverloadedException ( " Too many in flight hints : " + StorageMetrics . totalHintsInProgress . count ( ) ) ; 
 } 
 
 if ( FailureDetector . instance . isAlive ( destination ) ) 
 @ @ - 583 , 7 + 582 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 
 private static Future < Void > submitHint ( HintRunnable runnable ) 
 { 
 - totalHintsInProgress . incrementAndGet ( ) ; 
 + StorageMetrics . totalHintsInProgress . inc ( ) ; 
 getHintsInProgressFor ( runnable . target ) . incrementAndGet ( ) ; 
 return ( Future < Void > ) StageManager . getStage ( Stage . MUTATION ) . submit ( runnable ) ; 
 } 
 @ @ - 599 , 7 + 598 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 } 
 assert hostId ! = null : " Missing host ID for " + target . getHostAddress ( ) ; 
 mutation . toHint ( ttl , hostId ) . apply ( ) ; 
 - totalHints . incrementAndGet ( ) ; 
 + StorageMetrics . totalHints . inc ( ) ; 
 } 
 
 private static void sendMessagesToOneDC ( MessageOut message , Collection < InetAddress > targets , boolean localDC , AbstractWriteResponseHandler handler ) 
 @ @ - 1685 , 7 + 1684 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 } 
 finally 
 { 
 - totalHintsInProgress . decrementAndGet ( ) ; 
 + StorageMetrics . totalHintsInProgress . dec ( ) ; 
 getHintsInProgressFor ( target ) . decrementAndGet ( ) ; 
 } 
 } 
 @ @ - 1695 , 7 + 1694 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 
 public long getTotalHints ( ) 
 { 
 - return totalHints . get ( ) ; 
 + return StorageMetrics . totalHints . count ( ) ; 
 } 
 
 public int getMaxHintsInProgress ( ) 
 @ @ - 1710 , 7 + 1709 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 
 public int getHintsInProgress ( ) 
 { 
 - return totalHintsInProgress . get ( ) ; 
 + return ( int ) StorageMetrics . totalHintsInProgress . count ( ) ; 
 } 
 
 public void verifyNoHintsInProgress ( ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 2c3a1c8 . . 7a5bbbc 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 3859 , 7 + 3859 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 public int getExceptionCount ( ) 
 { 
 - return CassandraDaemon . exceptions . get ( ) ; 
 + return ( int ) StorageMetrics . exceptions . count ( ) ; 
 } 
 
 public void rescheduleFailedDeletions ( ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index 2c63b46 . . 4fbed9c 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 403 , 6 + 403 , 7 @ @ public interface StorageServiceMBean extends NotificationEmitter 
 public void joinRing ( ) throws IOException ; 
 public boolean isJoined ( ) ; 
 
 + @ Deprecated 
 public int getExceptionCount ( ) ; 
 
 public void setStreamThroughputMbPerSec ( int value ) ;
