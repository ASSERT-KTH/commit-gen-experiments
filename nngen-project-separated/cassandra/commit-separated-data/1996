BLEU SCORE: 0.027757915716335905

TEST MSG: Disable SSLv3 for POODLE
GENERATED MSG: Add support for SSL sockets to use client certificate authentication .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 47e611c . . 809a102 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 12 : <nl> + * Disable SSLv3 for POODLE ( CASSANDRA - 8265 ) <nl> * Fix millisecond timestamps in Tracing ( CASSANDRA - 8297 ) <nl> * Include keyspace name in error message when there are insufficient <nl> live nodes to stream from ( CASSANDRA - 8221 ) <nl> diff - - git a / src / java / org / apache / cassandra / security / SSLFactory . java b / src / java / org / apache / cassandra / security / SSLFactory . java <nl> index 3cb0670 . . 260c828 100644 <nl> - - - a / src / java / org / apache / cassandra / security / SSLFactory . java <nl> + + + b / src / java / org / apache / cassandra / security / SSLFactory . java <nl> @ @ - 61 , 6 + 61 , 7 @ @ public final class SSLFactory <nl> String [ ] suits = filterCipherSuites ( serverSocket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; <nl> serverSocket . setEnabledCipherSuites ( suits ) ; <nl> serverSocket . setNeedClientAuth ( options . require _ client _ auth ) ; <nl> + serverSocket . setEnabledProtocols ( new String [ ] { " SSLv2Hello " , " TLSv1 " , " TLSv1 . 1 " , " TLSv1 . 2 " } ) ; <nl> serverSocket . bind ( new InetSocketAddress ( address , port ) , 500 ) ; <nl> return serverSocket ; <nl> } <nl> @ @ - 72 , 6 + 73 , 7 @ @ public final class SSLFactory <nl> SSLSocket socket = ( SSLSocket ) ctx . getSocketFactory ( ) . createSocket ( address , port , localAddress , localPort ) ; <nl> String [ ] suits = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; <nl> socket . setEnabledCipherSuites ( suits ) ; <nl> + socket . setEnabledProtocols ( new String [ ] { " SSLv2Hello " , " TLSv1 " , " TLSv1 . 1 " , " TLSv1 . 2 " } ) ; <nl> return socket ; <nl> } <nl> <nl> @ @ - 82 , 6 + 84 , 7 @ @ public final class SSLFactory <nl> SSLSocket socket = ( SSLSocket ) ctx . getSocketFactory ( ) . createSocket ( address , port ) ; <nl> String [ ] suits = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; <nl> socket . setEnabledCipherSuites ( suits ) ; <nl> + socket . setEnabledProtocols ( new String [ ] { " SSLv2Hello " , " TLSv1 " , " TLSv1 . 1 " , " TLSv1 . 2 " } ) ; <nl> return socket ; <nl> } <nl> <nl> @ @ - 92 , 6 + 95 , 7 @ @ public final class SSLFactory <nl> SSLSocket socket = ( SSLSocket ) ctx . getSocketFactory ( ) . createSocket ( ) ; <nl> String [ ] suits = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; <nl> socket . setEnabledCipherSuites ( suits ) ; <nl> + socket . setEnabledProtocols ( new String [ ] { " SSLv2Hello " , " TLSv1 " , " TLSv1 . 1 " , " TLSv1 . 2 " } ) ; <nl> return socket ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java b / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java <nl> index d1a3304 . . 3111deb 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java <nl> @ @ - 27 , 6 + 27 , 8 @ @ import java . util . concurrent . ThreadPoolExecutor ; <nl> import java . util . concurrent . TimeUnit ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> + import javax . net . ssl . SSLServerSocket ; <nl> + <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 251 , 6 + 253 , 8 @ @ public class CustomTThreadPoolServer extends TServer <nl> params . requireClientAuth ( true ) ; <nl> } <nl> TServerSocket sslServer = TSSLTransportFactory . getServerSocket ( addr . getPort ( ) , 0 , addr . getAddress ( ) , params ) ; <nl> + SSLServerSocket sslServerSocket = ( SSLServerSocket ) sslServer . getServerSocket ( ) ; <nl> + sslServerSocket . setEnabledProtocols ( new String [ ] { " SSLv2Hello " , " TLSv1 " , " TLSv1 . 1 " , " TLSv1 . 2 " } ) ; <nl> serverTransport = new TCustomServerSocket ( sslServer . getServerSocket ( ) , args . keepAlive , args . sendBufferSize , args . recvBufferSize ) ; <nl> } <nl> else <nl> diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java <nl> index f095776 . . 092e1ba 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Server . java <nl> + + + b / src / java / org / apache / cassandra / transport / Server . java <nl> @ @ - 296 , 6 + 296 , 7 @ @ public class Server implements CassandraDaemon . Server <nl> sslEngine . setUseClientMode ( false ) ; <nl> sslEngine . setEnabledCipherSuites ( encryptionOptions . cipher _ suites ) ; <nl> sslEngine . setNeedClientAuth ( encryptionOptions . require _ client _ auth ) ; <nl> + sslEngine . setEnabledProtocols ( new String [ ] { " SSLv2Hello " , " TLSv1 " , " TLSv1 . 1 " , " TLSv1 . 2 " } ) ; <nl> <nl> SslHandler sslHandler = new SslHandler ( sslEngine ) ; <nl> sslHandler . setIssueHandshake ( true ) ; <nl> diff - - git a / src / java / org / apache / cassandra / transport / SimpleClient . java b / src / java / org / apache / cassandra / transport / SimpleClient . java <nl> index 5f2efda . . 3bcf751 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / SimpleClient . java <nl> + + + b / src / java / org / apache / cassandra / transport / SimpleClient . java <nl> @ @ - 259 , 6 + 259 , 7 @ @ public class SimpleClient <nl> SSLEngine sslEngine = sslContext . createSSLEngine ( ) ; <nl> sslEngine . setUseClientMode ( true ) ; <nl> sslEngine . setEnabledCipherSuites ( encryptionOptions . cipher _ suites ) ; <nl> + sslEngine . setEnabledProtocols ( new String [ ] { " SSLv2Hello " , " TLSv1 " , " TLSv1 . 1 " , " TLSv1 . 2 " } ) ; <nl> ChannelPipeline pipeline = super . getPipeline ( ) ; <nl> <nl> pipeline . addFirst ( " ssl " , new SslHandler ( sslEngine ) ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cache / AutoSavingCache . java b / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> index 4e35d34 . . 7e4bb77 100644 <nl> - - - a / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> + + + b / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> @ @ - 37 , 6 + 37 , 7 @ @ import org . apache . cassandra . db . compaction . OperationType ; <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . io . FSWriteError ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> + import org . apache . cassandra . io . util . LengthAvailableInputStream ; <nl> import org . apache . cassandra . io . util . SequentialWriter ; <nl> import org . apache . cassandra . service . CacheService ; <nl> import org . apache . cassandra . service . StorageService ; <nl> @ @ - 109 , 7 + 110 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> try <nl> { <nl> logger . info ( String . format ( " reading saved cache % s " , path ) ) ; <nl> - in = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) ) ; <nl> + in = new DataInputStream ( new LengthAvailableInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) , path . length ( ) ) ) ; <nl> Set < ByteBuffer > keys = new HashSet < ByteBuffer > ( ) ; <nl> while ( in . available ( ) > 0 ) <nl> { <nl> @ @ - 120 , 7 + 121 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> } <nl> catch ( Exception e ) <nl> { <nl> - logger . warn ( String . format ( " error reading saved cache % s , keys loaded so far : % d " , path . getAbsolutePath ( ) , count ) , e ) ; <nl> + logger . debug ( String . format ( " harmless error reading saved cache % s fully , keys loaded so far : % d " , path . getAbsolutePath ( ) , count ) , e ) ; <nl> return count ; <nl> } <nl> finally <nl> @ @ - 137 , 7 + 138 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> try <nl> { <nl> logger . info ( String . format ( " reading saved cache % s " , path ) ) ; <nl> - in = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) ) ; <nl> + in = new DataInputStream ( new LengthAvailableInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) , path . length ( ) ) ) ; <nl> List < Future < Pair < K , V > > > futures = new ArrayList < Future < Pair < K , V > > > ( ) ; <nl> while ( in . available ( ) > 0 ) <nl> { <nl> @ @ - 157 , 7 + 158 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> } <nl> catch ( Exception e ) <nl> { <nl> - logger . warn ( String . format ( " error reading saved cache % s " , path . getAbsolutePath ( ) ) , e ) ; <nl> + logger . debug ( String . format ( " harmless error reading saved cache % s " , path . getAbsolutePath ( ) ) , e ) ; <nl> } <nl> finally <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / io / util / LengthAvailableInputStream . java b / src / java / org / apache / cassandra / io / util / LengthAvailableInputStream . java <nl> new file mode 100644 <nl> index 0000000 . . a467ce2 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / io / util / LengthAvailableInputStream . java <nl> @ @ - 0 , 0 + 1 , 98 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . io . util ; <nl> + <nl> + import java . io . FilterInputStream ; <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + <nl> + / * * <nl> + * a FilterInputStream that returns the remaining bytes to read from available ( ) <nl> + * regardless of whether the device is ready to provide them . <nl> + * / <nl> + public class LengthAvailableInputStream extends FilterInputStream <nl> + { <nl> + private long remainingBytes ; <nl> + <nl> + public LengthAvailableInputStream ( InputStream in , long totalLength ) <nl> + { <nl> + super ( in ) ; <nl> + remainingBytes = totalLength ; <nl> + } <nl> + <nl> + @ Override <nl> + public int read ( ) throws IOException <nl> + { <nl> + int b = in . read ( ) ; <nl> + - - remainingBytes ; <nl> + return b ; <nl> + } <nl> + <nl> + @ Override <nl> + public int read ( byte [ ] b ) throws IOException <nl> + { <nl> + int length = in . read ( b ) ; <nl> + remainingBytes - = length ; <nl> + return length ; <nl> + } <nl> + <nl> + @ Override <nl> + public int read ( byte [ ] b , int off , int len ) throws IOException <nl> + { <nl> + int length = in . read ( b , off , len ) ; <nl> + remainingBytes - = length ; <nl> + return length ; <nl> + } <nl> + <nl> + @ Override <nl> + public long skip ( long n ) throws IOException <nl> + { <nl> + long length = in . skip ( n ) ; <nl> + remainingBytes - = length ; <nl> + return length ; <nl> + } <nl> + <nl> + @ Override <nl> + public int available ( ) throws IOException <nl> + { <nl> + return ( remainingBytes < = 0 ) ? 0 : ( ( remainingBytes > Integer . MAX _ VALUE ) ? Integer . MAX _ VALUE : ( int ) remainingBytes ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void close ( ) throws IOException <nl> + { <nl> + in . close ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public synchronized void mark ( int readlimit ) <nl> + { <nl> + } <nl> + <nl> + @ Override <nl> + public synchronized void reset ( ) throws IOException <nl> + { <nl> + throw new IOException ( " Mark / Reset not supported " ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean markSupported ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 47e611c . . 809a102 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 12 : 
 + * Disable SSLv3 for POODLE ( CASSANDRA - 8265 ) 
 * Fix millisecond timestamps in Tracing ( CASSANDRA - 8297 ) 
 * Include keyspace name in error message when there are insufficient 
 live nodes to stream from ( CASSANDRA - 8221 ) 
 diff - - git a / src / java / org / apache / cassandra / security / SSLFactory . java b / src / java / org / apache / cassandra / security / SSLFactory . java 
 index 3cb0670 . . 260c828 100644 
 - - - a / src / java / org / apache / cassandra / security / SSLFactory . java 
 + + + b / src / java / org / apache / cassandra / security / SSLFactory . java 
 @ @ - 61 , 6 + 61 , 7 @ @ public final class SSLFactory 
 String [ ] suits = filterCipherSuites ( serverSocket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; 
 serverSocket . setEnabledCipherSuites ( suits ) ; 
 serverSocket . setNeedClientAuth ( options . require _ client _ auth ) ; 
 + serverSocket . setEnabledProtocols ( new String [ ] { " SSLv2Hello " , " TLSv1 " , " TLSv1 . 1 " , " TLSv1 . 2 " } ) ; 
 serverSocket . bind ( new InetSocketAddress ( address , port ) , 500 ) ; 
 return serverSocket ; 
 } 
 @ @ - 72 , 6 + 73 , 7 @ @ public final class SSLFactory 
 SSLSocket socket = ( SSLSocket ) ctx . getSocketFactory ( ) . createSocket ( address , port , localAddress , localPort ) ; 
 String [ ] suits = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; 
 socket . setEnabledCipherSuites ( suits ) ; 
 + socket . setEnabledProtocols ( new String [ ] { " SSLv2Hello " , " TLSv1 " , " TLSv1 . 1 " , " TLSv1 . 2 " } ) ; 
 return socket ; 
 } 
 
 @ @ - 82 , 6 + 84 , 7 @ @ public final class SSLFactory 
 SSLSocket socket = ( SSLSocket ) ctx . getSocketFactory ( ) . createSocket ( address , port ) ; 
 String [ ] suits = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; 
 socket . setEnabledCipherSuites ( suits ) ; 
 + socket . setEnabledProtocols ( new String [ ] { " SSLv2Hello " , " TLSv1 " , " TLSv1 . 1 " , " TLSv1 . 2 " } ) ; 
 return socket ; 
 } 
 
 @ @ - 92 , 6 + 95 , 7 @ @ public final class SSLFactory 
 SSLSocket socket = ( SSLSocket ) ctx . getSocketFactory ( ) . createSocket ( ) ; 
 String [ ] suits = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; 
 socket . setEnabledCipherSuites ( suits ) ; 
 + socket . setEnabledProtocols ( new String [ ] { " SSLv2Hello " , " TLSv1 " , " TLSv1 . 1 " , " TLSv1 . 2 " } ) ; 
 return socket ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java b / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java 
 index d1a3304 . . 3111deb 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java 
 @ @ - 27 , 6 + 27 , 8 @ @ import java . util . concurrent . ThreadPoolExecutor ; 
 import java . util . concurrent . TimeUnit ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 
 + import javax . net . ssl . SSLServerSocket ; 
 + 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 251 , 6 + 253 , 8 @ @ public class CustomTThreadPoolServer extends TServer 
 params . requireClientAuth ( true ) ; 
 } 
 TServerSocket sslServer = TSSLTransportFactory . getServerSocket ( addr . getPort ( ) , 0 , addr . getAddress ( ) , params ) ; 
 + SSLServerSocket sslServerSocket = ( SSLServerSocket ) sslServer . getServerSocket ( ) ; 
 + sslServerSocket . setEnabledProtocols ( new String [ ] { " SSLv2Hello " , " TLSv1 " , " TLSv1 . 1 " , " TLSv1 . 2 " } ) ; 
 serverTransport = new TCustomServerSocket ( sslServer . getServerSocket ( ) , args . keepAlive , args . sendBufferSize , args . recvBufferSize ) ; 
 } 
 else 
 diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java 
 index f095776 . . 092e1ba 100644 
 - - - a / src / java / org / apache / cassandra / transport / Server . java 
 + + + b / src / java / org / apache / cassandra / transport / Server . java 
 @ @ - 296 , 6 + 296 , 7 @ @ public class Server implements CassandraDaemon . Server 
 sslEngine . setUseClientMode ( false ) ; 
 sslEngine . setEnabledCipherSuites ( encryptionOptions . cipher _ suites ) ; 
 sslEngine . setNeedClientAuth ( encryptionOptions . require _ client _ auth ) ; 
 + sslEngine . setEnabledProtocols ( new String [ ] { " SSLv2Hello " , " TLSv1 " , " TLSv1 . 1 " , " TLSv1 . 2 " } ) ; 
 
 SslHandler sslHandler = new SslHandler ( sslEngine ) ; 
 sslHandler . setIssueHandshake ( true ) ; 
 diff - - git a / src / java / org / apache / cassandra / transport / SimpleClient . java b / src / java / org / apache / cassandra / transport / SimpleClient . java 
 index 5f2efda . . 3bcf751 100644 
 - - - a / src / java / org / apache / cassandra / transport / SimpleClient . java 
 + + + b / src / java / org / apache / cassandra / transport / SimpleClient . java 
 @ @ - 259 , 6 + 259 , 7 @ @ public class SimpleClient 
 SSLEngine sslEngine = sslContext . createSSLEngine ( ) ; 
 sslEngine . setUseClientMode ( true ) ; 
 sslEngine . setEnabledCipherSuites ( encryptionOptions . cipher _ suites ) ; 
 + sslEngine . setEnabledProtocols ( new String [ ] { " SSLv2Hello " , " TLSv1 " , " TLSv1 . 1 " , " TLSv1 . 2 " } ) ; 
 ChannelPipeline pipeline = super . getPipeline ( ) ; 
 
 pipeline . addFirst ( " ssl " , new SslHandler ( sslEngine ) ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cache / AutoSavingCache . java b / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 index 4e35d34 . . 7e4bb77 100644 
 - - - a / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 + + + b / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 @ @ - 37 , 6 + 37 , 7 @ @ import org . apache . cassandra . db . compaction . OperationType ; 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . io . FSWriteError ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 + import org . apache . cassandra . io . util . LengthAvailableInputStream ; 
 import org . apache . cassandra . io . util . SequentialWriter ; 
 import org . apache . cassandra . service . CacheService ; 
 import org . apache . cassandra . service . StorageService ; 
 @ @ - 109 , 7 + 110 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 try 
 { 
 logger . info ( String . format ( " reading saved cache % s " , path ) ) ; 
 - in = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) ) ; 
 + in = new DataInputStream ( new LengthAvailableInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) , path . length ( ) ) ) ; 
 Set < ByteBuffer > keys = new HashSet < ByteBuffer > ( ) ; 
 while ( in . available ( ) > 0 ) 
 { 
 @ @ - 120 , 7 + 121 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 } 
 catch ( Exception e ) 
 { 
 - logger . warn ( String . format ( " error reading saved cache % s , keys loaded so far : % d " , path . getAbsolutePath ( ) , count ) , e ) ; 
 + logger . debug ( String . format ( " harmless error reading saved cache % s fully , keys loaded so far : % d " , path . getAbsolutePath ( ) , count ) , e ) ; 
 return count ; 
 } 
 finally 
 @ @ - 137 , 7 + 138 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 try 
 { 
 logger . info ( String . format ( " reading saved cache % s " , path ) ) ; 
 - in = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) ) ; 
 + in = new DataInputStream ( new LengthAvailableInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) , path . length ( ) ) ) ; 
 List < Future < Pair < K , V > > > futures = new ArrayList < Future < Pair < K , V > > > ( ) ; 
 while ( in . available ( ) > 0 ) 
 { 
 @ @ - 157 , 7 + 158 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 } 
 catch ( Exception e ) 
 { 
 - logger . warn ( String . format ( " error reading saved cache % s " , path . getAbsolutePath ( ) ) , e ) ; 
 + logger . debug ( String . format ( " harmless error reading saved cache % s " , path . getAbsolutePath ( ) ) , e ) ; 
 } 
 finally 
 { 
 diff - - git a / src / java / org / apache / cassandra / io / util / LengthAvailableInputStream . java b / src / java / org / apache / cassandra / io / util / LengthAvailableInputStream . java 
 new file mode 100644 
 index 0000000 . . a467ce2 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / io / util / LengthAvailableInputStream . java 
 @ @ - 0 , 0 + 1 , 98 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . io . util ; 
 + 
 + import java . io . FilterInputStream ; 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + 
 + / * * 
 + * a FilterInputStream that returns the remaining bytes to read from available ( ) 
 + * regardless of whether the device is ready to provide them . 
 + * / 
 + public class LengthAvailableInputStream extends FilterInputStream 
 + { 
 + private long remainingBytes ; 
 + 
 + public LengthAvailableInputStream ( InputStream in , long totalLength ) 
 + { 
 + super ( in ) ; 
 + remainingBytes = totalLength ; 
 + } 
 + 
 + @ Override 
 + public int read ( ) throws IOException 
 + { 
 + int b = in . read ( ) ; 
 + - - remainingBytes ; 
 + return b ; 
 + } 
 + 
 + @ Override 
 + public int read ( byte [ ] b ) throws IOException 
 + { 
 + int length = in . read ( b ) ; 
 + remainingBytes - = length ; 
 + return length ; 
 + } 
 + 
 + @ Override 
 + public int read ( byte [ ] b , int off , int len ) throws IOException 
 + { 
 + int length = in . read ( b , off , len ) ; 
 + remainingBytes - = length ; 
 + return length ; 
 + } 
 + 
 + @ Override 
 + public long skip ( long n ) throws IOException 
 + { 
 + long length = in . skip ( n ) ; 
 + remainingBytes - = length ; 
 + return length ; 
 + } 
 + 
 + @ Override 
 + public int available ( ) throws IOException 
 + { 
 + return ( remainingBytes < = 0 ) ? 0 : ( ( remainingBytes > Integer . MAX _ VALUE ) ? Integer . MAX _ VALUE : ( int ) remainingBytes ) ; 
 + } 
 + 
 + @ Override 
 + public void close ( ) throws IOException 
 + { 
 + in . close ( ) ; 
 + } 
 + 
 + @ Override 
 + public synchronized void mark ( int readlimit ) 
 + { 
 + } 
 + 
 + @ Override 
 + public synchronized void reset ( ) throws IOException 
 + { 
 + throw new IOException ( " Mark / Reset not supported " ) ; 
 + } 
 + 
 + @ Override 
 + public boolean markSupported ( ) 
 + { 
 + return false ; 
 + } 
 + }
