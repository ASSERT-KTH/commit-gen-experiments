BLEU SCORE: 0.027611988917697356

TEST MSG: Only notify if the repaired status actually changed
GENERATED MSG: Make sure we set lastCompactedKey properly

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index ef8c5a7 . . 52bdcce 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 14 <nl> + * Only notify if repair status changed ( CASSANDRA - 11172 ) <nl> * Add partition key to TombstoneOverwhelmingException error message ( CASSANDRA - 10888 ) <nl> * Use logback setting for ' cassandra - v ' command ( CASSANDRA - 10767 ) <nl> * Fix sstableloader to unthrottle streaming by default ( CASSANDRA - 9714 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index 55b873a . . ec7cb45 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . Collection ; <nl> import java . util . Collections ; <nl> + import java . util . HashMap ; <nl> import java . util . HashSet ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> @ @ - 472 , 7 + 473 , 14 @ @ public class CompactionManager implements CompactionManagerMBean <nl> logger . debug ( " Starting anticompaction for ranges { } " , ranges ) ; <nl> Set < SSTableReader > sstables = new HashSet < > ( validatedForRepair ) ; <nl> Set < SSTableReader > mutatedRepairStatuses = new HashSet < > ( ) ; <nl> + / / we should only notify that repair status changed if it actually did : <nl> + Set < SSTableReader > mutatedRepairStatusToNotify = new HashSet < > ( ) ; <nl> + Map < SSTableReader , Boolean > wasRepairedBefore = new HashMap < > ( ) ; <nl> + for ( SSTableReader sstable : sstables ) <nl> + wasRepairedBefore . put ( sstable , sstable . isRepaired ( ) ) ; <nl> + <nl> Set < SSTableReader > nonAnticompacting = new HashSet < > ( ) ; <nl> + <nl> Iterator < SSTableReader > sstableIterator = sstables . iterator ( ) ; <nl> try <nl> { <nl> @ @ - 494 , 6 + 502 , 8 @ @ public class CompactionManager implements CompactionManagerMBean <nl> sstable . descriptor . getMetadataSerializer ( ) . mutateRepairedAt ( sstable . descriptor , repairedAt ) ; <nl> sstable . reloadSSTableMetadata ( ) ; <nl> mutatedRepairStatuses . add ( sstable ) ; <nl> + if ( ! wasRepairedBefore . get ( sstable ) ) <nl> + mutatedRepairStatusToNotify . add ( sstable ) ; <nl> sstableIterator . remove ( ) ; <nl> shouldAnticompact = true ; <nl> break ; <nl> @ @ - 513 , 7 + 523 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> } <nl> } <nl> validatedForRepair . release ( Sets . union ( nonAnticompacting , mutatedRepairStatuses ) ) ; <nl> - cfs . getDataTracker ( ) . notifySSTableRepairedStatusChanged ( mutatedRepairStatuses ) ; <nl> + cfs . getDataTracker ( ) . notifySSTableRepairedStatusChanged ( mutatedRepairStatusToNotify ) ; <nl> cfs . getDataTracker ( ) . unmarkCompacting ( Sets . union ( nonAnticompacting , mutatedRepairStatuses ) ) ; <nl> if ( ! sstables . isEmpty ( ) ) <nl> doAntiCompaction ( cfs , ranges , sstables , repairedAt ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index ef8c5a7 . . 52bdcce 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 14 
 + * Only notify if repair status changed ( CASSANDRA - 11172 ) 
 * Add partition key to TombstoneOverwhelmingException error message ( CASSANDRA - 10888 ) 
 * Use logback setting for ' cassandra - v ' command ( CASSANDRA - 10767 ) 
 * Fix sstableloader to unthrottle streaming by default ( CASSANDRA - 9714 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index 55b873a . . ec7cb45 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . Collection ; 
 import java . util . Collections ; 
 + import java . util . HashMap ; 
 import java . util . HashSet ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 @ @ - 472 , 7 + 473 , 14 @ @ public class CompactionManager implements CompactionManagerMBean 
 logger . debug ( " Starting anticompaction for ranges { } " , ranges ) ; 
 Set < SSTableReader > sstables = new HashSet < > ( validatedForRepair ) ; 
 Set < SSTableReader > mutatedRepairStatuses = new HashSet < > ( ) ; 
 + / / we should only notify that repair status changed if it actually did : 
 + Set < SSTableReader > mutatedRepairStatusToNotify = new HashSet < > ( ) ; 
 + Map < SSTableReader , Boolean > wasRepairedBefore = new HashMap < > ( ) ; 
 + for ( SSTableReader sstable : sstables ) 
 + wasRepairedBefore . put ( sstable , sstable . isRepaired ( ) ) ; 
 + 
 Set < SSTableReader > nonAnticompacting = new HashSet < > ( ) ; 
 + 
 Iterator < SSTableReader > sstableIterator = sstables . iterator ( ) ; 
 try 
 { 
 @ @ - 494 , 6 + 502 , 8 @ @ public class CompactionManager implements CompactionManagerMBean 
 sstable . descriptor . getMetadataSerializer ( ) . mutateRepairedAt ( sstable . descriptor , repairedAt ) ; 
 sstable . reloadSSTableMetadata ( ) ; 
 mutatedRepairStatuses . add ( sstable ) ; 
 + if ( ! wasRepairedBefore . get ( sstable ) ) 
 + mutatedRepairStatusToNotify . add ( sstable ) ; 
 sstableIterator . remove ( ) ; 
 shouldAnticompact = true ; 
 break ; 
 @ @ - 513 , 7 + 523 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 } 
 } 
 validatedForRepair . release ( Sets . union ( nonAnticompacting , mutatedRepairStatuses ) ) ; 
 - cfs . getDataTracker ( ) . notifySSTableRepairedStatusChanged ( mutatedRepairStatuses ) ; 
 + cfs . getDataTracker ( ) . notifySSTableRepairedStatusChanged ( mutatedRepairStatusToNotify ) ; 
 cfs . getDataTracker ( ) . unmarkCompacting ( Sets . union ( nonAnticompacting , mutatedRepairStatuses ) ) ; 
 if ( ! sstables . isEmpty ( ) ) 
 doAntiCompaction ( cfs , ranges , sstables , repairedAt ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
