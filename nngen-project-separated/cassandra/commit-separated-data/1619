BLEU SCORE: 0.0241596535992123

TEST MSG: Commit 9214 on 2 . 2 branch
GENERATED MSG: Update v4 spec w / date and time , fix bounds check on TimeSerializer

TEST DIFF (one line): diff - - git a / doc / native _ protocol _ v4 . spec b / doc / native _ protocol _ v4 . spec <nl> index 0f86989 . . ba3d3b3 100644 <nl> - - - a / doc / native _ protocol _ v4 . spec <nl> + + + b / doc / native _ protocol _ v4 . spec <nl> @ @ - 851 , 69 + 851 , 82 @ @ Table of Contents <nl> A single byte . A value of 0 denotes " false " ; any other value denotes " true " . <nl> ( However , it is recommended that a value of 1 be used to represent " true " . ) <nl> <nl> - 6 . 5 decimal <nl> + 6 . 5 date <nl> + <nl> + An unsigned integer representing days with epoch centered at 2 ^ 31 . <nl> + ( unix epoch January 1st , 1970 ) . <nl> + A few examples : <nl> + 0 : - 5877641 - 06 - 23 <nl> + 2 ^ 31 : 1970 - 1 - 1 <nl> + 2 ^ 32 : 5881580 - 07 - 11 <nl> + <nl> + 6 . 6 decimal <nl> <nl> The decimal format represents an arbitrary - precision number . It contains an <nl> [ int ] " scale " component followed by a varint encoding ( see section 6 . 17 ) <nl> of the unscaled value . The encoded value represents " < unscaled > E < - scale > " . <nl> In other words , " < unscaled > * 10 ^ ( - 1 * < scale > ) " . <nl> <nl> - 6 . 6 double <nl> + 6 . 7 double <nl> <nl> An eight - byte floating point number in the IEEE 754 binary64 format . <nl> <nl> - 6 . 7 float <nl> + 6 . 8 float <nl> <nl> An four - byte floating point number in the IEEE 754 binary32 format . <nl> <nl> - 6 . 8 inet <nl> + 6 . 9 inet <nl> <nl> A 4 byte or 16 byte sequence denoting an IPv4 or IPv6 address , respectively . <nl> <nl> - 6 . 9 int <nl> + 6 . 10 int <nl> <nl> A four - byte two ' s complement integer . <nl> <nl> - 6 . 10 list <nl> + 6 . 11 list <nl> <nl> A [ int ] n indicating the number of elements in the list , followed by n <nl> elements . Each element is [ bytes ] representing the serialized value . <nl> <nl> - 6 . 11 map <nl> + 6 . 12 map <nl> <nl> A [ int ] n indicating the number of key / value pairs in the map , followed by <nl> n entries . Each entry is composed of two [ bytes ] representing the key <nl> and value . <nl> <nl> - 6 . 12 set <nl> + 6 . 13 set <nl> <nl> A [ int ] n indicating the number of elements in the set , followed by n <nl> elements . Each element is [ bytes ] representing the serialized value . <nl> <nl> - 6 . 13 smallint <nl> + 6 . 14 smallint <nl> <nl> A two - byte two ' s complement integer . <nl> <nl> - <nl> - 6 . 14 text <nl> + 6 . 15 text <nl> <nl> A sequence of bytes conforming to the UTF - 8 specifications . <nl> <nl> - 6 . 15 timestamp <nl> + 6 . 16 time <nl> + <nl> + An eight - byte two ' s complement long representing nanoseconds since midnight . <nl> + Valid values are in the range 0 to 86399999999999 <nl> + <nl> + 6 . 17 timestamp <nl> <nl> An eight - byte two ' s complement integer representing a millisecond - precision <nl> offset from the unix epoch ( 00 : 00 : 00 , January 1st , 1970 ) . Negative values <nl> represent a negative offset from the epoch . <nl> <nl> - 6 . 16 timeuuid <nl> + 6 . 18 timeuuid <nl> <nl> A 16 byte sequence representing a version 1 UUID as defined by RFC 4122 . <nl> <nl> - 6 . 17 tinyint <nl> + 6 . 19 tinyint <nl> <nl> A one - byte two ' s complement integer . <nl> <nl> - 6 . 18 tuple <nl> + 6 . 20 tuple <nl> <nl> A sequence of [ bytes ] values representing the items in a tuple . The encoding <nl> of each element depends on the data type for that position in the tuple . <nl> @ @ - 922 , 15 + 935 , 15 @ @ Table of Contents <nl> <nl> Within a tuple , all data types should use the v3 protocol serialization format . <nl> <nl> - 6 . 19 uuid <nl> + 6 . 21 uuid <nl> <nl> A 16 byte sequence representing any valid UUID as defined by RFC 4122 . <nl> <nl> - 6 . 20 varchar <nl> + 6 . 22 varchar <nl> <nl> An alias of the " text " type . <nl> <nl> - 6 . 21 varint <nl> + 6 . 23 varint <nl> <nl> A variable - length two ' s complement encoding of a signed integer . <nl> <nl> @ @ - 1151 , 4 + 1164 , 5 @ @ Table of Contents <nl> * Add custom payload to frames for custom QueryHandler implementations ( ignored by Cassandra ' s standard QueryHandler ) <nl> * Add " TRACE _ COMPLETE " event ( section 4 . 2 . 6 ) . <nl> * Add warnings to frames for responses for which the server generated a warning during processing , which the client needs to address . <nl> + * Add the date and time data types <nl> * Add the tinyint and smallint data types <nl> diff - - git a / src / java / org / apache / cassandra / serializers / TimeSerializer . java b / src / java / org / apache / cassandra / serializers / TimeSerializer . java <nl> index 1f1ce77 . . 1857be3 100644 <nl> - - - a / src / java / org / apache / cassandra / serializers / TimeSerializer . java <nl> + + + b / src / java / org / apache / cassandra / serializers / TimeSerializer . java <nl> @ @ - 46 , 7 + 46 , 7 @ @ public class TimeSerializer implements TypeSerializer < Long > <nl> try <nl> { <nl> long result = Long . parseLong ( source ) ; <nl> - if ( result < 0 | | result > TimeUnit . DAYS . toNanos ( 1 ) ) <nl> + if ( result < 0 | | result > = TimeUnit . DAYS . toNanos ( 1 ) ) <nl> throw new NumberFormatException ( " Input long out of bounds : " + source ) ; <nl> return result ; <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / doc / native _ protocol _ v4 . spec b / doc / native _ protocol _ v4 . spec 
 index 0f86989 . . ba3d3b3 100644 
 - - - a / doc / native _ protocol _ v4 . spec 
 + + + b / doc / native _ protocol _ v4 . spec 
 @ @ - 851 , 69 + 851 , 82 @ @ Table of Contents 
 A single byte . A value of 0 denotes " false " ; any other value denotes " true " . 
 ( However , it is recommended that a value of 1 be used to represent " true " . ) 
 
 - 6 . 5 decimal 
 + 6 . 5 date 
 + 
 + An unsigned integer representing days with epoch centered at 2 ^ 31 . 
 + ( unix epoch January 1st , 1970 ) . 
 + A few examples : 
 + 0 : - 5877641 - 06 - 23 
 + 2 ^ 31 : 1970 - 1 - 1 
 + 2 ^ 32 : 5881580 - 07 - 11 
 + 
 + 6 . 6 decimal 
 
 The decimal format represents an arbitrary - precision number . It contains an 
 [ int ] " scale " component followed by a varint encoding ( see section 6 . 17 ) 
 of the unscaled value . The encoded value represents " < unscaled > E < - scale > " . 
 In other words , " < unscaled > * 10 ^ ( - 1 * < scale > ) " . 
 
 - 6 . 6 double 
 + 6 . 7 double 
 
 An eight - byte floating point number in the IEEE 754 binary64 format . 
 
 - 6 . 7 float 
 + 6 . 8 float 
 
 An four - byte floating point number in the IEEE 754 binary32 format . 
 
 - 6 . 8 inet 
 + 6 . 9 inet 
 
 A 4 byte or 16 byte sequence denoting an IPv4 or IPv6 address , respectively . 
 
 - 6 . 9 int 
 + 6 . 10 int 
 
 A four - byte two ' s complement integer . 
 
 - 6 . 10 list 
 + 6 . 11 list 
 
 A [ int ] n indicating the number of elements in the list , followed by n 
 elements . Each element is [ bytes ] representing the serialized value . 
 
 - 6 . 11 map 
 + 6 . 12 map 
 
 A [ int ] n indicating the number of key / value pairs in the map , followed by 
 n entries . Each entry is composed of two [ bytes ] representing the key 
 and value . 
 
 - 6 . 12 set 
 + 6 . 13 set 
 
 A [ int ] n indicating the number of elements in the set , followed by n 
 elements . Each element is [ bytes ] representing the serialized value . 
 
 - 6 . 13 smallint 
 + 6 . 14 smallint 
 
 A two - byte two ' s complement integer . 
 
 - 
 - 6 . 14 text 
 + 6 . 15 text 
 
 A sequence of bytes conforming to the UTF - 8 specifications . 
 
 - 6 . 15 timestamp 
 + 6 . 16 time 
 + 
 + An eight - byte two ' s complement long representing nanoseconds since midnight . 
 + Valid values are in the range 0 to 86399999999999 
 + 
 + 6 . 17 timestamp 
 
 An eight - byte two ' s complement integer representing a millisecond - precision 
 offset from the unix epoch ( 00 : 00 : 00 , January 1st , 1970 ) . Negative values 
 represent a negative offset from the epoch . 
 
 - 6 . 16 timeuuid 
 + 6 . 18 timeuuid 
 
 A 16 byte sequence representing a version 1 UUID as defined by RFC 4122 . 
 
 - 6 . 17 tinyint 
 + 6 . 19 tinyint 
 
 A one - byte two ' s complement integer . 
 
 - 6 . 18 tuple 
 + 6 . 20 tuple 
 
 A sequence of [ bytes ] values representing the items in a tuple . The encoding 
 of each element depends on the data type for that position in the tuple . 
 @ @ - 922 , 15 + 935 , 15 @ @ Table of Contents 
 
 Within a tuple , all data types should use the v3 protocol serialization format . 
 
 - 6 . 19 uuid 
 + 6 . 21 uuid 
 
 A 16 byte sequence representing any valid UUID as defined by RFC 4122 . 
 
 - 6 . 20 varchar 
 + 6 . 22 varchar 
 
 An alias of the " text " type . 
 
 - 6 . 21 varint 
 + 6 . 23 varint 
 
 A variable - length two ' s complement encoding of a signed integer . 
 
 @ @ - 1151 , 4 + 1164 , 5 @ @ Table of Contents 
 * Add custom payload to frames for custom QueryHandler implementations ( ignored by Cassandra ' s standard QueryHandler ) 
 * Add " TRACE _ COMPLETE " event ( section 4 . 2 . 6 ) . 
 * Add warnings to frames for responses for which the server generated a warning during processing , which the client needs to address . 
 + * Add the date and time data types 
 * Add the tinyint and smallint data types 
 diff - - git a / src / java / org / apache / cassandra / serializers / TimeSerializer . java b / src / java / org / apache / cassandra / serializers / TimeSerializer . java 
 index 1f1ce77 . . 1857be3 100644 
 - - - a / src / java / org / apache / cassandra / serializers / TimeSerializer . java 
 + + + b / src / java / org / apache / cassandra / serializers / TimeSerializer . java 
 @ @ - 46 , 7 + 46 , 7 @ @ public class TimeSerializer implements TypeSerializer < Long > 
 try 
 { 
 long result = Long . parseLong ( source ) ; 
 - if ( result < 0 | | result > TimeUnit . DAYS . toNanos ( 1 ) ) 
 + if ( result < 0 | | result > = TimeUnit . DAYS . toNanos ( 1 ) ) 
 throw new NumberFormatException ( " Input long out of bounds : " + source ) ; 
 return result ; 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
