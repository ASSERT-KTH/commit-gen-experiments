BLEU SCORE: 1.0

TEST MSG: use zero as default score in DynamicEndpointSnitch
GENERATED MSG: use zero as default score in DynamicEndpointSnitch

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6099b01 . . b967580 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 17 <nl> + * Use zero as default score in DynamicEndpointSnitch ( CASSANDRA - 14252 ) <nl> * Respect max hint window when hinting for LWT ( CASSANDRA - 14215 ) <nl> * Adding missing WriteType enum values to v3 , v4 , and v5 spec ( CASSANDRA - 13697 ) <nl> * Don ' t regenerate bloomfilter and summaries on startup ( CASSANDRA - 11163 ) <nl> diff - - git a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> index 8c255f5 . . 5356e8c 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> + + + b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> @ @ - 186 , 7 + 186 , 7 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa <nl> { <nl> Double score = scores . get ( inet ) ; <nl> if ( score = = null ) <nl> - continue ; <nl> + score = 0 . 0 ; <nl> subsnitchOrderedScores . add ( score ) ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java <nl> index af7dc17 . . 866cd82 100644 <nl> - - - a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java <nl> + + + b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java <nl> @ @ - 92 , 7 + 92 , 7 @ @ public class DynamicEndpointSnitchTest <nl> assertEquals ( order , dsnitch . getSortedListByProximity ( self , Arrays . asList ( host1 , host2 , host3 , host4 ) ) ) ; <nl> <nl> setScores ( dsnitch , 20 , hosts , 10 , 10 , 10 ) ; <nl> - order = Arrays . asList ( host1 , host2 , host3 , host4 ) ; <nl> + order = Arrays . asList ( host4 , host1 , host2 , host3 ) ; <nl> assertEquals ( order , dsnitch . getSortedListByProximity ( self , Arrays . asList ( host1 , host2 , host3 , host4 ) ) ) ; <nl> } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6099b01 . . b967580 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 17 
 + * Use zero as default score in DynamicEndpointSnitch ( CASSANDRA - 14252 ) 
 * Respect max hint window when hinting for LWT ( CASSANDRA - 14215 ) 
 * Adding missing WriteType enum values to v3 , v4 , and v5 spec ( CASSANDRA - 13697 ) 
 * Don ' t regenerate bloomfilter and summaries on startup ( CASSANDRA - 11163 ) 
 diff - - git a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 index 8c255f5 . . 5356e8c 100644 
 - - - a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 + + + b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 @ @ - 186 , 7 + 186 , 7 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa 
 { 
 Double score = scores . get ( inet ) ; 
 if ( score = = null ) 
 - continue ; 
 + score = 0 . 0 ; 
 subsnitchOrderedScores . add ( score ) ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java 
 index af7dc17 . . 866cd82 100644 
 - - - a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java 
 + + + b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java 
 @ @ - 92 , 7 + 92 , 7 @ @ public class DynamicEndpointSnitchTest 
 assertEquals ( order , dsnitch . getSortedListByProximity ( self , Arrays . asList ( host1 , host2 , host3 , host4 ) ) ) ; 
 
 setScores ( dsnitch , 20 , hosts , 10 , 10 , 10 ) ; 
 - order = Arrays . asList ( host1 , host2 , host3 , host4 ) ; 
 + order = Arrays . asList ( host4 , host1 , host2 , host3 ) ; 
 assertEquals ( order , dsnitch . getSortedListByProximity ( self , Arrays . asList ( host1 , host2 , host3 , host4 ) ) ) ; 
 } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
