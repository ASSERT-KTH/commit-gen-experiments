BLEU SCORE: 0.018738883683389617

TEST MSG: Refactor TransactionLog code and fix order of cleanup bug on Windows
GENERATED MSG: merge from 1 . 2

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / io / compress / CompressedSequentialWriter . java b / src / java / org / apache / cassandra / io / compress / CompressedSequentialWriter . java <nl> index 8e1ebff . . bbec6f5 100644 <nl> - - - a / src / java / org / apache / cassandra / io / compress / CompressedSequentialWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / compress / CompressedSequentialWriter . java <nl> @ @ - 263 , 7 + 263 , 7 @ @ public class CompressedSequentialWriter extends SequentialWriter <nl> @ Override <nl> protected Throwable doCommit ( Throwable accumulate ) <nl> { <nl> - return metadataWriter . commit ( accumulate ) ; <nl> + return super . doCommit ( metadataWriter . commit ( accumulate ) ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 278 , 7 + 278 , 6 @ @ public class CompressedSequentialWriter extends SequentialWriter <nl> syncInternal ( ) ; <nl> if ( descriptor ! = null ) <nl> crcMetadata . writeFullChecksum ( descriptor ) ; <nl> - releaseFileHandle ( ) ; <nl> sstableMetadataCollector . addCompressionRatio ( compressedSize , uncompressedSize ) ; <nl> metadataWriter . finalizeLength ( current ( ) , chunkCount ) . prepareToCommit ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java <nl> index 1681b0c . . 04ef2d3 100644 <nl> - - - a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java <nl> + + + b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java <nl> @ @ - 410 , 7 + 410 , 7 @ @ public class CompressionMetadata <nl> count = chunkIndex ; <nl> } <nl> <nl> - protected Throwable doPreCleanup ( Throwable failed ) <nl> + protected Throwable doPostCleanup ( Throwable failed ) <nl> { <nl> return offsets . close ( failed ) ; <nl> } <nl> @ @ - 422 , 7 + 422 , 7 @ @ public class CompressionMetadata <nl> <nl> protected Throwable doAbort ( Throwable accumulate ) <nl> { <nl> - return FileUtils . deleteWithConfirm ( filePath , false , accumulate ) ; <nl> + return accumulate ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableTxnWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableTxnWriter . java <nl> index 6e1ac38 . . 5d65a30 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableTxnWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableTxnWriter . java <nl> @ @ - 69 , 13 + 69 , 13 @ @ public class SSTableTxnWriter extends Transactional . AbstractTransactional implem <nl> <nl> protected Throwable doAbort ( Throwable accumulate ) <nl> { <nl> - return writer . abort ( txn . abort ( accumulate ) ) ; <nl> + return txn . abort ( writer . abort ( accumulate ) ) ; <nl> } <nl> <nl> protected void doPrepare ( ) <nl> { <nl> - txn . prepareToCommit ( ) ; <nl> writer . prepareToCommit ( ) ; <nl> + txn . prepareToCommit ( ) ; <nl> } <nl> <nl> public Collection < SSTableReader > finish ( boolean openResult ) <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java <nl> index 06dd508 . . d2500b4 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java <nl> @ @ - 81 , 10 + 81 , 6 @ @ public class BigTableWriter extends SSTableWriter <nl> dbuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) , false ) ; <nl> } <nl> iwriter = new IndexWriter ( keyCount , dataFile ) ; <nl> - <nl> - / / txnLogs will delete if safe to do so ( early readers ) <nl> - iwriter . indexFile . deleteFile ( false ) ; <nl> - dataFile . deleteFile ( false ) ; <nl> } <nl> <nl> public void mark ( ) <nl> @ @ - 322 , 7 + 318 , 7 @ @ public class BigTableWriter extends SSTableWriter <nl> } <nl> <nl> @ Override <nl> - protected Throwable doPreCleanup ( Throwable accumulate ) <nl> + protected Throwable doPostCleanup ( Throwable accumulate ) <nl> { <nl> accumulate = dbuilder . close ( accumulate ) ; <nl> return accumulate ; <nl> @ @ - 485 , 7 + 481 , 7 @ @ public class BigTableWriter extends SSTableWriter <nl> } <nl> <nl> @ Override <nl> - protected Throwable doPreCleanup ( Throwable accumulate ) <nl> + protected Throwable doPostCleanup ( Throwable accumulate ) <nl> { <nl> accumulate = summary . close ( accumulate ) ; <nl> accumulate = bf . close ( accumulate ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / util / ChecksummedSequentialWriter . java b / src / java / org / apache / cassandra / io / util / ChecksummedSequentialWriter . java <nl> index 8203a37 . . fd88151 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / ChecksummedSequentialWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / util / ChecksummedSequentialWriter . java <nl> @ @ - 50 , 7 + 50 , 7 @ @ public class ChecksummedSequentialWriter extends SequentialWriter <nl> @ Override <nl> protected Throwable doCommit ( Throwable accumulate ) <nl> { <nl> - return crcWriter . commit ( accumulate ) ; <nl> + return super . doCommit ( crcWriter . commit ( accumulate ) ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 66 , 9 + 66 , 6 @ @ public class ChecksummedSequentialWriter extends SequentialWriter <nl> if ( descriptor ! = null ) <nl> crcMetadata . writeFullChecksum ( descriptor ) ; <nl> crcWriter . setDescriptor ( descriptor ) . prepareToCommit ( ) ; <nl> - / / we must cleanup our file handles during prepareCommit for Windows compatibility as we cannot rename an open file ; <nl> - / / TODO : once we stop file renaming , remove this for clarity <nl> - releaseFileHandle ( ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / util / SequentialWriter . java b / src / java / org / apache / cassandra / io / util / SequentialWriter . java <nl> index 6000f95 . . 5bdc15a 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / SequentialWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / util / SequentialWriter . java <nl> @ @ - 68 , 8 + 68 , 6 @ @ public class SequentialWriter extends BufferedDataOutputStreamPlus implements Tr <nl> / / due to lack of multiple - inheritance , we proxy our transactional implementation <nl> protected class TransactionalProxy extends AbstractTransactional <nl> { <nl> - private boolean deleteFile = true ; <nl> - <nl> @ Override <nl> protected Throwable doPreCleanup ( Throwable accumulate ) <nl> { <nl> @ @ - 90 , 9 + 88 , 6 @ @ public class SequentialWriter extends BufferedDataOutputStreamPlus implements Tr <nl> protected void doPrepare ( ) <nl> { <nl> syncInternal ( ) ; <nl> - / / we must cleanup our file handles during prepareCommit for Windows compatibility as we cannot rename an open file ; <nl> - / / TODO : once we stop file renaming , remove this for clarity <nl> - releaseFileHandle ( ) ; <nl> } <nl> <nl> protected Throwable doCommit ( Throwable accumulate ) <nl> @ @ - 102 , 10 + 97 , 7 @ @ public class SequentialWriter extends BufferedDataOutputStreamPlus implements Tr <nl> <nl> protected Throwable doAbort ( Throwable accumulate ) <nl> { <nl> - if ( deleteFile ) <nl> - return FileUtils . deleteWithConfirm ( filePath , false , accumulate ) ; <nl> - else <nl> - return accumulate ; <nl> + return accumulate ; <nl> } <nl> } <nl> <nl> @ @ - 409 , 23 + 401 , 6 @ @ public class SequentialWriter extends BufferedDataOutputStreamPlus implements Tr <nl> return new TransactionalProxy ( ) ; <nl> } <nl> <nl> - public void deleteFile ( boolean val ) <nl> - { <nl> - txnProxy . deleteFile = val ; <nl> - } <nl> - <nl> - public void releaseFileHandle ( ) <nl> - { <nl> - try <nl> - { <nl> - channel . close ( ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - throw new FSWriteError ( e , filePath ) ; <nl> - } <nl> - } <nl> - <nl> / * * <nl> * Class to hold a mark to the position of the file <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / utils / concurrent / Transactional . java b / src / java / org / apache / cassandra / utils / concurrent / Transactional . java <nl> index 02562ce . . d142f06 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / concurrent / Transactional . java <nl> + + + b / src / java / org / apache / cassandra / utils / concurrent / Transactional . java <nl> @ @ - 88 , 7 + 88 , 8 @ @ public interface Transactional extends AutoCloseable <nl> / / Transactional objects will perform cleanup in the commit ( ) or abort ( ) calls <nl> <nl> / * * <nl> - * perform an exception - safe pre - abort cleanup ; this will still be run * after * commit <nl> + * perform an exception - safe pre - abort / commit cleanup ; <nl> + * this will be run after prepareToCommit ( so before commit ) , and before abort <nl> * / <nl> protected Throwable doPreCleanup ( Throwable accumulate ) { return accumulate ; } <nl> <nl> @ @ - 113 , 7 + 114 , 6 @ @ public interface Transactional extends AutoCloseable <nl> if ( state ! = State . READY _ TO _ COMMIT ) <nl> throw new IllegalStateException ( " Cannot commit unless READY _ TO _ COMMIT ; state is " + state ) ; <nl> accumulate = doCommit ( accumulate ) ; <nl> - accumulate = doPreCleanup ( accumulate ) ; <nl> accumulate = doPostCleanup ( accumulate ) ; <nl> state = State . COMMITTED ; <nl> return accumulate ; <nl> @ @ - 171 , 6 + 171 , 7 @ @ public interface Transactional extends AutoCloseable <nl> throw new IllegalStateException ( " Cannot prepare to commit unless IN _ PROGRESS ; state is " + state ) ; <nl> <nl> doPrepare ( ) ; <nl> + maybeFail ( doPreCleanup ( null ) ) ; <nl> state = State . READY _ TO _ COMMIT ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / io / compress / CompressedSequentialWriterTest . java b / test / unit / org / apache / cassandra / io / compress / CompressedSequentialWriterTest . java <nl> index 1bdc591 . . 56c83da 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / compress / CompressedSequentialWriterTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / compress / CompressedSequentialWriterTest . java <nl> @ @ - 222 , 7 + 222 , 6 @ @ public class CompressedSequentialWriterTest extends SequentialWriterTest <nl> protected void assertAborted ( ) throws Exception <nl> { <nl> super . assertAborted ( ) ; <nl> - Assert . assertFalse ( offsetsFile . exists ( ) ) ; <nl> } <nl> <nl> void cleanup ( ) <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableLoaderTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableLoaderTest . java <nl> index faa9c3e . . ad7523d 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableLoaderTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableLoaderTest . java <nl> @ @ - 131 , 11 + 131 , 14 @ @ public class SSTableLoaderTest <nl> writer . addRow ( " key1 " , " col1 " , " 100 " ) ; <nl> } <nl> <nl> + ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( CF _ STANDARD1 ) ; <nl> + cfs . forceBlockingFlush ( ) ; / / wait for sstables to be on disk else we won ' t be able to stream them <nl> + <nl> final CountDownLatch latch = new CountDownLatch ( 1 ) ; <nl> SSTableLoader loader = new SSTableLoader ( dataDir , new TestClient ( ) , new OutputHandler . SystemOutput ( false , false ) ) ; <nl> loader . stream ( Collections . emptySet ( ) , completionStreamListener ( latch ) ) . get ( ) ; <nl> <nl> - List < FilteredPartition > partitions = Util . getAll ( Util . cmd ( Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( CF _ STANDARD1 ) ) . build ( ) ) ; <nl> + List < FilteredPartition > partitions = Util . getAll ( Util . cmd ( cfs ) . build ( ) ) ; <nl> <nl> assertEquals ( 1 , partitions . size ( ) ) ; <nl> assertEquals ( " key1 " , AsciiType . instance . getString ( partitions . get ( 0 ) . partitionKey ( ) . getKey ( ) ) ) ; <nl> @ @ - 175 , 6 + 178 , 9 @ @ public class SSTableLoaderTest <nl> writer . addRow ( String . format ( " key % d " , i ) , String . format ( " col % d " , j ) , " 100 " ) ; <nl> } <nl> <nl> + ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( CF _ STANDARD2 ) ; <nl> + cfs . forceBlockingFlush ( ) ; / / wait for sstables to be on disk else we won ' t be able to stream them <nl> + <nl> / / make sure we have some tables . . . <nl> assertTrue ( dataDir . listFiles ( ) . length > 0 ) ; <nl> <nl> @ @ - 183 , 7 + 189 , 7 @ @ public class SSTableLoaderTest <nl> SSTableLoader loader = new SSTableLoader ( dataDir , new TestClient ( ) , new OutputHandler . SystemOutput ( false , false ) ) ; <nl> loader . stream ( Collections . emptySet ( ) , completionStreamListener ( latch ) ) . get ( ) ; <nl> <nl> - List < FilteredPartition > partitions = Util . getAll ( Util . cmd ( Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( CF _ STANDARD2 ) ) . build ( ) ) ; <nl> + List < FilteredPartition > partitions = Util . getAll ( Util . cmd ( cfs ) . build ( ) ) ; <nl> <nl> assertTrue ( partitions . size ( ) > 0 & & partitions . size ( ) < NB _ PARTITIONS ) ; <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / io / util / ChecksummedSequentialWriterTest . java b / test / unit / org / apache / cassandra / io / util / ChecksummedSequentialWriterTest . java <nl> index 9731a8d . . bea3aac 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / util / ChecksummedSequentialWriterTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / util / ChecksummedSequentialWriterTest . java <nl> @ @ - 85 , 7 + 85 , 6 @ @ public class ChecksummedSequentialWriterTest extends SequentialWriterTest <nl> protected void assertAborted ( ) throws Exception <nl> { <nl> super . assertAborted ( ) ; <nl> - Assert . assertFalse ( crcFile . exists ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / io / util / SequentialWriterTest . java b / test / unit / org / apache / cassandra / io / util / SequentialWriterTest . java <nl> index fd38427 . . f5a366e 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / util / SequentialWriterTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / util / SequentialWriterTest . java <nl> @ @ - 102 , 7 + 102 , 6 @ @ public class SequentialWriterTest extends AbstractTransactionalTest <nl> protected void assertAborted ( ) throws Exception <nl> { <nl> Assert . assertFalse ( writer . isOpen ( ) ) ; <nl> - Assert . assertFalse ( file . exists ( ) ) ; <nl> } <nl> <nl> protected void assertCommitted ( ) throws Exception
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b935425 . . 7f5a487 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 2 - rc1 <nl> + * fix cqlsh rendering of blob fields ( CASSANDRA - 4970 ) <nl> * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) <nl> * save truncation position in system table ( CASSANDRA - 4906 ) <nl> * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) <nl> diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py <nl> index d15c083 . . bab3506 100644 <nl> - - - a / pylib / cqlshlib / formatting . py <nl> + + + b / pylib / cqlshlib / formatting . py <nl> @ @ - 88 , 8 + 88 , 8 @ @ def formatter _ for ( typname ) : <nl> return f <nl> return registrator <nl> <nl> - @ formatter _ for ( ' bytes ' ) <nl> - def format _ value _ bytes ( val , colormap , * * _ ) : <nl> + @ formatter _ for ( ' blob ' ) <nl> + def format _ value _ blob ( val , colormap , * * _ ) : <nl> bval = ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) <nl> return colorme ( bval , colormap , ' hex ' ) <nl>

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / io / compress / CompressedSequentialWriter . java b / src / java / org / apache / cassandra / io / compress / CompressedSequentialWriter . java 
 index 8e1ebff . . bbec6f5 100644 
 - - - a / src / java / org / apache / cassandra / io / compress / CompressedSequentialWriter . java 
 + + + b / src / java / org / apache / cassandra / io / compress / CompressedSequentialWriter . java 
 @ @ - 263 , 7 + 263 , 7 @ @ public class CompressedSequentialWriter extends SequentialWriter 
 @ Override 
 protected Throwable doCommit ( Throwable accumulate ) 
 { 
 - return metadataWriter . commit ( accumulate ) ; 
 + return super . doCommit ( metadataWriter . commit ( accumulate ) ) ; 
 } 
 
 @ Override 
 @ @ - 278 , 7 + 278 , 6 @ @ public class CompressedSequentialWriter extends SequentialWriter 
 syncInternal ( ) ; 
 if ( descriptor ! = null ) 
 crcMetadata . writeFullChecksum ( descriptor ) ; 
 - releaseFileHandle ( ) ; 
 sstableMetadataCollector . addCompressionRatio ( compressedSize , uncompressedSize ) ; 
 metadataWriter . finalizeLength ( current ( ) , chunkCount ) . prepareToCommit ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java 
 index 1681b0c . . 04ef2d3 100644 
 - - - a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java 
 + + + b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java 
 @ @ - 410 , 7 + 410 , 7 @ @ public class CompressionMetadata 
 count = chunkIndex ; 
 } 
 
 - protected Throwable doPreCleanup ( Throwable failed ) 
 + protected Throwable doPostCleanup ( Throwable failed ) 
 { 
 return offsets . close ( failed ) ; 
 } 
 @ @ - 422 , 7 + 422 , 7 @ @ public class CompressionMetadata 
 
 protected Throwable doAbort ( Throwable accumulate ) 
 { 
 - return FileUtils . deleteWithConfirm ( filePath , false , accumulate ) ; 
 + return accumulate ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableTxnWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableTxnWriter . java 
 index 6e1ac38 . . 5d65a30 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableTxnWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableTxnWriter . java 
 @ @ - 69 , 13 + 69 , 13 @ @ public class SSTableTxnWriter extends Transactional . AbstractTransactional implem 
 
 protected Throwable doAbort ( Throwable accumulate ) 
 { 
 - return writer . abort ( txn . abort ( accumulate ) ) ; 
 + return txn . abort ( writer . abort ( accumulate ) ) ; 
 } 
 
 protected void doPrepare ( ) 
 { 
 - txn . prepareToCommit ( ) ; 
 writer . prepareToCommit ( ) ; 
 + txn . prepareToCommit ( ) ; 
 } 
 
 public Collection < SSTableReader > finish ( boolean openResult ) 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java 
 index 06dd508 . . d2500b4 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java 
 @ @ - 81 , 10 + 81 , 6 @ @ public class BigTableWriter extends SSTableWriter 
 dbuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) , false ) ; 
 } 
 iwriter = new IndexWriter ( keyCount , dataFile ) ; 
 - 
 - / / txnLogs will delete if safe to do so ( early readers ) 
 - iwriter . indexFile . deleteFile ( false ) ; 
 - dataFile . deleteFile ( false ) ; 
 } 
 
 public void mark ( ) 
 @ @ - 322 , 7 + 318 , 7 @ @ public class BigTableWriter extends SSTableWriter 
 } 
 
 @ Override 
 - protected Throwable doPreCleanup ( Throwable accumulate ) 
 + protected Throwable doPostCleanup ( Throwable accumulate ) 
 { 
 accumulate = dbuilder . close ( accumulate ) ; 
 return accumulate ; 
 @ @ - 485 , 7 + 481 , 7 @ @ public class BigTableWriter extends SSTableWriter 
 } 
 
 @ Override 
 - protected Throwable doPreCleanup ( Throwable accumulate ) 
 + protected Throwable doPostCleanup ( Throwable accumulate ) 
 { 
 accumulate = summary . close ( accumulate ) ; 
 accumulate = bf . close ( accumulate ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / util / ChecksummedSequentialWriter . java b / src / java / org / apache / cassandra / io / util / ChecksummedSequentialWriter . java 
 index 8203a37 . . fd88151 100644 
 - - - a / src / java / org / apache / cassandra / io / util / ChecksummedSequentialWriter . java 
 + + + b / src / java / org / apache / cassandra / io / util / ChecksummedSequentialWriter . java 
 @ @ - 50 , 7 + 50 , 7 @ @ public class ChecksummedSequentialWriter extends SequentialWriter 
 @ Override 
 protected Throwable doCommit ( Throwable accumulate ) 
 { 
 - return crcWriter . commit ( accumulate ) ; 
 + return super . doCommit ( crcWriter . commit ( accumulate ) ) ; 
 } 
 
 @ Override 
 @ @ - 66 , 9 + 66 , 6 @ @ public class ChecksummedSequentialWriter extends SequentialWriter 
 if ( descriptor ! = null ) 
 crcMetadata . writeFullChecksum ( descriptor ) ; 
 crcWriter . setDescriptor ( descriptor ) . prepareToCommit ( ) ; 
 - / / we must cleanup our file handles during prepareCommit for Windows compatibility as we cannot rename an open file ; 
 - / / TODO : once we stop file renaming , remove this for clarity 
 - releaseFileHandle ( ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / io / util / SequentialWriter . java b / src / java / org / apache / cassandra / io / util / SequentialWriter . java 
 index 6000f95 . . 5bdc15a 100644 
 - - - a / src / java / org / apache / cassandra / io / util / SequentialWriter . java 
 + + + b / src / java / org / apache / cassandra / io / util / SequentialWriter . java 
 @ @ - 68 , 8 + 68 , 6 @ @ public class SequentialWriter extends BufferedDataOutputStreamPlus implements Tr 
 / / due to lack of multiple - inheritance , we proxy our transactional implementation 
 protected class TransactionalProxy extends AbstractTransactional 
 { 
 - private boolean deleteFile = true ; 
 - 
 @ Override 
 protected Throwable doPreCleanup ( Throwable accumulate ) 
 { 
 @ @ - 90 , 9 + 88 , 6 @ @ public class SequentialWriter extends BufferedDataOutputStreamPlus implements Tr 
 protected void doPrepare ( ) 
 { 
 syncInternal ( ) ; 
 - / / we must cleanup our file handles during prepareCommit for Windows compatibility as we cannot rename an open file ; 
 - / / TODO : once we stop file renaming , remove this for clarity 
 - releaseFileHandle ( ) ; 
 } 
 
 protected Throwable doCommit ( Throwable accumulate ) 
 @ @ - 102 , 10 + 97 , 7 @ @ public class SequentialWriter extends BufferedDataOutputStreamPlus implements Tr 
 
 protected Throwable doAbort ( Throwable accumulate ) 
 { 
 - if ( deleteFile ) 
 - return FileUtils . deleteWithConfirm ( filePath , false , accumulate ) ; 
 - else 
 - return accumulate ; 
 + return accumulate ; 
 } 
 } 
 
 @ @ - 409 , 23 + 401 , 6 @ @ public class SequentialWriter extends BufferedDataOutputStreamPlus implements Tr 
 return new TransactionalProxy ( ) ; 
 } 
 
 - public void deleteFile ( boolean val ) 
 - { 
 - txnProxy . deleteFile = val ; 
 - } 
 - 
 - public void releaseFileHandle ( ) 
 - { 
 - try 
 - { 
 - channel . close ( ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - throw new FSWriteError ( e , filePath ) ; 
 - } 
 - } 
 - 
 / * * 
 * Class to hold a mark to the position of the file 
 * / 
 diff - - git a / src / java / org / apache / cassandra / utils / concurrent / Transactional . java b / src / java / org / apache / cassandra / utils / concurrent / Transactional . java 
 index 02562ce . . d142f06 100644 
 - - - a / src / java / org / apache / cassandra / utils / concurrent / Transactional . java 
 + + + b / src / java / org / apache / cassandra / utils / concurrent / Transactional . java 
 @ @ - 88 , 7 + 88 , 8 @ @ public interface Transactional extends AutoCloseable 
 / / Transactional objects will perform cleanup in the commit ( ) or abort ( ) calls 
 
 / * * 
 - * perform an exception - safe pre - abort cleanup ; this will still be run * after * commit 
 + * perform an exception - safe pre - abort / commit cleanup ; 
 + * this will be run after prepareToCommit ( so before commit ) , and before abort 
 * / 
 protected Throwable doPreCleanup ( Throwable accumulate ) { return accumulate ; } 
 
 @ @ - 113 , 7 + 114 , 6 @ @ public interface Transactional extends AutoCloseable 
 if ( state ! = State . READY _ TO _ COMMIT ) 
 throw new IllegalStateException ( " Cannot commit unless READY _ TO _ COMMIT ; state is " + state ) ; 
 accumulate = doCommit ( accumulate ) ; 
 - accumulate = doPreCleanup ( accumulate ) ; 
 accumulate = doPostCleanup ( accumulate ) ; 
 state = State . COMMITTED ; 
 return accumulate ; 
 @ @ - 171 , 6 + 171 , 7 @ @ public interface Transactional extends AutoCloseable 
 throw new IllegalStateException ( " Cannot prepare to commit unless IN _ PROGRESS ; state is " + state ) ; 
 
 doPrepare ( ) ; 
 + maybeFail ( doPreCleanup ( null ) ) ; 
 state = State . READY _ TO _ COMMIT ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / io / compress / CompressedSequentialWriterTest . java b / test / unit / org / apache / cassandra / io / compress / CompressedSequentialWriterTest . java 
 index 1bdc591 . . 56c83da 100644 
 - - - a / test / unit / org / apache / cassandra / io / compress / CompressedSequentialWriterTest . java 
 + + + b / test / unit / org / apache / cassandra / io / compress / CompressedSequentialWriterTest . java 
 @ @ - 222 , 7 + 222 , 6 @ @ public class CompressedSequentialWriterTest extends SequentialWriterTest 
 protected void assertAborted ( ) throws Exception 
 { 
 super . assertAborted ( ) ; 
 - Assert . assertFalse ( offsetsFile . exists ( ) ) ; 
 } 
 
 void cleanup ( ) 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableLoaderTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableLoaderTest . java 
 index faa9c3e . . ad7523d 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableLoaderTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableLoaderTest . java 
 @ @ - 131 , 11 + 131 , 14 @ @ public class SSTableLoaderTest 
 writer . addRow ( " key1 " , " col1 " , " 100 " ) ; 
 } 
 
 + ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( CF _ STANDARD1 ) ; 
 + cfs . forceBlockingFlush ( ) ; / / wait for sstables to be on disk else we won ' t be able to stream them 
 + 
 final CountDownLatch latch = new CountDownLatch ( 1 ) ; 
 SSTableLoader loader = new SSTableLoader ( dataDir , new TestClient ( ) , new OutputHandler . SystemOutput ( false , false ) ) ; 
 loader . stream ( Collections . emptySet ( ) , completionStreamListener ( latch ) ) . get ( ) ; 
 
 - List < FilteredPartition > partitions = Util . getAll ( Util . cmd ( Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( CF _ STANDARD1 ) ) . build ( ) ) ; 
 + List < FilteredPartition > partitions = Util . getAll ( Util . cmd ( cfs ) . build ( ) ) ; 
 
 assertEquals ( 1 , partitions . size ( ) ) ; 
 assertEquals ( " key1 " , AsciiType . instance . getString ( partitions . get ( 0 ) . partitionKey ( ) . getKey ( ) ) ) ; 
 @ @ - 175 , 6 + 178 , 9 @ @ public class SSTableLoaderTest 
 writer . addRow ( String . format ( " key % d " , i ) , String . format ( " col % d " , j ) , " 100 " ) ; 
 } 
 
 + ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( CF _ STANDARD2 ) ; 
 + cfs . forceBlockingFlush ( ) ; / / wait for sstables to be on disk else we won ' t be able to stream them 
 + 
 / / make sure we have some tables . . . 
 assertTrue ( dataDir . listFiles ( ) . length > 0 ) ; 
 
 @ @ - 183 , 7 + 189 , 7 @ @ public class SSTableLoaderTest 
 SSTableLoader loader = new SSTableLoader ( dataDir , new TestClient ( ) , new OutputHandler . SystemOutput ( false , false ) ) ; 
 loader . stream ( Collections . emptySet ( ) , completionStreamListener ( latch ) ) . get ( ) ; 
 
 - List < FilteredPartition > partitions = Util . getAll ( Util . cmd ( Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( CF _ STANDARD2 ) ) . build ( ) ) ; 
 + List < FilteredPartition > partitions = Util . getAll ( Util . cmd ( cfs ) . build ( ) ) ; 
 
 assertTrue ( partitions . size ( ) > 0 & & partitions . size ( ) < NB _ PARTITIONS ) ; 
 
 diff - - git a / test / unit / org / apache / cassandra / io / util / ChecksummedSequentialWriterTest . java b / test / unit / org / apache / cassandra / io / util / ChecksummedSequentialWriterTest . java 
 index 9731a8d . . bea3aac 100644 
 - - - a / test / unit / org / apache / cassandra / io / util / ChecksummedSequentialWriterTest . java 
 + + + b / test / unit / org / apache / cassandra / io / util / ChecksummedSequentialWriterTest . java 
 @ @ - 85 , 7 + 85 , 6 @ @ public class ChecksummedSequentialWriterTest extends SequentialWriterTest 
 protected void assertAborted ( ) throws Exception 
 { 
 super . assertAborted ( ) ; 
 - Assert . assertFalse ( crcFile . exists ( ) ) ; 
 } 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / io / util / SequentialWriterTest . java b / test / unit / org / apache / cassandra / io / util / SequentialWriterTest . java 
 index fd38427 . . f5a366e 100644 
 - - - a / test / unit / org / apache / cassandra / io / util / SequentialWriterTest . java 
 + + + b / test / unit / org / apache / cassandra / io / util / SequentialWriterTest . java 
 @ @ - 102 , 7 + 102 , 6 @ @ public class SequentialWriterTest extends AbstractTransactionalTest 
 protected void assertAborted ( ) throws Exception 
 { 
 Assert . assertFalse ( writer . isOpen ( ) ) ; 
 - Assert . assertFalse ( file . exists ( ) ) ; 
 } 
 
 protected void assertCommitted ( ) throws Exception

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b935425 . . 7f5a487 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 2 - rc1 
 + * fix cqlsh rendering of blob fields ( CASSANDRA - 4970 ) 
 * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) 
 * save truncation position in system table ( CASSANDRA - 4906 ) 
 * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) 
 diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py 
 index d15c083 . . bab3506 100644 
 - - - a / pylib / cqlshlib / formatting . py 
 + + + b / pylib / cqlshlib / formatting . py 
 @ @ - 88 , 8 + 88 , 8 @ @ def formatter _ for ( typname ) : 
 return f 
 return registrator 
 
 - @ formatter _ for ( ' bytes ' ) 
 - def format _ value _ bytes ( val , colormap , * * _ ) : 
 + @ formatter _ for ( ' blob ' ) 
 + def format _ value _ blob ( val , colormap , * * _ ) : 
 bval = ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) 
 return colorme ( bval , colormap , ' hex ' ) 

