BLEU SCORE: 0.02383853510228548

TEST MSG: Make the fanout size for LeveledCompactionStrategy to be configurable
GENERATED MSG: identify and blacklist corrupted SSTables from future compactions

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 32a2dfd . . 20a64e1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 10 <nl> + * Make the fanout size for LeveledCompactionStrategy to be configurable ( CASSANDRA - 11550 ) <nl> * Fix timeout in ReplicationAwareTokenAllocatorTest ( CASSANDRA - 12784 ) <nl> * Improve sum aggregate functions ( CASSANDRA - 12417 ) <nl> * Make cassandra . yaml docs for batch _ size _ * _ threshold _ in _ kb reflect changes in CASSANDRA - 10876 ( CASSANDRA - 12761 ) <nl> diff - - git a / doc / source / operating / compaction . rst b / doc / source / operating / compaction . rst <nl> index b0f97c4 . . 0f39000 100644 <nl> - - - a / doc / source / operating / compaction . rst <nl> + + + b / doc / source / operating / compaction . rst <nl> @ @ - 262 , 7 + 262 , 7 @ @ and the attribute to change is ` ` CompactionParameters ` ` or ` ` CompactionParameter <nl> syntax for the json version is the same as you would use in an : ref : ` ALTER TABLE < alter - table - statement > ` statement - <nl> for example : : <nl> <nl> - { ' class ' : ' LeveledCompactionStrategy ' , ' sstable _ size _ in _ mb ' : 123 } <nl> + { ' class ' : ' LeveledCompactionStrategy ' , ' sstable _ size _ in _ mb ' : 123 , ' fanout _ size ' : 10 } <nl> <nl> The setting is kept until someone executes an : ref : ` ALTER TABLE < alter - table - statement > ` that touches the compaction <nl> settings or restarts the node . <nl> @ @ - 379 , 6 + 379 , 10 @ @ LCS options <nl> The target compressed ( if using compression ) sstable size - the sstables can end up being larger if there are very <nl> large partitions on the node . <nl> <nl> + ` ` fanout _ size ` ` ( default : 10 ) <nl> + The target size of levels increases by this fanout _ size multiplier . You can reduce the space amplification by tuning <nl> + this option . <nl> + <nl> LCS also support the ` ` cassandra . disable _ stcs _ in _ l0 ` ` startup option ( ` ` - Dcassandra . disable _ stcs _ in _ l0 = true ` ` ) to avoid <nl> doing STCS in L0 . <nl> <nl> diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py <nl> index f388f4c . . 8e86801 100644 <nl> - - - a / pylib / cqlshlib / cql3handling . py <nl> + + + b / pylib / cqlshlib / cql3handling . py <nl> @ @ - 512 , 6 + 512 , 7 @ @ def cf _ prop _ val _ mapkey _ completer ( ctxt , cass ) : <nl> opts . add ( ' bucket _ low ' ) <nl> elif csc = = ' LeveledCompactionStrategy ' : <nl> opts . add ( ' sstable _ size _ in _ mb ' ) <nl> + opts . add ( ' fanout _ size ' ) <nl> elif csc = = ' DateTieredCompactionStrategy ' : <nl> opts . add ( ' base _ time _ seconds ' ) <nl> opts . add ( ' max _ sstable _ age _ days ' ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index f89ac3f . . 0862686 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 2481 , 6 + 2481 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> return compactionStrategyManager . getSSTableCountPerLevel ( ) ; <nl> } <nl> <nl> + public int getLevelFanoutSize ( ) <nl> + { <nl> + return compactionStrategyManager . getLevelFanoutSize ( ) ; <nl> + } <nl> + <nl> public static class ViewFragment <nl> { <nl> public final List < SSTableReader > sstables ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> index ccaacf6 . . d788e2e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> @ @ - 157 , 6 + 157 , 11 @ @ public interface ColumnFamilyStoreMBean <nl> public int [ ] getSSTableCountPerLevel ( ) ; <nl> <nl> / * * <nl> + * @ return sstable fanout size for level compaction strategy . <nl> + * / <nl> + public int getLevelFanoutSize ( ) ; <nl> + <nl> + / * * <nl> * Get the ratio of droppable tombstones to real columns ( and non - droppable tombstones ) <nl> * @ return ratio <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java <nl> index 1ad89e9 . . 5679338 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java <nl> @ @ - 341 , 6 + 341 , 23 @ @ public class CompactionStrategyManager implements INotificationConsumer <nl> return 0 ; <nl> } <nl> <nl> + public int getLevelFanoutSize ( ) <nl> + { <nl> + readLock . lock ( ) ; <nl> + try <nl> + { <nl> + if ( repaired . get ( 0 ) instanceof LeveledCompactionStrategy ) <nl> + { <nl> + return ( ( LeveledCompactionStrategy ) repaired . get ( 0 ) ) . getLevelFanoutSize ( ) ; <nl> + } <nl> + } <nl> + finally <nl> + { <nl> + readLock . unlock ( ) ; <nl> + } <nl> + return LeveledCompactionStrategy . DEFAULT _ LEVEL _ FANOUT _ SIZE ; <nl> + } <nl> + <nl> public int [ ] getSSTableCountPerLevel ( ) <nl> { <nl> readLock . lock ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> index 0633251f . . f943b19 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> @ @ - 47 , 15 + 47 , 19 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy <nl> private static final Logger logger = LoggerFactory . getLogger ( LeveledCompactionStrategy . class ) ; <nl> private static final String SSTABLE _ SIZE _ OPTION = " sstable _ size _ in _ mb " ; <nl> private static final boolean tolerateSstableSize = Boolean . getBoolean ( Config . PROPERTY _ PREFIX + " tolerate _ sstable _ size " ) ; <nl> + private static final String LEVEL _ FANOUT _ SIZE _ OPTION = " fanout _ size " ; <nl> + public static final int DEFAULT _ LEVEL _ FANOUT _ SIZE = 10 ; <nl> <nl> @ VisibleForTesting <nl> final LeveledManifest manifest ; <nl> private final int maxSSTableSizeInMB ; <nl> + private final int levelFanoutSize ; <nl> <nl> public LeveledCompactionStrategy ( ColumnFamilyStore cfs , Map < String , String > options ) <nl> { <nl> super ( cfs , options ) ; <nl> int configuredMaxSSTableSize = 160 ; <nl> + int configuredLevelFanoutSize = DEFAULT _ LEVEL _ FANOUT _ SIZE ; <nl> SizeTieredCompactionStrategyOptions localOptions = new SizeTieredCompactionStrategyOptions ( options ) ; <nl> if ( options ! = null ) <nl> { <nl> @ @ - 72 , 10 + 76 , 16 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy <nl> configuredMaxSSTableSize , cfs . name , cfs . getColumnFamilyName ( ) ) ; <nl> } <nl> } <nl> + <nl> + if ( options . containsKey ( LEVEL _ FANOUT _ SIZE _ OPTION ) ) <nl> + { <nl> + configuredLevelFanoutSize = Integer . parseInt ( options . get ( LEVEL _ FANOUT _ SIZE _ OPTION ) ) ; <nl> + } <nl> } <nl> maxSSTableSizeInMB = configuredMaxSSTableSize ; <nl> + levelFanoutSize = configuredLevelFanoutSize ; <nl> <nl> - manifest = new LeveledManifest ( cfs , this . maxSSTableSizeInMB , localOptions ) ; <nl> + manifest = new LeveledManifest ( cfs , this . maxSSTableSizeInMB , this . levelFanoutSize , localOptions ) ; <nl> logger . trace ( " Created { } " , manifest ) ; <nl> } <nl> <nl> @ @ - 243 , 6 + 253 , 11 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy <nl> return maxSSTableSizeInMB * 1024L * 1024L ; <nl> } <nl> <nl> + public int getLevelFanoutSize ( ) <nl> + { <nl> + return levelFanoutSize ; <nl> + } <nl> + <nl> public ScannerList getScanners ( Collection < SSTableReader > sstables , Collection < Range < Token > > ranges ) <nl> { <nl> Set < SSTableReader > [ ] sstablesPerLevel = manifest . getSStablesPerLevelSnapshot ( ) ; <nl> @ @ - 531 , 6 + 546 , 23 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy <nl> <nl> uncheckedOptions . remove ( SSTABLE _ SIZE _ OPTION ) ; <nl> <nl> + / / Validate the fanout _ size option <nl> + String levelFanoutSize = options . containsKey ( LEVEL _ FANOUT _ SIZE _ OPTION ) ? options . get ( LEVEL _ FANOUT _ SIZE _ OPTION ) : String . valueOf ( DEFAULT _ LEVEL _ FANOUT _ SIZE ) ; <nl> + try <nl> + { <nl> + int fanoutSize = Integer . parseInt ( levelFanoutSize ) ; <nl> + if ( fanoutSize < 1 ) <nl> + { <nl> + throw new ConfigurationException ( String . format ( " % s must be larger than 0 , but was % s " , LEVEL _ FANOUT _ SIZE _ OPTION , fanoutSize ) ) ; <nl> + } <nl> + } <nl> + catch ( NumberFormatException ex ) <nl> + { <nl> + throw new ConfigurationException ( String . format ( " % s is not a parsable int ( base10 ) for % s " , size , LEVEL _ FANOUT _ SIZE _ OPTION ) , ex ) ; <nl> + } <nl> + <nl> + uncheckedOptions . remove ( LEVEL _ FANOUT _ SIZE _ OPTION ) ; <nl> + <nl> uncheckedOptions = SizeTieredCompactionStrategyOptions . validateOptions ( options , uncheckedOptions ) ; <nl> <nl> return uncheckedOptions ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> index 5a8f153 . . 3d118de 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> @ @ - 70 , 12 + 70 , 14 @ @ public class LeveledManifest <nl> private final long maxSSTableSizeInBytes ; <nl> private final SizeTieredCompactionStrategyOptions options ; <nl> private final int [ ] compactionCounter ; <nl> + private final int levelFanoutSize ; <nl> <nl> - LeveledManifest ( ColumnFamilyStore cfs , int maxSSTableSizeInMB , SizeTieredCompactionStrategyOptions options ) <nl> + LeveledManifest ( ColumnFamilyStore cfs , int maxSSTableSizeInMB , int fanoutSize , SizeTieredCompactionStrategyOptions options ) <nl> { <nl> this . cfs = cfs ; <nl> this . maxSSTableSizeInBytes = maxSSTableSizeInMB * 1024L * 1024L ; <nl> this . options = options ; <nl> + this . levelFanoutSize = fanoutSize ; <nl> <nl> generations = new List [ MAX _ LEVEL _ COUNT ] ; <nl> lastCompactedKeys = new PartitionPosition [ MAX _ LEVEL _ COUNT ] ; <nl> @ @ - 87 , 14 + 89 , 14 @ @ public class LeveledManifest <nl> compactionCounter = new int [ MAX _ LEVEL _ COUNT ] ; <nl> } <nl> <nl> - public static LeveledManifest create ( ColumnFamilyStore cfs , int maxSSTableSize , List < SSTableReader > sstables ) <nl> + public static LeveledManifest create ( ColumnFamilyStore cfs , int maxSSTableSize , int fanoutSize , List < SSTableReader > sstables ) <nl> { <nl> - return create ( cfs , maxSSTableSize , sstables , new SizeTieredCompactionStrategyOptions ( ) ) ; <nl> + return create ( cfs , maxSSTableSize , fanoutSize , sstables , new SizeTieredCompactionStrategyOptions ( ) ) ; <nl> } <nl> <nl> - public static LeveledManifest create ( ColumnFamilyStore cfs , int maxSSTableSize , Iterable < SSTableReader > sstables , SizeTieredCompactionStrategyOptions options ) <nl> + public static LeveledManifest create ( ColumnFamilyStore cfs , int maxSSTableSize , int fanoutSize , Iterable < SSTableReader > sstables , SizeTieredCompactionStrategyOptions options ) <nl> { <nl> - LeveledManifest manifest = new LeveledManifest ( cfs , maxSSTableSize , options ) ; <nl> + LeveledManifest manifest = new LeveledManifest ( cfs , maxSSTableSize , fanoutSize , options ) ; <nl> <nl> / / ensure all SSTables are in the manifest <nl> for ( SSTableReader ssTableReader : sstables ) <nl> @ @ - 282 , 11 + 284 , 16 @ @ public class LeveledManifest <nl> return builder . toString ( ) ; <nl> } <nl> <nl> - public static long maxBytesForLevel ( int level , long maxSSTableSizeInBytes ) <nl> + public long maxBytesForLevel ( int level , long maxSSTableSizeInBytes ) <nl> + { <nl> + return maxBytesForLevel ( level , levelFanoutSize , maxSSTableSizeInBytes ) ; <nl> + } <nl> + <nl> + public static long maxBytesForLevel ( int level , int levelFanoutSize , long maxSSTableSizeInBytes ) <nl> { <nl> if ( level = = 0 ) <nl> return 4L * maxSSTableSizeInBytes ; <nl> - double bytes = Math . pow ( 10 , level ) * maxSSTableSizeInBytes ; <nl> + double bytes = Math . pow ( levelFanoutSize , level ) * maxSSTableSizeInBytes ; <nl> if ( bytes > Long . MAX _ VALUE ) <nl> throw new RuntimeException ( " At most " + Long . MAX _ VALUE + " bytes may be in a compaction level ; your maxSSTableSize must be absurdly high to compute " + bytes ) ; <nl> return ( long ) bytes ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / writers / MajorLeveledCompactionWriter . java b / src / java / org / apache / cassandra / db / compaction / writers / MajorLeveledCompactionWriter . java <nl> index 6cccfcb . . 0beb505 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / writers / MajorLeveledCompactionWriter . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / writers / MajorLeveledCompactionWriter . java <nl> @ @ - 41 , 6 + 41 , 7 @ @ public class MajorLeveledCompactionWriter extends CompactionAwareWriter <nl> private int sstablesWritten = 0 ; <nl> private final long keysPerSSTable ; <nl> private Directories . DataDirectory sstableDirectory ; <nl> + private final int levelFanoutSize ; <nl> <nl> public MajorLeveledCompactionWriter ( ColumnFamilyStore cfs , <nl> Directories directories , <nl> @ @ - 73 , 6 + 74 , 7 @ @ public class MajorLeveledCompactionWriter extends CompactionAwareWriter <nl> { <nl> super ( cfs , directories , txn , nonExpiredSSTables , keepOriginals ) ; <nl> this . maxSSTableSize = maxSSTableSize ; <nl> + this . levelFanoutSize = cfs . getLevelFanoutSize ( ) ; <nl> long estimatedSSTables = Math . max ( 1 , SSTableReader . getTotalBytes ( nonExpiredSSTables ) / maxSSTableSize ) ; <nl> keysPerSSTable = estimatedTotalKeys / estimatedSSTables ; <nl> } <nl> @ @ - 87 , 7 + 89 , 7 @ @ public class MajorLeveledCompactionWriter extends CompactionAwareWriter <nl> if ( totalWrittenInCurrentWriter > maxSSTableSize ) <nl> { <nl> totalWrittenInLevel + = totalWrittenInCurrentWriter ; <nl> - if ( totalWrittenInLevel > LeveledManifest . maxBytesForLevel ( currentLevel , maxSSTableSize ) ) <nl> + if ( totalWrittenInLevel > LeveledManifest . maxBytesForLevel ( currentLevel , levelFanoutSize , maxSSTableSize ) ) <nl> { <nl> totalWrittenInLevel = 0 ; <nl> currentLevel + + ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> index 8574179 . . 54b340e 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> + + + b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> @ @ - 177 , 12 + 177 , 12 @ @ public class StandaloneScrubber <nl> List < SSTableReader > repaired = Lists . newArrayList ( Iterables . filter ( sstables , repairedPredicate ) ) ; <nl> List < SSTableReader > unRepaired = Lists . newArrayList ( Iterables . filter ( sstables , Predicates . not ( repairedPredicate ) ) ) ; <nl> <nl> - LeveledManifest repairedManifest = LeveledManifest . create ( cfs , maxSizeInMB , repaired ) ; <nl> + LeveledManifest repairedManifest = LeveledManifest . create ( cfs , maxSizeInMB , cfs . getLevelFanoutSize ( ) , repaired ) ; <nl> for ( int i = 1 ; i < repairedManifest . getLevelCount ( ) ; i + + ) <nl> { <nl> repairedManifest . repairOverlappingSSTables ( i ) ; <nl> } <nl> - LeveledManifest unRepairedManifest = LeveledManifest . create ( cfs , maxSizeInMB , unRepaired ) ; <nl> + LeveledManifest unRepairedManifest = LeveledManifest . create ( cfs , maxSizeInMB , cfs . getLevelFanoutSize ( ) , unRepaired ) ; <nl> for ( int i = 1 ; i < unRepairedManifest . getLevelCount ( ) ; i + + ) <nl> { <nl> unRepairedManifest . repairOverlappingSSTables ( i ) ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / stats / TableStatsHolder . java b / src / java / org / apache / cassandra / tools / nodetool / stats / TableStatsHolder . java <nl> index a785528 . . 150baf3 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / nodetool / stats / TableStatsHolder . java <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / stats / TableStatsHolder . java <nl> @ @ - 173 , 7 + 173 , 7 @ @ public class TableStatsHolder implements StatsHolder <nl> int count = leveledSStables [ level ] ; <nl> long maxCount = 4L ; / / for L0 <nl> if ( level > 0 ) <nl> - maxCount = ( long ) Math . pow ( 10 , level ) ; <nl> + maxCount = ( long ) Math . pow ( table . getLevelFanoutSize ( ) , level ) ; <nl> / / show max threshold for level when exceeded <nl> statsTable . sstablesInEachLevel . add ( count + ( ( count > maxCount ) ? " / " + maxCount : " " ) ) ; <nl> } <nl> diff - - git a / test / long / org / apache / cassandra / db / compaction / LongLeveledCompactionStrategyTest . java b / test / long / org / apache / cassandra / db / compaction / LongLeveledCompactionStrategyTest . java <nl> index f8f5a7c . . cf4aba2 100644 <nl> - - - a / test / long / org / apache / cassandra / db / compaction / LongLeveledCompactionStrategyTest . java <nl> + + + b / test / long / org / apache / cassandra / db / compaction / LongLeveledCompactionStrategyTest . java <nl> @ @ - 129 , 7 + 129 , 7 @ @ public class LongLeveledCompactionStrategyTest <nl> { <nl> List < SSTableReader > sstables = manifest . getLevel ( level ) ; <nl> / / score check <nl> - assert ( double ) SSTableReader . getTotalBytes ( sstables ) / LeveledManifest . maxBytesForLevel ( level , 1 * 1024 * 1024 ) < 1 . 00 ; <nl> + assert ( double ) SSTableReader . getTotalBytes ( sstables ) / manifest . maxBytesForLevel ( level , 1 * 1024 * 1024 ) < 1 . 00 ; <nl> / / overlap check for levels greater than 0 <nl> for ( SSTableReader sstable : sstables ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / SchemaLoader . java b / test / unit / org / apache / cassandra / SchemaLoader . java <nl> index d6819e1 . . 2bf4805 100644 <nl> - - - a / test / unit / org / apache / cassandra / SchemaLoader . java <nl> + + + b / test / unit / org / apache / cassandra / SchemaLoader . java <nl> @ @ - 112 , 6 + 112 , 7 @ @ public class SchemaLoader <nl> compactionOptions . put ( " tombstone _ compaction _ interval " , " 1 " ) ; <nl> Map < String , String > leveledOptions = new HashMap < String , String > ( ) ; <nl> leveledOptions . put ( " sstable _ size _ in _ mb " , " 1 " ) ; <nl> + leveledOptions . put ( " fanout _ size " , " 5 " ) ; <nl> <nl> / / Keyspace 1 <nl> schema . add ( KeyspaceMetadata . create ( ks1 , <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / OverflowTest . java b / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / OverflowTest . java <nl> index 49bfe88 . . 6fdedc2 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / OverflowTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / OverflowTest . java <nl> @ @ - 111 , 7 + 111 , 7 @ @ public class OverflowTest extends CQLTester <nl> + " AND dclocal _ read _ repair _ chance = 0 . 5 " <nl> + " AND gc _ grace _ seconds = 4 " <nl> + " AND bloom _ filter _ fp _ chance = 0 . 01 " <nl> - + " AND compaction = { ' class ' : ' LeveledCompactionStrategy ' , ' sstable _ size _ in _ mb ' : 10 } " <nl> + + " AND compaction = { ' class ' : ' LeveledCompactionStrategy ' , ' sstable _ size _ in _ mb ' : 10 , ' fanout _ size ' : 5 } " <nl> + " AND compression = { ' enabled ' : false } " <nl> + " AND caching = { ' keys ' : ' ALL ' , ' rows _ per _ partition ' : ' ALL ' } " ) ; <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java <nl> index ca206b3 . . 90e8380 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java <nl> @ @ - 50 , 7 + 50 , 7 @ @ public class CompactionsCQLTest extends CQLTester <nl> @ Test <nl> public void testTriggerMinorCompactionLCS ( ) throws Throwable <nl> { <nl> - createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) WITH compaction = { ' class ' : ' LeveledCompactionStrategy ' , ' sstable _ size _ in _ mb ' : 1 } ; " ) ; <nl> + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) WITH compaction = { ' class ' : ' LeveledCompactionStrategy ' , ' sstable _ size _ in _ mb ' : 1 , ' fanout _ size ' : 5 } ; " ) ; <nl> assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategyManager ( ) . isEnabled ( ) ) ; <nl> execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; <nl> flush ( ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6a2a56e . . 591ae9f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> 1 . 1 . 1 - dev <nl> * optimize commitlog checksumming ( CASSANDRA - 3610 ) <nl> - <nl> + * identify and blacklist corrupted SSTables from future compactions ( CASSANDRA - 2261 ) <nl> <nl> 1 . 1 - dev <nl> * start hint replay as soon as FD notifies that the target is back up <nl> diff - - git a / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java b / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java <nl> index cd9f04d . . d4c7a47 100644 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java <nl> @ @ - 72 , 6 + 72 , 7 @ @ class IndexedSliceReader extends AbstractIterator < IColumn > implements IColumnIte <nl> } <nl> catch ( IOException e ) <nl> { <nl> + sstable . markSuspect ( ) ; <nl> throw new IOError ( e ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java <nl> index 2d791c4 . . 7471778 100644 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java <nl> @ @ - 70 , 6 + 70 , 7 @ @ public class SSTableNamesIterator extends SimpleAbstractColumnIterator implement <nl> } <nl> catch ( IOException e ) <nl> { <nl> + sstable . markSuspect ( ) ; <nl> throw new IOError ( e ) ; <nl> } <nl> finally <nl> @ @ - 90 , 6 + 91 , 7 @ @ public class SSTableNamesIterator extends SimpleAbstractColumnIterator implement <nl> } <nl> catch ( IOException ioe ) <nl> { <nl> + sstable . markSuspect ( ) ; <nl> throw new IOError ( ioe ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java <nl> index 8e374b3 . . 5e6aff0 100644 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java <nl> @ @ - 56 , 6 + 56 , 7 @ @ public class SSTableSliceIterator implements IColumnIterator <nl> } <nl> catch ( IOException e ) <nl> { <nl> + sstable . markSuspect ( ) ; <nl> throw new IOError ( e ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java b / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java <nl> index 2a1e5cf . . e54e9bf 100644 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java <nl> @ @ - 58 , 6 + 58 , 7 @ @ class SimpleSliceReader extends AbstractIterator < IColumn > implements IColumnIter <nl> } <nl> catch ( IOException e ) <nl> { <nl> + sstable . markSuspect ( ) ; <nl> throw new IOError ( e ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> index bb84d1d . . 5e0a911 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> @ @ - 17 , 9 + 17 , 7 @ @ <nl> * / <nl> package org . apache . cassandra . db . compaction ; <nl> <nl> - import java . util . Collection ; <nl> - import java . util . Map ; <nl> - import java . util . Set ; <nl> + import java . util . * ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> @ @ - 107 , 4 + 105 , 24 @ @ public abstract class AbstractCompactionStrategy <nl> * is going to be expensive <nl> * / <nl> public abstract boolean isKeyExistenceExpensive ( Set < ? extends SSTable > sstablesToIgnore ) ; <nl> + <nl> + / * * <nl> + * Filters SSTables that are to be blacklisted from the given collection <nl> + * <nl> + * @ param originalCandidates The collection to check for blacklisted SSTables <nl> + * <nl> + * @ return list of the SSTables with blacklisted ones filtered out <nl> + * / <nl> + public static List < SSTableReader > filterSuspectSSTables ( Collection < SSTableReader > originalCandidates ) <nl> + { <nl> + List < SSTableReader > filteredCandidates = new ArrayList < SSTableReader > ( ) ; <nl> + <nl> + for ( SSTableReader candidate : originalCandidates ) <nl> + { <nl> + if ( ! candidate . isMarkedSuspect ( ) ) <nl> + filteredCandidates . add ( candidate ) ; <nl> + } <nl> + <nl> + return filteredCandidates ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> index 069d289 . . 47b489d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> @ @ - 40 , 6 + 40 , 8 @ @ import org . codehaus . jackson . JsonGenerator ; <nl> import org . codehaus . jackson . JsonNode ; <nl> import org . codehaus . jackson . map . ObjectMapper ; <nl> <nl> + import static org . apache . cassandra . db . compaction . AbstractCompactionStrategy . filterSuspectSSTables ; <nl> + <nl> public class LeveledManifest <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( LeveledManifest . class ) ; <nl> @ @ - 245 , 15 + 247 , 39 @ @ public class LeveledManifest <nl> if ( score > 1 . 001 | | i = = 0 ) <nl> { <nl> Collection < SSTableReader > candidates = getCandidatesFor ( i ) ; <nl> + <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( " Compaction candidates for L { } are { } " , i , toString ( candidates ) ) ; <nl> - return candidates ; <nl> + <nl> + / / check if have any SSTables marked as suspected , <nl> + / / saves us filter time when no SSTables are suspects <nl> + return hasSuspectSSTables ( candidates ) <nl> + ? filterSuspectSSTables ( candidates ) <nl> + : candidates ; <nl> } <nl> } <nl> <nl> return Collections . emptyList ( ) ; <nl> } <nl> <nl> + / * * <nl> + * Go through candidates collection and check if any of the SSTables are marked as suspected . <nl> + * <nl> + * @ param candidates The SSTable collection to examine . <nl> + * <nl> + * @ return true if collection has at least one SSTable marked as suspected , false otherwise . <nl> + * / <nl> + private boolean hasSuspectSSTables ( Collection < SSTableReader > candidates ) <nl> + { <nl> + for ( SSTableReader candidate : candidates ) <nl> + { <nl> + if ( candidate . isMarkedSuspect ( ) ) <nl> + return true ; <nl> + } <nl> + <nl> + return false ; <nl> + } <nl> + <nl> public int getLevelSize ( int i ) <nl> { <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> index 043e301 . . 97396e4 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> @ @ - 54 , 7 + 54 , 8 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy <nl> return null ; <nl> } <nl> <nl> - List < List < SSTableReader > > buckets = getBuckets ( createSSTableAndLengthPairs ( cfs . getUncompactingSSTables ( ) ) , minSSTableSize ) ; <nl> + Set < SSTableReader > candidates = cfs . getUncompactingSSTables ( ) ; <nl> + List < List < SSTableReader > > buckets = getBuckets ( createSSTableAndLengthPairs ( filterSuspectSSTables ( candidates ) ) , minSSTableSize ) ; <nl> updateEstimatedCompactionsByTasks ( buckets ) ; <nl> <nl> List < List < SSTableReader > > prunedBuckets = new ArrayList < List < SSTableReader > > ( ) ; <nl> @ @ - 101 , 7 + 102 , 7 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy <nl> <nl> public AbstractCompactionTask getMaximalTask ( final int gcBefore ) <nl> { <nl> - return cfs . getSSTables ( ) . isEmpty ( ) ? null : new CompactionTask ( cfs , cfs . getSSTables ( ) , gcBefore ) ; <nl> + return cfs . getSSTables ( ) . isEmpty ( ) ? null : new CompactionTask ( cfs , filterSuspectSSTables ( cfs . getSSTables ( ) ) , gcBefore ) ; <nl> } <nl> <nl> public AbstractCompactionTask getUserDefinedTask ( Collection < SSTableReader > sstables , final int gcBefore ) <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableBoundedScanner . java b / src / java / org / apache / cassandra / io / sstable / SSTableBoundedScanner . java <nl> index ccadb30 . . d69eb16 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableBoundedScanner . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableBoundedScanner . java <nl> @ @ - 48 , 6 + 48 , 7 @ @ public class SSTableBoundedScanner extends SSTableScanner <nl> } <nl> catch ( IOException e ) <nl> { <nl> + sstable . markSuspect ( ) ; <nl> throw new RuntimeException ( e ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java b / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java <nl> index ee88d94 . . bc16f91 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java <nl> @ @ - 147 , 6 + 147 , 7 @ @ public class SSTableIdentityIterator implements Comparable < SSTableIdentityIterat <nl> } <nl> catch ( IOException e ) <nl> { <nl> + sstable . markSuspect ( ) ; <nl> throw new IOError ( e ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> index c674c0c . . 0728e18 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> @ @ - 90 , 6 + 90 , 7 @ @ public class SSTableReader extends SSTable <nl> / / technically isCompacted is not necessary since it should never be unreferenced unless it is also compacted , <nl> / / but it seems like a good extra layer of protection against reference counting bugs to not delete data based on that alone <nl> private final AtomicBoolean isCompacted = new AtomicBoolean ( false ) ; <nl> + private final AtomicBoolean isSuspect = new AtomicBoolean ( false ) ; <nl> private final SSTableDeletingTask deletingTask ; <nl> <nl> private final SSTableMetadata sstableMetadata ; <nl> @ @ - 711 , 6 + 712 , 7 @ @ public class SSTableReader extends SSTable <nl> } <nl> catch ( IOException e ) <nl> { <nl> + markSuspect ( ) ; <nl> throw new IOError ( e ) ; <nl> } <nl> finally <nl> @ @ - 797 , 6 + 799 , 19 @ @ public class SSTableReader extends SSTable <nl> return true ; <nl> } <nl> <nl> + public void markSuspect ( ) <nl> + { <nl> + if ( logger . isDebugEnabled ( ) ) <nl> + logger . debug ( " Marking " + getFilename ( ) + " as a suspect for blacklisting . " ) ; <nl> + <nl> + isSuspect . getAndSet ( true ) ; <nl> + } <nl> + <nl> + public boolean isMarkedSuspect ( ) <nl> + { <nl> + return isSuspect . get ( ) ; <nl> + } <nl> + <nl> / * * <nl> * <nl> * @ param filter filter to use when reading the columns <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java b / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java <nl> index 87ff96c . . f7b52b5 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java <nl> @ @ - 55 , 6 + 55 , 7 @ @ public class SSTableScanner implements CloseableIterator < IColumnIterator > <nl> } <nl> catch ( IOException e ) <nl> { <nl> + sstable . markSuspect ( ) ; <nl> throw new IOError ( e ) ; <nl> } <nl> this . sstable = sstable ; <nl> @ @ - 72 , 6 + 73 , 7 @ @ public class SSTableScanner implements CloseableIterator < IColumnIterator > <nl> } <nl> catch ( IOException e ) <nl> { <nl> + sstable . markSuspect ( ) ; <nl> throw new IOError ( e ) ; <nl> } <nl> this . sstable = sstable ; <nl> @ @ - 98 , 6 + 100 , 7 @ @ public class SSTableScanner implements CloseableIterator < IColumnIterator > <nl> } <nl> catch ( IOException e ) <nl> { <nl> + sstable . markSuspect ( ) ; <nl> throw new RuntimeException ( " corrupt sstable " , e ) ; <nl> } <nl> } <nl> @ @ - 152 , 6 + 155 , 7 @ @ public class SSTableScanner implements CloseableIterator < IColumnIterator > <nl> } <nl> catch ( IOException e ) <nl> { <nl> + sstable . markSuspect ( ) ; <nl> throw new RuntimeException ( e ) ; <nl> } <nl> } <nl> @ @ - 183 , 6 + 187 , 7 @ @ public class SSTableScanner implements CloseableIterator < IColumnIterator > <nl> } <nl> catch ( IOException e ) <nl> { <nl> + sstable . markSuspect ( ) ; <nl> throw new RuntimeException ( SSTableScanner . this + " failed to provide next columns from " + this , e ) ; <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java <nl> index ff6636d . . 23a2657 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java <nl> @ @ - 18 , 7 + 18 , 7 @ @ <nl> * / <nl> package org . apache . cassandra . db . compaction ; <nl> <nl> - import java . io . IOException ; <nl> + import java . io . * ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . ArrayList ; <nl> import java . util . HashSet ; <nl> @ @ - 30 , 6 + 30 , 7 @ @ import java . util . concurrent . Future ; <nl> <nl> import org . junit . Test ; <nl> import static junit . framework . Assert . assertEquals ; <nl> + import static junit . framework . Assert . assertNotNull ; <nl> <nl> import org . apache . cassandra . CleanupHelper ; <nl> import org . apache . cassandra . Util ; <nl> @ @ - 38 , 6 + 39 , 7 @ @ import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . filter . QueryFilter ; <nl> import org . apache . cassandra . db . filter . QueryPath ; <nl> import org . apache . cassandra . io . sstable . * ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> @ @ - 46 , 6 + 48 , 18 @ @ public class CompactionsTest extends CleanupHelper <nl> public static final String TABLE1 = " Keyspace1 " ; <nl> <nl> @ Test <nl> + public void testBlacklistingWithSizeTieredCompactionStrategy ( ) throws Exception <nl> + { <nl> + testBlacklisting ( SizeTieredCompactionStrategy . class . getCanonicalName ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testBlacklistingWithLeveledCompactionStrategy ( ) throws Exception <nl> + { <nl> + testBlacklisting ( LeveledCompactionStrategy . class . getCanonicalName ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testStandardColumnCompactions ( ) throws IOException , ExecutionException , InterruptedException <nl> { <nl> / / this test does enough rows to force multiple block indexes to be used <nl> @ @ - 83 , 6 + 97 , 7 @ @ public class CompactionsTest extends CleanupHelper <nl> <nl> / / make sure max timestamp of compacted sstables is recorded properly after compaction . <nl> assertMaxTimestamp ( store , maxTimestampExpected ) ; <nl> + store . truncate ( ) ; <nl> } <nl> <nl> <nl> @ @ - 269 , 4 + 284 , 100 @ @ public class CompactionsTest extends CleanupHelper <nl> cf = store . getColumnFamily ( filter ) ; <nl> assert cf = = null | | cf . isEmpty ( ) : " should be empty : " + cf ; <nl> } <nl> + <nl> + public void testBlacklisting ( String compactionStrategy ) throws Exception <nl> + { <nl> + / / this test does enough rows to force multiple block indexes to be used <nl> + Table table = Table . open ( TABLE1 ) ; <nl> + final ColumnFamilyStore store = table . getColumnFamilyStore ( " Standard1 " ) ; <nl> + <nl> + final int ROWS _ PER _ SSTABLE = 10 ; <nl> + final int SSTABLES = DatabaseDescriptor . getIndexInterval ( ) * 2 / ROWS _ PER _ SSTABLE ; <nl> + <nl> + store . setCompactionStrategyClass ( compactionStrategy ) ; <nl> + <nl> + / / disable compaction while flushing <nl> + store . disableAutoCompaction ( ) ; <nl> + / / test index corruption <nl> + / / now create a few new SSTables <nl> + long maxTimestampExpected = Long . MIN _ VALUE ; <nl> + Set < DecoratedKey > inserted = new HashSet < DecoratedKey > ( ) ; <nl> + for ( int j = 0 ; j < SSTABLES ; j + + ) <nl> + { <nl> + for ( int i = 0 ; i < ROWS _ PER _ SSTABLE ; i + + ) <nl> + { <nl> + DecoratedKey key = Util . dk ( String . valueOf ( i % 2 ) ) ; <nl> + RowMutation rm = new RowMutation ( TABLE1 , key . key ) ; <nl> + long timestamp = j * ROWS _ PER _ SSTABLE + i ; <nl> + rm . add ( new QueryPath ( " Standard1 " , null , ByteBufferUtil . bytes ( String . valueOf ( i / 2 ) ) ) , <nl> + ByteBufferUtil . EMPTY _ BYTE _ BUFFER , <nl> + timestamp ) ; <nl> + maxTimestampExpected = Math . max ( timestamp , maxTimestampExpected ) ; <nl> + rm . apply ( ) ; <nl> + inserted . add ( key ) ; <nl> + } <nl> + store . forceBlockingFlush ( ) ; <nl> + assertMaxTimestamp ( store , maxTimestampExpected ) ; <nl> + assertEquals ( inserted . toString ( ) , inserted . size ( ) , Util . getRangeSlice ( store ) . size ( ) ) ; <nl> + } <nl> + <nl> + Collection < SSTableReader > sstables = store . getSSTables ( ) ; <nl> + int currentSSTable = 0 ; <nl> + int sstablesToCorrupt = 8 ; <nl> + <nl> + / / corrupt first ' sstablesToCorrupt ' SSTables <nl> + for ( SSTableReader sstable : sstables ) <nl> + { <nl> + if ( currentSSTable + 1 > sstablesToCorrupt ) <nl> + break ; <nl> + <nl> + RandomAccessFile raf = null ; <nl> + <nl> + try <nl> + { <nl> + raf = new RandomAccessFile ( sstable . getFilename ( ) , " rw " ) ; <nl> + assertNotNull ( raf ) ; <nl> + raf . write ( 0xFFFFFF ) ; <nl> + } <nl> + finally <nl> + { <nl> + FileUtils . closeQuietly ( raf ) ; <nl> + } <nl> + <nl> + currentSSTable + + ; <nl> + } <nl> + <nl> + int failures = 0 ; <nl> + <nl> + / / close error output steam to avoid printing ton of useless RuntimeException <nl> + System . err . close ( ) ; <nl> + <nl> + try <nl> + { <nl> + / / in case something will go wrong we don ' t want to loop forever using for ( ; ; ) <nl> + for ( int i = 0 ; i < sstables . size ( ) ; i + + ) <nl> + { <nl> + try <nl> + { <nl> + store . forceMajorCompaction ( ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + failures + + ; <nl> + continue ; <nl> + } <nl> + <nl> + assertEquals ( sstablesToCorrupt + 1 , store . getSSTables ( ) . size ( ) ) ; <nl> + break ; <nl> + } <nl> + } <nl> + finally <nl> + { <nl> + System . setErr ( new PrintStream ( new ByteArrayOutputStream ( ) ) ) ; <nl> + } <nl> + <nl> + <nl> + store . truncate ( ) ; <nl> + assertEquals ( failures , sstablesToCorrupt ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 32a2dfd . . 20a64e1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 10 
 + * Make the fanout size for LeveledCompactionStrategy to be configurable ( CASSANDRA - 11550 ) 
 * Fix timeout in ReplicationAwareTokenAllocatorTest ( CASSANDRA - 12784 ) 
 * Improve sum aggregate functions ( CASSANDRA - 12417 ) 
 * Make cassandra . yaml docs for batch _ size _ * _ threshold _ in _ kb reflect changes in CASSANDRA - 10876 ( CASSANDRA - 12761 ) 
 diff - - git a / doc / source / operating / compaction . rst b / doc / source / operating / compaction . rst 
 index b0f97c4 . . 0f39000 100644 
 - - - a / doc / source / operating / compaction . rst 
 + + + b / doc / source / operating / compaction . rst 
 @ @ - 262 , 7 + 262 , 7 @ @ and the attribute to change is ` ` CompactionParameters ` ` or ` ` CompactionParameter 
 syntax for the json version is the same as you would use in an : ref : ` ALTER TABLE < alter - table - statement > ` statement - 
 for example : : 
 
 - { ' class ' : ' LeveledCompactionStrategy ' , ' sstable _ size _ in _ mb ' : 123 } 
 + { ' class ' : ' LeveledCompactionStrategy ' , ' sstable _ size _ in _ mb ' : 123 , ' fanout _ size ' : 10 } 
 
 The setting is kept until someone executes an : ref : ` ALTER TABLE < alter - table - statement > ` that touches the compaction 
 settings or restarts the node . 
 @ @ - 379 , 6 + 379 , 10 @ @ LCS options 
 The target compressed ( if using compression ) sstable size - the sstables can end up being larger if there are very 
 large partitions on the node . 
 
 + ` ` fanout _ size ` ` ( default : 10 ) 
 + The target size of levels increases by this fanout _ size multiplier . You can reduce the space amplification by tuning 
 + this option . 
 + 
 LCS also support the ` ` cassandra . disable _ stcs _ in _ l0 ` ` startup option ( ` ` - Dcassandra . disable _ stcs _ in _ l0 = true ` ` ) to avoid 
 doing STCS in L0 . 
 
 diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py 
 index f388f4c . . 8e86801 100644 
 - - - a / pylib / cqlshlib / cql3handling . py 
 + + + b / pylib / cqlshlib / cql3handling . py 
 @ @ - 512 , 6 + 512 , 7 @ @ def cf _ prop _ val _ mapkey _ completer ( ctxt , cass ) : 
 opts . add ( ' bucket _ low ' ) 
 elif csc = = ' LeveledCompactionStrategy ' : 
 opts . add ( ' sstable _ size _ in _ mb ' ) 
 + opts . add ( ' fanout _ size ' ) 
 elif csc = = ' DateTieredCompactionStrategy ' : 
 opts . add ( ' base _ time _ seconds ' ) 
 opts . add ( ' max _ sstable _ age _ days ' ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index f89ac3f . . 0862686 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 2481 , 6 + 2481 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 return compactionStrategyManager . getSSTableCountPerLevel ( ) ; 
 } 
 
 + public int getLevelFanoutSize ( ) 
 + { 
 + return compactionStrategyManager . getLevelFanoutSize ( ) ; 
 + } 
 + 
 public static class ViewFragment 
 { 
 public final List < SSTableReader > sstables ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 index ccaacf6 . . d788e2e 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 @ @ - 157 , 6 + 157 , 11 @ @ public interface ColumnFamilyStoreMBean 
 public int [ ] getSSTableCountPerLevel ( ) ; 
 
 / * * 
 + * @ return sstable fanout size for level compaction strategy . 
 + * / 
 + public int getLevelFanoutSize ( ) ; 
 + 
 + / * * 
 * Get the ratio of droppable tombstones to real columns ( and non - droppable tombstones ) 
 * @ return ratio 
 * / 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java 
 index 1ad89e9 . . 5679338 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java 
 @ @ - 341 , 6 + 341 , 23 @ @ public class CompactionStrategyManager implements INotificationConsumer 
 return 0 ; 
 } 
 
 + public int getLevelFanoutSize ( ) 
 + { 
 + readLock . lock ( ) ; 
 + try 
 + { 
 + if ( repaired . get ( 0 ) instanceof LeveledCompactionStrategy ) 
 + { 
 + return ( ( LeveledCompactionStrategy ) repaired . get ( 0 ) ) . getLevelFanoutSize ( ) ; 
 + } 
 + } 
 + finally 
 + { 
 + readLock . unlock ( ) ; 
 + } 
 + return LeveledCompactionStrategy . DEFAULT _ LEVEL _ FANOUT _ SIZE ; 
 + } 
 + 
 public int [ ] getSSTableCountPerLevel ( ) 
 { 
 readLock . lock ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 index 0633251f . . f943b19 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 @ @ - 47 , 15 + 47 , 19 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy 
 private static final Logger logger = LoggerFactory . getLogger ( LeveledCompactionStrategy . class ) ; 
 private static final String SSTABLE _ SIZE _ OPTION = " sstable _ size _ in _ mb " ; 
 private static final boolean tolerateSstableSize = Boolean . getBoolean ( Config . PROPERTY _ PREFIX + " tolerate _ sstable _ size " ) ; 
 + private static final String LEVEL _ FANOUT _ SIZE _ OPTION = " fanout _ size " ; 
 + public static final int DEFAULT _ LEVEL _ FANOUT _ SIZE = 10 ; 
 
 @ VisibleForTesting 
 final LeveledManifest manifest ; 
 private final int maxSSTableSizeInMB ; 
 + private final int levelFanoutSize ; 
 
 public LeveledCompactionStrategy ( ColumnFamilyStore cfs , Map < String , String > options ) 
 { 
 super ( cfs , options ) ; 
 int configuredMaxSSTableSize = 160 ; 
 + int configuredLevelFanoutSize = DEFAULT _ LEVEL _ FANOUT _ SIZE ; 
 SizeTieredCompactionStrategyOptions localOptions = new SizeTieredCompactionStrategyOptions ( options ) ; 
 if ( options ! = null ) 
 { 
 @ @ - 72 , 10 + 76 , 16 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy 
 configuredMaxSSTableSize , cfs . name , cfs . getColumnFamilyName ( ) ) ; 
 } 
 } 
 + 
 + if ( options . containsKey ( LEVEL _ FANOUT _ SIZE _ OPTION ) ) 
 + { 
 + configuredLevelFanoutSize = Integer . parseInt ( options . get ( LEVEL _ FANOUT _ SIZE _ OPTION ) ) ; 
 + } 
 } 
 maxSSTableSizeInMB = configuredMaxSSTableSize ; 
 + levelFanoutSize = configuredLevelFanoutSize ; 
 
 - manifest = new LeveledManifest ( cfs , this . maxSSTableSizeInMB , localOptions ) ; 
 + manifest = new LeveledManifest ( cfs , this . maxSSTableSizeInMB , this . levelFanoutSize , localOptions ) ; 
 logger . trace ( " Created { } " , manifest ) ; 
 } 
 
 @ @ - 243 , 6 + 253 , 11 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy 
 return maxSSTableSizeInMB * 1024L * 1024L ; 
 } 
 
 + public int getLevelFanoutSize ( ) 
 + { 
 + return levelFanoutSize ; 
 + } 
 + 
 public ScannerList getScanners ( Collection < SSTableReader > sstables , Collection < Range < Token > > ranges ) 
 { 
 Set < SSTableReader > [ ] sstablesPerLevel = manifest . getSStablesPerLevelSnapshot ( ) ; 
 @ @ - 531 , 6 + 546 , 23 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy 
 
 uncheckedOptions . remove ( SSTABLE _ SIZE _ OPTION ) ; 
 
 + / / Validate the fanout _ size option 
 + String levelFanoutSize = options . containsKey ( LEVEL _ FANOUT _ SIZE _ OPTION ) ? options . get ( LEVEL _ FANOUT _ SIZE _ OPTION ) : String . valueOf ( DEFAULT _ LEVEL _ FANOUT _ SIZE ) ; 
 + try 
 + { 
 + int fanoutSize = Integer . parseInt ( levelFanoutSize ) ; 
 + if ( fanoutSize < 1 ) 
 + { 
 + throw new ConfigurationException ( String . format ( " % s must be larger than 0 , but was % s " , LEVEL _ FANOUT _ SIZE _ OPTION , fanoutSize ) ) ; 
 + } 
 + } 
 + catch ( NumberFormatException ex ) 
 + { 
 + throw new ConfigurationException ( String . format ( " % s is not a parsable int ( base10 ) for % s " , size , LEVEL _ FANOUT _ SIZE _ OPTION ) , ex ) ; 
 + } 
 + 
 + uncheckedOptions . remove ( LEVEL _ FANOUT _ SIZE _ OPTION ) ; 
 + 
 uncheckedOptions = SizeTieredCompactionStrategyOptions . validateOptions ( options , uncheckedOptions ) ; 
 
 return uncheckedOptions ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 index 5a8f153 . . 3d118de 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 @ @ - 70 , 12 + 70 , 14 @ @ public class LeveledManifest 
 private final long maxSSTableSizeInBytes ; 
 private final SizeTieredCompactionStrategyOptions options ; 
 private final int [ ] compactionCounter ; 
 + private final int levelFanoutSize ; 
 
 - LeveledManifest ( ColumnFamilyStore cfs , int maxSSTableSizeInMB , SizeTieredCompactionStrategyOptions options ) 
 + LeveledManifest ( ColumnFamilyStore cfs , int maxSSTableSizeInMB , int fanoutSize , SizeTieredCompactionStrategyOptions options ) 
 { 
 this . cfs = cfs ; 
 this . maxSSTableSizeInBytes = maxSSTableSizeInMB * 1024L * 1024L ; 
 this . options = options ; 
 + this . levelFanoutSize = fanoutSize ; 
 
 generations = new List [ MAX _ LEVEL _ COUNT ] ; 
 lastCompactedKeys = new PartitionPosition [ MAX _ LEVEL _ COUNT ] ; 
 @ @ - 87 , 14 + 89 , 14 @ @ public class LeveledManifest 
 compactionCounter = new int [ MAX _ LEVEL _ COUNT ] ; 
 } 
 
 - public static LeveledManifest create ( ColumnFamilyStore cfs , int maxSSTableSize , List < SSTableReader > sstables ) 
 + public static LeveledManifest create ( ColumnFamilyStore cfs , int maxSSTableSize , int fanoutSize , List < SSTableReader > sstables ) 
 { 
 - return create ( cfs , maxSSTableSize , sstables , new SizeTieredCompactionStrategyOptions ( ) ) ; 
 + return create ( cfs , maxSSTableSize , fanoutSize , sstables , new SizeTieredCompactionStrategyOptions ( ) ) ; 
 } 
 
 - public static LeveledManifest create ( ColumnFamilyStore cfs , int maxSSTableSize , Iterable < SSTableReader > sstables , SizeTieredCompactionStrategyOptions options ) 
 + public static LeveledManifest create ( ColumnFamilyStore cfs , int maxSSTableSize , int fanoutSize , Iterable < SSTableReader > sstables , SizeTieredCompactionStrategyOptions options ) 
 { 
 - LeveledManifest manifest = new LeveledManifest ( cfs , maxSSTableSize , options ) ; 
 + LeveledManifest manifest = new LeveledManifest ( cfs , maxSSTableSize , fanoutSize , options ) ; 
 
 / / ensure all SSTables are in the manifest 
 for ( SSTableReader ssTableReader : sstables ) 
 @ @ - 282 , 11 + 284 , 16 @ @ public class LeveledManifest 
 return builder . toString ( ) ; 
 } 
 
 - public static long maxBytesForLevel ( int level , long maxSSTableSizeInBytes ) 
 + public long maxBytesForLevel ( int level , long maxSSTableSizeInBytes ) 
 + { 
 + return maxBytesForLevel ( level , levelFanoutSize , maxSSTableSizeInBytes ) ; 
 + } 
 + 
 + public static long maxBytesForLevel ( int level , int levelFanoutSize , long maxSSTableSizeInBytes ) 
 { 
 if ( level = = 0 ) 
 return 4L * maxSSTableSizeInBytes ; 
 - double bytes = Math . pow ( 10 , level ) * maxSSTableSizeInBytes ; 
 + double bytes = Math . pow ( levelFanoutSize , level ) * maxSSTableSizeInBytes ; 
 if ( bytes > Long . MAX _ VALUE ) 
 throw new RuntimeException ( " At most " + Long . MAX _ VALUE + " bytes may be in a compaction level ; your maxSSTableSize must be absurdly high to compute " + bytes ) ; 
 return ( long ) bytes ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / writers / MajorLeveledCompactionWriter . java b / src / java / org / apache / cassandra / db / compaction / writers / MajorLeveledCompactionWriter . java 
 index 6cccfcb . . 0beb505 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / writers / MajorLeveledCompactionWriter . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / writers / MajorLeveledCompactionWriter . java 
 @ @ - 41 , 6 + 41 , 7 @ @ public class MajorLeveledCompactionWriter extends CompactionAwareWriter 
 private int sstablesWritten = 0 ; 
 private final long keysPerSSTable ; 
 private Directories . DataDirectory sstableDirectory ; 
 + private final int levelFanoutSize ; 
 
 public MajorLeveledCompactionWriter ( ColumnFamilyStore cfs , 
 Directories directories , 
 @ @ - 73 , 6 + 74 , 7 @ @ public class MajorLeveledCompactionWriter extends CompactionAwareWriter 
 { 
 super ( cfs , directories , txn , nonExpiredSSTables , keepOriginals ) ; 
 this . maxSSTableSize = maxSSTableSize ; 
 + this . levelFanoutSize = cfs . getLevelFanoutSize ( ) ; 
 long estimatedSSTables = Math . max ( 1 , SSTableReader . getTotalBytes ( nonExpiredSSTables ) / maxSSTableSize ) ; 
 keysPerSSTable = estimatedTotalKeys / estimatedSSTables ; 
 } 
 @ @ - 87 , 7 + 89 , 7 @ @ public class MajorLeveledCompactionWriter extends CompactionAwareWriter 
 if ( totalWrittenInCurrentWriter > maxSSTableSize ) 
 { 
 totalWrittenInLevel + = totalWrittenInCurrentWriter ; 
 - if ( totalWrittenInLevel > LeveledManifest . maxBytesForLevel ( currentLevel , maxSSTableSize ) ) 
 + if ( totalWrittenInLevel > LeveledManifest . maxBytesForLevel ( currentLevel , levelFanoutSize , maxSSTableSize ) ) 
 { 
 totalWrittenInLevel = 0 ; 
 currentLevel + + ; 
 diff - - git a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 index 8574179 . . 54b340e 100644 
 - - - a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 + + + b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 @ @ - 177 , 12 + 177 , 12 @ @ public class StandaloneScrubber 
 List < SSTableReader > repaired = Lists . newArrayList ( Iterables . filter ( sstables , repairedPredicate ) ) ; 
 List < SSTableReader > unRepaired = Lists . newArrayList ( Iterables . filter ( sstables , Predicates . not ( repairedPredicate ) ) ) ; 
 
 - LeveledManifest repairedManifest = LeveledManifest . create ( cfs , maxSizeInMB , repaired ) ; 
 + LeveledManifest repairedManifest = LeveledManifest . create ( cfs , maxSizeInMB , cfs . getLevelFanoutSize ( ) , repaired ) ; 
 for ( int i = 1 ; i < repairedManifest . getLevelCount ( ) ; i + + ) 
 { 
 repairedManifest . repairOverlappingSSTables ( i ) ; 
 } 
 - LeveledManifest unRepairedManifest = LeveledManifest . create ( cfs , maxSizeInMB , unRepaired ) ; 
 + LeveledManifest unRepairedManifest = LeveledManifest . create ( cfs , maxSizeInMB , cfs . getLevelFanoutSize ( ) , unRepaired ) ; 
 for ( int i = 1 ; i < unRepairedManifest . getLevelCount ( ) ; i + + ) 
 { 
 unRepairedManifest . repairOverlappingSSTables ( i ) ; 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / stats / TableStatsHolder . java b / src / java / org / apache / cassandra / tools / nodetool / stats / TableStatsHolder . java 
 index a785528 . . 150baf3 100644 
 - - - a / src / java / org / apache / cassandra / tools / nodetool / stats / TableStatsHolder . java 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / stats / TableStatsHolder . java 
 @ @ - 173 , 7 + 173 , 7 @ @ public class TableStatsHolder implements StatsHolder 
 int count = leveledSStables [ level ] ; 
 long maxCount = 4L ; / / for L0 
 if ( level > 0 ) 
 - maxCount = ( long ) Math . pow ( 10 , level ) ; 
 + maxCount = ( long ) Math . pow ( table . getLevelFanoutSize ( ) , level ) ; 
 / / show max threshold for level when exceeded 
 statsTable . sstablesInEachLevel . add ( count + ( ( count > maxCount ) ? " / " + maxCount : " " ) ) ; 
 } 
 diff - - git a / test / long / org / apache / cassandra / db / compaction / LongLeveledCompactionStrategyTest . java b / test / long / org / apache / cassandra / db / compaction / LongLeveledCompactionStrategyTest . java 
 index f8f5a7c . . cf4aba2 100644 
 - - - a / test / long / org / apache / cassandra / db / compaction / LongLeveledCompactionStrategyTest . java 
 + + + b / test / long / org / apache / cassandra / db / compaction / LongLeveledCompactionStrategyTest . java 
 @ @ - 129 , 7 + 129 , 7 @ @ public class LongLeveledCompactionStrategyTest 
 { 
 List < SSTableReader > sstables = manifest . getLevel ( level ) ; 
 / / score check 
 - assert ( double ) SSTableReader . getTotalBytes ( sstables ) / LeveledManifest . maxBytesForLevel ( level , 1 * 1024 * 1024 ) < 1 . 00 ; 
 + assert ( double ) SSTableReader . getTotalBytes ( sstables ) / manifest . maxBytesForLevel ( level , 1 * 1024 * 1024 ) < 1 . 00 ; 
 / / overlap check for levels greater than 0 
 for ( SSTableReader sstable : sstables ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / SchemaLoader . java b / test / unit / org / apache / cassandra / SchemaLoader . java 
 index d6819e1 . . 2bf4805 100644 
 - - - a / test / unit / org / apache / cassandra / SchemaLoader . java 
 + + + b / test / unit / org / apache / cassandra / SchemaLoader . java 
 @ @ - 112 , 6 + 112 , 7 @ @ public class SchemaLoader 
 compactionOptions . put ( " tombstone _ compaction _ interval " , " 1 " ) ; 
 Map < String , String > leveledOptions = new HashMap < String , String > ( ) ; 
 leveledOptions . put ( " sstable _ size _ in _ mb " , " 1 " ) ; 
 + leveledOptions . put ( " fanout _ size " , " 5 " ) ; 
 
 / / Keyspace 1 
 schema . add ( KeyspaceMetadata . create ( ks1 , 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / OverflowTest . java b / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / OverflowTest . java 
 index 49bfe88 . . 6fdedc2 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / OverflowTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / OverflowTest . java 
 @ @ - 111 , 7 + 111 , 7 @ @ public class OverflowTest extends CQLTester 
 + " AND dclocal _ read _ repair _ chance = 0 . 5 " 
 + " AND gc _ grace _ seconds = 4 " 
 + " AND bloom _ filter _ fp _ chance = 0 . 01 " 
 - + " AND compaction = { ' class ' : ' LeveledCompactionStrategy ' , ' sstable _ size _ in _ mb ' : 10 } " 
 + + " AND compaction = { ' class ' : ' LeveledCompactionStrategy ' , ' sstable _ size _ in _ mb ' : 10 , ' fanout _ size ' : 5 } " 
 + " AND compression = { ' enabled ' : false } " 
 + " AND caching = { ' keys ' : ' ALL ' , ' rows _ per _ partition ' : ' ALL ' } " ) ; 
 
 diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java 
 index ca206b3 . . 90e8380 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java 
 @ @ - 50 , 7 + 50 , 7 @ @ public class CompactionsCQLTest extends CQLTester 
 @ Test 
 public void testTriggerMinorCompactionLCS ( ) throws Throwable 
 { 
 - createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) WITH compaction = { ' class ' : ' LeveledCompactionStrategy ' , ' sstable _ size _ in _ mb ' : 1 } ; " ) ; 
 + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) WITH compaction = { ' class ' : ' LeveledCompactionStrategy ' , ' sstable _ size _ in _ mb ' : 1 , ' fanout _ size ' : 5 } ; " ) ; 
 assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategyManager ( ) . isEnabled ( ) ) ; 
 execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; 
 flush ( ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6a2a56e . . 591ae9f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 1 . 1 . 1 - dev 
 * optimize commitlog checksumming ( CASSANDRA - 3610 ) 
 - 
 + * identify and blacklist corrupted SSTables from future compactions ( CASSANDRA - 2261 ) 
 
 1 . 1 - dev 
 * start hint replay as soon as FD notifies that the target is back up 
 diff - - git a / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java b / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java 
 index cd9f04d . . d4c7a47 100644 
 - - - a / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java 
 + + + b / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java 
 @ @ - 72 , 6 + 72 , 7 @ @ class IndexedSliceReader extends AbstractIterator < IColumn > implements IColumnIte 
 } 
 catch ( IOException e ) 
 { 
 + sstable . markSuspect ( ) ; 
 throw new IOError ( e ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java 
 index 2d791c4 . . 7471778 100644 
 - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java 
 + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java 
 @ @ - 70 , 6 + 70 , 7 @ @ public class SSTableNamesIterator extends SimpleAbstractColumnIterator implement 
 } 
 catch ( IOException e ) 
 { 
 + sstable . markSuspect ( ) ; 
 throw new IOError ( e ) ; 
 } 
 finally 
 @ @ - 90 , 6 + 91 , 7 @ @ public class SSTableNamesIterator extends SimpleAbstractColumnIterator implement 
 } 
 catch ( IOException ioe ) 
 { 
 + sstable . markSuspect ( ) ; 
 throw new IOError ( ioe ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java 
 index 8e374b3 . . 5e6aff0 100644 
 - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java 
 + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java 
 @ @ - 56 , 6 + 56 , 7 @ @ public class SSTableSliceIterator implements IColumnIterator 
 } 
 catch ( IOException e ) 
 { 
 + sstable . markSuspect ( ) ; 
 throw new IOError ( e ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java b / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java 
 index 2a1e5cf . . e54e9bf 100644 
 - - - a / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java 
 + + + b / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java 
 @ @ - 58 , 6 + 58 , 7 @ @ class SimpleSliceReader extends AbstractIterator < IColumn > implements IColumnIter 
 } 
 catch ( IOException e ) 
 { 
 + sstable . markSuspect ( ) ; 
 throw new IOError ( e ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 index bb84d1d . . 5e0a911 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 @ @ - 17 , 9 + 17 , 7 @ @ 
 * / 
 package org . apache . cassandra . db . compaction ; 
 
 - import java . util . Collection ; 
 - import java . util . Map ; 
 - import java . util . Set ; 
 + import java . util . * ; 
 import java . util . concurrent . TimeUnit ; 
 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 @ @ - 107 , 4 + 105 , 24 @ @ public abstract class AbstractCompactionStrategy 
 * is going to be expensive 
 * / 
 public abstract boolean isKeyExistenceExpensive ( Set < ? extends SSTable > sstablesToIgnore ) ; 
 + 
 + / * * 
 + * Filters SSTables that are to be blacklisted from the given collection 
 + * 
 + * @ param originalCandidates The collection to check for blacklisted SSTables 
 + * 
 + * @ return list of the SSTables with blacklisted ones filtered out 
 + * / 
 + public static List < SSTableReader > filterSuspectSSTables ( Collection < SSTableReader > originalCandidates ) 
 + { 
 + List < SSTableReader > filteredCandidates = new ArrayList < SSTableReader > ( ) ; 
 + 
 + for ( SSTableReader candidate : originalCandidates ) 
 + { 
 + if ( ! candidate . isMarkedSuspect ( ) ) 
 + filteredCandidates . add ( candidate ) ; 
 + } 
 + 
 + return filteredCandidates ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 index 069d289 . . 47b489d 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 @ @ - 40 , 6 + 40 , 8 @ @ import org . codehaus . jackson . JsonGenerator ; 
 import org . codehaus . jackson . JsonNode ; 
 import org . codehaus . jackson . map . ObjectMapper ; 
 
 + import static org . apache . cassandra . db . compaction . AbstractCompactionStrategy . filterSuspectSSTables ; 
 + 
 public class LeveledManifest 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( LeveledManifest . class ) ; 
 @ @ - 245 , 15 + 247 , 39 @ @ public class LeveledManifest 
 if ( score > 1 . 001 | | i = = 0 ) 
 { 
 Collection < SSTableReader > candidates = getCandidatesFor ( i ) ; 
 + 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( " Compaction candidates for L { } are { } " , i , toString ( candidates ) ) ; 
 - return candidates ; 
 + 
 + / / check if have any SSTables marked as suspected , 
 + / / saves us filter time when no SSTables are suspects 
 + return hasSuspectSSTables ( candidates ) 
 + ? filterSuspectSSTables ( candidates ) 
 + : candidates ; 
 } 
 } 
 
 return Collections . emptyList ( ) ; 
 } 
 
 + / * * 
 + * Go through candidates collection and check if any of the SSTables are marked as suspected . 
 + * 
 + * @ param candidates The SSTable collection to examine . 
 + * 
 + * @ return true if collection has at least one SSTable marked as suspected , false otherwise . 
 + * / 
 + private boolean hasSuspectSSTables ( Collection < SSTableReader > candidates ) 
 + { 
 + for ( SSTableReader candidate : candidates ) 
 + { 
 + if ( candidate . isMarkedSuspect ( ) ) 
 + return true ; 
 + } 
 + 
 + return false ; 
 + } 
 + 
 public int getLevelSize ( int i ) 
 { 
 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 index 043e301 . . 97396e4 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 @ @ - 54 , 7 + 54 , 8 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy 
 return null ; 
 } 
 
 - List < List < SSTableReader > > buckets = getBuckets ( createSSTableAndLengthPairs ( cfs . getUncompactingSSTables ( ) ) , minSSTableSize ) ; 
 + Set < SSTableReader > candidates = cfs . getUncompactingSSTables ( ) ; 
 + List < List < SSTableReader > > buckets = getBuckets ( createSSTableAndLengthPairs ( filterSuspectSSTables ( candidates ) ) , minSSTableSize ) ; 
 updateEstimatedCompactionsByTasks ( buckets ) ; 
 
 List < List < SSTableReader > > prunedBuckets = new ArrayList < List < SSTableReader > > ( ) ; 
 @ @ - 101 , 7 + 102 , 7 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy 
 
 public AbstractCompactionTask getMaximalTask ( final int gcBefore ) 
 { 
 - return cfs . getSSTables ( ) . isEmpty ( ) ? null : new CompactionTask ( cfs , cfs . getSSTables ( ) , gcBefore ) ; 
 + return cfs . getSSTables ( ) . isEmpty ( ) ? null : new CompactionTask ( cfs , filterSuspectSSTables ( cfs . getSSTables ( ) ) , gcBefore ) ; 
 } 
 
 public AbstractCompactionTask getUserDefinedTask ( Collection < SSTableReader > sstables , final int gcBefore ) 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableBoundedScanner . java b / src / java / org / apache / cassandra / io / sstable / SSTableBoundedScanner . java 
 index ccadb30 . . d69eb16 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableBoundedScanner . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableBoundedScanner . java 
 @ @ - 48 , 6 + 48 , 7 @ @ public class SSTableBoundedScanner extends SSTableScanner 
 } 
 catch ( IOException e ) 
 { 
 + sstable . markSuspect ( ) ; 
 throw new RuntimeException ( e ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java b / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java 
 index ee88d94 . . bc16f91 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java 
 @ @ - 147 , 6 + 147 , 7 @ @ public class SSTableIdentityIterator implements Comparable < SSTableIdentityIterat 
 } 
 catch ( IOException e ) 
 { 
 + sstable . markSuspect ( ) ; 
 throw new IOError ( e ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 index c674c0c . . 0728e18 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 @ @ - 90 , 6 + 90 , 7 @ @ public class SSTableReader extends SSTable 
 / / technically isCompacted is not necessary since it should never be unreferenced unless it is also compacted , 
 / / but it seems like a good extra layer of protection against reference counting bugs to not delete data based on that alone 
 private final AtomicBoolean isCompacted = new AtomicBoolean ( false ) ; 
 + private final AtomicBoolean isSuspect = new AtomicBoolean ( false ) ; 
 private final SSTableDeletingTask deletingTask ; 
 
 private final SSTableMetadata sstableMetadata ; 
 @ @ - 711 , 6 + 712 , 7 @ @ public class SSTableReader extends SSTable 
 } 
 catch ( IOException e ) 
 { 
 + markSuspect ( ) ; 
 throw new IOError ( e ) ; 
 } 
 finally 
 @ @ - 797 , 6 + 799 , 19 @ @ public class SSTableReader extends SSTable 
 return true ; 
 } 
 
 + public void markSuspect ( ) 
 + { 
 + if ( logger . isDebugEnabled ( ) ) 
 + logger . debug ( " Marking " + getFilename ( ) + " as a suspect for blacklisting . " ) ; 
 + 
 + isSuspect . getAndSet ( true ) ; 
 + } 
 + 
 + public boolean isMarkedSuspect ( ) 
 + { 
 + return isSuspect . get ( ) ; 
 + } 
 + 
 / * * 
 * 
 * @ param filter filter to use when reading the columns 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java b / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java 
 index 87ff96c . . f7b52b5 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java 
 @ @ - 55 , 6 + 55 , 7 @ @ public class SSTableScanner implements CloseableIterator < IColumnIterator > 
 } 
 catch ( IOException e ) 
 { 
 + sstable . markSuspect ( ) ; 
 throw new IOError ( e ) ; 
 } 
 this . sstable = sstable ; 
 @ @ - 72 , 6 + 73 , 7 @ @ public class SSTableScanner implements CloseableIterator < IColumnIterator > 
 } 
 catch ( IOException e ) 
 { 
 + sstable . markSuspect ( ) ; 
 throw new IOError ( e ) ; 
 } 
 this . sstable = sstable ; 
 @ @ - 98 , 6 + 100 , 7 @ @ public class SSTableScanner implements CloseableIterator < IColumnIterator > 
 } 
 catch ( IOException e ) 
 { 
 + sstable . markSuspect ( ) ; 
 throw new RuntimeException ( " corrupt sstable " , e ) ; 
 } 
 } 
 @ @ - 152 , 6 + 155 , 7 @ @ public class SSTableScanner implements CloseableIterator < IColumnIterator > 
 } 
 catch ( IOException e ) 
 { 
 + sstable . markSuspect ( ) ; 
 throw new RuntimeException ( e ) ; 
 } 
 } 
 @ @ - 183 , 6 + 187 , 7 @ @ public class SSTableScanner implements CloseableIterator < IColumnIterator > 
 } 
 catch ( IOException e ) 
 { 
 + sstable . markSuspect ( ) ; 
 throw new RuntimeException ( SSTableScanner . this + " failed to provide next columns from " + this , e ) ; 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java 
 index ff6636d . . 23a2657 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java 
 @ @ - 18 , 7 + 18 , 7 @ @ 
 * / 
 package org . apache . cassandra . db . compaction ; 
 
 - import java . io . IOException ; 
 + import java . io . * ; 
 import java . nio . ByteBuffer ; 
 import java . util . ArrayList ; 
 import java . util . HashSet ; 
 @ @ - 30 , 6 + 30 , 7 @ @ import java . util . concurrent . Future ; 
 
 import org . junit . Test ; 
 import static junit . framework . Assert . assertEquals ; 
 + import static junit . framework . Assert . assertNotNull ; 
 
 import org . apache . cassandra . CleanupHelper ; 
 import org . apache . cassandra . Util ; 
 @ @ - 38 , 6 + 39 , 7 @ @ import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . filter . QueryFilter ; 
 import org . apache . cassandra . db . filter . QueryPath ; 
 import org . apache . cassandra . io . sstable . * ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 @ @ - 46 , 6 + 48 , 18 @ @ public class CompactionsTest extends CleanupHelper 
 public static final String TABLE1 = " Keyspace1 " ; 
 
 @ Test 
 + public void testBlacklistingWithSizeTieredCompactionStrategy ( ) throws Exception 
 + { 
 + testBlacklisting ( SizeTieredCompactionStrategy . class . getCanonicalName ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testBlacklistingWithLeveledCompactionStrategy ( ) throws Exception 
 + { 
 + testBlacklisting ( LeveledCompactionStrategy . class . getCanonicalName ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void testStandardColumnCompactions ( ) throws IOException , ExecutionException , InterruptedException 
 { 
 / / this test does enough rows to force multiple block indexes to be used 
 @ @ - 83 , 6 + 97 , 7 @ @ public class CompactionsTest extends CleanupHelper 
 
 / / make sure max timestamp of compacted sstables is recorded properly after compaction . 
 assertMaxTimestamp ( store , maxTimestampExpected ) ; 
 + store . truncate ( ) ; 
 } 
 
 
 @ @ - 269 , 4 + 284 , 100 @ @ public class CompactionsTest extends CleanupHelper 
 cf = store . getColumnFamily ( filter ) ; 
 assert cf = = null | | cf . isEmpty ( ) : " should be empty : " + cf ; 
 } 
 + 
 + public void testBlacklisting ( String compactionStrategy ) throws Exception 
 + { 
 + / / this test does enough rows to force multiple block indexes to be used 
 + Table table = Table . open ( TABLE1 ) ; 
 + final ColumnFamilyStore store = table . getColumnFamilyStore ( " Standard1 " ) ; 
 + 
 + final int ROWS _ PER _ SSTABLE = 10 ; 
 + final int SSTABLES = DatabaseDescriptor . getIndexInterval ( ) * 2 / ROWS _ PER _ SSTABLE ; 
 + 
 + store . setCompactionStrategyClass ( compactionStrategy ) ; 
 + 
 + / / disable compaction while flushing 
 + store . disableAutoCompaction ( ) ; 
 + / / test index corruption 
 + / / now create a few new SSTables 
 + long maxTimestampExpected = Long . MIN _ VALUE ; 
 + Set < DecoratedKey > inserted = new HashSet < DecoratedKey > ( ) ; 
 + for ( int j = 0 ; j < SSTABLES ; j + + ) 
 + { 
 + for ( int i = 0 ; i < ROWS _ PER _ SSTABLE ; i + + ) 
 + { 
 + DecoratedKey key = Util . dk ( String . valueOf ( i % 2 ) ) ; 
 + RowMutation rm = new RowMutation ( TABLE1 , key . key ) ; 
 + long timestamp = j * ROWS _ PER _ SSTABLE + i ; 
 + rm . add ( new QueryPath ( " Standard1 " , null , ByteBufferUtil . bytes ( String . valueOf ( i / 2 ) ) ) , 
 + ByteBufferUtil . EMPTY _ BYTE _ BUFFER , 
 + timestamp ) ; 
 + maxTimestampExpected = Math . max ( timestamp , maxTimestampExpected ) ; 
 + rm . apply ( ) ; 
 + inserted . add ( key ) ; 
 + } 
 + store . forceBlockingFlush ( ) ; 
 + assertMaxTimestamp ( store , maxTimestampExpected ) ; 
 + assertEquals ( inserted . toString ( ) , inserted . size ( ) , Util . getRangeSlice ( store ) . size ( ) ) ; 
 + } 
 + 
 + Collection < SSTableReader > sstables = store . getSSTables ( ) ; 
 + int currentSSTable = 0 ; 
 + int sstablesToCorrupt = 8 ; 
 + 
 + / / corrupt first ' sstablesToCorrupt ' SSTables 
 + for ( SSTableReader sstable : sstables ) 
 + { 
 + if ( currentSSTable + 1 > sstablesToCorrupt ) 
 + break ; 
 + 
 + RandomAccessFile raf = null ; 
 + 
 + try 
 + { 
 + raf = new RandomAccessFile ( sstable . getFilename ( ) , " rw " ) ; 
 + assertNotNull ( raf ) ; 
 + raf . write ( 0xFFFFFF ) ; 
 + } 
 + finally 
 + { 
 + FileUtils . closeQuietly ( raf ) ; 
 + } 
 + 
 + currentSSTable + + ; 
 + } 
 + 
 + int failures = 0 ; 
 + 
 + / / close error output steam to avoid printing ton of useless RuntimeException 
 + System . err . close ( ) ; 
 + 
 + try 
 + { 
 + / / in case something will go wrong we don ' t want to loop forever using for ( ; ; ) 
 + for ( int i = 0 ; i < sstables . size ( ) ; i + + ) 
 + { 
 + try 
 + { 
 + store . forceMajorCompaction ( ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + failures + + ; 
 + continue ; 
 + } 
 + 
 + assertEquals ( sstablesToCorrupt + 1 , store . getSSTables ( ) . size ( ) ) ; 
 + break ; 
 + } 
 + } 
 + finally 
 + { 
 + System . setErr ( new PrintStream ( new ByteArrayOutputStream ( ) ) ) ; 
 + } 
 + 
 + 
 + store . truncate ( ) ; 
 + assertEquals ( failures , sstablesToCorrupt ) ; 
 + } 
 }
