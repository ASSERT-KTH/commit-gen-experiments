BLEU SCORE: 0.01562359895249748

TEST MSG: Forbid re - adding static columns as regular and vice versa
GENERATED MSG: Fix AssertionError while flushing memtable due to materialized views incorrectly inserting empty rows

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 362677a . . cda1b8b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Forbid re - adding static columns as regular and vice versa ( CASSANDRA - 14913 ) <nl> * Audit log allows system keyspaces to be audited via configuration options ( CASSANDRA - 14498 ) <nl> * Lower default chunk _ length _ in _ kb from 64kb to 16kb ( CASSANDRA - 13241 ) <nl> * Startup checker should wait for count rather than percentage ( CASSANDRA - 14297 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / schema / AlterTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / schema / AlterTableStatement . java <nl> index 5044119 . . c348cc4 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / schema / AlterTableStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / schema / AlterTableStatement . java <nl> @ @ - 168 , 12 + 168 , 20 @ @ public abstract class AlterTableStatement extends AlterSchemaStatement <nl> / / columns is pushed deeper down the line . The latter would still be problematic in cases of schema races . <nl> if ( ! droppedColumn . type . isValueCompatibleWith ( type ) ) <nl> { <nl> - throw ire ( " Cannot re - add a previously dropped column ' % s ' of type % s , incompatible with previous type % s " , <nl> + throw ire ( " Cannot re - add previously dropped column ' % s ' of type % s , incompatible with previous type % s " , <nl> name , <nl> type . asCQL3Type ( ) , <nl> droppedColumn . type . asCQL3Type ( ) ) ; <nl> } <nl> <nl> + if ( droppedColumn . isStatic ( ) ! = isStatic ) <nl> + { <nl> + throw ire ( " Cannot re - add previously dropped column ' % s ' of kind % s , incompatible with previous kind % s " , <nl> + name , <nl> + isStatic ? ColumnMetadata . Kind . STATIC : ColumnMetadata . Kind . REGULAR , <nl> + droppedColumn . kind ) ; <nl> + } <nl> + <nl> / / Cannot re - add a dropped counter column . See # 7831 . <nl> if ( table . isCounter ( ) ) <nl> throw ire ( " Cannot re - add previously dropped counter column % s " , name ) ; <nl> diff - - git a / test / distributed / org / apache / cassandra / distributed / DistributedReadWritePathTest . java b / test / distributed / org / apache / cassandra / distributed / DistributedReadWritePathTest . java <nl> index a61c8af . . d03ef4f 100644 <nl> - - - a / test / distributed / org / apache / cassandra / distributed / DistributedReadWritePathTest . java <nl> + + + b / test / distributed / org / apache / cassandra / distributed / DistributedReadWritePathTest . java <nl> @ @ - 172 , 177 + 172 , 4 @ @ public class DistributedReadWritePathTest extends DistributedTestBase <nl> Assert . assertTrue ( thrown . getCause ( ) . getMessage ( ) . contains ( " Unknown column v2 during deserialization " ) ) ; <nl> } <nl> } <nl> - <nl> - @ Test <nl> - public void reAddColumnAsStatic ( ) throws Throwable <nl> - { <nl> - try ( TestCluster cluster = createCluster ( 3 ) ) <nl> - { <nl> - cluster . schemaChange ( " CREATE TABLE " + KEYSPACE + " . tbl ( pk int , ck int , v1 int , PRIMARY KEY ( pk , ck ) ) " ) ; <nl> - <nl> - for ( int i = 1 ; i < = 3 ; i + + ) <nl> - { <nl> - cluster . coordinator ( ) . execute ( " INSERT INTO " + KEYSPACE + " . tbl ( pk , ck , v1 ) VALUES ( ? , ? , ? ) " , <nl> - ConsistencyLevel . ALL , <nl> - 1 , i , i ) ; <nl> - } <nl> - <nl> - / / Drop column <nl> - cluster . schemaChange ( " ALTER TABLE " + KEYSPACE + " . tbl DROP v1 " ) ; <nl> - <nl> - assertRows ( cluster . coordinator ( ) . execute ( " SELECT * FROM " + KEYSPACE + " . tbl WHERE pk = 1 " , <nl> - ConsistencyLevel . ALL ) , <nl> - row ( 1 , 1 ) , <nl> - row ( 1 , 2 ) , <nl> - row ( 1 , 3 ) ) ; <nl> - <nl> - / / Drop column <nl> - cluster . schemaChange ( " ALTER TABLE " + KEYSPACE + " . tbl ADD v1 int static " ) ; <nl> - <nl> - assertRows ( cluster . coordinator ( ) . execute ( " SELECT * FROM " + KEYSPACE + " . tbl WHERE pk = 1 " , <nl> - ConsistencyLevel . ALL ) , <nl> - row ( 1 , 1 , null ) , <nl> - row ( 1 , 2 , null ) , <nl> - row ( 1 , 3 , null ) ) ; <nl> - <nl> - cluster . coordinator ( ) . execute ( " INSERT INTO " + KEYSPACE + " . tbl ( pk , v1 ) VALUES ( ? , ? ) " , <nl> - ConsistencyLevel . ALL , <nl> - 1 , 1 ) ; <nl> - <nl> - assertRows ( cluster . coordinator ( ) . execute ( " SELECT * FROM " + KEYSPACE + " . tbl WHERE pk = 1 " , <nl> - ConsistencyLevel . ALL ) , <nl> - row ( 1 , 1 , 1 ) , <nl> - row ( 1 , 2 , 1 ) , <nl> - row ( 1 , 3 , 1 ) ) ; <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> - public void reAddColumnAsStaticDisagreementCoordinatorSide ( ) throws Throwable <nl> - { <nl> - try ( TestCluster cluster = createCluster ( 3 ) ) <nl> - { <nl> - cluster . schemaChange ( " CREATE TABLE " + KEYSPACE + " . tbl ( pk int , ck int , v1 int , PRIMARY KEY ( pk , ck ) ) " ) ; <nl> - <nl> - for ( int i = 1 ; i < = 3 ; i + + ) <nl> - { <nl> - cluster . coordinator ( ) . execute ( " INSERT INTO " + KEYSPACE + " . tbl ( pk , ck , v1 ) VALUES ( ? , ? , ? ) " , <nl> - ConsistencyLevel . ALL , <nl> - 1 , i , i ) ; <nl> - } <nl> - <nl> - / / Drop column <nl> - cluster . schemaChange ( " ALTER TABLE " + KEYSPACE + " . tbl DROP v1 " , 1 ) ; <nl> - <nl> - Exception thrown = null ; <nl> - try <nl> - { <nl> - cluster . coordinator ( ) . execute ( " SELECT * FROM " + KEYSPACE + " . tbl WHERE pk = 1 " , <nl> - ConsistencyLevel . ALL ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - thrown = e ; <nl> - } <nl> - <nl> - Assert . assertTrue ( thrown . getCause ( ) . getMessage ( ) . contains ( " [ v1 ] is not a subset of " ) ) ; <nl> - <nl> - cluster . schemaChange ( " ALTER TABLE " + KEYSPACE + " . tbl ADD v1 int static " , 1 ) ; <nl> - <nl> - try <nl> - { <nl> - cluster . coordinator ( ) . execute ( " SELECT * FROM " + KEYSPACE + " . tbl WHERE pk = 1 " , <nl> - ConsistencyLevel . ALL ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - thrown = e ; <nl> - } <nl> - <nl> - Assert . assertTrue ( thrown . getCause ( ) . getMessage ( ) . contains ( " [ v1 ] is not a subset of " ) ) ; <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> - public void reAddColumnAsStaticDisagreementReplicaSide ( ) throws Throwable <nl> - { <nl> - try ( TestCluster cluster = createCluster ( 2 ) ) <nl> - { <nl> - cluster . schemaChange ( " CREATE TABLE " + KEYSPACE + " . tbl ( pk int , ck int , v1 int , PRIMARY KEY ( pk , ck ) ) WITH read _ repair = ' blocking ' " ) ; <nl> - <nl> - for ( int i = 1 ; i < = 3 ; i + + ) <nl> - { <nl> - cluster . coordinator ( ) . execute ( " INSERT INTO " + KEYSPACE + " . tbl ( pk , ck , v1 ) VALUES ( ? , ? , ? ) " , <nl> - ConsistencyLevel . ALL , <nl> - 1 , i , i ) ; <nl> - } <nl> - <nl> - / / Drop column on the replica <nl> - cluster . schemaChange ( " ALTER TABLE " + KEYSPACE + " . tbl DROP v1 " , 2 ) ; <nl> - <nl> - / / Columns are going to be read and read - repaired as long as they ' re available <nl> - assertRows ( cluster . coordinator ( ) . execute ( " SELECT * FROM " + KEYSPACE + " . tbl WHERE pk = 1 " , <nl> - ConsistencyLevel . ALL ) , <nl> - row ( 1 , 1 , 1 ) , <nl> - row ( 1 , 2 , 2 ) , <nl> - row ( 1 , 3 , 3 ) ) ; <nl> - <nl> - assertRows ( cluster . get ( 2 ) . executeInternal ( " SELECT * FROM " + KEYSPACE + " . tbl WHERE pk = 1 " ) , <nl> - row ( 1 , 1 ) , <nl> - row ( 1 , 2 ) , <nl> - row ( 1 , 3 ) ) ; <nl> - <nl> - / / Re - add as static on the replica <nl> - cluster . schemaChange ( " ALTER TABLE " + KEYSPACE + " . tbl ADD v1 int static " , 2 ) ; <nl> - <nl> - / / Try reading <nl> - assertRows ( cluster . coordinator ( ) . execute ( " SELECT * FROM " + KEYSPACE + " . tbl WHERE pk = 1 " , <nl> - ConsistencyLevel . ALL ) , <nl> - row ( 1 , 1 , 1 ) , <nl> - row ( 1 , 2 , 2 ) , <nl> - row ( 1 , 3 , 3 ) ) ; <nl> - <nl> - / / Make sure read - repair did not corrupt the data <nl> - assertRows ( cluster . get ( 2 ) . executeInternal ( " SELECT * FROM " + KEYSPACE + " . tbl WHERE pk = 1 " ) , <nl> - row ( 1 , 1 , null ) , <nl> - row ( 1 , 2 , null ) , <nl> - row ( 1 , 3 , null ) ) ; <nl> - <nl> - / / Writing to the replica with disagreeing schema should not work <nl> - Exception thrown = null ; <nl> - try <nl> - { <nl> - cluster . coordinator ( ) . execute ( " INSERT INTO " + KEYSPACE + " . tbl ( pk , ck , v1 ) VALUES ( ? , ? , ? ) " , <nl> - ConsistencyLevel . ALL , <nl> - 1 , 1 , 5 ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - thrown = e ; <nl> - } <nl> - <nl> - Assert . assertNotNull ( thrown ) ; <nl> - <nl> - thrown = null ; <nl> - <nl> - / / If somehow replica got new data , reading that data should not be possible , either <nl> - cluster . get ( 2 ) . executeInternal ( " INSERT INTO " + KEYSPACE + " . tbl ( pk , ck , v1 ) VALUES ( ? , ? , ? ) " , <nl> - 1 , 1 , 100 ) ; <nl> - <nl> - try <nl> - { <nl> - assertRows ( cluster . coordinator ( ) . execute ( " SELECT * FROM " + KEYSPACE + " . tbl WHERE pk = 1 " , <nl> - ConsistencyLevel . ALL ) , <nl> - row ( 1 , 1 , 1 ) , <nl> - row ( 1 , 2 , 2 ) , <nl> - row ( 1 , 3 , 3 ) ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - thrown = e ; <nl> - } <nl> - <nl> - Assert . assertNotNull ( thrown ) ; <nl> - } <nl> - } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java <nl> index 79db6f2 . . db83eb4 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java <nl> @ @ - 119 , 6 + 119 , 21 @ @ public class AlterTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> + public void testDropAddWithDifferentKind ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int static , PRIMARY KEY ( a , b ) ) ; " ) ; <nl> + <nl> + execute ( " ALTER TABLE % s DROP c ; " ) ; <nl> + execute ( " ALTER TABLE % s DROP d ; " ) ; <nl> + <nl> + assertInvalidMessage ( " Cannot re - add previously dropped column ' c ' of kind STATIC , incompatible with previous kind REGULAR " , <nl> + " ALTER TABLE % s ADD c int static ; " ) ; <nl> + <nl> + assertInvalidMessage ( " Cannot re - add previously dropped column ' d ' of kind REGULAR , incompatible with previous kind STATIC " , <nl> + " ALTER TABLE % s ADD d int ; " ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testDropStaticWithTimestamp ( ) throws Throwable <nl> { <nl> createTable ( " CREATE TABLE % s ( id int , c1 int , v1 int , todrop int static , PRIMARY KEY ( id , c1 ) ) ; " ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 362677a . . cda1b8b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Forbid re - adding static columns as regular and vice versa ( CASSANDRA - 14913 ) 
 * Audit log allows system keyspaces to be audited via configuration options ( CASSANDRA - 14498 ) 
 * Lower default chunk _ length _ in _ kb from 64kb to 16kb ( CASSANDRA - 13241 ) 
 * Startup checker should wait for count rather than percentage ( CASSANDRA - 14297 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / schema / AlterTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / schema / AlterTableStatement . java 
 index 5044119 . . c348cc4 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / schema / AlterTableStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / schema / AlterTableStatement . java 
 @ @ - 168 , 12 + 168 , 20 @ @ public abstract class AlterTableStatement extends AlterSchemaStatement 
 / / columns is pushed deeper down the line . The latter would still be problematic in cases of schema races . 
 if ( ! droppedColumn . type . isValueCompatibleWith ( type ) ) 
 { 
 - throw ire ( " Cannot re - add a previously dropped column ' % s ' of type % s , incompatible with previous type % s " , 
 + throw ire ( " Cannot re - add previously dropped column ' % s ' of type % s , incompatible with previous type % s " , 
 name , 
 type . asCQL3Type ( ) , 
 droppedColumn . type . asCQL3Type ( ) ) ; 
 } 
 
 + if ( droppedColumn . isStatic ( ) ! = isStatic ) 
 + { 
 + throw ire ( " Cannot re - add previously dropped column ' % s ' of kind % s , incompatible with previous kind % s " , 
 + name , 
 + isStatic ? ColumnMetadata . Kind . STATIC : ColumnMetadata . Kind . REGULAR , 
 + droppedColumn . kind ) ; 
 + } 
 + 
 / / Cannot re - add a dropped counter column . See # 7831 . 
 if ( table . isCounter ( ) ) 
 throw ire ( " Cannot re - add previously dropped counter column % s " , name ) ; 
 diff - - git a / test / distributed / org / apache / cassandra / distributed / DistributedReadWritePathTest . java b / test / distributed / org / apache / cassandra / distributed / DistributedReadWritePathTest . java 
 index a61c8af . . d03ef4f 100644 
 - - - a / test / distributed / org / apache / cassandra / distributed / DistributedReadWritePathTest . java 
 + + + b / test / distributed / org / apache / cassandra / distributed / DistributedReadWritePathTest . java 
 @ @ - 172 , 177 + 172 , 4 @ @ public class DistributedReadWritePathTest extends DistributedTestBase 
 Assert . assertTrue ( thrown . getCause ( ) . getMessage ( ) . contains ( " Unknown column v2 during deserialization " ) ) ; 
 } 
 } 
 - 
 - @ Test 
 - public void reAddColumnAsStatic ( ) throws Throwable 
 - { 
 - try ( TestCluster cluster = createCluster ( 3 ) ) 
 - { 
 - cluster . schemaChange ( " CREATE TABLE " + KEYSPACE + " . tbl ( pk int , ck int , v1 int , PRIMARY KEY ( pk , ck ) ) " ) ; 
 - 
 - for ( int i = 1 ; i < = 3 ; i + + ) 
 - { 
 - cluster . coordinator ( ) . execute ( " INSERT INTO " + KEYSPACE + " . tbl ( pk , ck , v1 ) VALUES ( ? , ? , ? ) " , 
 - ConsistencyLevel . ALL , 
 - 1 , i , i ) ; 
 - } 
 - 
 - / / Drop column 
 - cluster . schemaChange ( " ALTER TABLE " + KEYSPACE + " . tbl DROP v1 " ) ; 
 - 
 - assertRows ( cluster . coordinator ( ) . execute ( " SELECT * FROM " + KEYSPACE + " . tbl WHERE pk = 1 " , 
 - ConsistencyLevel . ALL ) , 
 - row ( 1 , 1 ) , 
 - row ( 1 , 2 ) , 
 - row ( 1 , 3 ) ) ; 
 - 
 - / / Drop column 
 - cluster . schemaChange ( " ALTER TABLE " + KEYSPACE + " . tbl ADD v1 int static " ) ; 
 - 
 - assertRows ( cluster . coordinator ( ) . execute ( " SELECT * FROM " + KEYSPACE + " . tbl WHERE pk = 1 " , 
 - ConsistencyLevel . ALL ) , 
 - row ( 1 , 1 , null ) , 
 - row ( 1 , 2 , null ) , 
 - row ( 1 , 3 , null ) ) ; 
 - 
 - cluster . coordinator ( ) . execute ( " INSERT INTO " + KEYSPACE + " . tbl ( pk , v1 ) VALUES ( ? , ? ) " , 
 - ConsistencyLevel . ALL , 
 - 1 , 1 ) ; 
 - 
 - assertRows ( cluster . coordinator ( ) . execute ( " SELECT * FROM " + KEYSPACE + " . tbl WHERE pk = 1 " , 
 - ConsistencyLevel . ALL ) , 
 - row ( 1 , 1 , 1 ) , 
 - row ( 1 , 2 , 1 ) , 
 - row ( 1 , 3 , 1 ) ) ; 
 - } 
 - } 
 - 
 - @ Test 
 - public void reAddColumnAsStaticDisagreementCoordinatorSide ( ) throws Throwable 
 - { 
 - try ( TestCluster cluster = createCluster ( 3 ) ) 
 - { 
 - cluster . schemaChange ( " CREATE TABLE " + KEYSPACE + " . tbl ( pk int , ck int , v1 int , PRIMARY KEY ( pk , ck ) ) " ) ; 
 - 
 - for ( int i = 1 ; i < = 3 ; i + + ) 
 - { 
 - cluster . coordinator ( ) . execute ( " INSERT INTO " + KEYSPACE + " . tbl ( pk , ck , v1 ) VALUES ( ? , ? , ? ) " , 
 - ConsistencyLevel . ALL , 
 - 1 , i , i ) ; 
 - } 
 - 
 - / / Drop column 
 - cluster . schemaChange ( " ALTER TABLE " + KEYSPACE + " . tbl DROP v1 " , 1 ) ; 
 - 
 - Exception thrown = null ; 
 - try 
 - { 
 - cluster . coordinator ( ) . execute ( " SELECT * FROM " + KEYSPACE + " . tbl WHERE pk = 1 " , 
 - ConsistencyLevel . ALL ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - thrown = e ; 
 - } 
 - 
 - Assert . assertTrue ( thrown . getCause ( ) . getMessage ( ) . contains ( " [ v1 ] is not a subset of " ) ) ; 
 - 
 - cluster . schemaChange ( " ALTER TABLE " + KEYSPACE + " . tbl ADD v1 int static " , 1 ) ; 
 - 
 - try 
 - { 
 - cluster . coordinator ( ) . execute ( " SELECT * FROM " + KEYSPACE + " . tbl WHERE pk = 1 " , 
 - ConsistencyLevel . ALL ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - thrown = e ; 
 - } 
 - 
 - Assert . assertTrue ( thrown . getCause ( ) . getMessage ( ) . contains ( " [ v1 ] is not a subset of " ) ) ; 
 - } 
 - } 
 - 
 - @ Test 
 - public void reAddColumnAsStaticDisagreementReplicaSide ( ) throws Throwable 
 - { 
 - try ( TestCluster cluster = createCluster ( 2 ) ) 
 - { 
 - cluster . schemaChange ( " CREATE TABLE " + KEYSPACE + " . tbl ( pk int , ck int , v1 int , PRIMARY KEY ( pk , ck ) ) WITH read _ repair = ' blocking ' " ) ; 
 - 
 - for ( int i = 1 ; i < = 3 ; i + + ) 
 - { 
 - cluster . coordinator ( ) . execute ( " INSERT INTO " + KEYSPACE + " . tbl ( pk , ck , v1 ) VALUES ( ? , ? , ? ) " , 
 - ConsistencyLevel . ALL , 
 - 1 , i , i ) ; 
 - } 
 - 
 - / / Drop column on the replica 
 - cluster . schemaChange ( " ALTER TABLE " + KEYSPACE + " . tbl DROP v1 " , 2 ) ; 
 - 
 - / / Columns are going to be read and read - repaired as long as they ' re available 
 - assertRows ( cluster . coordinator ( ) . execute ( " SELECT * FROM " + KEYSPACE + " . tbl WHERE pk = 1 " , 
 - ConsistencyLevel . ALL ) , 
 - row ( 1 , 1 , 1 ) , 
 - row ( 1 , 2 , 2 ) , 
 - row ( 1 , 3 , 3 ) ) ; 
 - 
 - assertRows ( cluster . get ( 2 ) . executeInternal ( " SELECT * FROM " + KEYSPACE + " . tbl WHERE pk = 1 " ) , 
 - row ( 1 , 1 ) , 
 - row ( 1 , 2 ) , 
 - row ( 1 , 3 ) ) ; 
 - 
 - / / Re - add as static on the replica 
 - cluster . schemaChange ( " ALTER TABLE " + KEYSPACE + " . tbl ADD v1 int static " , 2 ) ; 
 - 
 - / / Try reading 
 - assertRows ( cluster . coordinator ( ) . execute ( " SELECT * FROM " + KEYSPACE + " . tbl WHERE pk = 1 " , 
 - ConsistencyLevel . ALL ) , 
 - row ( 1 , 1 , 1 ) , 
 - row ( 1 , 2 , 2 ) , 
 - row ( 1 , 3 , 3 ) ) ; 
 - 
 - / / Make sure read - repair did not corrupt the data 
 - assertRows ( cluster . get ( 2 ) . executeInternal ( " SELECT * FROM " + KEYSPACE + " . tbl WHERE pk = 1 " ) , 
 - row ( 1 , 1 , null ) , 
 - row ( 1 , 2 , null ) , 
 - row ( 1 , 3 , null ) ) ; 
 - 
 - / / Writing to the replica with disagreeing schema should not work 
 - Exception thrown = null ; 
 - try 
 - { 
 - cluster . coordinator ( ) . execute ( " INSERT INTO " + KEYSPACE + " . tbl ( pk , ck , v1 ) VALUES ( ? , ? , ? ) " , 
 - ConsistencyLevel . ALL , 
 - 1 , 1 , 5 ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - thrown = e ; 
 - } 
 - 
 - Assert . assertNotNull ( thrown ) ; 
 - 
 - thrown = null ; 
 - 
 - / / If somehow replica got new data , reading that data should not be possible , either 
 - cluster . get ( 2 ) . executeInternal ( " INSERT INTO " + KEYSPACE + " . tbl ( pk , ck , v1 ) VALUES ( ? , ? , ? ) " , 
 - 1 , 1 , 100 ) ; 
 - 
 - try 
 - { 
 - assertRows ( cluster . coordinator ( ) . execute ( " SELECT * FROM " + KEYSPACE + " . tbl WHERE pk = 1 " , 
 - ConsistencyLevel . ALL ) , 
 - row ( 1 , 1 , 1 ) , 
 - row ( 1 , 2 , 2 ) , 
 - row ( 1 , 3 , 3 ) ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - thrown = e ; 
 - } 
 - 
 - Assert . assertNotNull ( thrown ) ; 
 - } 
 - } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java 
 index 79db6f2 . . db83eb4 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java 
 @ @ - 119 , 6 + 119 , 21 @ @ public class AlterTest extends CQLTester 
 } 
 
 @ Test 
 + public void testDropAddWithDifferentKind ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int static , PRIMARY KEY ( a , b ) ) ; " ) ; 
 + 
 + execute ( " ALTER TABLE % s DROP c ; " ) ; 
 + execute ( " ALTER TABLE % s DROP d ; " ) ; 
 + 
 + assertInvalidMessage ( " Cannot re - add previously dropped column ' c ' of kind STATIC , incompatible with previous kind REGULAR " , 
 + " ALTER TABLE % s ADD c int static ; " ) ; 
 + 
 + assertInvalidMessage ( " Cannot re - add previously dropped column ' d ' of kind REGULAR , incompatible with previous kind STATIC " , 
 + " ALTER TABLE % s ADD d int ; " ) ; 
 + } 
 + 
 + @ Test 
 public void testDropStaticWithTimestamp ( ) throws Throwable 
 { 
 createTable ( " CREATE TABLE % s ( id int , c1 int , v1 int , todrop int static , PRIMARY KEY ( id , c1 ) ) ; " ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
