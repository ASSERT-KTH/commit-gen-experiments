BLEU SCORE: 0.03283637368030199

TEST MSG: LocalToken ensures object buffer is on heap
GENERATED MSG: merge from 1 . 2

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index a2c552e . . b77d84a 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 11 <nl> + * LocalToken ensures token values are cloned on heap ( CASSANDRA - 12651 ) <nl> * AnticompactionRequestSerializer serializedSize is incorrect ( CASSANDRA - 12934 ) <nl> * Prevent reloading of logback . xml from UDF sandbox ( CASSANDRA - 12535 ) <nl> Merged from 2 . 2 : <nl> diff - - git a / src / java / org / apache / cassandra / dht / LocalPartitioner . java b / src / java / org / apache / cassandra / dht / LocalPartitioner . java <nl> index f9421c5 . . aaf2569 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / LocalPartitioner . java <nl> + + + b / src / java / org / apache / cassandra / dht / LocalPartitioner . java <nl> @ @ - 27 , 10 + 27 , 11 @ @ import org . apache . cassandra . db . CachedHashDecoratedKey ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . ObjectSizes ; <nl> + import org . apache . cassandra . utils . memory . HeapAllocator ; <nl> <nl> public class LocalPartitioner implements IPartitioner <nl> { <nl> - private static final long EMPTY _ SIZE = ObjectSizes . measure ( new LocalPartitioner ( null ) . new LocalToken ( null ) ) ; <nl> + private static final long EMPTY _ SIZE = ObjectSizes . measure ( new LocalPartitioner ( null ) . new LocalToken ( ) ) ; <nl> <nl> final AbstractType < ? > comparator ; / / package - private to avoid access workarounds in embedded LocalToken . <nl> <nl> @ @ - 121 , 9 + 122 , 14 @ @ public class LocalPartitioner implements IPartitioner <nl> { <nl> static final long serialVersionUID = 8437543776403014875L ; <nl> <nl> + private LocalToken ( ) <nl> + { <nl> + super ( null ) ; <nl> + } <nl> + <nl> public LocalToken ( ByteBuffer token ) <nl> { <nl> - super ( token ) ; <nl> + super ( HeapAllocator . instance . clone ( token ) ) ; <nl> } <nl> <nl> @ Override
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b935425 . . 7f5a487 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 2 - rc1 <nl> + * fix cqlsh rendering of blob fields ( CASSANDRA - 4970 ) <nl> * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) <nl> * save truncation position in system table ( CASSANDRA - 4906 ) <nl> * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) <nl> diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py <nl> index d15c083 . . bab3506 100644 <nl> - - - a / pylib / cqlshlib / formatting . py <nl> + + + b / pylib / cqlshlib / formatting . py <nl> @ @ - 88 , 8 + 88 , 8 @ @ def formatter _ for ( typname ) : <nl> return f <nl> return registrator <nl> <nl> - @ formatter _ for ( ' bytes ' ) <nl> - def format _ value _ bytes ( val , colormap , * * _ ) : <nl> + @ formatter _ for ( ' blob ' ) <nl> + def format _ value _ blob ( val , colormap , * * _ ) : <nl> bval = ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) <nl> return colorme ( bval , colormap , ' hex ' ) <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index a2c552e . . b77d84a 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 11 
 + * LocalToken ensures token values are cloned on heap ( CASSANDRA - 12651 ) 
 * AnticompactionRequestSerializer serializedSize is incorrect ( CASSANDRA - 12934 ) 
 * Prevent reloading of logback . xml from UDF sandbox ( CASSANDRA - 12535 ) 
 Merged from 2 . 2 : 
 diff - - git a / src / java / org / apache / cassandra / dht / LocalPartitioner . java b / src / java / org / apache / cassandra / dht / LocalPartitioner . java 
 index f9421c5 . . aaf2569 100644 
 - - - a / src / java / org / apache / cassandra / dht / LocalPartitioner . java 
 + + + b / src / java / org / apache / cassandra / dht / LocalPartitioner . java 
 @ @ - 27 , 10 + 27 , 11 @ @ import org . apache . cassandra . db . CachedHashDecoratedKey ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . ObjectSizes ; 
 + import org . apache . cassandra . utils . memory . HeapAllocator ; 
 
 public class LocalPartitioner implements IPartitioner 
 { 
 - private static final long EMPTY _ SIZE = ObjectSizes . measure ( new LocalPartitioner ( null ) . new LocalToken ( null ) ) ; 
 + private static final long EMPTY _ SIZE = ObjectSizes . measure ( new LocalPartitioner ( null ) . new LocalToken ( ) ) ; 
 
 final AbstractType < ? > comparator ; / / package - private to avoid access workarounds in embedded LocalToken . 
 
 @ @ - 121 , 9 + 122 , 14 @ @ public class LocalPartitioner implements IPartitioner 
 { 
 static final long serialVersionUID = 8437543776403014875L ; 
 
 + private LocalToken ( ) 
 + { 
 + super ( null ) ; 
 + } 
 + 
 public LocalToken ( ByteBuffer token ) 
 { 
 - super ( token ) ; 
 + super ( HeapAllocator . instance . clone ( token ) ) ; 
 } 
 
 @ Override

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b935425 . . 7f5a487 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 2 - rc1 
 + * fix cqlsh rendering of blob fields ( CASSANDRA - 4970 ) 
 * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) 
 * save truncation position in system table ( CASSANDRA - 4906 ) 
 * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) 
 diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py 
 index d15c083 . . bab3506 100644 
 - - - a / pylib / cqlshlib / formatting . py 
 + + + b / pylib / cqlshlib / formatting . py 
 @ @ - 88 , 8 + 88 , 8 @ @ def formatter _ for ( typname ) : 
 return f 
 return registrator 
 
 - @ formatter _ for ( ' bytes ' ) 
 - def format _ value _ bytes ( val , colormap , * * _ ) : 
 + @ formatter _ for ( ' blob ' ) 
 + def format _ value _ blob ( val , colormap , * * _ ) : 
 bval = ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) 
 return colorme ( bval , colormap , ' hex ' ) 

