BLEU SCORE: 0.014199193612838947

TEST MSG: cqlsh COPY : unprotected pk values before converting them if not using prepared statements
GENERATED MSG: python CQL driver result decoding

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b550885 . . 98c1839 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 9 <nl> + * cqlsh COPY : unprotected pk values before converting them if not using prepared statements ( CASSANDRA - 12863 ) <nl> * Fix Util . spinAssertEquals ( CASSANDRA - 12283 ) <nl> * Fix potential NPE for compactionstats ( CASSANDRA - 12462 ) <nl> * Prepare legacy authenticate statement if credentials table initialised after node startup ( CASSANDRA - 12813 ) <nl> diff - - git a / pylib / cqlshlib / copyutil . py b / pylib / cqlshlib / copyutil . py <nl> index aee2920 . . 0c11636 100644 <nl> - - - a / pylib / cqlshlib / copyutil . py <nl> + + + b / pylib / cqlshlib / copyutil . py <nl> @ @ - 1778 , 15 + 1778 , 18 @ @ class ImportConversion ( object ) : <nl> where _ clause ) <nl> return parent . session . prepare ( select _ query ) <nl> <nl> + @ staticmethod <nl> + def unprotect ( v ) : <nl> + if v is not None : <nl> + return CqlRuleSet . dequote _ value ( v ) <nl> + <nl> def _ get _ converter ( self , cql _ type ) : <nl> " " " <nl> Return a function that converts a string into a value the can be passed <nl> into BoundStatement . bind ( ) for the given cql type . See cassandra . cqltypes <nl> for more details . <nl> " " " <nl> - def unprotect ( v ) : <nl> - if v is not None : <nl> - return CqlRuleSet . dequote _ value ( v ) <nl> + unprotect = self . unprotect <nl> <nl> def convert ( t , v ) : <nl> v = unprotect ( v ) <nl> @ @ - 2028 , 7 + 2031 , 7 @ @ class ImportConversion ( object ) : <nl> return self . cqltypes [ n ] . serialize ( v , self . proto _ version ) <nl> <nl> def serialize _ value _ not _ prepared ( n , v ) : <nl> - return self . cqltypes [ n ] . serialize ( self . converters [ n ] ( v ) , self . proto _ version ) <nl> + return self . cqltypes [ n ] . serialize ( self . converters [ n ] ( self . unprotect ( v ) ) , self . proto _ version ) <nl> <nl> partition _ key _ indexes = self . partition _ key _ indexes <nl> serialize = serialize _ value _ prepared if self . use _ prepared _ statements else serialize _ value _ not _ prepared
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 7cfd8ac . . 649c843 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 12 , 6 + 12 , 8 @ @ <nl> * validate index names for \ w + ( CASSANDRA - 2196 ) <nl> * Fix Cassandra cli to respect timeout if schema does not settle ( CASSANDRA - 2187 ) <nl> * update memtable _ throughput to be a long ( CASSANDRA - 2158 ) <nl> + * fix for cleanup writing old - format data into new - version sstable <nl> + ( CASSANRDRA - 2211 ) <nl> <nl> <nl> 0 . 7 . 2 <nl> diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> index b730b9c . . 8ded7e9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> @ @ - 41 , 9 + 41 , 7 @ @ import org . slf4j . LoggerFactory ; <nl> import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . dht . Range ; <nl> - import org . apache . cassandra . io . AbstractCompactedRow ; <nl> - import org . apache . cassandra . io . CompactionIterator ; <nl> - import org . apache . cassandra . io . ICompactionInfo ; <nl> + import org . apache . cassandra . io . * ; <nl> import org . apache . cassandra . io . sstable . * ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . service . AntiEntropyService ; <nl> @ @ - 119 , 7 + 117 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> Collections . sort ( sstables ) ; <nl> int gcBefore = cfs . isIndex ( ) <nl> ? Integer . MAX _ VALUE <nl> - : ( int ) ( System . currentTimeMillis ( ) / 1000 ) - cfs . metadata . getGcGraceSeconds ( ) ; <nl> + : getDefaultGcBefore ( cfs ) ; <nl> return doCompaction ( cfs , <nl> sstables . subList ( 0 , Math . min ( sstables . size ( ) , maxThreshold ) ) , <nl> gcBefore ) ; <nl> @ @ - 183 , 7 + 181 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> <nl> public void performMajor ( final ColumnFamilyStore cfStore ) throws InterruptedException , ExecutionException <nl> { <nl> - submitMajor ( cfStore , 0 , ( int ) ( System . currentTimeMillis ( ) / 1000 ) - cfStore . metadata . getGcGraceSeconds ( ) ) . get ( ) ; <nl> + submitMajor ( cfStore , 0 , getDefaultGcBefore ( cfStore ) ) . get ( ) ; <nl> } <nl> <nl> public Future < Object > submitMajor ( final ColumnFamilyStore cfStore , final long skip , final int gcBefore ) <nl> @ @ - 256 , 7 + 254 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> } <nl> <nl> ColumnFamilyStore cfs = Table . open ( ksname ) . getColumnFamilyStore ( cfname ) ; <nl> - submitUserDefined ( cfs , descriptors , ( int ) ( System . currentTimeMillis ( ) / 1000 ) - cfs . metadata . getGcGraceSeconds ( ) ) ; <nl> + submitUserDefined ( cfs , descriptors , getDefaultGcBefore ( cfs ) ) ; <nl> } <nl> <nl> private Future < Object > submitUserDefined ( final ColumnFamilyStore cfs , final Collection < Descriptor > dataFiles , final int gcBefore ) <nl> @ @ - 515 , 7 + 513 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> if ( Range . isTokenInRanges ( row . getKey ( ) . token , ranges ) ) <nl> { <nl> writer = maybeCreateWriter ( cfs , compactionFileLocation , expectedBloomFilterSize , writer ) ; <nl> - writer . append ( new EchoedRow ( row ) ) ; <nl> + writer . append ( getCompactedRow ( row , cfs , sstable . descriptor ) ) ; <nl> totalkeysWritten + + ; <nl> } <nl> else <nl> @ @ - 568 , 6 + 566 , 21 @ @ public class CompactionManager implements CompactionManagerMBean <nl> } <nl> } <nl> <nl> + / * * <nl> + * @ return an AbstractCompactedRow implementation to write the row in question . <nl> + * If the data is from a current - version sstable , write it unchanged . Otherwise , <nl> + * re - serialize it in the latest version . <nl> + * / <nl> + private AbstractCompactedRow getCompactedRow ( SSTableIdentityIterator row , ColumnFamilyStore cfs , Descriptor descriptor ) <nl> + { <nl> + if ( descriptor . isLatestVersion ) <nl> + return new EchoedRow ( row ) ; <nl> + <nl> + return row . dataSize > DatabaseDescriptor . getInMemoryCompactionLimit ( ) <nl> + ? new LazilyCompactedRow ( cfs , Arrays . asList ( row ) , false , getDefaultGcBefore ( cfs ) ) <nl> + : new PrecompactedRow ( cfs , Arrays . asList ( row ) , false , getDefaultGcBefore ( cfs ) ) ; <nl> + } <nl> + <nl> private SSTableWriter maybeCreateWriter ( ColumnFamilyStore cfs , String compactionFileLocation , int expectedBloomFilterSize , SSTableWriter writer ) <nl> throws IOException <nl> { <nl> @ @ - 752 , 11 + 765 , 16 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return executor . submit ( runnable ) ; <nl> } <nl> <nl> + private static int getDefaultGcBefore ( ColumnFamilyStore cfs ) <nl> + { <nl> + return ( int ) ( System . currentTimeMillis ( ) / 1000 ) - cfs . metadata . getGcGraceSeconds ( ) ; <nl> + } <nl> + <nl> private static class ValidationCompactionIterator extends CompactionIterator <nl> { <nl> public ValidationCompactionIterator ( ColumnFamilyStore cfs ) throws IOException <nl> { <nl> - super ( cfs , cfs . getSSTables ( ) , ( int ) ( System . currentTimeMillis ( ) / 1000 ) - cfs . metadata . getGcGraceSeconds ( ) , true ) ; <nl> + super ( cfs , cfs . getSSTables ( ) , getDefaultGcBefore ( cfs ) , true ) ; <nl> } <nl> <nl> @ Override

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b550885 . . 98c1839 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 9 
 + * cqlsh COPY : unprotected pk values before converting them if not using prepared statements ( CASSANDRA - 12863 ) 
 * Fix Util . spinAssertEquals ( CASSANDRA - 12283 ) 
 * Fix potential NPE for compactionstats ( CASSANDRA - 12462 ) 
 * Prepare legacy authenticate statement if credentials table initialised after node startup ( CASSANDRA - 12813 ) 
 diff - - git a / pylib / cqlshlib / copyutil . py b / pylib / cqlshlib / copyutil . py 
 index aee2920 . . 0c11636 100644 
 - - - a / pylib / cqlshlib / copyutil . py 
 + + + b / pylib / cqlshlib / copyutil . py 
 @ @ - 1778 , 15 + 1778 , 18 @ @ class ImportConversion ( object ) : 
 where _ clause ) 
 return parent . session . prepare ( select _ query ) 
 
 + @ staticmethod 
 + def unprotect ( v ) : 
 + if v is not None : 
 + return CqlRuleSet . dequote _ value ( v ) 
 + 
 def _ get _ converter ( self , cql _ type ) : 
 " " " 
 Return a function that converts a string into a value the can be passed 
 into BoundStatement . bind ( ) for the given cql type . See cassandra . cqltypes 
 for more details . 
 " " " 
 - def unprotect ( v ) : 
 - if v is not None : 
 - return CqlRuleSet . dequote _ value ( v ) 
 + unprotect = self . unprotect 
 
 def convert ( t , v ) : 
 v = unprotect ( v ) 
 @ @ - 2028 , 7 + 2031 , 7 @ @ class ImportConversion ( object ) : 
 return self . cqltypes [ n ] . serialize ( v , self . proto _ version ) 
 
 def serialize _ value _ not _ prepared ( n , v ) : 
 - return self . cqltypes [ n ] . serialize ( self . converters [ n ] ( v ) , self . proto _ version ) 
 + return self . cqltypes [ n ] . serialize ( self . converters [ n ] ( self . unprotect ( v ) ) , self . proto _ version ) 
 
 partition _ key _ indexes = self . partition _ key _ indexes 
 serialize = serialize _ value _ prepared if self . use _ prepared _ statements else serialize _ value _ not _ prepared

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 7cfd8ac . . 649c843 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 12 , 6 + 12 , 8 @ @ 
 * validate index names for \ w + ( CASSANDRA - 2196 ) 
 * Fix Cassandra cli to respect timeout if schema does not settle ( CASSANDRA - 2187 ) 
 * update memtable _ throughput to be a long ( CASSANDRA - 2158 ) 
 + * fix for cleanup writing old - format data into new - version sstable 
 + ( CASSANRDRA - 2211 ) 
 
 
 0 . 7 . 2 
 diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java 
 index b730b9c . . 8ded7e9 100644 
 - - - a / src / java / org / apache / cassandra / db / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / CompactionManager . java 
 @ @ - 41 , 9 + 41 , 7 @ @ import org . slf4j . LoggerFactory ; 
 import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . dht . Range ; 
 - import org . apache . cassandra . io . AbstractCompactedRow ; 
 - import org . apache . cassandra . io . CompactionIterator ; 
 - import org . apache . cassandra . io . ICompactionInfo ; 
 + import org . apache . cassandra . io . * ; 
 import org . apache . cassandra . io . sstable . * ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . service . AntiEntropyService ; 
 @ @ - 119 , 7 + 117 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 Collections . sort ( sstables ) ; 
 int gcBefore = cfs . isIndex ( ) 
 ? Integer . MAX _ VALUE 
 - : ( int ) ( System . currentTimeMillis ( ) / 1000 ) - cfs . metadata . getGcGraceSeconds ( ) ; 
 + : getDefaultGcBefore ( cfs ) ; 
 return doCompaction ( cfs , 
 sstables . subList ( 0 , Math . min ( sstables . size ( ) , maxThreshold ) ) , 
 gcBefore ) ; 
 @ @ - 183 , 7 + 181 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 
 public void performMajor ( final ColumnFamilyStore cfStore ) throws InterruptedException , ExecutionException 
 { 
 - submitMajor ( cfStore , 0 , ( int ) ( System . currentTimeMillis ( ) / 1000 ) - cfStore . metadata . getGcGraceSeconds ( ) ) . get ( ) ; 
 + submitMajor ( cfStore , 0 , getDefaultGcBefore ( cfStore ) ) . get ( ) ; 
 } 
 
 public Future < Object > submitMajor ( final ColumnFamilyStore cfStore , final long skip , final int gcBefore ) 
 @ @ - 256 , 7 + 254 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 } 
 
 ColumnFamilyStore cfs = Table . open ( ksname ) . getColumnFamilyStore ( cfname ) ; 
 - submitUserDefined ( cfs , descriptors , ( int ) ( System . currentTimeMillis ( ) / 1000 ) - cfs . metadata . getGcGraceSeconds ( ) ) ; 
 + submitUserDefined ( cfs , descriptors , getDefaultGcBefore ( cfs ) ) ; 
 } 
 
 private Future < Object > submitUserDefined ( final ColumnFamilyStore cfs , final Collection < Descriptor > dataFiles , final int gcBefore ) 
 @ @ - 515 , 7 + 513 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 if ( Range . isTokenInRanges ( row . getKey ( ) . token , ranges ) ) 
 { 
 writer = maybeCreateWriter ( cfs , compactionFileLocation , expectedBloomFilterSize , writer ) ; 
 - writer . append ( new EchoedRow ( row ) ) ; 
 + writer . append ( getCompactedRow ( row , cfs , sstable . descriptor ) ) ; 
 totalkeysWritten + + ; 
 } 
 else 
 @ @ - 568 , 6 + 566 , 21 @ @ public class CompactionManager implements CompactionManagerMBean 
 } 
 } 
 
 + / * * 
 + * @ return an AbstractCompactedRow implementation to write the row in question . 
 + * If the data is from a current - version sstable , write it unchanged . Otherwise , 
 + * re - serialize it in the latest version . 
 + * / 
 + private AbstractCompactedRow getCompactedRow ( SSTableIdentityIterator row , ColumnFamilyStore cfs , Descriptor descriptor ) 
 + { 
 + if ( descriptor . isLatestVersion ) 
 + return new EchoedRow ( row ) ; 
 + 
 + return row . dataSize > DatabaseDescriptor . getInMemoryCompactionLimit ( ) 
 + ? new LazilyCompactedRow ( cfs , Arrays . asList ( row ) , false , getDefaultGcBefore ( cfs ) ) 
 + : new PrecompactedRow ( cfs , Arrays . asList ( row ) , false , getDefaultGcBefore ( cfs ) ) ; 
 + } 
 + 
 private SSTableWriter maybeCreateWriter ( ColumnFamilyStore cfs , String compactionFileLocation , int expectedBloomFilterSize , SSTableWriter writer ) 
 throws IOException 
 { 
 @ @ - 752 , 11 + 765 , 16 @ @ public class CompactionManager implements CompactionManagerMBean 
 return executor . submit ( runnable ) ; 
 } 
 
 + private static int getDefaultGcBefore ( ColumnFamilyStore cfs ) 
 + { 
 + return ( int ) ( System . currentTimeMillis ( ) / 1000 ) - cfs . metadata . getGcGraceSeconds ( ) ; 
 + } 
 + 
 private static class ValidationCompactionIterator extends CompactionIterator 
 { 
 public ValidationCompactionIterator ( ColumnFamilyStore cfs ) throws IOException 
 { 
 - super ( cfs , cfs . getSSTables ( ) , ( int ) ( System . currentTimeMillis ( ) / 1000 ) - cfs . metadata . getGcGraceSeconds ( ) , true ) ; 
 + super ( cfs , cfs . getSSTables ( ) , getDefaultGcBefore ( cfs ) , true ) ; 
 } 
 
 @ Override
