BLEU SCORE: 0.06220117374063391

TEST MSG: Backport CASSANDRA - 11578
GENERATED MSG: Remove DatabaseDescriptor dependency from FileUtils

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f73db6e . . ad9d00c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 15 <nl> + * Backport CASSANDRA - 11578 ( CASSANDRA - 11750 ) <nl> * Clear out parent repair session if repair coordinator dies ( CASSANDRA - 11824 ) <nl> * Set default streaming _ socket _ timeout _ in _ ms to 24 hours ( CASSANDRA - 11840 ) <nl> * Do not consider local node a valid source during replace ( CASSANDRA - 11848 ) <nl> diff - - git a / src / java / org / apache / cassandra / io / FSErrorHandler . java b / src / java / org / apache / cassandra / io / FSErrorHandler . java <nl> new file mode 100644 <nl> index 0000000 . . 081ec0b <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / io / FSErrorHandler . java <nl> @ @ - 0 , 0 + 1 , 30 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . io ; <nl> + <nl> + import org . apache . cassandra . io . sstable . CorruptSSTableException ; <nl> + <nl> + / * * <nl> + * Interface for handling file system errors . <nl> + * / <nl> + public interface FSErrorHandler <nl> + { <nl> + void handleCorruptSSTable ( CorruptSSTableException e ) ; <nl> + void handleFSError ( FSError e ) ; <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / io / util / FileUtils . java b / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> index 3be7c99 . . f69ed01 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> + + + b / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ import java . nio . file . Path ; <nl> import java . nio . file . StandardCopyOption ; <nl> import java . text . DecimalFormat ; <nl> import java . util . Arrays ; <nl> + import java . util . concurrent . atomic . AtomicReference ; <nl> <nl> import sun . nio . ch . DirectBuffer ; <nl> <nl> @ @ - 39 , 17 + 40 , 14 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - import org . apache . cassandra . db . BlacklistedDirectories ; <nl> - import org . apache . cassandra . db . Keyspace ; <nl> import org . apache . cassandra . io . FSError ; <nl> + import org . apache . cassandra . io . FSErrorHandler ; <nl> import org . apache . cassandra . io . FSReadError ; <nl> import org . apache . cassandra . io . FSWriteError ; <nl> import org . apache . cassandra . io . sstable . CorruptSSTableException ; <nl> - import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . JVMStabilityInspector ; <nl> <nl> - public class FileUtils <nl> + public final class FileUtils <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( FileUtils . class ) ; <nl> private static final double KB = 1024d ; <nl> @ @ - 59 , 6 + 57 , 7 @ @ public class FileUtils <nl> <nl> private static final DecimalFormat df = new DecimalFormat ( " # . # # " ) ; <nl> private static final boolean canCleanDirectBuffers ; <nl> + private static final AtomicReference < FSErrorHandler > fsErrorHandler = new AtomicReference < > ( ) ; <nl> <nl> static <nl> { <nl> @ @ - 395 , 63 + 394 , 16 @ @ public class FileUtils <nl> <nl> public static void handleCorruptSSTable ( CorruptSSTableException e ) <nl> { <nl> - if ( ! StorageService . instance . isSetupCompleted ( ) ) <nl> - handleStartupFSError ( e ) ; <nl> - <nl> - JVMStabilityInspector . inspectThrowable ( e ) ; <nl> - switch ( DatabaseDescriptor . getDiskFailurePolicy ( ) ) <nl> - { <nl> - case stop _ paranoid : <nl> - StorageService . instance . stopTransports ( ) ; <nl> - break ; <nl> - } <nl> - } <nl> - <nl> - public static void handleFSError ( FSError e ) <nl> - { <nl> - if ( ! StorageService . instance . isSetupCompleted ( ) ) <nl> - handleStartupFSError ( e ) ; <nl> - <nl> - JVMStabilityInspector . inspectThrowable ( e ) ; <nl> - switch ( DatabaseDescriptor . getDiskFailurePolicy ( ) ) <nl> - { <nl> - case stop _ paranoid : <nl> - case stop : <nl> - StorageService . instance . stopTransports ( ) ; <nl> - break ; <nl> - case best _ effort : <nl> - / / for both read and write errors mark the path as unwritable . <nl> - BlacklistedDirectories . maybeMarkUnwritable ( e . path ) ; <nl> - if ( e instanceof FSReadError ) <nl> - { <nl> - File directory = BlacklistedDirectories . maybeMarkUnreadable ( e . path ) ; <nl> - if ( directory ! = null ) <nl> - Keyspace . removeUnreadableSSTables ( directory ) ; <nl> - } <nl> - break ; <nl> - case ignore : <nl> - / / already logged , so left nothing to do <nl> - break ; <nl> - default : <nl> - throw new IllegalStateException ( ) ; <nl> - } <nl> + FSErrorHandler handler = fsErrorHandler . get ( ) ; <nl> + if ( handler ! = null ) <nl> + handler . handleCorruptSSTable ( e ) ; <nl> } <nl> <nl> - private static void handleStartupFSError ( Throwable t ) <nl> + public static void handleFSError ( FSError e ) <nl> { <nl> - switch ( DatabaseDescriptor . getDiskFailurePolicy ( ) ) <nl> - { <nl> - case stop _ paranoid : <nl> - case stop : <nl> - case die : <nl> - logger . error ( " Exiting forcefully due to file system exception on startup , disk failure policy \ " { } \ " " , <nl> - DatabaseDescriptor . getDiskFailurePolicy ( ) , <nl> - t ) ; <nl> - JVMStabilityInspector . killCurrentJVM ( t , true ) ; <nl> - break ; <nl> - default : <nl> - break ; <nl> - } <nl> + FSErrorHandler handler = fsErrorHandler . get ( ) ; <nl> + if ( handler ! = null ) <nl> + handler . handleFSError ( e ) ; <nl> } <nl> / * * <nl> * Get the size of a directory in bytes <nl> @ @ - 470 , 4 + 422 , 9 @ @ public class FileUtils <nl> } <nl> return length ; <nl> } <nl> + <nl> + public static void setFSErrorHandler ( FSErrorHandler handler ) <nl> + { <nl> + fsErrorHandler . getAndSet ( handler ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index a27fa20 . . 5a1fb14 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 148 , 6 + 148 , 8 @ @ public class CassandraDaemon <nl> * / <nl> protected void setup ( ) <nl> { <nl> + FileUtils . setFSErrorHandler ( new DefaultFSErrorHandler ( ) ) ; <nl> + <nl> try <nl> { <nl> logger . info ( " Hostname : { } " , InetAddress . getLocalHost ( ) . getHostName ( ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / DefaultFSErrorHandler . java b / src / java / org / apache / cassandra / service / DefaultFSErrorHandler . java <nl> new file mode 100644 <nl> index 0000000 . . 88a1fce <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / service / DefaultFSErrorHandler . java <nl> @ @ - 0 , 0 + 1 , 101 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . db . BlacklistedDirectories ; <nl> + import org . apache . cassandra . db . Keyspace ; <nl> + import org . apache . cassandra . io . FSError ; <nl> + import org . apache . cassandra . io . FSErrorHandler ; <nl> + import org . apache . cassandra . io . FSReadError ; <nl> + import org . apache . cassandra . io . sstable . CorruptSSTableException ; <nl> + import org . apache . cassandra . utils . JVMStabilityInspector ; <nl> + <nl> + public class DefaultFSErrorHandler implements FSErrorHandler <nl> + { <nl> + private static final Logger logger = LoggerFactory . getLogger ( DefaultFSErrorHandler . class ) ; <nl> + <nl> + @ Override <nl> + public void handleCorruptSSTable ( CorruptSSTableException e ) <nl> + { <nl> + if ( ! StorageService . instance . isSetupCompleted ( ) ) <nl> + handleStartupFSError ( e ) ; <nl> + <nl> + JVMStabilityInspector . inspectThrowable ( e ) ; <nl> + switch ( DatabaseDescriptor . getDiskFailurePolicy ( ) ) <nl> + { <nl> + case stop _ paranoid : <nl> + StorageService . instance . stopTransports ( ) ; <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void handleFSError ( FSError e ) <nl> + { <nl> + if ( ! StorageService . instance . isSetupCompleted ( ) ) <nl> + handleStartupFSError ( e ) ; <nl> + <nl> + JVMStabilityInspector . inspectThrowable ( e ) ; <nl> + switch ( DatabaseDescriptor . getDiskFailurePolicy ( ) ) <nl> + { <nl> + case stop _ paranoid : <nl> + case stop : <nl> + StorageService . instance . stopTransports ( ) ; <nl> + break ; <nl> + case best _ effort : <nl> + / / for both read and write errors mark the path as unwritable . <nl> + BlacklistedDirectories . maybeMarkUnwritable ( e . path ) ; <nl> + if ( e instanceof FSReadError ) <nl> + { <nl> + File directory = BlacklistedDirectories . maybeMarkUnreadable ( e . path ) ; <nl> + if ( directory ! = null ) <nl> + Keyspace . removeUnreadableSSTables ( directory ) ; <nl> + } <nl> + break ; <nl> + case ignore : <nl> + / / already logged , so left nothing to do <nl> + break ; <nl> + default : <nl> + throw new IllegalStateException ( ) ; <nl> + } <nl> + } <nl> + <nl> + private static void handleStartupFSError ( Throwable t ) <nl> + { <nl> + switch ( DatabaseDescriptor . getDiskFailurePolicy ( ) ) <nl> + { <nl> + case stop _ paranoid : <nl> + case stop : <nl> + case die : <nl> + logger . error ( " Exiting forcefully due to file system exception on startup , disk failure policy \ " { } \ " " , <nl> + DatabaseDescriptor . getDiskFailurePolicy ( ) , <nl> + t ) ; <nl> + JVMStabilityInspector . killCurrentJVM ( t , true ) ; <nl> + break ; <nl> + default : <nl> + break ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / db / DirectoriesTest . java b / test / unit / org / apache / cassandra / db / DirectoriesTest . java <nl> index b1c51ee . . 4267c1f 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / DirectoriesTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / DirectoriesTest . java <nl> @ @ - 44 , 6 + 44 , 7 @ @ import org . apache . cassandra . db . Directories . DataDirectory ; <nl> import org . apache . cassandra . io . sstable . Component ; <nl> import org . apache . cassandra . io . sstable . Descriptor ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> + import org . apache . cassandra . service . DefaultFSErrorHandler ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . io . FSWriteError ; <nl> <nl> @ @ - 65 , 6 + 66 , 7 @ @ public class DirectoriesTest <nl> @ BeforeClass <nl> public static void beforeClass ( ) throws IOException <nl> { <nl> + FileUtils . setFSErrorHandler ( new DefaultFSErrorHandler ( ) ) ; <nl> for ( String cf : CFS ) <nl> { <nl> CFM . add ( new CFMetaData ( KS , cf , ColumnFamilyType . Standard , null ) ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f73db6e . . ad9d00c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 15 
 + * Backport CASSANDRA - 11578 ( CASSANDRA - 11750 ) 
 * Clear out parent repair session if repair coordinator dies ( CASSANDRA - 11824 ) 
 * Set default streaming _ socket _ timeout _ in _ ms to 24 hours ( CASSANDRA - 11840 ) 
 * Do not consider local node a valid source during replace ( CASSANDRA - 11848 ) 
 diff - - git a / src / java / org / apache / cassandra / io / FSErrorHandler . java b / src / java / org / apache / cassandra / io / FSErrorHandler . java 
 new file mode 100644 
 index 0000000 . . 081ec0b 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / io / FSErrorHandler . java 
 @ @ - 0 , 0 + 1 , 30 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . io ; 
 + 
 + import org . apache . cassandra . io . sstable . CorruptSSTableException ; 
 + 
 + / * * 
 + * Interface for handling file system errors . 
 + * / 
 + public interface FSErrorHandler 
 + { 
 + void handleCorruptSSTable ( CorruptSSTableException e ) ; 
 + void handleFSError ( FSError e ) ; 
 + } 
 diff - - git a / src / java / org / apache / cassandra / io / util / FileUtils . java b / src / java / org / apache / cassandra / io / util / FileUtils . java 
 index 3be7c99 . . f69ed01 100644 
 - - - a / src / java / org / apache / cassandra / io / util / FileUtils . java 
 + + + b / src / java / org / apache / cassandra / io / util / FileUtils . java 
 @ @ - 32 , 6 + 32 , 7 @ @ import java . nio . file . Path ; 
 import java . nio . file . StandardCopyOption ; 
 import java . text . DecimalFormat ; 
 import java . util . Arrays ; 
 + import java . util . concurrent . atomic . AtomicReference ; 
 
 import sun . nio . ch . DirectBuffer ; 
 
 @ @ - 39 , 17 + 40 , 14 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 - import org . apache . cassandra . db . BlacklistedDirectories ; 
 - import org . apache . cassandra . db . Keyspace ; 
 import org . apache . cassandra . io . FSError ; 
 + import org . apache . cassandra . io . FSErrorHandler ; 
 import org . apache . cassandra . io . FSReadError ; 
 import org . apache . cassandra . io . FSWriteError ; 
 import org . apache . cassandra . io . sstable . CorruptSSTableException ; 
 - import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . JVMStabilityInspector ; 
 
 - public class FileUtils 
 + public final class FileUtils 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( FileUtils . class ) ; 
 private static final double KB = 1024d ; 
 @ @ - 59 , 6 + 57 , 7 @ @ public class FileUtils 
 
 private static final DecimalFormat df = new DecimalFormat ( " # . # # " ) ; 
 private static final boolean canCleanDirectBuffers ; 
 + private static final AtomicReference < FSErrorHandler > fsErrorHandler = new AtomicReference < > ( ) ; 
 
 static 
 { 
 @ @ - 395 , 63 + 394 , 16 @ @ public class FileUtils 
 
 public static void handleCorruptSSTable ( CorruptSSTableException e ) 
 { 
 - if ( ! StorageService . instance . isSetupCompleted ( ) ) 
 - handleStartupFSError ( e ) ; 
 - 
 - JVMStabilityInspector . inspectThrowable ( e ) ; 
 - switch ( DatabaseDescriptor . getDiskFailurePolicy ( ) ) 
 - { 
 - case stop _ paranoid : 
 - StorageService . instance . stopTransports ( ) ; 
 - break ; 
 - } 
 - } 
 - 
 - public static void handleFSError ( FSError e ) 
 - { 
 - if ( ! StorageService . instance . isSetupCompleted ( ) ) 
 - handleStartupFSError ( e ) ; 
 - 
 - JVMStabilityInspector . inspectThrowable ( e ) ; 
 - switch ( DatabaseDescriptor . getDiskFailurePolicy ( ) ) 
 - { 
 - case stop _ paranoid : 
 - case stop : 
 - StorageService . instance . stopTransports ( ) ; 
 - break ; 
 - case best _ effort : 
 - / / for both read and write errors mark the path as unwritable . 
 - BlacklistedDirectories . maybeMarkUnwritable ( e . path ) ; 
 - if ( e instanceof FSReadError ) 
 - { 
 - File directory = BlacklistedDirectories . maybeMarkUnreadable ( e . path ) ; 
 - if ( directory ! = null ) 
 - Keyspace . removeUnreadableSSTables ( directory ) ; 
 - } 
 - break ; 
 - case ignore : 
 - / / already logged , so left nothing to do 
 - break ; 
 - default : 
 - throw new IllegalStateException ( ) ; 
 - } 
 + FSErrorHandler handler = fsErrorHandler . get ( ) ; 
 + if ( handler ! = null ) 
 + handler . handleCorruptSSTable ( e ) ; 
 } 
 
 - private static void handleStartupFSError ( Throwable t ) 
 + public static void handleFSError ( FSError e ) 
 { 
 - switch ( DatabaseDescriptor . getDiskFailurePolicy ( ) ) 
 - { 
 - case stop _ paranoid : 
 - case stop : 
 - case die : 
 - logger . error ( " Exiting forcefully due to file system exception on startup , disk failure policy \ " { } \ " " , 
 - DatabaseDescriptor . getDiskFailurePolicy ( ) , 
 - t ) ; 
 - JVMStabilityInspector . killCurrentJVM ( t , true ) ; 
 - break ; 
 - default : 
 - break ; 
 - } 
 + FSErrorHandler handler = fsErrorHandler . get ( ) ; 
 + if ( handler ! = null ) 
 + handler . handleFSError ( e ) ; 
 } 
 / * * 
 * Get the size of a directory in bytes 
 @ @ - 470 , 4 + 422 , 9 @ @ public class FileUtils 
 } 
 return length ; 
 } 
 + 
 + public static void setFSErrorHandler ( FSErrorHandler handler ) 
 + { 
 + fsErrorHandler . getAndSet ( handler ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index a27fa20 . . 5a1fb14 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 148 , 6 + 148 , 8 @ @ public class CassandraDaemon 
 * / 
 protected void setup ( ) 
 { 
 + FileUtils . setFSErrorHandler ( new DefaultFSErrorHandler ( ) ) ; 
 + 
 try 
 { 
 logger . info ( " Hostname : { } " , InetAddress . getLocalHost ( ) . getHostName ( ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / DefaultFSErrorHandler . java b / src / java / org / apache / cassandra / service / DefaultFSErrorHandler . java 
 new file mode 100644 
 index 0000000 . . 88a1fce 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / service / DefaultFSErrorHandler . java 
 @ @ - 0 , 0 + 1 , 101 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . service ; 
 + 
 + import java . io . File ; 
 + 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . db . BlacklistedDirectories ; 
 + import org . apache . cassandra . db . Keyspace ; 
 + import org . apache . cassandra . io . FSError ; 
 + import org . apache . cassandra . io . FSErrorHandler ; 
 + import org . apache . cassandra . io . FSReadError ; 
 + import org . apache . cassandra . io . sstable . CorruptSSTableException ; 
 + import org . apache . cassandra . utils . JVMStabilityInspector ; 
 + 
 + public class DefaultFSErrorHandler implements FSErrorHandler 
 + { 
 + private static final Logger logger = LoggerFactory . getLogger ( DefaultFSErrorHandler . class ) ; 
 + 
 + @ Override 
 + public void handleCorruptSSTable ( CorruptSSTableException e ) 
 + { 
 + if ( ! StorageService . instance . isSetupCompleted ( ) ) 
 + handleStartupFSError ( e ) ; 
 + 
 + JVMStabilityInspector . inspectThrowable ( e ) ; 
 + switch ( DatabaseDescriptor . getDiskFailurePolicy ( ) ) 
 + { 
 + case stop _ paranoid : 
 + StorageService . instance . stopTransports ( ) ; 
 + break ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void handleFSError ( FSError e ) 
 + { 
 + if ( ! StorageService . instance . isSetupCompleted ( ) ) 
 + handleStartupFSError ( e ) ; 
 + 
 + JVMStabilityInspector . inspectThrowable ( e ) ; 
 + switch ( DatabaseDescriptor . getDiskFailurePolicy ( ) ) 
 + { 
 + case stop _ paranoid : 
 + case stop : 
 + StorageService . instance . stopTransports ( ) ; 
 + break ; 
 + case best _ effort : 
 + / / for both read and write errors mark the path as unwritable . 
 + BlacklistedDirectories . maybeMarkUnwritable ( e . path ) ; 
 + if ( e instanceof FSReadError ) 
 + { 
 + File directory = BlacklistedDirectories . maybeMarkUnreadable ( e . path ) ; 
 + if ( directory ! = null ) 
 + Keyspace . removeUnreadableSSTables ( directory ) ; 
 + } 
 + break ; 
 + case ignore : 
 + / / already logged , so left nothing to do 
 + break ; 
 + default : 
 + throw new IllegalStateException ( ) ; 
 + } 
 + } 
 + 
 + private static void handleStartupFSError ( Throwable t ) 
 + { 
 + switch ( DatabaseDescriptor . getDiskFailurePolicy ( ) ) 
 + { 
 + case stop _ paranoid : 
 + case stop : 
 + case die : 
 + logger . error ( " Exiting forcefully due to file system exception on startup , disk failure policy \ " { } \ " " , 
 + DatabaseDescriptor . getDiskFailurePolicy ( ) , 
 + t ) ; 
 + JVMStabilityInspector . killCurrentJVM ( t , true ) ; 
 + break ; 
 + default : 
 + break ; 
 + } 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / db / DirectoriesTest . java b / test / unit / org / apache / cassandra / db / DirectoriesTest . java 
 index b1c51ee . . 4267c1f 100644 
 - - - a / test / unit / org / apache / cassandra / db / DirectoriesTest . java 
 + + + b / test / unit / org / apache / cassandra / db / DirectoriesTest . java 
 @ @ - 44 , 6 + 44 , 7 @ @ import org . apache . cassandra . db . Directories . DataDirectory ; 
 import org . apache . cassandra . io . sstable . Component ; 
 import org . apache . cassandra . io . sstable . Descriptor ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 + import org . apache . cassandra . service . DefaultFSErrorHandler ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . io . FSWriteError ; 
 
 @ @ - 65 , 6 + 66 , 7 @ @ public class DirectoriesTest 
 @ BeforeClass 
 public static void beforeClass ( ) throws IOException 
 { 
 + FileUtils . setFSErrorHandler ( new DefaultFSErrorHandler ( ) ) ; 
 for ( String cf : CFS ) 
 { 
 CFM . add ( new CFMetaData ( KS , cf , ColumnFamilyType . Standard , null ) ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
