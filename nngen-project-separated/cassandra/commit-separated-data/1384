BLEU SCORE: 0.03772691894380681

TEST MSG: Fix LeveledCompactionStrategyTest on Windows
GENERATED MSG: Add test for triggers which throw IRE

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java b / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java <nl> index c7935fe . . ccfc6ab 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java <nl> @ @ - 28 , 12 + 28 , 16 @ @ import java . util . Random ; <nl> import java . util . UUID ; <nl> <nl> import org . apache . cassandra . io . sstable . format . SSTableReader ; <nl> + import junit . framework . Assert ; <nl> import org . junit . After ; <nl> import org . junit . Before ; <nl> import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> import org . apache . cassandra . OrderedJUnit4ClassRunner ; <nl> import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . Util ; <nl> @ @ - 61 , 6 + 65 , 8 @ @ import static org . junit . Assert . assertTrue ; <nl> @ RunWith ( OrderedJUnit4ClassRunner . class ) <nl> public class LeveledCompactionStrategyTest <nl> { <nl> + private static final Logger logger = LoggerFactory . getLogger ( LeveledCompactionStrategyTest . class ) ; <nl> + <nl> private static final String KEYSPACE1 = " LeveledCompactionStrategyTest " ; <nl> private static final String CF _ STANDARDDLEVELED = " StandardLeveled " ; <nl> private Keyspace keyspace ; <nl> @ @ - 108 , 8 + 114 , 8 @ @ public class LeveledCompactionStrategyTest <nl> new Random ( ) . nextBytes ( value . array ( ) ) ; <nl> <nl> / / Enough data to have a level 1 and 2 <nl> - int rows = 20 ; <nl> - int columns = 10 ; <nl> + int rows = 40 ; <nl> + int columns = 20 ; <nl> <nl> / / Adds enough data to trigger multiple sstable per level <nl> for ( int r = 0 ; r < rows ; r + + ) <nl> @ @ - 127 , 8 + 133 , 15 @ @ public class LeveledCompactionStrategyTest <nl> waitForLeveling ( cfs ) ; <nl> WrappingCompactionStrategy strategy = ( WrappingCompactionStrategy ) cfs . getCompactionStrategy ( ) ; <nl> / / Checking we ' re not completely bad at math <nl> - assert strategy . getSSTableCountPerLevel ( ) [ 1 ] > 0 ; <nl> - assert strategy . getSSTableCountPerLevel ( ) [ 2 ] > 0 ; <nl> + int l1Count = strategy . getSSTableCountPerLevel ( ) [ 1 ] ; <nl> + int l2Count = strategy . getSSTableCountPerLevel ( ) [ 2 ] ; <nl> + if ( l1Count = = 0 | | l2Count = = 0 ) <nl> + { <nl> + logger . error ( " L1 or L2 has 0 sstables . Expected > 0 on both . " ) ; <nl> + logger . error ( " L1 : " + l1Count ) ; <nl> + logger . error ( " L2 : " + l2Count ) ; <nl> + Assert . fail ( ) ; <nl> + } <nl> <nl> Collection < Collection < SSTableReader > > groupedSSTables = cfs . getCompactionStrategy ( ) . groupSSTablesForAntiCompaction ( cfs . getSSTables ( ) ) ; <nl> for ( Collection < SSTableReader > sstableGroup : groupedSSTables )
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java b / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java 
 index c7935fe . . ccfc6ab 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java 
 @ @ - 28 , 12 + 28 , 16 @ @ import java . util . Random ; 
 import java . util . UUID ; 
 
 import org . apache . cassandra . io . sstable . format . SSTableReader ; 
 + import junit . framework . Assert ; 
 import org . junit . After ; 
 import org . junit . Before ; 
 import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 import org . apache . cassandra . OrderedJUnit4ClassRunner ; 
 import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . Util ; 
 @ @ - 61 , 6 + 65 , 8 @ @ import static org . junit . Assert . assertTrue ; 
 @ RunWith ( OrderedJUnit4ClassRunner . class ) 
 public class LeveledCompactionStrategyTest 
 { 
 + private static final Logger logger = LoggerFactory . getLogger ( LeveledCompactionStrategyTest . class ) ; 
 + 
 private static final String KEYSPACE1 = " LeveledCompactionStrategyTest " ; 
 private static final String CF _ STANDARDDLEVELED = " StandardLeveled " ; 
 private Keyspace keyspace ; 
 @ @ - 108 , 8 + 114 , 8 @ @ public class LeveledCompactionStrategyTest 
 new Random ( ) . nextBytes ( value . array ( ) ) ; 
 
 / / Enough data to have a level 1 and 2 
 - int rows = 20 ; 
 - int columns = 10 ; 
 + int rows = 40 ; 
 + int columns = 20 ; 
 
 / / Adds enough data to trigger multiple sstable per level 
 for ( int r = 0 ; r < rows ; r + + ) 
 @ @ - 127 , 8 + 133 , 15 @ @ public class LeveledCompactionStrategyTest 
 waitForLeveling ( cfs ) ; 
 WrappingCompactionStrategy strategy = ( WrappingCompactionStrategy ) cfs . getCompactionStrategy ( ) ; 
 / / Checking we ' re not completely bad at math 
 - assert strategy . getSSTableCountPerLevel ( ) [ 1 ] > 0 ; 
 - assert strategy . getSSTableCountPerLevel ( ) [ 2 ] > 0 ; 
 + int l1Count = strategy . getSSTableCountPerLevel ( ) [ 1 ] ; 
 + int l2Count = strategy . getSSTableCountPerLevel ( ) [ 2 ] ; 
 + if ( l1Count = = 0 | | l2Count = = 0 ) 
 + { 
 + logger . error ( " L1 or L2 has 0 sstables . Expected > 0 on both . " ) ; 
 + logger . error ( " L1 : " + l1Count ) ; 
 + logger . error ( " L2 : " + l2Count ) ; 
 + Assert . fail ( ) ; 
 + } 
 
 Collection < Collection < SSTableReader > > groupedSSTables = cfs . getCompactionStrategy ( ) . groupSSTablesForAntiCompaction ( cfs . getSSTables ( ) ) ; 
 for ( Collection < SSTableReader > sstableGroup : groupedSSTables )

NEAREST DIFF:
ELIMINATEDSENTENCE
