BLEU SCORE: 0.020980574531482755

TEST MSG: Make sure we cancel non - compacting sstables from LifecycleTransaction
GENERATED MSG: Fix AE when SSTable is closed without releasing reference

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 04bbd84 . . b94279b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 <nl> + * Make sure we cancel non - compacting sstables from LifecycleTransaction ( CASSANDRA - 9566 ) <nl> * Compressed commit log should measure compressed space used ( CASSANDRA - 9095 ) <nl> * Fix comparison bug in CassandraRoleManager # collectRoles ( CASSANDRA - 9551 ) <nl> * Add tinyint , smallint , time , date support for UDFs ( CASSANDRA - 9400 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 865bac9 . . ce54fb2 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 2595 , 8 + 2595 , 6 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> assert data . getCompacting ( ) . isEmpty ( ) : data . getCompacting ( ) ; <nl> Collection < SSTableReader > sstables = Lists . newArrayList ( AbstractCompactionStrategy . filterSuspectSSTables ( getSSTables ( ) ) ) ; <nl> - if ( Iterables . isEmpty ( sstables ) ) <nl> - return null ; <nl> LifecycleTransaction modifier = data . tryModify ( sstables , operationType ) ; <nl> assert modifier ! = null : " something marked things compacting while compactions are disabled " ; <nl> return modifier ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index a2783da . . 46a59db 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 251 , 21 + 251 , 15 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> try ( LifecycleTransaction compacting = cfs . markAllCompacting ( operationType ) ; ) <nl> { <nl> - if ( compacting = = null ) <nl> - { <nl> - logger . info ( " Aborting operation on { } . { } after failing to interrupt other compaction operations " , cfs . keyspace . getName ( ) , cfs . name ) ; <nl> - return AllSSTableOpStatus . ABORTED ; <nl> - } <nl> - if ( compacting . originals ( ) . isEmpty ( ) ) <nl> + Iterable < SSTableReader > sstables = Lists . newArrayList ( operation . filterSSTables ( compacting ) ) ; <nl> + if ( Iterables . isEmpty ( sstables ) ) <nl> { <nl> logger . info ( " No sstables for { } . { } " , cfs . keyspace . getName ( ) , cfs . name ) ; <nl> return AllSSTableOpStatus . SUCCESSFUL ; <nl> } <nl> <nl> - Iterable < SSTableReader > sstables = operation . filterSSTables ( compacting . originals ( ) ) ; <nl> List < Pair < LifecycleTransaction , Future < Object > > > futures = new ArrayList < > ( ) ; <nl> <nl> - <nl> for ( final SSTableReader sstable : sstables ) <nl> { <nl> if ( executor . isShutdown ( ) ) <nl> @ @ - 320 , 7 + 314 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> <nl> private static interface OneSSTableOperation <nl> { <nl> - Iterable < SSTableReader > filterSSTables ( Iterable < SSTableReader > input ) ; <nl> + Iterable < SSTableReader > filterSSTables ( LifecycleTransaction transaction ) ; <nl> void execute ( LifecycleTransaction input ) throws IOException ; <nl> } <nl> <nl> @ @ - 338 , 9 + 332 , 9 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return parallelAllSSTableOperation ( cfs , new OneSSTableOperation ( ) <nl> { <nl> @ Override <nl> - public Iterable < SSTableReader > filterSSTables ( Iterable < SSTableReader > input ) <nl> + public Iterable < SSTableReader > filterSSTables ( LifecycleTransaction input ) <nl> { <nl> - return input ; <nl> + return input . originals ( ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 357 , 9 + 351 , 9 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return parallelAllSSTableOperation ( cfs , new OneSSTableOperation ( ) <nl> { <nl> @ Override <nl> - public Iterable < SSTableReader > filterSSTables ( Iterable < SSTableReader > input ) <nl> + public Iterable < SSTableReader > filterSSTables ( LifecycleTransaction input ) <nl> { <nl> - return input ; <nl> + return input . originals ( ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 375 , 16 + 369 , 20 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return parallelAllSSTableOperation ( cfs , new OneSSTableOperation ( ) <nl> { <nl> @ Override <nl> - public Iterable < SSTableReader > filterSSTables ( Iterable < SSTableReader > input ) <nl> + public Iterable < SSTableReader > filterSSTables ( LifecycleTransaction transaction ) <nl> { <nl> - return Iterables . filter ( input , new Predicate < SSTableReader > ( ) <nl> + Iterable < SSTableReader > sstables = new ArrayList < > ( transaction . originals ( ) ) ; <nl> + Iterator < SSTableReader > iter = sstables . iterator ( ) ; <nl> + while ( iter . hasNext ( ) ) <nl> { <nl> - @ Override <nl> - public boolean apply ( SSTableReader sstable ) <nl> + SSTableReader sstable = iter . next ( ) ; <nl> + if ( excludeCurrentVersion & & sstable . descriptor . version . equals ( sstable . descriptor . getFormat ( ) . getLatestVersion ( ) ) ) <nl> { <nl> - return ! ( excludeCurrentVersion & & sstable . descriptor . version . equals ( sstable . descriptor . getFormat ( ) . getLatestVersion ( ) ) ) ; <nl> + transaction . cancel ( sstable ) ; <nl> + iter . remove ( ) ; <nl> } <nl> - } ) ; <nl> + } <nl> + return sstables ; <nl> } <nl> <nl> @ Override <nl> @ @ - 413 , 9 + 411 , 9 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return parallelAllSSTableOperation ( cfStore , new OneSSTableOperation ( ) <nl> { <nl> @ Override <nl> - public Iterable < SSTableReader > filterSSTables ( Iterable < SSTableReader > input ) <nl> + public Iterable < SSTableReader > filterSSTables ( LifecycleTransaction transaction ) <nl> { <nl> - List < SSTableReader > sortedSSTables = Lists . newArrayList ( input ) ; <nl> + List < SSTableReader > sortedSSTables = Lists . newArrayList ( transaction . originals ( ) ) ; <nl> Collections . sort ( sortedSSTables , new SSTableReader . SizeComparator ( ) ) ; <nl> return sortedSSTables ; <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 04bbd84 . . b94279b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 
 + * Make sure we cancel non - compacting sstables from LifecycleTransaction ( CASSANDRA - 9566 ) 
 * Compressed commit log should measure compressed space used ( CASSANDRA - 9095 ) 
 * Fix comparison bug in CassandraRoleManager # collectRoles ( CASSANDRA - 9551 ) 
 * Add tinyint , smallint , time , date support for UDFs ( CASSANDRA - 9400 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 865bac9 . . ce54fb2 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 2595 , 8 + 2595 , 6 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 assert data . getCompacting ( ) . isEmpty ( ) : data . getCompacting ( ) ; 
 Collection < SSTableReader > sstables = Lists . newArrayList ( AbstractCompactionStrategy . filterSuspectSSTables ( getSSTables ( ) ) ) ; 
 - if ( Iterables . isEmpty ( sstables ) ) 
 - return null ; 
 LifecycleTransaction modifier = data . tryModify ( sstables , operationType ) ; 
 assert modifier ! = null : " something marked things compacting while compactions are disabled " ; 
 return modifier ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index a2783da . . 46a59db 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 251 , 21 + 251 , 15 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 try ( LifecycleTransaction compacting = cfs . markAllCompacting ( operationType ) ; ) 
 { 
 - if ( compacting = = null ) 
 - { 
 - logger . info ( " Aborting operation on { } . { } after failing to interrupt other compaction operations " , cfs . keyspace . getName ( ) , cfs . name ) ; 
 - return AllSSTableOpStatus . ABORTED ; 
 - } 
 - if ( compacting . originals ( ) . isEmpty ( ) ) 
 + Iterable < SSTableReader > sstables = Lists . newArrayList ( operation . filterSSTables ( compacting ) ) ; 
 + if ( Iterables . isEmpty ( sstables ) ) 
 { 
 logger . info ( " No sstables for { } . { } " , cfs . keyspace . getName ( ) , cfs . name ) ; 
 return AllSSTableOpStatus . SUCCESSFUL ; 
 } 
 
 - Iterable < SSTableReader > sstables = operation . filterSSTables ( compacting . originals ( ) ) ; 
 List < Pair < LifecycleTransaction , Future < Object > > > futures = new ArrayList < > ( ) ; 
 
 - 
 for ( final SSTableReader sstable : sstables ) 
 { 
 if ( executor . isShutdown ( ) ) 
 @ @ - 320 , 7 + 314 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 
 private static interface OneSSTableOperation 
 { 
 - Iterable < SSTableReader > filterSSTables ( Iterable < SSTableReader > input ) ; 
 + Iterable < SSTableReader > filterSSTables ( LifecycleTransaction transaction ) ; 
 void execute ( LifecycleTransaction input ) throws IOException ; 
 } 
 
 @ @ - 338 , 9 + 332 , 9 @ @ public class CompactionManager implements CompactionManagerMBean 
 return parallelAllSSTableOperation ( cfs , new OneSSTableOperation ( ) 
 { 
 @ Override 
 - public Iterable < SSTableReader > filterSSTables ( Iterable < SSTableReader > input ) 
 + public Iterable < SSTableReader > filterSSTables ( LifecycleTransaction input ) 
 { 
 - return input ; 
 + return input . originals ( ) ; 
 } 
 
 @ Override 
 @ @ - 357 , 9 + 351 , 9 @ @ public class CompactionManager implements CompactionManagerMBean 
 return parallelAllSSTableOperation ( cfs , new OneSSTableOperation ( ) 
 { 
 @ Override 
 - public Iterable < SSTableReader > filterSSTables ( Iterable < SSTableReader > input ) 
 + public Iterable < SSTableReader > filterSSTables ( LifecycleTransaction input ) 
 { 
 - return input ; 
 + return input . originals ( ) ; 
 } 
 
 @ Override 
 @ @ - 375 , 16 + 369 , 20 @ @ public class CompactionManager implements CompactionManagerMBean 
 return parallelAllSSTableOperation ( cfs , new OneSSTableOperation ( ) 
 { 
 @ Override 
 - public Iterable < SSTableReader > filterSSTables ( Iterable < SSTableReader > input ) 
 + public Iterable < SSTableReader > filterSSTables ( LifecycleTransaction transaction ) 
 { 
 - return Iterables . filter ( input , new Predicate < SSTableReader > ( ) 
 + Iterable < SSTableReader > sstables = new ArrayList < > ( transaction . originals ( ) ) ; 
 + Iterator < SSTableReader > iter = sstables . iterator ( ) ; 
 + while ( iter . hasNext ( ) ) 
 { 
 - @ Override 
 - public boolean apply ( SSTableReader sstable ) 
 + SSTableReader sstable = iter . next ( ) ; 
 + if ( excludeCurrentVersion & & sstable . descriptor . version . equals ( sstable . descriptor . getFormat ( ) . getLatestVersion ( ) ) ) 
 { 
 - return ! ( excludeCurrentVersion & & sstable . descriptor . version . equals ( sstable . descriptor . getFormat ( ) . getLatestVersion ( ) ) ) ; 
 + transaction . cancel ( sstable ) ; 
 + iter . remove ( ) ; 
 } 
 - } ) ; 
 + } 
 + return sstables ; 
 } 
 
 @ Override 
 @ @ - 413 , 9 + 411 , 9 @ @ public class CompactionManager implements CompactionManagerMBean 
 return parallelAllSSTableOperation ( cfStore , new OneSSTableOperation ( ) 
 { 
 @ Override 
 - public Iterable < SSTableReader > filterSSTables ( Iterable < SSTableReader > input ) 
 + public Iterable < SSTableReader > filterSSTables ( LifecycleTransaction transaction ) 
 { 
 - List < SSTableReader > sortedSSTables = Lists . newArrayList ( input ) ; 
 + List < SSTableReader > sortedSSTables = Lists . newArrayList ( transaction . originals ( ) ) ; 
 Collections . sort ( sortedSSTables , new SSTableReader . SizeComparator ( ) ) ; 
 return sortedSSTables ; 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
