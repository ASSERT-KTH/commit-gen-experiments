BLEU SCORE: 0.5169731539571706

TEST MSG: Revert " Simplify row cache invalidation code "
GENERATED MSG: Simplify row cache invalidation code

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index b112e0e . . d553f4d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1226 , 7 + 1226 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> return String . format ( " % . 2f / % . 2f " , onHeap , offHeap ) ; <nl> } <nl> <nl> - public void maybeInvalidateCachedRow ( DecoratedKey key ) <nl> + public void maybeUpdateRowCache ( DecoratedKey key ) <nl> { <nl> if ( ! isRowCacheEnabled ( ) ) <nl> return ; <nl> @ @ - 1247 , 7 + 1247 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> long start = System . nanoTime ( ) ; <nl> Memtable mt = data . getMemtableFor ( opGroup , replayPosition ) ; <nl> final long timeDelta = mt . put ( key , columnFamily , indexer , opGroup ) ; <nl> - maybeInvalidateCachedRow ( key ) ; <nl> + maybeUpdateRowCache ( key ) ; <nl> metric . samplers . get ( Sampler . WRITES ) . addSample ( key . getKey ( ) , key . hashCode ( ) , 1 ) ; <nl> metric . writeLatency . addNano ( System . nanoTime ( ) - start ) ; <nl> if ( timeDelta < Long . MAX _ VALUE ) <nl> @ @ - 2047 , 7 + 2047 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> RowCacheKey key = keyIter . next ( ) ; <nl> DecoratedKey dk = partitioner . decorateKey ( ByteBuffer . wrap ( key . key ) ) ; <nl> if ( key . ksAndCFName . equals ( metadata . ksAndCFName ) & & ! Range . isInRanges ( dk . getToken ( ) , ranges ) ) <nl> - maybeInvalidateCachedRow ( dk ) ; <nl> + invalidateCachedRow ( dk ) ; <nl> } <nl> <nl> if ( metadata . isCounter ( ) ) <nl> @ @ - 2532 , 6 + 2532 , 15 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> CacheService . instance . rowCache . remove ( key ) ; <nl> } <nl> <nl> + public void invalidateCachedRow ( DecoratedKey key ) <nl> + { <nl> + UUID cfId = Schema . instance . getId ( keyspace . getName ( ) , this . name ) ; <nl> + if ( cfId = = null ) <nl> + return ; / / secondary index <nl> + <nl> + invalidateCachedRow ( new RowCacheKey ( metadata . ksAndCFName , key ) ) ; <nl> + } <nl> + <nl> public ClockAndCount getCachedCounter ( ByteBuffer partitionKey , CellName cellName ) <nl> { <nl> if ( CacheService . instance . counterCache . getCapacity ( ) = = 0L ) / / counter cache disabled . <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionController . java b / src / java / org / apache / cassandra / db / compaction / CompactionController . java <nl> index 24ef843 . . 5f0a198 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionController . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionController . java <nl> @ @ - 24 , 6 + 24 , 8 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . db . lifecycle . SSTableIntervalTree ; <nl> + import org . apache . cassandra . db . lifecycle . Tracker ; <nl> import org . apache . cassandra . db . DecoratedKey ; <nl> import org . apache . cassandra . db . RowPosition ; <nl> import org . apache . cassandra . utils . AlwaysPresentFilter ; <nl> @ @ - 189 , 7 + 191 , 7 @ @ public class CompactionController implements AutoCloseable <nl> <nl> public void invalidateCachedRow ( DecoratedKey key ) <nl> { <nl> - cfs . maybeInvalidateCachedRow ( key ) ; <nl> + cfs . invalidateCachedRow ( key ) ; <nl> } <nl> <nl> public void close ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index 8537aca . . 0c6e24f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 934 , 7 + 934 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> if ( Range . isInRanges ( row . getKey ( ) . getToken ( ) , ranges ) ) <nl> return row ; <nl> <nl> - cfs . maybeInvalidateCachedRow ( row . getKey ( ) ) ; <nl> + cfs . invalidateCachedRow ( row . getKey ( ) ) ; <nl> <nl> if ( indexedColumnsInRow ! = null ) <nl> indexedColumnsInRow . clear ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java <nl> index b08b038 . . dc4fe75 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . io . sstable ; <nl> import java . util . * ; <nl> <nl> import com . google . common . annotations . VisibleForTesting ; <nl> + import com . google . common . util . concurrent . Runnables ; <nl> <nl> import org . apache . cassandra . cache . InstrumentingCache ; <nl> import org . apache . cassandra . cache . KeyCacheKey ; <nl> @ @ - 118 , 7 + 119 , 7 @ @ public class SSTableRewriter extends Transactional . AbstractTransactional impleme <nl> { <nl> if ( index = = null ) <nl> { <nl> - cfs . maybeInvalidateCachedRow ( row . key ) ; <nl> + cfs . invalidateCachedRow ( row . key ) ; <nl> } <nl> else <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamReader . java b / src / java / org / apache / cassandra / streaming / StreamReader . java <nl> index 88591da . . 1ccebb0 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamReader . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamReader . java <nl> @ @ - 171 , 6 + 171 , 6 @ @ public class StreamReader <nl> { <nl> DecoratedKey key = StorageService . getPartitioner ( ) . decorateKey ( ByteBufferUtil . readWithShortLength ( in ) ) ; <nl> writer . appendFromStream ( key , cfs . metadata , in , inputVersion ) ; <nl> - cfs . maybeInvalidateCachedRow ( key ) ; <nl> + cfs . invalidateCachedRow ( key ) ; <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / RowCacheTest . java b / test / unit / org / apache / cassandra / db / RowCacheTest . java <nl> index 69c831d . . 5912d7c 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RowCacheTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RowCacheTest . java <nl> @ @ - 133 , 7 + 133 , 7 @ @ public class RowCacheTest <nl> int keysLeft = 109 ; <nl> for ( int i = 109 ; i > = 10 ; i - - ) <nl> { <nl> - cachedStore . maybeInvalidateCachedRow ( Util . dk ( " key " + i ) ) ; <nl> + cachedStore . invalidateCachedRow ( Util . dk ( " key " + i ) ) ; <nl> assert CacheService . instance . rowCache . size ( ) = = keysLeft ; <nl> keysLeft - - ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionsPurgeTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionsPurgeTest . java <nl> index bfe8042 . . e5baab6 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / CompactionsPurgeTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionsPurgeTest . java <nl> @ @ - 127 , 7 + 127 , 7 @ @ public class CompactionsPurgeTest <nl> <nl> / / major compact and test that all columns but the resurrected one is completely gone <nl> FBUtilities . waitOnFutures ( CompactionManager . instance . submitMaximal ( cfs , Integer . MAX _ VALUE , false ) ) ; <nl> - cfs . maybeInvalidateCachedRow ( key ) ; <nl> + cfs . invalidateCachedRow ( key ) ; <nl> ColumnFamily cf = cfs . getColumnFamily ( QueryFilter . getIdentityFilter ( key , cfName , System . currentTimeMillis ( ) ) ) ; <nl> assertColumns ( cf , " 5 " ) ; <nl> assertNotNull ( cf . getColumn ( cellname ( String . valueOf ( 5 ) ) ) ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index b112e0e . . d553f4d 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1226 , 7 + 1226 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 return String . format ( " % . 2f / % . 2f " , onHeap , offHeap ) ; 
 } 
 
 - public void maybeInvalidateCachedRow ( DecoratedKey key ) 
 + public void maybeUpdateRowCache ( DecoratedKey key ) 
 { 
 if ( ! isRowCacheEnabled ( ) ) 
 return ; 
 @ @ - 1247 , 7 + 1247 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 long start = System . nanoTime ( ) ; 
 Memtable mt = data . getMemtableFor ( opGroup , replayPosition ) ; 
 final long timeDelta = mt . put ( key , columnFamily , indexer , opGroup ) ; 
 - maybeInvalidateCachedRow ( key ) ; 
 + maybeUpdateRowCache ( key ) ; 
 metric . samplers . get ( Sampler . WRITES ) . addSample ( key . getKey ( ) , key . hashCode ( ) , 1 ) ; 
 metric . writeLatency . addNano ( System . nanoTime ( ) - start ) ; 
 if ( timeDelta < Long . MAX _ VALUE ) 
 @ @ - 2047 , 7 + 2047 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 RowCacheKey key = keyIter . next ( ) ; 
 DecoratedKey dk = partitioner . decorateKey ( ByteBuffer . wrap ( key . key ) ) ; 
 if ( key . ksAndCFName . equals ( metadata . ksAndCFName ) & & ! Range . isInRanges ( dk . getToken ( ) , ranges ) ) 
 - maybeInvalidateCachedRow ( dk ) ; 
 + invalidateCachedRow ( dk ) ; 
 } 
 
 if ( metadata . isCounter ( ) ) 
 @ @ - 2532 , 6 + 2532 , 15 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 CacheService . instance . rowCache . remove ( key ) ; 
 } 
 
 + public void invalidateCachedRow ( DecoratedKey key ) 
 + { 
 + UUID cfId = Schema . instance . getId ( keyspace . getName ( ) , this . name ) ; 
 + if ( cfId = = null ) 
 + return ; / / secondary index 
 + 
 + invalidateCachedRow ( new RowCacheKey ( metadata . ksAndCFName , key ) ) ; 
 + } 
 + 
 public ClockAndCount getCachedCounter ( ByteBuffer partitionKey , CellName cellName ) 
 { 
 if ( CacheService . instance . counterCache . getCapacity ( ) = = 0L ) / / counter cache disabled . 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionController . java b / src / java / org / apache / cassandra / db / compaction / CompactionController . java 
 index 24ef843 . . 5f0a198 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionController . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionController . java 
 @ @ - 24 , 6 + 24 , 8 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . db . lifecycle . SSTableIntervalTree ; 
 + import org . apache . cassandra . db . lifecycle . Tracker ; 
 import org . apache . cassandra . db . DecoratedKey ; 
 import org . apache . cassandra . db . RowPosition ; 
 import org . apache . cassandra . utils . AlwaysPresentFilter ; 
 @ @ - 189 , 7 + 191 , 7 @ @ public class CompactionController implements AutoCloseable 
 
 public void invalidateCachedRow ( DecoratedKey key ) 
 { 
 - cfs . maybeInvalidateCachedRow ( key ) ; 
 + cfs . invalidateCachedRow ( key ) ; 
 } 
 
 public void close ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index 8537aca . . 0c6e24f 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 934 , 7 + 934 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 if ( Range . isInRanges ( row . getKey ( ) . getToken ( ) , ranges ) ) 
 return row ; 
 
 - cfs . maybeInvalidateCachedRow ( row . getKey ( ) ) ; 
 + cfs . invalidateCachedRow ( row . getKey ( ) ) ; 
 
 if ( indexedColumnsInRow ! = null ) 
 indexedColumnsInRow . clear ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java 
 index b08b038 . . dc4fe75 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . io . sstable ; 
 import java . util . * ; 
 
 import com . google . common . annotations . VisibleForTesting ; 
 + import com . google . common . util . concurrent . Runnables ; 
 
 import org . apache . cassandra . cache . InstrumentingCache ; 
 import org . apache . cassandra . cache . KeyCacheKey ; 
 @ @ - 118 , 7 + 119 , 7 @ @ public class SSTableRewriter extends Transactional . AbstractTransactional impleme 
 { 
 if ( index = = null ) 
 { 
 - cfs . maybeInvalidateCachedRow ( row . key ) ; 
 + cfs . invalidateCachedRow ( row . key ) ; 
 } 
 else 
 { 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamReader . java b / src / java / org / apache / cassandra / streaming / StreamReader . java 
 index 88591da . . 1ccebb0 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamReader . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamReader . java 
 @ @ - 171 , 6 + 171 , 6 @ @ public class StreamReader 
 { 
 DecoratedKey key = StorageService . getPartitioner ( ) . decorateKey ( ByteBufferUtil . readWithShortLength ( in ) ) ; 
 writer . appendFromStream ( key , cfs . metadata , in , inputVersion ) ; 
 - cfs . maybeInvalidateCachedRow ( key ) ; 
 + cfs . invalidateCachedRow ( key ) ; 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / RowCacheTest . java b / test / unit / org / apache / cassandra / db / RowCacheTest . java 
 index 69c831d . . 5912d7c 100644 
 - - - a / test / unit / org / apache / cassandra / db / RowCacheTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RowCacheTest . java 
 @ @ - 133 , 7 + 133 , 7 @ @ public class RowCacheTest 
 int keysLeft = 109 ; 
 for ( int i = 109 ; i > = 10 ; i - - ) 
 { 
 - cachedStore . maybeInvalidateCachedRow ( Util . dk ( " key " + i ) ) ; 
 + cachedStore . invalidateCachedRow ( Util . dk ( " key " + i ) ) ; 
 assert CacheService . instance . rowCache . size ( ) = = keysLeft ; 
 keysLeft - - ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionsPurgeTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionsPurgeTest . java 
 index bfe8042 . . e5baab6 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / CompactionsPurgeTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionsPurgeTest . java 
 @ @ - 127 , 7 + 127 , 7 @ @ public class CompactionsPurgeTest 
 
 / / major compact and test that all columns but the resurrected one is completely gone 
 FBUtilities . waitOnFutures ( CompactionManager . instance . submitMaximal ( cfs , Integer . MAX _ VALUE , false ) ) ; 
 - cfs . maybeInvalidateCachedRow ( key ) ; 
 + cfs . invalidateCachedRow ( key ) ; 
 ColumnFamily cf = cfs . getColumnFamily ( QueryFilter . getIdentityFilter ( key , cfName , System . currentTimeMillis ( ) ) ) ; 
 assertColumns ( cf , " 5 " ) ; 
 assertNotNull ( cf . getColumn ( cellname ( String . valueOf ( 5 ) ) ) ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
