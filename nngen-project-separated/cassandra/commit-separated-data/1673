BLEU SCORE: 0.03283637368030199

TEST MSG: Fix anticompaction blocking ANTI _ ENTROPY stage
GENERATED MSG: Wait for all repair sessions to finish

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 627cc6b . . a6e4e41 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 6 , 6 + 6 , 7 @ @ <nl> * Update tuple and collection types that use a user - defined type when that UDT <nl> is modified ( CASSANDRA - 9148 , CASSANDRA - 9192 ) <nl> * Use higher timeout for prepair and snapshot in repair ( CASSANDRA - 9261 ) <nl> + * Fix anticompaction blocking ANTI _ ENTROPY stage ( CASSANDRA - 9151 ) <nl> Merged from 2 . 0 : <nl> * Fix index selection during rebuild with certain table layouts ( CASSANDRA - 9281 ) <nl> * Fix partition - level - delete - only workload accounting ( CASSANDRA - 9194 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index 72deb21 . . 7215945 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 50 , 8 + 50 , 7 @ @ import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Multimap ; <nl> import com . google . common . collect . Multiset ; <nl> import com . google . common . collect . Sets ; <nl> - import com . google . common . util . concurrent . Futures ; <nl> - import com . google . common . util . concurrent . RateLimiter ; <nl> + import com . google . common . util . concurrent . * ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 387 , 7 + 386 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> } ) ; <nl> } <nl> <nl> - public Future < ? > submitAntiCompaction ( final ColumnFamilyStore cfs , <nl> + public ListenableFuture < ? > submitAntiCompaction ( final ColumnFamilyStore cfs , <nl> final Collection < Range < Token > > ranges , <nl> final Refs < SSTableReader > sstables , <nl> final long repairedAt ) <nl> @ @ - 417 , 7 + 416 , 9 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return Futures . immediateCancelledFuture ( ) ; <nl> } <nl> <nl> - return executor . submit ( runnable ) ; <nl> + ListenableFutureTask < ? > task = ListenableFutureTask . create ( runnable , null ) ; <nl> + executor . submit ( task ) ; <nl> + return task ; <nl> } <nl> <nl> / * * <nl> @ @ - 483 , 7 + 484 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> cfs . getDataTracker ( ) . unmarkCompacting ( sstables ) ; <nl> } <nl> <nl> - logger . info ( String . format ( " Completed anticompaction successfully " ) ) ; <nl> + logger . info ( " Completed anticompaction successfully " ) ; <nl> } <nl> <nl> public void performMaximal ( final ColumnFamilyStore cfStore ) throws InterruptedException , ExecutionException <nl> diff - - git a / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java b / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java <nl> index c7cf4c8 . . 5b25afa 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java <nl> + + + b / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java <nl> @ @ - 112 , 20 + 112 , 7 @ @ public class RepairMessageVerbHandler implements IVerbHandler < RepairMessage > <nl> case ANTICOMPACTION _ REQUEST : <nl> logger . debug ( " Got anticompaction request " ) ; <nl> AnticompactionRequest anticompactionRequest = ( AnticompactionRequest ) message . payload ; <nl> - try <nl> - { <nl> - List < Future < ? > > futures = ActiveRepairService . instance . doAntiCompaction ( anticompactionRequest . parentRepairSession ) ; <nl> - FBUtilities . waitOnFutures ( futures ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - finally <nl> - { <nl> - ActiveRepairService . instance . removeParentRepairSession ( anticompactionRequest . parentRepairSession ) ; <nl> - } <nl> - <nl> + ActiveRepairService . instance . doAntiCompaction ( anticompactionRequest . parentRepairSession ) ; <nl> break ; <nl> <nl> default : <nl> diff - - git a / src / java / org / apache / cassandra / service / ActiveRepairService . java b / src / java / org / apache / cassandra / service / ActiveRepairService . java <nl> index ac5ed99 . . 5cc26ed 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ActiveRepairService . java <nl> + + + b / src / java / org / apache / cassandra / service / ActiveRepairService . java <nl> @ @ - 18 , 7 + 18 , 6 @ @ <nl> package org . apache . cassandra . service ; <nl> <nl> import java . io . File ; <nl> - import java . io . IOException ; <nl> import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> import java . util . * ; <nl> @ @ - 29 , 6 + 28 , 9 @ @ import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . Multimap ; <nl> import com . google . common . collect . Sets ; <nl> <nl> + import com . google . common . util . concurrent . Futures ; <nl> + import com . google . common . util . concurrent . ListenableFuture ; <nl> + import com . google . common . util . concurrent . MoreExecutors ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 36 , 7 + 38 , 6 @ @ import org . apache . cassandra . concurrent . JMXConfigurableThreadPoolExecutor ; <nl> import org . apache . cassandra . concurrent . NamedThreadFactory ; <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . compaction . CompactionManager ; <nl> - import org . apache . cassandra . dht . Bounds ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . dht . Token ; <nl> import org . apache . cassandra . gms . FailureDetector ; <nl> @ @ - 57 , 7 + 58 , 6 @ @ import org . apache . cassandra . repair . messages . ValidationComplete ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . UUIDGen ; <nl> import org . apache . cassandra . utils . concurrent . Ref ; <nl> - import org . apache . cassandra . utils . concurrent . RefCounted ; <nl> <nl> import org . apache . cassandra . utils . concurrent . Refs ; <nl> <nl> @ @ - 320 , 25 + 320 , 31 @ @ public class ActiveRepairService <nl> return repairing ; <nl> } <nl> <nl> - public synchronized void finishParentSession ( UUID parentSession , Set < InetAddress > neighbors , boolean doAntiCompaction ) throws InterruptedException , ExecutionException , IOException <nl> + / * * <nl> + * Run final process of repair . <nl> + * This removes all resources held by parent repair session , after performing anti compaction if necessary . <nl> + * <nl> + * @ param parentSession Parent session ID <nl> + * @ param neighbors Repair participants ( not including self ) <nl> + * @ param doAntiCompaction true if repair session needs anti compaction <nl> + * @ throws InterruptedException <nl> + * @ throws ExecutionException <nl> + * / <nl> + public synchronized void finishParentSession ( UUID parentSession , Set < InetAddress > neighbors , boolean doAntiCompaction ) throws InterruptedException , ExecutionException <nl> { <nl> - try <nl> + if ( doAntiCompaction ) <nl> { <nl> - if ( doAntiCompaction ) <nl> + for ( InetAddress neighbor : neighbors ) <nl> { <nl> - for ( InetAddress neighbor : neighbors ) <nl> - { <nl> - AnticompactionRequest acr = new AnticompactionRequest ( parentSession ) ; <nl> - MessageOut < RepairMessage > req = acr . createMessage ( ) ; <nl> - MessagingService . instance ( ) . sendOneWay ( req , neighbor ) ; <nl> - } <nl> - List < Future < ? > > futures = doAntiCompaction ( parentSession ) ; <nl> - FBUtilities . waitOnFutures ( futures ) ; <nl> + AnticompactionRequest acr = new AnticompactionRequest ( parentSession ) ; <nl> + MessageOut < RepairMessage > req = acr . createMessage ( ) ; <nl> + MessagingService . instance ( ) . sendOneWay ( req , neighbor ) ; <nl> } <nl> + doAntiCompaction ( parentSession ) . get ( ) ; <nl> } <nl> - finally <nl> + else <nl> { <nl> - parentRepairSessions . remove ( parentSession ) ; <nl> + removeParentRepairSession ( parentSession ) ; <nl> } <nl> } <nl> <nl> @ @ - 352 , 12 + 358 , 19 @ @ public class ActiveRepairService <nl> return parentRepairSessions . remove ( parentSessionId ) ; <nl> } <nl> <nl> - public List < Future < ? > > doAntiCompaction ( UUID parentRepairSession ) throws InterruptedException , ExecutionException , IOException <nl> + / * * <nl> + * Submit anti - compaction jobs to CompactionManager . <nl> + * When all jobs are done , parent repair session is removed whether those are suceeded or not . <nl> + * <nl> + * @ param parentRepairSession parent repair session ID <nl> + * @ return Future result of all anti - compaction jobs . <nl> + * / <nl> + public ListenableFuture < List < Object > > doAntiCompaction ( final UUID parentRepairSession ) <nl> { <nl> assert parentRepairSession ! = null ; <nl> ParentRepairSession prs = getParentRepairSession ( parentRepairSession ) ; <nl> <nl> - List < Future < ? > > futures = new ArrayList < > ( ) ; <nl> + List < ListenableFuture < ? > > futures = new ArrayList < > ( ) ; <nl> for ( Map . Entry < UUID , ColumnFamilyStore > columnFamilyStoreEntry : prs . columnFamilyStores . entrySet ( ) ) <nl> { <nl> Refs < SSTableReader > sstables = prs . getAndReferenceSSTables ( columnFamilyStoreEntry . getKey ( ) ) ; <nl> @ @ - 365 , 7 + 378 , 17 @ @ public class ActiveRepairService <nl> futures . add ( CompactionManager . instance . submitAntiCompaction ( cfs , prs . ranges , sstables , prs . repairedAt ) ) ; <nl> } <nl> <nl> - return futures ; <nl> + ListenableFuture < List < Object > > allAntiCompactionResults = Futures . successfulAsList ( futures ) ; <nl> + allAntiCompactionResults . addListener ( new Runnable ( ) <nl> + { <nl> + @ Override <nl> + public void run ( ) <nl> + { <nl> + removeParentRepairSession ( parentRepairSession ) ; <nl> + } <nl> + } , MoreExecutors . sameThreadExecutor ( ) ) ; <nl> + <nl> + return allAntiCompactionResults ; <nl> } <nl> <nl> public void handleMessage ( InetAddress endpoint , RepairMessage message ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index d8fa831 . . 8521256 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 2732 , 7 + 2732 , 9 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> public int forceRepairRangeAsync ( String beginToken , String endToken , String keyspaceName , boolean isSequential , Collection < String > dataCenters , Collection < String > hosts , boolean fullRepair , String . . . columnFamilies ) throws IOException <nl> { <nl> - return forceRepairRangeAsync ( beginToken , endToken , keyspaceName , isSequential ? RepairParallelism . SEQUENTIAL . ordinal ( ) : RepairParallelism . PARALLEL . ordinal ( ) , dataCenters , hosts , fullRepair , columnFamilies ) ; <nl> + return forceRepairRangeAsync ( beginToken , endToken , keyspaceName , <nl> + isSequential ? RepairParallelism . SEQUENTIAL . ordinal ( ) : RepairParallelism . PARALLEL . ordinal ( ) , <nl> + dataCenters , hosts , fullRepair , columnFamilies ) ; <nl> } <nl> <nl> public int forceRepairRangeAsync ( String beginToken , String endToken , String keyspaceName , int parallelismDegree , Collection < String > dataCenters , Collection < String > hosts , boolean fullRepair , String . . . columnFamilies ) <nl> @ @ - 2939 , 7 + 2941 , 9 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> } <nl> } <nl> if ( ! fullRepair ) <nl> + { <nl> ActiveRepairService . instance . finishParentSession ( parentSession , allNeighbors , successful ) ; <nl> + } <nl> sendNotification ( " repair " , String . format ( " Repair command # % d finished " , cmd ) , new int [ ] { cmd , ActiveRepairService . Status . FINISHED . ordinal ( ) } ) ; <nl> } <nl> } , null ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 627cc6b . . a6e4e41 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 6 , 6 + 6 , 7 @ @ 
 * Update tuple and collection types that use a user - defined type when that UDT 
 is modified ( CASSANDRA - 9148 , CASSANDRA - 9192 ) 
 * Use higher timeout for prepair and snapshot in repair ( CASSANDRA - 9261 ) 
 + * Fix anticompaction blocking ANTI _ ENTROPY stage ( CASSANDRA - 9151 ) 
 Merged from 2 . 0 : 
 * Fix index selection during rebuild with certain table layouts ( CASSANDRA - 9281 ) 
 * Fix partition - level - delete - only workload accounting ( CASSANDRA - 9194 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index 72deb21 . . 7215945 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 50 , 8 + 50 , 7 @ @ import com . google . common . collect . Lists ; 
 import com . google . common . collect . Multimap ; 
 import com . google . common . collect . Multiset ; 
 import com . google . common . collect . Sets ; 
 - import com . google . common . util . concurrent . Futures ; 
 - import com . google . common . util . concurrent . RateLimiter ; 
 + import com . google . common . util . concurrent . * ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 387 , 7 + 386 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 } ) ; 
 } 
 
 - public Future < ? > submitAntiCompaction ( final ColumnFamilyStore cfs , 
 + public ListenableFuture < ? > submitAntiCompaction ( final ColumnFamilyStore cfs , 
 final Collection < Range < Token > > ranges , 
 final Refs < SSTableReader > sstables , 
 final long repairedAt ) 
 @ @ - 417 , 7 + 416 , 9 @ @ public class CompactionManager implements CompactionManagerMBean 
 return Futures . immediateCancelledFuture ( ) ; 
 } 
 
 - return executor . submit ( runnable ) ; 
 + ListenableFutureTask < ? > task = ListenableFutureTask . create ( runnable , null ) ; 
 + executor . submit ( task ) ; 
 + return task ; 
 } 
 
 / * * 
 @ @ - 483 , 7 + 484 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 cfs . getDataTracker ( ) . unmarkCompacting ( sstables ) ; 
 } 
 
 - logger . info ( String . format ( " Completed anticompaction successfully " ) ) ; 
 + logger . info ( " Completed anticompaction successfully " ) ; 
 } 
 
 public void performMaximal ( final ColumnFamilyStore cfStore ) throws InterruptedException , ExecutionException 
 diff - - git a / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java b / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java 
 index c7cf4c8 . . 5b25afa 100644 
 - - - a / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java 
 + + + b / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java 
 @ @ - 112 , 20 + 112 , 7 @ @ public class RepairMessageVerbHandler implements IVerbHandler < RepairMessage > 
 case ANTICOMPACTION _ REQUEST : 
 logger . debug ( " Got anticompaction request " ) ; 
 AnticompactionRequest anticompactionRequest = ( AnticompactionRequest ) message . payload ; 
 - try 
 - { 
 - List < Future < ? > > futures = ActiveRepairService . instance . doAntiCompaction ( anticompactionRequest . parentRepairSession ) ; 
 - FBUtilities . waitOnFutures ( futures ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - finally 
 - { 
 - ActiveRepairService . instance . removeParentRepairSession ( anticompactionRequest . parentRepairSession ) ; 
 - } 
 - 
 + ActiveRepairService . instance . doAntiCompaction ( anticompactionRequest . parentRepairSession ) ; 
 break ; 
 
 default : 
 diff - - git a / src / java / org / apache / cassandra / service / ActiveRepairService . java b / src / java / org / apache / cassandra / service / ActiveRepairService . java 
 index ac5ed99 . . 5cc26ed 100644 
 - - - a / src / java / org / apache / cassandra / service / ActiveRepairService . java 
 + + + b / src / java / org / apache / cassandra / service / ActiveRepairService . java 
 @ @ - 18 , 7 + 18 , 6 @ @ 
 package org . apache . cassandra . service ; 
 
 import java . io . File ; 
 - import java . io . IOException ; 
 import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 import java . util . * ; 
 @ @ - 29 , 6 + 28 , 9 @ @ import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . Multimap ; 
 import com . google . common . collect . Sets ; 
 
 + import com . google . common . util . concurrent . Futures ; 
 + import com . google . common . util . concurrent . ListenableFuture ; 
 + import com . google . common . util . concurrent . MoreExecutors ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 36 , 7 + 38 , 6 @ @ import org . apache . cassandra . concurrent . JMXConfigurableThreadPoolExecutor ; 
 import org . apache . cassandra . concurrent . NamedThreadFactory ; 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . compaction . CompactionManager ; 
 - import org . apache . cassandra . dht . Bounds ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . dht . Token ; 
 import org . apache . cassandra . gms . FailureDetector ; 
 @ @ - 57 , 7 + 58 , 6 @ @ import org . apache . cassandra . repair . messages . ValidationComplete ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . UUIDGen ; 
 import org . apache . cassandra . utils . concurrent . Ref ; 
 - import org . apache . cassandra . utils . concurrent . RefCounted ; 
 
 import org . apache . cassandra . utils . concurrent . Refs ; 
 
 @ @ - 320 , 25 + 320 , 31 @ @ public class ActiveRepairService 
 return repairing ; 
 } 
 
 - public synchronized void finishParentSession ( UUID parentSession , Set < InetAddress > neighbors , boolean doAntiCompaction ) throws InterruptedException , ExecutionException , IOException 
 + / * * 
 + * Run final process of repair . 
 + * This removes all resources held by parent repair session , after performing anti compaction if necessary . 
 + * 
 + * @ param parentSession Parent session ID 
 + * @ param neighbors Repair participants ( not including self ) 
 + * @ param doAntiCompaction true if repair session needs anti compaction 
 + * @ throws InterruptedException 
 + * @ throws ExecutionException 
 + * / 
 + public synchronized void finishParentSession ( UUID parentSession , Set < InetAddress > neighbors , boolean doAntiCompaction ) throws InterruptedException , ExecutionException 
 { 
 - try 
 + if ( doAntiCompaction ) 
 { 
 - if ( doAntiCompaction ) 
 + for ( InetAddress neighbor : neighbors ) 
 { 
 - for ( InetAddress neighbor : neighbors ) 
 - { 
 - AnticompactionRequest acr = new AnticompactionRequest ( parentSession ) ; 
 - MessageOut < RepairMessage > req = acr . createMessage ( ) ; 
 - MessagingService . instance ( ) . sendOneWay ( req , neighbor ) ; 
 - } 
 - List < Future < ? > > futures = doAntiCompaction ( parentSession ) ; 
 - FBUtilities . waitOnFutures ( futures ) ; 
 + AnticompactionRequest acr = new AnticompactionRequest ( parentSession ) ; 
 + MessageOut < RepairMessage > req = acr . createMessage ( ) ; 
 + MessagingService . instance ( ) . sendOneWay ( req , neighbor ) ; 
 } 
 + doAntiCompaction ( parentSession ) . get ( ) ; 
 } 
 - finally 
 + else 
 { 
 - parentRepairSessions . remove ( parentSession ) ; 
 + removeParentRepairSession ( parentSession ) ; 
 } 
 } 
 
 @ @ - 352 , 12 + 358 , 19 @ @ public class ActiveRepairService 
 return parentRepairSessions . remove ( parentSessionId ) ; 
 } 
 
 - public List < Future < ? > > doAntiCompaction ( UUID parentRepairSession ) throws InterruptedException , ExecutionException , IOException 
 + / * * 
 + * Submit anti - compaction jobs to CompactionManager . 
 + * When all jobs are done , parent repair session is removed whether those are suceeded or not . 
 + * 
 + * @ param parentRepairSession parent repair session ID 
 + * @ return Future result of all anti - compaction jobs . 
 + * / 
 + public ListenableFuture < List < Object > > doAntiCompaction ( final UUID parentRepairSession ) 
 { 
 assert parentRepairSession ! = null ; 
 ParentRepairSession prs = getParentRepairSession ( parentRepairSession ) ; 
 
 - List < Future < ? > > futures = new ArrayList < > ( ) ; 
 + List < ListenableFuture < ? > > futures = new ArrayList < > ( ) ; 
 for ( Map . Entry < UUID , ColumnFamilyStore > columnFamilyStoreEntry : prs . columnFamilyStores . entrySet ( ) ) 
 { 
 Refs < SSTableReader > sstables = prs . getAndReferenceSSTables ( columnFamilyStoreEntry . getKey ( ) ) ; 
 @ @ - 365 , 7 + 378 , 17 @ @ public class ActiveRepairService 
 futures . add ( CompactionManager . instance . submitAntiCompaction ( cfs , prs . ranges , sstables , prs . repairedAt ) ) ; 
 } 
 
 - return futures ; 
 + ListenableFuture < List < Object > > allAntiCompactionResults = Futures . successfulAsList ( futures ) ; 
 + allAntiCompactionResults . addListener ( new Runnable ( ) 
 + { 
 + @ Override 
 + public void run ( ) 
 + { 
 + removeParentRepairSession ( parentRepairSession ) ; 
 + } 
 + } , MoreExecutors . sameThreadExecutor ( ) ) ; 
 + 
 + return allAntiCompactionResults ; 
 } 
 
 public void handleMessage ( InetAddress endpoint , RepairMessage message ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index d8fa831 . . 8521256 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 2732 , 7 + 2732 , 9 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 public int forceRepairRangeAsync ( String beginToken , String endToken , String keyspaceName , boolean isSequential , Collection < String > dataCenters , Collection < String > hosts , boolean fullRepair , String . . . columnFamilies ) throws IOException 
 { 
 - return forceRepairRangeAsync ( beginToken , endToken , keyspaceName , isSequential ? RepairParallelism . SEQUENTIAL . ordinal ( ) : RepairParallelism . PARALLEL . ordinal ( ) , dataCenters , hosts , fullRepair , columnFamilies ) ; 
 + return forceRepairRangeAsync ( beginToken , endToken , keyspaceName , 
 + isSequential ? RepairParallelism . SEQUENTIAL . ordinal ( ) : RepairParallelism . PARALLEL . ordinal ( ) , 
 + dataCenters , hosts , fullRepair , columnFamilies ) ; 
 } 
 
 public int forceRepairRangeAsync ( String beginToken , String endToken , String keyspaceName , int parallelismDegree , Collection < String > dataCenters , Collection < String > hosts , boolean fullRepair , String . . . columnFamilies ) 
 @ @ - 2939 , 7 + 2941 , 9 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 } 
 } 
 if ( ! fullRepair ) 
 + { 
 ActiveRepairService . instance . finishParentSession ( parentSession , allNeighbors , successful ) ; 
 + } 
 sendNotification ( " repair " , String . format ( " Repair command # % d finished " , cmd ) , new int [ ] { cmd , ActiveRepairService . Status . FINISHED . ordinal ( ) } ) ; 
 } 
 } , null ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
