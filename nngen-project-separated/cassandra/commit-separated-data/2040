BLEU SCORE: 0.001459383946013153

TEST MSG: Integrate JMH into build system
GENERATED MSG: clean up data directories + unit test for CassandraService . Patch by Ran Tavory , reviewed by Gary Dusbabek . CASSANDRA - 782

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index c1d262d . . 85cb24b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 <nl> + * Integrate JMH for microbenchmarks ( CASSANDRA - 8151 ) <nl> * Keep sstable levels when bootstrapping ( CASSANDRA - 7460 ) <nl> * Add Sigar library and perform basic OS settings check on startup ( CASSANDRA - 7838 ) <nl> * Support for aggregation functions ( CASSANDRA - 4914 ) <nl> diff - - git a / build . xml b / build . xml <nl> index 07d0578 . . 9cd80c2 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 56 , 10 + 56 , 12 @ @ <nl> < property name = " test . conf " value = " $ { test . dir } / conf " / > <nl> < property name = " test . data " value = " $ { test . dir } / data " / > <nl> < property name = " test . name " value = " * Test " / > <nl> + < property name = " benchmark . name " value = " " / > <nl> < property name = " test . methods " value = " " / > <nl> < property name = " test . runners " value = " 1 " / > <nl> < property name = " test . unit . src " value = " $ { test . dir } / unit " / > <nl> < property name = " test . long . src " value = " $ { test . dir } / long " / > <nl> + < property name = " test . microbench . src " value = " $ { test . dir } / microbench " / > <nl> < property name = " test . pig . src " value = " $ { test . dir } / pig " / > <nl> < property name = " dist . dir " value = " $ { build . dir } / dist " / > <nl> 	 <nl> @ @ - 356 , 6 + 358 , 9 @ @ <nl> < dependency groupId = " org . jacoco " artifactId = " org . jacoco . agent " version = " $ { jacoco . version } " / > <nl> < dependency groupId = " org . jacoco " artifactId = " org . jacoco . ant " version = " $ { jacoco . version } " / > <nl> <nl> + < dependency groupId = " org . openjdk . jmh " artifactId = " jmh - core " version = " 1 . 1 . 1 " / > <nl> + < dependency groupId = " org . openjdk . jmh " artifactId = " jmh - generator - annprocess " version = " 1 . 1 . 1 " / > <nl> + <nl> < dependency groupId = " org . apache . cassandra " artifactId = " cassandra - all " version = " $ { version } " / > <nl> < dependency groupId = " org . apache . cassandra " artifactId = " cassandra - thrift " version = " $ { version } " / > <nl> < dependency groupId = " com . yammer . metrics " artifactId = " metrics - core " version = " 2 . 2 . 0 " / > <nl> @ @ - 415 , 6 + 420 , 8 @ @ <nl> < dependency groupId = " com . datastax . cassandra " artifactId = " cassandra - driver - core " / > <nl> < dependency groupId = " net . ju - n . compile - command - annotations " artifactId = " compile - command - annotations " / > <nl> < dependency groupId = " org . javassist " artifactId = " javassist " / > <nl> + < dependency groupId = " org . openjdk . jmh " artifactId = " jmh - core " / > <nl> + < dependency groupId = " org . openjdk . jmh " artifactId = " jmh - generator - annprocess " / > <nl> < / artifact : pom > <nl> <nl> < artifact : pom id = " coverage - deps - pom " <nl> @ @ - 1062 , 6 + 1069 , 7 @ @ <nl> < src path = " $ { test . unit . src } " / > <nl> < src path = " $ { test . long . src } " / > <nl> < src path = " $ { test . pig . src } " / > <nl> + < src path = " $ { test . microbench . src } " / > <nl> < / javac > <nl> <nl> < ! - - Non - java resources needed by the test suite - - > <nl> @ @ - 1510 , 6 + 1518 , 24 @ @ <nl> ] ] > < / script > <nl> < / target > <nl> <nl> + < ! - - run microbenchmarks suite - - > <nl> + < target name = " microbench " depends = " build - test " > <nl> + < java classname = " org . openjdk . jmh . Main " <nl> + fork = " true " <nl> + failonerror = " true " > <nl> + < classpath > <nl> + < path refid = " cassandra . classpath " / > <nl> + < pathelement location = " $ { test . classes } " / > <nl> + < path refid = " cobertura . classpath " / > <nl> + < pathelement location = " $ { test . conf } " / > <nl> + < fileset dir = " $ { test . lib } " > <nl> + < include name = " * * / * . jar " / > <nl> + < / fileset > <nl> + < / classpath > <nl> + < arg value = " . * microbench . * $ { benchmark . name } " / > <nl> + < / java > <nl> + < / target > <nl> + <nl> < ! - - Generate Eclipse project description files - - > <nl> < target name = " generate - eclipse - files " depends = " build " description = " Generate eclipse files " > <nl> < echo file = " . project " > < ! [ CDATA [ < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > <nl> diff - - git a / test / microbench / org / apache / cassandra / test / microbench / Sample . java b / test / microbench / org / apache / cassandra / test / microbench / Sample . java <nl> new file mode 100644 <nl> index 0000000 . . 1f149c0 <nl> - - - / dev / null <nl> + + + b / test / microbench / org / apache / cassandra / test / microbench / Sample . java <nl> @ @ - 0 , 0 + 1 , 130 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . test . microbench ; <nl> + <nl> + import net . jpountz . lz4 . LZ4Compressor ; <nl> + import net . jpountz . lz4 . LZ4Factory ; <nl> + import net . jpountz . lz4 . LZ4FastDecompressor ; <nl> + import org . openjdk . jmh . annotations . * ; <nl> + import org . xerial . snappy . Snappy ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . util . concurrent . ThreadLocalRandom ; <nl> + import java . util . concurrent . TimeUnit ; <nl> + <nl> + @ BenchmarkMode ( Mode . Throughput ) <nl> + @ OutputTimeUnit ( TimeUnit . MILLISECONDS ) <nl> + @ Warmup ( iterations = 5 , time = 1 , timeUnit = TimeUnit . SECONDS ) <nl> + @ Measurement ( iterations = 5 , time = 2 , timeUnit = TimeUnit . SECONDS ) <nl> + @ Fork ( value = 1 , jvmArgsAppend = " - Xmx512M " ) <nl> + @ Threads ( 1 ) <nl> + @ State ( Scope . Benchmark ) <nl> + public class Sample <nl> + { <nl> + @ Param ( { " 65536 " } ) <nl> + private int pageSize ; <nl> + <nl> + @ Param ( { " 1024 " } ) <nl> + private int uniquePages ; <nl> + <nl> + @ Param ( { " 0 . 1 " } ) <nl> + private double randomRatio ; <nl> + <nl> + @ Param ( { " 4 . . 16 " } ) <nl> + private String randomRunLength ; <nl> + <nl> + @ Param ( { " 4 . . 128 " } ) <nl> + private String duplicateLookback ; <nl> + <nl> + private byte [ ] [ ] lz4Bytes ; <nl> + private byte [ ] [ ] snappyBytes ; <nl> + private byte [ ] [ ] rawBytes ; <nl> + <nl> + private LZ4FastDecompressor lz4Decompressor = LZ4Factory . fastestInstance ( ) . fastDecompressor ( ) ; <nl> + <nl> + private LZ4Compressor lz4Compressor = LZ4Factory . fastestInstance ( ) . fastCompressor ( ) ; <nl> + <nl> + @ State ( Scope . Thread ) <nl> + public static class ThreadState <nl> + { <nl> + byte [ ] bytes ; <nl> + } <nl> + <nl> + @ Setup <nl> + public void setup ( ) throws IOException <nl> + { <nl> + ThreadLocalRandom random = ThreadLocalRandom . current ( ) ; <nl> + int [ ] randomRunLength = range ( this . randomRunLength ) ; <nl> + int [ ] duplicateLookback = range ( this . duplicateLookback ) ; <nl> + rawBytes = new byte [ uniquePages ] [ pageSize ] ; <nl> + lz4Bytes = new byte [ uniquePages ] [ ] ; <nl> + snappyBytes = new byte [ uniquePages ] [ ] ; <nl> + byte [ ] [ ] runs = new byte [ duplicateLookback [ 1 ] - duplicateLookback [ 0 ] ] [ ] ; <nl> + for ( int i = 0 ; i < rawBytes . length ; i + + ) <nl> + { <nl> + byte [ ] trg = rawBytes [ 0 ] ; <nl> + int runCount = 0 ; <nl> + int byteCount = 0 ; <nl> + while ( byteCount < trg . length ) <nl> + { <nl> + byte [ ] nextRun ; <nl> + if ( runCount = = 0 | | random . nextDouble ( ) < this . randomRatio ) <nl> + { <nl> + nextRun = new byte [ random . nextInt ( randomRunLength [ 0 ] , randomRunLength [ 1 ] ) ] ; <nl> + random . nextBytes ( nextRun ) ; <nl> + runs [ runCount % runs . length ] = nextRun ; <nl> + runCount + + ; <nl> + } <nl> + else <nl> + { <nl> + int index = runCount < duplicateLookback [ 1 ] <nl> + ? random . nextInt ( runCount ) <nl> + : ( runCount - random . nextInt ( duplicateLookback [ 0 ] , duplicateLookback [ 1 ] ) ) ; <nl> + nextRun = runs [ index % runs . length ] ; <nl> + } <nl> + System . arraycopy ( nextRun , 0 , trg , byteCount , Math . min ( nextRun . length , trg . length - byteCount ) ) ; <nl> + byteCount + = nextRun . length ; <nl> + } <nl> + lz4Bytes [ i ] = lz4Compressor . compress ( trg ) ; <nl> + snappyBytes [ i ] = Snappy . compress ( trg ) ; <nl> + } <nl> + } <nl> + <nl> + static int [ ] range ( String spec ) <nl> + { <nl> + String [ ] split = spec . split ( " \ \ . \ \ . " ) ; <nl> + return new int [ ] { Integer . parseInt ( split [ 0 ] ) , Integer . parseInt ( split [ 1 ] ) } ; <nl> + } <nl> + <nl> + @ Benchmark <nl> + public void lz4 ( ThreadState state ) <nl> + { <nl> + if ( state . bytes = = null ) <nl> + state . bytes = new byte [ this . pageSize ] ; <nl> + byte [ ] in = lz4Bytes [ ThreadLocalRandom . current ( ) . nextInt ( lz4Bytes . length ) ] ; <nl> + lz4Decompressor . decompress ( in , state . bytes ) ; <nl> + } <nl> + <nl> + @ Benchmark <nl> + public void snappy ( ThreadState state ) throws IOException <nl> + { <nl> + byte [ ] in = snappyBytes [ ThreadLocalRandom . current ( ) . nextInt ( snappyBytes . length ) ] ; <nl> + state . bytes = Snappy . uncompress ( in ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / contrib / javautils / README b / contrib / javautils / README <nl> new file mode 100644 <nl> index 0000000 . . ed30423 <nl> - - - / dev / null <nl> + + + b / contrib / javautils / README <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + Java utilities for cassandra clients <nl> + <nl> + BUILD and test : <nl> + <nl> + 1 . ant the top - level cassandra project <nl> + 2 . cd here <nl> + 3 . ant test <nl> + <nl> diff - - git a / contrib / javautils / build . xml b / contrib / javautils / build . xml <nl> new file mode 100644 <nl> index 0000000 . . ce85731 <nl> - - - / dev / null <nl> + + + b / contrib / javautils / build . xml <nl> @ @ - 0 , 0 + 1 , 87 @ @ <nl> + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > <nl> + < ! - - <nl> + ~ Licensed to the Apache Software Foundation ( ASF ) under one <nl> + ~ or more contributor license agreements . See the NOTICE file <nl> + ~ distributed with this work for additional information <nl> + ~ regarding copyright ownership . The ASF licenses this file <nl> + ~ to you under the Apache License , Version 2 . 0 ( the <nl> + ~ " License " ) ; you may not use this file except in compliance <nl> + ~ with the License . You may obtain a copy of the License at <nl> + ~ <nl> + ~ http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + ~ <nl> + ~ Unless required by applicable law or agreed to in writing , <nl> + ~ software distributed under the License is distributed on an <nl> + ~ " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + ~ KIND , either express or implied . See the License for the <nl> + ~ specific language governing permissions and limitations <nl> + ~ under the License . <nl> + - - > <nl> + < project basedir = " . " default = " build " name = " apache - cassandra - javautils " > <nl> + < property name = " cassandra . dir " value = " . . / . . " / > <nl> + < property name = " cassandra . lib " value = " $ { cassandra . dir } / lib " / > <nl> + < property name = " cassandra . classes " value = " $ { cassandra . dir } / build / classes " / > <nl> + < property name = " build . src " value = " $ { basedir } / src / main / java " / > <nl> + < property name = " test . src " value = " $ { basedir } / src / test / java " / > <nl> + < property name = " test . reports " value = " $ { basedir } / reports " / > <nl> + < property name = " build . out " value = " $ { basedir } / build " / > <nl> + < property name = " build . classes " value = " $ { build . out } / classes " / > <nl> + < property name = " final . name " value = " cassandra - javautils " / > <nl> + <nl> + < path id = " classpath " > <nl> + < path > <nl> + < fileset dir = " $ { cassandra . lib } " > <nl> + < include name = " * * / * . jar " / > <nl> + < / fileset > <nl> + < pathelement location = " $ { cassandra . classes } " / > <nl> + < / path > <nl> + < / path > <nl> + < path id = " test . classpath " > <nl> + < path refid = " classpath " / > <nl> + < path > <nl> + < pathelement location = " $ { build . classes } " / > <nl> + < / path > <nl> + < / path > <nl> + <nl> + < target name = " init " > <nl> + < mkdir dir = " $ { build . classes } " / > <nl> + < / target > <nl> + <nl> + < target depends = " init " name = " build " > <nl> + < javac destdir = " $ { build . classes } " > <nl> + < src path = " $ { build . src } " / > <nl> + < classpath refid = " classpath " / > <nl> + < / javac > <nl> + < / target > <nl> + <nl> + < target name = " jar " depends = " build " > <nl> + < mkdir dir = " $ { build . classes } / META - INF " / > <nl> + < jar jarfile = " $ { build . out } / $ { final . name } . jar " basedir = " $ { build . classes } " / > <nl> + < / target > <nl> + <nl> + < target name = " build - tests " depends = " build " description = " Builds the test files " > <nl> + < javac debug = " true " srcdir = " $ { test . src } " destdir = " $ { build . classes } " > <nl> + < classpath refid = " test . classpath " / > <nl> + < / javac > <nl> + < / target > <nl> + <nl> + < target name = " test " depends = " build - tests " > <nl> + < delete dir = " $ { test . reports } " failonerror = " no " / > <nl> + < mkdir dir = " $ { test . reports } " / > <nl> + < junit printsummary = " yes " dir = " $ { basedir } " timeout = " 600000 " fork = " yes " includeantruntime = " yes " > <nl> + < classpath refid = " test . classpath " / > <nl> + < formatter type = " plain " / > <nl> + < batchtest todir = " $ { test . reports } " > <nl> + < fileset dir = " $ { test . src } " > <nl> + < include name = " * * / * Test * . java " / > <nl> + < / fileset > <nl> + < / batchtest > <nl> + < / junit > <nl> + < / target > <nl> + <nl> + < target name = " clean " > <nl> + < delete dir = " $ { build . out } " / > <nl> + < delete dir = " $ { test . reports } " / > <nl> + < / target > <nl> + < / project > <nl> + <nl> diff - - git a / contrib / javautils / src / main / java / org / apache / cassandra / contrib / utils / service / CassandraServiceDataCleaner . java b / contrib / javautils / src / main / java / org / apache / cassandra / contrib / utils / service / CassandraServiceDataCleaner . java <nl> new file mode 100644 <nl> index 0000000 . . 51b95de <nl> - - - / dev / null <nl> + + + b / contrib / javautils / src / main / java / org / apache / cassandra / contrib / utils / service / CassandraServiceDataCleaner . java <nl> @ @ - 0 , 0 + 1 , 101 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . contrib . utils . service ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . util . HashSet ; <nl> + import java . util . Set ; <nl> + <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> + <nl> + / * * <nl> + * A cleanup utility that wipes the cassandra data directories . <nl> + * <nl> + * @ author Ran Tavory ( rantav @ gmail . com ) <nl> + * <nl> + * / <nl> + public class CassandraServiceDataCleaner { <nl> + <nl> + / * * <nl> + * Creates all data dir if they don ' t exist and cleans them <nl> + * @ throws IOException <nl> + * / <nl> + public void prepare ( ) throws IOException { <nl> + makeDirsIfNotExist ( ) ; <nl> + cleanupDataDirectories ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Deletes all data from cassandra data directories , including the commit log . <nl> + * @ throws IOException in case of permissions error etc . <nl> + * / <nl> + public void cleanupDataDirectories ( ) throws IOException { <nl> + for ( String s : getDataDirs ( ) ) { <nl> + cleanDir ( s ) ; <nl> + } <nl> + } <nl> + / * * <nl> + * Creates the data diurectories , if they didn ' t exist . <nl> + * @ throws IOException if directories cannot be created ( permissions etc ) . <nl> + * / <nl> + public void makeDirsIfNotExist ( ) throws IOException { <nl> + for ( String s : getDataDirs ( ) ) { <nl> + mkdir ( s ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Collects all data dirs and returns a set of String paths on the file system . <nl> + * <nl> + * @ return <nl> + * / <nl> + private Set < String > getDataDirs ( ) { <nl> + Set < String > dirs = new HashSet < String > ( ) ; <nl> + for ( String s : DatabaseDescriptor . getAllDataFileLocations ( ) ) { <nl> + dirs . add ( s ) ; <nl> + } <nl> + dirs . add ( DatabaseDescriptor . getLogFileLocation ( ) ) ; <nl> + return dirs ; <nl> + } <nl> + / * * <nl> + * Creates a directory <nl> + * <nl> + * @ param dir <nl> + * @ throws IOException <nl> + * / <nl> + private void mkdir ( String dir ) throws IOException { <nl> + FileUtils . createDirectory ( dir ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Removes all directory content from file the system <nl> + * <nl> + * @ param dir <nl> + * @ throws IOException <nl> + * / <nl> + private void cleanDir ( String dir ) throws IOException { <nl> + File dirFile = new File ( dir ) ; <nl> + if ( dirFile . exists ( ) & & dirFile . isDirectory ( ) ) { <nl> + FileUtils . delete ( dirFile . listFiles ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / contrib / javautils / src / test / java / org / apache / cassandra / contrib / utils / service / CassandraServiceTest . java b / contrib / javautils / src / test / java / org / apache / cassandra / contrib / utils / service / CassandraServiceTest . java <nl> new file mode 100644 <nl> index 0000000 . . 68471f8 <nl> - - - / dev / null <nl> + + + b / contrib / javautils / src / test / java / org / apache / cassandra / contrib / utils / service / CassandraServiceTest . java <nl> @ @ - 0 , 0 + 1 , 119 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . contrib . utils . service ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertNotNull ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . io . UnsupportedEncodingException ; <nl> + <nl> + import org . apache . cassandra . service . EmbeddedCassandraService ; <nl> + import org . apache . cassandra . thrift . Cassandra ; <nl> + import org . apache . cassandra . thrift . ColumnOrSuperColumn ; <nl> + import org . apache . cassandra . thrift . ColumnPath ; <nl> + import org . apache . cassandra . thrift . ConsistencyLevel ; <nl> + import org . apache . cassandra . thrift . InvalidRequestException ; <nl> + import org . apache . cassandra . thrift . NotFoundException ; <nl> + import org . apache . cassandra . thrift . TimedOutException ; <nl> + import org . apache . cassandra . thrift . UnavailableException ; <nl> + import org . apache . thrift . TException ; <nl> + import org . apache . thrift . protocol . TBinaryProtocol ; <nl> + import org . apache . thrift . protocol . TProtocol ; <nl> + import org . apache . thrift . transport . TSocket ; <nl> + import org . apache . thrift . transport . TTransport ; <nl> + import org . apache . thrift . transport . TTransportException ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + / * * <nl> + * Example how to use an embedded and a data cleaner . <nl> + * <nl> + * @ author Ran Tavory ( rantav @ gmail . com ) <nl> + * <nl> + * / <nl> + public class CassandraServiceTest { <nl> + <nl> + private static EmbeddedCassandraService cassandra ; <nl> + <nl> + / * * <nl> + * Set embedded cassandra up and spawn it in a new thread . <nl> + * <nl> + * @ throws TTransportException <nl> + * @ throws IOException <nl> + * @ throws InterruptedException <nl> + * / <nl> + @ BeforeClass <nl> + public static void setup ( ) throws TTransportException , IOException , <nl> + InterruptedException { <nl> + / / Tell cassandra where the configuration files are . <nl> + / / Use the test configuration file . <nl> + System . setProperty ( " storage - config " , " . . / . . / test / conf " ) ; <nl> + <nl> + CassandraServiceDataCleaner cleaner = new CassandraServiceDataCleaner ( ) ; <nl> + cleaner . prepare ( ) ; <nl> + cassandra = new EmbeddedCassandraService ( ) ; <nl> + cassandra . init ( ) ; <nl> + Thread t = new Thread ( cassandra ) ; <nl> + t . setDaemon ( true ) ; <nl> + t . start ( ) ; <nl> + } <nl> + <nl> + <nl> + @ Test <nl> + public void testInProcessCassandraServer ( ) <nl> + throws UnsupportedEncodingException , InvalidRequestException , <nl> + UnavailableException , TimedOutException , TException , <nl> + NotFoundException { <nl> + Cassandra . Client client = getClient ( ) ; <nl> + <nl> + String key _ user _ id = " 1 " ; <nl> + <nl> + long timestamp = System . currentTimeMillis ( ) ; <nl> + ColumnPath cp = new ColumnPath ( " Standard1 " ) ; <nl> + cp . setColumn ( " name " . getBytes ( " utf - 8 " ) ) ; <nl> + <nl> + / / insert <nl> + client . insert ( " Keyspace1 " , key _ user _ id , cp , " Ran " . getBytes ( " UTF - 8 " ) , <nl> + timestamp , ConsistencyLevel . ONE ) ; <nl> + <nl> + / / read <nl> + ColumnOrSuperColumn got = client . get ( " Keyspace1 " , key _ user _ id , cp , <nl> + ConsistencyLevel . ONE ) ; <nl> + <nl> + / / assert <nl> + assertNotNull ( " Got a null ColumnOrSuperColumn " , got ) ; <nl> + assertEquals ( " Ran " , new String ( got . getColumn ( ) . getValue ( ) , " utf - 8 " ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Gets a connection to the localhost client <nl> + * <nl> + * @ return <nl> + * @ throws TTransportException <nl> + * / <nl> + private Cassandra . Client getClient ( ) throws TTransportException { <nl> + TTransport tr = new TSocket ( " localhost " , 9170 ) ; <nl> + TProtocol proto = new TBinaryProtocol ( tr ) ; <nl> + Cassandra . Client client = new Cassandra . Client ( proto ) ; <nl> + tr . open ( ) ; <nl> + return client ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index c1d262d . . 85cb24b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 
 + * Integrate JMH for microbenchmarks ( CASSANDRA - 8151 ) 
 * Keep sstable levels when bootstrapping ( CASSANDRA - 7460 ) 
 * Add Sigar library and perform basic OS settings check on startup ( CASSANDRA - 7838 ) 
 * Support for aggregation functions ( CASSANDRA - 4914 ) 
 diff - - git a / build . xml b / build . xml 
 index 07d0578 . . 9cd80c2 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 56 , 10 + 56 , 12 @ @ 
 < property name = " test . conf " value = " $ { test . dir } / conf " / > 
 < property name = " test . data " value = " $ { test . dir } / data " / > 
 < property name = " test . name " value = " * Test " / > 
 + < property name = " benchmark . name " value = " " / > 
 < property name = " test . methods " value = " " / > 
 < property name = " test . runners " value = " 1 " / > 
 < property name = " test . unit . src " value = " $ { test . dir } / unit " / > 
 < property name = " test . long . src " value = " $ { test . dir } / long " / > 
 + < property name = " test . microbench . src " value = " $ { test . dir } / microbench " / > 
 < property name = " test . pig . src " value = " $ { test . dir } / pig " / > 
 < property name = " dist . dir " value = " $ { build . dir } / dist " / > 
 	 
 @ @ - 356 , 6 + 358 , 9 @ @ 
 < dependency groupId = " org . jacoco " artifactId = " org . jacoco . agent " version = " $ { jacoco . version } " / > 
 < dependency groupId = " org . jacoco " artifactId = " org . jacoco . ant " version = " $ { jacoco . version } " / > 
 
 + < dependency groupId = " org . openjdk . jmh " artifactId = " jmh - core " version = " 1 . 1 . 1 " / > 
 + < dependency groupId = " org . openjdk . jmh " artifactId = " jmh - generator - annprocess " version = " 1 . 1 . 1 " / > 
 + 
 < dependency groupId = " org . apache . cassandra " artifactId = " cassandra - all " version = " $ { version } " / > 
 < dependency groupId = " org . apache . cassandra " artifactId = " cassandra - thrift " version = " $ { version } " / > 
 < dependency groupId = " com . yammer . metrics " artifactId = " metrics - core " version = " 2 . 2 . 0 " / > 
 @ @ - 415 , 6 + 420 , 8 @ @ 
 < dependency groupId = " com . datastax . cassandra " artifactId = " cassandra - driver - core " / > 
 < dependency groupId = " net . ju - n . compile - command - annotations " artifactId = " compile - command - annotations " / > 
 < dependency groupId = " org . javassist " artifactId = " javassist " / > 
 + < dependency groupId = " org . openjdk . jmh " artifactId = " jmh - core " / > 
 + < dependency groupId = " org . openjdk . jmh " artifactId = " jmh - generator - annprocess " / > 
 < / artifact : pom > 
 
 < artifact : pom id = " coverage - deps - pom " 
 @ @ - 1062 , 6 + 1069 , 7 @ @ 
 < src path = " $ { test . unit . src } " / > 
 < src path = " $ { test . long . src } " / > 
 < src path = " $ { test . pig . src } " / > 
 + < src path = " $ { test . microbench . src } " / > 
 < / javac > 
 
 < ! - - Non - java resources needed by the test suite - - > 
 @ @ - 1510 , 6 + 1518 , 24 @ @ 
 ] ] > < / script > 
 < / target > 
 
 + < ! - - run microbenchmarks suite - - > 
 + < target name = " microbench " depends = " build - test " > 
 + < java classname = " org . openjdk . jmh . Main " 
 + fork = " true " 
 + failonerror = " true " > 
 + < classpath > 
 + < path refid = " cassandra . classpath " / > 
 + < pathelement location = " $ { test . classes } " / > 
 + < path refid = " cobertura . classpath " / > 
 + < pathelement location = " $ { test . conf } " / > 
 + < fileset dir = " $ { test . lib } " > 
 + < include name = " * * / * . jar " / > 
 + < / fileset > 
 + < / classpath > 
 + < arg value = " . * microbench . * $ { benchmark . name } " / > 
 + < / java > 
 + < / target > 
 + 
 < ! - - Generate Eclipse project description files - - > 
 < target name = " generate - eclipse - files " depends = " build " description = " Generate eclipse files " > 
 < echo file = " . project " > < ! [ CDATA [ < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > 
 diff - - git a / test / microbench / org / apache / cassandra / test / microbench / Sample . java b / test / microbench / org / apache / cassandra / test / microbench / Sample . java 
 new file mode 100644 
 index 0000000 . . 1f149c0 
 - - - / dev / null 
 + + + b / test / microbench / org / apache / cassandra / test / microbench / Sample . java 
 @ @ - 0 , 0 + 1 , 130 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . test . microbench ; 
 + 
 + import net . jpountz . lz4 . LZ4Compressor ; 
 + import net . jpountz . lz4 . LZ4Factory ; 
 + import net . jpountz . lz4 . LZ4FastDecompressor ; 
 + import org . openjdk . jmh . annotations . * ; 
 + import org . xerial . snappy . Snappy ; 
 + 
 + import java . io . IOException ; 
 + import java . util . concurrent . ThreadLocalRandom ; 
 + import java . util . concurrent . TimeUnit ; 
 + 
 + @ BenchmarkMode ( Mode . Throughput ) 
 + @ OutputTimeUnit ( TimeUnit . MILLISECONDS ) 
 + @ Warmup ( iterations = 5 , time = 1 , timeUnit = TimeUnit . SECONDS ) 
 + @ Measurement ( iterations = 5 , time = 2 , timeUnit = TimeUnit . SECONDS ) 
 + @ Fork ( value = 1 , jvmArgsAppend = " - Xmx512M " ) 
 + @ Threads ( 1 ) 
 + @ State ( Scope . Benchmark ) 
 + public class Sample 
 + { 
 + @ Param ( { " 65536 " } ) 
 + private int pageSize ; 
 + 
 + @ Param ( { " 1024 " } ) 
 + private int uniquePages ; 
 + 
 + @ Param ( { " 0 . 1 " } ) 
 + private double randomRatio ; 
 + 
 + @ Param ( { " 4 . . 16 " } ) 
 + private String randomRunLength ; 
 + 
 + @ Param ( { " 4 . . 128 " } ) 
 + private String duplicateLookback ; 
 + 
 + private byte [ ] [ ] lz4Bytes ; 
 + private byte [ ] [ ] snappyBytes ; 
 + private byte [ ] [ ] rawBytes ; 
 + 
 + private LZ4FastDecompressor lz4Decompressor = LZ4Factory . fastestInstance ( ) . fastDecompressor ( ) ; 
 + 
 + private LZ4Compressor lz4Compressor = LZ4Factory . fastestInstance ( ) . fastCompressor ( ) ; 
 + 
 + @ State ( Scope . Thread ) 
 + public static class ThreadState 
 + { 
 + byte [ ] bytes ; 
 + } 
 + 
 + @ Setup 
 + public void setup ( ) throws IOException 
 + { 
 + ThreadLocalRandom random = ThreadLocalRandom . current ( ) ; 
 + int [ ] randomRunLength = range ( this . randomRunLength ) ; 
 + int [ ] duplicateLookback = range ( this . duplicateLookback ) ; 
 + rawBytes = new byte [ uniquePages ] [ pageSize ] ; 
 + lz4Bytes = new byte [ uniquePages ] [ ] ; 
 + snappyBytes = new byte [ uniquePages ] [ ] ; 
 + byte [ ] [ ] runs = new byte [ duplicateLookback [ 1 ] - duplicateLookback [ 0 ] ] [ ] ; 
 + for ( int i = 0 ; i < rawBytes . length ; i + + ) 
 + { 
 + byte [ ] trg = rawBytes [ 0 ] ; 
 + int runCount = 0 ; 
 + int byteCount = 0 ; 
 + while ( byteCount < trg . length ) 
 + { 
 + byte [ ] nextRun ; 
 + if ( runCount = = 0 | | random . nextDouble ( ) < this . randomRatio ) 
 + { 
 + nextRun = new byte [ random . nextInt ( randomRunLength [ 0 ] , randomRunLength [ 1 ] ) ] ; 
 + random . nextBytes ( nextRun ) ; 
 + runs [ runCount % runs . length ] = nextRun ; 
 + runCount + + ; 
 + } 
 + else 
 + { 
 + int index = runCount < duplicateLookback [ 1 ] 
 + ? random . nextInt ( runCount ) 
 + : ( runCount - random . nextInt ( duplicateLookback [ 0 ] , duplicateLookback [ 1 ] ) ) ; 
 + nextRun = runs [ index % runs . length ] ; 
 + } 
 + System . arraycopy ( nextRun , 0 , trg , byteCount , Math . min ( nextRun . length , trg . length - byteCount ) ) ; 
 + byteCount + = nextRun . length ; 
 + } 
 + lz4Bytes [ i ] = lz4Compressor . compress ( trg ) ; 
 + snappyBytes [ i ] = Snappy . compress ( trg ) ; 
 + } 
 + } 
 + 
 + static int [ ] range ( String spec ) 
 + { 
 + String [ ] split = spec . split ( " \ \ . \ \ . " ) ; 
 + return new int [ ] { Integer . parseInt ( split [ 0 ] ) , Integer . parseInt ( split [ 1 ] ) } ; 
 + } 
 + 
 + @ Benchmark 
 + public void lz4 ( ThreadState state ) 
 + { 
 + if ( state . bytes = = null ) 
 + state . bytes = new byte [ this . pageSize ] ; 
 + byte [ ] in = lz4Bytes [ ThreadLocalRandom . current ( ) . nextInt ( lz4Bytes . length ) ] ; 
 + lz4Decompressor . decompress ( in , state . bytes ) ; 
 + } 
 + 
 + @ Benchmark 
 + public void snappy ( ThreadState state ) throws IOException 
 + { 
 + byte [ ] in = snappyBytes [ ThreadLocalRandom . current ( ) . nextInt ( snappyBytes . length ) ] ; 
 + state . bytes = Snappy . uncompress ( in ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / contrib / javautils / README b / contrib / javautils / README 
 new file mode 100644 
 index 0000000 . . ed30423 
 - - - / dev / null 
 + + + b / contrib / javautils / README 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + Java utilities for cassandra clients 
 + 
 + BUILD and test : 
 + 
 + 1 . ant the top - level cassandra project 
 + 2 . cd here 
 + 3 . ant test 
 + 
 diff - - git a / contrib / javautils / build . xml b / contrib / javautils / build . xml 
 new file mode 100644 
 index 0000000 . . ce85731 
 - - - / dev / null 
 + + + b / contrib / javautils / build . xml 
 @ @ - 0 , 0 + 1 , 87 @ @ 
 + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > 
 + < ! - - 
 + ~ Licensed to the Apache Software Foundation ( ASF ) under one 
 + ~ or more contributor license agreements . See the NOTICE file 
 + ~ distributed with this work for additional information 
 + ~ regarding copyright ownership . The ASF licenses this file 
 + ~ to you under the Apache License , Version 2 . 0 ( the 
 + ~ " License " ) ; you may not use this file except in compliance 
 + ~ with the License . You may obtain a copy of the License at 
 + ~ 
 + ~ http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + ~ 
 + ~ Unless required by applicable law or agreed to in writing , 
 + ~ software distributed under the License is distributed on an 
 + ~ " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + ~ KIND , either express or implied . See the License for the 
 + ~ specific language governing permissions and limitations 
 + ~ under the License . 
 + - - > 
 + < project basedir = " . " default = " build " name = " apache - cassandra - javautils " > 
 + < property name = " cassandra . dir " value = " . . / . . " / > 
 + < property name = " cassandra . lib " value = " $ { cassandra . dir } / lib " / > 
 + < property name = " cassandra . classes " value = " $ { cassandra . dir } / build / classes " / > 
 + < property name = " build . src " value = " $ { basedir } / src / main / java " / > 
 + < property name = " test . src " value = " $ { basedir } / src / test / java " / > 
 + < property name = " test . reports " value = " $ { basedir } / reports " / > 
 + < property name = " build . out " value = " $ { basedir } / build " / > 
 + < property name = " build . classes " value = " $ { build . out } / classes " / > 
 + < property name = " final . name " value = " cassandra - javautils " / > 
 + 
 + < path id = " classpath " > 
 + < path > 
 + < fileset dir = " $ { cassandra . lib } " > 
 + < include name = " * * / * . jar " / > 
 + < / fileset > 
 + < pathelement location = " $ { cassandra . classes } " / > 
 + < / path > 
 + < / path > 
 + < path id = " test . classpath " > 
 + < path refid = " classpath " / > 
 + < path > 
 + < pathelement location = " $ { build . classes } " / > 
 + < / path > 
 + < / path > 
 + 
 + < target name = " init " > 
 + < mkdir dir = " $ { build . classes } " / > 
 + < / target > 
 + 
 + < target depends = " init " name = " build " > 
 + < javac destdir = " $ { build . classes } " > 
 + < src path = " $ { build . src } " / > 
 + < classpath refid = " classpath " / > 
 + < / javac > 
 + < / target > 
 + 
 + < target name = " jar " depends = " build " > 
 + < mkdir dir = " $ { build . classes } / META - INF " / > 
 + < jar jarfile = " $ { build . out } / $ { final . name } . jar " basedir = " $ { build . classes } " / > 
 + < / target > 
 + 
 + < target name = " build - tests " depends = " build " description = " Builds the test files " > 
 + < javac debug = " true " srcdir = " $ { test . src } " destdir = " $ { build . classes } " > 
 + < classpath refid = " test . classpath " / > 
 + < / javac > 
 + < / target > 
 + 
 + < target name = " test " depends = " build - tests " > 
 + < delete dir = " $ { test . reports } " failonerror = " no " / > 
 + < mkdir dir = " $ { test . reports } " / > 
 + < junit printsummary = " yes " dir = " $ { basedir } " timeout = " 600000 " fork = " yes " includeantruntime = " yes " > 
 + < classpath refid = " test . classpath " / > 
 + < formatter type = " plain " / > 
 + < batchtest todir = " $ { test . reports } " > 
 + < fileset dir = " $ { test . src } " > 
 + < include name = " * * / * Test * . java " / > 
 + < / fileset > 
 + < / batchtest > 
 + < / junit > 
 + < / target > 
 + 
 + < target name = " clean " > 
 + < delete dir = " $ { build . out } " / > 
 + < delete dir = " $ { test . reports } " / > 
 + < / target > 
 + < / project > 
 + 
 diff - - git a / contrib / javautils / src / main / java / org / apache / cassandra / contrib / utils / service / CassandraServiceDataCleaner . java b / contrib / javautils / src / main / java / org / apache / cassandra / contrib / utils / service / CassandraServiceDataCleaner . java 
 new file mode 100644 
 index 0000000 . . 51b95de 
 - - - / dev / null 
 + + + b / contrib / javautils / src / main / java / org / apache / cassandra / contrib / utils / service / CassandraServiceDataCleaner . java 
 @ @ - 0 , 0 + 1 , 101 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + 
 + package org . apache . cassandra . contrib . utils . service ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + import java . util . HashSet ; 
 + import java . util . Set ; 
 + 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 + 
 + / * * 
 + * A cleanup utility that wipes the cassandra data directories . 
 + * 
 + * @ author Ran Tavory ( rantav @ gmail . com ) 
 + * 
 + * / 
 + public class CassandraServiceDataCleaner { 
 + 
 + / * * 
 + * Creates all data dir if they don ' t exist and cleans them 
 + * @ throws IOException 
 + * / 
 + public void prepare ( ) throws IOException { 
 + makeDirsIfNotExist ( ) ; 
 + cleanupDataDirectories ( ) ; 
 + } 
 + 
 + / * * 
 + * Deletes all data from cassandra data directories , including the commit log . 
 + * @ throws IOException in case of permissions error etc . 
 + * / 
 + public void cleanupDataDirectories ( ) throws IOException { 
 + for ( String s : getDataDirs ( ) ) { 
 + cleanDir ( s ) ; 
 + } 
 + } 
 + / * * 
 + * Creates the data diurectories , if they didn ' t exist . 
 + * @ throws IOException if directories cannot be created ( permissions etc ) . 
 + * / 
 + public void makeDirsIfNotExist ( ) throws IOException { 
 + for ( String s : getDataDirs ( ) ) { 
 + mkdir ( s ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Collects all data dirs and returns a set of String paths on the file system . 
 + * 
 + * @ return 
 + * / 
 + private Set < String > getDataDirs ( ) { 
 + Set < String > dirs = new HashSet < String > ( ) ; 
 + for ( String s : DatabaseDescriptor . getAllDataFileLocations ( ) ) { 
 + dirs . add ( s ) ; 
 + } 
 + dirs . add ( DatabaseDescriptor . getLogFileLocation ( ) ) ; 
 + return dirs ; 
 + } 
 + / * * 
 + * Creates a directory 
 + * 
 + * @ param dir 
 + * @ throws IOException 
 + * / 
 + private void mkdir ( String dir ) throws IOException { 
 + FileUtils . createDirectory ( dir ) ; 
 + } 
 + 
 + / * * 
 + * Removes all directory content from file the system 
 + * 
 + * @ param dir 
 + * @ throws IOException 
 + * / 
 + private void cleanDir ( String dir ) throws IOException { 
 + File dirFile = new File ( dir ) ; 
 + if ( dirFile . exists ( ) & & dirFile . isDirectory ( ) ) { 
 + FileUtils . delete ( dirFile . listFiles ( ) ) ; 
 + } 
 + } 
 + } 
 diff - - git a / contrib / javautils / src / test / java / org / apache / cassandra / contrib / utils / service / CassandraServiceTest . java b / contrib / javautils / src / test / java / org / apache / cassandra / contrib / utils / service / CassandraServiceTest . java 
 new file mode 100644 
 index 0000000 . . 68471f8 
 - - - / dev / null 
 + + + b / contrib / javautils / src / test / java / org / apache / cassandra / contrib / utils / service / CassandraServiceTest . java 
 @ @ - 0 , 0 + 1 , 119 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + 
 + package org . apache . cassandra . contrib . utils . service ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertNotNull ; 
 + 
 + import java . io . IOException ; 
 + import java . io . UnsupportedEncodingException ; 
 + 
 + import org . apache . cassandra . service . EmbeddedCassandraService ; 
 + import org . apache . cassandra . thrift . Cassandra ; 
 + import org . apache . cassandra . thrift . ColumnOrSuperColumn ; 
 + import org . apache . cassandra . thrift . ColumnPath ; 
 + import org . apache . cassandra . thrift . ConsistencyLevel ; 
 + import org . apache . cassandra . thrift . InvalidRequestException ; 
 + import org . apache . cassandra . thrift . NotFoundException ; 
 + import org . apache . cassandra . thrift . TimedOutException ; 
 + import org . apache . cassandra . thrift . UnavailableException ; 
 + import org . apache . thrift . TException ; 
 + import org . apache . thrift . protocol . TBinaryProtocol ; 
 + import org . apache . thrift . protocol . TProtocol ; 
 + import org . apache . thrift . transport . TSocket ; 
 + import org . apache . thrift . transport . TTransport ; 
 + import org . apache . thrift . transport . TTransportException ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + / * * 
 + * Example how to use an embedded and a data cleaner . 
 + * 
 + * @ author Ran Tavory ( rantav @ gmail . com ) 
 + * 
 + * / 
 + public class CassandraServiceTest { 
 + 
 + private static EmbeddedCassandraService cassandra ; 
 + 
 + / * * 
 + * Set embedded cassandra up and spawn it in a new thread . 
 + * 
 + * @ throws TTransportException 
 + * @ throws IOException 
 + * @ throws InterruptedException 
 + * / 
 + @ BeforeClass 
 + public static void setup ( ) throws TTransportException , IOException , 
 + InterruptedException { 
 + / / Tell cassandra where the configuration files are . 
 + / / Use the test configuration file . 
 + System . setProperty ( " storage - config " , " . . / . . / test / conf " ) ; 
 + 
 + CassandraServiceDataCleaner cleaner = new CassandraServiceDataCleaner ( ) ; 
 + cleaner . prepare ( ) ; 
 + cassandra = new EmbeddedCassandraService ( ) ; 
 + cassandra . init ( ) ; 
 + Thread t = new Thread ( cassandra ) ; 
 + t . setDaemon ( true ) ; 
 + t . start ( ) ; 
 + } 
 + 
 + 
 + @ Test 
 + public void testInProcessCassandraServer ( ) 
 + throws UnsupportedEncodingException , InvalidRequestException , 
 + UnavailableException , TimedOutException , TException , 
 + NotFoundException { 
 + Cassandra . Client client = getClient ( ) ; 
 + 
 + String key _ user _ id = " 1 " ; 
 + 
 + long timestamp = System . currentTimeMillis ( ) ; 
 + ColumnPath cp = new ColumnPath ( " Standard1 " ) ; 
 + cp . setColumn ( " name " . getBytes ( " utf - 8 " ) ) ; 
 + 
 + / / insert 
 + client . insert ( " Keyspace1 " , key _ user _ id , cp , " Ran " . getBytes ( " UTF - 8 " ) , 
 + timestamp , ConsistencyLevel . ONE ) ; 
 + 
 + / / read 
 + ColumnOrSuperColumn got = client . get ( " Keyspace1 " , key _ user _ id , cp , 
 + ConsistencyLevel . ONE ) ; 
 + 
 + / / assert 
 + assertNotNull ( " Got a null ColumnOrSuperColumn " , got ) ; 
 + assertEquals ( " Ran " , new String ( got . getColumn ( ) . getValue ( ) , " utf - 8 " ) ) ; 
 + } 
 + 
 + / * * 
 + * Gets a connection to the localhost client 
 + * 
 + * @ return 
 + * @ throws TTransportException 
 + * / 
 + private Cassandra . Client getClient ( ) throws TTransportException { 
 + TTransport tr = new TSocket ( " localhost " , 9170 ) ; 
 + TProtocol proto = new TBinaryProtocol ( tr ) ; 
 + Cassandra . Client client = new Cassandra . Client ( proto ) ; 
 + tr . open ( ) ; 
 + return client ; 
 + } 
 + }
