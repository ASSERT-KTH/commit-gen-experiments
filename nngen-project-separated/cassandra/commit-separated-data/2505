BLEU SCORE: 1.0

TEST MSG: Add Cloudstack snitch
GENERATED MSG: Add Cloudstack snitch

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 5799659 . . 8570784 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 6 + 1 , 5 @ @ <nl> 2 . 0 . 8 <nl> * Make batchlog replica selection rack - aware ( CASSANDRA - 6551 ) <nl> - * Add Google Compute Engine snitch ( CASSANDRA - 7132 ) <nl> * Allow overriding cassandra - rackdc . properties file ( CASSANDRA - 7072 ) <nl> * Set JMX RMI port to 7199 ( CASSANDRA - 7087 ) <nl> * Use LOCAL _ QUORUM for data reads at LOCAL _ SERIAL ( CASSANDRA - 6939 ) <nl> @ @ - 14 , 7 + 13 , 9 @ @ <nl> * Re - add parameter columns to tracing session ( CASSANDRA - 6942 ) <nl> * Fix writetime / ttl functions for static columns ( CASSANDRA - 7081 ) <nl> Merged from 1 . 2 : <nl> + * Add Cloudstack snitch ( CASSANDRA - 7147 ) <nl> * Update system . peers correctly when relocating tokens ( CASSANDRA - 7126 ) <nl> + * Add Google Compute Engine snitch ( CASSANDRA - 7132 ) <nl> * Fix nodetool display with vnodes ( CASSANDRA - 7082 ) <nl> * Fix schema concurrency exceptions ( CASSANDRA - 6841 ) <nl> * Fix BatchlogManager # deleteBatch ( ) use of millisecond timsestamps <nl> diff - - git a / src / java / org / apache / cassandra / locator / CloudstackSnitch . java b / src / java / org / apache / cassandra / locator / CloudstackSnitch . java <nl> new file mode 100644 <nl> index 0000000 . . ecf0f20 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / locator / CloudstackSnitch . java <nl> @ @ - 0 , 0 + 1 , 187 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . locator ; <nl> + <nl> + import java . io . InputStream ; <nl> + import java . io . BufferedInputStream ; <nl> + import java . io . FilterInputStream ; <nl> + import java . io . BufferedReader ; <nl> + import java . io . FileReader ; <nl> + import java . io . IOException ; <nl> + import java . io . File ; <nl> + import java . net . HttpURLConnection ; <nl> + import java . net . InetAddress ; <nl> + import java . net . URL ; <nl> + import java . net . URI ; <nl> + import java . nio . charset . StandardCharsets ; <nl> + import java . util . Map ; <nl> + import java . util . regex . Pattern ; <nl> + import java . util . regex . Matcher ; <nl> + <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + import org . apache . cassandra . db . SystemKeyspace ; <nl> + import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . gms . ApplicationState ; <nl> + import org . apache . cassandra . gms . EndpointState ; <nl> + import org . apache . cassandra . gms . Gossiper ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> + <nl> + / * * <nl> + * A snitch that assumes a Cloudstack Zone follows the typical convention <nl> + * < country > - < location > - < availability zone > and uses the country / location <nl> + * tuple as a datacenter and the availability zone as a rack <nl> + * / <nl> + <nl> + public class CloudstackSnitch extends AbstractNetworkTopologySnitch <nl> + { <nl> + protected static final Logger logger = LoggerFactory . getLogger ( CloudstackSnitch . class ) ; <nl> + protected static final String ZONE _ NAME _ QUERY _ URI = " / latest / meta - data / availability - zone " ; <nl> + <nl> + private Map < InetAddress , Map < String , String > > savedEndpoints ; <nl> + <nl> + private static final String DEFAULT _ DC = " UNKNOWN - DC " ; <nl> + private static final String DEFAULT _ RACK = " UNKNOWN - RACK " ; <nl> + private static final String [ ] LEASE _ FILES = { <nl> + " file : / / / var / lib / dhcp / dhclient . eth0 . leases " , <nl> + " file : / / / var / lib / dhclient / dhclient . eth0 . leases " <nl> + } ; <nl> + <nl> + protected String csZoneDc ; <nl> + protected String csZoneRack ; <nl> + <nl> + public CloudstackSnitch ( ) throws IOException , ConfigurationException <nl> + { <nl> + String endpoint = csMetadataEndpoint ( ) ; <nl> + String zone = csQueryMetadata ( endpoint + ZONE _ NAME _ QUERY _ URI ) ; <nl> + String zone _ parts [ ] = zone . split ( " - " ) ; <nl> + <nl> + if ( zone _ parts . length ! = 3 ) { <nl> + throw new ConfigurationException ( " CloudstackSnitch cannot handle invalid zone format : " + zone ) ; <nl> + } <nl> + csZoneDc = zone _ parts [ 0 ] + " - " + zone _ parts [ 1 ] ; <nl> + csZoneRack = zone _ parts [ 2 ] ; <nl> + } <nl> + <nl> + public String getRack ( InetAddress endpoint ) <nl> + { <nl> + if ( endpoint . equals ( FBUtilities . getBroadcastAddress ( ) ) ) <nl> + return csZoneRack ; <nl> + EndpointState state = Gossiper . instance . getEndpointStateForEndpoint ( endpoint ) ; <nl> + if ( state = = null | | state . getApplicationState ( ApplicationState . RACK ) = = null ) { <nl> + if ( savedEndpoints = = null ) <nl> + savedEndpoints = SystemKeyspace . loadDcRackInfo ( ) ; <nl> + if ( savedEndpoints . containsKey ( endpoint ) ) <nl> + return savedEndpoints . get ( endpoint ) . get ( " rack " ) ; <nl> + return DEFAULT _ RACK ; <nl> + } <nl> + return state . getApplicationState ( ApplicationState . RACK ) . value ; <nl> + } <nl> + <nl> + public String getDatacenter ( InetAddress endpoint ) <nl> + { <nl> + if ( endpoint . equals ( FBUtilities . getBroadcastAddress ( ) ) ) <nl> + return csZoneDc ; <nl> + EndpointState state = Gossiper . instance . getEndpointStateForEndpoint ( endpoint ) ; <nl> + if ( state = = null | | state . getApplicationState ( ApplicationState . DC ) = = null ) { <nl> + if ( savedEndpoints = = null ) <nl> + savedEndpoints = SystemKeyspace . loadDcRackInfo ( ) ; <nl> + if ( savedEndpoints . containsKey ( endpoint ) ) <nl> + return savedEndpoints . get ( endpoint ) . get ( " data _ center " ) ; <nl> + return DEFAULT _ DC ; <nl> + } <nl> + return state . getApplicationState ( ApplicationState . DC ) . value ; <nl> + } <nl> + <nl> + String csQueryMetadata ( String url ) throws ConfigurationException , IOException <nl> + { <nl> + HttpURLConnection conn = null ; <nl> + BufferedInputStream is = null ; <nl> + <nl> + try { <nl> + conn = ( HttpURLConnection ) new URL ( url ) . openConnection ( ) ; <nl> + } catch ( Exception e ) { <nl> + throw new ConfigurationException ( " CloudstackSnitch cannot query wrong metadata URL : " + url ) ; <nl> + } <nl> + try { <nl> + conn . setRequestMethod ( " GET " ) ; <nl> + if ( conn . getResponseCode ( ) ! = 200 ) { <nl> + throw new ConfigurationException ( " CloudstackSnitch was unable to query metadata . " ) ; <nl> + } <nl> + <nl> + int cl = conn . getContentLength ( ) ; <nl> + byte [ ] b = new byte [ cl ] ; <nl> + is = new BufferedInputStream ( conn . getInputStream ( ) ) ; <nl> + is . read ( b , 0 , cl ) ; <nl> + return new String ( b , StandardCharsets . UTF _ 8 ) ; <nl> + } finally { <nl> + FileUtils . close ( is ) ; <nl> + conn . disconnect ( ) ; <nl> + } <nl> + <nl> + } <nl> + <nl> + String csMetadataEndpoint ( ) throws ConfigurationException <nl> + { <nl> + for ( String lease _ uri : LEASE _ FILES ) { <nl> + try { <nl> + File lease _ file = new File ( new URI ( lease _ uri ) ) ; <nl> + if ( lease _ file . exists ( ) ) { <nl> + return csEndpointFromLease ( lease _ file ) ; <nl> + } <nl> + <nl> + } catch ( Exception e ) { <nl> + continue ; <nl> + } <nl> + <nl> + <nl> + } <nl> + <nl> + throw new ConfigurationException ( " No valid DHCP lease file could be found . " ) ; <nl> + } <nl> + <nl> + String csEndpointFromLease ( File lease ) throws ConfigurationException , IOException <nl> + { <nl> + BufferedReader reader = null ; <nl> + <nl> + String line = null ; <nl> + String endpoint = null ; <nl> + Pattern identifierPattern = Pattern . compile ( " ^ [ \ t ] * option dhcp - server - identifier ( . * ) ; $ " ) ; <nl> + <nl> + try { <nl> + reader = new BufferedReader ( new FileReader ( lease ) ) ; <nl> + } catch ( Exception e ) { <nl> + throw new ConfigurationException ( " CloudstackSnitch cannot access lease file . " ) ; <nl> + } <nl> + <nl> + while ( ( line = reader . readLine ( ) ) ! = null ) { <nl> + Matcher matcher = identifierPattern . matcher ( line ) ; <nl> + <nl> + if ( matcher . find ( ) ) { <nl> + endpoint = matcher . group ( 1 ) ; <nl> + } <nl> + } <nl> + <nl> + if ( endpoint = = null ) { <nl> + throw new ConfigurationException ( " No metadata server could be found in lease file . " ) ; <nl> + } <nl> + <nl> + return " http : / / " + endpoint ; <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / locator / CloudstackSnitchTest . java b / test / unit / org / apache / cassandra / locator / CloudstackSnitchTest . java <nl> new file mode 100644 <nl> index 0000000 . . 7e483a9 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / locator / CloudstackSnitchTest . java <nl> @ @ - 0 , 0 + 1 , 111 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . locator ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . net . InetAddress ; <nl> + import java . net . UnknownHostException ; <nl> + import java . util . Map ; <nl> + <nl> + import org . junit . AfterClass ; <nl> + import org . junit . Assert ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . SchemaLoader ; <nl> + import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . gms . ApplicationState ; <nl> + import org . apache . cassandra . gms . Gossiper ; <nl> + import org . apache . cassandra . gms . VersionedValue ; <nl> + import org . apache . cassandra . net . MessagingService ; <nl> + import org . apache . cassandra . net . OutboundTcpConnectionPool ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + <nl> + public class CloudstackSnitchTest <nl> + { <nl> + private static String az ; <nl> + <nl> + @ BeforeClass <nl> + public static void setup ( ) throws Exception <nl> + { <nl> + SchemaLoader . mkdirs ( ) ; <nl> + SchemaLoader . cleanup ( ) ; <nl> + StorageService . instance . initServer ( 0 ) ; <nl> + <nl> + } <nl> + <nl> + private class TestCloudstackSnitch extends CloudstackSnitch <nl> + { <nl> + public TestCloudstackSnitch ( ) throws IOException , ConfigurationException <nl> + { <nl> + super ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + String csMetadataEndpoint ( ) throws ConfigurationException <nl> + { <nl> + return " " ; <nl> + } <nl> + <nl> + @ Override <nl> + String csQueryMetadata ( String endpoint ) throws IOException , ConfigurationException <nl> + { <nl> + return az ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testRacks ( ) throws IOException , ConfigurationException <nl> + { <nl> + az = " ch - gva - 1 " ; <nl> + CloudstackSnitch snitch = new TestCloudstackSnitch ( ) ; <nl> + InetAddress local = InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) ; <nl> + InetAddress nonlocal = InetAddress . getByName ( " 127 . 0 . 0 . 7 " ) ; <nl> + <nl> + Gossiper . instance . addSavedEndpoint ( nonlocal ) ; <nl> + Map < ApplicationState , VersionedValue > stateMap = Gossiper . instance . getEndpointStateForEndpoint ( nonlocal ) . getApplicationStateMap ( ) ; <nl> + stateMap . put ( ApplicationState . DC , StorageService . instance . valueFactory . datacenter ( " ch - zrh " ) ) ; <nl> + stateMap . put ( ApplicationState . RACK , StorageService . instance . valueFactory . rack ( " 2 " ) ) ; <nl> + <nl> + assertEquals ( " ch - zrh " , snitch . getDatacenter ( nonlocal ) ) ; <nl> + assertEquals ( " 2 " , snitch . getRack ( nonlocal ) ) ; <nl> + <nl> + assertEquals ( " ch - gva " , snitch . getDatacenter ( local ) ) ; <nl> + assertEquals ( " 1 " , snitch . getRack ( local ) ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testNewRegions ( ) throws IOException , ConfigurationException <nl> + { <nl> + az = " ch - gva - 1 " ; <nl> + CloudstackSnitch snitch = new TestCloudstackSnitch ( ) ; <nl> + InetAddress local = InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) ; <nl> + <nl> + assertEquals ( " ch - gva " , snitch . getDatacenter ( local ) ) ; <nl> + assertEquals ( " 1 " , snitch . getRack ( local ) ) ; <nl> + } <nl> + <nl> + @ AfterClass <nl> + public static void tearDown ( ) <nl> + { <nl> + StorageService . instance . stopClient ( ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 5799659 . . 8570784 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 6 + 1 , 5 @ @ 
 2 . 0 . 8 
 * Make batchlog replica selection rack - aware ( CASSANDRA - 6551 ) 
 - * Add Google Compute Engine snitch ( CASSANDRA - 7132 ) 
 * Allow overriding cassandra - rackdc . properties file ( CASSANDRA - 7072 ) 
 * Set JMX RMI port to 7199 ( CASSANDRA - 7087 ) 
 * Use LOCAL _ QUORUM for data reads at LOCAL _ SERIAL ( CASSANDRA - 6939 ) 
 @ @ - 14 , 7 + 13 , 9 @ @ 
 * Re - add parameter columns to tracing session ( CASSANDRA - 6942 ) 
 * Fix writetime / ttl functions for static columns ( CASSANDRA - 7081 ) 
 Merged from 1 . 2 : 
 + * Add Cloudstack snitch ( CASSANDRA - 7147 ) 
 * Update system . peers correctly when relocating tokens ( CASSANDRA - 7126 ) 
 + * Add Google Compute Engine snitch ( CASSANDRA - 7132 ) 
 * Fix nodetool display with vnodes ( CASSANDRA - 7082 ) 
 * Fix schema concurrency exceptions ( CASSANDRA - 6841 ) 
 * Fix BatchlogManager # deleteBatch ( ) use of millisecond timsestamps 
 diff - - git a / src / java / org / apache / cassandra / locator / CloudstackSnitch . java b / src / java / org / apache / cassandra / locator / CloudstackSnitch . java 
 new file mode 100644 
 index 0000000 . . ecf0f20 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / locator / CloudstackSnitch . java 
 @ @ - 0 , 0 + 1 , 187 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . locator ; 
 + 
 + import java . io . InputStream ; 
 + import java . io . BufferedInputStream ; 
 + import java . io . FilterInputStream ; 
 + import java . io . BufferedReader ; 
 + import java . io . FileReader ; 
 + import java . io . IOException ; 
 + import java . io . File ; 
 + import java . net . HttpURLConnection ; 
 + import java . net . InetAddress ; 
 + import java . net . URL ; 
 + import java . net . URI ; 
 + import java . nio . charset . StandardCharsets ; 
 + import java . util . Map ; 
 + import java . util . regex . Pattern ; 
 + import java . util . regex . Matcher ; 
 + 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + import org . apache . cassandra . db . SystemKeyspace ; 
 + import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . gms . ApplicationState ; 
 + import org . apache . cassandra . gms . EndpointState ; 
 + import org . apache . cassandra . gms . Gossiper ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 + 
 + / * * 
 + * A snitch that assumes a Cloudstack Zone follows the typical convention 
 + * < country > - < location > - < availability zone > and uses the country / location 
 + * tuple as a datacenter and the availability zone as a rack 
 + * / 
 + 
 + public class CloudstackSnitch extends AbstractNetworkTopologySnitch 
 + { 
 + protected static final Logger logger = LoggerFactory . getLogger ( CloudstackSnitch . class ) ; 
 + protected static final String ZONE _ NAME _ QUERY _ URI = " / latest / meta - data / availability - zone " ; 
 + 
 + private Map < InetAddress , Map < String , String > > savedEndpoints ; 
 + 
 + private static final String DEFAULT _ DC = " UNKNOWN - DC " ; 
 + private static final String DEFAULT _ RACK = " UNKNOWN - RACK " ; 
 + private static final String [ ] LEASE _ FILES = { 
 + " file : / / / var / lib / dhcp / dhclient . eth0 . leases " , 
 + " file : / / / var / lib / dhclient / dhclient . eth0 . leases " 
 + } ; 
 + 
 + protected String csZoneDc ; 
 + protected String csZoneRack ; 
 + 
 + public CloudstackSnitch ( ) throws IOException , ConfigurationException 
 + { 
 + String endpoint = csMetadataEndpoint ( ) ; 
 + String zone = csQueryMetadata ( endpoint + ZONE _ NAME _ QUERY _ URI ) ; 
 + String zone _ parts [ ] = zone . split ( " - " ) ; 
 + 
 + if ( zone _ parts . length ! = 3 ) { 
 + throw new ConfigurationException ( " CloudstackSnitch cannot handle invalid zone format : " + zone ) ; 
 + } 
 + csZoneDc = zone _ parts [ 0 ] + " - " + zone _ parts [ 1 ] ; 
 + csZoneRack = zone _ parts [ 2 ] ; 
 + } 
 + 
 + public String getRack ( InetAddress endpoint ) 
 + { 
 + if ( endpoint . equals ( FBUtilities . getBroadcastAddress ( ) ) ) 
 + return csZoneRack ; 
 + EndpointState state = Gossiper . instance . getEndpointStateForEndpoint ( endpoint ) ; 
 + if ( state = = null | | state . getApplicationState ( ApplicationState . RACK ) = = null ) { 
 + if ( savedEndpoints = = null ) 
 + savedEndpoints = SystemKeyspace . loadDcRackInfo ( ) ; 
 + if ( savedEndpoints . containsKey ( endpoint ) ) 
 + return savedEndpoints . get ( endpoint ) . get ( " rack " ) ; 
 + return DEFAULT _ RACK ; 
 + } 
 + return state . getApplicationState ( ApplicationState . RACK ) . value ; 
 + } 
 + 
 + public String getDatacenter ( InetAddress endpoint ) 
 + { 
 + if ( endpoint . equals ( FBUtilities . getBroadcastAddress ( ) ) ) 
 + return csZoneDc ; 
 + EndpointState state = Gossiper . instance . getEndpointStateForEndpoint ( endpoint ) ; 
 + if ( state = = null | | state . getApplicationState ( ApplicationState . DC ) = = null ) { 
 + if ( savedEndpoints = = null ) 
 + savedEndpoints = SystemKeyspace . loadDcRackInfo ( ) ; 
 + if ( savedEndpoints . containsKey ( endpoint ) ) 
 + return savedEndpoints . get ( endpoint ) . get ( " data _ center " ) ; 
 + return DEFAULT _ DC ; 
 + } 
 + return state . getApplicationState ( ApplicationState . DC ) . value ; 
 + } 
 + 
 + String csQueryMetadata ( String url ) throws ConfigurationException , IOException 
 + { 
 + HttpURLConnection conn = null ; 
 + BufferedInputStream is = null ; 
 + 
 + try { 
 + conn = ( HttpURLConnection ) new URL ( url ) . openConnection ( ) ; 
 + } catch ( Exception e ) { 
 + throw new ConfigurationException ( " CloudstackSnitch cannot query wrong metadata URL : " + url ) ; 
 + } 
 + try { 
 + conn . setRequestMethod ( " GET " ) ; 
 + if ( conn . getResponseCode ( ) ! = 200 ) { 
 + throw new ConfigurationException ( " CloudstackSnitch was unable to query metadata . " ) ; 
 + } 
 + 
 + int cl = conn . getContentLength ( ) ; 
 + byte [ ] b = new byte [ cl ] ; 
 + is = new BufferedInputStream ( conn . getInputStream ( ) ) ; 
 + is . read ( b , 0 , cl ) ; 
 + return new String ( b , StandardCharsets . UTF _ 8 ) ; 
 + } finally { 
 + FileUtils . close ( is ) ; 
 + conn . disconnect ( ) ; 
 + } 
 + 
 + } 
 + 
 + String csMetadataEndpoint ( ) throws ConfigurationException 
 + { 
 + for ( String lease _ uri : LEASE _ FILES ) { 
 + try { 
 + File lease _ file = new File ( new URI ( lease _ uri ) ) ; 
 + if ( lease _ file . exists ( ) ) { 
 + return csEndpointFromLease ( lease _ file ) ; 
 + } 
 + 
 + } catch ( Exception e ) { 
 + continue ; 
 + } 
 + 
 + 
 + } 
 + 
 + throw new ConfigurationException ( " No valid DHCP lease file could be found . " ) ; 
 + } 
 + 
 + String csEndpointFromLease ( File lease ) throws ConfigurationException , IOException 
 + { 
 + BufferedReader reader = null ; 
 + 
 + String line = null ; 
 + String endpoint = null ; 
 + Pattern identifierPattern = Pattern . compile ( " ^ [ \ t ] * option dhcp - server - identifier ( . * ) ; $ " ) ; 
 + 
 + try { 
 + reader = new BufferedReader ( new FileReader ( lease ) ) ; 
 + } catch ( Exception e ) { 
 + throw new ConfigurationException ( " CloudstackSnitch cannot access lease file . " ) ; 
 + } 
 + 
 + while ( ( line = reader . readLine ( ) ) ! = null ) { 
 + Matcher matcher = identifierPattern . matcher ( line ) ; 
 + 
 + if ( matcher . find ( ) ) { 
 + endpoint = matcher . group ( 1 ) ; 
 + } 
 + } 
 + 
 + if ( endpoint = = null ) { 
 + throw new ConfigurationException ( " No metadata server could be found in lease file . " ) ; 
 + } 
 + 
 + return " http : / / " + endpoint ; 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / locator / CloudstackSnitchTest . java b / test / unit / org / apache / cassandra / locator / CloudstackSnitchTest . java 
 new file mode 100644 
 index 0000000 . . 7e483a9 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / locator / CloudstackSnitchTest . java 
 @ @ - 0 , 0 + 1 , 111 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . locator ; 
 + 
 + import java . io . IOException ; 
 + import java . net . InetAddress ; 
 + import java . net . UnknownHostException ; 
 + import java . util . Map ; 
 + 
 + import org . junit . AfterClass ; 
 + import org . junit . Assert ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . SchemaLoader ; 
 + import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . gms . ApplicationState ; 
 + import org . apache . cassandra . gms . Gossiper ; 
 + import org . apache . cassandra . gms . VersionedValue ; 
 + import org . apache . cassandra . net . MessagingService ; 
 + import org . apache . cassandra . net . OutboundTcpConnectionPool ; 
 + import org . apache . cassandra . service . StorageService ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + 
 + public class CloudstackSnitchTest 
 + { 
 + private static String az ; 
 + 
 + @ BeforeClass 
 + public static void setup ( ) throws Exception 
 + { 
 + SchemaLoader . mkdirs ( ) ; 
 + SchemaLoader . cleanup ( ) ; 
 + StorageService . instance . initServer ( 0 ) ; 
 + 
 + } 
 + 
 + private class TestCloudstackSnitch extends CloudstackSnitch 
 + { 
 + public TestCloudstackSnitch ( ) throws IOException , ConfigurationException 
 + { 
 + super ( ) ; 
 + } 
 + 
 + @ Override 
 + String csMetadataEndpoint ( ) throws ConfigurationException 
 + { 
 + return " " ; 
 + } 
 + 
 + @ Override 
 + String csQueryMetadata ( String endpoint ) throws IOException , ConfigurationException 
 + { 
 + return az ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testRacks ( ) throws IOException , ConfigurationException 
 + { 
 + az = " ch - gva - 1 " ; 
 + CloudstackSnitch snitch = new TestCloudstackSnitch ( ) ; 
 + InetAddress local = InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) ; 
 + InetAddress nonlocal = InetAddress . getByName ( " 127 . 0 . 0 . 7 " ) ; 
 + 
 + Gossiper . instance . addSavedEndpoint ( nonlocal ) ; 
 + Map < ApplicationState , VersionedValue > stateMap = Gossiper . instance . getEndpointStateForEndpoint ( nonlocal ) . getApplicationStateMap ( ) ; 
 + stateMap . put ( ApplicationState . DC , StorageService . instance . valueFactory . datacenter ( " ch - zrh " ) ) ; 
 + stateMap . put ( ApplicationState . RACK , StorageService . instance . valueFactory . rack ( " 2 " ) ) ; 
 + 
 + assertEquals ( " ch - zrh " , snitch . getDatacenter ( nonlocal ) ) ; 
 + assertEquals ( " 2 " , snitch . getRack ( nonlocal ) ) ; 
 + 
 + assertEquals ( " ch - gva " , snitch . getDatacenter ( local ) ) ; 
 + assertEquals ( " 1 " , snitch . getRack ( local ) ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testNewRegions ( ) throws IOException , ConfigurationException 
 + { 
 + az = " ch - gva - 1 " ; 
 + CloudstackSnitch snitch = new TestCloudstackSnitch ( ) ; 
 + InetAddress local = InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) ; 
 + 
 + assertEquals ( " ch - gva " , snitch . getDatacenter ( local ) ) ; 
 + assertEquals ( " 1 " , snitch . getRack ( local ) ) ; 
 + } 
 + 
 + @ AfterClass 
 + public static void tearDown ( ) 
 + { 
 + StorageService . instance . stopClient ( ) ; 
 + } 
 + }

NEAREST DIFF:
ELIMINATEDSENTENCE
