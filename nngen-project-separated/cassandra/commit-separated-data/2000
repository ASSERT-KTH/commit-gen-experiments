BLEU SCORE: 0.06567274736060397

TEST MSG: fix some JDK 8 javadoc lint errors
GENERATED MSG: javadoc corrections

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / gms / VersionedValue . java b / src / java / org / apache / cassandra / gms / VersionedValue . java <nl> index 36c2f00 . . a779982 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / VersionedValue . java <nl> + + + b / src / java / org / apache / cassandra / gms / VersionedValue . java <nl> @ @ - 43 , 9 + 43 , 9 @ @ import org . apache . commons . lang3 . StringUtils ; <nl> * application wants to make available to the rest of the nodes in the cluster . <nl> * Whenever a piece of state needs to be disseminated to the rest of cluster wrap <nl> * the state in an instance of < i > ApplicationState < / i > and add it to the Gossiper . <nl> - * < p / > <nl> + * < p > < / p > <nl> * e . g . if we want to disseminate load information for node A do the following : <nl> - * < p / > <nl> + * < p > < / p > <nl> * ApplicationState loadState = new ApplicationState ( < string representation of load > ) ; <nl> * Gossiper . instance . addApplicationState ( " LOAD STATE " , loadState ) ; <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / AbstractColumnFamilyOutputFormat . java b / src / java / org / apache / cassandra / hadoop / AbstractColumnFamilyOutputFormat . java <nl> index f4963fb . . f574641 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / AbstractColumnFamilyOutputFormat . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / AbstractColumnFamilyOutputFormat . java <nl> @ @ - 67 , 8 + 67 , 6 @ @ public abstract class AbstractColumnFamilyOutputFormat < K , Y > extends OutputForma <nl> * <nl> * @ param context <nl> * information about the job <nl> - * @ throws IOException <nl> - * when output should not be attempted <nl> * / <nl> public void checkOutputSpecs ( JobContext context ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyOutputFormat . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyOutputFormat . java <nl> index 49aaf99 . . c5489c6 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyOutputFormat . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyOutputFormat . java <nl> @ @ - 60 , 7 + 60 , 6 @ @ public class ColumnFamilyOutputFormat extends AbstractColumnFamilyOutputFormat < B <nl> * @ param context <nl> * the information about the current task . <nl> * @ return a { @ link RecordWriter } to write the output for the job . <nl> - * @ throws IOException <nl> * / <nl> public ColumnFamilyRecordWriter getRecordWriter ( final TaskAttemptContext context ) throws InterruptedException <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / io / IVersionedSerializer . java b / src / java / org / apache / cassandra / io / IVersionedSerializer . java <nl> index 46494e1 . . 2572840 100644 <nl> - - - a / src / java / org / apache / cassandra / io / IVersionedSerializer . java <nl> + + + b / src / java / org / apache / cassandra / io / IVersionedSerializer . java <nl> @ @ - 30 , 7 + 30 , 7 @ @ public interface IVersionedSerializer < T > <nl> * @ param t type that needs to be serialized <nl> * @ param out DataOutput into which serialization needs to happen . <nl> * @ param version protocol version <nl> - * @ throws java . io . IOException <nl> + * @ throws java . io . IOException if serialization fails <nl> * / <nl> public void serialize ( T t , DataOutputPlus out , int version ) throws IOException ; <nl> <nl> @ @ - 39 , 7 + 39 , 7 @ @ public interface IVersionedSerializer < T > <nl> * @ param in DataInput from which deserialization needs to happen . <nl> * @ param version protocol version <nl> * @ return the type that was deserialized <nl> - * @ throws IOException <nl> + * @ throws IOException if deserialization fails <nl> * / <nl> public T deserialize ( DataInput in , int version ) throws IOException ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java <nl> index 7f7ab82 . . 3576057 100644 <nl> - - - a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java <nl> + + + b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java <nl> @ @ - 340 , 6 + 340 , 8 @ @ public class CompressionMetadata <nl> / * * <nl> * Reset the writer so that the next chunk offset written will be the <nl> * one of { @ code chunkIndex } . <nl> + * <nl> + * @ param chunkIndex the next index to write <nl> * / <nl> public void resetAndTruncate ( int chunkIndex ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / io / compress / CompressionParameters . java b / src / java / org / apache / cassandra / io / compress / CompressionParameters . java <nl> index d3436c0 . . d94fed4 100644 <nl> - - - a / src / java / org / apache / cassandra / io / compress / CompressionParameters . java <nl> + + + b / src / java / org / apache / cassandra / io / compress / CompressionParameters . java <nl> @ @ - 225 , 6 + 225 , 10 @ @ public class CompressionParameters <nl> <nl> / * * <nl> * Parse the chunk length ( in KB ) and returns it as bytes . <nl> + * <nl> + * @ param chLengthKB the length of the chunk to parse <nl> + * @ return the chunk length in bytes <nl> + * @ throws ConfigurationException if the chunk size is too large <nl> * / <nl> public static Integer parseChunkLength ( String chLengthKB ) throws ConfigurationException <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java b / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java <nl> index 7577567 . . c2eb08a 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java <nl> + + + b / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java <nl> @ @ - 74 , 6 + 74 , 8 @ @ public final class DataOutputBuffer extends DataOutputStreamPlus <nl> / * * <nl> * Returns the current contents of the buffer . Data is only valid to <nl> * { @ link # getLength ( ) } . <nl> + * <nl> + * @ return the buffer contents <nl> * / <nl> public byte [ ] getData ( ) <nl> { <nl> @ @ - 93 , 7 + 95 , 7 @ @ public final class DataOutputBuffer extends DataOutputStreamPlus <nl> return ByteBuffer . wrap ( out . buf , 0 , out . count ) ; <nl> } <nl> <nl> - / * * Returns the length of the valid data currently in the buffer . * / <nl> + / * * @ return the length of the valid data currently in the buffer . * / <nl> public int getLength ( ) <nl> { <nl> return ( ( FastByteArrayOutputStream ) out ) . count ; <nl> diff - - git a / src / java / org / apache / cassandra / io / util / SequentialWriter . java b / src / java / org / apache / cassandra / io / util / SequentialWriter . java <nl> index 7a7eb63 . . aea97aa 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / SequentialWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / util / SequentialWriter . java <nl> @ @ - 322 , 11 + 322 , 13 @ @ public class SequentialWriter extends OutputStream implements WritableByteChanne <nl> } <nl> <nl> / * * <nl> - * Return the current file pointer of the underlying on - disk file . <nl> + * Returns the current file pointer of the underlying on - disk file . <nl> * Note that since write works by buffering data , the value of this will increase by buffer <nl> * size and not every write to the writer will modify this value . <nl> * Furthermore , for compressed files , this value refers to compressed data , while the <nl> * writer getFilePointer ( ) refers to uncompressedFile <nl> + * <nl> + * @ return the current file pointer <nl> * / <nl> public long getOnDiskFilePointer ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / repair / RepairJob . java b / src / java / org / apache / cassandra / repair / RepairJob . java <nl> index b0d17ab . . 0b40d4a 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / RepairJob . java <nl> + + + b / src / java / org / apache / cassandra / repair / RepairJob . java <nl> @ @ - 50 , 6 + 50 , 7 @ @ public class RepairJob extends AbstractFuture < RepairResult > implements Runnable <nl> * @ param session RepairSession that this RepairJob belongs <nl> * @ param columnFamily name of the ColumnFamily to repair <nl> * @ param isSequential when true , validation runs sequentially among replica <nl> + * @ param repairedAt when the repair occurred ( millis ) <nl> * @ param taskExecutor Executor to run various repair tasks <nl> * / <nl> public RepairJob ( RepairSession session , <nl> diff - - git a / src / java / org / apache / cassandra / repair / RepairSession . java b / src / java / org / apache / cassandra / repair / RepairSession . java <nl> index 240a21c . . c273c4e 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / RepairSession . java <nl> + + + b / src / java / org / apache / cassandra / repair / RepairSession . java <nl> @ @ - 106 , 10 + 106 , 13 @ @ public class RepairSession extends AbstractFuture < List < RepairResult > > implements <nl> / * * <nl> * Create new repair session . <nl> * <nl> + * @ param parentRepairSession the parent sessions id <nl> + * @ param id this sessions id <nl> * @ param range range to repair <nl> * @ param keyspace name of keyspace <nl> * @ param isSequential true if performing repair on snapshots sequentially <nl> * @ param endpoints the data centers that should be part of the repair ; null for all DCs <nl> + * @ param repairedAt when the repair occurred ( millis ) <nl> * @ param cfnames names of columnfamilies <nl> * / <nl> public RepairSession ( UUID parentRepairSession , <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index 35db450 . . e4d262a 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 91 , 8 + 91 , 6 @ @ public class CassandraDaemon <nl> * This is a hook for concrete daemons to initialize themselves suitably . <nl> * <nl> * Subclasses should override this to finish the job ( listening on ports , etc . ) <nl> - * <nl> - * @ throws IOException <nl> * / <nl> protected void setup ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / utils / memory / SlabAllocator . java b / src / java / org / apache / cassandra / utils / memory / SlabAllocator . java <nl> index 19334ee . . 8defd25 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / memory / SlabAllocator . java <nl> + + + b / src / java / org / apache / cassandra / utils / memory / SlabAllocator . java <nl> @ @ - 34 , 12 + 34 , 12 @ @ import sun . nio . ch . DirectBuffer ; <nl> * The SlabAllocator is a bump - the - pointer allocator that allocates <nl> * large ( 2MB by default ) regions and then doles them out to threads that request <nl> * slices into the array . <nl> - * < p / > <nl> + * < p > < / p > <nl> * The purpose of this class is to combat heap fragmentation in long lived <nl> * objects : by ensuring that all allocations with similar lifetimes <nl> * only to large regions of contiguous memory , we ensure that large blocks <nl> * get freed up at the same time . <nl> - * < p / > <nl> + * < p > < / p > <nl> * Otherwise , variable length byte arrays allocated end up <nl> * interleaved throughout the heap , and the old generation gets progressively <nl> * more fragmented until a stop - the - world compacting collection occurs .
NEAREST DIFF (one line): diff - - git a / bin / cassandra b / bin / cassandra <nl> index 8ce8d57 . . 4dd2497 100755 <nl> - - - a / bin / cassandra <nl> + + + b / bin / cassandra <nl> @ @ - 89 , 6 + 89 , 16 @ @ else <nl> JAVA = java <nl> fi <nl> <nl> + # If numactl is available , use it . For Cassandra , the priority is to <nl> + # avoid disk I / O . Even for the purpose of CPU efficiency , we don ' t <nl> + # really have CPU < - > data affinity anyway . <nl> + if which numactl > / dev / null 2 > / dev / null <nl> + then <nl> + NUMACTL = " numactl - - interleave = all " <nl> + else <nl> + NUMACTL = " " <nl> + fi <nl> + <nl> if [ - z " $ CASSANDRA _ CONF " - o - z " $ CLASSPATH " ] ; then <nl> echo " You must set the CASSANDRA _ CONF and CLASSPATH vars " > & 2 <nl> exit 1 <nl> @ @ - 122 , 10 + 132 , 10 @ @ launch _ service ( ) <nl> # to close stdout / stderr , but it ' s up to us not to background . <nl> if [ " x $ foreground " ! = " x " ] ; then <nl> cassandra _ parms = " $ cassandra _ parms - Dcassandra - foreground = yes " <nl> - exec " $ JAVA " $ JVM _ OPTS $ cassandra _ parms - cp " $ CLASSPATH " $ props " $ class " <nl> + exec $ NUMACTL " $ JAVA " $ JVM _ OPTS $ cassandra _ parms - cp " $ CLASSPATH " $ props " $ class " <nl> # Startup CassandraDaemon , background it , and write the pid . <nl> else <nl> - exec " $ JAVA " $ JVM _ OPTS $ cassandra _ parms - cp " $ CLASSPATH " $ props " $ class " < & - & <nl> + exec $ NUMACTL " $ JAVA " $ JVM _ OPTS $ cassandra _ parms - cp " $ CLASSPATH " $ props " $ class " < & - & <nl> [ ! - z " $ pidpath " ] & & printf " % d " $ ! > " $ pidpath " <nl> fi <nl>

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / gms / VersionedValue . java b / src / java / org / apache / cassandra / gms / VersionedValue . java 
 index 36c2f00 . . a779982 100644 
 - - - a / src / java / org / apache / cassandra / gms / VersionedValue . java 
 + + + b / src / java / org / apache / cassandra / gms / VersionedValue . java 
 @ @ - 43 , 9 + 43 , 9 @ @ import org . apache . commons . lang3 . StringUtils ; 
 * application wants to make available to the rest of the nodes in the cluster . 
 * Whenever a piece of state needs to be disseminated to the rest of cluster wrap 
 * the state in an instance of < i > ApplicationState < / i > and add it to the Gossiper . 
 - * < p / > 
 + * < p > < / p > 
 * e . g . if we want to disseminate load information for node A do the following : 
 - * < p / > 
 + * < p > < / p > 
 * ApplicationState loadState = new ApplicationState ( < string representation of load > ) ; 
 * Gossiper . instance . addApplicationState ( " LOAD STATE " , loadState ) ; 
 * / 
 diff - - git a / src / java / org / apache / cassandra / hadoop / AbstractColumnFamilyOutputFormat . java b / src / java / org / apache / cassandra / hadoop / AbstractColumnFamilyOutputFormat . java 
 index f4963fb . . f574641 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / AbstractColumnFamilyOutputFormat . java 
 + + + b / src / java / org / apache / cassandra / hadoop / AbstractColumnFamilyOutputFormat . java 
 @ @ - 67 , 8 + 67 , 6 @ @ public abstract class AbstractColumnFamilyOutputFormat < K , Y > extends OutputForma 
 * 
 * @ param context 
 * information about the job 
 - * @ throws IOException 
 - * when output should not be attempted 
 * / 
 public void checkOutputSpecs ( JobContext context ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyOutputFormat . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyOutputFormat . java 
 index 49aaf99 . . c5489c6 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyOutputFormat . java 
 + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyOutputFormat . java 
 @ @ - 60 , 7 + 60 , 6 @ @ public class ColumnFamilyOutputFormat extends AbstractColumnFamilyOutputFormat < B 
 * @ param context 
 * the information about the current task . 
 * @ return a { @ link RecordWriter } to write the output for the job . 
 - * @ throws IOException 
 * / 
 public ColumnFamilyRecordWriter getRecordWriter ( final TaskAttemptContext context ) throws InterruptedException 
 { 
 diff - - git a / src / java / org / apache / cassandra / io / IVersionedSerializer . java b / src / java / org / apache / cassandra / io / IVersionedSerializer . java 
 index 46494e1 . . 2572840 100644 
 - - - a / src / java / org / apache / cassandra / io / IVersionedSerializer . java 
 + + + b / src / java / org / apache / cassandra / io / IVersionedSerializer . java 
 @ @ - 30 , 7 + 30 , 7 @ @ public interface IVersionedSerializer < T > 
 * @ param t type that needs to be serialized 
 * @ param out DataOutput into which serialization needs to happen . 
 * @ param version protocol version 
 - * @ throws java . io . IOException 
 + * @ throws java . io . IOException if serialization fails 
 * / 
 public void serialize ( T t , DataOutputPlus out , int version ) throws IOException ; 
 
 @ @ - 39 , 7 + 39 , 7 @ @ public interface IVersionedSerializer < T > 
 * @ param in DataInput from which deserialization needs to happen . 
 * @ param version protocol version 
 * @ return the type that was deserialized 
 - * @ throws IOException 
 + * @ throws IOException if deserialization fails 
 * / 
 public T deserialize ( DataInput in , int version ) throws IOException ; 
 
 diff - - git a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java 
 index 7f7ab82 . . 3576057 100644 
 - - - a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java 
 + + + b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java 
 @ @ - 340 , 6 + 340 , 8 @ @ public class CompressionMetadata 
 / * * 
 * Reset the writer so that the next chunk offset written will be the 
 * one of { @ code chunkIndex } . 
 + * 
 + * @ param chunkIndex the next index to write 
 * / 
 public void resetAndTruncate ( int chunkIndex ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / io / compress / CompressionParameters . java b / src / java / org / apache / cassandra / io / compress / CompressionParameters . java 
 index d3436c0 . . d94fed4 100644 
 - - - a / src / java / org / apache / cassandra / io / compress / CompressionParameters . java 
 + + + b / src / java / org / apache / cassandra / io / compress / CompressionParameters . java 
 @ @ - 225 , 6 + 225 , 10 @ @ public class CompressionParameters 
 
 / * * 
 * Parse the chunk length ( in KB ) and returns it as bytes . 
 + * 
 + * @ param chLengthKB the length of the chunk to parse 
 + * @ return the chunk length in bytes 
 + * @ throws ConfigurationException if the chunk size is too large 
 * / 
 public static Integer parseChunkLength ( String chLengthKB ) throws ConfigurationException 
 { 
 diff - - git a / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java b / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java 
 index 7577567 . . c2eb08a 100644 
 - - - a / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java 
 + + + b / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java 
 @ @ - 74 , 6 + 74 , 8 @ @ public final class DataOutputBuffer extends DataOutputStreamPlus 
 / * * 
 * Returns the current contents of the buffer . Data is only valid to 
 * { @ link # getLength ( ) } . 
 + * 
 + * @ return the buffer contents 
 * / 
 public byte [ ] getData ( ) 
 { 
 @ @ - 93 , 7 + 95 , 7 @ @ public final class DataOutputBuffer extends DataOutputStreamPlus 
 return ByteBuffer . wrap ( out . buf , 0 , out . count ) ; 
 } 
 
 - / * * Returns the length of the valid data currently in the buffer . * / 
 + / * * @ return the length of the valid data currently in the buffer . * / 
 public int getLength ( ) 
 { 
 return ( ( FastByteArrayOutputStream ) out ) . count ; 
 diff - - git a / src / java / org / apache / cassandra / io / util / SequentialWriter . java b / src / java / org / apache / cassandra / io / util / SequentialWriter . java 
 index 7a7eb63 . . aea97aa 100644 
 - - - a / src / java / org / apache / cassandra / io / util / SequentialWriter . java 
 + + + b / src / java / org / apache / cassandra / io / util / SequentialWriter . java 
 @ @ - 322 , 11 + 322 , 13 @ @ public class SequentialWriter extends OutputStream implements WritableByteChanne 
 } 
 
 / * * 
 - * Return the current file pointer of the underlying on - disk file . 
 + * Returns the current file pointer of the underlying on - disk file . 
 * Note that since write works by buffering data , the value of this will increase by buffer 
 * size and not every write to the writer will modify this value . 
 * Furthermore , for compressed files , this value refers to compressed data , while the 
 * writer getFilePointer ( ) refers to uncompressedFile 
 + * 
 + * @ return the current file pointer 
 * / 
 public long getOnDiskFilePointer ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / repair / RepairJob . java b / src / java / org / apache / cassandra / repair / RepairJob . java 
 index b0d17ab . . 0b40d4a 100644 
 - - - a / src / java / org / apache / cassandra / repair / RepairJob . java 
 + + + b / src / java / org / apache / cassandra / repair / RepairJob . java 
 @ @ - 50 , 6 + 50 , 7 @ @ public class RepairJob extends AbstractFuture < RepairResult > implements Runnable 
 * @ param session RepairSession that this RepairJob belongs 
 * @ param columnFamily name of the ColumnFamily to repair 
 * @ param isSequential when true , validation runs sequentially among replica 
 + * @ param repairedAt when the repair occurred ( millis ) 
 * @ param taskExecutor Executor to run various repair tasks 
 * / 
 public RepairJob ( RepairSession session , 
 diff - - git a / src / java / org / apache / cassandra / repair / RepairSession . java b / src / java / org / apache / cassandra / repair / RepairSession . java 
 index 240a21c . . c273c4e 100644 
 - - - a / src / java / org / apache / cassandra / repair / RepairSession . java 
 + + + b / src / java / org / apache / cassandra / repair / RepairSession . java 
 @ @ - 106 , 10 + 106 , 13 @ @ public class RepairSession extends AbstractFuture < List < RepairResult > > implements 
 / * * 
 * Create new repair session . 
 * 
 + * @ param parentRepairSession the parent sessions id 
 + * @ param id this sessions id 
 * @ param range range to repair 
 * @ param keyspace name of keyspace 
 * @ param isSequential true if performing repair on snapshots sequentially 
 * @ param endpoints the data centers that should be part of the repair ; null for all DCs 
 + * @ param repairedAt when the repair occurred ( millis ) 
 * @ param cfnames names of columnfamilies 
 * / 
 public RepairSession ( UUID parentRepairSession , 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index 35db450 . . e4d262a 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 91 , 8 + 91 , 6 @ @ public class CassandraDaemon 
 * This is a hook for concrete daemons to initialize themselves suitably . 
 * 
 * Subclasses should override this to finish the job ( listening on ports , etc . ) 
 - * 
 - * @ throws IOException 
 * / 
 protected void setup ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / utils / memory / SlabAllocator . java b / src / java / org / apache / cassandra / utils / memory / SlabAllocator . java 
 index 19334ee . . 8defd25 100644 
 - - - a / src / java / org / apache / cassandra / utils / memory / SlabAllocator . java 
 + + + b / src / java / org / apache / cassandra / utils / memory / SlabAllocator . java 
 @ @ - 34 , 12 + 34 , 12 @ @ import sun . nio . ch . DirectBuffer ; 
 * The SlabAllocator is a bump - the - pointer allocator that allocates 
 * large ( 2MB by default ) regions and then doles them out to threads that request 
 * slices into the array . 
 - * < p / > 
 + * < p > < / p > 
 * The purpose of this class is to combat heap fragmentation in long lived 
 * objects : by ensuring that all allocations with similar lifetimes 
 * only to large regions of contiguous memory , we ensure that large blocks 
 * get freed up at the same time . 
 - * < p / > 
 + * < p > < / p > 
 * Otherwise , variable length byte arrays allocated end up 
 * interleaved throughout the heap , and the old generation gets progressively 
 * more fragmented until a stop - the - world compacting collection occurs .

NEAREST DIFF:
diff - - git a / bin / cassandra b / bin / cassandra 
 index 8ce8d57 . . 4dd2497 100755 
 - - - a / bin / cassandra 
 + + + b / bin / cassandra 
 @ @ - 89 , 6 + 89 , 16 @ @ else 
 JAVA = java 
 fi 
 
 + # If numactl is available , use it . For Cassandra , the priority is to 
 + # avoid disk I / O . Even for the purpose of CPU efficiency , we don ' t 
 + # really have CPU < - > data affinity anyway . 
 + if which numactl > / dev / null 2 > / dev / null 
 + then 
 + NUMACTL = " numactl - - interleave = all " 
 + else 
 + NUMACTL = " " 
 + fi 
 + 
 if [ - z " $ CASSANDRA _ CONF " - o - z " $ CLASSPATH " ] ; then 
 echo " You must set the CASSANDRA _ CONF and CLASSPATH vars " > & 2 
 exit 1 
 @ @ - 122 , 10 + 132 , 10 @ @ launch _ service ( ) 
 # to close stdout / stderr , but it ' s up to us not to background . 
 if [ " x $ foreground " ! = " x " ] ; then 
 cassandra _ parms = " $ cassandra _ parms - Dcassandra - foreground = yes " 
 - exec " $ JAVA " $ JVM _ OPTS $ cassandra _ parms - cp " $ CLASSPATH " $ props " $ class " 
 + exec $ NUMACTL " $ JAVA " $ JVM _ OPTS $ cassandra _ parms - cp " $ CLASSPATH " $ props " $ class " 
 # Startup CassandraDaemon , background it , and write the pid . 
 else 
 - exec " $ JAVA " $ JVM _ OPTS $ cassandra _ parms - cp " $ CLASSPATH " $ props " $ class " < & - & 
 + exec $ NUMACTL " $ JAVA " $ JVM _ OPTS $ cassandra _ parms - cp " $ CLASSPATH " $ props " $ class " < & - & 
 [ ! - z " $ pidpath " ] & & printf " % d " $ ! > " $ pidpath " 
 fi 

