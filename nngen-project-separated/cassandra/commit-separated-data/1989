BLEU SCORE: 0.06870636427700047

TEST MSG: fix test throw unknown keyspace error
GENERATED MSG: actually test persistent - ness in testPeristentStatistics

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java <nl> index 8de2e75 . . cd85d78 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java <nl> @ @ - 215 , 13 + 215 , 13 @ @ public class SSTableReaderTest <nl> public void testReadRateTracking ( ) <nl> { <nl> / / try to make sure CASSANDRA - 8239 never happens again <nl> - Keyspace keyspace = Keyspace . open ( " Keyspace1 " ) ; <nl> + Keyspace keyspace = Keyspace . open ( KEYSPACE1 ) ; <nl> ColumnFamilyStore store = keyspace . getColumnFamilyStore ( " Standard1 " ) ; <nl> <nl> for ( int j = 0 ; j < 10 ; j + + ) <nl> { <nl> ByteBuffer key = ByteBufferUtil . bytes ( String . valueOf ( j ) ) ; <nl> - Mutation rm = new Mutation ( " Keyspace1 " , key ) ; <nl> + Mutation rm = new Mutation ( KEYSPACE1 , key ) ; <nl> rm . add ( " Standard1 " , cellname ( " 0 " ) , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , j ) ; <nl> rm . apply ( ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 65e450b . . 1aed2cd 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> 1 . 0 . 4 <nl> * fix " liveSize " stat when sstables are removed ( CASSANDRA - 3496 ) <nl> * add bloom filter FP rates to nodetool cfstats ( CASSANDRA - 3347 ) <nl> + * record partitioner in sstable metadata component ( CASSANDRA - 3393 ) <nl> <nl> <nl> 1 . 0 . 3 <nl> diff - - git a / src / java / org / apache / cassandra / db / SystemTable . java b / src / java / org / apache / cassandra / db / SystemTable . java <nl> index 0095f54 . . b70f50f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SystemTable . java <nl> + + + b / src / java / org / apache / cassandra / db / SystemTable . java <nl> @ @ - 62 , 7 + 62 , 6 @ @ public class SystemTable <nl> private static final ByteBuffer TOKEN = ByteBufferUtil . bytes ( " Token " ) ; <nl> private static final ByteBuffer GENERATION = ByteBufferUtil . bytes ( " Generation " ) ; <nl> private static final ByteBuffer CLUSTERNAME = ByteBufferUtil . bytes ( " ClusterName " ) ; <nl> - private static final ByteBuffer PARTITIONER = ByteBufferUtil . bytes ( " Partioner " ) ; <nl> private static final ByteBuffer CURRENT _ LOCAL _ NODE _ ID _ KEY = ByteBufferUtil . bytes ( " CurrentLocal " ) ; <nl> private static final ByteBuffer ALL _ LOCAL _ NODE _ ID _ KEY = ByteBufferUtil . bytes ( " Local " ) ; <nl> <nl> @ @ - 247 , 7 + 246 , 7 @ @ public class SystemTable <nl> * One of three things will happen if you try to read the system table : <nl> * 1 . files are present and you can read them : great <nl> * 2 . no files are there : great ( new node is assumed ) <nl> - * 3 . files are present but you can ' t read them : bad ( suspect that the partitioner was changed ) . <nl> + * 3 . files are present but you can ' t read them : bad <nl> * @ throws ConfigurationException <nl> * / <nl> public static void checkHealth ( ) throws ConfigurationException , IOException <nl> @ @ - 260 , 28 + 259 , 26 @ @ public class SystemTable <nl> catch ( AssertionError err ) <nl> { <nl> / / this happens when a user switches from OPP to RP . <nl> - ConfigurationException ex = new ConfigurationException ( " Could not read system table . Did you change partitioners ? " ) ; <nl> + ConfigurationException ex = new ConfigurationException ( " Could not read system table ! " ) ; <nl> ex . initCause ( err ) ; <nl> throw ex ; <nl> } <nl> <nl> SortedSet < ByteBuffer > cols = new TreeSet < ByteBuffer > ( BytesType . instance ) ; <nl> - cols . add ( PARTITIONER ) ; <nl> cols . add ( CLUSTERNAME ) ; <nl> QueryFilter filter = QueryFilter . getNamesFilter ( decorate ( LOCATION _ KEY ) , new QueryPath ( STATUS _ CF ) , cols ) ; <nl> ColumnFamily cf = table . getColumnFamilyStore ( STATUS _ CF ) . getColumnFamily ( filter ) ; <nl> <nl> if ( cf = = null ) <nl> { <nl> - / / this is either a brand new node ( there will be no files ) , or the partitioner was changed from RP to OPP . <nl> + / / this is a brand new node <nl> ColumnFamilyStore cfs = table . getColumnFamilyStore ( STATUS _ CF ) ; <nl> if ( ! cfs . getSSTables ( ) . isEmpty ( ) ) <nl> - throw new ConfigurationException ( " Found system table files , but they couldn ' t be loaded . Did you change the partitioner ? " ) ; <nl> + throw new ConfigurationException ( " Found system table files , but they couldn ' t be loaded ! " ) ; <nl> <nl> / / no system files . this is a new node . <nl> RowMutation rm = new RowMutation ( Table . SYSTEM _ TABLE , LOCATION _ KEY ) ; <nl> cf = ColumnFamily . create ( Table . SYSTEM _ TABLE , SystemTable . STATUS _ CF ) ; <nl> - cf . addColumn ( new Column ( PARTITIONER , ByteBufferUtil . bytes ( DatabaseDescriptor . getPartitioner ( ) . getClass ( ) . getName ( ) ) , FBUtilities . timestampMicros ( ) ) ) ; <nl> cf . addColumn ( new Column ( CLUSTERNAME , ByteBufferUtil . bytes ( DatabaseDescriptor . getClusterName ( ) ) , FBUtilities . timestampMicros ( ) ) ) ; <nl> rm . add ( cf ) ; <nl> rm . apply ( ) ; <nl> @ @ - 290 , 12 + 287 , 8 @ @ public class SystemTable <nl> } <nl> <nl> <nl> - IColumn partitionerCol = cf . getColumn ( PARTITIONER ) ; <nl> IColumn clusterCol = cf . getColumn ( CLUSTERNAME ) ; <nl> - assert partitionerCol ! = null ; <nl> assert clusterCol ! = null ; <nl> - if ( ! DatabaseDescriptor . getPartitioner ( ) . getClass ( ) . getName ( ) . equals ( ByteBufferUtil . string ( partitionerCol . value ( ) ) ) ) <nl> - throw new ConfigurationException ( " Detected partitioner mismatch ! Did you change the partitioner ? " ) ; <nl> String savedClusterName = ByteBufferUtil . string ( clusterCol . value ( ) ) ; <nl> if ( ! DatabaseDescriptor . getClusterName ( ) . equals ( savedClusterName ) ) <nl> throw new ConfigurationException ( " Saved cluster name " + savedClusterName + " ! = configured name " + DatabaseDescriptor . getClusterName ( ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / Descriptor . java b / src / java / org / apache / cassandra / io / sstable / Descriptor . java <nl> index 809ad86 . . f22fb3a 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / Descriptor . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / Descriptor . java <nl> @ @ - 56 , 7 + 56 , 9 @ @ public class Descriptor <nl> / / f ( 0 . 7 . 0 ) : switched bloom filter implementations in data component <nl> / / g ( 0 . 8 ) : tracks flushed - at context in metadata component <nl> / / h ( 1 . 0 ) : tracks max client timestamp in metadata component <nl> - public static final String CURRENT _ VERSION = " hb " ; <nl> + / / hb ( 1 . 0 . 3 ) : records compression ration in metadata component <nl> + / / hc ( 1 . 0 . 4 ) : records partitioner in metadata component <nl> + public static final String CURRENT _ VERSION = " hc " ; <nl> <nl> public final File directory ; <nl> / * * version has the following format : < code > [ a - z ] + < / code > * / <nl> @ @ - 75 , 6 + 77 , 7 @ @ public class Descriptor <nl> public final boolean metadataIncludesReplayPosition ; <nl> public final boolean tracksMaxTimestamp ; <nl> public final boolean hasCompressionRatio ; <nl> + public final boolean hasPartitioner ; <nl> <nl> public enum TempState <nl> { <nl> @ @ - 117 , 6 + 120 , 7 @ @ public class Descriptor <nl> metadataIncludesReplayPosition = version . compareTo ( " g " ) > = 0 ; <nl> tracksMaxTimestamp = version . compareTo ( " h " ) > = 0 ; <nl> hasCompressionRatio = version . compareTo ( " hb " ) > = 0 ; <nl> + hasPartitioner = version . compareTo ( " hc " ) > = 0 ; <nl> isLatestVersion = version . compareTo ( CURRENT _ VERSION ) = = 0 ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableMetadata . java b / src / java / org / apache / cassandra / io / sstable / SSTableMetadata . java <nl> index 06935e8 . . 8d185f7 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableMetadata . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableMetadata . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import java . io . IOException ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . commitlog . ReplayPosition ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . utils . EstimatedHistogram ; <nl> @ @ - 40 , 6 + 41 , 8 @ @ import org . apache . cassandra . utils . EstimatedHistogram ; <nl> * - estimated column count histogram <nl> * - replay position <nl> * - max column timestamp <nl> + * - compression ratio <nl> + * - partitioner <nl> * <nl> * An SSTableMetadata should be instantiated via the Collector , openFromDescriptor ( ) <nl> * or createDefaultInstance ( ) <nl> @ @ - 52 , 20 + 55 , 27 @ @ public class SSTableMetadata <nl> protected final ReplayPosition replayPosition ; <nl> protected final long maxTimestamp ; <nl> protected final double compressionRatio ; <nl> + protected final String partitioner ; <nl> public static final SSTableMetadataSerializer serializer = new SSTableMetadataSerializer ( ) ; <nl> <nl> private SSTableMetadata ( ) <nl> { <nl> - this ( defaultRowSizeHistogram ( ) , defaultColumnCountHistogram ( ) , ReplayPosition . NONE , Long . MIN _ VALUE , Double . MIN _ VALUE ) ; <nl> + this ( defaultRowSizeHistogram ( ) , <nl> + defaultColumnCountHistogram ( ) , <nl> + ReplayPosition . NONE , <nl> + Long . MIN _ VALUE , <nl> + Double . MIN _ VALUE , <nl> + DatabaseDescriptor . getPartitioner ( ) . getClass ( ) . getCanonicalName ( ) ) ; <nl> } <nl> <nl> - private SSTableMetadata ( EstimatedHistogram rowSizes , EstimatedHistogram columnCounts , ReplayPosition replayPosition , long maxTimestamp , double cr ) <nl> + private SSTableMetadata ( EstimatedHistogram rowSizes , EstimatedHistogram columnCounts , ReplayPosition replayPosition , long maxTimestamp , double cr , String partitioner ) <nl> { <nl> this . estimatedRowSize = rowSizes ; <nl> this . estimatedColumnCount = columnCounts ; <nl> this . replayPosition = replayPosition ; <nl> this . maxTimestamp = maxTimestamp ; <nl> this . compressionRatio = cr ; <nl> + this . partitioner = partitioner ; <nl> } <nl> <nl> public static SSTableMetadata createDefaultInstance ( ) <nl> @ @ - 103 , 6 + 113 , 11 @ @ public class SSTableMetadata <nl> return compressionRatio ; <nl> } <nl> <nl> + public String getPartitioner ( ) <nl> + { <nl> + return partitioner ; <nl> + } <nl> + <nl> static EstimatedHistogram defaultColumnCountHistogram ( ) <nl> { <nl> / / EH of 114 can track a max value of 2395318855 , i . e . , > 2B columns <nl> @ @ - 158 , 7 + 173 , 12 @ @ public class SSTableMetadata <nl> <nl> public SSTableMetadata finalizeMetadata ( ) <nl> { <nl> - return new SSTableMetadata ( estimatedRowSize , estimatedColumnCount , replayPosition , maxTimestamp , compressionRatio ) ; <nl> + return new SSTableMetadata ( estimatedRowSize , <nl> + estimatedColumnCount , <nl> + replayPosition , <nl> + maxTimestamp , <nl> + compressionRatio , <nl> + DatabaseDescriptor . getPartitioner ( ) . getClass ( ) . getCanonicalName ( ) ) ; <nl> } <nl> <nl> public Collector estimatedRowSize ( EstimatedHistogram estimatedRowSize ) <nl> @ @ - 191 , 6 + 211 , 7 @ @ public class SSTableMetadata <nl> ReplayPosition . serializer . serialize ( sstableStats . getReplayPosition ( ) , dos ) ; <nl> dos . writeLong ( sstableStats . getMaxTimestamp ( ) ) ; <nl> dos . writeDouble ( sstableStats . getCompressionRatio ( ) ) ; <nl> + dos . writeUTF ( sstableStats . getPartitioner ( ) ) ; <nl> } <nl> <nl> public SSTableMetadata deserialize ( Descriptor descriptor ) throws IOException <nl> @ @ - 223 , 9 + 244 , 12 @ @ public class SSTableMetadata <nl> : ReplayPosition . NONE ; <nl> long maxTimestamp = desc . tracksMaxTimestamp ? dis . readLong ( ) : Long . MIN _ VALUE ; <nl> double compressionRatio = desc . hasCompressionRatio <nl> - ? dis . readDouble ( ) <nl> - : Double . MIN _ VALUE ; <nl> - return new SSTableMetadata ( rowSizes , columnCounts , replayPosition , maxTimestamp , compressionRatio ) ; <nl> + ? dis . readDouble ( ) <nl> + : Double . MIN _ VALUE ; <nl> + String partitioner = desc . hasPartitioner <nl> + ? dis . readUTF ( ) <nl> + : DatabaseDescriptor . getPartitioner ( ) . getClass ( ) . getCanonicalName ( ) ; <nl> + return new SSTableMetadata ( rowSizes , columnCounts , replayPosition , maxTimestamp , compressionRatio , partitioner ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> index d07c6ea . . 1381a3f 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> @ @ - 137 , 6 + 137 , 12 @ @ public class SSTableReader extends SSTable <nl> ? SSTableMetadata . serializer . deserialize ( descriptor ) <nl> : SSTableMetadata . createDefaultInstance ( ) ; <nl> <nl> + / / check if sstable is created using same partitioner as this node <nl> + String partitionerName = partitioner . getClass ( ) . getCanonicalName ( ) ; <nl> + if ( ! partitionerName . equals ( sstableMetadata . getPartitioner ( ) ) ) <nl> + throw new RuntimeException ( String . format ( " Cannot open % s because partitioner does not match % s " , <nl> + descriptor , partitionerName ) ) ; <nl> + <nl> SSTableReader sstable = new SSTableReader ( descriptor , <nl> components , <nl> metadata ,

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java 
 index 8de2e75 . . cd85d78 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java 
 @ @ - 215 , 13 + 215 , 13 @ @ public class SSTableReaderTest 
 public void testReadRateTracking ( ) 
 { 
 / / try to make sure CASSANDRA - 8239 never happens again 
 - Keyspace keyspace = Keyspace . open ( " Keyspace1 " ) ; 
 + Keyspace keyspace = Keyspace . open ( KEYSPACE1 ) ; 
 ColumnFamilyStore store = keyspace . getColumnFamilyStore ( " Standard1 " ) ; 
 
 for ( int j = 0 ; j < 10 ; j + + ) 
 { 
 ByteBuffer key = ByteBufferUtil . bytes ( String . valueOf ( j ) ) ; 
 - Mutation rm = new Mutation ( " Keyspace1 " , key ) ; 
 + Mutation rm = new Mutation ( KEYSPACE1 , key ) ; 
 rm . add ( " Standard1 " , cellname ( " 0 " ) , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , j ) ; 
 rm . apply ( ) ; 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 65e450b . . 1aed2cd 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 1 . 0 . 4 
 * fix " liveSize " stat when sstables are removed ( CASSANDRA - 3496 ) 
 * add bloom filter FP rates to nodetool cfstats ( CASSANDRA - 3347 ) 
 + * record partitioner in sstable metadata component ( CASSANDRA - 3393 ) 
 
 
 1 . 0 . 3 
 diff - - git a / src / java / org / apache / cassandra / db / SystemTable . java b / src / java / org / apache / cassandra / db / SystemTable . java 
 index 0095f54 . . b70f50f 100644 
 - - - a / src / java / org / apache / cassandra / db / SystemTable . java 
 + + + b / src / java / org / apache / cassandra / db / SystemTable . java 
 @ @ - 62 , 7 + 62 , 6 @ @ public class SystemTable 
 private static final ByteBuffer TOKEN = ByteBufferUtil . bytes ( " Token " ) ; 
 private static final ByteBuffer GENERATION = ByteBufferUtil . bytes ( " Generation " ) ; 
 private static final ByteBuffer CLUSTERNAME = ByteBufferUtil . bytes ( " ClusterName " ) ; 
 - private static final ByteBuffer PARTITIONER = ByteBufferUtil . bytes ( " Partioner " ) ; 
 private static final ByteBuffer CURRENT _ LOCAL _ NODE _ ID _ KEY = ByteBufferUtil . bytes ( " CurrentLocal " ) ; 
 private static final ByteBuffer ALL _ LOCAL _ NODE _ ID _ KEY = ByteBufferUtil . bytes ( " Local " ) ; 
 
 @ @ - 247 , 7 + 246 , 7 @ @ public class SystemTable 
 * One of three things will happen if you try to read the system table : 
 * 1 . files are present and you can read them : great 
 * 2 . no files are there : great ( new node is assumed ) 
 - * 3 . files are present but you can ' t read them : bad ( suspect that the partitioner was changed ) . 
 + * 3 . files are present but you can ' t read them : bad 
 * @ throws ConfigurationException 
 * / 
 public static void checkHealth ( ) throws ConfigurationException , IOException 
 @ @ - 260 , 28 + 259 , 26 @ @ public class SystemTable 
 catch ( AssertionError err ) 
 { 
 / / this happens when a user switches from OPP to RP . 
 - ConfigurationException ex = new ConfigurationException ( " Could not read system table . Did you change partitioners ? " ) ; 
 + ConfigurationException ex = new ConfigurationException ( " Could not read system table ! " ) ; 
 ex . initCause ( err ) ; 
 throw ex ; 
 } 
 
 SortedSet < ByteBuffer > cols = new TreeSet < ByteBuffer > ( BytesType . instance ) ; 
 - cols . add ( PARTITIONER ) ; 
 cols . add ( CLUSTERNAME ) ; 
 QueryFilter filter = QueryFilter . getNamesFilter ( decorate ( LOCATION _ KEY ) , new QueryPath ( STATUS _ CF ) , cols ) ; 
 ColumnFamily cf = table . getColumnFamilyStore ( STATUS _ CF ) . getColumnFamily ( filter ) ; 
 
 if ( cf = = null ) 
 { 
 - / / this is either a brand new node ( there will be no files ) , or the partitioner was changed from RP to OPP . 
 + / / this is a brand new node 
 ColumnFamilyStore cfs = table . getColumnFamilyStore ( STATUS _ CF ) ; 
 if ( ! cfs . getSSTables ( ) . isEmpty ( ) ) 
 - throw new ConfigurationException ( " Found system table files , but they couldn ' t be loaded . Did you change the partitioner ? " ) ; 
 + throw new ConfigurationException ( " Found system table files , but they couldn ' t be loaded ! " ) ; 
 
 / / no system files . this is a new node . 
 RowMutation rm = new RowMutation ( Table . SYSTEM _ TABLE , LOCATION _ KEY ) ; 
 cf = ColumnFamily . create ( Table . SYSTEM _ TABLE , SystemTable . STATUS _ CF ) ; 
 - cf . addColumn ( new Column ( PARTITIONER , ByteBufferUtil . bytes ( DatabaseDescriptor . getPartitioner ( ) . getClass ( ) . getName ( ) ) , FBUtilities . timestampMicros ( ) ) ) ; 
 cf . addColumn ( new Column ( CLUSTERNAME , ByteBufferUtil . bytes ( DatabaseDescriptor . getClusterName ( ) ) , FBUtilities . timestampMicros ( ) ) ) ; 
 rm . add ( cf ) ; 
 rm . apply ( ) ; 
 @ @ - 290 , 12 + 287 , 8 @ @ public class SystemTable 
 } 
 
 
 - IColumn partitionerCol = cf . getColumn ( PARTITIONER ) ; 
 IColumn clusterCol = cf . getColumn ( CLUSTERNAME ) ; 
 - assert partitionerCol ! = null ; 
 assert clusterCol ! = null ; 
 - if ( ! DatabaseDescriptor . getPartitioner ( ) . getClass ( ) . getName ( ) . equals ( ByteBufferUtil . string ( partitionerCol . value ( ) ) ) ) 
 - throw new ConfigurationException ( " Detected partitioner mismatch ! Did you change the partitioner ? " ) ; 
 String savedClusterName = ByteBufferUtil . string ( clusterCol . value ( ) ) ; 
 if ( ! DatabaseDescriptor . getClusterName ( ) . equals ( savedClusterName ) ) 
 throw new ConfigurationException ( " Saved cluster name " + savedClusterName + " ! = configured name " + DatabaseDescriptor . getClusterName ( ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / Descriptor . java b / src / java / org / apache / cassandra / io / sstable / Descriptor . java 
 index 809ad86 . . f22fb3a 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / Descriptor . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / Descriptor . java 
 @ @ - 56 , 7 + 56 , 9 @ @ public class Descriptor 
 / / f ( 0 . 7 . 0 ) : switched bloom filter implementations in data component 
 / / g ( 0 . 8 ) : tracks flushed - at context in metadata component 
 / / h ( 1 . 0 ) : tracks max client timestamp in metadata component 
 - public static final String CURRENT _ VERSION = " hb " ; 
 + / / hb ( 1 . 0 . 3 ) : records compression ration in metadata component 
 + / / hc ( 1 . 0 . 4 ) : records partitioner in metadata component 
 + public static final String CURRENT _ VERSION = " hc " ; 
 
 public final File directory ; 
 / * * version has the following format : < code > [ a - z ] + < / code > * / 
 @ @ - 75 , 6 + 77 , 7 @ @ public class Descriptor 
 public final boolean metadataIncludesReplayPosition ; 
 public final boolean tracksMaxTimestamp ; 
 public final boolean hasCompressionRatio ; 
 + public final boolean hasPartitioner ; 
 
 public enum TempState 
 { 
 @ @ - 117 , 6 + 120 , 7 @ @ public class Descriptor 
 metadataIncludesReplayPosition = version . compareTo ( " g " ) > = 0 ; 
 tracksMaxTimestamp = version . compareTo ( " h " ) > = 0 ; 
 hasCompressionRatio = version . compareTo ( " hb " ) > = 0 ; 
 + hasPartitioner = version . compareTo ( " hc " ) > = 0 ; 
 isLatestVersion = version . compareTo ( CURRENT _ VERSION ) = = 0 ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableMetadata . java b / src / java / org / apache / cassandra / io / sstable / SSTableMetadata . java 
 index 06935e8 . . 8d185f7 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableMetadata . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableMetadata . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import java . io . IOException ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . commitlog . ReplayPosition ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . utils . EstimatedHistogram ; 
 @ @ - 40 , 6 + 41 , 8 @ @ import org . apache . cassandra . utils . EstimatedHistogram ; 
 * - estimated column count histogram 
 * - replay position 
 * - max column timestamp 
 + * - compression ratio 
 + * - partitioner 
 * 
 * An SSTableMetadata should be instantiated via the Collector , openFromDescriptor ( ) 
 * or createDefaultInstance ( ) 
 @ @ - 52 , 20 + 55 , 27 @ @ public class SSTableMetadata 
 protected final ReplayPosition replayPosition ; 
 protected final long maxTimestamp ; 
 protected final double compressionRatio ; 
 + protected final String partitioner ; 
 public static final SSTableMetadataSerializer serializer = new SSTableMetadataSerializer ( ) ; 
 
 private SSTableMetadata ( ) 
 { 
 - this ( defaultRowSizeHistogram ( ) , defaultColumnCountHistogram ( ) , ReplayPosition . NONE , Long . MIN _ VALUE , Double . MIN _ VALUE ) ; 
 + this ( defaultRowSizeHistogram ( ) , 
 + defaultColumnCountHistogram ( ) , 
 + ReplayPosition . NONE , 
 + Long . MIN _ VALUE , 
 + Double . MIN _ VALUE , 
 + DatabaseDescriptor . getPartitioner ( ) . getClass ( ) . getCanonicalName ( ) ) ; 
 } 
 
 - private SSTableMetadata ( EstimatedHistogram rowSizes , EstimatedHistogram columnCounts , ReplayPosition replayPosition , long maxTimestamp , double cr ) 
 + private SSTableMetadata ( EstimatedHistogram rowSizes , EstimatedHistogram columnCounts , ReplayPosition replayPosition , long maxTimestamp , double cr , String partitioner ) 
 { 
 this . estimatedRowSize = rowSizes ; 
 this . estimatedColumnCount = columnCounts ; 
 this . replayPosition = replayPosition ; 
 this . maxTimestamp = maxTimestamp ; 
 this . compressionRatio = cr ; 
 + this . partitioner = partitioner ; 
 } 
 
 public static SSTableMetadata createDefaultInstance ( ) 
 @ @ - 103 , 6 + 113 , 11 @ @ public class SSTableMetadata 
 return compressionRatio ; 
 } 
 
 + public String getPartitioner ( ) 
 + { 
 + return partitioner ; 
 + } 
 + 
 static EstimatedHistogram defaultColumnCountHistogram ( ) 
 { 
 / / EH of 114 can track a max value of 2395318855 , i . e . , > 2B columns 
 @ @ - 158 , 7 + 173 , 12 @ @ public class SSTableMetadata 
 
 public SSTableMetadata finalizeMetadata ( ) 
 { 
 - return new SSTableMetadata ( estimatedRowSize , estimatedColumnCount , replayPosition , maxTimestamp , compressionRatio ) ; 
 + return new SSTableMetadata ( estimatedRowSize , 
 + estimatedColumnCount , 
 + replayPosition , 
 + maxTimestamp , 
 + compressionRatio , 
 + DatabaseDescriptor . getPartitioner ( ) . getClass ( ) . getCanonicalName ( ) ) ; 
 } 
 
 public Collector estimatedRowSize ( EstimatedHistogram estimatedRowSize ) 
 @ @ - 191 , 6 + 211 , 7 @ @ public class SSTableMetadata 
 ReplayPosition . serializer . serialize ( sstableStats . getReplayPosition ( ) , dos ) ; 
 dos . writeLong ( sstableStats . getMaxTimestamp ( ) ) ; 
 dos . writeDouble ( sstableStats . getCompressionRatio ( ) ) ; 
 + dos . writeUTF ( sstableStats . getPartitioner ( ) ) ; 
 } 
 
 public SSTableMetadata deserialize ( Descriptor descriptor ) throws IOException 
 @ @ - 223 , 9 + 244 , 12 @ @ public class SSTableMetadata 
 : ReplayPosition . NONE ; 
 long maxTimestamp = desc . tracksMaxTimestamp ? dis . readLong ( ) : Long . MIN _ VALUE ; 
 double compressionRatio = desc . hasCompressionRatio 
 - ? dis . readDouble ( ) 
 - : Double . MIN _ VALUE ; 
 - return new SSTableMetadata ( rowSizes , columnCounts , replayPosition , maxTimestamp , compressionRatio ) ; 
 + ? dis . readDouble ( ) 
 + : Double . MIN _ VALUE ; 
 + String partitioner = desc . hasPartitioner 
 + ? dis . readUTF ( ) 
 + : DatabaseDescriptor . getPartitioner ( ) . getClass ( ) . getCanonicalName ( ) ; 
 + return new SSTableMetadata ( rowSizes , columnCounts , replayPosition , maxTimestamp , compressionRatio , partitioner ) ; 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 index d07c6ea . . 1381a3f 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 @ @ - 137 , 6 + 137 , 12 @ @ public class SSTableReader extends SSTable 
 ? SSTableMetadata . serializer . deserialize ( descriptor ) 
 : SSTableMetadata . createDefaultInstance ( ) ; 
 
 + / / check if sstable is created using same partitioner as this node 
 + String partitionerName = partitioner . getClass ( ) . getCanonicalName ( ) ; 
 + if ( ! partitionerName . equals ( sstableMetadata . getPartitioner ( ) ) ) 
 + throw new RuntimeException ( String . format ( " Cannot open % s because partitioner does not match % s " , 
 + descriptor , partitionerName ) ) ; 
 + 
 SSTableReader sstable = new SSTableReader ( descriptor , 
 components , 
 metadata ,
