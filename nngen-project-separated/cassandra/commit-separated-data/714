BLEU SCORE: 0.03283637368030199

TEST MSG: Collect metrics on queries by consistency level
GENERATED MSG: merge from 0 . 5 branch

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 1636e3a . . 98f9c24 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 10 <nl> + * Collect metrics on queries by consistency level ( CASSANDRA - 7384 ) <nl> * Add support for GROUP BY to SELECT statement ( CASSANDRA - 10707 ) <nl> * Deprecate memtable _ cleanup _ threshold and update default for memtable _ flush _ writers ( CASSANDRA - 12228 ) <nl> * Upgrade to OHC 0 . 4 . 4 ( CASSANDRA - 12133 ) <nl> @ @ - 57 , 10 + 58 , 7 @ @ Merged from 2 . 1 : <nl> * cannot use cql since upgrading python to 2 . 7 . 11 + ( CASSANDRA - 11850 ) <nl> * Allow STCS - in - L0 compactions to reduce scope with LCS ( CASSANDRA - 12040 ) <nl> <nl> - < < < < < < < HEAD <nl> - = = = = = = = <nl> <nl> - > > > > > > > cassandra - 3 . 9 <nl> 3 . 8 <nl> * RTE from new CDC column breaks in flight queries ( CASSANDRA - 12236 ) <nl> * Fix hdr logging for single operation workloads ( CASSANDRA - 12145 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index bc8c46c . . 1bfa1b0 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 100 , 6 + 100 , 8 @ @ public class StorageProxy implements StorageProxyMBean <nl> private static final CASClientRequestMetrics casWriteMetrics = new CASClientRequestMetrics ( " CASWrite " ) ; <nl> private static final CASClientRequestMetrics casReadMetrics = new CASClientRequestMetrics ( " CASRead " ) ; <nl> private static final ViewWriteMetrics viewWriteMetrics = new ViewWriteMetrics ( " ViewWrite " ) ; <nl> + private static final Map < ConsistencyLevel , ClientRequestMetrics > readMetricsMap = new EnumMap < > ( ConsistencyLevel . class ) ; <nl> + private static final Map < ConsistencyLevel , ClientRequestMetrics > writeMetricsMap = new EnumMap < > ( ConsistencyLevel . class ) ; <nl> <nl> private static final double CONCURRENT _ SUBREQUESTS _ MARGIN = 0 . 10 ; <nl> <nl> @ @ - 166 , 6 + 168 , 12 @ @ public class StorageProxy implements StorageProxyMBean <nl> . execute ( counterWriteTask ( mutation , targets , responseHandler , localDataCenter ) ) ; <nl> } <nl> } ; <nl> + <nl> + for ( ConsistencyLevel level : ConsistencyLevel . values ( ) ) <nl> + { <nl> + readMetricsMap . put ( level , new ClientRequestMetrics ( " Read - " + level . name ( ) ) ) ; <nl> + writeMetricsMap . put ( level , new ClientRequestMetrics ( " Write - " + level . name ( ) ) ) ; <nl> + } <nl> } <nl> <nl> / * * <nl> @ @ - 291 , 23 + 299 , 28 @ @ public class StorageProxy implements StorageProxyMBean <nl> catch ( WriteTimeoutException | ReadTimeoutException e ) <nl> { <nl> casWriteMetrics . timeouts . mark ( ) ; <nl> + writeMetricsMap . get ( consistencyForPaxos ) . timeouts . mark ( ) ; <nl> throw e ; <nl> } <nl> catch ( WriteFailureException | ReadFailureException e ) <nl> { <nl> casWriteMetrics . failures . mark ( ) ; <nl> + writeMetricsMap . get ( consistencyForPaxos ) . failures . mark ( ) ; <nl> throw e ; <nl> } <nl> catch ( UnavailableException e ) <nl> { <nl> casWriteMetrics . unavailables . mark ( ) ; <nl> + writeMetricsMap . get ( consistencyForPaxos ) . unavailables . mark ( ) ; <nl> throw e ; <nl> } <nl> finally <nl> { <nl> if ( contentions > 0 ) <nl> casWriteMetrics . contention . update ( contentions ) ; <nl> - casWriteMetrics . addNano ( System . nanoTime ( ) - start ) ; <nl> + final long latency = System . nanoTime ( ) - start ; <nl> + casWriteMetrics . addNano ( latency ) ; <nl> + writeMetricsMap . get ( consistencyForPaxos ) . addNano ( latency ) ; <nl> } <nl> } <nl> <nl> @ @ - 626 , 6 + 639 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> if ( ex instanceof WriteFailureException ) <nl> { <nl> writeMetrics . failures . mark ( ) ; <nl> + writeMetricsMap . get ( consistency _ level ) . failures . mark ( ) ; <nl> WriteFailureException fe = ( WriteFailureException ) ex ; <nl> Tracing . trace ( " Write failure ; received { } of { } required replies , failed { } requests " , <nl> fe . received , fe . blockFor , fe . failures ) ; <nl> @ @ - 633 , 6 + 647 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> else <nl> { <nl> writeMetrics . timeouts . mark ( ) ; <nl> + writeMetricsMap . get ( consistency _ level ) . timeouts . mark ( ) ; <nl> WriteTimeoutException te = ( WriteTimeoutException ) ex ; <nl> Tracing . trace ( " Write timeout ; received { } of { } required replies " , te . received , te . blockFor ) ; <nl> } <nl> @ @ - 642 , 18 + 657 , 22 @ @ public class StorageProxy implements StorageProxyMBean <nl> catch ( UnavailableException e ) <nl> { <nl> writeMetrics . unavailables . mark ( ) ; <nl> + writeMetricsMap . get ( consistency _ level ) . unavailables . mark ( ) ; <nl> Tracing . trace ( " Unavailable " ) ; <nl> throw e ; <nl> } <nl> catch ( OverloadedException e ) <nl> { <nl> writeMetrics . unavailables . mark ( ) ; <nl> + writeMetricsMap . get ( consistency _ level ) . unavailables . mark ( ) ; <nl> Tracing . trace ( " Overloaded " ) ; <nl> throw e ; <nl> } <nl> finally <nl> { <nl> - writeMetrics . addNano ( System . nanoTime ( ) - startTime ) ; <nl> + long latency = System . nanoTime ( ) - startTime ; <nl> + writeMetrics . addNano ( latency ) ; <nl> + writeMetricsMap . get ( consistency _ level ) . addNano ( latency ) ; <nl> } <nl> } <nl> <nl> @ @ - 899 , 24 + 918 , 30 @ @ public class StorageProxy implements StorageProxyMBean <nl> catch ( UnavailableException e ) <nl> { <nl> writeMetrics . unavailables . mark ( ) ; <nl> + writeMetricsMap . get ( consistency _ level ) . unavailables . mark ( ) ; <nl> Tracing . trace ( " Unavailable " ) ; <nl> throw e ; <nl> } <nl> catch ( WriteTimeoutException e ) <nl> { <nl> writeMetrics . timeouts . mark ( ) ; <nl> + writeMetricsMap . get ( consistency _ level ) . timeouts . mark ( ) ; <nl> Tracing . trace ( " Write timeout ; received { } of { } required replies " , e . received , e . blockFor ) ; <nl> throw e ; <nl> } <nl> catch ( WriteFailureException e ) <nl> { <nl> writeMetrics . failures . mark ( ) ; <nl> + writeMetricsMap . get ( consistency _ level ) . failures . mark ( ) ; <nl> Tracing . trace ( " Write failure ; received { } of { } required replies " , e . received , e . blockFor ) ; <nl> throw e ; <nl> } <nl> finally <nl> { <nl> - writeMetrics . addNano ( System . nanoTime ( ) - startTime ) ; <nl> + long latency = System . nanoTime ( ) - startTime ; <nl> + writeMetrics . addNano ( latency ) ; <nl> + writeMetricsMap . get ( consistency _ level ) . addNano ( latency ) ; <nl> + <nl> } <nl> } <nl> <nl> @ @ - 1517 , 6 + 1542 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> if ( StorageService . instance . isBootstrapMode ( ) & & ! systemKeyspaceQuery ( group . commands ) ) <nl> { <nl> readMetrics . unavailables . mark ( ) ; <nl> + readMetricsMap . get ( consistencyLevel ) . unavailables . mark ( ) ; <nl> throw new IsBootstrappingException ( ) ; <nl> } <nl> <nl> @ @ - 1571 , 18 + 1597 , 21 @ @ public class StorageProxy implements StorageProxyMBean <nl> { <nl> readMetrics . unavailables . mark ( ) ; <nl> casReadMetrics . unavailables . mark ( ) ; <nl> + readMetricsMap . get ( consistencyLevel ) . unavailables . mark ( ) ; <nl> throw e ; <nl> } <nl> catch ( ReadTimeoutException e ) <nl> { <nl> readMetrics . timeouts . mark ( ) ; <nl> casReadMetrics . timeouts . mark ( ) ; <nl> + readMetricsMap . get ( consistencyLevel ) . timeouts . mark ( ) ; <nl> throw e ; <nl> } <nl> catch ( ReadFailureException e ) <nl> { <nl> readMetrics . failures . mark ( ) ; <nl> casReadMetrics . failures . mark ( ) ; <nl> + readMetricsMap . get ( consistencyLevel ) . failures . mark ( ) ; <nl> throw e ; <nl> } <nl> finally <nl> @ @ - 1590 , 6 + 1619 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> long latency = System . nanoTime ( ) - start ; <nl> readMetrics . addNano ( latency ) ; <nl> casReadMetrics . addNano ( latency ) ; <nl> + readMetricsMap . get ( consistencyLevel ) . addNano ( latency ) ; <nl> Keyspace . open ( metadata . ksName ) . getColumnFamilyStore ( metadata . cfName ) . metric . coordinatorReadLatency . update ( latency , TimeUnit . NANOSECONDS ) ; <nl> } <nl> <nl> @ @ - 1613 , 22 + 1643 , 26 @ @ public class StorageProxy implements StorageProxyMBean <nl> catch ( UnavailableException e ) <nl> { <nl> readMetrics . unavailables . mark ( ) ; <nl> + readMetricsMap . get ( consistencyLevel ) . unavailables . mark ( ) ; <nl> throw e ; <nl> } <nl> catch ( ReadTimeoutException e ) <nl> { <nl> readMetrics . timeouts . mark ( ) ; <nl> + readMetricsMap . get ( consistencyLevel ) . timeouts . mark ( ) ; <nl> throw e ; <nl> } <nl> catch ( ReadFailureException e ) <nl> { <nl> readMetrics . failures . mark ( ) ; <nl> + readMetricsMap . get ( consistencyLevel ) . failures . mark ( ) ; <nl> throw e ; <nl> } <nl> finally <nl> { <nl> long latency = System . nanoTime ( ) - start ; <nl> readMetrics . addNano ( latency ) ; <nl> + readMetricsMap . get ( consistencyLevel ) . addNano ( latency ) ; <nl> / / TODO avoid giving every command the same latency number . Can fix this in CASSADRA - 5329 <nl> for ( ReadCommand command : group . commands ) <nl> Keyspace . openAndGetStore ( command . metadata ( ) ) . metric . coordinatorReadLatency . update ( latency , TimeUnit . NANOSECONDS ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 5c7902c . . e0863eb 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 8 @ @ <nl> - 0 . 5 . 0 dev <nl> + 0 . 5 . 0 RC1 <nl> + * Fix potential NPE in get _ range _ slice ( CASSANDRA - 623 ) <nl> + <nl> + <nl> + 0 . 5 . 0 beta 2 <nl> * Bootstrap improvements ( several tickets ) <nl> * add nodeprobe repair anti - entropy feature ( CASSANDRA - 193 , CASSANDRA - 520 ) <nl> * fix possibility of partition when many nodes restart at once <nl> @ @ - 20 , 6 + 24 , 7 @ @ <nl> incorrectly ( and temporarily ) marked as down ( CASSANDRA - 610 ) <nl> * respect memtable thresholds during log replay ( CASSANDRA - 609 ) <nl> * support ConsistencyLevel . ALL on read ( CASSANDRA - 584 ) <nl> + * add nodeprobe removetoken command ( CASSANDRA - 564 ) <nl> <nl> <nl> 0 . 5 . 0 beta <nl> diff - - git a / build . xml b / build . xml <nl> index b47d5b3 . . 3d965e9 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 37 , 7 + 37 , 7 @ @ <nl> < property name = " test . name " value = " * Test " / > <nl> < property name = " test . unit . src " value = " $ { test . dir } / unit " / > <nl> < property name = " dist . dir " value = " $ { build . dir } / dist " / > <nl> - < property name = " version " value = " 0 . 4 . 2 " / > <nl> + < property name = " version " value = " 0 . 5 . 0 - beta2 " / > <nl> < property name = " final . name " value = " $ { ant . project . name } - $ { version } " / > <nl> <nl> < ! - - http : / / cobertura . sourceforge . net / - - > <nl> diff - - git a / interface / cassandra . thrift b / interface / cassandra . thrift <nl> index 0a30153 . . 8eb6226 100644 <nl> - - - a / interface / cassandra . thrift <nl> + + + b / interface / cassandra . thrift <nl> @ @ - 40 , 7 + 40 , 7 @ @ namespace rb CassandraThrift <nl> # no promises are made other than " if both are equal , you ' re good . " <nl> # in particular , don ' t try to parse numeric information out and assume <nl> # that a " greater " version is a superset of a " smaller " one . <nl> - const string VERSION = " 0 . 5 - beta1 " <nl> + const string VERSION = " 0 . 5 - beta2 " <nl> <nl> <nl> # <nl> diff - - git a / interface / gen - java / org / apache / cassandra / service / Constants . java b / interface / gen - java / org / apache / cassandra / service / Constants . java <nl> index 1b9a2ed . . 2228465 100644 <nl> - - - a / interface / gen - java / org / apache / cassandra / service / Constants . java <nl> + + + b / interface / gen - java / org / apache / cassandra / service / Constants . java <nl> @ @ - 40 , 6 + 40 , 6 @ @ import org . slf4j . LoggerFactory ; <nl> <nl> public class Constants { <nl> <nl> - public static final String VERSION = " 0 . 5 - beta1 " ; <nl> + public static final String VERSION = " 0 . 5 - beta2 " ; <nl> <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / BinaryMemtable . java b / src / java / org / apache / cassandra / db / BinaryMemtable . java <nl> index 7b522be . . b413e0b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / BinaryMemtable . java <nl> + + + b / src / java / org / apache / cassandra / db / BinaryMemtable . java <nl> @ @ - 132 , 7 + 132 , 7 @ @ public class BinaryMemtable implements IFlushable < DecoratedKey > <nl> assert ! columnFamilies _ . isEmpty ( ) ; <nl> logger _ . info ( " Sorting " + this ) ; <nl> List < DecoratedKey > keys = new ArrayList < DecoratedKey > ( columnFamilies _ . keySet ( ) ) ; <nl> - Collections . sort ( keys , partitioner _ . getDecoratedKeyComparator ( ) ) ; <nl> + Collections . sort ( keys ) ; <nl> return keys ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index bc7c43a . . 93f19b5 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1289 , 8 + 1289 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> final DecoratedKey startWithDK = partitioner . decorateKey ( startWith ) ; <nl> final DecoratedKey stopAtDK = partitioner . decorateKey ( stopAt ) ; <nl> - / / ( OPP key decoration is a no - op so using the " decorated " comparator against raw keys is fine ) <nl> - final Comparator < DecoratedKey > comparator = partitioner . getDecoratedKeyComparator ( ) ; <nl> <nl> / / create a CollatedIterator that will return unique keys from different sources <nl> / / ( current memtable , historical memtables , and SSTables ) in the correct order . <nl> @ @ - 1302 , 8 + 1300 , 8 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> public boolean apply ( DecoratedKey key ) <nl> { <nl> - return comparator . compare ( startWithDK , key ) < = 0 <nl> - & & ( stopAt . isEmpty ( ) | | comparator . compare ( key , stopAtDK ) < = 0 ) ; <nl> + return startWithDK . compareTo ( key ) < = 0 <nl> + & & ( stopAt . isEmpty ( ) | | key . compareTo ( stopAtDK ) < = 0 ) ; <nl> } <nl> } ; <nl> <nl> @ @ - 1343 , 7 + 1341 , 7 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> iterators . add ( iter ) ; <nl> } <nl> <nl> - Iterator < DecoratedKey > collated = IteratorUtils . collatedIterator ( comparator , iterators ) ; <nl> + Iterator < DecoratedKey > collated = IteratorUtils . collatedIterator ( DecoratedKey . comparator , iterators ) ; <nl> Iterable < DecoratedKey > reduced = new ReducingIterator < DecoratedKey , DecoratedKey > ( collated ) { <nl> DecoratedKey current ; <nl> <nl> @ @ - 1366 , 7 + 1364 , 7 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> boolean rangeCompletedLocally = false ; <nl> for ( DecoratedKey current : reduced ) <nl> { <nl> - if ( ! stopAt . isEmpty ( ) & & comparator . compare ( stopAtDK , current ) < 0 ) <nl> + if ( ! stopAt . isEmpty ( ) & & stopAtDK . compareTo ( current ) < 0 ) <nl> { <nl> rangeCompletedLocally = true ; <nl> break ; <nl> @ @ - 1411 , 9 + 1409 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> public RangeReply getKeyRangeRaw ( final DecoratedKey startWith , final DecoratedKey stopAt , int maxResults ) <nl> throws IOException , ExecutionException , InterruptedException <nl> { <nl> - / / ( OPP key decoration is a no - op so using the " decorated " comparator against raw keys is fine ) <nl> - final Comparator < DecoratedKey > comparator = partitioner . getDecoratedKeyComparator ( ) ; <nl> - <nl> / / create a CollatedIterator that will return unique keys from different sources <nl> / / ( current memtable , historical memtables , and SSTables ) in the correct order . <nl> List < Iterator < DecoratedKey > > iterators = new ArrayList < Iterator < DecoratedKey > > ( ) ; <nl> @ @ - 1424 , 8 + 1419 , 8 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> public boolean apply ( DecoratedKey key ) <nl> { <nl> - return comparator . compare ( startWith , key ) < = 0 <nl> - & & ( stopAt . isEmpty ( ) | | comparator . compare ( key , stopAt ) < = 0 ) ; <nl> + return startWith . compareTo ( key ) < = 0 <nl> + & & ( stopAt . isEmpty ( ) | | key . compareTo ( stopAt ) < = 0 ) ; <nl> } <nl> } ; <nl> <nl> @ @ - 1465 , 7 + 1460 , 7 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> iterators . add ( iter ) ; <nl> } <nl> <nl> - Iterator < DecoratedKey > collated = IteratorUtils . collatedIterator ( comparator , iterators ) ; <nl> + Iterator < DecoratedKey > collated = IteratorUtils . collatedIterator ( DecoratedKey . comparator , iterators ) ; <nl> Iterable < DecoratedKey > reduced = new ReducingIterator < DecoratedKey , DecoratedKey > ( collated ) { <nl> DecoratedKey current ; <nl> <nl> @ @ - 1487 , 7 + 1482 , 7 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> boolean rangeCompletedLocally = false ; <nl> for ( DecoratedKey current : reduced ) <nl> { <nl> - if ( ! stopAt . isEmpty ( ) & & comparator . compare ( stopAt , current ) < 0 ) <nl> + if ( ! stopAt . isEmpty ( ) & & stopAt . compareTo ( current ) < 0 ) <nl> { <nl> rangeCompletedLocally = true ; <nl> break ; <nl> diff - - git a / src / java / org / apache / cassandra / db / DecoratedKey . java b / src / java / org / apache / cassandra / db / DecoratedKey . java <nl> index 5895ecf . . 178535e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / DecoratedKey . java <nl> + + + b / src / java / org / apache / cassandra / db / DecoratedKey . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package org . apache . cassandra . db ; <nl> import java . io . DataOutput ; <nl> import java . io . IOException ; <nl> import java . io . DataInput ; <nl> + import java . util . Comparator ; <nl> <nl> import org . apache . cassandra . dht . Token ; <nl> import org . apache . cassandra . io . ICompactSerializer2 ; <nl> @ @ - 44 , 6 + 45 , 14 @ @ public class DecoratedKey < T extends Token > implements Comparable < DecoratedKey > <nl> return serializer ; <nl> } <nl> <nl> + public static final Comparator < DecoratedKey > comparator = new Comparator < DecoratedKey > ( ) <nl> + { <nl> + public int compare ( DecoratedKey o1 , DecoratedKey o2 ) <nl> + { <nl> + return o1 . compareTo ( o2 ) ; <nl> + } <nl> + } ; <nl> + <nl> public final T token ; <nl> public final String key ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java <nl> index 399e37a . . aca6950 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Memtable . java <nl> + + + b / src / java / org / apache / cassandra / db / Memtable . java <nl> @ @ - 182 , 9 + 182 , 8 @ @ public class Memtable implements Comparable < Memtable > , IFlushable < DecoratedKey > <nl> { <nl> logger _ . info ( " Sorting " + this ) ; <nl> / / sort keys in the order they would be in when decorated <nl> - Comparator < DecoratedKey > dc = partitioner _ . getDecoratedKeyComparator ( ) ; <nl> ArrayList < DecoratedKey > orderedKeys = new ArrayList < DecoratedKey > ( columnFamilies _ . keySet ( ) ) ; <nl> - Collections . sort ( orderedKeys , dc ) ; <nl> + Collections . sort ( orderedKeys ) ; <nl> return orderedKeys ; <nl> } <nl> <nl> @ @ - 225 , 7 + 224 , 7 @ @ public class Memtable implements Comparable < Memtable > , IFlushable < DecoratedKey > <nl> / / cannot create a PQ of size zero ( wtf ? ) <nl> return Arrays . asList ( new DecoratedKey [ 0 ] ) . iterator ( ) ; <nl> } <nl> - PriorityQueue < DecoratedKey > pq = new PriorityQueue < DecoratedKey > ( columnFamilies _ . size ( ) , partitioner _ . getDecoratedKeyComparator ( ) ) ; <nl> + PriorityQueue < DecoratedKey > pq = new PriorityQueue < DecoratedKey > ( columnFamilies _ . size ( ) ) ; <nl> pq . addAll ( columnFamilies _ . keySet ( ) ) ; <nl> return new DestructivePQIterator < DecoratedKey > ( pq ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java b / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java <nl> index 9b4ad56 . . b214196 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java <nl> + + + b / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java <nl> @ @ - 37 , 16 + 37 , 6 @ @ public class CollatingOrderPreservingPartitioner implements IPartitioner < BytesTo <nl> <nl> public static final BigInteger BYTE _ MASK = new BigInteger ( " 255 " ) ; <nl> <nl> - / * * <nl> - * Comparators for decorated keys . <nl> - * / <nl> - private static final Comparator < DecoratedKey < BytesToken > > comparator = new Comparator < DecoratedKey < BytesToken > > ( ) { <nl> - public int compare ( DecoratedKey < BytesToken > o1 , DecoratedKey < BytesToken > o2 ) <nl> - { <nl> - return FBUtilities . compareByteArrays ( o1 . token . token , o2 . token . token ) ; <nl> - } <nl> - } ; <nl> - <nl> public DecoratedKey < BytesToken > decorateKey ( String key ) <nl> { <nl> return new DecoratedKey < BytesToken > ( getToken ( key ) , key ) ; <nl> @ @ - 62 , 11 + 52 , 6 @ @ public class CollatingOrderPreservingPartitioner implements IPartitioner < BytesTo <nl> return key . key ; <nl> } <nl> <nl> - public Comparator < DecoratedKey < BytesToken > > getDecoratedKeyComparator ( ) <nl> - { <nl> - return comparator ; <nl> - } <nl> - <nl> public BytesToken midpoint ( BytesToken ltoken , BytesToken rtoken ) <nl> { <nl> int sigbytes = Math . max ( ltoken . token . length , rtoken . token . length ) ; <nl> diff - - git a / src / java / org / apache / cassandra / dht / IPartitioner . java b / src / java / org / apache / cassandra / dht / IPartitioner . java <nl> index d141758 . . 02fd665 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / IPartitioner . java <nl> + + + b / src / java / org / apache / cassandra / dht / IPartitioner . java <nl> @ @ - 49 , 11 + 49 , 6 @ @ public interface IPartitioner < T extends Token > <nl> public DecoratedKey < T > decorateKey ( String key ) ; <nl> <nl> / * * <nl> - * @ return a comparator for decorated key objects , not strings <nl> - * / <nl> - public Comparator < DecoratedKey < T > > getDecoratedKeyComparator ( ) ; <nl> - <nl> - / * * <nl> * Calculate a Token representing the approximate " middle " of the given <nl> * range . <nl> * <nl> diff - - git a / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java b / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java <nl> index e50b576 . . 9f13b95 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java <nl> + + + b / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java <nl> @ @ - 35 , 17 + 35 , 6 @ @ public class OrderPreservingPartitioner implements IPartitioner < StringToken > <nl> <nl> public static final BigInteger CHAR _ MASK = new BigInteger ( " 65535 " ) ; <nl> <nl> - / * * <nl> - * Comparators for decorated keys . <nl> - * / <nl> - private static final Comparator < DecoratedKey < StringToken > > comparator = <nl> - new Comparator < DecoratedKey < StringToken > > ( ) { <nl> - public int compare ( DecoratedKey < StringToken > o1 , DecoratedKey < StringToken > o2 ) <nl> - { <nl> - return o1 . key . compareTo ( o2 . key ) ; <nl> - } <nl> - } ; <nl> - <nl> public DecoratedKey < StringToken > decorateKey ( String key ) <nl> { <nl> return new DecoratedKey < StringToken > ( new StringToken ( key ) , key ) ; <nl> @ @ - 61 , 11 + 50 , 6 @ @ public class OrderPreservingPartitioner implements IPartitioner < StringToken > <nl> return key . key ; <nl> } <nl> <nl> - public Comparator < DecoratedKey < StringToken > > getDecoratedKeyComparator ( ) <nl> - { <nl> - return comparator ; <nl> - } <nl> - <nl> public StringToken midpoint ( StringToken ltoken , StringToken rtoken ) <nl> { <nl> int sigchars = Math . max ( ltoken . token . length ( ) , rtoken . token . length ( ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / dht / RandomPartitioner . java b / src / java / org / apache / cassandra / dht / RandomPartitioner . java <nl> index 129d1ed . . 3b4c1f2 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / RandomPartitioner . java <nl> + + + b / src / java / org / apache / cassandra / dht / RandomPartitioner . java <nl> @ @ - 38 , 21 + 38 , 6 @ @ public class RandomPartitioner implements IPartitioner < BigIntegerToken > <nl> public static final BigIntegerToken MINIMUM = new BigIntegerToken ( " 0 " ) ; <nl> <nl> private static final String DELIMITER = " : " ; <nl> - <nl> - private static final Comparator < DecoratedKey < BigIntegerToken > > comparator = <nl> - new Comparator < DecoratedKey < BigIntegerToken > > ( ) { <nl> - public int compare ( DecoratedKey < BigIntegerToken > o1 , DecoratedKey < BigIntegerToken > o2 ) <nl> - { <nl> - / / first , compare on the bigint hash " decoration " . usually this will be enough . <nl> - int v = o1 . token . compareTo ( o2 . token ) ; <nl> - if ( v ! = 0 ) { <nl> - return v ; <nl> - } <nl> - <nl> - / / if the hashes are equal , compare the strings <nl> - return o1 . key . compareTo ( o2 . key ) ; <nl> - } <nl> - } ; <nl> <nl> public DecoratedKey < BigIntegerToken > decorateKey ( String key ) <nl> { <nl> @ @ - 73 , 11 + 58 , 6 @ @ public class RandomPartitioner implements IPartitioner < BigIntegerToken > <nl> return key . token + DELIMITER + key . key ; <nl> } <nl> <nl> - public Comparator < DecoratedKey < BigIntegerToken > > getDecoratedKeyComparator ( ) <nl> - { <nl> - return comparator ; <nl> - } <nl> - <nl> public BigIntegerToken midpoint ( BigIntegerToken ltoken , BigIntegerToken rtoken ) <nl> { <nl> Pair < BigInteger , Boolean > midpair = FBUtilities . midpoint ( ltoken . token , rtoken . token , 127 ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / IteratingRow . java b / src / java / org / apache / cassandra / io / IteratingRow . java <nl> index 53ff86c . . 7962c79 100644 <nl> - - - a / src / java / org / apache / cassandra / io / IteratingRow . java <nl> + + + b / src / java / org / apache / cassandra / io / IteratingRow . java <nl> @ @ - 109 , 6 + 109 , 6 @ @ public class IteratingRow extends AbstractIterator < IColumn > implements Comparabl <nl> <nl> public int compareTo ( IteratingRow o ) <nl> { <nl> - return partitioner . getDecoratedKeyComparator ( ) . compare ( key , o . key ) ; <nl> + return key . compareTo ( o . key ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / SSTable . java b / src / java / org / apache / cassandra / io / SSTable . java <nl> index 58224de . . ab83679 100644 <nl> - - - a / src / java / org / apache / cassandra / io / SSTable . java <nl> + + + b / src / java / org / apache / cassandra / io / SSTable . java <nl> @ @ - 179 , 7 + 179 , 7 @ @ public abstract class SSTable <nl> <nl> public int compareTo ( KeyPosition kp ) <nl> { <nl> - return partitioner . getDecoratedKeyComparator ( ) . compare ( key , kp . key ) ; <nl> + return key . compareTo ( kp . key ) ; <nl> } <nl> <nl> public String toString ( ) <nl> diff - - git a / src / java / org / apache / cassandra / io / SSTableReader . java b / src / java / org / apache / cassandra / io / SSTableReader . java <nl> index 33b990b . . 329826f 100644 <nl> - - - a / src / java / org / apache / cassandra / io / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / SSTableReader . java <nl> @ @ - 310 , 7 + 310 , 7 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> return - 1 ; <nl> } <nl> long position = input . readLong ( ) ; <nl> - int v = partitioner . getDecoratedKeyComparator ( ) . compare ( indexDecoratedKey , decoratedKey ) ; <nl> + int v = indexDecoratedKey . compareTo ( decoratedKey ) ; <nl> if ( v = = 0 ) <nl> { <nl> if ( keyCache ! = null ) <nl> @ @ - 352 , 7 + 352 , 7 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> return - 1 ; <nl> } <nl> long position = input . readLong ( ) ; <nl> - int v = partitioner . getDecoratedKeyComparator ( ) . compare ( indexDecoratedKey , decoratedKey ) ; <nl> + int v = indexDecoratedKey . compareTo ( decoratedKey ) ; <nl> if ( v > = 0 ) <nl> return position ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / SSTableWriter . java b / src / java / org / apache / cassandra / io / SSTableWriter . java <nl> index 8562461 . . db336c1 100644 <nl> - - - a / src / java / org / apache / cassandra / io / SSTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / SSTableWriter . java <nl> @ @ - 61 , 8 + 61 , 7 @ @ public class SSTableWriter extends SSTable <nl> { <nl> throw new IOException ( " Keys must not be null . " ) ; <nl> } <nl> - Comparator < DecoratedKey > c = partitioner . getDecoratedKeyComparator ( ) ; <nl> - if ( lastWrittenKey ! = null & & c . compare ( lastWrittenKey , decoratedKey ) > 0 ) <nl> + if ( lastWrittenKey ! = null & & lastWrittenKey . compareTo ( decoratedKey ) > 0 ) <nl> { <nl> logger . info ( " Last written key : " + lastWrittenKey ) ; <nl> logger . info ( " Current key : " + decoratedKey ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index bf62cf1 . . 2543c90 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 78 , 7 + 78 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> public int compare ( String o1 , String o2 ) <nl> { <nl> IPartitioner p = StorageService . getPartitioner ( ) ; <nl> - return p . getDecoratedKeyComparator ( ) . compare ( p . decorateKey ( o1 ) , p . decorateKey ( o2 ) ) ; <nl> + return p . decorateKey ( o1 ) . compareTo ( p . decorateKey ( o2 ) ) ; <nl> } <nl> } ; <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / service / ReadResponseResolverTest . java b / test / unit / org / apache / cassandra / service / ReadResponseResolverTest . java <nl> index 6f3bae6 . . 2436427 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / ReadResponseResolverTest . java <nl> + + + b / test / unit / org / apache / cassandra / service / ReadResponseResolverTest . java <nl> @ @ - 1 , 4 + 1 , 25 @ @ <nl> package org . apache . cassandra . service ; <nl> + / * <nl> + * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * <nl> + * / <nl> + <nl> <nl> import java . util . Arrays ; <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 1636e3a . . 98f9c24 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 10 
 + * Collect metrics on queries by consistency level ( CASSANDRA - 7384 ) 
 * Add support for GROUP BY to SELECT statement ( CASSANDRA - 10707 ) 
 * Deprecate memtable _ cleanup _ threshold and update default for memtable _ flush _ writers ( CASSANDRA - 12228 ) 
 * Upgrade to OHC 0 . 4 . 4 ( CASSANDRA - 12133 ) 
 @ @ - 57 , 10 + 58 , 7 @ @ Merged from 2 . 1 : 
 * cannot use cql since upgrading python to 2 . 7 . 11 + ( CASSANDRA - 11850 ) 
 * Allow STCS - in - L0 compactions to reduce scope with LCS ( CASSANDRA - 12040 ) 
 
 - < < < < < < < HEAD 
 - = = = = = = = 
 
 - > > > > > > > cassandra - 3 . 9 
 3 . 8 
 * RTE from new CDC column breaks in flight queries ( CASSANDRA - 12236 ) 
 * Fix hdr logging for single operation workloads ( CASSANDRA - 12145 ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index bc8c46c . . 1bfa1b0 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 100 , 6 + 100 , 8 @ @ public class StorageProxy implements StorageProxyMBean 
 private static final CASClientRequestMetrics casWriteMetrics = new CASClientRequestMetrics ( " CASWrite " ) ; 
 private static final CASClientRequestMetrics casReadMetrics = new CASClientRequestMetrics ( " CASRead " ) ; 
 private static final ViewWriteMetrics viewWriteMetrics = new ViewWriteMetrics ( " ViewWrite " ) ; 
 + private static final Map < ConsistencyLevel , ClientRequestMetrics > readMetricsMap = new EnumMap < > ( ConsistencyLevel . class ) ; 
 + private static final Map < ConsistencyLevel , ClientRequestMetrics > writeMetricsMap = new EnumMap < > ( ConsistencyLevel . class ) ; 
 
 private static final double CONCURRENT _ SUBREQUESTS _ MARGIN = 0 . 10 ; 
 
 @ @ - 166 , 6 + 168 , 12 @ @ public class StorageProxy implements StorageProxyMBean 
 . execute ( counterWriteTask ( mutation , targets , responseHandler , localDataCenter ) ) ; 
 } 
 } ; 
 + 
 + for ( ConsistencyLevel level : ConsistencyLevel . values ( ) ) 
 + { 
 + readMetricsMap . put ( level , new ClientRequestMetrics ( " Read - " + level . name ( ) ) ) ; 
 + writeMetricsMap . put ( level , new ClientRequestMetrics ( " Write - " + level . name ( ) ) ) ; 
 + } 
 } 
 
 / * * 
 @ @ - 291 , 23 + 299 , 28 @ @ public class StorageProxy implements StorageProxyMBean 
 catch ( WriteTimeoutException | ReadTimeoutException e ) 
 { 
 casWriteMetrics . timeouts . mark ( ) ; 
 + writeMetricsMap . get ( consistencyForPaxos ) . timeouts . mark ( ) ; 
 throw e ; 
 } 
 catch ( WriteFailureException | ReadFailureException e ) 
 { 
 casWriteMetrics . failures . mark ( ) ; 
 + writeMetricsMap . get ( consistencyForPaxos ) . failures . mark ( ) ; 
 throw e ; 
 } 
 catch ( UnavailableException e ) 
 { 
 casWriteMetrics . unavailables . mark ( ) ; 
 + writeMetricsMap . get ( consistencyForPaxos ) . unavailables . mark ( ) ; 
 throw e ; 
 } 
 finally 
 { 
 if ( contentions > 0 ) 
 casWriteMetrics . contention . update ( contentions ) ; 
 - casWriteMetrics . addNano ( System . nanoTime ( ) - start ) ; 
 + final long latency = System . nanoTime ( ) - start ; 
 + casWriteMetrics . addNano ( latency ) ; 
 + writeMetricsMap . get ( consistencyForPaxos ) . addNano ( latency ) ; 
 } 
 } 
 
 @ @ - 626 , 6 + 639 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 if ( ex instanceof WriteFailureException ) 
 { 
 writeMetrics . failures . mark ( ) ; 
 + writeMetricsMap . get ( consistency _ level ) . failures . mark ( ) ; 
 WriteFailureException fe = ( WriteFailureException ) ex ; 
 Tracing . trace ( " Write failure ; received { } of { } required replies , failed { } requests " , 
 fe . received , fe . blockFor , fe . failures ) ; 
 @ @ - 633 , 6 + 647 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 else 
 { 
 writeMetrics . timeouts . mark ( ) ; 
 + writeMetricsMap . get ( consistency _ level ) . timeouts . mark ( ) ; 
 WriteTimeoutException te = ( WriteTimeoutException ) ex ; 
 Tracing . trace ( " Write timeout ; received { } of { } required replies " , te . received , te . blockFor ) ; 
 } 
 @ @ - 642 , 18 + 657 , 22 @ @ public class StorageProxy implements StorageProxyMBean 
 catch ( UnavailableException e ) 
 { 
 writeMetrics . unavailables . mark ( ) ; 
 + writeMetricsMap . get ( consistency _ level ) . unavailables . mark ( ) ; 
 Tracing . trace ( " Unavailable " ) ; 
 throw e ; 
 } 
 catch ( OverloadedException e ) 
 { 
 writeMetrics . unavailables . mark ( ) ; 
 + writeMetricsMap . get ( consistency _ level ) . unavailables . mark ( ) ; 
 Tracing . trace ( " Overloaded " ) ; 
 throw e ; 
 } 
 finally 
 { 
 - writeMetrics . addNano ( System . nanoTime ( ) - startTime ) ; 
 + long latency = System . nanoTime ( ) - startTime ; 
 + writeMetrics . addNano ( latency ) ; 
 + writeMetricsMap . get ( consistency _ level ) . addNano ( latency ) ; 
 } 
 } 
 
 @ @ - 899 , 24 + 918 , 30 @ @ public class StorageProxy implements StorageProxyMBean 
 catch ( UnavailableException e ) 
 { 
 writeMetrics . unavailables . mark ( ) ; 
 + writeMetricsMap . get ( consistency _ level ) . unavailables . mark ( ) ; 
 Tracing . trace ( " Unavailable " ) ; 
 throw e ; 
 } 
 catch ( WriteTimeoutException e ) 
 { 
 writeMetrics . timeouts . mark ( ) ; 
 + writeMetricsMap . get ( consistency _ level ) . timeouts . mark ( ) ; 
 Tracing . trace ( " Write timeout ; received { } of { } required replies " , e . received , e . blockFor ) ; 
 throw e ; 
 } 
 catch ( WriteFailureException e ) 
 { 
 writeMetrics . failures . mark ( ) ; 
 + writeMetricsMap . get ( consistency _ level ) . failures . mark ( ) ; 
 Tracing . trace ( " Write failure ; received { } of { } required replies " , e . received , e . blockFor ) ; 
 throw e ; 
 } 
 finally 
 { 
 - writeMetrics . addNano ( System . nanoTime ( ) - startTime ) ; 
 + long latency = System . nanoTime ( ) - startTime ; 
 + writeMetrics . addNano ( latency ) ; 
 + writeMetricsMap . get ( consistency _ level ) . addNano ( latency ) ; 
 + 
 } 
 } 
 
 @ @ - 1517 , 6 + 1542 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 if ( StorageService . instance . isBootstrapMode ( ) & & ! systemKeyspaceQuery ( group . commands ) ) 
 { 
 readMetrics . unavailables . mark ( ) ; 
 + readMetricsMap . get ( consistencyLevel ) . unavailables . mark ( ) ; 
 throw new IsBootstrappingException ( ) ; 
 } 
 
 @ @ - 1571 , 18 + 1597 , 21 @ @ public class StorageProxy implements StorageProxyMBean 
 { 
 readMetrics . unavailables . mark ( ) ; 
 casReadMetrics . unavailables . mark ( ) ; 
 + readMetricsMap . get ( consistencyLevel ) . unavailables . mark ( ) ; 
 throw e ; 
 } 
 catch ( ReadTimeoutException e ) 
 { 
 readMetrics . timeouts . mark ( ) ; 
 casReadMetrics . timeouts . mark ( ) ; 
 + readMetricsMap . get ( consistencyLevel ) . timeouts . mark ( ) ; 
 throw e ; 
 } 
 catch ( ReadFailureException e ) 
 { 
 readMetrics . failures . mark ( ) ; 
 casReadMetrics . failures . mark ( ) ; 
 + readMetricsMap . get ( consistencyLevel ) . failures . mark ( ) ; 
 throw e ; 
 } 
 finally 
 @ @ - 1590 , 6 + 1619 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 long latency = System . nanoTime ( ) - start ; 
 readMetrics . addNano ( latency ) ; 
 casReadMetrics . addNano ( latency ) ; 
 + readMetricsMap . get ( consistencyLevel ) . addNano ( latency ) ; 
 Keyspace . open ( metadata . ksName ) . getColumnFamilyStore ( metadata . cfName ) . metric . coordinatorReadLatency . update ( latency , TimeUnit . NANOSECONDS ) ; 
 } 
 
 @ @ - 1613 , 22 + 1643 , 26 @ @ public class StorageProxy implements StorageProxyMBean 
 catch ( UnavailableException e ) 
 { 
 readMetrics . unavailables . mark ( ) ; 
 + readMetricsMap . get ( consistencyLevel ) . unavailables . mark ( ) ; 
 throw e ; 
 } 
 catch ( ReadTimeoutException e ) 
 { 
 readMetrics . timeouts . mark ( ) ; 
 + readMetricsMap . get ( consistencyLevel ) . timeouts . mark ( ) ; 
 throw e ; 
 } 
 catch ( ReadFailureException e ) 
 { 
 readMetrics . failures . mark ( ) ; 
 + readMetricsMap . get ( consistencyLevel ) . failures . mark ( ) ; 
 throw e ; 
 } 
 finally 
 { 
 long latency = System . nanoTime ( ) - start ; 
 readMetrics . addNano ( latency ) ; 
 + readMetricsMap . get ( consistencyLevel ) . addNano ( latency ) ; 
 / / TODO avoid giving every command the same latency number . Can fix this in CASSADRA - 5329 
 for ( ReadCommand command : group . commands ) 
 Keyspace . openAndGetStore ( command . metadata ( ) ) . metric . coordinatorReadLatency . update ( latency , TimeUnit . NANOSECONDS ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 5c7902c . . e0863eb 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 8 @ @ 
 - 0 . 5 . 0 dev 
 + 0 . 5 . 0 RC1 
 + * Fix potential NPE in get _ range _ slice ( CASSANDRA - 623 ) 
 + 
 + 
 + 0 . 5 . 0 beta 2 
 * Bootstrap improvements ( several tickets ) 
 * add nodeprobe repair anti - entropy feature ( CASSANDRA - 193 , CASSANDRA - 520 ) 
 * fix possibility of partition when many nodes restart at once 
 @ @ - 20 , 6 + 24 , 7 @ @ 
 incorrectly ( and temporarily ) marked as down ( CASSANDRA - 610 ) 
 * respect memtable thresholds during log replay ( CASSANDRA - 609 ) 
 * support ConsistencyLevel . ALL on read ( CASSANDRA - 584 ) 
 + * add nodeprobe removetoken command ( CASSANDRA - 564 ) 
 
 
 0 . 5 . 0 beta 
 diff - - git a / build . xml b / build . xml 
 index b47d5b3 . . 3d965e9 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 37 , 7 + 37 , 7 @ @ 
 < property name = " test . name " value = " * Test " / > 
 < property name = " test . unit . src " value = " $ { test . dir } / unit " / > 
 < property name = " dist . dir " value = " $ { build . dir } / dist " / > 
 - < property name = " version " value = " 0 . 4 . 2 " / > 
 + < property name = " version " value = " 0 . 5 . 0 - beta2 " / > 
 < property name = " final . name " value = " $ { ant . project . name } - $ { version } " / > 
 
 < ! - - http : / / cobertura . sourceforge . net / - - > 
 diff - - git a / interface / cassandra . thrift b / interface / cassandra . thrift 
 index 0a30153 . . 8eb6226 100644 
 - - - a / interface / cassandra . thrift 
 + + + b / interface / cassandra . thrift 
 @ @ - 40 , 7 + 40 , 7 @ @ namespace rb CassandraThrift 
 # no promises are made other than " if both are equal , you ' re good . " 
 # in particular , don ' t try to parse numeric information out and assume 
 # that a " greater " version is a superset of a " smaller " one . 
 - const string VERSION = " 0 . 5 - beta1 " 
 + const string VERSION = " 0 . 5 - beta2 " 
 
 
 # 
 diff - - git a / interface / gen - java / org / apache / cassandra / service / Constants . java b / interface / gen - java / org / apache / cassandra / service / Constants . java 
 index 1b9a2ed . . 2228465 100644 
 - - - a / interface / gen - java / org / apache / cassandra / service / Constants . java 
 + + + b / interface / gen - java / org / apache / cassandra / service / Constants . java 
 @ @ - 40 , 6 + 40 , 6 @ @ import org . slf4j . LoggerFactory ; 
 
 public class Constants { 
 
 - public static final String VERSION = " 0 . 5 - beta1 " ; 
 + public static final String VERSION = " 0 . 5 - beta2 " ; 
 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / BinaryMemtable . java b / src / java / org / apache / cassandra / db / BinaryMemtable . java 
 index 7b522be . . b413e0b 100644 
 - - - a / src / java / org / apache / cassandra / db / BinaryMemtable . java 
 + + + b / src / java / org / apache / cassandra / db / BinaryMemtable . java 
 @ @ - 132 , 7 + 132 , 7 @ @ public class BinaryMemtable implements IFlushable < DecoratedKey > 
 assert ! columnFamilies _ . isEmpty ( ) ; 
 logger _ . info ( " Sorting " + this ) ; 
 List < DecoratedKey > keys = new ArrayList < DecoratedKey > ( columnFamilies _ . keySet ( ) ) ; 
 - Collections . sort ( keys , partitioner _ . getDecoratedKeyComparator ( ) ) ; 
 + Collections . sort ( keys ) ; 
 return keys ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index bc7c43a . . 93f19b5 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1289 , 8 + 1289 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 final DecoratedKey startWithDK = partitioner . decorateKey ( startWith ) ; 
 final DecoratedKey stopAtDK = partitioner . decorateKey ( stopAt ) ; 
 - / / ( OPP key decoration is a no - op so using the " decorated " comparator against raw keys is fine ) 
 - final Comparator < DecoratedKey > comparator = partitioner . getDecoratedKeyComparator ( ) ; 
 
 / / create a CollatedIterator that will return unique keys from different sources 
 / / ( current memtable , historical memtables , and SSTables ) in the correct order . 
 @ @ - 1302 , 8 + 1300 , 8 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 public boolean apply ( DecoratedKey key ) 
 { 
 - return comparator . compare ( startWithDK , key ) < = 0 
 - & & ( stopAt . isEmpty ( ) | | comparator . compare ( key , stopAtDK ) < = 0 ) ; 
 + return startWithDK . compareTo ( key ) < = 0 
 + & & ( stopAt . isEmpty ( ) | | key . compareTo ( stopAtDK ) < = 0 ) ; 
 } 
 } ; 
 
 @ @ - 1343 , 7 + 1341 , 7 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 iterators . add ( iter ) ; 
 } 
 
 - Iterator < DecoratedKey > collated = IteratorUtils . collatedIterator ( comparator , iterators ) ; 
 + Iterator < DecoratedKey > collated = IteratorUtils . collatedIterator ( DecoratedKey . comparator , iterators ) ; 
 Iterable < DecoratedKey > reduced = new ReducingIterator < DecoratedKey , DecoratedKey > ( collated ) { 
 DecoratedKey current ; 
 
 @ @ - 1366 , 7 + 1364 , 7 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 boolean rangeCompletedLocally = false ; 
 for ( DecoratedKey current : reduced ) 
 { 
 - if ( ! stopAt . isEmpty ( ) & & comparator . compare ( stopAtDK , current ) < 0 ) 
 + if ( ! stopAt . isEmpty ( ) & & stopAtDK . compareTo ( current ) < 0 ) 
 { 
 rangeCompletedLocally = true ; 
 break ; 
 @ @ - 1411 , 9 + 1409 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 public RangeReply getKeyRangeRaw ( final DecoratedKey startWith , final DecoratedKey stopAt , int maxResults ) 
 throws IOException , ExecutionException , InterruptedException 
 { 
 - / / ( OPP key decoration is a no - op so using the " decorated " comparator against raw keys is fine ) 
 - final Comparator < DecoratedKey > comparator = partitioner . getDecoratedKeyComparator ( ) ; 
 - 
 / / create a CollatedIterator that will return unique keys from different sources 
 / / ( current memtable , historical memtables , and SSTables ) in the correct order . 
 List < Iterator < DecoratedKey > > iterators = new ArrayList < Iterator < DecoratedKey > > ( ) ; 
 @ @ - 1424 , 8 + 1419 , 8 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 public boolean apply ( DecoratedKey key ) 
 { 
 - return comparator . compare ( startWith , key ) < = 0 
 - & & ( stopAt . isEmpty ( ) | | comparator . compare ( key , stopAt ) < = 0 ) ; 
 + return startWith . compareTo ( key ) < = 0 
 + & & ( stopAt . isEmpty ( ) | | key . compareTo ( stopAt ) < = 0 ) ; 
 } 
 } ; 
 
 @ @ - 1465 , 7 + 1460 , 7 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 iterators . add ( iter ) ; 
 } 
 
 - Iterator < DecoratedKey > collated = IteratorUtils . collatedIterator ( comparator , iterators ) ; 
 + Iterator < DecoratedKey > collated = IteratorUtils . collatedIterator ( DecoratedKey . comparator , iterators ) ; 
 Iterable < DecoratedKey > reduced = new ReducingIterator < DecoratedKey , DecoratedKey > ( collated ) { 
 DecoratedKey current ; 
 
 @ @ - 1487 , 7 + 1482 , 7 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 boolean rangeCompletedLocally = false ; 
 for ( DecoratedKey current : reduced ) 
 { 
 - if ( ! stopAt . isEmpty ( ) & & comparator . compare ( stopAt , current ) < 0 ) 
 + if ( ! stopAt . isEmpty ( ) & & stopAt . compareTo ( current ) < 0 ) 
 { 
 rangeCompletedLocally = true ; 
 break ; 
 diff - - git a / src / java / org / apache / cassandra / db / DecoratedKey . java b / src / java / org / apache / cassandra / db / DecoratedKey . java 
 index 5895ecf . . 178535e 100644 
 - - - a / src / java / org / apache / cassandra / db / DecoratedKey . java 
 + + + b / src / java / org / apache / cassandra / db / DecoratedKey . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package org . apache . cassandra . db ; 
 import java . io . DataOutput ; 
 import java . io . IOException ; 
 import java . io . DataInput ; 
 + import java . util . Comparator ; 
 
 import org . apache . cassandra . dht . Token ; 
 import org . apache . cassandra . io . ICompactSerializer2 ; 
 @ @ - 44 , 6 + 45 , 14 @ @ public class DecoratedKey < T extends Token > implements Comparable < DecoratedKey > 
 return serializer ; 
 } 
 
 + public static final Comparator < DecoratedKey > comparator = new Comparator < DecoratedKey > ( ) 
 + { 
 + public int compare ( DecoratedKey o1 , DecoratedKey o2 ) 
 + { 
 + return o1 . compareTo ( o2 ) ; 
 + } 
 + } ; 
 + 
 public final T token ; 
 public final String key ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java 
 index 399e37a . . aca6950 100644 
 - - - a / src / java / org / apache / cassandra / db / Memtable . java 
 + + + b / src / java / org / apache / cassandra / db / Memtable . java 
 @ @ - 182 , 9 + 182 , 8 @ @ public class Memtable implements Comparable < Memtable > , IFlushable < DecoratedKey > 
 { 
 logger _ . info ( " Sorting " + this ) ; 
 / / sort keys in the order they would be in when decorated 
 - Comparator < DecoratedKey > dc = partitioner _ . getDecoratedKeyComparator ( ) ; 
 ArrayList < DecoratedKey > orderedKeys = new ArrayList < DecoratedKey > ( columnFamilies _ . keySet ( ) ) ; 
 - Collections . sort ( orderedKeys , dc ) ; 
 + Collections . sort ( orderedKeys ) ; 
 return orderedKeys ; 
 } 
 
 @ @ - 225 , 7 + 224 , 7 @ @ public class Memtable implements Comparable < Memtable > , IFlushable < DecoratedKey > 
 / / cannot create a PQ of size zero ( wtf ? ) 
 return Arrays . asList ( new DecoratedKey [ 0 ] ) . iterator ( ) ; 
 } 
 - PriorityQueue < DecoratedKey > pq = new PriorityQueue < DecoratedKey > ( columnFamilies _ . size ( ) , partitioner _ . getDecoratedKeyComparator ( ) ) ; 
 + PriorityQueue < DecoratedKey > pq = new PriorityQueue < DecoratedKey > ( columnFamilies _ . size ( ) ) ; 
 pq . addAll ( columnFamilies _ . keySet ( ) ) ; 
 return new DestructivePQIterator < DecoratedKey > ( pq ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java b / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java 
 index 9b4ad56 . . b214196 100644 
 - - - a / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java 
 + + + b / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java 
 @ @ - 37 , 16 + 37 , 6 @ @ public class CollatingOrderPreservingPartitioner implements IPartitioner < BytesTo 
 
 public static final BigInteger BYTE _ MASK = new BigInteger ( " 255 " ) ; 
 
 - / * * 
 - * Comparators for decorated keys . 
 - * / 
 - private static final Comparator < DecoratedKey < BytesToken > > comparator = new Comparator < DecoratedKey < BytesToken > > ( ) { 
 - public int compare ( DecoratedKey < BytesToken > o1 , DecoratedKey < BytesToken > o2 ) 
 - { 
 - return FBUtilities . compareByteArrays ( o1 . token . token , o2 . token . token ) ; 
 - } 
 - } ; 
 - 
 public DecoratedKey < BytesToken > decorateKey ( String key ) 
 { 
 return new DecoratedKey < BytesToken > ( getToken ( key ) , key ) ; 
 @ @ - 62 , 11 + 52 , 6 @ @ public class CollatingOrderPreservingPartitioner implements IPartitioner < BytesTo 
 return key . key ; 
 } 
 
 - public Comparator < DecoratedKey < BytesToken > > getDecoratedKeyComparator ( ) 
 - { 
 - return comparator ; 
 - } 
 - 
 public BytesToken midpoint ( BytesToken ltoken , BytesToken rtoken ) 
 { 
 int sigbytes = Math . max ( ltoken . token . length , rtoken . token . length ) ; 
 diff - - git a / src / java / org / apache / cassandra / dht / IPartitioner . java b / src / java / org / apache / cassandra / dht / IPartitioner . java 
 index d141758 . . 02fd665 100644 
 - - - a / src / java / org / apache / cassandra / dht / IPartitioner . java 
 + + + b / src / java / org / apache / cassandra / dht / IPartitioner . java 
 @ @ - 49 , 11 + 49 , 6 @ @ public interface IPartitioner < T extends Token > 
 public DecoratedKey < T > decorateKey ( String key ) ; 
 
 / * * 
 - * @ return a comparator for decorated key objects , not strings 
 - * / 
 - public Comparator < DecoratedKey < T > > getDecoratedKeyComparator ( ) ; 
 - 
 - / * * 
 * Calculate a Token representing the approximate " middle " of the given 
 * range . 
 * 
 diff - - git a / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java b / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java 
 index e50b576 . . 9f13b95 100644 
 - - - a / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java 
 + + + b / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java 
 @ @ - 35 , 17 + 35 , 6 @ @ public class OrderPreservingPartitioner implements IPartitioner < StringToken > 
 
 public static final BigInteger CHAR _ MASK = new BigInteger ( " 65535 " ) ; 
 
 - / * * 
 - * Comparators for decorated keys . 
 - * / 
 - private static final Comparator < DecoratedKey < StringToken > > comparator = 
 - new Comparator < DecoratedKey < StringToken > > ( ) { 
 - public int compare ( DecoratedKey < StringToken > o1 , DecoratedKey < StringToken > o2 ) 
 - { 
 - return o1 . key . compareTo ( o2 . key ) ; 
 - } 
 - } ; 
 - 
 public DecoratedKey < StringToken > decorateKey ( String key ) 
 { 
 return new DecoratedKey < StringToken > ( new StringToken ( key ) , key ) ; 
 @ @ - 61 , 11 + 50 , 6 @ @ public class OrderPreservingPartitioner implements IPartitioner < StringToken > 
 return key . key ; 
 } 
 
 - public Comparator < DecoratedKey < StringToken > > getDecoratedKeyComparator ( ) 
 - { 
 - return comparator ; 
 - } 
 - 
 public StringToken midpoint ( StringToken ltoken , StringToken rtoken ) 
 { 
 int sigchars = Math . max ( ltoken . token . length ( ) , rtoken . token . length ( ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / dht / RandomPartitioner . java b / src / java / org / apache / cassandra / dht / RandomPartitioner . java 
 index 129d1ed . . 3b4c1f2 100644 
 - - - a / src / java / org / apache / cassandra / dht / RandomPartitioner . java 
 + + + b / src / java / org / apache / cassandra / dht / RandomPartitioner . java 
 @ @ - 38 , 21 + 38 , 6 @ @ public class RandomPartitioner implements IPartitioner < BigIntegerToken > 
 public static final BigIntegerToken MINIMUM = new BigIntegerToken ( " 0 " ) ; 
 
 private static final String DELIMITER = " : " ; 
 - 
 - private static final Comparator < DecoratedKey < BigIntegerToken > > comparator = 
 - new Comparator < DecoratedKey < BigIntegerToken > > ( ) { 
 - public int compare ( DecoratedKey < BigIntegerToken > o1 , DecoratedKey < BigIntegerToken > o2 ) 
 - { 
 - / / first , compare on the bigint hash " decoration " . usually this will be enough . 
 - int v = o1 . token . compareTo ( o2 . token ) ; 
 - if ( v ! = 0 ) { 
 - return v ; 
 - } 
 - 
 - / / if the hashes are equal , compare the strings 
 - return o1 . key . compareTo ( o2 . key ) ; 
 - } 
 - } ; 
 
 public DecoratedKey < BigIntegerToken > decorateKey ( String key ) 
 { 
 @ @ - 73 , 11 + 58 , 6 @ @ public class RandomPartitioner implements IPartitioner < BigIntegerToken > 
 return key . token + DELIMITER + key . key ; 
 } 
 
 - public Comparator < DecoratedKey < BigIntegerToken > > getDecoratedKeyComparator ( ) 
 - { 
 - return comparator ; 
 - } 
 - 
 public BigIntegerToken midpoint ( BigIntegerToken ltoken , BigIntegerToken rtoken ) 
 { 
 Pair < BigInteger , Boolean > midpair = FBUtilities . midpoint ( ltoken . token , rtoken . token , 127 ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / IteratingRow . java b / src / java / org / apache / cassandra / io / IteratingRow . java 
 index 53ff86c . . 7962c79 100644 
 - - - a / src / java / org / apache / cassandra / io / IteratingRow . java 
 + + + b / src / java / org / apache / cassandra / io / IteratingRow . java 
 @ @ - 109 , 6 + 109 , 6 @ @ public class IteratingRow extends AbstractIterator < IColumn > implements Comparabl 
 
 public int compareTo ( IteratingRow o ) 
 { 
 - return partitioner . getDecoratedKeyComparator ( ) . compare ( key , o . key ) ; 
 + return key . compareTo ( o . key ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / SSTable . java b / src / java / org / apache / cassandra / io / SSTable . java 
 index 58224de . . ab83679 100644 
 - - - a / src / java / org / apache / cassandra / io / SSTable . java 
 + + + b / src / java / org / apache / cassandra / io / SSTable . java 
 @ @ - 179 , 7 + 179 , 7 @ @ public abstract class SSTable 
 
 public int compareTo ( KeyPosition kp ) 
 { 
 - return partitioner . getDecoratedKeyComparator ( ) . compare ( key , kp . key ) ; 
 + return key . compareTo ( kp . key ) ; 
 } 
 
 public String toString ( ) 
 diff - - git a / src / java / org / apache / cassandra / io / SSTableReader . java b / src / java / org / apache / cassandra / io / SSTableReader . java 
 index 33b990b . . 329826f 100644 
 - - - a / src / java / org / apache / cassandra / io / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / SSTableReader . java 
 @ @ - 310 , 7 + 310 , 7 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 return - 1 ; 
 } 
 long position = input . readLong ( ) ; 
 - int v = partitioner . getDecoratedKeyComparator ( ) . compare ( indexDecoratedKey , decoratedKey ) ; 
 + int v = indexDecoratedKey . compareTo ( decoratedKey ) ; 
 if ( v = = 0 ) 
 { 
 if ( keyCache ! = null ) 
 @ @ - 352 , 7 + 352 , 7 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 return - 1 ; 
 } 
 long position = input . readLong ( ) ; 
 - int v = partitioner . getDecoratedKeyComparator ( ) . compare ( indexDecoratedKey , decoratedKey ) ; 
 + int v = indexDecoratedKey . compareTo ( decoratedKey ) ; 
 if ( v > = 0 ) 
 return position ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / SSTableWriter . java b / src / java / org / apache / cassandra / io / SSTableWriter . java 
 index 8562461 . . db336c1 100644 
 - - - a / src / java / org / apache / cassandra / io / SSTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / SSTableWriter . java 
 @ @ - 61 , 8 + 61 , 7 @ @ public class SSTableWriter extends SSTable 
 { 
 throw new IOException ( " Keys must not be null . " ) ; 
 } 
 - Comparator < DecoratedKey > c = partitioner . getDecoratedKeyComparator ( ) ; 
 - if ( lastWrittenKey ! = null & & c . compare ( lastWrittenKey , decoratedKey ) > 0 ) 
 + if ( lastWrittenKey ! = null & & lastWrittenKey . compareTo ( decoratedKey ) > 0 ) 
 { 
 logger . info ( " Last written key : " + lastWrittenKey ) ; 
 logger . info ( " Current key : " + decoratedKey ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index bf62cf1 . . 2543c90 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 78 , 7 + 78 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 public int compare ( String o1 , String o2 ) 
 { 
 IPartitioner p = StorageService . getPartitioner ( ) ; 
 - return p . getDecoratedKeyComparator ( ) . compare ( p . decorateKey ( o1 ) , p . decorateKey ( o2 ) ) ; 
 + return p . decorateKey ( o1 ) . compareTo ( p . decorateKey ( o2 ) ) ; 
 } 
 } ; 
 
 diff - - git a / test / unit / org / apache / cassandra / service / ReadResponseResolverTest . java b / test / unit / org / apache / cassandra / service / ReadResponseResolverTest . java 
 index 6f3bae6 . . 2436427 100644 
 - - - a / test / unit / org / apache / cassandra / service / ReadResponseResolverTest . java 
 + + + b / test / unit / org / apache / cassandra / service / ReadResponseResolverTest . java 
 @ @ - 1 , 4 + 1 , 25 @ @ 
 package org . apache . cassandra . service ; 
 + / * 
 + * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * 
 + * / 
 + 
 
 import java . util . Arrays ; 

