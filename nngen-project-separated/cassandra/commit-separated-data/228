BLEU SCORE: 0.0167475178542289

TEST MSG: Fix SStable ordering by max timestamp in SinglePartitionReadCommand
GENERATED MSG: fix regression when requested range does not overlap an sstable at all

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 4a415eb . . a5a97db 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 16 <nl> + * Fix SStable ordering by max timestamp in SinglePartitionReadCommand ( CASSANDRA - 14010 ) <nl> * Accept role names containing forward - slash ( CASSANDRA - 14088 ) <nl> * Optimize CRC check chance probability calculations ( CASSANDRA - 14094 ) <nl> * Fix cleanup on keyspace with no replicas ( CASSANDRA - 13526 ) <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> index fb9343f . . 7e1bc1a 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> @ @ - 140 , 7 + 140 , 8 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> } <nl> private static final RateLimiter meterSyncThrottle = RateLimiter . create ( 100 . 0 ) ; <nl> <nl> - public static final Comparator < SSTableReader > maxTimestampComparator = ( o1 , o2 ) - > Long . compare ( o1 . getMaxTimestamp ( ) , o2 . getMaxTimestamp ( ) ) ; <nl> + / / Descending order <nl> + public static final Comparator < SSTableReader > maxTimestampComparator = ( o1 , o2 ) - > Long . compare ( o2 . getMaxTimestamp ( ) , o1 . getMaxTimestamp ( ) ) ; <nl> <nl> / / it ' s just an object , which we use regular Object equality on ; we introduce a special class just for easy recognition <nl> public static final class UniqueIdentifier { } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / SimpleQueryTest . java b / test / unit / org / apache / cassandra / cql3 / SimpleQueryTest . java <nl> index 052b53d . . f32bcc6 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / SimpleQueryTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / SimpleQueryTest . java <nl> @ @ - 17 , 11 + 17 , 8 @ @ <nl> * / <nl> package org . apache . cassandra . cql3 ; <nl> <nl> - import java . util . * ; <nl> import org . junit . Test ; <nl> <nl> - import static junit . framework . Assert . * ; <nl> - <nl> public class SimpleQueryTest extends CQLTester <nl> { <nl> @ Test <nl> @ @ - 529 , 4 + 526 , 24 @ @ public class SimpleQueryTest extends CQLTester <nl> row ( 0 , 0 , 0 , 0 ) <nl> ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testSStableTimestampOrdering ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k1 int , v1 int , v2 int , PRIMARY KEY ( k1 ) ) " ) ; <nl> + disableCompaction ( ) ; <nl> + <nl> + / / sstable1 <nl> + execute ( " INSERT INTO % s ( k1 , v1 , v2 ) VALUES ( 1 , 1 , 1 ) USING TIMESTAMP 5 " ) ; <nl> + flush ( ) ; <nl> + <nl> + / / sstable2 <nl> + execute ( " INSERT INTO % s ( k1 , v1 , v2 ) VALUES ( 1 , 1 , 2 ) USING TIMESTAMP 8 " ) ; <nl> + flush ( ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k1 ) VALUES ( 1 ) USING TIMESTAMP 7 " ) ; <nl> + execute ( " DELETE FROM % s USING TIMESTAMP 6 WHERE k1 = 1 " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE k1 = 1 " ) , row ( 1 , 1 , 2 ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cql / QueryProcessor . java b / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> index 01e5ba3 . . 5977301 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> @ @ - 116 , 14 + 116 , 7 @ @ public class QueryProcessor <nl> } <nl> } <nl> <nl> - try <nl> - { <nl> - return StorageProxy . read ( commands , select . getConsistencyLevel ( ) ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + return StorageProxy . read ( commands , select . getConsistencyLevel ( ) ) ; <nl> } <nl> <nl> private static SortedSet < ByteBuffer > getColumnNames ( SelectStatement select , CFMetaData metadata , List < ByteBuffer > variables ) <nl> @ @ - 144 , 7 + 137 , 6 @ @ public class QueryProcessor <nl> private static List < org . apache . cassandra . db . Row > multiRangeSlice ( CFMetaData metadata , SelectStatement select , List < ByteBuffer > variables ) <nl> throws ReadTimeoutException , UnavailableException , InvalidRequestException <nl> { <nl> - List < org . apache . cassandra . db . Row > rows ; <nl> IPartitioner < ? > p = StorageService . getPartitioner ( ) ; <nl> <nl> AbstractType < ? > keyType = Schema . instance . getCFMetaData ( metadata . ksName , select . getColumnFamily ( ) ) . getKeyValidator ( ) ; <nl> @ @ - 187 , 21 + 179 , 14 @ @ public class QueryProcessor <nl> ? select . getNumRecords ( ) + 1 <nl> : select . getNumRecords ( ) ; <nl> <nl> - try <nl> - { <nl> - rows = StorageProxy . getRangeSlice ( new RangeSliceCommand ( metadata . ksName , <nl> - select . getColumnFamily ( ) , <nl> - null , <nl> - columnFilter , <nl> - bounds , <nl> - expressions , <nl> - limit ) , <nl> - select . getConsistencyLevel ( ) ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + List < org . apache . cassandra . db . Row > rows = StorageProxy . getRangeSlice ( new RangeSliceCommand ( metadata . ksName , <nl> + select . getColumnFamily ( ) , <nl> + null , <nl> + columnFilter , <nl> + bounds , <nl> + expressions , <nl> + limit ) , <nl> + select . getConsistencyLevel ( ) ) ; <nl> <nl> / / if start key was set and relation was " greater than " <nl> if ( select . getKeyStart ( ) ! = null & & ! select . includeStartKey ( ) & & ! rows . isEmpty ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> index 4af27ba . . 28a003e 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> @ @ - 17 , 8 + 17 , 6 @ @ <nl> * / <nl> package org . apache . cassandra . cql3 . statements ; <nl> <nl> - import java . io . IOError ; <nl> - import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> <nl> @ @ - 168 , 33 + 166 , 26 @ @ public abstract class ModificationStatement extends CFStatement implements CQLSt <nl> new QueryPath ( columnFamily ( ) ) , <nl> new SliceQueryFilter ( slices , false , Integer . MAX _ VALUE ) ) ) ; <nl> <nl> - try <nl> - { <nl> - List < Row > rows = local <nl> - ? SelectStatement . readLocally ( keyspace ( ) , commands ) <nl> - : StorageProxy . read ( commands , cl ) ; <nl> - <nl> - Map < ByteBuffer , ColumnGroupMap > map = new HashMap < ByteBuffer , ColumnGroupMap > ( ) ; <nl> - for ( Row row : rows ) <nl> - { <nl> - if ( row . cf = = null | | row . cf . isEmpty ( ) ) <nl> - continue ; <nl> - <nl> - ColumnGroupMap . Builder groupBuilder = new ColumnGroupMap . Builder ( composite , true ) ; <nl> - for ( IColumn column : row . cf ) <nl> - groupBuilder . add ( column ) ; <nl> - <nl> - List < ColumnGroupMap > groups = groupBuilder . groups ( ) ; <nl> - assert groups . isEmpty ( ) | | groups . size ( ) = = 1 ; <nl> - if ( ! groups . isEmpty ( ) ) <nl> - map . put ( row . key . key , groups . get ( 0 ) ) ; <nl> - } <nl> - return map ; <nl> - } <nl> - catch ( IOException e ) <nl> + List < Row > rows = local <nl> + ? SelectStatement . readLocally ( keyspace ( ) , commands ) <nl> + : StorageProxy . read ( commands , cl ) ; <nl> + <nl> + Map < ByteBuffer , ColumnGroupMap > map = new HashMap < ByteBuffer , ColumnGroupMap > ( ) ; <nl> + for ( Row row : rows ) <nl> { <nl> - throw new IOError ( e ) ; <nl> + if ( row . cf = = null | | row . cf . isEmpty ( ) ) <nl> + continue ; <nl> + <nl> + ColumnGroupMap . Builder groupBuilder = new ColumnGroupMap . Builder ( composite , true ) ; <nl> + for ( IColumn column : row . cf ) <nl> + groupBuilder . add ( column ) ; <nl> + <nl> + List < ColumnGroupMap > groups = groupBuilder . groups ( ) ; <nl> + assert groups . isEmpty ( ) | | groups . size ( ) = = 1 ; <nl> + if ( ! groups . isEmpty ( ) ) <nl> + map . put ( row . key . key , groups . get ( 0 ) ) ; <nl> } <nl> + return map ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index fc8842f . . 3e14923 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 17 , 7 + 17 , 6 @ @ <nl> * / <nl> package org . apache . cassandra . cql3 . statements ; <nl> <nl> - import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> import java . util . concurrent . ExecutionException ; <nl> @ @ - 31 , 9 + 30 , 7 @ @ import org . apache . cassandra . cql3 . * ; <nl> import org . apache . cassandra . transport . messages . ResultMessage ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> - import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . db . * ; <nl> - import org . apache . cassandra . db . context . CounterContext ; <nl> import org . apache . cassandra . db . filter . * ; <nl> import org . apache . cassandra . db . index . SecondaryIndex ; <nl> import org . apache . cassandra . db . index . SecondaryIndexManager ; <nl> @ @ - 52 , 7 + 49 , 6 @ @ import org . apache . cassandra . thrift . ThriftValidation ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . Pair ; <nl> - import org . apache . cassandra . utils . UUIDGen ; <nl> <nl> / * * <nl> * Encapsulates a completely parsed SELECT query , including the target <nl> @ @ - 127 , 18 + 123 , 11 @ @ public class SelectStatement implements CQLStatement <nl> <nl> cl . validateForRead ( keyspace ( ) ) ; <nl> <nl> - try <nl> - { <nl> - List < Row > rows = isKeyRange <nl> - ? StorageProxy . getRangeSlice ( getRangeCommand ( variables ) , cl ) <nl> - : StorageProxy . read ( getSliceCommands ( variables ) , cl ) ; <nl> + List < Row > rows = isKeyRange <nl> + ? StorageProxy . getRangeSlice ( getRangeCommand ( variables ) , cl ) <nl> + : StorageProxy . read ( getSliceCommands ( variables ) , cl ) ; <nl> <nl> - return processResults ( rows , variables ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + return processResults ( rows , variables ) ; <nl> } <nl> <nl> private ResultMessage . Rows processResults ( List < Row > rows , List < ByteBuffer > variables ) throws RequestValidationException <nl> @ @ - 149 , 7 + 138 , 7 @ @ public class SelectStatement implements CQLStatement <nl> return new ResultMessage . Rows ( rset ) ; <nl> } <nl> <nl> - static List < Row > readLocally ( String keyspace , List < ReadCommand > cmds ) throws IOException <nl> + static List < Row > readLocally ( String keyspace , List < ReadCommand > cmds ) <nl> { <nl> Table table = Table . open ( keyspace ) ; <nl> List < Row > rows = new ArrayList ( cmds . size ( ) ) ; <nl> @ @ - 168 , 10 + 157 , 6 @ @ public class SelectStatement implements CQLStatement <nl> <nl> return processResults ( rows , Collections . < ByteBuffer > emptyList ( ) ) ; <nl> } <nl> - catch ( IOException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> catch ( ExecutionException e ) <nl> { <nl> throw new RuntimeException ( e ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / CounterMutation . java b / src / java / org / apache / cassandra / db / CounterMutation . java <nl> index d06df33 . . 62ea3f7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CounterMutation . java <nl> + + + b / src / java / org / apache / cassandra / db / CounterMutation . java <nl> @ @ - 72 , 7 + 72 , 7 @ @ public class CounterMutation implements IMutation <nl> return consistency ; <nl> } <nl> <nl> - public RowMutation makeReplicationMutation ( ) throws IOException <nl> + public RowMutation makeReplicationMutation ( ) <nl> { <nl> List < ReadCommand > readCommands = new LinkedList < ReadCommand > ( ) ; <nl> for ( ColumnFamily columnFamily : rowMutation . getColumnFamilies ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ReadCommand . java b / src / java / org / apache / cassandra / db / ReadCommand . java <nl> index 6c364cb . . 27cd1c9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ReadCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / ReadCommand . java <nl> @ @ - 79 , 7 + 79 , 7 @ @ public abstract class ReadCommand implements IReadCommand <nl> <nl> public abstract ReadCommand copy ( ) ; <nl> <nl> - public abstract Row getRow ( Table table ) throws IOException ; <nl> + public abstract Row getRow ( Table table ) ; <nl> <nl> public abstract IDiskAtomFilter filter ( ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / ReadVerbHandler . java b / src / java / org / apache / cassandra / db / ReadVerbHandler . java <nl> index fbd4f9b . . a06035a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ReadVerbHandler . java <nl> + + + b / src / java / org / apache / cassandra / db / ReadVerbHandler . java <nl> @ @ - 17 , 8 + 17 , 6 @ @ <nl> * / <nl> package org . apache . cassandra . db ; <nl> <nl> - import java . io . IOException ; <nl> - <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 41 , 22 + 39 , 15 @ @ public class ReadVerbHandler implements IVerbHandler < ReadCommand > <nl> throw new RuntimeException ( " Cannot service reads while bootstrapping ! " ) ; <nl> } <nl> <nl> - try <nl> - { <nl> - ReadCommand command = message . payload ; <nl> - Table table = Table . open ( command . table ) ; <nl> - Row row = command . getRow ( table ) ; <nl> + ReadCommand command = message . payload ; <nl> + Table table = Table . open ( command . table ) ; <nl> + Row row = command . getRow ( table ) ; <nl> <nl> - MessageOut < ReadResponse > reply = new MessageOut < ReadResponse > ( MessagingService . Verb . REQUEST _ RESPONSE , <nl> - getResponse ( command , row ) , <nl> - ReadResponse . serializer ) ; <nl> - Tracing . trace ( " Enqueuing response to { } " , message . from ) ; <nl> - MessagingService . instance ( ) . sendReply ( reply , id , message . from ) ; <nl> - } <nl> - catch ( IOException ex ) <nl> - { <nl> - throw new RuntimeException ( ex ) ; <nl> - } <nl> + MessageOut < ReadResponse > reply = new MessageOut < ReadResponse > ( MessagingService . Verb . REQUEST _ RESPONSE , <nl> + getResponse ( command , row ) , <nl> + ReadResponse . serializer ) ; <nl> + Tracing . trace ( " Enqueuing response to { } " , message . from ) ; <nl> + MessagingService . instance ( ) . sendReply ( reply , id , message . from ) ; <nl> } <nl> <nl> public static ReadResponse getResponse ( ReadCommand command , Row row ) <nl> diff - - git a / src / java / org / apache / cassandra / db / RetriedSliceFromReadCommand . java b / src / java / org / apache / cassandra / db / RetriedSliceFromReadCommand . java <nl> index e7e99fe . . 8a8f8c6 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RetriedSliceFromReadCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / RetriedSliceFromReadCommand . java <nl> @ @ - 20 , 7 + 20 , 6 @ @ package org . apache . cassandra . db ; <nl> import java . nio . ByteBuffer ; <nl> <nl> import org . apache . cassandra . db . filter . * ; <nl> - import org . apache . cassandra . thrift . ColumnParent ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 29 , 11 + 28 , 6 @ @ public class RetriedSliceFromReadCommand extends SliceFromReadCommand <nl> static final Logger logger = LoggerFactory . getLogger ( RetriedSliceFromReadCommand . class ) ; <nl> public final int originalCount ; <nl> <nl> - public RetriedSliceFromReadCommand ( String table , ByteBuffer key , ColumnParent column _ parent , SliceQueryFilter filter , int originalCount ) <nl> - { <nl> - this ( table , key , new QueryPath ( column _ parent ) , filter , originalCount ) ; <nl> - } <nl> - <nl> public RetriedSliceFromReadCommand ( String table , ByteBuffer key , QueryPath path , SliceQueryFilter filter , int originalCount ) <nl> { <nl> super ( table , key , path , filter ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / SliceByNamesReadCommand . java b / src / java / org / apache / cassandra / db / SliceByNamesReadCommand . java <nl> index 2b3b0b1 . . bb3b7b9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SliceByNamesReadCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / SliceByNamesReadCommand . java <nl> @ @ - 58 , 7 + 58 , 7 @ @ public class SliceByNamesReadCommand extends ReadCommand <nl> return readCommand ; <nl> } <nl> <nl> - public Row getRow ( Table table ) throws IOException <nl> + public Row getRow ( Table table ) <nl> { <nl> DecoratedKey dk = StorageService . getPartitioner ( ) . decorateKey ( key ) ; <nl> return table . getRow ( new QueryFilter ( dk , queryPath , filter ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / IResponseResolver . java b / src / java / org / apache / cassandra / service / IResponseResolver . java <nl> index 4ac226f . . 17c8bff 100644 <nl> - - - a / src / java / org / apache / cassandra / service / IResponseResolver . java <nl> + + + b / src / java / org / apache / cassandra / service / IResponseResolver . java <nl> @ @ - 17 , 8 + 17 , 6 @ @ <nl> * / <nl> package org . apache . cassandra . service ; <nl> <nl> - import java . io . IOException ; <nl> - <nl> import org . apache . cassandra . net . MessageIn ; <nl> <nl> public interface IResponseResolver < TMessage , TResolved > { <nl> @ @ - 31 , 14 + 29 , 14 @ @ public interface IResponseResolver < TMessage , TResolved > { <nl> * repairs . Hence you need to derive a response resolver based on your <nl> * needs from this interface . <nl> * / <nl> - public TResolved resolve ( ) throws DigestMismatchException , IOException ; <nl> + public TResolved resolve ( ) throws DigestMismatchException ; <nl> <nl> public boolean isDataPresent ( ) ; <nl> <nl> / * * <nl> * returns the data response without comparing with any digests <nl> * / <nl> - public TResolved getData ( ) throws IOException ; <nl> + public TResolved getData ( ) ; <nl> <nl> public void preprocess ( MessageIn < TMessage > message ) ; <nl> public Iterable < MessageIn < TMessage > > getMessages ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java b / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java <nl> index 1dfd01e . . 99e3fc3 100644 <nl> - - - a / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java <nl> + + + b / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java <nl> @ @ - 17 , 7 + 17 , 6 @ @ <nl> * / <nl> package org . apache . cassandra . service ; <nl> <nl> - import java . io . IOException ; <nl> import java . net . InetAddress ; <nl> import java . util . * ; <nl> import java . util . concurrent . LinkedBlockingQueue ; <nl> @ @ - 59 , 7 + 58 , 7 @ @ public class RangeSliceResponseResolver implements IResponseResolver < RangeSliceR <nl> this . sources = endpoints ; <nl> } <nl> <nl> - public List < Row > getData ( ) throws IOException <nl> + public List < Row > getData ( ) <nl> { <nl> MessageIn < RangeSliceReply > response = responses . iterator ( ) . next ( ) ; <nl> return response . payload . rows ; <nl> @ @ - 67 , 7 + 66 , 7 @ @ public class RangeSliceResponseResolver implements IResponseResolver < RangeSliceR <nl> <nl> / / Note : this would deserialize the response a 2nd time if getData was called first . <nl> / / ( this is not currently an issue since we don ' t do read repair for range queries . ) <nl> - public Iterable < Row > resolve ( ) throws IOException <nl> + public Iterable < Row > resolve ( ) <nl> { <nl> ArrayList < RowIterator > iters = new ArrayList < RowIterator > ( responses . size ( ) ) ; <nl> int n = 0 ; <nl> diff - - git a / src / java / org / apache / cassandra / service / ReadCallback . java b / src / java / org / apache / cassandra / service / ReadCallback . java <nl> index f1ca96e . . a19df5f 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ReadCallback . java <nl> + + + b / src / java / org / apache / cassandra / service / ReadCallback . java <nl> @ @ - 17 , 21 + 17 , 18 @ @ <nl> * / <nl> package org . apache . cassandra . service ; <nl> <nl> - import java . io . IOException ; <nl> import java . net . InetAddress ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> import java . util . concurrent . TimeUnit ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> - import org . apache . cassandra . config . Schema ; <nl> import org . apache . commons . lang . StringUtils ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . concurrent . Stage ; <nl> import org . apache . cassandra . concurrent . StageManager ; <nl> - import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . ReadCommand ; <nl> import org . apache . cassandra . db . Table ; <nl> @ @ - 44 , 7 + 41 , 6 @ @ import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . db . ConsistencyLevel ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . SimpleCondition ; <nl> - import org . apache . cassandra . utils . WrappedRunnable ; <nl> <nl> public class ReadCallback < TMessage , TResolved > implements IAsyncCallback < TMessage > <nl> { <nl> @ @ - 86 , 7 + 82 , 7 @ @ public class ReadCallback < TMessage , TResolved > implements IAsyncCallback < TMessag <nl> return new ReadCallback ( newResolver , consistencyLevel , blockfor , command , table , endpoints ) ; <nl> } <nl> <nl> - public TResolved get ( ) throws ReadTimeoutException , DigestMismatchException , IOException <nl> + public TResolved get ( ) throws ReadTimeoutException , DigestMismatchException <nl> { <nl> long timeout = command . getTimeout ( ) - ( System . currentTimeMillis ( ) - startTime ) ; <nl> boolean success ; <nl> @ @ - 161 , 9 + 157 , 9 @ @ public class ReadCallback < TMessage , TResolved > implements IAsyncCallback < TMessag <nl> return true ; <nl> } <nl> <nl> - private class AsyncRepairRunner extends WrappedRunnable <nl> + private class AsyncRepairRunner implements Runnable <nl> { <nl> - protected void runMayThrow ( ) throws IOException <nl> + public void run ( ) <nl> { <nl> / / If the resolver is a RowDigestResolver , we need to do a full data read if there is a mismatch . <nl> / / Otherwise , resolve will send the repairs directly if needs be ( and in that case we should never <nl> diff - - git a / src / java / org / apache / cassandra / service / RowDataResolver . java b / src / java / org / apache / cassandra / service / RowDataResolver . java <nl> index 5545293 . . 495d115 100644 <nl> - - - a / src / java / org / apache / cassandra / service / RowDataResolver . java <nl> + + + b / src / java / org / apache / cassandra / service / RowDataResolver . java <nl> @ @ - 17 , 7 + 17 , 6 @ @ <nl> * / <nl> package org . apache . cassandra . service ; <nl> <nl> - import java . io . IOException ; <nl> import java . net . InetAddress ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . ArrayList ; <nl> @ @ - 31 , 14 + 30 , 12 @ @ import org . apache . cassandra . db . columniterator . IdentityQueryFilter ; <nl> import org . apache . cassandra . db . filter . IDiskAtomFilter ; <nl> import org . apache . cassandra . db . filter . QueryFilter ; <nl> import org . apache . cassandra . db . filter . QueryPath ; <nl> - import org . apache . cassandra . db . filter . SliceQueryFilter ; <nl> import org . apache . cassandra . net . IAsyncResult ; <nl> import org . apache . cassandra . net . MessageIn ; <nl> import org . apache . cassandra . net . MessageOut ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . utils . CloseableIterator ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> - import org . apache . cassandra . utils . IFilter ; <nl> <nl> public class RowDataResolver extends AbstractRowResolver <nl> { <nl> @ @ - 59 , 7 + 56 , 7 @ @ public class RowDataResolver extends AbstractRowResolver <nl> * as full data reads . In this case we need to compute the most recent version <nl> * of each column , and send diffs to out - of - date replicas . <nl> * / <nl> - public Row resolve ( ) throws DigestMismatchException , IOException <nl> + public Row resolve ( ) throws DigestMismatchException <nl> { <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( " resolving " + replies . size ( ) + " responses " ) ; <nl> @ @ - 165 , 7 + 162 , 7 @ @ public class RowDataResolver extends AbstractRowResolver <nl> return ColumnFamilyStore . removeDeleted ( resolved , Integer . MIN _ VALUE ) ; <nl> } <nl> <nl> - public Row getData ( ) throws IOException <nl> + public Row getData ( ) <nl> { <nl> return replies . iterator ( ) . next ( ) . payload . row ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / RowDigestResolver . java b / src / java / org / apache / cassandra / service / RowDigestResolver . java <nl> index eeccbeb . . 3f31a44 100644 <nl> - - - a / src / java / org / apache / cassandra / service / RowDigestResolver . java <nl> + + + b / src / java / org / apache / cassandra / service / RowDigestResolver . java <nl> @ @ - 17 , 7 + 17 , 6 @ @ <nl> * / <nl> package org . apache . cassandra . service ; <nl> <nl> - import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> <nl> import org . apache . cassandra . db . ColumnFamily ; <nl> @ @ - 35 , 7 + 34 , 7 @ @ public class RowDigestResolver extends AbstractRowResolver <nl> / * * <nl> * Special case of resolve ( ) so that CL . ONE reads never throw DigestMismatchException in the foreground <nl> * / <nl> - public Row getData ( ) throws IOException <nl> + public Row getData ( ) <nl> { <nl> for ( MessageIn < ReadResponse > message : replies ) <nl> { <nl> @ @ - 57 , 7 + 56 , 7 @ @ public class RowDigestResolver extends AbstractRowResolver <nl> * b ) we ' re checking additional digests that arrived after the minimum to handle <nl> * the requested ConsistencyLevel , i . e . asynchronous read repair check <nl> * / <nl> - public Row resolve ( ) throws DigestMismatchException , IOException <nl> + public Row resolve ( ) throws DigestMismatchException <nl> { <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( " resolving " + replies . size ( ) + " responses " ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index 272c52b . . b9cce15 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 790 , 7 + 790 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> / / and we want to avoid blocking too much the MUTATION stage <nl> StageManager . getStage ( Stage . REPLICATE _ ON _ WRITE ) . execute ( new DroppableRunnable ( MessagingService . Verb . READ ) <nl> { <nl> - public void runMayThrow ( ) throws IOException , OverloadedException <nl> + public void runMayThrow ( ) throws OverloadedException <nl> { <nl> / / send mutation to other replica <nl> sendToHintedEndpoints ( cm . makeReplicationMutation ( ) , remotes , responseHandler , localDataCenter , consistency _ level ) ; <nl> @ @ - 814 , 7 + 814 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> * a specific set of column names from a given column family . <nl> * / <nl> public static List < Row > read ( List < ReadCommand > commands , ConsistencyLevel consistency _ level ) <nl> - throws IOException , UnavailableException , IsBootstrappingException , ReadTimeoutException <nl> + throws UnavailableException , IsBootstrappingException , ReadTimeoutException <nl> { <nl> if ( StorageService . instance . isBootstrapMode ( ) & & ! systemTableQuery ( commands ) ) <nl> { <nl> @ @ - 859 , 7 + 859 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> * 5 . else carry out read repair by getting data from all the nodes . <nl> * / <nl> private static List < Row > fetchRows ( List < ReadCommand > initialCommands , ConsistencyLevel consistency _ level ) <nl> - throws IOException , UnavailableException , ReadTimeoutException <nl> + throws UnavailableException , ReadTimeoutException <nl> { <nl> List < Row > rows = new ArrayList < Row > ( initialCommands . size ( ) ) ; <nl> List < ReadCommand > commandsToRetry = Collections . emptyList ( ) ; <nl> @ @ - 1044 , 7 + 1044 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> this . handler = handler ; <nl> } <nl> <nl> - protected void runMayThrow ( ) throws IOException <nl> + protected void runMayThrow ( ) <nl> { <nl> logger . trace ( " LocalReadRunnable reading { } " , command ) ; <nl> <nl> @ @ - 1104 , 7 + 1104 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> } <nl> <nl> public static List < Row > getRangeSlice ( RangeSliceCommand command , ConsistencyLevel consistency _ level ) <nl> - throws IOException , UnavailableException , ReadTimeoutException <nl> + throws UnavailableException , ReadTimeoutException <nl> { <nl> Tracing . trace ( " Determining replicas to query " ) ; <nl> logger . trace ( " Command / ConsistencyLevel is { } / { } " , command . toString ( ) , consistency _ level ) ; <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> index 7002436 . . dc74f57 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> @ @ - 52 , 7 + 52 , 6 @ @ import org . apache . cassandra . exceptions . RequestExecutionException ; <nl> import org . apache . cassandra . exceptions . RequestValidationException ; <nl> import org . apache . cassandra . exceptions . UnauthorizedException ; <nl> import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> - import org . apache . cassandra . locator . AbstractReplicationStrategy ; <nl> import org . apache . cassandra . locator . DynamicEndpointSnitch ; <nl> import org . apache . cassandra . scheduler . IRequestScheduler ; <nl> import org . apache . cassandra . service . * ; <nl> @ @ - 111 , 10 + 110 , 6 @ @ public class CassandraServer implements Cassandra . Iface <nl> { <nl> ThriftConversion . rethrow ( e ) ; <nl> } <nl> - catch ( IOException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> <nl> for ( Row row : rows ) <nl> { <nl> @ @ - 977 , 10 + 972 , 6 @ @ public class CassandraServer implements Cassandra . Iface <nl> { <nl> throw ThriftConversion . toThrift ( e ) ; <nl> } <nl> - catch ( IOException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> finally <nl> { <nl> Tracing . instance ( ) . stopSession ( ) ; <nl> @ @ - 1065 , 10 + 1056 , 6 @ @ public class CassandraServer implements Cassandra . Iface <nl> { <nl> throw ThriftConversion . toThrift ( e ) ; <nl> } <nl> - catch ( IOException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> finally <nl> { <nl> Tracing . instance ( ) . stopSession ( ) ; <nl> @ @ - 1145 , 10 + 1132 , 6 @ @ public class CassandraServer implements Cassandra . Iface <nl> { <nl> throw ThriftConversion . toThrift ( e ) ; <nl> } <nl> - catch ( IOException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> finally <nl> { <nl> Tracing . instance ( ) . stopSession ( ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 4a415eb . . a5a97db 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 16 
 + * Fix SStable ordering by max timestamp in SinglePartitionReadCommand ( CASSANDRA - 14010 ) 
 * Accept role names containing forward - slash ( CASSANDRA - 14088 ) 
 * Optimize CRC check chance probability calculations ( CASSANDRA - 14094 ) 
 * Fix cleanup on keyspace with no replicas ( CASSANDRA - 13526 ) 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 index fb9343f . . 7e1bc1a 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 @ @ - 140 , 7 + 140 , 8 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 } 
 private static final RateLimiter meterSyncThrottle = RateLimiter . create ( 100 . 0 ) ; 
 
 - public static final Comparator < SSTableReader > maxTimestampComparator = ( o1 , o2 ) - > Long . compare ( o1 . getMaxTimestamp ( ) , o2 . getMaxTimestamp ( ) ) ; 
 + / / Descending order 
 + public static final Comparator < SSTableReader > maxTimestampComparator = ( o1 , o2 ) - > Long . compare ( o2 . getMaxTimestamp ( ) , o1 . getMaxTimestamp ( ) ) ; 
 
 / / it ' s just an object , which we use regular Object equality on ; we introduce a special class just for easy recognition 
 public static final class UniqueIdentifier { } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / SimpleQueryTest . java b / test / unit / org / apache / cassandra / cql3 / SimpleQueryTest . java 
 index 052b53d . . f32bcc6 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / SimpleQueryTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / SimpleQueryTest . java 
 @ @ - 17 , 11 + 17 , 8 @ @ 
 * / 
 package org . apache . cassandra . cql3 ; 
 
 - import java . util . * ; 
 import org . junit . Test ; 
 
 - import static junit . framework . Assert . * ; 
 - 
 public class SimpleQueryTest extends CQLTester 
 { 
 @ Test 
 @ @ - 529 , 4 + 526 , 24 @ @ public class SimpleQueryTest extends CQLTester 
 row ( 0 , 0 , 0 , 0 ) 
 ) ; 
 } 
 + 
 + @ Test 
 + public void testSStableTimestampOrdering ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k1 int , v1 int , v2 int , PRIMARY KEY ( k1 ) ) " ) ; 
 + disableCompaction ( ) ; 
 + 
 + / / sstable1 
 + execute ( " INSERT INTO % s ( k1 , v1 , v2 ) VALUES ( 1 , 1 , 1 ) USING TIMESTAMP 5 " ) ; 
 + flush ( ) ; 
 + 
 + / / sstable2 
 + execute ( " INSERT INTO % s ( k1 , v1 , v2 ) VALUES ( 1 , 1 , 2 ) USING TIMESTAMP 8 " ) ; 
 + flush ( ) ; 
 + 
 + execute ( " INSERT INTO % s ( k1 ) VALUES ( 1 ) USING TIMESTAMP 7 " ) ; 
 + execute ( " DELETE FROM % s USING TIMESTAMP 6 WHERE k1 = 1 " ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s WHERE k1 = 1 " ) , row ( 1 , 1 , 2 ) ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cql / QueryProcessor . java b / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 index 01e5ba3 . . 5977301 100644 
 - - - a / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 @ @ - 116 , 14 + 116 , 7 @ @ public class QueryProcessor 
 } 
 } 
 
 - try 
 - { 
 - return StorageProxy . read ( commands , select . getConsistencyLevel ( ) ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 + return StorageProxy . read ( commands , select . getConsistencyLevel ( ) ) ; 
 } 
 
 private static SortedSet < ByteBuffer > getColumnNames ( SelectStatement select , CFMetaData metadata , List < ByteBuffer > variables ) 
 @ @ - 144 , 7 + 137 , 6 @ @ public class QueryProcessor 
 private static List < org . apache . cassandra . db . Row > multiRangeSlice ( CFMetaData metadata , SelectStatement select , List < ByteBuffer > variables ) 
 throws ReadTimeoutException , UnavailableException , InvalidRequestException 
 { 
 - List < org . apache . cassandra . db . Row > rows ; 
 IPartitioner < ? > p = StorageService . getPartitioner ( ) ; 
 
 AbstractType < ? > keyType = Schema . instance . getCFMetaData ( metadata . ksName , select . getColumnFamily ( ) ) . getKeyValidator ( ) ; 
 @ @ - 187 , 21 + 179 , 14 @ @ public class QueryProcessor 
 ? select . getNumRecords ( ) + 1 
 : select . getNumRecords ( ) ; 
 
 - try 
 - { 
 - rows = StorageProxy . getRangeSlice ( new RangeSliceCommand ( metadata . ksName , 
 - select . getColumnFamily ( ) , 
 - null , 
 - columnFilter , 
 - bounds , 
 - expressions , 
 - limit ) , 
 - select . getConsistencyLevel ( ) ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 + List < org . apache . cassandra . db . Row > rows = StorageProxy . getRangeSlice ( new RangeSliceCommand ( metadata . ksName , 
 + select . getColumnFamily ( ) , 
 + null , 
 + columnFilter , 
 + bounds , 
 + expressions , 
 + limit ) , 
 + select . getConsistencyLevel ( ) ) ; 
 
 / / if start key was set and relation was " greater than " 
 if ( select . getKeyStart ( ) ! = null & & ! select . includeStartKey ( ) & & ! rows . isEmpty ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 index 4af27ba . . 28a003e 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 @ @ - 17 , 8 + 17 , 6 @ @ 
 * / 
 package org . apache . cassandra . cql3 . statements ; 
 
 - import java . io . IOError ; 
 - import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 
 @ @ - 168 , 33 + 166 , 26 @ @ public abstract class ModificationStatement extends CFStatement implements CQLSt 
 new QueryPath ( columnFamily ( ) ) , 
 new SliceQueryFilter ( slices , false , Integer . MAX _ VALUE ) ) ) ; 
 
 - try 
 - { 
 - List < Row > rows = local 
 - ? SelectStatement . readLocally ( keyspace ( ) , commands ) 
 - : StorageProxy . read ( commands , cl ) ; 
 - 
 - Map < ByteBuffer , ColumnGroupMap > map = new HashMap < ByteBuffer , ColumnGroupMap > ( ) ; 
 - for ( Row row : rows ) 
 - { 
 - if ( row . cf = = null | | row . cf . isEmpty ( ) ) 
 - continue ; 
 - 
 - ColumnGroupMap . Builder groupBuilder = new ColumnGroupMap . Builder ( composite , true ) ; 
 - for ( IColumn column : row . cf ) 
 - groupBuilder . add ( column ) ; 
 - 
 - List < ColumnGroupMap > groups = groupBuilder . groups ( ) ; 
 - assert groups . isEmpty ( ) | | groups . size ( ) = = 1 ; 
 - if ( ! groups . isEmpty ( ) ) 
 - map . put ( row . key . key , groups . get ( 0 ) ) ; 
 - } 
 - return map ; 
 - } 
 - catch ( IOException e ) 
 + List < Row > rows = local 
 + ? SelectStatement . readLocally ( keyspace ( ) , commands ) 
 + : StorageProxy . read ( commands , cl ) ; 
 + 
 + Map < ByteBuffer , ColumnGroupMap > map = new HashMap < ByteBuffer , ColumnGroupMap > ( ) ; 
 + for ( Row row : rows ) 
 { 
 - throw new IOError ( e ) ; 
 + if ( row . cf = = null | | row . cf . isEmpty ( ) ) 
 + continue ; 
 + 
 + ColumnGroupMap . Builder groupBuilder = new ColumnGroupMap . Builder ( composite , true ) ; 
 + for ( IColumn column : row . cf ) 
 + groupBuilder . add ( column ) ; 
 + 
 + List < ColumnGroupMap > groups = groupBuilder . groups ( ) ; 
 + assert groups . isEmpty ( ) | | groups . size ( ) = = 1 ; 
 + if ( ! groups . isEmpty ( ) ) 
 + map . put ( row . key . key , groups . get ( 0 ) ) ; 
 } 
 + return map ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index fc8842f . . 3e14923 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 17 , 7 + 17 , 6 @ @ 
 * / 
 package org . apache . cassandra . cql3 . statements ; 
 
 - import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 import java . util . concurrent . ExecutionException ; 
 @ @ - 31 , 9 + 30 , 7 @ @ import org . apache . cassandra . cql3 . * ; 
 import org . apache . cassandra . transport . messages . ResultMessage ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . ColumnDefinition ; 
 - import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . db . * ; 
 - import org . apache . cassandra . db . context . CounterContext ; 
 import org . apache . cassandra . db . filter . * ; 
 import org . apache . cassandra . db . index . SecondaryIndex ; 
 import org . apache . cassandra . db . index . SecondaryIndexManager ; 
 @ @ - 52 , 7 + 49 , 6 @ @ import org . apache . cassandra . thrift . ThriftValidation ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . Pair ; 
 - import org . apache . cassandra . utils . UUIDGen ; 
 
 / * * 
 * Encapsulates a completely parsed SELECT query , including the target 
 @ @ - 127 , 18 + 123 , 11 @ @ public class SelectStatement implements CQLStatement 
 
 cl . validateForRead ( keyspace ( ) ) ; 
 
 - try 
 - { 
 - List < Row > rows = isKeyRange 
 - ? StorageProxy . getRangeSlice ( getRangeCommand ( variables ) , cl ) 
 - : StorageProxy . read ( getSliceCommands ( variables ) , cl ) ; 
 + List < Row > rows = isKeyRange 
 + ? StorageProxy . getRangeSlice ( getRangeCommand ( variables ) , cl ) 
 + : StorageProxy . read ( getSliceCommands ( variables ) , cl ) ; 
 
 - return processResults ( rows , variables ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 + return processResults ( rows , variables ) ; 
 } 
 
 private ResultMessage . Rows processResults ( List < Row > rows , List < ByteBuffer > variables ) throws RequestValidationException 
 @ @ - 149 , 7 + 138 , 7 @ @ public class SelectStatement implements CQLStatement 
 return new ResultMessage . Rows ( rset ) ; 
 } 
 
 - static List < Row > readLocally ( String keyspace , List < ReadCommand > cmds ) throws IOException 
 + static List < Row > readLocally ( String keyspace , List < ReadCommand > cmds ) 
 { 
 Table table = Table . open ( keyspace ) ; 
 List < Row > rows = new ArrayList ( cmds . size ( ) ) ; 
 @ @ - 168 , 10 + 157 , 6 @ @ public class SelectStatement implements CQLStatement 
 
 return processResults ( rows , Collections . < ByteBuffer > emptyList ( ) ) ; 
 } 
 - catch ( IOException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 catch ( ExecutionException e ) 
 { 
 throw new RuntimeException ( e ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / CounterMutation . java b / src / java / org / apache / cassandra / db / CounterMutation . java 
 index d06df33 . . 62ea3f7 100644 
 - - - a / src / java / org / apache / cassandra / db / CounterMutation . java 
 + + + b / src / java / org / apache / cassandra / db / CounterMutation . java 
 @ @ - 72 , 7 + 72 , 7 @ @ public class CounterMutation implements IMutation 
 return consistency ; 
 } 
 
 - public RowMutation makeReplicationMutation ( ) throws IOException 
 + public RowMutation makeReplicationMutation ( ) 
 { 
 List < ReadCommand > readCommands = new LinkedList < ReadCommand > ( ) ; 
 for ( ColumnFamily columnFamily : rowMutation . getColumnFamilies ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / db / ReadCommand . java b / src / java / org / apache / cassandra / db / ReadCommand . java 
 index 6c364cb . . 27cd1c9 100644 
 - - - a / src / java / org / apache / cassandra / db / ReadCommand . java 
 + + + b / src / java / org / apache / cassandra / db / ReadCommand . java 
 @ @ - 79 , 7 + 79 , 7 @ @ public abstract class ReadCommand implements IReadCommand 
 
 public abstract ReadCommand copy ( ) ; 
 
 - public abstract Row getRow ( Table table ) throws IOException ; 
 + public abstract Row getRow ( Table table ) ; 
 
 public abstract IDiskAtomFilter filter ( ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / ReadVerbHandler . java b / src / java / org / apache / cassandra / db / ReadVerbHandler . java 
 index fbd4f9b . . a06035a 100644 
 - - - a / src / java / org / apache / cassandra / db / ReadVerbHandler . java 
 + + + b / src / java / org / apache / cassandra / db / ReadVerbHandler . java 
 @ @ - 17 , 8 + 17 , 6 @ @ 
 * / 
 package org . apache . cassandra . db ; 
 
 - import java . io . IOException ; 
 - 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 41 , 22 + 39 , 15 @ @ public class ReadVerbHandler implements IVerbHandler < ReadCommand > 
 throw new RuntimeException ( " Cannot service reads while bootstrapping ! " ) ; 
 } 
 
 - try 
 - { 
 - ReadCommand command = message . payload ; 
 - Table table = Table . open ( command . table ) ; 
 - Row row = command . getRow ( table ) ; 
 + ReadCommand command = message . payload ; 
 + Table table = Table . open ( command . table ) ; 
 + Row row = command . getRow ( table ) ; 
 
 - MessageOut < ReadResponse > reply = new MessageOut < ReadResponse > ( MessagingService . Verb . REQUEST _ RESPONSE , 
 - getResponse ( command , row ) , 
 - ReadResponse . serializer ) ; 
 - Tracing . trace ( " Enqueuing response to { } " , message . from ) ; 
 - MessagingService . instance ( ) . sendReply ( reply , id , message . from ) ; 
 - } 
 - catch ( IOException ex ) 
 - { 
 - throw new RuntimeException ( ex ) ; 
 - } 
 + MessageOut < ReadResponse > reply = new MessageOut < ReadResponse > ( MessagingService . Verb . REQUEST _ RESPONSE , 
 + getResponse ( command , row ) , 
 + ReadResponse . serializer ) ; 
 + Tracing . trace ( " Enqueuing response to { } " , message . from ) ; 
 + MessagingService . instance ( ) . sendReply ( reply , id , message . from ) ; 
 } 
 
 public static ReadResponse getResponse ( ReadCommand command , Row row ) 
 diff - - git a / src / java / org / apache / cassandra / db / RetriedSliceFromReadCommand . java b / src / java / org / apache / cassandra / db / RetriedSliceFromReadCommand . java 
 index e7e99fe . . 8a8f8c6 100644 
 - - - a / src / java / org / apache / cassandra / db / RetriedSliceFromReadCommand . java 
 + + + b / src / java / org / apache / cassandra / db / RetriedSliceFromReadCommand . java 
 @ @ - 20 , 7 + 20 , 6 @ @ package org . apache . cassandra . db ; 
 import java . nio . ByteBuffer ; 
 
 import org . apache . cassandra . db . filter . * ; 
 - import org . apache . cassandra . thrift . ColumnParent ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 29 , 11 + 28 , 6 @ @ public class RetriedSliceFromReadCommand extends SliceFromReadCommand 
 static final Logger logger = LoggerFactory . getLogger ( RetriedSliceFromReadCommand . class ) ; 
 public final int originalCount ; 
 
 - public RetriedSliceFromReadCommand ( String table , ByteBuffer key , ColumnParent column _ parent , SliceQueryFilter filter , int originalCount ) 
 - { 
 - this ( table , key , new QueryPath ( column _ parent ) , filter , originalCount ) ; 
 - } 
 - 
 public RetriedSliceFromReadCommand ( String table , ByteBuffer key , QueryPath path , SliceQueryFilter filter , int originalCount ) 
 { 
 super ( table , key , path , filter ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / SliceByNamesReadCommand . java b / src / java / org / apache / cassandra / db / SliceByNamesReadCommand . java 
 index 2b3b0b1 . . bb3b7b9 100644 
 - - - a / src / java / org / apache / cassandra / db / SliceByNamesReadCommand . java 
 + + + b / src / java / org / apache / cassandra / db / SliceByNamesReadCommand . java 
 @ @ - 58 , 7 + 58 , 7 @ @ public class SliceByNamesReadCommand extends ReadCommand 
 return readCommand ; 
 } 
 
 - public Row getRow ( Table table ) throws IOException 
 + public Row getRow ( Table table ) 
 { 
 DecoratedKey dk = StorageService . getPartitioner ( ) . decorateKey ( key ) ; 
 return table . getRow ( new QueryFilter ( dk , queryPath , filter ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / IResponseResolver . java b / src / java / org / apache / cassandra / service / IResponseResolver . java 
 index 4ac226f . . 17c8bff 100644 
 - - - a / src / java / org / apache / cassandra / service / IResponseResolver . java 
 + + + b / src / java / org / apache / cassandra / service / IResponseResolver . java 
 @ @ - 17 , 8 + 17 , 6 @ @ 
 * / 
 package org . apache . cassandra . service ; 
 
 - import java . io . IOException ; 
 - 
 import org . apache . cassandra . net . MessageIn ; 
 
 public interface IResponseResolver < TMessage , TResolved > { 
 @ @ - 31 , 14 + 29 , 14 @ @ public interface IResponseResolver < TMessage , TResolved > { 
 * repairs . Hence you need to derive a response resolver based on your 
 * needs from this interface . 
 * / 
 - public TResolved resolve ( ) throws DigestMismatchException , IOException ; 
 + public TResolved resolve ( ) throws DigestMismatchException ; 
 
 public boolean isDataPresent ( ) ; 
 
 / * * 
 * returns the data response without comparing with any digests 
 * / 
 - public TResolved getData ( ) throws IOException ; 
 + public TResolved getData ( ) ; 
 
 public void preprocess ( MessageIn < TMessage > message ) ; 
 public Iterable < MessageIn < TMessage > > getMessages ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java b / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java 
 index 1dfd01e . . 99e3fc3 100644 
 - - - a / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java 
 + + + b / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java 
 @ @ - 17 , 7 + 17 , 6 @ @ 
 * / 
 package org . apache . cassandra . service ; 
 
 - import java . io . IOException ; 
 import java . net . InetAddress ; 
 import java . util . * ; 
 import java . util . concurrent . LinkedBlockingQueue ; 
 @ @ - 59 , 7 + 58 , 7 @ @ public class RangeSliceResponseResolver implements IResponseResolver < RangeSliceR 
 this . sources = endpoints ; 
 } 
 
 - public List < Row > getData ( ) throws IOException 
 + public List < Row > getData ( ) 
 { 
 MessageIn < RangeSliceReply > response = responses . iterator ( ) . next ( ) ; 
 return response . payload . rows ; 
 @ @ - 67 , 7 + 66 , 7 @ @ public class RangeSliceResponseResolver implements IResponseResolver < RangeSliceR 
 
 / / Note : this would deserialize the response a 2nd time if getData was called first . 
 / / ( this is not currently an issue since we don ' t do read repair for range queries . ) 
 - public Iterable < Row > resolve ( ) throws IOException 
 + public Iterable < Row > resolve ( ) 
 { 
 ArrayList < RowIterator > iters = new ArrayList < RowIterator > ( responses . size ( ) ) ; 
 int n = 0 ; 
 diff - - git a / src / java / org / apache / cassandra / service / ReadCallback . java b / src / java / org / apache / cassandra / service / ReadCallback . java 
 index f1ca96e . . a19df5f 100644 
 - - - a / src / java / org / apache / cassandra / service / ReadCallback . java 
 + + + b / src / java / org / apache / cassandra / service / ReadCallback . java 
 @ @ - 17 , 21 + 17 , 18 @ @ 
 * / 
 package org . apache . cassandra . service ; 
 
 - import java . io . IOException ; 
 import java . net . InetAddress ; 
 import java . util . Collections ; 
 import java . util . List ; 
 import java . util . concurrent . TimeUnit ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 
 - import org . apache . cassandra . config . Schema ; 
 import org . apache . commons . lang . StringUtils ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . concurrent . Stage ; 
 import org . apache . cassandra . concurrent . StageManager ; 
 - import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . ReadCommand ; 
 import org . apache . cassandra . db . Table ; 
 @ @ - 44 , 7 + 41 , 6 @ @ import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . db . ConsistencyLevel ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . SimpleCondition ; 
 - import org . apache . cassandra . utils . WrappedRunnable ; 
 
 public class ReadCallback < TMessage , TResolved > implements IAsyncCallback < TMessage > 
 { 
 @ @ - 86 , 7 + 82 , 7 @ @ public class ReadCallback < TMessage , TResolved > implements IAsyncCallback < TMessag 
 return new ReadCallback ( newResolver , consistencyLevel , blockfor , command , table , endpoints ) ; 
 } 
 
 - public TResolved get ( ) throws ReadTimeoutException , DigestMismatchException , IOException 
 + public TResolved get ( ) throws ReadTimeoutException , DigestMismatchException 
 { 
 long timeout = command . getTimeout ( ) - ( System . currentTimeMillis ( ) - startTime ) ; 
 boolean success ; 
 @ @ - 161 , 9 + 157 , 9 @ @ public class ReadCallback < TMessage , TResolved > implements IAsyncCallback < TMessag 
 return true ; 
 } 
 
 - private class AsyncRepairRunner extends WrappedRunnable 
 + private class AsyncRepairRunner implements Runnable 
 { 
 - protected void runMayThrow ( ) throws IOException 
 + public void run ( ) 
 { 
 / / If the resolver is a RowDigestResolver , we need to do a full data read if there is a mismatch . 
 / / Otherwise , resolve will send the repairs directly if needs be ( and in that case we should never 
 diff - - git a / src / java / org / apache / cassandra / service / RowDataResolver . java b / src / java / org / apache / cassandra / service / RowDataResolver . java 
 index 5545293 . . 495d115 100644 
 - - - a / src / java / org / apache / cassandra / service / RowDataResolver . java 
 + + + b / src / java / org / apache / cassandra / service / RowDataResolver . java 
 @ @ - 17 , 7 + 17 , 6 @ @ 
 * / 
 package org . apache . cassandra . service ; 
 
 - import java . io . IOException ; 
 import java . net . InetAddress ; 
 import java . nio . ByteBuffer ; 
 import java . util . ArrayList ; 
 @ @ - 31 , 14 + 30 , 12 @ @ import org . apache . cassandra . db . columniterator . IdentityQueryFilter ; 
 import org . apache . cassandra . db . filter . IDiskAtomFilter ; 
 import org . apache . cassandra . db . filter . QueryFilter ; 
 import org . apache . cassandra . db . filter . QueryPath ; 
 - import org . apache . cassandra . db . filter . SliceQueryFilter ; 
 import org . apache . cassandra . net . IAsyncResult ; 
 import org . apache . cassandra . net . MessageIn ; 
 import org . apache . cassandra . net . MessageOut ; 
 import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . utils . CloseableIterator ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 - import org . apache . cassandra . utils . IFilter ; 
 
 public class RowDataResolver extends AbstractRowResolver 
 { 
 @ @ - 59 , 7 + 56 , 7 @ @ public class RowDataResolver extends AbstractRowResolver 
 * as full data reads . In this case we need to compute the most recent version 
 * of each column , and send diffs to out - of - date replicas . 
 * / 
 - public Row resolve ( ) throws DigestMismatchException , IOException 
 + public Row resolve ( ) throws DigestMismatchException 
 { 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( " resolving " + replies . size ( ) + " responses " ) ; 
 @ @ - 165 , 7 + 162 , 7 @ @ public class RowDataResolver extends AbstractRowResolver 
 return ColumnFamilyStore . removeDeleted ( resolved , Integer . MIN _ VALUE ) ; 
 } 
 
 - public Row getData ( ) throws IOException 
 + public Row getData ( ) 
 { 
 return replies . iterator ( ) . next ( ) . payload . row ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / RowDigestResolver . java b / src / java / org / apache / cassandra / service / RowDigestResolver . java 
 index eeccbeb . . 3f31a44 100644 
 - - - a / src / java / org / apache / cassandra / service / RowDigestResolver . java 
 + + + b / src / java / org / apache / cassandra / service / RowDigestResolver . java 
 @ @ - 17 , 7 + 17 , 6 @ @ 
 * / 
 package org . apache . cassandra . service ; 
 
 - import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 
 import org . apache . cassandra . db . ColumnFamily ; 
 @ @ - 35 , 7 + 34 , 7 @ @ public class RowDigestResolver extends AbstractRowResolver 
 / * * 
 * Special case of resolve ( ) so that CL . ONE reads never throw DigestMismatchException in the foreground 
 * / 
 - public Row getData ( ) throws IOException 
 + public Row getData ( ) 
 { 
 for ( MessageIn < ReadResponse > message : replies ) 
 { 
 @ @ - 57 , 7 + 56 , 7 @ @ public class RowDigestResolver extends AbstractRowResolver 
 * b ) we ' re checking additional digests that arrived after the minimum to handle 
 * the requested ConsistencyLevel , i . e . asynchronous read repair check 
 * / 
 - public Row resolve ( ) throws DigestMismatchException , IOException 
 + public Row resolve ( ) throws DigestMismatchException 
 { 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( " resolving " + replies . size ( ) + " responses " ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index 272c52b . . b9cce15 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 790 , 7 + 790 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 / / and we want to avoid blocking too much the MUTATION stage 
 StageManager . getStage ( Stage . REPLICATE _ ON _ WRITE ) . execute ( new DroppableRunnable ( MessagingService . Verb . READ ) 
 { 
 - public void runMayThrow ( ) throws IOException , OverloadedException 
 + public void runMayThrow ( ) throws OverloadedException 
 { 
 / / send mutation to other replica 
 sendToHintedEndpoints ( cm . makeReplicationMutation ( ) , remotes , responseHandler , localDataCenter , consistency _ level ) ; 
 @ @ - 814 , 7 + 814 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 * a specific set of column names from a given column family . 
 * / 
 public static List < Row > read ( List < ReadCommand > commands , ConsistencyLevel consistency _ level ) 
 - throws IOException , UnavailableException , IsBootstrappingException , ReadTimeoutException 
 + throws UnavailableException , IsBootstrappingException , ReadTimeoutException 
 { 
 if ( StorageService . instance . isBootstrapMode ( ) & & ! systemTableQuery ( commands ) ) 
 { 
 @ @ - 859 , 7 + 859 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 * 5 . else carry out read repair by getting data from all the nodes . 
 * / 
 private static List < Row > fetchRows ( List < ReadCommand > initialCommands , ConsistencyLevel consistency _ level ) 
 - throws IOException , UnavailableException , ReadTimeoutException 
 + throws UnavailableException , ReadTimeoutException 
 { 
 List < Row > rows = new ArrayList < Row > ( initialCommands . size ( ) ) ; 
 List < ReadCommand > commandsToRetry = Collections . emptyList ( ) ; 
 @ @ - 1044 , 7 + 1044 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 this . handler = handler ; 
 } 
 
 - protected void runMayThrow ( ) throws IOException 
 + protected void runMayThrow ( ) 
 { 
 logger . trace ( " LocalReadRunnable reading { } " , command ) ; 
 
 @ @ - 1104 , 7 + 1104 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 } 
 
 public static List < Row > getRangeSlice ( RangeSliceCommand command , ConsistencyLevel consistency _ level ) 
 - throws IOException , UnavailableException , ReadTimeoutException 
 + throws UnavailableException , ReadTimeoutException 
 { 
 Tracing . trace ( " Determining replicas to query " ) ; 
 logger . trace ( " Command / ConsistencyLevel is { } / { } " , command . toString ( ) , consistency _ level ) ; 
 diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 index 7002436 . . dc74f57 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 @ @ - 52 , 7 + 52 , 6 @ @ import org . apache . cassandra . exceptions . RequestExecutionException ; 
 import org . apache . cassandra . exceptions . RequestValidationException ; 
 import org . apache . cassandra . exceptions . UnauthorizedException ; 
 import org . apache . cassandra . io . util . DataOutputBuffer ; 
 - import org . apache . cassandra . locator . AbstractReplicationStrategy ; 
 import org . apache . cassandra . locator . DynamicEndpointSnitch ; 
 import org . apache . cassandra . scheduler . IRequestScheduler ; 
 import org . apache . cassandra . service . * ; 
 @ @ - 111 , 10 + 110 , 6 @ @ public class CassandraServer implements Cassandra . Iface 
 { 
 ThriftConversion . rethrow ( e ) ; 
 } 
 - catch ( IOException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 
 for ( Row row : rows ) 
 { 
 @ @ - 977 , 10 + 972 , 6 @ @ public class CassandraServer implements Cassandra . Iface 
 { 
 throw ThriftConversion . toThrift ( e ) ; 
 } 
 - catch ( IOException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 finally 
 { 
 Tracing . instance ( ) . stopSession ( ) ; 
 @ @ - 1065 , 10 + 1056 , 6 @ @ public class CassandraServer implements Cassandra . Iface 
 { 
 throw ThriftConversion . toThrift ( e ) ; 
 } 
 - catch ( IOException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 finally 
 { 
 Tracing . instance ( ) . stopSession ( ) ; 
 @ @ - 1145 , 10 + 1132 , 6 @ @ public class CassandraServer implements Cassandra . Iface 
 { 
 throw ThriftConversion . toThrift ( e ) ; 
 } 
 - catch ( IOException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 finally 
 { 
 Tracing . instance ( ) . stopSession ( ) ;
