BLEU SCORE: 0.07986788803078405

TEST MSG: Fix CHANGES . txt
GENERATED MSG: fix changes

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f3654f7 . . 3471bcc 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 61 , 12 + 61 , 6 @ @ Merged from 1 . 2 : <nl> are broken ( CASSANDRA - 7059 ) <nl> Merged from 1 . 2 : <nl> * Expose global ColumnFamily metrics ( CASSANDRA - 7273 ) <nl> - | | | | | | | merged common ancestors <nl> - 1 . 2 . 17 <nl> - = = = = = = = <nl> - <nl> - 1 . 2 . 17 <nl> - > > > > > > > cassandra - 1 . 2 <nl> * cqlsh : Fix CompositeType columns in DESCRIBE TABLE output ( CASSANDRA - 7399 ) <nl> * Expose global ColumnFamily metrics ( CASSANDRA - 7273 ) <nl> * Handle possible integer overflow in FastByteArrayOutputStream ( CASSANDRA - 7373 )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 9be0991 . . a960445 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 17 , 6 + 17 , 8 @ @ <nl> * Minimize byte array allocation by AbstractData { Input , Output } ( CASSANDRA - 5090 ) <nl> * Add SSL support for the binary protocol ( CASSANDRA - 5031 ) <nl> * Allow non - schema system ks modification for shuffle to work ( CASSANDRA - 5097 ) <nl> + * cqlsh : Add default limit to SELECT statements ( CASSANDRA - 4972 ) <nl> + * cqlsh : fix DESCRIBE for 1 . 1 cfs in CQL3 ( CASSANDRA - 5101 ) <nl> Merged from 1 . 1 : <nl> * Pig : correctly decode row keys in widerow mode ( CASSANDRA - 5098 ) <nl> <nl> diff - - git a / bin / cqlsh b / bin / cqlsh <nl> index 5d4ca00 . . b2e9755 100755 <nl> - - - a / bin / cqlsh <nl> + + + b / bin / cqlsh <nl> @ @ - 101 , 7 + 101 , 7 @ @ except ImportError , e : <nl> ' Error : % s \ n ' % ( sys . executable , sys . path , e ) ) <nl> <nl> import cql . decoders <nl> - from cql . cursor import _ COUNT _ DESCRIPTION , _ VOID _ DESCRIPTION <nl> + from cql . cursor import _ VOID _ DESCRIPTION <nl> from cql . cqltypes import ( cql _ types , cql _ typename , lookup _ casstype , lookup _ cqltype , <nl> CassandraType ) <nl> <nl> @ @ - 127 , 6 + 127 , 7 @ @ DEFAULT _ TRANSPORT _ FACTORY = ' cqlshlib . tfactory . regular _ transport _ factory ' <nl> <nl> DEFAULT _ TIME _ FORMAT = ' % Y - % m - % d % H : % M : % S % z ' <nl> DEFAULT _ FLOAT _ PRECISION = 5 <nl> + DEFAULT _ SELECT _ LIMIT = 10000 <nl> <nl> if readline is not None and ' libedit ' in readline . _ _ doc _ _ : <nl> DEFAULT _ COMPLETEKEY = ' \ t ' <nl> @ @ - 969 , 19 + 970 , 29 @ @ class Shell ( cmd . Cmd ) : <nl> ksname = self . cql _ unprotect _ name ( ksname ) <nl> cfname = self . cql _ unprotect _ name ( parsed . get _ binding ( ' cfname ' ) ) <nl> decoder = self . determine _ decoder _ for ( cfname , ksname = ksname ) <nl> - self . perform _ statement ( parsed . extract _ orig ( ) , decoder = decoder ) <nl> - <nl> - def perform _ statement ( self , statement , decoder = None ) : <nl> + statement = parsed . extract _ orig ( ) <nl> + with _ default _ limit = parsed . get _ binding ( ' limit ' ) is None <nl> + if with _ default _ limit : <nl> + statement = " % s LIMIT % d ; " % ( statement [ : - 1 ] , DEFAULT _ SELECT _ LIMIT ) <nl> + self . perform _ statement ( statement , <nl> + decoder = decoder , <nl> + with _ default _ limit = with _ default _ limit ) <nl> + <nl> + def perform _ statement ( self , statement , decoder = None , with _ default _ limit = False ) : <nl> if self . tracing _ enabled : <nl> session _ id = UUID ( bytes = self . trace _ next _ query ( ) ) <nl> - result = self . perform _ statement _ untraced ( statement , decoder = None ) <nl> + result = self . perform _ statement _ untraced ( statement , <nl> + decoder = decoder , <nl> + with _ default _ limit = with _ default _ limit ) <nl> time . sleep ( 0 . 5 ) # trace writes are async so we wait a little . <nl> print _ trace _ session ( self , self . cursor , session _ id ) <nl> return result <nl> else : <nl> - return self . perform _ statement _ untraced ( statement , decoder = decoder ) <nl> + return self . perform _ statement _ untraced ( statement , <nl> + decoder = decoder , <nl> + with _ default _ limit = with _ default _ limit ) <nl> <nl> - def perform _ statement _ untraced ( self , statement , decoder = None ) : <nl> + def perform _ statement _ untraced ( self , statement , decoder = None , with _ default _ limit = False ) : <nl> if not statement : <nl> return False <nl> trynum = 1 <nl> @ @ - 1015 , 10 + 1026 , 8 @ @ class Shell ( cmd . Cmd ) : <nl> self . printerr ( traceback . format _ exc ( ) ) <nl> return False <nl> <nl> - if self . cursor . description is _ COUNT _ DESCRIPTION : <nl> - self . print _ count _ result ( self . cursor ) <nl> - elif self . cursor . description is not _ VOID _ DESCRIPTION : <nl> - self . print _ result ( self . cursor ) <nl> + if self . cursor . description is not _ VOID _ DESCRIPTION : <nl> + self . print _ result ( self . cursor , with _ default _ limit ) <nl> self . flush _ output ( ) <nl> return True <nl> <nl> @ @ - 1053 , 14 + 1062 , 6 @ @ class Shell ( cmd . Cmd ) : <nl> <nl> return cursor . name _ info [ num ] [ 1 ] <nl> <nl> - def print _ count _ result ( self , cursor ) : <nl> - if not cursor . result : <nl> - return <nl> - self . writeresult ( ' count ' ) <nl> - self . writeresult ( ' - - - - - ' ) <nl> - self . writeresult ( cursor . result [ 0 ] ) <nl> - self . writeresult ( " " ) <nl> - <nl> def has _ static _ result _ set ( self , cursor ) : <nl> if self . cqlver _ atleast ( 3 ) : <nl> return True # all cql3 resultsets are static , don ' t bother scanning <nl> @ @ - 1073 , 7 + 1074 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> cursor . _ reset ( ) <nl> return True <nl> <nl> - def print _ result ( self , cursor ) : <nl> + def print _ result ( self , cursor , with _ default _ limit ) : <nl> self . decoding _ errors = [ ] <nl> <nl> self . writeresult ( " " ) <nl> @ @ - 1090 , 6 + 1091 , 20 @ @ class Shell ( cmd . Cmd ) : <nl> self . writeresult ( ' % d more decoding errors suppressed . ' <nl> % ( len ( self . decoding _ errors ) - 2 ) , color = RED ) <nl> <nl> + if with _ default _ limit : <nl> + if ( self . is _ count _ result ( cursor ) and self . get _ count ( cursor ) = = DEFAULT _ SELECT _ LIMIT ) \ <nl> + or cursor . rowcount = = DEFAULT _ SELECT _ LIMIT : <nl> + self . writeresult ( " Default LIMIT of % d was used . " <nl> + " Specify your own LIMIT clause to get more results . " <nl> + % DEFAULT _ SELECT _ LIMIT , color = RED ) <nl> + self . writeresult ( " " ) <nl> + <nl> + def is _ count _ result ( self , cursor ) : <nl> + return cursor . description = = [ ( u ' count ' , ' LongType ' , None , None , None , None , True ) ] <nl> + <nl> + def get _ count ( self , cursor ) : <nl> + return lookup _ casstype ( ' LongType ' ) . deserialize ( cursor . result [ 0 ] [ 0 ] . value ) <nl> + <nl> def print _ static _ result ( self , cursor ) : <nl> colnames = [ d [ 0 ] for d in cursor . description ] <nl> colnames _ t = [ ( name , self . get _ nametype ( cursor , n ) ) for ( n , name ) in enumerate ( colnames ) ] <nl> diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py <nl> index 5293857 . . f620d28 100644 <nl> - - - a / pylib / cqlshlib / cql3handling . py <nl> + + + b / pylib / cqlshlib / cql3handling . py <nl> @ @ - 38 , 7 + 38 , 7 @ @ class UnexpectedTableStructure ( UserWarning ) : <nl> def _ _ str _ _ ( self ) : <nl> return ' Unexpected table structure ; may not translate correctly to CQL . ' + self . msg <nl> <nl> - SYSTEM _ KEYSPACES = ( ' system ' , ' system _ traces ' ) <nl> + SYSTEM _ KEYSPACES = ( ' system ' , ' system _ traces ' , ' system _ auth ' ) <nl> <nl> class Cql3ParsingRuleSet ( CqlParsingRuleSet ) : <nl> keywords = set ( ( <nl> @ @ - 734 , 7 + 734 , 7 @ @ syntax _ rules + = r ' ' ' <nl> " FROM " cf = < columnFamilyName > <nl> ( " WHERE " < whereClause > ) ? <nl> ( " ORDER " " BY " < orderByClause > ( " , " < orderByClause > ) * ) ? <nl> - ( " LIMIT " < wholenumber > ) ? <nl> + ( " LIMIT " limit = < wholenumber > ) ? <nl> ; <nl> < whereClause > : : = < relation > ( " AND " < relation > ) * <nl> ; <nl> @ @ - 1441 , 7 + 1441 , 11 @ @ class CqlTableDef : <nl> cf . keyspace = ksname <nl> for attr in cls . json _ attrs : <nl> try : <nl> - setattr ( cf , attr , json . loads ( getattr ( cf , attr ) ) ) <nl> + val = getattr ( cf , attr ) <nl> + # cfs created in 1 . 1 may not have key _ aliases defined <nl> + if attr = = ' key _ aliases ' and val is None : <nl> + val = ' [ ] ' <nl> + setattr ( cf , attr , json . loads ( val ) ) <nl> except AttributeError : <nl> pass <nl> cf . partition _ key _ validator = lookup _ casstype ( cf . key _ validator ) <nl> @ @ - 1472 , 7 + 1476 , 7 @ @ class CqlTableDef : <nl> <nl> def get _ key _ aliases ( self ) : <nl> if not issubclass ( self . partition _ key _ validator , CompositeType ) : <nl> - return self . key _ aliases or [ u ' key ' ] <nl> + return self . key _ aliases or ( self . key _ alias and [ self . key _ alias ] ) or [ u ' key ' ] <nl> expected = len ( self . partition _ key _ validator . subtypes ) <nl> # key , key2 , key3 , . . . , keyN <nl> aliases = [ u ' key ' ] + [ u ' key ' + str ( i ) for i in range ( 2 , expected + 1 ) ] <nl> diff - - git a / pylib / cqlshlib / cqlhandling . py b / pylib / cqlshlib / cqlhandling . py <nl> index f755e95 . . e085df5 100644 <nl> - - - a / pylib / cqlshlib / cqlhandling . py <nl> + + + b / pylib / cqlshlib / cqlhandling . py <nl> @ @ - 557 , 7 + 557 , 7 @ @ syntax _ rules + = r ' ' ' <nl> " FROM " cf = < columnFamilyName > <nl> ( " USING " " CONSISTENCY " selcl = < consistencylevel > ) ? <nl> ( " WHERE " < selectWhereClause > ) ? <nl> - ( " LIMIT " < integer > ) ? <nl> + ( " LIMIT " limit = < integer > ) ? <nl> ; <nl> < selectWhereClause > : : = < relation > ( " AND " < relation > ) * <nl> | keyname = < colname > " IN " " ( " < term > ( " , " < term > ) * " ) "

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f3654f7 . . 3471bcc 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 61 , 12 + 61 , 6 @ @ Merged from 1 . 2 : 
 are broken ( CASSANDRA - 7059 ) 
 Merged from 1 . 2 : 
 * Expose global ColumnFamily metrics ( CASSANDRA - 7273 ) 
 - | | | | | | | merged common ancestors 
 - 1 . 2 . 17 
 - = = = = = = = 
 - 
 - 1 . 2 . 17 
 - > > > > > > > cassandra - 1 . 2 
 * cqlsh : Fix CompositeType columns in DESCRIBE TABLE output ( CASSANDRA - 7399 ) 
 * Expose global ColumnFamily metrics ( CASSANDRA - 7273 ) 
 * Handle possible integer overflow in FastByteArrayOutputStream ( CASSANDRA - 7373 )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 9be0991 . . a960445 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 17 , 6 + 17 , 8 @ @ 
 * Minimize byte array allocation by AbstractData { Input , Output } ( CASSANDRA - 5090 ) 
 * Add SSL support for the binary protocol ( CASSANDRA - 5031 ) 
 * Allow non - schema system ks modification for shuffle to work ( CASSANDRA - 5097 ) 
 + * cqlsh : Add default limit to SELECT statements ( CASSANDRA - 4972 ) 
 + * cqlsh : fix DESCRIBE for 1 . 1 cfs in CQL3 ( CASSANDRA - 5101 ) 
 Merged from 1 . 1 : 
 * Pig : correctly decode row keys in widerow mode ( CASSANDRA - 5098 ) 
 
 diff - - git a / bin / cqlsh b / bin / cqlsh 
 index 5d4ca00 . . b2e9755 100755 
 - - - a / bin / cqlsh 
 + + + b / bin / cqlsh 
 @ @ - 101 , 7 + 101 , 7 @ @ except ImportError , e : 
 ' Error : % s \ n ' % ( sys . executable , sys . path , e ) ) 
 
 import cql . decoders 
 - from cql . cursor import _ COUNT _ DESCRIPTION , _ VOID _ DESCRIPTION 
 + from cql . cursor import _ VOID _ DESCRIPTION 
 from cql . cqltypes import ( cql _ types , cql _ typename , lookup _ casstype , lookup _ cqltype , 
 CassandraType ) 
 
 @ @ - 127 , 6 + 127 , 7 @ @ DEFAULT _ TRANSPORT _ FACTORY = ' cqlshlib . tfactory . regular _ transport _ factory ' 
 
 DEFAULT _ TIME _ FORMAT = ' % Y - % m - % d % H : % M : % S % z ' 
 DEFAULT _ FLOAT _ PRECISION = 5 
 + DEFAULT _ SELECT _ LIMIT = 10000 
 
 if readline is not None and ' libedit ' in readline . _ _ doc _ _ : 
 DEFAULT _ COMPLETEKEY = ' \ t ' 
 @ @ - 969 , 19 + 970 , 29 @ @ class Shell ( cmd . Cmd ) : 
 ksname = self . cql _ unprotect _ name ( ksname ) 
 cfname = self . cql _ unprotect _ name ( parsed . get _ binding ( ' cfname ' ) ) 
 decoder = self . determine _ decoder _ for ( cfname , ksname = ksname ) 
 - self . perform _ statement ( parsed . extract _ orig ( ) , decoder = decoder ) 
 - 
 - def perform _ statement ( self , statement , decoder = None ) : 
 + statement = parsed . extract _ orig ( ) 
 + with _ default _ limit = parsed . get _ binding ( ' limit ' ) is None 
 + if with _ default _ limit : 
 + statement = " % s LIMIT % d ; " % ( statement [ : - 1 ] , DEFAULT _ SELECT _ LIMIT ) 
 + self . perform _ statement ( statement , 
 + decoder = decoder , 
 + with _ default _ limit = with _ default _ limit ) 
 + 
 + def perform _ statement ( self , statement , decoder = None , with _ default _ limit = False ) : 
 if self . tracing _ enabled : 
 session _ id = UUID ( bytes = self . trace _ next _ query ( ) ) 
 - result = self . perform _ statement _ untraced ( statement , decoder = None ) 
 + result = self . perform _ statement _ untraced ( statement , 
 + decoder = decoder , 
 + with _ default _ limit = with _ default _ limit ) 
 time . sleep ( 0 . 5 ) # trace writes are async so we wait a little . 
 print _ trace _ session ( self , self . cursor , session _ id ) 
 return result 
 else : 
 - return self . perform _ statement _ untraced ( statement , decoder = decoder ) 
 + return self . perform _ statement _ untraced ( statement , 
 + decoder = decoder , 
 + with _ default _ limit = with _ default _ limit ) 
 
 - def perform _ statement _ untraced ( self , statement , decoder = None ) : 
 + def perform _ statement _ untraced ( self , statement , decoder = None , with _ default _ limit = False ) : 
 if not statement : 
 return False 
 trynum = 1 
 @ @ - 1015 , 10 + 1026 , 8 @ @ class Shell ( cmd . Cmd ) : 
 self . printerr ( traceback . format _ exc ( ) ) 
 return False 
 
 - if self . cursor . description is _ COUNT _ DESCRIPTION : 
 - self . print _ count _ result ( self . cursor ) 
 - elif self . cursor . description is not _ VOID _ DESCRIPTION : 
 - self . print _ result ( self . cursor ) 
 + if self . cursor . description is not _ VOID _ DESCRIPTION : 
 + self . print _ result ( self . cursor , with _ default _ limit ) 
 self . flush _ output ( ) 
 return True 
 
 @ @ - 1053 , 14 + 1062 , 6 @ @ class Shell ( cmd . Cmd ) : 
 
 return cursor . name _ info [ num ] [ 1 ] 
 
 - def print _ count _ result ( self , cursor ) : 
 - if not cursor . result : 
 - return 
 - self . writeresult ( ' count ' ) 
 - self . writeresult ( ' - - - - - ' ) 
 - self . writeresult ( cursor . result [ 0 ] ) 
 - self . writeresult ( " " ) 
 - 
 def has _ static _ result _ set ( self , cursor ) : 
 if self . cqlver _ atleast ( 3 ) : 
 return True # all cql3 resultsets are static , don ' t bother scanning 
 @ @ - 1073 , 7 + 1074 , 7 @ @ class Shell ( cmd . Cmd ) : 
 cursor . _ reset ( ) 
 return True 
 
 - def print _ result ( self , cursor ) : 
 + def print _ result ( self , cursor , with _ default _ limit ) : 
 self . decoding _ errors = [ ] 
 
 self . writeresult ( " " ) 
 @ @ - 1090 , 6 + 1091 , 20 @ @ class Shell ( cmd . Cmd ) : 
 self . writeresult ( ' % d more decoding errors suppressed . ' 
 % ( len ( self . decoding _ errors ) - 2 ) , color = RED ) 
 
 + if with _ default _ limit : 
 + if ( self . is _ count _ result ( cursor ) and self . get _ count ( cursor ) = = DEFAULT _ SELECT _ LIMIT ) \ 
 + or cursor . rowcount = = DEFAULT _ SELECT _ LIMIT : 
 + self . writeresult ( " Default LIMIT of % d was used . " 
 + " Specify your own LIMIT clause to get more results . " 
 + % DEFAULT _ SELECT _ LIMIT , color = RED ) 
 + self . writeresult ( " " ) 
 + 
 + def is _ count _ result ( self , cursor ) : 
 + return cursor . description = = [ ( u ' count ' , ' LongType ' , None , None , None , None , True ) ] 
 + 
 + def get _ count ( self , cursor ) : 
 + return lookup _ casstype ( ' LongType ' ) . deserialize ( cursor . result [ 0 ] [ 0 ] . value ) 
 + 
 def print _ static _ result ( self , cursor ) : 
 colnames = [ d [ 0 ] for d in cursor . description ] 
 colnames _ t = [ ( name , self . get _ nametype ( cursor , n ) ) for ( n , name ) in enumerate ( colnames ) ] 
 diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py 
 index 5293857 . . f620d28 100644 
 - - - a / pylib / cqlshlib / cql3handling . py 
 + + + b / pylib / cqlshlib / cql3handling . py 
 @ @ - 38 , 7 + 38 , 7 @ @ class UnexpectedTableStructure ( UserWarning ) : 
 def _ _ str _ _ ( self ) : 
 return ' Unexpected table structure ; may not translate correctly to CQL . ' + self . msg 
 
 - SYSTEM _ KEYSPACES = ( ' system ' , ' system _ traces ' ) 
 + SYSTEM _ KEYSPACES = ( ' system ' , ' system _ traces ' , ' system _ auth ' ) 
 
 class Cql3ParsingRuleSet ( CqlParsingRuleSet ) : 
 keywords = set ( ( 
 @ @ - 734 , 7 + 734 , 7 @ @ syntax _ rules + = r ' ' ' 
 " FROM " cf = < columnFamilyName > 
 ( " WHERE " < whereClause > ) ? 
 ( " ORDER " " BY " < orderByClause > ( " , " < orderByClause > ) * ) ? 
 - ( " LIMIT " < wholenumber > ) ? 
 + ( " LIMIT " limit = < wholenumber > ) ? 
 ; 
 < whereClause > : : = < relation > ( " AND " < relation > ) * 
 ; 
 @ @ - 1441 , 7 + 1441 , 11 @ @ class CqlTableDef : 
 cf . keyspace = ksname 
 for attr in cls . json _ attrs : 
 try : 
 - setattr ( cf , attr , json . loads ( getattr ( cf , attr ) ) ) 
 + val = getattr ( cf , attr ) 
 + # cfs created in 1 . 1 may not have key _ aliases defined 
 + if attr = = ' key _ aliases ' and val is None : 
 + val = ' [ ] ' 
 + setattr ( cf , attr , json . loads ( val ) ) 
 except AttributeError : 
 pass 
 cf . partition _ key _ validator = lookup _ casstype ( cf . key _ validator ) 
 @ @ - 1472 , 7 + 1476 , 7 @ @ class CqlTableDef : 
 
 def get _ key _ aliases ( self ) : 
 if not issubclass ( self . partition _ key _ validator , CompositeType ) : 
 - return self . key _ aliases or [ u ' key ' ] 
 + return self . key _ aliases or ( self . key _ alias and [ self . key _ alias ] ) or [ u ' key ' ] 
 expected = len ( self . partition _ key _ validator . subtypes ) 
 # key , key2 , key3 , . . . , keyN 
 aliases = [ u ' key ' ] + [ u ' key ' + str ( i ) for i in range ( 2 , expected + 1 ) ] 
 diff - - git a / pylib / cqlshlib / cqlhandling . py b / pylib / cqlshlib / cqlhandling . py 
 index f755e95 . . e085df5 100644 
 - - - a / pylib / cqlshlib / cqlhandling . py 
 + + + b / pylib / cqlshlib / cqlhandling . py 
 @ @ - 557 , 7 + 557 , 7 @ @ syntax _ rules + = r ' ' ' 
 " FROM " cf = < columnFamilyName > 
 ( " USING " " CONSISTENCY " selcl = < consistencylevel > ) ? 
 ( " WHERE " < selectWhereClause > ) ? 
 - ( " LIMIT " < integer > ) ? 
 + ( " LIMIT " limit = < integer > ) ? 
 ; 
 < selectWhereClause > : : = < relation > ( " AND " < relation > ) * 
 | keyname = < colname > " IN " " ( " < term > ( " , " < term > ) * " ) "
