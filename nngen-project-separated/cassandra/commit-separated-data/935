BLEU SCORE: 0.04932351569489709

TEST MSG: Improve field - checking and error reporting in cassandra . yaml
GENERATED MSG: Improve error message when yaml contains invalid properties

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 3db6b3f . . 5aa56fe 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 6 <nl> + * Improve field - checking and error reporting in cassandra . yaml ( CASSANDRA - 10649 ) <nl> * Print CAS stats in nodetool proxyhistograms ( CASSANDRA - 11507 ) <nl> * More user friendly error when providing an invalid token to nodetool ( CASSANDRA - 9348 ) <nl> * Add static column support to SASI index ( CASSANDRA - 11183 ) <nl> diff - - git a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java <nl> index 435377c . . bd5638a 100644 <nl> - - - a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java <nl> + + + b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java <nl> @ @ - 20 , 10 + 20 , 11 @ @ package org . apache . cassandra . config ; <nl> import java . beans . IntrospectionException ; <nl> import java . io . ByteArrayInputStream ; <nl> import java . io . File ; <nl> - import java . io . InputStream ; <nl> import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> import java . net . URL ; <nl> import java . util . HashSet ; <nl> + <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> @ @ - 32 , 6 + 33 , 9 @ @ import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Maps ; <nl> import com . google . common . collect . Sets ; <nl> import com . google . common . io . ByteStreams ; <nl> + <nl> + import org . apache . commons . lang3 . SystemUtils ; <nl> + <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 112 , 16 + 116 , 17 @ @ public class YamlConfigurationLoader implements ConfigurationLoader <nl> } <nl> <nl> Constructor constructor = new CustomConstructor ( Config . class ) ; <nl> - MissingPropertiesChecker propertiesChecker = new MissingPropertiesChecker ( ) ; <nl> + PropertiesChecker propertiesChecker = new PropertiesChecker ( ) ; <nl> constructor . setPropertyUtils ( propertiesChecker ) ; <nl> Yaml yaml = new Yaml ( constructor ) ; <nl> - Config result = yaml . loadAs ( new ByteArrayInputStream ( configBytes ) , Config . class ) ; <nl> + Config result = loadConfig ( yaml , configBytes ) ; <nl> propertiesChecker . check ( ) ; <nl> return result ; <nl> } <nl> catch ( YAMLException e ) <nl> { <nl> - throw new ConfigurationException ( " Invalid yaml : " + url , e ) ; <nl> + throw new ConfigurationException ( " Invalid yaml : " + url + SystemUtils . LINE _ SEPARATOR <nl> + + " Error : " + e . getMessage ( ) , false ) ; <nl> } <nl> } <nl> <nl> @ @ - 161 , 11 + 166 , 25 @ @ public class YamlConfigurationLoader implements ConfigurationLoader <nl> } <nl> } <nl> <nl> - private static class MissingPropertiesChecker extends PropertyUtils <nl> + private Config loadConfig ( Yaml yaml , byte [ ] configBytes ) <nl> + { <nl> + Config config = yaml . loadAs ( new ByteArrayInputStream ( configBytes ) , Config . class ) ; <nl> + / / If the configuration file is empty yaml will return null . In this case we should use the default <nl> + / / configuration to avoid hitting a NPE at a later stage . <nl> + return config = = null ? new Config ( ) : config ; <nl> + } <nl> + <nl> + / * * <nl> + * Utility class to check that there are no extra properties and that properties that are not null by default <nl> + * are not set to null . <nl> + * / <nl> + private static class PropertiesChecker extends PropertyUtils <nl> { <nl> private final Set < String > missingProperties = new HashSet < > ( ) ; <nl> <nl> - public MissingPropertiesChecker ( ) <nl> + private final Set < String > nullProperties = new HashSet < > ( ) ; <nl> + <nl> + public PropertiesChecker ( ) <nl> { <nl> setSkipMissingProperties ( true ) ; <nl> } <nl> @ @ - 173 , 19 + 192 , 49 @ @ public class YamlConfigurationLoader implements ConfigurationLoader <nl> @ Override <nl> public Property getProperty ( Class < ? extends Object > type , String name ) throws IntrospectionException <nl> { <nl> - Property result = super . getProperty ( type , name ) ; <nl> + final Property result = super . getProperty ( type , name ) ; <nl> + <nl> if ( result instanceof MissingProperty ) <nl> { <nl> missingProperties . add ( result . getName ( ) ) ; <nl> } <nl> - return result ; <nl> + <nl> + return new Property ( result . getName ( ) , result . getType ( ) ) <nl> + { <nl> + @ Override <nl> + public void set ( Object object , Object value ) throws Exception <nl> + { <nl> + if ( value = = null & & get ( object ) ! = null ) <nl> + { <nl> + nullProperties . add ( getName ( ) ) ; <nl> + } <nl> + result . set ( object , value ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public Class < ? > [ ] getActualTypeArguments ( ) <nl> + { <nl> + return result . getActualTypeArguments ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public Object get ( Object object ) <nl> + { <nl> + return result . get ( object ) ; <nl> + } <nl> + } ; <nl> } <nl> <nl> public void check ( ) throws ConfigurationException <nl> { <nl> + if ( ! nullProperties . isEmpty ( ) ) <nl> + { <nl> + throw new ConfigurationException ( " Invalid yaml . Those properties " + nullProperties + " are not valid " , false ) ; <nl> + } <nl> + <nl> if ( ! missingProperties . isEmpty ( ) ) <nl> { <nl> - throw new ConfigurationException ( " Invalid yaml . Please remove properties " + missingProperties + " from your cassandra . yaml " ) ; <nl> + throw new ConfigurationException ( " Invalid yaml . Please remove properties " + missingProperties + " from your cassandra . yaml " , false ) ; <nl> } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 89f66a8 . . a282670 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 7 , 6 + 7 , 7 @ @ <nl> * Allow disabling SlabAllocator ( CASSANDRA - 5935 ) <nl> * Make user - defined compaction JMX blocking ( CASSANDRA - 4952 ) <nl> * Fix streaming does not transfer wrapped range ( CASSANDRA - 5948 ) <nl> + * Fix loading index summary containing empty key ( CASSANDRA - 5965 ) <nl> <nl> <nl> 1 . 2 . 9 <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / IndexSummary . java b / src / java / org / apache / cassandra / io / sstable / IndexSummary . java <nl> index 3213d20 . . 9870d0a 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / IndexSummary . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / IndexSummary . java <nl> @ @ - 121 , 7 + 121 , 8 @ @ public class IndexSummary <nl> for ( int i = 0 ; i < size ; i + + ) <nl> { <nl> positions [ i ] = in . readLong ( ) ; <nl> - keys [ i ] = ByteBufferUtil . readBytes ( in , in . readInt ( ) ) ; <nl> + int len = in . readInt ( ) ; <nl> + keys [ i ] = len = = 0 ? new byte [ 0 ] : ByteBufferUtil . readBytes ( in , len ) ; <nl> } <nl> <nl> return new IndexSummary ( partitioner , keys , positions ) ; <nl> diff - - git a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java <nl> index ae63bf7 . . 86f3f02 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java <nl> + + + b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java <nl> @ @ - 398 , 7 + 398 , 7 @ @ public class ByteBufferUtil <nl> <nl> public static byte [ ] readBytes ( DataInput in , int length ) throws IOException <nl> { <nl> - assert length > 0 ; <nl> + assert length > 0 : " length is not > 0 : " + length ; <nl> byte [ ] bytes = new byte [ length ] ; <nl> in . readFully ( bytes ) ; <nl> return bytes ; <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / IndexSummaryTest . java b / test / unit / org / apache / cassandra / io / sstable / IndexSummaryTest . java <nl> new file mode 100644 <nl> index 0000000 . . 26d2226 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / IndexSummaryTest . java <nl> @ @ - 0 , 0 + 1 , 54 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . io . sstable ; <nl> + <nl> + import com . google . common . io . ByteArrayDataInput ; <nl> + import com . google . common . io . ByteArrayDataOutput ; <nl> + import com . google . common . io . ByteStreams ; <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . dht . IPartitioner ; <nl> + import org . apache . cassandra . dht . RandomPartitioner ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + <nl> + import static org . junit . Assert . assertArrayEquals ; <nl> + import static org . junit . Assert . assertEquals ; <nl> + <nl> + public class IndexSummaryTest <nl> + { <nl> + @ Test <nl> + public void testAddEmptyKey ( ) throws Exception <nl> + { <nl> + IPartitioner p = new RandomPartitioner ( ) ; <nl> + IndexSummaryBuilder builder = new IndexSummaryBuilder ( 1 ) ; <nl> + builder . maybeAddEntry ( p . decorateKey ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) , 0 ) ; <nl> + IndexSummary summary = builder . build ( p ) ; <nl> + assertEquals ( 1 , summary . size ( ) ) ; <nl> + assertEquals ( 0 , summary . getPosition ( 0 ) ) ; <nl> + assertArrayEquals ( new byte [ 0 ] , summary . getKey ( 0 ) ) ; <nl> + <nl> + ByteArrayDataOutput bout = ByteStreams . newDataOutput ( ) ; <nl> + IndexSummary . serializer . serialize ( summary , bout ) ; <nl> + ByteArrayDataInput bin = ByteStreams . newDataInput ( bout . toByteArray ( ) ) ; <nl> + IndexSummary loaded = IndexSummary . serializer . deserialize ( bin , p ) ; <nl> + <nl> + assertEquals ( 1 , loaded . size ( ) ) ; <nl> + assertEquals ( summary . getPosition ( 0 ) , loaded . getPosition ( 0 ) ) ; <nl> + assertArrayEquals ( summary . getKey ( 0 ) , summary . getKey ( 0 ) ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 3db6b3f . . 5aa56fe 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 6 
 + * Improve field - checking and error reporting in cassandra . yaml ( CASSANDRA - 10649 ) 
 * Print CAS stats in nodetool proxyhistograms ( CASSANDRA - 11507 ) 
 * More user friendly error when providing an invalid token to nodetool ( CASSANDRA - 9348 ) 
 * Add static column support to SASI index ( CASSANDRA - 11183 ) 
 diff - - git a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java 
 index 435377c . . bd5638a 100644 
 - - - a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java 
 + + + b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java 
 @ @ - 20 , 10 + 20 , 11 @ @ package org . apache . cassandra . config ; 
 import java . beans . IntrospectionException ; 
 import java . io . ByteArrayInputStream ; 
 import java . io . File ; 
 - import java . io . InputStream ; 
 import java . io . IOException ; 
 + import java . io . InputStream ; 
 import java . net . URL ; 
 import java . util . HashSet ; 
 + 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Set ; 
 @ @ - 32 , 6 + 33 , 9 @ @ import com . google . common . collect . Lists ; 
 import com . google . common . collect . Maps ; 
 import com . google . common . collect . Sets ; 
 import com . google . common . io . ByteStreams ; 
 + 
 + import org . apache . commons . lang3 . SystemUtils ; 
 + 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 112 , 16 + 116 , 17 @ @ public class YamlConfigurationLoader implements ConfigurationLoader 
 } 
 
 Constructor constructor = new CustomConstructor ( Config . class ) ; 
 - MissingPropertiesChecker propertiesChecker = new MissingPropertiesChecker ( ) ; 
 + PropertiesChecker propertiesChecker = new PropertiesChecker ( ) ; 
 constructor . setPropertyUtils ( propertiesChecker ) ; 
 Yaml yaml = new Yaml ( constructor ) ; 
 - Config result = yaml . loadAs ( new ByteArrayInputStream ( configBytes ) , Config . class ) ; 
 + Config result = loadConfig ( yaml , configBytes ) ; 
 propertiesChecker . check ( ) ; 
 return result ; 
 } 
 catch ( YAMLException e ) 
 { 
 - throw new ConfigurationException ( " Invalid yaml : " + url , e ) ; 
 + throw new ConfigurationException ( " Invalid yaml : " + url + SystemUtils . LINE _ SEPARATOR 
 + + " Error : " + e . getMessage ( ) , false ) ; 
 } 
 } 
 
 @ @ - 161 , 11 + 166 , 25 @ @ public class YamlConfigurationLoader implements ConfigurationLoader 
 } 
 } 
 
 - private static class MissingPropertiesChecker extends PropertyUtils 
 + private Config loadConfig ( Yaml yaml , byte [ ] configBytes ) 
 + { 
 + Config config = yaml . loadAs ( new ByteArrayInputStream ( configBytes ) , Config . class ) ; 
 + / / If the configuration file is empty yaml will return null . In this case we should use the default 
 + / / configuration to avoid hitting a NPE at a later stage . 
 + return config = = null ? new Config ( ) : config ; 
 + } 
 + 
 + / * * 
 + * Utility class to check that there are no extra properties and that properties that are not null by default 
 + * are not set to null . 
 + * / 
 + private static class PropertiesChecker extends PropertyUtils 
 { 
 private final Set < String > missingProperties = new HashSet < > ( ) ; 
 
 - public MissingPropertiesChecker ( ) 
 + private final Set < String > nullProperties = new HashSet < > ( ) ; 
 + 
 + public PropertiesChecker ( ) 
 { 
 setSkipMissingProperties ( true ) ; 
 } 
 @ @ - 173 , 19 + 192 , 49 @ @ public class YamlConfigurationLoader implements ConfigurationLoader 
 @ Override 
 public Property getProperty ( Class < ? extends Object > type , String name ) throws IntrospectionException 
 { 
 - Property result = super . getProperty ( type , name ) ; 
 + final Property result = super . getProperty ( type , name ) ; 
 + 
 if ( result instanceof MissingProperty ) 
 { 
 missingProperties . add ( result . getName ( ) ) ; 
 } 
 - return result ; 
 + 
 + return new Property ( result . getName ( ) , result . getType ( ) ) 
 + { 
 + @ Override 
 + public void set ( Object object , Object value ) throws Exception 
 + { 
 + if ( value = = null & & get ( object ) ! = null ) 
 + { 
 + nullProperties . add ( getName ( ) ) ; 
 + } 
 + result . set ( object , value ) ; 
 + } 
 + 
 + @ Override 
 + public Class < ? > [ ] getActualTypeArguments ( ) 
 + { 
 + return result . getActualTypeArguments ( ) ; 
 + } 
 + 
 + @ Override 
 + public Object get ( Object object ) 
 + { 
 + return result . get ( object ) ; 
 + } 
 + } ; 
 } 
 
 public void check ( ) throws ConfigurationException 
 { 
 + if ( ! nullProperties . isEmpty ( ) ) 
 + { 
 + throw new ConfigurationException ( " Invalid yaml . Those properties " + nullProperties + " are not valid " , false ) ; 
 + } 
 + 
 if ( ! missingProperties . isEmpty ( ) ) 
 { 
 - throw new ConfigurationException ( " Invalid yaml . Please remove properties " + missingProperties + " from your cassandra . yaml " ) ; 
 + throw new ConfigurationException ( " Invalid yaml . Please remove properties " + missingProperties + " from your cassandra . yaml " , false ) ; 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 89f66a8 . . a282670 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 7 , 6 + 7 , 7 @ @ 
 * Allow disabling SlabAllocator ( CASSANDRA - 5935 ) 
 * Make user - defined compaction JMX blocking ( CASSANDRA - 4952 ) 
 * Fix streaming does not transfer wrapped range ( CASSANDRA - 5948 ) 
 + * Fix loading index summary containing empty key ( CASSANDRA - 5965 ) 
 
 
 1 . 2 . 9 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / IndexSummary . java b / src / java / org / apache / cassandra / io / sstable / IndexSummary . java 
 index 3213d20 . . 9870d0a 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / IndexSummary . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / IndexSummary . java 
 @ @ - 121 , 7 + 121 , 8 @ @ public class IndexSummary 
 for ( int i = 0 ; i < size ; i + + ) 
 { 
 positions [ i ] = in . readLong ( ) ; 
 - keys [ i ] = ByteBufferUtil . readBytes ( in , in . readInt ( ) ) ; 
 + int len = in . readInt ( ) ; 
 + keys [ i ] = len = = 0 ? new byte [ 0 ] : ByteBufferUtil . readBytes ( in , len ) ; 
 } 
 
 return new IndexSummary ( partitioner , keys , positions ) ; 
 diff - - git a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java 
 index ae63bf7 . . 86f3f02 100644 
 - - - a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java 
 + + + b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java 
 @ @ - 398 , 7 + 398 , 7 @ @ public class ByteBufferUtil 
 
 public static byte [ ] readBytes ( DataInput in , int length ) throws IOException 
 { 
 - assert length > 0 ; 
 + assert length > 0 : " length is not > 0 : " + length ; 
 byte [ ] bytes = new byte [ length ] ; 
 in . readFully ( bytes ) ; 
 return bytes ; 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / IndexSummaryTest . java b / test / unit / org / apache / cassandra / io / sstable / IndexSummaryTest . java 
 new file mode 100644 
 index 0000000 . . 26d2226 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / io / sstable / IndexSummaryTest . java 
 @ @ - 0 , 0 + 1 , 54 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . io . sstable ; 
 + 
 + import com . google . common . io . ByteArrayDataInput ; 
 + import com . google . common . io . ByteArrayDataOutput ; 
 + import com . google . common . io . ByteStreams ; 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . dht . IPartitioner ; 
 + import org . apache . cassandra . dht . RandomPartitioner ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + 
 + import static org . junit . Assert . assertArrayEquals ; 
 + import static org . junit . Assert . assertEquals ; 
 + 
 + public class IndexSummaryTest 
 + { 
 + @ Test 
 + public void testAddEmptyKey ( ) throws Exception 
 + { 
 + IPartitioner p = new RandomPartitioner ( ) ; 
 + IndexSummaryBuilder builder = new IndexSummaryBuilder ( 1 ) ; 
 + builder . maybeAddEntry ( p . decorateKey ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) , 0 ) ; 
 + IndexSummary summary = builder . build ( p ) ; 
 + assertEquals ( 1 , summary . size ( ) ) ; 
 + assertEquals ( 0 , summary . getPosition ( 0 ) ) ; 
 + assertArrayEquals ( new byte [ 0 ] , summary . getKey ( 0 ) ) ; 
 + 
 + ByteArrayDataOutput bout = ByteStreams . newDataOutput ( ) ; 
 + IndexSummary . serializer . serialize ( summary , bout ) ; 
 + ByteArrayDataInput bin = ByteStreams . newDataInput ( bout . toByteArray ( ) ) ; 
 + IndexSummary loaded = IndexSummary . serializer . deserialize ( bin , p ) ; 
 + 
 + assertEquals ( 1 , loaded . size ( ) ) ; 
 + assertEquals ( summary . getPosition ( 0 ) , loaded . getPosition ( 0 ) ) ; 
 + assertArrayEquals ( summary . getKey ( 0 ) , summary . getKey ( 0 ) ) ; 
 + } 
 + }
