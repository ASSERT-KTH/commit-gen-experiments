BLEU SCORE: 0.025540496664715903

TEST MSG: Move CASSANDRA - 9519 test in long tests ( and reduce the size of the list used )
GENERATED MSG: Fix comparison contract violation in the dynamic snitch sorting

TEST DIFF (one line): diff - - git a / test / long / org / apache / cassandra / locator / DynamicEndpointSnitchLongTest . java b / test / long / org / apache / cassandra / locator / DynamicEndpointSnitchLongTest . java <nl> new file mode 100644 <nl> index 0000000 . . 1c628fa <nl> - - - / dev / null <nl> + + + b / test / long / org / apache / cassandra / locator / DynamicEndpointSnitchLongTest . java <nl> @ @ - 0 , 0 + 1 , 104 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . locator ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . net . InetAddress ; <nl> + import java . util . * ; <nl> + <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + <nl> + public class DynamicEndpointSnitchLongTest <nl> + { <nl> + @ Test <nl> + public void testConcurrency ( ) throws InterruptedException , IOException , ConfigurationException <nl> + { <nl> + / / The goal of this test is to check for CASSANDRA - 8448 / CASSANDRA - 9519 <nl> + double badness = DatabaseDescriptor . getDynamicBadnessThreshold ( ) ; <nl> + DatabaseDescriptor . setDynamicBadnessThreshold ( 0 . 0 ) ; <nl> + <nl> + try <nl> + { <nl> + final int ITERATIONS = 10000 ; <nl> + <nl> + / / do this because SS needs to be initialized before DES can work properly . <nl> + StorageService . instance . initClient ( 0 ) ; <nl> + SimpleSnitch ss = new SimpleSnitch ( ) ; <nl> + DynamicEndpointSnitch dsnitch = new DynamicEndpointSnitch ( ss , String . valueOf ( ss . hashCode ( ) ) ) ; <nl> + InetAddress self = FBUtilities . getBroadcastAddress ( ) ; <nl> + <nl> + List < InetAddress > hosts = new ArrayList < > ( ) ; <nl> + / / We want a big list of hosts so sorting takes time , making it much more likely to reproduce the <nl> + / / problem we ' re looking for . <nl> + for ( int i = 0 ; i < 100 ; i + + ) <nl> + for ( int j = 0 ; j < 256 ; j + + ) <nl> + hosts . add ( InetAddress . getByAddress ( new byte [ ] { 127 , 0 , ( byte ) i , ( byte ) j } ) ) ; <nl> + <nl> + ScoreUpdater updater = new ScoreUpdater ( dsnitch , hosts ) ; <nl> + updater . start ( ) ; <nl> + <nl> + List < InetAddress > result = null ; <nl> + for ( int i = 0 ; i < ITERATIONS ; i + + ) <nl> + result = dsnitch . getSortedListByProximity ( self , hosts ) ; <nl> + <nl> + updater . stopped = true ; <nl> + updater . join ( ) ; <nl> + } <nl> + finally <nl> + { <nl> + DatabaseDescriptor . setDynamicBadnessThreshold ( badness ) ; <nl> + } <nl> + } <nl> + <nl> + public static class ScoreUpdater extends Thread <nl> + { <nl> + private static final int SCORE _ RANGE = 100 ; <nl> + <nl> + public volatile boolean stopped ; <nl> + <nl> + private final DynamicEndpointSnitch dsnitch ; <nl> + private final List < InetAddress > hosts ; <nl> + private final Random random = new Random ( ) ; <nl> + <nl> + public ScoreUpdater ( DynamicEndpointSnitch dsnitch , List < InetAddress > hosts ) <nl> + { <nl> + this . dsnitch = dsnitch ; <nl> + this . hosts = hosts ; <nl> + } <nl> + <nl> + public void run ( ) <nl> + { <nl> + while ( ! stopped ) <nl> + { <nl> + InetAddress host = hosts . get ( random . nextInt ( hosts . size ( ) ) ) ; <nl> + int score = random . nextInt ( SCORE _ RANGE ) ; <nl> + dsnitch . receiveTiming ( host , score ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> diff - - git a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java <nl> index 3f90532 . . c1928d8 100644 <nl> - - - a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java <nl> + + + b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java <nl> @ @ - 23 , 7 + 23 , 6 @ @ import java . io . IOException ; <nl> import java . net . InetAddress ; <nl> import java . util . * ; <nl> <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . junit . Test ; <nl> @ @ - 90 , 67 + 89 , 4 @ @ public class DynamicEndpointSnitchTest <nl> order = Arrays . asList ( host1 , host3 , host2 ) ; <nl> assertEquals ( order , dsnitch . getSortedListByProximity ( self , Arrays . asList ( host1 , host2 , host3 ) ) ) ; <nl> } <nl> - <nl> - @ Test <nl> - public void testConcurrency ( ) throws InterruptedException , IOException , ConfigurationException <nl> - { <nl> - / / The goal of this test is to check for CASSANDRA - 8448 / CASSANDRA - 9519 <nl> - double badness = DatabaseDescriptor . getDynamicBadnessThreshold ( ) ; <nl> - DatabaseDescriptor . setDynamicBadnessThreshold ( 0 . 0 ) ; <nl> - <nl> - final int ITERATIONS = 10 ; <nl> - <nl> - / / do this because SS needs to be initialized before DES can work properly . <nl> - StorageService . instance . initClient ( 0 ) ; <nl> - SimpleSnitch ss = new SimpleSnitch ( ) ; <nl> - DynamicEndpointSnitch dsnitch = new DynamicEndpointSnitch ( ss , String . valueOf ( ss . hashCode ( ) ) ) ; <nl> - InetAddress self = FBUtilities . getBroadcastAddress ( ) ; <nl> - <nl> - List < InetAddress > hosts = new ArrayList < > ( ) ; <nl> - / / We want a giant list of hosts so that sorting it takes time , making it much more likely to reproduce the <nl> - / / problem we ' re looking for . <nl> - for ( int i = 0 ; i < 10 ; i + + ) <nl> - for ( int j = 0 ; j < 256 ; j + + ) <nl> - for ( int k = 0 ; k < 256 ; k + + ) <nl> - hosts . add ( InetAddress . getByAddress ( new byte [ ] { 127 , ( byte ) i , ( byte ) j , ( byte ) k } ) ) ; <nl> - <nl> - ScoreUpdater updater = new ScoreUpdater ( dsnitch , hosts ) ; <nl> - updater . start ( ) ; <nl> - <nl> - List < InetAddress > result = null ; <nl> - for ( int i = 0 ; i < ITERATIONS ; i + + ) <nl> - result = dsnitch . getSortedListByProximity ( self , hosts ) ; <nl> - <nl> - updater . stopped = true ; <nl> - updater . join ( ) ; <nl> - <nl> - DatabaseDescriptor . setDynamicBadnessThreshold ( badness ) ; <nl> - } <nl> - <nl> - public static class ScoreUpdater extends Thread <nl> - { <nl> - private static final int SCORE _ RANGE = 100 ; <nl> - <nl> - public volatile boolean stopped ; <nl> - <nl> - private final DynamicEndpointSnitch dsnitch ; <nl> - private final List < InetAddress > hosts ; <nl> - private final Random random = new Random ( ) ; <nl> - <nl> - public ScoreUpdater ( DynamicEndpointSnitch dsnitch , List < InetAddress > hosts ) <nl> - { <nl> - this . dsnitch = dsnitch ; <nl> - this . hosts = hosts ; <nl> - } <nl> - <nl> - public void run ( ) <nl> - { <nl> - while ( ! stopped ) <nl> - { <nl> - InetAddress host = hosts . get ( random . nextInt ( hosts . size ( ) ) ) ; <nl> - int score = random . nextInt ( SCORE _ RANGE ) ; <nl> - dsnitch . receiveTiming ( host , score ) ; <nl> - } <nl> - } <nl> - } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / test / long / org / apache / cassandra / locator / DynamicEndpointSnitchLongTest . java b / test / long / org / apache / cassandra / locator / DynamicEndpointSnitchLongTest . java 
 new file mode 100644 
 index 0000000 . . 1c628fa 
 - - - / dev / null 
 + + + b / test / long / org / apache / cassandra / locator / DynamicEndpointSnitchLongTest . java 
 @ @ - 0 , 0 + 1 , 104 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + 
 + package org . apache . cassandra . locator ; 
 + 
 + import java . io . IOException ; 
 + import java . net . InetAddress ; 
 + import java . util . * ; 
 + 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . service . StorageService ; 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . utils . FBUtilities ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + 
 + public class DynamicEndpointSnitchLongTest 
 + { 
 + @ Test 
 + public void testConcurrency ( ) throws InterruptedException , IOException , ConfigurationException 
 + { 
 + / / The goal of this test is to check for CASSANDRA - 8448 / CASSANDRA - 9519 
 + double badness = DatabaseDescriptor . getDynamicBadnessThreshold ( ) ; 
 + DatabaseDescriptor . setDynamicBadnessThreshold ( 0 . 0 ) ; 
 + 
 + try 
 + { 
 + final int ITERATIONS = 10000 ; 
 + 
 + / / do this because SS needs to be initialized before DES can work properly . 
 + StorageService . instance . initClient ( 0 ) ; 
 + SimpleSnitch ss = new SimpleSnitch ( ) ; 
 + DynamicEndpointSnitch dsnitch = new DynamicEndpointSnitch ( ss , String . valueOf ( ss . hashCode ( ) ) ) ; 
 + InetAddress self = FBUtilities . getBroadcastAddress ( ) ; 
 + 
 + List < InetAddress > hosts = new ArrayList < > ( ) ; 
 + / / We want a big list of hosts so sorting takes time , making it much more likely to reproduce the 
 + / / problem we ' re looking for . 
 + for ( int i = 0 ; i < 100 ; i + + ) 
 + for ( int j = 0 ; j < 256 ; j + + ) 
 + hosts . add ( InetAddress . getByAddress ( new byte [ ] { 127 , 0 , ( byte ) i , ( byte ) j } ) ) ; 
 + 
 + ScoreUpdater updater = new ScoreUpdater ( dsnitch , hosts ) ; 
 + updater . start ( ) ; 
 + 
 + List < InetAddress > result = null ; 
 + for ( int i = 0 ; i < ITERATIONS ; i + + ) 
 + result = dsnitch . getSortedListByProximity ( self , hosts ) ; 
 + 
 + updater . stopped = true ; 
 + updater . join ( ) ; 
 + } 
 + finally 
 + { 
 + DatabaseDescriptor . setDynamicBadnessThreshold ( badness ) ; 
 + } 
 + } 
 + 
 + public static class ScoreUpdater extends Thread 
 + { 
 + private static final int SCORE _ RANGE = 100 ; 
 + 
 + public volatile boolean stopped ; 
 + 
 + private final DynamicEndpointSnitch dsnitch ; 
 + private final List < InetAddress > hosts ; 
 + private final Random random = new Random ( ) ; 
 + 
 + public ScoreUpdater ( DynamicEndpointSnitch dsnitch , List < InetAddress > hosts ) 
 + { 
 + this . dsnitch = dsnitch ; 
 + this . hosts = hosts ; 
 + } 
 + 
 + public void run ( ) 
 + { 
 + while ( ! stopped ) 
 + { 
 + InetAddress host = hosts . get ( random . nextInt ( hosts . size ( ) ) ) ; 
 + int score = random . nextInt ( SCORE _ RANGE ) ; 
 + dsnitch . receiveTiming ( host , score ) ; 
 + } 
 + } 
 + } 
 + } 
 + 
 diff - - git a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java 
 index 3f90532 . . c1928d8 100644 
 - - - a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java 
 + + + b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java 
 @ @ - 23 , 7 + 23 , 6 @ @ import java . io . IOException ; 
 import java . net . InetAddress ; 
 import java . util . * ; 
 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . junit . Test ; 
 @ @ - 90 , 67 + 89 , 4 @ @ public class DynamicEndpointSnitchTest 
 order = Arrays . asList ( host1 , host3 , host2 ) ; 
 assertEquals ( order , dsnitch . getSortedListByProximity ( self , Arrays . asList ( host1 , host2 , host3 ) ) ) ; 
 } 
 - 
 - @ Test 
 - public void testConcurrency ( ) throws InterruptedException , IOException , ConfigurationException 
 - { 
 - / / The goal of this test is to check for CASSANDRA - 8448 / CASSANDRA - 9519 
 - double badness = DatabaseDescriptor . getDynamicBadnessThreshold ( ) ; 
 - DatabaseDescriptor . setDynamicBadnessThreshold ( 0 . 0 ) ; 
 - 
 - final int ITERATIONS = 10 ; 
 - 
 - / / do this because SS needs to be initialized before DES can work properly . 
 - StorageService . instance . initClient ( 0 ) ; 
 - SimpleSnitch ss = new SimpleSnitch ( ) ; 
 - DynamicEndpointSnitch dsnitch = new DynamicEndpointSnitch ( ss , String . valueOf ( ss . hashCode ( ) ) ) ; 
 - InetAddress self = FBUtilities . getBroadcastAddress ( ) ; 
 - 
 - List < InetAddress > hosts = new ArrayList < > ( ) ; 
 - / / We want a giant list of hosts so that sorting it takes time , making it much more likely to reproduce the 
 - / / problem we ' re looking for . 
 - for ( int i = 0 ; i < 10 ; i + + ) 
 - for ( int j = 0 ; j < 256 ; j + + ) 
 - for ( int k = 0 ; k < 256 ; k + + ) 
 - hosts . add ( InetAddress . getByAddress ( new byte [ ] { 127 , ( byte ) i , ( byte ) j , ( byte ) k } ) ) ; 
 - 
 - ScoreUpdater updater = new ScoreUpdater ( dsnitch , hosts ) ; 
 - updater . start ( ) ; 
 - 
 - List < InetAddress > result = null ; 
 - for ( int i = 0 ; i < ITERATIONS ; i + + ) 
 - result = dsnitch . getSortedListByProximity ( self , hosts ) ; 
 - 
 - updater . stopped = true ; 
 - updater . join ( ) ; 
 - 
 - DatabaseDescriptor . setDynamicBadnessThreshold ( badness ) ; 
 - } 
 - 
 - public static class ScoreUpdater extends Thread 
 - { 
 - private static final int SCORE _ RANGE = 100 ; 
 - 
 - public volatile boolean stopped ; 
 - 
 - private final DynamicEndpointSnitch dsnitch ; 
 - private final List < InetAddress > hosts ; 
 - private final Random random = new Random ( ) ; 
 - 
 - public ScoreUpdater ( DynamicEndpointSnitch dsnitch , List < InetAddress > hosts ) 
 - { 
 - this . dsnitch = dsnitch ; 
 - this . hosts = hosts ; 
 - } 
 - 
 - public void run ( ) 
 - { 
 - while ( ! stopped ) 
 - { 
 - InetAddress host = hosts . get ( random . nextInt ( hosts . size ( ) ) ) ; 
 - int score = random . nextInt ( SCORE _ RANGE ) ; 
 - dsnitch . receiveTiming ( host , score ) ; 
 - } 
 - } 
 - } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
