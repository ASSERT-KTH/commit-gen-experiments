BLEU SCORE: 0.23263472697663287

TEST MSG: Allow roles cache to be invalidated
GENERATED MSG: Allow permissions cache to be set via JMX

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 4a700aa . . 94f5fcd 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 <nl> + * Allow roles cache to be invalidated ( CASSANDRA - 8967 ) <nl> * Upgrade Snappy ( CASSANDRA - 9063 ) <nl> * Don ' t start Thrift rpc by default ( CASSANDRA - 9319 ) <nl> * Only stream from unrepaired sstables with incremental repair ( CASSANDRA - 8267 ) <nl> diff - - git a / src / java / org / apache / cassandra / auth / Roles . java b / src / java / org / apache / cassandra / auth / Roles . java <nl> index c73f882 . . da6804b 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / Roles . java <nl> + + + b / src / java / org / apache / cassandra / auth / Roles . java <nl> @ @ - 23 , 10 + 23 , 7 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; <nl> <nl> public class Roles <nl> { <nl> - private static final RolesCache cache = new RolesCache ( DatabaseDescriptor . getRolesValidity ( ) , <nl> - DatabaseDescriptor . getRolesUpdateInterval ( ) , <nl> - DatabaseDescriptor . getRolesCacheMaxEntries ( ) , <nl> - DatabaseDescriptor . getRoleManager ( ) ) ; <nl> + private static final RolesCache cache = new RolesCache ( DatabaseDescriptor . getRoleManager ( ) ) ; <nl> <nl> / * * <nl> * Get all roles granted to the supplied Role , including both directly granted <nl> diff - - git a / src / java / org / apache / cassandra / auth / RolesCache . java b / src / java / org / apache / cassandra / auth / RolesCache . java <nl> index 0e9e134 . . 58aa739 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / RolesCache . java <nl> + + + b / src / java / org / apache / cassandra / auth / RolesCache . java <nl> @ @ - 17 , 6 + 17 , 7 @ @ <nl> * / <nl> package org . apache . cassandra . auth ; <nl> <nl> + import java . lang . management . ManagementFactory ; <nl> import java . util . Set ; <nl> import java . util . concurrent . * ; <nl> <nl> @ @ - 31 , 19 + 32 , 32 @ @ import org . slf4j . LoggerFactory ; <nl> import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> <nl> - public class RolesCache <nl> + import javax . management . MBeanServer ; <nl> + import javax . management . ObjectName ; <nl> + <nl> + public class RolesCache implements RolesCacheMBean <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( RolesCache . class ) ; <nl> <nl> + private final String MBEAN _ NAME = " org . apache . cassandra . auth : type = RolesCache " ; <nl> private final ThreadPoolExecutor cacheRefreshExecutor = new DebuggableThreadPoolExecutor ( " RolesCacheRefresh " , <nl> Thread . NORM _ PRIORITY ) ; <nl> private final IRoleManager roleManager ; <nl> - private final LoadingCache < RoleResource , Set < RoleResource > > cache ; <nl> + private volatile LoadingCache < RoleResource , Set < RoleResource > > cache ; <nl> <nl> - public RolesCache ( int validityPeriod , int updateInterval , int maxEntries , IRoleManager roleManager ) <nl> + public RolesCache ( IRoleManager roleManager ) <nl> { <nl> this . roleManager = roleManager ; <nl> - this . cache = initCache ( validityPeriod , updateInterval , maxEntries ) ; <nl> + this . cache = initCache ( null ) ; <nl> + try <nl> + { <nl> + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> + mbs . registerMBean ( this , new ObjectName ( MBEAN _ NAME ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> } <nl> <nl> public Set < RoleResource > getRoles ( RoleResource role ) <nl> @ @ - 61 , 49 + 75 , 77 @ @ public class RolesCache <nl> } <nl> } <nl> <nl> - private LoadingCache < RoleResource , Set < RoleResource > > initCache ( int validityPeriod , <nl> - int updateInterval , <nl> - int maxEntries ) <nl> + public void invalidate ( ) <nl> + { <nl> + cache = initCache ( null ) ; <nl> + } <nl> + <nl> + public void setValidity ( int validityPeriod ) <nl> + { <nl> + DatabaseDescriptor . setRolesValidity ( validityPeriod ) ; <nl> + cache = initCache ( cache ) ; <nl> + } <nl> + <nl> + public int getValidity ( ) <nl> + { <nl> + return DatabaseDescriptor . getRolesValidity ( ) ; <nl> + } <nl> + <nl> + public void setUpdateInterval ( int updateInterval ) <nl> + { <nl> + DatabaseDescriptor . setRolesUpdateInterval ( updateInterval ) ; <nl> + cache = initCache ( cache ) ; <nl> + } <nl> + <nl> + public int getUpdateInterval ( ) <nl> + { <nl> + return DatabaseDescriptor . getRolesUpdateInterval ( ) ; <nl> + } <nl> + <nl> + <nl> + private LoadingCache < RoleResource , Set < RoleResource > > initCache ( LoadingCache < RoleResource , Set < RoleResource > > existing ) <nl> { <nl> if ( DatabaseDescriptor . getAuthenticator ( ) instanceof AllowAllAuthenticator ) <nl> return null ; <nl> <nl> - if ( validityPeriod < = 0 ) <nl> + if ( DatabaseDescriptor . getRolesValidity ( ) < = 0 ) <nl> return null ; <nl> <nl> - return CacheBuilder . newBuilder ( ) <nl> - . refreshAfterWrite ( updateInterval , TimeUnit . MILLISECONDS ) <nl> - . expireAfterWrite ( validityPeriod , TimeUnit . MILLISECONDS ) <nl> - . maximumSize ( maxEntries ) <nl> - . build ( new CacheLoader < RoleResource , Set < RoleResource > > ( ) <nl> - { <nl> - public Set < RoleResource > load ( RoleResource primaryRole ) <nl> - { <nl> - return roleManager . getRoles ( primaryRole , true ) ; <nl> - } <nl> - <nl> - public ListenableFuture < Set < RoleResource > > reload ( final RoleResource primaryRole , <nl> - final Set < RoleResource > oldValue ) <nl> - { <nl> - ListenableFutureTask < Set < RoleResource > > task ; <nl> - task = ListenableFutureTask . create ( new Callable < Set < RoleResource > > ( ) <nl> - { <nl> - public Set < RoleResource > call ( ) throws Exception <nl> - { <nl> - try <nl> - { <nl> - return roleManager . getRoles ( primaryRole , true ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - logger . debug ( " Error performing async refresh of user roles " , e ) ; <nl> - throw e ; <nl> - } <nl> - } <nl> - } ) ; <nl> - cacheRefreshExecutor . execute ( task ) ; <nl> - return task ; <nl> - } <nl> - } ) ; <nl> + LoadingCache < RoleResource , Set < RoleResource > > newcache = CacheBuilder . newBuilder ( ) <nl> + . refreshAfterWrite ( DatabaseDescriptor . getRolesUpdateInterval ( ) , TimeUnit . MILLISECONDS ) <nl> + . expireAfterWrite ( DatabaseDescriptor . getRolesValidity ( ) , TimeUnit . MILLISECONDS ) <nl> + . maximumSize ( DatabaseDescriptor . getRolesCacheMaxEntries ( ) ) <nl> + . build ( new CacheLoader < RoleResource , Set < RoleResource > > ( ) <nl> + { <nl> + public Set < RoleResource > load ( RoleResource primaryRole ) <nl> + { <nl> + return roleManager . getRoles ( primaryRole , true ) ; <nl> + } <nl> + <nl> + public ListenableFuture < Set < RoleResource > > reload ( final RoleResource primaryRole , <nl> + final Set < RoleResource > oldValue ) <nl> + { <nl> + ListenableFutureTask < Set < RoleResource > > task ; <nl> + task = ListenableFutureTask . create ( new Callable < Set < RoleResource > > ( ) <nl> + { <nl> + public Set < RoleResource > call ( ) throws Exception <nl> + { <nl> + try <nl> + { <nl> + return roleManager . getRoles ( primaryRole , true ) ; <nl> + } catch ( Exception e ) <nl> + { <nl> + logger . debug ( " Error performing async refresh of user roles " , e ) ; <nl> + throw e ; <nl> + } <nl> + } <nl> + } ) ; <nl> + cacheRefreshExecutor . execute ( task ) ; <nl> + return task ; <nl> + } <nl> + } ) ; <nl> + if ( existing ! = null ) <nl> + newcache . putAll ( existing . asMap ( ) ) ; <nl> + return newcache ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / auth / RolesCacheMBean . java b / src / java / org / apache / cassandra / auth / RolesCacheMBean . java <nl> new file mode 100644 <nl> index 0000000 . . cf270e6 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / auth / RolesCacheMBean . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . auth ; <nl> + <nl> + public interface RolesCacheMBean <nl> + { <nl> + public void invalidate ( ) ; <nl> + <nl> + public void setValidity ( int validityPeriod ) ; <nl> + <nl> + public int getValidity ( ) ; <nl> + <nl> + public void setUpdateInterval ( int updateInterval ) ; <nl> + <nl> + public int getUpdateInterval ( ) ; <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index 7d7ef01 . . 421794e 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 51 , 9 + 51 , 9 @ @ public class Config <nl> public volatile int permissions _ validity _ in _ ms = 2000 ; <nl> public int permissions _ cache _ max _ entries = 1000 ; <nl> public volatile int permissions _ update _ interval _ in _ ms = - 1 ; <nl> - public int roles _ validity _ in _ ms = 2000 ; <nl> + public volatile int roles _ validity _ in _ ms = 2000 ; <nl> public int roles _ cache _ max _ entries = 1000 ; <nl> - public int roles _ update _ interval _ in _ ms = - 1 ; <nl> + public volatile int roles _ update _ interval _ in _ ms = - 1 ; <nl> <nl> / * Hashing strategy Random or OPHF * / <nl> public String partitioner ; <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 7da9066 . . ec90be2 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 674 , 6 + 674 , 11 @ @ public class DatabaseDescriptor <nl> return conf . roles _ validity _ in _ ms ; <nl> } <nl> <nl> + public static void setRolesValidity ( int validity ) <nl> + { <nl> + conf . roles _ validity _ in _ ms = validity ; <nl> + } <nl> + <nl> public static int getRolesCacheMaxEntries ( ) <nl> { <nl> return conf . roles _ cache _ max _ entries ; <nl> @ @ - 686 , 6 + 691 , 11 @ @ public class DatabaseDescriptor <nl> : conf . roles _ update _ interval _ in _ ms ; <nl> } <nl> <nl> + public static void setRolesUpdateInterval ( int interval ) <nl> + { <nl> + conf . roles _ update _ interval _ in _ ms = interval ; <nl> + } <nl> + <nl> public static void setPermissionsUpdateInterval ( int updateInterval ) <nl> { <nl> conf . permissions _ update _ interval _ in _ ms = updateInterval ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 4a700aa . . 94f5fcd 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 
 + * Allow roles cache to be invalidated ( CASSANDRA - 8967 ) 
 * Upgrade Snappy ( CASSANDRA - 9063 ) 
 * Don ' t start Thrift rpc by default ( CASSANDRA - 9319 ) 
 * Only stream from unrepaired sstables with incremental repair ( CASSANDRA - 8267 ) 
 diff - - git a / src / java / org / apache / cassandra / auth / Roles . java b / src / java / org / apache / cassandra / auth / Roles . java 
 index c73f882 . . da6804b 100644 
 - - - a / src / java / org / apache / cassandra / auth / Roles . java 
 + + + b / src / java / org / apache / cassandra / auth / Roles . java 
 @ @ - 23 , 10 + 23 , 7 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; 
 
 public class Roles 
 { 
 - private static final RolesCache cache = new RolesCache ( DatabaseDescriptor . getRolesValidity ( ) , 
 - DatabaseDescriptor . getRolesUpdateInterval ( ) , 
 - DatabaseDescriptor . getRolesCacheMaxEntries ( ) , 
 - DatabaseDescriptor . getRoleManager ( ) ) ; 
 + private static final RolesCache cache = new RolesCache ( DatabaseDescriptor . getRoleManager ( ) ) ; 
 
 / * * 
 * Get all roles granted to the supplied Role , including both directly granted 
 diff - - git a / src / java / org / apache / cassandra / auth / RolesCache . java b / src / java / org / apache / cassandra / auth / RolesCache . java 
 index 0e9e134 . . 58aa739 100644 
 - - - a / src / java / org / apache / cassandra / auth / RolesCache . java 
 + + + b / src / java / org / apache / cassandra / auth / RolesCache . java 
 @ @ - 17 , 6 + 17 , 7 @ @ 
 * / 
 package org . apache . cassandra . auth ; 
 
 + import java . lang . management . ManagementFactory ; 
 import java . util . Set ; 
 import java . util . concurrent . * ; 
 
 @ @ - 31 , 19 + 32 , 32 @ @ import org . slf4j . LoggerFactory ; 
 import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 
 - public class RolesCache 
 + import javax . management . MBeanServer ; 
 + import javax . management . ObjectName ; 
 + 
 + public class RolesCache implements RolesCacheMBean 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( RolesCache . class ) ; 
 
 + private final String MBEAN _ NAME = " org . apache . cassandra . auth : type = RolesCache " ; 
 private final ThreadPoolExecutor cacheRefreshExecutor = new DebuggableThreadPoolExecutor ( " RolesCacheRefresh " , 
 Thread . NORM _ PRIORITY ) ; 
 private final IRoleManager roleManager ; 
 - private final LoadingCache < RoleResource , Set < RoleResource > > cache ; 
 + private volatile LoadingCache < RoleResource , Set < RoleResource > > cache ; 
 
 - public RolesCache ( int validityPeriod , int updateInterval , int maxEntries , IRoleManager roleManager ) 
 + public RolesCache ( IRoleManager roleManager ) 
 { 
 this . roleManager = roleManager ; 
 - this . cache = initCache ( validityPeriod , updateInterval , maxEntries ) ; 
 + this . cache = initCache ( null ) ; 
 + try 
 + { 
 + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 + mbs . registerMBean ( this , new ObjectName ( MBEAN _ NAME ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 } 
 
 public Set < RoleResource > getRoles ( RoleResource role ) 
 @ @ - 61 , 49 + 75 , 77 @ @ public class RolesCache 
 } 
 } 
 
 - private LoadingCache < RoleResource , Set < RoleResource > > initCache ( int validityPeriod , 
 - int updateInterval , 
 - int maxEntries ) 
 + public void invalidate ( ) 
 + { 
 + cache = initCache ( null ) ; 
 + } 
 + 
 + public void setValidity ( int validityPeriod ) 
 + { 
 + DatabaseDescriptor . setRolesValidity ( validityPeriod ) ; 
 + cache = initCache ( cache ) ; 
 + } 
 + 
 + public int getValidity ( ) 
 + { 
 + return DatabaseDescriptor . getRolesValidity ( ) ; 
 + } 
 + 
 + public void setUpdateInterval ( int updateInterval ) 
 + { 
 + DatabaseDescriptor . setRolesUpdateInterval ( updateInterval ) ; 
 + cache = initCache ( cache ) ; 
 + } 
 + 
 + public int getUpdateInterval ( ) 
 + { 
 + return DatabaseDescriptor . getRolesUpdateInterval ( ) ; 
 + } 
 + 
 + 
 + private LoadingCache < RoleResource , Set < RoleResource > > initCache ( LoadingCache < RoleResource , Set < RoleResource > > existing ) 
 { 
 if ( DatabaseDescriptor . getAuthenticator ( ) instanceof AllowAllAuthenticator ) 
 return null ; 
 
 - if ( validityPeriod < = 0 ) 
 + if ( DatabaseDescriptor . getRolesValidity ( ) < = 0 ) 
 return null ; 
 
 - return CacheBuilder . newBuilder ( ) 
 - . refreshAfterWrite ( updateInterval , TimeUnit . MILLISECONDS ) 
 - . expireAfterWrite ( validityPeriod , TimeUnit . MILLISECONDS ) 
 - . maximumSize ( maxEntries ) 
 - . build ( new CacheLoader < RoleResource , Set < RoleResource > > ( ) 
 - { 
 - public Set < RoleResource > load ( RoleResource primaryRole ) 
 - { 
 - return roleManager . getRoles ( primaryRole , true ) ; 
 - } 
 - 
 - public ListenableFuture < Set < RoleResource > > reload ( final RoleResource primaryRole , 
 - final Set < RoleResource > oldValue ) 
 - { 
 - ListenableFutureTask < Set < RoleResource > > task ; 
 - task = ListenableFutureTask . create ( new Callable < Set < RoleResource > > ( ) 
 - { 
 - public Set < RoleResource > call ( ) throws Exception 
 - { 
 - try 
 - { 
 - return roleManager . getRoles ( primaryRole , true ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - logger . debug ( " Error performing async refresh of user roles " , e ) ; 
 - throw e ; 
 - } 
 - } 
 - } ) ; 
 - cacheRefreshExecutor . execute ( task ) ; 
 - return task ; 
 - } 
 - } ) ; 
 + LoadingCache < RoleResource , Set < RoleResource > > newcache = CacheBuilder . newBuilder ( ) 
 + . refreshAfterWrite ( DatabaseDescriptor . getRolesUpdateInterval ( ) , TimeUnit . MILLISECONDS ) 
 + . expireAfterWrite ( DatabaseDescriptor . getRolesValidity ( ) , TimeUnit . MILLISECONDS ) 
 + . maximumSize ( DatabaseDescriptor . getRolesCacheMaxEntries ( ) ) 
 + . build ( new CacheLoader < RoleResource , Set < RoleResource > > ( ) 
 + { 
 + public Set < RoleResource > load ( RoleResource primaryRole ) 
 + { 
 + return roleManager . getRoles ( primaryRole , true ) ; 
 + } 
 + 
 + public ListenableFuture < Set < RoleResource > > reload ( final RoleResource primaryRole , 
 + final Set < RoleResource > oldValue ) 
 + { 
 + ListenableFutureTask < Set < RoleResource > > task ; 
 + task = ListenableFutureTask . create ( new Callable < Set < RoleResource > > ( ) 
 + { 
 + public Set < RoleResource > call ( ) throws Exception 
 + { 
 + try 
 + { 
 + return roleManager . getRoles ( primaryRole , true ) ; 
 + } catch ( Exception e ) 
 + { 
 + logger . debug ( " Error performing async refresh of user roles " , e ) ; 
 + throw e ; 
 + } 
 + } 
 + } ) ; 
 + cacheRefreshExecutor . execute ( task ) ; 
 + return task ; 
 + } 
 + } ) ; 
 + if ( existing ! = null ) 
 + newcache . putAll ( existing . asMap ( ) ) ; 
 + return newcache ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / auth / RolesCacheMBean . java b / src / java / org / apache / cassandra / auth / RolesCacheMBean . java 
 new file mode 100644 
 index 0000000 . . cf270e6 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / auth / RolesCacheMBean . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . auth ; 
 + 
 + public interface RolesCacheMBean 
 + { 
 + public void invalidate ( ) ; 
 + 
 + public void setValidity ( int validityPeriod ) ; 
 + 
 + public int getValidity ( ) ; 
 + 
 + public void setUpdateInterval ( int updateInterval ) ; 
 + 
 + public int getUpdateInterval ( ) ; 
 + } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index 7d7ef01 . . 421794e 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 51 , 9 + 51 , 9 @ @ public class Config 
 public volatile int permissions _ validity _ in _ ms = 2000 ; 
 public int permissions _ cache _ max _ entries = 1000 ; 
 public volatile int permissions _ update _ interval _ in _ ms = - 1 ; 
 - public int roles _ validity _ in _ ms = 2000 ; 
 + public volatile int roles _ validity _ in _ ms = 2000 ; 
 public int roles _ cache _ max _ entries = 1000 ; 
 - public int roles _ update _ interval _ in _ ms = - 1 ; 
 + public volatile int roles _ update _ interval _ in _ ms = - 1 ; 
 
 / * Hashing strategy Random or OPHF * / 
 public String partitioner ; 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 7da9066 . . ec90be2 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 674 , 6 + 674 , 11 @ @ public class DatabaseDescriptor 
 return conf . roles _ validity _ in _ ms ; 
 } 
 
 + public static void setRolesValidity ( int validity ) 
 + { 
 + conf . roles _ validity _ in _ ms = validity ; 
 + } 
 + 
 public static int getRolesCacheMaxEntries ( ) 
 { 
 return conf . roles _ cache _ max _ entries ; 
 @ @ - 686 , 6 + 691 , 11 @ @ public class DatabaseDescriptor 
 : conf . roles _ update _ interval _ in _ ms ; 
 } 
 
 + public static void setRolesUpdateInterval ( int interval ) 
 + { 
 + conf . roles _ update _ interval _ in _ ms = interval ; 
 + } 
 + 
 public static void setPermissionsUpdateInterval ( int updateInterval ) 
 { 
 conf . permissions _ update _ interval _ in _ ms = updateInterval ;

NEAREST DIFF:
ELIMINATEDSENTENCE
