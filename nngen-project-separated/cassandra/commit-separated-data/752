BLEU SCORE: 0.040583489434387374

TEST MSG: avoid double map lookup in loop
GENERATED MSG: remove assertion

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> index 3f57fe0 . . ec5e1d9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> @ @ - 179 , 11 + 179 , 13 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy <nl> for ( SSTableReader sstable : ssTablesToGroup ) <nl> { <nl> Integer level = sstable . getSSTableLevel ( ) ; <nl> - if ( ! sstablesByLevel . containsKey ( level ) ) <nl> + Collection < SSTableReader > sstablesForLevel = sstablesByLevel . get ( level ) ; <nl> + if ( sstablesForLevel = = null ) <nl> { <nl> - sstablesByLevel . put ( level , new ArrayList < SSTableReader > ( ) ) ; <nl> + sstablesForLevel = new ArrayList < SSTableReader > ( ) ; <nl> + sstablesByLevel . put ( level , sstablesForLevel ) ; <nl> } <nl> - sstablesByLevel . get ( level ) . add ( sstable ) ; <nl> + sstablesForLevel . add ( sstable ) ; <nl> } <nl> <nl> Collection < Collection < SSTableReader > > groupedSSTables = new ArrayList < > ( ) ;
NEAREST DIFF (one line): diff - - git a / test / long / org / apache / cassandra / db / compaction / LongCompactionsTest . java b / test / long / org / apache / cassandra / db / compaction / LongCompactionsTest . java <nl> index 6ea173c . . 7944555 100644 <nl> - - - a / test / long / org / apache / cassandra / db / compaction / LongCompactionsTest . java <nl> + + + b / test / long / org / apache / cassandra / db / compaction / LongCompactionsTest . java <nl> @ @ - 116 , 6 + 116 , 7 @ @ public class LongCompactionsTest extends SchemaLoader <nl> / / this test does enough rows to force multiple block indexes to be used <nl> Table table = Table . open ( TABLE1 ) ; <nl> ColumnFamilyStore cfs = table . getColumnFamilyStore ( " Standard1 " ) ; <nl> + cfs . clearUnsafe ( ) ; <nl> <nl> final int ROWS _ PER _ SSTABLE = 10 ; <nl> final int SSTABLES = DatabaseDescriptor . getIndexInterval ( ) * 3 / ROWS _ PER _ SSTABLE ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 index 3f57fe0 . . ec5e1d9 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 @ @ - 179 , 11 + 179 , 13 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy 
 for ( SSTableReader sstable : ssTablesToGroup ) 
 { 
 Integer level = sstable . getSSTableLevel ( ) ; 
 - if ( ! sstablesByLevel . containsKey ( level ) ) 
 + Collection < SSTableReader > sstablesForLevel = sstablesByLevel . get ( level ) ; 
 + if ( sstablesForLevel = = null ) 
 { 
 - sstablesByLevel . put ( level , new ArrayList < SSTableReader > ( ) ) ; 
 + sstablesForLevel = new ArrayList < SSTableReader > ( ) ; 
 + sstablesByLevel . put ( level , sstablesForLevel ) ; 
 } 
 - sstablesByLevel . get ( level ) . add ( sstable ) ; 
 + sstablesForLevel . add ( sstable ) ; 
 } 
 
 Collection < Collection < SSTableReader > > groupedSSTables = new ArrayList < > ( ) ;

NEAREST DIFF:
diff - - git a / test / long / org / apache / cassandra / db / compaction / LongCompactionsTest . java b / test / long / org / apache / cassandra / db / compaction / LongCompactionsTest . java 
 index 6ea173c . . 7944555 100644 
 - - - a / test / long / org / apache / cassandra / db / compaction / LongCompactionsTest . java 
 + + + b / test / long / org / apache / cassandra / db / compaction / LongCompactionsTest . java 
 @ @ - 116 , 6 + 116 , 7 @ @ public class LongCompactionsTest extends SchemaLoader 
 / / this test does enough rows to force multiple block indexes to be used 
 Table table = Table . open ( TABLE1 ) ; 
 ColumnFamilyStore cfs = table . getColumnFamilyStore ( " Standard1 " ) ; 
 + cfs . clearUnsafe ( ) ; 
 
 final int ROWS _ PER _ SSTABLE = 10 ; 
 final int SSTABLES = DatabaseDescriptor . getIndexInterval ( ) * 3 / ROWS _ PER _ SSTABLE ;
