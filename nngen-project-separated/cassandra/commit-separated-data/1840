BLEU SCORE: 0.05522397783539471

TEST MSG: Ensure SSTableSimpleUnsortedWriter . close ( ) terminates if
GENERATED MSG: Use separate writer thread in SSTableSimpleUnsortedWriter

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f68c987 . . 09d6d2f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 19 , 7 + 19 , 8 @ @ <nl> * Add batch remove iterator to ABSC ( CASSANDRA - 8414 , 8666 ) <nl> * Fix isClientMode check in Keyspace ( CASSANDRA - 8687 ) <nl> * ' nodetool info ' prints exception against older node ( CASSANDRA - 8796 ) <nl> - <nl> + * Ensure SSTableSimpleUnsortedWriter . close ( ) terminates if <nl> + disk writer has crashed ( CASSANDRA - 8807 ) <nl> <nl> 2 . 0 . 12 : <nl> * Use more efficient slice size for querying internal secondary <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java <nl> index 614ca7d . . 5bddea3 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java <nl> @ @ - 148 , 17 + 148 , 15 @ @ public class SSTableSimpleUnsortedWriter extends AbstractSSTableSimpleWriter <nl> public void close ( ) throws IOException <nl> { <nl> sync ( ) ; <nl> + put ( SENTINEL ) ; <nl> try <nl> { <nl> - writeQueue . put ( SENTINEL ) ; <nl> diskWriter . join ( ) ; <nl> } <nl> catch ( InterruptedException e ) <nl> { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> - <nl> - checkForWriterException ( ) ; <nl> } <nl> <nl> private void sync ( ) throws IOException <nl> @ @ - 166 , 25 + 164 , 28 @ @ public class SSTableSimpleUnsortedWriter extends AbstractSSTableSimpleWriter <nl> if ( buffer . isEmpty ( ) ) <nl> return ; <nl> <nl> + columnFamily = null ; <nl> + put ( buffer ) ; <nl> + buffer = new Buffer ( ) ; <nl> + currentSize = 0 ; <nl> + columnFamily = getColumnFamily ( ) ; <nl> + } <nl> + <nl> + private void put ( Buffer buffer ) throws IOException <nl> + { <nl> while ( true ) <nl> { <nl> checkForWriterException ( ) ; <nl> - <nl> - columnFamily = null ; <nl> try <nl> { <nl> - if ( writeQueue . offer ( buffer , 1L , TimeUnit . SECONDS ) ) <nl> + if ( writeQueue . offer ( buffer , 1 , TimeUnit . SECONDS ) ) <nl> break ; <nl> } <nl> catch ( InterruptedException e ) <nl> { <nl> throw new RuntimeException ( e ) ; <nl> - <nl> } <nl> } <nl> - buffer = new Buffer ( ) ; <nl> - currentSize = 0 ; <nl> - columnFamily = getColumnFamily ( ) ; <nl> } <nl> <nl> private void checkForWriterException ( ) throws IOException
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f484016 . . 7ae56a7 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 4 , 6 + 4 , 8 @ @ <nl> * CLibrary . createHardLinkWithExec ( ) to check for errors ( CASSANDRA - 3101 ) <nl> Merged from 0 . 8 : <nl> * prevent new nodes from thinking down nodes are up forever ( CASSANDRA - 3626 ) <nl> + * fsync the directory after new sstable or commitlog segment are created ( CASSANDRA - 3250 ) <nl> + <nl> <nl> 1 . 0 . 6 <nl> * ( CQL ) fix cqlsh support for replicate _ on _ write ( CASSANDRA - 3596 ) <nl> diff - - git a / src / java / org / apache / cassandra / io / util / SequentialWriter . java b / src / java / org / apache / cassandra / io / util / SequentialWriter . java <nl> index 79af8c1 . . 098fad4 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / SequentialWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / util / SequentialWriter . java <nl> @ @ - 39 , 6 + 39 , 9 @ @ public class SequentialWriter extends OutputStream <nl> protected byte [ ] buffer ; <nl> private final boolean skipIOCache ; <nl> private final int fd ; <nl> + private final int directoryFD ; <nl> + / / directory should be synced only after first file sync , in other words , only once per file <nl> + private boolean directorySynced = false ; <nl> <nl> protected long current = 0 , bufferOffset ; <nl> protected int validBufferBytes ; <nl> @ @ - 60 , 6 + 63 , 7 @ @ public class SequentialWriter extends OutputStream <nl> buffer = new byte [ bufferSize ] ; <nl> this . skipIOCache = skipIOCache ; <nl> fd = CLibrary . getfd ( out . getFD ( ) ) ; <nl> + directoryFD = CLibrary . tryOpenDirectory ( file . getParent ( ) ) ; <nl> stream = new DataOutputStream ( this ) ; <nl> } <nl> <nl> @ @ - 148 , 6 + 152 , 12 @ @ public class SequentialWriter extends OutputStream <nl> flushInternal ( ) ; <nl> out . getFD ( ) . sync ( ) ; <nl> <nl> + if ( ! directorySynced ) <nl> + { <nl> + CLibrary . trySync ( directoryFD ) ; <nl> + directorySynced = true ; <nl> + } <nl> + <nl> syncNeeded = false ; <nl> } <nl> } <nl> @ @ - 288 , 6 + 298 , 7 @ @ public class SequentialWriter extends OutputStream <nl> CLibrary . trySkipCache ( fd , 0 , 0 ) ; <nl> <nl> out . close ( ) ; <nl> + CLibrary . tryCloseFD ( directoryFD ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / utils / CLibrary . java b / src / java / org / apache / cassandra / utils / CLibrary . java <nl> index 090a355 . . 0f99403 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / CLibrary . java <nl> + + + b / src / java / org / apache / cassandra / utils / CLibrary . java <nl> @ @ - 46 , 6 + 46 , 7 @ @ public final class CLibrary <nl> private static final int F _ SETFL = 4 ; / * set file status flags * / <nl> private static final int F _ NOCACHE = 48 ; / * Mac OS X specific flag , turns cache on / off * / <nl> private static final int O _ DIRECT = 040000 ; / * fcntl . h * / <nl> + private static final int O _ RDONLY = 00000000 ; / * fcntl . h * / <nl> <nl> private static final int POSIX _ FADV _ NORMAL = 0 ; / * fadvise . h * / <nl> private static final int POSIX _ FADV _ RANDOM = 1 ; / * fadvise . h * / <nl> @ @ - 84 , 7 + 85 , 11 @ @ public final class CLibrary <nl> <nl> / / fadvice <nl> public static native int posix _ fadvise ( int fd , long offset , int len , int flag ) throws LastErrorException ; <nl> - <nl> + <nl> + public static native int open ( String path , int flags ) throws LastErrorException ; <nl> + public static native int fsync ( int fd ) throws LastErrorException ; <nl> + public static native int close ( int fd ) throws LastErrorException ; <nl> + <nl> private static int errno ( RuntimeException e ) <nl> { <nl> assert e instanceof LastErrorException ; <nl> @ @ - 261 , 6 + 266 , 73 @ @ public final class CLibrary <nl> return result ; <nl> } <nl> <nl> + public static int tryOpenDirectory ( String path ) <nl> + { <nl> + int fd = - 1 ; <nl> + <nl> + try <nl> + { <nl> + return open ( path , O _ RDONLY ) ; <nl> + } <nl> + catch ( UnsatisfiedLinkError e ) <nl> + { <nl> + / / JNA is unavailable just skipping Direct I / O <nl> + } <nl> + catch ( RuntimeException e ) <nl> + { <nl> + if ( ! ( e instanceof LastErrorException ) ) <nl> + throw e ; <nl> + <nl> + logger . warn ( String . format ( " open ( % s , O _ RDONLY ) failed , errno ( % d ) . " , path , CLibrary . errno ( e ) ) ) ; <nl> + } <nl> + <nl> + return fd ; <nl> + } <nl> + <nl> + public static void trySync ( int fd ) <nl> + { <nl> + if ( fd = = - 1 ) <nl> + return ; <nl> + <nl> + try <nl> + { <nl> + fsync ( fd ) ; <nl> + } <nl> + catch ( UnsatisfiedLinkError e ) <nl> + { <nl> + / / JNA is unavailable just skipping Direct I / O <nl> + } <nl> + catch ( RuntimeException e ) <nl> + { <nl> + if ( ! ( e instanceof LastErrorException ) ) <nl> + throw e ; <nl> + <nl> + logger . warn ( String . format ( " fsync ( % d ) failed , errno ( % d ) . " , fd , CLibrary . errno ( e ) ) ) ; <nl> + } <nl> + } <nl> + <nl> + public static void tryCloseFD ( int fd ) <nl> + { <nl> + if ( fd = = - 1 ) <nl> + return ; <nl> + <nl> + try <nl> + { <nl> + close ( fd ) ; <nl> + } <nl> + catch ( UnsatisfiedLinkError e ) <nl> + { <nl> + / / JNA is unavailable just skipping Direct I / O <nl> + } <nl> + catch ( RuntimeException e ) <nl> + { <nl> + if ( ! ( e instanceof LastErrorException ) ) <nl> + throw e ; <nl> + <nl> + logger . warn ( String . format ( " close ( % d ) failed , errno ( % d ) . " , fd , CLibrary . errno ( e ) ) ) ; <nl> + } <nl> + } <nl> + <nl> / * * <nl> * Get system file descriptor from FileDescriptor object . <nl> * @ param descriptor - FileDescriptor objec to get fd from

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f68c987 . . 09d6d2f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 19 , 7 + 19 , 8 @ @ 
 * Add batch remove iterator to ABSC ( CASSANDRA - 8414 , 8666 ) 
 * Fix isClientMode check in Keyspace ( CASSANDRA - 8687 ) 
 * ' nodetool info ' prints exception against older node ( CASSANDRA - 8796 ) 
 - 
 + * Ensure SSTableSimpleUnsortedWriter . close ( ) terminates if 
 + disk writer has crashed ( CASSANDRA - 8807 ) 
 
 2 . 0 . 12 : 
 * Use more efficient slice size for querying internal secondary 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java 
 index 614ca7d . . 5bddea3 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java 
 @ @ - 148 , 17 + 148 , 15 @ @ public class SSTableSimpleUnsortedWriter extends AbstractSSTableSimpleWriter 
 public void close ( ) throws IOException 
 { 
 sync ( ) ; 
 + put ( SENTINEL ) ; 
 try 
 { 
 - writeQueue . put ( SENTINEL ) ; 
 diskWriter . join ( ) ; 
 } 
 catch ( InterruptedException e ) 
 { 
 throw new RuntimeException ( e ) ; 
 } 
 - 
 - checkForWriterException ( ) ; 
 } 
 
 private void sync ( ) throws IOException 
 @ @ - 166 , 25 + 164 , 28 @ @ public class SSTableSimpleUnsortedWriter extends AbstractSSTableSimpleWriter 
 if ( buffer . isEmpty ( ) ) 
 return ; 
 
 + columnFamily = null ; 
 + put ( buffer ) ; 
 + buffer = new Buffer ( ) ; 
 + currentSize = 0 ; 
 + columnFamily = getColumnFamily ( ) ; 
 + } 
 + 
 + private void put ( Buffer buffer ) throws IOException 
 + { 
 while ( true ) 
 { 
 checkForWriterException ( ) ; 
 - 
 - columnFamily = null ; 
 try 
 { 
 - if ( writeQueue . offer ( buffer , 1L , TimeUnit . SECONDS ) ) 
 + if ( writeQueue . offer ( buffer , 1 , TimeUnit . SECONDS ) ) 
 break ; 
 } 
 catch ( InterruptedException e ) 
 { 
 throw new RuntimeException ( e ) ; 
 - 
 } 
 } 
 - buffer = new Buffer ( ) ; 
 - currentSize = 0 ; 
 - columnFamily = getColumnFamily ( ) ; 
 } 
 
 private void checkForWriterException ( ) throws IOException

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f484016 . . 7ae56a7 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 4 , 6 + 4 , 8 @ @ 
 * CLibrary . createHardLinkWithExec ( ) to check for errors ( CASSANDRA - 3101 ) 
 Merged from 0 . 8 : 
 * prevent new nodes from thinking down nodes are up forever ( CASSANDRA - 3626 ) 
 + * fsync the directory after new sstable or commitlog segment are created ( CASSANDRA - 3250 ) 
 + 
 
 1 . 0 . 6 
 * ( CQL ) fix cqlsh support for replicate _ on _ write ( CASSANDRA - 3596 ) 
 diff - - git a / src / java / org / apache / cassandra / io / util / SequentialWriter . java b / src / java / org / apache / cassandra / io / util / SequentialWriter . java 
 index 79af8c1 . . 098fad4 100644 
 - - - a / src / java / org / apache / cassandra / io / util / SequentialWriter . java 
 + + + b / src / java / org / apache / cassandra / io / util / SequentialWriter . java 
 @ @ - 39 , 6 + 39 , 9 @ @ public class SequentialWriter extends OutputStream 
 protected byte [ ] buffer ; 
 private final boolean skipIOCache ; 
 private final int fd ; 
 + private final int directoryFD ; 
 + / / directory should be synced only after first file sync , in other words , only once per file 
 + private boolean directorySynced = false ; 
 
 protected long current = 0 , bufferOffset ; 
 protected int validBufferBytes ; 
 @ @ - 60 , 6 + 63 , 7 @ @ public class SequentialWriter extends OutputStream 
 buffer = new byte [ bufferSize ] ; 
 this . skipIOCache = skipIOCache ; 
 fd = CLibrary . getfd ( out . getFD ( ) ) ; 
 + directoryFD = CLibrary . tryOpenDirectory ( file . getParent ( ) ) ; 
 stream = new DataOutputStream ( this ) ; 
 } 
 
 @ @ - 148 , 6 + 152 , 12 @ @ public class SequentialWriter extends OutputStream 
 flushInternal ( ) ; 
 out . getFD ( ) . sync ( ) ; 
 
 + if ( ! directorySynced ) 
 + { 
 + CLibrary . trySync ( directoryFD ) ; 
 + directorySynced = true ; 
 + } 
 + 
 syncNeeded = false ; 
 } 
 } 
 @ @ - 288 , 6 + 298 , 7 @ @ public class SequentialWriter extends OutputStream 
 CLibrary . trySkipCache ( fd , 0 , 0 ) ; 
 
 out . close ( ) ; 
 + CLibrary . tryCloseFD ( directoryFD ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / utils / CLibrary . java b / src / java / org / apache / cassandra / utils / CLibrary . java 
 index 090a355 . . 0f99403 100644 
 - - - a / src / java / org / apache / cassandra / utils / CLibrary . java 
 + + + b / src / java / org / apache / cassandra / utils / CLibrary . java 
 @ @ - 46 , 6 + 46 , 7 @ @ public final class CLibrary 
 private static final int F _ SETFL = 4 ; / * set file status flags * / 
 private static final int F _ NOCACHE = 48 ; / * Mac OS X specific flag , turns cache on / off * / 
 private static final int O _ DIRECT = 040000 ; / * fcntl . h * / 
 + private static final int O _ RDONLY = 00000000 ; / * fcntl . h * / 
 
 private static final int POSIX _ FADV _ NORMAL = 0 ; / * fadvise . h * / 
 private static final int POSIX _ FADV _ RANDOM = 1 ; / * fadvise . h * / 
 @ @ - 84 , 7 + 85 , 11 @ @ public final class CLibrary 
 
 / / fadvice 
 public static native int posix _ fadvise ( int fd , long offset , int len , int flag ) throws LastErrorException ; 
 - 
 + 
 + public static native int open ( String path , int flags ) throws LastErrorException ; 
 + public static native int fsync ( int fd ) throws LastErrorException ; 
 + public static native int close ( int fd ) throws LastErrorException ; 
 + 
 private static int errno ( RuntimeException e ) 
 { 
 assert e instanceof LastErrorException ; 
 @ @ - 261 , 6 + 266 , 73 @ @ public final class CLibrary 
 return result ; 
 } 
 
 + public static int tryOpenDirectory ( String path ) 
 + { 
 + int fd = - 1 ; 
 + 
 + try 
 + { 
 + return open ( path , O _ RDONLY ) ; 
 + } 
 + catch ( UnsatisfiedLinkError e ) 
 + { 
 + / / JNA is unavailable just skipping Direct I / O 
 + } 
 + catch ( RuntimeException e ) 
 + { 
 + if ( ! ( e instanceof LastErrorException ) ) 
 + throw e ; 
 + 
 + logger . warn ( String . format ( " open ( % s , O _ RDONLY ) failed , errno ( % d ) . " , path , CLibrary . errno ( e ) ) ) ; 
 + } 
 + 
 + return fd ; 
 + } 
 + 
 + public static void trySync ( int fd ) 
 + { 
 + if ( fd = = - 1 ) 
 + return ; 
 + 
 + try 
 + { 
 + fsync ( fd ) ; 
 + } 
 + catch ( UnsatisfiedLinkError e ) 
 + { 
 + / / JNA is unavailable just skipping Direct I / O 
 + } 
 + catch ( RuntimeException e ) 
 + { 
 + if ( ! ( e instanceof LastErrorException ) ) 
 + throw e ; 
 + 
 + logger . warn ( String . format ( " fsync ( % d ) failed , errno ( % d ) . " , fd , CLibrary . errno ( e ) ) ) ; 
 + } 
 + } 
 + 
 + public static void tryCloseFD ( int fd ) 
 + { 
 + if ( fd = = - 1 ) 
 + return ; 
 + 
 + try 
 + { 
 + close ( fd ) ; 
 + } 
 + catch ( UnsatisfiedLinkError e ) 
 + { 
 + / / JNA is unavailable just skipping Direct I / O 
 + } 
 + catch ( RuntimeException e ) 
 + { 
 + if ( ! ( e instanceof LastErrorException ) ) 
 + throw e ; 
 + 
 + logger . warn ( String . format ( " close ( % d ) failed , errno ( % d ) . " , fd , CLibrary . errno ( e ) ) ) ; 
 + } 
 + } 
 + 
 / * * 
 * Get system file descriptor from FileDescriptor object . 
 * @ param descriptor - FileDescriptor objec to get fd from
