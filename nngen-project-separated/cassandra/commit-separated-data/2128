BLEU SCORE: 0.04513617516969123

TEST MSG: Add human readable option to nodetool outputs .
GENERATED MSG: Use of o . a . c . metrics in nodetool

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index fdf6fbe . . 7f10ca5 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 1 <nl> + * Add human readable option to nodetool commands ( CASSANDRA - 5433 ) <nl> * Don ' t try to set repairedAt on old sstables ( CASSANDRA - 7913 ) <nl> * Add metrics for tracking PreparedStatement use ( CASSANDRA - 7719 ) <nl> * ( cqlsh ) tab - completion for triggers ( CASSANDRA - 7824 ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeTool . java b / src / java / org / apache / cassandra / tools / NodeTool . java <nl> index d5a4bb3 . . cc38107 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeTool . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeTool . java <nl> @ @ - 375 , 33 + 375 , 33 @ @ public class NodeTool <nl> CacheServiceMBean cacheService = probe . getCacheServiceMBean ( ) ; <nl> <nl> / / Key Cache : Hits , Requests , RecentHitRate , SavePeriodInSeconds <nl> - System . out . printf ( " % - 17s : entries % d , size % d ( bytes ) , capacity % d ( bytes ) , % d hits , % d requests , % . 3f recent hit rate , % d save period in seconds % n " , <nl> + System . out . printf ( " % - 17s : entries % d , size % s , capacity % s , % d hits , % d requests , % . 3f recent hit rate , % d save period in seconds % n " , <nl> " Key Cache " , <nl> probe . getCacheMetric ( " KeyCache " , " Entries " ) , <nl> - probe . getCacheMetric ( " KeyCache " , " Size " ) , <nl> - probe . getCacheMetric ( " KeyCache " , " Capacity " ) , <nl> + FileUtils . stringifyFileSize ( ( long ) probe . getCacheMetric ( " KeyCache " , " Size " ) ) , <nl> + FileUtils . stringifyFileSize ( ( long ) probe . getCacheMetric ( " KeyCache " , " Capacity " ) ) , <nl> probe . getCacheMetric ( " KeyCache " , " Hits " ) , <nl> probe . getCacheMetric ( " KeyCache " , " Requests " ) , <nl> probe . getCacheMetric ( " KeyCache " , " HitRate " ) , <nl> cacheService . getKeyCacheSavePeriodInSeconds ( ) ) ; <nl> <nl> / / Row Cache : Hits , Requests , RecentHitRate , SavePeriodInSeconds <nl> - System . out . printf ( " % - 17s : entries % d , size % d ( bytes ) , capacity % d ( bytes ) , % d hits , % d requests , % . 3f recent hit rate , % d save period in seconds % n " , <nl> + System . out . printf ( " % - 17s : entries % d , size % s , capacity % s , % d hits , % d requests , % . 3f recent hit rate , % d save period in seconds % n " , <nl> " Row Cache " , <nl> probe . getCacheMetric ( " RowCache " , " Entries " ) , <nl> - probe . getCacheMetric ( " RowCache " , " Size " ) , <nl> - probe . getCacheMetric ( " RowCache " , " Capacity " ) , <nl> + FileUtils . stringifyFileSize ( ( long ) probe . getCacheMetric ( " RowCache " , " Size " ) ) , <nl> + FileUtils . stringifyFileSize ( ( long ) probe . getCacheMetric ( " RowCache " , " Capacity " ) ) , <nl> probe . getCacheMetric ( " RowCache " , " Hits " ) , <nl> probe . getCacheMetric ( " RowCache " , " Requests " ) , <nl> probe . getCacheMetric ( " RowCache " , " HitRate " ) , <nl> cacheService . getRowCacheSavePeriodInSeconds ( ) ) ; <nl> <nl> / / Counter Cache : Hits , Requests , RecentHitRate , SavePeriodInSeconds <nl> - System . out . printf ( " % - 17s : entries % d , size % d ( bytes ) , capacity % d ( bytes ) , % d hits , % d requests , % . 3f recent hit rate , % d save period in seconds % n " , <nl> + System . out . printf ( " % - 17s : entries % d , size % s , capacity % s , % d hits , % d requests , % . 3f recent hit rate , % d save period in seconds % n " , <nl> " Counter Cache " , <nl> probe . getCacheMetric ( " CounterCache " , " Entries " ) , <nl> - probe . getCacheMetric ( " CounterCache " , " Size " ) , <nl> - probe . getCacheMetric ( " CounterCache " , " Capacity " ) , <nl> + FileUtils . stringifyFileSize ( ( long ) probe . getCacheMetric ( " CounterCache " , " Size " ) ) , <nl> + FileUtils . stringifyFileSize ( ( long ) probe . getCacheMetric ( " CounterCache " , " Capacity " ) ) , <nl> probe . getCacheMetric ( " CounterCache " , " Hits " ) , <nl> probe . getCacheMetric ( " CounterCache " , " Requests " ) , <nl> probe . getCacheMetric ( " CounterCache " , " HitRate " ) , <nl> @ @ - 544 , 6 + 544 , 11 @ @ public class NodeTool <nl> @ Command ( name = " netstats " , description = " Print network information on provided host ( connecting node by default ) " ) <nl> public static class NetStats extends NodeToolCmd <nl> { <nl> + @ Option ( title = " human _ readable " , <nl> + name = { " - H " , " - - human - readable " } , <nl> + description = " Display bytes in human readable form , i . e . KB , MB , GB , TB " ) <nl> + private boolean humanReadable = false ; <nl> + <nl> @ Override <nl> public void execute ( NodeProbe probe ) <nl> { <nl> @ @ - 559 , 7 + 564 , 10 @ @ public class NodeTool <nl> System . out . printf ( " % s % n " , info . peer . toString ( ) ) ; <nl> if ( ! info . receivingSummaries . isEmpty ( ) ) <nl> { <nl> - System . out . printf ( " Receiving % d files , % d bytes total % n " , info . getTotalFilesToReceive ( ) , info . getTotalSizeToReceive ( ) ) ; <nl> + if ( humanReadable ) <nl> + System . out . printf ( " Receiving % d files , % s total % n " , info . getTotalFilesToReceive ( ) , FileUtils . stringifyFileSize ( info . getTotalSizeToReceive ( ) ) ) ; <nl> + else <nl> + System . out . printf ( " Receiving % d files , % d bytes total % n " , info . getTotalFilesToReceive ( ) , info . getTotalSizeToReceive ( ) ) ; <nl> for ( ProgressInfo progress : info . getReceivingFiles ( ) ) <nl> { <nl> System . out . printf ( " % s % n " , progress . toString ( ) ) ; <nl> @ @ - 567 , 7 + 575 , 10 @ @ public class NodeTool <nl> } <nl> if ( ! info . sendingSummaries . isEmpty ( ) ) <nl> { <nl> - System . out . printf ( " Sending % d files , % d bytes total % n " , info . getTotalFilesToSend ( ) , info . getTotalSizeToSend ( ) ) ; <nl> + if ( humanReadable ) <nl> + System . out . printf ( " Sending % d files , % s total % n " , info . getTotalFilesToSend ( ) , FileUtils . stringifyFileSize ( info . getTotalSizeToSend ( ) ) ) ; <nl> + else <nl> + System . out . printf ( " Sending % d files , % d bytes total % n " , info . getTotalFilesToSend ( ) , info . getTotalSizeToSend ( ) ) ; <nl> for ( ProgressInfo progress : info . getSendingFiles ( ) ) <nl> { <nl> System . out . printf ( " % s % n " , progress . toString ( ) ) ; <nl> @ @ - 614 , 6 + 625 , 11 @ @ public class NodeTool <nl> @ Option ( name = " - i " , description = " Ignore the list of column families and display the remaining cfs " ) <nl> private boolean ignore = false ; <nl> <nl> + @ Option ( title = " human _ readable " , <nl> + name = { " - H " , " - - human - readable " } , <nl> + description = " Display bytes in human readable form , i . e . KB , MB , GB , TB " ) <nl> + private boolean humanReadable = false ; <nl> + <nl> @ Override <nl> public void execute ( NodeProbe probe ) <nl> { <nl> @ @ - 683 , 9 + 699 , 9 @ @ public class NodeTool <nl> : Double . NaN ; <nl> <nl> System . out . println ( " \ tRead Count : " + keyspaceReadCount ) ; <nl> - System . out . println ( " \ tRead Latency : " + format ( " % s " , keyspaceReadLatency ) + " ms . " ) ; <nl> + System . out . println ( " \ tRead Latency : " + String . format ( " % s " , keyspaceReadLatency ) + " ms . " ) ; <nl> System . out . println ( " \ tWrite Count : " + keyspaceWriteCount ) ; <nl> - System . out . println ( " \ tWrite Latency : " + format ( " % s " , keyspaceWriteLatency ) + " ms . " ) ; <nl> + System . out . println ( " \ tWrite Latency : " + String . format ( " % s " , keyspaceWriteLatency ) + " ms . " ) ; <nl> System . out . println ( " \ tPending Flushes : " + keyspacePendingFlushes ) ; <nl> <nl> / / print out column family statistics for this keyspace <nl> @ @ - 720 , 12 + 736 , 12 @ @ public class NodeTool <nl> System . out . println ( " ] " ) ; <nl> } <nl> } <nl> - System . out . println ( " \ t \ tSpace used ( live ) , bytes : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " LiveDiskSpaceUsed " ) ) ; <nl> - System . out . println ( " \ t \ tSpace used ( total ) , bytes : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " TotalDiskSpaceUsed " ) ) ; <nl> - System . out . println ( " \ t \ tSpace used by snapshots ( total ) , bytes : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " SnapshotsSize " ) ) ; <nl> + System . out . println ( " \ t \ tSpace used ( live ) : " + format ( ( Long ) probe . getColumnFamilyMetric ( keyspaceName , cfName , " LiveDiskSpaceUsed " ) , humanReadable ) ) ; <nl> + System . out . println ( " \ t \ tSpace used ( total ) : " + format ( ( Long ) probe . getColumnFamilyMetric ( keyspaceName , cfName , " TotalDiskSpaceUsed " ) , humanReadable ) ) ; <nl> + System . out . println ( " \ t \ tSpace used by snapshots ( total ) : " + format ( ( Long ) probe . getColumnFamilyMetric ( keyspaceName , cfName , " SnapshotsSize " ) , humanReadable ) ) ; <nl> System . out . println ( " \ t \ tSSTable Compression Ratio : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " CompressionRatio " ) ) ; <nl> System . out . println ( " \ t \ tMemtable cell count : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " MemtableColumnsCount " ) ) ; <nl> - System . out . println ( " \ t \ tMemtable data size , bytes : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " MemtableLiveDataSize " ) ) ; <nl> + System . out . println ( " \ t \ tMemtable data size : " + format ( ( Long ) probe . getColumnFamilyMetric ( keyspaceName , cfName , " MemtableLiveDataSize " ) , humanReadable ) ) ; <nl> System . out . println ( " \ t \ tMemtable switch count : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " MemtableSwitchCount " ) ) ; <nl> System . out . println ( " \ t \ tLocal read count : " + ( ( JmxReporter . TimerMBean ) probe . getColumnFamilyMetric ( keyspaceName , cfName , " ReadLatency " ) ) . getCount ( ) ) ; <nl> double localReadLatency = ( ( JmxReporter . TimerMBean ) probe . getColumnFamilyMetric ( keyspaceName , cfName , " ReadLatency " ) ) . getMean ( ) / 1000 ; <nl> @ @ - 737 , 11 + 753 , 11 @ @ public class NodeTool <nl> System . out . printf ( " \ t \ tLocal write latency : % 01 . 3f ms % n " , localWLatency ) ; <nl> System . out . println ( " \ t \ tPending flushes : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " PendingFlushes " ) ) ; <nl> System . out . println ( " \ t \ tBloom filter false positives : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " BloomFilterFalsePositives " ) ) ; <nl> - System . out . println ( " \ t \ tBloom filter false ratio : " + format ( " % 01 . 5f " , probe . getColumnFamilyMetric ( keyspaceName , cfName , " RecentBloomFilterFalseRatio " ) ) ) ; <nl> - System . out . println ( " \ t \ tBloom filter space used , bytes : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " BloomFilterDiskSpaceUsed " ) ) ; <nl> - System . out . println ( " \ t \ tCompacted partition minimum bytes : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " MinRowSize " ) ) ; <nl> - System . out . println ( " \ t \ tCompacted partition maximum bytes : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " MaxRowSize " ) ) ; <nl> - System . out . println ( " \ t \ tCompacted partition mean bytes : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " MeanRowSize " ) ) ; <nl> + System . out . printf ( " \ t \ tBloom filter false ratio : % s % n " , String . format ( " % 01 . 5f " , probe . getColumnFamilyMetric ( keyspaceName , cfName , " RecentBloomFilterFalseRatio " ) ) ) ; <nl> + System . out . println ( " \ t \ tBloom filter space used : " + format ( ( Long ) probe . getColumnFamilyMetric ( keyspaceName , cfName , " BloomFilterDiskSpaceUsed " ) , humanReadable ) ) ; <nl> + System . out . println ( " \ t \ tCompacted partition minimum bytes : " + format ( ( Long ) probe . getColumnFamilyMetric ( keyspaceName , cfName , " MinRowSize " ) , humanReadable ) ) ; <nl> + System . out . println ( " \ t \ tCompacted partition maximum bytes : " + format ( ( Long ) probe . getColumnFamilyMetric ( keyspaceName , cfName , " MaxRowSize " ) , humanReadable ) ) ; <nl> + System . out . println ( " \ t \ tCompacted partition mean bytes : " + format ( ( Long ) probe . getColumnFamilyMetric ( keyspaceName , cfName , " MeanRowSize " ) , humanReadable ) ) ; <nl> JmxReporter . HistogramMBean histogram = ( JmxReporter . HistogramMBean ) probe . getColumnFamilyMetric ( keyspaceName , cfName , " LiveScannedHistogram " ) ; <nl> System . out . println ( " \ t \ tAverage live cells per slice ( last five minutes ) : " + histogram . getMean ( ) ) ; <nl> System . out . println ( " \ t \ tMaximum live cells per slice ( last five minutes ) : " + histogram . getMax ( ) ) ; <nl> @ @ - 755 , 6 + 771 , 10 @ @ public class NodeTool <nl> } <nl> } <nl> <nl> + private String format ( long bytes , boolean humanReadable ) { <nl> + return humanReadable ? FileUtils . stringifyFileSize ( bytes ) : Long . toString ( bytes ) ; <nl> + } <nl> + <nl> / * * <nl> * Used for filtering keyspaces and columnfamilies to be displayed using the cfstats command . <nl> * / <nl> @ @ - 1127 , 6 + 1147 , 11 @ @ public class NodeTool <nl> @ Command ( name = " compactionstats " , description = " Print statistics on compactions " ) <nl> public static class CompactionStats extends NodeToolCmd <nl> { <nl> + @ Option ( title = " human _ readable " , <nl> + name = { " - H " , " - - human - readable " } , <nl> + description = " Display bytes in human readable form , i . e . KB , MB , GB , TB " ) <nl> + private boolean humanReadable = false ; <nl> + <nl> @ Override <nl> public void execute ( NodeProbe probe ) <nl> { <nl> @ @ - 1147 , 9 + 1172 , 11 @ @ public class NodeTool <nl> String taskType = c . get ( " taskType " ) ; <nl> String keyspace = c . get ( " keyspace " ) ; <nl> String columnFamily = c . get ( " columnfamily " ) ; <nl> + String completedStr = humanReadable ? FileUtils . stringifyFileSize ( completed ) : Long . toString ( completed ) ; <nl> + String totalStr = humanReadable ? FileUtils . stringifyFileSize ( total ) : Long . toString ( total ) ; <nl> String unit = c . get ( " unit " ) ; <nl> String percentComplete = total = = 0 ? " n / a " : new DecimalFormat ( " 0 . 00 " ) . format ( ( double ) completed / total * 100 ) + " % " ; <nl> - addLine ( lines , columnSizes , taskType , keyspace , columnFamily , Long . toString ( completed ) , Long . toString ( total ) , unit , percentComplete ) ; <nl> + addLine ( lines , columnSizes , taskType , keyspace , columnFamily , completedStr , totalStr , unit , percentComplete ) ; <nl> if ( taskType . equals ( OperationType . COMPACTION . toString ( ) ) ) <nl> remainingBytes + = total - completed ; <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index fd3af68 . . eab185a 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 11 , 6 + 11 , 7 @ @ <nl> * Nodetool gets default JMX port from cassandra - env . sh ( CASSANDRA - 6273 ) <nl> * make calculatePendingRanges asynchronous ( CASSANDRA - 6244 ) <nl> * Remove blocking flushes in gossip thread ( CASSANDRA - 6297 ) <nl> + * Fix potential socket leak in connectionpool creation ( CASSANDRA - 6308 ) <nl> <nl> <nl> 1 . 2 . 11 <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index a199e83 . . 7e420cf 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 259 , 7 + 259 , 7 @ @ public final class MessagingService implements MessagingServiceMBean <nl> * / <nl> private final ConcurrentMap < InetAddress , DebuggableThreadPoolExecutor > streamExecutors = new NonBlockingHashMap < InetAddress , DebuggableThreadPoolExecutor > ( ) ; <nl> <nl> - private final NonBlockingHashMap < InetAddress , OutboundTcpConnectionPool > connectionManagers = new NonBlockingHashMap < InetAddress , OutboundTcpConnectionPool > ( ) ; <nl> + private final ConcurrentMap < InetAddress , OutboundTcpConnectionPool > connectionManagers = new NonBlockingHashMap < InetAddress , OutboundTcpConnectionPool > ( ) ; <nl> <nl> private static final Logger logger = LoggerFactory . getLogger ( MessagingService . class ) ; <nl> private static final int LOG _ DROPPED _ INTERVAL _ IN _ MS = 5000 ; <nl> @ @ - 484 , 11 + 484 , 17 @ @ public final class MessagingService implements MessagingServiceMBean <nl> OutboundTcpConnectionPool cp = connectionManagers . get ( to ) ; <nl> if ( cp = = null ) <nl> { <nl> - connectionManagers . putIfAbsent ( to , new OutboundTcpConnectionPool ( to ) ) ; <nl> - cp = connectionManagers . get ( to ) ; <nl> + cp = new OutboundTcpConnectionPool ( to ) ; <nl> + OutboundTcpConnectionPool existingPool = connectionManagers . putIfAbsent ( to , cp ) ; <nl> + if ( existingPool ! = null ) <nl> + { <nl> + cp . close ( ) ; <nl> + cp = existingPool ; <nl> + } <nl> } <nl> return cp ; <nl> } <nl> + <nl> <nl> public OutboundTcpConnection getConnection ( InetAddress to , MessageOut msg ) <nl> {

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index fdf6fbe . . 7f10ca5 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 1 
 + * Add human readable option to nodetool commands ( CASSANDRA - 5433 ) 
 * Don ' t try to set repairedAt on old sstables ( CASSANDRA - 7913 ) 
 * Add metrics for tracking PreparedStatement use ( CASSANDRA - 7719 ) 
 * ( cqlsh ) tab - completion for triggers ( CASSANDRA - 7824 ) 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeTool . java b / src / java / org / apache / cassandra / tools / NodeTool . java 
 index d5a4bb3 . . cc38107 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeTool . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeTool . java 
 @ @ - 375 , 33 + 375 , 33 @ @ public class NodeTool 
 CacheServiceMBean cacheService = probe . getCacheServiceMBean ( ) ; 
 
 / / Key Cache : Hits , Requests , RecentHitRate , SavePeriodInSeconds 
 - System . out . printf ( " % - 17s : entries % d , size % d ( bytes ) , capacity % d ( bytes ) , % d hits , % d requests , % . 3f recent hit rate , % d save period in seconds % n " , 
 + System . out . printf ( " % - 17s : entries % d , size % s , capacity % s , % d hits , % d requests , % . 3f recent hit rate , % d save period in seconds % n " , 
 " Key Cache " , 
 probe . getCacheMetric ( " KeyCache " , " Entries " ) , 
 - probe . getCacheMetric ( " KeyCache " , " Size " ) , 
 - probe . getCacheMetric ( " KeyCache " , " Capacity " ) , 
 + FileUtils . stringifyFileSize ( ( long ) probe . getCacheMetric ( " KeyCache " , " Size " ) ) , 
 + FileUtils . stringifyFileSize ( ( long ) probe . getCacheMetric ( " KeyCache " , " Capacity " ) ) , 
 probe . getCacheMetric ( " KeyCache " , " Hits " ) , 
 probe . getCacheMetric ( " KeyCache " , " Requests " ) , 
 probe . getCacheMetric ( " KeyCache " , " HitRate " ) , 
 cacheService . getKeyCacheSavePeriodInSeconds ( ) ) ; 
 
 / / Row Cache : Hits , Requests , RecentHitRate , SavePeriodInSeconds 
 - System . out . printf ( " % - 17s : entries % d , size % d ( bytes ) , capacity % d ( bytes ) , % d hits , % d requests , % . 3f recent hit rate , % d save period in seconds % n " , 
 + System . out . printf ( " % - 17s : entries % d , size % s , capacity % s , % d hits , % d requests , % . 3f recent hit rate , % d save period in seconds % n " , 
 " Row Cache " , 
 probe . getCacheMetric ( " RowCache " , " Entries " ) , 
 - probe . getCacheMetric ( " RowCache " , " Size " ) , 
 - probe . getCacheMetric ( " RowCache " , " Capacity " ) , 
 + FileUtils . stringifyFileSize ( ( long ) probe . getCacheMetric ( " RowCache " , " Size " ) ) , 
 + FileUtils . stringifyFileSize ( ( long ) probe . getCacheMetric ( " RowCache " , " Capacity " ) ) , 
 probe . getCacheMetric ( " RowCache " , " Hits " ) , 
 probe . getCacheMetric ( " RowCache " , " Requests " ) , 
 probe . getCacheMetric ( " RowCache " , " HitRate " ) , 
 cacheService . getRowCacheSavePeriodInSeconds ( ) ) ; 
 
 / / Counter Cache : Hits , Requests , RecentHitRate , SavePeriodInSeconds 
 - System . out . printf ( " % - 17s : entries % d , size % d ( bytes ) , capacity % d ( bytes ) , % d hits , % d requests , % . 3f recent hit rate , % d save period in seconds % n " , 
 + System . out . printf ( " % - 17s : entries % d , size % s , capacity % s , % d hits , % d requests , % . 3f recent hit rate , % d save period in seconds % n " , 
 " Counter Cache " , 
 probe . getCacheMetric ( " CounterCache " , " Entries " ) , 
 - probe . getCacheMetric ( " CounterCache " , " Size " ) , 
 - probe . getCacheMetric ( " CounterCache " , " Capacity " ) , 
 + FileUtils . stringifyFileSize ( ( long ) probe . getCacheMetric ( " CounterCache " , " Size " ) ) , 
 + FileUtils . stringifyFileSize ( ( long ) probe . getCacheMetric ( " CounterCache " , " Capacity " ) ) , 
 probe . getCacheMetric ( " CounterCache " , " Hits " ) , 
 probe . getCacheMetric ( " CounterCache " , " Requests " ) , 
 probe . getCacheMetric ( " CounterCache " , " HitRate " ) , 
 @ @ - 544 , 6 + 544 , 11 @ @ public class NodeTool 
 @ Command ( name = " netstats " , description = " Print network information on provided host ( connecting node by default ) " ) 
 public static class NetStats extends NodeToolCmd 
 { 
 + @ Option ( title = " human _ readable " , 
 + name = { " - H " , " - - human - readable " } , 
 + description = " Display bytes in human readable form , i . e . KB , MB , GB , TB " ) 
 + private boolean humanReadable = false ; 
 + 
 @ Override 
 public void execute ( NodeProbe probe ) 
 { 
 @ @ - 559 , 7 + 564 , 10 @ @ public class NodeTool 
 System . out . printf ( " % s % n " , info . peer . toString ( ) ) ; 
 if ( ! info . receivingSummaries . isEmpty ( ) ) 
 { 
 - System . out . printf ( " Receiving % d files , % d bytes total % n " , info . getTotalFilesToReceive ( ) , info . getTotalSizeToReceive ( ) ) ; 
 + if ( humanReadable ) 
 + System . out . printf ( " Receiving % d files , % s total % n " , info . getTotalFilesToReceive ( ) , FileUtils . stringifyFileSize ( info . getTotalSizeToReceive ( ) ) ) ; 
 + else 
 + System . out . printf ( " Receiving % d files , % d bytes total % n " , info . getTotalFilesToReceive ( ) , info . getTotalSizeToReceive ( ) ) ; 
 for ( ProgressInfo progress : info . getReceivingFiles ( ) ) 
 { 
 System . out . printf ( " % s % n " , progress . toString ( ) ) ; 
 @ @ - 567 , 7 + 575 , 10 @ @ public class NodeTool 
 } 
 if ( ! info . sendingSummaries . isEmpty ( ) ) 
 { 
 - System . out . printf ( " Sending % d files , % d bytes total % n " , info . getTotalFilesToSend ( ) , info . getTotalSizeToSend ( ) ) ; 
 + if ( humanReadable ) 
 + System . out . printf ( " Sending % d files , % s total % n " , info . getTotalFilesToSend ( ) , FileUtils . stringifyFileSize ( info . getTotalSizeToSend ( ) ) ) ; 
 + else 
 + System . out . printf ( " Sending % d files , % d bytes total % n " , info . getTotalFilesToSend ( ) , info . getTotalSizeToSend ( ) ) ; 
 for ( ProgressInfo progress : info . getSendingFiles ( ) ) 
 { 
 System . out . printf ( " % s % n " , progress . toString ( ) ) ; 
 @ @ - 614 , 6 + 625 , 11 @ @ public class NodeTool 
 @ Option ( name = " - i " , description = " Ignore the list of column families and display the remaining cfs " ) 
 private boolean ignore = false ; 
 
 + @ Option ( title = " human _ readable " , 
 + name = { " - H " , " - - human - readable " } , 
 + description = " Display bytes in human readable form , i . e . KB , MB , GB , TB " ) 
 + private boolean humanReadable = false ; 
 + 
 @ Override 
 public void execute ( NodeProbe probe ) 
 { 
 @ @ - 683 , 9 + 699 , 9 @ @ public class NodeTool 
 : Double . NaN ; 
 
 System . out . println ( " \ tRead Count : " + keyspaceReadCount ) ; 
 - System . out . println ( " \ tRead Latency : " + format ( " % s " , keyspaceReadLatency ) + " ms . " ) ; 
 + System . out . println ( " \ tRead Latency : " + String . format ( " % s " , keyspaceReadLatency ) + " ms . " ) ; 
 System . out . println ( " \ tWrite Count : " + keyspaceWriteCount ) ; 
 - System . out . println ( " \ tWrite Latency : " + format ( " % s " , keyspaceWriteLatency ) + " ms . " ) ; 
 + System . out . println ( " \ tWrite Latency : " + String . format ( " % s " , keyspaceWriteLatency ) + " ms . " ) ; 
 System . out . println ( " \ tPending Flushes : " + keyspacePendingFlushes ) ; 
 
 / / print out column family statistics for this keyspace 
 @ @ - 720 , 12 + 736 , 12 @ @ public class NodeTool 
 System . out . println ( " ] " ) ; 
 } 
 } 
 - System . out . println ( " \ t \ tSpace used ( live ) , bytes : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " LiveDiskSpaceUsed " ) ) ; 
 - System . out . println ( " \ t \ tSpace used ( total ) , bytes : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " TotalDiskSpaceUsed " ) ) ; 
 - System . out . println ( " \ t \ tSpace used by snapshots ( total ) , bytes : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " SnapshotsSize " ) ) ; 
 + System . out . println ( " \ t \ tSpace used ( live ) : " + format ( ( Long ) probe . getColumnFamilyMetric ( keyspaceName , cfName , " LiveDiskSpaceUsed " ) , humanReadable ) ) ; 
 + System . out . println ( " \ t \ tSpace used ( total ) : " + format ( ( Long ) probe . getColumnFamilyMetric ( keyspaceName , cfName , " TotalDiskSpaceUsed " ) , humanReadable ) ) ; 
 + System . out . println ( " \ t \ tSpace used by snapshots ( total ) : " + format ( ( Long ) probe . getColumnFamilyMetric ( keyspaceName , cfName , " SnapshotsSize " ) , humanReadable ) ) ; 
 System . out . println ( " \ t \ tSSTable Compression Ratio : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " CompressionRatio " ) ) ; 
 System . out . println ( " \ t \ tMemtable cell count : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " MemtableColumnsCount " ) ) ; 
 - System . out . println ( " \ t \ tMemtable data size , bytes : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " MemtableLiveDataSize " ) ) ; 
 + System . out . println ( " \ t \ tMemtable data size : " + format ( ( Long ) probe . getColumnFamilyMetric ( keyspaceName , cfName , " MemtableLiveDataSize " ) , humanReadable ) ) ; 
 System . out . println ( " \ t \ tMemtable switch count : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " MemtableSwitchCount " ) ) ; 
 System . out . println ( " \ t \ tLocal read count : " + ( ( JmxReporter . TimerMBean ) probe . getColumnFamilyMetric ( keyspaceName , cfName , " ReadLatency " ) ) . getCount ( ) ) ; 
 double localReadLatency = ( ( JmxReporter . TimerMBean ) probe . getColumnFamilyMetric ( keyspaceName , cfName , " ReadLatency " ) ) . getMean ( ) / 1000 ; 
 @ @ - 737 , 11 + 753 , 11 @ @ public class NodeTool 
 System . out . printf ( " \ t \ tLocal write latency : % 01 . 3f ms % n " , localWLatency ) ; 
 System . out . println ( " \ t \ tPending flushes : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " PendingFlushes " ) ) ; 
 System . out . println ( " \ t \ tBloom filter false positives : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " BloomFilterFalsePositives " ) ) ; 
 - System . out . println ( " \ t \ tBloom filter false ratio : " + format ( " % 01 . 5f " , probe . getColumnFamilyMetric ( keyspaceName , cfName , " RecentBloomFilterFalseRatio " ) ) ) ; 
 - System . out . println ( " \ t \ tBloom filter space used , bytes : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " BloomFilterDiskSpaceUsed " ) ) ; 
 - System . out . println ( " \ t \ tCompacted partition minimum bytes : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " MinRowSize " ) ) ; 
 - System . out . println ( " \ t \ tCompacted partition maximum bytes : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " MaxRowSize " ) ) ; 
 - System . out . println ( " \ t \ tCompacted partition mean bytes : " + probe . getColumnFamilyMetric ( keyspaceName , cfName , " MeanRowSize " ) ) ; 
 + System . out . printf ( " \ t \ tBloom filter false ratio : % s % n " , String . format ( " % 01 . 5f " , probe . getColumnFamilyMetric ( keyspaceName , cfName , " RecentBloomFilterFalseRatio " ) ) ) ; 
 + System . out . println ( " \ t \ tBloom filter space used : " + format ( ( Long ) probe . getColumnFamilyMetric ( keyspaceName , cfName , " BloomFilterDiskSpaceUsed " ) , humanReadable ) ) ; 
 + System . out . println ( " \ t \ tCompacted partition minimum bytes : " + format ( ( Long ) probe . getColumnFamilyMetric ( keyspaceName , cfName , " MinRowSize " ) , humanReadable ) ) ; 
 + System . out . println ( " \ t \ tCompacted partition maximum bytes : " + format ( ( Long ) probe . getColumnFamilyMetric ( keyspaceName , cfName , " MaxRowSize " ) , humanReadable ) ) ; 
 + System . out . println ( " \ t \ tCompacted partition mean bytes : " + format ( ( Long ) probe . getColumnFamilyMetric ( keyspaceName , cfName , " MeanRowSize " ) , humanReadable ) ) ; 
 JmxReporter . HistogramMBean histogram = ( JmxReporter . HistogramMBean ) probe . getColumnFamilyMetric ( keyspaceName , cfName , " LiveScannedHistogram " ) ; 
 System . out . println ( " \ t \ tAverage live cells per slice ( last five minutes ) : " + histogram . getMean ( ) ) ; 
 System . out . println ( " \ t \ tMaximum live cells per slice ( last five minutes ) : " + histogram . getMax ( ) ) ; 
 @ @ - 755 , 6 + 771 , 10 @ @ public class NodeTool 
 } 
 } 
 
 + private String format ( long bytes , boolean humanReadable ) { 
 + return humanReadable ? FileUtils . stringifyFileSize ( bytes ) : Long . toString ( bytes ) ; 
 + } 
 + 
 / * * 
 * Used for filtering keyspaces and columnfamilies to be displayed using the cfstats command . 
 * / 
 @ @ - 1127 , 6 + 1147 , 11 @ @ public class NodeTool 
 @ Command ( name = " compactionstats " , description = " Print statistics on compactions " ) 
 public static class CompactionStats extends NodeToolCmd 
 { 
 + @ Option ( title = " human _ readable " , 
 + name = { " - H " , " - - human - readable " } , 
 + description = " Display bytes in human readable form , i . e . KB , MB , GB , TB " ) 
 + private boolean humanReadable = false ; 
 + 
 @ Override 
 public void execute ( NodeProbe probe ) 
 { 
 @ @ - 1147 , 9 + 1172 , 11 @ @ public class NodeTool 
 String taskType = c . get ( " taskType " ) ; 
 String keyspace = c . get ( " keyspace " ) ; 
 String columnFamily = c . get ( " columnfamily " ) ; 
 + String completedStr = humanReadable ? FileUtils . stringifyFileSize ( completed ) : Long . toString ( completed ) ; 
 + String totalStr = humanReadable ? FileUtils . stringifyFileSize ( total ) : Long . toString ( total ) ; 
 String unit = c . get ( " unit " ) ; 
 String percentComplete = total = = 0 ? " n / a " : new DecimalFormat ( " 0 . 00 " ) . format ( ( double ) completed / total * 100 ) + " % " ; 
 - addLine ( lines , columnSizes , taskType , keyspace , columnFamily , Long . toString ( completed ) , Long . toString ( total ) , unit , percentComplete ) ; 
 + addLine ( lines , columnSizes , taskType , keyspace , columnFamily , completedStr , totalStr , unit , percentComplete ) ; 
 if ( taskType . equals ( OperationType . COMPACTION . toString ( ) ) ) 
 remainingBytes + = total - completed ; 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index fd3af68 . . eab185a 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 11 , 6 + 11 , 7 @ @ 
 * Nodetool gets default JMX port from cassandra - env . sh ( CASSANDRA - 6273 ) 
 * make calculatePendingRanges asynchronous ( CASSANDRA - 6244 ) 
 * Remove blocking flushes in gossip thread ( CASSANDRA - 6297 ) 
 + * Fix potential socket leak in connectionpool creation ( CASSANDRA - 6308 ) 
 
 
 1 . 2 . 11 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index a199e83 . . 7e420cf 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 259 , 7 + 259 , 7 @ @ public final class MessagingService implements MessagingServiceMBean 
 * / 
 private final ConcurrentMap < InetAddress , DebuggableThreadPoolExecutor > streamExecutors = new NonBlockingHashMap < InetAddress , DebuggableThreadPoolExecutor > ( ) ; 
 
 - private final NonBlockingHashMap < InetAddress , OutboundTcpConnectionPool > connectionManagers = new NonBlockingHashMap < InetAddress , OutboundTcpConnectionPool > ( ) ; 
 + private final ConcurrentMap < InetAddress , OutboundTcpConnectionPool > connectionManagers = new NonBlockingHashMap < InetAddress , OutboundTcpConnectionPool > ( ) ; 
 
 private static final Logger logger = LoggerFactory . getLogger ( MessagingService . class ) ; 
 private static final int LOG _ DROPPED _ INTERVAL _ IN _ MS = 5000 ; 
 @ @ - 484 , 11 + 484 , 17 @ @ public final class MessagingService implements MessagingServiceMBean 
 OutboundTcpConnectionPool cp = connectionManagers . get ( to ) ; 
 if ( cp = = null ) 
 { 
 - connectionManagers . putIfAbsent ( to , new OutboundTcpConnectionPool ( to ) ) ; 
 - cp = connectionManagers . get ( to ) ; 
 + cp = new OutboundTcpConnectionPool ( to ) ; 
 + OutboundTcpConnectionPool existingPool = connectionManagers . putIfAbsent ( to , cp ) ; 
 + if ( existingPool ! = null ) 
 + { 
 + cp . close ( ) ; 
 + cp = existingPool ; 
 + } 
 } 
 return cp ; 
 } 
 + 
 
 public OutboundTcpConnection getConnection ( InetAddress to , MessageOut msg ) 
 {
