BLEU SCORE: 0.03283637368030199

TEST MSG: merge from 2 . 1 . 0
GENERATED MSG: switch to notification - based GCInspector

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e7e2304 . . c39490a 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 12 , 6 + 12 , 7 @ @ Merged from 2 . 0 : <nl> <nl> <nl> 2 . 1 . 0 - final <nl> + * Switch to notification - based GCInspector ( CASSANDRA - 7638 ) <nl> * ( cqlsh ) Handle nulls in UDTs and tuples correctly ( CASSANDRA - 7656 ) <nl> * Don ' t use strict consistency when replacing ( CASSANDRA - 7568 ) <nl> * Fix min / max cell name collection on 2 . 0 SSTables with range <nl> diff - - git a / conf / cassandra - env . sh b / conf / cassandra - env . sh <nl> index 05e88a2 . . 1a8f08d 100644 <nl> - - - a / conf / cassandra - env . sh <nl> + + + b / conf / cassandra - env . sh <nl> @ @ - 95 , 7 + 95 , 12 @ @ JVM _ VERSION = $ { jvmver % _ * } <nl> JVM _ PATCH _ VERSION = $ { jvmver # * _ } <nl> <nl> if [ " $ JVM _ VERSION " \ < " 1 . 7 " ] ; then <nl> - echo " Cassandra 2 . 0 and later require Java 7 or later . " <nl> + echo " Cassandra 2 . 0 and later require Java 7u25 or later . " <nl> + exit 1 ; <nl> + fi <nl> + <nl> + if [ " $ JVM _ VERSION " \ < " 1 . 8 " ] & & [ " $ JVM _ PATCH _ VERSION " - lt " 25 " ] ; then <nl> + echo " Cassandra 2 . 0 and later require Java 7u25 or later . " <nl> exit 1 ; <nl> fi <nl> <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index fbee7ce . . 7c85f81 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 281 , 7 + 281 , 7 @ @ public class CassandraDaemon <nl> <nl> try <nl> { <nl> - GCInspector . instance . start ( ) ; <nl> + GCInspector . register ( ) ; <nl> } <nl> catch ( Throwable t ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / service / GCInspector . java b / src / java / org / apache / cassandra / service / GCInspector . java <nl> index f03ec01 . . d04b250 100644 <nl> - - - a / src / java / org / apache / cassandra / service / GCInspector . java <nl> + + + b / src / java / org / apache / cassandra / service / GCInspector . java <nl> @ @ - 17 , 138 + 17 , 83 @ @ <nl> * / <nl> package org . apache . cassandra . service ; <nl> <nl> - import java . lang . management . GarbageCollectorMXBean ; <nl> import java . lang . management . ManagementFactory ; <nl> - import java . lang . management . MemoryMXBean ; <nl> import java . lang . management . MemoryUsage ; <nl> - import java . lang . reflect . UndeclaredThrowableException ; <nl> import java . util . ArrayList ; <nl> - import java . util . HashMap ; <nl> + import java . util . Collections ; <nl> import java . util . List ; <nl> - import java . util . concurrent . TimeUnit ; <nl> import javax . management . MBeanServer ; <nl> + import javax . management . Notification ; <nl> + import javax . management . NotificationListener ; <nl> import javax . management . ObjectName ; <nl> + import javax . management . openmbean . CompositeData ; <nl> <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import com . sun . management . GarbageCollectionNotificationInfo ; <nl> import org . apache . cassandra . io . sstable . SSTableDeletingTask ; <nl> import org . apache . cassandra . utils . StatusLogger ; <nl> <nl> - public class GCInspector <nl> + public class GCInspector implements NotificationListener <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( GCInspector . class ) ; <nl> - final static long INTERVAL _ IN _ MS = 1000 ; <nl> final static long MIN _ DURATION = 200 ; <nl> final static long MIN _ DURATION _ TPSTATS = 1000 ; <nl> <nl> - public static final GCInspector instance = new GCInspector ( ) ; <nl> - <nl> - private final HashMap < String , Long > gctimes = new HashMap < String , Long > ( ) ; <nl> - private final HashMap < String , Long > gccounts = new HashMap < String , Long > ( ) ; <nl> - <nl> - final List < GarbageCollectorMXBean > beans = new ArrayList < GarbageCollectorMXBean > ( ) ; <nl> - final MemoryMXBean membean = ManagementFactory . getMemoryMXBean ( ) ; <nl> - <nl> - public void start ( ) <nl> + public static void register ( ) throws Exception <nl> { <nl> - buildMXBeanList ( ) ; <nl> - <nl> - / / don ' t bother starting a thread that will do nothing . <nl> - if ( beans . isEmpty ( ) ) <nl> - return ; <nl> - <nl> - Runnable t = new Runnable ( ) <nl> - { <nl> - public void run ( ) <nl> - { <nl> - logGCResults ( ) ; <nl> - } <nl> - } ; <nl> - StorageService . scheduledTasks . scheduleWithFixedDelay ( t , INTERVAL _ IN _ MS , INTERVAL _ IN _ MS , TimeUnit . MILLISECONDS ) ; <nl> - } <nl> - <nl> - private void buildMXBeanList ( ) <nl> - { <nl> - beans . clear ( ) ; <nl> - <nl> + GCInspector inspector = new GCInspector ( ) ; <nl> MBeanServer server = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> - try <nl> + ObjectName gcName = new ObjectName ( ManagementFactory . GARBAGE _ COLLECTOR _ MXBEAN _ DOMAIN _ TYPE + " , * " ) ; <nl> + for ( ObjectName name : server . queryNames ( gcName , null ) ) <nl> { <nl> - ObjectName gcName = new ObjectName ( ManagementFactory . GARBAGE _ COLLECTOR _ MXBEAN _ DOMAIN _ TYPE + " , * " ) ; <nl> - for ( ObjectName name : server . queryNames ( gcName , null ) ) <nl> - { <nl> - GarbageCollectorMXBean gc = ManagementFactory . newPlatformMXBeanProxy ( server , name . getCanonicalName ( ) , GarbageCollectorMXBean . class ) ; <nl> - beans . add ( gc ) ; <nl> - } <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> + server . addNotificationListener ( name , inspector , null , null ) ; <nl> } <nl> } <nl> <nl> - private void logGCResults ( ) <nl> + public void handleNotification ( Notification notification , Object handback ) <nl> { <nl> - boolean gcChanged = false ; <nl> - try <nl> + String type = notification . getType ( ) ; <nl> + if ( type . equals ( GarbageCollectionNotificationInfo . GARBAGE _ COLLECTION _ NOTIFICATION ) ) <nl> { <nl> - for ( GarbageCollectorMXBean gc : beans ) <nl> - { <nl> - if ( ! gc . isValid ( ) ) <nl> - { <nl> - gcChanged = true ; <nl> - continue ; <nl> - } <nl> + / / retrieve the garbage collection notification information <nl> + CompositeData cd = ( CompositeData ) notification . getUserData ( ) ; <nl> + GarbageCollectionNotificationInfo info = GarbageCollectionNotificationInfo . from ( cd ) ; <nl> <nl> - Long previousTotal = gctimes . get ( gc . getName ( ) ) ; <nl> - Long total = gc . getCollectionTime ( ) ; <nl> - if ( previousTotal = = null ) <nl> - previousTotal = 0L ; <nl> - if ( previousTotal . equals ( total ) ) <nl> - continue ; <nl> - gctimes . put ( gc . getName ( ) , total ) ; <nl> - Long duration = total - previousTotal ; / / may be zero for a really fast collection <nl> + long duration = info . getGcInfo ( ) . getDuration ( ) ; <nl> <nl> - Long previousCount = gccounts . get ( gc . getName ( ) ) ; <nl> - Long count = gc . getCollectionCount ( ) ; <nl> + StringBuilder sb = new StringBuilder ( ) ; <nl> + sb . append ( info . getGcName ( ) ) . append ( " GC in " ) . append ( duration ) . append ( " ms . " ) ; <nl> <nl> - if ( previousCount = = null ) <nl> - previousCount = 0L ; <nl> - if ( count . equals ( previousCount ) ) <nl> - continue ; <nl> - <nl> - gccounts . put ( gc . getName ( ) , count ) ; <nl> - <nl> - MemoryUsage mu = membean . getHeapMemoryUsage ( ) ; <nl> - long memoryUsed = mu . getUsed ( ) ; <nl> - long memoryMax = mu . getMax ( ) ; <nl> + List < String > keys = new ArrayList < > ( info . getGcInfo ( ) . getMemoryUsageBeforeGc ( ) . keySet ( ) ) ; <nl> + Collections . sort ( keys ) ; <nl> + for ( String key : keys ) <nl> + { <nl> + MemoryUsage before = info . getGcInfo ( ) . getMemoryUsageBeforeGc ( ) . get ( key ) ; <nl> + MemoryUsage after = info . getGcInfo ( ) . getMemoryUsageAfterGc ( ) . get ( key ) ; <nl> + if ( after ! = null & & after . getUsed ( ) ! = before . getUsed ( ) ) <nl> + { <nl> + sb . append ( key ) . append ( " : " ) . append ( before . getUsed ( ) ) ; <nl> + sb . append ( " - > " ) ; <nl> + sb . append ( after . getUsed ( ) ) ; <nl> + if ( ! key . equals ( keys . get ( keys . size ( ) - 1 ) ) ) <nl> + sb . append ( " ; " ) ; <nl> + } <nl> + } <nl> <nl> - String st = String . format ( " GC for % s : % s ms for % s collections , % s used ; max is % s " , <nl> - gc . getName ( ) , duration , count - previousCount , memoryUsed , memoryMax ) ; <nl> - long durationPerCollection = duration / ( count - previousCount ) ; <nl> - if ( durationPerCollection > MIN _ DURATION ) <nl> - logger . info ( st ) ; <nl> - else if ( logger . isDebugEnabled ( ) ) <nl> - logger . debug ( st ) ; <nl> + String st = sb . toString ( ) ; <nl> + if ( duration > MIN _ DURATION ) <nl> + logger . info ( st ) ; <nl> + else if ( logger . isDebugEnabled ( ) ) <nl> + logger . debug ( st ) ; <nl> <nl> - if ( durationPerCollection > MIN _ DURATION _ TPSTATS ) <nl> - StatusLogger . log ( ) ; <nl> + if ( duration > MIN _ DURATION _ TPSTATS ) <nl> + StatusLogger . log ( ) ; <nl> <nl> - / / if we just finished a full collection and we ' re still using a lot of memory , try to reduce the pressure <nl> - if ( gc . getName ( ) . equals ( " ConcurrentMarkSweep " ) ) <nl> - SSTableDeletingTask . rescheduleFailedTasks ( ) ; <nl> - } <nl> + / / if we just finished a full collection and we ' re still using a lot of memory , try to reduce the pressure <nl> + if ( info . getGcName ( ) . equals ( " ConcurrentMarkSweep " ) ) <nl> + SSTableDeletingTask . rescheduleFailedTasks ( ) ; <nl> } <nl> - catch ( UndeclaredThrowableException e ) <nl> - { <nl> - / / valid - ness may have changed out from under us , even though we check for it explicitly . <nl> - / / if so , gc . getName ( ) will throw UTE when reflection runs into InstanceNotFoundException . <nl> - / / See CASSANDRA - 5345 <nl> - gcChanged = true ; <nl> - } <nl> - <nl> - if ( gcChanged ) <nl> - buildMXBeanList ( ) ; <nl> } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e7e2304 . . c39490a 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 12 , 6 + 12 , 7 @ @ Merged from 2 . 0 : 
 
 
 2 . 1 . 0 - final 
 + * Switch to notification - based GCInspector ( CASSANDRA - 7638 ) 
 * ( cqlsh ) Handle nulls in UDTs and tuples correctly ( CASSANDRA - 7656 ) 
 * Don ' t use strict consistency when replacing ( CASSANDRA - 7568 ) 
 * Fix min / max cell name collection on 2 . 0 SSTables with range 
 diff - - git a / conf / cassandra - env . sh b / conf / cassandra - env . sh 
 index 05e88a2 . . 1a8f08d 100644 
 - - - a / conf / cassandra - env . sh 
 + + + b / conf / cassandra - env . sh 
 @ @ - 95 , 7 + 95 , 12 @ @ JVM _ VERSION = $ { jvmver % _ * } 
 JVM _ PATCH _ VERSION = $ { jvmver # * _ } 
 
 if [ " $ JVM _ VERSION " \ < " 1 . 7 " ] ; then 
 - echo " Cassandra 2 . 0 and later require Java 7 or later . " 
 + echo " Cassandra 2 . 0 and later require Java 7u25 or later . " 
 + exit 1 ; 
 + fi 
 + 
 + if [ " $ JVM _ VERSION " \ < " 1 . 8 " ] & & [ " $ JVM _ PATCH _ VERSION " - lt " 25 " ] ; then 
 + echo " Cassandra 2 . 0 and later require Java 7u25 or later . " 
 exit 1 ; 
 fi 
 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index fbee7ce . . 7c85f81 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 281 , 7 + 281 , 7 @ @ public class CassandraDaemon 
 
 try 
 { 
 - GCInspector . instance . start ( ) ; 
 + GCInspector . register ( ) ; 
 } 
 catch ( Throwable t ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / service / GCInspector . java b / src / java / org / apache / cassandra / service / GCInspector . java 
 index f03ec01 . . d04b250 100644 
 - - - a / src / java / org / apache / cassandra / service / GCInspector . java 
 + + + b / src / java / org / apache / cassandra / service / GCInspector . java 
 @ @ - 17 , 138 + 17 , 83 @ @ 
 * / 
 package org . apache . cassandra . service ; 
 
 - import java . lang . management . GarbageCollectorMXBean ; 
 import java . lang . management . ManagementFactory ; 
 - import java . lang . management . MemoryMXBean ; 
 import java . lang . management . MemoryUsage ; 
 - import java . lang . reflect . UndeclaredThrowableException ; 
 import java . util . ArrayList ; 
 - import java . util . HashMap ; 
 + import java . util . Collections ; 
 import java . util . List ; 
 - import java . util . concurrent . TimeUnit ; 
 import javax . management . MBeanServer ; 
 + import javax . management . Notification ; 
 + import javax . management . NotificationListener ; 
 import javax . management . ObjectName ; 
 + import javax . management . openmbean . CompositeData ; 
 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import com . sun . management . GarbageCollectionNotificationInfo ; 
 import org . apache . cassandra . io . sstable . SSTableDeletingTask ; 
 import org . apache . cassandra . utils . StatusLogger ; 
 
 - public class GCInspector 
 + public class GCInspector implements NotificationListener 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( GCInspector . class ) ; 
 - final static long INTERVAL _ IN _ MS = 1000 ; 
 final static long MIN _ DURATION = 200 ; 
 final static long MIN _ DURATION _ TPSTATS = 1000 ; 
 
 - public static final GCInspector instance = new GCInspector ( ) ; 
 - 
 - private final HashMap < String , Long > gctimes = new HashMap < String , Long > ( ) ; 
 - private final HashMap < String , Long > gccounts = new HashMap < String , Long > ( ) ; 
 - 
 - final List < GarbageCollectorMXBean > beans = new ArrayList < GarbageCollectorMXBean > ( ) ; 
 - final MemoryMXBean membean = ManagementFactory . getMemoryMXBean ( ) ; 
 - 
 - public void start ( ) 
 + public static void register ( ) throws Exception 
 { 
 - buildMXBeanList ( ) ; 
 - 
 - / / don ' t bother starting a thread that will do nothing . 
 - if ( beans . isEmpty ( ) ) 
 - return ; 
 - 
 - Runnable t = new Runnable ( ) 
 - { 
 - public void run ( ) 
 - { 
 - logGCResults ( ) ; 
 - } 
 - } ; 
 - StorageService . scheduledTasks . scheduleWithFixedDelay ( t , INTERVAL _ IN _ MS , INTERVAL _ IN _ MS , TimeUnit . MILLISECONDS ) ; 
 - } 
 - 
 - private void buildMXBeanList ( ) 
 - { 
 - beans . clear ( ) ; 
 - 
 + GCInspector inspector = new GCInspector ( ) ; 
 MBeanServer server = ManagementFactory . getPlatformMBeanServer ( ) ; 
 - try 
 + ObjectName gcName = new ObjectName ( ManagementFactory . GARBAGE _ COLLECTOR _ MXBEAN _ DOMAIN _ TYPE + " , * " ) ; 
 + for ( ObjectName name : server . queryNames ( gcName , null ) ) 
 { 
 - ObjectName gcName = new ObjectName ( ManagementFactory . GARBAGE _ COLLECTOR _ MXBEAN _ DOMAIN _ TYPE + " , * " ) ; 
 - for ( ObjectName name : server . queryNames ( gcName , null ) ) 
 - { 
 - GarbageCollectorMXBean gc = ManagementFactory . newPlatformMXBeanProxy ( server , name . getCanonicalName ( ) , GarbageCollectorMXBean . class ) ; 
 - beans . add ( gc ) ; 
 - } 
 - } 
 - catch ( Exception e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 + server . addNotificationListener ( name , inspector , null , null ) ; 
 } 
 } 
 
 - private void logGCResults ( ) 
 + public void handleNotification ( Notification notification , Object handback ) 
 { 
 - boolean gcChanged = false ; 
 - try 
 + String type = notification . getType ( ) ; 
 + if ( type . equals ( GarbageCollectionNotificationInfo . GARBAGE _ COLLECTION _ NOTIFICATION ) ) 
 { 
 - for ( GarbageCollectorMXBean gc : beans ) 
 - { 
 - if ( ! gc . isValid ( ) ) 
 - { 
 - gcChanged = true ; 
 - continue ; 
 - } 
 + / / retrieve the garbage collection notification information 
 + CompositeData cd = ( CompositeData ) notification . getUserData ( ) ; 
 + GarbageCollectionNotificationInfo info = GarbageCollectionNotificationInfo . from ( cd ) ; 
 
 - Long previousTotal = gctimes . get ( gc . getName ( ) ) ; 
 - Long total = gc . getCollectionTime ( ) ; 
 - if ( previousTotal = = null ) 
 - previousTotal = 0L ; 
 - if ( previousTotal . equals ( total ) ) 
 - continue ; 
 - gctimes . put ( gc . getName ( ) , total ) ; 
 - Long duration = total - previousTotal ; / / may be zero for a really fast collection 
 + long duration = info . getGcInfo ( ) . getDuration ( ) ; 
 
 - Long previousCount = gccounts . get ( gc . getName ( ) ) ; 
 - Long count = gc . getCollectionCount ( ) ; 
 + StringBuilder sb = new StringBuilder ( ) ; 
 + sb . append ( info . getGcName ( ) ) . append ( " GC in " ) . append ( duration ) . append ( " ms . " ) ; 
 
 - if ( previousCount = = null ) 
 - previousCount = 0L ; 
 - if ( count . equals ( previousCount ) ) 
 - continue ; 
 - 
 - gccounts . put ( gc . getName ( ) , count ) ; 
 - 
 - MemoryUsage mu = membean . getHeapMemoryUsage ( ) ; 
 - long memoryUsed = mu . getUsed ( ) ; 
 - long memoryMax = mu . getMax ( ) ; 
 + List < String > keys = new ArrayList < > ( info . getGcInfo ( ) . getMemoryUsageBeforeGc ( ) . keySet ( ) ) ; 
 + Collections . sort ( keys ) ; 
 + for ( String key : keys ) 
 + { 
 + MemoryUsage before = info . getGcInfo ( ) . getMemoryUsageBeforeGc ( ) . get ( key ) ; 
 + MemoryUsage after = info . getGcInfo ( ) . getMemoryUsageAfterGc ( ) . get ( key ) ; 
 + if ( after ! = null & & after . getUsed ( ) ! = before . getUsed ( ) ) 
 + { 
 + sb . append ( key ) . append ( " : " ) . append ( before . getUsed ( ) ) ; 
 + sb . append ( " - > " ) ; 
 + sb . append ( after . getUsed ( ) ) ; 
 + if ( ! key . equals ( keys . get ( keys . size ( ) - 1 ) ) ) 
 + sb . append ( " ; " ) ; 
 + } 
 + } 
 
 - String st = String . format ( " GC for % s : % s ms for % s collections , % s used ; max is % s " , 
 - gc . getName ( ) , duration , count - previousCount , memoryUsed , memoryMax ) ; 
 - long durationPerCollection = duration / ( count - previousCount ) ; 
 - if ( durationPerCollection > MIN _ DURATION ) 
 - logger . info ( st ) ; 
 - else if ( logger . isDebugEnabled ( ) ) 
 - logger . debug ( st ) ; 
 + String st = sb . toString ( ) ; 
 + if ( duration > MIN _ DURATION ) 
 + logger . info ( st ) ; 
 + else if ( logger . isDebugEnabled ( ) ) 
 + logger . debug ( st ) ; 
 
 - if ( durationPerCollection > MIN _ DURATION _ TPSTATS ) 
 - StatusLogger . log ( ) ; 
 + if ( duration > MIN _ DURATION _ TPSTATS ) 
 + StatusLogger . log ( ) ; 
 
 - / / if we just finished a full collection and we ' re still using a lot of memory , try to reduce the pressure 
 - if ( gc . getName ( ) . equals ( " ConcurrentMarkSweep " ) ) 
 - SSTableDeletingTask . rescheduleFailedTasks ( ) ; 
 - } 
 + / / if we just finished a full collection and we ' re still using a lot of memory , try to reduce the pressure 
 + if ( info . getGcName ( ) . equals ( " ConcurrentMarkSweep " ) ) 
 + SSTableDeletingTask . rescheduleFailedTasks ( ) ; 
 } 
 - catch ( UndeclaredThrowableException e ) 
 - { 
 - / / valid - ness may have changed out from under us , even though we check for it explicitly . 
 - / / if so , gc . getName ( ) will throw UTE when reflection runs into InstanceNotFoundException . 
 - / / See CASSANDRA - 5345 
 - gcChanged = true ; 
 - } 
 - 
 - if ( gcChanged ) 
 - buildMXBeanList ( ) ; 
 } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
