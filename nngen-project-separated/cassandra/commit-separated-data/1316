BLEU SCORE: 0.035802380724744266

TEST MSG: Remove unnecessary check in Frame
GENERATED MSG: Fix error response to unsupported protocol version

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / transport / Frame . java b / src / java / org / apache / cassandra / transport / Frame . java <nl> index f5c3834 . . 021143e 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Frame . java <nl> + + + b / src / java / org / apache / cassandra / transport / Frame . java <nl> @ @ - 219 , 12 + 219 , 6 @ @ public class Frame <nl> long bodyLength = buffer . getUnsignedInt ( idx ) ; <nl> idx + = Header . BODY _ LENGTH _ SIZE ; <nl> <nl> - if ( bodyLength < 0 ) <nl> - { <nl> - buffer . skipBytes ( headerLength ) ; <nl> - throw ErrorMessage . wrap ( new ProtocolException ( " Invalid frame body length : " + bodyLength ) , streamId ) ; <nl> - } <nl> - <nl> long frameLength = bodyLength + headerLength ; <nl> if ( frameLength > MAX _ FRAME _ LENGTH ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / transport / ProtocolErrorTest . java b / test / unit / org / apache / cassandra / transport / ProtocolErrorTest . java <nl> index 9910167 . . 80d2b17 100644 <nl> - - - a / test / unit / org / apache / cassandra / transport / ProtocolErrorTest . java <nl> + + + b / test / unit / org / apache / cassandra / transport / ProtocolErrorTest . java <nl> @ @ - 26 , 6 + 26 , 8 @ @ import org . junit . Test ; <nl> import java . util . ArrayList ; <nl> import java . util . List ; <nl> <nl> + import static org . apache . cassandra . transport . Message . Direction . * ; <nl> + <nl> public class ProtocolErrorTest { <nl> <nl> @ Test <nl> @ @ - 36 , 7 + 38 , 7 @ @ public class ProtocolErrorTest { <nl> List < Object > results = new ArrayList < > ( ) ; <nl> / / should generate a protocol exception for using a protocol version higher than the current version <nl> byte [ ] frame = new byte [ ] { <nl> - ( byte ) ( ( Server . CURRENT _ VERSION + 1 ) & Frame . PROTOCOL _ VERSION _ MASK ) , / / direction & version <nl> + ( byte ) RESPONSE . addToVersion ( Server . CURRENT _ VERSION + 1 ) , / / direction & version <nl> 0x00 , / / flags <nl> 0x01 , / / stream ID <nl> 0x09 , / / opcode <nl> @ @ - 52 , 6 + 54 , 7 @ @ public class ProtocolErrorTest { <nl> dec . decode ( null , buf , results ) ; <nl> Assert . fail ( " Expected protocol error " ) ; <nl> } catch ( ProtocolException e ) { <nl> + Assert . assertTrue ( e . getMessage ( ) . contains ( " Invalid or unsupported protocol version " ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 64 , 7 + 67 , 7 @ @ public class ProtocolErrorTest { <nl> / / should generate a protocol exception for using a response frame with <nl> / / a prepare op , ensure that it comes back with stream ID 1 <nl> byte [ ] frame = new byte [ ] { <nl> - ( byte ) 0x82 , / / direction & version <nl> + ( byte ) RESPONSE . addToVersion ( 2 ) , / / direction & version <nl> 0x00 , / / flags <nl> 0x01 , / / stream ID <nl> 0x09 , / / opcode <nl> @ @ - 82 , 29 + 85 , 7 @ @ public class ProtocolErrorTest { <nl> } catch ( ErrorMessage . WrappedException e ) { <nl> / / make sure the exception has the correct stream ID <nl> Assert . assertEquals ( 1 , e . getStreamId ( ) ) ; <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> - public void testNegativeBodyLength ( ) throws Exception <nl> - { <nl> - Frame . Decoder dec = new Frame . Decoder ( null ) ; <nl> - <nl> - List < Object > results = new ArrayList < > ( ) ; <nl> - byte [ ] frame = new byte [ ] { <nl> - ( byte ) 0x82 , / / direction & version <nl> - 0x00 , / / flags <nl> - 0x01 , / / stream ID <nl> - 0x09 , / / opcode <nl> - ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , / / body length ( - 1 ) <nl> - } ; <nl> - ByteBuf buf = Unpooled . wrappedBuffer ( frame ) ; <nl> - try { <nl> - dec . decode ( null , buf , results ) ; <nl> - Assert . fail ( " Expected protocol error " ) ; <nl> - } catch ( ErrorMessage . WrappedException e ) { <nl> - / / make sure the exception has the correct stream ID <nl> - Assert . assertEquals ( 1 , e . getStreamId ( ) ) ; <nl> + Assert . assertTrue ( e . getMessage ( ) . contains ( " Wrong protocol direction " ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 115 , 19 + 96 , 21 @ @ public class ProtocolErrorTest { <nl> <nl> List < Object > results = new ArrayList < > ( ) ; <nl> byte [ ] frame = new byte [ ] { <nl> - ( byte ) 0x82 , / / direction & version <nl> + ( byte ) ( byte ) REQUEST . addToVersion ( 2 ) , / / direction & version <nl> 0x00 , / / flags <nl> 0x01 , / / stream ID <nl> 0x09 , / / opcode <nl> - 0x7f , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , / / body length <nl> + 0x10 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , / / body length <nl> } ; <nl> - ByteBuf buf = Unpooled . wrappedBuffer ( frame ) ; <nl> + byte [ ] body = new byte [ 0x10000000 ] ; <nl> + ByteBuf buf = Unpooled . wrappedBuffer ( frame , body ) ; <nl> try { <nl> dec . decode ( null , buf , results ) ; <nl> Assert . fail ( " Expected protocol error " ) ; <nl> } catch ( ErrorMessage . WrappedException e ) { <nl> / / make sure the exception has the correct stream ID <nl> Assert . assertEquals ( 1 , e . getStreamId ( ) ) ; <nl> + Assert . assertTrue ( e . getMessage ( ) . contains ( " Request is too big " ) ) ; <nl> } <nl> } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / transport / Frame . java b / src / java / org / apache / cassandra / transport / Frame . java 
 index f5c3834 . . 021143e 100644 
 - - - a / src / java / org / apache / cassandra / transport / Frame . java 
 + + + b / src / java / org / apache / cassandra / transport / Frame . java 
 @ @ - 219 , 12 + 219 , 6 @ @ public class Frame 
 long bodyLength = buffer . getUnsignedInt ( idx ) ; 
 idx + = Header . BODY _ LENGTH _ SIZE ; 
 
 - if ( bodyLength < 0 ) 
 - { 
 - buffer . skipBytes ( headerLength ) ; 
 - throw ErrorMessage . wrap ( new ProtocolException ( " Invalid frame body length : " + bodyLength ) , streamId ) ; 
 - } 
 - 
 long frameLength = bodyLength + headerLength ; 
 if ( frameLength > MAX _ FRAME _ LENGTH ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / transport / ProtocolErrorTest . java b / test / unit / org / apache / cassandra / transport / ProtocolErrorTest . java 
 index 9910167 . . 80d2b17 100644 
 - - - a / test / unit / org / apache / cassandra / transport / ProtocolErrorTest . java 
 + + + b / test / unit / org / apache / cassandra / transport / ProtocolErrorTest . java 
 @ @ - 26 , 6 + 26 , 8 @ @ import org . junit . Test ; 
 import java . util . ArrayList ; 
 import java . util . List ; 
 
 + import static org . apache . cassandra . transport . Message . Direction . * ; 
 + 
 public class ProtocolErrorTest { 
 
 @ Test 
 @ @ - 36 , 7 + 38 , 7 @ @ public class ProtocolErrorTest { 
 List < Object > results = new ArrayList < > ( ) ; 
 / / should generate a protocol exception for using a protocol version higher than the current version 
 byte [ ] frame = new byte [ ] { 
 - ( byte ) ( ( Server . CURRENT _ VERSION + 1 ) & Frame . PROTOCOL _ VERSION _ MASK ) , / / direction & version 
 + ( byte ) RESPONSE . addToVersion ( Server . CURRENT _ VERSION + 1 ) , / / direction & version 
 0x00 , / / flags 
 0x01 , / / stream ID 
 0x09 , / / opcode 
 @ @ - 52 , 6 + 54 , 7 @ @ public class ProtocolErrorTest { 
 dec . decode ( null , buf , results ) ; 
 Assert . fail ( " Expected protocol error " ) ; 
 } catch ( ProtocolException e ) { 
 + Assert . assertTrue ( e . getMessage ( ) . contains ( " Invalid or unsupported protocol version " ) ) ; 
 } 
 } 
 
 @ @ - 64 , 7 + 67 , 7 @ @ public class ProtocolErrorTest { 
 / / should generate a protocol exception for using a response frame with 
 / / a prepare op , ensure that it comes back with stream ID 1 
 byte [ ] frame = new byte [ ] { 
 - ( byte ) 0x82 , / / direction & version 
 + ( byte ) RESPONSE . addToVersion ( 2 ) , / / direction & version 
 0x00 , / / flags 
 0x01 , / / stream ID 
 0x09 , / / opcode 
 @ @ - 82 , 29 + 85 , 7 @ @ public class ProtocolErrorTest { 
 } catch ( ErrorMessage . WrappedException e ) { 
 / / make sure the exception has the correct stream ID 
 Assert . assertEquals ( 1 , e . getStreamId ( ) ) ; 
 - } 
 - } 
 - 
 - @ Test 
 - public void testNegativeBodyLength ( ) throws Exception 
 - { 
 - Frame . Decoder dec = new Frame . Decoder ( null ) ; 
 - 
 - List < Object > results = new ArrayList < > ( ) ; 
 - byte [ ] frame = new byte [ ] { 
 - ( byte ) 0x82 , / / direction & version 
 - 0x00 , / / flags 
 - 0x01 , / / stream ID 
 - 0x09 , / / opcode 
 - ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , / / body length ( - 1 ) 
 - } ; 
 - ByteBuf buf = Unpooled . wrappedBuffer ( frame ) ; 
 - try { 
 - dec . decode ( null , buf , results ) ; 
 - Assert . fail ( " Expected protocol error " ) ; 
 - } catch ( ErrorMessage . WrappedException e ) { 
 - / / make sure the exception has the correct stream ID 
 - Assert . assertEquals ( 1 , e . getStreamId ( ) ) ; 
 + Assert . assertTrue ( e . getMessage ( ) . contains ( " Wrong protocol direction " ) ) ; 
 } 
 } 
 
 @ @ - 115 , 19 + 96 , 21 @ @ public class ProtocolErrorTest { 
 
 List < Object > results = new ArrayList < > ( ) ; 
 byte [ ] frame = new byte [ ] { 
 - ( byte ) 0x82 , / / direction & version 
 + ( byte ) ( byte ) REQUEST . addToVersion ( 2 ) , / / direction & version 
 0x00 , / / flags 
 0x01 , / / stream ID 
 0x09 , / / opcode 
 - 0x7f , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , / / body length 
 + 0x10 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , / / body length 
 } ; 
 - ByteBuf buf = Unpooled . wrappedBuffer ( frame ) ; 
 + byte [ ] body = new byte [ 0x10000000 ] ; 
 + ByteBuf buf = Unpooled . wrappedBuffer ( frame , body ) ; 
 try { 
 dec . decode ( null , buf , results ) ; 
 Assert . fail ( " Expected protocol error " ) ; 
 } catch ( ErrorMessage . WrappedException e ) { 
 / / make sure the exception has the correct stream ID 
 Assert . assertEquals ( 1 , e . getStreamId ( ) ) ; 
 + Assert . assertTrue ( e . getMessage ( ) . contains ( " Request is too big " ) ) ; 
 } 
 } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
