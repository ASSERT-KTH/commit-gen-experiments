BLEU SCORE: 0.008887839864973848

TEST MSG: Post - fix TimeoutExceptions during unit tests
GENERATED MSG: make CommitLog a true singleton instead of only " a singleton , except during log replay " . patch by jbellis

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java <nl> index 3f7e793 . . e184640 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java <nl> @ @ - 93 , 11 + 93 , 16 @ @ public class CommitLogSegmentManager <nl> * / <nl> private volatile boolean createReserveSegments = false ; <nl> <nl> - private final Thread managerThread ; <nl> + private Thread managerThread ; <nl> private volatile boolean run = true ; <nl> <nl> public CommitLogSegmentManager ( ) <nl> { <nl> + start ( ) ; <nl> + } <nl> + <nl> + private void start ( ) <nl> + { <nl> / / The run loop for the manager thread <nl> Runnable runnable = new WrappedRunnable ( ) <nl> { <nl> @ @ - 169 , 6 + 174 , 8 @ @ public class CommitLogSegmentManager <nl> } <nl> } ; <nl> <nl> + run = true ; <nl> + <nl> managerThread = new Thread ( runnable , " COMMIT - LOG - ALLOCATOR " ) ; <nl> managerThread . start ( ) ; <nl> } <nl> @ @ - 453 , 9 + 460 , 10 @ @ public class CommitLogSegmentManager <nl> <nl> private long unusedCapacity ( ) <nl> { <nl> + long total = DatabaseDescriptor . getTotalCommitlogSpaceInMB ( ) * 1024 * 1024 ; <nl> long currentSize = size . get ( ) ; <nl> - logger . debug ( " Total active commitlog segment space used is { } " , currentSize ) ; <nl> - return DatabaseDescriptor . getTotalCommitlogSpaceInMB ( ) * 1024 * 1024 - currentSize ; <nl> + logger . debug ( " Total active commitlog segment space used is { } out of { } " , currentSize , total ) ; <nl> + return total - currentSize ; <nl> } <nl> <nl> / * * <nl> @ @ - 518 , 6 + 526 , 16 @ @ public class CommitLogSegmentManager <nl> while ( ! segmentManagementTasks . isEmpty ( ) ) <nl> Thread . yield ( ) ; <nl> <nl> + shutdown ( ) ; <nl> + try <nl> + { <nl> + awaitTermination ( ) ; <nl> + } <nl> + catch ( InterruptedException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + <nl> for ( CommitLogSegment segment : activeSegments ) <nl> segment . close ( ) ; <nl> activeSegments . clear ( ) ; <nl> @ @ - 527 , 6 + 545 , 14 @ @ public class CommitLogSegmentManager <nl> availableSegments . clear ( ) ; <nl> <nl> allocatingFrom = null ; <nl> + <nl> + size . set ( 0L ) ; <nl> + <nl> + logger . debug ( " Done with closing and clearing existing commit log segments . " ) ; <nl> + <nl> + start ( ) ; <nl> + <nl> + wakeManager ( ) ; <nl> } <nl> <nl> / * *
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / CommitLog . java b / src / java / org / apache / cassandra / db / CommitLog . java <nl> index fb9c982 . . 09725b2 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CommitLog . java <nl> + + + b / src / java / org / apache / cassandra / db / CommitLog . java <nl> @ @ - 73 , 12 + 73 , 9 @ @ public class CommitLog <nl> { <nl> private static volatile int SEGMENT _ SIZE = 128 * 1024 * 1024 ; / / roll after log gets this big <nl> private static volatile CommitLog instance _ ; <nl> - private static Lock lock _ = new ReentrantLock ( ) ; <nl> - private static Logger logger _ = Logger . getLogger ( CommitLog . class ) ; <nl> - private static Map < String , CommitLogHeader > clHeaders _ = new HashMap < String , CommitLogHeader > ( ) ; <nl> - <nl> - private ExecutorService executor ; <nl> - <nl> + private static final Lock lock _ = new ReentrantLock ( ) ; <nl> + private static final Logger logger _ = Logger . getLogger ( CommitLog . class ) ; <nl> + private static final Map < String , CommitLogHeader > clHeaders _ = new HashMap < String , CommitLogHeader > ( ) ; <nl> <nl> public static final class CommitLogContext <nl> { <nl> @ @ - 147 , 7 + 144 , 7 @ @ public class CommitLog <nl> <nl> if ( instance _ = = null ) <nl> { <nl> - instance _ = new CommitLog ( false ) ; <nl> + instance _ = new CommitLog ( ) ; <nl> } <nl> } <nl> finally <nl> @ @ - 163 , 6 + 160 , 7 @ @ public class CommitLog <nl> / * header for current commit log * / <nl> private CommitLogHeader clHeader _ ; <nl> private BufferedRandomAccessFile logWriter _ ; <nl> + private final ExecutorService executor = new CommitLogExecutorService ( ) ; <nl> <nl> / * <nl> * Generates a file name of the format CommitLog - < table > - < timestamp > . log in the <nl> @ @ - 180 , 51 + 178 , 47 @ @ public class CommitLog <nl> * param @ recoverymode - is commit log being instantiated in <nl> * in recovery mode . <nl> * / <nl> - CommitLog ( boolean recoveryMode ) throws IOException <nl> + private CommitLog ( ) throws IOException <nl> { <nl> - if ( ! recoveryMode ) <nl> + setNextFileName ( ) ; <nl> + logWriter _ = CommitLog . createWriter ( logFile _ ) ; <nl> + writeCommitLogHeader ( ) ; <nl> + <nl> + if ( DatabaseDescriptor . getCommitLogSync ( ) = = DatabaseDescriptor . CommitLogSync . periodic ) <nl> { <nl> - executor = new CommitLogExecutorService ( ) ; <nl> - setNextFileName ( ) ; <nl> - logWriter _ = CommitLog . createWriter ( logFile _ ) ; <nl> - writeCommitLogHeader ( ) ; <nl> + final Runnable syncer = new Runnable ( ) <nl> + { <nl> + public void run ( ) <nl> + { <nl> + try <nl> + { <nl> + sync ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + } ; <nl> <nl> - if ( DatabaseDescriptor . getCommitLogSync ( ) = = DatabaseDescriptor . CommitLogSync . periodic ) <nl> + new Thread ( new Runnable ( ) <nl> { <nl> - final Runnable syncer = new Runnable ( ) <nl> + public void run ( ) <nl> { <nl> - public void run ( ) <nl> + while ( true ) <nl> { <nl> + executor . submit ( syncer ) ; <nl> try <nl> { <nl> - sync ( ) ; <nl> + Thread . sleep ( DatabaseDescriptor . getCommitLogSyncPeriod ( ) ) ; <nl> } <nl> - catch ( IOException e ) <nl> + catch ( InterruptedException e ) <nl> { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> } <nl> - } ; <nl> - <nl> - new Thread ( new Runnable ( ) <nl> - { <nl> - public void run ( ) <nl> - { <nl> - while ( true ) <nl> - { <nl> - executor . submit ( syncer ) ; <nl> - try <nl> - { <nl> - Thread . sleep ( DatabaseDescriptor . getCommitLogSyncPeriod ( ) ) ; <nl> - } <nl> - catch ( InterruptedException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - } <nl> - } <nl> - } , " PERIODIC - COMMIT - LOG - SYNCER " ) . start ( ) ; <nl> - } <nl> + } <nl> + } , " PERIODIC - COMMIT - LOG - SYNCER " ) . start ( ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / RecoveryManager . java b / src / java / org / apache / cassandra / db / RecoveryManager . java <nl> index 63aed7c . . 02b5337 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RecoveryManager . java <nl> + + + b / src / java / org / apache / cassandra / db / RecoveryManager . java <nl> @ @ - 62 , 7 + 62 , 7 @ @ public class RecoveryManager <nl> <nl> Arrays . sort ( files , new FileUtils . FileComparator ( ) ) ; <nl> logger _ . info ( " Replaying " + StringUtils . join ( files , " , " ) ) ; <nl> - new CommitLog ( true ) . recover ( files ) ; <nl> + CommitLog . open ( ) . recover ( files ) ; <nl> FileUtils . delete ( files ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java 
 index 3f7e793 . . e184640 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java 
 @ @ - 93 , 11 + 93 , 16 @ @ public class CommitLogSegmentManager 
 * / 
 private volatile boolean createReserveSegments = false ; 
 
 - private final Thread managerThread ; 
 + private Thread managerThread ; 
 private volatile boolean run = true ; 
 
 public CommitLogSegmentManager ( ) 
 { 
 + start ( ) ; 
 + } 
 + 
 + private void start ( ) 
 + { 
 / / The run loop for the manager thread 
 Runnable runnable = new WrappedRunnable ( ) 
 { 
 @ @ - 169 , 6 + 174 , 8 @ @ public class CommitLogSegmentManager 
 } 
 } ; 
 
 + run = true ; 
 + 
 managerThread = new Thread ( runnable , " COMMIT - LOG - ALLOCATOR " ) ; 
 managerThread . start ( ) ; 
 } 
 @ @ - 453 , 9 + 460 , 10 @ @ public class CommitLogSegmentManager 
 
 private long unusedCapacity ( ) 
 { 
 + long total = DatabaseDescriptor . getTotalCommitlogSpaceInMB ( ) * 1024 * 1024 ; 
 long currentSize = size . get ( ) ; 
 - logger . debug ( " Total active commitlog segment space used is { } " , currentSize ) ; 
 - return DatabaseDescriptor . getTotalCommitlogSpaceInMB ( ) * 1024 * 1024 - currentSize ; 
 + logger . debug ( " Total active commitlog segment space used is { } out of { } " , currentSize , total ) ; 
 + return total - currentSize ; 
 } 
 
 / * * 
 @ @ - 518 , 6 + 526 , 16 @ @ public class CommitLogSegmentManager 
 while ( ! segmentManagementTasks . isEmpty ( ) ) 
 Thread . yield ( ) ; 
 
 + shutdown ( ) ; 
 + try 
 + { 
 + awaitTermination ( ) ; 
 + } 
 + catch ( InterruptedException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + 
 for ( CommitLogSegment segment : activeSegments ) 
 segment . close ( ) ; 
 activeSegments . clear ( ) ; 
 @ @ - 527 , 6 + 545 , 14 @ @ public class CommitLogSegmentManager 
 availableSegments . clear ( ) ; 
 
 allocatingFrom = null ; 
 + 
 + size . set ( 0L ) ; 
 + 
 + logger . debug ( " Done with closing and clearing existing commit log segments . " ) ; 
 + 
 + start ( ) ; 
 + 
 + wakeManager ( ) ; 
 } 
 
 / * *

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / CommitLog . java b / src / java / org / apache / cassandra / db / CommitLog . java 
 index fb9c982 . . 09725b2 100644 
 - - - a / src / java / org / apache / cassandra / db / CommitLog . java 
 + + + b / src / java / org / apache / cassandra / db / CommitLog . java 
 @ @ - 73 , 12 + 73 , 9 @ @ public class CommitLog 
 { 
 private static volatile int SEGMENT _ SIZE = 128 * 1024 * 1024 ; / / roll after log gets this big 
 private static volatile CommitLog instance _ ; 
 - private static Lock lock _ = new ReentrantLock ( ) ; 
 - private static Logger logger _ = Logger . getLogger ( CommitLog . class ) ; 
 - private static Map < String , CommitLogHeader > clHeaders _ = new HashMap < String , CommitLogHeader > ( ) ; 
 - 
 - private ExecutorService executor ; 
 - 
 + private static final Lock lock _ = new ReentrantLock ( ) ; 
 + private static final Logger logger _ = Logger . getLogger ( CommitLog . class ) ; 
 + private static final Map < String , CommitLogHeader > clHeaders _ = new HashMap < String , CommitLogHeader > ( ) ; 
 
 public static final class CommitLogContext 
 { 
 @ @ - 147 , 7 + 144 , 7 @ @ public class CommitLog 
 
 if ( instance _ = = null ) 
 { 
 - instance _ = new CommitLog ( false ) ; 
 + instance _ = new CommitLog ( ) ; 
 } 
 } 
 finally 
 @ @ - 163 , 6 + 160 , 7 @ @ public class CommitLog 
 / * header for current commit log * / 
 private CommitLogHeader clHeader _ ; 
 private BufferedRandomAccessFile logWriter _ ; 
 + private final ExecutorService executor = new CommitLogExecutorService ( ) ; 
 
 / * 
 * Generates a file name of the format CommitLog - < table > - < timestamp > . log in the 
 @ @ - 180 , 51 + 178 , 47 @ @ public class CommitLog 
 * param @ recoverymode - is commit log being instantiated in 
 * in recovery mode . 
 * / 
 - CommitLog ( boolean recoveryMode ) throws IOException 
 + private CommitLog ( ) throws IOException 
 { 
 - if ( ! recoveryMode ) 
 + setNextFileName ( ) ; 
 + logWriter _ = CommitLog . createWriter ( logFile _ ) ; 
 + writeCommitLogHeader ( ) ; 
 + 
 + if ( DatabaseDescriptor . getCommitLogSync ( ) = = DatabaseDescriptor . CommitLogSync . periodic ) 
 { 
 - executor = new CommitLogExecutorService ( ) ; 
 - setNextFileName ( ) ; 
 - logWriter _ = CommitLog . createWriter ( logFile _ ) ; 
 - writeCommitLogHeader ( ) ; 
 + final Runnable syncer = new Runnable ( ) 
 + { 
 + public void run ( ) 
 + { 
 + try 
 + { 
 + sync ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + } ; 
 
 - if ( DatabaseDescriptor . getCommitLogSync ( ) = = DatabaseDescriptor . CommitLogSync . periodic ) 
 + new Thread ( new Runnable ( ) 
 { 
 - final Runnable syncer = new Runnable ( ) 
 + public void run ( ) 
 { 
 - public void run ( ) 
 + while ( true ) 
 { 
 + executor . submit ( syncer ) ; 
 try 
 { 
 - sync ( ) ; 
 + Thread . sleep ( DatabaseDescriptor . getCommitLogSyncPeriod ( ) ) ; 
 } 
 - catch ( IOException e ) 
 + catch ( InterruptedException e ) 
 { 
 throw new RuntimeException ( e ) ; 
 } 
 } 
 - } ; 
 - 
 - new Thread ( new Runnable ( ) 
 - { 
 - public void run ( ) 
 - { 
 - while ( true ) 
 - { 
 - executor . submit ( syncer ) ; 
 - try 
 - { 
 - Thread . sleep ( DatabaseDescriptor . getCommitLogSyncPeriod ( ) ) ; 
 - } 
 - catch ( InterruptedException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - } 
 - } 
 - } , " PERIODIC - COMMIT - LOG - SYNCER " ) . start ( ) ; 
 - } 
 + } 
 + } , " PERIODIC - COMMIT - LOG - SYNCER " ) . start ( ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / RecoveryManager . java b / src / java / org / apache / cassandra / db / RecoveryManager . java 
 index 63aed7c . . 02b5337 100644 
 - - - a / src / java / org / apache / cassandra / db / RecoveryManager . java 
 + + + b / src / java / org / apache / cassandra / db / RecoveryManager . java 
 @ @ - 62 , 7 + 62 , 7 @ @ public class RecoveryManager 
 
 Arrays . sort ( files , new FileUtils . FileComparator ( ) ) ; 
 logger _ . info ( " Replaying " + StringUtils . join ( files , " , " ) ) ; 
 - new CommitLog ( true ) . recover ( files ) ; 
 + CommitLog . open ( ) . recover ( files ) ; 
 FileUtils . delete ( files ) ; 
 } 
 }
