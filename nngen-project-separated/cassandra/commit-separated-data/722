BLEU SCORE: 0.018543295278285157

TEST MSG: Make all index names in CustomIndexTest unique
GENERATED MSG: Fix CONTAINS ( KEY ) filtering on frozen collection clustering cols

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / index / CustomIndexTest . java b / test / unit / org / apache / cassandra / index / CustomIndexTest . java <nl> index f02823c . . b8e4185 100644 <nl> - - - a / test / unit / org / apache / cassandra / index / CustomIndexTest . java <nl> + + + b / test / unit / org / apache / cassandra / index / CustomIndexTest . java <nl> @ @ - 348 , 12 + 348 , 14 @ @ public class CustomIndexTest extends CQLTester <nl> { <nl> Object [ ] row = row ( 0 , 0 , 0 , 0 ) ; <nl> createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b ) ) " ) ; <nl> + String indexName = currentTable ( ) + " _ custom _ index " ; <nl> execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , row ) ; <nl> <nl> - assertInvalidMessage ( String . format ( IndexRestrictions . INDEX _ NOT _ FOUND , " custom _ index " , keyspace ( ) , currentTable ( ) ) , <nl> - " SELECT * FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; <nl> <nl> - createIndex ( String . format ( " CREATE CUSTOM INDEX custom _ index ON % % s ( c ) USING ' % s ' " , StubIndex . class . getName ( ) ) ) ; <nl> + assertInvalidMessage ( String . format ( IndexRestrictions . INDEX _ NOT _ FOUND , indexName , keyspace ( ) , currentTable ( ) ) , <nl> + String . format ( " SELECT * FROM % % s WHERE expr ( % s , ' foo bar baz ' ) " , indexName ) ) ; <nl> + <nl> + createIndex ( String . format ( " CREATE CUSTOM INDEX % s ON % % s ( c ) USING ' % s ' " , indexName , StubIndex . class . getName ( ) ) ) ; <nl> <nl> assertInvalidThrowMessage ( Server . CURRENT _ VERSION , <nl> String . format ( IndexRestrictions . INDEX _ NOT _ FOUND , " no _ such _ index " , keyspace ( ) , currentTable ( ) ) , <nl> @ @ - 361 , 52 + 363 , 58 @ @ public class CustomIndexTest extends CQLTester <nl> " SELECT * FROM % s WHERE expr ( no _ such _ index , ' foo bar baz ' ) " ) ; <nl> <nl> / / simple case <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) , row ) ; <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE expr ( \ " custom _ index \ " , ' foo bar baz ' ) " ) , row ) ; <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE expr ( custom _ index , $ $ foo \ " ~ ~ ~ bar Baz $ $ ) " ) , row ) ; <nl> + assertRows ( execute ( String . format ( " SELECT * FROM % % s WHERE expr ( % s , ' foo bar baz ' ) " , indexName ) ) , row ) ; <nl> + assertRows ( execute ( String . format ( " SELECT * FROM % % s WHERE expr ( \ " % s \ " , ' foo bar baz ' ) " , indexName ) ) , row ) ; <nl> + assertRows ( execute ( String . format ( " SELECT * FROM % % s WHERE expr ( % s , $ $ foo \ " ~ ~ ~ bar Baz $ $ ) " , indexName ) ) , row ) ; <nl> <nl> / / multiple expressions on the same index <nl> assertInvalidThrowMessage ( Server . CURRENT _ VERSION , <nl> IndexRestrictions . MULTIPLE _ EXPRESSIONS , <nl> QueryValidationException . class , <nl> - " SELECT * FROM % s WHERE expr ( custom _ index , ' foo ' ) AND expr ( custom _ index , ' bar ' ) " ) ; <nl> + String . format ( " SELECT * FROM % % s WHERE expr ( % 1 $ s , ' foo ' ) AND expr ( % 1 $ s , ' bar ' ) " , <nl> + indexName ) ) ; <nl> <nl> / / multiple expressions on different indexes <nl> createIndex ( String . format ( " CREATE CUSTOM INDEX other _ custom _ index ON % % s ( d ) USING ' % s ' " , StubIndex . class . getName ( ) ) ) ; <nl> assertInvalidThrowMessage ( Server . CURRENT _ VERSION , <nl> IndexRestrictions . MULTIPLE _ EXPRESSIONS , <nl> QueryValidationException . class , <nl> - " SELECT * FROM % s WHERE expr ( custom _ index , ' foo ' ) AND expr ( other _ custom _ index , ' bar ' ) " ) ; <nl> + String . format ( " SELECT * FROM % % s WHERE expr ( % s , ' foo ' ) AND expr ( other _ custom _ index , ' bar ' ) " , <nl> + indexName ) ) ; <nl> <nl> assertInvalidThrowMessage ( Server . CURRENT _ VERSION , <nl> StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , <nl> QueryValidationException . class , <nl> - " SELECT * FROM % s WHERE expr ( custom _ index , ' foo ' ) AND d = 0 " ) ; <nl> - assertRows ( execute ( " SELECT * FROM % s WHERE expr ( custom _ index , ' foo ' ) AND d = 0 ALLOW FILTERING " ) , row ) ; <nl> + String . format ( " SELECT * FROM % % s WHERE expr ( % s , ' foo ' ) AND d = 0 " , indexName ) ) ; <nl> + assertRows ( execute ( String . format ( " SELECT * FROM % % s WHERE expr ( % s , ' foo ' ) AND d = 0 ALLOW FILTERING " , indexName ) ) , row ) ; <nl> } <nl> <nl> @ Test <nl> public void customIndexDoesntSupportCustomExpressions ( ) throws Throwable <nl> { <nl> createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b ) ) " ) ; <nl> - createIndex ( String . format ( " CREATE CUSTOM INDEX custom _ index ON % % s ( c ) USING ' % s ' " , <nl> + String indexName = currentTable ( ) + " _ custom _ index " ; <nl> + createIndex ( String . format ( " CREATE CUSTOM INDEX % s ON % % s ( c ) USING ' % s ' " , <nl> + indexName , <nl> NoCustomExpressionsIndex . class . getName ( ) ) ) ; <nl> assertInvalidThrowMessage ( Server . CURRENT _ VERSION , <nl> - String . format ( IndexRestrictions . CUSTOM _ EXPRESSION _ NOT _ SUPPORTED , " custom _ index " ) , <nl> + String . format ( IndexRestrictions . CUSTOM _ EXPRESSION _ NOT _ SUPPORTED , indexName ) , <nl> QueryValidationException . class , <nl> - " SELECT * FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; <nl> + String . format ( " SELECT * FROM % % s WHERE expr ( % s , ' foo bar baz ' ) " , indexName ) ) ; <nl> } <nl> <nl> @ Test <nl> public void customIndexRejectsExpressionSyntax ( ) throws Throwable <nl> { <nl> createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b ) ) " ) ; <nl> - createIndex ( String . format ( " CREATE CUSTOM INDEX custom _ index ON % % s ( c ) USING ' % s ' " , <nl> + String indexName = currentTable ( ) + " _ custom _ index " ; <nl> + createIndex ( String . format ( " CREATE CUSTOM INDEX % s ON % % s ( c ) USING ' % s ' " , <nl> + indexName , <nl> AlwaysRejectIndex . class . getName ( ) ) ) ; <nl> assertInvalidThrowMessage ( Server . CURRENT _ VERSION , <nl> " None shall pass " , <nl> QueryValidationException . class , <nl> - " SELECT * FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; <nl> + String . format ( " SELECT * FROM % % s WHERE expr ( % s , ' foo bar baz ' ) " , indexName ) ) ; <nl> } <nl> <nl> @ Test
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / index / CustomIndexTest . java b / test / unit / org / apache / cassandra / index / CustomIndexTest . java 
 index f02823c . . b8e4185 100644 
 - - - a / test / unit / org / apache / cassandra / index / CustomIndexTest . java 
 + + + b / test / unit / org / apache / cassandra / index / CustomIndexTest . java 
 @ @ - 348 , 12 + 348 , 14 @ @ public class CustomIndexTest extends CQLTester 
 { 
 Object [ ] row = row ( 0 , 0 , 0 , 0 ) ; 
 createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b ) ) " ) ; 
 + String indexName = currentTable ( ) + " _ custom _ index " ; 
 execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , row ) ; 
 
 - assertInvalidMessage ( String . format ( IndexRestrictions . INDEX _ NOT _ FOUND , " custom _ index " , keyspace ( ) , currentTable ( ) ) , 
 - " SELECT * FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; 
 
 - createIndex ( String . format ( " CREATE CUSTOM INDEX custom _ index ON % % s ( c ) USING ' % s ' " , StubIndex . class . getName ( ) ) ) ; 
 + assertInvalidMessage ( String . format ( IndexRestrictions . INDEX _ NOT _ FOUND , indexName , keyspace ( ) , currentTable ( ) ) , 
 + String . format ( " SELECT * FROM % % s WHERE expr ( % s , ' foo bar baz ' ) " , indexName ) ) ; 
 + 
 + createIndex ( String . format ( " CREATE CUSTOM INDEX % s ON % % s ( c ) USING ' % s ' " , indexName , StubIndex . class . getName ( ) ) ) ; 
 
 assertInvalidThrowMessage ( Server . CURRENT _ VERSION , 
 String . format ( IndexRestrictions . INDEX _ NOT _ FOUND , " no _ such _ index " , keyspace ( ) , currentTable ( ) ) , 
 @ @ - 361 , 52 + 363 , 58 @ @ public class CustomIndexTest extends CQLTester 
 " SELECT * FROM % s WHERE expr ( no _ such _ index , ' foo bar baz ' ) " ) ; 
 
 / / simple case 
 - assertRows ( execute ( " SELECT * FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) , row ) ; 
 - assertRows ( execute ( " SELECT * FROM % s WHERE expr ( \ " custom _ index \ " , ' foo bar baz ' ) " ) , row ) ; 
 - assertRows ( execute ( " SELECT * FROM % s WHERE expr ( custom _ index , $ $ foo \ " ~ ~ ~ bar Baz $ $ ) " ) , row ) ; 
 + assertRows ( execute ( String . format ( " SELECT * FROM % % s WHERE expr ( % s , ' foo bar baz ' ) " , indexName ) ) , row ) ; 
 + assertRows ( execute ( String . format ( " SELECT * FROM % % s WHERE expr ( \ " % s \ " , ' foo bar baz ' ) " , indexName ) ) , row ) ; 
 + assertRows ( execute ( String . format ( " SELECT * FROM % % s WHERE expr ( % s , $ $ foo \ " ~ ~ ~ bar Baz $ $ ) " , indexName ) ) , row ) ; 
 
 / / multiple expressions on the same index 
 assertInvalidThrowMessage ( Server . CURRENT _ VERSION , 
 IndexRestrictions . MULTIPLE _ EXPRESSIONS , 
 QueryValidationException . class , 
 - " SELECT * FROM % s WHERE expr ( custom _ index , ' foo ' ) AND expr ( custom _ index , ' bar ' ) " ) ; 
 + String . format ( " SELECT * FROM % % s WHERE expr ( % 1 $ s , ' foo ' ) AND expr ( % 1 $ s , ' bar ' ) " , 
 + indexName ) ) ; 
 
 / / multiple expressions on different indexes 
 createIndex ( String . format ( " CREATE CUSTOM INDEX other _ custom _ index ON % % s ( d ) USING ' % s ' " , StubIndex . class . getName ( ) ) ) ; 
 assertInvalidThrowMessage ( Server . CURRENT _ VERSION , 
 IndexRestrictions . MULTIPLE _ EXPRESSIONS , 
 QueryValidationException . class , 
 - " SELECT * FROM % s WHERE expr ( custom _ index , ' foo ' ) AND expr ( other _ custom _ index , ' bar ' ) " ) ; 
 + String . format ( " SELECT * FROM % % s WHERE expr ( % s , ' foo ' ) AND expr ( other _ custom _ index , ' bar ' ) " , 
 + indexName ) ) ; 
 
 assertInvalidThrowMessage ( Server . CURRENT _ VERSION , 
 StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , 
 QueryValidationException . class , 
 - " SELECT * FROM % s WHERE expr ( custom _ index , ' foo ' ) AND d = 0 " ) ; 
 - assertRows ( execute ( " SELECT * FROM % s WHERE expr ( custom _ index , ' foo ' ) AND d = 0 ALLOW FILTERING " ) , row ) ; 
 + String . format ( " SELECT * FROM % % s WHERE expr ( % s , ' foo ' ) AND d = 0 " , indexName ) ) ; 
 + assertRows ( execute ( String . format ( " SELECT * FROM % % s WHERE expr ( % s , ' foo ' ) AND d = 0 ALLOW FILTERING " , indexName ) ) , row ) ; 
 } 
 
 @ Test 
 public void customIndexDoesntSupportCustomExpressions ( ) throws Throwable 
 { 
 createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b ) ) " ) ; 
 - createIndex ( String . format ( " CREATE CUSTOM INDEX custom _ index ON % % s ( c ) USING ' % s ' " , 
 + String indexName = currentTable ( ) + " _ custom _ index " ; 
 + createIndex ( String . format ( " CREATE CUSTOM INDEX % s ON % % s ( c ) USING ' % s ' " , 
 + indexName , 
 NoCustomExpressionsIndex . class . getName ( ) ) ) ; 
 assertInvalidThrowMessage ( Server . CURRENT _ VERSION , 
 - String . format ( IndexRestrictions . CUSTOM _ EXPRESSION _ NOT _ SUPPORTED , " custom _ index " ) , 
 + String . format ( IndexRestrictions . CUSTOM _ EXPRESSION _ NOT _ SUPPORTED , indexName ) , 
 QueryValidationException . class , 
 - " SELECT * FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; 
 + String . format ( " SELECT * FROM % % s WHERE expr ( % s , ' foo bar baz ' ) " , indexName ) ) ; 
 } 
 
 @ Test 
 public void customIndexRejectsExpressionSyntax ( ) throws Throwable 
 { 
 createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b ) ) " ) ; 
 - createIndex ( String . format ( " CREATE CUSTOM INDEX custom _ index ON % % s ( c ) USING ' % s ' " , 
 + String indexName = currentTable ( ) + " _ custom _ index " ; 
 + createIndex ( String . format ( " CREATE CUSTOM INDEX % s ON % % s ( c ) USING ' % s ' " , 
 + indexName , 
 AlwaysRejectIndex . class . getName ( ) ) ) ; 
 assertInvalidThrowMessage ( Server . CURRENT _ VERSION , 
 " None shall pass " , 
 QueryValidationException . class , 
 - " SELECT * FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; 
 + String . format ( " SELECT * FROM % % s WHERE expr ( % s , ' foo bar baz ' ) " , indexName ) ) ; 
 } 
 
 @ Test

NEAREST DIFF:
ELIMINATEDSENTENCE
