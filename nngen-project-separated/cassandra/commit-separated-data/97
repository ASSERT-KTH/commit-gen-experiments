BLEU SCORE: 0.03283637368030199

TEST MSG: Extend IAuthenticator to accept peer SSL certificates
GENERATED MSG: merge # 3440 from 1 . 0

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 0e671b0 . . d906879 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Extend IAuthenticator to accept peer SSL certificates ( CASSANDRA - 14652 ) <nl> * Incomplete handling of exceptions when decoding incoming messages ( CASSANDRA - 14574 ) <nl> * Add diagnostic events for user audit logging ( CASSANDRA - 13668 ) <nl> * Allow retrieving diagnostic events via JMX ( CASSANDRA - 14435 ) <nl> diff - - git a / src / java / org / apache / cassandra / auth / IAuthenticator . java b / src / java / org / apache / cassandra / auth / IAuthenticator . java <nl> index 9eb50a7 . . 212e774 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / IAuthenticator . java <nl> + + + b / src / java / org / apache / cassandra / auth / IAuthenticator . java <nl> @ @ - 21 , 6 + 21 , 8 @ @ import java . net . InetAddress ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> <nl> + import javax . security . cert . X509Certificate ; <nl> + <nl> import org . apache . cassandra . exceptions . AuthenticationException ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> <nl> @ @ - 65 , 6 + 67 , 22 @ @ public interface IAuthenticator <nl> SaslNegotiator newSaslNegotiator ( InetAddress clientAddress ) ; <nl> <nl> / * * <nl> + * Provide a SASL handler to perform authentication for an single connection . SASL <nl> + * is a stateful protocol , so a new instance must be used for each authentication <nl> + * attempt . This method accepts certificates as well . Authentication strategies can <nl> + * override this method to gain access to client ' s certificate chain , if present . <nl> + * @ param clientAddress the IP address of the client whom we wish to authenticate , or null <nl> + * if an internal client ( one not connected over the remote transport ) . <nl> + * @ param certificates the peer ' s X509 Certificate chain , if present . <nl> + * @ return org . apache . cassandra . auth . IAuthenticator . SaslNegotiator implementation <nl> + * ( see { @ link org . apache . cassandra . auth . PasswordAuthenticator . PlainTextSaslAuthenticator } ) <nl> + * / <nl> + default SaslNegotiator newSaslNegotiator ( InetAddress clientAddress , X509Certificate [ ] certificates ) <nl> + { <nl> + return newSaslNegotiator ( clientAddress ) ; <nl> + } <nl> + <nl> + / * * <nl> * A legacy method that is still used by JMX authentication . <nl> * <nl> * You should implement this for having JMX authentication through your <nl> diff - - git a / src / java / org / apache / cassandra / transport / ServerConnection . java b / src / java / org / apache / cassandra / transport / ServerConnection . java <nl> index d78b7c0 . . 00e334c 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / ServerConnection . java <nl> + + + b / src / java / org / apache / cassandra / transport / ServerConnection . java <nl> @ @ - 20 , 8 + 20 , 15 @ @ package org . apache . cassandra . transport ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> import java . util . concurrent . ConcurrentMap ; <nl> <nl> + import javax . net . ssl . SSLPeerUnverifiedException ; <nl> + import javax . security . cert . X509Certificate ; <nl> + <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> import io . netty . channel . Channel ; <nl> import com . codahale . metrics . Counter ; <nl> + import io . netty . handler . ssl . SslHandler ; <nl> import org . apache . cassandra . auth . IAuthenticator ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . service . ClientState ; <nl> @ @ - 29 , 6 + 36 , 7 @ @ import org . apache . cassandra . service . QueryState ; <nl> <nl> public class ServerConnection extends Connection <nl> { <nl> + private static Logger logger = LoggerFactory . getLogger ( ServerConnection . class ) ; <nl> <nl> private volatile IAuthenticator . SaslNegotiator saslNegotiator ; <nl> private final ClientState clientState ; <nl> @ @ - 124 , 7 + 132 , 30 @ @ public class ServerConnection extends Connection <nl> public IAuthenticator . SaslNegotiator getSaslNegotiator ( QueryState queryState ) <nl> { <nl> if ( saslNegotiator = = null ) <nl> - saslNegotiator = DatabaseDescriptor . getAuthenticator ( ) . newSaslNegotiator ( queryState . getClientAddress ( ) ) ; <nl> + saslNegotiator = DatabaseDescriptor . getAuthenticator ( ) <nl> + . newSaslNegotiator ( queryState . getClientAddress ( ) , certificates ( ) ) ; <nl> return saslNegotiator ; <nl> } <nl> + <nl> + private X509Certificate [ ] certificates ( ) <nl> + { <nl> + SslHandler sslHandler = ( SslHandler ) channel ( ) . pipeline ( ) <nl> + . get ( " ssl " ) ; <nl> + X509Certificate [ ] certificates = null ; <nl> + <nl> + if ( sslHandler ! = null ) <nl> + { <nl> + try <nl> + { <nl> + certificates = sslHandler . engine ( ) <nl> + . getSession ( ) <nl> + . getPeerCertificateChain ( ) ; <nl> + } <nl> + catch ( SSLPeerUnverifiedException e ) <nl> + { <nl> + logger . error ( " Failed to get peer certificates for peer { } " , channel ( ) . remoteAddress ( ) , e ) ; <nl> + } <nl> + } <nl> + return certificates ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6ef1317 . . 2bd02c4 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 15 , 7 + 15 , 7 @ @ Merged from 0 . 8 : <nl> * fix array out of bounds error in counter shard removal ( CASSANDRA - 3514 ) <nl> * avoid dropping tombstones when they might still be needed to shadow <nl> data in a different sstable ( CASSANDRA - 2786 ) <nl> - <nl> + * fix ConcurrentModificationException in Table . all ( ) ( CASSANDRA - 3529 ) <nl> <nl> 1 . 0 . 3 <nl> * revert name - based query defragmentation aka CASSANDRA - 2503 ( CASSANDRA - 3491 ) <nl> diff - - git a / src / java / org / apache / cassandra / config / Schema . java b / src / java / org / apache / cassandra / config / Schema . java <nl> index 924d1be . . 99ca791 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Schema . java <nl> + + + b / src / java / org / apache / cassandra / config / Schema . java <nl> @ @ - 49 , 13 + 49 , 13 @ @ public class Schema <nl> private final AtomicInteger cfIdGen = new AtomicInteger ( MIN _ CF _ ID ) ; <nl> <nl> / * metadata map for faster table lookup * / <nl> - private final Map < String , KSMetaData > tables ; <nl> + private final Map < String , KSMetaData > tables = new NonBlockingHashMap < String , KSMetaData > ( ) ; <nl> <nl> / * Table objects , one per keyspace . Only one instance should ever exist for any given keyspace . * / <nl> - private final Map < String , Table > tableInstances ; <nl> + private final Map < String , Table > tableInstances = new NonBlockingHashMap < String , Table > ( ) ; <nl> <nl> / * metadata map for faster ColumnFamily lookup * / <nl> - private final BiMap < Pair < String , String > , Integer > cfIdMap ; <nl> + private final BiMap < Pair < String , String > , Integer > cfIdMap = HashBiMap . create ( ) ; <nl> <nl> private volatile UUID version ; <nl> <nl> @ @ - 65 , 9 + 65 , 6 @ @ public class Schema <nl> * / <nl> public Schema ( UUID initialVersion ) <nl> { <nl> - tables = new HashMap < String , KSMetaData > ( ) ; <nl> - tableInstances = new NonBlockingHashMap < String , Table > ( ) ; <nl> - cfIdMap = HashBiMap . create ( ) ; <nl> version = initialVersion ; <nl> } <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0e671b0 . . d906879 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Extend IAuthenticator to accept peer SSL certificates ( CASSANDRA - 14652 ) 
 * Incomplete handling of exceptions when decoding incoming messages ( CASSANDRA - 14574 ) 
 * Add diagnostic events for user audit logging ( CASSANDRA - 13668 ) 
 * Allow retrieving diagnostic events via JMX ( CASSANDRA - 14435 ) 
 diff - - git a / src / java / org / apache / cassandra / auth / IAuthenticator . java b / src / java / org / apache / cassandra / auth / IAuthenticator . java 
 index 9eb50a7 . . 212e774 100644 
 - - - a / src / java / org / apache / cassandra / auth / IAuthenticator . java 
 + + + b / src / java / org / apache / cassandra / auth / IAuthenticator . java 
 @ @ - 21 , 6 + 21 , 8 @ @ import java . net . InetAddress ; 
 import java . util . Map ; 
 import java . util . Set ; 
 
 + import javax . security . cert . X509Certificate ; 
 + 
 import org . apache . cassandra . exceptions . AuthenticationException ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 
 @ @ - 65 , 6 + 67 , 22 @ @ public interface IAuthenticator 
 SaslNegotiator newSaslNegotiator ( InetAddress clientAddress ) ; 
 
 / * * 
 + * Provide a SASL handler to perform authentication for an single connection . SASL 
 + * is a stateful protocol , so a new instance must be used for each authentication 
 + * attempt . This method accepts certificates as well . Authentication strategies can 
 + * override this method to gain access to client ' s certificate chain , if present . 
 + * @ param clientAddress the IP address of the client whom we wish to authenticate , or null 
 + * if an internal client ( one not connected over the remote transport ) . 
 + * @ param certificates the peer ' s X509 Certificate chain , if present . 
 + * @ return org . apache . cassandra . auth . IAuthenticator . SaslNegotiator implementation 
 + * ( see { @ link org . apache . cassandra . auth . PasswordAuthenticator . PlainTextSaslAuthenticator } ) 
 + * / 
 + default SaslNegotiator newSaslNegotiator ( InetAddress clientAddress , X509Certificate [ ] certificates ) 
 + { 
 + return newSaslNegotiator ( clientAddress ) ; 
 + } 
 + 
 + / * * 
 * A legacy method that is still used by JMX authentication . 
 * 
 * You should implement this for having JMX authentication through your 
 diff - - git a / src / java / org / apache / cassandra / transport / ServerConnection . java b / src / java / org / apache / cassandra / transport / ServerConnection . java 
 index d78b7c0 . . 00e334c 100644 
 - - - a / src / java / org / apache / cassandra / transport / ServerConnection . java 
 + + + b / src / java / org / apache / cassandra / transport / ServerConnection . java 
 @ @ - 20 , 8 + 20 , 15 @ @ package org . apache . cassandra . transport ; 
 import java . util . concurrent . ConcurrentHashMap ; 
 import java . util . concurrent . ConcurrentMap ; 
 
 + import javax . net . ssl . SSLPeerUnverifiedException ; 
 + import javax . security . cert . X509Certificate ; 
 + 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 import io . netty . channel . Channel ; 
 import com . codahale . metrics . Counter ; 
 + import io . netty . handler . ssl . SslHandler ; 
 import org . apache . cassandra . auth . IAuthenticator ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . service . ClientState ; 
 @ @ - 29 , 6 + 36 , 7 @ @ import org . apache . cassandra . service . QueryState ; 
 
 public class ServerConnection extends Connection 
 { 
 + private static Logger logger = LoggerFactory . getLogger ( ServerConnection . class ) ; 
 
 private volatile IAuthenticator . SaslNegotiator saslNegotiator ; 
 private final ClientState clientState ; 
 @ @ - 124 , 7 + 132 , 30 @ @ public class ServerConnection extends Connection 
 public IAuthenticator . SaslNegotiator getSaslNegotiator ( QueryState queryState ) 
 { 
 if ( saslNegotiator = = null ) 
 - saslNegotiator = DatabaseDescriptor . getAuthenticator ( ) . newSaslNegotiator ( queryState . getClientAddress ( ) ) ; 
 + saslNegotiator = DatabaseDescriptor . getAuthenticator ( ) 
 + . newSaslNegotiator ( queryState . getClientAddress ( ) , certificates ( ) ) ; 
 return saslNegotiator ; 
 } 
 + 
 + private X509Certificate [ ] certificates ( ) 
 + { 
 + SslHandler sslHandler = ( SslHandler ) channel ( ) . pipeline ( ) 
 + . get ( " ssl " ) ; 
 + X509Certificate [ ] certificates = null ; 
 + 
 + if ( sslHandler ! = null ) 
 + { 
 + try 
 + { 
 + certificates = sslHandler . engine ( ) 
 + . getSession ( ) 
 + . getPeerCertificateChain ( ) ; 
 + } 
 + catch ( SSLPeerUnverifiedException e ) 
 + { 
 + logger . error ( " Failed to get peer certificates for peer { } " , channel ( ) . remoteAddress ( ) , e ) ; 
 + } 
 + } 
 + return certificates ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6ef1317 . . 2bd02c4 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 15 , 7 + 15 , 7 @ @ Merged from 0 . 8 : 
 * fix array out of bounds error in counter shard removal ( CASSANDRA - 3514 ) 
 * avoid dropping tombstones when they might still be needed to shadow 
 data in a different sstable ( CASSANDRA - 2786 ) 
 - 
 + * fix ConcurrentModificationException in Table . all ( ) ( CASSANDRA - 3529 ) 
 
 1 . 0 . 3 
 * revert name - based query defragmentation aka CASSANDRA - 2503 ( CASSANDRA - 3491 ) 
 diff - - git a / src / java / org / apache / cassandra / config / Schema . java b / src / java / org / apache / cassandra / config / Schema . java 
 index 924d1be . . 99ca791 100644 
 - - - a / src / java / org / apache / cassandra / config / Schema . java 
 + + + b / src / java / org / apache / cassandra / config / Schema . java 
 @ @ - 49 , 13 + 49 , 13 @ @ public class Schema 
 private final AtomicInteger cfIdGen = new AtomicInteger ( MIN _ CF _ ID ) ; 
 
 / * metadata map for faster table lookup * / 
 - private final Map < String , KSMetaData > tables ; 
 + private final Map < String , KSMetaData > tables = new NonBlockingHashMap < String , KSMetaData > ( ) ; 
 
 / * Table objects , one per keyspace . Only one instance should ever exist for any given keyspace . * / 
 - private final Map < String , Table > tableInstances ; 
 + private final Map < String , Table > tableInstances = new NonBlockingHashMap < String , Table > ( ) ; 
 
 / * metadata map for faster ColumnFamily lookup * / 
 - private final BiMap < Pair < String , String > , Integer > cfIdMap ; 
 + private final BiMap < Pair < String , String > , Integer > cfIdMap = HashBiMap . create ( ) ; 
 
 private volatile UUID version ; 
 
 @ @ - 65 , 9 + 65 , 6 @ @ public class Schema 
 * / 
 public Schema ( UUID initialVersion ) 
 { 
 - tables = new HashMap < String , KSMetaData > ( ) ; 
 - tableInstances = new NonBlockingHashMap < String , Table > ( ) ; 
 - cfIdMap = HashBiMap . create ( ) ; 
 version = initialVersion ; 
 } 

