BLEU SCORE: 0.021906016114066472

TEST MSG: use parameterized logging
GENERATED MSG: Do not consider local node a valid source during replace

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / dht / RangeStreamer . java b / src / java / org / apache / cassandra / dht / RangeStreamer . java <nl> index d104b23 . . 134ed13 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / RangeStreamer . java <nl> + + + b / src / java / org / apache / cassandra / dht / RangeStreamer . java <nl> @ @ - 181 , 7 + 181 , 7 @ @ public class RangeStreamer <nl> { <nl> if ( Keyspace . open ( keyspaceName ) . getReplicationStrategy ( ) instanceof LocalStrategy ) <nl> { <nl> - logger . info ( " Not adding ranges for Local Strategy keyspace = " + keyspaceName ) ; <nl> + logger . info ( " Not adding ranges for Local Strategy keyspace = { } " , keyspaceName ) ; <nl> return ; <nl> } <nl> <nl> @ @ - 190 , 7 + 190 , 7 @ @ public class RangeStreamer <nl> ? getAllRangesWithStrictSourcesFor ( keyspaceName , ranges ) : getAllRangesWithSourcesFor ( keyspaceName , ranges ) ; <nl> <nl> for ( Map . Entry < Range < Token > , InetAddress > entry : rangesForKeyspace . entries ( ) ) <nl> - logger . info ( String . format ( " { } : range { } exists on { } for keyspace { } " , description , entry . getKey ( ) , entry . getValue ( ) , keyspaceName ) ) ; <nl> + logger . info ( " { } : range { } exists on { } for keyspace { } " , description , entry . getKey ( ) , entry . getValue ( ) , keyspaceName ) ; <nl> <nl> <nl> Multimap < InetAddress , Range < Token > > rangeFetchMap = useStrictSource ? getRangeFetchMap ( rangesForKeyspace , sourceFilters , keyspaceName , useStrictConsistency ) : <nl> @ @ - 375 , 7 + 375 , 7 @ @ public class RangeStreamer <nl> { <nl> RangeFetchMapCalculator calculator = new RangeFetchMapCalculator ( rangesWithSources , sourceFilters , keyspace ) ; <nl> Multimap < InetAddress , Range < Token > > rangeFetchMapMap = calculator . getRangeFetchMap ( ) ; <nl> - logger . info ( " Output from RangeFetchMapCalculator for keyspace " + keyspace ) ; <nl> + logger . info ( " Output from RangeFetchMapCalculator for keyspace { } " , keyspace ) ; <nl> validateRangeFetchMap ( rangesWithSources , rangeFetchMapMap , keyspace ) ; <nl> return rangeFetchMapMap ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> index 0677958 . . 42abbe6 100644 <nl> - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> @ @ - 193 , 7 + 193 , 7 @ @ public class OutboundTcpConnection extends FastThreadLocalThread <nl> / * * <nl> * This is a helper method for unit testing . Disclaimer : Do not use this method outside unit tests , as <nl> * this method is iterating the queue which can be an expensive operation ( CPU time , queue locking ) . <nl> - * <nl> + * <nl> * @ return true , if the queue contains at least one expired element <nl> * / <nl> @ VisibleForTesting / / ( otherwise = VisibleForTesting . NONE ) <nl> @ @ - 275 , 7 + 275 , 7 @ @ public class OutboundTcpConnection extends FastThreadLocalThread <nl> } <nl> catch ( InternodeAuthFailed e ) <nl> { <nl> - logger . warn ( " Internode auth failed connecting to " + poolReference . endPoint ( ) ) ; <nl> + logger . warn ( " Internode auth failed connecting to { } " , poolReference . endPoint ( ) ) ; <nl> / / Remove the connection pool and other thread so messages aren ' t queued <nl> MessagingService . instance ( ) . destroyConnectionPool ( poolReference . endPoint ( ) ) ; <nl> } <nl> @ @ - 594 , 7 + 594 , 7 @ @ public class OutboundTcpConnection extends FastThreadLocalThread <nl> / * * <nl> * Expire elements from the queue if the queue is pretty full and expiration is not already in progress . <nl> * This method will only remove droppable expired entries . If no such element exists , nothing is removed from the queue . <nl> - * <nl> + * <nl> * @ param timestampNanos The current time as from System . nanoTime ( ) <nl> * / <nl> @ VisibleForTesting
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / dht / RangeStreamer . java b / src / java / org / apache / cassandra / dht / RangeStreamer . java 
 index d104b23 . . 134ed13 100644 
 - - - a / src / java / org / apache / cassandra / dht / RangeStreamer . java 
 + + + b / src / java / org / apache / cassandra / dht / RangeStreamer . java 
 @ @ - 181 , 7 + 181 , 7 @ @ public class RangeStreamer 
 { 
 if ( Keyspace . open ( keyspaceName ) . getReplicationStrategy ( ) instanceof LocalStrategy ) 
 { 
 - logger . info ( " Not adding ranges for Local Strategy keyspace = " + keyspaceName ) ; 
 + logger . info ( " Not adding ranges for Local Strategy keyspace = { } " , keyspaceName ) ; 
 return ; 
 } 
 
 @ @ - 190 , 7 + 190 , 7 @ @ public class RangeStreamer 
 ? getAllRangesWithStrictSourcesFor ( keyspaceName , ranges ) : getAllRangesWithSourcesFor ( keyspaceName , ranges ) ; 
 
 for ( Map . Entry < Range < Token > , InetAddress > entry : rangesForKeyspace . entries ( ) ) 
 - logger . info ( String . format ( " { } : range { } exists on { } for keyspace { } " , description , entry . getKey ( ) , entry . getValue ( ) , keyspaceName ) ) ; 
 + logger . info ( " { } : range { } exists on { } for keyspace { } " , description , entry . getKey ( ) , entry . getValue ( ) , keyspaceName ) ; 
 
 
 Multimap < InetAddress , Range < Token > > rangeFetchMap = useStrictSource ? getRangeFetchMap ( rangesForKeyspace , sourceFilters , keyspaceName , useStrictConsistency ) : 
 @ @ - 375 , 7 + 375 , 7 @ @ public class RangeStreamer 
 { 
 RangeFetchMapCalculator calculator = new RangeFetchMapCalculator ( rangesWithSources , sourceFilters , keyspace ) ; 
 Multimap < InetAddress , Range < Token > > rangeFetchMapMap = calculator . getRangeFetchMap ( ) ; 
 - logger . info ( " Output from RangeFetchMapCalculator for keyspace " + keyspace ) ; 
 + logger . info ( " Output from RangeFetchMapCalculator for keyspace { } " , keyspace ) ; 
 validateRangeFetchMap ( rangesWithSources , rangeFetchMapMap , keyspace ) ; 
 return rangeFetchMapMap ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 index 0677958 . . 42abbe6 100644 
 - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 @ @ - 193 , 7 + 193 , 7 @ @ public class OutboundTcpConnection extends FastThreadLocalThread 
 / * * 
 * This is a helper method for unit testing . Disclaimer : Do not use this method outside unit tests , as 
 * this method is iterating the queue which can be an expensive operation ( CPU time , queue locking ) . 
 - * 
 + * 
 * @ return true , if the queue contains at least one expired element 
 * / 
 @ VisibleForTesting / / ( otherwise = VisibleForTesting . NONE ) 
 @ @ - 275 , 7 + 275 , 7 @ @ public class OutboundTcpConnection extends FastThreadLocalThread 
 } 
 catch ( InternodeAuthFailed e ) 
 { 
 - logger . warn ( " Internode auth failed connecting to " + poolReference . endPoint ( ) ) ; 
 + logger . warn ( " Internode auth failed connecting to { } " , poolReference . endPoint ( ) ) ; 
 / / Remove the connection pool and other thread so messages aren ' t queued 
 MessagingService . instance ( ) . destroyConnectionPool ( poolReference . endPoint ( ) ) ; 
 } 
 @ @ - 594 , 7 + 594 , 7 @ @ public class OutboundTcpConnection extends FastThreadLocalThread 
 / * * 
 * Expire elements from the queue if the queue is pretty full and expiration is not already in progress . 
 * This method will only remove droppable expired entries . If no such element exists , nothing is removed from the queue . 
 - * 
 + * 
 * @ param timestampNanos The current time as from System . nanoTime ( ) 
 * / 
 @ VisibleForTesting

NEAREST DIFF:
ELIMINATEDSENTENCE
