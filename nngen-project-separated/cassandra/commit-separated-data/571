BLEU SCORE: 0.00440254073217817

TEST MSG: Fix inconsistencies in cassandra - stress load balancing policy
GENERATED MSG: For CASSANDRA - 7217 , have stress calculate maximum # of pending requests based on thread count and allow manually specifying max pending requests per connection as well as # of connections

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 92bf1ce . . 9be3e7c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 11 <nl> + * Fix inconsistencies in cassandra - stress load balancing policy ( CASSANDRA - 12919 ) <nl> * Fix validation of non - frozen UDT cells ( CASSANDRA - 12916 ) <nl> * AnticompactionRequestSerializer serializedSize is incorrect ( CASSANDRA - 12934 ) <nl> <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java b / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java <nl> index 53d8786 . . e0b4262 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import javax . net . ssl . SSLContext ; <nl> import com . datastax . driver . core . * ; <nl> import com . datastax . driver . core . policies . DCAwareRoundRobinPolicy ; <nl> import com . datastax . driver . core . policies . LoadBalancingPolicy ; <nl> + import com . datastax . driver . core . policies . TokenAwarePolicy ; <nl> import com . datastax . driver . core . policies . WhiteListPolicy ; <nl> import io . netty . util . internal . logging . InternalLoggerFactory ; <nl> import io . netty . util . internal . logging . Slf4JLoggerFactory ; <nl> @ @ - 70 , 19 + 71 , 8 @ @ public class JavaDriverClient <nl> this . password = settings . mode . password ; <nl> this . authProvider = settings . mode . authProvider ; <nl> this . encryptionOptions = encryptionOptions ; <nl> - <nl> - DCAwareRoundRobinPolicy . Builder policyBuilder = DCAwareRoundRobinPolicy . builder ( ) ; <nl> - if ( settings . node . datacenter ! = null ) <nl> - policyBuilder . withLocalDc ( settings . node . datacenter ) ; <nl> - <nl> - if ( settings . node . isWhiteList ) <nl> - loadBalancingPolicy = new WhiteListPolicy ( policyBuilder . build ( ) , settings . node . resolveAll ( settings . port . nativePort ) ) ; <nl> - else if ( settings . node . datacenter ! = null ) <nl> - loadBalancingPolicy = policyBuilder . build ( ) ; <nl> - else <nl> - loadBalancingPolicy = null ; <nl> - <nl> - connectionsPerHost = settings . mode . connectionsPerHost = = null ? 8 : settings . mode . connectionsPerHost ; <nl> + this . loadBalancingPolicy = loadBalancingPolicy ( settings ) ; <nl> + this . connectionsPerHost = settings . mode . connectionsPerHost = = null ? 8 : settings . mode . connectionsPerHost ; <nl> <nl> int maxThreadCount = 0 ; <nl> if ( settings . rate . auto ) <nl> @ @ - 97 , 6 + 87 , 22 @ @ public class JavaDriverClient <nl> maxPendingPerConnection = settings . mode . maxPendingPerConnection = = null ? Math . max ( 128 , requestsPerConnection ) : settings . mode . maxPendingPerConnection ; <nl> } <nl> <nl> + private LoadBalancingPolicy loadBalancingPolicy ( StressSettings settings ) <nl> + { <nl> + DCAwareRoundRobinPolicy . Builder policyBuilder = DCAwareRoundRobinPolicy . builder ( ) ; <nl> + if ( settings . node . datacenter ! = null ) <nl> + policyBuilder . withLocalDc ( settings . node . datacenter ) ; <nl> + <nl> + LoadBalancingPolicy ret = null ; <nl> + if ( settings . node . datacenter ! = null ) <nl> + ret = policyBuilder . build ( ) ; <nl> + <nl> + if ( settings . node . isWhiteList ) <nl> + ret = new WhiteListPolicy ( ret = = null ? policyBuilder . build ( ) : ret , settings . node . resolveAll ( settings . port . nativePort ) ) ; <nl> + <nl> + return new TokenAwarePolicy ( ret = = null ? policyBuilder . build ( ) : ret ) ; <nl> + } <nl> + <nl> public PreparedStatement prepare ( String query ) <nl> { <nl> PreparedStatement stmt = stmts . get ( query ) ; <nl> @ @ - 185 , 7 + 191 , 6 @ @ public class JavaDriverClient <nl> <nl> public ResultSet executePrepared ( PreparedStatement stmt , List < Object > queryParams , org . apache . cassandra . db . ConsistencyLevel consistency ) <nl> { <nl> - <nl> stmt . setConsistencyLevel ( from ( consistency ) ) ; <nl> BoundStatement bstmt = stmt . bind ( ( Object [ ] ) queryParams . toArray ( new Object [ queryParams . size ( ) ] ) ) ; <nl> return getSession ( ) . execute ( bstmt ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 92bf1ce . . 9be3e7c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 11 
 + * Fix inconsistencies in cassandra - stress load balancing policy ( CASSANDRA - 12919 ) 
 * Fix validation of non - frozen UDT cells ( CASSANDRA - 12916 ) 
 * AnticompactionRequestSerializer serializedSize is incorrect ( CASSANDRA - 12934 ) 
 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java b / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java 
 index 53d8786 . . e0b4262 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import javax . net . ssl . SSLContext ; 
 import com . datastax . driver . core . * ; 
 import com . datastax . driver . core . policies . DCAwareRoundRobinPolicy ; 
 import com . datastax . driver . core . policies . LoadBalancingPolicy ; 
 + import com . datastax . driver . core . policies . TokenAwarePolicy ; 
 import com . datastax . driver . core . policies . WhiteListPolicy ; 
 import io . netty . util . internal . logging . InternalLoggerFactory ; 
 import io . netty . util . internal . logging . Slf4JLoggerFactory ; 
 @ @ - 70 , 19 + 71 , 8 @ @ public class JavaDriverClient 
 this . password = settings . mode . password ; 
 this . authProvider = settings . mode . authProvider ; 
 this . encryptionOptions = encryptionOptions ; 
 - 
 - DCAwareRoundRobinPolicy . Builder policyBuilder = DCAwareRoundRobinPolicy . builder ( ) ; 
 - if ( settings . node . datacenter ! = null ) 
 - policyBuilder . withLocalDc ( settings . node . datacenter ) ; 
 - 
 - if ( settings . node . isWhiteList ) 
 - loadBalancingPolicy = new WhiteListPolicy ( policyBuilder . build ( ) , settings . node . resolveAll ( settings . port . nativePort ) ) ; 
 - else if ( settings . node . datacenter ! = null ) 
 - loadBalancingPolicy = policyBuilder . build ( ) ; 
 - else 
 - loadBalancingPolicy = null ; 
 - 
 - connectionsPerHost = settings . mode . connectionsPerHost = = null ? 8 : settings . mode . connectionsPerHost ; 
 + this . loadBalancingPolicy = loadBalancingPolicy ( settings ) ; 
 + this . connectionsPerHost = settings . mode . connectionsPerHost = = null ? 8 : settings . mode . connectionsPerHost ; 
 
 int maxThreadCount = 0 ; 
 if ( settings . rate . auto ) 
 @ @ - 97 , 6 + 87 , 22 @ @ public class JavaDriverClient 
 maxPendingPerConnection = settings . mode . maxPendingPerConnection = = null ? Math . max ( 128 , requestsPerConnection ) : settings . mode . maxPendingPerConnection ; 
 } 
 
 + private LoadBalancingPolicy loadBalancingPolicy ( StressSettings settings ) 
 + { 
 + DCAwareRoundRobinPolicy . Builder policyBuilder = DCAwareRoundRobinPolicy . builder ( ) ; 
 + if ( settings . node . datacenter ! = null ) 
 + policyBuilder . withLocalDc ( settings . node . datacenter ) ; 
 + 
 + LoadBalancingPolicy ret = null ; 
 + if ( settings . node . datacenter ! = null ) 
 + ret = policyBuilder . build ( ) ; 
 + 
 + if ( settings . node . isWhiteList ) 
 + ret = new WhiteListPolicy ( ret = = null ? policyBuilder . build ( ) : ret , settings . node . resolveAll ( settings . port . nativePort ) ) ; 
 + 
 + return new TokenAwarePolicy ( ret = = null ? policyBuilder . build ( ) : ret ) ; 
 + } 
 + 
 public PreparedStatement prepare ( String query ) 
 { 
 PreparedStatement stmt = stmts . get ( query ) ; 
 @ @ - 185 , 7 + 191 , 6 @ @ public class JavaDriverClient 
 
 public ResultSet executePrepared ( PreparedStatement stmt , List < Object > queryParams , org . apache . cassandra . db . ConsistencyLevel consistency ) 
 { 
 - 
 stmt . setConsistencyLevel ( from ( consistency ) ) ; 
 BoundStatement bstmt = stmt . bind ( ( Object [ ] ) queryParams . toArray ( new Object [ queryParams . size ( ) ] ) ) ; 
 return getSession ( ) . execute ( bstmt ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
