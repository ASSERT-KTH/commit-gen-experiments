BLEU SCORE: 0.037477767366779206

TEST MSG: Drop table should remove corresponding entries in dropped _ columns table
GENERATED MSG: avoid replaying hints to dropped columnfamilies

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 7e518ed . . 799e7f4 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 15 <nl> + * Drop table should remove corresponding entries in dropped _ columns table ( CASSANDRA - 13730 ) <nl> * Log warn message until legacy auth tables have been migrated ( CASSANDRA - 13371 ) <nl> * Fix incorrect [ 2 . 1 < - 3 . 0 ] serialization of counter cells created in 2 . 0 ( CASSANDRA - 13691 ) <nl> * Fix invalid writetime for null cells ( CASSANDRA - 13711 ) <nl> diff - - git a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> index 63017ec . . 06450f1 100644 <nl> - - - a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . config . * ; <nl> + import org . apache . cassandra . config . CFMetaData . DroppedColumn ; <nl> import org . apache . cassandra . config . ColumnDefinition . ClusteringOrder ; <nl> import org . apache . cassandra . cql3 . * ; <nl> import org . apache . cassandra . cql3 . functions . * ; <nl> @ @ - 626 , 6 + 627 , 9 @ @ public final class SchemaKeyspace <nl> for ( ColumnDefinition column : table . allColumns ( ) ) <nl> dropColumnFromSchemaMutation ( table , column , timestamp , mutation ) ; <nl> <nl> + for ( CFMetaData . DroppedColumn column : table . getDroppedColumns ( ) . values ( ) ) <nl> + dropDroppedColumnFromSchemaMutation ( table , column , timestamp , mutation ) ; <nl> + <nl> for ( TriggerMetadata trigger : table . getTriggers ( ) ) <nl> dropTriggerFromSchemaMutation ( table , trigger , timestamp , mutation ) ; <nl> <nl> @ @ - 657 , 6 + 661 , 11 @ @ public final class SchemaKeyspace <nl> RowUpdateBuilder . deleteRow ( Columns , timestamp , mutation , table . cfName , column . name . toString ( ) ) ; <nl> } <nl> <nl> + private static void dropDroppedColumnFromSchemaMutation ( CFMetaData table , DroppedColumn column , long timestamp , Mutation mutation ) <nl> + { <nl> + RowUpdateBuilder . deleteRow ( DroppedColumns , timestamp , mutation , table . cfName , column . name ) ; <nl> + } <nl> + <nl> private static void addDroppedColumnToSchemaMutation ( CFMetaData table , CFMetaData . DroppedColumn column , long timestamp , Mutation mutation ) <nl> { <nl> RowUpdateBuilder adder = new RowUpdateBuilder ( DroppedColumns , timestamp , mutation ) . clustering ( table . cfName , column . name ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / DropTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / DropTest . java <nl> index e5c7089 . . 692eb45 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / DropTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / DropTest . java <nl> @ @ - 34 , 4 + 34 , 17 @ @ public class DropTest extends CQLTester <nl> execute ( " DROP TABLE IF EXISTS keyspace _ does _ not _ exist . table _ does _ not _ exist " ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testDropTableWithDroppedColumns ( ) throws Throwable <nl> + { <nl> + / / CASSANDRA - 13730 : entry should be removed from dropped _ columns table when table is dropped <nl> + String cf = createTable ( " CREATE TABLE % s ( k1 int , c1 int , v1 int , v2 int , PRIMARY KEY ( k1 , c1 ) ) " ) ; <nl> + <nl> + execute ( " ALTER TABLE % s DROP v2 " ) ; <nl> + execute ( " DROP TABLE % s " ) ; <nl> + <nl> + assertRowsIgnoringOrder ( execute ( " select * from system _ schema . dropped _ columns where keyspace _ name = ' " <nl> + + keyspace ( ) <nl> + + " ' and table _ name = ' " + cf + " ' " ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 0f29896 . . 73a1e74 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 6 , 6 + 6 , 7 @ @ <nl> * don ' t perform HH to client - mode [ storageproxy ] nodes ( CASSANDRA - 2668 ) <nl> * fix IntegerType . getString with direct buffers ( CASSANDRA - 2684 ) <nl> * avoid replaying hints to dropped columnfamilies ( CASSANDRA - 2685 ) <nl> + * add placeholders for missing rows in range query pseudo - RR ( CASSANDRA - 2680 ) <nl> <nl> <nl> 0 . 7 . 6 <nl> diff - - git a / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java b / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java <nl> index d90c0a5 . . e4b3c0a 100644 <nl> - - - a / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java <nl> + + + b / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java <nl> @ @ - 24 , 8 + 24 , 6 @ @ import java . util . * ; <nl> import java . util . concurrent . LinkedBlockingQueue ; <nl> <nl> import com . google . common . collect . AbstractIterator ; <nl> - import com . google . common . collect . Iterables ; <nl> - import com . google . common . collect . Iterators ; <nl> import org . apache . commons . collections . iterators . CollatingIterator ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 104 , 7 + 102 , 21 @ @ public class RangeSliceResponseResolver implements IResponseResolver < Iterable < Ro <nl> <nl> protected Row getReduced ( ) <nl> { <nl> - ColumnFamily resolved = RowRepairResolver . resolveSuperset ( versions ) ; <nl> + ColumnFamily resolved = versions . size ( ) > 1 <nl> + ? RowRepairResolver . resolveSuperset ( versions ) <nl> + : versions . get ( 0 ) ; <nl> + if ( versions . size ( ) < sources . size ( ) ) <nl> + { <nl> + / / add placeholder rows for sources that didn ' t have any data , so maybeScheduleRepairs sees them <nl> + for ( InetAddress source : sources ) <nl> + { <nl> + if ( ! versionSources . contains ( source ) ) <nl> + { <nl> + versions . add ( null ) ; <nl> + versionSources . add ( source ) ; <nl> + } <nl> + } <nl> + } <nl> RowRepairResolver . maybeScheduleRepairs ( resolved , table , key , versions , versionSources ) ; <nl> versions . clear ( ) ; <nl> versionSources . clear ( ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 7e518ed . . 799e7f4 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 15 
 + * Drop table should remove corresponding entries in dropped _ columns table ( CASSANDRA - 13730 ) 
 * Log warn message until legacy auth tables have been migrated ( CASSANDRA - 13371 ) 
 * Fix incorrect [ 2 . 1 < - 3 . 0 ] serialization of counter cells created in 2 . 0 ( CASSANDRA - 13691 ) 
 * Fix invalid writetime for null cells ( CASSANDRA - 13711 ) 
 diff - - git a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 index 63017ec . . 06450f1 100644 
 - - - a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 + + + b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . config . * ; 
 + import org . apache . cassandra . config . CFMetaData . DroppedColumn ; 
 import org . apache . cassandra . config . ColumnDefinition . ClusteringOrder ; 
 import org . apache . cassandra . cql3 . * ; 
 import org . apache . cassandra . cql3 . functions . * ; 
 @ @ - 626 , 6 + 627 , 9 @ @ public final class SchemaKeyspace 
 for ( ColumnDefinition column : table . allColumns ( ) ) 
 dropColumnFromSchemaMutation ( table , column , timestamp , mutation ) ; 
 
 + for ( CFMetaData . DroppedColumn column : table . getDroppedColumns ( ) . values ( ) ) 
 + dropDroppedColumnFromSchemaMutation ( table , column , timestamp , mutation ) ; 
 + 
 for ( TriggerMetadata trigger : table . getTriggers ( ) ) 
 dropTriggerFromSchemaMutation ( table , trigger , timestamp , mutation ) ; 
 
 @ @ - 657 , 6 + 661 , 11 @ @ public final class SchemaKeyspace 
 RowUpdateBuilder . deleteRow ( Columns , timestamp , mutation , table . cfName , column . name . toString ( ) ) ; 
 } 
 
 + private static void dropDroppedColumnFromSchemaMutation ( CFMetaData table , DroppedColumn column , long timestamp , Mutation mutation ) 
 + { 
 + RowUpdateBuilder . deleteRow ( DroppedColumns , timestamp , mutation , table . cfName , column . name ) ; 
 + } 
 + 
 private static void addDroppedColumnToSchemaMutation ( CFMetaData table , CFMetaData . DroppedColumn column , long timestamp , Mutation mutation ) 
 { 
 RowUpdateBuilder adder = new RowUpdateBuilder ( DroppedColumns , timestamp , mutation ) . clustering ( table . cfName , column . name ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / DropTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / DropTest . java 
 index e5c7089 . . 692eb45 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / DropTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / DropTest . java 
 @ @ - 34 , 4 + 34 , 17 @ @ public class DropTest extends CQLTester 
 execute ( " DROP TABLE IF EXISTS keyspace _ does _ not _ exist . table _ does _ not _ exist " ) ; 
 } 
 
 + @ Test 
 + public void testDropTableWithDroppedColumns ( ) throws Throwable 
 + { 
 + / / CASSANDRA - 13730 : entry should be removed from dropped _ columns table when table is dropped 
 + String cf = createTable ( " CREATE TABLE % s ( k1 int , c1 int , v1 int , v2 int , PRIMARY KEY ( k1 , c1 ) ) " ) ; 
 + 
 + execute ( " ALTER TABLE % s DROP v2 " ) ; 
 + execute ( " DROP TABLE % s " ) ; 
 + 
 + assertRowsIgnoringOrder ( execute ( " select * from system _ schema . dropped _ columns where keyspace _ name = ' " 
 + + keyspace ( ) 
 + + " ' and table _ name = ' " + cf + " ' " ) ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0f29896 . . 73a1e74 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 6 , 6 + 6 , 7 @ @ 
 * don ' t perform HH to client - mode [ storageproxy ] nodes ( CASSANDRA - 2668 ) 
 * fix IntegerType . getString with direct buffers ( CASSANDRA - 2684 ) 
 * avoid replaying hints to dropped columnfamilies ( CASSANDRA - 2685 ) 
 + * add placeholders for missing rows in range query pseudo - RR ( CASSANDRA - 2680 ) 
 
 
 0 . 7 . 6 
 diff - - git a / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java b / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java 
 index d90c0a5 . . e4b3c0a 100644 
 - - - a / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java 
 + + + b / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java 
 @ @ - 24 , 8 + 24 , 6 @ @ import java . util . * ; 
 import java . util . concurrent . LinkedBlockingQueue ; 
 
 import com . google . common . collect . AbstractIterator ; 
 - import com . google . common . collect . Iterables ; 
 - import com . google . common . collect . Iterators ; 
 import org . apache . commons . collections . iterators . CollatingIterator ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 104 , 7 + 102 , 21 @ @ public class RangeSliceResponseResolver implements IResponseResolver < Iterable < Ro 
 
 protected Row getReduced ( ) 
 { 
 - ColumnFamily resolved = RowRepairResolver . resolveSuperset ( versions ) ; 
 + ColumnFamily resolved = versions . size ( ) > 1 
 + ? RowRepairResolver . resolveSuperset ( versions ) 
 + : versions . get ( 0 ) ; 
 + if ( versions . size ( ) < sources . size ( ) ) 
 + { 
 + / / add placeholder rows for sources that didn ' t have any data , so maybeScheduleRepairs sees them 
 + for ( InetAddress source : sources ) 
 + { 
 + if ( ! versionSources . contains ( source ) ) 
 + { 
 + versions . add ( null ) ; 
 + versionSources . add ( source ) ; 
 + } 
 + } 
 + } 
 RowRepairResolver . maybeScheduleRepairs ( resolved , table , key , versions , versionSources ) ; 
 versions . clear ( ) ; 
 versionSources . clear ( ) ;
