BLEU SCORE: 0.03772691894380681

TEST MSG: Update changes for backport
GENERATED MSG: Remove duplicate 5038 from CHANGES . txt

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e4956c9 . . e99799d 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 3 , 7 + 3 , 6 @ @ <nl> * Don ' t start Thrift rpc by default ( CASSANDRA - 9319 ) <nl> * Only stream from unrepaired sstables with incremental repair ( CASSANDRA - 8267 ) <nl> * Aggregate UDFs allow SFUNC return type to differ from STYPE if FFUNC specified ( CASSANDRA - 9321 ) <nl> - * Failure detector detects and ignores local pauses ( CASSANDRA - 9183 ) <nl> * Remove Thrift dependencies in bundled tools ( CASSANDRA - 8358 ) <nl> * Disable memory mapping of hsperfdata file for JVM statistics ( CASSANDRA - 9242 ) <nl> * Add pre - startup checks to detect potential incompatibilities ( CASSANDRA - 8049 ) <nl> @ @ - 104 , 6 + 103 , 7 @ @ <nl> <nl> <nl> 2 . 1 . 6 <nl> + * Failure detector detects and ignores local pauses ( CASSANDRA - 9183 ) <nl> * Add utility class to support for rate limiting a given log statement ( CASSANDRA - 9029 ) <nl> * Add missing consistency levels to cassandra - stess ( CASSANDRA - 9361 ) <nl> * Fix commitlog getCompletedTasks to not increment ( CASSANDRA - 9339 )
NEAREST DIFF (one line): diff - - git a / tools / stress / src / org / apache / cassandra / stress / Session . java b / tools / stress / src / org / apache / cassandra / stress / Session . java <nl> index 804e4e8 . . 58181a0 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / Session . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / Session . java <nl> @ @ - 108 , 6 + 108 , 7 @ @ public class Session implements Serializable <nl> availableOptions . addOption ( " Z " , " compaction - strategy " , true , " CompactionStrategy to use . " ) ; <nl> availableOptions . addOption ( " U " , " comparator " , true , " Column Comparator to use . Currently supported types are : TimeUUIDType , AsciiType , UTF8Type . " ) ; <nl> availableOptions . addOption ( " tf " , " transport - factory " , true , " Fully - qualified TTransportFactory class name for creating a connection . Note : For Thrift over SSL , use org . apache . cassandra . stress . SSLTransportFactory . " ) ; <nl> + availableOptions . addOption ( " ns " , " no - statistics " , false , " Turn off the aggegate statistics that is normally output after completion . " ) ; <nl> availableOptions . addOption ( " ts " , SSL _ TRUSTSTORE , true , " SSL : full path to truststore " ) ; <nl> availableOptions . addOption ( " tspw " , SSL _ TRUSTSTORE _ PW , true , " SSL : full path to truststore " ) ; <nl> availableOptions . addOption ( " prtcl " , SSL _ PROTOCOL , true , " SSL : connections protocol to use ( default : TLS ) " ) ; <nl> @ @ - 138 , 6 + 139 , 7 @ @ public class Session implements Serializable <nl> private boolean enable _ cql = false ; <nl> private boolean use _ prepared = false ; <nl> private boolean trace = false ; <nl> + private boolean captureStatistics = true ; <nl> <nl> private final String outFileName ; <nl> <nl> @ @ - 405 , 6 + 407 , 11 @ @ public class Session implements Serializable <nl> timeUUIDComparator = false ; <nl> } <nl> <nl> + if ( cmd . hasOption ( " ns " ) ) <nl> + { <nl> + captureStatistics = false ; <nl> + } <nl> + <nl> if ( cmd . hasOption ( SSL _ TRUSTSTORE ) ) <nl> encOptions . truststore = cmd . getOptionValue ( SSL _ TRUSTSTORE ) ; <nl> <nl> @ @ - 582 , 6 + 589 , 11 @ @ public class Session implements Serializable <nl> return use _ prepared ; <nl> } <nl> <nl> + public boolean outputStatistics ( ) <nl> + { <nl> + return captureStatistics ; <nl> + } <nl> + <nl> / * * <nl> * Create Keyspace with Standard and Super / Counter column families <nl> * / <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressAction . java b / tools / stress / src / org / apache / cassandra / stress / StressAction . java <nl> index ca71aba . . 9aa128f 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / StressAction . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / StressAction . java <nl> @ @ - 89 , 6 + 89 , 8 @ @ public class StressAction extends Thread <nl> int interval = client . getProgressInterval ( ) ; <nl> int epochIntervals = client . getProgressInterval ( ) * 10 ; <nl> long testStartTime = System . currentTimeMillis ( ) ; <nl> + <nl> + StressStatistics stats = new StressStatistics ( client , output ) ; <nl> <nl> while ( ! terminate ) <nl> { <nl> @ @ - 142 , 6 + 144 , 14 @ @ public class StressAction extends Thread <nl> keyDelta / interval , <nl> latency . getMedian ( ) , latency . get95thPercentile ( ) , latency . get999thPercentile ( ) , <nl> currentTimeInSeconds ) ) ; <nl> + <nl> + if ( client . outputStatistics ( ) ) { <nl> + stats . addIntervalStats ( total , <nl> + opDelta / interval , <nl> + keyDelta / interval , <nl> + latency , <nl> + currentTimeInSeconds ) ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 156 , 11 + 166 , 14 @ @ public class StressAction extends Thread <nl> if ( consumer . getReturnCode ( ) = = FAILURE ) <nl> returnCode = FAILURE ; <nl> <nl> - if ( returnCode = = SUCCESS ) <nl> + if ( returnCode = = SUCCESS ) { <nl> + if ( client . outputStatistics ( ) ) <nl> + stats . printStats ( ) ; <nl> / / marking an end of the output to the client <nl> - output . println ( " END " ) ; <nl> - else <nl> + output . println ( " END " ) ; <nl> + } else { <nl> output . println ( " FAILURE " ) ; <nl> + } <nl> <nl> } <nl> <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressStatistics . java b / tools / stress / src / org / apache / cassandra / stress / StressStatistics . java <nl> new file mode 100644 <nl> index 0000000 . . 4afac5a <nl> - - - / dev / null <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / StressStatistics . java <nl> @ @ - 0 , 0 + 1 , 124 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . stress ; <nl> + <nl> + import com . yammer . metrics . stats . Snapshot ; <nl> + import java . io . PrintStream ; <nl> + import org . apache . commons . lang . time . DurationFormatUtils ; <nl> + <nl> + / * * <nl> + * Gathers and aggregates statistics for an operation <nl> + * / <nl> + public class StressStatistics <nl> + { <nl> + <nl> + private Session client ; <nl> + private PrintStream output ; <nl> + <nl> + private long durationInSeconds ; <nl> + / * * The sum of the interval _ op _ rate values collected by tallyAverages * / <nl> + private int tallyOpRateSum ; <nl> + / * * The number of interval _ op _ rate values collected by tallyAverages * / <nl> + private int tallyOpRateCount ; <nl> + / * * The sum of the interval _ key _ rate values collected by tallyAverages * / <nl> + private int tallyKeyRateSum ; <nl> + / * * The number of interval _ key _ rate values collected by tallyAverages * / <nl> + private int tallyKeyRateCount ; <nl> + <nl> + / * * The sum of the latency values collected by tallyAverages * / <nl> + private double tallyLatencySum ; <nl> + / * * The number of latency values collected by tallyAverages * / <nl> + private int tallyLatencyCount ; <nl> + / * * The sum of the 95 % tile latency values collected by tallyAverages * / <nl> + private double tally95thLatencySum ; <nl> + / * * The number of 95 % tile latency values collected by tallyAverages * / <nl> + private int tally95thLatencyCount ; <nl> + / * * The sum of the 99 . 9 % tile latency values collected by tallyAverages * / <nl> + private double tally999thLatencySum ; <nl> + / * * The number of 99 . 9 % tile latency values collected by tallyAverages * / <nl> + private int tally999thLatencyCount ; <nl> + <nl> + <nl> + public StressStatistics ( Session client , PrintStream out ) <nl> + { <nl> + this . client = client ; <nl> + this . output = out ; <nl> + <nl> + tallyOpRateSum = 0 ; <nl> + tallyOpRateCount = 0 ; <nl> + } <nl> + <nl> + / * * <nl> + * Collect statistics per - interval <nl> + * / <nl> + public void addIntervalStats ( int totalOperations , int intervalOpRate , <nl> + int intervalKeyRate , Snapshot latency , <nl> + long currentTimeInSeconds ) <nl> + { <nl> + this . tallyAverages ( totalOperations , intervalKeyRate , intervalKeyRate , <nl> + latency , currentTimeInSeconds ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Collect interval _ op _ rate and interval _ key _ rate averages <nl> + * / <nl> + private void tallyAverages ( int totalOperations , int intervalOpRate , <nl> + int intervalKeyRate , Snapshot latency , <nl> + long currentTimeInSeconds ) <nl> + { <nl> + / / Skip the first and last 10 % of values . <nl> + / / The middle values of the operation are the ones worthwhile <nl> + / / to collect and average : <nl> + if ( totalOperations > ( 0 . 10 * client . getNumKeys ( ) ) & & <nl> + totalOperations < ( 0 . 90 * client . getNumKeys ( ) ) ) { <nl> + tallyOpRateSum + = intervalOpRate ; <nl> + tallyOpRateCount + = 1 ; <nl> + tallyKeyRateSum + = intervalKeyRate ; <nl> + tallyKeyRateCount + = 1 ; <nl> + tallyLatencySum + = latency . getMedian ( ) ; <nl> + tallyLatencyCount + = 1 ; <nl> + tally95thLatencySum + = latency . get95thPercentile ( ) ; <nl> + tally95thLatencyCount + = 1 ; <nl> + tally999thLatencySum + = latency . get999thPercentile ( ) ; <nl> + tally999thLatencyCount + = 1 ; <nl> + } <nl> + durationInSeconds = currentTimeInSeconds ; <nl> + } <nl> + <nl> + public void printStats ( ) <nl> + { <nl> + output . println ( " \ n " ) ; <nl> + if ( tallyOpRateCount > 0 ) { <nl> + output . println ( " Averages from the middle 80 % of values : " ) ; <nl> + output . println ( String . format ( " interval _ op _ rate : % d " , <nl> + ( tallyOpRateSum / tallyOpRateCount ) ) ) ; <nl> + output . println ( String . format ( " interval _ key _ rate : % d " , <nl> + ( tallyKeyRateSum / tallyKeyRateCount ) ) ) ; <nl> + output . println ( String . format ( " latency median : % . 1f " , <nl> + ( tallyLatencySum / tallyLatencyCount ) ) ) ; <nl> + output . println ( String . format ( " latency 95th percentile : % . 1f " , <nl> + ( tally95thLatencySum / tally95thLatencyCount ) ) ) ; <nl> + output . println ( String . format ( " latency 99 . 9th percentile : % . 1f " , <nl> + ( tally999thLatencySum / tally999thLatencyCount ) ) ) ; <nl> + } <nl> + output . println ( " Total operation time : " + DurationFormatUtils . formatDuration ( <nl> + durationInSeconds * 1000 , " HH : mm : ss " , true ) ) ; <nl> + } <nl> + <nl> + }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e4956c9 . . e99799d 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 3 , 7 + 3 , 6 @ @ 
 * Don ' t start Thrift rpc by default ( CASSANDRA - 9319 ) 
 * Only stream from unrepaired sstables with incremental repair ( CASSANDRA - 8267 ) 
 * Aggregate UDFs allow SFUNC return type to differ from STYPE if FFUNC specified ( CASSANDRA - 9321 ) 
 - * Failure detector detects and ignores local pauses ( CASSANDRA - 9183 ) 
 * Remove Thrift dependencies in bundled tools ( CASSANDRA - 8358 ) 
 * Disable memory mapping of hsperfdata file for JVM statistics ( CASSANDRA - 9242 ) 
 * Add pre - startup checks to detect potential incompatibilities ( CASSANDRA - 8049 ) 
 @ @ - 104 , 6 + 103 , 7 @ @ 
 
 
 2 . 1 . 6 
 + * Failure detector detects and ignores local pauses ( CASSANDRA - 9183 ) 
 * Add utility class to support for rate limiting a given log statement ( CASSANDRA - 9029 ) 
 * Add missing consistency levels to cassandra - stess ( CASSANDRA - 9361 ) 
 * Fix commitlog getCompletedTasks to not increment ( CASSANDRA - 9339 )

NEAREST DIFF:
diff - - git a / tools / stress / src / org / apache / cassandra / stress / Session . java b / tools / stress / src / org / apache / cassandra / stress / Session . java 
 index 804e4e8 . . 58181a0 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / Session . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / Session . java 
 @ @ - 108 , 6 + 108 , 7 @ @ public class Session implements Serializable 
 availableOptions . addOption ( " Z " , " compaction - strategy " , true , " CompactionStrategy to use . " ) ; 
 availableOptions . addOption ( " U " , " comparator " , true , " Column Comparator to use . Currently supported types are : TimeUUIDType , AsciiType , UTF8Type . " ) ; 
 availableOptions . addOption ( " tf " , " transport - factory " , true , " Fully - qualified TTransportFactory class name for creating a connection . Note : For Thrift over SSL , use org . apache . cassandra . stress . SSLTransportFactory . " ) ; 
 + availableOptions . addOption ( " ns " , " no - statistics " , false , " Turn off the aggegate statistics that is normally output after completion . " ) ; 
 availableOptions . addOption ( " ts " , SSL _ TRUSTSTORE , true , " SSL : full path to truststore " ) ; 
 availableOptions . addOption ( " tspw " , SSL _ TRUSTSTORE _ PW , true , " SSL : full path to truststore " ) ; 
 availableOptions . addOption ( " prtcl " , SSL _ PROTOCOL , true , " SSL : connections protocol to use ( default : TLS ) " ) ; 
 @ @ - 138 , 6 + 139 , 7 @ @ public class Session implements Serializable 
 private boolean enable _ cql = false ; 
 private boolean use _ prepared = false ; 
 private boolean trace = false ; 
 + private boolean captureStatistics = true ; 
 
 private final String outFileName ; 
 
 @ @ - 405 , 6 + 407 , 11 @ @ public class Session implements Serializable 
 timeUUIDComparator = false ; 
 } 
 
 + if ( cmd . hasOption ( " ns " ) ) 
 + { 
 + captureStatistics = false ; 
 + } 
 + 
 if ( cmd . hasOption ( SSL _ TRUSTSTORE ) ) 
 encOptions . truststore = cmd . getOptionValue ( SSL _ TRUSTSTORE ) ; 
 
 @ @ - 582 , 6 + 589 , 11 @ @ public class Session implements Serializable 
 return use _ prepared ; 
 } 
 
 + public boolean outputStatistics ( ) 
 + { 
 + return captureStatistics ; 
 + } 
 + 
 / * * 
 * Create Keyspace with Standard and Super / Counter column families 
 * / 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressAction . java b / tools / stress / src / org / apache / cassandra / stress / StressAction . java 
 index ca71aba . . 9aa128f 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / StressAction . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / StressAction . java 
 @ @ - 89 , 6 + 89 , 8 @ @ public class StressAction extends Thread 
 int interval = client . getProgressInterval ( ) ; 
 int epochIntervals = client . getProgressInterval ( ) * 10 ; 
 long testStartTime = System . currentTimeMillis ( ) ; 
 + 
 + StressStatistics stats = new StressStatistics ( client , output ) ; 
 
 while ( ! terminate ) 
 { 
 @ @ - 142 , 6 + 144 , 14 @ @ public class StressAction extends Thread 
 keyDelta / interval , 
 latency . getMedian ( ) , latency . get95thPercentile ( ) , latency . get999thPercentile ( ) , 
 currentTimeInSeconds ) ) ; 
 + 
 + if ( client . outputStatistics ( ) ) { 
 + stats . addIntervalStats ( total , 
 + opDelta / interval , 
 + keyDelta / interval , 
 + latency , 
 + currentTimeInSeconds ) ; 
 + } 
 } 
 } 
 
 @ @ - 156 , 11 + 166 , 14 @ @ public class StressAction extends Thread 
 if ( consumer . getReturnCode ( ) = = FAILURE ) 
 returnCode = FAILURE ; 
 
 - if ( returnCode = = SUCCESS ) 
 + if ( returnCode = = SUCCESS ) { 
 + if ( client . outputStatistics ( ) ) 
 + stats . printStats ( ) ; 
 / / marking an end of the output to the client 
 - output . println ( " END " ) ; 
 - else 
 + output . println ( " END " ) ; 
 + } else { 
 output . println ( " FAILURE " ) ; 
 + } 
 
 } 
 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressStatistics . java b / tools / stress / src / org / apache / cassandra / stress / StressStatistics . java 
 new file mode 100644 
 index 0000000 . . 4afac5a 
 - - - / dev / null 
 + + + b / tools / stress / src / org / apache / cassandra / stress / StressStatistics . java 
 @ @ - 0 , 0 + 1 , 124 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . stress ; 
 + 
 + import com . yammer . metrics . stats . Snapshot ; 
 + import java . io . PrintStream ; 
 + import org . apache . commons . lang . time . DurationFormatUtils ; 
 + 
 + / * * 
 + * Gathers and aggregates statistics for an operation 
 + * / 
 + public class StressStatistics 
 + { 
 + 
 + private Session client ; 
 + private PrintStream output ; 
 + 
 + private long durationInSeconds ; 
 + / * * The sum of the interval _ op _ rate values collected by tallyAverages * / 
 + private int tallyOpRateSum ; 
 + / * * The number of interval _ op _ rate values collected by tallyAverages * / 
 + private int tallyOpRateCount ; 
 + / * * The sum of the interval _ key _ rate values collected by tallyAverages * / 
 + private int tallyKeyRateSum ; 
 + / * * The number of interval _ key _ rate values collected by tallyAverages * / 
 + private int tallyKeyRateCount ; 
 + 
 + / * * The sum of the latency values collected by tallyAverages * / 
 + private double tallyLatencySum ; 
 + / * * The number of latency values collected by tallyAverages * / 
 + private int tallyLatencyCount ; 
 + / * * The sum of the 95 % tile latency values collected by tallyAverages * / 
 + private double tally95thLatencySum ; 
 + / * * The number of 95 % tile latency values collected by tallyAverages * / 
 + private int tally95thLatencyCount ; 
 + / * * The sum of the 99 . 9 % tile latency values collected by tallyAverages * / 
 + private double tally999thLatencySum ; 
 + / * * The number of 99 . 9 % tile latency values collected by tallyAverages * / 
 + private int tally999thLatencyCount ; 
 + 
 + 
 + public StressStatistics ( Session client , PrintStream out ) 
 + { 
 + this . client = client ; 
 + this . output = out ; 
 + 
 + tallyOpRateSum = 0 ; 
 + tallyOpRateCount = 0 ; 
 + } 
 + 
 + / * * 
 + * Collect statistics per - interval 
 + * / 
 + public void addIntervalStats ( int totalOperations , int intervalOpRate , 
 + int intervalKeyRate , Snapshot latency , 
 + long currentTimeInSeconds ) 
 + { 
 + this . tallyAverages ( totalOperations , intervalKeyRate , intervalKeyRate , 
 + latency , currentTimeInSeconds ) ; 
 + } 
 + 
 + / * * 
 + * Collect interval _ op _ rate and interval _ key _ rate averages 
 + * / 
 + private void tallyAverages ( int totalOperations , int intervalOpRate , 
 + int intervalKeyRate , Snapshot latency , 
 + long currentTimeInSeconds ) 
 + { 
 + / / Skip the first and last 10 % of values . 
 + / / The middle values of the operation are the ones worthwhile 
 + / / to collect and average : 
 + if ( totalOperations > ( 0 . 10 * client . getNumKeys ( ) ) & & 
 + totalOperations < ( 0 . 90 * client . getNumKeys ( ) ) ) { 
 + tallyOpRateSum + = intervalOpRate ; 
 + tallyOpRateCount + = 1 ; 
 + tallyKeyRateSum + = intervalKeyRate ; 
 + tallyKeyRateCount + = 1 ; 
 + tallyLatencySum + = latency . getMedian ( ) ; 
 + tallyLatencyCount + = 1 ; 
 + tally95thLatencySum + = latency . get95thPercentile ( ) ; 
 + tally95thLatencyCount + = 1 ; 
 + tally999thLatencySum + = latency . get999thPercentile ( ) ; 
 + tally999thLatencyCount + = 1 ; 
 + } 
 + durationInSeconds = currentTimeInSeconds ; 
 + } 
 + 
 + public void printStats ( ) 
 + { 
 + output . println ( " \ n " ) ; 
 + if ( tallyOpRateCount > 0 ) { 
 + output . println ( " Averages from the middle 80 % of values : " ) ; 
 + output . println ( String . format ( " interval _ op _ rate : % d " , 
 + ( tallyOpRateSum / tallyOpRateCount ) ) ) ; 
 + output . println ( String . format ( " interval _ key _ rate : % d " , 
 + ( tallyKeyRateSum / tallyKeyRateCount ) ) ) ; 
 + output . println ( String . format ( " latency median : % . 1f " , 
 + ( tallyLatencySum / tallyLatencyCount ) ) ) ; 
 + output . println ( String . format ( " latency 95th percentile : % . 1f " , 
 + ( tally95thLatencySum / tally95thLatencyCount ) ) ) ; 
 + output . println ( String . format ( " latency 99 . 9th percentile : % . 1f " , 
 + ( tally999thLatencySum / tally999thLatencyCount ) ) ) ; 
 + } 
 + output . println ( " Total operation time : " + DurationFormatUtils . formatDuration ( 
 + durationInSeconds * 1000 , " HH : mm : ss " , true ) ) ; 
 + } 
 + 
 + }
