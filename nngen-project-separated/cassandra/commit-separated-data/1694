BLEU SCORE: 0.013139808552042212

TEST MSG: drop out of column finding loop on success for altertable statement w / drop column
GENERATED MSG: Avoid NPE ( and cleanups )

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> index 5ee48b8 . . 7fdaf81 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> @ @ - 247 , 7 + 247 , 10 @ @ public class AlterTableStatement extends SchemaAlteringStatement <nl> for ( ColumnDefinition columnDef : cfm . regularAndStaticColumns ( ) ) <nl> { <nl> if ( columnDef . name . equals ( columnName ) ) <nl> + { <nl> toDelete = columnDef ; <nl> + break ; <nl> + } <nl> } <nl> assert toDelete ! = null ; <nl> cfm . removeColumnDefinition ( toDelete ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f5ae4e3 . . 98929cf 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 57 , 6 + 57 , 7 @ @ <nl> * Rewrite nodetool help ( CASSANDRA - 2293 ) <nl> * Make CQL3 the default for CQL ( CASSANDRA - 4640 ) <nl> * update stress tool to be able to use CQL3 ( CASSANDRA - 4406 ) <nl> + * Accept all thrift update on CQL3 cf but don ' t expose their metadata ( CASSANDRA - 4377 ) <nl> <nl> <nl> 1 . 1 . 6 <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index 4e29fc7 . . 687b5f3 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 886 , 12 + 886 , 7 @ @ public final class CFMetaData <nl> def . setKey _ alias ( keyAliases . get ( 0 ) ) ; <nl> List < org . apache . cassandra . thrift . ColumnDef > column _ meta = new ArrayList < org . apache . cassandra . thrift . ColumnDef > ( column _ metadata . size ( ) ) ; <nl> for ( ColumnDefinition cd : column _ metadata . values ( ) ) <nl> - { <nl> - / / Non - null componentIndex are only used by CQL ( so far ) so we don ' t expose <nl> - / / them through thrift <nl> - if ( cd . componentIndex = = null ) <nl> column _ meta . add ( cd . toThrift ( ) ) ; <nl> - } <nl> def . setColumn _ metadata ( column _ meta ) ; <nl> def . setCompaction _ strategy ( compactionStrategyClass . getName ( ) ) ; <nl> def . setCompaction _ strategy _ options ( new HashMap < String , String > ( compactionStrategyOptions ) ) ; <nl> @ @ - 1425 , 6 + 1420 , 23 @ @ public final class CFMetaData <nl> return cqlCfDef ; <nl> } <nl> <nl> + / * * <nl> + * Returns whether this CFMetaData has information non exposed on thrift so <nl> + * that it cannot be correctly handled automatically by thrift clients . <nl> + * / <nl> + public boolean isThriftIncompatible ( ) <nl> + { <nl> + if ( ! cqlCfDef . isComposite ) <nl> + return false ; <nl> + <nl> + for ( ColumnDefinition columnDef : column _ metadata . values ( ) ) <nl> + { <nl> + if ( columnDef . componentIndex ! = null ) <nl> + return true ; <nl> + } <nl> + return false ; <nl> + } <nl> + <nl> @ Override <nl> public String toString ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / config / KSMetaData . java b / src / java / org / apache / cassandra / config / KSMetaData . java <nl> index 50cbb91 . . e700444 100644 <nl> - - - a / src / java / org / apache / cassandra / config / KSMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / KSMetaData . java <nl> @ @ - 179 , 7 + 179 , 11 @ @ public final class KSMetaData <nl> { <nl> List < CfDef > cfDefs = new ArrayList < CfDef > ( cfMetaData . size ( ) ) ; <nl> for ( CFMetaData cfm : cfMetaData ( ) . values ( ) ) <nl> - cfDefs . add ( cfm . toThrift ( ) ) ; <nl> + { <nl> + / / Don ' t expose CF that cannot be correctly handle by thrift ; see CASSANDRA - 4377 for further details <nl> + if ( ! cfm . isThriftIncompatible ( ) ) <nl> + cfDefs . add ( cfm . toThrift ( ) ) ; <nl> + } <nl> KsDef ksdef = new KsDef ( name , strategyClass . getName ( ) , cfDefs ) ; <nl> ksdef . setStrategy _ options ( strategyOptions ) ; <nl> ksdef . setDurable _ writes ( durableWrites ) ; <nl> diff - - git a / src / java / org / apache / cassandra / thrift / ThriftValidation . java b / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> index 36b3aca . . 93b972d 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> + + + b / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import org . apache . cassandra . db . filter . NamesQueryFilter ; <nl> import org . apache . cassandra . db . filter . SliceQueryFilter ; <nl> import org . apache . cassandra . db . index . SecondaryIndexManager ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> + import org . apache . cassandra . db . marshal . CompositeType ; <nl> import org . apache . cassandra . db . marshal . MarshalException ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . dht . RandomPartitioner ; <nl> @ @ - 395 , 7 + 396 , 7 @ @ public class ThriftValidation <nl> if ( ! column . isSetTimestamp ( ) ) <nl> throw new org . apache . cassandra . exceptions . InvalidRequestException ( " Column timestamp is required " ) ; <nl> <nl> - ColumnDefinition columnDef = metadata . getColumnDefinition ( column . name ) ; <nl> + ColumnDefinition columnDef = getColumnDefinition ( metadata , column . name ) ; <nl> try <nl> { <nl> AbstractType < ? > validator = metadata . getValueValidator ( columnDef ) ; <nl> @ @ - 422 , 6 + 423 , 26 @ @ public class ThriftValidation <nl> metadata . ksName ) ) ; <nl> } <nl> <nl> + private static ColumnDefinition getColumnDefinition ( CFMetaData metadata , ByteBuffer columnName ) <nl> + { <nl> + if ( metadata . comparator instanceof CompositeType ) <nl> + { <nl> + CompositeType composite = ( CompositeType ) metadata . comparator ; <nl> + ByteBuffer [ ] components = composite . split ( columnName ) ; <nl> + for ( ColumnDefinition def : metadata . getColumn _ metadata ( ) . values ( ) ) <nl> + { <nl> + ByteBuffer toCompare = def . componentIndex = = null ? columnName : components [ def . componentIndex ] ; <nl> + if ( columnName . equals ( toCompare ) ) <nl> + return def ; <nl> + } <nl> + return null ; <nl> + } <nl> + else <nl> + { <nl> + return metadata . getColumnDefinition ( columnName ) ; <nl> + } <nl> + } <nl> + <nl> / * * <nl> * Return , at most , the first 64K of the buffer . This avoids very large column values being <nl> * logged in their entirety .

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 index 5ee48b8 . . 7fdaf81 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 @ @ - 247 , 7 + 247 , 10 @ @ public class AlterTableStatement extends SchemaAlteringStatement 
 for ( ColumnDefinition columnDef : cfm . regularAndStaticColumns ( ) ) 
 { 
 if ( columnDef . name . equals ( columnName ) ) 
 + { 
 toDelete = columnDef ; 
 + break ; 
 + } 
 } 
 assert toDelete ! = null ; 
 cfm . removeColumnDefinition ( toDelete ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f5ae4e3 . . 98929cf 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 57 , 6 + 57 , 7 @ @ 
 * Rewrite nodetool help ( CASSANDRA - 2293 ) 
 * Make CQL3 the default for CQL ( CASSANDRA - 4640 ) 
 * update stress tool to be able to use CQL3 ( CASSANDRA - 4406 ) 
 + * Accept all thrift update on CQL3 cf but don ' t expose their metadata ( CASSANDRA - 4377 ) 
 
 
 1 . 1 . 6 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index 4e29fc7 . . 687b5f3 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 886 , 12 + 886 , 7 @ @ public final class CFMetaData 
 def . setKey _ alias ( keyAliases . get ( 0 ) ) ; 
 List < org . apache . cassandra . thrift . ColumnDef > column _ meta = new ArrayList < org . apache . cassandra . thrift . ColumnDef > ( column _ metadata . size ( ) ) ; 
 for ( ColumnDefinition cd : column _ metadata . values ( ) ) 
 - { 
 - / / Non - null componentIndex are only used by CQL ( so far ) so we don ' t expose 
 - / / them through thrift 
 - if ( cd . componentIndex = = null ) 
 column _ meta . add ( cd . toThrift ( ) ) ; 
 - } 
 def . setColumn _ metadata ( column _ meta ) ; 
 def . setCompaction _ strategy ( compactionStrategyClass . getName ( ) ) ; 
 def . setCompaction _ strategy _ options ( new HashMap < String , String > ( compactionStrategyOptions ) ) ; 
 @ @ - 1425 , 6 + 1420 , 23 @ @ public final class CFMetaData 
 return cqlCfDef ; 
 } 
 
 + / * * 
 + * Returns whether this CFMetaData has information non exposed on thrift so 
 + * that it cannot be correctly handled automatically by thrift clients . 
 + * / 
 + public boolean isThriftIncompatible ( ) 
 + { 
 + if ( ! cqlCfDef . isComposite ) 
 + return false ; 
 + 
 + for ( ColumnDefinition columnDef : column _ metadata . values ( ) ) 
 + { 
 + if ( columnDef . componentIndex ! = null ) 
 + return true ; 
 + } 
 + return false ; 
 + } 
 + 
 @ Override 
 public String toString ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / config / KSMetaData . java b / src / java / org / apache / cassandra / config / KSMetaData . java 
 index 50cbb91 . . e700444 100644 
 - - - a / src / java / org / apache / cassandra / config / KSMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / KSMetaData . java 
 @ @ - 179 , 7 + 179 , 11 @ @ public final class KSMetaData 
 { 
 List < CfDef > cfDefs = new ArrayList < CfDef > ( cfMetaData . size ( ) ) ; 
 for ( CFMetaData cfm : cfMetaData ( ) . values ( ) ) 
 - cfDefs . add ( cfm . toThrift ( ) ) ; 
 + { 
 + / / Don ' t expose CF that cannot be correctly handle by thrift ; see CASSANDRA - 4377 for further details 
 + if ( ! cfm . isThriftIncompatible ( ) ) 
 + cfDefs . add ( cfm . toThrift ( ) ) ; 
 + } 
 KsDef ksdef = new KsDef ( name , strategyClass . getName ( ) , cfDefs ) ; 
 ksdef . setStrategy _ options ( strategyOptions ) ; 
 ksdef . setDurable _ writes ( durableWrites ) ; 
 diff - - git a / src / java / org / apache / cassandra / thrift / ThriftValidation . java b / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 index 36b3aca . . 93b972d 100644 
 - - - a / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 + + + b / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import org . apache . cassandra . db . filter . NamesQueryFilter ; 
 import org . apache . cassandra . db . filter . SliceQueryFilter ; 
 import org . apache . cassandra . db . index . SecondaryIndexManager ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 + import org . apache . cassandra . db . marshal . CompositeType ; 
 import org . apache . cassandra . db . marshal . MarshalException ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . dht . RandomPartitioner ; 
 @ @ - 395 , 7 + 396 , 7 @ @ public class ThriftValidation 
 if ( ! column . isSetTimestamp ( ) ) 
 throw new org . apache . cassandra . exceptions . InvalidRequestException ( " Column timestamp is required " ) ; 
 
 - ColumnDefinition columnDef = metadata . getColumnDefinition ( column . name ) ; 
 + ColumnDefinition columnDef = getColumnDefinition ( metadata , column . name ) ; 
 try 
 { 
 AbstractType < ? > validator = metadata . getValueValidator ( columnDef ) ; 
 @ @ - 422 , 6 + 423 , 26 @ @ public class ThriftValidation 
 metadata . ksName ) ) ; 
 } 
 
 + private static ColumnDefinition getColumnDefinition ( CFMetaData metadata , ByteBuffer columnName ) 
 + { 
 + if ( metadata . comparator instanceof CompositeType ) 
 + { 
 + CompositeType composite = ( CompositeType ) metadata . comparator ; 
 + ByteBuffer [ ] components = composite . split ( columnName ) ; 
 + for ( ColumnDefinition def : metadata . getColumn _ metadata ( ) . values ( ) ) 
 + { 
 + ByteBuffer toCompare = def . componentIndex = = null ? columnName : components [ def . componentIndex ] ; 
 + if ( columnName . equals ( toCompare ) ) 
 + return def ; 
 + } 
 + return null ; 
 + } 
 + else 
 + { 
 + return metadata . getColumnDefinition ( columnName ) ; 
 + } 
 + } 
 + 
 / * * 
 * Return , at most , the first 64K of the buffer . This avoids very large column values being 
 * logged in their entirety .
