BLEU SCORE: 0.024615130620079664

TEST MSG: Add smallint and tinyint data types
GENERATED MSG: merge # 3031 from 1 . 0 . 0

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e71b8c2 . . 87c3c6f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 <nl> + * Add ` smallint ` and ` tinyint ` data types ( CASSANDRA - 8951 ) <nl> * Avoid thrift schema creation when native driver is used in stress tool ( CASSANDRA - 9374 ) <nl> * Populate TokenMetadata early during startup ( CASSANDRA - 9317 ) <nl> * Make Functions . declared thread - safe <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index c16b55a . . 4d77fa0 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 70 , 6 + 70 , 8 @ @ New features <nl> In a QUERY request an unset limit is treated as ' unlimited ' . <nl> Unset WHERE clauses with unset partition column , clustering column <nl> or index column are not allowed . <nl> + - New ` ByteType ` ( cql tinyint ) . 1 - byte signed integer <nl> + - New ` ShortType ` ( cql smallint ) . 2 - byte signed integer <nl> <nl> <nl> Upgrading <nl> diff - - git a / doc / native _ protocol _ v4 . spec b / doc / native _ protocol _ v4 . spec <nl> index 4014594 . . 0f86989 100644 <nl> - - - a / doc / native _ protocol _ v4 . spec <nl> + + + b / doc / native _ protocol _ v4 . spec <nl> @ @ - 598 , 6 + 598 , 8 @ @ Table of Contents <nl> 0x0010 Inet <nl> 0x0011 Date <nl> 0x0012 Time <nl> + 0x0013 Smallint <nl> + 0x0014 Tinyint <nl> 0x0020 List : the value is an [ option ] , representing the type <nl> of the elements of the list . <nl> 0x0021 Map : the value is two [ option ] , representing the types of the <nl> @ @ - 888 , 25 + 890 , 47 @ @ Table of Contents <nl> A [ int ] n indicating the number of elements in the set , followed by n <nl> elements . Each element is [ bytes ] representing the serialized value . <nl> <nl> - 6 . 13 text <nl> + 6 . 13 smallint <nl> + <nl> + A two - byte two ' s complement integer . <nl> + <nl> + <nl> + 6 . 14 text <nl> <nl> A sequence of bytes conforming to the UTF - 8 specifications . <nl> <nl> - 6 . 14 timestamp <nl> + 6 . 15 timestamp <nl> <nl> An eight - byte two ' s complement integer representing a millisecond - precision <nl> offset from the unix epoch ( 00 : 00 : 00 , January 1st , 1970 ) . Negative values <nl> represent a negative offset from the epoch . <nl> <nl> - 6 . 15 uuid <nl> + 6 . 16 timeuuid <nl> + <nl> + A 16 byte sequence representing a version 1 UUID as defined by RFC 4122 . <nl> + <nl> + 6 . 17 tinyint <nl> + <nl> + A one - byte two ' s complement integer . <nl> + <nl> + 6 . 18 tuple <nl> + <nl> + A sequence of [ bytes ] values representing the items in a tuple . The encoding <nl> + of each element depends on the data type for that position in the tuple . <nl> + Null values may be represented by using length - 1 for the [ bytes ] <nl> + representation of an element . <nl> + <nl> + Within a tuple , all data types should use the v3 protocol serialization format . <nl> + <nl> + 6 . 19 uuid <nl> <nl> A 16 byte sequence representing any valid UUID as defined by RFC 4122 . <nl> <nl> - 6 . 16 varchar <nl> + 6 . 20 varchar <nl> <nl> An alias of the " text " type . <nl> <nl> - 6 . 17 varint <nl> + 6 . 21 varint <nl> <nl> A variable - length two ' s complement encoding of a signed integer . <nl> <nl> @ @ - 928 , 20 + 952 , 6 @ @ Table of Contents <nl> value . Implementors should pad positive values that have a MSB > = 0x80 <nl> with a leading 0x00 byte . <nl> <nl> - 6 . 18 timeuuid <nl> - <nl> - A 16 byte sequence representing a version 1 UUID as defined by RFC 4122 . <nl> - <nl> - 6 . 19 tuple <nl> - <nl> - A sequence of [ bytes ] values representing the items in a tuple . The encoding <nl> - of each element depends on the data type for that position in the tuple . <nl> - Null values may be represented by using length - 1 for the [ bytes ] <nl> - representation of an element . <nl> - <nl> - Within a tuple , all data types should use the v3 protocol serialization format . <nl> - <nl> - <nl> 7 . User Defined Types <nl> <nl> This section describes the serialization format for User defined types ( UDT ) , <nl> @ @ - 1141 , 3 + 1151 , 4 @ @ Table of Contents <nl> * Add custom payload to frames for custom QueryHandler implementations ( ignored by Cassandra ' s standard QueryHandler ) <nl> * Add " TRACE _ COMPLETE " event ( section 4 . 2 . 6 ) . <nl> * Add warnings to frames for responses for which the server generated a warning during processing , which the client needs to address . <nl> + * Add the tinyint and smallint data types <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / CQL3Type . java b / src / java / org / apache / cassandra / cql3 / CQL3Type . java <nl> index 362f1f8 . . fb2716e 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / CQL3Type . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / CQL3Type . java <nl> @ @ - 48 , 8 + 48 , 10 @ @ public interface CQL3Type <nl> FLOAT ( FloatType . instance ) , <nl> INET ( InetAddressType . instance ) , <nl> INT ( Int32Type . instance ) , <nl> + SMALLINT ( ShortType . instance ) , <nl> TEXT ( UTF8Type . instance ) , <nl> TIMESTAMP ( TimestampType . instance ) , <nl> + TINYINT ( ByteType . instance ) , <nl> UUID ( UUIDType . instance ) , <nl> VARCHAR ( UTF8Type . instance ) , <nl> VARINT ( IntegerType . instance ) , <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Constants . java b / src / java / org / apache / cassandra / cql3 / Constants . java <nl> index a0eff94 . . 07b848c 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Constants . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / Constants . java <nl> @ @ - 198 , 7 + 198 , 9 @ @ public abstract class Constants <nl> case DOUBLE : <nl> case FLOAT : <nl> case INT : <nl> + case SMALLINT : <nl> case TIMESTAMP : <nl> + case TINYINT : <nl> case VARINT : <nl> return AssignmentTestable . TestResult . WEAKLY _ ASSIGNABLE ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> index bd47825 . . 831b012 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Cql . g <nl> + + + b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> @ @ - 56 , 7 + 56 , 6 @ @ options { <nl> public static final Set < String > reservedTypeNames = new HashSet < String > ( ) <nl> { { <nl> add ( " byte " ) ; <nl> - add ( " smallint " ) ; <nl> add ( " complex " ) ; <nl> add ( " enum " ) ; <nl> add ( " date " ) ; <nl> @ @ - 1453 , 8 + 1452 , 10 @ @ native _ type returns [ CQL3Type t ] <nl> | K _ FLOAT { $ t = CQL3Type . Native . FLOAT ; } <nl> | K _ INET { $ t = CQL3Type . Native . INET ; } <nl> | K _ INT { $ t = CQL3Type . Native . INT ; } <nl> + | K _ SMALLINT { $ t = CQL3Type . Native . SMALLINT ; } <nl> | K _ TEXT { $ t = CQL3Type . Native . TEXT ; } <nl> | K _ TIMESTAMP { $ t = CQL3Type . Native . TIMESTAMP ; } <nl> + | K _ TINYINT { $ t = CQL3Type . Native . TINYINT ; } <nl> | K _ UUID { $ t = CQL3Type . Native . UUID ; } <nl> | K _ VARCHAR { $ t = CQL3Type . Native . VARCHAR ; } <nl> | K _ VARINT { $ t = CQL3Type . Native . VARINT ; } <nl> @ @ - 1643 , 6 + 1644 , 8 @ @ K _ DOUBLE : D O U B L E ; <nl> K _ FLOAT : F L O A T ; <nl> K _ INET : I N E T ; <nl> K _ INT : I N T ; <nl> + K _ SMALLINT : S M A L L I N T ; <nl> + K _ TINYINT : T I N Y I N T ; <nl> K _ TEXT : T E X T ; <nl> K _ UUID : U U I D ; <nl> K _ VARCHAR : V A R C H A R ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / UntypedResultSet . java b / src / java / org / apache / cassandra / cql3 / UntypedResultSet . java <nl> index 072d3b7 . . bf3cbb5 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / UntypedResultSet . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / UntypedResultSet . java <nl> @ @ - 229 , 6 + 229 , 16 @ @ public abstract class UntypedResultSet implements Iterable < UntypedResultSet . Row > <nl> return BooleanType . instance . compose ( data . get ( column ) ) ; <nl> } <nl> <nl> + public byte getByte ( String column ) <nl> + { <nl> + return ByteType . instance . compose ( data . get ( column ) ) ; <nl> + } <nl> + <nl> + public short getShort ( String column ) <nl> + { <nl> + return ShortType . instance . compose ( data . get ( column ) ) ; <nl> + } <nl> + <nl> public int getInt ( String column ) <nl> { <nl> return Int32Type . instance . compose ( data . get ( column ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / ByteType . java b / src / java / org / apache / cassandra / db / marshal / ByteType . java <nl> new file mode 100644 <nl> index 0000000 . . b63b92e <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / db / marshal / ByteType . java <nl> @ @ - 0 , 0 + 1 , 100 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . db . marshal ; <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + <nl> + import org . apache . cassandra . cql3 . CQL3Type ; <nl> + import org . apache . cassandra . cql3 . Constants ; <nl> + import org . apache . cassandra . cql3 . Term ; <nl> + import org . apache . cassandra . serializers . ByteSerializer ; <nl> + import org . apache . cassandra . serializers . MarshalException ; <nl> + import org . apache . cassandra . serializers . TypeSerializer ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + <nl> + public class ByteType extends AbstractType < Byte > <nl> + { <nl> + public static final ByteType instance = new ByteType ( ) ; <nl> + <nl> + ByteType ( ) <nl> + { <nl> + } / / singleton <nl> + <nl> + public int compare ( ByteBuffer o1 , ByteBuffer o2 ) <nl> + { <nl> + return o1 . get ( o1 . position ( ) ) - o2 . get ( o2 . position ( ) ) ; <nl> + } <nl> + <nl> + public ByteBuffer fromString ( String source ) throws MarshalException <nl> + { <nl> + / / Return an empty ByteBuffer for an empty string . <nl> + if ( source . isEmpty ( ) ) <nl> + return ByteBufferUtil . EMPTY _ BYTE _ BUFFER ; <nl> + <nl> + byte b ; <nl> + <nl> + try <nl> + { <nl> + b = Byte . parseByte ( source ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new MarshalException ( String . format ( " Unable to make byte from ' % s ' " , source ) , e ) ; <nl> + } <nl> + <nl> + return decompose ( b ) ; <nl> + } <nl> + <nl> + public Term fromJSONObject ( Object parsed ) throws MarshalException <nl> + { <nl> + try <nl> + { <nl> + if ( parsed instanceof String ) <nl> + return new Constants . Value ( fromString ( ( String ) parsed ) ) ; <nl> + <nl> + Number parsedNumber = ( Number ) parsed ; <nl> + if ( ! ( parsedNumber instanceof Byte ) ) <nl> + throw new MarshalException ( String . format ( " Expected a byte value , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; <nl> + <nl> + return new Constants . Value ( getSerializer ( ) . serialize ( parsedNumber . byteValue ( ) ) ) ; <nl> + } <nl> + catch ( ClassCastException exc ) <nl> + { <nl> + throw new MarshalException ( String . format ( <nl> + " Expected a byte value , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public String toJSONString ( ByteBuffer buffer , int protocolVersion ) <nl> + { <nl> + return getSerializer ( ) . deserialize ( buffer ) . toString ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public CQL3Type asCQL3Type ( ) <nl> + { <nl> + return CQL3Type . Native . TINYINT ; <nl> + } <nl> + <nl> + @ Override <nl> + public TypeSerializer < Byte > getSerializer ( ) <nl> + { <nl> + return ByteSerializer . instance ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / ShortType . java b / src / java / org / apache / cassandra / db / marshal / ShortType . java <nl> new file mode 100644 <nl> index 0000000 . . 43e8f5e <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / db / marshal / ShortType . java <nl> @ @ - 0 , 0 + 1 , 103 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . db . marshal ; <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + <nl> + import org . apache . cassandra . cql3 . CQL3Type ; <nl> + import org . apache . cassandra . cql3 . Constants ; <nl> + import org . apache . cassandra . cql3 . Term ; <nl> + import org . apache . cassandra . serializers . MarshalException ; <nl> + import org . apache . cassandra . serializers . ShortSerializer ; <nl> + import org . apache . cassandra . serializers . TypeSerializer ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + <nl> + public class ShortType extends AbstractType < Short > <nl> + { <nl> + public static final ShortType instance = new ShortType ( ) ; <nl> + <nl> + ShortType ( ) <nl> + { <nl> + } / / singleton <nl> + <nl> + public int compare ( ByteBuffer o1 , ByteBuffer o2 ) <nl> + { <nl> + int diff = o1 . get ( o1 . position ( ) ) - o2 . get ( o2 . position ( ) ) ; <nl> + if ( diff ! = 0 ) <nl> + return diff ; <nl> + <nl> + return ByteBufferUtil . compareUnsigned ( o1 , o2 ) ; <nl> + } <nl> + <nl> + public ByteBuffer fromString ( String source ) throws MarshalException <nl> + { <nl> + / / Return an empty ByteBuffer for an empty string . <nl> + if ( source . isEmpty ( ) ) <nl> + return ByteBufferUtil . EMPTY _ BYTE _ BUFFER ; <nl> + <nl> + short s ; <nl> + <nl> + try <nl> + { <nl> + s = Short . parseShort ( source ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new MarshalException ( String . format ( " Unable to make short from ' % s ' " , source ) , e ) ; <nl> + } <nl> + <nl> + return decompose ( s ) ; <nl> + } <nl> + <nl> + public Term fromJSONObject ( Object parsed ) throws MarshalException <nl> + { <nl> + try <nl> + { <nl> + if ( parsed instanceof String ) <nl> + return new Constants . Value ( fromString ( ( String ) parsed ) ) ; <nl> + <nl> + Number parsedNumber = ( Number ) parsed ; <nl> + if ( ! ( parsedNumber instanceof Short ) ) <nl> + throw new MarshalException ( String . format ( " Expected a short value , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; <nl> + <nl> + return new Constants . Value ( getSerializer ( ) . serialize ( parsedNumber . shortValue ( ) ) ) ; <nl> + } <nl> + catch ( ClassCastException exc ) <nl> + { <nl> + throw new MarshalException ( String . format ( <nl> + " Expected a short value , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public String toJSONString ( ByteBuffer buffer , int protocolVersion ) <nl> + { <nl> + return getSerializer ( ) . deserialize ( buffer ) . toString ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public CQL3Type asCQL3Type ( ) <nl> + { <nl> + return CQL3Type . Native . SMALLINT ; <nl> + } <nl> + <nl> + public TypeSerializer < Short > getSerializer ( ) <nl> + { <nl> + return ShortSerializer . instance ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / serializers / ByteSerializer . java b / src / java / org / apache / cassandra / serializers / ByteSerializer . java <nl> new file mode 100644 <nl> index 0000000 . . 8c736cb <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / serializers / ByteSerializer . java <nl> @ @ - 0 , 0 + 1 , 54 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . serializers ; <nl> + <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + <nl> + public class ByteSerializer implements TypeSerializer < Byte > <nl> + { <nl> + public static final ByteSerializer instance = new ByteSerializer ( ) ; <nl> + <nl> + public Byte deserialize ( ByteBuffer bytes ) <nl> + { <nl> + return bytes . remaining ( ) = = 0 ? null : bytes . get ( bytes . position ( ) ) ; <nl> + } <nl> + <nl> + public ByteBuffer serialize ( Byte value ) <nl> + { <nl> + return value = = null ? ByteBufferUtil . EMPTY _ BYTE _ BUFFER : ByteBuffer . allocate ( 1 ) . put ( 0 , value ) ; <nl> + } <nl> + <nl> + public void validate ( ByteBuffer bytes ) throws MarshalException <nl> + { <nl> + if ( bytes . remaining ( ) ! = 1 ) <nl> + throw new MarshalException ( String . format ( " Expected 1 byte for a tinyint ( % d ) " , bytes . remaining ( ) ) ) ; <nl> + } <nl> + <nl> + public String toString ( Byte value ) <nl> + { <nl> + return value = = null ? " " : String . valueOf ( value ) ; <nl> + } <nl> + <nl> + public Class < Byte > getType ( ) <nl> + { <nl> + return Byte . class ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / serializers / ShortSerializer . java b / src / java / org / apache / cassandra / serializers / ShortSerializer . java <nl> new file mode 100644 <nl> index 0000000 . . f12affa <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / serializers / ShortSerializer . java <nl> @ @ - 0 , 0 + 1 , 54 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . serializers ; <nl> + <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + <nl> + public class ShortSerializer implements TypeSerializer < Short > <nl> + { <nl> + public static final ShortSerializer instance = new ShortSerializer ( ) ; <nl> + <nl> + public Short deserialize ( ByteBuffer bytes ) <nl> + { <nl> + return bytes . remaining ( ) = = 0 ? null : ByteBufferUtil . toShort ( bytes ) ; <nl> + } <nl> + <nl> + public ByteBuffer serialize ( Short value ) <nl> + { <nl> + return value = = null ? ByteBufferUtil . EMPTY _ BYTE _ BUFFER : ByteBufferUtil . bytes ( value . shortValue ( ) ) ; <nl> + } <nl> + <nl> + public void validate ( ByteBuffer bytes ) throws MarshalException <nl> + { <nl> + if ( bytes . remaining ( ) ! = 2 ) <nl> + throw new MarshalException ( String . format ( " Expected 2 bytes for a smallint ( % d ) " , bytes . remaining ( ) ) ) ; <nl> + } <nl> + <nl> + public String toString ( Short value ) <nl> + { <nl> + return value = = null ? " " : String . valueOf ( value ) ; <nl> + } <nl> + <nl> + public Class < Short > getType ( ) <nl> + { <nl> + return Short . class ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / transport / DataType . java b / src / java / org / apache / cassandra / transport / DataType . java <nl> index a78b740 . . e3eaf32 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / DataType . java <nl> + + + b / src / java / org / apache / cassandra / transport / DataType . java <nl> @ @ - 53 , 13 + 53 , 14 @ @ public enum DataType implements OptionCodec . Codecable < DataType > <nl> INET ( 16 , InetAddressType . instance , 1 ) , <nl> DATE ( 17 , SimpleDateType . instance , 4 ) , <nl> TIME ( 18 , TimeType . instance , 4 ) , <nl> + SMALLINT ( 19 , ShortType . instance , 4 ) , <nl> + BYTE ( 20 , ByteType . instance , 4 ) , <nl> LIST ( 32 , null , 1 ) , <nl> MAP ( 33 , null , 1 ) , <nl> SET ( 34 , null , 1 ) , <nl> UDT ( 48 , null , 3 ) , <nl> TUPLE ( 49 , null , 3 ) ; <nl> <nl> - <nl> public static final OptionCodec < DataType > codec = new OptionCodec < DataType > ( DataType . class ) ; <nl> <nl> private final int id ; <nl> diff - - git a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java <nl> index 4fea55e . . 1831c19 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java <nl> + + + b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java <nl> @ @ - 383 , 6 + 383 , 18 @ @ public class ByteBufferUtil <nl> return bytes . getInt ( bytes . position ( ) ) ; <nl> } <nl> <nl> + / * * <nl> + * Convert a byte buffer to a short . <nl> + * Does not change the byte buffer position . <nl> + * <nl> + * @ param bytes byte buffer to convert to short <nl> + * @ return short representation of the byte buffer <nl> + * / <nl> + public static short toShort ( ByteBuffer bytes ) <nl> + { <nl> + return bytes . getShort ( bytes . position ( ) ) ; <nl> + } <nl> + <nl> public static long toLong ( ByteBuffer bytes ) <nl> { <nl> return bytes . getLong ( bytes . position ( ) ) ; <nl> @ @ - 398 , 6 + 410 , 11 @ @ public class ByteBufferUtil <nl> return bytes . getDouble ( bytes . position ( ) ) ; <nl> } <nl> <nl> + public static ByteBuffer bytes ( short s ) <nl> + { <nl> + return ByteBuffer . allocate ( 2 ) . putShort ( 0 , s ) ; <nl> + } <nl> + <nl> public static ByteBuffer bytes ( int i ) <nl> { <nl> return ByteBuffer . allocate ( 4 ) . putInt ( 0 , i ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / Util . java b / test / unit / org / apache / cassandra / Util . java <nl> index 4ebd0b5 . . 9b8e5df 100644 <nl> - - - a / test / unit / org / apache / cassandra / Util . java <nl> + + + b / test / unit / org / apache / cassandra / Util . java <nl> @ @ - 179 , 6 + 179 , 24 @ @ public class Util <nl> return bb ; <nl> } <nl> <nl> + public static ByteBuffer getBytes ( short v ) <nl> + { <nl> + byte [ ] bytes = new byte [ 2 ] ; <nl> + ByteBuffer bb = ByteBuffer . wrap ( bytes ) ; <nl> + bb . putShort ( v ) ; <nl> + bb . rewind ( ) ; <nl> + return bb ; <nl> + } <nl> + <nl> + public static ByteBuffer getBytes ( byte v ) <nl> + { <nl> + byte [ ] bytes = new byte [ 1 ] ; <nl> + ByteBuffer bb = ByteBuffer . wrap ( bytes ) ; <nl> + bb . put ( v ) ; <nl> + bb . rewind ( ) ; <nl> + return bb ; <nl> + } <nl> + <nl> public static List < Row > getRangeSlice ( ColumnFamilyStore cfs ) <nl> { <nl> return getRangeSlice ( cfs , null ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> index c318717 . . c37767c 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> @ @ - 1017 , 6 + 1017 , 12 @ @ public abstract class CQLTester <nl> if ( value instanceof ByteBuffer | | value instanceof TupleValue | | value = = null ) <nl> return BytesType . instance ; <nl> <nl> + if ( value instanceof Byte ) <nl> + return ByteType . instance ; <nl> + <nl> + if ( value instanceof Short ) <nl> + return ShortType . instance ; <nl> + <nl> if ( value instanceof Integer ) <nl> return Int32Type . instance ; <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / CreateTableTest . java b / test / unit / org / apache / cassandra / cql3 / CreateTableTest . java <nl> index 14d2c2b . . d14e87b 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / CreateTableTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / CreateTableTest . java <nl> @ @ - 19 , 6 + 19 , 8 @ @ package org . apache . cassandra . cql3 ; <nl> <nl> import org . junit . Test ; <nl> <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + <nl> import static junit . framework . Assert . assertFalse ; <nl> <nl> public class CreateTableTest extends CQLTester <nl> @ @ - 29 , 4 + 31 , 39 @ @ public class CreateTableTest extends CQLTester <nl> createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) ; " ) ; <nl> assertFalse ( currentTableMetadata ( ) . isThriftCompatible ( ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testCreateTableWithSmallintColumns ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a text , b smallint , c smallint , primary key ( a , b ) ) ; " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ' 1 ' , 1 , 2 ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , " 2 " , Short . MAX _ VALUE , Short . MIN _ VALUE ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s " ) , <nl> + row ( " 1 " , ( short ) 1 , ( short ) 2 ) , <nl> + row ( " 2 " , Short . MAX _ VALUE , Short . MIN _ VALUE ) ) ; <nl> + <nl> + assertInvalidMessage ( " Expected 2 bytes for a smallint ( 4 ) " , <nl> + " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , " 3 " , 1 , 2 ) ; <nl> + assertInvalidMessage ( " Expected 2 bytes for a smallint ( 0 ) " , <nl> + " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , " 3 " , ( short ) 1 , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCreateTinyintColumns ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a text , b tinyint , c tinyint , primary key ( a , b ) ) ; " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ' 1 ' , 1 , 2 ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , " 2 " , Byte . MAX _ VALUE , Byte . MIN _ VALUE ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s " ) , <nl> + row ( " 1 " , ( byte ) 1 , ( byte ) 2 ) , <nl> + row ( " 2 " , Byte . MAX _ VALUE , Byte . MIN _ VALUE ) ) ; <nl> + <nl> + assertInvalidMessage ( " Expected 1 byte for a tinyint ( 4 ) " , <nl> + " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , " 3 " , 1 , 2 ) ; <nl> + <nl> + assertInvalidMessage ( " Expected 1 byte for a tinyint ( 0 ) " , <nl> + " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , " 3 " , ( byte ) 1 , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ; <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / marshal / TypeCompareTest . java b / test / unit / org / apache / cassandra / db / marshal / TypeCompareTest . java <nl> index 04b030e . . fae04a2 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / marshal / TypeCompareTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / marshal / TypeCompareTest . java <nl> @ @ - 93 , 6 + 93 , 48 @ @ public class TypeCompareTest <nl> } <nl> <nl> @ Test <nl> + public void testByte ( ) <nl> + { <nl> + Random rng = new Random ( ) ; <nl> + ByteBuffer [ ] data = new ByteBuffer [ Byte . MAX _ VALUE ] ; <nl> + for ( int i = 0 ; i < data . length ; i + + ) <nl> + { <nl> + data [ i ] = ByteBuffer . allocate ( 1 ) ; <nl> + rng . nextBytes ( data [ i ] . array ( ) ) ; <nl> + } <nl> + <nl> + Arrays . sort ( data , ByteType . instance ) ; <nl> + <nl> + for ( int i = 1 ; i < data . length ; i + + ) <nl> + { <nl> + byte b0 = data [ i - 1 ] . get ( data [ i - 1 ] . position ( ) ) ; <nl> + byte b1 = data [ i ] . get ( data [ i ] . position ( ) ) ; <nl> + assert b0 < = b1 ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testShort ( ) <nl> + { <nl> + Random rng = new Random ( ) ; <nl> + ByteBuffer [ ] data = new ByteBuffer [ 1000 ] ; <nl> + for ( int i = 0 ; i < data . length ; i + + ) <nl> + { <nl> + data [ i ] = ByteBuffer . allocate ( 2 ) ; <nl> + rng . nextBytes ( data [ i ] . array ( ) ) ; <nl> + } <nl> + <nl> + Arrays . sort ( data , ShortType . instance ) ; <nl> + <nl> + for ( int i = 1 ; i < data . length ; i + + ) <nl> + { <nl> + short s0 = data [ i - 1 ] . getShort ( data [ i - 1 ] . position ( ) ) ; <nl> + short s1 = data [ i ] . getShort ( data [ i ] . position ( ) ) ; <nl> + assert s0 < = s1 ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> public void testInt ( ) <nl> { <nl> Random rng = new Random ( ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / marshal / TypeParserTest . java b / test / unit / org / apache / cassandra / db / marshal / TypeParserTest . java <nl> index 5a697be . . 6581fc7 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / marshal / TypeParserTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / marshal / TypeParserTest . java <nl> @ @ - 40 , 6 + 40 , 12 @ @ public class TypeParserTest <nl> type = TypeParser . parse ( " " ) ; <nl> assert type = = BytesType . instance ; <nl> <nl> + type = TypeParser . parse ( " ByteType " ) ; <nl> + assert type = = ByteType . instance ; <nl> + <nl> + type = TypeParser . parse ( " ShortType " ) ; <nl> + assert type = = ShortType . instance ; <nl> + <nl> type = TypeParser . parse ( " LongType " ) ; <nl> assert type = = LongType . instance ; <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / db / marshal / TypeValidationTest . java b / test / unit / org / apache / cassandra / db / marshal / TypeValidationTest . java <nl> index ed5e2bf . . 5ebeb64 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / marshal / TypeValidationTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / marshal / TypeValidationTest . java <nl> @ @ - 65 , 6 + 65 , 32 @ @ public class TypeValidationTest <nl> } <nl> <nl> @ Test <nl> + public void testValidShort ( ) <nl> + { <nl> + ShortType . instance . validate ( Util . getBytes ( ( short ) 5 ) ) ; <nl> + ShortType . instance . validate ( Util . getBytes ( Short . MAX _ VALUE ) ) ; <nl> + } <nl> + <nl> + @ Test ( expected = MarshalException . class ) <nl> + public void testInvalidShort ( ) <nl> + { <nl> + ShortType . instance . validate ( Util . getBytes ( 2057022603 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testValidByte ( ) <nl> + { <nl> + ByteType . instance . validate ( Util . getBytes ( ( byte ) 5 ) ) ; <nl> + ByteType . instance . validate ( Util . getBytes ( Byte . MAX _ VALUE ) ) ; <nl> + } <nl> + <nl> + @ Test ( expected = MarshalException . class ) <nl> + public void testInvalidByte ( ) <nl> + { <nl> + ByteType . instance . validate ( Util . getBytes ( 2057022603 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testValidUtf8 ( ) throws UnsupportedEncodingException <nl> { <nl> assert Character . MAX _ CODE _ POINT = = 0x0010ffff ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 3efd319 . . e051b06 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 72 , 7 + 72 , 7 @ @ <nl> ( CASSANDRA - 3148 ) <nl> * fix inconsistency of the CLI syntax when { } should be used instead of [ { } ] <nl> ( CASSANDRA - 3119 ) <nl> - * rename CQL type names to match expected SQL behavior ( CASSANDRA - 3149 ) <nl> + * rename CQL type names to match expected SQL behavior ( CASSANDRA - 3149 , 3031 ) <nl> * Arena - based allocation for memtables ( CASSANDRA - 2252 , 3162 ) <nl> <nl> <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index e0a906b . . b0cfcda 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 9 , 7 + 9 , 8 @ @ Upgrading <nl> cassandra . yaml ( use compaction _ throughput _ mb _ per _ sec to throttle <nl> compaction instead ) <nl> - CQL types bytea and date were renamed to blob and timestamp , respectively , <nl> - to conform with SQL norms <nl> + to conform with SQL norms . CQL type int is now a 4 - byte int , not 8 <nl> + ( which is still available as bigint ) . <nl> <nl> Features <nl> - - - - - - - - <nl> diff - - git a / doc / cql / CQL . textile b / doc / cql / CQL . textile <nl> index b8a5f8a . . 60759db 100644 <nl> - - - a / doc / cql / CQL . textile <nl> + + + b / doc / cql / CQL . textile <nl> @ @ - 273 , 6 + 273 , 7 @ @ It is possible to assign columns a type during column family creation . Columns <nl> | decimal | Variable - precision decimal | <nl> | double | 8 - byte floating point | <nl> | float | 4 - byte floating point | <nl> + | int | 4 - byte int | <nl> | text | UTF8 encoded string | <nl> | timestamp | Date + Time , encoded as 8 bytes since epoch | <nl> | uuid | Type 1 , or type 4 UUID | <nl> @ @ - 384 , 6 + 385 , 9 @ @ Versioning of the CQL language adheres to the " Semantic Versioning " : http : / / semve <nl> h1 . Changes <nl> <nl> pre . <nl> + Fri , 09 Sep 2011 11 : 43 : 00 - 0500 - Jonathan Ellis <nl> + * add int data type <nl> + <nl> Wed , 07 Sep 2011 09 : 01 : 00 - 0500 - Jonathan Ellis <nl> * Updated version to 2 . 0 ; Documented row - based count ( ) <nl> * Updated list of supported data types <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java <nl> index 8aba7e7 . . c53bb53 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliClient . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliClient . java <nl> @ @ - 66 , 6 + 66 , 7 @ @ public class CliClient <nl> BYTES ( BytesType . instance ) , <nl> INTEGER ( IntegerType . instance ) , <nl> LONG ( LongType . instance ) , <nl> + INT ( Int32Type . instance ) , <nl> LEXICALUUID ( LexicalUUIDType . instance ) , <nl> TIMEUUID ( TimeUUIDType . instance ) , <nl> UTF8 ( UTF8Type . instance ) , <nl> diff - - git a / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java b / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java <nl> index b31c98e . . 7bcae18 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java <nl> @ @ - 71 , 7 + 71 , 7 @ @ public class CreateColumnFamilyStatement <nl> comparators . put ( " decimal " , " DecimalType " ) ; <nl> comparators . put ( " double " , " DoubleType " ) ; <nl> comparators . put ( " float " , " FloatType " ) ; <nl> - / / comparators . put ( " int " , " LongType " ) ; TODO add int - > Int32Type <nl> + comparators . put ( " int " , " Int32Type " ) ; <nl> comparators . put ( " text " , " UTF8Type " ) ; <nl> comparators . put ( " timestamp " , " DateType " ) ; <nl> comparators . put ( " uuid " , " UUIDType " ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql / jdbc / JdbcInt32 . java b / src / java / org / apache / cassandra / cql / jdbc / JdbcInt32 . java <nl> new file mode 100644 <nl> index 0000000 . . 21bdc33 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cql / jdbc / JdbcInt32 . java <nl> @ @ - 0 , 0 + 1 , 100 @ @ <nl> + package org . apache . cassandra . cql . jdbc ; <nl> + / * <nl> + * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * <nl> + * / <nl> + <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + import java . sql . Types ; <nl> + <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + <nl> + public class JdbcInt32 extends AbstractJdbcType < Integer > <nl> + { <nl> + public static final JdbcInt32 instance = new JdbcInt32 ( ) ; <nl> + <nl> + JdbcInt32 ( ) <nl> + { <nl> + } <nl> + <nl> + public boolean isCaseSensitive ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public int getScale ( Integer obj ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + <nl> + public int getPrecision ( Integer obj ) <nl> + { <nl> + return obj . toString ( ) . length ( ) ; <nl> + } <nl> + <nl> + public boolean isCurrency ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public boolean isSigned ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + public String toString ( Integer obj ) <nl> + { <nl> + return obj . toString ( ) ; <nl> + } <nl> + <nl> + public boolean needsQuotes ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public String getString ( ByteBuffer bytes ) <nl> + { <nl> + if ( bytes . remaining ( ) = = 0 ) <nl> + { <nl> + return " " ; <nl> + } <nl> + if ( bytes . remaining ( ) ! = 4 ) <nl> + { <nl> + throw new MarshalException ( " A int is exactly 4 bytes : " + bytes . remaining ( ) ) ; <nl> + } <nl> + <nl> + return String . valueOf ( bytes . getInt ( bytes . position ( ) ) ) ; <nl> + } <nl> + <nl> + public Class < Integer > getType ( ) <nl> + { <nl> + return Integer . class ; <nl> + } <nl> + <nl> + public int getJdbcType ( ) <nl> + { <nl> + return Types . INTEGER ; <nl> + } <nl> + <nl> + public Integer compose ( ByteBuffer bytes ) <nl> + { <nl> + return ByteBufferUtil . toInt ( bytes ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / cql / jdbc / JdbcLong . java b / src / java / org / apache / cassandra / cql / jdbc / JdbcLong . java <nl> index 68ff4b0 . . b6c6e27 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / jdbc / JdbcLong . java <nl> + + + b / src / java / org / apache / cassandra / cql / jdbc / JdbcLong . java <nl> @ @ - 90 , 7 + 90 , 7 @ @ public class JdbcLong extends AbstractJdbcType < Long > <nl> <nl> public int getJdbcType ( ) <nl> { <nl> - return Types . INTEGER ; <nl> + return Types . BIGINT ; <nl> } <nl> <nl> public Long compose ( ByteBuffer bytes ) <nl> diff - - git a / src / java / org / apache / cassandra / cql / jdbc / TypesMap . java b / src / java / org / apache / cassandra / cql / jdbc / TypesMap . java <nl> index 27b487c . . 94ff9a3 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / jdbc / TypesMap . java <nl> + + + b / src / java / org / apache / cassandra / cql / jdbc / TypesMap . java <nl> @ @ - 17 , 6 + 17 , 7 @ @ public class TypesMap <nl> map . put ( " org . apache . cassandra . db . marshal . DecimalType " , JdbcDecimal . instance ) ; <nl> map . put ( " org . apache . cassandra . db . marshal . DoubleType " , JdbcDouble . instance ) ; <nl> map . put ( " org . apache . cassandra . db . marshal . FloatType " , JdbcFloat . instance ) ; <nl> + map . put ( " org . apache . cassandra . db . marshal . Int32Type " , JdbcInt32 . instance ) ; <nl> map . put ( " org . apache . cassandra . db . marshal . IntegerType " , JdbcInteger . instance ) ; <nl> map . put ( " org . apache . cassandra . db . marshal . LexicalUUIDType " , JdbcLexicalUUID . instance ) ; <nl> map . put ( " org . apache . cassandra . db . marshal . LongType " , JdbcLong . instance ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / Int32Type . java b / src / java / org / apache / cassandra / db / marshal / Int32Type . java <nl> new file mode 100644 <nl> index 0000000 . . 22ec9e4 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / db / marshal / Int32Type . java <nl> @ @ - 0 , 0 + 1 , 102 @ @ <nl> + package org . apache . cassandra . db . marshal ; <nl> + / * <nl> + * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * <nl> + * / <nl> + <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + <nl> + import org . apache . cassandra . cql . jdbc . JdbcInt32 ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + <nl> + public class Int32Type extends AbstractType < Integer > <nl> + { <nl> + public static final Int32Type instance = new Int32Type ( ) ; <nl> + <nl> + Int32Type ( ) { } / / singleton <nl> + <nl> + public Integer compose ( ByteBuffer bytes ) <nl> + { <nl> + return ByteBufferUtil . toInt ( bytes ) ; <nl> + } <nl> + <nl> + public ByteBuffer decompose ( Integer value ) <nl> + { <nl> + return ByteBufferUtil . bytes ( value ) ; <nl> + } <nl> + <nl> + public int compare ( ByteBuffer o1 , ByteBuffer o2 ) <nl> + { <nl> + if ( o1 . remaining ( ) = = 0 ) <nl> + { <nl> + return o2 . remaining ( ) = = 0 ? 0 : - 1 ; <nl> + } <nl> + if ( o2 . remaining ( ) = = 0 ) <nl> + { <nl> + return 1 ; <nl> + } <nl> + <nl> + int diff = o1 . get ( o1 . position ( ) ) - o2 . get ( o2 . position ( ) ) ; <nl> + if ( diff ! = 0 ) <nl> + return diff ; <nl> + <nl> + <nl> + return ByteBufferUtil . compareUnsigned ( o1 , o2 ) ; <nl> + } <nl> + <nl> + public String getString ( ByteBuffer bytes ) <nl> + { <nl> + try <nl> + { <nl> + return JdbcInt32 . instance . getString ( bytes ) ; <nl> + } <nl> + catch ( org . apache . cassandra . cql . jdbc . MarshalException e ) <nl> + { <nl> + throw new MarshalException ( e . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + public ByteBuffer fromString ( String source ) throws MarshalException <nl> + { <nl> + / / Return an empty ByteBuffer for an empty string . <nl> + if ( source . isEmpty ( ) ) <nl> + return ByteBufferUtil . EMPTY _ BYTE _ BUFFER ; <nl> + <nl> + int int32Type ; <nl> + <nl> + try <nl> + { <nl> + int32Type = Integer . parseInt ( source ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new MarshalException ( String . format ( " unable to make int from ' % s ' " , source ) , e ) ; <nl> + } <nl> + <nl> + return decompose ( int32Type ) ; <nl> + } <nl> + <nl> + public void validate ( ByteBuffer bytes ) throws MarshalException <nl> + { <nl> + if ( bytes . remaining ( ) ! = 4 & & bytes . remaining ( ) ! = 0 ) <nl> + throw new MarshalException ( String . format ( " Expected 4 or 0 byte int ( % d ) " , bytes . remaining ( ) ) ) ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / resources / org / apache / cassandra / cli / CliHelp . yaml b / src / resources / org / apache / cassandra / cli / CliHelp . yaml <nl> index ae6508e . . bf2fcde 100644 <nl> - - - a / src / resources / org / apache / cassandra / cli / CliHelp . yaml <nl> + + + b / src / resources / org / apache / cassandra / cli / CliHelp . yaml <nl> @ @ - 363 , 6 + 363 , 7 @ @ commands : <nl> - AsciiType <nl> - BytesType <nl> - CounterColumnType ( distributed counter column ) <nl> + - Int32Type <nl> - IntegerType ( a generic variable - length integer type ) <nl> - LexicalUUIDType <nl> - LongType <nl> @ @ - 401 , 6 + 402 , 7 @ @ commands : <nl> - AsciiType <nl> - BytesType <nl> - CounterColumnType ( distributed counter column ) <nl> + - Int32Type <nl> - IntegerType ( a generic variable - length integer type ) <nl> - LexicalUUIDType <nl> - LongType <nl> @ @ - 417 , 6 + 419 , 7 @ @ commands : <nl> - AsciiType <nl> - BytesType <nl> - CounterColumnType ( distributed counter column ) <nl> + - Int32Type <nl> - IntegerType ( a generic variable - length integer type ) <nl> - LexicalUUIDType <nl> - LongType <nl> @ @ - 431 , 6 + 434 , 7 @ @ commands : <nl> Supported values are : <nl> - AsciiType <nl> - BytesType <nl> + - Int32Type <nl> - IntegerType ( a generic variable - length integer type ) <nl> - LexicalUUIDType <nl> - LongType <nl> @ @ - 511 , 6 + 515 , 7 @ @ commands : <nl> - AsciiType <nl> - BytesType <nl> - CounterColumnType ( distributed counter column ) <nl> + - Int32Type <nl> - IntegerType ( a generic variable - length integer type ) <nl> - LexicalUUIDType <nl> - LongType <nl> @ @ - 626 , 6 + 631 , 7 @ @ commands : <nl> - AsciiType <nl> - BytesType <nl> - CounterColumnType ( distributed counter column ) <nl> + - Int32Type <nl> - IntegerType ( a generic variable - length integer type ) <nl> - LexicalUUIDType <nl> - LongType <nl> @ @ - 668 , 6 + 674 , 7 @ @ commands : <nl> - AsciiType <nl> - BytesType <nl> - CounterColumnType ( distributed counter column ) <nl> + - Int32Type <nl> - IntegerType ( a generic variable - length integer type ) <nl> - LexicalUUIDType <nl> - LongType <nl> @ @ - 684 , 6 + 691 , 7 @ @ commands : <nl> - AsciiType <nl> - BytesType <nl> - CounterColumnType ( distributed counter column ) <nl> + - Int32Type <nl> - IntegerType ( a generic variable - length integer type ) <nl> - LexicalUUIDType <nl> - LongType <nl> @ @ - 698 , 6 + 706 , 7 @ @ commands : <nl> Supported values are : <nl> - AsciiType <nl> - BytesType <nl> + - Int32Type <nl> - IntegerType ( a generic variable - length integer type ) <nl> - LexicalUUIDType <nl> - LongType <nl> @ @ - 778 , 6 + 787 , 7 @ @ commands : <nl> - AsciiType <nl> - BytesType <nl> - CounterColumnType ( distributed counter column ) <nl> + - Int32Type <nl> - IntegerType ( a generic variable - length integer type ) <nl> - LexicalUUIDType <nl> - LongType <nl> @ @ - 919 , 6 + 929 , 7 @ @ commands : <nl> Valid options are : <nl> - ascii <nl> - bytes : if used without arguments generates a zero length byte array <nl> + - int32 <nl> - integer <nl> - lexicaluuid : if used without arguments generates a new random uuid <nl> - long <nl> @ @ - 944 , 6 + 955 , 7 @ @ commands : <nl> - AsciiType <nl> - BytesType <nl> - CounterColumnType ( distributed counter column ) <nl> + - Int32Type <nl> - IntegerType ( a generic variable - length integer type ) <nl> - LexicalUUIDType <nl> - LongType <nl> @ @ - 987 , 6 + 999 , 7 @ @ commands : <nl> Valid options are : <nl> - ascii <nl> - bytes : if used without arguments generates a zero length byte array <nl> + - int32 <nl> - integer <nl> - lexicaluuid : if used without arguments generates a new random uuid <nl> - long <nl> @ @ - 1030 , 6 + 1043 , 7 @ @ commands : <nl> Supported values are : <nl> - ascii <nl> - bytes : if used without arguments generates a zero length byte array <nl> + - int32 <nl> - integer <nl> - lexicaluuid : if used without arguments generates a new random uuid <nl> - long <nl> @ @ - 1134 , 6 + 1148 , 7 @ @ commands : <nl> - ascii <nl> - bytes <nl> - counterColumn ( distributed counter column ) <nl> + - int32 <nl> - integer ( a generic variable - length integer type ) <nl> - lexicalUUID <nl> - long <nl> diff - - git a / test / unit / org / apache / cassandra / Util . java b / test / unit / org / apache / cassandra / Util . java <nl> index 702a2d7 . . 2d1a3c3 100644 <nl> - - - a / test / unit / org / apache / cassandra / Util . java <nl> + + + b / test / unit / org / apache / cassandra / Util . java <nl> @ @ - 103 , 6 + 103 , 15 @ @ public class Util <nl> return bb ; <nl> } <nl> <nl> + public static ByteBuffer getBytes ( int v ) <nl> + { <nl> + byte [ ] bytes = new byte [ 4 ] ; <nl> + ByteBuffer bb = ByteBuffer . wrap ( bytes ) ; <nl> + bb . putInt ( v ) ; <nl> + bb . rewind ( ) ; <nl> + return bb ; <nl> + } <nl> + <nl> public static List < Row > getRangeSlice ( ColumnFamilyStore cfs ) throws IOException , ExecutionException , InterruptedException <nl> { <nl> return getRangeSlice ( cfs , null ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java b / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java <nl> index 2727c9a . . 9d89d28 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java <nl> @ @ - 499 , 16 + 499 , 16 @ @ public class ColumnFamilyStoreTest extends CleanupHelper <nl> <nl> / / create an isolated sstable . <nl> putColsSuper ( cfs , key , scfName , <nl> - new Column ( getBytes ( 1 ) , ByteBufferUtil . bytes ( " val1 " ) , 1 ) , <nl> - new Column ( getBytes ( 2 ) , ByteBufferUtil . bytes ( " val2 " ) , 1 ) , <nl> - new Column ( getBytes ( 3 ) , ByteBufferUtil . bytes ( " val3 " ) , 1 ) ) ; <nl> + new Column ( getBytes ( 1L ) , ByteBufferUtil . bytes ( " val1 " ) , 1 ) , <nl> + new Column ( getBytes ( 2L ) , ByteBufferUtil . bytes ( " val2 " ) , 1 ) , <nl> + new Column ( getBytes ( 3L ) , ByteBufferUtil . bytes ( " val3 " ) , 1 ) ) ; <nl> cfs . forceBlockingFlush ( ) ; <nl> <nl> / / insert , don ' t flush . <nl> putColsSuper ( cfs , key , scfName , <nl> - new Column ( getBytes ( 4 ) , ByteBufferUtil . bytes ( " val4 " ) , 1 ) , <nl> - new Column ( getBytes ( 5 ) , ByteBufferUtil . bytes ( " val5 " ) , 1 ) , <nl> - new Column ( getBytes ( 6 ) , ByteBufferUtil . bytes ( " val6 " ) , 1 ) ) ; <nl> + new Column ( getBytes ( 4L ) , ByteBufferUtil . bytes ( " val4 " ) , 1 ) , <nl> + new Column ( getBytes ( 5L ) , ByteBufferUtil . bytes ( " val5 " ) , 1 ) , <nl> + new Column ( getBytes ( 6L ) , ByteBufferUtil . bytes ( " val6 " ) , 1 ) ) ; <nl> <nl> / / verify insert . <nl> final SlicePredicate sp = new SlicePredicate ( ) ; <nl> @ @ - 535 , 17 + 535 , 17 @ @ public class ColumnFamilyStoreTest extends CleanupHelper <nl> <nl> / / late insert . <nl> putColsSuper ( cfs , key , scfName , <nl> - new Column ( getBytes ( 4 ) , ByteBufferUtil . bytes ( " val4 " ) , 1L ) , <nl> - new Column ( getBytes ( 7 ) , ByteBufferUtil . bytes ( " val7 " ) , 1L ) ) ; <nl> + new Column ( getBytes ( 4L ) , ByteBufferUtil . bytes ( " val4 " ) , 1L ) , <nl> + new Column ( getBytes ( 7L ) , ByteBufferUtil . bytes ( " val7 " ) , 1L ) ) ; <nl> <nl> / / re - verify delete . <nl> assertRowAndColCount ( 1 , 0 , scfName , false , cfs . getRangeSlice ( scfName , Util . range ( " f " , " g " ) , 100 , QueryFilter . getFilter ( sp , cfs . getComparator ( ) ) ) ) ; <nl> <nl> / / make sure new writes are recognized . <nl> putColsSuper ( cfs , key , scfName , <nl> - new Column ( getBytes ( 3 ) , ByteBufferUtil . bytes ( " val3 " ) , 3 ) , <nl> - new Column ( getBytes ( 8 ) , ByteBufferUtil . bytes ( " val8 " ) , 3 ) , <nl> - new Column ( getBytes ( 9 ) , ByteBufferUtil . bytes ( " val9 " ) , 3 ) ) ; <nl> + new Column ( getBytes ( 3L ) , ByteBufferUtil . bytes ( " val3 " ) , 3 ) , <nl> + new Column ( getBytes ( 8L ) , ByteBufferUtil . bytes ( " val8 " ) , 3 ) , <nl> + new Column ( getBytes ( 9L ) , ByteBufferUtil . bytes ( " val9 " ) , 3 ) ) ; <nl> assertRowAndColCount ( 1 , 3 , scfName , false , cfs . getRangeSlice ( scfName , Util . range ( " f " , " g " ) , 100 , QueryFilter . getFilter ( sp , cfs . getComparator ( ) ) ) ) ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / db / RemoveSubColumnTest . java b / test / unit / org / apache / cassandra / db / RemoveSubColumnTest . java <nl> index c3f43f3a . . 7abcc59 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RemoveSubColumnTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RemoveSubColumnTest . java <nl> @ @ - 51 , 11 + 51 , 11 @ @ public class RemoveSubColumnTest extends CleanupHelper <nl> <nl> / / remove <nl> rm = new RowMutation ( " Keyspace1 " , dk . key ) ; <nl> - rm . delete ( new QueryPath ( " Super1 " , ByteBufferUtil . bytes ( " SC1 " ) , getBytes ( 1 ) ) , 1 ) ; <nl> + rm . delete ( new QueryPath ( " Super1 " , ByteBufferUtil . bytes ( " SC1 " ) , getBytes ( 1L ) ) , 1 ) ; <nl> rm . apply ( ) ; <nl> <nl> ColumnFamily retrieved = store . getColumnFamily ( QueryFilter . getIdentityFilter ( dk , new QueryPath ( " Super1 " , ByteBufferUtil . bytes ( " SC1 " ) ) ) ) ; <nl> - assert retrieved . getColumn ( ByteBufferUtil . bytes ( " SC1 " ) ) . getSubColumn ( getBytes ( 1 ) ) . isMarkedForDelete ( ) ; <nl> + assert retrieved . getColumn ( ByteBufferUtil . bytes ( " SC1 " ) ) . getSubColumn ( getBytes ( 1L ) ) . isMarkedForDelete ( ) ; <nl> assertNull ( Util . cloneAndRemoveDeleted ( retrieved , Integer . MAX _ VALUE ) ) ; <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java b / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java <nl> index 8a9541f . . 6b4abe4 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java <nl> @ @ - 85 , 7 + 85 , 7 @ @ public class RemoveSuperColumnTest extends CleanupHelper <nl> <nl> / / remove <nl> rm = new RowMutation ( " Keyspace1 " , dk . key ) ; <nl> - rm . delete ( new QueryPath ( " Super3 " , ByteBufferUtil . bytes ( " SC1 " ) , Util . getBytes ( 1 ) ) , 1 ) ; <nl> + rm . delete ( new QueryPath ( " Super3 " , ByteBufferUtil . bytes ( " SC1 " ) , Util . getBytes ( 1L ) ) , 1 ) ; <nl> rm . apply ( ) ; <nl> <nl> validateRemoveSubColumn ( dk ) ; <nl> @ @ - 97 , 9 + 97 , 9 @ @ public class RemoveSuperColumnTest extends CleanupHelper <nl> private void validateRemoveSubColumn ( DecoratedKey dk ) throws IOException <nl> { <nl> ColumnFamilyStore store = Table . open ( " Keyspace1 " ) . getColumnFamilyStore ( " Super3 " ) ; <nl> - ColumnFamily cf = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , new QueryPath ( " Super3 " , ByteBufferUtil . bytes ( " SC1 " ) ) , Util . getBytes ( 1 ) ) ) ; <nl> + ColumnFamily cf = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , new QueryPath ( " Super3 " , ByteBufferUtil . bytes ( " SC1 " ) ) , Util . getBytes ( 1L ) ) ) ; <nl> assertNull ( Util . cloneAndRemoveDeleted ( cf , Integer . MAX _ VALUE ) ) ; <nl> - cf = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , new QueryPath ( " Super3 " , ByteBufferUtil . bytes ( " SC1 " ) ) , Util . getBytes ( 2 ) ) ) ; <nl> + cf = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , new QueryPath ( " Super3 " , ByteBufferUtil . bytes ( " SC1 " ) ) , Util . getBytes ( 2L ) ) ) ; <nl> assertNotNull ( Util . cloneAndRemoveDeleted ( cf , Integer . MAX _ VALUE ) ) ; <nl> } <nl> <nl> @ @ - 162 , 7 + 162 , 7 @ @ public class RemoveSuperColumnTest extends CleanupHelper <nl> private void validateRemoveWithNewData ( DecoratedKey dk ) throws IOException <nl> { <nl> ColumnFamilyStore store = Table . open ( " Keyspace1 " ) . getColumnFamilyStore ( " Super2 " ) ; <nl> - ColumnFamily cf = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , new QueryPath ( " Super2 " , ByteBufferUtil . bytes ( " SC1 " ) ) , getBytes ( 2 ) ) ) ; <nl> + ColumnFamily cf = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , new QueryPath ( " Super2 " , ByteBufferUtil . bytes ( " SC1 " ) ) , getBytes ( 2L ) ) ) ; <nl> Collection < IColumn > subColumns = cf . getSortedColumns ( ) . iterator ( ) . next ( ) . getSubColumns ( ) ; <nl> assert subColumns . size ( ) = = 1 ; <nl> assert subColumns . iterator ( ) . next ( ) . timestamp ( ) = = 2 ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / TableTest . java b / test / unit / org / apache / cassandra / db / TableTest . java <nl> index da199c7 . . 3460adb 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / TableTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / TableTest . java <nl> @ @ - 41 , 7 + 41 , 7 @ @ import static org . apache . cassandra . Util . column ; <nl> import static org . apache . cassandra . Util . getBytes ; <nl> import org . apache . cassandra . Util ; <nl> import org . apache . cassandra . db . filter . QueryPath ; <nl> - import org . apache . cassandra . db . marshal . LongType ; <nl> + import org . apache . cassandra . db . marshal . Int32Type ; <nl> import org . apache . cassandra . io . sstable . IndexHelper ; <nl> import org . apache . cassandra . io . sstable . SSTableReader ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> @ @ - 487 , 7 + 487 , 7 @ @ public class TableTest extends CleanupHelper <nl> <nl> RowMutation rm = new RowMutation ( " Keyspace1 " , ROW . key ) ; <nl> ColumnFamily cf = ColumnFamily . create ( " Keyspace1 " , " Super1 " ) ; <nl> - SuperColumn sc = new SuperColumn ( ByteBufferUtil . bytes ( " sc1 " ) , LongType . instance ) ; <nl> + SuperColumn sc = new SuperColumn ( ByteBufferUtil . bytes ( " sc1 " ) , Int32Type . instance ) ; <nl> sc . addColumn ( new Column ( getBytes ( 1 ) , ByteBufferUtil . bytes ( " val1 " ) , 1L ) ) ; <nl> cf . addColumn ( sc ) ; <nl> rm . add ( cf ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java b / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java <nl> index 135a0af . . 87664eb 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java <nl> @ @ - 60 , 6 + 60 , 17 @ @ public class RoundTripTest <nl> } <nl> <nl> @ Test <nl> + public void intLong ( ) <nl> + { <nl> + byte [ ] v = new byte [ ] { 0 , 0 , 0 , 1 } ; <nl> + assert Int32Type . instance . getString ( Int32Type . instance . fromString ( " 1 " ) ) . equals ( " 1 " ) ; <nl> + assert Int32Type . instance . fromString ( Int32Type . instance . getString ( ByteBuffer . wrap ( v ) ) ) <nl> + . equals ( ByteBuffer . wrap ( v ) ) ; <nl> + assert Int32Type . instance . compose ( ByteBuffer . wrap ( v ) ) = = 1 ; <nl> + / / assert Int32Type . instance . toString ( 1 ) . equals ( " 1 " ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testAscii ( ) throws Exception <nl> { <nl> byte [ ] abc = " abc " . getBytes ( Charsets . US _ ASCII ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / marshal / TypeCompareTest . java b / test / unit / org / apache / cassandra / db / marshal / TypeCompareTest . java <nl> index 96502d2 . . 49bdf9c 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / marshal / TypeCompareTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / marshal / TypeCompareTest . java <nl> @ @ - 93 , 6 + 93 , 28 @ @ public class TypeCompareTest <nl> } <nl> <nl> @ Test <nl> + public void testInt ( ) <nl> + { <nl> + Random rng = new Random ( ) ; <nl> + ByteBuffer [ ] data = new ByteBuffer [ 1000 ] ; <nl> + for ( int i = 0 ; i < data . length ; i + + ) <nl> + { <nl> + data [ i ] = ByteBuffer . allocate ( 4 ) ; <nl> + rng . nextBytes ( data [ i ] . array ( ) ) ; <nl> + } <nl> + <nl> + Arrays . sort ( data , Int32Type . instance ) ; <nl> + <nl> + for ( int i = 1 ; i < data . length ; i + + ) <nl> + { <nl> + 	 <nl> + int l0 = data [ i - 1 ] . getInt ( data [ i - 1 ] . position ( ) ) ; <nl> + int l1 = data [ i ] . getInt ( data [ i ] . position ( ) ) ; <nl> + assert l0 < = l1 ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> public void testTimeUUID ( ) <nl> { <nl> / / two different UUIDs w / the same timestamp <nl> diff - - git a / test / unit / org / apache / cassandra / db / marshal / TypeValidationTest . java b / test / unit / org / apache / cassandra / db / marshal / TypeValidationTest . java <nl> index c2f9d38 . . f12a136 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / marshal / TypeValidationTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / marshal / TypeValidationTest . java <nl> @ @ - 52 , 11 + 52 , 18 @ @ public class TypeValidationTest <nl> @ Test <nl> public void testLong ( ) <nl> { <nl> - LongType . instance . validate ( Util . getBytes ( 5 ) ) ; <nl> + LongType . instance . validate ( Util . getBytes ( 5L ) ) ; <nl> LongType . instance . validate ( Util . getBytes ( 5555555555555555555L ) ) ; <nl> } <nl> <nl> @ Test <nl> + public void testInt ( ) <nl> + { <nl> + Int32Type . instance . validate ( Util . getBytes ( 5 ) ) ; <nl> + Int32Type . instance . validate ( Util . getBytes ( 2057022603 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testValidUtf8 ( ) throws UnsupportedEncodingException <nl> { <nl> assert Character . MAX _ CODE _ POINT = = 0x0010ffff ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e71b8c2 . . 87c3c6f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 
 + * Add ` smallint ` and ` tinyint ` data types ( CASSANDRA - 8951 ) 
 * Avoid thrift schema creation when native driver is used in stress tool ( CASSANDRA - 9374 ) 
 * Populate TokenMetadata early during startup ( CASSANDRA - 9317 ) 
 * Make Functions . declared thread - safe 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index c16b55a . . 4d77fa0 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 70 , 6 + 70 , 8 @ @ New features 
 In a QUERY request an unset limit is treated as ' unlimited ' . 
 Unset WHERE clauses with unset partition column , clustering column 
 or index column are not allowed . 
 + - New ` ByteType ` ( cql tinyint ) . 1 - byte signed integer 
 + - New ` ShortType ` ( cql smallint ) . 2 - byte signed integer 
 
 
 Upgrading 
 diff - - git a / doc / native _ protocol _ v4 . spec b / doc / native _ protocol _ v4 . spec 
 index 4014594 . . 0f86989 100644 
 - - - a / doc / native _ protocol _ v4 . spec 
 + + + b / doc / native _ protocol _ v4 . spec 
 @ @ - 598 , 6 + 598 , 8 @ @ Table of Contents 
 0x0010 Inet 
 0x0011 Date 
 0x0012 Time 
 + 0x0013 Smallint 
 + 0x0014 Tinyint 
 0x0020 List : the value is an [ option ] , representing the type 
 of the elements of the list . 
 0x0021 Map : the value is two [ option ] , representing the types of the 
 @ @ - 888 , 25 + 890 , 47 @ @ Table of Contents 
 A [ int ] n indicating the number of elements in the set , followed by n 
 elements . Each element is [ bytes ] representing the serialized value . 
 
 - 6 . 13 text 
 + 6 . 13 smallint 
 + 
 + A two - byte two ' s complement integer . 
 + 
 + 
 + 6 . 14 text 
 
 A sequence of bytes conforming to the UTF - 8 specifications . 
 
 - 6 . 14 timestamp 
 + 6 . 15 timestamp 
 
 An eight - byte two ' s complement integer representing a millisecond - precision 
 offset from the unix epoch ( 00 : 00 : 00 , January 1st , 1970 ) . Negative values 
 represent a negative offset from the epoch . 
 
 - 6 . 15 uuid 
 + 6 . 16 timeuuid 
 + 
 + A 16 byte sequence representing a version 1 UUID as defined by RFC 4122 . 
 + 
 + 6 . 17 tinyint 
 + 
 + A one - byte two ' s complement integer . 
 + 
 + 6 . 18 tuple 
 + 
 + A sequence of [ bytes ] values representing the items in a tuple . The encoding 
 + of each element depends on the data type for that position in the tuple . 
 + Null values may be represented by using length - 1 for the [ bytes ] 
 + representation of an element . 
 + 
 + Within a tuple , all data types should use the v3 protocol serialization format . 
 + 
 + 6 . 19 uuid 
 
 A 16 byte sequence representing any valid UUID as defined by RFC 4122 . 
 
 - 6 . 16 varchar 
 + 6 . 20 varchar 
 
 An alias of the " text " type . 
 
 - 6 . 17 varint 
 + 6 . 21 varint 
 
 A variable - length two ' s complement encoding of a signed integer . 
 
 @ @ - 928 , 20 + 952 , 6 @ @ Table of Contents 
 value . Implementors should pad positive values that have a MSB > = 0x80 
 with a leading 0x00 byte . 
 
 - 6 . 18 timeuuid 
 - 
 - A 16 byte sequence representing a version 1 UUID as defined by RFC 4122 . 
 - 
 - 6 . 19 tuple 
 - 
 - A sequence of [ bytes ] values representing the items in a tuple . The encoding 
 - of each element depends on the data type for that position in the tuple . 
 - Null values may be represented by using length - 1 for the [ bytes ] 
 - representation of an element . 
 - 
 - Within a tuple , all data types should use the v3 protocol serialization format . 
 - 
 - 
 7 . User Defined Types 
 
 This section describes the serialization format for User defined types ( UDT ) , 
 @ @ - 1141 , 3 + 1151 , 4 @ @ Table of Contents 
 * Add custom payload to frames for custom QueryHandler implementations ( ignored by Cassandra ' s standard QueryHandler ) 
 * Add " TRACE _ COMPLETE " event ( section 4 . 2 . 6 ) . 
 * Add warnings to frames for responses for which the server generated a warning during processing , which the client needs to address . 
 + * Add the tinyint and smallint data types 
 diff - - git a / src / java / org / apache / cassandra / cql3 / CQL3Type . java b / src / java / org / apache / cassandra / cql3 / CQL3Type . java 
 index 362f1f8 . . fb2716e 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / CQL3Type . java 
 + + + b / src / java / org / apache / cassandra / cql3 / CQL3Type . java 
 @ @ - 48 , 8 + 48 , 10 @ @ public interface CQL3Type 
 FLOAT ( FloatType . instance ) , 
 INET ( InetAddressType . instance ) , 
 INT ( Int32Type . instance ) , 
 + SMALLINT ( ShortType . instance ) , 
 TEXT ( UTF8Type . instance ) , 
 TIMESTAMP ( TimestampType . instance ) , 
 + TINYINT ( ByteType . instance ) , 
 UUID ( UUIDType . instance ) , 
 VARCHAR ( UTF8Type . instance ) , 
 VARINT ( IntegerType . instance ) , 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Constants . java b / src / java / org / apache / cassandra / cql3 / Constants . java 
 index a0eff94 . . 07b848c 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Constants . java 
 + + + b / src / java / org / apache / cassandra / cql3 / Constants . java 
 @ @ - 198 , 7 + 198 , 9 @ @ public abstract class Constants 
 case DOUBLE : 
 case FLOAT : 
 case INT : 
 + case SMALLINT : 
 case TIMESTAMP : 
 + case TINYINT : 
 case VARINT : 
 return AssignmentTestable . TestResult . WEAKLY _ ASSIGNABLE ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g 
 index bd47825 . . 831b012 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Cql . g 
 + + + b / src / java / org / apache / cassandra / cql3 / Cql . g 
 @ @ - 56 , 7 + 56 , 6 @ @ options { 
 public static final Set < String > reservedTypeNames = new HashSet < String > ( ) 
 { { 
 add ( " byte " ) ; 
 - add ( " smallint " ) ; 
 add ( " complex " ) ; 
 add ( " enum " ) ; 
 add ( " date " ) ; 
 @ @ - 1453 , 8 + 1452 , 10 @ @ native _ type returns [ CQL3Type t ] 
 | K _ FLOAT { $ t = CQL3Type . Native . FLOAT ; } 
 | K _ INET { $ t = CQL3Type . Native . INET ; } 
 | K _ INT { $ t = CQL3Type . Native . INT ; } 
 + | K _ SMALLINT { $ t = CQL3Type . Native . SMALLINT ; } 
 | K _ TEXT { $ t = CQL3Type . Native . TEXT ; } 
 | K _ TIMESTAMP { $ t = CQL3Type . Native . TIMESTAMP ; } 
 + | K _ TINYINT { $ t = CQL3Type . Native . TINYINT ; } 
 | K _ UUID { $ t = CQL3Type . Native . UUID ; } 
 | K _ VARCHAR { $ t = CQL3Type . Native . VARCHAR ; } 
 | K _ VARINT { $ t = CQL3Type . Native . VARINT ; } 
 @ @ - 1643 , 6 + 1644 , 8 @ @ K _ DOUBLE : D O U B L E ; 
 K _ FLOAT : F L O A T ; 
 K _ INET : I N E T ; 
 K _ INT : I N T ; 
 + K _ SMALLINT : S M A L L I N T ; 
 + K _ TINYINT : T I N Y I N T ; 
 K _ TEXT : T E X T ; 
 K _ UUID : U U I D ; 
 K _ VARCHAR : V A R C H A R ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / UntypedResultSet . java b / src / java / org / apache / cassandra / cql3 / UntypedResultSet . java 
 index 072d3b7 . . bf3cbb5 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / UntypedResultSet . java 
 + + + b / src / java / org / apache / cassandra / cql3 / UntypedResultSet . java 
 @ @ - 229 , 6 + 229 , 16 @ @ public abstract class UntypedResultSet implements Iterable < UntypedResultSet . Row > 
 return BooleanType . instance . compose ( data . get ( column ) ) ; 
 } 
 
 + public byte getByte ( String column ) 
 + { 
 + return ByteType . instance . compose ( data . get ( column ) ) ; 
 + } 
 + 
 + public short getShort ( String column ) 
 + { 
 + return ShortType . instance . compose ( data . get ( column ) ) ; 
 + } 
 + 
 public int getInt ( String column ) 
 { 
 return Int32Type . instance . compose ( data . get ( column ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / ByteType . java b / src / java / org / apache / cassandra / db / marshal / ByteType . java 
 new file mode 100644 
 index 0000000 . . b63b92e 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / db / marshal / ByteType . java 
 @ @ - 0 , 0 + 1 , 100 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . db . marshal ; 
 + 
 + import java . nio . ByteBuffer ; 
 + 
 + import org . apache . cassandra . cql3 . CQL3Type ; 
 + import org . apache . cassandra . cql3 . Constants ; 
 + import org . apache . cassandra . cql3 . Term ; 
 + import org . apache . cassandra . serializers . ByteSerializer ; 
 + import org . apache . cassandra . serializers . MarshalException ; 
 + import org . apache . cassandra . serializers . TypeSerializer ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + 
 + public class ByteType extends AbstractType < Byte > 
 + { 
 + public static final ByteType instance = new ByteType ( ) ; 
 + 
 + ByteType ( ) 
 + { 
 + } / / singleton 
 + 
 + public int compare ( ByteBuffer o1 , ByteBuffer o2 ) 
 + { 
 + return o1 . get ( o1 . position ( ) ) - o2 . get ( o2 . position ( ) ) ; 
 + } 
 + 
 + public ByteBuffer fromString ( String source ) throws MarshalException 
 + { 
 + / / Return an empty ByteBuffer for an empty string . 
 + if ( source . isEmpty ( ) ) 
 + return ByteBufferUtil . EMPTY _ BYTE _ BUFFER ; 
 + 
 + byte b ; 
 + 
 + try 
 + { 
 + b = Byte . parseByte ( source ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new MarshalException ( String . format ( " Unable to make byte from ' % s ' " , source ) , e ) ; 
 + } 
 + 
 + return decompose ( b ) ; 
 + } 
 + 
 + public Term fromJSONObject ( Object parsed ) throws MarshalException 
 + { 
 + try 
 + { 
 + if ( parsed instanceof String ) 
 + return new Constants . Value ( fromString ( ( String ) parsed ) ) ; 
 + 
 + Number parsedNumber = ( Number ) parsed ; 
 + if ( ! ( parsedNumber instanceof Byte ) ) 
 + throw new MarshalException ( String . format ( " Expected a byte value , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; 
 + 
 + return new Constants . Value ( getSerializer ( ) . serialize ( parsedNumber . byteValue ( ) ) ) ; 
 + } 
 + catch ( ClassCastException exc ) 
 + { 
 + throw new MarshalException ( String . format ( 
 + " Expected a byte value , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public String toJSONString ( ByteBuffer buffer , int protocolVersion ) 
 + { 
 + return getSerializer ( ) . deserialize ( buffer ) . toString ( ) ; 
 + } 
 + 
 + @ Override 
 + public CQL3Type asCQL3Type ( ) 
 + { 
 + return CQL3Type . Native . TINYINT ; 
 + } 
 + 
 + @ Override 
 + public TypeSerializer < Byte > getSerializer ( ) 
 + { 
 + return ByteSerializer . instance ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / ShortType . java b / src / java / org / apache / cassandra / db / marshal / ShortType . java 
 new file mode 100644 
 index 0000000 . . 43e8f5e 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / db / marshal / ShortType . java 
 @ @ - 0 , 0 + 1 , 103 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . db . marshal ; 
 + 
 + import java . nio . ByteBuffer ; 
 + 
 + import org . apache . cassandra . cql3 . CQL3Type ; 
 + import org . apache . cassandra . cql3 . Constants ; 
 + import org . apache . cassandra . cql3 . Term ; 
 + import org . apache . cassandra . serializers . MarshalException ; 
 + import org . apache . cassandra . serializers . ShortSerializer ; 
 + import org . apache . cassandra . serializers . TypeSerializer ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + 
 + public class ShortType extends AbstractType < Short > 
 + { 
 + public static final ShortType instance = new ShortType ( ) ; 
 + 
 + ShortType ( ) 
 + { 
 + } / / singleton 
 + 
 + public int compare ( ByteBuffer o1 , ByteBuffer o2 ) 
 + { 
 + int diff = o1 . get ( o1 . position ( ) ) - o2 . get ( o2 . position ( ) ) ; 
 + if ( diff ! = 0 ) 
 + return diff ; 
 + 
 + return ByteBufferUtil . compareUnsigned ( o1 , o2 ) ; 
 + } 
 + 
 + public ByteBuffer fromString ( String source ) throws MarshalException 
 + { 
 + / / Return an empty ByteBuffer for an empty string . 
 + if ( source . isEmpty ( ) ) 
 + return ByteBufferUtil . EMPTY _ BYTE _ BUFFER ; 
 + 
 + short s ; 
 + 
 + try 
 + { 
 + s = Short . parseShort ( source ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new MarshalException ( String . format ( " Unable to make short from ' % s ' " , source ) , e ) ; 
 + } 
 + 
 + return decompose ( s ) ; 
 + } 
 + 
 + public Term fromJSONObject ( Object parsed ) throws MarshalException 
 + { 
 + try 
 + { 
 + if ( parsed instanceof String ) 
 + return new Constants . Value ( fromString ( ( String ) parsed ) ) ; 
 + 
 + Number parsedNumber = ( Number ) parsed ; 
 + if ( ! ( parsedNumber instanceof Short ) ) 
 + throw new MarshalException ( String . format ( " Expected a short value , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; 
 + 
 + return new Constants . Value ( getSerializer ( ) . serialize ( parsedNumber . shortValue ( ) ) ) ; 
 + } 
 + catch ( ClassCastException exc ) 
 + { 
 + throw new MarshalException ( String . format ( 
 + " Expected a short value , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public String toJSONString ( ByteBuffer buffer , int protocolVersion ) 
 + { 
 + return getSerializer ( ) . deserialize ( buffer ) . toString ( ) ; 
 + } 
 + 
 + @ Override 
 + public CQL3Type asCQL3Type ( ) 
 + { 
 + return CQL3Type . Native . SMALLINT ; 
 + } 
 + 
 + public TypeSerializer < Short > getSerializer ( ) 
 + { 
 + return ShortSerializer . instance ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / serializers / ByteSerializer . java b / src / java / org / apache / cassandra / serializers / ByteSerializer . java 
 new file mode 100644 
 index 0000000 . . 8c736cb 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / serializers / ByteSerializer . java 
 @ @ - 0 , 0 + 1 , 54 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . serializers ; 
 + 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + 
 + import java . nio . ByteBuffer ; 
 + 
 + public class ByteSerializer implements TypeSerializer < Byte > 
 + { 
 + public static final ByteSerializer instance = new ByteSerializer ( ) ; 
 + 
 + public Byte deserialize ( ByteBuffer bytes ) 
 + { 
 + return bytes . remaining ( ) = = 0 ? null : bytes . get ( bytes . position ( ) ) ; 
 + } 
 + 
 + public ByteBuffer serialize ( Byte value ) 
 + { 
 + return value = = null ? ByteBufferUtil . EMPTY _ BYTE _ BUFFER : ByteBuffer . allocate ( 1 ) . put ( 0 , value ) ; 
 + } 
 + 
 + public void validate ( ByteBuffer bytes ) throws MarshalException 
 + { 
 + if ( bytes . remaining ( ) ! = 1 ) 
 + throw new MarshalException ( String . format ( " Expected 1 byte for a tinyint ( % d ) " , bytes . remaining ( ) ) ) ; 
 + } 
 + 
 + public String toString ( Byte value ) 
 + { 
 + return value = = null ? " " : String . valueOf ( value ) ; 
 + } 
 + 
 + public Class < Byte > getType ( ) 
 + { 
 + return Byte . class ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / serializers / ShortSerializer . java b / src / java / org / apache / cassandra / serializers / ShortSerializer . java 
 new file mode 100644 
 index 0000000 . . f12affa 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / serializers / ShortSerializer . java 
 @ @ - 0 , 0 + 1 , 54 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . serializers ; 
 + 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + 
 + import java . nio . ByteBuffer ; 
 + 
 + public class ShortSerializer implements TypeSerializer < Short > 
 + { 
 + public static final ShortSerializer instance = new ShortSerializer ( ) ; 
 + 
 + public Short deserialize ( ByteBuffer bytes ) 
 + { 
 + return bytes . remaining ( ) = = 0 ? null : ByteBufferUtil . toShort ( bytes ) ; 
 + } 
 + 
 + public ByteBuffer serialize ( Short value ) 
 + { 
 + return value = = null ? ByteBufferUtil . EMPTY _ BYTE _ BUFFER : ByteBufferUtil . bytes ( value . shortValue ( ) ) ; 
 + } 
 + 
 + public void validate ( ByteBuffer bytes ) throws MarshalException 
 + { 
 + if ( bytes . remaining ( ) ! = 2 ) 
 + throw new MarshalException ( String . format ( " Expected 2 bytes for a smallint ( % d ) " , bytes . remaining ( ) ) ) ; 
 + } 
 + 
 + public String toString ( Short value ) 
 + { 
 + return value = = null ? " " : String . valueOf ( value ) ; 
 + } 
 + 
 + public Class < Short > getType ( ) 
 + { 
 + return Short . class ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / transport / DataType . java b / src / java / org / apache / cassandra / transport / DataType . java 
 index a78b740 . . e3eaf32 100644 
 - - - a / src / java / org / apache / cassandra / transport / DataType . java 
 + + + b / src / java / org / apache / cassandra / transport / DataType . java 
 @ @ - 53 , 13 + 53 , 14 @ @ public enum DataType implements OptionCodec . Codecable < DataType > 
 INET ( 16 , InetAddressType . instance , 1 ) , 
 DATE ( 17 , SimpleDateType . instance , 4 ) , 
 TIME ( 18 , TimeType . instance , 4 ) , 
 + SMALLINT ( 19 , ShortType . instance , 4 ) , 
 + BYTE ( 20 , ByteType . instance , 4 ) , 
 LIST ( 32 , null , 1 ) , 
 MAP ( 33 , null , 1 ) , 
 SET ( 34 , null , 1 ) , 
 UDT ( 48 , null , 3 ) , 
 TUPLE ( 49 , null , 3 ) ; 
 
 - 
 public static final OptionCodec < DataType > codec = new OptionCodec < DataType > ( DataType . class ) ; 
 
 private final int id ; 
 diff - - git a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java 
 index 4fea55e . . 1831c19 100644 
 - - - a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java 
 + + + b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java 
 @ @ - 383 , 6 + 383 , 18 @ @ public class ByteBufferUtil 
 return bytes . getInt ( bytes . position ( ) ) ; 
 } 
 
 + / * * 
 + * Convert a byte buffer to a short . 
 + * Does not change the byte buffer position . 
 + * 
 + * @ param bytes byte buffer to convert to short 
 + * @ return short representation of the byte buffer 
 + * / 
 + public static short toShort ( ByteBuffer bytes ) 
 + { 
 + return bytes . getShort ( bytes . position ( ) ) ; 
 + } 
 + 
 public static long toLong ( ByteBuffer bytes ) 
 { 
 return bytes . getLong ( bytes . position ( ) ) ; 
 @ @ - 398 , 6 + 410 , 11 @ @ public class ByteBufferUtil 
 return bytes . getDouble ( bytes . position ( ) ) ; 
 } 
 
 + public static ByteBuffer bytes ( short s ) 
 + { 
 + return ByteBuffer . allocate ( 2 ) . putShort ( 0 , s ) ; 
 + } 
 + 
 public static ByteBuffer bytes ( int i ) 
 { 
 return ByteBuffer . allocate ( 4 ) . putInt ( 0 , i ) ; 
 diff - - git a / test / unit / org / apache / cassandra / Util . java b / test / unit / org / apache / cassandra / Util . java 
 index 4ebd0b5 . . 9b8e5df 100644 
 - - - a / test / unit / org / apache / cassandra / Util . java 
 + + + b / test / unit / org / apache / cassandra / Util . java 
 @ @ - 179 , 6 + 179 , 24 @ @ public class Util 
 return bb ; 
 } 
 
 + public static ByteBuffer getBytes ( short v ) 
 + { 
 + byte [ ] bytes = new byte [ 2 ] ; 
 + ByteBuffer bb = ByteBuffer . wrap ( bytes ) ; 
 + bb . putShort ( v ) ; 
 + bb . rewind ( ) ; 
 + return bb ; 
 + } 
 + 
 + public static ByteBuffer getBytes ( byte v ) 
 + { 
 + byte [ ] bytes = new byte [ 1 ] ; 
 + ByteBuffer bb = ByteBuffer . wrap ( bytes ) ; 
 + bb . put ( v ) ; 
 + bb . rewind ( ) ; 
 + return bb ; 
 + } 
 + 
 public static List < Row > getRangeSlice ( ColumnFamilyStore cfs ) 
 { 
 return getRangeSlice ( cfs , null ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 index c318717 . . c37767c 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 @ @ - 1017 , 6 + 1017 , 12 @ @ public abstract class CQLTester 
 if ( value instanceof ByteBuffer | | value instanceof TupleValue | | value = = null ) 
 return BytesType . instance ; 
 
 + if ( value instanceof Byte ) 
 + return ByteType . instance ; 
 + 
 + if ( value instanceof Short ) 
 + return ShortType . instance ; 
 + 
 if ( value instanceof Integer ) 
 return Int32Type . instance ; 
 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / CreateTableTest . java b / test / unit / org / apache / cassandra / cql3 / CreateTableTest . java 
 index 14d2c2b . . d14e87b 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / CreateTableTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / CreateTableTest . java 
 @ @ - 19 , 6 + 19 , 8 @ @ package org . apache . cassandra . cql3 ; 
 
 import org . junit . Test ; 
 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + 
 import static junit . framework . Assert . assertFalse ; 
 
 public class CreateTableTest extends CQLTester 
 @ @ - 29 , 4 + 31 , 39 @ @ public class CreateTableTest extends CQLTester 
 createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) ; " ) ; 
 assertFalse ( currentTableMetadata ( ) . isThriftCompatible ( ) ) ; 
 } 
 + 
 + @ Test 
 + public void testCreateTableWithSmallintColumns ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a text , b smallint , c smallint , primary key ( a , b ) ) ; " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ' 1 ' , 1 , 2 ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , " 2 " , Short . MAX _ VALUE , Short . MIN _ VALUE ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s " ) , 
 + row ( " 1 " , ( short ) 1 , ( short ) 2 ) , 
 + row ( " 2 " , Short . MAX _ VALUE , Short . MIN _ VALUE ) ) ; 
 + 
 + assertInvalidMessage ( " Expected 2 bytes for a smallint ( 4 ) " , 
 + " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , " 3 " , 1 , 2 ) ; 
 + assertInvalidMessage ( " Expected 2 bytes for a smallint ( 0 ) " , 
 + " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , " 3 " , ( short ) 1 , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ; 
 + } 
 + 
 + @ Test 
 + public void testCreateTinyintColumns ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a text , b tinyint , c tinyint , primary key ( a , b ) ) ; " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ' 1 ' , 1 , 2 ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , " 2 " , Byte . MAX _ VALUE , Byte . MIN _ VALUE ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s " ) , 
 + row ( " 1 " , ( byte ) 1 , ( byte ) 2 ) , 
 + row ( " 2 " , Byte . MAX _ VALUE , Byte . MIN _ VALUE ) ) ; 
 + 
 + assertInvalidMessage ( " Expected 1 byte for a tinyint ( 4 ) " , 
 + " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , " 3 " , 1 , 2 ) ; 
 + 
 + assertInvalidMessage ( " Expected 1 byte for a tinyint ( 0 ) " , 
 + " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , " 3 " , ( byte ) 1 , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ; 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / marshal / TypeCompareTest . java b / test / unit / org / apache / cassandra / db / marshal / TypeCompareTest . java 
 index 04b030e . . fae04a2 100644 
 - - - a / test / unit / org / apache / cassandra / db / marshal / TypeCompareTest . java 
 + + + b / test / unit / org / apache / cassandra / db / marshal / TypeCompareTest . java 
 @ @ - 93 , 6 + 93 , 48 @ @ public class TypeCompareTest 
 } 
 
 @ Test 
 + public void testByte ( ) 
 + { 
 + Random rng = new Random ( ) ; 
 + ByteBuffer [ ] data = new ByteBuffer [ Byte . MAX _ VALUE ] ; 
 + for ( int i = 0 ; i < data . length ; i + + ) 
 + { 
 + data [ i ] = ByteBuffer . allocate ( 1 ) ; 
 + rng . nextBytes ( data [ i ] . array ( ) ) ; 
 + } 
 + 
 + Arrays . sort ( data , ByteType . instance ) ; 
 + 
 + for ( int i = 1 ; i < data . length ; i + + ) 
 + { 
 + byte b0 = data [ i - 1 ] . get ( data [ i - 1 ] . position ( ) ) ; 
 + byte b1 = data [ i ] . get ( data [ i ] . position ( ) ) ; 
 + assert b0 < = b1 ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testShort ( ) 
 + { 
 + Random rng = new Random ( ) ; 
 + ByteBuffer [ ] data = new ByteBuffer [ 1000 ] ; 
 + for ( int i = 0 ; i < data . length ; i + + ) 
 + { 
 + data [ i ] = ByteBuffer . allocate ( 2 ) ; 
 + rng . nextBytes ( data [ i ] . array ( ) ) ; 
 + } 
 + 
 + Arrays . sort ( data , ShortType . instance ) ; 
 + 
 + for ( int i = 1 ; i < data . length ; i + + ) 
 + { 
 + short s0 = data [ i - 1 ] . getShort ( data [ i - 1 ] . position ( ) ) ; 
 + short s1 = data [ i ] . getShort ( data [ i ] . position ( ) ) ; 
 + assert s0 < = s1 ; 
 + } 
 + } 
 + 
 + @ Test 
 public void testInt ( ) 
 { 
 Random rng = new Random ( ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / marshal / TypeParserTest . java b / test / unit / org / apache / cassandra / db / marshal / TypeParserTest . java 
 index 5a697be . . 6581fc7 100644 
 - - - a / test / unit / org / apache / cassandra / db / marshal / TypeParserTest . java 
 + + + b / test / unit / org / apache / cassandra / db / marshal / TypeParserTest . java 
 @ @ - 40 , 6 + 40 , 12 @ @ public class TypeParserTest 
 type = TypeParser . parse ( " " ) ; 
 assert type = = BytesType . instance ; 
 
 + type = TypeParser . parse ( " ByteType " ) ; 
 + assert type = = ByteType . instance ; 
 + 
 + type = TypeParser . parse ( " ShortType " ) ; 
 + assert type = = ShortType . instance ; 
 + 
 type = TypeParser . parse ( " LongType " ) ; 
 assert type = = LongType . instance ; 
 
 diff - - git a / test / unit / org / apache / cassandra / db / marshal / TypeValidationTest . java b / test / unit / org / apache / cassandra / db / marshal / TypeValidationTest . java 
 index ed5e2bf . . 5ebeb64 100644 
 - - - a / test / unit / org / apache / cassandra / db / marshal / TypeValidationTest . java 
 + + + b / test / unit / org / apache / cassandra / db / marshal / TypeValidationTest . java 
 @ @ - 65 , 6 + 65 , 32 @ @ public class TypeValidationTest 
 } 
 
 @ Test 
 + public void testValidShort ( ) 
 + { 
 + ShortType . instance . validate ( Util . getBytes ( ( short ) 5 ) ) ; 
 + ShortType . instance . validate ( Util . getBytes ( Short . MAX _ VALUE ) ) ; 
 + } 
 + 
 + @ Test ( expected = MarshalException . class ) 
 + public void testInvalidShort ( ) 
 + { 
 + ShortType . instance . validate ( Util . getBytes ( 2057022603 ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testValidByte ( ) 
 + { 
 + ByteType . instance . validate ( Util . getBytes ( ( byte ) 5 ) ) ; 
 + ByteType . instance . validate ( Util . getBytes ( Byte . MAX _ VALUE ) ) ; 
 + } 
 + 
 + @ Test ( expected = MarshalException . class ) 
 + public void testInvalidByte ( ) 
 + { 
 + ByteType . instance . validate ( Util . getBytes ( 2057022603 ) ) ; 
 + } 
 + 
 + @ Test 
 public void testValidUtf8 ( ) throws UnsupportedEncodingException 
 { 
 assert Character . MAX _ CODE _ POINT = = 0x0010ffff ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 3efd319 . . e051b06 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 72 , 7 + 72 , 7 @ @ 
 ( CASSANDRA - 3148 ) 
 * fix inconsistency of the CLI syntax when { } should be used instead of [ { } ] 
 ( CASSANDRA - 3119 ) 
 - * rename CQL type names to match expected SQL behavior ( CASSANDRA - 3149 ) 
 + * rename CQL type names to match expected SQL behavior ( CASSANDRA - 3149 , 3031 ) 
 * Arena - based allocation for memtables ( CASSANDRA - 2252 , 3162 ) 
 
 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index e0a906b . . b0cfcda 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 9 , 7 + 9 , 8 @ @ Upgrading 
 cassandra . yaml ( use compaction _ throughput _ mb _ per _ sec to throttle 
 compaction instead ) 
 - CQL types bytea and date were renamed to blob and timestamp , respectively , 
 - to conform with SQL norms 
 + to conform with SQL norms . CQL type int is now a 4 - byte int , not 8 
 + ( which is still available as bigint ) . 
 
 Features 
 - - - - - - - - 
 diff - - git a / doc / cql / CQL . textile b / doc / cql / CQL . textile 
 index b8a5f8a . . 60759db 100644 
 - - - a / doc / cql / CQL . textile 
 + + + b / doc / cql / CQL . textile 
 @ @ - 273 , 6 + 273 , 7 @ @ It is possible to assign columns a type during column family creation . Columns 
 | decimal | Variable - precision decimal | 
 | double | 8 - byte floating point | 
 | float | 4 - byte floating point | 
 + | int | 4 - byte int | 
 | text | UTF8 encoded string | 
 | timestamp | Date + Time , encoded as 8 bytes since epoch | 
 | uuid | Type 1 , or type 4 UUID | 
 @ @ - 384 , 6 + 385 , 9 @ @ Versioning of the CQL language adheres to the " Semantic Versioning " : http : / / semve 
 h1 . Changes 
 
 pre . 
 + Fri , 09 Sep 2011 11 : 43 : 00 - 0500 - Jonathan Ellis 
 + * add int data type 
 + 
 Wed , 07 Sep 2011 09 : 01 : 00 - 0500 - Jonathan Ellis 
 * Updated version to 2 . 0 ; Documented row - based count ( ) 
 * Updated list of supported data types 
 diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java 
 index 8aba7e7 . . c53bb53 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliClient . java 
 + + + b / src / java / org / apache / cassandra / cli / CliClient . java 
 @ @ - 66 , 6 + 66 , 7 @ @ public class CliClient 
 BYTES ( BytesType . instance ) , 
 INTEGER ( IntegerType . instance ) , 
 LONG ( LongType . instance ) , 
 + INT ( Int32Type . instance ) , 
 LEXICALUUID ( LexicalUUIDType . instance ) , 
 TIMEUUID ( TimeUUIDType . instance ) , 
 UTF8 ( UTF8Type . instance ) , 
 diff - - git a / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java b / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java 
 index b31c98e . . 7bcae18 100644 
 - - - a / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java 
 + + + b / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java 
 @ @ - 71 , 7 + 71 , 7 @ @ public class CreateColumnFamilyStatement 
 comparators . put ( " decimal " , " DecimalType " ) ; 
 comparators . put ( " double " , " DoubleType " ) ; 
 comparators . put ( " float " , " FloatType " ) ; 
 - / / comparators . put ( " int " , " LongType " ) ; TODO add int - > Int32Type 
 + comparators . put ( " int " , " Int32Type " ) ; 
 comparators . put ( " text " , " UTF8Type " ) ; 
 comparators . put ( " timestamp " , " DateType " ) ; 
 comparators . put ( " uuid " , " UUIDType " ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql / jdbc / JdbcInt32 . java b / src / java / org / apache / cassandra / cql / jdbc / JdbcInt32 . java 
 new file mode 100644 
 index 0000000 . . 21bdc33 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cql / jdbc / JdbcInt32 . java 
 @ @ - 0 , 0 + 1 , 100 @ @ 
 + package org . apache . cassandra . cql . jdbc ; 
 + / * 
 + * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * 
 + * / 
 + 
 + 
 + import java . nio . ByteBuffer ; 
 + import java . sql . Types ; 
 + 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + 
 + public class JdbcInt32 extends AbstractJdbcType < Integer > 
 + { 
 + public static final JdbcInt32 instance = new JdbcInt32 ( ) ; 
 + 
 + JdbcInt32 ( ) 
 + { 
 + } 
 + 
 + public boolean isCaseSensitive ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + public int getScale ( Integer obj ) 
 + { 
 + return 0 ; 
 + } 
 + 
 + public int getPrecision ( Integer obj ) 
 + { 
 + return obj . toString ( ) . length ( ) ; 
 + } 
 + 
 + public boolean isCurrency ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + public boolean isSigned ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + public String toString ( Integer obj ) 
 + { 
 + return obj . toString ( ) ; 
 + } 
 + 
 + public boolean needsQuotes ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + public String getString ( ByteBuffer bytes ) 
 + { 
 + if ( bytes . remaining ( ) = = 0 ) 
 + { 
 + return " " ; 
 + } 
 + if ( bytes . remaining ( ) ! = 4 ) 
 + { 
 + throw new MarshalException ( " A int is exactly 4 bytes : " + bytes . remaining ( ) ) ; 
 + } 
 + 
 + return String . valueOf ( bytes . getInt ( bytes . position ( ) ) ) ; 
 + } 
 + 
 + public Class < Integer > getType ( ) 
 + { 
 + return Integer . class ; 
 + } 
 + 
 + public int getJdbcType ( ) 
 + { 
 + return Types . INTEGER ; 
 + } 
 + 
 + public Integer compose ( ByteBuffer bytes ) 
 + { 
 + return ByteBufferUtil . toInt ( bytes ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / cql / jdbc / JdbcLong . java b / src / java / org / apache / cassandra / cql / jdbc / JdbcLong . java 
 index 68ff4b0 . . b6c6e27 100644 
 - - - a / src / java / org / apache / cassandra / cql / jdbc / JdbcLong . java 
 + + + b / src / java / org / apache / cassandra / cql / jdbc / JdbcLong . java 
 @ @ - 90 , 7 + 90 , 7 @ @ public class JdbcLong extends AbstractJdbcType < Long > 
 
 public int getJdbcType ( ) 
 { 
 - return Types . INTEGER ; 
 + return Types . BIGINT ; 
 } 
 
 public Long compose ( ByteBuffer bytes ) 
 diff - - git a / src / java / org / apache / cassandra / cql / jdbc / TypesMap . java b / src / java / org / apache / cassandra / cql / jdbc / TypesMap . java 
 index 27b487c . . 94ff9a3 100644 
 - - - a / src / java / org / apache / cassandra / cql / jdbc / TypesMap . java 
 + + + b / src / java / org / apache / cassandra / cql / jdbc / TypesMap . java 
 @ @ - 17 , 6 + 17 , 7 @ @ public class TypesMap 
 map . put ( " org . apache . cassandra . db . marshal . DecimalType " , JdbcDecimal . instance ) ; 
 map . put ( " org . apache . cassandra . db . marshal . DoubleType " , JdbcDouble . instance ) ; 
 map . put ( " org . apache . cassandra . db . marshal . FloatType " , JdbcFloat . instance ) ; 
 + map . put ( " org . apache . cassandra . db . marshal . Int32Type " , JdbcInt32 . instance ) ; 
 map . put ( " org . apache . cassandra . db . marshal . IntegerType " , JdbcInteger . instance ) ; 
 map . put ( " org . apache . cassandra . db . marshal . LexicalUUIDType " , JdbcLexicalUUID . instance ) ; 
 map . put ( " org . apache . cassandra . db . marshal . LongType " , JdbcLong . instance ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / Int32Type . java b / src / java / org / apache / cassandra / db / marshal / Int32Type . java 
 new file mode 100644 
 index 0000000 . . 22ec9e4 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / db / marshal / Int32Type . java 
 @ @ - 0 , 0 + 1 , 102 @ @ 
 + package org . apache . cassandra . db . marshal ; 
 + / * 
 + * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * 
 + * / 
 + 
 + 
 + import java . nio . ByteBuffer ; 
 + 
 + import org . apache . cassandra . cql . jdbc . JdbcInt32 ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + 
 + public class Int32Type extends AbstractType < Integer > 
 + { 
 + public static final Int32Type instance = new Int32Type ( ) ; 
 + 
 + Int32Type ( ) { } / / singleton 
 + 
 + public Integer compose ( ByteBuffer bytes ) 
 + { 
 + return ByteBufferUtil . toInt ( bytes ) ; 
 + } 
 + 
 + public ByteBuffer decompose ( Integer value ) 
 + { 
 + return ByteBufferUtil . bytes ( value ) ; 
 + } 
 + 
 + public int compare ( ByteBuffer o1 , ByteBuffer o2 ) 
 + { 
 + if ( o1 . remaining ( ) = = 0 ) 
 + { 
 + return o2 . remaining ( ) = = 0 ? 0 : - 1 ; 
 + } 
 + if ( o2 . remaining ( ) = = 0 ) 
 + { 
 + return 1 ; 
 + } 
 + 
 + int diff = o1 . get ( o1 . position ( ) ) - o2 . get ( o2 . position ( ) ) ; 
 + if ( diff ! = 0 ) 
 + return diff ; 
 + 
 + 
 + return ByteBufferUtil . compareUnsigned ( o1 , o2 ) ; 
 + } 
 + 
 + public String getString ( ByteBuffer bytes ) 
 + { 
 + try 
 + { 
 + return JdbcInt32 . instance . getString ( bytes ) ; 
 + } 
 + catch ( org . apache . cassandra . cql . jdbc . MarshalException e ) 
 + { 
 + throw new MarshalException ( e . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 + public ByteBuffer fromString ( String source ) throws MarshalException 
 + { 
 + / / Return an empty ByteBuffer for an empty string . 
 + if ( source . isEmpty ( ) ) 
 + return ByteBufferUtil . EMPTY _ BYTE _ BUFFER ; 
 + 
 + int int32Type ; 
 + 
 + try 
 + { 
 + int32Type = Integer . parseInt ( source ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new MarshalException ( String . format ( " unable to make int from ' % s ' " , source ) , e ) ; 
 + } 
 + 
 + return decompose ( int32Type ) ; 
 + } 
 + 
 + public void validate ( ByteBuffer bytes ) throws MarshalException 
 + { 
 + if ( bytes . remaining ( ) ! = 4 & & bytes . remaining ( ) ! = 0 ) 
 + throw new MarshalException ( String . format ( " Expected 4 or 0 byte int ( % d ) " , bytes . remaining ( ) ) ) ; 
 + } 
 + 
 + } 
 diff - - git a / src / resources / org / apache / cassandra / cli / CliHelp . yaml b / src / resources / org / apache / cassandra / cli / CliHelp . yaml 
 index ae6508e . . bf2fcde 100644 
 - - - a / src / resources / org / apache / cassandra / cli / CliHelp . yaml 
 + + + b / src / resources / org / apache / cassandra / cli / CliHelp . yaml 
 @ @ - 363 , 6 + 363 , 7 @ @ commands : 
 - AsciiType 
 - BytesType 
 - CounterColumnType ( distributed counter column ) 
 + - Int32Type 
 - IntegerType ( a generic variable - length integer type ) 
 - LexicalUUIDType 
 - LongType 
 @ @ - 401 , 6 + 402 , 7 @ @ commands : 
 - AsciiType 
 - BytesType 
 - CounterColumnType ( distributed counter column ) 
 + - Int32Type 
 - IntegerType ( a generic variable - length integer type ) 
 - LexicalUUIDType 
 - LongType 
 @ @ - 417 , 6 + 419 , 7 @ @ commands : 
 - AsciiType 
 - BytesType 
 - CounterColumnType ( distributed counter column ) 
 + - Int32Type 
 - IntegerType ( a generic variable - length integer type ) 
 - LexicalUUIDType 
 - LongType 
 @ @ - 431 , 6 + 434 , 7 @ @ commands : 
 Supported values are : 
 - AsciiType 
 - BytesType 
 + - Int32Type 
 - IntegerType ( a generic variable - length integer type ) 
 - LexicalUUIDType 
 - LongType 
 @ @ - 511 , 6 + 515 , 7 @ @ commands : 
 - AsciiType 
 - BytesType 
 - CounterColumnType ( distributed counter column ) 
 + - Int32Type 
 - IntegerType ( a generic variable - length integer type ) 
 - LexicalUUIDType 
 - LongType 
 @ @ - 626 , 6 + 631 , 7 @ @ commands : 
 - AsciiType 
 - BytesType 
 - CounterColumnType ( distributed counter column ) 
 + - Int32Type 
 - IntegerType ( a generic variable - length integer type ) 
 - LexicalUUIDType 
 - LongType 
 @ @ - 668 , 6 + 674 , 7 @ @ commands : 
 - AsciiType 
 - BytesType 
 - CounterColumnType ( distributed counter column ) 
 + - Int32Type 
 - IntegerType ( a generic variable - length integer type ) 
 - LexicalUUIDType 
 - LongType 
 @ @ - 684 , 6 + 691 , 7 @ @ commands : 
 - AsciiType 
 - BytesType 
 - CounterColumnType ( distributed counter column ) 
 + - Int32Type 
 - IntegerType ( a generic variable - length integer type ) 
 - LexicalUUIDType 
 - LongType 
 @ @ - 698 , 6 + 706 , 7 @ @ commands : 
 Supported values are : 
 - AsciiType 
 - BytesType 
 + - Int32Type 
 - IntegerType ( a generic variable - length integer type ) 
 - LexicalUUIDType 
 - LongType 
 @ @ - 778 , 6 + 787 , 7 @ @ commands : 
 - AsciiType 
 - BytesType 
 - CounterColumnType ( distributed counter column ) 
 + - Int32Type 
 - IntegerType ( a generic variable - length integer type ) 
 - LexicalUUIDType 
 - LongType 
 @ @ - 919 , 6 + 929 , 7 @ @ commands : 
 Valid options are : 
 - ascii 
 - bytes : if used without arguments generates a zero length byte array 
 + - int32 
 - integer 
 - lexicaluuid : if used without arguments generates a new random uuid 
 - long 
 @ @ - 944 , 6 + 955 , 7 @ @ commands : 
 - AsciiType 
 - BytesType 
 - CounterColumnType ( distributed counter column ) 
 + - Int32Type 
 - IntegerType ( a generic variable - length integer type ) 
 - LexicalUUIDType 
 - LongType 
 @ @ - 987 , 6 + 999 , 7 @ @ commands : 
 Valid options are : 
 - ascii 
 - bytes : if used without arguments generates a zero length byte array 
 + - int32 
 - integer 
 - lexicaluuid : if used without arguments generates a new random uuid 
 - long 
 @ @ - 1030 , 6 + 1043 , 7 @ @ commands : 
 Supported values are : 
 - ascii 
 - bytes : if used without arguments generates a zero length byte array 
 + - int32 
 - integer 
 - lexicaluuid : if used without arguments generates a new random uuid 
 - long 
 @ @ - 1134 , 6 + 1148 , 7 @ @ commands : 
 - ascii 
 - bytes 
 - counterColumn ( distributed counter column ) 
 + - int32 
 - integer ( a generic variable - length integer type ) 
 - lexicalUUID 
 - long 
 diff - - git a / test / unit / org / apache / cassandra / Util . java b / test / unit / org / apache / cassandra / Util . java 
 index 702a2d7 . . 2d1a3c3 100644 
 - - - a / test / unit / org / apache / cassandra / Util . java 
 + + + b / test / unit / org / apache / cassandra / Util . java 
 @ @ - 103 , 6 + 103 , 15 @ @ public class Util 
 return bb ; 
 } 
 
 + public static ByteBuffer getBytes ( int v ) 
 + { 
 + byte [ ] bytes = new byte [ 4 ] ; 
 + ByteBuffer bb = ByteBuffer . wrap ( bytes ) ; 
 + bb . putInt ( v ) ; 
 + bb . rewind ( ) ; 
 + return bb ; 
 + } 
 + 
 public static List < Row > getRangeSlice ( ColumnFamilyStore cfs ) throws IOException , ExecutionException , InterruptedException 
 { 
 return getRangeSlice ( cfs , null ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java b / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java 
 index 2727c9a . . 9d89d28 100644 
 - - - a / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java 
 + + + b / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java 
 @ @ - 499 , 16 + 499 , 16 @ @ public class ColumnFamilyStoreTest extends CleanupHelper 
 
 / / create an isolated sstable . 
 putColsSuper ( cfs , key , scfName , 
 - new Column ( getBytes ( 1 ) , ByteBufferUtil . bytes ( " val1 " ) , 1 ) , 
 - new Column ( getBytes ( 2 ) , ByteBufferUtil . bytes ( " val2 " ) , 1 ) , 
 - new Column ( getBytes ( 3 ) , ByteBufferUtil . bytes ( " val3 " ) , 1 ) ) ; 
 + new Column ( getBytes ( 1L ) , ByteBufferUtil . bytes ( " val1 " ) , 1 ) , 
 + new Column ( getBytes ( 2L ) , ByteBufferUtil . bytes ( " val2 " ) , 1 ) , 
 + new Column ( getBytes ( 3L ) , ByteBufferUtil . bytes ( " val3 " ) , 1 ) ) ; 
 cfs . forceBlockingFlush ( ) ; 
 
 / / insert , don ' t flush . 
 putColsSuper ( cfs , key , scfName , 
 - new Column ( getBytes ( 4 ) , ByteBufferUtil . bytes ( " val4 " ) , 1 ) , 
 - new Column ( getBytes ( 5 ) , ByteBufferUtil . bytes ( " val5 " ) , 1 ) , 
 - new Column ( getBytes ( 6 ) , ByteBufferUtil . bytes ( " val6 " ) , 1 ) ) ; 
 + new Column ( getBytes ( 4L ) , ByteBufferUtil . bytes ( " val4 " ) , 1 ) , 
 + new Column ( getBytes ( 5L ) , ByteBufferUtil . bytes ( " val5 " ) , 1 ) , 
 + new Column ( getBytes ( 6L ) , ByteBufferUtil . bytes ( " val6 " ) , 1 ) ) ; 
 
 / / verify insert . 
 final SlicePredicate sp = new SlicePredicate ( ) ; 
 @ @ - 535 , 17 + 535 , 17 @ @ public class ColumnFamilyStoreTest extends CleanupHelper 
 
 / / late insert . 
 putColsSuper ( cfs , key , scfName , 
 - new Column ( getBytes ( 4 ) , ByteBufferUtil . bytes ( " val4 " ) , 1L ) , 
 - new Column ( getBytes ( 7 ) , ByteBufferUtil . bytes ( " val7 " ) , 1L ) ) ; 
 + new Column ( getBytes ( 4L ) , ByteBufferUtil . bytes ( " val4 " ) , 1L ) , 
 + new Column ( getBytes ( 7L ) , ByteBufferUtil . bytes ( " val7 " ) , 1L ) ) ; 
 
 / / re - verify delete . 
 assertRowAndColCount ( 1 , 0 , scfName , false , cfs . getRangeSlice ( scfName , Util . range ( " f " , " g " ) , 100 , QueryFilter . getFilter ( sp , cfs . getComparator ( ) ) ) ) ; 
 
 / / make sure new writes are recognized . 
 putColsSuper ( cfs , key , scfName , 
 - new Column ( getBytes ( 3 ) , ByteBufferUtil . bytes ( " val3 " ) , 3 ) , 
 - new Column ( getBytes ( 8 ) , ByteBufferUtil . bytes ( " val8 " ) , 3 ) , 
 - new Column ( getBytes ( 9 ) , ByteBufferUtil . bytes ( " val9 " ) , 3 ) ) ; 
 + new Column ( getBytes ( 3L ) , ByteBufferUtil . bytes ( " val3 " ) , 3 ) , 
 + new Column ( getBytes ( 8L ) , ByteBufferUtil . bytes ( " val8 " ) , 3 ) , 
 + new Column ( getBytes ( 9L ) , ByteBufferUtil . bytes ( " val9 " ) , 3 ) ) ; 
 assertRowAndColCount ( 1 , 3 , scfName , false , cfs . getRangeSlice ( scfName , Util . range ( " f " , " g " ) , 100 , QueryFilter . getFilter ( sp , cfs . getComparator ( ) ) ) ) ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / db / RemoveSubColumnTest . java b / test / unit / org / apache / cassandra / db / RemoveSubColumnTest . java 
 index c3f43f3a . . 7abcc59 100644 
 - - - a / test / unit / org / apache / cassandra / db / RemoveSubColumnTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RemoveSubColumnTest . java 
 @ @ - 51 , 11 + 51 , 11 @ @ public class RemoveSubColumnTest extends CleanupHelper 
 
 / / remove 
 rm = new RowMutation ( " Keyspace1 " , dk . key ) ; 
 - rm . delete ( new QueryPath ( " Super1 " , ByteBufferUtil . bytes ( " SC1 " ) , getBytes ( 1 ) ) , 1 ) ; 
 + rm . delete ( new QueryPath ( " Super1 " , ByteBufferUtil . bytes ( " SC1 " ) , getBytes ( 1L ) ) , 1 ) ; 
 rm . apply ( ) ; 
 
 ColumnFamily retrieved = store . getColumnFamily ( QueryFilter . getIdentityFilter ( dk , new QueryPath ( " Super1 " , ByteBufferUtil . bytes ( " SC1 " ) ) ) ) ; 
 - assert retrieved . getColumn ( ByteBufferUtil . bytes ( " SC1 " ) ) . getSubColumn ( getBytes ( 1 ) ) . isMarkedForDelete ( ) ; 
 + assert retrieved . getColumn ( ByteBufferUtil . bytes ( " SC1 " ) ) . getSubColumn ( getBytes ( 1L ) ) . isMarkedForDelete ( ) ; 
 assertNull ( Util . cloneAndRemoveDeleted ( retrieved , Integer . MAX _ VALUE ) ) ; 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java b / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java 
 index 8a9541f . . 6b4abe4 100644 
 - - - a / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java 
 @ @ - 85 , 7 + 85 , 7 @ @ public class RemoveSuperColumnTest extends CleanupHelper 
 
 / / remove 
 rm = new RowMutation ( " Keyspace1 " , dk . key ) ; 
 - rm . delete ( new QueryPath ( " Super3 " , ByteBufferUtil . bytes ( " SC1 " ) , Util . getBytes ( 1 ) ) , 1 ) ; 
 + rm . delete ( new QueryPath ( " Super3 " , ByteBufferUtil . bytes ( " SC1 " ) , Util . getBytes ( 1L ) ) , 1 ) ; 
 rm . apply ( ) ; 
 
 validateRemoveSubColumn ( dk ) ; 
 @ @ - 97 , 9 + 97 , 9 @ @ public class RemoveSuperColumnTest extends CleanupHelper 
 private void validateRemoveSubColumn ( DecoratedKey dk ) throws IOException 
 { 
 ColumnFamilyStore store = Table . open ( " Keyspace1 " ) . getColumnFamilyStore ( " Super3 " ) ; 
 - ColumnFamily cf = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , new QueryPath ( " Super3 " , ByteBufferUtil . bytes ( " SC1 " ) ) , Util . getBytes ( 1 ) ) ) ; 
 + ColumnFamily cf = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , new QueryPath ( " Super3 " , ByteBufferUtil . bytes ( " SC1 " ) ) , Util . getBytes ( 1L ) ) ) ; 
 assertNull ( Util . cloneAndRemoveDeleted ( cf , Integer . MAX _ VALUE ) ) ; 
 - cf = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , new QueryPath ( " Super3 " , ByteBufferUtil . bytes ( " SC1 " ) ) , Util . getBytes ( 2 ) ) ) ; 
 + cf = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , new QueryPath ( " Super3 " , ByteBufferUtil . bytes ( " SC1 " ) ) , Util . getBytes ( 2L ) ) ) ; 
 assertNotNull ( Util . cloneAndRemoveDeleted ( cf , Integer . MAX _ VALUE ) ) ; 
 } 
 
 @ @ - 162 , 7 + 162 , 7 @ @ public class RemoveSuperColumnTest extends CleanupHelper 
 private void validateRemoveWithNewData ( DecoratedKey dk ) throws IOException 
 { 
 ColumnFamilyStore store = Table . open ( " Keyspace1 " ) . getColumnFamilyStore ( " Super2 " ) ; 
 - ColumnFamily cf = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , new QueryPath ( " Super2 " , ByteBufferUtil . bytes ( " SC1 " ) ) , getBytes ( 2 ) ) ) ; 
 + ColumnFamily cf = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , new QueryPath ( " Super2 " , ByteBufferUtil . bytes ( " SC1 " ) ) , getBytes ( 2L ) ) ) ; 
 Collection < IColumn > subColumns = cf . getSortedColumns ( ) . iterator ( ) . next ( ) . getSubColumns ( ) ; 
 assert subColumns . size ( ) = = 1 ; 
 assert subColumns . iterator ( ) . next ( ) . timestamp ( ) = = 2 ; 
 diff - - git a / test / unit / org / apache / cassandra / db / TableTest . java b / test / unit / org / apache / cassandra / db / TableTest . java 
 index da199c7 . . 3460adb 100644 
 - - - a / test / unit / org / apache / cassandra / db / TableTest . java 
 + + + b / test / unit / org / apache / cassandra / db / TableTest . java 
 @ @ - 41 , 7 + 41 , 7 @ @ import static org . apache . cassandra . Util . column ; 
 import static org . apache . cassandra . Util . getBytes ; 
 import org . apache . cassandra . Util ; 
 import org . apache . cassandra . db . filter . QueryPath ; 
 - import org . apache . cassandra . db . marshal . LongType ; 
 + import org . apache . cassandra . db . marshal . Int32Type ; 
 import org . apache . cassandra . io . sstable . IndexHelper ; 
 import org . apache . cassandra . io . sstable . SSTableReader ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 @ @ - 487 , 7 + 487 , 7 @ @ public class TableTest extends CleanupHelper 
 
 RowMutation rm = new RowMutation ( " Keyspace1 " , ROW . key ) ; 
 ColumnFamily cf = ColumnFamily . create ( " Keyspace1 " , " Super1 " ) ; 
 - SuperColumn sc = new SuperColumn ( ByteBufferUtil . bytes ( " sc1 " ) , LongType . instance ) ; 
 + SuperColumn sc = new SuperColumn ( ByteBufferUtil . bytes ( " sc1 " ) , Int32Type . instance ) ; 
 sc . addColumn ( new Column ( getBytes ( 1 ) , ByteBufferUtil . bytes ( " val1 " ) , 1L ) ) ; 
 cf . addColumn ( sc ) ; 
 rm . add ( cf ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java b / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java 
 index 135a0af . . 87664eb 100644 
 - - - a / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java 
 + + + b / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java 
 @ @ - 60 , 6 + 60 , 17 @ @ public class RoundTripTest 
 } 
 
 @ Test 
 + public void intLong ( ) 
 + { 
 + byte [ ] v = new byte [ ] { 0 , 0 , 0 , 1 } ; 
 + assert Int32Type . instance . getString ( Int32Type . instance . fromString ( " 1 " ) ) . equals ( " 1 " ) ; 
 + assert Int32Type . instance . fromString ( Int32Type . instance . getString ( ByteBuffer . wrap ( v ) ) ) 
 + . equals ( ByteBuffer . wrap ( v ) ) ; 
 + assert Int32Type . instance . compose ( ByteBuffer . wrap ( v ) ) = = 1 ; 
 + / / assert Int32Type . instance . toString ( 1 ) . equals ( " 1 " ) ; 
 + } 
 + 
 + @ Test 
 public void testAscii ( ) throws Exception 
 { 
 byte [ ] abc = " abc " . getBytes ( Charsets . US _ ASCII ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / marshal / TypeCompareTest . java b / test / unit / org / apache / cassandra / db / marshal / TypeCompareTest . java 
 index 96502d2 . . 49bdf9c 100644 
 - - - a / test / unit / org / apache / cassandra / db / marshal / TypeCompareTest . java 
 + + + b / test / unit / org / apache / cassandra / db / marshal / TypeCompareTest . java 
 @ @ - 93 , 6 + 93 , 28 @ @ public class TypeCompareTest 
 } 
 
 @ Test 
 + public void testInt ( ) 
 + { 
 + Random rng = new Random ( ) ; 
 + ByteBuffer [ ] data = new ByteBuffer [ 1000 ] ; 
 + for ( int i = 0 ; i < data . length ; i + + ) 
 + { 
 + data [ i ] = ByteBuffer . allocate ( 4 ) ; 
 + rng . nextBytes ( data [ i ] . array ( ) ) ; 
 + } 
 + 
 + Arrays . sort ( data , Int32Type . instance ) ; 
 + 
 + for ( int i = 1 ; i < data . length ; i + + ) 
 + { 
 + 	 
 + int l0 = data [ i - 1 ] . getInt ( data [ i - 1 ] . position ( ) ) ; 
 + int l1 = data [ i ] . getInt ( data [ i ] . position ( ) ) ; 
 + assert l0 < = l1 ; 
 + } 
 + } 
 + 
 + @ Test 
 public void testTimeUUID ( ) 
 { 
 / / two different UUIDs w / the same timestamp 
 diff - - git a / test / unit / org / apache / cassandra / db / marshal / TypeValidationTest . java b / test / unit / org / apache / cassandra / db / marshal / TypeValidationTest . java 
 index c2f9d38 . . f12a136 100644 
 - - - a / test / unit / org / apache / cassandra / db / marshal / TypeValidationTest . java 
 + + + b / test / unit / org / apache / cassandra / db / marshal / TypeValidationTest . java 
 @ @ - 52 , 11 + 52 , 18 @ @ public class TypeValidationTest 
 @ Test 
 public void testLong ( ) 
 { 
 - LongType . instance . validate ( Util . getBytes ( 5 ) ) ; 
 + LongType . instance . validate ( Util . getBytes ( 5L ) ) ; 
 LongType . instance . validate ( Util . getBytes ( 5555555555555555555L ) ) ; 
 } 
 
 @ Test 
 + public void testInt ( ) 
 + { 
 + Int32Type . instance . validate ( Util . getBytes ( 5 ) ) ; 
 + Int32Type . instance . validate ( Util . getBytes ( 2057022603 ) ) ; 
 + } 
 + 
 + @ Test 
 public void testValidUtf8 ( ) throws UnsupportedEncodingException 
 { 
 assert Character . MAX _ CODE _ POINT = = 0x0010ffff ;
