BLEU SCORE: 0.03283637368030199

TEST MSG: Empty INITCOND treated as null in aggregate
GENERATED MSG: JDBC ResultSetMetadata properties added to AbstractType

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 882279f . . 2ed9ce9 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 <nl> + * Empty INITCOND treated as null in aggregate ( CASSANDRA - 9457 ) <nl> * Remove use of Cell in Thrift MapReduce classes ( CASSANDRA - 8609 ) <nl> * Integrate pre - release Java Driver 2 . 2 - rc1 , custom build ( CASSANDRA - 9493 ) <nl> * Clean up gossiper logic for old versions ( CASSANDRA - 9370 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> index a01f08f . . 0bf6078 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> @ @ - 146 , 8 + 146 , 8 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> public boolean isCallableWrtNullable ( List < ByteBuffer > parameters ) <nl> { <nl> if ( ! calledOnNullInput ) <nl> - for ( ByteBuffer parameter : parameters ) <nl> - if ( parameter = = null | | parameter . remaining ( ) = = 0 ) <nl> + for ( int i = 0 ; i < parameters . size ( ) ; i + + ) <nl> + if ( UDHelper . isNullOrEmpty ( argTypes . get ( i ) , parameters . get ( i ) ) ) <nl> return false ; <nl> return true ; <nl> } <nl> @ @ - 194 , 37 + 194 , 42 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> * / <nl> protected Object compose ( int protocolVersion , int argIndex , ByteBuffer value ) <nl> { <nl> - return value = = null ? null : argDataTypes [ argIndex ] . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; <nl> + return UDHelper . isNullOrEmpty ( argTypes . get ( argIndex ) , value ) ? null : argDataTypes [ argIndex ] . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; <nl> } <nl> <nl> / / do not remove - used by generated Java UDFs <nl> protected float compose _ float ( int protocolVersion , int argIndex , ByteBuffer value ) <nl> { <nl> - return value = = null ? 0f : ( float ) DataType . cfloat ( ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; <nl> + assert value ! = null & & value . remaining ( ) > 0 ; <nl> + return ( float ) DataType . cfloat ( ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; <nl> } <nl> <nl> / / do not remove - used by generated Java UDFs <nl> protected double compose _ double ( int protocolVersion , int argIndex , ByteBuffer value ) <nl> { <nl> - return value = = null ? 0d : ( double ) DataType . cdouble ( ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; <nl> + assert value ! = null & & value . remaining ( ) > 0 ; <nl> + return ( double ) DataType . cdouble ( ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; <nl> } <nl> <nl> / / do not remove - used by generated Java UDFs <nl> protected int compose _ int ( int protocolVersion , int argIndex , ByteBuffer value ) <nl> { <nl> - return value = = null ? 0 : ( int ) DataType . cint ( ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; <nl> + assert value ! = null & & value . remaining ( ) > 0 ; <nl> + return ( int ) DataType . cint ( ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; <nl> } <nl> <nl> / / do not remove - used by generated Java UDFs <nl> protected long compose _ long ( int protocolVersion , int argIndex , ByteBuffer value ) <nl> { <nl> - return value = = null ? 0L : ( long ) DataType . bigint ( ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; <nl> + assert value ! = null & & value . remaining ( ) > 0 ; <nl> + return ( long ) DataType . bigint ( ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; <nl> } <nl> <nl> / / do not remove - used by generated Java UDFs <nl> protected boolean compose _ boolean ( int protocolVersion , int argIndex , ByteBuffer value ) <nl> { <nl> - return value ! = null & & ( boolean ) DataType . cboolean ( ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; <nl> + assert value ! = null & & value . remaining ( ) > 0 ; <nl> + return ( boolean ) DataType . cboolean ( ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java b / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java <nl> index 55a0888 . . d1d12e6 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . cql3 . functions ; <nl> import java . lang . invoke . MethodHandle ; <nl> import java . lang . invoke . MethodHandles ; <nl> import java . lang . reflect . Method ; <nl> + import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> <nl> import com . datastax . driver . core . DataType ; <nl> @ @ - 119 , 4 + 120 , 10 @ @ public final class UDHelper <nl> throw new RuntimeException ( " cannot parse driver type " + cqlType . getType ( ) . toString ( ) , e ) ; <nl> } <nl> } <nl> + <nl> + public static boolean isNullOrEmpty ( AbstractType < ? > type , ByteBuffer bb ) <nl> + { <nl> + return bb = = null | | <nl> + ( bb . remaining ( ) = = 0 & & type . isEmptyValueMeaningless ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java <nl> index ae793a3 . . 8b6c8d6 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java <nl> @ @ - 112 , 6 + 112 , 8 @ @ public final class CreateAggregateStatement extends SchemaAlteringStatement <nl> { <nl> ColumnSpecification receiver = new ColumnSpecification ( functionName . keyspace , " - - dummy - - " , new ColumnIdentifier ( " ( aggregate _ initcond ) " , true ) , stateType ) ; <nl> initcond = ival . prepare ( functionName . keyspace , receiver ) . bindAndGet ( QueryOptions . DEFAULT ) ; <nl> + if ( Constants . NULL _ LITERAL ! = ival & & UDHelper . isNullOrEmpty ( stateType , initcond ) ) <nl> + throw new InvalidRequestException ( " INITCOND must not be empty for all types except TEXT , ASCII , BLOB " ) ; <nl> } <nl> <nl> return super . prepare ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractType . java b / src / java / org / apache / cassandra / db / marshal / AbstractType . java <nl> index 6602414 . . aa25a81 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / AbstractType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / AbstractType . java <nl> @ @ - 257 , 6 + 257 , 14 @ @ public abstract class AbstractType < T > implements Comparator < ByteBuffer > <nl> } <nl> <nl> / * * <nl> + * Returns { @ code true } for types where empty should be handled like { @ code null } like { @ link Int32Type } . <nl> + * / <nl> + public boolean isEmptyValueMeaningless ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + / * * <nl> * @ param ignoreFreezing if true , the type string will not be wrapped with FrozenType ( . . . ) , even if this type is frozen . <nl> * / <nl> public String toString ( boolean ignoreFreezing ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / BooleanType . java b / src / java / org / apache / cassandra / db / marshal / BooleanType . java <nl> index 5c1bf42 . . bfe8c34 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / BooleanType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / BooleanType . java <nl> @ @ - 37 , 6 + 37 , 11 @ @ public class BooleanType extends AbstractType < Boolean > <nl> <nl> BooleanType ( ) { } / / singleton <nl> <nl> + public boolean isEmptyValueMeaningless ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> public int compare ( ByteBuffer o1 , ByteBuffer o2 ) <nl> { <nl> if ( ! o1 . hasRemaining ( ) | | ! o2 . hasRemaining ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / CounterColumnType . java b / src / java / org / apache / cassandra / db / marshal / CounterColumnType . java <nl> index 0fea87b . . 4b3ce82 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / CounterColumnType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / CounterColumnType . java <nl> @ @ - 32 , 6 + 32 , 11 @ @ public class CounterColumnType extends AbstractType < Long > <nl> <nl> CounterColumnType ( ) { } / / singleton <nl> <nl> + public boolean isEmptyValueMeaningless ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> public boolean isCounter ( ) <nl> { <nl> return true ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / DateType . java b / src / java / org / apache / cassandra / db / marshal / DateType . java <nl> index 806bbcf . . 359ce52 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / DateType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / DateType . java <nl> @ @ - 39 , 6 + 39 , 11 @ @ public class DateType extends AbstractType < Date > <nl> <nl> DateType ( ) { } / / singleton <nl> <nl> + public boolean isEmptyValueMeaningless ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> public int compare ( ByteBuffer o1 , ByteBuffer o2 ) <nl> { <nl> if ( ! o1 . hasRemaining ( ) | | ! o2 . hasRemaining ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / DecimalType . java b / src / java / org / apache / cassandra / db / marshal / DecimalType . java <nl> index f1388ce . . 4052d70 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / DecimalType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / DecimalType . java <nl> @ @ - 34 , 6 + 34 , 11 @ @ public class DecimalType extends AbstractType < BigDecimal > <nl> <nl> DecimalType ( ) { } / / singleton <nl> <nl> + public boolean isEmptyValueMeaningless ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> public int compare ( ByteBuffer o1 , ByteBuffer o2 ) <nl> { <nl> if ( ! o1 . hasRemaining ( ) | | ! o2 . hasRemaining ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / DoubleType . java b / src / java / org / apache / cassandra / db / marshal / DoubleType . java <nl> index fdfd2d2 . . 661b3c9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / DoubleType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / DoubleType . java <nl> @ @ - 33 , 6 + 33 , 11 @ @ public class DoubleType extends AbstractType < Double > <nl> <nl> DoubleType ( ) { } / / singleton <nl> <nl> + public boolean isEmptyValueMeaningless ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> public int compare ( ByteBuffer o1 , ByteBuffer o2 ) <nl> { <nl> if ( ! o1 . hasRemaining ( ) | | ! o2 . hasRemaining ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / FloatType . java b / src / java / org / apache / cassandra / db / marshal / FloatType . java <nl> index 722df87 . . af02cad 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / FloatType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / FloatType . java <nl> @ @ - 34 , 6 + 34 , 11 @ @ public class FloatType extends AbstractType < Float > <nl> <nl> FloatType ( ) { } / / singleton <nl> <nl> + public boolean isEmptyValueMeaningless ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> public int compare ( ByteBuffer o1 , ByteBuffer o2 ) <nl> { <nl> if ( ! o1 . hasRemaining ( ) | | ! o2 . hasRemaining ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / InetAddressType . java b / src / java / org / apache / cassandra / db / marshal / InetAddressType . java <nl> index a4eac07 . . 4901c74 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / InetAddressType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / InetAddressType . java <nl> @ @ - 34 , 6 + 34 , 11 @ @ public class InetAddressType extends AbstractType < InetAddress > <nl> <nl> InetAddressType ( ) { } / / singleton <nl> <nl> + public boolean isEmptyValueMeaningless ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> public int compare ( ByteBuffer o1 , ByteBuffer o2 ) <nl> { <nl> return ByteBufferUtil . compareUnsigned ( o1 , o2 ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / Int32Type . java b / src / java / org / apache / cassandra / db / marshal / Int32Type . java <nl> index 9ea8f78 . . 67d8142 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / Int32Type . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / Int32Type . java <nl> @ @ - 35 , 6 + 35 , 11 @ @ public class Int32Type extends AbstractType < Integer > <nl> { <nl> } / / singleton <nl> <nl> + public boolean isEmptyValueMeaningless ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> public int compare ( ByteBuffer o1 , ByteBuffer o2 ) <nl> { <nl> if ( ! o1 . hasRemaining ( ) | | ! o2 . hasRemaining ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / IntegerType . java b / src / java / org / apache / cassandra / db / marshal / IntegerType . java <nl> index 5fe8fd8 . . a3741d4 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / IntegerType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / IntegerType . java <nl> @ @ - 60 , 6 + 60 , 11 @ @ public final class IntegerType extends AbstractType < BigInteger > <nl> <nl> IntegerType ( ) { / * singleton * / } <nl> <nl> + public boolean isEmptyValueMeaningless ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> public int compare ( ByteBuffer lhs , ByteBuffer rhs ) <nl> { <nl> return IntegerType . compareIntegers ( lhs , rhs ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java b / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java <nl> index 3ca5c74 . . 3e00d71 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java <nl> @ @ - 36 , 6 + 36 , 11 @ @ public class LexicalUUIDType extends AbstractType < UUID > <nl> { <nl> } / / singleton <nl> <nl> + public boolean isEmptyValueMeaningless ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> public int compare ( ByteBuffer o1 , ByteBuffer o2 ) <nl> { <nl> if ( ! o1 . hasRemaining ( ) | | ! o2 . hasRemaining ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / LongType . java b / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> index 31bad93 . . d77d7d0 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> @ @ - 33 , 6 + 33 , 11 @ @ public class LongType extends AbstractType < Long > <nl> <nl> LongType ( ) { } / / singleton <nl> <nl> + public boolean isEmptyValueMeaningless ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> public int compare ( ByteBuffer o1 , ByteBuffer o2 ) <nl> { <nl> return compareLongs ( o1 , o2 ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / ReversedType . java b / src / java / org / apache / cassandra / db / marshal / ReversedType . java <nl> index 14d069a . . 2181f74 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / ReversedType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / ReversedType . java <nl> @ @ - 60 , 6 + 60 , 11 @ @ public class ReversedType < T > extends AbstractType < T > <nl> this . baseType = baseType ; <nl> } <nl> <nl> + public boolean isEmptyValueMeaningless ( ) <nl> + { <nl> + return baseType . isEmptyValueMeaningless ( ) ; <nl> + } <nl> + <nl> public int compare ( ByteBuffer o1 , ByteBuffer o2 ) <nl> { <nl> / / An empty byte buffer is always smaller <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> index 3b38582 . . a1d8d82 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> @ @ - 35 , 6 + 35 , 11 @ @ public class TimeUUIDType extends AbstractType < UUID > <nl> { <nl> } / / singleton <nl> <nl> + public boolean isEmptyValueMeaningless ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> public int compare ( ByteBuffer b1 , ByteBuffer b2 ) <nl> { <nl> / / Compare for length <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / TimestampType . java b / src / java / org / apache / cassandra / db / marshal / TimestampType . java <nl> index 095f2c2 . . 38e0296 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / TimestampType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / TimestampType . java <nl> @ @ - 45 , 6 + 45 , 11 @ @ public class TimestampType extends AbstractType < Date > <nl> <nl> private TimestampType ( ) { } / / singleton <nl> <nl> + public boolean isEmptyValueMeaningless ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> public int compare ( ByteBuffer o1 , ByteBuffer o2 ) <nl> { <nl> return LongType . compareLongs ( o1 , o2 ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / UUIDType . java b / src / java / org / apache / cassandra / db / marshal / UUIDType . java <nl> index eba696e . . 0250eb20 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / UUIDType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / UUIDType . java <nl> @ @ - 50 , 6 + 50 , 11 @ @ public class UUIDType extends AbstractType < UUID > <nl> { <nl> } <nl> <nl> + public boolean isEmptyValueMeaningless ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> public int compare ( ByteBuffer b1 , ByteBuffer b2 ) <nl> { <nl> / / Compare for length <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / AggregationTest . java <nl> index af775e6 . . af68ddc 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / AggregationTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / AggregationTest . java <nl> @ @ - 1378 , 4 + 1378 , 73 @ @ public class AggregationTest extends CQLTester <nl> assertInvalidMessage ( " The function arguments should not be frozen " , <nl> " DROP AGGREGATE % s ( frozen < " + myType + " > ) ; " ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testEmptyValues ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a int primary key , b text ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b ) VALUES ( 1 , ' ' ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b ) VALUES ( 2 , ' ' ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b ) VALUES ( 3 , ' ' ) " ) ; <nl> + <nl> + String fCON = createFunction ( KEYSPACE , <nl> + " text , text " , <nl> + " CREATE FUNCTION % s ( a text , b text ) " + <nl> + " CALLED ON NULL INPUT " + <nl> + " RETURNS text " + <nl> + " LANGUAGE java " + <nl> + " AS ' return a + \ " x \ " + b + \ " y \ " ; ' " ) ; <nl> + <nl> + String fCONf = createFunction ( KEYSPACE , <nl> + " text " , <nl> + " CREATE FUNCTION % s ( a text ) " + <nl> + " CALLED ON NULL INPUT " + <nl> + " RETURNS text " + <nl> + " LANGUAGE java " + <nl> + " AS ' return \ " fin \ " + a ; ' " ) ; <nl> + <nl> + String aCON = createAggregate ( KEYSPACE , <nl> + " text , text " , <nl> + " CREATE AGGREGATE % s ( text ) " + <nl> + " SFUNC " + shortFunctionName ( fCON ) + ' ' + <nl> + " STYPE text " + <nl> + " FINALFUNC " + shortFunctionName ( fCONf ) + ' ' + <nl> + " INITCOND ' ' " ) ; <nl> + <nl> + String fRNON = createFunction ( KEYSPACE , <nl> + " text " , <nl> + " CREATE FUNCTION % s ( a text , b text ) " + <nl> + " RETURNS NULL ON NULL INPUT " + <nl> + " RETURNS text " + <nl> + " LANGUAGE java " + <nl> + " AS ' return a + \ " x \ " + b + \ " y \ " ; ' " ) ; <nl> + <nl> + String fRNONf = createFunction ( KEYSPACE , <nl> + " text " , <nl> + " CREATE FUNCTION % s ( a text ) " + <nl> + " RETURNS NULL ON NULL INPUT " + <nl> + " RETURNS text " + <nl> + " LANGUAGE java " + <nl> + " AS ' return \ " fin \ " + a ; ' " ) ; <nl> + <nl> + String aRNON = createAggregate ( KEYSPACE , <nl> + " int , int " , <nl> + " CREATE AGGREGATE % s ( text ) " + <nl> + " SFUNC " + shortFunctionName ( fRNON ) + ' ' + <nl> + " STYPE text " + <nl> + " FINALFUNC " + shortFunctionName ( fRNONf ) + ' ' + <nl> + " INITCOND ' ' " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT " + aCON + " ( b ) FROM % s " ) , row ( " finxyxyxy " ) ) ; <nl> + assertRows ( execute ( " SELECT " + aRNON + " ( b ) FROM % s " ) , row ( " finxyxyxy " ) ) ; <nl> + <nl> + createTable ( " CREATE TABLE % s ( a int primary key , b text ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b ) VALUES ( 1 , null ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b ) VALUES ( 2 , null ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b ) VALUES ( 3 , null ) " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT " + aCON + " ( b ) FROM % s " ) , row ( " finxnullyxnullyxnully " ) ) ; <nl> + assertRows ( execute ( " SELECT " + aRNON + " ( b ) FROM % s " ) , row ( " fin " ) ) ; <nl> + <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / UDHelperTest . java b / test / unit / org / apache / cassandra / cql3 / UDHelperTest . java <nl> new file mode 100644 <nl> index 0000000 . . 4a5e78e <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / cql3 / UDHelperTest . java <nl> @ @ - 0 , 0 + 1 , 146 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . cql3 ; <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + <nl> + import org . junit . Assert ; <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . cql3 . functions . UDHelper ; <nl> + import org . apache . cassandra . db . marshal . AbstractType ; <nl> + import org . apache . cassandra . db . marshal . AsciiType ; <nl> + import org . apache . cassandra . db . marshal . BooleanType ; <nl> + import org . apache . cassandra . db . marshal . ByteType ; <nl> + import org . apache . cassandra . db . marshal . BytesType ; <nl> + import org . apache . cassandra . db . marshal . CounterColumnType ; <nl> + import org . apache . cassandra . db . marshal . DateType ; <nl> + import org . apache . cassandra . db . marshal . DecimalType ; <nl> + import org . apache . cassandra . db . marshal . DoubleType ; <nl> + import org . apache . cassandra . db . marshal . FloatType ; <nl> + import org . apache . cassandra . db . marshal . InetAddressType ; <nl> + import org . apache . cassandra . db . marshal . Int32Type ; <nl> + import org . apache . cassandra . db . marshal . IntegerType ; <nl> + import org . apache . cassandra . db . marshal . LongType ; <nl> + import org . apache . cassandra . db . marshal . ReversedType ; <nl> + import org . apache . cassandra . db . marshal . ShortType ; <nl> + import org . apache . cassandra . db . marshal . SimpleDateType ; <nl> + import org . apache . cassandra . db . marshal . TimeType ; <nl> + import org . apache . cassandra . db . marshal . TimeUUIDType ; <nl> + import org . apache . cassandra . db . marshal . TimestampType ; <nl> + import org . apache . cassandra . db . marshal . UTF8Type ; <nl> + import org . apache . cassandra . db . marshal . UUIDType ; <nl> + import org . apache . cassandra . serializers . MarshalException ; <nl> + import org . apache . cassandra . serializers . TypeSerializer ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + <nl> + public class UDHelperTest <nl> + { <nl> + static class UFTestCustomType extends AbstractType < String > <nl> + { <nl> + <nl> + public ByteBuffer fromString ( String source ) throws MarshalException <nl> + { <nl> + return ByteBuffer . wrap ( source . getBytes ( ) ) ; <nl> + } <nl> + <nl> + public Term fromJSONObject ( Object parsed ) throws MarshalException <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> + public TypeSerializer < String > getSerializer ( ) <nl> + { <nl> + return UTF8Type . instance . getSerializer ( ) ; <nl> + } <nl> + <nl> + public int compare ( ByteBuffer o1 , ByteBuffer o2 ) <nl> + { <nl> + return o1 . compareTo ( o2 ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testEmptyVariableLengthTypes ( ) <nl> + { <nl> + AbstractType < ? > [ ] types = new AbstractType < ? > [ ] { <nl> + AsciiType . instance , <nl> + BytesType . instance , <nl> + UTF8Type . instance , <nl> + new UFTestCustomType ( ) <nl> + } ; <nl> + <nl> + for ( AbstractType < ? > type : types ) <nl> + { <nl> + Assert . assertFalse ( " type " + type . getClass ( ) . getName ( ) , <nl> + UDHelper . isNullOrEmpty ( type , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testNonEmptyPrimitiveTypes ( ) <nl> + { <nl> + AbstractType < ? > [ ] types = new AbstractType < ? > [ ] { <nl> + TimeType . instance , <nl> + SimpleDateType . instance , <nl> + ByteType . instance , <nl> + ShortType . instance <nl> + } ; <nl> + <nl> + for ( AbstractType < ? > type : types ) <nl> + { <nl> + try <nl> + { <nl> + type . getSerializer ( ) . validate ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ; <nl> + Assert . fail ( type . getClass ( ) . getSimpleName ( ) ) ; <nl> + } <nl> + catch ( MarshalException e ) <nl> + { <nl> + / / <nl> + } <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testEmptiableTypes ( ) <nl> + { <nl> + AbstractType < ? > [ ] types = new AbstractType < ? > [ ] { <nl> + BooleanType . instance , <nl> + CounterColumnType . instance , <nl> + DateType . instance , <nl> + DecimalType . instance , <nl> + DoubleType . instance , <nl> + FloatType . instance , <nl> + InetAddressType . instance , <nl> + Int32Type . instance , <nl> + IntegerType . instance , <nl> + LongType . instance , <nl> + TimestampType . instance , <nl> + TimeUUIDType . instance , <nl> + UUIDType . instance <nl> + } ; <nl> + <nl> + for ( AbstractType < ? > type : types ) <nl> + { <nl> + Assert . assertTrue ( type . getClass ( ) . getSimpleName ( ) , UDHelper . isNullOrEmpty ( type , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; <nl> + Assert . assertTrue ( " reversed " + type . getClass ( ) . getSimpleName ( ) , <nl> + UDHelper . isNullOrEmpty ( ReversedType . getInstance ( type ) , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / UFTest . java b / test / unit / org / apache / cassandra / cql3 / UFTest . java <nl> index e1b2b5f . . f041b3a 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / UFTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / UFTest . java <nl> @ @ - 18 , 10 + 18 , 17 @ @ <nl> package org . apache . cassandra . cql3 ; <nl> import java . math . BigDecimal ; <nl> import java . math . BigInteger ; <nl> - import java . util . * ; <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> + import java . util . Date ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . Set ; <nl> + import java . util . TreeMap ; <nl> + import java . util . TreeSet ; <nl> <nl> import org . junit . Assert ; <nl> - import org . junit . Ignore ; <nl> import org . junit . Test ; <nl> <nl> import com . datastax . driver . core . * ; <nl> @ @ - 36 , 6 + 43 , 7 @ @ import org . apache . cassandra . service . ClientState ; <nl> import org . apache . cassandra . transport . Event ; <nl> import org . apache . cassandra . transport . Server ; <nl> import org . apache . cassandra . transport . messages . ResultMessage ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> public class UFTest extends CQLTester <nl> { <nl> @ @ - 2442 , 4 + 2450 , 112 @ @ public class UFTest extends CQLTester <nl> assertInvalidMessage ( " The function arguments should not be frozen " , <nl> " DROP FUNCTION " + functionName + " ( frozen < " + myType + " > ) ; " ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testEmptyString ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( key int primary key , sval text , aval ascii , bval blob , empty _ int int ) " ) ; <nl> + execute ( " INSERT INTO % s ( key , sval , aval , bval , empty _ int ) VALUES ( ? , ? , ? , ? , blobAsInt ( 0x ) ) " , 1 , " " , " " , ByteBuffer . allocate ( 0 ) ) ; <nl> + <nl> + String fNameSRC = createFunction ( KEYSPACE _ PER _ TEST , " text " , <nl> + " CREATE OR REPLACE FUNCTION % s ( val text ) " + <nl> + " CALLED ON NULL INPUT " + <nl> + " RETURNS text " + <nl> + " LANGUAGE JAVA \ n " + <nl> + " AS ' return val ; ' " ) ; <nl> + <nl> + String fNameSCC = createFunction ( KEYSPACE _ PER _ TEST , " text " , <nl> + " CREATE OR REPLACE FUNCTION % s ( val text ) " + <nl> + " CALLED ON NULL INPUT " + <nl> + " RETURNS text " + <nl> + " LANGUAGE JAVA \ n " + <nl> + " AS ' return \ " \ " ; ' " ) ; <nl> + <nl> + String fNameSRN = createFunction ( KEYSPACE _ PER _ TEST , " text " , <nl> + " CREATE OR REPLACE FUNCTION % s ( val text ) " + <nl> + " RETURNS NULL ON NULL INPUT " + <nl> + " RETURNS text " + <nl> + " LANGUAGE JAVA \ n " + <nl> + " AS ' return val ; ' " ) ; <nl> + <nl> + String fNameSCN = createFunction ( KEYSPACE _ PER _ TEST , " text " , <nl> + " CREATE OR REPLACE FUNCTION % s ( val text ) " + <nl> + " RETURNS NULL ON NULL INPUT " + <nl> + " RETURNS text " + <nl> + " LANGUAGE JAVA \ n " + <nl> + " AS ' return \ " \ " ; ' " ) ; <nl> + <nl> + String fNameBRC = createFunction ( KEYSPACE _ PER _ TEST , " blob " , <nl> + " CREATE OR REPLACE FUNCTION % s ( val blob ) " + <nl> + " CALLED ON NULL INPUT " + <nl> + " RETURNS blob " + <nl> + " LANGUAGE JAVA \ n " + <nl> + " AS ' return val ; ' " ) ; <nl> + <nl> + String fNameBCC = createFunction ( KEYSPACE _ PER _ TEST , " blob " , <nl> + " CREATE OR REPLACE FUNCTION % s ( val blob ) " + <nl> + " CALLED ON NULL INPUT " + <nl> + " RETURNS blob " + <nl> + " LANGUAGE JAVA \ n " + <nl> + " AS ' return ByteBuffer . allocate ( 0 ) ; ' " ) ; <nl> + <nl> + String fNameBRN = createFunction ( KEYSPACE _ PER _ TEST , " blob " , <nl> + " CREATE OR REPLACE FUNCTION % s ( val blob ) " + <nl> + " RETURNS NULL ON NULL INPUT " + <nl> + " RETURNS blob " + <nl> + " LANGUAGE JAVA \ n " + <nl> + " AS ' return val ; ' " ) ; <nl> + <nl> + String fNameBCN = createFunction ( KEYSPACE _ PER _ TEST , " blob " , <nl> + " CREATE OR REPLACE FUNCTION % s ( val blob ) " + <nl> + " RETURNS NULL ON NULL INPUT " + <nl> + " RETURNS blob " + <nl> + " LANGUAGE JAVA \ n " + <nl> + " AS ' return ByteBuffer . allocate ( 0 ) ; ' " ) ; <nl> + <nl> + String fNameIRC = createFunction ( KEYSPACE _ PER _ TEST , " int " , <nl> + " CREATE OR REPLACE FUNCTION % s ( val int ) " + <nl> + " CALLED ON NULL INPUT " + <nl> + " RETURNS int " + <nl> + " LANGUAGE JAVA \ n " + <nl> + " AS ' return val ; ' " ) ; <nl> + <nl> + String fNameICC = createFunction ( KEYSPACE _ PER _ TEST , " int " , <nl> + " CREATE OR REPLACE FUNCTION % s ( val int ) " + <nl> + " CALLED ON NULL INPUT " + <nl> + " RETURNS int " + <nl> + " LANGUAGE JAVA \ n " + <nl> + " AS ' return 0 ; ' " ) ; <nl> + <nl> + String fNameIRN = createFunction ( KEYSPACE _ PER _ TEST , " int " , <nl> + " CREATE OR REPLACE FUNCTION % s ( val int ) " + <nl> + " RETURNS NULL ON NULL INPUT " + <nl> + " RETURNS int " + <nl> + " LANGUAGE JAVA \ n " + <nl> + " AS ' return val ; ' " ) ; <nl> + <nl> + String fNameICN = createFunction ( KEYSPACE _ PER _ TEST , " blob " , <nl> + " CREATE OR REPLACE FUNCTION % s ( val int ) " + <nl> + " RETURNS NULL ON NULL INPUT " + <nl> + " RETURNS int " + <nl> + " LANGUAGE JAVA \ n " + <nl> + " AS ' return 0 ; ' " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT " + fNameSRC + " ( sval ) FROM % s " ) , row ( " " ) ) ; <nl> + assertRows ( execute ( " SELECT " + fNameSRN + " ( sval ) FROM % s " ) , row ( " " ) ) ; <nl> + assertRows ( execute ( " SELECT " + fNameSCC + " ( sval ) FROM % s " ) , row ( " " ) ) ; <nl> + assertRows ( execute ( " SELECT " + fNameSCN + " ( sval ) FROM % s " ) , row ( " " ) ) ; <nl> + assertRows ( execute ( " SELECT " + fNameSRC + " ( aval ) FROM % s " ) , row ( " " ) ) ; <nl> + assertRows ( execute ( " SELECT " + fNameSRN + " ( aval ) FROM % s " ) , row ( " " ) ) ; <nl> + assertRows ( execute ( " SELECT " + fNameSCC + " ( aval ) FROM % s " ) , row ( " " ) ) ; <nl> + assertRows ( execute ( " SELECT " + fNameSCN + " ( aval ) FROM % s " ) , row ( " " ) ) ; <nl> + assertRows ( execute ( " SELECT " + fNameBRC + " ( bval ) FROM % s " ) , row ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; <nl> + assertRows ( execute ( " SELECT " + fNameBRN + " ( bval ) FROM % s " ) , row ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; <nl> + assertRows ( execute ( " SELECT " + fNameBCC + " ( bval ) FROM % s " ) , row ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; <nl> + assertRows ( execute ( " SELECT " + fNameBCN + " ( bval ) FROM % s " ) , row ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; <nl> + assertRows ( execute ( " SELECT " + fNameIRC + " ( empty _ int ) FROM % s " ) , row ( new Object [ ] { null } ) ) ; <nl> + assertRows ( execute ( " SELECT " + fNameIRN + " ( empty _ int ) FROM % s " ) , row ( new Object [ ] { null } ) ) ; <nl> + assertRows ( execute ( " SELECT " + fNameICC + " ( empty _ int ) FROM % s " ) , row ( 0 ) ) ; <nl> + assertRows ( execute ( " SELECT " + fNameICN + " ( empty _ int ) FROM % s " ) , row ( new Object [ ] { null } ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / drivers / java / src / org / apache / cassandra / cql / jdbc / AbstractResultSet . java b / drivers / java / src / org / apache / cassandra / cql / jdbc / AbstractResultSet . java <nl> index 50113f3 . . 1b0d09f 100644 <nl> - - - a / drivers / java / src / org / apache / cassandra / cql / jdbc / AbstractResultSet . java <nl> + + + b / drivers / java / src / org / apache / cassandra / cql / jdbc / AbstractResultSet . java <nl> @ @ - 299 , 6 + 299 , 26 @ @ class AbstractResultSet <nl> throw new UnsupportedOperationException ( " method not supported " ) ; <nl> } <nl> <nl> + public BigDecimal getBigDecimal ( int arg0 ) throws SQLException <nl> + { <nl> + throw new UnsupportedOperationException ( " method not supported " ) ; <nl> + } <nl> + <nl> + public BigDecimal getBigDecimal ( String arg0 ) throws SQLException <nl> + { <nl> + throw new UnsupportedOperationException ( " method not supported " ) ; <nl> + } <nl> + <nl> + public BigDecimal getBigDecimal ( int arg0 , int arg1 ) throws SQLException <nl> + { <nl> + throw new UnsupportedOperationException ( " method not supported " ) ; <nl> + } <nl> + <nl> + public BigDecimal getBigDecimal ( String arg0 , int arg1 ) throws SQLException <nl> + { <nl> + throw new UnsupportedOperationException ( " method not supported " ) ; <nl> + } <nl> + <nl> / / <nl> / / all the update methods are unsupported , requires a separate statement in Cassandra <nl> / / <nl> diff - - git a / drivers / java / src / org / apache / cassandra / cql / jdbc / CResultSet . java b / drivers / java / src / org / apache / cassandra / cql / jdbc / CResultSet . java <nl> index 6d13286 . . 17b968b 100644 <nl> - - - a / drivers / java / src / org / apache / cassandra / cql / jdbc / CResultSet . java <nl> + + + b / drivers / java / src / org / apache / cassandra / cql / jdbc / CResultSet . java <nl> @ @ - 53 , 8 + 53 , 7 @ @ public class CResultSet extends AbstractResultSet implements CassandraResultSet <nl> private List < TypedColumn > values = new ArrayList < TypedColumn > ( ) ; <nl> <nl> / * * The value map . * / <nl> - / / TODO should map < String , TypedColumn > so we can throw appropriate exception if user asks for non - existant column name <nl> - private Map < String , Object > valueMap = new WeakHashMap < String , Object > ( ) ; <nl> + private Map < String , TypedColumn > valueMap = new HashMap < String , TypedColumn > ( ) ; <nl> <nl> private final CResultSetMetaData meta ; <nl> <nl> @ @ - 86 , 7 + 85 , 7 @ @ public class CResultSet extends AbstractResultSet implements CassandraResultSet <nl> <nl> public TypedColumn getColumn ( String name ) <nl> { <nl> - throw new UnsupportedOperationException ( " need to convert valueMap to TypedColumn first " ) ; <nl> + return valueMap . get ( name ) ; <nl> } <nl> <nl> public void close ( ) throws SQLException <nl> @ @ - 95 , 41 + 94 , 21 @ @ public class CResultSet extends AbstractResultSet implements CassandraResultSet <nl> values = null ; <nl> } <nl> <nl> - public BigDecimal getBigDecimal ( int arg0 ) throws SQLException <nl> + private byte [ ] getBytes ( TypedColumn column ) <nl> { <nl> - throw new UnsupportedOperationException ( " method not supported " ) ; <nl> - } <nl> - <nl> - public BigDecimal getBigDecimal ( String arg0 ) throws SQLException <nl> - { <nl> - throw new UnsupportedOperationException ( " method not supported " ) ; <nl> - } <nl> - <nl> - public BigDecimal getBigDecimal ( int arg0 , int arg1 ) throws SQLException <nl> - { <nl> - throw new UnsupportedOperationException ( " method not supported " ) ; <nl> - } <nl> - <nl> - public BigDecimal getBigDecimal ( String arg0 , int arg1 ) throws SQLException <nl> - { <nl> - throw new UnsupportedOperationException ( " method not supported " ) ; <nl> + ByteBuffer value = ( ByteBuffer ) column . getValue ( ) ; <nl> + wasNull = value = = null ; <nl> + return value = = null ? null : ByteBufferUtil . clone ( value ) . array ( ) ; <nl> } <nl> <nl> public byte [ ] getBytes ( int index ) throws SQLException <nl> { <nl> - TypedColumn column = values . get ( index - 1 ) ; <nl> - assert column ! = null ; <nl> - Object value = column . getValue ( ) ; <nl> - wasNull = value = = null ; <nl> - return value = = null ? null : ByteBufferUtil . clone ( ( ByteBuffer ) value ) . array ( ) ; <nl> + return getBytes ( values . get ( index - 1 ) ) ; <nl> } <nl> <nl> public byte [ ] getBytes ( String name ) throws SQLException <nl> { <nl> - String nameAsString = decoder . colNameAsString ( keyspace , columnFamily , name ) ; <nl> - Object value = valueMap . get ( nameAsString ) ; <nl> - wasNull = value = = null ; <nl> - return value = = null ? null : ByteBufferUtil . clone ( ( ByteBuffer ) value ) . array ( ) ; <nl> + return getBytes ( valueMap . get ( decoder . colNameAsString ( keyspace , columnFamily , name ) ) ) ; <nl> } <nl> <nl> public Date getDate ( int arg0 ) throws SQLException <nl> @ @ - 182 , 39 + 161 , 59 @ @ public class CResultSet extends AbstractResultSet implements CassandraResultSet <nl> throw new UnsupportedOperationException ( " method not supported " ) ; <nl> } <nl> <nl> - public int getInt ( int index ) throws SQLException <nl> + private BigInteger getBigInteger ( TypedColumn column ) <nl> { <nl> - TypedColumn column = values . get ( index - 1 ) ; <nl> - assert column ! = null ; <nl> - Object value = column . getValue ( ) ; <nl> + BigInteger value = ( BigInteger ) column . getValue ( ) ; <nl> wasNull = value = = null ; <nl> - return value = = null ? 0 : ( ( BigInteger ) value ) . intValue ( ) ; <nl> + return value ; <nl> + } <nl> + <nl> + public BigInteger getBigInteger ( int i ) <nl> + { <nl> + return getBigInteger ( values . get ( i - 1 ) ) ; <nl> + } <nl> + <nl> + public BigInteger getBigInteger ( String name ) <nl> + { <nl> + return getBigInteger ( valueMap . get ( decoder . colNameAsString ( keyspace , columnFamily , name ) ) ) ; <nl> + } <nl> + <nl> + private int getInt ( TypedColumn column ) throws SQLException <nl> + { <nl> + / / bit of a hack , this , but asking for getInt seems so common that we should accomodate it <nl> + if ( column . getValue ( ) instanceof BigInteger ) <nl> + return getBigInteger ( column ) . intValue ( ) ; <nl> + else if ( column . getValue ( ) instanceof Long ) <nl> + return getLong ( column ) . intValue ( ) ; <nl> + else <nl> + throw new SQLException ( " Non - integer value " + column . getValue ( ) ) ; <nl> + } <nl> + <nl> + public int getInt ( int index ) throws SQLException <nl> + { <nl> + return getInt ( values . get ( index - 1 ) ) ; <nl> } <nl> <nl> public int getInt ( String name ) throws SQLException <nl> { <nl> - String nameAsString = decoder . colNameAsString ( keyspace , columnFamily , name ) ; <nl> - Object value = valueMap . get ( nameAsString ) ; <nl> + return getInt ( valueMap . get ( decoder . colNameAsString ( keyspace , columnFamily , name ) ) ) ; <nl> + } <nl> + <nl> + private Long getLong ( TypedColumn column ) <nl> + { <nl> + Long value = ( Long ) column . getValue ( ) ; <nl> wasNull = value = = null ; <nl> - return value = = null ? 0 : ( ( BigInteger ) value ) . intValue ( ) ; <nl> + return value = = null ? 0 : value ; <nl> } <nl> <nl> public long getLong ( int index ) throws SQLException <nl> { <nl> - assert values ! = null ; <nl> - TypedColumn column = values . get ( index - 1 ) ; <nl> - assert column ! = null ; <nl> - Object value = column . getValue ( ) ; <nl> - wasNull = value = = null ; <nl> - return value = = null ? 0 : ( Long ) value ; <nl> + return getLong ( values . get ( index - 1 ) ) ; <nl> } <nl> <nl> public long getLong ( String name ) throws SQLException <nl> { <nl> - String nameAsString = decoder . colNameAsString ( keyspace , columnFamily , name ) ; <nl> - Object value = valueMap . get ( nameAsString ) ; <nl> - wasNull = value = = null ; <nl> - return value = = null ? 0 : ( Long ) value ; <nl> + return getLong ( valueMap . get ( decoder . colNameAsString ( keyspace , columnFamily , name ) ) ) ; <nl> } <nl> <nl> public ResultSetMetaData getMetaData ( ) throws SQLException <nl> @ @ - 222 , 21 + 221 , 21 @ @ public class CResultSet extends AbstractResultSet implements CassandraResultSet <nl> return meta ; <nl> } <nl> <nl> - public Object getObject ( int index ) throws SQLException <nl> + private Object getObject ( TypedColumn column ) <nl> { <nl> - TypedColumn column = values . get ( index - 1 ) ; <nl> - assert column ! = null ; <nl> Object value = column . getValue ( ) ; <nl> wasNull = value = = null ; <nl> return value ; <nl> } <nl> <nl> + public Object getObject ( int index ) throws SQLException <nl> + { <nl> + return getObject ( values . get ( index - 1 ) ) ; <nl> + } <nl> + <nl> public Object getObject ( String name ) throws SQLException <nl> { <nl> - String nameAsString = decoder . colNameAsString ( keyspace , columnFamily , name ) ; <nl> - Object value = valueMap . get ( nameAsString ) ; <nl> - wasNull = value = = null ; <nl> - return value ; <nl> + return getObject ( valueMap . get ( decoder . colNameAsString ( keyspace , columnFamily , name ) ) ) ; <nl> } <nl> <nl> public Object getObject ( int arg0 , Map < String , Class < ? > > arg1 ) throws SQLException <nl> @ @ - 254 , 21 + 253 , 21 @ @ public class CResultSet extends AbstractResultSet implements CassandraResultSet <nl> return rowNumber ; <nl> } <nl> <nl> - public String getString ( int index ) throws SQLException <nl> + private String getString ( TypedColumn column ) <nl> { <nl> - TypedColumn column = values . get ( index - 1 ) ; <nl> - assert column ! = null ; <nl> - Object value = column . getValue ( ) ; <nl> + String value = ( String ) column . getValue ( ) ; <nl> wasNull = value = = null ; <nl> - return value = = null ? null : ColumnDecoder . colValueAsString ( value ) ; <nl> + return value = = null ? null : value ; <nl> + } <nl> + <nl> + public String getString ( int index ) throws SQLException <nl> + { <nl> + return getString ( values . get ( index - 1 ) ) ; <nl> } <nl> <nl> public String getString ( String name ) throws SQLException <nl> { <nl> - String nameAsString = this . decoder . colNameAsString ( this . keyspace , this . columnFamily , name ) ; <nl> - Object value = valueMap . get ( nameAsString ) ; <nl> - wasNull = value = = null ; <nl> - return value = = null ? null : ColumnDecoder . colValueAsString ( value ) ; <nl> + return getString ( valueMap . get ( this . decoder . colNameAsString ( this . keyspace , this . columnFamily , name ) ) ) ; <nl> } <nl> <nl> public Time getTime ( int arg0 ) throws SQLException <nl> @ @ - 376 , 7 + 375 , 7 @ @ public class CResultSet extends AbstractResultSet implements CassandraResultSet <nl> <nl> TypedColumn c = decoder . makeCol ( keyspace , columnFamily , col ) ; <nl> values . add ( c ) ; <nl> - valueMap . put ( decoder . colNameAsString ( keyspace , columnFamily , col . getName ( ) ) , c . getValue ( ) ) ; <nl> + valueMap . put ( decoder . colNameAsString ( keyspace , columnFamily , col . getName ( ) ) , c ) ; <nl> } <nl> return ! ( values . isEmpty ( ) & & valueMap . isEmpty ( ) ) ; <nl> } <nl> diff - - git a / drivers / java / src / org / apache / cassandra / cql / jdbc / CassandraResultSet . java b / drivers / java / src / org / apache / cassandra / cql / jdbc / CassandraResultSet . java <nl> index e2d9bf6 . . 4ce4a00 100644 <nl> - - - a / drivers / java / src / org / apache / cassandra / cql / jdbc / CassandraResultSet . java <nl> + + + b / drivers / java / src / org / apache / cassandra / cql / jdbc / CassandraResultSet . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package org . apache . cassandra . cql . jdbc ; <nl> <nl> + import java . math . BigInteger ; <nl> import java . sql . ResultSet ; <nl> <nl> public interface CassandraResultSet extends ResultSet <nl> @ @ - 9 , 13 + 10 , 13 @ @ public interface CassandraResultSet extends ResultSet <nl> * / <nl> public byte [ ] getKey ( ) ; <nl> <nl> - / * * <nl> - * @ return the raw column data for the given column offset <nl> - * / <nl> - public TypedColumn getColumn ( int i ) ; <nl> + / * * @ return a BigInteger value for the given column offset * / <nl> + public BigInteger getBigInteger ( int i ) ; <nl> + / * * @ return a BigInteger value for the given column name * / <nl> + public BigInteger getBigInteger ( String name ) ; <nl> <nl> - / * * <nl> - * @ return the raw column data for the given column name <nl> - * / <nl> + / * * @ return the raw column data for the given column offset * / <nl> + public TypedColumn getColumn ( int i ) ; <nl> + / * * @ return the raw column data for the given column name * / <nl> public TypedColumn getColumn ( String name ) ; <nl> } <nl> diff - - git a / drivers / java / test / org / apache / cassandra / cql / JdbcDriverTest . java b / drivers / java / test / org / apache / cassandra / cql / JdbcDriverTest . java <nl> index e519ebf . . f5301ab 100644 <nl> - - - a / drivers / java / test / org / apache / cassandra / cql / JdbcDriverTest . java <nl> + + + b / drivers / java / test / org / apache / cassandra / cql / JdbcDriverTest . java <nl> @ @ - 108 , 11 + 108 , 10 @ @ public class JdbcDriverTest extends EmbeddedServiceBase <nl> { <nl> String key = FBUtilities . bytesToHex ( " Integer " . getBytes ( ) ) ; <nl> Statement stmt = con . createStatement ( ) ; <nl> - stmt . executeUpdate ( " update JdbcInteger set 1 = 1111 , 2 = 2222 , 42 = ' fortytwofortytwo ' where key = ' " + key + " ' " ) ; <nl> + stmt . executeUpdate ( " update JdbcInteger set 1 = 36893488147419103232 , 42 = ' fortytwofortytwo ' where key = ' " + key + " ' " ) ; <nl> ResultSet rs = stmt . executeQuery ( " select 1 , 2 , 42 from JdbcInteger where key = ' " + key + " ' " ) ; <nl> assert rs . next ( ) ; <nl> - assert rs . getInt ( " 1 " ) = = 1111 ; <nl> - assert rs . getInt ( " 2 " ) = = 2222 ; <nl> + assert rs . getObject ( " 1 " ) . equals ( new BigInteger ( " 36893488147419103232 " ) ) ; <nl> assert rs . getString ( " 42 " ) . equals ( " fortytwofortytwo " ) : rs . getString ( " 42 " ) ; <nl> <nl> ResultSetMetaData md = rs . getMetaData ( ) ; <nl> @ @ - 133 , 34 + 132 , 7 @ @ public class JdbcDriverTest extends EmbeddedServiceBase <nl> expectedMetaData ( md , 2 , String . class . getName ( ) , " JdbcUtf8 " , " Keyspace1 " , " b " , Types . VARCHAR , UTF8Type . class . getSimpleName ( ) , false , true ) ; <nl> expectedMetaData ( md , 3 , BigInteger . class . getName ( ) , " JdbcUtf8 " , " Keyspace1 " , " fortytwo " , Types . BIGINT , IntegerType . class . getSimpleName ( ) , true , false ) ; <nl> } <nl> - <nl> - @ Test <nl> - public void testIntegerMetadata ( ) throws SQLException <nl> - { <nl> - String key = FBUtilities . bytesToHex ( " Integer " . getBytes ( ) ) ; <nl> - Statement stmt = con . createStatement ( ) ; <nl> - stmt . executeUpdate ( " UPDATE JdbcInteger SET 1 = 111 , 2 = 222 WHERE KEY = ' " + key + " ' " ) ; <nl> - ResultSet rs = stmt . executeQuery ( " SELECT 1 , 2 from JdbcInteger WHERE KEY = ' " + key + " ' " ) ; <nl> - assert rs . next ( ) ; <nl> - assert rs . getInt ( " 1 " ) = = 111 ; <nl> - assert rs . getInt ( " 2 " ) = = 222 ; <nl> <nl> - ResultSetMetaData md = rs . getMetaData ( ) ; <nl> - assert md . getColumnCount ( ) = = 2 ; <nl> - expectedMetaData ( md , 1 , BigInteger . class . getName ( ) , " JdbcInteger " , " Keyspace1 " , " 1 " , Types . BIGINT , IntegerType . class . getSimpleName ( ) , true , false ) ; <nl> - expectedMetaData ( md , 2 , BigInteger . class . getName ( ) , " JdbcInteger " , " Keyspace1 " , " 2 " , Types . BIGINT , IntegerType . class . getSimpleName ( ) , true , false ) ; <nl> - <nl> - for ( int i = 0 ; i < md . getColumnCount ( ) ; i + + ) <nl> - expectedMetaData ( md , <nl> - i + 1 , <nl> - BigInteger . class . getName ( ) , <nl> - Types . BIGINT , <nl> - IntegerType . class . getSimpleName ( ) , <nl> - true , <nl> - false ) ; <nl> - <nl> - } <nl> - <nl> @ Test <nl> public void testLongMetadata ( ) throws SQLException <nl> { <nl> @ @ - 257 , 15 + 229 , 9 @ @ public class JdbcDriverTest extends EmbeddedServiceBase <nl> expectedMetaData ( md , 2 , ByteBuffer . class . getName ( ) , " JdbcBytes " , " Keyspace1 " , FBUtilities . bytesToHex ( b ) , Types . BINARY , BytesType . class . getSimpleName ( ) , false , false ) ; <nl> <nl> for ( int i = 0 ; i < md . getColumnCount ( ) ; i + + ) <nl> - expectedMetaData ( md , <nl> - i + 1 , <nl> - ByteBuffer . class . getName ( ) , <nl> - Types . BINARY , <nl> - BytesType . class . getSimpleName ( ) , <nl> - false , <nl> - false ) ; <nl> + expectedMetaData ( md , i + 1 , ByteBuffer . class . getName ( ) , Types . BINARY , BytesType . class . getSimpleName ( ) , false , false ) ; <nl> } <nl> - <nl> + <nl> @ Test <nl> public void testWithStatementBytesType ( ) throws SQLException <nl> { <nl> @ @ - 446 , 9 + 412 , 7 @ @ public class JdbcDriverTest extends EmbeddedServiceBase <nl> actualRows + + ; <nl> for ( int c = 0 ; c < cols . length ; c + + ) <nl> { <nl> - / / getString and getObject should always work . <nl> - assert rs . getString ( cols [ c ] ) ! = null ; <nl> - assert rs . getString ( c + 1 ) ! = null ; <nl> + / / getObject should always work . <nl> assert rs . getObject ( cols [ c ] ) ! = null ; <nl> assert rs . getObject ( c + 1 ) ! = null ; <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 882279f . . 2ed9ce9 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 
 + * Empty INITCOND treated as null in aggregate ( CASSANDRA - 9457 ) 
 * Remove use of Cell in Thrift MapReduce classes ( CASSANDRA - 8609 ) 
 * Integrate pre - release Java Driver 2 . 2 - rc1 , custom build ( CASSANDRA - 9493 ) 
 * Clean up gossiper logic for old versions ( CASSANDRA - 9370 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 index a01f08f . . 0bf6078 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 @ @ - 146 , 8 + 146 , 8 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 public boolean isCallableWrtNullable ( List < ByteBuffer > parameters ) 
 { 
 if ( ! calledOnNullInput ) 
 - for ( ByteBuffer parameter : parameters ) 
 - if ( parameter = = null | | parameter . remaining ( ) = = 0 ) 
 + for ( int i = 0 ; i < parameters . size ( ) ; i + + ) 
 + if ( UDHelper . isNullOrEmpty ( argTypes . get ( i ) , parameters . get ( i ) ) ) 
 return false ; 
 return true ; 
 } 
 @ @ - 194 , 37 + 194 , 42 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 * / 
 protected Object compose ( int protocolVersion , int argIndex , ByteBuffer value ) 
 { 
 - return value = = null ? null : argDataTypes [ argIndex ] . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; 
 + return UDHelper . isNullOrEmpty ( argTypes . get ( argIndex ) , value ) ? null : argDataTypes [ argIndex ] . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; 
 } 
 
 / / do not remove - used by generated Java UDFs 
 protected float compose _ float ( int protocolVersion , int argIndex , ByteBuffer value ) 
 { 
 - return value = = null ? 0f : ( float ) DataType . cfloat ( ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; 
 + assert value ! = null & & value . remaining ( ) > 0 ; 
 + return ( float ) DataType . cfloat ( ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; 
 } 
 
 / / do not remove - used by generated Java UDFs 
 protected double compose _ double ( int protocolVersion , int argIndex , ByteBuffer value ) 
 { 
 - return value = = null ? 0d : ( double ) DataType . cdouble ( ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; 
 + assert value ! = null & & value . remaining ( ) > 0 ; 
 + return ( double ) DataType . cdouble ( ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; 
 } 
 
 / / do not remove - used by generated Java UDFs 
 protected int compose _ int ( int protocolVersion , int argIndex , ByteBuffer value ) 
 { 
 - return value = = null ? 0 : ( int ) DataType . cint ( ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; 
 + assert value ! = null & & value . remaining ( ) > 0 ; 
 + return ( int ) DataType . cint ( ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; 
 } 
 
 / / do not remove - used by generated Java UDFs 
 protected long compose _ long ( int protocolVersion , int argIndex , ByteBuffer value ) 
 { 
 - return value = = null ? 0L : ( long ) DataType . bigint ( ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; 
 + assert value ! = null & & value . remaining ( ) > 0 ; 
 + return ( long ) DataType . bigint ( ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; 
 } 
 
 / / do not remove - used by generated Java UDFs 
 protected boolean compose _ boolean ( int protocolVersion , int argIndex , ByteBuffer value ) 
 { 
 - return value ! = null & & ( boolean ) DataType . cboolean ( ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; 
 + assert value ! = null & & value . remaining ( ) > 0 ; 
 + return ( boolean ) DataType . cboolean ( ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java b / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java 
 index 55a0888 . . d1d12e6 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . cql3 . functions ; 
 import java . lang . invoke . MethodHandle ; 
 import java . lang . invoke . MethodHandles ; 
 import java . lang . reflect . Method ; 
 + import java . nio . ByteBuffer ; 
 import java . util . List ; 
 
 import com . datastax . driver . core . DataType ; 
 @ @ - 119 , 4 + 120 , 10 @ @ public final class UDHelper 
 throw new RuntimeException ( " cannot parse driver type " + cqlType . getType ( ) . toString ( ) , e ) ; 
 } 
 } 
 + 
 + public static boolean isNullOrEmpty ( AbstractType < ? > type , ByteBuffer bb ) 
 + { 
 + return bb = = null | | 
 + ( bb . remaining ( ) = = 0 & & type . isEmptyValueMeaningless ( ) ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java 
 index ae793a3 . . 8b6c8d6 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java 
 @ @ - 112 , 6 + 112 , 8 @ @ public final class CreateAggregateStatement extends SchemaAlteringStatement 
 { 
 ColumnSpecification receiver = new ColumnSpecification ( functionName . keyspace , " - - dummy - - " , new ColumnIdentifier ( " ( aggregate _ initcond ) " , true ) , stateType ) ; 
 initcond = ival . prepare ( functionName . keyspace , receiver ) . bindAndGet ( QueryOptions . DEFAULT ) ; 
 + if ( Constants . NULL _ LITERAL ! = ival & & UDHelper . isNullOrEmpty ( stateType , initcond ) ) 
 + throw new InvalidRequestException ( " INITCOND must not be empty for all types except TEXT , ASCII , BLOB " ) ; 
 } 
 
 return super . prepare ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractType . java b / src / java / org / apache / cassandra / db / marshal / AbstractType . java 
 index 6602414 . . aa25a81 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / AbstractType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / AbstractType . java 
 @ @ - 257 , 6 + 257 , 14 @ @ public abstract class AbstractType < T > implements Comparator < ByteBuffer > 
 } 
 
 / * * 
 + * Returns { @ code true } for types where empty should be handled like { @ code null } like { @ link Int32Type } . 
 + * / 
 + public boolean isEmptyValueMeaningless ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + / * * 
 * @ param ignoreFreezing if true , the type string will not be wrapped with FrozenType ( . . . ) , even if this type is frozen . 
 * / 
 public String toString ( boolean ignoreFreezing ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / BooleanType . java b / src / java / org / apache / cassandra / db / marshal / BooleanType . java 
 index 5c1bf42 . . bfe8c34 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / BooleanType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / BooleanType . java 
 @ @ - 37 , 6 + 37 , 11 @ @ public class BooleanType extends AbstractType < Boolean > 
 
 BooleanType ( ) { } / / singleton 
 
 + public boolean isEmptyValueMeaningless ( ) 
 + { 
 + return true ; 
 + } 
 + 
 public int compare ( ByteBuffer o1 , ByteBuffer o2 ) 
 { 
 if ( ! o1 . hasRemaining ( ) | | ! o2 . hasRemaining ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / CounterColumnType . java b / src / java / org / apache / cassandra / db / marshal / CounterColumnType . java 
 index 0fea87b . . 4b3ce82 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / CounterColumnType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / CounterColumnType . java 
 @ @ - 32 , 6 + 32 , 11 @ @ public class CounterColumnType extends AbstractType < Long > 
 
 CounterColumnType ( ) { } / / singleton 
 
 + public boolean isEmptyValueMeaningless ( ) 
 + { 
 + return true ; 
 + } 
 + 
 public boolean isCounter ( ) 
 { 
 return true ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / DateType . java b / src / java / org / apache / cassandra / db / marshal / DateType . java 
 index 806bbcf . . 359ce52 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / DateType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / DateType . java 
 @ @ - 39 , 6 + 39 , 11 @ @ public class DateType extends AbstractType < Date > 
 
 DateType ( ) { } / / singleton 
 
 + public boolean isEmptyValueMeaningless ( ) 
 + { 
 + return true ; 
 + } 
 + 
 public int compare ( ByteBuffer o1 , ByteBuffer o2 ) 
 { 
 if ( ! o1 . hasRemaining ( ) | | ! o2 . hasRemaining ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / DecimalType . java b / src / java / org / apache / cassandra / db / marshal / DecimalType . java 
 index f1388ce . . 4052d70 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / DecimalType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / DecimalType . java 
 @ @ - 34 , 6 + 34 , 11 @ @ public class DecimalType extends AbstractType < BigDecimal > 
 
 DecimalType ( ) { } / / singleton 
 
 + public boolean isEmptyValueMeaningless ( ) 
 + { 
 + return true ; 
 + } 
 + 
 public int compare ( ByteBuffer o1 , ByteBuffer o2 ) 
 { 
 if ( ! o1 . hasRemaining ( ) | | ! o2 . hasRemaining ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / DoubleType . java b / src / java / org / apache / cassandra / db / marshal / DoubleType . java 
 index fdfd2d2 . . 661b3c9 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / DoubleType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / DoubleType . java 
 @ @ - 33 , 6 + 33 , 11 @ @ public class DoubleType extends AbstractType < Double > 
 
 DoubleType ( ) { } / / singleton 
 
 + public boolean isEmptyValueMeaningless ( ) 
 + { 
 + return true ; 
 + } 
 + 
 public int compare ( ByteBuffer o1 , ByteBuffer o2 ) 
 { 
 if ( ! o1 . hasRemaining ( ) | | ! o2 . hasRemaining ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / FloatType . java b / src / java / org / apache / cassandra / db / marshal / FloatType . java 
 index 722df87 . . af02cad 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / FloatType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / FloatType . java 
 @ @ - 34 , 6 + 34 , 11 @ @ public class FloatType extends AbstractType < Float > 
 
 FloatType ( ) { } / / singleton 
 
 + public boolean isEmptyValueMeaningless ( ) 
 + { 
 + return true ; 
 + } 
 + 
 public int compare ( ByteBuffer o1 , ByteBuffer o2 ) 
 { 
 if ( ! o1 . hasRemaining ( ) | | ! o2 . hasRemaining ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / InetAddressType . java b / src / java / org / apache / cassandra / db / marshal / InetAddressType . java 
 index a4eac07 . . 4901c74 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / InetAddressType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / InetAddressType . java 
 @ @ - 34 , 6 + 34 , 11 @ @ public class InetAddressType extends AbstractType < InetAddress > 
 
 InetAddressType ( ) { } / / singleton 
 
 + public boolean isEmptyValueMeaningless ( ) 
 + { 
 + return true ; 
 + } 
 + 
 public int compare ( ByteBuffer o1 , ByteBuffer o2 ) 
 { 
 return ByteBufferUtil . compareUnsigned ( o1 , o2 ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / Int32Type . java b / src / java / org / apache / cassandra / db / marshal / Int32Type . java 
 index 9ea8f78 . . 67d8142 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / Int32Type . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / Int32Type . java 
 @ @ - 35 , 6 + 35 , 11 @ @ public class Int32Type extends AbstractType < Integer > 
 { 
 } / / singleton 
 
 + public boolean isEmptyValueMeaningless ( ) 
 + { 
 + return true ; 
 + } 
 + 
 public int compare ( ByteBuffer o1 , ByteBuffer o2 ) 
 { 
 if ( ! o1 . hasRemaining ( ) | | ! o2 . hasRemaining ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / IntegerType . java b / src / java / org / apache / cassandra / db / marshal / IntegerType . java 
 index 5fe8fd8 . . a3741d4 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / IntegerType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / IntegerType . java 
 @ @ - 60 , 6 + 60 , 11 @ @ public final class IntegerType extends AbstractType < BigInteger > 
 
 IntegerType ( ) { / * singleton * / } 
 
 + public boolean isEmptyValueMeaningless ( ) 
 + { 
 + return true ; 
 + } 
 + 
 public int compare ( ByteBuffer lhs , ByteBuffer rhs ) 
 { 
 return IntegerType . compareIntegers ( lhs , rhs ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java b / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java 
 index 3ca5c74 . . 3e00d71 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java 
 @ @ - 36 , 6 + 36 , 11 @ @ public class LexicalUUIDType extends AbstractType < UUID > 
 { 
 } / / singleton 
 
 + public boolean isEmptyValueMeaningless ( ) 
 + { 
 + return true ; 
 + } 
 + 
 public int compare ( ByteBuffer o1 , ByteBuffer o2 ) 
 { 
 if ( ! o1 . hasRemaining ( ) | | ! o2 . hasRemaining ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / LongType . java b / src / java / org / apache / cassandra / db / marshal / LongType . java 
 index 31bad93 . . d77d7d0 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / LongType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / LongType . java 
 @ @ - 33 , 6 + 33 , 11 @ @ public class LongType extends AbstractType < Long > 
 
 LongType ( ) { } / / singleton 
 
 + public boolean isEmptyValueMeaningless ( ) 
 + { 
 + return true ; 
 + } 
 + 
 public int compare ( ByteBuffer o1 , ByteBuffer o2 ) 
 { 
 return compareLongs ( o1 , o2 ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / ReversedType . java b / src / java / org / apache / cassandra / db / marshal / ReversedType . java 
 index 14d069a . . 2181f74 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / ReversedType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / ReversedType . java 
 @ @ - 60 , 6 + 60 , 11 @ @ public class ReversedType < T > extends AbstractType < T > 
 this . baseType = baseType ; 
 } 
 
 + public boolean isEmptyValueMeaningless ( ) 
 + { 
 + return baseType . isEmptyValueMeaningless ( ) ; 
 + } 
 + 
 public int compare ( ByteBuffer o1 , ByteBuffer o2 ) 
 { 
 / / An empty byte buffer is always smaller 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 index 3b38582 . . a1d8d82 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 @ @ - 35 , 6 + 35 , 11 @ @ public class TimeUUIDType extends AbstractType < UUID > 
 { 
 } / / singleton 
 
 + public boolean isEmptyValueMeaningless ( ) 
 + { 
 + return true ; 
 + } 
 + 
 public int compare ( ByteBuffer b1 , ByteBuffer b2 ) 
 { 
 / / Compare for length 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / TimestampType . java b / src / java / org / apache / cassandra / db / marshal / TimestampType . java 
 index 095f2c2 . . 38e0296 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / TimestampType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / TimestampType . java 
 @ @ - 45 , 6 + 45 , 11 @ @ public class TimestampType extends AbstractType < Date > 
 
 private TimestampType ( ) { } / / singleton 
 
 + public boolean isEmptyValueMeaningless ( ) 
 + { 
 + return true ; 
 + } 
 + 
 public int compare ( ByteBuffer o1 , ByteBuffer o2 ) 
 { 
 return LongType . compareLongs ( o1 , o2 ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / UUIDType . java b / src / java / org / apache / cassandra / db / marshal / UUIDType . java 
 index eba696e . . 0250eb20 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / UUIDType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / UUIDType . java 
 @ @ - 50 , 6 + 50 , 11 @ @ public class UUIDType extends AbstractType < UUID > 
 { 
 } 
 
 + public boolean isEmptyValueMeaningless ( ) 
 + { 
 + return true ; 
 + } 
 + 
 public int compare ( ByteBuffer b1 , ByteBuffer b2 ) 
 { 
 / / Compare for length 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / AggregationTest . java 
 index af775e6 . . af68ddc 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / AggregationTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / AggregationTest . java 
 @ @ - 1378 , 4 + 1378 , 73 @ @ public class AggregationTest extends CQLTester 
 assertInvalidMessage ( " The function arguments should not be frozen " , 
 " DROP AGGREGATE % s ( frozen < " + myType + " > ) ; " ) ; 
 } 
 + 
 + @ Test 
 + public void testEmptyValues ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a int primary key , b text ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b ) VALUES ( 1 , ' ' ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b ) VALUES ( 2 , ' ' ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b ) VALUES ( 3 , ' ' ) " ) ; 
 + 
 + String fCON = createFunction ( KEYSPACE , 
 + " text , text " , 
 + " CREATE FUNCTION % s ( a text , b text ) " + 
 + " CALLED ON NULL INPUT " + 
 + " RETURNS text " + 
 + " LANGUAGE java " + 
 + " AS ' return a + \ " x \ " + b + \ " y \ " ; ' " ) ; 
 + 
 + String fCONf = createFunction ( KEYSPACE , 
 + " text " , 
 + " CREATE FUNCTION % s ( a text ) " + 
 + " CALLED ON NULL INPUT " + 
 + " RETURNS text " + 
 + " LANGUAGE java " + 
 + " AS ' return \ " fin \ " + a ; ' " ) ; 
 + 
 + String aCON = createAggregate ( KEYSPACE , 
 + " text , text " , 
 + " CREATE AGGREGATE % s ( text ) " + 
 + " SFUNC " + shortFunctionName ( fCON ) + ' ' + 
 + " STYPE text " + 
 + " FINALFUNC " + shortFunctionName ( fCONf ) + ' ' + 
 + " INITCOND ' ' " ) ; 
 + 
 + String fRNON = createFunction ( KEYSPACE , 
 + " text " , 
 + " CREATE FUNCTION % s ( a text , b text ) " + 
 + " RETURNS NULL ON NULL INPUT " + 
 + " RETURNS text " + 
 + " LANGUAGE java " + 
 + " AS ' return a + \ " x \ " + b + \ " y \ " ; ' " ) ; 
 + 
 + String fRNONf = createFunction ( KEYSPACE , 
 + " text " , 
 + " CREATE FUNCTION % s ( a text ) " + 
 + " RETURNS NULL ON NULL INPUT " + 
 + " RETURNS text " + 
 + " LANGUAGE java " + 
 + " AS ' return \ " fin \ " + a ; ' " ) ; 
 + 
 + String aRNON = createAggregate ( KEYSPACE , 
 + " int , int " , 
 + " CREATE AGGREGATE % s ( text ) " + 
 + " SFUNC " + shortFunctionName ( fRNON ) + ' ' + 
 + " STYPE text " + 
 + " FINALFUNC " + shortFunctionName ( fRNONf ) + ' ' + 
 + " INITCOND ' ' " ) ; 
 + 
 + assertRows ( execute ( " SELECT " + aCON + " ( b ) FROM % s " ) , row ( " finxyxyxy " ) ) ; 
 + assertRows ( execute ( " SELECT " + aRNON + " ( b ) FROM % s " ) , row ( " finxyxyxy " ) ) ; 
 + 
 + createTable ( " CREATE TABLE % s ( a int primary key , b text ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b ) VALUES ( 1 , null ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b ) VALUES ( 2 , null ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b ) VALUES ( 3 , null ) " ) ; 
 + 
 + assertRows ( execute ( " SELECT " + aCON + " ( b ) FROM % s " ) , row ( " finxnullyxnullyxnully " ) ) ; 
 + assertRows ( execute ( " SELECT " + aRNON + " ( b ) FROM % s " ) , row ( " fin " ) ) ; 
 + 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / UDHelperTest . java b / test / unit / org / apache / cassandra / cql3 / UDHelperTest . java 
 new file mode 100644 
 index 0000000 . . 4a5e78e 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / cql3 / UDHelperTest . java 
 @ @ - 0 , 0 + 1 , 146 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . cql3 ; 
 + 
 + import java . nio . ByteBuffer ; 
 + 
 + import org . junit . Assert ; 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . cql3 . functions . UDHelper ; 
 + import org . apache . cassandra . db . marshal . AbstractType ; 
 + import org . apache . cassandra . db . marshal . AsciiType ; 
 + import org . apache . cassandra . db . marshal . BooleanType ; 
 + import org . apache . cassandra . db . marshal . ByteType ; 
 + import org . apache . cassandra . db . marshal . BytesType ; 
 + import org . apache . cassandra . db . marshal . CounterColumnType ; 
 + import org . apache . cassandra . db . marshal . DateType ; 
 + import org . apache . cassandra . db . marshal . DecimalType ; 
 + import org . apache . cassandra . db . marshal . DoubleType ; 
 + import org . apache . cassandra . db . marshal . FloatType ; 
 + import org . apache . cassandra . db . marshal . InetAddressType ; 
 + import org . apache . cassandra . db . marshal . Int32Type ; 
 + import org . apache . cassandra . db . marshal . IntegerType ; 
 + import org . apache . cassandra . db . marshal . LongType ; 
 + import org . apache . cassandra . db . marshal . ReversedType ; 
 + import org . apache . cassandra . db . marshal . ShortType ; 
 + import org . apache . cassandra . db . marshal . SimpleDateType ; 
 + import org . apache . cassandra . db . marshal . TimeType ; 
 + import org . apache . cassandra . db . marshal . TimeUUIDType ; 
 + import org . apache . cassandra . db . marshal . TimestampType ; 
 + import org . apache . cassandra . db . marshal . UTF8Type ; 
 + import org . apache . cassandra . db . marshal . UUIDType ; 
 + import org . apache . cassandra . serializers . MarshalException ; 
 + import org . apache . cassandra . serializers . TypeSerializer ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + 
 + public class UDHelperTest 
 + { 
 + static class UFTestCustomType extends AbstractType < String > 
 + { 
 + 
 + public ByteBuffer fromString ( String source ) throws MarshalException 
 + { 
 + return ByteBuffer . wrap ( source . getBytes ( ) ) ; 
 + } 
 + 
 + public Term fromJSONObject ( Object parsed ) throws MarshalException 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 + public TypeSerializer < String > getSerializer ( ) 
 + { 
 + return UTF8Type . instance . getSerializer ( ) ; 
 + } 
 + 
 + public int compare ( ByteBuffer o1 , ByteBuffer o2 ) 
 + { 
 + return o1 . compareTo ( o2 ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testEmptyVariableLengthTypes ( ) 
 + { 
 + AbstractType < ? > [ ] types = new AbstractType < ? > [ ] { 
 + AsciiType . instance , 
 + BytesType . instance , 
 + UTF8Type . instance , 
 + new UFTestCustomType ( ) 
 + } ; 
 + 
 + for ( AbstractType < ? > type : types ) 
 + { 
 + Assert . assertFalse ( " type " + type . getClass ( ) . getName ( ) , 
 + UDHelper . isNullOrEmpty ( type , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testNonEmptyPrimitiveTypes ( ) 
 + { 
 + AbstractType < ? > [ ] types = new AbstractType < ? > [ ] { 
 + TimeType . instance , 
 + SimpleDateType . instance , 
 + ByteType . instance , 
 + ShortType . instance 
 + } ; 
 + 
 + for ( AbstractType < ? > type : types ) 
 + { 
 + try 
 + { 
 + type . getSerializer ( ) . validate ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ; 
 + Assert . fail ( type . getClass ( ) . getSimpleName ( ) ) ; 
 + } 
 + catch ( MarshalException e ) 
 + { 
 + / / 
 + } 
 + } 
 + } 
 + 
 + @ Test 
 + public void testEmptiableTypes ( ) 
 + { 
 + AbstractType < ? > [ ] types = new AbstractType < ? > [ ] { 
 + BooleanType . instance , 
 + CounterColumnType . instance , 
 + DateType . instance , 
 + DecimalType . instance , 
 + DoubleType . instance , 
 + FloatType . instance , 
 + InetAddressType . instance , 
 + Int32Type . instance , 
 + IntegerType . instance , 
 + LongType . instance , 
 + TimestampType . instance , 
 + TimeUUIDType . instance , 
 + UUIDType . instance 
 + } ; 
 + 
 + for ( AbstractType < ? > type : types ) 
 + { 
 + Assert . assertTrue ( type . getClass ( ) . getSimpleName ( ) , UDHelper . isNullOrEmpty ( type , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; 
 + Assert . assertTrue ( " reversed " + type . getClass ( ) . getSimpleName ( ) , 
 + UDHelper . isNullOrEmpty ( ReversedType . getInstance ( type ) , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; 
 + } 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / UFTest . java b / test / unit / org / apache / cassandra / cql3 / UFTest . java 
 index e1b2b5f . . f041b3a 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / UFTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / UFTest . java 
 @ @ - 18 , 10 + 18 , 17 @ @ 
 package org . apache . cassandra . cql3 ; 
 import java . math . BigDecimal ; 
 import java . math . BigInteger ; 
 - import java . util . * ; 
 + import java . nio . ByteBuffer ; 
 + import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 + import java . util . Date ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . Set ; 
 + import java . util . TreeMap ; 
 + import java . util . TreeSet ; 
 
 import org . junit . Assert ; 
 - import org . junit . Ignore ; 
 import org . junit . Test ; 
 
 import com . datastax . driver . core . * ; 
 @ @ - 36 , 6 + 43 , 7 @ @ import org . apache . cassandra . service . ClientState ; 
 import org . apache . cassandra . transport . Event ; 
 import org . apache . cassandra . transport . Server ; 
 import org . apache . cassandra . transport . messages . ResultMessage ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 public class UFTest extends CQLTester 
 { 
 @ @ - 2442 , 4 + 2450 , 112 @ @ public class UFTest extends CQLTester 
 assertInvalidMessage ( " The function arguments should not be frozen " , 
 " DROP FUNCTION " + functionName + " ( frozen < " + myType + " > ) ; " ) ; 
 } 
 + 
 + @ Test 
 + public void testEmptyString ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( key int primary key , sval text , aval ascii , bval blob , empty _ int int ) " ) ; 
 + execute ( " INSERT INTO % s ( key , sval , aval , bval , empty _ int ) VALUES ( ? , ? , ? , ? , blobAsInt ( 0x ) ) " , 1 , " " , " " , ByteBuffer . allocate ( 0 ) ) ; 
 + 
 + String fNameSRC = createFunction ( KEYSPACE _ PER _ TEST , " text " , 
 + " CREATE OR REPLACE FUNCTION % s ( val text ) " + 
 + " CALLED ON NULL INPUT " + 
 + " RETURNS text " + 
 + " LANGUAGE JAVA \ n " + 
 + " AS ' return val ; ' " ) ; 
 + 
 + String fNameSCC = createFunction ( KEYSPACE _ PER _ TEST , " text " , 
 + " CREATE OR REPLACE FUNCTION % s ( val text ) " + 
 + " CALLED ON NULL INPUT " + 
 + " RETURNS text " + 
 + " LANGUAGE JAVA \ n " + 
 + " AS ' return \ " \ " ; ' " ) ; 
 + 
 + String fNameSRN = createFunction ( KEYSPACE _ PER _ TEST , " text " , 
 + " CREATE OR REPLACE FUNCTION % s ( val text ) " + 
 + " RETURNS NULL ON NULL INPUT " + 
 + " RETURNS text " + 
 + " LANGUAGE JAVA \ n " + 
 + " AS ' return val ; ' " ) ; 
 + 
 + String fNameSCN = createFunction ( KEYSPACE _ PER _ TEST , " text " , 
 + " CREATE OR REPLACE FUNCTION % s ( val text ) " + 
 + " RETURNS NULL ON NULL INPUT " + 
 + " RETURNS text " + 
 + " LANGUAGE JAVA \ n " + 
 + " AS ' return \ " \ " ; ' " ) ; 
 + 
 + String fNameBRC = createFunction ( KEYSPACE _ PER _ TEST , " blob " , 
 + " CREATE OR REPLACE FUNCTION % s ( val blob ) " + 
 + " CALLED ON NULL INPUT " + 
 + " RETURNS blob " + 
 + " LANGUAGE JAVA \ n " + 
 + " AS ' return val ; ' " ) ; 
 + 
 + String fNameBCC = createFunction ( KEYSPACE _ PER _ TEST , " blob " , 
 + " CREATE OR REPLACE FUNCTION % s ( val blob ) " + 
 + " CALLED ON NULL INPUT " + 
 + " RETURNS blob " + 
 + " LANGUAGE JAVA \ n " + 
 + " AS ' return ByteBuffer . allocate ( 0 ) ; ' " ) ; 
 + 
 + String fNameBRN = createFunction ( KEYSPACE _ PER _ TEST , " blob " , 
 + " CREATE OR REPLACE FUNCTION % s ( val blob ) " + 
 + " RETURNS NULL ON NULL INPUT " + 
 + " RETURNS blob " + 
 + " LANGUAGE JAVA \ n " + 
 + " AS ' return val ; ' " ) ; 
 + 
 + String fNameBCN = createFunction ( KEYSPACE _ PER _ TEST , " blob " , 
 + " CREATE OR REPLACE FUNCTION % s ( val blob ) " + 
 + " RETURNS NULL ON NULL INPUT " + 
 + " RETURNS blob " + 
 + " LANGUAGE JAVA \ n " + 
 + " AS ' return ByteBuffer . allocate ( 0 ) ; ' " ) ; 
 + 
 + String fNameIRC = createFunction ( KEYSPACE _ PER _ TEST , " int " , 
 + " CREATE OR REPLACE FUNCTION % s ( val int ) " + 
 + " CALLED ON NULL INPUT " + 
 + " RETURNS int " + 
 + " LANGUAGE JAVA \ n " + 
 + " AS ' return val ; ' " ) ; 
 + 
 + String fNameICC = createFunction ( KEYSPACE _ PER _ TEST , " int " , 
 + " CREATE OR REPLACE FUNCTION % s ( val int ) " + 
 + " CALLED ON NULL INPUT " + 
 + " RETURNS int " + 
 + " LANGUAGE JAVA \ n " + 
 + " AS ' return 0 ; ' " ) ; 
 + 
 + String fNameIRN = createFunction ( KEYSPACE _ PER _ TEST , " int " , 
 + " CREATE OR REPLACE FUNCTION % s ( val int ) " + 
 + " RETURNS NULL ON NULL INPUT " + 
 + " RETURNS int " + 
 + " LANGUAGE JAVA \ n " + 
 + " AS ' return val ; ' " ) ; 
 + 
 + String fNameICN = createFunction ( KEYSPACE _ PER _ TEST , " blob " , 
 + " CREATE OR REPLACE FUNCTION % s ( val int ) " + 
 + " RETURNS NULL ON NULL INPUT " + 
 + " RETURNS int " + 
 + " LANGUAGE JAVA \ n " + 
 + " AS ' return 0 ; ' " ) ; 
 + 
 + assertRows ( execute ( " SELECT " + fNameSRC + " ( sval ) FROM % s " ) , row ( " " ) ) ; 
 + assertRows ( execute ( " SELECT " + fNameSRN + " ( sval ) FROM % s " ) , row ( " " ) ) ; 
 + assertRows ( execute ( " SELECT " + fNameSCC + " ( sval ) FROM % s " ) , row ( " " ) ) ; 
 + assertRows ( execute ( " SELECT " + fNameSCN + " ( sval ) FROM % s " ) , row ( " " ) ) ; 
 + assertRows ( execute ( " SELECT " + fNameSRC + " ( aval ) FROM % s " ) , row ( " " ) ) ; 
 + assertRows ( execute ( " SELECT " + fNameSRN + " ( aval ) FROM % s " ) , row ( " " ) ) ; 
 + assertRows ( execute ( " SELECT " + fNameSCC + " ( aval ) FROM % s " ) , row ( " " ) ) ; 
 + assertRows ( execute ( " SELECT " + fNameSCN + " ( aval ) FROM % s " ) , row ( " " ) ) ; 
 + assertRows ( execute ( " SELECT " + fNameBRC + " ( bval ) FROM % s " ) , row ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; 
 + assertRows ( execute ( " SELECT " + fNameBRN + " ( bval ) FROM % s " ) , row ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; 
 + assertRows ( execute ( " SELECT " + fNameBCC + " ( bval ) FROM % s " ) , row ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; 
 + assertRows ( execute ( " SELECT " + fNameBCN + " ( bval ) FROM % s " ) , row ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; 
 + assertRows ( execute ( " SELECT " + fNameIRC + " ( empty _ int ) FROM % s " ) , row ( new Object [ ] { null } ) ) ; 
 + assertRows ( execute ( " SELECT " + fNameIRN + " ( empty _ int ) FROM % s " ) , row ( new Object [ ] { null } ) ) ; 
 + assertRows ( execute ( " SELECT " + fNameICC + " ( empty _ int ) FROM % s " ) , row ( 0 ) ) ; 
 + assertRows ( execute ( " SELECT " + fNameICN + " ( empty _ int ) FROM % s " ) , row ( new Object [ ] { null } ) ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / drivers / java / src / org / apache / cassandra / cql / jdbc / AbstractResultSet . java b / drivers / java / src / org / apache / cassandra / cql / jdbc / AbstractResultSet . java 
 index 50113f3 . . 1b0d09f 100644 
 - - - a / drivers / java / src / org / apache / cassandra / cql / jdbc / AbstractResultSet . java 
 + + + b / drivers / java / src / org / apache / cassandra / cql / jdbc / AbstractResultSet . java 
 @ @ - 299 , 6 + 299 , 26 @ @ class AbstractResultSet 
 throw new UnsupportedOperationException ( " method not supported " ) ; 
 } 
 
 + public BigDecimal getBigDecimal ( int arg0 ) throws SQLException 
 + { 
 + throw new UnsupportedOperationException ( " method not supported " ) ; 
 + } 
 + 
 + public BigDecimal getBigDecimal ( String arg0 ) throws SQLException 
 + { 
 + throw new UnsupportedOperationException ( " method not supported " ) ; 
 + } 
 + 
 + public BigDecimal getBigDecimal ( int arg0 , int arg1 ) throws SQLException 
 + { 
 + throw new UnsupportedOperationException ( " method not supported " ) ; 
 + } 
 + 
 + public BigDecimal getBigDecimal ( String arg0 , int arg1 ) throws SQLException 
 + { 
 + throw new UnsupportedOperationException ( " method not supported " ) ; 
 + } 
 + 
 / / 
 / / all the update methods are unsupported , requires a separate statement in Cassandra 
 / / 
 diff - - git a / drivers / java / src / org / apache / cassandra / cql / jdbc / CResultSet . java b / drivers / java / src / org / apache / cassandra / cql / jdbc / CResultSet . java 
 index 6d13286 . . 17b968b 100644 
 - - - a / drivers / java / src / org / apache / cassandra / cql / jdbc / CResultSet . java 
 + + + b / drivers / java / src / org / apache / cassandra / cql / jdbc / CResultSet . java 
 @ @ - 53 , 8 + 53 , 7 @ @ public class CResultSet extends AbstractResultSet implements CassandraResultSet 
 private List < TypedColumn > values = new ArrayList < TypedColumn > ( ) ; 
 
 / * * The value map . * / 
 - / / TODO should map < String , TypedColumn > so we can throw appropriate exception if user asks for non - existant column name 
 - private Map < String , Object > valueMap = new WeakHashMap < String , Object > ( ) ; 
 + private Map < String , TypedColumn > valueMap = new HashMap < String , TypedColumn > ( ) ; 
 
 private final CResultSetMetaData meta ; 
 
 @ @ - 86 , 7 + 85 , 7 @ @ public class CResultSet extends AbstractResultSet implements CassandraResultSet 
 
 public TypedColumn getColumn ( String name ) 
 { 
 - throw new UnsupportedOperationException ( " need to convert valueMap to TypedColumn first " ) ; 
 + return valueMap . get ( name ) ; 
 } 
 
 public void close ( ) throws SQLException 
 @ @ - 95 , 41 + 94 , 21 @ @ public class CResultSet extends AbstractResultSet implements CassandraResultSet 
 values = null ; 
 } 
 
 - public BigDecimal getBigDecimal ( int arg0 ) throws SQLException 
 + private byte [ ] getBytes ( TypedColumn column ) 
 { 
 - throw new UnsupportedOperationException ( " method not supported " ) ; 
 - } 
 - 
 - public BigDecimal getBigDecimal ( String arg0 ) throws SQLException 
 - { 
 - throw new UnsupportedOperationException ( " method not supported " ) ; 
 - } 
 - 
 - public BigDecimal getBigDecimal ( int arg0 , int arg1 ) throws SQLException 
 - { 
 - throw new UnsupportedOperationException ( " method not supported " ) ; 
 - } 
 - 
 - public BigDecimal getBigDecimal ( String arg0 , int arg1 ) throws SQLException 
 - { 
 - throw new UnsupportedOperationException ( " method not supported " ) ; 
 + ByteBuffer value = ( ByteBuffer ) column . getValue ( ) ; 
 + wasNull = value = = null ; 
 + return value = = null ? null : ByteBufferUtil . clone ( value ) . array ( ) ; 
 } 
 
 public byte [ ] getBytes ( int index ) throws SQLException 
 { 
 - TypedColumn column = values . get ( index - 1 ) ; 
 - assert column ! = null ; 
 - Object value = column . getValue ( ) ; 
 - wasNull = value = = null ; 
 - return value = = null ? null : ByteBufferUtil . clone ( ( ByteBuffer ) value ) . array ( ) ; 
 + return getBytes ( values . get ( index - 1 ) ) ; 
 } 
 
 public byte [ ] getBytes ( String name ) throws SQLException 
 { 
 - String nameAsString = decoder . colNameAsString ( keyspace , columnFamily , name ) ; 
 - Object value = valueMap . get ( nameAsString ) ; 
 - wasNull = value = = null ; 
 - return value = = null ? null : ByteBufferUtil . clone ( ( ByteBuffer ) value ) . array ( ) ; 
 + return getBytes ( valueMap . get ( decoder . colNameAsString ( keyspace , columnFamily , name ) ) ) ; 
 } 
 
 public Date getDate ( int arg0 ) throws SQLException 
 @ @ - 182 , 39 + 161 , 59 @ @ public class CResultSet extends AbstractResultSet implements CassandraResultSet 
 throw new UnsupportedOperationException ( " method not supported " ) ; 
 } 
 
 - public int getInt ( int index ) throws SQLException 
 + private BigInteger getBigInteger ( TypedColumn column ) 
 { 
 - TypedColumn column = values . get ( index - 1 ) ; 
 - assert column ! = null ; 
 - Object value = column . getValue ( ) ; 
 + BigInteger value = ( BigInteger ) column . getValue ( ) ; 
 wasNull = value = = null ; 
 - return value = = null ? 0 : ( ( BigInteger ) value ) . intValue ( ) ; 
 + return value ; 
 + } 
 + 
 + public BigInteger getBigInteger ( int i ) 
 + { 
 + return getBigInteger ( values . get ( i - 1 ) ) ; 
 + } 
 + 
 + public BigInteger getBigInteger ( String name ) 
 + { 
 + return getBigInteger ( valueMap . get ( decoder . colNameAsString ( keyspace , columnFamily , name ) ) ) ; 
 + } 
 + 
 + private int getInt ( TypedColumn column ) throws SQLException 
 + { 
 + / / bit of a hack , this , but asking for getInt seems so common that we should accomodate it 
 + if ( column . getValue ( ) instanceof BigInteger ) 
 + return getBigInteger ( column ) . intValue ( ) ; 
 + else if ( column . getValue ( ) instanceof Long ) 
 + return getLong ( column ) . intValue ( ) ; 
 + else 
 + throw new SQLException ( " Non - integer value " + column . getValue ( ) ) ; 
 + } 
 + 
 + public int getInt ( int index ) throws SQLException 
 + { 
 + return getInt ( values . get ( index - 1 ) ) ; 
 } 
 
 public int getInt ( String name ) throws SQLException 
 { 
 - String nameAsString = decoder . colNameAsString ( keyspace , columnFamily , name ) ; 
 - Object value = valueMap . get ( nameAsString ) ; 
 + return getInt ( valueMap . get ( decoder . colNameAsString ( keyspace , columnFamily , name ) ) ) ; 
 + } 
 + 
 + private Long getLong ( TypedColumn column ) 
 + { 
 + Long value = ( Long ) column . getValue ( ) ; 
 wasNull = value = = null ; 
 - return value = = null ? 0 : ( ( BigInteger ) value ) . intValue ( ) ; 
 + return value = = null ? 0 : value ; 
 } 
 
 public long getLong ( int index ) throws SQLException 
 { 
 - assert values ! = null ; 
 - TypedColumn column = values . get ( index - 1 ) ; 
 - assert column ! = null ; 
 - Object value = column . getValue ( ) ; 
 - wasNull = value = = null ; 
 - return value = = null ? 0 : ( Long ) value ; 
 + return getLong ( values . get ( index - 1 ) ) ; 
 } 
 
 public long getLong ( String name ) throws SQLException 
 { 
 - String nameAsString = decoder . colNameAsString ( keyspace , columnFamily , name ) ; 
 - Object value = valueMap . get ( nameAsString ) ; 
 - wasNull = value = = null ; 
 - return value = = null ? 0 : ( Long ) value ; 
 + return getLong ( valueMap . get ( decoder . colNameAsString ( keyspace , columnFamily , name ) ) ) ; 
 } 
 
 public ResultSetMetaData getMetaData ( ) throws SQLException 
 @ @ - 222 , 21 + 221 , 21 @ @ public class CResultSet extends AbstractResultSet implements CassandraResultSet 
 return meta ; 
 } 
 
 - public Object getObject ( int index ) throws SQLException 
 + private Object getObject ( TypedColumn column ) 
 { 
 - TypedColumn column = values . get ( index - 1 ) ; 
 - assert column ! = null ; 
 Object value = column . getValue ( ) ; 
 wasNull = value = = null ; 
 return value ; 
 } 
 
 + public Object getObject ( int index ) throws SQLException 
 + { 
 + return getObject ( values . get ( index - 1 ) ) ; 
 + } 
 + 
 public Object getObject ( String name ) throws SQLException 
 { 
 - String nameAsString = decoder . colNameAsString ( keyspace , columnFamily , name ) ; 
 - Object value = valueMap . get ( nameAsString ) ; 
 - wasNull = value = = null ; 
 - return value ; 
 + return getObject ( valueMap . get ( decoder . colNameAsString ( keyspace , columnFamily , name ) ) ) ; 
 } 
 
 public Object getObject ( int arg0 , Map < String , Class < ? > > arg1 ) throws SQLException 
 @ @ - 254 , 21 + 253 , 21 @ @ public class CResultSet extends AbstractResultSet implements CassandraResultSet 
 return rowNumber ; 
 } 
 
 - public String getString ( int index ) throws SQLException 
 + private String getString ( TypedColumn column ) 
 { 
 - TypedColumn column = values . get ( index - 1 ) ; 
 - assert column ! = null ; 
 - Object value = column . getValue ( ) ; 
 + String value = ( String ) column . getValue ( ) ; 
 wasNull = value = = null ; 
 - return value = = null ? null : ColumnDecoder . colValueAsString ( value ) ; 
 + return value = = null ? null : value ; 
 + } 
 + 
 + public String getString ( int index ) throws SQLException 
 + { 
 + return getString ( values . get ( index - 1 ) ) ; 
 } 
 
 public String getString ( String name ) throws SQLException 
 { 
 - String nameAsString = this . decoder . colNameAsString ( this . keyspace , this . columnFamily , name ) ; 
 - Object value = valueMap . get ( nameAsString ) ; 
 - wasNull = value = = null ; 
 - return value = = null ? null : ColumnDecoder . colValueAsString ( value ) ; 
 + return getString ( valueMap . get ( this . decoder . colNameAsString ( this . keyspace , this . columnFamily , name ) ) ) ; 
 } 
 
 public Time getTime ( int arg0 ) throws SQLException 
 @ @ - 376 , 7 + 375 , 7 @ @ public class CResultSet extends AbstractResultSet implements CassandraResultSet 
 
 TypedColumn c = decoder . makeCol ( keyspace , columnFamily , col ) ; 
 values . add ( c ) ; 
 - valueMap . put ( decoder . colNameAsString ( keyspace , columnFamily , col . getName ( ) ) , c . getValue ( ) ) ; 
 + valueMap . put ( decoder . colNameAsString ( keyspace , columnFamily , col . getName ( ) ) , c ) ; 
 } 
 return ! ( values . isEmpty ( ) & & valueMap . isEmpty ( ) ) ; 
 } 
 diff - - git a / drivers / java / src / org / apache / cassandra / cql / jdbc / CassandraResultSet . java b / drivers / java / src / org / apache / cassandra / cql / jdbc / CassandraResultSet . java 
 index e2d9bf6 . . 4ce4a00 100644 
 - - - a / drivers / java / src / org / apache / cassandra / cql / jdbc / CassandraResultSet . java 
 + + + b / drivers / java / src / org / apache / cassandra / cql / jdbc / CassandraResultSet . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package org . apache . cassandra . cql . jdbc ; 
 
 + import java . math . BigInteger ; 
 import java . sql . ResultSet ; 
 
 public interface CassandraResultSet extends ResultSet 
 @ @ - 9 , 13 + 10 , 13 @ @ public interface CassandraResultSet extends ResultSet 
 * / 
 public byte [ ] getKey ( ) ; 
 
 - / * * 
 - * @ return the raw column data for the given column offset 
 - * / 
 - public TypedColumn getColumn ( int i ) ; 
 + / * * @ return a BigInteger value for the given column offset * / 
 + public BigInteger getBigInteger ( int i ) ; 
 + / * * @ return a BigInteger value for the given column name * / 
 + public BigInteger getBigInteger ( String name ) ; 
 
 - / * * 
 - * @ return the raw column data for the given column name 
 - * / 
 + / * * @ return the raw column data for the given column offset * / 
 + public TypedColumn getColumn ( int i ) ; 
 + / * * @ return the raw column data for the given column name * / 
 public TypedColumn getColumn ( String name ) ; 
 } 
 diff - - git a / drivers / java / test / org / apache / cassandra / cql / JdbcDriverTest . java b / drivers / java / test / org / apache / cassandra / cql / JdbcDriverTest . java 
 index e519ebf . . f5301ab 100644 
 - - - a / drivers / java / test / org / apache / cassandra / cql / JdbcDriverTest . java 
 + + + b / drivers / java / test / org / apache / cassandra / cql / JdbcDriverTest . java 
 @ @ - 108 , 11 + 108 , 10 @ @ public class JdbcDriverTest extends EmbeddedServiceBase 
 { 
 String key = FBUtilities . bytesToHex ( " Integer " . getBytes ( ) ) ; 
 Statement stmt = con . createStatement ( ) ; 
 - stmt . executeUpdate ( " update JdbcInteger set 1 = 1111 , 2 = 2222 , 42 = ' fortytwofortytwo ' where key = ' " + key + " ' " ) ; 
 + stmt . executeUpdate ( " update JdbcInteger set 1 = 36893488147419103232 , 42 = ' fortytwofortytwo ' where key = ' " + key + " ' " ) ; 
 ResultSet rs = stmt . executeQuery ( " select 1 , 2 , 42 from JdbcInteger where key = ' " + key + " ' " ) ; 
 assert rs . next ( ) ; 
 - assert rs . getInt ( " 1 " ) = = 1111 ; 
 - assert rs . getInt ( " 2 " ) = = 2222 ; 
 + assert rs . getObject ( " 1 " ) . equals ( new BigInteger ( " 36893488147419103232 " ) ) ; 
 assert rs . getString ( " 42 " ) . equals ( " fortytwofortytwo " ) : rs . getString ( " 42 " ) ; 
 
 ResultSetMetaData md = rs . getMetaData ( ) ; 
 @ @ - 133 , 34 + 132 , 7 @ @ public class JdbcDriverTest extends EmbeddedServiceBase 
 expectedMetaData ( md , 2 , String . class . getName ( ) , " JdbcUtf8 " , " Keyspace1 " , " b " , Types . VARCHAR , UTF8Type . class . getSimpleName ( ) , false , true ) ; 
 expectedMetaData ( md , 3 , BigInteger . class . getName ( ) , " JdbcUtf8 " , " Keyspace1 " , " fortytwo " , Types . BIGINT , IntegerType . class . getSimpleName ( ) , true , false ) ; 
 } 
 - 
 - @ Test 
 - public void testIntegerMetadata ( ) throws SQLException 
 - { 
 - String key = FBUtilities . bytesToHex ( " Integer " . getBytes ( ) ) ; 
 - Statement stmt = con . createStatement ( ) ; 
 - stmt . executeUpdate ( " UPDATE JdbcInteger SET 1 = 111 , 2 = 222 WHERE KEY = ' " + key + " ' " ) ; 
 - ResultSet rs = stmt . executeQuery ( " SELECT 1 , 2 from JdbcInteger WHERE KEY = ' " + key + " ' " ) ; 
 - assert rs . next ( ) ; 
 - assert rs . getInt ( " 1 " ) = = 111 ; 
 - assert rs . getInt ( " 2 " ) = = 222 ; 
 
 - ResultSetMetaData md = rs . getMetaData ( ) ; 
 - assert md . getColumnCount ( ) = = 2 ; 
 - expectedMetaData ( md , 1 , BigInteger . class . getName ( ) , " JdbcInteger " , " Keyspace1 " , " 1 " , Types . BIGINT , IntegerType . class . getSimpleName ( ) , true , false ) ; 
 - expectedMetaData ( md , 2 , BigInteger . class . getName ( ) , " JdbcInteger " , " Keyspace1 " , " 2 " , Types . BIGINT , IntegerType . class . getSimpleName ( ) , true , false ) ; 
 - 
 - for ( int i = 0 ; i < md . getColumnCount ( ) ; i + + ) 
 - expectedMetaData ( md , 
 - i + 1 , 
 - BigInteger . class . getName ( ) , 
 - Types . BIGINT , 
 - IntegerType . class . getSimpleName ( ) , 
 - true , 
 - false ) ; 
 - 
 - } 
 - 
 @ Test 
 public void testLongMetadata ( ) throws SQLException 
 { 
 @ @ - 257 , 15 + 229 , 9 @ @ public class JdbcDriverTest extends EmbeddedServiceBase 
 expectedMetaData ( md , 2 , ByteBuffer . class . getName ( ) , " JdbcBytes " , " Keyspace1 " , FBUtilities . bytesToHex ( b ) , Types . BINARY , BytesType . class . getSimpleName ( ) , false , false ) ; 
 
 for ( int i = 0 ; i < md . getColumnCount ( ) ; i + + ) 
 - expectedMetaData ( md , 
 - i + 1 , 
 - ByteBuffer . class . getName ( ) , 
 - Types . BINARY , 
 - BytesType . class . getSimpleName ( ) , 
 - false , 
 - false ) ; 
 + expectedMetaData ( md , i + 1 , ByteBuffer . class . getName ( ) , Types . BINARY , BytesType . class . getSimpleName ( ) , false , false ) ; 
 } 
 - 
 + 
 @ Test 
 public void testWithStatementBytesType ( ) throws SQLException 
 { 
 @ @ - 446 , 9 + 412 , 7 @ @ public class JdbcDriverTest extends EmbeddedServiceBase 
 actualRows + + ; 
 for ( int c = 0 ; c < cols . length ; c + + ) 
 { 
 - / / getString and getObject should always work . 
 - assert rs . getString ( cols [ c ] ) ! = null ; 
 - assert rs . getString ( c + 1 ) ! = null ; 
 + / / getObject should always work . 
 assert rs . getObject ( cols [ c ] ) ! = null ; 
 assert rs . getObject ( c + 1 ) ! = null ; 

