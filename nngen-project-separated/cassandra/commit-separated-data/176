BLEU SCORE: 0.05862502026550899

TEST MSG: Fix batch commitlog sync regression
GENERATED MSG: Fix truncate to always call flush on table

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index ad558de . . 6596602 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 17 <nl> + * Fix batch commitlog sync regression ( CASSANDRA - 14292 ) <nl> * Write to pending endpoint when view replica is also base replica ( CASSANDRA - 14251 ) <nl> * Chain commit log marker potential performance regression in batch commit mode ( CASSANDRA - 14194 ) <nl> * Fully utilise specified compaction threads ( CASSANDRA - 14210 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java <nl> index f3cfd29 . . 1cee55d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java <nl> @ @ - 263 , 12 + 263 , 17 @ @ public abstract class AbstractCommitLogService <nl> * / <nl> public WaitQueue . Signal requestExtraSync ( ) <nl> { <nl> - syncRequested = true ; <nl> WaitQueue . Signal signal = syncComplete . register ( ) ; <nl> - haveWork . release ( 1 ) ; <nl> + requestSync ( ) ; <nl> return signal ; <nl> } <nl> <nl> + protected void requestSync ( ) <nl> + { <nl> + syncRequested = true ; <nl> + haveWork . release ( 1 ) ; <nl> + } <nl> + <nl> public void shutdown ( ) <nl> { <nl> shutdown = true ; <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / BatchCommitLogService . java b / src / java / org / apache / cassandra / db / commitlog / BatchCommitLogService . java <nl> index ceb5d64 . . c0e6afc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / BatchCommitLogService . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / BatchCommitLogService . java <nl> @ @ - 30 , 7 + 30 , 7 @ @ class BatchCommitLogService extends AbstractCommitLogService <nl> { <nl> / / wait until record has been safely persisted to disk <nl> pending . incrementAndGet ( ) ; <nl> - haveWork . release ( ) ; <nl> + requestSync ( ) ; <nl> alloc . awaitDiskSync ( commitLog . metrics . waitingOnCommit ) ; <nl> pending . decrementAndGet ( ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / commitlog / BatchCommitLogTest . java b / test / unit / org / apache / cassandra / db / commitlog / BatchCommitLogTest . java <nl> new file mode 100644 <nl> index 0000000 . . c7f7e57 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / db / commitlog / BatchCommitLogTest . java <nl> @ @ - 0 , 0 + 1 , 66 @ @ <nl> + package org . apache . cassandra . db . commitlog ; <nl> + <nl> + import static org . junit . Assert . * ; <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . concurrent . TimeUnit ; <nl> + <nl> + import org . apache . cassandra . SchemaLoader ; <nl> + import org . apache . cassandra . config . Config ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . db . Keyspace ; <nl> + import org . apache . cassandra . db . Mutation ; <nl> + import org . apache . cassandra . db . RowUpdateBuilder ; <nl> + import org . apache . cassandra . db . compaction . CompactionManager ; <nl> + import org . apache . cassandra . db . marshal . AsciiType ; <nl> + import org . apache . cassandra . db . marshal . BytesType ; <nl> + import org . apache . cassandra . schema . KeyspaceParams ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + public class BatchCommitLogTest <nl> + { <nl> + private static final long CL _ BATCH _ SYNC _ WINDOW = 1000 ; / / 1 second <nl> + private static final String KEYSPACE1 = " CommitLogTest " ; <nl> + private static final String STANDARD1 = " Standard1 " ; <nl> + <nl> + @ BeforeClass <nl> + public static void before ( ) <nl> + { <nl> + DatabaseDescriptor . setCommitLogSync ( Config . CommitLogSync . batch ) ; <nl> + DatabaseDescriptor . setCommitLogSyncBatchWindow ( CL _ BATCH _ SYNC _ WINDOW ) ; <nl> + <nl> + KeyspaceParams . DEFAULT _ LOCAL _ DURABLE _ WRITES = false ; <nl> + SchemaLoader . prepareServer ( ) ; <nl> + SchemaLoader . createKeyspace ( KEYSPACE1 , <nl> + KeyspaceParams . simple ( 1 ) , <nl> + SchemaLoader . standardCFMD ( KEYSPACE1 , STANDARD1 , 0 , AsciiType . instance , BytesType . instance ) ) ; <nl> + CompactionManager . instance . disableAutoCompaction ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testBatchCLSyncImmediately ( ) <nl> + { <nl> + ColumnFamilyStore cfs1 = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( STANDARD1 ) ; <nl> + Mutation m = new RowUpdateBuilder ( cfs1 . metadata , 0 , " key " ) <nl> + . clustering ( " bytes " ) <nl> + . add ( " val " , ByteBuffer . allocate ( 10 * 1024 ) ) <nl> + . build ( ) ; <nl> + <nl> + long startNano = System . nanoTime ( ) ; <nl> + CommitLog . instance . add ( m ) ; <nl> + long delta = TimeUnit . NANOSECONDS . toMillis ( System . nanoTime ( ) - startNano ) ; <nl> + assertTrue ( " Expect batch commitlog sync immediately , but took " + delta , delta < CL _ BATCH _ SYNC _ WINDOW ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testBatchCLShutDownImmediately ( ) throws InterruptedException <nl> + { <nl> + long startNano = System . nanoTime ( ) ; <nl> + CommitLog . instance . shutdownBlocking ( ) ; <nl> + long delta = TimeUnit . NANOSECONDS . toMillis ( System . nanoTime ( ) - startNano ) ; <nl> + assertTrue ( " Expect batch commitlog shutdown immediately , but took " + delta , delta < CL _ BATCH _ SYNC _ WINDOW ) ; <nl> + CommitLog . instance . start ( ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index ad558de . . 6596602 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 17 
 + * Fix batch commitlog sync regression ( CASSANDRA - 14292 ) 
 * Write to pending endpoint when view replica is also base replica ( CASSANDRA - 14251 ) 
 * Chain commit log marker potential performance regression in batch commit mode ( CASSANDRA - 14194 ) 
 * Fully utilise specified compaction threads ( CASSANDRA - 14210 ) 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java 
 index f3cfd29 . . 1cee55d 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java 
 @ @ - 263 , 12 + 263 , 17 @ @ public abstract class AbstractCommitLogService 
 * / 
 public WaitQueue . Signal requestExtraSync ( ) 
 { 
 - syncRequested = true ; 
 WaitQueue . Signal signal = syncComplete . register ( ) ; 
 - haveWork . release ( 1 ) ; 
 + requestSync ( ) ; 
 return signal ; 
 } 
 
 + protected void requestSync ( ) 
 + { 
 + syncRequested = true ; 
 + haveWork . release ( 1 ) ; 
 + } 
 + 
 public void shutdown ( ) 
 { 
 shutdown = true ; 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / BatchCommitLogService . java b / src / java / org / apache / cassandra / db / commitlog / BatchCommitLogService . java 
 index ceb5d64 . . c0e6afc 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / BatchCommitLogService . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / BatchCommitLogService . java 
 @ @ - 30 , 7 + 30 , 7 @ @ class BatchCommitLogService extends AbstractCommitLogService 
 { 
 / / wait until record has been safely persisted to disk 
 pending . incrementAndGet ( ) ; 
 - haveWork . release ( ) ; 
 + requestSync ( ) ; 
 alloc . awaitDiskSync ( commitLog . metrics . waitingOnCommit ) ; 
 pending . decrementAndGet ( ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / commitlog / BatchCommitLogTest . java b / test / unit / org / apache / cassandra / db / commitlog / BatchCommitLogTest . java 
 new file mode 100644 
 index 0000000 . . c7f7e57 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / db / commitlog / BatchCommitLogTest . java 
 @ @ - 0 , 0 + 1 , 66 @ @ 
 + package org . apache . cassandra . db . commitlog ; 
 + 
 + import static org . junit . Assert . * ; 
 + 
 + import java . nio . ByteBuffer ; 
 + import java . util . concurrent . TimeUnit ; 
 + 
 + import org . apache . cassandra . SchemaLoader ; 
 + import org . apache . cassandra . config . Config ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . db . Keyspace ; 
 + import org . apache . cassandra . db . Mutation ; 
 + import org . apache . cassandra . db . RowUpdateBuilder ; 
 + import org . apache . cassandra . db . compaction . CompactionManager ; 
 + import org . apache . cassandra . db . marshal . AsciiType ; 
 + import org . apache . cassandra . db . marshal . BytesType ; 
 + import org . apache . cassandra . schema . KeyspaceParams ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + public class BatchCommitLogTest 
 + { 
 + private static final long CL _ BATCH _ SYNC _ WINDOW = 1000 ; / / 1 second 
 + private static final String KEYSPACE1 = " CommitLogTest " ; 
 + private static final String STANDARD1 = " Standard1 " ; 
 + 
 + @ BeforeClass 
 + public static void before ( ) 
 + { 
 + DatabaseDescriptor . setCommitLogSync ( Config . CommitLogSync . batch ) ; 
 + DatabaseDescriptor . setCommitLogSyncBatchWindow ( CL _ BATCH _ SYNC _ WINDOW ) ; 
 + 
 + KeyspaceParams . DEFAULT _ LOCAL _ DURABLE _ WRITES = false ; 
 + SchemaLoader . prepareServer ( ) ; 
 + SchemaLoader . createKeyspace ( KEYSPACE1 , 
 + KeyspaceParams . simple ( 1 ) , 
 + SchemaLoader . standardCFMD ( KEYSPACE1 , STANDARD1 , 0 , AsciiType . instance , BytesType . instance ) ) ; 
 + CompactionManager . instance . disableAutoCompaction ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testBatchCLSyncImmediately ( ) 
 + { 
 + ColumnFamilyStore cfs1 = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( STANDARD1 ) ; 
 + Mutation m = new RowUpdateBuilder ( cfs1 . metadata , 0 , " key " ) 
 + . clustering ( " bytes " ) 
 + . add ( " val " , ByteBuffer . allocate ( 10 * 1024 ) ) 
 + . build ( ) ; 
 + 
 + long startNano = System . nanoTime ( ) ; 
 + CommitLog . instance . add ( m ) ; 
 + long delta = TimeUnit . NANOSECONDS . toMillis ( System . nanoTime ( ) - startNano ) ; 
 + assertTrue ( " Expect batch commitlog sync immediately , but took " + delta , delta < CL _ BATCH _ SYNC _ WINDOW ) ; 
 + } 
 + 
 + @ Test 
 + public void testBatchCLShutDownImmediately ( ) throws InterruptedException 
 + { 
 + long startNano = System . nanoTime ( ) ; 
 + CommitLog . instance . shutdownBlocking ( ) ; 
 + long delta = TimeUnit . NANOSECONDS . toMillis ( System . nanoTime ( ) - startNano ) ; 
 + assertTrue ( " Expect batch commitlog shutdown immediately , but took " + delta , delta < CL _ BATCH _ SYNC _ WINDOW ) ; 
 + CommitLog . instance . start ( ) ; 
 + } 
 + }

NEAREST DIFF:
ELIMINATEDSENTENCE
