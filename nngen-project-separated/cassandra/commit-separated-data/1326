BLEU SCORE: 0.030569602392969023

TEST MSG: Support for both encrypted and unencrypted native transport connections
GENERATED MSG: Add asynchronous and half - sync / half - async thrift servers .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d4e6771 . . afd45e5 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 3 + 1 , 7 @ @ <nl> + 3 . 0 . 0 - rc1 <nl> + * Support for both encrypted and unencrypted native transport connections ( CASSANDRA - 9590 ) <nl> + <nl> + <nl> 3 . 0 . 0 - beta2 <nl> * Fix columns returned by AbstractBtreePartitions ( CASSANDRA - 10220 ) <nl> * Fix backward compatibility issue due to AbstractBounds serialization bug ( CASSANDRA - 9857 ) <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index 0f8b829 . . 28caa1e 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 489 , 6 + 489 , 14 @ @ start _ native _ transport : true <nl> # port for the CQL native transport to listen for clients on <nl> # For security reasons , you should not expose this port to the internet . Firewall it if needed . <nl> native _ transport _ port : 9042 <nl> + # Enabling native transport encryption in client _ encryption _ options allows you to either use <nl> + # encryption for the standard port or to use a dedicated , additional port along with the unencrypted <nl> + # standard native _ transport _ port . <nl> + # Enabling client encryption and keeping native _ transport _ port _ ssl disabled will use encryption <nl> + # for native _ transport _ port . Setting native _ transport _ port _ ssl to a different value <nl> + # from native _ transport _ port will use encryption for native _ transport _ port _ ssl while <nl> + # keeping native _ transport _ port unencrypted . <nl> + # native _ transport _ port _ ssl : 9142 <nl> # The maximum threads for handling requests when the native transport is used . <nl> # This is similar to rpc _ max _ threads though the default differs slightly ( and <nl> # there is no native _ transport _ min _ threads , idle threads will always be stopped <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index 22b09d3 . . 164dab2 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 131 , 6 + 131 , 7 @ @ public class Config <nl> <nl> public Boolean start _ native _ transport = false ; <nl> public Integer native _ transport _ port = 9042 ; <nl> + public Integer native _ transport _ port _ ssl = null ; <nl> public Integer native _ transport _ max _ threads = 128 ; <nl> public Integer native _ transport _ max _ frame _ size _ in _ mb = 256 ; <nl> public volatile Long native _ transport _ max _ concurrent _ connections = - 1L ; <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 2e68418 . . 99cd563 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 680 , 6 + 680 , 14 @ @ public class DatabaseDescriptor <nl> conf . max _ mutation _ size _ in _ kb = conf . commitlog _ segment _ size _ in _ mb * 1024 / 2 ; <nl> else if ( conf . commitlog _ segment _ size _ in _ mb * 1024 < 2 * conf . max _ mutation _ size _ in _ kb ) <nl> throw new ConfigurationException ( " commitlog _ segment _ size _ in _ mb must be at least twice the size of max _ mutation _ size _ in _ kb / 1024 " , false ) ; <nl> + <nl> + / / native transport encryption options <nl> + if ( conf . native _ transport _ port _ ssl ! = null <nl> + & & conf . native _ transport _ port _ ssl . intValue ( ) ! = conf . native _ transport _ port . intValue ( ) <nl> + & & ! conf . client _ encryption _ options . enabled ) <nl> + { <nl> + throw new ConfigurationException ( " Encryption must be enabled in client _ encryption _ options for native _ transport _ port _ ssl " , false ) ; <nl> + } <nl> } <nl> <nl> private static FileStore guessFileStore ( String dir ) throws IOException <nl> @ @ - 1341 , 6 + 1349 , 23 @ @ public class DatabaseDescriptor <nl> return Integer . parseInt ( System . getProperty ( " cassandra . native _ transport _ port " , conf . native _ transport _ port . toString ( ) ) ) ; <nl> } <nl> <nl> + @ VisibleForTesting <nl> + public static void setNativeTransportPort ( int port ) <nl> + { <nl> + conf . native _ transport _ port = port ; <nl> + } <nl> + <nl> + public static int getNativeTransportPortSSL ( ) <nl> + { <nl> + return conf . native _ transport _ port _ ssl = = null ? getNativeTransportPort ( ) : conf . native _ transport _ port _ ssl ; <nl> + } <nl> + <nl> + @ VisibleForTesting <nl> + public static void setNativeTransportPortSSL ( Integer port ) <nl> + { <nl> + conf . native _ transport _ port _ ssl = port ; <nl> + } <nl> + <nl> public static Integer getNativeTransportMaxThreads ( ) <nl> { <nl> return conf . native _ transport _ max _ threads ; <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index c8b9677 . . 230b46a 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 127 , 7 + 127 , 7 @ @ public class CassandraDaemon <nl> private static final CassandraDaemon instance = new CassandraDaemon ( ) ; <nl> <nl> public Server thriftServer ; <nl> - public Server nativeServer ; <nl> + private NativeTransportService nativeTransportService ; <nl> <nl> private final boolean runManaged ; <nl> protected final StartupChecks startupChecks ; <nl> @ @ - 365 , 9 + 365 , 7 @ @ public class CassandraDaemon <nl> thriftServer = new ThriftServer ( rpcAddr , rpcPort , listenBacklog ) ; <nl> <nl> / / Native transport <nl> - InetAddress nativeAddr = DatabaseDescriptor . getRpcAddress ( ) ; <nl> - int nativePort = DatabaseDescriptor . getNativeTransportPort ( ) ; <nl> - nativeServer = new org . apache . cassandra . transport . Server ( nativeAddr , nativePort ) ; <nl> + nativeTransportService = new NativeTransportService ( ) ; <nl> <nl> completeSetup ( ) ; <nl> } <nl> @ @ - 431 , 7 + 429 , 8 @ @ public class CassandraDaemon <nl> String nativeFlag = System . getProperty ( " cassandra . start _ native _ transport " ) ; <nl> if ( ( nativeFlag ! = null & & Boolean . parseBoolean ( nativeFlag ) ) | | ( nativeFlag = = null & & DatabaseDescriptor . startNativeTransport ( ) ) ) <nl> { <nl> - nativeServer . start ( ) ; <nl> + startNativeTransport ( ) ; <nl> + StorageService . instance . setRpcReady ( true ) ; <nl> } <nl> else <nl> logger . info ( " Not starting native transport as requested . Use JMX ( StorageService - > startNativeTransport ( ) ) or nodetool ( enablebinary ) to start it " ) ; <nl> @ @ - 453 , 9 + 452 , 12 @ @ public class CassandraDaemon <nl> / / On linux , this doesn ' t entirely shut down Cassandra , just the RPC server . <nl> / / jsvc takes care of taking the rest down <nl> logger . info ( " Cassandra shutting down . . . " ) ; <nl> - thriftServer . stop ( ) ; <nl> - nativeServer . stop ( ) ; <nl> - <nl> + if ( thriftServer ! = null ) <nl> + thriftServer . stop ( ) ; <nl> + if ( nativeTransportService ! = null ) <nl> + nativeTransportService . destroy ( ) ; <nl> + StorageService . instance . setRpcReady ( false ) ; <nl> + <nl> / / On windows , we need to stop the entire system as prunsrv doesn ' t have the jsvc hooks <nl> / / We rely on the shutdown hook to drain the node <nl> if ( FBUtilities . isWindows ( ) ) <nl> @ @ - 556 , 6 + 558 , 26 @ @ public class CassandraDaemon <nl> } <nl> } <nl> <nl> + public void startNativeTransport ( ) <nl> + { <nl> + if ( nativeTransportService = = null ) <nl> + throw new IllegalStateException ( " setup ( ) must be called first for CassandraDaemon " ) ; <nl> + else <nl> + nativeTransportService . start ( ) ; <nl> + } <nl> + <nl> + public void stopNativeTransport ( ) <nl> + { <nl> + if ( nativeTransportService ! = null ) <nl> + nativeTransportService . stop ( ) ; <nl> + } <nl> + <nl> + public boolean isNativeTransportRunning ( ) <nl> + { <nl> + return nativeTransportService ! = null ? nativeTransportService . isRunning ( ) : false ; <nl> + } <nl> + <nl> + <nl> / * * <nl> * A convenience method to stop and destroy the daemon in one shot . <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / service / NativeTransportService . java b / src / java / org / apache / cassandra / service / NativeTransportService . java <nl> new file mode 100644 <nl> index 0000000 . . eff3a89 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / service / NativeTransportService . java <nl> @ @ - 0 , 0 + 1 , 199 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import java . net . InetAddress ; <nl> + import java . util . Arrays ; <nl> + import java . util . Collection ; <nl> + import java . util . Collections ; <nl> + import java . util . concurrent . TimeUnit ; <nl> + <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import io . netty . channel . EventLoopGroup ; <nl> + import io . netty . channel . epoll . Epoll ; <nl> + import io . netty . channel . epoll . EpollEventLoopGroup ; <nl> + import io . netty . channel . nio . NioEventLoopGroup ; <nl> + import io . netty . util . concurrent . EventExecutor ; <nl> + import io . netty . util . concurrent . Future ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . metrics . ClientMetrics ; <nl> + import org . apache . cassandra . transport . RequestThreadPoolExecutor ; <nl> + import org . apache . cassandra . transport . Server ; <nl> + <nl> + / * * <nl> + * Handles native transport server lifecycle and associated resources . Lazily initialized . <nl> + * / <nl> + public class NativeTransportService <nl> + { <nl> + <nl> + private static final Logger logger = LoggerFactory . getLogger ( NativeTransportService . class ) ; <nl> + <nl> + private Collection < Server > servers = Collections . emptyList ( ) ; <nl> + <nl> + private boolean initialized = false ; <nl> + private EventLoopGroup workerGroup ; <nl> + private EventExecutor eventExecutorGroup ; <nl> + <nl> + / * * <nl> + * Creates netty thread pools and event loops . <nl> + * / <nl> + @ VisibleForTesting <nl> + synchronized void initialize ( ) <nl> + { <nl> + if ( initialized ) <nl> + return ; <nl> + <nl> + / / prepare netty resources <nl> + eventExecutorGroup = new RequestThreadPoolExecutor ( ) ; <nl> + <nl> + if ( useEpoll ( ) ) <nl> + { <nl> + workerGroup = new EpollEventLoopGroup ( ) ; <nl> + logger . info ( " Netty using native Epoll event loop " ) ; <nl> + } <nl> + else <nl> + { <nl> + workerGroup = new NioEventLoopGroup ( ) ; <nl> + logger . info ( " Netty using Java NIO event loop " ) ; <nl> + } <nl> + <nl> + int nativePort = DatabaseDescriptor . getNativeTransportPort ( ) ; <nl> + int nativePortSSL = DatabaseDescriptor . getNativeTransportPortSSL ( ) ; <nl> + InetAddress nativeAddr = DatabaseDescriptor . getRpcAddress ( ) ; <nl> + <nl> + org . apache . cassandra . transport . Server . Builder builder = new org . apache . cassandra . transport . Server . Builder ( ) <nl> + . withEventExecutor ( eventExecutorGroup ) <nl> + . withEventLoopGroup ( workerGroup ) <nl> + . withHost ( nativeAddr ) ; <nl> + <nl> + if ( ! DatabaseDescriptor . getClientEncryptionOptions ( ) . enabled ) <nl> + { <nl> + servers = Collections . singleton ( builder . withSSL ( false ) . withPort ( nativePort ) . build ( ) ) ; <nl> + } <nl> + else <nl> + { <nl> + if ( nativePort ! = nativePortSSL ) <nl> + { <nl> + / / user asked for dedicated ssl port for supporting both non - ssl and ssl connections <nl> + servers = Collections . unmodifiableList ( <nl> + Arrays . asList ( <nl> + builder . withSSL ( false ) . withPort ( nativePort ) . build ( ) , <nl> + builder . withSSL ( true ) . withPort ( nativePortSSL ) . build ( ) <nl> + ) <nl> + ) ; <nl> + } <nl> + else <nl> + { <nl> + / / ssl only mode using configured native port <nl> + servers = Collections . singleton ( builder . withSSL ( true ) . withPort ( nativePort ) . build ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + / / register metrics <nl> + ClientMetrics . instance . addCounter ( " connectedNativeClients " , ( ) - > <nl> + { <nl> + int ret = 0 ; <nl> + for ( Server server : servers ) <nl> + ret + = server . getConnectedClients ( ) ; <nl> + return ret ; <nl> + } ) ; <nl> + <nl> + initialized = true ; <nl> + } <nl> + <nl> + / * * <nl> + * Starts native transport servers . <nl> + * / <nl> + public void start ( ) <nl> + { <nl> + initialize ( ) ; <nl> + servers . forEach ( Server : : start ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Stops currently running native transport servers . <nl> + * / <nl> + public void stop ( ) <nl> + { <nl> + servers . forEach ( Server : : stop ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Ultimately stops servers and closes all resources . <nl> + * / <nl> + public void destroy ( ) <nl> + { <nl> + stop ( ) ; <nl> + servers = Collections . emptyList ( ) ; <nl> + <nl> + / / shutdown executors used by netty for native transport server <nl> + Future < ? > wgStop = workerGroup . shutdownGracefully ( 0 , 0 , TimeUnit . SECONDS ) ; <nl> + <nl> + try <nl> + { <nl> + wgStop . await ( 5000 ) ; <nl> + } <nl> + catch ( InterruptedException e1 ) <nl> + { <nl> + Thread . currentThread ( ) . interrupt ( ) ; <nl> + } <nl> + <nl> + / / shutdownGracefully not implemented yet in RequestThreadPoolExecutor <nl> + eventExecutorGroup . shutdown ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return intend to use epoll bassed event looping <nl> + * / <nl> + public static boolean useEpoll ( ) <nl> + { <nl> + final boolean enableEpoll = Boolean . valueOf ( System . getProperty ( " cassandra . native . epoll . enabled " , " true " ) ) ; <nl> + return enableEpoll & & Epoll . isAvailable ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return true in case native transport server is running <nl> + * / <nl> + public boolean isRunning ( ) <nl> + { <nl> + for ( Server server : servers ) <nl> + if ( server . isRunning ( ) ) return true ; <nl> + return false ; <nl> + } <nl> + <nl> + @ VisibleForTesting <nl> + EventLoopGroup getWorkerGroup ( ) <nl> + { <nl> + return workerGroup ; <nl> + } <nl> + <nl> + @ VisibleForTesting <nl> + EventExecutor getEventExecutor ( ) <nl> + { <nl> + return eventExecutorGroup ; <nl> + } <nl> + <nl> + @ VisibleForTesting <nl> + Collection < Server > getServers ( ) <nl> + { <nl> + return servers ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index a7ffc04 . . 2d9bbec 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 405 , 10 + 405 , 10 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> { <nl> throw new IllegalStateException ( " No configured daemon " ) ; <nl> } <nl> - <nl> + <nl> try <nl> { <nl> - daemon . nativeServer . start ( ) ; <nl> + daemon . startNativeTransport ( ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 422 , 17 + 422 , 16 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> { <nl> throw new IllegalStateException ( " No configured daemon " ) ; <nl> } <nl> - if ( daemon . nativeServer ! = null ) <nl> - daemon . nativeServer . stop ( ) ; <nl> + daemon . stopNativeTransport ( ) ; <nl> } <nl> <nl> public boolean isNativeTransportRunning ( ) <nl> { <nl> - if ( ( daemon = = null ) | | ( daemon . nativeServer = = null ) ) <nl> + if ( daemon = = null ) <nl> { <nl> return false ; <nl> } <nl> - return daemon . nativeServer . isRunning ( ) ; <nl> + return daemon . isNativeTransportRunning ( ) ; <nl> } <nl> <nl> public void stopTransports ( ) <nl> diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java <nl> index 72a1b60 . . cafc0ce 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Server . java <nl> + + + b / src / java / org / apache / cassandra / transport / Server . java <nl> @ @ - 22 , 9 + 22 , 8 @ @ import java . net . InetAddress ; <nl> import java . net . InetSocketAddress ; <nl> import java . net . UnknownHostException ; <nl> import java . util . EnumMap ; <nl> - import java . util . Map ; <nl> import java . util . List ; <nl> - import java . util . concurrent . Callable ; <nl> + import java . util . Map ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> import java . util . concurrent . atomic . AtomicBoolean ; <nl> import javax . net . ssl . SSLContext ; <nl> @ @ - 35 , 7 + 34 , 6 @ @ import org . slf4j . LoggerFactory ; <nl> <nl> import io . netty . bootstrap . ServerBootstrap ; <nl> import io . netty . channel . * ; <nl> - import io . netty . channel . epoll . Epoll ; <nl> import io . netty . channel . epoll . EpollEventLoopGroup ; <nl> import io . netty . channel . epoll . EpollServerSocketChannel ; <nl> import io . netty . channel . group . ChannelGroup ; <nl> @ @ - 51 , 7 + 49 , 6 @ @ import io . netty . util . internal . logging . Slf4JLoggerFactory ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . EncryptionOptions ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> - import org . apache . cassandra . metrics . ClientMetrics ; <nl> import org . apache . cassandra . security . SSLFactory ; <nl> import org . apache . cassandra . service . * ; <nl> import org . apache . cassandra . transport . messages . EventMessage ; <nl> @ @ - 64 , 7 + 61 , 7 @ @ public class Server implements CassandraDaemon . Server <nl> } <nl> <nl> private static final Logger logger = LoggerFactory . getLogger ( Server . class ) ; <nl> - private static final boolean enableEpoll = Boolean . valueOf ( System . getProperty ( " cassandra . native . epoll . enabled " , " true " ) ) ; <nl> + private static final boolean useEpoll = NativeTransportService . useEpoll ( ) ; <nl> <nl> public static final int VERSION _ 1 = 1 ; <nl> public static final int VERSION _ 2 = 2 ; <nl> @ @ - 83 , 41 + 80 , 32 @ @ public class Server implements CassandraDaemon . Server <nl> } ; <nl> <nl> public final InetSocketAddress socket ; <nl> + public boolean useSSL = false ; <nl> private final AtomicBoolean isRunning = new AtomicBoolean ( false ) ; <nl> <nl> private EventLoopGroup workerGroup ; <nl> private EventExecutor eventExecutorGroup ; <nl> <nl> - public Server ( InetSocketAddress socket ) <nl> + private Server ( Builder builder ) <nl> { <nl> - this . socket = socket ; <nl> + this . socket = builder . getSocket ( ) ; <nl> + this . useSSL = builder . useSSL ; <nl> + if ( builder . workerGroup ! = null ) <nl> + { <nl> + workerGroup = builder . workerGroup ; <nl> + } <nl> + else <nl> + { <nl> + if ( useEpoll ) <nl> + workerGroup = new EpollEventLoopGroup ( ) ; <nl> + else <nl> + workerGroup = new NioEventLoopGroup ( ) ; <nl> + } <nl> + if ( builder . eventExecutorGroup ! = null ) <nl> + eventExecutorGroup = builder . eventExecutorGroup ; <nl> EventNotifier notifier = new EventNotifier ( this ) ; <nl> StorageService . instance . register ( notifier ) ; <nl> MigrationManager . instance . register ( notifier ) ; <nl> - registerMetrics ( ) ; <nl> - } <nl> - <nl> - public Server ( String hostname , int port ) <nl> - { <nl> - this ( new InetSocketAddress ( hostname , port ) ) ; <nl> - } <nl> - <nl> - public Server ( InetAddress host , int port ) <nl> - { <nl> - this ( new InetSocketAddress ( host , port ) ) ; <nl> - } <nl> - <nl> - public Server ( int port ) <nl> - { <nl> - this ( new InetSocketAddress ( port ) ) ; <nl> - } <nl> - <nl> - public void start ( ) <nl> - { <nl> - 	 if ( ! isRunning ( ) ) <nl> - 	 { <nl> - run ( ) ; <nl> - 	 } <nl> } <nl> <nl> public void stop ( ) <nl> @ @ - 131 , 35 + 119 , 25 @ @ public class Server implements CassandraDaemon . Server <nl> return isRunning . get ( ) ; <nl> } <nl> <nl> - private void run ( ) <nl> + public synchronized void start ( ) <nl> { <nl> - / / Configure the server . <nl> - eventExecutorGroup = new RequestThreadPoolExecutor ( ) ; <nl> - <nl> - boolean hasEpoll = enableEpoll ? Epoll . isAvailable ( ) : false ; <nl> - if ( hasEpoll ) <nl> - { <nl> - workerGroup = new EpollEventLoopGroup ( ) ; <nl> - logger . info ( " Netty using native Epoll event loop " ) ; <nl> - } <nl> - else <nl> - { <nl> - workerGroup = new NioEventLoopGroup ( ) ; <nl> - logger . info ( " Netty using Java NIO event loop " ) ; <nl> - } <nl> + if ( isRunning ( ) ) <nl> + return ; <nl> <nl> + / / Configure the server . <nl> ServerBootstrap bootstrap = new ServerBootstrap ( ) <nl> - . group ( workerGroup ) <nl> - . channel ( hasEpoll ? EpollServerSocketChannel . class : NioServerSocketChannel . class ) <nl> + . channel ( useEpoll ? EpollServerSocketChannel . class : NioServerSocketChannel . class ) <nl> . childOption ( ChannelOption . TCP _ NODELAY , true ) <nl> . childOption ( ChannelOption . SO _ LINGER , 0 ) <nl> . childOption ( ChannelOption . SO _ KEEPALIVE , DatabaseDescriptor . getRpcKeepAlive ( ) ) <nl> . childOption ( ChannelOption . ALLOCATOR , CBUtil . allocator ) <nl> . childOption ( ChannelOption . WRITE _ BUFFER _ HIGH _ WATER _ MARK , 32 * 1024 ) <nl> . childOption ( ChannelOption . WRITE _ BUFFER _ LOW _ WATER _ MARK , 8 * 1024 ) ; <nl> + if ( workerGroup ! = null ) <nl> + bootstrap = bootstrap . group ( workerGroup ) ; <nl> <nl> final EncryptionOptions . ClientEncryptionOptions clientEnc = DatabaseDescriptor . getClientEncryptionOptions ( ) ; <nl> - if ( clientEnc . enabled ) <nl> + if ( this . useSSL ) <nl> { <nl> logger . info ( " Enabling encrypted CQL connections between client and server " ) ; <nl> bootstrap . childHandler ( new SecureInitializer ( this , clientEnc ) ) ; <nl> @ @ - 171 , 7 + 149 , 7 @ @ public class Server implements CassandraDaemon . Server <nl> <nl> / / Bind and start to accept incoming connections . <nl> logger . info ( " Using Netty Version : { } " , Version . identify ( ) . entrySet ( ) ) ; <nl> - logger . info ( " Starting listening for CQL clients on { } . . . " , socket ) ; <nl> + logger . info ( " Starting listening for CQL clients on { } ( { } ) . . . " , socket , this . useSSL ? " encrypted " : " unencrypted " ) ; <nl> <nl> ChannelFuture bindFuture = bootstrap . bind ( socket ) ; <nl> if ( ! bindFuture . awaitUninterruptibly ( ) . isSuccess ( ) ) <nl> @ @ - 179 , 36 + 157 , 83 @ @ public class Server implements CassandraDaemon . Server <nl> <nl> connectionTracker . allChannels . add ( bindFuture . channel ( ) ) ; <nl> isRunning . set ( true ) ; <nl> - <nl> - StorageService . instance . setRpcReady ( true ) ; <nl> } <nl> <nl> - private void registerMetrics ( ) <nl> + public int getConnectedClients ( ) <nl> { <nl> - ClientMetrics . instance . addCounter ( " connectedNativeClients " , new Callable < Integer > ( ) <nl> - { <nl> - @ Override <nl> - public Integer call ( ) throws Exception <nl> - { <nl> - return connectionTracker . getConnectedClients ( ) ; <nl> - } <nl> - } ) ; <nl> + return connectionTracker . getConnectedClients ( ) ; <nl> } <nl> - <nl> + <nl> private void close ( ) <nl> { <nl> / / Close opened connections <nl> connectionTracker . closeAll ( ) ; <nl> - workerGroup . shutdownGracefully ( ) ; <nl> - workerGroup = null ; <nl> - <nl> - eventExecutorGroup . shutdown ( ) ; <nl> - eventExecutorGroup = null ; <nl> + <nl> logger . info ( " Stop listening for CQL clients " ) ; <nl> - <nl> - StorageService . instance . setRpcReady ( false ) ; <nl> } <nl> <nl> + public static class Builder <nl> + { <nl> + private EventLoopGroup workerGroup ; <nl> + private EventExecutor eventExecutorGroup ; <nl> + private boolean useSSL = false ; <nl> + private InetAddress hostAddr ; <nl> + private int port = - 1 ; <nl> + private InetSocketAddress socket ; <nl> + <nl> + public Builder withSSL ( boolean useSSL ) <nl> + { <nl> + this . useSSL = useSSL ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder withEventLoopGroup ( EventLoopGroup eventLoopGroup ) <nl> + { <nl> + this . workerGroup = eventLoopGroup ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder withEventExecutor ( EventExecutor eventExecutor ) <nl> + { <nl> + this . eventExecutorGroup = eventExecutor ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder withHost ( InetAddress host ) <nl> + { <nl> + this . hostAddr = host ; <nl> + this . socket = null ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder withPort ( int port ) <nl> + { <nl> + this . port = port ; <nl> + this . socket = null ; <nl> + return this ; <nl> + } <nl> + <nl> + public Server build ( ) <nl> + { <nl> + return new Server ( this ) ; <nl> + } <nl> + <nl> + private InetSocketAddress getSocket ( ) <nl> + { <nl> + if ( this . socket ! = null ) <nl> + return this . socket ; <nl> + else <nl> + { <nl> + if ( this . port = = - 1 ) <nl> + throw new IllegalStateException ( " Missing port number " ) ; <nl> + if ( this . hostAddr ! = null ) <nl> + this . socket = new InetSocketAddress ( this . hostAddr , this . port ) ; <nl> + else <nl> + throw new IllegalStateException ( " Missing host " ) ; <nl> + return this . socket ; <nl> + } <nl> + } <nl> + } <nl> <nl> public static class ConnectionTracker implements Connection . Tracker <nl> { <nl> @ @ - 253 , 7 + 278 , 7 @ @ public class Server implements CassandraDaemon . Server <nl> } <nl> } <nl> <nl> - private static class Initializer extends ChannelInitializer <nl> + private static class Initializer extends ChannelInitializer < Channel > <nl> { <nl> / / Stateless handlers <nl> private static final Message . ProtocolDecoder messageDecoder = new Message . ProtocolDecoder ( ) ; <nl> @ @ - 294 , 7 + 319 , 10 @ @ public class Server implements CassandraDaemon . Server <nl> pipeline . addLast ( " messageDecoder " , messageDecoder ) ; <nl> pipeline . addLast ( " messageEncoder " , messageEncoder ) ; <nl> <nl> - pipeline . addLast ( server . eventExecutorGroup , " executor " , dispatcher ) ; <nl> + if ( server . eventExecutorGroup ! = null ) <nl> + pipeline . addLast ( server . eventExecutorGroup , " executor " , dispatcher ) ; <nl> + else <nl> + pipeline . addLast ( " executor " , dispatcher ) ; <nl> } <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> index 349975d . . 3d3729a 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> @ @ - 316 , 7 + 316 , 7 @ @ public abstract class CQLTester <nl> StorageService . instance . initServer ( ) ; <nl> SchemaLoader . startGossiper ( ) ; <nl> <nl> - server = new org . apache . cassandra . transport . Server ( nativeAddr , nativePort ) ; <nl> + server = new Server . Builder ( ) . withHost ( nativeAddr ) . withPort ( nativePort ) . build ( ) ; <nl> server . start ( ) ; <nl> <nl> for ( int version = 1 ; version < = maxProtocolVersion ; version + + ) <nl> diff - - git a / test / unit / org / apache / cassandra / service / NativeTransportServiceTest . java b / test / unit / org / apache / cassandra / service / NativeTransportServiceTest . java <nl> new file mode 100644 <nl> index 0000000 . . 7eb664f <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / service / NativeTransportServiceTest . java <nl> @ @ - 0 , 0 + 1 , 193 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import java . util . Arrays ; <nl> + import java . util . function . Consumer ; <nl> + import java . util . function . Supplier ; <nl> + import java . util . stream . Collectors ; <nl> + import java . util . stream . IntStream ; <nl> + <nl> + import com . google . common . collect . Sets ; <nl> + import org . junit . After ; <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . transport . Server ; <nl> + import org . apache . cassandra . utils . Pair ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> + public class NativeTransportServiceTest <nl> + { <nl> + <nl> + @ After <nl> + public void resetConfig ( ) <nl> + { <nl> + DatabaseDescriptor . getClientEncryptionOptions ( ) . enabled = false ; <nl> + DatabaseDescriptor . setNativeTransportPortSSL ( null ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testServiceCanBeStopped ( ) <nl> + { <nl> + withService ( ( NativeTransportService service ) - > { <nl> + service . stop ( ) ; <nl> + assertFalse ( service . isRunning ( ) ) ; <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIgnoresStartOnAlreadyStarted ( ) <nl> + { <nl> + withService ( ( NativeTransportService service ) - > { <nl> + service . start ( ) ; <nl> + service . start ( ) ; <nl> + service . start ( ) ; <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIgnoresStoppedOnAlreadyStopped ( ) <nl> + { <nl> + withService ( ( NativeTransportService service ) - > { <nl> + service . stop ( ) ; <nl> + service . stop ( ) ; <nl> + service . stop ( ) ; <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testDestroy ( ) <nl> + { <nl> + withService ( ( NativeTransportService service ) - > { <nl> + Supplier < Boolean > allTerminated = ( ) - > <nl> + service . getWorkerGroup ( ) . isShutdown ( ) & & service . getWorkerGroup ( ) . isTerminated ( ) & & <nl> + service . getEventExecutor ( ) . isShutdown ( ) & & service . getEventExecutor ( ) . isTerminated ( ) ; <nl> + assertFalse ( allTerminated . get ( ) ) ; <nl> + service . destroy ( ) ; <nl> + assertTrue ( allTerminated . get ( ) ) ; <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testConcurrentStarts ( ) <nl> + { <nl> + withService ( NativeTransportService : : start , false , 20 ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testConcurrentStops ( ) <nl> + { <nl> + withService ( NativeTransportService : : stop , true , 20 ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testConcurrentDestroys ( ) <nl> + { <nl> + withService ( NativeTransportService : : destroy , true , 20 ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testPlainDefaultPort ( ) <nl> + { <nl> + / / default plain settings : client encryption disabled and default native transport port <nl> + withService ( ( NativeTransportService service ) - > <nl> + { <nl> + assertEquals ( 1 , service . getServers ( ) . size ( ) ) ; <nl> + Server server = service . getServers ( ) . iterator ( ) . next ( ) ; <nl> + assertFalse ( server . useSSL ) ; <nl> + assertEquals ( server . socket . getPort ( ) , DatabaseDescriptor . getNativeTransportPort ( ) ) ; <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSSLOnly ( ) <nl> + { <nl> + / / default ssl settings : client encryption enabled and default native transport port used for ssl only <nl> + DatabaseDescriptor . getClientEncryptionOptions ( ) . enabled = true ; <nl> + <nl> + withService ( ( NativeTransportService service ) - > <nl> + { <nl> + service . initialize ( ) ; <nl> + assertEquals ( 1 , service . getServers ( ) . size ( ) ) ; <nl> + Server server = service . getServers ( ) . iterator ( ) . next ( ) ; <nl> + assertTrue ( server . useSSL ) ; <nl> + assertEquals ( server . socket . getPort ( ) , DatabaseDescriptor . getNativeTransportPort ( ) ) ; <nl> + } , false , 1 ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSSLWithNonSSL ( ) <nl> + { <nl> + / / ssl + non - ssl settings : client encryption enabled and additional ssl port specified <nl> + DatabaseDescriptor . getClientEncryptionOptions ( ) . enabled = true ; <nl> + DatabaseDescriptor . setNativeTransportPortSSL ( 8432 ) ; <nl> + <nl> + withService ( ( NativeTransportService service ) - > <nl> + { <nl> + service . initialize ( ) ; <nl> + assertEquals ( 2 , service . getServers ( ) . size ( ) ) ; <nl> + assertEquals ( <nl> + Sets . newHashSet ( Arrays . asList ( <nl> + Pair . create ( true , DatabaseDescriptor . getNativeTransportPortSSL ( ) ) , <nl> + Pair . create ( false , DatabaseDescriptor . getNativeTransportPort ( ) ) <nl> + ) <nl> + ) , <nl> + service . getServers ( ) . stream ( ) . map ( ( Server s ) - > <nl> + Pair . create ( s . useSSL , s . socket . getPort ( ) ) ) . collect ( Collectors . toSet ( ) ) <nl> + ) ; <nl> + } , false , 1 ) ; <nl> + } <nl> + <nl> + private static void withService ( Consumer < NativeTransportService > f ) <nl> + { <nl> + withService ( f , true , 1 ) ; <nl> + } <nl> + <nl> + private static void withService ( Consumer < NativeTransportService > f , boolean start , int concurrently ) <nl> + { <nl> + NativeTransportService service = new NativeTransportService ( ) ; <nl> + assertFalse ( service . isRunning ( ) ) ; <nl> + if ( start ) <nl> + { <nl> + service . start ( ) ; <nl> + assertTrue ( service . isRunning ( ) ) ; <nl> + } <nl> + try <nl> + { <nl> + if ( concurrently = = 1 ) <nl> + { <nl> + f . accept ( service ) ; <nl> + } <nl> + else <nl> + { <nl> + IntStream . range ( 0 , concurrently ) . parallel ( ) . map ( ( int i ) - > { <nl> + f . accept ( service ) ; <nl> + return 1 ; <nl> + } ) . sum ( ) ; <nl> + } <nl> + } <nl> + finally <nl> + { <nl> + service . stop ( ) ; <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / bin / cassandra b / bin / cassandra <nl> index 6e7a25f . . 85d8533 100755 <nl> - - - a / bin / cassandra <nl> + + + b / bin / cassandra <nl> @ @ - 80 , 10 + 80 , 10 @ @ elif [ - r $ CASSANDRA _ INCLUDE ] ; then <nl> fi <nl> <nl> # Use JAVA _ HOME if set , otherwise look for java in PATH <nl> - if [ - x $ JAVA _ HOME / bin / java ] ; then <nl> + if [ - n " $ JAVA _ HOME " ] ; then <nl> JAVA = $ JAVA _ HOME / bin / java <nl> else <nl> - JAVA = ` which java ` <nl> + JAVA = java <nl> fi <nl> <nl> if [ - z $ CASSANDRA _ CONF - o - z $ CLASSPATH ] ; then <nl> diff - - git a / conf / cassandra - env . sh b / conf / cassandra - env . sh <nl> index f6e41d8 . . 46374ef 100644 <nl> - - - a / conf / cassandra - env . sh <nl> + + + b / conf / cassandra - env . sh <nl> @ @ - 92 , 7 + 92 , 7 @ @ JMX _ PORT = " 7199 " <nl> JVM _ OPTS = " $ JVM _ OPTS - ea " <nl> <nl> # add the jamm javaagent <nl> - check _ openjdk = $ ( java - version 2 > & 1 | awk ' { if ( NR = = 2 ) { print $ 1 } } ' ) <nl> + check _ openjdk = $ ( " $ { JAVA : - java } " - version 2 > & 1 | awk ' { if ( NR = = 2 ) { print $ 1 } } ' ) <nl> if [ " $ check _ openjdk " ! = " OpenJDK " ] <nl> then <nl> JVM _ OPTS = " $ JVM _ OPTS - javaagent : $ CASSANDRA _ HOME / lib / jamm - 0 . 2 . 2 . jar " <nl> diff - - git a / debian / cassandra . postinst b / debian / cassandra . postinst <nl> index 1ac9385 . . 1825882 100644 <nl> - - - a / debian / cassandra . postinst <nl> + + + b / debian / cassandra . postinst <nl> @ @ - 34 , 7 + 34 , 7 @ @ case " $ 1 " in <nl> cassandra <nl> fi <nl> <nl> - if [ - n $ 2 ] & & dpkg - - compare - versions " $ 2 " le 0 . 6 . 4 - 2 ; then <nl> + if [ - n " $ 2 " ] & & dpkg - - compare - versions " $ 2 " le 0 . 6 . 4 - 2 ; then <nl> chown - R cassandra : / var / lib / cassandra <nl> chown - R cassandra : / var / log / cassandra <nl> fi <nl> diff - - git a / debian / init b / debian / init <nl> index 7425c61 . . a3b2687 100644 <nl> - - - a / debian / init <nl> + + + b / debian / init <nl> @ @ - 30 , 23 + 30 , 15 @ @ JVM _ SEARCH _ DIRS = " / usr / lib / jvm / java - 6 - openjdk / usr / lib / jvm / java - 6 - sun " <nl> [ - e / etc / cassandra / cassandra . yaml ] | | exit 0 <nl> [ - e / etc / cassandra / cassandra - env . sh ] | | exit 0 <nl> <nl> - # Read Cassandra environment file . <nl> - . / etc / cassandra / cassandra - env . sh <nl> - <nl> # Read configuration variable file if it is present <nl> [ - r / etc / default / $ NAME ] & & . / etc / default / $ NAME <nl> <nl> - if [ - z " $ JVM _ OPTS " ] ; then <nl> - echo " Initialization failed ; \ $ JVM _ OPTS not set ! " > & 2 <nl> - exit 3 <nl> - fi <nl> - <nl> # If JAVA _ HOME has not been set , try to determine it . <nl> if [ - z " $ JAVA _ HOME " ] ; then <nl> # If java is in PATH , use a JAVA _ HOME that corresponds to that . This is <nl> # both consistent with how the upstream startup script works , and how <nl> # Debian works ( read : the use of alternatives to set a system JVM ) . <nl> - if [ - n ` which java ` ] ; then <nl> + if [ - n " ` which java ` " ] ; then <nl> java = ` which java ` <nl> # Dereference symlink ( s ) <nl> while true ; do <nl> @ @ - 67 , 6 + 59 , 15 @ @ if [ - z " $ JAVA _ HOME " ] ; then <nl> done <nl> fi <nl> fi <nl> + JAVA = " $ JAVA _ HOME / bin / java " <nl> + <nl> + # Read Cassandra environment file . <nl> + . / etc / cassandra / cassandra - env . sh <nl> + <nl> + if [ - z " $ JVM _ OPTS " ] ; then <nl> + echo " Initialization failed ; \ $ JVM _ OPTS not set ! " > & 2 <nl> + exit 3 <nl> + fi <nl> <nl> # Load the VERBOSE setting and other rcS variables <nl> . / lib / init / vars . sh

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d4e6771 . . afd45e5 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 3 + 1 , 7 @ @ 
 + 3 . 0 . 0 - rc1 
 + * Support for both encrypted and unencrypted native transport connections ( CASSANDRA - 9590 ) 
 + 
 + 
 3 . 0 . 0 - beta2 
 * Fix columns returned by AbstractBtreePartitions ( CASSANDRA - 10220 ) 
 * Fix backward compatibility issue due to AbstractBounds serialization bug ( CASSANDRA - 9857 ) 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index 0f8b829 . . 28caa1e 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 489 , 6 + 489 , 14 @ @ start _ native _ transport : true 
 # port for the CQL native transport to listen for clients on 
 # For security reasons , you should not expose this port to the internet . Firewall it if needed . 
 native _ transport _ port : 9042 
 + # Enabling native transport encryption in client _ encryption _ options allows you to either use 
 + # encryption for the standard port or to use a dedicated , additional port along with the unencrypted 
 + # standard native _ transport _ port . 
 + # Enabling client encryption and keeping native _ transport _ port _ ssl disabled will use encryption 
 + # for native _ transport _ port . Setting native _ transport _ port _ ssl to a different value 
 + # from native _ transport _ port will use encryption for native _ transport _ port _ ssl while 
 + # keeping native _ transport _ port unencrypted . 
 + # native _ transport _ port _ ssl : 9142 
 # The maximum threads for handling requests when the native transport is used . 
 # This is similar to rpc _ max _ threads though the default differs slightly ( and 
 # there is no native _ transport _ min _ threads , idle threads will always be stopped 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index 22b09d3 . . 164dab2 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 131 , 6 + 131 , 7 @ @ public class Config 
 
 public Boolean start _ native _ transport = false ; 
 public Integer native _ transport _ port = 9042 ; 
 + public Integer native _ transport _ port _ ssl = null ; 
 public Integer native _ transport _ max _ threads = 128 ; 
 public Integer native _ transport _ max _ frame _ size _ in _ mb = 256 ; 
 public volatile Long native _ transport _ max _ concurrent _ connections = - 1L ; 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 2e68418 . . 99cd563 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 680 , 6 + 680 , 14 @ @ public class DatabaseDescriptor 
 conf . max _ mutation _ size _ in _ kb = conf . commitlog _ segment _ size _ in _ mb * 1024 / 2 ; 
 else if ( conf . commitlog _ segment _ size _ in _ mb * 1024 < 2 * conf . max _ mutation _ size _ in _ kb ) 
 throw new ConfigurationException ( " commitlog _ segment _ size _ in _ mb must be at least twice the size of max _ mutation _ size _ in _ kb / 1024 " , false ) ; 
 + 
 + / / native transport encryption options 
 + if ( conf . native _ transport _ port _ ssl ! = null 
 + & & conf . native _ transport _ port _ ssl . intValue ( ) ! = conf . native _ transport _ port . intValue ( ) 
 + & & ! conf . client _ encryption _ options . enabled ) 
 + { 
 + throw new ConfigurationException ( " Encryption must be enabled in client _ encryption _ options for native _ transport _ port _ ssl " , false ) ; 
 + } 
 } 
 
 private static FileStore guessFileStore ( String dir ) throws IOException 
 @ @ - 1341 , 6 + 1349 , 23 @ @ public class DatabaseDescriptor 
 return Integer . parseInt ( System . getProperty ( " cassandra . native _ transport _ port " , conf . native _ transport _ port . toString ( ) ) ) ; 
 } 
 
 + @ VisibleForTesting 
 + public static void setNativeTransportPort ( int port ) 
 + { 
 + conf . native _ transport _ port = port ; 
 + } 
 + 
 + public static int getNativeTransportPortSSL ( ) 
 + { 
 + return conf . native _ transport _ port _ ssl = = null ? getNativeTransportPort ( ) : conf . native _ transport _ port _ ssl ; 
 + } 
 + 
 + @ VisibleForTesting 
 + public static void setNativeTransportPortSSL ( Integer port ) 
 + { 
 + conf . native _ transport _ port _ ssl = port ; 
 + } 
 + 
 public static Integer getNativeTransportMaxThreads ( ) 
 { 
 return conf . native _ transport _ max _ threads ; 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index c8b9677 . . 230b46a 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 127 , 7 + 127 , 7 @ @ public class CassandraDaemon 
 private static final CassandraDaemon instance = new CassandraDaemon ( ) ; 
 
 public Server thriftServer ; 
 - public Server nativeServer ; 
 + private NativeTransportService nativeTransportService ; 
 
 private final boolean runManaged ; 
 protected final StartupChecks startupChecks ; 
 @ @ - 365 , 9 + 365 , 7 @ @ public class CassandraDaemon 
 thriftServer = new ThriftServer ( rpcAddr , rpcPort , listenBacklog ) ; 
 
 / / Native transport 
 - InetAddress nativeAddr = DatabaseDescriptor . getRpcAddress ( ) ; 
 - int nativePort = DatabaseDescriptor . getNativeTransportPort ( ) ; 
 - nativeServer = new org . apache . cassandra . transport . Server ( nativeAddr , nativePort ) ; 
 + nativeTransportService = new NativeTransportService ( ) ; 
 
 completeSetup ( ) ; 
 } 
 @ @ - 431 , 7 + 429 , 8 @ @ public class CassandraDaemon 
 String nativeFlag = System . getProperty ( " cassandra . start _ native _ transport " ) ; 
 if ( ( nativeFlag ! = null & & Boolean . parseBoolean ( nativeFlag ) ) | | ( nativeFlag = = null & & DatabaseDescriptor . startNativeTransport ( ) ) ) 
 { 
 - nativeServer . start ( ) ; 
 + startNativeTransport ( ) ; 
 + StorageService . instance . setRpcReady ( true ) ; 
 } 
 else 
 logger . info ( " Not starting native transport as requested . Use JMX ( StorageService - > startNativeTransport ( ) ) or nodetool ( enablebinary ) to start it " ) ; 
 @ @ - 453 , 9 + 452 , 12 @ @ public class CassandraDaemon 
 / / On linux , this doesn ' t entirely shut down Cassandra , just the RPC server . 
 / / jsvc takes care of taking the rest down 
 logger . info ( " Cassandra shutting down . . . " ) ; 
 - thriftServer . stop ( ) ; 
 - nativeServer . stop ( ) ; 
 - 
 + if ( thriftServer ! = null ) 
 + thriftServer . stop ( ) ; 
 + if ( nativeTransportService ! = null ) 
 + nativeTransportService . destroy ( ) ; 
 + StorageService . instance . setRpcReady ( false ) ; 
 + 
 / / On windows , we need to stop the entire system as prunsrv doesn ' t have the jsvc hooks 
 / / We rely on the shutdown hook to drain the node 
 if ( FBUtilities . isWindows ( ) ) 
 @ @ - 556 , 6 + 558 , 26 @ @ public class CassandraDaemon 
 } 
 } 
 
 + public void startNativeTransport ( ) 
 + { 
 + if ( nativeTransportService = = null ) 
 + throw new IllegalStateException ( " setup ( ) must be called first for CassandraDaemon " ) ; 
 + else 
 + nativeTransportService . start ( ) ; 
 + } 
 + 
 + public void stopNativeTransport ( ) 
 + { 
 + if ( nativeTransportService ! = null ) 
 + nativeTransportService . stop ( ) ; 
 + } 
 + 
 + public boolean isNativeTransportRunning ( ) 
 + { 
 + return nativeTransportService ! = null ? nativeTransportService . isRunning ( ) : false ; 
 + } 
 + 
 + 
 / * * 
 * A convenience method to stop and destroy the daemon in one shot . 
 * / 
 diff - - git a / src / java / org / apache / cassandra / service / NativeTransportService . java b / src / java / org / apache / cassandra / service / NativeTransportService . java 
 new file mode 100644 
 index 0000000 . . eff3a89 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / service / NativeTransportService . java 
 @ @ - 0 , 0 + 1 , 199 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . service ; 
 + 
 + import java . net . InetAddress ; 
 + import java . util . Arrays ; 
 + import java . util . Collection ; 
 + import java . util . Collections ; 
 + import java . util . concurrent . TimeUnit ; 
 + 
 + import com . google . common . annotations . VisibleForTesting ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + import io . netty . channel . EventLoopGroup ; 
 + import io . netty . channel . epoll . Epoll ; 
 + import io . netty . channel . epoll . EpollEventLoopGroup ; 
 + import io . netty . channel . nio . NioEventLoopGroup ; 
 + import io . netty . util . concurrent . EventExecutor ; 
 + import io . netty . util . concurrent . Future ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . metrics . ClientMetrics ; 
 + import org . apache . cassandra . transport . RequestThreadPoolExecutor ; 
 + import org . apache . cassandra . transport . Server ; 
 + 
 + / * * 
 + * Handles native transport server lifecycle and associated resources . Lazily initialized . 
 + * / 
 + public class NativeTransportService 
 + { 
 + 
 + private static final Logger logger = LoggerFactory . getLogger ( NativeTransportService . class ) ; 
 + 
 + private Collection < Server > servers = Collections . emptyList ( ) ; 
 + 
 + private boolean initialized = false ; 
 + private EventLoopGroup workerGroup ; 
 + private EventExecutor eventExecutorGroup ; 
 + 
 + / * * 
 + * Creates netty thread pools and event loops . 
 + * / 
 + @ VisibleForTesting 
 + synchronized void initialize ( ) 
 + { 
 + if ( initialized ) 
 + return ; 
 + 
 + / / prepare netty resources 
 + eventExecutorGroup = new RequestThreadPoolExecutor ( ) ; 
 + 
 + if ( useEpoll ( ) ) 
 + { 
 + workerGroup = new EpollEventLoopGroup ( ) ; 
 + logger . info ( " Netty using native Epoll event loop " ) ; 
 + } 
 + else 
 + { 
 + workerGroup = new NioEventLoopGroup ( ) ; 
 + logger . info ( " Netty using Java NIO event loop " ) ; 
 + } 
 + 
 + int nativePort = DatabaseDescriptor . getNativeTransportPort ( ) ; 
 + int nativePortSSL = DatabaseDescriptor . getNativeTransportPortSSL ( ) ; 
 + InetAddress nativeAddr = DatabaseDescriptor . getRpcAddress ( ) ; 
 + 
 + org . apache . cassandra . transport . Server . Builder builder = new org . apache . cassandra . transport . Server . Builder ( ) 
 + . withEventExecutor ( eventExecutorGroup ) 
 + . withEventLoopGroup ( workerGroup ) 
 + . withHost ( nativeAddr ) ; 
 + 
 + if ( ! DatabaseDescriptor . getClientEncryptionOptions ( ) . enabled ) 
 + { 
 + servers = Collections . singleton ( builder . withSSL ( false ) . withPort ( nativePort ) . build ( ) ) ; 
 + } 
 + else 
 + { 
 + if ( nativePort ! = nativePortSSL ) 
 + { 
 + / / user asked for dedicated ssl port for supporting both non - ssl and ssl connections 
 + servers = Collections . unmodifiableList ( 
 + Arrays . asList ( 
 + builder . withSSL ( false ) . withPort ( nativePort ) . build ( ) , 
 + builder . withSSL ( true ) . withPort ( nativePortSSL ) . build ( ) 
 + ) 
 + ) ; 
 + } 
 + else 
 + { 
 + / / ssl only mode using configured native port 
 + servers = Collections . singleton ( builder . withSSL ( true ) . withPort ( nativePort ) . build ( ) ) ; 
 + } 
 + } 
 + 
 + / / register metrics 
 + ClientMetrics . instance . addCounter ( " connectedNativeClients " , ( ) - > 
 + { 
 + int ret = 0 ; 
 + for ( Server server : servers ) 
 + ret + = server . getConnectedClients ( ) ; 
 + return ret ; 
 + } ) ; 
 + 
 + initialized = true ; 
 + } 
 + 
 + / * * 
 + * Starts native transport servers . 
 + * / 
 + public void start ( ) 
 + { 
 + initialize ( ) ; 
 + servers . forEach ( Server : : start ) ; 
 + } 
 + 
 + / * * 
 + * Stops currently running native transport servers . 
 + * / 
 + public void stop ( ) 
 + { 
 + servers . forEach ( Server : : stop ) ; 
 + } 
 + 
 + / * * 
 + * Ultimately stops servers and closes all resources . 
 + * / 
 + public void destroy ( ) 
 + { 
 + stop ( ) ; 
 + servers = Collections . emptyList ( ) ; 
 + 
 + / / shutdown executors used by netty for native transport server 
 + Future < ? > wgStop = workerGroup . shutdownGracefully ( 0 , 0 , TimeUnit . SECONDS ) ; 
 + 
 + try 
 + { 
 + wgStop . await ( 5000 ) ; 
 + } 
 + catch ( InterruptedException e1 ) 
 + { 
 + Thread . currentThread ( ) . interrupt ( ) ; 
 + } 
 + 
 + / / shutdownGracefully not implemented yet in RequestThreadPoolExecutor 
 + eventExecutorGroup . shutdown ( ) ; 
 + } 
 + 
 + / * * 
 + * @ return intend to use epoll bassed event looping 
 + * / 
 + public static boolean useEpoll ( ) 
 + { 
 + final boolean enableEpoll = Boolean . valueOf ( System . getProperty ( " cassandra . native . epoll . enabled " , " true " ) ) ; 
 + return enableEpoll & & Epoll . isAvailable ( ) ; 
 + } 
 + 
 + / * * 
 + * @ return true in case native transport server is running 
 + * / 
 + public boolean isRunning ( ) 
 + { 
 + for ( Server server : servers ) 
 + if ( server . isRunning ( ) ) return true ; 
 + return false ; 
 + } 
 + 
 + @ VisibleForTesting 
 + EventLoopGroup getWorkerGroup ( ) 
 + { 
 + return workerGroup ; 
 + } 
 + 
 + @ VisibleForTesting 
 + EventExecutor getEventExecutor ( ) 
 + { 
 + return eventExecutorGroup ; 
 + } 
 + 
 + @ VisibleForTesting 
 + Collection < Server > getServers ( ) 
 + { 
 + return servers ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index a7ffc04 . . 2d9bbec 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 405 , 10 + 405 , 10 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 { 
 throw new IllegalStateException ( " No configured daemon " ) ; 
 } 
 - 
 + 
 try 
 { 
 - daemon . nativeServer . start ( ) ; 
 + daemon . startNativeTransport ( ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 422 , 17 + 422 , 16 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 { 
 throw new IllegalStateException ( " No configured daemon " ) ; 
 } 
 - if ( daemon . nativeServer ! = null ) 
 - daemon . nativeServer . stop ( ) ; 
 + daemon . stopNativeTransport ( ) ; 
 } 
 
 public boolean isNativeTransportRunning ( ) 
 { 
 - if ( ( daemon = = null ) | | ( daemon . nativeServer = = null ) ) 
 + if ( daemon = = null ) 
 { 
 return false ; 
 } 
 - return daemon . nativeServer . isRunning ( ) ; 
 + return daemon . isNativeTransportRunning ( ) ; 
 } 
 
 public void stopTransports ( ) 
 diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java 
 index 72a1b60 . . cafc0ce 100644 
 - - - a / src / java / org / apache / cassandra / transport / Server . java 
 + + + b / src / java / org / apache / cassandra / transport / Server . java 
 @ @ - 22 , 9 + 22 , 8 @ @ import java . net . InetAddress ; 
 import java . net . InetSocketAddress ; 
 import java . net . UnknownHostException ; 
 import java . util . EnumMap ; 
 - import java . util . Map ; 
 import java . util . List ; 
 - import java . util . concurrent . Callable ; 
 + import java . util . Map ; 
 import java . util . concurrent . ConcurrentHashMap ; 
 import java . util . concurrent . atomic . AtomicBoolean ; 
 import javax . net . ssl . SSLContext ; 
 @ @ - 35 , 7 + 34 , 6 @ @ import org . slf4j . LoggerFactory ; 
 
 import io . netty . bootstrap . ServerBootstrap ; 
 import io . netty . channel . * ; 
 - import io . netty . channel . epoll . Epoll ; 
 import io . netty . channel . epoll . EpollEventLoopGroup ; 
 import io . netty . channel . epoll . EpollServerSocketChannel ; 
 import io . netty . channel . group . ChannelGroup ; 
 @ @ - 51 , 7 + 49 , 6 @ @ import io . netty . util . internal . logging . Slf4JLoggerFactory ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . EncryptionOptions ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 - import org . apache . cassandra . metrics . ClientMetrics ; 
 import org . apache . cassandra . security . SSLFactory ; 
 import org . apache . cassandra . service . * ; 
 import org . apache . cassandra . transport . messages . EventMessage ; 
 @ @ - 64 , 7 + 61 , 7 @ @ public class Server implements CassandraDaemon . Server 
 } 
 
 private static final Logger logger = LoggerFactory . getLogger ( Server . class ) ; 
 - private static final boolean enableEpoll = Boolean . valueOf ( System . getProperty ( " cassandra . native . epoll . enabled " , " true " ) ) ; 
 + private static final boolean useEpoll = NativeTransportService . useEpoll ( ) ; 
 
 public static final int VERSION _ 1 = 1 ; 
 public static final int VERSION _ 2 = 2 ; 
 @ @ - 83 , 41 + 80 , 32 @ @ public class Server implements CassandraDaemon . Server 
 } ; 
 
 public final InetSocketAddress socket ; 
 + public boolean useSSL = false ; 
 private final AtomicBoolean isRunning = new AtomicBoolean ( false ) ; 
 
 private EventLoopGroup workerGroup ; 
 private EventExecutor eventExecutorGroup ; 
 
 - public Server ( InetSocketAddress socket ) 
 + private Server ( Builder builder ) 
 { 
 - this . socket = socket ; 
 + this . socket = builder . getSocket ( ) ; 
 + this . useSSL = builder . useSSL ; 
 + if ( builder . workerGroup ! = null ) 
 + { 
 + workerGroup = builder . workerGroup ; 
 + } 
 + else 
 + { 
 + if ( useEpoll ) 
 + workerGroup = new EpollEventLoopGroup ( ) ; 
 + else 
 + workerGroup = new NioEventLoopGroup ( ) ; 
 + } 
 + if ( builder . eventExecutorGroup ! = null ) 
 + eventExecutorGroup = builder . eventExecutorGroup ; 
 EventNotifier notifier = new EventNotifier ( this ) ; 
 StorageService . instance . register ( notifier ) ; 
 MigrationManager . instance . register ( notifier ) ; 
 - registerMetrics ( ) ; 
 - } 
 - 
 - public Server ( String hostname , int port ) 
 - { 
 - this ( new InetSocketAddress ( hostname , port ) ) ; 
 - } 
 - 
 - public Server ( InetAddress host , int port ) 
 - { 
 - this ( new InetSocketAddress ( host , port ) ) ; 
 - } 
 - 
 - public Server ( int port ) 
 - { 
 - this ( new InetSocketAddress ( port ) ) ; 
 - } 
 - 
 - public void start ( ) 
 - { 
 - 	 if ( ! isRunning ( ) ) 
 - 	 { 
 - run ( ) ; 
 - 	 } 
 } 
 
 public void stop ( ) 
 @ @ - 131 , 35 + 119 , 25 @ @ public class Server implements CassandraDaemon . Server 
 return isRunning . get ( ) ; 
 } 
 
 - private void run ( ) 
 + public synchronized void start ( ) 
 { 
 - / / Configure the server . 
 - eventExecutorGroup = new RequestThreadPoolExecutor ( ) ; 
 - 
 - boolean hasEpoll = enableEpoll ? Epoll . isAvailable ( ) : false ; 
 - if ( hasEpoll ) 
 - { 
 - workerGroup = new EpollEventLoopGroup ( ) ; 
 - logger . info ( " Netty using native Epoll event loop " ) ; 
 - } 
 - else 
 - { 
 - workerGroup = new NioEventLoopGroup ( ) ; 
 - logger . info ( " Netty using Java NIO event loop " ) ; 
 - } 
 + if ( isRunning ( ) ) 
 + return ; 
 
 + / / Configure the server . 
 ServerBootstrap bootstrap = new ServerBootstrap ( ) 
 - . group ( workerGroup ) 
 - . channel ( hasEpoll ? EpollServerSocketChannel . class : NioServerSocketChannel . class ) 
 + . channel ( useEpoll ? EpollServerSocketChannel . class : NioServerSocketChannel . class ) 
 . childOption ( ChannelOption . TCP _ NODELAY , true ) 
 . childOption ( ChannelOption . SO _ LINGER , 0 ) 
 . childOption ( ChannelOption . SO _ KEEPALIVE , DatabaseDescriptor . getRpcKeepAlive ( ) ) 
 . childOption ( ChannelOption . ALLOCATOR , CBUtil . allocator ) 
 . childOption ( ChannelOption . WRITE _ BUFFER _ HIGH _ WATER _ MARK , 32 * 1024 ) 
 . childOption ( ChannelOption . WRITE _ BUFFER _ LOW _ WATER _ MARK , 8 * 1024 ) ; 
 + if ( workerGroup ! = null ) 
 + bootstrap = bootstrap . group ( workerGroup ) ; 
 
 final EncryptionOptions . ClientEncryptionOptions clientEnc = DatabaseDescriptor . getClientEncryptionOptions ( ) ; 
 - if ( clientEnc . enabled ) 
 + if ( this . useSSL ) 
 { 
 logger . info ( " Enabling encrypted CQL connections between client and server " ) ; 
 bootstrap . childHandler ( new SecureInitializer ( this , clientEnc ) ) ; 
 @ @ - 171 , 7 + 149 , 7 @ @ public class Server implements CassandraDaemon . Server 
 
 / / Bind and start to accept incoming connections . 
 logger . info ( " Using Netty Version : { } " , Version . identify ( ) . entrySet ( ) ) ; 
 - logger . info ( " Starting listening for CQL clients on { } . . . " , socket ) ; 
 + logger . info ( " Starting listening for CQL clients on { } ( { } ) . . . " , socket , this . useSSL ? " encrypted " : " unencrypted " ) ; 
 
 ChannelFuture bindFuture = bootstrap . bind ( socket ) ; 
 if ( ! bindFuture . awaitUninterruptibly ( ) . isSuccess ( ) ) 
 @ @ - 179 , 36 + 157 , 83 @ @ public class Server implements CassandraDaemon . Server 
 
 connectionTracker . allChannels . add ( bindFuture . channel ( ) ) ; 
 isRunning . set ( true ) ; 
 - 
 - StorageService . instance . setRpcReady ( true ) ; 
 } 
 
 - private void registerMetrics ( ) 
 + public int getConnectedClients ( ) 
 { 
 - ClientMetrics . instance . addCounter ( " connectedNativeClients " , new Callable < Integer > ( ) 
 - { 
 - @ Override 
 - public Integer call ( ) throws Exception 
 - { 
 - return connectionTracker . getConnectedClients ( ) ; 
 - } 
 - } ) ; 
 + return connectionTracker . getConnectedClients ( ) ; 
 } 
 - 
 + 
 private void close ( ) 
 { 
 / / Close opened connections 
 connectionTracker . closeAll ( ) ; 
 - workerGroup . shutdownGracefully ( ) ; 
 - workerGroup = null ; 
 - 
 - eventExecutorGroup . shutdown ( ) ; 
 - eventExecutorGroup = null ; 
 + 
 logger . info ( " Stop listening for CQL clients " ) ; 
 - 
 - StorageService . instance . setRpcReady ( false ) ; 
 } 
 
 + public static class Builder 
 + { 
 + private EventLoopGroup workerGroup ; 
 + private EventExecutor eventExecutorGroup ; 
 + private boolean useSSL = false ; 
 + private InetAddress hostAddr ; 
 + private int port = - 1 ; 
 + private InetSocketAddress socket ; 
 + 
 + public Builder withSSL ( boolean useSSL ) 
 + { 
 + this . useSSL = useSSL ; 
 + return this ; 
 + } 
 + 
 + public Builder withEventLoopGroup ( EventLoopGroup eventLoopGroup ) 
 + { 
 + this . workerGroup = eventLoopGroup ; 
 + return this ; 
 + } 
 + 
 + public Builder withEventExecutor ( EventExecutor eventExecutor ) 
 + { 
 + this . eventExecutorGroup = eventExecutor ; 
 + return this ; 
 + } 
 + 
 + public Builder withHost ( InetAddress host ) 
 + { 
 + this . hostAddr = host ; 
 + this . socket = null ; 
 + return this ; 
 + } 
 + 
 + public Builder withPort ( int port ) 
 + { 
 + this . port = port ; 
 + this . socket = null ; 
 + return this ; 
 + } 
 + 
 + public Server build ( ) 
 + { 
 + return new Server ( this ) ; 
 + } 
 + 
 + private InetSocketAddress getSocket ( ) 
 + { 
 + if ( this . socket ! = null ) 
 + return this . socket ; 
 + else 
 + { 
 + if ( this . port = = - 1 ) 
 + throw new IllegalStateException ( " Missing port number " ) ; 
 + if ( this . hostAddr ! = null ) 
 + this . socket = new InetSocketAddress ( this . hostAddr , this . port ) ; 
 + else 
 + throw new IllegalStateException ( " Missing host " ) ; 
 + return this . socket ; 
 + } 
 + } 
 + } 
 
 public static class ConnectionTracker implements Connection . Tracker 
 { 
 @ @ - 253 , 7 + 278 , 7 @ @ public class Server implements CassandraDaemon . Server 
 } 
 } 
 
 - private static class Initializer extends ChannelInitializer 
 + private static class Initializer extends ChannelInitializer < Channel > 
 { 
 / / Stateless handlers 
 private static final Message . ProtocolDecoder messageDecoder = new Message . ProtocolDecoder ( ) ; 
 @ @ - 294 , 7 + 319 , 10 @ @ public class Server implements CassandraDaemon . Server 
 pipeline . addLast ( " messageDecoder " , messageDecoder ) ; 
 pipeline . addLast ( " messageEncoder " , messageEncoder ) ; 
 
 - pipeline . addLast ( server . eventExecutorGroup , " executor " , dispatcher ) ; 
 + if ( server . eventExecutorGroup ! = null ) 
 + pipeline . addLast ( server . eventExecutorGroup , " executor " , dispatcher ) ; 
 + else 
 + pipeline . addLast ( " executor " , dispatcher ) ; 
 } 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 index 349975d . . 3d3729a 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 @ @ - 316 , 7 + 316 , 7 @ @ public abstract class CQLTester 
 StorageService . instance . initServer ( ) ; 
 SchemaLoader . startGossiper ( ) ; 
 
 - server = new org . apache . cassandra . transport . Server ( nativeAddr , nativePort ) ; 
 + server = new Server . Builder ( ) . withHost ( nativeAddr ) . withPort ( nativePort ) . build ( ) ; 
 server . start ( ) ; 
 
 for ( int version = 1 ; version < = maxProtocolVersion ; version + + ) 
 diff - - git a / test / unit / org / apache / cassandra / service / NativeTransportServiceTest . java b / test / unit / org / apache / cassandra / service / NativeTransportServiceTest . java 
 new file mode 100644 
 index 0000000 . . 7eb664f 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / service / NativeTransportServiceTest . java 
 @ @ - 0 , 0 + 1 , 193 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . service ; 
 + 
 + import java . util . Arrays ; 
 + import java . util . function . Consumer ; 
 + import java . util . function . Supplier ; 
 + import java . util . stream . Collectors ; 
 + import java . util . stream . IntStream ; 
 + 
 + import com . google . common . collect . Sets ; 
 + import org . junit . After ; 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . transport . Server ; 
 + import org . apache . cassandra . utils . Pair ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertTrue ; 
 + 
 + public class NativeTransportServiceTest 
 + { 
 + 
 + @ After 
 + public void resetConfig ( ) 
 + { 
 + DatabaseDescriptor . getClientEncryptionOptions ( ) . enabled = false ; 
 + DatabaseDescriptor . setNativeTransportPortSSL ( null ) ; 
 + } 
 + 
 + @ Test 
 + public void testServiceCanBeStopped ( ) 
 + { 
 + withService ( ( NativeTransportService service ) - > { 
 + service . stop ( ) ; 
 + assertFalse ( service . isRunning ( ) ) ; 
 + } ) ; 
 + } 
 + 
 + @ Test 
 + public void testIgnoresStartOnAlreadyStarted ( ) 
 + { 
 + withService ( ( NativeTransportService service ) - > { 
 + service . start ( ) ; 
 + service . start ( ) ; 
 + service . start ( ) ; 
 + } ) ; 
 + } 
 + 
 + @ Test 
 + public void testIgnoresStoppedOnAlreadyStopped ( ) 
 + { 
 + withService ( ( NativeTransportService service ) - > { 
 + service . stop ( ) ; 
 + service . stop ( ) ; 
 + service . stop ( ) ; 
 + } ) ; 
 + } 
 + 
 + @ Test 
 + public void testDestroy ( ) 
 + { 
 + withService ( ( NativeTransportService service ) - > { 
 + Supplier < Boolean > allTerminated = ( ) - > 
 + service . getWorkerGroup ( ) . isShutdown ( ) & & service . getWorkerGroup ( ) . isTerminated ( ) & & 
 + service . getEventExecutor ( ) . isShutdown ( ) & & service . getEventExecutor ( ) . isTerminated ( ) ; 
 + assertFalse ( allTerminated . get ( ) ) ; 
 + service . destroy ( ) ; 
 + assertTrue ( allTerminated . get ( ) ) ; 
 + } ) ; 
 + } 
 + 
 + @ Test 
 + public void testConcurrentStarts ( ) 
 + { 
 + withService ( NativeTransportService : : start , false , 20 ) ; 
 + } 
 + 
 + @ Test 
 + public void testConcurrentStops ( ) 
 + { 
 + withService ( NativeTransportService : : stop , true , 20 ) ; 
 + } 
 + 
 + @ Test 
 + public void testConcurrentDestroys ( ) 
 + { 
 + withService ( NativeTransportService : : destroy , true , 20 ) ; 
 + } 
 + 
 + @ Test 
 + public void testPlainDefaultPort ( ) 
 + { 
 + / / default plain settings : client encryption disabled and default native transport port 
 + withService ( ( NativeTransportService service ) - > 
 + { 
 + assertEquals ( 1 , service . getServers ( ) . size ( ) ) ; 
 + Server server = service . getServers ( ) . iterator ( ) . next ( ) ; 
 + assertFalse ( server . useSSL ) ; 
 + assertEquals ( server . socket . getPort ( ) , DatabaseDescriptor . getNativeTransportPort ( ) ) ; 
 + } ) ; 
 + } 
 + 
 + @ Test 
 + public void testSSLOnly ( ) 
 + { 
 + / / default ssl settings : client encryption enabled and default native transport port used for ssl only 
 + DatabaseDescriptor . getClientEncryptionOptions ( ) . enabled = true ; 
 + 
 + withService ( ( NativeTransportService service ) - > 
 + { 
 + service . initialize ( ) ; 
 + assertEquals ( 1 , service . getServers ( ) . size ( ) ) ; 
 + Server server = service . getServers ( ) . iterator ( ) . next ( ) ; 
 + assertTrue ( server . useSSL ) ; 
 + assertEquals ( server . socket . getPort ( ) , DatabaseDescriptor . getNativeTransportPort ( ) ) ; 
 + } , false , 1 ) ; 
 + } 
 + 
 + @ Test 
 + public void testSSLWithNonSSL ( ) 
 + { 
 + / / ssl + non - ssl settings : client encryption enabled and additional ssl port specified 
 + DatabaseDescriptor . getClientEncryptionOptions ( ) . enabled = true ; 
 + DatabaseDescriptor . setNativeTransportPortSSL ( 8432 ) ; 
 + 
 + withService ( ( NativeTransportService service ) - > 
 + { 
 + service . initialize ( ) ; 
 + assertEquals ( 2 , service . getServers ( ) . size ( ) ) ; 
 + assertEquals ( 
 + Sets . newHashSet ( Arrays . asList ( 
 + Pair . create ( true , DatabaseDescriptor . getNativeTransportPortSSL ( ) ) , 
 + Pair . create ( false , DatabaseDescriptor . getNativeTransportPort ( ) ) 
 + ) 
 + ) , 
 + service . getServers ( ) . stream ( ) . map ( ( Server s ) - > 
 + Pair . create ( s . useSSL , s . socket . getPort ( ) ) ) . collect ( Collectors . toSet ( ) ) 
 + ) ; 
 + } , false , 1 ) ; 
 + } 
 + 
 + private static void withService ( Consumer < NativeTransportService > f ) 
 + { 
 + withService ( f , true , 1 ) ; 
 + } 
 + 
 + private static void withService ( Consumer < NativeTransportService > f , boolean start , int concurrently ) 
 + { 
 + NativeTransportService service = new NativeTransportService ( ) ; 
 + assertFalse ( service . isRunning ( ) ) ; 
 + if ( start ) 
 + { 
 + service . start ( ) ; 
 + assertTrue ( service . isRunning ( ) ) ; 
 + } 
 + try 
 + { 
 + if ( concurrently = = 1 ) 
 + { 
 + f . accept ( service ) ; 
 + } 
 + else 
 + { 
 + IntStream . range ( 0 , concurrently ) . parallel ( ) . map ( ( int i ) - > { 
 + f . accept ( service ) ; 
 + return 1 ; 
 + } ) . sum ( ) ; 
 + } 
 + } 
 + finally 
 + { 
 + service . stop ( ) ; 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / bin / cassandra b / bin / cassandra 
 index 6e7a25f . . 85d8533 100755 
 - - - a / bin / cassandra 
 + + + b / bin / cassandra 
 @ @ - 80 , 10 + 80 , 10 @ @ elif [ - r $ CASSANDRA _ INCLUDE ] ; then 
 fi 
 
 # Use JAVA _ HOME if set , otherwise look for java in PATH 
 - if [ - x $ JAVA _ HOME / bin / java ] ; then 
 + if [ - n " $ JAVA _ HOME " ] ; then 
 JAVA = $ JAVA _ HOME / bin / java 
 else 
 - JAVA = ` which java ` 
 + JAVA = java 
 fi 
 
 if [ - z $ CASSANDRA _ CONF - o - z $ CLASSPATH ] ; then 
 diff - - git a / conf / cassandra - env . sh b / conf / cassandra - env . sh 
 index f6e41d8 . . 46374ef 100644 
 - - - a / conf / cassandra - env . sh 
 + + + b / conf / cassandra - env . sh 
 @ @ - 92 , 7 + 92 , 7 @ @ JMX _ PORT = " 7199 " 
 JVM _ OPTS = " $ JVM _ OPTS - ea " 
 
 # add the jamm javaagent 
 - check _ openjdk = $ ( java - version 2 > & 1 | awk ' { if ( NR = = 2 ) { print $ 1 } } ' ) 
 + check _ openjdk = $ ( " $ { JAVA : - java } " - version 2 > & 1 | awk ' { if ( NR = = 2 ) { print $ 1 } } ' ) 
 if [ " $ check _ openjdk " ! = " OpenJDK " ] 
 then 
 JVM _ OPTS = " $ JVM _ OPTS - javaagent : $ CASSANDRA _ HOME / lib / jamm - 0 . 2 . 2 . jar " 
 diff - - git a / debian / cassandra . postinst b / debian / cassandra . postinst 
 index 1ac9385 . . 1825882 100644 
 - - - a / debian / cassandra . postinst 
 + + + b / debian / cassandra . postinst 
 @ @ - 34 , 7 + 34 , 7 @ @ case " $ 1 " in 
 cassandra 
 fi 
 
 - if [ - n $ 2 ] & & dpkg - - compare - versions " $ 2 " le 0 . 6 . 4 - 2 ; then 
 + if [ - n " $ 2 " ] & & dpkg - - compare - versions " $ 2 " le 0 . 6 . 4 - 2 ; then 
 chown - R cassandra : / var / lib / cassandra 
 chown - R cassandra : / var / log / cassandra 
 fi 
 diff - - git a / debian / init b / debian / init 
 index 7425c61 . . a3b2687 100644 
 - - - a / debian / init 
 + + + b / debian / init 
 @ @ - 30 , 23 + 30 , 15 @ @ JVM _ SEARCH _ DIRS = " / usr / lib / jvm / java - 6 - openjdk / usr / lib / jvm / java - 6 - sun " 
 [ - e / etc / cassandra / cassandra . yaml ] | | exit 0 
 [ - e / etc / cassandra / cassandra - env . sh ] | | exit 0 
 
 - # Read Cassandra environment file . 
 - . / etc / cassandra / cassandra - env . sh 
 - 
 # Read configuration variable file if it is present 
 [ - r / etc / default / $ NAME ] & & . / etc / default / $ NAME 
 
 - if [ - z " $ JVM _ OPTS " ] ; then 
 - echo " Initialization failed ; \ $ JVM _ OPTS not set ! " > & 2 
 - exit 3 
 - fi 
 - 
 # If JAVA _ HOME has not been set , try to determine it . 
 if [ - z " $ JAVA _ HOME " ] ; then 
 # If java is in PATH , use a JAVA _ HOME that corresponds to that . This is 
 # both consistent with how the upstream startup script works , and how 
 # Debian works ( read : the use of alternatives to set a system JVM ) . 
 - if [ - n ` which java ` ] ; then 
 + if [ - n " ` which java ` " ] ; then 
 java = ` which java ` 
 # Dereference symlink ( s ) 
 while true ; do 
 @ @ - 67 , 6 + 59 , 15 @ @ if [ - z " $ JAVA _ HOME " ] ; then 
 done 
 fi 
 fi 
 + JAVA = " $ JAVA _ HOME / bin / java " 
 + 
 + # Read Cassandra environment file . 
 + . / etc / cassandra / cassandra - env . sh 
 + 
 + if [ - z " $ JVM _ OPTS " ] ; then 
 + echo " Initialization failed ; \ $ JVM _ OPTS not set ! " > & 2 
 + exit 3 
 + fi 
 
 # Load the VERBOSE setting and other rcS variables 
 . / lib / init / vars . sh
