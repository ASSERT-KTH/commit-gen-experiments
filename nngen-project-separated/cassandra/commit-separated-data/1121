BLEU SCORE: 0.010697691669654345

TEST MSG: Fix EstimatedHistogram creation in nodetool tablehistograms
GENERATED MSG: fix EH . max . patch by jbellis and brandonwilliams for CASSANDRA - 1413

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6bbded8 . . e8fbc0d 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 2 <nl> + * Fix EstimatedHistogram creation in nodetool tablehistograms ( CASSANDRA - 10859 ) <nl> * Establish bootstrap stream sessions sequentially ( CASSANDRA - 6992 ) <nl> * Sort compactionhistory output by timestamp ( CASSANDRA - 10464 ) <nl> * More efficient BTree removal ( CASSANDRA - 9991 ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / TableHistograms . java b / src / java / org / apache / cassandra / tools / nodetool / TableHistograms . java <nl> index f3f9b8a . . 8f4ffa6 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / nodetool / TableHistograms . java <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / TableHistograms . java <nl> @ @ - 79 , 14 + 79 , 12 @ @ public class TableHistograms extends NodeToolCmd <nl> } <nl> else <nl> { <nl> - long [ ] partitionSizeBucketOffsets = new EstimatedHistogram ( estimatedPartitionSize . length ) . getBucketOffsets ( ) ; <nl> - long [ ] columnCountBucketOffsets = new EstimatedHistogram ( estimatedColumnCount . length ) . getBucketOffsets ( ) ; <nl> - EstimatedHistogram partitionSizeHist = new EstimatedHistogram ( partitionSizeBucketOffsets , estimatedPartitionSize ) ; <nl> - EstimatedHistogram columnCountHist = new EstimatedHistogram ( columnCountBucketOffsets , estimatedColumnCount ) ; <nl> + EstimatedHistogram partitionSizeHist = new EstimatedHistogram ( estimatedPartitionSize ) ; <nl> + EstimatedHistogram columnCountHist = new EstimatedHistogram ( estimatedColumnCount ) ; <nl> <nl> if ( partitionSizeHist . isOverflowed ( ) ) <nl> { <nl> - System . err . println ( String . format ( " Row sizes are larger than % s , unable to calculate percentiles " , partitionSizeBucketOffsets [ partitionSizeBucketOffsets . length - 1 ] ) ) ; <nl> + System . err . println ( String . format ( " Row sizes are larger than % s , unable to calculate percentiles " , partitionSizeHist . getLargestBucketOffset ( ) ) ) ; <nl> for ( int i = 0 ; i < offsetPercentiles . length ; i + + ) <nl> estimatedRowSizePercentiles [ i ] = Double . NaN ; <nl> } <nl> @ @ - 98 , 7 + 96 , 7 @ @ public class TableHistograms extends NodeToolCmd <nl> <nl> if ( columnCountHist . isOverflowed ( ) ) <nl> { <nl> - System . err . println ( String . format ( " Column counts are larger than % s , unable to calculate percentiles " , columnCountBucketOffsets [ columnCountBucketOffsets . length - 1 ] ) ) ; <nl> + System . err . println ( String . format ( " Column counts are larger than % s , unable to calculate percentiles " , columnCountHist . getLargestBucketOffset ( ) ) ) ; <nl> for ( int i = 0 ; i < estimatedColumnCountPercentiles . length ; i + + ) <nl> estimatedColumnCountPercentiles [ i ] = Double . NaN ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / EstimatedHistogram . java b / src / java / org / apache / cassandra / utils / EstimatedHistogram . java <nl> index 0249980 . . aa141f7 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / EstimatedHistogram . java <nl> + + + b / src / java / org / apache / cassandra / utils / EstimatedHistogram . java <nl> @ @ - 65 , 6 + 65 , 18 @ @ public class EstimatedHistogram <nl> buckets = new AtomicLongArray ( bucketOffsets . length + 1 ) ; <nl> } <nl> <nl> + / * * <nl> + * Create EstimatedHistogram from only bucket data . <nl> + * <nl> + * @ param bucketData bucket data <nl> + * / <nl> + public EstimatedHistogram ( long [ ] bucketData ) <nl> + { <nl> + assert bucketData ! = null & & bucketData . length > 0 : " Bucket data must be an array of size more than 0 " ; <nl> + bucketOffsets = newOffsets ( bucketData . length - 1 , false ) ; <nl> + buckets = new AtomicLongArray ( bucketData ) ; <nl> + } <nl> + <nl> public EstimatedHistogram ( long [ ] offsets , long [ ] bucketData ) <nl> { <nl> assert bucketData . length = = offsets . length + 1 ; <nl> @ @ - 242 , 6 + 254 , 14 @ @ public class EstimatedHistogram <nl> } <nl> <nl> / * * <nl> + * @ return the largest bucket offset <nl> + * / <nl> + public long getLargestBucketOffset ( ) <nl> + { <nl> + return bucketOffsets [ bucketOffsets . length - 1 ] ; <nl> + } <nl> + <nl> + / * * <nl> * @ return true if this histogram has overflowed - - that is , a value larger than our largest bucket could bound was added <nl> * / <nl> public boolean isOverflowed ( )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b7243ff . . 7abf402 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 35 , 6 + 35 , 7 @ @ dev <nl> * fix using DynamicEndpointSnitch with NetworkTopologyStrategy <nl> ( CASSANDRA - 1429 ) <nl> * Add CfDef . default _ validation _ class ( CASSANDRA - 891 ) <nl> + * fix EstimatedHistogram . max ( CASSANDRA - 1413 ) <nl> <nl> <nl> 0 . 7 - beta1 <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTable . java b / src / java / org / apache / cassandra / io / sstable / SSTable . java <nl> index 03aea64 . . 86b5592 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTable . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTable . java <nl> @ @ - 64 , 8 + 64 , 8 @ @ public abstract class SSTable <nl> public static final String TEMPFILE _ MARKER = " tmp " ; <nl> <nl> public static List < String > components = Collections . unmodifiableList ( Arrays . asList ( COMPONENT _ FILTER , COMPONENT _ INDEX , COMPONENT _ DATA ) ) ; <nl> - protected EstimatedHistogram estimatedRowSize = new EstimatedHistogram ( 130 ) ; <nl> - protected EstimatedHistogram estimatedColumnCount = new EstimatedHistogram ( 112 ) ; <nl> + protected EstimatedHistogram estimatedRowSize = new EstimatedHistogram ( 150 ) ; <nl> + protected EstimatedHistogram estimatedColumnCount = new EstimatedHistogram ( 114 ) ; <nl> <nl> protected SSTable ( String filename , CFMetaData metadata , IPartitioner partitioner ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / utils / EstimatedHistogram . java b / src / java / org / apache / cassandra / utils / EstimatedHistogram . java <nl> index d2b7ec0 . . bb36059 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / EstimatedHistogram . java <nl> + + + b / src / java / org / apache / cassandra / utils / EstimatedHistogram . java <nl> @ @ - 40 , 8 + 40 , 7 @ @ public class EstimatedHistogram <nl> <nl> public EstimatedHistogram ( ) <nl> { <nl> - makeOffsets ( 90 ) ; <nl> - buckets = new AtomicLongArray ( numBuckets ) ; <nl> + this ( 90 ) ; <nl> } <nl> <nl> public EstimatedHistogram ( int bucketCount ) <nl> @ @ - 118 , 10 + 117 , 14 @ @ public class EstimatedHistogram <nl> <nl> public long max ( ) <nl> { <nl> - for ( int i = numBuckets - 1 ; i > = 0 ; i - - ) <nl> + int lastBucket = numBuckets - 1 ; <nl> + if ( buckets . get ( lastBucket ) > 0 ) <nl> + throw new IllegalStateException ( " Unable to compute ceiling for max when all buckets are full " ) ; <nl> + <nl> + for ( int i = lastBucket - 1 ; i > = 0 ; i - - ) <nl> { <nl> if ( buckets . get ( i ) > 0 ) <nl> - return bucketOffsets [ i = = 0 ? 0 : i - 1 ] ; <nl> + return bucketOffsets [ i ] ; <nl> } <nl> return 0 ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java b / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java <nl> index c99d921 . . 4bb1652 100644 <nl> - - - a / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java <nl> + + + b / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java <nl> @ @ - 33 , 8 + 33 , 8 @ @ public class EstimatedHistogramTest <nl> histogram . add ( 0L ) ; <nl> assertEquals ( 1 , histogram . get ( false ) [ 0 ] ) ; <nl> <nl> - histogram . add ( 33282687 ) ; <nl> - assertEquals ( 1 , histogram . get ( false ) [ histogram . buckets . length ( ) - 1 ] ) ; <nl> + histogram . add ( 23282687 ) ; <nl> + assertEquals ( 1 , histogram . get ( false ) [ histogram . buckets . length ( ) - 2 ] ) ; <nl> <nl> histogram . add ( 1 ) ; <nl> assertEquals ( 1 , histogram . get ( false ) [ 1 ] ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6bbded8 . . e8fbc0d 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 2 
 + * Fix EstimatedHistogram creation in nodetool tablehistograms ( CASSANDRA - 10859 ) 
 * Establish bootstrap stream sessions sequentially ( CASSANDRA - 6992 ) 
 * Sort compactionhistory output by timestamp ( CASSANDRA - 10464 ) 
 * More efficient BTree removal ( CASSANDRA - 9991 ) 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / TableHistograms . java b / src / java / org / apache / cassandra / tools / nodetool / TableHistograms . java 
 index f3f9b8a . . 8f4ffa6 100644 
 - - - a / src / java / org / apache / cassandra / tools / nodetool / TableHistograms . java 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / TableHistograms . java 
 @ @ - 79 , 14 + 79 , 12 @ @ public class TableHistograms extends NodeToolCmd 
 } 
 else 
 { 
 - long [ ] partitionSizeBucketOffsets = new EstimatedHistogram ( estimatedPartitionSize . length ) . getBucketOffsets ( ) ; 
 - long [ ] columnCountBucketOffsets = new EstimatedHistogram ( estimatedColumnCount . length ) . getBucketOffsets ( ) ; 
 - EstimatedHistogram partitionSizeHist = new EstimatedHistogram ( partitionSizeBucketOffsets , estimatedPartitionSize ) ; 
 - EstimatedHistogram columnCountHist = new EstimatedHistogram ( columnCountBucketOffsets , estimatedColumnCount ) ; 
 + EstimatedHistogram partitionSizeHist = new EstimatedHistogram ( estimatedPartitionSize ) ; 
 + EstimatedHistogram columnCountHist = new EstimatedHistogram ( estimatedColumnCount ) ; 
 
 if ( partitionSizeHist . isOverflowed ( ) ) 
 { 
 - System . err . println ( String . format ( " Row sizes are larger than % s , unable to calculate percentiles " , partitionSizeBucketOffsets [ partitionSizeBucketOffsets . length - 1 ] ) ) ; 
 + System . err . println ( String . format ( " Row sizes are larger than % s , unable to calculate percentiles " , partitionSizeHist . getLargestBucketOffset ( ) ) ) ; 
 for ( int i = 0 ; i < offsetPercentiles . length ; i + + ) 
 estimatedRowSizePercentiles [ i ] = Double . NaN ; 
 } 
 @ @ - 98 , 7 + 96 , 7 @ @ public class TableHistograms extends NodeToolCmd 
 
 if ( columnCountHist . isOverflowed ( ) ) 
 { 
 - System . err . println ( String . format ( " Column counts are larger than % s , unable to calculate percentiles " , columnCountBucketOffsets [ columnCountBucketOffsets . length - 1 ] ) ) ; 
 + System . err . println ( String . format ( " Column counts are larger than % s , unable to calculate percentiles " , columnCountHist . getLargestBucketOffset ( ) ) ) ; 
 for ( int i = 0 ; i < estimatedColumnCountPercentiles . length ; i + + ) 
 estimatedColumnCountPercentiles [ i ] = Double . NaN ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / EstimatedHistogram . java b / src / java / org / apache / cassandra / utils / EstimatedHistogram . java 
 index 0249980 . . aa141f7 100644 
 - - - a / src / java / org / apache / cassandra / utils / EstimatedHistogram . java 
 + + + b / src / java / org / apache / cassandra / utils / EstimatedHistogram . java 
 @ @ - 65 , 6 + 65 , 18 @ @ public class EstimatedHistogram 
 buckets = new AtomicLongArray ( bucketOffsets . length + 1 ) ; 
 } 
 
 + / * * 
 + * Create EstimatedHistogram from only bucket data . 
 + * 
 + * @ param bucketData bucket data 
 + * / 
 + public EstimatedHistogram ( long [ ] bucketData ) 
 + { 
 + assert bucketData ! = null & & bucketData . length > 0 : " Bucket data must be an array of size more than 0 " ; 
 + bucketOffsets = newOffsets ( bucketData . length - 1 , false ) ; 
 + buckets = new AtomicLongArray ( bucketData ) ; 
 + } 
 + 
 public EstimatedHistogram ( long [ ] offsets , long [ ] bucketData ) 
 { 
 assert bucketData . length = = offsets . length + 1 ; 
 @ @ - 242 , 6 + 254 , 14 @ @ public class EstimatedHistogram 
 } 
 
 / * * 
 + * @ return the largest bucket offset 
 + * / 
 + public long getLargestBucketOffset ( ) 
 + { 
 + return bucketOffsets [ bucketOffsets . length - 1 ] ; 
 + } 
 + 
 + / * * 
 * @ return true if this histogram has overflowed - - that is , a value larger than our largest bucket could bound was added 
 * / 
 public boolean isOverflowed ( )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b7243ff . . 7abf402 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 35 , 6 + 35 , 7 @ @ dev 
 * fix using DynamicEndpointSnitch with NetworkTopologyStrategy 
 ( CASSANDRA - 1429 ) 
 * Add CfDef . default _ validation _ class ( CASSANDRA - 891 ) 
 + * fix EstimatedHistogram . max ( CASSANDRA - 1413 ) 
 
 
 0 . 7 - beta1 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTable . java b / src / java / org / apache / cassandra / io / sstable / SSTable . java 
 index 03aea64 . . 86b5592 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTable . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTable . java 
 @ @ - 64 , 8 + 64 , 8 @ @ public abstract class SSTable 
 public static final String TEMPFILE _ MARKER = " tmp " ; 
 
 public static List < String > components = Collections . unmodifiableList ( Arrays . asList ( COMPONENT _ FILTER , COMPONENT _ INDEX , COMPONENT _ DATA ) ) ; 
 - protected EstimatedHistogram estimatedRowSize = new EstimatedHistogram ( 130 ) ; 
 - protected EstimatedHistogram estimatedColumnCount = new EstimatedHistogram ( 112 ) ; 
 + protected EstimatedHistogram estimatedRowSize = new EstimatedHistogram ( 150 ) ; 
 + protected EstimatedHistogram estimatedColumnCount = new EstimatedHistogram ( 114 ) ; 
 
 protected SSTable ( String filename , CFMetaData metadata , IPartitioner partitioner ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / utils / EstimatedHistogram . java b / src / java / org / apache / cassandra / utils / EstimatedHistogram . java 
 index d2b7ec0 . . bb36059 100644 
 - - - a / src / java / org / apache / cassandra / utils / EstimatedHistogram . java 
 + + + b / src / java / org / apache / cassandra / utils / EstimatedHistogram . java 
 @ @ - 40 , 8 + 40 , 7 @ @ public class EstimatedHistogram 
 
 public EstimatedHistogram ( ) 
 { 
 - makeOffsets ( 90 ) ; 
 - buckets = new AtomicLongArray ( numBuckets ) ; 
 + this ( 90 ) ; 
 } 
 
 public EstimatedHistogram ( int bucketCount ) 
 @ @ - 118 , 10 + 117 , 14 @ @ public class EstimatedHistogram 
 
 public long max ( ) 
 { 
 - for ( int i = numBuckets - 1 ; i > = 0 ; i - - ) 
 + int lastBucket = numBuckets - 1 ; 
 + if ( buckets . get ( lastBucket ) > 0 ) 
 + throw new IllegalStateException ( " Unable to compute ceiling for max when all buckets are full " ) ; 
 + 
 + for ( int i = lastBucket - 1 ; i > = 0 ; i - - ) 
 { 
 if ( buckets . get ( i ) > 0 ) 
 - return bucketOffsets [ i = = 0 ? 0 : i - 1 ] ; 
 + return bucketOffsets [ i ] ; 
 } 
 return 0 ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java b / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java 
 index c99d921 . . 4bb1652 100644 
 - - - a / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java 
 + + + b / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java 
 @ @ - 33 , 8 + 33 , 8 @ @ public class EstimatedHistogramTest 
 histogram . add ( 0L ) ; 
 assertEquals ( 1 , histogram . get ( false ) [ 0 ] ) ; 
 
 - histogram . add ( 33282687 ) ; 
 - assertEquals ( 1 , histogram . get ( false ) [ histogram . buckets . length ( ) - 1 ] ) ; 
 + histogram . add ( 23282687 ) ; 
 + assertEquals ( 1 , histogram . get ( false ) [ histogram . buckets . length ( ) - 2 ] ) ; 
 
 histogram . add ( 1 ) ; 
 assertEquals ( 1 , histogram . get ( false ) [ 1 ] ) ;
