BLEU SCORE: 0.16186478197091597

TEST MSG: Cleanup SegmentedFile API
GENERATED MSG: Fix CASSANDRA - 3427

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 7352068 . . 3f04637 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 4 <nl> + * Cleanup SegmentedFile API ( CASSANDRA - 8749 ) <nl> * Avoid overlap with early compaction replacement ( CASSANDRA - 8683 ) <nl> * Safer Resource Management + + ( CASSANDRA - 8707 ) <nl> * Write partition size estimates into a system table ( CASSANDRA - 7688 ) <nl> diff - - git a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java <nl> index 4521c19 . . 49dcd3d 100644 <nl> - - - a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java <nl> + + + b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java <nl> @ @ - 37 , 6 + 37 , 10 @ @ import org . apache . cassandra . utils . FBUtilities ; <nl> * / <nl> public class CompressedRandomAccessReader extends RandomAccessReader <nl> { <nl> + public static CompressedRandomAccessReader open ( String dataFilePath , CompressionMetadata metadata ) <nl> + { <nl> + return open ( dataFilePath , metadata , null ) ; <nl> + } <nl> public static CompressedRandomAccessReader open ( String path , CompressionMetadata metadata , CompressedPoolingSegmentedFile owner ) <nl> { <nl> try <nl> @ @ - 49 , 17 + 53 , 6 @ @ public class CompressedRandomAccessReader extends RandomAccessReader <nl> } <nl> } <nl> <nl> - public static CompressedRandomAccessReader open ( String dataFilePath , CompressionMetadata metadata ) <nl> - { <nl> - try <nl> - { <nl> - return new CompressedRandomAccessReader ( dataFilePath , metadata , null ) ; <nl> - } <nl> - catch ( FileNotFoundException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - } <nl> <nl> private final CompressionMetadata metadata ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> index a588bff . . f59e632 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> @ @ - 77 , 8 + 77 , 6 @ @ import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . dht . LocalPartitioner ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . dht . Token ; <nl> - import org . apache . cassandra . io . compress . CompressedRandomAccessReader ; <nl> - import org . apache . cassandra . io . compress . CompressedThrottledReader ; <nl> import org . apache . cassandra . io . compress . CompressionMetadata ; <nl> import org . apache . cassandra . io . sstable . metadata . CompactionMetadata ; <nl> import org . apache . cassandra . io . sstable . metadata . MetadataComponent ; <nl> @ @ - 93 , 7 + 91 , 6 @ @ import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . io . util . ICompressedFile ; <nl> import org . apache . cassandra . io . util . RandomAccessReader ; <nl> import org . apache . cassandra . io . util . SegmentedFile ; <nl> - import org . apache . cassandra . io . util . ThrottledReader ; <nl> import org . apache . cassandra . metrics . RestorableMeter ; <nl> import org . apache . cassandra . metrics . StorageMetrics ; <nl> import org . apache . cassandra . service . ActiveRepairService ; <nl> @ @ - 1852 , 21 + 1849 , 17 @ @ public class SSTableReader extends SSTable implements RefCounted < SSTableReader > <nl> public RandomAccessReader openDataReader ( RateLimiter limiter ) <nl> { <nl> assert limiter ! = null ; <nl> - return compression <nl> - ? CompressedThrottledReader . open ( getFilename ( ) , getCompressionMetadata ( ) , limiter ) <nl> - : ThrottledReader . open ( new File ( getFilename ( ) ) , limiter ) ; <nl> + return dfile . createThrottledReader ( limiter ) ; <nl> } <nl> <nl> public RandomAccessReader openDataReader ( ) <nl> { <nl> - return compression <nl> - ? CompressedRandomAccessReader . open ( getFilename ( ) , getCompressionMetadata ( ) ) <nl> - : RandomAccessReader . open ( new File ( getFilename ( ) ) ) ; <nl> + return dfile . createReader ( ) ; <nl> } <nl> <nl> public RandomAccessReader openIndexReader ( ) <nl> { <nl> - return RandomAccessReader . open ( new File ( getIndexFilename ( ) ) ) ; <nl> + return ifile . createReader ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / io / util / BufferedPoolingSegmentedFile . java b / src / java / org / apache / cassandra / io / util / BufferedPoolingSegmentedFile . java <nl> index 8334965 . . e4c363a 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / BufferedPoolingSegmentedFile . java <nl> + + + b / src / java / org / apache / cassandra / io / util / BufferedPoolingSegmentedFile . java <nl> @ @ - 51 , 9 + 51 , 4 @ @ public class BufferedPoolingSegmentedFile extends PoolingSegmentedFile <nl> return new BufferedPoolingSegmentedFile ( path , length ) ; <nl> } <nl> } <nl> - <nl> - protected RandomAccessReader createReader ( String path ) <nl> - { <nl> - return RandomAccessReader . open ( new File ( path ) , this ) ; <nl> - } <nl> } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / io / util / CompressedPoolingSegmentedFile . java b / src / java / org / apache / cassandra / io / util / CompressedPoolingSegmentedFile . java <nl> index 94d23bf . . c514b80 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / CompressedPoolingSegmentedFile . java <nl> + + + b / src / java / org / apache / cassandra / io / util / CompressedPoolingSegmentedFile . java <nl> @ @ - 17 , 8 + 17 , 11 @ @ <nl> * / <nl> package org . apache . cassandra . io . util ; <nl> <nl> + import com . google . common . util . concurrent . RateLimiter ; <nl> + <nl> import org . apache . cassandra . io . compress . CompressedRandomAccessReader ; <nl> import org . apache . cassandra . io . compress . CompressedSequentialWriter ; <nl> + import org . apache . cassandra . io . compress . CompressedThrottledReader ; <nl> import org . apache . cassandra . io . compress . CompressionMetadata ; <nl> import org . apache . cassandra . io . sstable . SSTableWriter ; <nl> <nl> @ @ - 70 , 7 + 73 , 18 @ @ public class CompressedPoolingSegmentedFile extends PoolingSegmentedFile impleme <nl> return new CompressedPoolingSegmentedFile ( path , metadata ( path , finishType ) ) ; <nl> } <nl> } <nl> - protected RandomAccessReader createReader ( String path ) <nl> + <nl> + public RandomAccessReader createReader ( ) <nl> + { <nl> + return CompressedRandomAccessReader . open ( path , metadata , null ) ; <nl> + } <nl> + <nl> + public RandomAccessReader createThrottledReader ( RateLimiter limiter ) <nl> + { <nl> + return CompressedThrottledReader . open ( path , metadata , limiter ) ; <nl> + } <nl> + <nl> + protected RandomAccessReader createPooledReader ( ) <nl> { <nl> return CompressedRandomAccessReader . open ( path , metadata , this ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java b / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java <nl> index 0c20bb9 . . 6b5c2e1 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java <nl> + + + b / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java <nl> @ @ - 17 , 8 + 17 , 11 @ @ <nl> * / <nl> package org . apache . cassandra . io . util ; <nl> <nl> + import com . google . common . util . concurrent . RateLimiter ; <nl> + <nl> import org . apache . cassandra . io . compress . CompressedRandomAccessReader ; <nl> import org . apache . cassandra . io . compress . CompressedSequentialWriter ; <nl> + import org . apache . cassandra . io . compress . CompressedThrottledReader ; <nl> import org . apache . cassandra . io . compress . CompressionMetadata ; <nl> import org . apache . cassandra . io . sstable . SSTableWriter ; <nl> <nl> @ @ - 84 , 11 + 87 , 14 @ @ public class CompressedSegmentedFile extends SegmentedFile implements ICompresse <nl> } <nl> } <nl> <nl> - public FileDataInput getSegment ( long position ) <nl> + public RandomAccessReader createReader ( ) <nl> + { <nl> + return CompressedRandomAccessReader . open ( path , metadata ) ; <nl> + } <nl> + <nl> + public RandomAccessReader createThrottledReader ( RateLimiter limiter ) <nl> { <nl> - RandomAccessReader reader = CompressedRandomAccessReader . open ( path , metadata , null ) ; <nl> - reader . seek ( position ) ; <nl> - return reader ; <nl> + return CompressedThrottledReader . open ( path , metadata , limiter ) ; <nl> } <nl> <nl> public CompressionMetadata getMetadata ( ) <nl> diff - - git a / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java b / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java <nl> index fb5b62e . . d056240 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java <nl> + + + b / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java <nl> @ @ - 31 , 15 + 31 , 6 @ @ public class MappedFileDataInput extends AbstractDataInput implements FileDataIn <nl> private final long segmentOffset ; <nl> private int position ; <nl> <nl> - public MappedFileDataInput ( FileInputStream stream , String filename , long segmentOffset , int position ) throws IOException <nl> - { <nl> - FileChannel channel = stream . getChannel ( ) ; <nl> - buffer = channel . map ( FileChannel . MapMode . READ _ ONLY , position , channel . size ( ) ) ; <nl> - this . filename = filename ; <nl> - this . segmentOffset = segmentOffset ; <nl> - this . position = position ; <nl> - } <nl> - <nl> public MappedFileDataInput ( MappedByteBuffer buffer , String filename , long segmentOffset , int position ) <nl> { <nl> assert buffer ! = null ; <nl> diff - - git a / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java b / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java <nl> index 8b4ae9d . . 8067c68 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java <nl> + + + b / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java <nl> @ @ - 89 , 7 + 89 , 8 @ @ public class MmappedSegmentedFile extends SegmentedFile <nl> return new MappedFileDataInput ( segment . right , path , segment . left , ( int ) ( position - segment . left ) ) ; <nl> } <nl> <nl> - / / not mmap ' d : open a braf covering the segment <nl> + / / we can have single cells or partitions larger than 2Gb , which is our maximum addressable range in a single segment ; <nl> + / / in this case we open as a normal random access reader <nl> / / FIXME : brafs are unbounded , so this segment will cover the rest of the file , rather than just the row <nl> RandomAccessReader file = RandomAccessReader . open ( new File ( path ) ) ; <nl> file . seek ( position ) ; <nl> @ @ - 152 , 7 + 153 , 7 @ @ public class MmappedSegmentedFile extends SegmentedFile <nl> public Builder ( ) <nl> { <nl> super ( ) ; <nl> - boundaries = new ArrayList < Long > ( ) ; <nl> + boundaries = new ArrayList < > ( ) ; <nl> boundaries . add ( 0L ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / util / PoolingSegmentedFile . java b / src / java / org / apache / cassandra / io / util / PoolingSegmentedFile . java <nl> index daca22f . . d3c90c7 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / PoolingSegmentedFile . java <nl> + + + b / src / java / org / apache / cassandra / io / util / PoolingSegmentedFile . java <nl> @ @ - 17 , 6 + 17 , 8 @ @ <nl> * / <nl> package org . apache . cassandra . io . util ; <nl> <nl> + import java . io . File ; <nl> + <nl> import org . apache . cassandra . service . FileCacheService ; <nl> <nl> public abstract class PoolingSegmentedFile extends SegmentedFile <nl> @ @ - 57 , 13 + 59 , 16 @ @ public abstract class PoolingSegmentedFile extends SegmentedFile <nl> RandomAccessReader reader = FileCacheService . instance . get ( cacheKey ) ; <nl> <nl> if ( reader = = null ) <nl> - reader = createReader ( path ) ; <nl> + reader = createPooledReader ( ) ; <nl> <nl> reader . seek ( position ) ; <nl> return reader ; <nl> } <nl> <nl> - protected abstract RandomAccessReader createReader ( String path ) ; <nl> + protected RandomAccessReader createPooledReader ( ) <nl> + { <nl> + return RandomAccessReader . open ( new File ( path ) , this ) ; <nl> + } <nl> <nl> public void recycle ( RandomAccessReader reader ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / io / util / SegmentedFile . java b / src / java / org / apache / cassandra / io / util / SegmentedFile . java <nl> index d557b72 . . 510ed81 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / SegmentedFile . java <nl> + + + b / src / java / org / apache / cassandra / io / util / SegmentedFile . java <nl> @ @ - 25 , 6 + 25 , 8 @ @ import java . nio . MappedByteBuffer ; <nl> import java . util . Iterator ; <nl> import java . util . NoSuchElementException ; <nl> <nl> + import com . google . common . util . concurrent . RateLimiter ; <nl> + <nl> import org . apache . cassandra . config . Config ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . io . FSReadError ; <nl> @ @ - 92 , 6 + 94 , 24 @ @ public abstract class SegmentedFile extends SharedCloseableImpl <nl> <nl> public abstract SegmentedFile sharedCopy ( ) ; <nl> <nl> + public RandomAccessReader createReader ( ) <nl> + { <nl> + return RandomAccessReader . open ( new File ( path ) ) ; <nl> + } <nl> + <nl> + public RandomAccessReader createThrottledReader ( RateLimiter limiter ) <nl> + { <nl> + assert limiter ! = null ; <nl> + return ThrottledReader . open ( new File ( path ) , limiter ) ; <nl> + } <nl> + <nl> + public FileDataInput getSegment ( long position ) <nl> + { <nl> + RandomAccessReader reader = createReader ( ) ; <nl> + reader . seek ( position ) ; <nl> + return reader ; <nl> + } <nl> + <nl> / * * <nl> * @ return A SegmentedFile . Builder . <nl> * / <nl> @ @ - 112 , 8 + 132 , 6 @ @ public abstract class SegmentedFile extends SharedCloseableImpl <nl> return new CompressedPoolingSegmentedFile . Builder ( writer ) ; <nl> } <nl> <nl> - public abstract FileDataInput getSegment ( long position ) ; <nl> - <nl> / * * <nl> * @ return An Iterator over segments , beginning with the segment containing the given position : each segment must be closed after use . <nl> * /
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 8134a9b . . e48f91f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 7 , 7 + 7 , 7 @ @ <nl> 1 . 0 . 2 <nl> * " defragment " rows for name - based queries under STCS ( CASSANDRA - 2503 ) <nl> * Add timing information to cassandra - cli GET / SET / LIST queries ( CASSANDRA - 3326 ) <nl> - * Cache for CompressionMetadata objects ( CASSANDRA - 3427 ) <nl> + * Only create one CompressionMetadata object per sstable ( CASSANDRA - 3427 ) <nl> * cleanup usage of StorageService . setMode ( ) ( CASANDRA - 3388 ) <nl> * synchronize BiMap of bootstrapping tokens ( CASSANDRA - 3417 ) <nl> * Avoid large array allocation for compressed chunk offsets ( CASSANDRA - 3432 ) <nl> diff - - git a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java <nl> index d3589cb . . 3bed2c3 100644 <nl> - - - a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java <nl> + + + b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java <nl> @ @ - 34 , 11 + 34 , 6 @ @ public class CompressedRandomAccessReader extends RandomAccessReader <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( CompressedRandomAccessReader . class ) ; <nl> <nl> - public static RandomAccessReader open ( String dataFilePath , boolean skipIOCache ) throws IOException <nl> - { <nl> - return open ( dataFilePath , CompressionMetadata . get ( dataFilePath ) , skipIOCache ) ; <nl> - } <nl> - <nl> public static RandomAccessReader open ( String dataFilePath , CompressionMetadata metadata ) throws IOException <nl> { <nl> return open ( dataFilePath , metadata , false ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java <nl> index a96eb76 . . 064d247 100644 <nl> - - - a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java <nl> + + + b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java <nl> @ @ - 21 , 7 + 21 , 6 @ @ package org . apache . cassandra . io . compress ; <nl> import java . io . * ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> - import java . util . concurrent . ConcurrentHashMap ; <nl> <nl> import org . apache . cassandra . config . ConfigurationException ; <nl> import org . apache . cassandra . io . sstable . Component ; <nl> @ @ - 41 , 43 + 40 , 23 @ @ public class CompressionMetadata <nl> public final CompressionParameters parameters ; <nl> <nl> / * * <nl> - * Caches instances of CompressionMetadata . <nl> - * Each metada holds the chunk offsets index , which is reasonably big for <nl> - * enough data , so it ' s an expensive structure . We thus only want one <nl> - * CompressionMetadata created for each sstable . <nl> - * Note that we could have a compressionMetadata field in SSTableReader , <nl> - * but CompressedSegmentFile . Builder needs it before the reader is <nl> - * created , so it ' s easier that way . <nl> - * / <nl> - private final static Map < String , CompressionMetadata > cache = new ConcurrentHashMap < String , CompressionMetadata > ( ) ; <nl> - <nl> - / * * <nl> - * Get metadata about given compressed file including uncompressed data length , chunk size <nl> + * Create metadata about given compressed file including uncompressed data length , chunk size <nl> * and list of the chunk offsets of the compressed data . <nl> * <nl> + * This is an expensive operation ! Don ' t create more than one for each <nl> + * sstable . <nl> + * <nl> * @ param dataFilePath Path to the compressed file <nl> * <nl> * @ return metadata about given compressed file . <nl> * / <nl> - public static CompressionMetadata get ( String dataFilePath ) <nl> + public static CompressionMetadata create ( String dataFilePath ) <nl> { <nl> - CompressionMetadata metadata = cache . get ( dataFilePath ) ; <nl> - if ( metadata ! = null ) <nl> - return metadata ; <nl> - <nl> - / / We want this to be relatively fast , because it ' s called often ( for each <nl> - / / range query ) . On the side , we don ' t care too much if the initial <nl> - / / creation is no thread - safe , because we ' ll call this when the <nl> - / / SSTableReader is loaded / created , so we ' re pretty sure there won ' t <nl> - / / be any contention . Besides , if we really do create two <nl> - / / CompressionMetadata , it ' s not the end of the world , so we don ' t <nl> - / / bother with synchronization <nl> Descriptor desc = Descriptor . fromFilename ( dataFilePath ) ; <nl> + <nl> try <nl> { <nl> - metadata = new CompressionMetadata ( desc . filenameFor ( Component . COMPRESSION _ INFO ) , new File ( dataFilePath ) . length ( ) ) ; <nl> - cache . put ( dataFilePath , metadata ) ; <nl> - return metadata ; <nl> + return new CompressionMetadata ( desc . filenameFor ( Component . COMPRESSION _ INFO ) , new File ( dataFilePath ) . length ( ) ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> @ @ - 85 , 7 + 64 , 7 @ @ public class CompressionMetadata <nl> } <nl> } <nl> <nl> - / / This is package protected because of the tests . Don ' t use , use get ( ) instead . <nl> + / / This is package protected because of the tests . <nl> CompressionMetadata ( String indexFilePath , long compressedLength ) throws IOException <nl> { <nl> this . indexFilePath = indexFilePath ; <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> index 06f67ff . . d4c6842 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> @ @ - 44 , 6 + 44 , 7 @ @ import org . apache . cassandra . db . filter . QueryFilter ; <nl> import org . apache . cassandra . dht . AbstractBounds ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . dht . Range ; <nl> + import org . apache . cassandra . io . compress . CompressionMetadata ; <nl> import org . apache . cassandra . io . util . * ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . * ; <nl> @ @ - 312 , 7 + 313 , 7 @ @ public class SSTableReader extends SSTable <nl> { <nl> boolean cacheLoading = keyCache ! = null & & ! keysToLoadInCache . isEmpty ( ) ; <nl> SegmentedFile . Builder ibuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) ) ; <nl> - SegmentedFile . Builder dbuilder = ( components . contains ( Component . COMPRESSION _ INFO ) ) <nl> + SegmentedFile . Builder dbuilder = compression <nl> ? SegmentedFile . getCompressedBuilder ( ) <nl> : SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) ) ; <nl> <nl> @ @ - 400 , 6 + 401 , 18 @ @ public class SSTableReader extends SSTable <nl> } <nl> <nl> / * * <nl> + * Returns the compression metadata for this sstable . <nl> + * @ throws IllegalStateException if the sstable is not compressed <nl> + * / <nl> + public CompressionMetadata getCompressionMetadata ( ) <nl> + { <nl> + if ( ! compression ) <nl> + throw new IllegalStateException ( this + " is not compressed " ) ; <nl> + <nl> + return ( ( CompressedSegmentedFile ) dfile ) . metadata ; <nl> + } <nl> + <nl> + / * * <nl> * For testing purposes only . <nl> * / <nl> public void forceFilterFailures ( ) <nl> @ @ - 899 , 7 + 912 , 7 @ @ public class SSTableReader extends SSTable <nl> public RandomAccessReader openDataReader ( boolean skipIOCache ) throws IOException <nl> { <nl> return compression <nl> - ? CompressedRandomAccessReader . open ( getFilename ( ) , skipIOCache ) <nl> + ? CompressedRandomAccessReader . open ( getFilename ( ) , getCompressionMetadata ( ) , skipIOCache ) <nl> : RandomAccessReader . open ( new File ( getFilename ( ) ) , skipIOCache ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java b / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java <nl> index eadf7f2 . . 9d1345a 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java <nl> + + + b / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java <nl> @ @ - 26 , 7 + 26 , 7 @ @ import org . apache . cassandra . io . compress . CompressionMetadata ; <nl> <nl> public class CompressedSegmentedFile extends SegmentedFile <nl> { <nl> - private final CompressionMetadata metadata ; <nl> + public final CompressionMetadata metadata ; <nl> <nl> public CompressedSegmentedFile ( String path , CompressionMetadata metadata ) <nl> { <nl> @ @ - 52 , 7 + 52 , 7 @ @ public class CompressedSegmentedFile extends SegmentedFile <nl> * / <nl> public SegmentedFile complete ( String path ) <nl> { <nl> - return new CompressedSegmentedFile ( path , CompressionMetadata . get ( path ) ) ; <nl> + return new CompressedSegmentedFile ( path , CompressionMetadata . create ( path ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / util / SegmentedFile . java b / src / java / org / apache / cassandra / io / util / SegmentedFile . java <nl> index 602909f . . 8a9682c 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / SegmentedFile . java <nl> + + + b / src / java / org / apache / cassandra / io / util / SegmentedFile . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . util . Iterator ; <nl> import java . util . NoSuchElementException ; <nl> <nl> import org . apache . cassandra . config . Config ; <nl> + import org . apache . cassandra . io . compress . CompressionMetadata ; <nl> import org . apache . cassandra . utils . Pair ; <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / streaming / FileStreamTask . java b / src / java / org / apache / cassandra / streaming / FileStreamTask . java <nl> index 7c97b29 . . 9411b16 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / FileStreamTask . java <nl> + + + b / src / java / org / apache / cassandra / streaming / FileStreamTask . java <nl> @ @ - 121 , 7 + 121 , 7 @ @ public class FileStreamTask extends WrappedRunnable <nl> <nl> / / TODO just use a raw RandomAccessFile since we ' re managing our own buffer here <nl> RandomAccessReader file = ( header . file . sstable . compression ) / / try to skip kernel page cache if possible <nl> - ? CompressedRandomAccessReader . open ( header . file . getFilename ( ) , true ) <nl> + ? CompressedRandomAccessReader . open ( header . file . getFilename ( ) , header . file . sstable . getCompressionMetadata ( ) , true ) <nl> : RandomAccessReader . open ( new File ( header . file . getFilename ( ) ) , true ) ; <nl> <nl> / / setting up data compression stream

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 7352068 . . 3f04637 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 4 
 + * Cleanup SegmentedFile API ( CASSANDRA - 8749 ) 
 * Avoid overlap with early compaction replacement ( CASSANDRA - 8683 ) 
 * Safer Resource Management + + ( CASSANDRA - 8707 ) 
 * Write partition size estimates into a system table ( CASSANDRA - 7688 ) 
 diff - - git a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java 
 index 4521c19 . . 49dcd3d 100644 
 - - - a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java 
 + + + b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java 
 @ @ - 37 , 6 + 37 , 10 @ @ import org . apache . cassandra . utils . FBUtilities ; 
 * / 
 public class CompressedRandomAccessReader extends RandomAccessReader 
 { 
 + public static CompressedRandomAccessReader open ( String dataFilePath , CompressionMetadata metadata ) 
 + { 
 + return open ( dataFilePath , metadata , null ) ; 
 + } 
 public static CompressedRandomAccessReader open ( String path , CompressionMetadata metadata , CompressedPoolingSegmentedFile owner ) 
 { 
 try 
 @ @ - 49 , 17 + 53 , 6 @ @ public class CompressedRandomAccessReader extends RandomAccessReader 
 } 
 } 
 
 - public static CompressedRandomAccessReader open ( String dataFilePath , CompressionMetadata metadata ) 
 - { 
 - try 
 - { 
 - return new CompressedRandomAccessReader ( dataFilePath , metadata , null ) ; 
 - } 
 - catch ( FileNotFoundException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - } 
 
 private final CompressionMetadata metadata ; 
 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 index a588bff . . f59e632 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 @ @ - 77 , 8 + 77 , 6 @ @ import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . dht . LocalPartitioner ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . dht . Token ; 
 - import org . apache . cassandra . io . compress . CompressedRandomAccessReader ; 
 - import org . apache . cassandra . io . compress . CompressedThrottledReader ; 
 import org . apache . cassandra . io . compress . CompressionMetadata ; 
 import org . apache . cassandra . io . sstable . metadata . CompactionMetadata ; 
 import org . apache . cassandra . io . sstable . metadata . MetadataComponent ; 
 @ @ - 93 , 7 + 91 , 6 @ @ import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . io . util . ICompressedFile ; 
 import org . apache . cassandra . io . util . RandomAccessReader ; 
 import org . apache . cassandra . io . util . SegmentedFile ; 
 - import org . apache . cassandra . io . util . ThrottledReader ; 
 import org . apache . cassandra . metrics . RestorableMeter ; 
 import org . apache . cassandra . metrics . StorageMetrics ; 
 import org . apache . cassandra . service . ActiveRepairService ; 
 @ @ - 1852 , 21 + 1849 , 17 @ @ public class SSTableReader extends SSTable implements RefCounted < SSTableReader > 
 public RandomAccessReader openDataReader ( RateLimiter limiter ) 
 { 
 assert limiter ! = null ; 
 - return compression 
 - ? CompressedThrottledReader . open ( getFilename ( ) , getCompressionMetadata ( ) , limiter ) 
 - : ThrottledReader . open ( new File ( getFilename ( ) ) , limiter ) ; 
 + return dfile . createThrottledReader ( limiter ) ; 
 } 
 
 public RandomAccessReader openDataReader ( ) 
 { 
 - return compression 
 - ? CompressedRandomAccessReader . open ( getFilename ( ) , getCompressionMetadata ( ) ) 
 - : RandomAccessReader . open ( new File ( getFilename ( ) ) ) ; 
 + return dfile . createReader ( ) ; 
 } 
 
 public RandomAccessReader openIndexReader ( ) 
 { 
 - return RandomAccessReader . open ( new File ( getIndexFilename ( ) ) ) ; 
 + return ifile . createReader ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / io / util / BufferedPoolingSegmentedFile . java b / src / java / org / apache / cassandra / io / util / BufferedPoolingSegmentedFile . java 
 index 8334965 . . e4c363a 100644 
 - - - a / src / java / org / apache / cassandra / io / util / BufferedPoolingSegmentedFile . java 
 + + + b / src / java / org / apache / cassandra / io / util / BufferedPoolingSegmentedFile . java 
 @ @ - 51 , 9 + 51 , 4 @ @ public class BufferedPoolingSegmentedFile extends PoolingSegmentedFile 
 return new BufferedPoolingSegmentedFile ( path , length ) ; 
 } 
 } 
 - 
 - protected RandomAccessReader createReader ( String path ) 
 - { 
 - return RandomAccessReader . open ( new File ( path ) , this ) ; 
 - } 
 } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / io / util / CompressedPoolingSegmentedFile . java b / src / java / org / apache / cassandra / io / util / CompressedPoolingSegmentedFile . java 
 index 94d23bf . . c514b80 100644 
 - - - a / src / java / org / apache / cassandra / io / util / CompressedPoolingSegmentedFile . java 
 + + + b / src / java / org / apache / cassandra / io / util / CompressedPoolingSegmentedFile . java 
 @ @ - 17 , 8 + 17 , 11 @ @ 
 * / 
 package org . apache . cassandra . io . util ; 
 
 + import com . google . common . util . concurrent . RateLimiter ; 
 + 
 import org . apache . cassandra . io . compress . CompressedRandomAccessReader ; 
 import org . apache . cassandra . io . compress . CompressedSequentialWriter ; 
 + import org . apache . cassandra . io . compress . CompressedThrottledReader ; 
 import org . apache . cassandra . io . compress . CompressionMetadata ; 
 import org . apache . cassandra . io . sstable . SSTableWriter ; 
 
 @ @ - 70 , 7 + 73 , 18 @ @ public class CompressedPoolingSegmentedFile extends PoolingSegmentedFile impleme 
 return new CompressedPoolingSegmentedFile ( path , metadata ( path , finishType ) ) ; 
 } 
 } 
 - protected RandomAccessReader createReader ( String path ) 
 + 
 + public RandomAccessReader createReader ( ) 
 + { 
 + return CompressedRandomAccessReader . open ( path , metadata , null ) ; 
 + } 
 + 
 + public RandomAccessReader createThrottledReader ( RateLimiter limiter ) 
 + { 
 + return CompressedThrottledReader . open ( path , metadata , limiter ) ; 
 + } 
 + 
 + protected RandomAccessReader createPooledReader ( ) 
 { 
 return CompressedRandomAccessReader . open ( path , metadata , this ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java b / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java 
 index 0c20bb9 . . 6b5c2e1 100644 
 - - - a / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java 
 + + + b / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java 
 @ @ - 17 , 8 + 17 , 11 @ @ 
 * / 
 package org . apache . cassandra . io . util ; 
 
 + import com . google . common . util . concurrent . RateLimiter ; 
 + 
 import org . apache . cassandra . io . compress . CompressedRandomAccessReader ; 
 import org . apache . cassandra . io . compress . CompressedSequentialWriter ; 
 + import org . apache . cassandra . io . compress . CompressedThrottledReader ; 
 import org . apache . cassandra . io . compress . CompressionMetadata ; 
 import org . apache . cassandra . io . sstable . SSTableWriter ; 
 
 @ @ - 84 , 11 + 87 , 14 @ @ public class CompressedSegmentedFile extends SegmentedFile implements ICompresse 
 } 
 } 
 
 - public FileDataInput getSegment ( long position ) 
 + public RandomAccessReader createReader ( ) 
 + { 
 + return CompressedRandomAccessReader . open ( path , metadata ) ; 
 + } 
 + 
 + public RandomAccessReader createThrottledReader ( RateLimiter limiter ) 
 { 
 - RandomAccessReader reader = CompressedRandomAccessReader . open ( path , metadata , null ) ; 
 - reader . seek ( position ) ; 
 - return reader ; 
 + return CompressedThrottledReader . open ( path , metadata , limiter ) ; 
 } 
 
 public CompressionMetadata getMetadata ( ) 
 diff - - git a / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java b / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java 
 index fb5b62e . . d056240 100644 
 - - - a / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java 
 + + + b / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java 
 @ @ - 31 , 15 + 31 , 6 @ @ public class MappedFileDataInput extends AbstractDataInput implements FileDataIn 
 private final long segmentOffset ; 
 private int position ; 
 
 - public MappedFileDataInput ( FileInputStream stream , String filename , long segmentOffset , int position ) throws IOException 
 - { 
 - FileChannel channel = stream . getChannel ( ) ; 
 - buffer = channel . map ( FileChannel . MapMode . READ _ ONLY , position , channel . size ( ) ) ; 
 - this . filename = filename ; 
 - this . segmentOffset = segmentOffset ; 
 - this . position = position ; 
 - } 
 - 
 public MappedFileDataInput ( MappedByteBuffer buffer , String filename , long segmentOffset , int position ) 
 { 
 assert buffer ! = null ; 
 diff - - git a / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java b / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java 
 index 8b4ae9d . . 8067c68 100644 
 - - - a / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java 
 + + + b / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java 
 @ @ - 89 , 7 + 89 , 8 @ @ public class MmappedSegmentedFile extends SegmentedFile 
 return new MappedFileDataInput ( segment . right , path , segment . left , ( int ) ( position - segment . left ) ) ; 
 } 
 
 - / / not mmap ' d : open a braf covering the segment 
 + / / we can have single cells or partitions larger than 2Gb , which is our maximum addressable range in a single segment ; 
 + / / in this case we open as a normal random access reader 
 / / FIXME : brafs are unbounded , so this segment will cover the rest of the file , rather than just the row 
 RandomAccessReader file = RandomAccessReader . open ( new File ( path ) ) ; 
 file . seek ( position ) ; 
 @ @ - 152 , 7 + 153 , 7 @ @ public class MmappedSegmentedFile extends SegmentedFile 
 public Builder ( ) 
 { 
 super ( ) ; 
 - boundaries = new ArrayList < Long > ( ) ; 
 + boundaries = new ArrayList < > ( ) ; 
 boundaries . add ( 0L ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / io / util / PoolingSegmentedFile . java b / src / java / org / apache / cassandra / io / util / PoolingSegmentedFile . java 
 index daca22f . . d3c90c7 100644 
 - - - a / src / java / org / apache / cassandra / io / util / PoolingSegmentedFile . java 
 + + + b / src / java / org / apache / cassandra / io / util / PoolingSegmentedFile . java 
 @ @ - 17 , 6 + 17 , 8 @ @ 
 * / 
 package org . apache . cassandra . io . util ; 
 
 + import java . io . File ; 
 + 
 import org . apache . cassandra . service . FileCacheService ; 
 
 public abstract class PoolingSegmentedFile extends SegmentedFile 
 @ @ - 57 , 13 + 59 , 16 @ @ public abstract class PoolingSegmentedFile extends SegmentedFile 
 RandomAccessReader reader = FileCacheService . instance . get ( cacheKey ) ; 
 
 if ( reader = = null ) 
 - reader = createReader ( path ) ; 
 + reader = createPooledReader ( ) ; 
 
 reader . seek ( position ) ; 
 return reader ; 
 } 
 
 - protected abstract RandomAccessReader createReader ( String path ) ; 
 + protected RandomAccessReader createPooledReader ( ) 
 + { 
 + return RandomAccessReader . open ( new File ( path ) , this ) ; 
 + } 
 
 public void recycle ( RandomAccessReader reader ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / io / util / SegmentedFile . java b / src / java / org / apache / cassandra / io / util / SegmentedFile . java 
 index d557b72 . . 510ed81 100644 
 - - - a / src / java / org / apache / cassandra / io / util / SegmentedFile . java 
 + + + b / src / java / org / apache / cassandra / io / util / SegmentedFile . java 
 @ @ - 25 , 6 + 25 , 8 @ @ import java . nio . MappedByteBuffer ; 
 import java . util . Iterator ; 
 import java . util . NoSuchElementException ; 
 
 + import com . google . common . util . concurrent . RateLimiter ; 
 + 
 import org . apache . cassandra . config . Config ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . io . FSReadError ; 
 @ @ - 92 , 6 + 94 , 24 @ @ public abstract class SegmentedFile extends SharedCloseableImpl 
 
 public abstract SegmentedFile sharedCopy ( ) ; 
 
 + public RandomAccessReader createReader ( ) 
 + { 
 + return RandomAccessReader . open ( new File ( path ) ) ; 
 + } 
 + 
 + public RandomAccessReader createThrottledReader ( RateLimiter limiter ) 
 + { 
 + assert limiter ! = null ; 
 + return ThrottledReader . open ( new File ( path ) , limiter ) ; 
 + } 
 + 
 + public FileDataInput getSegment ( long position ) 
 + { 
 + RandomAccessReader reader = createReader ( ) ; 
 + reader . seek ( position ) ; 
 + return reader ; 
 + } 
 + 
 / * * 
 * @ return A SegmentedFile . Builder . 
 * / 
 @ @ - 112 , 8 + 132 , 6 @ @ public abstract class SegmentedFile extends SharedCloseableImpl 
 return new CompressedPoolingSegmentedFile . Builder ( writer ) ; 
 } 
 
 - public abstract FileDataInput getSegment ( long position ) ; 
 - 
 / * * 
 * @ return An Iterator over segments , beginning with the segment containing the given position : each segment must be closed after use . 
 * /

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 8134a9b . . e48f91f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 7 , 7 + 7 , 7 @ @ 
 1 . 0 . 2 
 * " defragment " rows for name - based queries under STCS ( CASSANDRA - 2503 ) 
 * Add timing information to cassandra - cli GET / SET / LIST queries ( CASSANDRA - 3326 ) 
 - * Cache for CompressionMetadata objects ( CASSANDRA - 3427 ) 
 + * Only create one CompressionMetadata object per sstable ( CASSANDRA - 3427 ) 
 * cleanup usage of StorageService . setMode ( ) ( CASANDRA - 3388 ) 
 * synchronize BiMap of bootstrapping tokens ( CASSANDRA - 3417 ) 
 * Avoid large array allocation for compressed chunk offsets ( CASSANDRA - 3432 ) 
 diff - - git a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java 
 index d3589cb . . 3bed2c3 100644 
 - - - a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java 
 + + + b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java 
 @ @ - 34 , 11 + 34 , 6 @ @ public class CompressedRandomAccessReader extends RandomAccessReader 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( CompressedRandomAccessReader . class ) ; 
 
 - public static RandomAccessReader open ( String dataFilePath , boolean skipIOCache ) throws IOException 
 - { 
 - return open ( dataFilePath , CompressionMetadata . get ( dataFilePath ) , skipIOCache ) ; 
 - } 
 - 
 public static RandomAccessReader open ( String dataFilePath , CompressionMetadata metadata ) throws IOException 
 { 
 return open ( dataFilePath , metadata , false ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java 
 index a96eb76 . . 064d247 100644 
 - - - a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java 
 + + + b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java 
 @ @ - 21 , 7 + 21 , 6 @ @ package org . apache . cassandra . io . compress ; 
 import java . io . * ; 
 import java . util . HashMap ; 
 import java . util . Map ; 
 - import java . util . concurrent . ConcurrentHashMap ; 
 
 import org . apache . cassandra . config . ConfigurationException ; 
 import org . apache . cassandra . io . sstable . Component ; 
 @ @ - 41 , 43 + 40 , 23 @ @ public class CompressionMetadata 
 public final CompressionParameters parameters ; 
 
 / * * 
 - * Caches instances of CompressionMetadata . 
 - * Each metada holds the chunk offsets index , which is reasonably big for 
 - * enough data , so it ' s an expensive structure . We thus only want one 
 - * CompressionMetadata created for each sstable . 
 - * Note that we could have a compressionMetadata field in SSTableReader , 
 - * but CompressedSegmentFile . Builder needs it before the reader is 
 - * created , so it ' s easier that way . 
 - * / 
 - private final static Map < String , CompressionMetadata > cache = new ConcurrentHashMap < String , CompressionMetadata > ( ) ; 
 - 
 - / * * 
 - * Get metadata about given compressed file including uncompressed data length , chunk size 
 + * Create metadata about given compressed file including uncompressed data length , chunk size 
 * and list of the chunk offsets of the compressed data . 
 * 
 + * This is an expensive operation ! Don ' t create more than one for each 
 + * sstable . 
 + * 
 * @ param dataFilePath Path to the compressed file 
 * 
 * @ return metadata about given compressed file . 
 * / 
 - public static CompressionMetadata get ( String dataFilePath ) 
 + public static CompressionMetadata create ( String dataFilePath ) 
 { 
 - CompressionMetadata metadata = cache . get ( dataFilePath ) ; 
 - if ( metadata ! = null ) 
 - return metadata ; 
 - 
 - / / We want this to be relatively fast , because it ' s called often ( for each 
 - / / range query ) . On the side , we don ' t care too much if the initial 
 - / / creation is no thread - safe , because we ' ll call this when the 
 - / / SSTableReader is loaded / created , so we ' re pretty sure there won ' t 
 - / / be any contention . Besides , if we really do create two 
 - / / CompressionMetadata , it ' s not the end of the world , so we don ' t 
 - / / bother with synchronization 
 Descriptor desc = Descriptor . fromFilename ( dataFilePath ) ; 
 + 
 try 
 { 
 - metadata = new CompressionMetadata ( desc . filenameFor ( Component . COMPRESSION _ INFO ) , new File ( dataFilePath ) . length ( ) ) ; 
 - cache . put ( dataFilePath , metadata ) ; 
 - return metadata ; 
 + return new CompressionMetadata ( desc . filenameFor ( Component . COMPRESSION _ INFO ) , new File ( dataFilePath ) . length ( ) ) ; 
 } 
 catch ( IOException e ) 
 { 
 @ @ - 85 , 7 + 64 , 7 @ @ public class CompressionMetadata 
 } 
 } 
 
 - / / This is package protected because of the tests . Don ' t use , use get ( ) instead . 
 + / / This is package protected because of the tests . 
 CompressionMetadata ( String indexFilePath , long compressedLength ) throws IOException 
 { 
 this . indexFilePath = indexFilePath ; 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 index 06f67ff . . d4c6842 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 @ @ - 44 , 6 + 44 , 7 @ @ import org . apache . cassandra . db . filter . QueryFilter ; 
 import org . apache . cassandra . dht . AbstractBounds ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . dht . Range ; 
 + import org . apache . cassandra . io . compress . CompressionMetadata ; 
 import org . apache . cassandra . io . util . * ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . * ; 
 @ @ - 312 , 7 + 313 , 7 @ @ public class SSTableReader extends SSTable 
 { 
 boolean cacheLoading = keyCache ! = null & & ! keysToLoadInCache . isEmpty ( ) ; 
 SegmentedFile . Builder ibuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) ) ; 
 - SegmentedFile . Builder dbuilder = ( components . contains ( Component . COMPRESSION _ INFO ) ) 
 + SegmentedFile . Builder dbuilder = compression 
 ? SegmentedFile . getCompressedBuilder ( ) 
 : SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) ) ; 
 
 @ @ - 400 , 6 + 401 , 18 @ @ public class SSTableReader extends SSTable 
 } 
 
 / * * 
 + * Returns the compression metadata for this sstable . 
 + * @ throws IllegalStateException if the sstable is not compressed 
 + * / 
 + public CompressionMetadata getCompressionMetadata ( ) 
 + { 
 + if ( ! compression ) 
 + throw new IllegalStateException ( this + " is not compressed " ) ; 
 + 
 + return ( ( CompressedSegmentedFile ) dfile ) . metadata ; 
 + } 
 + 
 + / * * 
 * For testing purposes only . 
 * / 
 public void forceFilterFailures ( ) 
 @ @ - 899 , 7 + 912 , 7 @ @ public class SSTableReader extends SSTable 
 public RandomAccessReader openDataReader ( boolean skipIOCache ) throws IOException 
 { 
 return compression 
 - ? CompressedRandomAccessReader . open ( getFilename ( ) , skipIOCache ) 
 + ? CompressedRandomAccessReader . open ( getFilename ( ) , getCompressionMetadata ( ) , skipIOCache ) 
 : RandomAccessReader . open ( new File ( getFilename ( ) ) , skipIOCache ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java b / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java 
 index eadf7f2 . . 9d1345a 100644 
 - - - a / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java 
 + + + b / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java 
 @ @ - 26 , 7 + 26 , 7 @ @ import org . apache . cassandra . io . compress . CompressionMetadata ; 
 
 public class CompressedSegmentedFile extends SegmentedFile 
 { 
 - private final CompressionMetadata metadata ; 
 + public final CompressionMetadata metadata ; 
 
 public CompressedSegmentedFile ( String path , CompressionMetadata metadata ) 
 { 
 @ @ - 52 , 7 + 52 , 7 @ @ public class CompressedSegmentedFile extends SegmentedFile 
 * / 
 public SegmentedFile complete ( String path ) 
 { 
 - return new CompressedSegmentedFile ( path , CompressionMetadata . get ( path ) ) ; 
 + return new CompressedSegmentedFile ( path , CompressionMetadata . create ( path ) ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / io / util / SegmentedFile . java b / src / java / org / apache / cassandra / io / util / SegmentedFile . java 
 index 602909f . . 8a9682c 100644 
 - - - a / src / java / org / apache / cassandra / io / util / SegmentedFile . java 
 + + + b / src / java / org / apache / cassandra / io / util / SegmentedFile . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . util . Iterator ; 
 import java . util . NoSuchElementException ; 
 
 import org . apache . cassandra . config . Config ; 
 + import org . apache . cassandra . io . compress . CompressionMetadata ; 
 import org . apache . cassandra . utils . Pair ; 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / streaming / FileStreamTask . java b / src / java / org / apache / cassandra / streaming / FileStreamTask . java 
 index 7c97b29 . . 9411b16 100644 
 - - - a / src / java / org / apache / cassandra / streaming / FileStreamTask . java 
 + + + b / src / java / org / apache / cassandra / streaming / FileStreamTask . java 
 @ @ - 121 , 7 + 121 , 7 @ @ public class FileStreamTask extends WrappedRunnable 
 
 / / TODO just use a raw RandomAccessFile since we ' re managing our own buffer here 
 RandomAccessReader file = ( header . file . sstable . compression ) / / try to skip kernel page cache if possible 
 - ? CompressedRandomAccessReader . open ( header . file . getFilename ( ) , true ) 
 + ? CompressedRandomAccessReader . open ( header . file . getFilename ( ) , header . file . sstable . getCompressionMetadata ( ) , true ) 
 : RandomAccessReader . open ( new File ( header . file . getFilename ( ) ) , true ) ; 
 
 / / setting up data compression stream
