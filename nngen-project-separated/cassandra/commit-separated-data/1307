BLEU SCORE: 9.387032925101576E-4

TEST MSG: Rename DataOutputBuffer . getFilePointer ( ) to position ( )
GENERATED MSG: instead of providing a RandomAccessFile - like interface in FileDataInput implementing seek and trying to keep people from shooting themselves in the foot by forgetting that it may only represent a 2GB segment of a larger file , provide an InputStream - like interface emphasizing mark / reset

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnIndex . java b / src / java / org / apache / cassandra / db / ColumnIndex . java <nl> index 6b2ef59 . . add5fa7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnIndex . java <nl> @ @ - 91 , 7 + 91 , 7 @ @ public class ColumnIndex <nl> this . writer = writer ; <nl> this . header = header ; <nl> this . version = version ; <nl> - this . initialPosition = writer . getFilePointer ( ) ; <nl> + this . initialPosition = writer . position ( ) ; <nl> } <nl> <nl> private void writePartitionHeader ( UnfilteredRowIterator iterator ) throws IOException <nl> @ @ - 105 , 7 + 105 , 7 @ @ public class ColumnIndex <nl> public ColumnIndex build ( ) throws IOException <nl> { <nl> writePartitionHeader ( iterator ) ; <nl> - this . headerLength = writer . getFilePointer ( ) - initialPosition ; <nl> + this . headerLength = writer . position ( ) - initialPosition ; <nl> <nl> while ( iterator . hasNext ( ) ) <nl> add ( iterator . next ( ) ) ; <nl> @ @ - 115 , 7 + 115 , 7 @ @ public class ColumnIndex <nl> <nl> private long currentPosition ( ) <nl> { <nl> - return writer . getFilePointer ( ) - initialPosition ; <nl> + return writer . position ( ) - initialPosition ; <nl> } <nl> <nl> private void addIndexBlock ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / RowIndexEntry . java b / src / java / org / apache / cassandra / db / RowIndexEntry . java <nl> index 6cd6542 . . 43dc80c 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RowIndexEntry . java <nl> + + + b / src / java / org / apache / cassandra / db / RowIndexEntry . java <nl> @ @ - 142 , 15 + 142 , 15 @ @ public class RowIndexEntry < T > implements IMeasurableMemory <nl> <nl> int [ ] offsets = new int [ rie . columnsIndex ( ) . size ( ) ] ; <nl> <nl> - if ( out . hasFilePointer ( ) ) <nl> + if ( out . hasPosition ( ) ) <nl> { <nl> / / Out is usually a SequentialWriter , so using the file - pointer is fine to generate the offsets . <nl> / / A DataOutputBuffer also works . <nl> - long start = out . getFilePointer ( ) ; <nl> + long start = out . position ( ) ; <nl> int i = 0 ; <nl> for ( IndexHelper . IndexInfo info : rie . columnsIndex ( ) ) <nl> { <nl> - offsets [ i ] = i = = 0 ? 0 : ( int ) ( out . getFilePointer ( ) - start ) ; <nl> + offsets [ i ] = i = = 0 ? 0 : ( int ) ( out . position ( ) - start ) ; <nl> i + + ; <nl> idxSerializer . serialize ( info , out ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java <nl> index 089ae6f . . 3d68a74 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java <nl> @ @ - 107 , 7 + 107 , 7 @ @ public class BigTableWriter extends SSTableWriter <nl> assert decoratedKey ! = null : " Keys must not be null " ; / / empty keys ARE allowed b / c of indexed column values <nl> / / if ( lastWrittenKey ! = null & & lastWrittenKey . compareTo ( decoratedKey ) > = 0 ) <nl> / / throw new RuntimeException ( " Last written key " + lastWrittenKey + " > = current key " + decoratedKey + " writing into " + getFilename ( ) ) ; <nl> - return ( lastWrittenKey = = null ) ? 0 : dataFile . getFilePointer ( ) ; <nl> + return ( lastWrittenKey = = null ) ? 0 : dataFile . position ( ) ; <nl> } <nl> <nl> private void afterAppend ( DecoratedKey decoratedKey , long dataEnd , RowIndexEntry index ) throws IOException <nl> @ @ - 153 , 7 + 153 , 7 @ @ public class BigTableWriter extends SSTableWriter <nl> <nl> RowIndexEntry entry = RowIndexEntry . create ( startPosition , iterator . partitionLevelDeletion ( ) , index ) ; <nl> <nl> - long endPosition = dataFile . getFilePointer ( ) ; <nl> + long endPosition = dataFile . position ( ) ; <nl> long rowSize = endPosition - startPosition ; <nl> maybeLogLargePartitionWarning ( key , rowSize ) ; <nl> metadataCollector . addPartitionSizeInBytes ( rowSize ) ; <nl> @ @ - 352 , 7 + 352 , 7 @ @ public class BigTableWriter extends SSTableWriter <nl> <nl> public long getFilePointer ( ) <nl> { <nl> - return dataFile . getFilePointer ( ) ; <nl> + return dataFile . position ( ) ; <nl> } <nl> <nl> public long getOnDiskFilePointer ( ) <nl> @ @ - 403 , 7 + 403 , 7 @ @ public class BigTableWriter extends SSTableWriter <nl> public void append ( DecoratedKey key , RowIndexEntry indexEntry , long dataEnd ) throws IOException <nl> { <nl> bf . add ( key ) ; <nl> - long indexStart = indexFile . getFilePointer ( ) ; <nl> + long indexStart = indexFile . position ( ) ; <nl> try <nl> { <nl> ByteBufferUtil . writeWithShortLength ( key . getKey ( ) , indexFile ) ; <nl> @ @ - 413 , 7 + 413 , 7 @ @ public class BigTableWriter extends SSTableWriter <nl> { <nl> throw new FSWriteError ( e , indexFile . getPath ( ) ) ; <nl> } <nl> - long indexEnd = indexFile . getFilePointer ( ) ; <nl> + long indexEnd = indexFile . position ( ) ; <nl> <nl> if ( logger . isTraceEnabled ( ) ) <nl> logger . trace ( " wrote index entry : { } at { } " , indexEntry , indexStart ) ; <nl> @ @ - 462 , 7 + 462 , 7 @ @ public class BigTableWriter extends SSTableWriter <nl> flushBf ( ) ; <nl> <nl> / / truncate index file <nl> - long position = iwriter . indexFile . getFilePointer ( ) ; <nl> + long position = iwriter . indexFile . position ( ) ; <nl> iwriter . indexFile . setDescriptor ( descriptor ) . prepareToCommit ( ) ; <nl> FileUtils . truncate ( iwriter . indexFile . getPath ( ) , position ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java b / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java <nl> index c4d6f54 . . 4ba5546 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java <nl> + + + b / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java <nl> @ @ - 114 , 12 + 114 , 12 @ @ public class DataOutputBuffer extends BufferedDataOutputStreamPlus <nl> return buffer . position ( ) ; <nl> } <nl> <nl> - public boolean hasFilePointer ( ) <nl> + public boolean hasPosition ( ) <nl> { <nl> return true ; <nl> } <nl> <nl> - public long getFilePointer ( ) <nl> + public long position ( ) <nl> { <nl> return getLength ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / util / DataOutputPlus . java b / src / java / org / apache / cassandra / io / util / DataOutputPlus . java <nl> index 551d386 . . 60a5727 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / DataOutputPlus . java <nl> + + + b / src / java / org / apache / cassandra / io / util / DataOutputPlus . java <nl> @ @ - 22 , 10 + 22 , 10 @ @ import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> import java . nio . channels . WritableByteChannel ; <nl> <nl> - import org . apache . cassandra . utils . vint . VIntCoding ; <nl> - <nl> import com . google . common . base . Function ; <nl> <nl> + import org . apache . cassandra . utils . vint . VIntCoding ; <nl> + <nl> / * * <nl> * Extension to DataOutput that provides for writing ByteBuffer and Memory , potentially with an efficient <nl> * implementation that is zero copy or at least has reduced bounds checking overhead . <nl> @ @ - 60 , 12 + 60 , 25 @ @ public interface DataOutputPlus extends DataOutput <nl> VIntCoding . writeUnsignedVInt ( i , this ) ; <nl> } <nl> <nl> - default long getFilePointer ( ) <nl> + / * * <nl> + * Returns the current position of the underlying target like a file - pointer <nl> + * or the position withing a buffer . Not every implementation may support this <nl> + * functionality . Whether or not this functionality is supported can be checked <nl> + * via the { @ link # hasPosition ( ) } . <nl> + * <nl> + * @ throws UnsupportedOperationException if the implementation does not support <nl> + * position <nl> + * / <nl> + default long position ( ) <nl> { <nl> throw new UnsupportedOperationException ( ) ; <nl> } <nl> <nl> - default boolean hasFilePointer ( ) <nl> + / * * <nl> + * If the implementation supports providing a position , this method returns <nl> + * { @ code true } , otherwise { @ code false } . <nl> + * / <nl> + default boolean hasPosition ( ) <nl> { <nl> return false ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / util / SequentialWriter . java b / src / java / org / apache / cassandra / io / util / SequentialWriter . java <nl> index 1814aca . . 6000f95 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / SequentialWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / util / SequentialWriter . java <nl> @ @ - 253 , 12 + 253 , 12 @ @ public class SequentialWriter extends BufferedDataOutputStreamPlus implements Tr <nl> runPostFlush . run ( ) ; <nl> } <nl> <nl> - public boolean hasFilePointer ( ) <nl> + public boolean hasPosition ( ) <nl> { <nl> return true ; <nl> } <nl> <nl> - public long getFilePointer ( ) <nl> + public long position ( ) <nl> { <nl> return current ( ) ; <nl> } <nl> @ @ - 274 , 7 + 274 , 7 @ @ public class SequentialWriter extends BufferedDataOutputStreamPlus implements Tr <nl> * / <nl> public long getOnDiskFilePointer ( ) <nl> { <nl> - return getFilePointer ( ) ; <nl> + return position ( ) ; <nl> } <nl> <nl> public long length ( ) <nl> diff - - git a / test / unit / org / apache / cassandra / db / RowIndexEntryTest . java b / test / unit / org / apache / cassandra / db / RowIndexEntryTest . java <nl> index d004d45 . . 25baa4e 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RowIndexEntryTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RowIndexEntryTest . java <nl> @ @ - 155 , 12 + 155 , 12 @ @ public class RowIndexEntryTest extends CQLTester <nl> / / test with an output stream that doesn ' t support a file - pointer <nl> buffer = new DataOutputBuffer ( ) <nl> { <nl> - public boolean hasFilePointer ( ) <nl> + public boolean hasPosition ( ) <nl> { <nl> return false ; <nl> } <nl> <nl> - public long getFilePointer ( ) <nl> + public long position ( ) <nl> { <nl> throw new UnsupportedOperationException ( ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java <nl> index 364ea71 . . c3a4539 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java <nl> @ @ - 46 , 7 + 46 , 7 @ @ public class BufferedRandomAccessFileTest <nl> byte [ ] data = " Hello " . getBytes ( ) ; <nl> w . write ( data ) ; <nl> assertEquals ( data . length , w . length ( ) ) ; <nl> - assertEquals ( data . length , w . getFilePointer ( ) ) ; <nl> + assertEquals ( data . length , w . position ( ) ) ; <nl> <nl> w . sync ( ) ; <nl> <nl> @ @ - 67 , 9 + 67 , 9 @ @ public class BufferedRandomAccessFileTest <nl> for ( int i = 0 ; i < bigData . length ; i + + ) <nl> bigData [ i ] = ' d ' ; <nl> <nl> - long initialPosition = w . getFilePointer ( ) ; <nl> + long initialPosition = w . position ( ) ; <nl> w . write ( bigData ) ; / / writing data <nl> - assertEquals ( w . getFilePointer ( ) , initialPosition + bigData . length ) ; <nl> + assertEquals ( w . position ( ) , initialPosition + bigData . length ) ; <nl> assertEquals ( w . length ( ) , initialPosition + bigData . length ) ; / / file size should equals to last position <nl> <nl> w . sync ( ) ; <nl> @ @ - 285 , 10 + 285 , 10 @ @ public class BufferedRandomAccessFileTest <nl> { <nl> final SequentialWriter w = createTempFile ( " brafGetFilePointer " ) ; <nl> <nl> - assertEquals ( w . getFilePointer ( ) , 0 ) ; / / initial position should be 0 <nl> + assertEquals ( w . position ( ) , 0 ) ; / / initial position should be 0 <nl> <nl> w . write ( generateByteArray ( 20 ) ) ; <nl> - assertEquals ( w . getFilePointer ( ) , 20 ) ; / / position 20 after writing 20 bytes <nl> + assertEquals ( w . position ( ) , 20 ) ; / / position 20 after writing 20 bytes <nl> <nl> w . sync ( ) ; <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / streaming / compression / CompressedInputStreamTest . java b / test / unit / org / apache / cassandra / streaming / compression / CompressedInputStreamTest . java <nl> index fea6d2b . . 30670fb 100644 <nl> - - - a / test / unit / org / apache / cassandra / streaming / compression / CompressedInputStreamTest . java <nl> + + + b / test / unit / org / apache / cassandra / streaming / compression / CompressedInputStreamTest . java <nl> @ @ - 70 , 7 + 70 , 7 @ @ public class CompressedInputStreamTest <nl> Map < Long , Long > index = new HashMap < Long , Long > ( ) ; <nl> for ( long l = 0L ; l < 1000 ; l + + ) <nl> { <nl> - index . put ( l , writer . getFilePointer ( ) ) ; <nl> + index . put ( l , writer . position ( ) ) ; <nl> writer . writeLong ( l ) ; <nl> } <nl> writer . finish ( ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / CommitLog . java b / src / java / org / apache / cassandra / db / CommitLog . java <nl> index 1428421 . . 8c4ae29 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CommitLog . java <nl> + + + b / src / java / org / apache / cassandra / db / CommitLog . java <nl> @ @ - 297 , 7 + 297 , 7 @ @ public class CommitLog <nl> logger _ . debug ( " Replaying " + file + " starting at " + lowPos ) ; <nl> <nl> / * read the logs populate RowMutation and apply * / <nl> - while ( reader . getFilePointer ( ) < reader . length ( ) ) <nl> + while ( ! reader . isEOF ( ) ) <nl> { <nl> if ( logger _ . isDebugEnabled ( ) ) <nl> logger _ . debug ( " Reading mutation at " + reader . getFilePointer ( ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / SSTableNamesIterator . java b / src / java / org / apache / cassandra / db / filter / SSTableNamesIterator . java <nl> index 436b899 . . baedce3 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / SSTableNamesIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / SSTableNamesIterator . java <nl> @ @ - 90 , 14 + 90 , 13 @ @ public class SSTableNamesIterator extends SimpleAbstractColumnIterator <nl> ranges . add ( indexInfo ) ; <nl> } <nl> <nl> - / * seek to the correct offset to the data * / <nl> - long columnBegin = file . getFilePointer ( ) ; <nl> - / * now read all the columns from the ranges * / <nl> + file . mark ( ) ; <nl> for ( IndexHelper . IndexInfo indexInfo : ranges ) <nl> { <nl> - file . seek ( columnBegin + indexInfo . offset ) ; <nl> + file . reset ( ) ; <nl> + assert file . skipBytes ( ( int ) indexInfo . offset ) = = indexInfo . offset ; <nl> / / TODO only completely deserialize columns we are interested in <nl> - while ( file . getFilePointer ( ) < columnBegin + indexInfo . offset + indexInfo . width ) <nl> + while ( file . bytesPastMark ( ) < indexInfo . offset + indexInfo . width ) <nl> { <nl> final IColumn column = cf . getColumnSerializer ( ) . deserialize ( file ) ; <nl> / / we check vs the original Set , not the filtered List , for efficiency <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / SSTableSliceIterator . java b / src / java / org / apache / cassandra / db / filter / SSTableSliceIterator . java <nl> index 71ba263 . . 7c1bf9d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / SSTableSliceIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / SSTableSliceIterator . java <nl> @ @ - 113 , 7 + 113 , 6 @ @ class SSTableSliceIterator extends AbstractIterator < IColumn > implements ColumnIt <nl> private final ColumnFamily emptyColumnFamily ; <nl> <nl> private final List < IndexHelper . IndexInfo > indexes ; <nl> - private final long columnStartPosition ; <nl> private final FileDataInput file ; <nl> <nl> private int curRangeIndex ; <nl> @ @ - 133 , 7 + 132 , 7 @ @ class SSTableSliceIterator extends AbstractIterator < IColumn > implements ColumnIt <nl> emptyColumnFamily = ColumnFamily . serializer ( ) . deserializeFromSSTableNoColumns ( ssTable . makeColumnFamily ( ) , file ) ; <nl> file . readInt ( ) ; / / column count <nl> <nl> - columnStartPosition = file . getFilePointer ( ) ; <nl> + file . mark ( ) ; <nl> curRangeIndex = IndexHelper . indexFor ( startColumn , indexes , comparator , reversed ) ; <nl> if ( reversed & & curRangeIndex = = indexes . size ( ) ) <nl> curRangeIndex - - ; <nl> @ @ - 186 , 8 + 185 , 9 @ @ class SSTableSliceIterator extends AbstractIterator < IColumn > implements ColumnIt <nl> <nl> boolean outOfBounds = false ; <nl> <nl> - file . seek ( columnStartPosition + curColPosition . offset ) ; <nl> - while ( file . getFilePointer ( ) < columnStartPosition + curColPosition . offset + curColPosition . width & & ! outOfBounds ) <nl> + file . reset ( ) ; <nl> + assert file . skipBytes ( ( int ) curColPosition . offset ) = = curColPosition . offset ; <nl> + while ( file . bytesPastMark ( ) < curColPosition . offset + curColPosition . width & & ! outOfBounds ) <nl> { <nl> IColumn column = emptyColumnFamily . getColumnSerializer ( ) . deserialize ( file ) ; <nl> if ( reversed ) <nl> diff - - git a / src / java / org / apache / cassandra / io / IndexHelper . java b / src / java / org / apache / cassandra / io / IndexHelper . java <nl> index f3eaa3e . . fc62860 100644 <nl> - - - a / src / java / org / apache / cassandra / io / IndexHelper . java <nl> + + + b / src / java / org / apache / cassandra / io / IndexHelper . java <nl> @ @ - 72 , 12 + 72 , 12 @ @ public class IndexHelper <nl> ArrayList < IndexInfo > indexList = new ArrayList < IndexInfo > ( ) ; <nl> <nl> 	 	 int columnIndexSize = in . readInt ( ) ; <nl> - long start = in . getFilePointer ( ) ; <nl> - while ( in . getFilePointer ( ) < start + columnIndexSize ) <nl> + in . mark ( ) ; <nl> + while ( in . bytesPastMark ( ) < columnIndexSize ) <nl> { <nl> indexList . add ( IndexInfo . deserialize ( in ) ) ; <nl> } <nl> - assert in . getFilePointer ( ) = = start + columnIndexSize ; <nl> + assert in . bytesPastMark ( ) = = columnIndexSize ; <nl> <nl> return indexList ; <nl> 	 } <nl> diff - - git a / src / java / org / apache / cassandra / io / IteratingRow . java b / src / java / org / apache / cassandra / io / IteratingRow . java <nl> index 20c9f89 . . 04bc199 100644 <nl> - - - a / src / java / org / apache / cassandra / io / IteratingRow . java <nl> + + + b / src / java / org / apache / cassandra / io / IteratingRow . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import org . apache . cassandra . db . ColumnFamily ; <nl> import org . apache . cassandra . db . DecoratedKey ; <nl> import org . apache . cassandra . db . IColumn ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> + import org . apache . cassandra . io . util . BufferedRandomAccessFile ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . io . util . FileDataInput ; <nl> import com . google . common . collect . AbstractIterator ; <nl> @ @ - 35 , 18 + 36 , 16 @ @ public class IteratingRow extends AbstractIterator < IColumn > implements Comparabl <nl> { <nl> private final DecoratedKey key ; <nl> private final long finishedAt ; <nl> - private final FileDataInput file ; <nl> + private final BufferedRandomAccessFile file ; <nl> private SSTableReader sstable ; <nl> private long dataStart ; <nl> - private final IPartitioner partitioner ; <nl> <nl> - public IteratingRow ( FileDataInput file , SSTableReader sstable ) throws IOException <nl> + public IteratingRow ( BufferedRandomAccessFile file , SSTableReader sstable ) throws IOException <nl> { <nl> this . file = file ; <nl> this . sstable = sstable ; <nl> - this . partitioner = StorageService . getPartitioner ( ) ; <nl> <nl> - key = partitioner . convertFromDiskFormat ( file . readUTF ( ) ) ; <nl> + key = StorageService . getPartitioner ( ) . convertFromDiskFormat ( file . readUTF ( ) ) ; <nl> int dataSize = file . readInt ( ) ; <nl> dataStart = file . getFilePointer ( ) ; <nl> finishedAt = dataStart + dataSize ; <nl> diff - - git a / src / java / org / apache / cassandra / io / SSTableReader . java b / src / java / org / apache / cassandra / io / SSTableReader . java <nl> index 7d21df0 . . 9ea55e7 100644 <nl> - - - a / src / java / org / apache / cassandra / io / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / SSTableReader . java <nl> @ @ - 395 , 8 + 395 , 8 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> FileDataInput input ; <nl> if ( indexBuffers = = null ) <nl> { <nl> - input = new BufferedRandomAccessFile ( indexFilename ( ) , " r " ) ; <nl> - input . seek ( p ) ; <nl> + input = new BufferedRandomAccessFile ( path , " r " ) ; <nl> + ( ( BufferedRandomAccessFile ) input ) . seek ( p ) ; <nl> } <nl> else <nl> { <nl> @ @ - 421 , 7 + 421 , 7 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> if ( v = = 0 ) <nl> { <nl> PositionSize info ; <nl> - if ( input . getFilePointer ( ) < input . length ( ) ) <nl> + if ( ! input . isEOF ( ) ) <nl> { <nl> int utflen = input . readUnsignedShort ( ) ; <nl> if ( utflen ! = input . skipBytes ( utflen ) ) <nl> diff - - git a / src / java / org / apache / cassandra / io / SSTableScanner . java b / src / java / org / apache / cassandra / io / SSTableScanner . java <nl> index 4f958fe . . 7442e36 100644 <nl> - - - a / src / java / org / apache / cassandra / io / SSTableScanner . java <nl> + + + b / src / java / org / apache / cassandra / io / SSTableScanner . java <nl> @ @ - 35 , 10 + 35 , 10 @ @ public class SSTableScanner implements Iterator < IteratingRow > , Closeable <nl> { <nl> private static Logger logger = Logger . getLogger ( SSTableScanner . class ) ; <nl> <nl> + private final BufferedRandomAccessFile file ; <nl> + private final SSTableReader sstable ; <nl> private IteratingRow row ; <nl> private boolean exhausted = false ; <nl> - private FileDataInput file ; <nl> - private SSTableReader sstable ; <nl> private Iterator < IteratingRow > iterator ; <nl> <nl> / * * <nl> @ @ - 116 , 7 + 116 , 9 @ @ public class SSTableScanner implements Iterator < IteratingRow > , Closeable <nl> { <nl> try <nl> { <nl> - return ( row = = null & & file . getFilePointer ( ) < file . length ( ) ) | | row . getEndPosition ( ) < file . length ( ) ; <nl> + if ( row = = null ) <nl> + return ! file . isEOF ( ) ; <nl> + return row . getEndPosition ( ) < file . length ( ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> @ @ - 130 , 7 + 132 , 7 @ @ public class SSTableScanner implements Iterator < IteratingRow > , Closeable <nl> { <nl> if ( row ! = null ) <nl> row . skipRemaining ( ) ; <nl> - assert file . getFilePointer ( ) < file . length ( ) ; <nl> + assert ! file . isEOF ( ) ; <nl> return row = new IteratingRow ( file , sstable ) ; <nl> } <nl> catch ( IOException e ) <nl> diff - - git a / src / java / org / apache / cassandra / io / util / BufferedRandomAccessFile . java b / src / java / org / apache / cassandra / io / util / BufferedRandomAccessFile . java <nl> index 50bfe23 . . 2192a2a 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / BufferedRandomAccessFile . java <nl> + + + b / src / java / org / apache / cassandra / io / util / BufferedRandomAccessFile . java <nl> @ @ - 56 , 6 + 56 , 7 @ @ public final class BufferedRandomAccessFile extends RandomAccessFile implements <nl> private long maxHi _ ; / / this . lo + this . buff . length <nl> private boolean hitEOF _ ; / / buffer contains last file block ? <nl> private long diskPos _ ; / / disk position <nl> + private long markedPointer ; <nl> <nl> / * <nl> * To describe the above fields , we introduce the following abstractions for <nl> @ @ - 391 , 4 + 392 , 28 @ @ public final class BufferedRandomAccessFile extends RandomAccessFile implements <nl> this . curr _ + = len ; <nl> return len ; <nl> } <nl> + <nl> + public boolean isEOF ( ) throws IOException <nl> + { <nl> + return getFilePointer ( ) = = length ( ) ; <nl> + } <nl> + <nl> + public void mark ( ) <nl> + { <nl> + markedPointer = getFilePointer ( ) ; <nl> + } <nl> + <nl> + public void reset ( ) throws IOException <nl> + { <nl> + seek ( markedPointer ) ; <nl> + } <nl> + <nl> + public int bytesPastMark ( ) <nl> + { <nl> + long bytes = getFilePointer ( ) - markedPointer ; <nl> + assert bytes > = 0 ; <nl> + if ( bytes > Integer . MAX _ VALUE ) <nl> + throw new UnsupportedOperationException ( " Overflow : " + bytes ) ; <nl> + return ( int ) bytes ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / util / FileDataInput . java b / src / java / org / apache / cassandra / io / util / FileDataInput . java <nl> index e842e06 . . 1c0f8bf 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / FileDataInput . java <nl> + + + b / src / java / org / apache / cassandra / io / util / FileDataInput . java <nl> @ @ - 6 , 11 + 6 , 13 @ @ import java . io . Closeable ; <nl> <nl> public interface FileDataInput extends DataInput , Closeable <nl> { <nl> - public void seek ( long pos ) throws IOException ; <nl> + public String getPath ( ) ; <nl> <nl> - public long length ( ) throws IOException ; <nl> + public boolean isEOF ( ) throws IOException ; <nl> <nl> - public long getFilePointer ( ) ; <nl> + public void mark ( ) ; <nl> <nl> - public String getPath ( ) ; <nl> + public void reset ( ) throws IOException ; <nl> + <nl> + public int bytesPastMark ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java b / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java <nl> index e4f0d2d . . 70b55e3 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java <nl> + + + b / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java <nl> @ @ - 8 , 7 + 8 , 7 @ @ public class MappedFileDataInput extends InputStream implements FileDataInput <nl> private final MappedByteBuffer buffer ; <nl> private final String filename ; <nl> private int position ; <nl> - private long fileLength ; <nl> + private int markedPosition ; <nl> <nl> public MappedFileDataInput ( MappedByteBuffer buffer , String filename ) <nl> { <nl> @ @ - 21 , 25 + 21 , 46 @ @ public class MappedFileDataInput extends InputStream implements FileDataInput <nl> this . buffer = buffer ; <nl> this . filename = filename ; <nl> this . position = position ; <nl> - assert ( fileLength = new File ( filename ) . length ( ) ) > = 0 ; / / hack to only initialize fL when assertions are enabled <nl> } <nl> <nl> - public void seek ( long pos ) throws IOException <nl> + / / don ' t make this public , this is only for seeking WITHIN the current mapped segment <nl> + private void seekInternal ( int pos ) throws IOException <nl> { <nl> - assert pos < = Integer . MAX _ VALUE ; <nl> - assert buffer . capacity ( ) = = fileLength ; / / calling this does not make sense on a mapped chunk of a larger file <nl> - position = ( int ) pos ; <nl> + position = pos ; <nl> } <nl> <nl> - public long length ( ) throws IOException <nl> + @ Override <nl> + public boolean markSupported ( ) <nl> { <nl> - assert buffer . capacity ( ) = = fileLength ; / / calling this does not make sense on a mapped chunk of a larger file <nl> - return buffer . capacity ( ) ; <nl> + return true ; <nl> } <nl> <nl> - public long getFilePointer ( ) <nl> + @ Override <nl> + public void mark ( int ignored ) <nl> { <nl> - return position ; <nl> + markedPosition = position ; <nl> + } <nl> + <nl> + @ Override <nl> + public void reset ( ) throws IOException <nl> + { <nl> + seekInternal ( markedPosition ) ; <nl> + } <nl> + <nl> + public void mark ( ) <nl> + { <nl> + mark ( - 1 ) ; <nl> + } <nl> + <nl> + public int bytesPastMark ( ) <nl> + { <nl> + assert position > = markedPosition ; <nl> + return position - markedPosition ; <nl> + } <nl> + <nl> + public boolean isEOF ( ) throws IOException <nl> + { <nl> + return position = = buffer . capacity ( ) ; <nl> } <nl> <nl> public String getPath ( ) <nl> @ @ - 49 , 7 + 70 , 7 @ @ public class MappedFileDataInput extends InputStream implements FileDataInput <nl> <nl> public int read ( ) throws IOException <nl> { <nl> - if ( position = = length ( ) ) <nl> + if ( isEOF ( ) ) <nl> return - 1 ; <nl> return buffer . get ( position + + ) & 0xFF ; <nl> } <nl> @ @ - 252 , 7 + 273 , 7 @ @ public class MappedFileDataInput extends InputStream implements FileDataInput <nl> public final String readLine ( ) throws IOException { <nl> StringBuilder line = new StringBuilder ( 80 ) ; / / Typical line length <nl> boolean foundTerminator = false ; <nl> - long unreadPosition = 0 ; <nl> + int unreadPosition = 0 ; <nl> while ( true ) { <nl> int nextByte = read ( ) ; <nl> switch ( nextByte ) { <nl> @ @ - 260 , 18 + 281 , 18 @ @ public class MappedFileDataInput extends InputStream implements FileDataInput <nl> return line . length ( ) ! = 0 ? line . toString ( ) : null ; <nl> case ( byte ) ' \ r ' : <nl> if ( foundTerminator ) { <nl> - seek ( unreadPosition ) ; <nl> + seekInternal ( unreadPosition ) ; <nl> return line . toString ( ) ; <nl> } <nl> foundTerminator = true ; <nl> / * Have to be able to peek ahead one byte * / <nl> - unreadPosition = getFilePointer ( ) ; <nl> + unreadPosition = position ; <nl> break ; <nl> case ( byte ) ' \ n ' : <nl> return line . toString ( ) ; <nl> default : <nl> if ( foundTerminator ) { <nl> - seek ( unreadPosition ) ; <nl> + seekInternal ( unreadPosition ) ; <nl> return line . toString ( ) ; <nl> } <nl> line . append ( ( char ) nextByte ) ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnIndex . java b / src / java / org / apache / cassandra / db / ColumnIndex . java 
 index 6b2ef59 . . add5fa7 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnIndex . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnIndex . java 
 @ @ - 91 , 7 + 91 , 7 @ @ public class ColumnIndex 
 this . writer = writer ; 
 this . header = header ; 
 this . version = version ; 
 - this . initialPosition = writer . getFilePointer ( ) ; 
 + this . initialPosition = writer . position ( ) ; 
 } 
 
 private void writePartitionHeader ( UnfilteredRowIterator iterator ) throws IOException 
 @ @ - 105 , 7 + 105 , 7 @ @ public class ColumnIndex 
 public ColumnIndex build ( ) throws IOException 
 { 
 writePartitionHeader ( iterator ) ; 
 - this . headerLength = writer . getFilePointer ( ) - initialPosition ; 
 + this . headerLength = writer . position ( ) - initialPosition ; 
 
 while ( iterator . hasNext ( ) ) 
 add ( iterator . next ( ) ) ; 
 @ @ - 115 , 7 + 115 , 7 @ @ public class ColumnIndex 
 
 private long currentPosition ( ) 
 { 
 - return writer . getFilePointer ( ) - initialPosition ; 
 + return writer . position ( ) - initialPosition ; 
 } 
 
 private void addIndexBlock ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / RowIndexEntry . java b / src / java / org / apache / cassandra / db / RowIndexEntry . java 
 index 6cd6542 . . 43dc80c 100644 
 - - - a / src / java / org / apache / cassandra / db / RowIndexEntry . java 
 + + + b / src / java / org / apache / cassandra / db / RowIndexEntry . java 
 @ @ - 142 , 15 + 142 , 15 @ @ public class RowIndexEntry < T > implements IMeasurableMemory 
 
 int [ ] offsets = new int [ rie . columnsIndex ( ) . size ( ) ] ; 
 
 - if ( out . hasFilePointer ( ) ) 
 + if ( out . hasPosition ( ) ) 
 { 
 / / Out is usually a SequentialWriter , so using the file - pointer is fine to generate the offsets . 
 / / A DataOutputBuffer also works . 
 - long start = out . getFilePointer ( ) ; 
 + long start = out . position ( ) ; 
 int i = 0 ; 
 for ( IndexHelper . IndexInfo info : rie . columnsIndex ( ) ) 
 { 
 - offsets [ i ] = i = = 0 ? 0 : ( int ) ( out . getFilePointer ( ) - start ) ; 
 + offsets [ i ] = i = = 0 ? 0 : ( int ) ( out . position ( ) - start ) ; 
 i + + ; 
 idxSerializer . serialize ( info , out ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java 
 index 089ae6f . . 3d68a74 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java 
 @ @ - 107 , 7 + 107 , 7 @ @ public class BigTableWriter extends SSTableWriter 
 assert decoratedKey ! = null : " Keys must not be null " ; / / empty keys ARE allowed b / c of indexed column values 
 / / if ( lastWrittenKey ! = null & & lastWrittenKey . compareTo ( decoratedKey ) > = 0 ) 
 / / throw new RuntimeException ( " Last written key " + lastWrittenKey + " > = current key " + decoratedKey + " writing into " + getFilename ( ) ) ; 
 - return ( lastWrittenKey = = null ) ? 0 : dataFile . getFilePointer ( ) ; 
 + return ( lastWrittenKey = = null ) ? 0 : dataFile . position ( ) ; 
 } 
 
 private void afterAppend ( DecoratedKey decoratedKey , long dataEnd , RowIndexEntry index ) throws IOException 
 @ @ - 153 , 7 + 153 , 7 @ @ public class BigTableWriter extends SSTableWriter 
 
 RowIndexEntry entry = RowIndexEntry . create ( startPosition , iterator . partitionLevelDeletion ( ) , index ) ; 
 
 - long endPosition = dataFile . getFilePointer ( ) ; 
 + long endPosition = dataFile . position ( ) ; 
 long rowSize = endPosition - startPosition ; 
 maybeLogLargePartitionWarning ( key , rowSize ) ; 
 metadataCollector . addPartitionSizeInBytes ( rowSize ) ; 
 @ @ - 352 , 7 + 352 , 7 @ @ public class BigTableWriter extends SSTableWriter 
 
 public long getFilePointer ( ) 
 { 
 - return dataFile . getFilePointer ( ) ; 
 + return dataFile . position ( ) ; 
 } 
 
 public long getOnDiskFilePointer ( ) 
 @ @ - 403 , 7 + 403 , 7 @ @ public class BigTableWriter extends SSTableWriter 
 public void append ( DecoratedKey key , RowIndexEntry indexEntry , long dataEnd ) throws IOException 
 { 
 bf . add ( key ) ; 
 - long indexStart = indexFile . getFilePointer ( ) ; 
 + long indexStart = indexFile . position ( ) ; 
 try 
 { 
 ByteBufferUtil . writeWithShortLength ( key . getKey ( ) , indexFile ) ; 
 @ @ - 413 , 7 + 413 , 7 @ @ public class BigTableWriter extends SSTableWriter 
 { 
 throw new FSWriteError ( e , indexFile . getPath ( ) ) ; 
 } 
 - long indexEnd = indexFile . getFilePointer ( ) ; 
 + long indexEnd = indexFile . position ( ) ; 
 
 if ( logger . isTraceEnabled ( ) ) 
 logger . trace ( " wrote index entry : { } at { } " , indexEntry , indexStart ) ; 
 @ @ - 462 , 7 + 462 , 7 @ @ public class BigTableWriter extends SSTableWriter 
 flushBf ( ) ; 
 
 / / truncate index file 
 - long position = iwriter . indexFile . getFilePointer ( ) ; 
 + long position = iwriter . indexFile . position ( ) ; 
 iwriter . indexFile . setDescriptor ( descriptor ) . prepareToCommit ( ) ; 
 FileUtils . truncate ( iwriter . indexFile . getPath ( ) , position ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java b / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java 
 index c4d6f54 . . 4ba5546 100644 
 - - - a / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java 
 + + + b / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java 
 @ @ - 114 , 12 + 114 , 12 @ @ public class DataOutputBuffer extends BufferedDataOutputStreamPlus 
 return buffer . position ( ) ; 
 } 
 
 - public boolean hasFilePointer ( ) 
 + public boolean hasPosition ( ) 
 { 
 return true ; 
 } 
 
 - public long getFilePointer ( ) 
 + public long position ( ) 
 { 
 return getLength ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / util / DataOutputPlus . java b / src / java / org / apache / cassandra / io / util / DataOutputPlus . java 
 index 551d386 . . 60a5727 100644 
 - - - a / src / java / org / apache / cassandra / io / util / DataOutputPlus . java 
 + + + b / src / java / org / apache / cassandra / io / util / DataOutputPlus . java 
 @ @ - 22 , 10 + 22 , 10 @ @ import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 import java . nio . channels . WritableByteChannel ; 
 
 - import org . apache . cassandra . utils . vint . VIntCoding ; 
 - 
 import com . google . common . base . Function ; 
 
 + import org . apache . cassandra . utils . vint . VIntCoding ; 
 + 
 / * * 
 * Extension to DataOutput that provides for writing ByteBuffer and Memory , potentially with an efficient 
 * implementation that is zero copy or at least has reduced bounds checking overhead . 
 @ @ - 60 , 12 + 60 , 25 @ @ public interface DataOutputPlus extends DataOutput 
 VIntCoding . writeUnsignedVInt ( i , this ) ; 
 } 
 
 - default long getFilePointer ( ) 
 + / * * 
 + * Returns the current position of the underlying target like a file - pointer 
 + * or the position withing a buffer . Not every implementation may support this 
 + * functionality . Whether or not this functionality is supported can be checked 
 + * via the { @ link # hasPosition ( ) } . 
 + * 
 + * @ throws UnsupportedOperationException if the implementation does not support 
 + * position 
 + * / 
 + default long position ( ) 
 { 
 throw new UnsupportedOperationException ( ) ; 
 } 
 
 - default boolean hasFilePointer ( ) 
 + / * * 
 + * If the implementation supports providing a position , this method returns 
 + * { @ code true } , otherwise { @ code false } . 
 + * / 
 + default boolean hasPosition ( ) 
 { 
 return false ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / util / SequentialWriter . java b / src / java / org / apache / cassandra / io / util / SequentialWriter . java 
 index 1814aca . . 6000f95 100644 
 - - - a / src / java / org / apache / cassandra / io / util / SequentialWriter . java 
 + + + b / src / java / org / apache / cassandra / io / util / SequentialWriter . java 
 @ @ - 253 , 12 + 253 , 12 @ @ public class SequentialWriter extends BufferedDataOutputStreamPlus implements Tr 
 runPostFlush . run ( ) ; 
 } 
 
 - public boolean hasFilePointer ( ) 
 + public boolean hasPosition ( ) 
 { 
 return true ; 
 } 
 
 - public long getFilePointer ( ) 
 + public long position ( ) 
 { 
 return current ( ) ; 
 } 
 @ @ - 274 , 7 + 274 , 7 @ @ public class SequentialWriter extends BufferedDataOutputStreamPlus implements Tr 
 * / 
 public long getOnDiskFilePointer ( ) 
 { 
 - return getFilePointer ( ) ; 
 + return position ( ) ; 
 } 
 
 public long length ( ) 
 diff - - git a / test / unit / org / apache / cassandra / db / RowIndexEntryTest . java b / test / unit / org / apache / cassandra / db / RowIndexEntryTest . java 
 index d004d45 . . 25baa4e 100644 
 - - - a / test / unit / org / apache / cassandra / db / RowIndexEntryTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RowIndexEntryTest . java 
 @ @ - 155 , 12 + 155 , 12 @ @ public class RowIndexEntryTest extends CQLTester 
 / / test with an output stream that doesn ' t support a file - pointer 
 buffer = new DataOutputBuffer ( ) 
 { 
 - public boolean hasFilePointer ( ) 
 + public boolean hasPosition ( ) 
 { 
 return false ; 
 } 
 
 - public long getFilePointer ( ) 
 + public long position ( ) 
 { 
 throw new UnsupportedOperationException ( ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java 
 index 364ea71 . . c3a4539 100644 
 - - - a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java 
 + + + b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java 
 @ @ - 46 , 7 + 46 , 7 @ @ public class BufferedRandomAccessFileTest 
 byte [ ] data = " Hello " . getBytes ( ) ; 
 w . write ( data ) ; 
 assertEquals ( data . length , w . length ( ) ) ; 
 - assertEquals ( data . length , w . getFilePointer ( ) ) ; 
 + assertEquals ( data . length , w . position ( ) ) ; 
 
 w . sync ( ) ; 
 
 @ @ - 67 , 9 + 67 , 9 @ @ public class BufferedRandomAccessFileTest 
 for ( int i = 0 ; i < bigData . length ; i + + ) 
 bigData [ i ] = ' d ' ; 
 
 - long initialPosition = w . getFilePointer ( ) ; 
 + long initialPosition = w . position ( ) ; 
 w . write ( bigData ) ; / / writing data 
 - assertEquals ( w . getFilePointer ( ) , initialPosition + bigData . length ) ; 
 + assertEquals ( w . position ( ) , initialPosition + bigData . length ) ; 
 assertEquals ( w . length ( ) , initialPosition + bigData . length ) ; / / file size should equals to last position 
 
 w . sync ( ) ; 
 @ @ - 285 , 10 + 285 , 10 @ @ public class BufferedRandomAccessFileTest 
 { 
 final SequentialWriter w = createTempFile ( " brafGetFilePointer " ) ; 
 
 - assertEquals ( w . getFilePointer ( ) , 0 ) ; / / initial position should be 0 
 + assertEquals ( w . position ( ) , 0 ) ; / / initial position should be 0 
 
 w . write ( generateByteArray ( 20 ) ) ; 
 - assertEquals ( w . getFilePointer ( ) , 20 ) ; / / position 20 after writing 20 bytes 
 + assertEquals ( w . position ( ) , 20 ) ; / / position 20 after writing 20 bytes 
 
 w . sync ( ) ; 
 
 diff - - git a / test / unit / org / apache / cassandra / streaming / compression / CompressedInputStreamTest . java b / test / unit / org / apache / cassandra / streaming / compression / CompressedInputStreamTest . java 
 index fea6d2b . . 30670fb 100644 
 - - - a / test / unit / org / apache / cassandra / streaming / compression / CompressedInputStreamTest . java 
 + + + b / test / unit / org / apache / cassandra / streaming / compression / CompressedInputStreamTest . java 
 @ @ - 70 , 7 + 70 , 7 @ @ public class CompressedInputStreamTest 
 Map < Long , Long > index = new HashMap < Long , Long > ( ) ; 
 for ( long l = 0L ; l < 1000 ; l + + ) 
 { 
 - index . put ( l , writer . getFilePointer ( ) ) ; 
 + index . put ( l , writer . position ( ) ) ; 
 writer . writeLong ( l ) ; 
 } 
 writer . finish ( ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / CommitLog . java b / src / java / org / apache / cassandra / db / CommitLog . java 
 index 1428421 . . 8c4ae29 100644 
 - - - a / src / java / org / apache / cassandra / db / CommitLog . java 
 + + + b / src / java / org / apache / cassandra / db / CommitLog . java 
 @ @ - 297 , 7 + 297 , 7 @ @ public class CommitLog 
 logger _ . debug ( " Replaying " + file + " starting at " + lowPos ) ; 
 
 / * read the logs populate RowMutation and apply * / 
 - while ( reader . getFilePointer ( ) < reader . length ( ) ) 
 + while ( ! reader . isEOF ( ) ) 
 { 
 if ( logger _ . isDebugEnabled ( ) ) 
 logger _ . debug ( " Reading mutation at " + reader . getFilePointer ( ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / filter / SSTableNamesIterator . java b / src / java / org / apache / cassandra / db / filter / SSTableNamesIterator . java 
 index 436b899 . . baedce3 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / SSTableNamesIterator . java 
 + + + b / src / java / org / apache / cassandra / db / filter / SSTableNamesIterator . java 
 @ @ - 90 , 14 + 90 , 13 @ @ public class SSTableNamesIterator extends SimpleAbstractColumnIterator 
 ranges . add ( indexInfo ) ; 
 } 
 
 - / * seek to the correct offset to the data * / 
 - long columnBegin = file . getFilePointer ( ) ; 
 - / * now read all the columns from the ranges * / 
 + file . mark ( ) ; 
 for ( IndexHelper . IndexInfo indexInfo : ranges ) 
 { 
 - file . seek ( columnBegin + indexInfo . offset ) ; 
 + file . reset ( ) ; 
 + assert file . skipBytes ( ( int ) indexInfo . offset ) = = indexInfo . offset ; 
 / / TODO only completely deserialize columns we are interested in 
 - while ( file . getFilePointer ( ) < columnBegin + indexInfo . offset + indexInfo . width ) 
 + while ( file . bytesPastMark ( ) < indexInfo . offset + indexInfo . width ) 
 { 
 final IColumn column = cf . getColumnSerializer ( ) . deserialize ( file ) ; 
 / / we check vs the original Set , not the filtered List , for efficiency 
 diff - - git a / src / java / org / apache / cassandra / db / filter / SSTableSliceIterator . java b / src / java / org / apache / cassandra / db / filter / SSTableSliceIterator . java 
 index 71ba263 . . 7c1bf9d 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / SSTableSliceIterator . java 
 + + + b / src / java / org / apache / cassandra / db / filter / SSTableSliceIterator . java 
 @ @ - 113 , 7 + 113 , 6 @ @ class SSTableSliceIterator extends AbstractIterator < IColumn > implements ColumnIt 
 private final ColumnFamily emptyColumnFamily ; 
 
 private final List < IndexHelper . IndexInfo > indexes ; 
 - private final long columnStartPosition ; 
 private final FileDataInput file ; 
 
 private int curRangeIndex ; 
 @ @ - 133 , 7 + 132 , 7 @ @ class SSTableSliceIterator extends AbstractIterator < IColumn > implements ColumnIt 
 emptyColumnFamily = ColumnFamily . serializer ( ) . deserializeFromSSTableNoColumns ( ssTable . makeColumnFamily ( ) , file ) ; 
 file . readInt ( ) ; / / column count 
 
 - columnStartPosition = file . getFilePointer ( ) ; 
 + file . mark ( ) ; 
 curRangeIndex = IndexHelper . indexFor ( startColumn , indexes , comparator , reversed ) ; 
 if ( reversed & & curRangeIndex = = indexes . size ( ) ) 
 curRangeIndex - - ; 
 @ @ - 186 , 8 + 185 , 9 @ @ class SSTableSliceIterator extends AbstractIterator < IColumn > implements ColumnIt 
 
 boolean outOfBounds = false ; 
 
 - file . seek ( columnStartPosition + curColPosition . offset ) ; 
 - while ( file . getFilePointer ( ) < columnStartPosition + curColPosition . offset + curColPosition . width & & ! outOfBounds ) 
 + file . reset ( ) ; 
 + assert file . skipBytes ( ( int ) curColPosition . offset ) = = curColPosition . offset ; 
 + while ( file . bytesPastMark ( ) < curColPosition . offset + curColPosition . width & & ! outOfBounds ) 
 { 
 IColumn column = emptyColumnFamily . getColumnSerializer ( ) . deserialize ( file ) ; 
 if ( reversed ) 
 diff - - git a / src / java / org / apache / cassandra / io / IndexHelper . java b / src / java / org / apache / cassandra / io / IndexHelper . java 
 index f3eaa3e . . fc62860 100644 
 - - - a / src / java / org / apache / cassandra / io / IndexHelper . java 
 + + + b / src / java / org / apache / cassandra / io / IndexHelper . java 
 @ @ - 72 , 12 + 72 , 12 @ @ public class IndexHelper 
 ArrayList < IndexInfo > indexList = new ArrayList < IndexInfo > ( ) ; 
 
 	 	 int columnIndexSize = in . readInt ( ) ; 
 - long start = in . getFilePointer ( ) ; 
 - while ( in . getFilePointer ( ) < start + columnIndexSize ) 
 + in . mark ( ) ; 
 + while ( in . bytesPastMark ( ) < columnIndexSize ) 
 { 
 indexList . add ( IndexInfo . deserialize ( in ) ) ; 
 } 
 - assert in . getFilePointer ( ) = = start + columnIndexSize ; 
 + assert in . bytesPastMark ( ) = = columnIndexSize ; 
 
 return indexList ; 
 	 } 
 diff - - git a / src / java / org / apache / cassandra / io / IteratingRow . java b / src / java / org / apache / cassandra / io / IteratingRow . java 
 index 20c9f89 . . 04bc199 100644 
 - - - a / src / java / org / apache / cassandra / io / IteratingRow . java 
 + + + b / src / java / org / apache / cassandra / io / IteratingRow . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import org . apache . cassandra . db . ColumnFamily ; 
 import org . apache . cassandra . db . DecoratedKey ; 
 import org . apache . cassandra . db . IColumn ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 + import org . apache . cassandra . io . util . BufferedRandomAccessFile ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . io . util . FileDataInput ; 
 import com . google . common . collect . AbstractIterator ; 
 @ @ - 35 , 18 + 36 , 16 @ @ public class IteratingRow extends AbstractIterator < IColumn > implements Comparabl 
 { 
 private final DecoratedKey key ; 
 private final long finishedAt ; 
 - private final FileDataInput file ; 
 + private final BufferedRandomAccessFile file ; 
 private SSTableReader sstable ; 
 private long dataStart ; 
 - private final IPartitioner partitioner ; 
 
 - public IteratingRow ( FileDataInput file , SSTableReader sstable ) throws IOException 
 + public IteratingRow ( BufferedRandomAccessFile file , SSTableReader sstable ) throws IOException 
 { 
 this . file = file ; 
 this . sstable = sstable ; 
 - this . partitioner = StorageService . getPartitioner ( ) ; 
 
 - key = partitioner . convertFromDiskFormat ( file . readUTF ( ) ) ; 
 + key = StorageService . getPartitioner ( ) . convertFromDiskFormat ( file . readUTF ( ) ) ; 
 int dataSize = file . readInt ( ) ; 
 dataStart = file . getFilePointer ( ) ; 
 finishedAt = dataStart + dataSize ; 
 diff - - git a / src / java / org / apache / cassandra / io / SSTableReader . java b / src / java / org / apache / cassandra / io / SSTableReader . java 
 index 7d21df0 . . 9ea55e7 100644 
 - - - a / src / java / org / apache / cassandra / io / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / SSTableReader . java 
 @ @ - 395 , 8 + 395 , 8 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 FileDataInput input ; 
 if ( indexBuffers = = null ) 
 { 
 - input = new BufferedRandomAccessFile ( indexFilename ( ) , " r " ) ; 
 - input . seek ( p ) ; 
 + input = new BufferedRandomAccessFile ( path , " r " ) ; 
 + ( ( BufferedRandomAccessFile ) input ) . seek ( p ) ; 
 } 
 else 
 { 
 @ @ - 421 , 7 + 421 , 7 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 if ( v = = 0 ) 
 { 
 PositionSize info ; 
 - if ( input . getFilePointer ( ) < input . length ( ) ) 
 + if ( ! input . isEOF ( ) ) 
 { 
 int utflen = input . readUnsignedShort ( ) ; 
 if ( utflen ! = input . skipBytes ( utflen ) ) 
 diff - - git a / src / java / org / apache / cassandra / io / SSTableScanner . java b / src / java / org / apache / cassandra / io / SSTableScanner . java 
 index 4f958fe . . 7442e36 100644 
 - - - a / src / java / org / apache / cassandra / io / SSTableScanner . java 
 + + + b / src / java / org / apache / cassandra / io / SSTableScanner . java 
 @ @ - 35 , 10 + 35 , 10 @ @ public class SSTableScanner implements Iterator < IteratingRow > , Closeable 
 { 
 private static Logger logger = Logger . getLogger ( SSTableScanner . class ) ; 
 
 + private final BufferedRandomAccessFile file ; 
 + private final SSTableReader sstable ; 
 private IteratingRow row ; 
 private boolean exhausted = false ; 
 - private FileDataInput file ; 
 - private SSTableReader sstable ; 
 private Iterator < IteratingRow > iterator ; 
 
 / * * 
 @ @ - 116 , 7 + 116 , 9 @ @ public class SSTableScanner implements Iterator < IteratingRow > , Closeable 
 { 
 try 
 { 
 - return ( row = = null & & file . getFilePointer ( ) < file . length ( ) ) | | row . getEndPosition ( ) < file . length ( ) ; 
 + if ( row = = null ) 
 + return ! file . isEOF ( ) ; 
 + return row . getEndPosition ( ) < file . length ( ) ; 
 } 
 catch ( IOException e ) 
 { 
 @ @ - 130 , 7 + 132 , 7 @ @ public class SSTableScanner implements Iterator < IteratingRow > , Closeable 
 { 
 if ( row ! = null ) 
 row . skipRemaining ( ) ; 
 - assert file . getFilePointer ( ) < file . length ( ) ; 
 + assert ! file . isEOF ( ) ; 
 return row = new IteratingRow ( file , sstable ) ; 
 } 
 catch ( IOException e ) 
 diff - - git a / src / java / org / apache / cassandra / io / util / BufferedRandomAccessFile . java b / src / java / org / apache / cassandra / io / util / BufferedRandomAccessFile . java 
 index 50bfe23 . . 2192a2a 100644 
 - - - a / src / java / org / apache / cassandra / io / util / BufferedRandomAccessFile . java 
 + + + b / src / java / org / apache / cassandra / io / util / BufferedRandomAccessFile . java 
 @ @ - 56 , 6 + 56 , 7 @ @ public final class BufferedRandomAccessFile extends RandomAccessFile implements 
 private long maxHi _ ; / / this . lo + this . buff . length 
 private boolean hitEOF _ ; / / buffer contains last file block ? 
 private long diskPos _ ; / / disk position 
 + private long markedPointer ; 
 
 / * 
 * To describe the above fields , we introduce the following abstractions for 
 @ @ - 391 , 4 + 392 , 28 @ @ public final class BufferedRandomAccessFile extends RandomAccessFile implements 
 this . curr _ + = len ; 
 return len ; 
 } 
 + 
 + public boolean isEOF ( ) throws IOException 
 + { 
 + return getFilePointer ( ) = = length ( ) ; 
 + } 
 + 
 + public void mark ( ) 
 + { 
 + markedPointer = getFilePointer ( ) ; 
 + } 
 + 
 + public void reset ( ) throws IOException 
 + { 
 + seek ( markedPointer ) ; 
 + } 
 + 
 + public int bytesPastMark ( ) 
 + { 
 + long bytes = getFilePointer ( ) - markedPointer ; 
 + assert bytes > = 0 ; 
 + if ( bytes > Integer . MAX _ VALUE ) 
 + throw new UnsupportedOperationException ( " Overflow : " + bytes ) ; 
 + return ( int ) bytes ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / util / FileDataInput . java b / src / java / org / apache / cassandra / io / util / FileDataInput . java 
 index e842e06 . . 1c0f8bf 100644 
 - - - a / src / java / org / apache / cassandra / io / util / FileDataInput . java 
 + + + b / src / java / org / apache / cassandra / io / util / FileDataInput . java 
 @ @ - 6 , 11 + 6 , 13 @ @ import java . io . Closeable ; 
 
 public interface FileDataInput extends DataInput , Closeable 
 { 
 - public void seek ( long pos ) throws IOException ; 
 + public String getPath ( ) ; 
 
 - public long length ( ) throws IOException ; 
 + public boolean isEOF ( ) throws IOException ; 
 
 - public long getFilePointer ( ) ; 
 + public void mark ( ) ; 
 
 - public String getPath ( ) ; 
 + public void reset ( ) throws IOException ; 
 + 
 + public int bytesPastMark ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java b / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java 
 index e4f0d2d . . 70b55e3 100644 
 - - - a / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java 
 + + + b / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java 
 @ @ - 8 , 7 + 8 , 7 @ @ public class MappedFileDataInput extends InputStream implements FileDataInput 
 private final MappedByteBuffer buffer ; 
 private final String filename ; 
 private int position ; 
 - private long fileLength ; 
 + private int markedPosition ; 
 
 public MappedFileDataInput ( MappedByteBuffer buffer , String filename ) 
 { 
 @ @ - 21 , 25 + 21 , 46 @ @ public class MappedFileDataInput extends InputStream implements FileDataInput 
 this . buffer = buffer ; 
 this . filename = filename ; 
 this . position = position ; 
 - assert ( fileLength = new File ( filename ) . length ( ) ) > = 0 ; / / hack to only initialize fL when assertions are enabled 
 } 
 
 - public void seek ( long pos ) throws IOException 
 + / / don ' t make this public , this is only for seeking WITHIN the current mapped segment 
 + private void seekInternal ( int pos ) throws IOException 
 { 
 - assert pos < = Integer . MAX _ VALUE ; 
 - assert buffer . capacity ( ) = = fileLength ; / / calling this does not make sense on a mapped chunk of a larger file 
 - position = ( int ) pos ; 
 + position = pos ; 
 } 
 
 - public long length ( ) throws IOException 
 + @ Override 
 + public boolean markSupported ( ) 
 { 
 - assert buffer . capacity ( ) = = fileLength ; / / calling this does not make sense on a mapped chunk of a larger file 
 - return buffer . capacity ( ) ; 
 + return true ; 
 } 
 
 - public long getFilePointer ( ) 
 + @ Override 
 + public void mark ( int ignored ) 
 { 
 - return position ; 
 + markedPosition = position ; 
 + } 
 + 
 + @ Override 
 + public void reset ( ) throws IOException 
 + { 
 + seekInternal ( markedPosition ) ; 
 + } 
 + 
 + public void mark ( ) 
 + { 
 + mark ( - 1 ) ; 
 + } 
 + 
 + public int bytesPastMark ( ) 
 + { 
 + assert position > = markedPosition ; 
 + return position - markedPosition ; 
 + } 
 + 
 + public boolean isEOF ( ) throws IOException 
 + { 
 + return position = = buffer . capacity ( ) ; 
 } 
 
 public String getPath ( ) 
 @ @ - 49 , 7 + 70 , 7 @ @ public class MappedFileDataInput extends InputStream implements FileDataInput 
 
 public int read ( ) throws IOException 
 { 
 - if ( position = = length ( ) ) 
 + if ( isEOF ( ) ) 
 return - 1 ; 
 return buffer . get ( position + + ) & 0xFF ; 
 } 
 @ @ - 252 , 7 + 273 , 7 @ @ public class MappedFileDataInput extends InputStream implements FileDataInput 
 public final String readLine ( ) throws IOException { 
 StringBuilder line = new StringBuilder ( 80 ) ; / / Typical line length 
 boolean foundTerminator = false ; 
 - long unreadPosition = 0 ; 
 + int unreadPosition = 0 ; 
 while ( true ) { 
 int nextByte = read ( ) ; 
 switch ( nextByte ) { 
 @ @ - 260 , 18 + 281 , 18 @ @ public class MappedFileDataInput extends InputStream implements FileDataInput 
 return line . length ( ) ! = 0 ? line . toString ( ) : null ; 
 case ( byte ) ' \ r ' : 
 if ( foundTerminator ) { 
 - seek ( unreadPosition ) ; 
 + seekInternal ( unreadPosition ) ; 
 return line . toString ( ) ; 
 } 
 foundTerminator = true ; 
 / * Have to be able to peek ahead one byte * / 
 - unreadPosition = getFilePointer ( ) ; 
 + unreadPosition = position ; 
 break ; 
 case ( byte ) ' \ n ' : 
 return line . toString ( ) ; 
 default : 
 if ( foundTerminator ) { 
 - seek ( unreadPosition ) ; 
 + seekInternal ( unreadPosition ) ; 
 return line . toString ( ) ; 
 } 
 line . append ( ( char ) nextByte ) ;
