BLEU SCORE: 0.040583489434387374

TEST MSG: Utilise NoSpamLogger for rate limited logging
GENERATED MSG: Ninja fix CASSANDRA - 9029

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java <nl> index 2a55600 . . 3479440 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java <nl> @ @ - 17 , 6 + 17 , 7 @ @ <nl> * / <nl> package org . apache . cassandra . db . commitlog ; <nl> <nl> + import org . apache . cassandra . utils . NoSpamLogger ; <nl> import org . apache . cassandra . utils . concurrent . WaitQueue ; <nl> import org . slf4j . * ; <nl> <nl> @ @ - 28 , 8 + 29 , 6 @ @ import static org . apache . cassandra . db . commitlog . CommitLogSegment . Allocation ; <nl> <nl> public abstract class AbstractCommitLogService <nl> { <nl> - / / how often should we log syngs that lag behind our desired period <nl> - private static final long LAG _ REPORT _ INTERVAL = TimeUnit . MINUTES . toMillis ( 5 ) ; <nl> <nl> private Thread thread ; <nl> private volatile boolean shutdown = false ; <nl> @ @ - 112 , 11 + 111 , 18 @ @ public abstract class AbstractCommitLogService <nl> syncCount + + ; <nl> totalSyncDuration + = now - syncStarted ; <nl> <nl> - if ( firstLagAt > 0 & & now - firstLagAt > = LAG _ REPORT _ INTERVAL ) <nl> + if ( firstLagAt > 0 ) <nl> { <nl> - logger . warn ( String . format ( " Out of % d commit log syncs over the past % ds with average duration of % . 2fms , % d have exceeded the configured commit interval by an average of % . 2fms " , <nl> - syncCount , ( now - firstLagAt ) / 1000 , ( double ) totalSyncDuration / syncCount , lagCount , ( double ) syncExceededIntervalBy / lagCount ) ) ; <nl> - firstLagAt = 0 ; <nl> + / / Only reset the lag tracking if it actually logged this time <nl> + boolean logged = NoSpamLogger . log ( <nl> + logger , <nl> + NoSpamLogger . Level . WARN , <nl> + 5 , <nl> + TimeUnit . MINUTES , <nl> + " Out of { } commit log syncs over the past { } s with average duration of { } ms , { } have exceeded the configured commit interval by an average of { } ms " , <nl> + syncCount , ( now - firstLagAt ) / 1000 , String . format ( " % . 2f " , ( double ) totalSyncDuration / syncCount ) , lagCount , String . format ( " % . 2f " , ( double ) syncExceededIntervalBy / lagCount ) ) ; <nl> + if ( logged ) <nl> + firstLagAt = 0 ; <nl> } <nl> <nl> / / if we have lagged this round , we probably have work to do already so we don ' t sleep <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / MemoryMappedSegment . java b / src / java / org / apache / cassandra / db / commitlog / MemoryMappedSegment . java <nl> index e240a91 . . 3a52e11 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / MemoryMappedSegment . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / MemoryMappedSegment . java <nl> @ @ - 99 , 7 + 99 , 7 @ @ public class MemoryMappedSegment extends CommitLogSegment <nl> { <nl> throw new FSWriteError ( e , getPath ( ) ) ; <nl> } <nl> - CLibrary . trySkipCache ( fd , startMarker , nextMarker ) ; <nl> + CLibrary . trySkipCache ( fd , startMarker , nextMarker , logFile . getAbsolutePath ( ) ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java <nl> index 011c7d9 . . 9497bf3 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java <nl> @ @ - 17 , 6 + 17 , 7 @ @ <nl> * / <nl> package org . apache . cassandra . io . sstable ; <nl> <nl> + import java . io . File ; <nl> import java . util . * ; <nl> <nl> import com . google . common . annotations . VisibleForTesting ; <nl> @ @ - 160 , 7 + 161 , 7 @ @ public class SSTableRewriter extends Transactional . AbstractTransactional impleme <nl> for ( SSTableReader reader : transaction . originals ( ) ) <nl> { <nl> RowIndexEntry index = reader . getPosition ( key , SSTableReader . Operator . GE ) ; <nl> - CLibrary . trySkipCache ( fileDescriptors . get ( reader . descriptor ) , 0 , index = = null ? 0 : index . position ) ; <nl> + CLibrary . trySkipCache ( fileDescriptors . get ( reader . descriptor ) , 0 , index = = null ? 0 : index . position , reader . getFilename ( ) ) ; <nl> } <nl> } <nl> else <nl> diff - - git a / src / java / org / apache / cassandra / io / util / SegmentedFile . java b / src / java / org / apache / cassandra / io / util / SegmentedFile . java <nl> index fbaa77c . . d9d384b 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / SegmentedFile . java <nl> + + + b / src / java / org / apache / cassandra / io / util / SegmentedFile . java <nl> @ @ - 127 , 7 + 127 , 7 @ @ public abstract class SegmentedFile extends SharedCloseableImpl <nl> <nl> public void dropPageCache ( long before ) <nl> { <nl> - CLibrary . trySkipCache ( channel . getFileDescriptor ( ) , 0 , before ) ; <nl> + CLibrary . trySkipCache ( channel . getFileDescriptor ( ) , 0 , before , path ( ) ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / utils / CLibrary . java b / src / java / org / apache / cassandra / utils / CLibrary . java <nl> index fed314b . . 645a4ce 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / CLibrary . java <nl> + + + b / src / java / org / apache / cassandra / utils / CLibrary . java <nl> @ @ - 19 , 17 + 19 , 18 @ @ package org . apache . cassandra . utils ; <nl> <nl> import java . io . FileDescriptor ; <nl> import java . io . IOException ; <nl> - import java . io . RandomAccessFile ; <nl> import java . lang . reflect . Field ; <nl> import java . nio . channels . FileChannel ; <nl> import java . nio . file . Paths ; <nl> import java . nio . file . StandardOpenOption ; <nl> + import java . util . concurrent . TimeUnit ; <nl> <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import com . sun . jna . LastErrorException ; <nl> import com . sun . jna . Native ; <nl> + import com . sun . jna . Pointer ; <nl> <nl> public final class CLibrary <nl> { <nl> @ @ - 86 , 6 + 87 , 7 @ @ public final class CLibrary <nl> private static native int open ( String path , int flags ) throws LastErrorException ; <nl> private static native int fsync ( int fd ) throws LastErrorException ; <nl> private static native int close ( int fd ) throws LastErrorException ; <nl> + private static native Pointer strerror ( int errnum ) throws LastErrorException ; <nl> <nl> private static int errno ( RuntimeException e ) <nl> { <nl> @ @ - 146 , 24 + 148 , 24 @ @ public final class CLibrary <nl> <nl> public static void trySkipCache ( String path , long offset , long len ) <nl> { <nl> - trySkipCache ( getfd ( path ) , offset , len ) ; <nl> + trySkipCache ( getfd ( path ) , offset , len , path ) ; <nl> } <nl> <nl> - public static void trySkipCache ( int fd , long offset , long len ) <nl> + public static void trySkipCache ( int fd , long offset , long len , String path ) <nl> { <nl> if ( len = = 0 ) <nl> - trySkipCache ( fd , 0 , 0 ) ; <nl> + trySkipCache ( fd , 0 , 0 , path ) ; <nl> <nl> while ( len > 0 ) <nl> { <nl> int sublen = ( int ) Math . min ( Integer . MAX _ VALUE , len ) ; <nl> - trySkipCache ( fd , offset , sublen ) ; <nl> + trySkipCache ( fd , offset , sublen , path ) ; <nl> len - = sublen ; <nl> offset - = sublen ; <nl> } <nl> } <nl> <nl> - public static void trySkipCache ( int fd , long offset , int len ) <nl> + public static void trySkipCache ( int fd , long offset , int len , String path ) <nl> { <nl> if ( fd < 0 ) <nl> return ; <nl> @ @ - 172 , 7 + 174 , 15 @ @ public final class CLibrary <nl> { <nl> if ( System . getProperty ( " os . name " ) . toLowerCase ( ) . contains ( " linux " ) ) <nl> { <nl> - posix _ fadvise ( fd , offset , len , POSIX _ FADV _ DONTNEED ) ; <nl> + int result = posix _ fadvise ( fd , offset , len , POSIX _ FADV _ DONTNEED ) ; <nl> + if ( result ! = 0 ) <nl> + NoSpamLogger . log ( <nl> + logger , <nl> + NoSpamLogger . Level . WARN , <nl> + 10 , <nl> + TimeUnit . MINUTES , <nl> + " Failed trySkipCache on file : { } Error : " + strerror ( result ) . getString ( 0 ) , <nl> + path ) ; <nl> } <nl> } <nl> catch ( UnsatisfiedLinkError e ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / NoSpamLogger . java b / src / java / org / apache / cassandra / utils / NoSpamLogger . java <nl> index 3cc8b5e . . 84bfa68 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / NoSpamLogger . java <nl> + + + b / src / java / org / apache / cassandra / utils / NoSpamLogger . java <nl> @ @ - 81 , 9 + 81 , 9 @ @ public class NoSpamLogger <nl> return nowNanos - expected > = minIntervalNanos & & compareAndSet ( expected , nowNanos ) ; <nl> } <nl> <nl> - public void log ( Level l , long nowNanos , Object . . . objects ) <nl> + public boolean log ( Level l , long nowNanos , Object . . . objects ) <nl> { <nl> - if ( ! shouldLog ( nowNanos ) ) return ; <nl> + if ( ! shouldLog ( nowNanos ) ) return false ; <nl> <nl> switch ( l ) <nl> { <nl> @ @ - 99 , 36 + 99 , 37 @ @ public class NoSpamLogger <nl> default : <nl> throw new AssertionError ( ) ; <nl> } <nl> + return true ; <nl> } <nl> <nl> - public void info ( long nowNanos , Object . . . objects ) <nl> + public boolean info ( long nowNanos , Object . . . objects ) <nl> { <nl> - NoSpamLogStatement . this . log ( Level . INFO , nowNanos , objects ) ; <nl> + return NoSpamLogStatement . this . log ( Level . INFO , nowNanos , objects ) ; <nl> } <nl> <nl> - public void info ( Object . . . objects ) <nl> + public boolean info ( Object . . . objects ) <nl> { <nl> - NoSpamLogStatement . this . info ( CLOCK . nanoTime ( ) , objects ) ; <nl> + return NoSpamLogStatement . this . info ( CLOCK . nanoTime ( ) , objects ) ; <nl> } <nl> <nl> - public void warn ( long nowNanos , Object . . . objects ) <nl> + public boolean warn ( long nowNanos , Object . . . objects ) <nl> { <nl> - NoSpamLogStatement . this . log ( Level . WARN , nowNanos , objects ) ; <nl> + return NoSpamLogStatement . this . log ( Level . WARN , nowNanos , objects ) ; <nl> } <nl> <nl> - public void warn ( Object . . . objects ) <nl> + public boolean warn ( Object . . . objects ) <nl> { <nl> - NoSpamLogStatement . this . warn ( CLOCK . nanoTime ( ) , objects ) ; <nl> + return NoSpamLogStatement . this . warn ( CLOCK . nanoTime ( ) , objects ) ; <nl> } <nl> <nl> - public void error ( long nowNanos , Object . . . objects ) <nl> + public boolean error ( long nowNanos , Object . . . objects ) <nl> { <nl> - NoSpamLogStatement . this . log ( Level . ERROR , nowNanos , objects ) ; <nl> + return NoSpamLogStatement . this . log ( Level . ERROR , nowNanos , objects ) ; <nl> } <nl> <nl> - public void error ( Object . . . objects ) <nl> + public boolean error ( Object . . . objects ) <nl> { <nl> - NoSpamLogStatement . this . error ( CLOCK . nanoTime ( ) , objects ) ; <nl> + return NoSpamLogStatement . this . error ( CLOCK . nanoTime ( ) , objects ) ; <nl> } <nl> } <nl> <nl> @ @ - 153 , 16 + 154 , 16 @ @ public class NoSpamLogger <nl> return wrapped ; <nl> } <nl> <nl> - public static void log ( Logger logger , Level level , long minInterval , TimeUnit unit , String message , Object . . . objects ) <nl> + public static boolean log ( Logger logger , Level level , long minInterval , TimeUnit unit , String message , Object . . . objects ) <nl> { <nl> - log ( logger , level , minInterval , unit , CLOCK . nanoTime ( ) , message , objects ) ; <nl> + return log ( logger , level , minInterval , unit , CLOCK . nanoTime ( ) , message , objects ) ; <nl> } <nl> <nl> - public static void log ( Logger logger , Level level , long minInterval , TimeUnit unit , long nowNanos , String message , Object . . . objects ) <nl> + public static boolean log ( Logger logger , Level level , long minInterval , TimeUnit unit , long nowNanos , String message , Object . . . objects ) <nl> { <nl> NoSpamLogger wrapped = getLogger ( logger , minInterval , unit ) ; <nl> NoSpamLogStatement statement = wrapped . getStatement ( message ) ; <nl> - statement . log ( level , nowNanos , objects ) ; <nl> + return statement . log ( level , nowNanos , objects ) ; <nl> } <nl> <nl> public static NoSpamLogStatement getStatement ( Logger logger , String message , long minInterval , TimeUnit unit ) <nl> @ @ - 181 , 38 + 182 , 38 @ @ public class NoSpamLogger <nl> minIntervalNanos = timeUnit . toNanos ( minInterval ) ; <nl> } <nl> <nl> - public void info ( long nowNanos , String s , Object . . . objects ) <nl> + public boolean info ( long nowNanos , String s , Object . . . objects ) <nl> { <nl> - NoSpamLogger . this . log ( Level . INFO , s , nowNanos , objects ) ; <nl> + return NoSpamLogger . this . log ( Level . INFO , s , nowNanos , objects ) ; <nl> } <nl> <nl> - public void info ( String s , Object . . . objects ) <nl> + public boolean info ( String s , Object . . . objects ) <nl> { <nl> - NoSpamLogger . this . info ( CLOCK . nanoTime ( ) , s , objects ) ; <nl> + return NoSpamLogger . this . info ( CLOCK . nanoTime ( ) , s , objects ) ; <nl> } <nl> <nl> - public void warn ( long nowNanos , String s , Object . . . objects ) <nl> + public boolean warn ( long nowNanos , String s , Object . . . objects ) <nl> { <nl> - NoSpamLogger . this . log ( Level . WARN , s , nowNanos , objects ) ; <nl> + return NoSpamLogger . this . log ( Level . WARN , s , nowNanos , objects ) ; <nl> } <nl> <nl> - public void warn ( String s , Object . . . objects ) <nl> + public boolean warn ( String s , Object . . . objects ) <nl> { <nl> - NoSpamLogger . this . warn ( CLOCK . nanoTime ( ) , s , objects ) ; <nl> + return NoSpamLogger . this . warn ( CLOCK . nanoTime ( ) , s , objects ) ; <nl> } <nl> <nl> - public void error ( long nowNanos , String s , Object . . . objects ) <nl> + public boolean error ( long nowNanos , String s , Object . . . objects ) <nl> { <nl> - NoSpamLogger . this . log ( Level . ERROR , s , nowNanos , objects ) ; <nl> + return NoSpamLogger . this . log ( Level . ERROR , s , nowNanos , objects ) ; <nl> } <nl> <nl> - public void error ( String s , Object . . . objects ) <nl> + public boolean error ( String s , Object . . . objects ) <nl> { <nl> - NoSpamLogger . this . error ( CLOCK . nanoTime ( ) , s , objects ) ; <nl> + return NoSpamLogger . this . error ( CLOCK . nanoTime ( ) , s , objects ) ; <nl> } <nl> <nl> - public void log ( Level l , String s , long nowNanos , Object . . . objects ) { <nl> - NoSpamLogger . this . getStatement ( s , minIntervalNanos ) . log ( l , nowNanos , objects ) ; <nl> + public boolean log ( Level l , String s , long nowNanos , Object . . . objects ) { <nl> + return NoSpamLogger . this . getStatement ( s , minIntervalNanos ) . log ( l , nowNanos , objects ) ; <nl> } <nl> <nl> public NoSpamLogStatement getStatement ( String s ) <nl> diff - - git a / test / unit / org / apache / cassandra / utils / CLibraryTest . java b / test / unit / org / apache / cassandra / utils / CLibraryTest . java <nl> index be52bed . . 774ddac 100644 <nl> - - - a / test / unit / org / apache / cassandra / utils / CLibraryTest . java <nl> + + + b / test / unit / org / apache / cassandra / utils / CLibraryTest . java <nl> @ @ - 32 , 6 + 32 , 6 @ @ public class CLibraryTest <nl> File file = FileUtils . createTempFile ( " testSkipCache " , " 1 " ) ; <nl> <nl> int fd = CLibrary . getfd ( file . getPath ( ) ) ; <nl> - CLibrary . trySkipCache ( fd , 0 , 0 ) ; <nl> + CLibrary . trySkipCache ( fd , 0 , 0 , file . getPath ( ) ) ; <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java b / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java <nl> index 0a5a005 . . afe4968 100644 <nl> - - - a / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java <nl> + + + b / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java <nl> @ @ - 113 , 17 + 113 , 17 @ @ public class NoSpamLoggerTest <nl> setUp ( ) ; <nl> now = 5 ; <nl> <nl> - NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , statement , param ) ; <nl> + assertTrue ( NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , statement , param ) ) ; <nl> <nl> assertEquals ( 1 , logged . get ( l ) . size ( ) ) ; <nl> <nl> - NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , statement , param ) ; <nl> + assertFalse ( NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , statement , param ) ) ; <nl> <nl> assertEquals ( 1 , logged . get ( l ) . size ( ) ) ; <nl> <nl> now + = 5 ; <nl> <nl> - NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , statement , param ) ; <nl> + assertTrue ( NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , statement , param ) ) ; <nl> <nl> assertEquals ( 2 , logged . get ( l ) . size ( ) ) ; <nl> } <nl> @ @ - 141 , 20 + 141 , 20 @ @ public class NoSpamLoggerTest <nl> now = 5 ; <nl> NoSpamLogger logger = NoSpamLogger . getLogger ( mock , 5 , TimeUnit . NANOSECONDS ) ; <nl> <nl> - logger . info ( statement , param ) ; <nl> - logger . info ( statement , param ) ; <nl> - logger . warn ( statement , param ) ; <nl> - logger . error ( statement , param ) ; <nl> + assertTrue ( logger . info ( statement , param ) ) ; <nl> + assertFalse ( logger . info ( statement , param ) ) ; <nl> + assertFalse ( logger . warn ( statement , param ) ) ; <nl> + assertFalse ( logger . error ( statement , param ) ) ; <nl> <nl> assertLoggedSizes ( 1 , 0 , 0 ) ; <nl> <nl> NoSpamLogStatement statement = logger . getStatement ( " swizzle2 { } " , 10 , TimeUnit . NANOSECONDS ) ; <nl> - statement . warn ( param ) ; <nl> + assertFalse ( statement . warn ( param ) ) ; <nl> / / now is 5 so it won ' t log <nl> assertLoggedSizes ( 1 , 0 , 0 ) ; <nl> <nl> now = 10 ; <nl> - statement . warn ( param ) ; <nl> + assertTrue ( statement . warn ( param ) ) ; <nl> assertLoggedSizes ( 1 , 1 , 0 ) ; <nl> <nl> } <nl> @ @ - 166 , 10 + 166 , 10 @ @ public class NoSpamLoggerTest <nl> <nl> now = 5 ; <nl> <nl> - nospam . info ( statement , param ) ; <nl> - nospam . info ( statement , param ) ; <nl> - nospam . warn ( statement , param ) ; <nl> - nospam . error ( statement , param ) ; <nl> + assertTrue ( nospam . info ( statement , param ) ) ; <nl> + assertFalse ( nospam . info ( statement , param ) ) ; <nl> + assertFalse ( nospam . warn ( statement , param ) ) ; <nl> + assertFalse ( nospam . error ( statement , param ) ) ; <nl> <nl> assertLoggedSizes ( 1 , 0 , 0 ) ; <nl> } <nl> @ @ - 193 , 51 + 193 , 51 @ @ public class NoSpamLoggerTest <nl> { <nl> now = 5 ; <nl> <nl> - NoSpamLogger . log ( mock , Level . INFO , 5 , TimeUnit . NANOSECONDS , statement , param ) ; <nl> + assertTrue ( NoSpamLogger . log ( mock , Level . INFO , 5 , TimeUnit . NANOSECONDS , statement , param ) ) ; <nl> checkMock ( Level . INFO ) ; <nl> <nl> now = 10 ; <nl> <nl> - NoSpamLogger . log ( mock , Level . WARN , 5 , TimeUnit . NANOSECONDS , statement , param ) ; <nl> + assertTrue ( NoSpamLogger . log ( mock , Level . WARN , 5 , TimeUnit . NANOSECONDS , statement , param ) ) ; <nl> checkMock ( Level . WARN ) ; <nl> <nl> now = 15 ; <nl> <nl> - NoSpamLogger . log ( mock , Level . ERROR , 5 , TimeUnit . NANOSECONDS , statement , param ) ; <nl> + assertTrue ( NoSpamLogger . log ( mock , Level . ERROR , 5 , TimeUnit . NANOSECONDS , statement , param ) ) ; <nl> checkMock ( Level . ERROR ) ; <nl> <nl> now = 20 ; <nl> <nl> NoSpamLogger logger = NoSpamLogger . getLogger ( mock , 5 , TimeUnit . NANOSECONDS ) ; <nl> <nl> - logger . info ( statement , param ) ; <nl> + assertTrue ( logger . info ( statement , param ) ) ; <nl> checkMock ( Level . INFO ) ; <nl> <nl> now = 25 ; <nl> <nl> - logger . warn ( statement , param ) ; <nl> + assertTrue ( logger . warn ( statement , param ) ) ; <nl> checkMock ( Level . WARN ) ; <nl> <nl> now = 30 ; <nl> <nl> - logger . error ( statement , param ) ; <nl> + assertTrue ( logger . error ( statement , param ) ) ; <nl> checkMock ( Level . ERROR ) ; <nl> <nl> NoSpamLogger . NoSpamLogStatement nospamStatement = logger . getStatement ( statement ) ; <nl> <nl> now = 35 ; <nl> <nl> - nospamStatement . info ( param ) ; <nl> + assertTrue ( nospamStatement . info ( param ) ) ; <nl> checkMock ( Level . INFO ) ; <nl> <nl> now = 40 ; <nl> <nl> - nospamStatement . warn ( param ) ; <nl> + assertTrue ( nospamStatement . warn ( param ) ) ; <nl> checkMock ( Level . WARN ) ; <nl> <nl> now = 45 ; <nl> <nl> - nospamStatement . error ( param ) ; <nl> + assertTrue ( nospamStatement . error ( param ) ) ; <nl> checkMock ( Level . ERROR ) ; <nl> } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java 
 index 2a55600 . . 3479440 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java 
 @ @ - 17 , 6 + 17 , 7 @ @ 
 * / 
 package org . apache . cassandra . db . commitlog ; 
 
 + import org . apache . cassandra . utils . NoSpamLogger ; 
 import org . apache . cassandra . utils . concurrent . WaitQueue ; 
 import org . slf4j . * ; 
 
 @ @ - 28 , 8 + 29 , 6 @ @ import static org . apache . cassandra . db . commitlog . CommitLogSegment . Allocation ; 
 
 public abstract class AbstractCommitLogService 
 { 
 - / / how often should we log syngs that lag behind our desired period 
 - private static final long LAG _ REPORT _ INTERVAL = TimeUnit . MINUTES . toMillis ( 5 ) ; 
 
 private Thread thread ; 
 private volatile boolean shutdown = false ; 
 @ @ - 112 , 11 + 111 , 18 @ @ public abstract class AbstractCommitLogService 
 syncCount + + ; 
 totalSyncDuration + = now - syncStarted ; 
 
 - if ( firstLagAt > 0 & & now - firstLagAt > = LAG _ REPORT _ INTERVAL ) 
 + if ( firstLagAt > 0 ) 
 { 
 - logger . warn ( String . format ( " Out of % d commit log syncs over the past % ds with average duration of % . 2fms , % d have exceeded the configured commit interval by an average of % . 2fms " , 
 - syncCount , ( now - firstLagAt ) / 1000 , ( double ) totalSyncDuration / syncCount , lagCount , ( double ) syncExceededIntervalBy / lagCount ) ) ; 
 - firstLagAt = 0 ; 
 + / / Only reset the lag tracking if it actually logged this time 
 + boolean logged = NoSpamLogger . log ( 
 + logger , 
 + NoSpamLogger . Level . WARN , 
 + 5 , 
 + TimeUnit . MINUTES , 
 + " Out of { } commit log syncs over the past { } s with average duration of { } ms , { } have exceeded the configured commit interval by an average of { } ms " , 
 + syncCount , ( now - firstLagAt ) / 1000 , String . format ( " % . 2f " , ( double ) totalSyncDuration / syncCount ) , lagCount , String . format ( " % . 2f " , ( double ) syncExceededIntervalBy / lagCount ) ) ; 
 + if ( logged ) 
 + firstLagAt = 0 ; 
 } 
 
 / / if we have lagged this round , we probably have work to do already so we don ' t sleep 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / MemoryMappedSegment . java b / src / java / org / apache / cassandra / db / commitlog / MemoryMappedSegment . java 
 index e240a91 . . 3a52e11 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / MemoryMappedSegment . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / MemoryMappedSegment . java 
 @ @ - 99 , 7 + 99 , 7 @ @ public class MemoryMappedSegment extends CommitLogSegment 
 { 
 throw new FSWriteError ( e , getPath ( ) ) ; 
 } 
 - CLibrary . trySkipCache ( fd , startMarker , nextMarker ) ; 
 + CLibrary . trySkipCache ( fd , startMarker , nextMarker , logFile . getAbsolutePath ( ) ) ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java 
 index 011c7d9 . . 9497bf3 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java 
 @ @ - 17 , 6 + 17 , 7 @ @ 
 * / 
 package org . apache . cassandra . io . sstable ; 
 
 + import java . io . File ; 
 import java . util . * ; 
 
 import com . google . common . annotations . VisibleForTesting ; 
 @ @ - 160 , 7 + 161 , 7 @ @ public class SSTableRewriter extends Transactional . AbstractTransactional impleme 
 for ( SSTableReader reader : transaction . originals ( ) ) 
 { 
 RowIndexEntry index = reader . getPosition ( key , SSTableReader . Operator . GE ) ; 
 - CLibrary . trySkipCache ( fileDescriptors . get ( reader . descriptor ) , 0 , index = = null ? 0 : index . position ) ; 
 + CLibrary . trySkipCache ( fileDescriptors . get ( reader . descriptor ) , 0 , index = = null ? 0 : index . position , reader . getFilename ( ) ) ; 
 } 
 } 
 else 
 diff - - git a / src / java / org / apache / cassandra / io / util / SegmentedFile . java b / src / java / org / apache / cassandra / io / util / SegmentedFile . java 
 index fbaa77c . . d9d384b 100644 
 - - - a / src / java / org / apache / cassandra / io / util / SegmentedFile . java 
 + + + b / src / java / org / apache / cassandra / io / util / SegmentedFile . java 
 @ @ - 127 , 7 + 127 , 7 @ @ public abstract class SegmentedFile extends SharedCloseableImpl 
 
 public void dropPageCache ( long before ) 
 { 
 - CLibrary . trySkipCache ( channel . getFileDescriptor ( ) , 0 , before ) ; 
 + CLibrary . trySkipCache ( channel . getFileDescriptor ( ) , 0 , before , path ( ) ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / utils / CLibrary . java b / src / java / org / apache / cassandra / utils / CLibrary . java 
 index fed314b . . 645a4ce 100644 
 - - - a / src / java / org / apache / cassandra / utils / CLibrary . java 
 + + + b / src / java / org / apache / cassandra / utils / CLibrary . java 
 @ @ - 19 , 17 + 19 , 18 @ @ package org . apache . cassandra . utils ; 
 
 import java . io . FileDescriptor ; 
 import java . io . IOException ; 
 - import java . io . RandomAccessFile ; 
 import java . lang . reflect . Field ; 
 import java . nio . channels . FileChannel ; 
 import java . nio . file . Paths ; 
 import java . nio . file . StandardOpenOption ; 
 + import java . util . concurrent . TimeUnit ; 
 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import com . sun . jna . LastErrorException ; 
 import com . sun . jna . Native ; 
 + import com . sun . jna . Pointer ; 
 
 public final class CLibrary 
 { 
 @ @ - 86 , 6 + 87 , 7 @ @ public final class CLibrary 
 private static native int open ( String path , int flags ) throws LastErrorException ; 
 private static native int fsync ( int fd ) throws LastErrorException ; 
 private static native int close ( int fd ) throws LastErrorException ; 
 + private static native Pointer strerror ( int errnum ) throws LastErrorException ; 
 
 private static int errno ( RuntimeException e ) 
 { 
 @ @ - 146 , 24 + 148 , 24 @ @ public final class CLibrary 
 
 public static void trySkipCache ( String path , long offset , long len ) 
 { 
 - trySkipCache ( getfd ( path ) , offset , len ) ; 
 + trySkipCache ( getfd ( path ) , offset , len , path ) ; 
 } 
 
 - public static void trySkipCache ( int fd , long offset , long len ) 
 + public static void trySkipCache ( int fd , long offset , long len , String path ) 
 { 
 if ( len = = 0 ) 
 - trySkipCache ( fd , 0 , 0 ) ; 
 + trySkipCache ( fd , 0 , 0 , path ) ; 
 
 while ( len > 0 ) 
 { 
 int sublen = ( int ) Math . min ( Integer . MAX _ VALUE , len ) ; 
 - trySkipCache ( fd , offset , sublen ) ; 
 + trySkipCache ( fd , offset , sublen , path ) ; 
 len - = sublen ; 
 offset - = sublen ; 
 } 
 } 
 
 - public static void trySkipCache ( int fd , long offset , int len ) 
 + public static void trySkipCache ( int fd , long offset , int len , String path ) 
 { 
 if ( fd < 0 ) 
 return ; 
 @ @ - 172 , 7 + 174 , 15 @ @ public final class CLibrary 
 { 
 if ( System . getProperty ( " os . name " ) . toLowerCase ( ) . contains ( " linux " ) ) 
 { 
 - posix _ fadvise ( fd , offset , len , POSIX _ FADV _ DONTNEED ) ; 
 + int result = posix _ fadvise ( fd , offset , len , POSIX _ FADV _ DONTNEED ) ; 
 + if ( result ! = 0 ) 
 + NoSpamLogger . log ( 
 + logger , 
 + NoSpamLogger . Level . WARN , 
 + 10 , 
 + TimeUnit . MINUTES , 
 + " Failed trySkipCache on file : { } Error : " + strerror ( result ) . getString ( 0 ) , 
 + path ) ; 
 } 
 } 
 catch ( UnsatisfiedLinkError e ) 
 diff - - git a / src / java / org / apache / cassandra / utils / NoSpamLogger . java b / src / java / org / apache / cassandra / utils / NoSpamLogger . java 
 index 3cc8b5e . . 84bfa68 100644 
 - - - a / src / java / org / apache / cassandra / utils / NoSpamLogger . java 
 + + + b / src / java / org / apache / cassandra / utils / NoSpamLogger . java 
 @ @ - 81 , 9 + 81 , 9 @ @ public class NoSpamLogger 
 return nowNanos - expected > = minIntervalNanos & & compareAndSet ( expected , nowNanos ) ; 
 } 
 
 - public void log ( Level l , long nowNanos , Object . . . objects ) 
 + public boolean log ( Level l , long nowNanos , Object . . . objects ) 
 { 
 - if ( ! shouldLog ( nowNanos ) ) return ; 
 + if ( ! shouldLog ( nowNanos ) ) return false ; 
 
 switch ( l ) 
 { 
 @ @ - 99 , 36 + 99 , 37 @ @ public class NoSpamLogger 
 default : 
 throw new AssertionError ( ) ; 
 } 
 + return true ; 
 } 
 
 - public void info ( long nowNanos , Object . . . objects ) 
 + public boolean info ( long nowNanos , Object . . . objects ) 
 { 
 - NoSpamLogStatement . this . log ( Level . INFO , nowNanos , objects ) ; 
 + return NoSpamLogStatement . this . log ( Level . INFO , nowNanos , objects ) ; 
 } 
 
 - public void info ( Object . . . objects ) 
 + public boolean info ( Object . . . objects ) 
 { 
 - NoSpamLogStatement . this . info ( CLOCK . nanoTime ( ) , objects ) ; 
 + return NoSpamLogStatement . this . info ( CLOCK . nanoTime ( ) , objects ) ; 
 } 
 
 - public void warn ( long nowNanos , Object . . . objects ) 
 + public boolean warn ( long nowNanos , Object . . . objects ) 
 { 
 - NoSpamLogStatement . this . log ( Level . WARN , nowNanos , objects ) ; 
 + return NoSpamLogStatement . this . log ( Level . WARN , nowNanos , objects ) ; 
 } 
 
 - public void warn ( Object . . . objects ) 
 + public boolean warn ( Object . . . objects ) 
 { 
 - NoSpamLogStatement . this . warn ( CLOCK . nanoTime ( ) , objects ) ; 
 + return NoSpamLogStatement . this . warn ( CLOCK . nanoTime ( ) , objects ) ; 
 } 
 
 - public void error ( long nowNanos , Object . . . objects ) 
 + public boolean error ( long nowNanos , Object . . . objects ) 
 { 
 - NoSpamLogStatement . this . log ( Level . ERROR , nowNanos , objects ) ; 
 + return NoSpamLogStatement . this . log ( Level . ERROR , nowNanos , objects ) ; 
 } 
 
 - public void error ( Object . . . objects ) 
 + public boolean error ( Object . . . objects ) 
 { 
 - NoSpamLogStatement . this . error ( CLOCK . nanoTime ( ) , objects ) ; 
 + return NoSpamLogStatement . this . error ( CLOCK . nanoTime ( ) , objects ) ; 
 } 
 } 
 
 @ @ - 153 , 16 + 154 , 16 @ @ public class NoSpamLogger 
 return wrapped ; 
 } 
 
 - public static void log ( Logger logger , Level level , long minInterval , TimeUnit unit , String message , Object . . . objects ) 
 + public static boolean log ( Logger logger , Level level , long minInterval , TimeUnit unit , String message , Object . . . objects ) 
 { 
 - log ( logger , level , minInterval , unit , CLOCK . nanoTime ( ) , message , objects ) ; 
 + return log ( logger , level , minInterval , unit , CLOCK . nanoTime ( ) , message , objects ) ; 
 } 
 
 - public static void log ( Logger logger , Level level , long minInterval , TimeUnit unit , long nowNanos , String message , Object . . . objects ) 
 + public static boolean log ( Logger logger , Level level , long minInterval , TimeUnit unit , long nowNanos , String message , Object . . . objects ) 
 { 
 NoSpamLogger wrapped = getLogger ( logger , minInterval , unit ) ; 
 NoSpamLogStatement statement = wrapped . getStatement ( message ) ; 
 - statement . log ( level , nowNanos , objects ) ; 
 + return statement . log ( level , nowNanos , objects ) ; 
 } 
 
 public static NoSpamLogStatement getStatement ( Logger logger , String message , long minInterval , TimeUnit unit ) 
 @ @ - 181 , 38 + 182 , 38 @ @ public class NoSpamLogger 
 minIntervalNanos = timeUnit . toNanos ( minInterval ) ; 
 } 
 
 - public void info ( long nowNanos , String s , Object . . . objects ) 
 + public boolean info ( long nowNanos , String s , Object . . . objects ) 
 { 
 - NoSpamLogger . this . log ( Level . INFO , s , nowNanos , objects ) ; 
 + return NoSpamLogger . this . log ( Level . INFO , s , nowNanos , objects ) ; 
 } 
 
 - public void info ( String s , Object . . . objects ) 
 + public boolean info ( String s , Object . . . objects ) 
 { 
 - NoSpamLogger . this . info ( CLOCK . nanoTime ( ) , s , objects ) ; 
 + return NoSpamLogger . this . info ( CLOCK . nanoTime ( ) , s , objects ) ; 
 } 
 
 - public void warn ( long nowNanos , String s , Object . . . objects ) 
 + public boolean warn ( long nowNanos , String s , Object . . . objects ) 
 { 
 - NoSpamLogger . this . log ( Level . WARN , s , nowNanos , objects ) ; 
 + return NoSpamLogger . this . log ( Level . WARN , s , nowNanos , objects ) ; 
 } 
 
 - public void warn ( String s , Object . . . objects ) 
 + public boolean warn ( String s , Object . . . objects ) 
 { 
 - NoSpamLogger . this . warn ( CLOCK . nanoTime ( ) , s , objects ) ; 
 + return NoSpamLogger . this . warn ( CLOCK . nanoTime ( ) , s , objects ) ; 
 } 
 
 - public void error ( long nowNanos , String s , Object . . . objects ) 
 + public boolean error ( long nowNanos , String s , Object . . . objects ) 
 { 
 - NoSpamLogger . this . log ( Level . ERROR , s , nowNanos , objects ) ; 
 + return NoSpamLogger . this . log ( Level . ERROR , s , nowNanos , objects ) ; 
 } 
 
 - public void error ( String s , Object . . . objects ) 
 + public boolean error ( String s , Object . . . objects ) 
 { 
 - NoSpamLogger . this . error ( CLOCK . nanoTime ( ) , s , objects ) ; 
 + return NoSpamLogger . this . error ( CLOCK . nanoTime ( ) , s , objects ) ; 
 } 
 
 - public void log ( Level l , String s , long nowNanos , Object . . . objects ) { 
 - NoSpamLogger . this . getStatement ( s , minIntervalNanos ) . log ( l , nowNanos , objects ) ; 
 + public boolean log ( Level l , String s , long nowNanos , Object . . . objects ) { 
 + return NoSpamLogger . this . getStatement ( s , minIntervalNanos ) . log ( l , nowNanos , objects ) ; 
 } 
 
 public NoSpamLogStatement getStatement ( String s ) 
 diff - - git a / test / unit / org / apache / cassandra / utils / CLibraryTest . java b / test / unit / org / apache / cassandra / utils / CLibraryTest . java 
 index be52bed . . 774ddac 100644 
 - - - a / test / unit / org / apache / cassandra / utils / CLibraryTest . java 
 + + + b / test / unit / org / apache / cassandra / utils / CLibraryTest . java 
 @ @ - 32 , 6 + 32 , 6 @ @ public class CLibraryTest 
 File file = FileUtils . createTempFile ( " testSkipCache " , " 1 " ) ; 
 
 int fd = CLibrary . getfd ( file . getPath ( ) ) ; 
 - CLibrary . trySkipCache ( fd , 0 , 0 ) ; 
 + CLibrary . trySkipCache ( fd , 0 , 0 , file . getPath ( ) ) ; 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java b / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java 
 index 0a5a005 . . afe4968 100644 
 - - - a / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java 
 + + + b / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java 
 @ @ - 113 , 17 + 113 , 17 @ @ public class NoSpamLoggerTest 
 setUp ( ) ; 
 now = 5 ; 
 
 - NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , statement , param ) ; 
 + assertTrue ( NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , statement , param ) ) ; 
 
 assertEquals ( 1 , logged . get ( l ) . size ( ) ) ; 
 
 - NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , statement , param ) ; 
 + assertFalse ( NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , statement , param ) ) ; 
 
 assertEquals ( 1 , logged . get ( l ) . size ( ) ) ; 
 
 now + = 5 ; 
 
 - NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , statement , param ) ; 
 + assertTrue ( NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , statement , param ) ) ; 
 
 assertEquals ( 2 , logged . get ( l ) . size ( ) ) ; 
 } 
 @ @ - 141 , 20 + 141 , 20 @ @ public class NoSpamLoggerTest 
 now = 5 ; 
 NoSpamLogger logger = NoSpamLogger . getLogger ( mock , 5 , TimeUnit . NANOSECONDS ) ; 
 
 - logger . info ( statement , param ) ; 
 - logger . info ( statement , param ) ; 
 - logger . warn ( statement , param ) ; 
 - logger . error ( statement , param ) ; 
 + assertTrue ( logger . info ( statement , param ) ) ; 
 + assertFalse ( logger . info ( statement , param ) ) ; 
 + assertFalse ( logger . warn ( statement , param ) ) ; 
 + assertFalse ( logger . error ( statement , param ) ) ; 
 
 assertLoggedSizes ( 1 , 0 , 0 ) ; 
 
 NoSpamLogStatement statement = logger . getStatement ( " swizzle2 { } " , 10 , TimeUnit . NANOSECONDS ) ; 
 - statement . warn ( param ) ; 
 + assertFalse ( statement . warn ( param ) ) ; 
 / / now is 5 so it won ' t log 
 assertLoggedSizes ( 1 , 0 , 0 ) ; 
 
 now = 10 ; 
 - statement . warn ( param ) ; 
 + assertTrue ( statement . warn ( param ) ) ; 
 assertLoggedSizes ( 1 , 1 , 0 ) ; 
 
 } 
 @ @ - 166 , 10 + 166 , 10 @ @ public class NoSpamLoggerTest 
 
 now = 5 ; 
 
 - nospam . info ( statement , param ) ; 
 - nospam . info ( statement , param ) ; 
 - nospam . warn ( statement , param ) ; 
 - nospam . error ( statement , param ) ; 
 + assertTrue ( nospam . info ( statement , param ) ) ; 
 + assertFalse ( nospam . info ( statement , param ) ) ; 
 + assertFalse ( nospam . warn ( statement , param ) ) ; 
 + assertFalse ( nospam . error ( statement , param ) ) ; 
 
 assertLoggedSizes ( 1 , 0 , 0 ) ; 
 } 
 @ @ - 193 , 51 + 193 , 51 @ @ public class NoSpamLoggerTest 
 { 
 now = 5 ; 
 
 - NoSpamLogger . log ( mock , Level . INFO , 5 , TimeUnit . NANOSECONDS , statement , param ) ; 
 + assertTrue ( NoSpamLogger . log ( mock , Level . INFO , 5 , TimeUnit . NANOSECONDS , statement , param ) ) ; 
 checkMock ( Level . INFO ) ; 
 
 now = 10 ; 
 
 - NoSpamLogger . log ( mock , Level . WARN , 5 , TimeUnit . NANOSECONDS , statement , param ) ; 
 + assertTrue ( NoSpamLogger . log ( mock , Level . WARN , 5 , TimeUnit . NANOSECONDS , statement , param ) ) ; 
 checkMock ( Level . WARN ) ; 
 
 now = 15 ; 
 
 - NoSpamLogger . log ( mock , Level . ERROR , 5 , TimeUnit . NANOSECONDS , statement , param ) ; 
 + assertTrue ( NoSpamLogger . log ( mock , Level . ERROR , 5 , TimeUnit . NANOSECONDS , statement , param ) ) ; 
 checkMock ( Level . ERROR ) ; 
 
 now = 20 ; 
 
 NoSpamLogger logger = NoSpamLogger . getLogger ( mock , 5 , TimeUnit . NANOSECONDS ) ; 
 
 - logger . info ( statement , param ) ; 
 + assertTrue ( logger . info ( statement , param ) ) ; 
 checkMock ( Level . INFO ) ; 
 
 now = 25 ; 
 
 - logger . warn ( statement , param ) ; 
 + assertTrue ( logger . warn ( statement , param ) ) ; 
 checkMock ( Level . WARN ) ; 
 
 now = 30 ; 
 
 - logger . error ( statement , param ) ; 
 + assertTrue ( logger . error ( statement , param ) ) ; 
 checkMock ( Level . ERROR ) ; 
 
 NoSpamLogger . NoSpamLogStatement nospamStatement = logger . getStatement ( statement ) ; 
 
 now = 35 ; 
 
 - nospamStatement . info ( param ) ; 
 + assertTrue ( nospamStatement . info ( param ) ) ; 
 checkMock ( Level . INFO ) ; 
 
 now = 40 ; 
 
 - nospamStatement . warn ( param ) ; 
 + assertTrue ( nospamStatement . warn ( param ) ) ; 
 checkMock ( Level . WARN ) ; 
 
 now = 45 ; 
 
 - nospamStatement . error ( param ) ; 
 + assertTrue ( nospamStatement . error ( param ) ) ; 
 checkMock ( Level . ERROR ) ; 
 } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
