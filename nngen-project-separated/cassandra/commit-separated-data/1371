BLEU SCORE: 0.0410424993119494

TEST MSG: Fix sstablerepairedset
GENERATED MSG: Try harder to close files after compaction

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 930fb5a . . c866905 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> 3 . 0 . 0 - beta2 <nl> * Validate gc _ grace _ seconds for batchlog writes and MVs ( CASSANDRA - 9917 ) <nl> + * Fix sstablerepairedset ( CASSANDRA - 10132 ) <nl> <nl> <nl> 3 . 0 . 0 - beta1 <nl> diff - - git a / src / java / org / apache / cassandra / tools / SSTableRepairedAtSetter . java b / src / java / org / apache / cassandra / tools / SSTableRepairedAtSetter . java <nl> index 2ddb632 . . 36658f6 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / SSTableRepairedAtSetter . java <nl> + + + b / src / java / org / apache / cassandra / tools / SSTableRepairedAtSetter . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . nio . file . attribute . FileTime ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> <nl> + import org . apache . cassandra . config . Config ; <nl> import org . apache . cassandra . io . sstable . Component ; <nl> import org . apache . cassandra . io . sstable . Descriptor ; <nl> import org . apache . cassandra . service . ActiveRepairService ; <nl> @ @ - 47 , 6 + 48 , 9 @ @ public class SSTableRepairedAtSetter <nl> * / <nl> public static void main ( final String [ ] args ) throws IOException <nl> { <nl> + / / Necessary since BufferPool used in RandomAccessReader needs to access DatabaseDescriptor <nl> + Config . setClientMode ( true ) ; <nl> + <nl> PrintStream out = System . out ; <nl> if ( args . length = = 0 ) <nl> {
NEAREST DIFF (one line): diff - - git a / tools / stress / bin / stress b / tools / stress / bin / stress <nl> index eb1ec45 . . 4e60686 100755 <nl> - - - a / tools / stress / bin / stress <nl> + + + b / tools / stress / bin / stress <nl> @ @ - 48 , 4 + 48 , 4 @ @ if [ " x $ JAVA " = " x " ] ; then <nl> exit 1 <nl> fi <nl> <nl> - $ JAVA - server - cp $ CLASSPATH org . apache . cassandra . contrib . stress . Stress $ @ <nl> + $ JAVA - server - cp $ CLASSPATH org . apache . cassandra . stress . Stress $ @ <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CounterAdder . java b / tools / stress / src / org / apache / cassandra / stress / operations / CounterAdder . java <nl> index 347686f . . 89fe857 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CounterAdder . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CounterAdder . java <nl> @ @ - 62 , 7 + 62 , 7 @ @ public class CounterAdder extends Operation <nl> } <nl> <nl> String rawKey = String . format ( format , index ) ; <nl> - Map < ByteBuffer , Map < String , List < CounterMutation > > > record = new HashMap < ByteBuffer , Map < String , List < CounterMutation > > > ( ) ; <nl> + Map < ByteBuffer , Map < String , List < Mutation > > > record = new HashMap < ByteBuffer , Map < String , List < Mutation > > > ( ) ; <nl> <nl> record . put ( ByteBufferUtil . bytes ( rawKey ) , session . getColumnFamilyType ( ) = = ColumnFamilyType . Super <nl> ? getSuperColumnsMutationMap ( superColumns ) <nl> @ @ - 80 , 7 + 80 , 7 @ @ public class CounterAdder extends Operation <nl> <nl> try <nl> { <nl> - client . batch _ add ( record , session . getConsistencyLevel ( ) ) ; <nl> + client . batch _ mutate ( record , session . getConsistencyLevel ( ) ) ; <nl> success = true ; <nl> } <nl> catch ( Exception e ) <nl> @ @ - 104 , 15 + 104 , 15 @ @ public class CounterAdder extends Operation <nl> session . latency . getAndAdd ( System . currentTimeMillis ( ) - start ) ; <nl> } <nl> <nl> - private Map < String , List < CounterMutation > > getSuperColumnsMutationMap ( List < CounterSuperColumn > superColumns ) <nl> + private Map < String , List < Mutation > > getSuperColumnsMutationMap ( List < CounterSuperColumn > superColumns ) <nl> { <nl> - List < CounterMutation > mutations = new ArrayList < CounterMutation > ( ) ; <nl> - Map < String , List < CounterMutation > > mutationMap = new HashMap < String , List < CounterMutation > > ( ) ; <nl> + List < Mutation > mutations = new ArrayList < Mutation > ( ) ; <nl> + Map < String , List < Mutation > > mutationMap = new HashMap < String , List < Mutation > > ( ) ; <nl> <nl> for ( CounterSuperColumn s : superColumns ) <nl> { <nl> Counter counter = new Counter ( ) . setSuper _ column ( s ) ; <nl> - mutations . add ( new CounterMutation ( ) . setCounter ( counter ) ) ; <nl> + mutations . add ( new Mutation ( ) . setCounter ( counter ) ) ; <nl> } <nl> <nl> mutationMap . put ( " SuperCounter1 " , mutations ) ; <nl> @ @ - 120 , 15 + 120 , 15 @ @ public class CounterAdder extends Operation <nl> return mutationMap ; <nl> } <nl> <nl> - private Map < String , List < CounterMutation > > getColumnsMutationMap ( List < CounterColumn > columns ) <nl> + private Map < String , List < Mutation > > getColumnsMutationMap ( List < CounterColumn > columns ) <nl> { <nl> - List < CounterMutation > mutations = new ArrayList < CounterMutation > ( ) ; <nl> - Map < String , List < CounterMutation > > mutationMap = new HashMap < String , List < CounterMutation > > ( ) ; <nl> + List < Mutation > mutations = new ArrayList < Mutation > ( ) ; <nl> + Map < String , List < Mutation > > mutationMap = new HashMap < String , List < Mutation > > ( ) ; <nl> <nl> for ( CounterColumn c : columns ) <nl> { <nl> Counter counter = new Counter ( ) . setColumn ( c ) ; <nl> - mutations . add ( new CounterMutation ( ) . setCounter ( counter ) ) ; <nl> + mutations . add ( new Mutation ( ) . setCounter ( counter ) ) ; <nl> } <nl> <nl> mutationMap . put ( " Counter1 " , mutations ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 930fb5a . . c866905 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 3 . 0 . 0 - beta2 
 * Validate gc _ grace _ seconds for batchlog writes and MVs ( CASSANDRA - 9917 ) 
 + * Fix sstablerepairedset ( CASSANDRA - 10132 ) 
 
 
 3 . 0 . 0 - beta1 
 diff - - git a / src / java / org / apache / cassandra / tools / SSTableRepairedAtSetter . java b / src / java / org / apache / cassandra / tools / SSTableRepairedAtSetter . java 
 index 2ddb632 . . 36658f6 100644 
 - - - a / src / java / org / apache / cassandra / tools / SSTableRepairedAtSetter . java 
 + + + b / src / java / org / apache / cassandra / tools / SSTableRepairedAtSetter . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . nio . file . attribute . FileTime ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 
 + import org . apache . cassandra . config . Config ; 
 import org . apache . cassandra . io . sstable . Component ; 
 import org . apache . cassandra . io . sstable . Descriptor ; 
 import org . apache . cassandra . service . ActiveRepairService ; 
 @ @ - 47 , 6 + 48 , 9 @ @ public class SSTableRepairedAtSetter 
 * / 
 public static void main ( final String [ ] args ) throws IOException 
 { 
 + / / Necessary since BufferPool used in RandomAccessReader needs to access DatabaseDescriptor 
 + Config . setClientMode ( true ) ; 
 + 
 PrintStream out = System . out ; 
 if ( args . length = = 0 ) 
 {

NEAREST DIFF:
diff - - git a / tools / stress / bin / stress b / tools / stress / bin / stress 
 index eb1ec45 . . 4e60686 100755 
 - - - a / tools / stress / bin / stress 
 + + + b / tools / stress / bin / stress 
 @ @ - 48 , 4 + 48 , 4 @ @ if [ " x $ JAVA " = " x " ] ; then 
 exit 1 
 fi 
 
 - $ JAVA - server - cp $ CLASSPATH org . apache . cassandra . contrib . stress . Stress $ @ 
 + $ JAVA - server - cp $ CLASSPATH org . apache . cassandra . stress . Stress $ @ 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CounterAdder . java b / tools / stress / src / org / apache / cassandra / stress / operations / CounterAdder . java 
 index 347686f . . 89fe857 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CounterAdder . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CounterAdder . java 
 @ @ - 62 , 7 + 62 , 7 @ @ public class CounterAdder extends Operation 
 } 
 
 String rawKey = String . format ( format , index ) ; 
 - Map < ByteBuffer , Map < String , List < CounterMutation > > > record = new HashMap < ByteBuffer , Map < String , List < CounterMutation > > > ( ) ; 
 + Map < ByteBuffer , Map < String , List < Mutation > > > record = new HashMap < ByteBuffer , Map < String , List < Mutation > > > ( ) ; 
 
 record . put ( ByteBufferUtil . bytes ( rawKey ) , session . getColumnFamilyType ( ) = = ColumnFamilyType . Super 
 ? getSuperColumnsMutationMap ( superColumns ) 
 @ @ - 80 , 7 + 80 , 7 @ @ public class CounterAdder extends Operation 
 
 try 
 { 
 - client . batch _ add ( record , session . getConsistencyLevel ( ) ) ; 
 + client . batch _ mutate ( record , session . getConsistencyLevel ( ) ) ; 
 success = true ; 
 } 
 catch ( Exception e ) 
 @ @ - 104 , 15 + 104 , 15 @ @ public class CounterAdder extends Operation 
 session . latency . getAndAdd ( System . currentTimeMillis ( ) - start ) ; 
 } 
 
 - private Map < String , List < CounterMutation > > getSuperColumnsMutationMap ( List < CounterSuperColumn > superColumns ) 
 + private Map < String , List < Mutation > > getSuperColumnsMutationMap ( List < CounterSuperColumn > superColumns ) 
 { 
 - List < CounterMutation > mutations = new ArrayList < CounterMutation > ( ) ; 
 - Map < String , List < CounterMutation > > mutationMap = new HashMap < String , List < CounterMutation > > ( ) ; 
 + List < Mutation > mutations = new ArrayList < Mutation > ( ) ; 
 + Map < String , List < Mutation > > mutationMap = new HashMap < String , List < Mutation > > ( ) ; 
 
 for ( CounterSuperColumn s : superColumns ) 
 { 
 Counter counter = new Counter ( ) . setSuper _ column ( s ) ; 
 - mutations . add ( new CounterMutation ( ) . setCounter ( counter ) ) ; 
 + mutations . add ( new Mutation ( ) . setCounter ( counter ) ) ; 
 } 
 
 mutationMap . put ( " SuperCounter1 " , mutations ) ; 
 @ @ - 120 , 15 + 120 , 15 @ @ public class CounterAdder extends Operation 
 return mutationMap ; 
 } 
 
 - private Map < String , List < CounterMutation > > getColumnsMutationMap ( List < CounterColumn > columns ) 
 + private Map < String , List < Mutation > > getColumnsMutationMap ( List < CounterColumn > columns ) 
 { 
 - List < CounterMutation > mutations = new ArrayList < CounterMutation > ( ) ; 
 - Map < String , List < CounterMutation > > mutationMap = new HashMap < String , List < CounterMutation > > ( ) ; 
 + List < Mutation > mutations = new ArrayList < Mutation > ( ) ; 
 + Map < String , List < Mutation > > mutationMap = new HashMap < String , List < Mutation > > ( ) ; 
 
 for ( CounterColumn c : columns ) 
 { 
 Counter counter = new Counter ( ) . setColumn ( c ) ; 
 - mutations . add ( new CounterMutation ( ) . setCounter ( counter ) ) ; 
 + mutations . add ( new Mutation ( ) . setCounter ( counter ) ) ; 
 } 
 
 mutationMap . put ( " Counter1 " , mutations ) ;
