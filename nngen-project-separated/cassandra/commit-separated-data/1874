BLEU SCORE: 0.04767707020457096

TEST MSG: Don ' t use the shared ref in sstableloader
GENERATED MSG: Plug holes in resource release when wiring up StreamSession

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e3e19cf . . 5113e07 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 3 <nl> + * Don ' t use the shared ref in sstableloader ( CASSANDRA - 8704 ) <nl> * Purge internal prepared statements if related tables or <nl> keyspaces are dropped ( CASSANDRA - 8693 ) <nl> * ( cqlsh ) Handle unicode BOM at start of files ( CASSANDRA - 8638 ) <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java b / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java <nl> index 1cab8c7 . . 06f71d8 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java <nl> @ @ - 131 , 8 + 131 , 10 @ @ public class SSTableLoader implements StreamEventHandler <nl> <nl> List < Pair < Long , Long > > sstableSections = sstable . getPositionsForRanges ( tokenRanges ) ; <nl> long estimatedKeys = sstable . estimatedKeysForRanges ( tokenRanges ) ; <nl> - <nl> - StreamSession . SSTableStreamingSections details = new StreamSession . SSTableStreamingSections ( sstable , sstable . sharedRef ( ) , sstableSections , estimatedKeys , ActiveRepairService . UNREPAIRED _ SSTABLE ) ; <nl> + Ref ref = sstable . tryRef ( ) ; <nl> + if ( ref = = null ) <nl> + throw new IllegalStateException ( " Could not acquire ref for " + sstable ) ; <nl> + StreamSession . SSTableStreamingSections details = new StreamSession . SSTableStreamingSections ( sstable , ref , sstableSections , estimatedKeys , ActiveRepairService . UNREPAIRED _ SSTABLE ) ; <nl> streamingDetails . put ( endpoint , details ) ; <nl> } <nl> <nl> @ @ - 178 , 34 + 180 , 39 @ @ public class SSTableLoader implements StreamEventHandler <nl> continue ; <nl> <nl> List < StreamSession . SSTableStreamingSections > endpointDetails = new LinkedList < > ( ) ; <nl> - List < Ref > refs = new ArrayList < > ( ) ; <nl> - try <nl> - { <nl> - / / transferSSTables assumes references have been acquired <nl> - for ( StreamSession . SSTableStreamingSections details : streamingDetails . get ( remote ) ) <nl> - { <nl> - Ref ref = details . sstable . tryRef ( ) ; <nl> - if ( ref = = null ) <nl> - throw new IllegalStateException ( ) ; <nl> - <nl> - refs . add ( ref ) ; <nl> - endpointDetails . add ( details ) ; <nl> - } <nl> <nl> - plan . transferFiles ( remote , endpointDetails ) ; <nl> - } <nl> - finally <nl> + / / references are acquired when constructing the SSTableStreamingSections above <nl> + for ( StreamSession . SSTableStreamingSections details : streamingDetails . get ( remote ) ) <nl> { <nl> - for ( Ref ref : refs ) <nl> - ref . release ( ) ; <nl> + endpointDetails . add ( details ) ; <nl> } <nl> + <nl> + plan . transferFiles ( remote , endpointDetails ) ; <nl> } <nl> plan . listeners ( this , listeners ) ; <nl> return plan . execute ( ) ; <nl> } <nl> <nl> - public void onSuccess ( StreamState finalState ) { } <nl> - public void onFailure ( Throwable t ) { } <nl> + public void onSuccess ( StreamState finalState ) <nl> + { <nl> + releaseReferences ( ) ; <nl> + } <nl> + public void onFailure ( Throwable t ) <nl> + { <nl> + releaseReferences ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * releases the shared reference for all sstables , we acquire this when opening the sstable <nl> + * / <nl> + private void releaseReferences ( ) <nl> + { <nl> + for ( SSTableReader sstable : sstables ) <nl> + { <nl> + sstable . sharedRef ( ) . release ( ) ; <nl> + assert sstable . sharedRef ( ) . globalCount ( ) = = 0 ; <nl> + } <nl> + } <nl> <nl> public void handleStreamEvent ( StreamEvent event ) <nl> {
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e3e19cf . . 5113e07 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 3 
 + * Don ' t use the shared ref in sstableloader ( CASSANDRA - 8704 ) 
 * Purge internal prepared statements if related tables or 
 keyspaces are dropped ( CASSANDRA - 8693 ) 
 * ( cqlsh ) Handle unicode BOM at start of files ( CASSANDRA - 8638 ) 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java b / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java 
 index 1cab8c7 . . 06f71d8 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java 
 @ @ - 131 , 8 + 131 , 10 @ @ public class SSTableLoader implements StreamEventHandler 
 
 List < Pair < Long , Long > > sstableSections = sstable . getPositionsForRanges ( tokenRanges ) ; 
 long estimatedKeys = sstable . estimatedKeysForRanges ( tokenRanges ) ; 
 - 
 - StreamSession . SSTableStreamingSections details = new StreamSession . SSTableStreamingSections ( sstable , sstable . sharedRef ( ) , sstableSections , estimatedKeys , ActiveRepairService . UNREPAIRED _ SSTABLE ) ; 
 + Ref ref = sstable . tryRef ( ) ; 
 + if ( ref = = null ) 
 + throw new IllegalStateException ( " Could not acquire ref for " + sstable ) ; 
 + StreamSession . SSTableStreamingSections details = new StreamSession . SSTableStreamingSections ( sstable , ref , sstableSections , estimatedKeys , ActiveRepairService . UNREPAIRED _ SSTABLE ) ; 
 streamingDetails . put ( endpoint , details ) ; 
 } 
 
 @ @ - 178 , 34 + 180 , 39 @ @ public class SSTableLoader implements StreamEventHandler 
 continue ; 
 
 List < StreamSession . SSTableStreamingSections > endpointDetails = new LinkedList < > ( ) ; 
 - List < Ref > refs = new ArrayList < > ( ) ; 
 - try 
 - { 
 - / / transferSSTables assumes references have been acquired 
 - for ( StreamSession . SSTableStreamingSections details : streamingDetails . get ( remote ) ) 
 - { 
 - Ref ref = details . sstable . tryRef ( ) ; 
 - if ( ref = = null ) 
 - throw new IllegalStateException ( ) ; 
 - 
 - refs . add ( ref ) ; 
 - endpointDetails . add ( details ) ; 
 - } 
 
 - plan . transferFiles ( remote , endpointDetails ) ; 
 - } 
 - finally 
 + / / references are acquired when constructing the SSTableStreamingSections above 
 + for ( StreamSession . SSTableStreamingSections details : streamingDetails . get ( remote ) ) 
 { 
 - for ( Ref ref : refs ) 
 - ref . release ( ) ; 
 + endpointDetails . add ( details ) ; 
 } 
 + 
 + plan . transferFiles ( remote , endpointDetails ) ; 
 } 
 plan . listeners ( this , listeners ) ; 
 return plan . execute ( ) ; 
 } 
 
 - public void onSuccess ( StreamState finalState ) { } 
 - public void onFailure ( Throwable t ) { } 
 + public void onSuccess ( StreamState finalState ) 
 + { 
 + releaseReferences ( ) ; 
 + } 
 + public void onFailure ( Throwable t ) 
 + { 
 + releaseReferences ( ) ; 
 + } 
 + 
 + / * * 
 + * releases the shared reference for all sstables , we acquire this when opening the sstable 
 + * / 
 + private void releaseReferences ( ) 
 + { 
 + for ( SSTableReader sstable : sstables ) 
 + { 
 + sstable . sharedRef ( ) . release ( ) ; 
 + assert sstable . sharedRef ( ) . globalCount ( ) = = 0 ; 
 + } 
 + } 
 
 public void handleStreamEvent ( StreamEvent event ) 
 {

NEAREST DIFF:
ELIMINATEDSENTENCE
