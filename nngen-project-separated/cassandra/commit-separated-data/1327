BLEU SCORE: 0.07809849842300641

TEST MSG: Make cqlsh handle CREATE KEYSPACE timeouts properly
GENERATED MSG: cqlsh : handle schema mismatch on startup

TEST DIFF (one line): diff - - git a / bin / cqlsh b / bin / cqlsh <nl> index 084d586 . . 59496ce 100755 <nl> - - - a / bin / cqlsh <nl> + + + b / bin / cqlsh <nl> @ @ - 634 , 20 + 634 , 9 @ @ class Shell ( cmd . Cmd ) : <nl> self . display _ time _ format = display _ time _ format <nl> self . display _ float _ precision = display _ float _ precision <nl> <nl> - # Workaround for CASSANDRA - 8521 until PYTHON - 205 is resolved . <nl> - # If there is no schema metadata present ( due to a schema mismatch ) , <nl> - # get rid of the code that checks for a schema mismatch and force <nl> - # the schema metadata to be built . <nl> + # If there is no schema metadata present ( due to a schema mismatch ) , force schema refresh <nl> if not self . conn . metadata . keyspaces : <nl> - self . printerr ( " Warning : schema version mismatch detected ; check the schema versions of your " <nl> - " nodes in system . local and system . peers . " ) <nl> - original _ method = self . conn . control _ connection . _ get _ schema _ mismatches <nl> - try : <nl> - self . conn . control _ connection . _ get _ schema _ mismatches = lambda * args , * * kwargs : None <nl> - future = self . conn . submit _ schema _ refresh ( ) <nl> - future . result ( timeout = 10 ) <nl> - finally : <nl> - self . conn . control _ connection . _ get _ schema _ mismatches = original _ method <nl> + self . refresh _ schema _ metadata _ best _ effort ( ) <nl> <nl> self . session . default _ timeout = client _ timeout <nl> self . session . row _ factory = ordered _ dict _ factory <nl> @ @ - 690 , 6 + 679 , 15 @ @ class Shell ( cmd . Cmd ) : <nl> self . statement _ error = False <nl> self . single _ statement = single _ statement <nl> <nl> + def refresh _ schema _ metadata _ best _ effort ( self ) : <nl> + try : <nl> + self . conn . refresh _ schema _ metadata ( 5 ) # will throw exception if there is a schema mismatch <nl> + except Exception : <nl> + self . printerr ( " Warning : schema version mismatch detected , which might be caused by DOWN nodes ; if " <nl> + " this is not the case , check the schema versions of your nodes in system . local and " <nl> + " system . peers . " ) <nl> + self . conn . refresh _ schema _ metadata ( 0 ) <nl> + <nl> def set _ expanded _ cql _ version ( self , ver ) : <nl> ver , vertuple = full _ cql _ version ( ver ) <nl> self . cql _ version = ver <nl> @ @ - 1092 , 6 + 1090 , 10 @ @ class Shell ( cmd . Cmd ) : <nl> try : <nl> rows = self . session . execute ( statement , trace = self . tracing _ enabled ) <nl> break <nl> + except cassandra . OperationTimedOut , err : <nl> + self . refresh _ schema _ metadata _ best _ effort ( ) <nl> + self . printerr ( str ( err . _ _ class _ _ . _ _ name _ _ ) + " : " + str ( err ) ) <nl> + return False <nl> except CQL _ ERRORS , err : <nl> self . printerr ( str ( err . _ _ class _ _ . _ _ name _ _ ) + " : " + str ( err ) ) <nl> return False
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / bin / cqlsh b / bin / cqlsh 
 index 084d586 . . 59496ce 100755 
 - - - a / bin / cqlsh 
 + + + b / bin / cqlsh 
 @ @ - 634 , 20 + 634 , 9 @ @ class Shell ( cmd . Cmd ) : 
 self . display _ time _ format = display _ time _ format 
 self . display _ float _ precision = display _ float _ precision 
 
 - # Workaround for CASSANDRA - 8521 until PYTHON - 205 is resolved . 
 - # If there is no schema metadata present ( due to a schema mismatch ) , 
 - # get rid of the code that checks for a schema mismatch and force 
 - # the schema metadata to be built . 
 + # If there is no schema metadata present ( due to a schema mismatch ) , force schema refresh 
 if not self . conn . metadata . keyspaces : 
 - self . printerr ( " Warning : schema version mismatch detected ; check the schema versions of your " 
 - " nodes in system . local and system . peers . " ) 
 - original _ method = self . conn . control _ connection . _ get _ schema _ mismatches 
 - try : 
 - self . conn . control _ connection . _ get _ schema _ mismatches = lambda * args , * * kwargs : None 
 - future = self . conn . submit _ schema _ refresh ( ) 
 - future . result ( timeout = 10 ) 
 - finally : 
 - self . conn . control _ connection . _ get _ schema _ mismatches = original _ method 
 + self . refresh _ schema _ metadata _ best _ effort ( ) 
 
 self . session . default _ timeout = client _ timeout 
 self . session . row _ factory = ordered _ dict _ factory 
 @ @ - 690 , 6 + 679 , 15 @ @ class Shell ( cmd . Cmd ) : 
 self . statement _ error = False 
 self . single _ statement = single _ statement 
 
 + def refresh _ schema _ metadata _ best _ effort ( self ) : 
 + try : 
 + self . conn . refresh _ schema _ metadata ( 5 ) # will throw exception if there is a schema mismatch 
 + except Exception : 
 + self . printerr ( " Warning : schema version mismatch detected , which might be caused by DOWN nodes ; if " 
 + " this is not the case , check the schema versions of your nodes in system . local and " 
 + " system . peers . " ) 
 + self . conn . refresh _ schema _ metadata ( 0 ) 
 + 
 def set _ expanded _ cql _ version ( self , ver ) : 
 ver , vertuple = full _ cql _ version ( ver ) 
 self . cql _ version = ver 
 @ @ - 1092 , 6 + 1090 , 10 @ @ class Shell ( cmd . Cmd ) : 
 try : 
 rows = self . session . execute ( statement , trace = self . tracing _ enabled ) 
 break 
 + except cassandra . OperationTimedOut , err : 
 + self . refresh _ schema _ metadata _ best _ effort ( ) 
 + self . printerr ( str ( err . _ _ class _ _ . _ _ name _ _ ) + " : " + str ( err ) ) 
 + return False 
 except CQL _ ERRORS , err : 
 self . printerr ( str ( err . _ _ class _ _ . _ _ name _ _ ) + " : " + str ( err ) ) 
 return False

NEAREST DIFF:
ELIMINATEDSENTENCE
