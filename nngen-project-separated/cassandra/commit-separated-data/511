BLEU SCORE: 0.04844232281716619

TEST MSG: Remove alter type support
GENERATED MSG: Fix ALTER RENAME post - 5125

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e4afc3c . . 5a63213 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 11 <nl> + * Remove ALTER TYPE support ( CASSANDRA - 12443 ) <nl> * Fix assertion for certain legacy range tombstone pattern ( CASSANDRA - 12203 ) <nl> * Set javac encoding to utf - 8 ( CASSANDRA - 11077 ) <nl> * Replace empty strings with null values if they cannot be converted ( CASSANDRA - 12794 ) <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index 3b8a333 . . 4505574 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 18 , 6 + 18 , 9 @ @ using the provided ' sstableupgrade ' tool . <nl> <nl> Upgrading <nl> - - - - - - - - - <nl> + - Support for alter types of already defined tables and of UDTs fields has been disabled . <nl> + If it is necessary to return a different type , please use casting instead . See <nl> + CASSANDRA - 12443 for more details . <nl> - Nothing specific to this release , but please see previous versions upgrading section , <nl> especially if you are upgrading from 2 . 2 . <nl> - Specifying the default _ time _ to _ live option when creating or altering a <nl> diff - - git a / doc / cql3 / CQL . textile b / doc / cql3 / CQL . textile <nl> index 2544878 . . 1efa6d4 100644 <nl> - - - a / doc / cql3 / CQL . textile <nl> + + + b / doc / cql3 / CQL . textile <nl> @ @ - 397 , 8 + 397 , 7 @ @ _ _ Syntax : _ _ <nl> bc ( syntax ) . . <nl> < alter - table - stmt > : : = ALTER ( TABLE | COLUMNFAMILY ) < tablename > < instruction > <nl> <nl> - < instruction > : : = ALTER < identifier > TYPE < type > <nl> - | ADD < identifier > < type > <nl> + < instruction > : : = ADD < identifier > < type > <nl> | DROP < identifier > <nl> | WITH < option > ( AND < option > ) * <nl> p . <nl> @ @ - 406 , 7 + 405 , 6 @ @ _ _ Sample : _ _ <nl> <nl> bc ( sample ) . . <nl> ALTER TABLE addamsFamily <nl> - ALTER lastKnownLocation TYPE uuid ; <nl> <nl> ALTER TABLE addamsFamily <nl> ADD gravesite varchar ; <nl> @ @ - 415 , 10 + 413 , 9 @ @ ALTER TABLE addamsFamily <nl> WITH comment = ' A most excellent and useful column family ' <nl> AND read _ repair _ chance = 0 . 2 ; <nl> p . <nl> - The @ ALTER @ statement is used to manipulate table definitions . It allows for adding new columns , dropping existing ones , changing the type of existing columns , or updating the table options . As with table creation , @ ALTER COLUMNFAMILY @ is allowed as an alias for @ ALTER TABLE @ . <nl> + The @ ALTER @ statement is used to manipulate table definitions . It allows for adding new columns , dropping existing ones , or updating the table options . As with table creation , @ ALTER COLUMNFAMILY @ is allowed as an alias for @ ALTER TABLE @ . <nl> <nl> The @ < tablename > @ is the table name optionally preceded by the keyspace name . The @ < instruction > @ defines the alteration to perform : <nl> - * @ ALTER @ : Update the type of a given defined column . Note that the type of the " clustering columns " : # createTablepartitionClustering cannot be modified as it induces the on - disk ordering of rows . Columns on which a " secondary index " : # createIndexStmt is defined have the same restriction . Other columns are free from those restrictions ( no validation of existing data is performed ) , but it is usually a bad idea to change the type to a non - compatible one , unless no data have been inserted for that column yet , as this could confuse CQL drivers / tools . <nl> * @ ADD @ : Adds a new column to the table . The @ < identifier > @ for the new column must not conflict with an existing column . Moreover , columns cannot be added to tables defined with the @ COMPACT STORAGE @ option . <nl> * @ DROP @ : Removes a column from the table . Dropped columns will immediately become unavailable in the queries and will not be included in compacted sstables in the future . If a column is readded , queries won ' t return values written before the column was last dropped . It is assumed that timestamps represent actual time , so if this is not your case , you should NOT readd previously dropped columns . Columns can ' t be dropped from tables defined with the @ COMPACT STORAGE @ option . <nl> * @ WITH @ : Allows to update the options of the table . The " supported @ < option > @ " : # createTableOptions ( and syntax ) are the same as for the @ CREATE TABLE @ statement except that @ COMPACT STORAGE @ is not supported . Note that setting any @ compaction @ sub - options has the effect of erasing all previous @ compaction @ options , so you need to re - specify all the sub - options if you want to keep them . The same note applies to the set of @ compression @ sub - options . <nl> @ @ - 598 , 23 + 595 , 18 @ @ _ _ Syntax : _ _ <nl> bc ( syntax ) . . <nl> < alter - type - stmt > : : = ALTER TYPE < typename > < instruction > <nl> <nl> - < instruction > : : = ALTER < field - name > TYPE < type > <nl> - | ADD < field - name > < type > <nl> + < instruction > : : = ADD < field - name > < type > <nl> | RENAME < field - name > TO < field - name > ( AND < field - name > TO < field - name > ) * <nl> p . <nl> _ _ Sample : _ _ <nl> <nl> bc ( sample ) . . <nl> - ALTER TYPE address ALTER zip TYPE varint <nl> - <nl> ALTER TYPE address ADD country text <nl> <nl> ALTER TYPE address RENAME zip TO zipcode AND street _ name TO street <nl> p . <nl> The @ ALTER TYPE @ statement is used to manipulate type definitions . It allows for adding new fields , renaming existing fields , or changing the type of existing fields . <nl> <nl> - When altering the type of a column , the new type must be compatible with the previous type . <nl> - <nl> h3 ( # dropTypeStmt ) . DROP TYPE <nl> <nl> _ _ Syntax : _ _ <nl> diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py <nl> index 9008514 . . 2a8b560 100644 <nl> - - - a / pylib / cqlshlib / cql3handling . py <nl> + + + b / pylib / cqlshlib / cql3handling . py <nl> @ @ - 1277 , 8 + 1277 , 7 @ @ syntax _ rules + = r ' ' ' <nl> < alterTableStatement > : : = " ALTER " wat = ( " COLUMNFAMILY " | " TABLE " ) cf = < columnFamilyName > <nl> < alterInstructions > <nl> ; <nl> - < alterInstructions > : : = " ALTER " existcol = < cident > " TYPE " < storageType > <nl> - | " ADD " newcol = < cident > < storageType > ( " static " ) ? <nl> + < alterInstructions > : : = " ADD " newcol = < cident > < storageType > ( " static " ) ? <nl> | " DROP " existcol = < cident > <nl> | " WITH " < cfamProperty > ( " AND " < cfamProperty > ) * <nl> | " RENAME " existcol = < cident > " TO " newcol = < cident > <nl> @ @ - 1288 , 8 + 1287 , 7 @ @ syntax _ rules + = r ' ' ' <nl> < alterUserTypeStatement > : : = " ALTER " " TYPE " ut = < userTypeName > <nl> < alterTypeInstructions > <nl> ; <nl> - < alterTypeInstructions > : : = " ALTER " existcol = < cident > " TYPE " < storageType > <nl> - | " ADD " newcol = < cident > < storageType > <nl> + < alterTypeInstructions > : : = " ADD " newcol = < cident > < storageType > <nl> | " RENAME " existcol = < cident > " TO " newcol = < cident > <nl> ( " AND " existcol = < cident > " TO " newcol = < cident > ) * <nl> ; <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index a702902 . . a3370dc 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 82 , 18 + 82 , 17 @ @ public final class CFMetaData <nl> private final boolean isSuper ; <nl> private final boolean isCounter ; <nl> private final boolean isView ; <nl> - <nl> private final boolean isIndex ; <nl> <nl> - public volatile ClusteringComparator comparator ; / / bytes , long , timeuuid , utf8 , etc . This is built directly from clusteringColumns <nl> + public final ClusteringComparator comparator ; / / bytes , long , timeuuid , utf8 , etc . This is built directly from clusteringColumns <nl> public final IPartitioner partitioner ; / / partitioner the table uses <nl> + private final AbstractType < ? > keyValidator ; <nl> <nl> private final Serializers serializers ; <nl> <nl> / / non - final , for now <nl> public volatile TableParams params = TableParams . DEFAULT ; <nl> <nl> - private volatile AbstractType < ? > keyValidator = BytesType . instance ; <nl> private volatile Map < ByteBuffer , DroppedColumn > droppedColumns = new HashMap < > ( ) ; <nl> private volatile Triggers triggers = Triggers . none ( ) ; <nl> private volatile Indexes indexes = Indexes . none ( ) ; <nl> @ @ - 285 , 6 + 284 , 11 @ @ public final class CFMetaData <nl> this . partitionColumns = partitionColumns ; <nl> <nl> this . serializers = new Serializers ( this ) ; <nl> + <nl> + this . comparator = new ClusteringComparator ( extractTypes ( clusteringColumns ) ) ; <nl> + List < AbstractType < ? > > keyTypes = extractTypes ( partitionKeyColumns ) ; <nl> + this . keyValidator = keyTypes . size ( ) = = 1 ? keyTypes . get ( 0 ) : CompositeType . getInstance ( keyTypes ) ; <nl> + <nl> rebuild ( ) ; <nl> } <nl> <nl> @ @ - 292 , 24 + 296 , 16 @ @ public final class CFMetaData <nl> / / are kept because they are often useful in a different format . <nl> private void rebuild ( ) <nl> { <nl> - this . comparator = new ClusteringComparator ( extractTypes ( clusteringColumns ) ) ; <nl> - <nl> Map < ByteBuffer , ColumnDefinition > newColumnMetadata = new HashMap < > ( ) ; <nl> for ( ColumnDefinition def : partitionKeyColumns ) <nl> newColumnMetadata . put ( def . name . bytes , def ) ; <nl> for ( ColumnDefinition def : clusteringColumns ) <nl> - { <nl> newColumnMetadata . put ( def . name . bytes , def ) ; <nl> - def . type . checkComparable ( ) ; <nl> - } <nl> for ( ColumnDefinition def : partitionColumns ) <nl> newColumnMetadata . put ( def . name . bytes , def ) ; <nl> <nl> this . columnMetadata = newColumnMetadata ; <nl> <nl> - List < AbstractType < ? > > keyTypes = extractTypes ( partitionKeyColumns ) ; <nl> - this . keyValidator = keyTypes . size ( ) = = 1 ? keyTypes . get ( 0 ) : CompositeType . getInstance ( keyTypes ) ; <nl> - <nl> if ( isCompactTable ( ) ) <nl> this . compactValueColumn = CompactTables . getCompactValueColumn ( partitionColumns , isSuper ( ) ) ; <nl> } <nl> @ @ - 762 , 8 + 758 , 6 @ @ public final class CFMetaData <nl> <nl> params = cfm . params ; <nl> <nl> - keyValidator = cfm . keyValidator ; <nl> - <nl> if ( ! cfm . droppedColumns . isEmpty ( ) ) <nl> droppedColumns = cfm . droppedColumns ; <nl> <nl> @ @ - 789 , 12 + 783 , 8 @ @ public final class CFMetaData <nl> if ( ! cfm . cfId . equals ( cfId ) ) <nl> throw new ConfigurationException ( String . format ( " Column family ID mismatch ( found % s ; expected % s ) " , <nl> cfm . cfId , cfId ) ) ; <nl> - <nl> if ( ! cfm . flags . equals ( flags ) ) <nl> throw new ConfigurationException ( " types do not match . " ) ; <nl> - <nl> - if ( ! cfm . comparator . isCompatibleWith ( comparator ) ) <nl> - throw new ConfigurationException ( String . format ( " Column family comparators do not match or are not compatible ( found % s ; expected % s ) . " , cfm . comparator . toString ( ) , comparator . toString ( ) ) ) ; <nl> } <nl> <nl> <nl> @ @ - 931 , 12 + 921 , 9 @ @ public final class CFMetaData <nl> { <nl> case PARTITION _ KEY : <nl> partitionKeyColumns . set ( def . position ( ) , def ) ; <nl> - List < AbstractType < ? > > keyTypes = extractTypes ( partitionKeyColumns ) ; <nl> - keyValidator = keyTypes . size ( ) = = 1 ? keyTypes . get ( 0 ) : CompositeType . getInstance ( keyTypes ) ; <nl> break ; <nl> case CLUSTERING : <nl> clusteringColumns . set ( def . position ( ) , def ) ; <nl> - comparator = new ClusteringComparator ( extractTypes ( clusteringColumns ) ) ; <nl> break ; <nl> case REGULAR : <nl> case STATIC : <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> index 6210d16 . . 756bb96 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> @ @ - 111 , 6 + 111 , 8 @ @ public class AlterTableStatement extends SchemaAlteringStatement <nl> <nl> switch ( oType ) <nl> { <nl> + case ALTER : <nl> + throw new InvalidRequestException ( " Altering of types is not allowed " ) ; <nl> case ADD : <nl> assert columnName ! = null ; <nl> if ( cfm . isDense ( ) ) <nl> @ @ - 186 , 37 + 188 , 6 @ @ public class AlterTableStatement extends SchemaAlteringStatement <nl> } <nl> break ; <nl> <nl> - case ALTER : <nl> - assert columnName ! = null ; <nl> - if ( def = = null ) <nl> - throw new InvalidRequestException ( String . format ( " Column % s was not found in table % s " , columnName , columnFamily ( ) ) ) ; <nl> - <nl> - AbstractType < ? > validatorType = def . isReversedType ( ) & & ! validator . getType ( ) . isReversed ( ) <nl> - ? ReversedType . getInstance ( validator . getType ( ) ) <nl> - : validator . getType ( ) ; <nl> - validateAlter ( cfm , def , validatorType ) ; <nl> - / / In any case , we update the column definition <nl> - cfm . addOrReplaceColumnDefinition ( def . withNewType ( validatorType ) ) ; <nl> - <nl> - / / We also have to validate the view types here . If we have a view which includes a column as part of <nl> - / / the clustering key , we need to make sure that it is indeed compatible . <nl> - for ( ViewDefinition view : views ) <nl> - { <nl> - if ( ! view . includes ( columnName ) ) continue ; <nl> - ViewDefinition viewCopy = view . copy ( ) ; <nl> - ColumnDefinition viewDef = view . metadata . getColumnDefinition ( columnName ) ; <nl> - AbstractType viewType = viewDef . isReversedType ( ) & & ! validator . getType ( ) . isReversed ( ) <nl> - ? ReversedType . getInstance ( validator . getType ( ) ) <nl> - : validator . getType ( ) ; <nl> - validateAlter ( view . metadata , viewDef , viewType ) ; <nl> - viewCopy . metadata . addOrReplaceColumnDefinition ( viewDef . withNewType ( viewType ) ) ; <nl> - <nl> - if ( viewUpdates = = null ) <nl> - viewUpdates = new ArrayList < > ( ) ; <nl> - viewUpdates . add ( viewCopy ) ; <nl> - } <nl> - break ; <nl> - <nl> case DROP : <nl> assert columnName ! = null ; <nl> if ( ! cfm . isCQLTable ( ) ) <nl> @ @ - 336 , 53 + 307 , 6 @ @ public class AlterTableStatement extends SchemaAlteringStatement <nl> return new Event . SchemaChange ( Event . SchemaChange . Change . UPDATED , Event . SchemaChange . Target . TABLE , keyspace ( ) , columnFamily ( ) ) ; <nl> } <nl> <nl> - private static void validateAlter ( CFMetaData cfm , ColumnDefinition def , AbstractType < ? > validatorType ) <nl> - { <nl> - switch ( def . kind ) <nl> - { <nl> - case PARTITION _ KEY : <nl> - if ( validatorType instanceof CounterColumnType ) <nl> - throw new InvalidRequestException ( String . format ( " counter type is not supported for PRIMARY KEY part % s " , def . name ) ) ; <nl> - <nl> - AbstractType < ? > currentType = cfm . getKeyValidatorAsClusteringComparator ( ) . subtype ( def . position ( ) ) ; <nl> - if ( ! validatorType . isValueCompatibleWith ( currentType ) ) <nl> - throw new ConfigurationException ( String . format ( " Cannot change % s from type % s to type % s : types are incompatible . " , <nl> - def . name , <nl> - currentType . asCQL3Type ( ) , <nl> - validatorType . asCQL3Type ( ) ) ) ; <nl> - break ; <nl> - case CLUSTERING : <nl> - if ( ! cfm . isCQLTable ( ) ) <nl> - throw new InvalidRequestException ( String . format ( " Cannot alter clustering column % s in a non - CQL3 table " , def . name ) ) ; <nl> - <nl> - AbstractType < ? > oldType = cfm . comparator . subtype ( def . position ( ) ) ; <nl> - / / Note that CFMetaData . validateCompatibility already validate the change we ' re about to do . However , the error message it <nl> - / / sends is a bit cryptic for a CQL3 user , so validating here for a sake of returning a better error message <nl> - / / Do note that we need isCompatibleWith here , not just isValueCompatibleWith . <nl> - if ( ! validatorType . isCompatibleWith ( oldType ) ) <nl> - { <nl> - throw new ConfigurationException ( String . format ( " Cannot change % s from type % s to type % s : types are not order - compatible . " , <nl> - def . name , <nl> - oldType . asCQL3Type ( ) , <nl> - validatorType . asCQL3Type ( ) ) ) ; <nl> - } <nl> - break ; <nl> - case REGULAR : <nl> - case STATIC : <nl> - / / Thrift allows to change a column validator so CFMetaData . validateCompatibility will let it slide <nl> - / / if we change to an incompatible type ( contrarily to the comparator case ) . But we don ' t want to <nl> - / / allow it for CQL3 ( see # 5882 ) so validating it explicitly here . We only care about value compatibility <nl> - / / though since we won ' t compare values ( except when there is an index , but that is validated by <nl> - / / ColumnDefinition already ) . <nl> - if ( ! validatorType . isValueCompatibleWith ( def . type ) ) <nl> - throw new ConfigurationException ( String . format ( " Cannot change % s from type % s to type % s : types are incompatible . " , <nl> - def . name , <nl> - def . type . asCQL3Type ( ) , <nl> - validatorType . asCQL3Type ( ) ) ) ; <nl> - break ; <nl> - } <nl> - } <nl> - <nl> public String toString ( ) <nl> { <nl> return String . format ( " AlterTableStatement ( name = % s , type = % s , column = % s , validator = % s ) " , <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java <nl> index 4cac3b3 . . f2e1578 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java <nl> @ @ - 54 , 12 + 54 , 12 @ @ public abstract class AlterTypeStatement extends SchemaAlteringStatement <nl> <nl> public static AlterTypeStatement addition ( UTName name , ColumnIdentifier fieldName , CQL3Type . Raw type ) <nl> { <nl> - return new AddOrAlter ( name , true , fieldName , type ) ; <nl> + return new Add ( name , fieldName , type ) ; <nl> } <nl> <nl> public static AlterTypeStatement alter ( UTName name , ColumnIdentifier fieldName , CQL3Type . Raw type ) <nl> { <nl> - return new AddOrAlter ( name , false , fieldName , type ) ; <nl> + throw new InvalidRequestException ( " Altering of types is not allowed " ) ; <nl> } <nl> <nl> public static AlterTypeStatement renames ( UTName name , Map < ColumnIdentifier , ColumnIdentifier > renames ) <nl> @ @ - 245 , 21 + 245 , 19 @ @ public abstract class AlterTypeStatement extends SchemaAlteringStatement <nl> } ) ; <nl> } <nl> <nl> - private static class AddOrAlter extends AlterTypeStatement <nl> + private static class Add extends AlterTypeStatement <nl> { <nl> - private final boolean isAdd ; <nl> private final ColumnIdentifier fieldName ; <nl> private final CQL3Type . Raw type ; <nl> <nl> - public AddOrAlter ( UTName name , boolean isAdd , ColumnIdentifier fieldName , CQL3Type . Raw type ) <nl> + public Add ( UTName name , ColumnIdentifier fieldName , CQL3Type . Raw type ) <nl> { <nl> super ( name ) ; <nl> - this . isAdd = isAdd ; <nl> this . fieldName = fieldName ; <nl> this . type = type ; <nl> } <nl> <nl> - private UserType doAdd ( UserType toUpdate ) throws InvalidRequestException <nl> + protected UserType makeUpdatedType ( UserType toUpdate , KeyspaceMetadata ksm ) throws InvalidRequestException <nl> { <nl> if ( getIdxOfField ( toUpdate , fieldName ) > = 0 ) <nl> throw new InvalidRequestException ( String . format ( " Cannot add new field % s to type % s : a field of the same name already exists " , fieldName , name ) ) ; <nl> @ @ - 278 , 30 + 276 , 6 @ @ public abstract class AlterTypeStatement extends SchemaAlteringStatement <nl> <nl> return new UserType ( toUpdate . keyspace , toUpdate . name , newNames , newTypes ) ; <nl> } <nl> - <nl> - private UserType doAlter ( UserType toUpdate , KeyspaceMetadata ksm ) throws InvalidRequestException <nl> - { <nl> - checkTypeNotUsedByAggregate ( ksm ) ; <nl> - <nl> - int idx = getIdxOfField ( toUpdate , fieldName ) ; <nl> - if ( idx < 0 ) <nl> - throw new InvalidRequestException ( String . format ( " Unknown field % s in type % s " , fieldName , name ) ) ; <nl> - <nl> - AbstractType < ? > previous = toUpdate . fieldType ( idx ) ; <nl> - if ( ! type . prepare ( keyspace ( ) ) . getType ( ) . isCompatibleWith ( previous ) ) <nl> - throw new InvalidRequestException ( String . format ( " Type % s is incompatible with previous type % s of field % s in user type % s " , type , previous . asCQL3Type ( ) , fieldName , name ) ) ; <nl> - <nl> - List < ByteBuffer > newNames = new ArrayList < > ( toUpdate . fieldNames ( ) ) ; <nl> - List < AbstractType < ? > > newTypes = new ArrayList < > ( toUpdate . fieldTypes ( ) ) ; <nl> - newTypes . set ( idx , type . prepare ( keyspace ( ) ) . getType ( ) ) ; <nl> - <nl> - return new UserType ( toUpdate . keyspace , toUpdate . name , newNames , newTypes ) ; <nl> - } <nl> - <nl> - protected UserType makeUpdatedType ( UserType toUpdate , KeyspaceMetadata ksm ) throws InvalidRequestException <nl> - { <nl> - return isAdd ? doAdd ( toUpdate ) : doAlter ( toUpdate , ksm ) ; <nl> - } <nl> } <nl> <nl> private static class Renames extends AlterTypeStatement <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / ViewSchemaTest . java b / test / unit / org / apache / cassandra / cql3 / ViewSchemaTest . java <nl> index b34f475 . . 113fdf2 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / ViewSchemaTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / ViewSchemaTest . java <nl> @ @ - 683 , 80 + 683 , 4 @ @ public class ViewSchemaTest extends CQLTester <nl> Assert . assertEquals ( " Cannot use DROP TABLE on Materialized View " , e . getMessage ( ) ) ; <nl> } <nl> } <nl> - <nl> - @ Test <nl> - public void testAlterTable ( ) throws Throwable <nl> - { <nl> - createTable ( " CREATE TABLE % s ( " + <nl> - " a int , " + <nl> - " b text , " + <nl> - " PRIMARY KEY ( a , b ) ) " ) ; <nl> - <nl> - executeNet ( protocolVersion , " USE " + keyspace ( ) ) ; <nl> - <nl> - createView ( " mv1 " , " CREATE MATERIALIZED VIEW % s AS SELECT * FROM % % s WHERE a IS NOT NULL AND b IS NOT NULL PRIMARY KEY ( b , a ) " ) ; <nl> - <nl> - alterTable ( " ALTER TABLE % s ALTER b TYPE blob " ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testAlterReversedTypeBaseTable ( ) throws Throwable <nl> - { <nl> - createTable ( " CREATE TABLE % s ( " + <nl> - " a int , " + <nl> - " b text , " + <nl> - " PRIMARY KEY ( a , b ) ) " + <nl> - " WITH CLUSTERING ORDER BY ( b DESC ) " ) ; <nl> - <nl> - executeNet ( protocolVersion , " USE " + keyspace ( ) ) ; <nl> - <nl> - createView ( " mv1 " , " CREATE MATERIALIZED VIEW % s AS SELECT * FROM % % s WHERE a IS NOT NULL AND b IS NOT NULL PRIMARY KEY ( a , b ) WITH CLUSTERING ORDER BY ( b ASC ) " ) ; <nl> - <nl> - alterTable ( " ALTER TABLE % s ALTER b TYPE blob " ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testAlterReversedTypeViewTable ( ) throws Throwable <nl> - { <nl> - createTable ( " CREATE TABLE % s ( " + <nl> - " a int , " + <nl> - " b text , " + <nl> - " PRIMARY KEY ( a , b ) ) " ) ; <nl> - <nl> - executeNet ( protocolVersion , " USE " + keyspace ( ) ) ; <nl> - <nl> - createView ( " mv1 " , " CREATE MATERIALIZED VIEW % s AS SELECT * FROM % % s WHERE a IS NOT NULL AND b IS NOT NULL PRIMARY KEY ( a , b ) WITH CLUSTERING ORDER BY ( b DESC ) " ) ; <nl> - <nl> - alterTable ( " ALTER TABLE % s ALTER b TYPE blob " ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testAlterClusteringViewTable ( ) throws Throwable <nl> - { <nl> - createTable ( " CREATE TABLE % s ( " + <nl> - " a int , " + <nl> - " b text , " + <nl> - " PRIMARY KEY ( a ) ) " ) ; <nl> - <nl> - executeNet ( protocolVersion , " USE " + keyspace ( ) ) ; <nl> - <nl> - createView ( " mv1 " , " CREATE MATERIALIZED VIEW % s AS SELECT * FROM % % s WHERE a IS NOT NULL AND b IS NOT NULL PRIMARY KEY ( a , b ) WITH CLUSTERING ORDER BY ( b DESC ) " ) ; <nl> - <nl> - alterTable ( " ALTER TABLE % s ALTER b TYPE blob " ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testAlterViewTableValue ( ) throws Throwable <nl> - { <nl> - createTable ( " CREATE TABLE % s ( " + <nl> - " a int , " + <nl> - " b int , " + <nl> - " PRIMARY KEY ( a ) ) " ) ; <nl> - <nl> - executeNet ( protocolVersion , " USE " + keyspace ( ) ) ; <nl> - <nl> - createView ( " mv1 " , " CREATE MATERIALIZED VIEW % s AS SELECT * FROM % % s WHERE a IS NOT NULL AND b IS NOT NULL PRIMARY KEY ( a , b ) WITH CLUSTERING ORDER BY ( b DESC ) " ) ; <nl> - <nl> - assertInvalid ( " ALTER TABLE % s ALTER b TYPE blob " ) ; <nl> - } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / FrozenCollectionsTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / FrozenCollectionsTest . java <nl> index 9df8ea0 . . f89163d 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / FrozenCollectionsTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / FrozenCollectionsTest . java <nl> @ @ - 509 , 20 + 509 , 6 @ @ public class FrozenCollectionsTest extends CQLTester <nl> } <nl> } <nl> <nl> - private void assertInvalidAlterWithMessage ( String createTableStatement , String errorMessage ) throws Throwable <nl> - { <nl> - try <nl> - { <nl> - alterTableMayThrow ( createTableStatement ) ; <nl> - Assert . fail ( " Expected CREATE TABLE statement to error : " + createTableStatement ) ; <nl> - } <nl> - catch ( InvalidRequestException | ConfigurationException ex ) <nl> - { <nl> - Assert . assertTrue ( " Expected error message to contain ' " + errorMessage + " ' , but got ' " + ex . getMessage ( ) + " ' " , <nl> - ex . getMessage ( ) . contains ( errorMessage ) ) ; <nl> - } <nl> - } <nl> - <nl> @ Test <nl> public void testInvalidOperations ( ) throws Throwable <nl> { <nl> @ @ - 555 , 34 + 541 , 6 @ @ public class FrozenCollectionsTest extends CQLTester <nl> " frozen < > is only allowed on collections , tuples , and user - defined types " ) ; <nl> } <nl> <nl> - @ Test <nl> - public void testAltering ( ) throws Throwable <nl> - { <nl> - createTable ( " CREATE TABLE % s ( a int , b frozen < list < int > > , c frozen < list < int > > , PRIMARY KEY ( a , b ) ) " ) ; <nl> - <nl> - alterTable ( " ALTER TABLE % s ALTER c TYPE frozen < list < blob > > " ) ; <nl> - <nl> - assertInvalidAlterWithMessage ( " ALTER TABLE % s ALTER b TYPE frozen < list < blob > > " , <nl> - " types are not order - compatible " ) ; <nl> - <nl> - assertInvalidAlterWithMessage ( " ALTER TABLE % s ALTER b TYPE list < int > " , <nl> - " types are not order - compatible " ) ; <nl> - <nl> - assertInvalidAlterWithMessage ( " ALTER TABLE % s ALTER c TYPE list < blob > " , <nl> - " types are incompatible " ) ; <nl> - <nl> - alterTable ( " ALTER TABLE % s DROP c " ) ; <nl> - alterTable ( " ALTER TABLE % s ADD c frozen < set < int > > " ) ; <nl> - assertInvalidAlterWithMessage ( " ALTER TABLE % s ALTER c TYPE frozen < set < blob > > " , <nl> - " types are incompatible " ) ; <nl> - <nl> - alterTable ( " ALTER TABLE % s DROP c " ) ; <nl> - alterTable ( " ALTER TABLE % s ADD c frozen < map < int , int > > " ) ; <nl> - assertInvalidAlterWithMessage ( " ALTER TABLE % s ALTER c TYPE frozen < map < blob , int > > " , <nl> - " types are incompatible " ) ; <nl> - alterTable ( " ALTER TABLE % s ALTER c TYPE frozen < map < int , blob > > " ) ; <nl> - } <nl> - <nl> private void assertInvalidIndexCreationWithMessage ( String statement , String errorMessage ) throws Throwable <nl> { <nl> try <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / TypeTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / TypeTest . java <nl> index bcab807 . . 60a0fdc 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / TypeTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / TypeTest . java <nl> @ @ - 67 , 36 + 67 , 4 @ @ public class TypeTest extends CQLTester <nl> UntypedResultSet results = execute ( " SELECT * FROM % s WHERE a = 0 AND b < now ( ) " ) ; <nl> assertEquals ( 1 , results . size ( ) ) ; <nl> } <nl> - <nl> - @ Test <nl> - / / tests CASSANDRA - 7797 <nl> - public void testAlterReversedColumn ( ) throws Throwable <nl> - { <nl> - createTable ( " CREATE TABLE IF NOT EXISTS % s ( a int , b ' org . apache . cassandra . db . marshal . DateType ' , PRIMARY KEY ( a , b ) ) WITH CLUSTERING ORDER BY ( b DESC ) " ) ; <nl> - alterTable ( " ALTER TABLE % s ALTER b TYPE ' org . apache . cassandra . db . marshal . ReversedType ( org . apache . cassandra . db . marshal . TimestampType ) ' " ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testIncompatibleReversedTypes ( ) throws Throwable <nl> - { <nl> - createTable ( " CREATE TABLE IF NOT EXISTS % s ( a int , b ' org . apache . cassandra . db . marshal . DateType ' , PRIMARY KEY ( a , b ) ) WITH CLUSTERING ORDER BY ( b DESC ) " ) ; <nl> - try <nl> - { <nl> - alterTable ( " ALTER TABLE % s ALTER b TYPE ' org . apache . cassandra . db . marshal . ReversedType ( org . apache . cassandra . db . marshal . TimeUUIDType ) ' " ) ; <nl> - fail ( " Expected error for ALTER statement " ) ; <nl> - } <nl> - catch ( RuntimeException e ) { } <nl> - } <nl> - <nl> - @ Test <nl> - public void testReversedAndNonReversed ( ) throws Throwable <nl> - { <nl> - createTable ( " CREATE TABLE IF NOT EXISTS % s ( a int , b ' org . apache . cassandra . db . marshal . DateType ' , PRIMARY KEY ( a , b ) ) " ) ; <nl> - try <nl> - { <nl> - alterTable ( " ALTER TABLE % s ALTER b TYPE ' org . apache . cassandra . db . marshal . ReversedType ( org . apache . cassandra . db . marshal . DateType ) ' " ) ; <nl> - fail ( " Expected error for ALTER statement " ) ; <nl> - } <nl> - catch ( RuntimeException e ) { } <nl> - } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / UserTypesTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / UserTypesTest . java <nl> index 850d8ee . . e776f0e 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / UserTypesTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / UserTypesTest . java <nl> @ @ - 550 , 7 + 550 , 6 @ @ public class UserTypesTest extends CQLTester <nl> private void assertInvalidAlterDropStatements ( String t ) throws Throwable <nl> { <nl> assertInvalidMessage ( " Cannot alter user type " + typeWithKs ( t ) , " ALTER TYPE " + typeWithKs ( t ) + " RENAME foo TO bar ; " ) ; <nl> - assertInvalidMessage ( " Cannot alter user type " + typeWithKs ( t ) , " ALTER TYPE " + typeWithKs ( t ) + " ALTER foo TYPE text ; " ) ; <nl> assertInvalidMessage ( " Cannot drop user type " + typeWithKs ( t ) , " DROP TYPE " + typeWithKs ( t ) + ' ; ' ) ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java <nl> index bcd6587 . . 245be30 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java <nl> @ @ - 343 , 37 + 343 , 6 @ @ public class AlterTest extends CQLTester <nl> " ALTER TABLE % s WITH compression = { ' class ' : ' SnappyCompressor ' , ' chunk _ length _ kb ' : 32 , ' chunk _ length _ in _ kb ' : 32 } ; " ) ; <nl> } <nl> <nl> - @ Test <nl> - public void testAlterType ( ) throws Throwable <nl> - { <nl> - createTable ( " CREATE TABLE % s ( id text PRIMARY KEY , content text ) ; " ) ; <nl> - alterTable ( " ALTER TABLE % s ALTER content TYPE blob " ) ; <nl> - <nl> - createTable ( " CREATE TABLE % s ( pk int , ck text , value blob , PRIMARY KEY ( pk , ck ) ) WITH CLUSTERING ORDER BY ( ck DESC ) " ) ; <nl> - alterTable ( " ALTER TABLE % s ALTER ck TYPE blob " ) ; <nl> - <nl> - createTable ( " CREATE TABLE % s ( pk int , ck int , value blob , PRIMARY KEY ( pk , ck ) ) " ) ; <nl> - assertThrowsConfigurationException ( " Cannot change value from type blob to type text : types are incompatible . " , <nl> - " ALTER TABLE % s ALTER value TYPE TEXT ; " ) ; <nl> - } <nl> - <nl> - / * * <nl> - * tests CASSANDRA - 10027 <nl> - * / <nl> - @ Test <nl> - public void testAlterColumnTypeToDate ( ) throws Throwable <nl> - { <nl> - createTable ( " CREATE TABLE % s ( key int PRIMARY KEY , c1 int ) ; " ) ; <nl> - execute ( " INSERT INTO % s ( key , c1 ) VALUES ( 1 , 1 ) ; " ) ; <nl> - execute ( " ALTER TABLE % s ALTER c1 TYPE date ; " ) ; <nl> - assertRows ( execute ( " SELECT * FROM % s " ) , row ( 1 , 1 ) ) ; <nl> - <nl> - createTable ( " CREATE TABLE % s ( key int PRIMARY KEY , c1 varint ) ; " ) ; <nl> - execute ( " INSERT INTO % s ( key , c1 ) VALUES ( 1 , 1 ) ; " ) ; <nl> - assertInvalidMessage ( " Cannot change c1 from type varint to type date : types are incompatible . " , <nl> - " ALTER TABLE % s ALTER c1 TYPE date ; " ) ; <nl> - } <nl> - <nl> private void assertThrowsConfigurationException ( String errorMsg , String alterStmt ) throws Throwable <nl> { <nl> try <nl> @ @ - 386 , 27 + 355 , 4 @ @ public class AlterTest extends CQLTester <nl> assertEquals ( errorMsg , e . getMessage ( ) ) ; <nl> } <nl> } <nl> - <nl> - @ Test / / tests CASSANDRA - 8879 <nl> - public void testAlterClusteringColumnTypeInCompactTable ( ) throws Throwable <nl> - { <nl> - createTable ( " CREATE TABLE % s ( key blob , column1 blob , value blob , PRIMARY KEY ( ( key ) , column1 ) ) WITH COMPACT STORAGE " ) ; <nl> - assertInvalidThrow ( InvalidRequestException . class , " ALTER TABLE % s ALTER column1 TYPE ascii " ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testAlterToBlob ( ) throws Throwable <nl> - { <nl> - / / This tests for the bug from # 11820 in particular <nl> - <nl> - createTable ( " CREATE TABLE % s ( a int PRIMARY KEY , b int ) " ) ; <nl> - <nl> - execute ( " INSERT INTO % s ( a , b ) VALUES ( 1 , 1 ) " ) ; <nl> - <nl> - executeNet ( Server . CURRENT _ VERSION , " ALTER TABLE % s ALTER b TYPE BLOB " ) ; <nl> - <nl> - assertRowsNet ( Server . CURRENT _ VERSION , executeNet ( Server . CURRENT _ VERSION , " SELECT * FROM % s WHERE a = 1 " ) , <nl> - row ( 1 , ByteBufferUtil . bytes ( 1 ) ) <nl> - ) ; <nl> - } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java <nl> index 690d4f9 . . 0d81fa3 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java <nl> @ @ - 28 , 38 + 28 , 6 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> public class UpdateTest extends CQLTester <nl> { <nl> - / * * <nl> - * Test altering the type of a column , including the one in the primary key
NEAREST DIFF (one line): diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py <nl> index 958b9ae . . 0e631ea 100644 <nl> - - - a / pylib / cqlshlib / cql3handling . py <nl> + + + b / pylib / cqlshlib / cql3handling . py <nl> @ @ - 1239 , 6 + 1239 , 8 @ @ syntax _ rules + = r ' ' ' <nl> | " ADD " newcol = < cident > < storageType > <nl> | " DROP " existcol = < cident > <nl> | " WITH " < cfamProperty > ( " AND " < cfamProperty > ) * <nl> + | " RENAME " existcol = < cident > " TO " newcol = < cident > <nl> + ( " AND " existcol = < cident > " TO " newcol = < cident > ) * <nl> ; <nl> ' ' ' <nl> <nl> diff - - git a / pylib / cqlshlib / helptopics . py b / pylib / cqlshlib / helptopics . py <nl> index c9dae31 . . cdbb8f4 100644 <nl> - - - a / pylib / cqlshlib / helptopics . py <nl> + + + b / pylib / cqlshlib / helptopics . py <nl> @ @ - 902 , 8 + 902 , 37 @ @ class CQL3HelpTopics ( CQLHelpTopics ) : <nl> print " HELP CREATE _ USER ; " <nl> <nl> def help _ alter ( self ) : <nl> - super ( CQL3HelpTopics , self ) . help _ alter ( ) <nl> - print " HELP ALTER _ USER ; " <nl> + print " " " <nl> + ALTER TABLE < tablename > ALTER < columnname > TYPE < type > ; <nl> + ALTER TABLE < tablename > ADD < columnname > < type > ; <nl> + ALTER TABLE < tablename > RENAME < columnname > TO < columnname > <nl> + [ AND < columnname > TO < columnname > ] <nl> + ALTER TABLE < tablename > WITH < optionname > = < val > [ AND < optionname > = < val > [ . . . ] ] ; <nl> + <nl> + An ALTER statement is used to manipulate table metadata . It allows you <nl> + to add new typed columns , drop existing columns , change the data <nl> + storage type of existing columns , or change table properties . <nl> + No results are returned . <nl> + <nl> + See one of the following for more information : <nl> + <nl> + HELP ALTER _ ALTER ; <nl> + HELP ALTER _ ADD ; <nl> + HELP ALTER _ DROP ; <nl> + HELP ALTER _ RENAME ; <nl> + HELP ALTER _ WITH ; <nl> + " " " <nl> + <nl> + def help _ alter _ rename ( self ) : <nl> + print " " " <nl> + ALTER TABLE : renaming a column <nl> + <nl> + ALTER TABLE < tablename > RENAME < columnname > TO < columnname > <nl> + [ AND < columnname > TO < columnname > ] <nl> + <nl> + The ALTER TABLE . . . RENAME variant renames a typed column in a column <nl> + family . <nl> + " " " <nl> <nl> def help _ drop ( self ) : <nl> super ( CQL3HelpTopics , self ) . help _ drop ( )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e4afc3c . . 5a63213 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 11 
 + * Remove ALTER TYPE support ( CASSANDRA - 12443 ) 
 * Fix assertion for certain legacy range tombstone pattern ( CASSANDRA - 12203 ) 
 * Set javac encoding to utf - 8 ( CASSANDRA - 11077 ) 
 * Replace empty strings with null values if they cannot be converted ( CASSANDRA - 12794 ) 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index 3b8a333 . . 4505574 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 18 , 6 + 18 , 9 @ @ using the provided ' sstableupgrade ' tool . 
 
 Upgrading 
 - - - - - - - - - 
 + - Support for alter types of already defined tables and of UDTs fields has been disabled . 
 + If it is necessary to return a different type , please use casting instead . See 
 + CASSANDRA - 12443 for more details . 
 - Nothing specific to this release , but please see previous versions upgrading section , 
 especially if you are upgrading from 2 . 2 . 
 - Specifying the default _ time _ to _ live option when creating or altering a 
 diff - - git a / doc / cql3 / CQL . textile b / doc / cql3 / CQL . textile 
 index 2544878 . . 1efa6d4 100644 
 - - - a / doc / cql3 / CQL . textile 
 + + + b / doc / cql3 / CQL . textile 
 @ @ - 397 , 8 + 397 , 7 @ @ _ _ Syntax : _ _ 
 bc ( syntax ) . . 
 < alter - table - stmt > : : = ALTER ( TABLE | COLUMNFAMILY ) < tablename > < instruction > 
 
 - < instruction > : : = ALTER < identifier > TYPE < type > 
 - | ADD < identifier > < type > 
 + < instruction > : : = ADD < identifier > < type > 
 | DROP < identifier > 
 | WITH < option > ( AND < option > ) * 
 p . 
 @ @ - 406 , 7 + 405 , 6 @ @ _ _ Sample : _ _ 
 
 bc ( sample ) . . 
 ALTER TABLE addamsFamily 
 - ALTER lastKnownLocation TYPE uuid ; 
 
 ALTER TABLE addamsFamily 
 ADD gravesite varchar ; 
 @ @ - 415 , 10 + 413 , 9 @ @ ALTER TABLE addamsFamily 
 WITH comment = ' A most excellent and useful column family ' 
 AND read _ repair _ chance = 0 . 2 ; 
 p . 
 - The @ ALTER @ statement is used to manipulate table definitions . It allows for adding new columns , dropping existing ones , changing the type of existing columns , or updating the table options . As with table creation , @ ALTER COLUMNFAMILY @ is allowed as an alias for @ ALTER TABLE @ . 
 + The @ ALTER @ statement is used to manipulate table definitions . It allows for adding new columns , dropping existing ones , or updating the table options . As with table creation , @ ALTER COLUMNFAMILY @ is allowed as an alias for @ ALTER TABLE @ . 
 
 The @ < tablename > @ is the table name optionally preceded by the keyspace name . The @ < instruction > @ defines the alteration to perform : 
 - * @ ALTER @ : Update the type of a given defined column . Note that the type of the " clustering columns " : # createTablepartitionClustering cannot be modified as it induces the on - disk ordering of rows . Columns on which a " secondary index " : # createIndexStmt is defined have the same restriction . Other columns are free from those restrictions ( no validation of existing data is performed ) , but it is usually a bad idea to change the type to a non - compatible one , unless no data have been inserted for that column yet , as this could confuse CQL drivers / tools . 
 * @ ADD @ : Adds a new column to the table . The @ < identifier > @ for the new column must not conflict with an existing column . Moreover , columns cannot be added to tables defined with the @ COMPACT STORAGE @ option . 
 * @ DROP @ : Removes a column from the table . Dropped columns will immediately become unavailable in the queries and will not be included in compacted sstables in the future . If a column is readded , queries won ' t return values written before the column was last dropped . It is assumed that timestamps represent actual time , so if this is not your case , you should NOT readd previously dropped columns . Columns can ' t be dropped from tables defined with the @ COMPACT STORAGE @ option . 
 * @ WITH @ : Allows to update the options of the table . The " supported @ < option > @ " : # createTableOptions ( and syntax ) are the same as for the @ CREATE TABLE @ statement except that @ COMPACT STORAGE @ is not supported . Note that setting any @ compaction @ sub - options has the effect of erasing all previous @ compaction @ options , so you need to re - specify all the sub - options if you want to keep them . The same note applies to the set of @ compression @ sub - options . 
 @ @ - 598 , 23 + 595 , 18 @ @ _ _ Syntax : _ _ 
 bc ( syntax ) . . 
 < alter - type - stmt > : : = ALTER TYPE < typename > < instruction > 
 
 - < instruction > : : = ALTER < field - name > TYPE < type > 
 - | ADD < field - name > < type > 
 + < instruction > : : = ADD < field - name > < type > 
 | RENAME < field - name > TO < field - name > ( AND < field - name > TO < field - name > ) * 
 p . 
 _ _ Sample : _ _ 
 
 bc ( sample ) . . 
 - ALTER TYPE address ALTER zip TYPE varint 
 - 
 ALTER TYPE address ADD country text 
 
 ALTER TYPE address RENAME zip TO zipcode AND street _ name TO street 
 p . 
 The @ ALTER TYPE @ statement is used to manipulate type definitions . It allows for adding new fields , renaming existing fields , or changing the type of existing fields . 
 
 - When altering the type of a column , the new type must be compatible with the previous type . 
 - 
 h3 ( # dropTypeStmt ) . DROP TYPE 
 
 _ _ Syntax : _ _ 
 diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py 
 index 9008514 . . 2a8b560 100644 
 - - - a / pylib / cqlshlib / cql3handling . py 
 + + + b / pylib / cqlshlib / cql3handling . py 
 @ @ - 1277 , 8 + 1277 , 7 @ @ syntax _ rules + = r ' ' ' 
 < alterTableStatement > : : = " ALTER " wat = ( " COLUMNFAMILY " | " TABLE " ) cf = < columnFamilyName > 
 < alterInstructions > 
 ; 
 - < alterInstructions > : : = " ALTER " existcol = < cident > " TYPE " < storageType > 
 - | " ADD " newcol = < cident > < storageType > ( " static " ) ? 
 + < alterInstructions > : : = " ADD " newcol = < cident > < storageType > ( " static " ) ? 
 | " DROP " existcol = < cident > 
 | " WITH " < cfamProperty > ( " AND " < cfamProperty > ) * 
 | " RENAME " existcol = < cident > " TO " newcol = < cident > 
 @ @ - 1288 , 8 + 1287 , 7 @ @ syntax _ rules + = r ' ' ' 
 < alterUserTypeStatement > : : = " ALTER " " TYPE " ut = < userTypeName > 
 < alterTypeInstructions > 
 ; 
 - < alterTypeInstructions > : : = " ALTER " existcol = < cident > " TYPE " < storageType > 
 - | " ADD " newcol = < cident > < storageType > 
 + < alterTypeInstructions > : : = " ADD " newcol = < cident > < storageType > 
 | " RENAME " existcol = < cident > " TO " newcol = < cident > 
 ( " AND " existcol = < cident > " TO " newcol = < cident > ) * 
 ; 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index a702902 . . a3370dc 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 82 , 18 + 82 , 17 @ @ public final class CFMetaData 
 private final boolean isSuper ; 
 private final boolean isCounter ; 
 private final boolean isView ; 
 - 
 private final boolean isIndex ; 
 
 - public volatile ClusteringComparator comparator ; / / bytes , long , timeuuid , utf8 , etc . This is built directly from clusteringColumns 
 + public final ClusteringComparator comparator ; / / bytes , long , timeuuid , utf8 , etc . This is built directly from clusteringColumns 
 public final IPartitioner partitioner ; / / partitioner the table uses 
 + private final AbstractType < ? > keyValidator ; 
 
 private final Serializers serializers ; 
 
 / / non - final , for now 
 public volatile TableParams params = TableParams . DEFAULT ; 
 
 - private volatile AbstractType < ? > keyValidator = BytesType . instance ; 
 private volatile Map < ByteBuffer , DroppedColumn > droppedColumns = new HashMap < > ( ) ; 
 private volatile Triggers triggers = Triggers . none ( ) ; 
 private volatile Indexes indexes = Indexes . none ( ) ; 
 @ @ - 285 , 6 + 284 , 11 @ @ public final class CFMetaData 
 this . partitionColumns = partitionColumns ; 
 
 this . serializers = new Serializers ( this ) ; 
 + 
 + this . comparator = new ClusteringComparator ( extractTypes ( clusteringColumns ) ) ; 
 + List < AbstractType < ? > > keyTypes = extractTypes ( partitionKeyColumns ) ; 
 + this . keyValidator = keyTypes . size ( ) = = 1 ? keyTypes . get ( 0 ) : CompositeType . getInstance ( keyTypes ) ; 
 + 
 rebuild ( ) ; 
 } 
 
 @ @ - 292 , 24 + 296 , 16 @ @ public final class CFMetaData 
 / / are kept because they are often useful in a different format . 
 private void rebuild ( ) 
 { 
 - this . comparator = new ClusteringComparator ( extractTypes ( clusteringColumns ) ) ; 
 - 
 Map < ByteBuffer , ColumnDefinition > newColumnMetadata = new HashMap < > ( ) ; 
 for ( ColumnDefinition def : partitionKeyColumns ) 
 newColumnMetadata . put ( def . name . bytes , def ) ; 
 for ( ColumnDefinition def : clusteringColumns ) 
 - { 
 newColumnMetadata . put ( def . name . bytes , def ) ; 
 - def . type . checkComparable ( ) ; 
 - } 
 for ( ColumnDefinition def : partitionColumns ) 
 newColumnMetadata . put ( def . name . bytes , def ) ; 
 
 this . columnMetadata = newColumnMetadata ; 
 
 - List < AbstractType < ? > > keyTypes = extractTypes ( partitionKeyColumns ) ; 
 - this . keyValidator = keyTypes . size ( ) = = 1 ? keyTypes . get ( 0 ) : CompositeType . getInstance ( keyTypes ) ; 
 - 
 if ( isCompactTable ( ) ) 
 this . compactValueColumn = CompactTables . getCompactValueColumn ( partitionColumns , isSuper ( ) ) ; 
 } 
 @ @ - 762 , 8 + 758 , 6 @ @ public final class CFMetaData 
 
 params = cfm . params ; 
 
 - keyValidator = cfm . keyValidator ; 
 - 
 if ( ! cfm . droppedColumns . isEmpty ( ) ) 
 droppedColumns = cfm . droppedColumns ; 
 
 @ @ - 789 , 12 + 783 , 8 @ @ public final class CFMetaData 
 if ( ! cfm . cfId . equals ( cfId ) ) 
 throw new ConfigurationException ( String . format ( " Column family ID mismatch ( found % s ; expected % s ) " , 
 cfm . cfId , cfId ) ) ; 
 - 
 if ( ! cfm . flags . equals ( flags ) ) 
 throw new ConfigurationException ( " types do not match . " ) ; 
 - 
 - if ( ! cfm . comparator . isCompatibleWith ( comparator ) ) 
 - throw new ConfigurationException ( String . format ( " Column family comparators do not match or are not compatible ( found % s ; expected % s ) . " , cfm . comparator . toString ( ) , comparator . toString ( ) ) ) ; 
 } 
 
 
 @ @ - 931 , 12 + 921 , 9 @ @ public final class CFMetaData 
 { 
 case PARTITION _ KEY : 
 partitionKeyColumns . set ( def . position ( ) , def ) ; 
 - List < AbstractType < ? > > keyTypes = extractTypes ( partitionKeyColumns ) ; 
 - keyValidator = keyTypes . size ( ) = = 1 ? keyTypes . get ( 0 ) : CompositeType . getInstance ( keyTypes ) ; 
 break ; 
 case CLUSTERING : 
 clusteringColumns . set ( def . position ( ) , def ) ; 
 - comparator = new ClusteringComparator ( extractTypes ( clusteringColumns ) ) ; 
 break ; 
 case REGULAR : 
 case STATIC : 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 index 6210d16 . . 756bb96 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 @ @ - 111 , 6 + 111 , 8 @ @ public class AlterTableStatement extends SchemaAlteringStatement 
 
 switch ( oType ) 
 { 
 + case ALTER : 
 + throw new InvalidRequestException ( " Altering of types is not allowed " ) ; 
 case ADD : 
 assert columnName ! = null ; 
 if ( cfm . isDense ( ) ) 
 @ @ - 186 , 37 + 188 , 6 @ @ public class AlterTableStatement extends SchemaAlteringStatement 
 } 
 break ; 
 
 - case ALTER : 
 - assert columnName ! = null ; 
 - if ( def = = null ) 
 - throw new InvalidRequestException ( String . format ( " Column % s was not found in table % s " , columnName , columnFamily ( ) ) ) ; 
 - 
 - AbstractType < ? > validatorType = def . isReversedType ( ) & & ! validator . getType ( ) . isReversed ( ) 
 - ? ReversedType . getInstance ( validator . getType ( ) ) 
 - : validator . getType ( ) ; 
 - validateAlter ( cfm , def , validatorType ) ; 
 - / / In any case , we update the column definition 
 - cfm . addOrReplaceColumnDefinition ( def . withNewType ( validatorType ) ) ; 
 - 
 - / / We also have to validate the view types here . If we have a view which includes a column as part of 
 - / / the clustering key , we need to make sure that it is indeed compatible . 
 - for ( ViewDefinition view : views ) 
 - { 
 - if ( ! view . includes ( columnName ) ) continue ; 
 - ViewDefinition viewCopy = view . copy ( ) ; 
 - ColumnDefinition viewDef = view . metadata . getColumnDefinition ( columnName ) ; 
 - AbstractType viewType = viewDef . isReversedType ( ) & & ! validator . getType ( ) . isReversed ( ) 
 - ? ReversedType . getInstance ( validator . getType ( ) ) 
 - : validator . getType ( ) ; 
 - validateAlter ( view . metadata , viewDef , viewType ) ; 
 - viewCopy . metadata . addOrReplaceColumnDefinition ( viewDef . withNewType ( viewType ) ) ; 
 - 
 - if ( viewUpdates = = null ) 
 - viewUpdates = new ArrayList < > ( ) ; 
 - viewUpdates . add ( viewCopy ) ; 
 - } 
 - break ; 
 - 
 case DROP : 
 assert columnName ! = null ; 
 if ( ! cfm . isCQLTable ( ) ) 
 @ @ - 336 , 53 + 307 , 6 @ @ public class AlterTableStatement extends SchemaAlteringStatement 
 return new Event . SchemaChange ( Event . SchemaChange . Change . UPDATED , Event . SchemaChange . Target . TABLE , keyspace ( ) , columnFamily ( ) ) ; 
 } 
 
 - private static void validateAlter ( CFMetaData cfm , ColumnDefinition def , AbstractType < ? > validatorType ) 
 - { 
 - switch ( def . kind ) 
 - { 
 - case PARTITION _ KEY : 
 - if ( validatorType instanceof CounterColumnType ) 
 - throw new InvalidRequestException ( String . format ( " counter type is not supported for PRIMARY KEY part % s " , def . name ) ) ; 
 - 
 - AbstractType < ? > currentType = cfm . getKeyValidatorAsClusteringComparator ( ) . subtype ( def . position ( ) ) ; 
 - if ( ! validatorType . isValueCompatibleWith ( currentType ) ) 
 - throw new ConfigurationException ( String . format ( " Cannot change % s from type % s to type % s : types are incompatible . " , 
 - def . name , 
 - currentType . asCQL3Type ( ) , 
 - validatorType . asCQL3Type ( ) ) ) ; 
 - break ; 
 - case CLUSTERING : 
 - if ( ! cfm . isCQLTable ( ) ) 
 - throw new InvalidRequestException ( String . format ( " Cannot alter clustering column % s in a non - CQL3 table " , def . name ) ) ; 
 - 
 - AbstractType < ? > oldType = cfm . comparator . subtype ( def . position ( ) ) ; 
 - / / Note that CFMetaData . validateCompatibility already validate the change we ' re about to do . However , the error message it 
 - / / sends is a bit cryptic for a CQL3 user , so validating here for a sake of returning a better error message 
 - / / Do note that we need isCompatibleWith here , not just isValueCompatibleWith . 
 - if ( ! validatorType . isCompatibleWith ( oldType ) ) 
 - { 
 - throw new ConfigurationException ( String . format ( " Cannot change % s from type % s to type % s : types are not order - compatible . " , 
 - def . name , 
 - oldType . asCQL3Type ( ) , 
 - validatorType . asCQL3Type ( ) ) ) ; 
 - } 
 - break ; 
 - case REGULAR : 
 - case STATIC : 
 - / / Thrift allows to change a column validator so CFMetaData . validateCompatibility will let it slide 
 - / / if we change to an incompatible type ( contrarily to the comparator case ) . But we don ' t want to 
 - / / allow it for CQL3 ( see # 5882 ) so validating it explicitly here . We only care about value compatibility 
 - / / though since we won ' t compare values ( except when there is an index , but that is validated by 
 - / / ColumnDefinition already ) . 
 - if ( ! validatorType . isValueCompatibleWith ( def . type ) ) 
 - throw new ConfigurationException ( String . format ( " Cannot change % s from type % s to type % s : types are incompatible . " , 
 - def . name , 
 - def . type . asCQL3Type ( ) , 
 - validatorType . asCQL3Type ( ) ) ) ; 
 - break ; 
 - } 
 - } 
 - 
 public String toString ( ) 
 { 
 return String . format ( " AlterTableStatement ( name = % s , type = % s , column = % s , validator = % s ) " , 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java 
 index 4cac3b3 . . f2e1578 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java 
 @ @ - 54 , 12 + 54 , 12 @ @ public abstract class AlterTypeStatement extends SchemaAlteringStatement 
 
 public static AlterTypeStatement addition ( UTName name , ColumnIdentifier fieldName , CQL3Type . Raw type ) 
 { 
 - return new AddOrAlter ( name , true , fieldName , type ) ; 
 + return new Add ( name , fieldName , type ) ; 
 } 
 
 public static AlterTypeStatement alter ( UTName name , ColumnIdentifier fieldName , CQL3Type . Raw type ) 
 { 
 - return new AddOrAlter ( name , false , fieldName , type ) ; 
 + throw new InvalidRequestException ( " Altering of types is not allowed " ) ; 
 } 
 
 public static AlterTypeStatement renames ( UTName name , Map < ColumnIdentifier , ColumnIdentifier > renames ) 
 @ @ - 245 , 21 + 245 , 19 @ @ public abstract class AlterTypeStatement extends SchemaAlteringStatement 
 } ) ; 
 } 
 
 - private static class AddOrAlter extends AlterTypeStatement 
 + private static class Add extends AlterTypeStatement 
 { 
 - private final boolean isAdd ; 
 private final ColumnIdentifier fieldName ; 
 private final CQL3Type . Raw type ; 
 
 - public AddOrAlter ( UTName name , boolean isAdd , ColumnIdentifier fieldName , CQL3Type . Raw type ) 
 + public Add ( UTName name , ColumnIdentifier fieldName , CQL3Type . Raw type ) 
 { 
 super ( name ) ; 
 - this . isAdd = isAdd ; 
 this . fieldName = fieldName ; 
 this . type = type ; 
 } 
 
 - private UserType doAdd ( UserType toUpdate ) throws InvalidRequestException 
 + protected UserType makeUpdatedType ( UserType toUpdate , KeyspaceMetadata ksm ) throws InvalidRequestException 
 { 
 if ( getIdxOfField ( toUpdate , fieldName ) > = 0 ) 
 throw new InvalidRequestException ( String . format ( " Cannot add new field % s to type % s : a field of the same name already exists " , fieldName , name ) ) ; 
 @ @ - 278 , 30 + 276 , 6 @ @ public abstract class AlterTypeStatement extends SchemaAlteringStatement 
 
 return new UserType ( toUpdate . keyspace , toUpdate . name , newNames , newTypes ) ; 
 } 
 - 
 - private UserType doAlter ( UserType toUpdate , KeyspaceMetadata ksm ) throws InvalidRequestException 
 - { 
 - checkTypeNotUsedByAggregate ( ksm ) ; 
 - 
 - int idx = getIdxOfField ( toUpdate , fieldName ) ; 
 - if ( idx < 0 ) 
 - throw new InvalidRequestException ( String . format ( " Unknown field % s in type % s " , fieldName , name ) ) ; 
 - 
 - AbstractType < ? > previous = toUpdate . fieldType ( idx ) ; 
 - if ( ! type . prepare ( keyspace ( ) ) . getType ( ) . isCompatibleWith ( previous ) ) 
 - throw new InvalidRequestException ( String . format ( " Type % s is incompatible with previous type % s of field % s in user type % s " , type , previous . asCQL3Type ( ) , fieldName , name ) ) ; 
 - 
 - List < ByteBuffer > newNames = new ArrayList < > ( toUpdate . fieldNames ( ) ) ; 
 - List < AbstractType < ? > > newTypes = new ArrayList < > ( toUpdate . fieldTypes ( ) ) ; 
 - newTypes . set ( idx , type . prepare ( keyspace ( ) ) . getType ( ) ) ; 
 - 
 - return new UserType ( toUpdate . keyspace , toUpdate . name , newNames , newTypes ) ; 
 - } 
 - 
 - protected UserType makeUpdatedType ( UserType toUpdate , KeyspaceMetadata ksm ) throws InvalidRequestException 
 - { 
 - return isAdd ? doAdd ( toUpdate ) : doAlter ( toUpdate , ksm ) ; 
 - } 
 } 
 
 private static class Renames extends AlterTypeStatement 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / ViewSchemaTest . java b / test / unit / org / apache / cassandra / cql3 / ViewSchemaTest . java 
 index b34f475 . . 113fdf2 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / ViewSchemaTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / ViewSchemaTest . java 
 @ @ - 683 , 80 + 683 , 4 @ @ public class ViewSchemaTest extends CQLTester 
 Assert . assertEquals ( " Cannot use DROP TABLE on Materialized View " , e . getMessage ( ) ) ; 
 } 
 } 
 - 
 - @ Test 
 - public void testAlterTable ( ) throws Throwable 
 - { 
 - createTable ( " CREATE TABLE % s ( " + 
 - " a int , " + 
 - " b text , " + 
 - " PRIMARY KEY ( a , b ) ) " ) ; 
 - 
 - executeNet ( protocolVersion , " USE " + keyspace ( ) ) ; 
 - 
 - createView ( " mv1 " , " CREATE MATERIALIZED VIEW % s AS SELECT * FROM % % s WHERE a IS NOT NULL AND b IS NOT NULL PRIMARY KEY ( b , a ) " ) ; 
 - 
 - alterTable ( " ALTER TABLE % s ALTER b TYPE blob " ) ; 
 - } 
 - 
 - @ Test 
 - public void testAlterReversedTypeBaseTable ( ) throws Throwable 
 - { 
 - createTable ( " CREATE TABLE % s ( " + 
 - " a int , " + 
 - " b text , " + 
 - " PRIMARY KEY ( a , b ) ) " + 
 - " WITH CLUSTERING ORDER BY ( b DESC ) " ) ; 
 - 
 - executeNet ( protocolVersion , " USE " + keyspace ( ) ) ; 
 - 
 - createView ( " mv1 " , " CREATE MATERIALIZED VIEW % s AS SELECT * FROM % % s WHERE a IS NOT NULL AND b IS NOT NULL PRIMARY KEY ( a , b ) WITH CLUSTERING ORDER BY ( b ASC ) " ) ; 
 - 
 - alterTable ( " ALTER TABLE % s ALTER b TYPE blob " ) ; 
 - } 
 - 
 - @ Test 
 - public void testAlterReversedTypeViewTable ( ) throws Throwable 
 - { 
 - createTable ( " CREATE TABLE % s ( " + 
 - " a int , " + 
 - " b text , " + 
 - " PRIMARY KEY ( a , b ) ) " ) ; 
 - 
 - executeNet ( protocolVersion , " USE " + keyspace ( ) ) ; 
 - 
 - createView ( " mv1 " , " CREATE MATERIALIZED VIEW % s AS SELECT * FROM % % s WHERE a IS NOT NULL AND b IS NOT NULL PRIMARY KEY ( a , b ) WITH CLUSTERING ORDER BY ( b DESC ) " ) ; 
 - 
 - alterTable ( " ALTER TABLE % s ALTER b TYPE blob " ) ; 
 - } 
 - 
 - @ Test 
 - public void testAlterClusteringViewTable ( ) throws Throwable 
 - { 
 - createTable ( " CREATE TABLE % s ( " + 
 - " a int , " + 
 - " b text , " + 
 - " PRIMARY KEY ( a ) ) " ) ; 
 - 
 - executeNet ( protocolVersion , " USE " + keyspace ( ) ) ; 
 - 
 - createView ( " mv1 " , " CREATE MATERIALIZED VIEW % s AS SELECT * FROM % % s WHERE a IS NOT NULL AND b IS NOT NULL PRIMARY KEY ( a , b ) WITH CLUSTERING ORDER BY ( b DESC ) " ) ; 
 - 
 - alterTable ( " ALTER TABLE % s ALTER b TYPE blob " ) ; 
 - } 
 - 
 - @ Test 
 - public void testAlterViewTableValue ( ) throws Throwable 
 - { 
 - createTable ( " CREATE TABLE % s ( " + 
 - " a int , " + 
 - " b int , " + 
 - " PRIMARY KEY ( a ) ) " ) ; 
 - 
 - executeNet ( protocolVersion , " USE " + keyspace ( ) ) ; 
 - 
 - createView ( " mv1 " , " CREATE MATERIALIZED VIEW % s AS SELECT * FROM % % s WHERE a IS NOT NULL AND b IS NOT NULL PRIMARY KEY ( a , b ) WITH CLUSTERING ORDER BY ( b DESC ) " ) ; 
 - 
 - assertInvalid ( " ALTER TABLE % s ALTER b TYPE blob " ) ; 
 - } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / FrozenCollectionsTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / FrozenCollectionsTest . java 
 index 9df8ea0 . . f89163d 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / FrozenCollectionsTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / FrozenCollectionsTest . java 
 @ @ - 509 , 20 + 509 , 6 @ @ public class FrozenCollectionsTest extends CQLTester 
 } 
 } 
 
 - private void assertInvalidAlterWithMessage ( String createTableStatement , String errorMessage ) throws Throwable 
 - { 
 - try 
 - { 
 - alterTableMayThrow ( createTableStatement ) ; 
 - Assert . fail ( " Expected CREATE TABLE statement to error : " + createTableStatement ) ; 
 - } 
 - catch ( InvalidRequestException | ConfigurationException ex ) 
 - { 
 - Assert . assertTrue ( " Expected error message to contain ' " + errorMessage + " ' , but got ' " + ex . getMessage ( ) + " ' " , 
 - ex . getMessage ( ) . contains ( errorMessage ) ) ; 
 - } 
 - } 
 - 
 @ Test 
 public void testInvalidOperations ( ) throws Throwable 
 { 
 @ @ - 555 , 34 + 541 , 6 @ @ public class FrozenCollectionsTest extends CQLTester 
 " frozen < > is only allowed on collections , tuples , and user - defined types " ) ; 
 } 
 
 - @ Test 
 - public void testAltering ( ) throws Throwable 
 - { 
 - createTable ( " CREATE TABLE % s ( a int , b frozen < list < int > > , c frozen < list < int > > , PRIMARY KEY ( a , b ) ) " ) ; 
 - 
 - alterTable ( " ALTER TABLE % s ALTER c TYPE frozen < list < blob > > " ) ; 
 - 
 - assertInvalidAlterWithMessage ( " ALTER TABLE % s ALTER b TYPE frozen < list < blob > > " , 
 - " types are not order - compatible " ) ; 
 - 
 - assertInvalidAlterWithMessage ( " ALTER TABLE % s ALTER b TYPE list < int > " , 
 - " types are not order - compatible " ) ; 
 - 
 - assertInvalidAlterWithMessage ( " ALTER TABLE % s ALTER c TYPE list < blob > " , 
 - " types are incompatible " ) ; 
 - 
 - alterTable ( " ALTER TABLE % s DROP c " ) ; 
 - alterTable ( " ALTER TABLE % s ADD c frozen < set < int > > " ) ; 
 - assertInvalidAlterWithMessage ( " ALTER TABLE % s ALTER c TYPE frozen < set < blob > > " , 
 - " types are incompatible " ) ; 
 - 
 - alterTable ( " ALTER TABLE % s DROP c " ) ; 
 - alterTable ( " ALTER TABLE % s ADD c frozen < map < int , int > > " ) ; 
 - assertInvalidAlterWithMessage ( " ALTER TABLE % s ALTER c TYPE frozen < map < blob , int > > " , 
 - " types are incompatible " ) ; 
 - alterTable ( " ALTER TABLE % s ALTER c TYPE frozen < map < int , blob > > " ) ; 
 - } 
 - 
 private void assertInvalidIndexCreationWithMessage ( String statement , String errorMessage ) throws Throwable 
 { 
 try 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / TypeTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / TypeTest . java 
 index bcab807 . . 60a0fdc 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / TypeTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / TypeTest . java 
 @ @ - 67 , 36 + 67 , 4 @ @ public class TypeTest extends CQLTester 
 UntypedResultSet results = execute ( " SELECT * FROM % s WHERE a = 0 AND b < now ( ) " ) ; 
 assertEquals ( 1 , results . size ( ) ) ; 
 } 
 - 
 - @ Test 
 - / / tests CASSANDRA - 7797 
 - public void testAlterReversedColumn ( ) throws Throwable 
 - { 
 - createTable ( " CREATE TABLE IF NOT EXISTS % s ( a int , b ' org . apache . cassandra . db . marshal . DateType ' , PRIMARY KEY ( a , b ) ) WITH CLUSTERING ORDER BY ( b DESC ) " ) ; 
 - alterTable ( " ALTER TABLE % s ALTER b TYPE ' org . apache . cassandra . db . marshal . ReversedType ( org . apache . cassandra . db . marshal . TimestampType ) ' " ) ; 
 - } 
 - 
 - @ Test 
 - public void testIncompatibleReversedTypes ( ) throws Throwable 
 - { 
 - createTable ( " CREATE TABLE IF NOT EXISTS % s ( a int , b ' org . apache . cassandra . db . marshal . DateType ' , PRIMARY KEY ( a , b ) ) WITH CLUSTERING ORDER BY ( b DESC ) " ) ; 
 - try 
 - { 
 - alterTable ( " ALTER TABLE % s ALTER b TYPE ' org . apache . cassandra . db . marshal . ReversedType ( org . apache . cassandra . db . marshal . TimeUUIDType ) ' " ) ; 
 - fail ( " Expected error for ALTER statement " ) ; 
 - } 
 - catch ( RuntimeException e ) { } 
 - } 
 - 
 - @ Test 
 - public void testReversedAndNonReversed ( ) throws Throwable 
 - { 
 - createTable ( " CREATE TABLE IF NOT EXISTS % s ( a int , b ' org . apache . cassandra . db . marshal . DateType ' , PRIMARY KEY ( a , b ) ) " ) ; 
 - try 
 - { 
 - alterTable ( " ALTER TABLE % s ALTER b TYPE ' org . apache . cassandra . db . marshal . ReversedType ( org . apache . cassandra . db . marshal . DateType ) ' " ) ; 
 - fail ( " Expected error for ALTER statement " ) ; 
 - } 
 - catch ( RuntimeException e ) { } 
 - } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / UserTypesTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / UserTypesTest . java 
 index 850d8ee . . e776f0e 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / UserTypesTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / UserTypesTest . java 
 @ @ - 550 , 7 + 550 , 6 @ @ public class UserTypesTest extends CQLTester 
 private void assertInvalidAlterDropStatements ( String t ) throws Throwable 
 { 
 assertInvalidMessage ( " Cannot alter user type " + typeWithKs ( t ) , " ALTER TYPE " + typeWithKs ( t ) + " RENAME foo TO bar ; " ) ; 
 - assertInvalidMessage ( " Cannot alter user type " + typeWithKs ( t ) , " ALTER TYPE " + typeWithKs ( t ) + " ALTER foo TYPE text ; " ) ; 
 assertInvalidMessage ( " Cannot drop user type " + typeWithKs ( t ) , " DROP TYPE " + typeWithKs ( t ) + ' ; ' ) ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java 
 index bcd6587 . . 245be30 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java 
 @ @ - 343 , 37 + 343 , 6 @ @ public class AlterTest extends CQLTester 
 " ALTER TABLE % s WITH compression = { ' class ' : ' SnappyCompressor ' , ' chunk _ length _ kb ' : 32 , ' chunk _ length _ in _ kb ' : 32 } ; " ) ; 
 } 
 
 - @ Test 
 - public void testAlterType ( ) throws Throwable 
 - { 
 - createTable ( " CREATE TABLE % s ( id text PRIMARY KEY , content text ) ; " ) ; 
 - alterTable ( " ALTER TABLE % s ALTER content TYPE blob " ) ; 
 - 
 - createTable ( " CREATE TABLE % s ( pk int , ck text , value blob , PRIMARY KEY ( pk , ck ) ) WITH CLUSTERING ORDER BY ( ck DESC ) " ) ; 
 - alterTable ( " ALTER TABLE % s ALTER ck TYPE blob " ) ; 
 - 
 - createTable ( " CREATE TABLE % s ( pk int , ck int , value blob , PRIMARY KEY ( pk , ck ) ) " ) ; 
 - assertThrowsConfigurationException ( " Cannot change value from type blob to type text : types are incompatible . " , 
 - " ALTER TABLE % s ALTER value TYPE TEXT ; " ) ; 
 - } 
 - 
 - / * * 
 - * tests CASSANDRA - 10027 
 - * / 
 - @ Test 
 - public void testAlterColumnTypeToDate ( ) throws Throwable 
 - { 
 - createTable ( " CREATE TABLE % s ( key int PRIMARY KEY , c1 int ) ; " ) ; 
 - execute ( " INSERT INTO % s ( key , c1 ) VALUES ( 1 , 1 ) ; " ) ; 
 - execute ( " ALTER TABLE % s ALTER c1 TYPE date ; " ) ; 
 - assertRows ( execute ( " SELECT * FROM % s " ) , row ( 1 , 1 ) ) ; 
 - 
 - createTable ( " CREATE TABLE % s ( key int PRIMARY KEY , c1 varint ) ; " ) ; 
 - execute ( " INSERT INTO % s ( key , c1 ) VALUES ( 1 , 1 ) ; " ) ; 
 - assertInvalidMessage ( " Cannot change c1 from type varint to type date : types are incompatible . " , 
 - " ALTER TABLE % s ALTER c1 TYPE date ; " ) ; 
 - } 
 - 
 private void assertThrowsConfigurationException ( String errorMsg , String alterStmt ) throws Throwable 
 { 
 try 
 @ @ - 386 , 27 + 355 , 4 @ @ public class AlterTest extends CQLTester 
 assertEquals ( errorMsg , e . getMessage ( ) ) ; 
 } 
 } 
 - 
 - @ Test / / tests CASSANDRA - 8879 
 - public void testAlterClusteringColumnTypeInCompactTable ( ) throws Throwable 
 - { 
 - createTable ( " CREATE TABLE % s ( key blob , column1 blob , value blob , PRIMARY KEY ( ( key ) , column1 ) ) WITH COMPACT STORAGE " ) ; 
 - assertInvalidThrow ( InvalidRequestException . class , " ALTER TABLE % s ALTER column1 TYPE ascii " ) ; 
 - } 
 - 
 - @ Test 
 - public void testAlterToBlob ( ) throws Throwable 
 - { 
 - / / This tests for the bug from # 11820 in particular 
 - 
 - createTable ( " CREATE TABLE % s ( a int PRIMARY KEY , b int ) " ) ; 
 - 
 - execute ( " INSERT INTO % s ( a , b ) VALUES ( 1 , 1 ) " ) ; 
 - 
 - executeNet ( Server . CURRENT _ VERSION , " ALTER TABLE % s ALTER b TYPE BLOB " ) ; 
 - 
 - assertRowsNet ( Server . CURRENT _ VERSION , executeNet ( Server . CURRENT _ VERSION , " SELECT * FROM % s WHERE a = 1 " ) , 
 - row ( 1 , ByteBufferUtil . bytes ( 1 ) ) 
 - ) ; 
 - } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java 
 index 690d4f9 . . 0d81fa3 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java 
 @ @ - 28 , 38 + 28 , 6 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 public class UpdateTest extends CQLTester 
 { 
 - / * * 
 - * Test altering the type of a column , including the one in the primary key

NEAREST DIFF:
diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py 
 index 958b9ae . . 0e631ea 100644 
 - - - a / pylib / cqlshlib / cql3handling . py 
 + + + b / pylib / cqlshlib / cql3handling . py 
 @ @ - 1239 , 6 + 1239 , 8 @ @ syntax _ rules + = r ' ' ' 
 | " ADD " newcol = < cident > < storageType > 
 | " DROP " existcol = < cident > 
 | " WITH " < cfamProperty > ( " AND " < cfamProperty > ) * 
 + | " RENAME " existcol = < cident > " TO " newcol = < cident > 
 + ( " AND " existcol = < cident > " TO " newcol = < cident > ) * 
 ; 
 ' ' ' 
 
 diff - - git a / pylib / cqlshlib / helptopics . py b / pylib / cqlshlib / helptopics . py 
 index c9dae31 . . cdbb8f4 100644 
 - - - a / pylib / cqlshlib / helptopics . py 
 + + + b / pylib / cqlshlib / helptopics . py 
 @ @ - 902 , 8 + 902 , 37 @ @ class CQL3HelpTopics ( CQLHelpTopics ) : 
 print " HELP CREATE _ USER ; " 
 
 def help _ alter ( self ) : 
 - super ( CQL3HelpTopics , self ) . help _ alter ( ) 
 - print " HELP ALTER _ USER ; " 
 + print " " " 
 + ALTER TABLE < tablename > ALTER < columnname > TYPE < type > ; 
 + ALTER TABLE < tablename > ADD < columnname > < type > ; 
 + ALTER TABLE < tablename > RENAME < columnname > TO < columnname > 
 + [ AND < columnname > TO < columnname > ] 
 + ALTER TABLE < tablename > WITH < optionname > = < val > [ AND < optionname > = < val > [ . . . ] ] ; 
 + 
 + An ALTER statement is used to manipulate table metadata . It allows you 
 + to add new typed columns , drop existing columns , change the data 
 + storage type of existing columns , or change table properties . 
 + No results are returned . 
 + 
 + See one of the following for more information : 
 + 
 + HELP ALTER _ ALTER ; 
 + HELP ALTER _ ADD ; 
 + HELP ALTER _ DROP ; 
 + HELP ALTER _ RENAME ; 
 + HELP ALTER _ WITH ; 
 + " " " 
 + 
 + def help _ alter _ rename ( self ) : 
 + print " " " 
 + ALTER TABLE : renaming a column 
 + 
 + ALTER TABLE < tablename > RENAME < columnname > TO < columnname > 
 + [ AND < columnname > TO < columnname > ] 
 + 
 + The ALTER TABLE . . . RENAME variant renames a typed column in a column 
 + family . 
 + " " " 
 
 def help _ drop ( self ) : 
 super ( CQL3HelpTopics , self ) . help _ drop ( )
