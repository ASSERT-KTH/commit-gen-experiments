BLEU SCORE: 0.05795599612995367

TEST MSG: Provide user workaround for partially corrupt schema tables
GENERATED MSG: Migrate build status for indexes along with legacy schema

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e3bda6c . . ade3d5a 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 6 @ @ <nl> 3 . 0 . 11 <nl> + * Provide user workaround when system _ schema . columns does not contain entries <nl> + for a table that ' s in system _ schema . tables ( CASSANDRA - 13180 ) <nl> * Dump threads when unit tests time out ( CASSANDRA - 13117 ) <nl> * Better error when modifying function permissions without explicit keyspace ( CASSANDRA - 12925 ) <nl> * Indexer is not correctly invoked when building indexes over sstables ( CASSANDRA - 13075 ) <nl> diff - - git a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> index 84a5e13 . . eee4fbb 100644 <nl> - - - a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> @ @ - 67 , 6 + 67 , 7 @ @ public final class SchemaKeyspace <nl> private static final Logger logger = LoggerFactory . getLogger ( SchemaKeyspace . class ) ; <nl> <nl> private static final boolean FLUSH _ SCHEMA _ TABLES = Boolean . valueOf ( System . getProperty ( " cassandra . test . flush _ local _ schema _ changes " , " true " ) ) ; <nl> + private static final boolean IGNORE _ CORRUPTED _ SCHEMA _ TABLES = Boolean . valueOf ( System . getProperty ( " cassandra . ignore _ corrupted _ schema _ tables " , " false " ) ) ; <nl> <nl> public static final String NAME = " system _ schema " ; <nl> <nl> @ @ - 925 , 7 + 926 , 26 @ @ public final class SchemaKeyspace <nl> <nl> Tables . Builder tables = org . apache . cassandra . schema . Tables . builder ( ) ; <nl> for ( UntypedResultSet . Row row : query ( query , keyspaceName ) ) <nl> - tables . add ( fetchTable ( keyspaceName , row . getString ( " table _ name " ) , types ) ) ; <nl> + { <nl> + String tableName = row . getString ( " table _ name " ) ; <nl> + try <nl> + { <nl> + tables . add ( fetchTable ( keyspaceName , tableName , types ) ) ; <nl> + } <nl> + catch ( MissingColumns exc ) <nl> + { <nl> + if ( ! IGNORE _ CORRUPTED _ SCHEMA _ TABLES ) <nl> + { <nl> + logger . error ( " No columns found for table { } . { } in { } . { } . This may be due to " + <nl> + " corruption or concurrent dropping and altering of a table . If this table " + <nl> + " is supposed to be dropped , restart cassandra with - Dcassandra . ignore _ corrupted _ schema _ tables = true " + <nl> + " and run the following query : \ " DELETE FROM { } . { } WHERE keyspace _ name = ' { } ' AND table _ name = ' { } ' ; \ " . " + <nl> + " If the table is not supposed to be dropped , restore { } . { } sstables from backups . " , <nl> + keyspaceName , tableName , NAME , COLUMNS , NAME , TABLES , keyspaceName , tableName , NAME , COLUMNS ) ; <nl> + throw exc ; <nl> + } <nl> + } <nl> + } <nl> return tables . build ( ) ; <nl> } <nl> <nl> @ @ - 991 , 8 + 1011 , 12 @ @ public final class SchemaKeyspace <nl> private static List < ColumnDefinition > fetchColumns ( String keyspace , String table , Types types ) <nl> { <nl> String query = format ( " SELECT * FROM % s . % s WHERE keyspace _ name = ? AND table _ name = ? " , NAME , COLUMNS ) ; <nl> + UntypedResultSet columnRows = query ( query , keyspace , table ) ; <nl> + if ( columnRows . isEmpty ( ) ) <nl> + throw new MissingColumns ( " Columns not found in schema table for " + keyspace + " . " + table ) ; <nl> + <nl> List < ColumnDefinition > columns = new ArrayList < > ( ) ; <nl> - query ( query , keyspace , table ) . forEach ( row - > columns . add ( createColumnFromRow ( row , types ) ) ) ; <nl> + columnRows . forEach ( row - > columns . add ( createColumnFromRow ( row , types ) ) ) ; <nl> return columns ; <nl> } <nl> <nl> @ @ - 1399 , 4 + 1423 , 12 @ @ public final class SchemaKeyspace <nl> . map ( SchemaKeyspace : : expandUserTypes ) <nl> . collect ( toList ( ) ) ; <nl> } <nl> + <nl> + private static class MissingColumns extends RuntimeException <nl> + { <nl> + MissingColumns ( String message ) <nl> + { <nl> + super ( message ) ; <nl> + } <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e3bda6c . . ade3d5a 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 6 @ @ 
 3 . 0 . 11 
 + * Provide user workaround when system _ schema . columns does not contain entries 
 + for a table that ' s in system _ schema . tables ( CASSANDRA - 13180 ) 
 * Dump threads when unit tests time out ( CASSANDRA - 13117 ) 
 * Better error when modifying function permissions without explicit keyspace ( CASSANDRA - 12925 ) 
 * Indexer is not correctly invoked when building indexes over sstables ( CASSANDRA - 13075 ) 
 diff - - git a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 index 84a5e13 . . eee4fbb 100644 
 - - - a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 + + + b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 @ @ - 67 , 6 + 67 , 7 @ @ public final class SchemaKeyspace 
 private static final Logger logger = LoggerFactory . getLogger ( SchemaKeyspace . class ) ; 
 
 private static final boolean FLUSH _ SCHEMA _ TABLES = Boolean . valueOf ( System . getProperty ( " cassandra . test . flush _ local _ schema _ changes " , " true " ) ) ; 
 + private static final boolean IGNORE _ CORRUPTED _ SCHEMA _ TABLES = Boolean . valueOf ( System . getProperty ( " cassandra . ignore _ corrupted _ schema _ tables " , " false " ) ) ; 
 
 public static final String NAME = " system _ schema " ; 
 
 @ @ - 925 , 7 + 926 , 26 @ @ public final class SchemaKeyspace 
 
 Tables . Builder tables = org . apache . cassandra . schema . Tables . builder ( ) ; 
 for ( UntypedResultSet . Row row : query ( query , keyspaceName ) ) 
 - tables . add ( fetchTable ( keyspaceName , row . getString ( " table _ name " ) , types ) ) ; 
 + { 
 + String tableName = row . getString ( " table _ name " ) ; 
 + try 
 + { 
 + tables . add ( fetchTable ( keyspaceName , tableName , types ) ) ; 
 + } 
 + catch ( MissingColumns exc ) 
 + { 
 + if ( ! IGNORE _ CORRUPTED _ SCHEMA _ TABLES ) 
 + { 
 + logger . error ( " No columns found for table { } . { } in { } . { } . This may be due to " + 
 + " corruption or concurrent dropping and altering of a table . If this table " + 
 + " is supposed to be dropped , restart cassandra with - Dcassandra . ignore _ corrupted _ schema _ tables = true " + 
 + " and run the following query : \ " DELETE FROM { } . { } WHERE keyspace _ name = ' { } ' AND table _ name = ' { } ' ; \ " . " + 
 + " If the table is not supposed to be dropped , restore { } . { } sstables from backups . " , 
 + keyspaceName , tableName , NAME , COLUMNS , NAME , TABLES , keyspaceName , tableName , NAME , COLUMNS ) ; 
 + throw exc ; 
 + } 
 + } 
 + } 
 return tables . build ( ) ; 
 } 
 
 @ @ - 991 , 8 + 1011 , 12 @ @ public final class SchemaKeyspace 
 private static List < ColumnDefinition > fetchColumns ( String keyspace , String table , Types types ) 
 { 
 String query = format ( " SELECT * FROM % s . % s WHERE keyspace _ name = ? AND table _ name = ? " , NAME , COLUMNS ) ; 
 + UntypedResultSet columnRows = query ( query , keyspace , table ) ; 
 + if ( columnRows . isEmpty ( ) ) 
 + throw new MissingColumns ( " Columns not found in schema table for " + keyspace + " . " + table ) ; 
 + 
 List < ColumnDefinition > columns = new ArrayList < > ( ) ; 
 - query ( query , keyspace , table ) . forEach ( row - > columns . add ( createColumnFromRow ( row , types ) ) ) ; 
 + columnRows . forEach ( row - > columns . add ( createColumnFromRow ( row , types ) ) ) ; 
 return columns ; 
 } 
 
 @ @ - 1399 , 4 + 1423 , 12 @ @ public final class SchemaKeyspace 
 . map ( SchemaKeyspace : : expandUserTypes ) 
 . collect ( toList ( ) ) ; 
 } 
 + 
 + private static class MissingColumns extends RuntimeException 
 + { 
 + MissingColumns ( String message ) 
 + { 
 + super ( message ) ; 
 + } 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
