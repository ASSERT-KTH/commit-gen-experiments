BLEU SCORE: 0.03283637368030199

TEST MSG: Fix DC and Rack in nodetool info
GENERATED MSG: Expose data _ dir through JMX .

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index ffe219e . . 8a2e71e 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 1416 , 7 + 1416 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> return getTokenMetadata ( ) . getHostId ( FBUtilities . getBroadcastAddress ( ) ) . toString ( ) ; <nl> } <nl> <nl> - public Map < String , String > getHostIdMap ( ) <nl> + public Map < String , String > getEndpointToHostId ( ) <nl> { <nl> Map < String , String > mapOut = new HashMap < > ( ) ; <nl> for ( Map . Entry < InetAddress , UUID > entry : getTokenMetadata ( ) . getEndpointToHostIdMapForReading ( ) . entrySet ( ) ) <nl> @ @ - 1424 , 6 + 1424 , 14 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> return mapOut ; <nl> } <nl> <nl> + public Map < String , String > getHostIdToEndpoint ( ) <nl> + { <nl> + Map < String , String > mapOut = new HashMap < > ( ) ; <nl> + for ( Map . Entry < InetAddress , UUID > entry : getTokenMetadata ( ) . getEndpointToHostIdMapForReading ( ) . entrySet ( ) ) <nl> + mapOut . put ( entry . getValue ( ) . toString ( ) , entry . getKey ( ) . getHostAddress ( ) ) ; <nl> + return mapOut ; <nl> + } <nl> + <nl> / * * <nl> * Construct the range to endpoint mapping based on the true view <nl> * of the world . <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index 1f86d82 . . 7e74947 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 159 , 7 + 159 , 10 @ @ public interface StorageServiceMBean extends NotificationEmitter <nl> public String getLocalHostId ( ) ; <nl> <nl> / * * Retrieve the mapping of endpoint to host ID * / <nl> - public Map < String , String > getHostIdMap ( ) ; <nl> + public Map < String , String > getEndpointToHostId ( ) ; <nl> + <nl> + / * * Retrieve the mapping of host ID to endpoint * / <nl> + public Map < String , String > getHostIdToEndpoint ( ) ; <nl> <nl> / * * <nl> * Numeric load value . <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index caa12c3 . . 6f2b6fb 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 502 , 7 + 502 , 7 @ @ public class NodeProbe implements AutoCloseable <nl> <nl> public Map < String , String > getHostIdMap ( ) <nl> { <nl> - return ssProxy . getHostIdMap ( ) ; <nl> + return ssProxy . getEndpointToHostId ( ) ; <nl> } <nl> <nl> public String getLoadString ( ) <nl> @ @ - 807 , 7 + 807 , 7 @ @ public class NodeProbe implements AutoCloseable <nl> <nl> public String getEndpoint ( ) <nl> { <nl> - Map < String , String > hostIdToEndpoint = ssProxy . getHostIdMap ( ) ; <nl> + Map < String , String > hostIdToEndpoint = ssProxy . getHostIdToEndpoint ( ) ; <nl> return hostIdToEndpoint . get ( ssProxy . getLocalHostId ( ) ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java <nl> index bdf6d92 . . 7999095 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliClient . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliClient . java <nl> @ @ - 278 , 20 + 278 , 42 @ @ public class CliClient extends CliUserHelp <nl> sessionState . out . println ( " Invalid row , super column , or column specification . " ) ; <nl> return ; <nl> } <nl> - <nl> + <nl> + Tree columnTree = ( columnSpecCnt > = 1 ) <nl> + ? columnFamilySpec . getChild ( 2 ) <nl> + : null ; <nl> + <nl> + Tree subColumnTree = ( columnSpecCnt = = 2 ) <nl> + ? columnFamilySpec . getChild ( 3 ) <nl> + : null ; <nl> + <nl> if ( columnSpecCnt = = 1 ) <nl> { <nl> / / table . cf [ ' key ' ] [ ' column ' ] <nl> + assert columnTree ! = null ; <nl> + <nl> + byte [ ] columnNameBytes = ( columnTree . getType ( ) = = CliParser . FUNCTION _ CALL ) <nl> + ? convertValueByFunction ( columnTree , null , null ) . array ( ) <nl> + : columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , cfDef ) ; <nl> + <nl> if ( isSuper ) <nl> - superColumnName = columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , cfDef ) ; <nl> + superColumnName = columnNameBytes ; <nl> else <nl> - columnName = columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , cfDef ) ; <nl> + columnName = columnNameBytes ; <nl> } <nl> else if ( columnSpecCnt = = 2 ) <nl> { <nl> + assert columnTree ! = null ; <nl> + assert subColumnTree ! = null ; <nl> + <nl> / / table . cf [ ' key ' ] [ ' column ' ] [ ' column ' ] <nl> - superColumnName = columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , cfDef ) ; <nl> - columnName = subColumnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 1 ) , cfDef ) ; <nl> + superColumnName = ( columnTree . getType ( ) = = CliParser . FUNCTION _ CALL ) <nl> + ? convertValueByFunction ( columnTree , null , null ) . array ( ) <nl> + : columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , cfDef ) ; <nl> + <nl> + columnName = ( subColumnTree . getType ( ) = = CliParser . FUNCTION _ CALL ) <nl> + ? convertValueByFunction ( subColumnTree , null , null ) . array ( ) <nl> + : subColumnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 1 ) , cfDef ) ; <nl> } <nl> <nl> ColumnPath path = new ColumnPath ( columnFamily ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> index cbd1a9f . . 4795c60 100644 <nl> - - - a / test / unit / org / apache / cassandra / cli / CliTest . java <nl> + + + b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> @ @ - 53 , 6 + 53 , 8 @ @ public class CliTest extends CleanupHelper <nl> " get CF1 where world2 = long ( 15 ) ; " , <nl> " get cF1 where world2 = long ( 15 ) ; " , <nl> " get Cf1 where world2 = long ( 15 ) ; " , <nl> + " del CF1 [ utf8 ( ' hello ' ) ] [ utf8 ( ' world ' ) ] ; " , <nl> + " del CF1 [ hello ] [ world2 ] ; " , <nl> " set CF1 [ ' hello ' ] [ time _ spent _ uuid ] = timeuuid ( a8098c1a - f86e - 11da - bd1a - 00112444be1e ) ; " , <nl> " create column family CF2 with comparator = IntegerType ; " , <nl> " set CF2 [ ' key ' ] [ 98349387493847748398334 ] = ' some text ' ; " ,

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index ffe219e . . 8a2e71e 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 1416 , 7 + 1416 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 return getTokenMetadata ( ) . getHostId ( FBUtilities . getBroadcastAddress ( ) ) . toString ( ) ; 
 } 
 
 - public Map < String , String > getHostIdMap ( ) 
 + public Map < String , String > getEndpointToHostId ( ) 
 { 
 Map < String , String > mapOut = new HashMap < > ( ) ; 
 for ( Map . Entry < InetAddress , UUID > entry : getTokenMetadata ( ) . getEndpointToHostIdMapForReading ( ) . entrySet ( ) ) 
 @ @ - 1424 , 6 + 1424 , 14 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 return mapOut ; 
 } 
 
 + public Map < String , String > getHostIdToEndpoint ( ) 
 + { 
 + Map < String , String > mapOut = new HashMap < > ( ) ; 
 + for ( Map . Entry < InetAddress , UUID > entry : getTokenMetadata ( ) . getEndpointToHostIdMapForReading ( ) . entrySet ( ) ) 
 + mapOut . put ( entry . getValue ( ) . toString ( ) , entry . getKey ( ) . getHostAddress ( ) ) ; 
 + return mapOut ; 
 + } 
 + 
 / * * 
 * Construct the range to endpoint mapping based on the true view 
 * of the world . 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index 1f86d82 . . 7e74947 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 159 , 7 + 159 , 10 @ @ public interface StorageServiceMBean extends NotificationEmitter 
 public String getLocalHostId ( ) ; 
 
 / * * Retrieve the mapping of endpoint to host ID * / 
 - public Map < String , String > getHostIdMap ( ) ; 
 + public Map < String , String > getEndpointToHostId ( ) ; 
 + 
 + / * * Retrieve the mapping of host ID to endpoint * / 
 + public Map < String , String > getHostIdToEndpoint ( ) ; 
 
 / * * 
 * Numeric load value . 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index caa12c3 . . 6f2b6fb 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 502 , 7 + 502 , 7 @ @ public class NodeProbe implements AutoCloseable 
 
 public Map < String , String > getHostIdMap ( ) 
 { 
 - return ssProxy . getHostIdMap ( ) ; 
 + return ssProxy . getEndpointToHostId ( ) ; 
 } 
 
 public String getLoadString ( ) 
 @ @ - 807 , 7 + 807 , 7 @ @ public class NodeProbe implements AutoCloseable 
 
 public String getEndpoint ( ) 
 { 
 - Map < String , String > hostIdToEndpoint = ssProxy . getHostIdMap ( ) ; 
 + Map < String , String > hostIdToEndpoint = ssProxy . getHostIdToEndpoint ( ) ; 
 return hostIdToEndpoint . get ( ssProxy . getLocalHostId ( ) ) ; 
 } 


NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java 
 index bdf6d92 . . 7999095 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliClient . java 
 + + + b / src / java / org / apache / cassandra / cli / CliClient . java 
 @ @ - 278 , 20 + 278 , 42 @ @ public class CliClient extends CliUserHelp 
 sessionState . out . println ( " Invalid row , super column , or column specification . " ) ; 
 return ; 
 } 
 - 
 + 
 + Tree columnTree = ( columnSpecCnt > = 1 ) 
 + ? columnFamilySpec . getChild ( 2 ) 
 + : null ; 
 + 
 + Tree subColumnTree = ( columnSpecCnt = = 2 ) 
 + ? columnFamilySpec . getChild ( 3 ) 
 + : null ; 
 + 
 if ( columnSpecCnt = = 1 ) 
 { 
 / / table . cf [ ' key ' ] [ ' column ' ] 
 + assert columnTree ! = null ; 
 + 
 + byte [ ] columnNameBytes = ( columnTree . getType ( ) = = CliParser . FUNCTION _ CALL ) 
 + ? convertValueByFunction ( columnTree , null , null ) . array ( ) 
 + : columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , cfDef ) ; 
 + 
 if ( isSuper ) 
 - superColumnName = columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , cfDef ) ; 
 + superColumnName = columnNameBytes ; 
 else 
 - columnName = columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , cfDef ) ; 
 + columnName = columnNameBytes ; 
 } 
 else if ( columnSpecCnt = = 2 ) 
 { 
 + assert columnTree ! = null ; 
 + assert subColumnTree ! = null ; 
 + 
 / / table . cf [ ' key ' ] [ ' column ' ] [ ' column ' ] 
 - superColumnName = columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , cfDef ) ; 
 - columnName = subColumnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 1 ) , cfDef ) ; 
 + superColumnName = ( columnTree . getType ( ) = = CliParser . FUNCTION _ CALL ) 
 + ? convertValueByFunction ( columnTree , null , null ) . array ( ) 
 + : columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , cfDef ) ; 
 + 
 + columnName = ( subColumnTree . getType ( ) = = CliParser . FUNCTION _ CALL ) 
 + ? convertValueByFunction ( subColumnTree , null , null ) . array ( ) 
 + : subColumnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 1 ) , cfDef ) ; 
 } 
 
 ColumnPath path = new ColumnPath ( columnFamily ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java 
 index cbd1a9f . . 4795c60 100644 
 - - - a / test / unit / org / apache / cassandra / cli / CliTest . java 
 + + + b / test / unit / org / apache / cassandra / cli / CliTest . java 
 @ @ - 53 , 6 + 53 , 8 @ @ public class CliTest extends CleanupHelper 
 " get CF1 where world2 = long ( 15 ) ; " , 
 " get cF1 where world2 = long ( 15 ) ; " , 
 " get Cf1 where world2 = long ( 15 ) ; " , 
 + " del CF1 [ utf8 ( ' hello ' ) ] [ utf8 ( ' world ' ) ] ; " , 
 + " del CF1 [ hello ] [ world2 ] ; " , 
 " set CF1 [ ' hello ' ] [ time _ spent _ uuid ] = timeuuid ( a8098c1a - f86e - 11da - bd1a - 00112444be1e ) ; " , 
 " create column family CF2 with comparator = IntegerType ; " , 
 " set CF2 [ ' key ' ] [ 98349387493847748398334 ] = ' some text ' ; " ,
