BLEU SCORE: 0.020980574531482755

TEST MSG: Partitioned outbound internode TCP connections can occur when nodes restart
GENERATED MSG: merge from 1 . 0

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b7c0398 . . 41b3da9 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Partitioned outbound internode TCP connections can occur when nodes restart ( CASSANDRA - 14358 ) <nl> * Don ' t write to system _ distributed . repair _ history , system _ traces . sessions , system _ traces . events in mixed version 3 . X / 4 . 0 clusters ( CASSANDRA - 14841 ) <nl> * Avoid running query to self through messaging service ( CASSANDRA - 14807 ) <nl> * Allow using custom script for chronicle queue BinLog archival ( CASSANDRA - 14373 ) <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index 3267c91 . . 0d211a3 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 185 , 6 + 185 , 14 @ @ Upgrading <nl> - Background repair has been removed . dclocal _ read _ repair _ chance and <nl> read _ repair _ chance table options have been removed and are now rejected . <nl> See CASSANDRA - 13910 for details . <nl> + - Internode TCP connections that do not ack segments for 30s will now <nl> + be automatically detected and closed via the Linux TCP _ USER _ TIMEOUT <nl> + socket option . This should be exceedingly rare , but AWS networks ( and <nl> + other stateful firewalls ) apparently suffer from this issue . You can <nl> + tune the timeouts on TCP connection and segment ack via the <nl> + ` cassandra . yaml : internode _ tcp _ connect _ timeout _ in _ ms ` and <nl> + ` cassandra . yaml : internode _ tcp _ user _ timeout _ in _ ms ` options respectively . <nl> + See CASSANDRA - 14358 for details . <nl> <nl> Materialized Views <nl> - - - - - - - - - - - - - - - - - - - <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index d72b2e8 . . 0a92d4c 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 847 , 6 + 847 , 18 @ @ truncate _ request _ timeout _ in _ ms : 60000 <nl> # Lowest acceptable value is 10 ms . <nl> request _ timeout _ in _ ms : 10000 <nl> <nl> + # Defensive settings for protecting Cassandra from true network partitions . <nl> + # See ( CASSANDRA - 14358 ) for details . <nl> + # <nl> + # The amount of time to wait for internode tcp connections to establish . <nl> + # internode _ tcp _ connect _ timeout _ in _ ms = 2000 <nl> + # <nl> + # The amount of time unacknowledged data is allowed on a connection before we throw out the connection <nl> + # Note this is only supported on Linux + epoll , and it appears to behave oddly above a setting of 30000 <nl> + # ( it takes much longer than 30s ) as of Linux 4 . 12 . If you want something that high set this to 0 <nl> + # which picks up the OS default and configure the net . ipv4 . tcp _ retries2 sysctl to be ~ 8 . <nl> + # internode _ tcp _ user _ timeout _ in _ ms = 30000 <nl> + <nl> # How long before a node logs slow queries . Select queries that take longer than <nl> # this timeout to execute , will generate an aggregated log message , so that slow queries <nl> # can be identified . Set this value to zero to disable slow query logging . <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index 9049131 . . 1e80108 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 145 , 6 + 145 , 14 @ @ public class Config <nl> public boolean rpc _ keepalive = true ; <nl> public int internode _ send _ buff _ size _ in _ bytes = 0 ; <nl> public int internode _ recv _ buff _ size _ in _ bytes = 0 ; <nl> + / / Defensive settings for protecting Cassandra from true network partitions . See ( CASSANDRA - 14358 ) for details . <nl> + / / The amount of time to wait for internode tcp connections to establish . <nl> + public int internode _ tcp _ connect _ timeout _ in _ ms = 2000 ; <nl> + / / The amount of time unacknowledged data is allowed on a connection before we throw out the connection <nl> + / / Note this is only supported on Linux + epoll , and it appears to behave oddly above a setting of 30000 <nl> + / / ( it takes much longer than 30s ) as of Linux 4 . 12 . If you want something that high set this to 0 <nl> + / / ( which picks up the OS default ) and configure the net . ipv4 . tcp _ retries2 sysctl to be ~ 8 . <nl> + public int internode _ tcp _ user _ timeout _ in _ ms = 30000 ; <nl> <nl> public boolean start _ native _ transport = true ; <nl> public int native _ transport _ port = 9042 ; <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index de87de5 . . 1b11a91 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 1803 , 6 + 1803 , 26 @ @ public class DatabaseDescriptor <nl> return conf . internode _ recv _ buff _ size _ in _ bytes ; <nl> } <nl> <nl> + public static int getInternodeTcpConnectTimeoutInMS ( ) <nl> + { <nl> + return conf . internode _ tcp _ connect _ timeout _ in _ ms ; <nl> + } <nl> + <nl> + public static void setInternodeTcpConnectTimeoutInMS ( int value ) <nl> + { <nl> + conf . internode _ tcp _ connect _ timeout _ in _ ms = value ; <nl> + } <nl> + <nl> + public static int getInternodeTcpUserTimeoutInMS ( ) <nl> + { <nl> + return conf . internode _ tcp _ user _ timeout _ in _ ms ; <nl> + } <nl> + <nl> + public static void setInternodeTcpUserTimeoutInMS ( int value ) <nl> + { <nl> + conf . internode _ tcp _ user _ timeout _ in _ ms = value ; <nl> + } <nl> + <nl> public static boolean startNativeTransport ( ) <nl> { <nl> return conf . start _ native _ transport ; <nl> diff - - git a / src / java / org / apache / cassandra / net / async / NettyFactory . java b / src / java / org / apache / cassandra / net / async / NettyFactory . java <nl> index 5bbac45 . . 989e33c 100644 <nl> - - - a / src / java / org / apache / cassandra / net / async / NettyFactory . java <nl> + + + b / src / java / org / apache / cassandra / net / async / NettyFactory . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import io . netty . channel . ChannelOption ; <nl> import io . netty . channel . ChannelPipeline ; <nl> import io . netty . channel . EventLoopGroup ; <nl> import io . netty . channel . ServerChannel ; <nl> + import io . netty . channel . epoll . EpollChannelOption ; <nl> import io . netty . channel . epoll . EpollEventLoopGroup ; <nl> import io . netty . channel . epoll . EpollServerSocketChannel ; <nl> import io . netty . channel . epoll . EpollSocketChannel ; <nl> @ @ - 200 , 6 + 201 , 9 @ @ public final class NettyFactory <nl> . childOption ( ChannelOption . SO _ SNDBUF , INBOUND _ CHANNEL _ SEND _ BUFFER _ SIZE ) <nl> . childHandler ( initializer ) ; <nl> <nl> + if ( useEpoll ) <nl> + bootstrap . childOption ( EpollChannelOption . TCP _ USER _ TIMEOUT , DatabaseDescriptor . getInternodeTcpUserTimeoutInMS ( ) ) ; <nl> + <nl> if ( receiveBufferSize > 0 ) <nl> bootstrap . childOption ( ChannelOption . SO _ RCVBUF , receiveBufferSize ) ; <nl> <nl> @ @ - 326 , 7 + 330 , 7 @ @ public final class NettyFactory <nl> Class < ? extends Channel > transport = useEpoll ? EpollSocketChannel . class : NioSocketChannel . class ; <nl> Bootstrap bootstrap = new Bootstrap ( ) . group ( params . mode = = Mode . MESSAGING ? outboundGroup : streamingGroup ) <nl> . channel ( transport ) <nl> - . option ( ChannelOption . CONNECT _ TIMEOUT _ MILLIS , 2000 ) <nl> + . option ( ChannelOption . CONNECT _ TIMEOUT _ MILLIS , params . tcpConnectTimeoutInMS ) <nl> . option ( ChannelOption . SO _ KEEPALIVE , true ) <nl> . option ( ChannelOption . SO _ REUSEADDR , true ) <nl> . option ( ChannelOption . SO _ SNDBUF , params . sendBufferSize ) <nl> @ @ - 334 , 6 + 338 , 9 @ @ public final class NettyFactory <nl> . option ( ChannelOption . TCP _ NODELAY , params . tcpNoDelay ) <nl> . option ( ChannelOption . WRITE _ BUFFER _ WATER _ MARK , params . waterMark ) <nl> . handler ( new OutboundInitializer ( params ) ) ; <nl> + if ( useEpoll ) <nl> + bootstrap . option ( EpollChannelOption . TCP _ USER _ TIMEOUT , params . tcpUserTimeoutInMS ) ; <nl> + <nl> InetAddressAndPort remoteAddress = params . connectionId . connectionAddress ( ) ; <nl> bootstrap . remoteAddress ( new InetSocketAddress ( remoteAddress . address , remoteAddress . port ) ) ; <nl> return bootstrap ; <nl> diff - - git a / src / java / org / apache / cassandra / net / async / OutboundConnectionParams . java b / src / java / org / apache / cassandra / net / async / OutboundConnectionParams . java <nl> index 282480e . . 64968c6 100644 <nl> - - - a / src / java / org / apache / cassandra / net / async / OutboundConnectionParams . java <nl> + + + b / src / java / org / apache / cassandra / net / async / OutboundConnectionParams . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . util . function . Supplier ; <nl> import com . google . common . base . Preconditions ; <nl> <nl> import io . netty . channel . WriteBufferWaterMark ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . EncryptionOptions . ServerEncryptionOptions ; <nl> import org . apache . cassandra . net . async . OutboundHandshakeHandler . HandshakeResult ; <nl> import org . apache . cassandra . utils . CoalescingStrategies . CoalescingStrategy ; <nl> @ @ - 48 , 6 + 49 , 8 @ @ public class OutboundConnectionParams <nl> final Consumer < MessageResult > messageResultConsumer ; <nl> final WriteBufferWaterMark waterMark ; <nl> final int protocolVersion ; <nl> + final int tcpConnectTimeoutInMS ; <nl> + final int tcpUserTimeoutInMS ; <nl> <nl> private OutboundConnectionParams ( OutboundConnectionIdentifier connectionId , <nl> Consumer < HandshakeResult > callback , <nl> @ @ - 60 , 7 + 63 , 9 @ @ public class OutboundConnectionParams <nl> Supplier < QueuedMessage > backlogSupplier , <nl> Consumer < MessageResult > messageResultConsumer , <nl> WriteBufferWaterMark waterMark , <nl> - int protocolVersion ) <nl> + int protocolVersion , <nl> + int tcpConnectTimeoutInMS , <nl> + int tcpUserTimeoutInMS ) <nl> { <nl> this . connectionId = connectionId ; <nl> this . callback = callback ; <nl> @ @ - 74 , 6 + 79 , 8 @ @ public class OutboundConnectionParams <nl> this . messageResultConsumer = messageResultConsumer ; <nl> this . waterMark = waterMark ; <nl> this . protocolVersion = protocolVersion ; <nl> + this . tcpConnectTimeoutInMS = tcpConnectTimeoutInMS ; <nl> + this . tcpUserTimeoutInMS = tcpUserTimeoutInMS ; <nl> } <nl> <nl> public static Builder builder ( ) <nl> @ @ - 99 , 10 + 106 , 15 @ @ public class OutboundConnectionParams <nl> private Supplier < QueuedMessage > backlogSupplier ; <nl> private Consumer < MessageResult > messageResultConsumer ; <nl> private WriteBufferWaterMark waterMark = WriteBufferWaterMark . DEFAULT ; <nl> - int protocolVersion ; <nl> + private int protocolVersion ; <nl> + private int tcpConnectTimeoutInMS ; <nl> + private int tcpUserTimeoutInMS ; <nl> <nl> private Builder ( ) <nl> - { } <nl> + { <nl> + this . tcpConnectTimeoutInMS = DatabaseDescriptor . getInternodeTcpConnectTimeoutInMS ( ) ; <nl> + this . tcpUserTimeoutInMS = DatabaseDescriptor . getInternodeTcpUserTimeoutInMS ( ) ; <nl> + } <nl> <nl> private Builder ( OutboundConnectionParams params ) <nl> { <nl> @ @ - 116 , 6 + 128 , 8 @ @ public class OutboundConnectionParams <nl> this . tcpNoDelay = params . tcpNoDelay ; <nl> this . backlogSupplier = params . backlogSupplier ; <nl> this . messageResultConsumer = params . messageResultConsumer ; <nl> + this . tcpConnectTimeoutInMS = params . tcpConnectTimeoutInMS ; <nl> + this . tcpUserTimeoutInMS = params . tcpUserTimeoutInMS ; <nl> } <nl> <nl> public Builder connectionId ( OutboundConnectionIdentifier connectionId ) <nl> @ @ - 190 , 13 + 204 , 27 @ @ public class OutboundConnectionParams <nl> return this ; <nl> } <nl> <nl> + public Builder tcpConnectTimeoutInMS ( int tcpConnectTimeoutInMS ) <nl> + { <nl> + this . tcpConnectTimeoutInMS = tcpConnectTimeoutInMS ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder tcpUserTimeoutInMS ( int tcpUserTimeoutInMS ) <nl> + { <nl> + this . tcpUserTimeoutInMS = tcpUserTimeoutInMS ; <nl> + return this ; <nl> + } <nl> + <nl> public OutboundConnectionParams build ( ) <nl> { <nl> Preconditions . checkArgument ( protocolVersion > 0 , " illegal protocol version : " + protocolVersion ) ; <nl> Preconditions . checkArgument ( sendBufferSize > 0 & & sendBufferSize < 1 < < 20 , " illegal send buffer size : " + sendBufferSize ) ; <nl> + Preconditions . checkArgument ( tcpUserTimeoutInMS > = 0 , " tcp user timeout must be non negative : " + tcpUserTimeoutInMS ) ; <nl> + Preconditions . checkArgument ( tcpConnectTimeoutInMS > 0 , " tcp connect timeout must be positive : " + tcpConnectTimeoutInMS ) ; <nl> <nl> return new OutboundConnectionParams ( connectionId , callback , encryptionOptions , mode , compress , coalescingStrategy , sendBufferSize , <nl> - tcpNoDelay , backlogSupplier , messageResultConsumer , waterMark , protocolVersion ) ; <nl> + tcpNoDelay , backlogSupplier , messageResultConsumer , waterMark , protocolVersion , tcpConnectTimeoutInMS , tcpUserTimeoutInMS ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / net / async / OutboundMessagingConnection . java b / src / java / org / apache / cassandra / net / async / OutboundMessagingConnection . java <nl> index 064131b . . 265ece9 100644 <nl> - - - a / src / java / org / apache / cassandra / net / async / OutboundMessagingConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / async / OutboundMessagingConnection . java <nl> @ @ - 19 , 8 + 19 , 6 @ @ <nl> package org . apache . cassandra . net . async ; <nl> <nl> import java . io . IOException ; <nl> - import java . net . InetAddress ; <nl> - import java . net . InetSocketAddress ; <nl> import java . util . Optional ; <nl> import java . util . Queue ; <nl> import java . util . concurrent . ConcurrentLinkedQueue ; <nl> @ @ - 323 , 6 + 321 , 9 @ @ public class OutboundMessagingConnection <nl> ? DatabaseDescriptor . getInternodeSendBufferSize ( ) <nl> : OutboundConnectionParams . DEFAULT _ SEND _ BUFFER _ SIZE ; <nl> <nl> + int tcpConnectTimeout = DatabaseDescriptor . getInternodeTcpConnectTimeoutInMS ( ) ; <nl> + int tcpUserTimeout = DatabaseDescriptor . getInternodeTcpUserTimeoutInMS ( ) ; <nl> + <nl> OutboundConnectionParams params = OutboundConnectionParams . builder ( ) <nl> . connectionId ( connectionId ) <nl> . callback ( this : : finishHandshake ) <nl> @ @ - 332 , 6 + 333 , 8 @ @ public class OutboundMessagingConnection <nl> . coalescingStrategy ( coalescingStrategy ) <nl> . sendBufferSize ( sendBufferSize ) <nl> . tcpNoDelay ( tcpNoDelay ) <nl> + . tcpConnectTimeoutInMS ( tcpConnectTimeout ) <nl> + . tcpUserTimeoutInMS ( tcpUserTimeout ) <nl> . backlogSupplier ( ( ) - > nextBackloggedMessage ( ) ) <nl> . messageResultConsumer ( this : : handleMessageResult ) <nl> . protocolVersion ( targetVersion ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 7cd99de . . e7ca4be 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 1370 , 6 + 1370 , 28 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> return DatabaseDescriptor . getWriteRpcTimeout ( ) ; <nl> } <nl> <nl> + public void setInternodeTcpConnectTimeoutInMS ( int value ) <nl> + { <nl> + DatabaseDescriptor . setInternodeTcpConnectTimeoutInMS ( value ) ; <nl> + logger . info ( " set internode tcp connect timeout to { } ms " , value ) ; <nl> + } <nl> + <nl> + public int getInternodeTcpConnectTimeoutInMS ( ) <nl> + { <nl> + return DatabaseDescriptor . getInternodeTcpConnectTimeoutInMS ( ) ; <nl> + } <nl> + <nl> + public void setInternodeTcpUserTimeoutInMS ( int value ) <nl> + { <nl> + DatabaseDescriptor . setInternodeTcpUserTimeoutInMS ( value ) ; <nl> + logger . info ( " set internode tcp user timeout to { } ms " , value ) ; <nl> + } <nl> + <nl> + public int getInternodeTcpUserTimeoutInMS ( ) <nl> + { <nl> + return DatabaseDescriptor . getInternodeTcpUserTimeoutInMS ( ) ; <nl> + } <nl> + <nl> public void setCounterWriteRpcTimeout ( long value ) <nl> { <nl> DatabaseDescriptor . setCounterWriteRpcTimeout ( value ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index 4e6295a . . d11e997 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 529 , 6 + 529 , 12 @ @ public interface StorageServiceMBean extends NotificationEmitter <nl> public void setWriteRpcTimeout ( long value ) ; <nl> public long getWriteRpcTimeout ( ) ; <nl> <nl> + public void setInternodeTcpConnectTimeoutInMS ( int value ) ; <nl> + public int getInternodeTcpConnectTimeoutInMS ( ) ; <nl> + <nl> + public void setInternodeTcpUserTimeoutInMS ( int value ) ; <nl> + public int getInternodeTcpUserTimeoutInMS ( ) ; <nl> + <nl> public void setCounterWriteRpcTimeout ( long value ) ; <nl> public long getCounterWriteRpcTimeout ( ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / streaming / DefaultConnectionFactory . java b / src / java / org / apache / cassandra / streaming / DefaultConnectionFactory . java <nl> index 38c25dc . . b192803 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / DefaultConnectionFactory . java <nl> + + + b / src / java / org / apache / cassandra / streaming / DefaultConnectionFactory . java <nl> @ @ - 70 , 12 + 70 , 17 @ @ public class DefaultConnectionFactory implements StreamConnectionFactory <nl> ? DatabaseDescriptor . getInternodeSendBufferSize ( ) <nl> : OutboundConnectionParams . DEFAULT _ SEND _ BUFFER _ SIZE ; <nl> <nl> + int tcpConnectTimeout = DatabaseDescriptor . getInternodeTcpConnectTimeoutInMS ( ) ; <nl> + int tcpUserTimeout = DatabaseDescriptor . getInternodeTcpUserTimeoutInMS ( ) ; <nl> + <nl> OutboundConnectionParams params = OutboundConnectionParams . builder ( ) <nl> . connectionId ( connectionId ) <nl> . encryptionOptions ( encryptionOptions ) <nl> . mode ( NettyFactory . Mode . STREAMING ) <nl> . protocolVersion ( protocolVersion ) <nl> . sendBufferSize ( sendBufferSize ) <nl> + . tcpConnectTimeoutInMS ( tcpConnectTimeout ) <nl> + . tcpUserTimeoutInMS ( tcpUserTimeout ) <nl> . waterMark ( waterMark ) <nl> . build ( ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index 54187d1 . . 76cb7e8 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 90 , 7 + 90 , 6 @ @ import com . codahale . metrics . JmxReporter ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Strings ; <nl> import com . google . common . collect . HashMultimap ; <nl> - import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . Iterables ; <nl> import com . google . common . collect . Maps ; <nl> import com . google . common . collect . Multimap ; <nl> @ @ - 1150 , 6 + 1149 , 10 @ @ public class NodeProbe implements AutoCloseable <nl> return ssProxy . getCasContentionTimeout ( ) ; <nl> case " truncate " : <nl> return ssProxy . getTruncateRpcTimeout ( ) ; <nl> + case " internodeconnect " : <nl> + return ssProxy . getInternodeTcpConnectTimeoutInMS ( ) ; <nl> + case " internodeuser " : <nl> + return ssProxy . getInternodeTcpUserTimeoutInMS ( ) ; <nl> default : <nl> throw new RuntimeException ( " Timeout type requires one of ( " + GetTimeout . TIMEOUT _ TYPES + " ) " ) ; <nl> } <nl> @ @ - 1234 , 6 + 1237 , 12 @ @ public class NodeProbe implements AutoCloseable <nl> case " truncate " : <nl> ssProxy . setTruncateRpcTimeout ( value ) ; <nl> break ; <nl> + case " internodeconnect " : <nl> + ssProxy . setInternodeTcpConnectTimeoutInMS ( ( int ) value ) ; <nl> + break ; <nl> + case " internodeuser " : <nl> + ssProxy . setInternodeTcpUserTimeoutInMS ( ( int ) value ) ; <nl> + break ; <nl> default : <nl> throw new RuntimeException ( " Timeout type requires one of ( " + GetTimeout . TIMEOUT _ TYPES + " ) " ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / GetTimeout . java b / src / java / org / apache / cassandra / tools / nodetool / GetTimeout . java <nl> index deac8a3 . . 9f99ac6 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / nodetool / GetTimeout . java <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / GetTimeout . java <nl> @ @ - 31 , 7 + 31 , 7 @ @ import static com . google . common . base . Preconditions . checkArgument ; <nl> @ Command ( name = " gettimeout " , description = " Print the timeout of the given type in ms " ) <nl> public class GetTimeout extends NodeToolCmd <nl> { <nl> - public static final String TIMEOUT _ TYPES = " read , range , write , counterwrite , cascontention , truncate , misc ( general rpc _ timeout _ in _ ms ) " ; <nl> + public static final String TIMEOUT _ TYPES = " read , range , write , counterwrite , cascontention , truncate , internodeconnect , internodeuser , misc ( general rpc _ timeout _ in _ ms ) " ; <nl> <nl> @ Arguments ( usage = " < timeout _ type > " , description = " The timeout type , one of ( " + TIMEOUT _ TYPES + " ) " ) <nl> private List < String > args = new ArrayList < > ( ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / net / async / OutboundConnectionParamsTest . java b / test / unit / org / apache / cassandra / net / async / OutboundConnectionParamsTest . java <nl> index 0ce4968 . . 23a4a68 100644 <nl> - - - a / test / unit / org / apache / cassandra / net / async / OutboundConnectionParamsTest . java <nl> + + + b / test / unit / org / apache / cassandra / net / async / OutboundConnectionParamsTest . java <nl> @ @ - 18 , 19 + 18 , 50 @ @ <nl> <nl> package org . apache . cassandra . net . async ; <nl> <nl> + import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . net . MessagingService ; <nl> + <nl> public class OutboundConnectionParamsTest <nl> { <nl> + static int version ; <nl> + <nl> + @ BeforeClass <nl> + public static void before ( ) <nl> + { <nl> + DatabaseDescriptor . daemonInitialization ( ) ; <nl> + version = MessagingService . current _ version ; <nl> + } <nl> + <nl> @ Test ( expected = IllegalArgumentException . class ) <nl> public void build _ SendSizeLessThanZero ( ) <nl> { <nl> - OutboundConnectionParams . builder ( ) . sendBufferSize ( - 1 ) . build ( ) ; <nl> + OutboundConnectionParams . builder ( ) . protocolVersion ( version ) . sendBufferSize ( - 1 ) . build ( ) ; <nl> } <nl> <nl> @ Test ( expected = IllegalArgumentException . class ) <nl> public void build _ SendSizeHuge ( ) <nl> { <nl> - OutboundConnectionParams . builder ( ) . sendBufferSize ( 1 < < 30 ) . build ( ) ; <nl> + OutboundConnectionParams . builder ( ) . protocolVersion ( version ) . sendBufferSize ( 1 < < 30 ) . build ( ) ; <nl> + } <nl> + <nl> + @ Test ( expected = IllegalArgumentException . class ) <nl> + public void build _ TcpConnectTimeoutLessThanZero ( ) <nl> + { <nl> + OutboundConnectionParams . builder ( ) . protocolVersion ( version ) . tcpConnectTimeoutInMS ( - 1 ) . build ( ) ; <nl> + } <nl> + <nl> + @ Test ( expected = IllegalArgumentException . class ) <nl> + public void build _ TcpUserTimeoutLessThanZero ( ) <nl> + { <nl> + OutboundConnectionParams . builder ( ) . protocolVersion ( version ) . tcpUserTimeoutInMS ( - 1 ) . build ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void build _ TcpUserTimeoutEqualsZero ( ) <nl> + { <nl> + OutboundConnectionParams . builder ( ) . protocolVersion ( version ) . tcpUserTimeoutInMS ( 0 ) . build ( ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d518830 . . 52cc2c1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 29 , 7 + 29 , 7 @ @ <nl> * add scheduler JMX metrics ( CASSANDRA - 2962 ) <nl> * add block level checksum for compressed data ( CASSANDRA - 1717 ) <nl> * make column family backed column map pluggable and introduce unsynchronized <nl> - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) <nl> + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) <nl> * refactoring of the secondary index api ( CASSANDRA - 2982 ) <nl> * make CL > ONE reads wait for digest reconciliation before returning <nl> ( CASSANDRA - 2494 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> index c316a85 . . 71c7213 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor <nl> this . reversed = reversed ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public AbstractType < ? > getComparator ( ) <nl> { <nl> return comparator ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 1239d1c . . 38bc0d7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer <nl> this . cfm = cfm ; <nl> } <nl> <nl> - public ColumnFamily cloneMeShallow ( ) <nl> + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) <nl> { <nl> - ColumnFamily cf = ColumnFamily . create ( cfm ) ; <nl> + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; <nl> / / since deletion info is immutable , aliasing it is fine <nl> cf . deletionInfo . set ( deletionInfo . get ( ) ) ; <nl> return cf ; <nl> } <nl> <nl> + public ColumnFamily cloneMeShallow ( ) <nl> + { <nl> + return cloneMeShallow ( columns . getFactory ( ) ) ; <nl> + } <nl> + <nl> public AbstractType getSubComparator ( ) <nl> { <nl> IColumnSerializer s = getColumnSerializer ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 0bfd1c5 . . 552d3e9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> - * tombstones that are no longer relevant . * / <nl> + / * * <nl> + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> + * tombstones that are no longer relevant . <nl> + * The returned column family won ' t be thread safe . <nl> + * / <nl> ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) <nl> { <nl> / / special case slicing the entire row : <nl> @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; <nl> if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) <nl> { <nl> - ColumnFamily cf = cached . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> if ( sc ! = null ) <nl> cf . addColumn ( sc , HeapAllocator . instance ) ; <nl> return removeDeleted ( cf , gcBefore ) ; <nl> @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> <nl> IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; <nl> - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; <nl> / / TODO this is necessary because when we collate supercolumns together , we don ' t check <nl> / / their subcolumns for relevance , so we need to do a second prune post facto here . <nl> diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> index 37f5a60 . . 624dec7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns <nl> public ISortedColumns cloneMe ( ) ; <nl> <nl> / * * <nl> + * Returns the factory used for this ISortedColumns implementation . <nl> + * / <nl> + public Factory getFactory ( ) ; <nl> + <nl> + / * * <nl> * Adds a column to this column map . <nl> * If a column with the same name is already present in the map , it will <nl> * be replaced by the newly added column . <nl> diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> index cd2488a . . 13a111a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new ThreadSafeSortedColumns ( this ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> index 34e83dc . . 6c3fc42 100644 <nl> - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new TreeMapBackedSortedColumns ( this ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b7c0398 . . 41b3da9 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Partitioned outbound internode TCP connections can occur when nodes restart ( CASSANDRA - 14358 ) 
 * Don ' t write to system _ distributed . repair _ history , system _ traces . sessions , system _ traces . events in mixed version 3 . X / 4 . 0 clusters ( CASSANDRA - 14841 ) 
 * Avoid running query to self through messaging service ( CASSANDRA - 14807 ) 
 * Allow using custom script for chronicle queue BinLog archival ( CASSANDRA - 14373 ) 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index 3267c91 . . 0d211a3 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 185 , 6 + 185 , 14 @ @ Upgrading 
 - Background repair has been removed . dclocal _ read _ repair _ chance and 
 read _ repair _ chance table options have been removed and are now rejected . 
 See CASSANDRA - 13910 for details . 
 + - Internode TCP connections that do not ack segments for 30s will now 
 + be automatically detected and closed via the Linux TCP _ USER _ TIMEOUT 
 + socket option . This should be exceedingly rare , but AWS networks ( and 
 + other stateful firewalls ) apparently suffer from this issue . You can 
 + tune the timeouts on TCP connection and segment ack via the 
 + ` cassandra . yaml : internode _ tcp _ connect _ timeout _ in _ ms ` and 
 + ` cassandra . yaml : internode _ tcp _ user _ timeout _ in _ ms ` options respectively . 
 + See CASSANDRA - 14358 for details . 
 
 Materialized Views 
 - - - - - - - - - - - - - - - - - - - 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index d72b2e8 . . 0a92d4c 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 847 , 6 + 847 , 18 @ @ truncate _ request _ timeout _ in _ ms : 60000 
 # Lowest acceptable value is 10 ms . 
 request _ timeout _ in _ ms : 10000 
 
 + # Defensive settings for protecting Cassandra from true network partitions . 
 + # See ( CASSANDRA - 14358 ) for details . 
 + # 
 + # The amount of time to wait for internode tcp connections to establish . 
 + # internode _ tcp _ connect _ timeout _ in _ ms = 2000 
 + # 
 + # The amount of time unacknowledged data is allowed on a connection before we throw out the connection 
 + # Note this is only supported on Linux + epoll , and it appears to behave oddly above a setting of 30000 
 + # ( it takes much longer than 30s ) as of Linux 4 . 12 . If you want something that high set this to 0 
 + # which picks up the OS default and configure the net . ipv4 . tcp _ retries2 sysctl to be ~ 8 . 
 + # internode _ tcp _ user _ timeout _ in _ ms = 30000 
 + 
 # How long before a node logs slow queries . Select queries that take longer than 
 # this timeout to execute , will generate an aggregated log message , so that slow queries 
 # can be identified . Set this value to zero to disable slow query logging . 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index 9049131 . . 1e80108 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 145 , 6 + 145 , 14 @ @ public class Config 
 public boolean rpc _ keepalive = true ; 
 public int internode _ send _ buff _ size _ in _ bytes = 0 ; 
 public int internode _ recv _ buff _ size _ in _ bytes = 0 ; 
 + / / Defensive settings for protecting Cassandra from true network partitions . See ( CASSANDRA - 14358 ) for details . 
 + / / The amount of time to wait for internode tcp connections to establish . 
 + public int internode _ tcp _ connect _ timeout _ in _ ms = 2000 ; 
 + / / The amount of time unacknowledged data is allowed on a connection before we throw out the connection 
 + / / Note this is only supported on Linux + epoll , and it appears to behave oddly above a setting of 30000 
 + / / ( it takes much longer than 30s ) as of Linux 4 . 12 . If you want something that high set this to 0 
 + / / ( which picks up the OS default ) and configure the net . ipv4 . tcp _ retries2 sysctl to be ~ 8 . 
 + public int internode _ tcp _ user _ timeout _ in _ ms = 30000 ; 
 
 public boolean start _ native _ transport = true ; 
 public int native _ transport _ port = 9042 ; 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index de87de5 . . 1b11a91 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 1803 , 6 + 1803 , 26 @ @ public class DatabaseDescriptor 
 return conf . internode _ recv _ buff _ size _ in _ bytes ; 
 } 
 
 + public static int getInternodeTcpConnectTimeoutInMS ( ) 
 + { 
 + return conf . internode _ tcp _ connect _ timeout _ in _ ms ; 
 + } 
 + 
 + public static void setInternodeTcpConnectTimeoutInMS ( int value ) 
 + { 
 + conf . internode _ tcp _ connect _ timeout _ in _ ms = value ; 
 + } 
 + 
 + public static int getInternodeTcpUserTimeoutInMS ( ) 
 + { 
 + return conf . internode _ tcp _ user _ timeout _ in _ ms ; 
 + } 
 + 
 + public static void setInternodeTcpUserTimeoutInMS ( int value ) 
 + { 
 + conf . internode _ tcp _ user _ timeout _ in _ ms = value ; 
 + } 
 + 
 public static boolean startNativeTransport ( ) 
 { 
 return conf . start _ native _ transport ; 
 diff - - git a / src / java / org / apache / cassandra / net / async / NettyFactory . java b / src / java / org / apache / cassandra / net / async / NettyFactory . java 
 index 5bbac45 . . 989e33c 100644 
 - - - a / src / java / org / apache / cassandra / net / async / NettyFactory . java 
 + + + b / src / java / org / apache / cassandra / net / async / NettyFactory . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import io . netty . channel . ChannelOption ; 
 import io . netty . channel . ChannelPipeline ; 
 import io . netty . channel . EventLoopGroup ; 
 import io . netty . channel . ServerChannel ; 
 + import io . netty . channel . epoll . EpollChannelOption ; 
 import io . netty . channel . epoll . EpollEventLoopGroup ; 
 import io . netty . channel . epoll . EpollServerSocketChannel ; 
 import io . netty . channel . epoll . EpollSocketChannel ; 
 @ @ - 200 , 6 + 201 , 9 @ @ public final class NettyFactory 
 . childOption ( ChannelOption . SO _ SNDBUF , INBOUND _ CHANNEL _ SEND _ BUFFER _ SIZE ) 
 . childHandler ( initializer ) ; 
 
 + if ( useEpoll ) 
 + bootstrap . childOption ( EpollChannelOption . TCP _ USER _ TIMEOUT , DatabaseDescriptor . getInternodeTcpUserTimeoutInMS ( ) ) ; 
 + 
 if ( receiveBufferSize > 0 ) 
 bootstrap . childOption ( ChannelOption . SO _ RCVBUF , receiveBufferSize ) ; 
 
 @ @ - 326 , 7 + 330 , 7 @ @ public final class NettyFactory 
 Class < ? extends Channel > transport = useEpoll ? EpollSocketChannel . class : NioSocketChannel . class ; 
 Bootstrap bootstrap = new Bootstrap ( ) . group ( params . mode = = Mode . MESSAGING ? outboundGroup : streamingGroup ) 
 . channel ( transport ) 
 - . option ( ChannelOption . CONNECT _ TIMEOUT _ MILLIS , 2000 ) 
 + . option ( ChannelOption . CONNECT _ TIMEOUT _ MILLIS , params . tcpConnectTimeoutInMS ) 
 . option ( ChannelOption . SO _ KEEPALIVE , true ) 
 . option ( ChannelOption . SO _ REUSEADDR , true ) 
 . option ( ChannelOption . SO _ SNDBUF , params . sendBufferSize ) 
 @ @ - 334 , 6 + 338 , 9 @ @ public final class NettyFactory 
 . option ( ChannelOption . TCP _ NODELAY , params . tcpNoDelay ) 
 . option ( ChannelOption . WRITE _ BUFFER _ WATER _ MARK , params . waterMark ) 
 . handler ( new OutboundInitializer ( params ) ) ; 
 + if ( useEpoll ) 
 + bootstrap . option ( EpollChannelOption . TCP _ USER _ TIMEOUT , params . tcpUserTimeoutInMS ) ; 
 + 
 InetAddressAndPort remoteAddress = params . connectionId . connectionAddress ( ) ; 
 bootstrap . remoteAddress ( new InetSocketAddress ( remoteAddress . address , remoteAddress . port ) ) ; 
 return bootstrap ; 
 diff - - git a / src / java / org / apache / cassandra / net / async / OutboundConnectionParams . java b / src / java / org / apache / cassandra / net / async / OutboundConnectionParams . java 
 index 282480e . . 64968c6 100644 
 - - - a / src / java / org / apache / cassandra / net / async / OutboundConnectionParams . java 
 + + + b / src / java / org / apache / cassandra / net / async / OutboundConnectionParams . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . util . function . Supplier ; 
 import com . google . common . base . Preconditions ; 
 
 import io . netty . channel . WriteBufferWaterMark ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . EncryptionOptions . ServerEncryptionOptions ; 
 import org . apache . cassandra . net . async . OutboundHandshakeHandler . HandshakeResult ; 
 import org . apache . cassandra . utils . CoalescingStrategies . CoalescingStrategy ; 
 @ @ - 48 , 6 + 49 , 8 @ @ public class OutboundConnectionParams 
 final Consumer < MessageResult > messageResultConsumer ; 
 final WriteBufferWaterMark waterMark ; 
 final int protocolVersion ; 
 + final int tcpConnectTimeoutInMS ; 
 + final int tcpUserTimeoutInMS ; 
 
 private OutboundConnectionParams ( OutboundConnectionIdentifier connectionId , 
 Consumer < HandshakeResult > callback , 
 @ @ - 60 , 7 + 63 , 9 @ @ public class OutboundConnectionParams 
 Supplier < QueuedMessage > backlogSupplier , 
 Consumer < MessageResult > messageResultConsumer , 
 WriteBufferWaterMark waterMark , 
 - int protocolVersion ) 
 + int protocolVersion , 
 + int tcpConnectTimeoutInMS , 
 + int tcpUserTimeoutInMS ) 
 { 
 this . connectionId = connectionId ; 
 this . callback = callback ; 
 @ @ - 74 , 6 + 79 , 8 @ @ public class OutboundConnectionParams 
 this . messageResultConsumer = messageResultConsumer ; 
 this . waterMark = waterMark ; 
 this . protocolVersion = protocolVersion ; 
 + this . tcpConnectTimeoutInMS = tcpConnectTimeoutInMS ; 
 + this . tcpUserTimeoutInMS = tcpUserTimeoutInMS ; 
 } 
 
 public static Builder builder ( ) 
 @ @ - 99 , 10 + 106 , 15 @ @ public class OutboundConnectionParams 
 private Supplier < QueuedMessage > backlogSupplier ; 
 private Consumer < MessageResult > messageResultConsumer ; 
 private WriteBufferWaterMark waterMark = WriteBufferWaterMark . DEFAULT ; 
 - int protocolVersion ; 
 + private int protocolVersion ; 
 + private int tcpConnectTimeoutInMS ; 
 + private int tcpUserTimeoutInMS ; 
 
 private Builder ( ) 
 - { } 
 + { 
 + this . tcpConnectTimeoutInMS = DatabaseDescriptor . getInternodeTcpConnectTimeoutInMS ( ) ; 
 + this . tcpUserTimeoutInMS = DatabaseDescriptor . getInternodeTcpUserTimeoutInMS ( ) ; 
 + } 
 
 private Builder ( OutboundConnectionParams params ) 
 { 
 @ @ - 116 , 6 + 128 , 8 @ @ public class OutboundConnectionParams 
 this . tcpNoDelay = params . tcpNoDelay ; 
 this . backlogSupplier = params . backlogSupplier ; 
 this . messageResultConsumer = params . messageResultConsumer ; 
 + this . tcpConnectTimeoutInMS = params . tcpConnectTimeoutInMS ; 
 + this . tcpUserTimeoutInMS = params . tcpUserTimeoutInMS ; 
 } 
 
 public Builder connectionId ( OutboundConnectionIdentifier connectionId ) 
 @ @ - 190 , 13 + 204 , 27 @ @ public class OutboundConnectionParams 
 return this ; 
 } 
 
 + public Builder tcpConnectTimeoutInMS ( int tcpConnectTimeoutInMS ) 
 + { 
 + this . tcpConnectTimeoutInMS = tcpConnectTimeoutInMS ; 
 + return this ; 
 + } 
 + 
 + public Builder tcpUserTimeoutInMS ( int tcpUserTimeoutInMS ) 
 + { 
 + this . tcpUserTimeoutInMS = tcpUserTimeoutInMS ; 
 + return this ; 
 + } 
 + 
 public OutboundConnectionParams build ( ) 
 { 
 Preconditions . checkArgument ( protocolVersion > 0 , " illegal protocol version : " + protocolVersion ) ; 
 Preconditions . checkArgument ( sendBufferSize > 0 & & sendBufferSize < 1 < < 20 , " illegal send buffer size : " + sendBufferSize ) ; 
 + Preconditions . checkArgument ( tcpUserTimeoutInMS > = 0 , " tcp user timeout must be non negative : " + tcpUserTimeoutInMS ) ; 
 + Preconditions . checkArgument ( tcpConnectTimeoutInMS > 0 , " tcp connect timeout must be positive : " + tcpConnectTimeoutInMS ) ; 
 
 return new OutboundConnectionParams ( connectionId , callback , encryptionOptions , mode , compress , coalescingStrategy , sendBufferSize , 
 - tcpNoDelay , backlogSupplier , messageResultConsumer , waterMark , protocolVersion ) ; 
 + tcpNoDelay , backlogSupplier , messageResultConsumer , waterMark , protocolVersion , tcpConnectTimeoutInMS , tcpUserTimeoutInMS ) ; 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / net / async / OutboundMessagingConnection . java b / src / java / org / apache / cassandra / net / async / OutboundMessagingConnection . java 
 index 064131b . . 265ece9 100644 
 - - - a / src / java / org / apache / cassandra / net / async / OutboundMessagingConnection . java 
 + + + b / src / java / org / apache / cassandra / net / async / OutboundMessagingConnection . java 
 @ @ - 19 , 8 + 19 , 6 @ @ 
 package org . apache . cassandra . net . async ; 
 
 import java . io . IOException ; 
 - import java . net . InetAddress ; 
 - import java . net . InetSocketAddress ; 
 import java . util . Optional ; 
 import java . util . Queue ; 
 import java . util . concurrent . ConcurrentLinkedQueue ; 
 @ @ - 323 , 6 + 321 , 9 @ @ public class OutboundMessagingConnection 
 ? DatabaseDescriptor . getInternodeSendBufferSize ( ) 
 : OutboundConnectionParams . DEFAULT _ SEND _ BUFFER _ SIZE ; 
 
 + int tcpConnectTimeout = DatabaseDescriptor . getInternodeTcpConnectTimeoutInMS ( ) ; 
 + int tcpUserTimeout = DatabaseDescriptor . getInternodeTcpUserTimeoutInMS ( ) ; 
 + 
 OutboundConnectionParams params = OutboundConnectionParams . builder ( ) 
 . connectionId ( connectionId ) 
 . callback ( this : : finishHandshake ) 
 @ @ - 332 , 6 + 333 , 8 @ @ public class OutboundMessagingConnection 
 . coalescingStrategy ( coalescingStrategy ) 
 . sendBufferSize ( sendBufferSize ) 
 . tcpNoDelay ( tcpNoDelay ) 
 + . tcpConnectTimeoutInMS ( tcpConnectTimeout ) 
 + . tcpUserTimeoutInMS ( tcpUserTimeout ) 
 . backlogSupplier ( ( ) - > nextBackloggedMessage ( ) ) 
 . messageResultConsumer ( this : : handleMessageResult ) 
 . protocolVersion ( targetVersion ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 7cd99de . . e7ca4be 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 1370 , 6 + 1370 , 28 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 return DatabaseDescriptor . getWriteRpcTimeout ( ) ; 
 } 
 
 + public void setInternodeTcpConnectTimeoutInMS ( int value ) 
 + { 
 + DatabaseDescriptor . setInternodeTcpConnectTimeoutInMS ( value ) ; 
 + logger . info ( " set internode tcp connect timeout to { } ms " , value ) ; 
 + } 
 + 
 + public int getInternodeTcpConnectTimeoutInMS ( ) 
 + { 
 + return DatabaseDescriptor . getInternodeTcpConnectTimeoutInMS ( ) ; 
 + } 
 + 
 + public void setInternodeTcpUserTimeoutInMS ( int value ) 
 + { 
 + DatabaseDescriptor . setInternodeTcpUserTimeoutInMS ( value ) ; 
 + logger . info ( " set internode tcp user timeout to { } ms " , value ) ; 
 + } 
 + 
 + public int getInternodeTcpUserTimeoutInMS ( ) 
 + { 
 + return DatabaseDescriptor . getInternodeTcpUserTimeoutInMS ( ) ; 
 + } 
 + 
 public void setCounterWriteRpcTimeout ( long value ) 
 { 
 DatabaseDescriptor . setCounterWriteRpcTimeout ( value ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index 4e6295a . . d11e997 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 529 , 6 + 529 , 12 @ @ public interface StorageServiceMBean extends NotificationEmitter 
 public void setWriteRpcTimeout ( long value ) ; 
 public long getWriteRpcTimeout ( ) ; 
 
 + public void setInternodeTcpConnectTimeoutInMS ( int value ) ; 
 + public int getInternodeTcpConnectTimeoutInMS ( ) ; 
 + 
 + public void setInternodeTcpUserTimeoutInMS ( int value ) ; 
 + public int getInternodeTcpUserTimeoutInMS ( ) ; 
 + 
 public void setCounterWriteRpcTimeout ( long value ) ; 
 public long getCounterWriteRpcTimeout ( ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / streaming / DefaultConnectionFactory . java b / src / java / org / apache / cassandra / streaming / DefaultConnectionFactory . java 
 index 38c25dc . . b192803 100644 
 - - - a / src / java / org / apache / cassandra / streaming / DefaultConnectionFactory . java 
 + + + b / src / java / org / apache / cassandra / streaming / DefaultConnectionFactory . java 
 @ @ - 70 , 12 + 70 , 17 @ @ public class DefaultConnectionFactory implements StreamConnectionFactory 
 ? DatabaseDescriptor . getInternodeSendBufferSize ( ) 
 : OutboundConnectionParams . DEFAULT _ SEND _ BUFFER _ SIZE ; 
 
 + int tcpConnectTimeout = DatabaseDescriptor . getInternodeTcpConnectTimeoutInMS ( ) ; 
 + int tcpUserTimeout = DatabaseDescriptor . getInternodeTcpUserTimeoutInMS ( ) ; 
 + 
 OutboundConnectionParams params = OutboundConnectionParams . builder ( ) 
 . connectionId ( connectionId ) 
 . encryptionOptions ( encryptionOptions ) 
 . mode ( NettyFactory . Mode . STREAMING ) 
 . protocolVersion ( protocolVersion ) 
 . sendBufferSize ( sendBufferSize ) 
 + . tcpConnectTimeoutInMS ( tcpConnectTimeout ) 
 + . tcpUserTimeoutInMS ( tcpUserTimeout ) 
 . waterMark ( waterMark ) 
 . build ( ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index 54187d1 . . 76cb7e8 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 90 , 7 + 90 , 6 @ @ import com . codahale . metrics . JmxReporter ; 
 import com . google . common . base . Function ; 
 import com . google . common . base . Strings ; 
 import com . google . common . collect . HashMultimap ; 
 - import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . Iterables ; 
 import com . google . common . collect . Maps ; 
 import com . google . common . collect . Multimap ; 
 @ @ - 1150 , 6 + 1149 , 10 @ @ public class NodeProbe implements AutoCloseable 
 return ssProxy . getCasContentionTimeout ( ) ; 
 case " truncate " : 
 return ssProxy . getTruncateRpcTimeout ( ) ; 
 + case " internodeconnect " : 
 + return ssProxy . getInternodeTcpConnectTimeoutInMS ( ) ; 
 + case " internodeuser " : 
 + return ssProxy . getInternodeTcpUserTimeoutInMS ( ) ; 
 default : 
 throw new RuntimeException ( " Timeout type requires one of ( " + GetTimeout . TIMEOUT _ TYPES + " ) " ) ; 
 } 
 @ @ - 1234 , 6 + 1237 , 12 @ @ public class NodeProbe implements AutoCloseable 
 case " truncate " : 
 ssProxy . setTruncateRpcTimeout ( value ) ; 
 break ; 
 + case " internodeconnect " : 
 + ssProxy . setInternodeTcpConnectTimeoutInMS ( ( int ) value ) ; 
 + break ; 
 + case " internodeuser " : 
 + ssProxy . setInternodeTcpUserTimeoutInMS ( ( int ) value ) ; 
 + break ; 
 default : 
 throw new RuntimeException ( " Timeout type requires one of ( " + GetTimeout . TIMEOUT _ TYPES + " ) " ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / GetTimeout . java b / src / java / org / apache / cassandra / tools / nodetool / GetTimeout . java 
 index deac8a3 . . 9f99ac6 100644 
 - - - a / src / java / org / apache / cassandra / tools / nodetool / GetTimeout . java 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / GetTimeout . java 
 @ @ - 31 , 7 + 31 , 7 @ @ import static com . google . common . base . Preconditions . checkArgument ; 
 @ Command ( name = " gettimeout " , description = " Print the timeout of the given type in ms " ) 
 public class GetTimeout extends NodeToolCmd 
 { 
 - public static final String TIMEOUT _ TYPES = " read , range , write , counterwrite , cascontention , truncate , misc ( general rpc _ timeout _ in _ ms ) " ; 
 + public static final String TIMEOUT _ TYPES = " read , range , write , counterwrite , cascontention , truncate , internodeconnect , internodeuser , misc ( general rpc _ timeout _ in _ ms ) " ; 
 
 @ Arguments ( usage = " < timeout _ type > " , description = " The timeout type , one of ( " + TIMEOUT _ TYPES + " ) " ) 
 private List < String > args = new ArrayList < > ( ) ; 
 diff - - git a / test / unit / org / apache / cassandra / net / async / OutboundConnectionParamsTest . java b / test / unit / org / apache / cassandra / net / async / OutboundConnectionParamsTest . java 
 index 0ce4968 . . 23a4a68 100644 
 - - - a / test / unit / org / apache / cassandra / net / async / OutboundConnectionParamsTest . java 
 + + + b / test / unit / org / apache / cassandra / net / async / OutboundConnectionParamsTest . java 
 @ @ - 18 , 19 + 18 , 50 @ @ 
 
 package org . apache . cassandra . net . async ; 
 
 + import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . net . MessagingService ; 
 + 
 public class OutboundConnectionParamsTest 
 { 
 + static int version ; 
 + 
 + @ BeforeClass 
 + public static void before ( ) 
 + { 
 + DatabaseDescriptor . daemonInitialization ( ) ; 
 + version = MessagingService . current _ version ; 
 + } 
 + 
 @ Test ( expected = IllegalArgumentException . class ) 
 public void build _ SendSizeLessThanZero ( ) 
 { 
 - OutboundConnectionParams . builder ( ) . sendBufferSize ( - 1 ) . build ( ) ; 
 + OutboundConnectionParams . builder ( ) . protocolVersion ( version ) . sendBufferSize ( - 1 ) . build ( ) ; 
 } 
 
 @ Test ( expected = IllegalArgumentException . class ) 
 public void build _ SendSizeHuge ( ) 
 { 
 - OutboundConnectionParams . builder ( ) . sendBufferSize ( 1 < < 30 ) . build ( ) ; 
 + OutboundConnectionParams . builder ( ) . protocolVersion ( version ) . sendBufferSize ( 1 < < 30 ) . build ( ) ; 
 + } 
 + 
 + @ Test ( expected = IllegalArgumentException . class ) 
 + public void build _ TcpConnectTimeoutLessThanZero ( ) 
 + { 
 + OutboundConnectionParams . builder ( ) . protocolVersion ( version ) . tcpConnectTimeoutInMS ( - 1 ) . build ( ) ; 
 + } 
 + 
 + @ Test ( expected = IllegalArgumentException . class ) 
 + public void build _ TcpUserTimeoutLessThanZero ( ) 
 + { 
 + OutboundConnectionParams . builder ( ) . protocolVersion ( version ) . tcpUserTimeoutInMS ( - 1 ) . build ( ) ; 
 + } 
 + 
 + @ Test 
 + public void build _ TcpUserTimeoutEqualsZero ( ) 
 + { 
 + OutboundConnectionParams . builder ( ) . protocolVersion ( version ) . tcpUserTimeoutInMS ( 0 ) . build ( ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d518830 . . 52cc2c1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 29 , 7 + 29 , 7 @ @ 
 * add scheduler JMX metrics ( CASSANDRA - 2962 ) 
 * add block level checksum for compressed data ( CASSANDRA - 1717 ) 
 * make column family backed column map pluggable and introduce unsynchronized 
 - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) 
 + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) 
 * refactoring of the secondary index api ( CASSANDRA - 2982 ) 
 * make CL > ONE reads wait for digest reconciliation before returning 
 ( CASSANDRA - 2494 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 index c316a85 . . 71c7213 100644 
 - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor 
 this . reversed = reversed ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public AbstractType < ? > getComparator ( ) 
 { 
 return comparator ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 1239d1c . . 38bc0d7 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer 
 this . cfm = cfm ; 
 } 
 
 - public ColumnFamily cloneMeShallow ( ) 
 + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) 
 { 
 - ColumnFamily cf = ColumnFamily . create ( cfm ) ; 
 + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; 
 / / since deletion info is immutable , aliasing it is fine 
 cf . deletionInfo . set ( deletionInfo . get ( ) ) ; 
 return cf ; 
 } 
 
 + public ColumnFamily cloneMeShallow ( ) 
 + { 
 + return cloneMeShallow ( columns . getFactory ( ) ) ; 
 + } 
 + 
 public AbstractType getSubComparator ( ) 
 { 
 IColumnSerializer s = getColumnSerializer ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 0bfd1c5 . . 552d3e9 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 - * tombstones that are no longer relevant . * / 
 + / * * 
 + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 + * tombstones that are no longer relevant . 
 + * The returned column family won ' t be thread safe . 
 + * / 
 ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) 
 { 
 / / special case slicing the entire row : 
 @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; 
 if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) 
 { 
 - ColumnFamily cf = cached . cloneMeShallow ( ) ; 
 + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 if ( sc ! = null ) 
 cf . addColumn ( sc , HeapAllocator . instance ) ; 
 return removeDeleted ( cf , gcBefore ) ; 
 @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 
 IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; 
 - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; 
 + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; 
 / / TODO this is necessary because when we collate supercolumns together , we don ' t check 
 / / their subcolumns for relevance , so we need to do a second prune post facto here . 
 diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 index 37f5a60 . . 624dec7 100644 
 - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns 
 public ISortedColumns cloneMe ( ) ; 
 
 / * * 
 + * Returns the factory used for this ISortedColumns implementation . 
 + * / 
 + public Factory getFactory ( ) ; 
 + 
 + / * * 
 * Adds a column to this column map . 
 * If a column with the same name is already present in the map , it will 
 * be replaced by the newly added column . 
 diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 index cd2488a . . 13a111a 100644 
 - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new ThreadSafeSortedColumns ( this ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 index 34e83dc . . 6c3fc42 100644 
 - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new TreeMapBackedSortedColumns ( this ) ;
