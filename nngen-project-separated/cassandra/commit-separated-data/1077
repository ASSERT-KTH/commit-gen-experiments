BLEU SCORE: 0.41722614486115056

TEST MSG: Fix pending range calculation during moves ( 2 . 2 version )
GENERATED MSG: Fix pending range calculation during moves

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index a26f9e0 . . e5c4430 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 14 , 6 + 14 , 7 @ @ <nl> * Disable reloading of GossipingPropertyFileSnitch ( CASSANDRA - 9474 ) <nl> * Verify tables in pseudo - system keyspaces at startup ( CASSANDRA - 10761 ) <nl> Merged from 2 . 1 : <nl> + * Fix pending range calculation during moves ( CASSANDRA - 10887 ) <nl> * Sane default ( 200Mbps ) for inter - DC streaming througput ( CASSANDRA - 9708 ) <nl> * Match cassandra - loader options in COPY FROM ( CASSANDRA - 9303 ) <nl> * Fix binding to any address in CqlBulkRecordWriter ( CASSANDRA - 9309 ) <nl> diff - - git a / src / java / org / apache / cassandra / dht / Range . java b / src / java / org / apache / cassandra / dht / Range . java <nl> index 9893531 . . f2c5996 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / Range . java <nl> + + + b / src / java / org / apache / cassandra / dht / Range . java <nl> @ @ - 292 , 7 + 292 , 28 @ @ public class Range < T extends RingPosition < T > > extends AbstractBounds < T > implemen <nl> return rhs . differenceToFetch ( this ) ; <nl> } <nl> <nl> + public Set < Range < T > > subtractAll ( Collection < Range < T > > ranges ) <nl> + { <nl> + Set < Range < T > > result = new HashSet < > ( ) ; <nl> + result . add ( this ) ; <nl> + for ( Range < T > range : ranges ) <nl> + { <nl> + result = substractAllFromToken ( result , range ) ; <nl> + } <nl> + <nl> + return result ; <nl> + } <nl> <nl> + private static < T extends RingPosition < T > > Set < Range < T > > substractAllFromToken ( Set < Range < T > > ranges , Range < T > subtract ) <nl> + { <nl> + Set < Range < T > > result = new HashSet < > ( ) ; <nl> + for ( Range < T > range : ranges ) <nl> + { <nl> + result . addAll ( range . subtract ( subtract ) ) ; <nl> + } <nl> + <nl> + return result ; <nl> + } <nl> / * * <nl> * Calculate set of the difference ranges of given two ranges <nl> * ( as current ( A , B ] and rhs is ( C , D ] ) <nl> diff - - git a / src / java / org / apache / cassandra / locator / TokenMetadata . java b / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> index 00d8ee9 . . de16fda 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> + + + b / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> @ @ - 799 , 14 + 799 , 42 @ @ public class TokenMetadata <nl> / / simply add and remove them one by one to allLeftMetadata and check in between what their ranges would be . <nl> for ( Pair < Token , InetAddress > moving : movingEndpoints ) <nl> { <nl> + / / Calculate all the ranges which will could be affected . This will include the ranges before and after the move . <nl> + Set < Range < Token > > moveAffectedRanges = new HashSet < > ( ) ; <nl> InetAddress endpoint = moving . right ; / / address of the moving node <nl> + / / Add ranges before the move <nl> + for ( Range < Token > range : strategy . getAddressRanges ( allLeftMetadata ) . get ( endpoint ) ) <nl> + { <nl> + moveAffectedRanges . add ( range ) ; <nl> + } <nl> <nl> - / / moving . left is a new token of the endpoint <nl> allLeftMetadata . updateNormalToken ( moving . left , endpoint ) ; <nl> - <nl> + / / Add ranges after the move <nl> for ( Range < Token > range : strategy . getAddressRanges ( allLeftMetadata ) . get ( endpoint ) ) <nl> { <nl> - newPendingRanges . addPendingRange ( range , endpoint ) ; <nl> + moveAffectedRanges . add ( range ) ; <nl> + } <nl> + <nl> + for ( Range < Token > range : moveAffectedRanges ) <nl> + { <nl> + Set < InetAddress > currentEndpoints = ImmutableSet . copyOf ( strategy . calculateNaturalEndpoints ( range . right , metadata ) ) ; <nl> + Set < InetAddress > newEndpoints = ImmutableSet . copyOf ( strategy . calculateNaturalEndpoints ( range . right , allLeftMetadata ) ) ; <nl> + Set < InetAddress > difference = Sets . difference ( newEndpoints , currentEndpoints ) ; <nl> + for ( final InetAddress address : difference ) <nl> + { <nl> + Collection < Range < Token > > newRanges = strategy . getAddressRanges ( allLeftMetadata ) . get ( address ) ; <nl> + Collection < Range < Token > > oldRanges = strategy . getAddressRanges ( metadata ) . get ( address ) ; <nl> + / / We want to get rid of any ranges which the node is currently getting . <nl> + newRanges . removeAll ( oldRanges ) ; <nl> + <nl> + for ( Range < Token > newRange : newRanges ) <nl> + { <nl> + for ( Range < Token > pendingRange : newRange . subtractAll ( oldRanges ) ) <nl> + { <nl> + newPendingRanges . addPendingRange ( pendingRange , address ) ; <nl> + } <nl> + } <nl> + } <nl> } <nl> <nl> allLeftMetadata . removeEndpoint ( endpoint ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / Util . java b / test / unit / org / apache / cassandra / Util . java <nl> index da81aaa . . 91aa5fd 100644 <nl> - - - a / test / unit / org / apache / cassandra / Util . java <nl> + + + b / test / unit / org / apache / cassandra / Util . java <nl> @ @ - 273 , 9 + 273 , 11 @ @ public class Util <nl> for ( int i = hostIdPool . size ( ) ; i < howMany ; i + + ) <nl> hostIdPool . add ( UUID . randomUUID ( ) ) ; <nl> <nl> + boolean endpointTokenPrefilled = endpointTokens ! = null & & ! endpointTokens . isEmpty ( ) ; <nl> for ( int i = 0 ; i < howMany ; i + + ) <nl> { <nl> - endpointTokens . add ( new BigIntegerToken ( String . valueOf ( 10 * i ) ) ) ; <nl> + if ( ! endpointTokenPrefilled ) <nl> + endpointTokens . add ( new BigIntegerToken ( String . valueOf ( 10 * i ) ) ) ; <nl> keyTokens . add ( new BigIntegerToken ( String . valueOf ( 10 * i + 5 ) ) ) ; <nl> hostIds . add ( hostIdPool . get ( i ) ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / dht / RangeTest . java b / test / unit / org / apache / cassandra / dht / RangeTest . java <nl> index 85f2586 . . 4255487 100644 <nl> - - - a / test / unit / org / apache / cassandra / dht / RangeTest . java <nl> + + + b / test / unit / org / apache / cassandra / dht / RangeTest . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> package org . apache . cassandra . dht ; <nl> <nl> import java . nio . ByteBuffer ; <nl> + import java . util . Collection ; <nl> import java . util . ArrayList ; <nl> import java . util . Collections ; <nl> import java . util . HashSet ; <nl> @ @ - 30 , 6 + 31 , 7 @ @ import com . google . common . base . Joiner ; <nl> <nl> import static java . util . Arrays . asList ; <nl> <nl> + import org . apache . commons . collections . CollectionUtils ; <nl> import org . apache . commons . lang3 . StringUtils ; <nl> import org . junit . Test ; <nl> import org . apache . cassandra . db . RowPosition ; <nl> @ @ - 329 , 6 + 331 , 59 @ @ public class RangeTest <nl> assert t1 . compareTo ( t4 ) = = 0 ; <nl> } <nl> <nl> + private Range < Token > makeRange ( long token1 , long token2 ) <nl> + { <nl> + return new Range < Token > ( new Murmur3Partitioner . LongToken ( token1 ) , new Murmur3Partitioner . LongToken ( token2 ) ) ; <nl> + } <nl> + <nl> + private void assertRanges ( Set < Range < Token > > result , Long . . . tokens ) <nl> + { <nl> + assert tokens . length % 2 = = 0 ; <nl> + <nl> + final Set < Range < Token > > expected = new HashSet < > ( ) ; <nl> + for ( int i = 0 ; i < tokens . length ; i + = 2 ) <nl> + { <nl> + expected . add ( makeRange ( tokens [ i ] , tokens [ i + 1 ] ) ) ; <nl> + } <nl> + <nl> + assert CollectionUtils . isEqualCollection ( result , expected ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testSubtractAll ( ) <nl> + { <nl> + Range < Token > range = new Range < Token > ( new Murmur3Partitioner . LongToken ( 1L ) , new Murmur3Partitioner . LongToken ( 100L ) ) ; <nl> + <nl> + Collection < Range < Token > > collection = new HashSet < > ( ) ; <nl> + collection . add ( makeRange ( 1L , 10L ) ) ; <nl> + assertRanges ( range . subtractAll ( collection ) , 10L , 100L ) ; <nl> + collection . add ( makeRange ( 90L , 100L ) ) ; <nl> + assertRanges ( range . subtractAll ( collection ) , 10L , 90L ) ; <nl> + collection . add ( makeRange ( 54L , 60L ) ) ; <nl> + assertRanges ( range . subtractAll ( collection ) , 10L , 54L , 60L , 90L ) ; <nl> + collection . add ( makeRange ( 80L , 95L ) ) ; <nl> + assertRanges ( range . subtractAll ( collection ) , 10L , 54L , 60L , 80L ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSubtractAllWithWrapAround ( ) <nl> + { <nl> + Range < Token > range = new Range < Token > ( new Murmur3Partitioner . LongToken ( 100L ) , new Murmur3Partitioner . LongToken ( 10L ) ) ; <nl> + <nl> + Collection < Range < Token > > collection = new HashSet < > ( ) ; <nl> + collection . add ( makeRange ( 20L , 30L ) ) ; <nl> + assertRanges ( range . subtractAll ( collection ) , 100L , 10L ) ; <nl> + collection . add ( makeRange ( 200L , 500L ) ) ; <nl> + assertRanges ( range . subtractAll ( collection ) , 100L , 200L , 500L , 10L ) ; <nl> + collection . add ( makeRange ( 1L , 10L ) ) ; <nl> + assertRanges ( range . subtractAll ( collection ) , 100L , 200L , 500L , 1L ) ; <nl> + collection . add ( makeRange ( 0L , 1L ) ) ; <nl> + assertRanges ( range . subtractAll ( collection ) , 100L , 200L , 500L , 0L ) ; <nl> + collection . add ( makeRange ( 1000L , 0 ) ) ; <nl> + assertRanges ( range . subtractAll ( collection ) , 100L , 200L , 500L , 1000L ) ; <nl> + } <nl> + <nl> private Range < Token > makeRange ( String token1 , String token2 ) <nl> { <nl> return new Range < Token > ( new BigIntegerToken ( token1 ) , new BigIntegerToken ( token2 ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / service / MoveTest . java b / test / unit / org / apache / cassandra / service / MoveTest . java <nl> index 6c9e589 . . bd4317d 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / MoveTest . java <nl> + + + b / test / unit / org / apache / cassandra / service / MoveTest . java <nl> @ @ - 27 , 7 + 27 , 13 @ @ import com . google . common . collect . HashMultimap ; <nl> import com . google . common . collect . Multimap ; <nl> import static org . junit . Assert . * ; <nl> <nl> + import org . apache . cassandra . config . CFMetaData ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . db . marshal . BytesType ; <nl> import org . apache . cassandra . gms . Gossiper ; <nl> + import org . apache . cassandra . locator . AbstractNetworkTopologySnitch ; <nl> + import org . apache . cassandra . locator . NetworkTopologyStrategy ; <nl> + import org . apache . cassandra . locator . PendingRangeMaps ; <nl> import org . junit . AfterClass ; <nl> import org . junit . Before ; <nl> import org . junit . BeforeClass ; <nl> @ @ - 50 , 10 + 56 , 17 @ @ public class MoveTest <nl> { <nl> private static final IPartitioner partitioner = RandomPartitioner . instance ; <nl> private static IPartitioner oldPartitioner ; <nl> - private static final String KEYSPACE1 = " MoveTestKeyspace1 " ; <nl> + / / Simple Strategy Keyspaces <nl> + private static final String Simple _ RF1 _ KeyspaceName = " MoveTestKeyspace1 " ; <nl> + private static final String Simple _ RF2 _ KeyspaceName = " MoveTestKeyspace5 " ; <nl> + private static final String Simple _ RF3 _ KeyspaceName = " MoveTestKeyspace4 " ; <nl> private static final String KEYSPACE2 = " MoveTestKeyspace2 " ; <nl> private static final String KEYSPACE3 = " MoveTestKeyspace3 " ; <nl> - private static final String KEYSPACE4 = " MoveTestKeyspace4 " ; <nl> + <nl> + / / Network Strategy Keyspace with RF DC1 = 1 and DC2 = 1 and so on . <nl> + private static final String Network _ 11 _ KeyspaceName = " MoveTestNetwork11 " ; <nl> + private static final String Network _ 22 _ KeyspaceName = " MoveTestNetwork22 " ; <nl> + private static final String Network _ 33 _ KeyspaceName = " MoveTestNetwork33 " ; <nl> <nl> / * <nl> * NOTE : the tests above uses RandomPartitioner , which is not the default <nl> @ @ - 67 , 6 + 80 , 9 @ @ public class MoveTest <nl> oldPartitioner = StorageService . instance . setPartitionerUnsafe ( partitioner ) ; <nl> SchemaLoader . loadSchema ( ) ; <nl> SchemaLoader . schemaDefinition ( " MoveTest " ) ; <nl> + addNetworkTopologyKeyspace ( Network _ 11 _ KeyspaceName , 1 , 1 ) ; <nl> + addNetworkTopologyKeyspace ( Network _ 22 _ KeyspaceName , 2 , 2 ) ; <nl> + addNetworkTopologyKeyspace ( Network _ 33 _ KeyspaceName , 3 , 3 ) ; <nl> } <nl> <nl> @ AfterClass <nl> @ @ - 82 , 6 + 98 , 427 @ @ public class MoveTest <nl> StorageService . instance . getTokenMetadata ( ) . clearUnsafe ( ) ; <nl> } <nl> <nl> + private static void addNetworkTopologyKeyspace ( String keyspaceName , Integer . . . replicas ) throws ConfigurationException <nl> + { <nl> + <nl> + DatabaseDescriptor . setEndpointSnitch ( new AbstractNetworkTopologySnitch ( ) <nl> + { <nl> + / / Odd IPs are in DC1 and Even are in DC2 . Endpoints upto . 14 will have unique racks and <nl> + / / then will be same for a set of three . <nl> + @ Override <nl> + public String getRack ( InetAddress endpoint ) <nl> + { <nl> + int ipLastPart = getIPLastPart ( endpoint ) ; <nl> + if ( ipLastPart < = 14 ) <nl> + return UUID . randomUUID ( ) . toString ( ) ; <nl> + else <nl> + return " RAC " + ( ipLastPart % 3 ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getDatacenter ( InetAddress endpoint ) <nl> + { <nl> + if ( getIPLastPart ( endpoint ) % 2 = = 0 ) <nl> + return " DC2 " ; <nl> + else <nl> + return " DC1 " ; <nl> + } <nl> + <nl> + private int getIPLastPart ( InetAddress endpoint ) <nl> + { <nl> + String str = endpoint . toString ( ) ; <nl> + int index = str . lastIndexOf ( " . " ) ; <nl> + return Integer . parseInt ( str . substring ( index + 1 ) . trim ( ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + Class < ? extends AbstractReplicationStrategy > strategy = NetworkTopologyStrategy . class ; <nl> + KSMetaData keyspace = KSMetaData . testMetadata ( keyspaceName , strategy , configOptions ( replicas ) , <nl> + CFMetaData . denseCFMetaData ( keyspaceName , " CF1 " , BytesType . instance ) ) ; <nl> + MigrationManager . announceNewKeyspace ( keyspace ) ; <nl> + } <nl> + <nl> + private static Map < String , String > configOptions ( Integer [ ] replicas ) <nl> + { <nl> + Map < String , String > configOptions = new HashMap < > ( ) ; <nl> + int i = 1 ; <nl> + for ( Integer replica : replicas ) <nl> + { <nl> + if ( replica = = null ) <nl> + continue ; <nl> + configOptions . put ( " DC " + i + + , String . valueOf ( replica ) ) ; <nl> + } <nl> + return configOptions ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testMoveWithPendingRangesNetworkStrategyRackAwareThirtyNodes ( ) throws Exception <nl> + { <nl> + StorageService ss = StorageService . instance ; <nl> + final int RING _ SIZE = 60 ; <nl> + <nl> + TokenMetadata tmd = ss . getTokenMetadata ( ) ; <nl> + tmd . clearUnsafe ( ) ; <nl> + VersionedValue . VersionedValueFactory valueFactory = new VersionedValue . VersionedValueFactory ( partitioner ) ; <nl> + ArrayList < Token > endpointTokens = new ArrayList < > ( ) ; <nl> + ArrayList < Token > keyTokens = new ArrayList < > ( ) ; <nl> + List < InetAddress > hosts = new ArrayList < > ( ) ; <nl> + List < UUID > hostIds = new ArrayList < > ( ) ; <nl> + <nl> + for ( int i = 0 ; i < RING _ SIZE / 2 ; i + + ) <nl> + { <nl> + endpointTokens . add ( new BigIntegerToken ( String . valueOf ( 10 * i ) ) ) ; <nl> + endpointTokens . add ( new BigIntegerToken ( String . valueOf ( ( 10 * i ) + 1 ) ) ) ; <nl> + } <nl> + Util . createInitialRing ( ss , partitioner , endpointTokens , keyTokens , hosts , hostIds , RING _ SIZE ) ; <nl> + PendingRangeCalculatorService . instance . blockUntilFinished ( ) ; <nl> + <nl> + / / Moving Endpoint 127 . 0 . 0 . 37 in RAC1 with current token 180 <nl> + int MOVING _ NODE = 36 ; <nl> + moveHost ( hosts . get ( MOVING _ NODE ) , 215 , tmd , valueFactory ) ; <nl> + <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 150 , 151 , " 127 . 0 . 0 . 43 " ) , <nl> + generatePendingMapEntry ( 151 , 160 , " 127 . 0 . 0 . 43 " ) , generatePendingMapEntry ( 160 , 161 , " 127 . 0 . 0 . 43 " ) , <nl> + generatePendingMapEntry ( 161 , 170 , " 127 . 0 . 0 . 43 " ) , generatePendingMapEntry ( 170 , 171 , " 127 . 0 . 0 . 43 " ) , <nl> + generatePendingMapEntry ( 171 , 180 , " 127 . 0 . 0 . 43 " ) , generatePendingMapEntry ( 210 , 211 , " 127 . 0 . 0 . 37 " ) , <nl> + generatePendingMapEntry ( 211 , 215 , " 127 . 0 . 0 . 37 " ) ) , Network _ 33 _ KeyspaceName ) ; <nl> + <nl> + finishMove ( hosts . get ( MOVING _ NODE ) , 215 , tmd ) ; <nl> + <nl> + / / Moving it back to original spot <nl> + moveHost ( hosts . get ( MOVING _ NODE ) , 180 , tmd , valueFactory ) ; <nl> + finishMove ( hosts . get ( MOVING _ NODE ) , 180 , tmd ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testMoveWithPendingRangesNetworkStrategyTenNode ( ) throws Exception <nl> + { <nl> + StorageService ss = StorageService . instance ; <nl> + final int RING _ SIZE = 14 ; <nl> + <nl> + TokenMetadata tmd = ss . getTokenMetadata ( ) ; <nl> + tmd . clearUnsafe ( ) ; <nl> + VersionedValue . VersionedValueFactory valueFactory = new VersionedValue . VersionedValueFactory ( partitioner ) ; <nl> + ArrayList < Token > endpointTokens = new ArrayList < > ( ) ; <nl> + ArrayList < Token > keyTokens = new ArrayList < > ( ) ; <nl> + List < InetAddress > hosts = new ArrayList < > ( ) ; <nl> + List < UUID > hostIds = new ArrayList < > ( ) ; <nl> + <nl> + for ( int i = 0 ; i < RING _ SIZE / 2 ; i + + ) <nl> + { <nl> + endpointTokens . add ( new BigIntegerToken ( String . valueOf ( 10 * i ) ) ) ; <nl> + endpointTokens . add ( new BigIntegerToken ( String . valueOf ( ( 10 * i ) + 1 ) ) ) ; <nl> + } <nl> + <nl> + Util . createInitialRing ( ss , partitioner , endpointTokens , keyTokens , hosts , hostIds , RING _ SIZE ) ; <nl> + PendingRangeCalculatorService . instance . blockUntilFinished ( ) ; <nl> + <nl> + int MOVING _ NODE = 0 ; <nl> + moveHost ( hosts . get ( MOVING _ NODE ) , 5 , tmd , valueFactory ) ; <nl> + <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 1 , " 127 . 0 . 0 . 1 " ) , <nl> + generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 1 " ) ) , Network _ 11 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 1 , " 127 . 0 . 0 . 1 " ) , <nl> + generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 1 " ) ) , Network _ 22 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 1 , " 127 . 0 . 0 . 1 " ) , <nl> + generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 1 " ) ) , Network _ 33 _ KeyspaceName ) ; <nl> + <nl> + finishMove ( hosts . get ( MOVING _ NODE ) , 5 , tmd ) ; <nl> + <nl> + moveHost ( hosts . get ( MOVING _ NODE ) , 0 , tmd , valueFactory ) ; <nl> + <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 1 , " 127 . 0 . 0 . 3 " ) , <nl> + generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 3 " ) ) , Network _ 11 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 1 , " 127 . 0 . 0 . 5 " ) , <nl> + generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 5 " ) ) , Network _ 22 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 1 , " 127 . 0 . 0 . 7 " ) , <nl> + generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 7 " ) ) , Network _ 33 _ KeyspaceName ) ; <nl> + <nl> + finishMove ( hosts . get ( MOVING _ NODE ) , 0 , tmd ) ; <nl> + <nl> + MOVING _ NODE = 1 ; <nl> + moveHost ( hosts . get ( MOVING _ NODE ) , 5 , tmd , valueFactory ) ; <nl> + <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 2 " ) ) , Network _ 11 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 2 " ) ) , Network _ 22 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 2 " ) ) , Network _ 33 _ KeyspaceName ) ; <nl> + <nl> + finishMove ( hosts . get ( MOVING _ NODE ) , 5 , tmd ) ; <nl> + <nl> + moveHost ( hosts . get ( MOVING _ NODE ) , 1 , tmd , valueFactory ) ; <nl> + <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 4 " ) ) , Network _ 11 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 6 " ) ) , Network _ 22 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 8 " ) ) , Network _ 33 _ KeyspaceName ) ; <nl> + <nl> + finishMove ( hosts . get ( MOVING _ NODE ) , 1 , tmd ) ; <nl> + <nl> + MOVING _ NODE = 3 ; <nl> + moveHost ( hosts . get ( MOVING _ NODE ) , 25 , tmd , valueFactory ) ; <nl> + <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1 , 10 , " 127 . 0 . 0 . 6 " ) , <nl> + generatePendingMapEntry ( 10 , 11 , " 127 . 0 . 0 . 6 " ) , generatePendingMapEntry ( 21 , 25 , " 127 . 0 . 0 . 4 " ) ) , Network _ 11 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 61 , 0 , " 127 . 0 . 0 . 6 " ) , <nl> + generatePendingMapEntry ( 0 , 1 , " 127 . 0 . 0 . 6 " ) , generatePendingMapEntry ( 21 , 25 , " 127 . 0 . 0 . 4 " ) , <nl> + generatePendingMapEntry ( 11 , 20 , " 127 . 0 . 0 . 4 " ) , generatePendingMapEntry ( 20 , 21 , " 127 . 0 . 0 . 4 " ) ) , Network _ 22 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 51 , 60 , " 127 . 0 . 0 . 6 " ) , <nl> + generatePendingMapEntry ( 60 , 61 , " 127 . 0 . 0 . 6 " ) , generatePendingMapEntry ( 21 , 25 , " 127 . 0 . 0 . 4 " ) , <nl> + generatePendingMapEntry ( 11 , 20 , " 127 . 0 . 0 . 4 " ) , generatePendingMapEntry ( 20 , 21 , " 127 . 0 . 0 . 4 " ) ) , Network _ 33 _ KeyspaceName ) ; <nl> + <nl> + finishMove ( hosts . get ( MOVING _ NODE ) , 25 , tmd ) ; <nl> + <nl> + moveHost ( hosts . get ( MOVING _ NODE ) , 11 , tmd , valueFactory ) ; <nl> + <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1 , 10 , " 127 . 0 . 0 . 4 " ) , <nl> + generatePendingMapEntry ( 10 , 11 , " 127 . 0 . 0 . 4 " ) , generatePendingMapEntry ( 21 , 25 , " 127 . 0 . 0 . 8 " ) ) , Network _ 11 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 61 , 0 , " 127 . 0 . 0 . 4 " ) , <nl> + generatePendingMapEntry ( 0 , 1 , " 127 . 0 . 0 . 4 " ) , generatePendingMapEntry ( 11 , 20 , " 127 . 0 . 0 . 8 " ) , <nl> + generatePendingMapEntry ( 20 , 21 , " 127 . 0 . 0 . 8 " ) , generatePendingMapEntry ( 21 , 25 , " 127 . 0 . 0 . 10 " ) ) , Network _ 22 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 51 , 60 , " 127 . 0 . 0 . 4 " ) , <nl> + generatePendingMapEntry ( 60 , 61 , " 127 . 0 . 0 . 4 " ) , generatePendingMapEntry ( 21 , 25 , " 127 . 0 . 0 . 12 " ) , <nl> + generatePendingMapEntry ( 11 , 20 , " 127 . 0 . 0 . 10 " ) , generatePendingMapEntry ( 20 , 21 , " 127 . 0 . 0 . 10 " ) ) , Network _ 33 _ KeyspaceName ) ; <nl> + <nl> + finishMove ( hosts . get ( MOVING _ NODE ) , 11 , tmd ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testMoveWithPendingRangesSimpleStrategyTenNode ( ) throws Exception <nl> + { <nl> + StorageService ss = StorageService . instance ; <nl> + final int RING _ SIZE = 10 ; <nl> + <nl> + TokenMetadata tmd = ss . getTokenMetadata ( ) ; <nl> + tmd . clearUnsafe ( ) ; <nl> + VersionedValue . VersionedValueFactory valueFactory = new VersionedValue . VersionedValueFactory ( partitioner ) ; <nl> + ArrayList < Token > endpointTokens = new ArrayList < > ( ) ; <nl> + ArrayList < Token > keyTokens = new ArrayList < > ( ) ; <nl> + List < InetAddress > hosts = new ArrayList < > ( ) ; <nl> + List < UUID > hostIds = new ArrayList < > ( ) ; <nl> + <nl> + Util . createInitialRing ( ss , partitioner , endpointTokens , keyTokens , hosts , hostIds , RING _ SIZE ) ; <nl> + PendingRangeCalculatorService . instance . blockUntilFinished ( ) ; <nl> + <nl> + final int MOVING _ NODE = 0 ; / / index of the moving node <nl> + moveHost ( hosts . get ( MOVING _ NODE ) , 2 , tmd , valueFactory ) ; <nl> + <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF1 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF2 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF3 _ KeyspaceName ) ; <nl> + <nl> + finishMove ( hosts . get ( MOVING _ NODE ) , 2 , tmd ) ; <nl> + <nl> + <nl> + moveHost ( hosts . get ( MOVING _ NODE ) , 0 , tmd , valueFactory ) ; <nl> + <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 2 " ) ) , Simple _ RF1 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 3 " ) ) , Simple _ RF2 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 4 " ) ) , Simple _ RF3 _ KeyspaceName ) ; <nl> + <nl> + finishMove ( hosts . get ( MOVING _ NODE ) , 0 , tmd ) ; <nl> + <nl> + moveHost ( hosts . get ( MOVING _ NODE ) , 1000 , tmd , valueFactory ) ; <nl> + <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1000 , 0 , " 127 . 0 . 0 . 2 " ) ) , Simple _ RF1 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1000 , 0 , " 127 . 0 . 0 . 3 " ) ) , Simple _ RF2 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1000 , 0 , " 127 . 0 . 0 . 4 " ) ) , Simple _ RF3 _ KeyspaceName ) ; <nl> + <nl> + finishMove ( hosts . get ( MOVING _ NODE ) , 1000 , tmd ) ; <nl> + <nl> + moveHost ( hosts . get ( MOVING _ NODE ) , 0 , tmd , valueFactory ) ; <nl> + <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1000 , 0 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF1 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1000 , 0 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF2 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1000 , 0 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF3 _ KeyspaceName ) ; <nl> + <nl> + finishMove ( hosts . get ( MOVING _ NODE ) , 0 , tmd ) ; <nl> + <nl> + moveHost ( hosts . get ( MOVING _ NODE ) , 35 , tmd , valueFactory ) ; <nl> + <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 30 , 35 , " 127 . 0 . 0 . 1 " ) , generatePendingMapEntry ( 90 , 0 , " 127 . 0 . 0 . 2 " ) ) , Simple _ RF1 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 30 , 35 , " 127 . 0 . 0 . 1 " ) , generatePendingMapEntry ( 20 , 30 , " 127 . 0 . 0 . 1 " ) , <nl> + generatePendingMapEntry ( 80 , 90 , " 127 . 0 . 0 . 2 " ) , generatePendingMapEntry ( 90 , 0 , " 127 . 0 . 0 . 3 " ) ) , Simple _ RF2 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 30 , 35 , " 127 . 0 . 0 . 1 " ) , generatePendingMapEntry ( 20 , 30 , " 127 . 0 . 0 . 1 " ) , <nl> + generatePendingMapEntry ( 80 , 90 , " 127 . 0 . 0 . 3 " ) , generatePendingMapEntry ( 90 , 0 , " 127 . 0 . 0 . 4 " ) , <nl> + generatePendingMapEntry ( 10 , 20 , " 127 . 0 . 0 . 1 " ) , generatePendingMapEntry ( 70 , 80 , " 127 . 0 . 0 . 2 " ) ) , Simple _ RF3 _ KeyspaceName ) ; <nl> + <nl> + finishMove ( hosts . get ( MOVING _ NODE ) , 35 , tmd ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testMoveWithPendingRangesForSimpleStrategyFourNode ( ) throws Exception <nl> + { <nl> + StorageService ss = StorageService . instance ; <nl> + final int RING _ SIZE = 4 ; <nl> + <nl> + TokenMetadata tmd = ss . getTokenMetadata ( ) ; <nl> + tmd . clearUnsafe ( ) ; <nl> + VersionedValue . VersionedValueFactory valueFactory = new VersionedValue . VersionedValueFactory ( partitioner ) ; <nl> + ArrayList < Token > endpointTokens = new ArrayList < > ( ) ; <nl> + ArrayList < Token > keyTokens = new ArrayList < > ( ) ; <nl> + List < InetAddress > hosts = new ArrayList < > ( ) ; <nl> + List < UUID > hostIds = new ArrayList < > ( ) ; <nl> + <nl> + Util . createInitialRing ( ss , partitioner , endpointTokens , keyTokens , hosts , hostIds , RING _ SIZE ) ; <nl> + PendingRangeCalculatorService . instance . blockUntilFinished ( ) ; <nl> + <nl> + int MOVING _ NODE = 0 ; / / index of the moving node <nl> + moveHost ( hosts . get ( MOVING _ NODE ) , 2 , tmd , valueFactory ) ; <nl> + <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF1 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF2 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF3 _ KeyspaceName ) ; <nl> + <nl> + finishMove ( hosts . get ( MOVING _ NODE ) , 2 , tmd ) ; <nl> + <nl> + <nl> + moveHost ( hosts . get ( MOVING _ NODE ) , 0 , tmd , valueFactory ) ; <nl> + <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 2 " ) ) , Simple _ RF1 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 3 " ) ) , Simple _ RF2 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 4 " ) ) , Simple _ RF3 _ KeyspaceName ) ; <nl> + <nl> + finishMove ( hosts . get ( MOVING _ NODE ) , 0 , tmd ) ; <nl> + <nl> + moveHost ( hosts . get ( MOVING _ NODE ) , 1500 , tmd , valueFactory ) ; <nl> + <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1500 , 0 , " 127 . 0 . 0 . 2 " ) ) , Simple _ RF1 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1500 , 0 , " 127 . 0 . 0 . 3 " ) ) , Simple _ RF2 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1500 , 0 , " 127 . 0 . 0 . 4 " ) ) , Simple _ RF3 _ KeyspaceName ) ; <nl> + <nl> + finishMove ( hosts . get ( MOVING _ NODE ) , 1500 , tmd ) ; <nl> + <nl> + moveHost ( hosts . get ( MOVING _ NODE ) , 0 , tmd , valueFactory ) ; <nl> + <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1500 , 0 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF1 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1500 , 0 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF2 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1500 , 0 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF3 _ KeyspaceName ) ; <nl> + <nl> + finishMove ( hosts . get ( MOVING _ NODE ) , 0 , tmd ) ; <nl> + <nl> + moveHost ( hosts . get ( MOVING _ NODE ) , 15 , tmd , valueFactory ) ; <nl> + <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 10 , 15 , " 127 . 0 . 0 . 1 " ) , generatePendingMapEntry ( 30 , 0 , " 127 . 0 . 0 . 2 " ) ) , Simple _ RF1 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 20 , 30 , " 127 . 0 . 0 . 2 " ) , generatePendingMapEntry ( 10 , 15 , " 127 . 0 . 0 . 1 " ) , <nl> + generatePendingMapEntry ( 0 , 10 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF2 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 15 , 20 , " 127 . 0 . 0 . 2 " ) , <nl> + generatePendingMapEntry ( 0 , 10 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF3 _ KeyspaceName ) ; <nl> + <nl> + finishMove ( hosts . get ( MOVING _ NODE ) , 15 , tmd ) ; <nl> + <nl> + moveHost ( hosts . get ( MOVING _ NODE ) , 0 , tmd , valueFactory ) ; <nl> + <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 30 , 0 , " 127 . 0 . 0 . 1 " ) , <nl> + generatePendingMapEntry ( 10 , 15 , " 127 . 0 . 0 . 3 " ) ) , Simple _ RF1 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 20 , 30 , " 127 . 0 . 0 . 1 " ) , <nl> + generatePendingMapEntry ( 10 , 15 , " 127 . 0 . 0 . 4 " ) , generatePendingMapEntry ( 0 , 10 , " 127 . 0 . 0 . 3 " ) ) , Simple _ RF2 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 15 , 20 , " 127 . 0 . 0 . 1 " ) , <nl> + generatePendingMapEntry ( 0 , 10 , " 127 . 0 . 0 . 4 " ) ) , Simple _ RF3 _ KeyspaceName ) ; <nl> + <nl> + finishMove ( hosts . get ( MOVING _ NODE ) , 0 , tmd ) ; <nl> + <nl> + moveHost ( hosts . get ( MOVING _ NODE ) , 26 , tmd , valueFactory ) ; <nl> + <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 20 , 26 , " 127 . 0 . 0 . 1 " ) , <nl> + generatePendingMapEntry ( 30 , 0 , " 127 . 0 . 0 . 2 " ) ) , Simple _ RF1 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 26 , 30 , " 127 . 0 . 0 . 2 " ) , <nl> + generatePendingMapEntry ( 30 , 0 , " 127 . 0 . 0 . 3 " ) , generatePendingMapEntry ( 10 , 20 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF2 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 10 , " 127 . 0 . 0 . 1 " ) , <nl> + generatePendingMapEntry ( 26 , 30 , " 127 . 0 . 0 . 3 " ) ) , Simple _ RF3 _ KeyspaceName ) ; <nl> + <nl> + finishMove ( hosts . get ( MOVING _ NODE ) , 26 , tmd ) ; <nl> + <nl> + moveHost ( hosts . get ( MOVING _ NODE ) , 0 , tmd , valueFactory ) ; <nl> + <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 20 , 26 , " 127 . 0 . 0 . 4 " ) , <nl> + generatePendingMapEntry ( 30 , 0 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF1 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 30 , 0 , " 127 . 0 . 0 . 1 " ) , <nl> + generatePendingMapEntry ( 26 , 30 , " 127 . 0 . 0 . 1 " ) , generatePendingMapEntry ( 10 , 20 , " 127 . 0 . 0 . 4 " ) ) , Simple _ RF2 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 26 , 30 , " 127 . 0 . 0 . 1 " ) , <nl> + generatePendingMapEntry ( 0 , 10 , " 127 . 0 . 0 . 4 " ) ) , Simple _ RF3 _ KeyspaceName ) ; <nl> + <nl> + finishMove ( hosts . get ( MOVING _ NODE ) , 0 , tmd ) ; <nl> + <nl> + MOVING _ NODE = 3 ; <nl> + <nl> + moveHost ( hosts . get ( MOVING _ NODE ) , 33 , tmd , valueFactory ) ; <nl> + <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 30 , 33 , " 127 . 0 . 0 . 4 " ) ) , Simple _ RF1 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 30 , 33 , " 127 . 0 . 0 . 4 " ) ) , Simple _ RF2 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 30 , 33 , " 127 . 0 . 0 . 4 " ) ) , Simple _ RF3 _ KeyspaceName ) ; <nl> + <nl> + finishMove ( hosts . get ( MOVING _ NODE ) , 33 , tmd ) ; <nl> + <nl> + moveHost ( hosts . get ( MOVING _ NODE ) , 30 , tmd , valueFactory ) ; <nl> + <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 30 , 33 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF1 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 30 , 33 , " 127 . 0 . 0 . 2 " ) ) , Simple _ RF2 _ KeyspaceName ) ; <nl> + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 30 , 33 , " 127 . 0 . 0 . 3 " ) ) , Simple _ RF3 _ KeyspaceName ) ; <nl> + <nl> + finishMove ( hosts . get ( MOVING _ NODE ) , 30 , tmd ) ; <nl> + } <nl> + <nl> + private void moveHost ( InetAddress host , int token , TokenMetadata tmd , VersionedValue . VersionedValueFactory valueFactory ) <nl> + { <nl> + StorageService . instance . onChange ( host , ApplicationState . STATUS , valueFactory . moving ( new BigIntegerToken ( String . valueOf ( token ) ) ) ) ; <nl> + PendingRangeCalculatorService . instance . blockUntilFinished ( ) ; <nl> + assertTrue ( tmd . isMoving ( host ) ) ; <nl> + } <nl> + <nl> + private void finishMove ( InetAddress host , int token , TokenMetadata tmd ) <nl> + { <nl> + tmd . removeFromMoving ( host ) ; <nl> + assertTrue ( ! tmd . isMoving ( host ) ) ; <nl> + tmd . updateNormalToken ( new BigIntegerToken ( String . valueOf ( token ) ) , host ) ; <nl> + } <nl> + <nl> + private Map . Entry < Range < Token > , Collection < InetAddress > > generatePendingMapEntry ( int start , int end , String . . . endpoints ) throws UnknownHostException <nl> + { <nl> + Map < Range < Token > , Collection < InetAddress > > pendingRanges = new HashMap < > ( ) ; <nl> + pendingRanges . put ( generateRange ( start , end ) , makeAddrs ( endpoints ) ) ; <nl> + return pendingRanges . entrySet ( ) . iterator ( ) . next ( ) ; <nl> + } <nl> + <nl> + private Map < Range < Token > , Collection < InetAddress > > generatePendingRanges ( Map . Entry < Range < Token > , Collection < InetAddress > > . . . entries ) <nl> + { <nl> + Map < Range < Token > , Collection < InetAddress > > pendingRanges = new HashMap < > ( ) ; <nl> + for ( Map . Entry < Range < Token > , Collection < InetAddress > > entry : entries ) <nl> + { <nl> + pendingRanges . put ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> + } <nl> + return pendingRanges ; <nl> + } <nl> + <nl> + private void assertPendingRanges ( TokenMetadata tmd , Map < Range < Token > , Collection < InetAddress > > pendingRanges , String keyspaceName ) throws ConfigurationException <nl> + { <nl> + boolean keyspaceFound = false ; <nl> + for ( String nonSystemKeyspaceName : Schema . instance . getNonSystemKeyspaces ( ) ) <nl> + { <nl> + if ( ! keyspaceName . equals ( nonSystemKeyspaceName ) ) <nl> + continue ; <nl> + assertMaps ( pendingRanges , tmd . getPendingRanges ( keyspaceName ) ) ; <nl> + keyspaceFound = true ; <nl> + } <nl> + <nl> + assert keyspaceFound ; <nl> + } <nl> + <nl> + private void assertMaps ( Map < Range < Token > , Collection < InetAddress > > expected , PendingRangeMaps actual ) <nl> + { <nl> + int sizeOfActual = 0 ; <nl> + Iterator < Map . Entry < Range < Token > , List < InetAddress > > > iterator = actual . iterator ( ) ; <nl> + while ( iterator . hasNext ( ) ) <nl> + { <nl> + Map . Entry < Range < Token > , List < InetAddress > > actualEntry = iterator . next ( ) ; <nl> + assertNotNull ( expected . get ( actualEntry . getKey ( ) ) ) ; <nl> + assertEquals ( new HashSet < > ( expected . get ( actualEntry . getKey ( ) ) ) , new HashSet < > ( actualEntry . getValue ( ) ) ) ; <nl> + sizeOfActual + + ; <nl> + } <nl> + <nl> + assertEquals ( expected . size ( ) , sizeOfActual ) ; <nl> + } <nl> + <nl> / * <nl> * Test whether write endpoints is correct when the node is moving . Uses <nl> * StorageService . onChange and does not manipulate token metadata directly . <nl> @ @ - 128 , 6 + 565 , 8 @ @ public class MoveTest <nl> for ( String keyspaceName : Schema . instance . getNonSystemKeyspaces ( ) ) <nl> { <nl> strategy = getStrategy ( keyspaceName , tmd ) ; <nl> + if ( strategy instanceof NetworkTopologyStrategy ) <nl> + continue ; <nl> int numMoved = 0 ; <nl> for ( Token token : keyTokens ) <nl> { <nl> @ @ - 235 , 7 + 674 , 7 @ @ public class MoveTest <nl> * } <nl> * / <nl> <nl> - Multimap < InetAddress , Range < Token > > keyspace1ranges = keyspaceStrategyMap . get ( KEYSPACE1 ) . getAddressRanges ( ) ; <nl> + Multimap < InetAddress , Range < Token > > keyspace1ranges = keyspaceStrategyMap . get ( Simple _ RF1 _ KeyspaceName ) . getAddressRanges ( ) ; <nl> Collection < Range < Token > > ranges1 = keyspace1ranges . get ( InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) ) ; <nl> assertEquals ( 1 , collectionSize ( ranges1 ) ) ; <nl> assertEquals ( generateRange ( 97 , 0 ) , ranges1 . iterator ( ) . next ( ) ) ; <nl> @ @ - 332 , 7 + 771 , 7 @ @ public class MoveTest <nl> * / 127 . 0 . 0 . 10 = [ ( 70 , 87 ] , ( 87 , 97 ] , ( 67 , 70 ] ] <nl> * } <nl> * / <nl> - Multimap < InetAddress , Range < Token > > keyspace4ranges = keyspaceStrategyMap . get ( KEYSPACE4 ) . getAddressRanges ( ) ; <nl> + Multimap < InetAddress , Range < Token > > keyspace4ranges = keyspaceStrategyMap . get ( Simple _ RF3 _ KeyspaceName ) . getAddressRanges ( ) ; <nl> ranges1 = keyspace4ranges . get ( InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) ) ; <nl> assertEquals ( collectionSize ( ranges1 ) , 3 ) ; <nl> assertTrue ( ranges1 . equals ( generateRanges ( 97 , 0 , 70 , 87 , 87 , 97 ) ) ) ; <nl> @ @ - 366 , 17 + 805 , 17 @ @ public class MoveTest <nl> <nl> / / pre - calculate the results . <nl> Map < String , Multimap < Token , InetAddress > > expectedEndpoints = new HashMap < String , Multimap < Token , InetAddress > > ( ) ; <nl> - expectedEndpoints . put ( KEYSPACE1 , HashMultimap . < Token , InetAddress > create ( ) ) ; <nl> - expectedEndpoints . get ( KEYSPACE1 ) . putAll ( new BigIntegerToken ( " 5 " ) , makeAddrs ( " 127 . 0 . 0 . 2 " ) ) ; <nl> - expectedEndpoints . get ( KEYSPACE1 ) . putAll ( new BigIntegerToken ( " 15 " ) , makeAddrs ( " 127 . 0 . 0 . 3 " ) ) ; <nl> - expectedEndpoints . get ( KEYSPACE1 ) . putAll ( new BigIntegerToken ( " 25 " ) , makeAddrs ( " 127 . 0 . 0 . 4 " ) ) ; <nl> - expectedEndpoints . get ( KEYSPACE1 ) . putAll ( new BigIntegerToken ( " 35 " ) , makeAddrs ( " 127 . 0 . 0 . 5 " ) ) ; <nl> - expectedEndpoints . get ( KEYSPACE1 ) . putAll ( new BigIntegerToken ( " 45 " ) , makeAddrs ( " 127 . 0 . 0 . 6 " ) ) ; <nl> - expectedEndpoints . get ( KEYSPACE1 ) . putAll ( new BigIntegerToken ( " 55 " ) , makeAddrs ( " 127 . 0 . 0 . 7 " , " 127 . 0 . 1 . 1 " ) ) ; <nl> - expectedEndpoints . get ( KEYSPACE1 ) . putAll ( new BigIntegerToken ( " 65 " ) , makeAddrs ( " 127 . 0 . 0 . 7 " ) ) ; <nl> - expectedEndpoints . get ( KEYSPACE1 ) . putAll ( new BigIntegerToken ( " 75 " ) , makeAddrs ( " 127 . 0 . 0 . 9 " , " 127 . 0 . 1 . 2 " ) ) ; <nl> - expectedEndpoints . get ( KEYSPACE1 ) . putAll ( new BigIntegerToken ( " 85 " ) , makeAddrs ( " 127 . 0 . 0 . 9 " ) ) ; <nl> - expectedEndpoints . get ( KEYSPACE1 ) . putAll ( new BigIntegerToken ( " 95 " ) , makeAddrs ( " 127 . 0 . 0 . 10 " ) ) ; <nl> + expectedEndpoints . put ( Simple _ RF1 _ KeyspaceName , HashMultimap . < Token , InetAddress > create ( ) ) ; <nl> + expectedEndpoints . get ( Simple _ RF1 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 5 " ) , makeAddrs ( " 127 . 0 . 0 . 2 " ) ) ; <nl> + expectedEndpoints . get ( Simple _ RF1 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 15 " ) , makeAddrs ( " 127 . 0 . 0 . 3 " ) ) ; <nl> + expectedEndpoints . get ( Simple _ RF1 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 25 " ) , makeAddrs ( " 127 . 0 . 0 . 4 " ) ) ; <nl> + expectedEndpoints . get ( Simple _ RF1 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 35 " ) , makeAddrs ( " 127 . 0 . 0 . 5 " ) ) ; <nl> + expectedEndpoints . get ( Simple _ RF1 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 45 " ) , makeAddrs ( " 127 . 0 . 0 . 6 " ) ) ; <nl> + expectedEndpoints . get ( Simple _ RF1 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 55 " ) , makeAddrs ( " 127 . 0 . 0 . 7 " , " 127 . 0 . 1 . 1 " ) ) ; <nl> + expectedEndpoints . get ( Simple _ RF1 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 65 " ) , makeAddrs ( " 127 . 0 . 0 . 7 " ) ) ; <nl> + expectedEndpoints . get ( Simple _ RF1 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 75 " ) , makeAddrs ( " 127 . 0 . 0 . 9 " , " 127 . 0 . 1 . 2 " ) ) ; <nl> + expectedEndpoints . get ( Simple _ RF1 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 85 " ) , makeAddrs ( " 127 . 0 . 0 . 9 " ) ) ; <nl> + expectedEndpoints . get ( Simple _ RF1 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 95 " ) , makeAddrs ( " 127 . 0 . 0 . 10 " ) ) ; <nl> expectedEndpoints . put ( KEYSPACE2 , HashMultimap . < Token , InetAddress > create ( ) ) ; <nl> expectedEndpoints . get ( KEYSPACE2 ) . putAll ( new BigIntegerToken ( " 5 " ) , makeAddrs ( " 127 . 0 . 0 . 2 " ) ) ; <nl> expectedEndpoints . get ( KEYSPACE2 ) . putAll ( new BigIntegerToken ( " 15 " ) , makeAddrs ( " 127 . 0 . 0 . 3 " ) ) ; <nl> @ @ - 399 , 17 + 838 , 17 @ @ public class MoveTest <nl> expectedEndpoints . get ( KEYSPACE3 ) . putAll ( new BigIntegerToken ( " 75 " ) , makeAddrs ( " 127 . 0 . 0 . 9 " , " 127 . 0 . 0 . 10 " , " 127 . 0 . 0 . 1 " , " 127 . 0 . 0 . 2 " , " 127 . 0 . 0 . 3 " , " 127 . 0 . 1 . 2 " ) ) ; <nl> expectedEndpoints . get ( KEYSPACE3 ) . putAll ( new BigIntegerToken ( " 85 " ) , makeAddrs ( " 127 . 0 . 0 . 9 " , " 127 . 0 . 0 . 10 " , " 127 . 0 . 0 . 1 " , " 127 . 0 . 0 . 2 " , " 127 . 0 . 0 . 3 " ) ) ; <nl> expectedEndpoints . get ( KEYSPACE3 ) . putAll ( new BigIntegerToken ( " 95 " ) , makeAddrs ( " 127 . 0 . 0 . 10 " , " 127 . 0 . 0 . 1 " , " 127 . 0 . 0 . 2 " , " 127 . 0 . 0 . 3 " , " 127 . 0 . 0 . 4 " ) ) ; <nl> - expectedEndpoints . put ( KEYSPACE4 , HashMultimap . < Token , InetAddress > create ( ) ) ; <nl> - expectedEndpoints . get ( KEYSPACE4 ) . putAll ( new BigIntegerToken ( " 5 " ) , makeAddrs ( " 127 . 0 . 0 . 2 " , " 127 . 0 . 0 . 3 " , " 127 . 0 . 0 . 4 " ) ) ; <nl> - expectedEndpoints . get ( KEYSPACE4 ) . putAll ( new BigIntegerToken ( " 15 " ) , makeAddrs ( " 127 . 0 . 0 . 3 " , " 127 . 0 . 0 . 4 " , " 127 . 0 . 0 . 5 " ) ) ; <nl> - expectedEndpoints . get ( KEYSPACE4 ) . putAll ( new BigIntegerToken ( " 25 " ) , makeAddrs ( " 127 . 0 . 0 . 4 " , " 127 . 0 . 0 . 5 " , " 127 . 0 . 0 . 6 " ) ) ; <nl> - expectedEndpoints . get ( KEYSPACE4 ) . putAll ( new BigIntegerToken ( " 35 " ) , makeAddrs ( " 127 . 0 . 0 . 5 " , " 127 . 0 . 0 . 6 " , " 127 . 0 . 0 . 7 " , " 127 . 0 . 1 . 1 " ) ) ; <nl> - expectedEndpoints . get ( KEYSPACE4 ) . putAll ( new BigIntegerToken ( " 45 " ) , makeAddrs ( " 127 . 0 . 0 . 6 " , " 127 . 0 . 0 . 7 " , " 127 . 0 . 0 . 8 " , " 127 . 0 . 1 . 1 " ) ) ; <nl> - expectedEndpoints . get ( KEYSPACE4 ) . putAll ( new BigIntegerToken ( " 55 " ) , makeAddrs ( " 127 . 0 . 0 . 7 " , " 127 . 0 . 0 . 8 " , " 127 . 0 . 0 . 9 " , " 127 . 0 . 1 . 1 " , " 127 . 0 . 1 . 2 " ) ) ; <nl> - expectedEndpoints . get ( KEYSPACE4 ) . putAll ( new BigIntegerToken ( " 65 " ) , makeAddrs ( " 127 . 0 . 0 . 7 " , " 127 . 0 . 0 . 8 " , " 127 . 0 . 0 . 9 " , " 127 . 0 . 1 . 2 " ) ) ; <nl> - expectedEndpoints . get ( KEYSPACE4 ) . putAll ( new BigIntegerToken ( " 75 " ) , makeAddrs ( " 127 . 0 . 0 . 9 " , " 127 . 0 . 0 . 10 " , " 127 . 0 . 0 . 1 " , " 127 . 0 . 1 . 2 " ) ) ; <nl> - expectedEndpoints . get ( KEYSPACE4 ) . putAll ( new BigIntegerToken ( " 85 " ) , makeAddrs ( " 127 . 0 . 0 . 9 " , " 127 . 0 . 0 . 10 " , " 127 . 0 . 0 . 1 " ) ) ; <nl> - expectedEndpoints . get ( KEYSPACE4 ) . putAll ( new BigIntegerToken ( " 95 " ) , makeAddrs ( " 127 . 0 . 0 . 10 " , " 127 . 0 . 0 . 1 " , " 127 . 0 . 0 . 2 " ) ) ; <nl> + expectedEndpoints . put ( Simple _ RF3 _ KeyspaceName , HashMultimap . < Token , InetAddress > create ( ) ) ; <nl> + expectedEndpoints . get ( Simple _ RF3 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 5 " ) , makeAddrs ( " 127 . 0 . 0 . 2 " , " 127 . 0 . 0 . 3 " , " 127 . 0 . 0 . 4 " ) ) ; <nl> + expectedEndpoints . get ( Simple _ RF3 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 15 " ) , makeAddrs ( " 127 . 0 . 0 . 3 " , " 127 . 0 . 0 . 4 " , " 127 . 0 . 0 . 5 " ) ) ; <nl> + expectedEndpoints . get ( Simple _ RF3 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 25 " ) , makeAddrs ( " 127 . 0 . 0 . 4 " , " 127 . 0 . 0 . 5 " , " 127 . 0 . 0 . 6 " ) ) ; <nl> + expectedEndpoints . get ( Simple _ RF3 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 35 " ) , makeAddrs ( " 127 . 0 . 0 . 5 " , " 127 . 0 . 0 . 6 " , " 127 . 0 . 0 . 7 " , " 127 . 0 . 1 . 1 " ) ) ; <nl> + expectedEndpoints . get ( Simple _ RF3 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 45 " ) , makeAddrs ( " 127 . 0 . 0 . 6 " , " 127 . 0 . 0 . 7 " , " 127 . 0 . 0 . 8 " , " 127 . 0 . 1 . 1 " ) ) ; <nl> + expectedEndpoints . get ( Simple _ RF3 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 55 " ) , makeAddrs ( " 127 . 0 . 0 . 7 " , " 127 . 0 . 0 . 8 " , " 127 . 0 . 0 . 9 " , " 127 . 0 . 1 . 1 " , " 127 . 0 . 1 . 2 " ) ) ; <nl> + expectedEndpoints . get ( Simple _ RF3 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 65 " ) , makeAddrs ( " 127 . 0 . 0 . 7 " , " 127 . 0 . 0 . 8 " , " 127 . 0 . 0 . 9 " , " 127 . 0 . 1 . 2 " ) ) ; <nl> + expectedEndpoints . get ( Simple _ RF3 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 75 " ) , makeAddrs ( " 127 . 0 . 0 . 9 " , " 127 . 0 . 0 . 10 " , " 127 . 0 . 0 . 1 " , " 127 . 0 . 1 . 2 " ) ) ; <nl> + expectedEndpoints . get ( Simple _ RF3 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 85 " ) , makeAddrs ( " 127 . 0 . 0 . 9 " , " 127 . 0 . 0 . 10 " , " 127 . 0 . 0 . 1 " ) ) ; <nl> + expectedEndpoints . get ( Simple _ RF3 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 95 " ) , makeAddrs ( " 127 . 0 . 0 . 10 " , " 127 . 0 . 0 . 1 " , " 127 . 0 . 0 . 2 " ) ) ; <nl> <nl> for ( Map . Entry < String , AbstractReplicationStrategy > keyspaceStrategy : keyspaceStrategyMap . entrySet ( ) ) <nl> {
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index a26f9e0 . . e5c4430 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 14 , 6 + 14 , 7 @ @ 
 * Disable reloading of GossipingPropertyFileSnitch ( CASSANDRA - 9474 ) 
 * Verify tables in pseudo - system keyspaces at startup ( CASSANDRA - 10761 ) 
 Merged from 2 . 1 : 
 + * Fix pending range calculation during moves ( CASSANDRA - 10887 ) 
 * Sane default ( 200Mbps ) for inter - DC streaming througput ( CASSANDRA - 9708 ) 
 * Match cassandra - loader options in COPY FROM ( CASSANDRA - 9303 ) 
 * Fix binding to any address in CqlBulkRecordWriter ( CASSANDRA - 9309 ) 
 diff - - git a / src / java / org / apache / cassandra / dht / Range . java b / src / java / org / apache / cassandra / dht / Range . java 
 index 9893531 . . f2c5996 100644 
 - - - a / src / java / org / apache / cassandra / dht / Range . java 
 + + + b / src / java / org / apache / cassandra / dht / Range . java 
 @ @ - 292 , 7 + 292 , 28 @ @ public class Range < T extends RingPosition < T > > extends AbstractBounds < T > implemen 
 return rhs . differenceToFetch ( this ) ; 
 } 
 
 + public Set < Range < T > > subtractAll ( Collection < Range < T > > ranges ) 
 + { 
 + Set < Range < T > > result = new HashSet < > ( ) ; 
 + result . add ( this ) ; 
 + for ( Range < T > range : ranges ) 
 + { 
 + result = substractAllFromToken ( result , range ) ; 
 + } 
 + 
 + return result ; 
 + } 
 
 + private static < T extends RingPosition < T > > Set < Range < T > > substractAllFromToken ( Set < Range < T > > ranges , Range < T > subtract ) 
 + { 
 + Set < Range < T > > result = new HashSet < > ( ) ; 
 + for ( Range < T > range : ranges ) 
 + { 
 + result . addAll ( range . subtract ( subtract ) ) ; 
 + } 
 + 
 + return result ; 
 + } 
 / * * 
 * Calculate set of the difference ranges of given two ranges 
 * ( as current ( A , B ] and rhs is ( C , D ] ) 
 diff - - git a / src / java / org / apache / cassandra / locator / TokenMetadata . java b / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 index 00d8ee9 . . de16fda 100644 
 - - - a / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 + + + b / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 @ @ - 799 , 14 + 799 , 42 @ @ public class TokenMetadata 
 / / simply add and remove them one by one to allLeftMetadata and check in between what their ranges would be . 
 for ( Pair < Token , InetAddress > moving : movingEndpoints ) 
 { 
 + / / Calculate all the ranges which will could be affected . This will include the ranges before and after the move . 
 + Set < Range < Token > > moveAffectedRanges = new HashSet < > ( ) ; 
 InetAddress endpoint = moving . right ; / / address of the moving node 
 + / / Add ranges before the move 
 + for ( Range < Token > range : strategy . getAddressRanges ( allLeftMetadata ) . get ( endpoint ) ) 
 + { 
 + moveAffectedRanges . add ( range ) ; 
 + } 
 
 - / / moving . left is a new token of the endpoint 
 allLeftMetadata . updateNormalToken ( moving . left , endpoint ) ; 
 - 
 + / / Add ranges after the move 
 for ( Range < Token > range : strategy . getAddressRanges ( allLeftMetadata ) . get ( endpoint ) ) 
 { 
 - newPendingRanges . addPendingRange ( range , endpoint ) ; 
 + moveAffectedRanges . add ( range ) ; 
 + } 
 + 
 + for ( Range < Token > range : moveAffectedRanges ) 
 + { 
 + Set < InetAddress > currentEndpoints = ImmutableSet . copyOf ( strategy . calculateNaturalEndpoints ( range . right , metadata ) ) ; 
 + Set < InetAddress > newEndpoints = ImmutableSet . copyOf ( strategy . calculateNaturalEndpoints ( range . right , allLeftMetadata ) ) ; 
 + Set < InetAddress > difference = Sets . difference ( newEndpoints , currentEndpoints ) ; 
 + for ( final InetAddress address : difference ) 
 + { 
 + Collection < Range < Token > > newRanges = strategy . getAddressRanges ( allLeftMetadata ) . get ( address ) ; 
 + Collection < Range < Token > > oldRanges = strategy . getAddressRanges ( metadata ) . get ( address ) ; 
 + / / We want to get rid of any ranges which the node is currently getting . 
 + newRanges . removeAll ( oldRanges ) ; 
 + 
 + for ( Range < Token > newRange : newRanges ) 
 + { 
 + for ( Range < Token > pendingRange : newRange . subtractAll ( oldRanges ) ) 
 + { 
 + newPendingRanges . addPendingRange ( pendingRange , address ) ; 
 + } 
 + } 
 + } 
 } 
 
 allLeftMetadata . removeEndpoint ( endpoint ) ; 
 diff - - git a / test / unit / org / apache / cassandra / Util . java b / test / unit / org / apache / cassandra / Util . java 
 index da81aaa . . 91aa5fd 100644 
 - - - a / test / unit / org / apache / cassandra / Util . java 
 + + + b / test / unit / org / apache / cassandra / Util . java 
 @ @ - 273 , 9 + 273 , 11 @ @ public class Util 
 for ( int i = hostIdPool . size ( ) ; i < howMany ; i + + ) 
 hostIdPool . add ( UUID . randomUUID ( ) ) ; 
 
 + boolean endpointTokenPrefilled = endpointTokens ! = null & & ! endpointTokens . isEmpty ( ) ; 
 for ( int i = 0 ; i < howMany ; i + + ) 
 { 
 - endpointTokens . add ( new BigIntegerToken ( String . valueOf ( 10 * i ) ) ) ; 
 + if ( ! endpointTokenPrefilled ) 
 + endpointTokens . add ( new BigIntegerToken ( String . valueOf ( 10 * i ) ) ) ; 
 keyTokens . add ( new BigIntegerToken ( String . valueOf ( 10 * i + 5 ) ) ) ; 
 hostIds . add ( hostIdPool . get ( i ) ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / dht / RangeTest . java b / test / unit / org / apache / cassandra / dht / RangeTest . java 
 index 85f2586 . . 4255487 100644 
 - - - a / test / unit / org / apache / cassandra / dht / RangeTest . java 
 + + + b / test / unit / org / apache / cassandra / dht / RangeTest . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 package org . apache . cassandra . dht ; 
 
 import java . nio . ByteBuffer ; 
 + import java . util . Collection ; 
 import java . util . ArrayList ; 
 import java . util . Collections ; 
 import java . util . HashSet ; 
 @ @ - 30 , 6 + 31 , 7 @ @ import com . google . common . base . Joiner ; 
 
 import static java . util . Arrays . asList ; 
 
 + import org . apache . commons . collections . CollectionUtils ; 
 import org . apache . commons . lang3 . StringUtils ; 
 import org . junit . Test ; 
 import org . apache . cassandra . db . RowPosition ; 
 @ @ - 329 , 6 + 331 , 59 @ @ public class RangeTest 
 assert t1 . compareTo ( t4 ) = = 0 ; 
 } 
 
 + private Range < Token > makeRange ( long token1 , long token2 ) 
 + { 
 + return new Range < Token > ( new Murmur3Partitioner . LongToken ( token1 ) , new Murmur3Partitioner . LongToken ( token2 ) ) ; 
 + } 
 + 
 + private void assertRanges ( Set < Range < Token > > result , Long . . . tokens ) 
 + { 
 + assert tokens . length % 2 = = 0 ; 
 + 
 + final Set < Range < Token > > expected = new HashSet < > ( ) ; 
 + for ( int i = 0 ; i < tokens . length ; i + = 2 ) 
 + { 
 + expected . add ( makeRange ( tokens [ i ] , tokens [ i + 1 ] ) ) ; 
 + } 
 + 
 + assert CollectionUtils . isEqualCollection ( result , expected ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testSubtractAll ( ) 
 + { 
 + Range < Token > range = new Range < Token > ( new Murmur3Partitioner . LongToken ( 1L ) , new Murmur3Partitioner . LongToken ( 100L ) ) ; 
 + 
 + Collection < Range < Token > > collection = new HashSet < > ( ) ; 
 + collection . add ( makeRange ( 1L , 10L ) ) ; 
 + assertRanges ( range . subtractAll ( collection ) , 10L , 100L ) ; 
 + collection . add ( makeRange ( 90L , 100L ) ) ; 
 + assertRanges ( range . subtractAll ( collection ) , 10L , 90L ) ; 
 + collection . add ( makeRange ( 54L , 60L ) ) ; 
 + assertRanges ( range . subtractAll ( collection ) , 10L , 54L , 60L , 90L ) ; 
 + collection . add ( makeRange ( 80L , 95L ) ) ; 
 + assertRanges ( range . subtractAll ( collection ) , 10L , 54L , 60L , 80L ) ; 
 + } 
 + 
 + @ Test 
 + public void testSubtractAllWithWrapAround ( ) 
 + { 
 + Range < Token > range = new Range < Token > ( new Murmur3Partitioner . LongToken ( 100L ) , new Murmur3Partitioner . LongToken ( 10L ) ) ; 
 + 
 + Collection < Range < Token > > collection = new HashSet < > ( ) ; 
 + collection . add ( makeRange ( 20L , 30L ) ) ; 
 + assertRanges ( range . subtractAll ( collection ) , 100L , 10L ) ; 
 + collection . add ( makeRange ( 200L , 500L ) ) ; 
 + assertRanges ( range . subtractAll ( collection ) , 100L , 200L , 500L , 10L ) ; 
 + collection . add ( makeRange ( 1L , 10L ) ) ; 
 + assertRanges ( range . subtractAll ( collection ) , 100L , 200L , 500L , 1L ) ; 
 + collection . add ( makeRange ( 0L , 1L ) ) ; 
 + assertRanges ( range . subtractAll ( collection ) , 100L , 200L , 500L , 0L ) ; 
 + collection . add ( makeRange ( 1000L , 0 ) ) ; 
 + assertRanges ( range . subtractAll ( collection ) , 100L , 200L , 500L , 1000L ) ; 
 + } 
 + 
 private Range < Token > makeRange ( String token1 , String token2 ) 
 { 
 return new Range < Token > ( new BigIntegerToken ( token1 ) , new BigIntegerToken ( token2 ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / service / MoveTest . java b / test / unit / org / apache / cassandra / service / MoveTest . java 
 index 6c9e589 . . bd4317d 100644 
 - - - a / test / unit / org / apache / cassandra / service / MoveTest . java 
 + + + b / test / unit / org / apache / cassandra / service / MoveTest . java 
 @ @ - 27 , 7 + 27 , 13 @ @ import com . google . common . collect . HashMultimap ; 
 import com . google . common . collect . Multimap ; 
 import static org . junit . Assert . * ; 
 
 + import org . apache . cassandra . config . CFMetaData ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . db . marshal . BytesType ; 
 import org . apache . cassandra . gms . Gossiper ; 
 + import org . apache . cassandra . locator . AbstractNetworkTopologySnitch ; 
 + import org . apache . cassandra . locator . NetworkTopologyStrategy ; 
 + import org . apache . cassandra . locator . PendingRangeMaps ; 
 import org . junit . AfterClass ; 
 import org . junit . Before ; 
 import org . junit . BeforeClass ; 
 @ @ - 50 , 10 + 56 , 17 @ @ public class MoveTest 
 { 
 private static final IPartitioner partitioner = RandomPartitioner . instance ; 
 private static IPartitioner oldPartitioner ; 
 - private static final String KEYSPACE1 = " MoveTestKeyspace1 " ; 
 + / / Simple Strategy Keyspaces 
 + private static final String Simple _ RF1 _ KeyspaceName = " MoveTestKeyspace1 " ; 
 + private static final String Simple _ RF2 _ KeyspaceName = " MoveTestKeyspace5 " ; 
 + private static final String Simple _ RF3 _ KeyspaceName = " MoveTestKeyspace4 " ; 
 private static final String KEYSPACE2 = " MoveTestKeyspace2 " ; 
 private static final String KEYSPACE3 = " MoveTestKeyspace3 " ; 
 - private static final String KEYSPACE4 = " MoveTestKeyspace4 " ; 
 + 
 + / / Network Strategy Keyspace with RF DC1 = 1 and DC2 = 1 and so on . 
 + private static final String Network _ 11 _ KeyspaceName = " MoveTestNetwork11 " ; 
 + private static final String Network _ 22 _ KeyspaceName = " MoveTestNetwork22 " ; 
 + private static final String Network _ 33 _ KeyspaceName = " MoveTestNetwork33 " ; 
 
 / * 
 * NOTE : the tests above uses RandomPartitioner , which is not the default 
 @ @ - 67 , 6 + 80 , 9 @ @ public class MoveTest 
 oldPartitioner = StorageService . instance . setPartitionerUnsafe ( partitioner ) ; 
 SchemaLoader . loadSchema ( ) ; 
 SchemaLoader . schemaDefinition ( " MoveTest " ) ; 
 + addNetworkTopologyKeyspace ( Network _ 11 _ KeyspaceName , 1 , 1 ) ; 
 + addNetworkTopologyKeyspace ( Network _ 22 _ KeyspaceName , 2 , 2 ) ; 
 + addNetworkTopologyKeyspace ( Network _ 33 _ KeyspaceName , 3 , 3 ) ; 
 } 
 
 @ AfterClass 
 @ @ - 82 , 6 + 98 , 427 @ @ public class MoveTest 
 StorageService . instance . getTokenMetadata ( ) . clearUnsafe ( ) ; 
 } 
 
 + private static void addNetworkTopologyKeyspace ( String keyspaceName , Integer . . . replicas ) throws ConfigurationException 
 + { 
 + 
 + DatabaseDescriptor . setEndpointSnitch ( new AbstractNetworkTopologySnitch ( ) 
 + { 
 + / / Odd IPs are in DC1 and Even are in DC2 . Endpoints upto . 14 will have unique racks and 
 + / / then will be same for a set of three . 
 + @ Override 
 + public String getRack ( InetAddress endpoint ) 
 + { 
 + int ipLastPart = getIPLastPart ( endpoint ) ; 
 + if ( ipLastPart < = 14 ) 
 + return UUID . randomUUID ( ) . toString ( ) ; 
 + else 
 + return " RAC " + ( ipLastPart % 3 ) ; 
 + } 
 + 
 + @ Override 
 + public String getDatacenter ( InetAddress endpoint ) 
 + { 
 + if ( getIPLastPart ( endpoint ) % 2 = = 0 ) 
 + return " DC2 " ; 
 + else 
 + return " DC1 " ; 
 + } 
 + 
 + private int getIPLastPart ( InetAddress endpoint ) 
 + { 
 + String str = endpoint . toString ( ) ; 
 + int index = str . lastIndexOf ( " . " ) ; 
 + return Integer . parseInt ( str . substring ( index + 1 ) . trim ( ) ) ; 
 + } 
 + } ) ; 
 + 
 + Class < ? extends AbstractReplicationStrategy > strategy = NetworkTopologyStrategy . class ; 
 + KSMetaData keyspace = KSMetaData . testMetadata ( keyspaceName , strategy , configOptions ( replicas ) , 
 + CFMetaData . denseCFMetaData ( keyspaceName , " CF1 " , BytesType . instance ) ) ; 
 + MigrationManager . announceNewKeyspace ( keyspace ) ; 
 + } 
 + 
 + private static Map < String , String > configOptions ( Integer [ ] replicas ) 
 + { 
 + Map < String , String > configOptions = new HashMap < > ( ) ; 
 + int i = 1 ; 
 + for ( Integer replica : replicas ) 
 + { 
 + if ( replica = = null ) 
 + continue ; 
 + configOptions . put ( " DC " + i + + , String . valueOf ( replica ) ) ; 
 + } 
 + return configOptions ; 
 + } 
 + 
 + @ Test 
 + public void testMoveWithPendingRangesNetworkStrategyRackAwareThirtyNodes ( ) throws Exception 
 + { 
 + StorageService ss = StorageService . instance ; 
 + final int RING _ SIZE = 60 ; 
 + 
 + TokenMetadata tmd = ss . getTokenMetadata ( ) ; 
 + tmd . clearUnsafe ( ) ; 
 + VersionedValue . VersionedValueFactory valueFactory = new VersionedValue . VersionedValueFactory ( partitioner ) ; 
 + ArrayList < Token > endpointTokens = new ArrayList < > ( ) ; 
 + ArrayList < Token > keyTokens = new ArrayList < > ( ) ; 
 + List < InetAddress > hosts = new ArrayList < > ( ) ; 
 + List < UUID > hostIds = new ArrayList < > ( ) ; 
 + 
 + for ( int i = 0 ; i < RING _ SIZE / 2 ; i + + ) 
 + { 
 + endpointTokens . add ( new BigIntegerToken ( String . valueOf ( 10 * i ) ) ) ; 
 + endpointTokens . add ( new BigIntegerToken ( String . valueOf ( ( 10 * i ) + 1 ) ) ) ; 
 + } 
 + Util . createInitialRing ( ss , partitioner , endpointTokens , keyTokens , hosts , hostIds , RING _ SIZE ) ; 
 + PendingRangeCalculatorService . instance . blockUntilFinished ( ) ; 
 + 
 + / / Moving Endpoint 127 . 0 . 0 . 37 in RAC1 with current token 180 
 + int MOVING _ NODE = 36 ; 
 + moveHost ( hosts . get ( MOVING _ NODE ) , 215 , tmd , valueFactory ) ; 
 + 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 150 , 151 , " 127 . 0 . 0 . 43 " ) , 
 + generatePendingMapEntry ( 151 , 160 , " 127 . 0 . 0 . 43 " ) , generatePendingMapEntry ( 160 , 161 , " 127 . 0 . 0 . 43 " ) , 
 + generatePendingMapEntry ( 161 , 170 , " 127 . 0 . 0 . 43 " ) , generatePendingMapEntry ( 170 , 171 , " 127 . 0 . 0 . 43 " ) , 
 + generatePendingMapEntry ( 171 , 180 , " 127 . 0 . 0 . 43 " ) , generatePendingMapEntry ( 210 , 211 , " 127 . 0 . 0 . 37 " ) , 
 + generatePendingMapEntry ( 211 , 215 , " 127 . 0 . 0 . 37 " ) ) , Network _ 33 _ KeyspaceName ) ; 
 + 
 + finishMove ( hosts . get ( MOVING _ NODE ) , 215 , tmd ) ; 
 + 
 + / / Moving it back to original spot 
 + moveHost ( hosts . get ( MOVING _ NODE ) , 180 , tmd , valueFactory ) ; 
 + finishMove ( hosts . get ( MOVING _ NODE ) , 180 , tmd ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testMoveWithPendingRangesNetworkStrategyTenNode ( ) throws Exception 
 + { 
 + StorageService ss = StorageService . instance ; 
 + final int RING _ SIZE = 14 ; 
 + 
 + TokenMetadata tmd = ss . getTokenMetadata ( ) ; 
 + tmd . clearUnsafe ( ) ; 
 + VersionedValue . VersionedValueFactory valueFactory = new VersionedValue . VersionedValueFactory ( partitioner ) ; 
 + ArrayList < Token > endpointTokens = new ArrayList < > ( ) ; 
 + ArrayList < Token > keyTokens = new ArrayList < > ( ) ; 
 + List < InetAddress > hosts = new ArrayList < > ( ) ; 
 + List < UUID > hostIds = new ArrayList < > ( ) ; 
 + 
 + for ( int i = 0 ; i < RING _ SIZE / 2 ; i + + ) 
 + { 
 + endpointTokens . add ( new BigIntegerToken ( String . valueOf ( 10 * i ) ) ) ; 
 + endpointTokens . add ( new BigIntegerToken ( String . valueOf ( ( 10 * i ) + 1 ) ) ) ; 
 + } 
 + 
 + Util . createInitialRing ( ss , partitioner , endpointTokens , keyTokens , hosts , hostIds , RING _ SIZE ) ; 
 + PendingRangeCalculatorService . instance . blockUntilFinished ( ) ; 
 + 
 + int MOVING _ NODE = 0 ; 
 + moveHost ( hosts . get ( MOVING _ NODE ) , 5 , tmd , valueFactory ) ; 
 + 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 1 , " 127 . 0 . 0 . 1 " ) , 
 + generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 1 " ) ) , Network _ 11 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 1 , " 127 . 0 . 0 . 1 " ) , 
 + generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 1 " ) ) , Network _ 22 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 1 , " 127 . 0 . 0 . 1 " ) , 
 + generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 1 " ) ) , Network _ 33 _ KeyspaceName ) ; 
 + 
 + finishMove ( hosts . get ( MOVING _ NODE ) , 5 , tmd ) ; 
 + 
 + moveHost ( hosts . get ( MOVING _ NODE ) , 0 , tmd , valueFactory ) ; 
 + 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 1 , " 127 . 0 . 0 . 3 " ) , 
 + generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 3 " ) ) , Network _ 11 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 1 , " 127 . 0 . 0 . 5 " ) , 
 + generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 5 " ) ) , Network _ 22 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 1 , " 127 . 0 . 0 . 7 " ) , 
 + generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 7 " ) ) , Network _ 33 _ KeyspaceName ) ; 
 + 
 + finishMove ( hosts . get ( MOVING _ NODE ) , 0 , tmd ) ; 
 + 
 + MOVING _ NODE = 1 ; 
 + moveHost ( hosts . get ( MOVING _ NODE ) , 5 , tmd , valueFactory ) ; 
 + 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 2 " ) ) , Network _ 11 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 2 " ) ) , Network _ 22 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 2 " ) ) , Network _ 33 _ KeyspaceName ) ; 
 + 
 + finishMove ( hosts . get ( MOVING _ NODE ) , 5 , tmd ) ; 
 + 
 + moveHost ( hosts . get ( MOVING _ NODE ) , 1 , tmd , valueFactory ) ; 
 + 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 4 " ) ) , Network _ 11 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 6 " ) ) , Network _ 22 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1 , 5 , " 127 . 0 . 0 . 8 " ) ) , Network _ 33 _ KeyspaceName ) ; 
 + 
 + finishMove ( hosts . get ( MOVING _ NODE ) , 1 , tmd ) ; 
 + 
 + MOVING _ NODE = 3 ; 
 + moveHost ( hosts . get ( MOVING _ NODE ) , 25 , tmd , valueFactory ) ; 
 + 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1 , 10 , " 127 . 0 . 0 . 6 " ) , 
 + generatePendingMapEntry ( 10 , 11 , " 127 . 0 . 0 . 6 " ) , generatePendingMapEntry ( 21 , 25 , " 127 . 0 . 0 . 4 " ) ) , Network _ 11 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 61 , 0 , " 127 . 0 . 0 . 6 " ) , 
 + generatePendingMapEntry ( 0 , 1 , " 127 . 0 . 0 . 6 " ) , generatePendingMapEntry ( 21 , 25 , " 127 . 0 . 0 . 4 " ) , 
 + generatePendingMapEntry ( 11 , 20 , " 127 . 0 . 0 . 4 " ) , generatePendingMapEntry ( 20 , 21 , " 127 . 0 . 0 . 4 " ) ) , Network _ 22 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 51 , 60 , " 127 . 0 . 0 . 6 " ) , 
 + generatePendingMapEntry ( 60 , 61 , " 127 . 0 . 0 . 6 " ) , generatePendingMapEntry ( 21 , 25 , " 127 . 0 . 0 . 4 " ) , 
 + generatePendingMapEntry ( 11 , 20 , " 127 . 0 . 0 . 4 " ) , generatePendingMapEntry ( 20 , 21 , " 127 . 0 . 0 . 4 " ) ) , Network _ 33 _ KeyspaceName ) ; 
 + 
 + finishMove ( hosts . get ( MOVING _ NODE ) , 25 , tmd ) ; 
 + 
 + moveHost ( hosts . get ( MOVING _ NODE ) , 11 , tmd , valueFactory ) ; 
 + 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1 , 10 , " 127 . 0 . 0 . 4 " ) , 
 + generatePendingMapEntry ( 10 , 11 , " 127 . 0 . 0 . 4 " ) , generatePendingMapEntry ( 21 , 25 , " 127 . 0 . 0 . 8 " ) ) , Network _ 11 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 61 , 0 , " 127 . 0 . 0 . 4 " ) , 
 + generatePendingMapEntry ( 0 , 1 , " 127 . 0 . 0 . 4 " ) , generatePendingMapEntry ( 11 , 20 , " 127 . 0 . 0 . 8 " ) , 
 + generatePendingMapEntry ( 20 , 21 , " 127 . 0 . 0 . 8 " ) , generatePendingMapEntry ( 21 , 25 , " 127 . 0 . 0 . 10 " ) ) , Network _ 22 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 51 , 60 , " 127 . 0 . 0 . 4 " ) , 
 + generatePendingMapEntry ( 60 , 61 , " 127 . 0 . 0 . 4 " ) , generatePendingMapEntry ( 21 , 25 , " 127 . 0 . 0 . 12 " ) , 
 + generatePendingMapEntry ( 11 , 20 , " 127 . 0 . 0 . 10 " ) , generatePendingMapEntry ( 20 , 21 , " 127 . 0 . 0 . 10 " ) ) , Network _ 33 _ KeyspaceName ) ; 
 + 
 + finishMove ( hosts . get ( MOVING _ NODE ) , 11 , tmd ) ; 
 + } 
 + 
 + @ Test 
 + public void testMoveWithPendingRangesSimpleStrategyTenNode ( ) throws Exception 
 + { 
 + StorageService ss = StorageService . instance ; 
 + final int RING _ SIZE = 10 ; 
 + 
 + TokenMetadata tmd = ss . getTokenMetadata ( ) ; 
 + tmd . clearUnsafe ( ) ; 
 + VersionedValue . VersionedValueFactory valueFactory = new VersionedValue . VersionedValueFactory ( partitioner ) ; 
 + ArrayList < Token > endpointTokens = new ArrayList < > ( ) ; 
 + ArrayList < Token > keyTokens = new ArrayList < > ( ) ; 
 + List < InetAddress > hosts = new ArrayList < > ( ) ; 
 + List < UUID > hostIds = new ArrayList < > ( ) ; 
 + 
 + Util . createInitialRing ( ss , partitioner , endpointTokens , keyTokens , hosts , hostIds , RING _ SIZE ) ; 
 + PendingRangeCalculatorService . instance . blockUntilFinished ( ) ; 
 + 
 + final int MOVING _ NODE = 0 ; / / index of the moving node 
 + moveHost ( hosts . get ( MOVING _ NODE ) , 2 , tmd , valueFactory ) ; 
 + 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF1 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF2 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF3 _ KeyspaceName ) ; 
 + 
 + finishMove ( hosts . get ( MOVING _ NODE ) , 2 , tmd ) ; 
 + 
 + 
 + moveHost ( hosts . get ( MOVING _ NODE ) , 0 , tmd , valueFactory ) ; 
 + 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 2 " ) ) , Simple _ RF1 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 3 " ) ) , Simple _ RF2 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 4 " ) ) , Simple _ RF3 _ KeyspaceName ) ; 
 + 
 + finishMove ( hosts . get ( MOVING _ NODE ) , 0 , tmd ) ; 
 + 
 + moveHost ( hosts . get ( MOVING _ NODE ) , 1000 , tmd , valueFactory ) ; 
 + 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1000 , 0 , " 127 . 0 . 0 . 2 " ) ) , Simple _ RF1 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1000 , 0 , " 127 . 0 . 0 . 3 " ) ) , Simple _ RF2 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1000 , 0 , " 127 . 0 . 0 . 4 " ) ) , Simple _ RF3 _ KeyspaceName ) ; 
 + 
 + finishMove ( hosts . get ( MOVING _ NODE ) , 1000 , tmd ) ; 
 + 
 + moveHost ( hosts . get ( MOVING _ NODE ) , 0 , tmd , valueFactory ) ; 
 + 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1000 , 0 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF1 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1000 , 0 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF2 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1000 , 0 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF3 _ KeyspaceName ) ; 
 + 
 + finishMove ( hosts . get ( MOVING _ NODE ) , 0 , tmd ) ; 
 + 
 + moveHost ( hosts . get ( MOVING _ NODE ) , 35 , tmd , valueFactory ) ; 
 + 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 30 , 35 , " 127 . 0 . 0 . 1 " ) , generatePendingMapEntry ( 90 , 0 , " 127 . 0 . 0 . 2 " ) ) , Simple _ RF1 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 30 , 35 , " 127 . 0 . 0 . 1 " ) , generatePendingMapEntry ( 20 , 30 , " 127 . 0 . 0 . 1 " ) , 
 + generatePendingMapEntry ( 80 , 90 , " 127 . 0 . 0 . 2 " ) , generatePendingMapEntry ( 90 , 0 , " 127 . 0 . 0 . 3 " ) ) , Simple _ RF2 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 30 , 35 , " 127 . 0 . 0 . 1 " ) , generatePendingMapEntry ( 20 , 30 , " 127 . 0 . 0 . 1 " ) , 
 + generatePendingMapEntry ( 80 , 90 , " 127 . 0 . 0 . 3 " ) , generatePendingMapEntry ( 90 , 0 , " 127 . 0 . 0 . 4 " ) , 
 + generatePendingMapEntry ( 10 , 20 , " 127 . 0 . 0 . 1 " ) , generatePendingMapEntry ( 70 , 80 , " 127 . 0 . 0 . 2 " ) ) , Simple _ RF3 _ KeyspaceName ) ; 
 + 
 + finishMove ( hosts . get ( MOVING _ NODE ) , 35 , tmd ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testMoveWithPendingRangesForSimpleStrategyFourNode ( ) throws Exception 
 + { 
 + StorageService ss = StorageService . instance ; 
 + final int RING _ SIZE = 4 ; 
 + 
 + TokenMetadata tmd = ss . getTokenMetadata ( ) ; 
 + tmd . clearUnsafe ( ) ; 
 + VersionedValue . VersionedValueFactory valueFactory = new VersionedValue . VersionedValueFactory ( partitioner ) ; 
 + ArrayList < Token > endpointTokens = new ArrayList < > ( ) ; 
 + ArrayList < Token > keyTokens = new ArrayList < > ( ) ; 
 + List < InetAddress > hosts = new ArrayList < > ( ) ; 
 + List < UUID > hostIds = new ArrayList < > ( ) ; 
 + 
 + Util . createInitialRing ( ss , partitioner , endpointTokens , keyTokens , hosts , hostIds , RING _ SIZE ) ; 
 + PendingRangeCalculatorService . instance . blockUntilFinished ( ) ; 
 + 
 + int MOVING _ NODE = 0 ; / / index of the moving node 
 + moveHost ( hosts . get ( MOVING _ NODE ) , 2 , tmd , valueFactory ) ; 
 + 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF1 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF2 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF3 _ KeyspaceName ) ; 
 + 
 + finishMove ( hosts . get ( MOVING _ NODE ) , 2 , tmd ) ; 
 + 
 + 
 + moveHost ( hosts . get ( MOVING _ NODE ) , 0 , tmd , valueFactory ) ; 
 + 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 2 " ) ) , Simple _ RF1 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 3 " ) ) , Simple _ RF2 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 2 , " 127 . 0 . 0 . 4 " ) ) , Simple _ RF3 _ KeyspaceName ) ; 
 + 
 + finishMove ( hosts . get ( MOVING _ NODE ) , 0 , tmd ) ; 
 + 
 + moveHost ( hosts . get ( MOVING _ NODE ) , 1500 , tmd , valueFactory ) ; 
 + 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1500 , 0 , " 127 . 0 . 0 . 2 " ) ) , Simple _ RF1 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1500 , 0 , " 127 . 0 . 0 . 3 " ) ) , Simple _ RF2 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1500 , 0 , " 127 . 0 . 0 . 4 " ) ) , Simple _ RF3 _ KeyspaceName ) ; 
 + 
 + finishMove ( hosts . get ( MOVING _ NODE ) , 1500 , tmd ) ; 
 + 
 + moveHost ( hosts . get ( MOVING _ NODE ) , 0 , tmd , valueFactory ) ; 
 + 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1500 , 0 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF1 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1500 , 0 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF2 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 1500 , 0 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF3 _ KeyspaceName ) ; 
 + 
 + finishMove ( hosts . get ( MOVING _ NODE ) , 0 , tmd ) ; 
 + 
 + moveHost ( hosts . get ( MOVING _ NODE ) , 15 , tmd , valueFactory ) ; 
 + 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 10 , 15 , " 127 . 0 . 0 . 1 " ) , generatePendingMapEntry ( 30 , 0 , " 127 . 0 . 0 . 2 " ) ) , Simple _ RF1 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 20 , 30 , " 127 . 0 . 0 . 2 " ) , generatePendingMapEntry ( 10 , 15 , " 127 . 0 . 0 . 1 " ) , 
 + generatePendingMapEntry ( 0 , 10 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF2 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 15 , 20 , " 127 . 0 . 0 . 2 " ) , 
 + generatePendingMapEntry ( 0 , 10 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF3 _ KeyspaceName ) ; 
 + 
 + finishMove ( hosts . get ( MOVING _ NODE ) , 15 , tmd ) ; 
 + 
 + moveHost ( hosts . get ( MOVING _ NODE ) , 0 , tmd , valueFactory ) ; 
 + 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 30 , 0 , " 127 . 0 . 0 . 1 " ) , 
 + generatePendingMapEntry ( 10 , 15 , " 127 . 0 . 0 . 3 " ) ) , Simple _ RF1 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 20 , 30 , " 127 . 0 . 0 . 1 " ) , 
 + generatePendingMapEntry ( 10 , 15 , " 127 . 0 . 0 . 4 " ) , generatePendingMapEntry ( 0 , 10 , " 127 . 0 . 0 . 3 " ) ) , Simple _ RF2 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 15 , 20 , " 127 . 0 . 0 . 1 " ) , 
 + generatePendingMapEntry ( 0 , 10 , " 127 . 0 . 0 . 4 " ) ) , Simple _ RF3 _ KeyspaceName ) ; 
 + 
 + finishMove ( hosts . get ( MOVING _ NODE ) , 0 , tmd ) ; 
 + 
 + moveHost ( hosts . get ( MOVING _ NODE ) , 26 , tmd , valueFactory ) ; 
 + 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 20 , 26 , " 127 . 0 . 0 . 1 " ) , 
 + generatePendingMapEntry ( 30 , 0 , " 127 . 0 . 0 . 2 " ) ) , Simple _ RF1 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 26 , 30 , " 127 . 0 . 0 . 2 " ) , 
 + generatePendingMapEntry ( 30 , 0 , " 127 . 0 . 0 . 3 " ) , generatePendingMapEntry ( 10 , 20 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF2 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 0 , 10 , " 127 . 0 . 0 . 1 " ) , 
 + generatePendingMapEntry ( 26 , 30 , " 127 . 0 . 0 . 3 " ) ) , Simple _ RF3 _ KeyspaceName ) ; 
 + 
 + finishMove ( hosts . get ( MOVING _ NODE ) , 26 , tmd ) ; 
 + 
 + moveHost ( hosts . get ( MOVING _ NODE ) , 0 , tmd , valueFactory ) ; 
 + 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 20 , 26 , " 127 . 0 . 0 . 4 " ) , 
 + generatePendingMapEntry ( 30 , 0 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF1 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 30 , 0 , " 127 . 0 . 0 . 1 " ) , 
 + generatePendingMapEntry ( 26 , 30 , " 127 . 0 . 0 . 1 " ) , generatePendingMapEntry ( 10 , 20 , " 127 . 0 . 0 . 4 " ) ) , Simple _ RF2 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 26 , 30 , " 127 . 0 . 0 . 1 " ) , 
 + generatePendingMapEntry ( 0 , 10 , " 127 . 0 . 0 . 4 " ) ) , Simple _ RF3 _ KeyspaceName ) ; 
 + 
 + finishMove ( hosts . get ( MOVING _ NODE ) , 0 , tmd ) ; 
 + 
 + MOVING _ NODE = 3 ; 
 + 
 + moveHost ( hosts . get ( MOVING _ NODE ) , 33 , tmd , valueFactory ) ; 
 + 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 30 , 33 , " 127 . 0 . 0 . 4 " ) ) , Simple _ RF1 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 30 , 33 , " 127 . 0 . 0 . 4 " ) ) , Simple _ RF2 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 30 , 33 , " 127 . 0 . 0 . 4 " ) ) , Simple _ RF3 _ KeyspaceName ) ; 
 + 
 + finishMove ( hosts . get ( MOVING _ NODE ) , 33 , tmd ) ; 
 + 
 + moveHost ( hosts . get ( MOVING _ NODE ) , 30 , tmd , valueFactory ) ; 
 + 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 30 , 33 , " 127 . 0 . 0 . 1 " ) ) , Simple _ RF1 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 30 , 33 , " 127 . 0 . 0 . 2 " ) ) , Simple _ RF2 _ KeyspaceName ) ; 
 + assertPendingRanges ( tmd , generatePendingRanges ( generatePendingMapEntry ( 30 , 33 , " 127 . 0 . 0 . 3 " ) ) , Simple _ RF3 _ KeyspaceName ) ; 
 + 
 + finishMove ( hosts . get ( MOVING _ NODE ) , 30 , tmd ) ; 
 + } 
 + 
 + private void moveHost ( InetAddress host , int token , TokenMetadata tmd , VersionedValue . VersionedValueFactory valueFactory ) 
 + { 
 + StorageService . instance . onChange ( host , ApplicationState . STATUS , valueFactory . moving ( new BigIntegerToken ( String . valueOf ( token ) ) ) ) ; 
 + PendingRangeCalculatorService . instance . blockUntilFinished ( ) ; 
 + assertTrue ( tmd . isMoving ( host ) ) ; 
 + } 
 + 
 + private void finishMove ( InetAddress host , int token , TokenMetadata tmd ) 
 + { 
 + tmd . removeFromMoving ( host ) ; 
 + assertTrue ( ! tmd . isMoving ( host ) ) ; 
 + tmd . updateNormalToken ( new BigIntegerToken ( String . valueOf ( token ) ) , host ) ; 
 + } 
 + 
 + private Map . Entry < Range < Token > , Collection < InetAddress > > generatePendingMapEntry ( int start , int end , String . . . endpoints ) throws UnknownHostException 
 + { 
 + Map < Range < Token > , Collection < InetAddress > > pendingRanges = new HashMap < > ( ) ; 
 + pendingRanges . put ( generateRange ( start , end ) , makeAddrs ( endpoints ) ) ; 
 + return pendingRanges . entrySet ( ) . iterator ( ) . next ( ) ; 
 + } 
 + 
 + private Map < Range < Token > , Collection < InetAddress > > generatePendingRanges ( Map . Entry < Range < Token > , Collection < InetAddress > > . . . entries ) 
 + { 
 + Map < Range < Token > , Collection < InetAddress > > pendingRanges = new HashMap < > ( ) ; 
 + for ( Map . Entry < Range < Token > , Collection < InetAddress > > entry : entries ) 
 + { 
 + pendingRanges . put ( entry . getKey ( ) , entry . getValue ( ) ) ; 
 + } 
 + return pendingRanges ; 
 + } 
 + 
 + private void assertPendingRanges ( TokenMetadata tmd , Map < Range < Token > , Collection < InetAddress > > pendingRanges , String keyspaceName ) throws ConfigurationException 
 + { 
 + boolean keyspaceFound = false ; 
 + for ( String nonSystemKeyspaceName : Schema . instance . getNonSystemKeyspaces ( ) ) 
 + { 
 + if ( ! keyspaceName . equals ( nonSystemKeyspaceName ) ) 
 + continue ; 
 + assertMaps ( pendingRanges , tmd . getPendingRanges ( keyspaceName ) ) ; 
 + keyspaceFound = true ; 
 + } 
 + 
 + assert keyspaceFound ; 
 + } 
 + 
 + private void assertMaps ( Map < Range < Token > , Collection < InetAddress > > expected , PendingRangeMaps actual ) 
 + { 
 + int sizeOfActual = 0 ; 
 + Iterator < Map . Entry < Range < Token > , List < InetAddress > > > iterator = actual . iterator ( ) ; 
 + while ( iterator . hasNext ( ) ) 
 + { 
 + Map . Entry < Range < Token > , List < InetAddress > > actualEntry = iterator . next ( ) ; 
 + assertNotNull ( expected . get ( actualEntry . getKey ( ) ) ) ; 
 + assertEquals ( new HashSet < > ( expected . get ( actualEntry . getKey ( ) ) ) , new HashSet < > ( actualEntry . getValue ( ) ) ) ; 
 + sizeOfActual + + ; 
 + } 
 + 
 + assertEquals ( expected . size ( ) , sizeOfActual ) ; 
 + } 
 + 
 / * 
 * Test whether write endpoints is correct when the node is moving . Uses 
 * StorageService . onChange and does not manipulate token metadata directly . 
 @ @ - 128 , 6 + 565 , 8 @ @ public class MoveTest 
 for ( String keyspaceName : Schema . instance . getNonSystemKeyspaces ( ) ) 
 { 
 strategy = getStrategy ( keyspaceName , tmd ) ; 
 + if ( strategy instanceof NetworkTopologyStrategy ) 
 + continue ; 
 int numMoved = 0 ; 
 for ( Token token : keyTokens ) 
 { 
 @ @ - 235 , 7 + 674 , 7 @ @ public class MoveTest 
 * } 
 * / 
 
 - Multimap < InetAddress , Range < Token > > keyspace1ranges = keyspaceStrategyMap . get ( KEYSPACE1 ) . getAddressRanges ( ) ; 
 + Multimap < InetAddress , Range < Token > > keyspace1ranges = keyspaceStrategyMap . get ( Simple _ RF1 _ KeyspaceName ) . getAddressRanges ( ) ; 
 Collection < Range < Token > > ranges1 = keyspace1ranges . get ( InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) ) ; 
 assertEquals ( 1 , collectionSize ( ranges1 ) ) ; 
 assertEquals ( generateRange ( 97 , 0 ) , ranges1 . iterator ( ) . next ( ) ) ; 
 @ @ - 332 , 7 + 771 , 7 @ @ public class MoveTest 
 * / 127 . 0 . 0 . 10 = [ ( 70 , 87 ] , ( 87 , 97 ] , ( 67 , 70 ] ] 
 * } 
 * / 
 - Multimap < InetAddress , Range < Token > > keyspace4ranges = keyspaceStrategyMap . get ( KEYSPACE4 ) . getAddressRanges ( ) ; 
 + Multimap < InetAddress , Range < Token > > keyspace4ranges = keyspaceStrategyMap . get ( Simple _ RF3 _ KeyspaceName ) . getAddressRanges ( ) ; 
 ranges1 = keyspace4ranges . get ( InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) ) ; 
 assertEquals ( collectionSize ( ranges1 ) , 3 ) ; 
 assertTrue ( ranges1 . equals ( generateRanges ( 97 , 0 , 70 , 87 , 87 , 97 ) ) ) ; 
 @ @ - 366 , 17 + 805 , 17 @ @ public class MoveTest 
 
 / / pre - calculate the results . 
 Map < String , Multimap < Token , InetAddress > > expectedEndpoints = new HashMap < String , Multimap < Token , InetAddress > > ( ) ; 
 - expectedEndpoints . put ( KEYSPACE1 , HashMultimap . < Token , InetAddress > create ( ) ) ; 
 - expectedEndpoints . get ( KEYSPACE1 ) . putAll ( new BigIntegerToken ( " 5 " ) , makeAddrs ( " 127 . 0 . 0 . 2 " ) ) ; 
 - expectedEndpoints . get ( KEYSPACE1 ) . putAll ( new BigIntegerToken ( " 15 " ) , makeAddrs ( " 127 . 0 . 0 . 3 " ) ) ; 
 - expectedEndpoints . get ( KEYSPACE1 ) . putAll ( new BigIntegerToken ( " 25 " ) , makeAddrs ( " 127 . 0 . 0 . 4 " ) ) ; 
 - expectedEndpoints . get ( KEYSPACE1 ) . putAll ( new BigIntegerToken ( " 35 " ) , makeAddrs ( " 127 . 0 . 0 . 5 " ) ) ; 
 - expectedEndpoints . get ( KEYSPACE1 ) . putAll ( new BigIntegerToken ( " 45 " ) , makeAddrs ( " 127 . 0 . 0 . 6 " ) ) ; 
 - expectedEndpoints . get ( KEYSPACE1 ) . putAll ( new BigIntegerToken ( " 55 " ) , makeAddrs ( " 127 . 0 . 0 . 7 " , " 127 . 0 . 1 . 1 " ) ) ; 
 - expectedEndpoints . get ( KEYSPACE1 ) . putAll ( new BigIntegerToken ( " 65 " ) , makeAddrs ( " 127 . 0 . 0 . 7 " ) ) ; 
 - expectedEndpoints . get ( KEYSPACE1 ) . putAll ( new BigIntegerToken ( " 75 " ) , makeAddrs ( " 127 . 0 . 0 . 9 " , " 127 . 0 . 1 . 2 " ) ) ; 
 - expectedEndpoints . get ( KEYSPACE1 ) . putAll ( new BigIntegerToken ( " 85 " ) , makeAddrs ( " 127 . 0 . 0 . 9 " ) ) ; 
 - expectedEndpoints . get ( KEYSPACE1 ) . putAll ( new BigIntegerToken ( " 95 " ) , makeAddrs ( " 127 . 0 . 0 . 10 " ) ) ; 
 + expectedEndpoints . put ( Simple _ RF1 _ KeyspaceName , HashMultimap . < Token , InetAddress > create ( ) ) ; 
 + expectedEndpoints . get ( Simple _ RF1 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 5 " ) , makeAddrs ( " 127 . 0 . 0 . 2 " ) ) ; 
 + expectedEndpoints . get ( Simple _ RF1 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 15 " ) , makeAddrs ( " 127 . 0 . 0 . 3 " ) ) ; 
 + expectedEndpoints . get ( Simple _ RF1 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 25 " ) , makeAddrs ( " 127 . 0 . 0 . 4 " ) ) ; 
 + expectedEndpoints . get ( Simple _ RF1 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 35 " ) , makeAddrs ( " 127 . 0 . 0 . 5 " ) ) ; 
 + expectedEndpoints . get ( Simple _ RF1 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 45 " ) , makeAddrs ( " 127 . 0 . 0 . 6 " ) ) ; 
 + expectedEndpoints . get ( Simple _ RF1 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 55 " ) , makeAddrs ( " 127 . 0 . 0 . 7 " , " 127 . 0 . 1 . 1 " ) ) ; 
 + expectedEndpoints . get ( Simple _ RF1 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 65 " ) , makeAddrs ( " 127 . 0 . 0 . 7 " ) ) ; 
 + expectedEndpoints . get ( Simple _ RF1 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 75 " ) , makeAddrs ( " 127 . 0 . 0 . 9 " , " 127 . 0 . 1 . 2 " ) ) ; 
 + expectedEndpoints . get ( Simple _ RF1 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 85 " ) , makeAddrs ( " 127 . 0 . 0 . 9 " ) ) ; 
 + expectedEndpoints . get ( Simple _ RF1 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 95 " ) , makeAddrs ( " 127 . 0 . 0 . 10 " ) ) ; 
 expectedEndpoints . put ( KEYSPACE2 , HashMultimap . < Token , InetAddress > create ( ) ) ; 
 expectedEndpoints . get ( KEYSPACE2 ) . putAll ( new BigIntegerToken ( " 5 " ) , makeAddrs ( " 127 . 0 . 0 . 2 " ) ) ; 
 expectedEndpoints . get ( KEYSPACE2 ) . putAll ( new BigIntegerToken ( " 15 " ) , makeAddrs ( " 127 . 0 . 0 . 3 " ) ) ; 
 @ @ - 399 , 17 + 838 , 17 @ @ public class MoveTest 
 expectedEndpoints . get ( KEYSPACE3 ) . putAll ( new BigIntegerToken ( " 75 " ) , makeAddrs ( " 127 . 0 . 0 . 9 " , " 127 . 0 . 0 . 10 " , " 127 . 0 . 0 . 1 " , " 127 . 0 . 0 . 2 " , " 127 . 0 . 0 . 3 " , " 127 . 0 . 1 . 2 " ) ) ; 
 expectedEndpoints . get ( KEYSPACE3 ) . putAll ( new BigIntegerToken ( " 85 " ) , makeAddrs ( " 127 . 0 . 0 . 9 " , " 127 . 0 . 0 . 10 " , " 127 . 0 . 0 . 1 " , " 127 . 0 . 0 . 2 " , " 127 . 0 . 0 . 3 " ) ) ; 
 expectedEndpoints . get ( KEYSPACE3 ) . putAll ( new BigIntegerToken ( " 95 " ) , makeAddrs ( " 127 . 0 . 0 . 10 " , " 127 . 0 . 0 . 1 " , " 127 . 0 . 0 . 2 " , " 127 . 0 . 0 . 3 " , " 127 . 0 . 0 . 4 " ) ) ; 
 - expectedEndpoints . put ( KEYSPACE4 , HashMultimap . < Token , InetAddress > create ( ) ) ; 
 - expectedEndpoints . get ( KEYSPACE4 ) . putAll ( new BigIntegerToken ( " 5 " ) , makeAddrs ( " 127 . 0 . 0 . 2 " , " 127 . 0 . 0 . 3 " , " 127 . 0 . 0 . 4 " ) ) ; 
 - expectedEndpoints . get ( KEYSPACE4 ) . putAll ( new BigIntegerToken ( " 15 " ) , makeAddrs ( " 127 . 0 . 0 . 3 " , " 127 . 0 . 0 . 4 " , " 127 . 0 . 0 . 5 " ) ) ; 
 - expectedEndpoints . get ( KEYSPACE4 ) . putAll ( new BigIntegerToken ( " 25 " ) , makeAddrs ( " 127 . 0 . 0 . 4 " , " 127 . 0 . 0 . 5 " , " 127 . 0 . 0 . 6 " ) ) ; 
 - expectedEndpoints . get ( KEYSPACE4 ) . putAll ( new BigIntegerToken ( " 35 " ) , makeAddrs ( " 127 . 0 . 0 . 5 " , " 127 . 0 . 0 . 6 " , " 127 . 0 . 0 . 7 " , " 127 . 0 . 1 . 1 " ) ) ; 
 - expectedEndpoints . get ( KEYSPACE4 ) . putAll ( new BigIntegerToken ( " 45 " ) , makeAddrs ( " 127 . 0 . 0 . 6 " , " 127 . 0 . 0 . 7 " , " 127 . 0 . 0 . 8 " , " 127 . 0 . 1 . 1 " ) ) ; 
 - expectedEndpoints . get ( KEYSPACE4 ) . putAll ( new BigIntegerToken ( " 55 " ) , makeAddrs ( " 127 . 0 . 0 . 7 " , " 127 . 0 . 0 . 8 " , " 127 . 0 . 0 . 9 " , " 127 . 0 . 1 . 1 " , " 127 . 0 . 1 . 2 " ) ) ; 
 - expectedEndpoints . get ( KEYSPACE4 ) . putAll ( new BigIntegerToken ( " 65 " ) , makeAddrs ( " 127 . 0 . 0 . 7 " , " 127 . 0 . 0 . 8 " , " 127 . 0 . 0 . 9 " , " 127 . 0 . 1 . 2 " ) ) ; 
 - expectedEndpoints . get ( KEYSPACE4 ) . putAll ( new BigIntegerToken ( " 75 " ) , makeAddrs ( " 127 . 0 . 0 . 9 " , " 127 . 0 . 0 . 10 " , " 127 . 0 . 0 . 1 " , " 127 . 0 . 1 . 2 " ) ) ; 
 - expectedEndpoints . get ( KEYSPACE4 ) . putAll ( new BigIntegerToken ( " 85 " ) , makeAddrs ( " 127 . 0 . 0 . 9 " , " 127 . 0 . 0 . 10 " , " 127 . 0 . 0 . 1 " ) ) ; 
 - expectedEndpoints . get ( KEYSPACE4 ) . putAll ( new BigIntegerToken ( " 95 " ) , makeAddrs ( " 127 . 0 . 0 . 10 " , " 127 . 0 . 0 . 1 " , " 127 . 0 . 0 . 2 " ) ) ; 
 + expectedEndpoints . put ( Simple _ RF3 _ KeyspaceName , HashMultimap . < Token , InetAddress > create ( ) ) ; 
 + expectedEndpoints . get ( Simple _ RF3 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 5 " ) , makeAddrs ( " 127 . 0 . 0 . 2 " , " 127 . 0 . 0 . 3 " , " 127 . 0 . 0 . 4 " ) ) ; 
 + expectedEndpoints . get ( Simple _ RF3 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 15 " ) , makeAddrs ( " 127 . 0 . 0 . 3 " , " 127 . 0 . 0 . 4 " , " 127 . 0 . 0 . 5 " ) ) ; 
 + expectedEndpoints . get ( Simple _ RF3 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 25 " ) , makeAddrs ( " 127 . 0 . 0 . 4 " , " 127 . 0 . 0 . 5 " , " 127 . 0 . 0 . 6 " ) ) ; 
 + expectedEndpoints . get ( Simple _ RF3 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 35 " ) , makeAddrs ( " 127 . 0 . 0 . 5 " , " 127 . 0 . 0 . 6 " , " 127 . 0 . 0 . 7 " , " 127 . 0 . 1 . 1 " ) ) ; 
 + expectedEndpoints . get ( Simple _ RF3 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 45 " ) , makeAddrs ( " 127 . 0 . 0 . 6 " , " 127 . 0 . 0 . 7 " , " 127 . 0 . 0 . 8 " , " 127 . 0 . 1 . 1 " ) ) ; 
 + expectedEndpoints . get ( Simple _ RF3 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 55 " ) , makeAddrs ( " 127 . 0 . 0 . 7 " , " 127 . 0 . 0 . 8 " , " 127 . 0 . 0 . 9 " , " 127 . 0 . 1 . 1 " , " 127 . 0 . 1 . 2 " ) ) ; 
 + expectedEndpoints . get ( Simple _ RF3 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 65 " ) , makeAddrs ( " 127 . 0 . 0 . 7 " , " 127 . 0 . 0 . 8 " , " 127 . 0 . 0 . 9 " , " 127 . 0 . 1 . 2 " ) ) ; 
 + expectedEndpoints . get ( Simple _ RF3 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 75 " ) , makeAddrs ( " 127 . 0 . 0 . 9 " , " 127 . 0 . 0 . 10 " , " 127 . 0 . 0 . 1 " , " 127 . 0 . 1 . 2 " ) ) ; 
 + expectedEndpoints . get ( Simple _ RF3 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 85 " ) , makeAddrs ( " 127 . 0 . 0 . 9 " , " 127 . 0 . 0 . 10 " , " 127 . 0 . 0 . 1 " ) ) ; 
 + expectedEndpoints . get ( Simple _ RF3 _ KeyspaceName ) . putAll ( new BigIntegerToken ( " 95 " ) , makeAddrs ( " 127 . 0 . 0 . 10 " , " 127 . 0 . 0 . 1 " , " 127 . 0 . 0 . 2 " ) ) ; 
 
 for ( Map . Entry < String , AbstractReplicationStrategy > keyspaceStrategy : keyspaceStrategyMap . entrySet ( ) ) 
 {

NEAREST DIFF:
ELIMINATEDSENTENCE
