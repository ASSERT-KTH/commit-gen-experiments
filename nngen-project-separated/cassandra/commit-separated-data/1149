BLEU SCORE: 0.06567274736060397

TEST MSG: Fix incremental repair hang when replica is down
GENERATED MSG: Remove parent session on remotes when repair fails

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e00abfe . . 9c5e2d5 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 12 <nl> + * Fix incremental repair hang when replica is down ( CASSANDRA - 10288 ) <nl> * Avoid writing range tombstones after END _ OF _ ROW marker ( CASSANDRA - 10791 ) <nl> * Optimize the way we check if a token is repaired in anticompaction ( CASSANDRA - 10768 ) <nl> * Add proper error handling to stream receiver ( CASSANDRA - 10774 ) <nl> diff - - git a / src / java / org / apache / cassandra / repair / AnticompactionTask . java b / src / java / org / apache / cassandra / repair / AnticompactionTask . java <nl> index f41d26c . . 8b68fd3 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / AnticompactionTask . java <nl> + + + b / src / java / org / apache / cassandra / repair / AnticompactionTask . java <nl> @ @ - 17 , 6 + 17 , 7 @ @ <nl> * / <nl> package org . apache . cassandra . repair ; <nl> <nl> + import java . io . IOException ; <nl> import java . net . InetAddress ; <nl> import java . util . UUID ; <nl> import java . util . concurrent . TimeUnit ; <nl> @ @ - 24 , 6 + 25 , 7 @ @ import java . util . concurrent . TimeUnit ; <nl> import com . google . common . util . concurrent . AbstractFuture ; <nl> <nl> import org . apache . cassandra . db . SystemKeyspace ; <nl> + import org . apache . cassandra . gms . FailureDetector ; <nl> import org . apache . cassandra . net . IAsyncCallbackWithFailure ; <nl> import org . apache . cassandra . net . MessageIn ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> @ @ - 52 , 25 + 54 , 32 @ @ public class AnticompactionTask extends AbstractFuture < InetAddress > implements R <nl> <nl> public void run ( ) <nl> { <nl> - AnticompactionRequest acr = new AnticompactionRequest ( parentSession ) ; <nl> - SemanticVersion peerVersion = SystemKeyspace . getReleaseVersion ( neighbor ) ; <nl> - if ( peerVersion ! = null & & peerVersion . compareTo ( VERSION _ CHECKER ) > 0 ) <nl> + if ( FailureDetector . instance . isAlive ( neighbor ) ) <nl> { <nl> - if ( doAnticompaction ) <nl> + AnticompactionRequest acr = new AnticompactionRequest ( parentSession ) ; <nl> + SemanticVersion peerVersion = SystemKeyspace . getReleaseVersion ( neighbor ) ; <nl> + if ( peerVersion ! = null & & peerVersion . compareTo ( VERSION _ CHECKER ) > 0 ) <nl> { <nl> - MessagingService . instance ( ) . sendRR ( acr . createMessage ( ) , neighbor , new AnticompactionCallback ( this ) , TimeUnit . DAYS . toMillis ( 1 ) , true ) ; <nl> + if ( doAnticompaction ) <nl> + { <nl> + MessagingService . instance ( ) . sendRR ( acr . createMessage ( ) , neighbor , new AnticompactionCallback ( this ) , TimeUnit . DAYS . toMillis ( 1 ) , true ) ; <nl> + } <nl> + else <nl> + { <nl> + / / we need to clean up parent session <nl> + MessagingService . instance ( ) . sendRR ( new CleanupMessage ( parentSession ) . createMessage ( ) , neighbor , new AnticompactionCallback ( this ) , TimeUnit . DAYS . toMillis ( 1 ) , true ) ; <nl> + } <nl> } <nl> else <nl> { <nl> - / / we need to clean up parent session <nl> - MessagingService . instance ( ) . sendRR ( new CleanupMessage ( parentSession ) . createMessage ( ) , neighbor , new AnticompactionCallback ( this ) , TimeUnit . DAYS . toMillis ( 1 ) , true ) ; <nl> + MessagingService . instance ( ) . sendOneWay ( acr . createMessage ( ) , neighbor ) ; <nl> + / / immediately return after sending request <nl> + set ( neighbor ) ; <nl> } <nl> } <nl> else <nl> { <nl> - MessagingService . instance ( ) . sendOneWay ( acr . createMessage ( ) , neighbor ) ; <nl> - / / immediately return after sending request <nl> - set ( neighbor ) ; <nl> + setException ( new IOException ( neighbor + " is down " ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / service / ActiveRepairService . java b / src / java / org / apache / cassandra / service / ActiveRepairService . java <nl> index 4266f41 . . dd80d4c 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ActiveRepairService . java <nl> + + + b / src / java / org / apache / cassandra / service / ActiveRepairService . java <nl> @ @ - 277 , 11 + 277 , 20 @ @ public class ActiveRepairService <nl> for ( ColumnFamilyStore cfs : columnFamilyStores ) <nl> cfIds . add ( cfs . metadata . cfId ) ; <nl> <nl> - for ( InetAddress neighbour : endpoints ) <nl> + for ( InetAddress neighbour : endpoints ) <nl> { <nl> - PrepareMessage message = new PrepareMessage ( parentRepairSession , cfIds , ranges ) ; <nl> - MessageOut < RepairMessage > msg = message . createMessage ( ) ; <nl> - MessagingService . instance ( ) . sendRR ( msg , neighbour , callback , TimeUnit . HOURS . toMillis ( 1 ) , true ) ; <nl> + if ( FailureDetector . instance . isAlive ( neighbour ) ) <nl> + { <nl> + PrepareMessage message = new PrepareMessage ( parentRepairSession , cfIds , ranges ) ; <nl> + MessageOut < RepairMessage > msg = message . createMessage ( ) ; <nl> + MessagingService . instance ( ) . sendRR ( msg , neighbour , callback , TimeUnit . HOURS . toMillis ( 1 ) , true ) ; <nl> + } <nl> + else <nl> + { <nl> + status . set ( false ) ; <nl> + failedNodes . add ( neighbour . getHostAddress ( ) ) ; <nl> + prepareLatch . countDown ( ) ; <nl> + } <nl> } <nl> try <nl> {
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e00abfe . . 9c5e2d5 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 12 
 + * Fix incremental repair hang when replica is down ( CASSANDRA - 10288 ) 
 * Avoid writing range tombstones after END _ OF _ ROW marker ( CASSANDRA - 10791 ) 
 * Optimize the way we check if a token is repaired in anticompaction ( CASSANDRA - 10768 ) 
 * Add proper error handling to stream receiver ( CASSANDRA - 10774 ) 
 diff - - git a / src / java / org / apache / cassandra / repair / AnticompactionTask . java b / src / java / org / apache / cassandra / repair / AnticompactionTask . java 
 index f41d26c . . 8b68fd3 100644 
 - - - a / src / java / org / apache / cassandra / repair / AnticompactionTask . java 
 + + + b / src / java / org / apache / cassandra / repair / AnticompactionTask . java 
 @ @ - 17 , 6 + 17 , 7 @ @ 
 * / 
 package org . apache . cassandra . repair ; 
 
 + import java . io . IOException ; 
 import java . net . InetAddress ; 
 import java . util . UUID ; 
 import java . util . concurrent . TimeUnit ; 
 @ @ - 24 , 6 + 25 , 7 @ @ import java . util . concurrent . TimeUnit ; 
 import com . google . common . util . concurrent . AbstractFuture ; 
 
 import org . apache . cassandra . db . SystemKeyspace ; 
 + import org . apache . cassandra . gms . FailureDetector ; 
 import org . apache . cassandra . net . IAsyncCallbackWithFailure ; 
 import org . apache . cassandra . net . MessageIn ; 
 import org . apache . cassandra . net . MessagingService ; 
 @ @ - 52 , 25 + 54 , 32 @ @ public class AnticompactionTask extends AbstractFuture < InetAddress > implements R 
 
 public void run ( ) 
 { 
 - AnticompactionRequest acr = new AnticompactionRequest ( parentSession ) ; 
 - SemanticVersion peerVersion = SystemKeyspace . getReleaseVersion ( neighbor ) ; 
 - if ( peerVersion ! = null & & peerVersion . compareTo ( VERSION _ CHECKER ) > 0 ) 
 + if ( FailureDetector . instance . isAlive ( neighbor ) ) 
 { 
 - if ( doAnticompaction ) 
 + AnticompactionRequest acr = new AnticompactionRequest ( parentSession ) ; 
 + SemanticVersion peerVersion = SystemKeyspace . getReleaseVersion ( neighbor ) ; 
 + if ( peerVersion ! = null & & peerVersion . compareTo ( VERSION _ CHECKER ) > 0 ) 
 { 
 - MessagingService . instance ( ) . sendRR ( acr . createMessage ( ) , neighbor , new AnticompactionCallback ( this ) , TimeUnit . DAYS . toMillis ( 1 ) , true ) ; 
 + if ( doAnticompaction ) 
 + { 
 + MessagingService . instance ( ) . sendRR ( acr . createMessage ( ) , neighbor , new AnticompactionCallback ( this ) , TimeUnit . DAYS . toMillis ( 1 ) , true ) ; 
 + } 
 + else 
 + { 
 + / / we need to clean up parent session 
 + MessagingService . instance ( ) . sendRR ( new CleanupMessage ( parentSession ) . createMessage ( ) , neighbor , new AnticompactionCallback ( this ) , TimeUnit . DAYS . toMillis ( 1 ) , true ) ; 
 + } 
 } 
 else 
 { 
 - / / we need to clean up parent session 
 - MessagingService . instance ( ) . sendRR ( new CleanupMessage ( parentSession ) . createMessage ( ) , neighbor , new AnticompactionCallback ( this ) , TimeUnit . DAYS . toMillis ( 1 ) , true ) ; 
 + MessagingService . instance ( ) . sendOneWay ( acr . createMessage ( ) , neighbor ) ; 
 + / / immediately return after sending request 
 + set ( neighbor ) ; 
 } 
 } 
 else 
 { 
 - MessagingService . instance ( ) . sendOneWay ( acr . createMessage ( ) , neighbor ) ; 
 - / / immediately return after sending request 
 - set ( neighbor ) ; 
 + setException ( new IOException ( neighbor + " is down " ) ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / service / ActiveRepairService . java b / src / java / org / apache / cassandra / service / ActiveRepairService . java 
 index 4266f41 . . dd80d4c 100644 
 - - - a / src / java / org / apache / cassandra / service / ActiveRepairService . java 
 + + + b / src / java / org / apache / cassandra / service / ActiveRepairService . java 
 @ @ - 277 , 11 + 277 , 20 @ @ public class ActiveRepairService 
 for ( ColumnFamilyStore cfs : columnFamilyStores ) 
 cfIds . add ( cfs . metadata . cfId ) ; 
 
 - for ( InetAddress neighbour : endpoints ) 
 + for ( InetAddress neighbour : endpoints ) 
 { 
 - PrepareMessage message = new PrepareMessage ( parentRepairSession , cfIds , ranges ) ; 
 - MessageOut < RepairMessage > msg = message . createMessage ( ) ; 
 - MessagingService . instance ( ) . sendRR ( msg , neighbour , callback , TimeUnit . HOURS . toMillis ( 1 ) , true ) ; 
 + if ( FailureDetector . instance . isAlive ( neighbour ) ) 
 + { 
 + PrepareMessage message = new PrepareMessage ( parentRepairSession , cfIds , ranges ) ; 
 + MessageOut < RepairMessage > msg = message . createMessage ( ) ; 
 + MessagingService . instance ( ) . sendRR ( msg , neighbour , callback , TimeUnit . HOURS . toMillis ( 1 ) , true ) ; 
 + } 
 + else 
 + { 
 + status . set ( false ) ; 
 + failedNodes . add ( neighbour . getHostAddress ( ) ) ; 
 + prepareLatch . countDown ( ) ; 
 + } 
 } 
 try 
 {

NEAREST DIFF:
ELIMINATEDSENTENCE
