BLEU SCORE: 0.08116697886877475

TEST MSG: ninja - fix UFTest / CQLTester
GENERATED MSG: CASSANDRA - 4099 - reopened

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> index 831a8d7 . . d8914a9 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> @ @ - 75 , 11 + 75 , 28 @ @ public abstract class CQLTester <nl> private static org . apache . cassandra . transport . Server server ; <nl> private static final int nativePort ; <nl> private static final InetAddress nativeAddr ; <nl> - private static final Cluster cluster [ ] = new Cluster [ Server . CURRENT _ VERSION ] ; <nl> - private static final Session session [ ] = new Session [ Server . CURRENT _ VERSION ] ; <nl> + private static final Cluster [ ] cluster ; <nl> + private static final Session [ ] session ; <nl> + <nl> + static int maxProtocolVersion ; <nl> + static { <nl> + int version ; <nl> + for ( version = 1 ; version < = Server . CURRENT _ VERSION ; version + + ) <nl> + { <nl> + try <nl> + { <nl> + ProtocolVersion . fromInt ( version ) ; <nl> + } <nl> + catch ( IllegalArgumentException e ) <nl> + { <nl> + version - - ; <nl> + break ; <nl> + } <nl> + } <nl> + maxProtocolVersion = version ; <nl> + cluster = new Cluster [ maxProtocolVersion ] ; <nl> + session = new Session [ maxProtocolVersion ] ; <nl> <nl> - static <nl> - { <nl> / / Once per - JVM is enough <nl> SchemaLoader . prepareServer ( ) ; <nl> <nl> @ @ - 210 , 7 + 227 , 7 @ @ public abstract class CQLTester <nl> server = new org . apache . cassandra . transport . Server ( nativeAddr , nativePort ) ; <nl> server . start ( ) ; <nl> <nl> - for ( int version = 1 ; version < = Server . CURRENT _ VERSION ; version + + ) <nl> + for ( int version = 1 ; version < = maxProtocolVersion ; version + + ) <nl> { <nl> if ( cluster [ version - 1 ] ! = null ) <nl> continue ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / UFTest . java b / test / unit / org / apache / cassandra / cql3 / UFTest . java <nl> index 84a7dd9 . . b3cc545 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / UFTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / UFTest . java <nl> @ @ - 670 , 7 + 670 , 7 @ @ public class UFTest extends CQLTester <nl> row ( list , set , map ) ) ; <nl> <nl> / / same test - but via native protocol <nl> - for ( int version = Server . VERSION _ 2 ; version < = Server . CURRENT _ VERSION ; version + + ) <nl> + for ( int version = Server . VERSION _ 2 ; version < = maxProtocolVersion ; version + + ) <nl> assertRowsNet ( version , <nl> executeNet ( version , " SELECT " + fList + " ( lst ) , " + fSet + " ( st ) , " + fMap + " ( mp ) FROM % s WHERE key = 1 " ) , <nl> row ( list , set , map ) ) ; <nl> @ @ - 751 , 7 + 751 , 7 @ @ public class UFTest extends CQLTester <nl> Assert . assertNull ( row . getBytes ( " t " ) ) ; <nl> Assert . assertNull ( row . getBytes ( " u " ) ) ; <nl> <nl> - for ( int version = Server . VERSION _ 2 ; version < = Server . CURRENT _ VERSION ; version + + ) <nl> + for ( int version = Server . VERSION _ 2 ; version < = maxProtocolVersion ; version + + ) <nl> { <nl> Row r = executeNet ( version , " SELECT " + <nl> fList + " ( lst ) as l , " + <nl> @ @ - 867 , 7 + 867 , 7 @ @ public class UFTest extends CQLTester <nl> DataType . set ( DataType . text ( ) ) , <nl> DataType . map ( DataType . cint ( ) , DataType . cboolean ( ) ) ) ; <nl> TupleValue tup = tType . newValue ( 1d , list , set , map ) ; <nl> - for ( int version = Server . VERSION _ 2 ; version < = Server . CURRENT _ VERSION ; version + + ) <nl> + for ( int version = Server . VERSION _ 2 ; version < = maxProtocolVersion ; version + + ) <nl> { <nl> assertRowsNet ( version , <nl> executeNet ( version , " SELECT " + fTup0 + " ( tup ) FROM % s WHERE key = 1 " ) , <nl> @ @ - 894 , 7 + 894 , 7 @ @ public class UFTest extends CQLTester <nl> createTable ( " CREATE TABLE % s ( key int primary key , udt frozen < " + KEYSPACE + " . " + type + " > ) " ) ; <nl> execute ( " INSERT INTO % s ( key , udt ) VALUES ( 1 , { txt : ' one ' , i : 1 } ) " ) ; <nl> <nl> - for ( int version = Server . VERSION _ 2 ; version < = Server . CURRENT _ VERSION ; version + + ) <nl> + for ( int version = Server . VERSION _ 2 ; version < = maxProtocolVersion ; version + + ) <nl> { <nl> executeNet ( version , " USE " + KEYSPACE ) ; <nl> <nl> @ @ - 969 , 7 + 969 , 7 @ @ public class UFTest extends CQLTester <nl> assertRows ( execute ( " SELECT " + fUdt2 + " ( udt ) FROM % s WHERE key = 1 " ) , <nl> row ( 1 ) ) ; <nl> <nl> - for ( int version = Server . VERSION _ 2 ; version < = Server . CURRENT _ VERSION ; version + + ) <nl> + for ( int version = Server . VERSION _ 2 ; version < = maxProtocolVersion ; version + + ) <nl> { <nl> List < Row > rowsNet = executeNet ( version , " SELECT " + fUdt0 + " ( udt ) FROM % s WHERE key = 1 " ) . all ( ) ; <nl> Assert . assertEquals ( 1 , rowsNet . size ( ) ) ; <nl> @ @ - 1198 , 7 + 1198 , 7 @ @ public class UFTest extends CQLTester <nl> assertRows ( execute ( " SELECT " + fName1 + " ( lst ) , " + fName2 + " ( st ) , " + fName3 + " ( mp ) FROM % s WHERE key = 1 " ) , <nl> row ( " three " , " one " , " two " ) ) ; <nl> <nl> - for ( int version = Server . VERSION _ 2 ; version < = Server . CURRENT _ VERSION ; version + + ) <nl> + for ( int version = Server . VERSION _ 2 ; version < = maxProtocolVersion ; version + + ) <nl> assertRowsNet ( version , <nl> executeNet ( version , " SELECT " + fName1 + " ( lst ) , " + fName2 + " ( st ) , " + fName3 + " ( mp ) FROM % s WHERE key = 1 " ) , <nl> row ( " three " , " one " , " two " ) ) ; <nl> @ @ - 1240 , 7 + 1240 , 7 @ @ public class UFTest extends CQLTester <nl> assertRows ( execute ( " SELECT " + fName1 + " ( lst ) , " + fName2 + " ( st ) , " + fName3 + " ( mp ) FROM % s WHERE key = 1 " ) , <nl> row ( list , set , map ) ) ; <nl> <nl> - for ( int version = Server . VERSION _ 2 ; version < = Server . CURRENT _ VERSION ; version + + ) <nl> + for ( int version = Server . VERSION _ 2 ; version < = maxProtocolVersion ; version + + ) <nl> assertRowsNet ( version , <nl> executeNet ( version , " SELECT " + fName1 + " ( lst ) , " + fName2 + " ( st ) , " + fName3 + " ( mp ) FROM % s WHERE key = 1 " ) , <nl> row ( list , set , map ) ) ; <nl> @ @ - 1333 , 7 + 1333 , 7 @ @ public class UFTest extends CQLTester <nl> DataType . set ( DataType . text ( ) ) , <nl> DataType . map ( DataType . cint ( ) , DataType . cboolean ( ) ) ) ; <nl> TupleValue tup = tType . newValue ( 1d , list , set , map ) ; <nl> - for ( int version = Server . VERSION _ 2 ; version < = Server . CURRENT _ VERSION ; version + + ) <nl> + for ( int version = Server . VERSION _ 2 ; version < = maxProtocolVersion ; version + + ) <nl> { <nl> assertRowsNet ( version , <nl> executeNet ( version , " SELECT " + fTup1 + " ( tup ) FROM % s WHERE key = 1 " ) , <nl> @ @ - 1437 , 7 + 1437 , 7 @ @ public class UFTest extends CQLTester <nl> row ( " three " , " one " , " two " ) ) ; <nl> <nl> / / same test - but via native protocol <nl> - for ( int version = Server . VERSION _ 2 ; version < = Server . CURRENT _ VERSION ; version + + ) <nl> + for ( int version = Server . VERSION _ 2 ; version < = maxProtocolVersion ; version + + ) <nl> assertRowsNet ( version , <nl> executeNet ( version , cqlSelect ) , <nl> row ( " three " , " one " , " two " ) ) ; <nl> @ @ - 1633 , 7 + 1633 , 7 @ @ public class UFTest extends CQLTester <nl> " CREATE OR REPLACE FUNCTION % s ( val double ) RETURNS double LANGUAGE JAVA \ n " + <nl> " AS ' throw new RuntimeException ( ) ' ; " ) ; <nl> <nl> - for ( int version = Server . VERSION _ 2 ; version < = Server . CURRENT _ VERSION ; version + + ) <nl> + for ( int version = Server . VERSION _ 2 ; version < = maxProtocolVersion ; version + + ) <nl> { <nl> / / TODO replace with appropiate code <nl> assertRowsNet ( version ,
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java <nl> index d7a3de4 . . 4f91b3c 100644 <nl> - - - a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java <nl> @ @ - 86 , 20 + 86 , 16 @ @ public class IncomingTcpConnection extends Thread <nl> / / we should buffer <nl> input = new DataInputStream ( new BufferedInputStream ( socket . getInputStream ( ) , 4096 ) ) ; <nl> / / Receive the first message to set the version . <nl> - Message msg = receiveMessage ( input , version ) ; <nl> - from = msg . getFrom ( ) ; / / why ? see = > CASSANDRA - 4099 <nl> + from = receiveMessage ( input , version ) ; / / why ? see = > CASSANDRA - 4099 <nl> if ( version > MessagingService . current _ version ) <nl> { <nl> / / save the endpoint so gossip will reconnect to it <nl> Gossiper . instance . addSavedEndpoint ( from ) ; <nl> logger . info ( " Received " + ( isStream ? " streaming " : " " ) + " connection from newer protocol version . Ignoring " ) ; <nl> + return ; <nl> } <nl> - else if ( msg ! = null ) <nl> - { <nl> - Gossiper . instance . setVersion ( from , version ) ; <nl> - logger . debug ( " set version for { } to { } " , from , version ) ; <nl> - } <nl> - <nl> + Gossiper . instance . setVersion ( from , version ) ; <nl> + logger . debug ( " set version for { } to { } " , from , version ) ; <nl> / / loop to get the next message . <nl> while ( true ) <nl> { <nl> @ @ - 127 , 7 + 123 , 7 @ @ public class IncomingTcpConnection extends Thread <nl> } <nl> } <nl> <nl> - private Message receiveMessage ( DataInputStream input , int version ) throws IOException <nl> + private InetAddress receiveMessage ( DataInputStream input , int version ) throws IOException <nl> { <nl> int totalSize = input . readInt ( ) ; <nl> String id = input . readUTF ( ) ; <nl> @ @ - 152 , 10 + 148 , 12 @ @ public class IncomingTcpConnection extends Thread <nl> { <nl> Message message = new Message ( header , body , version ) ; <nl> MessagingService . instance ( ) . receive ( message , id ) ; <nl> - return message ; <nl> } <nl> - logger . debug ( " Received connection from newer protocol version { } . Ignoring message " , version ) ; <nl> - return null ; <nl> + else <nl> + { <nl> + logger . debug ( " Received connection from newer protocol version { } . Ignoring message " , version ) ; <nl> + } <nl> + return header . getFrom ( ) ; <nl> } <nl> <nl> private void close ( )

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 index 831a8d7 . . d8914a9 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 @ @ - 75 , 11 + 75 , 28 @ @ public abstract class CQLTester 
 private static org . apache . cassandra . transport . Server server ; 
 private static final int nativePort ; 
 private static final InetAddress nativeAddr ; 
 - private static final Cluster cluster [ ] = new Cluster [ Server . CURRENT _ VERSION ] ; 
 - private static final Session session [ ] = new Session [ Server . CURRENT _ VERSION ] ; 
 + private static final Cluster [ ] cluster ; 
 + private static final Session [ ] session ; 
 + 
 + static int maxProtocolVersion ; 
 + static { 
 + int version ; 
 + for ( version = 1 ; version < = Server . CURRENT _ VERSION ; version + + ) 
 + { 
 + try 
 + { 
 + ProtocolVersion . fromInt ( version ) ; 
 + } 
 + catch ( IllegalArgumentException e ) 
 + { 
 + version - - ; 
 + break ; 
 + } 
 + } 
 + maxProtocolVersion = version ; 
 + cluster = new Cluster [ maxProtocolVersion ] ; 
 + session = new Session [ maxProtocolVersion ] ; 
 
 - static 
 - { 
 / / Once per - JVM is enough 
 SchemaLoader . prepareServer ( ) ; 
 
 @ @ - 210 , 7 + 227 , 7 @ @ public abstract class CQLTester 
 server = new org . apache . cassandra . transport . Server ( nativeAddr , nativePort ) ; 
 server . start ( ) ; 
 
 - for ( int version = 1 ; version < = Server . CURRENT _ VERSION ; version + + ) 
 + for ( int version = 1 ; version < = maxProtocolVersion ; version + + ) 
 { 
 if ( cluster [ version - 1 ] ! = null ) 
 continue ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / UFTest . java b / test / unit / org / apache / cassandra / cql3 / UFTest . java 
 index 84a7dd9 . . b3cc545 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / UFTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / UFTest . java 
 @ @ - 670 , 7 + 670 , 7 @ @ public class UFTest extends CQLTester 
 row ( list , set , map ) ) ; 
 
 / / same test - but via native protocol 
 - for ( int version = Server . VERSION _ 2 ; version < = Server . CURRENT _ VERSION ; version + + ) 
 + for ( int version = Server . VERSION _ 2 ; version < = maxProtocolVersion ; version + + ) 
 assertRowsNet ( version , 
 executeNet ( version , " SELECT " + fList + " ( lst ) , " + fSet + " ( st ) , " + fMap + " ( mp ) FROM % s WHERE key = 1 " ) , 
 row ( list , set , map ) ) ; 
 @ @ - 751 , 7 + 751 , 7 @ @ public class UFTest extends CQLTester 
 Assert . assertNull ( row . getBytes ( " t " ) ) ; 
 Assert . assertNull ( row . getBytes ( " u " ) ) ; 
 
 - for ( int version = Server . VERSION _ 2 ; version < = Server . CURRENT _ VERSION ; version + + ) 
 + for ( int version = Server . VERSION _ 2 ; version < = maxProtocolVersion ; version + + ) 
 { 
 Row r = executeNet ( version , " SELECT " + 
 fList + " ( lst ) as l , " + 
 @ @ - 867 , 7 + 867 , 7 @ @ public class UFTest extends CQLTester 
 DataType . set ( DataType . text ( ) ) , 
 DataType . map ( DataType . cint ( ) , DataType . cboolean ( ) ) ) ; 
 TupleValue tup = tType . newValue ( 1d , list , set , map ) ; 
 - for ( int version = Server . VERSION _ 2 ; version < = Server . CURRENT _ VERSION ; version + + ) 
 + for ( int version = Server . VERSION _ 2 ; version < = maxProtocolVersion ; version + + ) 
 { 
 assertRowsNet ( version , 
 executeNet ( version , " SELECT " + fTup0 + " ( tup ) FROM % s WHERE key = 1 " ) , 
 @ @ - 894 , 7 + 894 , 7 @ @ public class UFTest extends CQLTester 
 createTable ( " CREATE TABLE % s ( key int primary key , udt frozen < " + KEYSPACE + " . " + type + " > ) " ) ; 
 execute ( " INSERT INTO % s ( key , udt ) VALUES ( 1 , { txt : ' one ' , i : 1 } ) " ) ; 
 
 - for ( int version = Server . VERSION _ 2 ; version < = Server . CURRENT _ VERSION ; version + + ) 
 + for ( int version = Server . VERSION _ 2 ; version < = maxProtocolVersion ; version + + ) 
 { 
 executeNet ( version , " USE " + KEYSPACE ) ; 
 
 @ @ - 969 , 7 + 969 , 7 @ @ public class UFTest extends CQLTester 
 assertRows ( execute ( " SELECT " + fUdt2 + " ( udt ) FROM % s WHERE key = 1 " ) , 
 row ( 1 ) ) ; 
 
 - for ( int version = Server . VERSION _ 2 ; version < = Server . CURRENT _ VERSION ; version + + ) 
 + for ( int version = Server . VERSION _ 2 ; version < = maxProtocolVersion ; version + + ) 
 { 
 List < Row > rowsNet = executeNet ( version , " SELECT " + fUdt0 + " ( udt ) FROM % s WHERE key = 1 " ) . all ( ) ; 
 Assert . assertEquals ( 1 , rowsNet . size ( ) ) ; 
 @ @ - 1198 , 7 + 1198 , 7 @ @ public class UFTest extends CQLTester 
 assertRows ( execute ( " SELECT " + fName1 + " ( lst ) , " + fName2 + " ( st ) , " + fName3 + " ( mp ) FROM % s WHERE key = 1 " ) , 
 row ( " three " , " one " , " two " ) ) ; 
 
 - for ( int version = Server . VERSION _ 2 ; version < = Server . CURRENT _ VERSION ; version + + ) 
 + for ( int version = Server . VERSION _ 2 ; version < = maxProtocolVersion ; version + + ) 
 assertRowsNet ( version , 
 executeNet ( version , " SELECT " + fName1 + " ( lst ) , " + fName2 + " ( st ) , " + fName3 + " ( mp ) FROM % s WHERE key = 1 " ) , 
 row ( " three " , " one " , " two " ) ) ; 
 @ @ - 1240 , 7 + 1240 , 7 @ @ public class UFTest extends CQLTester 
 assertRows ( execute ( " SELECT " + fName1 + " ( lst ) , " + fName2 + " ( st ) , " + fName3 + " ( mp ) FROM % s WHERE key = 1 " ) , 
 row ( list , set , map ) ) ; 
 
 - for ( int version = Server . VERSION _ 2 ; version < = Server . CURRENT _ VERSION ; version + + ) 
 + for ( int version = Server . VERSION _ 2 ; version < = maxProtocolVersion ; version + + ) 
 assertRowsNet ( version , 
 executeNet ( version , " SELECT " + fName1 + " ( lst ) , " + fName2 + " ( st ) , " + fName3 + " ( mp ) FROM % s WHERE key = 1 " ) , 
 row ( list , set , map ) ) ; 
 @ @ - 1333 , 7 + 1333 , 7 @ @ public class UFTest extends CQLTester 
 DataType . set ( DataType . text ( ) ) , 
 DataType . map ( DataType . cint ( ) , DataType . cboolean ( ) ) ) ; 
 TupleValue tup = tType . newValue ( 1d , list , set , map ) ; 
 - for ( int version = Server . VERSION _ 2 ; version < = Server . CURRENT _ VERSION ; version + + ) 
 + for ( int version = Server . VERSION _ 2 ; version < = maxProtocolVersion ; version + + ) 
 { 
 assertRowsNet ( version , 
 executeNet ( version , " SELECT " + fTup1 + " ( tup ) FROM % s WHERE key = 1 " ) , 
 @ @ - 1437 , 7 + 1437 , 7 @ @ public class UFTest extends CQLTester 
 row ( " three " , " one " , " two " ) ) ; 
 
 / / same test - but via native protocol 
 - for ( int version = Server . VERSION _ 2 ; version < = Server . CURRENT _ VERSION ; version + + ) 
 + for ( int version = Server . VERSION _ 2 ; version < = maxProtocolVersion ; version + + ) 
 assertRowsNet ( version , 
 executeNet ( version , cqlSelect ) , 
 row ( " three " , " one " , " two " ) ) ; 
 @ @ - 1633 , 7 + 1633 , 7 @ @ public class UFTest extends CQLTester 
 " CREATE OR REPLACE FUNCTION % s ( val double ) RETURNS double LANGUAGE JAVA \ n " + 
 " AS ' throw new RuntimeException ( ) ' ; " ) ; 
 
 - for ( int version = Server . VERSION _ 2 ; version < = Server . CURRENT _ VERSION ; version + + ) 
 + for ( int version = Server . VERSION _ 2 ; version < = maxProtocolVersion ; version + + ) 
 { 
 / / TODO replace with appropiate code 
 assertRowsNet ( version ,

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java 
 index d7a3de4 . . 4f91b3c 100644 
 - - - a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java 
 + + + b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java 
 @ @ - 86 , 20 + 86 , 16 @ @ public class IncomingTcpConnection extends Thread 
 / / we should buffer 
 input = new DataInputStream ( new BufferedInputStream ( socket . getInputStream ( ) , 4096 ) ) ; 
 / / Receive the first message to set the version . 
 - Message msg = receiveMessage ( input , version ) ; 
 - from = msg . getFrom ( ) ; / / why ? see = > CASSANDRA - 4099 
 + from = receiveMessage ( input , version ) ; / / why ? see = > CASSANDRA - 4099 
 if ( version > MessagingService . current _ version ) 
 { 
 / / save the endpoint so gossip will reconnect to it 
 Gossiper . instance . addSavedEndpoint ( from ) ; 
 logger . info ( " Received " + ( isStream ? " streaming " : " " ) + " connection from newer protocol version . Ignoring " ) ; 
 + return ; 
 } 
 - else if ( msg ! = null ) 
 - { 
 - Gossiper . instance . setVersion ( from , version ) ; 
 - logger . debug ( " set version for { } to { } " , from , version ) ; 
 - } 
 - 
 + Gossiper . instance . setVersion ( from , version ) ; 
 + logger . debug ( " set version for { } to { } " , from , version ) ; 
 / / loop to get the next message . 
 while ( true ) 
 { 
 @ @ - 127 , 7 + 123 , 7 @ @ public class IncomingTcpConnection extends Thread 
 } 
 } 
 
 - private Message receiveMessage ( DataInputStream input , int version ) throws IOException 
 + private InetAddress receiveMessage ( DataInputStream input , int version ) throws IOException 
 { 
 int totalSize = input . readInt ( ) ; 
 String id = input . readUTF ( ) ; 
 @ @ - 152 , 10 + 148 , 12 @ @ public class IncomingTcpConnection extends Thread 
 { 
 Message message = new Message ( header , body , version ) ; 
 MessagingService . instance ( ) . receive ( message , id ) ; 
 - return message ; 
 } 
 - logger . debug ( " Received connection from newer protocol version { } . Ignoring message " , version ) ; 
 - return null ; 
 + else 
 + { 
 + logger . debug ( " Received connection from newer protocol version { } . Ignoring message " , version ) ; 
 + } 
 + return header . getFrom ( ) ; 
 } 
 
 private void close ( )
