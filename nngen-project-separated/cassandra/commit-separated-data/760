BLEU SCORE: 0.020980574531482755

TEST MSG: Omit ( de ) serialization of state variable in UDAs
GENERATED MSG: merge from 0 . 8

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6b0a118 . . df07ba0 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 10 <nl> + * Omit ( de ) serialization of state variable in UDAs ( CASSANDRA - 9613 ) <nl> * Create a system table to expose prepared statements ( CASSANDRA - 8831 ) <nl> * Reuse DataOutputBuffer from ColumnIndex ( CASSANDRA - 11970 ) <nl> * Remove DatabaseDescriptor dependency from SegmentedFile ( CASSANDRA - 11580 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java <nl> index 87f5019 . . 34c6cc9 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java <nl> @ @ - 191 , 7 + 191 , 7 @ @ public final class JavaBasedUDFunction extends UDFunction <nl> <nl> / / javaParamTypes is just the Java representation for argTypes resp . argDataTypes <nl> TypeToken < ? > [ ] javaParamTypes = UDHelper . typeTokens ( argCodecs , calledOnNullInput ) ; <nl> - / / javaReturnType is just the Java representation for returnType resp . returnDataType <nl> + / / javaReturnType is just the Java representation for returnType resp . returnTypeCodec <nl> TypeToken < ? > javaReturnType = returnCodec . getJavaType ( ) ; <nl> <nl> / / put each UDF in a separate package to prevent cross - UDF code access <nl> @ @ - 222 , 7 + 222 , 10 @ @ public final class JavaBasedUDFunction extends UDFunction <nl> s = body ; <nl> break ; <nl> case " arguments " : <nl> - s = generateArguments ( javaParamTypes , argNames ) ; <nl> + s = generateArguments ( javaParamTypes , argNames , false ) ; <nl> + break ; <nl> + case " arguments _ aggregate " : <nl> + s = generateArguments ( javaParamTypes , argNames , true ) ; <nl> break ; <nl> case " argument _ list " : <nl> s = generateArgumentList ( javaParamTypes , argNames ) ; <nl> @ @ - 326 , 7 + 329 , 7 @ @ public final class JavaBasedUDFunction extends UDFunction <nl> } <nl> } <nl> <nl> - if ( nonSyntheticMethodCount ! = 2 | | cls . getDeclaredConstructors ( ) . length ! = 1 ) <nl> + if ( nonSyntheticMethodCount ! = 3 | | cls . getDeclaredConstructors ( ) . length ! = 1 ) <nl> throw new InvalidRequestException ( " Check your source to not define additional Java methods or constructors " ) ; <nl> MethodType methodType = MethodType . methodType ( void . class ) <nl> . appendParameterTypes ( TypeCodec . class , TypeCodec [ ] . class , UDFContext . class ) ; <nl> @ @ - 364 , 6 + 367 , 10 @ @ public final class JavaBasedUDFunction extends UDFunction <nl> return javaUDF . executeImpl ( protocolVersion , params ) ; <nl> } <nl> <nl> + protected Object executeAggregateUserDefined ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) <nl> + { <nl> + return javaUDF . executeAggregateImpl ( protocolVersion , firstParam , params ) ; <nl> + } <nl> <nl> private static int countNewlines ( StringBuilder javaSource ) <nl> { <nl> @ @ - 417 , 22 + 424 , 48 @ @ public final class JavaBasedUDFunction extends UDFunction <nl> return code . toString ( ) ; <nl> } <nl> <nl> - private static String generateArguments ( TypeToken < ? > [ ] paramTypes , List < ColumnIdentifier > argNames ) <nl> + / * * <nl> + * Generate Java source code snippet for the arguments part to call the UDF implementation function - <nl> + * i . e . the { @ code private # return _ type # # execute _ internal _ name # ( # argument _ list # ) } function <nl> + * ( see { @ code JavaSourceUDF . txt } template file for details ) . <nl> + * < p > <nl> + * This method generates the arguments code snippet for both { @ code executeImpl } and <nl> + * { @ code executeAggregateImpl } . General signature for both is the { @ code protocolVersion } and <nl> + * then all UDF arguments . For aggregation UDF calls the first argument is always unserialized as <nl> + * that is the state variable . <nl> + * < / p > <nl> + * < p > <nl> + * An example output for { @ code executeImpl } : <nl> + * { @ code ( double ) super . compose _ double ( protocolVersion , 0 , params . get ( 0 ) ) , ( double ) super . compose _ double ( protocolVersion , 1 , params . get ( 1 ) ) } <nl> + * < / p > <nl> + * < p > <nl> + * Similar output for { @ code executeAggregateImpl } : <nl> + * { @ code firstParam , ( double ) super . compose _ double ( protocolVersion , 1 , params . get ( 1 ) ) } <nl> + * < / p > <nl> + * / <nl> + private static String generateArguments ( TypeToken < ? > [ ] paramTypes , List < ColumnIdentifier > argNames , boolean forAggregate ) <nl> { <nl> StringBuilder code = new StringBuilder ( 64 * paramTypes . length ) ; <nl> for ( int i = 0 ; i < paramTypes . length ; i + + ) <nl> { <nl> if ( i > 0 ) <nl> + / / add separator , if not the first argument <nl> code . append ( " , \ n " ) ; <nl> <nl> + / / add comment only if trace is enabled <nl> if ( logger . isTraceEnabled ( ) ) <nl> code . append ( " / * parameter ' " ) . append ( argNames . get ( i ) ) . append ( " ' * / \ n " ) ; <nl> <nl> - code <nl> - / / cast to Java type <nl> - . append ( " ( " ) . append ( javaSourceName ( paramTypes [ i ] ) ) . append ( " ) " ) <nl> + / / cast to Java type <nl> + code . append ( " ( " ) . append ( javaSourceName ( paramTypes [ i ] ) ) . append ( " ) " ) ; <nl> + <nl> + if ( forAggregate & & i = = 0 ) <nl> + / / special case for aggregations where the state variable ( 1st arg to state + final function and <nl> + / / return value from state function ) is not re - serialized <nl> + code . append ( " firstParam " ) ; <nl> + else <nl> / / generate object representation of input parameter ( call UDFunction . compose ) <nl> - . append ( composeMethod ( paramTypes [ i ] ) ) . append ( " ( protocolVersion , " ) . append ( i ) . append ( " , params . get ( " ) . append ( i ) . append ( " ) ) " ) ; <nl> + code . append ( composeMethod ( paramTypes [ i ] ) ) . append ( " ( protocolVersion , " ) . append ( i ) . append ( " , params . get ( " ) . append ( forAggregate ? i - 1 : i ) . append ( " ) ) " ) ; <nl> } <nl> return code . toString ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / JavaUDF . java b / src / java / org / apache / cassandra / cql3 / functions / JavaUDF . java <nl> index 7410f1f . . 56a7ced 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / JavaUDF . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / JavaUDF . java <nl> @ @ - 45 , 6 + 45 , 8 @ @ public abstract class JavaUDF <nl> <nl> protected abstract ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) ; <nl> <nl> + protected abstract Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) ; <nl> + <nl> protected Object compose ( int protocolVersion , int argIndex , ByteBuffer value ) <nl> { <nl> return UDFunction . compose ( argCodecs , protocolVersion , argIndex , value ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java <nl> index b524163 . . 8c15dc9 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java <nl> @ @ - 177 , 6 + 177 , 29 @ @ final class ScriptBasedUDFunction extends UDFunction <nl> for ( int i = 0 ; i < params . length ; i + + ) <nl> params [ i ] = compose ( protocolVersion , i , parameters . get ( i ) ) ; <nl> <nl> + Object result = executeScriptInternal ( params ) ; <nl> + <nl> + return decompose ( protocolVersion , result ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Like { @ link # executeUserDefined ( int , List ) } but the first parameter is already in non - serialized form . <nl> + * Remaining parameters ( 2nd paramters and all others ) are in { @ code parameters } . <nl> + * This is used to prevent superfluous ( de ) serialization of the state of aggregates . <nl> + * Means : scalar functions of aggregates are called using this variant . <nl> + * / <nl> + protected Object executeAggregateUserDefined ( int protocolVersion , Object firstParam , List < ByteBuffer > parameters ) <nl> + { <nl> + Object [ ] params = new Object [ argTypes . size ( ) ] ; <nl> + params [ 0 ] = firstParam ; <nl> + for ( int i = 1 ; i < params . length ; i + + ) <nl> + params [ i ] = compose ( protocolVersion , i , parameters . get ( i - 1 ) ) ; <nl> + <nl> + return executeScriptInternal ( params ) ; <nl> + } <nl> + <nl> + private Object executeScriptInternal ( Object [ ] params ) <nl> + { <nl> ScriptContext scriptContext = new SimpleScriptContext ( ) ; <nl> scriptContext . setAttribute ( " javax . script . filename " , this . name . toString ( ) , ScriptContext . ENGINE _ SCOPE ) ; <nl> Bindings bindings = scriptContext . getBindings ( ScriptContext . ENGINE _ SCOPE ) ; <nl> @ @ - 251 , 7 + 274 , 7 @ @ final class ScriptBasedUDFunction extends UDFunction <nl> } <nl> } <nl> <nl> - return decompose ( protocolVersion , result ) ; <nl> + return result ; <nl> } <nl> <nl> private final class UDFContextWrapper extends AbstractJSObject <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java b / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java <nl> index 52b8163 . . 6570ba8 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import com . google . common . base . Objects ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import com . datastax . driver . core . TypeCodec ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> import org . apache . cassandra . schema . Functions ; <nl> @ @ - 36 , 7 + 37 , 9 @ @ public class UDAggregate extends AbstractFunction implements AggregateFunction <nl> { <nl> protected static final Logger logger = LoggerFactory . getLogger ( UDAggregate . class ) ; <nl> <nl> - protected final AbstractType < ? > stateType ; <nl> + private final AbstractType < ? > stateType ; <nl> + private final TypeCodec stateTypeCodec ; <nl> + private final TypeCodec returnTypeCodec ; <nl> protected final ByteBuffer initcond ; <nl> private final ScalarFunction stateFunction ; <nl> private final ScalarFunction finalFunction ; <nl> @ @ - 52 , 6 + 55 , 8 @ @ public class UDAggregate extends AbstractFunction implements AggregateFunction <nl> this . stateFunction = stateFunc ; <nl> this . finalFunction = finalFunc ; <nl> this . stateType = stateFunc ! = null ? stateFunc . returnType ( ) : null ; <nl> + this . stateTypeCodec = stateType ! = null ? UDHelper . codecFor ( UDHelper . driverType ( stateType ) ) : null ; <nl> + this . returnTypeCodec = returnType ! = null ? UDHelper . codecFor ( UDHelper . driverType ( returnType ) ) : null ; <nl> this . initcond = initcond ; <nl> } <nl> <nl> @ @ - 68 , 7 + 73 , 7 @ @ public class UDAggregate extends AbstractFunction implements AggregateFunction <nl> List < AbstractType < ? > > stateTypes = new ArrayList < > ( argTypes . size ( ) + 1 ) ; <nl> stateTypes . add ( stateType ) ; <nl> stateTypes . addAll ( argTypes ) ; <nl> - List < AbstractType < ? > > finalTypes = Collections . < AbstractType < ? > > singletonList ( stateType ) ; <nl> + List < AbstractType < ? > > finalTypes = Collections . singletonList ( stateType ) ; <nl> return new UDAggregate ( name , <nl> argTypes , <nl> returnType , <nl> @ @ - 81 , 7 + 86 , 7 @ @ public class UDAggregate extends AbstractFunction implements AggregateFunction <nl> List < AbstractType < ? > > argTypes , <nl> AbstractType < ? > returnType , <nl> ByteBuffer initcond , <nl> - final InvalidRequestException reason ) <nl> + InvalidRequestException reason ) <nl> { <nl> return new UDAggregate ( name , argTypes , returnType , null , null , initcond ) <nl> { <nl> @ @ - 150 , 48 + 155 , 55 @ @ public class UDAggregate extends AbstractFunction implements AggregateFunction <nl> private long stateFunctionCount ; <nl> private long stateFunctionDuration ; <nl> <nl> - private ByteBuffer state ; <nl> - { <nl> - reset ( ) ; <nl> - } <nl> + private Object state ; <nl> + private boolean needsInit = true ; <nl> <nl> public void addInput ( int protocolVersion , List < ByteBuffer > values ) throws InvalidRequestException <nl> { <nl> + if ( needsInit ) <nl> + { <nl> + state = initcond ! = null ? UDHelper . deserialize ( stateTypeCodec , protocolVersion , initcond . duplicate ( ) ) : null ; <nl> + stateFunctionDuration = 0 ; <nl> + stateFunctionCount = 0 ; <nl> + needsInit = false ; <nl> + } <nl> + <nl> long startTime = System . nanoTime ( ) ; <nl> stateFunctionCount + + ; <nl> - List < ByteBuffer > fArgs = new ArrayList < > ( values . size ( ) + 1 ) ; <nl> - fArgs . add ( state ) ; <nl> - fArgs . addAll ( values ) ; <nl> if ( stateFunction instanceof UDFunction ) <nl> { <nl> UDFunction udf = ( UDFunction ) stateFunction ; <nl> - if ( udf . isCallableWrtNullable ( fArgs ) ) <nl> - state = udf . execute ( protocolVersion , fArgs ) ; <nl> + if ( udf . isCallableWrtNullable ( values ) ) <nl> + state = udf . executeForAggregate ( protocolVersion , state , values ) ; <nl> } <nl> else <nl> { <nl> - state = stateFunction . execute ( protocolVersion , fArgs ) ; <nl> + throw new UnsupportedOperationException ( " UDAs only support UDFs " ) ; <nl> } <nl> stateFunctionDuration + = ( System . nanoTime ( ) - startTime ) / 1000 ; <nl> } <nl> <nl> public ByteBuffer compute ( int protocolVersion ) throws InvalidRequestException <nl> { <nl> + assert ! needsInit ; <nl> + <nl> / / final function is traced in UDFunction <nl> Tracing . trace ( " Executed UDA { } : { } call ( s ) to state function { } in { } \ u03bcs " , name ( ) , stateFunctionCount , stateFunction . name ( ) , stateFunctionDuration ) ; <nl> if ( finalFunction = = null ) <nl> - return state ; <nl> + return UDFunction . decompose ( stateTypeCodec , protocolVersion , state ) ; <nl> <nl> - List < ByteBuffer > fArgs = Collections . singletonList ( state ) ; <nl> - ByteBuffer result = finalFunction . execute ( protocolVersion , fArgs ) ; <nl> - return result ; <nl> + if ( finalFunction instanceof UDFunction ) <nl> + { <nl> + UDFunction udf = ( UDFunction ) finalFunction ; <nl> + Object result = udf . executeForAggregate ( protocolVersion , state , Collections . emptyList ( ) ) ; <nl> + return UDFunction . decompose ( returnTypeCodec , protocolVersion , result ) ; <nl> + } <nl> + throw new UnsupportedOperationException ( " UDAs only support UDFs " ) ; <nl> } <nl> <nl> public void reset ( ) <nl> { <nl> - state = initcond ! = null ? initcond . duplicate ( ) : null ; <nl> - stateFunctionDuration = 0 ; <nl> - stateFunctionCount = 0 ; <nl> + needsInit = true ; <nl> } <nl> } ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDFByteCodeVerifier . java b / src / java / org / apache / cassandra / cql3 / functions / UDFByteCodeVerifier . java <nl> index cfaa70f . . 7d28fcd 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / UDFByteCodeVerifier . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / UDFByteCodeVerifier . java <nl> @ @ - 108 , 6 + 108 , 13 @ @ public final class UDFByteCodeVerifier <nl> / / the executeImpl method - ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) <nl> return new ExecuteImplVisitor ( errors ) ; <nl> } <nl> + if ( " executeAggregateImpl " . equals ( name ) & & " ( ILjava / lang / Object ; Ljava / util / List ; ) Ljava / lang / Object ; " . equals ( desc ) ) <nl> + { <nl> + if ( Opcodes . ACC _ PROTECTED ! = access ) <nl> + errors . add ( " executeAggregateImpl not protected " ) ; <nl> + / / the executeImpl method - ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) <nl> + return new ExecuteImplVisitor ( errors ) ; <nl> + } <nl> if ( " < clinit > " . equals ( name ) ) <nl> { <nl> errors . add ( " static initializer declared " ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> index 6e8d187 . . 70d459f 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import java . util . Enumeration ; <nl> import java . util . HashSet ; <nl> import java . util . List ; <nl> import java . util . concurrent . CompletableFuture ; <nl> + import java . util . concurrent . Callable ; <nl> import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . Executors ; <nl> @ @ - 258 , 12 + 259 , 22 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> return Executors . newSingleThreadExecutor ( ) ; <nl> } <nl> <nl> + protected Object executeAggregateUserDefined ( int protocolVersion , Object firstParam , List < ByteBuffer > parameters ) <nl> + { <nl> + throw broken ( ) ; <nl> + } <nl> + <nl> public ByteBuffer executeUserDefined ( int protocolVersion , List < ByteBuffer > parameters ) <nl> { <nl> - throw new InvalidRequestException ( String . format ( " Function ' % s ' exists but hasn ' t been loaded successfully " <nl> - + " for the following reason : % s . Please see the server log for details " , <nl> - this , <nl> - reason . getMessage ( ) ) ) ; <nl> + throw broken ( ) ; <nl> + } <nl> + <nl> + private InvalidRequestException broken ( ) <nl> + { <nl> + return new InvalidRequestException ( String . format ( " Function ' % s ' exists but hasn ' t been loaded successfully " <nl> + + " for the following reason : % s . Please see the server log for details " , <nl> + this , <nl> + reason . getMessage ( ) ) ) ; <nl> } <nl> } ; <nl> } <nl> @ @ - 301 , 6 + 312 , 44 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> } <nl> } <nl> <nl> + / * * <nl> + * Like { @ link # execute ( int , List ) } but the first parameter is already in non - serialized form . <nl> + * Remaining parameters ( 2nd paramters and all others ) are in { @ code parameters } . <nl> + * This is used to prevent superfluous ( de ) serialization of the state of aggregates . <nl> + * Means : scalar functions of aggregates are called using this variant . <nl> + * / <nl> + public final Object executeForAggregate ( int protocolVersion , Object firstParam , List < ByteBuffer > parameters ) <nl> + { <nl> + assertUdfsEnabled ( language ) ; <nl> + <nl> + if ( ! calledOnNullInput & & firstParam = = null | | ! isCallableWrtNullable ( parameters ) ) <nl> + return null ; <nl> + <nl> + long tStart = System . nanoTime ( ) ; <nl> + parameters = makeEmptyParametersNull ( parameters ) ; <nl> + <nl> + try <nl> + { <nl> + / / Using async UDF execution is expensive ( adds about 100us overhead per invocation on a Core - i7 MBPr ) . <nl> + Object result = DatabaseDescriptor . enableUserDefinedFunctionsThreads ( ) <nl> + ? executeAggregateAsync ( protocolVersion , firstParam , parameters ) <nl> + : executeAggregateUserDefined ( protocolVersion , firstParam , parameters ) ; <nl> + Tracing . trace ( " Executed UDF { } in { } \ u03bcs " , name ( ) , ( System . nanoTime ( ) - tStart ) / 1000 ) ; <nl> + return result ; <nl> + } <nl> + catch ( InvalidRequestException e ) <nl> + { <nl> + throw e ; <nl> + } <nl> + catch ( Throwable t ) <nl> + { <nl> + logger . debug ( " Invocation of user - defined function ' { } ' failed " , this , t ) ; <nl> + if ( t instanceof VirtualMachineError ) <nl> + throw ( VirtualMachineError ) t ; <nl> + throw FunctionExecutionException . create ( this , t ) ; <nl> + } <nl> + } <nl> + <nl> public static void assertUdfsEnabled ( String language ) <nl> { <nl> if ( ! DatabaseDescriptor . enableUserDefinedFunctions ( ) ) <nl> @ @ - 344 , 10 + 393 , 31 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> { <nl> ThreadIdAndCpuTime threadIdAndCpuTime = new ThreadIdAndCpuTime ( ) ; <nl> <nl> - Future < ByteBuffer > future = executor ( ) . submit ( ( ) - > { <nl> + return async ( threadIdAndCpuTime , ( ) - > { <nl> threadIdAndCpuTime . setup ( ) ; <nl> return executeUserDefined ( protocolVersion , parameters ) ; <nl> } ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Like { @ link # executeAsync ( int , List ) } but the first parameter is already in non - serialized form . <nl> + * Remaining parameters ( 2nd paramters and all others ) are in { @ code parameters } . <nl> + * This is used to prevent superfluous ( de ) serialization of the state of aggregates . <nl> + * Means : scalar functions of aggregates are called using this variant . <nl> + * / <nl> + private Object executeAggregateAsync ( int protocolVersion , Object firstParam , List < ByteBuffer > parameters ) <nl> + { <nl> + ThreadIdAndCpuTime threadIdAndCpuTime = new ThreadIdAndCpuTime ( ) ; <nl> + <nl> + return async ( threadIdAndCpuTime , ( ) - > { <nl> + threadIdAndCpuTime . setup ( ) ; <nl> + return executeAggregateUserDefined ( protocolVersion , firstParam , parameters ) ; <nl> + } ) ; <nl> + } <nl> + <nl> + private < T > T async ( ThreadIdAndCpuTime threadIdAndCpuTime , Callable < T > callable ) <nl> + { <nl> + Future < T > future = executor ( ) . submit ( callable ) ; <nl> <nl> try <nl> { <nl> @ @ - 445 , 6 + 515 , 8 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> <nl> protected abstract ByteBuffer executeUserDefined ( int protocolVersion , List < ByteBuffer > parameters ) ; <nl> <nl> + protected abstract Object executeAggregateUserDefined ( int protocolVersion , Object firstParam , List < ByteBuffer > parameters ) ; <nl> + <nl> public boolean isAggregate ( ) <nl> { <nl> return false ; <nl> diff - - git a / src / resources / org / apache / cassandra / cql3 / functions / JavaSourceUDF . txt b / src / resources / org / apache / cassandra / cql3 / functions / JavaSourceUDF . txt <nl> index d736a5a . . 802081f 100644 <nl> - - - a / src / resources / org / apache / cassandra / cql3 / functions / JavaSourceUDF . txt <nl> + + + b / src / resources / org / apache / cassandra / cql3 / functions / JavaSourceUDF . txt <nl> @ @ - 25 , 6 + 25 , 14 @ @ public final class # class _ name # extends JavaUDF <nl> return super . decompose ( protocolVersion , result ) ; <nl> } <nl> <nl> + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) <nl> + { <nl> + # return _ type # result = # execute _ internal _ name # ( <nl> + # arguments _ aggregate # <nl> + ) ; <nl> + return result ; <nl> + } <nl> + <nl> private # return _ type # # execute _ internal _ name # ( # argument _ list # ) <nl> { <nl> # body # <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallClone . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallClone . java <nl> index e8bae70 . . 9efa83a 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallClone . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallClone . java <nl> @ @ - 35 , 6 + 35 , 11 @ @ public final class CallClone extends JavaUDF <nl> super ( returnDataType , argDataTypes , udfContext ) ; <nl> } <nl> <nl> + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) <nl> { <nl> try <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallComDatastax . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallComDatastax . java <nl> index 1af5b01 . . 4555ff5 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallComDatastax . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallComDatastax . java <nl> @ @ - 36 , 6 + 36 , 11 @ @ public final class CallComDatastax extends JavaUDF <nl> super ( returnDataType , argDataTypes , udfContext ) ; <nl> } <nl> <nl> + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) <nl> { <nl> DataType . cint ( ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallFinalize . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallFinalize . java <nl> index 5208849 . . b1ec15f 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallFinalize . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallFinalize . java <nl> @ @ - 35 , 6 + 35 , 11 @ @ public final class CallFinalize extends JavaUDF <nl> super ( returnDataType , argDataTypes , udfContext ) ; <nl> } <nl> <nl> + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) <nl> { <nl> try <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallOrgApache . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallOrgApache . java <nl> index 758d0d0 . . 728e482 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallOrgApache . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallOrgApache . java <nl> @ @ - 36 , 6 + 36 , 11 @ @ public final class CallOrgApache extends JavaUDF <nl> super ( returnDataType , argDataTypes , udfContext ) ; <nl> } <nl> <nl> + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) <nl> { <nl> DatabaseDescriptor . getClusterName ( ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithField . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithField . java <nl> index 256c2bd . . 4c38b44 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithField . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithField . java <nl> @ @ - 35 , 6 + 35 , 11 @ @ public final class ClassWithField extends JavaUDF <nl> super ( returnDataType , argDataTypes , udfContext ) ; <nl> } <nl> <nl> + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) <nl> { <nl> return null ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer . java <nl> index 3366314 . . cc2738a 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer . java <nl> @ @ - 35 , 6 + 35 , 11 @ @ public final class ClassWithInitializer extends JavaUDF <nl> super ( returnDataType , argDataTypes , udfContext ) ; <nl> } <nl> <nl> + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) <nl> { <nl> return null ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer2 . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer2 . java <nl> index aaf3e7b . . 780c0e4 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer2 . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer2 . java <nl> @ @ - 35 , 6 + 35 , 11 @ @ public final class ClassWithInitializer2 extends JavaUDF <nl> super ( returnDataType , argDataTypes , udfContext ) ; <nl> } <nl> <nl> + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) <nl> { <nl> return null ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer3 . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer3 . java <nl> index 4895aa0 . . e163ec9 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer3 . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer3 . java <nl> @ @ - 35 , 6 + 35 , 11 @ @ public final class ClassWithInitializer3 extends JavaUDF <nl> super ( returnDataType , argDataTypes , udfContext ) ; <nl> } <nl> <nl> + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) <nl> { <nl> return null ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInnerClass . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInnerClass . java <nl> index 2166771 . . 3c4dc9b 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInnerClass . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInnerClass . java <nl> @ @ - 35 , 6 + 35 , 11 @ @ public final class ClassWithInnerClass extends JavaUDF <nl> super ( returnDataType , argDataTypes , udfContext ) ; <nl> } <nl> <nl> + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) <nl> { <nl> return null ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInnerClass2 . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInnerClass2 . java <nl> index 9c18510 . . b316040 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInnerClass2 . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInnerClass2 . java <nl> @ @ - 35 , 6 + 35 , 11 @ @ public final class ClassWithInnerClass2 extends JavaUDF <nl> super ( returnDataType , argDataTypes , udfContext ) ; <nl> } <nl> <nl> + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) <nl> { <nl> / / this is fine <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInitializer . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInitializer . java <nl> index 3c958e8 . . c97a94a 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInitializer . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInitializer . java <nl> @ @ - 35 , 6 + 35 , 11 @ @ public final class ClassWithStaticInitializer extends JavaUDF <nl> super ( returnDataType , argDataTypes , udfContext ) ; <nl> } <nl> <nl> + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) <nl> { <nl> return null ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInnerClass . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInnerClass . java <nl> index fada145 . . 1b019cc 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInnerClass . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInnerClass . java <nl> @ @ - 35 , 6 + 35 , 11 @ @ public final class ClassWithStaticInnerClass extends JavaUDF <nl> super ( returnDataType , argDataTypes , udfContext ) ; <nl> } <nl> <nl> + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) <nl> { <nl> return null ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / GoodClass . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / GoodClass . java <nl> index eb25f72 . . 54821b9 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / GoodClass . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / GoodClass . java <nl> @ @ - 35 , 6 + 35 , 11 @ @ public final class GoodClass extends JavaUDF <nl> super ( returnDataType , argDataTypes , udfContext ) ; <nl> } <nl> <nl> + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) <nl> { <nl> return null ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronized . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronized . java <nl> index bbbc823 . . dba846d 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronized . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronized . java <nl> @ @ - 35 , 6 + 35 , 11 @ @ public final class UseOfSynchronized extends JavaUDF <nl> super ( returnDataType , argDataTypes , udfContext ) ; <nl> } <nl> <nl> + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) <nl> { <nl> synchronized ( this ) <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotify . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotify . java <nl> index 07c70c7 . . 63c319c 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotify . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotify . java <nl> @ @ - 35 , 6 + 35 , 11 @ @ public final class UseOfSynchronizedWithNotify extends JavaUDF <nl> super ( returnDataType , argDataTypes , udfContext ) ; <nl> } <nl> <nl> + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) <nl> { <nl> synchronized ( this ) <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotifyAll . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotifyAll . java <nl> index 529c995 . . 4d0c2a0 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotifyAll . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotifyAll . java <nl> @ @ - 35 , 6 + 35 , 11 @ @ public final class UseOfSynchronizedWithNotifyAll extends JavaUDF <nl> super ( returnDataType , argDataTypes , udfContext ) ; <nl> } <nl> <nl> + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) <nl> { <nl> synchronized ( this ) <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWait . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWait . java <nl> index 6e39813 . . b002086 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWait . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWait . java <nl> @ @ - 35 , 6 + 35 , 11 @ @ public final class UseOfSynchronizedWithWait extends JavaUDF <nl> super ( returnDataType , argDataTypes , udfContext ) ; <nl> } <nl> <nl> + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) <nl> { <nl> synchronized ( this ) <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitL . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitL . java <nl> index ac29211 . . f128fac 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitL . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitL . java <nl> @ @ - 35 , 6 + 35 , 11 @ @ public final class UseOfSynchronizedWithWaitL extends JavaUDF <nl> super ( returnDataType , argDataTypes , udfContext ) ; <nl> } <nl> <nl> + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) <nl> { <nl> synchronized ( this ) <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitLI . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitLI . java <nl> index 3b9ce8b . . d439518 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitLI . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitLI . java <nl> @ @ - 35 , 6 + 35 , 11 @ @ public final class UseOfSynchronizedWithWaitLI extends JavaUDF <nl> super ( returnDataType , argDataTypes , udfContext ) ; <nl> } <nl> <nl> + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) <nl> { <nl> synchronized ( this ) <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UsingMapEntry . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UsingMapEntry . java <nl> index 5091dc1 . . b99dbfd 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UsingMapEntry . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UsingMapEntry . java <nl> @ @ - 37 , 6 + 37 , 11 @ @ public final class UsingMapEntry extends JavaUDF <nl> super ( returnDataType , argDataTypes , udfContext ) ; <nl> } <nl> <nl> + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) <nl> { <nl> Map < String , String > map = new HashMap < > ( ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> index 24a9528 . . 506d533 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> @ @ - 18 , 7 + 18 , 6 @ @ <nl> package org . apache . cassandra . cql3 . validation . operations ; <nl> <nl> import java . math . BigDecimal ; <nl> - import java . math . MathContext ; <nl> import java . math . RoundingMode ; <nl> import java . nio . ByteBuffer ; <nl> import java . text . SimpleDateFormat ; <nl> @ @ - 40 , 6 + 39 , 8 @ @ import ch . qos . logback . classic . LoggerContext ; <nl> import ch . qos . logback . classic . spi . TurboFilterList ; <nl> import ch . qos . logback . classic . turbo . ReconfigureOnChangeFilter ; <nl> import ch . qos . logback . classic . turbo . TurboFilter ; <nl> + import com . datastax . driver . core . Session ; <nl> + import com . datastax . driver . core . TupleValue ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . cql3 . CQLTester ; <nl> import org . apache . cassandra . cql3 . QueryProcessor ; <nl> @ @ - 48 , 7 + 49 , 6 @ @ import org . apache . cassandra . cql3 . UntypedResultSet . Row ; <nl> import org . apache . cassandra . cql3 . functions . UDAggregate ; <nl> import org . apache . cassandra . db . SystemKeyspace ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> - import org . apache . cassandra . db . marshal . DynamicCompositeType ; <nl> import org . apache . cassandra . db . marshal . TypeParser ; <nl> import org . apache . cassandra . exceptions . FunctionExecutionException ; <nl> import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> @ @ - 1883 , 6 + 1883 , 7 @ @ public class AggregationTest extends CQLTester <nl> row ( finalFunc , initCond ) ) ; <nl> } <nl> <nl> + @ Test <nl> public void testCustomTypeInitcond ( ) throws Throwable <nl> { <nl> try <nl> @ @ - 1966 , 4 + 1967 , 58 @ @ public class AggregationTest extends CQLTester <nl> assertRows ( execute ( " select avg ( val ) from % s where bucket in ( 1 , 2 , 3 ) ; " ) , <nl> row ( a ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testSameStateInstance ( ) throws Throwable <nl> + { <nl> + / / CASSANDRA - 9613 removes the neccessity to re - serialize the state variable for each <nl> + / / UDA state function and final function call . <nl> + / / <nl> + / / To test that the same state object instance is used during each invocation of the <nl> + / / state and final function , this test uses a trick : <nl> + / / it puts the identity hash code of the state variable to a tuple . The test then <nl> + / / just asserts that the identity hash code is the same for all invocations <nl> + / / of the state function and the final function . <nl> + <nl> + String sf = createFunction ( KEYSPACE , <nl> + " tuple < int , int , int , int > , int " , <nl> + " CREATE FUNCTION % s ( s tuple < int , int , int , int > , i int ) " + <nl> + " CALLED ON NULL INPUT " + <nl> + " RETURNS tuple < int , int , int , int > " + <nl> + " LANGUAGE java " + <nl> + " AS ' s . setInt ( i , System . identityHashCode ( s ) ) ; return s ; ' " ) ; <nl> + <nl> + String ff = createFunction ( KEYSPACE , <nl> + " tuple < int , int , int , int > " , <nl> + " CREATE FUNCTION % s ( s tuple < int , int , int , int > ) " + <nl> + " CALLED ON NULL INPUT " + <nl> + " RETURNS tuple < int , int , int , int > " + <nl> + " LANGUAGE java " + <nl> + " AS ' s . setInt ( 3 , System . identityHashCode ( s ) ) ; return s ; ' " ) ; <nl> + <nl> + String a = createAggregate ( KEYSPACE , <nl> + " int " , <nl> + " CREATE AGGREGATE % s ( int ) " + <nl> + " SFUNC " + shortFunctionName ( sf ) + ' ' + <nl> + " STYPE tuple < int , int , int , int > " + <nl> + " FINALFUNC " + shortFunctionName ( ff ) + ' ' + <nl> + " INITCOND ( 0 , 1 , 2 ) " ) ; <nl> + <nl> + createTable ( " CREATE TABLE % s ( a int primary key , b int ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b ) VALUES ( 0 , 0 ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b ) VALUES ( 1 , 1 ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b ) VALUES ( 2 , 2 ) " ) ; <nl> + try ( Session s = sessionNet ( ) ) <nl> + { <nl> + com . datastax . driver . core . Row row = s . execute ( " SELECT " + a + " ( b ) FROM " + KEYSPACE + ' . ' + currentTable ( ) ) . one ( ) ; <nl> + TupleValue tuple = row . getTupleValue ( 0 ) ; <nl> + int h0 = tuple . getInt ( 0 ) ; <nl> + int h1 = tuple . getInt ( 1 ) ; <nl> + int h2 = tuple . getInt ( 2 ) ; <nl> + int h3 = tuple . getInt ( 3 ) ; <nl> + assertEquals ( h0 , h1 ) ; <nl> + assertEquals ( h0 , h2 ) ; <nl> + assertEquals ( h0 , h3 ) ; <nl> + } <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / lib / licenses / guava - r05 . txt b / lib / licenses / guava - r05 . txt <nl> deleted file mode 100644 <nl> index d645695 . . 0000000 <nl> - - - a / lib / licenses / guava - r05 . txt <nl> + + + / dev / null <nl> @ @ - 1 , 202 + 0 , 0 @ @ <nl> - <nl> - Apache License <nl> - Version 2 . 0 , January 2004 <nl> - http : / / www . apache . org / licenses / <nl> - <nl> - TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION <nl> - <nl> - 1 . Definitions . <nl> - <nl> - " License " shall mean the terms and conditions for use , reproduction , <nl> - and distribution as defined by Sections 1 through 9 of this document . <nl> - <nl> - " Licensor " shall mean the copyright owner or entity authorized by <nl> - the copyright owner that is granting the License . <nl> - <nl> - " Legal Entity " shall mean the union of the acting entity and all <nl> - other entities that control , are controlled by , or are under common <nl> - control with that entity . For the purposes of this definition , <nl> - " control " means ( i ) the power , direct or indirect , to cause the <nl> - direction or management of such entity , whether by contract or <nl> - otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the <nl> - outstanding shares , or ( iii ) beneficial ownership of such entity . <nl> - <nl> - " You " ( or " Your " ) shall mean an individual or Legal Entity <nl> - exercising permissions granted by this License . <nl> - <nl> - " Source " form shall mean the preferred form for making modifications , <nl> - including but not limited to software source code , documentation <nl> - source , and configuration files . <nl> - <nl> - " Object " form shall mean any form resulting from mechanical <nl> - transformation or translation of a Source form , including but <nl> - not limited to compiled object code , generated documentation , <nl> - and conversions to other media types . <nl> - <nl> - " Work " shall mean the work of authorship , whether in Source or <nl> - Object form , made available under the License , as indicated by a <nl> - copyright notice that is included in or attached to the work <nl> - ( an example is provided in the Appendix below ) . <nl> - <nl> - " Derivative Works " shall mean any work , whether in Source or Object <nl> - form , that is based on ( or derived from ) the Work and for which the <nl> - editorial revisions , annotations , elaborations , or other modifications <nl> - represent , as a whole , an original work of authorship . For the purposes <nl> - of this License , Derivative Works shall not include works that remain <nl> - separable from , or merely link ( or bind by name ) to the interfaces of , <nl> - the Work and Derivative Works thereof . <nl> - <nl> - " Contribution " shall mean any work of authorship , including <nl> - the original version of the Work and any modifications or additions <nl> - to that Work or Derivative Works thereof , that is intentionally <nl> - submitted to Licensor for inclusion in the Work by the copyright owner <nl> - or by an individual or Legal Entity authorized to submit on behalf of <nl> - the copyright owner . For the purposes of this definition , " submitted " <nl> - means any form of electronic , verbal , or written communication sent <nl> - to the Licensor or its representatives , including but not limited to <nl> - communication on electronic mailing lists , source code control systems , <nl> - and issue tracking systems that are managed by , or on behalf of , the <nl> - Licensor for the purpose of discussing and improving the Work , but <nl> - excluding communication that is conspicuously marked or otherwise <nl> - designated in writing by the copyright owner as " Not a Contribution . " <nl> - <nl> - " Contributor " shall mean Licensor and any individual or Legal Entity <nl> - on behalf of whom a Contribution has been received by Licensor and <nl> - subsequently incorporated within the Work . <nl> - <nl> - 2 . Grant of Copyright License . Subject to the terms and conditions of <nl> - this License , each Contributor hereby grants to You a perpetual , <nl> - worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> - copyright license to reproduce , prepare Derivative Works of , <nl> - publicly display , publicly perform , sublicense , and distribute the <nl> - Work and such Derivative Works in Source or Object form . <nl> - <nl> - 3 . Grant of Patent License . Subject to the terms and conditions of <nl> - this License , each Contributor hereby grants to You a perpetual , <nl> - worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> - ( except as stated in this section ) patent license to make , have made , <nl> - use , offer to sell , sell , import , and otherwise transfer the Work , <nl> - where such license applies only to those patent claims licensable <nl> - by such Contributor that are necessarily infringed by their <nl> - Contribution ( s ) alone or by combination of their Contribution ( s ) <nl> - with the Work to which such Contribution ( s ) was submitted . If You <nl> - institute patent litigation against any entity ( including a <nl> - cross - claim or counterclaim in a lawsuit ) alleging that the Work <nl> - or a Contribution incorporated within the Work constitutes direct <nl> - or contributory patent infringement , then any patent licenses <nl> - granted to You under this License for that Work shall terminate <nl> - as of the date such litigation is filed . <nl> - <nl> - 4 . Redistribution . You may reproduce and distribute copies of the <nl> - Work or Derivative Works thereof in any medium , with or without <nl> - modifications , and in Source or Object form , provided that You <nl> - meet the following conditions : <nl> - <nl> - ( a ) You must give any other recipients of the Work or <nl> - Derivative Works a copy of this License ; and <nl> - <nl> - ( b ) You must cause any modified files to carry prominent notices <nl> - stating that You changed the files ; and <nl> - <nl> - ( c ) You must retain , in the Source form of any Derivative Works <nl> - that You distribute , all copyright , patent , trademark , and <nl> - attribution notices from the Source form of the Work , <nl> - excluding those notices that do not pertain to any part of <nl> - the Derivative Works ; and <nl> - <nl> - ( d ) If the Work includes a " NOTICE " text file as part of its <nl> - distribution , then any Derivative Works that You distribute must <nl> - include a readable copy of the attribution notices contained <nl> - within such NOTICE file , excluding those notices that do not <nl> - pertain to any part of the Derivative Works , in at least one <nl> - of the following places : within a NOTICE text file distributed <nl> - as part of the Derivative Works ; within the Source form or <nl> - documentation , if provided along with the Derivative Works ; or , <nl> - within a display generated by the Derivative Works , if and <nl> - wherever such third - party notices normally appear . The contents <nl> - of the NOTICE file are for informational purposes only and <nl> - do not modify the License . You may add Your own attribution <nl> - notices within Derivative Works that You distribute , alongside <nl> - or as an addendum to the NOTICE text from the Work , provided <nl> - that such additional attribution notices cannot be construed <nl> - as modifying the License . <nl> - <nl> - You may add Your own copyright statement to Your modifications and <nl> - may provide additional or different license terms and conditions <nl> - for use , reproduction , or distribution of Your modifications , or <nl> - for any such Derivative Works as a whole , provided Your use , <nl> - reproduction , and distribution of the Work otherwise complies with <nl> - the conditions stated in this License . <nl> - <nl> - 5 . Submission of Contributions . Unless You explicitly state otherwise , <nl> - any Contribution intentionally submitted for inclusion in the Work <nl> - by You to the Licensor shall be under the terms and conditions of <nl> - this License , without any additional terms or conditions . <nl> - Notwithstanding the above , nothing herein shall supersede or modify <nl> - the terms of any separate license agreement you may have executed <nl> - with Licensor regarding such Contributions . <nl> - <nl> - 6 . Trademarks . This License does not grant permission to use the trade <nl> - names , trademarks , service marks , or product names of the Licensor , <nl> - except as required for reasonable and customary use in describing the <nl> - origin of the Work and reproducing the content of the NOTICE file . <nl> - <nl> - 7 . Disclaimer of Warranty . Unless required by applicable law or <nl> - agreed to in writing , Licensor provides the Work ( and each <nl> - Contributor provides its Contributions ) on an " AS IS " BASIS , <nl> - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or <nl> - implied , including , without limitation , any warranties or conditions <nl> - of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A <nl> - PARTICULAR PURPOSE . You are solely responsible for determining the <nl> - appropriateness of using or redistributing the Work and assume any <nl> - risks associated with Your exercise of permissions under this License . <nl> - <nl> - 8 . Limitation of Liability . In no event and under no legal theory , <nl> - whether in tort ( including negligence ) , contract , or otherwise , <nl> - unless required by applicable law ( such as deliberate and grossly <nl> - negligent acts ) or agreed to in writing , shall any Contributor be <nl> - liable to You for damages , including any direct , indirect , special , <nl> - incidental , or consequential damages of any character arising as a <nl> - result of this License or out of the use or inability to use the <nl> - Work ( including but not limited to damages for loss of goodwill , <nl> - work stoppage , computer failure or malfunction , or any and all <nl> - other commercial damages or losses ) , even if such Contributor <nl> - has been advised of the possibility of such damages . <nl> - <nl> - 9 . Accepting Warranty or Additional Liability . While redistributing <nl> - the Work or Derivative Works thereof , You may choose to offer , <nl> - and charge a fee for , acceptance of support , warranty , indemnity , <nl> - or other liability obligations and / or rights consistent with this <nl> - License . However , in accepting such obligations , You may act only <nl> - on Your own behalf and on Your sole responsibility , not on behalf <nl> - of any other Contributor , and only if You agree to indemnify , <nl> - defend , and hold each Contributor harmless for any liability <nl> - incurred by , or claims asserted against , such Contributor by reason <nl> - of your accepting any such warranty or additional liability . <nl> - <nl> - END OF TERMS AND CONDITIONS <nl> - <nl> - APPENDIX : How to apply the Apache License to your work . <nl> - <nl> - To apply the Apache License to your work , attach the following <nl> - boilerplate notice , with the fields enclosed by brackets " [ ] " <nl> - replaced with your own identifying information . ( Don ' t include <nl> - the brackets ! ) The text should be enclosed in the appropriate <nl> - comment syntax for the file format . We also recommend that a <nl> - file or class name and description of purpose be included on the <nl> - same " printed page " as the copyright notice for easier <nl> - identification within third - party archives . <nl> - <nl> - Copyright [ yyyy ] [ name of copyright owner ] <nl> - <nl> - Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - you may not use this file except in compliance with the License . <nl> - You may obtain a copy of the License at <nl> - <nl> - http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - <nl> - Unless required by applicable law or agreed to in writing , software <nl> - distributed under the License is distributed on an " AS IS " BASIS , <nl> - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - See the License for the specific language governing permissions and <nl> - limitations under the License . <nl> diff - - git a / lib / licenses / guava - r08 . txt b / lib / licenses / guava - r08 . txt <nl> new file mode 100644 <nl> index 0000000 . . d645695 <nl> - - - / dev / null <nl> + + + b / lib / licenses / guava - r08 . txt <nl> @ @ - 0 , 0 + 1 , 202 @ @ <nl> + <nl> + Apache License <nl> + Version 2 . 0 , January 2004 <nl> + http : / / www . apache . org / licenses / <nl> + <nl> + TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION <nl> + <nl> + 1 . Definitions . <nl> + <nl> + " License " shall mean the terms and conditions for use , reproduction , <nl> + and distribution as defined by Sections 1 through 9 of this document . <nl> + <nl> + " Licensor " shall mean the copyright owner or entity authorized by <nl> + the copyright owner that is granting the License . <nl> + <nl> + " Legal Entity " shall mean the union of the acting entity and all <nl> + other entities that control , are controlled by , or are under common <nl> + control with that entity . For the purposes of this definition , <nl> + " control " means ( i ) the power , direct or indirect , to cause the <nl> + direction or management of such entity , whether by contract or <nl> + otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the <nl> + outstanding shares , or ( iii ) beneficial ownership of such entity . <nl> + <nl> + " You " ( or " Your " ) shall mean an individual or Legal Entity <nl> + exercising permissions granted by this License . <nl> + <nl> + " Source " form shall mean the preferred form for making modifications , <nl> + including but not limited to software source code , documentation <nl> + source , and configuration files . <nl> + <nl> + " Object " form shall mean any form resulting from mechanical <nl> + transformation or translation of a Source form , including but <nl> + not limited to compiled object code , generated documentation , <nl> + and conversions to other media types . <nl> + <nl> + " Work " shall mean the work of authorship , whether in Source or <nl> + Object form , made available under the License , as indicated by a <nl> + copyright notice that is included in or attached to the work <nl> + ( an example is provided in the Appendix below ) . <nl> + <nl> + " Derivative Works " shall mean any work , whether in Source or Object <nl> + form , that is based on ( or derived from ) the Work and for which the <nl> + editorial revisions , annotations , elaborations , or other modifications <nl> + represent , as a whole , an original work of authorship . For the purposes <nl> + of this License , Derivative Works shall not include works that remain <nl> + separable from , or merely link ( or bind by name ) to the interfaces of , <nl> + the Work and Derivative Works thereof . <nl> + <nl> + " Contribution " shall mean any work of authorship , including <nl> + the original version of the Work and any modifications or additions <nl> + to that Work or Derivative Works thereof , that is intentionally <nl> + submitted to Licensor for inclusion in the Work by the copyright owner <nl> + or by an individual or Legal Entity authorized to submit on behalf of <nl> + the copyright owner . For the purposes of this definition , " submitted " <nl> + means any form of electronic , verbal , or written communication sent <nl> + to the Licensor or its representatives , including but not limited to <nl> + communication on electronic mailing lists , source code control systems , <nl> + and issue tracking systems that are managed by , or on behalf of , the <nl> + Licensor for the purpose of discussing and improving the Work , but <nl> + excluding communication that is conspicuously marked or otherwise <nl> + designated in writing by the copyright owner as " Not a Contribution . " <nl> + <nl> + " Contributor " shall mean Licensor and any individual or Legal Entity <nl> + on behalf of whom a Contribution has been received by Licensor and <nl> + subsequently incorporated within the Work . <nl> + <nl> + 2 . Grant of Copyright License . Subject to the terms and conditions of <nl> + this License , each Contributor hereby grants to You a perpetual , <nl> + worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> + copyright license to reproduce , prepare Derivative Works of , <nl> + publicly display , publicly perform , sublicense , and distribute the <nl> + Work and such Derivative Works in Source or Object form . <nl> + <nl> + 3 . Grant of Patent License . Subject to the terms and conditions of <nl> + this License , each Contributor hereby grants to You a perpetual , <nl> + worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> + ( except as stated in this section ) patent license to make , have made , <nl> + use , offer to sell , sell , import , and otherwise transfer the Work , <nl> + where such license applies only to those patent claims licensable <nl> + by such Contributor that are necessarily infringed by their <nl> + Contribution ( s ) alone or by combination of their Contribution ( s ) <nl> + with the Work to which such Contribution ( s ) was submitted . If You <nl> + institute patent litigation against any entity ( including a <nl> + cross - claim or counterclaim in a lawsuit ) alleging that the Work <nl> + or a Contribution incorporated within the Work constitutes direct <nl> + or contributory patent infringement , then any patent licenses <nl> + granted to You under this License for that Work shall terminate <nl> + as of the date such litigation is filed . <nl> + <nl> + 4 . Redistribution . You may reproduce and distribute copies of the <nl> + Work or Derivative Works thereof in any medium , with or without <nl> + modifications , and in Source or Object form , provided that You <nl> + meet the following conditions : <nl> + <nl> + ( a ) You must give any other recipients of the Work or <nl> + Derivative Works a copy of this License ; and <nl> + <nl> + ( b ) You must cause any modified files to carry prominent notices <nl> + stating that You changed the files ; and <nl> + <nl> + ( c ) You must retain , in the Source form of any Derivative Works <nl> + that You distribute , all copyright , patent , trademark , and <nl> + attribution notices from the Source form of the Work , <nl> + excluding those notices that do not pertain to any part of <nl> + the Derivative Works ; and <nl> + <nl> + ( d ) If the Work includes a " NOTICE " text file as part of its <nl> + distribution , then any Derivative Works that You distribute must <nl> + include a readable copy of the attribution notices contained <nl> + within such NOTICE file , excluding those notices that do not <nl> + pertain to any part of the Derivative Works , in at least one <nl> + of the following places : within a NOTICE text file distributed <nl> + as part of the Derivative Works ; within the Source form or <nl> + documentation , if provided along with the Derivative Works ; or , <nl> + within a display generated by the Derivative Works , if and <nl> + wherever such third - party notices normally appear . The contents <nl> + of the NOTICE file are for informational purposes only and <nl> + do not modify the License . You may add Your own attribution <nl> + notices within Derivative Works that You distribute , alongside <nl> + or as an addendum to the NOTICE text from the Work , provided <nl> + that such additional attribution notices cannot be construed <nl> + as modifying the License . <nl> + <nl> + You may add Your own copyright statement to Your modifications and <nl> + may provide additional or different license terms and conditions <nl> + for use , reproduction , or distribution of Your modifications , or <nl> + for any such Derivative Works as a whole , provided Your use , <nl> + reproduction , and distribution of the Work otherwise complies with <nl> + the conditions stated in this License . <nl> + <nl> + 5 . Submission of Contributions . Unless You explicitly state otherwise , <nl> + any Contribution intentionally submitted for inclusion in the Work <nl> + by You to the Licensor shall be under the terms and conditions of <nl> + this License , without any additional terms or conditions . <nl> + Notwithstanding the above , nothing herein shall supersede or modify <nl> + the terms of any separate license agreement you may have executed <nl> + with Licensor regarding such Contributions . <nl> + <nl> + 6 . Trademarks . This License does not grant permission to use the trade <nl> + names , trademarks , service marks , or product names of the Licensor , <nl> + except as required for reasonable and customary use in describing the <nl> + origin of the Work and reproducing the content of the NOTICE file . <nl> + <nl> + 7 . Disclaimer of Warranty . Unless required by applicable law or <nl> + agreed to in writing , Licensor provides the Work ( and each <nl> + Contributor provides its Contributions ) on an " AS IS " BASIS , <nl> + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or <nl> + implied , including , without limitation , any warranties or conditions <nl> + of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A <nl> + PARTICULAR PURPOSE . You are solely responsible for determining the <nl> + appropriateness of using or redistributing the Work and assume any <nl> + risks associated with Your exercise of permissions under this License . <nl> + <nl> + 8 . Limitation of Liability . In no event and under no legal theory , <nl> + whether in tort ( including negligence ) , contract , or otherwise , <nl> + unless required by applicable law ( such as deliberate and grossly <nl> + negligent acts ) or agreed to in writing , shall any Contributor be <nl> + liable to You for damages , including any direct , indirect , special , <nl> + incidental , or consequential damages of any character arising as a <nl> + result of this License or out of the use or inability to use the <nl> + Work ( including but not limited to damages for loss of goodwill , <nl> + work stoppage , computer failure or malfunction , or any and all <nl> + other commercial damages or losses ) , even if such Contributor <nl> + has been advised of the possibility of such damages . <nl> + <nl> + 9 . Accepting Warranty or Additional Liability . While redistributing <nl> + the Work or Derivative Works thereof , You may choose to offer , <nl> + and charge a fee for , acceptance of support , warranty , indemnity , <nl> + or other liability obligations and / or rights consistent with this <nl> + License . However , in accepting such obligations , You may act only <nl> + on Your own behalf and on Your sole responsibility , not on behalf <nl> + of any other Contributor , and only if You agree to indemnify , <nl> + defend , and hold each Contributor harmless for any liability <nl> + incurred by , or claims asserted against , such Contributor by reason <nl> + of your accepting any such warranty or additional liability . <nl> + <nl> + END OF TERMS AND CONDITIONS <nl> + <nl> + APPENDIX : How to apply the Apache License to your work . <nl> + <nl> + To apply the Apache License to your work , attach the following <nl> + boilerplate notice , with the fields enclosed by brackets " [ ] " <nl> + replaced with your own identifying information . ( Don ' t include <nl> + the brackets ! ) The text should be enclosed in the appropriate <nl> + comment syntax for the file format . We also recommend that a <nl> + file or class name and description of purpose be included on the <nl> + same " printed page " as the copyright notice for easier <nl> + identification within third - party archives . <nl> + <nl> + Copyright [ yyyy ] [ name of copyright owner ] <nl> + <nl> + Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + you may not use this file except in compliance with the License . <nl> + You may obtain a copy of the License at <nl> + <nl> + http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + <nl> + Unless required by applicable law or agreed to in writing , software <nl> + distributed under the License is distributed on an " AS IS " BASIS , <nl> + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + See the License for the specific language governing permissions and <nl> + limitations under the License .

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6b0a118 . . df07ba0 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 10 
 + * Omit ( de ) serialization of state variable in UDAs ( CASSANDRA - 9613 ) 
 * Create a system table to expose prepared statements ( CASSANDRA - 8831 ) 
 * Reuse DataOutputBuffer from ColumnIndex ( CASSANDRA - 11970 ) 
 * Remove DatabaseDescriptor dependency from SegmentedFile ( CASSANDRA - 11580 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java 
 index 87f5019 . . 34c6cc9 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java 
 @ @ - 191 , 7 + 191 , 7 @ @ public final class JavaBasedUDFunction extends UDFunction 
 
 / / javaParamTypes is just the Java representation for argTypes resp . argDataTypes 
 TypeToken < ? > [ ] javaParamTypes = UDHelper . typeTokens ( argCodecs , calledOnNullInput ) ; 
 - / / javaReturnType is just the Java representation for returnType resp . returnDataType 
 + / / javaReturnType is just the Java representation for returnType resp . returnTypeCodec 
 TypeToken < ? > javaReturnType = returnCodec . getJavaType ( ) ; 
 
 / / put each UDF in a separate package to prevent cross - UDF code access 
 @ @ - 222 , 7 + 222 , 10 @ @ public final class JavaBasedUDFunction extends UDFunction 
 s = body ; 
 break ; 
 case " arguments " : 
 - s = generateArguments ( javaParamTypes , argNames ) ; 
 + s = generateArguments ( javaParamTypes , argNames , false ) ; 
 + break ; 
 + case " arguments _ aggregate " : 
 + s = generateArguments ( javaParamTypes , argNames , true ) ; 
 break ; 
 case " argument _ list " : 
 s = generateArgumentList ( javaParamTypes , argNames ) ; 
 @ @ - 326 , 7 + 329 , 7 @ @ public final class JavaBasedUDFunction extends UDFunction 
 } 
 } 
 
 - if ( nonSyntheticMethodCount ! = 2 | | cls . getDeclaredConstructors ( ) . length ! = 1 ) 
 + if ( nonSyntheticMethodCount ! = 3 | | cls . getDeclaredConstructors ( ) . length ! = 1 ) 
 throw new InvalidRequestException ( " Check your source to not define additional Java methods or constructors " ) ; 
 MethodType methodType = MethodType . methodType ( void . class ) 
 . appendParameterTypes ( TypeCodec . class , TypeCodec [ ] . class , UDFContext . class ) ; 
 @ @ - 364 , 6 + 367 , 10 @ @ public final class JavaBasedUDFunction extends UDFunction 
 return javaUDF . executeImpl ( protocolVersion , params ) ; 
 } 
 
 + protected Object executeAggregateUserDefined ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) 
 + { 
 + return javaUDF . executeAggregateImpl ( protocolVersion , firstParam , params ) ; 
 + } 
 
 private static int countNewlines ( StringBuilder javaSource ) 
 { 
 @ @ - 417 , 22 + 424 , 48 @ @ public final class JavaBasedUDFunction extends UDFunction 
 return code . toString ( ) ; 
 } 
 
 - private static String generateArguments ( TypeToken < ? > [ ] paramTypes , List < ColumnIdentifier > argNames ) 
 + / * * 
 + * Generate Java source code snippet for the arguments part to call the UDF implementation function - 
 + * i . e . the { @ code private # return _ type # # execute _ internal _ name # ( # argument _ list # ) } function 
 + * ( see { @ code JavaSourceUDF . txt } template file for details ) . 
 + * < p > 
 + * This method generates the arguments code snippet for both { @ code executeImpl } and 
 + * { @ code executeAggregateImpl } . General signature for both is the { @ code protocolVersion } and 
 + * then all UDF arguments . For aggregation UDF calls the first argument is always unserialized as 
 + * that is the state variable . 
 + * < / p > 
 + * < p > 
 + * An example output for { @ code executeImpl } : 
 + * { @ code ( double ) super . compose _ double ( protocolVersion , 0 , params . get ( 0 ) ) , ( double ) super . compose _ double ( protocolVersion , 1 , params . get ( 1 ) ) } 
 + * < / p > 
 + * < p > 
 + * Similar output for { @ code executeAggregateImpl } : 
 + * { @ code firstParam , ( double ) super . compose _ double ( protocolVersion , 1 , params . get ( 1 ) ) } 
 + * < / p > 
 + * / 
 + private static String generateArguments ( TypeToken < ? > [ ] paramTypes , List < ColumnIdentifier > argNames , boolean forAggregate ) 
 { 
 StringBuilder code = new StringBuilder ( 64 * paramTypes . length ) ; 
 for ( int i = 0 ; i < paramTypes . length ; i + + ) 
 { 
 if ( i > 0 ) 
 + / / add separator , if not the first argument 
 code . append ( " , \ n " ) ; 
 
 + / / add comment only if trace is enabled 
 if ( logger . isTraceEnabled ( ) ) 
 code . append ( " / * parameter ' " ) . append ( argNames . get ( i ) ) . append ( " ' * / \ n " ) ; 
 
 - code 
 - / / cast to Java type 
 - . append ( " ( " ) . append ( javaSourceName ( paramTypes [ i ] ) ) . append ( " ) " ) 
 + / / cast to Java type 
 + code . append ( " ( " ) . append ( javaSourceName ( paramTypes [ i ] ) ) . append ( " ) " ) ; 
 + 
 + if ( forAggregate & & i = = 0 ) 
 + / / special case for aggregations where the state variable ( 1st arg to state + final function and 
 + / / return value from state function ) is not re - serialized 
 + code . append ( " firstParam " ) ; 
 + else 
 / / generate object representation of input parameter ( call UDFunction . compose ) 
 - . append ( composeMethod ( paramTypes [ i ] ) ) . append ( " ( protocolVersion , " ) . append ( i ) . append ( " , params . get ( " ) . append ( i ) . append ( " ) ) " ) ; 
 + code . append ( composeMethod ( paramTypes [ i ] ) ) . append ( " ( protocolVersion , " ) . append ( i ) . append ( " , params . get ( " ) . append ( forAggregate ? i - 1 : i ) . append ( " ) ) " ) ; 
 } 
 return code . toString ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / JavaUDF . java b / src / java / org / apache / cassandra / cql3 / functions / JavaUDF . java 
 index 7410f1f . . 56a7ced 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / JavaUDF . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / JavaUDF . java 
 @ @ - 45 , 6 + 45 , 8 @ @ public abstract class JavaUDF 
 
 protected abstract ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) ; 
 
 + protected abstract Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) ; 
 + 
 protected Object compose ( int protocolVersion , int argIndex , ByteBuffer value ) 
 { 
 return UDFunction . compose ( argCodecs , protocolVersion , argIndex , value ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java 
 index b524163 . . 8c15dc9 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java 
 @ @ - 177 , 6 + 177 , 29 @ @ final class ScriptBasedUDFunction extends UDFunction 
 for ( int i = 0 ; i < params . length ; i + + ) 
 params [ i ] = compose ( protocolVersion , i , parameters . get ( i ) ) ; 
 
 + Object result = executeScriptInternal ( params ) ; 
 + 
 + return decompose ( protocolVersion , result ) ; 
 + } 
 + 
 + / * * 
 + * Like { @ link # executeUserDefined ( int , List ) } but the first parameter is already in non - serialized form . 
 + * Remaining parameters ( 2nd paramters and all others ) are in { @ code parameters } . 
 + * This is used to prevent superfluous ( de ) serialization of the state of aggregates . 
 + * Means : scalar functions of aggregates are called using this variant . 
 + * / 
 + protected Object executeAggregateUserDefined ( int protocolVersion , Object firstParam , List < ByteBuffer > parameters ) 
 + { 
 + Object [ ] params = new Object [ argTypes . size ( ) ] ; 
 + params [ 0 ] = firstParam ; 
 + for ( int i = 1 ; i < params . length ; i + + ) 
 + params [ i ] = compose ( protocolVersion , i , parameters . get ( i - 1 ) ) ; 
 + 
 + return executeScriptInternal ( params ) ; 
 + } 
 + 
 + private Object executeScriptInternal ( Object [ ] params ) 
 + { 
 ScriptContext scriptContext = new SimpleScriptContext ( ) ; 
 scriptContext . setAttribute ( " javax . script . filename " , this . name . toString ( ) , ScriptContext . ENGINE _ SCOPE ) ; 
 Bindings bindings = scriptContext . getBindings ( ScriptContext . ENGINE _ SCOPE ) ; 
 @ @ - 251 , 7 + 274 , 7 @ @ final class ScriptBasedUDFunction extends UDFunction 
 } 
 } 
 
 - return decompose ( protocolVersion , result ) ; 
 + return result ; 
 } 
 
 private final class UDFContextWrapper extends AbstractJSObject 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java b / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java 
 index 52b8163 . . 6570ba8 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import com . google . common . base . Objects ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import com . datastax . driver . core . TypeCodec ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . exceptions . InvalidRequestException ; 
 import org . apache . cassandra . schema . Functions ; 
 @ @ - 36 , 7 + 37 , 9 @ @ public class UDAggregate extends AbstractFunction implements AggregateFunction 
 { 
 protected static final Logger logger = LoggerFactory . getLogger ( UDAggregate . class ) ; 
 
 - protected final AbstractType < ? > stateType ; 
 + private final AbstractType < ? > stateType ; 
 + private final TypeCodec stateTypeCodec ; 
 + private final TypeCodec returnTypeCodec ; 
 protected final ByteBuffer initcond ; 
 private final ScalarFunction stateFunction ; 
 private final ScalarFunction finalFunction ; 
 @ @ - 52 , 6 + 55 , 8 @ @ public class UDAggregate extends AbstractFunction implements AggregateFunction 
 this . stateFunction = stateFunc ; 
 this . finalFunction = finalFunc ; 
 this . stateType = stateFunc ! = null ? stateFunc . returnType ( ) : null ; 
 + this . stateTypeCodec = stateType ! = null ? UDHelper . codecFor ( UDHelper . driverType ( stateType ) ) : null ; 
 + this . returnTypeCodec = returnType ! = null ? UDHelper . codecFor ( UDHelper . driverType ( returnType ) ) : null ; 
 this . initcond = initcond ; 
 } 
 
 @ @ - 68 , 7 + 73 , 7 @ @ public class UDAggregate extends AbstractFunction implements AggregateFunction 
 List < AbstractType < ? > > stateTypes = new ArrayList < > ( argTypes . size ( ) + 1 ) ; 
 stateTypes . add ( stateType ) ; 
 stateTypes . addAll ( argTypes ) ; 
 - List < AbstractType < ? > > finalTypes = Collections . < AbstractType < ? > > singletonList ( stateType ) ; 
 + List < AbstractType < ? > > finalTypes = Collections . singletonList ( stateType ) ; 
 return new UDAggregate ( name , 
 argTypes , 
 returnType , 
 @ @ - 81 , 7 + 86 , 7 @ @ public class UDAggregate extends AbstractFunction implements AggregateFunction 
 List < AbstractType < ? > > argTypes , 
 AbstractType < ? > returnType , 
 ByteBuffer initcond , 
 - final InvalidRequestException reason ) 
 + InvalidRequestException reason ) 
 { 
 return new UDAggregate ( name , argTypes , returnType , null , null , initcond ) 
 { 
 @ @ - 150 , 48 + 155 , 55 @ @ public class UDAggregate extends AbstractFunction implements AggregateFunction 
 private long stateFunctionCount ; 
 private long stateFunctionDuration ; 
 
 - private ByteBuffer state ; 
 - { 
 - reset ( ) ; 
 - } 
 + private Object state ; 
 + private boolean needsInit = true ; 
 
 public void addInput ( int protocolVersion , List < ByteBuffer > values ) throws InvalidRequestException 
 { 
 + if ( needsInit ) 
 + { 
 + state = initcond ! = null ? UDHelper . deserialize ( stateTypeCodec , protocolVersion , initcond . duplicate ( ) ) : null ; 
 + stateFunctionDuration = 0 ; 
 + stateFunctionCount = 0 ; 
 + needsInit = false ; 
 + } 
 + 
 long startTime = System . nanoTime ( ) ; 
 stateFunctionCount + + ; 
 - List < ByteBuffer > fArgs = new ArrayList < > ( values . size ( ) + 1 ) ; 
 - fArgs . add ( state ) ; 
 - fArgs . addAll ( values ) ; 
 if ( stateFunction instanceof UDFunction ) 
 { 
 UDFunction udf = ( UDFunction ) stateFunction ; 
 - if ( udf . isCallableWrtNullable ( fArgs ) ) 
 - state = udf . execute ( protocolVersion , fArgs ) ; 
 + if ( udf . isCallableWrtNullable ( values ) ) 
 + state = udf . executeForAggregate ( protocolVersion , state , values ) ; 
 } 
 else 
 { 
 - state = stateFunction . execute ( protocolVersion , fArgs ) ; 
 + throw new UnsupportedOperationException ( " UDAs only support UDFs " ) ; 
 } 
 stateFunctionDuration + = ( System . nanoTime ( ) - startTime ) / 1000 ; 
 } 
 
 public ByteBuffer compute ( int protocolVersion ) throws InvalidRequestException 
 { 
 + assert ! needsInit ; 
 + 
 / / final function is traced in UDFunction 
 Tracing . trace ( " Executed UDA { } : { } call ( s ) to state function { } in { } \ u03bcs " , name ( ) , stateFunctionCount , stateFunction . name ( ) , stateFunctionDuration ) ; 
 if ( finalFunction = = null ) 
 - return state ; 
 + return UDFunction . decompose ( stateTypeCodec , protocolVersion , state ) ; 
 
 - List < ByteBuffer > fArgs = Collections . singletonList ( state ) ; 
 - ByteBuffer result = finalFunction . execute ( protocolVersion , fArgs ) ; 
 - return result ; 
 + if ( finalFunction instanceof UDFunction ) 
 + { 
 + UDFunction udf = ( UDFunction ) finalFunction ; 
 + Object result = udf . executeForAggregate ( protocolVersion , state , Collections . emptyList ( ) ) ; 
 + return UDFunction . decompose ( returnTypeCodec , protocolVersion , result ) ; 
 + } 
 + throw new UnsupportedOperationException ( " UDAs only support UDFs " ) ; 
 } 
 
 public void reset ( ) 
 { 
 - state = initcond ! = null ? initcond . duplicate ( ) : null ; 
 - stateFunctionDuration = 0 ; 
 - stateFunctionCount = 0 ; 
 + needsInit = true ; 
 } 
 } ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDFByteCodeVerifier . java b / src / java / org / apache / cassandra / cql3 / functions / UDFByteCodeVerifier . java 
 index cfaa70f . . 7d28fcd 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / UDFByteCodeVerifier . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / UDFByteCodeVerifier . java 
 @ @ - 108 , 6 + 108 , 13 @ @ public final class UDFByteCodeVerifier 
 / / the executeImpl method - ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) 
 return new ExecuteImplVisitor ( errors ) ; 
 } 
 + if ( " executeAggregateImpl " . equals ( name ) & & " ( ILjava / lang / Object ; Ljava / util / List ; ) Ljava / lang / Object ; " . equals ( desc ) ) 
 + { 
 + if ( Opcodes . ACC _ PROTECTED ! = access ) 
 + errors . add ( " executeAggregateImpl not protected " ) ; 
 + / / the executeImpl method - ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) 
 + return new ExecuteImplVisitor ( errors ) ; 
 + } 
 if ( " < clinit > " . equals ( name ) ) 
 { 
 errors . add ( " static initializer declared " ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 index 6e8d187 . . 70d459f 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import java . util . Enumeration ; 
 import java . util . HashSet ; 
 import java . util . List ; 
 import java . util . concurrent . CompletableFuture ; 
 + import java . util . concurrent . Callable ; 
 import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . Executors ; 
 @ @ - 258 , 12 + 259 , 22 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 return Executors . newSingleThreadExecutor ( ) ; 
 } 
 
 + protected Object executeAggregateUserDefined ( int protocolVersion , Object firstParam , List < ByteBuffer > parameters ) 
 + { 
 + throw broken ( ) ; 
 + } 
 + 
 public ByteBuffer executeUserDefined ( int protocolVersion , List < ByteBuffer > parameters ) 
 { 
 - throw new InvalidRequestException ( String . format ( " Function ' % s ' exists but hasn ' t been loaded successfully " 
 - + " for the following reason : % s . Please see the server log for details " , 
 - this , 
 - reason . getMessage ( ) ) ) ; 
 + throw broken ( ) ; 
 + } 
 + 
 + private InvalidRequestException broken ( ) 
 + { 
 + return new InvalidRequestException ( String . format ( " Function ' % s ' exists but hasn ' t been loaded successfully " 
 + + " for the following reason : % s . Please see the server log for details " , 
 + this , 
 + reason . getMessage ( ) ) ) ; 
 } 
 } ; 
 } 
 @ @ - 301 , 6 + 312 , 44 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 } 
 } 
 
 + / * * 
 + * Like { @ link # execute ( int , List ) } but the first parameter is already in non - serialized form . 
 + * Remaining parameters ( 2nd paramters and all others ) are in { @ code parameters } . 
 + * This is used to prevent superfluous ( de ) serialization of the state of aggregates . 
 + * Means : scalar functions of aggregates are called using this variant . 
 + * / 
 + public final Object executeForAggregate ( int protocolVersion , Object firstParam , List < ByteBuffer > parameters ) 
 + { 
 + assertUdfsEnabled ( language ) ; 
 + 
 + if ( ! calledOnNullInput & & firstParam = = null | | ! isCallableWrtNullable ( parameters ) ) 
 + return null ; 
 + 
 + long tStart = System . nanoTime ( ) ; 
 + parameters = makeEmptyParametersNull ( parameters ) ; 
 + 
 + try 
 + { 
 + / / Using async UDF execution is expensive ( adds about 100us overhead per invocation on a Core - i7 MBPr ) . 
 + Object result = DatabaseDescriptor . enableUserDefinedFunctionsThreads ( ) 
 + ? executeAggregateAsync ( protocolVersion , firstParam , parameters ) 
 + : executeAggregateUserDefined ( protocolVersion , firstParam , parameters ) ; 
 + Tracing . trace ( " Executed UDF { } in { } \ u03bcs " , name ( ) , ( System . nanoTime ( ) - tStart ) / 1000 ) ; 
 + return result ; 
 + } 
 + catch ( InvalidRequestException e ) 
 + { 
 + throw e ; 
 + } 
 + catch ( Throwable t ) 
 + { 
 + logger . debug ( " Invocation of user - defined function ' { } ' failed " , this , t ) ; 
 + if ( t instanceof VirtualMachineError ) 
 + throw ( VirtualMachineError ) t ; 
 + throw FunctionExecutionException . create ( this , t ) ; 
 + } 
 + } 
 + 
 public static void assertUdfsEnabled ( String language ) 
 { 
 if ( ! DatabaseDescriptor . enableUserDefinedFunctions ( ) ) 
 @ @ - 344 , 10 + 393 , 31 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 { 
 ThreadIdAndCpuTime threadIdAndCpuTime = new ThreadIdAndCpuTime ( ) ; 
 
 - Future < ByteBuffer > future = executor ( ) . submit ( ( ) - > { 
 + return async ( threadIdAndCpuTime , ( ) - > { 
 threadIdAndCpuTime . setup ( ) ; 
 return executeUserDefined ( protocolVersion , parameters ) ; 
 } ) ; 
 + } 
 + 
 + / * * 
 + * Like { @ link # executeAsync ( int , List ) } but the first parameter is already in non - serialized form . 
 + * Remaining parameters ( 2nd paramters and all others ) are in { @ code parameters } . 
 + * This is used to prevent superfluous ( de ) serialization of the state of aggregates . 
 + * Means : scalar functions of aggregates are called using this variant . 
 + * / 
 + private Object executeAggregateAsync ( int protocolVersion , Object firstParam , List < ByteBuffer > parameters ) 
 + { 
 + ThreadIdAndCpuTime threadIdAndCpuTime = new ThreadIdAndCpuTime ( ) ; 
 + 
 + return async ( threadIdAndCpuTime , ( ) - > { 
 + threadIdAndCpuTime . setup ( ) ; 
 + return executeAggregateUserDefined ( protocolVersion , firstParam , parameters ) ; 
 + } ) ; 
 + } 
 + 
 + private < T > T async ( ThreadIdAndCpuTime threadIdAndCpuTime , Callable < T > callable ) 
 + { 
 + Future < T > future = executor ( ) . submit ( callable ) ; 
 
 try 
 { 
 @ @ - 445 , 6 + 515 , 8 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 
 protected abstract ByteBuffer executeUserDefined ( int protocolVersion , List < ByteBuffer > parameters ) ; 
 
 + protected abstract Object executeAggregateUserDefined ( int protocolVersion , Object firstParam , List < ByteBuffer > parameters ) ; 
 + 
 public boolean isAggregate ( ) 
 { 
 return false ; 
 diff - - git a / src / resources / org / apache / cassandra / cql3 / functions / JavaSourceUDF . txt b / src / resources / org / apache / cassandra / cql3 / functions / JavaSourceUDF . txt 
 index d736a5a . . 802081f 100644 
 - - - a / src / resources / org / apache / cassandra / cql3 / functions / JavaSourceUDF . txt 
 + + + b / src / resources / org / apache / cassandra / cql3 / functions / JavaSourceUDF . txt 
 @ @ - 25 , 6 + 25 , 14 @ @ public final class # class _ name # extends JavaUDF 
 return super . decompose ( protocolVersion , result ) ; 
 } 
 
 + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) 
 + { 
 + # return _ type # result = # execute _ internal _ name # ( 
 + # arguments _ aggregate # 
 + ) ; 
 + return result ; 
 + } 
 + 
 private # return _ type # # execute _ internal _ name # ( # argument _ list # ) 
 { 
 # body # 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallClone . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallClone . java 
 index e8bae70 . . 9efa83a 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallClone . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallClone . java 
 @ @ - 35 , 6 + 35 , 11 @ @ public final class CallClone extends JavaUDF 
 super ( returnDataType , argDataTypes , udfContext ) ; 
 } 
 
 + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) 
 { 
 try 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallComDatastax . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallComDatastax . java 
 index 1af5b01 . . 4555ff5 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallComDatastax . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallComDatastax . java 
 @ @ - 36 , 6 + 36 , 11 @ @ public final class CallComDatastax extends JavaUDF 
 super ( returnDataType , argDataTypes , udfContext ) ; 
 } 
 
 + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) 
 { 
 DataType . cint ( ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallFinalize . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallFinalize . java 
 index 5208849 . . b1ec15f 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallFinalize . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallFinalize . java 
 @ @ - 35 , 6 + 35 , 11 @ @ public final class CallFinalize extends JavaUDF 
 super ( returnDataType , argDataTypes , udfContext ) ; 
 } 
 
 + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) 
 { 
 try 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallOrgApache . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallOrgApache . java 
 index 758d0d0 . . 728e482 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallOrgApache . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallOrgApache . java 
 @ @ - 36 , 6 + 36 , 11 @ @ public final class CallOrgApache extends JavaUDF 
 super ( returnDataType , argDataTypes , udfContext ) ; 
 } 
 
 + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) 
 { 
 DatabaseDescriptor . getClusterName ( ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithField . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithField . java 
 index 256c2bd . . 4c38b44 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithField . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithField . java 
 @ @ - 35 , 6 + 35 , 11 @ @ public final class ClassWithField extends JavaUDF 
 super ( returnDataType , argDataTypes , udfContext ) ; 
 } 
 
 + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) 
 { 
 return null ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer . java 
 index 3366314 . . cc2738a 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer . java 
 @ @ - 35 , 6 + 35 , 11 @ @ public final class ClassWithInitializer extends JavaUDF 
 super ( returnDataType , argDataTypes , udfContext ) ; 
 } 
 
 + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) 
 { 
 return null ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer2 . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer2 . java 
 index aaf3e7b . . 780c0e4 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer2 . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer2 . java 
 @ @ - 35 , 6 + 35 , 11 @ @ public final class ClassWithInitializer2 extends JavaUDF 
 super ( returnDataType , argDataTypes , udfContext ) ; 
 } 
 
 + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) 
 { 
 return null ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer3 . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer3 . java 
 index 4895aa0 . . e163ec9 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer3 . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer3 . java 
 @ @ - 35 , 6 + 35 , 11 @ @ public final class ClassWithInitializer3 extends JavaUDF 
 super ( returnDataType , argDataTypes , udfContext ) ; 
 } 
 
 + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) 
 { 
 return null ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInnerClass . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInnerClass . java 
 index 2166771 . . 3c4dc9b 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInnerClass . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInnerClass . java 
 @ @ - 35 , 6 + 35 , 11 @ @ public final class ClassWithInnerClass extends JavaUDF 
 super ( returnDataType , argDataTypes , udfContext ) ; 
 } 
 
 + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) 
 { 
 return null ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInnerClass2 . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInnerClass2 . java 
 index 9c18510 . . b316040 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInnerClass2 . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInnerClass2 . java 
 @ @ - 35 , 6 + 35 , 11 @ @ public final class ClassWithInnerClass2 extends JavaUDF 
 super ( returnDataType , argDataTypes , udfContext ) ; 
 } 
 
 + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) 
 { 
 / / this is fine 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInitializer . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInitializer . java 
 index 3c958e8 . . c97a94a 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInitializer . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInitializer . java 
 @ @ - 35 , 6 + 35 , 11 @ @ public final class ClassWithStaticInitializer extends JavaUDF 
 super ( returnDataType , argDataTypes , udfContext ) ; 
 } 
 
 + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) 
 { 
 return null ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInnerClass . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInnerClass . java 
 index fada145 . . 1b019cc 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInnerClass . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInnerClass . java 
 @ @ - 35 , 6 + 35 , 11 @ @ public final class ClassWithStaticInnerClass extends JavaUDF 
 super ( returnDataType , argDataTypes , udfContext ) ; 
 } 
 
 + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) 
 { 
 return null ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / GoodClass . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / GoodClass . java 
 index eb25f72 . . 54821b9 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / GoodClass . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / GoodClass . java 
 @ @ - 35 , 6 + 35 , 11 @ @ public final class GoodClass extends JavaUDF 
 super ( returnDataType , argDataTypes , udfContext ) ; 
 } 
 
 + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) 
 { 
 return null ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronized . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronized . java 
 index bbbc823 . . dba846d 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronized . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronized . java 
 @ @ - 35 , 6 + 35 , 11 @ @ public final class UseOfSynchronized extends JavaUDF 
 super ( returnDataType , argDataTypes , udfContext ) ; 
 } 
 
 + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) 
 { 
 synchronized ( this ) 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotify . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotify . java 
 index 07c70c7 . . 63c319c 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotify . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotify . java 
 @ @ - 35 , 6 + 35 , 11 @ @ public final class UseOfSynchronizedWithNotify extends JavaUDF 
 super ( returnDataType , argDataTypes , udfContext ) ; 
 } 
 
 + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) 
 { 
 synchronized ( this ) 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotifyAll . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotifyAll . java 
 index 529c995 . . 4d0c2a0 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotifyAll . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotifyAll . java 
 @ @ - 35 , 6 + 35 , 11 @ @ public final class UseOfSynchronizedWithNotifyAll extends JavaUDF 
 super ( returnDataType , argDataTypes , udfContext ) ; 
 } 
 
 + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) 
 { 
 synchronized ( this ) 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWait . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWait . java 
 index 6e39813 . . b002086 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWait . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWait . java 
 @ @ - 35 , 6 + 35 , 11 @ @ public final class UseOfSynchronizedWithWait extends JavaUDF 
 super ( returnDataType , argDataTypes , udfContext ) ; 
 } 
 
 + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) 
 { 
 synchronized ( this ) 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitL . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitL . java 
 index ac29211 . . f128fac 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitL . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitL . java 
 @ @ - 35 , 6 + 35 , 11 @ @ public final class UseOfSynchronizedWithWaitL extends JavaUDF 
 super ( returnDataType , argDataTypes , udfContext ) ; 
 } 
 
 + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) 
 { 
 synchronized ( this ) 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitLI . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitLI . java 
 index 3b9ce8b . . d439518 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitLI . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitLI . java 
 @ @ - 35 , 6 + 35 , 11 @ @ public final class UseOfSynchronizedWithWaitLI extends JavaUDF 
 super ( returnDataType , argDataTypes , udfContext ) ; 
 } 
 
 + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) 
 { 
 synchronized ( this ) 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UsingMapEntry . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UsingMapEntry . java 
 index 5091dc1 . . b99dbfd 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UsingMapEntry . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UsingMapEntry . java 
 @ @ - 37 , 6 + 37 , 11 @ @ public final class UsingMapEntry extends JavaUDF 
 super ( returnDataType , argDataTypes , udfContext ) ; 
 } 
 
 + protected Object executeAggregateImpl ( int protocolVersion , Object firstParam , List < ByteBuffer > params ) 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) 
 { 
 Map < String , String > map = new HashMap < > ( ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 index 24a9528 . . 506d533 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 @ @ - 18 , 7 + 18 , 6 @ @ 
 package org . apache . cassandra . cql3 . validation . operations ; 
 
 import java . math . BigDecimal ; 
 - import java . math . MathContext ; 
 import java . math . RoundingMode ; 
 import java . nio . ByteBuffer ; 
 import java . text . SimpleDateFormat ; 
 @ @ - 40 , 6 + 39 , 8 @ @ import ch . qos . logback . classic . LoggerContext ; 
 import ch . qos . logback . classic . spi . TurboFilterList ; 
 import ch . qos . logback . classic . turbo . ReconfigureOnChangeFilter ; 
 import ch . qos . logback . classic . turbo . TurboFilter ; 
 + import com . datastax . driver . core . Session ; 
 + import com . datastax . driver . core . TupleValue ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . cql3 . CQLTester ; 
 import org . apache . cassandra . cql3 . QueryProcessor ; 
 @ @ - 48 , 7 + 49 , 6 @ @ import org . apache . cassandra . cql3 . UntypedResultSet . Row ; 
 import org . apache . cassandra . cql3 . functions . UDAggregate ; 
 import org . apache . cassandra . db . SystemKeyspace ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 - import org . apache . cassandra . db . marshal . DynamicCompositeType ; 
 import org . apache . cassandra . db . marshal . TypeParser ; 
 import org . apache . cassandra . exceptions . FunctionExecutionException ; 
 import org . apache . cassandra . exceptions . InvalidRequestException ; 
 @ @ - 1883 , 6 + 1883 , 7 @ @ public class AggregationTest extends CQLTester 
 row ( finalFunc , initCond ) ) ; 
 } 
 
 + @ Test 
 public void testCustomTypeInitcond ( ) throws Throwable 
 { 
 try 
 @ @ - 1966 , 4 + 1967 , 58 @ @ public class AggregationTest extends CQLTester 
 assertRows ( execute ( " select avg ( val ) from % s where bucket in ( 1 , 2 , 3 ) ; " ) , 
 row ( a ) ) ; 
 } 
 + 
 + @ Test 
 + public void testSameStateInstance ( ) throws Throwable 
 + { 
 + / / CASSANDRA - 9613 removes the neccessity to re - serialize the state variable for each 
 + / / UDA state function and final function call . 
 + / / 
 + / / To test that the same state object instance is used during each invocation of the 
 + / / state and final function , this test uses a trick : 
 + / / it puts the identity hash code of the state variable to a tuple . The test then 
 + / / just asserts that the identity hash code is the same for all invocations 
 + / / of the state function and the final function . 
 + 
 + String sf = createFunction ( KEYSPACE , 
 + " tuple < int , int , int , int > , int " , 
 + " CREATE FUNCTION % s ( s tuple < int , int , int , int > , i int ) " + 
 + " CALLED ON NULL INPUT " + 
 + " RETURNS tuple < int , int , int , int > " + 
 + " LANGUAGE java " + 
 + " AS ' s . setInt ( i , System . identityHashCode ( s ) ) ; return s ; ' " ) ; 
 + 
 + String ff = createFunction ( KEYSPACE , 
 + " tuple < int , int , int , int > " , 
 + " CREATE FUNCTION % s ( s tuple < int , int , int , int > ) " + 
 + " CALLED ON NULL INPUT " + 
 + " RETURNS tuple < int , int , int , int > " + 
 + " LANGUAGE java " + 
 + " AS ' s . setInt ( 3 , System . identityHashCode ( s ) ) ; return s ; ' " ) ; 
 + 
 + String a = createAggregate ( KEYSPACE , 
 + " int " , 
 + " CREATE AGGREGATE % s ( int ) " + 
 + " SFUNC " + shortFunctionName ( sf ) + ' ' + 
 + " STYPE tuple < int , int , int , int > " + 
 + " FINALFUNC " + shortFunctionName ( ff ) + ' ' + 
 + " INITCOND ( 0 , 1 , 2 ) " ) ; 
 + 
 + createTable ( " CREATE TABLE % s ( a int primary key , b int ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b ) VALUES ( 0 , 0 ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b ) VALUES ( 1 , 1 ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b ) VALUES ( 2 , 2 ) " ) ; 
 + try ( Session s = sessionNet ( ) ) 
 + { 
 + com . datastax . driver . core . Row row = s . execute ( " SELECT " + a + " ( b ) FROM " + KEYSPACE + ' . ' + currentTable ( ) ) . one ( ) ; 
 + TupleValue tuple = row . getTupleValue ( 0 ) ; 
 + int h0 = tuple . getInt ( 0 ) ; 
 + int h1 = tuple . getInt ( 1 ) ; 
 + int h2 = tuple . getInt ( 2 ) ; 
 + int h3 = tuple . getInt ( 3 ) ; 
 + assertEquals ( h0 , h1 ) ; 
 + assertEquals ( h0 , h2 ) ; 
 + assertEquals ( h0 , h3 ) ; 
 + } 
 + } 
 }

NEAREST DIFF:
diff - - git a / lib / licenses / guava - r05 . txt b / lib / licenses / guava - r05 . txt 
 deleted file mode 100644 
 index d645695 . . 0000000 
 - - - a / lib / licenses / guava - r05 . txt 
 + + + / dev / null 
 @ @ - 1 , 202 + 0 , 0 @ @ 
 - 
 - Apache License 
 - Version 2 . 0 , January 2004 
 - http : / / www . apache . org / licenses / 
 - 
 - TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION 
 - 
 - 1 . Definitions . 
 - 
 - " License " shall mean the terms and conditions for use , reproduction , 
 - and distribution as defined by Sections 1 through 9 of this document . 
 - 
 - " Licensor " shall mean the copyright owner or entity authorized by 
 - the copyright owner that is granting the License . 
 - 
 - " Legal Entity " shall mean the union of the acting entity and all 
 - other entities that control , are controlled by , or are under common 
 - control with that entity . For the purposes of this definition , 
 - " control " means ( i ) the power , direct or indirect , to cause the 
 - direction or management of such entity , whether by contract or 
 - otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the 
 - outstanding shares , or ( iii ) beneficial ownership of such entity . 
 - 
 - " You " ( or " Your " ) shall mean an individual or Legal Entity 
 - exercising permissions granted by this License . 
 - 
 - " Source " form shall mean the preferred form for making modifications , 
 - including but not limited to software source code , documentation 
 - source , and configuration files . 
 - 
 - " Object " form shall mean any form resulting from mechanical 
 - transformation or translation of a Source form , including but 
 - not limited to compiled object code , generated documentation , 
 - and conversions to other media types . 
 - 
 - " Work " shall mean the work of authorship , whether in Source or 
 - Object form , made available under the License , as indicated by a 
 - copyright notice that is included in or attached to the work 
 - ( an example is provided in the Appendix below ) . 
 - 
 - " Derivative Works " shall mean any work , whether in Source or Object 
 - form , that is based on ( or derived from ) the Work and for which the 
 - editorial revisions , annotations , elaborations , or other modifications 
 - represent , as a whole , an original work of authorship . For the purposes 
 - of this License , Derivative Works shall not include works that remain 
 - separable from , or merely link ( or bind by name ) to the interfaces of , 
 - the Work and Derivative Works thereof . 
 - 
 - " Contribution " shall mean any work of authorship , including 
 - the original version of the Work and any modifications or additions 
 - to that Work or Derivative Works thereof , that is intentionally 
 - submitted to Licensor for inclusion in the Work by the copyright owner 
 - or by an individual or Legal Entity authorized to submit on behalf of 
 - the copyright owner . For the purposes of this definition , " submitted " 
 - means any form of electronic , verbal , or written communication sent 
 - to the Licensor or its representatives , including but not limited to 
 - communication on electronic mailing lists , source code control systems , 
 - and issue tracking systems that are managed by , or on behalf of , the 
 - Licensor for the purpose of discussing and improving the Work , but 
 - excluding communication that is conspicuously marked or otherwise 
 - designated in writing by the copyright owner as " Not a Contribution . " 
 - 
 - " Contributor " shall mean Licensor and any individual or Legal Entity 
 - on behalf of whom a Contribution has been received by Licensor and 
 - subsequently incorporated within the Work . 
 - 
 - 2 . Grant of Copyright License . Subject to the terms and conditions of 
 - this License , each Contributor hereby grants to You a perpetual , 
 - worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 - copyright license to reproduce , prepare Derivative Works of , 
 - publicly display , publicly perform , sublicense , and distribute the 
 - Work and such Derivative Works in Source or Object form . 
 - 
 - 3 . Grant of Patent License . Subject to the terms and conditions of 
 - this License , each Contributor hereby grants to You a perpetual , 
 - worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 - ( except as stated in this section ) patent license to make , have made , 
 - use , offer to sell , sell , import , and otherwise transfer the Work , 
 - where such license applies only to those patent claims licensable 
 - by such Contributor that are necessarily infringed by their 
 - Contribution ( s ) alone or by combination of their Contribution ( s ) 
 - with the Work to which such Contribution ( s ) was submitted . If You 
 - institute patent litigation against any entity ( including a 
 - cross - claim or counterclaim in a lawsuit ) alleging that the Work 
 - or a Contribution incorporated within the Work constitutes direct 
 - or contributory patent infringement , then any patent licenses 
 - granted to You under this License for that Work shall terminate 
 - as of the date such litigation is filed . 
 - 
 - 4 . Redistribution . You may reproduce and distribute copies of the 
 - Work or Derivative Works thereof in any medium , with or without 
 - modifications , and in Source or Object form , provided that You 
 - meet the following conditions : 
 - 
 - ( a ) You must give any other recipients of the Work or 
 - Derivative Works a copy of this License ; and 
 - 
 - ( b ) You must cause any modified files to carry prominent notices 
 - stating that You changed the files ; and 
 - 
 - ( c ) You must retain , in the Source form of any Derivative Works 
 - that You distribute , all copyright , patent , trademark , and 
 - attribution notices from the Source form of the Work , 
 - excluding those notices that do not pertain to any part of 
 - the Derivative Works ; and 
 - 
 - ( d ) If the Work includes a " NOTICE " text file as part of its 
 - distribution , then any Derivative Works that You distribute must 
 - include a readable copy of the attribution notices contained 
 - within such NOTICE file , excluding those notices that do not 
 - pertain to any part of the Derivative Works , in at least one 
 - of the following places : within a NOTICE text file distributed 
 - as part of the Derivative Works ; within the Source form or 
 - documentation , if provided along with the Derivative Works ; or , 
 - within a display generated by the Derivative Works , if and 
 - wherever such third - party notices normally appear . The contents 
 - of the NOTICE file are for informational purposes only and 
 - do not modify the License . You may add Your own attribution 
 - notices within Derivative Works that You distribute , alongside 
 - or as an addendum to the NOTICE text from the Work , provided 
 - that such additional attribution notices cannot be construed 
 - as modifying the License . 
 - 
 - You may add Your own copyright statement to Your modifications and 
 - may provide additional or different license terms and conditions 
 - for use , reproduction , or distribution of Your modifications , or 
 - for any such Derivative Works as a whole , provided Your use , 
 - reproduction , and distribution of the Work otherwise complies with 
 - the conditions stated in this License . 
 - 
 - 5 . Submission of Contributions . Unless You explicitly state otherwise , 
 - any Contribution intentionally submitted for inclusion in the Work 
 - by You to the Licensor shall be under the terms and conditions of 
 - this License , without any additional terms or conditions . 
 - Notwithstanding the above , nothing herein shall supersede or modify 
 - the terms of any separate license agreement you may have executed 
 - with Licensor regarding such Contributions . 
 - 
 - 6 . Trademarks . This License does not grant permission to use the trade 
 - names , trademarks , service marks , or product names of the Licensor , 
 - except as required for reasonable and customary use in describing the 
 - origin of the Work and reproducing the content of the NOTICE file . 
 - 
 - 7 . Disclaimer of Warranty . Unless required by applicable law or 
 - agreed to in writing , Licensor provides the Work ( and each 
 - Contributor provides its Contributions ) on an " AS IS " BASIS , 
 - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or 
 - implied , including , without limitation , any warranties or conditions 
 - of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A 
 - PARTICULAR PURPOSE . You are solely responsible for determining the 
 - appropriateness of using or redistributing the Work and assume any 
 - risks associated with Your exercise of permissions under this License . 
 - 
 - 8 . Limitation of Liability . In no event and under no legal theory , 
 - whether in tort ( including negligence ) , contract , or otherwise , 
 - unless required by applicable law ( such as deliberate and grossly 
 - negligent acts ) or agreed to in writing , shall any Contributor be 
 - liable to You for damages , including any direct , indirect , special , 
 - incidental , or consequential damages of any character arising as a 
 - result of this License or out of the use or inability to use the 
 - Work ( including but not limited to damages for loss of goodwill , 
 - work stoppage , computer failure or malfunction , or any and all 
 - other commercial damages or losses ) , even if such Contributor 
 - has been advised of the possibility of such damages . 
 - 
 - 9 . Accepting Warranty or Additional Liability . While redistributing 
 - the Work or Derivative Works thereof , You may choose to offer , 
 - and charge a fee for , acceptance of support , warranty , indemnity , 
 - or other liability obligations and / or rights consistent with this 
 - License . However , in accepting such obligations , You may act only 
 - on Your own behalf and on Your sole responsibility , not on behalf 
 - of any other Contributor , and only if You agree to indemnify , 
 - defend , and hold each Contributor harmless for any liability 
 - incurred by , or claims asserted against , such Contributor by reason 
 - of your accepting any such warranty or additional liability . 
 - 
 - END OF TERMS AND CONDITIONS 
 - 
 - APPENDIX : How to apply the Apache License to your work . 
 - 
 - To apply the Apache License to your work , attach the following 
 - boilerplate notice , with the fields enclosed by brackets " [ ] " 
 - replaced with your own identifying information . ( Don ' t include 
 - the brackets ! ) The text should be enclosed in the appropriate 
 - comment syntax for the file format . We also recommend that a 
 - file or class name and description of purpose be included on the 
 - same " printed page " as the copyright notice for easier 
 - identification within third - party archives . 
 - 
 - Copyright [ yyyy ] [ name of copyright owner ] 
 - 
 - Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - you may not use this file except in compliance with the License . 
 - You may obtain a copy of the License at 
 - 
 - http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - 
 - Unless required by applicable law or agreed to in writing , software 
 - distributed under the License is distributed on an " AS IS " BASIS , 
 - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - See the License for the specific language governing permissions and 
 - limitations under the License . 
 diff - - git a / lib / licenses / guava - r08 . txt b / lib / licenses / guava - r08 . txt 
 new file mode 100644 
 index 0000000 . . d645695 
 - - - / dev / null 
 + + + b / lib / licenses / guava - r08 . txt 
 @ @ - 0 , 0 + 1 , 202 @ @ 
 + 
 + Apache License 
 + Version 2 . 0 , January 2004 
 + http : / / www . apache . org / licenses / 
 + 
 + TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION 
 + 
 + 1 . Definitions . 
 + 
 + " License " shall mean the terms and conditions for use , reproduction , 
 + and distribution as defined by Sections 1 through 9 of this document . 
 + 
 + " Licensor " shall mean the copyright owner or entity authorized by 
 + the copyright owner that is granting the License . 
 + 
 + " Legal Entity " shall mean the union of the acting entity and all 
 + other entities that control , are controlled by , or are under common 
 + control with that entity . For the purposes of this definition , 
 + " control " means ( i ) the power , direct or indirect , to cause the 
 + direction or management of such entity , whether by contract or 
 + otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the 
 + outstanding shares , or ( iii ) beneficial ownership of such entity . 
 + 
 + " You " ( or " Your " ) shall mean an individual or Legal Entity 
 + exercising permissions granted by this License . 
 + 
 + " Source " form shall mean the preferred form for making modifications , 
 + including but not limited to software source code , documentation 
 + source , and configuration files . 
 + 
 + " Object " form shall mean any form resulting from mechanical 
 + transformation or translation of a Source form , including but 
 + not limited to compiled object code , generated documentation , 
 + and conversions to other media types . 
 + 
 + " Work " shall mean the work of authorship , whether in Source or 
 + Object form , made available under the License , as indicated by a 
 + copyright notice that is included in or attached to the work 
 + ( an example is provided in the Appendix below ) . 
 + 
 + " Derivative Works " shall mean any work , whether in Source or Object 
 + form , that is based on ( or derived from ) the Work and for which the 
 + editorial revisions , annotations , elaborations , or other modifications 
 + represent , as a whole , an original work of authorship . For the purposes 
 + of this License , Derivative Works shall not include works that remain 
 + separable from , or merely link ( or bind by name ) to the interfaces of , 
 + the Work and Derivative Works thereof . 
 + 
 + " Contribution " shall mean any work of authorship , including 
 + the original version of the Work and any modifications or additions 
 + to that Work or Derivative Works thereof , that is intentionally 
 + submitted to Licensor for inclusion in the Work by the copyright owner 
 + or by an individual or Legal Entity authorized to submit on behalf of 
 + the copyright owner . For the purposes of this definition , " submitted " 
 + means any form of electronic , verbal , or written communication sent 
 + to the Licensor or its representatives , including but not limited to 
 + communication on electronic mailing lists , source code control systems , 
 + and issue tracking systems that are managed by , or on behalf of , the 
 + Licensor for the purpose of discussing and improving the Work , but 
 + excluding communication that is conspicuously marked or otherwise 
 + designated in writing by the copyright owner as " Not a Contribution . " 
 + 
 + " Contributor " shall mean Licensor and any individual or Legal Entity 
 + on behalf of whom a Contribution has been received by Licensor and 
 + subsequently incorporated within the Work . 
 + 
 + 2 . Grant of Copyright License . Subject to the terms and conditions of 
 + this License , each Contributor hereby grants to You a perpetual , 
 + worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 + copyright license to reproduce , prepare Derivative Works of , 
 + publicly display , publicly perform , sublicense , and distribute the 
 + Work and such Derivative Works in Source or Object form . 
 + 
 + 3 . Grant of Patent License . Subject to the terms and conditions of 
 + this License , each Contributor hereby grants to You a perpetual , 
 + worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 + ( except as stated in this section ) patent license to make , have made , 
 + use , offer to sell , sell , import , and otherwise transfer the Work , 
 + where such license applies only to those patent claims licensable 
 + by such Contributor that are necessarily infringed by their 
 + Contribution ( s ) alone or by combination of their Contribution ( s ) 
 + with the Work to which such Contribution ( s ) was submitted . If You 
 + institute patent litigation against any entity ( including a 
 + cross - claim or counterclaim in a lawsuit ) alleging that the Work 
 + or a Contribution incorporated within the Work constitutes direct 
 + or contributory patent infringement , then any patent licenses 
 + granted to You under this License for that Work shall terminate 
 + as of the date such litigation is filed . 
 + 
 + 4 . Redistribution . You may reproduce and distribute copies of the 
 + Work or Derivative Works thereof in any medium , with or without 
 + modifications , and in Source or Object form , provided that You 
 + meet the following conditions : 
 + 
 + ( a ) You must give any other recipients of the Work or 
 + Derivative Works a copy of this License ; and 
 + 
 + ( b ) You must cause any modified files to carry prominent notices 
 + stating that You changed the files ; and 
 + 
 + ( c ) You must retain , in the Source form of any Derivative Works 
 + that You distribute , all copyright , patent , trademark , and 
 + attribution notices from the Source form of the Work , 
 + excluding those notices that do not pertain to any part of 
 + the Derivative Works ; and 
 + 
 + ( d ) If the Work includes a " NOTICE " text file as part of its 
 + distribution , then any Derivative Works that You distribute must 
 + include a readable copy of the attribution notices contained 
 + within such NOTICE file , excluding those notices that do not 
 + pertain to any part of the Derivative Works , in at least one 
 + of the following places : within a NOTICE text file distributed 
 + as part of the Derivative Works ; within the Source form or 
 + documentation , if provided along with the Derivative Works ; or , 
 + within a display generated by the Derivative Works , if and 
 + wherever such third - party notices normally appear . The contents 
 + of the NOTICE file are for informational purposes only and 
 + do not modify the License . You may add Your own attribution 
 + notices within Derivative Works that You distribute , alongside 
 + or as an addendum to the NOTICE text from the Work , provided 
 + that such additional attribution notices cannot be construed 
 + as modifying the License . 
 + 
 + You may add Your own copyright statement to Your modifications and 
 + may provide additional or different license terms and conditions 
 + for use , reproduction , or distribution of Your modifications , or 
 + for any such Derivative Works as a whole , provided Your use , 
 + reproduction , and distribution of the Work otherwise complies with 
 + the conditions stated in this License . 
 + 
 + 5 . Submission of Contributions . Unless You explicitly state otherwise , 
 + any Contribution intentionally submitted for inclusion in the Work 
 + by You to the Licensor shall be under the terms and conditions of 
 + this License , without any additional terms or conditions . 
 + Notwithstanding the above , nothing herein shall supersede or modify 
 + the terms of any separate license agreement you may have executed 
 + with Licensor regarding such Contributions . 
 + 
 + 6 . Trademarks . This License does not grant permission to use the trade 
 + names , trademarks , service marks , or product names of the Licensor , 
 + except as required for reasonable and customary use in describing the 
 + origin of the Work and reproducing the content of the NOTICE file . 
 + 
 + 7 . Disclaimer of Warranty . Unless required by applicable law or 
 + agreed to in writing , Licensor provides the Work ( and each 
 + Contributor provides its Contributions ) on an " AS IS " BASIS , 
 + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or 
 + implied , including , without limitation , any warranties or conditions 
 + of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A 
 + PARTICULAR PURPOSE . You are solely responsible for determining the 
 + appropriateness of using or redistributing the Work and assume any 
 + risks associated with Your exercise of permissions under this License . 
 + 
 + 8 . Limitation of Liability . In no event and under no legal theory , 
 + whether in tort ( including negligence ) , contract , or otherwise , 
 + unless required by applicable law ( such as deliberate and grossly 
 + negligent acts ) or agreed to in writing , shall any Contributor be 
 + liable to You for damages , including any direct , indirect , special , 
 + incidental , or consequential damages of any character arising as a 
 + result of this License or out of the use or inability to use the 
 + Work ( including but not limited to damages for loss of goodwill , 
 + work stoppage , computer failure or malfunction , or any and all 
 + other commercial damages or losses ) , even if such Contributor 
 + has been advised of the possibility of such damages . 
 + 
 + 9 . Accepting Warranty or Additional Liability . While redistributing 
 + the Work or Derivative Works thereof , You may choose to offer , 
 + and charge a fee for , acceptance of support , warranty , indemnity , 
 + or other liability obligations and / or rights consistent with this 
 + License . However , in accepting such obligations , You may act only 
 + on Your own behalf and on Your sole responsibility , not on behalf 
 + of any other Contributor , and only if You agree to indemnify , 
 + defend , and hold each Contributor harmless for any liability 
 + incurred by , or claims asserted against , such Contributor by reason 
 + of your accepting any such warranty or additional liability . 
 + 
 + END OF TERMS AND CONDITIONS 
 + 
 + APPENDIX : How to apply the Apache License to your work . 
 + 
 + To apply the Apache License to your work , attach the following 
 + boilerplate notice , with the fields enclosed by brackets " [ ] " 
 + replaced with your own identifying information . ( Don ' t include 
 + the brackets ! ) The text should be enclosed in the appropriate 
 + comment syntax for the file format . We also recommend that a 
 + file or class name and description of purpose be included on the 
 + same " printed page " as the copyright notice for easier 
 + identification within third - party archives . 
 + 
 + Copyright [ yyyy ] [ name of copyright owner ] 
 + 
 + Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + you may not use this file except in compliance with the License . 
 + You may obtain a copy of the License at 
 + 
 + http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + 
 + Unless required by applicable law or agreed to in writing , software 
 + distributed under the License is distributed on an " AS IS " BASIS , 
 + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + See the License for the specific language governing permissions and 
 + limitations under the License .
