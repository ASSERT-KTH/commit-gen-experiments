BLEU SCORE: 0.034585921141027376

TEST MSG: Backport CASSANDRA - 6767 to 2 . 0 : Display min timestamp in sstablemetadata viewer
GENERATED MSG: add back droppable tombstones metadata to 1 . 2

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index a235528 . . b5b2f32 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 3 + 1 , 7 @ @ <nl> + 2 . 0 . 17 <nl> + * Display min timestamp in sstablemetadata viewer ( CASSANDRA - 6767 ) <nl> + <nl> + <nl> 2 . 0 . 16 : <nl> * Expose some internals of SelectStatement for inspection ( CASSANDRA - 9532 ) <nl> * ArrivalWindow should use primitives ( CASSANDRA - 9496 ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java <nl> index 64720b5 . . 9664e9e 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java <nl> + + + b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java <nl> @ @ - 51 , 6 + 51 , 7 @ @ public class SSTableMetadataViewer <nl> <nl> out . printf ( " SSTable : % s % n " , descriptor ) ; <nl> out . printf ( " Partitioner : % s % n " , metadata . partitioner ) ; <nl> + out . printf ( " Minimum timestamp : % s % n " , metadata . minTimestamp ) ; <nl> out . printf ( " Maximum timestamp : % s % n " , metadata . maxTimestamp ) ; <nl> out . printf ( " SSTable max local deletion time : % s % n " , metadata . maxLocalDeletionTime ) ; <nl> out . printf ( " Compression ratio : % s % n " , metadata . compressionRatio ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java b / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java <nl> index eab1548 . . d319037 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java <nl> @ @ - 70 , 7 + 70 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> <nl> while ( bb1 . remaining ( ) > 0 & & bb2 . remaining ( ) > 0 ) <nl> { <nl> - AbstractType < ? > comparator = getNextComparator ( i , bb1 , bb2 ) ; <nl> + AbstractType < ? > comparator = getComparator ( i , bb1 , bb2 ) ; <nl> <nl> ByteBuffer value1 = getWithShortLength ( bb1 ) ; <nl> ByteBuffer value2 = getWithShortLength ( bb2 ) ; <nl> @ @ - 117 , 7 + 117 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> int i = 0 ; <nl> while ( bb . remaining ( ) > 0 ) <nl> { <nl> - getNextComparator ( i + + , bb ) ; <nl> + getComparator ( i + + , bb ) ; <nl> l . add ( getWithShortLength ( bb ) ) ; <nl> bb . get ( ) ; / / skip end - of - component <nl> } <nl> @ @ - 135 , 7 + 135 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> if ( bb . remaining ( ) ! = bytes . remaining ( ) ) <nl> sb . append ( " : " ) ; <nl> <nl> - AbstractType < ? > comparator = getAndAppendNextComparator ( i , bb , sb ) ; <nl> + AbstractType < ? > comparator = getAndAppendComparator ( i , bb , sb ) ; <nl> ByteBuffer value = getWithShortLength ( bb ) ; <nl> <nl> sb . append ( comparator . getString ( value ) ) ; <nl> @ @ - 172 , 7 + 172 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> <nl> while ( bb . remaining ( ) > 0 ) <nl> { <nl> - AbstractType comparator = getNextComparator ( i , bb ) ; <nl> + AbstractType comparator = getComparator ( i , bb ) ; <nl> ByteBuffer value = getWithShortLength ( bb ) ; <nl> <nl> list . add ( new CompositeComponent ( comparator , value ) ) ; <nl> @ @ - 205 , 7 + 205 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> break ; <nl> } <nl> <nl> - ParsedComparator p = parseNextComparator ( i , part ) ; <nl> + ParsedComparator p = parseComparator ( i , part ) ; <nl> AbstractType < ? > type = p . getAbstractType ( ) ; <nl> part = p . getRemainingPart ( ) ; <nl> <nl> @ @ - 240 , 7 + 240 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> int i = 0 ; <nl> while ( bb . remaining ( ) > 0 ) <nl> { <nl> - AbstractType < ? > comparator = validateNextComparator ( i , bb ) ; <nl> + AbstractType < ? > comparator = validateComparator ( i , bb ) ; <nl> <nl> if ( bb . remaining ( ) < 2 ) <nl> throw new MarshalException ( " Not enough bytes to read value size of component " + i ) ; <nl> @ @ - 271 , 11 + 271 , 32 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> return value ; <nl> } <nl> <nl> - abstract protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb ) ; <nl> - abstract protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) ; <nl> - abstract protected AbstractType < ? > getAndAppendNextComparator ( int i , ByteBuffer bb , StringBuilder sb ) ; <nl> - abstract protected ParsedComparator parseNextComparator ( int i , String part ) ; <nl> - abstract protected AbstractType < ? > validateNextComparator ( int i , ByteBuffer bb ) throws MarshalException ; <nl> + / * * <nl> + * @ return the comparator for the given component . static CompositeType will consult <nl> + * @ param i ; DynamicCompositeType will read the type information from @ param bb <nl> + * / <nl> + abstract protected AbstractType < ? > getComparator ( int i , ByteBuffer bb ) ; <nl> + <nl> + / * * <nl> + * Adds DynamicCompositeType type information from @ param bb1 to @ param bb2 . <nl> + * @ param i is ignored . <nl> + * / <nl> + abstract protected AbstractType < ? > getComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) ; <nl> + <nl> + / * * <nl> + * Adds type information from @ param bb to @ param sb . @ param i is ignored . <nl> + * / <nl> + abstract protected AbstractType < ? > getAndAppendComparator ( int i , ByteBuffer bb , StringBuilder sb ) ; <nl> + <nl> + / * * <nl> + * Like getComparator , but validates that @ param i does not exceed the defined range <nl> + * / <nl> + abstract protected AbstractType < ? > validateComparator ( int i , ByteBuffer bb ) throws MarshalException ; <nl> + <nl> + / * * <nl> + * Used by fromString <nl> + * / <nl> + abstract protected ParsedComparator parseComparator ( int i , String part ) ; <nl> <nl> protected static interface ParsedComparator <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / CompositeType . java b / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> index 2e32725 . . 1b59ae9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> @ @ - 80 , 27 + 80 , 27 @ @ public class CompositeType extends AbstractCompositeType <nl> this . types = types ; <nl> } <nl> <nl> - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb ) <nl> + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb ) <nl> { <nl> return types . get ( i ) ; <nl> } <nl> <nl> - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) <nl> + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) <nl> { <nl> return types . get ( i ) ; <nl> } <nl> <nl> - protected AbstractType < ? > getAndAppendNextComparator ( int i , ByteBuffer bb , StringBuilder sb ) <nl> + protected AbstractType < ? > getAndAppendComparator ( int i , ByteBuffer bb , StringBuilder sb ) <nl> { <nl> return types . get ( i ) ; <nl> } <nl> <nl> - protected ParsedComparator parseNextComparator ( int i , String part ) <nl> + protected ParsedComparator parseComparator ( int i , String part ) <nl> { <nl> return new StaticParsedComparator ( types . get ( i ) , part ) ; <nl> } <nl> <nl> - protected AbstractType < ? > validateNextComparator ( int i , ByteBuffer bb ) throws MarshalException <nl> + protected AbstractType < ? > validateComparator ( int i , ByteBuffer bb ) throws MarshalException <nl> { <nl> if ( i > = types . size ( ) ) <nl> throw new MarshalException ( " Too many bytes for comparator " ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> index 89116f2 . . e3f4839 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> @ @ - 102 , 12 + 102 , 12 @ @ public class DynamicCompositeType extends AbstractCompositeType <nl> } <nl> } <nl> <nl> - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb ) <nl> + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb ) <nl> { <nl> return getComparator ( bb ) ; <nl> } <nl> <nl> - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) <nl> + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) <nl> { <nl> AbstractType < ? > comp1 = getComparator ( bb1 ) ; <nl> AbstractType < ? > comp2 = getComparator ( bb2 ) ; <nl> @ @ - 135 , 7 + 135 , 7 @ @ public class DynamicCompositeType extends AbstractCompositeType <nl> return comp1 ; <nl> } <nl> <nl> - protected AbstractType < ? > getAndAppendNextComparator ( int i , ByteBuffer bb , StringBuilder sb ) <nl> + protected AbstractType < ? > getAndAppendComparator ( int i , ByteBuffer bb , StringBuilder sb ) <nl> { <nl> try <nl> { <nl> @ @ - 162 , 12 + 162 , 12 @ @ public class DynamicCompositeType extends AbstractCompositeType <nl> } <nl> } <nl> <nl> - protected ParsedComparator parseNextComparator ( int i , String part ) <nl> + protected ParsedComparator parseComparator ( int i , String part ) <nl> { <nl> return new DynamicParsedComparator ( part ) ; <nl> } <nl> <nl> - protected AbstractType < ? > validateNextComparator ( int i , ByteBuffer bb ) throws MarshalException <nl> + protected AbstractType < ? > validateComparator ( int i , ByteBuffer bb ) throws MarshalException <nl> { <nl> AbstractType < ? > comparator = null ; <nl> if ( bb . remaining ( ) < 2 )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index a235528 . . b5b2f32 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 3 + 1 , 7 @ @ 
 + 2 . 0 . 17 
 + * Display min timestamp in sstablemetadata viewer ( CASSANDRA - 6767 ) 
 + 
 + 
 2 . 0 . 16 : 
 * Expose some internals of SelectStatement for inspection ( CASSANDRA - 9532 ) 
 * ArrivalWindow should use primitives ( CASSANDRA - 9496 ) 
 diff - - git a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java 
 index 64720b5 . . 9664e9e 100644 
 - - - a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java 
 + + + b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java 
 @ @ - 51 , 6 + 51 , 7 @ @ public class SSTableMetadataViewer 
 
 out . printf ( " SSTable : % s % n " , descriptor ) ; 
 out . printf ( " Partitioner : % s % n " , metadata . partitioner ) ; 
 + out . printf ( " Minimum timestamp : % s % n " , metadata . minTimestamp ) ; 
 out . printf ( " Maximum timestamp : % s % n " , metadata . maxTimestamp ) ; 
 out . printf ( " SSTable max local deletion time : % s % n " , metadata . maxLocalDeletionTime ) ; 
 out . printf ( " Compression ratio : % s % n " , metadata . compressionRatio ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java b / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java 
 index eab1548 . . d319037 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java 
 @ @ - 70 , 7 + 70 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 
 while ( bb1 . remaining ( ) > 0 & & bb2 . remaining ( ) > 0 ) 
 { 
 - AbstractType < ? > comparator = getNextComparator ( i , bb1 , bb2 ) ; 
 + AbstractType < ? > comparator = getComparator ( i , bb1 , bb2 ) ; 
 
 ByteBuffer value1 = getWithShortLength ( bb1 ) ; 
 ByteBuffer value2 = getWithShortLength ( bb2 ) ; 
 @ @ - 117 , 7 + 117 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 int i = 0 ; 
 while ( bb . remaining ( ) > 0 ) 
 { 
 - getNextComparator ( i + + , bb ) ; 
 + getComparator ( i + + , bb ) ; 
 l . add ( getWithShortLength ( bb ) ) ; 
 bb . get ( ) ; / / skip end - of - component 
 } 
 @ @ - 135 , 7 + 135 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 if ( bb . remaining ( ) ! = bytes . remaining ( ) ) 
 sb . append ( " : " ) ; 
 
 - AbstractType < ? > comparator = getAndAppendNextComparator ( i , bb , sb ) ; 
 + AbstractType < ? > comparator = getAndAppendComparator ( i , bb , sb ) ; 
 ByteBuffer value = getWithShortLength ( bb ) ; 
 
 sb . append ( comparator . getString ( value ) ) ; 
 @ @ - 172 , 7 + 172 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 
 while ( bb . remaining ( ) > 0 ) 
 { 
 - AbstractType comparator = getNextComparator ( i , bb ) ; 
 + AbstractType comparator = getComparator ( i , bb ) ; 
 ByteBuffer value = getWithShortLength ( bb ) ; 
 
 list . add ( new CompositeComponent ( comparator , value ) ) ; 
 @ @ - 205 , 7 + 205 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 break ; 
 } 
 
 - ParsedComparator p = parseNextComparator ( i , part ) ; 
 + ParsedComparator p = parseComparator ( i , part ) ; 
 AbstractType < ? > type = p . getAbstractType ( ) ; 
 part = p . getRemainingPart ( ) ; 
 
 @ @ - 240 , 7 + 240 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 int i = 0 ; 
 while ( bb . remaining ( ) > 0 ) 
 { 
 - AbstractType < ? > comparator = validateNextComparator ( i , bb ) ; 
 + AbstractType < ? > comparator = validateComparator ( i , bb ) ; 
 
 if ( bb . remaining ( ) < 2 ) 
 throw new MarshalException ( " Not enough bytes to read value size of component " + i ) ; 
 @ @ - 271 , 11 + 271 , 32 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 return value ; 
 } 
 
 - abstract protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb ) ; 
 - abstract protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) ; 
 - abstract protected AbstractType < ? > getAndAppendNextComparator ( int i , ByteBuffer bb , StringBuilder sb ) ; 
 - abstract protected ParsedComparator parseNextComparator ( int i , String part ) ; 
 - abstract protected AbstractType < ? > validateNextComparator ( int i , ByteBuffer bb ) throws MarshalException ; 
 + / * * 
 + * @ return the comparator for the given component . static CompositeType will consult 
 + * @ param i ; DynamicCompositeType will read the type information from @ param bb 
 + * / 
 + abstract protected AbstractType < ? > getComparator ( int i , ByteBuffer bb ) ; 
 + 
 + / * * 
 + * Adds DynamicCompositeType type information from @ param bb1 to @ param bb2 . 
 + * @ param i is ignored . 
 + * / 
 + abstract protected AbstractType < ? > getComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) ; 
 + 
 + / * * 
 + * Adds type information from @ param bb to @ param sb . @ param i is ignored . 
 + * / 
 + abstract protected AbstractType < ? > getAndAppendComparator ( int i , ByteBuffer bb , StringBuilder sb ) ; 
 + 
 + / * * 
 + * Like getComparator , but validates that @ param i does not exceed the defined range 
 + * / 
 + abstract protected AbstractType < ? > validateComparator ( int i , ByteBuffer bb ) throws MarshalException ; 
 + 
 + / * * 
 + * Used by fromString 
 + * / 
 + abstract protected ParsedComparator parseComparator ( int i , String part ) ; 
 
 protected static interface ParsedComparator 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / CompositeType . java b / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 index 2e32725 . . 1b59ae9 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 @ @ - 80 , 27 + 80 , 27 @ @ public class CompositeType extends AbstractCompositeType 
 this . types = types ; 
 } 
 
 - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb ) 
 + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb ) 
 { 
 return types . get ( i ) ; 
 } 
 
 - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) 
 + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) 
 { 
 return types . get ( i ) ; 
 } 
 
 - protected AbstractType < ? > getAndAppendNextComparator ( int i , ByteBuffer bb , StringBuilder sb ) 
 + protected AbstractType < ? > getAndAppendComparator ( int i , ByteBuffer bb , StringBuilder sb ) 
 { 
 return types . get ( i ) ; 
 } 
 
 - protected ParsedComparator parseNextComparator ( int i , String part ) 
 + protected ParsedComparator parseComparator ( int i , String part ) 
 { 
 return new StaticParsedComparator ( types . get ( i ) , part ) ; 
 } 
 
 - protected AbstractType < ? > validateNextComparator ( int i , ByteBuffer bb ) throws MarshalException 
 + protected AbstractType < ? > validateComparator ( int i , ByteBuffer bb ) throws MarshalException 
 { 
 if ( i > = types . size ( ) ) 
 throw new MarshalException ( " Too many bytes for comparator " ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 index 89116f2 . . e3f4839 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 @ @ - 102 , 12 + 102 , 12 @ @ public class DynamicCompositeType extends AbstractCompositeType 
 } 
 } 
 
 - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb ) 
 + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb ) 
 { 
 return getComparator ( bb ) ; 
 } 
 
 - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) 
 + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) 
 { 
 AbstractType < ? > comp1 = getComparator ( bb1 ) ; 
 AbstractType < ? > comp2 = getComparator ( bb2 ) ; 
 @ @ - 135 , 7 + 135 , 7 @ @ public class DynamicCompositeType extends AbstractCompositeType 
 return comp1 ; 
 } 
 
 - protected AbstractType < ? > getAndAppendNextComparator ( int i , ByteBuffer bb , StringBuilder sb ) 
 + protected AbstractType < ? > getAndAppendComparator ( int i , ByteBuffer bb , StringBuilder sb ) 
 { 
 try 
 { 
 @ @ - 162 , 12 + 162 , 12 @ @ public class DynamicCompositeType extends AbstractCompositeType 
 } 
 } 
 
 - protected ParsedComparator parseNextComparator ( int i , String part ) 
 + protected ParsedComparator parseComparator ( int i , String part ) 
 { 
 return new DynamicParsedComparator ( part ) ; 
 } 
 
 - protected AbstractType < ? > validateNextComparator ( int i , ByteBuffer bb ) throws MarshalException 
 + protected AbstractType < ? > validateComparator ( int i , ByteBuffer bb ) throws MarshalException 
 { 
 AbstractType < ? > comparator = null ; 
 if ( bb . remaining ( ) < 2 )
