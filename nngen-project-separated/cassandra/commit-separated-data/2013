BLEU SCORE: 0.027611988917697356

TEST MSG: Fix deletion for indexes on primary key columns
GENERATED MSG: merge from 1 . 1

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 97fb94a . . 2fe3a39 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 12 : <nl> + * Fix deletion for indexes on primary key columns ( CASSANDRA - 8206 ) <nl> * Add ' nodetool statusgossip ' ( CASSANDRA - 8125 ) <nl> * Improve client notification that nodes are ready for requests ( CASSANDRA - 7510 ) <nl> * Handle negative timestamp in writetime method ( CASSANDRA - 8139 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java <nl> index 87e87cb . . 553b9d4 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java <nl> @ @ - 78 , 6 + 78 , 11 @ @ public abstract class AbstractSimplePerColumnSecondaryIndex extends PerColumnSec <nl> <nl> public void delete ( ByteBuffer rowKey , Column column ) <nl> { <nl> + deleteForCleanup ( rowKey , column ) ; <nl> + } <nl> + <nl> + public void deleteForCleanup ( ByteBuffer rowKey , Column column ) <nl> + { <nl> if ( column . isMarkedForDelete ( System . currentTimeMillis ( ) ) ) <nl> return ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / index / PerColumnSecondaryIndex . java b / src / java / org / apache / cassandra / db / index / PerColumnSecondaryIndex . java <nl> index e77bd0f . . 73f53f1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / PerColumnSecondaryIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / PerColumnSecondaryIndex . java <nl> @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . utils . FBUtilities ; <nl> public abstract class PerColumnSecondaryIndex extends SecondaryIndex <nl> { <nl> / * * <nl> - * Delete a column from the index <nl> + * Called when a column has been tombstoned or replaced . <nl> * <nl> * @ param rowKey the underlying row key which is indexed <nl> * @ param col all the column info <nl> @ @ - 37 , 6 + 37 , 11 @ @ public abstract class PerColumnSecondaryIndex extends SecondaryIndex <nl> public abstract void delete ( ByteBuffer rowKey , Column col ) ; <nl> <nl> / * * <nl> + * Called when a column has been removed due to a cleanup operation . <nl> + * / <nl> + public abstract void deleteForCleanup ( ByteBuffer rowKey , Column col ) ; <nl> + <nl> + / * * <nl> * insert a column to the index <nl> * <nl> * @ param rowKey the underlying row key which is indexed <nl> diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java <nl> index 64266c4 . . a83f5dd 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> import java . util . concurrent . * ; <nl> <nl> + import com . google . common . base . Objects ; <nl> import org . apache . commons . lang3 . StringUtils ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 371 , 4 + 372 , 10 @ @ public abstract class SecondaryIndex <nl> } <nl> throw new AssertionError ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return Objects . toStringHelper ( this ) . add ( " columnDefs " , columnDefs ) . toString ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> index b75f917 . . 6d9f28a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> @ @ - 465 , 7 + 465 , 7 @ @ public class SecondaryIndexManager <nl> } <nl> else <nl> { <nl> - ( ( PerColumnSecondaryIndex ) index ) . delete ( key . key , column ) ; <nl> + ( ( PerColumnSecondaryIndex ) index ) . deleteForCleanup ( key . key , column ) ; <nl> } <nl> } <nl> } <nl> @ @ - 618 , 7 + 618 , 7 @ @ public class SecondaryIndexManager <nl> { <nl> if ( oldColumn . equals ( column ) ) <nl> return ; <nl> - <nl> + <nl> for ( SecondaryIndex index : indexFor ( column . name ( ) ) ) <nl> { <nl> if ( index instanceof PerColumnSecondaryIndex ) <nl> diff - - git a / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnClusteringKey . java b / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnClusteringKey . java <nl> index 954f380 . . 564d6bb 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnClusteringKey . java <nl> + + + b / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnClusteringKey . java <nl> @ @ - 112 , 4 + 112 , 12 @ @ public class CompositesIndexOnClusteringKey extends CompositesIndex <nl> { <nl> return data . hasOnlyTombstones ( now ) ; <nl> } <nl> + <nl> + @ Override <nl> + public void delete ( ByteBuffer rowKey , Column column ) <nl> + { <nl> + / / We only know that one column of the CQL row has been updated / deleted , but we don ' t know if the <nl> + / / full row has been deleted so we should not do anything . If it ends up that the whole row has <nl> + / / been deleted , it will be eventually cleaned up on read because the entry will be detected stale . <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnPartitionKey . java b / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnPartitionKey . java <nl> index 4e2c580 . . e8956dc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnPartitionKey . java <nl> + + + b / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnPartitionKey . java <nl> @ @ - 99 , 4 + 99 , 12 @ @ public class CompositesIndexOnPartitionKey extends CompositesIndex <nl> { <nl> return data . hasOnlyTombstones ( now ) ; <nl> } <nl> + <nl> + @ Override <nl> + public void delete ( ByteBuffer rowKey , Column column ) <nl> + { <nl> + / / We only know that one column of the CQL row has been updated / deleted , but we don ' t know if the <nl> + / / full row has been deleted so we should not do anything . If it ends up that the whole row has <nl> + / / been deleted , it will be eventually cleaned up on read because the entry will be detected stale . <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / HintedHandOffManager . java b / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> index a83fbab . . e2dc046 100644 <nl> - - - a / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> + + + b / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> @ @ - 391 , 7 + 391 , 9 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean <nl> { <nl> Token < ? > token = StorageService . getPartitioner ( ) . getTokenFactory ( ) . fromByteArray ( row . key . key ) ; <nl> InetAddress target = StorageService . instance . getTokenMetadata ( ) . getEndpoint ( token ) ; <nl> - scheduleHintDelivery ( target ) ; <nl> + / / token may have since been removed ( in which case we have just read back a tombstone ) <nl> + if ( target ! = null ) <nl> + scheduleHintDelivery ( target ) ; <nl> } <nl> <nl> if ( logger _ . isDebugEnabled ( ) )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 97fb94a . . 2fe3a39 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 12 : 
 + * Fix deletion for indexes on primary key columns ( CASSANDRA - 8206 ) 
 * Add ' nodetool statusgossip ' ( CASSANDRA - 8125 ) 
 * Improve client notification that nodes are ready for requests ( CASSANDRA - 7510 ) 
 * Handle negative timestamp in writetime method ( CASSANDRA - 8139 ) 
 diff - - git a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java 
 index 87e87cb . . 553b9d4 100644 
 - - - a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java 
 @ @ - 78 , 6 + 78 , 11 @ @ public abstract class AbstractSimplePerColumnSecondaryIndex extends PerColumnSec 
 
 public void delete ( ByteBuffer rowKey , Column column ) 
 { 
 + deleteForCleanup ( rowKey , column ) ; 
 + } 
 + 
 + public void deleteForCleanup ( ByteBuffer rowKey , Column column ) 
 + { 
 if ( column . isMarkedForDelete ( System . currentTimeMillis ( ) ) ) 
 return ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / index / PerColumnSecondaryIndex . java b / src / java / org / apache / cassandra / db / index / PerColumnSecondaryIndex . java 
 index e77bd0f . . 73f53f1 100644 
 - - - a / src / java / org / apache / cassandra / db / index / PerColumnSecondaryIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / PerColumnSecondaryIndex . java 
 @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . utils . FBUtilities ; 
 public abstract class PerColumnSecondaryIndex extends SecondaryIndex 
 { 
 / * * 
 - * Delete a column from the index 
 + * Called when a column has been tombstoned or replaced . 
 * 
 * @ param rowKey the underlying row key which is indexed 
 * @ param col all the column info 
 @ @ - 37 , 6 + 37 , 11 @ @ public abstract class PerColumnSecondaryIndex extends SecondaryIndex 
 public abstract void delete ( ByteBuffer rowKey , Column col ) ; 
 
 / * * 
 + * Called when a column has been removed due to a cleanup operation . 
 + * / 
 + public abstract void deleteForCleanup ( ByteBuffer rowKey , Column col ) ; 
 + 
 + / * * 
 * insert a column to the index 
 * 
 * @ param rowKey the underlying row key which is indexed 
 diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java 
 index 64266c4 . . a83f5dd 100644 
 - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import java . nio . ByteBuffer ; 
 import java . util . * ; 
 import java . util . concurrent . * ; 
 
 + import com . google . common . base . Objects ; 
 import org . apache . commons . lang3 . StringUtils ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 371 , 4 + 372 , 10 @ @ public abstract class SecondaryIndex 
 } 
 throw new AssertionError ( ) ; 
 } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return Objects . toStringHelper ( this ) . add ( " columnDefs " , columnDefs ) . toString ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 index b75f917 . . 6d9f28a 100644 
 - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 @ @ - 465 , 7 + 465 , 7 @ @ public class SecondaryIndexManager 
 } 
 else 
 { 
 - ( ( PerColumnSecondaryIndex ) index ) . delete ( key . key , column ) ; 
 + ( ( PerColumnSecondaryIndex ) index ) . deleteForCleanup ( key . key , column ) ; 
 } 
 } 
 } 
 @ @ - 618 , 7 + 618 , 7 @ @ public class SecondaryIndexManager 
 { 
 if ( oldColumn . equals ( column ) ) 
 return ; 
 - 
 + 
 for ( SecondaryIndex index : indexFor ( column . name ( ) ) ) 
 { 
 if ( index instanceof PerColumnSecondaryIndex ) 
 diff - - git a / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnClusteringKey . java b / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnClusteringKey . java 
 index 954f380 . . 564d6bb 100644 
 - - - a / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnClusteringKey . java 
 + + + b / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnClusteringKey . java 
 @ @ - 112 , 4 + 112 , 12 @ @ public class CompositesIndexOnClusteringKey extends CompositesIndex 
 { 
 return data . hasOnlyTombstones ( now ) ; 
 } 
 + 
 + @ Override 
 + public void delete ( ByteBuffer rowKey , Column column ) 
 + { 
 + / / We only know that one column of the CQL row has been updated / deleted , but we don ' t know if the 
 + / / full row has been deleted so we should not do anything . If it ends up that the whole row has 
 + / / been deleted , it will be eventually cleaned up on read because the entry will be detected stale . 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnPartitionKey . java b / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnPartitionKey . java 
 index 4e2c580 . . e8956dc 100644 
 - - - a / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnPartitionKey . java 
 + + + b / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnPartitionKey . java 
 @ @ - 99 , 4 + 99 , 12 @ @ public class CompositesIndexOnPartitionKey extends CompositesIndex 
 { 
 return data . hasOnlyTombstones ( now ) ; 
 } 
 + 
 + @ Override 
 + public void delete ( ByteBuffer rowKey , Column column ) 
 + { 
 + / / We only know that one column of the CQL row has been updated / deleted , but we don ' t know if the 
 + / / full row has been deleted so we should not do anything . If it ends up that the whole row has 
 + / / been deleted , it will be eventually cleaned up on read because the entry will be detected stale . 
 + } 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / HintedHandOffManager . java b / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 index a83fbab . . e2dc046 100644 
 - - - a / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 + + + b / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 @ @ - 391 , 7 + 391 , 9 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean 
 { 
 Token < ? > token = StorageService . getPartitioner ( ) . getTokenFactory ( ) . fromByteArray ( row . key . key ) ; 
 InetAddress target = StorageService . instance . getTokenMetadata ( ) . getEndpoint ( token ) ; 
 - scheduleHintDelivery ( target ) ; 
 + / / token may have since been removed ( in which case we have just read back a tombstone ) 
 + if ( target ! = null ) 
 + scheduleHintDelivery ( target ) ; 
 } 
 
 if ( logger _ . isDebugEnabled ( ) )
