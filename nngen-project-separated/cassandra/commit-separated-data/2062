BLEU SCORE: 0.020980574531482755

TEST MSG: Reduce totalBlockFor ( ) for LOCAL _ * consistency levels
GENERATED MSG: Add tombstone debug threshold and histogram

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b633e48 . . 84bbe75 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 11 : <nl> + * Reduce totalBlockFor ( ) for LOCAL _ * consistency levels ( CASSANDRA - 8058 ) <nl> * Fix merging schemas with re - dropped keyspaces ( CASSANDRA - 7256 ) <nl> * Fix counters in supercolumns during live upgrades from 1 . 2 ( CASSANDRA - 7188 ) <nl> * Notify DT subscribers when a column family is truncated ( CASSANDRA - 8088 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ConsistencyLevel . java b / src / java / org / apache / cassandra / db / ConsistencyLevel . java <nl> index 174b80d . . 3ef3217 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ConsistencyLevel . java <nl> + + + b / src / java / org / apache / cassandra / db / ConsistencyLevel . java <nl> @ @ - 145 , 12 + 145 , 12 @ @ public enum ConsistencyLevel <nl> return isDCLocal ; <nl> } <nl> <nl> - private boolean isLocal ( InetAddress endpoint ) <nl> + public boolean isLocal ( InetAddress endpoint ) <nl> { <nl> return DatabaseDescriptor . getLocalDataCenter ( ) . equals ( DatabaseDescriptor . getEndpointSnitch ( ) . getDatacenter ( endpoint ) ) ; <nl> } <nl> <nl> - private int countLocalEndpoints ( Iterable < InetAddress > liveEndpoints ) <nl> + public int countLocalEndpoints ( Iterable < InetAddress > liveEndpoints ) <nl> { <nl> int count = 0 ; <nl> for ( InetAddress endpoint : liveEndpoints ) <nl> diff - - git a / src / java / org / apache / cassandra / service / DatacenterWriteResponseHandler . java b / src / java / org / apache / cassandra / service / DatacenterWriteResponseHandler . java <nl> index 5530374 . . 74dd488 100644 <nl> - - - a / src / java / org / apache / cassandra / service / DatacenterWriteResponseHandler . java <nl> + + + b / src / java / org / apache / cassandra / service / DatacenterWriteResponseHandler . java <nl> @ @ - 20 , 9 + 20 , 7 @ @ package org . apache . cassandra . service ; <nl> import java . net . InetAddress ; <nl> import java . util . Collection ; <nl> <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . Keyspace ; <nl> - import org . apache . cassandra . locator . IEndpointSnitch ; <nl> import org . apache . cassandra . net . MessageIn ; <nl> import org . apache . cassandra . db . ConsistencyLevel ; <nl> import org . apache . cassandra . db . WriteType ; <nl> @ @ - 32 , 8 + 30 , 6 @ @ import org . apache . cassandra . db . WriteType ; <nl> * / <nl> public class DatacenterWriteResponseHandler extends WriteResponseHandler <nl> { <nl> - private static final IEndpointSnitch snitch = DatabaseDescriptor . getEndpointSnitch ( ) ; <nl> - <nl> public DatacenterWriteResponseHandler ( Collection < InetAddress > naturalEndpoints , <nl> Collection < InetAddress > pendingEndpoints , <nl> ConsistencyLevel consistencyLevel , <nl> @ @ - 48 , 10 + 44 , 16 @ @ public class DatacenterWriteResponseHandler extends WriteResponseHandler <nl> @ Override <nl> public void response ( MessageIn message ) <nl> { <nl> - if ( message = = null | | DatabaseDescriptor . getLocalDataCenter ( ) . equals ( snitch . getDatacenter ( message . from ) ) ) <nl> - { <nl> + if ( message = = null | | consistencyLevel . isLocal ( message . from ) ) <nl> if ( responses . decrementAndGet ( ) = = 0 ) <nl> signal ( ) ; <nl> - } <nl> + } <nl> + <nl> + @ Override <nl> + protected int totalBlockFor ( ) <nl> + { <nl> + / / during bootstrap , include pending endpoints ( only local here ) in the count <nl> + / / or we may fail the consistency level guarantees ( see # 833 , # 8058 ) <nl> + return consistencyLevel . blockFor ( keyspace ) + consistencyLevel . countLocalEndpoints ( pendingEndpoints ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 88daf35 . . aef45ba 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 7 , 6 + 7 , 7 @ @ Merged from 1 . 2 : <nl> * Allow where clause conditions to be in parenthesis ( CASSANDRA - 6037 ) <nl> * Do not open non - ssl storage port if encryption option is all ( CASSANDRA - 3916 ) <nl> * Improve memory usage of metadata min / max column names ( CASSANDRA - 6077 ) <nl> + * Add tombstone debug threshold and histogram ( CASSANDRA - 6042 , 6057 ) <nl> <nl> <nl> 2 . 0 . 1 <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index 4af7275 . . e7d9892 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 405 , 6 + 405 , 11 @ @ snapshot _ before _ compaction : false <nl> # lose data on truncation or drop . <nl> auto _ snapshot : true <nl> <nl> + # Log a debug message if more than this many tombstones are scanned <nl> + # in a single - partition query . Set the threshold on SliceQueryFilter <nl> + # to debug to enable . <nl> + tombstone _ debug _ threshold : 10000 <nl> + <nl> # Add column indexes to a row after its contents reach this size . <nl> # Increase if your column values are large , or if you have a very large <nl> # number of columns . The competing causes are , Cassandra has to <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index 392e8c3 . . 131c9ef 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 179 , 6 + 179 , 8 @ @ public class Config <nl> <nl> private static boolean outboundBindAny = false ; <nl> <nl> + public volatile int tombstone _ debug _ threshold = 10000 ; <nl> + <nl> public static boolean getOutboundBindAny ( ) <nl> { <nl> return outboundBindAny ; <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 572a06f . . a936f14 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 880 , 6 + 880 , 20 @ @ public class DatabaseDescriptor <nl> } <nl> <nl> / * * <nl> + * How many tombstones need to be scanned before we log a <nl> + * debug message <nl> + * / <nl> + public static int getTombstoneDebugThreshold ( ) <nl> + { <nl> + return conf . tombstone _ debug _ threshold ; <nl> + } <nl> + <nl> + public static void setTombstoneDebugThreshold ( int tombstoneDebugThreshold ) <nl> + { <nl> + conf . tombstone _ debug _ threshold = tombstoneDebugThreshold ; <nl> + } <nl> + <nl> + / * * <nl> * size of commitlog segments to allocate <nl> * / <nl> public static int getCommitLogSegmentSize ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 1ff4832 . . ec9570a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import com . google . common . base . Function ; <nl> import com . google . common . collect . * ; <nl> import com . google . common . util . concurrent . Futures ; <nl> import com . google . common . util . concurrent . Uninterruptibles ; <nl> + import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 49 , 11 + 50 , 7 @ @ import org . apache . cassandra . db . columniterator . OnDiskAtomIterator ; <nl> import org . apache . cassandra . db . commitlog . CommitLog ; <nl> import org . apache . cassandra . db . commitlog . ReplayPosition ; <nl> import org . apache . cassandra . db . compaction . * ; <nl> - import org . apache . cassandra . db . filter . ColumnSlice ; <nl> - import org . apache . cassandra . db . filter . ExtendedFilter ; <nl> - import org . apache . cassandra . db . filter . IDiskAtomFilter ; <nl> - import org . apache . cassandra . db . filter . QueryFilter ; <nl> - import org . apache . cassandra . db . filter . SliceQueryFilter ; <nl> + import org . apache . cassandra . db . filter . * ; <nl> import org . apache . cassandra . db . index . SecondaryIndex ; <nl> import org . apache . cassandra . db . index . SecondaryIndexManager ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> @ @ - 72 , 7 + 69 , 6 @ @ import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . thrift . IndexExpression ; <nl> import org . apache . cassandra . tracing . Tracing ; <nl> import org . apache . cassandra . utils . * ; <nl> - import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; <nl> <nl> import static org . apache . cassandra . config . CFMetaData . Caching ; <nl> <nl> @ @ - 1300 , 6 + 1296 , 13 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> <nl> removeDroppedColumns ( result ) ; <nl> + <nl> + if ( filter . filter instanceof SliceQueryFilter ) <nl> + { <nl> + / / Log the number of tombstones scanned on single key queries <nl> + metric . tombstoneScannedHistogram . update ( ( ( SliceQueryFilter ) filter . filter ) . lastIgnored ( ) ) ; <nl> + metric . liveScannedHistogram . update ( ( ( SliceQueryFilter ) filter . filter ) . lastLive ( ) ) ; <nl> + } <nl> } <nl> finally <nl> { <nl> @ @ - 2173 , 6 + 2176 , 22 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> " is deprecated , set the compaction strategy option ' enabled ' to ' false ' instead or use the nodetool command ' disableautocompaction ' . " ) ; <nl> } <nl> <nl> + public long getTombstonesPerLastRead ( ) <nl> + { <nl> + return metric . tombstoneScannedHistogram . count ( ) ; <nl> + } <nl> + <nl> + public float getPercentageTombstonesPerLastRead ( ) <nl> + { <nl> + long total = metric . tombstoneScannedHistogram . count ( ) + metric . liveScannedHistogram . count ( ) ; <nl> + return ( metric . tombstoneScannedHistogram . count ( ) / total ) ; <nl> + } <nl> + <nl> + public long getLiveCellsPerLastRead ( ) <nl> + { <nl> + return metric . liveScannedHistogram . count ( ) ; <nl> + } <nl> + <nl> / / End JMX get / set . <nl> <nl> public long estimateKeys ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> index e810dc6 . . 6105714 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> @ @ - 283 , 6 + 283 , 15 @ @ public interface ColumnFamilyStoreMBean <nl> <nl> public boolean isAutoCompactionDisabled ( ) ; <nl> <nl> + / * * Number of tombstoned cells retreived during the last slicequery * / <nl> + public long getTombstonesPerLastRead ( ) ; <nl> + <nl> + / * * Percentage of tombstoned cells retreived during the last slicequery * / <nl> + public float getPercentageTombstonesPerLastRead ( ) ; <nl> + <nl> + / * * Number of live cells retreived during the last slicequery * / <nl> + public long getLiveCellsPerLastRead ( ) ; <nl> + <nl> public long estimateKeys ( ) ; <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java <nl> index 11d7438 . . 443ff8e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java <nl> @ @ - 21 , 16 + 21 , 12 @ @ import java . io . DataInput ; <nl> import java . io . DataOutput ; <nl> import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> - import java . util . Arrays ; <nl> - import java . util . ArrayList ; <nl> - import java . util . Collection ; <nl> - import java . util . Comparator ; <nl> - import java . util . Iterator ; <nl> - import java . util . List ; <nl> + import java . util . * ; <nl> <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . columniterator . OnDiskAtomIterator ; <nl> import org . apache . cassandra . db . columniterator . SSTableSliceIterator ; <nl> @ @ - 202 , 6 + 198 , 8 @ @ public class SliceQueryFilter implements IDiskAtomFilter <nl> } <nl> <nl> Tracing . trace ( " Read { } live and { } tombstoned cells " , columnCounter . live ( ) , columnCounter . ignored ( ) ) ; <nl> + if ( columnCounter . ignored ( ) > DatabaseDescriptor . getTombstoneDebugThreshold ( ) ) <nl> + logger . debug ( " Read { } live and { } tombstoned cells " , columnCounter . live ( ) , columnCounter . ignored ( ) ) ; <nl> } <nl> <nl> public int getLiveCount ( ColumnFamily cf , long now ) <nl> @ @ - 267 , 6 + 265 , 16 @ @ public class SliceQueryFilter implements IDiskAtomFilter <nl> return columnCounter = = null ? 0 : columnCounter . live ( ) ; <nl> } <nl> <nl> + public int lastIgnored ( ) <nl> + { <nl> + return columnCounter = = null ? 0 : columnCounter . ignored ( ) ; <nl> + } <nl> + <nl> + public int lastLive ( ) <nl> + { <nl> + return columnCounter = = null ? 0 : columnCounter . live ( ) ; <nl> + } <nl> + <nl> @ Override <nl> public String toString ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java b / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java <nl> index 0f9f87d . . b63bbfb 100644 <nl> - - - a / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java <nl> + + + b / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java <nl> @ @ - 79 , 6 + 79 , 10 @ @ public class ColumnFamilyMetrics <nl> public final Gauge < Long > bloomFilterDiskSpaceUsed ; <nl> / * * Key cache hit rate for this CF * / <nl> public final Gauge < Double > keyCacheHitRate ; <nl> + / * * Tombstones scanned in queries on this CF * / <nl> + public final Histogram tombstoneScannedHistogram ; <nl> + / * * Live cells scanned in queries on this CF * / <nl> + public final Histogram liveScannedHistogram ; <nl> <nl> private final MetricNameFactory factory ; <nl> <nl> @ @ - 298 , 6 + 302 , 8 @ @ public class ColumnFamilyMetrics <nl> return Math . max ( requests , 1 ) ; / / to avoid NaN . <nl> } <nl> } ) ; <nl> + tombstoneScannedHistogram = Metrics . newHistogram ( factory . createMetricName ( " TombstoneScannedHistogram " ) ) ; <nl> + liveScannedHistogram = Metrics . newHistogram ( factory . createMetricName ( " LiveScannedHistogram " ) ) ; <nl> } <nl> <nl> public void updateSSTableIterated ( int count ) <nl> @ @ - 335 , 6 + 341 , 8 @ @ public class ColumnFamilyMetrics <nl> Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " BloomFilterDiskSpaceUsed " ) ) ; <nl> Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " KeyCacheHitRate " ) ) ; <nl> Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " SpeculativeRetry " ) ) ; <nl> + Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " TombstoneScannedHistogram " ) ) ; <nl> + Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " LiveScannedHistogram " ) ) ; <nl> } <nl> <nl> class ColumnFamilyMetricNameFactory implements MetricNameFactory <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 8e29312 . . 0f1c35c 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 3653 , 4 + 3653 , 14 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> { <nl> return DatabaseDescriptor . getPartitionerName ( ) ; <nl> } <nl> + <nl> + public int getTombstoneDebugThreshold ( ) <nl> + { <nl> + return DatabaseDescriptor . getTombstoneDebugThreshold ( ) ; <nl> + } <nl> + <nl> + public void setTombstoneDebugThreshold ( int tombstoneDebugThreshold ) <nl> + { <nl> + DatabaseDescriptor . setTombstoneDebugThreshold ( tombstoneDebugThreshold ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index e54bef9 . . 73e4124 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 476 , 4 + 476 , 9 @ @ public interface StorageServiceMBean extends NotificationEmitter <nl> public String getClusterName ( ) ; <nl> / * * Returns the cluster partitioner * / <nl> public String getPartitionerName ( ) ; <nl> + <nl> + / * * Returns the threshold for returning debugging queries with many tombstones * / <nl> + public int getTombstoneDebugThreshold ( ) ; <nl> + / * * Sets the threshold for returning debugging queries with many tombstones * / <nl> + public void setTombstoneDebugThreshold ( int tombstoneDebugThreshold ) ; <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b633e48 . . 84bbe75 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 11 : 
 + * Reduce totalBlockFor ( ) for LOCAL _ * consistency levels ( CASSANDRA - 8058 ) 
 * Fix merging schemas with re - dropped keyspaces ( CASSANDRA - 7256 ) 
 * Fix counters in supercolumns during live upgrades from 1 . 2 ( CASSANDRA - 7188 ) 
 * Notify DT subscribers when a column family is truncated ( CASSANDRA - 8088 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ConsistencyLevel . java b / src / java / org / apache / cassandra / db / ConsistencyLevel . java 
 index 174b80d . . 3ef3217 100644 
 - - - a / src / java / org / apache / cassandra / db / ConsistencyLevel . java 
 + + + b / src / java / org / apache / cassandra / db / ConsistencyLevel . java 
 @ @ - 145 , 12 + 145 , 12 @ @ public enum ConsistencyLevel 
 return isDCLocal ; 
 } 
 
 - private boolean isLocal ( InetAddress endpoint ) 
 + public boolean isLocal ( InetAddress endpoint ) 
 { 
 return DatabaseDescriptor . getLocalDataCenter ( ) . equals ( DatabaseDescriptor . getEndpointSnitch ( ) . getDatacenter ( endpoint ) ) ; 
 } 
 
 - private int countLocalEndpoints ( Iterable < InetAddress > liveEndpoints ) 
 + public int countLocalEndpoints ( Iterable < InetAddress > liveEndpoints ) 
 { 
 int count = 0 ; 
 for ( InetAddress endpoint : liveEndpoints ) 
 diff - - git a / src / java / org / apache / cassandra / service / DatacenterWriteResponseHandler . java b / src / java / org / apache / cassandra / service / DatacenterWriteResponseHandler . java 
 index 5530374 . . 74dd488 100644 
 - - - a / src / java / org / apache / cassandra / service / DatacenterWriteResponseHandler . java 
 + + + b / src / java / org / apache / cassandra / service / DatacenterWriteResponseHandler . java 
 @ @ - 20 , 9 + 20 , 7 @ @ package org . apache . cassandra . service ; 
 import java . net . InetAddress ; 
 import java . util . Collection ; 
 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . Keyspace ; 
 - import org . apache . cassandra . locator . IEndpointSnitch ; 
 import org . apache . cassandra . net . MessageIn ; 
 import org . apache . cassandra . db . ConsistencyLevel ; 
 import org . apache . cassandra . db . WriteType ; 
 @ @ - 32 , 8 + 30 , 6 @ @ import org . apache . cassandra . db . WriteType ; 
 * / 
 public class DatacenterWriteResponseHandler extends WriteResponseHandler 
 { 
 - private static final IEndpointSnitch snitch = DatabaseDescriptor . getEndpointSnitch ( ) ; 
 - 
 public DatacenterWriteResponseHandler ( Collection < InetAddress > naturalEndpoints , 
 Collection < InetAddress > pendingEndpoints , 
 ConsistencyLevel consistencyLevel , 
 @ @ - 48 , 10 + 44 , 16 @ @ public class DatacenterWriteResponseHandler extends WriteResponseHandler 
 @ Override 
 public void response ( MessageIn message ) 
 { 
 - if ( message = = null | | DatabaseDescriptor . getLocalDataCenter ( ) . equals ( snitch . getDatacenter ( message . from ) ) ) 
 - { 
 + if ( message = = null | | consistencyLevel . isLocal ( message . from ) ) 
 if ( responses . decrementAndGet ( ) = = 0 ) 
 signal ( ) ; 
 - } 
 + } 
 + 
 + @ Override 
 + protected int totalBlockFor ( ) 
 + { 
 + / / during bootstrap , include pending endpoints ( only local here ) in the count 
 + / / or we may fail the consistency level guarantees ( see # 833 , # 8058 ) 
 + return consistencyLevel . blockFor ( keyspace ) + consistencyLevel . countLocalEndpoints ( pendingEndpoints ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 88daf35 . . aef45ba 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 7 , 6 + 7 , 7 @ @ Merged from 1 . 2 : 
 * Allow where clause conditions to be in parenthesis ( CASSANDRA - 6037 ) 
 * Do not open non - ssl storage port if encryption option is all ( CASSANDRA - 3916 ) 
 * Improve memory usage of metadata min / max column names ( CASSANDRA - 6077 ) 
 + * Add tombstone debug threshold and histogram ( CASSANDRA - 6042 , 6057 ) 
 
 
 2 . 0 . 1 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index 4af7275 . . e7d9892 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 405 , 6 + 405 , 11 @ @ snapshot _ before _ compaction : false 
 # lose data on truncation or drop . 
 auto _ snapshot : true 
 
 + # Log a debug message if more than this many tombstones are scanned 
 + # in a single - partition query . Set the threshold on SliceQueryFilter 
 + # to debug to enable . 
 + tombstone _ debug _ threshold : 10000 
 + 
 # Add column indexes to a row after its contents reach this size . 
 # Increase if your column values are large , or if you have a very large 
 # number of columns . The competing causes are , Cassandra has to 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index 392e8c3 . . 131c9ef 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 179 , 6 + 179 , 8 @ @ public class Config 
 
 private static boolean outboundBindAny = false ; 
 
 + public volatile int tombstone _ debug _ threshold = 10000 ; 
 + 
 public static boolean getOutboundBindAny ( ) 
 { 
 return outboundBindAny ; 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 572a06f . . a936f14 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 880 , 6 + 880 , 20 @ @ public class DatabaseDescriptor 
 } 
 
 / * * 
 + * How many tombstones need to be scanned before we log a 
 + * debug message 
 + * / 
 + public static int getTombstoneDebugThreshold ( ) 
 + { 
 + return conf . tombstone _ debug _ threshold ; 
 + } 
 + 
 + public static void setTombstoneDebugThreshold ( int tombstoneDebugThreshold ) 
 + { 
 + conf . tombstone _ debug _ threshold = tombstoneDebugThreshold ; 
 + } 
 + 
 + / * * 
 * size of commitlog segments to allocate 
 * / 
 public static int getCommitLogSegmentSize ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 1ff4832 . . ec9570a 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import com . google . common . base . Function ; 
 import com . google . common . collect . * ; 
 import com . google . common . util . concurrent . Futures ; 
 import com . google . common . util . concurrent . Uninterruptibles ; 
 + import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 49 , 11 + 50 , 7 @ @ import org . apache . cassandra . db . columniterator . OnDiskAtomIterator ; 
 import org . apache . cassandra . db . commitlog . CommitLog ; 
 import org . apache . cassandra . db . commitlog . ReplayPosition ; 
 import org . apache . cassandra . db . compaction . * ; 
 - import org . apache . cassandra . db . filter . ColumnSlice ; 
 - import org . apache . cassandra . db . filter . ExtendedFilter ; 
 - import org . apache . cassandra . db . filter . IDiskAtomFilter ; 
 - import org . apache . cassandra . db . filter . QueryFilter ; 
 - import org . apache . cassandra . db . filter . SliceQueryFilter ; 
 + import org . apache . cassandra . db . filter . * ; 
 import org . apache . cassandra . db . index . SecondaryIndex ; 
 import org . apache . cassandra . db . index . SecondaryIndexManager ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 @ @ - 72 , 7 + 69 , 6 @ @ import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . thrift . IndexExpression ; 
 import org . apache . cassandra . tracing . Tracing ; 
 import org . apache . cassandra . utils . * ; 
 - import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; 
 
 import static org . apache . cassandra . config . CFMetaData . Caching ; 
 
 @ @ - 1300 , 6 + 1296 , 13 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 
 removeDroppedColumns ( result ) ; 
 + 
 + if ( filter . filter instanceof SliceQueryFilter ) 
 + { 
 + / / Log the number of tombstones scanned on single key queries 
 + metric . tombstoneScannedHistogram . update ( ( ( SliceQueryFilter ) filter . filter ) . lastIgnored ( ) ) ; 
 + metric . liveScannedHistogram . update ( ( ( SliceQueryFilter ) filter . filter ) . lastLive ( ) ) ; 
 + } 
 } 
 finally 
 { 
 @ @ - 2173 , 6 + 2176 , 22 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 " is deprecated , set the compaction strategy option ' enabled ' to ' false ' instead or use the nodetool command ' disableautocompaction ' . " ) ; 
 } 
 
 + public long getTombstonesPerLastRead ( ) 
 + { 
 + return metric . tombstoneScannedHistogram . count ( ) ; 
 + } 
 + 
 + public float getPercentageTombstonesPerLastRead ( ) 
 + { 
 + long total = metric . tombstoneScannedHistogram . count ( ) + metric . liveScannedHistogram . count ( ) ; 
 + return ( metric . tombstoneScannedHistogram . count ( ) / total ) ; 
 + } 
 + 
 + public long getLiveCellsPerLastRead ( ) 
 + { 
 + return metric . liveScannedHistogram . count ( ) ; 
 + } 
 + 
 / / End JMX get / set . 
 
 public long estimateKeys ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 index e810dc6 . . 6105714 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 @ @ - 283 , 6 + 283 , 15 @ @ public interface ColumnFamilyStoreMBean 
 
 public boolean isAutoCompactionDisabled ( ) ; 
 
 + / * * Number of tombstoned cells retreived during the last slicequery * / 
 + public long getTombstonesPerLastRead ( ) ; 
 + 
 + / * * Percentage of tombstoned cells retreived during the last slicequery * / 
 + public float getPercentageTombstonesPerLastRead ( ) ; 
 + 
 + / * * Number of live cells retreived during the last slicequery * / 
 + public long getLiveCellsPerLastRead ( ) ; 
 + 
 public long estimateKeys ( ) ; 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java 
 index 11d7438 . . 443ff8e 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java 
 @ @ - 21 , 16 + 21 , 12 @ @ import java . io . DataInput ; 
 import java . io . DataOutput ; 
 import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 - import java . util . Arrays ; 
 - import java . util . ArrayList ; 
 - import java . util . Collection ; 
 - import java . util . Comparator ; 
 - import java . util . Iterator ; 
 - import java . util . List ; 
 + import java . util . * ; 
 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . columniterator . OnDiskAtomIterator ; 
 import org . apache . cassandra . db . columniterator . SSTableSliceIterator ; 
 @ @ - 202 , 6 + 198 , 8 @ @ public class SliceQueryFilter implements IDiskAtomFilter 
 } 
 
 Tracing . trace ( " Read { } live and { } tombstoned cells " , columnCounter . live ( ) , columnCounter . ignored ( ) ) ; 
 + if ( columnCounter . ignored ( ) > DatabaseDescriptor . getTombstoneDebugThreshold ( ) ) 
 + logger . debug ( " Read { } live and { } tombstoned cells " , columnCounter . live ( ) , columnCounter . ignored ( ) ) ; 
 } 
 
 public int getLiveCount ( ColumnFamily cf , long now ) 
 @ @ - 267 , 6 + 265 , 16 @ @ public class SliceQueryFilter implements IDiskAtomFilter 
 return columnCounter = = null ? 0 : columnCounter . live ( ) ; 
 } 
 
 + public int lastIgnored ( ) 
 + { 
 + return columnCounter = = null ? 0 : columnCounter . ignored ( ) ; 
 + } 
 + 
 + public int lastLive ( ) 
 + { 
 + return columnCounter = = null ? 0 : columnCounter . live ( ) ; 
 + } 
 + 
 @ Override 
 public String toString ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java b / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java 
 index 0f9f87d . . b63bbfb 100644 
 - - - a / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java 
 + + + b / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java 
 @ @ - 79 , 6 + 79 , 10 @ @ public class ColumnFamilyMetrics 
 public final Gauge < Long > bloomFilterDiskSpaceUsed ; 
 / * * Key cache hit rate for this CF * / 
 public final Gauge < Double > keyCacheHitRate ; 
 + / * * Tombstones scanned in queries on this CF * / 
 + public final Histogram tombstoneScannedHistogram ; 
 + / * * Live cells scanned in queries on this CF * / 
 + public final Histogram liveScannedHistogram ; 
 
 private final MetricNameFactory factory ; 
 
 @ @ - 298 , 6 + 302 , 8 @ @ public class ColumnFamilyMetrics 
 return Math . max ( requests , 1 ) ; / / to avoid NaN . 
 } 
 } ) ; 
 + tombstoneScannedHistogram = Metrics . newHistogram ( factory . createMetricName ( " TombstoneScannedHistogram " ) ) ; 
 + liveScannedHistogram = Metrics . newHistogram ( factory . createMetricName ( " LiveScannedHistogram " ) ) ; 
 } 
 
 public void updateSSTableIterated ( int count ) 
 @ @ - 335 , 6 + 341 , 8 @ @ public class ColumnFamilyMetrics 
 Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " BloomFilterDiskSpaceUsed " ) ) ; 
 Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " KeyCacheHitRate " ) ) ; 
 Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " SpeculativeRetry " ) ) ; 
 + Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " TombstoneScannedHistogram " ) ) ; 
 + Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " LiveScannedHistogram " ) ) ; 
 } 
 
 class ColumnFamilyMetricNameFactory implements MetricNameFactory 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 8e29312 . . 0f1c35c 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 3653 , 4 + 3653 , 14 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 { 
 return DatabaseDescriptor . getPartitionerName ( ) ; 
 } 
 + 
 + public int getTombstoneDebugThreshold ( ) 
 + { 
 + return DatabaseDescriptor . getTombstoneDebugThreshold ( ) ; 
 + } 
 + 
 + public void setTombstoneDebugThreshold ( int tombstoneDebugThreshold ) 
 + { 
 + DatabaseDescriptor . setTombstoneDebugThreshold ( tombstoneDebugThreshold ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index e54bef9 . . 73e4124 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 476 , 4 + 476 , 9 @ @ public interface StorageServiceMBean extends NotificationEmitter 
 public String getClusterName ( ) ; 
 / * * Returns the cluster partitioner * / 
 public String getPartitionerName ( ) ; 
 + 
 + / * * Returns the threshold for returning debugging queries with many tombstones * / 
 + public int getTombstoneDebugThreshold ( ) ; 
 + / * * Sets the threshold for returning debugging queries with many tombstones * / 
 + public void setTombstoneDebugThreshold ( int tombstoneDebugThreshold ) ; 
 }
