BLEU SCORE: 0.014199193612838947

TEST MSG: RangeTombstoneList doesn ' t properly clean up mergeable or superseded rts in some cases
GENERATED MSG: optimize commitlog checksumming with PureJavaCrc32

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 0d33e3c . . 6e18de1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 18 <nl> + * RangeTombstoneList doesn ' t properly clean up mergeable or superseded rts in some cases ( CASSANDRA - 14894 ) <nl> * Fix handling of collection tombstones for dropped columns from legacy sstables ( CASSANDRA - 14912 ) <nl> * Fix missing rows when reading 2 . 1 SSTables with static columns in 3 . 0 ( CASSANDRA - 14873 ) <nl> * Move TWCS message ' No compaction necessary for bucket size ' to Trace level ( CASSANDRA - 14884 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / rows / RowAndDeletionMergeIterator . java b / src / java / org / apache / cassandra / db / rows / RowAndDeletionMergeIterator . java <nl> index 389fe45 . . 97b13e7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / rows / RowAndDeletionMergeIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / rows / RowAndDeletionMergeIterator . java <nl> @ @ - 70 , 7 + 70 , 7 @ @ public class RowAndDeletionMergeIterator extends AbstractUnfilteredRowIterator <nl> this . ranges = ranges ; <nl> } <nl> <nl> - protected Unfiltered computeNext ( ) <nl> + private Unfiltered computeNextInternal ( ) <nl> { <nl> while ( true ) <nl> { <nl> @ @ - 112 , 6 + 112 , 44 @ @ public class RowAndDeletionMergeIterator extends AbstractUnfilteredRowIterator <nl> } <nl> } <nl> <nl> + / * * <nl> + * RangeTombstoneList doesn ' t correctly merge multiple superseded rts , or overlapping rts with the <nl> + * same ts . This causes it to emit noop boundary markers which can cause unneeded read repairs and <nl> + * repair over streaming . This should technically be fixed in RangeTombstoneList . However , fixing <nl> + * it isn ' t trivial and that class is already so complicated that the fix would have a good chance <nl> + * of adding a worse bug . So we just swallow the noop boundary markers here . See CASSANDRA - 14894 <nl> + * / <nl> + private static boolean shouldSkip ( Unfiltered unfiltered ) <nl> + { <nl> + if ( unfiltered = = null | | ! unfiltered . isRangeTombstoneMarker ( ) ) <nl> + return false ; <nl> + <nl> + RangeTombstoneMarker marker = ( RangeTombstoneMarker ) unfiltered ; <nl> + <nl> + if ( ! marker . isBoundary ( ) ) <nl> + return false ; <nl> + <nl> + DeletionTime open = marker . openDeletionTime ( false ) ; <nl> + DeletionTime close = marker . closeDeletionTime ( false ) ; <nl> + <nl> + return open . equals ( close ) ; <nl> + <nl> + } <nl> + <nl> + @ Override <nl> + protected Unfiltered computeNext ( ) <nl> + { <nl> + while ( true ) <nl> + { <nl> + Unfiltered next = computeNextInternal ( ) ; <nl> + <nl> + if ( shouldSkip ( next ) ) <nl> + continue ; <nl> + <nl> + return next ; <nl> + } <nl> + } <nl> + <nl> private void updateNextRow ( ) <nl> { <nl> if ( nextRow = = null & & rows . hasNext ( ) ) <nl> diff - - git a / test / unit / org / apache / cassandra / db / rows / RowAndDeletionMergeIteratorTest . java b / test / unit / org / apache / cassandra / db / rows / RowAndDeletionMergeIteratorTest . java <nl> index 400d65a . . dd88704 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / rows / RowAndDeletionMergeIteratorTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / rows / RowAndDeletionMergeIteratorTest . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import java . nio . ByteBuffer ; <nl> import java . util . Collections ; <nl> import java . util . Iterator ; <nl> <nl> + import org . junit . Assert ; <nl> import org . junit . Before ; <nl> import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> @ @ - 244 , 11 + 245 , 13 @ @ public class RowAndDeletionMergeIteratorTest <nl> { <nl> Iterator < Row > rowIterator = createRowIterator ( ) ; <nl> <nl> - int delTime = nowInSeconds + 1 ; <nl> - long timestamp = toMillis ( delTime ) ; <nl> + int delTime1 = nowInSeconds + 1 ; <nl> + long timestamp1 = toMillis ( delTime1 ) ; <nl> + int delTime2 = delTime1 + 1 ; <nl> + long timestamp2 = toMillis ( delTime2 ) ; <nl> <nl> - Iterator < RangeTombstone > rangeTombstoneIterator = createRangeTombstoneIterator ( atMost ( 2 , timestamp , delTime ) , <nl> - greaterThan ( 2 , timestamp , delTime ) ) ; <nl> + Iterator < RangeTombstone > rangeTombstoneIterator = createRangeTombstoneIterator ( atMost ( 2 , timestamp1 , delTime1 ) , <nl> + greaterThan ( 2 , timestamp2 , delTime2 ) ) ; <nl> <nl> UnfilteredRowIterator iterator = createMergeIterator ( rowIterator , rangeTombstoneIterator , false ) ; <nl> <nl> @ @ - 269 , 11 + 272 , 13 @ @ public class RowAndDeletionMergeIteratorTest <nl> { <nl> Iterator < Row > rowIterator = createRowIterator ( ) ; <nl> <nl> - int delTime = nowInSeconds + 1 ; <nl> - long timestamp = toMillis ( delTime ) ; <nl> + int delTime1 = nowInSeconds + 1 ; <nl> + long timestamp1 = toMillis ( delTime1 ) ; <nl> + int delTime2 = delTime1 + 1 ; <nl> + long timestamp2 = toMillis ( delTime2 ) ; <nl> <nl> - Iterator < RangeTombstone > rangeTombstoneIterator = createRangeTombstoneIterator ( lessThan ( 2 , timestamp , delTime ) , <nl> - atLeast ( 2 , timestamp , delTime ) ) ; <nl> + Iterator < RangeTombstone > rangeTombstoneIterator = createRangeTombstoneIterator ( lessThan ( 2 , timestamp1 , delTime1 ) , <nl> + atLeast ( 2 , timestamp2 , delTime2 ) ) ; <nl> <nl> UnfilteredRowIterator iterator = createMergeIterator ( rowIterator , rangeTombstoneIterator , false ) ; <nl> <nl> @ @ - 345 , 6 + 350 , 29 @ @ public class RowAndDeletionMergeIteratorTest <nl> } <nl> <nl> <nl> + / * * <nl> + * RTL doesn ' t correctly merge range tombstones in some situations ( see CASSANDRA - 14894 ) <nl> + * / <nl> + @ Test <nl> + public void testWithNoopBoundaryMarkers ( ) <nl> + { <nl> + PartitionUpdate update = new PartitionUpdate ( cfm , dk , cfm . partitionColumns ( ) , 1 ) ; <nl> + RangeTombstoneList rtl = new RangeTombstoneList ( cfm . comparator , 10 ) ; <nl> + rtl . add ( rt ( 1 , 2 , 5 , 5 ) ) ; <nl> + rtl . add ( rt ( 3 , 4 , 5 , 5 ) ) ; <nl> + rtl . add ( rt ( 5 , 6 , 5 , 5 ) ) ; <nl> + rtl . add ( rt ( 0 , 8 , 6 , 6 ) ) ; / / < - supersedes all other tombstones <nl> + <nl> + Assert . assertEquals ( 3 , rtl . size ( ) ) ; <nl> + <nl> + try ( UnfilteredRowIterator partition = createMergeIterator ( update . iterator ( ) , rtl . iterator ( ) , false ) ) <nl> + { <nl> + assertRtMarker ( partition . next ( ) , ClusteringPrefix . Kind . INCL _ START _ BOUND , 0 ) ; <nl> + assertRtMarker ( partition . next ( ) , ClusteringPrefix . Kind . INCL _ END _ BOUND , 8 ) ; <nl> + assertFalse ( partition . hasNext ( ) ) ; <nl> + } <nl> + } <nl> + <nl> private void assertRtMarker ( Unfiltered unfiltered , Bound bound ) <nl> { <nl> assertEquals ( Unfiltered . Kind . RANGE _ TOMBSTONE _ MARKER , unfiltered . kind ( ) ) ; <nl> @ @ - 436 , 6 + 464 , 11 @ @ public class RowAndDeletionMergeIteratorTest <nl> return new RangeTombstone ( Slice . make ( startBound , endBound ) , new DeletionTime ( tstamp , delTime ) ) ; <nl> } <nl> <nl> + private static RangeTombstone rt ( int start , int end , long tstamp , int delTime ) <nl> + { <nl> + return rt ( start , true , end , true , tstamp , delTime ) ; <nl> + } <nl> + <nl> private static ByteBuffer bb ( int i ) <nl> { <nl> return ByteBufferUtil . bytes ( i ) ;
NEAREST DIFF (one line): diff - - git a / NEWS . txt b / NEWS . txt <nl> index fc401b8 . . cc3c18e 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 14 , 6 + 14 , 8 @ @ by version X , but the inverse is not necessarily the case . ) <nl> <nl> Upgrading <nl> - - - - - - - - - <nl> + - Compression is enabled by default on newly created ColumnFamilies <nl> + ( and unchanged for ColumnFamilies created prior to upgrading ) . <nl> - The KsDef . replication _ factor field ( deprecated since 0 . 8 ) has <nl> been removed . Older clients will need to be updated to be able <nl> to continue to created and update keyspaces . <nl> @ @ - 59 , 6 + 61 , 7 @ @ Features <nl> - Hadoop : a new BulkOutputFormat is included which will directly write <nl> SSTables locally and then stream them into the cluster . <nl> - Hadoop : KeyRange . filter is now supported with ColumnFamilyInputFormat <nl> + - Hadoop wide row mode added to ColumnFamilyInputFormat <nl> - The bulk loader is not longer a fat client ; it can be run from an <nl> existing machine in a cluster . <nl> - A new write survey mode has been added , similar to bootstrap ( enabled via <nl> @ @ - 69 , 6 + 72 , 7 @ @ Features <nl> threshold . <nl> - Off - heap caches no longer require JNA . <nl> - Streaming is now multithreaded . <nl> + - Compactions may now be aborted via JMX or nodetool . <nl> <nl> <nl> 1 . 0 . 8

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0d33e3c . . 6e18de1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 18 
 + * RangeTombstoneList doesn ' t properly clean up mergeable or superseded rts in some cases ( CASSANDRA - 14894 ) 
 * Fix handling of collection tombstones for dropped columns from legacy sstables ( CASSANDRA - 14912 ) 
 * Fix missing rows when reading 2 . 1 SSTables with static columns in 3 . 0 ( CASSANDRA - 14873 ) 
 * Move TWCS message ' No compaction necessary for bucket size ' to Trace level ( CASSANDRA - 14884 ) 
 diff - - git a / src / java / org / apache / cassandra / db / rows / RowAndDeletionMergeIterator . java b / src / java / org / apache / cassandra / db / rows / RowAndDeletionMergeIterator . java 
 index 389fe45 . . 97b13e7 100644 
 - - - a / src / java / org / apache / cassandra / db / rows / RowAndDeletionMergeIterator . java 
 + + + b / src / java / org / apache / cassandra / db / rows / RowAndDeletionMergeIterator . java 
 @ @ - 70 , 7 + 70 , 7 @ @ public class RowAndDeletionMergeIterator extends AbstractUnfilteredRowIterator 
 this . ranges = ranges ; 
 } 
 
 - protected Unfiltered computeNext ( ) 
 + private Unfiltered computeNextInternal ( ) 
 { 
 while ( true ) 
 { 
 @ @ - 112 , 6 + 112 , 44 @ @ public class RowAndDeletionMergeIterator extends AbstractUnfilteredRowIterator 
 } 
 } 
 
 + / * * 
 + * RangeTombstoneList doesn ' t correctly merge multiple superseded rts , or overlapping rts with the 
 + * same ts . This causes it to emit noop boundary markers which can cause unneeded read repairs and 
 + * repair over streaming . This should technically be fixed in RangeTombstoneList . However , fixing 
 + * it isn ' t trivial and that class is already so complicated that the fix would have a good chance 
 + * of adding a worse bug . So we just swallow the noop boundary markers here . See CASSANDRA - 14894 
 + * / 
 + private static boolean shouldSkip ( Unfiltered unfiltered ) 
 + { 
 + if ( unfiltered = = null | | ! unfiltered . isRangeTombstoneMarker ( ) ) 
 + return false ; 
 + 
 + RangeTombstoneMarker marker = ( RangeTombstoneMarker ) unfiltered ; 
 + 
 + if ( ! marker . isBoundary ( ) ) 
 + return false ; 
 + 
 + DeletionTime open = marker . openDeletionTime ( false ) ; 
 + DeletionTime close = marker . closeDeletionTime ( false ) ; 
 + 
 + return open . equals ( close ) ; 
 + 
 + } 
 + 
 + @ Override 
 + protected Unfiltered computeNext ( ) 
 + { 
 + while ( true ) 
 + { 
 + Unfiltered next = computeNextInternal ( ) ; 
 + 
 + if ( shouldSkip ( next ) ) 
 + continue ; 
 + 
 + return next ; 
 + } 
 + } 
 + 
 private void updateNextRow ( ) 
 { 
 if ( nextRow = = null & & rows . hasNext ( ) ) 
 diff - - git a / test / unit / org / apache / cassandra / db / rows / RowAndDeletionMergeIteratorTest . java b / test / unit / org / apache / cassandra / db / rows / RowAndDeletionMergeIteratorTest . java 
 index 400d65a . . dd88704 100644 
 - - - a / test / unit / org / apache / cassandra / db / rows / RowAndDeletionMergeIteratorTest . java 
 + + + b / test / unit / org / apache / cassandra / db / rows / RowAndDeletionMergeIteratorTest . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import java . nio . ByteBuffer ; 
 import java . util . Collections ; 
 import java . util . Iterator ; 
 
 + import org . junit . Assert ; 
 import org . junit . Before ; 
 import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 @ @ - 244 , 11 + 245 , 13 @ @ public class RowAndDeletionMergeIteratorTest 
 { 
 Iterator < Row > rowIterator = createRowIterator ( ) ; 
 
 - int delTime = nowInSeconds + 1 ; 
 - long timestamp = toMillis ( delTime ) ; 
 + int delTime1 = nowInSeconds + 1 ; 
 + long timestamp1 = toMillis ( delTime1 ) ; 
 + int delTime2 = delTime1 + 1 ; 
 + long timestamp2 = toMillis ( delTime2 ) ; 
 
 - Iterator < RangeTombstone > rangeTombstoneIterator = createRangeTombstoneIterator ( atMost ( 2 , timestamp , delTime ) , 
 - greaterThan ( 2 , timestamp , delTime ) ) ; 
 + Iterator < RangeTombstone > rangeTombstoneIterator = createRangeTombstoneIterator ( atMost ( 2 , timestamp1 , delTime1 ) , 
 + greaterThan ( 2 , timestamp2 , delTime2 ) ) ; 
 
 UnfilteredRowIterator iterator = createMergeIterator ( rowIterator , rangeTombstoneIterator , false ) ; 
 
 @ @ - 269 , 11 + 272 , 13 @ @ public class RowAndDeletionMergeIteratorTest 
 { 
 Iterator < Row > rowIterator = createRowIterator ( ) ; 
 
 - int delTime = nowInSeconds + 1 ; 
 - long timestamp = toMillis ( delTime ) ; 
 + int delTime1 = nowInSeconds + 1 ; 
 + long timestamp1 = toMillis ( delTime1 ) ; 
 + int delTime2 = delTime1 + 1 ; 
 + long timestamp2 = toMillis ( delTime2 ) ; 
 
 - Iterator < RangeTombstone > rangeTombstoneIterator = createRangeTombstoneIterator ( lessThan ( 2 , timestamp , delTime ) , 
 - atLeast ( 2 , timestamp , delTime ) ) ; 
 + Iterator < RangeTombstone > rangeTombstoneIterator = createRangeTombstoneIterator ( lessThan ( 2 , timestamp1 , delTime1 ) , 
 + atLeast ( 2 , timestamp2 , delTime2 ) ) ; 
 
 UnfilteredRowIterator iterator = createMergeIterator ( rowIterator , rangeTombstoneIterator , false ) ; 
 
 @ @ - 345 , 6 + 350 , 29 @ @ public class RowAndDeletionMergeIteratorTest 
 } 
 
 
 + / * * 
 + * RTL doesn ' t correctly merge range tombstones in some situations ( see CASSANDRA - 14894 ) 
 + * / 
 + @ Test 
 + public void testWithNoopBoundaryMarkers ( ) 
 + { 
 + PartitionUpdate update = new PartitionUpdate ( cfm , dk , cfm . partitionColumns ( ) , 1 ) ; 
 + RangeTombstoneList rtl = new RangeTombstoneList ( cfm . comparator , 10 ) ; 
 + rtl . add ( rt ( 1 , 2 , 5 , 5 ) ) ; 
 + rtl . add ( rt ( 3 , 4 , 5 , 5 ) ) ; 
 + rtl . add ( rt ( 5 , 6 , 5 , 5 ) ) ; 
 + rtl . add ( rt ( 0 , 8 , 6 , 6 ) ) ; / / < - supersedes all other tombstones 
 + 
 + Assert . assertEquals ( 3 , rtl . size ( ) ) ; 
 + 
 + try ( UnfilteredRowIterator partition = createMergeIterator ( update . iterator ( ) , rtl . iterator ( ) , false ) ) 
 + { 
 + assertRtMarker ( partition . next ( ) , ClusteringPrefix . Kind . INCL _ START _ BOUND , 0 ) ; 
 + assertRtMarker ( partition . next ( ) , ClusteringPrefix . Kind . INCL _ END _ BOUND , 8 ) ; 
 + assertFalse ( partition . hasNext ( ) ) ; 
 + } 
 + } 
 + 
 private void assertRtMarker ( Unfiltered unfiltered , Bound bound ) 
 { 
 assertEquals ( Unfiltered . Kind . RANGE _ TOMBSTONE _ MARKER , unfiltered . kind ( ) ) ; 
 @ @ - 436 , 6 + 464 , 11 @ @ public class RowAndDeletionMergeIteratorTest 
 return new RangeTombstone ( Slice . make ( startBound , endBound ) , new DeletionTime ( tstamp , delTime ) ) ; 
 } 
 
 + private static RangeTombstone rt ( int start , int end , long tstamp , int delTime ) 
 + { 
 + return rt ( start , true , end , true , tstamp , delTime ) ; 
 + } 
 + 
 private static ByteBuffer bb ( int i ) 
 { 
 return ByteBufferUtil . bytes ( i ) ;

NEAREST DIFF:
diff - - git a / NEWS . txt b / NEWS . txt 
 index fc401b8 . . cc3c18e 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 14 , 6 + 14 , 8 @ @ by version X , but the inverse is not necessarily the case . ) 
 
 Upgrading 
 - - - - - - - - - 
 + - Compression is enabled by default on newly created ColumnFamilies 
 + ( and unchanged for ColumnFamilies created prior to upgrading ) . 
 - The KsDef . replication _ factor field ( deprecated since 0 . 8 ) has 
 been removed . Older clients will need to be updated to be able 
 to continue to created and update keyspaces . 
 @ @ - 59 , 6 + 61 , 7 @ @ Features 
 - Hadoop : a new BulkOutputFormat is included which will directly write 
 SSTables locally and then stream them into the cluster . 
 - Hadoop : KeyRange . filter is now supported with ColumnFamilyInputFormat 
 + - Hadoop wide row mode added to ColumnFamilyInputFormat 
 - The bulk loader is not longer a fat client ; it can be run from an 
 existing machine in a cluster . 
 - A new write survey mode has been added , similar to bootstrap ( enabled via 
 @ @ - 69 , 6 + 72 , 7 @ @ Features 
 threshold . 
 - Off - heap caches no longer require JNA . 
 - Streaming is now multithreaded . 
 + - Compactions may now be aborted via JMX or nodetool . 
 
 
 1 . 0 . 8
