BLEU SCORE: 0.041961149062965476

TEST MSG: Version and licenses for 2 . 0 . 10 release
GENERATED MSG: Pig support for hadoop CqlInputFormat

TEST DIFF (one line): diff - - git a / NEWS . txt b / NEWS . txt <nl> index 79212f8 . . 9b521e4 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 72 , 13 + 72 , 12 @ @ Upgrading <nl> <nl> <nl> 2 . 0 . 10 <nl> - = = = = <nl> + = = = = = = <nl> New features <nl> - - - - - - - - - - - - <nl> - CqlPaginRecordReader and CqlPagingInputFormat have both been removed . <nl> Use CqlInputFormat instead . <nl> - - If you are using Leveled Compaction , you can now disable doing <nl> - size - tiered <nl> + - If you are using Leveled Compaction , you can now disable doing size - tiered <nl> compaction in L0 by starting Cassandra with - Dcassandra . disable _ stcs _ in _ l0 <nl> ( see CASSANDRA - 6621 for details ) . <nl> - Shuffle and taketoken have been removed . For clusters that choose to <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / pig / CqlNativeStorage . java b / src / java / org / apache / cassandra / hadoop / pig / CqlNativeStorage . java <nl> new file mode 100644 <nl> index 0000000 . . 6cce4a9 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / hadoop / pig / CqlNativeStorage . java <nl> @ @ - 0 , 0 + 1 , 308 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . hadoop . pig ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . Iterator ; <nl> + import java . util . Map ; <nl> + <nl> + import org . apache . cassandra . db . BufferCell ; <nl> + import org . apache . cassandra . db . Cell ; <nl> + import org . apache . cassandra . db . composites . CellNames ; <nl> + import org . apache . cassandra . db . marshal . AbstractType ; <nl> + import org . apache . cassandra . hadoop . ConfigHelper ; <nl> + import org . apache . cassandra . hadoop . cql3 . CqlConfigHelper ; <nl> + import org . apache . cassandra . thrift . CfDef ; <nl> + import org . apache . cassandra . thrift . ColumnDef ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . hadoop . mapreduce . Job ; <nl> + import org . apache . hadoop . mapreduce . RecordReader ; <nl> + import org . apache . pig . backend . hadoop . executionengine . mapReduceLayer . PigSplit ; <nl> + import org . apache . pig . data . Tuple ; <nl> + import org . apache . pig . data . TupleFactory ; <nl> + <nl> + import com . datastax . driver . core . Row ; <nl> + <nl> + public class CqlNativeStorage extends CqlStorage <nl> + { <nl> + private RecordReader < Long , Row > reader ; <nl> + private String nativePort ; <nl> + private String nativeCoreConnections ; <nl> + private String nativeMaxConnections ; <nl> + private String nativeMinSimultReqs ; <nl> + private String nativeMaxSimultReqs ; <nl> + private String nativeConnectionTimeout ; <nl> + private String nativeReadConnectionTimeout ; <nl> + private String nativeReceiveBufferSize ; <nl> + private String nativeSendBufferSize ; <nl> + private String nativeSolinger ; <nl> + private String nativeTcpNodelay ; <nl> + private String nativeReuseAddress ; <nl> + private String nativeKeepAlive ; <nl> + private String nativeAuthProvider ; <nl> + private String nativeSSLTruststorePath ; <nl> + private String nativeSSLKeystorePath ; <nl> + private String nativeSSLTruststorePassword ; <nl> + private String nativeSSLKeystorePassword ; <nl> + private String nativeSSLCipherSuites ; <nl> + private String inputCql ; <nl> + <nl> + public CqlNativeStorage ( ) <nl> + { <nl> + this ( 1000 ) ; <nl> + } <nl> + <nl> + / * * @ param pageSize limit number of CQL rows to fetch in a thrift request * / <nl> + public CqlNativeStorage ( int pageSize ) <nl> + { <nl> + super ( pageSize ) ; <nl> + DEFAULT _ INPUT _ FORMAT = " org . apache . cassandra . hadoop . cql3 . CqlInputFormat " ; <nl> + } <nl> + <nl> + public void prepareToRead ( RecordReader reader , PigSplit split ) <nl> + { <nl> + this . reader = reader ; <nl> + } <nl> + <nl> + / * * get next row * / <nl> + public Tuple getNext ( ) throws IOException <nl> + { <nl> + try <nl> + { <nl> + / / load the next pair <nl> + if ( ! reader . nextKeyValue ( ) ) <nl> + return null ; <nl> + <nl> + CfInfo cfInfo = getCfInfo ( loadSignature ) ; <nl> + CfDef cfDef = cfInfo . cfDef ; <nl> + Row row = reader . getCurrentValue ( ) ; <nl> + Tuple tuple = TupleFactory . getInstance ( ) . newTuple ( cfDef . column _ metadata . size ( ) ) ; <nl> + Iterator < ColumnDef > itera = cfDef . column _ metadata . iterator ( ) ; <nl> + int i = 0 ; <nl> + while ( itera . hasNext ( ) ) <nl> + { <nl> + ColumnDef cdef = itera . next ( ) ; <nl> + ByteBuffer columnValue = row . getBytesUnsafe ( ByteBufferUtil . string ( cdef . name . duplicate ( ) ) ) ; <nl> + if ( columnValue ! = null ) <nl> + { <nl> + Cell cell = new BufferCell ( CellNames . simpleDense ( cdef . name ) , columnValue ) ; <nl> + AbstractType < ? > validator = getValidatorMap ( cfDef ) . get ( cdef . name ) ; <nl> + setTupleValue ( tuple , i , cqlColumnToObj ( cell , cfDef ) , validator ) ; <nl> + } <nl> + else <nl> + tuple . set ( i , null ) ; <nl> + i + + ; <nl> + } <nl> + return tuple ; <nl> + } <nl> + catch ( InterruptedException e ) <nl> + { <nl> + throw new IOException ( e . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + / * * set read configuration settings * / <nl> + public void setLocation ( String location , Job job ) throws IOException <nl> + { <nl> + conf = job . getConfiguration ( ) ; <nl> + setLocationFromUri ( location ) ; <nl> + <nl> + if ( username ! = null & & password ! = null ) <nl> + { <nl> + ConfigHelper . setInputKeyspaceUserNameAndPassword ( conf , username , password ) ; <nl> + CqlConfigHelper . setUserNameAndPassword ( conf , username , password ) ; <nl> + } <nl> + if ( splitSize > 0 ) <nl> + ConfigHelper . setInputSplitSize ( conf , splitSize ) ; <nl> + if ( partitionerClass ! = null ) <nl> + ConfigHelper . setInputPartitioner ( conf , partitionerClass ) ; <nl> + if ( initHostAddress ! = null ) <nl> + ConfigHelper . setInputInitialAddress ( conf , initHostAddress ) ; <nl> + if ( rpcPort ! = null ) <nl> + ConfigHelper . setInputRpcPort ( conf , rpcPort ) ; <nl> + if ( nativePort ! = null ) <nl> + CqlConfigHelper . setInputNativePort ( conf , nativePort ) ; <nl> + if ( nativeCoreConnections ! = null ) <nl> + CqlConfigHelper . setInputCoreConnections ( conf , nativeCoreConnections ) ; <nl> + if ( nativeMaxConnections ! = null ) <nl> + CqlConfigHelper . setInputMaxConnections ( conf , nativeMaxConnections ) ; <nl> + if ( nativeMinSimultReqs ! = null ) <nl> + CqlConfigHelper . setInputMinSimultReqPerConnections ( conf , nativeMinSimultReqs ) ; <nl> + if ( nativeMaxSimultReqs ! = null ) <nl> + CqlConfigHelper . setInputMaxSimultReqPerConnections ( conf , nativeMaxSimultReqs ) ; <nl> + if ( nativeConnectionTimeout ! = null ) <nl> + CqlConfigHelper . setInputNativeConnectionTimeout ( conf , nativeConnectionTimeout ) ; <nl> + if ( nativeReadConnectionTimeout ! = null ) <nl> + CqlConfigHelper . setInputNativeReadConnectionTimeout ( conf , nativeReadConnectionTimeout ) ; <nl> + if ( nativeReceiveBufferSize ! = null ) <nl> + CqlConfigHelper . setInputNativeReceiveBufferSize ( conf , nativeReceiveBufferSize ) ; <nl> + if ( nativeSendBufferSize ! = null ) <nl> + CqlConfigHelper . setInputNativeSendBufferSize ( conf , nativeSendBufferSize ) ; <nl> + if ( nativeSolinger ! = null ) <nl> + CqlConfigHelper . setInputNativeSolinger ( conf , nativeSolinger ) ; <nl> + if ( nativeTcpNodelay ! = null ) <nl> + CqlConfigHelper . setInputNativeTcpNodelay ( conf , nativeTcpNodelay ) ; <nl> + if ( nativeReuseAddress ! = null ) <nl> + CqlConfigHelper . setInputNativeReuseAddress ( conf , nativeReuseAddress ) ; <nl> + if ( nativeKeepAlive ! = null ) <nl> + CqlConfigHelper . setInputNativeKeepAlive ( conf , nativeKeepAlive ) ; <nl> + if ( nativeAuthProvider ! = null ) <nl> + CqlConfigHelper . setInputNativeAuthProvider ( conf , nativeAuthProvider ) ; <nl> + if ( nativeSSLTruststorePath ! = null ) <nl> + CqlConfigHelper . setInputNativeSSLTruststorePath ( conf , nativeSSLTruststorePath ) ; <nl> + if ( nativeSSLKeystorePath ! = null ) <nl> + CqlConfigHelper . setInputNativeSSLKeystorePath ( conf , nativeSSLKeystorePath ) ; <nl> + if ( nativeSSLTruststorePassword ! = null ) <nl> + CqlConfigHelper . setInputNativeSSLTruststorePassword ( conf , nativeSSLTruststorePassword ) ; <nl> + if ( nativeSSLKeystorePassword ! = null ) <nl> + CqlConfigHelper . setInputNativeSSLKeystorePassword ( conf , nativeSSLKeystorePassword ) ; <nl> + if ( nativeSSLCipherSuites ! = null ) <nl> + CqlConfigHelper . setInputNativeSSLCipherSuites ( conf , nativeSSLCipherSuites ) ; <nl> + <nl> + ConfigHelper . setInputColumnFamily ( conf , keyspace , column _ family ) ; <nl> + setConnectionInformation ( ) ; <nl> + <nl> + CqlConfigHelper . setInputCQLPageRowSize ( conf , String . valueOf ( pageSize ) ) ; <nl> + CqlConfigHelper . setInputCql ( conf , inputCql ) ; <nl> + if ( System . getenv ( PIG _ INPUT _ SPLIT _ SIZE ) ! = null ) <nl> + { <nl> + try <nl> + { <nl> + ConfigHelper . setInputSplitSize ( conf , Integer . parseInt ( System . getenv ( PIG _ INPUT _ SPLIT _ SIZE ) ) ) ; <nl> + } <nl> + catch ( NumberFormatException e ) <nl> + { <nl> + throw new IOException ( " PIG _ INPUT _ SPLIT _ SIZE is not a number " , e ) ; <nl> + } <nl> + } <nl> + <nl> + if ( ConfigHelper . getInputInitialAddress ( conf ) = = null ) <nl> + throw new IOException ( " PIG _ INPUT _ INITIAL _ ADDRESS or PIG _ INITIAL _ ADDRESS environment variable not set " ) ; <nl> + if ( ConfigHelper . getInputPartitioner ( conf ) = = null ) <nl> + throw new IOException ( " PIG _ INPUT _ PARTITIONER or PIG _ PARTITIONER environment variable not set " ) ; <nl> + if ( loadSignature = = null ) <nl> + loadSignature = location ; <nl> + <nl> + initSchema ( loadSignature ) ; <nl> + } <nl> + <nl> + private void setLocationFromUri ( String location ) throws IOException <nl> + { <nl> + try <nl> + { <nl> + if ( ! location . startsWith ( " cql : / / " ) ) <nl> + throw new Exception ( " Bad scheme : " + location ) ; <nl> + <nl> + String [ ] urlParts = location . split ( " \ \ ? " ) ; <nl> + if ( urlParts . length > 1 ) <nl> + { <nl> + Map < String , String > urlQuery = getQueryMap ( urlParts [ 1 ] ) ; <nl> + <nl> + / / each page row size <nl> + if ( urlQuery . containsKey ( " page _ size " ) ) <nl> + pageSize = Integer . parseInt ( urlQuery . get ( " page _ size " ) ) ; <nl> + <nl> + / / output prepared statement <nl> + if ( urlQuery . containsKey ( " output _ query " ) ) <nl> + outputQuery = urlQuery . get ( " output _ query " ) ; <nl> + <nl> + / / split size <nl> + if ( urlQuery . containsKey ( " split _ size " ) ) <nl> + splitSize = Integer . parseInt ( urlQuery . get ( " split _ size " ) ) ; <nl> + if ( urlQuery . containsKey ( " partitioner " ) ) <nl> + partitionerClass = urlQuery . get ( " partitioner " ) ; <nl> + if ( urlQuery . containsKey ( " use _ secondary " ) ) <nl> + usePartitionFilter = Boolean . parseBoolean ( urlQuery . get ( " use _ secondary " ) ) ; <nl> + if ( urlQuery . containsKey ( " init _ address " ) ) <nl> + initHostAddress = urlQuery . get ( " init _ address " ) ; <nl> + <nl> + if ( urlQuery . containsKey ( " native _ port " ) ) <nl> + nativePort = urlQuery . get ( " native _ port " ) ; <nl> + if ( urlQuery . containsKey ( " core _ conns " ) ) <nl> + nativeCoreConnections = urlQuery . get ( " core _ conns " ) ; <nl> + if ( urlQuery . containsKey ( " max _ conns " ) ) <nl> + nativeMaxConnections = urlQuery . get ( " max _ conns " ) ; <nl> + if ( urlQuery . containsKey ( " min _ simult _ reqs " ) ) <nl> + nativeMinSimultReqs = urlQuery . get ( " min _ simult _ reqs " ) ; <nl> + if ( urlQuery . containsKey ( " max _ simult _ reqs " ) ) <nl> + nativeMaxSimultReqs = urlQuery . get ( " max _ simult _ reqs " ) ; <nl> + if ( urlQuery . containsKey ( " native _ timeout " ) ) <nl> + nativeConnectionTimeout = urlQuery . get ( " native _ timeout " ) ; <nl> + if ( urlQuery . containsKey ( " native _ read _ timeout " ) ) <nl> + nativeReadConnectionTimeout = urlQuery . get ( " native _ read _ timeout " ) ; <nl> + if ( urlQuery . containsKey ( " rec _ buff _ size " ) ) <nl> + nativeReceiveBufferSize = urlQuery . get ( " rec _ buff _ size " ) ; <nl> + if ( urlQuery . containsKey ( " send _ buff _ size " ) ) <nl> + nativeSendBufferSize = urlQuery . get ( " send _ buff _ size " ) ; <nl> + if ( urlQuery . containsKey ( " solinger " ) ) <nl> + nativeSolinger = urlQuery . get ( " solinger " ) ; <nl> + if ( urlQuery . containsKey ( " tcp _ nodelay " ) ) <nl> + nativeTcpNodelay = urlQuery . get ( " tcp _ nodelay " ) ; <nl> + if ( urlQuery . containsKey ( " reuse _ address " ) ) <nl> + nativeReuseAddress = urlQuery . get ( " reuse _ address " ) ; <nl> + if ( urlQuery . containsKey ( " keep _ alive " ) ) <nl> + nativeKeepAlive = urlQuery . get ( " keep _ alive " ) ; <nl> + if ( urlQuery . containsKey ( " auth _ provider " ) ) <nl> + nativeAuthProvider = urlQuery . get ( " auth _ provider " ) ; <nl> + if ( urlQuery . containsKey ( " trust _ store _ path " ) ) <nl> + nativeSSLTruststorePath = urlQuery . get ( " trust _ store _ path " ) ; <nl> + if ( urlQuery . containsKey ( " key _ store _ path " ) ) <nl> + nativeSSLKeystorePath = urlQuery . get ( " key _ store _ path " ) ; <nl> + if ( urlQuery . containsKey ( " trust _ store _ password " ) ) <nl> + nativeSSLTruststorePassword = urlQuery . get ( " trust _ store _ password " ) ; <nl> + if ( urlQuery . containsKey ( " key _ store _ password " ) ) <nl> + nativeSSLKeystorePassword = urlQuery . get ( " key _ store _ password " ) ; <nl> + if ( urlQuery . containsKey ( " cipher _ suites " ) ) <nl> + nativeSSLCipherSuites = urlQuery . get ( " cipher _ suites " ) ; <nl> + if ( urlQuery . containsKey ( " input _ cql " ) ) <nl> + inputCql = urlQuery . get ( " input _ cql " ) ; <nl> + if ( urlQuery . containsKey ( " rpc _ port " ) ) <nl> + rpcPort = urlQuery . get ( " rpc _ port " ) ; <nl> + } <nl> + String [ ] parts = urlParts [ 0 ] . split ( " / + " ) ; <nl> + String [ ] credentialsAndKeyspace = parts [ 1 ] . split ( " @ " ) ; <nl> + if ( credentialsAndKeyspace . length > 1 ) <nl> + { <nl> + String [ ] credentials = credentialsAndKeyspace [ 0 ] . split ( " : " ) ; <nl> + username = credentials [ 0 ] ; <nl> + password = credentials [ 1 ] ; <nl> + keyspace = credentialsAndKeyspace [ 1 ] ; <nl> + } <nl> + else <nl> + { <nl> + keyspace = parts [ 1 ] ; <nl> + } <nl> + column _ family = parts [ 2 ] ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new IOException ( " Expected ' cql : / / [ username : password @ ] < keyspace > / < columnfamily > " + <nl> + " [ ? [ page _ size = < size > ] [ & columns = < col1 , col2 > ] [ & output _ query = < prepared _ statement > ] " + <nl> + " [ & where _ clause = < clause > ] [ & split _ size = < size > ] [ & partitioner = < partitioner > ] [ & use _ secondary = true | false ] " + <nl> + " [ & init _ address = < host > ] [ & native _ port = < native _ port > ] [ & core _ conns = < core _ conns > ] " + <nl> + " [ & max _ conns = < max _ conns > ] [ & min _ simult _ reqs = < min _ simult _ reqs > ] [ & max _ simult _ reqs = < max _ simult _ reqs > ] " + <nl> + " [ & native _ timeout = < native _ timeout > ] [ & native _ read _ timeout = < native _ read _ timeout > ] [ & rec _ buff _ size = < rec _ buff _ size > ] " + <nl> + " [ & send _ buff _ size = < send _ buff _ size > ] [ & solinger = < solinger > ] [ & tcp _ nodelay = < tcp _ nodelay > ] [ & reuse _ address = < reuse _ address > ] " + <nl> + " [ & keep _ alive = < keep _ alive > ] [ & auth _ provider = < auth _ provider > ] [ & trust _ store _ path = < trust _ store _ path > ] " + <nl> + " [ & key _ store _ path = < key _ store _ path > ] [ & trust _ store _ password = < trust _ store _ password > ] " + <nl> + " [ & key _ store _ password = < key _ store _ password > ] [ & cipher _ suites = < cipher _ suites > ] [ & input _ cql = < input _ cql > ] ] ' : " + e . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / NEWS . txt b / NEWS . txt 
 index 79212f8 . . 9b521e4 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 72 , 13 + 72 , 12 @ @ Upgrading 
 
 
 2 . 0 . 10 
 - = = = = 
 + = = = = = = 
 New features 
 - - - - - - - - - - - - 
 - CqlPaginRecordReader and CqlPagingInputFormat have both been removed . 
 Use CqlInputFormat instead . 
 - - If you are using Leveled Compaction , you can now disable doing 
 - size - tiered 
 + - If you are using Leveled Compaction , you can now disable doing size - tiered 
 compaction in L0 by starting Cassandra with - Dcassandra . disable _ stcs _ in _ l0 
 ( see CASSANDRA - 6621 for details ) . 
 - Shuffle and taketoken have been removed . For clusters that choose to 
 diff - - git a / src / java / org / apache / cassandra / hadoop / pig / CqlNativeStorage . java b / src / java / org / apache / cassandra / hadoop / pig / CqlNativeStorage . java 
 new file mode 100644 
 index 0000000 . . 6cce4a9 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / hadoop / pig / CqlNativeStorage . java 
 @ @ - 0 , 0 + 1 , 308 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . hadoop . pig ; 
 + 
 + import java . io . IOException ; 
 + import java . nio . ByteBuffer ; 
 + import java . util . Iterator ; 
 + import java . util . Map ; 
 + 
 + import org . apache . cassandra . db . BufferCell ; 
 + import org . apache . cassandra . db . Cell ; 
 + import org . apache . cassandra . db . composites . CellNames ; 
 + import org . apache . cassandra . db . marshal . AbstractType ; 
 + import org . apache . cassandra . hadoop . ConfigHelper ; 
 + import org . apache . cassandra . hadoop . cql3 . CqlConfigHelper ; 
 + import org . apache . cassandra . thrift . CfDef ; 
 + import org . apache . cassandra . thrift . ColumnDef ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . hadoop . mapreduce . Job ; 
 + import org . apache . hadoop . mapreduce . RecordReader ; 
 + import org . apache . pig . backend . hadoop . executionengine . mapReduceLayer . PigSplit ; 
 + import org . apache . pig . data . Tuple ; 
 + import org . apache . pig . data . TupleFactory ; 
 + 
 + import com . datastax . driver . core . Row ; 
 + 
 + public class CqlNativeStorage extends CqlStorage 
 + { 
 + private RecordReader < Long , Row > reader ; 
 + private String nativePort ; 
 + private String nativeCoreConnections ; 
 + private String nativeMaxConnections ; 
 + private String nativeMinSimultReqs ; 
 + private String nativeMaxSimultReqs ; 
 + private String nativeConnectionTimeout ; 
 + private String nativeReadConnectionTimeout ; 
 + private String nativeReceiveBufferSize ; 
 + private String nativeSendBufferSize ; 
 + private String nativeSolinger ; 
 + private String nativeTcpNodelay ; 
 + private String nativeReuseAddress ; 
 + private String nativeKeepAlive ; 
 + private String nativeAuthProvider ; 
 + private String nativeSSLTruststorePath ; 
 + private String nativeSSLKeystorePath ; 
 + private String nativeSSLTruststorePassword ; 
 + private String nativeSSLKeystorePassword ; 
 + private String nativeSSLCipherSuites ; 
 + private String inputCql ; 
 + 
 + public CqlNativeStorage ( ) 
 + { 
 + this ( 1000 ) ; 
 + } 
 + 
 + / * * @ param pageSize limit number of CQL rows to fetch in a thrift request * / 
 + public CqlNativeStorage ( int pageSize ) 
 + { 
 + super ( pageSize ) ; 
 + DEFAULT _ INPUT _ FORMAT = " org . apache . cassandra . hadoop . cql3 . CqlInputFormat " ; 
 + } 
 + 
 + public void prepareToRead ( RecordReader reader , PigSplit split ) 
 + { 
 + this . reader = reader ; 
 + } 
 + 
 + / * * get next row * / 
 + public Tuple getNext ( ) throws IOException 
 + { 
 + try 
 + { 
 + / / load the next pair 
 + if ( ! reader . nextKeyValue ( ) ) 
 + return null ; 
 + 
 + CfInfo cfInfo = getCfInfo ( loadSignature ) ; 
 + CfDef cfDef = cfInfo . cfDef ; 
 + Row row = reader . getCurrentValue ( ) ; 
 + Tuple tuple = TupleFactory . getInstance ( ) . newTuple ( cfDef . column _ metadata . size ( ) ) ; 
 + Iterator < ColumnDef > itera = cfDef . column _ metadata . iterator ( ) ; 
 + int i = 0 ; 
 + while ( itera . hasNext ( ) ) 
 + { 
 + ColumnDef cdef = itera . next ( ) ; 
 + ByteBuffer columnValue = row . getBytesUnsafe ( ByteBufferUtil . string ( cdef . name . duplicate ( ) ) ) ; 
 + if ( columnValue ! = null ) 
 + { 
 + Cell cell = new BufferCell ( CellNames . simpleDense ( cdef . name ) , columnValue ) ; 
 + AbstractType < ? > validator = getValidatorMap ( cfDef ) . get ( cdef . name ) ; 
 + setTupleValue ( tuple , i , cqlColumnToObj ( cell , cfDef ) , validator ) ; 
 + } 
 + else 
 + tuple . set ( i , null ) ; 
 + i + + ; 
 + } 
 + return tuple ; 
 + } 
 + catch ( InterruptedException e ) 
 + { 
 + throw new IOException ( e . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 + / * * set read configuration settings * / 
 + public void setLocation ( String location , Job job ) throws IOException 
 + { 
 + conf = job . getConfiguration ( ) ; 
 + setLocationFromUri ( location ) ; 
 + 
 + if ( username ! = null & & password ! = null ) 
 + { 
 + ConfigHelper . setInputKeyspaceUserNameAndPassword ( conf , username , password ) ; 
 + CqlConfigHelper . setUserNameAndPassword ( conf , username , password ) ; 
 + } 
 + if ( splitSize > 0 ) 
 + ConfigHelper . setInputSplitSize ( conf , splitSize ) ; 
 + if ( partitionerClass ! = null ) 
 + ConfigHelper . setInputPartitioner ( conf , partitionerClass ) ; 
 + if ( initHostAddress ! = null ) 
 + ConfigHelper . setInputInitialAddress ( conf , initHostAddress ) ; 
 + if ( rpcPort ! = null ) 
 + ConfigHelper . setInputRpcPort ( conf , rpcPort ) ; 
 + if ( nativePort ! = null ) 
 + CqlConfigHelper . setInputNativePort ( conf , nativePort ) ; 
 + if ( nativeCoreConnections ! = null ) 
 + CqlConfigHelper . setInputCoreConnections ( conf , nativeCoreConnections ) ; 
 + if ( nativeMaxConnections ! = null ) 
 + CqlConfigHelper . setInputMaxConnections ( conf , nativeMaxConnections ) ; 
 + if ( nativeMinSimultReqs ! = null ) 
 + CqlConfigHelper . setInputMinSimultReqPerConnections ( conf , nativeMinSimultReqs ) ; 
 + if ( nativeMaxSimultReqs ! = null ) 
 + CqlConfigHelper . setInputMaxSimultReqPerConnections ( conf , nativeMaxSimultReqs ) ; 
 + if ( nativeConnectionTimeout ! = null ) 
 + CqlConfigHelper . setInputNativeConnectionTimeout ( conf , nativeConnectionTimeout ) ; 
 + if ( nativeReadConnectionTimeout ! = null ) 
 + CqlConfigHelper . setInputNativeReadConnectionTimeout ( conf , nativeReadConnectionTimeout ) ; 
 + if ( nativeReceiveBufferSize ! = null ) 
 + CqlConfigHelper . setInputNativeReceiveBufferSize ( conf , nativeReceiveBufferSize ) ; 
 + if ( nativeSendBufferSize ! = null ) 
 + CqlConfigHelper . setInputNativeSendBufferSize ( conf , nativeSendBufferSize ) ; 
 + if ( nativeSolinger ! = null ) 
 + CqlConfigHelper . setInputNativeSolinger ( conf , nativeSolinger ) ; 
 + if ( nativeTcpNodelay ! = null ) 
 + CqlConfigHelper . setInputNativeTcpNodelay ( conf , nativeTcpNodelay ) ; 
 + if ( nativeReuseAddress ! = null ) 
 + CqlConfigHelper . setInputNativeReuseAddress ( conf , nativeReuseAddress ) ; 
 + if ( nativeKeepAlive ! = null ) 
 + CqlConfigHelper . setInputNativeKeepAlive ( conf , nativeKeepAlive ) ; 
 + if ( nativeAuthProvider ! = null ) 
 + CqlConfigHelper . setInputNativeAuthProvider ( conf , nativeAuthProvider ) ; 
 + if ( nativeSSLTruststorePath ! = null ) 
 + CqlConfigHelper . setInputNativeSSLTruststorePath ( conf , nativeSSLTruststorePath ) ; 
 + if ( nativeSSLKeystorePath ! = null ) 
 + CqlConfigHelper . setInputNativeSSLKeystorePath ( conf , nativeSSLKeystorePath ) ; 
 + if ( nativeSSLTruststorePassword ! = null ) 
 + CqlConfigHelper . setInputNativeSSLTruststorePassword ( conf , nativeSSLTruststorePassword ) ; 
 + if ( nativeSSLKeystorePassword ! = null ) 
 + CqlConfigHelper . setInputNativeSSLKeystorePassword ( conf , nativeSSLKeystorePassword ) ; 
 + if ( nativeSSLCipherSuites ! = null ) 
 + CqlConfigHelper . setInputNativeSSLCipherSuites ( conf , nativeSSLCipherSuites ) ; 
 + 
 + ConfigHelper . setInputColumnFamily ( conf , keyspace , column _ family ) ; 
 + setConnectionInformation ( ) ; 
 + 
 + CqlConfigHelper . setInputCQLPageRowSize ( conf , String . valueOf ( pageSize ) ) ; 
 + CqlConfigHelper . setInputCql ( conf , inputCql ) ; 
 + if ( System . getenv ( PIG _ INPUT _ SPLIT _ SIZE ) ! = null ) 
 + { 
 + try 
 + { 
 + ConfigHelper . setInputSplitSize ( conf , Integer . parseInt ( System . getenv ( PIG _ INPUT _ SPLIT _ SIZE ) ) ) ; 
 + } 
 + catch ( NumberFormatException e ) 
 + { 
 + throw new IOException ( " PIG _ INPUT _ SPLIT _ SIZE is not a number " , e ) ; 
 + } 
 + } 
 + 
 + if ( ConfigHelper . getInputInitialAddress ( conf ) = = null ) 
 + throw new IOException ( " PIG _ INPUT _ INITIAL _ ADDRESS or PIG _ INITIAL _ ADDRESS environment variable not set " ) ; 
 + if ( ConfigHelper . getInputPartitioner ( conf ) = = null ) 
 + throw new IOException ( " PIG _ INPUT _ PARTITIONER or PIG _ PARTITIONER environment variable not set " ) ; 
 + if ( loadSignature = = null ) 
 + loadSignature = location ; 
 + 
 + initSchema ( loadSignature ) ; 
 + } 
 + 
 + private void setLocationFromUri ( String location ) throws IOException 
 + { 
 + try 
 + { 
 + if ( ! location . startsWith ( " cql : / / " ) ) 
 + throw new Exception ( " Bad scheme : " + location ) ; 
 + 
 + String [ ] urlParts = location . split ( " \ \ ? " ) ; 
 + if ( urlParts . length > 1 ) 
 + { 
 + Map < String , String > urlQuery = getQueryMap ( urlParts [ 1 ] ) ; 
 + 
 + / / each page row size 
 + if ( urlQuery . containsKey ( " page _ size " ) ) 
 + pageSize = Integer . parseInt ( urlQuery . get ( " page _ size " ) ) ; 
 + 
 + / / output prepared statement 
 + if ( urlQuery . containsKey ( " output _ query " ) ) 
 + outputQuery = urlQuery . get ( " output _ query " ) ; 
 + 
 + / / split size 
 + if ( urlQuery . containsKey ( " split _ size " ) ) 
 + splitSize = Integer . parseInt ( urlQuery . get ( " split _ size " ) ) ; 
 + if ( urlQuery . containsKey ( " partitioner " ) ) 
 + partitionerClass = urlQuery . get ( " partitioner " ) ; 
 + if ( urlQuery . containsKey ( " use _ secondary " ) ) 
 + usePartitionFilter = Boolean . parseBoolean ( urlQuery . get ( " use _ secondary " ) ) ; 
 + if ( urlQuery . containsKey ( " init _ address " ) ) 
 + initHostAddress = urlQuery . get ( " init _ address " ) ; 
 + 
 + if ( urlQuery . containsKey ( " native _ port " ) ) 
 + nativePort = urlQuery . get ( " native _ port " ) ; 
 + if ( urlQuery . containsKey ( " core _ conns " ) ) 
 + nativeCoreConnections = urlQuery . get ( " core _ conns " ) ; 
 + if ( urlQuery . containsKey ( " max _ conns " ) ) 
 + nativeMaxConnections = urlQuery . get ( " max _ conns " ) ; 
 + if ( urlQuery . containsKey ( " min _ simult _ reqs " ) ) 
 + nativeMinSimultReqs = urlQuery . get ( " min _ simult _ reqs " ) ; 
 + if ( urlQuery . containsKey ( " max _ simult _ reqs " ) ) 
 + nativeMaxSimultReqs = urlQuery . get ( " max _ simult _ reqs " ) ; 
 + if ( urlQuery . containsKey ( " native _ timeout " ) ) 
 + nativeConnectionTimeout = urlQuery . get ( " native _ timeout " ) ; 
 + if ( urlQuery . containsKey ( " native _ read _ timeout " ) ) 
 + nativeReadConnectionTimeout = urlQuery . get ( " native _ read _ timeout " ) ; 
 + if ( urlQuery . containsKey ( " rec _ buff _ size " ) ) 
 + nativeReceiveBufferSize = urlQuery . get ( " rec _ buff _ size " ) ; 
 + if ( urlQuery . containsKey ( " send _ buff _ size " ) ) 
 + nativeSendBufferSize = urlQuery . get ( " send _ buff _ size " ) ; 
 + if ( urlQuery . containsKey ( " solinger " ) ) 
 + nativeSolinger = urlQuery . get ( " solinger " ) ; 
 + if ( urlQuery . containsKey ( " tcp _ nodelay " ) ) 
 + nativeTcpNodelay = urlQuery . get ( " tcp _ nodelay " ) ; 
 + if ( urlQuery . containsKey ( " reuse _ address " ) ) 
 + nativeReuseAddress = urlQuery . get ( " reuse _ address " ) ; 
 + if ( urlQuery . containsKey ( " keep _ alive " ) ) 
 + nativeKeepAlive = urlQuery . get ( " keep _ alive " ) ; 
 + if ( urlQuery . containsKey ( " auth _ provider " ) ) 
 + nativeAuthProvider = urlQuery . get ( " auth _ provider " ) ; 
 + if ( urlQuery . containsKey ( " trust _ store _ path " ) ) 
 + nativeSSLTruststorePath = urlQuery . get ( " trust _ store _ path " ) ; 
 + if ( urlQuery . containsKey ( " key _ store _ path " ) ) 
 + nativeSSLKeystorePath = urlQuery . get ( " key _ store _ path " ) ; 
 + if ( urlQuery . containsKey ( " trust _ store _ password " ) ) 
 + nativeSSLTruststorePassword = urlQuery . get ( " trust _ store _ password " ) ; 
 + if ( urlQuery . containsKey ( " key _ store _ password " ) ) 
 + nativeSSLKeystorePassword = urlQuery . get ( " key _ store _ password " ) ; 
 + if ( urlQuery . containsKey ( " cipher _ suites " ) ) 
 + nativeSSLCipherSuites = urlQuery . get ( " cipher _ suites " ) ; 
 + if ( urlQuery . containsKey ( " input _ cql " ) ) 
 + inputCql = urlQuery . get ( " input _ cql " ) ; 
 + if ( urlQuery . containsKey ( " rpc _ port " ) ) 
 + rpcPort = urlQuery . get ( " rpc _ port " ) ; 
 + } 
 + String [ ] parts = urlParts [ 0 ] . split ( " / + " ) ; 
 + String [ ] credentialsAndKeyspace = parts [ 1 ] . split ( " @ " ) ; 
 + if ( credentialsAndKeyspace . length > 1 ) 
 + { 
 + String [ ] credentials = credentialsAndKeyspace [ 0 ] . split ( " : " ) ; 
 + username = credentials [ 0 ] ; 
 + password = credentials [ 1 ] ; 
 + keyspace = credentialsAndKeyspace [ 1 ] ; 
 + } 
 + else 
 + { 
 + keyspace = parts [ 1 ] ; 
 + } 
 + column _ family = parts [ 2 ] ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new IOException ( " Expected ' cql : / / [ username : password @ ] < keyspace > / < columnfamily > " + 
 + " [ ? [ page _ size = < size > ] [ & columns = < col1 , col2 > ] [ & output _ query = < prepared _ statement > ] " + 
 + " [ & where _ clause = < clause > ] [ & split _ size = < size > ] [ & partitioner = < partitioner > ] [ & use _ secondary = true | false ] " + 
 + " [ & init _ address = < host > ] [ & native _ port = < native _ port > ] [ & core _ conns = < core _ conns > ] " + 
 + " [ & max _ conns = < max _ conns > ] [ & min _ simult _ reqs = < min _ simult _ reqs > ] [ & max _ simult _ reqs = < max _ simult _ reqs > ] " + 
 + " [ & native _ timeout = < native _ timeout > ] [ & native _ read _ timeout = < native _ read _ timeout > ] [ & rec _ buff _ size = < rec _ buff _ size > ] " + 
 + " [ & send _ buff _ size = < send _ buff _ size > ] [ & solinger = < solinger > ] [ & tcp _ nodelay = < tcp _ nodelay > ] [ & reuse _ address = < reuse _ address > ] " + 
 + " [ & keep _ alive = < keep _ alive > ] [ & auth _ provider = < auth _ provider > ] [ & trust _ store _ path = < trust _ store _ path > ] " + 
 + " [ & key _ store _ path = < key _ store _ path > ] [ & trust _ store _ password = < trust _ store _ password > ] " + 
 + " [ & key _ store _ password = < key _ store _ password > ] [ & cipher _ suites = < cipher _ suites > ] [ & input _ cql = < input _ cql > ] ] ' : " + e . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 + }

NEAREST DIFF:
ELIMINATEDSENTENCE
