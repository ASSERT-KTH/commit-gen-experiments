BLEU SCORE: 0.021504238591261653

TEST MSG: Add unit tests for enable / disable autocompaction
GENERATED MSG: Validate token ( ) args are in partition key order

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java <nl> index 76e3b88 . . 58fc062 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java <nl> @ @ - 21 , 32 + 21 , 140 @ @ import org . junit . Test ; <nl> <nl> import org . apache . cassandra . cql3 . CQLTester ; <nl> import org . apache . cassandra . cql3 . UntypedResultSet ; <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . Keyspace ; <nl> + import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertTrue ; <nl> <nl> public class CompactionsCQLTest extends CQLTester <nl> { <nl> @ Test <nl> - public void testTriggerMinorCompaction ( ) throws Throwable <nl> + public void testTriggerMinorCompactionSTCS ( ) throws Throwable <nl> { <nl> - createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) ; " ) ; <nl> - assertTrue ( Keyspace . open ( KEYSPACE ) . getColumnFamilyStore ( currentTable ( ) ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; <nl> + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) WITH compaction = { ' class ' : ' SizeTieredCompactionStrategy ' , ' min _ threshold ' : 2 } ; " ) ; <nl> + assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; <nl> execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; <nl> flush ( ) ; <nl> execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; <nl> flush ( ) ; <nl> + Thread . sleep ( 1000 ) ; <nl> + assertTrue ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTriggerMinorCompactionLCS ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) WITH compaction = { ' class ' : ' LeveledCompactionStrategy ' , ' sstable _ size _ in _ mb ' : 1 } ; " ) ; <nl> + assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; <nl> + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; <nl> + flush ( ) ; <nl> + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; <nl> + flush ( ) ; <nl> + Thread . sleep ( 1000 ) ; <nl> + assertTrue ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; <nl> + } <nl> + <nl> + <nl> + @ Test <nl> + public void testTriggerMinorCompactionDTCS ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) WITH compaction = { ' class ' : ' DateTieredCompactionStrategy ' , ' min _ threshold ' : 2 } ; " ) ; <nl> + assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; <nl> + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; <nl> + flush ( ) ; <nl> + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; <nl> + flush ( ) ; <nl> + Thread . sleep ( 1000 ) ; <nl> + assertTrue ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTriggerNoMinorCompactionSTCSDisabled ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) WITH compaction = { ' class ' : ' SizeTieredCompactionStrategy ' , ' min _ threshold ' : 2 , ' enabled ' : false } ; " ) ; <nl> + assertFalse ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; <nl> + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; <nl> + flush ( ) ; <nl> + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; <nl> + flush ( ) ; <nl> + Thread . sleep ( 1000 ) ; <nl> + assertFalse ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTriggerMinorCompactionSTCSNodetoolEnabled ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) WITH compaction = { ' class ' : ' SizeTieredCompactionStrategy ' , ' min _ threshold ' : 2 , ' enabled ' : false } ; " ) ; <nl> + assertFalse ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; <nl> + getCurrentColumnFamilyStore ( ) . enableAutoCompaction ( ) ; <nl> + assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; <nl> execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; <nl> flush ( ) ; <nl> execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; <nl> flush ( ) ; <nl> Thread . sleep ( 1000 ) ; <nl> + assertTrue ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTriggerNoMinorCompactionSTCSNodetoolDisabled ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) WITH compaction = { ' class ' : ' SizeTieredCompactionStrategy ' , ' min _ threshold ' : 2 , ' enabled ' : true } ; " ) ; <nl> + assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; <nl> + getCurrentColumnFamilyStore ( ) . disableAutoCompaction ( ) ; <nl> + assertFalse ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; <nl> + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; <nl> + flush ( ) ; <nl> + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; <nl> + flush ( ) ; <nl> + Thread . sleep ( 1000 ) ; <nl> + assertFalse ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTriggerNoMinorCompactionSTCSAlterTable ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) WITH compaction = { ' class ' : ' SizeTieredCompactionStrategy ' , ' min _ threshold ' : 2 , ' enabled ' : true } ; " ) ; <nl> + assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; <nl> + execute ( " ALTER TABLE % s WITH compaction = { ' class ' : ' SizeTieredCompactionStrategy ' , ' enabled ' : false } " ) ; <nl> + assertFalse ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; <nl> + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; <nl> + flush ( ) ; <nl> + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; <nl> + flush ( ) ; <nl> + Thread . sleep ( 1000 ) ; <nl> + assertFalse ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTriggerMinorCompactionSTCSAlterTable ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) WITH compaction = { ' class ' : ' SizeTieredCompactionStrategy ' , ' min _ threshold ' : 2 , ' enabled ' : false } ; " ) ; <nl> + assertFalse ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; <nl> + execute ( " ALTER TABLE % s WITH compaction = { ' class ' : ' SizeTieredCompactionStrategy ' , ' min _ threshold ' : 2 , ' enabled ' : true } " ) ; <nl> + assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; <nl> + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; <nl> + flush ( ) ; <nl> + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; <nl> + flush ( ) ; <nl> + Thread . sleep ( 1000 ) ; <nl> + assertTrue ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; <nl> + } <nl> + <nl> + private ColumnFamilyStore getCurrentColumnFamilyStore ( ) <nl> + { <nl> + return Keyspace . open ( KEYSPACE ) . getColumnFamilyStore ( currentTable ( ) ) ; <nl> + } <nl> + <nl> + public boolean minorWasTriggered ( String keyspace , String cf ) throws Throwable <nl> + { <nl> UntypedResultSet res = execute ( " SELECT * FROM system . compaction _ history " ) ; <nl> boolean minorWasTriggered = false ; <nl> for ( UntypedResultSet . Row r : res ) <nl> { <nl> - if ( r . getString ( " keyspace _ name " ) . equals ( KEYSPACE ) & & r . getString ( " columnfamily _ name " ) . equals ( currentTable ( ) ) ) <nl> + if ( r . getString ( " keyspace _ name " ) . equals ( keyspace ) & & r . getString ( " columnfamily _ name " ) . equals ( cf ) ) <nl> minorWasTriggered = true ; <nl> } <nl> - assertTrue ( minorWasTriggered ) ; <nl> + return minorWasTriggered ; <nl> } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java 
 index 76e3b88 . . 58fc062 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java 
 @ @ - 21 , 32 + 21 , 140 @ @ import org . junit . Test ; 
 
 import org . apache . cassandra . cql3 . CQLTester ; 
 import org . apache . cassandra . cql3 . UntypedResultSet ; 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . Keyspace ; 
 + import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertTrue ; 
 
 public class CompactionsCQLTest extends CQLTester 
 { 
 @ Test 
 - public void testTriggerMinorCompaction ( ) throws Throwable 
 + public void testTriggerMinorCompactionSTCS ( ) throws Throwable 
 { 
 - createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) ; " ) ; 
 - assertTrue ( Keyspace . open ( KEYSPACE ) . getColumnFamilyStore ( currentTable ( ) ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; 
 + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) WITH compaction = { ' class ' : ' SizeTieredCompactionStrategy ' , ' min _ threshold ' : 2 } ; " ) ; 
 + assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; 
 execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; 
 flush ( ) ; 
 execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; 
 flush ( ) ; 
 + Thread . sleep ( 1000 ) ; 
 + assertTrue ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testTriggerMinorCompactionLCS ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) WITH compaction = { ' class ' : ' LeveledCompactionStrategy ' , ' sstable _ size _ in _ mb ' : 1 } ; " ) ; 
 + assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; 
 + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; 
 + flush ( ) ; 
 + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; 
 + flush ( ) ; 
 + Thread . sleep ( 1000 ) ; 
 + assertTrue ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; 
 + } 
 + 
 + 
 + @ Test 
 + public void testTriggerMinorCompactionDTCS ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) WITH compaction = { ' class ' : ' DateTieredCompactionStrategy ' , ' min _ threshold ' : 2 } ; " ) ; 
 + assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; 
 + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; 
 + flush ( ) ; 
 + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; 
 + flush ( ) ; 
 + Thread . sleep ( 1000 ) ; 
 + assertTrue ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testTriggerNoMinorCompactionSTCSDisabled ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) WITH compaction = { ' class ' : ' SizeTieredCompactionStrategy ' , ' min _ threshold ' : 2 , ' enabled ' : false } ; " ) ; 
 + assertFalse ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; 
 + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; 
 + flush ( ) ; 
 + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; 
 + flush ( ) ; 
 + Thread . sleep ( 1000 ) ; 
 + assertFalse ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testTriggerMinorCompactionSTCSNodetoolEnabled ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) WITH compaction = { ' class ' : ' SizeTieredCompactionStrategy ' , ' min _ threshold ' : 2 , ' enabled ' : false } ; " ) ; 
 + assertFalse ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; 
 + getCurrentColumnFamilyStore ( ) . enableAutoCompaction ( ) ; 
 + assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; 
 execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; 
 flush ( ) ; 
 execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; 
 flush ( ) ; 
 Thread . sleep ( 1000 ) ; 
 + assertTrue ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testTriggerNoMinorCompactionSTCSNodetoolDisabled ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) WITH compaction = { ' class ' : ' SizeTieredCompactionStrategy ' , ' min _ threshold ' : 2 , ' enabled ' : true } ; " ) ; 
 + assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; 
 + getCurrentColumnFamilyStore ( ) . disableAutoCompaction ( ) ; 
 + assertFalse ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; 
 + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; 
 + flush ( ) ; 
 + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; 
 + flush ( ) ; 
 + Thread . sleep ( 1000 ) ; 
 + assertFalse ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testTriggerNoMinorCompactionSTCSAlterTable ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) WITH compaction = { ' class ' : ' SizeTieredCompactionStrategy ' , ' min _ threshold ' : 2 , ' enabled ' : true } ; " ) ; 
 + assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; 
 + execute ( " ALTER TABLE % s WITH compaction = { ' class ' : ' SizeTieredCompactionStrategy ' , ' enabled ' : false } " ) ; 
 + assertFalse ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; 
 + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; 
 + flush ( ) ; 
 + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; 
 + flush ( ) ; 
 + Thread . sleep ( 1000 ) ; 
 + assertFalse ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testTriggerMinorCompactionSTCSAlterTable ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) WITH compaction = { ' class ' : ' SizeTieredCompactionStrategy ' , ' min _ threshold ' : 2 , ' enabled ' : false } ; " ) ; 
 + assertFalse ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; 
 + execute ( " ALTER TABLE % s WITH compaction = { ' class ' : ' SizeTieredCompactionStrategy ' , ' min _ threshold ' : 2 , ' enabled ' : true } " ) ; 
 + assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; 
 + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; 
 + flush ( ) ; 
 + execute ( " insert into % s ( id ) values ( ' 1 ' ) " ) ; 
 + flush ( ) ; 
 + Thread . sleep ( 1000 ) ; 
 + assertTrue ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; 
 + } 
 + 
 + private ColumnFamilyStore getCurrentColumnFamilyStore ( ) 
 + { 
 + return Keyspace . open ( KEYSPACE ) . getColumnFamilyStore ( currentTable ( ) ) ; 
 + } 
 + 
 + public boolean minorWasTriggered ( String keyspace , String cf ) throws Throwable 
 + { 
 UntypedResultSet res = execute ( " SELECT * FROM system . compaction _ history " ) ; 
 boolean minorWasTriggered = false ; 
 for ( UntypedResultSet . Row r : res ) 
 { 
 - if ( r . getString ( " keyspace _ name " ) . equals ( KEYSPACE ) & & r . getString ( " columnfamily _ name " ) . equals ( currentTable ( ) ) ) 
 + if ( r . getString ( " keyspace _ name " ) . equals ( keyspace ) & & r . getString ( " columnfamily _ name " ) . equals ( cf ) ) 
 minorWasTriggered = true ; 
 } 
 - assertTrue ( minorWasTriggered ) ; 
 + return minorWasTriggered ; 
 } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
