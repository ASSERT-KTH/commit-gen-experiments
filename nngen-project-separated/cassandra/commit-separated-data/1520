BLEU SCORE: 0.037477767366779206

TEST MSG: Update 2 . 2 NEWS . txt for CASSANDRA - 9035
GENERATED MSG: update release notes and changelog for # 1933

TEST DIFF (one line): diff - - git a / NEWS . txt b / NEWS . txt <nl> index fcf254b . . e114944 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 138 , 6 + 138 , 13 @ @ Upgrading <nl> - The sstable2json and json2sstable tools have been deprecated and will be <nl> removed in the next major Cassandra release . See CASSANDRA - 9618 <nl> ( https : / / issues . apache . org / jira / browse / CASSANDRA - 9618 ) for details . <nl> + - nodetool enablehandoff will no longer support a list of data centers starting <nl> + with the next major release . Two new commands will be added , enablehintsfordc and disablehintsfordc , <nl> + to exclude data centers from using hinted handoff when the global status is enabled . <nl> + In cassandra . yaml , hinted _ handoff _ enabled will no longer support a list of data centers starting <nl> + with the next major release . A new setting will be added , hinted _ handoff _ disabled _ datacenters , <nl> + to exclude data centers when the global status is enabled , see CASSANDRA - 9035 for details . <nl> + <nl> <nl> 2 . 1 . 6 <nl> = = = = =
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index a313457 . . f4fd4aa 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 20 , 7 + 20 , 7 @ @ <nl> * retry hadoop split requests on connection failure ( CASSANDRA - 1927 ) <nl> * implement describeOwnership for BOP , COPP ( CASSANDRA - 1928 ) <nl> * make read repair behave as expected for ConsistencyLevel > ONE <nl> - ( CASSANDRA - 982 ) <nl> + ( CASSANDRA - 982 , 2038 ) <nl> * distributed test harness ( CASSANDRA - 1859 , 1964 ) <nl> * reduce flush lock contention ( CASSANDRA - 1930 ) <nl> * optimize supercolumn deserialization ( CASSANDRA - 1891 ) <nl> @ @ - 39 , 6 + 39 , 10 @ @ <nl> * add short options for CLI flags ( CASSANDRA - 1565 ) <nl> * make keyspace argument to " describe keyspace " in CLI optional <nl> when authenticated to keyspace already ( CASSANDRA - 2029 ) <nl> + * added option to specify - Dcassandra . join _ ring = false on startup <nl> + to allow " warm spare " nodes or performing JMX maintenance before <nl> + joining the ring ( CASSANDRA - 526 ) <nl> + * log migrations at INFO ( CASSANDRA - 2028 ) <nl> <nl> <nl> 0 . 7 . 0 - final <nl> diff - - git a / src / java / org / apache / cassandra / config / KSMetaData . java b / src / java / org / apache / cassandra / config / KSMetaData . java <nl> index 576bc6a . . 4e7af94 100644 <nl> - - - a / src / java / org / apache / cassandra / config / KSMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / KSMetaData . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import org . apache . avro . util . Utf8 ; <nl> import org . apache . cassandra . io . SerDeUtils ; <nl> import org . apache . cassandra . locator . AbstractReplicationStrategy ; <nl> import org . apache . cassandra . locator . NetworkTopologyStrategy ; <nl> + import org . apache . commons . lang . StringUtils ; <nl> <nl> public final class KSMetaData <nl> { <nl> @ @ - 93 , 6 + 94 , 21 @ @ public final class KSMetaData <nl> return ks ; <nl> } <nl> <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + StringBuilder sb = new StringBuilder ( ) ; <nl> + sb . append ( name ) <nl> + . append ( " rep factor : " ) <nl> + . append ( replicationFactor ) <nl> + . append ( " rep strategy : " ) <nl> + . append ( strategyClass . getSimpleName ( ) ) <nl> + . append ( " { " ) <nl> + . append ( StringUtils . join ( cfMetaData . values ( ) , " , " ) ) <nl> + . append ( " } " ) ; <nl> + return sb . toString ( ) ; <nl> + } <nl> + <nl> public static KSMetaData inflate ( org . apache . cassandra . db . migration . avro . KsDef ks ) <nl> { <nl> Class < AbstractReplicationStrategy > repStratClass ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ReadVerbHandler . java b / src / java / org / apache / cassandra / db / ReadVerbHandler . java <nl> index 09eba19 . . 5936087 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ReadVerbHandler . java <nl> + + + b / src / java / org / apache / cassandra / db / ReadVerbHandler . java <nl> @ @ - 67 , 17 + 67 , 7 @ @ public class ReadVerbHandler implements IVerbHandler <nl> ReadCommand command = ReadCommand . serializer ( ) . deserialize ( new DataInputStream ( readCtx . bufIn _ ) ) ; <nl> Table table = Table . open ( command . table ) ; <nl> Row row = command . getRow ( table ) ; <nl> - ReadResponse readResponse ; <nl> - if ( command . isDigestQuery ( ) ) <nl> - { <nl> - if ( logger _ . isDebugEnabled ( ) ) <nl> - logger _ . debug ( " digest is " + ByteBufferUtil . bytesToHex ( ColumnFamily . digest ( row . cf ) ) ) ; <nl> - readResponse = new ReadResponse ( ColumnFamily . digest ( row . cf ) ) ; <nl> - } <nl> - else <nl> - { <nl> - readResponse = new ReadResponse ( row ) ; <nl> - } <nl> + ReadResponse readResponse = getResponse ( command , row ) ; <nl> / * serialize the ReadResponseMessage . * / <nl> readCtx . bufOut _ . reset ( ) ; <nl> <nl> @ @ - 97 , 4 + 87 , 18 @ @ public class ReadVerbHandler implements IVerbHandler <nl> throw new RuntimeException ( ex ) ; <nl> } <nl> } <nl> + <nl> + public static ReadResponse getResponse ( ReadCommand command , Row row ) <nl> + { <nl> + if ( command . isDigestQuery ( ) ) <nl> + { <nl> + if ( logger _ . isDebugEnabled ( ) ) <nl> + logger _ . debug ( " digest is " + ByteBufferUtil . bytesToHex ( ColumnFamily . digest ( row . cf ) ) ) ; <nl> + return new ReadResponse ( ColumnFamily . digest ( row . cf ) ) ; <nl> + } <nl> + else <nl> + { <nl> + return new ReadResponse ( row ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / migration / AddColumnFamily . java b / src / java / org / apache / cassandra / db / migration / AddColumnFamily . java <nl> index fd95f93 . . 79414cc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / migration / AddColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / migration / AddColumnFamily . java <nl> @ @ - 97 , 4 + 97 , 10 @ @ public class AddColumnFamily extends Migration <nl> org . apache . cassandra . db . migration . avro . AddColumnFamily acf = ( org . apache . cassandra . db . migration . avro . AddColumnFamily ) mi . migration ; <nl> cfm = CFMetaData . inflate ( acf . cf ) ; <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return " Add column family : " + cfm . toString ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / migration / AddKeyspace . java b / src / java / org / apache / cassandra / db / migration / AddKeyspace . java <nl> index 655ac8f . . 8ca7ea7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / migration / AddKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / migration / AddKeyspace . java <nl> @ @ - 88 , 4 + 88 , 10 @ @ public class AddKeyspace extends Migration <nl> org . apache . cassandra . db . migration . avro . AddKeyspace aks = ( org . apache . cassandra . db . migration . avro . AddKeyspace ) mi . migration ; <nl> ksm = KSMetaData . inflate ( aks . ks ) ; <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return " Add keyspace : " + ksm . toString ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java b / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java <nl> index 89e0f84 . . 6ac1c77 100644 <nl> - - - a / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java <nl> @ @ - 113 , 4 + 113 , 10 @ @ public class DropColumnFamily extends Migration <nl> tableName = dcf . ksname . toString ( ) ; <nl> cfName = dcf . cfname . toString ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return String . format ( " Drop column family : % s . % s " , tableName , cfName ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / migration / DropKeyspace . java b / src / java / org / apache / cassandra / db / migration / DropKeyspace . java <nl> index 5b1c284 . . 0e69a5a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / migration / DropKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / migration / DropKeyspace . java <nl> @ @ - 102 , 4 + 102 , 10 @ @ public class DropKeyspace extends Migration <nl> org . apache . cassandra . db . migration . avro . DropKeyspace dks = ( org . apache . cassandra . db . migration . avro . DropKeyspace ) mi . migration ; <nl> name = dks . ksname . toString ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return " Drop keyspace : " + name ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / migration / Migration . java b / src / java / org / apache / cassandra / db / migration / Migration . java <nl> index b583c55 . . bb97096 100644 <nl> - - - a / src / java / org / apache / cassandra / db / migration / Migration . java <nl> + + + b / src / java / org / apache / cassandra / db / migration / Migration . java <nl> @ @ - 130 , 7 + 130 , 7 @ @ public abstract class Migration <nl> migration . apply ( ) ; <nl> <nl> / / note that we ' re storing this in the system table , which is not replicated <nl> - logger . debug ( " Applying migration " + newVersion . toString ( ) ) ; <nl> + logger . info ( " Applying migration { } { } " , newVersion . toString ( ) , toString ( ) ) ; <nl> migration = new RowMutation ( Table . SYSTEM _ TABLE , LAST _ MIGRATION _ KEY ) ; <nl> migration . add ( new QueryPath ( SCHEMA _ CF , null , LAST _ MIGRATION _ KEY ) , ByteBuffer . wrap ( UUIDGen . decompose ( newVersion ) ) , now ) ; <nl> migration . apply ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / migration / RenameColumnFamily . java b / src / java / org / apache / cassandra / db / migration / RenameColumnFamily . java <nl> index abe92b0 . . 6c6ce52 100644 <nl> - - - a / src / java / org / apache / cassandra / db / migration / RenameColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / migration / RenameColumnFamily . java <nl> @ @ - 125 , 4 + 125 , 10 @ @ public class RenameColumnFamily extends Migration <nl> oldName = rcf . old _ cfname . toString ( ) ; <nl> newName = rcf . new _ cfname . toString ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return String . format ( " Rename column family ( % d ) % s . % s to % s . % s " , cfId , tableName , oldName , tableName , newName ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / migration / RenameKeyspace . java b / src / java / org / apache / cassandra / db / migration / RenameKeyspace . java <nl> index 2f357ee . . 87bfe82 100644 <nl> - - - a / src / java / org / apache / cassandra / db / migration / RenameKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / migration / RenameKeyspace . java <nl> @ @ - 143 , 4 + 143 , 10 @ @ public class RenameKeyspace extends Migration <nl> oldName = rks . old _ ksname . toString ( ) ; <nl> newName = rks . new _ ksname . toString ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return String . format ( " Rename keyspace % s to % s " , oldName , newName ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java b / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java <nl> index 01b89ec . . c7f1191 100644 <nl> - - - a / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java <nl> @ @ - 100 , 4 + 100 , 10 @ @ public class UpdateColumnFamily extends Migration <nl> org . apache . cassandra . db . migration . avro . UpdateColumnFamily update = ( org . apache . cassandra . db . migration . avro . UpdateColumnFamily ) mi . migration ; <nl> metadata = CFMetaData . inflate ( update . metadata ) ; <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return String . format ( " Update column family to % s " , metadata . toString ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / migration / UpdateKeyspace . java b / src / java / org / apache / cassandra / db / migration / UpdateKeyspace . java <nl> index ee54c52 . . ffc0965 100644 <nl> - - - a / src / java / org / apache / cassandra / db / migration / UpdateKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / migration / UpdateKeyspace . java <nl> @ @ - 88 , 4 + 88 , 10 @ @ public class UpdateKeyspace extends Migration <nl> newKsm = KSMetaData . inflate ( uks . newKs ) ; <nl> oldKsm = KSMetaData . inflate ( uks . oldKs ) ; <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return String . format ( " Update keyspace % s to % s " , oldKsm . toString ( ) , newKsm . toString ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java <nl> index 9e60413 . . 2fd88e9 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java <nl> + + + b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java <nl> @ @ - 18 , 10 + 18 , 8 @ @ <nl> <nl> package org . apache . cassandra . locator ; <nl> <nl> - import java . io . BufferedReader ; <nl> - import java . io . FileReader ; <nl> import java . io . IOException ; <nl> - import java . io . Reader ; <nl> + import java . io . InputStream ; <nl> import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> import java . util . HashMap ; <nl> @ @ - 113 , 13 + 111 , 12 @ @ public class PropertyFileSnitch extends AbstractNetworkTopologySnitch <nl> { <nl> HashMap < InetAddress , String [ ] > reloadedMap = new HashMap < InetAddress , String [ ] > ( ) ; <nl> <nl> - String rackPropertyFilename = FBUtilities . resourceToFile ( RACK _ PROPERTY _ FILENAME ) ; <nl> Properties properties = new Properties ( ) ; <nl> - Reader reader = null ; <nl> + InputStream stream = null ; <nl> try <nl> { <nl> - reader = new BufferedReader ( new FileReader ( rackPropertyFilename ) ) ; <nl> - properties . load ( reader ) ; <nl> + stream = getClass ( ) . getClassLoader ( ) . getResourceAsStream ( RACK _ PROPERTY _ FILENAME ) ; <nl> + properties . load ( stream ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> @ @ - 127 , 7 + 124 , 7 @ @ public class PropertyFileSnitch extends AbstractNetworkTopologySnitch <nl> } <nl> finally <nl> { <nl> - FileUtils . closeQuietly ( reader ) ; <nl> + FileUtils . closeQuietly ( stream ) ; <nl> } <nl> <nl> for ( Map . Entry < Object , Object > entry : properties . entrySet ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / net / Header . java b / src / java / org / apache / cassandra / net / Header . java <nl> index 5a72857 . . 9bff432 100644 <nl> - - - a / src / java / org / apache / cassandra / net / Header . java <nl> + + + b / src / java / org / apache / cassandra / net / Header . java <nl> @ @ - 45 , 12 + 45 , 12 @ @ public class Header <nl> return serializer _ ; <nl> } <nl> <nl> - private InetAddress from _ ; <nl> + private final InetAddress from _ ; <nl> / / TODO STAGE can be determined from verb <nl> - private StorageService . Verb verb _ ; <nl> - private String messageId _ ; <nl> + private final StorageService . Verb verb _ ; <nl> + private final String messageId _ ; <nl> protected Map < String , byte [ ] > details _ = new Hashtable < String , byte [ ] > ( ) ; <nl> - <nl> + <nl> Header ( String id , InetAddress from , StorageService . Verb verb ) <nl> { <nl> assert id ! = null ; <nl> @ @ - 88 , 12 + 88 , 7 @ @ public class Header <nl> return messageId _ ; <nl> } <nl> <nl> - void setMessageId ( String id ) <nl> - { <nl> - messageId _ = id ; <nl> - } <nl> - <nl> - byte [ ] getDetail ( Object key ) <nl> + byte [ ] getDetail ( String key ) <nl> { <nl> return details _ . get ( key ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / net / Message . java b / src / java / org / apache / cassandra / net / Message . java <nl> index 35c6eec . . 7ad2759 100644 <nl> - - - a / src / java / org / apache / cassandra / net / Message . java <nl> + + + b / src / java / org / apache / cassandra / net / Message . java <nl> @ @ - 59 , 7 + 59 , 7 @ @ public class Message <nl> this ( new Header ( from , verb ) , body ) ; <nl> } <nl> <nl> - public byte [ ] getHeader ( Object key ) <nl> + public byte [ ] getHeader ( String key ) <nl> { <nl> return header _ . getDetail ( key ) ; <nl> } <nl> @ @ - 94 , 11 + 94 , 6 @ @ public class Message <nl> return header _ . getMessageId ( ) ; <nl> } <nl> <nl> - void setMessageId ( String id ) <nl> - { <nl> - header _ . setMessageId ( id ) ; <nl> - } <nl> - <nl> / / TODO should take byte [ ] + length so we don ' t have to copy to a byte [ ] of exactly the right len <nl> public Message getReply ( InetAddress from , byte [ ] args ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index ba4f535 . . af697db 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 331 , 34 + 331 , 6 @ @ public final class MessagingService implements MessagingServiceMBean , ILatencyPu <nl> } <nl> <nl> / * * <nl> - * Send a message to a given endpoint . The ith element in the < code > messages < / code > <nl> - * array is sent to the ith element in the < code > to < / code > array . This method assumes <nl> - * there is a one - one mapping between the < code > messages < / code > array and <nl> - * the < code > to < / code > array . Otherwise an IllegalArgumentException will be thrown . <nl> - * This method also informs the MessagingService to wait for at least <nl> - * < code > howManyResults < / code > responses to determine success of failure . <nl> - * @ param messages messages to be sent . <nl> - * @ param to endpoints to which the message needs to be sent <nl> - * @ param cb callback interface which is used to pass the responses or <nl> - * suggest that a timeout occured to the invoker of the send ( ) . <nl> - * @ return an reference to message id used to match with the result <nl> - * / <nl> - public String sendRR ( Message [ ] messages , List < InetAddress > to , IAsyncCallback cb ) <nl> - { <nl> - if ( messages . length ! = to . size ( ) ) <nl> - throw new IllegalArgumentException ( " Number of messages and the number of endpoints need to be same . " ) ; <nl> - String groupId = GuidGenerator . guid ( ) ; <nl> - addCallback ( cb , groupId ) ; <nl> - for ( int i = 0 ; i < messages . length ; + + i ) <nl> - { <nl> - messages [ i ] . setMessageId ( groupId ) ; <nl> - putTarget ( groupId , to . get ( i ) ) ; <nl> - sendOneWay ( messages [ i ] , to . get ( i ) ) ; <nl> - } <nl> - return groupId ; <nl> - } <nl> - <nl> - / * * <nl> * Send a message to a given endpoint . This method adheres to the fire and forget <nl> * style messaging . <nl> * @ param message messages to be sent . <nl> diff - - git a / src / java / org / apache / cassandra / service / ConsistencyChecker . java b / src / java / org / apache / cassandra / service / ConsistencyChecker . java <nl> deleted file mode 100644 <nl> index b57963a . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / service / ConsistencyChecker . java <nl> + + + / dev / null <nl> @ @ - 1 , 183 + 0 , 0 @ @ <nl> - / * * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package org . apache . cassandra . service ; <nl> - <nl> - import java . io . ByteArrayInputStream ; <nl> - import java . io . DataInputStream ; <nl> - import java . io . IOException ; <nl> - import java . net . InetAddress ; <nl> - import java . nio . ByteBuffer ; <nl> - import java . util . List ; <nl> - import java . util . concurrent . ScheduledExecutorService ; <nl> - import java . util . concurrent . ScheduledThreadPoolExecutor ; <nl> - import java . util . concurrent . TimeUnit ; <nl> - <nl> - import org . apache . commons . lang . ArrayUtils ; <nl> - import org . apache . commons . lang . StringUtils ; <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> - <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - import org . apache . cassandra . db . ColumnFamily ; <nl> - import org . apache . cassandra . db . ReadCommand ; <nl> - import org . apache . cassandra . db . ReadResponse ; <nl> - import org . apache . cassandra . db . Row ; <nl> - import org . apache . cassandra . net . IAsyncCallback ; <nl> - import org . apache . cassandra . net . Message ; <nl> - import org . apache . cassandra . net . MessagingService ; <nl> - import org . apache . cassandra . utils . WrappedRunnable ; <nl> - <nl> - / * * <nl> - * ConsistencyChecker does the following : <nl> - * <nl> - * [ ConsistencyChecker . run ] <nl> - * ( 1 ) sends DIGEST read requests to each other replica of the given row . <nl> - * <nl> - * [ DigestResponseHandler ] <nl> - * ( 2 ) If any of the digests to not match the data read , it sends a second round of requests <nl> - * to each replica , this time for the full data <nl> - * <nl> - * [ DataRepairHandler ] <nl> - * ( 3 ) processes full - read responses and invokes resolve . The actual sending of messages <nl> - * repairing out - of - date or missing data is handled by ReadResponseResolver . <nl> - * / <nl> - class ConsistencyChecker implements Runnable <nl> - { <nl> - private static Logger logger _ = LoggerFactory . getLogger ( ConsistencyChecker . class ) ; <nl> - <nl> - private static ScheduledExecutorService executor _ = new ScheduledThreadPoolExecutor ( 1 ) ; / / TODO add JMX <nl> - <nl> - private final Row row _ ; <nl> - protected final List < InetAddress > replicas _ ; <nl> - private final ReadCommand readCommand _ ; <nl> - private final InetAddress dataSource ; <nl> - <nl> - public ConsistencyChecker ( ReadCommand command , Row row , List < InetAddress > endpoints , InetAddress dataSource ) <nl> - { <nl> - row _ = row ; <nl> - replicas _ = endpoints ; <nl> - readCommand _ = command ; <nl> - this . dataSource = dataSource ; <nl> - } <nl> - <nl> - public void run ( ) <nl> - 	 { <nl> - ReadCommand readCommandDigestOnly = constructReadMessage ( true ) ; <nl> - 	 	 try <nl> - 	 	 { <nl> - 	 	 	 Message message = readCommandDigestOnly . makeReadMessage ( ) ; <nl> - if ( logger _ . isDebugEnabled ( ) ) <nl> - logger _ . debug ( " Reading consistency digest for " + readCommand _ . key + " from " + message . getMessageId ( ) + " @ [ " + StringUtils . join ( replicas _ , " , " ) + " ] " ) ; <nl> - <nl> - MessagingService . instance ( ) . addCallback ( new DigestResponseHandler ( ) , message . getMessageId ( ) ) ; <nl> - for ( InetAddress endpoint : replicas _ ) <nl> - { <nl> - if ( ! endpoint . equals ( dataSource ) ) <nl> - MessagingService . instance ( ) . sendOneWay ( message , endpoint ) ; <nl> - } <nl> - 	 	 } <nl> - 	 	 catch ( IOException ex ) <nl> - 	 	 { <nl> - 	 	 	 throw new RuntimeException ( ex ) ; <nl> - 	 	 } <nl> - 	 } <nl> - <nl> - private ReadCommand constructReadMessage ( boolean isDigestQuery ) <nl> - { <nl> - ReadCommand readCommand = readCommand _ . copy ( ) ; <nl> - readCommand . setDigestQuery ( isDigestQuery ) ; <nl> - return readCommand ; <nl> - } <nl> - <nl> - class DigestResponseHandler implements IAsyncCallback <nl> - 	 { <nl> - private boolean repairInvoked ; <nl> - private final ByteBuffer localDigest = ColumnFamily . digest ( row _ . cf ) ; <nl> - <nl> - public synchronized void response ( Message response ) <nl> - 	 	 { <nl> - if ( repairInvoked ) <nl> - return ; <nl> - <nl> - try <nl> - { <nl> - byte [ ] body = response . getMessageBody ( ) ; <nl> - ByteArrayInputStream bufIn = new ByteArrayInputStream ( body ) ; <nl> - ReadResponse result = ReadResponse . serializer ( ) . deserialize ( new DataInputStream ( bufIn ) ) ; <nl> - ByteBuffer digest = result . digest ( ) ; <nl> - <nl> - if ( ! localDigest . equals ( digest ) ) <nl> - { <nl> - ReadCommand readCommand = constructReadMessage ( false ) ; <nl> - Message message = readCommand . makeReadMessage ( ) ; <nl> - if ( logger _ . isDebugEnabled ( ) ) <nl> - logger _ . debug ( " Digest mismatch ; re - reading " + readCommand _ . key + " from " + message . getMessageId ( ) + " @ [ " + StringUtils . join ( replicas _ , " , " ) + " ] " ) ; <nl> - MessagingService . instance ( ) . addCallback ( new DataRepairHandler ( ) , message . getMessageId ( ) ) ; <nl> - for ( InetAddress endpoint : replicas _ ) <nl> - { <nl> - if ( ! endpoint . equals ( dataSource ) ) <nl> - MessagingService . instance ( ) . sendOneWay ( message , endpoint ) ; <nl> - } <nl> - <nl> - repairInvoked = true ; <nl> - } <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - throw new RuntimeException ( " Error handling responses for " + row _ , e ) ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - class DataRepairHandler implements IAsyncCallback <nl> - 	 { <nl> - 	 	 private final ReadResponseResolver readResponseResolver _ ; <nl> - 	 	 private final int majority _ ; <nl> - 	 	 <nl> - public DataRepairHandler ( ) throws IOException <nl> - { <nl> - readResponseResolver _ = new ReadResponseResolver ( readCommand _ . table , readCommand _ . key ) ; <nl> - majority _ = ( replicas _ . size ( ) / 2 ) + 1 ; <nl> - / / wrap original data Row in a response Message so it doesn ' t need to be special - cased in the resolver <nl> - ReadResponse readResponse = new ReadResponse ( row _ ) ; <nl> - Message fakeMessage = new Message ( dataSource , StorageService . Verb . INTERNAL _ RESPONSE , ArrayUtils . EMPTY _ BYTE _ ARRAY ) ; <nl> - readResponseResolver _ . injectPreProcessed ( fakeMessage , readResponse ) ; <nl> - } <nl> - <nl> - / / synchronized so the " = = majority " is safe <nl> - 	 	 public synchronized void response ( Message message ) <nl> - 	 	 { <nl> - 	 	 	 if ( logger _ . isDebugEnabled ( ) ) <nl> - 	 	 	 logger _ . debug ( " Received response in DataRepairHandler : " + message . toString ( ) ) ; <nl> - readResponseResolver _ . preprocess ( message ) ; <nl> - if ( readResponseResolver _ . getMessageCount ( ) = = majority _ ) <nl> - { <nl> - Runnable runnable = new WrappedRunnable ( ) <nl> - { <nl> - public void runMayThrow ( ) throws IOException , DigestMismatchException <nl> - { <nl> - readResponseResolver _ . resolve ( ) ; <nl> - } <nl> - } ; <nl> - / / give remaining replicas until timeout to reply and get added to responses _ <nl> - executor _ . schedule ( runnable , DatabaseDescriptor . getRpcTimeout ( ) , TimeUnit . MILLISECONDS ) ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / service / ReadCallback . java b / src / java / org / apache / cassandra / service / ReadCallback . java <nl> index 2daba58 . . d7d8b89 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ReadCallback . java <nl> + + + b / src / java / org / apache / cassandra / service / ReadCallback . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . db . ReadResponse ; <nl> import org . apache . cassandra . db . Table ; <nl> import org . apache . cassandra . net . IAsyncCallback ; <nl> import org . apache . cassandra . net . Message ; <nl> @ @ - 89 , 6 + 90 , 15 @ @ public class ReadCallback < T > implements IAsyncCallback <nl> if ( resolver . isDataPresent ( ) ) <nl> condition . signal ( ) ; <nl> } <nl> + <nl> + public void response ( ReadResponse result ) <nl> + { <nl> + ( ( ReadResponseResolver ) resolver ) . injectPreProcessed ( result ) ; <nl> + if ( resolver . getMessageCount ( ) < blockfor ) <nl> + return ; <nl> + if ( resolver . isDataPresent ( ) ) <nl> + condition . signal ( ) ; <nl> + } <nl> <nl> public int determineBlockFor ( ConsistencyLevel consistencyLevel , String table ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / service / ReadResponseResolver . java b / src / java / org / apache / cassandra / service / ReadResponseResolver . java <nl> index 0d0d235 . . 55c2ab7 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ReadResponseResolver . java <nl> + + + b / src / java / org / apache / cassandra / service / ReadResponseResolver . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . concurrent . ConcurrentMap ; <nl> <nl> + import org . apache . commons . lang . ArrayUtils ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 51 , 6 + 52 , 7 @ @ public class ReadResponseResolver implements IResponseResolver < Row > <nl> private final ConcurrentMap < Message , ReadResponse > results = new NonBlockingHashMap < Message , ReadResponse > ( ) ; <nl> private DecoratedKey key ; <nl> private ByteBuffer digest ; <nl> + private static final Message FAKE _ MESSAGE = new Message ( FBUtilities . getLocalAddress ( ) , StorageService . Verb . INTERNAL _ RESPONSE , ArrayUtils . EMPTY _ BYTE _ ARRAY ) ; ; <nl> <nl> public ReadResponseResolver ( String table , ByteBuffer key ) <nl> { <nl> @ @ - 248 , 10 + 250 , 11 @ @ public class ReadResponseResolver implements IResponseResolver < Row > <nl> } <nl> } <nl> <nl> - / * * hack so ConsistencyChecker doesn ' t have to serialize / deserialize an extra real Message * / <nl> - public void injectPreProcessed ( Message message , ReadResponse result ) <nl> + / * * hack so local reads don ' t force de / serialization of an extra real Message * / <nl> + public void injectPreProcessed ( ReadResponse result ) <nl> { <nl> - results . put ( message , result ) ; <nl> + assert results . get ( FAKE _ MESSAGE ) = = null ; / / should only be one local reply <nl> + results . put ( FAKE _ MESSAGE , result ) ; <nl> } <nl> <nl> public boolean isDataPresent ( ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index 54ee8d5 . . 2d15caa 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 526 , 14 + 526 , 9 @ @ public class StorageProxy implements StorageProxyMBean <nl> for ( ReadCommand command : commands ) <nl> { <nl> assert ! command . isDigestQuery ( ) ; <nl> - ReadCommand readMessageDigestOnly = command . copy ( ) ; <nl> - readMessageDigestOnly . setDigestQuery ( true ) ; <nl> - Message message = command . makeReadMessage ( ) ; <nl> - Message messageDigestOnly = readMessageDigestOnly . makeReadMessage ( ) ; <nl> <nl> List < InetAddress > endpoints = StorageService . instance . getLiveNaturalEndpoints ( command . table , command . key ) ; <nl> DatabaseDescriptor . getEndpointSnitch ( ) . sortByProximity ( FBUtilities . getLocalAddress ( ) , endpoints ) ; <nl> - InetAddress dataPoint = endpoints . get ( 0 ) ; <nl> <nl> ReadResponseResolver resolver = new ReadResponseResolver ( command . table , command . key ) ; <nl> ReadCallback < Row > handler = getReadCallback ( resolver , command . table , consistency _ level ) ; <nl> @ @ - 549 , 19 + 544 , 52 @ @ public class StorageProxy implements StorageProxyMBean <nl> { <nl> endpoints = endpoints . subList ( 0 , handler . blockfor ) ; <nl> } <nl> - Message [ ] messages = new Message [ endpoints . size ( ) ] ; <nl> - <nl> - / / data - request message is sent to dataPoint , the node that will actually get <nl> + <nl> + / / The data - request message is sent to dataPoint , the node that will actually get <nl> / / the data for us . The other replicas are only sent a digest query . <nl> - for ( int i = 0 ; i < messages . length ; i + + ) <nl> + ReadCommand digestCommand = null ; <nl> + if ( endpoints . size ( ) > 1 ) <nl> + { <nl> + digestCommand = command . copy ( ) ; <nl> + digestCommand . setDigestQuery ( true ) ; <nl> + } <nl> + <nl> + InetAddress dataPoint = endpoints . get ( 0 ) ; <nl> + if ( dataPoint . equals ( FBUtilities . getLocalAddress ( ) ) ) <nl> + { <nl> + if ( logger . isDebugEnabled ( ) ) <nl> + logger . debug ( " reading data for " + command + " locally " ) ; <nl> + StageManager . getStage ( Stage . READ ) . submit ( new WeakReadLocalRunnable ( command , handler ) ) ; <nl> + } <nl> + else <nl> { <nl> - InetAddress endpoint = endpoints . get ( i ) ; <nl> - Message m = endpoint . equals ( dataPoint ) ? message : messageDigestOnly ; <nl> - messages [ i ] = m ; <nl> + Message message = command . makeReadMessage ( ) ; <nl> if ( logger . isDebugEnabled ( ) ) <nl> - logger . debug ( " reading " + ( m = = message ? " data " : " digest " ) + " for " + command + " from " + m . getMessageId ( ) + " @ " + endpoint ) ; <nl> + logger . debug ( " reading digest for " + command + " from " + message . getMessageId ( ) + " @ " + dataPoint ) ; <nl> + MessagingService . instance ( ) . sendRR ( message , dataPoint , handler ) ; <nl> + } <nl> + <nl> + / / We lazy - construct the digest Message object since it may not be necessary if we <nl> + / / are doing a local digest read , or no digest reads at all . <nl> + Message digestMessage = null ; <nl> + for ( InetAddress digestPoint : endpoints . subList ( 1 , endpoints . size ( ) ) ) <nl> + { <nl> + if ( digestPoint . equals ( FBUtilities . getLocalAddress ( ) ) ) <nl> + { <nl> + if ( logger . isDebugEnabled ( ) ) <nl> + logger . debug ( " reading digest for " + command + " locally " ) ; <nl> + StageManager . getStage ( Stage . READ ) . submit ( new WeakReadLocalRunnable ( digestCommand , handler ) ) ; <nl> + } <nl> + else <nl> + { <nl> + if ( digestMessage = = null ) <nl> + digestMessage = digestCommand . makeReadMessage ( ) ; <nl> + if ( logger . isDebugEnabled ( ) ) <nl> + logger . debug ( " reading digest for " + command + " from " + digestMessage . getMessageId ( ) + " @ " + digestPoint ) ; <nl> + MessagingService . instance ( ) . sendRR ( digestMessage , digestPoint , handler ) ; <nl> + } <nl> } <nl> - MessagingService . instance ( ) . sendRR ( messages , endpoints , handler ) ; <nl> + <nl> readCallbacks . add ( handler ) ; <nl> commandEndpoints . add ( endpoints ) ; <nl> } <nl> @ @ - 619 , 6 + 647 , 28 @ @ public class StorageProxy implements StorageProxyMBean <nl> return rows ; <nl> } <nl> <nl> + static class WeakReadLocalRunnable extends WrappedRunnable <nl> + { <nl> + private final ReadCommand command ; <nl> + private final ReadCallback < Row > handler ; <nl> + <nl> + WeakReadLocalRunnable ( ReadCommand command , ReadCallback < Row > handler ) <nl> + { <nl> + this . command = command ; <nl> + this . handler = handler ; <nl> + } <nl> + <nl> + protected void runMayThrow ( ) throws IOException <nl> + { <nl> + if ( logger . isDebugEnabled ( ) ) <nl> + logger . debug ( " weakreadlocal reading " + command ) ; <nl> + <nl> + Table table = Table . open ( command . table ) ; <nl> + ReadResponse result = ReadVerbHandler . getResponse ( command , command . getRow ( table ) ) ; <nl> + handler . response ( result ) ; <nl> + } <nl> + } <nl> + <nl> static < T > ReadCallback < T > getReadCallback ( IResponseResolver < T > resolver , String table , ConsistencyLevel consistencyLevel ) <nl> { <nl> if ( consistencyLevel . equals ( ConsistencyLevel . LOCAL _ QUORUM ) | | consistencyLevel . equals ( ConsistencyLevel . EACH _ QUORUM ) ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index cab09d5 . . 3e44b13 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 171 , 15 + 171 , 6 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> / * This abstraction maintains the token / endpoint metadata information * / <nl> private TokenMetadata tokenMetadata _ = new TokenMetadata ( ) ; <nl> <nl> - / * This thread pool does consistency checks when the client doesn ' t care about consistency * / <nl> - private ExecutorService consistencyManager _ = new JMXEnabledThreadPoolExecutor ( DatabaseDescriptor . getConsistencyThreads ( ) , <nl> - DatabaseDescriptor . getConsistencyThreads ( ) , <nl> - StageManager . KEEPALIVE , <nl> - TimeUnit . SECONDS , <nl> - new LinkedBlockingQueue < Runnable > ( ) , <nl> - new NamedThreadFactory ( " ReadRepair " ) , <nl> - " request " ) ; <nl> - <nl> private Set < InetAddress > replicatingNodes ; <nl> private InetAddress removingNode ; <nl> <nl> @ @ - 188 , 6 + 179 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> / * when intialized as a client , we shouldn ' t write to the system table . * / <nl> private boolean isClientMode ; <nl> private boolean initialized ; <nl> + private volatile boolean joined = false ; <nl> private String operationMode ; <nl> private MigrationManager migrationManager = new MigrationManager ( ) ; <nl> <nl> @ @ - 353 , 7 + 345 , 20 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> } <nl> } <nl> <nl> + if ( Boolean . parseBoolean ( System . getProperty ( " cassandra . join _ ring " , " true " ) ) ) <nl> + { <nl> + joinTokenRing ( ) ; <nl> + } <nl> + else <nl> + { <nl> + logger _ . info ( " Not joining ring as requested . Use JMX ( StorageService - > joinRing ( ) ) to initiate ring joining " ) ; <nl> + } <nl> + } <nl> + <nl> + private void joinTokenRing ( ) throws IOException , org . apache . cassandra . config . ConfigurationException <nl> + { <nl> logger _ . info ( " Starting up server gossip " ) ; <nl> + joined = true ; <nl> <nl> / / have to start the gossip service before we can see any info on other nodes . this is necessary <nl> / / for bootstrap to get the load info it needs . <nl> @ @ - 425 , 6 + 430 , 20 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> assert tokenMetadata _ . sortedTokens ( ) . size ( ) > 0 ; <nl> } <nl> <nl> + public synchronized void joinRing ( ) throws IOException , org . apache . cassandra . config . ConfigurationException <nl> + { <nl> + if ( ! joined ) <nl> + { <nl> + logger _ . info ( " Joining ring by operator request " ) ; <nl> + joinTokenRing ( ) ; <nl> + } <nl> + } <nl> + <nl> + public boolean isJoined ( ) <nl> + { <nl> + return joined ; <nl> + } <nl> + <nl> private void setMode ( String m , boolean log ) <nl> { <nl> operationMode = m ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index 569fb33 . . 55293d0 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 283 , 4 + 283 , 8 @ @ public interface StorageServiceMBean <nl> <nl> public void invalidateKeyCaches ( String ks , String . . . cfs ) throws IOException ; <nl> public void invalidateRowCaches ( String ks , String . . . cfs ) throws IOException ; <nl> + <nl> + / / allows a node that have been started without joining the ring to join it <nl> + public void joinRing ( ) throws IOException , org . apache . cassandra . config . ConfigurationException ; <nl> + public boolean isJoined ( ) ; <nl> }

TEST DIFF:
diff - - git a / NEWS . txt b / NEWS . txt 
 index fcf254b . . e114944 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 138 , 6 + 138 , 13 @ @ Upgrading 
 - The sstable2json and json2sstable tools have been deprecated and will be 
 removed in the next major Cassandra release . See CASSANDRA - 9618 
 ( https : / / issues . apache . org / jira / browse / CASSANDRA - 9618 ) for details . 
 + - nodetool enablehandoff will no longer support a list of data centers starting 
 + with the next major release . Two new commands will be added , enablehintsfordc and disablehintsfordc , 
 + to exclude data centers from using hinted handoff when the global status is enabled . 
 + In cassandra . yaml , hinted _ handoff _ enabled will no longer support a list of data centers starting 
 + with the next major release . A new setting will be added , hinted _ handoff _ disabled _ datacenters , 
 + to exclude data centers when the global status is enabled , see CASSANDRA - 9035 for details . 
 + 
 
 2 . 1 . 6 
 = = = = =

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index a313457 . . f4fd4aa 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 20 , 7 + 20 , 7 @ @ 
 * retry hadoop split requests on connection failure ( CASSANDRA - 1927 ) 
 * implement describeOwnership for BOP , COPP ( CASSANDRA - 1928 ) 
 * make read repair behave as expected for ConsistencyLevel > ONE 
 - ( CASSANDRA - 982 ) 
 + ( CASSANDRA - 982 , 2038 ) 
 * distributed test harness ( CASSANDRA - 1859 , 1964 ) 
 * reduce flush lock contention ( CASSANDRA - 1930 ) 
 * optimize supercolumn deserialization ( CASSANDRA - 1891 ) 
 @ @ - 39 , 6 + 39 , 10 @ @ 
 * add short options for CLI flags ( CASSANDRA - 1565 ) 
 * make keyspace argument to " describe keyspace " in CLI optional 
 when authenticated to keyspace already ( CASSANDRA - 2029 ) 
 + * added option to specify - Dcassandra . join _ ring = false on startup 
 + to allow " warm spare " nodes or performing JMX maintenance before 
 + joining the ring ( CASSANDRA - 526 ) 
 + * log migrations at INFO ( CASSANDRA - 2028 ) 
 
 
 0 . 7 . 0 - final 
 diff - - git a / src / java / org / apache / cassandra / config / KSMetaData . java b / src / java / org / apache / cassandra / config / KSMetaData . java 
 index 576bc6a . . 4e7af94 100644 
 - - - a / src / java / org / apache / cassandra / config / KSMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / KSMetaData . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import org . apache . avro . util . Utf8 ; 
 import org . apache . cassandra . io . SerDeUtils ; 
 import org . apache . cassandra . locator . AbstractReplicationStrategy ; 
 import org . apache . cassandra . locator . NetworkTopologyStrategy ; 
 + import org . apache . commons . lang . StringUtils ; 
 
 public final class KSMetaData 
 { 
 @ @ - 93 , 6 + 94 , 21 @ @ public final class KSMetaData 
 return ks ; 
 } 
 
 + @ Override 
 + public String toString ( ) 
 + { 
 + StringBuilder sb = new StringBuilder ( ) ; 
 + sb . append ( name ) 
 + . append ( " rep factor : " ) 
 + . append ( replicationFactor ) 
 + . append ( " rep strategy : " ) 
 + . append ( strategyClass . getSimpleName ( ) ) 
 + . append ( " { " ) 
 + . append ( StringUtils . join ( cfMetaData . values ( ) , " , " ) ) 
 + . append ( " } " ) ; 
 + return sb . toString ( ) ; 
 + } 
 + 
 public static KSMetaData inflate ( org . apache . cassandra . db . migration . avro . KsDef ks ) 
 { 
 Class < AbstractReplicationStrategy > repStratClass ; 
 diff - - git a / src / java / org / apache / cassandra / db / ReadVerbHandler . java b / src / java / org / apache / cassandra / db / ReadVerbHandler . java 
 index 09eba19 . . 5936087 100644 
 - - - a / src / java / org / apache / cassandra / db / ReadVerbHandler . java 
 + + + b / src / java / org / apache / cassandra / db / ReadVerbHandler . java 
 @ @ - 67 , 17 + 67 , 7 @ @ public class ReadVerbHandler implements IVerbHandler 
 ReadCommand command = ReadCommand . serializer ( ) . deserialize ( new DataInputStream ( readCtx . bufIn _ ) ) ; 
 Table table = Table . open ( command . table ) ; 
 Row row = command . getRow ( table ) ; 
 - ReadResponse readResponse ; 
 - if ( command . isDigestQuery ( ) ) 
 - { 
 - if ( logger _ . isDebugEnabled ( ) ) 
 - logger _ . debug ( " digest is " + ByteBufferUtil . bytesToHex ( ColumnFamily . digest ( row . cf ) ) ) ; 
 - readResponse = new ReadResponse ( ColumnFamily . digest ( row . cf ) ) ; 
 - } 
 - else 
 - { 
 - readResponse = new ReadResponse ( row ) ; 
 - } 
 + ReadResponse readResponse = getResponse ( command , row ) ; 
 / * serialize the ReadResponseMessage . * / 
 readCtx . bufOut _ . reset ( ) ; 
 
 @ @ - 97 , 4 + 87 , 18 @ @ public class ReadVerbHandler implements IVerbHandler 
 throw new RuntimeException ( ex ) ; 
 } 
 } 
 + 
 + public static ReadResponse getResponse ( ReadCommand command , Row row ) 
 + { 
 + if ( command . isDigestQuery ( ) ) 
 + { 
 + if ( logger _ . isDebugEnabled ( ) ) 
 + logger _ . debug ( " digest is " + ByteBufferUtil . bytesToHex ( ColumnFamily . digest ( row . cf ) ) ) ; 
 + return new ReadResponse ( ColumnFamily . digest ( row . cf ) ) ; 
 + } 
 + else 
 + { 
 + return new ReadResponse ( row ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / migration / AddColumnFamily . java b / src / java / org / apache / cassandra / db / migration / AddColumnFamily . java 
 index fd95f93 . . 79414cc 100644 
 - - - a / src / java / org / apache / cassandra / db / migration / AddColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / migration / AddColumnFamily . java 
 @ @ - 97 , 4 + 97 , 10 @ @ public class AddColumnFamily extends Migration 
 org . apache . cassandra . db . migration . avro . AddColumnFamily acf = ( org . apache . cassandra . db . migration . avro . AddColumnFamily ) mi . migration ; 
 cfm = CFMetaData . inflate ( acf . cf ) ; 
 } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return " Add column family : " + cfm . toString ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / migration / AddKeyspace . java b / src / java / org / apache / cassandra / db / migration / AddKeyspace . java 
 index 655ac8f . . 8ca7ea7 100644 
 - - - a / src / java / org / apache / cassandra / db / migration / AddKeyspace . java 
 + + + b / src / java / org / apache / cassandra / db / migration / AddKeyspace . java 
 @ @ - 88 , 4 + 88 , 10 @ @ public class AddKeyspace extends Migration 
 org . apache . cassandra . db . migration . avro . AddKeyspace aks = ( org . apache . cassandra . db . migration . avro . AddKeyspace ) mi . migration ; 
 ksm = KSMetaData . inflate ( aks . ks ) ; 
 } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return " Add keyspace : " + ksm . toString ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java b / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java 
 index 89e0f84 . . 6ac1c77 100644 
 - - - a / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java 
 @ @ - 113 , 4 + 113 , 10 @ @ public class DropColumnFamily extends Migration 
 tableName = dcf . ksname . toString ( ) ; 
 cfName = dcf . cfname . toString ( ) ; 
 } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return String . format ( " Drop column family : % s . % s " , tableName , cfName ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / migration / DropKeyspace . java b / src / java / org / apache / cassandra / db / migration / DropKeyspace . java 
 index 5b1c284 . . 0e69a5a 100644 
 - - - a / src / java / org / apache / cassandra / db / migration / DropKeyspace . java 
 + + + b / src / java / org / apache / cassandra / db / migration / DropKeyspace . java 
 @ @ - 102 , 4 + 102 , 10 @ @ public class DropKeyspace extends Migration 
 org . apache . cassandra . db . migration . avro . DropKeyspace dks = ( org . apache . cassandra . db . migration . avro . DropKeyspace ) mi . migration ; 
 name = dks . ksname . toString ( ) ; 
 } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return " Drop keyspace : " + name ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / migration / Migration . java b / src / java / org / apache / cassandra / db / migration / Migration . java 
 index b583c55 . . bb97096 100644 
 - - - a / src / java / org / apache / cassandra / db / migration / Migration . java 
 + + + b / src / java / org / apache / cassandra / db / migration / Migration . java 
 @ @ - 130 , 7 + 130 , 7 @ @ public abstract class Migration 
 migration . apply ( ) ; 
 
 / / note that we ' re storing this in the system table , which is not replicated 
 - logger . debug ( " Applying migration " + newVersion . toString ( ) ) ; 
 + logger . info ( " Applying migration { } { } " , newVersion . toString ( ) , toString ( ) ) ; 
 migration = new RowMutation ( Table . SYSTEM _ TABLE , LAST _ MIGRATION _ KEY ) ; 
 migration . add ( new QueryPath ( SCHEMA _ CF , null , LAST _ MIGRATION _ KEY ) , ByteBuffer . wrap ( UUIDGen . decompose ( newVersion ) ) , now ) ; 
 migration . apply ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / migration / RenameColumnFamily . java b / src / java / org / apache / cassandra / db / migration / RenameColumnFamily . java 
 index abe92b0 . . 6c6ce52 100644 
 - - - a / src / java / org / apache / cassandra / db / migration / RenameColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / migration / RenameColumnFamily . java 
 @ @ - 125 , 4 + 125 , 10 @ @ public class RenameColumnFamily extends Migration 
 oldName = rcf . old _ cfname . toString ( ) ; 
 newName = rcf . new _ cfname . toString ( ) ; 
 } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return String . format ( " Rename column family ( % d ) % s . % s to % s . % s " , cfId , tableName , oldName , tableName , newName ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / migration / RenameKeyspace . java b / src / java / org / apache / cassandra / db / migration / RenameKeyspace . java 
 index 2f357ee . . 87bfe82 100644 
 - - - a / src / java / org / apache / cassandra / db / migration / RenameKeyspace . java 
 + + + b / src / java / org / apache / cassandra / db / migration / RenameKeyspace . java 
 @ @ - 143 , 4 + 143 , 10 @ @ public class RenameKeyspace extends Migration 
 oldName = rks . old _ ksname . toString ( ) ; 
 newName = rks . new _ ksname . toString ( ) ; 
 } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return String . format ( " Rename keyspace % s to % s " , oldName , newName ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java b / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java 
 index 01b89ec . . c7f1191 100644 
 - - - a / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java 
 @ @ - 100 , 4 + 100 , 10 @ @ public class UpdateColumnFamily extends Migration 
 org . apache . cassandra . db . migration . avro . UpdateColumnFamily update = ( org . apache . cassandra . db . migration . avro . UpdateColumnFamily ) mi . migration ; 
 metadata = CFMetaData . inflate ( update . metadata ) ; 
 } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return String . format ( " Update column family to % s " , metadata . toString ( ) ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / migration / UpdateKeyspace . java b / src / java / org / apache / cassandra / db / migration / UpdateKeyspace . java 
 index ee54c52 . . ffc0965 100644 
 - - - a / src / java / org / apache / cassandra / db / migration / UpdateKeyspace . java 
 + + + b / src / java / org / apache / cassandra / db / migration / UpdateKeyspace . java 
 @ @ - 88 , 4 + 88 , 10 @ @ public class UpdateKeyspace extends Migration 
 newKsm = KSMetaData . inflate ( uks . newKs ) ; 
 oldKsm = KSMetaData . inflate ( uks . oldKs ) ; 
 } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return String . format ( " Update keyspace % s to % s " , oldKsm . toString ( ) , newKsm . toString ( ) ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java 
 index 9e60413 . . 2fd88e9 100644 
 - - - a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java 
 + + + b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java 
 @ @ - 18 , 10 + 18 , 8 @ @ 
 
 package org . apache . cassandra . locator ; 
 
 - import java . io . BufferedReader ; 
 - import java . io . FileReader ; 
 import java . io . IOException ; 
 - import java . io . Reader ; 
 + import java . io . InputStream ; 
 import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 import java . util . HashMap ; 
 @ @ - 113 , 13 + 111 , 12 @ @ public class PropertyFileSnitch extends AbstractNetworkTopologySnitch 
 { 
 HashMap < InetAddress , String [ ] > reloadedMap = new HashMap < InetAddress , String [ ] > ( ) ; 
 
 - String rackPropertyFilename = FBUtilities . resourceToFile ( RACK _ PROPERTY _ FILENAME ) ; 
 Properties properties = new Properties ( ) ; 
 - Reader reader = null ; 
 + InputStream stream = null ; 
 try 
 { 
 - reader = new BufferedReader ( new FileReader ( rackPropertyFilename ) ) ; 
 - properties . load ( reader ) ; 
 + stream = getClass ( ) . getClassLoader ( ) . getResourceAsStream ( RACK _ PROPERTY _ FILENAME ) ; 
 + properties . load ( stream ) ; 
 } 
 catch ( IOException e ) 
 { 
 @ @ - 127 , 7 + 124 , 7 @ @ public class PropertyFileSnitch extends AbstractNetworkTopologySnitch 
 } 
 finally 
 { 
 - FileUtils . closeQuietly ( reader ) ; 
 + FileUtils . closeQuietly ( stream ) ; 
 } 
 
 for ( Map . Entry < Object , Object > entry : properties . entrySet ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / net / Header . java b / src / java / org / apache / cassandra / net / Header . java 
 index 5a72857 . . 9bff432 100644 
 - - - a / src / java / org / apache / cassandra / net / Header . java 
 + + + b / src / java / org / apache / cassandra / net / Header . java 
 @ @ - 45 , 12 + 45 , 12 @ @ public class Header 
 return serializer _ ; 
 } 
 
 - private InetAddress from _ ; 
 + private final InetAddress from _ ; 
 / / TODO STAGE can be determined from verb 
 - private StorageService . Verb verb _ ; 
 - private String messageId _ ; 
 + private final StorageService . Verb verb _ ; 
 + private final String messageId _ ; 
 protected Map < String , byte [ ] > details _ = new Hashtable < String , byte [ ] > ( ) ; 
 - 
 + 
 Header ( String id , InetAddress from , StorageService . Verb verb ) 
 { 
 assert id ! = null ; 
 @ @ - 88 , 12 + 88 , 7 @ @ public class Header 
 return messageId _ ; 
 } 
 
 - void setMessageId ( String id ) 
 - { 
 - messageId _ = id ; 
 - } 
 - 
 - byte [ ] getDetail ( Object key ) 
 + byte [ ] getDetail ( String key ) 
 { 
 return details _ . get ( key ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / net / Message . java b / src / java / org / apache / cassandra / net / Message . java 
 index 35c6eec . . 7ad2759 100644 
 - - - a / src / java / org / apache / cassandra / net / Message . java 
 + + + b / src / java / org / apache / cassandra / net / Message . java 
 @ @ - 59 , 7 + 59 , 7 @ @ public class Message 
 this ( new Header ( from , verb ) , body ) ; 
 } 
 
 - public byte [ ] getHeader ( Object key ) 
 + public byte [ ] getHeader ( String key ) 
 { 
 return header _ . getDetail ( key ) ; 
 } 
 @ @ - 94 , 11 + 94 , 6 @ @ public class Message 
 return header _ . getMessageId ( ) ; 
 } 
 
 - void setMessageId ( String id ) 
 - { 
 - header _ . setMessageId ( id ) ; 
 - } 
 - 
 / / TODO should take byte [ ] + length so we don ' t have to copy to a byte [ ] of exactly the right len 
 public Message getReply ( InetAddress from , byte [ ] args ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index ba4f535 . . af697db 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 331 , 34 + 331 , 6 @ @ public final class MessagingService implements MessagingServiceMBean , ILatencyPu 
 } 
 
 / * * 
 - * Send a message to a given endpoint . The ith element in the < code > messages < / code > 
 - * array is sent to the ith element in the < code > to < / code > array . This method assumes 
 - * there is a one - one mapping between the < code > messages < / code > array and 
 - * the < code > to < / code > array . Otherwise an IllegalArgumentException will be thrown . 
 - * This method also informs the MessagingService to wait for at least 
 - * < code > howManyResults < / code > responses to determine success of failure . 
 - * @ param messages messages to be sent . 
 - * @ param to endpoints to which the message needs to be sent 
 - * @ param cb callback interface which is used to pass the responses or 
 - * suggest that a timeout occured to the invoker of the send ( ) . 
 - * @ return an reference to message id used to match with the result 
 - * / 
 - public String sendRR ( Message [ ] messages , List < InetAddress > to , IAsyncCallback cb ) 
 - { 
 - if ( messages . length ! = to . size ( ) ) 
 - throw new IllegalArgumentException ( " Number of messages and the number of endpoints need to be same . " ) ; 
 - String groupId = GuidGenerator . guid ( ) ; 
 - addCallback ( cb , groupId ) ; 
 - for ( int i = 0 ; i < messages . length ; + + i ) 
 - { 
 - messages [ i ] . setMessageId ( groupId ) ; 
 - putTarget ( groupId , to . get ( i ) ) ; 
 - sendOneWay ( messages [ i ] , to . get ( i ) ) ; 
 - } 
 - return groupId ; 
 - } 
 - 
 - / * * 
 * Send a message to a given endpoint . This method adheres to the fire and forget 
 * style messaging . 
 * @ param message messages to be sent . 
 diff - - git a / src / java / org / apache / cassandra / service / ConsistencyChecker . java b / src / java / org / apache / cassandra / service / ConsistencyChecker . java 
 deleted file mode 100644 
 index b57963a . . 0000000 
 - - - a / src / java / org / apache / cassandra / service / ConsistencyChecker . java 
 + + + / dev / null 
 @ @ - 1 , 183 + 0 , 0 @ @ 
 - / * * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package org . apache . cassandra . service ; 
 - 
 - import java . io . ByteArrayInputStream ; 
 - import java . io . DataInputStream ; 
 - import java . io . IOException ; 
 - import java . net . InetAddress ; 
 - import java . nio . ByteBuffer ; 
 - import java . util . List ; 
 - import java . util . concurrent . ScheduledExecutorService ; 
 - import java . util . concurrent . ScheduledThreadPoolExecutor ; 
 - import java . util . concurrent . TimeUnit ; 
 - 
 - import org . apache . commons . lang . ArrayUtils ; 
 - import org . apache . commons . lang . StringUtils ; 
 - import org . slf4j . Logger ; 
 - import org . slf4j . LoggerFactory ; 
 - 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 - import org . apache . cassandra . db . ColumnFamily ; 
 - import org . apache . cassandra . db . ReadCommand ; 
 - import org . apache . cassandra . db . ReadResponse ; 
 - import org . apache . cassandra . db . Row ; 
 - import org . apache . cassandra . net . IAsyncCallback ; 
 - import org . apache . cassandra . net . Message ; 
 - import org . apache . cassandra . net . MessagingService ; 
 - import org . apache . cassandra . utils . WrappedRunnable ; 
 - 
 - / * * 
 - * ConsistencyChecker does the following : 
 - * 
 - * [ ConsistencyChecker . run ] 
 - * ( 1 ) sends DIGEST read requests to each other replica of the given row . 
 - * 
 - * [ DigestResponseHandler ] 
 - * ( 2 ) If any of the digests to not match the data read , it sends a second round of requests 
 - * to each replica , this time for the full data 
 - * 
 - * [ DataRepairHandler ] 
 - * ( 3 ) processes full - read responses and invokes resolve . The actual sending of messages 
 - * repairing out - of - date or missing data is handled by ReadResponseResolver . 
 - * / 
 - class ConsistencyChecker implements Runnable 
 - { 
 - private static Logger logger _ = LoggerFactory . getLogger ( ConsistencyChecker . class ) ; 
 - 
 - private static ScheduledExecutorService executor _ = new ScheduledThreadPoolExecutor ( 1 ) ; / / TODO add JMX 
 - 
 - private final Row row _ ; 
 - protected final List < InetAddress > replicas _ ; 
 - private final ReadCommand readCommand _ ; 
 - private final InetAddress dataSource ; 
 - 
 - public ConsistencyChecker ( ReadCommand command , Row row , List < InetAddress > endpoints , InetAddress dataSource ) 
 - { 
 - row _ = row ; 
 - replicas _ = endpoints ; 
 - readCommand _ = command ; 
 - this . dataSource = dataSource ; 
 - } 
 - 
 - public void run ( ) 
 - 	 { 
 - ReadCommand readCommandDigestOnly = constructReadMessage ( true ) ; 
 - 	 	 try 
 - 	 	 { 
 - 	 	 	 Message message = readCommandDigestOnly . makeReadMessage ( ) ; 
 - if ( logger _ . isDebugEnabled ( ) ) 
 - logger _ . debug ( " Reading consistency digest for " + readCommand _ . key + " from " + message . getMessageId ( ) + " @ [ " + StringUtils . join ( replicas _ , " , " ) + " ] " ) ; 
 - 
 - MessagingService . instance ( ) . addCallback ( new DigestResponseHandler ( ) , message . getMessageId ( ) ) ; 
 - for ( InetAddress endpoint : replicas _ ) 
 - { 
 - if ( ! endpoint . equals ( dataSource ) ) 
 - MessagingService . instance ( ) . sendOneWay ( message , endpoint ) ; 
 - } 
 - 	 	 } 
 - 	 	 catch ( IOException ex ) 
 - 	 	 { 
 - 	 	 	 throw new RuntimeException ( ex ) ; 
 - 	 	 } 
 - 	 } 
 - 
 - private ReadCommand constructReadMessage ( boolean isDigestQuery ) 
 - { 
 - ReadCommand readCommand = readCommand _ . copy ( ) ; 
 - readCommand . setDigestQuery ( isDigestQuery ) ; 
 - return readCommand ; 
 - } 
 - 
 - class DigestResponseHandler implements IAsyncCallback 
 - 	 { 
 - private boolean repairInvoked ; 
 - private final ByteBuffer localDigest = ColumnFamily . digest ( row _ . cf ) ; 
 - 
 - public synchronized void response ( Message response ) 
 - 	 	 { 
 - if ( repairInvoked ) 
 - return ; 
 - 
 - try 
 - { 
 - byte [ ] body = response . getMessageBody ( ) ; 
 - ByteArrayInputStream bufIn = new ByteArrayInputStream ( body ) ; 
 - ReadResponse result = ReadResponse . serializer ( ) . deserialize ( new DataInputStream ( bufIn ) ) ; 
 - ByteBuffer digest = result . digest ( ) ; 
 - 
 - if ( ! localDigest . equals ( digest ) ) 
 - { 
 - ReadCommand readCommand = constructReadMessage ( false ) ; 
 - Message message = readCommand . makeReadMessage ( ) ; 
 - if ( logger _ . isDebugEnabled ( ) ) 
 - logger _ . debug ( " Digest mismatch ; re - reading " + readCommand _ . key + " from " + message . getMessageId ( ) + " @ [ " + StringUtils . join ( replicas _ , " , " ) + " ] " ) ; 
 - MessagingService . instance ( ) . addCallback ( new DataRepairHandler ( ) , message . getMessageId ( ) ) ; 
 - for ( InetAddress endpoint : replicas _ ) 
 - { 
 - if ( ! endpoint . equals ( dataSource ) ) 
 - MessagingService . instance ( ) . sendOneWay ( message , endpoint ) ; 
 - } 
 - 
 - repairInvoked = true ; 
 - } 
 - } 
 - catch ( Exception e ) 
 - { 
 - throw new RuntimeException ( " Error handling responses for " + row _ , e ) ; 
 - } 
 - } 
 - } 
 - 
 - class DataRepairHandler implements IAsyncCallback 
 - 	 { 
 - 	 	 private final ReadResponseResolver readResponseResolver _ ; 
 - 	 	 private final int majority _ ; 
 - 	 	 
 - public DataRepairHandler ( ) throws IOException 
 - { 
 - readResponseResolver _ = new ReadResponseResolver ( readCommand _ . table , readCommand _ . key ) ; 
 - majority _ = ( replicas _ . size ( ) / 2 ) + 1 ; 
 - / / wrap original data Row in a response Message so it doesn ' t need to be special - cased in the resolver 
 - ReadResponse readResponse = new ReadResponse ( row _ ) ; 
 - Message fakeMessage = new Message ( dataSource , StorageService . Verb . INTERNAL _ RESPONSE , ArrayUtils . EMPTY _ BYTE _ ARRAY ) ; 
 - readResponseResolver _ . injectPreProcessed ( fakeMessage , readResponse ) ; 
 - } 
 - 
 - / / synchronized so the " = = majority " is safe 
 - 	 	 public synchronized void response ( Message message ) 
 - 	 	 { 
 - 	 	 	 if ( logger _ . isDebugEnabled ( ) ) 
 - 	 	 	 logger _ . debug ( " Received response in DataRepairHandler : " + message . toString ( ) ) ; 
 - readResponseResolver _ . preprocess ( message ) ; 
 - if ( readResponseResolver _ . getMessageCount ( ) = = majority _ ) 
 - { 
 - Runnable runnable = new WrappedRunnable ( ) 
 - { 
 - public void runMayThrow ( ) throws IOException , DigestMismatchException 
 - { 
 - readResponseResolver _ . resolve ( ) ; 
 - } 
 - } ; 
 - / / give remaining replicas until timeout to reply and get added to responses _ 
 - executor _ . schedule ( runnable , DatabaseDescriptor . getRpcTimeout ( ) , TimeUnit . MILLISECONDS ) ; 
 - } 
 - } 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / service / ReadCallback . java b / src / java / org / apache / cassandra / service / ReadCallback . java 
 index 2daba58 . . d7d8b89 100644 
 - - - a / src / java / org / apache / cassandra / service / ReadCallback . java 
 + + + b / src / java / org / apache / cassandra / service / ReadCallback . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . db . ReadResponse ; 
 import org . apache . cassandra . db . Table ; 
 import org . apache . cassandra . net . IAsyncCallback ; 
 import org . apache . cassandra . net . Message ; 
 @ @ - 89 , 6 + 90 , 15 @ @ public class ReadCallback < T > implements IAsyncCallback 
 if ( resolver . isDataPresent ( ) ) 
 condition . signal ( ) ; 
 } 
 + 
 + public void response ( ReadResponse result ) 
 + { 
 + ( ( ReadResponseResolver ) resolver ) . injectPreProcessed ( result ) ; 
 + if ( resolver . getMessageCount ( ) < blockfor ) 
 + return ; 
 + if ( resolver . isDataPresent ( ) ) 
 + condition . signal ( ) ; 
 + } 
 
 public int determineBlockFor ( ConsistencyLevel consistencyLevel , String table ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / service / ReadResponseResolver . java b / src / java / org / apache / cassandra / service / ReadResponseResolver . java 
 index 0d0d235 . . 55c2ab7 100644 
 - - - a / src / java / org / apache / cassandra / service / ReadResponseResolver . java 
 + + + b / src / java / org / apache / cassandra / service / ReadResponseResolver . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import java . util . List ; 
 import java . util . Map ; 
 import java . util . concurrent . ConcurrentMap ; 
 
 + import org . apache . commons . lang . ArrayUtils ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 51 , 6 + 52 , 7 @ @ public class ReadResponseResolver implements IResponseResolver < Row > 
 private final ConcurrentMap < Message , ReadResponse > results = new NonBlockingHashMap < Message , ReadResponse > ( ) ; 
 private DecoratedKey key ; 
 private ByteBuffer digest ; 
 + private static final Message FAKE _ MESSAGE = new Message ( FBUtilities . getLocalAddress ( ) , StorageService . Verb . INTERNAL _ RESPONSE , ArrayUtils . EMPTY _ BYTE _ ARRAY ) ; ; 
 
 public ReadResponseResolver ( String table , ByteBuffer key ) 
 { 
 @ @ - 248 , 10 + 250 , 11 @ @ public class ReadResponseResolver implements IResponseResolver < Row > 
 } 
 } 
 
 - / * * hack so ConsistencyChecker doesn ' t have to serialize / deserialize an extra real Message * / 
 - public void injectPreProcessed ( Message message , ReadResponse result ) 
 + / * * hack so local reads don ' t force de / serialization of an extra real Message * / 
 + public void injectPreProcessed ( ReadResponse result ) 
 { 
 - results . put ( message , result ) ; 
 + assert results . get ( FAKE _ MESSAGE ) = = null ; / / should only be one local reply 
 + results . put ( FAKE _ MESSAGE , result ) ; 
 } 
 
 public boolean isDataPresent ( ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index 54ee8d5 . . 2d15caa 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 526 , 14 + 526 , 9 @ @ public class StorageProxy implements StorageProxyMBean 
 for ( ReadCommand command : commands ) 
 { 
 assert ! command . isDigestQuery ( ) ; 
 - ReadCommand readMessageDigestOnly = command . copy ( ) ; 
 - readMessageDigestOnly . setDigestQuery ( true ) ; 
 - Message message = command . makeReadMessage ( ) ; 
 - Message messageDigestOnly = readMessageDigestOnly . makeReadMessage ( ) ; 
 
 List < InetAddress > endpoints = StorageService . instance . getLiveNaturalEndpoints ( command . table , command . key ) ; 
 DatabaseDescriptor . getEndpointSnitch ( ) . sortByProximity ( FBUtilities . getLocalAddress ( ) , endpoints ) ; 
 - InetAddress dataPoint = endpoints . get ( 0 ) ; 
 
 ReadResponseResolver resolver = new ReadResponseResolver ( command . table , command . key ) ; 
 ReadCallback < Row > handler = getReadCallback ( resolver , command . table , consistency _ level ) ; 
 @ @ - 549 , 19 + 544 , 52 @ @ public class StorageProxy implements StorageProxyMBean 
 { 
 endpoints = endpoints . subList ( 0 , handler . blockfor ) ; 
 } 
 - Message [ ] messages = new Message [ endpoints . size ( ) ] ; 
 - 
 - / / data - request message is sent to dataPoint , the node that will actually get 
 + 
 + / / The data - request message is sent to dataPoint , the node that will actually get 
 / / the data for us . The other replicas are only sent a digest query . 
 - for ( int i = 0 ; i < messages . length ; i + + ) 
 + ReadCommand digestCommand = null ; 
 + if ( endpoints . size ( ) > 1 ) 
 + { 
 + digestCommand = command . copy ( ) ; 
 + digestCommand . setDigestQuery ( true ) ; 
 + } 
 + 
 + InetAddress dataPoint = endpoints . get ( 0 ) ; 
 + if ( dataPoint . equals ( FBUtilities . getLocalAddress ( ) ) ) 
 + { 
 + if ( logger . isDebugEnabled ( ) ) 
 + logger . debug ( " reading data for " + command + " locally " ) ; 
 + StageManager . getStage ( Stage . READ ) . submit ( new WeakReadLocalRunnable ( command , handler ) ) ; 
 + } 
 + else 
 { 
 - InetAddress endpoint = endpoints . get ( i ) ; 
 - Message m = endpoint . equals ( dataPoint ) ? message : messageDigestOnly ; 
 - messages [ i ] = m ; 
 + Message message = command . makeReadMessage ( ) ; 
 if ( logger . isDebugEnabled ( ) ) 
 - logger . debug ( " reading " + ( m = = message ? " data " : " digest " ) + " for " + command + " from " + m . getMessageId ( ) + " @ " + endpoint ) ; 
 + logger . debug ( " reading digest for " + command + " from " + message . getMessageId ( ) + " @ " + dataPoint ) ; 
 + MessagingService . instance ( ) . sendRR ( message , dataPoint , handler ) ; 
 + } 
 + 
 + / / We lazy - construct the digest Message object since it may not be necessary if we 
 + / / are doing a local digest read , or no digest reads at all . 
 + Message digestMessage = null ; 
 + for ( InetAddress digestPoint : endpoints . subList ( 1 , endpoints . size ( ) ) ) 
 + { 
 + if ( digestPoint . equals ( FBUtilities . getLocalAddress ( ) ) ) 
 + { 
 + if ( logger . isDebugEnabled ( ) ) 
 + logger . debug ( " reading digest for " + command + " locally " ) ; 
 + StageManager . getStage ( Stage . READ ) . submit ( new WeakReadLocalRunnable ( digestCommand , handler ) ) ; 
 + } 
 + else 
 + { 
 + if ( digestMessage = = null ) 
 + digestMessage = digestCommand . makeReadMessage ( ) ; 
 + if ( logger . isDebugEnabled ( ) ) 
 + logger . debug ( " reading digest for " + command + " from " + digestMessage . getMessageId ( ) + " @ " + digestPoint ) ; 
 + MessagingService . instance ( ) . sendRR ( digestMessage , digestPoint , handler ) ; 
 + } 
 } 
 - MessagingService . instance ( ) . sendRR ( messages , endpoints , handler ) ; 
 + 
 readCallbacks . add ( handler ) ; 
 commandEndpoints . add ( endpoints ) ; 
 } 
 @ @ - 619 , 6 + 647 , 28 @ @ public class StorageProxy implements StorageProxyMBean 
 return rows ; 
 } 
 
 + static class WeakReadLocalRunnable extends WrappedRunnable 
 + { 
 + private final ReadCommand command ; 
 + private final ReadCallback < Row > handler ; 
 + 
 + WeakReadLocalRunnable ( ReadCommand command , ReadCallback < Row > handler ) 
 + { 
 + this . command = command ; 
 + this . handler = handler ; 
 + } 
 + 
 + protected void runMayThrow ( ) throws IOException 
 + { 
 + if ( logger . isDebugEnabled ( ) ) 
 + logger . debug ( " weakreadlocal reading " + command ) ; 
 + 
 + Table table = Table . open ( command . table ) ; 
 + ReadResponse result = ReadVerbHandler . getResponse ( command , command . getRow ( table ) ) ; 
 + handler . response ( result ) ; 
 + } 
 + } 
 + 
 static < T > ReadCallback < T > getReadCallback ( IResponseResolver < T > resolver , String table , ConsistencyLevel consistencyLevel ) 
 { 
 if ( consistencyLevel . equals ( ConsistencyLevel . LOCAL _ QUORUM ) | | consistencyLevel . equals ( ConsistencyLevel . EACH _ QUORUM ) ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index cab09d5 . . 3e44b13 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 171 , 15 + 171 , 6 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 / * This abstraction maintains the token / endpoint metadata information * / 
 private TokenMetadata tokenMetadata _ = new TokenMetadata ( ) ; 
 
 - / * This thread pool does consistency checks when the client doesn ' t care about consistency * / 
 - private ExecutorService consistencyManager _ = new JMXEnabledThreadPoolExecutor ( DatabaseDescriptor . getConsistencyThreads ( ) , 
 - DatabaseDescriptor . getConsistencyThreads ( ) , 
 - StageManager . KEEPALIVE , 
 - TimeUnit . SECONDS , 
 - new LinkedBlockingQueue < Runnable > ( ) , 
 - new NamedThreadFactory ( " ReadRepair " ) , 
 - " request " ) ; 
 - 
 private Set < InetAddress > replicatingNodes ; 
 private InetAddress removingNode ; 
 
 @ @ - 188 , 6 + 179 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 / * when intialized as a client , we shouldn ' t write to the system table . * / 
 private boolean isClientMode ; 
 private boolean initialized ; 
 + private volatile boolean joined = false ; 
 private String operationMode ; 
 private MigrationManager migrationManager = new MigrationManager ( ) ; 
 
 @ @ - 353 , 7 + 345 , 20 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 } 
 } 
 
 + if ( Boolean . parseBoolean ( System . getProperty ( " cassandra . join _ ring " , " true " ) ) ) 
 + { 
 + joinTokenRing ( ) ; 
 + } 
 + else 
 + { 
 + logger _ . info ( " Not joining ring as requested . Use JMX ( StorageService - > joinRing ( ) ) to initiate ring joining " ) ; 
 + } 
 + } 
 + 
 + private void joinTokenRing ( ) throws IOException , org . apache . cassandra . config . ConfigurationException 
 + { 
 logger _ . info ( " Starting up server gossip " ) ; 
 + joined = true ; 
 
 / / have to start the gossip service before we can see any info on other nodes . this is necessary 
 / / for bootstrap to get the load info it needs . 
 @ @ - 425 , 6 + 430 , 20 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 assert tokenMetadata _ . sortedTokens ( ) . size ( ) > 0 ; 
 } 
 
 + public synchronized void joinRing ( ) throws IOException , org . apache . cassandra . config . ConfigurationException 
 + { 
 + if ( ! joined ) 
 + { 
 + logger _ . info ( " Joining ring by operator request " ) ; 
 + joinTokenRing ( ) ; 
 + } 
 + } 
 + 
 + public boolean isJoined ( ) 
 + { 
 + return joined ; 
 + } 
 + 
 private void setMode ( String m , boolean log ) 
 { 
 operationMode = m ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index 569fb33 . . 55293d0 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 283 , 4 + 283 , 8 @ @ public interface StorageServiceMBean 
 
 public void invalidateKeyCaches ( String ks , String . . . cfs ) throws IOException ; 
 public void invalidateRowCaches ( String ks , String . . . cfs ) throws IOException ; 
 + 
 + / / allows a node that have been started without joining the ring to join it 
 + public void joinRing ( ) throws IOException , org . apache . cassandra . config . ConfigurationException ; 
 + public boolean isJoined ( ) ; 
 }
