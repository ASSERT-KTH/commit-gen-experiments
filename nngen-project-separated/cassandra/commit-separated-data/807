BLEU SCORE: 0.020244462660665517

TEST MSG: Add a metrics timer to MemtablePool and use it to track time spent blocked on memory in MemtableAllocator .
GENERATED MSG: LCS defaults to AlwaysPresentFilter

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index ddbac69 . . ee2f6d3 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 8 <nl> + * Add a metrics timer to MemtablePool and use it to track time spent blocked on memory in MemtableAllocator ( CASSANDRA - 11327 ) <nl> * Fix upgrading schema with super columns with non - text subcomparators ( CASSANDRA - 12023 ) <nl> * Add TimeWindowCompactionStrategy ( CASSANDRA - 9666 ) <nl> Merged from 2 . 2 : <nl> diff - - git a / src / java / org / apache / cassandra / utils / memory / MemtableAllocator . java b / src / java / org / apache / cassandra / utils / memory / MemtableAllocator . java <nl> index 588b433 . . 5a64c3c 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / memory / MemtableAllocator . java <nl> + + + b / src / java / org / apache / cassandra / utils / memory / MemtableAllocator . java <nl> @ @ - 183 , 7 + 183 , 7 @ @ public abstract class MemtableAllocator <nl> acquired ( size ) ; <nl> return ; <nl> } <nl> - WaitQueue . Signal signal = opGroup . isBlockingSignal ( parent . hasRoom ( ) . register ( ) ) ; <nl> + WaitQueue . Signal signal = opGroup . isBlockingSignal ( parent . hasRoom ( ) . register ( parent . blockedTimerContext ( ) ) ) ; <nl> boolean allocated = parent . tryAllocate ( size ) ; <nl> if ( allocated | | opGroup . isBlocking ( ) ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / utils / memory / MemtablePool . java b / src / java / org / apache / cassandra / utils / memory / MemtablePool . java <nl> index bb85884 . . e792944 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / memory / MemtablePool . java <nl> + + + b / src / java / org / apache / cassandra / utils / memory / MemtablePool . java <nl> @ @ - 20 , 6 + 20 , 9 @ @ package org . apache . cassandra . utils . memory ; <nl> <nl> import java . util . concurrent . atomic . AtomicLongFieldUpdater ; <nl> <nl> + import com . codahale . metrics . Timer ; <nl> + import org . apache . cassandra . metrics . CassandraMetricsRegistry ; <nl> + import org . apache . cassandra . metrics . DefaultNameFactory ; <nl> import org . apache . cassandra . utils . concurrent . WaitQueue ; <nl> <nl> <nl> @ @ - 35 , 6 + 38 , 8 @ @ public abstract class MemtablePool <nl> public final SubPool onHeap ; <nl> public final SubPool offHeap ; <nl> <nl> + public final Timer blockedOnAllocating ; <nl> + <nl> final WaitQueue hasRoom = new WaitQueue ( ) ; <nl> <nl> MemtablePool ( long maxOnHeapMemory , long maxOffHeapMemory , float cleanThreshold , Runnable cleaner ) <nl> @ @ - 42 , 6 + 47 , 8 @ @ public abstract class MemtablePool <nl> this . onHeap = getSubPool ( maxOnHeapMemory , cleanThreshold ) ; <nl> this . offHeap = getSubPool ( maxOffHeapMemory , cleanThreshold ) ; <nl> this . cleaner = getCleaner ( cleaner ) ; <nl> + blockedOnAllocating = CassandraMetricsRegistry . Metrics . timer ( new DefaultNameFactory ( " MemtablePool " ) <nl> + . createMetricName ( " BlockedOnAllocation " ) ) ; <nl> if ( this . cleaner ! = null ) <nl> this . cleaner . start ( ) ; <nl> } <nl> @ @ - 209 , 6 + 216 , 11 @ @ public abstract class MemtablePool <nl> { <nl> return hasRoom ; <nl> } <nl> + <nl> + public Timer . Context blockedTimerContext ( ) <nl> + { <nl> + return blockedOnAllocating . time ( ) ; <nl> + } <nl> } <nl> <nl> private static final AtomicLongFieldUpdater < SubPool > reclaimingUpdater = AtomicLongFieldUpdater . newUpdater ( SubPool . class , " reclaiming " ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index 5319fb0 . . 46fdac6 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 72 , 7 + 72 , 7 @ @ public final class CFMetaData <nl> public final static int DEFAULT _ GC _ GRACE _ SECONDS = 864000 ; <nl> public final static int DEFAULT _ MIN _ COMPACTION _ THRESHOLD = 4 ; <nl> public final static int DEFAULT _ MAX _ COMPACTION _ THRESHOLD = 32 ; <nl> - public final static String DEFAULT _ COMPACTION _ STRATEGY _ CLASS = " SizeTieredCompactionStrategy " ; <nl> + public final static Class < ? extends AbstractCompactionStrategy > DEFAULT _ COMPACTION _ STRATEGY _ CLASS = SizeTieredCompactionStrategy . class ; <nl> public final static ByteBuffer DEFAULT _ KEY _ NAME = ByteBufferUtil . bytes ( " KEY " ) ; <nl> public final static Caching DEFAULT _ CACHING _ STRATEGY = Caching . KEYS _ ONLY ; <nl> <nl> @ @ - 240 , 27 + 240 , 27 @ @ public final class CFMetaData <nl> public volatile AbstractType < ? > subcolumnComparator ; / / like comparator , for supercolumns <nl> <nl> / / OPTIONAL <nl> - private volatile String comment ; / / default none , for humans only <nl> - private volatile double readRepairChance ; / / default 1 . 0 ( always ) , chance [ 0 . 0 , 1 . 0 ] of read repair <nl> - private volatile double dcLocalReadRepairChance ; / / default 0 . 0 <nl> - private volatile boolean replicateOnWrite ; / / default false <nl> - private volatile int gcGraceSeconds ; / / default 864000 ( ten days ) <nl> - private volatile AbstractType < ? > defaultValidator ; / / default BytesType ( no - op ) , use comparator types <nl> - private volatile AbstractType < ? > keyValidator ; / / default BytesType ( no - op ) , use comparator types <nl> - private volatile int minCompactionThreshold ; / / default 4 <nl> - private volatile int maxCompactionThreshold ; / / default 32 <nl> + private volatile String comment = " " ; <nl> + private volatile double readRepairChance = DEFAULT _ READ _ REPAIR _ CHANCE ; <nl> + private volatile double dcLocalReadRepairChance = DEFAULT _ DCLOCAL _ READ _ REPAIR _ CHANCE ; <nl> + private volatile boolean replicateOnWrite = DEFAULT _ REPLICATE _ ON _ WRITE ; <nl> + private volatile int gcGraceSeconds = DEFAULT _ GC _ GRACE _ SECONDS ; <nl> + private volatile AbstractType < ? > defaultValidator = BytesType . instance ; <nl> + private volatile AbstractType < ? > keyValidator = BytesType . instance ; <nl> + private volatile int minCompactionThreshold = DEFAULT _ MIN _ COMPACTION _ THRESHOLD ; <nl> + private volatile int maxCompactionThreshold = DEFAULT _ MAX _ COMPACTION _ THRESHOLD ; <nl> / / Both those aliases list can be null padded if only some of the position have been given an alias through ALTER TABLE . . RENAME <nl> private volatile List < ByteBuffer > keyAliases = new ArrayList < ByteBuffer > ( ) ; <nl> private volatile List < ByteBuffer > columnAliases = new ArrayList < ByteBuffer > ( ) ; <nl> - private volatile ByteBuffer valueAlias ; / / default NULL <nl> - private volatile Double bloomFilterFpChance ; / / default NULL <nl> - private volatile Caching caching ; / / default KEYS _ ONLY ( possible : all , key _ only , row _ only , none ) <nl> + private volatile ByteBuffer valueAlias = null ; <nl> + private volatile Double bloomFilterFpChance = null ; <nl> + private volatile Caching caching = DEFAULT _ CACHING _ STRATEGY ; <nl> <nl> - volatile Map < ByteBuffer , ColumnDefinition > column _ metadata ; <nl> - public volatile Class < ? extends AbstractCompactionStrategy > compactionStrategyClass ; <nl> - public volatile Map < String , String > compactionStrategyOptions ; <nl> + volatile Map < ByteBuffer , ColumnDefinition > column _ metadata = new HashMap < ByteBuffer , ColumnDefinition > ( ) ; <nl> + public volatile Class < ? extends AbstractCompactionStrategy > compactionStrategyClass = DEFAULT _ COMPACTION _ STRATEGY _ CLASS ; <nl> + public volatile Map < String , String > compactionStrategyOptions = new HashMap < String , String > ( ) ; <nl> <nl> - public volatile CompressionParameters compressionParameters ; <nl> + public volatile CompressionParameters compressionParameters = new CompressionParameters ( null ) ; <nl> <nl> / / Processed infos used by CQL . This can be fully reconstructed from the CFMedata , <nl> / / so it ' s not saved on disk . It is however costlyish to recreate for each query <nl> @ @ - 301 , 7 + 301 , 7 @ @ public final class CFMetaData <nl> subcolumnComparator = enforceSubccDefault ( type , subcc ) ; <nl> cfId = id ; <nl> <nl> - this . init ( ) ; <nl> + updateCfDef ( ) ; / / init cqlCfDef <nl> } <nl> <nl> private static CFMetaData compile ( int id , String cql , String keyspace ) <nl> @ @ - 341 , 33 + 341 , 6 @ @ public final class CFMetaData <nl> <nl> private void init ( ) <nl> { <nl> - / / Set a bunch of defaults <nl> - readRepairChance = DEFAULT _ READ _ REPAIR _ CHANCE ; <nl> - dcLocalReadRepairChance = DEFAULT _ DCLOCAL _ READ _ REPAIR _ CHANCE ; <nl> - replicateOnWrite = DEFAULT _ REPLICATE _ ON _ WRITE ; <nl> - gcGraceSeconds = DEFAULT _ GC _ GRACE _ SECONDS ; <nl> - minCompactionThreshold = DEFAULT _ MIN _ COMPACTION _ THRESHOLD ; <nl> - maxCompactionThreshold = DEFAULT _ MAX _ COMPACTION _ THRESHOLD ; <nl> - caching = DEFAULT _ CACHING _ STRATEGY ; <nl> - <nl> - / / Defaults strange or simple enough to not need a DEFAULT _ T for <nl> - defaultValidator = BytesType . instance ; <nl> - keyValidator = BytesType . instance ; <nl> - comment = " " ; <nl> - valueAlias = null ; <nl> - column _ metadata = new HashMap < ByteBuffer , ColumnDefinition > ( ) ; <nl> - <nl> - try <nl> - { <nl> - compactionStrategyClass = createCompactionStrategy ( DEFAULT _ COMPACTION _ STRATEGY _ CLASS ) ; <nl> - } <nl> - catch ( ConfigurationException e ) <nl> - { <nl> - throw new AssertionError ( e ) ; <nl> - } <nl> - compactionStrategyOptions = new HashMap < String , String > ( ) ; <nl> - <nl> - compressionParameters = new CompressionParameters ( null ) ; <nl> updateCfDef ( ) ; / / init cqlCfDef <nl> } <nl> <nl> @ @ - 657 , 7 + 630 , 7 @ @ public final class CFMetaData <nl> if ( ! cf _ def . isSetMax _ compaction _ threshold ( ) ) <nl> cf _ def . setMax _ compaction _ threshold ( CFMetaData . DEFAULT _ MAX _ COMPACTION _ THRESHOLD ) ; <nl> if ( cf _ def . compaction _ strategy = = null ) <nl> - cf _ def . compaction _ strategy = DEFAULT _ COMPACTION _ STRATEGY _ CLASS ; <nl> + cf _ def . compaction _ strategy = DEFAULT _ COMPACTION _ STRATEGY _ CLASS . getSimpleName ( ) ; <nl> if ( cf _ def . compaction _ strategy _ options = = null ) <nl> cf _ def . compaction _ strategy _ options = Collections . emptyMap ( ) ; <nl> if ( ! cf _ def . isSetCompression _ options ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / cql / CFPropDefs . java b / src / java / org / apache / cassandra / cql / CFPropDefs . java <nl> index b402b29 . . d50f2d0 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / CFPropDefs . java <nl> + + + b / src / java / org / apache / cassandra / cql / CFPropDefs . java <nl> @ @ - 116 , 16 + 116 , 7 @ @ public class CFPropDefs { <nl> <nl> public void validate ( ) throws InvalidRequestException <nl> { <nl> - String compStrategy = getPropertyString ( KW _ COMPACTION _ STRATEGY _ CLASS , CFMetaData . DEFAULT _ COMPACTION _ STRATEGY _ CLASS ) ; <nl> - <nl> - try <nl> - { <nl> - compactionStrategyClass = CFMetaData . createCompactionStrategy ( compStrategy ) ; <nl> - } <nl> - catch ( ConfigurationException e ) <nl> - { <nl> - throw new InvalidRequestException ( e . getMessage ( ) ) ; <nl> - } <nl> + compactionStrategyClass = CFMetaData . DEFAULT _ COMPACTION _ STRATEGY _ CLASS ; <nl> <nl> / / we need to remove parent : key = value pairs from the main properties <nl> Set < String > propsToRemove = new HashSet < String > ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnIndex . java b / src / java / org / apache / cassandra / db / ColumnIndex . java <nl> index 761b004 . . bd1c35a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnIndex . java <nl> @ @ - 106 , 7 + 106 , 7 @ @ public class ColumnIndex <nl> * Serializes the index into in - memory structure with all required components <nl> * such as Bloom Filter , index block size , IndexInfo list <nl> * <nl> - * @ param columns Column family to create index for <nl> + * @ param cf Column family to create index for <nl> * <nl> * @ return information about index - it ' s Bloom Filter , block size and IndexInfo list <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java b / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java <nl> index 723536d . . 521eff0 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java <nl> + + + b / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package org . apache . cassandra . utils ; <nl> <nl> + import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> <nl> public class AlwaysPresentFilter implements IFilter

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index ddbac69 . . ee2f6d3 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 8 
 + * Add a metrics timer to MemtablePool and use it to track time spent blocked on memory in MemtableAllocator ( CASSANDRA - 11327 ) 
 * Fix upgrading schema with super columns with non - text subcomparators ( CASSANDRA - 12023 ) 
 * Add TimeWindowCompactionStrategy ( CASSANDRA - 9666 ) 
 Merged from 2 . 2 : 
 diff - - git a / src / java / org / apache / cassandra / utils / memory / MemtableAllocator . java b / src / java / org / apache / cassandra / utils / memory / MemtableAllocator . java 
 index 588b433 . . 5a64c3c 100644 
 - - - a / src / java / org / apache / cassandra / utils / memory / MemtableAllocator . java 
 + + + b / src / java / org / apache / cassandra / utils / memory / MemtableAllocator . java 
 @ @ - 183 , 7 + 183 , 7 @ @ public abstract class MemtableAllocator 
 acquired ( size ) ; 
 return ; 
 } 
 - WaitQueue . Signal signal = opGroup . isBlockingSignal ( parent . hasRoom ( ) . register ( ) ) ; 
 + WaitQueue . Signal signal = opGroup . isBlockingSignal ( parent . hasRoom ( ) . register ( parent . blockedTimerContext ( ) ) ) ; 
 boolean allocated = parent . tryAllocate ( size ) ; 
 if ( allocated | | opGroup . isBlocking ( ) ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / utils / memory / MemtablePool . java b / src / java / org / apache / cassandra / utils / memory / MemtablePool . java 
 index bb85884 . . e792944 100644 
 - - - a / src / java / org / apache / cassandra / utils / memory / MemtablePool . java 
 + + + b / src / java / org / apache / cassandra / utils / memory / MemtablePool . java 
 @ @ - 20 , 6 + 20 , 9 @ @ package org . apache . cassandra . utils . memory ; 
 
 import java . util . concurrent . atomic . AtomicLongFieldUpdater ; 
 
 + import com . codahale . metrics . Timer ; 
 + import org . apache . cassandra . metrics . CassandraMetricsRegistry ; 
 + import org . apache . cassandra . metrics . DefaultNameFactory ; 
 import org . apache . cassandra . utils . concurrent . WaitQueue ; 
 
 
 @ @ - 35 , 6 + 38 , 8 @ @ public abstract class MemtablePool 
 public final SubPool onHeap ; 
 public final SubPool offHeap ; 
 
 + public final Timer blockedOnAllocating ; 
 + 
 final WaitQueue hasRoom = new WaitQueue ( ) ; 
 
 MemtablePool ( long maxOnHeapMemory , long maxOffHeapMemory , float cleanThreshold , Runnable cleaner ) 
 @ @ - 42 , 6 + 47 , 8 @ @ public abstract class MemtablePool 
 this . onHeap = getSubPool ( maxOnHeapMemory , cleanThreshold ) ; 
 this . offHeap = getSubPool ( maxOffHeapMemory , cleanThreshold ) ; 
 this . cleaner = getCleaner ( cleaner ) ; 
 + blockedOnAllocating = CassandraMetricsRegistry . Metrics . timer ( new DefaultNameFactory ( " MemtablePool " ) 
 + . createMetricName ( " BlockedOnAllocation " ) ) ; 
 if ( this . cleaner ! = null ) 
 this . cleaner . start ( ) ; 
 } 
 @ @ - 209 , 6 + 216 , 11 @ @ public abstract class MemtablePool 
 { 
 return hasRoom ; 
 } 
 + 
 + public Timer . Context blockedTimerContext ( ) 
 + { 
 + return blockedOnAllocating . time ( ) ; 
 + } 
 } 
 
 private static final AtomicLongFieldUpdater < SubPool > reclaimingUpdater = AtomicLongFieldUpdater . newUpdater ( SubPool . class , " reclaiming " ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index 5319fb0 . . 46fdac6 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 72 , 7 + 72 , 7 @ @ public final class CFMetaData 
 public final static int DEFAULT _ GC _ GRACE _ SECONDS = 864000 ; 
 public final static int DEFAULT _ MIN _ COMPACTION _ THRESHOLD = 4 ; 
 public final static int DEFAULT _ MAX _ COMPACTION _ THRESHOLD = 32 ; 
 - public final static String DEFAULT _ COMPACTION _ STRATEGY _ CLASS = " SizeTieredCompactionStrategy " ; 
 + public final static Class < ? extends AbstractCompactionStrategy > DEFAULT _ COMPACTION _ STRATEGY _ CLASS = SizeTieredCompactionStrategy . class ; 
 public final static ByteBuffer DEFAULT _ KEY _ NAME = ByteBufferUtil . bytes ( " KEY " ) ; 
 public final static Caching DEFAULT _ CACHING _ STRATEGY = Caching . KEYS _ ONLY ; 
 
 @ @ - 240 , 27 + 240 , 27 @ @ public final class CFMetaData 
 public volatile AbstractType < ? > subcolumnComparator ; / / like comparator , for supercolumns 
 
 / / OPTIONAL 
 - private volatile String comment ; / / default none , for humans only 
 - private volatile double readRepairChance ; / / default 1 . 0 ( always ) , chance [ 0 . 0 , 1 . 0 ] of read repair 
 - private volatile double dcLocalReadRepairChance ; / / default 0 . 0 
 - private volatile boolean replicateOnWrite ; / / default false 
 - private volatile int gcGraceSeconds ; / / default 864000 ( ten days ) 
 - private volatile AbstractType < ? > defaultValidator ; / / default BytesType ( no - op ) , use comparator types 
 - private volatile AbstractType < ? > keyValidator ; / / default BytesType ( no - op ) , use comparator types 
 - private volatile int minCompactionThreshold ; / / default 4 
 - private volatile int maxCompactionThreshold ; / / default 32 
 + private volatile String comment = " " ; 
 + private volatile double readRepairChance = DEFAULT _ READ _ REPAIR _ CHANCE ; 
 + private volatile double dcLocalReadRepairChance = DEFAULT _ DCLOCAL _ READ _ REPAIR _ CHANCE ; 
 + private volatile boolean replicateOnWrite = DEFAULT _ REPLICATE _ ON _ WRITE ; 
 + private volatile int gcGraceSeconds = DEFAULT _ GC _ GRACE _ SECONDS ; 
 + private volatile AbstractType < ? > defaultValidator = BytesType . instance ; 
 + private volatile AbstractType < ? > keyValidator = BytesType . instance ; 
 + private volatile int minCompactionThreshold = DEFAULT _ MIN _ COMPACTION _ THRESHOLD ; 
 + private volatile int maxCompactionThreshold = DEFAULT _ MAX _ COMPACTION _ THRESHOLD ; 
 / / Both those aliases list can be null padded if only some of the position have been given an alias through ALTER TABLE . . RENAME 
 private volatile List < ByteBuffer > keyAliases = new ArrayList < ByteBuffer > ( ) ; 
 private volatile List < ByteBuffer > columnAliases = new ArrayList < ByteBuffer > ( ) ; 
 - private volatile ByteBuffer valueAlias ; / / default NULL 
 - private volatile Double bloomFilterFpChance ; / / default NULL 
 - private volatile Caching caching ; / / default KEYS _ ONLY ( possible : all , key _ only , row _ only , none ) 
 + private volatile ByteBuffer valueAlias = null ; 
 + private volatile Double bloomFilterFpChance = null ; 
 + private volatile Caching caching = DEFAULT _ CACHING _ STRATEGY ; 
 
 - volatile Map < ByteBuffer , ColumnDefinition > column _ metadata ; 
 - public volatile Class < ? extends AbstractCompactionStrategy > compactionStrategyClass ; 
 - public volatile Map < String , String > compactionStrategyOptions ; 
 + volatile Map < ByteBuffer , ColumnDefinition > column _ metadata = new HashMap < ByteBuffer , ColumnDefinition > ( ) ; 
 + public volatile Class < ? extends AbstractCompactionStrategy > compactionStrategyClass = DEFAULT _ COMPACTION _ STRATEGY _ CLASS ; 
 + public volatile Map < String , String > compactionStrategyOptions = new HashMap < String , String > ( ) ; 
 
 - public volatile CompressionParameters compressionParameters ; 
 + public volatile CompressionParameters compressionParameters = new CompressionParameters ( null ) ; 
 
 / / Processed infos used by CQL . This can be fully reconstructed from the CFMedata , 
 / / so it ' s not saved on disk . It is however costlyish to recreate for each query 
 @ @ - 301 , 7 + 301 , 7 @ @ public final class CFMetaData 
 subcolumnComparator = enforceSubccDefault ( type , subcc ) ; 
 cfId = id ; 
 
 - this . init ( ) ; 
 + updateCfDef ( ) ; / / init cqlCfDef 
 } 
 
 private static CFMetaData compile ( int id , String cql , String keyspace ) 
 @ @ - 341 , 33 + 341 , 6 @ @ public final class CFMetaData 
 
 private void init ( ) 
 { 
 - / / Set a bunch of defaults 
 - readRepairChance = DEFAULT _ READ _ REPAIR _ CHANCE ; 
 - dcLocalReadRepairChance = DEFAULT _ DCLOCAL _ READ _ REPAIR _ CHANCE ; 
 - replicateOnWrite = DEFAULT _ REPLICATE _ ON _ WRITE ; 
 - gcGraceSeconds = DEFAULT _ GC _ GRACE _ SECONDS ; 
 - minCompactionThreshold = DEFAULT _ MIN _ COMPACTION _ THRESHOLD ; 
 - maxCompactionThreshold = DEFAULT _ MAX _ COMPACTION _ THRESHOLD ; 
 - caching = DEFAULT _ CACHING _ STRATEGY ; 
 - 
 - / / Defaults strange or simple enough to not need a DEFAULT _ T for 
 - defaultValidator = BytesType . instance ; 
 - keyValidator = BytesType . instance ; 
 - comment = " " ; 
 - valueAlias = null ; 
 - column _ metadata = new HashMap < ByteBuffer , ColumnDefinition > ( ) ; 
 - 
 - try 
 - { 
 - compactionStrategyClass = createCompactionStrategy ( DEFAULT _ COMPACTION _ STRATEGY _ CLASS ) ; 
 - } 
 - catch ( ConfigurationException e ) 
 - { 
 - throw new AssertionError ( e ) ; 
 - } 
 - compactionStrategyOptions = new HashMap < String , String > ( ) ; 
 - 
 - compressionParameters = new CompressionParameters ( null ) ; 
 updateCfDef ( ) ; / / init cqlCfDef 
 } 
 
 @ @ - 657 , 7 + 630 , 7 @ @ public final class CFMetaData 
 if ( ! cf _ def . isSetMax _ compaction _ threshold ( ) ) 
 cf _ def . setMax _ compaction _ threshold ( CFMetaData . DEFAULT _ MAX _ COMPACTION _ THRESHOLD ) ; 
 if ( cf _ def . compaction _ strategy = = null ) 
 - cf _ def . compaction _ strategy = DEFAULT _ COMPACTION _ STRATEGY _ CLASS ; 
 + cf _ def . compaction _ strategy = DEFAULT _ COMPACTION _ STRATEGY _ CLASS . getSimpleName ( ) ; 
 if ( cf _ def . compaction _ strategy _ options = = null ) 
 cf _ def . compaction _ strategy _ options = Collections . emptyMap ( ) ; 
 if ( ! cf _ def . isSetCompression _ options ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / cql / CFPropDefs . java b / src / java / org / apache / cassandra / cql / CFPropDefs . java 
 index b402b29 . . d50f2d0 100644 
 - - - a / src / java / org / apache / cassandra / cql / CFPropDefs . java 
 + + + b / src / java / org / apache / cassandra / cql / CFPropDefs . java 
 @ @ - 116 , 16 + 116 , 7 @ @ public class CFPropDefs { 
 
 public void validate ( ) throws InvalidRequestException 
 { 
 - String compStrategy = getPropertyString ( KW _ COMPACTION _ STRATEGY _ CLASS , CFMetaData . DEFAULT _ COMPACTION _ STRATEGY _ CLASS ) ; 
 - 
 - try 
 - { 
 - compactionStrategyClass = CFMetaData . createCompactionStrategy ( compStrategy ) ; 
 - } 
 - catch ( ConfigurationException e ) 
 - { 
 - throw new InvalidRequestException ( e . getMessage ( ) ) ; 
 - } 
 + compactionStrategyClass = CFMetaData . DEFAULT _ COMPACTION _ STRATEGY _ CLASS ; 
 
 / / we need to remove parent : key = value pairs from the main properties 
 Set < String > propsToRemove = new HashSet < String > ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnIndex . java b / src / java / org / apache / cassandra / db / ColumnIndex . java 
 index 761b004 . . bd1c35a 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnIndex . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnIndex . java 
 @ @ - 106 , 7 + 106 , 7 @ @ public class ColumnIndex 
 * Serializes the index into in - memory structure with all required components 
 * such as Bloom Filter , index block size , IndexInfo list 
 * 
 - * @ param columns Column family to create index for 
 + * @ param cf Column family to create index for 
 * 
 * @ return information about index - it ' s Bloom Filter , block size and IndexInfo list 
 * / 
 diff - - git a / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java b / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java 
 index 723536d . . 521eff0 100644 
 - - - a / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java 
 + + + b / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package org . apache . cassandra . utils ; 
 
 + import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 
 public class AlwaysPresentFilter implements IFilter
