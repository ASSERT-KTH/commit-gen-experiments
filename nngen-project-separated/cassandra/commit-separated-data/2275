BLEU SCORE: 0.04372912656590315

TEST MSG: Filter cached results correctly .
GENERATED MSG: fix maxTimestamp to include row tombstones

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 5210e0d . . 378e812 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 0 - final <nl> + * Filter cached results correctly ( CASSANDRA - 7636 ) <nl> * Fix tracing on the new SEPExecutor ( CASSANDRA - 7644 ) <nl> * Remove shuffle and taketoken ( CASSANDRA - 7601 ) <nl> * Clean up Windows batch scripts ( CASSANDRA - 7619 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index fb66c34 . . 8e7bdeb 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1522 , 7 + 1522 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> metric . rowCacheHit . inc ( ) ; <nl> Tracing . trace ( " Row cache hit " ) ; <nl> - return cachedCf ; <nl> + return filterColumnFamily ( cachedCf , filter ) ; <nl> } <nl> <nl> metric . rowCacheHitOutOfRange . inc ( ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / RowCacheCQLTest . java b / test / unit / org / apache / cassandra / db / RowCacheCQLTest . java <nl> new file mode 100644 <nl> index 0000000 . . 3dc5ce3 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / db / RowCacheCQLTest . java <nl> @ @ - 0 , 0 + 1 , 40 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . db ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . cql3 . CQLTester ; <nl> + import org . apache . cassandra . cql3 . UntypedResultSet ; <nl> + import org . apache . cassandra . service . CacheService ; <nl> + import static org . junit . Assert . assertEquals ; <nl> + <nl> + public class RowCacheCQLTest extends CQLTester <nl> + { <nl> + @ Test <nl> + public void test7636 ( ) throws Throwable <nl> + { <nl> + CacheService . instance . setRowCacheCapacityInMB ( 1 ) ; <nl> + createTable ( " CREATE TABLE % s ( p1 bigint , c1 int , PRIMARY KEY ( p1 , c1 ) ) WITH caching = ' { \ " keys \ " : \ " NONE \ " , \ " rows _ per _ partition \ " : \ " ALL \ " } ' " ) ; <nl> + execute ( " INSERT INTO % s ( p1 , c1 ) VALUES ( 123 , 10 ) " ) ; <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE p1 = 123 and c1 > 1000 " ) ) ; <nl> + UntypedResultSet res = execute ( " SELECT * FROM % s WHERE p1 = 123 and c1 > 0 " ) ; <nl> + assertEquals ( 1 , res . size ( ) ) ; <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE p1 = 123 and c1 > 1000 " ) ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index c37dd93 . . 49719f4 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 24 , 6 + 24 , 7 @ @ <nl> * Avoids having replicate on write tasks stacking up at CL . ONE ( CASSANDRA - 2889 ) <nl> Merged from 1 . 0 : <nl> * Fix super columns bug where cache is not updated ( CASSANDRA - 4190 ) <nl> + * fix maxTimestamp to include row tombstones ( CASSANDRA - 4116 ) <nl> <nl> <nl> 1 . 1 . 0 - final <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 7b01766 . . 298dfa54 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 270 , 7 + 270 , 7 @ @ public class ColumnFamily extends AbstractColumnContainer implements IRowCacheEn <nl> <nl> public long maxTimestamp ( ) <nl> { <nl> - long maxTimestamp = Long . MIN _ VALUE ; <nl> + long maxTimestamp = getMarkedForDeleteAt ( ) ; <nl> for ( IColumn column : columns ) <nl> maxTimestamp = Math . max ( maxTimestamp , column . maxTimestamp ( ) ) ; <nl> return maxTimestamp ; <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableWriterTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableWriterTest . java <nl> new file mode 100644 <nl> index 0000000 . . ba6f125 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableWriterTest . java <nl> @ @ - 0 , 0 + 1 , 56 @ @ <nl> + package org . apache . cassandra . io . sstable ; <nl> + / * <nl> + * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * <nl> + * / <nl> + <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . concurrent . ExecutionException ; <nl> + <nl> + import org . apache . cassandra . SchemaLoader ; <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . db . RowMutation ; <nl> + import org . apache . cassandra . db . Table ; <nl> + import org . apache . cassandra . db . filter . QueryPath ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . junit . Test ; <nl> + <nl> + public class SSTableWriterTest extends SchemaLoader <nl> + { <nl> + @ Test <nl> + public void testRowDeleteTimestampRecordedCorrectly ( ) throws IOException , ExecutionException , InterruptedException <nl> + { <nl> + Table table = Table . open ( " Keyspace1 " ) ; <nl> + ColumnFamilyStore store = table . getColumnFamilyStore ( " Standard2 " ) ; <nl> + ByteBuffer key = ByteBufferUtil . bytes ( String . valueOf ( " key1 " ) ) ; <nl> + <nl> + RowMutation rm = new RowMutation ( " Keyspace1 " , key ) ; <nl> + rm . delete ( new QueryPath ( " Standard2 " ) , 0 ) ; <nl> + rm . apply ( ) ; <nl> + <nl> + store . forceBlockingFlush ( ) ; <nl> + <nl> + SSTableReader sstable = store . getSSTables ( ) . iterator ( ) . next ( ) ; <nl> + assertEquals ( 0 , sstable . getMaxTimestamp ( ) ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 5210e0d . . 378e812 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 0 - final 
 + * Filter cached results correctly ( CASSANDRA - 7636 ) 
 * Fix tracing on the new SEPExecutor ( CASSANDRA - 7644 ) 
 * Remove shuffle and taketoken ( CASSANDRA - 7601 ) 
 * Clean up Windows batch scripts ( CASSANDRA - 7619 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index fb66c34 . . 8e7bdeb 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1522 , 7 + 1522 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 metric . rowCacheHit . inc ( ) ; 
 Tracing . trace ( " Row cache hit " ) ; 
 - return cachedCf ; 
 + return filterColumnFamily ( cachedCf , filter ) ; 
 } 
 
 metric . rowCacheHitOutOfRange . inc ( ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / RowCacheCQLTest . java b / test / unit / org / apache / cassandra / db / RowCacheCQLTest . java 
 new file mode 100644 
 index 0000000 . . 3dc5ce3 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / db / RowCacheCQLTest . java 
 @ @ - 0 , 0 + 1 , 40 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . db ; 
 + 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . cql3 . CQLTester ; 
 + import org . apache . cassandra . cql3 . UntypedResultSet ; 
 + import org . apache . cassandra . service . CacheService ; 
 + import static org . junit . Assert . assertEquals ; 
 + 
 + public class RowCacheCQLTest extends CQLTester 
 + { 
 + @ Test 
 + public void test7636 ( ) throws Throwable 
 + { 
 + CacheService . instance . setRowCacheCapacityInMB ( 1 ) ; 
 + createTable ( " CREATE TABLE % s ( p1 bigint , c1 int , PRIMARY KEY ( p1 , c1 ) ) WITH caching = ' { \ " keys \ " : \ " NONE \ " , \ " rows _ per _ partition \ " : \ " ALL \ " } ' " ) ; 
 + execute ( " INSERT INTO % s ( p1 , c1 ) VALUES ( 123 , 10 ) " ) ; 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE p1 = 123 and c1 > 1000 " ) ) ; 
 + UntypedResultSet res = execute ( " SELECT * FROM % s WHERE p1 = 123 and c1 > 0 " ) ; 
 + assertEquals ( 1 , res . size ( ) ) ; 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE p1 = 123 and c1 > 1000 " ) ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index c37dd93 . . 49719f4 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 24 , 6 + 24 , 7 @ @ 
 * Avoids having replicate on write tasks stacking up at CL . ONE ( CASSANDRA - 2889 ) 
 Merged from 1 . 0 : 
 * Fix super columns bug where cache is not updated ( CASSANDRA - 4190 ) 
 + * fix maxTimestamp to include row tombstones ( CASSANDRA - 4116 ) 
 
 
 1 . 1 . 0 - final 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 7b01766 . . 298dfa54 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 270 , 7 + 270 , 7 @ @ public class ColumnFamily extends AbstractColumnContainer implements IRowCacheEn 
 
 public long maxTimestamp ( ) 
 { 
 - long maxTimestamp = Long . MIN _ VALUE ; 
 + long maxTimestamp = getMarkedForDeleteAt ( ) ; 
 for ( IColumn column : columns ) 
 maxTimestamp = Math . max ( maxTimestamp , column . maxTimestamp ( ) ) ; 
 return maxTimestamp ; 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableWriterTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableWriterTest . java 
 new file mode 100644 
 index 0000000 . . ba6f125 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableWriterTest . java 
 @ @ - 0 , 0 + 1 , 56 @ @ 
 + package org . apache . cassandra . io . sstable ; 
 + / * 
 + * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * 
 + * / 
 + 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + 
 + import java . io . IOException ; 
 + import java . nio . ByteBuffer ; 
 + import java . util . concurrent . ExecutionException ; 
 + 
 + import org . apache . cassandra . SchemaLoader ; 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . db . RowMutation ; 
 + import org . apache . cassandra . db . Table ; 
 + import org . apache . cassandra . db . filter . QueryPath ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . junit . Test ; 
 + 
 + public class SSTableWriterTest extends SchemaLoader 
 + { 
 + @ Test 
 + public void testRowDeleteTimestampRecordedCorrectly ( ) throws IOException , ExecutionException , InterruptedException 
 + { 
 + Table table = Table . open ( " Keyspace1 " ) ; 
 + ColumnFamilyStore store = table . getColumnFamilyStore ( " Standard2 " ) ; 
 + ByteBuffer key = ByteBufferUtil . bytes ( String . valueOf ( " key1 " ) ) ; 
 + 
 + RowMutation rm = new RowMutation ( " Keyspace1 " , key ) ; 
 + rm . delete ( new QueryPath ( " Standard2 " ) , 0 ) ; 
 + rm . apply ( ) ; 
 + 
 + store . forceBlockingFlush ( ) ; 
 + 
 + SSTableReader sstable = store . getSSTables ( ) . iterator ( ) . next ( ) ; 
 + assertEquals ( 0 , sstable . getMaxTimestamp ( ) ) ; 
 + } 
 + }
