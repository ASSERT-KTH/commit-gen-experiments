BLEU SCORE: 1.0576115036277873E-4

TEST MSG: add missed test
GENERATED MSG: Embedded cassandra service to facilitate testing apps that depend on cassandra . Patch by Ran Tavory , reviewed by Gary Dusbabek . CASSANDRA - 740 .

TEST DIFF (one line): diff - - git a / test / pig / org / apache / cassandra / pig / CqlRecordReaderTest . java b / test / pig / org / apache / cassandra / pig / CqlRecordReaderTest . java <nl> new file mode 100644 <nl> index 0000000 . . fdb5107 <nl> - - - / dev / null <nl> + + + b / test / pig / org / apache / cassandra / pig / CqlRecordReaderTest . java <nl> @ @ - 0 , 0 + 1 , 132 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . pig ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . nio . charset . CharacterCodingException ; <nl> + import java . util . Iterator ; <nl> + <nl> + import org . junit . Assert ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Ignore ; <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . db . marshal . TimeUUIDType ; <nl> + import org . apache . cassandra . db . marshal . UUIDType ; <nl> + import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . thrift . AuthenticationException ; <nl> + import org . apache . cassandra . thrift . AuthorizationException ; <nl> + import org . apache . cassandra . thrift . InvalidRequestException ; <nl> + import org . apache . cassandra . thrift . NotFoundException ; <nl> + import org . apache . cassandra . thrift . TimedOutException ; <nl> + import org . apache . cassandra . thrift . UnavailableException ; <nl> + import org . apache . cassandra . utils . Hex ; <nl> + import org . apache . pig . data . DataByteArray ; <nl> + import org . apache . pig . data . Tuple ; <nl> + import org . apache . thrift . TException ; <nl> + import org . apache . thrift . transport . TTransportException ; <nl> + <nl> + public class CqlRecordReaderTest extends PigTestBase <nl> + { <nl> + private static String [ ] statements = { <nl> + " CREATE KEYSPACE cql3ks WITH replication = { ' class ' : ' SimpleStrategy ' , ' replication _ factor ' : 1 } " , <nl> + " USE cql3ks ; " , <nl> + <nl> + " CREATE TABLE cqltable ( " + <nl> + " pk1 int , " + <nl> + " pk2 int , " + <nl> + " pk3 int , " + <nl> + " ck1 int , " + <nl> + " ck2 int , " + <nl> + " data text , " + <nl> + " primary key ( ( pk1 , pk2 , pk3 ) , ck1 , ck2 ) ) ; " , <nl> + " INSERT INTO cqltable ( pk1 , pk2 , pk3 , ck1 , ck2 , data ) VALUES ( 11 , 12 , 13 , 14 , 15 , ' value1 ' ) ; " , <nl> + } ; <nl> + <nl> + @ BeforeClass <nl> + public static void setup ( ) throws TTransportException , IOException , InterruptedException , ConfigurationException , <nl> + AuthenticationException , AuthorizationException , InvalidRequestException , UnavailableException , TimedOutException , TException , NotFoundException , CharacterCodingException , ClassNotFoundException , NoSuchFieldException , IllegalAccessException , InstantiationException <nl> + { <nl> + startCassandra ( ) ; <nl> + setupDataByCql ( statements ) ; <nl> + startHadoopCluster ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void defaultCqlQueryTest ( ) throws Exception <nl> + { <nl> + String initialQuery = " rows = LOAD ' cql : / / cql3ks / cqltable ? " + defaultParameters + nativeParameters + " ' USING CqlNativeStorage ( ) ; " ; <nl> + pig . registerQuery ( initialQuery ) ; <nl> + Iterator < Tuple > it = pig . openIterator ( " rows " ) ; <nl> + if ( it . hasNext ( ) ) { <nl> + Tuple t = it . next ( ) ; <nl> + Assert . assertEquals ( t . get ( 0 ) , 11 ) ; <nl> + Assert . assertEquals ( t . get ( 1 ) , 12 ) ; <nl> + Assert . assertEquals ( t . get ( 2 ) , 13 ) ; <nl> + Assert . assertEquals ( t . get ( 3 ) , 14 ) ; <nl> + Assert . assertEquals ( t . get ( 4 ) , 15 ) ; <nl> + Assert . assertEquals ( t . get ( 5 ) , " value1 " ) ; <nl> + } <nl> + else <nl> + { <nl> + Assert . fail ( " Failed to get data for query " + initialQuery ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void selectColumnsTest ( ) throws Exception <nl> + { <nl> + String initialQuery = " rows = LOAD ' cql : / / cql3ks / cqltable ? " + defaultParameters + nativeParameters + " & columns = ck1 % 2Cck2 % 2Cdata ' USING CqlNativeStorage ( ) ; " ; <nl> + pig . registerQuery ( initialQuery ) ; <nl> + Iterator < Tuple > it = pig . openIterator ( " rows " ) ; <nl> + if ( it . hasNext ( ) ) { <nl> + Tuple t = it . next ( ) ; <nl> + Assert . assertEquals ( t . get ( 0 ) , 11 ) ; <nl> + Assert . assertEquals ( t . get ( 1 ) , 12 ) ; <nl> + Assert . assertEquals ( t . get ( 2 ) , 13 ) ; <nl> + Assert . assertEquals ( t . get ( 3 ) , 14 ) ; <nl> + Assert . assertEquals ( t . get ( 4 ) , 15 ) ; <nl> + Assert . assertEquals ( t . get ( 5 ) , " value1 " ) ; <nl> + } <nl> + else <nl> + { <nl> + Assert . fail ( " Failed to get data for query " + initialQuery ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void whereClauseTest ( ) throws Exception <nl> + { <nl> + String initialQuery = " rows = LOAD ' cql : / / cql3ks / cqltable ? " + defaultParameters + nativeParameters + " & where _ clause = ck1 % 3d14 ' USING CqlNativeStorage ( ) ; " ; <nl> + pig . registerQuery ( initialQuery ) ; <nl> + Iterator < Tuple > it = pig . openIterator ( " rows " ) ; <nl> + if ( it . hasNext ( ) ) { <nl> + Tuple t = it . next ( ) ; <nl> + Assert . assertEquals ( t . get ( 0 ) , 11 ) ; <nl> + Assert . assertEquals ( t . get ( 1 ) , 12 ) ; <nl> + Assert . assertEquals ( t . get ( 2 ) , 13 ) ; <nl> + Assert . assertEquals ( t . get ( 3 ) , 14 ) ; <nl> + Assert . assertEquals ( t . get ( 4 ) , 15 ) ; <nl> + Assert . assertEquals ( t . get ( 5 ) , " value1 " ) ; <nl> + } <nl> + else <nl> + { <nl> + Assert . fail ( " Failed to get data for query " + initialQuery ) ; <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / service / EmbeddedCassandraService . java b / src / java / org / apache / cassandra / service / EmbeddedCassandraService . java <nl> new file mode 100644 <nl> index 0000000 . . 833a857 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / service / EmbeddedCassandraService . java <nl> @ @ - 0 , 0 + 1 , 60 @ @ <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . FileOutputStream ; <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + import java . io . OutputStream ; <nl> + <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> + import org . apache . cassandra . thrift . CassandraDaemon ; <nl> + import org . apache . thrift . transport . TTransportException ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + / * * <nl> + * An embedded , in - memory cassandra storage service that listens <nl> + * on the thrift interface as configured in storage - conf . xml <nl> + * This kind of service is useful when running unit tests of <nl> + * services using cassandra for example . <nl> + * <nl> + * See { @ link EmbeddedCassandraServiceTest } for usage . <nl> + * < p > <nl> + * This is the implementation of https : / / issues . apache . org / jira / browse / CASSANDRA - 740 <nl> + * < p > <nl> + * How to use : <nl> + * In the client code create a new thread and spawn it with its { @ link Thread # start ( ) } method . <nl> + * Example : <nl> + * < pre > <nl> + * / / Tell cassandra where the configuration files are . <nl> + System . setProperty ( " storage - config " , " conf " ) ; <nl> + <nl> + cassandra = new EmbeddedCassandraService ( ) ; <nl> + cassandra . init ( ) ; <nl> + <nl> + / / spawn cassandra in a new thread <nl> + Thread t = new Thread ( cassandra ) ; <nl> + t . setDaemon ( true ) ; <nl> + t . start ( ) ; <nl> + <nl> + * < / pre > <nl> + * @ author Ran Tavory ( rantav @ gmail . com ) <nl> + * <nl> + * / <nl> + public class EmbeddedCassandraService implements Runnable <nl> + { <nl> + <nl> + CassandraDaemon cassandraDaemon ; <nl> + <nl> + public void init ( ) throws TTransportException , IOException <nl> + { <nl> + cassandraDaemon = new CassandraDaemon ( ) ; <nl> + cassandraDaemon . init ( null ) ; <nl> + } <nl> + <nl> + public void run ( ) <nl> + { <nl> + cassandraDaemon . start ( ) ; <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / service / EmbeddedCassandraServiceTest . java b / test / unit / org / apache / cassandra / service / EmbeddedCassandraServiceTest . java <nl> new file mode 100644 <nl> index 0000000 . . 512f522 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / service / EmbeddedCassandraServiceTest . java <nl> @ @ - 0 , 0 + 1 , 120 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertNotNull ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . io . UnsupportedEncodingException ; <nl> + <nl> + import org . apache . cassandra . thrift . Cassandra ; <nl> + import org . apache . cassandra . thrift . ColumnOrSuperColumn ; <nl> + import org . apache . cassandra . thrift . ColumnPath ; <nl> + import org . apache . cassandra . thrift . ConsistencyLevel ; <nl> + import org . apache . cassandra . thrift . InvalidRequestException ; <nl> + import org . apache . cassandra . thrift . NotFoundException ; <nl> + import org . apache . cassandra . thrift . TimedOutException ; <nl> + import org . apache . cassandra . thrift . UnavailableException ; <nl> + import org . apache . thrift . TException ; <nl> + import org . apache . thrift . protocol . TBinaryProtocol ; <nl> + import org . apache . thrift . protocol . TProtocol ; <nl> + import org . apache . thrift . transport . TSocket ; <nl> + import org . apache . thrift . transport . TTransport ; <nl> + import org . apache . thrift . transport . TTransportException ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + / * * <nl> + * Example how to use an embedded cassandra service . <nl> + * <nl> + * Tests connect to localhost : 9160 when the embedded server is running . <nl> + * <nl> + * @ author Ran Tavory ( rantav @ gmail . com ) <nl> + * <nl> + * / <nl> + public class EmbeddedCassandraServiceTest <nl> + { <nl> + <nl> + private static EmbeddedCassandraService cassandra ; <nl> + <nl> + / * * <nl> + * Set embedded cassandra up and spawn it in a new thread . <nl> + * <nl> + * @ throws TTransportException <nl> + * @ throws IOException <nl> + * @ throws InterruptedException <nl> + * / <nl> + @ BeforeClass <nl> + public static void setup ( ) throws TTransportException , IOException , InterruptedException <nl> + { <nl> + <nl> + / / Tell cassandra where the configuration files are . <nl> + / / Use the test configuration file . <nl> + System . setProperty ( " storage - config " , " test / conf " ) ; <nl> + <nl> + cassandra = new EmbeddedCassandraService ( ) ; <nl> + cassandra . init ( ) ; <nl> + <nl> + / / spawn cassandra in a new thread <nl> + Thread t = new Thread ( cassandra ) ; <nl> + t . setDaemon ( true ) ; <nl> + t . start ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testEmbeddedCassandraService ( ) throws UnsupportedEncodingException , InvalidRequestException , <nl> + UnavailableException , TimedOutException , TException , NotFoundException <nl> + { <nl> + Cassandra . Client client = getClient ( ) ; <nl> + <nl> + String key _ user _ id = " 1 " ; <nl> + <nl> + long timestamp = System . currentTimeMillis ( ) ; <nl> + ColumnPath cp = new ColumnPath ( " Standard1 " ) ; <nl> + cp . setColumn ( " name " . getBytes ( " utf - 8 " ) ) ; <nl> + <nl> + / / insert <nl> + client . insert ( " Keyspace1 " , key _ user _ id , cp , " Ran " . getBytes ( " UTF - 8 " ) , <nl> + timestamp , ConsistencyLevel . ONE ) ; <nl> + <nl> + / / read <nl> + ColumnOrSuperColumn got = client . get ( " Keyspace1 " , key _ user _ id , cp , <nl> + ConsistencyLevel . ONE ) ; <nl> + <nl> + / / assert <nl> + assertNotNull ( " Got a null ColumnOrSuperColumn " , got ) ; <nl> + assertEquals ( " Ran " , new String ( got . getColumn ( ) . getValue ( ) , " utf - 8 " ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Gets a connection to the localhost client <nl> + * <nl> + * @ return <nl> + * @ throws TTransportException <nl> + * / <nl> + private Cassandra . Client getClient ( ) throws TTransportException <nl> + { <nl> + TTransport tr = new TSocket ( " localhost " , 9170 ) ; <nl> + TProtocol proto = new TBinaryProtocol ( tr ) ; <nl> + Cassandra . Client client = new Cassandra . Client ( proto ) ; <nl> + tr . open ( ) ; <nl> + return client ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / test / pig / org / apache / cassandra / pig / CqlRecordReaderTest . java b / test / pig / org / apache / cassandra / pig / CqlRecordReaderTest . java 
 new file mode 100644 
 index 0000000 . . fdb5107 
 - - - / dev / null 
 + + + b / test / pig / org / apache / cassandra / pig / CqlRecordReaderTest . java 
 @ @ - 0 , 0 + 1 , 132 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . pig ; 
 + 
 + import java . io . IOException ; 
 + import java . nio . charset . CharacterCodingException ; 
 + import java . util . Iterator ; 
 + 
 + import org . junit . Assert ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Ignore ; 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . db . marshal . TimeUUIDType ; 
 + import org . apache . cassandra . db . marshal . UUIDType ; 
 + import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . thrift . AuthenticationException ; 
 + import org . apache . cassandra . thrift . AuthorizationException ; 
 + import org . apache . cassandra . thrift . InvalidRequestException ; 
 + import org . apache . cassandra . thrift . NotFoundException ; 
 + import org . apache . cassandra . thrift . TimedOutException ; 
 + import org . apache . cassandra . thrift . UnavailableException ; 
 + import org . apache . cassandra . utils . Hex ; 
 + import org . apache . pig . data . DataByteArray ; 
 + import org . apache . pig . data . Tuple ; 
 + import org . apache . thrift . TException ; 
 + import org . apache . thrift . transport . TTransportException ; 
 + 
 + public class CqlRecordReaderTest extends PigTestBase 
 + { 
 + private static String [ ] statements = { 
 + " CREATE KEYSPACE cql3ks WITH replication = { ' class ' : ' SimpleStrategy ' , ' replication _ factor ' : 1 } " , 
 + " USE cql3ks ; " , 
 + 
 + " CREATE TABLE cqltable ( " + 
 + " pk1 int , " + 
 + " pk2 int , " + 
 + " pk3 int , " + 
 + " ck1 int , " + 
 + " ck2 int , " + 
 + " data text , " + 
 + " primary key ( ( pk1 , pk2 , pk3 ) , ck1 , ck2 ) ) ; " , 
 + " INSERT INTO cqltable ( pk1 , pk2 , pk3 , ck1 , ck2 , data ) VALUES ( 11 , 12 , 13 , 14 , 15 , ' value1 ' ) ; " , 
 + } ; 
 + 
 + @ BeforeClass 
 + public static void setup ( ) throws TTransportException , IOException , InterruptedException , ConfigurationException , 
 + AuthenticationException , AuthorizationException , InvalidRequestException , UnavailableException , TimedOutException , TException , NotFoundException , CharacterCodingException , ClassNotFoundException , NoSuchFieldException , IllegalAccessException , InstantiationException 
 + { 
 + startCassandra ( ) ; 
 + setupDataByCql ( statements ) ; 
 + startHadoopCluster ( ) ; 
 + } 
 + 
 + @ Test 
 + public void defaultCqlQueryTest ( ) throws Exception 
 + { 
 + String initialQuery = " rows = LOAD ' cql : / / cql3ks / cqltable ? " + defaultParameters + nativeParameters + " ' USING CqlNativeStorage ( ) ; " ; 
 + pig . registerQuery ( initialQuery ) ; 
 + Iterator < Tuple > it = pig . openIterator ( " rows " ) ; 
 + if ( it . hasNext ( ) ) { 
 + Tuple t = it . next ( ) ; 
 + Assert . assertEquals ( t . get ( 0 ) , 11 ) ; 
 + Assert . assertEquals ( t . get ( 1 ) , 12 ) ; 
 + Assert . assertEquals ( t . get ( 2 ) , 13 ) ; 
 + Assert . assertEquals ( t . get ( 3 ) , 14 ) ; 
 + Assert . assertEquals ( t . get ( 4 ) , 15 ) ; 
 + Assert . assertEquals ( t . get ( 5 ) , " value1 " ) ; 
 + } 
 + else 
 + { 
 + Assert . fail ( " Failed to get data for query " + initialQuery ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void selectColumnsTest ( ) throws Exception 
 + { 
 + String initialQuery = " rows = LOAD ' cql : / / cql3ks / cqltable ? " + defaultParameters + nativeParameters + " & columns = ck1 % 2Cck2 % 2Cdata ' USING CqlNativeStorage ( ) ; " ; 
 + pig . registerQuery ( initialQuery ) ; 
 + Iterator < Tuple > it = pig . openIterator ( " rows " ) ; 
 + if ( it . hasNext ( ) ) { 
 + Tuple t = it . next ( ) ; 
 + Assert . assertEquals ( t . get ( 0 ) , 11 ) ; 
 + Assert . assertEquals ( t . get ( 1 ) , 12 ) ; 
 + Assert . assertEquals ( t . get ( 2 ) , 13 ) ; 
 + Assert . assertEquals ( t . get ( 3 ) , 14 ) ; 
 + Assert . assertEquals ( t . get ( 4 ) , 15 ) ; 
 + Assert . assertEquals ( t . get ( 5 ) , " value1 " ) ; 
 + } 
 + else 
 + { 
 + Assert . fail ( " Failed to get data for query " + initialQuery ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void whereClauseTest ( ) throws Exception 
 + { 
 + String initialQuery = " rows = LOAD ' cql : / / cql3ks / cqltable ? " + defaultParameters + nativeParameters + " & where _ clause = ck1 % 3d14 ' USING CqlNativeStorage ( ) ; " ; 
 + pig . registerQuery ( initialQuery ) ; 
 + Iterator < Tuple > it = pig . openIterator ( " rows " ) ; 
 + if ( it . hasNext ( ) ) { 
 + Tuple t = it . next ( ) ; 
 + Assert . assertEquals ( t . get ( 0 ) , 11 ) ; 
 + Assert . assertEquals ( t . get ( 1 ) , 12 ) ; 
 + Assert . assertEquals ( t . get ( 2 ) , 13 ) ; 
 + Assert . assertEquals ( t . get ( 3 ) , 14 ) ; 
 + Assert . assertEquals ( t . get ( 4 ) , 15 ) ; 
 + Assert . assertEquals ( t . get ( 5 ) , " value1 " ) ; 
 + } 
 + else 
 + { 
 + Assert . fail ( " Failed to get data for query " + initialQuery ) ; 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / service / EmbeddedCassandraService . java b / src / java / org / apache / cassandra / service / EmbeddedCassandraService . java 
 new file mode 100644 
 index 0000000 . . 833a857 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / service / EmbeddedCassandraService . java 
 @ @ - 0 , 0 + 1 , 60 @ @ 
 + package org . apache . cassandra . service ; 
 + 
 + import java . io . File ; 
 + import java . io . FileOutputStream ; 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . io . OutputStream ; 
 + 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 + import org . apache . cassandra . thrift . CassandraDaemon ; 
 + import org . apache . thrift . transport . TTransportException ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + / * * 
 + * An embedded , in - memory cassandra storage service that listens 
 + * on the thrift interface as configured in storage - conf . xml 
 + * This kind of service is useful when running unit tests of 
 + * services using cassandra for example . 
 + * 
 + * See { @ link EmbeddedCassandraServiceTest } for usage . 
 + * < p > 
 + * This is the implementation of https : / / issues . apache . org / jira / browse / CASSANDRA - 740 
 + * < p > 
 + * How to use : 
 + * In the client code create a new thread and spawn it with its { @ link Thread # start ( ) } method . 
 + * Example : 
 + * < pre > 
 + * / / Tell cassandra where the configuration files are . 
 + System . setProperty ( " storage - config " , " conf " ) ; 
 + 
 + cassandra = new EmbeddedCassandraService ( ) ; 
 + cassandra . init ( ) ; 
 + 
 + / / spawn cassandra in a new thread 
 + Thread t = new Thread ( cassandra ) ; 
 + t . setDaemon ( true ) ; 
 + t . start ( ) ; 
 + 
 + * < / pre > 
 + * @ author Ran Tavory ( rantav @ gmail . com ) 
 + * 
 + * / 
 + public class EmbeddedCassandraService implements Runnable 
 + { 
 + 
 + CassandraDaemon cassandraDaemon ; 
 + 
 + public void init ( ) throws TTransportException , IOException 
 + { 
 + cassandraDaemon = new CassandraDaemon ( ) ; 
 + cassandraDaemon . init ( null ) ; 
 + } 
 + 
 + public void run ( ) 
 + { 
 + cassandraDaemon . start ( ) ; 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / service / EmbeddedCassandraServiceTest . java b / test / unit / org / apache / cassandra / service / EmbeddedCassandraServiceTest . java 
 new file mode 100644 
 index 0000000 . . 512f522 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / service / EmbeddedCassandraServiceTest . java 
 @ @ - 0 , 0 + 1 , 120 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + package org . apache . cassandra . service ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertNotNull ; 
 + 
 + import java . io . IOException ; 
 + import java . io . UnsupportedEncodingException ; 
 + 
 + import org . apache . cassandra . thrift . Cassandra ; 
 + import org . apache . cassandra . thrift . ColumnOrSuperColumn ; 
 + import org . apache . cassandra . thrift . ColumnPath ; 
 + import org . apache . cassandra . thrift . ConsistencyLevel ; 
 + import org . apache . cassandra . thrift . InvalidRequestException ; 
 + import org . apache . cassandra . thrift . NotFoundException ; 
 + import org . apache . cassandra . thrift . TimedOutException ; 
 + import org . apache . cassandra . thrift . UnavailableException ; 
 + import org . apache . thrift . TException ; 
 + import org . apache . thrift . protocol . TBinaryProtocol ; 
 + import org . apache . thrift . protocol . TProtocol ; 
 + import org . apache . thrift . transport . TSocket ; 
 + import org . apache . thrift . transport . TTransport ; 
 + import org . apache . thrift . transport . TTransportException ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + / * * 
 + * Example how to use an embedded cassandra service . 
 + * 
 + * Tests connect to localhost : 9160 when the embedded server is running . 
 + * 
 + * @ author Ran Tavory ( rantav @ gmail . com ) 
 + * 
 + * / 
 + public class EmbeddedCassandraServiceTest 
 + { 
 + 
 + private static EmbeddedCassandraService cassandra ; 
 + 
 + / * * 
 + * Set embedded cassandra up and spawn it in a new thread . 
 + * 
 + * @ throws TTransportException 
 + * @ throws IOException 
 + * @ throws InterruptedException 
 + * / 
 + @ BeforeClass 
 + public static void setup ( ) throws TTransportException , IOException , InterruptedException 
 + { 
 + 
 + / / Tell cassandra where the configuration files are . 
 + / / Use the test configuration file . 
 + System . setProperty ( " storage - config " , " test / conf " ) ; 
 + 
 + cassandra = new EmbeddedCassandraService ( ) ; 
 + cassandra . init ( ) ; 
 + 
 + / / spawn cassandra in a new thread 
 + Thread t = new Thread ( cassandra ) ; 
 + t . setDaemon ( true ) ; 
 + t . start ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testEmbeddedCassandraService ( ) throws UnsupportedEncodingException , InvalidRequestException , 
 + UnavailableException , TimedOutException , TException , NotFoundException 
 + { 
 + Cassandra . Client client = getClient ( ) ; 
 + 
 + String key _ user _ id = " 1 " ; 
 + 
 + long timestamp = System . currentTimeMillis ( ) ; 
 + ColumnPath cp = new ColumnPath ( " Standard1 " ) ; 
 + cp . setColumn ( " name " . getBytes ( " utf - 8 " ) ) ; 
 + 
 + / / insert 
 + client . insert ( " Keyspace1 " , key _ user _ id , cp , " Ran " . getBytes ( " UTF - 8 " ) , 
 + timestamp , ConsistencyLevel . ONE ) ; 
 + 
 + / / read 
 + ColumnOrSuperColumn got = client . get ( " Keyspace1 " , key _ user _ id , cp , 
 + ConsistencyLevel . ONE ) ; 
 + 
 + / / assert 
 + assertNotNull ( " Got a null ColumnOrSuperColumn " , got ) ; 
 + assertEquals ( " Ran " , new String ( got . getColumn ( ) . getValue ( ) , " utf - 8 " ) ) ; 
 + } 
 + 
 + / * * 
 + * Gets a connection to the localhost client 
 + * 
 + * @ return 
 + * @ throws TTransportException 
 + * / 
 + private Cassandra . Client getClient ( ) throws TTransportException 
 + { 
 + TTransport tr = new TSocket ( " localhost " , 9170 ) ; 
 + TProtocol proto = new TBinaryProtocol ( tr ) ; 
 + Cassandra . Client client = new Cassandra . Client ( proto ) ; 
 + tr . open ( ) ; 
 + return client ; 
 + } 
 + }
