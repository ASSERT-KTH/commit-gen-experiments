BLEU SCORE: 0.039297526283216276

TEST MSG: fix commitlog getPendingTasks to not increment
GENERATED MSG: fix truncate not to leave behind non - CFS backed secondary indexes

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 70641fd . . ec5e233 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> 2 . 1 . 4 <nl> - * Fix parallelism adjustment in range and secondary index <nl> - queries when the first fetch does not satisfy the <nl> - limit ( CASSANDRA - 8856 ) <nl> + * Fix commitlog getPendingTasks to not increment ( CASSANDRA - 8856 ) <nl> + * Fix parallelism adjustment in range and secondary index queries <nl> + when the first fetch does not satisfy the limit ( CASSANDRA - 8856 ) <nl> * Check if the filtered sstables is non - empty in STCS ( CASSANDRA - 8843 ) <nl> * Upgrade java - driver used for cassandra - stress ( CASSANDRA - 8842 ) <nl> * Fix CommitLog . forceRecycleAllSegments ( ) memory access error ( CASSANDRA - 8812 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java <nl> index 59bf691 . . 517ebe3 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java <nl> @ @ - 182 , 6 + 182 , 6 @ @ public abstract class AbstractCommitLogService <nl> <nl> public long getPendingTasks ( ) <nl> { <nl> - return pending . incrementAndGet ( ) ; <nl> + return pending . get ( ) ; <nl> } <nl> } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 48a8074 . . 9ade510 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 79 , 6 + 79 , 8 @ @ <nl> * synchronize BiMap of bootstrapping tokens ( CASSANDRA - 3417 ) <nl> * show index options in CLI ( CASSANDRA - 3809 ) <nl> * add optional socket timeout for streaming ( CASSANDRA - 3838 ) <nl> + * fix truncate not to leave behind non - CFS backed secondary indexes <nl> + ( CASSANDRA - 3844 ) <nl> Merged from 0 . 8 : <nl> * ( Pig ) fix CassandraStorage to use correct comparator in Super ColumnFamily <nl> case ( CASSANDRA - 3251 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index c5073aa . . afe695a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1856 , 4 + 1856 , 24 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> | | metadata . getCaching ( ) = = CFMetaData . Caching . KEYS _ ONLY <nl> | | CacheService . instance . rowCache . getCapacity ( ) = = 0 ) ; <nl> } <nl> + <nl> + / * * <nl> + * Discard all SSTables that were created before given timestamp . Caller is responsible to obtain compactionLock . <nl> + * <nl> + * @ param truncatedAt The timestamp of the truncation <nl> + * ( all SSTables before that timestamp are going be marked as compacted ) <nl> + * / <nl> + public void discardSSTables ( long truncatedAt ) <nl> + { <nl> + List < SSTableReader > truncatedSSTables = new ArrayList < SSTableReader > ( ) ; <nl> + <nl> + for ( SSTableReader sstable : getSSTables ( ) ) <nl> + { <nl> + if ( ! sstable . newSince ( truncatedAt ) ) <nl> + truncatedSSTables . add ( sstable ) ; <nl> + } <nl> + <nl> + if ( ! truncatedSSTables . isEmpty ( ) ) <nl> + markCompacted ( truncatedSSTables ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index c109b18 . . c02aed2 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 38 , 6 + 38 , 7 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . compaction . CompactionInfo . Holder ; <nl> + import org . apache . cassandra . db . index . SecondaryIndex ; <nl> import org . apache . cassandra . db . index . SecondaryIndexBuilder ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . dht . Token ; <nl> @ @ - 919 , 19 + 920 , 13 @ @ public class CompactionManager implements CompactionManagerMBean <nl> public void runMayThrow ( ) throws InterruptedException , IOException <nl> { <nl> compactionLock . writeLock ( ) . lock ( ) ; <nl> + <nl> try <nl> { <nl> - for ( ColumnFamilyStore cfs : main . concatWithIndexes ( ) ) <nl> - { <nl> - List < SSTableReader > truncatedSSTables = new ArrayList < SSTableReader > ( ) ; <nl> - for ( SSTableReader sstable : cfs . getSSTables ( ) ) <nl> - { <nl> - if ( ! sstable . newSince ( truncatedAt ) ) <nl> - truncatedSSTables . add ( sstable ) ; <nl> - } <nl> - if ( ! truncatedSSTables . isEmpty ( ) ) <nl> - cfs . markCompacted ( truncatedSSTables ) ; <nl> - } <nl> + main . discardSSTables ( truncatedAt ) ; <nl> + <nl> + for ( SecondaryIndex index : main . indexManager . getIndexes ( ) ) <nl> + index . truncate ( truncatedAt ) ; <nl> } <nl> finally <nl> { <nl> @ @ - 1183 , 4 + 1178 , 4 @ @ public class CompactionManager implements CompactionManagerMBean <nl> holder . stop ( ) ; <nl> } <nl> } <nl> - } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java <nl> index 79feb96 . . 5f7d7c6 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java <nl> @ @ - 132 , 7 + 132 , 13 @ @ public abstract class SecondaryIndex <nl> * Remove the index and unregisters this index ' s mbean if one exists <nl> * / <nl> public abstract void invalidate ( ) ; <nl> - <nl> + <nl> + / * * <nl> + * Truncate all the data from the current index <nl> + * <nl> + * @ param truncatedAt The truncation timestamp , all data before that timestamp should be rejected . <nl> + * / <nl> + public abstract void truncate ( long truncatedAt ) ; <nl> <nl> / * * <nl> * Builds the index using the data in the underlying CFS <nl> diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> index 12f9d4c . . 610bd2a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> @ @ - 346 , 7 + 346 , 21 @ @ public class SecondaryIndexManager <nl> <nl> return indexList . keySet ( ) ; <nl> } <nl> - <nl> + <nl> + / * * <nl> + * @ return all of the secondary indexes without distinction to the ( non - ) backed by secondary ColumnFamilyStore . <nl> + * / <nl> + public Collection < SecondaryIndex > getIndexes ( ) <nl> + { <nl> + / / we use identity map because per row indexes use same instance across many columns <nl> + IdentityHashMap < SecondaryIndex , Object > indexList = new IdentityHashMap < SecondaryIndex , Object > ( ) ; <nl> + <nl> + for ( Map . Entry < ByteBuffer , SecondaryIndex > entry : indexesByColumn . entrySet ( ) ) <nl> + indexList . put ( entry . getValue ( ) , null ) ; <nl> + <nl> + return indexList . keySet ( ) ; <nl> + } <nl> + <nl> / * * <nl> * @ return total current ram size of all indexes <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java <nl> index 4e24ea4 . . 7b22a48 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java <nl> @ @ - 133 , 6 + 133 , 11 @ @ public class KeysIndex extends PerColumnSecondaryIndex <nl> indexCfs . invalidate ( ) ; <nl> } <nl> <nl> + public void truncate ( long truncatedAt ) <nl> + { <nl> + indexCfs . discardSSTables ( truncatedAt ) ; <nl> + } <nl> + <nl> public ColumnFamilyStore getIndexCfs ( ) <nl> { <nl> return indexCfs ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 70641fd . . ec5e233 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 2 . 1 . 4 
 - * Fix parallelism adjustment in range and secondary index 
 - queries when the first fetch does not satisfy the 
 - limit ( CASSANDRA - 8856 ) 
 + * Fix commitlog getPendingTasks to not increment ( CASSANDRA - 8856 ) 
 + * Fix parallelism adjustment in range and secondary index queries 
 + when the first fetch does not satisfy the limit ( CASSANDRA - 8856 ) 
 * Check if the filtered sstables is non - empty in STCS ( CASSANDRA - 8843 ) 
 * Upgrade java - driver used for cassandra - stress ( CASSANDRA - 8842 ) 
 * Fix CommitLog . forceRecycleAllSegments ( ) memory access error ( CASSANDRA - 8812 ) 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java 
 index 59bf691 . . 517ebe3 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java 
 @ @ - 182 , 6 + 182 , 6 @ @ public abstract class AbstractCommitLogService 
 
 public long getPendingTasks ( ) 
 { 
 - return pending . incrementAndGet ( ) ; 
 + return pending . get ( ) ; 
 } 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 48a8074 . . 9ade510 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 79 , 6 + 79 , 8 @ @ 
 * synchronize BiMap of bootstrapping tokens ( CASSANDRA - 3417 ) 
 * show index options in CLI ( CASSANDRA - 3809 ) 
 * add optional socket timeout for streaming ( CASSANDRA - 3838 ) 
 + * fix truncate not to leave behind non - CFS backed secondary indexes 
 + ( CASSANDRA - 3844 ) 
 Merged from 0 . 8 : 
 * ( Pig ) fix CassandraStorage to use correct comparator in Super ColumnFamily 
 case ( CASSANDRA - 3251 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index c5073aa . . afe695a 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1856 , 4 + 1856 , 24 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 | | metadata . getCaching ( ) = = CFMetaData . Caching . KEYS _ ONLY 
 | | CacheService . instance . rowCache . getCapacity ( ) = = 0 ) ; 
 } 
 + 
 + / * * 
 + * Discard all SSTables that were created before given timestamp . Caller is responsible to obtain compactionLock . 
 + * 
 + * @ param truncatedAt The timestamp of the truncation 
 + * ( all SSTables before that timestamp are going be marked as compacted ) 
 + * / 
 + public void discardSSTables ( long truncatedAt ) 
 + { 
 + List < SSTableReader > truncatedSSTables = new ArrayList < SSTableReader > ( ) ; 
 + 
 + for ( SSTableReader sstable : getSSTables ( ) ) 
 + { 
 + if ( ! sstable . newSince ( truncatedAt ) ) 
 + truncatedSSTables . add ( sstable ) ; 
 + } 
 + 
 + if ( ! truncatedSSTables . isEmpty ( ) ) 
 + markCompacted ( truncatedSSTables ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index c109b18 . . c02aed2 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 38 , 6 + 38 , 7 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . compaction . CompactionInfo . Holder ; 
 + import org . apache . cassandra . db . index . SecondaryIndex ; 
 import org . apache . cassandra . db . index . SecondaryIndexBuilder ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . dht . Token ; 
 @ @ - 919 , 19 + 920 , 13 @ @ public class CompactionManager implements CompactionManagerMBean 
 public void runMayThrow ( ) throws InterruptedException , IOException 
 { 
 compactionLock . writeLock ( ) . lock ( ) ; 
 + 
 try 
 { 
 - for ( ColumnFamilyStore cfs : main . concatWithIndexes ( ) ) 
 - { 
 - List < SSTableReader > truncatedSSTables = new ArrayList < SSTableReader > ( ) ; 
 - for ( SSTableReader sstable : cfs . getSSTables ( ) ) 
 - { 
 - if ( ! sstable . newSince ( truncatedAt ) ) 
 - truncatedSSTables . add ( sstable ) ; 
 - } 
 - if ( ! truncatedSSTables . isEmpty ( ) ) 
 - cfs . markCompacted ( truncatedSSTables ) ; 
 - } 
 + main . discardSSTables ( truncatedAt ) ; 
 + 
 + for ( SecondaryIndex index : main . indexManager . getIndexes ( ) ) 
 + index . truncate ( truncatedAt ) ; 
 } 
 finally 
 { 
 @ @ - 1183 , 4 + 1178 , 4 @ @ public class CompactionManager implements CompactionManagerMBean 
 holder . stop ( ) ; 
 } 
 } 
 - } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java 
 index 79feb96 . . 5f7d7c6 100644 
 - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java 
 @ @ - 132 , 7 + 132 , 13 @ @ public abstract class SecondaryIndex 
 * Remove the index and unregisters this index ' s mbean if one exists 
 * / 
 public abstract void invalidate ( ) ; 
 - 
 + 
 + / * * 
 + * Truncate all the data from the current index 
 + * 
 + * @ param truncatedAt The truncation timestamp , all data before that timestamp should be rejected . 
 + * / 
 + public abstract void truncate ( long truncatedAt ) ; 
 
 / * * 
 * Builds the index using the data in the underlying CFS 
 diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 index 12f9d4c . . 610bd2a 100644 
 - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 @ @ - 346 , 7 + 346 , 21 @ @ public class SecondaryIndexManager 
 
 return indexList . keySet ( ) ; 
 } 
 - 
 + 
 + / * * 
 + * @ return all of the secondary indexes without distinction to the ( non - ) backed by secondary ColumnFamilyStore . 
 + * / 
 + public Collection < SecondaryIndex > getIndexes ( ) 
 + { 
 + / / we use identity map because per row indexes use same instance across many columns 
 + IdentityHashMap < SecondaryIndex , Object > indexList = new IdentityHashMap < SecondaryIndex , Object > ( ) ; 
 + 
 + for ( Map . Entry < ByteBuffer , SecondaryIndex > entry : indexesByColumn . entrySet ( ) ) 
 + indexList . put ( entry . getValue ( ) , null ) ; 
 + 
 + return indexList . keySet ( ) ; 
 + } 
 + 
 / * * 
 * @ return total current ram size of all indexes 
 * / 
 diff - - git a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java 
 index 4e24ea4 . . 7b22a48 100644 
 - - - a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java 
 @ @ - 133 , 6 + 133 , 11 @ @ public class KeysIndex extends PerColumnSecondaryIndex 
 indexCfs . invalidate ( ) ; 
 } 
 
 + public void truncate ( long truncatedAt ) 
 + { 
 + indexCfs . discardSSTables ( truncatedAt ) ; 
 + } 
 + 
 public ColumnFamilyStore getIndexCfs ( ) 
 { 
 return indexCfs ;
