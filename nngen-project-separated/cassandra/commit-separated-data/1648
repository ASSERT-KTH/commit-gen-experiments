BLEU SCORE: 0.015445276590783498

TEST MSG: Aggregate UDFs allow SFUNC return type to differ from STYPE if FFUNC specified
GENERATED MSG: Properly reject unknown UDT fields

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 0dbc281 . . bf98e7e 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 <nl> + * Aggregate UDFs allow SFUNC return type to differ from STYPE if FFUNC specified ( CASSANDRA - 9321 ) <nl> * Failure detector detects and ignores local pauses ( CASSANDRA - 9183 ) <nl> * Remove Thrift dependencies in bundled tools ( CASSANDRA - 8358 ) <nl> * Disable memory mapping of hsperfdata file for JVM statistics ( CASSANDRA - 9242 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java b / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java <nl> index 7eed4f0 . . e4cbd55 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java <nl> @ @ - 100 , 6 + 100 , 8 @ @ public class UDAggregate extends AbstractFunction implements AggregateFunction <nl> <nl> public Iterable < Function > getFunctions ( ) <nl> { <nl> + if ( stateFunction = = null ) <nl> + return Collections . emptySet ( ) ; <nl> if ( finalFunction ! = null ) <nl> return ImmutableSet . of ( this , stateFunction , finalFunction ) ; <nl> else <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java <nl> index 021077e . . 74cc521 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java <nl> @ @ - 36 , 7 + 36 , 7 @ @ import org . apache . cassandra . thrift . ThriftValidation ; <nl> import org . apache . cassandra . transport . Event ; <nl> <nl> / * * <nl> - * A < code > CREATE AGGREGATE < / code > statement parsed from a CQL query . <nl> + * A { @ code CREATE AGGREGATE } statement parsed from a CQL query . <nl> * / <nl> public final class CreateAggregateStatement extends SchemaAlteringStatement <nl> { <nl> @ @ - 91 , 20 + 91 , 22 @ @ public final class CreateAggregateStatement extends SchemaAlteringStatement <nl> throw new InvalidRequestException ( " State function " + stateFuncSig ( stateFuncName , stateTypeRaw , argRawTypes ) + " does not exist or is not a scalar function " ) ; <nl> stateFunction = ( ScalarFunction ) f ; <nl> <nl> + AbstractType < ? > stateReturnType = stateFunction . returnType ( ) ; <nl> + if ( ! stateReturnType . equals ( stateType ) ) <nl> + throw new InvalidRequestException ( " State function " + stateFuncSig ( stateFunction . name ( ) , stateTypeRaw , argRawTypes ) + " return type must be the same as the first argument type - check STYPE , argument and return types " ) ; <nl> + <nl> if ( finalFunc ! = null ) <nl> { <nl> FunctionName finalFuncName = new FunctionName ( functionName . keyspace , finalFunc ) ; <nl> f = Functions . find ( finalFuncName , Collections . < AbstractType < ? > > singletonList ( stateType ) ) ; <nl> if ( ! ( f instanceof ScalarFunction ) ) <nl> - throw new InvalidRequestException ( " Final function " + finalFuncName + " ( " + stateTypeRaw + " ) does not exist or is not a scalar function " ) ; <nl> + throw new InvalidRequestException ( " Final function " + finalFuncName + ' ( ' + stateTypeRaw + " ) does not exist or is not a scalar function " ) ; <nl> finalFunction = ( ScalarFunction ) f ; <nl> returnType = finalFunction . returnType ( ) ; <nl> } <nl> else <nl> { <nl> - returnType = stateFunction . returnType ( ) ; <nl> - if ( ! returnType . equals ( stateType ) ) <nl> - throw new InvalidRequestException ( " State function " + stateFuncSig ( stateFunction . name ( ) , stateTypeRaw , argRawTypes ) + " return type must be the same as the first argument type ( if no final function is used ) " ) ; <nl> + returnType = stateReturnType ; <nl> } <nl> <nl> if ( ival ! = null ) <nl> @ @ - 208 , 7 + 210 , 7 @ @ public final class CreateAggregateStatement extends SchemaAlteringStatement <nl> return true ; <nl> } <nl> <nl> - private String stateFuncSig ( FunctionName stateFuncName , CQL3Type . Raw stateTypeRaw , List < CQL3Type . Raw > argRawTypes ) <nl> + private static String stateFuncSig ( FunctionName stateFuncName , CQL3Type . Raw stateTypeRaw , List < CQL3Type . Raw > argRawTypes ) <nl> { <nl> StringBuilder sb = new StringBuilder ( ) ; <nl> sb . append ( stateFuncName . toString ( ) ) . append ( ' ( ' ) . append ( stateTypeRaw ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / AggregationTest . java <nl> index 86bd8f2 . . 7fe665d 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / AggregationTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / AggregationTest . java <nl> @ @ - 846 , 4 + 846 , 32 @ @ public class AggregationTest extends CQLTester <nl> " SELECT " + a + " ( val ) FROM % s " ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testWrongStateType ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( key int primary key , val int ) " ) ; <nl> + execute ( " INSERT INTO % s ( key , val ) VALUES ( ? , ? ) " , 1 , 1 ) ; <nl> + <nl> + String fState = createFunction ( KEYSPACE , <nl> + " int , int " , <nl> + " CREATE FUNCTION % s ( a int , b int ) " + <nl> + " RETURNS double " + <nl> + " LANGUAGE java " + <nl> + " AS ' return Double . valueOf ( 1 . 0 ) ; ' " ) ; <nl> + <nl> + String fFinal = createFunction ( KEYSPACE , <nl> + " int " , <nl> + " CREATE FUNCTION % s ( a int ) " + <nl> + " RETURNS int " + <nl> + " LANGUAGE java " + <nl> + " AS ' return Integer . valueOf ( 1 ) ; ' ; " ) ; <nl> + <nl> + assertInvalidMessage ( " return type must be the same as the first argument type - check STYPE , argument and return types " , <nl> + " CREATE AGGREGATE % s ( int ) " + <nl> + " SFUNC " + shortFunctionName ( fState ) + ' ' + <nl> + " STYPE int " + <nl> + " FINALFUNC " + shortFunctionName ( fFinal ) + ' ' + <nl> + " INITCOND 1 " ) ; <nl> + } <nl> + <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0dbc281 . . bf98e7e 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 
 + * Aggregate UDFs allow SFUNC return type to differ from STYPE if FFUNC specified ( CASSANDRA - 9321 ) 
 * Failure detector detects and ignores local pauses ( CASSANDRA - 9183 ) 
 * Remove Thrift dependencies in bundled tools ( CASSANDRA - 8358 ) 
 * Disable memory mapping of hsperfdata file for JVM statistics ( CASSANDRA - 9242 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java b / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java 
 index 7eed4f0 . . e4cbd55 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java 
 @ @ - 100 , 6 + 100 , 8 @ @ public class UDAggregate extends AbstractFunction implements AggregateFunction 
 
 public Iterable < Function > getFunctions ( ) 
 { 
 + if ( stateFunction = = null ) 
 + return Collections . emptySet ( ) ; 
 if ( finalFunction ! = null ) 
 return ImmutableSet . of ( this , stateFunction , finalFunction ) ; 
 else 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java 
 index 021077e . . 74cc521 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateAggregateStatement . java 
 @ @ - 36 , 7 + 36 , 7 @ @ import org . apache . cassandra . thrift . ThriftValidation ; 
 import org . apache . cassandra . transport . Event ; 
 
 / * * 
 - * A < code > CREATE AGGREGATE < / code > statement parsed from a CQL query . 
 + * A { @ code CREATE AGGREGATE } statement parsed from a CQL query . 
 * / 
 public final class CreateAggregateStatement extends SchemaAlteringStatement 
 { 
 @ @ - 91 , 20 + 91 , 22 @ @ public final class CreateAggregateStatement extends SchemaAlteringStatement 
 throw new InvalidRequestException ( " State function " + stateFuncSig ( stateFuncName , stateTypeRaw , argRawTypes ) + " does not exist or is not a scalar function " ) ; 
 stateFunction = ( ScalarFunction ) f ; 
 
 + AbstractType < ? > stateReturnType = stateFunction . returnType ( ) ; 
 + if ( ! stateReturnType . equals ( stateType ) ) 
 + throw new InvalidRequestException ( " State function " + stateFuncSig ( stateFunction . name ( ) , stateTypeRaw , argRawTypes ) + " return type must be the same as the first argument type - check STYPE , argument and return types " ) ; 
 + 
 if ( finalFunc ! = null ) 
 { 
 FunctionName finalFuncName = new FunctionName ( functionName . keyspace , finalFunc ) ; 
 f = Functions . find ( finalFuncName , Collections . < AbstractType < ? > > singletonList ( stateType ) ) ; 
 if ( ! ( f instanceof ScalarFunction ) ) 
 - throw new InvalidRequestException ( " Final function " + finalFuncName + " ( " + stateTypeRaw + " ) does not exist or is not a scalar function " ) ; 
 + throw new InvalidRequestException ( " Final function " + finalFuncName + ' ( ' + stateTypeRaw + " ) does not exist or is not a scalar function " ) ; 
 finalFunction = ( ScalarFunction ) f ; 
 returnType = finalFunction . returnType ( ) ; 
 } 
 else 
 { 
 - returnType = stateFunction . returnType ( ) ; 
 - if ( ! returnType . equals ( stateType ) ) 
 - throw new InvalidRequestException ( " State function " + stateFuncSig ( stateFunction . name ( ) , stateTypeRaw , argRawTypes ) + " return type must be the same as the first argument type ( if no final function is used ) " ) ; 
 + returnType = stateReturnType ; 
 } 
 
 if ( ival ! = null ) 
 @ @ - 208 , 7 + 210 , 7 @ @ public final class CreateAggregateStatement extends SchemaAlteringStatement 
 return true ; 
 } 
 
 - private String stateFuncSig ( FunctionName stateFuncName , CQL3Type . Raw stateTypeRaw , List < CQL3Type . Raw > argRawTypes ) 
 + private static String stateFuncSig ( FunctionName stateFuncName , CQL3Type . Raw stateTypeRaw , List < CQL3Type . Raw > argRawTypes ) 
 { 
 StringBuilder sb = new StringBuilder ( ) ; 
 sb . append ( stateFuncName . toString ( ) ) . append ( ' ( ' ) . append ( stateTypeRaw ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / AggregationTest . java 
 index 86bd8f2 . . 7fe665d 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / AggregationTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / AggregationTest . java 
 @ @ - 846 , 4 + 846 , 32 @ @ public class AggregationTest extends CQLTester 
 " SELECT " + a + " ( val ) FROM % s " ) ; 
 } 
 
 + @ Test 
 + public void testWrongStateType ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( key int primary key , val int ) " ) ; 
 + execute ( " INSERT INTO % s ( key , val ) VALUES ( ? , ? ) " , 1 , 1 ) ; 
 + 
 + String fState = createFunction ( KEYSPACE , 
 + " int , int " , 
 + " CREATE FUNCTION % s ( a int , b int ) " + 
 + " RETURNS double " + 
 + " LANGUAGE java " + 
 + " AS ' return Double . valueOf ( 1 . 0 ) ; ' " ) ; 
 + 
 + String fFinal = createFunction ( KEYSPACE , 
 + " int " , 
 + " CREATE FUNCTION % s ( a int ) " + 
 + " RETURNS int " + 
 + " LANGUAGE java " + 
 + " AS ' return Integer . valueOf ( 1 ) ; ' ; " ) ; 
 + 
 + assertInvalidMessage ( " return type must be the same as the first argument type - check STYPE , argument and return types " , 
 + " CREATE AGGREGATE % s ( int ) " + 
 + " SFUNC " + shortFunctionName ( fState ) + ' ' + 
 + " STYPE int " + 
 + " FINALFUNC " + shortFunctionName ( fFinal ) + ' ' + 
 + " INITCOND 1 " ) ; 
 + } 
 + 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
