BLEU SCORE: 0.041961149062965476

TEST MSG: Fix IllegalArgumentException if there is no text between two delimiters
GENERATED MSG: Fix SASI PREFIX search in CONTAINS mode with partial terms

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzer . java b / src / java / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzer . java <nl> index 794a8b9 . . 24acef4 100644 <nl> - - - a / src / java / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzer . java <nl> + + + b / src / java / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzer . java <nl> @ @ - 85 , 12 + 85 , 17 @ @ public class DelimiterAnalyzer extends AbstractAnalyzer <nl> <nl> CharBuffer readahead = cb . duplicate ( ) ; <nl> / / loop until we see the next delimiter character , or reach end of data <nl> - while ( readahead . hasRemaining ( ) & & readahead . get ( ) ! = delimiter ) ; <nl> + boolean readaheadRemaining ; <nl> + while ( ( readaheadRemaining = readahead . hasRemaining ( ) ) & & readahead . get ( ) ! = delimiter ) ; <nl> <nl> - char [ ] chars = new char [ readahead . position ( ) - cb . position ( ) - ( readahead . hasRemaining ( ) ? 1 : 0 ) ] ; <nl> + char [ ] chars = new char [ readahead . position ( ) - cb . position ( ) - ( readaheadRemaining ? 1 : 0 ) ] ; <nl> cb . get ( chars ) ; <nl> Preconditions . checkState ( ! cb . hasRemaining ( ) | | cb . get ( ) = = delimiter ) ; <nl> - return charset . encode ( CharBuffer . wrap ( chars ) ) ; <nl> + <nl> + return 0 < chars . length <nl> + ? charset . encode ( CharBuffer . wrap ( chars ) ) <nl> + / / blank partition keys not permitted , ref ConcurrentRadixTree . putIfAbsent ( . . ) <nl> + : computeNext ( ) ; <nl> } <nl> } ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzerTest . java b / test / unit / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzerTest . java <nl> index 15bbb84 . . 16f9f06 100644 <nl> - - - a / test / unit / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzerTest . java <nl> + + + b / test / unit / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzerTest . java <nl> @ @ - 54 , 7 + 54 , 30 @ @ public class DelimiterAnalyzerTest <nl> while ( analyzer . hasNext ( ) ) <nl> output . append ( ByteBufferUtil . string ( analyzer . next ( ) ) + ( analyzer . hasNext ( ) ? ' ' : " " ) ) ; <nl> <nl> - Assert . assertTrue ( testString . equals ( output . toString ( ) ) ) ; <nl> + Assert . assertEquals ( testString , output . toString ( ) ) ; <nl> + Assert . assertFalse ( testString . toLowerCase ( ) . equals ( output . toString ( ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testBlankEntries ( ) throws Exception <nl> + { <nl> + DelimiterAnalyzer analyzer = new DelimiterAnalyzer ( ) ; <nl> + <nl> + analyzer . init ( <nl> + new HashMap ( ) <nl> + { { <nl> + put ( DelimiterTokenizingOptions . DELIMITER , " , " ) ; <nl> + } } , <nl> + UTF8Type . instance ) ; <nl> + <nl> + String testString = " , Nip , , , , it , , , in , , the , bud , , , " ; <nl> + ByteBuffer toAnalyze = ByteBuffer . wrap ( testString . getBytes ( ) ) ; <nl> + analyzer . reset ( toAnalyze ) ; <nl> + StringBuilder output = new StringBuilder ( ) ; <nl> + while ( analyzer . hasNext ( ) ) <nl> + output . append ( ByteBufferUtil . string ( analyzer . next ( ) ) + ( analyzer . hasNext ( ) ? ' , ' : " " ) ) ; <nl> + <nl> + Assert . assertEquals ( " Nip , it , in , the , bud " , output . toString ( ) ) ; <nl> Assert . assertFalse ( testString . toLowerCase ( ) . equals ( output . toString ( ) ) ) ; <nl> } <nl>
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzer . java b / src / java / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzer . java 
 index 794a8b9 . . 24acef4 100644 
 - - - a / src / java / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzer . java 
 + + + b / src / java / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzer . java 
 @ @ - 85 , 12 + 85 , 17 @ @ public class DelimiterAnalyzer extends AbstractAnalyzer 
 
 CharBuffer readahead = cb . duplicate ( ) ; 
 / / loop until we see the next delimiter character , or reach end of data 
 - while ( readahead . hasRemaining ( ) & & readahead . get ( ) ! = delimiter ) ; 
 + boolean readaheadRemaining ; 
 + while ( ( readaheadRemaining = readahead . hasRemaining ( ) ) & & readahead . get ( ) ! = delimiter ) ; 
 
 - char [ ] chars = new char [ readahead . position ( ) - cb . position ( ) - ( readahead . hasRemaining ( ) ? 1 : 0 ) ] ; 
 + char [ ] chars = new char [ readahead . position ( ) - cb . position ( ) - ( readaheadRemaining ? 1 : 0 ) ] ; 
 cb . get ( chars ) ; 
 Preconditions . checkState ( ! cb . hasRemaining ( ) | | cb . get ( ) = = delimiter ) ; 
 - return charset . encode ( CharBuffer . wrap ( chars ) ) ; 
 + 
 + return 0 < chars . length 
 + ? charset . encode ( CharBuffer . wrap ( chars ) ) 
 + / / blank partition keys not permitted , ref ConcurrentRadixTree . putIfAbsent ( . . ) 
 + : computeNext ( ) ; 
 } 
 } ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzerTest . java b / test / unit / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzerTest . java 
 index 15bbb84 . . 16f9f06 100644 
 - - - a / test / unit / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzerTest . java 
 + + + b / test / unit / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzerTest . java 
 @ @ - 54 , 7 + 54 , 30 @ @ public class DelimiterAnalyzerTest 
 while ( analyzer . hasNext ( ) ) 
 output . append ( ByteBufferUtil . string ( analyzer . next ( ) ) + ( analyzer . hasNext ( ) ? ' ' : " " ) ) ; 
 
 - Assert . assertTrue ( testString . equals ( output . toString ( ) ) ) ; 
 + Assert . assertEquals ( testString , output . toString ( ) ) ; 
 + Assert . assertFalse ( testString . toLowerCase ( ) . equals ( output . toString ( ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testBlankEntries ( ) throws Exception 
 + { 
 + DelimiterAnalyzer analyzer = new DelimiterAnalyzer ( ) ; 
 + 
 + analyzer . init ( 
 + new HashMap ( ) 
 + { { 
 + put ( DelimiterTokenizingOptions . DELIMITER , " , " ) ; 
 + } } , 
 + UTF8Type . instance ) ; 
 + 
 + String testString = " , Nip , , , , it , , , in , , the , bud , , , " ; 
 + ByteBuffer toAnalyze = ByteBuffer . wrap ( testString . getBytes ( ) ) ; 
 + analyzer . reset ( toAnalyze ) ; 
 + StringBuilder output = new StringBuilder ( ) ; 
 + while ( analyzer . hasNext ( ) ) 
 + output . append ( ByteBufferUtil . string ( analyzer . next ( ) ) + ( analyzer . hasNext ( ) ? ' , ' : " " ) ) ; 
 + 
 + Assert . assertEquals ( " Nip , it , in , the , bud " , output . toString ( ) ) ; 
 Assert . assertFalse ( testString . toLowerCase ( ) . equals ( output . toString ( ) ) ) ; 
 } 


NEAREST DIFF:
ELIMINATEDSENTENCE
