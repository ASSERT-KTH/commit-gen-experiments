BLEU SCORE: 0.03283637368030199

TEST MSG: Minor tweaks for ' caching ' option
GENERATED MSG: Completer shall always return a collection

TEST DIFF (one line): diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py <nl> index ae03cde . . 8e9f987 100644 <nl> - - - a / pylib / cqlshlib / cql3handling . py <nl> + + + b / pylib / cqlshlib / cql3handling . py <nl> @ @ - 419 , 6 + 419 , 8 @ @ def cf _ prop _ val _ completer ( ctxt , cass ) : <nl> return [ " { ' sstable _ compression ' : ' " ] <nl> if this _ opt = = ' compaction ' : <nl> return [ " { ' class ' : ' " ] <nl> + if this _ opt = = ' caching ' : <nl> + return [ " { ' keys ' : ' " ] <nl> if any ( this _ opt = = opt [ 0 ] for opt in CqlRuleSet . obsolete _ cf _ options ) : <nl> return [ " ' < obsolete _ option > ' " ] <nl> if this _ opt in ( ' read _ repair _ chance ' , ' bloom _ filter _ fp _ chance ' , <nl> @ @ - 472 , 9 + 474 , 9 @ @ def cf _ prop _ val _ mapval _ completer ( ctxt , cass ) : <nl> return [ Hint ( ' < option _ value > ' ) ] <nl> elif opt = = ' caching ' : <nl> if key = = ' rows _ per _ partition ' : <nl> - return [ Hint ( ' ALL ' ) , Hint ( ' NONE ' ) , Hint ( ' # rows _ per _ partition ' ) ] <nl> + return [ " ' ALL ' " , " ' NONE ' " , Hint ( ' # rows _ per _ partition ' ) ] <nl> elif key = = ' keys ' : <nl> - return [ Hint ( ' ALL ' ) , Hint ( ' NONE ' ) ] <nl> + return [ " ' ALL ' " , " ' NONE ' " ] <nl> return ( ) <nl> <nl> def cf _ prop _ val _ mapender _ completer ( ctxt , cass ) :
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py 
 index ae03cde . . 8e9f987 100644 
 - - - a / pylib / cqlshlib / cql3handling . py 
 + + + b / pylib / cqlshlib / cql3handling . py 
 @ @ - 419 , 6 + 419 , 8 @ @ def cf _ prop _ val _ completer ( ctxt , cass ) : 
 return [ " { ' sstable _ compression ' : ' " ] 
 if this _ opt = = ' compaction ' : 
 return [ " { ' class ' : ' " ] 
 + if this _ opt = = ' caching ' : 
 + return [ " { ' keys ' : ' " ] 
 if any ( this _ opt = = opt [ 0 ] for opt in CqlRuleSet . obsolete _ cf _ options ) : 
 return [ " ' < obsolete _ option > ' " ] 
 if this _ opt in ( ' read _ repair _ chance ' , ' bloom _ filter _ fp _ chance ' , 
 @ @ - 472 , 9 + 474 , 9 @ @ def cf _ prop _ val _ mapval _ completer ( ctxt , cass ) : 
 return [ Hint ( ' < option _ value > ' ) ] 
 elif opt = = ' caching ' : 
 if key = = ' rows _ per _ partition ' : 
 - return [ Hint ( ' ALL ' ) , Hint ( ' NONE ' ) , Hint ( ' # rows _ per _ partition ' ) ] 
 + return [ " ' ALL ' " , " ' NONE ' " , Hint ( ' # rows _ per _ partition ' ) ] 
 elif key = = ' keys ' : 
 - return [ Hint ( ' ALL ' ) , Hint ( ' NONE ' ) ] 
 + return [ " ' ALL ' " , " ' NONE ' " ] 
 return ( ) 
 
 def cf _ prop _ val _ mapender _ completer ( ctxt , cass ) :

NEAREST DIFF:
ELIMINATEDSENTENCE
