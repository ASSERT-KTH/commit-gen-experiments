BLEU SCORE: 0.02133165846478451

TEST MSG: Gossip thread slows down when using batch commit log
GENERATED MSG: Save EC2Snitch topology information in system table - take 2

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index a0a61ac . . d8b22f0 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 15 <nl> + * Gossip thread slows down when using batch commit log ( CASSANDRA - 12966 ) <nl> * Randomize batchlog endpoint selection with only 1 or 2 racks ( CASSANDRA - 12884 ) <nl> * Fix digest calculation for counter cells ( CASSANDRA - 13750 ) <nl> * Fix ColumnDefinition . cellValueType ( ) for non - frozen collection and change SSTabledump to use type . toJSONString ( ) ( CASSANDRA - 13573 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / SystemKeyspace . java b / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> index cc21435 . . 7ce74a1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> @ @ - 23 , 11 + 23 , 13 @ @ import java . io . IOException ; <nl> import java . net . InetAddress ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> + import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . TimeUnit ; <nl> import java . util . stream . Collectors ; <nl> import java . util . stream . StreamSupport ; <nl> import javax . management . openmbean . OpenDataException ; <nl> import javax . management . openmbean . TabularData ; <nl> + import java . util . concurrent . Future ; <nl> <nl> import com . google . common . collect . HashMultimap ; <nl> import com . google . common . collect . ImmutableSet ; <nl> @ @ - 36 , 6 + 38 , 10 @ @ import com . google . common . io . ByteStreams ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import com . google . common . util . concurrent . Futures ; <nl> + <nl> + import org . apache . cassandra . concurrent . Stage ; <nl> + import org . apache . cassandra . concurrent . StageManager ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . cql3 . QueryProcessor ; <nl> @ @ - 687 , 29 + 693 , 29 @ @ public final class SystemKeyspace <nl> / * * <nl> * Record tokens being used by another node <nl> * / <nl> - public static synchronized void updateTokens ( InetAddress ep , Collection < Token > tokens ) <nl> + public static Future < ? > updateTokens ( final InetAddress ep , final Collection < Token > tokens , ExecutorService executorService ) <nl> { <nl> if ( ep . equals ( FBUtilities . getBroadcastAddress ( ) ) ) <nl> - return ; <nl> + return Futures . immediateFuture ( null ) ; <nl> <nl> String req = " INSERT INTO system . % s ( peer , tokens ) VALUES ( ? , ? ) " ; <nl> - executeInternal ( String . format ( req , PEERS ) , ep , tokensAsSet ( tokens ) ) ; <nl> + return executorService . submit ( ( Runnable ) ( ) - > executeInternal ( String . format ( req , PEERS ) , ep , tokensAsSet ( tokens ) ) ) ; <nl> } <nl> <nl> - public static synchronized void updatePreferredIP ( InetAddress ep , InetAddress preferred _ ip ) <nl> + public static void updatePreferredIP ( InetAddress ep , InetAddress preferred _ ip ) <nl> { <nl> String req = " INSERT INTO system . % s ( peer , preferred _ ip ) VALUES ( ? , ? ) " ; <nl> executeInternal ( String . format ( req , PEERS ) , ep , preferred _ ip ) ; <nl> forceBlockingFlush ( PEERS ) ; <nl> } <nl> <nl> - public static synchronized void updatePeerInfo ( InetAddress ep , String columnName , Object value ) <nl> + public static Future < ? > updatePeerInfo ( final InetAddress ep , final String columnName , final Object value , ExecutorService executorService ) <nl> { <nl> if ( ep . equals ( FBUtilities . getBroadcastAddress ( ) ) ) <nl> - return ; <nl> + return Futures . immediateFuture ( null ) ; <nl> <nl> String req = " INSERT INTO system . % s ( peer , % s ) VALUES ( ? , ? ) " ; <nl> - executeInternal ( String . format ( req , PEERS , columnName ) , ep , value ) ; <nl> + return executorService . submit ( ( Runnable ) ( ) - > executeInternal ( String . format ( req , PEERS , columnName ) , ep , value ) ) ; <nl> } <nl> <nl> public static synchronized void updateHintsDropped ( InetAddress ep , UUID timePeriod , int value ) <nl> @ @ - 748 , 7 + 754 , 7 @ @ public final class SystemKeyspace <nl> / * * <nl> * Remove stored tokens being used by another node <nl> * / <nl> - public static synchronized void removeEndpoint ( InetAddress ep ) <nl> + public static void removeEndpoint ( InetAddress ep ) <nl> { <nl> String req = " DELETE FROM system . % s WHERE peer = ? " ; <nl> executeInternal ( String . format ( req , PEERS ) , ep ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 8a9113c . . a1d1756 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 1711 , 23 + 1711 , 24 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> if ( getTokenMetadata ( ) . isMember ( endpoint ) ) <nl> { <nl> + final ExecutorService executor = StageManager . getStage ( Stage . MUTATION ) ; <nl> switch ( state ) <nl> { <nl> case RELEASE _ VERSION : <nl> - SystemKeyspace . updatePeerInfo ( endpoint , " release _ version " , value . value ) ; <nl> + SystemKeyspace . updatePeerInfo ( endpoint , " release _ version " , value . value , executor ) ; <nl> break ; <nl> case DC : <nl> updateTopology ( endpoint ) ; <nl> - SystemKeyspace . updatePeerInfo ( endpoint , " data _ center " , value . value ) ; <nl> + SystemKeyspace . updatePeerInfo ( endpoint , " data _ center " , value . value , executor ) ; <nl> break ; <nl> case RACK : <nl> updateTopology ( endpoint ) ; <nl> - SystemKeyspace . updatePeerInfo ( endpoint , " rack " , value . value ) ; <nl> + SystemKeyspace . updatePeerInfo ( endpoint , " rack " , value . value , executor ) ; <nl> break ; <nl> case RPC _ ADDRESS : <nl> try <nl> { <nl> - SystemKeyspace . updatePeerInfo ( endpoint , " rpc _ address " , InetAddress . getByName ( value . value ) ) ; <nl> + SystemKeyspace . updatePeerInfo ( endpoint , " rpc _ address " , InetAddress . getByName ( value . value ) , executor ) ; <nl> } <nl> catch ( UnknownHostException e ) <nl> { <nl> @ @ - 1735 , 11 + 1736 , 11 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> } <nl> break ; <nl> case SCHEMA : <nl> - SystemKeyspace . updatePeerInfo ( endpoint , " schema _ version " , UUID . fromString ( value . value ) ) ; <nl> + SystemKeyspace . updatePeerInfo ( endpoint , " schema _ version " , UUID . fromString ( value . value ) , executor ) ; <nl> MigrationManager . instance . scheduleSchemaPull ( endpoint , epState ) ; <nl> break ; <nl> case HOST _ ID : <nl> - SystemKeyspace . updatePeerInfo ( endpoint , " host _ id " , UUID . fromString ( value . value ) ) ; <nl> + SystemKeyspace . updatePeerInfo ( endpoint , " host _ id " , UUID . fromString ( value . value ) , executor ) ; <nl> break ; <nl> case RPC _ READY : <nl> notifyRpcChange ( endpoint , epState . isRpcReady ( ) ) ; <nl> @ @ - 1785 , 23 + 1786 , 24 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> private void updatePeerInfo ( InetAddress endpoint ) <nl> { <nl> EndpointState epState = Gossiper . instance . getEndpointStateForEndpoint ( endpoint ) ; <nl> + final ExecutorService executor = StageManager . getStage ( Stage . MUTATION ) ; <nl> for ( Map . Entry < ApplicationState , VersionedValue > entry : epState . states ( ) ) <nl> { <nl> switch ( entry . getKey ( ) ) <nl> { <nl> case RELEASE _ VERSION : <nl> - SystemKeyspace . updatePeerInfo ( endpoint , " release _ version " , entry . getValue ( ) . value ) ; <nl> + SystemKeyspace . updatePeerInfo ( endpoint , " release _ version " , entry . getValue ( ) . value , executor ) ; <nl> break ; <nl> case DC : <nl> - SystemKeyspace . updatePeerInfo ( endpoint , " data _ center " , entry . getValue ( ) . value ) ; <nl> + SystemKeyspace . updatePeerInfo ( endpoint , " data _ center " , entry . getValue ( ) . value , executor ) ; <nl> break ; <nl> case RACK : <nl> - SystemKeyspace . updatePeerInfo ( endpoint , " rack " , entry . getValue ( ) . value ) ; <nl> + SystemKeyspace . updatePeerInfo ( endpoint , " rack " , entry . getValue ( ) . value , executor ) ; <nl> break ; <nl> case RPC _ ADDRESS : <nl> try <nl> { <nl> - SystemKeyspace . updatePeerInfo ( endpoint , " rpc _ address " , InetAddress . getByName ( entry . getValue ( ) . value ) ) ; <nl> + SystemKeyspace . updatePeerInfo ( endpoint , " rpc _ address " , InetAddress . getByName ( entry . getValue ( ) . value ) , executor ) ; <nl> } <nl> catch ( UnknownHostException e ) <nl> { <nl> @ @ - 1809 , 10 + 1811 , 10 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> } <nl> break ; <nl> case SCHEMA : <nl> - SystemKeyspace . updatePeerInfo ( endpoint , " schema _ version " , UUID . fromString ( entry . getValue ( ) . value ) ) ; <nl> + SystemKeyspace . updatePeerInfo ( endpoint , " schema _ version " , UUID . fromString ( entry . getValue ( ) . value ) , executor ) ; <nl> break ; <nl> case HOST _ ID : <nl> - SystemKeyspace . updatePeerInfo ( endpoint , " host _ id " , UUID . fromString ( entry . getValue ( ) . value ) ) ; <nl> + SystemKeyspace . updatePeerInfo ( endpoint , " host _ id " , UUID . fromString ( entry . getValue ( ) . value ) , executor ) ; <nl> break ; <nl> } <nl> } <nl> @ @ - 2118 , 7 + 2120 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> Gossiper . instance . replacementQuarantine ( ep ) ; / / quarantine locally longer than normally ; see CASSANDRA - 8260 <nl> } <nl> if ( ! tokensToUpdateInSystemKeyspace . isEmpty ( ) ) <nl> - SystemKeyspace . updateTokens ( endpoint , tokensToUpdateInSystemKeyspace ) ; <nl> + SystemKeyspace . updateTokens ( endpoint , tokensToUpdateInSystemKeyspace , StageManager . getStage ( Stage . MUTATION ) ) ; <nl> <nl> if ( isMoving | | operationMode = = Mode . MOVING ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / db / SystemKeyspaceTest . java b / test / unit / org / apache / cassandra / db / SystemKeyspaceTest . java <nl> index bcbabfd . . d151f59 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / SystemKeyspaceTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / SystemKeyspaceTest . java <nl> @ @ - 24 , 11 + 24 , 14 @ @ import java . net . UnknownHostException ; <nl> import java . nio . file . Path ; <nl> import java . nio . file . Paths ; <nl> import java . util . * ; <nl> + import java . util . concurrent . Future ; <nl> <nl> import org . apache . commons . io . FileUtils ; <nl> import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> <nl> + import org . apache . cassandra . concurrent . Stage ; <nl> + import org . apache . cassandra . concurrent . StageManager ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . cql3 . QueryProcessor ; <nl> import org . apache . cassandra . cql3 . UntypedResultSet ; <nl> @ @ - 84 , 7 + 87 , 8 @ @ public class SystemKeyspaceTest <nl> { <nl> BytesToken token = new BytesToken ( ByteBufferUtil . bytes ( " token3 " ) ) ; <nl> InetAddress address = InetAddress . getByName ( " 127 . 0 . 0 . 2 " ) ; <nl> - SystemKeyspace . updateTokens ( address , Collections . < Token > singletonList ( token ) ) ; <nl> + Future < ? > future = SystemKeyspace . updateTokens ( address , Collections . singletonList ( token ) , StageManager . getStage ( Stage . MUTATION ) ) ; <nl> + FBUtilities . waitOnFuture ( future ) ; <nl> assert SystemKeyspace . loadTokens ( ) . get ( address ) . contains ( token ) ; <nl> SystemKeyspace . removeEndpoint ( address ) ; <nl> assert ! SystemKeyspace . loadTokens ( ) . containsValue ( token ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / gms / FailureDetectorTest . java b / test / unit / org / apache / cassandra / gms / FailureDetectorTest . java <nl> index af099b0 . . 83c3500 100644 <nl> - - - a / test / unit / org / apache / cassandra / gms / FailureDetectorTest . java <nl> + + + b / test / unit / org / apache / cassandra / gms / FailureDetectorTest . java <nl> @ @ - 45 , 8 + 45 , 8 @ @ public class FailureDetectorTest <nl> { <nl> / / slow unit tests can cause problems with FailureDetector ' s GC pause handling <nl> System . setProperty ( " cassandra . max _ local _ pause _ in _ ms " , " 20000 " ) ; <nl> - <nl> DatabaseDescriptor . setDaemonInitialized ( ) ; <nl> + DatabaseDescriptor . createAllDirectories ( ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java b / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java <nl> index efab615 . . 91a7ab2 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java <nl> + + + b / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java <nl> @ @ - 22 , 6 + 22 , 8 @ @ package org . apache . cassandra . service ; <nl> import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> import java . util . * ; <nl> + import java . util . concurrent . ExecutorService ; <nl> + import java . util . concurrent . Future ; <nl> <nl> import com . google . common . collect . HashMultimap ; <nl> import com . google . common . collect . Multimap ; <nl> @ @ - 33 , 6 + 35 , 8 @ @ import org . junit . Test ; <nl> import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . Util ; <nl> import org . apache . cassandra . Util . PartitionerSwitcher ; <nl> + import org . apache . cassandra . concurrent . Stage ; <nl> + import org . apache . cassandra . concurrent . StageManager ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . db . SystemKeyspace ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> @ @ - 46 , 6 + 50 , 7 @ @ import org . apache . cassandra . locator . AbstractReplicationStrategy ; <nl> import org . apache . cassandra . locator . SimpleSnitch ; <nl> import org . apache . cassandra . locator . TokenMetadata ; <nl> import org . apache . cassandra . schema . KeyspaceMetadata ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> import static org . junit . Assert . * ; <nl> <nl> @ @ - 675 , 8 + 680 , 9 @ @ public class LeaveAndBootstrapTest <nl> Util . createInitialRing ( ss , partitioner , endpointTokens , new ArrayList < Token > ( ) , hosts , new ArrayList < UUID > ( ) , 2 ) ; <nl> <nl> InetAddress toRemove = hosts . get ( 1 ) ; <nl> - SystemKeyspace . updatePeerInfo ( toRemove , " data _ center " , " dc42 " ) ; <nl> - SystemKeyspace . updatePeerInfo ( toRemove , " rack " , " rack42 " ) ; <nl> + final ExecutorService executor = StageManager . getStage ( Stage . MUTATION ) ; <nl> + FBUtilities . waitOnFuture ( SystemKeyspace . updatePeerInfo ( toRemove , " data _ center " , " dc42 " , executor ) ) ; <nl> + FBUtilities . waitOnFuture ( SystemKeyspace . updatePeerInfo ( toRemove , " rack " , " rack42 " , executor ) ) ; <nl> assertEquals ( " rack42 " , SystemKeyspace . loadDcRackInfo ( ) . get ( toRemove ) . get ( " rack " ) ) ; <nl> <nl> / / mark the node as removed
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index deb37ba . . 4ede198 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 73 , 7 + 73 , 7 @ @ <nl> * Auto paging in binary protocol ( CASSANDRA - 4415 , 5714 ) <nl> * Don ' t tie client side use of AbstractType to JDBC ( CASSANDRA - 4495 ) <nl> * Adds new TimestampType to replace DateType ( CASSANDRA - 5723 , CASSANDRA - 5729 ) <nl> - <nl> + * Allow nodetool with no args , and with help to run without a server ( CASSANDRA - 5734 ) <nl> <nl> 1 . 2 . 7 <nl> * make starting native protocol server idempotent ( CASSANDRA - 5728 ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> index 825c8d1 . . 57c641a 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> @ @ - 969 , 46 + 969 , 53 @ @ public class NodeCmd <nl> } <nl> } <nl> <nl> - String username = cmd . getOptionValue ( USERNAME _ OPT . left ) ; <nl> - String password = cmd . getOptionValue ( PASSWORD _ OPT . left ) ; <nl> + NodeCommand command = null ; <nl> <nl> - NodeProbe probe = null ; <nl> try <nl> { <nl> - probe = username = = null ? new NodeProbe ( host , port ) : new NodeProbe ( host , port , username , password ) ; <nl> + command = cmd . getCommand ( ) ; <nl> } <nl> - catch ( IOException ioe ) <nl> + catch ( IllegalArgumentException e ) <nl> { <nl> - Throwable inner = findInnermostThrowable ( ioe ) ; <nl> - if ( inner instanceof ConnectException ) <nl> - { <nl> - System . err . printf ( " Failed to connect to ' % s : % d ' : % s % n " , host , port , inner . getMessage ( ) ) ; <nl> - System . exit ( 1 ) ; <nl> - } <nl> - else if ( inner instanceof UnknownHostException ) <nl> - { <nl> - System . err . printf ( " Cannot resolve ' % s ' : unknown host % n " , host ) ; <nl> - System . exit ( 1 ) ; <nl> - } <nl> - else <nl> - { <nl> - err ( ioe , " Error connecting to remote JMX agent ! " ) ; <nl> - } <nl> + badUse ( e . getMessage ( ) ) ; <nl> + } <nl> + <nl> + if ( NodeCommand . HELP . equals ( command ) ) <nl> + { <nl> + printUsage ( ) ; <nl> + System . exit ( 0 ) ; <nl> } <nl> + <nl> + NodeProbe probe = null ; <nl> + <nl> try <nl> { <nl> - NodeCommand command = null ; <nl> + String username = cmd . getOptionValue ( USERNAME _ OPT . left ) ; <nl> + String password = cmd . getOptionValue ( PASSWORD _ OPT . left ) ; <nl> <nl> try <nl> { <nl> - command = cmd . getCommand ( ) ; <nl> + probe = username = = null ? new NodeProbe ( host , port ) : new NodeProbe ( host , port , username , password ) ; <nl> } <nl> - catch ( IllegalArgumentException e ) <nl> + catch ( IOException ioe ) <nl> { <nl> - badUse ( e . getMessage ( ) ) ; <nl> + Throwable inner = findInnermostThrowable ( ioe ) ; <nl> + if ( inner instanceof ConnectException ) <nl> + { <nl> + System . err . printf ( " Failed to connect to ' % s : % d ' : % s % n " , host , port , inner . getMessage ( ) ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + else if ( inner instanceof UnknownHostException ) <nl> + { <nl> + System . err . printf ( " Cannot resolve ' % s ' : unknown host % n " , host ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + else <nl> + { <nl> + err ( ioe , " Error connecting to remote JMX agent ! " ) ; <nl> + } <nl> } <nl> <nl> - <nl> NodeCmd nodeCmd = new NodeCmd ( probe ) ; <nl> <nl> / / Execute the requested command . <nl> @ @ - 1018 , 7 + 1025 , 6 @ @ public class NodeCmd <nl> <nl> switch ( command ) <nl> { <nl> - case HELP : printUsage ( ) ; break ; <nl> case RING : <nl> if ( arguments . length > 0 ) { nodeCmd . printRing ( System . out , arguments [ 0 ] ) ; } <nl> else { nodeCmd . printRing ( System . out , null ) ; } ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index a0a61ac . . d8b22f0 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 15 
 + * Gossip thread slows down when using batch commit log ( CASSANDRA - 12966 ) 
 * Randomize batchlog endpoint selection with only 1 or 2 racks ( CASSANDRA - 12884 ) 
 * Fix digest calculation for counter cells ( CASSANDRA - 13750 ) 
 * Fix ColumnDefinition . cellValueType ( ) for non - frozen collection and change SSTabledump to use type . toJSONString ( ) ( CASSANDRA - 13573 ) 
 diff - - git a / src / java / org / apache / cassandra / db / SystemKeyspace . java b / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 index cc21435 . . 7ce74a1 100644 
 - - - a / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 + + + b / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 @ @ - 23 , 11 + 23 , 13 @ @ import java . io . IOException ; 
 import java . net . InetAddress ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 + import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . TimeUnit ; 
 import java . util . stream . Collectors ; 
 import java . util . stream . StreamSupport ; 
 import javax . management . openmbean . OpenDataException ; 
 import javax . management . openmbean . TabularData ; 
 + import java . util . concurrent . Future ; 
 
 import com . google . common . collect . HashMultimap ; 
 import com . google . common . collect . ImmutableSet ; 
 @ @ - 36 , 6 + 38 , 10 @ @ import com . google . common . io . ByteStreams ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import com . google . common . util . concurrent . Futures ; 
 + 
 + import org . apache . cassandra . concurrent . Stage ; 
 + import org . apache . cassandra . concurrent . StageManager ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . cql3 . QueryProcessor ; 
 @ @ - 687 , 29 + 693 , 29 @ @ public final class SystemKeyspace 
 / * * 
 * Record tokens being used by another node 
 * / 
 - public static synchronized void updateTokens ( InetAddress ep , Collection < Token > tokens ) 
 + public static Future < ? > updateTokens ( final InetAddress ep , final Collection < Token > tokens , ExecutorService executorService ) 
 { 
 if ( ep . equals ( FBUtilities . getBroadcastAddress ( ) ) ) 
 - return ; 
 + return Futures . immediateFuture ( null ) ; 
 
 String req = " INSERT INTO system . % s ( peer , tokens ) VALUES ( ? , ? ) " ; 
 - executeInternal ( String . format ( req , PEERS ) , ep , tokensAsSet ( tokens ) ) ; 
 + return executorService . submit ( ( Runnable ) ( ) - > executeInternal ( String . format ( req , PEERS ) , ep , tokensAsSet ( tokens ) ) ) ; 
 } 
 
 - public static synchronized void updatePreferredIP ( InetAddress ep , InetAddress preferred _ ip ) 
 + public static void updatePreferredIP ( InetAddress ep , InetAddress preferred _ ip ) 
 { 
 String req = " INSERT INTO system . % s ( peer , preferred _ ip ) VALUES ( ? , ? ) " ; 
 executeInternal ( String . format ( req , PEERS ) , ep , preferred _ ip ) ; 
 forceBlockingFlush ( PEERS ) ; 
 } 
 
 - public static synchronized void updatePeerInfo ( InetAddress ep , String columnName , Object value ) 
 + public static Future < ? > updatePeerInfo ( final InetAddress ep , final String columnName , final Object value , ExecutorService executorService ) 
 { 
 if ( ep . equals ( FBUtilities . getBroadcastAddress ( ) ) ) 
 - return ; 
 + return Futures . immediateFuture ( null ) ; 
 
 String req = " INSERT INTO system . % s ( peer , % s ) VALUES ( ? , ? ) " ; 
 - executeInternal ( String . format ( req , PEERS , columnName ) , ep , value ) ; 
 + return executorService . submit ( ( Runnable ) ( ) - > executeInternal ( String . format ( req , PEERS , columnName ) , ep , value ) ) ; 
 } 
 
 public static synchronized void updateHintsDropped ( InetAddress ep , UUID timePeriod , int value ) 
 @ @ - 748 , 7 + 754 , 7 @ @ public final class SystemKeyspace 
 / * * 
 * Remove stored tokens being used by another node 
 * / 
 - public static synchronized void removeEndpoint ( InetAddress ep ) 
 + public static void removeEndpoint ( InetAddress ep ) 
 { 
 String req = " DELETE FROM system . % s WHERE peer = ? " ; 
 executeInternal ( String . format ( req , PEERS ) , ep ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 8a9113c . . a1d1756 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 1711 , 23 + 1711 , 24 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 if ( getTokenMetadata ( ) . isMember ( endpoint ) ) 
 { 
 + final ExecutorService executor = StageManager . getStage ( Stage . MUTATION ) ; 
 switch ( state ) 
 { 
 case RELEASE _ VERSION : 
 - SystemKeyspace . updatePeerInfo ( endpoint , " release _ version " , value . value ) ; 
 + SystemKeyspace . updatePeerInfo ( endpoint , " release _ version " , value . value , executor ) ; 
 break ; 
 case DC : 
 updateTopology ( endpoint ) ; 
 - SystemKeyspace . updatePeerInfo ( endpoint , " data _ center " , value . value ) ; 
 + SystemKeyspace . updatePeerInfo ( endpoint , " data _ center " , value . value , executor ) ; 
 break ; 
 case RACK : 
 updateTopology ( endpoint ) ; 
 - SystemKeyspace . updatePeerInfo ( endpoint , " rack " , value . value ) ; 
 + SystemKeyspace . updatePeerInfo ( endpoint , " rack " , value . value , executor ) ; 
 break ; 
 case RPC _ ADDRESS : 
 try 
 { 
 - SystemKeyspace . updatePeerInfo ( endpoint , " rpc _ address " , InetAddress . getByName ( value . value ) ) ; 
 + SystemKeyspace . updatePeerInfo ( endpoint , " rpc _ address " , InetAddress . getByName ( value . value ) , executor ) ; 
 } 
 catch ( UnknownHostException e ) 
 { 
 @ @ - 1735 , 11 + 1736 , 11 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 } 
 break ; 
 case SCHEMA : 
 - SystemKeyspace . updatePeerInfo ( endpoint , " schema _ version " , UUID . fromString ( value . value ) ) ; 
 + SystemKeyspace . updatePeerInfo ( endpoint , " schema _ version " , UUID . fromString ( value . value ) , executor ) ; 
 MigrationManager . instance . scheduleSchemaPull ( endpoint , epState ) ; 
 break ; 
 case HOST _ ID : 
 - SystemKeyspace . updatePeerInfo ( endpoint , " host _ id " , UUID . fromString ( value . value ) ) ; 
 + SystemKeyspace . updatePeerInfo ( endpoint , " host _ id " , UUID . fromString ( value . value ) , executor ) ; 
 break ; 
 case RPC _ READY : 
 notifyRpcChange ( endpoint , epState . isRpcReady ( ) ) ; 
 @ @ - 1785 , 23 + 1786 , 24 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 private void updatePeerInfo ( InetAddress endpoint ) 
 { 
 EndpointState epState = Gossiper . instance . getEndpointStateForEndpoint ( endpoint ) ; 
 + final ExecutorService executor = StageManager . getStage ( Stage . MUTATION ) ; 
 for ( Map . Entry < ApplicationState , VersionedValue > entry : epState . states ( ) ) 
 { 
 switch ( entry . getKey ( ) ) 
 { 
 case RELEASE _ VERSION : 
 - SystemKeyspace . updatePeerInfo ( endpoint , " release _ version " , entry . getValue ( ) . value ) ; 
 + SystemKeyspace . updatePeerInfo ( endpoint , " release _ version " , entry . getValue ( ) . value , executor ) ; 
 break ; 
 case DC : 
 - SystemKeyspace . updatePeerInfo ( endpoint , " data _ center " , entry . getValue ( ) . value ) ; 
 + SystemKeyspace . updatePeerInfo ( endpoint , " data _ center " , entry . getValue ( ) . value , executor ) ; 
 break ; 
 case RACK : 
 - SystemKeyspace . updatePeerInfo ( endpoint , " rack " , entry . getValue ( ) . value ) ; 
 + SystemKeyspace . updatePeerInfo ( endpoint , " rack " , entry . getValue ( ) . value , executor ) ; 
 break ; 
 case RPC _ ADDRESS : 
 try 
 { 
 - SystemKeyspace . updatePeerInfo ( endpoint , " rpc _ address " , InetAddress . getByName ( entry . getValue ( ) . value ) ) ; 
 + SystemKeyspace . updatePeerInfo ( endpoint , " rpc _ address " , InetAddress . getByName ( entry . getValue ( ) . value ) , executor ) ; 
 } 
 catch ( UnknownHostException e ) 
 { 
 @ @ - 1809 , 10 + 1811 , 10 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 } 
 break ; 
 case SCHEMA : 
 - SystemKeyspace . updatePeerInfo ( endpoint , " schema _ version " , UUID . fromString ( entry . getValue ( ) . value ) ) ; 
 + SystemKeyspace . updatePeerInfo ( endpoint , " schema _ version " , UUID . fromString ( entry . getValue ( ) . value ) , executor ) ; 
 break ; 
 case HOST _ ID : 
 - SystemKeyspace . updatePeerInfo ( endpoint , " host _ id " , UUID . fromString ( entry . getValue ( ) . value ) ) ; 
 + SystemKeyspace . updatePeerInfo ( endpoint , " host _ id " , UUID . fromString ( entry . getValue ( ) . value ) , executor ) ; 
 break ; 
 } 
 } 
 @ @ - 2118 , 7 + 2120 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 Gossiper . instance . replacementQuarantine ( ep ) ; / / quarantine locally longer than normally ; see CASSANDRA - 8260 
 } 
 if ( ! tokensToUpdateInSystemKeyspace . isEmpty ( ) ) 
 - SystemKeyspace . updateTokens ( endpoint , tokensToUpdateInSystemKeyspace ) ; 
 + SystemKeyspace . updateTokens ( endpoint , tokensToUpdateInSystemKeyspace , StageManager . getStage ( Stage . MUTATION ) ) ; 
 
 if ( isMoving | | operationMode = = Mode . MOVING ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / db / SystemKeyspaceTest . java b / test / unit / org / apache / cassandra / db / SystemKeyspaceTest . java 
 index bcbabfd . . d151f59 100644 
 - - - a / test / unit / org / apache / cassandra / db / SystemKeyspaceTest . java 
 + + + b / test / unit / org / apache / cassandra / db / SystemKeyspaceTest . java 
 @ @ - 24 , 11 + 24 , 14 @ @ import java . net . UnknownHostException ; 
 import java . nio . file . Path ; 
 import java . nio . file . Paths ; 
 import java . util . * ; 
 + import java . util . concurrent . Future ; 
 
 import org . apache . commons . io . FileUtils ; 
 import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 
 + import org . apache . cassandra . concurrent . Stage ; 
 + import org . apache . cassandra . concurrent . StageManager ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . cql3 . QueryProcessor ; 
 import org . apache . cassandra . cql3 . UntypedResultSet ; 
 @ @ - 84 , 7 + 87 , 8 @ @ public class SystemKeyspaceTest 
 { 
 BytesToken token = new BytesToken ( ByteBufferUtil . bytes ( " token3 " ) ) ; 
 InetAddress address = InetAddress . getByName ( " 127 . 0 . 0 . 2 " ) ; 
 - SystemKeyspace . updateTokens ( address , Collections . < Token > singletonList ( token ) ) ; 
 + Future < ? > future = SystemKeyspace . updateTokens ( address , Collections . singletonList ( token ) , StageManager . getStage ( Stage . MUTATION ) ) ; 
 + FBUtilities . waitOnFuture ( future ) ; 
 assert SystemKeyspace . loadTokens ( ) . get ( address ) . contains ( token ) ; 
 SystemKeyspace . removeEndpoint ( address ) ; 
 assert ! SystemKeyspace . loadTokens ( ) . containsValue ( token ) ; 
 diff - - git a / test / unit / org / apache / cassandra / gms / FailureDetectorTest . java b / test / unit / org / apache / cassandra / gms / FailureDetectorTest . java 
 index af099b0 . . 83c3500 100644 
 - - - a / test / unit / org / apache / cassandra / gms / FailureDetectorTest . java 
 + + + b / test / unit / org / apache / cassandra / gms / FailureDetectorTest . java 
 @ @ - 45 , 8 + 45 , 8 @ @ public class FailureDetectorTest 
 { 
 / / slow unit tests can cause problems with FailureDetector ' s GC pause handling 
 System . setProperty ( " cassandra . max _ local _ pause _ in _ ms " , " 20000 " ) ; 
 - 
 DatabaseDescriptor . setDaemonInitialized ( ) ; 
 + DatabaseDescriptor . createAllDirectories ( ) ; 
 } 
 
 @ Test 
 diff - - git a / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java b / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java 
 index efab615 . . 91a7ab2 100644 
 - - - a / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java 
 + + + b / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java 
 @ @ - 22 , 6 + 22 , 8 @ @ package org . apache . cassandra . service ; 
 import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 import java . util . * ; 
 + import java . util . concurrent . ExecutorService ; 
 + import java . util . concurrent . Future ; 
 
 import com . google . common . collect . HashMultimap ; 
 import com . google . common . collect . Multimap ; 
 @ @ - 33 , 6 + 35 , 8 @ @ import org . junit . Test ; 
 import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . Util ; 
 import org . apache . cassandra . Util . PartitionerSwitcher ; 
 + import org . apache . cassandra . concurrent . Stage ; 
 + import org . apache . cassandra . concurrent . StageManager ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . db . SystemKeyspace ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 @ @ - 46 , 6 + 50 , 7 @ @ import org . apache . cassandra . locator . AbstractReplicationStrategy ; 
 import org . apache . cassandra . locator . SimpleSnitch ; 
 import org . apache . cassandra . locator . TokenMetadata ; 
 import org . apache . cassandra . schema . KeyspaceMetadata ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 
 import static org . junit . Assert . * ; 
 
 @ @ - 675 , 8 + 680 , 9 @ @ public class LeaveAndBootstrapTest 
 Util . createInitialRing ( ss , partitioner , endpointTokens , new ArrayList < Token > ( ) , hosts , new ArrayList < UUID > ( ) , 2 ) ; 
 
 InetAddress toRemove = hosts . get ( 1 ) ; 
 - SystemKeyspace . updatePeerInfo ( toRemove , " data _ center " , " dc42 " ) ; 
 - SystemKeyspace . updatePeerInfo ( toRemove , " rack " , " rack42 " ) ; 
 + final ExecutorService executor = StageManager . getStage ( Stage . MUTATION ) ; 
 + FBUtilities . waitOnFuture ( SystemKeyspace . updatePeerInfo ( toRemove , " data _ center " , " dc42 " , executor ) ) ; 
 + FBUtilities . waitOnFuture ( SystemKeyspace . updatePeerInfo ( toRemove , " rack " , " rack42 " , executor ) ) ; 
 assertEquals ( " rack42 " , SystemKeyspace . loadDcRackInfo ( ) . get ( toRemove ) . get ( " rack " ) ) ; 
 
 / / mark the node as removed

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index deb37ba . . 4ede198 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 73 , 7 + 73 , 7 @ @ 
 * Auto paging in binary protocol ( CASSANDRA - 4415 , 5714 ) 
 * Don ' t tie client side use of AbstractType to JDBC ( CASSANDRA - 4495 ) 
 * Adds new TimestampType to replace DateType ( CASSANDRA - 5723 , CASSANDRA - 5729 ) 
 - 
 + * Allow nodetool with no args , and with help to run without a server ( CASSANDRA - 5734 ) 
 
 1 . 2 . 7 
 * make starting native protocol server idempotent ( CASSANDRA - 5728 ) 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 index 825c8d1 . . 57c641a 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 @ @ - 969 , 46 + 969 , 53 @ @ public class NodeCmd 
 } 
 } 
 
 - String username = cmd . getOptionValue ( USERNAME _ OPT . left ) ; 
 - String password = cmd . getOptionValue ( PASSWORD _ OPT . left ) ; 
 + NodeCommand command = null ; 
 
 - NodeProbe probe = null ; 
 try 
 { 
 - probe = username = = null ? new NodeProbe ( host , port ) : new NodeProbe ( host , port , username , password ) ; 
 + command = cmd . getCommand ( ) ; 
 } 
 - catch ( IOException ioe ) 
 + catch ( IllegalArgumentException e ) 
 { 
 - Throwable inner = findInnermostThrowable ( ioe ) ; 
 - if ( inner instanceof ConnectException ) 
 - { 
 - System . err . printf ( " Failed to connect to ' % s : % d ' : % s % n " , host , port , inner . getMessage ( ) ) ; 
 - System . exit ( 1 ) ; 
 - } 
 - else if ( inner instanceof UnknownHostException ) 
 - { 
 - System . err . printf ( " Cannot resolve ' % s ' : unknown host % n " , host ) ; 
 - System . exit ( 1 ) ; 
 - } 
 - else 
 - { 
 - err ( ioe , " Error connecting to remote JMX agent ! " ) ; 
 - } 
 + badUse ( e . getMessage ( ) ) ; 
 + } 
 + 
 + if ( NodeCommand . HELP . equals ( command ) ) 
 + { 
 + printUsage ( ) ; 
 + System . exit ( 0 ) ; 
 } 
 + 
 + NodeProbe probe = null ; 
 + 
 try 
 { 
 - NodeCommand command = null ; 
 + String username = cmd . getOptionValue ( USERNAME _ OPT . left ) ; 
 + String password = cmd . getOptionValue ( PASSWORD _ OPT . left ) ; 
 
 try 
 { 
 - command = cmd . getCommand ( ) ; 
 + probe = username = = null ? new NodeProbe ( host , port ) : new NodeProbe ( host , port , username , password ) ; 
 } 
 - catch ( IllegalArgumentException e ) 
 + catch ( IOException ioe ) 
 { 
 - badUse ( e . getMessage ( ) ) ; 
 + Throwable inner = findInnermostThrowable ( ioe ) ; 
 + if ( inner instanceof ConnectException ) 
 + { 
 + System . err . printf ( " Failed to connect to ' % s : % d ' : % s % n " , host , port , inner . getMessage ( ) ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + else if ( inner instanceof UnknownHostException ) 
 + { 
 + System . err . printf ( " Cannot resolve ' % s ' : unknown host % n " , host ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + else 
 + { 
 + err ( ioe , " Error connecting to remote JMX agent ! " ) ; 
 + } 
 } 
 
 - 
 NodeCmd nodeCmd = new NodeCmd ( probe ) ; 
 
 / / Execute the requested command . 
 @ @ - 1018 , 7 + 1025 , 6 @ @ public class NodeCmd 
 
 switch ( command ) 
 { 
 - case HELP : printUsage ( ) ; break ; 
 case RING : 
 if ( arguments . length > 0 ) { nodeCmd . printRing ( System . out , arguments [ 0 ] ) ; } 
 else { nodeCmd . printRing ( System . out , null ) ; } ;
