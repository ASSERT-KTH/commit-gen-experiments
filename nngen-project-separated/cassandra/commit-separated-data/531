BLEU SCORE: 0.01763751180315069

TEST MSG: remove confusingly - unused deserializer parameter
GENERATED MSG: r / m unnecessary declaration of IOException from IColumnIterator . getColumnFamily

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java b / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java <nl> index 6196b1e . . 71f8c43 100644 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java <nl> @ @ - 99 , 7 + 99 , 7 @ @ public abstract class AbstractSSTableIterator implements UnfilteredRowIterator <nl> / / Note that this needs to be called after file ! = null and after the partitionDeletion has been set , but before readStaticRow <nl> / / ( since it uses it ) so we can ' t move that up ( but we ' ll be able to simplify as soon as we drop support for the old file format ) . <nl> this . reader = createReader ( indexEntry , file , shouldCloseFile ) ; <nl> - this . staticRow = readStaticRow ( sstable , file , helper , columns . fetchedColumns ( ) . statics , reader . deserializer ) ; <nl> + this . staticRow = readStaticRow ( sstable , file , helper , columns . fetchedColumns ( ) . statics ) ; <nl> } <nl> else <nl> { <nl> @ @ - 154 , 8 + 154 , 7 @ @ public abstract class AbstractSSTableIterator implements UnfilteredRowIterator <nl> private static Row readStaticRow ( SSTableReader sstable , <nl> FileDataInput file , <nl> SerializationHelper helper , <nl> - Columns statics , <nl> - UnfilteredDeserializer deserializer ) throws IOException <nl> + Columns statics ) throws IOException <nl> { <nl> if ( ! sstable . header . hasStatic ( ) ) <nl> return Rows . EMPTY _ STATIC _ ROW ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6dd1fcb . . 4271551 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 22 , 6 + 22 , 7 @ @ <nl> * remove " nodetool loadbalance " ( CASSANDRA - 2448 ) <nl> * multithreaded compaction ( CASSANDRA - 2191 ) <nl> * compaction throttling ( CASSANDRA - 2156 ) <nl> + * cli no longer divides read _ repair _ chance by 100 ( CASSANDRA - 2458 ) <nl> <nl> <nl> 0 . 7 . 5 <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java <nl> index f4aeb27 . . 44d0630 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliClient . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliClient . java <nl> @ @ - 1039 , 10 + 1039 , 10 @ @ public class CliClient extends CliUserHelp <nl> cfDef . setKey _ cache _ size ( Double . parseDouble ( mValue ) ) ; <nl> break ; <nl> case READ _ REPAIR _ CHANCE : <nl> - double chance = Double . parseDouble ( mValue ) / 100 ; <nl> + double chance = Double . parseDouble ( mValue ) ; <nl> <nl> - if ( chance > 1 ) <nl> - throw new RuntimeException ( " Error : read _ repair _ chance / 100 should not be greater than 1 . " ) ; <nl> + if ( chance < 0 | | chance > 1 ) <nl> + throw new RuntimeException ( " Error : read _ repair _ chance must be between 0 and 1 . " ) ; <nl> <nl> cfDef . setRead _ repair _ chance ( chance ) ; <nl> break ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java b / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java 
 index 6196b1e . . 71f8c43 100644 
 - - - a / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java 
 + + + b / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java 
 @ @ - 99 , 7 + 99 , 7 @ @ public abstract class AbstractSSTableIterator implements UnfilteredRowIterator 
 / / Note that this needs to be called after file ! = null and after the partitionDeletion has been set , but before readStaticRow 
 / / ( since it uses it ) so we can ' t move that up ( but we ' ll be able to simplify as soon as we drop support for the old file format ) . 
 this . reader = createReader ( indexEntry , file , shouldCloseFile ) ; 
 - this . staticRow = readStaticRow ( sstable , file , helper , columns . fetchedColumns ( ) . statics , reader . deserializer ) ; 
 + this . staticRow = readStaticRow ( sstable , file , helper , columns . fetchedColumns ( ) . statics ) ; 
 } 
 else 
 { 
 @ @ - 154 , 8 + 154 , 7 @ @ public abstract class AbstractSSTableIterator implements UnfilteredRowIterator 
 private static Row readStaticRow ( SSTableReader sstable , 
 FileDataInput file , 
 SerializationHelper helper , 
 - Columns statics , 
 - UnfilteredDeserializer deserializer ) throws IOException 
 + Columns statics ) throws IOException 
 { 
 if ( ! sstable . header . hasStatic ( ) ) 
 return Rows . EMPTY _ STATIC _ ROW ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6dd1fcb . . 4271551 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 22 , 6 + 22 , 7 @ @ 
 * remove " nodetool loadbalance " ( CASSANDRA - 2448 ) 
 * multithreaded compaction ( CASSANDRA - 2191 ) 
 * compaction throttling ( CASSANDRA - 2156 ) 
 + * cli no longer divides read _ repair _ chance by 100 ( CASSANDRA - 2458 ) 
 
 
 0 . 7 . 5 
 diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java 
 index f4aeb27 . . 44d0630 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliClient . java 
 + + + b / src / java / org / apache / cassandra / cli / CliClient . java 
 @ @ - 1039 , 10 + 1039 , 10 @ @ public class CliClient extends CliUserHelp 
 cfDef . setKey _ cache _ size ( Double . parseDouble ( mValue ) ) ; 
 break ; 
 case READ _ REPAIR _ CHANCE : 
 - double chance = Double . parseDouble ( mValue ) / 100 ; 
 + double chance = Double . parseDouble ( mValue ) ; 
 
 - if ( chance > 1 ) 
 - throw new RuntimeException ( " Error : read _ repair _ chance / 100 should not be greater than 1 . " ) ; 
 + if ( chance < 0 | | chance > 1 ) 
 + throw new RuntimeException ( " Error : read _ repair _ chance must be between 0 and 1 . " ) ; 
 
 cfDef . setRead _ repair _ chance ( chance ) ; 
 break ;
