BLEU SCORE: 0.029381754016308166

TEST MSG: Fix comment about ParallelGCThreads
GENERATED MSG: Spelling and grammar errors in cassandra . yaml

TEST DIFF (one line): diff - - git a / conf / jvm . options b / conf / jvm . options <nl> index 60f0f10 . . c5d3d95 100644 <nl> - - - a / conf / jvm . options <nl> + + + b / conf / jvm . options <nl> @ @ - 85 , 9 + 85 , 12 @ @ <nl> # until the heap is 70 % full . The default in Hotspot 8u40 is 40 % . <nl> # - XX : InitiatingHeapOccupancyPercent = 70 <nl> <nl> - # The JVM maximum is 8 PGC threads and 1 / 4 of that for ConcGC . <nl> - # Machines with > 10 cores may need additional threads . Increase to < = full cores . <nl> + # For systems with > 8 cores , the default ParallelGCThreads is 5 / 8 the number of logical cores . <nl> + # Otherwise equal to the number of cores when 8 or less . <nl> + # Machines with > 10 cores should try setting these to < = full cores . <nl> # - XX : ParallelGCThreads = 16 <nl> + # By default , ConcGCThreads is 1 / 4 of ParallelGCThreads . <nl> + # Setting both to the same value can reduce STW durations . <nl> # - XX : ConcGCThreads = 16 <nl> <nl> # # # GC logging options - - uncomment to enable
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 2f5f5a9 . . 9551c4c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 7 + 1 , 8 @ @ <nl> 2 . 0 <nl> * removed PBSPredictor ( CASSANDRA - 5455 ) <nl> * CAS support ( CASSANDRA - 5062 , ) <nl> - * Leveled compaction performs size - tiered compactions in L0 ( CASSANDRA - 5371 ) <nl> + * Leveled compaction performs size - tiered compactions in L0 <nl> + ( CASSANDRA - 5371 , 5439 ) <nl> * Add yaml network topology snitch for mixed ec2 / other envs ( CASSANDRA - 5339 ) <nl> * Log when a node is down longer than the hint window ( CASSANDRA - 4554 ) <nl> * Optimize tombstone creation for ExpiringColumns ( CASSANDRA - 4917 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> index f704518 . . 0e8c2a7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> @ @ - 53 , 6 + 53 , 7 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy implem <nl> { <nl> super ( cfs , options ) ; <nl> int configuredMaxSSTableSize = 5 ; <nl> + SizeTieredCompactionStrategyOptions localOptions = new SizeTieredCompactionStrategyOptions ( options ) ; <nl> if ( options ! = null ) <nl> { <nl> String value = options . containsKey ( SSTABLE _ SIZE _ OPTION ) ? options . get ( SSTABLE _ SIZE _ OPTION ) : " 5 " ; <nl> @ @ - 63 , 7 + 64 , 7 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy implem <nl> cfs . getDataTracker ( ) . subscribe ( this ) ; <nl> logger . debug ( " { } subscribed to the data tracker . " , this ) ; <nl> <nl> - manifest = LeveledManifest . create ( cfs , this . maxSSTableSizeInMB ) ; <nl> + manifest = LeveledManifest . create ( cfs , this . maxSSTableSizeInMB , Collections . < SSTableReader > emptyList ( ) , localOptions ) ; <nl> logger . debug ( " Created { } " , manifest ) ; <nl> } <nl> <nl> @ @ - 347 , 6 + 348 , 8 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy implem <nl> <nl> uncheckedOptions . remove ( SSTABLE _ SIZE _ OPTION ) ; <nl> <nl> + uncheckedOptions = SizeTieredCompactionStrategyOptions . validateOptions ( options , uncheckedOptions ) ; <nl> + <nl> return uncheckedOptions ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> index 8ae0834 . . fb4244d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> @ @ - 57 , 11 + 57 , 13 @ @ public class LeveledManifest <nl> private final List < SSTableReader > [ ] generations ; <nl> private final RowPosition [ ] lastCompactedKeys ; <nl> private final int maxSSTableSizeInBytes ; <nl> + private final SizeTieredCompactionStrategyOptions options ; <nl> <nl> - private LeveledManifest ( ColumnFamilyStore cfs , int maxSSTableSizeInMB ) <nl> + private LeveledManifest ( ColumnFamilyStore cfs , int maxSSTableSizeInMB , SizeTieredCompactionStrategyOptions options ) <nl> { <nl> this . cfs = cfs ; <nl> this . maxSSTableSizeInBytes = maxSSTableSizeInMB * 1024 * 1024 ; <nl> + this . options = options ; <nl> <nl> / / allocate enough generations for a PB of data <nl> int n = ( int ) Math . log10 ( 1000 * 1000 * 1000 / maxSSTableSizeInMB ) ; <nl> @ @ - 74 , 14 + 76 , 14 @ @ public class LeveledManifest <nl> } <nl> } <nl> <nl> - static LeveledManifest create ( ColumnFamilyStore cfs , int maxSSTableSize ) <nl> + public static LeveledManifest create ( ColumnFamilyStore cfs , int maxSSTableSize , List < SSTableReader > sstables ) <nl> { <nl> - return create ( cfs , maxSSTableSize , cfs . getSSTables ( ) ) ; <nl> + return create ( cfs , maxSSTableSize , sstables , new SizeTieredCompactionStrategyOptions ( ) ) ; <nl> } <nl> <nl> - public static LeveledManifest create ( ColumnFamilyStore cfs , int maxSSTableSize , Iterable < SSTableReader > sstables ) <nl> + public static LeveledManifest create ( ColumnFamilyStore cfs , int maxSSTableSize , Iterable < SSTableReader > sstables , SizeTieredCompactionStrategyOptions options ) <nl> { <nl> - LeveledManifest manifest = new LeveledManifest ( cfs , maxSSTableSize ) ; <nl> + LeveledManifest manifest = new LeveledManifest ( cfs , maxSSTableSize , options ) ; <nl> <nl> / / ensure all SSTables are in the manifest <nl> for ( SSTableReader ssTableReader : sstables ) <nl> @ @ - 271 , 9 + 273 , 9 @ @ public class LeveledManifest <nl> Iterable < SSTableReader > candidates = cfs . getDataTracker ( ) . getUncompactingSSTables ( generations [ 0 ] ) ; <nl> List < Pair < SSTableReader , Long > > pairs = SizeTieredCompactionStrategy . createSSTableAndLengthPairs ( AbstractCompactionStrategy . filterSuspectSSTables ( candidates ) ) ; <nl> List < List < SSTableReader > > buckets = SizeTieredCompactionStrategy . getBuckets ( pairs , <nl> - SizeTieredCompactionStrategy . DEFAULT _ BUCKET _ HIGH , <nl> - SizeTieredCompactionStrategy . DEFAULT _ BUCKET _ LOW , <nl> - SizeTieredCompactionStrategy . DEFAULT _ MIN _ SSTABLE _ SIZE ) ; <nl> + options . bucketHigh , <nl> + options . bucketLow , <nl> + options . minSSTableSize ) ; <nl> List < SSTableReader > mostInteresting = SizeTieredCompactionStrategy . mostInterestingBucket ( buckets , 4 , 32 ) ; <nl> if ( ! mostInteresting . isEmpty ( ) ) <nl> return Pair . create ( mostInteresting , 0 ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> index ae6f627 . . 3678184 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> @ @ - 34 , 28 + 34 , 15 @ @ import org . apache . cassandra . utils . Pair ; <nl> public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( SizeTieredCompactionStrategy . class ) ; <nl> - protected static final long DEFAULT _ MIN _ SSTABLE _ SIZE = 50L * 1024L * 1024L ; <nl> - protected static final double DEFAULT _ BUCKET _ LOW = 0 . 5 ; <nl> - protected static final double DEFAULT _ BUCKET _ HIGH = 1 . 5 ; <nl> - protected static final String MIN _ SSTABLE _ SIZE _ KEY = " min _ sstable _ size " ; <nl> - protected static final String BUCKET _ LOW _ KEY = " bucket _ low " ; <nl> - protected static final String BUCKET _ HIGH _ KEY = " bucket _ high " ; <nl> - <nl> - protected long minSSTableSize ; <nl> - protected double bucketLow ; <nl> - protected double bucketHigh ; <nl> + <nl> + protected SizeTieredCompactionStrategyOptions options ; <nl> protected volatile int estimatedRemainingTasks ; <nl> <nl> public SizeTieredCompactionStrategy ( ColumnFamilyStore cfs , Map < String , String > options ) <nl> { <nl> super ( cfs , options ) ; <nl> this . estimatedRemainingTasks = 0 ; <nl> - String optionValue = options . get ( MIN _ SSTABLE _ SIZE _ KEY ) ; <nl> - minSSTableSize = optionValue = = null ? DEFAULT _ MIN _ SSTABLE _ SIZE : Long . parseLong ( optionValue ) ; <nl> - optionValue = options . get ( BUCKET _ LOW _ KEY ) ; <nl> - bucketLow = optionValue = = null ? DEFAULT _ BUCKET _ LOW : Double . parseDouble ( optionValue ) ; <nl> - optionValue = options . get ( BUCKET _ HIGH _ KEY ) ; <nl> - bucketHigh = optionValue = = null ? DEFAULT _ BUCKET _ HIGH : Double . parseDouble ( optionValue ) ; <nl> + this . options = new SizeTieredCompactionStrategyOptions ( options ) ; <nl> } <nl> <nl> private List < SSTableReader > getNextBackgroundSSTables ( final int gcBefore ) <nl> @ @ - 68 , 7 + 55 , 7 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy <nl> int maxThreshold = cfs . getMaximumCompactionThreshold ( ) ; <nl> <nl> Set < SSTableReader > candidates = cfs . getUncompactingSSTables ( ) ; <nl> - List < List < SSTableReader > > buckets = getBuckets ( createSSTableAndLengthPairs ( filterSuspectSSTables ( candidates ) ) , bucketHigh , bucketLow , minSSTableSize ) ; <nl> + List < List < SSTableReader > > buckets = getBuckets ( createSSTableAndLengthPairs ( filterSuspectSSTables ( candidates ) ) , options . bucketHigh , options . bucketLow , options . minSSTableSize ) ; <nl> logger . debug ( " Compaction buckets are { } " , buckets ) ; <nl> updateEstimatedCompactionsByTasks ( buckets ) ; <nl> List < SSTableReader > mostInteresting = mostInterestingBucket ( buckets , minThreshold , maxThreshold ) ; <nl> @ @ - 252 , 50 + 239 , 8 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy <nl> public static Map < String , String > validateOptions ( Map < String , String > options ) throws ConfigurationException <nl> { <nl> Map < String , String > uncheckedOptions = AbstractCompactionStrategy . validateOptions ( options ) ; <nl> + uncheckedOptions = SizeTieredCompactionStrategyOptions . validateOptions ( options , uncheckedOptions ) ; <nl> <nl> - String optionValue = options . get ( MIN _ SSTABLE _ SIZE _ KEY ) ; <nl> - try <nl> - { <nl> - long minSSTableSize = optionValue = = null ? DEFAULT _ MIN _ SSTABLE _ SIZE : Long . parseLong ( optionValue ) ; <nl> - if ( minSSTableSize < 0 ) <nl> - { <nl> - throw new ConfigurationException ( String . format ( " % s must be non negative : % d " , MIN _ SSTABLE _ SIZE _ KEY , minSSTableSize ) ) ; <nl> - } <nl> - } <nl> - catch ( NumberFormatException e ) <nl> - { <nl> - throw new ConfigurationException ( String . format ( " % s is not a parsable int ( base10 ) for % s " , optionValue , MIN _ SSTABLE _ SIZE _ KEY ) , e ) ; <nl> - } <nl> - <nl> - double bucketLow , bucketHigh ; <nl> - optionValue = options . get ( BUCKET _ LOW _ KEY ) ; <nl> - try <nl> - { <nl> - bucketLow = optionValue = = null ? DEFAULT _ BUCKET _ LOW : Double . parseDouble ( optionValue ) ; <nl> - } <nl> - catch ( NumberFormatException e ) <nl> - { <nl> - throw new ConfigurationException ( String . format ( " % s is not a parsable int ( base10 ) for % s " , optionValue , DEFAULT _ BUCKET _ LOW ) , e ) ; <nl> - } <nl> - <nl> - optionValue = options . get ( BUCKET _ HIGH _ KEY ) ; <nl> - try <nl> - { <nl> - bucketHigh = optionValue = = null ? DEFAULT _ BUCKET _ HIGH : Double . parseDouble ( optionValue ) ; <nl> - } <nl> - catch ( NumberFormatException e ) <nl> - { <nl> - throw new ConfigurationException ( String . format ( " % s is not a parsable int ( base10 ) for % s " , optionValue , DEFAULT _ BUCKET _ HIGH ) , e ) ; <nl> - } <nl> - <nl> - if ( bucketHigh < = bucketLow ) <nl> - { <nl> - throw new ConfigurationException ( String . format ( " Bucket high value ( % s ) is less than or equal bucket low value ( % s ) " , bucketHigh , bucketLow ) ) ; <nl> - } <nl> - <nl> - uncheckedOptions . remove ( MIN _ SSTABLE _ SIZE _ KEY ) ; <nl> - uncheckedOptions . remove ( BUCKET _ LOW _ KEY ) ; <nl> - uncheckedOptions . remove ( BUCKET _ HIGH _ KEY ) ; <nl> uncheckedOptions . remove ( CFPropDefs . KW _ MINCOMPACTIONTHRESHOLD ) ; <nl> uncheckedOptions . remove ( CFPropDefs . KW _ MAXCOMPACTIONTHRESHOLD ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> index 34a8a72 . . c9d39bb 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> + + + b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . io . File ; <nl> import java . io . IOException ; <nl> import java . util . * ; <nl> <nl> + import org . apache . cassandra . db . compaction . SizeTieredCompactionStrategyOptions ; <nl> import org . apache . commons . cli . * ; <nl> <nl> import org . apache . cassandra . config . DatabaseDescriptor ;

TEST DIFF:
diff - - git a / conf / jvm . options b / conf / jvm . options 
 index 60f0f10 . . c5d3d95 100644 
 - - - a / conf / jvm . options 
 + + + b / conf / jvm . options 
 @ @ - 85 , 9 + 85 , 12 @ @ 
 # until the heap is 70 % full . The default in Hotspot 8u40 is 40 % . 
 # - XX : InitiatingHeapOccupancyPercent = 70 
 
 - # The JVM maximum is 8 PGC threads and 1 / 4 of that for ConcGC . 
 - # Machines with > 10 cores may need additional threads . Increase to < = full cores . 
 + # For systems with > 8 cores , the default ParallelGCThreads is 5 / 8 the number of logical cores . 
 + # Otherwise equal to the number of cores when 8 or less . 
 + # Machines with > 10 cores should try setting these to < = full cores . 
 # - XX : ParallelGCThreads = 16 
 + # By default , ConcGCThreads is 1 / 4 of ParallelGCThreads . 
 + # Setting both to the same value can reduce STW durations . 
 # - XX : ConcGCThreads = 16 
 
 # # # GC logging options - - uncomment to enable

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 2f5f5a9 . . 9551c4c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 7 + 1 , 8 @ @ 
 2 . 0 
 * removed PBSPredictor ( CASSANDRA - 5455 ) 
 * CAS support ( CASSANDRA - 5062 , ) 
 - * Leveled compaction performs size - tiered compactions in L0 ( CASSANDRA - 5371 ) 
 + * Leveled compaction performs size - tiered compactions in L0 
 + ( CASSANDRA - 5371 , 5439 ) 
 * Add yaml network topology snitch for mixed ec2 / other envs ( CASSANDRA - 5339 ) 
 * Log when a node is down longer than the hint window ( CASSANDRA - 4554 ) 
 * Optimize tombstone creation for ExpiringColumns ( CASSANDRA - 4917 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 index f704518 . . 0e8c2a7 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 @ @ - 53 , 6 + 53 , 7 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy implem 
 { 
 super ( cfs , options ) ; 
 int configuredMaxSSTableSize = 5 ; 
 + SizeTieredCompactionStrategyOptions localOptions = new SizeTieredCompactionStrategyOptions ( options ) ; 
 if ( options ! = null ) 
 { 
 String value = options . containsKey ( SSTABLE _ SIZE _ OPTION ) ? options . get ( SSTABLE _ SIZE _ OPTION ) : " 5 " ; 
 @ @ - 63 , 7 + 64 , 7 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy implem 
 cfs . getDataTracker ( ) . subscribe ( this ) ; 
 logger . debug ( " { } subscribed to the data tracker . " , this ) ; 
 
 - manifest = LeveledManifest . create ( cfs , this . maxSSTableSizeInMB ) ; 
 + manifest = LeveledManifest . create ( cfs , this . maxSSTableSizeInMB , Collections . < SSTableReader > emptyList ( ) , localOptions ) ; 
 logger . debug ( " Created { } " , manifest ) ; 
 } 
 
 @ @ - 347 , 6 + 348 , 8 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy implem 
 
 uncheckedOptions . remove ( SSTABLE _ SIZE _ OPTION ) ; 
 
 + uncheckedOptions = SizeTieredCompactionStrategyOptions . validateOptions ( options , uncheckedOptions ) ; 
 + 
 return uncheckedOptions ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 index 8ae0834 . . fb4244d 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 @ @ - 57 , 11 + 57 , 13 @ @ public class LeveledManifest 
 private final List < SSTableReader > [ ] generations ; 
 private final RowPosition [ ] lastCompactedKeys ; 
 private final int maxSSTableSizeInBytes ; 
 + private final SizeTieredCompactionStrategyOptions options ; 
 
 - private LeveledManifest ( ColumnFamilyStore cfs , int maxSSTableSizeInMB ) 
 + private LeveledManifest ( ColumnFamilyStore cfs , int maxSSTableSizeInMB , SizeTieredCompactionStrategyOptions options ) 
 { 
 this . cfs = cfs ; 
 this . maxSSTableSizeInBytes = maxSSTableSizeInMB * 1024 * 1024 ; 
 + this . options = options ; 
 
 / / allocate enough generations for a PB of data 
 int n = ( int ) Math . log10 ( 1000 * 1000 * 1000 / maxSSTableSizeInMB ) ; 
 @ @ - 74 , 14 + 76 , 14 @ @ public class LeveledManifest 
 } 
 } 
 
 - static LeveledManifest create ( ColumnFamilyStore cfs , int maxSSTableSize ) 
 + public static LeveledManifest create ( ColumnFamilyStore cfs , int maxSSTableSize , List < SSTableReader > sstables ) 
 { 
 - return create ( cfs , maxSSTableSize , cfs . getSSTables ( ) ) ; 
 + return create ( cfs , maxSSTableSize , sstables , new SizeTieredCompactionStrategyOptions ( ) ) ; 
 } 
 
 - public static LeveledManifest create ( ColumnFamilyStore cfs , int maxSSTableSize , Iterable < SSTableReader > sstables ) 
 + public static LeveledManifest create ( ColumnFamilyStore cfs , int maxSSTableSize , Iterable < SSTableReader > sstables , SizeTieredCompactionStrategyOptions options ) 
 { 
 - LeveledManifest manifest = new LeveledManifest ( cfs , maxSSTableSize ) ; 
 + LeveledManifest manifest = new LeveledManifest ( cfs , maxSSTableSize , options ) ; 
 
 / / ensure all SSTables are in the manifest 
 for ( SSTableReader ssTableReader : sstables ) 
 @ @ - 271 , 9 + 273 , 9 @ @ public class LeveledManifest 
 Iterable < SSTableReader > candidates = cfs . getDataTracker ( ) . getUncompactingSSTables ( generations [ 0 ] ) ; 
 List < Pair < SSTableReader , Long > > pairs = SizeTieredCompactionStrategy . createSSTableAndLengthPairs ( AbstractCompactionStrategy . filterSuspectSSTables ( candidates ) ) ; 
 List < List < SSTableReader > > buckets = SizeTieredCompactionStrategy . getBuckets ( pairs , 
 - SizeTieredCompactionStrategy . DEFAULT _ BUCKET _ HIGH , 
 - SizeTieredCompactionStrategy . DEFAULT _ BUCKET _ LOW , 
 - SizeTieredCompactionStrategy . DEFAULT _ MIN _ SSTABLE _ SIZE ) ; 
 + options . bucketHigh , 
 + options . bucketLow , 
 + options . minSSTableSize ) ; 
 List < SSTableReader > mostInteresting = SizeTieredCompactionStrategy . mostInterestingBucket ( buckets , 4 , 32 ) ; 
 if ( ! mostInteresting . isEmpty ( ) ) 
 return Pair . create ( mostInteresting , 0 ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 index ae6f627 . . 3678184 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 @ @ - 34 , 28 + 34 , 15 @ @ import org . apache . cassandra . utils . Pair ; 
 public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( SizeTieredCompactionStrategy . class ) ; 
 - protected static final long DEFAULT _ MIN _ SSTABLE _ SIZE = 50L * 1024L * 1024L ; 
 - protected static final double DEFAULT _ BUCKET _ LOW = 0 . 5 ; 
 - protected static final double DEFAULT _ BUCKET _ HIGH = 1 . 5 ; 
 - protected static final String MIN _ SSTABLE _ SIZE _ KEY = " min _ sstable _ size " ; 
 - protected static final String BUCKET _ LOW _ KEY = " bucket _ low " ; 
 - protected static final String BUCKET _ HIGH _ KEY = " bucket _ high " ; 
 - 
 - protected long minSSTableSize ; 
 - protected double bucketLow ; 
 - protected double bucketHigh ; 
 + 
 + protected SizeTieredCompactionStrategyOptions options ; 
 protected volatile int estimatedRemainingTasks ; 
 
 public SizeTieredCompactionStrategy ( ColumnFamilyStore cfs , Map < String , String > options ) 
 { 
 super ( cfs , options ) ; 
 this . estimatedRemainingTasks = 0 ; 
 - String optionValue = options . get ( MIN _ SSTABLE _ SIZE _ KEY ) ; 
 - minSSTableSize = optionValue = = null ? DEFAULT _ MIN _ SSTABLE _ SIZE : Long . parseLong ( optionValue ) ; 
 - optionValue = options . get ( BUCKET _ LOW _ KEY ) ; 
 - bucketLow = optionValue = = null ? DEFAULT _ BUCKET _ LOW : Double . parseDouble ( optionValue ) ; 
 - optionValue = options . get ( BUCKET _ HIGH _ KEY ) ; 
 - bucketHigh = optionValue = = null ? DEFAULT _ BUCKET _ HIGH : Double . parseDouble ( optionValue ) ; 
 + this . options = new SizeTieredCompactionStrategyOptions ( options ) ; 
 } 
 
 private List < SSTableReader > getNextBackgroundSSTables ( final int gcBefore ) 
 @ @ - 68 , 7 + 55 , 7 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy 
 int maxThreshold = cfs . getMaximumCompactionThreshold ( ) ; 
 
 Set < SSTableReader > candidates = cfs . getUncompactingSSTables ( ) ; 
 - List < List < SSTableReader > > buckets = getBuckets ( createSSTableAndLengthPairs ( filterSuspectSSTables ( candidates ) ) , bucketHigh , bucketLow , minSSTableSize ) ; 
 + List < List < SSTableReader > > buckets = getBuckets ( createSSTableAndLengthPairs ( filterSuspectSSTables ( candidates ) ) , options . bucketHigh , options . bucketLow , options . minSSTableSize ) ; 
 logger . debug ( " Compaction buckets are { } " , buckets ) ; 
 updateEstimatedCompactionsByTasks ( buckets ) ; 
 List < SSTableReader > mostInteresting = mostInterestingBucket ( buckets , minThreshold , maxThreshold ) ; 
 @ @ - 252 , 50 + 239 , 8 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy 
 public static Map < String , String > validateOptions ( Map < String , String > options ) throws ConfigurationException 
 { 
 Map < String , String > uncheckedOptions = AbstractCompactionStrategy . validateOptions ( options ) ; 
 + uncheckedOptions = SizeTieredCompactionStrategyOptions . validateOptions ( options , uncheckedOptions ) ; 
 
 - String optionValue = options . get ( MIN _ SSTABLE _ SIZE _ KEY ) ; 
 - try 
 - { 
 - long minSSTableSize = optionValue = = null ? DEFAULT _ MIN _ SSTABLE _ SIZE : Long . parseLong ( optionValue ) ; 
 - if ( minSSTableSize < 0 ) 
 - { 
 - throw new ConfigurationException ( String . format ( " % s must be non negative : % d " , MIN _ SSTABLE _ SIZE _ KEY , minSSTableSize ) ) ; 
 - } 
 - } 
 - catch ( NumberFormatException e ) 
 - { 
 - throw new ConfigurationException ( String . format ( " % s is not a parsable int ( base10 ) for % s " , optionValue , MIN _ SSTABLE _ SIZE _ KEY ) , e ) ; 
 - } 
 - 
 - double bucketLow , bucketHigh ; 
 - optionValue = options . get ( BUCKET _ LOW _ KEY ) ; 
 - try 
 - { 
 - bucketLow = optionValue = = null ? DEFAULT _ BUCKET _ LOW : Double . parseDouble ( optionValue ) ; 
 - } 
 - catch ( NumberFormatException e ) 
 - { 
 - throw new ConfigurationException ( String . format ( " % s is not a parsable int ( base10 ) for % s " , optionValue , DEFAULT _ BUCKET _ LOW ) , e ) ; 
 - } 
 - 
 - optionValue = options . get ( BUCKET _ HIGH _ KEY ) ; 
 - try 
 - { 
 - bucketHigh = optionValue = = null ? DEFAULT _ BUCKET _ HIGH : Double . parseDouble ( optionValue ) ; 
 - } 
 - catch ( NumberFormatException e ) 
 - { 
 - throw new ConfigurationException ( String . format ( " % s is not a parsable int ( base10 ) for % s " , optionValue , DEFAULT _ BUCKET _ HIGH ) , e ) ; 
 - } 
 - 
 - if ( bucketHigh < = bucketLow ) 
 - { 
 - throw new ConfigurationException ( String . format ( " Bucket high value ( % s ) is less than or equal bucket low value ( % s ) " , bucketHigh , bucketLow ) ) ; 
 - } 
 - 
 - uncheckedOptions . remove ( MIN _ SSTABLE _ SIZE _ KEY ) ; 
 - uncheckedOptions . remove ( BUCKET _ LOW _ KEY ) ; 
 - uncheckedOptions . remove ( BUCKET _ HIGH _ KEY ) ; 
 uncheckedOptions . remove ( CFPropDefs . KW _ MINCOMPACTIONTHRESHOLD ) ; 
 uncheckedOptions . remove ( CFPropDefs . KW _ MAXCOMPACTIONTHRESHOLD ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 index 34a8a72 . . c9d39bb 100644 
 - - - a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 + + + b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . io . File ; 
 import java . io . IOException ; 
 import java . util . * ; 
 
 + import org . apache . cassandra . db . compaction . SizeTieredCompactionStrategyOptions ; 
 import org . apache . commons . cli . * ; 
 
 import org . apache . cassandra . config . DatabaseDescriptor ;
