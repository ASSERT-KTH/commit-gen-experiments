BLEU SCORE: 0.05693025330278466

TEST MSG: Fix write meter for cqlsh COPY TO
GENERATED MSG: cqlsh : Add row count to SELECT output

TEST DIFF (one line): diff - - git a / bin / cqlsh b / bin / cqlsh <nl> index 05f3368 . . 903cb72 100755 <nl> - - - a / bin / cqlsh <nl> + + + b / bin / cqlsh <nl> @ @ - 1417 , 7 + 1417 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> raise SyntaxError ( " Unknown direction % s " % direction ) <nl> <nl> timeend = time . time ( ) <nl> - print " % d rows % s in % s . " % ( rows , verb , describe _ interval ( timeend - timestart ) ) <nl> + print " \ n % d rows % s in % s . " % ( rows , verb , describe _ interval ( timeend - timestart ) ) <nl> <nl> def perform _ csv _ import ( self , ks , cf , columns , fname , opts ) : <nl> dialect _ options = self . csv _ dialect _ defaults . copy ( ) <nl> @ @ - 1476 , 28 + 1476 , 13 @ @ class Shell ( cmd . Cmd ) : <nl> for process in processes : <nl> process . start ( ) <nl> <nl> - last _ checkpoint _ time = time . time ( ) <nl> - current _ rate = 0 . 0 <nl> + meter = RateMeter ( 10000 ) <nl> for current _ record , row in enumerate ( reader , start = 1 ) : <nl> # write to the child process <nl> pipes [ current _ record % num _ processes ] . send ( ( current _ record , row ) ) <nl> <nl> # update the progress and current rate periodically <nl> - if ( current _ record % 10000 ) = = 0 : <nl> - new _ checkpoint _ time = time . time ( ) <nl> - new _ rate = 10000 . 0 / ( new _ checkpoint _ time - last _ checkpoint _ time ) <nl> - last _ checkpoint _ time = new _ checkpoint _ time <nl> - <nl> - # smooth the rate a bit <nl> - if current _ rate = = 0 . 0 : <nl> - current _ rate = new _ rate <nl> - else : <nl> - current _ rate = ( current _ rate + new _ rate ) / 2 . 0 <nl> - <nl> - output = ' Processed % s rows ; Write : % . 2f rows / s \ r ' % \ <nl> - ( current _ record , current _ rate ) <nl> - sys . stdout . write ( output ) <nl> - sys . stdout . flush ( ) <nl> + meter . increment ( ) <nl> <nl> # check for any errors reported by the children <nl> if ( current _ record % 100 ) = = 0 : <nl> @ @ - 1723 , 7 + 1708 , 8 @ @ class Shell ( cmd . Cmd ) : <nl> except IOError , e : <nl> self . printerr ( " Can ' t open % r for writing : % s " % ( fname , e ) ) <nl> return 0 <nl> - wmeter = meter . Meter ( ) <nl> + <nl> + meter = RateMeter ( 10000 ) <nl> try : <nl> <nl> dump = self . prep _ export _ dump ( ks , cf , columns ) <nl> @ @ - 1736 , 12 + 1722 , 11 @ @ class Shell ( cmd . Cmd ) : <nl> time _ format = self . display _ time _ format , <nl> float _ precision = self . display _ float _ precision ) . strval <nl> writer . writerow ( map ( fmt , row . values ( ) ) ) <nl> - wmeter . mark _ written ( ) <nl> - wmeter . done ( ) <nl> + meter . increment ( ) <nl> finally : <nl> if do _ close : <nl> csvdest . close ( ) <nl> - return wmeter . num _ finished ( ) <nl> + return meter . current _ record <nl> <nl> def prep _ export _ dump ( self , ks , cf , columns ) : <nl> if columns is None : <nl> @ @ - 2040 , 6 + 2025 , 34 @ @ class Shell ( cmd . Cmd ) : <nl> self . writeresult ( text , color , newline = newline , out = sys . stderr ) <nl> <nl> <nl> + class RateMeter ( object ) : <nl> + <nl> + def _ _ init _ _ ( self , log _ rate ) : <nl> + self . log _ rate = log _ rate <nl> + self . last _ checkpoint _ time = time . time ( ) <nl> + self . current _ rate = 0 . 0 <nl> + self . current _ record = 0 <nl> + <nl> + def increment ( self ) : <nl> + self . current _ record + = 1 <nl> + <nl> + if ( self . current _ record % self . log _ rate ) = = 0 : <nl> + new _ checkpoint _ time = time . time ( ) <nl> + new _ rate = self . log _ rate / ( new _ checkpoint _ time - self . last _ checkpoint _ time ) <nl> + self . last _ checkpoint _ time = new _ checkpoint _ time <nl> + <nl> + # smooth the rate a bit <nl> + if self . current _ rate = = 0 . 0 : <nl> + self . current _ rate = new _ rate <nl> + else : <nl> + self . current _ rate = ( self . current _ rate + new _ rate ) / 2 . 0 <nl> + <nl> + output = ' Processed % s rows ; Write : % . 2f rows / s \ r ' % \ <nl> + ( self . current _ record , self . current _ rate ) <nl> + sys . stdout . write ( output ) <nl> + sys . stdout . flush ( ) <nl> + <nl> + <nl> class SwitchCommand ( object ) : <nl> command = None <nl> description = None <nl> diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ completion . py b / pylib / cqlshlib / test / test _ cqlsh _ completion . py <nl> index 2d22a63 . . 97bd96b 100644 <nl> - - - a / pylib / cqlshlib / test / test _ cqlsh _ completion . py <nl> + + + b / pylib / cqlshlib / test / test _ cqlsh _ completion . py <nl> @ @ - 23 , 7 + 23 , 7 @ @ import re <nl> from . basecase import BaseTestCase , cqlsh <nl> from . cassconnect import testrun _ cqlsh <nl> <nl> - BEL = ' \ x07 ' # the terminal - bell character <nl> + BEL = ' \ x07 ' # the terminal - bell character <nl> CTRL _ C = ' \ x03 ' <nl> TAB = ' \ t ' <nl> <nl> @ @ - 35 , 6 + 35 , 7 @ @ COMPLETION _ RESPONSE _ TIME = 0 . 5 <nl> <nl> completion _ separation _ re = re . compile ( r ' \ s + ' ) <nl> <nl> + <nl> class CqlshCompletionCase ( BaseTestCase ) : <nl> def setUp ( self ) : <nl> self . cqlsh _ runner = testrun _ cqlsh ( cqlver = cqlsh . DEFAULT _ CQLVER , env = { ' COLUMNS ' : ' 100000 ' } ) <nl> @ @ - 67 , 7 + 68 , 7 @ @ class CqlshCompletionCase ( BaseTestCase ) : <nl> if choice _ output = = BEL : <nl> choice _ output = ' ' <nl> <nl> - self . cqlsh . send ( CTRL _ C ) # cancel any current line <nl> + self . cqlsh . send ( CTRL _ C ) # cancel any current line <nl> self . cqlsh . read _ to _ next _ prompt ( ) <nl> <nl> choice _ lines = choice _ output . splitlines ( ) <nl> @ @ - 127 , 12 + 128 , 13 @ @ class CqlshCompletionCase ( BaseTestCase ) : <nl> other _ choices _ ok = other _ choices _ ok , <nl> split _ completed _ lines = split _ completed _ lines ) <nl> finally : <nl> - self . cqlsh . send ( CTRL _ C ) # cancel any current line <nl> + self . cqlsh . send ( CTRL _ C ) # cancel any current line <nl> self . cqlsh . read _ to _ next _ prompt ( ) <nl> <nl> def strategies ( self ) : <nl> return self . module . CqlRuleSet . replication _ strategies <nl> <nl> + <nl> class TestCqlshCompletion ( CqlshCompletionCase ) : <nl> cqlver = ' 3 . 1 . 6 ' <nl> module = cqlsh . cql3handling <nl> @ @ - 162 , 7 + 164 , 6 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : <nl> ' users ' , <nl> ' has _ all _ types ' , <nl> ' system . ' , <nl> - ' system _ auth . ' , <nl> ' empty _ composite _ table ' , <nl> ' empty _ table ' , <nl> ' undefined _ values _ table ' , <nl> @ @ - 173 , 9 + 174 , 9 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : <nl> ' songs ' ) , <nl> other _ choices _ ok = True ) <nl> self . trycompletions ( ' INSERT INTO twenty _ rows _ composite _ table ' , <nl> - immediate = ' ' ) <nl> + immediate = ' ( a , b ' ) <nl> self . trycompletions ( ' INSERT INTO twenty _ rows _ composite _ table ' , <nl> - choices = [ ' ( ' , ' JSON ' ] ) <nl> + immediate = ' ( a , b ' ) <nl> self . trycompletions ( ' INSERT INTO twenty _ rows _ composite _ table ( a , b ' , <nl> choices = ( ' ) ' , ' , ' ) ) <nl> self . trycompletions ( ' INSERT INTO twenty _ rows _ composite _ table ( a , b , ' , <nl> @ @ - 301 , 18 + 302 , 17 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : <nl> " VALUES ( ' eggs ' , ' sausage ' , ' spam ' ) USING TTL 0 AND TIMESTAMP 0 AND " ) , <nl> choices = [ ] ) <nl> <nl> - <nl> def test _ complete _ in _ update ( self ) : <nl> self . trycompletions ( " UPD " , immediate = " ATE " ) <nl> self . trycompletions ( " UPDATE " , <nl> - choices = [ ' twenty _ rows _ table ' , ' system _ auth . ' , <nl> + choices = [ ' twenty _ rows _ table ' , <nl> ' users ' , ' has _ all _ types ' , ' system . ' , <nl> ' ascii _ with _ special _ chars ' , <nl> ' empty _ composite _ table ' , ' empty _ table ' , <nl> ' undefined _ values _ table ' , <nl> ' dynamic _ columns ' , <nl> ' twenty _ rows _ composite _ table ' , <nl> - ' utf8 _ with _ special _ chars ' , ' ks . ' , <nl> + ' utf8 _ with _ special _ chars ' , <nl> ' system _ traces . ' , ' songs ' ] , <nl> other _ choices _ ok = True ) <nl> <nl> @ @ - 346 , 7 + 346 , 7 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : <nl> self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' WHERE lonel " , <nl> choices = [ ' < quotedName > ' , ' < identifier > ' ] ) <nl> self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' WHERE lonelykey " , <nl> - choices = [ ' = ' , ' < = ' , ' > = ' , ' > ' , ' < ' , ' CONTAINS ' , ' IN ' , ' [ ' ] ) <nl> + choices = [ ' = ' , ' < = ' , ' > = ' , ' > ' , ' < ' , ' CONTAINS ' , ' IN ' ] ) <nl> self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' WHERE lonelykey = 0 . 0 " , <nl> choices = [ ' AND ' , ' IF ' , ' ; ' ] ) <nl> self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' WHERE lonelykey = 0 . 0 AND " ,
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cli / CliOptions . java b / src / java / org / apache / cassandra / cli / CliOptions . java <nl> index cb58ddc . . f64cceb 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliOptions . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliOptions . java <nl> @ @ - 80 , 7 + 80 , 7 @ @ public class CliOptions <nl> <nl> / / ssl connection - related options <nl> options . addOption ( " ts " , SSL _ TRUSTSTORE , " TRUSTSTORE " , " SSL : full path to truststore " ) ; <nl> - options . addOption ( " tspw " , SSL _ TRUSTSTORE _ PW , " TRUSTSTORE - PASSWORD " , " SSL : full path to truststore " ) ; <nl> + options . addOption ( " tspw " , SSL _ TRUSTSTORE _ PW , " TRUSTSTORE - PASSWORD " , " SSL : password of the truststore " ) ; <nl> options . addOption ( " prtcl " , SSL _ PROTOCOL , " PROTOCOL " , " SSL : connections protocol to use ( default : TLS ) " ) ; <nl> options . addOption ( " alg " , SSL _ ALGORITHM , " ALGORITHM " , " SSL : algorithm ( default : SunX509 ) " ) ; <nl> options . addOption ( " st " , SSL _ STORE _ TYPE , " STORE - TYPE " , " SSL : type of store " ) ;

TEST DIFF:
diff - - git a / bin / cqlsh b / bin / cqlsh 
 index 05f3368 . . 903cb72 100755 
 - - - a / bin / cqlsh 
 + + + b / bin / cqlsh 
 @ @ - 1417 , 7 + 1417 , 7 @ @ class Shell ( cmd . Cmd ) : 
 raise SyntaxError ( " Unknown direction % s " % direction ) 
 
 timeend = time . time ( ) 
 - print " % d rows % s in % s . " % ( rows , verb , describe _ interval ( timeend - timestart ) ) 
 + print " \ n % d rows % s in % s . " % ( rows , verb , describe _ interval ( timeend - timestart ) ) 
 
 def perform _ csv _ import ( self , ks , cf , columns , fname , opts ) : 
 dialect _ options = self . csv _ dialect _ defaults . copy ( ) 
 @ @ - 1476 , 28 + 1476 , 13 @ @ class Shell ( cmd . Cmd ) : 
 for process in processes : 
 process . start ( ) 
 
 - last _ checkpoint _ time = time . time ( ) 
 - current _ rate = 0 . 0 
 + meter = RateMeter ( 10000 ) 
 for current _ record , row in enumerate ( reader , start = 1 ) : 
 # write to the child process 
 pipes [ current _ record % num _ processes ] . send ( ( current _ record , row ) ) 
 
 # update the progress and current rate periodically 
 - if ( current _ record % 10000 ) = = 0 : 
 - new _ checkpoint _ time = time . time ( ) 
 - new _ rate = 10000 . 0 / ( new _ checkpoint _ time - last _ checkpoint _ time ) 
 - last _ checkpoint _ time = new _ checkpoint _ time 
 - 
 - # smooth the rate a bit 
 - if current _ rate = = 0 . 0 : 
 - current _ rate = new _ rate 
 - else : 
 - current _ rate = ( current _ rate + new _ rate ) / 2 . 0 
 - 
 - output = ' Processed % s rows ; Write : % . 2f rows / s \ r ' % \ 
 - ( current _ record , current _ rate ) 
 - sys . stdout . write ( output ) 
 - sys . stdout . flush ( ) 
 + meter . increment ( ) 
 
 # check for any errors reported by the children 
 if ( current _ record % 100 ) = = 0 : 
 @ @ - 1723 , 7 + 1708 , 8 @ @ class Shell ( cmd . Cmd ) : 
 except IOError , e : 
 self . printerr ( " Can ' t open % r for writing : % s " % ( fname , e ) ) 
 return 0 
 - wmeter = meter . Meter ( ) 
 + 
 + meter = RateMeter ( 10000 ) 
 try : 
 
 dump = self . prep _ export _ dump ( ks , cf , columns ) 
 @ @ - 1736 , 12 + 1722 , 11 @ @ class Shell ( cmd . Cmd ) : 
 time _ format = self . display _ time _ format , 
 float _ precision = self . display _ float _ precision ) . strval 
 writer . writerow ( map ( fmt , row . values ( ) ) ) 
 - wmeter . mark _ written ( ) 
 - wmeter . done ( ) 
 + meter . increment ( ) 
 finally : 
 if do _ close : 
 csvdest . close ( ) 
 - return wmeter . num _ finished ( ) 
 + return meter . current _ record 
 
 def prep _ export _ dump ( self , ks , cf , columns ) : 
 if columns is None : 
 @ @ - 2040 , 6 + 2025 , 34 @ @ class Shell ( cmd . Cmd ) : 
 self . writeresult ( text , color , newline = newline , out = sys . stderr ) 
 
 
 + class RateMeter ( object ) : 
 + 
 + def _ _ init _ _ ( self , log _ rate ) : 
 + self . log _ rate = log _ rate 
 + self . last _ checkpoint _ time = time . time ( ) 
 + self . current _ rate = 0 . 0 
 + self . current _ record = 0 
 + 
 + def increment ( self ) : 
 + self . current _ record + = 1 
 + 
 + if ( self . current _ record % self . log _ rate ) = = 0 : 
 + new _ checkpoint _ time = time . time ( ) 
 + new _ rate = self . log _ rate / ( new _ checkpoint _ time - self . last _ checkpoint _ time ) 
 + self . last _ checkpoint _ time = new _ checkpoint _ time 
 + 
 + # smooth the rate a bit 
 + if self . current _ rate = = 0 . 0 : 
 + self . current _ rate = new _ rate 
 + else : 
 + self . current _ rate = ( self . current _ rate + new _ rate ) / 2 . 0 
 + 
 + output = ' Processed % s rows ; Write : % . 2f rows / s \ r ' % \ 
 + ( self . current _ record , self . current _ rate ) 
 + sys . stdout . write ( output ) 
 + sys . stdout . flush ( ) 
 + 
 + 
 class SwitchCommand ( object ) : 
 command = None 
 description = None 
 diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ completion . py b / pylib / cqlshlib / test / test _ cqlsh _ completion . py 
 index 2d22a63 . . 97bd96b 100644 
 - - - a / pylib / cqlshlib / test / test _ cqlsh _ completion . py 
 + + + b / pylib / cqlshlib / test / test _ cqlsh _ completion . py 
 @ @ - 23 , 7 + 23 , 7 @ @ import re 
 from . basecase import BaseTestCase , cqlsh 
 from . cassconnect import testrun _ cqlsh 
 
 - BEL = ' \ x07 ' # the terminal - bell character 
 + BEL = ' \ x07 ' # the terminal - bell character 
 CTRL _ C = ' \ x03 ' 
 TAB = ' \ t ' 
 
 @ @ - 35 , 6 + 35 , 7 @ @ COMPLETION _ RESPONSE _ TIME = 0 . 5 
 
 completion _ separation _ re = re . compile ( r ' \ s + ' ) 
 
 + 
 class CqlshCompletionCase ( BaseTestCase ) : 
 def setUp ( self ) : 
 self . cqlsh _ runner = testrun _ cqlsh ( cqlver = cqlsh . DEFAULT _ CQLVER , env = { ' COLUMNS ' : ' 100000 ' } ) 
 @ @ - 67 , 7 + 68 , 7 @ @ class CqlshCompletionCase ( BaseTestCase ) : 
 if choice _ output = = BEL : 
 choice _ output = ' ' 
 
 - self . cqlsh . send ( CTRL _ C ) # cancel any current line 
 + self . cqlsh . send ( CTRL _ C ) # cancel any current line 
 self . cqlsh . read _ to _ next _ prompt ( ) 
 
 choice _ lines = choice _ output . splitlines ( ) 
 @ @ - 127 , 12 + 128 , 13 @ @ class CqlshCompletionCase ( BaseTestCase ) : 
 other _ choices _ ok = other _ choices _ ok , 
 split _ completed _ lines = split _ completed _ lines ) 
 finally : 
 - self . cqlsh . send ( CTRL _ C ) # cancel any current line 
 + self . cqlsh . send ( CTRL _ C ) # cancel any current line 
 self . cqlsh . read _ to _ next _ prompt ( ) 
 
 def strategies ( self ) : 
 return self . module . CqlRuleSet . replication _ strategies 
 
 + 
 class TestCqlshCompletion ( CqlshCompletionCase ) : 
 cqlver = ' 3 . 1 . 6 ' 
 module = cqlsh . cql3handling 
 @ @ - 162 , 7 + 164 , 6 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : 
 ' users ' , 
 ' has _ all _ types ' , 
 ' system . ' , 
 - ' system _ auth . ' , 
 ' empty _ composite _ table ' , 
 ' empty _ table ' , 
 ' undefined _ values _ table ' , 
 @ @ - 173 , 9 + 174 , 9 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : 
 ' songs ' ) , 
 other _ choices _ ok = True ) 
 self . trycompletions ( ' INSERT INTO twenty _ rows _ composite _ table ' , 
 - immediate = ' ' ) 
 + immediate = ' ( a , b ' ) 
 self . trycompletions ( ' INSERT INTO twenty _ rows _ composite _ table ' , 
 - choices = [ ' ( ' , ' JSON ' ] ) 
 + immediate = ' ( a , b ' ) 
 self . trycompletions ( ' INSERT INTO twenty _ rows _ composite _ table ( a , b ' , 
 choices = ( ' ) ' , ' , ' ) ) 
 self . trycompletions ( ' INSERT INTO twenty _ rows _ composite _ table ( a , b , ' , 
 @ @ - 301 , 18 + 302 , 17 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : 
 " VALUES ( ' eggs ' , ' sausage ' , ' spam ' ) USING TTL 0 AND TIMESTAMP 0 AND " ) , 
 choices = [ ] ) 
 
 - 
 def test _ complete _ in _ update ( self ) : 
 self . trycompletions ( " UPD " , immediate = " ATE " ) 
 self . trycompletions ( " UPDATE " , 
 - choices = [ ' twenty _ rows _ table ' , ' system _ auth . ' , 
 + choices = [ ' twenty _ rows _ table ' , 
 ' users ' , ' has _ all _ types ' , ' system . ' , 
 ' ascii _ with _ special _ chars ' , 
 ' empty _ composite _ table ' , ' empty _ table ' , 
 ' undefined _ values _ table ' , 
 ' dynamic _ columns ' , 
 ' twenty _ rows _ composite _ table ' , 
 - ' utf8 _ with _ special _ chars ' , ' ks . ' , 
 + ' utf8 _ with _ special _ chars ' , 
 ' system _ traces . ' , ' songs ' ] , 
 other _ choices _ ok = True ) 
 
 @ @ - 346 , 7 + 346 , 7 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : 
 self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' WHERE lonel " , 
 choices = [ ' < quotedName > ' , ' < identifier > ' ] ) 
 self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' WHERE lonelykey " , 
 - choices = [ ' = ' , ' < = ' , ' > = ' , ' > ' , ' < ' , ' CONTAINS ' , ' IN ' , ' [ ' ] ) 
 + choices = [ ' = ' , ' < = ' , ' > = ' , ' > ' , ' < ' , ' CONTAINS ' , ' IN ' ] ) 
 self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' WHERE lonelykey = 0 . 0 " , 
 choices = [ ' AND ' , ' IF ' , ' ; ' ] ) 
 self . trycompletions ( " UPDATE empty _ table SET lonelycol = ' eggs ' WHERE lonelykey = 0 . 0 AND " ,

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cli / CliOptions . java b / src / java / org / apache / cassandra / cli / CliOptions . java 
 index cb58ddc . . f64cceb 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliOptions . java 
 + + + b / src / java / org / apache / cassandra / cli / CliOptions . java 
 @ @ - 80 , 7 + 80 , 7 @ @ public class CliOptions 
 
 / / ssl connection - related options 
 options . addOption ( " ts " , SSL _ TRUSTSTORE , " TRUSTSTORE " , " SSL : full path to truststore " ) ; 
 - options . addOption ( " tspw " , SSL _ TRUSTSTORE _ PW , " TRUSTSTORE - PASSWORD " , " SSL : full path to truststore " ) ; 
 + options . addOption ( " tspw " , SSL _ TRUSTSTORE _ PW , " TRUSTSTORE - PASSWORD " , " SSL : password of the truststore " ) ; 
 options . addOption ( " prtcl " , SSL _ PROTOCOL , " PROTOCOL " , " SSL : connections protocol to use ( default : TLS ) " ) ; 
 options . addOption ( " alg " , SSL _ ALGORITHM , " ALGORITHM " , " SSL : algorithm ( default : SunX509 ) " ) ; 
 options . addOption ( " st " , SSL _ STORE _ TYPE , " STORE - TYPE " , " SSL : type of store " ) ;
