BLEU SCORE: 0.027611988917697356

TEST MSG: Avoid boxing in ColumnStats min / max trackers
GENERATED MSG: merge from 0 . 7

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 5882080 . . 4dfb81d 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> 2 . 1 . 2 <nl> * Fix CREATE TABLE for CQL2 ( CASSANDRA - 8144 ) <nl> + * Avoid boxing in ColumnStats min / max trackers ( CASSANDRA - 8109 ) <nl> <nl> <nl> 2 . 1 . 1 <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 38b39fe . . 483ecb0 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 399 , 10 + 399 , 10 @ @ public abstract class ColumnFamily implements Iterable < Cell > , IRowCacheEntry <nl> / / note that we default to MIN _ VALUE / MAX _ VALUE here to be able to override them later in this method <nl> / / we are checking row / range tombstones and actual cells - there should always be data that overrides <nl> / / these with actual values <nl> - ColumnStats . MinTracker < Long > minTimestampTracker = new ColumnStats . MinTracker < > ( Long . MIN _ VALUE ) ; <nl> - ColumnStats . MaxTracker < Long > maxTimestampTracker = new ColumnStats . MaxTracker < > ( Long . MAX _ VALUE ) ; <nl> + ColumnStats . MinLongTracker minTimestampTracker = new ColumnStats . MinLongTracker ( Long . MIN _ VALUE ) ; <nl> + ColumnStats . MaxLongTracker maxTimestampTracker = new ColumnStats . MaxLongTracker ( Long . MAX _ VALUE ) ; <nl> StreamingHistogram tombstones = new StreamingHistogram ( SSTable . TOMBSTONE _ HISTOGRAM _ BIN _ SIZE ) ; <nl> - ColumnStats . MaxTracker < Integer > maxDeletionTimeTracker = new ColumnStats . MaxTracker < > ( Integer . MAX _ VALUE ) ; <nl> + ColumnStats . MaxIntTracker maxDeletionTimeTracker = new ColumnStats . MaxIntTracker ( Integer . MAX _ VALUE ) ; <nl> List < ByteBuffer > minColumnNamesSeen = Collections . emptyList ( ) ; <nl> List < ByteBuffer > maxColumnNamesSeen = Collections . emptyList ( ) ; <nl> boolean hasLegacyCounterShards = false ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java b / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java <nl> index fa59dba . . cfdbd17 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java <nl> @ @ - 198 , 11 + 198 , 11 @ @ public class LazilyCompactedRow extends AbstractCompactedRow <nl> / / if the row tombstone is ' live ' we need to set timestamp to MAX _ VALUE to be able to overwrite it later <nl> / / markedForDeleteAt is MIN _ VALUE for ' live ' row tombstones ( which we use to default maxTimestampSeen ) <nl> <nl> - ColumnStats . MinTracker < Long > minTimestampTracker = new ColumnStats . MinTracker < > ( Long . MIN _ VALUE ) ; <nl> - ColumnStats . MaxTracker < Long > maxTimestampTracker = new ColumnStats . MaxTracker < > ( Long . MAX _ VALUE ) ; <nl> + ColumnStats . MinLongTracker minTimestampTracker = new ColumnStats . MinLongTracker ( Long . MIN _ VALUE ) ; <nl> + ColumnStats . MaxLongTracker maxTimestampTracker = new ColumnStats . MaxLongTracker ( Long . MAX _ VALUE ) ; <nl> / / we need to set MIN _ VALUE if we are ' live ' since we want to overwrite it later <nl> / / we are bound to have either a RangeTombstone or standard cells will set this properly : <nl> - ColumnStats . MaxTracker < Integer > maxDeletionTimeTracker = new ColumnStats . MaxTracker < > ( Integer . MAX _ VALUE ) ; <nl> + ColumnStats . MaxIntTracker maxDeletionTimeTracker = new ColumnStats . MaxIntTracker ( Integer . MAX _ VALUE ) ; <nl> <nl> StreamingHistogram tombstones = new StreamingHistogram ( SSTable . TOMBSTONE _ HISTOGRAM _ BIN _ SIZE ) ; <nl> List < ByteBuffer > minColumnNameSeen = Collections . emptyList ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / ColumnStats . java b / src / java / org / apache / cassandra / io / sstable / ColumnStats . java <nl> index 873aa09 . . 83a16c9 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / ColumnStats . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / ColumnStats . java <nl> @ @ - 18 , 7 + 18 , 6 @ @ <nl> package org . apache . cassandra . io . sstable ; <nl> <nl> import java . nio . ByteBuffer ; <nl> - import java . util . Comparator ; <nl> import java . util . List ; <nl> <nl> import org . apache . cassandra . utils . StreamingHistogram ; <nl> @ @ - 63 , 18 + 62 , 19 @ @ public class ColumnStats <nl> this . hasLegacyCounterShards = hasLegacyCounterShards ; <nl> } <nl> <nl> - public static class MinTracker < T extends Comparable < T > > <nl> + / / We use explicit classes for ints and longs instead of generics to avoid boxing and unboxing ( See CASSANDRA - 8109 ) <nl> + public static class MinLongTracker <nl> { <nl> - private final T defaultValue ; <nl> + private final long defaultValue ; <nl> private boolean isSet = false ; <nl> - private T value ; <nl> + private long value ; <nl> <nl> - public MinTracker ( T defaultValue ) <nl> + public MinLongTracker ( long defaultValue ) <nl> { <nl> this . defaultValue = defaultValue ; <nl> } <nl> <nl> - public void update ( T value ) <nl> + public void update ( long value ) <nl> { <nl> if ( ! isSet ) <nl> { <nl> @ @ - 83 , 12 + 83 , 12 @ @ public class ColumnStats <nl> } <nl> else <nl> { <nl> - if ( value . compareTo ( this . value ) < 0 ) <nl> + if ( value < this . value ) <nl> this . value = value ; <nl> } <nl> } <nl> <nl> - public T get ( ) <nl> + public long get ( ) <nl> { <nl> if ( isSet ) <nl> return value ; <nl> @ @ - 96 , 18 + 96 , 18 @ @ public class ColumnStats <nl> } <nl> } <nl> <nl> - public static class MaxTracker < T extends Comparable < T > > <nl> + public static class MaxLongTracker <nl> { <nl> - private final T defaultValue ; <nl> + private final long defaultValue ; <nl> private boolean isSet = false ; <nl> - private T value ; <nl> + private long value ; <nl> <nl> - public MaxTracker ( T defaultValue ) <nl> + public MaxLongTracker ( long defaultValue ) <nl> { <nl> this . defaultValue = defaultValue ; <nl> } <nl> <nl> - public void update ( T value ) <nl> + public void update ( long value ) <nl> { <nl> if ( ! isSet ) <nl> { <nl> @ @ - 116 , 16 + 116 , 50 @ @ public class ColumnStats <nl> } <nl> else <nl> { <nl> - if ( value . compareTo ( this . value ) > 0 ) <nl> + if ( value > this . value ) <nl> this . value = value ; <nl> } <nl> } <nl> <nl> - public T get ( ) <nl> + public long get ( ) <nl> { <nl> if ( isSet ) <nl> return value ; <nl> return defaultValue ; <nl> } <nl> } <nl> + <nl> + public static class MaxIntTracker <nl> + { <nl> + private final int defaultValue ; <nl> + private boolean isSet = false ; <nl> + private int value ; <nl> + <nl> + public MaxIntTracker ( int defaultValue ) <nl> + { <nl> + this . defaultValue = defaultValue ; <nl> + } <nl> + <nl> + public void update ( int value ) <nl> + { <nl> + if ( ! isSet ) <nl> + { <nl> + this . value = value ; <nl> + isSet = true ; <nl> + } <nl> + else <nl> + { <nl> + if ( value > this . value ) <nl> + this . value = value ; <nl> + } <nl> + } <nl> + <nl> + public int get ( ) <nl> + { <nl> + if ( isSet ) <nl> + return value ; <nl> + return defaultValue ; <nl> + } <nl> + } <nl> + <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> index e92803a . . 50c2ca3 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> @ @ - 244 , 9 + 244 , 9 @ @ public class SSTableWriter extends SSTable <nl> { <nl> long currentPosition = beforeAppend ( key ) ; <nl> <nl> - ColumnStats . MaxTracker < Long > maxTimestampTracker = new ColumnStats . MaxTracker < > ( Long . MAX _ VALUE ) ; <nl> - ColumnStats . MinTracker < Long > minTimestampTracker = new ColumnStats . MinTracker < > ( Long . MIN _ VALUE ) ; <nl> - ColumnStats . MaxTracker < Integer > maxDeletionTimeTracker = new ColumnStats . MaxTracker < > ( Integer . MAX _ VALUE ) ; <nl> + ColumnStats . MaxLongTracker maxTimestampTracker = new ColumnStats . MaxLongTracker ( Long . MAX _ VALUE ) ; <nl> + ColumnStats . MinLongTracker minTimestampTracker = new ColumnStats . MinLongTracker ( Long . MIN _ VALUE ) ; <nl> + ColumnStats . MaxIntTracker maxDeletionTimeTracker = new ColumnStats . MaxIntTracker ( Integer . MAX _ VALUE ) ; <nl> List < ByteBuffer > minColumnNames = Collections . emptyList ( ) ; <nl> List < ByteBuffer > maxColumnNames = Collections . emptyList ( ) ; <nl> StreamingHistogram tombstones = new StreamingHistogram ( TOMBSTONE _ HISTOGRAM _ BIN _ SIZE ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index eec904a . . 982454c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 59 , 6 + 59 , 8 @ @ <nl> the old ones ( CASSANDRA - 1644 ) <nl> * upgrade to Thrift 0 . 5 ( CASSANDRA - 1367 ) <nl> * renamed CL . DCQUORUM to LOCAL _ QUORUM and DCQUORUMSYNC to EACH _ QUORUM <nl> + * cli truncate support ( CASSANDRA - 1653 ) <nl> + * update GC settings in cassandra . bat ( CASSANDRA - 1636 ) <nl> <nl> <nl> 0 . 7 - beta2 <nl> diff - - git a / src / java / org / apache / cassandra / cli / Cli . g b / src / java / org / apache / cassandra / cli / Cli . g <nl> index e59c608 . . a9229ee 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / Cli . g <nl> + + + b / src / java / org / apache / cassandra / cli / Cli . g <nl> @ @ - 55 , 6 + 55 , 7 @ @ tokens { <nl> NODE _ UPDATE _ KEYSPACE ; <nl> NODE _ UPDATE _ COLUMN _ FAMILY ; <nl> NODE _ LIST ; <nl> + NODE _ TRUNCATE ; <nl> <nl> / / Internal Nodes . <nl> NODE _ COLUMN _ ACCESS ; <nl> @ @ - 123 , 6 + 124 , 7 @ @ statement <nl> | setStatement <nl> | showStatement <nl> | listStatement <nl> + | truncateStatement <nl> | - > ^ ( NODE _ NO _ OP ) <nl> ; <nl> <nl> @ @ - 174 , 6 + 176 , 8 @ @ helpStatement <nl> - > ^ ( NODE _ HELP NODE _ THRIFT _ COUNT ) <nl> | K _ HELP K _ LIST <nl> - > ^ ( NODE _ HELP NODE _ LIST ) <nl> + | K _ HELP K _ TRUNCATE <nl> + - > ^ ( NODE _ HELP NODE _ TRUNCATE ) <nl> | K _ HELP <nl> - > ^ ( NODE _ HELP ) <nl> | ' ? ' <nl> @ @ - 231 , 6 + 235 , 11 @ @ listStatement <nl> - > ^ ( NODE _ LIST columnFamily keyRangeExpr ? ^ ( NODE _ LIMIT $ limit ) ? ) <nl> ; <nl> <nl> + truncateStatement <nl> + : K _ TRUNCATE columnFamily <nl> + - > ^ ( NODE _ TRUNCATE columnFamily ) <nl> + ; <nl> + <nl> showClusterName <nl> : K _ SHOW K _ CLUSTER K _ NAME <nl> - > ^ ( NODE _ SHOW _ CLUSTER _ NAME ) <nl> @ @ - 430 , 6 + 439 , 7 @ @ K _ AND : ' AND ' ; <nl> K _ UPDATE : ' UPDATE ' ; <nl> K _ LIST : ' LIST ' ; <nl> K _ LIMIT : ' LIMIT ' ; <nl> + K _ TRUNCATE : ' TRUNCATE ' ; <nl> <nl> / / private syntactic rules <nl> fragment <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java <nl> index b6ace98 . . b63105a 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliClient . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliClient . java <nl> @ @ - 171 , 6 + 171 , 9 @ @ public class CliClient extends CliUserHelp <nl> case CliParser . NODE _ LIST : <nl> executeList ( tree ) ; <nl> break ; <nl> + case CliParser . NODE _ TRUNCATE : <nl> + executeTruncate ( tree . getChild ( 0 ) . getText ( ) ) ; <nl> + break ; <nl> case CliParser . NODE _ NO _ OP : <nl> / / comment lines come here ; they are treated as no ops . <nl> break ; <nl> @ @ - 943 , 6 + 946 , 30 @ @ public class CliClient extends CliUserHelp <nl> printSliceList ( columnFamilyDef , keySlices ) ; <nl> } <nl> <nl> + / / TRUNCATE < columnFamily > <nl> + private void executeTruncate ( String columnFamily ) <nl> + { <nl> + if ( ! CliMain . isConnected ( ) | | ! hasKeySpace ( ) ) <nl> + return ; <nl> + <nl> + / / getting CfDef , it will fail if there is no such column family in current keySpace . <nl> + CfDef cfDef = getCfDef ( columnFamily ) ; <nl> + <nl> + try <nl> + { <nl> + thriftClient . truncate ( cfDef . getName ( ) ) ; <nl> + sessionState . out . println ( columnFamily + " truncated . " ) ; <nl> + } <nl> + catch ( InvalidRequestException e ) <nl> + { <nl> + throw new RuntimeException ( e . getWhy ( ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> / / SHOW API VERSION <nl> private void executeShowVersion ( ) throws TException <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliCompleter . java b / src / java / org / apache / cassandra / cli / CliCompleter . java <nl> index f541fe5 . . b033d8f 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliCompleter . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliCompleter . java <nl> @ @ - 55 , 12 + 55 , 16 @ @ public class CliCompleter extends SimpleCompletor <nl> " help set " , <nl> " help del " , <nl> " help count " , <nl> + " help list " , <nl> + " help truncate " <nl> } ; <nl> private static String [ ] keyspaceCommands = { <nl> " get " , <nl> " set " , <nl> " count " , <nl> - " del " <nl> + " del " , <nl> + " list " , <nl> + " truncate " <nl> } ; <nl> <nl> public CliCompleter ( ) <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliUserHelp . java b / src / java / org / apache / cassandra / cli / CliUserHelp . java <nl> index 7c512e2 . . db6a779 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliUserHelp . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliUserHelp . java <nl> @ @ - 281 , 6 + 281 , 13 @ @ public class CliUserHelp { <nl> state . out . println ( " list Users [ j : ] limit 40 " ) ; <nl> break ; <nl> <nl> + case CliParser . NODE _ TRUNCATE : <nl> + state . out . println ( " truncate < column _ family > " ) ; <nl> + state . out . println ( " Truncate specified column family . \ n " ) ; <nl> + state . out . println ( " example : " ) ; <nl> + state . out . println ( " truncate Category " ) ; <nl> + break ; <nl> + <nl> default : <nl> state . out . println ( " ? " ) ; <nl> break ; <nl> @ @ - 324 , 7 + 331 , 8 @ @ public class CliUserHelp { <nl> state . out . println ( " del < cf > [ ' < key > ' ] [ ' < super > ' ] [ ' < col > ' ] Delete sub column . " ) ; <nl> state . out . println ( " count < cf > [ ' < key > ' ] Count columns in record . " ) ; <nl> state . out . println ( " count < cf > [ ' < key > ' ] [ ' < super > ' ] Count columns in a super column . " ) ; <nl> - state . out . println ( " list < cf > List all rows in the column family . " ) ; <nl> + state . out . println ( " truncate < column _ family > Truncate specified column family . " ) ; <nl> + state . out . println ( " list < cf > List all rows in the column family . " ) ; <nl> state . out . println ( " list < cf > [ < startKey > : ] " ) ; <nl> state . out . println ( " List rows in the column family beginning with < startKey > . " ) ; <nl> state . out . println ( " list < cf > [ < startKey > : < endKey > ] " ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> index 24a3de0 . . eddcafd 100644 <nl> - - - a / test / unit / org / apache / cassandra / cli / CliTest . java <nl> + + + b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> @ @ - 52 , 6 + 52 , 7 @ @ public class CliTest extends TestCase <nl> " list CF3 [ h : ] " , <nl> " list CF3 limit 10 " , <nl> " list CF3 [ h : g ] limit 10 " , <nl> + " truncate CF1 " , <nl> " update keyspace TestKeySpace with placement _ strategy = ' org . apache . cassandra . locator . LocalStrategy ' " , <nl> " update keyspace TestKeySpace with replication _ factor = 1 and strategy _ options = [ { DC1 : 3 , DC2 : 4 , DC5 : 1 } ] " <nl> } ; <nl> @ @ - 101 , 6 + 102 , 10 @ @ public class CliTest extends TestCase <nl> assertTrue ( result . startsWith ( " = > ( column = " ) ) ; <nl> } <nl> } <nl> + else if ( statement . startsWith ( " truncate " ) ) <nl> + { <nl> + assertTrue ( result . contains ( " truncated . " ) ) ; <nl> + } <nl> <nl> outStream . reset ( ) ; / / reset stream so we have only output from next statement all the time <nl> errStream . reset ( ) ; / / no errors to the end user .

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 5882080 . . 4dfb81d 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 2 . 1 . 2 
 * Fix CREATE TABLE for CQL2 ( CASSANDRA - 8144 ) 
 + * Avoid boxing in ColumnStats min / max trackers ( CASSANDRA - 8109 ) 
 
 
 2 . 1 . 1 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 38b39fe . . 483ecb0 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 399 , 10 + 399 , 10 @ @ public abstract class ColumnFamily implements Iterable < Cell > , IRowCacheEntry 
 / / note that we default to MIN _ VALUE / MAX _ VALUE here to be able to override them later in this method 
 / / we are checking row / range tombstones and actual cells - there should always be data that overrides 
 / / these with actual values 
 - ColumnStats . MinTracker < Long > minTimestampTracker = new ColumnStats . MinTracker < > ( Long . MIN _ VALUE ) ; 
 - ColumnStats . MaxTracker < Long > maxTimestampTracker = new ColumnStats . MaxTracker < > ( Long . MAX _ VALUE ) ; 
 + ColumnStats . MinLongTracker minTimestampTracker = new ColumnStats . MinLongTracker ( Long . MIN _ VALUE ) ; 
 + ColumnStats . MaxLongTracker maxTimestampTracker = new ColumnStats . MaxLongTracker ( Long . MAX _ VALUE ) ; 
 StreamingHistogram tombstones = new StreamingHistogram ( SSTable . TOMBSTONE _ HISTOGRAM _ BIN _ SIZE ) ; 
 - ColumnStats . MaxTracker < Integer > maxDeletionTimeTracker = new ColumnStats . MaxTracker < > ( Integer . MAX _ VALUE ) ; 
 + ColumnStats . MaxIntTracker maxDeletionTimeTracker = new ColumnStats . MaxIntTracker ( Integer . MAX _ VALUE ) ; 
 List < ByteBuffer > minColumnNamesSeen = Collections . emptyList ( ) ; 
 List < ByteBuffer > maxColumnNamesSeen = Collections . emptyList ( ) ; 
 boolean hasLegacyCounterShards = false ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java b / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java 
 index fa59dba . . cfdbd17 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java 
 @ @ - 198 , 11 + 198 , 11 @ @ public class LazilyCompactedRow extends AbstractCompactedRow 
 / / if the row tombstone is ' live ' we need to set timestamp to MAX _ VALUE to be able to overwrite it later 
 / / markedForDeleteAt is MIN _ VALUE for ' live ' row tombstones ( which we use to default maxTimestampSeen ) 
 
 - ColumnStats . MinTracker < Long > minTimestampTracker = new ColumnStats . MinTracker < > ( Long . MIN _ VALUE ) ; 
 - ColumnStats . MaxTracker < Long > maxTimestampTracker = new ColumnStats . MaxTracker < > ( Long . MAX _ VALUE ) ; 
 + ColumnStats . MinLongTracker minTimestampTracker = new ColumnStats . MinLongTracker ( Long . MIN _ VALUE ) ; 
 + ColumnStats . MaxLongTracker maxTimestampTracker = new ColumnStats . MaxLongTracker ( Long . MAX _ VALUE ) ; 
 / / we need to set MIN _ VALUE if we are ' live ' since we want to overwrite it later 
 / / we are bound to have either a RangeTombstone or standard cells will set this properly : 
 - ColumnStats . MaxTracker < Integer > maxDeletionTimeTracker = new ColumnStats . MaxTracker < > ( Integer . MAX _ VALUE ) ; 
 + ColumnStats . MaxIntTracker maxDeletionTimeTracker = new ColumnStats . MaxIntTracker ( Integer . MAX _ VALUE ) ; 
 
 StreamingHistogram tombstones = new StreamingHistogram ( SSTable . TOMBSTONE _ HISTOGRAM _ BIN _ SIZE ) ; 
 List < ByteBuffer > minColumnNameSeen = Collections . emptyList ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / ColumnStats . java b / src / java / org / apache / cassandra / io / sstable / ColumnStats . java 
 index 873aa09 . . 83a16c9 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / ColumnStats . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / ColumnStats . java 
 @ @ - 18 , 7 + 18 , 6 @ @ 
 package org . apache . cassandra . io . sstable ; 
 
 import java . nio . ByteBuffer ; 
 - import java . util . Comparator ; 
 import java . util . List ; 
 
 import org . apache . cassandra . utils . StreamingHistogram ; 
 @ @ - 63 , 18 + 62 , 19 @ @ public class ColumnStats 
 this . hasLegacyCounterShards = hasLegacyCounterShards ; 
 } 
 
 - public static class MinTracker < T extends Comparable < T > > 
 + / / We use explicit classes for ints and longs instead of generics to avoid boxing and unboxing ( See CASSANDRA - 8109 ) 
 + public static class MinLongTracker 
 { 
 - private final T defaultValue ; 
 + private final long defaultValue ; 
 private boolean isSet = false ; 
 - private T value ; 
 + private long value ; 
 
 - public MinTracker ( T defaultValue ) 
 + public MinLongTracker ( long defaultValue ) 
 { 
 this . defaultValue = defaultValue ; 
 } 
 
 - public void update ( T value ) 
 + public void update ( long value ) 
 { 
 if ( ! isSet ) 
 { 
 @ @ - 83 , 12 + 83 , 12 @ @ public class ColumnStats 
 } 
 else 
 { 
 - if ( value . compareTo ( this . value ) < 0 ) 
 + if ( value < this . value ) 
 this . value = value ; 
 } 
 } 
 
 - public T get ( ) 
 + public long get ( ) 
 { 
 if ( isSet ) 
 return value ; 
 @ @ - 96 , 18 + 96 , 18 @ @ public class ColumnStats 
 } 
 } 
 
 - public static class MaxTracker < T extends Comparable < T > > 
 + public static class MaxLongTracker 
 { 
 - private final T defaultValue ; 
 + private final long defaultValue ; 
 private boolean isSet = false ; 
 - private T value ; 
 + private long value ; 
 
 - public MaxTracker ( T defaultValue ) 
 + public MaxLongTracker ( long defaultValue ) 
 { 
 this . defaultValue = defaultValue ; 
 } 
 
 - public void update ( T value ) 
 + public void update ( long value ) 
 { 
 if ( ! isSet ) 
 { 
 @ @ - 116 , 16 + 116 , 50 @ @ public class ColumnStats 
 } 
 else 
 { 
 - if ( value . compareTo ( this . value ) > 0 ) 
 + if ( value > this . value ) 
 this . value = value ; 
 } 
 } 
 
 - public T get ( ) 
 + public long get ( ) 
 { 
 if ( isSet ) 
 return value ; 
 return defaultValue ; 
 } 
 } 
 + 
 + public static class MaxIntTracker 
 + { 
 + private final int defaultValue ; 
 + private boolean isSet = false ; 
 + private int value ; 
 + 
 + public MaxIntTracker ( int defaultValue ) 
 + { 
 + this . defaultValue = defaultValue ; 
 + } 
 + 
 + public void update ( int value ) 
 + { 
 + if ( ! isSet ) 
 + { 
 + this . value = value ; 
 + isSet = true ; 
 + } 
 + else 
 + { 
 + if ( value > this . value ) 
 + this . value = value ; 
 + } 
 + } 
 + 
 + public int get ( ) 
 + { 
 + if ( isSet ) 
 + return value ; 
 + return defaultValue ; 
 + } 
 + } 
 + 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 index e92803a . . 50c2ca3 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 @ @ - 244 , 9 + 244 , 9 @ @ public class SSTableWriter extends SSTable 
 { 
 long currentPosition = beforeAppend ( key ) ; 
 
 - ColumnStats . MaxTracker < Long > maxTimestampTracker = new ColumnStats . MaxTracker < > ( Long . MAX _ VALUE ) ; 
 - ColumnStats . MinTracker < Long > minTimestampTracker = new ColumnStats . MinTracker < > ( Long . MIN _ VALUE ) ; 
 - ColumnStats . MaxTracker < Integer > maxDeletionTimeTracker = new ColumnStats . MaxTracker < > ( Integer . MAX _ VALUE ) ; 
 + ColumnStats . MaxLongTracker maxTimestampTracker = new ColumnStats . MaxLongTracker ( Long . MAX _ VALUE ) ; 
 + ColumnStats . MinLongTracker minTimestampTracker = new ColumnStats . MinLongTracker ( Long . MIN _ VALUE ) ; 
 + ColumnStats . MaxIntTracker maxDeletionTimeTracker = new ColumnStats . MaxIntTracker ( Integer . MAX _ VALUE ) ; 
 List < ByteBuffer > minColumnNames = Collections . emptyList ( ) ; 
 List < ByteBuffer > maxColumnNames = Collections . emptyList ( ) ; 
 StreamingHistogram tombstones = new StreamingHistogram ( TOMBSTONE _ HISTOGRAM _ BIN _ SIZE ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index eec904a . . 982454c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 59 , 6 + 59 , 8 @ @ 
 the old ones ( CASSANDRA - 1644 ) 
 * upgrade to Thrift 0 . 5 ( CASSANDRA - 1367 ) 
 * renamed CL . DCQUORUM to LOCAL _ QUORUM and DCQUORUMSYNC to EACH _ QUORUM 
 + * cli truncate support ( CASSANDRA - 1653 ) 
 + * update GC settings in cassandra . bat ( CASSANDRA - 1636 ) 
 
 
 0 . 7 - beta2 
 diff - - git a / src / java / org / apache / cassandra / cli / Cli . g b / src / java / org / apache / cassandra / cli / Cli . g 
 index e59c608 . . a9229ee 100644 
 - - - a / src / java / org / apache / cassandra / cli / Cli . g 
 + + + b / src / java / org / apache / cassandra / cli / Cli . g 
 @ @ - 55 , 6 + 55 , 7 @ @ tokens { 
 NODE _ UPDATE _ KEYSPACE ; 
 NODE _ UPDATE _ COLUMN _ FAMILY ; 
 NODE _ LIST ; 
 + NODE _ TRUNCATE ; 
 
 / / Internal Nodes . 
 NODE _ COLUMN _ ACCESS ; 
 @ @ - 123 , 6 + 124 , 7 @ @ statement 
 | setStatement 
 | showStatement 
 | listStatement 
 + | truncateStatement 
 | - > ^ ( NODE _ NO _ OP ) 
 ; 
 
 @ @ - 174 , 6 + 176 , 8 @ @ helpStatement 
 - > ^ ( NODE _ HELP NODE _ THRIFT _ COUNT ) 
 | K _ HELP K _ LIST 
 - > ^ ( NODE _ HELP NODE _ LIST ) 
 + | K _ HELP K _ TRUNCATE 
 + - > ^ ( NODE _ HELP NODE _ TRUNCATE ) 
 | K _ HELP 
 - > ^ ( NODE _ HELP ) 
 | ' ? ' 
 @ @ - 231 , 6 + 235 , 11 @ @ listStatement 
 - > ^ ( NODE _ LIST columnFamily keyRangeExpr ? ^ ( NODE _ LIMIT $ limit ) ? ) 
 ; 
 
 + truncateStatement 
 + : K _ TRUNCATE columnFamily 
 + - > ^ ( NODE _ TRUNCATE columnFamily ) 
 + ; 
 + 
 showClusterName 
 : K _ SHOW K _ CLUSTER K _ NAME 
 - > ^ ( NODE _ SHOW _ CLUSTER _ NAME ) 
 @ @ - 430 , 6 + 439 , 7 @ @ K _ AND : ' AND ' ; 
 K _ UPDATE : ' UPDATE ' ; 
 K _ LIST : ' LIST ' ; 
 K _ LIMIT : ' LIMIT ' ; 
 + K _ TRUNCATE : ' TRUNCATE ' ; 
 
 / / private syntactic rules 
 fragment 
 diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java 
 index b6ace98 . . b63105a 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliClient . java 
 + + + b / src / java / org / apache / cassandra / cli / CliClient . java 
 @ @ - 171 , 6 + 171 , 9 @ @ public class CliClient extends CliUserHelp 
 case CliParser . NODE _ LIST : 
 executeList ( tree ) ; 
 break ; 
 + case CliParser . NODE _ TRUNCATE : 
 + executeTruncate ( tree . getChild ( 0 ) . getText ( ) ) ; 
 + break ; 
 case CliParser . NODE _ NO _ OP : 
 / / comment lines come here ; they are treated as no ops . 
 break ; 
 @ @ - 943 , 6 + 946 , 30 @ @ public class CliClient extends CliUserHelp 
 printSliceList ( columnFamilyDef , keySlices ) ; 
 } 
 
 + / / TRUNCATE < columnFamily > 
 + private void executeTruncate ( String columnFamily ) 
 + { 
 + if ( ! CliMain . isConnected ( ) | | ! hasKeySpace ( ) ) 
 + return ; 
 + 
 + / / getting CfDef , it will fail if there is no such column family in current keySpace . 
 + CfDef cfDef = getCfDef ( columnFamily ) ; 
 + 
 + try 
 + { 
 + thriftClient . truncate ( cfDef . getName ( ) ) ; 
 + sessionState . out . println ( columnFamily + " truncated . " ) ; 
 + } 
 + catch ( InvalidRequestException e ) 
 + { 
 + throw new RuntimeException ( e . getWhy ( ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 / / SHOW API VERSION 
 private void executeShowVersion ( ) throws TException 
 { 
 diff - - git a / src / java / org / apache / cassandra / cli / CliCompleter . java b / src / java / org / apache / cassandra / cli / CliCompleter . java 
 index f541fe5 . . b033d8f 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliCompleter . java 
 + + + b / src / java / org / apache / cassandra / cli / CliCompleter . java 
 @ @ - 55 , 12 + 55 , 16 @ @ public class CliCompleter extends SimpleCompletor 
 " help set " , 
 " help del " , 
 " help count " , 
 + " help list " , 
 + " help truncate " 
 } ; 
 private static String [ ] keyspaceCommands = { 
 " get " , 
 " set " , 
 " count " , 
 - " del " 
 + " del " , 
 + " list " , 
 + " truncate " 
 } ; 
 
 public CliCompleter ( ) 
 diff - - git a / src / java / org / apache / cassandra / cli / CliUserHelp . java b / src / java / org / apache / cassandra / cli / CliUserHelp . java 
 index 7c512e2 . . db6a779 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliUserHelp . java 
 + + + b / src / java / org / apache / cassandra / cli / CliUserHelp . java 
 @ @ - 281 , 6 + 281 , 13 @ @ public class CliUserHelp { 
 state . out . println ( " list Users [ j : ] limit 40 " ) ; 
 break ; 
 
 + case CliParser . NODE _ TRUNCATE : 
 + state . out . println ( " truncate < column _ family > " ) ; 
 + state . out . println ( " Truncate specified column family . \ n " ) ; 
 + state . out . println ( " example : " ) ; 
 + state . out . println ( " truncate Category " ) ; 
 + break ; 
 + 
 default : 
 state . out . println ( " ? " ) ; 
 break ; 
 @ @ - 324 , 7 + 331 , 8 @ @ public class CliUserHelp { 
 state . out . println ( " del < cf > [ ' < key > ' ] [ ' < super > ' ] [ ' < col > ' ] Delete sub column . " ) ; 
 state . out . println ( " count < cf > [ ' < key > ' ] Count columns in record . " ) ; 
 state . out . println ( " count < cf > [ ' < key > ' ] [ ' < super > ' ] Count columns in a super column . " ) ; 
 - state . out . println ( " list < cf > List all rows in the column family . " ) ; 
 + state . out . println ( " truncate < column _ family > Truncate specified column family . " ) ; 
 + state . out . println ( " list < cf > List all rows in the column family . " ) ; 
 state . out . println ( " list < cf > [ < startKey > : ] " ) ; 
 state . out . println ( " List rows in the column family beginning with < startKey > . " ) ; 
 state . out . println ( " list < cf > [ < startKey > : < endKey > ] " ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java 
 index 24a3de0 . . eddcafd 100644 
 - - - a / test / unit / org / apache / cassandra / cli / CliTest . java 
 + + + b / test / unit / org / apache / cassandra / cli / CliTest . java 
 @ @ - 52 , 6 + 52 , 7 @ @ public class CliTest extends TestCase 
 " list CF3 [ h : ] " , 
 " list CF3 limit 10 " , 
 " list CF3 [ h : g ] limit 10 " , 
 + " truncate CF1 " , 
 " update keyspace TestKeySpace with placement _ strategy = ' org . apache . cassandra . locator . LocalStrategy ' " , 
 " update keyspace TestKeySpace with replication _ factor = 1 and strategy _ options = [ { DC1 : 3 , DC2 : 4 , DC5 : 1 } ] " 
 } ; 
 @ @ - 101 , 6 + 102 , 10 @ @ public class CliTest extends TestCase 
 assertTrue ( result . startsWith ( " = > ( column = " ) ) ; 
 } 
 } 
 + else if ( statement . startsWith ( " truncate " ) ) 
 + { 
 + assertTrue ( result . contains ( " truncated . " ) ) ; 
 + } 
 
 outStream . reset ( ) ; / / reset stream so we have only output from next statement all the time 
 errStream . reset ( ) ; / / no errors to the end user .
