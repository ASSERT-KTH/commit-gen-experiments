BLEU SCORE: 0.0021771450140035953

TEST MSG: Correctly name FileCache metrics .
GENERATED MSG: track coordinator latency and use that instead of local for read speculation ; fix round - trip of percentile through string

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / metrics / FileCacheMetrics . java b / src / java / org / apache / cassandra / metrics / FileCacheMetrics . java <nl> index 9b21de6 . . 42444f3 100644 <nl> - - - a / src / java / org / apache / cassandra / metrics / FileCacheMetrics . java <nl> + + + b / src / java / org / apache / cassandra / metrics / FileCacheMetrics . java <nl> @ @ - 28 , 6 + 28 , 8 @ @ import org . apache . cassandra . service . FileCacheService ; <nl> <nl> public class FileCacheMetrics <nl> { <nl> + private static final MetricNameFactory factory = new DefaultNameFactory ( " FileCache " ) ; <nl> + <nl> / * * Total number of hits * / <nl> public final Meter hits ; <nl> / * * Total number of requests * / <nl> @ @ - 39 , 9 + 41 , 9 @ @ public class FileCacheMetrics <nl> <nl> public FileCacheMetrics ( ) <nl> { <nl> - hits = Metrics . newMeter ( new MetricName ( FileCacheService . class , " Hits " ) , " hits " , TimeUnit . SECONDS ) ; <nl> - requests = Metrics . newMeter ( new MetricName ( FileCacheService . class , " Requests " ) , " requests " , TimeUnit . SECONDS ) ; <nl> - hitRate = Metrics . newGauge ( new MetricName ( FileCacheService . class , " HitRate " ) , new RatioGauge ( ) <nl> + hits = Metrics . newMeter ( factory . createMetricName ( " Hits " ) , " hits " , TimeUnit . SECONDS ) ; <nl> + requests = Metrics . newMeter ( factory . createMetricName ( " Requests " ) , " requests " , TimeUnit . SECONDS ) ; <nl> + hitRate = Metrics . newGauge ( factory . createMetricName ( " HitRate " ) , new RatioGauge ( ) <nl> { <nl> protected double getNumerator ( ) <nl> { <nl> @ @ - 53 , 7 + 55 , 7 @ @ public class FileCacheMetrics <nl> return requests . count ( ) ; <nl> } <nl> } ) ; <nl> - size = Metrics . newGauge ( new MetricName ( FileCacheService . class , " Size " ) , new Gauge < Long > ( ) <nl> + size = Metrics . newGauge ( factory . createMetricName ( " Size " ) , new Gauge < Long > ( ) <nl> { <nl> public Long value ( ) <nl> {
NEAREST DIFF (one line): diff - - git a / NEWS . txt b / NEWS . txt <nl> index fc257f4 . . 1f76277 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 13 , 6 + 13 , 16 @ @ restore snapshots created with the previous major version using the <nl> ' sstableloader ' tool . You can upgrade the file format of your snapshots <nl> using the provided ' sstableupgrade ' tool . <nl> <nl> + <nl> + 2 . 0 . 2 <nl> + = = = = = <nl> + <nl> + New features <nl> + - - - - - - - - - - - - <nl> + - Speculative retry defaults to 99th percentile <nl> + ( See blog post at TODO ) <nl> + <nl> + <nl> 2 . 0 . 1 <nl> = = = = = <nl> <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index 51865c2 . . 8c4075c 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 83 , 7 + 83 , 7 @ @ public final class CFMetaData <nl> public final static Class < ? extends AbstractCompactionStrategy > DEFAULT _ COMPACTION _ STRATEGY _ CLASS = SizeTieredCompactionStrategy . class ; <nl> public final static Caching DEFAULT _ CACHING _ STRATEGY = Caching . KEYS _ ONLY ; <nl> public final static int DEFAULT _ DEFAULT _ TIME _ TO _ LIVE = 0 ; <nl> - public final static SpeculativeRetry DEFAULT _ SPECULATIVE _ RETRY = new SpeculativeRetry ( SpeculativeRetry . RetryType . NONE , 0 ) ; <nl> + public final static SpeculativeRetry DEFAULT _ SPECULATIVE _ RETRY = new SpeculativeRetry ( SpeculativeRetry . RetryType . PERCENTILE , 0 . 99 ) ; <nl> public final static int DEFAULT _ INDEX _ INTERVAL = 128 ; <nl> public final static boolean DEFAULT _ POPULATE _ IO _ CACHE _ ON _ FLUSH = false ; <nl>

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / metrics / FileCacheMetrics . java b / src / java / org / apache / cassandra / metrics / FileCacheMetrics . java 
 index 9b21de6 . . 42444f3 100644 
 - - - a / src / java / org / apache / cassandra / metrics / FileCacheMetrics . java 
 + + + b / src / java / org / apache / cassandra / metrics / FileCacheMetrics . java 
 @ @ - 28 , 6 + 28 , 8 @ @ import org . apache . cassandra . service . FileCacheService ; 
 
 public class FileCacheMetrics 
 { 
 + private static final MetricNameFactory factory = new DefaultNameFactory ( " FileCache " ) ; 
 + 
 / * * Total number of hits * / 
 public final Meter hits ; 
 / * * Total number of requests * / 
 @ @ - 39 , 9 + 41 , 9 @ @ public class FileCacheMetrics 
 
 public FileCacheMetrics ( ) 
 { 
 - hits = Metrics . newMeter ( new MetricName ( FileCacheService . class , " Hits " ) , " hits " , TimeUnit . SECONDS ) ; 
 - requests = Metrics . newMeter ( new MetricName ( FileCacheService . class , " Requests " ) , " requests " , TimeUnit . SECONDS ) ; 
 - hitRate = Metrics . newGauge ( new MetricName ( FileCacheService . class , " HitRate " ) , new RatioGauge ( ) 
 + hits = Metrics . newMeter ( factory . createMetricName ( " Hits " ) , " hits " , TimeUnit . SECONDS ) ; 
 + requests = Metrics . newMeter ( factory . createMetricName ( " Requests " ) , " requests " , TimeUnit . SECONDS ) ; 
 + hitRate = Metrics . newGauge ( factory . createMetricName ( " HitRate " ) , new RatioGauge ( ) 
 { 
 protected double getNumerator ( ) 
 { 
 @ @ - 53 , 7 + 55 , 7 @ @ public class FileCacheMetrics 
 return requests . count ( ) ; 
 } 
 } ) ; 
 - size = Metrics . newGauge ( new MetricName ( FileCacheService . class , " Size " ) , new Gauge < Long > ( ) 
 + size = Metrics . newGauge ( factory . createMetricName ( " Size " ) , new Gauge < Long > ( ) 
 { 
 public Long value ( ) 
 {

NEAREST DIFF:
diff - - git a / NEWS . txt b / NEWS . txt 
 index fc257f4 . . 1f76277 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 13 , 6 + 13 , 16 @ @ restore snapshots created with the previous major version using the 
 ' sstableloader ' tool . You can upgrade the file format of your snapshots 
 using the provided ' sstableupgrade ' tool . 
 
 + 
 + 2 . 0 . 2 
 + = = = = = 
 + 
 + New features 
 + - - - - - - - - - - - - 
 + - Speculative retry defaults to 99th percentile 
 + ( See blog post at TODO ) 
 + 
 + 
 2 . 0 . 1 
 = = = = = 
 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index 51865c2 . . 8c4075c 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 83 , 7 + 83 , 7 @ @ public final class CFMetaData 
 public final static Class < ? extends AbstractCompactionStrategy > DEFAULT _ COMPACTION _ STRATEGY _ CLASS = SizeTieredCompactionStrategy . class ; 
 public final static Caching DEFAULT _ CACHING _ STRATEGY = Caching . KEYS _ ONLY ; 
 public final static int DEFAULT _ DEFAULT _ TIME _ TO _ LIVE = 0 ; 
 - public final static SpeculativeRetry DEFAULT _ SPECULATIVE _ RETRY = new SpeculativeRetry ( SpeculativeRetry . RetryType . NONE , 0 ) ; 
 + public final static SpeculativeRetry DEFAULT _ SPECULATIVE _ RETRY = new SpeculativeRetry ( SpeculativeRetry . RetryType . PERCENTILE , 0 . 99 ) ; 
 public final static int DEFAULT _ INDEX _ INTERVAL = 128 ; 
 public final static boolean DEFAULT _ POPULATE _ IO _ CACHE _ ON _ FLUSH = false ; 

