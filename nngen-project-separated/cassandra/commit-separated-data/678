BLEU SCORE: 0.024615130620079664

TEST MSG: close files / resources in tests
GENERATED MSG: Share file handles between all instances of a SegmentedFile

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / VerifyTest . java b / test / unit / org / apache / cassandra / db / VerifyTest . java <nl> index 53bf655 . . 4e55a60 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / VerifyTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / VerifyTest . java <nl> @ @ - 275 , 11 + 275 , 12 @ @ public class VerifyTest <nl> SSTableReader sstable = cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) ; <nl> <nl> <nl> - RandomAccessFile file = new RandomAccessFile ( sstable . descriptor . filenameFor ( sstable . descriptor . digestComponent ) , " rw " ) ; <nl> - Long correctChecksum = Long . parseLong ( file . readLine ( ) ) ; <nl> - file . close ( ) ; <nl> - <nl> - writeChecksum ( + + correctChecksum , sstable . descriptor . filenameFor ( sstable . descriptor . digestComponent ) ) ; <nl> + try ( RandomAccessFile file = new RandomAccessFile ( sstable . descriptor . filenameFor ( sstable . descriptor . digestComponent ) , " rw " ) ) <nl> + { <nl> + Long correctChecksum = Long . valueOf ( file . readLine ( ) ) ; <nl> + <nl> + writeChecksum ( + + correctChecksum , sstable . descriptor . filenameFor ( sstable . descriptor . digestComponent ) ) ; <nl> + } <nl> <nl> try ( Verifier verifier = new Verifier ( cfs , sstable , false ) ) <nl> { <nl> @ @ - 373 , 13 + 374 , 15 @ @ public class VerifyTest <nl> <nl> protected long simpleFullChecksum ( String filename ) throws IOException <nl> { <nl> - FileInputStream inputStream = new FileInputStream ( filename ) ; <nl> - CRC32 checksum = new CRC32 ( ) ; <nl> - CheckedInputStream cinStream = new CheckedInputStream ( inputStream , checksum ) ; <nl> - byte [ ] b = new byte [ 128 ] ; <nl> - while ( cinStream . read ( b ) > = 0 ) { <nl> + try ( FileInputStream inputStream = new FileInputStream ( filename ) ) <nl> + { <nl> + CRC32 checksum = new CRC32 ( ) ; <nl> + CheckedInputStream cinStream = new CheckedInputStream ( inputStream , checksum ) ; <nl> + byte [ ] b = new byte [ 128 ] ; <nl> + while ( cinStream . read ( b ) > = 0 ) { <nl> + } <nl> + return cinStream . getChecksum ( ) . getValue ( ) ; <nl> } <nl> - return cinStream . getChecksum ( ) . getValue ( ) ; <nl> } <nl> <nl> protected void writeChecksum ( long checksum , String filePath ) <nl> diff - - git a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java <nl> index 44be53d . . 2386160 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java <nl> @ @ - 144 , 25 + 144 , 26 @ @ public class BufferedRandomAccessFileTest <nl> public void testReadAndWriteOnCapacity ( ) throws IOException <nl> { <nl> File tmpFile = File . createTempFile ( " readtest " , " bin " ) ; <nl> - SequentialWriter w = new SequentialWriter ( tmpFile ) ; <nl> - <nl> - / / Fully write the file and sync . . <nl> - byte [ ] in = generateByteArray ( RandomAccessReader . DEFAULT _ BUFFER _ SIZE ) ; <nl> - w . write ( in ) ; <nl> - <nl> - try ( FileHandle . Builder builder = new FileHandle . Builder ( w . getPath ( ) ) ; <nl> - FileHandle fh = builder . complete ( ) ; <nl> - RandomAccessReader r = fh . createReader ( ) ) <nl> + try ( SequentialWriter w = new SequentialWriter ( tmpFile ) ) <nl> { <nl> - / / Read it into a same size array . <nl> - byte [ ] out = new byte [ RandomAccessReader . DEFAULT _ BUFFER _ SIZE ] ; <nl> - r . read ( out ) ; <nl> - <nl> - / / Cannot read any more . <nl> - int negone = r . read ( ) ; <nl> - assert negone = = - 1 : " We read past the end of the file , should have gotten EOF - 1 . Instead , " + negone ; <nl> - <nl> - w . finish ( ) ; <nl> + / / Fully write the file and sync . . <nl> + byte [ ] in = generateByteArray ( RandomAccessReader . DEFAULT _ BUFFER _ SIZE ) ; <nl> + w . write ( in ) ; <nl> + <nl> + try ( FileHandle . Builder builder = new FileHandle . Builder ( w . getPath ( ) ) ; <nl> + FileHandle fh = builder . complete ( ) ; <nl> + RandomAccessReader r = fh . createReader ( ) ) <nl> + { <nl> + / / Read it into a same size array . <nl> + byte [ ] out = new byte [ RandomAccessReader . DEFAULT _ BUFFER _ SIZE ] ; <nl> + r . read ( out ) ; <nl> + <nl> + / / Cannot read any more . <nl> + int negone = r . read ( ) ; <nl> + assert negone = = - 1 : " We read past the end of the file , should have gotten EOF - 1 . Instead , " + negone ; <nl> + <nl> + w . finish ( ) ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 170 , 32 + 171 , 34 @ @ public class BufferedRandomAccessFileTest <nl> public void testLength ( ) throws IOException <nl> { <nl> File tmpFile = File . createTempFile ( " lengthtest " , " bin " ) ; <nl> - SequentialWriter w = new SequentialWriter ( tmpFile ) ; <nl> - assertEquals ( 0 , w . length ( ) ) ; <nl> - <nl> - / / write a chunk smaller then our buffer , so will not be flushed <nl> - / / to disk <nl> - byte [ ] lessThenBuffer = generateByteArray ( RandomAccessReader . DEFAULT _ BUFFER _ SIZE / 2 ) ; <nl> - w . write ( lessThenBuffer ) ; <nl> - assertEquals ( lessThenBuffer . length , w . length ( ) ) ; <nl> - <nl> - / / sync the data and check length <nl> - w . sync ( ) ; <nl> - assertEquals ( lessThenBuffer . length , w . length ( ) ) ; <nl> - <nl> - / / write more then the buffer can hold and check length <nl> - byte [ ] biggerThenBuffer = generateByteArray ( RandomAccessReader . DEFAULT _ BUFFER _ SIZE * 2 ) ; <nl> - w . write ( biggerThenBuffer ) ; <nl> - assertEquals ( biggerThenBuffer . length + lessThenBuffer . length , w . length ( ) ) ; <nl> - <nl> - w . finish ( ) ; <nl> - <nl> - / / will use cachedlength <nl> - try ( FileHandle . Builder builder = new FileHandle . Builder ( tmpFile . getPath ( ) ) ; <nl> - FileHandle fh = builder . complete ( ) ; <nl> - RandomAccessReader r = fh . createReader ( ) ) <nl> + try ( SequentialWriter w = new SequentialWriter ( tmpFile ) ) <nl> { <nl> - assertEquals ( lessThenBuffer . length + biggerThenBuffer . length , r . length ( ) ) ; <nl> + assertEquals ( 0 , w . length ( ) ) ; <nl> + <nl> + / / write a chunk smaller then our buffer , so will not be flushed <nl> + / / to disk <nl> + byte [ ] lessThenBuffer = generateByteArray ( RandomAccessReader . DEFAULT _ BUFFER _ SIZE / 2 ) ; <nl> + w . write ( lessThenBuffer ) ; <nl> + assertEquals ( lessThenBuffer . length , w . length ( ) ) ; <nl> + <nl> + / / sync the data and check length <nl> + w . sync ( ) ; <nl> + assertEquals ( lessThenBuffer . length , w . length ( ) ) ; <nl> + <nl> + / / write more then the buffer can hold and check length <nl> + byte [ ] biggerThenBuffer = generateByteArray ( RandomAccessReader . DEFAULT _ BUFFER _ SIZE * 2 ) ; <nl> + w . write ( biggerThenBuffer ) ; <nl> + assertEquals ( biggerThenBuffer . length + lessThenBuffer . length , w . length ( ) ) ; <nl> + <nl> + w . finish ( ) ; <nl> + <nl> + / / will use cachedlength <nl> + try ( FileHandle . Builder builder = new FileHandle . Builder ( tmpFile . getPath ( ) ) ; <nl> + FileHandle fh = builder . complete ( ) ; <nl> + RandomAccessReader r = fh . createReader ( ) ) <nl> + { <nl> + assertEquals ( lessThenBuffer . length + biggerThenBuffer . length , r . length ( ) ) ; <nl> + } <nl> } <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / io / util / FileSegmentInputStreamTest . java b / test / unit / org / apache / cassandra / io / util / FileSegmentInputStreamTest . java <nl> index fcee9b7 . . b040d27 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / util / FileSegmentInputStreamTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / util / FileSegmentInputStreamTest . java <nl> @ @ - 88 , 44 + 88 , 56 @ @ public class FileSegmentInputStreamTest <nl> @ Test ( expected = UnsupportedOperationException . class ) <nl> public void testMarkNotSupported ( ) throws Exception <nl> { <nl> - FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 0 ) ; <nl> - assertFalse ( reader . markSupported ( ) ) ; <nl> - assertEquals ( 0 , reader . bytesPastMark ( null ) ) ; <nl> - reader . mark ( ) ; <nl> + try ( FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 0 ) ) <nl> + { <nl> + assertFalse ( reader . markSupported ( ) ) ; <nl> + assertEquals ( 0 , reader . bytesPastMark ( null ) ) ; <nl> + reader . mark ( ) ; <nl> + } <nl> } <nl> <nl> @ Test ( expected = UnsupportedOperationException . class ) <nl> public void testResetNotSupported ( ) throws Exception <nl> { <nl> - FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 0 ) ; <nl> - reader . reset ( null ) ; <nl> + try ( FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 0 ) ) <nl> + { <nl> + reader . reset ( null ) ; <nl> + } <nl> } <nl> <nl> @ Test ( expected = IllegalArgumentException . class ) <nl> public void testSeekNegative ( ) throws Exception <nl> { <nl> - FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 0 ) ; <nl> - reader . seek ( - 1 ) ; <nl> + try ( FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 0 ) ) <nl> + { <nl> + reader . seek ( - 1 ) ; <nl> + } <nl> } <nl> <nl> @ Test ( expected = IllegalArgumentException . class ) <nl> public void testSeekBeforeOffset ( ) throws Exception <nl> { <nl> - FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 1024 ) ; <nl> - reader . seek ( 1023 ) ; <nl> + try ( FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 1024 ) ) <nl> + { <nl> + reader . seek ( 1023 ) ; <nl> + } <nl> } <nl> <nl> @ Test ( expected = IllegalArgumentException . class ) <nl> public void testSeekPastLength ( ) throws Exception <nl> { <nl> - FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 1024 ) ; <nl> - reader . seek ( 2049 ) ; <nl> + try ( FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 1024 ) ) <nl> + { <nl> + reader . seek ( 2049 ) ; <nl> + } <nl> } <nl> <nl> @ Test ( expected = EOFException . class ) <nl> public void testReadBytesTooMany ( ) throws Exception <nl> { <nl> - FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 1024 ) ; <nl> - ByteBufferUtil . read ( reader , 2049 ) ; <nl> + try ( FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 1024 ) ) <nl> + { <nl> + ByteBufferUtil . read ( reader , 2049 ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java b / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java <nl> index 09612c8 . . 0e7d8c8 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java <nl> @ @ - 97 , 9 + 97 , 8 @ @ public class FileUtilsTest <nl> <nl> private File createFile ( File file , long size ) <nl> { <nl> - try <nl> + try ( RandomAccessFile f = new RandomAccessFile ( file , " rw " ) ) <nl> { <nl> - RandomAccessFile f = new RandomAccessFile ( file , " rw " ) ; <nl> f . setLength ( size ) ; <nl> } <nl> catch ( Exception e ) <nl> diff - - git a / test / unit / org / apache / cassandra / service / ProtocolBetaVersionTest . java b / test / unit / org / apache / cassandra / service / ProtocolBetaVersionTest . java <nl> index 7eae7bb . . 238c2f9 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / ProtocolBetaVersionTest . java <nl> + + + b / test / unit / org / apache / cassandra / service / ProtocolBetaVersionTest . java <nl> @ @ - 69 , 9 + 69 , 8 @ @ public class ProtocolBetaVersionTest extends CQLTester <nl> @ Test <nl> public void unforcedProtocolVersionTest ( ) throws Exception <nl> { <nl> - try <nl> + try ( SimpleClient client = new SimpleClient ( nativeAddr . getHostAddress ( ) , nativePort , Server . BETA _ VERSION , false , new EncryptionOptions . ClientEncryptionOptions ( ) ) ) <nl> { <nl> - SimpleClient client = new SimpleClient ( nativeAddr . getHostAddress ( ) , nativePort , Server . BETA _ VERSION , false , new EncryptionOptions . ClientEncryptionOptions ( ) ) ; <nl> client . connect ( false ) ; <nl> fail ( " Exception should have been thrown " ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / utils / KeyGenerator . java b / test / unit / org / apache / cassandra / utils / KeyGenerator . java <nl> index 8a9d8b8 . . df95867 100644 <nl> - - - a / test / unit / org / apache / cassandra / utils / KeyGenerator . java <nl> + + + b / test / unit / org / apache / cassandra / utils / KeyGenerator . java <nl> @ @ - 24 , 7 + 24 , 8 @ @ import java . util . Random ; <nl> <nl> public class KeyGenerator <nl> { <nl> - private static ByteBuffer randomKey ( Random r ) { <nl> + private static ByteBuffer randomKey ( Random r ) <nl> + { <nl> byte [ ] bytes = new byte [ 48 ] ; <nl> r . nextBytes ( bytes ) ; <nl> return ByteBuffer . wrap ( bytes ) ; <nl> @ @ - 35 , 31 + 36 , 37 @ @ public class KeyGenerator <nl> int i , n , seed ; <nl> Random random ; <nl> <nl> - RandomStringGenerator ( int seed , int n ) { <nl> + RandomStringGenerator ( int seed , int n ) <nl> + { <nl> i = 0 ; <nl> this . seed = seed ; <nl> this . n = n ; <nl> reset ( ) ; <nl> } <nl> <nl> - public int size ( ) { <nl> + public int size ( ) <nl> + { <nl> return n ; <nl> } <nl> <nl> - public void reset ( ) { <nl> + public void reset ( ) <nl> + { <nl> random = new Random ( seed ) ; <nl> } <nl> <nl> - public boolean hasNext ( ) { <nl> + public boolean hasNext ( ) <nl> + { <nl> return i < n ; <nl> } <nl> <nl> - public ByteBuffer next ( ) { <nl> + public ByteBuffer next ( ) <nl> + { <nl> i + + ; <nl> return randomKey ( random ) ; <nl> } <nl> <nl> - public void remove ( ) { <nl> + public void remove ( ) <nl> + { <nl> throw new UnsupportedOperationException ( ) ; <nl> } <nl> } <nl> @ @ - 68 , 33 + 75 , 40 @ @ public class KeyGenerator <nl> { <nl> private int i , start , n ; <nl> <nl> - IntGenerator ( int n ) { <nl> + IntGenerator ( int n ) <nl> + { <nl> this ( 0 , n ) ; <nl> } <nl> <nl> - IntGenerator ( int start , int n ) { <nl> + IntGenerator ( int start , int n ) <nl> + { <nl> this . start = start ; <nl> this . n = n ; <nl> reset ( ) ; <nl> } <nl> <nl> - public int size ( ) { <nl> + public int size ( ) <nl> + { <nl> return n - start ; <nl> } <nl> <nl> - public void reset ( ) { <nl> + public void reset ( ) <nl> + { <nl> i = start ; <nl> } <nl> <nl> - public boolean hasNext ( ) { <nl> + public boolean hasNext ( ) <nl> + { <nl> return i < n ; <nl> } <nl> <nl> - public ByteBuffer next ( ) { <nl> + public ByteBuffer next ( ) <nl> + { <nl> return ByteBufferUtil . bytes ( Integer . toString ( i + + ) ) ; <nl> } <nl> <nl> - public void remove ( ) { <nl> + public void remove ( ) <nl> + { <nl> throw new UnsupportedOperationException ( ) ; <nl> } <nl> } <nl> @ @ - 103 , 14 + 117 , 18 @ @ public class KeyGenerator <nl> { <nl> static int WORDS ; <nl> <nl> - static { <nl> - try { <nl> - BufferedReader br = new BufferedReader ( new InputStreamReader ( new FileInputStream ( " / usr / share / dict / words " ) ) ) ; <nl> - while ( br . ready ( ) ) { <nl> + static <nl> + { <nl> + try ( BufferedReader br = new BufferedReader ( new InputStreamReader ( new FileInputStream ( " / usr / share / dict / words " ) ) ) ) <nl> + { <nl> + while ( br . ready ( ) ) <nl> + { <nl> br . readLine ( ) ; <nl> WORDS + + ; <nl> } <nl> - } catch ( IOException e ) { <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> WORDS = 0 ; <nl> } <nl> } <nl> @ @ - 120 , 50 + 138 , 67 @ @ public class KeyGenerator <nl> private int skip ; <nl> byte [ ] next ; <nl> <nl> - WordGenerator ( int skip , int modulo ) { <nl> + WordGenerator ( int skip , int modulo ) <nl> + { <nl> this . skip = skip ; <nl> this . modulo = modulo ; <nl> reset ( ) ; <nl> } <nl> <nl> - public int size ( ) { <nl> + public int size ( ) <nl> + { <nl> return ( 1 + WORDS - skip ) / modulo ; <nl> } <nl> <nl> - public void reset ( ) { <nl> - try { <nl> + public void reset ( ) <nl> + { <nl> + try <nl> + { <nl> reader = new BufferedReader ( new InputStreamReader ( new FileInputStream ( " / usr / share / dict / words " ) ) ) ; <nl> - } catch ( FileNotFoundException e ) { <nl> + } <nl> + catch ( FileNotFoundException e ) <nl> + { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> - for ( int i = 0 ; i < skip ; i + + ) { <nl> - try { <nl> + for ( int i = 0 ; i < skip ; i + + ) <nl> + { <nl> + try <nl> + { <nl> reader . readLine ( ) ; <nl> - } catch ( IOException e ) { <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> } <nl> next ( ) ; <nl> } <nl> <nl> - public boolean hasNext ( ) { <nl> + public boolean hasNext ( ) <nl> + { <nl> return next ! = null ; <nl> } <nl> <nl> - public ByteBuffer next ( ) { <nl> - try { <nl> + public ByteBuffer next ( ) <nl> + { <nl> + try <nl> + { <nl> byte [ ] s = next ; <nl> - for ( int i = 0 ; i < modulo ; i + + ) { <nl> + for ( int i = 0 ; i < modulo ; i + + ) <nl> + { <nl> String line = reader . readLine ( ) ; <nl> next = line = = null ? null : line . getBytes ( ) ; <nl> } <nl> return s = = null ? null : ByteBuffer . wrap ( s ) ; <nl> - } catch ( IOException e ) { <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> } <nl> <nl> - public void remove ( ) { <nl> + public void remove ( ) <nl> + { <nl> throw new UnsupportedOperationException ( ) ; <nl> } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / VerifyTest . java b / test / unit / org / apache / cassandra / db / VerifyTest . java 
 index 53bf655 . . 4e55a60 100644 
 - - - a / test / unit / org / apache / cassandra / db / VerifyTest . java 
 + + + b / test / unit / org / apache / cassandra / db / VerifyTest . java 
 @ @ - 275 , 11 + 275 , 12 @ @ public class VerifyTest 
 SSTableReader sstable = cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) ; 
 
 
 - RandomAccessFile file = new RandomAccessFile ( sstable . descriptor . filenameFor ( sstable . descriptor . digestComponent ) , " rw " ) ; 
 - Long correctChecksum = Long . parseLong ( file . readLine ( ) ) ; 
 - file . close ( ) ; 
 - 
 - writeChecksum ( + + correctChecksum , sstable . descriptor . filenameFor ( sstable . descriptor . digestComponent ) ) ; 
 + try ( RandomAccessFile file = new RandomAccessFile ( sstable . descriptor . filenameFor ( sstable . descriptor . digestComponent ) , " rw " ) ) 
 + { 
 + Long correctChecksum = Long . valueOf ( file . readLine ( ) ) ; 
 + 
 + writeChecksum ( + + correctChecksum , sstable . descriptor . filenameFor ( sstable . descriptor . digestComponent ) ) ; 
 + } 
 
 try ( Verifier verifier = new Verifier ( cfs , sstable , false ) ) 
 { 
 @ @ - 373 , 13 + 374 , 15 @ @ public class VerifyTest 
 
 protected long simpleFullChecksum ( String filename ) throws IOException 
 { 
 - FileInputStream inputStream = new FileInputStream ( filename ) ; 
 - CRC32 checksum = new CRC32 ( ) ; 
 - CheckedInputStream cinStream = new CheckedInputStream ( inputStream , checksum ) ; 
 - byte [ ] b = new byte [ 128 ] ; 
 - while ( cinStream . read ( b ) > = 0 ) { 
 + try ( FileInputStream inputStream = new FileInputStream ( filename ) ) 
 + { 
 + CRC32 checksum = new CRC32 ( ) ; 
 + CheckedInputStream cinStream = new CheckedInputStream ( inputStream , checksum ) ; 
 + byte [ ] b = new byte [ 128 ] ; 
 + while ( cinStream . read ( b ) > = 0 ) { 
 + } 
 + return cinStream . getChecksum ( ) . getValue ( ) ; 
 } 
 - return cinStream . getChecksum ( ) . getValue ( ) ; 
 } 
 
 protected void writeChecksum ( long checksum , String filePath ) 
 diff - - git a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java 
 index 44be53d . . 2386160 100644 
 - - - a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java 
 + + + b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java 
 @ @ - 144 , 25 + 144 , 26 @ @ public class BufferedRandomAccessFileTest 
 public void testReadAndWriteOnCapacity ( ) throws IOException 
 { 
 File tmpFile = File . createTempFile ( " readtest " , " bin " ) ; 
 - SequentialWriter w = new SequentialWriter ( tmpFile ) ; 
 - 
 - / / Fully write the file and sync . . 
 - byte [ ] in = generateByteArray ( RandomAccessReader . DEFAULT _ BUFFER _ SIZE ) ; 
 - w . write ( in ) ; 
 - 
 - try ( FileHandle . Builder builder = new FileHandle . Builder ( w . getPath ( ) ) ; 
 - FileHandle fh = builder . complete ( ) ; 
 - RandomAccessReader r = fh . createReader ( ) ) 
 + try ( SequentialWriter w = new SequentialWriter ( tmpFile ) ) 
 { 
 - / / Read it into a same size array . 
 - byte [ ] out = new byte [ RandomAccessReader . DEFAULT _ BUFFER _ SIZE ] ; 
 - r . read ( out ) ; 
 - 
 - / / Cannot read any more . 
 - int negone = r . read ( ) ; 
 - assert negone = = - 1 : " We read past the end of the file , should have gotten EOF - 1 . Instead , " + negone ; 
 - 
 - w . finish ( ) ; 
 + / / Fully write the file and sync . . 
 + byte [ ] in = generateByteArray ( RandomAccessReader . DEFAULT _ BUFFER _ SIZE ) ; 
 + w . write ( in ) ; 
 + 
 + try ( FileHandle . Builder builder = new FileHandle . Builder ( w . getPath ( ) ) ; 
 + FileHandle fh = builder . complete ( ) ; 
 + RandomAccessReader r = fh . createReader ( ) ) 
 + { 
 + / / Read it into a same size array . 
 + byte [ ] out = new byte [ RandomAccessReader . DEFAULT _ BUFFER _ SIZE ] ; 
 + r . read ( out ) ; 
 + 
 + / / Cannot read any more . 
 + int negone = r . read ( ) ; 
 + assert negone = = - 1 : " We read past the end of the file , should have gotten EOF - 1 . Instead , " + negone ; 
 + 
 + w . finish ( ) ; 
 + } 
 } 
 } 
 
 @ @ - 170 , 32 + 171 , 34 @ @ public class BufferedRandomAccessFileTest 
 public void testLength ( ) throws IOException 
 { 
 File tmpFile = File . createTempFile ( " lengthtest " , " bin " ) ; 
 - SequentialWriter w = new SequentialWriter ( tmpFile ) ; 
 - assertEquals ( 0 , w . length ( ) ) ; 
 - 
 - / / write a chunk smaller then our buffer , so will not be flushed 
 - / / to disk 
 - byte [ ] lessThenBuffer = generateByteArray ( RandomAccessReader . DEFAULT _ BUFFER _ SIZE / 2 ) ; 
 - w . write ( lessThenBuffer ) ; 
 - assertEquals ( lessThenBuffer . length , w . length ( ) ) ; 
 - 
 - / / sync the data and check length 
 - w . sync ( ) ; 
 - assertEquals ( lessThenBuffer . length , w . length ( ) ) ; 
 - 
 - / / write more then the buffer can hold and check length 
 - byte [ ] biggerThenBuffer = generateByteArray ( RandomAccessReader . DEFAULT _ BUFFER _ SIZE * 2 ) ; 
 - w . write ( biggerThenBuffer ) ; 
 - assertEquals ( biggerThenBuffer . length + lessThenBuffer . length , w . length ( ) ) ; 
 - 
 - w . finish ( ) ; 
 - 
 - / / will use cachedlength 
 - try ( FileHandle . Builder builder = new FileHandle . Builder ( tmpFile . getPath ( ) ) ; 
 - FileHandle fh = builder . complete ( ) ; 
 - RandomAccessReader r = fh . createReader ( ) ) 
 + try ( SequentialWriter w = new SequentialWriter ( tmpFile ) ) 
 { 
 - assertEquals ( lessThenBuffer . length + biggerThenBuffer . length , r . length ( ) ) ; 
 + assertEquals ( 0 , w . length ( ) ) ; 
 + 
 + / / write a chunk smaller then our buffer , so will not be flushed 
 + / / to disk 
 + byte [ ] lessThenBuffer = generateByteArray ( RandomAccessReader . DEFAULT _ BUFFER _ SIZE / 2 ) ; 
 + w . write ( lessThenBuffer ) ; 
 + assertEquals ( lessThenBuffer . length , w . length ( ) ) ; 
 + 
 + / / sync the data and check length 
 + w . sync ( ) ; 
 + assertEquals ( lessThenBuffer . length , w . length ( ) ) ; 
 + 
 + / / write more then the buffer can hold and check length 
 + byte [ ] biggerThenBuffer = generateByteArray ( RandomAccessReader . DEFAULT _ BUFFER _ SIZE * 2 ) ; 
 + w . write ( biggerThenBuffer ) ; 
 + assertEquals ( biggerThenBuffer . length + lessThenBuffer . length , w . length ( ) ) ; 
 + 
 + w . finish ( ) ; 
 + 
 + / / will use cachedlength 
 + try ( FileHandle . Builder builder = new FileHandle . Builder ( tmpFile . getPath ( ) ) ; 
 + FileHandle fh = builder . complete ( ) ; 
 + RandomAccessReader r = fh . createReader ( ) ) 
 + { 
 + assertEquals ( lessThenBuffer . length + biggerThenBuffer . length , r . length ( ) ) ; 
 + } 
 } 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / io / util / FileSegmentInputStreamTest . java b / test / unit / org / apache / cassandra / io / util / FileSegmentInputStreamTest . java 
 index fcee9b7 . . b040d27 100644 
 - - - a / test / unit / org / apache / cassandra / io / util / FileSegmentInputStreamTest . java 
 + + + b / test / unit / org / apache / cassandra / io / util / FileSegmentInputStreamTest . java 
 @ @ - 88 , 44 + 88 , 56 @ @ public class FileSegmentInputStreamTest 
 @ Test ( expected = UnsupportedOperationException . class ) 
 public void testMarkNotSupported ( ) throws Exception 
 { 
 - FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 0 ) ; 
 - assertFalse ( reader . markSupported ( ) ) ; 
 - assertEquals ( 0 , reader . bytesPastMark ( null ) ) ; 
 - reader . mark ( ) ; 
 + try ( FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 0 ) ) 
 + { 
 + assertFalse ( reader . markSupported ( ) ) ; 
 + assertEquals ( 0 , reader . bytesPastMark ( null ) ) ; 
 + reader . mark ( ) ; 
 + } 
 } 
 
 @ Test ( expected = UnsupportedOperationException . class ) 
 public void testResetNotSupported ( ) throws Exception 
 { 
 - FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 0 ) ; 
 - reader . reset ( null ) ; 
 + try ( FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 0 ) ) 
 + { 
 + reader . reset ( null ) ; 
 + } 
 } 
 
 @ Test ( expected = IllegalArgumentException . class ) 
 public void testSeekNegative ( ) throws Exception 
 { 
 - FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 0 ) ; 
 - reader . seek ( - 1 ) ; 
 + try ( FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 0 ) ) 
 + { 
 + reader . seek ( - 1 ) ; 
 + } 
 } 
 
 @ Test ( expected = IllegalArgumentException . class ) 
 public void testSeekBeforeOffset ( ) throws Exception 
 { 
 - FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 1024 ) ; 
 - reader . seek ( 1023 ) ; 
 + try ( FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 1024 ) ) 
 + { 
 + reader . seek ( 1023 ) ; 
 + } 
 } 
 
 @ Test ( expected = IllegalArgumentException . class ) 
 public void testSeekPastLength ( ) throws Exception 
 { 
 - FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 1024 ) ; 
 - reader . seek ( 2049 ) ; 
 + try ( FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 1024 ) ) 
 + { 
 + reader . seek ( 2049 ) ; 
 + } 
 } 
 
 @ Test ( expected = EOFException . class ) 
 public void testReadBytesTooMany ( ) throws Exception 
 { 
 - FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 1024 ) ; 
 - ByteBufferUtil . read ( reader , 2049 ) ; 
 + try ( FileSegmentInputStream reader = new FileSegmentInputStream ( allocateBuffer ( 1024 ) , " " , 1024 ) ) 
 + { 
 + ByteBufferUtil . read ( reader , 2049 ) ; 
 + } 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java b / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java 
 index 09612c8 . . 0e7d8c8 100644 
 - - - a / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java 
 + + + b / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java 
 @ @ - 97 , 9 + 97 , 8 @ @ public class FileUtilsTest 
 
 private File createFile ( File file , long size ) 
 { 
 - try 
 + try ( RandomAccessFile f = new RandomAccessFile ( file , " rw " ) ) 
 { 
 - RandomAccessFile f = new RandomAccessFile ( file , " rw " ) ; 
 f . setLength ( size ) ; 
 } 
 catch ( Exception e ) 
 diff - - git a / test / unit / org / apache / cassandra / service / ProtocolBetaVersionTest . java b / test / unit / org / apache / cassandra / service / ProtocolBetaVersionTest . java 
 index 7eae7bb . . 238c2f9 100644 
 - - - a / test / unit / org / apache / cassandra / service / ProtocolBetaVersionTest . java 
 + + + b / test / unit / org / apache / cassandra / service / ProtocolBetaVersionTest . java 
 @ @ - 69 , 9 + 69 , 8 @ @ public class ProtocolBetaVersionTest extends CQLTester 
 @ Test 
 public void unforcedProtocolVersionTest ( ) throws Exception 
 { 
 - try 
 + try ( SimpleClient client = new SimpleClient ( nativeAddr . getHostAddress ( ) , nativePort , Server . BETA _ VERSION , false , new EncryptionOptions . ClientEncryptionOptions ( ) ) ) 
 { 
 - SimpleClient client = new SimpleClient ( nativeAddr . getHostAddress ( ) , nativePort , Server . BETA _ VERSION , false , new EncryptionOptions . ClientEncryptionOptions ( ) ) ; 
 client . connect ( false ) ; 
 fail ( " Exception should have been thrown " ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / utils / KeyGenerator . java b / test / unit / org / apache / cassandra / utils / KeyGenerator . java 
 index 8a9d8b8 . . df95867 100644 
 - - - a / test / unit / org / apache / cassandra / utils / KeyGenerator . java 
 + + + b / test / unit / org / apache / cassandra / utils / KeyGenerator . java 
 @ @ - 24 , 7 + 24 , 8 @ @ import java . util . Random ; 
 
 public class KeyGenerator 
 { 
 - private static ByteBuffer randomKey ( Random r ) { 
 + private static ByteBuffer randomKey ( Random r ) 
 + { 
 byte [ ] bytes = new byte [ 48 ] ; 
 r . nextBytes ( bytes ) ; 
 return ByteBuffer . wrap ( bytes ) ; 
 @ @ - 35 , 31 + 36 , 37 @ @ public class KeyGenerator 
 int i , n , seed ; 
 Random random ; 
 
 - RandomStringGenerator ( int seed , int n ) { 
 + RandomStringGenerator ( int seed , int n ) 
 + { 
 i = 0 ; 
 this . seed = seed ; 
 this . n = n ; 
 reset ( ) ; 
 } 
 
 - public int size ( ) { 
 + public int size ( ) 
 + { 
 return n ; 
 } 
 
 - public void reset ( ) { 
 + public void reset ( ) 
 + { 
 random = new Random ( seed ) ; 
 } 
 
 - public boolean hasNext ( ) { 
 + public boolean hasNext ( ) 
 + { 
 return i < n ; 
 } 
 
 - public ByteBuffer next ( ) { 
 + public ByteBuffer next ( ) 
 + { 
 i + + ; 
 return randomKey ( random ) ; 
 } 
 
 - public void remove ( ) { 
 + public void remove ( ) 
 + { 
 throw new UnsupportedOperationException ( ) ; 
 } 
 } 
 @ @ - 68 , 33 + 75 , 40 @ @ public class KeyGenerator 
 { 
 private int i , start , n ; 
 
 - IntGenerator ( int n ) { 
 + IntGenerator ( int n ) 
 + { 
 this ( 0 , n ) ; 
 } 
 
 - IntGenerator ( int start , int n ) { 
 + IntGenerator ( int start , int n ) 
 + { 
 this . start = start ; 
 this . n = n ; 
 reset ( ) ; 
 } 
 
 - public int size ( ) { 
 + public int size ( ) 
 + { 
 return n - start ; 
 } 
 
 - public void reset ( ) { 
 + public void reset ( ) 
 + { 
 i = start ; 
 } 
 
 - public boolean hasNext ( ) { 
 + public boolean hasNext ( ) 
 + { 
 return i < n ; 
 } 
 
 - public ByteBuffer next ( ) { 
 + public ByteBuffer next ( ) 
 + { 
 return ByteBufferUtil . bytes ( Integer . toString ( i + + ) ) ; 
 } 
 
 - public void remove ( ) { 
 + public void remove ( ) 
 + { 
 throw new UnsupportedOperationException ( ) ; 
 } 
 } 
 @ @ - 103 , 14 + 117 , 18 @ @ public class KeyGenerator 
 { 
 static int WORDS ; 
 
 - static { 
 - try { 
 - BufferedReader br = new BufferedReader ( new InputStreamReader ( new FileInputStream ( " / usr / share / dict / words " ) ) ) ; 
 - while ( br . ready ( ) ) { 
 + static 
 + { 
 + try ( BufferedReader br = new BufferedReader ( new InputStreamReader ( new FileInputStream ( " / usr / share / dict / words " ) ) ) ) 
 + { 
 + while ( br . ready ( ) ) 
 + { 
 br . readLine ( ) ; 
 WORDS + + ; 
 } 
 - } catch ( IOException e ) { 
 + } 
 + catch ( IOException e ) 
 + { 
 WORDS = 0 ; 
 } 
 } 
 @ @ - 120 , 50 + 138 , 67 @ @ public class KeyGenerator 
 private int skip ; 
 byte [ ] next ; 
 
 - WordGenerator ( int skip , int modulo ) { 
 + WordGenerator ( int skip , int modulo ) 
 + { 
 this . skip = skip ; 
 this . modulo = modulo ; 
 reset ( ) ; 
 } 
 
 - public int size ( ) { 
 + public int size ( ) 
 + { 
 return ( 1 + WORDS - skip ) / modulo ; 
 } 
 
 - public void reset ( ) { 
 - try { 
 + public void reset ( ) 
 + { 
 + try 
 + { 
 reader = new BufferedReader ( new InputStreamReader ( new FileInputStream ( " / usr / share / dict / words " ) ) ) ; 
 - } catch ( FileNotFoundException e ) { 
 + } 
 + catch ( FileNotFoundException e ) 
 + { 
 throw new RuntimeException ( e ) ; 
 } 
 - for ( int i = 0 ; i < skip ; i + + ) { 
 - try { 
 + for ( int i = 0 ; i < skip ; i + + ) 
 + { 
 + try 
 + { 
 reader . readLine ( ) ; 
 - } catch ( IOException e ) { 
 + } 
 + catch ( IOException e ) 
 + { 
 throw new RuntimeException ( e ) ; 
 } 
 } 
 next ( ) ; 
 } 
 
 - public boolean hasNext ( ) { 
 + public boolean hasNext ( ) 
 + { 
 return next ! = null ; 
 } 
 
 - public ByteBuffer next ( ) { 
 - try { 
 + public ByteBuffer next ( ) 
 + { 
 + try 
 + { 
 byte [ ] s = next ; 
 - for ( int i = 0 ; i < modulo ; i + + ) { 
 + for ( int i = 0 ; i < modulo ; i + + ) 
 + { 
 String line = reader . readLine ( ) ; 
 next = line = = null ? null : line . getBytes ( ) ; 
 } 
 return s = = null ? null : ByteBuffer . wrap ( s ) ; 
 - } catch ( IOException e ) { 
 + } 
 + catch ( IOException e ) 
 + { 
 throw new RuntimeException ( e ) ; 
 } 
 } 
 
 - public void remove ( ) { 
 + public void remove ( ) 
 + { 
 throw new UnsupportedOperationException ( ) ; 
 } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
