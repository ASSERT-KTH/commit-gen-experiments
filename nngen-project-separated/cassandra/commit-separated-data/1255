BLEU SCORE: 0.05341087579952926

TEST MSG: Fix potential ClassCastException during upgrade
GENERATED MSG: add estimated tasks to LeveledCompactionStrategy

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 3b63714 . . 84b85cf 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 - rc2 <nl> + * Fix potential ClassCastException while upgrading ( CASSANDRA - 10468 ) <nl> * Fix NPE in MVs on update ( CASSANDRA - 10503 ) <nl> * Only include modified cell data in indexing deltas ( CASSANDRA - 10438 ) <nl> * Do not load keyspace when creating sstable writer ( CASSANDRA - 10443 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / rows / BTreeRow . java b / src / java / org / apache / cassandra / db / rows / BTreeRow . java <nl> index a2a8c5f . . 0d8eda8 100644 <nl> - - - a / src / java / org / apache / cassandra / db / rows / BTreeRow . java <nl> + + + b / src / java / org / apache / cassandra / db / rows / BTreeRow . java <nl> @ @ - 464 , 7 + 464 , 7 @ @ public class BTreeRow extends AbstractRow <nl> <nl> private int getComplexIdx ( ) <nl> { <nl> - return reversed ? data . length - simpleIdx - 1 : simpleIdx ; <nl> + return reversed ? data . length - complexIdx - 1 : complexIdx ; <nl> } <nl> <nl> private int getComplexIdxAndIncrement ( )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 28e4932 . . a67bbda 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 3 , 7 + 3 , 7 @ @ <nl> * Thrift sockets are not properly buffered ( CASSANDRA - 3261 ) <nl> * performance improvement for bytebufferutil compare function ( CASSANDRA - 3286 ) <nl> * add system . versions ColumnFamily ( CASSANDRA - 3140 ) <nl> - <nl> + * off - heap cache to use sun . misc . Unsafe instead of JNA ( CASSANDRA - 3271 ) <nl> <nl> 1 . 0 . 0 - final <nl> * fix bug preventing obsolete commitlog segments from being removed <nl> diff - - git a / src / java / org / apache / cassandra / cache / FreeableMemory . java b / src / java / org / apache / cassandra / cache / FreeableMemory . java <nl> index bcd8850 . . 52189c8 100644 <nl> - - - a / src / java / org / apache / cassandra / cache / FreeableMemory . java <nl> + + + b / src / java / org / apache / cassandra / cache / FreeableMemory . java <nl> @ @ - 20 , 11 + 20 , 9 @ @ package org . apache . cassandra . cache ; <nl> * <nl> * / <nl> <nl> - <nl> - import java . io . IOException ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> - import com . sun . jna . Memory ; <nl> + import org . apache . cassandra . io . util . Memory ; <nl> <nl> public class FreeableMemory extends Memory <nl> { <nl> @ @ - 58 , 23 + 56 , 16 @ @ public class FreeableMemory extends Memory <nl> free ( ) ; <nl> } <nl> <nl> - private void free ( ) <nl> - { <nl> - assert peer ! = 0 ; <nl> - super . finalize ( ) ; / / calls free and sets peer to zero <nl> - } <nl> - <nl> - / * * <nl> - * avoid re - freeing already - freed memory <nl> - * / <nl> @ Override <nl> - protected void finalize ( ) <nl> + protected void finalize ( ) throws Throwable <nl> { <nl> assert references . get ( ) < = 0 ; <nl> assert peer = = 0 ; <nl> + super . finalize ( ) ; <nl> } <nl> - <nl> - public byte getValidByte ( long offset ) <nl> + <nl> + @ Override <nl> + public byte getByte ( long offset ) <nl> { <nl> assert peer ! = 0 ; <nl> return super . getByte ( offset ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cache / SerializingCacheProvider . java b / src / java / org / apache / cassandra / cache / SerializingCacheProvider . java <nl> index 8fb5aa5 . . f4eb07e 100644 <nl> - - - a / src / java / org / apache / cassandra / cache / SerializingCacheProvider . java <nl> + + + b / src / java / org / apache / cassandra / cache / SerializingCacheProvider . java <nl> @ @ - 20 , 26 + 20 , 11 @ @ package org . apache . cassandra . cache ; <nl> * <nl> * / <nl> <nl> - import org . apache . cassandra . config . ConfigurationException ; <nl> import org . apache . cassandra . db . ColumnFamily ; <nl> import org . apache . cassandra . db . DecoratedKey ; <nl> <nl> - import com . sun . jna . Memory ; <nl> - <nl> public class SerializingCacheProvider implements IRowCacheProvider <nl> { <nl> - public SerializingCacheProvider ( ) throws ConfigurationException <nl> - { <nl> - try <nl> - { <nl> - Memory . class . getName ( ) ; <nl> - } <nl> - catch ( NoClassDefFoundError e ) <nl> - { <nl> - throw new ConfigurationException ( " Cannot initialize SerializationCache without JNA in the class path " ) ; <nl> - } <nl> - } <nl> - <nl> public ICache < DecoratedKey , ColumnFamily > create ( int capacity , String tableName , String cfName ) <nl> { <nl> return new SerializingCache < DecoratedKey , ColumnFamily > ( capacity , ColumnFamily . serializer ( ) , tableName , cfName ) ; <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index ce92e81 . . 9c330f8 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 67 , 7 + 67 , 7 @ @ public final class CFMetaData <nl> public final static int DEFAULT _ MIN _ COMPACTION _ THRESHOLD = 4 ; <nl> public final static int DEFAULT _ MAX _ COMPACTION _ THRESHOLD = 32 ; <nl> public final static double DEFAULT _ MERGE _ SHARDS _ CHANCE = 0 . 1 ; <nl> - public final static IRowCacheProvider DEFAULT _ ROW _ CACHE _ PROVIDER = initDefaultRowCacheProvider ( ) ; <nl> + public final static IRowCacheProvider DEFAULT _ ROW _ CACHE _ PROVIDER = new SerializingCacheProvider ( ) ; <nl> public final static String DEFAULT _ COMPACTION _ STRATEGY _ CLASS = " SizeTieredCompactionStrategy " ; <nl> public final static ByteBuffer DEFAULT _ KEY _ NAME = ByteBufferUtil . bytes ( " KEY " ) ; <nl> <nl> @ @ - 97 , 18 + 97 , 6 @ @ public final class CFMetaData <nl> } <nl> } <nl> <nl> - private static IRowCacheProvider initDefaultRowCacheProvider ( ) <nl> - { <nl> - try <nl> - { <nl> - return new SerializingCacheProvider ( ) ; <nl> - } <nl> - catch ( ConfigurationException e ) <nl> - { <nl> - return new ConcurrentLinkedHashCacheProvider ( ) ; <nl> - } <nl> - } <nl> - <nl> / / REQUIRED <nl> public final Integer cfId ; / / internal id , never exposed to user <nl> public final String ksName ; / / name of keyspace <nl> diff - - git a / src / java / org / apache / cassandra / io / util / Memory . java b / src / java / org / apache / cassandra / io / util / Memory . java <nl> new file mode 100644 <nl> index 0000000 . . 2fb21a9 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / io / util / Memory . java <nl> @ @ - 0 , 0 + 1 , 159 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * <nl> + * / <nl> + package org . apache . cassandra . io . util ; <nl> + <nl> + import sun . misc . Unsafe ; <nl> + <nl> + import java . lang . reflect . Field ; <nl> + <nl> + public class Memory <nl> + { <nl> + private static final Unsafe unsafe ; <nl> + <nl> + static <nl> + { <nl> + try <nl> + { <nl> + Field field = sun . misc . Unsafe . class . getDeclaredField ( " theUnsafe " ) ; <nl> + field . setAccessible ( true ) ; <nl> + unsafe = ( sun . misc . Unsafe ) field . get ( null ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new AssertionError ( e ) ; <nl> + } <nl> + } <nl> + <nl> + protected long peer ; <nl> + / / size of the memory region <nl> + private final long size ; <nl> + <nl> + protected Memory ( long bytes ) <nl> + { <nl> + size = bytes ; <nl> + peer = unsafe . allocateMemory ( size ) ; <nl> + } <nl> + <nl> + public static Memory allocate ( long bytes ) <nl> + { <nl> + if ( bytes < 0 ) <nl> + throw new IllegalArgumentException ( ) ; <nl> + <nl> + return new Memory ( bytes ) ; <nl> + } <nl> + <nl> + public void setByte ( long offset , byte b ) <nl> + { <nl> + checkPosition ( offset ) ; <nl> + unsafe . putByte ( peer + offset , b ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Transfers count bytes from buffer to Memory <nl> + * <nl> + * @ param memoryOffset start offset in the memory <nl> + * @ param buffer the data buffer <nl> + * @ param bufferOffset start offset of the buffer <nl> + * @ param count number of bytes to transfer <nl> + * / <nl> + public void setBytes ( long memoryOffset , byte [ ] buffer , int bufferOffset , int count ) <nl> + { <nl> + if ( buffer = = null ) <nl> + throw new NullPointerException ( ) ; <nl> + else if ( bufferOffset < 0 <nl> + | | count < 0 <nl> + | | bufferOffset + count > buffer . length ) <nl> + throw new IndexOutOfBoundsException ( ) ; <nl> + else if ( count = = 0 ) <nl> + return ; <nl> + <nl> + checkPosition ( memoryOffset ) ; <nl> + long end = memoryOffset + count ; <nl> + checkPosition ( end - 1 ) ; <nl> + while ( memoryOffset < end ) <nl> + unsafe . putByte ( peer + memoryOffset + + , buffer [ bufferOffset + + ] ) ; <nl> + } <nl> + <nl> + public byte getByte ( long offset ) <nl> + { <nl> + checkPosition ( offset ) ; <nl> + return unsafe . getByte ( peer + offset ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Transfers count bytes from Memory starting at memoryOffset to buffer starting at bufferOffset <nl> + * <nl> + * @ param memoryOffset start offset in the memory <nl> + * @ param buffer the data buffer <nl> + * @ param bufferOffset start offset of the buffer <nl> + * @ param count number of bytes to transfer <nl> + * / <nl> + public void getBytes ( long memoryOffset , byte [ ] buffer , int bufferOffset , int count ) <nl> + { <nl> + if ( buffer = = null ) <nl> + throw new NullPointerException ( ) ; <nl> + else if ( bufferOffset < 0 | | count < 0 | | count > buffer . length - bufferOffset ) <nl> + throw new IndexOutOfBoundsException ( ) ; <nl> + else if ( count = = 0 ) <nl> + return ; <nl> + <nl> + checkPosition ( memoryOffset ) ; <nl> + long end = memoryOffset + count ; <nl> + checkPosition ( end - 1 ) ; <nl> + while ( memoryOffset < end ) <nl> + buffer [ bufferOffset + + ] = unsafe . getByte ( peer + memoryOffset + + ) ; <nl> + } <nl> + <nl> + private void checkPosition ( long offset ) <nl> + { <nl> + if ( peer = = 0 ) <nl> + throw new IllegalStateException ( " Memory was freed " ) ; <nl> + <nl> + if ( offset < 0 | | offset > = size ) <nl> + throw new IndexOutOfBoundsException ( " Illegal offset : " + offset + " , size : " + size ) ; <nl> + } <nl> + <nl> + public void free ( ) <nl> + { <nl> + assert peer ! = 0 ; <nl> + unsafe . freeMemory ( peer ) ; <nl> + peer = 0 ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void finalize ( ) throws Throwable <nl> + { <nl> + try <nl> + { <nl> + if ( peer ! = 0 ) <nl> + free ( ) ; <nl> + } <nl> + finally <nl> + { <nl> + super . finalize ( ) ; <nl> + } <nl> + } <nl> + <nl> + public long size ( ) <nl> + { <nl> + return size ; <nl> + } <nl> + } <nl> + <nl> diff - - git a / src / java / org / apache / cassandra / io / util / MemoryInputStream . java b / src / java / org / apache / cassandra / io / util / MemoryInputStream . java <nl> index aa264fa . . d8ab08d 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / MemoryInputStream . java <nl> + + + b / src / java / org / apache / cassandra / io / util / MemoryInputStream . java <nl> @ @ - 38 , 9 + 38 , 15 @ @ public class MemoryInputStream extends AbstractDataInput <nl> <nl> public int read ( ) throws IOException <nl> { <nl> - return mem . getValidByte ( position + + ) & 0xFF ; <nl> + return mem . getByte ( position + + ) & 0xFF ; <nl> } <nl> - <nl> + <nl> + public void readFully ( byte [ ] buffer , int offset , int count ) throws IOException <nl> + { <nl> + mem . getBytes ( position , buffer , offset , count ) ; <nl> + position + = count ; <nl> + } <nl> + <nl> protected void seekInternal ( int pos ) <nl> { <nl> position = pos ; <nl> diff - - git a / src / java / org / apache / cassandra / io / util / MemoryOutputStream . java b / src / java / org / apache / cassandra / io / util / MemoryOutputStream . java <nl> index 235b9d7 . . fd5bc33 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / MemoryOutputStream . java <nl> + + + b / src / java / org / apache / cassandra / io / util / MemoryOutputStream . java <nl> @ @ - 21 , 10 + 21 , 9 @ @ package org . apache . cassandra . io . util ; <nl> * / <nl> <nl> <nl> + import java . io . IOException ; <nl> import java . io . OutputStream ; <nl> <nl> - import com . sun . jna . Memory ; <nl> - <nl> / * * <nl> * This class provides a way to stream the writes into the { @ link Memory } <nl> * / <nl> @ @ - 39 , 16 + 38 , 20 @ @ public class MemoryOutputStream extends OutputStream <nl> this . mem = mem ; <nl> } <nl> <nl> - @ Override <nl> public void write ( int b ) <nl> { <nl> - mem . setByte ( this . position , ( byte ) b ) ; <nl> - this . position + + ; <nl> + mem . setByte ( position + + , ( byte ) b ) ; <nl> } <nl> - <nl> + <nl> + @ Override <nl> + public void write ( byte [ ] b , int off , int len ) throws IOException <nl> + { <nl> + mem . setBytes ( position , b , off , len ) ; <nl> + position + = len ; <nl> + } <nl> + <nl> public int position ( ) <nl> { <nl> - return this . position ; <nl> + return position ; <nl> } <nl> - <nl> } <nl> diff - - git a / src / resources / org / apache / cassandra / cli / CliHelp . yaml b / src / resources / org / apache / cassandra / cli / CliHelp . yaml <nl> index 7414955 . . a471b50 100644 <nl> - - - a / src / resources / org / apache / cassandra / cli / CliHelp . yaml <nl> + + + b / src / resources / org / apache / cassandra / cli / CliHelp . yaml <nl> @ @ - 544 , 13 + 544 , 12 @ @ commands : <nl> <nl> Supported values are : <nl> - ConcurrentLinkedHashCacheProvider <nl> - - SerializingCacheProvider ( requires JNA ) <nl> + - SerializingCacheProvider <nl> <nl> It is also valid to specify the fully - qualified class name to a class <nl> that implements org . apache . cassandra . cache . IRowCacheProvider . <nl> <nl> - row _ cache _ provider defaults to SerializingCacheProvider if you have JNA <nl> - enabled , otherwise ConcurrentLinkedHashCacheProvider . <nl> + row _ cache _ provider defaults to SerializingCacheProvider . <nl> SerializingCacheProvider serialises the contents of the row and stores <nl> it in native memory , i . e . , off the JVM Heap . Serialized rows take <nl> significantly less memory than " live " rows in the JVM , so you can cache <nl> @ @ - 805 , 19 + 804 , 17 @ @ commands : <nl> <nl> Supported values are : <nl> - ConcurrentLinkedHashCacheProvider <nl> - - SerializingCacheProvider ( requires JNA ) <nl> + - SerializingCacheProvider <nl> <nl> It is also valid to specify the fully - qualified class name to a class <nl> that implements org . apache . cassandra . cache . IRowCacheProvider . <nl> <nl> - row _ cache _ provider defaults to ConcurrentLinkedHashCacheProvider , <nl> - but if you have JNA installed you should usually use <nl> - SerializingCacheProvider , which serialises the contents of the <nl> - row and stores it in native memory , i . e . , off the JVM <nl> - Heap . Serialized rows take significantly less memory than <nl> - " live " rows in the JVM , so you can cache more rows in a given <nl> - memory footprint . And storing the cache off - heap means you <nl> - can use smaller heap sizes , reducing the impact of GC pauses . <nl> + row _ cache _ provider defaults to SerializingCacheProvider . <nl> + SerializingCacheProvider serialises the contents of the row and stores <nl> + it in native memory , i . e . , off the JVM Heap . Serialized rows take <nl> + significantly less memory than " live " rows in the JVM , so you can cache <nl> + more rows in a given memory footprint . And storing the cache off - heap <nl> + means you can use smaller heap sizes , reducing the impact of GC pauses . <nl> <nl> - compression _ options : Options related to compression . <nl> Options have the form { key : value } . <nl> diff - - git a / test / unit / org / apache / cassandra / cache / CacheProviderTest . java b / test / unit / org / apache / cassandra / cache / CacheProviderTest . java <nl> index 3e10c10 . . e068343 100644 <nl> - - - a / test / unit / org / apache / cassandra / cache / CacheProviderTest . java <nl> + + + b / test / unit / org / apache / cassandra / cache / CacheProviderTest . java <nl> @ @ - 117 , 6 + 117 , 6 @ @ public class CacheProviderTest extends SchemaLoader <nl> ICache < String , ColumnFamily > cache = new SerializingCache < String , ColumnFamily > ( CAPACITY , ColumnFamily . serializer ( ) , tableName , cfName ) ; <nl> ColumnFamily cf = createCF ( ) ; <nl> simpleCase ( cf , cache ) ; <nl> - / / concurrentCase ( cf , cache ) ; <nl> + concurrentCase ( cf , cache ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 3b63714 . . 84b85cf 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 - rc2 
 + * Fix potential ClassCastException while upgrading ( CASSANDRA - 10468 ) 
 * Fix NPE in MVs on update ( CASSANDRA - 10503 ) 
 * Only include modified cell data in indexing deltas ( CASSANDRA - 10438 ) 
 * Do not load keyspace when creating sstable writer ( CASSANDRA - 10443 ) 
 diff - - git a / src / java / org / apache / cassandra / db / rows / BTreeRow . java b / src / java / org / apache / cassandra / db / rows / BTreeRow . java 
 index a2a8c5f . . 0d8eda8 100644 
 - - - a / src / java / org / apache / cassandra / db / rows / BTreeRow . java 
 + + + b / src / java / org / apache / cassandra / db / rows / BTreeRow . java 
 @ @ - 464 , 7 + 464 , 7 @ @ public class BTreeRow extends AbstractRow 
 
 private int getComplexIdx ( ) 
 { 
 - return reversed ? data . length - simpleIdx - 1 : simpleIdx ; 
 + return reversed ? data . length - complexIdx - 1 : complexIdx ; 
 } 
 
 private int getComplexIdxAndIncrement ( )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 28e4932 . . a67bbda 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 3 , 7 + 3 , 7 @ @ 
 * Thrift sockets are not properly buffered ( CASSANDRA - 3261 ) 
 * performance improvement for bytebufferutil compare function ( CASSANDRA - 3286 ) 
 * add system . versions ColumnFamily ( CASSANDRA - 3140 ) 
 - 
 + * off - heap cache to use sun . misc . Unsafe instead of JNA ( CASSANDRA - 3271 ) 
 
 1 . 0 . 0 - final 
 * fix bug preventing obsolete commitlog segments from being removed 
 diff - - git a / src / java / org / apache / cassandra / cache / FreeableMemory . java b / src / java / org / apache / cassandra / cache / FreeableMemory . java 
 index bcd8850 . . 52189c8 100644 
 - - - a / src / java / org / apache / cassandra / cache / FreeableMemory . java 
 + + + b / src / java / org / apache / cassandra / cache / FreeableMemory . java 
 @ @ - 20 , 11 + 20 , 9 @ @ package org . apache . cassandra . cache ; 
 * 
 * / 
 
 - 
 - import java . io . IOException ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 
 - import com . sun . jna . Memory ; 
 + import org . apache . cassandra . io . util . Memory ; 
 
 public class FreeableMemory extends Memory 
 { 
 @ @ - 58 , 23 + 56 , 16 @ @ public class FreeableMemory extends Memory 
 free ( ) ; 
 } 
 
 - private void free ( ) 
 - { 
 - assert peer ! = 0 ; 
 - super . finalize ( ) ; / / calls free and sets peer to zero 
 - } 
 - 
 - / * * 
 - * avoid re - freeing already - freed memory 
 - * / 
 @ Override 
 - protected void finalize ( ) 
 + protected void finalize ( ) throws Throwable 
 { 
 assert references . get ( ) < = 0 ; 
 assert peer = = 0 ; 
 + super . finalize ( ) ; 
 } 
 - 
 - public byte getValidByte ( long offset ) 
 + 
 + @ Override 
 + public byte getByte ( long offset ) 
 { 
 assert peer ! = 0 ; 
 return super . getByte ( offset ) ; 
 diff - - git a / src / java / org / apache / cassandra / cache / SerializingCacheProvider . java b / src / java / org / apache / cassandra / cache / SerializingCacheProvider . java 
 index 8fb5aa5 . . f4eb07e 100644 
 - - - a / src / java / org / apache / cassandra / cache / SerializingCacheProvider . java 
 + + + b / src / java / org / apache / cassandra / cache / SerializingCacheProvider . java 
 @ @ - 20 , 26 + 20 , 11 @ @ package org . apache . cassandra . cache ; 
 * 
 * / 
 
 - import org . apache . cassandra . config . ConfigurationException ; 
 import org . apache . cassandra . db . ColumnFamily ; 
 import org . apache . cassandra . db . DecoratedKey ; 
 
 - import com . sun . jna . Memory ; 
 - 
 public class SerializingCacheProvider implements IRowCacheProvider 
 { 
 - public SerializingCacheProvider ( ) throws ConfigurationException 
 - { 
 - try 
 - { 
 - Memory . class . getName ( ) ; 
 - } 
 - catch ( NoClassDefFoundError e ) 
 - { 
 - throw new ConfigurationException ( " Cannot initialize SerializationCache without JNA in the class path " ) ; 
 - } 
 - } 
 - 
 public ICache < DecoratedKey , ColumnFamily > create ( int capacity , String tableName , String cfName ) 
 { 
 return new SerializingCache < DecoratedKey , ColumnFamily > ( capacity , ColumnFamily . serializer ( ) , tableName , cfName ) ; 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index ce92e81 . . 9c330f8 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 67 , 7 + 67 , 7 @ @ public final class CFMetaData 
 public final static int DEFAULT _ MIN _ COMPACTION _ THRESHOLD = 4 ; 
 public final static int DEFAULT _ MAX _ COMPACTION _ THRESHOLD = 32 ; 
 public final static double DEFAULT _ MERGE _ SHARDS _ CHANCE = 0 . 1 ; 
 - public final static IRowCacheProvider DEFAULT _ ROW _ CACHE _ PROVIDER = initDefaultRowCacheProvider ( ) ; 
 + public final static IRowCacheProvider DEFAULT _ ROW _ CACHE _ PROVIDER = new SerializingCacheProvider ( ) ; 
 public final static String DEFAULT _ COMPACTION _ STRATEGY _ CLASS = " SizeTieredCompactionStrategy " ; 
 public final static ByteBuffer DEFAULT _ KEY _ NAME = ByteBufferUtil . bytes ( " KEY " ) ; 
 
 @ @ - 97 , 18 + 97 , 6 @ @ public final class CFMetaData 
 } 
 } 
 
 - private static IRowCacheProvider initDefaultRowCacheProvider ( ) 
 - { 
 - try 
 - { 
 - return new SerializingCacheProvider ( ) ; 
 - } 
 - catch ( ConfigurationException e ) 
 - { 
 - return new ConcurrentLinkedHashCacheProvider ( ) ; 
 - } 
 - } 
 - 
 / / REQUIRED 
 public final Integer cfId ; / / internal id , never exposed to user 
 public final String ksName ; / / name of keyspace 
 diff - - git a / src / java / org / apache / cassandra / io / util / Memory . java b / src / java / org / apache / cassandra / io / util / Memory . java 
 new file mode 100644 
 index 0000000 . . 2fb21a9 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / io / util / Memory . java 
 @ @ - 0 , 0 + 1 , 159 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * 
 + * / 
 + package org . apache . cassandra . io . util ; 
 + 
 + import sun . misc . Unsafe ; 
 + 
 + import java . lang . reflect . Field ; 
 + 
 + public class Memory 
 + { 
 + private static final Unsafe unsafe ; 
 + 
 + static 
 + { 
 + try 
 + { 
 + Field field = sun . misc . Unsafe . class . getDeclaredField ( " theUnsafe " ) ; 
 + field . setAccessible ( true ) ; 
 + unsafe = ( sun . misc . Unsafe ) field . get ( null ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new AssertionError ( e ) ; 
 + } 
 + } 
 + 
 + protected long peer ; 
 + / / size of the memory region 
 + private final long size ; 
 + 
 + protected Memory ( long bytes ) 
 + { 
 + size = bytes ; 
 + peer = unsafe . allocateMemory ( size ) ; 
 + } 
 + 
 + public static Memory allocate ( long bytes ) 
 + { 
 + if ( bytes < 0 ) 
 + throw new IllegalArgumentException ( ) ; 
 + 
 + return new Memory ( bytes ) ; 
 + } 
 + 
 + public void setByte ( long offset , byte b ) 
 + { 
 + checkPosition ( offset ) ; 
 + unsafe . putByte ( peer + offset , b ) ; 
 + } 
 + 
 + / * * 
 + * Transfers count bytes from buffer to Memory 
 + * 
 + * @ param memoryOffset start offset in the memory 
 + * @ param buffer the data buffer 
 + * @ param bufferOffset start offset of the buffer 
 + * @ param count number of bytes to transfer 
 + * / 
 + public void setBytes ( long memoryOffset , byte [ ] buffer , int bufferOffset , int count ) 
 + { 
 + if ( buffer = = null ) 
 + throw new NullPointerException ( ) ; 
 + else if ( bufferOffset < 0 
 + | | count < 0 
 + | | bufferOffset + count > buffer . length ) 
 + throw new IndexOutOfBoundsException ( ) ; 
 + else if ( count = = 0 ) 
 + return ; 
 + 
 + checkPosition ( memoryOffset ) ; 
 + long end = memoryOffset + count ; 
 + checkPosition ( end - 1 ) ; 
 + while ( memoryOffset < end ) 
 + unsafe . putByte ( peer + memoryOffset + + , buffer [ bufferOffset + + ] ) ; 
 + } 
 + 
 + public byte getByte ( long offset ) 
 + { 
 + checkPosition ( offset ) ; 
 + return unsafe . getByte ( peer + offset ) ; 
 + } 
 + 
 + / * * 
 + * Transfers count bytes from Memory starting at memoryOffset to buffer starting at bufferOffset 
 + * 
 + * @ param memoryOffset start offset in the memory 
 + * @ param buffer the data buffer 
 + * @ param bufferOffset start offset of the buffer 
 + * @ param count number of bytes to transfer 
 + * / 
 + public void getBytes ( long memoryOffset , byte [ ] buffer , int bufferOffset , int count ) 
 + { 
 + if ( buffer = = null ) 
 + throw new NullPointerException ( ) ; 
 + else if ( bufferOffset < 0 | | count < 0 | | count > buffer . length - bufferOffset ) 
 + throw new IndexOutOfBoundsException ( ) ; 
 + else if ( count = = 0 ) 
 + return ; 
 + 
 + checkPosition ( memoryOffset ) ; 
 + long end = memoryOffset + count ; 
 + checkPosition ( end - 1 ) ; 
 + while ( memoryOffset < end ) 
 + buffer [ bufferOffset + + ] = unsafe . getByte ( peer + memoryOffset + + ) ; 
 + } 
 + 
 + private void checkPosition ( long offset ) 
 + { 
 + if ( peer = = 0 ) 
 + throw new IllegalStateException ( " Memory was freed " ) ; 
 + 
 + if ( offset < 0 | | offset > = size ) 
 + throw new IndexOutOfBoundsException ( " Illegal offset : " + offset + " , size : " + size ) ; 
 + } 
 + 
 + public void free ( ) 
 + { 
 + assert peer ! = 0 ; 
 + unsafe . freeMemory ( peer ) ; 
 + peer = 0 ; 
 + } 
 + 
 + @ Override 
 + protected void finalize ( ) throws Throwable 
 + { 
 + try 
 + { 
 + if ( peer ! = 0 ) 
 + free ( ) ; 
 + } 
 + finally 
 + { 
 + super . finalize ( ) ; 
 + } 
 + } 
 + 
 + public long size ( ) 
 + { 
 + return size ; 
 + } 
 + } 
 + 
 diff - - git a / src / java / org / apache / cassandra / io / util / MemoryInputStream . java b / src / java / org / apache / cassandra / io / util / MemoryInputStream . java 
 index aa264fa . . d8ab08d 100644 
 - - - a / src / java / org / apache / cassandra / io / util / MemoryInputStream . java 
 + + + b / src / java / org / apache / cassandra / io / util / MemoryInputStream . java 
 @ @ - 38 , 9 + 38 , 15 @ @ public class MemoryInputStream extends AbstractDataInput 
 
 public int read ( ) throws IOException 
 { 
 - return mem . getValidByte ( position + + ) & 0xFF ; 
 + return mem . getByte ( position + + ) & 0xFF ; 
 } 
 - 
 + 
 + public void readFully ( byte [ ] buffer , int offset , int count ) throws IOException 
 + { 
 + mem . getBytes ( position , buffer , offset , count ) ; 
 + position + = count ; 
 + } 
 + 
 protected void seekInternal ( int pos ) 
 { 
 position = pos ; 
 diff - - git a / src / java / org / apache / cassandra / io / util / MemoryOutputStream . java b / src / java / org / apache / cassandra / io / util / MemoryOutputStream . java 
 index 235b9d7 . . fd5bc33 100644 
 - - - a / src / java / org / apache / cassandra / io / util / MemoryOutputStream . java 
 + + + b / src / java / org / apache / cassandra / io / util / MemoryOutputStream . java 
 @ @ - 21 , 10 + 21 , 9 @ @ package org . apache . cassandra . io . util ; 
 * / 
 
 
 + import java . io . IOException ; 
 import java . io . OutputStream ; 
 
 - import com . sun . jna . Memory ; 
 - 
 / * * 
 * This class provides a way to stream the writes into the { @ link Memory } 
 * / 
 @ @ - 39 , 16 + 38 , 20 @ @ public class MemoryOutputStream extends OutputStream 
 this . mem = mem ; 
 } 
 
 - @ Override 
 public void write ( int b ) 
 { 
 - mem . setByte ( this . position , ( byte ) b ) ; 
 - this . position + + ; 
 + mem . setByte ( position + + , ( byte ) b ) ; 
 } 
 - 
 + 
 + @ Override 
 + public void write ( byte [ ] b , int off , int len ) throws IOException 
 + { 
 + mem . setBytes ( position , b , off , len ) ; 
 + position + = len ; 
 + } 
 + 
 public int position ( ) 
 { 
 - return this . position ; 
 + return position ; 
 } 
 - 
 } 
 diff - - git a / src / resources / org / apache / cassandra / cli / CliHelp . yaml b / src / resources / org / apache / cassandra / cli / CliHelp . yaml 
 index 7414955 . . a471b50 100644 
 - - - a / src / resources / org / apache / cassandra / cli / CliHelp . yaml 
 + + + b / src / resources / org / apache / cassandra / cli / CliHelp . yaml 
 @ @ - 544 , 13 + 544 , 12 @ @ commands : 
 
 Supported values are : 
 - ConcurrentLinkedHashCacheProvider 
 - - SerializingCacheProvider ( requires JNA ) 
 + - SerializingCacheProvider 
 
 It is also valid to specify the fully - qualified class name to a class 
 that implements org . apache . cassandra . cache . IRowCacheProvider . 
 
 - row _ cache _ provider defaults to SerializingCacheProvider if you have JNA 
 - enabled , otherwise ConcurrentLinkedHashCacheProvider . 
 + row _ cache _ provider defaults to SerializingCacheProvider . 
 SerializingCacheProvider serialises the contents of the row and stores 
 it in native memory , i . e . , off the JVM Heap . Serialized rows take 
 significantly less memory than " live " rows in the JVM , so you can cache 
 @ @ - 805 , 19 + 804 , 17 @ @ commands : 
 
 Supported values are : 
 - ConcurrentLinkedHashCacheProvider 
 - - SerializingCacheProvider ( requires JNA ) 
 + - SerializingCacheProvider 
 
 It is also valid to specify the fully - qualified class name to a class 
 that implements org . apache . cassandra . cache . IRowCacheProvider . 
 
 - row _ cache _ provider defaults to ConcurrentLinkedHashCacheProvider , 
 - but if you have JNA installed you should usually use 
 - SerializingCacheProvider , which serialises the contents of the 
 - row and stores it in native memory , i . e . , off the JVM 
 - Heap . Serialized rows take significantly less memory than 
 - " live " rows in the JVM , so you can cache more rows in a given 
 - memory footprint . And storing the cache off - heap means you 
 - can use smaller heap sizes , reducing the impact of GC pauses . 
 + row _ cache _ provider defaults to SerializingCacheProvider . 
 + SerializingCacheProvider serialises the contents of the row and stores 
 + it in native memory , i . e . , off the JVM Heap . Serialized rows take 
 + significantly less memory than " live " rows in the JVM , so you can cache 
 + more rows in a given memory footprint . And storing the cache off - heap 
 + means you can use smaller heap sizes , reducing the impact of GC pauses . 
 
 - compression _ options : Options related to compression . 
 Options have the form { key : value } . 
 diff - - git a / test / unit / org / apache / cassandra / cache / CacheProviderTest . java b / test / unit / org / apache / cassandra / cache / CacheProviderTest . java 
 index 3e10c10 . . e068343 100644 
 - - - a / test / unit / org / apache / cassandra / cache / CacheProviderTest . java 
 + + + b / test / unit / org / apache / cassandra / cache / CacheProviderTest . java 
 @ @ - 117 , 6 + 117 , 6 @ @ public class CacheProviderTest extends SchemaLoader 
 ICache < String , ColumnFamily > cache = new SerializingCache < String , ColumnFamily > ( CAPACITY , ColumnFamily . serializer ( ) , tableName , cfName ) ; 
 ColumnFamily cf = createCF ( ) ; 
 simpleCase ( cf , cache ) ; 
 - / / concurrentCase ( cf , cache ) ; 
 + concurrentCase ( cf , cache ) ; 
 } 
 }
