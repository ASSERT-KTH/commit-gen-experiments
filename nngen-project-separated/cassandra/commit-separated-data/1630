BLEU SCORE: 0.03283637368030199

TEST MSG: Remove DETERMINISTIC / NON DETERMINISTIC function distinction
GENERATED MSG: Add ALTER KEYSPACE statement to CQL3

TEST DIFF (one line): diff - - git a / doc / cql3 / CQL . textile b / doc / cql3 / CQL . textile <nl> index 8a227fb . . 89bd1b9 100644 <nl> - - - a / doc / cql3 / CQL . textile <nl> + + + b / doc / cql3 / CQL . textile <nl> @ @ - 590 , 7 + 590 , 6 @ @ _ _ Syntax : _ _ <nl> <nl> bc ( syntax ) . . <nl> < create - function - stmt > : : = CREATE ( OR REPLACE ) ? <nl> - ( ( NON ) ? DETERMINISTIC ) ? <nl> FUNCTION ( IF NOT EXISTS ) ? <nl> ( ( < keyspace > ' . ' ) ? < function - name > ) ? <nl> ' ( ' < arg - name > < arg - type > ( ' , ' < arg - name > < arg - type > ) * ' ) ' <nl> @ @ - 618 , 8 + 617 , 6 @ @ CREATE FUNCTION akeyspace . fname IF NOT EXISTS <nl> <nl> @ CREATE FUNCTION @ creates or replaces a user - defined function . <nl> <nl> - Functions are either @ DETERMINISTIC @ or @ NON DETERMINISTIC @ . A deterministic function always returns the same value for the same input values . A non - deterministic function may not . Examples of deterministic functions are math functions like _ add _ or _ sin _ . Examples of non - deterministic functions are : _ now _ or _ random _ . Functions are assumed to be deterministic by default . <nl> - <nl> h4 ( # functionSignature ) . Function Signature <nl> <nl> Signatures are used to distinguish individual functions . The signature consists of : <nl> diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py <nl> index bc638b6 . . add4a7f 100644 <nl> - - - a / pylib / cqlshlib / cql3handling . py <nl> + + + b / pylib / cqlshlib / cql3handling . py <nl> @ @ - 1023 , 7 + 1023 , 6 @ @ syntax _ rules + = r ' ' ' <nl> <nl> < createFunctionStatement > : : = " CREATE " ( " OR " " REPLACE " ) ? " FUNCTION " <nl> ( " IF " " NOT " " EXISTS " ) ? <nl> - ( " NON " ? " DETERMINISTIC " ) ? <nl> < userFunctionName > <nl> ( " ( " ( newcol = < cident > < storageType > <nl> ( " , " [ newcolname ] = < cident > < storageType > ) * ) ? <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> index ca68396 . . bd47825 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Cql . g <nl> + + + b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> @ @ - 593 , 12 + 593 , 10 @ @ createFunctionStatement returns [ CreateFunctionStatement expr ] <nl> boolean orReplace = false ; <nl> boolean ifNotExists = false ; <nl> <nl> - boolean deterministic = true ; <nl> List < ColumnIdentifier > argsNames = new ArrayList < > ( ) ; <nl> List < CQL3Type . Raw > argsTypes = new ArrayList < > ( ) ; <nl> } <nl> : K _ CREATE ( K _ OR K _ REPLACE { orReplace = true ; } ) ? <nl> - ( ( K _ NON { deterministic = false ; } ) ? K _ DETERMINISTIC ) ? <nl> K _ FUNCTION <nl> ( K _ IF K _ NOT K _ EXISTS { ifNotExists = true ; } ) ? <nl> fn = functionName <nl> @ @ - 611 , 7 + 609 , 7 @ @ createFunctionStatement returns [ CreateFunctionStatement expr ] <nl> K _ RETURNS rt = comparatorType <nl> K _ LANGUAGE language = IDENT <nl> K _ AS body = STRING _ LITERAL <nl> - { $ expr = new CreateFunctionStatement ( fn , $ language . text . toLowerCase ( ) , $ body . text , deterministic , argsNames , argsTypes , rt , orReplace , ifNotExists ) ; } <nl> + { $ expr = new CreateFunctionStatement ( fn , $ language . text . toLowerCase ( ) , $ body . text , argsNames , argsTypes , rt , orReplace , ifNotExists ) ; } <nl> ; <nl> <nl> dropFunctionStatement returns [ DropFunctionStatement expr ] <nl> @ @ - 1550 , 8 + 1548 , 6 @ @ basic _ unreserved _ keyword returns [ String str ] <nl> | K _ INITCOND <nl> | K _ RETURNS <nl> | K _ LANGUAGE <nl> - | K _ NON <nl> - | K _ DETERMINISTIC <nl> | K _ JSON <nl> ) { $ str = $ k . text ; } <nl> ; <nl> @ @ - 1680 , 10 + 1676 , 8 @ @ K _ FINALFUNC : F I N A L F U N C ; <nl> K _ INITCOND : I N I T C O N D ; <nl> K _ RETURNS : R E T U R N S ; <nl> K _ LANGUAGE : L A N G U A G E ; <nl> - K _ NON : N O N ; <nl> K _ OR : O R ; <nl> K _ REPLACE : R E P L A C E ; <nl> - K _ DETERMINISTIC : D E T E R M I N I S T I C ; <nl> <nl> K _ JSON : J S O N ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / Function . java b / src / java / org / apache / cassandra / cql3 / functions / Function . java <nl> index 6fb9ba2 . . 56119f7 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / Function . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / Function . java <nl> @ @ - 30 , 13 + 30 , 6 @ @ public interface Function <nl> public AbstractType < ? > returnType ( ) ; <nl> <nl> / * * <nl> - * Checks whether the function is a pure function ( as in doesn ' t depend on , nor produce side effects ) or not . <nl> - * <nl> - * @ return < code > true < / code > if the function is a pure function , < code > false < / code > otherwise . <nl> - * / <nl> - public boolean isPure ( ) ; <nl> - <nl> - / * * <nl> * Checks whether the function is a native / hard coded one or not . <nl> * <nl> * @ return < code > true < / code > if the function is a native / hard coded one , < code > false < / code > otherwise . <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / JavaSourceUDFFactory . java b / src / java / org / apache / cassandra / cql3 / functions / JavaSourceUDFFactory . java <nl> index 1abb40b . . eddb2e6 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / JavaSourceUDFFactory . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / JavaSourceUDFFactory . java <nl> @ @ - 52 , 8 + 52 , 7 @ @ public final class JavaSourceUDFFactory <nl> List < ColumnIdentifier > argNames , <nl> List < AbstractType < ? > > argTypes , <nl> AbstractType < ? > returnType , <nl> - String body , <nl> - boolean deterministic ) <nl> + String body ) <nl> throws InvalidRequestException <nl> { <nl> / / argDataTypes is just the C * internal argTypes converted to the Java Driver DataType <nl> @ @ - 99 , 11 + 98 , 11 @ @ public final class JavaSourceUDFFactory <nl> cc . toClass ( ) . getDeclaredConstructor ( <nl> FunctionName . class , List . class , List . class , DataType [ ] . class , <nl> AbstractType . class , DataType . class , <nl> - String . class , boolean . class ) ; <nl> + String . class ) ; <nl> return ( UDFunction ) ctor . newInstance ( <nl> name , argNames , argTypes , argDataTypes , <nl> returnType , returnDataType , <nl> - body , deterministic ) ; <nl> + body ) ; <nl> } <nl> catch ( NotFoundException | CannotCompileException | NoSuchMethodException | LinkageError | InstantiationException | IllegalAccessException e ) <nl> { <nl> @ @ - 145 , 9 + 144 , 8 @ @ public final class JavaSourceUDFFactory <nl> " com . datastax . driver . core . DataType [ ] argDataTypes , " + <nl> " org . apache . cassandra . db . marshal . AbstractType returnType , " + <nl> " com . datastax . driver . core . DataType returnDataType , " + <nl> - " String body , " + <nl> - " boolean deterministic ) \ n { " + <nl> - " super ( name , argNames , argTypes , argDataTypes , returnType , returnDataType , \ " java \ " , body , deterministic ) ; \ n " + <nl> + " String body ) \ n { " + <nl> + " super ( name , argNames , argTypes , argDataTypes , returnType , returnDataType , \ " java \ " , body ) ; \ n " + <nl> " } " ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / NativeFunction . java b / src / java / org / apache / cassandra / cql3 / functions / NativeFunction . java <nl> index bff7688 . . df66ea0 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / NativeFunction . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / NativeFunction . java <nl> @ @ - 31 , 12 + 31 , 6 @ @ public abstract class NativeFunction extends AbstractFunction <nl> super ( FunctionName . nativeFunction ( name ) , Arrays . asList ( argTypes ) , returnType ) ; <nl> } <nl> <nl> - / / Most of our functions are pure , the other ones should override this <nl> - public boolean isPure ( ) <nl> - { <nl> - return true ; <nl> - } <nl> - <nl> public boolean isNative ( ) <nl> { <nl> return true ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDF . java b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDF . java <nl> index 4fe6ac9 . . b38f483 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDF . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDF . java <nl> @ @ - 67 , 11 + 67 , 10 @ @ public class ScriptBasedUDF extends UDFunction <nl> List < AbstractType < ? > > argTypes , <nl> AbstractType < ? > returnType , <nl> String language , <nl> - String body , <nl> - boolean deterministic ) <nl> + String body ) <nl> throws InvalidRequestException <nl> { <nl> - super ( name , argNames , argTypes , returnType , language , body , deterministic ) ; <nl> + super ( name , argNames , argTypes , returnType , language , body ) ; <nl> <nl> Compilable scriptEngine = scriptEngines . get ( language ) ; <nl> if ( scriptEngine = = null ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / TimeuuidFcts . java b / src / java / org / apache / cassandra / cql3 / functions / TimeuuidFcts . java <nl> index c1c3490 . . d24572b 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / TimeuuidFcts . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / TimeuuidFcts . java <nl> @ @ - 35 , 12 + 35 , 6 @ @ public abstract class TimeuuidFcts <nl> { <nl> return ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( ) ) ; <nl> } <nl> - <nl> - @ Override <nl> - public boolean isPure ( ) <nl> - { <nl> - return false ; <nl> - } <nl> } ; <nl> <nl> public static final Function minTimeuuidFct = new NativeScalarFunction ( " mintimeuuid " , TimeUUIDType . instance , TimestampType . instance ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java b / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java <nl> index e4cbd55 . . f5a1af0 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java <nl> @ @ - 113 , 11 + 113 , 6 @ @ public class UDAggregate extends AbstractFunction implements AggregateFunction <nl> return true ; <nl> } <nl> <nl> - public boolean isPure ( ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> public boolean isNative ( ) <nl> { <nl> return false ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> index 4672451 . . a56af6e 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> @ @ - 46 , 7 + 46 , 6 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> <nl> protected final String language ; <nl> protected final String body ; <nl> - protected final boolean isDeterministic ; <nl> <nl> protected final DataType [ ] argDataTypes ; <nl> protected final DataType returnDataType ; <nl> @ @ - 56 , 11 + 55 , 10 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> List < AbstractType < ? > > argTypes , <nl> AbstractType < ? > returnType , <nl> String language , <nl> - String body , <nl> - boolean isDeterministic ) <nl> + String body ) <nl> { <nl> this ( name , argNames , argTypes , UDHelper . driverTypes ( argTypes ) , returnType , <nl> - UDHelper . driverType ( returnType ) , language , body , isDeterministic ) ; <nl> + UDHelper . driverType ( returnType ) , language , body ) ; <nl> } <nl> <nl> protected UDFunction ( FunctionName name , <nl> @ @ - 70 , 15 + 68 , 13 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> AbstractType < ? > returnType , <nl> DataType returnDataType , <nl> String language , <nl> - String body , <nl> - boolean isDeterministic ) <nl> + String body ) <nl> { <nl> super ( name , argTypes , returnType ) ; <nl> assert new HashSet < > ( argNames ) . size ( ) = = argNames . size ( ) : " duplicate argument names " ; <nl> this . argNames = argNames ; <nl> this . language = language ; <nl> this . body = body ; <nl> - this . isDeterministic = isDeterministic ; <nl> this . argDataTypes = argDataTypes ; <nl> this . returnDataType = returnDataType ; <nl> } <nl> @ @ - 88 , 14 + 84 , 13 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> List < AbstractType < ? > > argTypes , <nl> AbstractType < ? > returnType , <nl> String language , <nl> - String body , <nl> - boolean isDeterministic ) <nl> + String body ) <nl> throws InvalidRequestException <nl> { <nl> switch ( language ) <nl> { <nl> - case " java " : return JavaSourceUDFFactory . buildUDF ( name , argNames , argTypes , returnType , body , isDeterministic ) ; <nl> - default : return new ScriptBasedUDF ( name , argNames , argTypes , returnType , language , body , isDeterministic ) ; <nl> + case " java " : return JavaSourceUDFFactory . buildUDF ( name , argNames , argTypes , returnType , body ) ; <nl> + default : return new ScriptBasedUDF ( name , argNames , argTypes , returnType , language , body ) ; <nl> } <nl> } <nl> <nl> @ @ - 116 , 7 + 111 , 7 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> String body , <nl> final InvalidRequestException reason ) <nl> { <nl> - return new UDFunction ( name , argNames , argTypes , returnType , language , body , true ) <nl> + return new UDFunction ( name , argNames , argTypes , returnType , language , body ) <nl> { <nl> public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) throws InvalidRequestException <nl> { <nl> @ @ - 134 , 11 + 129 , 6 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> return false ; <nl> } <nl> <nl> - public boolean isPure ( ) <nl> - { <nl> - return isDeterministic ; <nl> - } <nl> - <nl> public boolean isNative ( ) <nl> { <nl> return false ; <nl> @ @ - 149 , 11 + 139 , 6 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> return argNames ; <nl> } <nl> <nl> - public boolean isDeterministic ( ) <nl> - { <nl> - return isDeterministic ; <nl> - } <nl> - <nl> public String body ( ) <nl> { <nl> return body ; <nl> @ @ - 201 , 14 + 186 , 13 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> & & Functions . typeEquals ( argTypes , that . argTypes ) <nl> & & Functions . typeEquals ( returnType , that . returnType ) <nl> & & Objects . equal ( language , that . language ) <nl> - & & Objects . equal ( body , that . body ) <nl> - & & Objects . equal ( isDeterministic , that . isDeterministic ) ; <nl> + & & Objects . equal ( body , that . body ) ; <nl> } <nl> <nl> @ Override <nl> public int hashCode ( ) <nl> { <nl> - return Objects . hashCode ( name , argNames , argTypes , returnType , language , body , isDeterministic ) ; <nl> + return Objects . hashCode ( name , argNames , argTypes , returnType , language , body ) ; <nl> } <nl> <nl> public void userTypeUpdated ( String ksName , String typeName ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UuidFcts . java b / src / java / org / apache / cassandra / cql3 / functions / UuidFcts . java <nl> index afb5aae . . 0aa3ac4 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / UuidFcts . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / UuidFcts . java <nl> @ @ - 32 , 11 + 32 , 5 @ @ public abstract class UuidFcts <nl> { <nl> return UUIDSerializer . instance . serialize ( UUID . randomUUID ( ) ) ; <nl> } <nl> - <nl> - @ Override <nl> - public boolean isPure ( ) <nl> - { <nl> - return false ; <nl> - } <nl> } ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java <nl> index 4e1e03a . . faab043 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java <nl> @ @ - 45 , 7 + 45 , 6 @ @ public final class CreateFunctionStatement extends SchemaAlteringStatement <nl> private FunctionName functionName ; <nl> private final String language ; <nl> private final String body ; <nl> - private final boolean deterministic ; <nl> <nl> private final List < ColumnIdentifier > argNames ; <nl> private final List < CQL3Type . Raw > argRawTypes ; <nl> @ @ - 59 , 7 + 58 , 6 @ @ public final class CreateFunctionStatement extends SchemaAlteringStatement <nl> public CreateFunctionStatement ( FunctionName functionName , <nl> String language , <nl> String body , <nl> - boolean deterministic , <nl> List < ColumnIdentifier > argNames , <nl> List < CQL3Type . Raw > argRawTypes , <nl> CQL3Type . Raw rawReturnType , <nl> @ @ - 69 , 7 + 67 , 6 @ @ public final class CreateFunctionStatement extends SchemaAlteringStatement <nl> this . functionName = functionName ; <nl> this . language = language ; <nl> this . body = body ; <nl> - this . deterministic = deterministic ; <nl> this . argNames = argNames ; <nl> this . argRawTypes = argRawTypes ; <nl> this . rawReturnType = rawReturnType ; <nl> @ @ - 161 , 7 + 158 , 7 @ @ public final class CreateFunctionStatement extends SchemaAlteringStatement <nl> functionName , returnType . asCQL3Type ( ) , old . returnType ( ) . asCQL3Type ( ) ) ) ; <nl> } <nl> <nl> - this . udFunction = UDFunction . create ( functionName , argNames , argTypes , returnType , language , body , deterministic ) ; <nl> + this . udFunction = UDFunction . create ( functionName , argNames , argTypes , returnType , language , body ) ; <nl> this . replaced = old ! = null ; <nl> <nl> MigrationManager . announceNewFunction ( udFunction , isLocalOnly ) ; <nl> diff - - git a / src / java / org / apache / cassandra / schema / LegacySchemaTables . java b / src / java / org / apache / cassandra / schema / LegacySchemaTables . java <nl> index 51040a1 . . 4eb800b 100644 <nl> - - - a / src / java / org / apache / cassandra / schema / LegacySchemaTables . java <nl> + + + b / src / java / org / apache / cassandra / schema / LegacySchemaTables . java <nl> @ @ - 160 , 7 + 160 , 6 @ @ public class LegacySchemaTables <nl> + " argument _ names list < text > , " <nl> + " argument _ types list < text > , " <nl> + " body text , " <nl> - + " is _ deterministic boolean , " <nl> + " language text , " <nl> + " return _ type text , " <nl> + " PRIMARY KEY ( ( keyspace _ name ) , function _ name , signature ) ) " ) ; <nl> @ @ - 1284 , 7 + 1283 , 6 @ @ public class LegacySchemaTables <nl> } <nl> <nl> adder . add ( " body " , function . body ( ) ) ; <nl> - adder . add ( " is _ deterministic " , function . isDeterministic ( ) ) ; <nl> adder . add ( " language " , function . language ( ) ) ; <nl> adder . add ( " return _ type " , function . returnType ( ) . toString ( ) ) ; <nl> } <nl> @ @ - 1333 , 13 + 1331 , 12 @ @ public class LegacySchemaTables <nl> <nl> AbstractType < ? > returnType = parseType ( row . getString ( " return _ type " ) ) ; <nl> <nl> - boolean isDeterministic = row . getBoolean ( " is _ deterministic " ) ; <nl> String language = row . getString ( " language " ) ; <nl> String body = row . getString ( " body " ) ; <nl> <nl> try <nl> { <nl> - return UDFunction . create ( name , argNames , argTypes , returnType , language , body , isDeterministic ) ; <nl> + return UDFunction . create ( name , argNames , argTypes , returnType , language , body ) ; <nl> } <nl> catch ( InvalidRequestException e ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / UFAuthTest . java b / test / unit / org / apache / cassandra / cql3 / UFAuthTest . java <nl> index 3f0768e . . 1d63d29 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / UFAuthTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / UFAuthTest . java <nl> @ @ - 78 , 9 + 78 , 9 @ @ public class UFAuthTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void nonDeterministicFunctionInSelection ( ) throws Throwable <nl> + public void functionInSelection ( ) throws Throwable <nl> { <nl> - String functionName = createSimpleFunction ( false ) ; <nl> + String functionName = createSimpleFunction ( ) ; <nl> String cql = String . format ( " SELECT k , % s FROM % s WHERE k = 1 ; " , <nl> functionCall ( functionName ) , <nl> KEYSPACE + " . " + currentTable ( ) ) ; <nl> @ @ - 88 , 29 + 88 , 9 @ @ public class UFAuthTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void deterministicFunctionInSelection ( ) throws Throwable <nl> + public void functionInSelectPKRestriction ( ) throws Throwable <nl> { <nl> - String functionName = createSimpleFunction ( true ) ; <nl> - String cql = String . format ( " SELECT k , % s FROM % s WHERE k = 1 ; " , <nl> - functionCall ( functionName ) , <nl> - KEYSPACE + " . " + currentTable ( ) ) ; <nl> - assertPermissionsOnFunction ( cql , functionName ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void nonDeterministicFunctionInSelectPKRestriction ( ) throws Throwable <nl> - { <nl> - String functionName = createSimpleFunction ( false ) ; <nl> - String cql = String . format ( " SELECT * FROM % s WHERE k = % s " , <nl> - KEYSPACE + " . " + currentTable ( ) , <nl> - functionCall ( functionName ) ) ; <nl> - assertPermissionsOnFunction ( cql , functionName ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void deterministicFunctionInSelectPKRestriction ( ) throws Throwable <nl> - { <nl> - String functionName = createSimpleFunction ( true ) ; <nl> + String functionName = createSimpleFunction ( ) ; <nl> String cql = String . format ( " SELECT * FROM % s WHERE k = % s " , <nl> KEYSPACE + " . " + currentTable ( ) , <nl> functionCall ( functionName ) ) ; <nl> @ @ - 118 , 19 + 98 , 9 @ @ public class UFAuthTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void nonDeterministicFunctionInSelectClusteringRestriction ( ) throws Throwable <nl> - { <nl> - String functionName = createSimpleFunction ( false ) ; <nl> - String cql = String . format ( " SELECT * FROM % s WHERE k = 0 AND v1 = % s " , <nl> - KEYSPACE + " . " + currentTable ( ) , <nl> - functionCall ( functionName ) ) ; <nl> - assertPermissionsOnFunction ( cql , functionName ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void deterministicFunctionInSelectClusteringRestriction ( ) throws Throwable <nl> + public void functionInSelectClusteringRestriction ( ) throws Throwable <nl> { <nl> - String functionName = createSimpleFunction ( true ) ; <nl> + String functionName = createSimpleFunction ( ) ; <nl> String cql = String . format ( " SELECT * FROM % s WHERE k = 0 AND v1 = % s " , <nl> KEYSPACE + " . " + currentTable ( ) , <nl> functionCall ( functionName ) ) ; <nl> @ @ - 138 , 20 + 108 , 9 @ @ public class UFAuthTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void nonDeterministicFunctionInSelectInRestriction ( ) throws Throwable <nl> - { <nl> - String functionName = createSimpleFunction ( false ) ; <nl> - String cql = String . format ( " SELECT * FROM % s WHERE k IN ( % s , % s ) " , <nl> - KEYSPACE + " . " + currentTable ( ) , <nl> - functionCall ( functionName ) , <nl> - functionCall ( functionName ) ) ; <nl> - assertPermissionsOnFunction ( cql , functionName ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void deterministicFunctionInSelectInRestriction ( ) throws Throwable <nl> + public void functionInSelectInRestriction ( ) throws Throwable <nl> { <nl> - String functionName = createSimpleFunction ( true ) ; <nl> + String functionName = createSimpleFunction ( ) ; <nl> String cql = String . format ( " SELECT * FROM % s WHERE k IN ( % s , % s ) " , <nl> KEYSPACE + " . " + currentTable ( ) , <nl> functionCall ( functionName ) , <nl> @ @ - 160 , 10 + 119 , 10 @ @ public class UFAuthTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void nonDeterministicFunctionInSelectMultiColumnInRestriction ( ) throws Throwable <nl> + public void functionInSelectMultiColumnInRestriction ( ) throws Throwable <nl> { <nl> setupTable ( " CREATE TABLE % s ( k int , v1 int , v2 int , v3 int , PRIMARY KEY ( k , v1 , v2 ) ) " ) ; <nl> - String functionName = createSimpleFunction ( false ) ; <nl> + String functionName = createSimpleFunction ( ) ; <nl> String cql = String . format ( " SELECT * FROM % s WHERE k = 0 AND ( v1 , v2 ) IN ( ( % s , % s ) ) " , <nl> KEYSPACE + " . " + currentTable ( ) , <nl> functionCall ( functionName ) , <nl> @ @ - 172 , 35 + 131 , 10 @ @ public class UFAuthTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void deterministicFunctionInSelectMultiColumnInRestriction ( ) throws Throwable <nl> - { <nl> - setupTable ( " CREATE TABLE % s ( k int , v1 int , v2 int , v3 int , PRIMARY KEY ( k , v1 , v2 ) ) " ) ; <nl> - String functionName = createSimpleFunction ( true ) ; <nl> - String cql = String . format ( " SELECT * FROM % s WHERE k = 0 AND ( v1 , v2 ) IN ( ( % s , % s ) ) " , <nl> - KEYSPACE + " . " + currentTable ( ) , <nl> - functionCall ( functionName ) , <nl> - functionCall ( functionName ) ) ; <nl> - assertPermissionsOnFunction ( cql , functionName ) ; <nl> - } <nl> - <nl> - <nl> - @ Test <nl> - public void nonDeterministicFunctionInSelectMultiColumnEQRestriction ( ) throws Throwable <nl> - { <nl> - setupTable ( " CREATE TABLE % s ( k int , v1 int , v2 int , v3 int , PRIMARY KEY ( k , v1 , v2 ) ) " ) ; <nl> - String functionName = createSimpleFunction ( false ) ; <nl> - String cql = String . format ( " SELECT * FROM % s WHERE k = 0 AND ( v1 , v2 ) = ( % s , % s ) " , <nl> - KEYSPACE + " . " + currentTable ( ) , <nl> - functionCall ( functionName ) , <nl> - functionCall ( functionName ) ) ; <nl> - assertPermissionsOnFunction ( cql , functionName ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void deterministicFunctionInSelectMultiColumnEQRestriction ( ) throws Throwable <nl> + public void functionInSelectMultiColumnEQRestriction ( ) throws Throwable <nl> { <nl> setupTable ( " CREATE TABLE % s ( k int , v1 int , v2 int , v3 int , PRIMARY KEY ( k , v1 , v2 ) ) " ) ; <nl> - String functionName = createSimpleFunction ( true ) ; <nl> + String functionName = createSimpleFunction ( ) ; <nl> String cql = String . format ( " SELECT * FROM % s WHERE k = 0 AND ( v1 , v2 ) = ( % s , % s ) " , <nl> KEYSPACE + " . " + currentTable ( ) , <nl> functionCall ( functionName ) , <nl> @ @ - 209 , 22 + 143 , 10 @ @ public class UFAuthTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void nonDeterministicFunctionInSelectMultiColumnSliceRestriction ( ) throws Throwable <nl> - { <nl> - setupTable ( " CREATE TABLE % s ( k int , v1 int , v2 int , v3 int , PRIMARY KEY ( k , v1 , v2 ) ) " ) ; <nl> - String functionName = createSimpleFunction ( false ) ; <nl> - String cql = String . format ( " SELECT * FROM % s WHERE k = 0 AND ( v1 , v2 ) > ( % s , % s ) " , <nl> - KEYSPACE + " . " + currentTable ( ) , <nl> - functionCall ( functionName ) , <nl> - functionCall ( functionName ) ) ; <nl> - assertPermissionsOnFunction ( cql , functionName ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void deterministicFunctionInSelectMultiColumnSliceRestriction ( ) throws Throwable <nl> + public void functionInSelectMultiColumnSliceRestriction ( ) throws Throwable <nl> { <nl> setupTable ( " CREATE TABLE % s ( k int , v1 int , v2 int , v3 int , PRIMARY KEY ( k , v1 , v2 ) ) " ) ; <nl> - String functionName = createSimpleFunction ( true ) ; <nl> + String functionName = createSimpleFunction ( ) ; <nl> String cql = String . format ( " SELECT * FROM % s WHERE k = 0 AND ( v1 , v2 ) < ( % s , % s ) " , <nl> KEYSPACE + " . " + currentTable ( ) , <nl> functionCall ( functionName ) , <nl> @ @ - 233 , 19 + 155 , 9 @ @ public class UFAuthTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void nonDeterministicFunctionInSelectTokenEQRestriction ( ) throws Throwable <nl> - { <nl> - String functionName = createSimpleFunction ( false ) ; <nl> - String cql = String . format ( " SELECT * FROM % s WHERE token ( k ) = token ( % s ) " , <nl> - KEYSPACE + " . " + currentTable ( ) , <nl> - functionCall ( functionName ) ) ; <nl> - assertPermissionsOnFunction ( cql , functionName ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void deterministicFunctionInSelectTokenEQRestriction ( ) throws Throwable <nl> + public void functionInSelectTokenEQRestriction ( ) throws Throwable <nl> { <nl> - String functionName = createSimpleFunction ( true ) ; <nl> + String functionName = createSimpleFunction ( ) ; <nl> String cql = String . format ( " SELECT * FROM % s WHERE token ( k ) = token ( % s ) " , <nl> KEYSPACE + " . " + currentTable ( ) , <nl> functionCall ( functionName ) ) ; <nl> @ @ - 253 , 38 + 165 , 19 @ @ public class UFAuthTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void nonDeterministicFunctionInSelectTokenSliceRestriction ( ) throws Throwable <nl> - { <nl> - String functionName = createSimpleFunction ( false ) ; <nl> - String cql = String . format ( " SELECT * FROM % s WHERE token ( k ) > token ( % s ) " , <nl> - KEYSPACE + " . " + currentTable ( ) , <nl> - functionCall ( functionName ) ) ; <nl> - assertPermissionsOnFunction ( cql , functionName ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void deterministicFunctionInSelectTokenSliceRestriction ( ) throws Throwable <nl> + public void functionInSelectTokenSliceRestriction ( ) throws Throwable <nl> { <nl> - String functionName = createSimpleFunction ( true ) ; <nl> + String functionName = createSimpleFunction ( ) ; <nl> String cql = String . format ( " SELECT * FROM % s WHERE token ( k ) < token ( % s ) " , <nl> KEYSPACE + " . " + currentTable ( ) , <nl> functionCall ( functionName ) ) ; <nl> assertPermissionsOnFunction ( cql , functionName ) ; <nl> } <nl> - @ Test <nl> - public void nonDeterministicFunctionInPKForInsert ( ) throws Throwable <nl> - { <nl> - String functionName = createSimpleFunction ( false ) ; <nl> - String cql = String . format ( " INSERT INTO % s ( k , v1 , v2 ) VALUES ( % s , 0 , 0 ) " , <nl> - KEYSPACE + " . " + currentTable ( ) , <nl> - functionCall ( functionName ) ) ; <nl> - assertPermissionsOnFunction ( cql , functionName ) ; <nl> - } <nl> <nl> @ Test <nl> - public void deterministicFunctionInPKForInsert ( ) throws Throwable <nl> + public void functionInPKForInsert ( ) throws Throwable <nl> { <nl> - String functionName = createSimpleFunction ( true ) ; <nl> + String functionName = createSimpleFunction ( ) ; <nl> String cql = String . format ( " INSERT INTO % s ( k , v1 , v2 ) VALUES ( % s , 0 , 0 ) " , <nl> KEYSPACE + " . " + currentTable ( ) , <nl> functionCall ( functionName ) ) ; <nl> @ @ - 292 , 19 + 185 , 9 @ @ public class UFAuthTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void nonDeterministicFunctionInClusteringValuesForInsert ( ) throws Throwable <nl> - { <nl> - String functionName = createSimpleFunction ( false ) ; <nl> - String cql = String . format ( " INSERT INTO % s ( k , v1 , v2 ) VALUES ( 0 , % s , 0 ) " , <nl> - KEYSPACE + " . " + currentTable ( ) , <nl> - functionCall ( functionName ) ) ; <nl> - assertPermissionsOnFunction ( cql , functionName ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void deterministicFunctionInClusteringValuesForInsert ( ) throws Throwable <nl> + public void functionInClusteringValuesForInsert ( ) throws Throwable <nl> { <nl> - String functionName = createSimpleFunction ( true ) ; <nl> + String functionName = createSimpleFunction ( ) ; <nl> String cql = String . format ( " INSERT INTO % s ( k , v1 , v2 ) VALUES ( 0 , % s , 0 ) " , <nl> KEYSPACE + " . " + currentTable ( ) , <nl> functionCall ( functionName ) ) ; <nl> @ @ - 312 , 19 + 195 , 9 @ @ public class UFAuthTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void nonDeterministicFunctionInPKForDelete ( ) throws Throwable <nl> - { <nl> - String functionName = createSimpleFunction ( false ) ; <nl> - String cql = String . format ( " DELETE FROM % s WHERE k = % s " , <nl> - KEYSPACE + " . " + currentTable ( ) , <nl> - functionCall ( functionName ) ) ; <nl> - assertPermissionsOnFunction ( cql , functionName ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void deterministicFunctionInPKForDelete ( ) throws Throwable <nl> + public void functionInPKForDelete ( ) throws Throwable <nl> { <nl> - String functionName = createSimpleFunction ( true ) ; <nl> + String functionName = createSimpleFunction ( ) ; <nl> String cql = String . format ( " DELETE FROM % s WHERE k = % s " , <nl> KEYSPACE + " . " + currentTable ( ) , <nl> functionCall ( functionName ) ) ; <nl> @ @ - 332 , 20 + 205 , 9 @ @ public class UFAuthTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void nonDeterministicFunctionInClusteringValuesForDelete ( ) throws Throwable <nl> + public void functionInClusteringValuesForDelete ( ) throws Throwable <nl> { <nl> - String functionName = createSimpleFunction ( false ) ; <nl> - String cql = String . format ( " DELETE FROM % s WHERE k = 0 AND v1 = % s " , <nl> - KEYSPACE + " . " + currentTable ( ) , <nl> - functionCall ( functionName ) ) ; <nl> - assertPermissionsOnFunction ( cql , functionName ) ; <nl> - } <nl> - <nl> - @ Test <nl> - <nl> - public void deterministicFunctionInClusteringValuesForDelete ( ) throws Throwable <nl> - { <nl> - String functionName = createSimpleFunction ( true ) ; <nl> + String functionName = createSimpleFunction ( ) ; <nl> String cql = String . format ( " DELETE FROM % s WHERE k = 0 AND v1 = % s " , <nl> KEYSPACE + " . " + currentTable ( ) , <nl> functionCall ( functionName ) ) ; <nl> @ @ - 359 , 7 + 221 , 7 @ @ public class UFAuthTest extends CQLTester <nl> List < String > functions = new ArrayList < > ( ) ; <nl> for ( int i = 0 ; i < 3 ; i + + ) <nl> { <nl> - String functionName = createSimpleFunction ( false ) ; <nl> + String functionName = createSimpleFunction ( ) ; <nl> ModificationStatement stmt = <nl> ( ModificationStatement ) getStatement ( String . format ( " INSERT INTO % s ( k , v1 , v2 ) " + <nl> " VALUES ( % s , % s , % s ) " , <nl> @ @ - 382 , 21 + 244 , 9 @ @ public class UFAuthTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void testNestedNonDeterministicFunctions ( ) throws Throwable <nl> - { <nl> - String innerFunctionName = createSimpleFunction ( false ) ; <nl> - String outerFunctionName = createFunction ( " int " , <nl> - " CREATE NON DETERMINISTIC FUNCTION % s ( input int ) " + <nl> - " RETURNS int " + <nl> - " LANGUAGE java " + <nl> - " AS ' return Integer . valueOf ( 0 ) ; ' " ) ; <nl> - assertPermissionsOnNestedFunctions ( innerFunctionName , outerFunctionName ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testNestedDeterministicFunctions ( ) throws Throwable <nl> + public void testNestedFunctions ( ) throws Throwable <nl> { <nl> - String innerFunctionName = createSimpleFunction ( true ) ; <nl> + String innerFunctionName = createSimpleFunction ( ) ; <nl> String outerFunctionName = createFunction ( " int " , <nl> " CREATE FUNCTION % s ( input int ) " + <nl> " RETURNS int " + <nl> @ @ - 406 , 41 + 256 , 10 @ @ public class UFAuthTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void testNestedMixedFunctions ( ) throws Throwable <nl> - { <nl> - String innerFunctionName = createSimpleFunction ( true ) ; <nl> - String outerFunctionName = createFunction ( " int " , <nl> - " CREATE NON DETERMINISTIC FUNCTION % s ( input int ) " + <nl> - " RETURNS int " + <nl> - " LANGUAGE java " + <nl> - " AS ' return Integer . valueOf ( 0 ) ; ' " ) ; <nl> - assertPermissionsOnNestedFunctions ( innerFunctionName , outerFunctionName ) ; <nl> - <nl> - innerFunctionName = createSimpleFunction ( false ) ; <nl> - outerFunctionName = createFunction ( " int " , <nl> - " CREATE FUNCTION % s ( input int ) " + <nl> - " RETURNS int " + <nl> - " LANGUAGE java " + <nl> - " AS ' return Integer . valueOf ( 0 ) ; ' " ) ; <nl> - assertPermissionsOnNestedFunctions ( innerFunctionName , outerFunctionName ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void nonDeterministicFunctionInStaticColumnRestrictionInSelect ( ) throws Throwable <nl> - { <nl> - setupTable ( " CREATE TABLE % s ( k int , s int STATIC , v1 int , v2 int , PRIMARY KEY ( k , v1 ) ) " ) ; <nl> - String functionName = createSimpleFunction ( false ) ; <nl> - String cql = String . format ( " SELECT k FROM % s WHERE k = 0 AND s = % s " , <nl> - KEYSPACE + " . " + currentTable ( ) , <nl> - functionCall ( functionName ) ) ; <nl> - assertPermissionsOnFunction ( cql , functionName ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void deterministicFunctionInStaticColumnRestrictionInSelect ( ) throws Throwable <nl> + public void functionInStaticColumnRestrictionInSelect ( ) throws Throwable <nl> { <nl> setupTable ( " CREATE TABLE % s ( k int , s int STATIC , v1 int , v2 int , PRIMARY KEY ( k , v1 ) ) " ) ; <nl> - String functionName = createSimpleFunction ( true ) ; <nl> + String functionName = createSimpleFunction ( ) ; <nl> String cql = String . format ( " SELECT k FROM % s WHERE k = 0 AND s = % s " , <nl> KEYSPACE + " . " + currentTable ( ) , <nl> functionCall ( functionName ) ) ; <nl> @ @ - 448 , 41 + 267 , 19 @ @ public class UFAuthTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void nonDeterministicFunctionInRegularCondition ( ) throws Throwable <nl> - { <nl> - String functionName = createSimpleFunction ( false ) ; <nl> - String cql = String . format ( " UPDATE % s SET v2 = 0 WHERE k = 0 AND v1 = 0 IF v2 = % s " , <nl> - KEYSPACE + " . " + currentTable ( ) , <nl> - functionCall ( functionName ) ) ; <nl> - assertPermissionsOnFunction ( cql , functionName ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void deterministicFunctionInRegularCondition ( ) throws Throwable <nl> + public void functionInRegularCondition ( ) throws Throwable <nl> { <nl> - String functionName = createSimpleFunction ( true ) ; <nl> + String functionName = createSimpleFunction ( ) ; <nl> String cql = String . format ( " UPDATE % s SET v2 = 0 WHERE k = 0 AND v1 = 0 IF v2 = % s " , <nl> KEYSPACE + " . " + currentTable ( ) , <nl> functionCall ( functionName ) ) ; <nl> assertPermissionsOnFunction ( cql , functionName ) ; <nl> } <nl> - <nl> - @ Test <nl> - public void nonDeterministicFunctionInStaticColumnCondition ( ) throws Throwable <nl> - { <nl> - setupTable ( " CREATE TABLE % s ( k int , s int STATIC , v1 int , v2 int , PRIMARY KEY ( k , v1 ) ) " ) ; <nl> - String functionName = createSimpleFunction ( false ) ; <nl> - String cql = String . format ( " UPDATE % s SET v2 = 0 WHERE k = 0 AND v1 = 0 IF s = % s " , <nl> - KEYSPACE + " . " + currentTable ( ) , <nl> - functionCall ( functionName ) ) ; <nl> - assertPermissionsOnFunction ( cql , functionName ) ; <nl> - } <nl> - <nl> @ Test <nl> - public void deterministicFunctionInStaticColumnCondition ( ) throws Throwable <nl> + public void functionInStaticColumnCondition ( ) throws Throwable <nl> { <nl> setupTable ( " CREATE TABLE % s ( k int , s int STATIC , v1 int , v2 int , PRIMARY KEY ( k , v1 ) ) " ) ; <nl> - String functionName = createSimpleFunction ( true ) ; <nl> + String functionName = createSimpleFunction ( ) ; <nl> String cql = String . format ( " UPDATE % s SET v2 = 0 WHERE k = 0 AND v1 = 0 IF s = % s " , <nl> KEYSPACE + " . " + currentTable ( ) , <nl> functionCall ( functionName ) ) ; <nl> @ @ - 490 , 22 + 287 , 10 @ @ public class UFAuthTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void nonDeterministicFunctionInCollectionLiteralCondition ( ) throws Throwable <nl> - { <nl> - setupTable ( " CREATE TABLE % s ( k int , v1 int , m _ val map < int , int > , PRIMARY KEY ( k ) ) " ) ; <nl> - String functionName = createSimpleFunction ( false ) ; <nl> - String cql = String . format ( " UPDATE % s SET v1 = 0 WHERE k = 0 IF m _ val = { % s : % s } " , <nl> - KEYSPACE + " . " + currentTable ( ) , <nl> - functionCall ( functionName ) , <nl> - functionCall ( functionName ) ) ; <nl> - assertPermissionsOnFunction ( cql , functionName ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void deterministicFunctionInCollectionLiteralCondition ( ) throws Throwable <nl> + public void functionInCollectionLiteralCondition ( ) throws Throwable <nl> { <nl> setupTable ( " CREATE TABLE % s ( k int , v1 int , m _ val map < int , int > , PRIMARY KEY ( k ) ) " ) ; <nl> - String functionName = createSimpleFunction ( true ) ; <nl> + String functionName = createSimpleFunction ( ) ; <nl> String cql = String . format ( " UPDATE % s SET v1 = 0 WHERE k = 0 IF m _ val = { % s : % s } " , <nl> KEYSPACE + " . " + currentTable ( ) , <nl> functionCall ( functionName ) , <nl> @ @ - 514 , 22 + 299 , 10 @ @ public class UFAuthTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void nonDeterministicFunctionInCollectionElementCondition ( ) throws Throwable <nl> - { <nl> - setupTable ( " CREATE TABLE % s ( k int , v1 int , m _ val map < int , int > , PRIMARY KEY ( k ) ) " ) ; <nl> - String functionName = createSimpleFunction ( false ) ; <nl> - String cql = String . format ( " UPDATE % s SET v1 = 0 WHERE k = 0 IF m _ val [ % s ] = % s " , <nl> - KEYSPACE + " . " + currentTable ( ) , <nl> - functionCall ( functionName ) , <nl> - functionCall ( functionName ) ) ; <nl> - assertPermissionsOnFunction ( cql , functionName ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void deterministicFunctionInCollectionElementCondition ( ) throws Throwable <nl> + public void functionInCollectionElementCondition ( ) throws Throwable <nl> { <nl> setupTable ( " CREATE TABLE % s ( k int , v1 int , m _ val map < int , int > , PRIMARY KEY ( k ) ) " ) ; <nl> - String functionName = createSimpleFunction ( true ) ; <nl> + String functionName = createSimpleFunction ( ) ; <nl> String cql = String . format ( " UPDATE % s SET v1 = 0 WHERE k = 0 IF m _ val [ % s ] = % s " , <nl> KEYSPACE + " . " + currentTable ( ) , <nl> functionCall ( functionName ) , <nl> @ @ - 546 , 7 + 319 , 7 @ @ public class UFAuthTest extends CQLTester <nl> getStatement ( cql ) . checkAccess ( clientState ) ; <nl> <nl> / / with non - terminal arguments , so evaluated at execution <nl> - String functionName = createSimpleFunction ( false ) ; <nl> + String functionName = createSimpleFunction ( ) ; <nl> grantExecuteOnFunction ( functionName ) ; <nl> cql = String . format ( " UPDATE % s SET v2 = 0 WHERE k = blobasint ( intasblob ( % s ) ) " , <nl> KEYSPACE + " . " + currentTable ( ) , <nl> @ @ - 612 , 10 + 385 , 10 @ @ public class UFAuthTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void nonDeterministicFunctionWrappingAggregate ( ) throws Throwable <nl> + public void functionWrappingAggregate ( ) throws Throwable <nl> { <nl> String outerFunc = createFunction ( " int " , <nl> - " CREATE NON DETERMINISTIC FUNCTION % s ( input int ) " + <nl> + " CREATE FUNCTION % s ( input int ) " + <nl> " RETURNS int " + <nl> " LANGUAGE java " + <nl> " AS ' return input ; ' " ) ; <nl> @ @ - 643 , 10 + 416 , 10 @ @ public class UFAuthTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void aggregateWrappingNonDeterministicFunction ( ) throws Throwable <nl> + public void aggregateWrappingFunction ( ) throws Throwable <nl> { <nl> String innerFunc = createFunction ( " int " , <nl> - " CREATE NON DETERMINISTIC FUNCTION % s ( input int ) " + <nl> + " CREATE FUNCTION % s ( input int ) " + <nl> " RETURNS int " + <nl> " LANGUAGE java " + <nl> " AS ' return input ; ' " ) ; <nl> @ @ - 809 , 10 + 582 , 10 @ @ public class UFAuthTest extends CQLTester <nl> " AS ' return a ; ' " ) ; <nl> } <nl> <nl> - private String createSimpleFunction ( boolean deterministic ) throws Throwable <nl> + private String createSimpleFunction ( ) throws Throwable <nl> { <nl> return createFunction ( " " , <nl> - " CREATE " + ( deterministic ? " " : " NON " ) + " DETERMINISTIC FUNCTION % s ( ) " + <nl> + " CREATE FUNCTION % s ( ) " + <nl> " RETURNS int " + <nl> " LANGUAGE java " + <nl> " AS ' return Integer . valueOf ( 0 ) ; ' " ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> index 79c5b9f . . 01dbafd 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Cql . g <nl> + + + b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> @ @ - 752 , 11 + 752 , 10 @ @ K _ UPDATE : U P D A T E ; <nl> K _ WITH : W I T H ; <nl> K _ LIMIT : L I M I T ; <nl> K _ USING : U S I N G ; <nl> - K _ ALL : A L L ; <nl> K _ CONSISTENCY : C O N S I S T E N C Y ; <nl> K _ LEVEL : ( O N E <nl> | Q U O R U M <nl> - | K _ ALL <nl> + | A L L <nl> | A N Y <nl> | L O C A L ' _ ' Q U O R U M <nl> | E A C H ' _ ' Q U O R U M

TEST DIFF:
diff - - git a / doc / cql3 / CQL . textile b / doc / cql3 / CQL . textile 
 index 8a227fb . . 89bd1b9 100644 
 - - - a / doc / cql3 / CQL . textile 
 + + + b / doc / cql3 / CQL . textile 
 @ @ - 590 , 7 + 590 , 6 @ @ _ _ Syntax : _ _ 
 
 bc ( syntax ) . . 
 < create - function - stmt > : : = CREATE ( OR REPLACE ) ? 
 - ( ( NON ) ? DETERMINISTIC ) ? 
 FUNCTION ( IF NOT EXISTS ) ? 
 ( ( < keyspace > ' . ' ) ? < function - name > ) ? 
 ' ( ' < arg - name > < arg - type > ( ' , ' < arg - name > < arg - type > ) * ' ) ' 
 @ @ - 618 , 8 + 617 , 6 @ @ CREATE FUNCTION akeyspace . fname IF NOT EXISTS 
 
 @ CREATE FUNCTION @ creates or replaces a user - defined function . 
 
 - Functions are either @ DETERMINISTIC @ or @ NON DETERMINISTIC @ . A deterministic function always returns the same value for the same input values . A non - deterministic function may not . Examples of deterministic functions are math functions like _ add _ or _ sin _ . Examples of non - deterministic functions are : _ now _ or _ random _ . Functions are assumed to be deterministic by default . 
 - 
 h4 ( # functionSignature ) . Function Signature 
 
 Signatures are used to distinguish individual functions . The signature consists of : 
 diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py 
 index bc638b6 . . add4a7f 100644 
 - - - a / pylib / cqlshlib / cql3handling . py 
 + + + b / pylib / cqlshlib / cql3handling . py 
 @ @ - 1023 , 7 + 1023 , 6 @ @ syntax _ rules + = r ' ' ' 
 
 < createFunctionStatement > : : = " CREATE " ( " OR " " REPLACE " ) ? " FUNCTION " 
 ( " IF " " NOT " " EXISTS " ) ? 
 - ( " NON " ? " DETERMINISTIC " ) ? 
 < userFunctionName > 
 ( " ( " ( newcol = < cident > < storageType > 
 ( " , " [ newcolname ] = < cident > < storageType > ) * ) ? 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g 
 index ca68396 . . bd47825 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Cql . g 
 + + + b / src / java / org / apache / cassandra / cql3 / Cql . g 
 @ @ - 593 , 12 + 593 , 10 @ @ createFunctionStatement returns [ CreateFunctionStatement expr ] 
 boolean orReplace = false ; 
 boolean ifNotExists = false ; 
 
 - boolean deterministic = true ; 
 List < ColumnIdentifier > argsNames = new ArrayList < > ( ) ; 
 List < CQL3Type . Raw > argsTypes = new ArrayList < > ( ) ; 
 } 
 : K _ CREATE ( K _ OR K _ REPLACE { orReplace = true ; } ) ? 
 - ( ( K _ NON { deterministic = false ; } ) ? K _ DETERMINISTIC ) ? 
 K _ FUNCTION 
 ( K _ IF K _ NOT K _ EXISTS { ifNotExists = true ; } ) ? 
 fn = functionName 
 @ @ - 611 , 7 + 609 , 7 @ @ createFunctionStatement returns [ CreateFunctionStatement expr ] 
 K _ RETURNS rt = comparatorType 
 K _ LANGUAGE language = IDENT 
 K _ AS body = STRING _ LITERAL 
 - { $ expr = new CreateFunctionStatement ( fn , $ language . text . toLowerCase ( ) , $ body . text , deterministic , argsNames , argsTypes , rt , orReplace , ifNotExists ) ; } 
 + { $ expr = new CreateFunctionStatement ( fn , $ language . text . toLowerCase ( ) , $ body . text , argsNames , argsTypes , rt , orReplace , ifNotExists ) ; } 
 ; 
 
 dropFunctionStatement returns [ DropFunctionStatement expr ] 
 @ @ - 1550 , 8 + 1548 , 6 @ @ basic _ unreserved _ keyword returns [ String str ] 
 | K _ INITCOND 
 | K _ RETURNS 
 | K _ LANGUAGE 
 - | K _ NON 
 - | K _ DETERMINISTIC 
 | K _ JSON 
 ) { $ str = $ k . text ; } 
 ; 
 @ @ - 1680 , 10 + 1676 , 8 @ @ K _ FINALFUNC : F I N A L F U N C ; 
 K _ INITCOND : I N I T C O N D ; 
 K _ RETURNS : R E T U R N S ; 
 K _ LANGUAGE : L A N G U A G E ; 
 - K _ NON : N O N ; 
 K _ OR : O R ; 
 K _ REPLACE : R E P L A C E ; 
 - K _ DETERMINISTIC : D E T E R M I N I S T I C ; 
 
 K _ JSON : J S O N ; 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / Function . java b / src / java / org / apache / cassandra / cql3 / functions / Function . java 
 index 6fb9ba2 . . 56119f7 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / Function . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / Function . java 
 @ @ - 30 , 13 + 30 , 6 @ @ public interface Function 
 public AbstractType < ? > returnType ( ) ; 
 
 / * * 
 - * Checks whether the function is a pure function ( as in doesn ' t depend on , nor produce side effects ) or not . 
 - * 
 - * @ return < code > true < / code > if the function is a pure function , < code > false < / code > otherwise . 
 - * / 
 - public boolean isPure ( ) ; 
 - 
 - / * * 
 * Checks whether the function is a native / hard coded one or not . 
 * 
 * @ return < code > true < / code > if the function is a native / hard coded one , < code > false < / code > otherwise . 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / JavaSourceUDFFactory . java b / src / java / org / apache / cassandra / cql3 / functions / JavaSourceUDFFactory . java 
 index 1abb40b . . eddb2e6 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / JavaSourceUDFFactory . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / JavaSourceUDFFactory . java 
 @ @ - 52 , 8 + 52 , 7 @ @ public final class JavaSourceUDFFactory 
 List < ColumnIdentifier > argNames , 
 List < AbstractType < ? > > argTypes , 
 AbstractType < ? > returnType , 
 - String body , 
 - boolean deterministic ) 
 + String body ) 
 throws InvalidRequestException 
 { 
 / / argDataTypes is just the C * internal argTypes converted to the Java Driver DataType 
 @ @ - 99 , 11 + 98 , 11 @ @ public final class JavaSourceUDFFactory 
 cc . toClass ( ) . getDeclaredConstructor ( 
 FunctionName . class , List . class , List . class , DataType [ ] . class , 
 AbstractType . class , DataType . class , 
 - String . class , boolean . class ) ; 
 + String . class ) ; 
 return ( UDFunction ) ctor . newInstance ( 
 name , argNames , argTypes , argDataTypes , 
 returnType , returnDataType , 
 - body , deterministic ) ; 
 + body ) ; 
 } 
 catch ( NotFoundException | CannotCompileException | NoSuchMethodException | LinkageError | InstantiationException | IllegalAccessException e ) 
 { 
 @ @ - 145 , 9 + 144 , 8 @ @ public final class JavaSourceUDFFactory 
 " com . datastax . driver . core . DataType [ ] argDataTypes , " + 
 " org . apache . cassandra . db . marshal . AbstractType returnType , " + 
 " com . datastax . driver . core . DataType returnDataType , " + 
 - " String body , " + 
 - " boolean deterministic ) \ n { " + 
 - " super ( name , argNames , argTypes , argDataTypes , returnType , returnDataType , \ " java \ " , body , deterministic ) ; \ n " + 
 + " String body ) \ n { " + 
 + " super ( name , argNames , argTypes , argDataTypes , returnType , returnDataType , \ " java \ " , body ) ; \ n " + 
 " } " ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / NativeFunction . java b / src / java / org / apache / cassandra / cql3 / functions / NativeFunction . java 
 index bff7688 . . df66ea0 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / NativeFunction . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / NativeFunction . java 
 @ @ - 31 , 12 + 31 , 6 @ @ public abstract class NativeFunction extends AbstractFunction 
 super ( FunctionName . nativeFunction ( name ) , Arrays . asList ( argTypes ) , returnType ) ; 
 } 
 
 - / / Most of our functions are pure , the other ones should override this 
 - public boolean isPure ( ) 
 - { 
 - return true ; 
 - } 
 - 
 public boolean isNative ( ) 
 { 
 return true ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDF . java b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDF . java 
 index 4fe6ac9 . . b38f483 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDF . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDF . java 
 @ @ - 67 , 11 + 67 , 10 @ @ public class ScriptBasedUDF extends UDFunction 
 List < AbstractType < ? > > argTypes , 
 AbstractType < ? > returnType , 
 String language , 
 - String body , 
 - boolean deterministic ) 
 + String body ) 
 throws InvalidRequestException 
 { 
 - super ( name , argNames , argTypes , returnType , language , body , deterministic ) ; 
 + super ( name , argNames , argTypes , returnType , language , body ) ; 
 
 Compilable scriptEngine = scriptEngines . get ( language ) ; 
 if ( scriptEngine = = null ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / TimeuuidFcts . java b / src / java / org / apache / cassandra / cql3 / functions / TimeuuidFcts . java 
 index c1c3490 . . d24572b 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / TimeuuidFcts . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / TimeuuidFcts . java 
 @ @ - 35 , 12 + 35 , 6 @ @ public abstract class TimeuuidFcts 
 { 
 return ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( ) ) ; 
 } 
 - 
 - @ Override 
 - public boolean isPure ( ) 
 - { 
 - return false ; 
 - } 
 } ; 
 
 public static final Function minTimeuuidFct = new NativeScalarFunction ( " mintimeuuid " , TimeUUIDType . instance , TimestampType . instance ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java b / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java 
 index e4cbd55 . . f5a1af0 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / UDAggregate . java 
 @ @ - 113 , 11 + 113 , 6 @ @ public class UDAggregate extends AbstractFunction implements AggregateFunction 
 return true ; 
 } 
 
 - public boolean isPure ( ) 
 - { 
 - return false ; 
 - } 
 - 
 public boolean isNative ( ) 
 { 
 return false ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 index 4672451 . . a56af6e 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 @ @ - 46 , 7 + 46 , 6 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 
 protected final String language ; 
 protected final String body ; 
 - protected final boolean isDeterministic ; 
 
 protected final DataType [ ] argDataTypes ; 
 protected final DataType returnDataType ; 
 @ @ - 56 , 11 + 55 , 10 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 List < AbstractType < ? > > argTypes , 
 AbstractType < ? > returnType , 
 String language , 
 - String body , 
 - boolean isDeterministic ) 
 + String body ) 
 { 
 this ( name , argNames , argTypes , UDHelper . driverTypes ( argTypes ) , returnType , 
 - UDHelper . driverType ( returnType ) , language , body , isDeterministic ) ; 
 + UDHelper . driverType ( returnType ) , language , body ) ; 
 } 
 
 protected UDFunction ( FunctionName name , 
 @ @ - 70 , 15 + 68 , 13 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 AbstractType < ? > returnType , 
 DataType returnDataType , 
 String language , 
 - String body , 
 - boolean isDeterministic ) 
 + String body ) 
 { 
 super ( name , argTypes , returnType ) ; 
 assert new HashSet < > ( argNames ) . size ( ) = = argNames . size ( ) : " duplicate argument names " ; 
 this . argNames = argNames ; 
 this . language = language ; 
 this . body = body ; 
 - this . isDeterministic = isDeterministic ; 
 this . argDataTypes = argDataTypes ; 
 this . returnDataType = returnDataType ; 
 } 
 @ @ - 88 , 14 + 84 , 13 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 List < AbstractType < ? > > argTypes , 
 AbstractType < ? > returnType , 
 String language , 
 - String body , 
 - boolean isDeterministic ) 
 + String body ) 
 throws InvalidRequestException 
 { 
 switch ( language ) 
 { 
 - case " java " : return JavaSourceUDFFactory . buildUDF ( name , argNames , argTypes , returnType , body , isDeterministic ) ; 
 - default : return new ScriptBasedUDF ( name , argNames , argTypes , returnType , language , body , isDeterministic ) ; 
 + case " java " : return JavaSourceUDFFactory . buildUDF ( name , argNames , argTypes , returnType , body ) ; 
 + default : return new ScriptBasedUDF ( name , argNames , argTypes , returnType , language , body ) ; 
 } 
 } 
 
 @ @ - 116 , 7 + 111 , 7 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 String body , 
 final InvalidRequestException reason ) 
 { 
 - return new UDFunction ( name , argNames , argTypes , returnType , language , body , true ) 
 + return new UDFunction ( name , argNames , argTypes , returnType , language , body ) 
 { 
 public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) throws InvalidRequestException 
 { 
 @ @ - 134 , 11 + 129 , 6 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 return false ; 
 } 
 
 - public boolean isPure ( ) 
 - { 
 - return isDeterministic ; 
 - } 
 - 
 public boolean isNative ( ) 
 { 
 return false ; 
 @ @ - 149 , 11 + 139 , 6 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 return argNames ; 
 } 
 
 - public boolean isDeterministic ( ) 
 - { 
 - return isDeterministic ; 
 - } 
 - 
 public String body ( ) 
 { 
 return body ; 
 @ @ - 201 , 14 + 186 , 13 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 & & Functions . typeEquals ( argTypes , that . argTypes ) 
 & & Functions . typeEquals ( returnType , that . returnType ) 
 & & Objects . equal ( language , that . language ) 
 - & & Objects . equal ( body , that . body ) 
 - & & Objects . equal ( isDeterministic , that . isDeterministic ) ; 
 + & & Objects . equal ( body , that . body ) ; 
 } 
 
 @ Override 
 public int hashCode ( ) 
 { 
 - return Objects . hashCode ( name , argNames , argTypes , returnType , language , body , isDeterministic ) ; 
 + return Objects . hashCode ( name , argNames , argTypes , returnType , language , body ) ; 
 } 
 
 public void userTypeUpdated ( String ksName , String typeName ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UuidFcts . java b / src / java / org / apache / cassandra / cql3 / functions / UuidFcts . java 
 index afb5aae . . 0aa3ac4 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / UuidFcts . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / UuidFcts . java 
 @ @ - 32 , 11 + 32 , 5 @ @ public abstract class UuidFcts 
 { 
 return UUIDSerializer . instance . serialize ( UUID . randomUUID ( ) ) ; 
 } 
 - 
 - @ Override 
 - public boolean isPure ( ) 
 - { 
 - return false ; 
 - } 
 } ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java 
 index 4e1e03a . . faab043 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateFunctionStatement . java 
 @ @ - 45 , 7 + 45 , 6 @ @ public final class CreateFunctionStatement extends SchemaAlteringStatement 
 private FunctionName functionName ; 
 private final String language ; 
 private final String body ; 
 - private final boolean deterministic ; 
 
 private final List < ColumnIdentifier > argNames ; 
 private final List < CQL3Type . Raw > argRawTypes ; 
 @ @ - 59 , 7 + 58 , 6 @ @ public final class CreateFunctionStatement extends SchemaAlteringStatement 
 public CreateFunctionStatement ( FunctionName functionName , 
 String language , 
 String body , 
 - boolean deterministic , 
 List < ColumnIdentifier > argNames , 
 List < CQL3Type . Raw > argRawTypes , 
 CQL3Type . Raw rawReturnType , 
 @ @ - 69 , 7 + 67 , 6 @ @ public final class CreateFunctionStatement extends SchemaAlteringStatement 
 this . functionName = functionName ; 
 this . language = language ; 
 this . body = body ; 
 - this . deterministic = deterministic ; 
 this . argNames = argNames ; 
 this . argRawTypes = argRawTypes ; 
 this . rawReturnType = rawReturnType ; 
 @ @ - 161 , 7 + 158 , 7 @ @ public final class CreateFunctionStatement extends SchemaAlteringStatement 
 functionName , returnType . asCQL3Type ( ) , old . returnType ( ) . asCQL3Type ( ) ) ) ; 
 } 
 
 - this . udFunction = UDFunction . create ( functionName , argNames , argTypes , returnType , language , body , deterministic ) ; 
 + this . udFunction = UDFunction . create ( functionName , argNames , argTypes , returnType , language , body ) ; 
 this . replaced = old ! = null ; 
 
 MigrationManager . announceNewFunction ( udFunction , isLocalOnly ) ; 
 diff - - git a / src / java / org / apache / cassandra / schema / LegacySchemaTables . java b / src / java / org / apache / cassandra / schema / LegacySchemaTables . java 
 index 51040a1 . . 4eb800b 100644 
 - - - a / src / java / org / apache / cassandra / schema / LegacySchemaTables . java 
 + + + b / src / java / org / apache / cassandra / schema / LegacySchemaTables . java 
 @ @ - 160 , 7 + 160 , 6 @ @ public class LegacySchemaTables 
 + " argument _ names list < text > , " 
 + " argument _ types list < text > , " 
 + " body text , " 
 - + " is _ deterministic boolean , " 
 + " language text , " 
 + " return _ type text , " 
 + " PRIMARY KEY ( ( keyspace _ name ) , function _ name , signature ) ) " ) ; 
 @ @ - 1284 , 7 + 1283 , 6 @ @ public class LegacySchemaTables 
 } 
 
 adder . add ( " body " , function . body ( ) ) ; 
 - adder . add ( " is _ deterministic " , function . isDeterministic ( ) ) ; 
 adder . add ( " language " , function . language ( ) ) ; 
 adder . add ( " return _ type " , function . returnType ( ) . toString ( ) ) ; 
 } 
 @ @ - 1333 , 13 + 1331 , 12 @ @ public class LegacySchemaTables 
 
 AbstractType < ? > returnType = parseType ( row . getString ( " return _ type " ) ) ; 
 
 - boolean isDeterministic = row . getBoolean ( " is _ deterministic " ) ; 
 String language = row . getString ( " language " ) ; 
 String body = row . getString ( " body " ) ; 
 
 try 
 { 
 - return UDFunction . create ( name , argNames , argTypes , returnType , language , body , isDeterministic ) ; 
 + return UDFunction . create ( name , argNames , argTypes , returnType , language , body ) ; 
 } 
 catch ( InvalidRequestException e ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / UFAuthTest . java b / test / unit / org / apache / cassandra / cql3 / UFAuthTest . java 
 index 3f0768e . . 1d63d29 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / UFAuthTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / UFAuthTest . java 
 @ @ - 78 , 9 + 78 , 9 @ @ public class UFAuthTest extends CQLTester 
 } 
 
 @ Test 
 - public void nonDeterministicFunctionInSelection ( ) throws Throwable 
 + public void functionInSelection ( ) throws Throwable 
 { 
 - String functionName = createSimpleFunction ( false ) ; 
 + String functionName = createSimpleFunction ( ) ; 
 String cql = String . format ( " SELECT k , % s FROM % s WHERE k = 1 ; " , 
 functionCall ( functionName ) , 
 KEYSPACE + " . " + currentTable ( ) ) ; 
 @ @ - 88 , 29 + 88 , 9 @ @ public class UFAuthTest extends CQLTester 
 } 
 
 @ Test 
 - public void deterministicFunctionInSelection ( ) throws Throwable 
 + public void functionInSelectPKRestriction ( ) throws Throwable 
 { 
 - String functionName = createSimpleFunction ( true ) ; 
 - String cql = String . format ( " SELECT k , % s FROM % s WHERE k = 1 ; " , 
 - functionCall ( functionName ) , 
 - KEYSPACE + " . " + currentTable ( ) ) ; 
 - assertPermissionsOnFunction ( cql , functionName ) ; 
 - } 
 - 
 - @ Test 
 - public void nonDeterministicFunctionInSelectPKRestriction ( ) throws Throwable 
 - { 
 - String functionName = createSimpleFunction ( false ) ; 
 - String cql = String . format ( " SELECT * FROM % s WHERE k = % s " , 
 - KEYSPACE + " . " + currentTable ( ) , 
 - functionCall ( functionName ) ) ; 
 - assertPermissionsOnFunction ( cql , functionName ) ; 
 - } 
 - 
 - @ Test 
 - public void deterministicFunctionInSelectPKRestriction ( ) throws Throwable 
 - { 
 - String functionName = createSimpleFunction ( true ) ; 
 + String functionName = createSimpleFunction ( ) ; 
 String cql = String . format ( " SELECT * FROM % s WHERE k = % s " , 
 KEYSPACE + " . " + currentTable ( ) , 
 functionCall ( functionName ) ) ; 
 @ @ - 118 , 19 + 98 , 9 @ @ public class UFAuthTest extends CQLTester 
 } 
 
 @ Test 
 - public void nonDeterministicFunctionInSelectClusteringRestriction ( ) throws Throwable 
 - { 
 - String functionName = createSimpleFunction ( false ) ; 
 - String cql = String . format ( " SELECT * FROM % s WHERE k = 0 AND v1 = % s " , 
 - KEYSPACE + " . " + currentTable ( ) , 
 - functionCall ( functionName ) ) ; 
 - assertPermissionsOnFunction ( cql , functionName ) ; 
 - } 
 - 
 - @ Test 
 - public void deterministicFunctionInSelectClusteringRestriction ( ) throws Throwable 
 + public void functionInSelectClusteringRestriction ( ) throws Throwable 
 { 
 - String functionName = createSimpleFunction ( true ) ; 
 + String functionName = createSimpleFunction ( ) ; 
 String cql = String . format ( " SELECT * FROM % s WHERE k = 0 AND v1 = % s " , 
 KEYSPACE + " . " + currentTable ( ) , 
 functionCall ( functionName ) ) ; 
 @ @ - 138 , 20 + 108 , 9 @ @ public class UFAuthTest extends CQLTester 
 } 
 
 @ Test 
 - public void nonDeterministicFunctionInSelectInRestriction ( ) throws Throwable 
 - { 
 - String functionName = createSimpleFunction ( false ) ; 
 - String cql = String . format ( " SELECT * FROM % s WHERE k IN ( % s , % s ) " , 
 - KEYSPACE + " . " + currentTable ( ) , 
 - functionCall ( functionName ) , 
 - functionCall ( functionName ) ) ; 
 - assertPermissionsOnFunction ( cql , functionName ) ; 
 - } 
 - 
 - @ Test 
 - public void deterministicFunctionInSelectInRestriction ( ) throws Throwable 
 + public void functionInSelectInRestriction ( ) throws Throwable 
 { 
 - String functionName = createSimpleFunction ( true ) ; 
 + String functionName = createSimpleFunction ( ) ; 
 String cql = String . format ( " SELECT * FROM % s WHERE k IN ( % s , % s ) " , 
 KEYSPACE + " . " + currentTable ( ) , 
 functionCall ( functionName ) , 
 @ @ - 160 , 10 + 119 , 10 @ @ public class UFAuthTest extends CQLTester 
 } 
 
 @ Test 
 - public void nonDeterministicFunctionInSelectMultiColumnInRestriction ( ) throws Throwable 
 + public void functionInSelectMultiColumnInRestriction ( ) throws Throwable 
 { 
 setupTable ( " CREATE TABLE % s ( k int , v1 int , v2 int , v3 int , PRIMARY KEY ( k , v1 , v2 ) ) " ) ; 
 - String functionName = createSimpleFunction ( false ) ; 
 + String functionName = createSimpleFunction ( ) ; 
 String cql = String . format ( " SELECT * FROM % s WHERE k = 0 AND ( v1 , v2 ) IN ( ( % s , % s ) ) " , 
 KEYSPACE + " . " + currentTable ( ) , 
 functionCall ( functionName ) , 
 @ @ - 172 , 35 + 131 , 10 @ @ public class UFAuthTest extends CQLTester 
 } 
 
 @ Test 
 - public void deterministicFunctionInSelectMultiColumnInRestriction ( ) throws Throwable 
 - { 
 - setupTable ( " CREATE TABLE % s ( k int , v1 int , v2 int , v3 int , PRIMARY KEY ( k , v1 , v2 ) ) " ) ; 
 - String functionName = createSimpleFunction ( true ) ; 
 - String cql = String . format ( " SELECT * FROM % s WHERE k = 0 AND ( v1 , v2 ) IN ( ( % s , % s ) ) " , 
 - KEYSPACE + " . " + currentTable ( ) , 
 - functionCall ( functionName ) , 
 - functionCall ( functionName ) ) ; 
 - assertPermissionsOnFunction ( cql , functionName ) ; 
 - } 
 - 
 - 
 - @ Test 
 - public void nonDeterministicFunctionInSelectMultiColumnEQRestriction ( ) throws Throwable 
 - { 
 - setupTable ( " CREATE TABLE % s ( k int , v1 int , v2 int , v3 int , PRIMARY KEY ( k , v1 , v2 ) ) " ) ; 
 - String functionName = createSimpleFunction ( false ) ; 
 - String cql = String . format ( " SELECT * FROM % s WHERE k = 0 AND ( v1 , v2 ) = ( % s , % s ) " , 
 - KEYSPACE + " . " + currentTable ( ) , 
 - functionCall ( functionName ) , 
 - functionCall ( functionName ) ) ; 
 - assertPermissionsOnFunction ( cql , functionName ) ; 
 - } 
 - 
 - @ Test 
 - public void deterministicFunctionInSelectMultiColumnEQRestriction ( ) throws Throwable 
 + public void functionInSelectMultiColumnEQRestriction ( ) throws Throwable 
 { 
 setupTable ( " CREATE TABLE % s ( k int , v1 int , v2 int , v3 int , PRIMARY KEY ( k , v1 , v2 ) ) " ) ; 
 - String functionName = createSimpleFunction ( true ) ; 
 + String functionName = createSimpleFunction ( ) ; 
 String cql = String . format ( " SELECT * FROM % s WHERE k = 0 AND ( v1 , v2 ) = ( % s , % s ) " , 
 KEYSPACE + " . " + currentTable ( ) , 
 functionCall ( functionName ) , 
 @ @ - 209 , 22 + 143 , 10 @ @ public class UFAuthTest extends CQLTester 
 } 
 
 @ Test 
 - public void nonDeterministicFunctionInSelectMultiColumnSliceRestriction ( ) throws Throwable 
 - { 
 - setupTable ( " CREATE TABLE % s ( k int , v1 int , v2 int , v3 int , PRIMARY KEY ( k , v1 , v2 ) ) " ) ; 
 - String functionName = createSimpleFunction ( false ) ; 
 - String cql = String . format ( " SELECT * FROM % s WHERE k = 0 AND ( v1 , v2 ) > ( % s , % s ) " , 
 - KEYSPACE + " . " + currentTable ( ) , 
 - functionCall ( functionName ) , 
 - functionCall ( functionName ) ) ; 
 - assertPermissionsOnFunction ( cql , functionName ) ; 
 - } 
 - 
 - @ Test 
 - public void deterministicFunctionInSelectMultiColumnSliceRestriction ( ) throws Throwable 
 + public void functionInSelectMultiColumnSliceRestriction ( ) throws Throwable 
 { 
 setupTable ( " CREATE TABLE % s ( k int , v1 int , v2 int , v3 int , PRIMARY KEY ( k , v1 , v2 ) ) " ) ; 
 - String functionName = createSimpleFunction ( true ) ; 
 + String functionName = createSimpleFunction ( ) ; 
 String cql = String . format ( " SELECT * FROM % s WHERE k = 0 AND ( v1 , v2 ) < ( % s , % s ) " , 
 KEYSPACE + " . " + currentTable ( ) , 
 functionCall ( functionName ) , 
 @ @ - 233 , 19 + 155 , 9 @ @ public class UFAuthTest extends CQLTester 
 } 
 
 @ Test 
 - public void nonDeterministicFunctionInSelectTokenEQRestriction ( ) throws Throwable 
 - { 
 - String functionName = createSimpleFunction ( false ) ; 
 - String cql = String . format ( " SELECT * FROM % s WHERE token ( k ) = token ( % s ) " , 
 - KEYSPACE + " . " + currentTable ( ) , 
 - functionCall ( functionName ) ) ; 
 - assertPermissionsOnFunction ( cql , functionName ) ; 
 - } 
 - 
 - @ Test 
 - public void deterministicFunctionInSelectTokenEQRestriction ( ) throws Throwable 
 + public void functionInSelectTokenEQRestriction ( ) throws Throwable 
 { 
 - String functionName = createSimpleFunction ( true ) ; 
 + String functionName = createSimpleFunction ( ) ; 
 String cql = String . format ( " SELECT * FROM % s WHERE token ( k ) = token ( % s ) " , 
 KEYSPACE + " . " + currentTable ( ) , 
 functionCall ( functionName ) ) ; 
 @ @ - 253 , 38 + 165 , 19 @ @ public class UFAuthTest extends CQLTester 
 } 
 
 @ Test 
 - public void nonDeterministicFunctionInSelectTokenSliceRestriction ( ) throws Throwable 
 - { 
 - String functionName = createSimpleFunction ( false ) ; 
 - String cql = String . format ( " SELECT * FROM % s WHERE token ( k ) > token ( % s ) " , 
 - KEYSPACE + " . " + currentTable ( ) , 
 - functionCall ( functionName ) ) ; 
 - assertPermissionsOnFunction ( cql , functionName ) ; 
 - } 
 - 
 - @ Test 
 - public void deterministicFunctionInSelectTokenSliceRestriction ( ) throws Throwable 
 + public void functionInSelectTokenSliceRestriction ( ) throws Throwable 
 { 
 - String functionName = createSimpleFunction ( true ) ; 
 + String functionName = createSimpleFunction ( ) ; 
 String cql = String . format ( " SELECT * FROM % s WHERE token ( k ) < token ( % s ) " , 
 KEYSPACE + " . " + currentTable ( ) , 
 functionCall ( functionName ) ) ; 
 assertPermissionsOnFunction ( cql , functionName ) ; 
 } 
 - @ Test 
 - public void nonDeterministicFunctionInPKForInsert ( ) throws Throwable 
 - { 
 - String functionName = createSimpleFunction ( false ) ; 
 - String cql = String . format ( " INSERT INTO % s ( k , v1 , v2 ) VALUES ( % s , 0 , 0 ) " , 
 - KEYSPACE + " . " + currentTable ( ) , 
 - functionCall ( functionName ) ) ; 
 - assertPermissionsOnFunction ( cql , functionName ) ; 
 - } 
 
 @ Test 
 - public void deterministicFunctionInPKForInsert ( ) throws Throwable 
 + public void functionInPKForInsert ( ) throws Throwable 
 { 
 - String functionName = createSimpleFunction ( true ) ; 
 + String functionName = createSimpleFunction ( ) ; 
 String cql = String . format ( " INSERT INTO % s ( k , v1 , v2 ) VALUES ( % s , 0 , 0 ) " , 
 KEYSPACE + " . " + currentTable ( ) , 
 functionCall ( functionName ) ) ; 
 @ @ - 292 , 19 + 185 , 9 @ @ public class UFAuthTest extends CQLTester 
 } 
 
 @ Test 
 - public void nonDeterministicFunctionInClusteringValuesForInsert ( ) throws Throwable 
 - { 
 - String functionName = createSimpleFunction ( false ) ; 
 - String cql = String . format ( " INSERT INTO % s ( k , v1 , v2 ) VALUES ( 0 , % s , 0 ) " , 
 - KEYSPACE + " . " + currentTable ( ) , 
 - functionCall ( functionName ) ) ; 
 - assertPermissionsOnFunction ( cql , functionName ) ; 
 - } 
 - 
 - @ Test 
 - public void deterministicFunctionInClusteringValuesForInsert ( ) throws Throwable 
 + public void functionInClusteringValuesForInsert ( ) throws Throwable 
 { 
 - String functionName = createSimpleFunction ( true ) ; 
 + String functionName = createSimpleFunction ( ) ; 
 String cql = String . format ( " INSERT INTO % s ( k , v1 , v2 ) VALUES ( 0 , % s , 0 ) " , 
 KEYSPACE + " . " + currentTable ( ) , 
 functionCall ( functionName ) ) ; 
 @ @ - 312 , 19 + 195 , 9 @ @ public class UFAuthTest extends CQLTester 
 } 
 
 @ Test 
 - public void nonDeterministicFunctionInPKForDelete ( ) throws Throwable 
 - { 
 - String functionName = createSimpleFunction ( false ) ; 
 - String cql = String . format ( " DELETE FROM % s WHERE k = % s " , 
 - KEYSPACE + " . " + currentTable ( ) , 
 - functionCall ( functionName ) ) ; 
 - assertPermissionsOnFunction ( cql , functionName ) ; 
 - } 
 - 
 - @ Test 
 - public void deterministicFunctionInPKForDelete ( ) throws Throwable 
 + public void functionInPKForDelete ( ) throws Throwable 
 { 
 - String functionName = createSimpleFunction ( true ) ; 
 + String functionName = createSimpleFunction ( ) ; 
 String cql = String . format ( " DELETE FROM % s WHERE k = % s " , 
 KEYSPACE + " . " + currentTable ( ) , 
 functionCall ( functionName ) ) ; 
 @ @ - 332 , 20 + 205 , 9 @ @ public class UFAuthTest extends CQLTester 
 } 
 
 @ Test 
 - public void nonDeterministicFunctionInClusteringValuesForDelete ( ) throws Throwable 
 + public void functionInClusteringValuesForDelete ( ) throws Throwable 
 { 
 - String functionName = createSimpleFunction ( false ) ; 
 - String cql = String . format ( " DELETE FROM % s WHERE k = 0 AND v1 = % s " , 
 - KEYSPACE + " . " + currentTable ( ) , 
 - functionCall ( functionName ) ) ; 
 - assertPermissionsOnFunction ( cql , functionName ) ; 
 - } 
 - 
 - @ Test 
 - 
 - public void deterministicFunctionInClusteringValuesForDelete ( ) throws Throwable 
 - { 
 - String functionName = createSimpleFunction ( true ) ; 
 + String functionName = createSimpleFunction ( ) ; 
 String cql = String . format ( " DELETE FROM % s WHERE k = 0 AND v1 = % s " , 
 KEYSPACE + " . " + currentTable ( ) , 
 functionCall ( functionName ) ) ; 
 @ @ - 359 , 7 + 221 , 7 @ @ public class UFAuthTest extends CQLTester 
 List < String > functions = new ArrayList < > ( ) ; 
 for ( int i = 0 ; i < 3 ; i + + ) 
 { 
 - String functionName = createSimpleFunction ( false ) ; 
 + String functionName = createSimpleFunction ( ) ; 
 ModificationStatement stmt = 
 ( ModificationStatement ) getStatement ( String . format ( " INSERT INTO % s ( k , v1 , v2 ) " + 
 " VALUES ( % s , % s , % s ) " , 
 @ @ - 382 , 21 + 244 , 9 @ @ public class UFAuthTest extends CQLTester 
 } 
 
 @ Test 
 - public void testNestedNonDeterministicFunctions ( ) throws Throwable 
 - { 
 - String innerFunctionName = createSimpleFunction ( false ) ; 
 - String outerFunctionName = createFunction ( " int " , 
 - " CREATE NON DETERMINISTIC FUNCTION % s ( input int ) " + 
 - " RETURNS int " + 
 - " LANGUAGE java " + 
 - " AS ' return Integer . valueOf ( 0 ) ; ' " ) ; 
 - assertPermissionsOnNestedFunctions ( innerFunctionName , outerFunctionName ) ; 
 - } 
 - 
 - @ Test 
 - public void testNestedDeterministicFunctions ( ) throws Throwable 
 + public void testNestedFunctions ( ) throws Throwable 
 { 
 - String innerFunctionName = createSimpleFunction ( true ) ; 
 + String innerFunctionName = createSimpleFunction ( ) ; 
 String outerFunctionName = createFunction ( " int " , 
 " CREATE FUNCTION % s ( input int ) " + 
 " RETURNS int " + 
 @ @ - 406 , 41 + 256 , 10 @ @ public class UFAuthTest extends CQLTester 
 } 
 
 @ Test 
 - public void testNestedMixedFunctions ( ) throws Throwable 
 - { 
 - String innerFunctionName = createSimpleFunction ( true ) ; 
 - String outerFunctionName = createFunction ( " int " , 
 - " CREATE NON DETERMINISTIC FUNCTION % s ( input int ) " + 
 - " RETURNS int " + 
 - " LANGUAGE java " + 
 - " AS ' return Integer . valueOf ( 0 ) ; ' " ) ; 
 - assertPermissionsOnNestedFunctions ( innerFunctionName , outerFunctionName ) ; 
 - 
 - innerFunctionName = createSimpleFunction ( false ) ; 
 - outerFunctionName = createFunction ( " int " , 
 - " CREATE FUNCTION % s ( input int ) " + 
 - " RETURNS int " + 
 - " LANGUAGE java " + 
 - " AS ' return Integer . valueOf ( 0 ) ; ' " ) ; 
 - assertPermissionsOnNestedFunctions ( innerFunctionName , outerFunctionName ) ; 
 - } 
 - 
 - @ Test 
 - public void nonDeterministicFunctionInStaticColumnRestrictionInSelect ( ) throws Throwable 
 - { 
 - setupTable ( " CREATE TABLE % s ( k int , s int STATIC , v1 int , v2 int , PRIMARY KEY ( k , v1 ) ) " ) ; 
 - String functionName = createSimpleFunction ( false ) ; 
 - String cql = String . format ( " SELECT k FROM % s WHERE k = 0 AND s = % s " , 
 - KEYSPACE + " . " + currentTable ( ) , 
 - functionCall ( functionName ) ) ; 
 - assertPermissionsOnFunction ( cql , functionName ) ; 
 - } 
 - 
 - @ Test 
 - public void deterministicFunctionInStaticColumnRestrictionInSelect ( ) throws Throwable 
 + public void functionInStaticColumnRestrictionInSelect ( ) throws Throwable 
 { 
 setupTable ( " CREATE TABLE % s ( k int , s int STATIC , v1 int , v2 int , PRIMARY KEY ( k , v1 ) ) " ) ; 
 - String functionName = createSimpleFunction ( true ) ; 
 + String functionName = createSimpleFunction ( ) ; 
 String cql = String . format ( " SELECT k FROM % s WHERE k = 0 AND s = % s " , 
 KEYSPACE + " . " + currentTable ( ) , 
 functionCall ( functionName ) ) ; 
 @ @ - 448 , 41 + 267 , 19 @ @ public class UFAuthTest extends CQLTester 
 } 
 
 @ Test 
 - public void nonDeterministicFunctionInRegularCondition ( ) throws Throwable 
 - { 
 - String functionName = createSimpleFunction ( false ) ; 
 - String cql = String . format ( " UPDATE % s SET v2 = 0 WHERE k = 0 AND v1 = 0 IF v2 = % s " , 
 - KEYSPACE + " . " + currentTable ( ) , 
 - functionCall ( functionName ) ) ; 
 - assertPermissionsOnFunction ( cql , functionName ) ; 
 - } 
 - 
 - @ Test 
 - public void deterministicFunctionInRegularCondition ( ) throws Throwable 
 + public void functionInRegularCondition ( ) throws Throwable 
 { 
 - String functionName = createSimpleFunction ( true ) ; 
 + String functionName = createSimpleFunction ( ) ; 
 String cql = String . format ( " UPDATE % s SET v2 = 0 WHERE k = 0 AND v1 = 0 IF v2 = % s " , 
 KEYSPACE + " . " + currentTable ( ) , 
 functionCall ( functionName ) ) ; 
 assertPermissionsOnFunction ( cql , functionName ) ; 
 } 
 - 
 - @ Test 
 - public void nonDeterministicFunctionInStaticColumnCondition ( ) throws Throwable 
 - { 
 - setupTable ( " CREATE TABLE % s ( k int , s int STATIC , v1 int , v2 int , PRIMARY KEY ( k , v1 ) ) " ) ; 
 - String functionName = createSimpleFunction ( false ) ; 
 - String cql = String . format ( " UPDATE % s SET v2 = 0 WHERE k = 0 AND v1 = 0 IF s = % s " , 
 - KEYSPACE + " . " + currentTable ( ) , 
 - functionCall ( functionName ) ) ; 
 - assertPermissionsOnFunction ( cql , functionName ) ; 
 - } 
 - 
 @ Test 
 - public void deterministicFunctionInStaticColumnCondition ( ) throws Throwable 
 + public void functionInStaticColumnCondition ( ) throws Throwable 
 { 
 setupTable ( " CREATE TABLE % s ( k int , s int STATIC , v1 int , v2 int , PRIMARY KEY ( k , v1 ) ) " ) ; 
 - String functionName = createSimpleFunction ( true ) ; 
 + String functionName = createSimpleFunction ( ) ; 
 String cql = String . format ( " UPDATE % s SET v2 = 0 WHERE k = 0 AND v1 = 0 IF s = % s " , 
 KEYSPACE + " . " + currentTable ( ) , 
 functionCall ( functionName ) ) ; 
 @ @ - 490 , 22 + 287 , 10 @ @ public class UFAuthTest extends CQLTester 
 } 
 
 @ Test 
 - public void nonDeterministicFunctionInCollectionLiteralCondition ( ) throws Throwable 
 - { 
 - setupTable ( " CREATE TABLE % s ( k int , v1 int , m _ val map < int , int > , PRIMARY KEY ( k ) ) " ) ; 
 - String functionName = createSimpleFunction ( false ) ; 
 - String cql = String . format ( " UPDATE % s SET v1 = 0 WHERE k = 0 IF m _ val = { % s : % s } " , 
 - KEYSPACE + " . " + currentTable ( ) , 
 - functionCall ( functionName ) , 
 - functionCall ( functionName ) ) ; 
 - assertPermissionsOnFunction ( cql , functionName ) ; 
 - } 
 - 
 - @ Test 
 - public void deterministicFunctionInCollectionLiteralCondition ( ) throws Throwable 
 + public void functionInCollectionLiteralCondition ( ) throws Throwable 
 { 
 setupTable ( " CREATE TABLE % s ( k int , v1 int , m _ val map < int , int > , PRIMARY KEY ( k ) ) " ) ; 
 - String functionName = createSimpleFunction ( true ) ; 
 + String functionName = createSimpleFunction ( ) ; 
 String cql = String . format ( " UPDATE % s SET v1 = 0 WHERE k = 0 IF m _ val = { % s : % s } " , 
 KEYSPACE + " . " + currentTable ( ) , 
 functionCall ( functionName ) , 
 @ @ - 514 , 22 + 299 , 10 @ @ public class UFAuthTest extends CQLTester 
 } 
 
 @ Test 
 - public void nonDeterministicFunctionInCollectionElementCondition ( ) throws Throwable 
 - { 
 - setupTable ( " CREATE TABLE % s ( k int , v1 int , m _ val map < int , int > , PRIMARY KEY ( k ) ) " ) ; 
 - String functionName = createSimpleFunction ( false ) ; 
 - String cql = String . format ( " UPDATE % s SET v1 = 0 WHERE k = 0 IF m _ val [ % s ] = % s " , 
 - KEYSPACE + " . " + currentTable ( ) , 
 - functionCall ( functionName ) , 
 - functionCall ( functionName ) ) ; 
 - assertPermissionsOnFunction ( cql , functionName ) ; 
 - } 
 - 
 - @ Test 
 - public void deterministicFunctionInCollectionElementCondition ( ) throws Throwable 
 + public void functionInCollectionElementCondition ( ) throws Throwable 
 { 
 setupTable ( " CREATE TABLE % s ( k int , v1 int , m _ val map < int , int > , PRIMARY KEY ( k ) ) " ) ; 
 - String functionName = createSimpleFunction ( true ) ; 
 + String functionName = createSimpleFunction ( ) ; 
 String cql = String . format ( " UPDATE % s SET v1 = 0 WHERE k = 0 IF m _ val [ % s ] = % s " , 
 KEYSPACE + " . " + currentTable ( ) , 
 functionCall ( functionName ) , 
 @ @ - 546 , 7 + 319 , 7 @ @ public class UFAuthTest extends CQLTester 
 getStatement ( cql ) . checkAccess ( clientState ) ; 
 
 / / with non - terminal arguments , so evaluated at execution 
 - String functionName = createSimpleFunction ( false ) ; 
 + String functionName = createSimpleFunction ( ) ; 
 grantExecuteOnFunction ( functionName ) ; 
 cql = String . format ( " UPDATE % s SET v2 = 0 WHERE k = blobasint ( intasblob ( % s ) ) " , 
 KEYSPACE + " . " + currentTable ( ) , 
 @ @ - 612 , 10 + 385 , 10 @ @ public class UFAuthTest extends CQLTester 
 } 
 
 @ Test 
 - public void nonDeterministicFunctionWrappingAggregate ( ) throws Throwable 
 + public void functionWrappingAggregate ( ) throws Throwable 
 { 
 String outerFunc = createFunction ( " int " , 
 - " CREATE NON DETERMINISTIC FUNCTION % s ( input int ) " + 
 + " CREATE FUNCTION % s ( input int ) " + 
 " RETURNS int " + 
 " LANGUAGE java " + 
 " AS ' return input ; ' " ) ; 
 @ @ - 643 , 10 + 416 , 10 @ @ public class UFAuthTest extends CQLTester 
 } 
 
 @ Test 
 - public void aggregateWrappingNonDeterministicFunction ( ) throws Throwable 
 + public void aggregateWrappingFunction ( ) throws Throwable 
 { 
 String innerFunc = createFunction ( " int " , 
 - " CREATE NON DETERMINISTIC FUNCTION % s ( input int ) " + 
 + " CREATE FUNCTION % s ( input int ) " + 
 " RETURNS int " + 
 " LANGUAGE java " + 
 " AS ' return input ; ' " ) ; 
 @ @ - 809 , 10 + 582 , 10 @ @ public class UFAuthTest extends CQLTester 
 " AS ' return a ; ' " ) ; 
 } 
 
 - private String createSimpleFunction ( boolean deterministic ) throws Throwable 
 + private String createSimpleFunction ( ) throws Throwable 
 { 
 return createFunction ( " " , 
 - " CREATE " + ( deterministic ? " " : " NON " ) + " DETERMINISTIC FUNCTION % s ( ) " + 
 + " CREATE FUNCTION % s ( ) " + 
 " RETURNS int " + 
 " LANGUAGE java " + 
 " AS ' return Integer . valueOf ( 0 ) ; ' " ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g 
 index 79c5b9f . . 01dbafd 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Cql . g 
 + + + b / src / java / org / apache / cassandra / cql3 / Cql . g 
 @ @ - 752 , 11 + 752 , 10 @ @ K _ UPDATE : U P D A T E ; 
 K _ WITH : W I T H ; 
 K _ LIMIT : L I M I T ; 
 K _ USING : U S I N G ; 
 - K _ ALL : A L L ; 
 K _ CONSISTENCY : C O N S I S T E N C Y ; 
 K _ LEVEL : ( O N E 
 | Q U O R U M 
 - | K _ ALL 
 + | A L L 
 | A N Y 
 | L O C A L ' _ ' Q U O R U M 
 | E A C H ' _ ' Q U O R U M
