BLEU SCORE: 0.04372912656590315

TEST MSG: Fix TransactionLog recovery lastModified bug
GENERATED MSG: Add checksum to saved cache files

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / lifecycle / TransactionLog . java b / src / java / org / apache / cassandra / db / lifecycle / TransactionLog . java <nl> index 6bc2eeb . . 8f83f2c 100644 <nl> - - - a / src / java / org / apache / cassandra / db / lifecycle / TransactionLog . java <nl> + + + b / src / java / org / apache / cassandra / db / lifecycle / TransactionLog . java <nl> @ @ - 241 , 9 + 241 , 9 @ @ public class TransactionLog extends Transactional . AbstractTransactional implemen <nl> / / Paranoid sanity checks : we create another record by looking at the files as they are <nl> / / on disk right now and make sure the information still matches <nl> Record currentRecord = Record . makeOld ( files , relativeFilePath ) ; <nl> - if ( updateTime ! = currentRecord . updateTime ) <nl> + if ( updateTime ! = currentRecord . updateTime & & currentRecord . numFiles > 0 ) <nl> { <nl> - logger . error ( " Possible disk corruption detected for sstable [ { } ] , record [ { } ] : last update time [ { } ] should have been [ { } ] " , <nl> + logger . error ( " Unexpected files detected for sstable [ { } ] , record [ { } ] : last update time [ { } ] should have been [ { } ] " , <nl> relativeFilePath , <nl> record , <nl> new Date ( currentRecord . updateTime ) , <nl> @ @ - 253 , 7 + 253 , 7 @ @ public class TransactionLog extends Transactional . AbstractTransactional implemen <nl> <nl> if ( lastRecordIsCorrupt & & currentRecord . numFiles < numFiles ) <nl> { / / if we found a corruption in the last record , then we continue only if the number of files matches exactly . <nl> - logger . error ( " Possible disk corruption detected for sstable [ { } ] , record [ { } ] : number of files [ { } ] should have been [ { } ] " , <nl> + logger . error ( " Unexpected files detected for sstable [ { } ] , record [ { } ] : number of files [ { } ] should have been [ { } ] " , <nl> relativeFilePath , <nl> record , <nl> currentRecord . numFiles , <nl> @ @ - 346 , 7 + 346 , 7 @ @ public class TransactionLog extends Transactional . AbstractTransactional implemen <nl> for ( Record record : records ) <nl> { <nl> if ( ! record . verify ( parent . getFolder ( ) , false ) ) <nl> - throw new CorruptTransactionLogException ( String . format ( " Failed to verify transaction % s record [ % s ] : possible disk corruption , aborting " , parent . getId ( ) , record ) , <nl> + throw new CorruptTransactionLogException ( String . format ( " Failed to verify transaction % s record [ % s ] : unexpected disk state , aborting " , parent . getId ( ) , record ) , <nl> this ) ; <nl> } <nl> } <nl> @ @ - 384 , 7 + 384 , 7 @ @ public class TransactionLog extends Transactional . AbstractTransactional implemen <nl> { <nl> if ( ! record . verify ( parent . getFolder ( ) , true ) ) <nl> throw new CorruptTransactionLogException ( String . format ( " Last record of transaction % s is corrupt [ % s ] and at least " + <nl> - " one previous record does not match state on disk , possible disk corruption , aborting " , <nl> + " one previous record does not match state on disk , unexpected disk state , aborting " , <nl> parent . getId ( ) , message ) , <nl> this ) ; <nl> } <nl> @ @ - 396 , 7 + 396 , 7 @ @ public class TransactionLog extends Transactional . AbstractTransactional implemen <nl> } <nl> else <nl> { <nl> - throw new CorruptTransactionLogException ( String . format ( " Non - last record of transaction % s is corrupt [ % s ] , possible disk corruption , aborting " , parent . getId ( ) , message ) , this ) ; <nl> + throw new CorruptTransactionLogException ( String . format ( " Non - last record of transaction % s is corrupt [ % s ] , unexpected disk state , aborting " , parent . getId ( ) , message ) , this ) ; <nl> } <nl> } <nl> <nl> @ @ - 989 , 7 + 989 , 7 @ @ public class TransactionLog extends Transactional . AbstractTransactional implemen <nl> if ( accumulate = = null ) <nl> accumulate = data . removeUnfinishedLeftovers ( accumulate ) ; <nl> else <nl> - logger . error ( " Possible disk corruption : failed to read transaction log { } " , log , accumulate ) ; <nl> + logger . error ( " Unexpected disk state : failed to read transaction log { } " , log , accumulate ) ; <nl> } <nl> } <nl> } <nl> @ @ - 1005 , 7 + 1005 , 7 @ @ public class TransactionLog extends Transactional . AbstractTransactional implemen <nl> static final class FileLister <nl> { <nl> / / The maximum number of attempts for scanning the folder <nl> - private static final int MAX _ ATTEMPTS = 5 ; <nl> + private static final int MAX _ ATTEMPTS = 10 ; <nl> <nl> / / The delay between each attempt <nl> private static final int REATTEMPT _ DELAY _ MILLIS = 5 ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / lifecycle / TransactionLogTest . java b / test / unit / org / apache / cassandra / db / lifecycle / TransactionLogTest . java <nl> index 7739163 . . 405d975 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / lifecycle / TransactionLogTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / lifecycle / TransactionLogTest . java <nl> @ @ - 84 , 7 + 84 , 7 @ @ public class TransactionLogTest extends AbstractTransactionalTest <nl> final SSTableReader sstableNew ; <nl> final TransactionLog . SSTableTidier tidier ; <nl> <nl> - public Transaction ( ColumnFamilyStore cfs , TransactionLog txnLogs ) throws IOException <nl> + Transaction ( ColumnFamilyStore cfs , TransactionLog txnLogs ) throws IOException <nl> { <nl> this . cfs = cfs ; <nl> this . txnLogs = txnLogs ; <nl> @ @ - 129 , 23 + 129 , 23 @ @ public class TransactionLogTest extends AbstractTransactionalTest <nl> txnLogs . prepareToCommit ( ) ; <nl> } <nl> <nl> - protected void assertInProgress ( ) throws Exception <nl> + void assertInProgress ( ) throws Exception <nl> { <nl> assertFiles ( txnLogs . getDataFolder ( ) , Sets . newHashSet ( Iterables . concat ( sstableNew . getAllFilePaths ( ) , <nl> sstableOld . getAllFilePaths ( ) , <nl> Collections . singleton ( txnLogs . getData ( ) . getLogFile ( ) . file . getPath ( ) ) ) ) ) ; <nl> } <nl> <nl> - protected void assertPrepared ( ) throws Exception <nl> + void assertPrepared ( ) throws Exception <nl> { <nl> } <nl> <nl> - protected void assertAborted ( ) throws Exception <nl> + void assertAborted ( ) throws Exception <nl> { <nl> assertFiles ( txnLogs . getDataFolder ( ) , new HashSet < > ( sstableOld . getAllFilePaths ( ) ) ) ; <nl> } <nl> <nl> - protected void assertCommitted ( ) throws Exception <nl> + void assertCommitted ( ) throws Exception <nl> { <nl> assertFiles ( txnLogs . getDataFolder ( ) , new HashSet < > ( sstableNew . getAllFilePaths ( ) ) ) ; <nl> } <nl> @ @ - 334 , 7 + 334 , 7 @ @ public class TransactionLogTest extends AbstractTransactionalTest <nl> transactionLog . trackNew ( sstableNew ) ; <nl> TransactionLog . SSTableTidier tidier = transactionLog . obsoleted ( sstableOld ) ; <nl> <nl> - Set < File > tmpFiles = Sets . newHashSet ( Iterables . concat ( sstableNew . getAllFilePaths ( ) . stream ( ) . map ( p - > new File ( p ) ) . collect ( Collectors . toList ( ) ) , <nl> + Set < File > tmpFiles = Sets . newHashSet ( Iterables . concat ( sstableNew . getAllFilePaths ( ) . stream ( ) . map ( File : : new ) . collect ( Collectors . toList ( ) ) , <nl> Collections . singleton ( transactionLog . getData ( ) . getLogFile ( ) . file ) ) ) ; <nl> <nl> sstableNew . selfRef ( ) . release ( ) ; <nl> @ @ - 580 , 7 + 580 , 7 @ @ public class TransactionLogTest extends AbstractTransactionalTest <nl> <nl> String txnFilePath = transactionLog . getData ( ) . getLogFile ( ) . file . getPath ( ) ; <nl> <nl> - transactionLog . complete ( null ) ; <nl> + assertNull ( transactionLog . complete ( null ) ) ; <nl> <nl> sstableOld . selfRef ( ) . release ( ) ; <nl> sstableNew . selfRef ( ) . release ( ) ; <nl> @ @ - 644 , 7 + 644 , 7 @ @ public class TransactionLogTest extends AbstractTransactionalTest <nl> } ) ; <nl> } <nl> <nl> - private void testObsoletedFilesChanged ( Consumer < SSTableReader > modifier ) throws IOException <nl> + private static void testObsoletedFilesChanged ( Consumer < SSTableReader > modifier ) throws IOException <nl> { <nl> ColumnFamilyStore cfs = MockSchema . newCFS ( KEYSPACE ) ; <nl> SSTableReader sstableOld = sstable ( cfs , 0 , 128 ) ; <nl> @ @ - 684 , 7 + 684 , 18 @ @ public class TransactionLogTest extends AbstractTransactionalTest <nl> } <nl> <nl> @ Test <nl> - public void testGetTemporaryFilesSafeAfterObsoletion ( ) throws Throwable <nl> + public void testGetTemporaryFilesSafeAfterObsoletion _ 1 ( ) throws Throwable <nl> + { <nl> + testGetTemporaryFilesSafeAfterObsoletion ( true ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetTemporaryFilesSafeAfterObsoletion _ 2 ( ) throws Throwable <nl> + { <nl> + testGetTemporaryFilesSafeAfterObsoletion ( false ) ; <nl> + } <nl> + <nl> + private void testGetTemporaryFilesSafeAfterObsoletion ( boolean finishBefore ) throws Throwable <nl> { <nl> ColumnFamilyStore cfs = MockSchema . newCFS ( KEYSPACE ) ; <nl> SSTableReader sstable = sstable ( cfs , 0 , 128 ) ; <nl> @ @ - 695 , 27 + 706 , 33 @ @ public class TransactionLogTest extends AbstractTransactionalTest <nl> <nl> TransactionLog . SSTableTidier tidier = transactionLogs . obsoleted ( sstable ) ; <nl> <nl> - transactionLogs . finish ( ) ; <nl> + if ( finishBefore ) <nl> + transactionLogs . finish ( ) ; <nl> + <nl> sstable . markObsolete ( tidier ) ; <nl> sstable . selfRef ( ) . release ( ) ; <nl> <nl> - for ( int i = 0 ; i < 1000 ; i + + ) <nl> + for ( int i = 0 ; i < 100 ; i + + ) <nl> { <nl> / / This should race with the asynchronous deletion of txn log files <nl> / / It doesn ' t matter what it returns but it should not throw <nl> TransactionLog . getTemporaryFiles ( cfs . metadata , dataFolder ) ; <nl> } <nl> + <nl> + if ( ! finishBefore ) <nl> + transactionLogs . finish ( ) ; <nl> } <nl> <nl> private static SSTableReader sstable ( ColumnFamilyStore cfs , int generation , int size ) throws IOException <nl> { <nl> Directories dir = new Directories ( cfs . metadata ) ; <nl> - Descriptor descriptor = new Descriptor ( dir . getDirectoryForNewSSTables ( ) , cfs . keyspace . getName ( ) , cfs . getColumnFamilyName ( ) , generation ) ; <nl> + Descriptor descriptor = new Descriptor ( dir . getDirectoryForNewSSTables ( ) , cfs . keyspace . getName ( ) , cfs . getTableName ( ) , generation ) ; <nl> Set < Component > components = ImmutableSet . of ( Component . DATA , Component . PRIMARY _ INDEX , Component . FILTER , Component . TOC ) ; <nl> for ( Component component : components ) <nl> { <nl> File file = new File ( descriptor . filenameFor ( component ) ) ; <nl> - file . createNewFile ( ) ; <nl> + if ( ! file . exists ( ) ) <nl> + assertTrue ( file . createNewFile ( ) ) ; <nl> try ( RandomAccessFile raf = new RandomAccessFile ( file , " rw " ) ) <nl> { <nl> raf . setLength ( size ) ; <nl> @ @ - 725 , 7 + 742 , 7 @ @ public class TransactionLogTest extends AbstractTransactionalTest <nl> SegmentedFile dFile = new BufferedSegmentedFile ( new ChannelProxy ( new File ( descriptor . filenameFor ( Component . DATA ) ) ) , RandomAccessReader . DEFAULT _ BUFFER _ SIZE , 0 ) ; <nl> SegmentedFile iFile = new BufferedSegmentedFile ( new ChannelProxy ( new File ( descriptor . filenameFor ( Component . PRIMARY _ INDEX ) ) ) , RandomAccessReader . DEFAULT _ BUFFER _ SIZE , 0 ) ; <nl> <nl> - SerializationHeader header = SerializationHeader . make ( cfs . metadata , Collections . EMPTY _ LIST ) ; <nl> + SerializationHeader header = SerializationHeader . make ( cfs . metadata , Collections . emptyList ( ) ) ; <nl> StatsMetadata metadata = ( StatsMetadata ) new MetadataCollector ( cfs . metadata . comparator ) <nl> . finalizeMetadata ( cfs . metadata . partitioner . getClass ( ) . getCanonicalName ( ) , 0 . 01f , - 1 , header ) <nl> . get ( MetadataType . STATS ) ; <nl> @ @ - 754 , 14 + 771 , 18 @ @ public class TransactionLogTest extends AbstractTransactionalTest <nl> TransactionLog . waitForDeletions ( ) ; <nl> <nl> File dir = new File ( dirPath ) ; <nl> - for ( File file : dir . listFiles ( ) ) <nl> + File [ ] files = dir . listFiles ( ) ; <nl> + if ( files ! = null ) <nl> { <nl> - if ( file . isDirectory ( ) ) <nl> - continue ; <nl> + for ( File file : files ) <nl> + { <nl> + if ( file . isDirectory ( ) ) <nl> + continue ; <nl> <nl> - String filePath = file . getPath ( ) ; <nl> - assertTrue ( filePath , expectedFiles . contains ( filePath ) ) ; <nl> - expectedFiles . remove ( filePath ) ; <nl> + String filePath = file . getPath ( ) ; <nl> + assertTrue ( filePath , expectedFiles . contains ( filePath ) ) ; <nl> + expectedFiles . remove ( filePath ) ; <nl> + } <nl> } <nl> <nl> if ( excludeNonExistingFiles )
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / lifecycle / TransactionLog . java b / src / java / org / apache / cassandra / db / lifecycle / TransactionLog . java 
 index 6bc2eeb . . 8f83f2c 100644 
 - - - a / src / java / org / apache / cassandra / db / lifecycle / TransactionLog . java 
 + + + b / src / java / org / apache / cassandra / db / lifecycle / TransactionLog . java 
 @ @ - 241 , 9 + 241 , 9 @ @ public class TransactionLog extends Transactional . AbstractTransactional implemen 
 / / Paranoid sanity checks : we create another record by looking at the files as they are 
 / / on disk right now and make sure the information still matches 
 Record currentRecord = Record . makeOld ( files , relativeFilePath ) ; 
 - if ( updateTime ! = currentRecord . updateTime ) 
 + if ( updateTime ! = currentRecord . updateTime & & currentRecord . numFiles > 0 ) 
 { 
 - logger . error ( " Possible disk corruption detected for sstable [ { } ] , record [ { } ] : last update time [ { } ] should have been [ { } ] " , 
 + logger . error ( " Unexpected files detected for sstable [ { } ] , record [ { } ] : last update time [ { } ] should have been [ { } ] " , 
 relativeFilePath , 
 record , 
 new Date ( currentRecord . updateTime ) , 
 @ @ - 253 , 7 + 253 , 7 @ @ public class TransactionLog extends Transactional . AbstractTransactional implemen 
 
 if ( lastRecordIsCorrupt & & currentRecord . numFiles < numFiles ) 
 { / / if we found a corruption in the last record , then we continue only if the number of files matches exactly . 
 - logger . error ( " Possible disk corruption detected for sstable [ { } ] , record [ { } ] : number of files [ { } ] should have been [ { } ] " , 
 + logger . error ( " Unexpected files detected for sstable [ { } ] , record [ { } ] : number of files [ { } ] should have been [ { } ] " , 
 relativeFilePath , 
 record , 
 currentRecord . numFiles , 
 @ @ - 346 , 7 + 346 , 7 @ @ public class TransactionLog extends Transactional . AbstractTransactional implemen 
 for ( Record record : records ) 
 { 
 if ( ! record . verify ( parent . getFolder ( ) , false ) ) 
 - throw new CorruptTransactionLogException ( String . format ( " Failed to verify transaction % s record [ % s ] : possible disk corruption , aborting " , parent . getId ( ) , record ) , 
 + throw new CorruptTransactionLogException ( String . format ( " Failed to verify transaction % s record [ % s ] : unexpected disk state , aborting " , parent . getId ( ) , record ) , 
 this ) ; 
 } 
 } 
 @ @ - 384 , 7 + 384 , 7 @ @ public class TransactionLog extends Transactional . AbstractTransactional implemen 
 { 
 if ( ! record . verify ( parent . getFolder ( ) , true ) ) 
 throw new CorruptTransactionLogException ( String . format ( " Last record of transaction % s is corrupt [ % s ] and at least " + 
 - " one previous record does not match state on disk , possible disk corruption , aborting " , 
 + " one previous record does not match state on disk , unexpected disk state , aborting " , 
 parent . getId ( ) , message ) , 
 this ) ; 
 } 
 @ @ - 396 , 7 + 396 , 7 @ @ public class TransactionLog extends Transactional . AbstractTransactional implemen 
 } 
 else 
 { 
 - throw new CorruptTransactionLogException ( String . format ( " Non - last record of transaction % s is corrupt [ % s ] , possible disk corruption , aborting " , parent . getId ( ) , message ) , this ) ; 
 + throw new CorruptTransactionLogException ( String . format ( " Non - last record of transaction % s is corrupt [ % s ] , unexpected disk state , aborting " , parent . getId ( ) , message ) , this ) ; 
 } 
 } 
 
 @ @ - 989 , 7 + 989 , 7 @ @ public class TransactionLog extends Transactional . AbstractTransactional implemen 
 if ( accumulate = = null ) 
 accumulate = data . removeUnfinishedLeftovers ( accumulate ) ; 
 else 
 - logger . error ( " Possible disk corruption : failed to read transaction log { } " , log , accumulate ) ; 
 + logger . error ( " Unexpected disk state : failed to read transaction log { } " , log , accumulate ) ; 
 } 
 } 
 } 
 @ @ - 1005 , 7 + 1005 , 7 @ @ public class TransactionLog extends Transactional . AbstractTransactional implemen 
 static final class FileLister 
 { 
 / / The maximum number of attempts for scanning the folder 
 - private static final int MAX _ ATTEMPTS = 5 ; 
 + private static final int MAX _ ATTEMPTS = 10 ; 
 
 / / The delay between each attempt 
 private static final int REATTEMPT _ DELAY _ MILLIS = 5 ; 
 diff - - git a / test / unit / org / apache / cassandra / db / lifecycle / TransactionLogTest . java b / test / unit / org / apache / cassandra / db / lifecycle / TransactionLogTest . java 
 index 7739163 . . 405d975 100644 
 - - - a / test / unit / org / apache / cassandra / db / lifecycle / TransactionLogTest . java 
 + + + b / test / unit / org / apache / cassandra / db / lifecycle / TransactionLogTest . java 
 @ @ - 84 , 7 + 84 , 7 @ @ public class TransactionLogTest extends AbstractTransactionalTest 
 final SSTableReader sstableNew ; 
 final TransactionLog . SSTableTidier tidier ; 
 
 - public Transaction ( ColumnFamilyStore cfs , TransactionLog txnLogs ) throws IOException 
 + Transaction ( ColumnFamilyStore cfs , TransactionLog txnLogs ) throws IOException 
 { 
 this . cfs = cfs ; 
 this . txnLogs = txnLogs ; 
 @ @ - 129 , 23 + 129 , 23 @ @ public class TransactionLogTest extends AbstractTransactionalTest 
 txnLogs . prepareToCommit ( ) ; 
 } 
 
 - protected void assertInProgress ( ) throws Exception 
 + void assertInProgress ( ) throws Exception 
 { 
 assertFiles ( txnLogs . getDataFolder ( ) , Sets . newHashSet ( Iterables . concat ( sstableNew . getAllFilePaths ( ) , 
 sstableOld . getAllFilePaths ( ) , 
 Collections . singleton ( txnLogs . getData ( ) . getLogFile ( ) . file . getPath ( ) ) ) ) ) ; 
 } 
 
 - protected void assertPrepared ( ) throws Exception 
 + void assertPrepared ( ) throws Exception 
 { 
 } 
 
 - protected void assertAborted ( ) throws Exception 
 + void assertAborted ( ) throws Exception 
 { 
 assertFiles ( txnLogs . getDataFolder ( ) , new HashSet < > ( sstableOld . getAllFilePaths ( ) ) ) ; 
 } 
 
 - protected void assertCommitted ( ) throws Exception 
 + void assertCommitted ( ) throws Exception 
 { 
 assertFiles ( txnLogs . getDataFolder ( ) , new HashSet < > ( sstableNew . getAllFilePaths ( ) ) ) ; 
 } 
 @ @ - 334 , 7 + 334 , 7 @ @ public class TransactionLogTest extends AbstractTransactionalTest 
 transactionLog . trackNew ( sstableNew ) ; 
 TransactionLog . SSTableTidier tidier = transactionLog . obsoleted ( sstableOld ) ; 
 
 - Set < File > tmpFiles = Sets . newHashSet ( Iterables . concat ( sstableNew . getAllFilePaths ( ) . stream ( ) . map ( p - > new File ( p ) ) . collect ( Collectors . toList ( ) ) , 
 + Set < File > tmpFiles = Sets . newHashSet ( Iterables . concat ( sstableNew . getAllFilePaths ( ) . stream ( ) . map ( File : : new ) . collect ( Collectors . toList ( ) ) , 
 Collections . singleton ( transactionLog . getData ( ) . getLogFile ( ) . file ) ) ) ; 
 
 sstableNew . selfRef ( ) . release ( ) ; 
 @ @ - 580 , 7 + 580 , 7 @ @ public class TransactionLogTest extends AbstractTransactionalTest 
 
 String txnFilePath = transactionLog . getData ( ) . getLogFile ( ) . file . getPath ( ) ; 
 
 - transactionLog . complete ( null ) ; 
 + assertNull ( transactionLog . complete ( null ) ) ; 
 
 sstableOld . selfRef ( ) . release ( ) ; 
 sstableNew . selfRef ( ) . release ( ) ; 
 @ @ - 644 , 7 + 644 , 7 @ @ public class TransactionLogTest extends AbstractTransactionalTest 
 } ) ; 
 } 
 
 - private void testObsoletedFilesChanged ( Consumer < SSTableReader > modifier ) throws IOException 
 + private static void testObsoletedFilesChanged ( Consumer < SSTableReader > modifier ) throws IOException 
 { 
 ColumnFamilyStore cfs = MockSchema . newCFS ( KEYSPACE ) ; 
 SSTableReader sstableOld = sstable ( cfs , 0 , 128 ) ; 
 @ @ - 684 , 7 + 684 , 18 @ @ public class TransactionLogTest extends AbstractTransactionalTest 
 } 
 
 @ Test 
 - public void testGetTemporaryFilesSafeAfterObsoletion ( ) throws Throwable 
 + public void testGetTemporaryFilesSafeAfterObsoletion _ 1 ( ) throws Throwable 
 + { 
 + testGetTemporaryFilesSafeAfterObsoletion ( true ) ; 
 + } 
 + 
 + @ Test 
 + public void testGetTemporaryFilesSafeAfterObsoletion _ 2 ( ) throws Throwable 
 + { 
 + testGetTemporaryFilesSafeAfterObsoletion ( false ) ; 
 + } 
 + 
 + private void testGetTemporaryFilesSafeAfterObsoletion ( boolean finishBefore ) throws Throwable 
 { 
 ColumnFamilyStore cfs = MockSchema . newCFS ( KEYSPACE ) ; 
 SSTableReader sstable = sstable ( cfs , 0 , 128 ) ; 
 @ @ - 695 , 27 + 706 , 33 @ @ public class TransactionLogTest extends AbstractTransactionalTest 
 
 TransactionLog . SSTableTidier tidier = transactionLogs . obsoleted ( sstable ) ; 
 
 - transactionLogs . finish ( ) ; 
 + if ( finishBefore ) 
 + transactionLogs . finish ( ) ; 
 + 
 sstable . markObsolete ( tidier ) ; 
 sstable . selfRef ( ) . release ( ) ; 
 
 - for ( int i = 0 ; i < 1000 ; i + + ) 
 + for ( int i = 0 ; i < 100 ; i + + ) 
 { 
 / / This should race with the asynchronous deletion of txn log files 
 / / It doesn ' t matter what it returns but it should not throw 
 TransactionLog . getTemporaryFiles ( cfs . metadata , dataFolder ) ; 
 } 
 + 
 + if ( ! finishBefore ) 
 + transactionLogs . finish ( ) ; 
 } 
 
 private static SSTableReader sstable ( ColumnFamilyStore cfs , int generation , int size ) throws IOException 
 { 
 Directories dir = new Directories ( cfs . metadata ) ; 
 - Descriptor descriptor = new Descriptor ( dir . getDirectoryForNewSSTables ( ) , cfs . keyspace . getName ( ) , cfs . getColumnFamilyName ( ) , generation ) ; 
 + Descriptor descriptor = new Descriptor ( dir . getDirectoryForNewSSTables ( ) , cfs . keyspace . getName ( ) , cfs . getTableName ( ) , generation ) ; 
 Set < Component > components = ImmutableSet . of ( Component . DATA , Component . PRIMARY _ INDEX , Component . FILTER , Component . TOC ) ; 
 for ( Component component : components ) 
 { 
 File file = new File ( descriptor . filenameFor ( component ) ) ; 
 - file . createNewFile ( ) ; 
 + if ( ! file . exists ( ) ) 
 + assertTrue ( file . createNewFile ( ) ) ; 
 try ( RandomAccessFile raf = new RandomAccessFile ( file , " rw " ) ) 
 { 
 raf . setLength ( size ) ; 
 @ @ - 725 , 7 + 742 , 7 @ @ public class TransactionLogTest extends AbstractTransactionalTest 
 SegmentedFile dFile = new BufferedSegmentedFile ( new ChannelProxy ( new File ( descriptor . filenameFor ( Component . DATA ) ) ) , RandomAccessReader . DEFAULT _ BUFFER _ SIZE , 0 ) ; 
 SegmentedFile iFile = new BufferedSegmentedFile ( new ChannelProxy ( new File ( descriptor . filenameFor ( Component . PRIMARY _ INDEX ) ) ) , RandomAccessReader . DEFAULT _ BUFFER _ SIZE , 0 ) ; 
 
 - SerializationHeader header = SerializationHeader . make ( cfs . metadata , Collections . EMPTY _ LIST ) ; 
 + SerializationHeader header = SerializationHeader . make ( cfs . metadata , Collections . emptyList ( ) ) ; 
 StatsMetadata metadata = ( StatsMetadata ) new MetadataCollector ( cfs . metadata . comparator ) 
 . finalizeMetadata ( cfs . metadata . partitioner . getClass ( ) . getCanonicalName ( ) , 0 . 01f , - 1 , header ) 
 . get ( MetadataType . STATS ) ; 
 @ @ - 754 , 14 + 771 , 18 @ @ public class TransactionLogTest extends AbstractTransactionalTest 
 TransactionLog . waitForDeletions ( ) ; 
 
 File dir = new File ( dirPath ) ; 
 - for ( File file : dir . listFiles ( ) ) 
 + File [ ] files = dir . listFiles ( ) ; 
 + if ( files ! = null ) 
 { 
 - if ( file . isDirectory ( ) ) 
 - continue ; 
 + for ( File file : files ) 
 + { 
 + if ( file . isDirectory ( ) ) 
 + continue ; 
 
 - String filePath = file . getPath ( ) ; 
 - assertTrue ( filePath , expectedFiles . contains ( filePath ) ) ; 
 - expectedFiles . remove ( filePath ) ; 
 + String filePath = file . getPath ( ) ; 
 + assertTrue ( filePath , expectedFiles . contains ( filePath ) ) ; 
 + expectedFiles . remove ( filePath ) ; 
 + } 
 } 
 
 if ( excludeNonExistingFiles )

NEAREST DIFF:
ELIMINATEDSENTENCE
