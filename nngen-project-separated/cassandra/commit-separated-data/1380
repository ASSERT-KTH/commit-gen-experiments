BLEU SCORE: 0.01222796968620182

TEST MSG: Allow count ( * ) and count ( 1 ) to be use as normal aggregation
GENERATED MSG: Minor fixes for CQL3

TEST DIFF (one line): diff - - git a / NEWS . txt b / NEWS . txt <nl> index 37a1b9e . . a9cf70d 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 100 , 6 + 100 , 7 @ @ New features <nl> - The toTimestamp ( date ) and toUnixTimestamp ( date ) functions have been added to allow <nl> to convert from date into timestamp type and bigint raw value . <nl> - SizeTieredCompactionStrategy parameter cold _ reads _ to _ omit has been removed . <nl> + - COUNT ( * ) and COUNT ( 1 ) can be selected with other columns or functions <nl> <nl> <nl> 2 . 1 . 9 <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> index 0db09b8 . . 3d2aba5 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Cql . g <nl> + + + b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> @ @ - 295 , 8 + 295 , 7 @ @ selectStatement returns [ SelectStatement . RawStatement expr ] <nl> } <nl> : K _ SELECT <nl> ( K _ JSON { isJson = true ; } ) ? <nl> - ( ( K _ DISTINCT { isDistinct = true ; } ) ? sclause = selectClause <nl> - | sclause = selectCountClause ) <nl> + ( ( K _ DISTINCT { isDistinct = true ; } ) ? sclause = selectClause ) <nl> K _ FROM cf = columnFamilyName <nl> ( K _ WHERE wclause = whereClause ) ? <nl> ( K _ ORDER K _ BY orderByClause [ orderings ] ( ' , ' orderByClause [ orderings ] ) * ) ? <nl> @ @ - 324 , 6 + 323 , 7 @ @ selector returns [ RawSelector s ] <nl> unaliasedSelector returns [ Selectable . Raw s ] <nl> @ init { Selectable . Raw tmp = null ; } <nl> : ( c = cident { tmp = c ; } <nl> + | K _ COUNT ' ( ' countArgument ' ) ' { tmp = new Selectable . WithFunction . Raw ( FunctionName . nativeFunction ( " countRows " ) , Collections . < Selectable . Raw > emptyList ( ) ) ; } <nl> | K _ WRITETIME ' ( ' c = cident ' ) ' { tmp = new Selectable . WritetimeOrTTL . Raw ( c , true ) ; } <nl> | K _ TTL ' ( ' c = cident ' ) ' { tmp = new Selectable . WritetimeOrTTL . Raw ( c , false ) ; } <nl> | f = functionName args = selectionFunctionArgs { tmp = new Selectable . WithFunction . Raw ( f , args ) ; } <nl> @ @ - 337 , 11 + 337 , 6 @ @ selectionFunctionArgs returns [ List < Selectable . Raw > a ] <nl> ' ) ' { $ a = args ; } <nl> ; <nl> <nl> - selectCountClause returns [ List < RawSelector > expr ] <nl> - @ init { ColumnIdentifier alias = new ColumnIdentifier ( " count " , false ) ; } <nl> - : K _ COUNT ' ( ' countArgument ' ) ' ( K _ AS c = ident { alias = c ; } ) ? { $ expr = new ArrayList < RawSelector > ( ) ; $ expr . add ( new RawSelector ( new Selectable . WithFunction . Raw ( FunctionName . nativeFunction ( " countRows " ) , Collections . < Selectable . Raw > emptyList ( ) ) , alias ) ) ; } <nl> - ; <nl> - <nl> countArgument <nl> : ' \ * ' <nl> | i = INTEGER { if ( ! i . getText ( ) . equals ( " 1 " ) ) addRecognitionError ( " Only COUNT ( 1 ) is supported , got COUNT ( " + i . getText ( ) + " ) " ) ; } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java b / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java <nl> index 1b22da6 . . 41e43c0 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java <nl> @ @ - 38 , 6 + 38 , 17 @ @ import org . apache . cassandra . db . marshal . ShortType ; <nl> public abstract class AggregateFcts <nl> { <nl> / * * <nl> + * Checks if the specified function is the count rows ( e . g . COUNT ( * ) or COUNT ( 1 ) ) function . <nl> + * <nl> + * @ param function the function to check <nl> + * @ return < code > true < / code > if the specified function is the count rows one , < code > false < / code > otherwise . <nl> + * / <nl> + public static boolean isCountRows ( Function function ) <nl> + { <nl> + return function = = countRowsFunction ; <nl> + } <nl> + <nl> + / * * <nl> * The function used to count the number of rows of a result set . This function is called when COUNT ( * ) or COUNT ( 1 ) <nl> * is specified . <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / selection / AbstractFunctionSelector . java b / src / java / org / apache / cassandra / cql3 / selection / AbstractFunctionSelector . java <nl> index abf52e1 . . bf1234f 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / selection / AbstractFunctionSelector . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / selection / AbstractFunctionSelector . java <nl> @ @ - 22 , 8 + 22 , 11 @ @ import java . util . Arrays ; <nl> import java . util . List ; <nl> <nl> import com . google . common . collect . Iterables ; <nl> + <nl> import org . apache . commons . lang3 . text . StrBuilder ; <nl> <nl> + import org . apache . cassandra . cql3 . functions . AggregateFcts ; <nl> + <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> import org . apache . cassandra . cql3 . ColumnSpecification ; <nl> import org . apache . cassandra . cql3 . functions . Function ; <nl> @ @ - 53 , 6 + 56 , 9 @ @ abstract class AbstractFunctionSelector < T extends Function > extends Selector <nl> { <nl> protected String getColumnName ( ) <nl> { <nl> + if ( AggregateFcts . isCountRows ( fun ) ) <nl> + return " count " ; <nl> + <nl> return new StrBuilder ( fun . name ( ) . toString ( ) ) . append ( ' ( ' ) <nl> . appendWithSeparators ( factories . getColumnNames ( ) , " , " ) <nl> . append ( ' ) ' ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / selection / Selector . java b / src / java / org / apache / cassandra / cql3 / selection / Selector . java <nl> index 9b7f0ba . . d53fba1 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / selection / Selector . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / selection / Selector . java <nl> @ @ - 21 , 7 + 21 , 6 @ @ import java . nio . ByteBuffer ; <nl> import java . util . Collections ; <nl> <nl> import org . apache . cassandra . config . CFMetaData ; <nl> - import org . apache . cassandra . config . ColumnDefinition ; <nl> import org . apache . cassandra . cql3 . AssignmentTestable ; <nl> import org . apache . cassandra . cql3 . ColumnIdentifier ; <nl> import org . apache . cassandra . cql3 . ColumnSpecification ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> index 9881d73 . . b44fc71 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> @ @ - 93 , 6 + 93 , 45 @ @ public class AggregationTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> + public void testCountStarFunction ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c double , primary key ( a , b ) ) " ) ; <nl> + <nl> + / / Test with empty table <nl> + assertColumnNames ( execute ( " SELECT COUNT ( * ) FROM % s " ) , " count " ) ; <nl> + assertRows ( execute ( " SELECT COUNT ( * ) FROM % s " ) , row ( 0L ) ) ; <nl> + assertColumnNames ( execute ( " SELECT COUNT ( 1 ) FROM % s " ) , " count " ) ; <nl> + assertRows ( execute ( " SELECT COUNT ( 1 ) FROM % s " ) , row ( 0L ) ) ; <nl> + assertColumnNames ( execute ( " SELECT COUNT ( * ) , COUNT ( * ) FROM % s " ) , " count " , " count " ) ; <nl> + assertRows ( execute ( " SELECT COUNT ( * ) , COUNT ( * ) FROM % s " ) , row ( 0L , 0L ) ) ; <nl> + <nl> + / / Test with alias <nl> + assertColumnNames ( execute ( " SELECT COUNT ( * ) as myCount FROM % s " ) , " mycount " ) ; <nl> + assertRows ( execute ( " SELECT COUNT ( * ) as myCount FROM % s " ) , row ( 0L ) ) ; <nl> + assertColumnNames ( execute ( " SELECT COUNT ( 1 ) as myCount FROM % s " ) , " mycount " ) ; <nl> + assertRows ( execute ( " SELECT COUNT ( 1 ) as myCount FROM % s " ) , row ( 0L ) ) ; <nl> + <nl> + / / Test invalid call <nl> + assertInvalidSyntaxMessage ( " Only COUNT ( 1 ) is supported , got COUNT ( 2 ) " , " SELECT COUNT ( 2 ) FROM % s " ) ; <nl> + <nl> + / / Test with other aggregates <nl> + assertColumnNames ( execute ( " SELECT COUNT ( * ) , max ( b ) , b FROM % s " ) , " count " , " system . max ( b ) " , " b " ) ; <nl> + assertRows ( execute ( " SELECT COUNT ( * ) , max ( b ) , b FROM % s " ) , row ( 0L , null , null ) ) ; <nl> + assertColumnNames ( execute ( " SELECT COUNT ( 1 ) , max ( b ) , b FROM % s " ) , " count " , " system . max ( b ) " , " b " ) ; <nl> + assertRows ( execute ( " SELECT COUNT ( 1 ) , max ( b ) , b FROM % s " ) , row ( 0L , null , null ) ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 1 , 11 . 5 ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 2 , 9 . 5 ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 3 , 9 . 0 ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 5 , 1 . 0 ) " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT COUNT ( * ) FROM % s " ) , row ( 4L ) ) ; <nl> + assertRows ( execute ( " SELECT COUNT ( 1 ) FROM % s " ) , row ( 4L ) ) ; <nl> + assertRows ( execute ( " SELECT max ( b ) , b , COUNT ( * ) FROM % s " ) , row ( 5 , 1 , 4L ) ) ; <nl> + assertRows ( execute ( " SELECT max ( b ) , COUNT ( 1 ) , b FROM % s " ) , row ( 5 , 4L , 1 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testAggregateWithColumns ( ) throws Throwable <nl> { <nl> createTable ( " CREATE TABLE % s ( a int , b int , c int , primary key ( a , b ) ) " ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 9a0569f . . a655645 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 27 , 6 + 27 , 7 @ @ <nl> * ( cql3 ) Add ReversedType support ( CASSANDRA - 4004 ) <nl> * ( cql3 ) Add timeuuid type ( CASSANDRA - 4194 ) <nl> * ( cql3 ) Minor fixes ( CASSANDRA - 4185 ) <nl> + * ( cql3 ) Fix prepared statement in BATCH ( CASSANDRA - 4202 ) <nl> Merged from 1 . 0 : <nl> * Fix super columns bug where cache is not updated ( CASSANDRA - 4190 ) <nl> * fix maxTimestamp to include row tombstones ( CASSANDRA - 4116 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> index 8fc5f07 . . 0f06a66 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> @ @ - 147 , 16 + 147 , 20 @ @ public class BatchStatement extends ModificationStatement <nl> return batch ; <nl> } <nl> <nl> - public ParsedStatement . Prepared prepare ( ) throws InvalidRequestException <nl> + public ParsedStatement . Prepared prepare ( AbstractType [ ] boundTypes ) throws InvalidRequestException <nl> { <nl> - List < AbstractType < ? > > boundTypes = new ArrayList < AbstractType < ? > > ( statements . size ( ) ) ; <nl> - / / XXX : we use our knowledge that Modification don ' t create new <nl> - / / statement upon call to prepare ( ) <nl> + / / XXX : we use our knowledge that Modification don ' t create new statement upon call to prepare ( ) <nl> for ( ModificationStatement statement : statements ) <nl> { <nl> - boundTypes . addAll ( statement . prepare ( ) . boundTypes ) ; <nl> + statement . prepare ( boundTypes ) ; <nl> } <nl> - return new ParsedStatement . Prepared ( this , boundTypes ) ; <nl> + return new ParsedStatement . Prepared ( this , Arrays . < AbstractType < ? > > asList ( boundTypes ) ) ; <nl> + } <nl> + <nl> + public ParsedStatement . Prepared prepare ( ) throws InvalidRequestException <nl> + { <nl> + AbstractType [ ] boundTypes = new AbstractType [ getBoundsTerms ( ) ] ; <nl> + return prepare ( boundTypes ) ; <nl> } <nl> <nl> public String toString ( ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java <nl> index b82e066 . . f9f6c4f 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java <nl> @ @ - 145 , 13 + 145 , 18 @ @ public class DeleteStatement extends ModificationStatement <nl> return rm ; <nl> } <nl> <nl> - public ParsedStatement . Prepared prepare ( ) throws InvalidRequestException <nl> + public ParsedStatement . Prepared prepare ( AbstractType [ ] boundTypes ) throws InvalidRequestException <nl> { <nl> CFMetaData metadata = ThriftValidation . validateColumnFamily ( keyspace ( ) , columnFamily ( ) ) ; <nl> cfDef = metadata . getCfDef ( ) ; <nl> - AbstractType [ ] types = new AbstractType [ getBoundsTerms ( ) ] ; <nl> - UpdateStatement . processKeys ( cfDef , whereClause , processedKeys , types ) ; <nl> - return new ParsedStatement . Prepared ( this , Arrays . < AbstractType < ? > > asList ( types ) ) ; <nl> + UpdateStatement . processKeys ( cfDef , whereClause , processedKeys , boundTypes ) ; <nl> + return new ParsedStatement . Prepared ( this , Arrays . < AbstractType < ? > > asList ( boundTypes ) ) ; <nl> + } <nl> + <nl> + public ParsedStatement . Prepared prepare ( ) throws InvalidRequestException <nl> + { <nl> + AbstractType [ ] boundTypes = new AbstractType [ getBoundsTerms ( ) ] ; <nl> + return prepare ( boundTypes ) ; <nl> } <nl> <nl> public String toString ( ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> index 8841570 . . e5a9ffd 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . util . concurrent . TimeoutException ; <nl> import org . apache . cassandra . auth . Permission ; <nl> import org . apache . cassandra . cql3 . * ; <nl> import org . apache . cassandra . db . IMutation ; <nl> + import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . service . ClientState ; <nl> import org . apache . cassandra . service . StorageProxy ; <nl> import org . apache . cassandra . thrift . ConsistencyLevel ; <nl> @ @ - 125 , 4 + 126 , 6 @ @ public abstract class ModificationStatement extends CFStatement implements CQLSt <nl> * @ throws InvalidRequestException on invalid requests <nl> * / <nl> public abstract List < IMutation > getMutations ( ClientState clientState , List < ByteBuffer > variables ) throws InvalidRequestException ; <nl> + <nl> + public abstract ParsedStatement . Prepared prepare ( AbstractType [ ] boundTypes ) throws InvalidRequestException ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java <nl> index 186ee80 . . e05a823 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java <nl> @ @ - 234 , 10 + 234 , 9 @ @ public class UpdateStatement extends ModificationStatement <nl> } <nl> } <nl> <nl> - public ParsedStatement . Prepared prepare ( ) throws InvalidRequestException <nl> + public ParsedStatement . Prepared prepare ( AbstractType [ ] boundTypes ) throws InvalidRequestException <nl> { <nl> boolean hasCommutativeOperation = false ; <nl> - AbstractType [ ] types = new AbstractType [ getBoundsTerms ( ) ] ; <nl> <nl> if ( columns ! = null ) <nl> { <nl> @ @ - 275 , 7 + 274 , 7 @ @ public class UpdateStatement extends ModificationStatement <nl> <nl> Term value = columnValues . get ( i ) ; <nl> if ( value . isBindMarker ( ) ) <nl> - types [ value . bindIndex ] = name . type ; <nl> + boundTypes [ value . bindIndex ] = name . type ; <nl> <nl> switch ( name . kind ) <nl> { <nl> @ @ - 314 , 15 + 313 , 21 @ @ public class UpdateStatement extends ModificationStatement <nl> throw new InvalidRequestException ( String . format ( " Multiple definition found for column % s " , name ) ) ; <nl> Operation op = entry . getValue ( ) ; <nl> if ( op . value . isBindMarker ( ) ) <nl> - types [ op . value . bindIndex ] = name . type ; <nl> + boundTypes [ op . value . bindIndex ] = name . type ; <nl> processedColumns . put ( name . name , op ) ; <nl> break ; <nl> } <nl> } <nl> - processKeys ( cfDef , whereClause , processedKeys , types ) ; <nl> + processKeys ( cfDef , whereClause , processedKeys , boundTypes ) ; <nl> } <nl> <nl> - return new ParsedStatement . Prepared ( this , Arrays . < AbstractType < ? > > asList ( types ) ) ; <nl> + return new ParsedStatement . Prepared ( this , Arrays . < AbstractType < ? > > asList ( boundTypes ) ) ; <nl> + } <nl> + <nl> + public ParsedStatement . Prepared prepare ( ) throws InvalidRequestException <nl> + { <nl> + AbstractType [ ] types = new AbstractType [ getBoundsTerms ( ) ] ; <nl> + return prepare ( types ) ; <nl> } <nl> <nl> / / Reused by DeleteStatement

TEST DIFF:
diff - - git a / NEWS . txt b / NEWS . txt 
 index 37a1b9e . . a9cf70d 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 100 , 6 + 100 , 7 @ @ New features 
 - The toTimestamp ( date ) and toUnixTimestamp ( date ) functions have been added to allow 
 to convert from date into timestamp type and bigint raw value . 
 - SizeTieredCompactionStrategy parameter cold _ reads _ to _ omit has been removed . 
 + - COUNT ( * ) and COUNT ( 1 ) can be selected with other columns or functions 
 
 
 2 . 1 . 9 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g 
 index 0db09b8 . . 3d2aba5 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Cql . g 
 + + + b / src / java / org / apache / cassandra / cql3 / Cql . g 
 @ @ - 295 , 8 + 295 , 7 @ @ selectStatement returns [ SelectStatement . RawStatement expr ] 
 } 
 : K _ SELECT 
 ( K _ JSON { isJson = true ; } ) ? 
 - ( ( K _ DISTINCT { isDistinct = true ; } ) ? sclause = selectClause 
 - | sclause = selectCountClause ) 
 + ( ( K _ DISTINCT { isDistinct = true ; } ) ? sclause = selectClause ) 
 K _ FROM cf = columnFamilyName 
 ( K _ WHERE wclause = whereClause ) ? 
 ( K _ ORDER K _ BY orderByClause [ orderings ] ( ' , ' orderByClause [ orderings ] ) * ) ? 
 @ @ - 324 , 6 + 323 , 7 @ @ selector returns [ RawSelector s ] 
 unaliasedSelector returns [ Selectable . Raw s ] 
 @ init { Selectable . Raw tmp = null ; } 
 : ( c = cident { tmp = c ; } 
 + | K _ COUNT ' ( ' countArgument ' ) ' { tmp = new Selectable . WithFunction . Raw ( FunctionName . nativeFunction ( " countRows " ) , Collections . < Selectable . Raw > emptyList ( ) ) ; } 
 | K _ WRITETIME ' ( ' c = cident ' ) ' { tmp = new Selectable . WritetimeOrTTL . Raw ( c , true ) ; } 
 | K _ TTL ' ( ' c = cident ' ) ' { tmp = new Selectable . WritetimeOrTTL . Raw ( c , false ) ; } 
 | f = functionName args = selectionFunctionArgs { tmp = new Selectable . WithFunction . Raw ( f , args ) ; } 
 @ @ - 337 , 11 + 337 , 6 @ @ selectionFunctionArgs returns [ List < Selectable . Raw > a ] 
 ' ) ' { $ a = args ; } 
 ; 
 
 - selectCountClause returns [ List < RawSelector > expr ] 
 - @ init { ColumnIdentifier alias = new ColumnIdentifier ( " count " , false ) ; } 
 - : K _ COUNT ' ( ' countArgument ' ) ' ( K _ AS c = ident { alias = c ; } ) ? { $ expr = new ArrayList < RawSelector > ( ) ; $ expr . add ( new RawSelector ( new Selectable . WithFunction . Raw ( FunctionName . nativeFunction ( " countRows " ) , Collections . < Selectable . Raw > emptyList ( ) ) , alias ) ) ; } 
 - ; 
 - 
 countArgument 
 : ' \ * ' 
 | i = INTEGER { if ( ! i . getText ( ) . equals ( " 1 " ) ) addRecognitionError ( " Only COUNT ( 1 ) is supported , got COUNT ( " + i . getText ( ) + " ) " ) ; } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java b / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java 
 index 1b22da6 . . 41e43c0 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java 
 @ @ - 38 , 6 + 38 , 17 @ @ import org . apache . cassandra . db . marshal . ShortType ; 
 public abstract class AggregateFcts 
 { 
 / * * 
 + * Checks if the specified function is the count rows ( e . g . COUNT ( * ) or COUNT ( 1 ) ) function . 
 + * 
 + * @ param function the function to check 
 + * @ return < code > true < / code > if the specified function is the count rows one , < code > false < / code > otherwise . 
 + * / 
 + public static boolean isCountRows ( Function function ) 
 + { 
 + return function = = countRowsFunction ; 
 + } 
 + 
 + / * * 
 * The function used to count the number of rows of a result set . This function is called when COUNT ( * ) or COUNT ( 1 ) 
 * is specified . 
 * / 
 diff - - git a / src / java / org / apache / cassandra / cql3 / selection / AbstractFunctionSelector . java b / src / java / org / apache / cassandra / cql3 / selection / AbstractFunctionSelector . java 
 index abf52e1 . . bf1234f 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / selection / AbstractFunctionSelector . java 
 + + + b / src / java / org / apache / cassandra / cql3 / selection / AbstractFunctionSelector . java 
 @ @ - 22 , 8 + 22 , 11 @ @ import java . util . Arrays ; 
 import java . util . List ; 
 
 import com . google . common . collect . Iterables ; 
 + 
 import org . apache . commons . lang3 . text . StrBuilder ; 
 
 + import org . apache . cassandra . cql3 . functions . AggregateFcts ; 
 + 
 import org . apache . cassandra . config . ColumnDefinition ; 
 import org . apache . cassandra . cql3 . ColumnSpecification ; 
 import org . apache . cassandra . cql3 . functions . Function ; 
 @ @ - 53 , 6 + 56 , 9 @ @ abstract class AbstractFunctionSelector < T extends Function > extends Selector 
 { 
 protected String getColumnName ( ) 
 { 
 + if ( AggregateFcts . isCountRows ( fun ) ) 
 + return " count " ; 
 + 
 return new StrBuilder ( fun . name ( ) . toString ( ) ) . append ( ' ( ' ) 
 . appendWithSeparators ( factories . getColumnNames ( ) , " , " ) 
 . append ( ' ) ' ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / selection / Selector . java b / src / java / org / apache / cassandra / cql3 / selection / Selector . java 
 index 9b7f0ba . . d53fba1 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / selection / Selector . java 
 + + + b / src / java / org / apache / cassandra / cql3 / selection / Selector . java 
 @ @ - 21 , 7 + 21 , 6 @ @ import java . nio . ByteBuffer ; 
 import java . util . Collections ; 
 
 import org . apache . cassandra . config . CFMetaData ; 
 - import org . apache . cassandra . config . ColumnDefinition ; 
 import org . apache . cassandra . cql3 . AssignmentTestable ; 
 import org . apache . cassandra . cql3 . ColumnIdentifier ; 
 import org . apache . cassandra . cql3 . ColumnSpecification ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 index 9881d73 . . b44fc71 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 @ @ - 93 , 6 + 93 , 45 @ @ public class AggregationTest extends CQLTester 
 } 
 
 @ Test 
 + public void testCountStarFunction ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a int , b int , c double , primary key ( a , b ) ) " ) ; 
 + 
 + / / Test with empty table 
 + assertColumnNames ( execute ( " SELECT COUNT ( * ) FROM % s " ) , " count " ) ; 
 + assertRows ( execute ( " SELECT COUNT ( * ) FROM % s " ) , row ( 0L ) ) ; 
 + assertColumnNames ( execute ( " SELECT COUNT ( 1 ) FROM % s " ) , " count " ) ; 
 + assertRows ( execute ( " SELECT COUNT ( 1 ) FROM % s " ) , row ( 0L ) ) ; 
 + assertColumnNames ( execute ( " SELECT COUNT ( * ) , COUNT ( * ) FROM % s " ) , " count " , " count " ) ; 
 + assertRows ( execute ( " SELECT COUNT ( * ) , COUNT ( * ) FROM % s " ) , row ( 0L , 0L ) ) ; 
 + 
 + / / Test with alias 
 + assertColumnNames ( execute ( " SELECT COUNT ( * ) as myCount FROM % s " ) , " mycount " ) ; 
 + assertRows ( execute ( " SELECT COUNT ( * ) as myCount FROM % s " ) , row ( 0L ) ) ; 
 + assertColumnNames ( execute ( " SELECT COUNT ( 1 ) as myCount FROM % s " ) , " mycount " ) ; 
 + assertRows ( execute ( " SELECT COUNT ( 1 ) as myCount FROM % s " ) , row ( 0L ) ) ; 
 + 
 + / / Test invalid call 
 + assertInvalidSyntaxMessage ( " Only COUNT ( 1 ) is supported , got COUNT ( 2 ) " , " SELECT COUNT ( 2 ) FROM % s " ) ; 
 + 
 + / / Test with other aggregates 
 + assertColumnNames ( execute ( " SELECT COUNT ( * ) , max ( b ) , b FROM % s " ) , " count " , " system . max ( b ) " , " b " ) ; 
 + assertRows ( execute ( " SELECT COUNT ( * ) , max ( b ) , b FROM % s " ) , row ( 0L , null , null ) ) ; 
 + assertColumnNames ( execute ( " SELECT COUNT ( 1 ) , max ( b ) , b FROM % s " ) , " count " , " system . max ( b ) " , " b " ) ; 
 + assertRows ( execute ( " SELECT COUNT ( 1 ) , max ( b ) , b FROM % s " ) , row ( 0L , null , null ) ) ; 
 + 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 1 , 11 . 5 ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 2 , 9 . 5 ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 3 , 9 . 0 ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 5 , 1 . 0 ) " ) ; 
 + 
 + assertRows ( execute ( " SELECT COUNT ( * ) FROM % s " ) , row ( 4L ) ) ; 
 + assertRows ( execute ( " SELECT COUNT ( 1 ) FROM % s " ) , row ( 4L ) ) ; 
 + assertRows ( execute ( " SELECT max ( b ) , b , COUNT ( * ) FROM % s " ) , row ( 5 , 1 , 4L ) ) ; 
 + assertRows ( execute ( " SELECT max ( b ) , COUNT ( 1 ) , b FROM % s " ) , row ( 5 , 4L , 1 ) ) ; 
 + } 
 + 
 + @ Test 
 public void testAggregateWithColumns ( ) throws Throwable 
 { 
 createTable ( " CREATE TABLE % s ( a int , b int , c int , primary key ( a , b ) ) " ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 9a0569f . . a655645 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 27 , 6 + 27 , 7 @ @ 
 * ( cql3 ) Add ReversedType support ( CASSANDRA - 4004 ) 
 * ( cql3 ) Add timeuuid type ( CASSANDRA - 4194 ) 
 * ( cql3 ) Minor fixes ( CASSANDRA - 4185 ) 
 + * ( cql3 ) Fix prepared statement in BATCH ( CASSANDRA - 4202 ) 
 Merged from 1 . 0 : 
 * Fix super columns bug where cache is not updated ( CASSANDRA - 4190 ) 
 * fix maxTimestamp to include row tombstones ( CASSANDRA - 4116 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 index 8fc5f07 . . 0f06a66 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 @ @ - 147 , 16 + 147 , 20 @ @ public class BatchStatement extends ModificationStatement 
 return batch ; 
 } 
 
 - public ParsedStatement . Prepared prepare ( ) throws InvalidRequestException 
 + public ParsedStatement . Prepared prepare ( AbstractType [ ] boundTypes ) throws InvalidRequestException 
 { 
 - List < AbstractType < ? > > boundTypes = new ArrayList < AbstractType < ? > > ( statements . size ( ) ) ; 
 - / / XXX : we use our knowledge that Modification don ' t create new 
 - / / statement upon call to prepare ( ) 
 + / / XXX : we use our knowledge that Modification don ' t create new statement upon call to prepare ( ) 
 for ( ModificationStatement statement : statements ) 
 { 
 - boundTypes . addAll ( statement . prepare ( ) . boundTypes ) ; 
 + statement . prepare ( boundTypes ) ; 
 } 
 - return new ParsedStatement . Prepared ( this , boundTypes ) ; 
 + return new ParsedStatement . Prepared ( this , Arrays . < AbstractType < ? > > asList ( boundTypes ) ) ; 
 + } 
 + 
 + public ParsedStatement . Prepared prepare ( ) throws InvalidRequestException 
 + { 
 + AbstractType [ ] boundTypes = new AbstractType [ getBoundsTerms ( ) ] ; 
 + return prepare ( boundTypes ) ; 
 } 
 
 public String toString ( ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java 
 index b82e066 . . f9f6c4f 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java 
 @ @ - 145 , 13 + 145 , 18 @ @ public class DeleteStatement extends ModificationStatement 
 return rm ; 
 } 
 
 - public ParsedStatement . Prepared prepare ( ) throws InvalidRequestException 
 + public ParsedStatement . Prepared prepare ( AbstractType [ ] boundTypes ) throws InvalidRequestException 
 { 
 CFMetaData metadata = ThriftValidation . validateColumnFamily ( keyspace ( ) , columnFamily ( ) ) ; 
 cfDef = metadata . getCfDef ( ) ; 
 - AbstractType [ ] types = new AbstractType [ getBoundsTerms ( ) ] ; 
 - UpdateStatement . processKeys ( cfDef , whereClause , processedKeys , types ) ; 
 - return new ParsedStatement . Prepared ( this , Arrays . < AbstractType < ? > > asList ( types ) ) ; 
 + UpdateStatement . processKeys ( cfDef , whereClause , processedKeys , boundTypes ) ; 
 + return new ParsedStatement . Prepared ( this , Arrays . < AbstractType < ? > > asList ( boundTypes ) ) ; 
 + } 
 + 
 + public ParsedStatement . Prepared prepare ( ) throws InvalidRequestException 
 + { 
 + AbstractType [ ] boundTypes = new AbstractType [ getBoundsTerms ( ) ] ; 
 + return prepare ( boundTypes ) ; 
 } 
 
 public String toString ( ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 index 8841570 . . e5a9ffd 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . util . concurrent . TimeoutException ; 
 import org . apache . cassandra . auth . Permission ; 
 import org . apache . cassandra . cql3 . * ; 
 import org . apache . cassandra . db . IMutation ; 
 + import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . service . ClientState ; 
 import org . apache . cassandra . service . StorageProxy ; 
 import org . apache . cassandra . thrift . ConsistencyLevel ; 
 @ @ - 125 , 4 + 126 , 6 @ @ public abstract class ModificationStatement extends CFStatement implements CQLSt 
 * @ throws InvalidRequestException on invalid requests 
 * / 
 public abstract List < IMutation > getMutations ( ClientState clientState , List < ByteBuffer > variables ) throws InvalidRequestException ; 
 + 
 + public abstract ParsedStatement . Prepared prepare ( AbstractType [ ] boundTypes ) throws InvalidRequestException ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java 
 index 186ee80 . . e05a823 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java 
 @ @ - 234 , 10 + 234 , 9 @ @ public class UpdateStatement extends ModificationStatement 
 } 
 } 
 
 - public ParsedStatement . Prepared prepare ( ) throws InvalidRequestException 
 + public ParsedStatement . Prepared prepare ( AbstractType [ ] boundTypes ) throws InvalidRequestException 
 { 
 boolean hasCommutativeOperation = false ; 
 - AbstractType [ ] types = new AbstractType [ getBoundsTerms ( ) ] ; 
 
 if ( columns ! = null ) 
 { 
 @ @ - 275 , 7 + 274 , 7 @ @ public class UpdateStatement extends ModificationStatement 
 
 Term value = columnValues . get ( i ) ; 
 if ( value . isBindMarker ( ) ) 
 - types [ value . bindIndex ] = name . type ; 
 + boundTypes [ value . bindIndex ] = name . type ; 
 
 switch ( name . kind ) 
 { 
 @ @ - 314 , 15 + 313 , 21 @ @ public class UpdateStatement extends ModificationStatement 
 throw new InvalidRequestException ( String . format ( " Multiple definition found for column % s " , name ) ) ; 
 Operation op = entry . getValue ( ) ; 
 if ( op . value . isBindMarker ( ) ) 
 - types [ op . value . bindIndex ] = name . type ; 
 + boundTypes [ op . value . bindIndex ] = name . type ; 
 processedColumns . put ( name . name , op ) ; 
 break ; 
 } 
 } 
 - processKeys ( cfDef , whereClause , processedKeys , types ) ; 
 + processKeys ( cfDef , whereClause , processedKeys , boundTypes ) ; 
 } 
 
 - return new ParsedStatement . Prepared ( this , Arrays . < AbstractType < ? > > asList ( types ) ) ; 
 + return new ParsedStatement . Prepared ( this , Arrays . < AbstractType < ? > > asList ( boundTypes ) ) ; 
 + } 
 + 
 + public ParsedStatement . Prepared prepare ( ) throws InvalidRequestException 
 + { 
 + AbstractType [ ] types = new AbstractType [ getBoundsTerms ( ) ] ; 
 + return prepare ( types ) ; 
 } 
 
 / / Reused by DeleteStatement
