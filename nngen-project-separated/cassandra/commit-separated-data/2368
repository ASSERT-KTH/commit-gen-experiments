BLEU SCORE: 0.05954672553679791

TEST MSG: revert # 7275
GENERATED MSG: Add more hooks for compaction strategy implementations

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 186b4a1 . . d84f267 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 2 , 7 + 2 , 6 @ @ <nl> * Handle possible integer overflow in FastByteArrayOutputStream ( CASSANDRA - 7373 ) <nl> * cqlsh : ' ascii ' values weren ' t formatted as text ( CASSANDRA - 7407 ) <nl> * cqlsh : ignore . cassandra permission errors ( CASSANDRA - 7266 ) <nl> - * Errors in FlushRunnable may leave threads hung ( CASSANDRA - 7275 ) <nl> * reduce failure detector initial value to 2s ( CASSANDRA - 7307 ) <nl> * Fix problem truncating on a node that was previously in a dead state ( CASSANDRA - 7318 ) <nl> * Don ' t insert tombstones that hide indexed values into 2i ( CASSANDRA - 7268 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java <nl> index 90f0466 . . b6fceda 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Memtable . java <nl> + + + b / src / java / org / apache / cassandra / db / Memtable . java <nl> @ @ - 380 , 17 + 380 , 11 @ @ public class Memtable <nl> <nl> protected void runWith ( File sstableDirectory ) throws Exception <nl> { <nl> - try <nl> - { <nl> - assert sstableDirectory ! = null : " Flush task is not bound to any disk " ; <nl> + assert sstableDirectory ! = null : " Flush task is not bound to any disk " ; <nl> <nl> - SSTableReader sstable = writeSortedContents ( context , sstableDirectory ) ; <nl> - cfs . replaceFlushed ( Memtable . this , sstable ) ; <nl> - } <nl> - finally <nl> - { <nl> - latch . countDown ( ) ; <nl> - } <nl> + SSTableReader sstable = writeSortedContents ( context , sstableDirectory ) ; <nl> + cfs . replaceFlushed ( Memtable . this , sstable ) ; <nl> + latch . countDown ( ) ; <nl> } <nl> <nl> protected Directories getDirectories ( )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 061ad12 . . dcdb01b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 10 , 6 + 10 , 7 @ @ <nl> leveled manifest ( CASSANDRA - 6093 ) <nl> * make sequential nodetool repair the default ( CASSANDRA - 5950 ) <nl> * Add more hooks for compaction strategy implementations ( CASSANDRA - 6111 ) <nl> + * Fix memtable flushing for indexed tables ( CASSANDRA - 6112 ) <nl> Merged from 1 . 2 : <nl> * Allow estimated memtable size to exceed slab allocator size ( CASSANDRA - 6078 ) <nl> * Start MeteredFlusher earlier to prevent OOM during CL replay ( CASSANDRA - 6087 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java <nl> index 14ce74c . . f1bb1a5 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Memtable . java <nl> + + + b / src / java / org / apache / cassandra / db / Memtable . java <nl> @ @ - 351 , 7 + 351 , 11 @ @ public class Memtable <nl> / / But it can result in unexpected behaviour where deletes never make it to disk , <nl> / / as they are lost and so cannot override existing column values . So we only remove deleted columns if there <nl> / / is a CF level tombstone to ensure the delete makes it into an SSTable . <nl> - ColumnFamilyStore . removeDeletedColumnsOnly ( cf , Integer . MIN _ VALUE ) ; <nl> + / / We also shouldn ' t be dropping any columns obsoleted by partition and / or range tombstones in case <nl> + / / the table has secondary indexes , or else the stale entries wouldn ' t be cleaned up during compaction , <nl> + / / and will only be dropped during 2i query read - repair , if at all . <nl> + if ( ! cfs . indexManager . hasIndexes ( ) ) <nl> + ColumnFamilyStore . removeDeletedColumnsOnly ( cf , Integer . MIN _ VALUE ) ; <nl> } <nl> writer . append ( ( DecoratedKey ) entry . getKey ( ) , cf ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index f3c2011 . . 317014f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 525 , 7 + 525 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return ; <nl> } <nl> <nl> - boolean hasIndexes = ! cfs . indexManager . getIndexes ( ) . isEmpty ( ) ; <nl> + boolean hasIndexes = cfs . indexManager . hasIndexes ( ) ; <nl> CleanupStrategy cleanupStrategy = CleanupStrategy . get ( cfs , ranges , renewer ) ; <nl> <nl> for ( SSTableReader sstable : sstables ) <nl> @ @ - 623 , 7 + 623 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> public static CleanupStrategy get ( ColumnFamilyStore cfs , Collection < Range < Token > > ranges , CounterId . OneShotRenewer renewer ) <nl> { <nl> - if ( ! cfs . indexManager . getIndexes ( ) . isEmpty ( ) | | cfs . metadata . getDefaultValidator ( ) . isCommutative ( ) ) <nl> + if ( cfs . indexManager . hasIndexes ( ) | | cfs . metadata . getDefaultValidator ( ) . isCommutative ( ) ) <nl> return new Full ( cfs , ranges , renewer ) ; <nl> <nl> return new Bounded ( cfs , ranges ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> index eff9537 . . 1838c03 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> @ @ - 377 , 6 + 377 , 14 @ @ public class SecondaryIndexManager <nl> } <nl> <nl> / * * <nl> + * @ return if there are ANY indexes for this table . . <nl> + * / <nl> + public boolean hasIndexes ( ) <nl> + { <nl> + return ! indexesByColumn . isEmpty ( ) ; <nl> + } <nl> + <nl> + / * * <nl> * @ return total current ram size of all indexes <nl> * / <nl> public long getTotalLiveSize ( )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 186b4a1 . . d84f267 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 2 , 7 + 2 , 6 @ @ 
 * Handle possible integer overflow in FastByteArrayOutputStream ( CASSANDRA - 7373 ) 
 * cqlsh : ' ascii ' values weren ' t formatted as text ( CASSANDRA - 7407 ) 
 * cqlsh : ignore . cassandra permission errors ( CASSANDRA - 7266 ) 
 - * Errors in FlushRunnable may leave threads hung ( CASSANDRA - 7275 ) 
 * reduce failure detector initial value to 2s ( CASSANDRA - 7307 ) 
 * Fix problem truncating on a node that was previously in a dead state ( CASSANDRA - 7318 ) 
 * Don ' t insert tombstones that hide indexed values into 2i ( CASSANDRA - 7268 ) 
 diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java 
 index 90f0466 . . b6fceda 100644 
 - - - a / src / java / org / apache / cassandra / db / Memtable . java 
 + + + b / src / java / org / apache / cassandra / db / Memtable . java 
 @ @ - 380 , 17 + 380 , 11 @ @ public class Memtable 
 
 protected void runWith ( File sstableDirectory ) throws Exception 
 { 
 - try 
 - { 
 - assert sstableDirectory ! = null : " Flush task is not bound to any disk " ; 
 + assert sstableDirectory ! = null : " Flush task is not bound to any disk " ; 
 
 - SSTableReader sstable = writeSortedContents ( context , sstableDirectory ) ; 
 - cfs . replaceFlushed ( Memtable . this , sstable ) ; 
 - } 
 - finally 
 - { 
 - latch . countDown ( ) ; 
 - } 
 + SSTableReader sstable = writeSortedContents ( context , sstableDirectory ) ; 
 + cfs . replaceFlushed ( Memtable . this , sstable ) ; 
 + latch . countDown ( ) ; 
 } 
 
 protected Directories getDirectories ( )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 061ad12 . . dcdb01b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 10 , 6 + 10 , 7 @ @ 
 leveled manifest ( CASSANDRA - 6093 ) 
 * make sequential nodetool repair the default ( CASSANDRA - 5950 ) 
 * Add more hooks for compaction strategy implementations ( CASSANDRA - 6111 ) 
 + * Fix memtable flushing for indexed tables ( CASSANDRA - 6112 ) 
 Merged from 1 . 2 : 
 * Allow estimated memtable size to exceed slab allocator size ( CASSANDRA - 6078 ) 
 * Start MeteredFlusher earlier to prevent OOM during CL replay ( CASSANDRA - 6087 ) 
 diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java 
 index 14ce74c . . f1bb1a5 100644 
 - - - a / src / java / org / apache / cassandra / db / Memtable . java 
 + + + b / src / java / org / apache / cassandra / db / Memtable . java 
 @ @ - 351 , 7 + 351 , 11 @ @ public class Memtable 
 / / But it can result in unexpected behaviour where deletes never make it to disk , 
 / / as they are lost and so cannot override existing column values . So we only remove deleted columns if there 
 / / is a CF level tombstone to ensure the delete makes it into an SSTable . 
 - ColumnFamilyStore . removeDeletedColumnsOnly ( cf , Integer . MIN _ VALUE ) ; 
 + / / We also shouldn ' t be dropping any columns obsoleted by partition and / or range tombstones in case 
 + / / the table has secondary indexes , or else the stale entries wouldn ' t be cleaned up during compaction , 
 + / / and will only be dropped during 2i query read - repair , if at all . 
 + if ( ! cfs . indexManager . hasIndexes ( ) ) 
 + ColumnFamilyStore . removeDeletedColumnsOnly ( cf , Integer . MIN _ VALUE ) ; 
 } 
 writer . append ( ( DecoratedKey ) entry . getKey ( ) , cf ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index f3c2011 . . 317014f 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 525 , 7 + 525 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 return ; 
 } 
 
 - boolean hasIndexes = ! cfs . indexManager . getIndexes ( ) . isEmpty ( ) ; 
 + boolean hasIndexes = cfs . indexManager . hasIndexes ( ) ; 
 CleanupStrategy cleanupStrategy = CleanupStrategy . get ( cfs , ranges , renewer ) ; 
 
 for ( SSTableReader sstable : sstables ) 
 @ @ - 623 , 7 + 623 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 public static CleanupStrategy get ( ColumnFamilyStore cfs , Collection < Range < Token > > ranges , CounterId . OneShotRenewer renewer ) 
 { 
 - if ( ! cfs . indexManager . getIndexes ( ) . isEmpty ( ) | | cfs . metadata . getDefaultValidator ( ) . isCommutative ( ) ) 
 + if ( cfs . indexManager . hasIndexes ( ) | | cfs . metadata . getDefaultValidator ( ) . isCommutative ( ) ) 
 return new Full ( cfs , ranges , renewer ) ; 
 
 return new Bounded ( cfs , ranges ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 index eff9537 . . 1838c03 100644 
 - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 @ @ - 377 , 6 + 377 , 14 @ @ public class SecondaryIndexManager 
 } 
 
 / * * 
 + * @ return if there are ANY indexes for this table . . 
 + * / 
 + public boolean hasIndexes ( ) 
 + { 
 + return ! indexesByColumn . isEmpty ( ) ; 
 + } 
 + 
 + / * * 
 * @ return total current ram size of all indexes 
 * / 
 public long getTotalLiveSize ( )
