BLEU SCORE: 0.008058772966335387

TEST MSG: remove dead parm
GENERATED MSG: Revert " Ninja - return duplicate set values and map keys validation "

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cql3 / ColumnCondition . java b / src / java / org / apache / cassandra / cql3 / ColumnCondition . java <nl> index 21c1f79 . . dfe2415 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / ColumnCondition . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / ColumnCondition . java <nl> @ @ - 492 , 7 + 492 , 7 @ @ public class ColumnCondition <nl> throw new InvalidRequestException ( String . format ( " Invalid comparison with null for operator \ " % s \ " " , operator ) ) ; <nl> } <nl> <nl> - return valueAppliesTo ( type , iter , value , operator , options ) ; <nl> + return valueAppliesTo ( type , iter , value , operator ) ; <nl> } <nl> <nl> / / frozen collections <nl> @ @ - 519 , 7 + 519 , 7 @ @ public class ColumnCondition <nl> return compareWithOperator ( operator , type , conditionValue , cell . value ( ) ) ; <nl> } <nl> <nl> - static boolean valueAppliesTo ( CollectionType type , Iterator < Cell > iter , Term . Terminal value , Operator operator , QueryOptions options ) <nl> + static boolean valueAppliesTo ( CollectionType type , Iterator < Cell > iter , Term . Terminal value , Operator operator ) <nl> { <nl> if ( value = = null ) <nl> return ! iter . hasNext ( ) ; <nl> @ @ - 691 , 7 + 691 , 7 @ @ public class ColumnCondition <nl> List < Cell > cells = newArrayList ( collectionColumns ( name , current , now ) ) ; <nl> for ( Term . Terminal value : inValues ) <nl> { <nl> - if ( CollectionBound . valueAppliesTo ( type , cells . iterator ( ) , value , Operator . EQ , options ) ) <nl> + if ( CollectionBound . valueAppliesTo ( type , cells . iterator ( ) , value , Operator . EQ ) ) <nl> return true ; <nl> } <nl> return false ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 71a956b . . 858bbf8 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 3 + 1 , 7 @ @ <nl> + 1 . 2 . 8 <nl> + * cqlsh : add collections support to COPY ( CASSANDRA - 5698 ) <nl> + <nl> + <nl> 1 . 2 . 7 <nl> * if no seeds can be a reached a node won ' t start in a ring by itself ( CASSANDRA - 5768 ) <nl> * add cassandra . unsafesystem property ( CASSANDRA - 5704 ) <nl> diff - - git a / bin / cqlsh b / bin / cqlsh <nl> index 643324c . . 48cc492 100755 <nl> - - - a / bin / cqlsh <nl> + + + b / bin / cqlsh <nl> @ @ - 32 , 7 + 32 , 7 @ @ exit 1 <nl> from _ _ future _ _ import with _ statement <nl> <nl> description = " CQL Shell for Apache Cassandra " <nl> - version = " 3 . 1 . 4 " <nl> + version = " 3 . 1 . 5 " <nl> <nl> from StringIO import StringIO <nl> from itertools import groupby <nl> diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py <nl> index 87f692b . . b571033 100644 <nl> - - - a / pylib / cqlshlib / formatting . py <nl> + + + b / pylib / cqlshlib / formatting . py <nl> @ @ - 112 , 8 + 112 , 10 @ @ def format _ value _ blob ( val , colormap , * * _ ) : <nl> bval = ' 0x ' + ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) <nl> return colorme ( bval , colormap , ' blob ' ) <nl> <nl> - def format _ python _ formatted _ type ( val , colormap , color ) : <nl> + def format _ python _ formatted _ type ( val , colormap , color , quote = False ) : <nl> bval = str ( val ) <nl> + if quote : <nl> + bval = " ' % s ' " % bval <nl> return colorme ( bval , colormap , color ) <nl> <nl> @ formatter _ for ( ' decimal ' ) <nl> @ @ - 127 , 8 + 129 , 8 @ @ def format _ value _ uuid ( val , colormap , * * _ ) : <nl> formatter _ for ( ' timeuuid ' ) ( format _ value _ uuid ) <nl> <nl> @ formatter _ for ( ' inet ' ) <nl> - def formatter _ value _ inet ( val , colormap , * * _ ) : <nl> - return format _ python _ formatted _ type ( val , colormap , ' inet ' ) <nl> + def formatter _ value _ inet ( val , colormap , quote = False , * * _ ) : <nl> + return format _ python _ formatted _ type ( val , colormap , ' inet ' , quote = quote ) <nl> <nl> @ formatter _ for ( ' boolean ' ) <nl> def format _ value _ boolean ( val , colormap , * * _ ) : <nl> @ @ - 152 , 8 + 154 , 10 @ @ formatter _ for ( ' varint ' ) ( format _ integer _ type ) <nl> formatter _ for ( ' counter ' ) ( format _ integer _ type ) <nl> <nl> @ formatter _ for ( ' timestamp ' ) <nl> - def format _ value _ timestamp ( val , colormap , time _ format , * * _ ) : <nl> + def format _ value _ timestamp ( val , colormap , time _ format , quote = False , * * _ ) : <nl> bval = strftime ( time _ format , val ) <nl> + if quote : <nl> + bval = " ' % s ' " % bval <nl> return colorme ( bval , colormap , ' timestamp ' ) <nl> <nl> def strftime ( time _ format , seconds ) : <nl> @ @ - 174 , 10 + 178 , 12 @ @ def strftime ( time _ format , seconds ) : <nl> return formatted [ : - 5 ] + sign + ' { 0 : 0 = 2 } { 1 : 0 = 2 } ' . format ( hours , minutes ) <nl> <nl> @ formatter _ for ( ' text ' ) <nl> - def format _ value _ text ( val , encoding , colormap , * * _ ) : <nl> + def format _ value _ text ( val , encoding , colormap , quote = False , * * _ ) : <nl> escapedval = val . replace ( u ' \ \ ' , u ' \ \ \ \ ' ) <nl> escapedval = unicode _ controlchars _ re . sub ( _ show _ control _ chars , escapedval ) <nl> bval = escapedval . encode ( encoding , ' backslashreplace ' ) <nl> + if quote : <nl> + bval = " ' % s ' " % bval <nl> displaywidth = wcwidth . wcswidth ( bval . decode ( encoding ) ) <nl> return color _ text ( bval , colormap , displaywidth ) <nl> <nl> @ @ - 188 , 7 + 194 , 7 @ @ def format _ simple _ collection ( subtype , val , lbracket , rbracket , encoding , <nl> colormap , time _ format , float _ precision , nullval ) : <nl> subs = [ format _ value ( subtype , sval , encoding = encoding , colormap = colormap , <nl> time _ format = time _ format , float _ precision = float _ precision , <nl> - nullval = nullval ) <nl> + nullval = nullval , quote = True ) <nl> for sval in val ] <nl> bval = lbracket + ' , ' . join ( sval . strval for sval in subs ) + rbracket <nl> lb , sep , rb = [ colormap [ ' collection ' ] + s + colormap [ ' reset ' ] <nl> @ @ - 212 , 7 + 218 , 7 @ @ def format _ value _ map ( val , encoding , colormap , time _ format , float _ precision , subt <nl> def subformat ( v , subtype ) : <nl> return format _ value ( subtype , v , encoding = encoding , colormap = colormap , <nl> time _ format = time _ format , float _ precision = float _ precision , <nl> - nullval = nullval ) <nl> + nullval = nullval , quote = True ) <nl> <nl> subkeytype , subvaltype = subtypes <nl> subs = [ ( subformat ( k , subkeytype ) , subformat ( v , subvaltype ) ) for ( k , v ) in sorted ( val . items ( ) ) ]

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / cql3 / ColumnCondition . java b / src / java / org / apache / cassandra / cql3 / ColumnCondition . java 
 index 21c1f79 . . dfe2415 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / ColumnCondition . java 
 + + + b / src / java / org / apache / cassandra / cql3 / ColumnCondition . java 
 @ @ - 492 , 7 + 492 , 7 @ @ public class ColumnCondition 
 throw new InvalidRequestException ( String . format ( " Invalid comparison with null for operator \ " % s \ " " , operator ) ) ; 
 } 
 
 - return valueAppliesTo ( type , iter , value , operator , options ) ; 
 + return valueAppliesTo ( type , iter , value , operator ) ; 
 } 
 
 / / frozen collections 
 @ @ - 519 , 7 + 519 , 7 @ @ public class ColumnCondition 
 return compareWithOperator ( operator , type , conditionValue , cell . value ( ) ) ; 
 } 
 
 - static boolean valueAppliesTo ( CollectionType type , Iterator < Cell > iter , Term . Terminal value , Operator operator , QueryOptions options ) 
 + static boolean valueAppliesTo ( CollectionType type , Iterator < Cell > iter , Term . Terminal value , Operator operator ) 
 { 
 if ( value = = null ) 
 return ! iter . hasNext ( ) ; 
 @ @ - 691 , 7 + 691 , 7 @ @ public class ColumnCondition 
 List < Cell > cells = newArrayList ( collectionColumns ( name , current , now ) ) ; 
 for ( Term . Terminal value : inValues ) 
 { 
 - if ( CollectionBound . valueAppliesTo ( type , cells . iterator ( ) , value , Operator . EQ , options ) ) 
 + if ( CollectionBound . valueAppliesTo ( type , cells . iterator ( ) , value , Operator . EQ ) ) 
 return true ; 
 } 
 return false ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 71a956b . . 858bbf8 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 3 + 1 , 7 @ @ 
 + 1 . 2 . 8 
 + * cqlsh : add collections support to COPY ( CASSANDRA - 5698 ) 
 + 
 + 
 1 . 2 . 7 
 * if no seeds can be a reached a node won ' t start in a ring by itself ( CASSANDRA - 5768 ) 
 * add cassandra . unsafesystem property ( CASSANDRA - 5704 ) 
 diff - - git a / bin / cqlsh b / bin / cqlsh 
 index 643324c . . 48cc492 100755 
 - - - a / bin / cqlsh 
 + + + b / bin / cqlsh 
 @ @ - 32 , 7 + 32 , 7 @ @ exit 1 
 from _ _ future _ _ import with _ statement 
 
 description = " CQL Shell for Apache Cassandra " 
 - version = " 3 . 1 . 4 " 
 + version = " 3 . 1 . 5 " 
 
 from StringIO import StringIO 
 from itertools import groupby 
 diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py 
 index 87f692b . . b571033 100644 
 - - - a / pylib / cqlshlib / formatting . py 
 + + + b / pylib / cqlshlib / formatting . py 
 @ @ - 112 , 8 + 112 , 10 @ @ def format _ value _ blob ( val , colormap , * * _ ) : 
 bval = ' 0x ' + ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) 
 return colorme ( bval , colormap , ' blob ' ) 
 
 - def format _ python _ formatted _ type ( val , colormap , color ) : 
 + def format _ python _ formatted _ type ( val , colormap , color , quote = False ) : 
 bval = str ( val ) 
 + if quote : 
 + bval = " ' % s ' " % bval 
 return colorme ( bval , colormap , color ) 
 
 @ formatter _ for ( ' decimal ' ) 
 @ @ - 127 , 8 + 129 , 8 @ @ def format _ value _ uuid ( val , colormap , * * _ ) : 
 formatter _ for ( ' timeuuid ' ) ( format _ value _ uuid ) 
 
 @ formatter _ for ( ' inet ' ) 
 - def formatter _ value _ inet ( val , colormap , * * _ ) : 
 - return format _ python _ formatted _ type ( val , colormap , ' inet ' ) 
 + def formatter _ value _ inet ( val , colormap , quote = False , * * _ ) : 
 + return format _ python _ formatted _ type ( val , colormap , ' inet ' , quote = quote ) 
 
 @ formatter _ for ( ' boolean ' ) 
 def format _ value _ boolean ( val , colormap , * * _ ) : 
 @ @ - 152 , 8 + 154 , 10 @ @ formatter _ for ( ' varint ' ) ( format _ integer _ type ) 
 formatter _ for ( ' counter ' ) ( format _ integer _ type ) 
 
 @ formatter _ for ( ' timestamp ' ) 
 - def format _ value _ timestamp ( val , colormap , time _ format , * * _ ) : 
 + def format _ value _ timestamp ( val , colormap , time _ format , quote = False , * * _ ) : 
 bval = strftime ( time _ format , val ) 
 + if quote : 
 + bval = " ' % s ' " % bval 
 return colorme ( bval , colormap , ' timestamp ' ) 
 
 def strftime ( time _ format , seconds ) : 
 @ @ - 174 , 10 + 178 , 12 @ @ def strftime ( time _ format , seconds ) : 
 return formatted [ : - 5 ] + sign + ' { 0 : 0 = 2 } { 1 : 0 = 2 } ' . format ( hours , minutes ) 
 
 @ formatter _ for ( ' text ' ) 
 - def format _ value _ text ( val , encoding , colormap , * * _ ) : 
 + def format _ value _ text ( val , encoding , colormap , quote = False , * * _ ) : 
 escapedval = val . replace ( u ' \ \ ' , u ' \ \ \ \ ' ) 
 escapedval = unicode _ controlchars _ re . sub ( _ show _ control _ chars , escapedval ) 
 bval = escapedval . encode ( encoding , ' backslashreplace ' ) 
 + if quote : 
 + bval = " ' % s ' " % bval 
 displaywidth = wcwidth . wcswidth ( bval . decode ( encoding ) ) 
 return color _ text ( bval , colormap , displaywidth ) 
 
 @ @ - 188 , 7 + 194 , 7 @ @ def format _ simple _ collection ( subtype , val , lbracket , rbracket , encoding , 
 colormap , time _ format , float _ precision , nullval ) : 
 subs = [ format _ value ( subtype , sval , encoding = encoding , colormap = colormap , 
 time _ format = time _ format , float _ precision = float _ precision , 
 - nullval = nullval ) 
 + nullval = nullval , quote = True ) 
 for sval in val ] 
 bval = lbracket + ' , ' . join ( sval . strval for sval in subs ) + rbracket 
 lb , sep , rb = [ colormap [ ' collection ' ] + s + colormap [ ' reset ' ] 
 @ @ - 212 , 7 + 218 , 7 @ @ def format _ value _ map ( val , encoding , colormap , time _ format , float _ precision , subt 
 def subformat ( v , subtype ) : 
 return format _ value ( subtype , v , encoding = encoding , colormap = colormap , 
 time _ format = time _ format , float _ precision = float _ precision , 
 - nullval = nullval ) 
 + nullval = nullval , quote = True ) 
 
 subkeytype , subvaltype = subtypes 
 subs = [ ( subformat ( k , subkeytype ) , subformat ( v , subvaltype ) ) for ( k , v ) in sorted ( val . items ( ) ) ]
