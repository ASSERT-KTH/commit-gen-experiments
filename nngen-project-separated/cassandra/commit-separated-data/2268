BLEU SCORE: 0.031247197904994937

TEST MSG: Fix serialization of command ratios in cassandra - stress / stressd
GENERATED MSG: Add logging levels ( minimal , normal or verbose ) to stress tool

TEST DIFF (one line): diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / OptionAnyProbabilities . java b / tools / stress / src / org / apache / cassandra / stress / settings / OptionAnyProbabilities . java <nl> index 4e2ad64 . . b685294 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / settings / OptionAnyProbabilities . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / settings / OptionAnyProbabilities . java <nl> @ @ - 27 , 8 + 27 , 8 @ @ import java . util . Collections ; <nl> import java . util . LinkedHashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> + import java . util . HashMap ; <nl> <nl> - import org . apache . commons . math3 . util . Pair ; <nl> <nl> public final class OptionAnyProbabilities extends OptionMulti <nl> { <nl> @ @ - 88 , 12 + 88 , 9 @ @ public final class OptionAnyProbabilities extends OptionMulti <nl> return Arrays . asList ( ratios ) ; <nl> } <nl> <nl> - List < Pair < String , Double > > ratios ( ) <nl> + Map < String , Double > ratios ( ) <nl> { <nl> - List < Pair < String , Double > > ratiosOut = new ArrayList < > ( ) ; <nl> - for ( Map . Entry < String , Double > e : ratios . options . entrySet ( ) ) <nl> - ratiosOut . add ( new Pair < String , Double > ( e . getKey ( ) , e . getValue ( ) ) ) ; <nl> - return ratiosOut ; <nl> + return ratios . options ; <nl> } <nl> } <nl> <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / OptionEnumProbabilities . java b / tools / stress / src / org / apache / cassandra / stress / settings / OptionEnumProbabilities . java <nl> index b1c5c49 . . 71d7a8d 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / settings / OptionEnumProbabilities . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / settings / OptionEnumProbabilities . java <nl> @ @ - 23 , 8 + 23 , 9 @ @ package org . apache . cassandra . stress . settings ; <nl> <nl> import java . util . ArrayList ; <nl> import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . HashMap ; <nl> <nl> - import org . apache . commons . math3 . util . Pair ; <nl> <nl> public final class OptionEnumProbabilities < T > extends OptionMulti <nl> { <nl> @ @ - 67 , 15 + 68 , 15 @ @ public final class OptionEnumProbabilities < T > extends OptionMulti <nl> return options ; <nl> } <nl> <nl> - List < Pair < T , Double > > ratios ( ) <nl> + Map < T , Double > ratios ( ) <nl> { <nl> List < ? extends Option > ratiosIn = setByUser ( ) ? optionsSetByUser ( ) : defaultOptions ( ) ; <nl> - List < Pair < T , Double > > ratiosOut = new ArrayList < > ( ) ; <nl> + Map < T , Double > ratiosOut = new HashMap < > ( ) ; <nl> for ( Option opt : ratiosIn ) <nl> { <nl> OptMatcher < T > optMatcher = ( OptMatcher < T > ) opt ; <nl> double d = Double . parseDouble ( optMatcher . value ( ) ) ; <nl> - ratiosOut . add ( new Pair < > ( optMatcher . opt , d ) ) ; <nl> + ratiosOut . put ( optMatcher . opt , d ) ; <nl> } <nl> return ratiosOut ; <nl> } <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefinedMixed . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefinedMixed . java <nl> index e5d4f80 . . 49d3c56 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefinedMixed . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefinedMixed . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ package org . apache . cassandra . stress . settings ; <nl> <nl> import java . util . ArrayList ; <nl> import java . util . List ; <nl> + import java . util . Map ; <nl> <nl> import org . apache . cassandra . stress . Operation ; <nl> import org . apache . cassandra . stress . generate . DistributionFactory ; <nl> @ @ - 39 , 7 + 40 , 7 @ @ public class SettingsCommandPreDefinedMixed extends SettingsCommandPreDefined <nl> { <nl> <nl> / / Ratios for selecting commands - index for each Command , NaN indicates the command is not requested <nl> - private final List < Pair < Command , Double > > ratios ; <nl> + private final Map < Command , Double > ratios ; <nl> private final DistributionFactory clustering ; <nl> <nl> public SettingsCommandPreDefinedMixed ( Options options ) <nl> @ @ - 54 , 7 + 55 , 11 @ @ public class SettingsCommandPreDefinedMixed extends SettingsCommandPreDefined <nl> <nl> public OpDistributionFactory getFactory ( final StressSettings settings ) <nl> { <nl> - return new SampledOpDistributionFactory < Command > ( ratios , clustering ) <nl> + final List < Pair < Command , Double > > mathPairs = new ArrayList < > ( ) ; <nl> + for ( Map . Entry entry : ratios . entrySet ( ) ) <nl> + mathPairs . add ( new Pair ( entry . getKey ( ) , entry . getValue ( ) ) ) ; <nl> + <nl> + return new SampledOpDistributionFactory < Command > ( mathPairs , clustering ) <nl> { <nl> protected Operation get ( Timer timer , PartitionGenerator generator , Command key ) <nl> { <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandUser . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandUser . java <nl> index f36296e . . 08d538e 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandUser . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandUser . java <nl> @ @ - 24 , 8 + 24 , 7 @ @ package org . apache . cassandra . stress . settings ; <nl> import java . io . File ; <nl> import java . util . ArrayList ; <nl> import java . util . List ; <nl> - <nl> - import org . apache . commons . math3 . util . Pair ; <nl> + import java . util . Map ; <nl> <nl> import org . apache . cassandra . stress . Operation ; <nl> import org . apache . cassandra . stress . StressProfile ; <nl> @ @ - 35 , 12 + 34 , 14 @ @ import org . apache . cassandra . stress . operations . OpDistributionFactory ; <nl> import org . apache . cassandra . stress . operations . SampledOpDistributionFactory ; <nl> import org . apache . cassandra . stress . util . Timer ; <nl> <nl> + import org . apache . commons . math3 . util . Pair ; <nl> + <nl> / / Settings unique to the mixed command type <nl> public class SettingsCommandUser extends SettingsCommand <nl> { <nl> <nl> / / Ratios for selecting commands - index for each Command , NaN indicates the command is not requested <nl> - private final List < Pair < String , Double > > ratios ; <nl> + private final Map < String , Double > ratios ; <nl> private final DistributionFactory clustering ; <nl> public final StressProfile profile ; <nl> <nl> @ @ - 58 , 7 + 59 , 11 @ @ public class SettingsCommandUser extends SettingsCommand <nl> <nl> public OpDistributionFactory getFactory ( final StressSettings settings ) <nl> { <nl> - return new SampledOpDistributionFactory < String > ( ratios , clustering ) <nl> + final List < Pair < String , Double > > mathPairs = new ArrayList < > ( ) ; <nl> + for ( Map . Entry entry : ratios . entrySet ( ) ) <nl> + mathPairs . add ( new Pair ( entry . getKey ( ) , entry . getValue ( ) ) ) ; <nl> + <nl> + return new SampledOpDistributionFactory < String > ( mathPairs , clustering ) <nl> { <nl> protected Operation get ( Timer timer , PartitionGenerator generator , String key ) <nl> {
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / OptionAnyProbabilities . java b / tools / stress / src / org / apache / cassandra / stress / settings / OptionAnyProbabilities . java 
 index 4e2ad64 . . b685294 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / settings / OptionAnyProbabilities . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / settings / OptionAnyProbabilities . java 
 @ @ - 27 , 8 + 27 , 8 @ @ import java . util . Collections ; 
 import java . util . LinkedHashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 + import java . util . HashMap ; 
 
 - import org . apache . commons . math3 . util . Pair ; 
 
 public final class OptionAnyProbabilities extends OptionMulti 
 { 
 @ @ - 88 , 12 + 88 , 9 @ @ public final class OptionAnyProbabilities extends OptionMulti 
 return Arrays . asList ( ratios ) ; 
 } 
 
 - List < Pair < String , Double > > ratios ( ) 
 + Map < String , Double > ratios ( ) 
 { 
 - List < Pair < String , Double > > ratiosOut = new ArrayList < > ( ) ; 
 - for ( Map . Entry < String , Double > e : ratios . options . entrySet ( ) ) 
 - ratiosOut . add ( new Pair < String , Double > ( e . getKey ( ) , e . getValue ( ) ) ) ; 
 - return ratiosOut ; 
 + return ratios . options ; 
 } 
 } 
 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / OptionEnumProbabilities . java b / tools / stress / src / org / apache / cassandra / stress / settings / OptionEnumProbabilities . java 
 index b1c5c49 . . 71d7a8d 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / settings / OptionEnumProbabilities . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / settings / OptionEnumProbabilities . java 
 @ @ - 23 , 8 + 23 , 9 @ @ package org . apache . cassandra . stress . settings ; 
 
 import java . util . ArrayList ; 
 import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . HashMap ; 
 
 - import org . apache . commons . math3 . util . Pair ; 
 
 public final class OptionEnumProbabilities < T > extends OptionMulti 
 { 
 @ @ - 67 , 15 + 68 , 15 @ @ public final class OptionEnumProbabilities < T > extends OptionMulti 
 return options ; 
 } 
 
 - List < Pair < T , Double > > ratios ( ) 
 + Map < T , Double > ratios ( ) 
 { 
 List < ? extends Option > ratiosIn = setByUser ( ) ? optionsSetByUser ( ) : defaultOptions ( ) ; 
 - List < Pair < T , Double > > ratiosOut = new ArrayList < > ( ) ; 
 + Map < T , Double > ratiosOut = new HashMap < > ( ) ; 
 for ( Option opt : ratiosIn ) 
 { 
 OptMatcher < T > optMatcher = ( OptMatcher < T > ) opt ; 
 double d = Double . parseDouble ( optMatcher . value ( ) ) ; 
 - ratiosOut . add ( new Pair < > ( optMatcher . opt , d ) ) ; 
 + ratiosOut . put ( optMatcher . opt , d ) ; 
 } 
 return ratiosOut ; 
 } 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefinedMixed . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefinedMixed . java 
 index e5d4f80 . . 49d3c56 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefinedMixed . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefinedMixed . java 
 @ @ - 23 , 6 + 23 , 7 @ @ package org . apache . cassandra . stress . settings ; 
 
 import java . util . ArrayList ; 
 import java . util . List ; 
 + import java . util . Map ; 
 
 import org . apache . cassandra . stress . Operation ; 
 import org . apache . cassandra . stress . generate . DistributionFactory ; 
 @ @ - 39 , 7 + 40 , 7 @ @ public class SettingsCommandPreDefinedMixed extends SettingsCommandPreDefined 
 { 
 
 / / Ratios for selecting commands - index for each Command , NaN indicates the command is not requested 
 - private final List < Pair < Command , Double > > ratios ; 
 + private final Map < Command , Double > ratios ; 
 private final DistributionFactory clustering ; 
 
 public SettingsCommandPreDefinedMixed ( Options options ) 
 @ @ - 54 , 7 + 55 , 11 @ @ public class SettingsCommandPreDefinedMixed extends SettingsCommandPreDefined 
 
 public OpDistributionFactory getFactory ( final StressSettings settings ) 
 { 
 - return new SampledOpDistributionFactory < Command > ( ratios , clustering ) 
 + final List < Pair < Command , Double > > mathPairs = new ArrayList < > ( ) ; 
 + for ( Map . Entry entry : ratios . entrySet ( ) ) 
 + mathPairs . add ( new Pair ( entry . getKey ( ) , entry . getValue ( ) ) ) ; 
 + 
 + return new SampledOpDistributionFactory < Command > ( mathPairs , clustering ) 
 { 
 protected Operation get ( Timer timer , PartitionGenerator generator , Command key ) 
 { 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandUser . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandUser . java 
 index f36296e . . 08d538e 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandUser . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandUser . java 
 @ @ - 24 , 8 + 24 , 7 @ @ package org . apache . cassandra . stress . settings ; 
 import java . io . File ; 
 import java . util . ArrayList ; 
 import java . util . List ; 
 - 
 - import org . apache . commons . math3 . util . Pair ; 
 + import java . util . Map ; 
 
 import org . apache . cassandra . stress . Operation ; 
 import org . apache . cassandra . stress . StressProfile ; 
 @ @ - 35 , 12 + 34 , 14 @ @ import org . apache . cassandra . stress . operations . OpDistributionFactory ; 
 import org . apache . cassandra . stress . operations . SampledOpDistributionFactory ; 
 import org . apache . cassandra . stress . util . Timer ; 
 
 + import org . apache . commons . math3 . util . Pair ; 
 + 
 / / Settings unique to the mixed command type 
 public class SettingsCommandUser extends SettingsCommand 
 { 
 
 / / Ratios for selecting commands - index for each Command , NaN indicates the command is not requested 
 - private final List < Pair < String , Double > > ratios ; 
 + private final Map < String , Double > ratios ; 
 private final DistributionFactory clustering ; 
 public final StressProfile profile ; 
 
 @ @ - 58 , 7 + 59 , 11 @ @ public class SettingsCommandUser extends SettingsCommand 
 
 public OpDistributionFactory getFactory ( final StressSettings settings ) 
 { 
 - return new SampledOpDistributionFactory < String > ( ratios , clustering ) 
 + final List < Pair < String , Double > > mathPairs = new ArrayList < > ( ) ; 
 + for ( Map . Entry entry : ratios . entrySet ( ) ) 
 + mathPairs . add ( new Pair ( entry . getKey ( ) , entry . getValue ( ) ) ) ; 
 + 
 + return new SampledOpDistributionFactory < String > ( mathPairs , clustering ) 
 { 
 protected Operation get ( Timer timer , PartitionGenerator generator , String key ) 
 {

NEAREST DIFF:
ELIMINATEDSENTENCE
