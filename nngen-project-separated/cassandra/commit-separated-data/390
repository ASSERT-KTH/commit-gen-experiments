BLEU SCORE: 0.05522397783539471

TEST MSG: Avoid reading static row twice from legacy sstables
GENERATED MSG: merge from 1 . 1

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 17a11ab . . 2ef5863 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 14 <nl> + * Avoid reading static row twice from old format sstables ( CASSANDRA - 13236 ) <nl> * Fix NPE in StorageService . excise ( ) ( CASSANDRA - 13163 ) <nl> * Expire OutboundTcpConnection messages by a single Thread ( CASSANDRA - 13265 ) <nl> * Fail repair if insufficient responses received ( CASSANDRA - 13397 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java b / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java <nl> index d57e6bc . . c61b6aa 100644 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import org . apache . cassandra . db . rows . * ; <nl> import org . apache . cassandra . io . sstable . format . SSTableReader ; <nl> import org . apache . cassandra . io . sstable . CorruptSSTableException ; <nl> import org . apache . cassandra . io . sstable . IndexHelper ; <nl> + import org . apache . cassandra . io . sstable . format . Version ; <nl> import org . apache . cassandra . io . util . FileDataInput ; <nl> import org . apache . cassandra . io . util . DataPosition ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> @ @ - 285 , 6 + 286 , 7 @ @ abstract class AbstractSSTableIterator implements SliceableUnfilteredRowIterator <nl> { <nl> private final boolean shouldCloseFile ; <nl> public FileDataInput file ; <nl> + public final Version version ; <nl> <nl> protected UnfilteredDeserializer deserializer ; <nl> <nl> @ @ - 295 , 6 + 297 , 7 @ @ abstract class AbstractSSTableIterator implements SliceableUnfilteredRowIterator <nl> { <nl> this . file = file ; <nl> this . shouldCloseFile = shouldCloseFile ; <nl> + this . version = sstable . descriptor . version ; <nl> <nl> if ( file ! = null ) <nl> createDeserializer ( ) ; <nl> @ @ - 430 , 6 + 433 , 19 @ @ abstract class AbstractSSTableIterator implements SliceableUnfilteredRowIterator <nl> currentIndexIdx = blockIdx ; <nl> reader . openMarker = blockIdx > 0 ? indexes . get ( blockIdx - 1 ) . endOpenMarker : null ; <nl> mark = reader . file . mark ( ) ; <nl> + <nl> + / / If we ' re reading an old format file and we move to the first block in the index ( i . e . the <nl> + / / head of the partition ) , we skip the static row as it ' s already been read when we first opened <nl> + / / the iterator . If we don ' t do this and a static row is present , we ' ll re - read it but treat it <nl> + / / as a regular row , causing deserialization to blow up later as that row ' s flags will be invalid <nl> + / / see CASSANDRA - 12088 & CASSANDRA - 13236 <nl> + if ( ! reader . version . storeRows ( ) <nl> + & & blockIdx = = 0 <nl> + & & reader . deserializer . hasNext ( ) <nl> + & & reader . deserializer . nextIsStatic ( ) ) <nl> + { <nl> + reader . deserializer . skipNext ( ) ; <nl> + } <nl> } <nl> <nl> private long columnOffset ( int i )
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / HintedHandOffManager . java b / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> index a83fbab . . e2dc046 100644 <nl> - - - a / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> + + + b / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> @ @ - 391 , 7 + 391 , 9 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean <nl> { <nl> Token < ? > token = StorageService . getPartitioner ( ) . getTokenFactory ( ) . fromByteArray ( row . key . key ) ; <nl> InetAddress target = StorageService . instance . getTokenMetadata ( ) . getEndpoint ( token ) ; <nl> - scheduleHintDelivery ( target ) ; <nl> + / / token may have since been removed ( in which case we have just read back a tombstone ) <nl> + if ( target ! = null ) <nl> + scheduleHintDelivery ( target ) ; <nl> } <nl> <nl> if ( logger _ . isDebugEnabled ( ) )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 17a11ab . . 2ef5863 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 14 
 + * Avoid reading static row twice from old format sstables ( CASSANDRA - 13236 ) 
 * Fix NPE in StorageService . excise ( ) ( CASSANDRA - 13163 ) 
 * Expire OutboundTcpConnection messages by a single Thread ( CASSANDRA - 13265 ) 
 * Fail repair if insufficient responses received ( CASSANDRA - 13397 ) 
 diff - - git a / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java b / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java 
 index d57e6bc . . c61b6aa 100644 
 - - - a / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java 
 + + + b / src / java / org / apache / cassandra / db / columniterator / AbstractSSTableIterator . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import org . apache . cassandra . db . rows . * ; 
 import org . apache . cassandra . io . sstable . format . SSTableReader ; 
 import org . apache . cassandra . io . sstable . CorruptSSTableException ; 
 import org . apache . cassandra . io . sstable . IndexHelper ; 
 + import org . apache . cassandra . io . sstable . format . Version ; 
 import org . apache . cassandra . io . util . FileDataInput ; 
 import org . apache . cassandra . io . util . DataPosition ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 @ @ - 285 , 6 + 286 , 7 @ @ abstract class AbstractSSTableIterator implements SliceableUnfilteredRowIterator 
 { 
 private final boolean shouldCloseFile ; 
 public FileDataInput file ; 
 + public final Version version ; 
 
 protected UnfilteredDeserializer deserializer ; 
 
 @ @ - 295 , 6 + 297 , 7 @ @ abstract class AbstractSSTableIterator implements SliceableUnfilteredRowIterator 
 { 
 this . file = file ; 
 this . shouldCloseFile = shouldCloseFile ; 
 + this . version = sstable . descriptor . version ; 
 
 if ( file ! = null ) 
 createDeserializer ( ) ; 
 @ @ - 430 , 6 + 433 , 19 @ @ abstract class AbstractSSTableIterator implements SliceableUnfilteredRowIterator 
 currentIndexIdx = blockIdx ; 
 reader . openMarker = blockIdx > 0 ? indexes . get ( blockIdx - 1 ) . endOpenMarker : null ; 
 mark = reader . file . mark ( ) ; 
 + 
 + / / If we ' re reading an old format file and we move to the first block in the index ( i . e . the 
 + / / head of the partition ) , we skip the static row as it ' s already been read when we first opened 
 + / / the iterator . If we don ' t do this and a static row is present , we ' ll re - read it but treat it 
 + / / as a regular row , causing deserialization to blow up later as that row ' s flags will be invalid 
 + / / see CASSANDRA - 12088 & CASSANDRA - 13236 
 + if ( ! reader . version . storeRows ( ) 
 + & & blockIdx = = 0 
 + & & reader . deserializer . hasNext ( ) 
 + & & reader . deserializer . nextIsStatic ( ) ) 
 + { 
 + reader . deserializer . skipNext ( ) ; 
 + } 
 } 
 
 private long columnOffset ( int i )

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / HintedHandOffManager . java b / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 index a83fbab . . e2dc046 100644 
 - - - a / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 + + + b / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 @ @ - 391 , 7 + 391 , 9 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean 
 { 
 Token < ? > token = StorageService . getPartitioner ( ) . getTokenFactory ( ) . fromByteArray ( row . key . key ) ; 
 InetAddress target = StorageService . instance . getTokenMetadata ( ) . getEndpoint ( token ) ; 
 - scheduleHintDelivery ( target ) ; 
 + / / token may have since been removed ( in which case we have just read back a tombstone ) 
 + if ( target ! = null ) 
 + scheduleHintDelivery ( target ) ; 
 } 
 
 if ( logger _ . isDebugEnabled ( ) )
