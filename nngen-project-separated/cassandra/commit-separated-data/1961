BLEU SCORE: 0.10682175159905853

TEST MSG: Fix Accumulator . isEmpty method
GENERATED MSG: merge from 0 . 6

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / utils / concurrent / Accumulator . java b / src / java / org / apache / cassandra / utils / concurrent / Accumulator . java <nl> index 3b5e5c9 . . baecb34 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / concurrent / Accumulator . java <nl> + + + b / src / java / org / apache / cassandra / utils / concurrent / Accumulator . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ public class Accumulator < E > implements Iterable < E > <nl> <nl> public boolean isEmpty ( ) <nl> { <nl> - return presentCount ! = 0 ; <nl> + return presentCount = = 0 ; <nl> } <nl> <nl> / * * <nl> diff - - git a / test / unit / org / apache / cassandra / utils / concurrent / AccumulatorTest . java b / test / unit / org / apache / cassandra / utils / concurrent / AccumulatorTest . java <nl> new file mode 100644 <nl> index 0000000 . . 2842374 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / utils / concurrent / AccumulatorTest . java <nl> @ @ - 0 , 0 + 1 , 106 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + package org . apache . cassandra . utils . concurrent ; <nl> + <nl> + import java . util . Iterator ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import static org . junit . Assert . * ; <nl> + <nl> + public class AccumulatorTest <nl> + { <nl> + @ Test <nl> + public void testAddMoreThanCapacity ( ) <nl> + { <nl> + Accumulator < Integer > accu = new Accumulator ( 4 ) ; <nl> + <nl> + accu . add ( 1 ) ; <nl> + accu . add ( 2 ) ; <nl> + accu . add ( 3 ) ; <nl> + accu . add ( 4 ) ; <nl> + <nl> + try <nl> + { <nl> + accu . add ( 5 ) ; <nl> + fail ( ) ; <nl> + } <nl> + catch ( IllegalStateException e ) <nl> + { <nl> + / / Expected <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsEmptyAndSize ( ) <nl> + { <nl> + Accumulator < Integer > accu = new Accumulator ( 4 ) ; <nl> + <nl> + assertTrue ( accu . isEmpty ( ) ) ; <nl> + assertEquals ( 0 , accu . size ( ) ) ; <nl> + <nl> + accu . add ( 1 ) ; <nl> + accu . add ( 2 ) ; <nl> + <nl> + assertTrue ( ! accu . isEmpty ( ) ) ; <nl> + assertEquals ( 2 , accu . size ( ) ) ; <nl> + <nl> + accu . add ( 3 ) ; <nl> + accu . add ( 4 ) ; <nl> + <nl> + assertTrue ( ! accu . isEmpty ( ) ) ; <nl> + assertEquals ( 4 , accu . size ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetAndIterator ( ) <nl> + { <nl> + Accumulator < String > accu = new Accumulator ( 4 ) ; <nl> + <nl> + accu . add ( " 3 " ) ; <nl> + accu . add ( " 2 " ) ; <nl> + accu . add ( " 4 " ) ; <nl> + <nl> + assertEquals ( " 3 " , accu . get ( 0 ) ) ; <nl> + assertEquals ( " 2 " , accu . get ( 1 ) ) ; <nl> + assertEquals ( " 4 " , accu . get ( 2 ) ) ; <nl> + <nl> + try <nl> + { <nl> + assertEquals ( null , accu . get ( 3 ) ) ; <nl> + fail ( ) ; <nl> + } <nl> + catch ( IndexOutOfBoundsException e ) <nl> + { <nl> + / / Expected <nl> + } <nl> + <nl> + accu . add ( " 0 " ) ; <nl> + <nl> + assertEquals ( " 0 " , accu . get ( 3 ) ) ; <nl> + <nl> + Iterator < String > iter = accu . iterator ( ) ; <nl> + <nl> + assertEquals ( " 3 " , iter . next ( ) ) ; <nl> + assertEquals ( " 2 " , iter . next ( ) ) ; <nl> + assertEquals ( " 4 " , iter . next ( ) ) ; <nl> + assertEquals ( " 0 " , iter . next ( ) ) ; <nl> + assertFalse ( iter . hasNext ( ) ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 8d9e2ea . . c97b17f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 7 + 1 , 10 @ @ <nl> dev <nl> * sstable versioning ( CASSANDRA - 389 ) <nl> <nl> - 0 . 6 . 0 - dev <nl> + 0 . 6 . 0 - RC1 <nl> + * fix compaction bucketing bug ( CASSANDRA - 814 ) <nl> + <nl> + 0 . 6 . 0 - beta1 / beta2 <nl> * add batch _ mutate thrift command , deprecating batch _ insert ( CASSANDRA - 336 ) <nl> * remove get _ key _ range Thrift API , deprecated in 0 . 5 ( CASSANDRA - 710 ) <nl> * add optional login ( ) Thrift call for authentication ( CASSANDRA - 547 ) <nl> @ @ - 42 , 7 + 45 , 9 @ @ dev <nl> * allow larger numbers of keys ( > 140M ) in a sstable bloom filter <nl> ( CASSANDRA - 790 ) <nl> * include jvm argument improvements from CASSANDRA - 504 in debian package <nl> - * change streaming chunk size to 32MB ( was 64MB ) ( CASSANDRA - 795 ) <nl> + * change streaming chunk size to 32MB to accomodate Windows XP limitations <nl> + ( was 64MB ) ( CASSANDRA - 795 ) <nl> + * fix get _ range _ slice returning results in the wrong order ( CASSANDRA - 781 ) <nl> <nl> <nl> 0 . 5 . 0 final <nl> diff - - git a / build . xml b / build . xml <nl> index ea79876 . . 54ef12d 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 314 , 6 + 314 , 7 @ @ <nl> < include name = " * * " / > <nl> < exclude name = " build / * * " / > <nl> < exclude name = " src / gen - java / * * " / > <nl> + < exclude name = " interface / avro / * * " / > <nl> < / tarfileset > <nl> < / tar > <nl> < / target > <nl> diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> index fbd5ebb . . 1b5b6b1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return 0 ; <nl> } <nl> logger . debug ( " Checking to see if compaction of " + cfs . columnFamily _ + " would be useful " ) ; <nl> - Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> + Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> updateEstimateFor ( cfs , buckets ) ; <nl> <nl> for ( List < SSTableReader > sstables : buckets ) <nl> @ @ - 441 , 7 + 441 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> / * <nl> * Group files of similar size into buckets . <nl> * / <nl> - static Set < List < SSTableReader > > getCompactionBuckets ( Iterable < SSTableReader > files , long min ) <nl> + static Set < List < SSTableReader > > getBuckets ( Iterable < SSTableReader > files , long min ) <nl> { <nl> Map < List < SSTableReader > , Long > buckets = new HashMap < List < SSTableReader > , Long > ( ) ; <nl> for ( SSTableReader sstable : files ) <nl> @ @ - 461 , 7 + 461 , 8 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> / / remove and re - add because adding changes the hash <nl> buckets . remove ( bucket ) ; <nl> - averageSize = ( averageSize + size ) / 2 ; <nl> + long totalSize = bucket . size ( ) * averageSize ; <nl> + averageSize = ( totalSize + size ) / ( bucket . size ( ) + 1 ) ; <nl> bucket . add ( sstable ) ; <nl> buckets . put ( bucket , averageSize ) ; <nl> bFound = true ; <nl> @ @ - 538 , 7 + 539 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> public void run ( ) <nl> { <nl> logger . debug ( " Estimating compactions for " + cfs . columnFamily _ ) ; <nl> - final Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> + final Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> updateEstimateFor ( cfs , buckets ) ; <nl> } <nl> } ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / utils / concurrent / Accumulator . java b / src / java / org / apache / cassandra / utils / concurrent / Accumulator . java 
 index 3b5e5c9 . . baecb34 100644 
 - - - a / src / java / org / apache / cassandra / utils / concurrent / Accumulator . java 
 + + + b / src / java / org / apache / cassandra / utils / concurrent / Accumulator . java 
 @ @ - 89 , 7 + 89 , 7 @ @ public class Accumulator < E > implements Iterable < E > 
 
 public boolean isEmpty ( ) 
 { 
 - return presentCount ! = 0 ; 
 + return presentCount = = 0 ; 
 } 
 
 / * * 
 diff - - git a / test / unit / org / apache / cassandra / utils / concurrent / AccumulatorTest . java b / test / unit / org / apache / cassandra / utils / concurrent / AccumulatorTest . java 
 new file mode 100644 
 index 0000000 . . 2842374 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / utils / concurrent / AccumulatorTest . java 
 @ @ - 0 , 0 + 1 , 106 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + package org . apache . cassandra . utils . concurrent ; 
 + 
 + import java . util . Iterator ; 
 + 
 + import org . junit . Test ; 
 + 
 + import static org . junit . Assert . * ; 
 + 
 + public class AccumulatorTest 
 + { 
 + @ Test 
 + public void testAddMoreThanCapacity ( ) 
 + { 
 + Accumulator < Integer > accu = new Accumulator ( 4 ) ; 
 + 
 + accu . add ( 1 ) ; 
 + accu . add ( 2 ) ; 
 + accu . add ( 3 ) ; 
 + accu . add ( 4 ) ; 
 + 
 + try 
 + { 
 + accu . add ( 5 ) ; 
 + fail ( ) ; 
 + } 
 + catch ( IllegalStateException e ) 
 + { 
 + / / Expected 
 + } 
 + } 
 + 
 + @ Test 
 + public void testIsEmptyAndSize ( ) 
 + { 
 + Accumulator < Integer > accu = new Accumulator ( 4 ) ; 
 + 
 + assertTrue ( accu . isEmpty ( ) ) ; 
 + assertEquals ( 0 , accu . size ( ) ) ; 
 + 
 + accu . add ( 1 ) ; 
 + accu . add ( 2 ) ; 
 + 
 + assertTrue ( ! accu . isEmpty ( ) ) ; 
 + assertEquals ( 2 , accu . size ( ) ) ; 
 + 
 + accu . add ( 3 ) ; 
 + accu . add ( 4 ) ; 
 + 
 + assertTrue ( ! accu . isEmpty ( ) ) ; 
 + assertEquals ( 4 , accu . size ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testGetAndIterator ( ) 
 + { 
 + Accumulator < String > accu = new Accumulator ( 4 ) ; 
 + 
 + accu . add ( " 3 " ) ; 
 + accu . add ( " 2 " ) ; 
 + accu . add ( " 4 " ) ; 
 + 
 + assertEquals ( " 3 " , accu . get ( 0 ) ) ; 
 + assertEquals ( " 2 " , accu . get ( 1 ) ) ; 
 + assertEquals ( " 4 " , accu . get ( 2 ) ) ; 
 + 
 + try 
 + { 
 + assertEquals ( null , accu . get ( 3 ) ) ; 
 + fail ( ) ; 
 + } 
 + catch ( IndexOutOfBoundsException e ) 
 + { 
 + / / Expected 
 + } 
 + 
 + accu . add ( " 0 " ) ; 
 + 
 + assertEquals ( " 0 " , accu . get ( 3 ) ) ; 
 + 
 + Iterator < String > iter = accu . iterator ( ) ; 
 + 
 + assertEquals ( " 3 " , iter . next ( ) ) ; 
 + assertEquals ( " 2 " , iter . next ( ) ) ; 
 + assertEquals ( " 4 " , iter . next ( ) ) ; 
 + assertEquals ( " 0 " , iter . next ( ) ) ; 
 + assertFalse ( iter . hasNext ( ) ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 8d9e2ea . . c97b17f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 7 + 1 , 10 @ @ 
 dev 
 * sstable versioning ( CASSANDRA - 389 ) 
 
 - 0 . 6 . 0 - dev 
 + 0 . 6 . 0 - RC1 
 + * fix compaction bucketing bug ( CASSANDRA - 814 ) 
 + 
 + 0 . 6 . 0 - beta1 / beta2 
 * add batch _ mutate thrift command , deprecating batch _ insert ( CASSANDRA - 336 ) 
 * remove get _ key _ range Thrift API , deprecated in 0 . 5 ( CASSANDRA - 710 ) 
 * add optional login ( ) Thrift call for authentication ( CASSANDRA - 547 ) 
 @ @ - 42 , 7 + 45 , 9 @ @ dev 
 * allow larger numbers of keys ( > 140M ) in a sstable bloom filter 
 ( CASSANDRA - 790 ) 
 * include jvm argument improvements from CASSANDRA - 504 in debian package 
 - * change streaming chunk size to 32MB ( was 64MB ) ( CASSANDRA - 795 ) 
 + * change streaming chunk size to 32MB to accomodate Windows XP limitations 
 + ( was 64MB ) ( CASSANDRA - 795 ) 
 + * fix get _ range _ slice returning results in the wrong order ( CASSANDRA - 781 ) 
 
 
 0 . 5 . 0 final 
 diff - - git a / build . xml b / build . xml 
 index ea79876 . . 54ef12d 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 314 , 6 + 314 , 7 @ @ 
 < include name = " * * " / > 
 < exclude name = " build / * * " / > 
 < exclude name = " src / gen - java / * * " / > 
 + < exclude name = " interface / avro / * * " / > 
 < / tarfileset > 
 < / tar > 
 < / target > 
 diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java 
 index fbd5ebb . . 1b5b6b1 100644 
 - - - a / src / java / org / apache / cassandra / db / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / CompactionManager . java 
 @ @ - 89 , 7 + 89 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 return 0 ; 
 } 
 logger . debug ( " Checking to see if compaction of " + cfs . columnFamily _ + " would be useful " ) ; 
 - Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 + Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 updateEstimateFor ( cfs , buckets ) ; 
 
 for ( List < SSTableReader > sstables : buckets ) 
 @ @ - 441 , 7 + 441 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 / * 
 * Group files of similar size into buckets . 
 * / 
 - static Set < List < SSTableReader > > getCompactionBuckets ( Iterable < SSTableReader > files , long min ) 
 + static Set < List < SSTableReader > > getBuckets ( Iterable < SSTableReader > files , long min ) 
 { 
 Map < List < SSTableReader > , Long > buckets = new HashMap < List < SSTableReader > , Long > ( ) ; 
 for ( SSTableReader sstable : files ) 
 @ @ - 461 , 7 + 461 , 8 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 / / remove and re - add because adding changes the hash 
 buckets . remove ( bucket ) ; 
 - averageSize = ( averageSize + size ) / 2 ; 
 + long totalSize = bucket . size ( ) * averageSize ; 
 + averageSize = ( totalSize + size ) / ( bucket . size ( ) + 1 ) ; 
 bucket . add ( sstable ) ; 
 buckets . put ( bucket , averageSize ) ; 
 bFound = true ; 
 @ @ - 538 , 7 + 539 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 public void run ( ) 
 { 
 logger . debug ( " Estimating compactions for " + cfs . columnFamily _ ) ; 
 - final Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 + final Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 updateEstimateFor ( cfs , buckets ) ; 
 } 
 } ;
