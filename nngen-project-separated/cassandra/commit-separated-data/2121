BLEU SCORE: 0.01573854197094764

TEST MSG: Use ThreadLocalRandom and remove FBUtilities . threadLocalRandom
GENERATED MSG: fix more findbugs complaints . patch by Michael Greene ; reviewed by jbellis for CASSANDRA - 338

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 608e4b1 . . ffa2b71 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 1 <nl> + * Use ThreadLocalRandom and remove FBUtilities . threadLocalRandom ( CASSANDRA - 7934 ) <nl> * Prevent operator mistakes due to simultaneous bootstrap ( CASSANDRA - 7069 ) <nl> * cassandra - stress supports whitelist mode for node config <nl> * GCInspector more closely tracks GC ; cassandra - stress and nodetool report it <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index a5d328a . . 1d6e3a4 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ import java . util . Set ; <nl> import java . util . SortedSet ; <nl> import java . util . TreeSet ; <nl> import java . util . UUID ; <nl> + import java . util . concurrent . ThreadLocalRandom ; <nl> <nl> import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . base . Objects ; <nl> @ @ - 703 , 7 + 704 , 7 @ @ public final class CFMetaData <nl> <nl> public ReadRepairDecision newReadRepairDecision ( ) <nl> { <nl> - double chance = FBUtilities . threadLocalRandom ( ) . nextDouble ( ) ; <nl> + double chance = ThreadLocalRandom . current ( ) . nextDouble ( ) ; <nl> if ( getReadRepairChance ( ) > chance ) <nl> return ReadRepairDecision . GLOBAL ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / BatchlogManager . java b / src / java / org / apache / cassandra / db / BatchlogManager . java <nl> index d49c620 . . 7f8d355 100644 <nl> - - - a / src / java / org / apache / cassandra / db / BatchlogManager . java <nl> + + + b / src / java / org / apache / cassandra / db / BatchlogManager . java <nl> @ @ - 527 , 7 + 527 , 7 @ @ public class BatchlogManager implements BatchlogManagerMBean <nl> @ VisibleForTesting <nl> protected int getRandomInt ( int bound ) <nl> { <nl> - return FBUtilities . threadLocalRandom ( ) . nextInt ( bound ) ; <nl> + return ThreadLocalRandom . current ( ) . nextInt ( bound ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / dht / Murmur3Partitioner . java b / src / java / org / apache / cassandra / dht / Murmur3Partitioner . java <nl> index 5a3c4bb . . 2bb0423 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / Murmur3Partitioner . java <nl> + + + b / src / java / org / apache / cassandra / dht / Murmur3Partitioner . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import java . util . HashMap ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> + import java . util . concurrent . ThreadLocalRandom ; <nl> <nl> import org . apache . cassandra . db . BufferDecoratedKey ; <nl> import org . apache . cassandra . db . DecoratedKey ; <nl> @ @ - 105 , 7 + 106 , 7 @ @ public class Murmur3Partitioner extends AbstractPartitioner < LongToken > <nl> <nl> public LongToken getRandomToken ( ) <nl> { <nl> - return new LongToken ( normalize ( FBUtilities . threadLocalRandom ( ) . nextLong ( ) ) ) ; <nl> + return new LongToken ( normalize ( ThreadLocalRandom . current ( ) . nextLong ( ) ) ) ; <nl> } <nl> <nl> private long normalize ( long v ) <nl> diff - - git a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java <nl> index 64495b8 . . 4521c19 100644 <nl> - - - a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java <nl> + + + b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . io . compress ; <nl> <nl> import java . io . * ; <nl> import java . nio . ByteBuffer ; <nl> + import java . util . concurrent . ThreadLocalRandom ; <nl> import java . util . zip . Adler32 ; <nl> import java . util . zip . CRC32 ; <nl> import java . util . zip . Checksum ; <nl> @ @ - 122 , 7 + 123 , 7 @ @ public class CompressedRandomAccessReader extends RandomAccessReader <nl> throw new CorruptBlockException ( getPath ( ) , chunk , e ) ; <nl> } <nl> <nl> - if ( metadata . parameters . getCrcCheckChance ( ) > FBUtilities . threadLocalRandom ( ) . nextDouble ( ) ) <nl> + if ( metadata . parameters . getCrcCheckChance ( ) > ThreadLocalRandom . current ( ) . nextDouble ( ) ) <nl> { <nl> <nl> if ( metadata . hasPostCompressionAdlerChecksums ) <nl> diff - - git a / src / java / org / apache / cassandra / service / QueryState . java b / src / java / org / apache / cassandra / service / QueryState . java <nl> index 12fc392 . . 0179a3e 100644 <nl> - - - a / src / java / org / apache / cassandra / service / QueryState . java <nl> + + + b / src / java / org / apache / cassandra / service / QueryState . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ <nl> package org . apache . cassandra . service ; <nl> <nl> import java . util . UUID ; <nl> + import java . util . concurrent . ThreadLocalRandom ; <nl> <nl> import org . apache . cassandra . tracing . Tracing ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> @ @ - 68 , 7 + 69 , 7 @ @ public class QueryState <nl> } <nl> <nl> double tracingProbability = StorageService . instance . getTracingProbability ( ) ; <nl> - return tracingProbability ! = 0 & & FBUtilities . threadLocalRandom ( ) . nextDouble ( ) < tracingProbability ; <nl> + return tracingProbability ! = 0 & & ThreadLocalRandom . current ( ) . nextDouble ( ) < tracingProbability ; <nl> } <nl> <nl> public void prepareTracingSession ( UUID sessionId ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index 615335b . . d9602bb 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 257 , 7 + 257 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> } <nl> <nl> Tracing . trace ( " Paxos proposal not accepted ( pre - empted by a higher ballot ) " ) ; <nl> - Uninterruptibles . sleepUninterruptibly ( FBUtilities . threadLocalRandom ( ) . nextInt ( 100 ) , TimeUnit . MILLISECONDS ) ; <nl> + Uninterruptibles . sleepUninterruptibly ( ThreadLocalRandom . current ( ) . nextInt ( 100 ) , TimeUnit . MILLISECONDS ) ; <nl> / / continue to retry <nl> } <nl> <nl> @ @ - 323 , 7 + 323 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> { <nl> Tracing . trace ( " Some replicas have already promised a higher ballot than ours ; aborting " ) ; <nl> / / sleep a random amount to give the other proposer a chance to finish <nl> - Uninterruptibles . sleepUninterruptibly ( FBUtilities . threadLocalRandom ( ) . nextInt ( 100 ) , TimeUnit . MILLISECONDS ) ; <nl> + Uninterruptibles . sleepUninterruptibly ( ThreadLocalRandom . current ( ) . nextInt ( 100 ) , TimeUnit . MILLISECONDS ) ; <nl> continue ; <nl> } <nl> <nl> @ @ - 344 , 7 + 344 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> { <nl> Tracing . trace ( " Some replicas have already promised a higher ballot than ours ; aborting " ) ; <nl> / / sleep a random amount to give the other proposer a chance to finish <nl> - Uninterruptibles . sleepUninterruptibly ( FBUtilities . threadLocalRandom ( ) . nextInt ( 100 ) , TimeUnit . MILLISECONDS ) ; <nl> + Uninterruptibles . sleepUninterruptibly ( ThreadLocalRandom . current ( ) . nextInt ( 100 ) , TimeUnit . MILLISECONDS ) ; <nl> } <nl> continue ; <nl> } <nl> @ @ - 1049 , 7 + 1049 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> } <nl> else <nl> { <nl> - return localEndpoints . get ( FBUtilities . threadLocalRandom ( ) . nextInt ( localEndpoints . size ( ) ) ) ; <nl> + return localEndpoints . get ( ThreadLocalRandom . current ( ) . nextInt ( localEndpoints . size ( ) ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java b / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java <nl> index ef019c2 . . 449546f 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java <nl> + + + b / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . io . InputStream ; <nl> import java . util . Iterator ; <nl> import java . util . concurrent . ArrayBlockingQueue ; <nl> import java . util . concurrent . BlockingQueue ; <nl> + import java . util . concurrent . ThreadLocalRandom ; <nl> import java . util . zip . Adler32 ; <nl> import java . util . zip . CRC32 ; <nl> import java . util . zip . Checksum ; <nl> @ @ - 114 , 7 + 115 , 7 @ @ public class CompressedInputStream extends InputStream <nl> totalCompressedBytesRead + = compressed . length ; <nl> <nl> / / validate crc randomly <nl> - if ( info . parameters . getCrcCheckChance ( ) > FBUtilities . threadLocalRandom ( ) . nextDouble ( ) ) <nl> + if ( info . parameters . getCrcCheckChance ( ) > ThreadLocalRandom . current ( ) . nextDouble ( ) ) <nl> { <nl> if ( hasPostCompressionAdlerChecksums ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> index 38e5834 . . 7e9adab 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> @ @ - 100 , 15 + 100 , 6 @ @ public class FBUtilities <nl> } <nl> } ; <nl> <nl> - private static final ThreadLocal < Random > localRandom = new ThreadLocal < Random > ( ) <nl> - { <nl> - @ Override <nl> - protected Random initialValue ( ) <nl> - { <nl> - return new Random ( ) ; <nl> - } <nl> - } ; <nl> - <nl> public static final int MAX _ UNSIGNED _ SHORT = 0xFFFF ; <nl> <nl> public static MessageDigest threadLocalMD5Digest ( ) <nl> @ @ - 128 , 11 + 119 , 6 @ @ public class FBUtilities <nl> } <nl> } <nl> <nl> - public static Random threadLocalRandom ( ) <nl> - { <nl> - return localRandom . get ( ) ; <nl> - } <nl> - <nl> / * * <nl> * Please use getBroadcastAddress instead . You need this only when you have to listen / connect . <nl> * /
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 8baf41f . . f5da722 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 57 , 7 + 57 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> private static Logger logger _ = Logger . getLogger ( ColumnFamilyStore . class ) ; <nl> <nl> private static final int BUFSIZE = 128 * 1024 * 1024 ; <nl> - private static final int COMPACTION _ MEMORY _ THRESHOLD = 1 < < 30 ; <nl> <nl> private static NonBlockingHashMap < String , Set < Memtable > > memtablesPendingFlush = new NonBlockingHashMap < String , Set < Memtable > > ( ) ; <nl> private static ExecutorService flusher _ = new DebuggableThreadPoolExecutor ( " MEMTABLE - FLUSHER - POOL " ) ; <nl> @ @ - 902 , 7 + 901 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> long totalkeysWritten = 0 ; <nl> String rangeFileLocation ; <nl> String mergedFileName ; <nl> - IPartitioner p = StorageService . getPartitioner ( ) ; <nl> / / Calculate the expected compacted filesize <nl> long expectedRangeFileSize = getExpectedCompactedFileSize ( files ) ; <nl> / * in the worst case a node will be giving out half of its data so we take a chance * / <nl> @ @ - 1378 , 7 + 1376 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> / / if we are querying subcolumns of a supercolumn , fetch the supercolumn with NQF , then filter in - memory . <nl> if ( filter . path . superColumnName ! = null ) <nl> { <nl> - AbstractType comparator = DatabaseDescriptor . getComparator ( table _ , columnFamily _ ) ; <nl> QueryFilter nameFilter = new NamesQueryFilter ( filter . key , new QueryPath ( columnFamily _ ) , filter . path . superColumnName ) ; <nl> ColumnFamily cf = getColumnFamily ( nameFilter ) ; <nl> if ( cf ! = null ) <nl> diff - - git a / src / java / org / apache / cassandra / db / CommitLog . java b / src / java / org / apache / cassandra / db / CommitLog . java <nl> index 92d777e . . a82f762 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CommitLog . java <nl> + + + b / src / java / org / apache / cassandra / db / CommitLog . java <nl> @ @ - 101 , 13 + 101 , 6 @ @ public class CommitLog <nl> { <nl> return ( int ) ( getCreationTime ( f ) - getCreationTime ( f2 ) ) ; <nl> } <nl> - <nl> - public boolean equals ( Object o ) <nl> - { <nl> - if ( ! ( o instanceof CommitLogFileComparator ) ) <nl> - return false ; <nl> - return true ; <nl> - } <nl> } <nl> <nl> public static void setSegmentSize ( int size ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / BytesType . java b / src / java / org / apache / cassandra / db / marshal / BytesType . java <nl> index da5c070 . . 3633849 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / BytesType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / BytesType . java <nl> @ @ - 1 , 5 + 1 , 7 @ @ <nl> package org . apache . cassandra . db . marshal ; <nl> <nl> + import java . util . Arrays ; <nl> + <nl> public class BytesType extends AbstractType <nl> { <nl> public int compare ( byte [ ] o1 , byte [ ] o2 ) <nl> @ @ - 28 , 6 + 30 , 6 @ @ public class BytesType extends AbstractType <nl> <nl> public String getString ( byte [ ] bytes ) <nl> { <nl> - return bytes . toString ( ) ; <nl> + return Arrays . toString ( bytes ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / LongType . java b / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> index a458274 . . efa3718 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> @ @ - 18 , 7 + 18 , 7 @ @ public class LongType extends AbstractType <nl> <nl> long L1 = ByteBuffer . wrap ( o1 ) . order ( ByteOrder . LITTLE _ ENDIAN ) . getLong ( ) ; <nl> long L2 = ByteBuffer . wrap ( o2 ) . order ( ByteOrder . LITTLE _ ENDIAN ) . getLong ( ) ; <nl> - return new Long ( L1 ) . compareTo ( L2 ) ; <nl> + return Long . valueOf ( L1 ) . compareTo ( Long . valueOf ( L2 ) ) ; <nl> } <nl> <nl> public String getString ( byte [ ] bytes ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> index f7c57f6 . . 6b3d16f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> @ @ - 1 , 7 + 1 , 6 @ @ <nl> package org . apache . cassandra . db . marshal ; <nl> <nl> import java . util . UUID ; <nl> - import java . nio . ByteBuffer ; <nl> <nl> public class TimeUUIDType extends AbstractType <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / dht / BootStrapper . java b / src / java / org / apache / cassandra / dht / BootStrapper . java <nl> index 7059cd9 . . 01e1766 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / BootStrapper . java <nl> + + + b / src / java / org / apache / cassandra / dht / BootStrapper . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> package org . apache . cassandra . dht ; <nl> <nl> import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> import java . util . Collections ; <nl> import java . util . HashMap ; <nl> import java . util . HashSet ; <nl> @ @ - 31 , 7 + 32 , 7 @ @ package org . apache . cassandra . dht ; <nl> import org . apache . cassandra . locator . TokenMetadata ; <nl> import org . apache . cassandra . net . EndPoint ; <nl> import org . apache . cassandra . service . StorageService ; <nl> - import org . apache . cassandra . utils . LogUtil ; <nl> + import org . apache . cassandra . utils . LogUtil ; <nl> <nl> <nl> / * * <nl> @ @ - 59 , 7 + 60 , 7 @ @ public class BootStrapper implements Runnable <nl> try <nl> { <nl> if ( logger _ . isDebugEnabled ( ) ) <nl> - logger _ . debug ( " Beginning bootstrap process for " + targets _ + " . . . " ) ; <nl> + logger _ . debug ( " Beginning bootstrap process for " + Arrays . toString ( targets _ ) + " . . . " ) ; <nl> / * copy the token to endpoint map * / <nl> Map < Token , EndPoint > tokenToEndPointMap = tokenMetadata _ . cloneTokenEndPointMap ( ) ; <nl> / * remove the tokens associated with the endpoints being bootstrapped * / <nl> diff - - git a / src / java / org / apache / cassandra / dht / BootstrapMetadata . java b / src / java / org / apache / cassandra / dht / BootstrapMetadata . java <nl> index 34126b2 . . e7b09a7 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / BootstrapMetadata . java <nl> + + + b / src / java / org / apache / cassandra / dht / BootstrapMetadata . java <nl> @ @ - 55 , 6 + 55 , 8 @ @ class BootstrapMetadata <nl> <nl> BootstrapMetadata ( EndPoint target , List < Range > ranges ) <nl> { <nl> + assert target _ ! = null ; <nl> + assert ranges _ ! = null ; <nl> target _ = target ; <nl> ranges _ = ranges ; <nl> } <nl> @ @ - 78 , 13 + 80 , 11 @ @ class BootstrapMetadataSerializer implements ICompactSerializer < BootstrapMetadat <nl> public void serialize ( BootstrapMetadata bsMetadata , DataOutputStream dos ) throws IOException <nl> { <nl> CompactEndPointSerializationHelper . serialize ( bsMetadata . target _ , dos ) ; <nl> - int size = ( bsMetadata . ranges _ = = null ) ? 0 : bsMetadata . ranges _ . size ( ) ; <nl> - dos . writeInt ( size ) ; <nl> - <nl> - for ( Range range : bsMetadata . ranges _ ) <nl> + dos . writeInt ( bsMetadata . ranges _ . size ( ) ) ; <nl> + for ( Range range : bsMetadata . ranges _ ) <nl> { <nl> Range . serializer ( ) . serialize ( range , dos ) ; <nl> - } <nl> + } <nl> } <nl> <nl> public BootstrapMetadata deserialize ( DataInputStream dis ) throws IOException <nl> diff - - git a / src / java / org / apache / cassandra / dht / BootstrapMetadataMessage . java b / src / java / org / apache / cassandra / dht / BootstrapMetadataMessage . java <nl> index 341d72e . . a786cab 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / BootstrapMetadataMessage . java <nl> + + + b / src / java / org / apache / cassandra / dht / BootstrapMetadataMessage . java <nl> @ @ - 60 , 6 + 60 , 7 @ @ class BootstrapMetadataMessage <nl> <nl> BootstrapMetadataMessage ( BootstrapMetadata [ ] bsMetadata ) <nl> { <nl> + assert bsMetadata ! = null ; <nl> bsMetadata _ = bsMetadata ; <nl> } <nl> } <nl> @ @ - 69 , 9 + 70 , 8 @ @ class BootstrapMetadataMessageSerializer implements ICompactSerializer < Bootstrap <nl> public void serialize ( BootstrapMetadataMessage bsMetadataMessage , DataOutputStream dos ) throws IOException <nl> { <nl> BootstrapMetadata [ ] bsMetadata = bsMetadataMessage . bsMetadata _ ; <nl> - int size = ( bsMetadata = = null ) ? 0 : bsMetadata . length ; <nl> - dos . writeInt ( size ) ; <nl> - for ( BootstrapMetadata bsmd : bsMetadata ) <nl> + dos . writeInt ( bsMetadata . length ) ; <nl> + for ( BootstrapMetadata bsmd : bsMetadata ) <nl> { <nl> BootstrapMetadata . serializer ( ) . serialize ( bsmd , dos ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / ConsistencyManager . java b / src / java / org / apache / cassandra / service / ConsistencyManager . java <nl> index 94f9d3d . . 69c3296 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ConsistencyManager . java <nl> + + + b / src / java / org / apache / cassandra / service / ConsistencyManager . java <nl> @ @ - 98 , 7 + 98 , 7 @ @ class ConsistencyManager implements Runnable <nl> 	 	 } <nl> 	 } <nl> 	 <nl> - 	 class DataRepairHandler implements IAsyncCallback , ICacheExpungeHook < String , String > <nl> + 	 static class DataRepairHandler implements IAsyncCallback , ICacheExpungeHook < String , String > <nl> 	 { <nl> 	 	 private List < Message > responses _ = new ArrayList < Message > ( ) ; <nl> 	 	 private IResponseResolver < Row > readResponseResolver _ ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / MembershipCleaner . java b / src / java / org / apache / cassandra / tools / MembershipCleaner . java <nl> index 28775f8 . . 71db3ee 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / MembershipCleaner . java <nl> + + + b / src / java / org / apache / cassandra / tools / MembershipCleaner . java <nl> @ @ - 44 , 7 + 44 , 7 @ @ public class MembershipCleaner <nl> { <nl> if ( args . length ! = 3 ) <nl> { <nl> - System . out . println ( " Usage : java com . facebook . infrastructure . tools . MembershipCleaner " + <nl> + System . out . println ( " Usage : java org . apache . cassandra . tools . MembershipCleaner " + <nl> " < ip : port to send the message > " + <nl> " < node which needs to be removed > " + <nl> " < file containing all nodes in the cluster > " ) ; <nl> @ @ - 82 , 7 + 82 , 6 @ @ public class MembershipCleaner <nl> public static class MembershipCleanerMessage implements Serializable <nl> { <nl> private static ICompactSerializer < MembershipCleanerMessage > serializer _ ; <nl> - private static AtomicInteger idGen _ = new AtomicInteger ( 0 ) ; <nl> <nl> static <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / tools / MembershipCleanerVerbHandler . java b / src / java / org / apache / cassandra / tools / MembershipCleanerVerbHandler . java <nl> index b34db74 . . 610b5e8 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / MembershipCleanerVerbHandler . java <nl> + + + b / src / java / org / apache / cassandra / tools / MembershipCleanerVerbHandler . java <nl> @ @ - 69 , 7 + 69 , 7 @ @ public class MembershipCleanerVerbHandler implements IVerbHandler <nl> { <nl> if ( logger _ . isDebugEnabled ( ) ) <nl> logger _ . debug ( " Processing node " + node ) ; <nl> - byte [ ] bytes = headers . remove ( node ) ; <nl> + headers . remove ( node ) ; <nl> / * Send a message to this node to alter its membership state . * / <nl> EndPoint targetNode = new EndPoint ( node , DatabaseDescriptor . getStoragePort ( ) ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / utils / FileUtils . java b / src / java / org / apache / cassandra / utils / FileUtils . java <nl> index a29f2a8 . . 3110d04 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FileUtils . java <nl> + + + b / src / java / org / apache / cassandra / utils / FileUtils . java <nl> @ @ - 88 , 13 + 88 , 6 @ @ public class FileUtils <nl> { <nl> return ( int ) ( f . lastModified ( ) - f2 . lastModified ( ) ) ; <nl> } <nl> - <nl> - public boolean equals ( Object o ) <nl> - { <nl> - if ( ! ( o instanceof FileComparator ) ) <nl> - return false ; <nl> - return true ; <nl> - } <nl> } <nl> <nl> public static void createDirectory ( String directory ) throws IOException

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 608e4b1 . . ffa2b71 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 1 
 + * Use ThreadLocalRandom and remove FBUtilities . threadLocalRandom ( CASSANDRA - 7934 ) 
 * Prevent operator mistakes due to simultaneous bootstrap ( CASSANDRA - 7069 ) 
 * cassandra - stress supports whitelist mode for node config 
 * GCInspector more closely tracks GC ; cassandra - stress and nodetool report it 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index a5d328a . . 1d6e3a4 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import java . util . Set ; 
 import java . util . SortedSet ; 
 import java . util . TreeSet ; 
 import java . util . UUID ; 
 + import java . util . concurrent . ThreadLocalRandom ; 
 
 import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . base . Objects ; 
 @ @ - 703 , 7 + 704 , 7 @ @ public final class CFMetaData 
 
 public ReadRepairDecision newReadRepairDecision ( ) 
 { 
 - double chance = FBUtilities . threadLocalRandom ( ) . nextDouble ( ) ; 
 + double chance = ThreadLocalRandom . current ( ) . nextDouble ( ) ; 
 if ( getReadRepairChance ( ) > chance ) 
 return ReadRepairDecision . GLOBAL ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / BatchlogManager . java b / src / java / org / apache / cassandra / db / BatchlogManager . java 
 index d49c620 . . 7f8d355 100644 
 - - - a / src / java / org / apache / cassandra / db / BatchlogManager . java 
 + + + b / src / java / org / apache / cassandra / db / BatchlogManager . java 
 @ @ - 527 , 7 + 527 , 7 @ @ public class BatchlogManager implements BatchlogManagerMBean 
 @ VisibleForTesting 
 protected int getRandomInt ( int bound ) 
 { 
 - return FBUtilities . threadLocalRandom ( ) . nextInt ( bound ) ; 
 + return ThreadLocalRandom . current ( ) . nextInt ( bound ) ; 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / dht / Murmur3Partitioner . java b / src / java / org / apache / cassandra / dht / Murmur3Partitioner . java 
 index 5a3c4bb . . 2bb0423 100644 
 - - - a / src / java / org / apache / cassandra / dht / Murmur3Partitioner . java 
 + + + b / src / java / org / apache / cassandra / dht / Murmur3Partitioner . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import java . util . HashMap ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Map ; 
 + import java . util . concurrent . ThreadLocalRandom ; 
 
 import org . apache . cassandra . db . BufferDecoratedKey ; 
 import org . apache . cassandra . db . DecoratedKey ; 
 @ @ - 105 , 7 + 106 , 7 @ @ public class Murmur3Partitioner extends AbstractPartitioner < LongToken > 
 
 public LongToken getRandomToken ( ) 
 { 
 - return new LongToken ( normalize ( FBUtilities . threadLocalRandom ( ) . nextLong ( ) ) ) ; 
 + return new LongToken ( normalize ( ThreadLocalRandom . current ( ) . nextLong ( ) ) ) ; 
 } 
 
 private long normalize ( long v ) 
 diff - - git a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java 
 index 64495b8 . . 4521c19 100644 
 - - - a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java 
 + + + b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java 
 @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . io . compress ; 
 
 import java . io . * ; 
 import java . nio . ByteBuffer ; 
 + import java . util . concurrent . ThreadLocalRandom ; 
 import java . util . zip . Adler32 ; 
 import java . util . zip . CRC32 ; 
 import java . util . zip . Checksum ; 
 @ @ - 122 , 7 + 123 , 7 @ @ public class CompressedRandomAccessReader extends RandomAccessReader 
 throw new CorruptBlockException ( getPath ( ) , chunk , e ) ; 
 } 
 
 - if ( metadata . parameters . getCrcCheckChance ( ) > FBUtilities . threadLocalRandom ( ) . nextDouble ( ) ) 
 + if ( metadata . parameters . getCrcCheckChance ( ) > ThreadLocalRandom . current ( ) . nextDouble ( ) ) 
 { 
 
 if ( metadata . hasPostCompressionAdlerChecksums ) 
 diff - - git a / src / java / org / apache / cassandra / service / QueryState . java b / src / java / org / apache / cassandra / service / QueryState . java 
 index 12fc392 . . 0179a3e 100644 
 - - - a / src / java / org / apache / cassandra / service / QueryState . java 
 + + + b / src / java / org / apache / cassandra / service / QueryState . java 
 @ @ - 18 , 6 + 18 , 7 @ @ 
 package org . apache . cassandra . service ; 
 
 import java . util . UUID ; 
 + import java . util . concurrent . ThreadLocalRandom ; 
 
 import org . apache . cassandra . tracing . Tracing ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 @ @ - 68 , 7 + 69 , 7 @ @ public class QueryState 
 } 
 
 double tracingProbability = StorageService . instance . getTracingProbability ( ) ; 
 - return tracingProbability ! = 0 & & FBUtilities . threadLocalRandom ( ) . nextDouble ( ) < tracingProbability ; 
 + return tracingProbability ! = 0 & & ThreadLocalRandom . current ( ) . nextDouble ( ) < tracingProbability ; 
 } 
 
 public void prepareTracingSession ( UUID sessionId ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index 615335b . . d9602bb 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 257 , 7 + 257 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 } 
 
 Tracing . trace ( " Paxos proposal not accepted ( pre - empted by a higher ballot ) " ) ; 
 - Uninterruptibles . sleepUninterruptibly ( FBUtilities . threadLocalRandom ( ) . nextInt ( 100 ) , TimeUnit . MILLISECONDS ) ; 
 + Uninterruptibles . sleepUninterruptibly ( ThreadLocalRandom . current ( ) . nextInt ( 100 ) , TimeUnit . MILLISECONDS ) ; 
 / / continue to retry 
 } 
 
 @ @ - 323 , 7 + 323 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 { 
 Tracing . trace ( " Some replicas have already promised a higher ballot than ours ; aborting " ) ; 
 / / sleep a random amount to give the other proposer a chance to finish 
 - Uninterruptibles . sleepUninterruptibly ( FBUtilities . threadLocalRandom ( ) . nextInt ( 100 ) , TimeUnit . MILLISECONDS ) ; 
 + Uninterruptibles . sleepUninterruptibly ( ThreadLocalRandom . current ( ) . nextInt ( 100 ) , TimeUnit . MILLISECONDS ) ; 
 continue ; 
 } 
 
 @ @ - 344 , 7 + 344 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 { 
 Tracing . trace ( " Some replicas have already promised a higher ballot than ours ; aborting " ) ; 
 / / sleep a random amount to give the other proposer a chance to finish 
 - Uninterruptibles . sleepUninterruptibly ( FBUtilities . threadLocalRandom ( ) . nextInt ( 100 ) , TimeUnit . MILLISECONDS ) ; 
 + Uninterruptibles . sleepUninterruptibly ( ThreadLocalRandom . current ( ) . nextInt ( 100 ) , TimeUnit . MILLISECONDS ) ; 
 } 
 continue ; 
 } 
 @ @ - 1049 , 7 + 1049 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 } 
 else 
 { 
 - return localEndpoints . get ( FBUtilities . threadLocalRandom ( ) . nextInt ( localEndpoints . size ( ) ) ) ; 
 + return localEndpoints . get ( ThreadLocalRandom . current ( ) . nextInt ( localEndpoints . size ( ) ) ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java b / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java 
 index ef019c2 . . 449546f 100644 
 - - - a / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java 
 + + + b / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . io . InputStream ; 
 import java . util . Iterator ; 
 import java . util . concurrent . ArrayBlockingQueue ; 
 import java . util . concurrent . BlockingQueue ; 
 + import java . util . concurrent . ThreadLocalRandom ; 
 import java . util . zip . Adler32 ; 
 import java . util . zip . CRC32 ; 
 import java . util . zip . Checksum ; 
 @ @ - 114 , 7 + 115 , 7 @ @ public class CompressedInputStream extends InputStream 
 totalCompressedBytesRead + = compressed . length ; 
 
 / / validate crc randomly 
 - if ( info . parameters . getCrcCheckChance ( ) > FBUtilities . threadLocalRandom ( ) . nextDouble ( ) ) 
 + if ( info . parameters . getCrcCheckChance ( ) > ThreadLocalRandom . current ( ) . nextDouble ( ) ) 
 { 
 if ( hasPostCompressionAdlerChecksums ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 index 38e5834 . . 7e9adab 100644 
 - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java 
 + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 @ @ - 100 , 15 + 100 , 6 @ @ public class FBUtilities 
 } 
 } ; 
 
 - private static final ThreadLocal < Random > localRandom = new ThreadLocal < Random > ( ) 
 - { 
 - @ Override 
 - protected Random initialValue ( ) 
 - { 
 - return new Random ( ) ; 
 - } 
 - } ; 
 - 
 public static final int MAX _ UNSIGNED _ SHORT = 0xFFFF ; 
 
 public static MessageDigest threadLocalMD5Digest ( ) 
 @ @ - 128 , 11 + 119 , 6 @ @ public class FBUtilities 
 } 
 } 
 
 - public static Random threadLocalRandom ( ) 
 - { 
 - return localRandom . get ( ) ; 
 - } 
 - 
 / * * 
 * Please use getBroadcastAddress instead . You need this only when you have to listen / connect . 
 * /

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 8baf41f . . f5da722 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 57 , 7 + 57 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 private static Logger logger _ = Logger . getLogger ( ColumnFamilyStore . class ) ; 
 
 private static final int BUFSIZE = 128 * 1024 * 1024 ; 
 - private static final int COMPACTION _ MEMORY _ THRESHOLD = 1 < < 30 ; 
 
 private static NonBlockingHashMap < String , Set < Memtable > > memtablesPendingFlush = new NonBlockingHashMap < String , Set < Memtable > > ( ) ; 
 private static ExecutorService flusher _ = new DebuggableThreadPoolExecutor ( " MEMTABLE - FLUSHER - POOL " ) ; 
 @ @ - 902 , 7 + 901 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 long totalkeysWritten = 0 ; 
 String rangeFileLocation ; 
 String mergedFileName ; 
 - IPartitioner p = StorageService . getPartitioner ( ) ; 
 / / Calculate the expected compacted filesize 
 long expectedRangeFileSize = getExpectedCompactedFileSize ( files ) ; 
 / * in the worst case a node will be giving out half of its data so we take a chance * / 
 @ @ - 1378 , 7 + 1376 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 / / if we are querying subcolumns of a supercolumn , fetch the supercolumn with NQF , then filter in - memory . 
 if ( filter . path . superColumnName ! = null ) 
 { 
 - AbstractType comparator = DatabaseDescriptor . getComparator ( table _ , columnFamily _ ) ; 
 QueryFilter nameFilter = new NamesQueryFilter ( filter . key , new QueryPath ( columnFamily _ ) , filter . path . superColumnName ) ; 
 ColumnFamily cf = getColumnFamily ( nameFilter ) ; 
 if ( cf ! = null ) 
 diff - - git a / src / java / org / apache / cassandra / db / CommitLog . java b / src / java / org / apache / cassandra / db / CommitLog . java 
 index 92d777e . . a82f762 100644 
 - - - a / src / java / org / apache / cassandra / db / CommitLog . java 
 + + + b / src / java / org / apache / cassandra / db / CommitLog . java 
 @ @ - 101 , 13 + 101 , 6 @ @ public class CommitLog 
 { 
 return ( int ) ( getCreationTime ( f ) - getCreationTime ( f2 ) ) ; 
 } 
 - 
 - public boolean equals ( Object o ) 
 - { 
 - if ( ! ( o instanceof CommitLogFileComparator ) ) 
 - return false ; 
 - return true ; 
 - } 
 } 
 
 public static void setSegmentSize ( int size ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / BytesType . java b / src / java / org / apache / cassandra / db / marshal / BytesType . java 
 index da5c070 . . 3633849 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / BytesType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / BytesType . java 
 @ @ - 1 , 5 + 1 , 7 @ @ 
 package org . apache . cassandra . db . marshal ; 
 
 + import java . util . Arrays ; 
 + 
 public class BytesType extends AbstractType 
 { 
 public int compare ( byte [ ] o1 , byte [ ] o2 ) 
 @ @ - 28 , 6 + 30 , 6 @ @ public class BytesType extends AbstractType 
 
 public String getString ( byte [ ] bytes ) 
 { 
 - return bytes . toString ( ) ; 
 + return Arrays . toString ( bytes ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / LongType . java b / src / java / org / apache / cassandra / db / marshal / LongType . java 
 index a458274 . . efa3718 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / LongType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / LongType . java 
 @ @ - 18 , 7 + 18 , 7 @ @ public class LongType extends AbstractType 
 
 long L1 = ByteBuffer . wrap ( o1 ) . order ( ByteOrder . LITTLE _ ENDIAN ) . getLong ( ) ; 
 long L2 = ByteBuffer . wrap ( o2 ) . order ( ByteOrder . LITTLE _ ENDIAN ) . getLong ( ) ; 
 - return new Long ( L1 ) . compareTo ( L2 ) ; 
 + return Long . valueOf ( L1 ) . compareTo ( Long . valueOf ( L2 ) ) ; 
 } 
 
 public String getString ( byte [ ] bytes ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 index f7c57f6 . . 6b3d16f 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 @ @ - 1 , 7 + 1 , 6 @ @ 
 package org . apache . cassandra . db . marshal ; 
 
 import java . util . UUID ; 
 - import java . nio . ByteBuffer ; 
 
 public class TimeUUIDType extends AbstractType 
 { 
 diff - - git a / src / java / org / apache / cassandra / dht / BootStrapper . java b / src / java / org / apache / cassandra / dht / BootStrapper . java 
 index 7059cd9 . . 01e1766 100644 
 - - - a / src / java / org / apache / cassandra / dht / BootStrapper . java 
 + + + b / src / java / org / apache / cassandra / dht / BootStrapper . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 package org . apache . cassandra . dht ; 
 
 import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 import java . util . Collections ; 
 import java . util . HashMap ; 
 import java . util . HashSet ; 
 @ @ - 31 , 7 + 32 , 7 @ @ package org . apache . cassandra . dht ; 
 import org . apache . cassandra . locator . TokenMetadata ; 
 import org . apache . cassandra . net . EndPoint ; 
 import org . apache . cassandra . service . StorageService ; 
 - import org . apache . cassandra . utils . LogUtil ; 
 + import org . apache . cassandra . utils . LogUtil ; 
 
 
 / * * 
 @ @ - 59 , 7 + 60 , 7 @ @ public class BootStrapper implements Runnable 
 try 
 { 
 if ( logger _ . isDebugEnabled ( ) ) 
 - logger _ . debug ( " Beginning bootstrap process for " + targets _ + " . . . " ) ; 
 + logger _ . debug ( " Beginning bootstrap process for " + Arrays . toString ( targets _ ) + " . . . " ) ; 
 / * copy the token to endpoint map * / 
 Map < Token , EndPoint > tokenToEndPointMap = tokenMetadata _ . cloneTokenEndPointMap ( ) ; 
 / * remove the tokens associated with the endpoints being bootstrapped * / 
 diff - - git a / src / java / org / apache / cassandra / dht / BootstrapMetadata . java b / src / java / org / apache / cassandra / dht / BootstrapMetadata . java 
 index 34126b2 . . e7b09a7 100644 
 - - - a / src / java / org / apache / cassandra / dht / BootstrapMetadata . java 
 + + + b / src / java / org / apache / cassandra / dht / BootstrapMetadata . java 
 @ @ - 55 , 6 + 55 , 8 @ @ class BootstrapMetadata 
 
 BootstrapMetadata ( EndPoint target , List < Range > ranges ) 
 { 
 + assert target _ ! = null ; 
 + assert ranges _ ! = null ; 
 target _ = target ; 
 ranges _ = ranges ; 
 } 
 @ @ - 78 , 13 + 80 , 11 @ @ class BootstrapMetadataSerializer implements ICompactSerializer < BootstrapMetadat 
 public void serialize ( BootstrapMetadata bsMetadata , DataOutputStream dos ) throws IOException 
 { 
 CompactEndPointSerializationHelper . serialize ( bsMetadata . target _ , dos ) ; 
 - int size = ( bsMetadata . ranges _ = = null ) ? 0 : bsMetadata . ranges _ . size ( ) ; 
 - dos . writeInt ( size ) ; 
 - 
 - for ( Range range : bsMetadata . ranges _ ) 
 + dos . writeInt ( bsMetadata . ranges _ . size ( ) ) ; 
 + for ( Range range : bsMetadata . ranges _ ) 
 { 
 Range . serializer ( ) . serialize ( range , dos ) ; 
 - } 
 + } 
 } 
 
 public BootstrapMetadata deserialize ( DataInputStream dis ) throws IOException 
 diff - - git a / src / java / org / apache / cassandra / dht / BootstrapMetadataMessage . java b / src / java / org / apache / cassandra / dht / BootstrapMetadataMessage . java 
 index 341d72e . . a786cab 100644 
 - - - a / src / java / org / apache / cassandra / dht / BootstrapMetadataMessage . java 
 + + + b / src / java / org / apache / cassandra / dht / BootstrapMetadataMessage . java 
 @ @ - 60 , 6 + 60 , 7 @ @ class BootstrapMetadataMessage 
 
 BootstrapMetadataMessage ( BootstrapMetadata [ ] bsMetadata ) 
 { 
 + assert bsMetadata ! = null ; 
 bsMetadata _ = bsMetadata ; 
 } 
 } 
 @ @ - 69 , 9 + 70 , 8 @ @ class BootstrapMetadataMessageSerializer implements ICompactSerializer < Bootstrap 
 public void serialize ( BootstrapMetadataMessage bsMetadataMessage , DataOutputStream dos ) throws IOException 
 { 
 BootstrapMetadata [ ] bsMetadata = bsMetadataMessage . bsMetadata _ ; 
 - int size = ( bsMetadata = = null ) ? 0 : bsMetadata . length ; 
 - dos . writeInt ( size ) ; 
 - for ( BootstrapMetadata bsmd : bsMetadata ) 
 + dos . writeInt ( bsMetadata . length ) ; 
 + for ( BootstrapMetadata bsmd : bsMetadata ) 
 { 
 BootstrapMetadata . serializer ( ) . serialize ( bsmd , dos ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / ConsistencyManager . java b / src / java / org / apache / cassandra / service / ConsistencyManager . java 
 index 94f9d3d . . 69c3296 100644 
 - - - a / src / java / org / apache / cassandra / service / ConsistencyManager . java 
 + + + b / src / java / org / apache / cassandra / service / ConsistencyManager . java 
 @ @ - 98 , 7 + 98 , 7 @ @ class ConsistencyManager implements Runnable 
 	 	 } 
 	 } 
 	 
 - 	 class DataRepairHandler implements IAsyncCallback , ICacheExpungeHook < String , String > 
 + 	 static class DataRepairHandler implements IAsyncCallback , ICacheExpungeHook < String , String > 
 	 { 
 	 	 private List < Message > responses _ = new ArrayList < Message > ( ) ; 
 	 	 private IResponseResolver < Row > readResponseResolver _ ; 
 diff - - git a / src / java / org / apache / cassandra / tools / MembershipCleaner . java b / src / java / org / apache / cassandra / tools / MembershipCleaner . java 
 index 28775f8 . . 71db3ee 100644 
 - - - a / src / java / org / apache / cassandra / tools / MembershipCleaner . java 
 + + + b / src / java / org / apache / cassandra / tools / MembershipCleaner . java 
 @ @ - 44 , 7 + 44 , 7 @ @ public class MembershipCleaner 
 { 
 if ( args . length ! = 3 ) 
 { 
 - System . out . println ( " Usage : java com . facebook . infrastructure . tools . MembershipCleaner " + 
 + System . out . println ( " Usage : java org . apache . cassandra . tools . MembershipCleaner " + 
 " < ip : port to send the message > " + 
 " < node which needs to be removed > " + 
 " < file containing all nodes in the cluster > " ) ; 
 @ @ - 82 , 7 + 82 , 6 @ @ public class MembershipCleaner 
 public static class MembershipCleanerMessage implements Serializable 
 { 
 private static ICompactSerializer < MembershipCleanerMessage > serializer _ ; 
 - private static AtomicInteger idGen _ = new AtomicInteger ( 0 ) ; 
 
 static 
 { 
 diff - - git a / src / java / org / apache / cassandra / tools / MembershipCleanerVerbHandler . java b / src / java / org / apache / cassandra / tools / MembershipCleanerVerbHandler . java 
 index b34db74 . . 610b5e8 100644 
 - - - a / src / java / org / apache / cassandra / tools / MembershipCleanerVerbHandler . java 
 + + + b / src / java / org / apache / cassandra / tools / MembershipCleanerVerbHandler . java 
 @ @ - 69 , 7 + 69 , 7 @ @ public class MembershipCleanerVerbHandler implements IVerbHandler 
 { 
 if ( logger _ . isDebugEnabled ( ) ) 
 logger _ . debug ( " Processing node " + node ) ; 
 - byte [ ] bytes = headers . remove ( node ) ; 
 + headers . remove ( node ) ; 
 / * Send a message to this node to alter its membership state . * / 
 EndPoint targetNode = new EndPoint ( node , DatabaseDescriptor . getStoragePort ( ) ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / utils / FileUtils . java b / src / java / org / apache / cassandra / utils / FileUtils . java 
 index a29f2a8 . . 3110d04 100644 
 - - - a / src / java / org / apache / cassandra / utils / FileUtils . java 
 + + + b / src / java / org / apache / cassandra / utils / FileUtils . java 
 @ @ - 88 , 13 + 88 , 6 @ @ public class FileUtils 
 { 
 return ( int ) ( f . lastModified ( ) - f2 . lastModified ( ) ) ; 
 } 
 - 
 - public boolean equals ( Object o ) 
 - { 
 - if ( ! ( o instanceof FileComparator ) ) 
 - return false ; 
 - return true ; 
 - } 
 } 
 
 public static void createDirectory ( String directory ) throws IOException
