BLEU SCORE: 0.05341087579952926

TEST MSG: Follow up fixes for 13789
GENERATED MSG: Update reserved keyword list

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / transport / CBUtil . java b / src / java / org / apache / cassandra / transport / CBUtil . java <nl> index d5d733c . . 52217a9 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / CBUtil . java <nl> + + + b / src / java / org / apache / cassandra / transport / CBUtil . java <nl> @ @ - 140 , 7 + 140 , 7 @ @ public abstract class CBUtil <nl> public static void writeString ( String str , ByteBuf cb ) <nl> { <nl> int writerIndex = cb . writerIndex ( ) ; <nl> - cb . writerIndex ( writerIndex + 2 ) ; <nl> + cb . writeShort ( 0 ) ; <nl> int written = ByteBufUtil . writeUtf8 ( cb , str ) ; <nl> cb . setShort ( writerIndex , written ) ; <nl> } <nl> @ @ - 166 , 7 + 166 , 7 @ @ public abstract class CBUtil <nl> public static void writeLongString ( String str , ByteBuf cb ) <nl> { <nl> int writerIndex = cb . writerIndex ( ) ; <nl> - cb . writerIndex ( writerIndex + 4 ) ; <nl> + cb . writeInt ( 0 ) ; <nl> int written = ByteBufUtil . writeUtf8 ( cb , str ) ; <nl> cb . setInt ( writerIndex , written ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / transport / CBUtilTest . java b / test / unit / org / apache / cassandra / transport / CBUtilTest . java <nl> new file mode 100644 <nl> index 0000000 . . e65fdb2 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / transport / CBUtilTest . java <nl> @ @ - 0 , 0 + 1 , 68 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . transport ; <nl> + <nl> + import org . junit . After ; <nl> + import org . junit . Assert ; <nl> + import org . junit . Test ; <nl> + <nl> + import io . netty . buffer . ByteBuf ; <nl> + import io . netty . buffer . ByteBufAllocator ; <nl> + import io . netty . buffer . PooledByteBufAllocator ; <nl> + <nl> + public class CBUtilTest <nl> + { <nl> + private static final ByteBufAllocator allocator = PooledByteBufAllocator . DEFAULT ; <nl> + private ByteBuf buf ; <nl> + <nl> + @ After <nl> + public void tearDown ( ) <nl> + { <nl> + if ( buf ! = null & & buf . refCnt ( ) > 0 ) <nl> + buf . release ( buf . refCnt ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void writeAndReadString ( ) <nl> + { <nl> + final String text = " if you ' re happy and you know it , write your tests " ; <nl> + int size = CBUtil . sizeOfString ( text ) ; <nl> + <nl> + buf = allocator . heapBuffer ( size ) ; <nl> + CBUtil . writeString ( text , buf ) ; <nl> + Assert . assertEquals ( size , buf . writerIndex ( ) ) ; <nl> + Assert . assertEquals ( 0 , buf . readerIndex ( ) ) ; <nl> + Assert . assertEquals ( text , CBUtil . readString ( buf ) ) ; <nl> + Assert . assertEquals ( buf . writerIndex ( ) , buf . readerIndex ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void writeAndReadLongString ( ) <nl> + { <nl> + final String text = " if you ' re happy and you know it , write your tests " ; <nl> + int size = CBUtil . sizeOfLongString ( text ) ; <nl> + <nl> + buf = allocator . heapBuffer ( size ) ; <nl> + CBUtil . writeLongString ( text , buf ) ; <nl> + Assert . assertEquals ( size , buf . writerIndex ( ) ) ; <nl> + Assert . assertEquals ( 0 , buf . readerIndex ( ) ) ; <nl> + Assert . assertEquals ( text , CBUtil . readLongString ( buf ) ) ; <nl> + Assert . assertEquals ( buf . writerIndex ( ) , buf . readerIndex ( ) ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / transport / CBUtil . java b / src / java / org / apache / cassandra / transport / CBUtil . java 
 index d5d733c . . 52217a9 100644 
 - - - a / src / java / org / apache / cassandra / transport / CBUtil . java 
 + + + b / src / java / org / apache / cassandra / transport / CBUtil . java 
 @ @ - 140 , 7 + 140 , 7 @ @ public abstract class CBUtil 
 public static void writeString ( String str , ByteBuf cb ) 
 { 
 int writerIndex = cb . writerIndex ( ) ; 
 - cb . writerIndex ( writerIndex + 2 ) ; 
 + cb . writeShort ( 0 ) ; 
 int written = ByteBufUtil . writeUtf8 ( cb , str ) ; 
 cb . setShort ( writerIndex , written ) ; 
 } 
 @ @ - 166 , 7 + 166 , 7 @ @ public abstract class CBUtil 
 public static void writeLongString ( String str , ByteBuf cb ) 
 { 
 int writerIndex = cb . writerIndex ( ) ; 
 - cb . writerIndex ( writerIndex + 4 ) ; 
 + cb . writeInt ( 0 ) ; 
 int written = ByteBufUtil . writeUtf8 ( cb , str ) ; 
 cb . setInt ( writerIndex , written ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / transport / CBUtilTest . java b / test / unit / org / apache / cassandra / transport / CBUtilTest . java 
 new file mode 100644 
 index 0000000 . . e65fdb2 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / transport / CBUtilTest . java 
 @ @ - 0 , 0 + 1 , 68 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . transport ; 
 + 
 + import org . junit . After ; 
 + import org . junit . Assert ; 
 + import org . junit . Test ; 
 + 
 + import io . netty . buffer . ByteBuf ; 
 + import io . netty . buffer . ByteBufAllocator ; 
 + import io . netty . buffer . PooledByteBufAllocator ; 
 + 
 + public class CBUtilTest 
 + { 
 + private static final ByteBufAllocator allocator = PooledByteBufAllocator . DEFAULT ; 
 + private ByteBuf buf ; 
 + 
 + @ After 
 + public void tearDown ( ) 
 + { 
 + if ( buf ! = null & & buf . refCnt ( ) > 0 ) 
 + buf . release ( buf . refCnt ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void writeAndReadString ( ) 
 + { 
 + final String text = " if you ' re happy and you know it , write your tests " ; 
 + int size = CBUtil . sizeOfString ( text ) ; 
 + 
 + buf = allocator . heapBuffer ( size ) ; 
 + CBUtil . writeString ( text , buf ) ; 
 + Assert . assertEquals ( size , buf . writerIndex ( ) ) ; 
 + Assert . assertEquals ( 0 , buf . readerIndex ( ) ) ; 
 + Assert . assertEquals ( text , CBUtil . readString ( buf ) ) ; 
 + Assert . assertEquals ( buf . writerIndex ( ) , buf . readerIndex ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void writeAndReadLongString ( ) 
 + { 
 + final String text = " if you ' re happy and you know it , write your tests " ; 
 + int size = CBUtil . sizeOfLongString ( text ) ; 
 + 
 + buf = allocator . heapBuffer ( size ) ; 
 + CBUtil . writeLongString ( text , buf ) ; 
 + Assert . assertEquals ( size , buf . writerIndex ( ) ) ; 
 + Assert . assertEquals ( 0 , buf . readerIndex ( ) ) ; 
 + Assert . assertEquals ( text , CBUtil . readLongString ( buf ) ) ; 
 + Assert . assertEquals ( buf . writerIndex ( ) , buf . readerIndex ( ) ) ; 
 + } 
 + }

NEAREST DIFF:
ELIMINATEDSENTENCE
