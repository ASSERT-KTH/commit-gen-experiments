BLEU SCORE: 0.007870921666513668

TEST MSG: Expose CFMetaData # isDense ( )
GENERATED MSG: allow periodic flushing on a per - CF basis for infrequently - updated CFs ( i . e . ,

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index fc8e8c3 . . e726957 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 452 , 7 + 452 , 7 @ @ public final class CFMetaData <nl> public CFMetaData populateIoCacheOnFlush ( boolean prop ) { populateIoCacheOnFlush = prop ; return this ; } <nl> public CFMetaData droppedColumns ( Map < ByteBuffer , Long > cols ) { droppedColumns = cols ; return this ; } <nl> public CFMetaData triggers ( Map < String , TriggerDefinition > prop ) { triggers = prop ; return this ; } <nl> - public CFMetaData setDense ( Boolean prop ) { isDense = prop ; return this ; } <nl> + public CFMetaData isDense ( Boolean prop ) { isDense = prop ; return this ; } <nl> <nl> public CFMetaData ( String keyspace , String name , ColumnFamilyType type , AbstractType < ? > comp , AbstractType < ? > subcc ) <nl> { <nl> @ @ - 605 , 7 + 605 , 7 @ @ public final class CFMetaData <nl> . populateIoCacheOnFlush ( oldCFMD . populateIoCacheOnFlush ) <nl> . droppedColumns ( new HashMap < > ( oldCFMD . droppedColumns ) ) <nl> . triggers ( new HashMap < > ( oldCFMD . triggers ) ) <nl> - . setDense ( oldCFMD . isDense ) <nl> + . isDense ( oldCFMD . isDense ) <nl> . rebuild ( ) ; <nl> } <nl> <nl> @ @ - 786 , 6 + 786 , 11 @ @ public final class CFMetaData <nl> return droppedColumns ; <nl> } <nl> <nl> + public Boolean getIsDense ( ) <nl> + { <nl> + return isDense ; <nl> + } <nl> + <nl> public boolean equals ( Object obj ) <nl> { <nl> if ( obj = = this ) <nl> @ @ - 1117 , 7 + 1122 , 7 @ @ public final class CFMetaData <nl> <nl> triggers = cfm . triggers ; <nl> <nl> - setDense ( cfm . isDense ) ; <nl> + isDense ( cfm . isDense ) ; <nl> <nl> rebuild ( ) ; <nl> logger . debug ( " application result is { } " , this ) ; <nl> @ @ - 1712 , 7 + 1717 , 7 @ @ public final class CFMetaData <nl> cfm . populateIoCacheOnFlush ( result . getBoolean ( " populate _ io _ cache _ on _ flush " ) ) ; <nl> <nl> if ( result . has ( " is _ dense " ) ) <nl> - cfm . setDense ( result . getBoolean ( " is _ dense " ) ) ; <nl> + cfm . isDense ( result . getBoolean ( " is _ dense " ) ) ; <nl> <nl> / * <nl> * The info previously hold by key _ aliases , column _ aliases and value _ alias is now stored in column _ metadata ( because 1 ) this <nl> @ @ - 1964 , 7 + 1969 , 7 @ @ public final class CFMetaData <nl> { <nl> List < ColumnDefinition > pkCols = nullInitializedList ( keyValidator . componentsCount ( ) ) ; <nl> if ( isDense = = null ) <nl> - setDense ( isDense ( comparator , column _ metadata . values ( ) ) ) ; <nl> + isDense ( calculateIsDense ( comparator , column _ metadata . values ( ) ) ) ; <nl> int nbCkCols = isDense <nl> ? comparator . componentsCount ( ) <nl> : comparator . componentsCount ( ) - ( hasCollection ( ) ? 2 : 1 ) ; <nl> @ @ - 2087 , 7 + 2092 , 7 @ @ public final class CFMetaData <nl> * information for table just created through thrift , nor for table prior to CASSANDRA - 7744 , so this <nl> * method does its best to infer whether the table is dense or not based on other elements . <nl> * / <nl> - private static boolean isDense ( AbstractType < ? > comparator , Collection < ColumnDefinition > defs ) <nl> + private static boolean calculateIsDense ( AbstractType < ? > comparator , Collection < ColumnDefinition > defs ) <nl> { <nl> / * <nl> * As said above , this method is only here because we need to deal with thrift upgrades . <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java <nl> index b7f43d3 . . efaf36d 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java <nl> @ @ - 158 , 7 + 158 , 7 @ @ public class CreateTableStatement extends SchemaAlteringStatement <nl> cfmd . defaultValidator ( defaultValidator ) <nl> . keyValidator ( keyValidator ) <nl> . columnMetadata ( getColumns ( ) ) <nl> - . setDense ( isDense ) ; <nl> + . isDense ( isDense ) ; <nl> <nl> cfmd . addColumnMetadataFromAliases ( keyAliases , keyValidator , ColumnDefinition . Type . PARTITION _ KEY ) ; <nl> cfmd . addColumnMetadataFromAliases ( columnAliases , comparator , ColumnDefinition . Type . CLUSTERING _ KEY ) ;
NEAREST DIFF (one line): diff - - git a / conf / storage - conf . xml b / conf / storage - conf . xml <nl> index 578e1a4 . . 0432d5a 100644 <nl> - - - a / conf / storage - conf . xml <nl> + + + b / conf / storage - conf . xml <nl> @ @ - 7 , 7 + 7 , 11 @ @ <nl> < ! - - Tables and ColumnFamilies - - > <nl> < Tables > <nl> < Table Name = " Table1 " > <nl> - < ColumnFamily ColumnSort = " Name " Name = " Standard1 " / > <nl> + < ! - - if FlushPeriodInMinutes is configured and positive , it will be <nl> + flushed to disk with that period whether it is dirty or not . <nl> + This is intended for lightly - used columnfamilies so that they <nl> + do not prevent commitlog segments from being purged . - - > <nl> + < ColumnFamily ColumnSort = " Name " Name = " Standard1 " FlushPeriodInMinutes = " 60 " / > <nl> < ColumnFamily ColumnSort = " Name " Name = " Standard2 " / > <nl> < ColumnFamily ColumnSort = " Time " Name = " StandardByTime1 " / > <nl> < ColumnFamily ColumnSort = " Time " Name = " StandardByTime2 " / > <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index 0e5e82e . . 60f9260 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 35 , 7 + 35 , 8 @ @ public class CFMetaData <nl> public String n _ columnKey ; <nl> public String n _ columnValue ; <nl> public String n _ columnTimestamp ; <nl> - <nl> + public int flushPeriodInMinutes = 0 ; / / flush interval , if < = 0 , no periodic flusher is scheduled <nl> + <nl> / / a quick and dirty pretty printer for describing the column family . . . <nl> public String pretty ( ) <nl> { <nl> @ @ - 49 , 6 + 50 , 7 @ @ public class CFMetaData <nl> <nl> desc + = " Column Family Type : " + columnType + " \ n " + <nl> " Columns Sorted By : " + indexProperty _ + " \ n " ; <nl> + desc + = " flush period : " + flushPeriodInMinutes + " minutes \ n " ; <nl> return desc ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index cd86b59 . . 7b05160 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 119 , 7 + 119 , 7 @ @ public class DatabaseDescriptor <nl> <nl> / / the path qualified config file ( storage - conf . xml ) name <nl> private static String configFileName _ ; <nl> - <nl> + <nl> static <nl> { <nl> try <nl> @ @ - 240 , 7 + 240 , 6 @ @ public class DatabaseDescriptor <nl> if ( doConsistencyCheck ! = null ) <nl> doConsistencyCheck _ = Boolean . parseBoolean ( doConsistencyCheck ) ; <nl> <nl> - <nl> / * read the size at which we should do column indexes * / <nl> String columnIndexSizeInKB = xmlUtils . getNodeValue ( " / Storage / ColumnIndexSizeInKB " ) ; <nl> if ( columnIndexSizeInKB = = null ) <nl> @ @ - 367 , 6 + 366 , 13 @ @ public class DatabaseDescriptor <nl> throw new ConfigurationException ( " invalid column sort value " + rawColumnIndexType ) ; <nl> } <nl> <nl> + / / see if flush period is set <nl> + String flushPeriodInMinutes = XMLUtils . getAttributeValue ( columnFamily , " FlushPeriodInMinutes " ) ; <nl> + int flushPeriod = 0 ; <nl> + if ( flushPeriodInMinutes ! = null ) <nl> + flushPeriod = Integer . parseInt ( flushPeriodInMinutes ) ; <nl> + <nl> + <nl> / / Parse out user - specified logical names for the various dimensions <nl> / / of a the column family from the config . <nl> String n _ superColumnMap = xmlUtils . getNodeValue ( xqlCF + " SuperColumnMap " ) ; <nl> @ @ - 413 , 7 + 419 , 8 @ @ public class DatabaseDescriptor <nl> cfMetaData . n _ superColumnKey = n _ superColumnKey ; <nl> cfMetaData . n _ superColumnMap = n _ superColumnMap ; <nl> } <nl> - <nl> + cfMetaData . flushPeriodInMinutes = flushPeriod ; <nl> + <nl> tableToCFMetaDataMap _ . get ( tName ) . put ( cName , cfMetaData ) ; <nl> } <nl> } <nl> @ @ - 609 , 6 + 616 , 15 @ @ public class DatabaseDescriptor <nl> return cfMetaData . columnType ; <nl> } <nl> <nl> + public static int getFlushPeriod ( String tableName , String columnFamilyName ) <nl> + { <nl> + CFMetaData cfMetaData = getCFMetaData ( tableName , columnFamilyName ) ; <nl> + <nl> + if ( cfMetaData = = null ) <nl> + return 0 ; <nl> + return cfMetaData . flushPeriodInMinutes ; <nl> + } <nl> + <nl> public static boolean isNameSortingEnabled ( String cfName ) <nl> { <nl> String table = getTables ( ) . get ( 0 ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index e2033ba . . 1f283b6 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 190 , 6 + 190 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> / / TODO this seems unnecessary - - each memtable flush checks to see if it needs to compact , too <nl> MinorCompactionManager . instance ( ) . submitPeriodicCompaction ( this ) ; <nl> + <nl> + / * submit periodic flusher if required * / <nl> + int flushPeriod = DatabaseDescriptor . getFlushPeriod ( table _ , columnFamily _ ) ; <nl> + if ( flushPeriod > 0 ) <nl> + PeriodicFlushManager . instance ( ) . submitPeriodicFlusher ( this , flushPeriod ) ; <nl> } <nl> <nl> List < String > getAllSSTablesOnDisk ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java <nl> index 964c18d . . ae926d8 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Memtable . java <nl> + + + b / src / java / org / apache / cassandra / db / Memtable . java <nl> @ @ - 207 , 6 + 207 , 9 @ @ public class Memtable implements Comparable < Memtable > <nl> * / <nl> public void forceflush ( ) <nl> { <nl> + if ( columnFamilies _ . isEmpty ( ) ) <nl> + return ; <nl> + <nl> try <nl> { <nl> enqueueFlush ( CommitLog . open ( table _ ) . getContext ( ) ) ; <nl> @ @ - 320 , 14 + 323 , 6 @ @ public class Memtable implements Comparable < Memtable > <nl> void flush ( CommitLog . CommitLogContext cLogCtx ) throws IOException <nl> { <nl> ColumnFamilyStore cfStore = Table . open ( table _ ) . getColumnFamilyStore ( cfName _ ) ; <nl> - if ( columnFamilies _ . size ( ) = = 0 ) <nl> - { <nl> - 	 / / This should be called even if size is 0 <nl> - 	 / / This is because we should try to delete the useless commitlogs <nl> - 	 / / even though there is nothing to flush in memtables for a given family like Hints etc . <nl> - cfStore . onMemtableFlush ( cLogCtx ) ; <nl> - return ; <nl> - } <nl> <nl> String directory = DatabaseDescriptor . getDataFileLocation ( ) ; <nl> String filename = cfStore . getTempFileName ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / PeriodicFlushManager . java b / src / java / org / apache / cassandra / db / PeriodicFlushManager . java <nl> new file mode 100644 <nl> index 0000000 . . 75a4dca <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / db / PeriodicFlushManager . java <nl> @ @ - 0 , 0 + 1 , 82 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . db ; <nl> + <nl> + import java . util . concurrent . ScheduledExecutorService ; <nl> + import java . util . concurrent . TimeUnit ; <nl> + import java . util . concurrent . locks . Lock ; <nl> + import java . util . concurrent . locks . ReentrantLock ; <nl> + <nl> + import org . apache . log4j . Logger ; <nl> + <nl> + import org . apache . cassandra . concurrent . * ; <nl> + import org . apache . cassandra . service . IComponentShutdown ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> + <nl> + / * * <nl> + * Background flusher that force - flushes a column family periodically . <nl> + * / <nl> + class PeriodicFlushManager implements IComponentShutdown <nl> + { <nl> + private static Logger logger _ = Logger . getLogger ( PeriodicFlushManager . class ) ; <nl> + private static PeriodicFlushManager instance _ ; <nl> + private static Lock lock _ = new ReentrantLock ( ) ; <nl> + private ScheduledExecutorService flusher _ = new DebuggableScheduledThreadPoolExecutor ( 1 , new ThreadFactoryImpl ( " PERIODIC - FLUSHER - POOL " ) ) ; <nl> + <nl> + public static PeriodicFlushManager instance ( ) <nl> + { <nl> + if ( instance _ = = null ) <nl> + { <nl> + lock _ . lock ( ) ; <nl> + try <nl> + { <nl> + if ( instance _ = = null ) <nl> + instance _ = new PeriodicFlushManager ( ) ; <nl> + } <nl> + finally <nl> + { <nl> + lock _ . unlock ( ) ; <nl> + } <nl> + } <nl> + return instance _ ; <nl> + } <nl> + <nl> + public PeriodicFlushManager ( ) <nl> + { <nl> + StorageService . instance ( ) . registerComponentForShutdown ( this ) ; <nl> + } <nl> + <nl> + public void shutdown ( ) <nl> + { <nl> + flusher _ . shutdownNow ( ) ; <nl> + } <nl> + <nl> + public void submitPeriodicFlusher ( final ColumnFamilyStore columnFamilyStore , int flushPeriodInMinutes ) <nl> + { <nl> + Runnable runnable = new Runnable ( ) <nl> + { <nl> + public void run ( ) <nl> + { <nl> + columnFamilyStore . forceFlush ( ) ; <nl> + } <nl> + } ; <nl> + logger _ . info ( " start periodic flush daemon every " + flushPeriodInMinutes + " minutes for " + columnFamilyStore . columnFamily _ ) ; <nl> + flusher _ . scheduleWithFixedDelay ( runnable , flushPeriodInMinutes , flushPeriodInMinutes , TimeUnit . MINUTES ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index fc8e8c3 . . e726957 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 452 , 7 + 452 , 7 @ @ public final class CFMetaData 
 public CFMetaData populateIoCacheOnFlush ( boolean prop ) { populateIoCacheOnFlush = prop ; return this ; } 
 public CFMetaData droppedColumns ( Map < ByteBuffer , Long > cols ) { droppedColumns = cols ; return this ; } 
 public CFMetaData triggers ( Map < String , TriggerDefinition > prop ) { triggers = prop ; return this ; } 
 - public CFMetaData setDense ( Boolean prop ) { isDense = prop ; return this ; } 
 + public CFMetaData isDense ( Boolean prop ) { isDense = prop ; return this ; } 
 
 public CFMetaData ( String keyspace , String name , ColumnFamilyType type , AbstractType < ? > comp , AbstractType < ? > subcc ) 
 { 
 @ @ - 605 , 7 + 605 , 7 @ @ public final class CFMetaData 
 . populateIoCacheOnFlush ( oldCFMD . populateIoCacheOnFlush ) 
 . droppedColumns ( new HashMap < > ( oldCFMD . droppedColumns ) ) 
 . triggers ( new HashMap < > ( oldCFMD . triggers ) ) 
 - . setDense ( oldCFMD . isDense ) 
 + . isDense ( oldCFMD . isDense ) 
 . rebuild ( ) ; 
 } 
 
 @ @ - 786 , 6 + 786 , 11 @ @ public final class CFMetaData 
 return droppedColumns ; 
 } 
 
 + public Boolean getIsDense ( ) 
 + { 
 + return isDense ; 
 + } 
 + 
 public boolean equals ( Object obj ) 
 { 
 if ( obj = = this ) 
 @ @ - 1117 , 7 + 1122 , 7 @ @ public final class CFMetaData 
 
 triggers = cfm . triggers ; 
 
 - setDense ( cfm . isDense ) ; 
 + isDense ( cfm . isDense ) ; 
 
 rebuild ( ) ; 
 logger . debug ( " application result is { } " , this ) ; 
 @ @ - 1712 , 7 + 1717 , 7 @ @ public final class CFMetaData 
 cfm . populateIoCacheOnFlush ( result . getBoolean ( " populate _ io _ cache _ on _ flush " ) ) ; 
 
 if ( result . has ( " is _ dense " ) ) 
 - cfm . setDense ( result . getBoolean ( " is _ dense " ) ) ; 
 + cfm . isDense ( result . getBoolean ( " is _ dense " ) ) ; 
 
 / * 
 * The info previously hold by key _ aliases , column _ aliases and value _ alias is now stored in column _ metadata ( because 1 ) this 
 @ @ - 1964 , 7 + 1969 , 7 @ @ public final class CFMetaData 
 { 
 List < ColumnDefinition > pkCols = nullInitializedList ( keyValidator . componentsCount ( ) ) ; 
 if ( isDense = = null ) 
 - setDense ( isDense ( comparator , column _ metadata . values ( ) ) ) ; 
 + isDense ( calculateIsDense ( comparator , column _ metadata . values ( ) ) ) ; 
 int nbCkCols = isDense 
 ? comparator . componentsCount ( ) 
 : comparator . componentsCount ( ) - ( hasCollection ( ) ? 2 : 1 ) ; 
 @ @ - 2087 , 7 + 2092 , 7 @ @ public final class CFMetaData 
 * information for table just created through thrift , nor for table prior to CASSANDRA - 7744 , so this 
 * method does its best to infer whether the table is dense or not based on other elements . 
 * / 
 - private static boolean isDense ( AbstractType < ? > comparator , Collection < ColumnDefinition > defs ) 
 + private static boolean calculateIsDense ( AbstractType < ? > comparator , Collection < ColumnDefinition > defs ) 
 { 
 / * 
 * As said above , this method is only here because we need to deal with thrift upgrades . 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java 
 index b7f43d3 . . efaf36d 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java 
 @ @ - 158 , 7 + 158 , 7 @ @ public class CreateTableStatement extends SchemaAlteringStatement 
 cfmd . defaultValidator ( defaultValidator ) 
 . keyValidator ( keyValidator ) 
 . columnMetadata ( getColumns ( ) ) 
 - . setDense ( isDense ) ; 
 + . isDense ( isDense ) ; 
 
 cfmd . addColumnMetadataFromAliases ( keyAliases , keyValidator , ColumnDefinition . Type . PARTITION _ KEY ) ; 
 cfmd . addColumnMetadataFromAliases ( columnAliases , comparator , ColumnDefinition . Type . CLUSTERING _ KEY ) ;

NEAREST DIFF:
diff - - git a / conf / storage - conf . xml b / conf / storage - conf . xml 
 index 578e1a4 . . 0432d5a 100644 
 - - - a / conf / storage - conf . xml 
 + + + b / conf / storage - conf . xml 
 @ @ - 7 , 7 + 7 , 11 @ @ 
 < ! - - Tables and ColumnFamilies - - > 
 < Tables > 
 < Table Name = " Table1 " > 
 - < ColumnFamily ColumnSort = " Name " Name = " Standard1 " / > 
 + < ! - - if FlushPeriodInMinutes is configured and positive , it will be 
 + flushed to disk with that period whether it is dirty or not . 
 + This is intended for lightly - used columnfamilies so that they 
 + do not prevent commitlog segments from being purged . - - > 
 + < ColumnFamily ColumnSort = " Name " Name = " Standard1 " FlushPeriodInMinutes = " 60 " / > 
 < ColumnFamily ColumnSort = " Name " Name = " Standard2 " / > 
 < ColumnFamily ColumnSort = " Time " Name = " StandardByTime1 " / > 
 < ColumnFamily ColumnSort = " Time " Name = " StandardByTime2 " / > 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index 0e5e82e . . 60f9260 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 35 , 7 + 35 , 8 @ @ public class CFMetaData 
 public String n _ columnKey ; 
 public String n _ columnValue ; 
 public String n _ columnTimestamp ; 
 - 
 + public int flushPeriodInMinutes = 0 ; / / flush interval , if < = 0 , no periodic flusher is scheduled 
 + 
 / / a quick and dirty pretty printer for describing the column family . . . 
 public String pretty ( ) 
 { 
 @ @ - 49 , 6 + 50 , 7 @ @ public class CFMetaData 
 
 desc + = " Column Family Type : " + columnType + " \ n " + 
 " Columns Sorted By : " + indexProperty _ + " \ n " ; 
 + desc + = " flush period : " + flushPeriodInMinutes + " minutes \ n " ; 
 return desc ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index cd86b59 . . 7b05160 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 119 , 7 + 119 , 7 @ @ public class DatabaseDescriptor 
 
 / / the path qualified config file ( storage - conf . xml ) name 
 private static String configFileName _ ; 
 - 
 + 
 static 
 { 
 try 
 @ @ - 240 , 7 + 240 , 6 @ @ public class DatabaseDescriptor 
 if ( doConsistencyCheck ! = null ) 
 doConsistencyCheck _ = Boolean . parseBoolean ( doConsistencyCheck ) ; 
 
 - 
 / * read the size at which we should do column indexes * / 
 String columnIndexSizeInKB = xmlUtils . getNodeValue ( " / Storage / ColumnIndexSizeInKB " ) ; 
 if ( columnIndexSizeInKB = = null ) 
 @ @ - 367 , 6 + 366 , 13 @ @ public class DatabaseDescriptor 
 throw new ConfigurationException ( " invalid column sort value " + rawColumnIndexType ) ; 
 } 
 
 + / / see if flush period is set 
 + String flushPeriodInMinutes = XMLUtils . getAttributeValue ( columnFamily , " FlushPeriodInMinutes " ) ; 
 + int flushPeriod = 0 ; 
 + if ( flushPeriodInMinutes ! = null ) 
 + flushPeriod = Integer . parseInt ( flushPeriodInMinutes ) ; 
 + 
 + 
 / / Parse out user - specified logical names for the various dimensions 
 / / of a the column family from the config . 
 String n _ superColumnMap = xmlUtils . getNodeValue ( xqlCF + " SuperColumnMap " ) ; 
 @ @ - 413 , 7 + 419 , 8 @ @ public class DatabaseDescriptor 
 cfMetaData . n _ superColumnKey = n _ superColumnKey ; 
 cfMetaData . n _ superColumnMap = n _ superColumnMap ; 
 } 
 - 
 + cfMetaData . flushPeriodInMinutes = flushPeriod ; 
 + 
 tableToCFMetaDataMap _ . get ( tName ) . put ( cName , cfMetaData ) ; 
 } 
 } 
 @ @ - 609 , 6 + 616 , 15 @ @ public class DatabaseDescriptor 
 return cfMetaData . columnType ; 
 } 
 
 + public static int getFlushPeriod ( String tableName , String columnFamilyName ) 
 + { 
 + CFMetaData cfMetaData = getCFMetaData ( tableName , columnFamilyName ) ; 
 + 
 + if ( cfMetaData = = null ) 
 + return 0 ; 
 + return cfMetaData . flushPeriodInMinutes ; 
 + } 
 + 
 public static boolean isNameSortingEnabled ( String cfName ) 
 { 
 String table = getTables ( ) . get ( 0 ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index e2033ba . . 1f283b6 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 190 , 6 + 190 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 / / TODO this seems unnecessary - - each memtable flush checks to see if it needs to compact , too 
 MinorCompactionManager . instance ( ) . submitPeriodicCompaction ( this ) ; 
 + 
 + / * submit periodic flusher if required * / 
 + int flushPeriod = DatabaseDescriptor . getFlushPeriod ( table _ , columnFamily _ ) ; 
 + if ( flushPeriod > 0 ) 
 + PeriodicFlushManager . instance ( ) . submitPeriodicFlusher ( this , flushPeriod ) ; 
 } 
 
 List < String > getAllSSTablesOnDisk ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java 
 index 964c18d . . ae926d8 100644 
 - - - a / src / java / org / apache / cassandra / db / Memtable . java 
 + + + b / src / java / org / apache / cassandra / db / Memtable . java 
 @ @ - 207 , 6 + 207 , 9 @ @ public class Memtable implements Comparable < Memtable > 
 * / 
 public void forceflush ( ) 
 { 
 + if ( columnFamilies _ . isEmpty ( ) ) 
 + return ; 
 + 
 try 
 { 
 enqueueFlush ( CommitLog . open ( table _ ) . getContext ( ) ) ; 
 @ @ - 320 , 14 + 323 , 6 @ @ public class Memtable implements Comparable < Memtable > 
 void flush ( CommitLog . CommitLogContext cLogCtx ) throws IOException 
 { 
 ColumnFamilyStore cfStore = Table . open ( table _ ) . getColumnFamilyStore ( cfName _ ) ; 
 - if ( columnFamilies _ . size ( ) = = 0 ) 
 - { 
 - 	 / / This should be called even if size is 0 
 - 	 / / This is because we should try to delete the useless commitlogs 
 - 	 / / even though there is nothing to flush in memtables for a given family like Hints etc . 
 - cfStore . onMemtableFlush ( cLogCtx ) ; 
 - return ; 
 - } 
 
 String directory = DatabaseDescriptor . getDataFileLocation ( ) ; 
 String filename = cfStore . getTempFileName ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / PeriodicFlushManager . java b / src / java / org / apache / cassandra / db / PeriodicFlushManager . java 
 new file mode 100644 
 index 0000000 . . 75a4dca 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / db / PeriodicFlushManager . java 
 @ @ - 0 , 0 + 1 , 82 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . db ; 
 + 
 + import java . util . concurrent . ScheduledExecutorService ; 
 + import java . util . concurrent . TimeUnit ; 
 + import java . util . concurrent . locks . Lock ; 
 + import java . util . concurrent . locks . ReentrantLock ; 
 + 
 + import org . apache . log4j . Logger ; 
 + 
 + import org . apache . cassandra . concurrent . * ; 
 + import org . apache . cassandra . service . IComponentShutdown ; 
 + import org . apache . cassandra . service . StorageService ; 
 + 
 + / * * 
 + * Background flusher that force - flushes a column family periodically . 
 + * / 
 + class PeriodicFlushManager implements IComponentShutdown 
 + { 
 + private static Logger logger _ = Logger . getLogger ( PeriodicFlushManager . class ) ; 
 + private static PeriodicFlushManager instance _ ; 
 + private static Lock lock _ = new ReentrantLock ( ) ; 
 + private ScheduledExecutorService flusher _ = new DebuggableScheduledThreadPoolExecutor ( 1 , new ThreadFactoryImpl ( " PERIODIC - FLUSHER - POOL " ) ) ; 
 + 
 + public static PeriodicFlushManager instance ( ) 
 + { 
 + if ( instance _ = = null ) 
 + { 
 + lock _ . lock ( ) ; 
 + try 
 + { 
 + if ( instance _ = = null ) 
 + instance _ = new PeriodicFlushManager ( ) ; 
 + } 
 + finally 
 + { 
 + lock _ . unlock ( ) ; 
 + } 
 + } 
 + return instance _ ; 
 + } 
 + 
 + public PeriodicFlushManager ( ) 
 + { 
 + StorageService . instance ( ) . registerComponentForShutdown ( this ) ; 
 + } 
 + 
 + public void shutdown ( ) 
 + { 
 + flusher _ . shutdownNow ( ) ; 
 + } 
 + 
 + public void submitPeriodicFlusher ( final ColumnFamilyStore columnFamilyStore , int flushPeriodInMinutes ) 
 + { 
 + Runnable runnable = new Runnable ( ) 
 + { 
 + public void run ( ) 
 + { 
 + columnFamilyStore . forceFlush ( ) ; 
 + } 
 + } ; 
 + logger _ . info ( " start periodic flush daemon every " + flushPeriodInMinutes + " minutes for " + columnFamilyStore . columnFamily _ ) ; 
 + flusher _ . scheduleWithFixedDelay ( runnable , flushPeriodInMinutes , flushPeriodInMinutes , TimeUnit . MINUTES ) ; 
 + } 
 + }
