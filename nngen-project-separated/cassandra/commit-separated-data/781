BLEU SCORE: 0.02383853510228548

TEST MSG: Add basic testing support for the Cassandra Stress tool
GENERATED MSG: merge from 1 . 0

TEST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index 9603855 . . 1492d23 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 189 , 6 + 189 , 7 @ @ <nl> < mkdir dir = " $ { build . classes . thrift } " / > <nl> < mkdir dir = " $ { test . lib } " / > <nl> < mkdir dir = " $ { test . classes } " / > <nl> + < mkdir dir = " $ { stress . test . classes } " / > <nl> < mkdir dir = " $ { build . src . gen - java } " / > <nl> < mkdir dir = " $ { build . dir . lib } " / > <nl> < mkdir dir = " $ { jacoco . export . dir } " / > <nl> @ @ - 830 , 12 + 831 , 29 @ @ <nl> <nl> < ! - - Stress build file - - > <nl> < property name = " stress . build . src " value = " $ { basedir } / tools / stress / src " / > <nl> + < property name = " stress . test . src " value = " $ { basedir } / tools / stress / test / unit " / > <nl> < property name = " stress . build . classes " value = " $ { build . classes } / stress " / > <nl> + < property name = " stress . test . classes " value = " $ { build . dir } / test / stress - classes " / > <nl> 	 < property name = " stress . manifest " value = " $ { stress . build . classes } / MANIFEST . MF " / > <nl> < path id = " cassandra . classes " > <nl> < pathelement location = " $ { basedir } / build / classes / main " / > <nl> < pathelement location = " $ { basedir } / build / classes / thrift " / > <nl> < / path > <nl> + <nl> + < target name = " stress - build - test " depends = " stress - build " description = " Compile stress tests " > <nl> + < javac debug = " true " debuglevel = " $ { debuglevel } " destdir = " $ { stress . test . classes } " <nl> + includeantruntime = " false " <nl> + source = " $ { source . version } " <nl> + target = " $ { target . version } " <nl> + encoding = " utf - 8 " > <nl> + < classpath > <nl> + < path refid = " cassandra . classpath " / > <nl> + < pathelement location = " $ { stress . build . classes } " / > <nl> + < / classpath > <nl> + < src path = " $ { stress . test . src } " / > <nl> + < / javac > <nl> + < / target > <nl> + <nl> < target name = " stress - build " depends = " build " description = " build stress tool " > <nl> 	 < mkdir dir = " $ { stress . build . classes } " / > <nl> < javac compiler = " modern " debug = " true " debuglevel = " $ { debuglevel } " encoding = " utf - 8 " destdir = " $ { stress . build . classes } " includeantruntime = " true " source = " $ { source . version } " target = " $ { target . version } " > <nl> @ @ - 854 , 6 + 872 , 12 @ @ <nl> < / copy > <nl> < / target > <nl> <nl> + < target name = " stress - test " depends = " stress - build - test , build - test " description = " Runs stress tests " > <nl> + < testmacro inputdir = " $ { stress . test . src } " <nl> + timeout = " $ { test . timeout } " > <nl> + < / testmacro > <nl> + < / target > <nl> + <nl> 	 < target name = " _ write - poms " depends = " maven - declare - dependencies " > <nl> 	 < artifact : writepom pomRefId = " parent - pom " file = " $ { build . dir } / $ { final . name } - parent . pom " / > <nl> 	 < artifact : writepom pomRefId = " thrift - pom " <nl> @ @ - 1248 , 8 + 1272 , 10 @ @ <nl> 	 < optjvmargs / > <nl> < classpath > <nl> < pathelement path = " $ { java . class . path } " / > <nl> + < pathelement location = " $ { stress . build . classes } " / > <nl> < path refid = " cassandra . classpath " / > <nl> < pathelement location = " $ { test . classes } " / > <nl> + < pathelement location = " $ { stress . test . classes } " / > <nl> < pathelement location = " $ { test . conf } " / > <nl> < fileset dir = " $ { test . lib } " > <nl> < include name = " * * / * . jar " / > <nl> @ @ - 1551 , 7 + 1577 , 7 @ @ <nl> < / target > <nl> <nl> < target name = " test - all " <nl> - depends = " eclipse - warnings , test , long - test , test - compression , test - clientutil - jar " <nl> + depends = " eclipse - warnings , test , long - test , test - compression , test - clientutil - jar , stress - test " <nl> description = " Run all tests except for those under test - burn " / > <nl> <nl> < ! - - Use JaCoCo ant extension without needing externally saved lib - - > <nl> @ @ - 1824 , 6 + 1850 , 7 @ @ <nl> < classpathentry kind = " src " output = " build / test / classes " path = " test / long " / > <nl> < classpathentry kind = " src " output = " build / test / classes " path = " test / resources " / > <nl> < classpathentry kind = " src " path = " tools / stress / src " / > <nl> + < classpathentry kind = " src " output = " build / test / stress - classes " path = " tools / stress / test / unit " / > <nl> < classpathentry kind = " con " path = " org . eclipse . jdt . launching . JRE _ CONTAINER " / > <nl> < classpathentry kind = " output " path = " build / classes / main " / > <nl> < classpathentry kind = " lib " path = " build / classes / thrift " sourcepath = " interface / thrift / gen - java / " / > <nl> diff - - git a / ide / idea - iml - file . xml b / ide / idea - iml - file . xml <nl> index f14fe2e . . 3bb51b4 100644 <nl> - - - a / ide / idea - iml - file . xml <nl> + + + b / ide / idea - iml - file . xml <nl> @ @ - 28 , 6 + 28 , 7 @ @ <nl> < sourceFolder url = " file : / / $ MODULE _ DIR $ / src / resources " type = " java - resource " / > <nl> < sourceFolder url = " file : / / $ MODULE _ DIR $ / interface / thrift / gen - java " isTestSource = " false " / > <nl> < sourceFolder url = " file : / / $ MODULE _ DIR $ / tools / stress / src " isTestSource = " false " / > <nl> + < sourceFolder url = " file : / / $ MODULE _ DIR $ / tools / stress / test / unit " isTestSource = " true " / > <nl> < sourceFolder url = " file : / / $ MODULE _ DIR $ / test / unit " isTestSource = " true " / > <nl> < sourceFolder url = " file : / / $ MODULE _ DIR $ / test / long " isTestSource = " true " / > <nl> < sourceFolder url = " file : / / $ MODULE _ DIR $ / test / microbench " isTestSource = " true " / > <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsNode . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsNode . java <nl> index 89b7871 . . a081e55 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsNode . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsNode . java <nl> @ @ - 42 , 9 + 42 , 8 @ @ public class SettingsNode implements Serializable <nl> try <nl> { <nl> String node ; <nl> - List < String > tmpNodes = new ArrayList < String > ( ) ; <nl> - BufferedReader in = new BufferedReader ( new InputStreamReader ( new FileInputStream ( options . file . value ( ) ) ) ) ; <nl> - try <nl> + List < String > tmpNodes = new ArrayList < > ( ) ; <nl> + try ( BufferedReader in = new BufferedReader ( new InputStreamReader ( new FileInputStream ( options . file . value ( ) ) ) ) ) <nl> { <nl> while ( ( node = in . readLine ( ) ) ! = null ) <nl> { <nl> @ @ - 53 , 10 + 52 , 6 @ @ public class SettingsNode implements Serializable <nl> } <nl> nodes = Arrays . asList ( tmpNodes . toArray ( new String [ tmpNodes . size ( ) ] ) ) ; <nl> } <nl> - finally <nl> - { <nl> - in . close ( ) ; <nl> - } <nl> } <nl> catch ( IOException ioe ) <nl> { <nl> @ @ - 177 , 13 + 172 , 6 @ @ public class SettingsNode implements Serializable <nl> <nl> public static Runnable helpPrinter ( ) <nl> { <nl> - return new Runnable ( ) <nl> - { <nl> - @ Override <nl> - public void run ( ) <nl> - { <nl> - printHelp ( ) ; <nl> - } <nl> - } ; <nl> + return SettingsNode : : printHelp ; <nl> } <nl> } <nl> diff - - git a / tools / stress / test / unit / org / apache / cassandra / stress / settings / OptionReplicationTest . java b / tools / stress / test / unit / org / apache / cassandra / stress / settings / OptionReplicationTest . java <nl> new file mode 100644 <nl> index 0000000 . . 803ee18 <nl> - - - / dev / null <nl> + + + b / tools / stress / test / unit / org / apache / cassandra / stress / settings / OptionReplicationTest . java <nl> @ @ - 0 , 0 + 1 , 34 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . stress . settings ; <nl> + <nl> + import com . google . common . collect . ImmutableMap ; <nl> + import org . junit . Test ; <nl> + <nl> + import static org . junit . Assert . * ; <nl> + <nl> + public class OptionReplicationTest <nl> + { <nl> + @ Test <nl> + public void defaultsToReplicationFactorOfOne ( ) throws Exception <nl> + { <nl> + OptionReplication defaults = new OptionReplication ( ) ; <nl> + assertEquals ( ImmutableMap . of ( " replication _ factor " , " 1 " ) , defaults . getOptions ( ) ) ; <nl> + } <nl> + } <nl> diff - - git a / tools / stress / test / unit / org / apache / cassandra / stress / settings / SettingsNodeTest . java b / tools / stress / test / unit / org / apache / cassandra / stress / settings / SettingsNodeTest . java <nl> new file mode 100644 <nl> index 0000000 . . ce56d27 <nl> - - - / dev / null <nl> + + + b / tools / stress / test / unit / org / apache / cassandra / stress / settings / SettingsNodeTest . java <nl> @ @ - 0 , 0 + 1 , 42 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . stress . settings ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import static org . junit . Assert . * ; <nl> + <nl> + public class SettingsNodeTest <nl> + { <nl> + @ Test <nl> + public void testDefaults ( ) throws Exception <nl> + { <nl> + SettingsNode settingsNode = new SettingsNode ( new SettingsNode . Options ( ) ) ; <nl> + assertEquals ( null , settingsNode . datacenter ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testOveridingDataCenter ( ) throws Exception <nl> + { <nl> + SettingsNode . Options options = new SettingsNode . Options ( ) ; <nl> + options . accept ( " datacenter = dc1 " ) ; <nl> + SettingsNode settingsNode = new SettingsNode ( options ) ; <nl> + assertEquals ( " dc1 " , settingsNode . datacenter ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d518830 . . 52cc2c1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 29 , 7 + 29 , 7 @ @ <nl> * add scheduler JMX metrics ( CASSANDRA - 2962 ) <nl> * add block level checksum for compressed data ( CASSANDRA - 1717 ) <nl> * make column family backed column map pluggable and introduce unsynchronized <nl> - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) <nl> + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) <nl> * refactoring of the secondary index api ( CASSANDRA - 2982 ) <nl> * make CL > ONE reads wait for digest reconciliation before returning <nl> ( CASSANDRA - 2494 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> index c316a85 . . 71c7213 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor <nl> this . reversed = reversed ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public AbstractType < ? > getComparator ( ) <nl> { <nl> return comparator ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 1239d1c . . 38bc0d7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer <nl> this . cfm = cfm ; <nl> } <nl> <nl> - public ColumnFamily cloneMeShallow ( ) <nl> + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) <nl> { <nl> - ColumnFamily cf = ColumnFamily . create ( cfm ) ; <nl> + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; <nl> / / since deletion info is immutable , aliasing it is fine <nl> cf . deletionInfo . set ( deletionInfo . get ( ) ) ; <nl> return cf ; <nl> } <nl> <nl> + public ColumnFamily cloneMeShallow ( ) <nl> + { <nl> + return cloneMeShallow ( columns . getFactory ( ) ) ; <nl> + } <nl> + <nl> public AbstractType getSubComparator ( ) <nl> { <nl> IColumnSerializer s = getColumnSerializer ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 0bfd1c5 . . 552d3e9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> - * tombstones that are no longer relevant . * / <nl> + / * * <nl> + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> + * tombstones that are no longer relevant . <nl> + * The returned column family won ' t be thread safe . <nl> + * / <nl> ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) <nl> { <nl> / / special case slicing the entire row : <nl> @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; <nl> if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) <nl> { <nl> - ColumnFamily cf = cached . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> if ( sc ! = null ) <nl> cf . addColumn ( sc , HeapAllocator . instance ) ; <nl> return removeDeleted ( cf , gcBefore ) ; <nl> @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> <nl> IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; <nl> - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; <nl> / / TODO this is necessary because when we collate supercolumns together , we don ' t check <nl> / / their subcolumns for relevance , so we need to do a second prune post facto here . <nl> diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> index 37f5a60 . . 624dec7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns <nl> public ISortedColumns cloneMe ( ) ; <nl> <nl> / * * <nl> + * Returns the factory used for this ISortedColumns implementation . <nl> + * / <nl> + public Factory getFactory ( ) ; <nl> + <nl> + / * * <nl> * Adds a column to this column map . <nl> * If a column with the same name is already present in the map , it will <nl> * be replaced by the newly added column . <nl> diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> index cd2488a . . 13a111a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new ThreadSafeSortedColumns ( this ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> index 34e83dc . . 6c3fc42 100644 <nl> - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new TreeMapBackedSortedColumns ( this ) ;

TEST DIFF:
diff - - git a / build . xml b / build . xml 
 index 9603855 . . 1492d23 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 189 , 6 + 189 , 7 @ @ 
 < mkdir dir = " $ { build . classes . thrift } " / > 
 < mkdir dir = " $ { test . lib } " / > 
 < mkdir dir = " $ { test . classes } " / > 
 + < mkdir dir = " $ { stress . test . classes } " / > 
 < mkdir dir = " $ { build . src . gen - java } " / > 
 < mkdir dir = " $ { build . dir . lib } " / > 
 < mkdir dir = " $ { jacoco . export . dir } " / > 
 @ @ - 830 , 12 + 831 , 29 @ @ 
 
 < ! - - Stress build file - - > 
 < property name = " stress . build . src " value = " $ { basedir } / tools / stress / src " / > 
 + < property name = " stress . test . src " value = " $ { basedir } / tools / stress / test / unit " / > 
 < property name = " stress . build . classes " value = " $ { build . classes } / stress " / > 
 + < property name = " stress . test . classes " value = " $ { build . dir } / test / stress - classes " / > 
 	 < property name = " stress . manifest " value = " $ { stress . build . classes } / MANIFEST . MF " / > 
 < path id = " cassandra . classes " > 
 < pathelement location = " $ { basedir } / build / classes / main " / > 
 < pathelement location = " $ { basedir } / build / classes / thrift " / > 
 < / path > 
 + 
 + < target name = " stress - build - test " depends = " stress - build " description = " Compile stress tests " > 
 + < javac debug = " true " debuglevel = " $ { debuglevel } " destdir = " $ { stress . test . classes } " 
 + includeantruntime = " false " 
 + source = " $ { source . version } " 
 + target = " $ { target . version } " 
 + encoding = " utf - 8 " > 
 + < classpath > 
 + < path refid = " cassandra . classpath " / > 
 + < pathelement location = " $ { stress . build . classes } " / > 
 + < / classpath > 
 + < src path = " $ { stress . test . src } " / > 
 + < / javac > 
 + < / target > 
 + 
 < target name = " stress - build " depends = " build " description = " build stress tool " > 
 	 < mkdir dir = " $ { stress . build . classes } " / > 
 < javac compiler = " modern " debug = " true " debuglevel = " $ { debuglevel } " encoding = " utf - 8 " destdir = " $ { stress . build . classes } " includeantruntime = " true " source = " $ { source . version } " target = " $ { target . version } " > 
 @ @ - 854 , 6 + 872 , 12 @ @ 
 < / copy > 
 < / target > 
 
 + < target name = " stress - test " depends = " stress - build - test , build - test " description = " Runs stress tests " > 
 + < testmacro inputdir = " $ { stress . test . src } " 
 + timeout = " $ { test . timeout } " > 
 + < / testmacro > 
 + < / target > 
 + 
 	 < target name = " _ write - poms " depends = " maven - declare - dependencies " > 
 	 < artifact : writepom pomRefId = " parent - pom " file = " $ { build . dir } / $ { final . name } - parent . pom " / > 
 	 < artifact : writepom pomRefId = " thrift - pom " 
 @ @ - 1248 , 8 + 1272 , 10 @ @ 
 	 < optjvmargs / > 
 < classpath > 
 < pathelement path = " $ { java . class . path } " / > 
 + < pathelement location = " $ { stress . build . classes } " / > 
 < path refid = " cassandra . classpath " / > 
 < pathelement location = " $ { test . classes } " / > 
 + < pathelement location = " $ { stress . test . classes } " / > 
 < pathelement location = " $ { test . conf } " / > 
 < fileset dir = " $ { test . lib } " > 
 < include name = " * * / * . jar " / > 
 @ @ - 1551 , 7 + 1577 , 7 @ @ 
 < / target > 
 
 < target name = " test - all " 
 - depends = " eclipse - warnings , test , long - test , test - compression , test - clientutil - jar " 
 + depends = " eclipse - warnings , test , long - test , test - compression , test - clientutil - jar , stress - test " 
 description = " Run all tests except for those under test - burn " / > 
 
 < ! - - Use JaCoCo ant extension without needing externally saved lib - - > 
 @ @ - 1824 , 6 + 1850 , 7 @ @ 
 < classpathentry kind = " src " output = " build / test / classes " path = " test / long " / > 
 < classpathentry kind = " src " output = " build / test / classes " path = " test / resources " / > 
 < classpathentry kind = " src " path = " tools / stress / src " / > 
 + < classpathentry kind = " src " output = " build / test / stress - classes " path = " tools / stress / test / unit " / > 
 < classpathentry kind = " con " path = " org . eclipse . jdt . launching . JRE _ CONTAINER " / > 
 < classpathentry kind = " output " path = " build / classes / main " / > 
 < classpathentry kind = " lib " path = " build / classes / thrift " sourcepath = " interface / thrift / gen - java / " / > 
 diff - - git a / ide / idea - iml - file . xml b / ide / idea - iml - file . xml 
 index f14fe2e . . 3bb51b4 100644 
 - - - a / ide / idea - iml - file . xml 
 + + + b / ide / idea - iml - file . xml 
 @ @ - 28 , 6 + 28 , 7 @ @ 
 < sourceFolder url = " file : / / $ MODULE _ DIR $ / src / resources " type = " java - resource " / > 
 < sourceFolder url = " file : / / $ MODULE _ DIR $ / interface / thrift / gen - java " isTestSource = " false " / > 
 < sourceFolder url = " file : / / $ MODULE _ DIR $ / tools / stress / src " isTestSource = " false " / > 
 + < sourceFolder url = " file : / / $ MODULE _ DIR $ / tools / stress / test / unit " isTestSource = " true " / > 
 < sourceFolder url = " file : / / $ MODULE _ DIR $ / test / unit " isTestSource = " true " / > 
 < sourceFolder url = " file : / / $ MODULE _ DIR $ / test / long " isTestSource = " true " / > 
 < sourceFolder url = " file : / / $ MODULE _ DIR $ / test / microbench " isTestSource = " true " / > 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsNode . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsNode . java 
 index 89b7871 . . a081e55 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsNode . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsNode . java 
 @ @ - 42 , 9 + 42 , 8 @ @ public class SettingsNode implements Serializable 
 try 
 { 
 String node ; 
 - List < String > tmpNodes = new ArrayList < String > ( ) ; 
 - BufferedReader in = new BufferedReader ( new InputStreamReader ( new FileInputStream ( options . file . value ( ) ) ) ) ; 
 - try 
 + List < String > tmpNodes = new ArrayList < > ( ) ; 
 + try ( BufferedReader in = new BufferedReader ( new InputStreamReader ( new FileInputStream ( options . file . value ( ) ) ) ) ) 
 { 
 while ( ( node = in . readLine ( ) ) ! = null ) 
 { 
 @ @ - 53 , 10 + 52 , 6 @ @ public class SettingsNode implements Serializable 
 } 
 nodes = Arrays . asList ( tmpNodes . toArray ( new String [ tmpNodes . size ( ) ] ) ) ; 
 } 
 - finally 
 - { 
 - in . close ( ) ; 
 - } 
 } 
 catch ( IOException ioe ) 
 { 
 @ @ - 177 , 13 + 172 , 6 @ @ public class SettingsNode implements Serializable 
 
 public static Runnable helpPrinter ( ) 
 { 
 - return new Runnable ( ) 
 - { 
 - @ Override 
 - public void run ( ) 
 - { 
 - printHelp ( ) ; 
 - } 
 - } ; 
 + return SettingsNode : : printHelp ; 
 } 
 } 
 diff - - git a / tools / stress / test / unit / org / apache / cassandra / stress / settings / OptionReplicationTest . java b / tools / stress / test / unit / org / apache / cassandra / stress / settings / OptionReplicationTest . java 
 new file mode 100644 
 index 0000000 . . 803ee18 
 - - - / dev / null 
 + + + b / tools / stress / test / unit / org / apache / cassandra / stress / settings / OptionReplicationTest . java 
 @ @ - 0 , 0 + 1 , 34 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . stress . settings ; 
 + 
 + import com . google . common . collect . ImmutableMap ; 
 + import org . junit . Test ; 
 + 
 + import static org . junit . Assert . * ; 
 + 
 + public class OptionReplicationTest 
 + { 
 + @ Test 
 + public void defaultsToReplicationFactorOfOne ( ) throws Exception 
 + { 
 + OptionReplication defaults = new OptionReplication ( ) ; 
 + assertEquals ( ImmutableMap . of ( " replication _ factor " , " 1 " ) , defaults . getOptions ( ) ) ; 
 + } 
 + } 
 diff - - git a / tools / stress / test / unit / org / apache / cassandra / stress / settings / SettingsNodeTest . java b / tools / stress / test / unit / org / apache / cassandra / stress / settings / SettingsNodeTest . java 
 new file mode 100644 
 index 0000000 . . ce56d27 
 - - - / dev / null 
 + + + b / tools / stress / test / unit / org / apache / cassandra / stress / settings / SettingsNodeTest . java 
 @ @ - 0 , 0 + 1 , 42 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . stress . settings ; 
 + 
 + import org . junit . Test ; 
 + 
 + import static org . junit . Assert . * ; 
 + 
 + public class SettingsNodeTest 
 + { 
 + @ Test 
 + public void testDefaults ( ) throws Exception 
 + { 
 + SettingsNode settingsNode = new SettingsNode ( new SettingsNode . Options ( ) ) ; 
 + assertEquals ( null , settingsNode . datacenter ) ; 
 + } 
 + 
 + @ Test 
 + public void testOveridingDataCenter ( ) throws Exception 
 + { 
 + SettingsNode . Options options = new SettingsNode . Options ( ) ; 
 + options . accept ( " datacenter = dc1 " ) ; 
 + SettingsNode settingsNode = new SettingsNode ( options ) ; 
 + assertEquals ( " dc1 " , settingsNode . datacenter ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d518830 . . 52cc2c1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 29 , 7 + 29 , 7 @ @ 
 * add scheduler JMX metrics ( CASSANDRA - 2962 ) 
 * add block level checksum for compressed data ( CASSANDRA - 1717 ) 
 * make column family backed column map pluggable and introduce unsynchronized 
 - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) 
 + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) 
 * refactoring of the secondary index api ( CASSANDRA - 2982 ) 
 * make CL > ONE reads wait for digest reconciliation before returning 
 ( CASSANDRA - 2494 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 index c316a85 . . 71c7213 100644 
 - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor 
 this . reversed = reversed ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public AbstractType < ? > getComparator ( ) 
 { 
 return comparator ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 1239d1c . . 38bc0d7 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer 
 this . cfm = cfm ; 
 } 
 
 - public ColumnFamily cloneMeShallow ( ) 
 + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) 
 { 
 - ColumnFamily cf = ColumnFamily . create ( cfm ) ; 
 + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; 
 / / since deletion info is immutable , aliasing it is fine 
 cf . deletionInfo . set ( deletionInfo . get ( ) ) ; 
 return cf ; 
 } 
 
 + public ColumnFamily cloneMeShallow ( ) 
 + { 
 + return cloneMeShallow ( columns . getFactory ( ) ) ; 
 + } 
 + 
 public AbstractType getSubComparator ( ) 
 { 
 IColumnSerializer s = getColumnSerializer ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 0bfd1c5 . . 552d3e9 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 - * tombstones that are no longer relevant . * / 
 + / * * 
 + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 + * tombstones that are no longer relevant . 
 + * The returned column family won ' t be thread safe . 
 + * / 
 ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) 
 { 
 / / special case slicing the entire row : 
 @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; 
 if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) 
 { 
 - ColumnFamily cf = cached . cloneMeShallow ( ) ; 
 + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 if ( sc ! = null ) 
 cf . addColumn ( sc , HeapAllocator . instance ) ; 
 return removeDeleted ( cf , gcBefore ) ; 
 @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 
 IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; 
 - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; 
 + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; 
 / / TODO this is necessary because when we collate supercolumns together , we don ' t check 
 / / their subcolumns for relevance , so we need to do a second prune post facto here . 
 diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 index 37f5a60 . . 624dec7 100644 
 - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns 
 public ISortedColumns cloneMe ( ) ; 
 
 / * * 
 + * Returns the factory used for this ISortedColumns implementation . 
 + * / 
 + public Factory getFactory ( ) ; 
 + 
 + / * * 
 * Adds a column to this column map . 
 * If a column with the same name is already present in the map , it will 
 * be replaced by the newly added column . 
 diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 index cd2488a . . 13a111a 100644 
 - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new ThreadSafeSortedColumns ( this ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 index 34e83dc . . 6c3fc42 100644 
 - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new TreeMapBackedSortedColumns ( this ) ;
