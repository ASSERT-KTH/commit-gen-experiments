BLEU SCORE: 0.03217409328795944

TEST MSG: Allow unset values in CQLSSTableWriter
GENERATED MSG: stableloader will fail if there are collections in the schema tables

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 9486c53 . . f441f8b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 8 <nl> + * Allow unset values in CQLSSTableWriter ( CASSANDRA - 11911 ) <nl> * Chunk cache to request compressor - compatible buffers if pool space is exhausted ( CASSANDRA - 11993 ) <nl> * Remove DatabaseDescriptor dependencies from SequentialWriter ( CASSANDRA - 11579 ) <nl> * Move skip _ stop _ words filter before stemming ( CASSANDRA - 12078 ) <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java <nl> index 2d9e379 . . 76c0e19 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java <nl> @ @ - 101 , 6 + 101 , 8 @ @ import org . apache . cassandra . utils . Pair ; <nl> * / <nl> public class CQLSSTableWriter implements Closeable <nl> { <nl> + public static final ByteBuffer UNSET _ VALUE = ByteBufferUtil . UNSET _ BYTE _ BUFFER ; <nl> + <nl> static <nl> { <nl> Config . setClientMode ( true ) ; <nl> @ @ - 172 , 7 + 174 , 7 @ @ public class CQLSSTableWriter implements Closeable <nl> for ( int i = 0 ; i < size ; i + + ) <nl> { <nl> Object value = values . get ( i ) ; <nl> - rawValues . add ( value = = null ? null : typeCodecs . get ( i ) . serialize ( value , ProtocolVersion . NEWEST _ SUPPORTED ) ) ; <nl> + rawValues . add ( serialize ( value , typeCodecs . get ( i ) ) ) ; <nl> } <nl> <nl> return rawAddRow ( rawValues ) ; <nl> @ @ - 207 , 8 + 209 , 7 @ @ public class CQLSSTableWriter implements Closeable <nl> { <nl> ColumnSpecification spec = boundNames . get ( i ) ; <nl> Object value = values . get ( spec . name . toString ( ) ) ; <nl> - <nl> - rawValues . add ( value = = null ? null : typeCodecs . get ( i ) . serialize ( value , ProtocolVersion . NEWEST _ SUPPORTED ) ) ; <nl> + rawValues . add ( serialize ( value , typeCodecs . get ( i ) ) ) ; <nl> } <nl> return rawAddRow ( rawValues ) ; <nl> } <nl> @ @ - 324 , 6 + 325 , 13 @ @ public class CQLSSTableWriter implements Closeable <nl> writer . close ( ) ; <nl> } <nl> <nl> + private ByteBuffer serialize ( Object value , TypeCodec codec ) <nl> + { <nl> + if ( value = = null | | value = = UNSET _ VALUE ) <nl> + return ( ByteBuffer ) value ; <nl> + <nl> + return codec . serialize ( value , ProtocolVersion . NEWEST _ SUPPORTED ) ; <nl> + } <nl> / * * <nl> * A Builder for a CQLSSTableWriter object . <nl> * / <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java <nl> index 437e7a3 . . caa92f6 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java <nl> @ @ - 38 , 9 + 38 , 9 @ @ import org . apache . cassandra . cql3 . * ; <nl> import org . apache . cassandra . cql3 . functions . UDHelper ; <nl> import org . apache . cassandra . db . Keyspace ; <nl> import org . apache . cassandra . dht . * ; <nl> + import org . apache . cassandra . exceptions . * ; <nl> import org . apache . cassandra . service . StorageService ; <nl> - import org . apache . cassandra . utils . FBUtilities ; <nl> - import org . apache . cassandra . utils . OutputHandler ; <nl> + import org . apache . cassandra . utils . * ; <nl> import com . datastax . driver . core . DataType ; <nl> import com . datastax . driver . core . ProtocolVersion ; <nl> import com . datastax . driver . core . TypeCodec ; <nl> @ @ - 48 , 6 + 48 , 7 @ @ import com . datastax . driver . core . UDTValue ; <nl> import com . datastax . driver . core . UserType ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . fail ; <nl> <nl> public class CQLSSTableWriterTest <nl> { <nl> @ @ - 429 , 6 + 430 , 109 @ @ public class CQLSSTableWriterTest <nl> } <nl> } <nl> <nl> + @ Test <nl> + public void testUnsetValues ( ) throws Exception <nl> + { <nl> + final String KS = " cql _ keyspace5 " ; <nl> + final String TABLE = " table5 " ; <nl> + <nl> + final String schema = " CREATE TABLE " + KS + " . " + TABLE + " ( " <nl> + + " k int , " <nl> + + " c1 int , " <nl> + + " c2 int , " <nl> + + " v text , " <nl> + + " PRIMARY KEY ( k , c1 , c2 ) " <nl> + + " ) " ; <nl> + <nl> + File tempdir = Files . createTempDir ( ) ; <nl> + File dataDir = new File ( tempdir . getAbsolutePath ( ) + File . separator + KS + File . separator + TABLE ) ; <nl> + assert dataDir . mkdirs ( ) ; <nl> + <nl> + CQLSSTableWriter writer = CQLSSTableWriter . builder ( ) <nl> + . inDirectory ( dataDir ) <nl> + . forTable ( schema ) <nl> + . using ( " INSERT INTO " + KS + " . " + TABLE + " ( k , c1 , c2 , v ) " + <nl> + " VALUES ( ? , ? , ? , ? ) " ) <nl> + . build ( ) ; <nl> + <nl> + try <nl> + { <nl> + writer . addRow ( 1 , 1 , 1 ) ; <nl> + fail ( " Passing less arguments then expected in prepared statement should not work . " ) ; <nl> + } <nl> + catch ( InvalidRequestException e ) <nl> + { <nl> + assertEquals ( " Invalid number of arguments , expecting 4 values but got 3 " , <nl> + e . getMessage ( ) ) ; <nl> + } <nl> + <nl> + try <nl> + { <nl> + writer . addRow ( 1 , 1 , CQLSSTableWriter . UNSET _ VALUE , " 1 " ) ; <nl> + fail ( " Unset values should not work with clustering columns . " ) ; <nl> + } <nl> + catch ( InvalidRequestException e ) <nl> + { <nl> + assertEquals ( " Invalid unset value for column c2 " , <nl> + e . getMessage ( ) ) ; <nl> + } <nl> + <nl> + try <nl> + { <nl> + writer . addRow ( ImmutableMap . < String , Object > builder ( ) . put ( " k " , 1 ) . put ( " c1 " , 1 ) . put ( " v " , CQLSSTableWriter . UNSET _ VALUE ) . build ( ) ) ; <nl> + fail ( " Unset or null clustering columns should not be allowed . " ) ; <nl> + } <nl> + catch ( InvalidRequestException e ) <nl> + { <nl> + assertEquals ( " Invalid null value in condition for column c2 " , <nl> + e . getMessage ( ) ) ; <nl> + } <nl> + <nl> + writer . addRow ( 1 , 1 , 1 , CQLSSTableWriter . UNSET _ VALUE ) ; <nl> + writer . addRow ( 2 , 2 , 2 , null ) ; <nl> + writer . addRow ( Arrays . asList ( 3 , 3 , 3 , CQLSSTableWriter . UNSET _ VALUE ) ) ; <nl> + writer . addRow ( ImmutableMap . < String , Object > builder ( ) <nl> + . put ( " k " , 4 ) <nl> + . put ( " c1 " , 4 ) <nl> + . put ( " c2 " , 4 ) <nl> + . put ( " v " , CQLSSTableWriter . UNSET _ VALUE ) <nl> + . build ( ) ) ; <nl> + writer . addRow ( Arrays . asList ( 3 , 3 , 3 , CQLSSTableWriter . UNSET _ VALUE ) ) ; <nl> + writer . addRow ( 5 , 5 , 5 , " 5 " ) ; <nl> + <nl> + writer . close ( ) ; <nl> + loadSSTables ( dataDir , KS ) ; <nl> + <nl> + UntypedResultSet resultSet = QueryProcessor . executeInternal ( " SELECT * FROM " + KS + " . " + TABLE ) ; <nl> + Iterator < UntypedResultSet . Row > iter = resultSet . iterator ( ) ; <nl> + UntypedResultSet . Row r1 = iter . next ( ) ; <nl> + assertEquals ( 1 , r1 . getInt ( " k " ) ) ; <nl> + assertEquals ( 1 , r1 . getInt ( " c1 " ) ) ; <nl> + assertEquals ( 1 , r1 . getInt ( " c2 " ) ) ; <nl> + assertEquals ( false , r1 . has ( " v " ) ) ; <nl> + UntypedResultSet . Row r2 = iter . next ( ) ; <nl> + assertEquals ( 2 , r2 . getInt ( " k " ) ) ; <nl> + assertEquals ( 2 , r2 . getInt ( " c1 " ) ) ; <nl> + assertEquals ( 2 , r2 . getInt ( " c2 " ) ) ; <nl> + assertEquals ( false , r2 . has ( " v " ) ) ; <nl> + UntypedResultSet . Row r3 = iter . next ( ) ; <nl> + assertEquals ( 3 , r3 . getInt ( " k " ) ) ; <nl> + assertEquals ( 3 , r3 . getInt ( " c1 " ) ) ; <nl> + assertEquals ( 3 , r3 . getInt ( " c2 " ) ) ; <nl> + assertEquals ( false , r3 . has ( " v " ) ) ; <nl> + UntypedResultSet . Row r4 = iter . next ( ) ; <nl> + assertEquals ( 4 , r4 . getInt ( " k " ) ) ; <nl> + assertEquals ( 4 , r4 . getInt ( " c1 " ) ) ; <nl> + assertEquals ( 4 , r4 . getInt ( " c2 " ) ) ; <nl> + assertEquals ( false , r3 . has ( " v " ) ) ; <nl> + UntypedResultSet . Row r5 = iter . next ( ) ; <nl> + assertEquals ( 5 , r5 . getInt ( " k " ) ) ; <nl> + assertEquals ( 5 , r5 . getInt ( " c1 " ) ) ; <nl> + assertEquals ( 5 , r5 . getInt ( " c2 " ) ) ; <nl> + assertEquals ( true , r5 . has ( " v " ) ) ; <nl> + assertEquals ( " 5 " , r5 . getString ( " v " ) ) ; <nl> + } <nl> + <nl> private static void loadSSTables ( File dataDir , String ks ) throws ExecutionException , InterruptedException <nl> { <nl> SSTableLoader loader = new SSTableLoader ( dataDir , new SSTableLoader . Client ( )
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 9486c53 . . f441f8b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 8 
 + * Allow unset values in CQLSSTableWriter ( CASSANDRA - 11911 ) 
 * Chunk cache to request compressor - compatible buffers if pool space is exhausted ( CASSANDRA - 11993 ) 
 * Remove DatabaseDescriptor dependencies from SequentialWriter ( CASSANDRA - 11579 ) 
 * Move skip _ stop _ words filter before stemming ( CASSANDRA - 12078 ) 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java 
 index 2d9e379 . . 76c0e19 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java 
 @ @ - 101 , 6 + 101 , 8 @ @ import org . apache . cassandra . utils . Pair ; 
 * / 
 public class CQLSSTableWriter implements Closeable 
 { 
 + public static final ByteBuffer UNSET _ VALUE = ByteBufferUtil . UNSET _ BYTE _ BUFFER ; 
 + 
 static 
 { 
 Config . setClientMode ( true ) ; 
 @ @ - 172 , 7 + 174 , 7 @ @ public class CQLSSTableWriter implements Closeable 
 for ( int i = 0 ; i < size ; i + + ) 
 { 
 Object value = values . get ( i ) ; 
 - rawValues . add ( value = = null ? null : typeCodecs . get ( i ) . serialize ( value , ProtocolVersion . NEWEST _ SUPPORTED ) ) ; 
 + rawValues . add ( serialize ( value , typeCodecs . get ( i ) ) ) ; 
 } 
 
 return rawAddRow ( rawValues ) ; 
 @ @ - 207 , 8 + 209 , 7 @ @ public class CQLSSTableWriter implements Closeable 
 { 
 ColumnSpecification spec = boundNames . get ( i ) ; 
 Object value = values . get ( spec . name . toString ( ) ) ; 
 - 
 - rawValues . add ( value = = null ? null : typeCodecs . get ( i ) . serialize ( value , ProtocolVersion . NEWEST _ SUPPORTED ) ) ; 
 + rawValues . add ( serialize ( value , typeCodecs . get ( i ) ) ) ; 
 } 
 return rawAddRow ( rawValues ) ; 
 } 
 @ @ - 324 , 6 + 325 , 13 @ @ public class CQLSSTableWriter implements Closeable 
 writer . close ( ) ; 
 } 
 
 + private ByteBuffer serialize ( Object value , TypeCodec codec ) 
 + { 
 + if ( value = = null | | value = = UNSET _ VALUE ) 
 + return ( ByteBuffer ) value ; 
 + 
 + return codec . serialize ( value , ProtocolVersion . NEWEST _ SUPPORTED ) ; 
 + } 
 / * * 
 * A Builder for a CQLSSTableWriter object . 
 * / 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java 
 index 437e7a3 . . caa92f6 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java 
 @ @ - 38 , 9 + 38 , 9 @ @ import org . apache . cassandra . cql3 . * ; 
 import org . apache . cassandra . cql3 . functions . UDHelper ; 
 import org . apache . cassandra . db . Keyspace ; 
 import org . apache . cassandra . dht . * ; 
 + import org . apache . cassandra . exceptions . * ; 
 import org . apache . cassandra . service . StorageService ; 
 - import org . apache . cassandra . utils . FBUtilities ; 
 - import org . apache . cassandra . utils . OutputHandler ; 
 + import org . apache . cassandra . utils . * ; 
 import com . datastax . driver . core . DataType ; 
 import com . datastax . driver . core . ProtocolVersion ; 
 import com . datastax . driver . core . TypeCodec ; 
 @ @ - 48 , 6 + 48 , 7 @ @ import com . datastax . driver . core . UDTValue ; 
 import com . datastax . driver . core . UserType ; 
 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . fail ; 
 
 public class CQLSSTableWriterTest 
 { 
 @ @ - 429 , 6 + 430 , 109 @ @ public class CQLSSTableWriterTest 
 } 
 } 
 
 + @ Test 
 + public void testUnsetValues ( ) throws Exception 
 + { 
 + final String KS = " cql _ keyspace5 " ; 
 + final String TABLE = " table5 " ; 
 + 
 + final String schema = " CREATE TABLE " + KS + " . " + TABLE + " ( " 
 + + " k int , " 
 + + " c1 int , " 
 + + " c2 int , " 
 + + " v text , " 
 + + " PRIMARY KEY ( k , c1 , c2 ) " 
 + + " ) " ; 
 + 
 + File tempdir = Files . createTempDir ( ) ; 
 + File dataDir = new File ( tempdir . getAbsolutePath ( ) + File . separator + KS + File . separator + TABLE ) ; 
 + assert dataDir . mkdirs ( ) ; 
 + 
 + CQLSSTableWriter writer = CQLSSTableWriter . builder ( ) 
 + . inDirectory ( dataDir ) 
 + . forTable ( schema ) 
 + . using ( " INSERT INTO " + KS + " . " + TABLE + " ( k , c1 , c2 , v ) " + 
 + " VALUES ( ? , ? , ? , ? ) " ) 
 + . build ( ) ; 
 + 
 + try 
 + { 
 + writer . addRow ( 1 , 1 , 1 ) ; 
 + fail ( " Passing less arguments then expected in prepared statement should not work . " ) ; 
 + } 
 + catch ( InvalidRequestException e ) 
 + { 
 + assertEquals ( " Invalid number of arguments , expecting 4 values but got 3 " , 
 + e . getMessage ( ) ) ; 
 + } 
 + 
 + try 
 + { 
 + writer . addRow ( 1 , 1 , CQLSSTableWriter . UNSET _ VALUE , " 1 " ) ; 
 + fail ( " Unset values should not work with clustering columns . " ) ; 
 + } 
 + catch ( InvalidRequestException e ) 
 + { 
 + assertEquals ( " Invalid unset value for column c2 " , 
 + e . getMessage ( ) ) ; 
 + } 
 + 
 + try 
 + { 
 + writer . addRow ( ImmutableMap . < String , Object > builder ( ) . put ( " k " , 1 ) . put ( " c1 " , 1 ) . put ( " v " , CQLSSTableWriter . UNSET _ VALUE ) . build ( ) ) ; 
 + fail ( " Unset or null clustering columns should not be allowed . " ) ; 
 + } 
 + catch ( InvalidRequestException e ) 
 + { 
 + assertEquals ( " Invalid null value in condition for column c2 " , 
 + e . getMessage ( ) ) ; 
 + } 
 + 
 + writer . addRow ( 1 , 1 , 1 , CQLSSTableWriter . UNSET _ VALUE ) ; 
 + writer . addRow ( 2 , 2 , 2 , null ) ; 
 + writer . addRow ( Arrays . asList ( 3 , 3 , 3 , CQLSSTableWriter . UNSET _ VALUE ) ) ; 
 + writer . addRow ( ImmutableMap . < String , Object > builder ( ) 
 + . put ( " k " , 4 ) 
 + . put ( " c1 " , 4 ) 
 + . put ( " c2 " , 4 ) 
 + . put ( " v " , CQLSSTableWriter . UNSET _ VALUE ) 
 + . build ( ) ) ; 
 + writer . addRow ( Arrays . asList ( 3 , 3 , 3 , CQLSSTableWriter . UNSET _ VALUE ) ) ; 
 + writer . addRow ( 5 , 5 , 5 , " 5 " ) ; 
 + 
 + writer . close ( ) ; 
 + loadSSTables ( dataDir , KS ) ; 
 + 
 + UntypedResultSet resultSet = QueryProcessor . executeInternal ( " SELECT * FROM " + KS + " . " + TABLE ) ; 
 + Iterator < UntypedResultSet . Row > iter = resultSet . iterator ( ) ; 
 + UntypedResultSet . Row r1 = iter . next ( ) ; 
 + assertEquals ( 1 , r1 . getInt ( " k " ) ) ; 
 + assertEquals ( 1 , r1 . getInt ( " c1 " ) ) ; 
 + assertEquals ( 1 , r1 . getInt ( " c2 " ) ) ; 
 + assertEquals ( false , r1 . has ( " v " ) ) ; 
 + UntypedResultSet . Row r2 = iter . next ( ) ; 
 + assertEquals ( 2 , r2 . getInt ( " k " ) ) ; 
 + assertEquals ( 2 , r2 . getInt ( " c1 " ) ) ; 
 + assertEquals ( 2 , r2 . getInt ( " c2 " ) ) ; 
 + assertEquals ( false , r2 . has ( " v " ) ) ; 
 + UntypedResultSet . Row r3 = iter . next ( ) ; 
 + assertEquals ( 3 , r3 . getInt ( " k " ) ) ; 
 + assertEquals ( 3 , r3 . getInt ( " c1 " ) ) ; 
 + assertEquals ( 3 , r3 . getInt ( " c2 " ) ) ; 
 + assertEquals ( false , r3 . has ( " v " ) ) ; 
 + UntypedResultSet . Row r4 = iter . next ( ) ; 
 + assertEquals ( 4 , r4 . getInt ( " k " ) ) ; 
 + assertEquals ( 4 , r4 . getInt ( " c1 " ) ) ; 
 + assertEquals ( 4 , r4 . getInt ( " c2 " ) ) ; 
 + assertEquals ( false , r3 . has ( " v " ) ) ; 
 + UntypedResultSet . Row r5 = iter . next ( ) ; 
 + assertEquals ( 5 , r5 . getInt ( " k " ) ) ; 
 + assertEquals ( 5 , r5 . getInt ( " c1 " ) ) ; 
 + assertEquals ( 5 , r5 . getInt ( " c2 " ) ) ; 
 + assertEquals ( true , r5 . has ( " v " ) ) ; 
 + assertEquals ( " 5 " , r5 . getString ( " v " ) ) ; 
 + } 
 + 
 private static void loadSSTables ( File dataDir , String ks ) throws ExecutionException , InterruptedException 
 { 
 SSTableLoader loader = new SSTableLoader ( dataDir , new SSTableLoader . Client ( )

NEAREST DIFF:
ELIMINATEDSENTENCE
