BLEU SCORE: 0.026052442434962204

TEST MSG: Correct english word stemming test and add a test for french
GENERATED MSG: some gms tests . patch by johano ; reviewed by jbellis for CASSANDRA - 249

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / index / sasi / analyzer / filter / StemmingFilters . java b / src / java / org / apache / cassandra / index / sasi / analyzer / filter / StemmingFilters . java <nl> index 9e098d1 . . cb840a8 100644 <nl> - - - a / src / java / org / apache / cassandra / index / sasi / analyzer / filter / StemmingFilters . java <nl> + + + b / src / java / org / apache / cassandra / index / sasi / analyzer / filter / StemmingFilters . java <nl> @ @ - 37 , 7 + 37 , 7 @ @ public class StemmingFilters <nl> <nl> public String process ( String input ) throws Exception <nl> { <nl> - if ( stemmer = = null ) <nl> + if ( input = = null | | stemmer = = null ) <nl> return input ; <nl> stemmer . setCurrent ( input ) ; <nl> return ( stemmer . stem ( ) ) ? stemmer . getCurrent ( ) : input ; <nl> diff - - git a / test / resources / tokenization / french _ skip _ stop _ words _ before _ stemming . txt b / test / resources / tokenization / french _ skip _ stop _ words _ before _ stemming . txt <nl> new file mode 100644 <nl> index 0000000 . . 59a1c23 <nl> - - - / dev / null <nl> + + + b / test / resources / tokenization / french _ skip _ stop _ words _ before _ stemming . txt <nl> @ @ - 0 , 0 + 1 @ @ <nl> + " La danse sous la pluie " est une chanson connue <nl> \ No newline at end of file <nl> diff - - git a / test / unit / org / apache / cassandra / index / sasi / analyzer / StandardAnalyzerTest . java b / test / unit / org / apache / cassandra / index / sasi / analyzer / StandardAnalyzerTest . java <nl> index e307512 . . 7a88a3d 100644 <nl> - - - a / test / unit / org / apache / cassandra / index / sasi / analyzer / StandardAnalyzerTest . java <nl> + + + b / test / unit / org / apache / cassandra / index / sasi / analyzer / StandardAnalyzerTest . java <nl> @ @ - 25 , 6 + 25 , 8 @ @ import java . util . Locale ; <nl> <nl> import org . junit . Test ; <nl> <nl> + import org . apache . cassandra . serializers . UTF8Serializer ; <nl> + <nl> import static org . junit . Assert . assertEquals ; <nl> <nl> public class StandardAnalyzerTest <nl> @ @ - 151 , 7 + 153 , 36 @ @ public class StandardAnalyzerTest <nl> while ( tokenizer . hasNext ( ) ) <nl> tokens . add ( tokenizer . next ( ) ) ; <nl> <nl> - assertEquals ( 40249 , tokens . size ( ) ) ; <nl> + assertEquals ( 37739 , tokens . size ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSkipStopWordBeforeStemmingFrench ( ) throws Exception <nl> + { <nl> + InputStream is = StandardAnalyzerTest . class . getClassLoader ( ) <nl> + . getResourceAsStream ( " tokenization / french _ skip _ stop _ words _ before _ stemming . txt " ) ; <nl> + <nl> + StandardTokenizerOptions options = new StandardTokenizerOptions . OptionsBuilder ( ) . stemTerms ( true ) <nl> + . ignoreStopTerms ( true ) . useLocale ( Locale . FRENCH ) <nl> + . alwaysLowerCaseTerms ( true ) . build ( ) ; <nl> + StandardAnalyzer tokenizer = new StandardAnalyzer ( ) ; <nl> + tokenizer . init ( options ) ; <nl> + <nl> + List < ByteBuffer > tokens = new ArrayList < > ( ) ; <nl> + List < String > words = new ArrayList < > ( ) ; <nl> + tokenizer . reset ( is ) ; <nl> + while ( tokenizer . hasNext ( ) ) <nl> + { <nl> + final ByteBuffer nextToken = tokenizer . next ( ) ; <nl> + tokens . add ( nextToken ) ; <nl> + words . add ( UTF8Serializer . instance . deserialize ( nextToken . duplicate ( ) ) ) ; <nl> + } <nl> + <nl> + assertEquals ( 4 , tokens . size ( ) ) ; <nl> + assertEquals ( " dans " , words . get ( 0 ) ) ; <nl> + assertEquals ( " plui " , words . get ( 1 ) ) ; <nl> + assertEquals ( " chanson " , words . get ( 2 ) ) ; <nl> + assertEquals ( " connu " , words . get ( 3 ) ) ; <nl> } <nl> <nl> @ Test
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> index 0ecac18 . . ab48192 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> @ @ - 57 , 6 + 57 , 8 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean <nl> / * The time when the module was instantiated . * / <nl> private static long creationTime _ ; <nl> <nl> + private Gossiper gossiper ; <nl> + <nl> public static IFailureDetector instance ( ) <nl> { <nl> if ( failureDetector _ = = null ) <nl> @ @ - 66 , 7 + 68 , 7 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean <nl> { <nl> if ( failureDetector _ = = null ) <nl> { <nl> - failureDetector _ = new FailureDetector ( ) ; <nl> + failureDetector _ = new FailureDetector ( Gossiper . instance ( ) ) ; <nl> } <nl> } <nl> finally <nl> @ @ - 80 , 8 + 82 , 9 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean <nl> private Map < EndPoint , ArrivalWindow > arrivalSamples _ = new Hashtable < EndPoint , ArrivalWindow > ( ) ; <nl> private List < IFailureDetectionEventListener > fdEvntListeners _ = new ArrayList < IFailureDetectionEventListener > ( ) ; <nl> <nl> - public FailureDetector ( ) <nl> + public FailureDetector ( Gossiper gossiper ) <nl> { <nl> + this . gossiper = gossiper ; <nl> creationTime _ = System . currentTimeMillis ( ) ; <nl> / / Register this instance with JMX <nl> try <nl> @ @ - 238 , 11 + 241 , 9 @ @ class ArrivalWindow <nl> private static Logger logger _ = Logger . getLogger ( ArrivalWindow . class ) ; <nl> private double tLast _ = 0L ; <nl> private BoundedStatsDeque arrivalIntervals _ ; <nl> - private int size _ ; <nl> <nl> ArrivalWindow ( int size ) <nl> { <nl> - size _ = size ; <nl> arrivalIntervals _ = new BoundedStatsDeque ( size ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / gms / HeartBeatState . java b / src / java / org / apache / cassandra / gms / HeartBeatState . java <nl> index 5e4e512 . . 96a0e5c 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / HeartBeatState . java <nl> + + + b / src / java / org / apache / cassandra / gms / HeartBeatState . java <nl> @ @ - 91 , 6 + 91 , 7 @ @ class HeartBeatState <nl> { <nl> return version _ ; <nl> } <nl> + <nl> } ; <nl> <nl> class HeartBeatStateSerializer implements ICompactSerializer < HeartBeatState > <nl> diff - - git a / test / unit / org / apache / cassandra / gms / ArrivalWindowTest . java b / test / unit / org / apache / cassandra / gms / ArrivalWindowTest . java <nl> new file mode 100644 <nl> index 0000000 . . df881ff <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / gms / ArrivalWindowTest . java <nl> @ @ - 0 , 0 + 1 , 29 @ @ <nl> + package org . apache . cassandra . gms ; <nl> + <nl> + import static org . junit . Assert . * ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + public class ArrivalWindowTest <nl> + { <nl> + <nl> + @ Test <nl> + public void test ( ) <nl> + { <nl> + ArrivalWindow window = new ArrivalWindow ( 4 ) ; <nl> + / / base readings <nl> + window . add ( 111 ) ; <nl> + window . add ( 222 ) ; <nl> + window . add ( 333 ) ; <nl> + window . add ( 444 ) ; <nl> + window . add ( 555 ) ; <nl> + <nl> + / / all good <nl> + assertEquals ( 0 . 4342 , window . phi ( 666 ) , 0 . 01 ) ; <nl> + <nl> + / / oh noes , a much higher timestamp , something went wrong ! <nl> + assertEquals ( 9 . 566 , window . phi ( 3000 ) , 0 . 01 ) ; <nl> + } <nl> + <nl> + <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / gms / GossipDigestTest . java b / test / unit / org / apache / cassandra / gms / GossipDigestTest . java <nl> new file mode 100644 <nl> index 0000000 . . a58f74a <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / gms / GossipDigestTest . java <nl> @ @ - 0 , 0 + 1 , 37 @ @ <nl> + package org . apache . cassandra . gms ; <nl> + <nl> + import static org . junit . Assert . * ; <nl> + <nl> + import java . io . IOException ; <nl> + <nl> + import org . apache . cassandra . io . DataInputBuffer ; <nl> + import org . apache . cassandra . io . DataOutputBuffer ; <nl> + import org . apache . cassandra . net . EndPoint ; <nl> + import org . junit . Test ; <nl> + <nl> + public class GossipDigestTest <nl> + { <nl> + <nl> + @ Test <nl> + public void test ( ) throws IOException <nl> + { <nl> + EndPoint endPoint = new EndPoint ( " 127 . 0 . 0 . 1 " , 3333 ) ; <nl> + int generation = 0 ; <nl> + int maxVersion = 123 ; <nl> + GossipDigest expected = new GossipDigest ( endPoint , generation , maxVersion ) ; <nl> + / / make sure we get the same values out <nl> + assertEquals ( endPoint , expected . getEndPoint ( ) ) ; <nl> + assertEquals ( generation , expected . getGeneration ( ) ) ; <nl> + assertEquals ( maxVersion , expected . getMaxVersion ( ) ) ; <nl> + <nl> + / / test the serialization and equals <nl> + DataOutputBuffer output = new DataOutputBuffer ( ) ; <nl> + GossipDigest . serializer ( ) . serialize ( expected , output ) ; <nl> + <nl> + DataInputBuffer input = new DataInputBuffer ( ) ; <nl> + input . reset ( output . getData ( ) , output . getLength ( ) ) ; <nl> + GossipDigest actual = GossipDigest . serializer ( ) . deserialize ( input ) ; <nl> + assertEquals ( 0 , expected . compareTo ( actual ) ) ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / utils / BoundedStatsDequeTest . java b / test / unit / org / apache / cassandra / utils / BoundedStatsDequeTest . java <nl> new file mode 100644 <nl> index 0000000 . . d6a9c2b <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / utils / BoundedStatsDequeTest . java <nl> @ @ - 0 , 0 + 1 , 57 @ @ <nl> + package org . apache . cassandra . utils ; <nl> + <nl> + import static org . junit . Assert . * ; <nl> + <nl> + import java . util . Iterator ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + public class BoundedStatsDequeTest <nl> + { <nl> + <nl> + @ Test <nl> + public void test ( ) <nl> + { <nl> + int size = 4 ; <nl> + <nl> + BoundedStatsDeque bsd = new BoundedStatsDeque ( size ) ; <nl> + / / check the values for an empty result <nl> + assertEquals ( 0 , bsd . size ( ) ) ; <nl> + assertEquals ( 0 , bsd . sum ( ) , 0 . 001d ) ; <nl> + assertEquals ( Double . NaN , bsd . mean ( ) , 0 . 001d ) ; <nl> + assertEquals ( Double . NaN , bsd . variance ( ) , 0 . 001d ) ; <nl> + assertEquals ( Double . NaN , bsd . stdev ( ) , 0 . 001d ) ; <nl> + assertEquals ( 0 , bsd . sumOfDeviations ( ) , 0 . 001d ) ; <nl> + <nl> + bsd . add ( 1d ) ; / / this one falls out , over limit <nl> + bsd . add ( 2d ) ; <nl> + bsd . add ( 3d ) ; <nl> + bsd . add ( 4d ) ; <nl> + bsd . add ( 5d ) ; <nl> + <nl> + / / verify that everything is in there <nl> + Iterator < Double > iter = bsd . iterator ( ) ; <nl> + assertTrue ( iter . hasNext ( ) ) ; <nl> + assertEquals ( 2d , iter . next ( ) , 0 ) ; <nl> + assertTrue ( iter . hasNext ( ) ) ; <nl> + assertEquals ( 3d , iter . next ( ) , 0 ) ; <nl> + assertTrue ( iter . hasNext ( ) ) ; <nl> + assertEquals ( 4d , iter . next ( ) , 0 ) ; <nl> + assertTrue ( iter . hasNext ( ) ) ; <nl> + assertEquals ( 5d , iter . next ( ) , 0 ) ; <nl> + assertFalse ( iter . hasNext ( ) ) ; <nl> + <nl> + / / check results <nl> + assertEquals ( size , bsd . size ( ) ) ; <nl> + assertEquals ( 14 , bsd . sum ( ) , 0 . 001d ) ; <nl> + assertEquals ( 3 . 5 , bsd . mean ( ) , 0 . 001d ) ; <nl> + assertEquals ( 1 . 25 , bsd . variance ( ) , 0 . 001d ) ; <nl> + assertEquals ( 1 . 1180d , bsd . stdev ( ) , 0 . 001d ) ; <nl> + assertEquals ( 5 , bsd . sumOfDeviations ( ) , 0 . 001d ) ; <nl> + <nl> + / / check that it clears properly <nl> + bsd . clear ( ) ; <nl> + assertFalse ( bsd . iterator ( ) . hasNext ( ) ) ; <nl> + } <nl> + <nl> + }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / index / sasi / analyzer / filter / StemmingFilters . java b / src / java / org / apache / cassandra / index / sasi / analyzer / filter / StemmingFilters . java 
 index 9e098d1 . . cb840a8 100644 
 - - - a / src / java / org / apache / cassandra / index / sasi / analyzer / filter / StemmingFilters . java 
 + + + b / src / java / org / apache / cassandra / index / sasi / analyzer / filter / StemmingFilters . java 
 @ @ - 37 , 7 + 37 , 7 @ @ public class StemmingFilters 
 
 public String process ( String input ) throws Exception 
 { 
 - if ( stemmer = = null ) 
 + if ( input = = null | | stemmer = = null ) 
 return input ; 
 stemmer . setCurrent ( input ) ; 
 return ( stemmer . stem ( ) ) ? stemmer . getCurrent ( ) : input ; 
 diff - - git a / test / resources / tokenization / french _ skip _ stop _ words _ before _ stemming . txt b / test / resources / tokenization / french _ skip _ stop _ words _ before _ stemming . txt 
 new file mode 100644 
 index 0000000 . . 59a1c23 
 - - - / dev / null 
 + + + b / test / resources / tokenization / french _ skip _ stop _ words _ before _ stemming . txt 
 @ @ - 0 , 0 + 1 @ @ 
 + " La danse sous la pluie " est une chanson connue 
 \ No newline at end of file 
 diff - - git a / test / unit / org / apache / cassandra / index / sasi / analyzer / StandardAnalyzerTest . java b / test / unit / org / apache / cassandra / index / sasi / analyzer / StandardAnalyzerTest . java 
 index e307512 . . 7a88a3d 100644 
 - - - a / test / unit / org / apache / cassandra / index / sasi / analyzer / StandardAnalyzerTest . java 
 + + + b / test / unit / org / apache / cassandra / index / sasi / analyzer / StandardAnalyzerTest . java 
 @ @ - 25 , 6 + 25 , 8 @ @ import java . util . Locale ; 
 
 import org . junit . Test ; 
 
 + import org . apache . cassandra . serializers . UTF8Serializer ; 
 + 
 import static org . junit . Assert . assertEquals ; 
 
 public class StandardAnalyzerTest 
 @ @ - 151 , 7 + 153 , 36 @ @ public class StandardAnalyzerTest 
 while ( tokenizer . hasNext ( ) ) 
 tokens . add ( tokenizer . next ( ) ) ; 
 
 - assertEquals ( 40249 , tokens . size ( ) ) ; 
 + assertEquals ( 37739 , tokens . size ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testSkipStopWordBeforeStemmingFrench ( ) throws Exception 
 + { 
 + InputStream is = StandardAnalyzerTest . class . getClassLoader ( ) 
 + . getResourceAsStream ( " tokenization / french _ skip _ stop _ words _ before _ stemming . txt " ) ; 
 + 
 + StandardTokenizerOptions options = new StandardTokenizerOptions . OptionsBuilder ( ) . stemTerms ( true ) 
 + . ignoreStopTerms ( true ) . useLocale ( Locale . FRENCH ) 
 + . alwaysLowerCaseTerms ( true ) . build ( ) ; 
 + StandardAnalyzer tokenizer = new StandardAnalyzer ( ) ; 
 + tokenizer . init ( options ) ; 
 + 
 + List < ByteBuffer > tokens = new ArrayList < > ( ) ; 
 + List < String > words = new ArrayList < > ( ) ; 
 + tokenizer . reset ( is ) ; 
 + while ( tokenizer . hasNext ( ) ) 
 + { 
 + final ByteBuffer nextToken = tokenizer . next ( ) ; 
 + tokens . add ( nextToken ) ; 
 + words . add ( UTF8Serializer . instance . deserialize ( nextToken . duplicate ( ) ) ) ; 
 + } 
 + 
 + assertEquals ( 4 , tokens . size ( ) ) ; 
 + assertEquals ( " dans " , words . get ( 0 ) ) ; 
 + assertEquals ( " plui " , words . get ( 1 ) ) ; 
 + assertEquals ( " chanson " , words . get ( 2 ) ) ; 
 + assertEquals ( " connu " , words . get ( 3 ) ) ; 
 } 
 
 @ Test

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 index 0ecac18 . . ab48192 100644 
 - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java 
 + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 @ @ - 57 , 6 + 57 , 8 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean 
 / * The time when the module was instantiated . * / 
 private static long creationTime _ ; 
 
 + private Gossiper gossiper ; 
 + 
 public static IFailureDetector instance ( ) 
 { 
 if ( failureDetector _ = = null ) 
 @ @ - 66 , 7 + 68 , 7 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean 
 { 
 if ( failureDetector _ = = null ) 
 { 
 - failureDetector _ = new FailureDetector ( ) ; 
 + failureDetector _ = new FailureDetector ( Gossiper . instance ( ) ) ; 
 } 
 } 
 finally 
 @ @ - 80 , 8 + 82 , 9 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean 
 private Map < EndPoint , ArrivalWindow > arrivalSamples _ = new Hashtable < EndPoint , ArrivalWindow > ( ) ; 
 private List < IFailureDetectionEventListener > fdEvntListeners _ = new ArrayList < IFailureDetectionEventListener > ( ) ; 
 
 - public FailureDetector ( ) 
 + public FailureDetector ( Gossiper gossiper ) 
 { 
 + this . gossiper = gossiper ; 
 creationTime _ = System . currentTimeMillis ( ) ; 
 / / Register this instance with JMX 
 try 
 @ @ - 238 , 11 + 241 , 9 @ @ class ArrivalWindow 
 private static Logger logger _ = Logger . getLogger ( ArrivalWindow . class ) ; 
 private double tLast _ = 0L ; 
 private BoundedStatsDeque arrivalIntervals _ ; 
 - private int size _ ; 
 
 ArrivalWindow ( int size ) 
 { 
 - size _ = size ; 
 arrivalIntervals _ = new BoundedStatsDeque ( size ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / gms / HeartBeatState . java b / src / java / org / apache / cassandra / gms / HeartBeatState . java 
 index 5e4e512 . . 96a0e5c 100644 
 - - - a / src / java / org / apache / cassandra / gms / HeartBeatState . java 
 + + + b / src / java / org / apache / cassandra / gms / HeartBeatState . java 
 @ @ - 91 , 6 + 91 , 7 @ @ class HeartBeatState 
 { 
 return version _ ; 
 } 
 + 
 } ; 
 
 class HeartBeatStateSerializer implements ICompactSerializer < HeartBeatState > 
 diff - - git a / test / unit / org / apache / cassandra / gms / ArrivalWindowTest . java b / test / unit / org / apache / cassandra / gms / ArrivalWindowTest . java 
 new file mode 100644 
 index 0000000 . . df881ff 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / gms / ArrivalWindowTest . java 
 @ @ - 0 , 0 + 1 , 29 @ @ 
 + package org . apache . cassandra . gms ; 
 + 
 + import static org . junit . Assert . * ; 
 + 
 + import org . junit . Test ; 
 + 
 + public class ArrivalWindowTest 
 + { 
 + 
 + @ Test 
 + public void test ( ) 
 + { 
 + ArrivalWindow window = new ArrivalWindow ( 4 ) ; 
 + / / base readings 
 + window . add ( 111 ) ; 
 + window . add ( 222 ) ; 
 + window . add ( 333 ) ; 
 + window . add ( 444 ) ; 
 + window . add ( 555 ) ; 
 + 
 + / / all good 
 + assertEquals ( 0 . 4342 , window . phi ( 666 ) , 0 . 01 ) ; 
 + 
 + / / oh noes , a much higher timestamp , something went wrong ! 
 + assertEquals ( 9 . 566 , window . phi ( 3000 ) , 0 . 01 ) ; 
 + } 
 + 
 + 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / gms / GossipDigestTest . java b / test / unit / org / apache / cassandra / gms / GossipDigestTest . java 
 new file mode 100644 
 index 0000000 . . a58f74a 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / gms / GossipDigestTest . java 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + package org . apache . cassandra . gms ; 
 + 
 + import static org . junit . Assert . * ; 
 + 
 + import java . io . IOException ; 
 + 
 + import org . apache . cassandra . io . DataInputBuffer ; 
 + import org . apache . cassandra . io . DataOutputBuffer ; 
 + import org . apache . cassandra . net . EndPoint ; 
 + import org . junit . Test ; 
 + 
 + public class GossipDigestTest 
 + { 
 + 
 + @ Test 
 + public void test ( ) throws IOException 
 + { 
 + EndPoint endPoint = new EndPoint ( " 127 . 0 . 0 . 1 " , 3333 ) ; 
 + int generation = 0 ; 
 + int maxVersion = 123 ; 
 + GossipDigest expected = new GossipDigest ( endPoint , generation , maxVersion ) ; 
 + / / make sure we get the same values out 
 + assertEquals ( endPoint , expected . getEndPoint ( ) ) ; 
 + assertEquals ( generation , expected . getGeneration ( ) ) ; 
 + assertEquals ( maxVersion , expected . getMaxVersion ( ) ) ; 
 + 
 + / / test the serialization and equals 
 + DataOutputBuffer output = new DataOutputBuffer ( ) ; 
 + GossipDigest . serializer ( ) . serialize ( expected , output ) ; 
 + 
 + DataInputBuffer input = new DataInputBuffer ( ) ; 
 + input . reset ( output . getData ( ) , output . getLength ( ) ) ; 
 + GossipDigest actual = GossipDigest . serializer ( ) . deserialize ( input ) ; 
 + assertEquals ( 0 , expected . compareTo ( actual ) ) ; 
 + } 
 + 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / utils / BoundedStatsDequeTest . java b / test / unit / org / apache / cassandra / utils / BoundedStatsDequeTest . java 
 new file mode 100644 
 index 0000000 . . d6a9c2b 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / utils / BoundedStatsDequeTest . java 
 @ @ - 0 , 0 + 1 , 57 @ @ 
 + package org . apache . cassandra . utils ; 
 + 
 + import static org . junit . Assert . * ; 
 + 
 + import java . util . Iterator ; 
 + 
 + import org . junit . Test ; 
 + 
 + public class BoundedStatsDequeTest 
 + { 
 + 
 + @ Test 
 + public void test ( ) 
 + { 
 + int size = 4 ; 
 + 
 + BoundedStatsDeque bsd = new BoundedStatsDeque ( size ) ; 
 + / / check the values for an empty result 
 + assertEquals ( 0 , bsd . size ( ) ) ; 
 + assertEquals ( 0 , bsd . sum ( ) , 0 . 001d ) ; 
 + assertEquals ( Double . NaN , bsd . mean ( ) , 0 . 001d ) ; 
 + assertEquals ( Double . NaN , bsd . variance ( ) , 0 . 001d ) ; 
 + assertEquals ( Double . NaN , bsd . stdev ( ) , 0 . 001d ) ; 
 + assertEquals ( 0 , bsd . sumOfDeviations ( ) , 0 . 001d ) ; 
 + 
 + bsd . add ( 1d ) ; / / this one falls out , over limit 
 + bsd . add ( 2d ) ; 
 + bsd . add ( 3d ) ; 
 + bsd . add ( 4d ) ; 
 + bsd . add ( 5d ) ; 
 + 
 + / / verify that everything is in there 
 + Iterator < Double > iter = bsd . iterator ( ) ; 
 + assertTrue ( iter . hasNext ( ) ) ; 
 + assertEquals ( 2d , iter . next ( ) , 0 ) ; 
 + assertTrue ( iter . hasNext ( ) ) ; 
 + assertEquals ( 3d , iter . next ( ) , 0 ) ; 
 + assertTrue ( iter . hasNext ( ) ) ; 
 + assertEquals ( 4d , iter . next ( ) , 0 ) ; 
 + assertTrue ( iter . hasNext ( ) ) ; 
 + assertEquals ( 5d , iter . next ( ) , 0 ) ; 
 + assertFalse ( iter . hasNext ( ) ) ; 
 + 
 + / / check results 
 + assertEquals ( size , bsd . size ( ) ) ; 
 + assertEquals ( 14 , bsd . sum ( ) , 0 . 001d ) ; 
 + assertEquals ( 3 . 5 , bsd . mean ( ) , 0 . 001d ) ; 
 + assertEquals ( 1 . 25 , bsd . variance ( ) , 0 . 001d ) ; 
 + assertEquals ( 1 . 1180d , bsd . stdev ( ) , 0 . 001d ) ; 
 + assertEquals ( 5 , bsd . sumOfDeviations ( ) , 0 . 001d ) ; 
 + 
 + / / check that it clears properly 
 + bsd . clear ( ) ; 
 + assertFalse ( bsd . iterator ( ) . hasNext ( ) ) ; 
 + } 
 + 
 + }
