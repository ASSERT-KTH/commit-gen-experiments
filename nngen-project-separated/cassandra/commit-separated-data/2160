BLEU SCORE: 0.02399905349559606

TEST MSG: Track added sstable size correctly
GENERATED MSG: fix assertion when dropping a columnfamily with no sstables

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 5eb5fd8 . . c202586 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 0 - rc7 <nl> + * Track added sstable size correctly ( CASSANDRA - 7239 ) <nl> * ( cqlsh ) Fix case insensitivity ( CASSANDRA - 7834 ) <nl> * Fix failure to stream ranges when moving ( CASSANDRA - 7836 ) <nl> * Correctly remove tmplink files ( CASSANDRA - 7803 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / DataTracker . java b / src / java / org / apache / cassandra / db / DataTracker . java <nl> index e574143 . . 097d8cc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / DataTracker . java <nl> + + + b / src / java / org / apache / cassandra / db / DataTracker . java <nl> @ @ - 252 , 6 + 252 , 12 @ @ public class DataTracker <nl> { <nl> replace ( sstables , Collections . < SSTableReader > emptyList ( ) ) ; <nl> notifySSTablesChanged ( sstables , allReplacements , compactionType ) ; <nl> + for ( SSTableReader sstable : sstables ) <nl> + { <nl> + long bytesOnDisk = sstable . bytesOnDisk ( ) ; <nl> + cfstore . metric . totalDiskSpaceUsed . inc ( bytesOnDisk ) ; <nl> + cfstore . metric . liveDiskSpaceUsed . inc ( bytesOnDisk ) ; <nl> + } <nl> } <nl> <nl> public void addInitialSSTables ( Collection < SSTableReader > sstables )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b7e2894 . . aec2420 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> 1 . 0 . 7 <nl> * fix assertion when dropping a columnfamily with no sstables ( CASSANDRA - 3614 ) <nl> + * more efficient allocation of small bloom filters ( CASSANDRA - 3618 ) <nl> <nl> <nl> 1 . 0 . 6 <nl> diff - - git a / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java b / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java <nl> index 72c0652 . . 89774b9 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java <nl> + + + b / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java <nl> @ @ - 76 , 6 + 76 , 7 @ @ Test system : AMD Opteron , 64 bit linux , Sun Java 1 . 5 _ 06 - server - Xbatch - Xmx64M <nl> public class OpenBitSet implements Serializable { <nl> protected long [ ] [ ] bits ; <nl> protected int wlen ; / / number of words ( elements ) used in the array <nl> + private final int pageCount ; <nl> / * * <nl> * length of bits [ ] [ ] page in long [ ] elements . <nl> * Choosing unform size for all sizes of bitsets fight fragmentation for very large <nl> @ @ - 95 , 13 + 96 , 19 @ @ public class OpenBitSet implements Serializable { <nl> public OpenBitSet ( long numBits , boolean allocatePages ) <nl> { <nl> wlen = bits2words ( numBits ) ; <nl> + int lastPageSize = wlen % PAGE _ SIZE ; <nl> + int fullPageCount = wlen / PAGE _ SIZE ; <nl> + pageCount = fullPageCount + ( lastPageSize = = 0 ? 0 : 1 ) ; <nl> <nl> - bits = new long [ getPageCount ( ) ] [ ] ; <nl> - <nl> + bits = new long [ pageCount ] [ ] ; <nl> + <nl> if ( allocatePages ) <nl> { <nl> - for ( int allocated = 0 , i = 0 ; allocated < wlen ; allocated + = PAGE _ SIZE , i + + ) <nl> - bits [ i ] = new long [ PAGE _ SIZE ] ; <nl> + for ( int i = 0 ; i < fullPageCount ; + + i ) <nl> + bits [ i ] = new long [ PAGE _ SIZE ] ; <nl> + <nl> + if ( lastPageSize ! = 0 ) <nl> + bits [ bits . length - 1 ] = new long [ lastPageSize ] ; <nl> } <nl> } <nl> <nl> @ @ - 119 , 7 + 126 , 7 @ @ public class OpenBitSet implements Serializable { <nl> <nl> public int getPageCount ( ) <nl> { <nl> - return wlen / PAGE _ SIZE + 1 ; <nl> + return pageCount ; <nl> } <nl> <nl> public long [ ] getPage ( int pageIdx )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 5eb5fd8 . . c202586 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 0 - rc7 
 + * Track added sstable size correctly ( CASSANDRA - 7239 ) 
 * ( cqlsh ) Fix case insensitivity ( CASSANDRA - 7834 ) 
 * Fix failure to stream ranges when moving ( CASSANDRA - 7836 ) 
 * Correctly remove tmplink files ( CASSANDRA - 7803 ) 
 diff - - git a / src / java / org / apache / cassandra / db / DataTracker . java b / src / java / org / apache / cassandra / db / DataTracker . java 
 index e574143 . . 097d8cc 100644 
 - - - a / src / java / org / apache / cassandra / db / DataTracker . java 
 + + + b / src / java / org / apache / cassandra / db / DataTracker . java 
 @ @ - 252 , 6 + 252 , 12 @ @ public class DataTracker 
 { 
 replace ( sstables , Collections . < SSTableReader > emptyList ( ) ) ; 
 notifySSTablesChanged ( sstables , allReplacements , compactionType ) ; 
 + for ( SSTableReader sstable : sstables ) 
 + { 
 + long bytesOnDisk = sstable . bytesOnDisk ( ) ; 
 + cfstore . metric . totalDiskSpaceUsed . inc ( bytesOnDisk ) ; 
 + cfstore . metric . liveDiskSpaceUsed . inc ( bytesOnDisk ) ; 
 + } 
 } 
 
 public void addInitialSSTables ( Collection < SSTableReader > sstables )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b7e2894 . . aec2420 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 1 . 0 . 7 
 * fix assertion when dropping a columnfamily with no sstables ( CASSANDRA - 3614 ) 
 + * more efficient allocation of small bloom filters ( CASSANDRA - 3618 ) 
 
 
 1 . 0 . 6 
 diff - - git a / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java b / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java 
 index 72c0652 . . 89774b9 100644 
 - - - a / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java 
 + + + b / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java 
 @ @ - 76 , 6 + 76 , 7 @ @ Test system : AMD Opteron , 64 bit linux , Sun Java 1 . 5 _ 06 - server - Xbatch - Xmx64M 
 public class OpenBitSet implements Serializable { 
 protected long [ ] [ ] bits ; 
 protected int wlen ; / / number of words ( elements ) used in the array 
 + private final int pageCount ; 
 / * * 
 * length of bits [ ] [ ] page in long [ ] elements . 
 * Choosing unform size for all sizes of bitsets fight fragmentation for very large 
 @ @ - 95 , 13 + 96 , 19 @ @ public class OpenBitSet implements Serializable { 
 public OpenBitSet ( long numBits , boolean allocatePages ) 
 { 
 wlen = bits2words ( numBits ) ; 
 + int lastPageSize = wlen % PAGE _ SIZE ; 
 + int fullPageCount = wlen / PAGE _ SIZE ; 
 + pageCount = fullPageCount + ( lastPageSize = = 0 ? 0 : 1 ) ; 
 
 - bits = new long [ getPageCount ( ) ] [ ] ; 
 - 
 + bits = new long [ pageCount ] [ ] ; 
 + 
 if ( allocatePages ) 
 { 
 - for ( int allocated = 0 , i = 0 ; allocated < wlen ; allocated + = PAGE _ SIZE , i + + ) 
 - bits [ i ] = new long [ PAGE _ SIZE ] ; 
 + for ( int i = 0 ; i < fullPageCount ; + + i ) 
 + bits [ i ] = new long [ PAGE _ SIZE ] ; 
 + 
 + if ( lastPageSize ! = 0 ) 
 + bits [ bits . length - 1 ] = new long [ lastPageSize ] ; 
 } 
 } 
 
 @ @ - 119 , 7 + 126 , 7 @ @ public class OpenBitSet implements Serializable { 
 
 public int getPageCount ( ) 
 { 
 - return wlen / PAGE _ SIZE + 1 ; 
 + return pageCount ; 
 } 
 
 public long [ ] getPage ( int pageIdx )
