BLEU SCORE: 0.03772691894380681

TEST MSG: ArrivalWindow should use primitives
GENERATED MSG: Make BoundedStatsDeque threadsafe , removed AbstractStateDeque and

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6d031f6 . . 753fb1c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 16 : <nl> + * ArrivalWindow should use primitives ( CASSANDRA - 9496 ) <nl> * Periodically submit background compaction tasks ( CASSANDRA - 9592 ) <nl> * Set HAS _ MORE _ PAGES flag to false when PagingState is null ( CASSANDRA - 9571 ) <nl> * Backport indexed value validation fix from CASSANDRA - 9057 ( CASSANDRA - 9564 ) <nl> diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> index e247e48 . . 8fdd99f 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> @ @ - 27 , 14 + 27 , 12 @ @ import java . util . concurrent . TimeUnit ; <nl> import javax . management . MBeanServer ; <nl> import javax . management . ObjectName ; <nl> <nl> - import org . apache . commons . lang3 . StringUtils ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . io . FSWriteError ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> - import org . apache . cassandra . utils . BoundedStatsDeque ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> / * * <nl> @ @ - 289 , 11 + 287 , 60 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean <nl> } <nl> } <nl> <nl> + / * <nl> + This class is not thread safe . <nl> + * / <nl> + class ArrayBackedBoundedStats <nl> + { <nl> + private final long [ ] arrivalIntervals ; <nl> + private long sum = 0 ; <nl> + private int index = 0 ; <nl> + private boolean isFilled = false ; <nl> + private volatile double mean = 0 ; <nl> + <nl> + public ArrayBackedBoundedStats ( final int size ) <nl> + { <nl> + arrivalIntervals = new long [ size ] ; <nl> + } <nl> + <nl> + public void add ( long interval ) <nl> + { <nl> + if ( index = = arrivalIntervals . length ) <nl> + { <nl> + isFilled = true ; <nl> + index = 0 ; <nl> + } <nl> + <nl> + if ( isFilled ) <nl> + sum = sum - arrivalIntervals [ index ] ; <nl> + <nl> + arrivalIntervals [ index + + ] = interval ; <nl> + sum + = interval ; <nl> + mean = ( double ) sum / size ( ) ; <nl> + } <nl> + <nl> + private int size ( ) <nl> + { <nl> + return isFilled ? arrivalIntervals . length : index ; <nl> + } <nl> + <nl> + public double mean ( ) <nl> + { <nl> + return mean ; <nl> + } <nl> + <nl> + public long [ ] getArrivalIntervals ( ) <nl> + { <nl> + return arrivalIntervals ; <nl> + } <nl> + <nl> + } <nl> + <nl> class ArrivalWindow <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( ArrivalWindow . class ) ; <nl> private long tLast = 0L ; <nl> - private final BoundedStatsDeque arrivalIntervals ; <nl> + private final ArrayBackedBoundedStats arrivalIntervals ; <nl> <nl> / / this is useless except to provide backwards compatibility in phi _ convict _ threshold , <nl> / / because everyone seems pretty accustomed to the default of 8 , and users who have <nl> @ @ - 309 , 7 + 356 , 7 @ @ class ArrivalWindow <nl> <nl> ArrivalWindow ( int size ) <nl> { <nl> - arrivalIntervals = new BoundedStatsDeque ( size ) ; <nl> + arrivalIntervals = new ArrayBackedBoundedStats ( size ) ; <nl> } <nl> <nl> private static long getMaxInterval ( ) <nl> @ @ - 355 , 14 + 402 , 14 @ @ class ArrivalWindow <nl> / / see CASSANDRA - 2597 for an explanation of the math at work here . <nl> double phi ( long tnow ) <nl> { <nl> - assert arrivalIntervals . size ( ) > 0 & & tLast > 0 ; / / should not be called before any samples arrive <nl> + assert arrivalIntervals . mean ( ) > 0 & & tLast > 0 ; / / should not be called before any samples arrive <nl> long t = tnow - tLast ; <nl> return t / mean ( ) ; <nl> } <nl> <nl> public String toString ( ) <nl> { <nl> - return StringUtils . join ( arrivalIntervals . iterator ( ) , " " ) ; <nl> + return Arrays . toString ( arrivalIntervals . getArrivalIntervals ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java b / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java <nl> deleted file mode 100644 <nl> index 3983b74 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java <nl> + + + / dev / null <nl> @ @ - 1 , 72 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . utils ; <nl> - <nl> - import java . util . Iterator ; <nl> - import java . util . NoSuchElementException ; <nl> - import java . util . concurrent . LinkedBlockingDeque ; <nl> - import java . util . concurrent . atomic . AtomicLong ; <nl> - import java . util . concurrent . atomic . AtomicReference ; <nl> - <nl> - import com . google . common . util . concurrent . AtomicDouble ; <nl> - <nl> - / * * <nl> - * bounded threadsafe deque <nl> - * / <nl> - public class BoundedStatsDeque implements Iterable < Long > <nl> - { <nl> - private final LinkedBlockingDeque < Long > deque ; <nl> - private final AtomicLong sum ; <nl> - <nl> - public BoundedStatsDeque ( int size ) <nl> - { <nl> - deque = new LinkedBlockingDeque < > ( size ) ; <nl> - sum = new AtomicLong ( 0 ) ; <nl> - } <nl> - <nl> - public Iterator < Long > iterator ( ) <nl> - { <nl> - return deque . iterator ( ) ; <nl> - } <nl> - <nl> - public int size ( ) <nl> - { <nl> - return deque . size ( ) ; <nl> - } <nl> - <nl> - public void add ( long i ) <nl> - { <nl> - if ( ! deque . offer ( i ) ) <nl> - { <nl> - Long removed = deque . remove ( ) ; <nl> - sum . addAndGet ( - removed ) ; <nl> - deque . offer ( i ) ; <nl> - } <nl> - sum . addAndGet ( i ) ; <nl> - } <nl> - <nl> - public long sum ( ) <nl> - { <nl> - return sum . get ( ) ; <nl> - } <nl> - <nl> - public double mean ( ) <nl> - { <nl> - return size ( ) > 0 ? ( ( double ) sum ( ) ) / size ( ) : 0 ; <nl> - } <nl> - } <nl> diff - - git a / test / unit / org / apache / cassandra / gms / ArrayBackedBoundedStatsTest . java b / test / unit / org / apache / cassandra / gms / ArrayBackedBoundedStatsTest . java <nl> new file mode 100644 <nl> index 0000000 . . b6f4e07 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / gms / ArrayBackedBoundedStatsTest . java <nl> @ @ - 0 , 0 + 1 , 57 @ @ <nl> + package org . apache . cassandra . gms ; <nl> + <nl> + import java . util . Arrays ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> + public class ArrayBackedBoundedStatsTest { <nl> + <nl> + @ Test <nl> + public void test ( ) <nl> + { <nl> + int size = 4 ; <nl> + <nl> + ArrayBackedBoundedStats bsd = new ArrayBackedBoundedStats ( size ) ; <nl> + / / check the values for an empty result <nl> + assertEquals ( 0 , bsd . mean ( ) , 0 . 001d ) ; <nl> + <nl> + bsd . add ( 1L ) ; / / this one falls out , over limit <nl> + bsd . add ( 2L ) ; <nl> + bsd . add ( 3L ) ; <nl> + bsd . add ( 4L ) ; <nl> + bsd . add ( 5L ) ; <nl> + <nl> + / / verify that everything is in there <nl> + long [ ] expected = new long [ ] { 2 , 3 , 4 , 5 } ; <nl> + assertArrivalIntervals ( bsd , expected ) ; <nl> + <nl> + / / check results <nl> + assertEquals ( 3 . 5 , bsd . mean ( ) , 0 . 001d ) ; <nl> + } <nl> + <nl> + private void assertArrivalIntervals ( ArrayBackedBoundedStats bsd , long [ ] expected ) <nl> + { <nl> + Arrays . sort ( expected ) ; <nl> + Arrays . sort ( bsd . getArrivalIntervals ( ) ) ; <nl> + assertTrue ( Arrays . equals ( bsd . getArrivalIntervals ( ) , expected ) ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testMultipleRounds ( ) throws Exception <nl> + { <nl> + int size = 5 ; <nl> + ArrayBackedBoundedStats bsd = new ArrayBackedBoundedStats ( size ) ; <nl> + <nl> + for ( long i = 0 ; i < = 1000 ; i + + ) <nl> + { <nl> + bsd . add ( i ) ; <nl> + } <nl> + <nl> + long [ ] expected = new long [ ] { 1000 , 999 , 998 , 997 , 996 } ; <nl> + assertArrivalIntervals ( bsd , expected ) ; <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / utils / BoundedStatsDequeTest . java b / test / unit / org / apache / cassandra / utils / BoundedStatsDequeTest . java <nl> deleted file mode 100644 <nl> index b64a765 . . 0000000 <nl> - - - a / test / unit / org / apache / cassandra / utils / BoundedStatsDequeTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 66 + 0 , 0 @ @ <nl> - package org . apache . cassandra . utils ; <nl> - / * <nl> - * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , <nl> - * software distributed under the License is distributed on an <nl> - * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> - * KIND , either express or implied . See the License for the <nl> - * specific language governing permissions and limitations <nl> - * under the License . <nl> - * <nl> - * / <nl> - <nl> - <nl> - import static org . junit . Assert . * ; <nl> - <nl> - import java . util . Iterator ; <nl> - <nl> - import org . junit . Test ; <nl> - <nl> - public class BoundedStatsDequeTest <nl> - { <nl> - @ Test <nl> - public void test ( ) <nl> - { <nl> - int size = 4 ; <nl> - <nl> - BoundedStatsDeque bsd = new BoundedStatsDeque ( size ) ; <nl> - / / check the values for an empty result <nl> - assertEquals ( 0 , bsd . size ( ) ) ; <nl> - assertEquals ( 0 , bsd . sum ( ) , 0 . 001d ) ; <nl> - assertEquals ( 0 , bsd . mean ( ) , 0 . 001d ) ; <nl> - <nl> - bsd . add ( 1L ) ; / / this one falls out , over limit <nl> - bsd . add ( 2L ) ; <nl> - bsd . add ( 3L ) ; <nl> - bsd . add ( 4L ) ; <nl> - bsd . add ( 5L ) ; <nl> - <nl> - / / verify that everything is in there <nl> - Iterator < Long > iter = bsd . iterator ( ) ; <nl> - assertTrue ( iter . hasNext ( ) ) ; <nl> - assertEquals ( 2L , iter . next ( ) , 0 ) ; <nl> - assertTrue ( iter . hasNext ( ) ) ; <nl> - assertEquals ( 3L , iter . next ( ) , 0 ) ; <nl> - assertTrue ( iter . hasNext ( ) ) ; <nl> - assertEquals ( 4L , iter . next ( ) , 0 ) ; <nl> - assertTrue ( iter . hasNext ( ) ) ; <nl> - assertEquals ( 5L , iter . next ( ) , 0 ) ; <nl> - assertFalse ( iter . hasNext ( ) ) ; <nl> - <nl> - / / check results <nl> - assertEquals ( size , bsd . size ( ) ) ; <nl> - assertEquals ( 14 , bsd . sum ( ) , 0 . 001d ) ; <nl> - assertEquals ( 3 . 5 , bsd . mean ( ) , 0 . 001d ) ; <nl> - } <nl> - }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java b / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java <nl> index 3256564 . . 5d27608 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java <nl> + + + b / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java <nl> @ @ - 18 , 21 + 18 , 20 @ @ <nl> * / <nl> package org . apache . cassandra . utils ; <nl> <nl> - import java . util . ArrayDeque ; <nl> import java . util . Iterator ; <nl> + import java . util . NoSuchElementException ; <nl> + import java . util . concurrent . LinkedBlockingDeque ; <nl> <nl> / * * <nl> - * not threadsafe . caller is responsible for any locking necessary . <nl> + * bounded threadsafe deque <nl> * / <nl> public class BoundedStatsDeque extends AbstractStatsDeque <nl> { <nl> - private final int size ; <nl> - protected final ArrayDeque < Double > deque ; <nl> + protected final LinkedBlockingDeque < Double > deque ; <nl> <nl> public BoundedStatsDeque ( int size ) <nl> { <nl> - this . size = size ; <nl> - deque = new ArrayDeque < Double > ( size ) ; <nl> + deque = new LinkedBlockingDeque < Double > ( size ) ; <nl> } <nl> <nl> public Iterator < Double > iterator ( ) <nl> @ @ - 50 , 12 + 49 , 19 @ @ public class BoundedStatsDeque extends AbstractStatsDeque <nl> deque . clear ( ) ; <nl> } <nl> <nl> - public void add ( double o ) <nl> + public void add ( double i ) <nl> { <nl> - if ( size = = deque . size ( ) ) <nl> + if ( ! deque . offer ( i ) ) <nl> { <nl> - deque . remove ( ) ; <nl> + try <nl> + { <nl> + deque . remove ( ) ; <nl> + } <nl> + catch ( NoSuchElementException e ) <nl> + { <nl> + / / oops , clear ( ) beat us to it <nl> + } <nl> + deque . offer ( i ) ; <nl> } <nl> - deque . add ( o ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6d031f6 . . 753fb1c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 16 : 
 + * ArrivalWindow should use primitives ( CASSANDRA - 9496 ) 
 * Periodically submit background compaction tasks ( CASSANDRA - 9592 ) 
 * Set HAS _ MORE _ PAGES flag to false when PagingState is null ( CASSANDRA - 9571 ) 
 * Backport indexed value validation fix from CASSANDRA - 9057 ( CASSANDRA - 9564 ) 
 diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 index e247e48 . . 8fdd99f 100644 
 - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java 
 + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 @ @ - 27 , 14 + 27 , 12 @ @ import java . util . concurrent . TimeUnit ; 
 import javax . management . MBeanServer ; 
 import javax . management . ObjectName ; 
 
 - import org . apache . commons . lang3 . StringUtils ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . io . FSWriteError ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 - import org . apache . cassandra . utils . BoundedStatsDeque ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 / * * 
 @ @ - 289 , 11 + 287 , 60 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean 
 } 
 } 
 
 + / * 
 + This class is not thread safe . 
 + * / 
 + class ArrayBackedBoundedStats 
 + { 
 + private final long [ ] arrivalIntervals ; 
 + private long sum = 0 ; 
 + private int index = 0 ; 
 + private boolean isFilled = false ; 
 + private volatile double mean = 0 ; 
 + 
 + public ArrayBackedBoundedStats ( final int size ) 
 + { 
 + arrivalIntervals = new long [ size ] ; 
 + } 
 + 
 + public void add ( long interval ) 
 + { 
 + if ( index = = arrivalIntervals . length ) 
 + { 
 + isFilled = true ; 
 + index = 0 ; 
 + } 
 + 
 + if ( isFilled ) 
 + sum = sum - arrivalIntervals [ index ] ; 
 + 
 + arrivalIntervals [ index + + ] = interval ; 
 + sum + = interval ; 
 + mean = ( double ) sum / size ( ) ; 
 + } 
 + 
 + private int size ( ) 
 + { 
 + return isFilled ? arrivalIntervals . length : index ; 
 + } 
 + 
 + public double mean ( ) 
 + { 
 + return mean ; 
 + } 
 + 
 + public long [ ] getArrivalIntervals ( ) 
 + { 
 + return arrivalIntervals ; 
 + } 
 + 
 + } 
 + 
 class ArrivalWindow 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( ArrivalWindow . class ) ; 
 private long tLast = 0L ; 
 - private final BoundedStatsDeque arrivalIntervals ; 
 + private final ArrayBackedBoundedStats arrivalIntervals ; 
 
 / / this is useless except to provide backwards compatibility in phi _ convict _ threshold , 
 / / because everyone seems pretty accustomed to the default of 8 , and users who have 
 @ @ - 309 , 7 + 356 , 7 @ @ class ArrivalWindow 
 
 ArrivalWindow ( int size ) 
 { 
 - arrivalIntervals = new BoundedStatsDeque ( size ) ; 
 + arrivalIntervals = new ArrayBackedBoundedStats ( size ) ; 
 } 
 
 private static long getMaxInterval ( ) 
 @ @ - 355 , 14 + 402 , 14 @ @ class ArrivalWindow 
 / / see CASSANDRA - 2597 for an explanation of the math at work here . 
 double phi ( long tnow ) 
 { 
 - assert arrivalIntervals . size ( ) > 0 & & tLast > 0 ; / / should not be called before any samples arrive 
 + assert arrivalIntervals . mean ( ) > 0 & & tLast > 0 ; / / should not be called before any samples arrive 
 long t = tnow - tLast ; 
 return t / mean ( ) ; 
 } 
 
 public String toString ( ) 
 { 
 - return StringUtils . join ( arrivalIntervals . iterator ( ) , " " ) ; 
 + return Arrays . toString ( arrivalIntervals . getArrivalIntervals ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java b / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java 
 deleted file mode 100644 
 index 3983b74 . . 0000000 
 - - - a / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java 
 + + + / dev / null 
 @ @ - 1 , 72 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . utils ; 
 - 
 - import java . util . Iterator ; 
 - import java . util . NoSuchElementException ; 
 - import java . util . concurrent . LinkedBlockingDeque ; 
 - import java . util . concurrent . atomic . AtomicLong ; 
 - import java . util . concurrent . atomic . AtomicReference ; 
 - 
 - import com . google . common . util . concurrent . AtomicDouble ; 
 - 
 - / * * 
 - * bounded threadsafe deque 
 - * / 
 - public class BoundedStatsDeque implements Iterable < Long > 
 - { 
 - private final LinkedBlockingDeque < Long > deque ; 
 - private final AtomicLong sum ; 
 - 
 - public BoundedStatsDeque ( int size ) 
 - { 
 - deque = new LinkedBlockingDeque < > ( size ) ; 
 - sum = new AtomicLong ( 0 ) ; 
 - } 
 - 
 - public Iterator < Long > iterator ( ) 
 - { 
 - return deque . iterator ( ) ; 
 - } 
 - 
 - public int size ( ) 
 - { 
 - return deque . size ( ) ; 
 - } 
 - 
 - public void add ( long i ) 
 - { 
 - if ( ! deque . offer ( i ) ) 
 - { 
 - Long removed = deque . remove ( ) ; 
 - sum . addAndGet ( - removed ) ; 
 - deque . offer ( i ) ; 
 - } 
 - sum . addAndGet ( i ) ; 
 - } 
 - 
 - public long sum ( ) 
 - { 
 - return sum . get ( ) ; 
 - } 
 - 
 - public double mean ( ) 
 - { 
 - return size ( ) > 0 ? ( ( double ) sum ( ) ) / size ( ) : 0 ; 
 - } 
 - } 
 diff - - git a / test / unit / org / apache / cassandra / gms / ArrayBackedBoundedStatsTest . java b / test / unit / org / apache / cassandra / gms / ArrayBackedBoundedStatsTest . java 
 new file mode 100644 
 index 0000000 . . b6f4e07 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / gms / ArrayBackedBoundedStatsTest . java 
 @ @ - 0 , 0 + 1 , 57 @ @ 
 + package org . apache . cassandra . gms ; 
 + 
 + import java . util . Arrays ; 
 + 
 + import org . junit . Test ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertTrue ; 
 + 
 + public class ArrayBackedBoundedStatsTest { 
 + 
 + @ Test 
 + public void test ( ) 
 + { 
 + int size = 4 ; 
 + 
 + ArrayBackedBoundedStats bsd = new ArrayBackedBoundedStats ( size ) ; 
 + / / check the values for an empty result 
 + assertEquals ( 0 , bsd . mean ( ) , 0 . 001d ) ; 
 + 
 + bsd . add ( 1L ) ; / / this one falls out , over limit 
 + bsd . add ( 2L ) ; 
 + bsd . add ( 3L ) ; 
 + bsd . add ( 4L ) ; 
 + bsd . add ( 5L ) ; 
 + 
 + / / verify that everything is in there 
 + long [ ] expected = new long [ ] { 2 , 3 , 4 , 5 } ; 
 + assertArrivalIntervals ( bsd , expected ) ; 
 + 
 + / / check results 
 + assertEquals ( 3 . 5 , bsd . mean ( ) , 0 . 001d ) ; 
 + } 
 + 
 + private void assertArrivalIntervals ( ArrayBackedBoundedStats bsd , long [ ] expected ) 
 + { 
 + Arrays . sort ( expected ) ; 
 + Arrays . sort ( bsd . getArrivalIntervals ( ) ) ; 
 + assertTrue ( Arrays . equals ( bsd . getArrivalIntervals ( ) , expected ) ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testMultipleRounds ( ) throws Exception 
 + { 
 + int size = 5 ; 
 + ArrayBackedBoundedStats bsd = new ArrayBackedBoundedStats ( size ) ; 
 + 
 + for ( long i = 0 ; i < = 1000 ; i + + ) 
 + { 
 + bsd . add ( i ) ; 
 + } 
 + 
 + long [ ] expected = new long [ ] { 1000 , 999 , 998 , 997 , 996 } ; 
 + assertArrivalIntervals ( bsd , expected ) ; 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / utils / BoundedStatsDequeTest . java b / test / unit / org / apache / cassandra / utils / BoundedStatsDequeTest . java 
 deleted file mode 100644 
 index b64a765 . . 0000000 
 - - - a / test / unit / org / apache / cassandra / utils / BoundedStatsDequeTest . java 
 + + + / dev / null 
 @ @ - 1 , 66 + 0 , 0 @ @ 
 - package org . apache . cassandra . utils ; 
 - / * 
 - * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , 
 - * software distributed under the License is distributed on an 
 - * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 - * KIND , either express or implied . See the License for the 
 - * specific language governing permissions and limitations 
 - * under the License . 
 - * 
 - * / 
 - 
 - 
 - import static org . junit . Assert . * ; 
 - 
 - import java . util . Iterator ; 
 - 
 - import org . junit . Test ; 
 - 
 - public class BoundedStatsDequeTest 
 - { 
 - @ Test 
 - public void test ( ) 
 - { 
 - int size = 4 ; 
 - 
 - BoundedStatsDeque bsd = new BoundedStatsDeque ( size ) ; 
 - / / check the values for an empty result 
 - assertEquals ( 0 , bsd . size ( ) ) ; 
 - assertEquals ( 0 , bsd . sum ( ) , 0 . 001d ) ; 
 - assertEquals ( 0 , bsd . mean ( ) , 0 . 001d ) ; 
 - 
 - bsd . add ( 1L ) ; / / this one falls out , over limit 
 - bsd . add ( 2L ) ; 
 - bsd . add ( 3L ) ; 
 - bsd . add ( 4L ) ; 
 - bsd . add ( 5L ) ; 
 - 
 - / / verify that everything is in there 
 - Iterator < Long > iter = bsd . iterator ( ) ; 
 - assertTrue ( iter . hasNext ( ) ) ; 
 - assertEquals ( 2L , iter . next ( ) , 0 ) ; 
 - assertTrue ( iter . hasNext ( ) ) ; 
 - assertEquals ( 3L , iter . next ( ) , 0 ) ; 
 - assertTrue ( iter . hasNext ( ) ) ; 
 - assertEquals ( 4L , iter . next ( ) , 0 ) ; 
 - assertTrue ( iter . hasNext ( ) ) ; 
 - assertEquals ( 5L , iter . next ( ) , 0 ) ; 
 - assertFalse ( iter . hasNext ( ) ) ; 
 - 
 - / / check results 
 - assertEquals ( size , bsd . size ( ) ) ; 
 - assertEquals ( 14 , bsd . sum ( ) , 0 . 001d ) ; 
 - assertEquals ( 3 . 5 , bsd . mean ( ) , 0 . 001d ) ; 
 - } 
 - }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java b / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java 
 index 3256564 . . 5d27608 100644 
 - - - a / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java 
 + + + b / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java 
 @ @ - 18 , 21 + 18 , 20 @ @ 
 * / 
 package org . apache . cassandra . utils ; 
 
 - import java . util . ArrayDeque ; 
 import java . util . Iterator ; 
 + import java . util . NoSuchElementException ; 
 + import java . util . concurrent . LinkedBlockingDeque ; 
 
 / * * 
 - * not threadsafe . caller is responsible for any locking necessary . 
 + * bounded threadsafe deque 
 * / 
 public class BoundedStatsDeque extends AbstractStatsDeque 
 { 
 - private final int size ; 
 - protected final ArrayDeque < Double > deque ; 
 + protected final LinkedBlockingDeque < Double > deque ; 
 
 public BoundedStatsDeque ( int size ) 
 { 
 - this . size = size ; 
 - deque = new ArrayDeque < Double > ( size ) ; 
 + deque = new LinkedBlockingDeque < Double > ( size ) ; 
 } 
 
 public Iterator < Double > iterator ( ) 
 @ @ - 50 , 12 + 49 , 19 @ @ public class BoundedStatsDeque extends AbstractStatsDeque 
 deque . clear ( ) ; 
 } 
 
 - public void add ( double o ) 
 + public void add ( double i ) 
 { 
 - if ( size = = deque . size ( ) ) 
 + if ( ! deque . offer ( i ) ) 
 { 
 - deque . remove ( ) ; 
 + try 
 + { 
 + deque . remove ( ) ; 
 + } 
 + catch ( NoSuchElementException e ) 
 + { 
 + / / oops , clear ( ) beat us to it 
 + } 
 + deque . offer ( i ) ; 
 } 
 - deque . add ( o ) ; 
 } 
 }
