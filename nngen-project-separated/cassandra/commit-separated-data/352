BLEU SCORE: 0.014063699685797683

TEST MSG: Add ' nodetool getbatchlogreplaythrottle ' and ' nodetool setbatchlogreplaythrottle '
GENERATED MSG: Changing ` max _ hint _ window _ in _ ms ` at runtime

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 98c9cad . . aa98554 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Add ' nodetool getbatchlogreplaythrottle ' and ' nodetool setbatchlogreplaythrottle ' ( CASSANDRA - 13614 ) <nl> * fix race condition in PendingRepairManager ( CASSANDRA - 13659 ) <nl> * Allow noop incremental repair state transitions ( CASSANDRA - 13658 ) <nl> * Run repair with down replicas ( CASSANDRA - 10446 ) <nl> diff - - git a / src / java / org / apache / cassandra / batchlog / BatchlogManager . java b / src / java / org / apache / cassandra / batchlog / BatchlogManager . java <nl> index 321fca6 . . 9ca7acf 100644 <nl> - - - a / src / java / org / apache / cassandra / batchlog / BatchlogManager . java <nl> + + + b / src / java / org / apache / cassandra / batchlog / BatchlogManager . java <nl> @ @ - 76 , 6 + 76 , 8 @ @ public class BatchlogManager implements BatchlogManagerMBean <nl> / / Single - thread executor service for scheduling and serializing log replay . <nl> private final ScheduledExecutorService batchlogTasks ; <nl> <nl> + private final RateLimiter rateLimiter = RateLimiter . create ( Double . MAX _ VALUE ) ; <nl> + <nl> public BatchlogManager ( ) <nl> { <nl> ScheduledThreadPoolExecutor executor = new DebuggableScheduledThreadPoolExecutor ( " BatchlogTasks " ) ; <nl> @ @ - 194 , 8 + 196 , 7 @ @ public class BatchlogManager implements BatchlogManagerMBean <nl> logger . trace ( " Replay cancelled as there are no peers in the ring . " ) ; <nl> return ; <nl> } <nl> - int throttleInKB = DatabaseDescriptor . getBatchlogReplayThrottleInKB ( ) / endpointsCount ; <nl> - RateLimiter rateLimiter = RateLimiter . create ( throttleInKB = = 0 ? Double . MAX _ VALUE : throttleInKB * 1024 ) ; <nl> + setRate ( DatabaseDescriptor . getBatchlogReplayThrottleInKB ( ) ) ; <nl> <nl> UUID limitUuid = UUIDGen . maxTimeUUID ( System . currentTimeMillis ( ) - getBatchlogTimeout ( ) ) ; <nl> ColumnFamilyStore store = Keyspace . open ( SchemaConstants . SYSTEM _ KEYSPACE _ NAME ) . getColumnFamilyStore ( SystemKeyspace . BATCHES ) ; <nl> @ @ - 212 , 6 + 213 , 27 @ @ public class BatchlogManager implements BatchlogManagerMBean <nl> logger . trace ( " Finished replayFailedBatches " ) ; <nl> } <nl> <nl> + / * * <nl> + * Sets the rate for the current rate limiter . When { @ code throttleInKB } is 0 , this sets the rate to <nl> + * { @ link Double # MAX _ VALUE } bytes per second . <nl> + * <nl> + * @ param throttleInKB throughput to set in KB per second <nl> + * / <nl> + public void setRate ( final int throttleInKB ) <nl> + { <nl> + int endpointsCount = StorageService . instance . getTokenMetadata ( ) . getSizeOfAllEndpoints ( ) ; <nl> + if ( endpointsCount > 0 ) <nl> + { <nl> + int endpointThrottleInKB = throttleInKB / endpointsCount ; <nl> + double throughput = endpointThrottleInKB = = 0 ? Double . MAX _ VALUE : endpointThrottleInKB * 1024 . 0 ; <nl> + if ( rateLimiter . getRate ( ) ! = throughput ) <nl> + { <nl> + logger . debug ( " Updating batchlog replay throttle to { } KB / s , { } KB / s per endpoint " , throttleInKB , endpointThrottleInKB ) ; <nl> + rateLimiter . setRate ( throughput ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> / / read less rows ( batches ) per page if they are very large <nl> static int calculatePageSize ( ColumnFamilyStore store ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index a750901 . . e369982 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 1844 , 14 + 1844 , 19 @ @ public class DatabaseDescriptor <nl> return conf . hinted _ handoff _ throttle _ in _ kb ; <nl> } <nl> <nl> + public static void setHintedHandoffThrottleInKB ( int throttleInKB ) <nl> + { <nl> + conf . hinted _ handoff _ throttle _ in _ kb = throttleInKB ; <nl> + } <nl> + <nl> public static int getBatchlogReplayThrottleInKB ( ) <nl> { <nl> return conf . batchlog _ replay _ throttle _ in _ kb ; <nl> } <nl> <nl> - public static void setHintedHandoffThrottleInKB ( int throttleInKB ) <nl> + public static void setBatchlogReplayThrottleInKB ( int throttleInKB ) <nl> { <nl> - conf . hinted _ handoff _ throttle _ in _ kb = throttleInKB ; <nl> + conf . batchlog _ replay _ throttle _ in _ kb = throttleInKB ; <nl> } <nl> <nl> public static int getMaxHintsDeliveryThreads ( ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 2b3e633 . . 2bab471 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 1355 , 6 + 1355 , 17 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> CompactionManager . instance . setRate ( value ) ; <nl> } <nl> <nl> + public int getBatchlogReplayThrottleInKB ( ) <nl> + { <nl> + return DatabaseDescriptor . getBatchlogReplayThrottleInKB ( ) ; <nl> + } <nl> + <nl> + public void setBatchlogReplayThrottleInKB ( int throttleInKB ) <nl> + { <nl> + DatabaseDescriptor . setBatchlogReplayThrottleInKB ( throttleInKB ) ; <nl> + BatchlogManager . instance . setRate ( throttleInKB ) ; <nl> + } <nl> + <nl> public int getConcurrentCompactors ( ) <nl> { <nl> return DatabaseDescriptor . getConcurrentCompactors ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index 9f66a7e . . bd8aca6 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 514 , 6 + 514 , 9 @ @ public interface StorageServiceMBean extends NotificationEmitter <nl> public int getCompactionThroughputMbPerSec ( ) ; <nl> public void setCompactionThroughputMbPerSec ( int value ) ; <nl> <nl> + public int getBatchlogReplayThrottleInKB ( ) ; <nl> + public void setBatchlogReplayThrottleInKB ( int value ) ; <nl> + <nl> public int getConcurrentCompactors ( ) ; <nl> public void setConcurrentCompactors ( int value ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index fcae1f6 . . 2615412 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 1028 , 6 + 1028 , 16 @ @ public class NodeProbe implements AutoCloseable <nl> return ssProxy . getCompactionThroughputMbPerSec ( ) ; <nl> } <nl> <nl> + public void setBatchlogReplayThrottle ( int value ) <nl> + { <nl> + ssProxy . setBatchlogReplayThrottleInKB ( value ) ; <nl> + } <nl> + <nl> + public int getBatchlogReplayThrottle ( ) <nl> + { <nl> + return ssProxy . getBatchlogReplayThrottleInKB ( ) ; <nl> + } <nl> + <nl> public void setConcurrentCompactors ( int value ) <nl> { <nl> ssProxy . setConcurrentCompactors ( value ) ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeTool . java b / src / java / org / apache / cassandra / tools / NodeTool . java <nl> index 31a369d . . a117025 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeTool . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeTool . java <nl> @ @ - 77 , 6 + 77 , 7 @ @ public class NodeTool <nl> DisableGossip . class , <nl> EnableHandoff . class , <nl> GcStats . class , <nl> + GetBatchlogReplayTrottle . class , <nl> GetCompactionThreshold . class , <nl> GetCompactionThroughput . class , <nl> GetTimeout . class , <nl> @ @ - 104 , 6 + 105 , 7 @ @ public class NodeTool <nl> ReplayBatchlog . class , <nl> SetCacheCapacity . class , <nl> SetHintedHandoffThrottleInKB . class , <nl> + SetBatchlogReplayThrottle . class , <nl> SetCompactionThreshold . class , <nl> SetCompactionThroughput . class , <nl> GetConcurrentCompactors . class , <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / GetBatchlogReplayTrottle . java b / src / java / org / apache / cassandra / tools / nodetool / GetBatchlogReplayTrottle . java <nl> new file mode 100644 <nl> index 0000000 . . 661c495 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / GetBatchlogReplayTrottle . java <nl> @ @ - 0 , 0 + 1 , 33 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . tools . nodetool ; <nl> + <nl> + import io . airlift . airline . Command ; <nl> + import org . apache . cassandra . tools . NodeProbe ; <nl> + import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; <nl> + <nl> + @ Command ( name = " getbatchlogreplaythrottle " , description = " Print batchlog replay throttle in KB / s . " + <nl> + " This is reduced proportionally to the number of nodes in the cluster . " ) <nl> + public class GetBatchlogReplayTrottle extends NodeToolCmd <nl> + { <nl> + @ Override <nl> + public void execute ( NodeProbe probe ) <nl> + { <nl> + System . out . println ( " Batchlog replay throttle : " + probe . getBatchlogReplayThrottle ( ) + " KB / s " ) ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / SetBatchlogReplayThrottle . java b / src / java / org / apache / cassandra / tools / nodetool / SetBatchlogReplayThrottle . java <nl> new file mode 100644 <nl> index 0000000 . . 65bb8f5 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / SetBatchlogReplayThrottle . java <nl> @ @ - 0 , 0 + 1 , 37 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . tools . nodetool ; <nl> + <nl> + import io . airlift . airline . Arguments ; <nl> + import io . airlift . airline . Command ; <nl> + import org . apache . cassandra . tools . NodeProbe ; <nl> + import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; <nl> + <nl> + @ Command ( name = " setbatchlogreplaythrottle " , description = " Set batchlog replay throttle in KB per second , or 0 to disable throttling . " + <nl> + " This will be reduced proportionally to the number of nodes in the cluster . " ) <nl> + public class SetBatchlogReplayThrottle extends NodeToolCmd <nl> + { <nl> + @ Arguments ( title = " batchlog _ replay _ throttle " , usage = " < value _ in _ kb _ per _ sec > " , description = " Value in KB per second , 0 to disable throttling " , required = true ) <nl> + private Integer batchlogReplayThrottle = null ; <nl> + <nl> + @ Override <nl> + public void execute ( NodeProbe probe ) <nl> + { <nl> + probe . setBatchlogReplayThrottle ( batchlogReplayThrottle ) ; <nl> + } <nl> + } <nl> \ No newline at end of file
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 98c9cad . . aa98554 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Add ' nodetool getbatchlogreplaythrottle ' and ' nodetool setbatchlogreplaythrottle ' ( CASSANDRA - 13614 ) 
 * fix race condition in PendingRepairManager ( CASSANDRA - 13659 ) 
 * Allow noop incremental repair state transitions ( CASSANDRA - 13658 ) 
 * Run repair with down replicas ( CASSANDRA - 10446 ) 
 diff - - git a / src / java / org / apache / cassandra / batchlog / BatchlogManager . java b / src / java / org / apache / cassandra / batchlog / BatchlogManager . java 
 index 321fca6 . . 9ca7acf 100644 
 - - - a / src / java / org / apache / cassandra / batchlog / BatchlogManager . java 
 + + + b / src / java / org / apache / cassandra / batchlog / BatchlogManager . java 
 @ @ - 76 , 6 + 76 , 8 @ @ public class BatchlogManager implements BatchlogManagerMBean 
 / / Single - thread executor service for scheduling and serializing log replay . 
 private final ScheduledExecutorService batchlogTasks ; 
 
 + private final RateLimiter rateLimiter = RateLimiter . create ( Double . MAX _ VALUE ) ; 
 + 
 public BatchlogManager ( ) 
 { 
 ScheduledThreadPoolExecutor executor = new DebuggableScheduledThreadPoolExecutor ( " BatchlogTasks " ) ; 
 @ @ - 194 , 8 + 196 , 7 @ @ public class BatchlogManager implements BatchlogManagerMBean 
 logger . trace ( " Replay cancelled as there are no peers in the ring . " ) ; 
 return ; 
 } 
 - int throttleInKB = DatabaseDescriptor . getBatchlogReplayThrottleInKB ( ) / endpointsCount ; 
 - RateLimiter rateLimiter = RateLimiter . create ( throttleInKB = = 0 ? Double . MAX _ VALUE : throttleInKB * 1024 ) ; 
 + setRate ( DatabaseDescriptor . getBatchlogReplayThrottleInKB ( ) ) ; 
 
 UUID limitUuid = UUIDGen . maxTimeUUID ( System . currentTimeMillis ( ) - getBatchlogTimeout ( ) ) ; 
 ColumnFamilyStore store = Keyspace . open ( SchemaConstants . SYSTEM _ KEYSPACE _ NAME ) . getColumnFamilyStore ( SystemKeyspace . BATCHES ) ; 
 @ @ - 212 , 6 + 213 , 27 @ @ public class BatchlogManager implements BatchlogManagerMBean 
 logger . trace ( " Finished replayFailedBatches " ) ; 
 } 
 
 + / * * 
 + * Sets the rate for the current rate limiter . When { @ code throttleInKB } is 0 , this sets the rate to 
 + * { @ link Double # MAX _ VALUE } bytes per second . 
 + * 
 + * @ param throttleInKB throughput to set in KB per second 
 + * / 
 + public void setRate ( final int throttleInKB ) 
 + { 
 + int endpointsCount = StorageService . instance . getTokenMetadata ( ) . getSizeOfAllEndpoints ( ) ; 
 + if ( endpointsCount > 0 ) 
 + { 
 + int endpointThrottleInKB = throttleInKB / endpointsCount ; 
 + double throughput = endpointThrottleInKB = = 0 ? Double . MAX _ VALUE : endpointThrottleInKB * 1024 . 0 ; 
 + if ( rateLimiter . getRate ( ) ! = throughput ) 
 + { 
 + logger . debug ( " Updating batchlog replay throttle to { } KB / s , { } KB / s per endpoint " , throttleInKB , endpointThrottleInKB ) ; 
 + rateLimiter . setRate ( throughput ) ; 
 + } 
 + } 
 + } 
 + 
 / / read less rows ( batches ) per page if they are very large 
 static int calculatePageSize ( ColumnFamilyStore store ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index a750901 . . e369982 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 1844 , 14 + 1844 , 19 @ @ public class DatabaseDescriptor 
 return conf . hinted _ handoff _ throttle _ in _ kb ; 
 } 
 
 + public static void setHintedHandoffThrottleInKB ( int throttleInKB ) 
 + { 
 + conf . hinted _ handoff _ throttle _ in _ kb = throttleInKB ; 
 + } 
 + 
 public static int getBatchlogReplayThrottleInKB ( ) 
 { 
 return conf . batchlog _ replay _ throttle _ in _ kb ; 
 } 
 
 - public static void setHintedHandoffThrottleInKB ( int throttleInKB ) 
 + public static void setBatchlogReplayThrottleInKB ( int throttleInKB ) 
 { 
 - conf . hinted _ handoff _ throttle _ in _ kb = throttleInKB ; 
 + conf . batchlog _ replay _ throttle _ in _ kb = throttleInKB ; 
 } 
 
 public static int getMaxHintsDeliveryThreads ( ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 2b3e633 . . 2bab471 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 1355 , 6 + 1355 , 17 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 CompactionManager . instance . setRate ( value ) ; 
 } 
 
 + public int getBatchlogReplayThrottleInKB ( ) 
 + { 
 + return DatabaseDescriptor . getBatchlogReplayThrottleInKB ( ) ; 
 + } 
 + 
 + public void setBatchlogReplayThrottleInKB ( int throttleInKB ) 
 + { 
 + DatabaseDescriptor . setBatchlogReplayThrottleInKB ( throttleInKB ) ; 
 + BatchlogManager . instance . setRate ( throttleInKB ) ; 
 + } 
 + 
 public int getConcurrentCompactors ( ) 
 { 
 return DatabaseDescriptor . getConcurrentCompactors ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index 9f66a7e . . bd8aca6 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 514 , 6 + 514 , 9 @ @ public interface StorageServiceMBean extends NotificationEmitter 
 public int getCompactionThroughputMbPerSec ( ) ; 
 public void setCompactionThroughputMbPerSec ( int value ) ; 
 
 + public int getBatchlogReplayThrottleInKB ( ) ; 
 + public void setBatchlogReplayThrottleInKB ( int value ) ; 
 + 
 public int getConcurrentCompactors ( ) ; 
 public void setConcurrentCompactors ( int value ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index fcae1f6 . . 2615412 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 1028 , 6 + 1028 , 16 @ @ public class NodeProbe implements AutoCloseable 
 return ssProxy . getCompactionThroughputMbPerSec ( ) ; 
 } 
 
 + public void setBatchlogReplayThrottle ( int value ) 
 + { 
 + ssProxy . setBatchlogReplayThrottleInKB ( value ) ; 
 + } 
 + 
 + public int getBatchlogReplayThrottle ( ) 
 + { 
 + return ssProxy . getBatchlogReplayThrottleInKB ( ) ; 
 + } 
 + 
 public void setConcurrentCompactors ( int value ) 
 { 
 ssProxy . setConcurrentCompactors ( value ) ; 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeTool . java b / src / java / org / apache / cassandra / tools / NodeTool . java 
 index 31a369d . . a117025 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeTool . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeTool . java 
 @ @ - 77 , 6 + 77 , 7 @ @ public class NodeTool 
 DisableGossip . class , 
 EnableHandoff . class , 
 GcStats . class , 
 + GetBatchlogReplayTrottle . class , 
 GetCompactionThreshold . class , 
 GetCompactionThroughput . class , 
 GetTimeout . class , 
 @ @ - 104 , 6 + 105 , 7 @ @ public class NodeTool 
 ReplayBatchlog . class , 
 SetCacheCapacity . class , 
 SetHintedHandoffThrottleInKB . class , 
 + SetBatchlogReplayThrottle . class , 
 SetCompactionThreshold . class , 
 SetCompactionThroughput . class , 
 GetConcurrentCompactors . class , 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / GetBatchlogReplayTrottle . java b / src / java / org / apache / cassandra / tools / nodetool / GetBatchlogReplayTrottle . java 
 new file mode 100644 
 index 0000000 . . 661c495 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / GetBatchlogReplayTrottle . java 
 @ @ - 0 , 0 + 1 , 33 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . tools . nodetool ; 
 + 
 + import io . airlift . airline . Command ; 
 + import org . apache . cassandra . tools . NodeProbe ; 
 + import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; 
 + 
 + @ Command ( name = " getbatchlogreplaythrottle " , description = " Print batchlog replay throttle in KB / s . " + 
 + " This is reduced proportionally to the number of nodes in the cluster . " ) 
 + public class GetBatchlogReplayTrottle extends NodeToolCmd 
 + { 
 + @ Override 
 + public void execute ( NodeProbe probe ) 
 + { 
 + System . out . println ( " Batchlog replay throttle : " + probe . getBatchlogReplayThrottle ( ) + " KB / s " ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / SetBatchlogReplayThrottle . java b / src / java / org / apache / cassandra / tools / nodetool / SetBatchlogReplayThrottle . java 
 new file mode 100644 
 index 0000000 . . 65bb8f5 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / SetBatchlogReplayThrottle . java 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . tools . nodetool ; 
 + 
 + import io . airlift . airline . Arguments ; 
 + import io . airlift . airline . Command ; 
 + import org . apache . cassandra . tools . NodeProbe ; 
 + import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; 
 + 
 + @ Command ( name = " setbatchlogreplaythrottle " , description = " Set batchlog replay throttle in KB per second , or 0 to disable throttling . " + 
 + " This will be reduced proportionally to the number of nodes in the cluster . " ) 
 + public class SetBatchlogReplayThrottle extends NodeToolCmd 
 + { 
 + @ Arguments ( title = " batchlog _ replay _ throttle " , usage = " < value _ in _ kb _ per _ sec > " , description = " Value in KB per second , 0 to disable throttling " , required = true ) 
 + private Integer batchlogReplayThrottle = null ; 
 + 
 + @ Override 
 + public void execute ( NodeProbe probe ) 
 + { 
 + probe . setBatchlogReplayThrottle ( batchlogReplayThrottle ) ; 
 + } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
ELIMINATEDSENTENCE
