BLEU SCORE: 1.0

TEST MSG: Fix WaitQueueTest flakiness
GENERATED MSG: Fix WaitQueueTest flakiness

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / Util . java b / test / unit / org / apache / cassandra / Util . java <nl> index 254c21c . . 7efe6f4 100644 <nl> - - - a / test / unit / org / apache / cassandra / Util . java <nl> + + + b / test / unit / org / apache / cassandra / Util . java <nl> @ @ - 526 , 4 + 526 , 9 @ @ public class Util <nl> assert p = = newP ; <nl> } <nl> } <nl> + <nl> + public static void joinThread ( Thread thread ) throws InterruptedException <nl> + { <nl> + thread . join ( 10000 ) ; <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / concurrent / WaitQueueTest . java b / test / unit / org / apache / cassandra / concurrent / WaitQueueTest . java <nl> index 3e7cb7b . . 8e092c5 100644 <nl> - - - a / test / unit / org / apache / cassandra / concurrent / WaitQueueTest . java <nl> + + + b / test / unit / org / apache / cassandra / concurrent / WaitQueueTest . java <nl> @ @ - 21 , 10 + 21 , 13 @ @ package org . apache . cassandra . concurrent ; <nl> * / <nl> <nl> <nl> + import org . apache . cassandra . Util ; <nl> import org . apache . cassandra . utils . concurrent . WaitQueue ; <nl> import org . junit . * ; <nl> <nl> + import java . util . concurrent . ThreadLocalRandom ; <nl> import java . util . concurrent . atomic . AtomicBoolean ; <nl> + import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> import static org . junit . Assert . * ; <nl> <nl> @ @ - 38 , 6 + 41 , 7 @ @ public class WaitQueueTest <nl> } <nl> public void testSerial ( final WaitQueue queue ) throws InterruptedException <nl> { <nl> + AtomicInteger ready = new AtomicInteger ( ) ; <nl> Thread [ ] ts = new Thread [ 4 ] ; <nl> for ( int i = 0 ; i < ts . length ; i + + ) <nl> ts [ i ] = new Thread ( new Runnable ( ) <nl> @ @ - 46 , 6 + 50 , 7 @ @ public class WaitQueueTest <nl> public void run ( ) <nl> { <nl> WaitQueue . Signal wait = queue . register ( ) ; <nl> + ready . incrementAndGet ( ) ; <nl> try <nl> { <nl> wait . await ( ) ; <nl> @ @ - 55 , 68 + 60 , 28 @ @ public class WaitQueueTest <nl> } <nl> } <nl> } ) ; <nl> - for ( int i = 0 ; i < ts . length ; i + + ) <nl> - ts [ i ] . start ( ) ; <nl> - Thread . sleep ( 100 ) ; <nl> - queue . signal ( ) ; <nl> - queue . signal ( ) ; <nl> - queue . signal ( ) ; <nl> - queue . signal ( ) ; <nl> - for ( int i = 0 ; i < ts . length ; i + + ) <nl> + for ( Thread t : ts ) <nl> + t . start ( ) ; <nl> + final ThreadLocalRandom random = ThreadLocalRandom . current ( ) ; <nl> + while ( ready . get ( ) < ts . length ) <nl> + random . nextLong ( ) ; <nl> + for ( Thread t : ts ) <nl> + queue . signal ( ) ; <nl> + for ( Thread t : ts ) <nl> { <nl> - ts [ i ] . join ( 100 ) ; <nl> - assertFalse ( queue . getClass ( ) . getName ( ) , ts [ i ] . isAlive ( ) ) ; <nl> + Util . joinThread ( t ) ; <nl> + assertFalse ( queue . getClass ( ) . getName ( ) , t . isAlive ( ) ) ; <nl> } <nl> } <nl> <nl> - <nl> - @ Test <nl> - public void testCondition1 ( ) throws InterruptedException <nl> - { <nl> - testCondition1 ( new WaitQueue ( ) ) ; <nl> - } <nl> - <nl> - public void testCondition1 ( final WaitQueue queue ) throws InterruptedException <nl> - { <nl> - final AtomicBoolean cond1 = new AtomicBoolean ( false ) ; <nl> - final AtomicBoolean fail = new AtomicBoolean ( false ) ; <nl> - Thread t1 = new Thread ( new Runnable ( ) <nl> - { <nl> - @ Override <nl> - public void run ( ) <nl> - { <nl> - try <nl> - { <nl> - Thread . sleep ( 200 ) ; <nl> - } catch ( InterruptedException e ) <nl> - { <nl> - e . printStackTrace ( ) ; <nl> - } <nl> - WaitQueue . Signal wait = queue . register ( ) ; <nl> - if ( ! cond1 . get ( ) ) <nl> - { <nl> - System . err . println ( " Condition should have already been met " ) ; <nl> - fail . set ( true ) ; <nl> - } <nl> - } <nl> - } ) ; <nl> - t1 . start ( ) ; <nl> - Thread . sleep ( 50 ) ; <nl> - cond1 . set ( true ) ; <nl> - Thread . sleep ( 300 ) ; <nl> - queue . signal ( ) ; <nl> - t1 . join ( 300 ) ; <nl> - assertFalse ( queue . getClass ( ) . getName ( ) , t1 . isAlive ( ) ) ; <nl> - assertFalse ( fail . get ( ) ) ; <nl> - } <nl> - <nl> @ Test <nl> - public void testCondition2 ( ) throws InterruptedException <nl> + public void testCondition ( ) throws InterruptedException <nl> { <nl> - testCondition2 ( new WaitQueue ( ) ) ; <nl> + testCondition ( new WaitQueue ( ) ) ; <nl> } <nl> - public void testCondition2 ( final WaitQueue queue ) throws InterruptedException <nl> + public void testCondition ( final WaitQueue queue ) throws InterruptedException <nl> { <nl> + final AtomicBoolean ready = new AtomicBoolean ( false ) ; <nl> final AtomicBoolean condition = new AtomicBoolean ( false ) ; <nl> final AtomicBoolean fail = new AtomicBoolean ( false ) ; <nl> Thread t = new Thread ( new Runnable ( ) <nl> @ @ - 129 , 16 + 94 , 12 @ @ public class WaitQueueTest <nl> { <nl> System . err . println ( " " ) ; <nl> fail . set ( true ) ; <nl> + ready . set ( true ) ; <nl> + return ; <nl> } <nl> <nl> - try <nl> - { <nl> - Thread . sleep ( 200 ) ; <nl> - wait . await ( ) ; <nl> - } catch ( InterruptedException e ) <nl> - { <nl> - e . printStackTrace ( ) ; <nl> - } <nl> + ready . set ( true ) ; <nl> + wait . awaitUninterruptibly ( ) ; <nl> if ( ! condition . get ( ) ) <nl> { <nl> System . err . println ( " Woke up when condition not met " ) ; <nl> @ @ - 147 , 10 + 108 , 12 @ @ public class WaitQueueTest <nl> } <nl> } ) ; <nl> t . start ( ) ; <nl> - Thread . sleep ( 50 ) ; <nl> + final ThreadLocalRandom random = ThreadLocalRandom . current ( ) ; <nl> + while ( ! ready . get ( ) ) <nl> + random . nextLong ( ) ; <nl> condition . set ( true ) ; <nl> queue . signal ( ) ; <nl> - t . join ( 300 ) ; <nl> + Util . joinThread ( t ) ; <nl> assertFalse ( queue . getClass ( ) . getName ( ) , t . isAlive ( ) ) ; <nl> assertFalse ( fail . get ( ) ) ; <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / Util . java b / test / unit / org / apache / cassandra / Util . java 
 index 254c21c . . 7efe6f4 100644 
 - - - a / test / unit / org / apache / cassandra / Util . java 
 + + + b / test / unit / org / apache / cassandra / Util . java 
 @ @ - 526 , 4 + 526 , 9 @ @ public class Util 
 assert p = = newP ; 
 } 
 } 
 + 
 + public static void joinThread ( Thread thread ) throws InterruptedException 
 + { 
 + thread . join ( 10000 ) ; 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / concurrent / WaitQueueTest . java b / test / unit / org / apache / cassandra / concurrent / WaitQueueTest . java 
 index 3e7cb7b . . 8e092c5 100644 
 - - - a / test / unit / org / apache / cassandra / concurrent / WaitQueueTest . java 
 + + + b / test / unit / org / apache / cassandra / concurrent / WaitQueueTest . java 
 @ @ - 21 , 10 + 21 , 13 @ @ package org . apache . cassandra . concurrent ; 
 * / 
 
 
 + import org . apache . cassandra . Util ; 
 import org . apache . cassandra . utils . concurrent . WaitQueue ; 
 import org . junit . * ; 
 
 + import java . util . concurrent . ThreadLocalRandom ; 
 import java . util . concurrent . atomic . AtomicBoolean ; 
 + import java . util . concurrent . atomic . AtomicInteger ; 
 
 import static org . junit . Assert . * ; 
 
 @ @ - 38 , 6 + 41 , 7 @ @ public class WaitQueueTest 
 } 
 public void testSerial ( final WaitQueue queue ) throws InterruptedException 
 { 
 + AtomicInteger ready = new AtomicInteger ( ) ; 
 Thread [ ] ts = new Thread [ 4 ] ; 
 for ( int i = 0 ; i < ts . length ; i + + ) 
 ts [ i ] = new Thread ( new Runnable ( ) 
 @ @ - 46 , 6 + 50 , 7 @ @ public class WaitQueueTest 
 public void run ( ) 
 { 
 WaitQueue . Signal wait = queue . register ( ) ; 
 + ready . incrementAndGet ( ) ; 
 try 
 { 
 wait . await ( ) ; 
 @ @ - 55 , 68 + 60 , 28 @ @ public class WaitQueueTest 
 } 
 } 
 } ) ; 
 - for ( int i = 0 ; i < ts . length ; i + + ) 
 - ts [ i ] . start ( ) ; 
 - Thread . sleep ( 100 ) ; 
 - queue . signal ( ) ; 
 - queue . signal ( ) ; 
 - queue . signal ( ) ; 
 - queue . signal ( ) ; 
 - for ( int i = 0 ; i < ts . length ; i + + ) 
 + for ( Thread t : ts ) 
 + t . start ( ) ; 
 + final ThreadLocalRandom random = ThreadLocalRandom . current ( ) ; 
 + while ( ready . get ( ) < ts . length ) 
 + random . nextLong ( ) ; 
 + for ( Thread t : ts ) 
 + queue . signal ( ) ; 
 + for ( Thread t : ts ) 
 { 
 - ts [ i ] . join ( 100 ) ; 
 - assertFalse ( queue . getClass ( ) . getName ( ) , ts [ i ] . isAlive ( ) ) ; 
 + Util . joinThread ( t ) ; 
 + assertFalse ( queue . getClass ( ) . getName ( ) , t . isAlive ( ) ) ; 
 } 
 } 
 
 - 
 - @ Test 
 - public void testCondition1 ( ) throws InterruptedException 
 - { 
 - testCondition1 ( new WaitQueue ( ) ) ; 
 - } 
 - 
 - public void testCondition1 ( final WaitQueue queue ) throws InterruptedException 
 - { 
 - final AtomicBoolean cond1 = new AtomicBoolean ( false ) ; 
 - final AtomicBoolean fail = new AtomicBoolean ( false ) ; 
 - Thread t1 = new Thread ( new Runnable ( ) 
 - { 
 - @ Override 
 - public void run ( ) 
 - { 
 - try 
 - { 
 - Thread . sleep ( 200 ) ; 
 - } catch ( InterruptedException e ) 
 - { 
 - e . printStackTrace ( ) ; 
 - } 
 - WaitQueue . Signal wait = queue . register ( ) ; 
 - if ( ! cond1 . get ( ) ) 
 - { 
 - System . err . println ( " Condition should have already been met " ) ; 
 - fail . set ( true ) ; 
 - } 
 - } 
 - } ) ; 
 - t1 . start ( ) ; 
 - Thread . sleep ( 50 ) ; 
 - cond1 . set ( true ) ; 
 - Thread . sleep ( 300 ) ; 
 - queue . signal ( ) ; 
 - t1 . join ( 300 ) ; 
 - assertFalse ( queue . getClass ( ) . getName ( ) , t1 . isAlive ( ) ) ; 
 - assertFalse ( fail . get ( ) ) ; 
 - } 
 - 
 @ Test 
 - public void testCondition2 ( ) throws InterruptedException 
 + public void testCondition ( ) throws InterruptedException 
 { 
 - testCondition2 ( new WaitQueue ( ) ) ; 
 + testCondition ( new WaitQueue ( ) ) ; 
 } 
 - public void testCondition2 ( final WaitQueue queue ) throws InterruptedException 
 + public void testCondition ( final WaitQueue queue ) throws InterruptedException 
 { 
 + final AtomicBoolean ready = new AtomicBoolean ( false ) ; 
 final AtomicBoolean condition = new AtomicBoolean ( false ) ; 
 final AtomicBoolean fail = new AtomicBoolean ( false ) ; 
 Thread t = new Thread ( new Runnable ( ) 
 @ @ - 129 , 16 + 94 , 12 @ @ public class WaitQueueTest 
 { 
 System . err . println ( " " ) ; 
 fail . set ( true ) ; 
 + ready . set ( true ) ; 
 + return ; 
 } 
 
 - try 
 - { 
 - Thread . sleep ( 200 ) ; 
 - wait . await ( ) ; 
 - } catch ( InterruptedException e ) 
 - { 
 - e . printStackTrace ( ) ; 
 - } 
 + ready . set ( true ) ; 
 + wait . awaitUninterruptibly ( ) ; 
 if ( ! condition . get ( ) ) 
 { 
 System . err . println ( " Woke up when condition not met " ) ; 
 @ @ - 147 , 10 + 108 , 12 @ @ public class WaitQueueTest 
 } 
 } ) ; 
 t . start ( ) ; 
 - Thread . sleep ( 50 ) ; 
 + final ThreadLocalRandom random = ThreadLocalRandom . current ( ) ; 
 + while ( ! ready . get ( ) ) 
 + random . nextLong ( ) ; 
 condition . set ( true ) ; 
 queue . signal ( ) ; 
 - t . join ( 300 ) ; 
 + Util . joinThread ( t ) ; 
 assertFalse ( queue . getClass ( ) . getName ( ) , t . isAlive ( ) ) ; 
 assertFalse ( fail . get ( ) ) ; 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
