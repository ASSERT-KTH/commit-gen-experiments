BLEU SCORE: 0.02365431383455901

TEST MSG: Follow - up to CASSANDRA - 9265
GENERATED MSG: Add removed methods in FileUtils back . Patch by Nate McCall , reviewed by brandonwilliams for CASSANDRA - 1522

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / io / util / ChecksummedRandomAccessReader . java b / src / java / org / apache / cassandra / io / util / ChecksummedRandomAccessReader . java <nl> index 60b193a . . 442236d 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / ChecksummedRandomAccessReader . java <nl> + + + b / src / java / org / apache / cassandra / io / util / ChecksummedRandomAccessReader . java <nl> @ @ - 15 , 7 + 15 , 6 @ @ <nl> * See the License for the specific language governing permissions and <nl> * limitations under the License . <nl> * / <nl> - <nl> package org . apache . cassandra . io . util ; <nl> <nl> import java . io . File ; <nl> @ @ - 32 , 7 + 31 , 9 @ @ public class ChecksummedRandomAccessReader extends RandomAccessReader <nl> { <nl> public final File file ; <nl> <nl> - public CorruptFileException ( Exception cause , File file ) { <nl> + public CorruptFileException ( Exception cause , File file ) <nl> + { <nl> + super ( cause ) ; <nl> this . file = file ; <nl> } <nl> } <nl> @ @ - 40 , 7 + 41 , 8 @ @ public class ChecksummedRandomAccessReader extends RandomAccessReader <nl> private final DataIntegrityMetadata . ChecksumValidator validator ; <nl> private final File file ; <nl> <nl> - protected ChecksummedRandomAccessReader ( File file , ChannelProxy channel , DataIntegrityMetadata . ChecksumValidator validator ) throws IOException { <nl> + protected ChecksummedRandomAccessReader ( File file , ChannelProxy channel , DataIntegrityMetadata . ChecksumValidator validator ) <nl> + { <nl> super ( channel , validator . chunkSize , - 1 , BufferType . ON _ HEAP , null ) ; <nl> this . validator = validator ; <nl> this . file = file ; <nl> @ @ - 51 , 13 + 53 , 14 @ @ public class ChecksummedRandomAccessReader extends RandomAccessReader <nl> try ( ChannelProxy channel = new ChannelProxy ( file ) ) <nl> { <nl> RandomAccessReader crcReader = RandomAccessReader . open ( crcFile ) ; <nl> - DataIntegrityMetadata . ChecksumValidator validator = new DataIntegrityMetadata . ChecksumValidator ( new Adler32 ( ) , <nl> - crcReader , <nl> - file . getPath ( ) ) ; <nl> + @ SuppressWarnings ( " resource " ) <nl> + DataIntegrityMetadata . ChecksumValidator validator = <nl> + new DataIntegrityMetadata . ChecksumValidator ( new Adler32 ( ) , crcReader , file . getPath ( ) ) ; <nl> return new ChecksummedRandomAccessReader ( file , channel , validator ) ; <nl> } <nl> } <nl> <nl> + @ Override <nl> protected void reBuffer ( ) <nl> { <nl> long desiredPosition = current ( ) ; <nl> @ @ - 89 , 12 + 92 , 14 @ @ public class ChecksummedRandomAccessReader extends RandomAccessReader <nl> buffer . position ( ( int ) ( desiredPosition - bufferOffset ) ) ; <nl> } <nl> <nl> + @ Override <nl> public void seek ( long newPosition ) <nl> { <nl> validator . seek ( newPosition ) ; <nl> super . seek ( newPosition ) ; <nl> } <nl> <nl> + @ Override <nl> public void close ( ) <nl> { <nl> super . close ( ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / io / util / FileUtils . java b / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> index fc95204 . . 62c0f27 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> + + + b / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> @ @ - 83 , 6 + 83 , 19 @ @ public class FileUtils <nl> } <nl> } <nl> <nl> + public static void createFile ( String directory ) throws IOException <nl> + { <nl> + File file = new File ( directory ) ; <nl> + if ( ! file . exists ( ) ) <nl> + file . createNewFile ( ) ; <nl> + } <nl> + <nl> + public static boolean isExists ( String filename ) throws IOException <nl> + { <nl> + File file = new File ( filename ) ; <nl> + return file . exists ( ) ; <nl> + } <nl> + <nl> public static boolean delete ( String file ) <nl> { <nl> File f = new File ( file ) ; <nl> @ @ - 106 , 6 + 119 , 14 @ @ public class FileUtils <nl> return bVal ; <nl> } <nl> <nl> + public static void delete ( File [ ] files ) throws IOException <nl> + { <nl> + for ( File file : files ) <nl> + { <nl> + file . delete ( ) ; <nl> + } <nl> + } <nl> + <nl> public static String stringifyFileSize ( double value ) <nl> { <nl> double d ; <nl> @ @ - 139 , 6 + 160 , 29 @ @ public class FileUtils <nl> return val + " bytes " ; <nl> } <nl> } <nl> + <nl> + / * * <nl> + * calculate the total space used by a file or directory <nl> + * <nl> + * @ param path the path <nl> + * @ return total space used . <nl> + * / <nl> + public static long getUsedDiskSpaceForPath ( String path ) <nl> + { <nl> + File file = new File ( path ) ; <nl> + <nl> + if ( file . isFile ( ) ) <nl> + { <nl> + return file . length ( ) ; <nl> + } <nl> + <nl> + long diskSpace = 0 ; <nl> + for ( File childFile : file . listFiles ( ) ) <nl> + { <nl> + diskSpace + = getUsedDiskSpaceForPath ( childFile . getPath ( ) ) ; <nl> + } <nl> + return diskSpace ; <nl> + } <nl> <nl> / * * <nl> * Deletes all files and subdirectories under " dir " .

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / io / util / ChecksummedRandomAccessReader . java b / src / java / org / apache / cassandra / io / util / ChecksummedRandomAccessReader . java 
 index 60b193a . . 442236d 100644 
 - - - a / src / java / org / apache / cassandra / io / util / ChecksummedRandomAccessReader . java 
 + + + b / src / java / org / apache / cassandra / io / util / ChecksummedRandomAccessReader . java 
 @ @ - 15 , 7 + 15 , 6 @ @ 
 * See the License for the specific language governing permissions and 
 * limitations under the License . 
 * / 
 - 
 package org . apache . cassandra . io . util ; 
 
 import java . io . File ; 
 @ @ - 32 , 7 + 31 , 9 @ @ public class ChecksummedRandomAccessReader extends RandomAccessReader 
 { 
 public final File file ; 
 
 - public CorruptFileException ( Exception cause , File file ) { 
 + public CorruptFileException ( Exception cause , File file ) 
 + { 
 + super ( cause ) ; 
 this . file = file ; 
 } 
 } 
 @ @ - 40 , 7 + 41 , 8 @ @ public class ChecksummedRandomAccessReader extends RandomAccessReader 
 private final DataIntegrityMetadata . ChecksumValidator validator ; 
 private final File file ; 
 
 - protected ChecksummedRandomAccessReader ( File file , ChannelProxy channel , DataIntegrityMetadata . ChecksumValidator validator ) throws IOException { 
 + protected ChecksummedRandomAccessReader ( File file , ChannelProxy channel , DataIntegrityMetadata . ChecksumValidator validator ) 
 + { 
 super ( channel , validator . chunkSize , - 1 , BufferType . ON _ HEAP , null ) ; 
 this . validator = validator ; 
 this . file = file ; 
 @ @ - 51 , 13 + 53 , 14 @ @ public class ChecksummedRandomAccessReader extends RandomAccessReader 
 try ( ChannelProxy channel = new ChannelProxy ( file ) ) 
 { 
 RandomAccessReader crcReader = RandomAccessReader . open ( crcFile ) ; 
 - DataIntegrityMetadata . ChecksumValidator validator = new DataIntegrityMetadata . ChecksumValidator ( new Adler32 ( ) , 
 - crcReader , 
 - file . getPath ( ) ) ; 
 + @ SuppressWarnings ( " resource " ) 
 + DataIntegrityMetadata . ChecksumValidator validator = 
 + new DataIntegrityMetadata . ChecksumValidator ( new Adler32 ( ) , crcReader , file . getPath ( ) ) ; 
 return new ChecksummedRandomAccessReader ( file , channel , validator ) ; 
 } 
 } 
 
 + @ Override 
 protected void reBuffer ( ) 
 { 
 long desiredPosition = current ( ) ; 
 @ @ - 89 , 12 + 92 , 14 @ @ public class ChecksummedRandomAccessReader extends RandomAccessReader 
 buffer . position ( ( int ) ( desiredPosition - bufferOffset ) ) ; 
 } 
 
 + @ Override 
 public void seek ( long newPosition ) 
 { 
 validator . seek ( newPosition ) ; 
 super . seek ( newPosition ) ; 
 } 
 
 + @ Override 
 public void close ( ) 
 { 
 super . close ( ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / io / util / FileUtils . java b / src / java / org / apache / cassandra / io / util / FileUtils . java 
 index fc95204 . . 62c0f27 100644 
 - - - a / src / java / org / apache / cassandra / io / util / FileUtils . java 
 + + + b / src / java / org / apache / cassandra / io / util / FileUtils . java 
 @ @ - 83 , 6 + 83 , 19 @ @ public class FileUtils 
 } 
 } 
 
 + public static void createFile ( String directory ) throws IOException 
 + { 
 + File file = new File ( directory ) ; 
 + if ( ! file . exists ( ) ) 
 + file . createNewFile ( ) ; 
 + } 
 + 
 + public static boolean isExists ( String filename ) throws IOException 
 + { 
 + File file = new File ( filename ) ; 
 + return file . exists ( ) ; 
 + } 
 + 
 public static boolean delete ( String file ) 
 { 
 File f = new File ( file ) ; 
 @ @ - 106 , 6 + 119 , 14 @ @ public class FileUtils 
 return bVal ; 
 } 
 
 + public static void delete ( File [ ] files ) throws IOException 
 + { 
 + for ( File file : files ) 
 + { 
 + file . delete ( ) ; 
 + } 
 + } 
 + 
 public static String stringifyFileSize ( double value ) 
 { 
 double d ; 
 @ @ - 139 , 6 + 160 , 29 @ @ public class FileUtils 
 return val + " bytes " ; 
 } 
 } 
 + 
 + / * * 
 + * calculate the total space used by a file or directory 
 + * 
 + * @ param path the path 
 + * @ return total space used . 
 + * / 
 + public static long getUsedDiskSpaceForPath ( String path ) 
 + { 
 + File file = new File ( path ) ; 
 + 
 + if ( file . isFile ( ) ) 
 + { 
 + return file . length ( ) ; 
 + } 
 + 
 + long diskSpace = 0 ; 
 + for ( File childFile : file . listFiles ( ) ) 
 + { 
 + diskSpace + = getUsedDiskSpaceForPath ( childFile . getPath ( ) ) ; 
 + } 
 + return diskSpace ; 
 + } 
 
 / * * 
 * Deletes all files and subdirectories under " dir " .
