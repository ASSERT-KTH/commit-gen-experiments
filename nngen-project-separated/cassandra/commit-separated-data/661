BLEU SCORE: 0.04844232281716619

TEST MSG: Cleanup uses of AlterTableStatementColumn
GENERATED MSG: CQL3 : Allow renaming PK columns

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index a0f6055 . . 842f207 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 10 <nl> + * Cleanup uses of AlterTableStatementColumn ( CASSANDRA - 12567 ) <nl> * Tracing payload is passed through newSession ( . . ) ( CASSANDRA - 11706 ) <nl> * avoid deleting non existing sstable files and improve related log messages ( CASSANDRA - 12261 ) <nl> * json / yaml output format for nodetool compactionhistory ( CASSANDRA - 12486 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> index 1d1cbc3 . . 48666be 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> @ @ - 93 , 7 + 93 , 6 @ @ public class AlterTableStatement extends SchemaAlteringStatement <nl> CQL3Type . Raw dataType = null ; <nl> boolean isStatic = false ; <nl> CQL3Type validator = null ; <nl> - ColumnDefinition . Raw rawColumnName = null ; <nl> <nl> List < ViewDefinition > viewUpdates = null ; <nl> Iterable < ViewDefinition > views = View . findAll ( keyspace ( ) , columnFamily ( ) ) ; <nl> @ @ - 101 , 21 + 100 , 18 @ @ public class AlterTableStatement extends SchemaAlteringStatement <nl> switch ( oType ) <nl> { <nl> case ADD : <nl> + if ( cfm . isDense ( ) ) <nl> + throw new InvalidRequestException ( " Cannot add new column to a COMPACT STORAGE table " ) ; <nl> + <nl> for ( AlterTableStatementColumn colData : colNameList ) <nl> { <nl> - rawColumnName = colData . getColumnName ( ) ; <nl> - if ( rawColumnName ! = null ) <nl> - { <nl> - columnName = rawColumnName . getIdentifier ( cfm ) ; <nl> - def = cfm . getColumnDefinition ( columnName ) ; <nl> - dataType = colData . getColumnType ( ) ; <nl> - isStatic = colData . getStaticType ( ) ; <nl> - validator = dataType = = null ? null : dataType . prepare ( keyspace ( ) ) ; <nl> - } <nl> + columnName = colData . getColumnName ( ) . getIdentifier ( cfm ) ; <nl> + def = cfm . getColumnDefinition ( columnName ) ; <nl> + dataType = colData . getColumnType ( ) ; <nl> + assert dataType ! = null ; <nl> + isStatic = colData . getStaticType ( ) ; <nl> + validator = dataType . prepare ( keyspace ( ) ) ; <nl> <nl> - assert columnName ! = null ; <nl> - if ( cfm . isDense ( ) ) <nl> - throw new InvalidRequestException ( " Cannot add new column to a COMPACT STORAGE table " ) ; <nl> <nl> if ( isStatic ) <nl> { <nl> @ @ - 189 , 16 + 185 , 12 @ @ public class AlterTableStatement extends SchemaAlteringStatement <nl> break ; <nl> <nl> case ALTER : <nl> - rawColumnName = colNameList . get ( 0 ) . getColumnName ( ) ; <nl> - if ( rawColumnName ! = null ) <nl> - { <nl> - columnName = rawColumnName . getIdentifier ( cfm ) ; <nl> - def = cfm . getColumnDefinition ( columnName ) ; <nl> - dataType = colNameList . get ( 0 ) . getColumnType ( ) ; <nl> - validator = dataType = = null ? null : dataType . prepare ( keyspace ( ) ) ; <nl> - } <nl> + columnName = colNameList . get ( 0 ) . getColumnName ( ) . getIdentifier ( cfm ) ; <nl> + def = cfm . getColumnDefinition ( columnName ) ; <nl> + dataType = colNameList . get ( 0 ) . getColumnType ( ) ; <nl> + assert dataType ! = null ; <nl> + validator = dataType . prepare ( keyspace ( ) ) ; <nl> <nl> - assert columnName ! = null ; <nl> if ( def = = null ) <nl> throw new InvalidRequestException ( String . format ( " Column % s was not found in table % s " , columnName , columnFamily ( ) ) ) ; <nl> <nl> @ @ - 229 , 18 + 221 , 14 @ @ public class AlterTableStatement extends SchemaAlteringStatement <nl> break ; <nl> <nl> case DROP : <nl> + if ( ! cfm . isCQLTable ( ) ) <nl> + throw new InvalidRequestException ( " Cannot drop columns from a non - CQL3 table " ) ; <nl> + <nl> for ( AlterTableStatementColumn colData : colNameList ) <nl> { <nl> - columnName = null ; <nl> - rawColumnName = colData . getColumnName ( ) ; <nl> - if ( rawColumnName ! = null ) <nl> - { <nl> - columnName = rawColumnName . getIdentifier ( cfm ) ; <nl> - def = cfm . getColumnDefinition ( columnName ) ; <nl> - } <nl> - assert columnName ! = null ; <nl> - if ( ! cfm . isCQLTable ( ) ) <nl> - throw new InvalidRequestException ( " Cannot drop columns from a non - CQL3 table " ) ; <nl> + columnName = colData . getColumnName ( ) . getIdentifier ( cfm ) ; <nl> + def = cfm . getColumnDefinition ( columnName ) ; <nl> + <nl> if ( def = = null ) <nl> throw new InvalidRequestException ( String . format ( " Column % s was not found in table % s " , columnName , columnFamily ( ) ) ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatementColumn . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatementColumn . java <nl> index 480709f . . 7dea565 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatementColumn . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatementColumn . java <nl> @ @ - 20 , 6 + 20 , 11 @ @ package org . apache . cassandra . cql3 . statements ; <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> import org . apache . cassandra . cql3 . CQL3Type ; <nl> <nl> + / * * <nl> + * Stores a column name and optionally type for an Alter Table statement definition . <nl> + * <nl> + * This is used by AlterTableStatement to store the added , altered or dropped columns . <nl> + * / <nl> public class AlterTableStatementColumn <nl> { <nl> private final CQL3Type . Raw dataType ; <nl> @ @ - 28 , 14 + 33 , 15 @ @ public class AlterTableStatementColumn <nl> <nl> public AlterTableStatementColumn ( ColumnDefinition . Raw colName , CQL3Type . Raw dataType , boolean isStatic ) <nl> { <nl> - this . dataType = dataType ; <nl> + assert colName ! = null ; <nl> + this . dataType = dataType ; / / will be null when dropping columns , and never null otherwise ( for ADD and ALTER ) . <nl> this . colName = colName ; <nl> this . isStatic = isStatic ; <nl> } <nl> <nl> public AlterTableStatementColumn ( ColumnDefinition . Raw colName , CQL3Type . Raw dataType ) <nl> { <nl> - this ( colName , dataType , false ) ; <nl> + this ( colName , dataType , false ) ; <nl> } <nl> <nl> public AlterTableStatementColumn ( ColumnDefinition . Raw colName )
NEAREST DIFF (one line): diff - - git a / debian / init b / debian / init <nl> index 50fb6fe . . e144dd1 100644 <nl> - - - a / debian / init <nl> + + + b / debian / init <nl> @ @ - 141 , 6 + 141 , 7 @ @ do _ start ( ) <nl> - outfile / var / log / $ NAME / output . log \ <nl> - cp ` classpath ` \ <nl> - Dlog4j . configuration = log4j - server . properties \ <nl> + - Dlog4j . defaultInitOverride = true \ <nl> - XX : HeapDumpPath = " $ cassandra _ home / java _ ` date + % s ` . hprof " \ <nl> - XX : ErrorFile = " $ cassandra _ home / hs _ err _ ` date + % s ` . log " \ <nl> $ JVM _ OPTS \

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index a0f6055 . . 842f207 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 10 
 + * Cleanup uses of AlterTableStatementColumn ( CASSANDRA - 12567 ) 
 * Tracing payload is passed through newSession ( . . ) ( CASSANDRA - 11706 ) 
 * avoid deleting non existing sstable files and improve related log messages ( CASSANDRA - 12261 ) 
 * json / yaml output format for nodetool compactionhistory ( CASSANDRA - 12486 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 index 1d1cbc3 . . 48666be 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 @ @ - 93 , 7 + 93 , 6 @ @ public class AlterTableStatement extends SchemaAlteringStatement 
 CQL3Type . Raw dataType = null ; 
 boolean isStatic = false ; 
 CQL3Type validator = null ; 
 - ColumnDefinition . Raw rawColumnName = null ; 
 
 List < ViewDefinition > viewUpdates = null ; 
 Iterable < ViewDefinition > views = View . findAll ( keyspace ( ) , columnFamily ( ) ) ; 
 @ @ - 101 , 21 + 100 , 18 @ @ public class AlterTableStatement extends SchemaAlteringStatement 
 switch ( oType ) 
 { 
 case ADD : 
 + if ( cfm . isDense ( ) ) 
 + throw new InvalidRequestException ( " Cannot add new column to a COMPACT STORAGE table " ) ; 
 + 
 for ( AlterTableStatementColumn colData : colNameList ) 
 { 
 - rawColumnName = colData . getColumnName ( ) ; 
 - if ( rawColumnName ! = null ) 
 - { 
 - columnName = rawColumnName . getIdentifier ( cfm ) ; 
 - def = cfm . getColumnDefinition ( columnName ) ; 
 - dataType = colData . getColumnType ( ) ; 
 - isStatic = colData . getStaticType ( ) ; 
 - validator = dataType = = null ? null : dataType . prepare ( keyspace ( ) ) ; 
 - } 
 + columnName = colData . getColumnName ( ) . getIdentifier ( cfm ) ; 
 + def = cfm . getColumnDefinition ( columnName ) ; 
 + dataType = colData . getColumnType ( ) ; 
 + assert dataType ! = null ; 
 + isStatic = colData . getStaticType ( ) ; 
 + validator = dataType . prepare ( keyspace ( ) ) ; 
 
 - assert columnName ! = null ; 
 - if ( cfm . isDense ( ) ) 
 - throw new InvalidRequestException ( " Cannot add new column to a COMPACT STORAGE table " ) ; 
 
 if ( isStatic ) 
 { 
 @ @ - 189 , 16 + 185 , 12 @ @ public class AlterTableStatement extends SchemaAlteringStatement 
 break ; 
 
 case ALTER : 
 - rawColumnName = colNameList . get ( 0 ) . getColumnName ( ) ; 
 - if ( rawColumnName ! = null ) 
 - { 
 - columnName = rawColumnName . getIdentifier ( cfm ) ; 
 - def = cfm . getColumnDefinition ( columnName ) ; 
 - dataType = colNameList . get ( 0 ) . getColumnType ( ) ; 
 - validator = dataType = = null ? null : dataType . prepare ( keyspace ( ) ) ; 
 - } 
 + columnName = colNameList . get ( 0 ) . getColumnName ( ) . getIdentifier ( cfm ) ; 
 + def = cfm . getColumnDefinition ( columnName ) ; 
 + dataType = colNameList . get ( 0 ) . getColumnType ( ) ; 
 + assert dataType ! = null ; 
 + validator = dataType . prepare ( keyspace ( ) ) ; 
 
 - assert columnName ! = null ; 
 if ( def = = null ) 
 throw new InvalidRequestException ( String . format ( " Column % s was not found in table % s " , columnName , columnFamily ( ) ) ) ; 
 
 @ @ - 229 , 18 + 221 , 14 @ @ public class AlterTableStatement extends SchemaAlteringStatement 
 break ; 
 
 case DROP : 
 + if ( ! cfm . isCQLTable ( ) ) 
 + throw new InvalidRequestException ( " Cannot drop columns from a non - CQL3 table " ) ; 
 + 
 for ( AlterTableStatementColumn colData : colNameList ) 
 { 
 - columnName = null ; 
 - rawColumnName = colData . getColumnName ( ) ; 
 - if ( rawColumnName ! = null ) 
 - { 
 - columnName = rawColumnName . getIdentifier ( cfm ) ; 
 - def = cfm . getColumnDefinition ( columnName ) ; 
 - } 
 - assert columnName ! = null ; 
 - if ( ! cfm . isCQLTable ( ) ) 
 - throw new InvalidRequestException ( " Cannot drop columns from a non - CQL3 table " ) ; 
 + columnName = colData . getColumnName ( ) . getIdentifier ( cfm ) ; 
 + def = cfm . getColumnDefinition ( columnName ) ; 
 + 
 if ( def = = null ) 
 throw new InvalidRequestException ( String . format ( " Column % s was not found in table % s " , columnName , columnFamily ( ) ) ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatementColumn . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatementColumn . java 
 index 480709f . . 7dea565 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatementColumn . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatementColumn . java 
 @ @ - 20 , 6 + 20 , 11 @ @ package org . apache . cassandra . cql3 . statements ; 
 import org . apache . cassandra . config . ColumnDefinition ; 
 import org . apache . cassandra . cql3 . CQL3Type ; 
 
 + / * * 
 + * Stores a column name and optionally type for an Alter Table statement definition . 
 + * 
 + * This is used by AlterTableStatement to store the added , altered or dropped columns . 
 + * / 
 public class AlterTableStatementColumn 
 { 
 private final CQL3Type . Raw dataType ; 
 @ @ - 28 , 14 + 33 , 15 @ @ public class AlterTableStatementColumn 
 
 public AlterTableStatementColumn ( ColumnDefinition . Raw colName , CQL3Type . Raw dataType , boolean isStatic ) 
 { 
 - this . dataType = dataType ; 
 + assert colName ! = null ; 
 + this . dataType = dataType ; / / will be null when dropping columns , and never null otherwise ( for ADD and ALTER ) . 
 this . colName = colName ; 
 this . isStatic = isStatic ; 
 } 
 
 public AlterTableStatementColumn ( ColumnDefinition . Raw colName , CQL3Type . Raw dataType ) 
 { 
 - this ( colName , dataType , false ) ; 
 + this ( colName , dataType , false ) ; 
 } 
 
 public AlterTableStatementColumn ( ColumnDefinition . Raw colName )

NEAREST DIFF:
diff - - git a / debian / init b / debian / init 
 index 50fb6fe . . e144dd1 100644 
 - - - a / debian / init 
 + + + b / debian / init 
 @ @ - 141 , 6 + 141 , 7 @ @ do _ start ( ) 
 - outfile / var / log / $ NAME / output . log \ 
 - cp ` classpath ` \ 
 - Dlog4j . configuration = log4j - server . properties \ 
 + - Dlog4j . defaultInitOverride = true \ 
 - XX : HeapDumpPath = " $ cassandra _ home / java _ ` date + % s ` . hprof " \ 
 - XX : ErrorFile = " $ cassandra _ home / hs _ err _ ` date + % s ` . log " \ 
 $ JVM _ OPTS \
