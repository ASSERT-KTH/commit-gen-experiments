BLEU SCORE: 0.040583489434387374

TEST MSG: Change Windows Kernel default timer resolution
GENERATED MSG: Compaction throttling

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 1e2acc4 . . 16fe569 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 <nl> + * Change Windows kernel default timer resolution ( CASSANDRA - 9634 ) <nl> * Deprected sstable2json and json2sstable ( CASSANDRA - 9618 ) <nl> * Allow native functions in user - defined aggregates ( CASSANDRA - 9542 ) <nl> * Don ' t repair system _ distributed by default ( CASSANDRA - 9621 ) <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index ea22e01 . . dba8e1f 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 853 , 3 + 853 , 10 @ @ tracetype _ repair _ ttl : 604800 <nl> # This will inherently be backwards - incompatible with any 2 . 2 UDF that perform insecure <nl> # operations such as opening a socket or writing to the filesystem . <nl> enable _ user _ defined _ functions : false <nl> + <nl> + # The default Windows kernel timer and scheduling resolution is 15 . 6ms for power conservation . <nl> + # Lowering this value on Windows can provide much tighter latency and better throughput , however <nl> + # some virtualized environments may see a negative performance impact from changing this setting <nl> + # below their system default . The sysinternals ' clockres ' tool can confirm your system ' s default <nl> + # setting . <nl> + windows _ timer _ interval : 1 <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index 269f577 . . 5beeef2 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 259 , 6 + 259 , 8 @ @ public class Config <nl> public static final int otc _ coalescing _ window _ us _ default = 200 ; <nl> public int otc _ coalescing _ window _ us = otc _ coalescing _ window _ us _ default ; <nl> <nl> + public int windows _ timer _ interval = 0 ; <nl> + <nl> public boolean enable _ user _ defined _ functions = false ; <nl> <nl> public static boolean getOutboundBindAny ( ) <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index ad6b117 . . 443246e 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 1688 , 4 + 1688 , 9 @ @ public class DatabaseDescriptor <nl> { <nl> return conf . enable _ user _ defined _ functions ; <nl> } <nl> + <nl> + public static int getWindowsTimerInterval ( ) <nl> + { <nl> + return conf . windows _ timer _ interval ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index 59ecca7 . . 49e0c58 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 439 , 6 + 439 , 13 @ @ public class CassandraDaemon <nl> { <nl> String pidFile = System . getProperty ( " cassandra - pidfile " ) ; <nl> <nl> + if ( FBUtilities . isWindows ( ) ) <nl> + { <nl> + / / We need to adjust the system timer on windows from the default 15ms down to the minimum of 1ms as this <nl> + / / impacts timer intervals , thread scheduling , driver interrupts , etc . <nl> + WindowsTimer . startTimerPeriod ( DatabaseDescriptor . getWindowsTimerInterval ( ) ) ; <nl> + } <nl> + <nl> try <nl> { <nl> try <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 3edbe22 . . 19ef937 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 144 , 6 + 144 , 7 @ @ import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . JVMStabilityInspector ; <nl> import org . apache . cassandra . utils . OutputHandler ; <nl> import org . apache . cassandra . utils . Pair ; <nl> + import org . apache . cassandra . utils . WindowsTimer ; <nl> import org . apache . cassandra . utils . WrappedRunnable ; <nl> import org . apache . cassandra . utils . progress . ProgressEvent ; <nl> import org . apache . cassandra . utils . progress . ProgressEventType ; <nl> @ @ - 665 , 6 + 666 , 9 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> CommitLog . instance . shutdownBlocking ( ) ; <nl> <nl> + if ( FBUtilities . isWindows ( ) ) <nl> + WindowsTimer . endTimerPeriod ( DatabaseDescriptor . getWindowsTimerInterval ( ) ) ; <nl> + <nl> / / wait for miscellaneous tasks like sstable and commitlog segment deletion <nl> ScheduledExecutors . nonPeriodicTasks . shutdown ( ) ; <nl> if ( ! ScheduledExecutors . nonPeriodicTasks . awaitTermination ( 1 , TimeUnit . MINUTES ) ) <nl> @ @ - 709 , 6 + 713 , 9 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> { <nl> if ( drainOnShutdown ! = null ) <nl> Runtime . getRuntime ( ) . removeShutdownHook ( drainOnShutdown ) ; <nl> + <nl> + if ( FBUtilities . isWindows ( ) ) <nl> + WindowsTimer . endTimerPeriod ( DatabaseDescriptor . getWindowsTimerInterval ( ) ) ; <nl> } <nl> <nl> private boolean shouldBootstrap ( ) <nl> diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java <nl> index 333b956 . . 72a1b60 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Server . java <nl> + + + b / src / java / org / apache / cassandra / transport / Server . java <nl> @ @ - 136 , 7 + 136 , 6 @ @ public class Server implements CassandraDaemon . Server <nl> / / Configure the server . <nl> eventExecutorGroup = new RequestThreadPoolExecutor ( ) ; <nl> <nl> - <nl> boolean hasEpoll = enableEpoll ? Epoll . isAvailable ( ) : false ; <nl> if ( hasEpoll ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / utils / WindowsTimer . java b / src / java / org / apache / cassandra / utils / WindowsTimer . java <nl> new file mode 100644 <nl> index 0000000 . . 9db8559 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / utils / WindowsTimer . java <nl> @ @ - 0 , 0 + 1 , 65 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . utils ; <nl> + <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import com . sun . jna . LastErrorException ; <nl> + import com . sun . jna . Native ; <nl> + <nl> + public final class WindowsTimer <nl> + { <nl> + private static final Logger logger = LoggerFactory . getLogger ( WindowsTimer . class ) ; <nl> + <nl> + static <nl> + { <nl> + try <nl> + { <nl> + Native . register ( " winmm " ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + logger . error ( " Failed to register winmm . dll . Performance will be negatively impacted on this node . " ) ; <nl> + } <nl> + } <nl> + <nl> + private static native int timeBeginPeriod ( int period ) throws LastErrorException ; <nl> + private static native int timeEndPeriod ( int period ) throws LastErrorException ; <nl> + <nl> + private WindowsTimer ( ) { } <nl> + <nl> + public static void startTimerPeriod ( int period ) <nl> + { <nl> + if ( period = = 0 ) <nl> + return ; <nl> + assert ( period > 0 ) ; <nl> + if ( timeBeginPeriod ( period ) ! = 0 ) <nl> + logger . warn ( " Failed to set timer to : " + period + " . Performance will be degraded . " ) ; <nl> + } <nl> + <nl> + public static void endTimerPeriod ( int period ) <nl> + { <nl> + if ( period = = 0 ) <nl> + return ; <nl> + assert ( period > 0 ) ; <nl> + if ( timeEndPeriod ( period ) ! = 0 ) <nl> + logger . warn ( " Failed to end accelerated timer period . System timer will remain set to : " + period + " ms . " ) ; <nl> + } <nl> + } <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / Stress . java b / tools / stress / src / org / apache / cassandra / stress / Stress . java <nl> index 256cefb . . a4ec8a0 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / Stress . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / Stress . java <nl> @ @ - 22 , 6 + 22 , 8 @ @ import java . net . Socket ; <nl> import java . net . SocketException ; <nl> <nl> import org . apache . cassandra . stress . settings . StressSettings ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> + import org . apache . cassandra . utils . WindowsTimer ; <nl> <nl> public final class Stress <nl> { <nl> @ @ - 52 , 6 + 54 , 9 @ @ public final class Stress <nl> <nl> public static void main ( String [ ] arguments ) throws Exception <nl> { <nl> + if ( FBUtilities . isWindows ( ) ) <nl> + WindowsTimer . startTimerPeriod ( 1 ) ; <nl> + <nl> final StressSettings settings ; <nl> try <nl> { <nl> @ @ - 109 , 6 + 114 , 8 @ @ public final class Stress <nl> stressAction . run ( ) ; <nl> } <nl> <nl> + if ( FBUtilities . isWindows ( ) ) <nl> + WindowsTimer . endTimerPeriod ( 1 ) ; <nl> System . exit ( 0 ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index c7d0d6c . . 933671f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 18 , 7 + 18 , 7 @ @ <nl> * purge tombstones from row cache ( CASSANDRA - 2305 ) <nl> * push replication _ factor into strategy _ options ( CASSANDRA - 1263 ) <nl> * give snapshots the same name on each node ( CASSANDRA - 1791 ) <nl> - * add key type information ( CASSANDRA - 2311 ) <nl> + * add key type information and alias ( CASSANDRA - 2311 , 2396 ) <nl> <nl> <nl> 0 . 7 . 5 <nl> diff - - git a / interface / cassandra . thrift b / interface / cassandra . thrift <nl> index 79b9f6c . . 03cd187 100644 <nl> - - - a / interface / cassandra . thrift <nl> + + + b / interface / cassandra . thrift <nl> @ @ - 46 , 7 + 46 , 7 @ @ namespace rb CassandraThrift <nl> # for every edit that doesn ' t result in a change to major / minor . <nl> # <nl> # See the Semantic Versioning Specification ( SemVer ) http : / / semver . org . <nl> - const string VERSION = " 20 . 0 . 0 " <nl> + const string VERSION = " 20 . 1 . 0 " <nl> <nl> <nl> # <nl> @ @ - 394 , 6 + 394 , 7 @ @ struct CfDef { <nl> 25 : optional double merge _ shards _ chance , <nl> 26 : optional string key _ validation _ class , <nl> 27 : optional string row _ cache _ provider = " org . apache . cassandra . cache . ConcurrentLinkedHashCacheProvider " , <nl> + 28 : optional binary key _ alias , <nl> } <nl> <nl> / * describes a keyspace . * / <nl> diff - - git a / interface / thrift / gen - java / org / apache / cassandra / thrift / CfDef . java b / interface / thrift / gen - java / org / apache / cassandra / thrift / CfDef . java <nl> index 9a901ab . . 375bdba 100644 <nl> - - - a / interface / thrift / gen - java / org / apache / cassandra / thrift / CfDef . java <nl> + + + b / interface / thrift / gen - java / org / apache / cassandra / thrift / CfDef . java <nl> @ @ - 69 , 6 + 69 , 7 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav <nl> private static final org . apache . thrift . protocol . TField MERGE _ SHARDS _ CHANCE _ FIELD _ DESC = new org . apache . thrift . protocol . TField ( " merge _ shards _ chance " , org . apache . thrift . protocol . TType . DOUBLE , ( short ) 25 ) ; <nl> private static final org . apache . thrift . protocol . TField KEY _ VALIDATION _ CLASS _ FIELD _ DESC = new org . apache . thrift . protocol . TField ( " key _ validation _ class " , org . apache . thrift . protocol . TType . STRING , ( short ) 26 ) ; <nl> private static final org . apache . thrift . protocol . TField ROW _ CACHE _ PROVIDER _ FIELD _ DESC = new org . apache . thrift . protocol . TField ( " row _ cache _ provider " , org . apache . thrift . protocol . TType . STRING , ( short ) 27 ) ; <nl> + private static final org . apache . thrift . protocol . TField KEY _ ALIAS _ FIELD _ DESC = new org . apache . thrift . protocol . TField ( " key _ alias " , org . apache . thrift . protocol . TType . STRING , ( short ) 28 ) ; <nl> <nl> public String keyspace ; <nl> public String name ; <nl> @ @ - 94 , 6 + 95 , 7 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav <nl> public double merge _ shards _ chance ; <nl> public String key _ validation _ class ; <nl> public String row _ cache _ provider ; <nl> + public ByteBuffer key _ alias ; <nl> <nl> / * * The set of fields this struct contains , along with convenience methods for finding and manipulating them . * / <nl> public enum _ Fields implements org . apache . thrift . TFieldIdEnum { <nl> @ @ - 120 , 7 + 122 , 8 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav <nl> REPLICATE _ ON _ WRITE ( ( short ) 24 , " replicate _ on _ write " ) , <nl> MERGE _ SHARDS _ CHANCE ( ( short ) 25 , " merge _ shards _ chance " ) , <nl> KEY _ VALIDATION _ CLASS ( ( short ) 26 , " key _ validation _ class " ) , <nl> - ROW _ CACHE _ PROVIDER ( ( short ) 27 , " row _ cache _ provider " ) ; <nl> + ROW _ CACHE _ PROVIDER ( ( short ) 27 , " row _ cache _ provider " ) , <nl> + KEY _ ALIAS ( ( short ) 28 , " key _ alias " ) ; <nl> <nl> private static final Map < String , _ Fields > byName = new HashMap < String , _ Fields > ( ) ; <nl> <nl> @ @ - 183 , 6 + 186 , 8 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav <nl> return KEY _ VALIDATION _ CLASS ; <nl> case 27 : / / ROW _ CACHE _ PROVIDER <nl> return ROW _ CACHE _ PROVIDER ; <nl> + case 28 : / / KEY _ ALIAS <nl> + return KEY _ ALIAS ; <nl> default : <nl> return null ; <nl> } <nl> @ @ - 291 , 6 + 296 , 8 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav <nl> new org . apache . thrift . meta _ data . FieldValueMetaData ( org . apache . thrift . protocol . TType . STRING ) ) ) ; <nl> tmpMap . put ( _ Fields . ROW _ CACHE _ PROVIDER , new org . apache . thrift . meta _ data . FieldMetaData ( " row _ cache _ provider " , org . apache . thrift . TFieldRequirementType . OPTIONAL , <nl> new org . apache . thrift . meta _ data . FieldValueMetaData ( org . apache . thrift . protocol . TType . STRING ) ) ) ; <nl> + tmpMap . put ( _ Fields . KEY _ ALIAS , new org . apache . thrift . meta _ data . FieldMetaData ( " key _ alias " , org . apache . thrift . TFieldRequirementType . OPTIONAL , <nl> + new org . apache . thrift . meta _ data . FieldValueMetaData ( org . apache . thrift . protocol . TType . STRING , true ) ) ) ; <nl> metaDataMap = Collections . unmodifiableMap ( tmpMap ) ; <nl> org . apache . thrift . meta _ data . FieldMetaData . addStructMetaDataMap ( CfDef . class , metaDataMap ) ; <nl> } <nl> @ @ - 373 , 6 + 380 , 10 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav <nl> if ( other . isSetRow _ cache _ provider ( ) ) { <nl> this . row _ cache _ provider = other . row _ cache _ provider ; <nl> } <nl> + if ( other . isSetKey _ alias ( ) ) { <nl> + this . key _ alias = org . apache . thrift . TBaseHelper . copyBinary ( other . key _ alias ) ; <nl> + ; <nl> + } <nl> } <nl> <nl> public CfDef deepCopy ( ) { <nl> @ @ - 422 , 6 + 433 , 7 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav <nl> this . key _ validation _ class = null ; <nl> this . row _ cache _ provider = " org . apache . cassandra . cache . ConcurrentLinkedHashCacheProvider " ; <nl> <nl> + this . key _ alias = null ; <nl> } <nl> <nl> public String getKeyspace ( ) { <nl> @ @ - 1001 , 6 + 1013 , 40 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav <nl> } <nl> } <nl> <nl> + public byte [ ] getKey _ alias ( ) { <nl> + setKey _ alias ( org . apache . thrift . TBaseHelper . rightSize ( key _ alias ) ) ; <nl> + return key _ alias = = null ? null : key _ alias . array ( ) ; <nl> + } <nl> + <nl> + public ByteBuffer bufferForKey _ alias ( ) { <nl> + return key _ alias ; <nl> + } <nl> + <nl> + public CfDef setKey _ alias ( byte [ ] key _ alias ) { <nl> + setKey _ alias ( key _ alias = = null ? ( ByteBuffer ) null : ByteBuffer . wrap ( key _ alias ) ) ; <nl> + return this ; <nl> + } <nl> + <nl> + public CfDef setKey _ alias ( ByteBuffer key _ alias ) { <nl> + this . key _ alias = key _ alias ; <nl> + return this ; <nl> + } <nl> + <nl> + public void unsetKey _ alias ( ) { <nl> + this . key _ alias = null ; <nl> + } <nl> + <nl> + / * * Returns true if field key _ alias is set ( has been assigned a value ) and false otherwise * / <nl> + public boolean isSetKey _ alias ( ) { <nl> + return this . key _ alias ! = null ; <nl> + } <nl> + <nl> + public void setKey _ aliasIsSet ( boolean value ) { <nl> + if ( ! value ) { <nl> + this . key _ alias = null ; <nl> + } <nl> + } <nl> + <nl> public void setFieldValue ( _ Fields field , Object value ) { <nl> switch ( field ) { <nl> case KEYSPACE : <nl> @ @ - 1195 , 6 + 1241 , 14 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav <nl> } <nl> break ; <nl> <nl> + case KEY _ ALIAS : <nl> + if ( value = = null ) { <nl> + unsetKey _ alias ( ) ; <nl> + } else { <nl> + setKey _ alias ( ( ByteBuffer ) value ) ; <nl> + } <nl> + break ; <nl> + <nl> } <nl> } <nl> <nl> @ @ - 1272 , 6 + 1326 , 9 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav <nl> case ROW _ CACHE _ PROVIDER : <nl> return getRow _ cache _ provider ( ) ; <nl> <nl> + case KEY _ ALIAS : <nl> + return getKey _ alias ( ) ; <nl> + <nl> } <nl> throw new IllegalStateException ( ) ; <nl> } <nl> @ @ - 1331 , 6 + 1388 , 8 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav <nl> return isSetKey _ validation _ class ( ) ; <nl> case ROW _ CACHE _ PROVIDER : <nl> return isSetRow _ cache _ provider ( ) ; <nl> + case KEY _ ALIAS : <nl> + return isSetKey _ alias ( ) ; <nl> } <nl> throw new IllegalStateException ( ) ; <nl> } <nl> @ @ - 1564 , 6 + 1623 , 15 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav <nl> return false ; <nl> } <nl> <nl> + boolean this _ present _ key _ alias = true & & this . isSetKey _ alias ( ) ; <nl> + boolean that _ present _ key _ alias = true & & that . isSetKey _ alias ( ) ; <nl> + if ( this _ present _ key _ alias | | that _ present _ key _ alias ) { <nl> + if ( ! ( this _ present _ key _ alias & & that _ present _ key _ alias ) ) <nl> + return false ; <nl> + if ( ! this . key _ alias . equals ( that . key _ alias ) ) <nl> + return false ; <nl> + } <nl> + <nl> return true ; <nl> } <nl> <nl> @ @ - 1691 , 6 + 1759 , 11 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav <nl> if ( present _ row _ cache _ provider ) <nl> builder . append ( row _ cache _ provider ) ; <nl> <nl> + boolean present _ key _ alias = true & & ( isSetKey _ alias ( ) ) ; <nl> + builder . append ( present _ key _ alias ) ; <nl> + if ( present _ key _ alias ) <nl> + builder . append ( key _ alias ) ; <nl> + <nl> return builder . toHashCode ( ) ; <nl> } <nl> <nl> @ @ - 1942 , 6 + 2015 , 16 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav <nl> return lastComparison ; <nl> } <nl> } <nl> + lastComparison = Boolean . valueOf ( isSetKey _ alias ( ) ) . compareTo ( typedOther . isSetKey _ alias ( ) ) ; <nl> + if ( lastComparison ! = 0 ) { <nl> + return lastComparison ; <nl> + } <nl> + if ( isSetKey _ alias ( ) ) { <nl> + lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . key _ alias , typedOther . key _ alias ) ; <nl> + if ( lastComparison ! = 0 ) { <nl> + return lastComparison ; <nl> + } <nl> + } <nl> return 0 ; <nl> } <nl> <nl> @ @ - 2152 , 6 + 2235 , 13 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav <nl> org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , field . type ) ; <nl> } <nl> break ; <nl> + case 28 : / / KEY _ ALIAS <nl> + if ( field . type = = org . apache . thrift . protocol . TType . STRING ) { <nl> + this . key _ alias = iprot . readBinary ( ) ; <nl> + } else { <nl> + org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , field . type ) ; <nl> + } <nl> + break ; <nl> default : <nl> org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , field . type ) ; <nl> } <nl> @ @ - 2310 , 6 + 2400 , 13 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav <nl> oprot . writeFieldEnd ( ) ; <nl> } <nl> } <nl> + if ( this . key _ alias ! = null ) { <nl> + if ( isSetKey _ alias ( ) ) { <nl> + oprot . writeFieldBegin ( KEY _ ALIAS _ FIELD _ DESC ) ; <nl> + oprot . writeBinary ( this . key _ alias ) ; <nl> + oprot . writeFieldEnd ( ) ; <nl> + } <nl> + } <nl> oprot . writeFieldStop ( ) ; <nl> oprot . writeStructEnd ( ) ; <nl> } <nl> @ @ - 2498 , 6 + 2595 , 16 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav <nl> } <nl> first = false ; <nl> } <nl> + if ( isSetKey _ alias ( ) ) { <nl> + if ( ! first ) sb . append ( " , " ) ; <nl> + sb . append ( " key _ alias : " ) ; <nl> + if ( this . key _ alias = = null ) { <nl> + sb . append ( " null " ) ; <nl> + } else { <nl> + org . apache . thrift . TBaseHelper . toString ( this . key _ alias , sb ) ; <nl> + } <nl> + first = false ; <nl> + } <nl> sb . append ( " ) " ) ; <nl> return sb . toString ( ) ; <nl> } <nl> diff - - git a / interface / thrift / gen - java / org / apache / cassandra / thrift / Constants . java b / interface / thrift / gen - java / org / apache / cassandra / thrift / Constants . java <nl> index bb3036a . . 32602fb 100644 <nl> - - - a / interface / thrift / gen - java / org / apache / cassandra / thrift / Constants . java <nl> + + + b / interface / thrift / gen - java / org / apache / cassandra / thrift / Constants . java <nl> @ @ - 44 , 6 + 44 , 6 @ @ import org . slf4j . LoggerFactory ; <nl> <nl> public class Constants { <nl> <nl> - public static final String VERSION = " 20 . 0 . 0 " ; <nl> + public static final String VERSION = " 20 . 1 . 0 " ; <nl> <nl> } <nl> diff - - git a / src / avro / internode . genavro b / src / avro / internode . genavro <nl> index 23fe90b . . 2e0a40a 100644 <nl> - - - a / src / avro / internode . genavro <nl> + + + b / src / avro / internode . genavro <nl> @ @ - 64 , 6 + 64 , 7 @ @ protocol InterNode { <nl> union { int , null } id ; <nl> union { array < ColumnDef > , null } column _ metadata ; <nl> union { string , null } row _ cache _ provider = " org . apache . cassandra . cache . ConcurrentLinkedHashCacheProvider " ; <nl> + union { null , bytes } key _ alias = null ; <nl> } <nl> <nl> @ aliases ( [ " org . apache . cassandra . config . avro . KsDef " ] ) <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index 34587e3 . . c6b1e18 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 43 , 6 + 43 , 7 @ @ import org . apache . cassandra . db . marshal . TimeUUIDType ; <nl> import org . apache . cassandra . db . marshal . UTF8Type ; <nl> import org . apache . cassandra . db . migration . Migration ; <nl> import org . apache . cassandra . io . SerDeUtils ; <nl> + import org . apache . cassandra . thrift . InvalidRequestException ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . Pair ; <nl> @ @ - 131 , 7 + 132 , 7 @ @ public final class CFMetaData <nl> <nl> / / REQUIRED <nl> public final Integer cfId ; / / internal id , never exposed to user <nl> - public final String ksName ; / / name of keyspace <nl> + public final String ksName ; / / name of keyspace <nl> public final String cfName ; / / name of this column family <nl> public final ColumnFamilyType cfType ; / / standard , super <nl> public final AbstractType comparator ; / / bytes , long , timeuuid , utf8 , etc . <nl> @ @ - 155 , 6 + 156 , 7 @ @ public final class CFMetaData <nl> private double memtableOperationsInMillions ; / / default based on throughput <nl> private double mergeShardsChance ; / / default 0 . 1 , chance [ 0 . 0 , 1 . 0 ] of merging old shards during replication <nl> private IRowCacheProvider rowCacheProvider ; <nl> + private ByteBuffer keyAlias ; / / default NULL <nl> / / NOTE : if you find yourself adding members to this class , make sure you keep the convert methods in lockstep . <nl> <nl> private Map < ByteBuffer , ColumnDefinition > column _ metadata ; <nl> @ @ - 175 , 6 + 177 , 7 @ @ public final class CFMetaData <nl> public CFMetaData memSize ( int prop ) { memtableThroughputInMb = prop ; return this ; } <nl> public CFMetaData memOps ( double prop ) { memtableOperationsInMillions = prop ; return this ; } <nl> public CFMetaData mergeShardsChance ( double prop ) { mergeShardsChance = prop ; return this ; } <nl> + public CFMetaData keyAlias ( ByteBuffer prop ) { keyAlias = prop ; return this ; } <nl> public CFMetaData columnMetadata ( Map < ByteBuffer , ColumnDefinition > prop ) { column _ metadata = prop ; return this ; } <nl> public CFMetaData rowCacheProvider ( IRowCacheProvider prop ) { rowCacheProvider = prop ; return this ; } ; <nl> <nl> @ @ - 236 , 6 + 239 , 7 @ @ public final class CFMetaData <nl> defaultValidator = BytesType . instance ; <nl> keyValidator = BytesType . instance ; <nl> comment = " " ; <nl> + keyAlias = null ; / / This qualifies as a ' strange default ' . <nl> column _ metadata = new HashMap < ByteBuffer , ColumnDefinition > ( ) ; <nl> } <nl> <nl> @ @ - 335 , 6 + 339 , 7 @ @ public final class CFMetaData <nl> cf . memtable _ throughput _ in _ mb = memtableThroughputInMb ; <nl> cf . memtable _ operations _ in _ millions = memtableOperationsInMillions ; <nl> cf . merge _ shards _ chance = mergeShardsChance ; <nl> + cf . key _ alias = keyAlias ; <nl> cf . column _ metadata = SerDeUtils . createArray ( column _ metadata . size ( ) , <nl> org . apache . cassandra . db . migration . avro . ColumnDef . SCHEMA $ ) ; <nl> for ( ColumnDefinition cd : column _ metadata . values ( ) ) <nl> @ @ - 399 , 6 + 404 , 7 @ @ public final class CFMetaData <nl> throw new RuntimeException ( e ) ; <nl> } <nl> } <nl> + if ( cf . key _ alias ! = null ) { newCFMD . keyAlias ( cf . key _ alias ) ; } <nl> <nl> return newCFMD . comment ( cf . comment . toString ( ) ) <nl> . rowCacheSize ( cf . row _ cache _ size ) <nl> @ @ - 496 , 6 + 502 , 11 @ @ public final class CFMetaData <nl> return rowCacheProvider ; <nl> } <nl> <nl> + public ByteBuffer getKeyAlias ( ) <nl> + { <nl> + return keyAlias ; <nl> + } <nl> + <nl> public Map < ByteBuffer , ColumnDefinition > getColumn _ metadata ( ) <nl> { <nl> return Collections . unmodifiableMap ( column _ metadata ) ; <nl> @ @ - 506 , 7 + 517 , 7 @ @ public final class CFMetaData <nl> return superColumnName = = null ? comparator : subcolumnComparator ; <nl> } <nl> <nl> - public boolean equals ( Object obj ) <nl> + public boolean equals ( Object obj ) <nl> { <nl> if ( obj = = this ) <nl> { <nl> @ @ - 542 , 6 + 553 , 7 @ @ public final class CFMetaData <nl> . append ( memtableThroughputInMb , rhs . memtableThroughputInMb ) <nl> . append ( memtableOperationsInMillions , rhs . memtableOperationsInMillions ) <nl> . append ( mergeShardsChance , rhs . mergeShardsChance ) <nl> + . append ( keyAlias , rhs . keyAlias ) <nl> . isEquals ( ) ; <nl> } <nl> <nl> @ @ - 571 , 6 + 583 , 7 @ @ public final class CFMetaData <nl> . append ( memtableThroughputInMb ) <nl> . append ( memtableOperationsInMillions ) <nl> . append ( mergeShardsChance ) <nl> + . append ( keyAlias ) <nl> . toHashCode ( ) ; <nl> } <nl> <nl> @ @ - 612 , 7 + 625 , 49 @ @ public final class CFMetaData <nl> if ( ! cf _ def . isSetRow _ cache _ provider ( ) ) <nl> cf _ def . setRow _ cache _ provider ( CFMetaData . DEFAULT _ ROW _ CACHE _ PROVIDER ) ; <nl> } <nl> - <nl> + <nl> + public static CFMetaData convertToCFMetaData ( org . apache . cassandra . thrift . CfDef cf _ def ) throws InvalidRequestException , ConfigurationException <nl> + { <nl> + ColumnFamilyType cfType = ColumnFamilyType . create ( cf _ def . column _ type ) ; <nl> + if ( cfType = = null ) <nl> + { <nl> + throw new InvalidRequestException ( " Invalid column type " + cf _ def . column _ type ) ; <nl> + } <nl> + <nl> + applyImplicitDefaults ( cf _ def ) ; <nl> + <nl> + validateMinMaxCompactionThresholds ( cf _ def ) ; <nl> + validateMemtableSettings ( cf _ def ) ; <nl> + validateAliasCompares ( cf _ def ) ; <nl> + <nl> + CFMetaData newCFMD = new CFMetaData ( cf _ def . keyspace , <nl> + cf _ def . name , <nl> + cfType , <nl> + DatabaseDescriptor . getComparator ( cf _ def . comparator _ type ) , <nl> + cf _ def . subcomparator _ type = = null ? null : DatabaseDescriptor . getComparator ( cf _ def . subcomparator _ type ) ) ; <nl> + <nl> + if ( cf _ def . isSetGc _ grace _ seconds ( ) ) { newCFMD . gcGraceSeconds ( cf _ def . gc _ grace _ seconds ) ; } <nl> + if ( cf _ def . isSetMin _ compaction _ threshold ( ) ) { newCFMD . minCompactionThreshold ( cf _ def . min _ compaction _ threshold ) ; } <nl> + if ( cf _ def . isSetMax _ compaction _ threshold ( ) ) { newCFMD . maxCompactionThreshold ( cf _ def . max _ compaction _ threshold ) ; } <nl> + if ( cf _ def . isSetRow _ cache _ save _ period _ in _ seconds ( ) ) { newCFMD . rowCacheSavePeriod ( cf _ def . row _ cache _ save _ period _ in _ seconds ) ; } <nl> + if ( cf _ def . isSetKey _ cache _ save _ period _ in _ seconds ( ) ) { newCFMD . keyCacheSavePeriod ( cf _ def . key _ cache _ save _ period _ in _ seconds ) ; } <nl> + if ( cf _ def . isSetMemtable _ flush _ after _ mins ( ) ) { newCFMD . memTime ( cf _ def . memtable _ flush _ after _ mins ) ; } <nl> + if ( cf _ def . isSetMemtable _ throughput _ in _ mb ( ) ) { newCFMD . memSize ( cf _ def . memtable _ throughput _ in _ mb ) ; } <nl> + if ( cf _ def . isSetMemtable _ operations _ in _ millions ( ) ) { newCFMD . memOps ( cf _ def . memtable _ operations _ in _ millions ) ; } <nl> + if ( cf _ def . isSetMerge _ shards _ chance ( ) ) { newCFMD . mergeShardsChance ( cf _ def . merge _ shards _ chance ) ; } <nl> + if ( cf _ def . isSetRow _ cache _ provider ( ) ) { newCFMD . rowCacheProvider ( FBUtilities . newCacheProvider ( cf _ def . row _ cache _ provider ) ) ; } <nl> + if ( cf _ def . isSetKey _ alias ( ) ) { newCFMD . keyAlias ( cf _ def . key _ alias ) ; } <nl> + <nl> + return newCFMD . comment ( cf _ def . comment ) <nl> + . rowCacheSize ( cf _ def . row _ cache _ size ) <nl> + . keyCacheSize ( cf _ def . key _ cache _ size ) <nl> + . readRepairChance ( cf _ def . read _ repair _ chance ) <nl> + . replicateOnWrite ( cf _ def . replicate _ on _ write ) <nl> + . defaultValidator ( DatabaseDescriptor . getComparator ( cf _ def . default _ validation _ class ) ) <nl> + . keyValidator ( DatabaseDescriptor . getComparator ( cf _ def . key _ validation _ class ) ) <nl> + . columnMetadata ( ColumnDefinition . fromColumnDef ( cf _ def . column _ metadata ) ) ; <nl> + } <nl> + <nl> / / merges some final fields from this CFM with modifiable fields from CfDef into a new CFMetaData . <nl> public void apply ( org . apache . cassandra . db . migration . avro . CfDef cf _ def ) throws ConfigurationException <nl> { <nl> @ @ - 638 , 6 + 693 , 7 @ @ public final class CFMetaData <nl> <nl> validateMinMaxCompactionThresholds ( cf _ def ) ; <nl> validateMemtableSettings ( cf _ def ) ; <nl> + validateAliasCompares ( cf _ def ) ; <nl> <nl> comment = enforceCommentNotNull ( cf _ def . comment ) ; <nl> rowCacheSize = cf _ def . row _ cache _ size ; <nl> @ @ - 657 , 7 + 713 , 8 @ @ public final class CFMetaData <nl> mergeShardsChance = cf _ def . merge _ shards _ chance ; <nl> if ( cf _ def . row _ cache _ provider ! = null ) <nl> rowCacheProvider = FBUtilities . newCacheProvider ( cf _ def . row _ cache _ provider . toString ( ) ) ; <nl> - <nl> + keyAlias = cf _ def . key _ alias ; <nl> + <nl> / / adjust secondary indexes . figure out who is coming and going . <nl> Set < ByteBuffer > toRemove = new HashSet < ByteBuffer > ( ) ; <nl> Set < ByteBuffer > newIndexNames = new HashSet < ByteBuffer > ( ) ; <nl> @ @ - 723 , 6 + 780 , 7 @ @ public final class CFMetaData <nl> def . setMemtable _ throughput _ in _ mb ( cfm . memtableThroughputInMb ) ; <nl> def . setMemtable _ operations _ in _ millions ( cfm . memtableOperationsInMillions ) ; <nl> def . setMerge _ shards _ chance ( cfm . mergeShardsChance ) ; <nl> + def . setKey _ alias ( cfm . keyAlias ) ; <nl> List < org . apache . cassandra . thrift . ColumnDef > column _ meta = new ArrayList < org . apache . cassandra . thrift . ColumnDef > ( cfm . column _ metadata . size ( ) ) ; <nl> for ( ColumnDefinition cd : cfm . column _ metadata . values ( ) ) <nl> { <nl> @ @ - 767 , 6 + 825 , 7 @ @ public final class CFMetaData <nl> def . memtable _ operations _ in _ millions = cfm . memtableOperationsInMillions ; <nl> def . merge _ shards _ chance = cfm . mergeShardsChance ; <nl> def . key _ validation _ class = cfm . keyValidator . getClass ( ) . getName ( ) ; <nl> + def . key _ alias = cfm . keyAlias ; <nl> List < org . apache . cassandra . db . migration . avro . ColumnDef > column _ meta = new ArrayList < org . apache . cassandra . db . migration . avro . ColumnDef > ( cfm . column _ metadata . size ( ) ) ; <nl> for ( ColumnDefinition cd : cfm . column _ metadata . values ( ) ) <nl> { <nl> @ @ - 807 , 6 + 866 , 7 @ @ public final class CFMetaData <nl> newDef . row _ cache _ size = def . getRow _ cache _ size ( ) ; <nl> newDef . subcomparator _ type = def . getSubcomparator _ type ( ) ; <nl> newDef . merge _ shards _ chance = def . getMerge _ shards _ chance ( ) ; <nl> + newDef . key _ alias = def . key _ alias ; <nl> <nl> List < org . apache . cassandra . db . migration . avro . ColumnDef > columnMeta = new ArrayList < org . apache . cassandra . db . migration . avro . ColumnDef > ( ) ; <nl> if ( def . isSetColumn _ metadata ( ) ) <nl> @ @ - 905 , 6 + 965 , 20 @ @ public final class CFMetaData <nl> DatabaseDescriptor . validateMemtableOperations ( cf _ def . memtable _ operations _ in _ millions ) ; <nl> } <nl> <nl> + public static void validateAliasCompares ( org . apache . cassandra . thrift . CfDef cf _ def ) throws ConfigurationException <nl> + { <nl> + AbstractType comparator = DatabaseDescriptor . getComparator ( cf _ def . comparator _ type ) ; <nl> + if ( cf _ def . key _ alias ! = null ) <nl> + comparator . validate ( cf _ def . key _ alias ) ; <nl> + } <nl> + <nl> + public static void validateAliasCompares ( org . apache . cassandra . db . migration . avro . CfDef cf _ def ) throws ConfigurationException <nl> + { <nl> + AbstractType comparator = DatabaseDescriptor . getComparator ( cf _ def . comparator _ type ) ; <nl> + if ( cf _ def . key _ alias ! = null ) <nl> + comparator . validate ( cf _ def . key _ alias ) ; <nl> + } <nl> + <nl> @ Override <nl> public String toString ( ) <nl> { <nl> @ @ - 931 , 6 + 1005 , 7 @ @ public final class CFMetaData <nl> . append ( " memtableThroughputInMb " , memtableThroughputInMb ) <nl> . append ( " memtableOperationsInMillions " , memtableOperationsInMillions ) <nl> . append ( " mergeShardsChance " , mergeShardsChance ) <nl> + . append ( " keyAlias " , keyAlias ) <nl> . append ( " column _ metadata " , column _ metadata ) <nl> . toString ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> index affc073 . . 8f52579 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> @ @ - 790 , 7 + 790 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> <nl> try <nl> { <nl> - applyMigrationOnStage ( new AddColumnFamily ( convertToCFMetaData ( cf _ def ) ) ) ; <nl> + applyMigrationOnStage ( new AddColumnFamily ( CFMetaData . convertToCFMetaData ( cf _ def ) ) ) ; <nl> return DatabaseDescriptor . getDefsVersion ( ) . toString ( ) ; <nl> } <nl> catch ( ConfigurationException e ) <nl> @ @ - 855 , 7 + 855 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> for ( CfDef cfDef : ks _ def . cf _ defs ) <nl> { <nl> ThriftValidation . validateCfDef ( cfDef ) ; <nl> - cfDefs . add ( convertToCFMetaData ( cfDef ) ) ; <nl> + cfDefs . add ( CFMetaData . convertToCFMetaData ( cfDef ) ) ; <nl> } <nl> <nl> / / Attempt to instantiate the ARS , which will throw a ConfigException if <nl> @ @ - 996 , 45 + 996 , 6 @ @ public class CassandraServer implements Cassandra . Iface <nl> throw new SchemaDisagreementException ( ) ; <nl> } <nl> <nl> - / / @ see CFMetaData . applyImplicitDefaults ( ) . <nl> - private CFMetaData convertToCFMetaData ( CfDef cf _ def ) throws InvalidRequestException , ConfigurationException <nl> - { <nl> - ColumnFamilyType cfType = ColumnFamilyType . create ( cf _ def . column _ type ) ; <nl> - if ( cfType = = null ) <nl> - { <nl> - throw new InvalidRequestException ( " Invalid column type " + cf _ def . column _ type ) ; <nl> - } <nl> - <nl> - CFMetaData . applyImplicitDefaults ( cf _ def ) ; <nl> - CFMetaData . validateMinMaxCompactionThresholds ( cf _ def ) ; <nl> - CFMetaData . validateMemtableSettings ( cf _ def ) ; <nl> - <nl> - CFMetaData newCFMD = new CFMetaData ( cf _ def . keyspace , <nl> - cf _ def . name , <nl> - cfType , <nl> - DatabaseDescriptor . getComparator ( cf _ def . comparator _ type ) , <nl> - cf _ def . subcomparator _ type = = null ? null : DatabaseDescriptor . getComparator ( cf _ def . subcomparator _ type ) ) ; <nl> - <nl> - if ( cf _ def . isSetGc _ grace _ seconds ( ) ) { newCFMD . gcGraceSeconds ( cf _ def . gc _ grace _ seconds ) ; } <nl> - if ( cf _ def . isSetMin _ compaction _ threshold ( ) ) { newCFMD . minCompactionThreshold ( cf _ def . min _ compaction _ threshold ) ; } <nl> - if ( cf _ def . isSetMax _ compaction _ threshold ( ) ) { newCFMD . maxCompactionThreshold ( cf _ def . max _ compaction _ threshold ) ; } <nl> - if ( cf _ def . isSetRow _ cache _ save _ period _ in _ seconds ( ) ) { newCFMD . rowCacheSavePeriod ( cf _ def . row _ cache _ save _ period _ in _ seconds ) ; } <nl> - if ( cf _ def . isSetKey _ cache _ save _ period _ in _ seconds ( ) ) { newCFMD . keyCacheSavePeriod ( cf _ def . key _ cache _ save _ period _ in _ seconds ) ; } <nl> - if ( cf _ def . isSetMemtable _ flush _ after _ mins ( ) ) { newCFMD . memTime ( cf _ def . memtable _ flush _ after _ mins ) ; } <nl> - if ( cf _ def . isSetMemtable _ throughput _ in _ mb ( ) ) { newCFMD . memSize ( cf _ def . memtable _ throughput _ in _ mb ) ; } <nl> - if ( cf _ def . isSetMemtable _ operations _ in _ millions ( ) ) { newCFMD . memOps ( cf _ def . memtable _ operations _ in _ millions ) ; } <nl> - if ( cf _ def . isSetMerge _ shards _ chance ( ) ) { newCFMD . mergeShardsChance ( cf _ def . merge _ shards _ chance ) ; } <nl> - if ( cf _ def . isSetRow _ cache _ provider ( ) ) { newCFMD . rowCacheProvider ( FBUtilities . newCacheProvider ( cf _ def . row _ cache _ provider ) ) ; } <nl> - <nl> - return newCFMD . comment ( cf _ def . comment ) <nl> - . rowCacheSize ( cf _ def . row _ cache _ size ) <nl> - . keyCacheSize ( cf _ def . key _ cache _ size ) <nl> - . readRepairChance ( cf _ def . read _ repair _ chance ) <nl> - . replicateOnWrite ( cf _ def . replicate _ on _ write ) <nl> - . defaultValidator ( DatabaseDescriptor . getComparator ( cf _ def . default _ validation _ class ) ) <nl> - . columnMetadata ( ColumnDefinition . fromColumnDef ( cf _ def . column _ metadata ) ) ; <nl> - } <nl> - <nl> public void truncate ( String cfname ) throws InvalidRequestException , UnavailableException , TException <nl> { <nl> logger . debug ( " truncating { } in { } " , cfname , state ( ) . getKeyspace ( ) ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 1e2acc4 . . 16fe569 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 
 + * Change Windows kernel default timer resolution ( CASSANDRA - 9634 ) 
 * Deprected sstable2json and json2sstable ( CASSANDRA - 9618 ) 
 * Allow native functions in user - defined aggregates ( CASSANDRA - 9542 ) 
 * Don ' t repair system _ distributed by default ( CASSANDRA - 9621 ) 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index ea22e01 . . dba8e1f 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 853 , 3 + 853 , 10 @ @ tracetype _ repair _ ttl : 604800 
 # This will inherently be backwards - incompatible with any 2 . 2 UDF that perform insecure 
 # operations such as opening a socket or writing to the filesystem . 
 enable _ user _ defined _ functions : false 
 + 
 + # The default Windows kernel timer and scheduling resolution is 15 . 6ms for power conservation . 
 + # Lowering this value on Windows can provide much tighter latency and better throughput , however 
 + # some virtualized environments may see a negative performance impact from changing this setting 
 + # below their system default . The sysinternals ' clockres ' tool can confirm your system ' s default 
 + # setting . 
 + windows _ timer _ interval : 1 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index 269f577 . . 5beeef2 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 259 , 6 + 259 , 8 @ @ public class Config 
 public static final int otc _ coalescing _ window _ us _ default = 200 ; 
 public int otc _ coalescing _ window _ us = otc _ coalescing _ window _ us _ default ; 
 
 + public int windows _ timer _ interval = 0 ; 
 + 
 public boolean enable _ user _ defined _ functions = false ; 
 
 public static boolean getOutboundBindAny ( ) 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index ad6b117 . . 443246e 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 1688 , 4 + 1688 , 9 @ @ public class DatabaseDescriptor 
 { 
 return conf . enable _ user _ defined _ functions ; 
 } 
 + 
 + public static int getWindowsTimerInterval ( ) 
 + { 
 + return conf . windows _ timer _ interval ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index 59ecca7 . . 49e0c58 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 439 , 6 + 439 , 13 @ @ public class CassandraDaemon 
 { 
 String pidFile = System . getProperty ( " cassandra - pidfile " ) ; 
 
 + if ( FBUtilities . isWindows ( ) ) 
 + { 
 + / / We need to adjust the system timer on windows from the default 15ms down to the minimum of 1ms as this 
 + / / impacts timer intervals , thread scheduling , driver interrupts , etc . 
 + WindowsTimer . startTimerPeriod ( DatabaseDescriptor . getWindowsTimerInterval ( ) ) ; 
 + } 
 + 
 try 
 { 
 try 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 3edbe22 . . 19ef937 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 144 , 6 + 144 , 7 @ @ import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . JVMStabilityInspector ; 
 import org . apache . cassandra . utils . OutputHandler ; 
 import org . apache . cassandra . utils . Pair ; 
 + import org . apache . cassandra . utils . WindowsTimer ; 
 import org . apache . cassandra . utils . WrappedRunnable ; 
 import org . apache . cassandra . utils . progress . ProgressEvent ; 
 import org . apache . cassandra . utils . progress . ProgressEventType ; 
 @ @ - 665 , 6 + 666 , 9 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 CommitLog . instance . shutdownBlocking ( ) ; 
 
 + if ( FBUtilities . isWindows ( ) ) 
 + WindowsTimer . endTimerPeriod ( DatabaseDescriptor . getWindowsTimerInterval ( ) ) ; 
 + 
 / / wait for miscellaneous tasks like sstable and commitlog segment deletion 
 ScheduledExecutors . nonPeriodicTasks . shutdown ( ) ; 
 if ( ! ScheduledExecutors . nonPeriodicTasks . awaitTermination ( 1 , TimeUnit . MINUTES ) ) 
 @ @ - 709 , 6 + 713 , 9 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 { 
 if ( drainOnShutdown ! = null ) 
 Runtime . getRuntime ( ) . removeShutdownHook ( drainOnShutdown ) ; 
 + 
 + if ( FBUtilities . isWindows ( ) ) 
 + WindowsTimer . endTimerPeriod ( DatabaseDescriptor . getWindowsTimerInterval ( ) ) ; 
 } 
 
 private boolean shouldBootstrap ( ) 
 diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java 
 index 333b956 . . 72a1b60 100644 
 - - - a / src / java / org / apache / cassandra / transport / Server . java 
 + + + b / src / java / org / apache / cassandra / transport / Server . java 
 @ @ - 136 , 7 + 136 , 6 @ @ public class Server implements CassandraDaemon . Server 
 / / Configure the server . 
 eventExecutorGroup = new RequestThreadPoolExecutor ( ) ; 
 
 - 
 boolean hasEpoll = enableEpoll ? Epoll . isAvailable ( ) : false ; 
 if ( hasEpoll ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / utils / WindowsTimer . java b / src / java / org / apache / cassandra / utils / WindowsTimer . java 
 new file mode 100644 
 index 0000000 . . 9db8559 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / utils / WindowsTimer . java 
 @ @ - 0 , 0 + 1 , 65 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . utils ; 
 + 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + import com . sun . jna . LastErrorException ; 
 + import com . sun . jna . Native ; 
 + 
 + public final class WindowsTimer 
 + { 
 + private static final Logger logger = LoggerFactory . getLogger ( WindowsTimer . class ) ; 
 + 
 + static 
 + { 
 + try 
 + { 
 + Native . register ( " winmm " ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + logger . error ( " Failed to register winmm . dll . Performance will be negatively impacted on this node . " ) ; 
 + } 
 + } 
 + 
 + private static native int timeBeginPeriod ( int period ) throws LastErrorException ; 
 + private static native int timeEndPeriod ( int period ) throws LastErrorException ; 
 + 
 + private WindowsTimer ( ) { } 
 + 
 + public static void startTimerPeriod ( int period ) 
 + { 
 + if ( period = = 0 ) 
 + return ; 
 + assert ( period > 0 ) ; 
 + if ( timeBeginPeriod ( period ) ! = 0 ) 
 + logger . warn ( " Failed to set timer to : " + period + " . Performance will be degraded . " ) ; 
 + } 
 + 
 + public static void endTimerPeriod ( int period ) 
 + { 
 + if ( period = = 0 ) 
 + return ; 
 + assert ( period > 0 ) ; 
 + if ( timeEndPeriod ( period ) ! = 0 ) 
 + logger . warn ( " Failed to end accelerated timer period . System timer will remain set to : " + period + " ms . " ) ; 
 + } 
 + } 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / Stress . java b / tools / stress / src / org / apache / cassandra / stress / Stress . java 
 index 256cefb . . a4ec8a0 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / Stress . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / Stress . java 
 @ @ - 22 , 6 + 22 , 8 @ @ import java . net . Socket ; 
 import java . net . SocketException ; 
 
 import org . apache . cassandra . stress . settings . StressSettings ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 + import org . apache . cassandra . utils . WindowsTimer ; 
 
 public final class Stress 
 { 
 @ @ - 52 , 6 + 54 , 9 @ @ public final class Stress 
 
 public static void main ( String [ ] arguments ) throws Exception 
 { 
 + if ( FBUtilities . isWindows ( ) ) 
 + WindowsTimer . startTimerPeriod ( 1 ) ; 
 + 
 final StressSettings settings ; 
 try 
 { 
 @ @ - 109 , 6 + 114 , 8 @ @ public final class Stress 
 stressAction . run ( ) ; 
 } 
 
 + if ( FBUtilities . isWindows ( ) ) 
 + WindowsTimer . endTimerPeriod ( 1 ) ; 
 System . exit ( 0 ) ; 
 } 


NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index c7d0d6c . . 933671f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 18 , 7 + 18 , 7 @ @ 
 * purge tombstones from row cache ( CASSANDRA - 2305 ) 
 * push replication _ factor into strategy _ options ( CASSANDRA - 1263 ) 
 * give snapshots the same name on each node ( CASSANDRA - 1791 ) 
 - * add key type information ( CASSANDRA - 2311 ) 
 + * add key type information and alias ( CASSANDRA - 2311 , 2396 ) 
 
 
 0 . 7 . 5 
 diff - - git a / interface / cassandra . thrift b / interface / cassandra . thrift 
 index 79b9f6c . . 03cd187 100644 
 - - - a / interface / cassandra . thrift 
 + + + b / interface / cassandra . thrift 
 @ @ - 46 , 7 + 46 , 7 @ @ namespace rb CassandraThrift 
 # for every edit that doesn ' t result in a change to major / minor . 
 # 
 # See the Semantic Versioning Specification ( SemVer ) http : / / semver . org . 
 - const string VERSION = " 20 . 0 . 0 " 
 + const string VERSION = " 20 . 1 . 0 " 
 
 
 # 
 @ @ - 394 , 6 + 394 , 7 @ @ struct CfDef { 
 25 : optional double merge _ shards _ chance , 
 26 : optional string key _ validation _ class , 
 27 : optional string row _ cache _ provider = " org . apache . cassandra . cache . ConcurrentLinkedHashCacheProvider " , 
 + 28 : optional binary key _ alias , 
 } 
 
 / * describes a keyspace . * / 
 diff - - git a / interface / thrift / gen - java / org / apache / cassandra / thrift / CfDef . java b / interface / thrift / gen - java / org / apache / cassandra / thrift / CfDef . java 
 index 9a901ab . . 375bdba 100644 
 - - - a / interface / thrift / gen - java / org / apache / cassandra / thrift / CfDef . java 
 + + + b / interface / thrift / gen - java / org / apache / cassandra / thrift / CfDef . java 
 @ @ - 69 , 6 + 69 , 7 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav 
 private static final org . apache . thrift . protocol . TField MERGE _ SHARDS _ CHANCE _ FIELD _ DESC = new org . apache . thrift . protocol . TField ( " merge _ shards _ chance " , org . apache . thrift . protocol . TType . DOUBLE , ( short ) 25 ) ; 
 private static final org . apache . thrift . protocol . TField KEY _ VALIDATION _ CLASS _ FIELD _ DESC = new org . apache . thrift . protocol . TField ( " key _ validation _ class " , org . apache . thrift . protocol . TType . STRING , ( short ) 26 ) ; 
 private static final org . apache . thrift . protocol . TField ROW _ CACHE _ PROVIDER _ FIELD _ DESC = new org . apache . thrift . protocol . TField ( " row _ cache _ provider " , org . apache . thrift . protocol . TType . STRING , ( short ) 27 ) ; 
 + private static final org . apache . thrift . protocol . TField KEY _ ALIAS _ FIELD _ DESC = new org . apache . thrift . protocol . TField ( " key _ alias " , org . apache . thrift . protocol . TType . STRING , ( short ) 28 ) ; 
 
 public String keyspace ; 
 public String name ; 
 @ @ - 94 , 6 + 95 , 7 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav 
 public double merge _ shards _ chance ; 
 public String key _ validation _ class ; 
 public String row _ cache _ provider ; 
 + public ByteBuffer key _ alias ; 
 
 / * * The set of fields this struct contains , along with convenience methods for finding and manipulating them . * / 
 public enum _ Fields implements org . apache . thrift . TFieldIdEnum { 
 @ @ - 120 , 7 + 122 , 8 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav 
 REPLICATE _ ON _ WRITE ( ( short ) 24 , " replicate _ on _ write " ) , 
 MERGE _ SHARDS _ CHANCE ( ( short ) 25 , " merge _ shards _ chance " ) , 
 KEY _ VALIDATION _ CLASS ( ( short ) 26 , " key _ validation _ class " ) , 
 - ROW _ CACHE _ PROVIDER ( ( short ) 27 , " row _ cache _ provider " ) ; 
 + ROW _ CACHE _ PROVIDER ( ( short ) 27 , " row _ cache _ provider " ) , 
 + KEY _ ALIAS ( ( short ) 28 , " key _ alias " ) ; 
 
 private static final Map < String , _ Fields > byName = new HashMap < String , _ Fields > ( ) ; 
 
 @ @ - 183 , 6 + 186 , 8 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav 
 return KEY _ VALIDATION _ CLASS ; 
 case 27 : / / ROW _ CACHE _ PROVIDER 
 return ROW _ CACHE _ PROVIDER ; 
 + case 28 : / / KEY _ ALIAS 
 + return KEY _ ALIAS ; 
 default : 
 return null ; 
 } 
 @ @ - 291 , 6 + 296 , 8 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav 
 new org . apache . thrift . meta _ data . FieldValueMetaData ( org . apache . thrift . protocol . TType . STRING ) ) ) ; 
 tmpMap . put ( _ Fields . ROW _ CACHE _ PROVIDER , new org . apache . thrift . meta _ data . FieldMetaData ( " row _ cache _ provider " , org . apache . thrift . TFieldRequirementType . OPTIONAL , 
 new org . apache . thrift . meta _ data . FieldValueMetaData ( org . apache . thrift . protocol . TType . STRING ) ) ) ; 
 + tmpMap . put ( _ Fields . KEY _ ALIAS , new org . apache . thrift . meta _ data . FieldMetaData ( " key _ alias " , org . apache . thrift . TFieldRequirementType . OPTIONAL , 
 + new org . apache . thrift . meta _ data . FieldValueMetaData ( org . apache . thrift . protocol . TType . STRING , true ) ) ) ; 
 metaDataMap = Collections . unmodifiableMap ( tmpMap ) ; 
 org . apache . thrift . meta _ data . FieldMetaData . addStructMetaDataMap ( CfDef . class , metaDataMap ) ; 
 } 
 @ @ - 373 , 6 + 380 , 10 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav 
 if ( other . isSetRow _ cache _ provider ( ) ) { 
 this . row _ cache _ provider = other . row _ cache _ provider ; 
 } 
 + if ( other . isSetKey _ alias ( ) ) { 
 + this . key _ alias = org . apache . thrift . TBaseHelper . copyBinary ( other . key _ alias ) ; 
 + ; 
 + } 
 } 
 
 public CfDef deepCopy ( ) { 
 @ @ - 422 , 6 + 433 , 7 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav 
 this . key _ validation _ class = null ; 
 this . row _ cache _ provider = " org . apache . cassandra . cache . ConcurrentLinkedHashCacheProvider " ; 
 
 + this . key _ alias = null ; 
 } 
 
 public String getKeyspace ( ) { 
 @ @ - 1001 , 6 + 1013 , 40 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav 
 } 
 } 
 
 + public byte [ ] getKey _ alias ( ) { 
 + setKey _ alias ( org . apache . thrift . TBaseHelper . rightSize ( key _ alias ) ) ; 
 + return key _ alias = = null ? null : key _ alias . array ( ) ; 
 + } 
 + 
 + public ByteBuffer bufferForKey _ alias ( ) { 
 + return key _ alias ; 
 + } 
 + 
 + public CfDef setKey _ alias ( byte [ ] key _ alias ) { 
 + setKey _ alias ( key _ alias = = null ? ( ByteBuffer ) null : ByteBuffer . wrap ( key _ alias ) ) ; 
 + return this ; 
 + } 
 + 
 + public CfDef setKey _ alias ( ByteBuffer key _ alias ) { 
 + this . key _ alias = key _ alias ; 
 + return this ; 
 + } 
 + 
 + public void unsetKey _ alias ( ) { 
 + this . key _ alias = null ; 
 + } 
 + 
 + / * * Returns true if field key _ alias is set ( has been assigned a value ) and false otherwise * / 
 + public boolean isSetKey _ alias ( ) { 
 + return this . key _ alias ! = null ; 
 + } 
 + 
 + public void setKey _ aliasIsSet ( boolean value ) { 
 + if ( ! value ) { 
 + this . key _ alias = null ; 
 + } 
 + } 
 + 
 public void setFieldValue ( _ Fields field , Object value ) { 
 switch ( field ) { 
 case KEYSPACE : 
 @ @ - 1195 , 6 + 1241 , 14 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav 
 } 
 break ; 
 
 + case KEY _ ALIAS : 
 + if ( value = = null ) { 
 + unsetKey _ alias ( ) ; 
 + } else { 
 + setKey _ alias ( ( ByteBuffer ) value ) ; 
 + } 
 + break ; 
 + 
 } 
 } 
 
 @ @ - 1272 , 6 + 1326 , 9 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav 
 case ROW _ CACHE _ PROVIDER : 
 return getRow _ cache _ provider ( ) ; 
 
 + case KEY _ ALIAS : 
 + return getKey _ alias ( ) ; 
 + 
 } 
 throw new IllegalStateException ( ) ; 
 } 
 @ @ - 1331 , 6 + 1388 , 8 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav 
 return isSetKey _ validation _ class ( ) ; 
 case ROW _ CACHE _ PROVIDER : 
 return isSetRow _ cache _ provider ( ) ; 
 + case KEY _ ALIAS : 
 + return isSetKey _ alias ( ) ; 
 } 
 throw new IllegalStateException ( ) ; 
 } 
 @ @ - 1564 , 6 + 1623 , 15 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav 
 return false ; 
 } 
 
 + boolean this _ present _ key _ alias = true & & this . isSetKey _ alias ( ) ; 
 + boolean that _ present _ key _ alias = true & & that . isSetKey _ alias ( ) ; 
 + if ( this _ present _ key _ alias | | that _ present _ key _ alias ) { 
 + if ( ! ( this _ present _ key _ alias & & that _ present _ key _ alias ) ) 
 + return false ; 
 + if ( ! this . key _ alias . equals ( that . key _ alias ) ) 
 + return false ; 
 + } 
 + 
 return true ; 
 } 
 
 @ @ - 1691 , 6 + 1759 , 11 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav 
 if ( present _ row _ cache _ provider ) 
 builder . append ( row _ cache _ provider ) ; 
 
 + boolean present _ key _ alias = true & & ( isSetKey _ alias ( ) ) ; 
 + builder . append ( present _ key _ alias ) ; 
 + if ( present _ key _ alias ) 
 + builder . append ( key _ alias ) ; 
 + 
 return builder . toHashCode ( ) ; 
 } 
 
 @ @ - 1942 , 6 + 2015 , 16 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav 
 return lastComparison ; 
 } 
 } 
 + lastComparison = Boolean . valueOf ( isSetKey _ alias ( ) ) . compareTo ( typedOther . isSetKey _ alias ( ) ) ; 
 + if ( lastComparison ! = 0 ) { 
 + return lastComparison ; 
 + } 
 + if ( isSetKey _ alias ( ) ) { 
 + lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . key _ alias , typedOther . key _ alias ) ; 
 + if ( lastComparison ! = 0 ) { 
 + return lastComparison ; 
 + } 
 + } 
 return 0 ; 
 } 
 
 @ @ - 2152 , 6 + 2235 , 13 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav 
 org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , field . type ) ; 
 } 
 break ; 
 + case 28 : / / KEY _ ALIAS 
 + if ( field . type = = org . apache . thrift . protocol . TType . STRING ) { 
 + this . key _ alias = iprot . readBinary ( ) ; 
 + } else { 
 + org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , field . type ) ; 
 + } 
 + break ; 
 default : 
 org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , field . type ) ; 
 } 
 @ @ - 2310 , 6 + 2400 , 13 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav 
 oprot . writeFieldEnd ( ) ; 
 } 
 } 
 + if ( this . key _ alias ! = null ) { 
 + if ( isSetKey _ alias ( ) ) { 
 + oprot . writeFieldBegin ( KEY _ ALIAS _ FIELD _ DESC ) ; 
 + oprot . writeBinary ( this . key _ alias ) ; 
 + oprot . writeFieldEnd ( ) ; 
 + } 
 + } 
 oprot . writeFieldStop ( ) ; 
 oprot . writeStructEnd ( ) ; 
 } 
 @ @ - 2498 , 6 + 2595 , 16 @ @ public class CfDef implements org . apache . thrift . TBase < CfDef , CfDef . _ Fields > , jav 
 } 
 first = false ; 
 } 
 + if ( isSetKey _ alias ( ) ) { 
 + if ( ! first ) sb . append ( " , " ) ; 
 + sb . append ( " key _ alias : " ) ; 
 + if ( this . key _ alias = = null ) { 
 + sb . append ( " null " ) ; 
 + } else { 
 + org . apache . thrift . TBaseHelper . toString ( this . key _ alias , sb ) ; 
 + } 
 + first = false ; 
 + } 
 sb . append ( " ) " ) ; 
 return sb . toString ( ) ; 
 } 
 diff - - git a / interface / thrift / gen - java / org / apache / cassandra / thrift / Constants . java b / interface / thrift / gen - java / org / apache / cassandra / thrift / Constants . java 
 index bb3036a . . 32602fb 100644 
 - - - a / interface / thrift / gen - java / org / apache / cassandra / thrift / Constants . java 
 + + + b / interface / thrift / gen - java / org / apache / cassandra / thrift / Constants . java 
 @ @ - 44 , 6 + 44 , 6 @ @ import org . slf4j . LoggerFactory ; 
 
 public class Constants { 
 
 - public static final String VERSION = " 20 . 0 . 0 " ; 
 + public static final String VERSION = " 20 . 1 . 0 " ; 
 
 } 
 diff - - git a / src / avro / internode . genavro b / src / avro / internode . genavro 
 index 23fe90b . . 2e0a40a 100644 
 - - - a / src / avro / internode . genavro 
 + + + b / src / avro / internode . genavro 
 @ @ - 64 , 6 + 64 , 7 @ @ protocol InterNode { 
 union { int , null } id ; 
 union { array < ColumnDef > , null } column _ metadata ; 
 union { string , null } row _ cache _ provider = " org . apache . cassandra . cache . ConcurrentLinkedHashCacheProvider " ; 
 + union { null , bytes } key _ alias = null ; 
 } 
 
 @ aliases ( [ " org . apache . cassandra . config . avro . KsDef " ] ) 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index 34587e3 . . c6b1e18 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 43 , 6 + 43 , 7 @ @ import org . apache . cassandra . db . marshal . TimeUUIDType ; 
 import org . apache . cassandra . db . marshal . UTF8Type ; 
 import org . apache . cassandra . db . migration . Migration ; 
 import org . apache . cassandra . io . SerDeUtils ; 
 + import org . apache . cassandra . thrift . InvalidRequestException ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . Pair ; 
 @ @ - 131 , 7 + 132 , 7 @ @ public final class CFMetaData 
 
 / / REQUIRED 
 public final Integer cfId ; / / internal id , never exposed to user 
 - public final String ksName ; / / name of keyspace 
 + public final String ksName ; / / name of keyspace 
 public final String cfName ; / / name of this column family 
 public final ColumnFamilyType cfType ; / / standard , super 
 public final AbstractType comparator ; / / bytes , long , timeuuid , utf8 , etc . 
 @ @ - 155 , 6 + 156 , 7 @ @ public final class CFMetaData 
 private double memtableOperationsInMillions ; / / default based on throughput 
 private double mergeShardsChance ; / / default 0 . 1 , chance [ 0 . 0 , 1 . 0 ] of merging old shards during replication 
 private IRowCacheProvider rowCacheProvider ; 
 + private ByteBuffer keyAlias ; / / default NULL 
 / / NOTE : if you find yourself adding members to this class , make sure you keep the convert methods in lockstep . 
 
 private Map < ByteBuffer , ColumnDefinition > column _ metadata ; 
 @ @ - 175 , 6 + 177 , 7 @ @ public final class CFMetaData 
 public CFMetaData memSize ( int prop ) { memtableThroughputInMb = prop ; return this ; } 
 public CFMetaData memOps ( double prop ) { memtableOperationsInMillions = prop ; return this ; } 
 public CFMetaData mergeShardsChance ( double prop ) { mergeShardsChance = prop ; return this ; } 
 + public CFMetaData keyAlias ( ByteBuffer prop ) { keyAlias = prop ; return this ; } 
 public CFMetaData columnMetadata ( Map < ByteBuffer , ColumnDefinition > prop ) { column _ metadata = prop ; return this ; } 
 public CFMetaData rowCacheProvider ( IRowCacheProvider prop ) { rowCacheProvider = prop ; return this ; } ; 
 
 @ @ - 236 , 6 + 239 , 7 @ @ public final class CFMetaData 
 defaultValidator = BytesType . instance ; 
 keyValidator = BytesType . instance ; 
 comment = " " ; 
 + keyAlias = null ; / / This qualifies as a ' strange default ' . 
 column _ metadata = new HashMap < ByteBuffer , ColumnDefinition > ( ) ; 
 } 
 
 @ @ - 335 , 6 + 339 , 7 @ @ public final class CFMetaData 
 cf . memtable _ throughput _ in _ mb = memtableThroughputInMb ; 
 cf . memtable _ operations _ in _ millions = memtableOperationsInMillions ; 
 cf . merge _ shards _ chance = mergeShardsChance ; 
 + cf . key _ alias = keyAlias ; 
 cf . column _ metadata = SerDeUtils . createArray ( column _ metadata . size ( ) , 
 org . apache . cassandra . db . migration . avro . ColumnDef . SCHEMA $ ) ; 
 for ( ColumnDefinition cd : column _ metadata . values ( ) ) 
 @ @ - 399 , 6 + 404 , 7 @ @ public final class CFMetaData 
 throw new RuntimeException ( e ) ; 
 } 
 } 
 + if ( cf . key _ alias ! = null ) { newCFMD . keyAlias ( cf . key _ alias ) ; } 
 
 return newCFMD . comment ( cf . comment . toString ( ) ) 
 . rowCacheSize ( cf . row _ cache _ size ) 
 @ @ - 496 , 6 + 502 , 11 @ @ public final class CFMetaData 
 return rowCacheProvider ; 
 } 
 
 + public ByteBuffer getKeyAlias ( ) 
 + { 
 + return keyAlias ; 
 + } 
 + 
 public Map < ByteBuffer , ColumnDefinition > getColumn _ metadata ( ) 
 { 
 return Collections . unmodifiableMap ( column _ metadata ) ; 
 @ @ - 506 , 7 + 517 , 7 @ @ public final class CFMetaData 
 return superColumnName = = null ? comparator : subcolumnComparator ; 
 } 
 
 - public boolean equals ( Object obj ) 
 + public boolean equals ( Object obj ) 
 { 
 if ( obj = = this ) 
 { 
 @ @ - 542 , 6 + 553 , 7 @ @ public final class CFMetaData 
 . append ( memtableThroughputInMb , rhs . memtableThroughputInMb ) 
 . append ( memtableOperationsInMillions , rhs . memtableOperationsInMillions ) 
 . append ( mergeShardsChance , rhs . mergeShardsChance ) 
 + . append ( keyAlias , rhs . keyAlias ) 
 . isEquals ( ) ; 
 } 
 
 @ @ - 571 , 6 + 583 , 7 @ @ public final class CFMetaData 
 . append ( memtableThroughputInMb ) 
 . append ( memtableOperationsInMillions ) 
 . append ( mergeShardsChance ) 
 + . append ( keyAlias ) 
 . toHashCode ( ) ; 
 } 
 
 @ @ - 612 , 7 + 625 , 49 @ @ public final class CFMetaData 
 if ( ! cf _ def . isSetRow _ cache _ provider ( ) ) 
 cf _ def . setRow _ cache _ provider ( CFMetaData . DEFAULT _ ROW _ CACHE _ PROVIDER ) ; 
 } 
 - 
 + 
 + public static CFMetaData convertToCFMetaData ( org . apache . cassandra . thrift . CfDef cf _ def ) throws InvalidRequestException , ConfigurationException 
 + { 
 + ColumnFamilyType cfType = ColumnFamilyType . create ( cf _ def . column _ type ) ; 
 + if ( cfType = = null ) 
 + { 
 + throw new InvalidRequestException ( " Invalid column type " + cf _ def . column _ type ) ; 
 + } 
 + 
 + applyImplicitDefaults ( cf _ def ) ; 
 + 
 + validateMinMaxCompactionThresholds ( cf _ def ) ; 
 + validateMemtableSettings ( cf _ def ) ; 
 + validateAliasCompares ( cf _ def ) ; 
 + 
 + CFMetaData newCFMD = new CFMetaData ( cf _ def . keyspace , 
 + cf _ def . name , 
 + cfType , 
 + DatabaseDescriptor . getComparator ( cf _ def . comparator _ type ) , 
 + cf _ def . subcomparator _ type = = null ? null : DatabaseDescriptor . getComparator ( cf _ def . subcomparator _ type ) ) ; 
 + 
 + if ( cf _ def . isSetGc _ grace _ seconds ( ) ) { newCFMD . gcGraceSeconds ( cf _ def . gc _ grace _ seconds ) ; } 
 + if ( cf _ def . isSetMin _ compaction _ threshold ( ) ) { newCFMD . minCompactionThreshold ( cf _ def . min _ compaction _ threshold ) ; } 
 + if ( cf _ def . isSetMax _ compaction _ threshold ( ) ) { newCFMD . maxCompactionThreshold ( cf _ def . max _ compaction _ threshold ) ; } 
 + if ( cf _ def . isSetRow _ cache _ save _ period _ in _ seconds ( ) ) { newCFMD . rowCacheSavePeriod ( cf _ def . row _ cache _ save _ period _ in _ seconds ) ; } 
 + if ( cf _ def . isSetKey _ cache _ save _ period _ in _ seconds ( ) ) { newCFMD . keyCacheSavePeriod ( cf _ def . key _ cache _ save _ period _ in _ seconds ) ; } 
 + if ( cf _ def . isSetMemtable _ flush _ after _ mins ( ) ) { newCFMD . memTime ( cf _ def . memtable _ flush _ after _ mins ) ; } 
 + if ( cf _ def . isSetMemtable _ throughput _ in _ mb ( ) ) { newCFMD . memSize ( cf _ def . memtable _ throughput _ in _ mb ) ; } 
 + if ( cf _ def . isSetMemtable _ operations _ in _ millions ( ) ) { newCFMD . memOps ( cf _ def . memtable _ operations _ in _ millions ) ; } 
 + if ( cf _ def . isSetMerge _ shards _ chance ( ) ) { newCFMD . mergeShardsChance ( cf _ def . merge _ shards _ chance ) ; } 
 + if ( cf _ def . isSetRow _ cache _ provider ( ) ) { newCFMD . rowCacheProvider ( FBUtilities . newCacheProvider ( cf _ def . row _ cache _ provider ) ) ; } 
 + if ( cf _ def . isSetKey _ alias ( ) ) { newCFMD . keyAlias ( cf _ def . key _ alias ) ; } 
 + 
 + return newCFMD . comment ( cf _ def . comment ) 
 + . rowCacheSize ( cf _ def . row _ cache _ size ) 
 + . keyCacheSize ( cf _ def . key _ cache _ size ) 
 + . readRepairChance ( cf _ def . read _ repair _ chance ) 
 + . replicateOnWrite ( cf _ def . replicate _ on _ write ) 
 + . defaultValidator ( DatabaseDescriptor . getComparator ( cf _ def . default _ validation _ class ) ) 
 + . keyValidator ( DatabaseDescriptor . getComparator ( cf _ def . key _ validation _ class ) ) 
 + . columnMetadata ( ColumnDefinition . fromColumnDef ( cf _ def . column _ metadata ) ) ; 
 + } 
 + 
 / / merges some final fields from this CFM with modifiable fields from CfDef into a new CFMetaData . 
 public void apply ( org . apache . cassandra . db . migration . avro . CfDef cf _ def ) throws ConfigurationException 
 { 
 @ @ - 638 , 6 + 693 , 7 @ @ public final class CFMetaData 
 
 validateMinMaxCompactionThresholds ( cf _ def ) ; 
 validateMemtableSettings ( cf _ def ) ; 
 + validateAliasCompares ( cf _ def ) ; 
 
 comment = enforceCommentNotNull ( cf _ def . comment ) ; 
 rowCacheSize = cf _ def . row _ cache _ size ; 
 @ @ - 657 , 7 + 713 , 8 @ @ public final class CFMetaData 
 mergeShardsChance = cf _ def . merge _ shards _ chance ; 
 if ( cf _ def . row _ cache _ provider ! = null ) 
 rowCacheProvider = FBUtilities . newCacheProvider ( cf _ def . row _ cache _ provider . toString ( ) ) ; 
 - 
 + keyAlias = cf _ def . key _ alias ; 
 + 
 / / adjust secondary indexes . figure out who is coming and going . 
 Set < ByteBuffer > toRemove = new HashSet < ByteBuffer > ( ) ; 
 Set < ByteBuffer > newIndexNames = new HashSet < ByteBuffer > ( ) ; 
 @ @ - 723 , 6 + 780 , 7 @ @ public final class CFMetaData 
 def . setMemtable _ throughput _ in _ mb ( cfm . memtableThroughputInMb ) ; 
 def . setMemtable _ operations _ in _ millions ( cfm . memtableOperationsInMillions ) ; 
 def . setMerge _ shards _ chance ( cfm . mergeShardsChance ) ; 
 + def . setKey _ alias ( cfm . keyAlias ) ; 
 List < org . apache . cassandra . thrift . ColumnDef > column _ meta = new ArrayList < org . apache . cassandra . thrift . ColumnDef > ( cfm . column _ metadata . size ( ) ) ; 
 for ( ColumnDefinition cd : cfm . column _ metadata . values ( ) ) 
 { 
 @ @ - 767 , 6 + 825 , 7 @ @ public final class CFMetaData 
 def . memtable _ operations _ in _ millions = cfm . memtableOperationsInMillions ; 
 def . merge _ shards _ chance = cfm . mergeShardsChance ; 
 def . key _ validation _ class = cfm . keyValidator . getClass ( ) . getName ( ) ; 
 + def . key _ alias = cfm . keyAlias ; 
 List < org . apache . cassandra . db . migration . avro . ColumnDef > column _ meta = new ArrayList < org . apache . cassandra . db . migration . avro . ColumnDef > ( cfm . column _ metadata . size ( ) ) ; 
 for ( ColumnDefinition cd : cfm . column _ metadata . values ( ) ) 
 { 
 @ @ - 807 , 6 + 866 , 7 @ @ public final class CFMetaData 
 newDef . row _ cache _ size = def . getRow _ cache _ size ( ) ; 
 newDef . subcomparator _ type = def . getSubcomparator _ type ( ) ; 
 newDef . merge _ shards _ chance = def . getMerge _ shards _ chance ( ) ; 
 + newDef . key _ alias = def . key _ alias ; 
 
 List < org . apache . cassandra . db . migration . avro . ColumnDef > columnMeta = new ArrayList < org . apache . cassandra . db . migration . avro . ColumnDef > ( ) ; 
 if ( def . isSetColumn _ metadata ( ) ) 
 @ @ - 905 , 6 + 965 , 20 @ @ public final class CFMetaData 
 DatabaseDescriptor . validateMemtableOperations ( cf _ def . memtable _ operations _ in _ millions ) ; 
 } 
 
 + public static void validateAliasCompares ( org . apache . cassandra . thrift . CfDef cf _ def ) throws ConfigurationException 
 + { 
 + AbstractType comparator = DatabaseDescriptor . getComparator ( cf _ def . comparator _ type ) ; 
 + if ( cf _ def . key _ alias ! = null ) 
 + comparator . validate ( cf _ def . key _ alias ) ; 
 + } 
 + 
 + public static void validateAliasCompares ( org . apache . cassandra . db . migration . avro . CfDef cf _ def ) throws ConfigurationException 
 + { 
 + AbstractType comparator = DatabaseDescriptor . getComparator ( cf _ def . comparator _ type ) ; 
 + if ( cf _ def . key _ alias ! = null ) 
 + comparator . validate ( cf _ def . key _ alias ) ; 
 + } 
 + 
 @ Override 
 public String toString ( ) 
 { 
 @ @ - 931 , 6 + 1005 , 7 @ @ public final class CFMetaData 
 . append ( " memtableThroughputInMb " , memtableThroughputInMb ) 
 . append ( " memtableOperationsInMillions " , memtableOperationsInMillions ) 
 . append ( " mergeShardsChance " , mergeShardsChance ) 
 + . append ( " keyAlias " , keyAlias ) 
 . append ( " column _ metadata " , column _ metadata ) 
 . toString ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 index affc073 . . 8f52579 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 @ @ - 790 , 7 + 790 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 
 try 
 { 
 - applyMigrationOnStage ( new AddColumnFamily ( convertToCFMetaData ( cf _ def ) ) ) ; 
 + applyMigrationOnStage ( new AddColumnFamily ( CFMetaData . convertToCFMetaData ( cf _ def ) ) ) ; 
 return DatabaseDescriptor . getDefsVersion ( ) . toString ( ) ; 
 } 
 catch ( ConfigurationException e ) 
 @ @ - 855 , 7 + 855 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 for ( CfDef cfDef : ks _ def . cf _ defs ) 
 { 
 ThriftValidation . validateCfDef ( cfDef ) ; 
 - cfDefs . add ( convertToCFMetaData ( cfDef ) ) ; 
 + cfDefs . add ( CFMetaData . convertToCFMetaData ( cfDef ) ) ; 
 } 
 
 / / Attempt to instantiate the ARS , which will throw a ConfigException if 
 @ @ - 996 , 45 + 996 , 6 @ @ public class CassandraServer implements Cassandra . Iface 
 throw new SchemaDisagreementException ( ) ; 
 } 
 
 - / / @ see CFMetaData . applyImplicitDefaults ( ) . 
 - private CFMetaData convertToCFMetaData ( CfDef cf _ def ) throws InvalidRequestException , ConfigurationException 
 - { 
 - ColumnFamilyType cfType = ColumnFamilyType . create ( cf _ def . column _ type ) ; 
 - if ( cfType = = null ) 
 - { 
 - throw new InvalidRequestException ( " Invalid column type " + cf _ def . column _ type ) ; 
 - } 
 - 
 - CFMetaData . applyImplicitDefaults ( cf _ def ) ; 
 - CFMetaData . validateMinMaxCompactionThresholds ( cf _ def ) ; 
 - CFMetaData . validateMemtableSettings ( cf _ def ) ; 
 - 
 - CFMetaData newCFMD = new CFMetaData ( cf _ def . keyspace , 
 - cf _ def . name , 
 - cfType , 
 - DatabaseDescriptor . getComparator ( cf _ def . comparator _ type ) , 
 - cf _ def . subcomparator _ type = = null ? null : DatabaseDescriptor . getComparator ( cf _ def . subcomparator _ type ) ) ; 
 - 
 - if ( cf _ def . isSetGc _ grace _ seconds ( ) ) { newCFMD . gcGraceSeconds ( cf _ def . gc _ grace _ seconds ) ; } 
 - if ( cf _ def . isSetMin _ compaction _ threshold ( ) ) { newCFMD . minCompactionThreshold ( cf _ def . min _ compaction _ threshold ) ; } 
 - if ( cf _ def . isSetMax _ compaction _ threshold ( ) ) { newCFMD . maxCompactionThreshold ( cf _ def . max _ compaction _ threshold ) ; } 
 - if ( cf _ def . isSetRow _ cache _ save _ period _ in _ seconds ( ) ) { newCFMD . rowCacheSavePeriod ( cf _ def . row _ cache _ save _ period _ in _ seconds ) ; } 
 - if ( cf _ def . isSetKey _ cache _ save _ period _ in _ seconds ( ) ) { newCFMD . keyCacheSavePeriod ( cf _ def . key _ cache _ save _ period _ in _ seconds ) ; } 
 - if ( cf _ def . isSetMemtable _ flush _ after _ mins ( ) ) { newCFMD . memTime ( cf _ def . memtable _ flush _ after _ mins ) ; } 
 - if ( cf _ def . isSetMemtable _ throughput _ in _ mb ( ) ) { newCFMD . memSize ( cf _ def . memtable _ throughput _ in _ mb ) ; } 
 - if ( cf _ def . isSetMemtable _ operations _ in _ millions ( ) ) { newCFMD . memOps ( cf _ def . memtable _ operations _ in _ millions ) ; } 
 - if ( cf _ def . isSetMerge _ shards _ chance ( ) ) { newCFMD . mergeShardsChance ( cf _ def . merge _ shards _ chance ) ; } 
 - if ( cf _ def . isSetRow _ cache _ provider ( ) ) { newCFMD . rowCacheProvider ( FBUtilities . newCacheProvider ( cf _ def . row _ cache _ provider ) ) ; } 
 - 
 - return newCFMD . comment ( cf _ def . comment ) 
 - . rowCacheSize ( cf _ def . row _ cache _ size ) 
 - . keyCacheSize ( cf _ def . key _ cache _ size ) 
 - . readRepairChance ( cf _ def . read _ repair _ chance ) 
 - . replicateOnWrite ( cf _ def . replicate _ on _ write ) 
 - . defaultValidator ( DatabaseDescriptor . getComparator ( cf _ def . default _ validation _ class ) ) 
 - . columnMetadata ( ColumnDefinition . fromColumnDef ( cf _ def . column _ metadata ) ) ; 
 - } 
 - 
 public void truncate ( String cfname ) throws InvalidRequestException , UnavailableException , TException 
 { 
 logger . debug ( " truncating { } in { } " , cfname , state ( ) . getKeyspace ( ) ) ;
