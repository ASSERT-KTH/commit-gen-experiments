BLEU SCORE: 0.034353182138500235

TEST MSG: Fix PartitionUpdate sorting / merging code
GENERATED MSG: merge from 1 . 1 . 0

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 450138c . . 53beb26 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 <nl> + * Storage engine refactor ( CASSANDRA - 8099 , 9743 ) <nl> * Update Guava to 18 . 0 ( CASSANDRA - 9653 ) <nl> * Bloom filter false positive ratio is not honoured ( CASSANDRA - 8413 ) <nl> * New option for cassandra - stress to leave a ratio of columns null ( CASSANDRA - 9522 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / partitions / AbstractPartitionData . java b / src / java / org / apache / cassandra / db / partitions / AbstractPartitionData . java <nl> index 2fcd7b3 . . 6775cf1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / partitions / AbstractPartitionData . java <nl> + + + b / src / java / org / apache / cassandra / db / partitions / AbstractPartitionData . java <nl> @ @ - 227 , 6 + 227 , 25 @ @ public abstract class AbstractPartitionData implements Partition , Iterable < Row > <nl> data . swap ( i , j ) ; <nl> } <nl> <nl> + protected void merge ( int i , int j , int nowInSec ) <nl> + { <nl> + data . merge ( i , j , nowInSec ) ; <nl> + if ( livenessInfos . timestamp ( i ) > livenessInfos . timestamp ( j ) ) <nl> + livenessInfos . move ( i , j ) ; <nl> + if ( deletions . supersedes ( i , j ) ) <nl> + deletions . move ( i , j ) ; <nl> + } <nl> + <nl> + protected void move ( int i , int j ) <nl> + { <nl> + int cs = metadata . clusteringColumns ( ) . size ( ) ; <nl> + for ( int k = 0 ; k < cs ; k + + ) <nl> + clusterings [ j * cs + k ] = clusterings [ i * cs + k ] ; <nl> + data . move ( i , j ) ; <nl> + livenessInfos . move ( i , j ) ; <nl> + deletions . move ( i , j ) ; <nl> + } <nl> + <nl> public int rowCount ( ) <nl> { <nl> return rows ; <nl> diff - - git a / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java b / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java <nl> index f4195c1 . . a1ee239 100644 <nl> - - - a / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java <nl> + + + b / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java <nl> @ @ - 488 , 14 + 488 , 14 @ @ public class PartitionUpdate extends AbstractPartitionData implements Sorting . So <nl> { <nl> / / current and previous are the same row . Merge current into previous <nl> / / ( and so previous + 1 will be " free " ) . <nl> - data . merge ( current , previous , nowInSec ) ; <nl> + merge ( current , previous , nowInSec ) ; <nl> } <nl> else <nl> { <nl> / / data [ current ] ! = [ previous ] , so move current just after previous if needs be <nl> + + previous ; <nl> if ( previous ! = current ) <nl> - data . move ( current , previous ) ; <nl> + move ( current , previous ) ; <nl> } <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / RowBuilderTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / RowBuilderTest . java <nl> new file mode 100644 <nl> index 0000000 . . 7ab71b1 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / RowBuilderTest . java <nl> @ @ - 0 , 0 + 1 , 69 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . cql3 . validation . entities ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . cql3 . CQLTester ; <nl> + import org . apache . cassandra . db . Mutation ; <nl> + import org . apache . cassandra . db . RowUpdateBuilder ; <nl> + import org . apache . cassandra . db . partitions . PartitionUpdate ; <nl> + import org . apache . cassandra . db . marshal . AsciiType ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> + <nl> + public class RowBuilderTest extends CQLTester <nl> + { <nl> + @ Test <nl> + public void testAddListEntry ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( " <nl> + + " pk text , " <nl> + + " ck text , " <nl> + + " l1 list < int > , " <nl> + + " l2 list < int > , " <nl> + + " PRIMARY KEY ( ( pk ) , ck ) ) " ) ; <nl> + <nl> + long timestamp = FBUtilities . timestampMicros ( ) ; <nl> + <nl> + Mutation mutation = new Mutation ( keyspace ( ) , StorageService . getPartitioner ( ) . decorateKey ( AsciiType . instance . fromString ( " test " ) ) ) ; <nl> + addToMutation ( " row1 " , timestamp , mutation ) ; <nl> + addToMutation ( " row2 " , timestamp , mutation ) ; <nl> + <nl> + for ( PartitionUpdate update : mutation . getPartitionUpdates ( ) ) <nl> + update . iterator ( ) ; <nl> + <nl> + mutation . apply ( ) ; <nl> + <nl> + assertRowCount ( execute ( " SELECT ck FROM % s " ) , 2 ) ; <nl> + } <nl> + <nl> + private void addToMutation ( String typeName , long timestamp , Mutation mutation ) <nl> + { <nl> + RowUpdateBuilder adder = new RowUpdateBuilder ( getCurrentColumnFamilyStore ( ) . metadata , timestamp , mutation ) <nl> + . clustering ( typeName ) ; <nl> + <nl> + for ( int i = 0 ; i < 2 ; i + + ) <nl> + { <nl> + adder . addListEntry ( " l1 " , i ) <nl> + . addListEntry ( " l2 " , i ) ; <nl> + } <nl> + <nl> + adder . build ( ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index c8ccc24 . . 2cc8c52 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 11 , 6 + 11 , 7 @ @ <nl> * add a convenient way to reset a node ' s schema ( CASSANDRA - 2963 ) <nl> * fix for intermittent SchemaDisagreementException ( CASSANDRA - 3884 ) <nl> * CLI ` list < CF > ` to limit number of columns and their order ( CASSANDRA - 3012 ) <nl> + * ignore deprecated KsDef / CfDef / ColumnDef fields in native schema ( CASSANDRA - 3963 ) <nl> Merged from 1 . 0 : <nl> * remove the wait on hint future during write ( CASSANDRA - 3870 ) <nl> * ( cqlsh ) ignore missing CfDef opts ( CASSANDRA - 3933 ) <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index 5f7d21c . . 230398c 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 1194 , 6 + 1194 , 12 @ @ public final class CFMetaData <nl> assert attr . length = = 2 ; <nl> <nl> CfDef . _ Fields field = CfDef . _ Fields . findByName ( attr [ 1 ] ) ; <nl> + <nl> + / / this means that given field was deprecated <nl> + / / but still exists in the serialized schema <nl> + if ( field = = null ) <nl> + continue ; <nl> + <nl> cfDef . setFieldValue ( field , deserializeValue ( cfAttr . value ( ) , getValueClass ( CfDef . class , field . getFieldName ( ) ) ) ) ; <nl> } <nl> return cfDef ; <nl> diff - - git a / src / java / org / apache / cassandra / config / ColumnDefinition . java b / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> index ec79a72 . . 0ea3d10 100644 <nl> - - - a / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> + + + b / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> @ @ - 249 , 6 + 249 , 12 @ @ public class ColumnDefinition <nl> } <nl> <nl> ColumnDef . _ Fields field = ColumnDef . _ Fields . findByName ( components [ 2 ] ) ; <nl> + <nl> + / / this means that given field was deprecated <nl> + / / but still exists in the serialized schema <nl> + if ( field = = null ) <nl> + continue ; <nl> + <nl> columnDef . setFieldValue ( field , deserializeValue ( column . value ( ) , getValueClass ( ColumnDef . class , field . getFieldName ( ) ) ) ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / config / KSMetaData . java b / src / java / org / apache / cassandra / config / KSMetaData . java <nl> index 816c086 . . fb33974 100644 <nl> - - - a / src / java / org / apache / cassandra / config / KSMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / KSMetaData . java <nl> @ @ - 306 , 6 + 306 , 12 @ @ public final class KSMetaData <nl> continue ; <nl> <nl> KsDef . _ Fields field = KsDef . _ Fields . findByName ( comparator . getString ( ksAttr . name ( ) ) ) ; <nl> + <nl> + / / this means that given field was deprecated <nl> + / / but still exists in the serialized schema <nl> + if ( field = = null ) <nl> + continue ; <nl> + <nl> ksDef . setFieldValue ( field , deserializeValue ( ksAttr . value ( ) , getValueClass ( KsDef . class , field . getFieldName ( ) ) ) ) ; <nl> } <nl> <nl> @ @ - 380 , 6 + 386 , 12 @ @ public final class KSMetaData <nl> } <nl> <nl> CfDef . _ Fields field = CfDef . _ Fields . findByName ( attr [ 1 ] ) ; <nl> + <nl> + / / this means that given field was deprecated <nl> + / / but still exists in the serialized schema <nl> + if ( field = = null ) <nl> + continue ; <nl> + <nl> cfDef . setFieldValue ( field , deserializeValue ( column . value ( ) , getValueClass ( CfDef . class , field . getFieldName ( ) ) ) ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 450138c . . 53beb26 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 
 + * Storage engine refactor ( CASSANDRA - 8099 , 9743 ) 
 * Update Guava to 18 . 0 ( CASSANDRA - 9653 ) 
 * Bloom filter false positive ratio is not honoured ( CASSANDRA - 8413 ) 
 * New option for cassandra - stress to leave a ratio of columns null ( CASSANDRA - 9522 ) 
 diff - - git a / src / java / org / apache / cassandra / db / partitions / AbstractPartitionData . java b / src / java / org / apache / cassandra / db / partitions / AbstractPartitionData . java 
 index 2fcd7b3 . . 6775cf1 100644 
 - - - a / src / java / org / apache / cassandra / db / partitions / AbstractPartitionData . java 
 + + + b / src / java / org / apache / cassandra / db / partitions / AbstractPartitionData . java 
 @ @ - 227 , 6 + 227 , 25 @ @ public abstract class AbstractPartitionData implements Partition , Iterable < Row > 
 data . swap ( i , j ) ; 
 } 
 
 + protected void merge ( int i , int j , int nowInSec ) 
 + { 
 + data . merge ( i , j , nowInSec ) ; 
 + if ( livenessInfos . timestamp ( i ) > livenessInfos . timestamp ( j ) ) 
 + livenessInfos . move ( i , j ) ; 
 + if ( deletions . supersedes ( i , j ) ) 
 + deletions . move ( i , j ) ; 
 + } 
 + 
 + protected void move ( int i , int j ) 
 + { 
 + int cs = metadata . clusteringColumns ( ) . size ( ) ; 
 + for ( int k = 0 ; k < cs ; k + + ) 
 + clusterings [ j * cs + k ] = clusterings [ i * cs + k ] ; 
 + data . move ( i , j ) ; 
 + livenessInfos . move ( i , j ) ; 
 + deletions . move ( i , j ) ; 
 + } 
 + 
 public int rowCount ( ) 
 { 
 return rows ; 
 diff - - git a / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java b / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java 
 index f4195c1 . . a1ee239 100644 
 - - - a / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java 
 + + + b / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java 
 @ @ - 488 , 14 + 488 , 14 @ @ public class PartitionUpdate extends AbstractPartitionData implements Sorting . So 
 { 
 / / current and previous are the same row . Merge current into previous 
 / / ( and so previous + 1 will be " free " ) . 
 - data . merge ( current , previous , nowInSec ) ; 
 + merge ( current , previous , nowInSec ) ; 
 } 
 else 
 { 
 / / data [ current ] ! = [ previous ] , so move current just after previous if needs be 
 + + previous ; 
 if ( previous ! = current ) 
 - data . move ( current , previous ) ; 
 + move ( current , previous ) ; 
 } 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / RowBuilderTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / RowBuilderTest . java 
 new file mode 100644 
 index 0000000 . . 7ab71b1 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / RowBuilderTest . java 
 @ @ - 0 , 0 + 1 , 69 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . cql3 . validation . entities ; 
 + 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . cql3 . CQLTester ; 
 + import org . apache . cassandra . db . Mutation ; 
 + import org . apache . cassandra . db . RowUpdateBuilder ; 
 + import org . apache . cassandra . db . partitions . PartitionUpdate ; 
 + import org . apache . cassandra . db . marshal . AsciiType ; 
 + import org . apache . cassandra . service . StorageService ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 + 
 + public class RowBuilderTest extends CQLTester 
 + { 
 + @ Test 
 + public void testAddListEntry ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( " 
 + + " pk text , " 
 + + " ck text , " 
 + + " l1 list < int > , " 
 + + " l2 list < int > , " 
 + + " PRIMARY KEY ( ( pk ) , ck ) ) " ) ; 
 + 
 + long timestamp = FBUtilities . timestampMicros ( ) ; 
 + 
 + Mutation mutation = new Mutation ( keyspace ( ) , StorageService . getPartitioner ( ) . decorateKey ( AsciiType . instance . fromString ( " test " ) ) ) ; 
 + addToMutation ( " row1 " , timestamp , mutation ) ; 
 + addToMutation ( " row2 " , timestamp , mutation ) ; 
 + 
 + for ( PartitionUpdate update : mutation . getPartitionUpdates ( ) ) 
 + update . iterator ( ) ; 
 + 
 + mutation . apply ( ) ; 
 + 
 + assertRowCount ( execute ( " SELECT ck FROM % s " ) , 2 ) ; 
 + } 
 + 
 + private void addToMutation ( String typeName , long timestamp , Mutation mutation ) 
 + { 
 + RowUpdateBuilder adder = new RowUpdateBuilder ( getCurrentColumnFamilyStore ( ) . metadata , timestamp , mutation ) 
 + . clustering ( typeName ) ; 
 + 
 + for ( int i = 0 ; i < 2 ; i + + ) 
 + { 
 + adder . addListEntry ( " l1 " , i ) 
 + . addListEntry ( " l2 " , i ) ; 
 + } 
 + 
 + adder . build ( ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index c8ccc24 . . 2cc8c52 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 11 , 6 + 11 , 7 @ @ 
 * add a convenient way to reset a node ' s schema ( CASSANDRA - 2963 ) 
 * fix for intermittent SchemaDisagreementException ( CASSANDRA - 3884 ) 
 * CLI ` list < CF > ` to limit number of columns and their order ( CASSANDRA - 3012 ) 
 + * ignore deprecated KsDef / CfDef / ColumnDef fields in native schema ( CASSANDRA - 3963 ) 
 Merged from 1 . 0 : 
 * remove the wait on hint future during write ( CASSANDRA - 3870 ) 
 * ( cqlsh ) ignore missing CfDef opts ( CASSANDRA - 3933 ) 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index 5f7d21c . . 230398c 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 1194 , 6 + 1194 , 12 @ @ public final class CFMetaData 
 assert attr . length = = 2 ; 
 
 CfDef . _ Fields field = CfDef . _ Fields . findByName ( attr [ 1 ] ) ; 
 + 
 + / / this means that given field was deprecated 
 + / / but still exists in the serialized schema 
 + if ( field = = null ) 
 + continue ; 
 + 
 cfDef . setFieldValue ( field , deserializeValue ( cfAttr . value ( ) , getValueClass ( CfDef . class , field . getFieldName ( ) ) ) ) ; 
 } 
 return cfDef ; 
 diff - - git a / src / java / org / apache / cassandra / config / ColumnDefinition . java b / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 index ec79a72 . . 0ea3d10 100644 
 - - - a / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 + + + b / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 @ @ - 249 , 6 + 249 , 12 @ @ public class ColumnDefinition 
 } 
 
 ColumnDef . _ Fields field = ColumnDef . _ Fields . findByName ( components [ 2 ] ) ; 
 + 
 + / / this means that given field was deprecated 
 + / / but still exists in the serialized schema 
 + if ( field = = null ) 
 + continue ; 
 + 
 columnDef . setFieldValue ( field , deserializeValue ( column . value ( ) , getValueClass ( ColumnDef . class , field . getFieldName ( ) ) ) ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / config / KSMetaData . java b / src / java / org / apache / cassandra / config / KSMetaData . java 
 index 816c086 . . fb33974 100644 
 - - - a / src / java / org / apache / cassandra / config / KSMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / KSMetaData . java 
 @ @ - 306 , 6 + 306 , 12 @ @ public final class KSMetaData 
 continue ; 
 
 KsDef . _ Fields field = KsDef . _ Fields . findByName ( comparator . getString ( ksAttr . name ( ) ) ) ; 
 + 
 + / / this means that given field was deprecated 
 + / / but still exists in the serialized schema 
 + if ( field = = null ) 
 + continue ; 
 + 
 ksDef . setFieldValue ( field , deserializeValue ( ksAttr . value ( ) , getValueClass ( KsDef . class , field . getFieldName ( ) ) ) ) ; 
 } 
 
 @ @ - 380 , 6 + 386 , 12 @ @ public final class KSMetaData 
 } 
 
 CfDef . _ Fields field = CfDef . _ Fields . findByName ( attr [ 1 ] ) ; 
 + 
 + / / this means that given field was deprecated 
 + / / but still exists in the serialized schema 
 + if ( field = = null ) 
 + continue ; 
 + 
 cfDef . setFieldValue ( field , deserializeValue ( column . value ( ) , getValueClass ( CfDef . class , field . getFieldName ( ) ) ) ) ; 
 } 

