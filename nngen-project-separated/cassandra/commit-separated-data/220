BLEU SCORE: 0.022882533035912193

TEST MSG: Remove initialDirectories from CFS
GENERATED MSG: Followup to CASSANDRA - 8671 - additional data directories

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 9217382 . . 6834bfd 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Remove initialDirectories from CFS ( CASSANDRA - 13928 ) <nl> * Fix trivial log format error ( CASSANDRA - 14015 ) <nl> * Allow sstabledump to do a json object per partition ( CASSANDRA - 13848 ) <nl> * Add option to optimise merkle tree comparison across replicas ( CASSANDRA - 3200 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 1f7ba87 . . c12b474 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 90 , 44 + 90 , 6 @ @ import static org . apache . cassandra . utils . Throwables . maybeFail ; <nl> <nl> public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> - / / The directories which will be searched for sstables on cfs instantiation . <nl> - private static volatile Directories . DataDirectory [ ] initialDirectories = Directories . dataDirectories ; <nl> - <nl> - / * * <nl> - * A hook to add additional directories to initialDirectories . <nl> - * Any additional directories should be added prior to ColumnFamilyStore instantiation on startup <nl> - * <nl> - * Since the directories used by a given table are determined by the compaction strategy , <nl> - * it ' s possible for sstables to be written to directories specified outside of cassandra . yaml . <nl> - * By adding additional directories to initialDirectories , sstables in these extra locations are <nl> - * made discoverable on sstable instantiation . <nl> - * / <nl> - public static synchronized void addInitialDirectories ( Directories . DataDirectory [ ] newDirectories ) <nl> - { <nl> - assert newDirectories ! = null ; <nl> - <nl> - Set < Directories . DataDirectory > existing = Sets . newHashSet ( initialDirectories ) ; <nl> - <nl> - List < Directories . DataDirectory > replacementList = Lists . newArrayList ( initialDirectories ) ; <nl> - for ( Directories . DataDirectory directory : newDirectories ) <nl> - { <nl> - if ( ! existing . contains ( directory ) ) <nl> - { <nl> - replacementList . add ( directory ) ; <nl> - } <nl> - } <nl> - <nl> - Directories . DataDirectory [ ] replacementArray = new Directories . DataDirectory [ replacementList . size ( ) ] ; <nl> - replacementList . toArray ( replacementArray ) ; <nl> - initialDirectories = replacementArray ; <nl> - } <nl> - <nl> - public static Directories . DataDirectory [ ] getInitialDirectories ( ) <nl> - { <nl> - Directories . DataDirectory [ ] src = initialDirectories ; <nl> - return Arrays . copyOf ( src , src . length ) ; <nl> - } <nl> - <nl> private static final Logger logger = LoggerFactory . getLogger ( ColumnFamilyStore . class ) ; <nl> <nl> / * <nl> @ @ - 245 , 7 + 207 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> private final CompactionStrategyManager compactionStrategyManager ; <nl> <nl> - private volatile Directories directories ; <nl> + private final Directories directories ; <nl> <nl> public final TableMetrics metric ; <nl> public volatile long sampleLatencyNanos ; <nl> @ @ - 278 , 7 + 240 , 6 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> cfs . crcCheckChance = new DefaultValue ( metadata ( ) . params . crcCheckChance ) ; <nl> <nl> compactionStrategyManager . maybeReload ( metadata ( ) ) ; <nl> - directories = compactionStrategyManager . getDirectories ( ) ; <nl> <nl> scheduleFlush ( ) ; <nl> <nl> @ @ - 412 , 6 + 373 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> this . keyspace = keyspace ; <nl> this . metadata = metadata ; <nl> + this . directories = directories ; <nl> name = columnFamilyName ; <nl> minCompactionThreshold = new DefaultValue < > ( metadata . get ( ) . params . compaction . minCompactionThreshold ( ) ) ; <nl> maxCompactionThreshold = new DefaultValue < > ( metadata . get ( ) . params . compaction . maxCompactionThreshold ( ) ) ; <nl> @ @ - 437 , 22 + 399 , 9 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> data . addInitialSSTables ( sstables ) ; <nl> } <nl> <nl> - / * * <nl> - * When creating a CFS offline we change the default logic needed by CASSANDRA - 8671 <nl> - * and link the passed directories to be picked up by the compaction strategy <nl> - * / <nl> - if ( offline ) <nl> - this . directories = directories ; <nl> - else <nl> - this . directories = new Directories ( metadata . get ( ) , Directories . dataDirectories ) ; <nl> - <nl> - <nl> / / compaction strategy should be created after the CFS has been prepared <nl> compactionStrategyManager = new CompactionStrategyManager ( this ) ; <nl> <nl> - / / Since compaction can re - define data dir we need to reinit directories <nl> - this . directories = compactionStrategyManager . getDirectories ( ) ; <nl> - <nl> if ( maxCompactionThreshold . value ( ) < = 0 | | minCompactionThreshold . value ( ) < = 0 ) <nl> { <nl> logger . warn ( " Disabling compaction strategy by setting compaction thresholds to 0 is deprecated , set the compaction option ' enabled ' to ' false ' instead . " ) ; <nl> @ @ - 612 , 7 + 561 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> TableMetadataRef metadata , <nl> boolean loadSSTables ) <nl> { <nl> - Directories directories = new Directories ( metadata . get ( ) , initialDirectories ) ; <nl> + Directories directories = new Directories ( metadata . get ( ) ) ; <nl> return createColumnFamilyStore ( keyspace , columnFamily , metadata , directories , loadSSTables , true , false ) ; <nl> } <nl> <nl> @ @ - 648 , 7 + 597 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> * / <nl> public static void scrubDataDirectories ( TableMetadata metadata ) throws StartupException <nl> { <nl> - Directories directories = new Directories ( metadata , initialDirectories ) ; <nl> + Directories directories = new Directories ( metadata ) ; <nl> Set < File > cleanedDirectories = new HashSet < > ( ) ; <nl> <nl> / / clear ephemeral snapshots that were not properly cleared last session ( CASSANDRA - 7357 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / Keyspace . java b / src / java / org / apache / cassandra / db / Keyspace . java <nl> index c3e649a . . df1ba39 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Keyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / Keyspace . java <nl> @ @ - 304 , 7 + 304 , 7 @ @ public class Keyspace <nl> * / <nl> public static void clearSnapshot ( String snapshotName , String keyspace ) <nl> { <nl> - List < File > snapshotDirs = Directories . getKSChildDirectories ( keyspace , ColumnFamilyStore . getInitialDirectories ( ) ) ; <nl> + List < File > snapshotDirs = Directories . getKSChildDirectories ( keyspace ) ; <nl> Directories . clearSnapshot ( snapshotName , snapshotDirs ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java <nl> index 8a01ba9 . . d520d8f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java <nl> @ @ - 560 , 21 + 560 , 6 @ @ public class CompactionStrategyManager implements INotificationConsumer <nl> return shouldDefragment ; <nl> } <nl> <nl> - public Directories getDirectories ( ) <nl> - { <nl> - maybeReloadDiskBoundaries ( ) ; <nl> - readLock . lock ( ) ; <nl> - try <nl> - { <nl> - assert repaired . get ( 0 ) . getClass ( ) . equals ( unrepaired . get ( 0 ) . getClass ( ) ) ; <nl> - return repaired . get ( 0 ) . getDirectories ( ) ; <nl> - } <nl> - finally <nl> - { <nl> - readLock . unlock ( ) ; <nl> - } <nl> - } <nl> - <nl> private void handleFlushNotification ( Iterable < SSTableReader > added ) <nl> { <nl> / / If reloaded , SSTables will be placed in their correct locations <nl> diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java b / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java <nl> index d92cfc7 . . d38c324 100644 <nl> - - - a / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java <nl> + + + b / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java <nl> @ @ - 428 , 7 + 428 , 7 @ @ class LogTransaction extends Transactional . AbstractTransactional implements Tran <nl> * / <nl> static boolean removeUnfinishedLeftovers ( TableMetadata metadata ) <nl> { <nl> - return removeUnfinishedLeftovers ( new Directories ( metadata , ColumnFamilyStore . getInitialDirectories ( ) ) . getCFDirectories ( ) ) ; <nl> + return removeUnfinishedLeftovers ( new Directories ( metadata ) . getCFDirectories ( ) ) ; <nl> } <nl> <nl> @ VisibleForTesting <nl> diff - - git a / src / java / org / apache / cassandra / tools / StandaloneSSTableUtil . java b / src / java / org / apache / cassandra / tools / StandaloneSSTableUtil . java <nl> index 3a6be63 . . 9a7847a 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / StandaloneSSTableUtil . java <nl> + + + b / src / java / org / apache / cassandra / tools / StandaloneSSTableUtil . java <nl> @ @ - 84 , 7 + 84 , 7 @ @ public class StandaloneSSTableUtil <nl> <nl> private static void listFiles ( Options options , TableMetadata metadata , OutputHandler handler ) throws IOException <nl> { <nl> - Directories directories = new Directories ( metadata , ColumnFamilyStore . getInitialDirectories ( ) ) ; <nl> + Directories directories = new Directories ( metadata ) ; <nl> <nl> for ( File dir : directories . getCFDirectories ( ) ) <nl> {
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 9217382 . . 6834bfd 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Remove initialDirectories from CFS ( CASSANDRA - 13928 ) 
 * Fix trivial log format error ( CASSANDRA - 14015 ) 
 * Allow sstabledump to do a json object per partition ( CASSANDRA - 13848 ) 
 * Add option to optimise merkle tree comparison across replicas ( CASSANDRA - 3200 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 1f7ba87 . . c12b474 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 90 , 44 + 90 , 6 @ @ import static org . apache . cassandra . utils . Throwables . maybeFail ; 
 
 public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 - / / The directories which will be searched for sstables on cfs instantiation . 
 - private static volatile Directories . DataDirectory [ ] initialDirectories = Directories . dataDirectories ; 
 - 
 - / * * 
 - * A hook to add additional directories to initialDirectories . 
 - * Any additional directories should be added prior to ColumnFamilyStore instantiation on startup 
 - * 
 - * Since the directories used by a given table are determined by the compaction strategy , 
 - * it ' s possible for sstables to be written to directories specified outside of cassandra . yaml . 
 - * By adding additional directories to initialDirectories , sstables in these extra locations are 
 - * made discoverable on sstable instantiation . 
 - * / 
 - public static synchronized void addInitialDirectories ( Directories . DataDirectory [ ] newDirectories ) 
 - { 
 - assert newDirectories ! = null ; 
 - 
 - Set < Directories . DataDirectory > existing = Sets . newHashSet ( initialDirectories ) ; 
 - 
 - List < Directories . DataDirectory > replacementList = Lists . newArrayList ( initialDirectories ) ; 
 - for ( Directories . DataDirectory directory : newDirectories ) 
 - { 
 - if ( ! existing . contains ( directory ) ) 
 - { 
 - replacementList . add ( directory ) ; 
 - } 
 - } 
 - 
 - Directories . DataDirectory [ ] replacementArray = new Directories . DataDirectory [ replacementList . size ( ) ] ; 
 - replacementList . toArray ( replacementArray ) ; 
 - initialDirectories = replacementArray ; 
 - } 
 - 
 - public static Directories . DataDirectory [ ] getInitialDirectories ( ) 
 - { 
 - Directories . DataDirectory [ ] src = initialDirectories ; 
 - return Arrays . copyOf ( src , src . length ) ; 
 - } 
 - 
 private static final Logger logger = LoggerFactory . getLogger ( ColumnFamilyStore . class ) ; 
 
 / * 
 @ @ - 245 , 7 + 207 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 private final CompactionStrategyManager compactionStrategyManager ; 
 
 - private volatile Directories directories ; 
 + private final Directories directories ; 
 
 public final TableMetrics metric ; 
 public volatile long sampleLatencyNanos ; 
 @ @ - 278 , 7 + 240 , 6 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 cfs . crcCheckChance = new DefaultValue ( metadata ( ) . params . crcCheckChance ) ; 
 
 compactionStrategyManager . maybeReload ( metadata ( ) ) ; 
 - directories = compactionStrategyManager . getDirectories ( ) ; 
 
 scheduleFlush ( ) ; 
 
 @ @ - 412 , 6 + 373 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 this . keyspace = keyspace ; 
 this . metadata = metadata ; 
 + this . directories = directories ; 
 name = columnFamilyName ; 
 minCompactionThreshold = new DefaultValue < > ( metadata . get ( ) . params . compaction . minCompactionThreshold ( ) ) ; 
 maxCompactionThreshold = new DefaultValue < > ( metadata . get ( ) . params . compaction . maxCompactionThreshold ( ) ) ; 
 @ @ - 437 , 22 + 399 , 9 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 data . addInitialSSTables ( sstables ) ; 
 } 
 
 - / * * 
 - * When creating a CFS offline we change the default logic needed by CASSANDRA - 8671 
 - * and link the passed directories to be picked up by the compaction strategy 
 - * / 
 - if ( offline ) 
 - this . directories = directories ; 
 - else 
 - this . directories = new Directories ( metadata . get ( ) , Directories . dataDirectories ) ; 
 - 
 - 
 / / compaction strategy should be created after the CFS has been prepared 
 compactionStrategyManager = new CompactionStrategyManager ( this ) ; 
 
 - / / Since compaction can re - define data dir we need to reinit directories 
 - this . directories = compactionStrategyManager . getDirectories ( ) ; 
 - 
 if ( maxCompactionThreshold . value ( ) < = 0 | | minCompactionThreshold . value ( ) < = 0 ) 
 { 
 logger . warn ( " Disabling compaction strategy by setting compaction thresholds to 0 is deprecated , set the compaction option ' enabled ' to ' false ' instead . " ) ; 
 @ @ - 612 , 7 + 561 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 TableMetadataRef metadata , 
 boolean loadSSTables ) 
 { 
 - Directories directories = new Directories ( metadata . get ( ) , initialDirectories ) ; 
 + Directories directories = new Directories ( metadata . get ( ) ) ; 
 return createColumnFamilyStore ( keyspace , columnFamily , metadata , directories , loadSSTables , true , false ) ; 
 } 
 
 @ @ - 648 , 7 + 597 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 * / 
 public static void scrubDataDirectories ( TableMetadata metadata ) throws StartupException 
 { 
 - Directories directories = new Directories ( metadata , initialDirectories ) ; 
 + Directories directories = new Directories ( metadata ) ; 
 Set < File > cleanedDirectories = new HashSet < > ( ) ; 
 
 / / clear ephemeral snapshots that were not properly cleared last session ( CASSANDRA - 7357 ) 
 diff - - git a / src / java / org / apache / cassandra / db / Keyspace . java b / src / java / org / apache / cassandra / db / Keyspace . java 
 index c3e649a . . df1ba39 100644 
 - - - a / src / java / org / apache / cassandra / db / Keyspace . java 
 + + + b / src / java / org / apache / cassandra / db / Keyspace . java 
 @ @ - 304 , 7 + 304 , 7 @ @ public class Keyspace 
 * / 
 public static void clearSnapshot ( String snapshotName , String keyspace ) 
 { 
 - List < File > snapshotDirs = Directories . getKSChildDirectories ( keyspace , ColumnFamilyStore . getInitialDirectories ( ) ) ; 
 + List < File > snapshotDirs = Directories . getKSChildDirectories ( keyspace ) ; 
 Directories . clearSnapshot ( snapshotName , snapshotDirs ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java 
 index 8a01ba9 . . d520d8f 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java 
 @ @ - 560 , 21 + 560 , 6 @ @ public class CompactionStrategyManager implements INotificationConsumer 
 return shouldDefragment ; 
 } 
 
 - public Directories getDirectories ( ) 
 - { 
 - maybeReloadDiskBoundaries ( ) ; 
 - readLock . lock ( ) ; 
 - try 
 - { 
 - assert repaired . get ( 0 ) . getClass ( ) . equals ( unrepaired . get ( 0 ) . getClass ( ) ) ; 
 - return repaired . get ( 0 ) . getDirectories ( ) ; 
 - } 
 - finally 
 - { 
 - readLock . unlock ( ) ; 
 - } 
 - } 
 - 
 private void handleFlushNotification ( Iterable < SSTableReader > added ) 
 { 
 / / If reloaded , SSTables will be placed in their correct locations 
 diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java b / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java 
 index d92cfc7 . . d38c324 100644 
 - - - a / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java 
 + + + b / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java 
 @ @ - 428 , 7 + 428 , 7 @ @ class LogTransaction extends Transactional . AbstractTransactional implements Tran 
 * / 
 static boolean removeUnfinishedLeftovers ( TableMetadata metadata ) 
 { 
 - return removeUnfinishedLeftovers ( new Directories ( metadata , ColumnFamilyStore . getInitialDirectories ( ) ) . getCFDirectories ( ) ) ; 
 + return removeUnfinishedLeftovers ( new Directories ( metadata ) . getCFDirectories ( ) ) ; 
 } 
 
 @ VisibleForTesting 
 diff - - git a / src / java / org / apache / cassandra / tools / StandaloneSSTableUtil . java b / src / java / org / apache / cassandra / tools / StandaloneSSTableUtil . java 
 index 3a6be63 . . 9a7847a 100644 
 - - - a / src / java / org / apache / cassandra / tools / StandaloneSSTableUtil . java 
 + + + b / src / java / org / apache / cassandra / tools / StandaloneSSTableUtil . java 
 @ @ - 84 , 7 + 84 , 7 @ @ public class StandaloneSSTableUtil 
 
 private static void listFiles ( Options options , TableMetadata metadata , OutputHandler handler ) throws IOException 
 { 
 - Directories directories = new Directories ( metadata , ColumnFamilyStore . getInitialDirectories ( ) ) ; 
 + Directories directories = new Directories ( metadata ) ; 
 
 for ( File dir : directories . getCFDirectories ( ) ) 
 {

NEAREST DIFF:
ELIMINATEDSENTENCE
