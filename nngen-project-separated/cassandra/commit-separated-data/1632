BLEU SCORE: 0.005126350474233546

TEST MSG: Add client warnings to native protocol v4
GENERATED MSG: Gossip metadata version and request updates . Patch by Gary Dusbabek , reviewed by Jonthan Ellis . CASSANDRA - 827

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e83b385 . . 325a5f3 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 <nl> + * Add client warnings to native protocol v4 ( CASSANDRA - 8930 ) <nl> * Allow roles cache to be invalidated ( CASSANDRA - 8967 ) <nl> * Upgrade Snappy ( CASSANDRA - 9063 ) <nl> * Don ' t start Thrift rpc by default ( CASSANDRA - 9319 ) <nl> diff - - git a / doc / native _ protocol _ v4 . spec b / doc / native _ protocol _ v4 . spec <nl> index 143fc4a . . 4014594 100644 <nl> - - - a / doc / native _ protocol _ v4 . spec <nl> + + + b / doc / native _ protocol _ v4 . spec <nl> @ @ - 133 , 6 + 133 , 12 @ @ Table of Contents <nl> If both trace - flag and payload - flag are set , the generic key - value <nl> payload appears after trace ' s data . <nl> Type of custom payload is [ bytes map ] ( see below ) . <nl> + 0x08 : Warning flag . The response contains warnings from the server which <nl> + were generated by the server to go along with this response . <nl> + If a response frame has the warning flag set , its body will contain the <nl> + text of the warnings . The warnings are a [ string list ] and will be the <nl> + first value in the frame body if the tracing flag is not set , or directly <nl> + after the tracing ID if it is . <nl> <nl> The rest of the flags is currently unused and ignored . <nl> <nl> @ @ - 772 , 7 + 778 , 7 @ @ Table of Contents <nl> Clients are expected to answer the server challenge by an AUTH _ RESPONSE <nl> message . <nl> <nl> - 4 . 2 . 7 . AUTH _ SUCCESS <nl> + 4 . 2 . 8 . AUTH _ SUCCESS <nl> <nl> Indicate the success of the authentication phase . See Section 4 . 2 . 3 for more <nl> details . <nl> @ @ - 1134 , 3 + 1140 , 4 @ @ Table of Contents <nl> * Function _ failure error code was added . <nl> * Add custom payload to frames for custom QueryHandler implementations ( ignored by Cassandra ' s standard QueryHandler ) <nl> * Add " TRACE _ COMPLETE " event ( section 4 . 2 . 6 ) . <nl> + * Add warnings to frames for responses for which the server generated a warning during processing , which the client needs to address . <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index 421794e . . 2ede76e 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 148 , 8 + 148 , 8 @ @ public class Config <nl> <nl> / * if the size of columns or super - columns are more than this , indexing will kick in * / <nl> public Integer column _ index _ size _ in _ kb = 64 ; <nl> - public Integer batch _ size _ warn _ threshold _ in _ kb = 5 ; <nl> - public volatile Integer batch _ size _ fail _ threshold _ in _ kb = 50 ; <nl> + public volatile int batch _ size _ warn _ threshold _ in _ kb = 5 ; <nl> + public volatile int batch _ size _ fail _ threshold _ in _ kb = 50 ; <nl> public Integer concurrent _ compactors ; <nl> public volatile Integer compaction _ throughput _ mb _ per _ sec = 16 ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index ec90be2 . . b5c5fb4 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 617 , 11 + 617 , 6 @ @ public class DatabaseDescriptor <nl> } <nl> if ( seedProvider . getSeeds ( ) . size ( ) = = 0 ) <nl> throw new ConfigurationException ( " The seed provider lists no seeds . " , false ) ; <nl> - <nl> - if ( conf . batch _ size _ fail _ threshold _ in _ kb = = null ) <nl> - { <nl> - conf . batch _ size _ fail _ threshold _ in _ kb = conf . batch _ size _ warn _ threshold _ in _ kb * 10 ; <nl> - } <nl> } <nl> <nl> private static IEndpointSnitch createEndpointSnitch ( String snitchClassName ) throws ConfigurationException <nl> @ @ - 801 , 6 + 796 , 11 @ @ public class DatabaseDescriptor <nl> return conf . batch _ size _ fail _ threshold _ in _ kb ; <nl> } <nl> <nl> + public static void setBatchSizeWarnThresholdInKB ( int threshold ) <nl> + { <nl> + conf . batch _ size _ warn _ threshold _ in _ kb = threshold ; <nl> + } <nl> + <nl> public static void setBatchSizeFailThresholdInKB ( int threshold ) <nl> { <nl> conf . batch _ size _ fail _ threshold _ in _ kb = threshold ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> index 465b2d9 . . ddc46c1 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . composites . Composite ; <nl> import org . apache . cassandra . exceptions . * ; <nl> import org . apache . cassandra . service . ClientState ; <nl> + import org . apache . cassandra . service . ClientWarn ; <nl> import org . apache . cassandra . service . QueryState ; <nl> import org . apache . cassandra . service . StorageProxy ; <nl> import org . apache . cassandra . tracing . Tracing ; <nl> @ @ - 260 , 6 + 261 , 7 @ @ public class BatchStatement implements CQLStatement <nl> { <nl> logger . warn ( format , ksCfPairs , size , warnThreshold , size - warnThreshold , " " ) ; <nl> } <nl> + ClientWarn . warn ( String . format ( format , ksCfPairs , size , warnThreshold , size - warnThreshold , " " ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java <nl> index d914f51 . . 697c715 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java <nl> @ @ - 38 , 6 + 38 , 7 @ @ import org . apache . cassandra . io . IVersionedSerializer ; <nl> import org . apache . cassandra . io . sstable . format . SSTableReader ; <nl> import org . apache . cassandra . io . util . DataOutputPlus ; <nl> import org . apache . cassandra . io . util . FileDataInput ; <nl> + import org . apache . cassandra . service . ClientWarn ; <nl> import org . apache . cassandra . tracing . Tracing ; <nl> <nl> public class SliceQueryFilter implements IDiskAtomFilter <nl> @ @ - 241 , 6 + 242 , 7 @ @ public class SliceQueryFilter implements IDiskAtomFilter <nl> container . metadata ( ) . getKeyValidator ( ) . getString ( key . getKey ( ) ) , <nl> count , <nl> getSlicesInfo ( container ) ) ; <nl> + ClientWarn . warn ( msg ) ; <nl> logger . warn ( msg ) ; <nl> } <nl> Tracing . trace ( " Read { } live and { } tombstone cells { } " , <nl> diff - - git a / src / java / org / apache / cassandra / service / ClientWarn . java b / src / java / org / apache / cassandra / service / ClientWarn . java <nl> new file mode 100644 <nl> index 0000000 . . 2ed0a6c <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / service / ClientWarn . java <nl> @ @ - 0 , 0 + 1 , 73 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> + <nl> + public class ClientWarn <nl> + { <nl> + private static final String TRUNCATED = " [ truncated ] " ; <nl> + private static final ThreadLocal < ClientWarn > warnLocal = new ThreadLocal < > ( ) ; <nl> + <nl> + private final List < String > warnings = new ArrayList < > ( ) ; <nl> + <nl> + private ClientWarn ( ) <nl> + { <nl> + } <nl> + <nl> + public static void warn ( String text ) <nl> + { <nl> + ClientWarn warner = warnLocal . get ( ) ; <nl> + if ( warner ! = null ) <nl> + warner . add ( text ) ; <nl> + } <nl> + <nl> + private void add ( String warning ) <nl> + { <nl> + if ( warnings . size ( ) < FBUtilities . MAX _ UNSIGNED _ SHORT ) <nl> + warnings . add ( maybeTruncate ( warning ) ) ; <nl> + } <nl> + <nl> + private static String maybeTruncate ( String warning ) <nl> + { <nl> + return warning . length ( ) > FBUtilities . MAX _ UNSIGNED _ SHORT <nl> + ? warning . substring ( 0 , FBUtilities . MAX _ UNSIGNED _ SHORT - TRUNCATED . length ( ) ) + TRUNCATED <nl> + : warning ; <nl> + } <nl> + <nl> + public static void captureWarnings ( ) <nl> + { <nl> + warnLocal . set ( new ClientWarn ( ) ) ; <nl> + } <nl> + <nl> + public static List < String > getWarnings ( ) <nl> + { <nl> + ClientWarn warner = warnLocal . get ( ) ; <nl> + if ( warner = = null | | warner . warnings . isEmpty ( ) ) <nl> + return null ; <nl> + return warner . warnings ; <nl> + } <nl> + <nl> + public static void resetWarnings ( ) <nl> + { <nl> + warnLocal . remove ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / transport / Frame . java b / src / java / org / apache / cassandra / transport / Frame . java <nl> index b72259d . . 0c038ea 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Frame . java <nl> + + + b / src / java / org / apache / cassandra / transport / Frame . java <nl> @ @ - 112 , 7 + 112 , 8 @ @ public class Frame <nl> / / The order of that enum matters ! ! <nl> COMPRESSED , <nl> TRACING , <nl> - CUSTOM _ PAYLOAD ; <nl> + CUSTOM _ PAYLOAD , <nl> + WARNING ; <nl> <nl> private static final Flag [ ] ALL _ VALUES = values ( ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / transport / Message . java b / src / java / org / apache / cassandra / transport / Message . java <nl> index 3382593 . . b6d5a95 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Message . java <nl> + + + b / src / java / org / apache / cassandra / transport / Message . java <nl> @ @ - 41 , 6 + 41 , 7 @ @ import com . google . common . collect . ImmutableSet ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . service . ClientWarn ; <nl> import org . apache . cassandra . transport . messages . * ; <nl> import org . apache . cassandra . service . QueryState ; <nl> import org . apache . cassandra . utils . JVMStabilityInspector ; <nl> @ @ - 223 , 6 + 224 , 7 @ @ public abstract class Message <nl> public static abstract class Response extends Message <nl> { <nl> protected UUID tracingId ; <nl> + protected List < String > warnings ; <nl> <nl> protected Response ( Type type ) <nl> { <nl> @ @ - 242 , 6 + 244 , 17 @ @ public abstract class Message <nl> { <nl> return tracingId ; <nl> } <nl> + <nl> + public Message setWarnings ( List < String > warnings ) <nl> + { <nl> + this . warnings = warnings ; <nl> + return this ; <nl> + } <nl> + <nl> + public List < String > getWarnings ( ) <nl> + { <nl> + return warnings ; <nl> + } <nl> } <nl> <nl> @ ChannelHandler . Sharable <nl> @ @ - 252 , 8 + 265 , 10 @ @ public abstract class Message <nl> boolean isRequest = frame . header . type . direction = = Direction . REQUEST ; <nl> boolean isTracing = frame . header . flags . contains ( Frame . Header . Flag . TRACING ) ; <nl> boolean isCustomPayload = frame . header . flags . contains ( Frame . Header . Flag . CUSTOM _ PAYLOAD ) ; <nl> + boolean hasWarning = frame . header . flags . contains ( Frame . Header . Flag . WARNING ) ; <nl> <nl> UUID tracingId = isRequest | | ! isTracing ? null : CBUtil . readUUID ( frame . body ) ; <nl> + List < String > warnings = isRequest | | ! hasWarning ? null : CBUtil . readStringList ( frame . body ) ; <nl> Map < String , byte [ ] > customPayload = ! isCustomPayload ? null : CBUtil . readBytesMap ( frame . body ) ; <nl> <nl> try <nl> @ @ - 280 , 6 + 295 , 8 @ @ public abstract class Message <nl> assert message instanceof Response ; <nl> if ( isTracing ) <nl> ( ( Response ) message ) . setTracingId ( tracingId ) ; <nl> + if ( hasWarning ) <nl> + ( ( Response ) message ) . setWarnings ( warnings ) ; <nl> } <nl> <nl> results . add ( message ) ; <nl> @ @ - 315 , 6 + 332 , 13 @ @ public abstract class Message <nl> Map < String , byte [ ] > customPayload = message . getCustomPayload ( ) ; <nl> if ( tracingId ! = null ) <nl> messageSize + = CBUtil . sizeOfUUID ( tracingId ) ; <nl> + List < String > warnings = ( ( Response ) message ) . getWarnings ( ) ; <nl> + if ( warnings ! = null ) <nl> + { <nl> + if ( version < Server . VERSION _ 4 ) <nl> + throw new ProtocolException ( " Must not send frame with WARNING flag for native protocol version < 4 " ) ; <nl> + messageSize + = CBUtil . sizeOfStringList ( warnings ) ; <nl> + } <nl> if ( customPayload ! = null ) <nl> { <nl> if ( version < Server . VERSION _ 4 ) <nl> @ @ - 327 , 6 + 351 , 11 @ @ public abstract class Message <nl> CBUtil . writeUUID ( tracingId , body ) ; <nl> flags . add ( Frame . Header . Flag . TRACING ) ; <nl> } <nl> + if ( warnings ! = null ) <nl> + { <nl> + CBUtil . writeStringList ( warnings , body ) ; <nl> + flags . add ( Frame . Header . Flag . WARNING ) ; <nl> + } <nl> if ( customPayload ! = null ) <nl> { <nl> CBUtil . writeBytesMap ( customPayload , body ) ; <nl> @ @ - 468 , 12 + 497 , 15 @ @ public abstract class Message <nl> { <nl> assert request . connection ( ) instanceof ServerConnection ; <nl> connection = ( ServerConnection ) request . connection ( ) ; <nl> + if ( connection . getVersion ( ) > = Server . VERSION _ 4 ) <nl> + ClientWarn . captureWarnings ( ) ; <nl> + <nl> QueryState qstate = connection . validateNewMessage ( request . type , connection . getVersion ( ) , request . getStreamId ( ) ) ; <nl> <nl> logger . debug ( " Received : { } , v = { } " , request , connection . getVersion ( ) ) ; <nl> - <nl> response = request . execute ( qstate ) ; <nl> response . setStreamId ( request . getStreamId ( ) ) ; <nl> + response . setWarnings ( ClientWarn . getWarnings ( ) ) ; <nl> response . attach ( connection ) ; <nl> connection . applyStateTransition ( request . type , response . type ) ; <nl> } <nl> @ @ - 484 , 6 + 516 , 10 @ @ public abstract class Message <nl> flush ( new FlushItem ( ctx , ErrorMessage . fromException ( t , handler ) . setStreamId ( request . getStreamId ( ) ) , request . getSourceFrame ( ) ) ) ; <nl> return ; <nl> } <nl> + finally <nl> + { <nl> + ClientWarn . resetWarnings ( ) ; <nl> + } <nl> <nl> logger . debug ( " Responding : { } , v = { } " , response , connection . getVersion ( ) ) ; <nl> flush ( new FlushItem ( ctx , response , request . getSourceFrame ( ) ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / transport / SimpleClient . java b / src / java / org / apache / cassandra / transport / SimpleClient . java <nl> index b39f166 . . 701a24c 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / SimpleClient . java <nl> + + + b / src / java / org / apache / cassandra / transport / SimpleClient . java <nl> @ @ - 17 , 6 + 17 , 7 @ @ <nl> * / <nl> package org . apache . cassandra . transport ; <nl> <nl> + import java . io . Closeable ; <nl> import java . io . IOException ; <nl> import java . net . InetSocketAddress ; <nl> import java . nio . ByteBuffer ; <nl> @ @ - 60 , 7 + 61 , 7 @ @ import io . netty . channel . ChannelPipeline ; <nl> import io . netty . handler . ssl . SslHandler ; <nl> import static org . apache . cassandra . config . EncryptionOptions . ClientEncryptionOptions ; <nl> <nl> - public class SimpleClient <nl> + public class SimpleClient implements Closeable <nl> { <nl> static <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / service / ClientWarningsTest . java b / test / unit / org / apache / cassandra / service / ClientWarningsTest . java <nl> new file mode 100644 <nl> index 0000000 . . ce35169 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / service / ClientWarningsTest . java <nl> @ @ - 0 , 0 + 1 , 81 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import org . apache . commons . lang3 . StringUtils ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . cql3 . CQLTester ; <nl> + import org . apache . cassandra . cql3 . QueryOptions ; <nl> + import org . apache . cassandra . transport . Message ; <nl> + import org . apache . cassandra . transport . Server ; <nl> + import org . apache . cassandra . transport . SimpleClient ; <nl> + import org . apache . cassandra . transport . messages . QueryMessage ; <nl> + <nl> + import static junit . framework . Assert . assertEquals ; <nl> + import static junit . framework . Assert . assertNull ; <nl> + <nl> + public class ClientWarningsTest extends CQLTester <nl> + { <nl> + @ BeforeClass <nl> + public static void setUp ( ) <nl> + { <nl> + requireNetwork ( ) ; <nl> + DatabaseDescriptor . setBatchSizeWarnThresholdInKB ( 1 ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testLargeBatchWithProtoV4 ( ) throws Exception <nl> + { <nl> + createTable ( " CREATE TABLE % s ( pk int PRIMARY KEY , v text ) " ) ; <nl> + <nl> + try ( SimpleClient client = new SimpleClient ( nativeAddr . getHostAddress ( ) , nativePort , Server . VERSION _ 4 ) ) <nl> + { <nl> + client . connect ( false ) ; <nl> + <nl> + QueryMessage query = new QueryMessage ( createBatchStatement ( DatabaseDescriptor . getBatchSizeWarnThreshold ( ) ) , QueryOptions . DEFAULT ) ; <nl> + Message . Response resp = client . execute ( query ) ; <nl> + assertEquals ( 1 , resp . getWarnings ( ) . size ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testLargeBatchWithProtoV2 ( ) throws Exception <nl> + { <nl> + createTable ( " CREATE TABLE % s ( pk int PRIMARY KEY , v text ) " ) ; <nl> + <nl> + try ( SimpleClient client = new SimpleClient ( nativeAddr . getHostAddress ( ) , nativePort , Server . VERSION _ 2 ) ) <nl> + { <nl> + client . connect ( false ) ; <nl> + <nl> + QueryMessage query = new QueryMessage ( createBatchStatement ( DatabaseDescriptor . getBatchSizeWarnThreshold ( ) ) , QueryOptions . DEFAULT ) ; <nl> + Message . Response resp = client . execute ( query ) ; <nl> + assertNull ( resp . getWarnings ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + private String createBatchStatement ( int minSize ) <nl> + { <nl> + return String . format ( " BEGIN UNLOGGED BATCH INSERT INTO % s . % s ( pk , v ) VALUES ( 1 , ' % s ' ) APPLY BATCH ; " , <nl> + KEYSPACE , <nl> + currentTable ( ) , <nl> + StringUtils . repeat ( ' 1 ' , minSize ) ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / concurrent / StageManager . java b / src / java / org / apache / cassandra / concurrent / StageManager . java <nl> index b772a09 . . f0436f6 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / StageManager . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / StageManager . java <nl> @ @ - 47 , 6 + 47 , 7 @ @ public class StageManager <nl> public static final String RESPONSE _ STAGE = " RESPONSE - STAGE " ; <nl> public final static String AE _ SERVICE _ STAGE = " AE - SERVICE - STAGE " ; <nl> private static final String LOADBALANCE _ STAGE = " LOAD - BALANCER - STAGE " ; <nl> + public static final String MIGRATION _ STAGE = " MIGRATION - STAGE " ; <nl> <nl> static <nl> { <nl> @ @ - 58 , 6 + 59 , 7 @ @ public class StageManager <nl> stages . put ( GOSSIP _ STAGE , new JMXEnabledThreadPoolExecutor ( " GMFD " ) ) ; <nl> stages . put ( AE _ SERVICE _ STAGE , new JMXEnabledThreadPoolExecutor ( AE _ SERVICE _ STAGE ) ) ; <nl> stages . put ( LOADBALANCE _ STAGE , new JMXEnabledThreadPoolExecutor ( LOADBALANCE _ STAGE ) ) ; <nl> + stages . put ( MIGRATION _ STAGE , new JMXEnabledThreadPoolExecutor ( MIGRATION _ STAGE ) ) ; <nl> } <nl> <nl> private static ThreadPoolExecutor multiThreadedStage ( String name , int numThreads ) <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 618c614 . . 506fe68 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 132 , 7 + 132 , 8 @ @ public class DatabaseDescriptor <nl> <nl> private final static String STORAGE _ CONF _ FILE = " storage - conf . xml " ; <nl> <nl> - private static UUID defsVersion = null ; <nl> + private static final UUID INITIAL _ VERSION = new UUID ( 4096 , 0 ) ; / / has type nibble set to 1 , everything else to zero . <nl> + private static UUID defsVersion = INITIAL _ VERSION ; <nl> <nl> / * * <nl> * Try the storage - config system property , and then inspect the classpath . <nl> diff - - git a / src / java / org / apache / cassandra / db / DefinitionsAnnounceVerbHandler . java b / src / java / org / apache / cassandra / db / DefinitionsAnnounceVerbHandler . java <nl> new file mode 100644 <nl> index 0000000 . . 62619d6 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / db / DefinitionsAnnounceVerbHandler . java <nl> @ @ - 0 , 0 + 1 , 36 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * < p / > <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * < p / > <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . db ; <nl> + <nl> + import org . apache . cassandra . net . IVerbHandler ; <nl> + import org . apache . cassandra . net . Message ; <nl> + import org . apache . cassandra . service . MigrationManager ; <nl> + <nl> + import java . util . UUID ; <nl> + <nl> + public class DefinitionsAnnounceVerbHandler implements IVerbHandler <nl> + { <nl> + <nl> + / * * someone is announcing their schema version . * / <nl> + public void doVerb ( Message message ) <nl> + { <nl> + UUID theirVersion = UUID . fromString ( new String ( message . getMessageBody ( ) ) ) ; <nl> + MigrationManager . rectify ( theirVersion , message . getFrom ( ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / db / DefinitionsUpdateResponseVerbHandler . java b / src / java / org / apache / cassandra / db / DefinitionsUpdateResponseVerbHandler . java <nl> new file mode 100644 <nl> index 0000000 . . edca073 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / db / DefinitionsUpdateResponseVerbHandler . java <nl> @ @ - 0 , 0 + 1 , 81 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * < p / > <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * < p / > <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . db ; <nl> + <nl> + import org . apache . cassandra . concurrent . StageManager ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . db . migration . Migration ; <nl> + import org . apache . cassandra . net . IVerbHandler ; <nl> + import org . apache . cassandra . net . Message ; <nl> + import org . apache . cassandra . service . MigrationManager ; <nl> + import org . apache . cassandra . utils . UUIDGen ; <nl> + import org . apache . cassandra . utils . WrappedRunnable ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import java . io . ByteArrayInputStream ; <nl> + import java . io . IOError ; <nl> + import java . io . IOException ; <nl> + import java . util . Collection ; <nl> + import java . util . UUID ; <nl> + <nl> + public class DefinitionsUpdateResponseVerbHandler implements IVerbHandler <nl> + { <nl> + private static final Logger logger = LoggerFactory . getLogger ( DefinitionsUpdateResponseVerbHandler . class ) ; <nl> + <nl> + / * * someone sent me their data definitions * / <nl> + public void doVerb ( final Message message ) <nl> + { <nl> + try <nl> + { <nl> + / / these are the serialized row mutations that I must apply . <nl> + / / check versions at every step along the way to make sure migrations are not applied out of order . <nl> + Collection < Column > cols = MigrationManager . makeColumns ( message ) ; <nl> + for ( Column col : cols ) <nl> + { <nl> + final UUID version = UUIDGen . makeType1UUID ( col . name ( ) ) ; <nl> + if ( version . timestamp ( ) > DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) ) <nl> + { <nl> + final Migration m = Migration . deserialize ( new ByteArrayInputStream ( col . value ( ) ) ) ; <nl> + assert m . getVersion ( ) . equals ( version ) ; <nl> + StageManager . getStage ( StageManager . MIGRATION _ STAGE ) . submit ( new WrappedRunnable ( ) <nl> + { <nl> + @ Override <nl> + protected void runMayThrow ( ) throws Exception <nl> + { <nl> + / / check to make sure the current version is before this one . <nl> + if ( DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) > = version . timestamp ( ) ) <nl> + logger . debug ( " Not applying " + version . toString ( ) ) ; <nl> + else <nl> + { <nl> + logger . debug ( " Applying { } from { } " , m . getClass ( ) . getSimpleName ( ) , message . getFrom ( ) ) ; <nl> + m . apply ( ) ; <nl> + m . announce ( ) ; <nl> + } <nl> + } <nl> + } ) ; <nl> + } <nl> + } <nl> + } <nl> + catch ( IOException ex ) <nl> + { <nl> + throw new IOError ( ex ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index d459459 . . 52f25b2 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 19 , 7 + 19 , 6 @ @ <nl> package org . apache . cassandra . service ; <nl> <nl> import java . io . IOException ; <nl> - import java . io . IOError ; <nl> import java . lang . management . ManagementFactory ; <nl> import java . lang . reflect . Constructor ; <nl> import java . util . * ; <nl> @ @ - 40 , 9 + 39 , 7 @ @ import org . apache . cassandra . db . commitlog . CommitLog ; <nl> import org . apache . cassandra . dht . * ; <nl> import org . apache . cassandra . gms . * ; <nl> import org . apache . cassandra . io . DeletionService ; <nl> - import org . apache . cassandra . io . sstable . SSTable ; <nl> import org . apache . cassandra . io . sstable . SSTableReader ; <nl> - import org . apache . cassandra . io . sstable . IndexSummary ; <nl> import org . apache . cassandra . locator . * ; <nl> import org . apache . cassandra . net . * ; <nl> import org . apache . cassandra . service . AntiEntropyService . TreeRequestVerbHandler ; <nl> @ @ - 106 , 6 + 103 , 8 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe <nl> GOSSIP _ DIGEST _ SYN , <nl> GOSSIP _ DIGEST _ ACK , <nl> GOSSIP _ DIGEST _ ACK2 , <nl> + DEFINITIONS _ ANNOUNCE , <nl> + DEFINITIONS _ UPDATE _ RESPONSE , <nl> ; <nl> / / remember to add new verbs at the end , since we serialize by ordinal <nl> } <nl> @ @ - 151 , 6 + 150 , 7 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe <nl> private boolean isClientMode ; <nl> private boolean initialized ; <nl> private String operationMode ; <nl> + private MigrationManager migrationManager = new MigrationManager ( ) ; <nl> <nl> public void addBootstrapSource ( InetAddress s , String table ) <nl> { <nl> @ @ - 226 , 14 + 226 , 13 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe <nl> MessagingService . instance . registerVerbHandlers ( Verb . GOSSIP _ DIGEST _ SYN , new Gossiper . GossipDigestSynVerbHandler ( ) ) ; <nl> MessagingService . instance . registerVerbHandlers ( Verb . GOSSIP _ DIGEST _ ACK , new Gossiper . GossipDigestAckVerbHandler ( ) ) ; <nl> MessagingService . instance . registerVerbHandlers ( Verb . GOSSIP _ DIGEST _ ACK2 , new Gossiper . GossipDigestAck2VerbHandler ( ) ) ; <nl> + <nl> + MessagingService . instance . registerVerbHandlers ( Verb . DEFINITIONS _ ANNOUNCE , new DefinitionsAnnounceVerbHandler ( ) ) ; <nl> + MessagingService . instance . registerVerbHandlers ( Verb . DEFINITIONS _ UPDATE _ RESPONSE , new DefinitionsUpdateResponseVerbHandler ( ) ) ; <nl> <nl> replicationStrategies = new HashMap < String , AbstractReplicationStrategy > ( ) ; <nl> for ( String table : DatabaseDescriptor . getNonSystemTables ( ) ) <nl> - { <nl> - AbstractReplicationStrategy strat = getReplicationStrategy ( tokenMetadata _ , table ) ; <nl> - replicationStrategies . put ( table , strat ) ; <nl> - } <nl> - replicationStrategies = Collections . unmodifiableMap ( replicationStrategies ) ; <nl> + initReplicationStrategy ( table ) ; <nl> <nl> / / spin up the streaming serivice so it is available for jmx tools . <nl> if ( StreamingService . instance = = null ) <nl> @ @ - 281 , 6 + 280 , 7 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe <nl> <nl> public void stopClient ( ) <nl> { <nl> + Gossiper . instance . unregister ( migrationManager ) ; <nl> Gossiper . instance . unregister ( this ) ; <nl> Gossiper . instance . stop ( ) ; <nl> MessagingService . shutdown ( ) ; <nl> @ @ - 336 , 6 + 336 , 7 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe <nl> / / for bootstrap to get the load info it needs . <nl> / / ( we won ' t be part of the storage ring though until we add a nodeId to our state , below . ) <nl> Gossiper . instance . register ( this ) ; <nl> + Gossiper . instance . register ( migrationManager ) ; <nl> Gossiper . instance . start ( FBUtilities . getLocalAddress ( ) , storageMetadata _ . getGeneration ( ) ) ; / / needed for node - ring gathering . <nl> <nl> if ( DatabaseDescriptor . isAutoBootstrap ( ) <nl> @ @ - 357 , 7 + 358 , 17 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe <nl> } <nl> setMode ( " Joining : getting bootstrap token " , true ) ; <nl> Token token = BootStrapper . getBootstrapToken ( tokenMetadata _ , StorageLoadBalancer . instance . getLoadInfo ( ) ) ; <nl> - startBootstrap ( token ) ; <nl> + / / don ' t bootstrap if there are no tables defined . <nl> + if ( DatabaseDescriptor . getNonSystemTables ( ) . size ( ) > 0 ) <nl> + startBootstrap ( token ) ; <nl> + else <nl> + { <nl> + isBootstrapMode = false ; <nl> + SystemTable . setBootstrapped ( true ) ; <nl> + tokenMetadata _ . updateNormalToken ( token , FBUtilities . getLocalAddress ( ) ) ; <nl> + Gossiper . instance . addLocalApplicationState ( MOVE _ STATE , new ApplicationState ( STATE _ NORMAL + Delimiter + partitioner _ . getTokenFactory ( ) . toString ( token ) ) ) ; <nl> + setMode ( " Normal " , false ) ; <nl> + } <nl> / / don ' t finish startup ( enabling thrift ) until after bootstrap is done <nl> while ( isBootstrapMode ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> index b0e8758 . . 89e677e 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> @ @ - 530 , 14 + 530 , 12 @ @ public class CassandraServer implements Cassandra . Iface <nl> { <nl> Map < String , Map < String , String > > columnFamiliesMap = new HashMap < String , Map < String , String > > ( ) ; <nl> <nl> - Map < String , CFMetaData > tableMetaData = DatabaseDescriptor . getTableMetaData ( table ) ; <nl> - / / table doesn ' t exist <nl> - if ( tableMetaData = = null ) <nl> - { <nl> + KSMetaData ksm = DatabaseDescriptor . getTableDefinition ( table ) ; <nl> + if ( ksm = = null ) <nl> throw new NotFoundException ( ) ; <nl> - } <nl> + <nl> <nl> - for ( Map . Entry < String , CFMetaData > stringCFMetaDataEntry : tableMetaData . entrySet ( ) ) <nl> + for ( Map . Entry < String , CFMetaData > stringCFMetaDataEntry : ksm . cfMetaData ( ) . entrySet ( ) ) <nl> { <nl> CFMetaData columnFamilyMetaData = stringCFMetaDataEntry . getValue ( ) ; <nl> <nl> @ @ - 679 , 3 + 677 , 4 @ @ public class CassandraServer implements Cassandra . Iface <nl> <nl> / / main method moved to CassandraDaemon <nl> } <nl> + <nl> \ No newline at end of file <nl> diff - - git a / test / conf / storage - conf . xml b / test / conf / storage - conf . xml <nl> index ab84028 . . 23e4035 100644 <nl> - - - a / test / conf / storage - conf . xml <nl> + + + b / test / conf / storage - conf . xml <nl> @ @ - 77 , 7 + 77 , 7 @ @ <nl> < / Keyspace > <nl> < / Keyspaces > <nl> < Seeds > <nl> - < ! - - Add names of hosts that are deemed contact points - - > <nl> - < Seed > 127 . 0 . 0 . 1 < / Seed > <nl> + < ! - - we don ' t want this node to think it is a seed . - - > <nl> + < Seed > 127 . 0 . 0 . 2 < / Seed > <nl> < / Seeds > <nl> < / Storage >

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e83b385 . . 325a5f3 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 
 + * Add client warnings to native protocol v4 ( CASSANDRA - 8930 ) 
 * Allow roles cache to be invalidated ( CASSANDRA - 8967 ) 
 * Upgrade Snappy ( CASSANDRA - 9063 ) 
 * Don ' t start Thrift rpc by default ( CASSANDRA - 9319 ) 
 diff - - git a / doc / native _ protocol _ v4 . spec b / doc / native _ protocol _ v4 . spec 
 index 143fc4a . . 4014594 100644 
 - - - a / doc / native _ protocol _ v4 . spec 
 + + + b / doc / native _ protocol _ v4 . spec 
 @ @ - 133 , 6 + 133 , 12 @ @ Table of Contents 
 If both trace - flag and payload - flag are set , the generic key - value 
 payload appears after trace ' s data . 
 Type of custom payload is [ bytes map ] ( see below ) . 
 + 0x08 : Warning flag . The response contains warnings from the server which 
 + were generated by the server to go along with this response . 
 + If a response frame has the warning flag set , its body will contain the 
 + text of the warnings . The warnings are a [ string list ] and will be the 
 + first value in the frame body if the tracing flag is not set , or directly 
 + after the tracing ID if it is . 
 
 The rest of the flags is currently unused and ignored . 
 
 @ @ - 772 , 7 + 778 , 7 @ @ Table of Contents 
 Clients are expected to answer the server challenge by an AUTH _ RESPONSE 
 message . 
 
 - 4 . 2 . 7 . AUTH _ SUCCESS 
 + 4 . 2 . 8 . AUTH _ SUCCESS 
 
 Indicate the success of the authentication phase . See Section 4 . 2 . 3 for more 
 details . 
 @ @ - 1134 , 3 + 1140 , 4 @ @ Table of Contents 
 * Function _ failure error code was added . 
 * Add custom payload to frames for custom QueryHandler implementations ( ignored by Cassandra ' s standard QueryHandler ) 
 * Add " TRACE _ COMPLETE " event ( section 4 . 2 . 6 ) . 
 + * Add warnings to frames for responses for which the server generated a warning during processing , which the client needs to address . 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index 421794e . . 2ede76e 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 148 , 8 + 148 , 8 @ @ public class Config 
 
 / * if the size of columns or super - columns are more than this , indexing will kick in * / 
 public Integer column _ index _ size _ in _ kb = 64 ; 
 - public Integer batch _ size _ warn _ threshold _ in _ kb = 5 ; 
 - public volatile Integer batch _ size _ fail _ threshold _ in _ kb = 50 ; 
 + public volatile int batch _ size _ warn _ threshold _ in _ kb = 5 ; 
 + public volatile int batch _ size _ fail _ threshold _ in _ kb = 50 ; 
 public Integer concurrent _ compactors ; 
 public volatile Integer compaction _ throughput _ mb _ per _ sec = 16 ; 
 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index ec90be2 . . b5c5fb4 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 617 , 11 + 617 , 6 @ @ public class DatabaseDescriptor 
 } 
 if ( seedProvider . getSeeds ( ) . size ( ) = = 0 ) 
 throw new ConfigurationException ( " The seed provider lists no seeds . " , false ) ; 
 - 
 - if ( conf . batch _ size _ fail _ threshold _ in _ kb = = null ) 
 - { 
 - conf . batch _ size _ fail _ threshold _ in _ kb = conf . batch _ size _ warn _ threshold _ in _ kb * 10 ; 
 - } 
 } 
 
 private static IEndpointSnitch createEndpointSnitch ( String snitchClassName ) throws ConfigurationException 
 @ @ - 801 , 6 + 796 , 11 @ @ public class DatabaseDescriptor 
 return conf . batch _ size _ fail _ threshold _ in _ kb ; 
 } 
 
 + public static void setBatchSizeWarnThresholdInKB ( int threshold ) 
 + { 
 + conf . batch _ size _ warn _ threshold _ in _ kb = threshold ; 
 + } 
 + 
 public static void setBatchSizeFailThresholdInKB ( int threshold ) 
 { 
 conf . batch _ size _ fail _ threshold _ in _ kb = threshold ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 index 465b2d9 . . ddc46c1 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 @ @ - 32 , 6 + 32 , 7 @ @ import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . composites . Composite ; 
 import org . apache . cassandra . exceptions . * ; 
 import org . apache . cassandra . service . ClientState ; 
 + import org . apache . cassandra . service . ClientWarn ; 
 import org . apache . cassandra . service . QueryState ; 
 import org . apache . cassandra . service . StorageProxy ; 
 import org . apache . cassandra . tracing . Tracing ; 
 @ @ - 260 , 6 + 261 , 7 @ @ public class BatchStatement implements CQLStatement 
 { 
 logger . warn ( format , ksCfPairs , size , warnThreshold , size - warnThreshold , " " ) ; 
 } 
 + ClientWarn . warn ( String . format ( format , ksCfPairs , size , warnThreshold , size - warnThreshold , " " ) ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java 
 index d914f51 . . 697c715 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java 
 @ @ - 38 , 6 + 38 , 7 @ @ import org . apache . cassandra . io . IVersionedSerializer ; 
 import org . apache . cassandra . io . sstable . format . SSTableReader ; 
 import org . apache . cassandra . io . util . DataOutputPlus ; 
 import org . apache . cassandra . io . util . FileDataInput ; 
 + import org . apache . cassandra . service . ClientWarn ; 
 import org . apache . cassandra . tracing . Tracing ; 
 
 public class SliceQueryFilter implements IDiskAtomFilter 
 @ @ - 241 , 6 + 242 , 7 @ @ public class SliceQueryFilter implements IDiskAtomFilter 
 container . metadata ( ) . getKeyValidator ( ) . getString ( key . getKey ( ) ) , 
 count , 
 getSlicesInfo ( container ) ) ; 
 + ClientWarn . warn ( msg ) ; 
 logger . warn ( msg ) ; 
 } 
 Tracing . trace ( " Read { } live and { } tombstone cells { } " , 
 diff - - git a / src / java / org / apache / cassandra / service / ClientWarn . java b / src / java / org / apache / cassandra / service / ClientWarn . java 
 new file mode 100644 
 index 0000000 . . 2ed0a6c 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / service / ClientWarn . java 
 @ @ - 0 , 0 + 1 , 73 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . service ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + import org . apache . cassandra . utils . FBUtilities ; 
 + 
 + public class ClientWarn 
 + { 
 + private static final String TRUNCATED = " [ truncated ] " ; 
 + private static final ThreadLocal < ClientWarn > warnLocal = new ThreadLocal < > ( ) ; 
 + 
 + private final List < String > warnings = new ArrayList < > ( ) ; 
 + 
 + private ClientWarn ( ) 
 + { 
 + } 
 + 
 + public static void warn ( String text ) 
 + { 
 + ClientWarn warner = warnLocal . get ( ) ; 
 + if ( warner ! = null ) 
 + warner . add ( text ) ; 
 + } 
 + 
 + private void add ( String warning ) 
 + { 
 + if ( warnings . size ( ) < FBUtilities . MAX _ UNSIGNED _ SHORT ) 
 + warnings . add ( maybeTruncate ( warning ) ) ; 
 + } 
 + 
 + private static String maybeTruncate ( String warning ) 
 + { 
 + return warning . length ( ) > FBUtilities . MAX _ UNSIGNED _ SHORT 
 + ? warning . substring ( 0 , FBUtilities . MAX _ UNSIGNED _ SHORT - TRUNCATED . length ( ) ) + TRUNCATED 
 + : warning ; 
 + } 
 + 
 + public static void captureWarnings ( ) 
 + { 
 + warnLocal . set ( new ClientWarn ( ) ) ; 
 + } 
 + 
 + public static List < String > getWarnings ( ) 
 + { 
 + ClientWarn warner = warnLocal . get ( ) ; 
 + if ( warner = = null | | warner . warnings . isEmpty ( ) ) 
 + return null ; 
 + return warner . warnings ; 
 + } 
 + 
 + public static void resetWarnings ( ) 
 + { 
 + warnLocal . remove ( ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / transport / Frame . java b / src / java / org / apache / cassandra / transport / Frame . java 
 index b72259d . . 0c038ea 100644 
 - - - a / src / java / org / apache / cassandra / transport / Frame . java 
 + + + b / src / java / org / apache / cassandra / transport / Frame . java 
 @ @ - 112 , 7 + 112 , 8 @ @ public class Frame 
 / / The order of that enum matters ! ! 
 COMPRESSED , 
 TRACING , 
 - CUSTOM _ PAYLOAD ; 
 + CUSTOM _ PAYLOAD , 
 + WARNING ; 
 
 private static final Flag [ ] ALL _ VALUES = values ( ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / transport / Message . java b / src / java / org / apache / cassandra / transport / Message . java 
 index 3382593 . . b6d5a95 100644 
 - - - a / src / java / org / apache / cassandra / transport / Message . java 
 + + + b / src / java / org / apache / cassandra / transport / Message . java 
 @ @ - 41 , 6 + 41 , 7 @ @ import com . google . common . collect . ImmutableSet ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . service . ClientWarn ; 
 import org . apache . cassandra . transport . messages . * ; 
 import org . apache . cassandra . service . QueryState ; 
 import org . apache . cassandra . utils . JVMStabilityInspector ; 
 @ @ - 223 , 6 + 224 , 7 @ @ public abstract class Message 
 public static abstract class Response extends Message 
 { 
 protected UUID tracingId ; 
 + protected List < String > warnings ; 
 
 protected Response ( Type type ) 
 { 
 @ @ - 242 , 6 + 244 , 17 @ @ public abstract class Message 
 { 
 return tracingId ; 
 } 
 + 
 + public Message setWarnings ( List < String > warnings ) 
 + { 
 + this . warnings = warnings ; 
 + return this ; 
 + } 
 + 
 + public List < String > getWarnings ( ) 
 + { 
 + return warnings ; 
 + } 
 } 
 
 @ ChannelHandler . Sharable 
 @ @ - 252 , 8 + 265 , 10 @ @ public abstract class Message 
 boolean isRequest = frame . header . type . direction = = Direction . REQUEST ; 
 boolean isTracing = frame . header . flags . contains ( Frame . Header . Flag . TRACING ) ; 
 boolean isCustomPayload = frame . header . flags . contains ( Frame . Header . Flag . CUSTOM _ PAYLOAD ) ; 
 + boolean hasWarning = frame . header . flags . contains ( Frame . Header . Flag . WARNING ) ; 
 
 UUID tracingId = isRequest | | ! isTracing ? null : CBUtil . readUUID ( frame . body ) ; 
 + List < String > warnings = isRequest | | ! hasWarning ? null : CBUtil . readStringList ( frame . body ) ; 
 Map < String , byte [ ] > customPayload = ! isCustomPayload ? null : CBUtil . readBytesMap ( frame . body ) ; 
 
 try 
 @ @ - 280 , 6 + 295 , 8 @ @ public abstract class Message 
 assert message instanceof Response ; 
 if ( isTracing ) 
 ( ( Response ) message ) . setTracingId ( tracingId ) ; 
 + if ( hasWarning ) 
 + ( ( Response ) message ) . setWarnings ( warnings ) ; 
 } 
 
 results . add ( message ) ; 
 @ @ - 315 , 6 + 332 , 13 @ @ public abstract class Message 
 Map < String , byte [ ] > customPayload = message . getCustomPayload ( ) ; 
 if ( tracingId ! = null ) 
 messageSize + = CBUtil . sizeOfUUID ( tracingId ) ; 
 + List < String > warnings = ( ( Response ) message ) . getWarnings ( ) ; 
 + if ( warnings ! = null ) 
 + { 
 + if ( version < Server . VERSION _ 4 ) 
 + throw new ProtocolException ( " Must not send frame with WARNING flag for native protocol version < 4 " ) ; 
 + messageSize + = CBUtil . sizeOfStringList ( warnings ) ; 
 + } 
 if ( customPayload ! = null ) 
 { 
 if ( version < Server . VERSION _ 4 ) 
 @ @ - 327 , 6 + 351 , 11 @ @ public abstract class Message 
 CBUtil . writeUUID ( tracingId , body ) ; 
 flags . add ( Frame . Header . Flag . TRACING ) ; 
 } 
 + if ( warnings ! = null ) 
 + { 
 + CBUtil . writeStringList ( warnings , body ) ; 
 + flags . add ( Frame . Header . Flag . WARNING ) ; 
 + } 
 if ( customPayload ! = null ) 
 { 
 CBUtil . writeBytesMap ( customPayload , body ) ; 
 @ @ - 468 , 12 + 497 , 15 @ @ public abstract class Message 
 { 
 assert request . connection ( ) instanceof ServerConnection ; 
 connection = ( ServerConnection ) request . connection ( ) ; 
 + if ( connection . getVersion ( ) > = Server . VERSION _ 4 ) 
 + ClientWarn . captureWarnings ( ) ; 
 + 
 QueryState qstate = connection . validateNewMessage ( request . type , connection . getVersion ( ) , request . getStreamId ( ) ) ; 
 
 logger . debug ( " Received : { } , v = { } " , request , connection . getVersion ( ) ) ; 
 - 
 response = request . execute ( qstate ) ; 
 response . setStreamId ( request . getStreamId ( ) ) ; 
 + response . setWarnings ( ClientWarn . getWarnings ( ) ) ; 
 response . attach ( connection ) ; 
 connection . applyStateTransition ( request . type , response . type ) ; 
 } 
 @ @ - 484 , 6 + 516 , 10 @ @ public abstract class Message 
 flush ( new FlushItem ( ctx , ErrorMessage . fromException ( t , handler ) . setStreamId ( request . getStreamId ( ) ) , request . getSourceFrame ( ) ) ) ; 
 return ; 
 } 
 + finally 
 + { 
 + ClientWarn . resetWarnings ( ) ; 
 + } 
 
 logger . debug ( " Responding : { } , v = { } " , response , connection . getVersion ( ) ) ; 
 flush ( new FlushItem ( ctx , response , request . getSourceFrame ( ) ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / transport / SimpleClient . java b / src / java / org / apache / cassandra / transport / SimpleClient . java 
 index b39f166 . . 701a24c 100644 
 - - - a / src / java / org / apache / cassandra / transport / SimpleClient . java 
 + + + b / src / java / org / apache / cassandra / transport / SimpleClient . java 
 @ @ - 17 , 6 + 17 , 7 @ @ 
 * / 
 package org . apache . cassandra . transport ; 
 
 + import java . io . Closeable ; 
 import java . io . IOException ; 
 import java . net . InetSocketAddress ; 
 import java . nio . ByteBuffer ; 
 @ @ - 60 , 7 + 61 , 7 @ @ import io . netty . channel . ChannelPipeline ; 
 import io . netty . handler . ssl . SslHandler ; 
 import static org . apache . cassandra . config . EncryptionOptions . ClientEncryptionOptions ; 
 
 - public class SimpleClient 
 + public class SimpleClient implements Closeable 
 { 
 static 
 { 
 diff - - git a / test / unit / org / apache / cassandra / service / ClientWarningsTest . java b / test / unit / org / apache / cassandra / service / ClientWarningsTest . java 
 new file mode 100644 
 index 0000000 . . ce35169 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / service / ClientWarningsTest . java 
 @ @ - 0 , 0 + 1 , 81 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . service ; 
 + 
 + import org . apache . commons . lang3 . StringUtils ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . cql3 . CQLTester ; 
 + import org . apache . cassandra . cql3 . QueryOptions ; 
 + import org . apache . cassandra . transport . Message ; 
 + import org . apache . cassandra . transport . Server ; 
 + import org . apache . cassandra . transport . SimpleClient ; 
 + import org . apache . cassandra . transport . messages . QueryMessage ; 
 + 
 + import static junit . framework . Assert . assertEquals ; 
 + import static junit . framework . Assert . assertNull ; 
 + 
 + public class ClientWarningsTest extends CQLTester 
 + { 
 + @ BeforeClass 
 + public static void setUp ( ) 
 + { 
 + requireNetwork ( ) ; 
 + DatabaseDescriptor . setBatchSizeWarnThresholdInKB ( 1 ) ; 
 + } 
 + 
 + @ Test 
 + public void testLargeBatchWithProtoV4 ( ) throws Exception 
 + { 
 + createTable ( " CREATE TABLE % s ( pk int PRIMARY KEY , v text ) " ) ; 
 + 
 + try ( SimpleClient client = new SimpleClient ( nativeAddr . getHostAddress ( ) , nativePort , Server . VERSION _ 4 ) ) 
 + { 
 + client . connect ( false ) ; 
 + 
 + QueryMessage query = new QueryMessage ( createBatchStatement ( DatabaseDescriptor . getBatchSizeWarnThreshold ( ) ) , QueryOptions . DEFAULT ) ; 
 + Message . Response resp = client . execute ( query ) ; 
 + assertEquals ( 1 , resp . getWarnings ( ) . size ( ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testLargeBatchWithProtoV2 ( ) throws Exception 
 + { 
 + createTable ( " CREATE TABLE % s ( pk int PRIMARY KEY , v text ) " ) ; 
 + 
 + try ( SimpleClient client = new SimpleClient ( nativeAddr . getHostAddress ( ) , nativePort , Server . VERSION _ 2 ) ) 
 + { 
 + client . connect ( false ) ; 
 + 
 + QueryMessage query = new QueryMessage ( createBatchStatement ( DatabaseDescriptor . getBatchSizeWarnThreshold ( ) ) , QueryOptions . DEFAULT ) ; 
 + Message . Response resp = client . execute ( query ) ; 
 + assertNull ( resp . getWarnings ( ) ) ; 
 + } 
 + } 
 + 
 + private String createBatchStatement ( int minSize ) 
 + { 
 + return String . format ( " BEGIN UNLOGGED BATCH INSERT INTO % s . % s ( pk , v ) VALUES ( 1 , ' % s ' ) APPLY BATCH ; " , 
 + KEYSPACE , 
 + currentTable ( ) , 
 + StringUtils . repeat ( ' 1 ' , minSize ) ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / concurrent / StageManager . java b / src / java / org / apache / cassandra / concurrent / StageManager . java 
 index b772a09 . . f0436f6 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / StageManager . java 
 + + + b / src / java / org / apache / cassandra / concurrent / StageManager . java 
 @ @ - 47 , 6 + 47 , 7 @ @ public class StageManager 
 public static final String RESPONSE _ STAGE = " RESPONSE - STAGE " ; 
 public final static String AE _ SERVICE _ STAGE = " AE - SERVICE - STAGE " ; 
 private static final String LOADBALANCE _ STAGE = " LOAD - BALANCER - STAGE " ; 
 + public static final String MIGRATION _ STAGE = " MIGRATION - STAGE " ; 
 
 static 
 { 
 @ @ - 58 , 6 + 59 , 7 @ @ public class StageManager 
 stages . put ( GOSSIP _ STAGE , new JMXEnabledThreadPoolExecutor ( " GMFD " ) ) ; 
 stages . put ( AE _ SERVICE _ STAGE , new JMXEnabledThreadPoolExecutor ( AE _ SERVICE _ STAGE ) ) ; 
 stages . put ( LOADBALANCE _ STAGE , new JMXEnabledThreadPoolExecutor ( LOADBALANCE _ STAGE ) ) ; 
 + stages . put ( MIGRATION _ STAGE , new JMXEnabledThreadPoolExecutor ( MIGRATION _ STAGE ) ) ; 
 } 
 
 private static ThreadPoolExecutor multiThreadedStage ( String name , int numThreads ) 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 618c614 . . 506fe68 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 132 , 7 + 132 , 8 @ @ public class DatabaseDescriptor 
 
 private final static String STORAGE _ CONF _ FILE = " storage - conf . xml " ; 
 
 - private static UUID defsVersion = null ; 
 + private static final UUID INITIAL _ VERSION = new UUID ( 4096 , 0 ) ; / / has type nibble set to 1 , everything else to zero . 
 + private static UUID defsVersion = INITIAL _ VERSION ; 
 
 / * * 
 * Try the storage - config system property , and then inspect the classpath . 
 diff - - git a / src / java / org / apache / cassandra / db / DefinitionsAnnounceVerbHandler . java b / src / java / org / apache / cassandra / db / DefinitionsAnnounceVerbHandler . java 
 new file mode 100644 
 index 0000000 . . 62619d6 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / db / DefinitionsAnnounceVerbHandler . java 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * < p / > 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * < p / > 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . db ; 
 + 
 + import org . apache . cassandra . net . IVerbHandler ; 
 + import org . apache . cassandra . net . Message ; 
 + import org . apache . cassandra . service . MigrationManager ; 
 + 
 + import java . util . UUID ; 
 + 
 + public class DefinitionsAnnounceVerbHandler implements IVerbHandler 
 + { 
 + 
 + / * * someone is announcing their schema version . * / 
 + public void doVerb ( Message message ) 
 + { 
 + UUID theirVersion = UUID . fromString ( new String ( message . getMessageBody ( ) ) ) ; 
 + MigrationManager . rectify ( theirVersion , message . getFrom ( ) ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / db / DefinitionsUpdateResponseVerbHandler . java b / src / java / org / apache / cassandra / db / DefinitionsUpdateResponseVerbHandler . java 
 new file mode 100644 
 index 0000000 . . edca073 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / db / DefinitionsUpdateResponseVerbHandler . java 
 @ @ - 0 , 0 + 1 , 81 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * < p / > 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * < p / > 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . db ; 
 + 
 + import org . apache . cassandra . concurrent . StageManager ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . db . migration . Migration ; 
 + import org . apache . cassandra . net . IVerbHandler ; 
 + import org . apache . cassandra . net . Message ; 
 + import org . apache . cassandra . service . MigrationManager ; 
 + import org . apache . cassandra . utils . UUIDGen ; 
 + import org . apache . cassandra . utils . WrappedRunnable ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + import java . io . ByteArrayInputStream ; 
 + import java . io . IOError ; 
 + import java . io . IOException ; 
 + import java . util . Collection ; 
 + import java . util . UUID ; 
 + 
 + public class DefinitionsUpdateResponseVerbHandler implements IVerbHandler 
 + { 
 + private static final Logger logger = LoggerFactory . getLogger ( DefinitionsUpdateResponseVerbHandler . class ) ; 
 + 
 + / * * someone sent me their data definitions * / 
 + public void doVerb ( final Message message ) 
 + { 
 + try 
 + { 
 + / / these are the serialized row mutations that I must apply . 
 + / / check versions at every step along the way to make sure migrations are not applied out of order . 
 + Collection < Column > cols = MigrationManager . makeColumns ( message ) ; 
 + for ( Column col : cols ) 
 + { 
 + final UUID version = UUIDGen . makeType1UUID ( col . name ( ) ) ; 
 + if ( version . timestamp ( ) > DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) ) 
 + { 
 + final Migration m = Migration . deserialize ( new ByteArrayInputStream ( col . value ( ) ) ) ; 
 + assert m . getVersion ( ) . equals ( version ) ; 
 + StageManager . getStage ( StageManager . MIGRATION _ STAGE ) . submit ( new WrappedRunnable ( ) 
 + { 
 + @ Override 
 + protected void runMayThrow ( ) throws Exception 
 + { 
 + / / check to make sure the current version is before this one . 
 + if ( DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) > = version . timestamp ( ) ) 
 + logger . debug ( " Not applying " + version . toString ( ) ) ; 
 + else 
 + { 
 + logger . debug ( " Applying { } from { } " , m . getClass ( ) . getSimpleName ( ) , message . getFrom ( ) ) ; 
 + m . apply ( ) ; 
 + m . announce ( ) ; 
 + } 
 + } 
 + } ) ; 
 + } 
 + } 
 + } 
 + catch ( IOException ex ) 
 + { 
 + throw new IOError ( ex ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index d459459 . . 52f25b2 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 19 , 7 + 19 , 6 @ @ 
 package org . apache . cassandra . service ; 
 
 import java . io . IOException ; 
 - import java . io . IOError ; 
 import java . lang . management . ManagementFactory ; 
 import java . lang . reflect . Constructor ; 
 import java . util . * ; 
 @ @ - 40 , 9 + 39 , 7 @ @ import org . apache . cassandra . db . commitlog . CommitLog ; 
 import org . apache . cassandra . dht . * ; 
 import org . apache . cassandra . gms . * ; 
 import org . apache . cassandra . io . DeletionService ; 
 - import org . apache . cassandra . io . sstable . SSTable ; 
 import org . apache . cassandra . io . sstable . SSTableReader ; 
 - import org . apache . cassandra . io . sstable . IndexSummary ; 
 import org . apache . cassandra . locator . * ; 
 import org . apache . cassandra . net . * ; 
 import org . apache . cassandra . service . AntiEntropyService . TreeRequestVerbHandler ; 
 @ @ - 106 , 6 + 103 , 8 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe 
 GOSSIP _ DIGEST _ SYN , 
 GOSSIP _ DIGEST _ ACK , 
 GOSSIP _ DIGEST _ ACK2 , 
 + DEFINITIONS _ ANNOUNCE , 
 + DEFINITIONS _ UPDATE _ RESPONSE , 
 ; 
 / / remember to add new verbs at the end , since we serialize by ordinal 
 } 
 @ @ - 151 , 6 + 150 , 7 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe 
 private boolean isClientMode ; 
 private boolean initialized ; 
 private String operationMode ; 
 + private MigrationManager migrationManager = new MigrationManager ( ) ; 
 
 public void addBootstrapSource ( InetAddress s , String table ) 
 { 
 @ @ - 226 , 14 + 226 , 13 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe 
 MessagingService . instance . registerVerbHandlers ( Verb . GOSSIP _ DIGEST _ SYN , new Gossiper . GossipDigestSynVerbHandler ( ) ) ; 
 MessagingService . instance . registerVerbHandlers ( Verb . GOSSIP _ DIGEST _ ACK , new Gossiper . GossipDigestAckVerbHandler ( ) ) ; 
 MessagingService . instance . registerVerbHandlers ( Verb . GOSSIP _ DIGEST _ ACK2 , new Gossiper . GossipDigestAck2VerbHandler ( ) ) ; 
 + 
 + MessagingService . instance . registerVerbHandlers ( Verb . DEFINITIONS _ ANNOUNCE , new DefinitionsAnnounceVerbHandler ( ) ) ; 
 + MessagingService . instance . registerVerbHandlers ( Verb . DEFINITIONS _ UPDATE _ RESPONSE , new DefinitionsUpdateResponseVerbHandler ( ) ) ; 
 
 replicationStrategies = new HashMap < String , AbstractReplicationStrategy > ( ) ; 
 for ( String table : DatabaseDescriptor . getNonSystemTables ( ) ) 
 - { 
 - AbstractReplicationStrategy strat = getReplicationStrategy ( tokenMetadata _ , table ) ; 
 - replicationStrategies . put ( table , strat ) ; 
 - } 
 - replicationStrategies = Collections . unmodifiableMap ( replicationStrategies ) ; 
 + initReplicationStrategy ( table ) ; 
 
 / / spin up the streaming serivice so it is available for jmx tools . 
 if ( StreamingService . instance = = null ) 
 @ @ - 281 , 6 + 280 , 7 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe 
 
 public void stopClient ( ) 
 { 
 + Gossiper . instance . unregister ( migrationManager ) ; 
 Gossiper . instance . unregister ( this ) ; 
 Gossiper . instance . stop ( ) ; 
 MessagingService . shutdown ( ) ; 
 @ @ - 336 , 6 + 336 , 7 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe 
 / / for bootstrap to get the load info it needs . 
 / / ( we won ' t be part of the storage ring though until we add a nodeId to our state , below . ) 
 Gossiper . instance . register ( this ) ; 
 + Gossiper . instance . register ( migrationManager ) ; 
 Gossiper . instance . start ( FBUtilities . getLocalAddress ( ) , storageMetadata _ . getGeneration ( ) ) ; / / needed for node - ring gathering . 
 
 if ( DatabaseDescriptor . isAutoBootstrap ( ) 
 @ @ - 357 , 7 + 358 , 17 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe 
 } 
 setMode ( " Joining : getting bootstrap token " , true ) ; 
 Token token = BootStrapper . getBootstrapToken ( tokenMetadata _ , StorageLoadBalancer . instance . getLoadInfo ( ) ) ; 
 - startBootstrap ( token ) ; 
 + / / don ' t bootstrap if there are no tables defined . 
 + if ( DatabaseDescriptor . getNonSystemTables ( ) . size ( ) > 0 ) 
 + startBootstrap ( token ) ; 
 + else 
 + { 
 + isBootstrapMode = false ; 
 + SystemTable . setBootstrapped ( true ) ; 
 + tokenMetadata _ . updateNormalToken ( token , FBUtilities . getLocalAddress ( ) ) ; 
 + Gossiper . instance . addLocalApplicationState ( MOVE _ STATE , new ApplicationState ( STATE _ NORMAL + Delimiter + partitioner _ . getTokenFactory ( ) . toString ( token ) ) ) ; 
 + setMode ( " Normal " , false ) ; 
 + } 
 / / don ' t finish startup ( enabling thrift ) until after bootstrap is done 
 while ( isBootstrapMode ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 index b0e8758 . . 89e677e 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 @ @ - 530 , 14 + 530 , 12 @ @ public class CassandraServer implements Cassandra . Iface 
 { 
 Map < String , Map < String , String > > columnFamiliesMap = new HashMap < String , Map < String , String > > ( ) ; 
 
 - Map < String , CFMetaData > tableMetaData = DatabaseDescriptor . getTableMetaData ( table ) ; 
 - / / table doesn ' t exist 
 - if ( tableMetaData = = null ) 
 - { 
 + KSMetaData ksm = DatabaseDescriptor . getTableDefinition ( table ) ; 
 + if ( ksm = = null ) 
 throw new NotFoundException ( ) ; 
 - } 
 + 
 
 - for ( Map . Entry < String , CFMetaData > stringCFMetaDataEntry : tableMetaData . entrySet ( ) ) 
 + for ( Map . Entry < String , CFMetaData > stringCFMetaDataEntry : ksm . cfMetaData ( ) . entrySet ( ) ) 
 { 
 CFMetaData columnFamilyMetaData = stringCFMetaDataEntry . getValue ( ) ; 
 
 @ @ - 679 , 3 + 677 , 4 @ @ public class CassandraServer implements Cassandra . Iface 
 
 / / main method moved to CassandraDaemon 
 } 
 + 
 \ No newline at end of file 
 diff - - git a / test / conf / storage - conf . xml b / test / conf / storage - conf . xml 
 index ab84028 . . 23e4035 100644 
 - - - a / test / conf / storage - conf . xml 
 + + + b / test / conf / storage - conf . xml 
 @ @ - 77 , 7 + 77 , 7 @ @ 
 < / Keyspace > 
 < / Keyspaces > 
 < Seeds > 
 - < ! - - Add names of hosts that are deemed contact points - - > 
 - < Seed > 127 . 0 . 0 . 1 < / Seed > 
 + < ! - - we don ' t want this node to think it is a seed . - - > 
 + < Seed > 127 . 0 . 0 . 2 < / Seed > 
 < / Seeds > 
 < / Storage >
