BLEU SCORE: 0.04935157841536379

TEST MSG: Always send Paxos commit to all replicas
GENERATED MSG: CAS may return false but still commit the insert

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 2329333 . . a0ff1d1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 72 , 6 + 72 , 7 @ @ Merged from 1 . 2 : <nl> values ( CASSANDRA - 7792 ) <nl> * Fix ordering of static cells ( CASSANDRA - 7763 ) <nl> Merged from 2 . 0 : <nl> + * Always send Paxos commit to all replicas ( CASSANDRA - 7479 ) <nl> * Configure system . paxos with LeveledCompactionStrategy ( CASSANDRA - 7753 ) <nl> * Fix ALTER clustering column type from DateType to TimestampType when <nl> using DESC clustering order ( CASSANRDA - 7797 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index 1c0c482 . . ff6d89c 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 251 , 10 + 251 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> Tracing . trace ( " CAS precondition is met ; proposing client - requested updates for { } " , ballot ) ; <nl> if ( proposePaxos ( proposal , liveEndpoints , requiredParticipants , true , consistencyForPaxos ) ) <nl> { <nl> - if ( consistencyForCommit = = ConsistencyLevel . ANY ) <nl> - sendCommit ( proposal , liveEndpoints ) ; <nl> - else <nl> - commitPaxos ( proposal , consistencyForCommit ) ; <nl> + commitPaxos ( proposal , consistencyForCommit ) ; <nl> Tracing . trace ( " CAS successful " ) ; <nl> return null ; <nl> } <nl> @ @ - 416 , 23 + 413 , 34 @ @ public class StorageProxy implements StorageProxyMBean <nl> <nl> private static void commitPaxos ( Commit proposal , ConsistencyLevel consistencyLevel ) throws WriteTimeoutException <nl> { <nl> + boolean shouldBlock = consistencyLevel ! = ConsistencyLevel . ANY ; <nl> Keyspace keyspace = Keyspace . open ( proposal . update . metadata ( ) . ksName ) ; <nl> <nl> Token tk = StorageService . getPartitioner ( ) . getToken ( proposal . key ) ; <nl> List < InetAddress > naturalEndpoints = StorageService . instance . getNaturalEndpoints ( keyspace . getName ( ) , tk ) ; <nl> Collection < InetAddress > pendingEndpoints = StorageService . instance . getTokenMetadata ( ) . pendingEndpointsFor ( tk , keyspace . getName ( ) ) ; <nl> <nl> - AbstractReplicationStrategy rs = keyspace . getReplicationStrategy ( ) ; <nl> - AbstractWriteResponseHandler responseHandler = rs . getWriteResponseHandler ( naturalEndpoints , pendingEndpoints , consistencyLevel , null , WriteType . SIMPLE ) ; <nl> + AbstractWriteResponseHandler responseHandler = null ; <nl> + if ( shouldBlock ) <nl> + { <nl> + AbstractReplicationStrategy rs = keyspace . getReplicationStrategy ( ) ; <nl> + responseHandler = rs . getWriteResponseHandler ( naturalEndpoints , pendingEndpoints , consistencyLevel , null , WriteType . SIMPLE ) ; <nl> + } <nl> <nl> MessageOut < Commit > message = new MessageOut < Commit > ( MessagingService . Verb . PAXOS _ COMMIT , proposal , Commit . serializer ) ; <nl> for ( InetAddress destination : Iterables . concat ( naturalEndpoints , pendingEndpoints ) ) <nl> { <nl> if ( FailureDetector . instance . isAlive ( destination ) ) <nl> - MessagingService . instance ( ) . sendRR ( message , destination , responseHandler ) ; <nl> + { <nl> + if ( shouldBlock ) <nl> + MessagingService . instance ( ) . sendRR ( message , destination , responseHandler ) ; <nl> + else <nl> + MessagingService . instance ( ) . sendOneWay ( message , destination ) ; <nl> + } <nl> } <nl> <nl> - responseHandler . get ( ) ; <nl> + if ( shouldBlock ) <nl> + responseHandler . get ( ) ; <nl> } <nl> <nl> / * *
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 5517cee . . 2f01b7d 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 15 , 7 + 15 , 7 @ @ <nl> * Require superuser status for adding triggers ( CASSANDRA - 5963 ) <nl> * Make standalone scrubber handle old and new style leveled manifest <nl> ( CASSANDRA - 6005 ) <nl> - * Fix paxos bugs ( CASSANDRA - 6012 , 6013 ) <nl> + * Fix paxos bugs ( CASSANDRA - 6012 , 6013 , 6023 ) <nl> Merged from 1 . 2 : <nl> 1 . 2 . 10 <nl> * Fix possible divide - by - zero in HHOM ( CASSANDRA - 5990 ) <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index be3da21 . . 939163d 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 252 , 6 + 252 , 7 @ @ public final class CFMetaData <nl> + " row _ key blob , " <nl> + " cf _ id UUID , " <nl> + " in _ progress _ ballot timeuuid , " <nl> + + " proposal _ ballot timeuuid , " <nl> + " proposal blob , " <nl> + " most _ recent _ commit _ at timeuuid , " <nl> + " most _ recent _ commit blob , " <nl> diff - - git a / src / java / org / apache / cassandra / db / SystemKeyspace . java b / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> index 7759114 . . 3e608b3 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> @ @ - 782 , 14 + 782 , 16 @ @ public class SystemKeyspace <nl> if ( results . isEmpty ( ) ) <nl> return new PaxosState ( key , metadata ) ; <nl> UntypedResultSet . Row row = results . one ( ) ; <nl> - Commit inProgress = new Commit ( key , <nl> - row . getUUID ( " in _ progress _ ballot " ) , <nl> - row . has ( " proposal " ) ? ColumnFamily . fromBytes ( row . getBytes ( " proposal " ) ) : EmptyColumns . factory . create ( metadata ) ) ; <nl> + Commit promised = new Commit ( key , row . getUUID ( " in _ progress _ ballot " ) , EmptyColumns . factory . create ( metadata ) ) ; <nl> + / / either we have both a recently accepted ballot and update or we have neither <nl> + Commit accepted = row . has ( " proposal " ) <nl> + ? new Commit ( key , row . getUUID ( " proposal _ ballot " ) , ColumnFamily . fromBytes ( row . getBytes ( " proposal " ) ) ) <nl> + : Commit . emptyCommit ( key , metadata ) ; <nl> / / either most _ recent _ commit and most _ recent _ commit _ at will both be set , or neither <nl> Commit mostRecent = row . has ( " most _ recent _ commit " ) <nl> ? new Commit ( key , row . getUUID ( " most _ recent _ commit _ at " ) , ColumnFamily . fromBytes ( row . getBytes ( " most _ recent _ commit " ) ) ) <nl> : Commit . emptyCommit ( key , metadata ) ; <nl> - return new PaxosState ( inProgress , mostRecent ) ; <nl> + return new PaxosState ( promised , accepted , mostRecent ) ; <nl> } <nl> <nl> public static void savePaxosPromise ( Commit promise ) <nl> @ @ - 804 , 16 + 806 , 16 @ @ public class SystemKeyspace <nl> promise . update . id ( ) ) ) ; <nl> } <nl> <nl> - public static void savePaxosProposal ( Commit commit ) <nl> + public static void savePaxosProposal ( Commit proposal ) <nl> { <nl> - processInternal ( String . format ( " UPDATE % s USING TIMESTAMP % d AND TTL % d SET in _ progress _ ballot = % s , proposal = 0x % s WHERE row _ key = 0x % s AND cf _ id = % s " , <nl> + processInternal ( String . format ( " UPDATE % s USING TIMESTAMP % d AND TTL % d SET proposal _ ballot = % s , proposal = 0x % s WHERE row _ key = 0x % s AND cf _ id = % s " , <nl> PAXOS _ CF , <nl> - UUIDGen . microsTimestamp ( commit . ballot ) , <nl> - paxosTtl ( commit . update . metadata ) , <nl> - commit . ballot , <nl> - ByteBufferUtil . bytesToHex ( commit . update . toBytes ( ) ) , <nl> - ByteBufferUtil . bytesToHex ( commit . key ) , <nl> - commit . update . id ( ) ) ) ; <nl> + UUIDGen . microsTimestamp ( proposal . ballot ) , <nl> + paxosTtl ( proposal . update . metadata ) , <nl> + proposal . ballot , <nl> + ByteBufferUtil . bytesToHex ( proposal . update . toBytes ( ) ) , <nl> + ByteBufferUtil . bytesToHex ( proposal . key ) , <nl> + proposal . update . id ( ) ) ) ; <nl> } <nl> <nl> private static int paxosTtl ( CFMetaData metadata ) <nl> @ @ - 822 , 17 + 824 , 15 @ @ public class SystemKeyspace <nl> return Math . max ( 3 * 3600 , metadata . getGcGraceSeconds ( ) ) ; <nl> } <nl> <nl> - public static void savePaxosCommit ( Commit commit , UUID inProgressBallot ) <nl> + public static void savePaxosCommit ( Commit commit ) <nl> { <nl> - String preserveCql = " UPDATE % s USING TIMESTAMP % d AND TTL % d SET in _ progress _ ballot = % s , most _ recent _ commit _ at = % s , most _ recent _ commit = 0x % s WHERE row _ key = 0x % s AND cf _ id = % s " ; <nl> - / / identical except adds proposal = null <nl> - String eraseCql = " UPDATE % s USING TIMESTAMP % d AND TTL % d SET proposal = null , in _ progress _ ballot = % s , most _ recent _ commit _ at = % s , most _ recent _ commit = 0x % s WHERE row _ key = 0x % s AND cf _ id = % s " ; <nl> - boolean proposalAfterCommit = inProgressBallot . timestamp ( ) > commit . ballot . timestamp ( ) ; <nl> - processInternal ( String . format ( proposalAfterCommit ? preserveCql : eraseCql , <nl> + / / We always erase the last proposal ( with the commit timestamp to no erase more recent proposal in case the commit is old ) <nl> + / / even though that ' s really just an optimization since SP . beginAndRepairPaxos will exclude accepted proposal older than the mrc . <nl> + String cql = " UPDATE % s USING TIMESTAMP % d AND TTL % d SET proposal _ ballot = null , proposal = null , most _ recent _ commit _ at = % s , most _ recent _ commit = 0x % s WHERE row _ key = 0x % s AND cf _ id = % s " ; <nl> + processInternal ( String . format ( cql , <nl> PAXOS _ CF , <nl> UUIDGen . microsTimestamp ( commit . ballot ) , <nl> paxosTtl ( commit . update . metadata ) , <nl> - proposalAfterCommit ? inProgressBallot : commit . ballot , <nl> commit . ballot , <nl> ByteBufferUtil . bytesToHex ( commit . update . toBytes ( ) ) , <nl> ByteBufferUtil . bytesToHex ( commit . key ) , <nl> diff - - git a / src / java / org / apache / cassandra / service / paxos / PaxosState . java b / src / java / org / apache / cassandra / service / paxos / PaxosState . java <nl> index aa27628 . . ff0b02c 100644 <nl> - - - a / src / java / org / apache / cassandra / service / paxos / PaxosState . java <nl> + + + b / src / java / org / apache / cassandra / service / paxos / PaxosState . java <nl> @ @ - 48 , 20 + 48 , 22 @ @ public class PaxosState <nl> return locks [ ( 0x7FFFFFFF & key . hashCode ( ) ) % locks . length ] ; <nl> } <nl> <nl> - private final Commit inProgressCommit ; <nl> + private final Commit promised ; <nl> + private final Commit accepted ; <nl> private final Commit mostRecentCommit ; <nl> <nl> public PaxosState ( ByteBuffer key , CFMetaData metadata ) <nl> { <nl> - this ( Commit . emptyCommit ( key , metadata ) , Commit . emptyCommit ( key , metadata ) ) ; <nl> + this ( Commit . emptyCommit ( key , metadata ) , Commit . emptyCommit ( key , metadata ) , Commit . emptyCommit ( key , metadata ) ) ; <nl> } <nl> <nl> - public PaxosState ( Commit inProgressCommit , Commit mostRecentCommit ) <nl> + public PaxosState ( Commit promised , Commit accepted , Commit mostRecentCommit ) <nl> { <nl> - assert inProgressCommit . key = = mostRecentCommit . key ; <nl> - assert inProgressCommit . update . metadata ( ) = = inProgressCommit . update . metadata ( ) ; <nl> + assert promised . key = = accepted . key & & accepted . key = = mostRecentCommit . key ; <nl> + assert promised . update . metadata ( ) = = accepted . update . metadata ( ) & & accepted . update . metadata ( ) = = mostRecentCommit . update . metadata ( ) ; <nl> <nl> - this . inProgressCommit = inProgressCommit ; <nl> + this . promised = promised ; <nl> + this . accepted = accepted ; <nl> this . mostRecentCommit = mostRecentCommit ; <nl> } <nl> <nl> @ @ - 70 , 17 + 72 , 17 @ @ public class PaxosState <nl> synchronized ( lockFor ( toPrepare . key ) ) <nl> { <nl> PaxosState state = SystemKeyspace . loadPaxosState ( toPrepare . key , toPrepare . update . metadata ( ) ) ; <nl> - if ( toPrepare . isAfter ( state . inProgressCommit ) ) <nl> + if ( toPrepare . isAfter ( state . promised ) ) <nl> { <nl> Tracing . trace ( " Promising ballot { } " , toPrepare . ballot ) ; <nl> SystemKeyspace . savePaxosPromise ( toPrepare ) ; <nl> - / / return the pre - promise ballot so coordinator can pick the most recent in - progress value to resume <nl> - return new PrepareResponse ( true , state . inProgressCommit , state . mostRecentCommit ) ; <nl> + return new PrepareResponse ( true , state . accepted , state . mostRecentCommit ) ; <nl> } <nl> else <nl> { <nl> - Tracing . trace ( " Promise rejected ; { } is not sufficiently newer than { } " , toPrepare , state . inProgressCommit ) ; <nl> - return new PrepareResponse ( false , state . inProgressCommit , state . mostRecentCommit ) ; <nl> + Tracing . trace ( " Promise rejected ; { } is not sufficiently newer than { } " , toPrepare , state . promised ) ; <nl> + / / return the currently promised ballot ( not the last accepted one ) so the coordinator can make sure it uses newer ballot next time

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 2329333 . . a0ff1d1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 72 , 6 + 72 , 7 @ @ Merged from 1 . 2 : 
 values ( CASSANDRA - 7792 ) 
 * Fix ordering of static cells ( CASSANDRA - 7763 ) 
 Merged from 2 . 0 : 
 + * Always send Paxos commit to all replicas ( CASSANDRA - 7479 ) 
 * Configure system . paxos with LeveledCompactionStrategy ( CASSANDRA - 7753 ) 
 * Fix ALTER clustering column type from DateType to TimestampType when 
 using DESC clustering order ( CASSANRDA - 7797 ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index 1c0c482 . . ff6d89c 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 251 , 10 + 251 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 Tracing . trace ( " CAS precondition is met ; proposing client - requested updates for { } " , ballot ) ; 
 if ( proposePaxos ( proposal , liveEndpoints , requiredParticipants , true , consistencyForPaxos ) ) 
 { 
 - if ( consistencyForCommit = = ConsistencyLevel . ANY ) 
 - sendCommit ( proposal , liveEndpoints ) ; 
 - else 
 - commitPaxos ( proposal , consistencyForCommit ) ; 
 + commitPaxos ( proposal , consistencyForCommit ) ; 
 Tracing . trace ( " CAS successful " ) ; 
 return null ; 
 } 
 @ @ - 416 , 23 + 413 , 34 @ @ public class StorageProxy implements StorageProxyMBean 
 
 private static void commitPaxos ( Commit proposal , ConsistencyLevel consistencyLevel ) throws WriteTimeoutException 
 { 
 + boolean shouldBlock = consistencyLevel ! = ConsistencyLevel . ANY ; 
 Keyspace keyspace = Keyspace . open ( proposal . update . metadata ( ) . ksName ) ; 
 
 Token tk = StorageService . getPartitioner ( ) . getToken ( proposal . key ) ; 
 List < InetAddress > naturalEndpoints = StorageService . instance . getNaturalEndpoints ( keyspace . getName ( ) , tk ) ; 
 Collection < InetAddress > pendingEndpoints = StorageService . instance . getTokenMetadata ( ) . pendingEndpointsFor ( tk , keyspace . getName ( ) ) ; 
 
 - AbstractReplicationStrategy rs = keyspace . getReplicationStrategy ( ) ; 
 - AbstractWriteResponseHandler responseHandler = rs . getWriteResponseHandler ( naturalEndpoints , pendingEndpoints , consistencyLevel , null , WriteType . SIMPLE ) ; 
 + AbstractWriteResponseHandler responseHandler = null ; 
 + if ( shouldBlock ) 
 + { 
 + AbstractReplicationStrategy rs = keyspace . getReplicationStrategy ( ) ; 
 + responseHandler = rs . getWriteResponseHandler ( naturalEndpoints , pendingEndpoints , consistencyLevel , null , WriteType . SIMPLE ) ; 
 + } 
 
 MessageOut < Commit > message = new MessageOut < Commit > ( MessagingService . Verb . PAXOS _ COMMIT , proposal , Commit . serializer ) ; 
 for ( InetAddress destination : Iterables . concat ( naturalEndpoints , pendingEndpoints ) ) 
 { 
 if ( FailureDetector . instance . isAlive ( destination ) ) 
 - MessagingService . instance ( ) . sendRR ( message , destination , responseHandler ) ; 
 + { 
 + if ( shouldBlock ) 
 + MessagingService . instance ( ) . sendRR ( message , destination , responseHandler ) ; 
 + else 
 + MessagingService . instance ( ) . sendOneWay ( message , destination ) ; 
 + } 
 } 
 
 - responseHandler . get ( ) ; 
 + if ( shouldBlock ) 
 + responseHandler . get ( ) ; 
 } 
 
 / * *

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 5517cee . . 2f01b7d 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 15 , 7 + 15 , 7 @ @ 
 * Require superuser status for adding triggers ( CASSANDRA - 5963 ) 
 * Make standalone scrubber handle old and new style leveled manifest 
 ( CASSANDRA - 6005 ) 
 - * Fix paxos bugs ( CASSANDRA - 6012 , 6013 ) 
 + * Fix paxos bugs ( CASSANDRA - 6012 , 6013 , 6023 ) 
 Merged from 1 . 2 : 
 1 . 2 . 10 
 * Fix possible divide - by - zero in HHOM ( CASSANDRA - 5990 ) 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index be3da21 . . 939163d 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 252 , 6 + 252 , 7 @ @ public final class CFMetaData 
 + " row _ key blob , " 
 + " cf _ id UUID , " 
 + " in _ progress _ ballot timeuuid , " 
 + + " proposal _ ballot timeuuid , " 
 + " proposal blob , " 
 + " most _ recent _ commit _ at timeuuid , " 
 + " most _ recent _ commit blob , " 
 diff - - git a / src / java / org / apache / cassandra / db / SystemKeyspace . java b / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 index 7759114 . . 3e608b3 100644 
 - - - a / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 + + + b / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 @ @ - 782 , 14 + 782 , 16 @ @ public class SystemKeyspace 
 if ( results . isEmpty ( ) ) 
 return new PaxosState ( key , metadata ) ; 
 UntypedResultSet . Row row = results . one ( ) ; 
 - Commit inProgress = new Commit ( key , 
 - row . getUUID ( " in _ progress _ ballot " ) , 
 - row . has ( " proposal " ) ? ColumnFamily . fromBytes ( row . getBytes ( " proposal " ) ) : EmptyColumns . factory . create ( metadata ) ) ; 
 + Commit promised = new Commit ( key , row . getUUID ( " in _ progress _ ballot " ) , EmptyColumns . factory . create ( metadata ) ) ; 
 + / / either we have both a recently accepted ballot and update or we have neither 
 + Commit accepted = row . has ( " proposal " ) 
 + ? new Commit ( key , row . getUUID ( " proposal _ ballot " ) , ColumnFamily . fromBytes ( row . getBytes ( " proposal " ) ) ) 
 + : Commit . emptyCommit ( key , metadata ) ; 
 / / either most _ recent _ commit and most _ recent _ commit _ at will both be set , or neither 
 Commit mostRecent = row . has ( " most _ recent _ commit " ) 
 ? new Commit ( key , row . getUUID ( " most _ recent _ commit _ at " ) , ColumnFamily . fromBytes ( row . getBytes ( " most _ recent _ commit " ) ) ) 
 : Commit . emptyCommit ( key , metadata ) ; 
 - return new PaxosState ( inProgress , mostRecent ) ; 
 + return new PaxosState ( promised , accepted , mostRecent ) ; 
 } 
 
 public static void savePaxosPromise ( Commit promise ) 
 @ @ - 804 , 16 + 806 , 16 @ @ public class SystemKeyspace 
 promise . update . id ( ) ) ) ; 
 } 
 
 - public static void savePaxosProposal ( Commit commit ) 
 + public static void savePaxosProposal ( Commit proposal ) 
 { 
 - processInternal ( String . format ( " UPDATE % s USING TIMESTAMP % d AND TTL % d SET in _ progress _ ballot = % s , proposal = 0x % s WHERE row _ key = 0x % s AND cf _ id = % s " , 
 + processInternal ( String . format ( " UPDATE % s USING TIMESTAMP % d AND TTL % d SET proposal _ ballot = % s , proposal = 0x % s WHERE row _ key = 0x % s AND cf _ id = % s " , 
 PAXOS _ CF , 
 - UUIDGen . microsTimestamp ( commit . ballot ) , 
 - paxosTtl ( commit . update . metadata ) , 
 - commit . ballot , 
 - ByteBufferUtil . bytesToHex ( commit . update . toBytes ( ) ) , 
 - ByteBufferUtil . bytesToHex ( commit . key ) , 
 - commit . update . id ( ) ) ) ; 
 + UUIDGen . microsTimestamp ( proposal . ballot ) , 
 + paxosTtl ( proposal . update . metadata ) , 
 + proposal . ballot , 
 + ByteBufferUtil . bytesToHex ( proposal . update . toBytes ( ) ) , 
 + ByteBufferUtil . bytesToHex ( proposal . key ) , 
 + proposal . update . id ( ) ) ) ; 
 } 
 
 private static int paxosTtl ( CFMetaData metadata ) 
 @ @ - 822 , 17 + 824 , 15 @ @ public class SystemKeyspace 
 return Math . max ( 3 * 3600 , metadata . getGcGraceSeconds ( ) ) ; 
 } 
 
 - public static void savePaxosCommit ( Commit commit , UUID inProgressBallot ) 
 + public static void savePaxosCommit ( Commit commit ) 
 { 
 - String preserveCql = " UPDATE % s USING TIMESTAMP % d AND TTL % d SET in _ progress _ ballot = % s , most _ recent _ commit _ at = % s , most _ recent _ commit = 0x % s WHERE row _ key = 0x % s AND cf _ id = % s " ; 
 - / / identical except adds proposal = null 
 - String eraseCql = " UPDATE % s USING TIMESTAMP % d AND TTL % d SET proposal = null , in _ progress _ ballot = % s , most _ recent _ commit _ at = % s , most _ recent _ commit = 0x % s WHERE row _ key = 0x % s AND cf _ id = % s " ; 
 - boolean proposalAfterCommit = inProgressBallot . timestamp ( ) > commit . ballot . timestamp ( ) ; 
 - processInternal ( String . format ( proposalAfterCommit ? preserveCql : eraseCql , 
 + / / We always erase the last proposal ( with the commit timestamp to no erase more recent proposal in case the commit is old ) 
 + / / even though that ' s really just an optimization since SP . beginAndRepairPaxos will exclude accepted proposal older than the mrc . 
 + String cql = " UPDATE % s USING TIMESTAMP % d AND TTL % d SET proposal _ ballot = null , proposal = null , most _ recent _ commit _ at = % s , most _ recent _ commit = 0x % s WHERE row _ key = 0x % s AND cf _ id = % s " ; 
 + processInternal ( String . format ( cql , 
 PAXOS _ CF , 
 UUIDGen . microsTimestamp ( commit . ballot ) , 
 paxosTtl ( commit . update . metadata ) , 
 - proposalAfterCommit ? inProgressBallot : commit . ballot , 
 commit . ballot , 
 ByteBufferUtil . bytesToHex ( commit . update . toBytes ( ) ) , 
 ByteBufferUtil . bytesToHex ( commit . key ) , 
 diff - - git a / src / java / org / apache / cassandra / service / paxos / PaxosState . java b / src / java / org / apache / cassandra / service / paxos / PaxosState . java 
 index aa27628 . . ff0b02c 100644 
 - - - a / src / java / org / apache / cassandra / service / paxos / PaxosState . java 
 + + + b / src / java / org / apache / cassandra / service / paxos / PaxosState . java 
 @ @ - 48 , 20 + 48 , 22 @ @ public class PaxosState 
 return locks [ ( 0x7FFFFFFF & key . hashCode ( ) ) % locks . length ] ; 
 } 
 
 - private final Commit inProgressCommit ; 
 + private final Commit promised ; 
 + private final Commit accepted ; 
 private final Commit mostRecentCommit ; 
 
 public PaxosState ( ByteBuffer key , CFMetaData metadata ) 
 { 
 - this ( Commit . emptyCommit ( key , metadata ) , Commit . emptyCommit ( key , metadata ) ) ; 
 + this ( Commit . emptyCommit ( key , metadata ) , Commit . emptyCommit ( key , metadata ) , Commit . emptyCommit ( key , metadata ) ) ; 
 } 
 
 - public PaxosState ( Commit inProgressCommit , Commit mostRecentCommit ) 
 + public PaxosState ( Commit promised , Commit accepted , Commit mostRecentCommit ) 
 { 
 - assert inProgressCommit . key = = mostRecentCommit . key ; 
 - assert inProgressCommit . update . metadata ( ) = = inProgressCommit . update . metadata ( ) ; 
 + assert promised . key = = accepted . key & & accepted . key = = mostRecentCommit . key ; 
 + assert promised . update . metadata ( ) = = accepted . update . metadata ( ) & & accepted . update . metadata ( ) = = mostRecentCommit . update . metadata ( ) ; 
 
 - this . inProgressCommit = inProgressCommit ; 
 + this . promised = promised ; 
 + this . accepted = accepted ; 
 this . mostRecentCommit = mostRecentCommit ; 
 } 
 
 @ @ - 70 , 17 + 72 , 17 @ @ public class PaxosState 
 synchronized ( lockFor ( toPrepare . key ) ) 
 { 
 PaxosState state = SystemKeyspace . loadPaxosState ( toPrepare . key , toPrepare . update . metadata ( ) ) ; 
 - if ( toPrepare . isAfter ( state . inProgressCommit ) ) 
 + if ( toPrepare . isAfter ( state . promised ) ) 
 { 
 Tracing . trace ( " Promising ballot { } " , toPrepare . ballot ) ; 
 SystemKeyspace . savePaxosPromise ( toPrepare ) ; 
 - / / return the pre - promise ballot so coordinator can pick the most recent in - progress value to resume 
 - return new PrepareResponse ( true , state . inProgressCommit , state . mostRecentCommit ) ; 
 + return new PrepareResponse ( true , state . accepted , state . mostRecentCommit ) ; 
 } 
 else 
 { 
 - Tracing . trace ( " Promise rejected ; { } is not sufficiently newer than { } " , toPrepare , state . inProgressCommit ) ; 
 - return new PrepareResponse ( false , state . inProgressCommit , state . mostRecentCommit ) ; 
 + Tracing . trace ( " Promise rejected ; { } is not sufficiently newer than { } " , toPrepare , state . promised ) ; 
 + / / return the currently promised ballot ( not the last accepted one ) so the coordinator can make sure it uses newer ballot next time
