BLEU SCORE: 0.03772691894380681

TEST MSG: Reuse DataOutputBuffer from ColumnIndex
GENERATED MSG: Remove row - level bloom filters .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b65aad1 . . 690b1d6 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 10 <nl> + * Reuse DataOutputBuffer from ColumnIndex ( CASSANDRA - 11970 ) <nl> * Remove DatabaseDescriptor dependency from SegmentedFile ( CASSANDRA - 11580 ) <nl> * Add supplied username to authentication error messages ( CASSANDRA - 12076 ) <nl> * Remove pre - startup check for open JMX port ( CASSANDRA - 12074 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnIndex . java b / src / java / org / apache / cassandra / db / ColumnIndex . java <nl> index 2e7a2ee . . 9cea084 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnIndex . java <nl> @ @ - 48 , 6 + 48 , 8 @ @ public class ColumnIndex <nl> / / used , until the row - index - entry reaches config column _ index _ cache _ size _ in _ kb <nl> private final List < IndexInfo > indexSamples = new ArrayList < > ( ) ; <nl> <nl> + private DataOutputBuffer reusableBuffer ; <nl> + <nl> public int columnIndexCount ; <nl> private int [ ] indexOffsets ; <nl> <nl> @ @ - 95 , 6 + 97 , 8 @ @ public class ColumnIndex <nl> this . firstClustering = null ; <nl> this . lastClustering = null ; <nl> this . openMarker = null ; <nl> + if ( this . buffer ! = null ) <nl> + this . reusableBuffer = this . buffer ; <nl> this . buffer = null ; <nl> } <nl> <nl> @ @ - 195 , 7 + 199 , 7 @ @ public class ColumnIndex <nl> indexSamplesSerializedSize + = idxSerializer . serializedSize ( cIndexInfo ) ; <nl> if ( indexSamplesSerializedSize + columnIndexCount * TypeSizes . sizeof ( 0 ) > DatabaseDescriptor . getColumnIndexCacheSize ( ) ) <nl> { <nl> - buffer = new DataOutputBuffer ( DatabaseDescriptor . getColumnIndexCacheSize ( ) * 2 ) ; <nl> + buffer = useBuffer ( ) ; <nl> for ( IndexInfo indexSample : indexSamples ) <nl> { <nl> idxSerializer . serialize ( indexSample , buffer ) ; <nl> @ @ - 215 , 6 + 219 , 16 @ @ public class ColumnIndex <nl> firstClustering = null ; <nl> } <nl> <nl> + private DataOutputBuffer useBuffer ( ) <nl> + { <nl> + if ( reusableBuffer ! = null ) { <nl> + buffer = reusableBuffer ; <nl> + buffer . clear ( ) ; <nl> + } <nl> + / / don ' t use the standard RECYCLER as that only recycles up to 1MB and requires proper cleanup <nl> + return new DataOutputBuffer ( DatabaseDescriptor . getColumnIndexCacheSize ( ) * 2 ) ; <nl> + } <nl> + <nl> private void add ( Unfiltered unfiltered ) throws IOException <nl> { <nl> long pos = currentPosition ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java b / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java <nl> index f08b48f . . cc42c66 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java <nl> + + + b / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java <nl> @ @ - 175 , 6 + 175 , 11 @ @ public class DataOutputBuffer extends BufferedDataOutputStreamPlus <nl> return new GrowingChannel ( ) ; <nl> } <nl> <nl> + public void clear ( ) <nl> + { <nl> + buffer . clear ( ) ; <nl> + } <nl> + <nl> @ VisibleForTesting <nl> final class GrowingChannel implements WritableByteChannel <nl> {
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f84a719 . . b1ea1f3 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 22 , 6 + 22 , 7 @ @ <nl> * cqlsh : Remove ASSUME command ( CASSANDRA - 5331 ) <nl> * Rebuild BF when loading sstables if bloom _ filter _ fp _ chance <nl> has changed since compaction ( CASSANDRA - 5015 ) <nl> + * remove row - level bloom filters ( CASSANDRA - 4885 ) <nl> <nl> <nl> 1 . 2 . 4

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b65aad1 . . 690b1d6 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 10 
 + * Reuse DataOutputBuffer from ColumnIndex ( CASSANDRA - 11970 ) 
 * Remove DatabaseDescriptor dependency from SegmentedFile ( CASSANDRA - 11580 ) 
 * Add supplied username to authentication error messages ( CASSANDRA - 12076 ) 
 * Remove pre - startup check for open JMX port ( CASSANDRA - 12074 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnIndex . java b / src / java / org / apache / cassandra / db / ColumnIndex . java 
 index 2e7a2ee . . 9cea084 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnIndex . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnIndex . java 
 @ @ - 48 , 6 + 48 , 8 @ @ public class ColumnIndex 
 / / used , until the row - index - entry reaches config column _ index _ cache _ size _ in _ kb 
 private final List < IndexInfo > indexSamples = new ArrayList < > ( ) ; 
 
 + private DataOutputBuffer reusableBuffer ; 
 + 
 public int columnIndexCount ; 
 private int [ ] indexOffsets ; 
 
 @ @ - 95 , 6 + 97 , 8 @ @ public class ColumnIndex 
 this . firstClustering = null ; 
 this . lastClustering = null ; 
 this . openMarker = null ; 
 + if ( this . buffer ! = null ) 
 + this . reusableBuffer = this . buffer ; 
 this . buffer = null ; 
 } 
 
 @ @ - 195 , 7 + 199 , 7 @ @ public class ColumnIndex 
 indexSamplesSerializedSize + = idxSerializer . serializedSize ( cIndexInfo ) ; 
 if ( indexSamplesSerializedSize + columnIndexCount * TypeSizes . sizeof ( 0 ) > DatabaseDescriptor . getColumnIndexCacheSize ( ) ) 
 { 
 - buffer = new DataOutputBuffer ( DatabaseDescriptor . getColumnIndexCacheSize ( ) * 2 ) ; 
 + buffer = useBuffer ( ) ; 
 for ( IndexInfo indexSample : indexSamples ) 
 { 
 idxSerializer . serialize ( indexSample , buffer ) ; 
 @ @ - 215 , 6 + 219 , 16 @ @ public class ColumnIndex 
 firstClustering = null ; 
 } 
 
 + private DataOutputBuffer useBuffer ( ) 
 + { 
 + if ( reusableBuffer ! = null ) { 
 + buffer = reusableBuffer ; 
 + buffer . clear ( ) ; 
 + } 
 + / / don ' t use the standard RECYCLER as that only recycles up to 1MB and requires proper cleanup 
 + return new DataOutputBuffer ( DatabaseDescriptor . getColumnIndexCacheSize ( ) * 2 ) ; 
 + } 
 + 
 private void add ( Unfiltered unfiltered ) throws IOException 
 { 
 long pos = currentPosition ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java b / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java 
 index f08b48f . . cc42c66 100644 
 - - - a / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java 
 + + + b / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java 
 @ @ - 175 , 6 + 175 , 11 @ @ public class DataOutputBuffer extends BufferedDataOutputStreamPlus 
 return new GrowingChannel ( ) ; 
 } 
 
 + public void clear ( ) 
 + { 
 + buffer . clear ( ) ; 
 + } 
 + 
 @ VisibleForTesting 
 final class GrowingChannel implements WritableByteChannel 
 {

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f84a719 . . b1ea1f3 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 22 , 6 + 22 , 7 @ @ 
 * cqlsh : Remove ASSUME command ( CASSANDRA - 5331 ) 
 * Rebuild BF when loading sstables if bloom _ filter _ fp _ chance 
 has changed since compaction ( CASSANDRA - 5015 ) 
 + * remove row - level bloom filters ( CASSANDRA - 4885 ) 
 
 
 1 . 2 . 4
