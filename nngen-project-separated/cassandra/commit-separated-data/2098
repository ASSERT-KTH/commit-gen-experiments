BLEU SCORE: 0.08116697886877475

TEST MSG: Adds test for CASSANDRA - 7978
GENERATED MSG: Add forgotten test

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> index e776fc7 . . 236a9ff 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> @ @ - 54 , 7 + 54 , 7 @ @ public abstract class CQLTester <nl> { <nl> protected static final Logger logger = LoggerFactory . getLogger ( CQLTester . class ) ; <nl> <nl> - private static final String KEYSPACE = " cql _ test _ keyspace " ; <nl> + public static final String KEYSPACE = " cql _ test _ keyspace " ; <nl> private static final boolean USE _ PREPARED _ VALUES = Boolean . valueOf ( System . getProperty ( " cassandra . test . use _ prepared " , " true " ) ) ; <nl> private static final AtomicInteger seqNumber = new AtomicInteger ( ) ; <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / CrcCheckChanceTest . java b / test / unit / org / apache / cassandra / cql3 / CrcCheckChanceTest . java <nl> new file mode 100644 <nl> index 0000000 . . 0cd9202 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / cql3 / CrcCheckChanceTest . java <nl> @ @ - 0 , 0 + 1 , 70 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . cql3 ; <nl> + <nl> + import junit . framework . Assert ; <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . db . Keyspace ; <nl> + import org . junit . Test ; <nl> + <nl> + <nl> + public class CrcCheckChanceTest extends CQLTester <nl> + { <nl> + @ Test <nl> + public void testChangingCrcCheckChance ( ) throws Throwable <nl> + { <nl> + / / Start with crc _ check _ chance of 99 % <nl> + createTable ( " CREATE TABLE % s ( p text , c text , v text , s text static , PRIMARY KEY ( p , c ) ) WITH compression = { ' sstable _ compression ' : ' LZ4Compressor ' , ' crc _ check _ chance ' : 0 . 99 } " ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( p , c , v , s ) values ( ? , ? , ? , ? ) " , " p1 " , " k1 " , " v1 " , " sv1 " ) ; <nl> + execute ( " INSERT INTO % s ( p , c , v ) values ( ? , ? , ? ) " , " p1 " , " k2 " , " v2 " ) ; <nl> + execute ( " INSERT INTO % s ( p , s ) values ( ? , ? ) " , " p2 " , " sv2 " ) ; <nl> + <nl> + <nl> + ColumnFamilyStore cfs = Keyspace . open ( CQLTester . KEYSPACE ) . getColumnFamilyStore ( currentTable ( ) ) ; <nl> + cfs . forceBlockingFlush ( ) ; <nl> + <nl> + Assert . assertEquals ( 0 . 99 , cfs . metadata . compressionParameters . getCrcCheckChance ( ) ) ; <nl> + Assert . assertEquals ( 0 . 99 , cfs . getSSTables ( ) . iterator ( ) . next ( ) . getCompressionMetadata ( ) . parameters . getCrcCheckChance ( ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE p = ? " , " p1 " ) , <nl> + row ( " p1 " , " k1 " , " sv1 " , " v1 " ) , <nl> + row ( " p1 " , " k2 " , " sv1 " , " v2 " ) <nl> + ) ; <nl> + <nl> + <nl> + / / Verify when we alter the value the live sstable readers hold the new one <nl> + alterTable ( " ALTER TABLE % s WITH compression = { ' sstable _ compression ' : ' LZ4Compressor ' , ' crc _ check _ chance ' : 0 . 01 } " ) ; <nl> + <nl> + Assert . assertEquals ( 0 . 01 , cfs . metadata . compressionParameters . getCrcCheckChance ( ) ) ; <nl> + Assert . assertEquals ( 0 . 01 , cfs . getSSTables ( ) . iterator ( ) . next ( ) . getCompressionMetadata ( ) . parameters . getCrcCheckChance ( ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE p = ? " , " p1 " ) , <nl> + row ( " p1 " , " k1 " , " sv1 " , " v1 " ) , <nl> + row ( " p1 " , " k2 " , " sv1 " , " v2 " ) <nl> + ) ; <nl> + <nl> + <nl> + / / Verify the call used by JMX still works <nl> + cfs . setCrcCheckChance ( 0 . 03 ) ; <nl> + Assert . assertEquals ( 0 . 03 , cfs . metadata . compressionParameters . getCrcCheckChance ( ) ) ; <nl> + Assert . assertEquals ( 0 . 03 , cfs . getSSTables ( ) . iterator ( ) . next ( ) . getCompressionMetadata ( ) . parameters . getCrcCheckChance ( ) ) ; <nl> + <nl> + } <nl> + } <nl> +
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 index e776fc7 . . 236a9ff 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 @ @ - 54 , 7 + 54 , 7 @ @ public abstract class CQLTester 
 { 
 protected static final Logger logger = LoggerFactory . getLogger ( CQLTester . class ) ; 
 
 - private static final String KEYSPACE = " cql _ test _ keyspace " ; 
 + public static final String KEYSPACE = " cql _ test _ keyspace " ; 
 private static final boolean USE _ PREPARED _ VALUES = Boolean . valueOf ( System . getProperty ( " cassandra . test . use _ prepared " , " true " ) ) ; 
 private static final AtomicInteger seqNumber = new AtomicInteger ( ) ; 
 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / CrcCheckChanceTest . java b / test / unit / org / apache / cassandra / cql3 / CrcCheckChanceTest . java 
 new file mode 100644 
 index 0000000 . . 0cd9202 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / cql3 / CrcCheckChanceTest . java 
 @ @ - 0 , 0 + 1 , 70 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . cql3 ; 
 + 
 + import junit . framework . Assert ; 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . db . Keyspace ; 
 + import org . junit . Test ; 
 + 
 + 
 + public class CrcCheckChanceTest extends CQLTester 
 + { 
 + @ Test 
 + public void testChangingCrcCheckChance ( ) throws Throwable 
 + { 
 + / / Start with crc _ check _ chance of 99 % 
 + createTable ( " CREATE TABLE % s ( p text , c text , v text , s text static , PRIMARY KEY ( p , c ) ) WITH compression = { ' sstable _ compression ' : ' LZ4Compressor ' , ' crc _ check _ chance ' : 0 . 99 } " ) ; 
 + 
 + execute ( " INSERT INTO % s ( p , c , v , s ) values ( ? , ? , ? , ? ) " , " p1 " , " k1 " , " v1 " , " sv1 " ) ; 
 + execute ( " INSERT INTO % s ( p , c , v ) values ( ? , ? , ? ) " , " p1 " , " k2 " , " v2 " ) ; 
 + execute ( " INSERT INTO % s ( p , s ) values ( ? , ? ) " , " p2 " , " sv2 " ) ; 
 + 
 + 
 + ColumnFamilyStore cfs = Keyspace . open ( CQLTester . KEYSPACE ) . getColumnFamilyStore ( currentTable ( ) ) ; 
 + cfs . forceBlockingFlush ( ) ; 
 + 
 + Assert . assertEquals ( 0 . 99 , cfs . metadata . compressionParameters . getCrcCheckChance ( ) ) ; 
 + Assert . assertEquals ( 0 . 99 , cfs . getSSTables ( ) . iterator ( ) . next ( ) . getCompressionMetadata ( ) . parameters . getCrcCheckChance ( ) ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s WHERE p = ? " , " p1 " ) , 
 + row ( " p1 " , " k1 " , " sv1 " , " v1 " ) , 
 + row ( " p1 " , " k2 " , " sv1 " , " v2 " ) 
 + ) ; 
 + 
 + 
 + / / Verify when we alter the value the live sstable readers hold the new one 
 + alterTable ( " ALTER TABLE % s WITH compression = { ' sstable _ compression ' : ' LZ4Compressor ' , ' crc _ check _ chance ' : 0 . 01 } " ) ; 
 + 
 + Assert . assertEquals ( 0 . 01 , cfs . metadata . compressionParameters . getCrcCheckChance ( ) ) ; 
 + Assert . assertEquals ( 0 . 01 , cfs . getSSTables ( ) . iterator ( ) . next ( ) . getCompressionMetadata ( ) . parameters . getCrcCheckChance ( ) ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s WHERE p = ? " , " p1 " ) , 
 + row ( " p1 " , " k1 " , " sv1 " , " v1 " ) , 
 + row ( " p1 " , " k2 " , " sv1 " , " v2 " ) 
 + ) ; 
 + 
 + 
 + / / Verify the call used by JMX still works 
 + cfs . setCrcCheckChance ( 0 . 03 ) ; 
 + Assert . assertEquals ( 0 . 03 , cfs . metadata . compressionParameters . getCrcCheckChance ( ) ) ; 
 + Assert . assertEquals ( 0 . 03 , cfs . getSSTables ( ) . iterator ( ) . next ( ) . getCompressionMetadata ( ) . parameters . getCrcCheckChance ( ) ) ; 
 + 
 + } 
 + } 
 +

NEAREST DIFF:
ELIMINATEDSENTENCE
