BLEU SCORE: 0.04642454187453896

TEST MSG: Add extra SSL cipher suites .
GENERATED MSG: Add support for SSL sockets to use client certificate authentication .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 325c623 . . f88345d 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 2 . 16 <nl> + * add extra SSL cipher suites ( CASSANDRA - 6613 ) <nl> * fix nodetool getsstables for blob PK ( CASSANDRA - 6803 ) <nl> * Add CMSClassUnloadingEnabled JVM option ( CASSANDRA - 6541 ) <nl> * Catch memtable flush exceptions during shutdown ( CASSANDRA - 6735 ) <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index 194a196 . . ecad3f0 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 651 , 6 + 651 , 7 @ @ index _ interval : 128 <nl> # Default settings are TLS v1 , RSA 1024 - bit keys ( it is imperative that <nl> # users generate their own keys ) TLS _ RSA _ WITH _ AES _ 128 _ CBC _ SHA as the cipher <nl> # suite for authentication , key exchange and encryption of the actual data transfers . <nl> + # Use the DHE / ECDHE ciphers if running in FIPS 140 compliant mode . <nl> # NOTE : No custom encryption options are enabled at the moment <nl> # The available internode options are : all , none , dc , rack <nl> # <nl> @ @ - 671 , 7 + 672 , 7 @ @ server _ encryption _ options : <nl> # protocol : TLS <nl> # algorithm : SunX509 <nl> # store _ type : JKS <nl> - # cipher _ suites : [ TLS _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ RSA _ WITH _ AES _ 256 _ CBC _ SHA ] <nl> + # cipher _ suites : [ TLS _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ RSA _ WITH _ AES _ 256 _ CBC _ SHA , TLS _ DHE _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ DHE _ RSA _ WITH _ AES _ 256 _ CBC _ SHA , TLS _ ECDHE _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ ECDHE _ RSA _ WITH _ AES _ 256 _ CBC _ SHA ] <nl> # require _ client _ auth : false <nl> <nl> # enable or disable client / server encryption . <nl> @ @ - 687 , 7 + 688 , 7 @ @ client _ encryption _ options : <nl> # protocol : TLS <nl> # algorithm : SunX509 <nl> # store _ type : JKS <nl> - # cipher _ suites : [ TLS _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ RSA _ WITH _ AES _ 256 _ CBC _ SHA ] <nl> + # cipher _ suites : [ TLS _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ RSA _ WITH _ AES _ 256 _ CBC _ SHA , TLS _ DHE _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ DHE _ RSA _ WITH _ AES _ 256 _ CBC _ SHA , TLS _ ECDHE _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ ECDHE _ RSA _ WITH _ AES _ 256 _ CBC _ SHA ] <nl> <nl> # internode _ compression controls whether traffic between nodes is <nl> # compressed . <nl> diff - - git a / src / java / org / apache / cassandra / config / EncryptionOptions . java b / src / java / org / apache / cassandra / config / EncryptionOptions . java <nl> index f873636 . . 945a15b 100644 <nl> - - - a / src / java / org / apache / cassandra / config / EncryptionOptions . java <nl> + + + b / src / java / org / apache / cassandra / config / EncryptionOptions . java <nl> @ @ - 23 , 7 + 23 , 11 @ @ public abstract class EncryptionOptions <nl> public String keystore _ password = " cassandra " ; <nl> public String truststore = " conf / . truststore " ; <nl> public String truststore _ password = " cassandra " ; <nl> - public String [ ] cipher _ suites = { " TLS _ RSA _ WITH _ AES _ 128 _ CBC _ SHA " , " TLS _ RSA _ WITH _ AES _ 256 _ CBC _ SHA " } ; <nl> + public String [ ] cipher _ suites = { <nl> + " TLS _ RSA _ WITH _ AES _ 128 _ CBC _ SHA " , " TLS _ RSA _ WITH _ AES _ 256 _ CBC _ SHA " , <nl> + " TLS _ DHE _ RSA _ WITH _ AES _ 128 _ CBC _ SHA " , " TLS _ DHE _ RSA _ WITH _ AES _ 256 _ CBC _ SHA " , <nl> + " TLS _ ECDHE _ RSA _ WITH _ AES _ 128 _ CBC _ SHA " , " TLS _ ECDHE _ RSA _ WITH _ AES _ 256 _ CBC _ SHA " <nl> + } ; <nl> public String protocol = " TLS " ; <nl> public String algorithm = " SunX509 " ; <nl> public String store _ type = " JKS " ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cache / AutoSavingCache . java b / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> index 4e35d34 . . 7e4bb77 100644 <nl> - - - a / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> + + + b / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> @ @ - 37 , 6 + 37 , 7 @ @ import org . apache . cassandra . db . compaction . OperationType ; <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . io . FSWriteError ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> + import org . apache . cassandra . io . util . LengthAvailableInputStream ; <nl> import org . apache . cassandra . io . util . SequentialWriter ; <nl> import org . apache . cassandra . service . CacheService ; <nl> import org . apache . cassandra . service . StorageService ; <nl> @ @ - 109 , 7 + 110 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> try <nl> { <nl> logger . info ( String . format ( " reading saved cache % s " , path ) ) ; <nl> - in = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) ) ; <nl> + in = new DataInputStream ( new LengthAvailableInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) , path . length ( ) ) ) ; <nl> Set < ByteBuffer > keys = new HashSet < ByteBuffer > ( ) ; <nl> while ( in . available ( ) > 0 ) <nl> { <nl> @ @ - 120 , 7 + 121 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> } <nl> catch ( Exception e ) <nl> { <nl> - logger . warn ( String . format ( " error reading saved cache % s , keys loaded so far : % d " , path . getAbsolutePath ( ) , count ) , e ) ; <nl> + logger . debug ( String . format ( " harmless error reading saved cache % s fully , keys loaded so far : % d " , path . getAbsolutePath ( ) , count ) , e ) ; <nl> return count ; <nl> } <nl> finally <nl> @ @ - 137 , 7 + 138 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> try <nl> { <nl> logger . info ( String . format ( " reading saved cache % s " , path ) ) ; <nl> - in = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) ) ; <nl> + in = new DataInputStream ( new LengthAvailableInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) , path . length ( ) ) ) ; <nl> List < Future < Pair < K , V > > > futures = new ArrayList < Future < Pair < K , V > > > ( ) ; <nl> while ( in . available ( ) > 0 ) <nl> { <nl> @ @ - 157 , 7 + 158 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> } <nl> catch ( Exception e ) <nl> { <nl> - logger . warn ( String . format ( " error reading saved cache % s " , path . getAbsolutePath ( ) ) , e ) ; <nl> + logger . debug ( String . format ( " harmless error reading saved cache % s " , path . getAbsolutePath ( ) ) , e ) ; <nl> } <nl> finally <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / io / util / LengthAvailableInputStream . java b / src / java / org / apache / cassandra / io / util / LengthAvailableInputStream . java <nl> new file mode 100644 <nl> index 0000000 . . a467ce2 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / io / util / LengthAvailableInputStream . java <nl> @ @ - 0 , 0 + 1 , 98 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . io . util ; <nl> + <nl> + import java . io . FilterInputStream ; <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + <nl> + / * * <nl> + * a FilterInputStream that returns the remaining bytes to read from available ( ) <nl> + * regardless of whether the device is ready to provide them . <nl> + * / <nl> + public class LengthAvailableInputStream extends FilterInputStream <nl> + { <nl> + private long remainingBytes ; <nl> + <nl> + public LengthAvailableInputStream ( InputStream in , long totalLength ) <nl> + { <nl> + super ( in ) ; <nl> + remainingBytes = totalLength ; <nl> + } <nl> + <nl> + @ Override <nl> + public int read ( ) throws IOException <nl> + { <nl> + int b = in . read ( ) ; <nl> + - - remainingBytes ; <nl> + return b ; <nl> + } <nl> + <nl> + @ Override <nl> + public int read ( byte [ ] b ) throws IOException <nl> + { <nl> + int length = in . read ( b ) ; <nl> + remainingBytes - = length ; <nl> + return length ; <nl> + } <nl> + <nl> + @ Override <nl> + public int read ( byte [ ] b , int off , int len ) throws IOException <nl> + { <nl> + int length = in . read ( b , off , len ) ; <nl> + remainingBytes - = length ; <nl> + return length ; <nl> + } <nl> + <nl> + @ Override <nl> + public long skip ( long n ) throws IOException <nl> + { <nl> + long length = in . skip ( n ) ; <nl> + remainingBytes - = length ; <nl> + return length ; <nl> + } <nl> + <nl> + @ Override <nl> + public int available ( ) throws IOException <nl> + { <nl> + return ( remainingBytes < = 0 ) ? 0 : ( ( remainingBytes > Integer . MAX _ VALUE ) ? Integer . MAX _ VALUE : ( int ) remainingBytes ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void close ( ) throws IOException <nl> + { <nl> + in . close ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public synchronized void mark ( int readlimit ) <nl> + { <nl> + } <nl> + <nl> + @ Override <nl> + public synchronized void reset ( ) throws IOException <nl> + { <nl> + throw new IOException ( " Mark / Reset not supported " ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean markSupported ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 325c623 . . f88345d 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 2 . 16 
 + * add extra SSL cipher suites ( CASSANDRA - 6613 ) 
 * fix nodetool getsstables for blob PK ( CASSANDRA - 6803 ) 
 * Add CMSClassUnloadingEnabled JVM option ( CASSANDRA - 6541 ) 
 * Catch memtable flush exceptions during shutdown ( CASSANDRA - 6735 ) 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index 194a196 . . ecad3f0 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 651 , 6 + 651 , 7 @ @ index _ interval : 128 
 # Default settings are TLS v1 , RSA 1024 - bit keys ( it is imperative that 
 # users generate their own keys ) TLS _ RSA _ WITH _ AES _ 128 _ CBC _ SHA as the cipher 
 # suite for authentication , key exchange and encryption of the actual data transfers . 
 + # Use the DHE / ECDHE ciphers if running in FIPS 140 compliant mode . 
 # NOTE : No custom encryption options are enabled at the moment 
 # The available internode options are : all , none , dc , rack 
 # 
 @ @ - 671 , 7 + 672 , 7 @ @ server _ encryption _ options : 
 # protocol : TLS 
 # algorithm : SunX509 
 # store _ type : JKS 
 - # cipher _ suites : [ TLS _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ RSA _ WITH _ AES _ 256 _ CBC _ SHA ] 
 + # cipher _ suites : [ TLS _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ RSA _ WITH _ AES _ 256 _ CBC _ SHA , TLS _ DHE _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ DHE _ RSA _ WITH _ AES _ 256 _ CBC _ SHA , TLS _ ECDHE _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ ECDHE _ RSA _ WITH _ AES _ 256 _ CBC _ SHA ] 
 # require _ client _ auth : false 
 
 # enable or disable client / server encryption . 
 @ @ - 687 , 7 + 688 , 7 @ @ client _ encryption _ options : 
 # protocol : TLS 
 # algorithm : SunX509 
 # store _ type : JKS 
 - # cipher _ suites : [ TLS _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ RSA _ WITH _ AES _ 256 _ CBC _ SHA ] 
 + # cipher _ suites : [ TLS _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ RSA _ WITH _ AES _ 256 _ CBC _ SHA , TLS _ DHE _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ DHE _ RSA _ WITH _ AES _ 256 _ CBC _ SHA , TLS _ ECDHE _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ ECDHE _ RSA _ WITH _ AES _ 256 _ CBC _ SHA ] 
 
 # internode _ compression controls whether traffic between nodes is 
 # compressed . 
 diff - - git a / src / java / org / apache / cassandra / config / EncryptionOptions . java b / src / java / org / apache / cassandra / config / EncryptionOptions . java 
 index f873636 . . 945a15b 100644 
 - - - a / src / java / org / apache / cassandra / config / EncryptionOptions . java 
 + + + b / src / java / org / apache / cassandra / config / EncryptionOptions . java 
 @ @ - 23 , 7 + 23 , 11 @ @ public abstract class EncryptionOptions 
 public String keystore _ password = " cassandra " ; 
 public String truststore = " conf / . truststore " ; 
 public String truststore _ password = " cassandra " ; 
 - public String [ ] cipher _ suites = { " TLS _ RSA _ WITH _ AES _ 128 _ CBC _ SHA " , " TLS _ RSA _ WITH _ AES _ 256 _ CBC _ SHA " } ; 
 + public String [ ] cipher _ suites = { 
 + " TLS _ RSA _ WITH _ AES _ 128 _ CBC _ SHA " , " TLS _ RSA _ WITH _ AES _ 256 _ CBC _ SHA " , 
 + " TLS _ DHE _ RSA _ WITH _ AES _ 128 _ CBC _ SHA " , " TLS _ DHE _ RSA _ WITH _ AES _ 256 _ CBC _ SHA " , 
 + " TLS _ ECDHE _ RSA _ WITH _ AES _ 128 _ CBC _ SHA " , " TLS _ ECDHE _ RSA _ WITH _ AES _ 256 _ CBC _ SHA " 
 + } ; 
 public String protocol = " TLS " ; 
 public String algorithm = " SunX509 " ; 
 public String store _ type = " JKS " ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cache / AutoSavingCache . java b / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 index 4e35d34 . . 7e4bb77 100644 
 - - - a / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 + + + b / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 @ @ - 37 , 6 + 37 , 7 @ @ import org . apache . cassandra . db . compaction . OperationType ; 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . io . FSWriteError ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 + import org . apache . cassandra . io . util . LengthAvailableInputStream ; 
 import org . apache . cassandra . io . util . SequentialWriter ; 
 import org . apache . cassandra . service . CacheService ; 
 import org . apache . cassandra . service . StorageService ; 
 @ @ - 109 , 7 + 110 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 try 
 { 
 logger . info ( String . format ( " reading saved cache % s " , path ) ) ; 
 - in = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) ) ; 
 + in = new DataInputStream ( new LengthAvailableInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) , path . length ( ) ) ) ; 
 Set < ByteBuffer > keys = new HashSet < ByteBuffer > ( ) ; 
 while ( in . available ( ) > 0 ) 
 { 
 @ @ - 120 , 7 + 121 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 } 
 catch ( Exception e ) 
 { 
 - logger . warn ( String . format ( " error reading saved cache % s , keys loaded so far : % d " , path . getAbsolutePath ( ) , count ) , e ) ; 
 + logger . debug ( String . format ( " harmless error reading saved cache % s fully , keys loaded so far : % d " , path . getAbsolutePath ( ) , count ) , e ) ; 
 return count ; 
 } 
 finally 
 @ @ - 137 , 7 + 138 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 try 
 { 
 logger . info ( String . format ( " reading saved cache % s " , path ) ) ; 
 - in = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) ) ; 
 + in = new DataInputStream ( new LengthAvailableInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) , path . length ( ) ) ) ; 
 List < Future < Pair < K , V > > > futures = new ArrayList < Future < Pair < K , V > > > ( ) ; 
 while ( in . available ( ) > 0 ) 
 { 
 @ @ - 157 , 7 + 158 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 } 
 catch ( Exception e ) 
 { 
 - logger . warn ( String . format ( " error reading saved cache % s " , path . getAbsolutePath ( ) ) , e ) ; 
 + logger . debug ( String . format ( " harmless error reading saved cache % s " , path . getAbsolutePath ( ) ) , e ) ; 
 } 
 finally 
 { 
 diff - - git a / src / java / org / apache / cassandra / io / util / LengthAvailableInputStream . java b / src / java / org / apache / cassandra / io / util / LengthAvailableInputStream . java 
 new file mode 100644 
 index 0000000 . . a467ce2 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / io / util / LengthAvailableInputStream . java 
 @ @ - 0 , 0 + 1 , 98 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . io . util ; 
 + 
 + import java . io . FilterInputStream ; 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + 
 + / * * 
 + * a FilterInputStream that returns the remaining bytes to read from available ( ) 
 + * regardless of whether the device is ready to provide them . 
 + * / 
 + public class LengthAvailableInputStream extends FilterInputStream 
 + { 
 + private long remainingBytes ; 
 + 
 + public LengthAvailableInputStream ( InputStream in , long totalLength ) 
 + { 
 + super ( in ) ; 
 + remainingBytes = totalLength ; 
 + } 
 + 
 + @ Override 
 + public int read ( ) throws IOException 
 + { 
 + int b = in . read ( ) ; 
 + - - remainingBytes ; 
 + return b ; 
 + } 
 + 
 + @ Override 
 + public int read ( byte [ ] b ) throws IOException 
 + { 
 + int length = in . read ( b ) ; 
 + remainingBytes - = length ; 
 + return length ; 
 + } 
 + 
 + @ Override 
 + public int read ( byte [ ] b , int off , int len ) throws IOException 
 + { 
 + int length = in . read ( b , off , len ) ; 
 + remainingBytes - = length ; 
 + return length ; 
 + } 
 + 
 + @ Override 
 + public long skip ( long n ) throws IOException 
 + { 
 + long length = in . skip ( n ) ; 
 + remainingBytes - = length ; 
 + return length ; 
 + } 
 + 
 + @ Override 
 + public int available ( ) throws IOException 
 + { 
 + return ( remainingBytes < = 0 ) ? 0 : ( ( remainingBytes > Integer . MAX _ VALUE ) ? Integer . MAX _ VALUE : ( int ) remainingBytes ) ; 
 + } 
 + 
 + @ Override 
 + public void close ( ) throws IOException 
 + { 
 + in . close ( ) ; 
 + } 
 + 
 + @ Override 
 + public synchronized void mark ( int readlimit ) 
 + { 
 + } 
 + 
 + @ Override 
 + public synchronized void reset ( ) throws IOException 
 + { 
 + throw new IOException ( " Mark / Reset not supported " ) ; 
 + } 
 + 
 + @ Override 
 + public boolean markSupported ( ) 
 + { 
 + return false ; 
 + } 
 + }
