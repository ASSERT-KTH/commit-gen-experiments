BLEU SCORE: 0.11156508007421491

TEST MSG: Minor optimizations
GENERATED MSG: Implement caching of authorization results

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / auth / DataResource . java b / src / java / org / apache / cassandra / auth / DataResource . java <nl> index f64ed93 . . 0aa24db 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / DataResource . java <nl> + + + b / src / java / org / apache / cassandra / auth / DataResource . java <nl> @ @ - 54 , 31 + 54 , 22 @ @ public class DataResource implements IResource <nl> Permission . MODIFY , <nl> Permission . AUTHORIZE ) ; <nl> private static final String ROOT _ NAME = " data " ; <nl> - private static final DataResource ROOT _ RESOURCE = new DataResource ( ) ; <nl> + private static final DataResource ROOT _ RESOURCE = new DataResource ( Level . ROOT , null , null ) ; <nl> <nl> private final Level level ; <nl> private final String keyspace ; <nl> private final String table ; <nl> <nl> - private DataResource ( ) <nl> - { <nl> - level = Level . ROOT ; <nl> - keyspace = null ; <nl> - table = null ; <nl> - } <nl> + / / memoized hashcode since DataRessource is immutable and used in hashmaps often <nl> + private final transient int hash ; <nl> <nl> - private DataResource ( String keyspace ) <nl> + private DataResource ( Level level , String keyspace , String table ) <nl> { <nl> - level = Level . KEYSPACE ; <nl> - this . keyspace = keyspace ; <nl> - table = null ; <nl> - } <nl> - <nl> - private DataResource ( String keyspace , String table ) <nl> - { <nl> - level = Level . TABLE ; <nl> + this . level = level ; <nl> this . keyspace = keyspace ; <nl> this . table = table ; <nl> + <nl> + this . hash = Objects . hashCode ( level , keyspace , table ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 97 , 7 + 88 , 7 @ @ public class DataResource implements IResource <nl> * / <nl> public static DataResource keyspace ( String keyspace ) <nl> { <nl> - return new DataResource ( keyspace ) ; <nl> + return new DataResource ( Level . KEYSPACE , keyspace , null ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 109 , 7 + 100 , 7 @ @ public class DataResource implements IResource <nl> * / <nl> public static DataResource table ( String keyspace , String table ) <nl> { <nl> - return new DataResource ( keyspace , table ) ; <nl> + return new DataResource ( Level . TABLE , keyspace , table ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 272 , 6 + 263 , 6 @ @ public class DataResource implements IResource <nl> @ Override <nl> public int hashCode ( ) <nl> { <nl> - return Objects . hashCode ( level , keyspace , table ) ; <nl> + return hash ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index 00ca704 . . 5db1985 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 38 , 6 + 38 , 7 @ @ import org . apache . commons . lang3 . builder . ToStringBuilder ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . auth . DataResource ; <nl> import org . apache . cassandra . cql3 . ColumnIdentifier ; <nl> import org . apache . cassandra . cql3 . QueryProcessor ; <nl> import org . apache . cassandra . cql3 . statements . CFStatement ; <nl> @ @ - 118 , 6 + 119 , 8 @ @ public final class CFMetaData <nl> / / for those tables in practice ) . <nl> private volatile ColumnDefinition compactValueColumn ; <nl> <nl> + public final DataResource resource ; <nl> + <nl> / * <nl> * All of these methods will go away once CFMetaData becomes completely immutable . <nl> * / <nl> @ @ - 288 , 6 + 291 , 7 @ @ public final class CFMetaData <nl> this . partitionColumns = partitionColumns ; <nl> <nl> this . serializers = new Serializers ( this ) ; <nl> + this . resource = DataResource . table ( ksName , cfName ) ; <nl> rebuild ( ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / TimeFcts . java b / src / java / org / apache / cassandra / cql3 / functions / TimeFcts . java <nl> index 93d6d3b . . 1b87261 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / TimeFcts . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / TimeFcts . java <nl> @ @ - 67 , 7 + 67 , 7 @ @ public abstract class TimeFcts <nl> if ( bb = = null ) <nl> return null ; <nl> <nl> - return ByteBuffer . wrap ( UUIDGen . decompose ( UUIDGen . minTimeUUID ( TimestampType . instance . compose ( bb ) . getTime ( ) ) ) ) ; <nl> + return UUIDGen . toByteBuffer ( UUIDGen . minTimeUUID ( TimestampType . instance . compose ( bb ) . getTime ( ) ) ) ; <nl> } <nl> } ; <nl> <nl> @ @ - 79 , 7 + 79 , 7 @ @ public abstract class TimeFcts <nl> if ( bb = = null ) <nl> return null ; <nl> <nl> - return ByteBuffer . wrap ( UUIDGen . decompose ( UUIDGen . maxTimeUUID ( TimestampType . instance . compose ( bb ) . getTime ( ) ) ) ) ; <nl> + return UUIDGen . toByteBuffer ( UUIDGen . maxTimeUUID ( TimestampType . instance . compose ( bb ) . getTime ( ) ) ) ; <nl> } <nl> } ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> index 23a26d0 . . 7eefd8e 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> @ @ - 193 , 21 + 193 , 21 @ @ public abstract class ModificationStatement implements CQLStatement <nl> <nl> public void checkAccess ( ClientState state ) throws InvalidRequestException , UnauthorizedException <nl> { <nl> - state . hasColumnFamilyAccess ( keyspace ( ) , columnFamily ( ) , Permission . MODIFY ) ; <nl> + state . hasColumnFamilyAccess ( cfm , Permission . MODIFY ) ; <nl> <nl> / / CAS updates can be used to simulate a SELECT query , so should require Permission . SELECT as well . <nl> if ( hasConditions ( ) ) <nl> - state . hasColumnFamilyAccess ( keyspace ( ) , columnFamily ( ) , Permission . SELECT ) ; <nl> + state . hasColumnFamilyAccess ( cfm , Permission . SELECT ) ; <nl> <nl> / / MV updates need to get the current state from the table , and might update the views <nl> / / Require Permission . SELECT on the base table , and Permission . MODIFY on the views <nl> Iterator < ViewDefinition > views = View . findAll ( keyspace ( ) , columnFamily ( ) ) . iterator ( ) ; <nl> if ( views . hasNext ( ) ) <nl> { <nl> - state . hasColumnFamilyAccess ( keyspace ( ) , columnFamily ( ) , Permission . SELECT ) ; <nl> + state . hasColumnFamilyAccess ( cfm , Permission . SELECT ) ; <nl> do <nl> { <nl> - state . hasColumnFamilyAccess ( keyspace ( ) , views . next ( ) . viewName , Permission . MODIFY ) ; <nl> + state . hasColumnFamilyAccess ( views . next ( ) . metadata , Permission . MODIFY ) ; <nl> } while ( views . hasNext ( ) ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index 7848556 . . 21bb257 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 178 , 11 + 178 , 11 @ @ public class SelectStatement implements CQLStatement <nl> { <nl> CFMetaData baseTable = View . findBaseTable ( keyspace ( ) , columnFamily ( ) ) ; <nl> if ( baseTable ! = null ) <nl> - state . hasColumnFamilyAccess ( keyspace ( ) , baseTable . cfName , Permission . SELECT ) ; <nl> + state . hasColumnFamilyAccess ( baseTable , Permission . SELECT ) ; <nl> } <nl> else <nl> { <nl> - state . hasColumnFamilyAccess ( keyspace ( ) , columnFamily ( ) , Permission . SELECT ) ; <nl> + state . hasColumnFamilyAccess ( cfm , Permission . SELECT ) ; <nl> } <nl> <nl> for ( Function function : getFunctions ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / CompositeType . java b / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> index 842cbbf . . 9bd23dd 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> @ @ - 391 , 7 + 391 , 9 @ @ public class CompositeType extends AbstractCompositeType <nl> for ( ByteBuffer bb : buffers ) <nl> { <nl> ByteBufferUtil . writeShortLength ( out , bb . remaining ( ) ) ; <nl> - out . put ( bb . duplicate ( ) ) ; <nl> + int toCopy = bb . remaining ( ) ; <nl> + ByteBufferUtil . arrayCopy ( bb , bb . position ( ) , out , out . position ( ) , toCopy ) ; <nl> + out . position ( out . position ( ) + toCopy ) ; <nl> out . put ( ( byte ) 0 ) ; <nl> } <nl> out . flip ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / UUIDType . java b / src / java / org / apache / cassandra / db / marshal / UUIDType . java <nl> index acaf27c . . 9722a52 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / UUIDType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / UUIDType . java <nl> @ @ - 140 , 7 + 140 , 7 @ @ public class UUIDType extends AbstractType < UUID > <nl> { <nl> try <nl> { <nl> - return ByteBuffer . wrap ( UUIDGen . decompose ( UUID . fromString ( source ) ) ) ; <nl> + return UUIDGen . toByteBuffer ( UUID . fromString ( source ) ) ; <nl> } <nl> catch ( IllegalArgumentException e ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / serializers / UUIDSerializer . java b / src / java / org / apache / cassandra / serializers / UUIDSerializer . java <nl> index f8e2582 . . 4501f34 100644 <nl> - - - a / src / java / org / apache / cassandra / serializers / UUIDSerializer . java <nl> + + + b / src / java / org / apache / cassandra / serializers / UUIDSerializer . java <nl> @ @ - 34 , 7 + 34 , 7 @ @ public class UUIDSerializer implements TypeSerializer < UUID > <nl> <nl> public ByteBuffer serialize ( UUID value ) <nl> { <nl> - return value = = null ? ByteBufferUtil . EMPTY _ BYTE _ BUFFER : ByteBuffer . wrap ( UUIDGen . decompose ( value ) ) ; <nl> + return value = = null ? ByteBufferUtil . EMPTY _ BYTE _ BUFFER : UUIDGen . toByteBuffer ( value ) ; <nl> } <nl> <nl> public void validate ( ByteBuffer bytes ) throws MarshalException <nl> diff - - git a / src / java / org / apache / cassandra / service / ClientState . java b / src / java / org / apache / cassandra / service / ClientState . java <nl> index f2ed984 . . d576ac3 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ClientState . java <nl> + + + b / src / java / org / apache / cassandra / service / ClientState . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . auth . * ; <nl> import org . apache . cassandra . config . Config ; <nl> + import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . cql3 . QueryHandler ; <nl> @ @ - 249 , 6 + 250 , 12 @ @ public class ClientState <nl> hasAccess ( keyspace , perm , DataResource . table ( keyspace , columnFamily ) ) ; <nl> } <nl> <nl> + public void hasColumnFamilyAccess ( CFMetaData cfm , Permission perm ) <nl> + throws UnauthorizedException , InvalidRequestException <nl> + { <nl> + hasAccess ( cfm . ksName , perm , cfm . resource ) ; <nl> + } <nl> + <nl> private void hasAccess ( String keyspace , Permission perm , DataResource resource ) <nl> throws UnauthorizedException , InvalidRequestException <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / utils / UUIDGen . java b / src / java / org / apache / cassandra / utils / UUIDGen . java <nl> index a777a50 . . f046279 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / UUIDGen . java <nl> + + + b / src / java / org / apache / cassandra / utils / UUIDGen . java <nl> @ @ - 106 , 6 + 106 , 15 @ @ public class UUIDGen <nl> return new UUID ( raw . getLong ( raw . position ( ) ) , raw . getLong ( raw . position ( ) + 8 ) ) ; <nl> } <nl> <nl> + public static ByteBuffer toByteBuffer ( UUID uuid ) <nl> + { <nl> + ByteBuffer buffer = ByteBuffer . allocate ( 16 ) ; <nl> + buffer . putLong ( uuid . getMostSignificantBits ( ) ) ; <nl> + buffer . putLong ( uuid . getLeastSignificantBits ( ) ) ; <nl> + buffer . flip ( ) ; <nl> + return buffer ; <nl> + } <nl> + <nl> / * * decomposes a uuid into raw bytes . * / <nl> public static byte [ ] decompose ( UUID uuid ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / utils / UUIDTests . java b / test / unit / org / apache / cassandra / utils / UUIDTests . java <nl> index 83e421a . . ebe5fd1 100644 <nl> - - - a / test / unit / org / apache / cassandra / utils / UUIDTests . java <nl> + + + b / test / unit / org / apache / cassandra / utils / UUIDTests . java <nl> @ @ - 48 , 7 + 48 , 6 @ @ public class UUIDTests <nl> assert one . timestamp ( ) < two . timestamp ( ) ; <nl> } <nl> <nl> - <nl> @ Test <nl> public void testDecomposeAndRaw ( ) <nl> { <nl> @ @ - 59 , 6 + 58 , 15 @ @ public class UUIDTests <nl> } <nl> <nl> @ Test <nl> + public void testToFromByteBuffer ( ) <nl> + { <nl> + UUID a = UUIDGen . getTimeUUID ( ) ; <nl> + ByteBuffer bb = UUIDGen . toByteBuffer ( a ) ; <nl> + UUID b = UUIDGen . getUUID ( bb ) ; <nl> + assert a . equals ( b ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testTimeUUIDType ( ) <nl> { <nl> TimeUUIDType comp = TimeUUIDType . instance ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 466dca6 . . 0621c79 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 16 , 6 + 16 , 7 @ @ <nl> * CQL3 refactor to allow conversion function ( CASSANDRA - 5226 ) <nl> * Fix drop of sstables in some circumstance ( CASSANDRA - 5232 ) <nl> * Implement caching of authorization results ( CASSANDRA - 4295 ) <nl> + * Add support for LZ4 compression ( CASSANDRA - 5038 ) <nl> <nl> <nl> 1 . 2 . 1 <nl> diff - - git a / NOTICE . txt b / NOTICE . txt <nl> index 71f38fe . . 9826990 100644 <nl> - - - a / NOTICE . txt <nl> + + + b / NOTICE . txt <nl> @ @ - 44 , 3 + 44 , 8 @ @ Written by Nathan G . Bronson et al . <nl> CQL Native transport uses Netty <nl> ( https : / / netty . io / ) <nl> Copyright ( C ) 2011 The Netty Project <nl> + <nl> + LZ4 compression support provided by lz4 - java ( http : / / github . com / jpountz / lz4 - java ) <nl> + Written by Adrien Grand . <nl> + Contains bindings to the C LZ4 implementation ( http : / / code . google . com / p / lz4 / ) <nl> + Copyright ( C ) 2011 - 2012 , Yann Collet . <nl> diff - - git a / build . xml b / build . xml <nl> index 421c8f3 . . ea0bbd7 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 329 , 6 + 329 , 7 @ @ <nl> < scm connection = " $ { scm . connection } " developerConnection = " $ { scm . developerConnection } " url = " $ { scm . url } " / > <nl> < dependencyManagement > <nl> < dependency groupId = " org . xerial . snappy " artifactId = " snappy - java " version = " 1 . 0 . 4 . 1 " / > <nl> + < dependency groupId = " net . jpountz . lz4 " artifactId = " lz4 " version = " 1 . 1 . 0 " / > <nl> < dependency groupId = " com . ning " artifactId = " compress - lzf " version = " 0 . 8 . 4 " / > <nl> < dependency groupId = " com . google . guava " artifactId = " guava " version = " 12 . 0 " / > <nl> < dependency groupId = " commons - cli " artifactId = " commons - cli " version = " 1 . 1 " / > <nl> @ @ - 443 , 6 + 444 , 7 @ @ <nl> version = " $ { version } " / > <nl> < scm connection = " $ { scm . connection } " developerConnection = " $ { scm . developerConnection } " url = " $ { scm . url } " / > <nl> < dependency groupId = " org . xerial . snappy " artifactId = " snappy - java " / > <nl> + < dependency groupId = " net . jpountz . lz4 " artifactId = " lz4 " / > <nl> < dependency groupId = " com . ning " artifactId = " compress - lzf " / > <nl> < dependency groupId = " com . google . guava " artifactId = " guava " / > <nl> < dependency groupId = " commons - cli " artifactId = " commons - cli " / > <nl> diff - - git a / lib / licenses / lz4 - 1 . 1 . 0 . txt b / lib / licenses / lz4 - 1 . 1 . 0 . txt <nl> new file mode 100644 <nl> index 0000000 . . 7f3ef36 <nl> - - - / dev / null <nl> + + + b / lib / licenses / lz4 - 1 . 1 . 0 . txt <nl> @ @ - 0 , 0 + 1 , 235 @ @ <nl> + <nl> + Apache License <nl> + Version 2 . 0 , January 2004 <nl> + http : / / www . apache . org / licenses / <nl> + <nl> + TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION <nl> + <nl> + 1 . Definitions . <nl> + <nl> + " License " shall mean the terms and conditions for use , reproduction , <nl> + and distribution as defined by Sections 1 through 9 of this document . <nl> + <nl> + " Licensor " shall mean the copyright owner or entity authorized by <nl> + the copyright owner that is granting the License . <nl> + <nl> + " Legal Entity " shall mean the union of the acting entity and all <nl> + other entities that control , are controlled by , or are under common <nl> + control with that entity . For the purposes of this definition , <nl> + " control " means ( i ) the power , direct or indirect , to cause the <nl> + direction or management of such entity , whether by contract or <nl> + otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the <nl> + outstanding shares , or ( iii ) beneficial ownership of such entity . <nl> + <nl> + " You " ( or " Your " ) shall mean an individual or Legal Entity <nl> + exercising permissions granted by this License . <nl> + <nl> + " Source " form shall mean the preferred form for making modifications , <nl> + including but not limited to software source code , documentation <nl> + source , and configuration files . <nl> + <nl> + " Object " form shall mean any form resulting from mechanical <nl> + transformation or translation of a Source form , including but <nl> + not limited to compiled object code , generated documentation , <nl> + and conversions to other media types . <nl> + <nl> + " Work " shall mean the work of authorship , whether in Source or <nl> + Object form , made available under the License , as indicated by a <nl> + copyright notice that is included in or attached to the work <nl> + ( an example is provided in the Appendix below ) . <nl> + <nl> + " Derivative Works " shall mean any work , whether in Source or Object <nl> + form , that is based on ( or derived from ) the Work and for which the <nl> + editorial revisions , annotations , elaborations , or other modifications <nl> + represent , as a whole , an original work of authorship . For the purposes <nl> + of this License , Derivative Works shall not include works that remain <nl> + separable from , or merely link ( or bind by name ) to the interfaces of , <nl> + the Work and Derivative Works thereof . <nl> + <nl> + " Contribution " shall mean any work of authorship , including <nl> + the original version of the Work and any modifications or additions <nl> + to that Work or Derivative Works thereof , that is intentionally <nl> + submitted to Licensor for inclusion in the Work by the copyright owner <nl> + or by an individual or Legal Entity authorized to submit on behalf of <nl> + the copyright owner . For the purposes of this definition , " submitted " <nl> + means any form of electronic , verbal , or written communication sent <nl> + to the Licensor or its representatives , including but not limited to <nl> + communication on electronic mailing lists , source code control systems , <nl> + and issue tracking systems that are managed by , or on behalf of , the <nl> + Licensor for the purpose of discussing and improving the Work , but <nl> + excluding communication that is conspicuously marked or otherwise <nl> + designated in writing by the copyright owner as " Not a Contribution . " <nl> + <nl> + " Contributor " shall mean Licensor and any individual or Legal Entity <nl> + on behalf of whom a Contribution has been received by Licensor and <nl> + subsequently incorporated within the Work . <nl> + <nl> + 2 . Grant of Copyright License . Subject to the terms and conditions of <nl> + this License , each Contributor hereby grants to You a perpetual , <nl> + worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> + copyright license to reproduce , prepare Derivative Works of , <nl> + publicly display , publicly perform , sublicense , and distribute the <nl> + Work and such Derivative Works in Source or Object form . <nl> + <nl> + 3 . Grant of Patent License . Subject to the terms and conditions of <nl> + this License , each Contributor hereby grants to You a perpetual , <nl> + worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> + ( except as stated in this section ) patent license to make , have made , <nl> + use , offer to sell , sell , import , and otherwise transfer the Work , <nl> + where such license applies only to those patent claims licensable <nl> + by such Contributor that are necessarily infringed by their <nl> + Contribution ( s ) alone or by combination of their Contribution ( s ) <nl> + with the Work to which such Contribution ( s ) was submitted . If You <nl> + institute patent litigation against any entity ( including a <nl> + cross - claim or counterclaim in a lawsuit ) alleging that the Work <nl> + or a Contribution incorporated within the Work constitutes direct <nl> + or contributory patent infringement , then any patent licenses <nl> + granted to You under this License for that Work shall terminate <nl> + as of the date such litigation is filed . <nl> + <nl> + 4 . Redistribution . You may reproduce and distribute copies of the <nl> + Work or Derivative Works thereof in any medium , with or without <nl> + modifications , and in Source or Object form , provided that You <nl> + meet the following conditions : <nl> + <nl> + ( a ) You must give any other recipients of the Work or <nl> + Derivative Works a copy of this License ; and <nl> + <nl> + ( b ) You must cause any modified files to carry prominent notices <nl> + stating that You changed the files ; and <nl> + <nl> + ( c ) You must retain , in the Source form of any Derivative Works <nl> + that You distribute , all copyright , patent , trademark , and <nl> + attribution notices from the Source form of the Work , <nl> + excluding those notices that do not pertain to any part of <nl> + the Derivative Works ; and <nl> + <nl> + ( d ) If the Work includes a " NOTICE " text file as part of its <nl> + distribution , then any Derivative Works that You distribute must <nl> + include a readable copy of the attribution notices contained <nl> + within such NOTICE file , excluding those notices that do not <nl> + pertain to any part of the Derivative Works , in at least one <nl> + of the following places : within a NOTICE text file distributed <nl> + as part of the Derivative Works ; within the Source form or <nl> + documentation , if provided along with the Derivative Works ; or , <nl> + within a display generated by the Derivative Works , if and <nl> + wherever such third - party notices normally appear . The contents <nl> + of the NOTICE file are for informational purposes only and <nl> + do not modify the License . You may add Your own attribution <nl> + notices within Derivative Works that You distribute , alongside <nl> + or as an addendum to the NOTICE text from the Work , provided <nl> + that such additional attribution notices cannot be construed <nl> + as modifying the License . <nl> + <nl> + You may add Your own copyright statement to Your modifications and <nl> + may provide additional or different license terms and conditions <nl> + for use , reproduction , or distribution of Your modifications , or <nl> + for any such Derivative Works as a whole , provided Your use , <nl> + reproduction , and distribution of the Work otherwise complies with <nl> + the conditions stated in this License . <nl> + <nl> + 5 . Submission of Contributions . Unless You explicitly state otherwise , <nl> + any Contribution intentionally submitted for inclusion in the Work <nl> + by You to the Licensor shall be under the terms and conditions of <nl> + this License , without any additional terms or conditions . <nl> + Notwithstanding the above , nothing herein shall supersede or modify <nl> + the terms of any separate license agreement you may have executed <nl> + with Licensor regarding such Contributions . <nl> + <nl> + 6 . Trademarks . This License does not grant permission to use the trade <nl> + names , trademarks , service marks , or product names of the Licensor , <nl> + except as required for reasonable and customary use in describing the <nl> + origin of the Work and reproducing the content of the NOTICE file . <nl> + <nl> + 7 . Disclaimer of Warranty . Unless required by applicable law or <nl> + agreed to in writing , Licensor provides the Work ( and each <nl> + Contributor provides its Contributions ) on an " AS IS " BASIS , <nl> + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or <nl> + implied , including , without limitation , any warranties or conditions <nl> + of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A <nl> + PARTICULAR PURPOSE . You are solely responsible for determining the <nl> + appropriateness of using or redistributing the Work and assume any <nl> + risks associated with Your exercise of permissions under this License . <nl> + <nl> + 8 . Limitation of Liability . In no event and under no legal theory , <nl> + whether in tort ( including negligence ) , contract , or otherwise , <nl> + unless required by applicable law ( such as deliberate and grossly <nl> + negligent acts ) or agreed to in writing , shall any Contributor be <nl> + liable to You for damages , including any direct , indirect , special , <nl> + incidental , or consequential damages of any character arising as a <nl> + result of this License or out of the use or inability to use the <nl> + Work ( including but not limited to damages for loss of goodwill , <nl> + work stoppage , computer failure or malfunction , or any and all <nl> + other commercial damages or losses ) , even if such Contributor <nl> + has been advised of the possibility of such damages . <nl> + <nl> + 9 . Accepting Warranty or Additional Liability . While redistributing <nl> + the Work or Derivative Works thereof , You may choose to offer , <nl> + and charge a fee for , acceptance of support , warranty , indemnity , <nl> + or other liability obligations and / or rights consistent with this <nl> + License . However , in accepting such obligations , You may act only <nl> + on Your own behalf and on Your sole responsibility , not on behalf <nl> + of any other Contributor , and only if You agree to indemnify , <nl> + defend , and hold each Contributor harmless for any liability <nl> + incurred by , or claims asserted against , such Contributor by reason <nl> + of your accepting any such warranty or additional liability . <nl> + <nl> + END OF TERMS AND CONDITIONS <nl> + <nl> + APPENDIX : How to apply the Apache License to your work . <nl> + <nl> + To apply the Apache License to your work , attach the following <nl> + boilerplate notice , with the fields enclosed by brackets " [ ] " <nl> + replaced with your own identifying information . ( Don ' t include <nl> + the brackets ! ) The text should be enclosed in the appropriate <nl> + comment syntax for the file format . We also recommend that a <nl> + file or class name and description of purpose be included on the <nl> + same " printed page " as the copyright notice for easier <nl> + identification within third - party archives . <nl> + <nl> + Copyright [ yyyy ] [ name of copyright owner ] <nl> + <nl> + Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + you may not use this file except in compliance with the License . <nl> + You may obtain a copy of the License at <nl> + <nl> + http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + <nl> + Unless required by applicable law or agreed to in writing , software <nl> + distributed under the License is distributed on an " AS IS " BASIS , <nl> + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + See the License for the specific language governing permissions and <nl> + limitations under the License . <nl> + <nl> + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> + <nl> + Copyright ( C ) 2011 - 2012 , Yann Collet . <nl> + BSD 2 - Clause License ( http : / / www . opensource . org / licenses / bsd - license . php ) <nl> + <nl> + Redistribution and use in source and binary forms , with or without <nl> + modification , are permitted provided that the following conditions are <nl> + met : <nl> + <nl> + * Redistributions of source code must retain the above copyright <nl> + notice , this list of conditions and the following disclaimer . <nl> + <nl> + * Redistributions in binary form must reproduce the above <nl> + copyright notice , this list of conditions and the following disclaimer <nl> + in the documentation and / or other materials provided with the <nl> + distribution . <nl> + <nl> + THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS <nl> + AS IS " AND ANY EXPRESS OR IMPLIED WARRANTIES , INCLUDING , BUT NOT <nl> + LIMITED TO , THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR <nl> + A PARTICULAR PURPOSE ARE DISCLAIMED . IN NO EVENT SHALL THE COPYRIGHT <nl> + OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT , INDIRECT , INCIDENTAL , <nl> + SPECIAL , EXEMPLARY , OR CONSEQUENTIAL DAMAGES ( INCLUDING , BUT NOT <nl> + LIMITED TO , PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES ; LOSS OF USE , <nl> + DATA , OR PROFITS ; OR BUSINESS INTERRUPTION ) HOWEVER CAUSED AND ON ANY <nl> + THEORY OF LIABILITY , WHETHER IN CONTRACT , STRICT LIABILITY , OR TORT <nl> + ( INCLUDING NEGLIGENCE OR OTHERWISE ) ARISING IN ANY WAY OUT OF THE USE <nl> + OF THIS SOFTWARE , EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE . <nl> + <nl> + You can contact the author at : <nl> + - LZ4 homepage : http : / / fastcompression . blogspot . com / p / lz4 . html <nl> + - LZ4 source repository : http : / / code . google . com / p / lz4 / <nl> diff - - git a / lib / lz4 - 1 . 1 . 0 . jar b / lib / lz4 - 1 . 1 . 0 . jar <nl> new file mode 100644 <nl> index 0000000 . . fde917a <nl> Binary files / dev / null and b / lib / lz4 - 1 . 1 . 0 . jar differ <nl> diff - - git a / src / java / org / apache / cassandra / io / compress / LZ4Compressor . java b / src / java / org / apache / cassandra / io / compress / LZ4Compressor . java <nl> new file mode 100644 <nl> index 0000000 . . 0cf36c1 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / io / compress / LZ4Compressor . java <nl> @ @ - 0 , 0 + 1 , 104 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . io . compress ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . util . Arrays ; <nl> + import java . util . HashSet ; <nl> + import java . util . Map ; <nl> + import java . util . Set ; <nl> + <nl> + import net . jpountz . lz4 . LZ4Exception ; <nl> + import net . jpountz . lz4 . LZ4Factory ; <nl> + <nl> + public class LZ4Compressor implements ICompressor <nl> + { <nl> + <nl> + private static final int INTEGER _ BYTES = 4 ; <nl> + private static final LZ4Compressor instance = new LZ4Compressor ( ) ; <nl> + <nl> + public static LZ4Compressor create ( Map < String , String > args ) <nl> + { <nl> + return instance ; <nl> + } <nl> + <nl> + private final net . jpountz . lz4 . LZ4Compressor compressor ; <nl> + private final net . jpountz . lz4 . LZ4Decompressor decompressor ; <nl> + <nl> + private LZ4Compressor ( ) <nl> + { <nl> + final LZ4Factory lz4Factory = LZ4Factory . fastestInstance ( ) ; <nl> + compressor = lz4Factory . fastCompressor ( ) ; <nl> + decompressor = lz4Factory . decompressor ( ) ; <nl> + } <nl> + <nl> + public int initialCompressedBufferLength ( int chunkLength ) <nl> + { <nl> + return INTEGER _ BYTES + compressor . maxCompressedLength ( chunkLength ) ; <nl> + } <nl> + <nl> + public int compress ( byte [ ] input , int inputOffset , int inputLength , WrappedArray output , int outputOffset ) throws IOException <nl> + { <nl> + final byte [ ] dest = output . buffer ; <nl> + dest [ outputOffset ] = ( byte ) inputLength ; <nl> + dest [ outputOffset + 1 ] = ( byte ) ( inputLength > > > 8 ) ; <nl> + dest [ outputOffset + 2 ] = ( byte ) ( inputLength > > > 16 ) ; <nl> + dest [ outputOffset + 3 ] = ( byte ) ( inputLength > > > 24 ) ; <nl> + final int maxCompressedLength = compressor . maxCompressedLength ( inputLength ) ; <nl> + try <nl> + { <nl> + return INTEGER _ BYTES + compressor . compress ( input , inputOffset , inputLength , <nl> + dest , outputOffset + INTEGER _ BYTES , maxCompressedLength ) ; <nl> + } <nl> + catch ( LZ4Exception e ) <nl> + { <nl> + throw new IOException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + public int uncompress ( byte [ ] input , int inputOffset , int inputLength , byte [ ] output , int outputOffset ) throws IOException <nl> + { <nl> + final int decompressedLength = <nl> + ( input [ inputOffset ] & 0xFF ) <nl> + | ( ( input [ inputOffset + 1 ] & 0xFF ) < < 8 ) <nl> + | ( ( input [ inputOffset + 2 ] & 0xFF ) < < 16 ) <nl> + | ( ( input [ inputOffset + 3 ] & 0xFF ) < < 24 ) ; <nl> + final int compressedLength ; <nl> + try <nl> + { <nl> + compressedLength = decompressor . decompress ( input , inputOffset + INTEGER _ BYTES , <nl> + output , outputOffset , decompressedLength ) ; <nl> + } <nl> + catch ( LZ4Exception e ) <nl> + { <nl> + throw new IOException ( e ) ; <nl> + } <nl> + <nl> + if ( compressedLength ! = inputLength - INTEGER _ BYTES ) <nl> + { <nl> + throw new IOException ( " Compressed lengths mismatch " ) ; <nl> + } <nl> + <nl> + return decompressedLength ; <nl> + } <nl> + <nl> + public Set < String > supportedOptions ( ) <nl> + { <nl> + return new HashSet < String > ( Arrays . asList ( CompressionParameters . CRC _ CHECK _ CHANCE ) ) ; <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / io / compress / LZ4CompressorTest . java b / test / unit / org / apache / cassandra / io / compress / LZ4CompressorTest . java <nl> new file mode 100644 <nl> index 0000000 . . 56ffdf1 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / io / compress / LZ4CompressorTest . java <nl> @ @ - 0 , 0 + 1 , 84 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . io . compress ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . io . UnsupportedEncodingException ; <nl> + import java . util . Arrays ; <nl> + import java . util . Collections ; <nl> + import java . util . Random ; <nl> + <nl> + import org . apache . cassandra . io . compress . ICompressor . WrappedArray ; <nl> + <nl> + import org . junit . Before ; <nl> + import org . junit . Test ; <nl> + <nl> + import static org . junit . Assert . * ; <nl> + <nl> + public class LZ4CompressorTest <nl> + { <nl> + <nl> + LZ4Compressor compressor ; <nl> + <nl> + @ Before <nl> + public void setUp ( ) <nl> + { <nl> + compressor = LZ4Compressor . create ( Collections . < String , String > emptyMap ( ) ) ; <nl> + } <nl> + <nl> + public void test ( byte [ ] data , int off , int len ) throws IOException <nl> + { <nl> + final int outOffset = 3 ; <nl> + final WrappedArray out = new WrappedArray ( new byte [ outOffset + compressor . initialCompressedBufferLength ( len ) ] ) ; <nl> + new Random ( ) . nextBytes ( out . buffer ) ; <nl> + final int compressedLength = compressor . compress ( data , off , len , out , outOffset ) ; <nl> + final int restoredOffset = 5 ; <nl> + final byte [ ] restored = new byte [ restoredOffset + len ] ; <nl> + new Random ( ) . nextBytes ( restored ) ; <nl> + final int decompressedLength = compressor . uncompress ( out . buffer , outOffset , compressedLength , restored , restoredOffset ) ; <nl> + assertEquals ( decompressedLength , len ) ; <nl> + assertArrayEquals ( Arrays . copyOfRange ( data , off , off + len ) , <nl> + Arrays . copyOfRange ( restored , restoredOffset , restoredOffset + decompressedLength ) ) ; <nl> + } <nl> + <nl> + public void test ( byte [ ] data ) throws IOException <nl> + { <nl> + test ( data , 0 , data . length ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testEmptyArray ( ) throws IOException <nl> + { <nl> + test ( new byte [ 0 ] ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testShortArray ( ) throws UnsupportedEncodingException , IOException <nl> + { <nl> + test ( " Cassandra " . getBytes ( " UTF - 8 " ) , 1 , 7 ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testLongArray ( ) throws UnsupportedEncodingException , IOException <nl> + { <nl> + byte [ ] data = new byte [ 1 < < 20 ] ; <nl> + test ( data , 13 , 1 < < 19 ) ; <nl> + new Random ( 0 ) . nextBytes ( data ) ; <nl> + test ( data , 13 , 1 < < 19 ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / auth / DataResource . java b / src / java / org / apache / cassandra / auth / DataResource . java 
 index f64ed93 . . 0aa24db 100644 
 - - - a / src / java / org / apache / cassandra / auth / DataResource . java 
 + + + b / src / java / org / apache / cassandra / auth / DataResource . java 
 @ @ - 54 , 31 + 54 , 22 @ @ public class DataResource implements IResource 
 Permission . MODIFY , 
 Permission . AUTHORIZE ) ; 
 private static final String ROOT _ NAME = " data " ; 
 - private static final DataResource ROOT _ RESOURCE = new DataResource ( ) ; 
 + private static final DataResource ROOT _ RESOURCE = new DataResource ( Level . ROOT , null , null ) ; 
 
 private final Level level ; 
 private final String keyspace ; 
 private final String table ; 
 
 - private DataResource ( ) 
 - { 
 - level = Level . ROOT ; 
 - keyspace = null ; 
 - table = null ; 
 - } 
 + / / memoized hashcode since DataRessource is immutable and used in hashmaps often 
 + private final transient int hash ; 
 
 - private DataResource ( String keyspace ) 
 + private DataResource ( Level level , String keyspace , String table ) 
 { 
 - level = Level . KEYSPACE ; 
 - this . keyspace = keyspace ; 
 - table = null ; 
 - } 
 - 
 - private DataResource ( String keyspace , String table ) 
 - { 
 - level = Level . TABLE ; 
 + this . level = level ; 
 this . keyspace = keyspace ; 
 this . table = table ; 
 + 
 + this . hash = Objects . hashCode ( level , keyspace , table ) ; 
 } 
 
 / * * 
 @ @ - 97 , 7 + 88 , 7 @ @ public class DataResource implements IResource 
 * / 
 public static DataResource keyspace ( String keyspace ) 
 { 
 - return new DataResource ( keyspace ) ; 
 + return new DataResource ( Level . KEYSPACE , keyspace , null ) ; 
 } 
 
 / * * 
 @ @ - 109 , 7 + 100 , 7 @ @ public class DataResource implements IResource 
 * / 
 public static DataResource table ( String keyspace , String table ) 
 { 
 - return new DataResource ( keyspace , table ) ; 
 + return new DataResource ( Level . TABLE , keyspace , table ) ; 
 } 
 
 / * * 
 @ @ - 272 , 6 + 263 , 6 @ @ public class DataResource implements IResource 
 @ Override 
 public int hashCode ( ) 
 { 
 - return Objects . hashCode ( level , keyspace , table ) ; 
 + return hash ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index 00ca704 . . 5db1985 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 38 , 6 + 38 , 7 @ @ import org . apache . commons . lang3 . builder . ToStringBuilder ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . auth . DataResource ; 
 import org . apache . cassandra . cql3 . ColumnIdentifier ; 
 import org . apache . cassandra . cql3 . QueryProcessor ; 
 import org . apache . cassandra . cql3 . statements . CFStatement ; 
 @ @ - 118 , 6 + 119 , 8 @ @ public final class CFMetaData 
 / / for those tables in practice ) . 
 private volatile ColumnDefinition compactValueColumn ; 
 
 + public final DataResource resource ; 
 + 
 / * 
 * All of these methods will go away once CFMetaData becomes completely immutable . 
 * / 
 @ @ - 288 , 6 + 291 , 7 @ @ public final class CFMetaData 
 this . partitionColumns = partitionColumns ; 
 
 this . serializers = new Serializers ( this ) ; 
 + this . resource = DataResource . table ( ksName , cfName ) ; 
 rebuild ( ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / TimeFcts . java b / src / java / org / apache / cassandra / cql3 / functions / TimeFcts . java 
 index 93d6d3b . . 1b87261 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / TimeFcts . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / TimeFcts . java 
 @ @ - 67 , 7 + 67 , 7 @ @ public abstract class TimeFcts 
 if ( bb = = null ) 
 return null ; 
 
 - return ByteBuffer . wrap ( UUIDGen . decompose ( UUIDGen . minTimeUUID ( TimestampType . instance . compose ( bb ) . getTime ( ) ) ) ) ; 
 + return UUIDGen . toByteBuffer ( UUIDGen . minTimeUUID ( TimestampType . instance . compose ( bb ) . getTime ( ) ) ) ; 
 } 
 } ; 
 
 @ @ - 79 , 7 + 79 , 7 @ @ public abstract class TimeFcts 
 if ( bb = = null ) 
 return null ; 
 
 - return ByteBuffer . wrap ( UUIDGen . decompose ( UUIDGen . maxTimeUUID ( TimestampType . instance . compose ( bb ) . getTime ( ) ) ) ) ; 
 + return UUIDGen . toByteBuffer ( UUIDGen . maxTimeUUID ( TimestampType . instance . compose ( bb ) . getTime ( ) ) ) ; 
 } 
 } ; 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 index 23a26d0 . . 7eefd8e 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 @ @ - 193 , 21 + 193 , 21 @ @ public abstract class ModificationStatement implements CQLStatement 
 
 public void checkAccess ( ClientState state ) throws InvalidRequestException , UnauthorizedException 
 { 
 - state . hasColumnFamilyAccess ( keyspace ( ) , columnFamily ( ) , Permission . MODIFY ) ; 
 + state . hasColumnFamilyAccess ( cfm , Permission . MODIFY ) ; 
 
 / / CAS updates can be used to simulate a SELECT query , so should require Permission . SELECT as well . 
 if ( hasConditions ( ) ) 
 - state . hasColumnFamilyAccess ( keyspace ( ) , columnFamily ( ) , Permission . SELECT ) ; 
 + state . hasColumnFamilyAccess ( cfm , Permission . SELECT ) ; 
 
 / / MV updates need to get the current state from the table , and might update the views 
 / / Require Permission . SELECT on the base table , and Permission . MODIFY on the views 
 Iterator < ViewDefinition > views = View . findAll ( keyspace ( ) , columnFamily ( ) ) . iterator ( ) ; 
 if ( views . hasNext ( ) ) 
 { 
 - state . hasColumnFamilyAccess ( keyspace ( ) , columnFamily ( ) , Permission . SELECT ) ; 
 + state . hasColumnFamilyAccess ( cfm , Permission . SELECT ) ; 
 do 
 { 
 - state . hasColumnFamilyAccess ( keyspace ( ) , views . next ( ) . viewName , Permission . MODIFY ) ; 
 + state . hasColumnFamilyAccess ( views . next ( ) . metadata , Permission . MODIFY ) ; 
 } while ( views . hasNext ( ) ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index 7848556 . . 21bb257 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 178 , 11 + 178 , 11 @ @ public class SelectStatement implements CQLStatement 
 { 
 CFMetaData baseTable = View . findBaseTable ( keyspace ( ) , columnFamily ( ) ) ; 
 if ( baseTable ! = null ) 
 - state . hasColumnFamilyAccess ( keyspace ( ) , baseTable . cfName , Permission . SELECT ) ; 
 + state . hasColumnFamilyAccess ( baseTable , Permission . SELECT ) ; 
 } 
 else 
 { 
 - state . hasColumnFamilyAccess ( keyspace ( ) , columnFamily ( ) , Permission . SELECT ) ; 
 + state . hasColumnFamilyAccess ( cfm , Permission . SELECT ) ; 
 } 
 
 for ( Function function : getFunctions ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / CompositeType . java b / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 index 842cbbf . . 9bd23dd 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 @ @ - 391 , 7 + 391 , 9 @ @ public class CompositeType extends AbstractCompositeType 
 for ( ByteBuffer bb : buffers ) 
 { 
 ByteBufferUtil . writeShortLength ( out , bb . remaining ( ) ) ; 
 - out . put ( bb . duplicate ( ) ) ; 
 + int toCopy = bb . remaining ( ) ; 
 + ByteBufferUtil . arrayCopy ( bb , bb . position ( ) , out , out . position ( ) , toCopy ) ; 
 + out . position ( out . position ( ) + toCopy ) ; 
 out . put ( ( byte ) 0 ) ; 
 } 
 out . flip ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / UUIDType . java b / src / java / org / apache / cassandra / db / marshal / UUIDType . java 
 index acaf27c . . 9722a52 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / UUIDType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / UUIDType . java 
 @ @ - 140 , 7 + 140 , 7 @ @ public class UUIDType extends AbstractType < UUID > 
 { 
 try 
 { 
 - return ByteBuffer . wrap ( UUIDGen . decompose ( UUID . fromString ( source ) ) ) ; 
 + return UUIDGen . toByteBuffer ( UUID . fromString ( source ) ) ; 
 } 
 catch ( IllegalArgumentException e ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / serializers / UUIDSerializer . java b / src / java / org / apache / cassandra / serializers / UUIDSerializer . java 
 index f8e2582 . . 4501f34 100644 
 - - - a / src / java / org / apache / cassandra / serializers / UUIDSerializer . java 
 + + + b / src / java / org / apache / cassandra / serializers / UUIDSerializer . java 
 @ @ - 34 , 7 + 34 , 7 @ @ public class UUIDSerializer implements TypeSerializer < UUID > 
 
 public ByteBuffer serialize ( UUID value ) 
 { 
 - return value = = null ? ByteBufferUtil . EMPTY _ BYTE _ BUFFER : ByteBuffer . wrap ( UUIDGen . decompose ( value ) ) ; 
 + return value = = null ? ByteBufferUtil . EMPTY _ BYTE _ BUFFER : UUIDGen . toByteBuffer ( value ) ; 
 } 
 
 public void validate ( ByteBuffer bytes ) throws MarshalException 
 diff - - git a / src / java / org / apache / cassandra / service / ClientState . java b / src / java / org / apache / cassandra / service / ClientState . java 
 index f2ed984 . . d576ac3 100644 
 - - - a / src / java / org / apache / cassandra / service / ClientState . java 
 + + + b / src / java / org / apache / cassandra / service / ClientState . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . auth . * ; 
 import org . apache . cassandra . config . Config ; 
 + import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . cql3 . QueryHandler ; 
 @ @ - 249 , 6 + 250 , 12 @ @ public class ClientState 
 hasAccess ( keyspace , perm , DataResource . table ( keyspace , columnFamily ) ) ; 
 } 
 
 + public void hasColumnFamilyAccess ( CFMetaData cfm , Permission perm ) 
 + throws UnauthorizedException , InvalidRequestException 
 + { 
 + hasAccess ( cfm . ksName , perm , cfm . resource ) ; 
 + } 
 + 
 private void hasAccess ( String keyspace , Permission perm , DataResource resource ) 
 throws UnauthorizedException , InvalidRequestException 
 { 
 diff - - git a / src / java / org / apache / cassandra / utils / UUIDGen . java b / src / java / org / apache / cassandra / utils / UUIDGen . java 
 index a777a50 . . f046279 100644 
 - - - a / src / java / org / apache / cassandra / utils / UUIDGen . java 
 + + + b / src / java / org / apache / cassandra / utils / UUIDGen . java 
 @ @ - 106 , 6 + 106 , 15 @ @ public class UUIDGen 
 return new UUID ( raw . getLong ( raw . position ( ) ) , raw . getLong ( raw . position ( ) + 8 ) ) ; 
 } 
 
 + public static ByteBuffer toByteBuffer ( UUID uuid ) 
 + { 
 + ByteBuffer buffer = ByteBuffer . allocate ( 16 ) ; 
 + buffer . putLong ( uuid . getMostSignificantBits ( ) ) ; 
 + buffer . putLong ( uuid . getLeastSignificantBits ( ) ) ; 
 + buffer . flip ( ) ; 
 + return buffer ; 
 + } 
 + 
 / * * decomposes a uuid into raw bytes . * / 
 public static byte [ ] decompose ( UUID uuid ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / utils / UUIDTests . java b / test / unit / org / apache / cassandra / utils / UUIDTests . java 
 index 83e421a . . ebe5fd1 100644 
 - - - a / test / unit / org / apache / cassandra / utils / UUIDTests . java 
 + + + b / test / unit / org / apache / cassandra / utils / UUIDTests . java 
 @ @ - 48 , 7 + 48 , 6 @ @ public class UUIDTests 
 assert one . timestamp ( ) < two . timestamp ( ) ; 
 } 
 
 - 
 @ Test 
 public void testDecomposeAndRaw ( ) 
 { 
 @ @ - 59 , 6 + 58 , 15 @ @ public class UUIDTests 
 } 
 
 @ Test 
 + public void testToFromByteBuffer ( ) 
 + { 
 + UUID a = UUIDGen . getTimeUUID ( ) ; 
 + ByteBuffer bb = UUIDGen . toByteBuffer ( a ) ; 
 + UUID b = UUIDGen . getUUID ( bb ) ; 
 + assert a . equals ( b ) ; 
 + } 
 + 
 + @ Test 
 public void testTimeUUIDType ( ) 
 { 
 TimeUUIDType comp = TimeUUIDType . instance ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 466dca6 . . 0621c79 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 16 , 6 + 16 , 7 @ @ 
 * CQL3 refactor to allow conversion function ( CASSANDRA - 5226 ) 
 * Fix drop of sstables in some circumstance ( CASSANDRA - 5232 ) 
 * Implement caching of authorization results ( CASSANDRA - 4295 ) 
 + * Add support for LZ4 compression ( CASSANDRA - 5038 ) 
 
 
 1 . 2 . 1 
 diff - - git a / NOTICE . txt b / NOTICE . txt 
 index 71f38fe . . 9826990 100644 
 - - - a / NOTICE . txt 
 + + + b / NOTICE . txt 
 @ @ - 44 , 3 + 44 , 8 @ @ Written by Nathan G . Bronson et al . 
 CQL Native transport uses Netty 
 ( https : / / netty . io / ) 
 Copyright ( C ) 2011 The Netty Project 
 + 
 + LZ4 compression support provided by lz4 - java ( http : / / github . com / jpountz / lz4 - java ) 
 + Written by Adrien Grand . 
 + Contains bindings to the C LZ4 implementation ( http : / / code . google . com / p / lz4 / ) 
 + Copyright ( C ) 2011 - 2012 , Yann Collet . 
 diff - - git a / build . xml b / build . xml 
 index 421c8f3 . . ea0bbd7 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 329 , 6 + 329 , 7 @ @ 
 < scm connection = " $ { scm . connection } " developerConnection = " $ { scm . developerConnection } " url = " $ { scm . url } " / > 
 < dependencyManagement > 
 < dependency groupId = " org . xerial . snappy " artifactId = " snappy - java " version = " 1 . 0 . 4 . 1 " / > 
 + < dependency groupId = " net . jpountz . lz4 " artifactId = " lz4 " version = " 1 . 1 . 0 " / > 
 < dependency groupId = " com . ning " artifactId = " compress - lzf " version = " 0 . 8 . 4 " / > 
 < dependency groupId = " com . google . guava " artifactId = " guava " version = " 12 . 0 " / > 
 < dependency groupId = " commons - cli " artifactId = " commons - cli " version = " 1 . 1 " / > 
 @ @ - 443 , 6 + 444 , 7 @ @ 
 version = " $ { version } " / > 
 < scm connection = " $ { scm . connection } " developerConnection = " $ { scm . developerConnection } " url = " $ { scm . url } " / > 
 < dependency groupId = " org . xerial . snappy " artifactId = " snappy - java " / > 
 + < dependency groupId = " net . jpountz . lz4 " artifactId = " lz4 " / > 
 < dependency groupId = " com . ning " artifactId = " compress - lzf " / > 
 < dependency groupId = " com . google . guava " artifactId = " guava " / > 
 < dependency groupId = " commons - cli " artifactId = " commons - cli " / > 
 diff - - git a / lib / licenses / lz4 - 1 . 1 . 0 . txt b / lib / licenses / lz4 - 1 . 1 . 0 . txt 
 new file mode 100644 
 index 0000000 . . 7f3ef36 
 - - - / dev / null 
 + + + b / lib / licenses / lz4 - 1 . 1 . 0 . txt 
 @ @ - 0 , 0 + 1 , 235 @ @ 
 + 
 + Apache License 
 + Version 2 . 0 , January 2004 
 + http : / / www . apache . org / licenses / 
 + 
 + TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION 
 + 
 + 1 . Definitions . 
 + 
 + " License " shall mean the terms and conditions for use , reproduction , 
 + and distribution as defined by Sections 1 through 9 of this document . 
 + 
 + " Licensor " shall mean the copyright owner or entity authorized by 
 + the copyright owner that is granting the License . 
 + 
 + " Legal Entity " shall mean the union of the acting entity and all 
 + other entities that control , are controlled by , or are under common 
 + control with that entity . For the purposes of this definition , 
 + " control " means ( i ) the power , direct or indirect , to cause the 
 + direction or management of such entity , whether by contract or 
 + otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the 
 + outstanding shares , or ( iii ) beneficial ownership of such entity . 
 + 
 + " You " ( or " Your " ) shall mean an individual or Legal Entity 
 + exercising permissions granted by this License . 
 + 
 + " Source " form shall mean the preferred form for making modifications , 
 + including but not limited to software source code , documentation 
 + source , and configuration files . 
 + 
 + " Object " form shall mean any form resulting from mechanical 
 + transformation or translation of a Source form , including but 
 + not limited to compiled object code , generated documentation , 
 + and conversions to other media types . 
 + 
 + " Work " shall mean the work of authorship , whether in Source or 
 + Object form , made available under the License , as indicated by a 
 + copyright notice that is included in or attached to the work 
 + ( an example is provided in the Appendix below ) . 
 + 
 + " Derivative Works " shall mean any work , whether in Source or Object 
 + form , that is based on ( or derived from ) the Work and for which the 
 + editorial revisions , annotations , elaborations , or other modifications 
 + represent , as a whole , an original work of authorship . For the purposes 
 + of this License , Derivative Works shall not include works that remain 
 + separable from , or merely link ( or bind by name ) to the interfaces of , 
 + the Work and Derivative Works thereof . 
 + 
 + " Contribution " shall mean any work of authorship , including 
 + the original version of the Work and any modifications or additions 
 + to that Work or Derivative Works thereof , that is intentionally 
 + submitted to Licensor for inclusion in the Work by the copyright owner 
 + or by an individual or Legal Entity authorized to submit on behalf of 
 + the copyright owner . For the purposes of this definition , " submitted " 
 + means any form of electronic , verbal , or written communication sent 
 + to the Licensor or its representatives , including but not limited to 
 + communication on electronic mailing lists , source code control systems , 
 + and issue tracking systems that are managed by , or on behalf of , the 
 + Licensor for the purpose of discussing and improving the Work , but 
 + excluding communication that is conspicuously marked or otherwise 
 + designated in writing by the copyright owner as " Not a Contribution . " 
 + 
 + " Contributor " shall mean Licensor and any individual or Legal Entity 
 + on behalf of whom a Contribution has been received by Licensor and 
 + subsequently incorporated within the Work . 
 + 
 + 2 . Grant of Copyright License . Subject to the terms and conditions of 
 + this License , each Contributor hereby grants to You a perpetual , 
 + worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 + copyright license to reproduce , prepare Derivative Works of , 
 + publicly display , publicly perform , sublicense , and distribute the 
 + Work and such Derivative Works in Source or Object form . 
 + 
 + 3 . Grant of Patent License . Subject to the terms and conditions of 
 + this License , each Contributor hereby grants to You a perpetual , 
 + worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 + ( except as stated in this section ) patent license to make , have made , 
 + use , offer to sell , sell , import , and otherwise transfer the Work , 
 + where such license applies only to those patent claims licensable 
 + by such Contributor that are necessarily infringed by their 
 + Contribution ( s ) alone or by combination of their Contribution ( s ) 
 + with the Work to which such Contribution ( s ) was submitted . If You 
 + institute patent litigation against any entity ( including a 
 + cross - claim or counterclaim in a lawsuit ) alleging that the Work 
 + or a Contribution incorporated within the Work constitutes direct 
 + or contributory patent infringement , then any patent licenses 
 + granted to You under this License for that Work shall terminate 
 + as of the date such litigation is filed . 
 + 
 + 4 . Redistribution . You may reproduce and distribute copies of the 
 + Work or Derivative Works thereof in any medium , with or without 
 + modifications , and in Source or Object form , provided that You 
 + meet the following conditions : 
 + 
 + ( a ) You must give any other recipients of the Work or 
 + Derivative Works a copy of this License ; and 
 + 
 + ( b ) You must cause any modified files to carry prominent notices 
 + stating that You changed the files ; and 
 + 
 + ( c ) You must retain , in the Source form of any Derivative Works 
 + that You distribute , all copyright , patent , trademark , and 
 + attribution notices from the Source form of the Work , 
 + excluding those notices that do not pertain to any part of 
 + the Derivative Works ; and 
 + 
 + ( d ) If the Work includes a " NOTICE " text file as part of its 
 + distribution , then any Derivative Works that You distribute must 
 + include a readable copy of the attribution notices contained 
 + within such NOTICE file , excluding those notices that do not 
 + pertain to any part of the Derivative Works , in at least one 
 + of the following places : within a NOTICE text file distributed 
 + as part of the Derivative Works ; within the Source form or 
 + documentation , if provided along with the Derivative Works ; or , 
 + within a display generated by the Derivative Works , if and 
 + wherever such third - party notices normally appear . The contents 
 + of the NOTICE file are for informational purposes only and 
 + do not modify the License . You may add Your own attribution 
 + notices within Derivative Works that You distribute , alongside 
 + or as an addendum to the NOTICE text from the Work , provided 
 + that such additional attribution notices cannot be construed 
 + as modifying the License . 
 + 
 + You may add Your own copyright statement to Your modifications and 
 + may provide additional or different license terms and conditions 
 + for use , reproduction , or distribution of Your modifications , or 
 + for any such Derivative Works as a whole , provided Your use , 
 + reproduction , and distribution of the Work otherwise complies with 
 + the conditions stated in this License . 
 + 
 + 5 . Submission of Contributions . Unless You explicitly state otherwise , 
 + any Contribution intentionally submitted for inclusion in the Work 
 + by You to the Licensor shall be under the terms and conditions of 
 + this License , without any additional terms or conditions . 
 + Notwithstanding the above , nothing herein shall supersede or modify 
 + the terms of any separate license agreement you may have executed 
 + with Licensor regarding such Contributions . 
 + 
 + 6 . Trademarks . This License does not grant permission to use the trade 
 + names , trademarks , service marks , or product names of the Licensor , 
 + except as required for reasonable and customary use in describing the 
 + origin of the Work and reproducing the content of the NOTICE file . 
 + 
 + 7 . Disclaimer of Warranty . Unless required by applicable law or 
 + agreed to in writing , Licensor provides the Work ( and each 
 + Contributor provides its Contributions ) on an " AS IS " BASIS , 
 + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or 
 + implied , including , without limitation , any warranties or conditions 
 + of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A 
 + PARTICULAR PURPOSE . You are solely responsible for determining the 
 + appropriateness of using or redistributing the Work and assume any 
 + risks associated with Your exercise of permissions under this License . 
 + 
 + 8 . Limitation of Liability . In no event and under no legal theory , 
 + whether in tort ( including negligence ) , contract , or otherwise , 
 + unless required by applicable law ( such as deliberate and grossly 
 + negligent acts ) or agreed to in writing , shall any Contributor be 
 + liable to You for damages , including any direct , indirect , special , 
 + incidental , or consequential damages of any character arising as a 
 + result of this License or out of the use or inability to use the 
 + Work ( including but not limited to damages for loss of goodwill , 
 + work stoppage , computer failure or malfunction , or any and all 
 + other commercial damages or losses ) , even if such Contributor 
 + has been advised of the possibility of such damages . 
 + 
 + 9 . Accepting Warranty or Additional Liability . While redistributing 
 + the Work or Derivative Works thereof , You may choose to offer , 
 + and charge a fee for , acceptance of support , warranty , indemnity , 
 + or other liability obligations and / or rights consistent with this 
 + License . However , in accepting such obligations , You may act only 
 + on Your own behalf and on Your sole responsibility , not on behalf 
 + of any other Contributor , and only if You agree to indemnify , 
 + defend , and hold each Contributor harmless for any liability 
 + incurred by , or claims asserted against , such Contributor by reason 
 + of your accepting any such warranty or additional liability . 
 + 
 + END OF TERMS AND CONDITIONS 
 + 
 + APPENDIX : How to apply the Apache License to your work . 
 + 
 + To apply the Apache License to your work , attach the following 
 + boilerplate notice , with the fields enclosed by brackets " [ ] " 
 + replaced with your own identifying information . ( Don ' t include 
 + the brackets ! ) The text should be enclosed in the appropriate 
 + comment syntax for the file format . We also recommend that a 
 + file or class name and description of purpose be included on the 
 + same " printed page " as the copyright notice for easier 
 + identification within third - party archives . 
 + 
 + Copyright [ yyyy ] [ name of copyright owner ] 
 + 
 + Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + you may not use this file except in compliance with the License . 
 + You may obtain a copy of the License at 
 + 
 + http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + 
 + Unless required by applicable law or agreed to in writing , software 
 + distributed under the License is distributed on an " AS IS " BASIS , 
 + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + See the License for the specific language governing permissions and 
 + limitations under the License . 
 + 
 + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 + 
 + Copyright ( C ) 2011 - 2012 , Yann Collet . 
 + BSD 2 - Clause License ( http : / / www . opensource . org / licenses / bsd - license . php ) 
 + 
 + Redistribution and use in source and binary forms , with or without 
 + modification , are permitted provided that the following conditions are 
 + met : 
 + 
 + * Redistributions of source code must retain the above copyright 
 + notice , this list of conditions and the following disclaimer . 
 + 
 + * Redistributions in binary form must reproduce the above 
 + copyright notice , this list of conditions and the following disclaimer 
 + in the documentation and / or other materials provided with the 
 + distribution . 
 + 
 + THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 + AS IS " AND ANY EXPRESS OR IMPLIED WARRANTIES , INCLUDING , BUT NOT 
 + LIMITED TO , THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
 + A PARTICULAR PURPOSE ARE DISCLAIMED . IN NO EVENT SHALL THE COPYRIGHT 
 + OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT , INDIRECT , INCIDENTAL , 
 + SPECIAL , EXEMPLARY , OR CONSEQUENTIAL DAMAGES ( INCLUDING , BUT NOT 
 + LIMITED TO , PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES ; LOSS OF USE , 
 + DATA , OR PROFITS ; OR BUSINESS INTERRUPTION ) HOWEVER CAUSED AND ON ANY 
 + THEORY OF LIABILITY , WHETHER IN CONTRACT , STRICT LIABILITY , OR TORT 
 + ( INCLUDING NEGLIGENCE OR OTHERWISE ) ARISING IN ANY WAY OUT OF THE USE 
 + OF THIS SOFTWARE , EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE . 
 + 
 + You can contact the author at : 
 + - LZ4 homepage : http : / / fastcompression . blogspot . com / p / lz4 . html 
 + - LZ4 source repository : http : / / code . google . com / p / lz4 / 
 diff - - git a / lib / lz4 - 1 . 1 . 0 . jar b / lib / lz4 - 1 . 1 . 0 . jar 
 new file mode 100644 
 index 0000000 . . fde917a 
 Binary files / dev / null and b / lib / lz4 - 1 . 1 . 0 . jar differ 
 diff - - git a / src / java / org / apache / cassandra / io / compress / LZ4Compressor . java b / src / java / org / apache / cassandra / io / compress / LZ4Compressor . java 
 new file mode 100644 
 index 0000000 . . 0cf36c1 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / io / compress / LZ4Compressor . java 
 @ @ - 0 , 0 + 1 , 104 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . io . compress ; 
 + 
 + import java . io . IOException ; 
 + import java . util . Arrays ; 
 + import java . util . HashSet ; 
 + import java . util . Map ; 
 + import java . util . Set ; 
 + 
 + import net . jpountz . lz4 . LZ4Exception ; 
 + import net . jpountz . lz4 . LZ4Factory ; 
 + 
 + public class LZ4Compressor implements ICompressor 
 + { 
 + 
 + private static final int INTEGER _ BYTES = 4 ; 
 + private static final LZ4Compressor instance = new LZ4Compressor ( ) ; 
 + 
 + public static LZ4Compressor create ( Map < String , String > args ) 
 + { 
 + return instance ; 
 + } 
 + 
 + private final net . jpountz . lz4 . LZ4Compressor compressor ; 
 + private final net . jpountz . lz4 . LZ4Decompressor decompressor ; 
 + 
 + private LZ4Compressor ( ) 
 + { 
 + final LZ4Factory lz4Factory = LZ4Factory . fastestInstance ( ) ; 
 + compressor = lz4Factory . fastCompressor ( ) ; 
 + decompressor = lz4Factory . decompressor ( ) ; 
 + } 
 + 
 + public int initialCompressedBufferLength ( int chunkLength ) 
 + { 
 + return INTEGER _ BYTES + compressor . maxCompressedLength ( chunkLength ) ; 
 + } 
 + 
 + public int compress ( byte [ ] input , int inputOffset , int inputLength , WrappedArray output , int outputOffset ) throws IOException 
 + { 
 + final byte [ ] dest = output . buffer ; 
 + dest [ outputOffset ] = ( byte ) inputLength ; 
 + dest [ outputOffset + 1 ] = ( byte ) ( inputLength > > > 8 ) ; 
 + dest [ outputOffset + 2 ] = ( byte ) ( inputLength > > > 16 ) ; 
 + dest [ outputOffset + 3 ] = ( byte ) ( inputLength > > > 24 ) ; 
 + final int maxCompressedLength = compressor . maxCompressedLength ( inputLength ) ; 
 + try 
 + { 
 + return INTEGER _ BYTES + compressor . compress ( input , inputOffset , inputLength , 
 + dest , outputOffset + INTEGER _ BYTES , maxCompressedLength ) ; 
 + } 
 + catch ( LZ4Exception e ) 
 + { 
 + throw new IOException ( e ) ; 
 + } 
 + } 
 + 
 + public int uncompress ( byte [ ] input , int inputOffset , int inputLength , byte [ ] output , int outputOffset ) throws IOException 
 + { 
 + final int decompressedLength = 
 + ( input [ inputOffset ] & 0xFF ) 
 + | ( ( input [ inputOffset + 1 ] & 0xFF ) < < 8 ) 
 + | ( ( input [ inputOffset + 2 ] & 0xFF ) < < 16 ) 
 + | ( ( input [ inputOffset + 3 ] & 0xFF ) < < 24 ) ; 
 + final int compressedLength ; 
 + try 
 + { 
 + compressedLength = decompressor . decompress ( input , inputOffset + INTEGER _ BYTES , 
 + output , outputOffset , decompressedLength ) ; 
 + } 
 + catch ( LZ4Exception e ) 
 + { 
 + throw new IOException ( e ) ; 
 + } 
 + 
 + if ( compressedLength ! = inputLength - INTEGER _ BYTES ) 
 + { 
 + throw new IOException ( " Compressed lengths mismatch " ) ; 
 + } 
 + 
 + return decompressedLength ; 
 + } 
 + 
 + public Set < String > supportedOptions ( ) 
 + { 
 + return new HashSet < String > ( Arrays . asList ( CompressionParameters . CRC _ CHECK _ CHANCE ) ) ; 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / io / compress / LZ4CompressorTest . java b / test / unit / org / apache / cassandra / io / compress / LZ4CompressorTest . java 
 new file mode 100644 
 index 0000000 . . 56ffdf1 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / io / compress / LZ4CompressorTest . java 
 @ @ - 0 , 0 + 1 , 84 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . io . compress ; 
 + 
 + import java . io . IOException ; 
 + import java . io . UnsupportedEncodingException ; 
 + import java . util . Arrays ; 
 + import java . util . Collections ; 
 + import java . util . Random ; 
 + 
 + import org . apache . cassandra . io . compress . ICompressor . WrappedArray ; 
 + 
 + import org . junit . Before ; 
 + import org . junit . Test ; 
 + 
 + import static org . junit . Assert . * ; 
 + 
 + public class LZ4CompressorTest 
 + { 
 + 
 + LZ4Compressor compressor ; 
 + 
 + @ Before 
 + public void setUp ( ) 
 + { 
 + compressor = LZ4Compressor . create ( Collections . < String , String > emptyMap ( ) ) ; 
 + } 
 + 
 + public void test ( byte [ ] data , int off , int len ) throws IOException 
 + { 
 + final int outOffset = 3 ; 
 + final WrappedArray out = new WrappedArray ( new byte [ outOffset + compressor . initialCompressedBufferLength ( len ) ] ) ; 
 + new Random ( ) . nextBytes ( out . buffer ) ; 
 + final int compressedLength = compressor . compress ( data , off , len , out , outOffset ) ; 
 + final int restoredOffset = 5 ; 
 + final byte [ ] restored = new byte [ restoredOffset + len ] ; 
 + new Random ( ) . nextBytes ( restored ) ; 
 + final int decompressedLength = compressor . uncompress ( out . buffer , outOffset , compressedLength , restored , restoredOffset ) ; 
 + assertEquals ( decompressedLength , len ) ; 
 + assertArrayEquals ( Arrays . copyOfRange ( data , off , off + len ) , 
 + Arrays . copyOfRange ( restored , restoredOffset , restoredOffset + decompressedLength ) ) ; 
 + } 
 + 
 + public void test ( byte [ ] data ) throws IOException 
 + { 
 + test ( data , 0 , data . length ) ; 
 + } 
 + 
 + @ Test 
 + public void testEmptyArray ( ) throws IOException 
 + { 
 + test ( new byte [ 0 ] ) ; 
 + } 
 + 
 + @ Test 
 + public void testShortArray ( ) throws UnsupportedEncodingException , IOException 
 + { 
 + test ( " Cassandra " . getBytes ( " UTF - 8 " ) , 1 , 7 ) ; 
 + } 
 + 
 + @ Test 
 + public void testLongArray ( ) throws UnsupportedEncodingException , IOException 
 + { 
 + byte [ ] data = new byte [ 1 < < 20 ] ; 
 + test ( data , 13 , 1 < < 19 ) ; 
 + new Random ( 0 ) . nextBytes ( data ) ; 
 + test ( data , 13 , 1 < < 19 ) ; 
 + } 
 + }
