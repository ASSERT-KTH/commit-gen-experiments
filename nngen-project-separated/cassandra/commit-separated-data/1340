BLEU SCORE: 0.08745825313180632

TEST MSG: Fix handling of streaming EOF
GENERATED MSG: Fix buffer underflow on socket close

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 7841f9b . . 681a40b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 10 <nl> + * Fix handling of streaming EOF ( CASSANDRA - 10206 ) <nl> * Only check KeyCache when it is enabled <nl> * Change streaming _ socket _ timeout _ in _ ms default to 1 hour ( CASSANDRA - 8611 ) <nl> * ( cqlsh ) update list of CQL keywords ( CASSANDRA - 9232 ) <nl> diff - - git a / src / java / org / apache / cassandra / streaming / messages / StreamMessage . java b / src / java / org / apache / cassandra / streaming / messages / StreamMessage . java <nl> index 360b59e . . 9724bf1 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / messages / StreamMessage . java <nl> + + + b / src / java / org / apache / cassandra / streaming / messages / StreamMessage . java <nl> @ @ - 18 , 9 + 18 , 9 @ @ <nl> package org . apache . cassandra . streaming . messages ; <nl> <nl> import java . io . IOException ; <nl> + import java . net . SocketException ; <nl> import java . nio . ByteBuffer ; <nl> import java . nio . channels . ReadableByteChannel ; <nl> - import java . nio . channels . WritableByteChannel ; <nl> <nl> import org . apache . cassandra . io . util . DataOutputStreamAndChannel ; <nl> import org . apache . cassandra . streaming . StreamSession ; <nl> @ @ - 48 , 18 + 48 , 23 @ @ public abstract class StreamMessage <nl> public static StreamMessage deserialize ( ReadableByteChannel in , int version , StreamSession session ) throws IOException <nl> { <nl> ByteBuffer buff = ByteBuffer . allocate ( 1 ) ; <nl> - if ( in . read ( buff ) > 0 ) <nl> + int readBytes = in . read ( buff ) ; <nl> + if ( readBytes > 0 ) <nl> { <nl> buff . flip ( ) ; <nl> Type type = Type . get ( buff . get ( ) ) ; <nl> return type . inSerializer . deserialize ( in , version , session ) ; <nl> } <nl> - else <nl> + else if ( readBytes = = 0 ) <nl> { <nl> - / / when socket gets closed , there is a chance that buff is empty <nl> - / / in that case , just return null <nl> + / / input socket buffer was not filled yet <nl> return null ; <nl> } <nl> + else <nl> + { <nl> + / / possibly socket gets closed <nl> + throw new SocketException ( " End - of - stream reached " ) ; <nl> + } <nl> } <nl> <nl> / * * StreamMessage serializer * /
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index a809bc6 . . da1ec20 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 5 , 6 + 5 , 7 @ @ <nl> * update default LCS sstable size to 160MB ( CASSANDRA - 5727 ) <nl> * Allow compacting 2Is via nodetool ( CASSANDRA - 5670 ) <nl> * Hex - encode non - String keys in OPP ( CASSANDRA - 5793 ) <nl> + * nodetool history logging ( CASSANDRA - 5823 ) <nl> <nl> <nl> 1 . 2 . 8 <nl> diff - - git a / bin / cqlsh b / bin / cqlsh <nl> index 59aac0d . . f0db1b3 100755 <nl> - - - a / bin / cqlsh <nl> + + + b / bin / cqlsh <nl> @ @ - 118 , 8 + 118 , 19 @ @ from cqlshlib . formatting import format _ by _ type <nl> from cqlshlib . util import trim _ if _ present <nl> from cqlshlib . tracing import print _ trace _ session <nl> <nl> - CONFIG _ FILE = os . path . expanduser ( os . path . join ( ' ~ ' , ' . cqlshrc ' ) ) <nl> - HISTORY = os . path . expanduser ( os . path . join ( ' ~ ' , ' . cqlsh _ history ' ) ) <nl> + HISTORY _ DIR = os . path . expanduser ( os . path . join ( ' ~ ' , ' . cassandra ' ) ) <nl> + CONFIG _ FILE = os . path . join ( HISTORY _ DIR , ' cqlshrc ' ) <nl> + HISTORY = os . path . join ( HISTORY _ DIR , ' cqlsh _ history ' ) <nl> + if not os . path . exists ( HISTORY _ DIR ) : <nl> + os . mkdir ( HISTORY _ DIR ) <nl> + <nl> + OLD _ CONFIG _ FILE = os . path . expanduser ( os . path . join ( ' ~ ' , ' . cqlshrc ' ) ) <nl> + if os . path . exists ( OLD _ CONFIG _ FILE ) : <nl> + os . rename ( OLD _ CONFIG _ FILE , CONFIG _ FILE ) <nl> + OLD _ HISTORY = os . path . expanduser ( os . path . join ( ' ~ ' , ' . cqlsh _ history ' ) ) <nl> + if os . path . exists ( OLD _ HISTORY ) : <nl> + os . rename ( OLD _ HISTORY , HISTORY ) <nl> + <nl> DEFAULT _ HOST = ' localhost ' <nl> DEFAULT _ PORT = 9160 <nl> DEFAULT _ CQLVER = ' 3 ' <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java <nl> index 6857aea . . 2229207 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliClient . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliClient . java <nl> @ @ - 3032 , 6 + 3032 , 7 @ @ public class CliClient <nl> <nl> class CfAssumptions <nl> { <nl> + private static final String ASSUMPTIONS _ FILENAME = " assumptions . json " ; <nl> / / Map < KeySpace , Map < ColumnFamily , Map < Property , Value > > > <nl> private Map < String , Map < String , Map < String , String > > > assumptions ; <nl> private boolean assumptionsChanged ; <nl> @ @ - 3041 , 8 + 3042 , 16 @ @ public class CliClient <nl> { <nl> assumptions = new HashMap < String , Map < String , Map < String , String > > > ( ) ; <nl> assumptionsChanged = false ; <nl> - assumptionDirectory = new File ( System . getProperty ( " user . home " ) , " . cassandra - cli " ) ; <nl> - assumptionDirectory . mkdirs ( ) ; <nl> + assumptionDirectory = FBUtilities . getToolsOutputDirectory ( ) ; <nl> + <nl> + File oldAssumptionDir = new File ( System . getProperty ( " user . home " ) + File . separator + " . cassandra - cli " ) ; <nl> + if ( oldAssumptionDir . exists ( ) ) <nl> + { <nl> + File oldAssumptionFile = new File ( oldAssumptionDir , ASSUMPTIONS _ FILENAME ) ; <nl> + if ( oldAssumptionFile . exists ( ) ) <nl> + FileUtils . renameWithConfirm ( oldAssumptionFile , new File ( assumptionDirectory , ASSUMPTIONS _ FILENAME ) ) ; <nl> + FileUtils . deleteRecursive ( oldAssumptionDir ) ; <nl> + } <nl> } <nl> <nl> public void addAssumption ( String keyspace , String columnFamily , String property , String value ) <nl> @ @ - 3088 , 7 + 3097 , 7 @ @ public class CliClient <nl> <nl> private void readAssumptions ( ) <nl> { <nl> - File assumptionFile = new File ( assumptionDirectory , " assumptions . json " ) ; <nl> + File assumptionFile = new File ( assumptionDirectory , ASSUMPTIONS _ FILENAME ) ; <nl> if ( assumptionFile . isFile ( ) ) <nl> { <nl> try <nl> @ @ - 3152 , 7 + 3161 , 7 @ @ public class CliClient <nl> { <nl> if ( assumptionsChanged ) <nl> { <nl> - File assumptionFile = new File ( assumptionDirectory , " assumptions . json " ) ; <nl> + File assumptionFile = new File ( assumptionDirectory , ASSUMPTIONS _ FILENAME ) ; <nl> try <nl> { <nl> JsonFactory f = new JsonFactory ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliMain . java b / src / java / org / apache / cassandra / cli / CliMain . java <nl> index 547f642 . . 8c110c2 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliMain . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliMain . java <nl> @ @ - 27 , 7 + 27 , 9 @ @ import java . util . * ; <nl> import jline . ConsoleReader ; <nl> import jline . History ; <nl> import org . apache . cassandra . auth . IAuthenticator ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . thrift . * ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . thrift . TException ; <nl> import org . apache . thrift . protocol . TBinaryProtocol ; <nl> import org . apache . thrift . transport . TSocket ; <nl> @ @ - 38 , 7 + 40 , 8 @ @ import org . apache . thrift . transport . TTransport ; <nl> * / <nl> public class CliMain <nl> { <nl> - public final static String HISTORYFILE = " . cassandra . history " ; <nl> + public final static String OLD _ HISTORYFILE = " . cassandra . history " ; <nl> + public final static String HISTORYFILE = " cli . history " ; <nl> <nl> private static TTransport transport = null ; <nl> private static Cassandra . Client thriftClient = null ; <nl> @ @ - 283 , 17 + 286 , 16 @ @ public class CliMain <nl> { <nl> reader . addCompletor ( completer ) ; <nl> reader . setBellEnabled ( false ) ; <nl> - <nl> - String historyFile = System . getProperty ( " user . home " ) + File . separator + HISTORYFILE ; <nl> + File historyFile = handleHistoryFiles ( ) ; <nl> <nl> try <nl> { <nl> - History history = new History ( new File ( historyFile ) ) ; <nl> + History history = new History ( historyFile ) ; <nl> reader . setHistory ( history ) ; <nl> } <nl> catch ( IOException exp ) <nl> { <nl> - sessionState . err . printf ( " Unable to open % s for writing % n " , historyFile ) ; <nl> + sessionState . err . printf ( " Unable to open % s for writing " , historyFile . getAbsolutePath ( ) ) ; <nl> } <nl> } <nl> else if ( ! sessionState . verbose ) / / if in batch mode but no verbose flag <nl> @ @ - 346 , 6 + 348 , 17 @ @ public class CliMain <nl> } <nl> } <nl> <nl> + private static File handleHistoryFiles ( ) <nl> + { <nl> + File outputDir = FBUtilities . getToolsOutputDirectory ( ) ; <nl> + File historyFile = new File ( outputDir , HISTORYFILE ) ; <nl> + File oldHistoryFile = new File ( System . getProperty ( " user . home " ) , OLD _ HISTORYFILE ) ; <nl> + if ( oldHistoryFile . exists ( ) ) <nl> + FileUtils . renameWithConfirm ( oldHistoryFile , historyFile ) ; <nl> + <nl> + return historyFile ; <nl> + } <nl> + <nl> private static void evaluateFileStatements ( BufferedReader reader ) throws IOException <nl> { <nl> String line = " " ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> index 0bedd4e . . f6d4310 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> @ @ - 17 , 20 + 17 , 21 @ @ <nl> * / <nl> package org . apache . cassandra . tools ; <nl> <nl> - import java . io . IOException ; <nl> - import java . io . InputStream ; <nl> - import java . io . PrintStream ; <nl> + import java . io . * ; <nl> import java . lang . management . MemoryUsage ; <nl> import java . net . ConnectException ; <nl> import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> import java . text . DecimalFormat ; <nl> + import java . text . SimpleDateFormat ; <nl> import java . util . * ; <nl> import java . util . Map . Entry ; <nl> import java . util . concurrent . ExecutionException ; <nl> <nl> + import com . google . common . base . Joiner ; <nl> import com . google . common . collect . LinkedHashMultimap ; <nl> import com . google . common . collect . Maps ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . commons . cli . * ; <nl> import org . yaml . snakeyaml . Loader ; <nl> import org . yaml . snakeyaml . TypeDescription ; <nl> @ @ - 55 , 6 + 56 , 7 @ @ import org . apache . cassandra . utils . Pair ; <nl> <nl> public class NodeCmd <nl> { <nl> + private static final String HISTORYFILE = " nodetool . history " ; <nl> private static final Pair < String , String > SNAPSHOT _ COLUMNFAMILY _ OPT = Pair . create ( " cf " , " column - family " ) ; <nl> private static final Pair < String , String > HOST _ OPT = Pair . create ( " h " , " host " ) ; <nl> private static final Pair < String , String > PORT _ OPT = Pair . create ( " p " , " port " ) ; <nl> @ @ - 1072 , 6 + 1074 , 8 @ @ public class NodeCmd <nl> } <nl> try <nl> { <nl> + / / print history here after we ' ve already determined we can reasonably call cassandra <nl> + printHistory ( args , cmd ) ; <nl> NodeCommand command = null ; <nl> <nl> try <nl> @ @ - 1083 , 7 + 1087 , 6 @ @ public class NodeCmd <nl> badUse ( e . getMessage ( ) ) ; <nl> } <nl> <nl> - <nl> NodeCmd nodeCmd = new NodeCmd ( probe ) ; <nl> <nl> / / Execute the requested command . <nl> @ @ - 1330 , 6 + 1333 , 34 @ @ public class NodeCmd <nl> System . exit ( probe . isFailed ( ) ? 1 : 0 ) ; <nl> } <nl> <nl> + private static void printHistory ( String [ ] args , ToolCommandLine cmd ) <nl> + { <nl> + / / don ' t bother to print if no args passed ( meaning , nodetool is just printing out the sub - commands list ) <nl> + if ( args . length = = 0 ) <nl> + return ; <nl> + String cmdLine = Joiner . on ( " " ) . skipNulls ( ) . join ( args ) ; <nl> + final String password = cmd . getOptionValue ( PASSWORD _ OPT . left ) ; <nl> + if ( password ! = null ) <nl> + cmdLine = cmdLine . replace ( password , " < hidden > " ) ; <nl> + <nl> + FileWriter writer = null ; <nl> + try <nl> + { <nl> + final String outputDir = FBUtilities . getToolsOutputDirectory ( ) . getCanonicalPath ( ) ; <nl> + writer = new FileWriter ( new File ( outputDir , HISTORYFILE ) , true ) ; <nl> + SimpleDateFormat sdf = new SimpleDateFormat ( " yyyy - MM - dd HH : mm : ss , SSS " ) ; <nl> + writer . append ( sdf . format ( new Date ( ) ) + " : " + cmdLine + " \ n " ) ; <nl> + } <nl> + catch ( IOException ioe ) <nl> + { <nl> + / / quietly ignore any errors about not being able to write out history <nl> + } <nl> + finally <nl> + { <nl> + FileUtils . closeQuietly ( writer ) ; <nl> + } <nl> + } <nl> + <nl> private static Throwable findInnermostThrowable ( Throwable ex ) <nl> { <nl> Throwable inner = ex . getCause ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> index 679e3df . . 2c9a505 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> @ @ - 37 , 6 + 37 , 7 @ @ import java . util . concurrent . TimeoutException ; <nl> <nl> import com . google . common . base . Joiner ; <nl> import com . google . common . collect . AbstractIterator ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . commons . lang . StringUtils ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 619 , 4 + 620 , 11 @ @ public class FBUtilities <nl> buffer . getData ( ) . length , buffer . getLength ( ) , size , object ) ; <nl> return buffer . getData ( ) ; <nl> } <nl> + <nl> + public static File getToolsOutputDirectory ( ) <nl> + { <nl> + File historyDir = new File ( System . getProperty ( " user . home " ) , " . cassandra " ) ; <nl> + FileUtils . createDirectory ( historyDir ) ; <nl> + return historyDir ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 7841f9b . . 681a40b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 10 
 + * Fix handling of streaming EOF ( CASSANDRA - 10206 ) 
 * Only check KeyCache when it is enabled 
 * Change streaming _ socket _ timeout _ in _ ms default to 1 hour ( CASSANDRA - 8611 ) 
 * ( cqlsh ) update list of CQL keywords ( CASSANDRA - 9232 ) 
 diff - - git a / src / java / org / apache / cassandra / streaming / messages / StreamMessage . java b / src / java / org / apache / cassandra / streaming / messages / StreamMessage . java 
 index 360b59e . . 9724bf1 100644 
 - - - a / src / java / org / apache / cassandra / streaming / messages / StreamMessage . java 
 + + + b / src / java / org / apache / cassandra / streaming / messages / StreamMessage . java 
 @ @ - 18 , 9 + 18 , 9 @ @ 
 package org . apache . cassandra . streaming . messages ; 
 
 import java . io . IOException ; 
 + import java . net . SocketException ; 
 import java . nio . ByteBuffer ; 
 import java . nio . channels . ReadableByteChannel ; 
 - import java . nio . channels . WritableByteChannel ; 
 
 import org . apache . cassandra . io . util . DataOutputStreamAndChannel ; 
 import org . apache . cassandra . streaming . StreamSession ; 
 @ @ - 48 , 18 + 48 , 23 @ @ public abstract class StreamMessage 
 public static StreamMessage deserialize ( ReadableByteChannel in , int version , StreamSession session ) throws IOException 
 { 
 ByteBuffer buff = ByteBuffer . allocate ( 1 ) ; 
 - if ( in . read ( buff ) > 0 ) 
 + int readBytes = in . read ( buff ) ; 
 + if ( readBytes > 0 ) 
 { 
 buff . flip ( ) ; 
 Type type = Type . get ( buff . get ( ) ) ; 
 return type . inSerializer . deserialize ( in , version , session ) ; 
 } 
 - else 
 + else if ( readBytes = = 0 ) 
 { 
 - / / when socket gets closed , there is a chance that buff is empty 
 - / / in that case , just return null 
 + / / input socket buffer was not filled yet 
 return null ; 
 } 
 + else 
 + { 
 + / / possibly socket gets closed 
 + throw new SocketException ( " End - of - stream reached " ) ; 
 + } 
 } 
 
 / * * StreamMessage serializer * /

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index a809bc6 . . da1ec20 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 5 , 6 + 5 , 7 @ @ 
 * update default LCS sstable size to 160MB ( CASSANDRA - 5727 ) 
 * Allow compacting 2Is via nodetool ( CASSANDRA - 5670 ) 
 * Hex - encode non - String keys in OPP ( CASSANDRA - 5793 ) 
 + * nodetool history logging ( CASSANDRA - 5823 ) 
 
 
 1 . 2 . 8 
 diff - - git a / bin / cqlsh b / bin / cqlsh 
 index 59aac0d . . f0db1b3 100755 
 - - - a / bin / cqlsh 
 + + + b / bin / cqlsh 
 @ @ - 118 , 8 + 118 , 19 @ @ from cqlshlib . formatting import format _ by _ type 
 from cqlshlib . util import trim _ if _ present 
 from cqlshlib . tracing import print _ trace _ session 
 
 - CONFIG _ FILE = os . path . expanduser ( os . path . join ( ' ~ ' , ' . cqlshrc ' ) ) 
 - HISTORY = os . path . expanduser ( os . path . join ( ' ~ ' , ' . cqlsh _ history ' ) ) 
 + HISTORY _ DIR = os . path . expanduser ( os . path . join ( ' ~ ' , ' . cassandra ' ) ) 
 + CONFIG _ FILE = os . path . join ( HISTORY _ DIR , ' cqlshrc ' ) 
 + HISTORY = os . path . join ( HISTORY _ DIR , ' cqlsh _ history ' ) 
 + if not os . path . exists ( HISTORY _ DIR ) : 
 + os . mkdir ( HISTORY _ DIR ) 
 + 
 + OLD _ CONFIG _ FILE = os . path . expanduser ( os . path . join ( ' ~ ' , ' . cqlshrc ' ) ) 
 + if os . path . exists ( OLD _ CONFIG _ FILE ) : 
 + os . rename ( OLD _ CONFIG _ FILE , CONFIG _ FILE ) 
 + OLD _ HISTORY = os . path . expanduser ( os . path . join ( ' ~ ' , ' . cqlsh _ history ' ) ) 
 + if os . path . exists ( OLD _ HISTORY ) : 
 + os . rename ( OLD _ HISTORY , HISTORY ) 
 + 
 DEFAULT _ HOST = ' localhost ' 
 DEFAULT _ PORT = 9160 
 DEFAULT _ CQLVER = ' 3 ' 
 diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java 
 index 6857aea . . 2229207 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliClient . java 
 + + + b / src / java / org / apache / cassandra / cli / CliClient . java 
 @ @ - 3032 , 6 + 3032 , 7 @ @ public class CliClient 
 
 class CfAssumptions 
 { 
 + private static final String ASSUMPTIONS _ FILENAME = " assumptions . json " ; 
 / / Map < KeySpace , Map < ColumnFamily , Map < Property , Value > > > 
 private Map < String , Map < String , Map < String , String > > > assumptions ; 
 private boolean assumptionsChanged ; 
 @ @ - 3041 , 8 + 3042 , 16 @ @ public class CliClient 
 { 
 assumptions = new HashMap < String , Map < String , Map < String , String > > > ( ) ; 
 assumptionsChanged = false ; 
 - assumptionDirectory = new File ( System . getProperty ( " user . home " ) , " . cassandra - cli " ) ; 
 - assumptionDirectory . mkdirs ( ) ; 
 + assumptionDirectory = FBUtilities . getToolsOutputDirectory ( ) ; 
 + 
 + File oldAssumptionDir = new File ( System . getProperty ( " user . home " ) + File . separator + " . cassandra - cli " ) ; 
 + if ( oldAssumptionDir . exists ( ) ) 
 + { 
 + File oldAssumptionFile = new File ( oldAssumptionDir , ASSUMPTIONS _ FILENAME ) ; 
 + if ( oldAssumptionFile . exists ( ) ) 
 + FileUtils . renameWithConfirm ( oldAssumptionFile , new File ( assumptionDirectory , ASSUMPTIONS _ FILENAME ) ) ; 
 + FileUtils . deleteRecursive ( oldAssumptionDir ) ; 
 + } 
 } 
 
 public void addAssumption ( String keyspace , String columnFamily , String property , String value ) 
 @ @ - 3088 , 7 + 3097 , 7 @ @ public class CliClient 
 
 private void readAssumptions ( ) 
 { 
 - File assumptionFile = new File ( assumptionDirectory , " assumptions . json " ) ; 
 + File assumptionFile = new File ( assumptionDirectory , ASSUMPTIONS _ FILENAME ) ; 
 if ( assumptionFile . isFile ( ) ) 
 { 
 try 
 @ @ - 3152 , 7 + 3161 , 7 @ @ public class CliClient 
 { 
 if ( assumptionsChanged ) 
 { 
 - File assumptionFile = new File ( assumptionDirectory , " assumptions . json " ) ; 
 + File assumptionFile = new File ( assumptionDirectory , ASSUMPTIONS _ FILENAME ) ; 
 try 
 { 
 JsonFactory f = new JsonFactory ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / cli / CliMain . java b / src / java / org / apache / cassandra / cli / CliMain . java 
 index 547f642 . . 8c110c2 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliMain . java 
 + + + b / src / java / org / apache / cassandra / cli / CliMain . java 
 @ @ - 27 , 7 + 27 , 9 @ @ import java . util . * ; 
 import jline . ConsoleReader ; 
 import jline . History ; 
 import org . apache . cassandra . auth . IAuthenticator ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . thrift . * ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . thrift . TException ; 
 import org . apache . thrift . protocol . TBinaryProtocol ; 
 import org . apache . thrift . transport . TSocket ; 
 @ @ - 38 , 7 + 40 , 8 @ @ import org . apache . thrift . transport . TTransport ; 
 * / 
 public class CliMain 
 { 
 - public final static String HISTORYFILE = " . cassandra . history " ; 
 + public final static String OLD _ HISTORYFILE = " . cassandra . history " ; 
 + public final static String HISTORYFILE = " cli . history " ; 
 
 private static TTransport transport = null ; 
 private static Cassandra . Client thriftClient = null ; 
 @ @ - 283 , 17 + 286 , 16 @ @ public class CliMain 
 { 
 reader . addCompletor ( completer ) ; 
 reader . setBellEnabled ( false ) ; 
 - 
 - String historyFile = System . getProperty ( " user . home " ) + File . separator + HISTORYFILE ; 
 + File historyFile = handleHistoryFiles ( ) ; 
 
 try 
 { 
 - History history = new History ( new File ( historyFile ) ) ; 
 + History history = new History ( historyFile ) ; 
 reader . setHistory ( history ) ; 
 } 
 catch ( IOException exp ) 
 { 
 - sessionState . err . printf ( " Unable to open % s for writing % n " , historyFile ) ; 
 + sessionState . err . printf ( " Unable to open % s for writing " , historyFile . getAbsolutePath ( ) ) ; 
 } 
 } 
 else if ( ! sessionState . verbose ) / / if in batch mode but no verbose flag 
 @ @ - 346 , 6 + 348 , 17 @ @ public class CliMain 
 } 
 } 
 
 + private static File handleHistoryFiles ( ) 
 + { 
 + File outputDir = FBUtilities . getToolsOutputDirectory ( ) ; 
 + File historyFile = new File ( outputDir , HISTORYFILE ) ; 
 + File oldHistoryFile = new File ( System . getProperty ( " user . home " ) , OLD _ HISTORYFILE ) ; 
 + if ( oldHistoryFile . exists ( ) ) 
 + FileUtils . renameWithConfirm ( oldHistoryFile , historyFile ) ; 
 + 
 + return historyFile ; 
 + } 
 + 
 private static void evaluateFileStatements ( BufferedReader reader ) throws IOException 
 { 
 String line = " " ; 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 index 0bedd4e . . f6d4310 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 @ @ - 17 , 20 + 17 , 21 @ @ 
 * / 
 package org . apache . cassandra . tools ; 
 
 - import java . io . IOException ; 
 - import java . io . InputStream ; 
 - import java . io . PrintStream ; 
 + import java . io . * ; 
 import java . lang . management . MemoryUsage ; 
 import java . net . ConnectException ; 
 import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 import java . text . DecimalFormat ; 
 + import java . text . SimpleDateFormat ; 
 import java . util . * ; 
 import java . util . Map . Entry ; 
 import java . util . concurrent . ExecutionException ; 
 
 + import com . google . common . base . Joiner ; 
 import com . google . common . collect . LinkedHashMultimap ; 
 import com . google . common . collect . Maps ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . commons . cli . * ; 
 import org . yaml . snakeyaml . Loader ; 
 import org . yaml . snakeyaml . TypeDescription ; 
 @ @ - 55 , 6 + 56 , 7 @ @ import org . apache . cassandra . utils . Pair ; 
 
 public class NodeCmd 
 { 
 + private static final String HISTORYFILE = " nodetool . history " ; 
 private static final Pair < String , String > SNAPSHOT _ COLUMNFAMILY _ OPT = Pair . create ( " cf " , " column - family " ) ; 
 private static final Pair < String , String > HOST _ OPT = Pair . create ( " h " , " host " ) ; 
 private static final Pair < String , String > PORT _ OPT = Pair . create ( " p " , " port " ) ; 
 @ @ - 1072 , 6 + 1074 , 8 @ @ public class NodeCmd 
 } 
 try 
 { 
 + / / print history here after we ' ve already determined we can reasonably call cassandra 
 + printHistory ( args , cmd ) ; 
 NodeCommand command = null ; 
 
 try 
 @ @ - 1083 , 7 + 1087 , 6 @ @ public class NodeCmd 
 badUse ( e . getMessage ( ) ) ; 
 } 
 
 - 
 NodeCmd nodeCmd = new NodeCmd ( probe ) ; 
 
 / / Execute the requested command . 
 @ @ - 1330 , 6 + 1333 , 34 @ @ public class NodeCmd 
 System . exit ( probe . isFailed ( ) ? 1 : 0 ) ; 
 } 
 
 + private static void printHistory ( String [ ] args , ToolCommandLine cmd ) 
 + { 
 + / / don ' t bother to print if no args passed ( meaning , nodetool is just printing out the sub - commands list ) 
 + if ( args . length = = 0 ) 
 + return ; 
 + String cmdLine = Joiner . on ( " " ) . skipNulls ( ) . join ( args ) ; 
 + final String password = cmd . getOptionValue ( PASSWORD _ OPT . left ) ; 
 + if ( password ! = null ) 
 + cmdLine = cmdLine . replace ( password , " < hidden > " ) ; 
 + 
 + FileWriter writer = null ; 
 + try 
 + { 
 + final String outputDir = FBUtilities . getToolsOutputDirectory ( ) . getCanonicalPath ( ) ; 
 + writer = new FileWriter ( new File ( outputDir , HISTORYFILE ) , true ) ; 
 + SimpleDateFormat sdf = new SimpleDateFormat ( " yyyy - MM - dd HH : mm : ss , SSS " ) ; 
 + writer . append ( sdf . format ( new Date ( ) ) + " : " + cmdLine + " \ n " ) ; 
 + } 
 + catch ( IOException ioe ) 
 + { 
 + / / quietly ignore any errors about not being able to write out history 
 + } 
 + finally 
 + { 
 + FileUtils . closeQuietly ( writer ) ; 
 + } 
 + } 
 + 
 private static Throwable findInnermostThrowable ( Throwable ex ) 
 { 
 Throwable inner = ex . getCause ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 index 679e3df . . 2c9a505 100644 
 - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java 
 + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 @ @ - 37 , 6 + 37 , 7 @ @ import java . util . concurrent . TimeoutException ; 
 
 import com . google . common . base . Joiner ; 
 import com . google . common . collect . AbstractIterator ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . commons . lang . StringUtils ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 619 , 4 + 620 , 11 @ @ public class FBUtilities 
 buffer . getData ( ) . length , buffer . getLength ( ) , size , object ) ; 
 return buffer . getData ( ) ; 
 } 
 + 
 + public static File getToolsOutputDirectory ( ) 
 + { 
 + File historyDir = new File ( System . getProperty ( " user . home " ) , " . cassandra " ) ; 
 + FileUtils . createDirectory ( historyDir ) ; 
 + return historyDir ; 
 + } 
 }
