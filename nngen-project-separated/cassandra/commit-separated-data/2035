BLEU SCORE: 1.0

TEST MSG: Pig : Remove errant LIMIT clause in CqlNativeStorage
GENERATED MSG: Pig : Remove errant LIMIT clause in CqlNativeStorage

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 4ed7bed . . 6c2be8c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 3 + 1 , 7 @ @ <nl> + 2 . 0 . 12 : <nl> + * Pig : Remove errant LIMIT clause in CqlNativeStorage ( CASSANDRA - 8166 ) <nl> + <nl> + <nl> 2 . 0 . 11 : <nl> * Reject conditions on DELETE unless full PK is given ( CASSANDRA - 6430 ) <nl> * Properly reject the token function DELETE ( CASSANDRA - 7747 ) <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordReader . java b / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordReader . java <nl> index 3eab7c0 . . df06e8e 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordReader . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordReader . java <nl> @ @ - 86 , 7 + 86 , 6 @ @ public class CqlRecordReader extends RecordReader < Long , Row > <nl> private IPartitioner partitioner ; <nl> private String inputColumns ; <nl> private String userDefinedWhereClauses ; <nl> - private int pageRowSize ; <nl> <nl> private List < String > partitionKeys = new ArrayList < > ( ) ; <nl> <nl> @ @ - 111 , 14 + 110 , 7 @ @ public class CqlRecordReader extends RecordReader < Long , Row > <nl> inputColumns = CqlConfigHelper . getInputcolumns ( conf ) ; <nl> userDefinedWhereClauses = CqlConfigHelper . getInputWhereClauses ( conf ) ; <nl> Optional < Integer > pageRowSizeOptional = CqlConfigHelper . getInputPageRowSize ( conf ) ; <nl> - try <nl> - { <nl> - pageRowSize = pageRowSizeOptional . isPresent ( ) ? pageRowSizeOptional . get ( ) : DEFAULT _ CQL _ PAGE _ LIMIT ; <nl> - } <nl> - catch ( NumberFormatException e ) <nl> - { <nl> - pageRowSize = DEFAULT _ CQL _ PAGE _ LIMIT ; <nl> - } <nl> + <nl> try <nl> { <nl> if ( cluster ! = null ) <nl> @ @ - 143 , 7 + 135 , 6 @ @ public class CqlRecordReader extends RecordReader < Long , Row > <nl> / / otherwise we will fall back to building a query using the : <nl> / / inputColumns <nl> / / whereClauses <nl> - / / pageRowSize <nl> cqlQuery = CqlConfigHelper . getInputCql ( conf ) ; <nl> / / validate that the user hasn ' t tried to give us a custom query along with input columns <nl> / / and where clauses <nl> @ @ - 519 , 8 + 510 , 7 @ @ public class CqlRecordReader extends RecordReader < Long , Row > <nl> / * * <nl> * Build a query for the reader of the form : <nl> * <nl> - * SELECT * FROM ks > cf token ( pk1 , . . . pkn ) > ? AND token ( pk1 , . . . pkn ) < = ? [ AND user where clauses ] <nl> - * LIMIT pageRowSize [ ALLOW FILTERING ] <nl> + * SELECT * FROM ks > cf token ( pk1 , . . . pkn ) > ? AND token ( pk1 , . . . pkn ) < = ? [ AND user where clauses ] [ ALLOW FILTERING ] <nl> * / <nl> private String buildQuery ( ) <nl> { <nl> @ @ - 539 , 7 + 529 , 6 @ @ public class CqlRecordReader extends RecordReader < Long , Row > <nl> String whereClause = " " ; <nl> if ( StringUtils . isNotEmpty ( userDefinedWhereClauses ) ) <nl> whereClause + = " AND " + userDefinedWhereClauses ; <nl> - whereClause + = " LIMIT " + pageRowSize ; <nl> if ( StringUtils . isNotEmpty ( userDefinedWhereClauses ) ) <nl> whereClause + = " ALLOW FILTERING " ; <nl> return whereClause ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 4ed7bed . . 6c2be8c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 3 + 1 , 7 @ @ 
 + 2 . 0 . 12 : 
 + * Pig : Remove errant LIMIT clause in CqlNativeStorage ( CASSANDRA - 8166 ) 
 + 
 + 
 2 . 0 . 11 : 
 * Reject conditions on DELETE unless full PK is given ( CASSANDRA - 6430 ) 
 * Properly reject the token function DELETE ( CASSANDRA - 7747 ) 
 diff - - git a / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordReader . java b / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordReader . java 
 index 3eab7c0 . . df06e8e 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordReader . java 
 + + + b / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordReader . java 
 @ @ - 86 , 7 + 86 , 6 @ @ public class CqlRecordReader extends RecordReader < Long , Row > 
 private IPartitioner partitioner ; 
 private String inputColumns ; 
 private String userDefinedWhereClauses ; 
 - private int pageRowSize ; 
 
 private List < String > partitionKeys = new ArrayList < > ( ) ; 
 
 @ @ - 111 , 14 + 110 , 7 @ @ public class CqlRecordReader extends RecordReader < Long , Row > 
 inputColumns = CqlConfigHelper . getInputcolumns ( conf ) ; 
 userDefinedWhereClauses = CqlConfigHelper . getInputWhereClauses ( conf ) ; 
 Optional < Integer > pageRowSizeOptional = CqlConfigHelper . getInputPageRowSize ( conf ) ; 
 - try 
 - { 
 - pageRowSize = pageRowSizeOptional . isPresent ( ) ? pageRowSizeOptional . get ( ) : DEFAULT _ CQL _ PAGE _ LIMIT ; 
 - } 
 - catch ( NumberFormatException e ) 
 - { 
 - pageRowSize = DEFAULT _ CQL _ PAGE _ LIMIT ; 
 - } 
 + 
 try 
 { 
 if ( cluster ! = null ) 
 @ @ - 143 , 7 + 135 , 6 @ @ public class CqlRecordReader extends RecordReader < Long , Row > 
 / / otherwise we will fall back to building a query using the : 
 / / inputColumns 
 / / whereClauses 
 - / / pageRowSize 
 cqlQuery = CqlConfigHelper . getInputCql ( conf ) ; 
 / / validate that the user hasn ' t tried to give us a custom query along with input columns 
 / / and where clauses 
 @ @ - 519 , 8 + 510 , 7 @ @ public class CqlRecordReader extends RecordReader < Long , Row > 
 / * * 
 * Build a query for the reader of the form : 
 * 
 - * SELECT * FROM ks > cf token ( pk1 , . . . pkn ) > ? AND token ( pk1 , . . . pkn ) < = ? [ AND user where clauses ] 
 - * LIMIT pageRowSize [ ALLOW FILTERING ] 
 + * SELECT * FROM ks > cf token ( pk1 , . . . pkn ) > ? AND token ( pk1 , . . . pkn ) < = ? [ AND user where clauses ] [ ALLOW FILTERING ] 
 * / 
 private String buildQuery ( ) 
 { 
 @ @ - 539 , 7 + 529 , 6 @ @ public class CqlRecordReader extends RecordReader < Long , Row > 
 String whereClause = " " ; 
 if ( StringUtils . isNotEmpty ( userDefinedWhereClauses ) ) 
 whereClause + = " AND " + userDefinedWhereClauses ; 
 - whereClause + = " LIMIT " + pageRowSize ; 
 if ( StringUtils . isNotEmpty ( userDefinedWhereClauses ) ) 
 whereClause + = " ALLOW FILTERING " ; 
 return whereClause ;

NEAREST DIFF:
ELIMINATEDSENTENCE
