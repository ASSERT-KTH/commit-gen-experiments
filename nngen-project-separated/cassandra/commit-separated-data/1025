BLEU SCORE: 7.517195964887862E-4

TEST MSG: Encrypted hints
GENERATED MSG: Bulk loader is no longer a fat client , hadoop bulk loader output format .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 04ce8d7 . . 551d147 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 4 <nl> + * Encrypted hints ( CASSANDRA - 11040 ) <nl> * SASI index options validation ( CASSANDRA - 11136 ) <nl> * Optimize disk seek using min / max column name meta data when the LIMIT clause is used <nl> ( CASSANDRA - 8180 ) <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index a9749f2 . . d6bcace 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 942 , 31 + 942 , 29 @ @ enable _ scripted _ user _ defined _ functions : false <nl> windows _ timer _ interval : 1 <nl> <nl> <nl> - # Enables encrypting data at - rest ( on disk ) . Currently , AES / CBC / PKCS5Padding is the only supported <nl> - # encyption algorithm . Different key providers can be plugged in , but the default reads from <nl> + # Enables encrypting data at - rest ( on disk ) . Different key providers can be plugged in , but the default reads from <nl> # a JCE - style keystore . A single keystore can hold multiple keys , but the one referenced by <nl> # the " key _ alias " is the only key that will be used for encrypt opertaions ; previously used keys <nl> # can still ( and should ! ) be in the keystore and will be used on decrypt operations <nl> # ( to handle the case of key rotation ) . <nl> # <nl> - # In order to make use of transparent data encryption , you must download and install the <nl> - # Java Cryptography Extension ( JCE ) Unlimited Strength Jurisdiction Policy Files <nl> - # for your version of the JDK . <nl> + # It is strongly recommended to download and install Java Cryptography Extension ( JCE ) <nl> + # Unlimited Strength Jurisdiction Policy Files for your version of the JDK . <nl> # ( current link : http : / / www . oracle . com / technetwork / java / javase / downloads / jce8 - download - 2133166 . html ) <nl> # <nl> # Currently , only the following file types are supported for transparent data encryption , although <nl> - # more are coming in future cassandra releases : commitlog <nl> + # more are coming in future cassandra releases : commitlog , hints <nl> transparent _ data _ encryption _ options : <nl> enabled : false <nl> chunk _ length _ kb : 64 <nl> cipher : AES / CBC / PKCS5Padding <nl> key _ alias : testing : 1 <nl> - # CBC requires iv length to be 16 bytes <nl> + # CBC IV length for AES needs to be 16 bytes ( which is also the default size ) <nl> # iv _ length : 16 <nl> key _ provider : <nl> - class _ name : org . apache . cassandra . security . JKSKeyProvider <nl> parameters : <nl> - - keystore : test / conf / cassandra . keystore <nl> + - keystore : conf / . keystore <nl> keystore _ password : cassandra <nl> store _ type : JCEKS <nl> key _ password : cassandra <nl> diff - - git a / src / java / org / apache / cassandra / hints / CompressedChecksummedDataInput . java b / src / java / org / apache / cassandra / hints / CompressedChecksummedDataInput . java <nl> index 1009b57 . . bbf1fdb 100644 <nl> - - - a / src / java / org / apache / cassandra / hints / CompressedChecksummedDataInput . java <nl> + + + b / src / java / org / apache / cassandra / hints / CompressedChecksummedDataInput . java <nl> @ @ - 21 , 6 + 21 , 8 @ @ package org . apache . cassandra . hints ; <nl> import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> + <nl> import org . apache . cassandra . io . FSReadError ; <nl> import org . apache . cassandra . io . compress . ICompressor ; <nl> import org . apache . cassandra . io . util . ChannelProxy ; <nl> @ @ - 33 , 7 + 35 , 7 @ @ public final class CompressedChecksummedDataInput extends ChecksummedDataInput <nl> private volatile ByteBuffer compressedBuffer = null ; <nl> private final ByteBuffer metadataBuffer = ByteBuffer . allocate ( CompressedHintsWriter . METADATA _ SIZE ) ; <nl> <nl> - public CompressedChecksummedDataInput ( Builder builder ) <nl> + public CompressedChecksummedDataInput ( CompressedChecksummedDataInputBuilder builder ) <nl> { <nl> super ( builder ) ; <nl> assert regions = = null ; / / mmapped regions are not supported <nl> @ @ - 113 , 46 + 115 , 20 @ @ public final class CompressedChecksummedDataInput extends ChecksummedDataInput <nl> throw new UnsupportedOperationException ( ) ; <nl> } <nl> <nl> - public static final class Builder extends ChecksummedDataInput . Builder <nl> - { <nl> - private long position ; <nl> - private ICompressor compressor ; <nl> - <nl> - public Builder ( ChannelProxy channel ) <nl> - { <nl> - super ( channel ) ; <nl> - bufferType = null ; <nl> - } <nl> - <nl> - public CompressedChecksummedDataInput build ( ) <nl> - { <nl> - assert position > = 0 ; <nl> - assert compressor ! = null ; <nl> - return new CompressedChecksummedDataInput ( this ) ; <nl> - } <nl> - <nl> - public Builder withCompressor ( ICompressor compressor ) <nl> - { <nl> - this . compressor = compressor ; <nl> - bufferType = compressor . preferredBufferType ( ) ; <nl> - return this ; <nl> - } <nl> - <nl> - public Builder withPosition ( long position ) <nl> - { <nl> - this . position = position ; <nl> - return this ; <nl> - } <nl> - } <nl> - <nl> - public static final CompressedChecksummedDataInput upgradeInput ( ChecksummedDataInput input , ICompressor compressor ) <nl> + public static ChecksummedDataInput upgradeInput ( ChecksummedDataInput input , ICompressor compressor ) <nl> { <nl> long position = input . getPosition ( ) ; <nl> input . close ( ) ; <nl> <nl> - Builder builder = new Builder ( new ChannelProxy ( input . getPath ( ) ) ) ; <nl> + CompressedChecksummedDataInputBuilder builder = new CompressedChecksummedDataInputBuilder ( new ChannelProxy ( input . getPath ( ) ) ) ; <nl> builder . withPosition ( position ) ; <nl> builder . withCompressor ( compressor ) ; <nl> return builder . build ( ) ; <nl> } <nl> + <nl> + @ VisibleForTesting <nl> + ICompressor getCompressor ( ) <nl> + { <nl> + return compressor ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / hints / CompressedChecksummedDataInputBuilder . java b / src / java / org / apache / cassandra / hints / CompressedChecksummedDataInputBuilder . java <nl> new file mode 100644 <nl> index 0000000 . . 3452df8 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / hints / CompressedChecksummedDataInputBuilder . java <nl> @ @ - 0 , 0 + 1 , 36 @ @ <nl> + package org . apache . cassandra . hints ; <nl> + <nl> + import org . apache . cassandra . io . compress . ICompressor ; <nl> + import org . apache . cassandra . io . util . ChannelProxy ; <nl> + <nl> + public class CompressedChecksummedDataInputBuilder extends ChecksummedDataInput . Builder <nl> + { <nl> + long position ; <nl> + ICompressor compressor ; <nl> + <nl> + public CompressedChecksummedDataInputBuilder ( ChannelProxy channel ) <nl> + { <nl> + super ( channel ) ; <nl> + bufferType = null ; <nl> + } <nl> + <nl> + public ChecksummedDataInput build ( ) <nl> + { <nl> + assert position > = 0 ; <nl> + assert compressor ! = null ; <nl> + return new CompressedChecksummedDataInput ( this ) ; <nl> + } <nl> + <nl> + public CompressedChecksummedDataInputBuilder withCompressor ( ICompressor compressor ) <nl> + { <nl> + this . compressor = compressor ; <nl> + bufferType = compressor . preferredBufferType ( ) ; <nl> + return this ; <nl> + } <nl> + <nl> + public CompressedChecksummedDataInputBuilder withPosition ( long position ) <nl> + { <nl> + this . position = position ; <nl> + return this ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / hints / CompressedHintsWriter . java b / src / java / org / apache / cassandra / hints / CompressedHintsWriter . java <nl> index 491dceb . . 8792e32 100644 <nl> - - - a / src / java / org / apache / cassandra / hints / CompressedHintsWriter . java <nl> + + + b / src / java / org / apache / cassandra / hints / CompressedHintsWriter . java <nl> @ @ - 24 , 6 + 24 , 8 @ @ import java . nio . ByteBuffer ; <nl> import java . nio . channels . FileChannel ; <nl> import java . util . zip . CRC32 ; <nl> <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> + <nl> import org . apache . cassandra . io . compress . ICompressor ; <nl> <nl> public class CompressedHintsWriter extends HintsWriter <nl> @ @ - 64 , 4 + 66 , 10 @ @ public class CompressedHintsWriter extends HintsWriter <nl> compressionBuffer . limit ( compressedSize + METADATA _ SIZE ) ; <nl> super . writeBuffer ( compressionBuffer ) ; <nl> } <nl> + <nl> + @ VisibleForTesting <nl> + ICompressor getCompressor ( ) <nl> + { <nl> + return compressor ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / hints / EncryptedChecksummedDataInput . java b / src / java / org / apache / cassandra / hints / EncryptedChecksummedDataInput . java <nl> new file mode 100644 <nl> index 0000000 . . 12b6bf2 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / hints / EncryptedChecksummedDataInput . java <nl> @ @ - 0 , 0 + 1 , 129 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . hints ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . nio . ByteBuffer ; <nl> + import javax . crypto . Cipher ; <nl> + <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> + <nl> + import org . apache . cassandra . security . EncryptionUtils ; <nl> + import org . apache . cassandra . io . FSReadError ; <nl> + import org . apache . cassandra . io . compress . ICompressor ; <nl> + import org . apache . cassandra . io . util . ChannelProxy ; <nl> + <nl> + public class EncryptedChecksummedDataInput extends ChecksummedDataInput <nl> + { <nl> + private static final ThreadLocal < ByteBuffer > reusableBuffers = new ThreadLocal < ByteBuffer > ( ) <nl> + { <nl> + protected ByteBuffer initialValue ( ) <nl> + { <nl> + return ByteBuffer . allocate ( 0 ) ; <nl> + } <nl> + } ; <nl> + <nl> + private final Cipher cipher ; <nl> + private final ICompressor compressor ; <nl> + <nl> + private final EncryptionUtils . ChannelProxyReadChannel readChannel ; <nl> + <nl> + protected EncryptedChecksummedDataInput ( Builder builder ) <nl> + { <nl> + super ( builder ) ; <nl> + cipher = builder . cipher ; <nl> + compressor = builder . compressor ; <nl> + readChannel = new EncryptionUtils . ChannelProxyReadChannel ( channel , builder . position ) ; <nl> + assert cipher ! = null ; <nl> + assert compressor ! = null ; <nl> + } <nl> + <nl> + / * * <nl> + * Since an entire block of compressed data is read off of disk , not just a hint at a time , <nl> + * we don ' t report EOF until the decompressed data has also been read completely <nl> + * / <nl> + public boolean isEOF ( ) <nl> + { <nl> + return readChannel . getCurrentPosition ( ) = = channel . size ( ) & & buffer . remaining ( ) = = 0 ; <nl> + } <nl> + <nl> + protected void reBufferStandard ( ) <nl> + { <nl> + try <nl> + { <nl> + ByteBuffer byteBuffer = reusableBuffers . get ( ) ; <nl> + ByteBuffer decrypted = EncryptionUtils . decrypt ( readChannel , byteBuffer , true , cipher ) ; <nl> + buffer = EncryptionUtils . uncompress ( decrypted , buffer , true , compressor ) ; <nl> + <nl> + if ( decrypted . capacity ( ) > byteBuffer . capacity ( ) ) <nl> + reusableBuffers . set ( decrypted ) ; <nl> + } <nl> + catch ( IOException ioe ) <nl> + { <nl> + throw new FSReadError ( ioe , getPath ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + public static class Builder extends CompressedChecksummedDataInputBuilder <nl> + { <nl> + Cipher cipher ; <nl> + <nl> + public Builder ( ChannelProxy channel ) <nl> + { <nl> + super ( channel ) ; <nl> + } <nl> + <nl> + public Builder withCipher ( Cipher cipher ) <nl> + { <nl> + this . cipher = cipher ; <nl> + return this ; <nl> + } <nl> + <nl> + public ChecksummedDataInput build ( ) <nl> + { <nl> + assert position > = 0 ; <nl> + assert compressor ! = null ; <nl> + assert cipher ! = null ; <nl> + return new EncryptedChecksummedDataInput ( this ) ; <nl> + } <nl> + } <nl> + <nl> + public static ChecksummedDataInput upgradeInput ( ChecksummedDataInput input , Cipher cipher , ICompressor compressor ) <nl> + { <nl> + long position = input . getPosition ( ) ; <nl> + input . close ( ) ; <nl> + <nl> + Builder builder = new Builder ( new ChannelProxy ( input . getPath ( ) ) ) ; <nl> + builder . withPosition ( position ) ; <nl> + builder . withCompressor ( compressor ) ; <nl> + builder . withCipher ( cipher ) ; <nl> + return builder . build ( ) ; <nl> + } <nl> + <nl> + @ VisibleForTesting <nl> + Cipher getCipher ( ) <nl> + { <nl> + return cipher ; <nl> + } <nl> + <nl> + @ VisibleForTesting <nl> + ICompressor getCompressor ( ) <nl> + { <nl> + return compressor ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / hints / EncryptedHintsWriter . java b / src / java / org / apache / cassandra / hints / EncryptedHintsWriter . java <nl> new file mode 100644 <nl> index 0000000 . . 4786d9c <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / hints / EncryptedHintsWriter . java <nl> @ @ - 0 , 0 + 1 , 65 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . hints ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . nio . ByteBuffer ; <nl> + import java . nio . channels . FileChannel ; <nl> + import java . util . zip . CRC32 ; <nl> + import javax . crypto . Cipher ; <nl> + <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> + <nl> + import org . apache . cassandra . security . EncryptionUtils ; <nl> + import org . apache . cassandra . io . compress . ICompressor ; <nl> + <nl> + import static org . apache . cassandra . utils . FBUtilities . updateChecksum ; <nl> + <nl> + public class EncryptedHintsWriter extends HintsWriter <nl> + { <nl> + private final Cipher cipher ; <nl> + private final ICompressor compressor ; <nl> + private volatile ByteBuffer byteBuffer ; <nl> + <nl> + protected EncryptedHintsWriter ( File directory , HintsDescriptor descriptor , File file , FileChannel channel , int fd , CRC32 globalCRC ) <nl> + { <nl> + super ( directory , descriptor , file , channel , fd , globalCRC ) ; <nl> + cipher = descriptor . getCipher ( ) ; <nl> + compressor = descriptor . createCompressor ( ) ; <nl> + } <nl> + <nl> + protected void writeBuffer ( ByteBuffer input ) throws IOException <nl> + { <nl> + byteBuffer = EncryptionUtils . compress ( input , byteBuffer , true , compressor ) ; <nl> + ByteBuffer output = EncryptionUtils . encryptAndWrite ( byteBuffer , channel , true , cipher ) ; <nl> + updateChecksum ( globalCRC , output ) ; <nl> + } <nl> + <nl> + @ VisibleForTesting <nl> + Cipher getCipher ( ) <nl> + { <nl> + return cipher ; <nl> + } <nl> + <nl> + @ VisibleForTesting <nl> + ICompressor getCompressor ( ) <nl> + { <nl> + return compressor ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / hints / HintsDescriptor . java b / src / java / org / apache / cassandra / hints / HintsDescriptor . java <nl> index f5296b3 . . 8a3ee8b 100644 <nl> - - - a / src / java / org / apache / cassandra / hints / HintsDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / hints / HintsDescriptor . java <nl> @ @ - 22 , 15 + 22 , 20 @ @ import java . io . IOException ; <nl> import java . io . RandomAccessFile ; <nl> import java . nio . charset . StandardCharsets ; <nl> import java . nio . file . Path ; <nl> + import java . util . HashMap ; <nl> import java . util . Map ; <nl> import java . util . UUID ; <nl> import java . util . regex . Pattern ; <nl> import java . util . zip . CRC32 ; <nl> + import javax . crypto . Cipher ; <nl> <nl> import com . google . common . base . MoreObjects ; <nl> import com . google . common . base . Objects ; <nl> import com . google . common . collect . ImmutableMap ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . ParameterizedClass ; <nl> import org . apache . cassandra . db . TypeSizes ; <nl> import org . apache . cassandra . io . FSReadError ; <nl> @ @ - 38 , 6 + 43 , 8 @ @ import org . apache . cassandra . io . compress . ICompressor ; <nl> import org . apache . cassandra . io . util . DataOutputPlus ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . schema . CompressionParams ; <nl> + import org . apache . cassandra . security . EncryptionContext ; <nl> + import org . apache . cassandra . utils . Hex ; <nl> import org . json . simple . JSONValue ; <nl> <nl> import static org . apache . cassandra . utils . FBUtilities . updateChecksumInt ; <nl> @ @ - 50 , 10 + 57 , 13 @ @ import static org . apache . cassandra . utils . FBUtilities . updateChecksumInt ; <nl> * / <nl> final class HintsDescriptor <nl> { <nl> + private static final Logger logger = LoggerFactory . getLogger ( HintsDescriptor . class ) ; <nl> + <nl> static final int VERSION _ 30 = 1 ; <nl> static final int CURRENT _ VERSION = VERSION _ 30 ; <nl> <nl> static final String COMPRESSION = " compression " ; <nl> + static final String ENCRYPTION = " encryption " ; <nl> <nl> static final Pattern pattern = <nl> Pattern . compile ( " ^ [ a - fA - F0 - 9 ] { 8 } \ \ - [ a - fA - F0 - 9 ] { 4 } \ \ - [ a - fA - F0 - 9 ] { 4 } \ \ - [ a - fA - F0 - 9 ] { 4 } \ \ - [ a - fA - F0 - 9 ] { 12 } \ \ - ( \ \ d + ) \ \ - ( \ \ d + ) \ \ . hints $ " ) ; <nl> @ @ - 62 , 17 + 72 , 35 @ @ final class HintsDescriptor <nl> final int version ; <nl> final long timestamp ; <nl> <nl> - / / implemented for future compression support - see CASSANDRA - 9428 <nl> final ImmutableMap < String , Object > parameters ; <nl> final ParameterizedClass compressionConfig ; <nl> <nl> + private final Cipher cipher ; <nl> + private final ICompressor compressor ; <nl> + <nl> HintsDescriptor ( UUID hostId , int version , long timestamp , ImmutableMap < String , Object > parameters ) <nl> { <nl> this . hostId = hostId ; <nl> this . version = version ; <nl> this . timestamp = timestamp ; <nl> - this . parameters = parameters ; <nl> compressionConfig = createCompressionConfig ( parameters ) ; <nl> + <nl> + EncryptionData encryption = createEncryption ( parameters ) ; <nl> + if ( encryption = = null ) <nl> + { <nl> + cipher = null ; <nl> + compressor = null ; <nl> + } <nl> + else <nl> + { <nl> + if ( compressionConfig ! = null ) <nl> + throw new IllegalStateException ( " a hints file cannot be configured for both compression and encryption " ) ; <nl> + cipher = encryption . cipher ; <nl> + compressor = encryption . compressor ; <nl> + parameters = encryption . params ; <nl> + } <nl> + <nl> + this . parameters = parameters ; <nl> } <nl> <nl> HintsDescriptor ( UUID hostId , long timestamp , ImmutableMap < String , Object > parameters ) <nl> @ @ - 100 , 6 + 128 , 71 @ @ final class HintsDescriptor <nl> } <nl> } <nl> <nl> + / * * <nl> + * Create , if necessary , the required encryption components ( for either decrpyt or encrypt operations ) . <nl> + * Note that in the case of encyption ( this is , when writing out a new hints file ) , we need to write <nl> + * the cipher ' s IV out to the header so it can be used when decrypting . Thus , we need to add an additional <nl> + * entry to the { @ code params } map . <nl> + * <nl> + * @ param params the base parameters into the descriptor . <nl> + * @ return null if not using encryption ; else , the initialized { @ link Cipher } and a possibly updated version <nl> + * of the { @ code params } map . <nl> + * / <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + static EncryptionData createEncryption ( ImmutableMap < String , Object > params ) <nl> + { <nl> + if ( params . containsKey ( ENCRYPTION ) ) <nl> + { <nl> + Map < ? , ? > encryptionConfig = ( Map < ? , ? > ) params . get ( ENCRYPTION ) ; <nl> + EncryptionContext encryptionContext = EncryptionContext . createFromMap ( encryptionConfig , DatabaseDescriptor . getEncryptionContext ( ) ) ; <nl> + <nl> + try <nl> + { <nl> + Cipher cipher ; <nl> + if ( encryptionConfig . containsKey ( EncryptionContext . ENCRYPTION _ IV ) ) <nl> + { <nl> + cipher = encryptionContext . getDecryptor ( ) ; <nl> + } <nl> + else <nl> + { <nl> + cipher = encryptionContext . getEncryptor ( ) ; <nl> + ImmutableMap < String , Object > encParams = ImmutableMap . < String , Object > builder ( ) <nl> + . putAll ( encryptionContext . toHeaderParameters ( ) ) <nl> + . put ( EncryptionContext . ENCRYPTION _ IV , Hex . bytesToHex ( cipher . getIV ( ) ) ) <nl> + . build ( ) ; <nl> + <nl> + Map < String , Object > map = new HashMap < > ( params ) ; <nl> + map . put ( ENCRYPTION , encParams ) ; <nl> + params = ImmutableMap . < String , Object > builder ( ) . putAll ( map ) . build ( ) ; <nl> + } <nl> + return new EncryptionData ( cipher , encryptionContext . getCompressor ( ) , params ) ; <nl> + } <nl> + catch ( IOException ioe ) <nl> + { <nl> + logger . warn ( " failed to create encyption context for hints file . ignoring encryption for hints . " , ioe ) ; <nl> + return null ; <nl> + } <nl> + } <nl> + else <nl> + { <nl> + return null ; <nl> + } <nl> + } <nl> + <nl> + private static final class EncryptionData <nl> + { <nl> + final Cipher cipher ; <nl> + final ICompressor compressor ; <nl> + final ImmutableMap < String , Object > params ; <nl> + <nl> + private EncryptionData ( Cipher cipher , ICompressor compressor , ImmutableMap < String , Object > params ) <nl> + { <nl> + this . cipher = cipher ; <nl> + this . compressor = compressor ; <nl> + this . params = params ; <nl> + } <nl> + } <nl> + <nl> String fileName ( ) <nl> { <nl> return String . format ( " % s - % s - % s . hints " , hostId , timestamp , version ) ; <nl> @ @ - 148 , 9 + 241 , 23 @ @ final class HintsDescriptor <nl> return compressionConfig ! = null ; <nl> } <nl> <nl> + public boolean isEncrypted ( ) <nl> + { <nl> + return cipher ! = null ; <nl> + } <nl> + <nl> public ICompressor createCompressor ( ) <nl> { <nl> - return isCompressed ( ) ? CompressionParams . createCompressor ( compressionConfig ) : null ; <nl> + if ( isCompressed ( ) ) <nl> + return CompressionParams . createCompressor ( compressionConfig ) ; <nl> + if ( isEncrypted ( ) ) <nl> + return compressor ; <nl> + return null ; <nl> + } <nl> + <nl> + public Cipher getCipher ( ) <nl> + { <nl> + return isEncrypted ( ) ? cipher : null ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / hints / HintsReader . java b / src / java / org / apache / cassandra / hints / HintsReader . java <nl> index fe2b57a . . 0571af4 100644 <nl> - - - a / src / java / org / apache / cassandra / hints / HintsReader . java <nl> + + + b / src / java / org / apache / cassandra / hints / HintsReader . java <nl> @ @ - 83 , 6 + 83 , 8 @ @ class HintsReader implements AutoCloseable , Iterable < HintsReader . Page > <nl> / / The compressed input is instantiated with the uncompressed input ' s position <nl> reader = CompressedChecksummedDataInput . upgradeInput ( reader , descriptor . createCompressor ( ) ) ; <nl> } <nl> + else if ( descriptor . isEncrypted ( ) ) <nl> + reader = EncryptedChecksummedDataInput . upgradeInput ( reader , descriptor . getCipher ( ) , descriptor . createCompressor ( ) ) ; <nl> return new HintsReader ( descriptor , file , reader , rateLimiter ) ; <nl> } <nl> catch ( IOException e ) <nl> diff - - git a / src / java / org / apache / cassandra / hints / HintsWriter . java b / src / java / org / apache / cassandra / hints / HintsWriter . java <nl> index 8836258 . . b4da379 100644 <nl> - - - a / src / java / org / apache / cassandra / hints / HintsWriter . java <nl> + + + b / src / java / org / apache / cassandra / hints / HintsWriter . java <nl> @ @ - 33 , 7 + 33 , 6 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . io . FSWriteError ; <nl> import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> import org . apache . cassandra . io . util . DataOutputBufferFixed ; <nl> - import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . utils . CLibrary ; <nl> import org . apache . cassandra . utils . SyncUtil ; <nl> import org . apache . cassandra . utils . Throwables ; <nl> @ @ - 49 , 9 + 48 , 9 @ @ class HintsWriter implements AutoCloseable <nl> private final File directory ; <nl> private final HintsDescriptor descriptor ; <nl> private final File file ; <nl> - private final FileChannel channel ; <nl> + protected final FileChannel channel ; <nl> private final int fd ; <nl> - private final CRC32 globalCRC ; <nl> + protected final CRC32 globalCRC ; <nl> <nl> private volatile long lastSyncPosition = 0L ; <nl> <nl> @ @ - 89 , 14 + 88 , 11 @ @ class HintsWriter implements AutoCloseable <nl> throw e ; <nl> } <nl> <nl> + if ( descriptor . isEncrypted ( ) ) <nl> + return new EncryptedHintsWriter ( directory , descriptor , file , channel , fd , crc ) ; <nl> if ( descriptor . isCompressed ( ) ) <nl> - { <nl> return new CompressedHintsWriter ( directory , descriptor , file , channel , fd , crc ) ; <nl> - } <nl> - else <nl> - { <nl> - return new HintsWriter ( directory , descriptor , file , channel , fd , crc ) ; <nl> - } <nl> + return new HintsWriter ( directory , descriptor , file , channel , fd , crc ) ; <nl> } <nl> <nl> HintsDescriptor descriptor ( ) <nl> diff - - git a / src / java / org / apache / cassandra / security / EncryptionUtils . java b / src / java / org / apache / cassandra / security / EncryptionUtils . java <nl> index f95977e . . 7e72b3e 100644 <nl> - - - a / src / java / org / apache / cassandra / security / EncryptionUtils . java <nl> + + + b / src / java / org / apache / cassandra / security / EncryptionUtils . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import com . google . common . base . Preconditions ; <nl> <nl> import org . apache . cassandra . db . commitlog . EncryptedSegment ; <nl> import org . apache . cassandra . io . compress . ICompressor ; <nl> + import org . apache . cassandra . io . util . ChannelProxy ; <nl> import org . apache . cassandra . io . util . FileDataInput ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> @ @ - 274 , 4 + 275 , 39 @ @ public class EncryptionUtils <nl> / / nop <nl> } <nl> } <nl> + <nl> + public static class ChannelProxyReadChannel implements ReadableByteChannel <nl> + { <nl> + private final ChannelProxy channelProxy ; <nl> + private volatile long currentPosition ; <nl> + <nl> + public ChannelProxyReadChannel ( ChannelProxy channelProxy , long currentPosition ) <nl> + { <nl> + this . channelProxy = channelProxy ; <nl> + this . currentPosition = currentPosition ; <nl> + } <nl> + <nl> + public int read ( ByteBuffer dst ) throws IOException <nl> + { <nl> + int bytesRead = channelProxy . read ( dst , currentPosition ) ; <nl> + dst . flip ( ) ; <nl> + currentPosition + = bytesRead ; <nl> + return bytesRead ; <nl> + } <nl> + <nl> + public long getCurrentPosition ( ) <nl> + { <nl> + return currentPosition ; <nl> + } <nl> + <nl> + public boolean isOpen ( ) <nl> + { <nl> + return channelProxy . isCleanedUp ( ) ; <nl> + } <nl> + <nl> + public void close ( ) <nl> + { <nl> + / / nop <nl> + } <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / hints / AlteredHints . java b / test / unit / org / apache / cassandra / hints / AlteredHints . java <nl> new file mode 100644 <nl> index 0000000 . . 23dc32a <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / hints / AlteredHints . java <nl> @ @ - 0 , 0 + 1 , 129 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . hints ; <nl> + <nl> + import java . io . File ; <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Iterator ; <nl> + import java . util . LinkedList ; <nl> + import java . util . List ; <nl> + import java . util . UUID ; <nl> + import java . util . concurrent . TimeUnit ; <nl> + <nl> + import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . io . Files ; <nl> + import org . junit . Assert ; <nl> + import org . junit . BeforeClass ; <nl> + <nl> + import org . apache . cassandra . SchemaLoader ; <nl> + import org . apache . cassandra . config . CFMetaData ; <nl> + import org . apache . cassandra . config . Schema ; <nl> + import org . apache . cassandra . db . Mutation ; <nl> + import org . apache . cassandra . db . RowUpdateBuilder ; <nl> + import org . apache . cassandra . schema . KeyspaceParams ; <nl> + import org . apache . cassandra . utils . UUIDGen ; <nl> + <nl> + import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; <nl> + <nl> + / * * <nl> + * Base class for testing compressed and encrypted hints . <nl> + * / <nl> + public abstract class AlteredHints <nl> + { <nl> + protected static final String KEYSPACE = " hints _ compression _ test " ; <nl> + private static final String TABLE = " table " ; <nl> + <nl> + private static Mutation createMutation ( int index , long timestamp ) <nl> + { <nl> + CFMetaData table = Schema . instance . getCFMetaData ( KEYSPACE , TABLE ) ; <nl> + return new RowUpdateBuilder ( table , timestamp , bytes ( index ) ) <nl> + . clustering ( bytes ( index ) ) <nl> + . add ( " val " , bytes ( index ) ) <nl> + . build ( ) ; <nl> + } <nl> + <nl> + private static Hint createHint ( int idx , long baseTimestamp ) <nl> + { <nl> + long timestamp = baseTimestamp + idx ; <nl> + return Hint . create ( createMutation ( idx , TimeUnit . MILLISECONDS . toMicros ( timestamp ) ) , timestamp ) ; <nl> + } <nl> + <nl> + @ BeforeClass <nl> + public static void defineSchema ( ) <nl> + { <nl> + SchemaLoader . prepareServer ( ) ; <nl> + SchemaLoader . createKeyspace ( KEYSPACE , KeyspaceParams . simple ( 1 ) , SchemaLoader . standardCFMD ( KEYSPACE , TABLE ) ) ; <nl> + } <nl> + <nl> + abstract ImmutableMap < String , Object > params ( ) ; <nl> + abstract boolean looksLegit ( HintsWriter writer ) ; <nl> + abstract boolean looksLegit ( ChecksummedDataInput checksummedDataInput ) ; <nl> + <nl> + public void multiFlushAndDeserializeTest ( ) throws Exception <nl> + { <nl> + int hintNum = 0 ; <nl> + int bufferSize = HintsWriteExecutor . WRITE _ BUFFER _ SIZE ; <nl> + List < Hint > hints = new LinkedList < > ( ) ; <nl> + <nl> + UUID hostId = UUIDGen . getTimeUUID ( ) ; <nl> + long ts = System . currentTimeMillis ( ) ; <nl> + <nl> + HintsDescriptor descriptor = new HintsDescriptor ( hostId , ts , params ( ) ) ; <nl> + File dir = Files . createTempDir ( ) ; <nl> + try ( HintsWriter writer = HintsWriter . create ( dir , descriptor ) ) <nl> + { <nl> + Assert . assertTrue ( looksLegit ( writer ) ) ; <nl> + <nl> + ByteBuffer writeBuffer = ByteBuffer . allocateDirect ( bufferSize ) ; <nl> + try ( HintsWriter . Session session = writer . newSession ( writeBuffer ) ) <nl> + { <nl> + while ( session . getBytesWritten ( ) < bufferSize * 3 ) <nl> + { <nl> + Hint hint = createHint ( hintNum , ts + hintNum ) ; <nl> + session . append ( hint ) ; <nl> + hints . add ( hint ) ; <nl> + hintNum + + ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + try ( HintsReader reader = HintsReader . open ( new File ( dir , descriptor . fileName ( ) ) ) ) <nl> + { <nl> + Assert . assertTrue ( looksLegit ( reader . getInput ( ) ) ) ; <nl> + List < Hint > deserialized = new ArrayList < > ( hintNum ) ; <nl> + <nl> + for ( HintsReader . Page page : reader ) <nl> + { <nl> + Iterator < Hint > iterator = page . hintsIterator ( ) ; <nl> + while ( iterator . hasNext ( ) ) <nl> + { <nl> + deserialized . add ( iterator . next ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + Assert . assertEquals ( hints . size ( ) , deserialized . size ( ) ) ; <nl> + hintNum = 0 ; <nl> + for ( Hint expected : hints ) <nl> + { <nl> + HintsTestUtil . assertHintsEqual ( expected , deserialized . get ( hintNum ) ) ; <nl> + hintNum + + ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / hints / HintsCompressionTest . java b / test / unit / org / apache / cassandra / hints / HintsCompressionTest . java <nl> index d6a08ca . . f82db49 100644 <nl> - - - a / test / unit / org / apache / cassandra / hints / HintsCompressionTest . java <nl> + + + b / test / unit / org / apache / cassandra / hints / HintsCompressionTest . java <nl> @ @ - 18 , 65 + 18 , 20 @ @ <nl> <nl> package org . apache . cassandra . hints ; <nl> <nl> - import java . io . File ; <nl> - import java . nio . ByteBuffer ; <nl> - import java . util . ArrayList ; <nl> - import java . util . Iterator ; <nl> - import java . util . LinkedList ; <nl> - import java . util . List ; <nl> - import java . util . UUID ; <nl> - import java . util . concurrent . TimeUnit ; <nl> - <nl> import com . google . common . collect . ImmutableMap ; <nl> - import com . google . common . io . Files ; <nl> - import org . junit . Assert ; <nl> - import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> <nl> - import org . apache . cassandra . SchemaLoader ; <nl> - import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . ParameterizedClass ; <nl> - import org . apache . cassandra . config . Schema ; <nl> - import org . apache . cassandra . db . Mutation ; <nl> - import org . apache . cassandra . db . RowUpdateBuilder ; <nl> import org . apache . cassandra . io . compress . DeflateCompressor ; <nl> import org . apache . cassandra . io . compress . ICompressor ; <nl> import org . apache . cassandra . io . compress . LZ4Compressor ; <nl> import org . apache . cassandra . io . compress . SnappyCompressor ; <nl> - import org . apache . cassandra . schema . KeyspaceParams ; <nl> - import org . apache . cassandra . utils . UUIDGen ; <nl> - <nl> - import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; <nl> <nl> - public class HintsCompressionTest <nl> + public class HintsCompressionTest extends AlteredHints <nl> { <nl> - private static final String KEYSPACE = " hints _ compression _ test " ; <nl> - private static final String TABLE = " table " ; <nl> - <nl> - <nl> - private static Mutation createMutation ( int index , long timestamp ) <nl> - { <nl> - CFMetaData table = Schema . instance . getCFMetaData ( KEYSPACE , TABLE ) ; <nl> - return new RowUpdateBuilder ( table , timestamp , bytes ( index ) ) <nl> - . clustering ( bytes ( index ) ) <nl> - . add ( " val " , bytes ( index ) ) <nl> - . build ( ) ; <nl> - } <nl> + private Class < ? extends ICompressor > compressorClass ; <nl> <nl> - private static Hint createHint ( int idx , long baseTimestamp ) <nl> - { <nl> - long timestamp = baseTimestamp + idx ; <nl> - return Hint . create ( createMutation ( idx , TimeUnit . MILLISECONDS . toMicros ( timestamp ) ) , timestamp ) ; <nl> - } <nl> - <nl> - @ BeforeClass <nl> - public static void defineSchema ( ) <nl> - { <nl> - SchemaLoader . prepareServer ( ) ; <nl> - SchemaLoader . createKeyspace ( KEYSPACE , KeyspaceParams . simple ( 1 ) , SchemaLoader . standardCFMD ( KEYSPACE , TABLE ) ) ; <nl> - } <nl> - <nl> - private ImmutableMap < String , Object > params ( Class < ? extends ICompressor > compressorClass ) <nl> + ImmutableMap < String , Object > params ( ) <nl> { <nl> ImmutableMap < String , Object > compressionParams = ImmutableMap . < String , Object > builder ( ) <nl> . put ( ParameterizedClass . CLASS _ NAME , compressorClass . getSimpleName ( ) ) <nl> @ @ - 86 , 72 + 41 , 40 @ @ public class HintsCompressionTest <nl> . build ( ) ; <nl> } <nl> <nl> - public void multiFlushAndDeserializeTest ( Class < ? extends ICompressor > compressorClass ) throws Exception <nl> + boolean looksLegit ( HintsWriter writer ) <nl> { <nl> - int hintNum = 0 ; <nl> - int bufferSize = HintsWriteExecutor . WRITE _ BUFFER _ SIZE ; <nl> - List < Hint > hints = new LinkedList < > ( ) ; <nl> - <nl> - UUID hostId = UUIDGen . getTimeUUID ( ) ; <nl> - long ts = System . currentTimeMillis ( ) ; <nl> - <nl> - HintsDescriptor descriptor = new HintsDescriptor ( hostId , ts , params ( compressorClass ) ) ; <nl> - File dir = Files . createTempDir ( ) ; <nl> - try ( HintsWriter writer = HintsWriter . create ( dir , descriptor ) ) <nl> - { <nl> - assert writer instanceof CompressedHintsWriter ; <nl> - <nl> - ByteBuffer writeBuffer = ByteBuffer . allocateDirect ( bufferSize ) ; <nl> - try ( HintsWriter . Session session = writer . newSession ( writeBuffer ) ) <nl> - { <nl> - while ( session . getBytesWritten ( ) < bufferSize * 3 ) <nl> - { <nl> - Hint hint = createHint ( hintNum , ts + hintNum ) ; <nl> - session . append ( hint ) ; <nl> - hints . add ( hint ) ; <nl> - hintNum + + ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - try ( HintsReader reader = HintsReader . open ( new File ( dir , descriptor . fileName ( ) ) ) ) <nl> - { <nl> - List < Hint > deserialized = new ArrayList < > ( hintNum ) ; <nl> - <nl> - for ( HintsReader . Page page : reader ) <nl> - { <nl> - Iterator < Hint > iterator = page . hintsIterator ( ) ; <nl> - while ( iterator . hasNext ( ) ) <nl> - { <nl> - deserialized . add ( iterator . next ( ) ) ; <nl> - } <nl> - } <nl> + if ( ! ( writer instanceof CompressedHintsWriter ) ) <nl> + return false ; <nl> + CompressedHintsWriter compressedHintsWriter = ( CompressedHintsWriter ) writer ; <nl> + return compressedHintsWriter . getCompressor ( ) . getClass ( ) . isAssignableFrom ( compressorClass ) ; <nl> + } <nl> <nl> - Assert . assertEquals ( hints . size ( ) , deserialized . size ( ) ) ; <nl> - hintNum = 0 ; <nl> - for ( Hint expected : hints ) <nl> - { <nl> - HintsTestUtil . assertHintsEqual ( expected , deserialized . get ( hintNum ) ) ; <nl> - hintNum + + ; <nl> - } <nl> - } <nl> + boolean looksLegit ( ChecksummedDataInput checksummedDataInput ) <nl> + { <nl> + if ( ! ( checksummedDataInput instanceof CompressedChecksummedDataInput ) ) <nl> + return false ; <nl> + CompressedChecksummedDataInput compressedChecksummedDataInput = ( CompressedChecksummedDataInput ) checksummedDataInput ; <nl> + return compressedChecksummedDataInput . getCompressor ( ) . getClass ( ) . isAssignableFrom ( compressorClass ) ; <nl> } <nl> <nl> @ Test <nl> public void lz4Compressor ( ) throws Exception <nl> { <nl> - multiFlushAndDeserializeTest ( LZ4Compressor . class ) ; <nl> + compressorClass = LZ4Compressor . class ; <nl> + multiFlushAndDeserializeTest ( ) ; <nl> } <nl> <nl> @ Test <nl> public void snappyCompressor ( ) throws Exception <nl> { <nl> - multiFlushAndDeserializeTest ( SnappyCompressor . class ) ; <nl> + compressorClass = SnappyCompressor . class ; <nl> + multiFlushAndDeserializeTest ( ) ; <nl> } <nl> <nl> @ Test <nl> public void deflateCompressor ( ) throws Exception <nl> { <nl> - multiFlushAndDeserializeTest ( DeflateCompressor . class ) ; <nl> + compressorClass = DeflateCompressor . class ; <nl> + multiFlushAndDeserializeTest ( ) ; <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / hints / HintsEncryptionTest . java b / test / unit / org / apache / cassandra / hints / HintsEncryptionTest . java <nl> new file mode 100644 <nl> index 0000000 . . 83b8481 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / hints / HintsEncryptionTest . java <nl> @ @ - 0 , 0 + 1 , 81 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . hints ; <nl> + <nl> + import java . util . Arrays ; <nl> + <nl> + import javax . crypto . Cipher ; <nl> + <nl> + import com . google . common . collect . ImmutableMap ; <nl> + import org . junit . Before ; <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . security . EncryptionContext ; <nl> + import org . apache . cassandra . security . EncryptionContextGenerator ; <nl> + <nl> + public class HintsEncryptionTest extends AlteredHints <nl> + { <nl> + EncryptionContext encryptionContext ; <nl> + Cipher cipher ; <nl> + <nl> + @ Before <nl> + public void setup ( ) <nl> + { <nl> + encryptionContext = EncryptionContextGenerator . createContext ( true ) ; <nl> + DatabaseDescriptor . setEncryptionContext ( encryptionContext ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void encyptedHints ( ) throws Exception <nl> + { <nl> + multiFlushAndDeserializeTest ( ) ; <nl> + } <nl> + <nl> + boolean looksLegit ( HintsWriter writer ) <nl> + { <nl> + if ( ! ( writer instanceof EncryptedHintsWriter ) ) <nl> + return false ; <nl> + <nl> + EncryptedHintsWriter encryptedHintsWriter = ( EncryptedHintsWriter ) writer ; <nl> + cipher = encryptedHintsWriter . getCipher ( ) ; <nl> + <nl> + return encryptedHintsWriter . getCompressor ( ) . getClass ( ) . isAssignableFrom ( encryptionContext . getCompressor ( ) . getClass ( ) ) ; <nl> + } <nl> + <nl> + boolean looksLegit ( ChecksummedDataInput checksummedDataInput ) <nl> + { <nl> + if ( ! ( checksummedDataInput instanceof EncryptedChecksummedDataInput ) ) <nl> + return false ; <nl> + <nl> + EncryptedChecksummedDataInput encryptedDataInput = ( EncryptedChecksummedDataInput ) checksummedDataInput ; <nl> + <nl> + return Arrays . equals ( cipher . getIV ( ) , encryptedDataInput . getCipher ( ) . getIV ( ) ) & & <nl> + encryptedDataInput . getCompressor ( ) . getClass ( ) . isAssignableFrom ( encryptionContext . getCompressor ( ) . getClass ( ) ) ; <nl> + } <nl> + <nl> + ImmutableMap < String , Object > params ( ) <nl> + { <nl> + ImmutableMap < String , Object > compressionParams = ImmutableMap . < String , Object > builder ( ) <nl> + . putAll ( encryptionContext . toHeaderParameters ( ) ) <nl> + . build ( ) ; <nl> + return ImmutableMap . < String , Object > builder ( ) <nl> + . put ( HintsDescriptor . ENCRYPTION , compressionParams ) <nl> + . build ( ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 7be913e . . 7c5a752 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 2 , 6 + 2 , 8 @ @ <nl> * add command to stop compactions ( CASSANDRA - 1740 ) <nl> * filter out unavailable cipher suites when using encryption ( CASSANDRA - 3178 ) <nl> * ( HADOOP ) add old - style api support for CFIF and CFRR ( CASSANDRA - 2799 ) <nl> + * Support TimeUUIDType column names in Stress . java tool ( CASSANDRA - 3541 ) <nl> + <nl> <nl> 1 . 0 . 5 <nl> * revert CASSANDRA - 3407 ( see CASSANDRA - 3540 ) <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / Session . java b / tools / stress / src / org / apache / cassandra / stress / Session . java <nl> index abbea50 . . ddc6a69 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / Session . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / Session . java <nl> @ @ - 27 , 9 + 27 , 7 @ @ import java . util . concurrent . atomic . AtomicLong ; <nl> <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . ConfigurationException ; <nl> - import org . apache . cassandra . db . compaction . AbstractCompactionStrategy ; <nl> - import org . apache . cassandra . db . marshal . AbstractType ; <nl> - import org . apache . cassandra . db . marshal . TypeParser ; <nl> + import org . apache . cassandra . db . marshal . * ; <nl> import org . apache . commons . cli . * ; <nl> <nl> import org . apache . cassandra . db . ColumnFamilyType ; <nl> @ @ - 50 , 6 + 48 , 8 @ @ public class Session implements Serializable <nl> public static final String DEFAULT _ COMPARATOR = " AsciiType " ; <nl> public static final String DEFAULT _ VALIDATOR = " BytesType " ; <nl> <nl> + private static InetAddress localInetAddress ; <nl> + <nl> public final AtomicInteger operations ; <nl> public final AtomicInteger keys ; <nl> public final AtomicLong latency ; <nl> @ @ - 89 , 6 + 89 , 7 @ @ public class Session implements Serializable <nl> availableOptions . addOption ( " I " , " compression " , true , " Specify the compression to use for sstable , default : no compression " ) ; <nl> availableOptions . addOption ( " Q " , " query - names " , true , " Comma - separated list of column names to retrieve from each row . " ) ; <nl> availableOptions . addOption ( " Z " , " compaction - strategy " , true , " CompactionStrategy to use . " ) ; <nl> + availableOptions . addOption ( " U " , " comparator " , true , " Column Comparator to use . Currently supported types are : TimeUUIDType , AsciiType , UTF8Type . " ) ; <nl> } <nl> <nl> private int numKeys = 1000 * 1000 ; <nl> @ @ - 131 , 6 + 132 , 8 @ @ public class Session implements Serializable <nl> protected float sigma ; <nl> <nl> public final InetAddress sendToDaemon ; <nl> + public final String comparator ; <nl> + public final boolean timeUUIDComparator ; <nl> <nl> public Session ( String [ ] arguments ) throws IllegalArgumentException <nl> { <nl> @ @ - 321 , 6 + 324 , 35 @ @ public class Session implements Serializable <nl> System . exit ( 1 ) ; <nl> } <nl> } <nl> + <nl> + if ( cmd . hasOption ( " U " ) ) <nl> + { <nl> + AbstractType parsed = null ; <nl> + <nl> + try <nl> + { <nl> + parsed = TypeParser . parse ( cmd . getOptionValue ( " U " ) ) ; <nl> + } <nl> + catch ( ConfigurationException e ) <nl> + { <nl> + System . err . println ( e . getMessage ( ) ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + <nl> + comparator = cmd . getOptionValue ( " U " ) ; <nl> + timeUUIDComparator = parsed instanceof TimeUUIDType ; <nl> + <nl> + if ( ! ( parsed instanceof TimeUUIDType | | parsed instanceof AsciiType | | parsed instanceof UTF8Type ) ) <nl> + { <nl> + System . err . println ( " Currently supported types are : TimeUUIDType , AsciiType , UTF8Type . " ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + } <nl> + else <nl> + { <nl> + comparator = null ; <nl> + timeUUIDComparator = false ; <nl> + } <nl> } <nl> catch ( ParseException e ) <nl> { <nl> @ @ - 464 , 6 + 496 , 7 @ @ public class Session implements Serializable <nl> public void createKeySpaces ( ) <nl> { <nl> KsDef keyspace = new KsDef ( ) ; <nl> + String defaultComparator = comparator = = null ? DEFAULT _ COMPARATOR : comparator ; <nl> <nl> / / column family for standard columns <nl> CfDef standardCfDef = new CfDef ( " Keyspace1 " , " Standard1 " ) ; <nl> @ @ - 471 , 7 + 504 , 7 @ @ public class Session implements Serializable <nl> if ( compression ! = null ) <nl> compressionOptions . put ( " sstable _ compression " , compression ) ; <nl> <nl> - standardCfDef . setComparator _ type ( DEFAULT _ COMPARATOR ) <nl> + standardCfDef . setComparator _ type ( defaultComparator ) <nl> . setDefault _ validation _ class ( DEFAULT _ VALIDATOR ) <nl> . setCompression _ options ( compressionOptions ) ; <nl> <nl> @ @ - 485 , 7 + 518 , 7 @ @ public class Session implements Serializable <nl> / / column family with super columns <nl> CfDef superCfDef = new CfDef ( " Keyspace1 " , " Super1 " ) . setColumn _ type ( " Super " ) ; <nl> superCfDef . setComparator _ type ( DEFAULT _ COMPARATOR ) <nl> - . setSubcomparator _ type ( DEFAULT _ COMPARATOR ) <nl> + . setSubcomparator _ type ( defaultComparator ) <nl> . setDefault _ validation _ class ( DEFAULT _ VALIDATOR ) <nl> . setCompression _ options ( compressionOptions ) ; <nl> <nl> @ @ - 574 , 4 + 607 , 20 @ @ public class Session implements Serializable <nl> return client ; <nl> } <nl> <nl> + public static InetAddress getLocalAddress ( ) <nl> + { <nl> + if ( localInetAddress = = null ) <nl> + { <nl> + try <nl> + { <nl> + localInetAddress = InetAddress . getLocalHost ( ) ; <nl> + } <nl> + catch ( UnknownHostException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + return localInetAddress ; <nl> + } <nl> } <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / Inserter . java b / tools / stress / src / org / apache / cassandra / stress / operations / Inserter . java <nl> index 45d33cb . . c81df6f 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / operations / Inserter . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / operations / Inserter . java <nl> @ @ - 52 , 9 + 52 , 9 @ @ public class Inserter extends Operation <nl> <nl> for ( int i = 0 ; i < session . getColumnsPerKey ( ) ; i + + ) <nl> { <nl> - String columnName = ( " C " + Integer . toString ( i ) ) ; <nl> - ByteBuffer columnValue = values . get ( i % values . size ( ) ) ; <nl> - columns . add ( new Column ( ByteBufferUtil . bytes ( columnName ) ) . setValue ( columnValue ) . setTimestamp ( System . currentTimeMillis ( ) ) ) ; <nl> + columns . add ( new Column ( columnName ( i , session . timeUUIDComparator ) ) <nl> + . setValue ( values . get ( i % values . size ( ) ) ) <nl> + . setTimestamp ( System . currentTimeMillis ( ) ) ) ; <nl> } <nl> <nl> if ( session . getColumnFamilyType ( ) = = ColumnFamilyType . Super ) <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / util / Operation . java b / tools / stress / src / org / apache / cassandra / stress / util / Operation . java <nl> index 10b97ad . . dd5128f 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / util / Operation . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / util / Operation . java <nl> @ @ - 27 , 11 + 27 , 14 @ @ import java . util . Random ; <nl> <nl> import static com . google . common . base . Charsets . UTF _ 8 ; <nl> <nl> + import org . apache . cassandra . db . marshal . TimeUUIDType ; <nl> import org . apache . cassandra . stress . Session ; <nl> import org . apache . cassandra . stress . Stress ; <nl> import org . apache . cassandra . thrift . Cassandra ; <nl> import org . apache . cassandra . thrift . InvalidRequestException ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> + import org . apache . cassandra . utils . UUIDGen ; <nl> <nl> public abstract class Operation <nl> { <nl> @ @ - 200 , 6 + 203 , 13 @ @ public abstract class Operation <nl> return result . toString ( ) ; <nl> } <nl> <nl> + protected ByteBuffer columnName ( int index , boolean timeUUIDComparator ) <nl> + { <nl> + return timeUUIDComparator <nl> + ? TimeUUIDType . instance . decompose ( UUIDGen . makeType1UUIDFromHost ( Session . getLocalAddress ( ) ) ) <nl> + : ByteBufferUtil . bytes ( String . format ( " C % d " , index ) ) ; <nl> + } <nl> + <nl> protected String getExceptionMessage ( Exception e ) <nl> { <nl> String className = e . getClass ( ) . getSimpleName ( ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 04ce8d7 . . 551d147 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 4 
 + * Encrypted hints ( CASSANDRA - 11040 ) 
 * SASI index options validation ( CASSANDRA - 11136 ) 
 * Optimize disk seek using min / max column name meta data when the LIMIT clause is used 
 ( CASSANDRA - 8180 ) 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index a9749f2 . . d6bcace 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 942 , 31 + 942 , 29 @ @ enable _ scripted _ user _ defined _ functions : false 
 windows _ timer _ interval : 1 
 
 
 - # Enables encrypting data at - rest ( on disk ) . Currently , AES / CBC / PKCS5Padding is the only supported 
 - # encyption algorithm . Different key providers can be plugged in , but the default reads from 
 + # Enables encrypting data at - rest ( on disk ) . Different key providers can be plugged in , but the default reads from 
 # a JCE - style keystore . A single keystore can hold multiple keys , but the one referenced by 
 # the " key _ alias " is the only key that will be used for encrypt opertaions ; previously used keys 
 # can still ( and should ! ) be in the keystore and will be used on decrypt operations 
 # ( to handle the case of key rotation ) . 
 # 
 - # In order to make use of transparent data encryption , you must download and install the 
 - # Java Cryptography Extension ( JCE ) Unlimited Strength Jurisdiction Policy Files 
 - # for your version of the JDK . 
 + # It is strongly recommended to download and install Java Cryptography Extension ( JCE ) 
 + # Unlimited Strength Jurisdiction Policy Files for your version of the JDK . 
 # ( current link : http : / / www . oracle . com / technetwork / java / javase / downloads / jce8 - download - 2133166 . html ) 
 # 
 # Currently , only the following file types are supported for transparent data encryption , although 
 - # more are coming in future cassandra releases : commitlog 
 + # more are coming in future cassandra releases : commitlog , hints 
 transparent _ data _ encryption _ options : 
 enabled : false 
 chunk _ length _ kb : 64 
 cipher : AES / CBC / PKCS5Padding 
 key _ alias : testing : 1 
 - # CBC requires iv length to be 16 bytes 
 + # CBC IV length for AES needs to be 16 bytes ( which is also the default size ) 
 # iv _ length : 16 
 key _ provider : 
 - class _ name : org . apache . cassandra . security . JKSKeyProvider 
 parameters : 
 - - keystore : test / conf / cassandra . keystore 
 + - keystore : conf / . keystore 
 keystore _ password : cassandra 
 store _ type : JCEKS 
 key _ password : cassandra 
 diff - - git a / src / java / org / apache / cassandra / hints / CompressedChecksummedDataInput . java b / src / java / org / apache / cassandra / hints / CompressedChecksummedDataInput . java 
 index 1009b57 . . bbf1fdb 100644 
 - - - a / src / java / org / apache / cassandra / hints / CompressedChecksummedDataInput . java 
 + + + b / src / java / org / apache / cassandra / hints / CompressedChecksummedDataInput . java 
 @ @ - 21 , 6 + 21 , 8 @ @ package org . apache . cassandra . hints ; 
 import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 
 + import com . google . common . annotations . VisibleForTesting ; 
 + 
 import org . apache . cassandra . io . FSReadError ; 
 import org . apache . cassandra . io . compress . ICompressor ; 
 import org . apache . cassandra . io . util . ChannelProxy ; 
 @ @ - 33 , 7 + 35 , 7 @ @ public final class CompressedChecksummedDataInput extends ChecksummedDataInput 
 private volatile ByteBuffer compressedBuffer = null ; 
 private final ByteBuffer metadataBuffer = ByteBuffer . allocate ( CompressedHintsWriter . METADATA _ SIZE ) ; 
 
 - public CompressedChecksummedDataInput ( Builder builder ) 
 + public CompressedChecksummedDataInput ( CompressedChecksummedDataInputBuilder builder ) 
 { 
 super ( builder ) ; 
 assert regions = = null ; / / mmapped regions are not supported 
 @ @ - 113 , 46 + 115 , 20 @ @ public final class CompressedChecksummedDataInput extends ChecksummedDataInput 
 throw new UnsupportedOperationException ( ) ; 
 } 
 
 - public static final class Builder extends ChecksummedDataInput . Builder 
 - { 
 - private long position ; 
 - private ICompressor compressor ; 
 - 
 - public Builder ( ChannelProxy channel ) 
 - { 
 - super ( channel ) ; 
 - bufferType = null ; 
 - } 
 - 
 - public CompressedChecksummedDataInput build ( ) 
 - { 
 - assert position > = 0 ; 
 - assert compressor ! = null ; 
 - return new CompressedChecksummedDataInput ( this ) ; 
 - } 
 - 
 - public Builder withCompressor ( ICompressor compressor ) 
 - { 
 - this . compressor = compressor ; 
 - bufferType = compressor . preferredBufferType ( ) ; 
 - return this ; 
 - } 
 - 
 - public Builder withPosition ( long position ) 
 - { 
 - this . position = position ; 
 - return this ; 
 - } 
 - } 
 - 
 - public static final CompressedChecksummedDataInput upgradeInput ( ChecksummedDataInput input , ICompressor compressor ) 
 + public static ChecksummedDataInput upgradeInput ( ChecksummedDataInput input , ICompressor compressor ) 
 { 
 long position = input . getPosition ( ) ; 
 input . close ( ) ; 
 
 - Builder builder = new Builder ( new ChannelProxy ( input . getPath ( ) ) ) ; 
 + CompressedChecksummedDataInputBuilder builder = new CompressedChecksummedDataInputBuilder ( new ChannelProxy ( input . getPath ( ) ) ) ; 
 builder . withPosition ( position ) ; 
 builder . withCompressor ( compressor ) ; 
 return builder . build ( ) ; 
 } 
 + 
 + @ VisibleForTesting 
 + ICompressor getCompressor ( ) 
 + { 
 + return compressor ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / hints / CompressedChecksummedDataInputBuilder . java b / src / java / org / apache / cassandra / hints / CompressedChecksummedDataInputBuilder . java 
 new file mode 100644 
 index 0000000 . . 3452df8 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / hints / CompressedChecksummedDataInputBuilder . java 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + package org . apache . cassandra . hints ; 
 + 
 + import org . apache . cassandra . io . compress . ICompressor ; 
 + import org . apache . cassandra . io . util . ChannelProxy ; 
 + 
 + public class CompressedChecksummedDataInputBuilder extends ChecksummedDataInput . Builder 
 + { 
 + long position ; 
 + ICompressor compressor ; 
 + 
 + public CompressedChecksummedDataInputBuilder ( ChannelProxy channel ) 
 + { 
 + super ( channel ) ; 
 + bufferType = null ; 
 + } 
 + 
 + public ChecksummedDataInput build ( ) 
 + { 
 + assert position > = 0 ; 
 + assert compressor ! = null ; 
 + return new CompressedChecksummedDataInput ( this ) ; 
 + } 
 + 
 + public CompressedChecksummedDataInputBuilder withCompressor ( ICompressor compressor ) 
 + { 
 + this . compressor = compressor ; 
 + bufferType = compressor . preferredBufferType ( ) ; 
 + return this ; 
 + } 
 + 
 + public CompressedChecksummedDataInputBuilder withPosition ( long position ) 
 + { 
 + this . position = position ; 
 + return this ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / hints / CompressedHintsWriter . java b / src / java / org / apache / cassandra / hints / CompressedHintsWriter . java 
 index 491dceb . . 8792e32 100644 
 - - - a / src / java / org / apache / cassandra / hints / CompressedHintsWriter . java 
 + + + b / src / java / org / apache / cassandra / hints / CompressedHintsWriter . java 
 @ @ - 24 , 6 + 24 , 8 @ @ import java . nio . ByteBuffer ; 
 import java . nio . channels . FileChannel ; 
 import java . util . zip . CRC32 ; 
 
 + import com . google . common . annotations . VisibleForTesting ; 
 + 
 import org . apache . cassandra . io . compress . ICompressor ; 
 
 public class CompressedHintsWriter extends HintsWriter 
 @ @ - 64 , 4 + 66 , 10 @ @ public class CompressedHintsWriter extends HintsWriter 
 compressionBuffer . limit ( compressedSize + METADATA _ SIZE ) ; 
 super . writeBuffer ( compressionBuffer ) ; 
 } 
 + 
 + @ VisibleForTesting 
 + ICompressor getCompressor ( ) 
 + { 
 + return compressor ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / hints / EncryptedChecksummedDataInput . java b / src / java / org / apache / cassandra / hints / EncryptedChecksummedDataInput . java 
 new file mode 100644 
 index 0000000 . . 12b6bf2 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / hints / EncryptedChecksummedDataInput . java 
 @ @ - 0 , 0 + 1 , 129 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . hints ; 
 + 
 + import java . io . IOException ; 
 + import java . nio . ByteBuffer ; 
 + import javax . crypto . Cipher ; 
 + 
 + import com . google . common . annotations . VisibleForTesting ; 
 + 
 + import org . apache . cassandra . security . EncryptionUtils ; 
 + import org . apache . cassandra . io . FSReadError ; 
 + import org . apache . cassandra . io . compress . ICompressor ; 
 + import org . apache . cassandra . io . util . ChannelProxy ; 
 + 
 + public class EncryptedChecksummedDataInput extends ChecksummedDataInput 
 + { 
 + private static final ThreadLocal < ByteBuffer > reusableBuffers = new ThreadLocal < ByteBuffer > ( ) 
 + { 
 + protected ByteBuffer initialValue ( ) 
 + { 
 + return ByteBuffer . allocate ( 0 ) ; 
 + } 
 + } ; 
 + 
 + private final Cipher cipher ; 
 + private final ICompressor compressor ; 
 + 
 + private final EncryptionUtils . ChannelProxyReadChannel readChannel ; 
 + 
 + protected EncryptedChecksummedDataInput ( Builder builder ) 
 + { 
 + super ( builder ) ; 
 + cipher = builder . cipher ; 
 + compressor = builder . compressor ; 
 + readChannel = new EncryptionUtils . ChannelProxyReadChannel ( channel , builder . position ) ; 
 + assert cipher ! = null ; 
 + assert compressor ! = null ; 
 + } 
 + 
 + / * * 
 + * Since an entire block of compressed data is read off of disk , not just a hint at a time , 
 + * we don ' t report EOF until the decompressed data has also been read completely 
 + * / 
 + public boolean isEOF ( ) 
 + { 
 + return readChannel . getCurrentPosition ( ) = = channel . size ( ) & & buffer . remaining ( ) = = 0 ; 
 + } 
 + 
 + protected void reBufferStandard ( ) 
 + { 
 + try 
 + { 
 + ByteBuffer byteBuffer = reusableBuffers . get ( ) ; 
 + ByteBuffer decrypted = EncryptionUtils . decrypt ( readChannel , byteBuffer , true , cipher ) ; 
 + buffer = EncryptionUtils . uncompress ( decrypted , buffer , true , compressor ) ; 
 + 
 + if ( decrypted . capacity ( ) > byteBuffer . capacity ( ) ) 
 + reusableBuffers . set ( decrypted ) ; 
 + } 
 + catch ( IOException ioe ) 
 + { 
 + throw new FSReadError ( ioe , getPath ( ) ) ; 
 + } 
 + } 
 + 
 + public static class Builder extends CompressedChecksummedDataInputBuilder 
 + { 
 + Cipher cipher ; 
 + 
 + public Builder ( ChannelProxy channel ) 
 + { 
 + super ( channel ) ; 
 + } 
 + 
 + public Builder withCipher ( Cipher cipher ) 
 + { 
 + this . cipher = cipher ; 
 + return this ; 
 + } 
 + 
 + public ChecksummedDataInput build ( ) 
 + { 
 + assert position > = 0 ; 
 + assert compressor ! = null ; 
 + assert cipher ! = null ; 
 + return new EncryptedChecksummedDataInput ( this ) ; 
 + } 
 + } 
 + 
 + public static ChecksummedDataInput upgradeInput ( ChecksummedDataInput input , Cipher cipher , ICompressor compressor ) 
 + { 
 + long position = input . getPosition ( ) ; 
 + input . close ( ) ; 
 + 
 + Builder builder = new Builder ( new ChannelProxy ( input . getPath ( ) ) ) ; 
 + builder . withPosition ( position ) ; 
 + builder . withCompressor ( compressor ) ; 
 + builder . withCipher ( cipher ) ; 
 + return builder . build ( ) ; 
 + } 
 + 
 + @ VisibleForTesting 
 + Cipher getCipher ( ) 
 + { 
 + return cipher ; 
 + } 
 + 
 + @ VisibleForTesting 
 + ICompressor getCompressor ( ) 
 + { 
 + return compressor ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / hints / EncryptedHintsWriter . java b / src / java / org / apache / cassandra / hints / EncryptedHintsWriter . java 
 new file mode 100644 
 index 0000000 . . 4786d9c 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / hints / EncryptedHintsWriter . java 
 @ @ - 0 , 0 + 1 , 65 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . hints ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + import java . nio . ByteBuffer ; 
 + import java . nio . channels . FileChannel ; 
 + import java . util . zip . CRC32 ; 
 + import javax . crypto . Cipher ; 
 + 
 + import com . google . common . annotations . VisibleForTesting ; 
 + 
 + import org . apache . cassandra . security . EncryptionUtils ; 
 + import org . apache . cassandra . io . compress . ICompressor ; 
 + 
 + import static org . apache . cassandra . utils . FBUtilities . updateChecksum ; 
 + 
 + public class EncryptedHintsWriter extends HintsWriter 
 + { 
 + private final Cipher cipher ; 
 + private final ICompressor compressor ; 
 + private volatile ByteBuffer byteBuffer ; 
 + 
 + protected EncryptedHintsWriter ( File directory , HintsDescriptor descriptor , File file , FileChannel channel , int fd , CRC32 globalCRC ) 
 + { 
 + super ( directory , descriptor , file , channel , fd , globalCRC ) ; 
 + cipher = descriptor . getCipher ( ) ; 
 + compressor = descriptor . createCompressor ( ) ; 
 + } 
 + 
 + protected void writeBuffer ( ByteBuffer input ) throws IOException 
 + { 
 + byteBuffer = EncryptionUtils . compress ( input , byteBuffer , true , compressor ) ; 
 + ByteBuffer output = EncryptionUtils . encryptAndWrite ( byteBuffer , channel , true , cipher ) ; 
 + updateChecksum ( globalCRC , output ) ; 
 + } 
 + 
 + @ VisibleForTesting 
 + Cipher getCipher ( ) 
 + { 
 + return cipher ; 
 + } 
 + 
 + @ VisibleForTesting 
 + ICompressor getCompressor ( ) 
 + { 
 + return compressor ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / hints / HintsDescriptor . java b / src / java / org / apache / cassandra / hints / HintsDescriptor . java 
 index f5296b3 . . 8a3ee8b 100644 
 - - - a / src / java / org / apache / cassandra / hints / HintsDescriptor . java 
 + + + b / src / java / org / apache / cassandra / hints / HintsDescriptor . java 
 @ @ - 22 , 15 + 22 , 20 @ @ import java . io . IOException ; 
 import java . io . RandomAccessFile ; 
 import java . nio . charset . StandardCharsets ; 
 import java . nio . file . Path ; 
 + import java . util . HashMap ; 
 import java . util . Map ; 
 import java . util . UUID ; 
 import java . util . regex . Pattern ; 
 import java . util . zip . CRC32 ; 
 + import javax . crypto . Cipher ; 
 
 import com . google . common . base . MoreObjects ; 
 import com . google . common . base . Objects ; 
 import com . google . common . collect . ImmutableMap ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . ParameterizedClass ; 
 import org . apache . cassandra . db . TypeSizes ; 
 import org . apache . cassandra . io . FSReadError ; 
 @ @ - 38 , 6 + 43 , 8 @ @ import org . apache . cassandra . io . compress . ICompressor ; 
 import org . apache . cassandra . io . util . DataOutputPlus ; 
 import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . schema . CompressionParams ; 
 + import org . apache . cassandra . security . EncryptionContext ; 
 + import org . apache . cassandra . utils . Hex ; 
 import org . json . simple . JSONValue ; 
 
 import static org . apache . cassandra . utils . FBUtilities . updateChecksumInt ; 
 @ @ - 50 , 10 + 57 , 13 @ @ import static org . apache . cassandra . utils . FBUtilities . updateChecksumInt ; 
 * / 
 final class HintsDescriptor 
 { 
 + private static final Logger logger = LoggerFactory . getLogger ( HintsDescriptor . class ) ; 
 + 
 static final int VERSION _ 30 = 1 ; 
 static final int CURRENT _ VERSION = VERSION _ 30 ; 
 
 static final String COMPRESSION = " compression " ; 
 + static final String ENCRYPTION = " encryption " ; 
 
 static final Pattern pattern = 
 Pattern . compile ( " ^ [ a - fA - F0 - 9 ] { 8 } \ \ - [ a - fA - F0 - 9 ] { 4 } \ \ - [ a - fA - F0 - 9 ] { 4 } \ \ - [ a - fA - F0 - 9 ] { 4 } \ \ - [ a - fA - F0 - 9 ] { 12 } \ \ - ( \ \ d + ) \ \ - ( \ \ d + ) \ \ . hints $ " ) ; 
 @ @ - 62 , 17 + 72 , 35 @ @ final class HintsDescriptor 
 final int version ; 
 final long timestamp ; 
 
 - / / implemented for future compression support - see CASSANDRA - 9428 
 final ImmutableMap < String , Object > parameters ; 
 final ParameterizedClass compressionConfig ; 
 
 + private final Cipher cipher ; 
 + private final ICompressor compressor ; 
 + 
 HintsDescriptor ( UUID hostId , int version , long timestamp , ImmutableMap < String , Object > parameters ) 
 { 
 this . hostId = hostId ; 
 this . version = version ; 
 this . timestamp = timestamp ; 
 - this . parameters = parameters ; 
 compressionConfig = createCompressionConfig ( parameters ) ; 
 + 
 + EncryptionData encryption = createEncryption ( parameters ) ; 
 + if ( encryption = = null ) 
 + { 
 + cipher = null ; 
 + compressor = null ; 
 + } 
 + else 
 + { 
 + if ( compressionConfig ! = null ) 
 + throw new IllegalStateException ( " a hints file cannot be configured for both compression and encryption " ) ; 
 + cipher = encryption . cipher ; 
 + compressor = encryption . compressor ; 
 + parameters = encryption . params ; 
 + } 
 + 
 + this . parameters = parameters ; 
 } 
 
 HintsDescriptor ( UUID hostId , long timestamp , ImmutableMap < String , Object > parameters ) 
 @ @ - 100 , 6 + 128 , 71 @ @ final class HintsDescriptor 
 } 
 } 
 
 + / * * 
 + * Create , if necessary , the required encryption components ( for either decrpyt or encrypt operations ) . 
 + * Note that in the case of encyption ( this is , when writing out a new hints file ) , we need to write 
 + * the cipher ' s IV out to the header so it can be used when decrypting . Thus , we need to add an additional 
 + * entry to the { @ code params } map . 
 + * 
 + * @ param params the base parameters into the descriptor . 
 + * @ return null if not using encryption ; else , the initialized { @ link Cipher } and a possibly updated version 
 + * of the { @ code params } map . 
 + * / 
 + @ SuppressWarnings ( " unchecked " ) 
 + static EncryptionData createEncryption ( ImmutableMap < String , Object > params ) 
 + { 
 + if ( params . containsKey ( ENCRYPTION ) ) 
 + { 
 + Map < ? , ? > encryptionConfig = ( Map < ? , ? > ) params . get ( ENCRYPTION ) ; 
 + EncryptionContext encryptionContext = EncryptionContext . createFromMap ( encryptionConfig , DatabaseDescriptor . getEncryptionContext ( ) ) ; 
 + 
 + try 
 + { 
 + Cipher cipher ; 
 + if ( encryptionConfig . containsKey ( EncryptionContext . ENCRYPTION _ IV ) ) 
 + { 
 + cipher = encryptionContext . getDecryptor ( ) ; 
 + } 
 + else 
 + { 
 + cipher = encryptionContext . getEncryptor ( ) ; 
 + ImmutableMap < String , Object > encParams = ImmutableMap . < String , Object > builder ( ) 
 + . putAll ( encryptionContext . toHeaderParameters ( ) ) 
 + . put ( EncryptionContext . ENCRYPTION _ IV , Hex . bytesToHex ( cipher . getIV ( ) ) ) 
 + . build ( ) ; 
 + 
 + Map < String , Object > map = new HashMap < > ( params ) ; 
 + map . put ( ENCRYPTION , encParams ) ; 
 + params = ImmutableMap . < String , Object > builder ( ) . putAll ( map ) . build ( ) ; 
 + } 
 + return new EncryptionData ( cipher , encryptionContext . getCompressor ( ) , params ) ; 
 + } 
 + catch ( IOException ioe ) 
 + { 
 + logger . warn ( " failed to create encyption context for hints file . ignoring encryption for hints . " , ioe ) ; 
 + return null ; 
 + } 
 + } 
 + else 
 + { 
 + return null ; 
 + } 
 + } 
 + 
 + private static final class EncryptionData 
 + { 
 + final Cipher cipher ; 
 + final ICompressor compressor ; 
 + final ImmutableMap < String , Object > params ; 
 + 
 + private EncryptionData ( Cipher cipher , ICompressor compressor , ImmutableMap < String , Object > params ) 
 + { 
 + this . cipher = cipher ; 
 + this . compressor = compressor ; 
 + this . params = params ; 
 + } 
 + } 
 + 
 String fileName ( ) 
 { 
 return String . format ( " % s - % s - % s . hints " , hostId , timestamp , version ) ; 
 @ @ - 148 , 9 + 241 , 23 @ @ final class HintsDescriptor 
 return compressionConfig ! = null ; 
 } 
 
 + public boolean isEncrypted ( ) 
 + { 
 + return cipher ! = null ; 
 + } 
 + 
 public ICompressor createCompressor ( ) 
 { 
 - return isCompressed ( ) ? CompressionParams . createCompressor ( compressionConfig ) : null ; 
 + if ( isCompressed ( ) ) 
 + return CompressionParams . createCompressor ( compressionConfig ) ; 
 + if ( isEncrypted ( ) ) 
 + return compressor ; 
 + return null ; 
 + } 
 + 
 + public Cipher getCipher ( ) 
 + { 
 + return isEncrypted ( ) ? cipher : null ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / hints / HintsReader . java b / src / java / org / apache / cassandra / hints / HintsReader . java 
 index fe2b57a . . 0571af4 100644 
 - - - a / src / java / org / apache / cassandra / hints / HintsReader . java 
 + + + b / src / java / org / apache / cassandra / hints / HintsReader . java 
 @ @ - 83 , 6 + 83 , 8 @ @ class HintsReader implements AutoCloseable , Iterable < HintsReader . Page > 
 / / The compressed input is instantiated with the uncompressed input ' s position 
 reader = CompressedChecksummedDataInput . upgradeInput ( reader , descriptor . createCompressor ( ) ) ; 
 } 
 + else if ( descriptor . isEncrypted ( ) ) 
 + reader = EncryptedChecksummedDataInput . upgradeInput ( reader , descriptor . getCipher ( ) , descriptor . createCompressor ( ) ) ; 
 return new HintsReader ( descriptor , file , reader , rateLimiter ) ; 
 } 
 catch ( IOException e ) 
 diff - - git a / src / java / org / apache / cassandra / hints / HintsWriter . java b / src / java / org / apache / cassandra / hints / HintsWriter . java 
 index 8836258 . . b4da379 100644 
 - - - a / src / java / org / apache / cassandra / hints / HintsWriter . java 
 + + + b / src / java / org / apache / cassandra / hints / HintsWriter . java 
 @ @ - 33 , 7 + 33 , 6 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . io . FSWriteError ; 
 import org . apache . cassandra . io . util . DataOutputBuffer ; 
 import org . apache . cassandra . io . util . DataOutputBufferFixed ; 
 - import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . utils . CLibrary ; 
 import org . apache . cassandra . utils . SyncUtil ; 
 import org . apache . cassandra . utils . Throwables ; 
 @ @ - 49 , 9 + 48 , 9 @ @ class HintsWriter implements AutoCloseable 
 private final File directory ; 
 private final HintsDescriptor descriptor ; 
 private final File file ; 
 - private final FileChannel channel ; 
 + protected final FileChannel channel ; 
 private final int fd ; 
 - private final CRC32 globalCRC ; 
 + protected final CRC32 globalCRC ; 
 
 private volatile long lastSyncPosition = 0L ; 
 
 @ @ - 89 , 14 + 88 , 11 @ @ class HintsWriter implements AutoCloseable 
 throw e ; 
 } 
 
 + if ( descriptor . isEncrypted ( ) ) 
 + return new EncryptedHintsWriter ( directory , descriptor , file , channel , fd , crc ) ; 
 if ( descriptor . isCompressed ( ) ) 
 - { 
 return new CompressedHintsWriter ( directory , descriptor , file , channel , fd , crc ) ; 
 - } 
 - else 
 - { 
 - return new HintsWriter ( directory , descriptor , file , channel , fd , crc ) ; 
 - } 
 + return new HintsWriter ( directory , descriptor , file , channel , fd , crc ) ; 
 } 
 
 HintsDescriptor descriptor ( ) 
 diff - - git a / src / java / org / apache / cassandra / security / EncryptionUtils . java b / src / java / org / apache / cassandra / security / EncryptionUtils . java 
 index f95977e . . 7e72b3e 100644 
 - - - a / src / java / org / apache / cassandra / security / EncryptionUtils . java 
 + + + b / src / java / org / apache / cassandra / security / EncryptionUtils . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import com . google . common . base . Preconditions ; 
 
 import org . apache . cassandra . db . commitlog . EncryptedSegment ; 
 import org . apache . cassandra . io . compress . ICompressor ; 
 + import org . apache . cassandra . io . util . ChannelProxy ; 
 import org . apache . cassandra . io . util . FileDataInput ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 @ @ - 274 , 4 + 275 , 39 @ @ public class EncryptionUtils 
 / / nop 
 } 
 } 
 + 
 + public static class ChannelProxyReadChannel implements ReadableByteChannel 
 + { 
 + private final ChannelProxy channelProxy ; 
 + private volatile long currentPosition ; 
 + 
 + public ChannelProxyReadChannel ( ChannelProxy channelProxy , long currentPosition ) 
 + { 
 + this . channelProxy = channelProxy ; 
 + this . currentPosition = currentPosition ; 
 + } 
 + 
 + public int read ( ByteBuffer dst ) throws IOException 
 + { 
 + int bytesRead = channelProxy . read ( dst , currentPosition ) ; 
 + dst . flip ( ) ; 
 + currentPosition + = bytesRead ; 
 + return bytesRead ; 
 + } 
 + 
 + public long getCurrentPosition ( ) 
 + { 
 + return currentPosition ; 
 + } 
 + 
 + public boolean isOpen ( ) 
 + { 
 + return channelProxy . isCleanedUp ( ) ; 
 + } 
 + 
 + public void close ( ) 
 + { 
 + / / nop 
 + } 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / hints / AlteredHints . java b / test / unit / org / apache / cassandra / hints / AlteredHints . java 
 new file mode 100644 
 index 0000000 . . 23dc32a 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / hints / AlteredHints . java 
 @ @ - 0 , 0 + 1 , 129 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . hints ; 
 + 
 + import java . io . File ; 
 + import java . nio . ByteBuffer ; 
 + import java . util . ArrayList ; 
 + import java . util . Iterator ; 
 + import java . util . LinkedList ; 
 + import java . util . List ; 
 + import java . util . UUID ; 
 + import java . util . concurrent . TimeUnit ; 
 + 
 + import com . google . common . collect . ImmutableMap ; 
 + import com . google . common . io . Files ; 
 + import org . junit . Assert ; 
 + import org . junit . BeforeClass ; 
 + 
 + import org . apache . cassandra . SchemaLoader ; 
 + import org . apache . cassandra . config . CFMetaData ; 
 + import org . apache . cassandra . config . Schema ; 
 + import org . apache . cassandra . db . Mutation ; 
 + import org . apache . cassandra . db . RowUpdateBuilder ; 
 + import org . apache . cassandra . schema . KeyspaceParams ; 
 + import org . apache . cassandra . utils . UUIDGen ; 
 + 
 + import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; 
 + 
 + / * * 
 + * Base class for testing compressed and encrypted hints . 
 + * / 
 + public abstract class AlteredHints 
 + { 
 + protected static final String KEYSPACE = " hints _ compression _ test " ; 
 + private static final String TABLE = " table " ; 
 + 
 + private static Mutation createMutation ( int index , long timestamp ) 
 + { 
 + CFMetaData table = Schema . instance . getCFMetaData ( KEYSPACE , TABLE ) ; 
 + return new RowUpdateBuilder ( table , timestamp , bytes ( index ) ) 
 + . clustering ( bytes ( index ) ) 
 + . add ( " val " , bytes ( index ) ) 
 + . build ( ) ; 
 + } 
 + 
 + private static Hint createHint ( int idx , long baseTimestamp ) 
 + { 
 + long timestamp = baseTimestamp + idx ; 
 + return Hint . create ( createMutation ( idx , TimeUnit . MILLISECONDS . toMicros ( timestamp ) ) , timestamp ) ; 
 + } 
 + 
 + @ BeforeClass 
 + public static void defineSchema ( ) 
 + { 
 + SchemaLoader . prepareServer ( ) ; 
 + SchemaLoader . createKeyspace ( KEYSPACE , KeyspaceParams . simple ( 1 ) , SchemaLoader . standardCFMD ( KEYSPACE , TABLE ) ) ; 
 + } 
 + 
 + abstract ImmutableMap < String , Object > params ( ) ; 
 + abstract boolean looksLegit ( HintsWriter writer ) ; 
 + abstract boolean looksLegit ( ChecksummedDataInput checksummedDataInput ) ; 
 + 
 + public void multiFlushAndDeserializeTest ( ) throws Exception 
 + { 
 + int hintNum = 0 ; 
 + int bufferSize = HintsWriteExecutor . WRITE _ BUFFER _ SIZE ; 
 + List < Hint > hints = new LinkedList < > ( ) ; 
 + 
 + UUID hostId = UUIDGen . getTimeUUID ( ) ; 
 + long ts = System . currentTimeMillis ( ) ; 
 + 
 + HintsDescriptor descriptor = new HintsDescriptor ( hostId , ts , params ( ) ) ; 
 + File dir = Files . createTempDir ( ) ; 
 + try ( HintsWriter writer = HintsWriter . create ( dir , descriptor ) ) 
 + { 
 + Assert . assertTrue ( looksLegit ( writer ) ) ; 
 + 
 + ByteBuffer writeBuffer = ByteBuffer . allocateDirect ( bufferSize ) ; 
 + try ( HintsWriter . Session session = writer . newSession ( writeBuffer ) ) 
 + { 
 + while ( session . getBytesWritten ( ) < bufferSize * 3 ) 
 + { 
 + Hint hint = createHint ( hintNum , ts + hintNum ) ; 
 + session . append ( hint ) ; 
 + hints . add ( hint ) ; 
 + hintNum + + ; 
 + } 
 + } 
 + } 
 + 
 + try ( HintsReader reader = HintsReader . open ( new File ( dir , descriptor . fileName ( ) ) ) ) 
 + { 
 + Assert . assertTrue ( looksLegit ( reader . getInput ( ) ) ) ; 
 + List < Hint > deserialized = new ArrayList < > ( hintNum ) ; 
 + 
 + for ( HintsReader . Page page : reader ) 
 + { 
 + Iterator < Hint > iterator = page . hintsIterator ( ) ; 
 + while ( iterator . hasNext ( ) ) 
 + { 
 + deserialized . add ( iterator . next ( ) ) ; 
 + } 
 + } 
 + 
 + Assert . assertEquals ( hints . size ( ) , deserialized . size ( ) ) ; 
 + hintNum = 0 ; 
 + for ( Hint expected : hints ) 
 + { 
 + HintsTestUtil . assertHintsEqual ( expected , deserialized . get ( hintNum ) ) ; 
 + hintNum + + ; 
 + } 
 + } 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / hints / HintsCompressionTest . java b / test / unit / org / apache / cassandra / hints / HintsCompressionTest . java 
 index d6a08ca . . f82db49 100644 
 - - - a / test / unit / org / apache / cassandra / hints / HintsCompressionTest . java 
 + + + b / test / unit / org / apache / cassandra / hints / HintsCompressionTest . java 
 @ @ - 18 , 65 + 18 , 20 @ @ 
 
 package org . apache . cassandra . hints ; 
 
 - import java . io . File ; 
 - import java . nio . ByteBuffer ; 
 - import java . util . ArrayList ; 
 - import java . util . Iterator ; 
 - import java . util . LinkedList ; 
 - import java . util . List ; 
 - import java . util . UUID ; 
 - import java . util . concurrent . TimeUnit ; 
 - 
 import com . google . common . collect . ImmutableMap ; 
 - import com . google . common . io . Files ; 
 - import org . junit . Assert ; 
 - import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 
 - import org . apache . cassandra . SchemaLoader ; 
 - import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . ParameterizedClass ; 
 - import org . apache . cassandra . config . Schema ; 
 - import org . apache . cassandra . db . Mutation ; 
 - import org . apache . cassandra . db . RowUpdateBuilder ; 
 import org . apache . cassandra . io . compress . DeflateCompressor ; 
 import org . apache . cassandra . io . compress . ICompressor ; 
 import org . apache . cassandra . io . compress . LZ4Compressor ; 
 import org . apache . cassandra . io . compress . SnappyCompressor ; 
 - import org . apache . cassandra . schema . KeyspaceParams ; 
 - import org . apache . cassandra . utils . UUIDGen ; 
 - 
 - import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; 
 
 - public class HintsCompressionTest 
 + public class HintsCompressionTest extends AlteredHints 
 { 
 - private static final String KEYSPACE = " hints _ compression _ test " ; 
 - private static final String TABLE = " table " ; 
 - 
 - 
 - private static Mutation createMutation ( int index , long timestamp ) 
 - { 
 - CFMetaData table = Schema . instance . getCFMetaData ( KEYSPACE , TABLE ) ; 
 - return new RowUpdateBuilder ( table , timestamp , bytes ( index ) ) 
 - . clustering ( bytes ( index ) ) 
 - . add ( " val " , bytes ( index ) ) 
 - . build ( ) ; 
 - } 
 + private Class < ? extends ICompressor > compressorClass ; 
 
 - private static Hint createHint ( int idx , long baseTimestamp ) 
 - { 
 - long timestamp = baseTimestamp + idx ; 
 - return Hint . create ( createMutation ( idx , TimeUnit . MILLISECONDS . toMicros ( timestamp ) ) , timestamp ) ; 
 - } 
 - 
 - @ BeforeClass 
 - public static void defineSchema ( ) 
 - { 
 - SchemaLoader . prepareServer ( ) ; 
 - SchemaLoader . createKeyspace ( KEYSPACE , KeyspaceParams . simple ( 1 ) , SchemaLoader . standardCFMD ( KEYSPACE , TABLE ) ) ; 
 - } 
 - 
 - private ImmutableMap < String , Object > params ( Class < ? extends ICompressor > compressorClass ) 
 + ImmutableMap < String , Object > params ( ) 
 { 
 ImmutableMap < String , Object > compressionParams = ImmutableMap . < String , Object > builder ( ) 
 . put ( ParameterizedClass . CLASS _ NAME , compressorClass . getSimpleName ( ) ) 
 @ @ - 86 , 72 + 41 , 40 @ @ public class HintsCompressionTest 
 . build ( ) ; 
 } 
 
 - public void multiFlushAndDeserializeTest ( Class < ? extends ICompressor > compressorClass ) throws Exception 
 + boolean looksLegit ( HintsWriter writer ) 
 { 
 - int hintNum = 0 ; 
 - int bufferSize = HintsWriteExecutor . WRITE _ BUFFER _ SIZE ; 
 - List < Hint > hints = new LinkedList < > ( ) ; 
 - 
 - UUID hostId = UUIDGen . getTimeUUID ( ) ; 
 - long ts = System . currentTimeMillis ( ) ; 
 - 
 - HintsDescriptor descriptor = new HintsDescriptor ( hostId , ts , params ( compressorClass ) ) ; 
 - File dir = Files . createTempDir ( ) ; 
 - try ( HintsWriter writer = HintsWriter . create ( dir , descriptor ) ) 
 - { 
 - assert writer instanceof CompressedHintsWriter ; 
 - 
 - ByteBuffer writeBuffer = ByteBuffer . allocateDirect ( bufferSize ) ; 
 - try ( HintsWriter . Session session = writer . newSession ( writeBuffer ) ) 
 - { 
 - while ( session . getBytesWritten ( ) < bufferSize * 3 ) 
 - { 
 - Hint hint = createHint ( hintNum , ts + hintNum ) ; 
 - session . append ( hint ) ; 
 - hints . add ( hint ) ; 
 - hintNum + + ; 
 - } 
 - } 
 - } 
 - 
 - try ( HintsReader reader = HintsReader . open ( new File ( dir , descriptor . fileName ( ) ) ) ) 
 - { 
 - List < Hint > deserialized = new ArrayList < > ( hintNum ) ; 
 - 
 - for ( HintsReader . Page page : reader ) 
 - { 
 - Iterator < Hint > iterator = page . hintsIterator ( ) ; 
 - while ( iterator . hasNext ( ) ) 
 - { 
 - deserialized . add ( iterator . next ( ) ) ; 
 - } 
 - } 
 + if ( ! ( writer instanceof CompressedHintsWriter ) ) 
 + return false ; 
 + CompressedHintsWriter compressedHintsWriter = ( CompressedHintsWriter ) writer ; 
 + return compressedHintsWriter . getCompressor ( ) . getClass ( ) . isAssignableFrom ( compressorClass ) ; 
 + } 
 
 - Assert . assertEquals ( hints . size ( ) , deserialized . size ( ) ) ; 
 - hintNum = 0 ; 
 - for ( Hint expected : hints ) 
 - { 
 - HintsTestUtil . assertHintsEqual ( expected , deserialized . get ( hintNum ) ) ; 
 - hintNum + + ; 
 - } 
 - } 
 + boolean looksLegit ( ChecksummedDataInput checksummedDataInput ) 
 + { 
 + if ( ! ( checksummedDataInput instanceof CompressedChecksummedDataInput ) ) 
 + return false ; 
 + CompressedChecksummedDataInput compressedChecksummedDataInput = ( CompressedChecksummedDataInput ) checksummedDataInput ; 
 + return compressedChecksummedDataInput . getCompressor ( ) . getClass ( ) . isAssignableFrom ( compressorClass ) ; 
 } 
 
 @ Test 
 public void lz4Compressor ( ) throws Exception 
 { 
 - multiFlushAndDeserializeTest ( LZ4Compressor . class ) ; 
 + compressorClass = LZ4Compressor . class ; 
 + multiFlushAndDeserializeTest ( ) ; 
 } 
 
 @ Test 
 public void snappyCompressor ( ) throws Exception 
 { 
 - multiFlushAndDeserializeTest ( SnappyCompressor . class ) ; 
 + compressorClass = SnappyCompressor . class ; 
 + multiFlushAndDeserializeTest ( ) ; 
 } 
 
 @ Test 
 public void deflateCompressor ( ) throws Exception 
 { 
 - multiFlushAndDeserializeTest ( DeflateCompressor . class ) ; 
 + compressorClass = DeflateCompressor . class ; 
 + multiFlushAndDeserializeTest ( ) ; 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / hints / HintsEncryptionTest . java b / test / unit / org / apache / cassandra / hints / HintsEncryptionTest . java 
 new file mode 100644 
 index 0000000 . . 83b8481 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / hints / HintsEncryptionTest . java 
 @ @ - 0 , 0 + 1 , 81 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . hints ; 
 + 
 + import java . util . Arrays ; 
 + 
 + import javax . crypto . Cipher ; 
 + 
 + import com . google . common . collect . ImmutableMap ; 
 + import org . junit . Before ; 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . security . EncryptionContext ; 
 + import org . apache . cassandra . security . EncryptionContextGenerator ; 
 + 
 + public class HintsEncryptionTest extends AlteredHints 
 + { 
 + EncryptionContext encryptionContext ; 
 + Cipher cipher ; 
 + 
 + @ Before 
 + public void setup ( ) 
 + { 
 + encryptionContext = EncryptionContextGenerator . createContext ( true ) ; 
 + DatabaseDescriptor . setEncryptionContext ( encryptionContext ) ; 
 + } 
 + 
 + @ Test 
 + public void encyptedHints ( ) throws Exception 
 + { 
 + multiFlushAndDeserializeTest ( ) ; 
 + } 
 + 
 + boolean looksLegit ( HintsWriter writer ) 
 + { 
 + if ( ! ( writer instanceof EncryptedHintsWriter ) ) 
 + return false ; 
 + 
 + EncryptedHintsWriter encryptedHintsWriter = ( EncryptedHintsWriter ) writer ; 
 + cipher = encryptedHintsWriter . getCipher ( ) ; 
 + 
 + return encryptedHintsWriter . getCompressor ( ) . getClass ( ) . isAssignableFrom ( encryptionContext . getCompressor ( ) . getClass ( ) ) ; 
 + } 
 + 
 + boolean looksLegit ( ChecksummedDataInput checksummedDataInput ) 
 + { 
 + if ( ! ( checksummedDataInput instanceof EncryptedChecksummedDataInput ) ) 
 + return false ; 
 + 
 + EncryptedChecksummedDataInput encryptedDataInput = ( EncryptedChecksummedDataInput ) checksummedDataInput ; 
 + 
 + return Arrays . equals ( cipher . getIV ( ) , encryptedDataInput . getCipher ( ) . getIV ( ) ) & & 
 + encryptedDataInput . getCompressor ( ) . getClass ( ) . isAssignableFrom ( encryptionContext . getCompressor ( ) . getClass ( ) ) ; 
 + } 
 + 
 + ImmutableMap < String , Object > params ( ) 
 + { 
 + ImmutableMap < String , Object > compressionParams = ImmutableMap . < String , Object > builder ( ) 
 + . putAll ( encryptionContext . toHeaderParameters ( ) ) 
 + . build ( ) ; 
 + return ImmutableMap . < String , Object > builder ( ) 
 + . put ( HintsDescriptor . ENCRYPTION , compressionParams ) 
 + . build ( ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 7be913e . . 7c5a752 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 2 , 6 + 2 , 8 @ @ 
 * add command to stop compactions ( CASSANDRA - 1740 ) 
 * filter out unavailable cipher suites when using encryption ( CASSANDRA - 3178 ) 
 * ( HADOOP ) add old - style api support for CFIF and CFRR ( CASSANDRA - 2799 ) 
 + * Support TimeUUIDType column names in Stress . java tool ( CASSANDRA - 3541 ) 
 + 
 
 1 . 0 . 5 
 * revert CASSANDRA - 3407 ( see CASSANDRA - 3540 ) 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / Session . java b / tools / stress / src / org / apache / cassandra / stress / Session . java 
 index abbea50 . . ddc6a69 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / Session . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / Session . java 
 @ @ - 27 , 9 + 27 , 7 @ @ import java . util . concurrent . atomic . AtomicLong ; 
 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . ConfigurationException ; 
 - import org . apache . cassandra . db . compaction . AbstractCompactionStrategy ; 
 - import org . apache . cassandra . db . marshal . AbstractType ; 
 - import org . apache . cassandra . db . marshal . TypeParser ; 
 + import org . apache . cassandra . db . marshal . * ; 
 import org . apache . commons . cli . * ; 
 
 import org . apache . cassandra . db . ColumnFamilyType ; 
 @ @ - 50 , 6 + 48 , 8 @ @ public class Session implements Serializable 
 public static final String DEFAULT _ COMPARATOR = " AsciiType " ; 
 public static final String DEFAULT _ VALIDATOR = " BytesType " ; 
 
 + private static InetAddress localInetAddress ; 
 + 
 public final AtomicInteger operations ; 
 public final AtomicInteger keys ; 
 public final AtomicLong latency ; 
 @ @ - 89 , 6 + 89 , 7 @ @ public class Session implements Serializable 
 availableOptions . addOption ( " I " , " compression " , true , " Specify the compression to use for sstable , default : no compression " ) ; 
 availableOptions . addOption ( " Q " , " query - names " , true , " Comma - separated list of column names to retrieve from each row . " ) ; 
 availableOptions . addOption ( " Z " , " compaction - strategy " , true , " CompactionStrategy to use . " ) ; 
 + availableOptions . addOption ( " U " , " comparator " , true , " Column Comparator to use . Currently supported types are : TimeUUIDType , AsciiType , UTF8Type . " ) ; 
 } 
 
 private int numKeys = 1000 * 1000 ; 
 @ @ - 131 , 6 + 132 , 8 @ @ public class Session implements Serializable 
 protected float sigma ; 
 
 public final InetAddress sendToDaemon ; 
 + public final String comparator ; 
 + public final boolean timeUUIDComparator ; 
 
 public Session ( String [ ] arguments ) throws IllegalArgumentException 
 { 
 @ @ - 321 , 6 + 324 , 35 @ @ public class Session implements Serializable 
 System . exit ( 1 ) ; 
 } 
 } 
 + 
 + if ( cmd . hasOption ( " U " ) ) 
 + { 
 + AbstractType parsed = null ; 
 + 
 + try 
 + { 
 + parsed = TypeParser . parse ( cmd . getOptionValue ( " U " ) ) ; 
 + } 
 + catch ( ConfigurationException e ) 
 + { 
 + System . err . println ( e . getMessage ( ) ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + 
 + comparator = cmd . getOptionValue ( " U " ) ; 
 + timeUUIDComparator = parsed instanceof TimeUUIDType ; 
 + 
 + if ( ! ( parsed instanceof TimeUUIDType | | parsed instanceof AsciiType | | parsed instanceof UTF8Type ) ) 
 + { 
 + System . err . println ( " Currently supported types are : TimeUUIDType , AsciiType , UTF8Type . " ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + } 
 + else 
 + { 
 + comparator = null ; 
 + timeUUIDComparator = false ; 
 + } 
 } 
 catch ( ParseException e ) 
 { 
 @ @ - 464 , 6 + 496 , 7 @ @ public class Session implements Serializable 
 public void createKeySpaces ( ) 
 { 
 KsDef keyspace = new KsDef ( ) ; 
 + String defaultComparator = comparator = = null ? DEFAULT _ COMPARATOR : comparator ; 
 
 / / column family for standard columns 
 CfDef standardCfDef = new CfDef ( " Keyspace1 " , " Standard1 " ) ; 
 @ @ - 471 , 7 + 504 , 7 @ @ public class Session implements Serializable 
 if ( compression ! = null ) 
 compressionOptions . put ( " sstable _ compression " , compression ) ; 
 
 - standardCfDef . setComparator _ type ( DEFAULT _ COMPARATOR ) 
 + standardCfDef . setComparator _ type ( defaultComparator ) 
 . setDefault _ validation _ class ( DEFAULT _ VALIDATOR ) 
 . setCompression _ options ( compressionOptions ) ; 
 
 @ @ - 485 , 7 + 518 , 7 @ @ public class Session implements Serializable 
 / / column family with super columns 
 CfDef superCfDef = new CfDef ( " Keyspace1 " , " Super1 " ) . setColumn _ type ( " Super " ) ; 
 superCfDef . setComparator _ type ( DEFAULT _ COMPARATOR ) 
 - . setSubcomparator _ type ( DEFAULT _ COMPARATOR ) 
 + . setSubcomparator _ type ( defaultComparator ) 
 . setDefault _ validation _ class ( DEFAULT _ VALIDATOR ) 
 . setCompression _ options ( compressionOptions ) ; 
 
 @ @ - 574 , 4 + 607 , 20 @ @ public class Session implements Serializable 
 return client ; 
 } 
 
 + public static InetAddress getLocalAddress ( ) 
 + { 
 + if ( localInetAddress = = null ) 
 + { 
 + try 
 + { 
 + localInetAddress = InetAddress . getLocalHost ( ) ; 
 + } 
 + catch ( UnknownHostException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + return localInetAddress ; 
 + } 
 } 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / Inserter . java b / tools / stress / src / org / apache / cassandra / stress / operations / Inserter . java 
 index 45d33cb . . c81df6f 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / operations / Inserter . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / operations / Inserter . java 
 @ @ - 52 , 9 + 52 , 9 @ @ public class Inserter extends Operation 
 
 for ( int i = 0 ; i < session . getColumnsPerKey ( ) ; i + + ) 
 { 
 - String columnName = ( " C " + Integer . toString ( i ) ) ; 
 - ByteBuffer columnValue = values . get ( i % values . size ( ) ) ; 
 - columns . add ( new Column ( ByteBufferUtil . bytes ( columnName ) ) . setValue ( columnValue ) . setTimestamp ( System . currentTimeMillis ( ) ) ) ; 
 + columns . add ( new Column ( columnName ( i , session . timeUUIDComparator ) ) 
 + . setValue ( values . get ( i % values . size ( ) ) ) 
 + . setTimestamp ( System . currentTimeMillis ( ) ) ) ; 
 } 
 
 if ( session . getColumnFamilyType ( ) = = ColumnFamilyType . Super ) 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / util / Operation . java b / tools / stress / src / org / apache / cassandra / stress / util / Operation . java 
 index 10b97ad . . dd5128f 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / util / Operation . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / util / Operation . java 
 @ @ - 27 , 11 + 27 , 14 @ @ import java . util . Random ; 
 
 import static com . google . common . base . Charsets . UTF _ 8 ; 
 
 + import org . apache . cassandra . db . marshal . TimeUUIDType ; 
 import org . apache . cassandra . stress . Session ; 
 import org . apache . cassandra . stress . Stress ; 
 import org . apache . cassandra . thrift . Cassandra ; 
 import org . apache . cassandra . thrift . InvalidRequestException ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 + import org . apache . cassandra . utils . UUIDGen ; 
 
 public abstract class Operation 
 { 
 @ @ - 200 , 6 + 203 , 13 @ @ public abstract class Operation 
 return result . toString ( ) ; 
 } 
 
 + protected ByteBuffer columnName ( int index , boolean timeUUIDComparator ) 
 + { 
 + return timeUUIDComparator 
 + ? TimeUUIDType . instance . decompose ( UUIDGen . makeType1UUIDFromHost ( Session . getLocalAddress ( ) ) ) 
 + : ByteBufferUtil . bytes ( String . format ( " C % d " , index ) ) ; 
 + } 
 + 
 protected String getExceptionMessage ( Exception e ) 
 { 
 String className = e . getClass ( ) . getSimpleName ( ) ;
