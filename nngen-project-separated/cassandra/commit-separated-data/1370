BLEU SCORE: 0.0416725164513856

TEST MSG: Speed up launch scripts on Windows
GENERATED MSG: Abort startup if ports are in use ( Windows )

TEST DIFF (one line): diff - - git a / bin / cassandra . ps1 b / bin / cassandra . ps1 <nl> index b841841 . . 5cc99aa 100644 <nl> - - - a / bin / cassandra . ps1 <nl> + + + b / bin / cassandra . ps1 <nl> @ @ - 36 , 8 + 36 , 6 @ @ usage : cassandra . ps1 [ - f ] [ - h ] [ - p pidfile ] [ - H dumpfile ] [ - D arg ] [ - E errorfile <nl> } <nl> <nl> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> - # Note : throughout these scripts we ' re replacing \ with / . This allows clean <nl> - # operation on both command - prompt and cygwin - based environments . <nl> Function Main <nl> { <nl> ValidateArguments <nl> @ @ - 289 , 89 + 287 , 28 @ @ Function VerifyPortsAreAvailable <nl> # native _ transport _ port <nl> # rpc _ port , which we ' ll match to rpc _ address <nl> # and from env : JMX _ PORT which we cache in our environment during SetCassandraEnvironment for this check <nl> - $ toMatch = @ ( " storage _ port : " , " ssl _ storage _ port : " , " native _ transport _ port : " , " rpc _ port " ) <nl> + $ yamlRegex = " storage _ port : | ssl _ storage _ port : | native _ transport _ port : | rpc _ port " <nl> $ yaml = Get - Content " $ env : CASSANDRA _ CONF \ cassandra . yaml " <nl> + $ portRegex = " : $ env : JMX _ PORT | " <nl> <nl> - $ listenAddress = " " <nl> - $ rpcAddress = " " <nl> foreach ( $ line in $ yaml ) <nl> { <nl> - if ( $ line - match " ^ listen _ address : " ) <nl> + if ( $ line - match $ yamlRegex ) <nl> { <nl> - $ args = $ line - Split " : " <nl> - $ listenAddress = $ args [ 1 ] - replace " " , " " <nl> + $ sa = $ line . Split ( " : " ) <nl> + $ portRegex = $ portRegex + " : " + ( $ sa [ 1 ] - replace " " , " " ) + " | " <nl> } <nl> - if ( $ line - match " ^ rpc _ address : " ) <nl> - { <nl> - $ args = $ line - Split " : " <nl> - $ rpcAddress = $ args [ 1 ] - replace " " , " " <nl> - } <nl> - } <nl> - if ( [ string ] : : IsNullOrEmpty ( $ listenAddress ) ) <nl> - { <nl> - Write - Error " Failed to parse listen _ address from cassandra . yaml to check open ports . Aborting startup . " <nl> - Exit <nl> - } <nl> - if ( [ string ] : : IsNullOrEmpty ( $ rpcAddress ) ) <nl> - { <nl> - Write - Error " Failed to parse rpc _ address from cassandra . yaml to check open ports . Aborting startup . " <nl> - Exit <nl> } <nl> + $ portRegex = $ portRegex . Substring ( 0 , $ portRegex . Length - 2 ) <nl> <nl> - foreach ( $ line in $ yaml ) <nl> - { <nl> - foreach ( $ match in $ toMatch ) <nl> - { <nl> - if ( $ line - match " ^ $ match " ) <nl> - { <nl> - if ( $ line . contains ( " rpc " ) ) <nl> - { <nl> - CheckPort $ rpcAddress $ line <nl> - } <nl> - else <nl> - { <nl> - CheckPort $ listenAddress $ line <nl> - } <nl> - } <nl> - } <nl> - } <nl> - if ( [ string ] : : IsNullOrEmpty ( $ env : JMX _ PORT ) ) <nl> - { <nl> - Write - Error " No JMX _ PORT is set in environment . Aborting startup . " <nl> - Exit <nl> - } <nl> - CheckPort $ listenAddress " jmx _ port : $ env : JMX _ PORT " <nl> - } <nl> + $ netstat = netstat - an <nl> <nl> - # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> - Function CheckPort ( [ string ] $ listenAddress , [ string ] $ configLine ) <nl> - { <nl> - $ split = $ configLine - Split " : " <nl> - if ( $ split . Length - ne 2 ) <nl> - { <nl> - echo " Invalid cassandra . yaml config line parsed while checking for available ports : " <nl> - echo " $ configLine " <nl> - echo " Aborting startup " <nl> - Exit <nl> - } <nl> - else <nl> + foreach ( $ line in $ netstat ) <nl> { <nl> - $ port = $ split [ 1 ] - replace " " , " " <nl> - <nl> - # start an async connect to the ip / port combo , give it 25ms , and error out if it succeeded <nl> - $ tcpobject = new - Object system . Net . Sockets . TcpClient <nl> - $ connect = $ tcpobject . BeginConnect ( $ listenAddress , $ port , $ null , $ null ) <nl> - $ wait = $ connect . AsyncWaitHandle . WaitOne ( 25 , $ false ) <nl> - <nl> - if ( ! $ wait ) <nl> - { <nl> - # still trying to connect , if it ' s not serviced in 25ms we ' ll assume it ' s not open <nl> - $ tcpobject . Close ( ) <nl> - } <nl> - else <nl> + if ( $ line - match " TCP " - and $ line - match $ portRegex ) <nl> { <nl> - $ tcpobject . EndConnect ( $ connect ) | out - Null <nl> - echo " Cassandra port already in use ( $ configLine ) . Aborting " <nl> + Write - Error " Found a port already in use . Aborting startup " <nl> + Write - Error $ line <nl> Exit <nl> } <nl> } <nl> @ @ - 391 , 6 + 328 , 7 @ @ Function ValidateArguments <nl> } <nl> } <nl> <nl> + # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> Function CheckEmptyParam ( $ param ) <nl> { <nl> if ( [ String ] : : IsNullOrEmpty ( $ param ) ) <nl> @ @ - 400 , 6 + 338 , 8 @ @ Function CheckEmptyParam ( $ param ) <nl> } <nl> } <nl> <nl> + # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> + # Populate arguments <nl> for ( $ i = 0 ; $ i - lt $ args . count ; $ i + + ) <nl> { <nl> # Skip JVM args <nl> diff - - git a / conf / cassandra - env . ps1 b / conf / cassandra - env . ps1 <nl> index ad2392e . . f6cd6bc 100644 <nl> - - - a / conf / cassandra - env . ps1 <nl> + + + b / conf / cassandra - env . ps1 <nl> @ @ - 241 , 13 + 241 , 28 @ @ Function ParseJVMInfo <nl> $ pinfo . RedirectStandardError = $ true <nl> $ pinfo . RedirectStandardOutput = $ true <nl> $ pinfo . UseShellExecute = $ false <nl> - $ pinfo . Arguments = " - version " <nl> + $ pinfo . Arguments = " - d64 - version " <nl> $ p = New - Object System . Diagnostics . Process <nl> $ p . StartInfo = $ pinfo <nl> $ p . Start ( ) | Out - Null <nl> $ p . WaitForExit ( ) <nl> $ stderr = $ p . StandardError . ReadToEnd ( ) <nl> <nl> + $ env : JVM _ ARCH = " 64 - bit " <nl> + <nl> + if ( $ stderr . Contains ( " Error " ) ) <nl> + { <nl> + # 32 - bit JVM . re - run w / out - d64 <nl> + echo " Failed 64 - bit check . Re - running to get version from 32 - bit " <nl> + $ pinfo . Arguments = " - version " <nl> + $ p = New - Object System . Diagnostics . Process <nl> + $ p . StartInfo = $ pinfo <nl> + $ p . Start ( ) | Out - Null <nl> + $ p . WaitForExit ( ) <nl> + $ stderr = $ p . StandardError . ReadToEnd ( ) <nl> + $ env : JVM _ ARCH = " 32 - bit " <nl> + } <nl> + <nl> $ sa = $ stderr . Split ( " " " " ) <nl> $ env : JVM _ VERSION = $ sa [ 1 ] <nl> <nl> @ @ - 266 , 23 + 281 , 6 @ @ Function ParseJVMInfo <nl> <nl> $ pa = $ sa [ 1 ] . Split ( " _ " ) <nl> $ env : JVM _ PATCH _ VERSION = $ pa [ 1 ] <nl> - <nl> - # get 64 - bit vs . 32 - bit <nl> - $ pinfo . Arguments = " - d64 - version " <nl> - $ pArch = New - Object System . Diagnostics . Process <nl> - $ p . StartInfo = $ pinfo <nl> - $ p . Start ( ) | Out - Null <nl> - $ p . WaitForExit ( ) <nl> - $ stderr = $ p . StandardError . ReadToEnd ( ) <nl> - <nl> - if ( $ stderr . Contains ( " Error " ) ) <nl> - { <nl> - $ env : JVM _ ARCH = " 32 - bit " <nl> - } <nl> - else <nl> - { <nl> - $ env : JVM _ ARCH = " 64 - bit " <nl> - } <nl> } <nl> <nl> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / bin / cassandra . ps1 b / bin / cassandra . ps1 
 index b841841 . . 5cc99aa 100644 
 - - - a / bin / cassandra . ps1 
 + + + b / bin / cassandra . ps1 
 @ @ - 36 , 8 + 36 , 6 @ @ usage : cassandra . ps1 [ - f ] [ - h ] [ - p pidfile ] [ - H dumpfile ] [ - D arg ] [ - E errorfile 
 } 
 
 # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 - # Note : throughout these scripts we ' re replacing \ with / . This allows clean 
 - # operation on both command - prompt and cygwin - based environments . 
 Function Main 
 { 
 ValidateArguments 
 @ @ - 289 , 89 + 287 , 28 @ @ Function VerifyPortsAreAvailable 
 # native _ transport _ port 
 # rpc _ port , which we ' ll match to rpc _ address 
 # and from env : JMX _ PORT which we cache in our environment during SetCassandraEnvironment for this check 
 - $ toMatch = @ ( " storage _ port : " , " ssl _ storage _ port : " , " native _ transport _ port : " , " rpc _ port " ) 
 + $ yamlRegex = " storage _ port : | ssl _ storage _ port : | native _ transport _ port : | rpc _ port " 
 $ yaml = Get - Content " $ env : CASSANDRA _ CONF \ cassandra . yaml " 
 + $ portRegex = " : $ env : JMX _ PORT | " 
 
 - $ listenAddress = " " 
 - $ rpcAddress = " " 
 foreach ( $ line in $ yaml ) 
 { 
 - if ( $ line - match " ^ listen _ address : " ) 
 + if ( $ line - match $ yamlRegex ) 
 { 
 - $ args = $ line - Split " : " 
 - $ listenAddress = $ args [ 1 ] - replace " " , " " 
 + $ sa = $ line . Split ( " : " ) 
 + $ portRegex = $ portRegex + " : " + ( $ sa [ 1 ] - replace " " , " " ) + " | " 
 } 
 - if ( $ line - match " ^ rpc _ address : " ) 
 - { 
 - $ args = $ line - Split " : " 
 - $ rpcAddress = $ args [ 1 ] - replace " " , " " 
 - } 
 - } 
 - if ( [ string ] : : IsNullOrEmpty ( $ listenAddress ) ) 
 - { 
 - Write - Error " Failed to parse listen _ address from cassandra . yaml to check open ports . Aborting startup . " 
 - Exit 
 - } 
 - if ( [ string ] : : IsNullOrEmpty ( $ rpcAddress ) ) 
 - { 
 - Write - Error " Failed to parse rpc _ address from cassandra . yaml to check open ports . Aborting startup . " 
 - Exit 
 } 
 + $ portRegex = $ portRegex . Substring ( 0 , $ portRegex . Length - 2 ) 
 
 - foreach ( $ line in $ yaml ) 
 - { 
 - foreach ( $ match in $ toMatch ) 
 - { 
 - if ( $ line - match " ^ $ match " ) 
 - { 
 - if ( $ line . contains ( " rpc " ) ) 
 - { 
 - CheckPort $ rpcAddress $ line 
 - } 
 - else 
 - { 
 - CheckPort $ listenAddress $ line 
 - } 
 - } 
 - } 
 - } 
 - if ( [ string ] : : IsNullOrEmpty ( $ env : JMX _ PORT ) ) 
 - { 
 - Write - Error " No JMX _ PORT is set in environment . Aborting startup . " 
 - Exit 
 - } 
 - CheckPort $ listenAddress " jmx _ port : $ env : JMX _ PORT " 
 - } 
 + $ netstat = netstat - an 
 
 - # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 - Function CheckPort ( [ string ] $ listenAddress , [ string ] $ configLine ) 
 - { 
 - $ split = $ configLine - Split " : " 
 - if ( $ split . Length - ne 2 ) 
 - { 
 - echo " Invalid cassandra . yaml config line parsed while checking for available ports : " 
 - echo " $ configLine " 
 - echo " Aborting startup " 
 - Exit 
 - } 
 - else 
 + foreach ( $ line in $ netstat ) 
 { 
 - $ port = $ split [ 1 ] - replace " " , " " 
 - 
 - # start an async connect to the ip / port combo , give it 25ms , and error out if it succeeded 
 - $ tcpobject = new - Object system . Net . Sockets . TcpClient 
 - $ connect = $ tcpobject . BeginConnect ( $ listenAddress , $ port , $ null , $ null ) 
 - $ wait = $ connect . AsyncWaitHandle . WaitOne ( 25 , $ false ) 
 - 
 - if ( ! $ wait ) 
 - { 
 - # still trying to connect , if it ' s not serviced in 25ms we ' ll assume it ' s not open 
 - $ tcpobject . Close ( ) 
 - } 
 - else 
 + if ( $ line - match " TCP " - and $ line - match $ portRegex ) 
 { 
 - $ tcpobject . EndConnect ( $ connect ) | out - Null 
 - echo " Cassandra port already in use ( $ configLine ) . Aborting " 
 + Write - Error " Found a port already in use . Aborting startup " 
 + Write - Error $ line 
 Exit 
 } 
 } 
 @ @ - 391 , 6 + 328 , 7 @ @ Function ValidateArguments 
 } 
 } 
 
 + # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 Function CheckEmptyParam ( $ param ) 
 { 
 if ( [ String ] : : IsNullOrEmpty ( $ param ) ) 
 @ @ - 400 , 6 + 338 , 8 @ @ Function CheckEmptyParam ( $ param ) 
 } 
 } 
 
 + # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 + # Populate arguments 
 for ( $ i = 0 ; $ i - lt $ args . count ; $ i + + ) 
 { 
 # Skip JVM args 
 diff - - git a / conf / cassandra - env . ps1 b / conf / cassandra - env . ps1 
 index ad2392e . . f6cd6bc 100644 
 - - - a / conf / cassandra - env . ps1 
 + + + b / conf / cassandra - env . ps1 
 @ @ - 241 , 13 + 241 , 28 @ @ Function ParseJVMInfo 
 $ pinfo . RedirectStandardError = $ true 
 $ pinfo . RedirectStandardOutput = $ true 
 $ pinfo . UseShellExecute = $ false 
 - $ pinfo . Arguments = " - version " 
 + $ pinfo . Arguments = " - d64 - version " 
 $ p = New - Object System . Diagnostics . Process 
 $ p . StartInfo = $ pinfo 
 $ p . Start ( ) | Out - Null 
 $ p . WaitForExit ( ) 
 $ stderr = $ p . StandardError . ReadToEnd ( ) 
 
 + $ env : JVM _ ARCH = " 64 - bit " 
 + 
 + if ( $ stderr . Contains ( " Error " ) ) 
 + { 
 + # 32 - bit JVM . re - run w / out - d64 
 + echo " Failed 64 - bit check . Re - running to get version from 32 - bit " 
 + $ pinfo . Arguments = " - version " 
 + $ p = New - Object System . Diagnostics . Process 
 + $ p . StartInfo = $ pinfo 
 + $ p . Start ( ) | Out - Null 
 + $ p . WaitForExit ( ) 
 + $ stderr = $ p . StandardError . ReadToEnd ( ) 
 + $ env : JVM _ ARCH = " 32 - bit " 
 + } 
 + 
 $ sa = $ stderr . Split ( " " " " ) 
 $ env : JVM _ VERSION = $ sa [ 1 ] 
 
 @ @ - 266 , 23 + 281 , 6 @ @ Function ParseJVMInfo 
 
 $ pa = $ sa [ 1 ] . Split ( " _ " ) 
 $ env : JVM _ PATCH _ VERSION = $ pa [ 1 ] 
 - 
 - # get 64 - bit vs . 32 - bit 
 - $ pinfo . Arguments = " - d64 - version " 
 - $ pArch = New - Object System . Diagnostics . Process 
 - $ p . StartInfo = $ pinfo 
 - $ p . Start ( ) | Out - Null 
 - $ p . WaitForExit ( ) 
 - $ stderr = $ p . StandardError . ReadToEnd ( ) 
 - 
 - if ( $ stderr . Contains ( " Error " ) ) 
 - { 
 - $ env : JVM _ ARCH = " 32 - bit " 
 - } 
 - else 
 - { 
 - $ env : JVM _ ARCH = " 64 - bit " 
 - } 
 } 
 
 # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

NEAREST DIFF:
ELIMINATEDSENTENCE
