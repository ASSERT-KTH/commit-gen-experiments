BLEU SCORE: 0.03283637368030199

TEST MSG: Allow compaction strategies to disable early open
GENERATED MSG: merge from 1 . 0

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 677ea11 . . 4361ab4 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 7 <nl> + * Allow compaction strategies to disable early open ( CASSANDRA - 11754 ) <nl> * Refactor Materialized View code ( CASSANDRA - 11475 ) <nl> * Update Java Driver ( CASSANDRA - 11615 ) <nl> Merged from 2 . 2 : <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index e9a2938 . . 98ba781 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 475 , 6 + 475 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> return getCompactionStrategyManager ( ) . createSSTableMultiWriter ( descriptor , keyCount , repairedAt , metadataCollector , header , txn ) ; <nl> } <nl> <nl> + public boolean supportsEarlyOpen ( ) <nl> + { <nl> + return compactionStrategyManager . supportsEarlyOpen ( ) ; <nl> + } <nl> + <nl> / * * call when dropping or renaming a CF . Performs mbean housekeeping and invalidates CFS to other operations * / <nl> public void invalidate ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> index 8928db5 . . c29e88e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> @ @ - 515 , 4 + 515 , 9 @ @ public abstract class AbstractCompactionStrategy <nl> { <nl> return SimpleSSTableMultiWriter . create ( descriptor , keyCount , repairedAt , cfs . metadata , meta , header , txn ) ; <nl> } <nl> + <nl> + public boolean supportsEarlyOpen ( ) <nl> + { <nl> + return true ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index 63b3cd5 . . e6208ad 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 864 , 7 + 864 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> <nl> List < SSTableReader > finished ; <nl> int nowInSec = FBUtilities . nowInSeconds ( ) ; <nl> - try ( SSTableRewriter writer = new SSTableRewriter ( txn , sstable . maxDataAge , false ) ; <nl> + try ( SSTableRewriter writer = SSTableRewriter . construct ( cfs , txn , false , sstable . maxDataAge , false ) ; <nl> ISSTableScanner scanner = cleanupStrategy . getScanner ( sstable , getRateLimiter ( ) ) ; <nl> CompactionController controller = new CompactionController ( cfs , txn . originals ( ) , getDefaultGcBefore ( cfs , nowInSec ) ) ; <nl> CompactionIterator ci = new CompactionIterator ( OperationType . CLEANUP , Collections . singletonList ( scanner ) , controller , nowInSec , UUIDGen . getTimeUUID ( ) , metrics ) ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java <nl> index f1127c9 . . 444d43d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java <nl> @ @ - 498 , 4 + 498 , 9 @ @ public class CompactionStrategyManager implements INotificationConsumer <nl> return repaired . createSSTableMultiWriter ( descriptor , keyCount , repairedAt , collector , header , txn ) ; <nl> } <nl> } <nl> + <nl> + public boolean supportsEarlyOpen ( ) <nl> + { <nl> + return repaired . supportsEarlyOpen ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / Scrubber . java b / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> index 3dea9d9 . . d824d04 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> @ @ - 147 , 7 + 147 , 7 @ @ public class Scrubber implements Closeable <nl> List < SSTableReader > finished = new ArrayList < > ( ) ; <nl> boolean completed = false ; <nl> outputHandler . output ( String . format ( " Scrubbing % s ( % s bytes ) " , sstable , dataFile . length ( ) ) ) ; <nl> - try ( SSTableRewriter writer = new SSTableRewriter ( transaction , sstable . maxDataAge , transaction . isOffline ( ) ) ) <nl> + try ( SSTableRewriter writer = SSTableRewriter . construct ( cfs , transaction , false , sstable . maxDataAge , transaction . isOffline ( ) ) ) <nl> { <nl> nextIndexKey = indexAvailable ( ) ? ByteBufferUtil . readWithShortLength ( indexFile ) : null ; <nl> if ( indexAvailable ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / Upgrader . java b / src / java / org / apache / cassandra / db / compaction / Upgrader . java <nl> index fcd1a3c . . 822bb85 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / Upgrader . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / Upgrader . java <nl> @ @ - 82 , 7 + 82 , 7 @ @ public class Upgrader <nl> { <nl> outputHandler . output ( " Upgrading " + sstable ) ; <nl> int nowInSec = FBUtilities . nowInSeconds ( ) ; <nl> - try ( SSTableRewriter writer = SSTableRewriter . constructKeepingOriginals ( transaction , keepOriginals , CompactionTask . getMaxDataAge ( transaction . originals ( ) ) , true ) ; <nl> + try ( SSTableRewriter writer = SSTableRewriter . construct ( cfs , transaction , keepOriginals , CompactionTask . getMaxDataAge ( transaction . originals ( ) ) , true ) ; <nl> AbstractCompactionStrategy . ScannerList scanners = strategyManager . getScanners ( transaction . originals ( ) ) ; <nl> CompactionIterator iter = new CompactionIterator ( transaction . opType ( ) , scanners . scanners , controller , nowInSec , UUIDGen . getTimeUUID ( ) ) ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / writers / CompactionAwareWriter . java b / src / java / org / apache / cassandra / db / compaction / writers / CompactionAwareWriter . java <nl> index 0b3b7d0 . . d33d72c 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / writers / CompactionAwareWriter . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / writers / CompactionAwareWriter . java <nl> @ @ - 63 , 8 + 63 , 7 @ @ public abstract class CompactionAwareWriter extends Transactional . AbstractTransa <nl> this . maxAge = CompactionTask . getMaxDataAge ( nonExpiredSSTables ) ; <nl> this . minRepairedAt = CompactionTask . getMinRepairedAt ( nonExpiredSSTables ) ; <nl> this . txn = txn ; <nl> - this . sstableWriter = SSTableRewriter . constructKeepingOriginals ( txn , keepOriginals , maxAge , offline ) ; <nl> - <nl> + this . sstableWriter = SSTableRewriter . construct ( cfs , txn , keepOriginals , maxAge , offline ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java <nl> index e652b9d . . f4a2e1b 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import com . google . common . annotations . VisibleForTesting ; <nl> import org . apache . cassandra . cache . InstrumentingCache ; <nl> import org . apache . cassandra . cache . KeyCacheKey ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . DecoratedKey ; <nl> import org . apache . cassandra . db . RowIndexEntry ; <nl> import org . apache . cassandra . db . rows . UnfilteredRowIterator ; <nl> @ @ - 98 , 6 + 99 , 11 @ @ public class SSTableRewriter extends Transactional . AbstractTransactional impleme <nl> return new SSTableRewriter ( transaction , maxAge , isOffline , calculateOpenInterval ( true ) , keepOriginals ) ; <nl> } <nl> <nl> + public static SSTableRewriter construct ( ColumnFamilyStore cfs , LifecycleTransaction transaction , boolean keepOriginals , long maxAge , boolean isOffline ) <nl> + { <nl> + return new SSTableRewriter ( transaction , maxAge , isOffline , calculateOpenInterval ( cfs . supportsEarlyOpen ( ) ) , keepOriginals ) ; <nl> + } <nl> + <nl> private static long calculateOpenInterval ( boolean shouldOpenEarly ) <nl> { <nl> long interval = DatabaseDescriptor . getSSTablePreempiveOpenIntervalInMB ( ) * ( 1L < < 20 ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d518830 . . 52cc2c1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 29 , 7 + 29 , 7 @ @ <nl> * add scheduler JMX metrics ( CASSANDRA - 2962 ) <nl> * add block level checksum for compressed data ( CASSANDRA - 1717 ) <nl> * make column family backed column map pluggable and introduce unsynchronized <nl> - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) <nl> + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) <nl> * refactoring of the secondary index api ( CASSANDRA - 2982 ) <nl> * make CL > ONE reads wait for digest reconciliation before returning <nl> ( CASSANDRA - 2494 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> index c316a85 . . 71c7213 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor <nl> this . reversed = reversed ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public AbstractType < ? > getComparator ( ) <nl> { <nl> return comparator ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 1239d1c . . 38bc0d7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer <nl> this . cfm = cfm ; <nl> } <nl> <nl> - public ColumnFamily cloneMeShallow ( ) <nl> + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) <nl> { <nl> - ColumnFamily cf = ColumnFamily . create ( cfm ) ; <nl> + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; <nl> / / since deletion info is immutable , aliasing it is fine <nl> cf . deletionInfo . set ( deletionInfo . get ( ) ) ; <nl> return cf ; <nl> } <nl> <nl> + public ColumnFamily cloneMeShallow ( ) <nl> + { <nl> + return cloneMeShallow ( columns . getFactory ( ) ) ; <nl> + } <nl> + <nl> public AbstractType getSubComparator ( ) <nl> { <nl> IColumnSerializer s = getColumnSerializer ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 0bfd1c5 . . 552d3e9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> - * tombstones that are no longer relevant . * / <nl> + / * * <nl> + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> + * tombstones that are no longer relevant . <nl> + * The returned column family won ' t be thread safe . <nl> + * / <nl> ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) <nl> { <nl> / / special case slicing the entire row : <nl> @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; <nl> if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) <nl> { <nl> - ColumnFamily cf = cached . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> if ( sc ! = null ) <nl> cf . addColumn ( sc , HeapAllocator . instance ) ; <nl> return removeDeleted ( cf , gcBefore ) ; <nl> @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> <nl> IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; <nl> - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; <nl> / / TODO this is necessary because when we collate supercolumns together , we don ' t check <nl> / / their subcolumns for relevance , so we need to do a second prune post facto here . <nl> diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> index 37f5a60 . . 624dec7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns <nl> public ISortedColumns cloneMe ( ) ; <nl> <nl> / * * <nl> + * Returns the factory used for this ISortedColumns implementation . <nl> + * / <nl> + public Factory getFactory ( ) ; <nl> + <nl> + / * * <nl> * Adds a column to this column map . <nl> * If a column with the same name is already present in the map , it will <nl> * be replaced by the newly added column . <nl> diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> index cd2488a . . 13a111a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new ThreadSafeSortedColumns ( this ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> index 34e83dc . . 6c3fc42 100644 <nl> - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new TreeMapBackedSortedColumns ( this ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 677ea11 . . 4361ab4 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 7 
 + * Allow compaction strategies to disable early open ( CASSANDRA - 11754 ) 
 * Refactor Materialized View code ( CASSANDRA - 11475 ) 
 * Update Java Driver ( CASSANDRA - 11615 ) 
 Merged from 2 . 2 : 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index e9a2938 . . 98ba781 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 475 , 6 + 475 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 return getCompactionStrategyManager ( ) . createSSTableMultiWriter ( descriptor , keyCount , repairedAt , metadataCollector , header , txn ) ; 
 } 
 
 + public boolean supportsEarlyOpen ( ) 
 + { 
 + return compactionStrategyManager . supportsEarlyOpen ( ) ; 
 + } 
 + 
 / * * call when dropping or renaming a CF . Performs mbean housekeeping and invalidates CFS to other operations * / 
 public void invalidate ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 index 8928db5 . . c29e88e 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 @ @ - 515 , 4 + 515 , 9 @ @ public abstract class AbstractCompactionStrategy 
 { 
 return SimpleSSTableMultiWriter . create ( descriptor , keyCount , repairedAt , cfs . metadata , meta , header , txn ) ; 
 } 
 + 
 + public boolean supportsEarlyOpen ( ) 
 + { 
 + return true ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index 63b3cd5 . . e6208ad 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 864 , 7 + 864 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 
 List < SSTableReader > finished ; 
 int nowInSec = FBUtilities . nowInSeconds ( ) ; 
 - try ( SSTableRewriter writer = new SSTableRewriter ( txn , sstable . maxDataAge , false ) ; 
 + try ( SSTableRewriter writer = SSTableRewriter . construct ( cfs , txn , false , sstable . maxDataAge , false ) ; 
 ISSTableScanner scanner = cleanupStrategy . getScanner ( sstable , getRateLimiter ( ) ) ; 
 CompactionController controller = new CompactionController ( cfs , txn . originals ( ) , getDefaultGcBefore ( cfs , nowInSec ) ) ; 
 CompactionIterator ci = new CompactionIterator ( OperationType . CLEANUP , Collections . singletonList ( scanner ) , controller , nowInSec , UUIDGen . getTimeUUID ( ) , metrics ) ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java 
 index f1127c9 . . 444d43d 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java 
 @ @ - 498 , 4 + 498 , 9 @ @ public class CompactionStrategyManager implements INotificationConsumer 
 return repaired . createSSTableMultiWriter ( descriptor , keyCount , repairedAt , collector , header , txn ) ; 
 } 
 } 
 + 
 + public boolean supportsEarlyOpen ( ) 
 + { 
 + return repaired . supportsEarlyOpen ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / Scrubber . java b / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 index 3dea9d9 . . d824d04 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 @ @ - 147 , 7 + 147 , 7 @ @ public class Scrubber implements Closeable 
 List < SSTableReader > finished = new ArrayList < > ( ) ; 
 boolean completed = false ; 
 outputHandler . output ( String . format ( " Scrubbing % s ( % s bytes ) " , sstable , dataFile . length ( ) ) ) ; 
 - try ( SSTableRewriter writer = new SSTableRewriter ( transaction , sstable . maxDataAge , transaction . isOffline ( ) ) ) 
 + try ( SSTableRewriter writer = SSTableRewriter . construct ( cfs , transaction , false , sstable . maxDataAge , transaction . isOffline ( ) ) ) 
 { 
 nextIndexKey = indexAvailable ( ) ? ByteBufferUtil . readWithShortLength ( indexFile ) : null ; 
 if ( indexAvailable ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / Upgrader . java b / src / java / org / apache / cassandra / db / compaction / Upgrader . java 
 index fcd1a3c . . 822bb85 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / Upgrader . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / Upgrader . java 
 @ @ - 82 , 7 + 82 , 7 @ @ public class Upgrader 
 { 
 outputHandler . output ( " Upgrading " + sstable ) ; 
 int nowInSec = FBUtilities . nowInSeconds ( ) ; 
 - try ( SSTableRewriter writer = SSTableRewriter . constructKeepingOriginals ( transaction , keepOriginals , CompactionTask . getMaxDataAge ( transaction . originals ( ) ) , true ) ; 
 + try ( SSTableRewriter writer = SSTableRewriter . construct ( cfs , transaction , keepOriginals , CompactionTask . getMaxDataAge ( transaction . originals ( ) ) , true ) ; 
 AbstractCompactionStrategy . ScannerList scanners = strategyManager . getScanners ( transaction . originals ( ) ) ; 
 CompactionIterator iter = new CompactionIterator ( transaction . opType ( ) , scanners . scanners , controller , nowInSec , UUIDGen . getTimeUUID ( ) ) ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / writers / CompactionAwareWriter . java b / src / java / org / apache / cassandra / db / compaction / writers / CompactionAwareWriter . java 
 index 0b3b7d0 . . d33d72c 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / writers / CompactionAwareWriter . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / writers / CompactionAwareWriter . java 
 @ @ - 63 , 8 + 63 , 7 @ @ public abstract class CompactionAwareWriter extends Transactional . AbstractTransa 
 this . maxAge = CompactionTask . getMaxDataAge ( nonExpiredSSTables ) ; 
 this . minRepairedAt = CompactionTask . getMinRepairedAt ( nonExpiredSSTables ) ; 
 this . txn = txn ; 
 - this . sstableWriter = SSTableRewriter . constructKeepingOriginals ( txn , keepOriginals , maxAge , offline ) ; 
 - 
 + this . sstableWriter = SSTableRewriter . construct ( cfs , txn , keepOriginals , maxAge , offline ) ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java 
 index e652b9d . . f4a2e1b 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import com . google . common . annotations . VisibleForTesting ; 
 import org . apache . cassandra . cache . InstrumentingCache ; 
 import org . apache . cassandra . cache . KeyCacheKey ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . DecoratedKey ; 
 import org . apache . cassandra . db . RowIndexEntry ; 
 import org . apache . cassandra . db . rows . UnfilteredRowIterator ; 
 @ @ - 98 , 6 + 99 , 11 @ @ public class SSTableRewriter extends Transactional . AbstractTransactional impleme 
 return new SSTableRewriter ( transaction , maxAge , isOffline , calculateOpenInterval ( true ) , keepOriginals ) ; 
 } 
 
 + public static SSTableRewriter construct ( ColumnFamilyStore cfs , LifecycleTransaction transaction , boolean keepOriginals , long maxAge , boolean isOffline ) 
 + { 
 + return new SSTableRewriter ( transaction , maxAge , isOffline , calculateOpenInterval ( cfs . supportsEarlyOpen ( ) ) , keepOriginals ) ; 
 + } 
 + 
 private static long calculateOpenInterval ( boolean shouldOpenEarly ) 
 { 
 long interval = DatabaseDescriptor . getSSTablePreempiveOpenIntervalInMB ( ) * ( 1L < < 20 ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d518830 . . 52cc2c1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 29 , 7 + 29 , 7 @ @ 
 * add scheduler JMX metrics ( CASSANDRA - 2962 ) 
 * add block level checksum for compressed data ( CASSANDRA - 1717 ) 
 * make column family backed column map pluggable and introduce unsynchronized 
 - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) 
 + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) 
 * refactoring of the secondary index api ( CASSANDRA - 2982 ) 
 * make CL > ONE reads wait for digest reconciliation before returning 
 ( CASSANDRA - 2494 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 index c316a85 . . 71c7213 100644 
 - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor 
 this . reversed = reversed ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public AbstractType < ? > getComparator ( ) 
 { 
 return comparator ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 1239d1c . . 38bc0d7 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer 
 this . cfm = cfm ; 
 } 
 
 - public ColumnFamily cloneMeShallow ( ) 
 + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) 
 { 
 - ColumnFamily cf = ColumnFamily . create ( cfm ) ; 
 + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; 
 / / since deletion info is immutable , aliasing it is fine 
 cf . deletionInfo . set ( deletionInfo . get ( ) ) ; 
 return cf ; 
 } 
 
 + public ColumnFamily cloneMeShallow ( ) 
 + { 
 + return cloneMeShallow ( columns . getFactory ( ) ) ; 
 + } 
 + 
 public AbstractType getSubComparator ( ) 
 { 
 IColumnSerializer s = getColumnSerializer ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 0bfd1c5 . . 552d3e9 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 - * tombstones that are no longer relevant . * / 
 + / * * 
 + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 + * tombstones that are no longer relevant . 
 + * The returned column family won ' t be thread safe . 
 + * / 
 ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) 
 { 
 / / special case slicing the entire row : 
 @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; 
 if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) 
 { 
 - ColumnFamily cf = cached . cloneMeShallow ( ) ; 
 + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 if ( sc ! = null ) 
 cf . addColumn ( sc , HeapAllocator . instance ) ; 
 return removeDeleted ( cf , gcBefore ) ; 
 @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 
 IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; 
 - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; 
 + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; 
 / / TODO this is necessary because when we collate supercolumns together , we don ' t check 
 / / their subcolumns for relevance , so we need to do a second prune post facto here . 
 diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 index 37f5a60 . . 624dec7 100644 
 - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns 
 public ISortedColumns cloneMe ( ) ; 
 
 / * * 
 + * Returns the factory used for this ISortedColumns implementation . 
 + * / 
 + public Factory getFactory ( ) ; 
 + 
 + / * * 
 * Adds a column to this column map . 
 * If a column with the same name is already present in the map , it will 
 * be replaced by the newly added column . 
 diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 index cd2488a . . 13a111a 100644 
 - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new ThreadSafeSortedColumns ( this ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 index 34e83dc . . 6c3fc42 100644 
 - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new TreeMapBackedSortedColumns ( this ) ;
