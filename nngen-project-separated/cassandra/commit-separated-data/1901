BLEU SCORE: 0.024615130620079664

TEST MSG: Expose EstimatedHistogram metrics for range slices
GENERATED MSG: add jmx histogram of sstables accessed per read .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 494376d . . 695ae6f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 3 <nl> + * Expose EstimatedHistogram metrics for range slices ( CASSANDRA - 8627 ) <nl> * ( cqlsh ) Escape clqshrc passwords properly ( CASSANDRA - 8618 ) <nl> * Fix NPE when passing wrong argument in ALTER TABLE statement ( CASSANDRA - 8355 ) <nl> * Pig : Refactor and deprecate CqlStorage ( CASSANDRA - 8599 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index a92c9c2 . . af8f0ed 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1486 , 6 + 1486 , 31 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> return metric . writeLatency . recentLatencyHistogram . getBuckets ( true ) ; <nl> } <nl> <nl> + public long getRangeCount ( ) <nl> + { <nl> + return metric . rangeLatency . latency . count ( ) ; <nl> + } <nl> + <nl> + public double getRecentRangeLatencyMicros ( ) <nl> + { <nl> + return metric . rangeLatency . getRecentLatency ( ) ; <nl> + } <nl> + <nl> + public long [ ] getLifetimeRangeLatencyHistogramMicros ( ) <nl> + { <nl> + return metric . rangeLatency . totalLatencyHistogram . getBuckets ( false ) ; <nl> + } <nl> + <nl> + public long [ ] getRecentRangeLatencyHistogramMicros ( ) <nl> + { <nl> + return metric . rangeLatency . recentLatencyHistogram . getBuckets ( true ) ; <nl> + } <nl> + <nl> + public long getTotalRangeLatencyMicros ( ) <nl> + { <nl> + return metric . rangeLatency . totalLatency . count ( ) ; <nl> + } <nl> + <nl> public ColumnFamily getColumnFamily ( DecoratedKey key , <nl> Composite start , <nl> Composite finish , <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> index 1e9acc5 . . 3418b26 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> @ @ - 146 , 6 + 146 , 41 @ @ public interface ColumnFamilyStoreMBean <nl> public double getRecentWriteLatencyMicros ( ) ; <nl> <nl> / * * <nl> + * @ see org . apache . cassandra . metrics . ColumnFamilyMetrics # rangeLatency <nl> + * @ return the number of range slice operations on this column family <nl> + * / <nl> + @ Deprecated <nl> + public long getRangeCount ( ) ; <nl> + <nl> + / * * <nl> + * @ see org . apache . cassandra . metrics . ColumnFamilyMetrics # rangeLatency <nl> + * @ return total range slice latency ( divide by getRangeCount ( ) for average ) <nl> + * / <nl> + @ Deprecated <nl> + public long getTotalRangeLatencyMicros ( ) ; <nl> + <nl> + / * * <nl> + * @ see org . apache . cassandra . metrics . ColumnFamilyMetrics # rangeLatency <nl> + * @ return an array representing the latency histogram <nl> + * / <nl> + @ Deprecated <nl> + public long [ ] getLifetimeRangeLatencyHistogramMicros ( ) ; <nl> + <nl> + / * * <nl> + * @ see org . apache . cassandra . metrics . ColumnFamilyMetrics # rangeLatency <nl> + * @ return an array representing the latency histogram <nl> + * / <nl> + @ Deprecated <nl> + public long [ ] getRecentRangeLatencyHistogramMicros ( ) ; <nl> + <nl> + / * * <nl> + * @ see org . apache . cassandra . metrics . ColumnFamilyMetrics # rangeLatency <nl> + * @ return average latency per range slice operation since the last call <nl> + * / <nl> + @ Deprecated <nl> + public double getRecentRangeLatencyMicros ( ) ; <nl> + <nl> + / * * <nl> * @ see org . apache . cassandra . metrics . ColumnFamilyMetrics # pendingFlushes <nl> * @ return the estimated number of tasks pending for this column family <nl> * /
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 77c12fd . . 68a5a38 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 44 , 6 + 44 , 7 @ @ dev <nl> * fix building SSTable statistics post - stream ( CASSANDRA - 1620 ) <nl> * fix potential infinite loop in 2ary index queries ( CASSANDRA - 1623 ) <nl> * allow creating NTS keyspaces with no replicas configured ( CASSANDRA - 1626 ) <nl> + * add jmx histogram of sstables accessed per read ( CASSANDRA - 1624 ) <nl> <nl> <nl> 0 . 7 - beta2 <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 6da7681 . . e8fcb46 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 56 , 6 + 56 , 7 @ @ import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . thrift . IndexClause ; <nl> import org . apache . cassandra . thrift . IndexExpression ; <nl> import org . apache . cassandra . thrift . IndexOperator ; <nl> + import org . apache . cassandra . utils . EstimatedHistogram ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . LatencyTracker ; <nl> import org . apache . cassandra . utils . Pair ; <nl> @ @ - 127 , 6 + 128 , 10 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> private LatencyTracker readStats = new LatencyTracker ( ) ; <nl> private LatencyTracker writeStats = new LatencyTracker ( ) ; <nl> <nl> + / / counts of sstables accessed by reads <nl> + private final EstimatedHistogram recentSSTablesPerRead = new EstimatedHistogram ( 35 ) ; <nl> + private final EstimatedHistogram sstablesPerRead = new EstimatedHistogram ( 35 ) ; <nl> + <nl> public final CFMetaData metadata ; <nl> <nl> / * These are locally held copies to be changed from the config during runtime * / <nl> @ @ - 914 , 6 + 919 , 16 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> return ssTables . getSSTables ( ) ; <nl> } <nl> <nl> + public long [ ] getRecentSSTablesPerReadHistogram ( ) <nl> + { <nl> + return recentSSTablesPerRead . get ( true ) ; <nl> + } <nl> + <nl> + public long [ ] getSSTablesPerReadHistogram ( ) <nl> + { <nl> + return sstablesPerRead . get ( false ) ; <nl> + } <nl> + <nl> public long getReadCount ( ) <nl> { <nl> return readStats . getOpCount ( ) ; <nl> @ @ - 1115 , 6 + 1130 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> <nl> / * add the SSTables on disk * / <nl> + int sstablesToIterate = 0 ; <nl> for ( SSTableReader sstable : ssTables ) <nl> { <nl> iter = filter . getSSTableColumnIterator ( sstable ) ; <nl> @ @ - 1122 , 8 + 1138 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> returnCF . delete ( iter . getColumnFamily ( ) ) ; <nl> iterators . add ( iter ) ; <nl> + sstablesToIterate + + ; <nl> } <nl> } <nl> + recentSSTablesPerRead . add ( sstablesToIterate ) ; <nl> + sstablesPerRead . add ( sstablesToIterate ) ; <nl> <nl> Comparator < IColumn > comparator = filter . filter . getColumnComparator ( getComparator ( ) ) ; <nl> Iterator collated = IteratorUtils . collatedIterator ( comparator , iterators ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> index 8f80176 . . 68666a5 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> @ @ - 62 , 6 + 62 , 16 @ @ public interface ColumnFamilyStoreMBean <nl> public Object forceFlush ( ) throws IOException ; <nl> <nl> / * * <nl> + * @ return a histogram of the number of sstable data files accessed per read : reading this property resets it <nl> + * / <nl> + public long [ ] getRecentSSTablesPerReadHistogram ( ) ; <nl> + <nl> + / * * <nl> + * @ return a histogram of the number of sstable data files accessed per read <nl> + * / <nl> + public long [ ] getSSTablesPerReadHistogram ( ) ; <nl> + <nl> + / * * <nl> * @ return the number of read operations on this column family <nl> * / <nl> public long getReadCount ( ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 494376d . . 695ae6f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 3 
 + * Expose EstimatedHistogram metrics for range slices ( CASSANDRA - 8627 ) 
 * ( cqlsh ) Escape clqshrc passwords properly ( CASSANDRA - 8618 ) 
 * Fix NPE when passing wrong argument in ALTER TABLE statement ( CASSANDRA - 8355 ) 
 * Pig : Refactor and deprecate CqlStorage ( CASSANDRA - 8599 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index a92c9c2 . . af8f0ed 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1486 , 6 + 1486 , 31 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 return metric . writeLatency . recentLatencyHistogram . getBuckets ( true ) ; 
 } 
 
 + public long getRangeCount ( ) 
 + { 
 + return metric . rangeLatency . latency . count ( ) ; 
 + } 
 + 
 + public double getRecentRangeLatencyMicros ( ) 
 + { 
 + return metric . rangeLatency . getRecentLatency ( ) ; 
 + } 
 + 
 + public long [ ] getLifetimeRangeLatencyHistogramMicros ( ) 
 + { 
 + return metric . rangeLatency . totalLatencyHistogram . getBuckets ( false ) ; 
 + } 
 + 
 + public long [ ] getRecentRangeLatencyHistogramMicros ( ) 
 + { 
 + return metric . rangeLatency . recentLatencyHistogram . getBuckets ( true ) ; 
 + } 
 + 
 + public long getTotalRangeLatencyMicros ( ) 
 + { 
 + return metric . rangeLatency . totalLatency . count ( ) ; 
 + } 
 + 
 public ColumnFamily getColumnFamily ( DecoratedKey key , 
 Composite start , 
 Composite finish , 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 index 1e9acc5 . . 3418b26 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 @ @ - 146 , 6 + 146 , 41 @ @ public interface ColumnFamilyStoreMBean 
 public double getRecentWriteLatencyMicros ( ) ; 
 
 / * * 
 + * @ see org . apache . cassandra . metrics . ColumnFamilyMetrics # rangeLatency 
 + * @ return the number of range slice operations on this column family 
 + * / 
 + @ Deprecated 
 + public long getRangeCount ( ) ; 
 + 
 + / * * 
 + * @ see org . apache . cassandra . metrics . ColumnFamilyMetrics # rangeLatency 
 + * @ return total range slice latency ( divide by getRangeCount ( ) for average ) 
 + * / 
 + @ Deprecated 
 + public long getTotalRangeLatencyMicros ( ) ; 
 + 
 + / * * 
 + * @ see org . apache . cassandra . metrics . ColumnFamilyMetrics # rangeLatency 
 + * @ return an array representing the latency histogram 
 + * / 
 + @ Deprecated 
 + public long [ ] getLifetimeRangeLatencyHistogramMicros ( ) ; 
 + 
 + / * * 
 + * @ see org . apache . cassandra . metrics . ColumnFamilyMetrics # rangeLatency 
 + * @ return an array representing the latency histogram 
 + * / 
 + @ Deprecated 
 + public long [ ] getRecentRangeLatencyHistogramMicros ( ) ; 
 + 
 + / * * 
 + * @ see org . apache . cassandra . metrics . ColumnFamilyMetrics # rangeLatency 
 + * @ return average latency per range slice operation since the last call 
 + * / 
 + @ Deprecated 
 + public double getRecentRangeLatencyMicros ( ) ; 
 + 
 + / * * 
 * @ see org . apache . cassandra . metrics . ColumnFamilyMetrics # pendingFlushes 
 * @ return the estimated number of tasks pending for this column family 
 * /

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 77c12fd . . 68a5a38 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 44 , 6 + 44 , 7 @ @ dev 
 * fix building SSTable statistics post - stream ( CASSANDRA - 1620 ) 
 * fix potential infinite loop in 2ary index queries ( CASSANDRA - 1623 ) 
 * allow creating NTS keyspaces with no replicas configured ( CASSANDRA - 1626 ) 
 + * add jmx histogram of sstables accessed per read ( CASSANDRA - 1624 ) 
 
 
 0 . 7 - beta2 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 6da7681 . . e8fcb46 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 56 , 6 + 56 , 7 @ @ import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . thrift . IndexClause ; 
 import org . apache . cassandra . thrift . IndexExpression ; 
 import org . apache . cassandra . thrift . IndexOperator ; 
 + import org . apache . cassandra . utils . EstimatedHistogram ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . LatencyTracker ; 
 import org . apache . cassandra . utils . Pair ; 
 @ @ - 127 , 6 + 128 , 10 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 private LatencyTracker readStats = new LatencyTracker ( ) ; 
 private LatencyTracker writeStats = new LatencyTracker ( ) ; 
 
 + / / counts of sstables accessed by reads 
 + private final EstimatedHistogram recentSSTablesPerRead = new EstimatedHistogram ( 35 ) ; 
 + private final EstimatedHistogram sstablesPerRead = new EstimatedHistogram ( 35 ) ; 
 + 
 public final CFMetaData metadata ; 
 
 / * These are locally held copies to be changed from the config during runtime * / 
 @ @ - 914 , 6 + 919 , 16 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 return ssTables . getSSTables ( ) ; 
 } 
 
 + public long [ ] getRecentSSTablesPerReadHistogram ( ) 
 + { 
 + return recentSSTablesPerRead . get ( true ) ; 
 + } 
 + 
 + public long [ ] getSSTablesPerReadHistogram ( ) 
 + { 
 + return sstablesPerRead . get ( false ) ; 
 + } 
 + 
 public long getReadCount ( ) 
 { 
 return readStats . getOpCount ( ) ; 
 @ @ - 1115 , 6 + 1130 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 
 / * add the SSTables on disk * / 
 + int sstablesToIterate = 0 ; 
 for ( SSTableReader sstable : ssTables ) 
 { 
 iter = filter . getSSTableColumnIterator ( sstable ) ; 
 @ @ - 1122 , 8 + 1138 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 returnCF . delete ( iter . getColumnFamily ( ) ) ; 
 iterators . add ( iter ) ; 
 + sstablesToIterate + + ; 
 } 
 } 
 + recentSSTablesPerRead . add ( sstablesToIterate ) ; 
 + sstablesPerRead . add ( sstablesToIterate ) ; 
 
 Comparator < IColumn > comparator = filter . filter . getColumnComparator ( getComparator ( ) ) ; 
 Iterator collated = IteratorUtils . collatedIterator ( comparator , iterators ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 index 8f80176 . . 68666a5 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 @ @ - 62 , 6 + 62 , 16 @ @ public interface ColumnFamilyStoreMBean 
 public Object forceFlush ( ) throws IOException ; 
 
 / * * 
 + * @ return a histogram of the number of sstable data files accessed per read : reading this property resets it 
 + * / 
 + public long [ ] getRecentSSTablesPerReadHistogram ( ) ; 
 + 
 + / * * 
 + * @ return a histogram of the number of sstable data files accessed per read 
 + * / 
 + public long [ ] getSSTablesPerReadHistogram ( ) ; 
 + 
 + / * * 
 * @ return the number of read operations on this column family 
 * / 
 public long getReadCount ( ) ;
