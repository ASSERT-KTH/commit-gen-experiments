BLEU SCORE: 0.041961149062965476

TEST MSG: CASSANDRA - 12700 : Better handle invalid system roles table
GENERATED MSG: Remove system tables accounting from schema

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6ee2ddc . . ae9ef7a 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 2 , 6 + 2 , 7 @ @ <nl> * Fix leak errors and execution rejected exceptions when draining ( CASSANDRA - 12457 ) <nl> * Fix merkle tree depth calculation ( CASSANDRA - 12580 ) <nl> * Make Collections deserialization more robust ( CASSANDRA - 12618 ) <nl> + * Better handle invalid system roles table ( CASSANDRA - 12700 ) <nl> <nl> <nl> 2 . 2 . 8 <nl> diff - - git a / src / java / org / apache / cassandra / auth / CassandraRoleManager . java b / src / java / org / apache / cassandra / auth / CassandraRoleManager . java <nl> index 3a59581 . . dbae1ba 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / CassandraRoleManager . java <nl> + + + b / src / java / org / apache / cassandra / auth / CassandraRoleManager . java <nl> @ @ - 81 , 11 + 81 , 23 @ @ public class CassandraRoleManager implements IRoleManager <nl> { <nl> public Role apply ( UntypedResultSet . Row row ) <nl> { <nl> - return new Role ( row . getString ( " role " ) , <nl> - row . getBoolean ( " is _ superuser " ) , <nl> - row . getBoolean ( " can _ login " ) , <nl> - row . has ( " member _ of " ) ? row . getSet ( " member _ of " , UTF8Type . instance ) <nl> - : Collections . < String > emptySet ( ) ) ; <nl> + try <nl> + { <nl> + return new Role ( row . getString ( " role " ) , <nl> + row . getBoolean ( " is _ superuser " ) , <nl> + row . getBoolean ( " can _ login " ) , <nl> + row . has ( " member _ of " ) ? row . getSet ( " member _ of " , UTF8Type . instance ) <nl> + : Collections . < String > emptySet ( ) ) ; <nl> + } <nl> + / / Failing to deserialize a boolean in is _ superuser or can _ login will throw an NPE <nl> + catch ( NullPointerException e ) <nl> + { <nl> + logger . warn ( " An invalid value has been detected in the { } table for role { } . If you are " + <nl> + " unable to login , you may need to disable authentication and confirm " + <nl> + " that values in that table are accurate " , AuthKeyspace . ROLES , row . getString ( " role " ) ) ; <nl> + throw new RuntimeException ( String . format ( " Invalid metadata has been detected for role % s " , row . getString ( " role " ) ) , e ) ; <nl> + } <nl> + <nl> } <nl> } ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / serializers / BooleanSerializer . java b / src / java / org / apache / cassandra / serializers / BooleanSerializer . java <nl> index dffecd6 . . 0d6580e 100644 <nl> - - - a / src / java / org / apache / cassandra / serializers / BooleanSerializer . java <nl> + + + b / src / java / org / apache / cassandra / serializers / BooleanSerializer . java <nl> @ @ - 30 , 7 + 30 , 7 @ @ public class BooleanSerializer implements TypeSerializer < Boolean > <nl> <nl> public Boolean deserialize ( ByteBuffer bytes ) <nl> { <nl> - if ( bytes . remaining ( ) = = 0 ) <nl> + if ( bytes = = null | | bytes . remaining ( ) = = 0 ) <nl> return null ; <nl> <nl> byte value = bytes . get ( bytes . position ( ) ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 12cc92a . . 48cb945 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 43 , 6 + 43 , 7 @ @ <nl> * Fix binary protocol NEW _ NODE event ( CASSANDRA - 4679 ) <nl> * Fix potential infinite loop in tombstone compaction ( CASSANDRA - 4781 ) <nl> * Remove system tables accounting from schema ( CASSANDRA - 4850 ) <nl> + * Force provided columns in clustering key order in ' CLUSTERING ORDER BY ' ( CASSANDRA - 4881 ) <nl> Merged from 1 . 1 : <nl> * add get [ Row | Key ] CacheEntries to CacheServiceMBean ( CASSANDRA - 4859 ) <nl> * fix get _ paged _ slice to wrap to next row correctly ( CASSANDRA - 4816 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateColumnFamilyStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateColumnFamilyStatement . java <nl> index 1775398 . . b8ea732 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateColumnFamilyStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateColumnFamilyStatement . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . cql3 . statements ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . ArrayList ; <nl> import java . util . HashMap ; <nl> + import java . util . LinkedHashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> <nl> @ @ - 144 , 7 + 145 , 7 @ @ public class CreateColumnFamilyStatement extends SchemaAlteringStatement <nl> <nl> private final List < List < ColumnIdentifier > > keyAliases = new ArrayList < List < ColumnIdentifier > > ( ) ; <nl> private final List < ColumnIdentifier > columnAliases = new ArrayList < ColumnIdentifier > ( ) ; <nl> - private final Map < ColumnIdentifier , Boolean > definedOrdering = new HashMap < ColumnIdentifier , Boolean > ( ) ; <nl> + private final Map < ColumnIdentifier , Boolean > definedOrdering = new LinkedHashMap < ColumnIdentifier , Boolean > ( ) ; / / Insertion ordering is important <nl> <nl> private boolean useCompactStorage ; <nl> private final Multiset < ColumnIdentifier > definedNames = HashMultiset . create ( 1 ) ; <nl> @ @ - 305 , 6 + 306 , 28 @ @ public class CreateColumnFamilyStatement extends SchemaAlteringStatement <nl> : CFDefinition . definitionType ; <nl> } <nl> <nl> + <nl> + / / If we give a clustering order , we must explicitely do so for all aliases and in the order of the PK <nl> + if ( ! definedOrdering . isEmpty ( ) ) <nl> + { <nl> + if ( definedOrdering . size ( ) > columnAliases . size ( ) ) <nl> + throw new InvalidRequestException ( " Too much columns provided for CLUSTERING ORDER " ) ; <nl> + <nl> + int i = 0 ; <nl> + for ( ColumnIdentifier id : definedOrdering . keySet ( ) ) <nl> + { <nl> + ColumnIdentifier c = columnAliases . get ( i ) ; <nl> + if ( ! id . equals ( c ) ) <nl> + { <nl> + if ( definedOrdering . containsKey ( c ) ) <nl> + throw new InvalidRequestException ( String . format ( " The order of columns in the CLUSTERING ORDER directive must be the one of the clustering key ( % s must appear before % s ) " , c , id ) ) ; <nl> + else <nl> + throw new InvalidRequestException ( String . format ( " Missing CLUSTERING ORDER for column % s " , c ) ) ; <nl> + } <nl> + + + i ; <nl> + } <nl> + } <nl> + <nl> return new ParsedStatement . Prepared ( stmt ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6ee2ddc . . ae9ef7a 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 2 , 6 + 2 , 7 @ @ 
 * Fix leak errors and execution rejected exceptions when draining ( CASSANDRA - 12457 ) 
 * Fix merkle tree depth calculation ( CASSANDRA - 12580 ) 
 * Make Collections deserialization more robust ( CASSANDRA - 12618 ) 
 + * Better handle invalid system roles table ( CASSANDRA - 12700 ) 
 
 
 2 . 2 . 8 
 diff - - git a / src / java / org / apache / cassandra / auth / CassandraRoleManager . java b / src / java / org / apache / cassandra / auth / CassandraRoleManager . java 
 index 3a59581 . . dbae1ba 100644 
 - - - a / src / java / org / apache / cassandra / auth / CassandraRoleManager . java 
 + + + b / src / java / org / apache / cassandra / auth / CassandraRoleManager . java 
 @ @ - 81 , 11 + 81 , 23 @ @ public class CassandraRoleManager implements IRoleManager 
 { 
 public Role apply ( UntypedResultSet . Row row ) 
 { 
 - return new Role ( row . getString ( " role " ) , 
 - row . getBoolean ( " is _ superuser " ) , 
 - row . getBoolean ( " can _ login " ) , 
 - row . has ( " member _ of " ) ? row . getSet ( " member _ of " , UTF8Type . instance ) 
 - : Collections . < String > emptySet ( ) ) ; 
 + try 
 + { 
 + return new Role ( row . getString ( " role " ) , 
 + row . getBoolean ( " is _ superuser " ) , 
 + row . getBoolean ( " can _ login " ) , 
 + row . has ( " member _ of " ) ? row . getSet ( " member _ of " , UTF8Type . instance ) 
 + : Collections . < String > emptySet ( ) ) ; 
 + } 
 + / / Failing to deserialize a boolean in is _ superuser or can _ login will throw an NPE 
 + catch ( NullPointerException e ) 
 + { 
 + logger . warn ( " An invalid value has been detected in the { } table for role { } . If you are " + 
 + " unable to login , you may need to disable authentication and confirm " + 
 + " that values in that table are accurate " , AuthKeyspace . ROLES , row . getString ( " role " ) ) ; 
 + throw new RuntimeException ( String . format ( " Invalid metadata has been detected for role % s " , row . getString ( " role " ) ) , e ) ; 
 + } 
 + 
 } 
 } ; 
 
 diff - - git a / src / java / org / apache / cassandra / serializers / BooleanSerializer . java b / src / java / org / apache / cassandra / serializers / BooleanSerializer . java 
 index dffecd6 . . 0d6580e 100644 
 - - - a / src / java / org / apache / cassandra / serializers / BooleanSerializer . java 
 + + + b / src / java / org / apache / cassandra / serializers / BooleanSerializer . java 
 @ @ - 30 , 7 + 30 , 7 @ @ public class BooleanSerializer implements TypeSerializer < Boolean > 
 
 public Boolean deserialize ( ByteBuffer bytes ) 
 { 
 - if ( bytes . remaining ( ) = = 0 ) 
 + if ( bytes = = null | | bytes . remaining ( ) = = 0 ) 
 return null ; 
 
 byte value = bytes . get ( bytes . position ( ) ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 12cc92a . . 48cb945 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 43 , 6 + 43 , 7 @ @ 
 * Fix binary protocol NEW _ NODE event ( CASSANDRA - 4679 ) 
 * Fix potential infinite loop in tombstone compaction ( CASSANDRA - 4781 ) 
 * Remove system tables accounting from schema ( CASSANDRA - 4850 ) 
 + * Force provided columns in clustering key order in ' CLUSTERING ORDER BY ' ( CASSANDRA - 4881 ) 
 Merged from 1 . 1 : 
 * add get [ Row | Key ] CacheEntries to CacheServiceMBean ( CASSANDRA - 4859 ) 
 * fix get _ paged _ slice to wrap to next row correctly ( CASSANDRA - 4816 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateColumnFamilyStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateColumnFamilyStatement . java 
 index 1775398 . . b8ea732 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateColumnFamilyStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateColumnFamilyStatement . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . cql3 . statements ; 
 import java . nio . ByteBuffer ; 
 import java . util . ArrayList ; 
 import java . util . HashMap ; 
 + import java . util . LinkedHashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 
 @ @ - 144 , 7 + 145 , 7 @ @ public class CreateColumnFamilyStatement extends SchemaAlteringStatement 
 
 private final List < List < ColumnIdentifier > > keyAliases = new ArrayList < List < ColumnIdentifier > > ( ) ; 
 private final List < ColumnIdentifier > columnAliases = new ArrayList < ColumnIdentifier > ( ) ; 
 - private final Map < ColumnIdentifier , Boolean > definedOrdering = new HashMap < ColumnIdentifier , Boolean > ( ) ; 
 + private final Map < ColumnIdentifier , Boolean > definedOrdering = new LinkedHashMap < ColumnIdentifier , Boolean > ( ) ; / / Insertion ordering is important 
 
 private boolean useCompactStorage ; 
 private final Multiset < ColumnIdentifier > definedNames = HashMultiset . create ( 1 ) ; 
 @ @ - 305 , 6 + 306 , 28 @ @ public class CreateColumnFamilyStatement extends SchemaAlteringStatement 
 : CFDefinition . definitionType ; 
 } 
 
 + 
 + / / If we give a clustering order , we must explicitely do so for all aliases and in the order of the PK 
 + if ( ! definedOrdering . isEmpty ( ) ) 
 + { 
 + if ( definedOrdering . size ( ) > columnAliases . size ( ) ) 
 + throw new InvalidRequestException ( " Too much columns provided for CLUSTERING ORDER " ) ; 
 + 
 + int i = 0 ; 
 + for ( ColumnIdentifier id : definedOrdering . keySet ( ) ) 
 + { 
 + ColumnIdentifier c = columnAliases . get ( i ) ; 
 + if ( ! id . equals ( c ) ) 
 + { 
 + if ( definedOrdering . containsKey ( c ) ) 
 + throw new InvalidRequestException ( String . format ( " The order of columns in the CLUSTERING ORDER directive must be the one of the clustering key ( % s must appear before % s ) " , c , id ) ) ; 
 + else 
 + throw new InvalidRequestException ( String . format ( " Missing CLUSTERING ORDER for column % s " , c ) ) ; 
 + } 
 + + + i ; 
 + } 
 + } 
 + 
 return new ParsedStatement . Prepared ( stmt ) ; 
 } 

