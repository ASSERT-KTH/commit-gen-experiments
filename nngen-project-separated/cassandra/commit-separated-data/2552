BLEU SCORE: 0.04372912656590315

TEST MSG: merge from 2 . 0
GENERATED MSG: Log a warning for large batches

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 495dab2 . . ab3278e 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 49 , 6 + 49 , 7 @ @ <nl> * Only snapshot relative SSTables when sequential repair ( CASSANDRA - 7024 ) <nl> * Require nodetool rebuild _ index to specify index names ( CASSANDRA - 7038 ) <nl> Merged from 2 . 0 : <nl> + * Log a warning for large batches ( CASSANDRA - 6487 ) <nl> * Put nodes in hibernate when join _ ring is false ( CASSANDRA - 6961 ) <nl> * Avoid early loading of non - system keyspaces before compaction - leftovers <nl> cleanup at startup ( CASSANDRA - 6913 ) <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index 2ef4523 . . 20bda79 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 480 , 6 + 480 , 11 @ @ tombstone _ failure _ threshold : 100000 <nl> # that wastefully either . <nl> column _ index _ size _ in _ kb : 64 <nl> <nl> + <nl> + # Log WARN on any batch size exceeding this value . 5kb per batch by default . <nl> + # Caution should be taken on increasing the size of this threshold as it can lead to node instability . <nl> + batch _ size _ warn _ threshold _ in _ kb : 5 <nl> + <nl> # Size limit for rows being compacted in memory . Larger rows will spill <nl> # over to disk and use a slower two - pass compaction process . A message <nl> # will be logged specifying the row key . <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index 400dad5 . . 3cf8ff8 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 130 , 6 + 130 , 7 @ @ public class Config <nl> <nl> / * if the size of columns or super - columns are more than this , indexing will kick in * / <nl> public Integer column _ index _ size _ in _ kb = 64 ; <nl> + public Integer batch _ size _ warn _ threshold _ in _ kb = 5 ; <nl> public Integer in _ memory _ compaction _ limit _ in _ mb = 64 ; <nl> public Integer concurrent _ compactors = FBUtilities . getAvailableProcessors ( ) ; <nl> public volatile Integer compaction _ throughput _ mb _ per _ sec = 16 ; <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 1e0ac0d . . 9f8a0df 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 729 , 6 + 729 , 11 @ @ public class DatabaseDescriptor <nl> return conf . column _ index _ size _ in _ kb * 1024 ; <nl> } <nl> <nl> + public static int getBatchSizeWarnThreshold ( ) <nl> + { <nl> + return conf . batch _ size _ warn _ threshold _ in _ kb * 1024 ; <nl> + } <nl> + <nl> public static Collection < String > getInitialTokens ( ) <nl> { <nl> return tokensFromString ( System . getProperty ( " cassandra . initial _ token " , conf . initial _ token ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> index 9dc2ace . . e8cee15 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> @ @ - 30 , 7 + 30 , 6 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . cql3 . statements . * ; <nl> - import org . apache . cassandra . transport . messages . ResultMessage ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . composites . * ; <nl> import org . apache . cassandra . exceptions . * ; <nl> @ @ - 38 , 6 + 37 , 7 @ @ import org . apache . cassandra . service . ClientState ; <nl> import org . apache . cassandra . service . QueryState ; <nl> import org . apache . cassandra . thrift . ThriftClientState ; <nl> import org . apache . cassandra . tracing . Tracing ; <nl> + import org . apache . cassandra . transport . messages . ResultMessage ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . MD5Digest ; <nl> import org . apache . cassandra . utils . SemanticVersion ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> index e0a81da . . 88bb644 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> @ @ - 20 , 8 + 20 , 12 @ @ package org . apache . cassandra . cql3 . statements ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> <nl> - import com . google . common . collect . Iterables ; <nl> + import com . google . common . base . Function ; <nl> + import com . google . common . collect . * ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . github . jamm . MemoryMeter ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> import org . apache . cassandra . cql3 . * ; <nl> @ @ - 49 , 6 + 53 , 7 @ @ public class BatchStatement implements CQLStatement , MeasurableForPreparedCache <nl> private final List < ModificationStatement > statements ; <nl> private final Attributes attrs ; <nl> private final boolean hasConditions ; <nl> + private static final Logger logger = LoggerFactory . getLogger ( BatchStatement . class ) ; <nl> <nl> / * * <nl> * Creates a new BatchStatement from a list of statements and a <nl> @ @ - 179 , 6 + 184 , 29 @ @ public class BatchStatement implements CQLStatement , MeasurableForPreparedCache <nl> } <nl> } <nl> <nl> + / * * <nl> + * Checks batch size to ensure threshold is met . If not , a warning is logged . <nl> + * @ param cfs ColumnFamilies that will store the batch ' s mutations . <nl> + * / <nl> + private void verifyBatchSize ( Iterable < ColumnFamily > cfs ) <nl> + { <nl> + long size = 0 ; <nl> + long warnThreshold = DatabaseDescriptor . getBatchSizeWarnThreshold ( ) ; <nl> + <nl> + for ( ColumnFamily cf : cfs ) <nl> + size + = cf . dataSize ( ) ; <nl> + <nl> + if ( size > warnThreshold ) <nl> + { <nl> + Set < String > ksCfPairs = new HashSet < > ( ) ; <nl> + for ( ColumnFamily cf : cfs ) <nl> + ksCfPairs . add ( cf . metadata ( ) . ksName + " . " + cf . metadata ( ) . cfName ) ; <nl> + <nl> + String format = " Batch of prepared statements for { } is of size { } , exceeding specified threshold of { } by { } . " ; <nl> + logger . warn ( format , ksCfPairs , size , warnThreshold , size - warnThreshold ) ; <nl> + } <nl> + } <nl> + <nl> public ResultMessage execute ( QueryState queryState , QueryOptions options ) throws RequestExecutionException , RequestValidationException <nl> { <nl> if ( options . getConsistency ( ) = = null ) <nl> @ @ - 209 , 10 + 237 , 21 @ @ public class BatchStatement implements CQLStatement , MeasurableForPreparedCache <nl> <nl> private void executeWithoutConditions ( Collection < ? extends IMutation > mutations , ConsistencyLevel cl ) throws RequestExecutionException , RequestValidationException <nl> { <nl> + / / Extract each collection of cfs from it ' s IMutation and then lazily concatenate all of them into a single Iterable . <nl> + Iterable < ColumnFamily > cfs = Iterables . concat ( Iterables . transform ( mutations , new Function < IMutation , Collection < ColumnFamily > > ( ) <nl> + { <nl> + public Collection < ColumnFamily > apply ( IMutation im ) <nl> + { <nl> + return im . getColumnFamilies ( ) ; <nl> + } <nl> + } ) ) ; <nl> + verifyBatchSize ( cfs ) ; <nl> + <nl> boolean mutateAtomic = ( type = = Type . LOGGED & & mutations . size ( ) > 1 ) ; <nl> StorageProxy . mutateWithTriggers ( mutations , cl , mutateAtomic ) ; <nl> } <nl> <nl> + <nl> private ResultMessage executeWithConditions ( BatchVariables variables , ConsistencyLevel cl , ConsistencyLevel serialCf , long now ) <nl> throws RequestExecutionException , RequestValidationException <nl> { <nl> @ @ - 261 , 6 + 300 , 7 @ @ public class BatchStatement implements CQLStatement , MeasurableForPreparedCache <nl> } <nl> } <nl> <nl> + verifyBatchSize ( Collections . singleton ( updates ) ) ; <nl> ColumnFamily result = StorageProxy . cas ( ksName , cfName , key , conditions , updates , serialCf , cl ) ; <nl> return new ResultMessage . Rows ( ModificationStatement . buildCasResultSet ( ksName , key , cfName , result , columnsWithConditions , true ) ) ; <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 495dab2 . . ab3278e 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 49 , 6 + 49 , 7 @ @ 
 * Only snapshot relative SSTables when sequential repair ( CASSANDRA - 7024 ) 
 * Require nodetool rebuild _ index to specify index names ( CASSANDRA - 7038 ) 
 Merged from 2 . 0 : 
 + * Log a warning for large batches ( CASSANDRA - 6487 ) 
 * Put nodes in hibernate when join _ ring is false ( CASSANDRA - 6961 ) 
 * Avoid early loading of non - system keyspaces before compaction - leftovers 
 cleanup at startup ( CASSANDRA - 6913 ) 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index 2ef4523 . . 20bda79 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 480 , 6 + 480 , 11 @ @ tombstone _ failure _ threshold : 100000 
 # that wastefully either . 
 column _ index _ size _ in _ kb : 64 
 
 + 
 + # Log WARN on any batch size exceeding this value . 5kb per batch by default . 
 + # Caution should be taken on increasing the size of this threshold as it can lead to node instability . 
 + batch _ size _ warn _ threshold _ in _ kb : 5 
 + 
 # Size limit for rows being compacted in memory . Larger rows will spill 
 # over to disk and use a slower two - pass compaction process . A message 
 # will be logged specifying the row key . 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index 400dad5 . . 3cf8ff8 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 130 , 6 + 130 , 7 @ @ public class Config 
 
 / * if the size of columns or super - columns are more than this , indexing will kick in * / 
 public Integer column _ index _ size _ in _ kb = 64 ; 
 + public Integer batch _ size _ warn _ threshold _ in _ kb = 5 ; 
 public Integer in _ memory _ compaction _ limit _ in _ mb = 64 ; 
 public Integer concurrent _ compactors = FBUtilities . getAvailableProcessors ( ) ; 
 public volatile Integer compaction _ throughput _ mb _ per _ sec = 16 ; 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 1e0ac0d . . 9f8a0df 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 729 , 6 + 729 , 11 @ @ public class DatabaseDescriptor 
 return conf . column _ index _ size _ in _ kb * 1024 ; 
 } 
 
 + public static int getBatchSizeWarnThreshold ( ) 
 + { 
 + return conf . batch _ size _ warn _ threshold _ in _ kb * 1024 ; 
 + } 
 + 
 public static Collection < String > getInitialTokens ( ) 
 { 
 return tokensFromString ( System . getProperty ( " cassandra . initial _ token " , conf . initial _ token ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 index 9dc2ace . . e8cee15 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 @ @ - 30 , 7 + 30 , 6 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . cql3 . statements . * ; 
 - import org . apache . cassandra . transport . messages . ResultMessage ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . composites . * ; 
 import org . apache . cassandra . exceptions . * ; 
 @ @ - 38 , 6 + 37 , 7 @ @ import org . apache . cassandra . service . ClientState ; 
 import org . apache . cassandra . service . QueryState ; 
 import org . apache . cassandra . thrift . ThriftClientState ; 
 import org . apache . cassandra . tracing . Tracing ; 
 + import org . apache . cassandra . transport . messages . ResultMessage ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . MD5Digest ; 
 import org . apache . cassandra . utils . SemanticVersion ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 index e0a81da . . 88bb644 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 @ @ - 20 , 8 + 20 , 12 @ @ package org . apache . cassandra . cql3 . statements ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 
 - import com . google . common . collect . Iterables ; 
 + import com . google . common . base . Function ; 
 + import com . google . common . collect . * ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . github . jamm . MemoryMeter ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . config . ColumnDefinition ; 
 import org . apache . cassandra . cql3 . * ; 
 @ @ - 49 , 6 + 53 , 7 @ @ public class BatchStatement implements CQLStatement , MeasurableForPreparedCache 
 private final List < ModificationStatement > statements ; 
 private final Attributes attrs ; 
 private final boolean hasConditions ; 
 + private static final Logger logger = LoggerFactory . getLogger ( BatchStatement . class ) ; 
 
 / * * 
 * Creates a new BatchStatement from a list of statements and a 
 @ @ - 179 , 6 + 184 , 29 @ @ public class BatchStatement implements CQLStatement , MeasurableForPreparedCache 
 } 
 } 
 
 + / * * 
 + * Checks batch size to ensure threshold is met . If not , a warning is logged . 
 + * @ param cfs ColumnFamilies that will store the batch ' s mutations . 
 + * / 
 + private void verifyBatchSize ( Iterable < ColumnFamily > cfs ) 
 + { 
 + long size = 0 ; 
 + long warnThreshold = DatabaseDescriptor . getBatchSizeWarnThreshold ( ) ; 
 + 
 + for ( ColumnFamily cf : cfs ) 
 + size + = cf . dataSize ( ) ; 
 + 
 + if ( size > warnThreshold ) 
 + { 
 + Set < String > ksCfPairs = new HashSet < > ( ) ; 
 + for ( ColumnFamily cf : cfs ) 
 + ksCfPairs . add ( cf . metadata ( ) . ksName + " . " + cf . metadata ( ) . cfName ) ; 
 + 
 + String format = " Batch of prepared statements for { } is of size { } , exceeding specified threshold of { } by { } . " ; 
 + logger . warn ( format , ksCfPairs , size , warnThreshold , size - warnThreshold ) ; 
 + } 
 + } 
 + 
 public ResultMessage execute ( QueryState queryState , QueryOptions options ) throws RequestExecutionException , RequestValidationException 
 { 
 if ( options . getConsistency ( ) = = null ) 
 @ @ - 209 , 10 + 237 , 21 @ @ public class BatchStatement implements CQLStatement , MeasurableForPreparedCache 
 
 private void executeWithoutConditions ( Collection < ? extends IMutation > mutations , ConsistencyLevel cl ) throws RequestExecutionException , RequestValidationException 
 { 
 + / / Extract each collection of cfs from it ' s IMutation and then lazily concatenate all of them into a single Iterable . 
 + Iterable < ColumnFamily > cfs = Iterables . concat ( Iterables . transform ( mutations , new Function < IMutation , Collection < ColumnFamily > > ( ) 
 + { 
 + public Collection < ColumnFamily > apply ( IMutation im ) 
 + { 
 + return im . getColumnFamilies ( ) ; 
 + } 
 + } ) ) ; 
 + verifyBatchSize ( cfs ) ; 
 + 
 boolean mutateAtomic = ( type = = Type . LOGGED & & mutations . size ( ) > 1 ) ; 
 StorageProxy . mutateWithTriggers ( mutations , cl , mutateAtomic ) ; 
 } 
 
 + 
 private ResultMessage executeWithConditions ( BatchVariables variables , ConsistencyLevel cl , ConsistencyLevel serialCf , long now ) 
 throws RequestExecutionException , RequestValidationException 
 { 
 @ @ - 261 , 6 + 300 , 7 @ @ public class BatchStatement implements CQLStatement , MeasurableForPreparedCache 
 } 
 } 
 
 + verifyBatchSize ( Collections . singleton ( updates ) ) ; 
 ColumnFamily result = StorageProxy . cas ( ksName , cfName , key , conditions , updates , serialCf , cl ) ; 
 return new ResultMessage . Rows ( ModificationStatement . buildCasResultSet ( ksName , key , cfName , result , columnsWithConditions , true ) ) ; 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
