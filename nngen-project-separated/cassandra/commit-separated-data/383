BLEU SCORE: 0.015445276590783498

TEST MSG: Allow CONTAINS statements filtering on the partition key and it ’ s parts
GENERATED MSG: Make reading of range tombstones more reliable

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 9b31d48 . . b13b777 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 11 . 0 <nl> + * Allow CONTAINS statements filtering on the partition key and it ’ s parts ( CASSANDRA - 13275 ) <nl> * Fall back to even ranges calculation in clusters with vnodes when tokens are distributed unevenly ( CASSANDRA - 13229 ) <nl> * Fix duration type validation to prevent overflow ( CASSANDRA - 13218 ) <nl> * Forbid unsupported creation of SASI indexes over partition key columns ( CASSANDRA - 13228 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / PartitionKeySingleRestrictionSet . java b / src / java / org / apache / cassandra / cql3 / restrictions / PartitionKeySingleRestrictionSet . java <nl> index b34ff54 . . f2b427d 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / restrictions / PartitionKeySingleRestrictionSet . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / restrictions / PartitionKeySingleRestrictionSet . java <nl> @ @ - 135 , 8 + 135 , 9 @ @ final class PartitionKeySingleRestrictionSet extends RestrictionSetWrapper imple <nl> { <nl> if ( isEmpty ( ) ) <nl> return false ; <nl> + <nl> / / slice or has unrestricted key component <nl> - return hasUnrestrictedPartitionKeyComponents ( cfm ) | | hasSlice ( ) ; <nl> + return hasUnrestrictedPartitionKeyComponents ( cfm ) | | hasSlice ( ) | | hasContains ( ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / RestrictionSet . java b / src / java / org / apache / cassandra / cql3 / restrictions / RestrictionSet . java <nl> index 3a1bcb1 . . a0816d2 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / restrictions / RestrictionSet . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / restrictions / RestrictionSet . java <nl> @ @ - 281 , 6 + 281 , 16 @ @ final class RestrictionSet implements Restrictions , Iterable < SingleRestriction > <nl> return false ; <nl> } <nl> <nl> + public boolean hasContains ( ) <nl> + { <nl> + for ( SingleRestriction restriction : this ) <nl> + { <nl> + if ( restriction . isContains ( ) ) <nl> + return true ; <nl> + } <nl> + return false ; <nl> + } <nl> + <nl> public final boolean hasSlice ( ) <nl> { <nl> for ( SingleRestriction restriction : this ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / RestrictionSetWrapper . java b / src / java / org / apache / cassandra / cql3 / restrictions / RestrictionSetWrapper . java <nl> index 996a1c4 . . 5157de0 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / restrictions / RestrictionSetWrapper . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / restrictions / RestrictionSetWrapper . java <nl> @ @ - 89 , 6 + 89 , 11 @ @ class RestrictionSetWrapper implements Restrictions <nl> return restrictions . hasIN ( ) ; <nl> } <nl> <nl> + public boolean hasContains ( ) <nl> + { <nl> + return restrictions . hasContains ( ) ; <nl> + } <nl> + <nl> public boolean hasSlice ( ) <nl> { <nl> return restrictions . hasSlice ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / Restrictions . java b / src / java / org / apache / cassandra / cql3 / restrictions / Restrictions . java <nl> index 8a5140a . . 5d11e9f 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / restrictions / Restrictions . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / restrictions / Restrictions . java <nl> @ @ - 55 , 6 + 55 , 11 @ @ public interface Restrictions extends Restriction <nl> public boolean hasIN ( ) ; <nl> <nl> / * * <nl> + * Checks if any of the underlying restrictions is a CONTAINS / CONTAINS KEY restriction . <nl> + * @ return < code > true < / code > if any of the underlying restrictions is CONTAINS , < code > false < / code > otherwise <nl> + * / <nl> + public boolean hasContains ( ) ; <nl> + / * * <nl> * Checks if any of the underlying restrictions is a slice . <nl> * @ return < code > true < / code > if any of the underlying restrictions is a slice , < code > false < / code > otherwise <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java b / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java <nl> index 8a8ee56 . . 15a090b 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java <nl> @ @ - 429 , 8 + 429 , 7 @ @ public final class StatementRestrictions <nl> / / components must have a EQ . Only the last partition key component can be in IN relation . <nl> if ( partitionKeyRestrictions . needFiltering ( cfm ) ) <nl> { <nl> - if ( ! allowFiltering & & ! forView & & ! hasQueriableIndex <nl> - & & ( partitionKeyRestrictions . hasUnrestrictedPartitionKeyComponents ( cfm ) | | partitionKeyRestrictions . hasSlice ( ) ) ) <nl> + if ( ! allowFiltering & & ! forView & & ! hasQueriableIndex ) <nl> throw new InvalidRequestException ( REQUIRES _ ALLOW _ FILTERING _ MESSAGE ) ; <nl> <nl> if ( partitionKeyRestrictions . hasIN ( ) ) <nl> @ @ - 518 , 7 + 517 , 6 @ @ public final class StatementRestrictions <nl> checkFalse ( clusteringColumnsRestrictions . hasIN ( ) & & selectsComplexColumn , <nl> " Cannot restrict clustering columns by IN relations when a collection is selected by the query " ) ; <nl> checkFalse ( clusteringColumnsRestrictions . hasContains ( ) & & ! hasQueriableIndex & & ! allowFiltering , <nl> - <nl> " Clustering columns can only be restricted with CONTAINS with a secondary index or filtering " ) ; <nl> <nl> if ( hasClusteringColumnsRestrictions ( ) & & clusteringColumnsRestrictions . needFiltering ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / TokenFilter . java b / src / java / org / apache / cassandra / cql3 / restrictions / TokenFilter . java <nl> index 400706b . . 13b3e3e 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / restrictions / TokenFilter . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / restrictions / TokenFilter . java <nl> @ @ - 67 , 6 + 67 , 11 @ @ final class TokenFilter implements PartitionKeyRestrictions <nl> return isOnToken ( ) ? false : restrictions . hasIN ( ) ; <nl> } <nl> <nl> + public boolean hasContains ( ) <nl> + { <nl> + return isOnToken ( ) ? false : restrictions . hasContains ( ) ; <nl> + } <nl> + <nl> public boolean hasOnlyEqualityRestrictions ( ) <nl> { <nl> return isOnToken ( ) ? false : restrictions . hasOnlyEqualityRestrictions ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / TokenRestriction . java b / src / java / org / apache / cassandra / cql3 / restrictions / TokenRestriction . java <nl> index e90319d . . 82b27dd 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / restrictions / TokenRestriction . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / restrictions / TokenRestriction . java <nl> @ @ - 225 , 6 + 225 , 11 @ @ public abstract class TokenRestriction implements PartitionKeyRestrictions <nl> { <nl> return Collections . singletonList ( value . bindAndGet ( options ) ) ; <nl> } <nl> + <nl> + public boolean hasContains ( ) <nl> + { <nl> + return false ; <nl> + } <nl> } <nl> <nl> public static class SliceRestriction extends TokenRestriction <nl> @ @ - 237 , 6 + 242 , 11 @ @ public abstract class TokenRestriction implements PartitionKeyRestrictions <nl> slice = TermSlice . newInstance ( bound , inclusive , term ) ; <nl> } <nl> <nl> + public boolean hasContains ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> @ Override <nl> public boolean hasSlice ( ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderedPartitionerTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderedPartitionerTest . java <nl> index 3957305 . . 003258a 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderedPartitionerTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderedPartitionerTest . java <nl> @ @ - 66 , 7 + 66 , 6 @ @ public class SelectOrderedPartitionerTest extends CQLTester <nl> } ) ; <nl> } <nl> <nl> - <nl> @ Test <nl> public void testFilteringOnAllPartitionKeysWithTokenRestriction ( ) throws Throwable <nl> { <nl> @ @ - 123 , 6 + 122 , 31 @ @ public class SelectOrderedPartitionerTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> + public void testTokenAndCollections ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a frozen < map < int , int > > , b int , c int , PRIMARY KEY ( a , b ) ) " ) ; <nl> + <nl> + for ( int i = 0 ; i < 10 ; i + + ) <nl> + { <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , map ( i , i ) , i , i ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , map ( i , i , 100 , 200 ) , i + 10 , i + 10 ) ; <nl> + } <nl> + <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE token ( a ) > token ( { 0 : 0 } ) AND a CONTAINS KEY 9 ALLOW FILTERING " ) , <nl> + row ( map ( 9 , 9 ) , 9 , 9 ) , <nl> + row ( map ( 9 , 9 , 100 , 200 ) , 19 , 19 ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE token ( a ) > token ( { 0 : 0 } ) AND a CONTAINS KEY 9 AND a CONTAINS 200 ALLOW FILTERING " ) , <nl> + row ( map ( 9 , 9 , 100 , 200 ) , 19 , 19 ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE token ( a ) > token ( { 0 : 0 } ) AND a CONTAINS KEY 9 AND b = 19 ALLOW FILTERING " ) , <nl> + row ( map ( 9 , 9 , 100 , 200 ) , 19 , 19 ) ) ; <nl> + } ) ; <nl> + } <nl> + <nl> + <nl> + @ Test <nl> public void testTokenFunctionWithSingleColumnPartitionKey ( ) throws Throwable <nl> { <nl> createTable ( " CREATE TABLE IF NOT EXISTS % s ( a int PRIMARY KEY , b text ) " ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java <nl> index 572d903 . . 9a24bd0 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java <nl> @ @ - 549 , 8 + 549 , 8 @ @ public class SelectTest extends CQLTester <nl> createTable ( " CREATE TABLE % s ( account text , id int , categories map < text , text > , PRIMARY KEY ( account , id ) ) " ) ; <nl> <nl> / / create an index on <nl> - createIndex ( " CREATE INDEX id _ index ON % s ( id ) " ) ; <nl> - createIndex ( " CREATE INDEX categories _ values _ index ON % s ( categories ) " ) ; <nl> + createIndex ( " CREATE INDEX ON % s ( id ) " ) ; <nl> + createIndex ( " CREATE INDEX ON % s ( categories ) " ) ; <nl> <nl> beforeAndAfterFlush ( ( ) - > { <nl> <nl> @ @ - 1373 , 7 + 1373 , 7 @ @ public class SelectTest extends CQLTester <nl> public void testSelectCountPaging ( ) throws Throwable <nl> { <nl> createTable ( " create table % s ( field1 text , field2 timeuuid , field3 boolean , primary key ( field1 , field2 ) ) " ) ; <nl> - createIndex ( " create index test _ index on % s ( field3 ) " ) ; <nl> + createIndex ( " create index on % s ( field3 ) " ) ; <nl> <nl> execute ( " insert into % s ( field1 , field2 , field3 ) values ( ' hola ' , now ( ) , false ) " ) ; <nl> execute ( " insert into % s ( field1 , field2 , field3 ) values ( ' hola ' , now ( ) , false ) " ) ; <nl> @ @ - 2306 , 8 + 2306 , 9 @ @ public class SelectTest extends CQLTester <nl> @ Test <nl> public void testIndexQueryWithValueOver64K ( ) throws Throwable <nl> { <nl> - createTable ( " CREATE TABLE % s ( a int , b int , c blob , PRIMARY KEY ( a , b ) ) " ) ; <nl> - createIndex ( " CREATE INDEX test ON % s ( c ) " ) ; <nl> + String tableName = createTable ( " CREATE TABLE % s ( a int , b int , c blob , PRIMARY KEY ( a , b ) ) " ) ; <nl> + String idx = tableName + " _ c _ idx " ; <nl> + createIndex ( " CREATE INDEX " + idx + " ON % s ( c ) " ) ; <nl> <nl> execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 0 , 0 , bytes ( 1 ) ) ; <nl> execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 0 , 1 , bytes ( 2 ) ) ; <nl> @ @ - 2315 , 7 + 2316 , 7 @ @ public class SelectTest extends CQLTester <nl> assertInvalidMessage ( " Index expression values may not be larger than 64K " , <nl> " SELECT * FROM % s WHERE c = ? ALLOW FILTERING " , TOO _ BIG ) ; <nl> <nl> - dropIndex ( " DROP INDEX % s . test " ) ; <nl> + dropIndex ( " DROP INDEX % s . " + idx ) ; <nl> assertEmpty ( execute ( " SELECT * FROM % s WHERE c = ? ALLOW FILTERING " , TOO _ BIG ) ) ; <nl> } <nl> <nl> @ @ - 3765 , 6 + 3766 , 58 @ @ public class SelectTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> + public void testContainsOnPartitionKey ( ) throws Throwable <nl> + { <nl> + testContainsOnPartitionKey ( " CREATE TABLE % s ( pk frozen < map < int , int > > , ck int , v int , PRIMARY KEY ( pk , ck ) ) " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testContainsOnPartitionKeyPart ( ) throws Throwable <nl> + { <nl> + testContainsOnPartitionKey ( " CREATE TABLE % s ( pk frozen < map < int , int > > , ck int , v int , PRIMARY KEY ( ( pk , ck ) ) ) " ) ; <nl> + } <nl> + <nl> + private void testContainsOnPartitionKey ( String schema ) throws Throwable <nl> + { <nl> + createTable ( schema ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( pk , ck , v ) VALUES ( ? , ? , ? ) " , map ( 1 , 2 ) , 1 , 1 ) ; <nl> + execute ( " INSERT INTO % s ( pk , ck , v ) VALUES ( ? , ? , ? ) " , map ( 1 , 2 ) , 2 , 2 ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( pk , ck , v ) VALUES ( ? , ? , ? ) " , map ( 1 , 2 , 3 , 4 ) , 1 , 3 ) ; <nl> + execute ( " INSERT INTO % s ( pk , ck , v ) VALUES ( ? , ? , ? ) " , map ( 1 , 2 , 3 , 4 ) , 2 , 3 ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( pk , ck , v ) VALUES ( ? , ? , ? ) " , map ( 5 , 6 ) , 5 , 5 ) ; <nl> + execute ( " INSERT INTO % s ( pk , ck , v ) VALUES ( ? , ? , ? ) " , map ( 7 , 8 ) , 6 , 6 ) ; <nl> + <nl> + assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , <nl> + " SELECT * FROM % s WHERE pk CONTAINS KEY 1 " ) ; <nl> + <nl> + beforeAndAfterFlush ( ( ) - > { <nl> + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE pk CONTAINS KEY 1 ALLOW FILTERING " ) , <nl> + row ( map ( 1 , 2 ) , 1 , 1 ) , <nl> + row ( map ( 1 , 2 ) , 2 , 2 ) , <nl> + row ( map ( 1 , 2 , 3 , 4 ) , 1 , 3 ) , <nl> + row ( map ( 1 , 2 , 3 , 4 ) , 2 , 3 ) ) ; <nl> + <nl> + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE pk CONTAINS KEY 1 AND pk CONTAINS 4 ALLOW FILTERING " ) , <nl> + row ( map ( 1 , 2 , 3 , 4 ) , 1 , 3 ) , <nl> + row ( map ( 1 , 2 , 3 , 4 ) , 2 , 3 ) ) ; <nl> + <nl> + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE pk CONTAINS KEY 1 AND pk CONTAINS KEY 3 ALLOW FILTERING " ) , <nl> + row ( map ( 1 , 2 , 3 , 4 ) , 1 , 3 ) , <nl> + row ( map ( 1 , 2 , 3 , 4 ) , 2 , 3 ) ) ; <nl> + <nl> + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE pk CONTAINS KEY 1 AND v = 3 ALLOW FILTERING " ) , <nl> + row ( map ( 1 , 2 , 3 , 4 ) , 1 , 3 ) , <nl> + row ( map ( 1 , 2 , 3 , 4 ) , 2 , 3 ) ) ; <nl> + <nl> + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE pk CONTAINS KEY 1 AND ck = 1 AND v = 3 ALLOW FILTERING " ) , <nl> + row ( map ( 1 , 2 , 3 , 4 ) , 1 , 3 ) ) ; <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void filteringWithOrderClause ( ) throws Throwable <nl> { <nl> createTable ( " CREATE TABLE % s ( a int , b int , c int , d list < int > , PRIMARY KEY ( a , b , c ) ) " ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 9b31d48 . . b13b777 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 11 . 0 
 + * Allow CONTAINS statements filtering on the partition key and it ’ s parts ( CASSANDRA - 13275 ) 
 * Fall back to even ranges calculation in clusters with vnodes when tokens are distributed unevenly ( CASSANDRA - 13229 ) 
 * Fix duration type validation to prevent overflow ( CASSANDRA - 13218 ) 
 * Forbid unsupported creation of SASI indexes over partition key columns ( CASSANDRA - 13228 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / PartitionKeySingleRestrictionSet . java b / src / java / org / apache / cassandra / cql3 / restrictions / PartitionKeySingleRestrictionSet . java 
 index b34ff54 . . f2b427d 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / restrictions / PartitionKeySingleRestrictionSet . java 
 + + + b / src / java / org / apache / cassandra / cql3 / restrictions / PartitionKeySingleRestrictionSet . java 
 @ @ - 135 , 8 + 135 , 9 @ @ final class PartitionKeySingleRestrictionSet extends RestrictionSetWrapper imple 
 { 
 if ( isEmpty ( ) ) 
 return false ; 
 + 
 / / slice or has unrestricted key component 
 - return hasUnrestrictedPartitionKeyComponents ( cfm ) | | hasSlice ( ) ; 
 + return hasUnrestrictedPartitionKeyComponents ( cfm ) | | hasSlice ( ) | | hasContains ( ) ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / RestrictionSet . java b / src / java / org / apache / cassandra / cql3 / restrictions / RestrictionSet . java 
 index 3a1bcb1 . . a0816d2 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / restrictions / RestrictionSet . java 
 + + + b / src / java / org / apache / cassandra / cql3 / restrictions / RestrictionSet . java 
 @ @ - 281 , 6 + 281 , 16 @ @ final class RestrictionSet implements Restrictions , Iterable < SingleRestriction > 
 return false ; 
 } 
 
 + public boolean hasContains ( ) 
 + { 
 + for ( SingleRestriction restriction : this ) 
 + { 
 + if ( restriction . isContains ( ) ) 
 + return true ; 
 + } 
 + return false ; 
 + } 
 + 
 public final boolean hasSlice ( ) 
 { 
 for ( SingleRestriction restriction : this ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / RestrictionSetWrapper . java b / src / java / org / apache / cassandra / cql3 / restrictions / RestrictionSetWrapper . java 
 index 996a1c4 . . 5157de0 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / restrictions / RestrictionSetWrapper . java 
 + + + b / src / java / org / apache / cassandra / cql3 / restrictions / RestrictionSetWrapper . java 
 @ @ - 89 , 6 + 89 , 11 @ @ class RestrictionSetWrapper implements Restrictions 
 return restrictions . hasIN ( ) ; 
 } 
 
 + public boolean hasContains ( ) 
 + { 
 + return restrictions . hasContains ( ) ; 
 + } 
 + 
 public boolean hasSlice ( ) 
 { 
 return restrictions . hasSlice ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / Restrictions . java b / src / java / org / apache / cassandra / cql3 / restrictions / Restrictions . java 
 index 8a5140a . . 5d11e9f 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / restrictions / Restrictions . java 
 + + + b / src / java / org / apache / cassandra / cql3 / restrictions / Restrictions . java 
 @ @ - 55 , 6 + 55 , 11 @ @ public interface Restrictions extends Restriction 
 public boolean hasIN ( ) ; 
 
 / * * 
 + * Checks if any of the underlying restrictions is a CONTAINS / CONTAINS KEY restriction . 
 + * @ return < code > true < / code > if any of the underlying restrictions is CONTAINS , < code > false < / code > otherwise 
 + * / 
 + public boolean hasContains ( ) ; 
 + / * * 
 * Checks if any of the underlying restrictions is a slice . 
 * @ return < code > true < / code > if any of the underlying restrictions is a slice , < code > false < / code > otherwise 
 * / 
 diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java b / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java 
 index 8a8ee56 . . 15a090b 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java 
 + + + b / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java 
 @ @ - 429 , 8 + 429 , 7 @ @ public final class StatementRestrictions 
 / / components must have a EQ . Only the last partition key component can be in IN relation . 
 if ( partitionKeyRestrictions . needFiltering ( cfm ) ) 
 { 
 - if ( ! allowFiltering & & ! forView & & ! hasQueriableIndex 
 - & & ( partitionKeyRestrictions . hasUnrestrictedPartitionKeyComponents ( cfm ) | | partitionKeyRestrictions . hasSlice ( ) ) ) 
 + if ( ! allowFiltering & & ! forView & & ! hasQueriableIndex ) 
 throw new InvalidRequestException ( REQUIRES _ ALLOW _ FILTERING _ MESSAGE ) ; 
 
 if ( partitionKeyRestrictions . hasIN ( ) ) 
 @ @ - 518 , 7 + 517 , 6 @ @ public final class StatementRestrictions 
 checkFalse ( clusteringColumnsRestrictions . hasIN ( ) & & selectsComplexColumn , 
 " Cannot restrict clustering columns by IN relations when a collection is selected by the query " ) ; 
 checkFalse ( clusteringColumnsRestrictions . hasContains ( ) & & ! hasQueriableIndex & & ! allowFiltering , 
 - 
 " Clustering columns can only be restricted with CONTAINS with a secondary index or filtering " ) ; 
 
 if ( hasClusteringColumnsRestrictions ( ) & & clusteringColumnsRestrictions . needFiltering ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / TokenFilter . java b / src / java / org / apache / cassandra / cql3 / restrictions / TokenFilter . java 
 index 400706b . . 13b3e3e 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / restrictions / TokenFilter . java 
 + + + b / src / java / org / apache / cassandra / cql3 / restrictions / TokenFilter . java 
 @ @ - 67 , 6 + 67 , 11 @ @ final class TokenFilter implements PartitionKeyRestrictions 
 return isOnToken ( ) ? false : restrictions . hasIN ( ) ; 
 } 
 
 + public boolean hasContains ( ) 
 + { 
 + return isOnToken ( ) ? false : restrictions . hasContains ( ) ; 
 + } 
 + 
 public boolean hasOnlyEqualityRestrictions ( ) 
 { 
 return isOnToken ( ) ? false : restrictions . hasOnlyEqualityRestrictions ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / TokenRestriction . java b / src / java / org / apache / cassandra / cql3 / restrictions / TokenRestriction . java 
 index e90319d . . 82b27dd 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / restrictions / TokenRestriction . java 
 + + + b / src / java / org / apache / cassandra / cql3 / restrictions / TokenRestriction . java 
 @ @ - 225 , 6 + 225 , 11 @ @ public abstract class TokenRestriction implements PartitionKeyRestrictions 
 { 
 return Collections . singletonList ( value . bindAndGet ( options ) ) ; 
 } 
 + 
 + public boolean hasContains ( ) 
 + { 
 + return false ; 
 + } 
 } 
 
 public static class SliceRestriction extends TokenRestriction 
 @ @ - 237 , 6 + 242 , 11 @ @ public abstract class TokenRestriction implements PartitionKeyRestrictions 
 slice = TermSlice . newInstance ( bound , inclusive , term ) ; 
 } 
 
 + public boolean hasContains ( ) 
 + { 
 + return false ; 
 + } 
 + 
 @ Override 
 public boolean hasSlice ( ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderedPartitionerTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderedPartitionerTest . java 
 index 3957305 . . 003258a 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderedPartitionerTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderedPartitionerTest . java 
 @ @ - 66 , 7 + 66 , 6 @ @ public class SelectOrderedPartitionerTest extends CQLTester 
 } ) ; 
 } 
 
 - 
 @ Test 
 public void testFilteringOnAllPartitionKeysWithTokenRestriction ( ) throws Throwable 
 { 
 @ @ - 123 , 6 + 122 , 31 @ @ public class SelectOrderedPartitionerTest extends CQLTester 
 } 
 
 @ Test 
 + public void testTokenAndCollections ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a frozen < map < int , int > > , b int , c int , PRIMARY KEY ( a , b ) ) " ) ; 
 + 
 + for ( int i = 0 ; i < 10 ; i + + ) 
 + { 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , map ( i , i ) , i , i ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , map ( i , i , 100 , 200 ) , i + 10 , i + 10 ) ; 
 + } 
 + 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertRows ( execute ( " SELECT * FROM % s WHERE token ( a ) > token ( { 0 : 0 } ) AND a CONTAINS KEY 9 ALLOW FILTERING " ) , 
 + row ( map ( 9 , 9 ) , 9 , 9 ) , 
 + row ( map ( 9 , 9 , 100 , 200 ) , 19 , 19 ) ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s WHERE token ( a ) > token ( { 0 : 0 } ) AND a CONTAINS KEY 9 AND a CONTAINS 200 ALLOW FILTERING " ) , 
 + row ( map ( 9 , 9 , 100 , 200 ) , 19 , 19 ) ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s WHERE token ( a ) > token ( { 0 : 0 } ) AND a CONTAINS KEY 9 AND b = 19 ALLOW FILTERING " ) , 
 + row ( map ( 9 , 9 , 100 , 200 ) , 19 , 19 ) ) ; 
 + } ) ; 
 + } 
 + 
 + 
 + @ Test 
 public void testTokenFunctionWithSingleColumnPartitionKey ( ) throws Throwable 
 { 
 createTable ( " CREATE TABLE IF NOT EXISTS % s ( a int PRIMARY KEY , b text ) " ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java 
 index 572d903 . . 9a24bd0 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java 
 @ @ - 549 , 8 + 549 , 8 @ @ public class SelectTest extends CQLTester 
 createTable ( " CREATE TABLE % s ( account text , id int , categories map < text , text > , PRIMARY KEY ( account , id ) ) " ) ; 
 
 / / create an index on 
 - createIndex ( " CREATE INDEX id _ index ON % s ( id ) " ) ; 
 - createIndex ( " CREATE INDEX categories _ values _ index ON % s ( categories ) " ) ; 
 + createIndex ( " CREATE INDEX ON % s ( id ) " ) ; 
 + createIndex ( " CREATE INDEX ON % s ( categories ) " ) ; 
 
 beforeAndAfterFlush ( ( ) - > { 
 
 @ @ - 1373 , 7 + 1373 , 7 @ @ public class SelectTest extends CQLTester 
 public void testSelectCountPaging ( ) throws Throwable 
 { 
 createTable ( " create table % s ( field1 text , field2 timeuuid , field3 boolean , primary key ( field1 , field2 ) ) " ) ; 
 - createIndex ( " create index test _ index on % s ( field3 ) " ) ; 
 + createIndex ( " create index on % s ( field3 ) " ) ; 
 
 execute ( " insert into % s ( field1 , field2 , field3 ) values ( ' hola ' , now ( ) , false ) " ) ; 
 execute ( " insert into % s ( field1 , field2 , field3 ) values ( ' hola ' , now ( ) , false ) " ) ; 
 @ @ - 2306 , 8 + 2306 , 9 @ @ public class SelectTest extends CQLTester 
 @ Test 
 public void testIndexQueryWithValueOver64K ( ) throws Throwable 
 { 
 - createTable ( " CREATE TABLE % s ( a int , b int , c blob , PRIMARY KEY ( a , b ) ) " ) ; 
 - createIndex ( " CREATE INDEX test ON % s ( c ) " ) ; 
 + String tableName = createTable ( " CREATE TABLE % s ( a int , b int , c blob , PRIMARY KEY ( a , b ) ) " ) ; 
 + String idx = tableName + " _ c _ idx " ; 
 + createIndex ( " CREATE INDEX " + idx + " ON % s ( c ) " ) ; 
 
 execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 0 , 0 , bytes ( 1 ) ) ; 
 execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 0 , 1 , bytes ( 2 ) ) ; 
 @ @ - 2315 , 7 + 2316 , 7 @ @ public class SelectTest extends CQLTester 
 assertInvalidMessage ( " Index expression values may not be larger than 64K " , 
 " SELECT * FROM % s WHERE c = ? ALLOW FILTERING " , TOO _ BIG ) ; 
 
 - dropIndex ( " DROP INDEX % s . test " ) ; 
 + dropIndex ( " DROP INDEX % s . " + idx ) ; 
 assertEmpty ( execute ( " SELECT * FROM % s WHERE c = ? ALLOW FILTERING " , TOO _ BIG ) ) ; 
 } 
 
 @ @ - 3765 , 6 + 3766 , 58 @ @ public class SelectTest extends CQLTester 
 } 
 
 @ Test 
 + public void testContainsOnPartitionKey ( ) throws Throwable 
 + { 
 + testContainsOnPartitionKey ( " CREATE TABLE % s ( pk frozen < map < int , int > > , ck int , v int , PRIMARY KEY ( pk , ck ) ) " ) ; 
 + } 
 + 
 + @ Test 
 + public void testContainsOnPartitionKeyPart ( ) throws Throwable 
 + { 
 + testContainsOnPartitionKey ( " CREATE TABLE % s ( pk frozen < map < int , int > > , ck int , v int , PRIMARY KEY ( ( pk , ck ) ) ) " ) ; 
 + } 
 + 
 + private void testContainsOnPartitionKey ( String schema ) throws Throwable 
 + { 
 + createTable ( schema ) ; 
 + 
 + execute ( " INSERT INTO % s ( pk , ck , v ) VALUES ( ? , ? , ? ) " , map ( 1 , 2 ) , 1 , 1 ) ; 
 + execute ( " INSERT INTO % s ( pk , ck , v ) VALUES ( ? , ? , ? ) " , map ( 1 , 2 ) , 2 , 2 ) ; 
 + 
 + execute ( " INSERT INTO % s ( pk , ck , v ) VALUES ( ? , ? , ? ) " , map ( 1 , 2 , 3 , 4 ) , 1 , 3 ) ; 
 + execute ( " INSERT INTO % s ( pk , ck , v ) VALUES ( ? , ? , ? ) " , map ( 1 , 2 , 3 , 4 ) , 2 , 3 ) ; 
 + 
 + execute ( " INSERT INTO % s ( pk , ck , v ) VALUES ( ? , ? , ? ) " , map ( 5 , 6 ) , 5 , 5 ) ; 
 + execute ( " INSERT INTO % s ( pk , ck , v ) VALUES ( ? , ? , ? ) " , map ( 7 , 8 ) , 6 , 6 ) ; 
 + 
 + assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , 
 + " SELECT * FROM % s WHERE pk CONTAINS KEY 1 " ) ; 
 + 
 + beforeAndAfterFlush ( ( ) - > { 
 + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE pk CONTAINS KEY 1 ALLOW FILTERING " ) , 
 + row ( map ( 1 , 2 ) , 1 , 1 ) , 
 + row ( map ( 1 , 2 ) , 2 , 2 ) , 
 + row ( map ( 1 , 2 , 3 , 4 ) , 1 , 3 ) , 
 + row ( map ( 1 , 2 , 3 , 4 ) , 2 , 3 ) ) ; 
 + 
 + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE pk CONTAINS KEY 1 AND pk CONTAINS 4 ALLOW FILTERING " ) , 
 + row ( map ( 1 , 2 , 3 , 4 ) , 1 , 3 ) , 
 + row ( map ( 1 , 2 , 3 , 4 ) , 2 , 3 ) ) ; 
 + 
 + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE pk CONTAINS KEY 1 AND pk CONTAINS KEY 3 ALLOW FILTERING " ) , 
 + row ( map ( 1 , 2 , 3 , 4 ) , 1 , 3 ) , 
 + row ( map ( 1 , 2 , 3 , 4 ) , 2 , 3 ) ) ; 
 + 
 + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE pk CONTAINS KEY 1 AND v = 3 ALLOW FILTERING " ) , 
 + row ( map ( 1 , 2 , 3 , 4 ) , 1 , 3 ) , 
 + row ( map ( 1 , 2 , 3 , 4 ) , 2 , 3 ) ) ; 
 + 
 + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE pk CONTAINS KEY 1 AND ck = 1 AND v = 3 ALLOW FILTERING " ) , 
 + row ( map ( 1 , 2 , 3 , 4 ) , 1 , 3 ) ) ; 
 + } ) ; 
 + } 
 + 
 + @ Test 
 public void filteringWithOrderClause ( ) throws Throwable 
 { 
 createTable ( " CREATE TABLE % s ( a int , b int , c int , d list < int > , PRIMARY KEY ( a , b , c ) ) " ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
