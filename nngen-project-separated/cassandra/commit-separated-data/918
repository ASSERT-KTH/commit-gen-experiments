BLEU SCORE: 0.014157271808812651

TEST MSG: CASSANDRA - 11410 â€“ Option to specify ProtocolVersion in cassandra - stress
GENERATED MSG: For CASSANDRA - 7217 , have stress calculate maximum # of pending requests based on thread count and allow manually specifying max pending requests per connection as well as # of connections

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 85660d9 . . c9538a8 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 6 <nl> + * Option to specify ProtocolVersion in cassandra - stress ( CASSANDRA - 11410 ) <nl> * ArithmeticException in avgFunctionForDecimal ( CASSANDRA - 11485 ) <nl> * Allow only DISTINCT queries with partition keys or static columns restrictions ( CASSANDRA - 11339 ) <nl> * LogAwareFileLister should only use OLD sstable files in current folder to determine disk consistency ( CASSANDRA - 11470 ) <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsMode . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsMode . java <nl> index 699f10e . . 8f0ab25 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsMode . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsMode . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import java . util . Map ; <nl> import com . datastax . driver . core . AuthProvider ; <nl> import com . datastax . driver . core . PlainTextAuthProvider ; <nl> import com . datastax . driver . core . ProtocolOptions ; <nl> + import com . datastax . driver . core . ProtocolVersion ; <nl> <nl> public class SettingsMode implements Serializable <nl> { <nl> @ @ - 36 , 6 + 37 , 7 @ @ public class SettingsMode implements Serializable <nl> public final ConnectionAPI api ; <nl> public final ConnectionStyle style ; <nl> public final CqlVersion cqlVersion ; <nl> + public final ProtocolVersion protocolVersion ; <nl> <nl> public final String username ; <nl> public final String password ; <nl> @ @ - 53 , 6 + 55 , 9 @ @ public class SettingsMode implements Serializable <nl> { <nl> cqlVersion = CqlVersion . CQL3 ; <nl> Cql3Options opts = ( Cql3Options ) options ; <nl> + protocolVersion = " NEWEST _ SUPPORTED " . equals ( opts . protocolVersion . value ( ) ) <nl> + ? ProtocolVersion . NEWEST _ SUPPORTED <nl> + : ProtocolVersion . fromInt ( Integer . parseInt ( opts . protocolVersion . value ( ) ) ) ; <nl> api = opts . mode ( ) . displayPrefix . equals ( " native " ) ? ConnectionAPI . JAVA _ DRIVER _ NATIVE : ConnectionAPI . THRIFT ; <nl> style = opts . useUnPrepared . setByUser ( ) ? ConnectionStyle . CQL : ConnectionStyle . CQL _ PREPARED ; <nl> compression = ProtocolOptions . Compression . valueOf ( opts . useCompression . value ( ) . toUpperCase ( ) ) . name ( ) ; <nl> @ @ - 92 , 6 + 97 , 7 @ @ public class SettingsMode implements Serializable <nl> { <nl> cqlVersion = CqlVersion . CQL3 ; <nl> Cql3SimpleNativeOptions opts = ( Cql3SimpleNativeOptions ) options ; <nl> + protocolVersion = ProtocolVersion . NEWEST _ SUPPORTED ; <nl> api = ConnectionAPI . SIMPLE _ NATIVE ; <nl> style = opts . usePrepared . setByUser ( ) ? ConnectionStyle . CQL _ PREPARED : ConnectionStyle . CQL ; <nl> compression = ProtocolOptions . Compression . NONE . name ( ) ; <nl> @ @ - 105 , 6 + 111 , 7 @ @ public class SettingsMode implements Serializable <nl> else if ( options instanceof ThriftOptions ) <nl> { <nl> ThriftOptions opts = ( ThriftOptions ) options ; <nl> + protocolVersion = ProtocolVersion . NEWEST _ SUPPORTED ; <nl> cqlVersion = CqlVersion . NOCQL ; <nl> api = opts . smart . setByUser ( ) ? ConnectionAPI . THRIFT _ SMART : ConnectionAPI . THRIFT ; <nl> style = ConnectionStyle . THRIFT ; <nl> @ @ - 148 , 6 + 155 , 7 @ @ public class SettingsMode implements Serializable <nl> private static abstract class Cql3Options extends GroupedOptions <nl> { <nl> final OptionSimple api = new OptionSimple ( " cql3 " , " " , null , " " , true ) ; <nl> + final OptionSimple protocolVersion = new OptionSimple ( " protocolVersion = " , " [ 2 - 4 ] + " , " NEWEST _ SUPPORTED " , " CQL Protocol Version " , false ) ; <nl> final OptionSimple useUnPrepared = new OptionSimple ( " unprepared " , " " , null , " force use of unprepared statements " , false ) ; <nl> final OptionSimple useCompression = new OptionSimple ( " compression = " , " none | lz4 | snappy " , " none " , " " , false ) ; <nl> final OptionSimple port = new OptionSimple ( " port = " , " [ 0 - 9 ] + " , " 9046 " , " " , false ) ; <nl> @ @ - 162 , 7 + 170 , 7 @ @ public class SettingsMode implements Serializable <nl> public List < ? extends Option > options ( ) <nl> { <nl> return Arrays . asList ( mode ( ) , useUnPrepared , api , useCompression , port , user , password , authProvider , <nl> - maxPendingPerConnection , connectionsPerHost ) ; <nl> + maxPendingPerConnection , connectionsPerHost , protocolVersion ) ; <nl> } <nl> } <nl> <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java b / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java <nl> index bbf1008 . . 4f173b4 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java <nl> @ @ - 47 , 6 + 47 , 7 @ @ public class JavaDriverClient <nl> public final int maxPendingPerConnection ; <nl> public final int connectionsPerHost ; <nl> <nl> + private final ProtocolVersion protocolVersion ; <nl> private final EncryptionOptions . ClientEncryptionOptions encryptionOptions ; <nl> private Cluster cluster ; <nl> private Session session ; <nl> @ @ - 61 , 6 + 62 , 7 @ @ public class JavaDriverClient <nl> <nl> public JavaDriverClient ( StressSettings settings , String host , int port , EncryptionOptions . ClientEncryptionOptions encryptionOptions ) <nl> { <nl> + this . protocolVersion = settings . mode . protocolVersion ; <nl> this . host = host ; <nl> this . port = port ; <nl> this . username = settings . mode . username ; <nl> @ @ - 115 , 7 + 117 , 7 @ @ public class JavaDriverClient <nl> . withPort ( port ) <nl> . withPoolingOptions ( poolingOpts ) <nl> . withoutJMXReporting ( ) <nl> - . withProtocolVersion ( ProtocolVersion . NEWEST _ SUPPORTED ) <nl> + . withProtocolVersion ( protocolVersion ) <nl> . withoutMetrics ( ) ; / / The driver uses metrics 3 with conflict with our version <nl> if ( whitelist ! = null ) <nl> clusterBuilder . withLoadBalancingPolicy ( whitelist ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 85660d9 . . c9538a8 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 6 
 + * Option to specify ProtocolVersion in cassandra - stress ( CASSANDRA - 11410 ) 
 * ArithmeticException in avgFunctionForDecimal ( CASSANDRA - 11485 ) 
 * Allow only DISTINCT queries with partition keys or static columns restrictions ( CASSANDRA - 11339 ) 
 * LogAwareFileLister should only use OLD sstable files in current folder to determine disk consistency ( CASSANDRA - 11470 ) 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsMode . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsMode . java 
 index 699f10e . . 8f0ab25 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsMode . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsMode . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import java . util . Map ; 
 import com . datastax . driver . core . AuthProvider ; 
 import com . datastax . driver . core . PlainTextAuthProvider ; 
 import com . datastax . driver . core . ProtocolOptions ; 
 + import com . datastax . driver . core . ProtocolVersion ; 
 
 public class SettingsMode implements Serializable 
 { 
 @ @ - 36 , 6 + 37 , 7 @ @ public class SettingsMode implements Serializable 
 public final ConnectionAPI api ; 
 public final ConnectionStyle style ; 
 public final CqlVersion cqlVersion ; 
 + public final ProtocolVersion protocolVersion ; 
 
 public final String username ; 
 public final String password ; 
 @ @ - 53 , 6 + 55 , 9 @ @ public class SettingsMode implements Serializable 
 { 
 cqlVersion = CqlVersion . CQL3 ; 
 Cql3Options opts = ( Cql3Options ) options ; 
 + protocolVersion = " NEWEST _ SUPPORTED " . equals ( opts . protocolVersion . value ( ) ) 
 + ? ProtocolVersion . NEWEST _ SUPPORTED 
 + : ProtocolVersion . fromInt ( Integer . parseInt ( opts . protocolVersion . value ( ) ) ) ; 
 api = opts . mode ( ) . displayPrefix . equals ( " native " ) ? ConnectionAPI . JAVA _ DRIVER _ NATIVE : ConnectionAPI . THRIFT ; 
 style = opts . useUnPrepared . setByUser ( ) ? ConnectionStyle . CQL : ConnectionStyle . CQL _ PREPARED ; 
 compression = ProtocolOptions . Compression . valueOf ( opts . useCompression . value ( ) . toUpperCase ( ) ) . name ( ) ; 
 @ @ - 92 , 6 + 97 , 7 @ @ public class SettingsMode implements Serializable 
 { 
 cqlVersion = CqlVersion . CQL3 ; 
 Cql3SimpleNativeOptions opts = ( Cql3SimpleNativeOptions ) options ; 
 + protocolVersion = ProtocolVersion . NEWEST _ SUPPORTED ; 
 api = ConnectionAPI . SIMPLE _ NATIVE ; 
 style = opts . usePrepared . setByUser ( ) ? ConnectionStyle . CQL _ PREPARED : ConnectionStyle . CQL ; 
 compression = ProtocolOptions . Compression . NONE . name ( ) ; 
 @ @ - 105 , 6 + 111 , 7 @ @ public class SettingsMode implements Serializable 
 else if ( options instanceof ThriftOptions ) 
 { 
 ThriftOptions opts = ( ThriftOptions ) options ; 
 + protocolVersion = ProtocolVersion . NEWEST _ SUPPORTED ; 
 cqlVersion = CqlVersion . NOCQL ; 
 api = opts . smart . setByUser ( ) ? ConnectionAPI . THRIFT _ SMART : ConnectionAPI . THRIFT ; 
 style = ConnectionStyle . THRIFT ; 
 @ @ - 148 , 6 + 155 , 7 @ @ public class SettingsMode implements Serializable 
 private static abstract class Cql3Options extends GroupedOptions 
 { 
 final OptionSimple api = new OptionSimple ( " cql3 " , " " , null , " " , true ) ; 
 + final OptionSimple protocolVersion = new OptionSimple ( " protocolVersion = " , " [ 2 - 4 ] + " , " NEWEST _ SUPPORTED " , " CQL Protocol Version " , false ) ; 
 final OptionSimple useUnPrepared = new OptionSimple ( " unprepared " , " " , null , " force use of unprepared statements " , false ) ; 
 final OptionSimple useCompression = new OptionSimple ( " compression = " , " none | lz4 | snappy " , " none " , " " , false ) ; 
 final OptionSimple port = new OptionSimple ( " port = " , " [ 0 - 9 ] + " , " 9046 " , " " , false ) ; 
 @ @ - 162 , 7 + 170 , 7 @ @ public class SettingsMode implements Serializable 
 public List < ? extends Option > options ( ) 
 { 
 return Arrays . asList ( mode ( ) , useUnPrepared , api , useCompression , port , user , password , authProvider , 
 - maxPendingPerConnection , connectionsPerHost ) ; 
 + maxPendingPerConnection , connectionsPerHost , protocolVersion ) ; 
 } 
 } 
 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java b / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java 
 index bbf1008 . . 4f173b4 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java 
 @ @ - 47 , 6 + 47 , 7 @ @ public class JavaDriverClient 
 public final int maxPendingPerConnection ; 
 public final int connectionsPerHost ; 
 
 + private final ProtocolVersion protocolVersion ; 
 private final EncryptionOptions . ClientEncryptionOptions encryptionOptions ; 
 private Cluster cluster ; 
 private Session session ; 
 @ @ - 61 , 6 + 62 , 7 @ @ public class JavaDriverClient 
 
 public JavaDriverClient ( StressSettings settings , String host , int port , EncryptionOptions . ClientEncryptionOptions encryptionOptions ) 
 { 
 + this . protocolVersion = settings . mode . protocolVersion ; 
 this . host = host ; 
 this . port = port ; 
 this . username = settings . mode . username ; 
 @ @ - 115 , 7 + 117 , 7 @ @ public class JavaDriverClient 
 . withPort ( port ) 
 . withPoolingOptions ( poolingOpts ) 
 . withoutJMXReporting ( ) 
 - . withProtocolVersion ( ProtocolVersion . NEWEST _ SUPPORTED ) 
 + . withProtocolVersion ( protocolVersion ) 
 . withoutMetrics ( ) ; / / The driver uses metrics 3 with conflict with our version 
 if ( whitelist ! = null ) 
 clusterBuilder . withLoadBalancingPolicy ( whitelist ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
