BLEU SCORE: 0.020980574531482755

TEST MSG: ( cqlsh ) : Show progress of COPY operations .
GENERATED MSG: Twisted driver for CQL

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 0f44c91 . . 4fb773d 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 1 <nl> + * ( cqlsh ) : Show progress of COPY operations ( CASSANDRA - 7789 ) <nl> * Add syntax to remove multiple elements from a map ( CASSANDRA - 6599 ) <nl> * Support non - equals conditions in lightweight transactions ( CASSANDRA - 6839 ) <nl> * Add IF [ NOT ] EXISTS to create / drop triggers ( CASSANDRA - 7606 ) <nl> diff - - git a / bin / cqlsh b / bin / cqlsh <nl> index c055771 . . dfce885 100755 <nl> - - - a / bin / cqlsh <nl> + + + b / bin / cqlsh <nl> @ @ - 64 , 8 + 64 , 6 @ @ except ImportError : <nl> pass <nl> <nl> CQL _ LIB _ PREFIX = ' cassandra - driver - internal - only - ' <nl> - FUTURES _ LIB _ PREFIX = ' futures - ' <nl> - SIX _ LIB _ PREFIX = ' six - ' <nl> <nl> CASSANDRA _ PATH = os . path . join ( os . path . dirname ( os . path . realpath ( _ _ file _ _ ) ) , ' . . ' ) <nl> <nl> @ @ - 89 , 12 + 87 , 13 @ @ cql _ zip = find _ zip ( CQL _ LIB _ PREFIX ) <nl> if cql _ zip : <nl> ver = os . path . splitext ( os . path . basename ( cql _ zip ) ) [ 0 ] [ len ( CQL _ LIB _ PREFIX ) : ] <nl> sys . path . insert ( 0 , os . path . join ( cql _ zip , ' cassandra - driver - ' + ver ) ) <nl> - futures _ zip = find _ zip ( FUTURES _ LIB _ PREFIX ) <nl> - if futures _ zip : <nl> - sys . path . insert ( 0 , futures _ zip ) <nl> - six _ zip = find _ zip ( SIX _ LIB _ PREFIX ) <nl> - if six _ zip : <nl> - sys . path . insert ( 0 , six _ zip ) <nl> + <nl> + third _ parties = ( ' futures - ' , ' six - ' ) <nl> + <nl> + for lib in third _ parties : <nl> + lib _ zip = find _ zip ( lib ) <nl> + if lib _ zip : <nl> + sys . path . insert ( 0 , lib _ zip ) <nl> <nl> warnings . filterwarnings ( " ignore " , r " . * blist . * " ) <nl> try : <nl> @ @ - 118 , 7 + 117 , 7 @ @ cqlshlibdir = os . path . join ( CASSANDRA _ PATH , ' pylib ' ) <nl> if os . path . isdir ( cqlshlibdir ) : <nl> sys . path . insert ( 0 , cqlshlibdir ) <nl> <nl> - from cqlshlib import cqlhandling , cql3handling , pylexotron , sslhandling , async _ insert <nl> + from cqlshlib import cqlhandling , cql3handling , pylexotron , sslhandling , async _ insert , meter <nl> from cqlshlib . displaying import ( RED , BLUE , CYAN , ANSI _ RESET , COLUMN _ NAME _ COLORS , <nl> FormattedValue , colorme ) <nl> from cqlshlib . formatting import format _ by _ type , formatter _ for , format _ value _ utype <nl> @ @ - 1361 , 7 + 1360 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> linesource . close ( ) <nl> elif self . tty : <nl> print <nl> - return rownum - 1 <nl> + return rownum <nl> <nl> def create _ insert _ statement ( self , columns , nullval , table _ meta , row ) : <nl> <nl> @ @ - 1437 , 23 + 1436 , 25 @ @ class Shell ( cmd . Cmd ) : <nl> except IOError , e : <nl> self . printerr ( " Can ' t open % r for writing : % s " % ( fname , e ) ) <nl> return 0 <nl> + wmeter = meter . Meter ( ) <nl> try : <nl> + <nl> dump = self . prep _ export _ dump ( ks , cf , columns ) <nl> writer = csv . writer ( csvdest , * * dialect _ options ) <nl> if header : <nl> writer . writerow ( columns ) <nl> - rows = 0 <nl> for row in dump : <nl> fmt = lambda v : \ <nl> format _ value ( v , output _ encoding = encoding , nullval = nullval , <nl> time _ format = self . display _ time _ format , <nl> float _ precision = self . display _ float _ precision ) . strval <nl> writer . writerow ( map ( fmt , row . values ( ) ) ) <nl> - rows + = 1 <nl> + wmeter . mark _ written ( ) <nl> + wmeter . done ( ) <nl> finally : <nl> if do _ close : <nl> csvdest . close ( ) <nl> - return rows <nl> + return wmeter . num _ finished ( ) <nl> <nl> def prep _ export _ dump ( self , ks , cf , columns ) : <nl> if columns is None : <nl> diff - - git a / pylib / cqlshlib / async _ insert . py b / pylib / cqlshlib / async _ insert . py <nl> index a4adcd2 . . d325716 100644 <nl> - - - a / pylib / cqlshlib / async _ insert . py <nl> + + + b / pylib / cqlshlib / async _ insert . py <nl> @ @ - 14 , 11 + 14 , 10 @ @ <nl> # See the License for the specific language governing permissions and <nl> # limitations under the License . <nl> <nl> - from itertools import count <nl> from threading import Event , Condition <nl> + from . import meter <nl> import sys <nl> <nl> - <nl> class _ CountDownLatch ( object ) : <nl> def _ _ init _ _ ( self , counter = 1 ) : <nl> self . _ count = counter <nl> @ @ - 47 , 10 + 46 , 10 @ @ class _ ChainedWriter ( object ) : <nl> self . _ session = session <nl> self . _ cancellation _ event = Event ( ) <nl> self . _ first _ error = None <nl> - self . _ num _ finished = count ( start = 1 ) <nl> self . _ task _ counter = _ CountDownLatch ( self . CONCURRENCY ) <nl> self . _ enumerated _ reader = enumerated _ reader <nl> self . _ statement _ func = statement _ func <nl> + self . _ meter = meter . Meter ( ) <nl> <nl> def insert ( self ) : <nl> if not self . _ enumerated _ reader : <nl> @ @ - 65 , 8 + 64 , 9 @ @ class _ ChainedWriter ( object ) : <nl> self . _ cancellation _ event . set ( ) <nl> sys . stdout . write ( ' Aborting due to keyboard interrupt \ n ' ) <nl> self . _ task _ counter . await ( ) <nl> + self . _ meter . done ( ) <nl> + return self . _ meter . num _ finished ( ) , self . _ first _ error <nl> <nl> - return next ( self . _ num _ finished ) , self . _ first _ error <nl> <nl> def _ abort ( self , error , failed _ record ) : <nl> if not self . _ first _ error : <nl> @ @ - 83 , 10 + 83 , 7 @ @ class _ ChainedWriter ( object ) : <nl> return <nl> <nl> if result is not self . _ sentinel : <nl> - finished = next ( self . _ num _ finished ) <nl> - if not finished % 1000 : <nl> - sys . stdout . write ( ' Imported % s rows \ r ' % finished ) <nl> - sys . stdout . flush ( ) <nl> + self . _ meter . mark _ written ( ) <nl> <nl> try : <nl> ( current _ record , row ) = next ( self . _ enumerated _ reader ) <nl> diff - - git a / pylib / cqlshlib / meter . py b / pylib / cqlshlib / meter . py <nl> new file mode 100644 <nl> index 0000000 . . e1a6bfc <nl> - - - / dev / null <nl> + + + b / pylib / cqlshlib / meter . py <nl> @ @ - 0 , 0 + 1 , 59 @ @ <nl> + # Licensed to the Apache Software Foundation ( ASF ) under one <nl> + # or more contributor license agreements . See the NOTICE file <nl> + # distributed with this work for additional information <nl> + # regarding copyright ownership . The ASF licenses this file <nl> + # to you under the Apache License , Version 2 . 0 ( the <nl> + # " License " ) ; you may not use this file except in compliance <nl> + # with the License . You may obtain a copy of the License at <nl> + # <nl> + # http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + # <nl> + # Unless required by applicable law or agreed to in writing , software <nl> + # distributed under the License is distributed on an " AS IS " BASIS , <nl> + # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + # See the License for the specific language governing permissions and <nl> + # limitations under the License . <nl> + <nl> + from time import time <nl> + import sys <nl> + from threading import RLock <nl> + <nl> + <nl> + class Meter ( object ) : <nl> + <nl> + def _ _ init _ _ ( self ) : <nl> + self . _ num _ finished = 0 <nl> + self . _ last _ checkpoint _ time = None <nl> + self . _ current _ rate = 0 . 0 <nl> + self . _ lock = RLock ( ) <nl> + <nl> + def mark _ written ( self ) : <nl> + with self . _ lock : <nl> + if not self . _ last _ checkpoint _ time : <nl> + self . _ last _ checkpoint _ time = time ( ) <nl> + self . _ num _ finished + = 1 <nl> + <nl> + if self . _ num _ finished % 10000 = = 0 : <nl> + previous _ checkpoint _ time = self . _ last _ checkpoint _ time <nl> + self . _ last _ checkpoint _ time = time ( ) <nl> + new _ rate = 10000 . 0 / ( self . _ last _ checkpoint _ time - previous _ checkpoint _ time ) <nl> + if self . _ current _ rate = = 0 . 0 : <nl> + self . _ current _ rate = new _ rate <nl> + else : <nl> + self . _ current _ rate = ( self . _ current _ rate + new _ rate ) / 2 . 0 <nl> + <nl> + if self . _ num _ finished % 1000 ! = 0 : <nl> + return <nl> + output = ' Processed % s rows ; Write : % . 2f rows / s \ r ' % \ <nl> + ( self . _ num _ finished , self . _ current _ rate ) <nl> + sys . stdout . write ( output ) <nl> + sys . stdout . flush ( ) <nl> + <nl> + def num _ finished ( self ) : <nl> + with self . _ lock : <nl> + return self . _ num _ finished <nl> + <nl> + def done ( self ) : <nl> + print " " <nl> + <nl> +
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index fda6719 . . 6ce4af9 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 3 @ @ <nl> - < < < < < < < . working <nl> 0 . 8 - dev <nl> * avoid double RowMutation serialization on write path ( CASSANDRA - 1800 ) <nl> * adds support for columns that act as incr / decr counters <nl> @ @ - 12 , 7 + 11 , 6 @ @ <nl> * Fix for Cli to support updating replicate _ on _ write ( CASSANDRA - 2236 ) <nl> <nl> <nl> - = = = = = = = <nl> 0 . 7 . 5 <nl> * Avoid seeking when sstable2json exports the entire file ( CASSANDRA - 2318 ) <nl> * fix tombstone handling in repair and sstable2json ( CASSANDRA - 2279 ) <nl> @ @ - 24 , 7 + 22 , 6 @ @ <nl> * shut down server for OOM on a Thrift thread ( CASSANDRA - 2269 ) <nl> <nl> <nl> - > > > > > > > . merge - right . r1081840 <nl> 0 . 7 . 4 <nl> * add nodetool join command ( CASSANDRA - 2160 ) <nl> * fix secondary indexes on pre - existing or streamed data ( CASSANDRA - 2244 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractCommutativeType . java b / src / java / org / apache / cassandra / db / marshal / AbstractCommutativeType . java <nl> index 2fa1b16 . . 77b9573 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / AbstractCommutativeType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / AbstractCommutativeType . java <nl> @ @ - 20 , 12 + 20 , 10 @ @ <nl> * / <nl> package org . apache . cassandra . db . marshal ; <nl> <nl> - import java . net . InetAddress ; <nl> import java . nio . ByteBuffer ; <nl> <nl> import org . apache . cassandra . db . Column ; <nl> - import org . apache . cassandra . db . IColumnContainer ; <nl> - import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . db . context . CounterContext ; <nl> <nl> public abstract class AbstractCommutativeType extends AbstractType < Long > <nl> { <nl> @ @ - 36 , 7 + 34 , 7 @ @ public abstract class AbstractCommutativeType extends AbstractType < Long > <nl> <nl> public Long compose ( ByteBuffer bytes ) <nl> { <nl> - return ByteBufferUtil . toLong ( bytes ) ; <nl> + return CounterContext . instance ( ) . total ( bytes ) ; <nl> } <nl> <nl> / * *

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0f44c91 . . 4fb773d 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 1 
 + * ( cqlsh ) : Show progress of COPY operations ( CASSANDRA - 7789 ) 
 * Add syntax to remove multiple elements from a map ( CASSANDRA - 6599 ) 
 * Support non - equals conditions in lightweight transactions ( CASSANDRA - 6839 ) 
 * Add IF [ NOT ] EXISTS to create / drop triggers ( CASSANDRA - 7606 ) 
 diff - - git a / bin / cqlsh b / bin / cqlsh 
 index c055771 . . dfce885 100755 
 - - - a / bin / cqlsh 
 + + + b / bin / cqlsh 
 @ @ - 64 , 8 + 64 , 6 @ @ except ImportError : 
 pass 
 
 CQL _ LIB _ PREFIX = ' cassandra - driver - internal - only - ' 
 - FUTURES _ LIB _ PREFIX = ' futures - ' 
 - SIX _ LIB _ PREFIX = ' six - ' 
 
 CASSANDRA _ PATH = os . path . join ( os . path . dirname ( os . path . realpath ( _ _ file _ _ ) ) , ' . . ' ) 
 
 @ @ - 89 , 12 + 87 , 13 @ @ cql _ zip = find _ zip ( CQL _ LIB _ PREFIX ) 
 if cql _ zip : 
 ver = os . path . splitext ( os . path . basename ( cql _ zip ) ) [ 0 ] [ len ( CQL _ LIB _ PREFIX ) : ] 
 sys . path . insert ( 0 , os . path . join ( cql _ zip , ' cassandra - driver - ' + ver ) ) 
 - futures _ zip = find _ zip ( FUTURES _ LIB _ PREFIX ) 
 - if futures _ zip : 
 - sys . path . insert ( 0 , futures _ zip ) 
 - six _ zip = find _ zip ( SIX _ LIB _ PREFIX ) 
 - if six _ zip : 
 - sys . path . insert ( 0 , six _ zip ) 
 + 
 + third _ parties = ( ' futures - ' , ' six - ' ) 
 + 
 + for lib in third _ parties : 
 + lib _ zip = find _ zip ( lib ) 
 + if lib _ zip : 
 + sys . path . insert ( 0 , lib _ zip ) 
 
 warnings . filterwarnings ( " ignore " , r " . * blist . * " ) 
 try : 
 @ @ - 118 , 7 + 117 , 7 @ @ cqlshlibdir = os . path . join ( CASSANDRA _ PATH , ' pylib ' ) 
 if os . path . isdir ( cqlshlibdir ) : 
 sys . path . insert ( 0 , cqlshlibdir ) 
 
 - from cqlshlib import cqlhandling , cql3handling , pylexotron , sslhandling , async _ insert 
 + from cqlshlib import cqlhandling , cql3handling , pylexotron , sslhandling , async _ insert , meter 
 from cqlshlib . displaying import ( RED , BLUE , CYAN , ANSI _ RESET , COLUMN _ NAME _ COLORS , 
 FormattedValue , colorme ) 
 from cqlshlib . formatting import format _ by _ type , formatter _ for , format _ value _ utype 
 @ @ - 1361 , 7 + 1360 , 7 @ @ class Shell ( cmd . Cmd ) : 
 linesource . close ( ) 
 elif self . tty : 
 print 
 - return rownum - 1 
 + return rownum 
 
 def create _ insert _ statement ( self , columns , nullval , table _ meta , row ) : 
 
 @ @ - 1437 , 23 + 1436 , 25 @ @ class Shell ( cmd . Cmd ) : 
 except IOError , e : 
 self . printerr ( " Can ' t open % r for writing : % s " % ( fname , e ) ) 
 return 0 
 + wmeter = meter . Meter ( ) 
 try : 
 + 
 dump = self . prep _ export _ dump ( ks , cf , columns ) 
 writer = csv . writer ( csvdest , * * dialect _ options ) 
 if header : 
 writer . writerow ( columns ) 
 - rows = 0 
 for row in dump : 
 fmt = lambda v : \ 
 format _ value ( v , output _ encoding = encoding , nullval = nullval , 
 time _ format = self . display _ time _ format , 
 float _ precision = self . display _ float _ precision ) . strval 
 writer . writerow ( map ( fmt , row . values ( ) ) ) 
 - rows + = 1 
 + wmeter . mark _ written ( ) 
 + wmeter . done ( ) 
 finally : 
 if do _ close : 
 csvdest . close ( ) 
 - return rows 
 + return wmeter . num _ finished ( ) 
 
 def prep _ export _ dump ( self , ks , cf , columns ) : 
 if columns is None : 
 diff - - git a / pylib / cqlshlib / async _ insert . py b / pylib / cqlshlib / async _ insert . py 
 index a4adcd2 . . d325716 100644 
 - - - a / pylib / cqlshlib / async _ insert . py 
 + + + b / pylib / cqlshlib / async _ insert . py 
 @ @ - 14 , 11 + 14 , 10 @ @ 
 # See the License for the specific language governing permissions and 
 # limitations under the License . 
 
 - from itertools import count 
 from threading import Event , Condition 
 + from . import meter 
 import sys 
 
 - 
 class _ CountDownLatch ( object ) : 
 def _ _ init _ _ ( self , counter = 1 ) : 
 self . _ count = counter 
 @ @ - 47 , 10 + 46 , 10 @ @ class _ ChainedWriter ( object ) : 
 self . _ session = session 
 self . _ cancellation _ event = Event ( ) 
 self . _ first _ error = None 
 - self . _ num _ finished = count ( start = 1 ) 
 self . _ task _ counter = _ CountDownLatch ( self . CONCURRENCY ) 
 self . _ enumerated _ reader = enumerated _ reader 
 self . _ statement _ func = statement _ func 
 + self . _ meter = meter . Meter ( ) 
 
 def insert ( self ) : 
 if not self . _ enumerated _ reader : 
 @ @ - 65 , 8 + 64 , 9 @ @ class _ ChainedWriter ( object ) : 
 self . _ cancellation _ event . set ( ) 
 sys . stdout . write ( ' Aborting due to keyboard interrupt \ n ' ) 
 self . _ task _ counter . await ( ) 
 + self . _ meter . done ( ) 
 + return self . _ meter . num _ finished ( ) , self . _ first _ error 
 
 - return next ( self . _ num _ finished ) , self . _ first _ error 
 
 def _ abort ( self , error , failed _ record ) : 
 if not self . _ first _ error : 
 @ @ - 83 , 10 + 83 , 7 @ @ class _ ChainedWriter ( object ) : 
 return 
 
 if result is not self . _ sentinel : 
 - finished = next ( self . _ num _ finished ) 
 - if not finished % 1000 : 
 - sys . stdout . write ( ' Imported % s rows \ r ' % finished ) 
 - sys . stdout . flush ( ) 
 + self . _ meter . mark _ written ( ) 
 
 try : 
 ( current _ record , row ) = next ( self . _ enumerated _ reader ) 
 diff - - git a / pylib / cqlshlib / meter . py b / pylib / cqlshlib / meter . py 
 new file mode 100644 
 index 0000000 . . e1a6bfc 
 - - - / dev / null 
 + + + b / pylib / cqlshlib / meter . py 
 @ @ - 0 , 0 + 1 , 59 @ @ 
 + # Licensed to the Apache Software Foundation ( ASF ) under one 
 + # or more contributor license agreements . See the NOTICE file 
 + # distributed with this work for additional information 
 + # regarding copyright ownership . The ASF licenses this file 
 + # to you under the Apache License , Version 2 . 0 ( the 
 + # " License " ) ; you may not use this file except in compliance 
 + # with the License . You may obtain a copy of the License at 
 + # 
 + # http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + # 
 + # Unless required by applicable law or agreed to in writing , software 
 + # distributed under the License is distributed on an " AS IS " BASIS , 
 + # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + # See the License for the specific language governing permissions and 
 + # limitations under the License . 
 + 
 + from time import time 
 + import sys 
 + from threading import RLock 
 + 
 + 
 + class Meter ( object ) : 
 + 
 + def _ _ init _ _ ( self ) : 
 + self . _ num _ finished = 0 
 + self . _ last _ checkpoint _ time = None 
 + self . _ current _ rate = 0 . 0 
 + self . _ lock = RLock ( ) 
 + 
 + def mark _ written ( self ) : 
 + with self . _ lock : 
 + if not self . _ last _ checkpoint _ time : 
 + self . _ last _ checkpoint _ time = time ( ) 
 + self . _ num _ finished + = 1 
 + 
 + if self . _ num _ finished % 10000 = = 0 : 
 + previous _ checkpoint _ time = self . _ last _ checkpoint _ time 
 + self . _ last _ checkpoint _ time = time ( ) 
 + new _ rate = 10000 . 0 / ( self . _ last _ checkpoint _ time - previous _ checkpoint _ time ) 
 + if self . _ current _ rate = = 0 . 0 : 
 + self . _ current _ rate = new _ rate 
 + else : 
 + self . _ current _ rate = ( self . _ current _ rate + new _ rate ) / 2 . 0 
 + 
 + if self . _ num _ finished % 1000 ! = 0 : 
 + return 
 + output = ' Processed % s rows ; Write : % . 2f rows / s \ r ' % \ 
 + ( self . _ num _ finished , self . _ current _ rate ) 
 + sys . stdout . write ( output ) 
 + sys . stdout . flush ( ) 
 + 
 + def num _ finished ( self ) : 
 + with self . _ lock : 
 + return self . _ num _ finished 
 + 
 + def done ( self ) : 
 + print " " 
 + 
 +

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index fda6719 . . 6ce4af9 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 3 @ @ 
 - < < < < < < < . working 
 0 . 8 - dev 
 * avoid double RowMutation serialization on write path ( CASSANDRA - 1800 ) 
 * adds support for columns that act as incr / decr counters 
 @ @ - 12 , 7 + 11 , 6 @ @ 
 * Fix for Cli to support updating replicate _ on _ write ( CASSANDRA - 2236 ) 
 
 
 - = = = = = = = 
 0 . 7 . 5 
 * Avoid seeking when sstable2json exports the entire file ( CASSANDRA - 2318 ) 
 * fix tombstone handling in repair and sstable2json ( CASSANDRA - 2279 ) 
 @ @ - 24 , 7 + 22 , 6 @ @ 
 * shut down server for OOM on a Thrift thread ( CASSANDRA - 2269 ) 
 
 
 - > > > > > > > . merge - right . r1081840 
 0 . 7 . 4 
 * add nodetool join command ( CASSANDRA - 2160 ) 
 * fix secondary indexes on pre - existing or streamed data ( CASSANDRA - 2244 ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractCommutativeType . java b / src / java / org / apache / cassandra / db / marshal / AbstractCommutativeType . java 
 index 2fa1b16 . . 77b9573 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / AbstractCommutativeType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / AbstractCommutativeType . java 
 @ @ - 20 , 12 + 20 , 10 @ @ 
 * / 
 package org . apache . cassandra . db . marshal ; 
 
 - import java . net . InetAddress ; 
 import java . nio . ByteBuffer ; 
 
 import org . apache . cassandra . db . Column ; 
 - import org . apache . cassandra . db . IColumnContainer ; 
 - import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . db . context . CounterContext ; 
 
 public abstract class AbstractCommutativeType extends AbstractType < Long > 
 { 
 @ @ - 36 , 7 + 34 , 7 @ @ public abstract class AbstractCommutativeType extends AbstractType < Long > 
 
 public Long compose ( ByteBuffer bytes ) 
 { 
 - return ByteBufferUtil . toLong ( bytes ) ; 
 + return CounterContext . instance ( ) . total ( bytes ) ; 
 } 
 
 / * *
