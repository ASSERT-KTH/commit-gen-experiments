BLEU SCORE: 0.030569602392969023

TEST MSG: Fix remaining dtest failures caused by CASSANDRA - 8143
GENERATED MSG: only gc if there are undeleted sstables that gc - ing could free

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index d77cf1f . . 1f3c7db 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 276 , 14 + 276 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> + / / FIXME : this is wrong , JMX should never update live CFMetaData objects <nl> public void setCrcCheckChance ( double crcCheckChance ) <nl> { <nl> try <nl> { <nl> - / / TODO : this doesn ' t affect sstables being written <nl> - for ( SSTableReader sstable : keyspace . getAllSSTables ( SSTableSet . CANONICAL ) ) <nl> - if ( sstable . compression ) <nl> - sstable . getCompressionMetadata ( ) . parameters . setCrcCheckChance ( crcCheckChance ) ; <nl> + metadata . params . compression . setCrcCheckChance ( crcCheckChance ) ; <nl> } <nl> catch ( ConfigurationException e ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / lifecycle / Helpers . java b / src / java / org / apache / cassandra / db / lifecycle / Helpers . java <nl> index 2b94d7a . . 8cb92b9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / lifecycle / Helpers . java <nl> + + + b / src / java / org / apache / cassandra / db / lifecycle / Helpers . java <nl> @ @ - 71 , 10 + 71 , 10 @ @ class Helpers <nl> * A convenience method for encapsulating this action over multiple SSTableReader with exception - safety <nl> * @ return accumulate if not null ( with any thrown exception attached ) , or any thrown exception otherwise <nl> * / <nl> - static void setupKeyCache ( Iterable < SSTableReader > readers ) <nl> + static void setupOnline ( Iterable < SSTableReader > readers ) <nl> { <nl> for ( SSTableReader reader : readers ) <nl> - reader . setupKeyCache ( ) ; <nl> + reader . setupOnline ( ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 98 , 16 + 98 , 6 @ @ class Helpers <nl> } <nl> <nl> / * * <nl> - * A convenience method for encapsulating this action over multiple SSTableReader with exception - safety <nl> - * @ return accumulate if not null ( with any thrown exception attached ) , or any thrown exception otherwise <nl> - * / <nl> - static void setupKeycache ( Iterable < SSTableReader > readers ) <nl> - { <nl> - for ( SSTableReader reader : readers ) <nl> - reader . setupKeyCache ( ) ; <nl> - } <nl> - <nl> - / * * <nl> * assert that none of these readers have been replaced <nl> * / <nl> static void checkNotReplaced ( Iterable < SSTableReader > readers ) <nl> diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java b / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java <nl> index edfd795 . . 5d6d9f9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java <nl> + + + b / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java <nl> @ @ - 350 , 7 + 350 , 7 @ @ public class LifecycleTransaction extends Transactional . AbstractTransactional <nl> staged . update . add ( reader ) ; <nl> identities . add ( reader . instanceId ) ; <nl> if ( ! isOffline ( ) ) <nl> - reader . setupKeyCache ( ) ; <nl> + reader . setupOnline ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / db / lifecycle / Tracker . java b / src / java / org / apache / cassandra / db / lifecycle / Tracker . java <nl> index f5829ea . . ea76fd6 100644 <nl> - - - a / src / java / org / apache / cassandra / db / lifecycle / Tracker . java <nl> + + + b / src / java / org / apache / cassandra / db / lifecycle / Tracker . java <nl> @ @ - 177 , 7 + 177 , 7 @ @ public class Tracker <nl> public void addInitialSSTables ( Iterable < SSTableReader > sstables ) <nl> { <nl> if ( ! isDummy ( ) ) <nl> - setupKeycache ( sstables ) ; <nl> + setupOnline ( sstables ) ; <nl> apply ( updateLiveSet ( emptySet ( ) , sstables ) ) ; <nl> maybeFail ( updateSizeTracking ( emptySet ( ) , sstables , null ) ) ; <nl> / / no notifications or backup necessary <nl> @ @ - 341 , 7 + 341 , 7 @ @ public class Tracker <nl> return ; <nl> } <nl> <nl> - sstable . setupKeyCache ( ) ; <nl> + sstable . setupOnline ( ) ; <nl> / / back up before creating a new Snapshot ( which makes the new one eligible for compaction ) <nl> maybeIncrementallyBackup ( sstable ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java <nl> index 4eebb0c . . 34a657f 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java <nl> @ @ - 222 , 7 + 222 , 7 @ @ public class SSTableRewriter extends Transactional . AbstractTransactional impleme <nl> <nl> final List < DecoratedKey > invalidateKeys = new ArrayList < > ( ) ; <nl> invalidateKeys . addAll ( cachedKeys . keySet ( ) ) ; <nl> - newReader . setupKeyCache ( ) ; <nl> + newReader . setupOnline ( ) ; <nl> for ( Map . Entry < DecoratedKey , RowIndexEntry > cacheKey : cachedKeys . entrySet ( ) ) <nl> newReader . cacheKey ( cacheKey . getKey ( ) , cacheKey . getValue ( ) ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> index f13fbba . . d5c192e 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> @ @ - 635 , 12 + 635 , 19 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> return dfile . path ( ) ; <nl> } <nl> <nl> - public void setupKeyCache ( ) <nl> + public void setupOnline ( ) <nl> { <nl> / / under normal operation we can do this at any time , but SSTR is also used outside C * proper , <nl> / / e . g . by BulkLoader , which does not initialize the cache . As a kludge , we set up the cache <nl> / / here when we know we ' re being wired into the rest of the server infrastructure . <nl> keyCache = CacheService . instance . keyCache ; <nl> + <nl> + / / ensure secondary index compression metadata is linked to the parent metadata . <nl> + if ( compression & & metadata . isIndex ( ) ) <nl> + { <nl> + getCompressionMetadata ( ) . parameters . setLiveMetadata ( <nl> + Schema . instance . getCFMetaData ( metadata . ksName , metadata . getParentColumnFamilyName ( ) ) ) ; <nl> + } <nl> } <nl> <nl> public boolean isKeyCacheSetup ( ) <nl> @ @ - 1287 , 13 + 1294 , 7 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> if ( ! compression ) <nl> throw new IllegalStateException ( this + " is not compressed " ) ; <nl> <nl> - CompressionMetadata cmd = ( ( ICompressedFile ) dfile ) . getMetadata ( ) ; <nl> - <nl> - / / We need the parent cf metadata <nl> - String cfName = metadata . isIndex ( ) ? metadata . getParentColumnFamilyName ( ) : metadata . cfName ; <nl> - cmd . parameters . setLiveMetadata ( Schema . instance . getCFMetaData ( metadata . ksName , cfName ) ) ; <nl> - <nl> - return cmd ; <nl> + return ( ( ICompressedFile ) dfile ) . getMetadata ( ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 2050 , 6 + 2051 , 8 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> { <nl> tidy . setup ( this , trackHotness ) ; <nl> this . readMeter = tidy . global . readMeter ; <nl> + if ( compression ) <nl> + getCompressionMetadata ( ) . parameters . setLiveMetadata ( metadata ) ; <nl> } <nl> <nl> @ VisibleForTesting
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index d0e2ef7 . . 0bef41f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1144 , 24 + 1144 , 19 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> + public boolean hasUnreclaimedSpace ( ) <nl> + { <nl> + return ssTables _ . getLiveSize ( ) < ssTables _ . getTotalSize ( ) ; <nl> + } <nl> + <nl> public long getTotalDiskSpaceUsed ( ) <nl> { <nl> - long n = 0 ; <nl> - for ( File file : files ( ) ) <nl> - { <nl> - n + = file . length ( ) ; <nl> - } <nl> - return n ; <nl> + return ssTables _ . getTotalSize ( ) ; <nl> } <nl> <nl> public long getLiveDiskSpaceUsed ( ) <nl> { <nl> - long n = 0 ; <nl> - for ( SSTableReader sstable : ssTables _ ) <nl> - { <nl> - n + = sstable . bytesOnDisk ( ) ; <nl> - } <nl> - return n ; <nl> + return ssTables _ . getLiveSize ( ) ; <nl> } <nl> <nl> public int getLiveSSTableCount ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java <nl> index 0be0dbf . . e8792a1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Table . java <nl> + + + b / src / java / org / apache / cassandra / db / Table . java <nl> @ @ - 208 , 7 + 208 , 7 @ @ public class Table <nl> return tableMetadata . getColumnFamilies ( ) ; <nl> } <nl> <nl> - Collection < ColumnFamilyStore > getColumnFamilyStores ( ) <nl> + public Collection < ColumnFamilyStore > getColumnFamilyStores ( ) <nl> { <nl> return Collections . unmodifiableCollection ( columnFamilyStores . values ( ) ) ; <nl> } <nl> @ @ - 479 , 7 + 479 , 7 @ @ public class Table <nl> if ( path = = null ) <nl> { <nl> / / retry after GCing to force unmap of compacted SSTables so they can be deleted <nl> - StorageService . requestGC ( ) ; <nl> + StorageService . instance . requestGC ( ) ; <nl> try <nl> { <nl> Thread . sleep ( SSTableDeletingReference . RETRY _ DELAY * 2 ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / SSTableDeletingReference . java b / src / java / org / apache / cassandra / io / SSTableDeletingReference . java <nl> index b123161 . . e8c7256 100644 <nl> - - - a / src / java / org / apache / cassandra / io / SSTableDeletingReference . java <nl> + + + b / src / java / org / apache / cassandra / io / SSTableDeletingReference . java <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> package org . apache . cassandra . io ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOError ; <nl> import java . io . IOException ; <nl> import java . lang . ref . PhantomReference ; <nl> import java . lang . ref . ReferenceQueue ; <nl> @ @ - 9 , 6 + 10 , 8 @ @ import java . util . TimerTask ; <nl> <nl> import org . apache . log4j . Logger ; <nl> <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> + <nl> public class SSTableDeletingReference extends PhantomReference < SSTableReader > <nl> { <nl> private static final Logger logger = Logger . getLogger ( SSTableDeletingReference . class ) ; <nl> @ @ - 16 , 13 + 19 , 17 @ @ public class SSTableDeletingReference extends PhantomReference < SSTableReader > <nl> private static final Timer timer = new Timer ( " SSTABLE - CLEANUP - TIMER " ) ; <nl> public static final int RETRY _ DELAY = 10000 ; <nl> <nl> + private final SSTableTracker tracker ; <nl> public final String path ; <nl> + private final long size ; <nl> private boolean deleteOnCleanup ; <nl> <nl> - SSTableDeletingReference ( SSTableReader referent , ReferenceQueue < ? super SSTableReader > q ) <nl> + SSTableDeletingReference ( SSTableTracker tracker , SSTableReader referent , ReferenceQueue < ? super SSTableReader > q ) <nl> { <nl> super ( referent , q ) ; <nl> + this . tracker = tracker ; <nl> this . path = referent . path ; <nl> + this . size = referent . bytesOnDisk ( ) ; <nl> } <nl> <nl> public void deleteOnCleanup ( ) <nl> @ @ - 62 , 10 + 69 , 18 @ @ public class SSTableDeletingReference extends PhantomReference < SSTableReader > <nl> throw new RuntimeException ( " Unable to delete " + path ) ; <nl> } <nl> } <nl> + try <nl> + { <nl> + FileUtils . deleteWithConfirm ( new File ( SSTable . indexFilename ( path ) ) ) ; <nl> + FileUtils . deleteWithConfirm ( new File ( SSTable . filterFilename ( path ) ) ) ; <nl> + FileUtils . deleteWithConfirm ( new File ( SSTable . compactedFilename ( path ) ) ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new IOError ( e ) ; <nl> + } <nl> + tracker . spaceReclaimed ( size ) ; <nl> logger . info ( " Deleted " + path ) ; <nl> - DeletionService . submitDeleteWithRetry ( SSTable . indexFilename ( path ) ) ; <nl> - DeletionService . submitDeleteWithRetry ( SSTable . filterFilename ( path ) ) ; <nl> - DeletionService . submitDeleteWithRetry ( SSTable . compactedFilename ( path ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / SSTableReader . java b / src / java / org / apache / cassandra / io / SSTableReader . java <nl> index 01e8d07 . . 179edf2 100644 <nl> - - - a / src / java / org / apache / cassandra / io / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / SSTableReader . java <nl> @ @ - 135 , 7 + 135 , 7 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> return sstable ; <nl> } <nl> <nl> - SSTableDeletingReference phantomReference ; <nl> + private volatile SSTableDeletingReference phantomReference ; <nl> / / jvm can only map up to 2GB at a time , so we split index / data into segments of that size when using mmap i / o <nl> private final MappedByteBuffer [ ] indexBuffers ; <nl> private final MappedByteBuffer [ ] buffers ; <nl> @ @ - 196 , 11 + 196 , 15 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> this . indexPositions = indexPositions ; <nl> this . spannedIndexDataPositions = spannedIndexDataPositions ; <nl> this . bf = bloomFilter ; <nl> - phantomReference = new SSTableDeletingReference ( this , finalizerQueue ) ; <nl> - finalizers . add ( phantomReference ) ; <nl> this . keyCache = keyCache ; <nl> } <nl> <nl> + public void addFinalizingReference ( SSTableTracker tracker ) <nl> + { <nl> + phantomReference = new SSTableDeletingReference ( tracker , this , finalizerQueue ) ; <nl> + finalizers . add ( phantomReference ) ; <nl> + } <nl> + <nl> private static MappedByteBuffer mmap ( String filename , long start , int size ) throws IOException <nl> { <nl> RandomAccessFile raf ; <nl> diff - - git a / src / java / org / apache / cassandra / io / SSTableTracker . java b / src / java / org / apache / cassandra / io / SSTableTracker . java <nl> index 1e3b861 . . 7154e2f 100644 <nl> - - - a / src / java / org / apache / cassandra / io / SSTableTracker . java <nl> + + + b / src / java / org / apache / cassandra / io / SSTableTracker . java <nl> @ @ - 23 , 11 + 23 , 14 @ @ package org . apache . cassandra . io ; <nl> <nl> import java . util . * ; <nl> import java . io . IOException ; <nl> + import java . util . concurrent . atomic . AtomicLong ; <nl> <nl> <nl> public class SSTableTracker implements Iterable < SSTableReader > <nl> { <nl> private volatile Set < SSTableReader > sstables ; <nl> + private final AtomicLong liveSize = new AtomicLong ( ) ; <nl> + private final AtomicLong totalSize = new AtomicLong ( ) ; <nl> <nl> public SSTableTracker ( Collection < SSTableReader > sstables ) <nl> { <nl> @ @ - 42 , 12 + 45 , 17 @ @ public class SSTableTracker implements Iterable < SSTableReader > <nl> { <nl> assert sstable . getIndexPositions ( ) ! = null ; <nl> sstablesNew . add ( sstable ) ; <nl> + long size = sstable . bytesOnDisk ( ) ; <nl> + liveSize . addAndGet ( size ) ; <nl> + totalSize . addAndGet ( size ) ; <nl> + sstable . addFinalizingReference ( this ) ; <nl> } <nl> <nl> for ( SSTableReader sstable : oldSSTables ) <nl> { <nl> sstablesNew . remove ( sstable ) ; <nl> sstable . markCompacted ( ) ; <nl> + liveSize . addAndGet ( - sstable . bytesOnDisk ( ) ) ; <nl> } <nl> <nl> sstables = Collections . unmodifiableSet ( sstablesNew ) ; <nl> @ @ - 102 , 4 + 110 , 20 @ @ public class SSTableTracker implements Iterable < SSTableReader > <nl> } <nl> return n ; <nl> } <nl> + <nl> + public long getLiveSize ( ) <nl> + { <nl> + return liveSize . get ( ) ; <nl> + } <nl> + <nl> + public long getTotalSize ( ) <nl> + { <nl> + return totalSize . get ( ) ; <nl> + } <nl> + <nl> + public void spaceReclaimed ( long size ) <nl> + { <nl> + totalSize . addAndGet ( - size ) ; <nl> + } <nl> } <nl> + <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 4971133 . . 17826ce 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 1472 , 10 + 1472 , 31 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe <nl> return isClientMode ; <nl> } <nl> <nl> - public static void requestGC ( ) <nl> + public synchronized void requestGC ( ) <nl> { <nl> - logger _ . info ( " requesting GC to free disk space " ) ; <nl> - System . gc ( ) ; <nl> + if ( hasUnreclaimedSpace ( ) ) <nl> + { <nl> + logger _ . info ( " requesting GC to free disk space " ) ; <nl> + System . gc ( ) ; <nl> + try <nl> + { <nl> + Thread . sleep ( 1000 ) ; <nl> + } <nl> + catch ( InterruptedException e ) <nl> + { <nl> + throw new AssertionError ( e ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + private boolean hasUnreclaimedSpace ( ) <nl> + { <nl> + for ( ColumnFamilyStore cfs : ColumnFamilyStore . all ( ) ) <nl> + { <nl> + if ( cfs . hasUnreclaimedSpace ( ) ) <nl> + return true ; <nl> + } <nl> + return false ; <nl> } <nl> <nl> / / Never ever do this at home . Used by tests .

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index d77cf1f . . 1f3c7db 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 276 , 14 + 276 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 + / / FIXME : this is wrong , JMX should never update live CFMetaData objects 
 public void setCrcCheckChance ( double crcCheckChance ) 
 { 
 try 
 { 
 - / / TODO : this doesn ' t affect sstables being written 
 - for ( SSTableReader sstable : keyspace . getAllSSTables ( SSTableSet . CANONICAL ) ) 
 - if ( sstable . compression ) 
 - sstable . getCompressionMetadata ( ) . parameters . setCrcCheckChance ( crcCheckChance ) ; 
 + metadata . params . compression . setCrcCheckChance ( crcCheckChance ) ; 
 } 
 catch ( ConfigurationException e ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / lifecycle / Helpers . java b / src / java / org / apache / cassandra / db / lifecycle / Helpers . java 
 index 2b94d7a . . 8cb92b9 100644 
 - - - a / src / java / org / apache / cassandra / db / lifecycle / Helpers . java 
 + + + b / src / java / org / apache / cassandra / db / lifecycle / Helpers . java 
 @ @ - 71 , 10 + 71 , 10 @ @ class Helpers 
 * A convenience method for encapsulating this action over multiple SSTableReader with exception - safety 
 * @ return accumulate if not null ( with any thrown exception attached ) , or any thrown exception otherwise 
 * / 
 - static void setupKeyCache ( Iterable < SSTableReader > readers ) 
 + static void setupOnline ( Iterable < SSTableReader > readers ) 
 { 
 for ( SSTableReader reader : readers ) 
 - reader . setupKeyCache ( ) ; 
 + reader . setupOnline ( ) ; 
 } 
 
 / * * 
 @ @ - 98 , 16 + 98 , 6 @ @ class Helpers 
 } 
 
 / * * 
 - * A convenience method for encapsulating this action over multiple SSTableReader with exception - safety 
 - * @ return accumulate if not null ( with any thrown exception attached ) , or any thrown exception otherwise 
 - * / 
 - static void setupKeycache ( Iterable < SSTableReader > readers ) 
 - { 
 - for ( SSTableReader reader : readers ) 
 - reader . setupKeyCache ( ) ; 
 - } 
 - 
 - / * * 
 * assert that none of these readers have been replaced 
 * / 
 static void checkNotReplaced ( Iterable < SSTableReader > readers ) 
 diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java b / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java 
 index edfd795 . . 5d6d9f9 100644 
 - - - a / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java 
 + + + b / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java 
 @ @ - 350 , 7 + 350 , 7 @ @ public class LifecycleTransaction extends Transactional . AbstractTransactional 
 staged . update . add ( reader ) ; 
 identities . add ( reader . instanceId ) ; 
 if ( ! isOffline ( ) ) 
 - reader . setupKeyCache ( ) ; 
 + reader . setupOnline ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / db / lifecycle / Tracker . java b / src / java / org / apache / cassandra / db / lifecycle / Tracker . java 
 index f5829ea . . ea76fd6 100644 
 - - - a / src / java / org / apache / cassandra / db / lifecycle / Tracker . java 
 + + + b / src / java / org / apache / cassandra / db / lifecycle / Tracker . java 
 @ @ - 177 , 7 + 177 , 7 @ @ public class Tracker 
 public void addInitialSSTables ( Iterable < SSTableReader > sstables ) 
 { 
 if ( ! isDummy ( ) ) 
 - setupKeycache ( sstables ) ; 
 + setupOnline ( sstables ) ; 
 apply ( updateLiveSet ( emptySet ( ) , sstables ) ) ; 
 maybeFail ( updateSizeTracking ( emptySet ( ) , sstables , null ) ) ; 
 / / no notifications or backup necessary 
 @ @ - 341 , 7 + 341 , 7 @ @ public class Tracker 
 return ; 
 } 
 
 - sstable . setupKeyCache ( ) ; 
 + sstable . setupOnline ( ) ; 
 / / back up before creating a new Snapshot ( which makes the new one eligible for compaction ) 
 maybeIncrementallyBackup ( sstable ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java 
 index 4eebb0c . . 34a657f 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java 
 @ @ - 222 , 7 + 222 , 7 @ @ public class SSTableRewriter extends Transactional . AbstractTransactional impleme 
 
 final List < DecoratedKey > invalidateKeys = new ArrayList < > ( ) ; 
 invalidateKeys . addAll ( cachedKeys . keySet ( ) ) ; 
 - newReader . setupKeyCache ( ) ; 
 + newReader . setupOnline ( ) ; 
 for ( Map . Entry < DecoratedKey , RowIndexEntry > cacheKey : cachedKeys . entrySet ( ) ) 
 newReader . cacheKey ( cacheKey . getKey ( ) , cacheKey . getValue ( ) ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 index f13fbba . . d5c192e 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 @ @ - 635 , 12 + 635 , 19 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 return dfile . path ( ) ; 
 } 
 
 - public void setupKeyCache ( ) 
 + public void setupOnline ( ) 
 { 
 / / under normal operation we can do this at any time , but SSTR is also used outside C * proper , 
 / / e . g . by BulkLoader , which does not initialize the cache . As a kludge , we set up the cache 
 / / here when we know we ' re being wired into the rest of the server infrastructure . 
 keyCache = CacheService . instance . keyCache ; 
 + 
 + / / ensure secondary index compression metadata is linked to the parent metadata . 
 + if ( compression & & metadata . isIndex ( ) ) 
 + { 
 + getCompressionMetadata ( ) . parameters . setLiveMetadata ( 
 + Schema . instance . getCFMetaData ( metadata . ksName , metadata . getParentColumnFamilyName ( ) ) ) ; 
 + } 
 } 
 
 public boolean isKeyCacheSetup ( ) 
 @ @ - 1287 , 13 + 1294 , 7 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 if ( ! compression ) 
 throw new IllegalStateException ( this + " is not compressed " ) ; 
 
 - CompressionMetadata cmd = ( ( ICompressedFile ) dfile ) . getMetadata ( ) ; 
 - 
 - / / We need the parent cf metadata 
 - String cfName = metadata . isIndex ( ) ? metadata . getParentColumnFamilyName ( ) : metadata . cfName ; 
 - cmd . parameters . setLiveMetadata ( Schema . instance . getCFMetaData ( metadata . ksName , cfName ) ) ; 
 - 
 - return cmd ; 
 + return ( ( ICompressedFile ) dfile ) . getMetadata ( ) ; 
 } 
 
 / * * 
 @ @ - 2050 , 6 + 2051 , 8 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 { 
 tidy . setup ( this , trackHotness ) ; 
 this . readMeter = tidy . global . readMeter ; 
 + if ( compression ) 
 + getCompressionMetadata ( ) . parameters . setLiveMetadata ( metadata ) ; 
 } 
 
 @ VisibleForTesting

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index d0e2ef7 . . 0bef41f 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1144 , 24 + 1144 , 19 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 + public boolean hasUnreclaimedSpace ( ) 
 + { 
 + return ssTables _ . getLiveSize ( ) < ssTables _ . getTotalSize ( ) ; 
 + } 
 + 
 public long getTotalDiskSpaceUsed ( ) 
 { 
 - long n = 0 ; 
 - for ( File file : files ( ) ) 
 - { 
 - n + = file . length ( ) ; 
 - } 
 - return n ; 
 + return ssTables _ . getTotalSize ( ) ; 
 } 
 
 public long getLiveDiskSpaceUsed ( ) 
 { 
 - long n = 0 ; 
 - for ( SSTableReader sstable : ssTables _ ) 
 - { 
 - n + = sstable . bytesOnDisk ( ) ; 
 - } 
 - return n ; 
 + return ssTables _ . getLiveSize ( ) ; 
 } 
 
 public int getLiveSSTableCount ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java 
 index 0be0dbf . . e8792a1 100644 
 - - - a / src / java / org / apache / cassandra / db / Table . java 
 + + + b / src / java / org / apache / cassandra / db / Table . java 
 @ @ - 208 , 7 + 208 , 7 @ @ public class Table 
 return tableMetadata . getColumnFamilies ( ) ; 
 } 
 
 - Collection < ColumnFamilyStore > getColumnFamilyStores ( ) 
 + public Collection < ColumnFamilyStore > getColumnFamilyStores ( ) 
 { 
 return Collections . unmodifiableCollection ( columnFamilyStores . values ( ) ) ; 
 } 
 @ @ - 479 , 7 + 479 , 7 @ @ public class Table 
 if ( path = = null ) 
 { 
 / / retry after GCing to force unmap of compacted SSTables so they can be deleted 
 - StorageService . requestGC ( ) ; 
 + StorageService . instance . requestGC ( ) ; 
 try 
 { 
 Thread . sleep ( SSTableDeletingReference . RETRY _ DELAY * 2 ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / SSTableDeletingReference . java b / src / java / org / apache / cassandra / io / SSTableDeletingReference . java 
 index b123161 . . e8c7256 100644 
 - - - a / src / java / org / apache / cassandra / io / SSTableDeletingReference . java 
 + + + b / src / java / org / apache / cassandra / io / SSTableDeletingReference . java 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package org . apache . cassandra . io ; 
 
 import java . io . File ; 
 + import java . io . IOError ; 
 import java . io . IOException ; 
 import java . lang . ref . PhantomReference ; 
 import java . lang . ref . ReferenceQueue ; 
 @ @ - 9 , 6 + 10 , 8 @ @ import java . util . TimerTask ; 
 
 import org . apache . log4j . Logger ; 
 
 + import org . apache . cassandra . io . util . FileUtils ; 
 + 
 public class SSTableDeletingReference extends PhantomReference < SSTableReader > 
 { 
 private static final Logger logger = Logger . getLogger ( SSTableDeletingReference . class ) ; 
 @ @ - 16 , 13 + 19 , 17 @ @ public class SSTableDeletingReference extends PhantomReference < SSTableReader > 
 private static final Timer timer = new Timer ( " SSTABLE - CLEANUP - TIMER " ) ; 
 public static final int RETRY _ DELAY = 10000 ; 
 
 + private final SSTableTracker tracker ; 
 public final String path ; 
 + private final long size ; 
 private boolean deleteOnCleanup ; 
 
 - SSTableDeletingReference ( SSTableReader referent , ReferenceQueue < ? super SSTableReader > q ) 
 + SSTableDeletingReference ( SSTableTracker tracker , SSTableReader referent , ReferenceQueue < ? super SSTableReader > q ) 
 { 
 super ( referent , q ) ; 
 + this . tracker = tracker ; 
 this . path = referent . path ; 
 + this . size = referent . bytesOnDisk ( ) ; 
 } 
 
 public void deleteOnCleanup ( ) 
 @ @ - 62 , 10 + 69 , 18 @ @ public class SSTableDeletingReference extends PhantomReference < SSTableReader > 
 throw new RuntimeException ( " Unable to delete " + path ) ; 
 } 
 } 
 + try 
 + { 
 + FileUtils . deleteWithConfirm ( new File ( SSTable . indexFilename ( path ) ) ) ; 
 + FileUtils . deleteWithConfirm ( new File ( SSTable . filterFilename ( path ) ) ) ; 
 + FileUtils . deleteWithConfirm ( new File ( SSTable . compactedFilename ( path ) ) ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new IOError ( e ) ; 
 + } 
 + tracker . spaceReclaimed ( size ) ; 
 logger . info ( " Deleted " + path ) ; 
 - DeletionService . submitDeleteWithRetry ( SSTable . indexFilename ( path ) ) ; 
 - DeletionService . submitDeleteWithRetry ( SSTable . filterFilename ( path ) ) ; 
 - DeletionService . submitDeleteWithRetry ( SSTable . compactedFilename ( path ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / SSTableReader . java b / src / java / org / apache / cassandra / io / SSTableReader . java 
 index 01e8d07 . . 179edf2 100644 
 - - - a / src / java / org / apache / cassandra / io / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / SSTableReader . java 
 @ @ - 135 , 7 + 135 , 7 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 return sstable ; 
 } 
 
 - SSTableDeletingReference phantomReference ; 
 + private volatile SSTableDeletingReference phantomReference ; 
 / / jvm can only map up to 2GB at a time , so we split index / data into segments of that size when using mmap i / o 
 private final MappedByteBuffer [ ] indexBuffers ; 
 private final MappedByteBuffer [ ] buffers ; 
 @ @ - 196 , 11 + 196 , 15 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 this . indexPositions = indexPositions ; 
 this . spannedIndexDataPositions = spannedIndexDataPositions ; 
 this . bf = bloomFilter ; 
 - phantomReference = new SSTableDeletingReference ( this , finalizerQueue ) ; 
 - finalizers . add ( phantomReference ) ; 
 this . keyCache = keyCache ; 
 } 
 
 + public void addFinalizingReference ( SSTableTracker tracker ) 
 + { 
 + phantomReference = new SSTableDeletingReference ( tracker , this , finalizerQueue ) ; 
 + finalizers . add ( phantomReference ) ; 
 + } 
 + 
 private static MappedByteBuffer mmap ( String filename , long start , int size ) throws IOException 
 { 
 RandomAccessFile raf ; 
 diff - - git a / src / java / org / apache / cassandra / io / SSTableTracker . java b / src / java / org / apache / cassandra / io / SSTableTracker . java 
 index 1e3b861 . . 7154e2f 100644 
 - - - a / src / java / org / apache / cassandra / io / SSTableTracker . java 
 + + + b / src / java / org / apache / cassandra / io / SSTableTracker . java 
 @ @ - 23 , 11 + 23 , 14 @ @ package org . apache . cassandra . io ; 
 
 import java . util . * ; 
 import java . io . IOException ; 
 + import java . util . concurrent . atomic . AtomicLong ; 
 
 
 public class SSTableTracker implements Iterable < SSTableReader > 
 { 
 private volatile Set < SSTableReader > sstables ; 
 + private final AtomicLong liveSize = new AtomicLong ( ) ; 
 + private final AtomicLong totalSize = new AtomicLong ( ) ; 
 
 public SSTableTracker ( Collection < SSTableReader > sstables ) 
 { 
 @ @ - 42 , 12 + 45 , 17 @ @ public class SSTableTracker implements Iterable < SSTableReader > 
 { 
 assert sstable . getIndexPositions ( ) ! = null ; 
 sstablesNew . add ( sstable ) ; 
 + long size = sstable . bytesOnDisk ( ) ; 
 + liveSize . addAndGet ( size ) ; 
 + totalSize . addAndGet ( size ) ; 
 + sstable . addFinalizingReference ( this ) ; 
 } 
 
 for ( SSTableReader sstable : oldSSTables ) 
 { 
 sstablesNew . remove ( sstable ) ; 
 sstable . markCompacted ( ) ; 
 + liveSize . addAndGet ( - sstable . bytesOnDisk ( ) ) ; 
 } 
 
 sstables = Collections . unmodifiableSet ( sstablesNew ) ; 
 @ @ - 102 , 4 + 110 , 20 @ @ public class SSTableTracker implements Iterable < SSTableReader > 
 } 
 return n ; 
 } 
 + 
 + public long getLiveSize ( ) 
 + { 
 + return liveSize . get ( ) ; 
 + } 
 + 
 + public long getTotalSize ( ) 
 + { 
 + return totalSize . get ( ) ; 
 + } 
 + 
 + public void spaceReclaimed ( long size ) 
 + { 
 + totalSize . addAndGet ( - size ) ; 
 + } 
 } 
 + 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 4971133 . . 17826ce 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 1472 , 10 + 1472 , 31 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe 
 return isClientMode ; 
 } 
 
 - public static void requestGC ( ) 
 + public synchronized void requestGC ( ) 
 { 
 - logger _ . info ( " requesting GC to free disk space " ) ; 
 - System . gc ( ) ; 
 + if ( hasUnreclaimedSpace ( ) ) 
 + { 
 + logger _ . info ( " requesting GC to free disk space " ) ; 
 + System . gc ( ) ; 
 + try 
 + { 
 + Thread . sleep ( 1000 ) ; 
 + } 
 + catch ( InterruptedException e ) 
 + { 
 + throw new AssertionError ( e ) ; 
 + } 
 + } 
 + } 
 + 
 + private boolean hasUnreclaimedSpace ( ) 
 + { 
 + for ( ColumnFamilyStore cfs : ColumnFamilyStore . all ( ) ) 
 + { 
 + if ( cfs . hasUnreclaimedSpace ( ) ) 
 + return true ; 
 + } 
 + return false ; 
 } 
 
 / / Never ever do this at home . Used by tests .
