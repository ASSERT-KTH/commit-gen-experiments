BLEU SCORE: 0.015445276590783498

TEST MSG: no need to hold onto the current ss table reader as a field
GENERATED MSG: avoid recursion in leveled compaction

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> index c224f91 . . 13f454e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> @ @ - 326 , 7 + 326 , 6 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy <nl> <nl> private ISSTableScanner currentScanner ; <nl> private long positionOffset ; <nl> - private SSTableReader currentSSTable ; <nl> private long totalBytesScanned = 0 ; <nl> <nl> public LeveledScanner ( Collection < SSTableReader > sstables , Collection < Range < Token > > ranges ) <nl> @ @ - 355 , 7 + 354 , 7 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy <nl> Collections . sort ( this . sstables , SSTableReader . sstableComparator ) ; <nl> sstableIterator = this . sstables . iterator ( ) ; <nl> assert sstableIterator . hasNext ( ) ; / / caller should check intersecting first <nl> - currentSSTable = sstableIterator . next ( ) ; <nl> + SSTableReader currentSSTable = sstableIterator . next ( ) ; <nl> currentScanner = currentSSTable . getScanner ( ranges , null ) ; <nl> <nl> } <nl> @ @ - 409 , 7 + 408 , 7 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy <nl> currentScanner = null ; <nl> return endOfData ( ) ; <nl> } <nl> - currentSSTable = sstableIterator . next ( ) ; <nl> + SSTableReader currentSSTable = sstableIterator . next ( ) ; <nl> currentScanner = currentSSTable . getScanner ( ranges , null ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / Directories . java b / src / java / org / apache / cassandra / db / Directories . java <nl> index 9c9f9b8 . . 7ee2823 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Directories . java <nl> + + + b / src / java / org / apache / cassandra / db / Directories . java <nl> @ @ - 31 , 7 + 31 , 6 @ @ import org . slf4j . LoggerFactory ; <nl> import org . apache . cassandra . config . * ; <nl> import org . apache . cassandra . db . compaction . LeveledManifest ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> - import org . apache . cassandra . io . util . MmappedSegmentedFile ; <nl> import org . apache . cassandra . io . sstable . * ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . CLibrary ; <nl> @ @ - 479 , 16 + 478 , 24 @ @ public class Directories <nl> if ( ! location . exists ( ) | | ! location . isDirectory ( ) ) <nl> continue ; <nl> <nl> - for ( File ksDir : location . listFiles ( ) ) <nl> + File [ ] ksDirs = location . listFiles ( ) ; <nl> + if ( ksDirs ! = null ) <nl> { <nl> - if ( ! ksDir . isDirectory ( ) ) <nl> - continue ; <nl> + for ( File ksDir : ksDirs ) <nl> + { <nl> + if ( ! ksDir . isDirectory ( ) ) <nl> + continue ; <nl> <nl> - for ( File file : ksDir . listFiles ( ) ) <nl> - migrateFile ( file , ksDir , null ) ; <nl> + File [ ] files = ksDir . listFiles ( ) ; <nl> + if ( files ! = null ) <nl> + { <nl> + for ( File file : files ) <nl> + migrateFile ( file , ksDir , null ) ; <nl> + } <nl> <nl> - migrateSnapshots ( ksDir ) ; <nl> - migrateBackups ( ksDir ) ; <nl> + migrateSnapshots ( ksDir ) ; <nl> + migrateBackups ( ksDir ) ; <nl> + } <nl> } <nl> } <nl> } <nl> @ @ - 499 , 16 + 506 , 23 @ @ public class Directories <nl> if ( ! snapshotDir . exists ( ) ) <nl> return ; <nl> <nl> - for ( File snapshot : snapshotDir . listFiles ( ) ) <nl> + File [ ] snapshots = snapshotDir . listFiles ( ) ; <nl> + if ( snapshots ! = null ) <nl> { <nl> - if ( ! snapshot . isDirectory ( ) ) <nl> - continue ; <nl> - <nl> - for ( File f : snapshot . listFiles ( ) ) <nl> - migrateFile ( f , ksDir , join ( SNAPSHOT _ SUBDIR , snapshot . getName ( ) ) ) ; <nl> + for ( File snapshot : snapshots ) <nl> + { <nl> + if ( ! snapshot . isDirectory ( ) ) <nl> + continue ; <nl> <nl> - if ( ! snapshot . delete ( ) ) <nl> - logger . info ( " Old snapsot directory { } not deleted by migraation as it is not empty " , snapshot ) ; <nl> + File [ ] files = snapshot . listFiles ( ) ; <nl> + if ( files ! = null ) <nl> + { <nl> + for ( File f : files ) <nl> + migrateFile ( f , ksDir , join ( SNAPSHOT _ SUBDIR , snapshot . getName ( ) ) ) ; <nl> + } <nl> + if ( ! snapshot . delete ( ) ) <nl> + logger . info ( " Old snapsot directory { } not deleted by migraation as it is not empty " , snapshot ) ; <nl> + } <nl> } <nl> if ( ! snapshotDir . delete ( ) ) <nl> logger . info ( " Old directory { } not deleted by migration as it is not empty " , snapshotDir ) ; <nl> @ @ - 520 , 9 + 534 , 12 @ @ public class Directories <nl> if ( ! backupDir . exists ( ) ) <nl> return ; <nl> <nl> - for ( File f : backupDir . listFiles ( ) ) <nl> - migrateFile ( f , ksDir , BACKUPS _ SUBDIR ) ; <nl> - <nl> + File [ ] files = backupDir . listFiles ( ) ; <nl> + if ( files ! = null ) <nl> + { <nl> + for ( File f : files ) <nl> + migrateFile ( f , ksDir , BACKUPS _ SUBDIR ) ; <nl> + } <nl> if ( ! backupDir . delete ( ) ) <nl> logger . info ( " Old directory { } not deleted by migration as it is not empty " , backupDir ) ; <nl> }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 index c224f91 . . 13f454e 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 @ @ - 326 , 7 + 326 , 6 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy 
 
 private ISSTableScanner currentScanner ; 
 private long positionOffset ; 
 - private SSTableReader currentSSTable ; 
 private long totalBytesScanned = 0 ; 
 
 public LeveledScanner ( Collection < SSTableReader > sstables , Collection < Range < Token > > ranges ) 
 @ @ - 355 , 7 + 354 , 7 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy 
 Collections . sort ( this . sstables , SSTableReader . sstableComparator ) ; 
 sstableIterator = this . sstables . iterator ( ) ; 
 assert sstableIterator . hasNext ( ) ; / / caller should check intersecting first 
 - currentSSTable = sstableIterator . next ( ) ; 
 + SSTableReader currentSSTable = sstableIterator . next ( ) ; 
 currentScanner = currentSSTable . getScanner ( ranges , null ) ; 
 
 } 
 @ @ - 409 , 7 + 408 , 7 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy 
 currentScanner = null ; 
 return endOfData ( ) ; 
 } 
 - currentSSTable = sstableIterator . next ( ) ; 
 + SSTableReader currentSSTable = sstableIterator . next ( ) ; 
 currentScanner = currentSSTable . getScanner ( ranges , null ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / Directories . java b / src / java / org / apache / cassandra / db / Directories . java 
 index 9c9f9b8 . . 7ee2823 100644 
 - - - a / src / java / org / apache / cassandra / db / Directories . java 
 + + + b / src / java / org / apache / cassandra / db / Directories . java 
 @ @ - 31 , 7 + 31 , 6 @ @ import org . slf4j . LoggerFactory ; 
 import org . apache . cassandra . config . * ; 
 import org . apache . cassandra . db . compaction . LeveledManifest ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 - import org . apache . cassandra . io . util . MmappedSegmentedFile ; 
 import org . apache . cassandra . io . sstable . * ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . CLibrary ; 
 @ @ - 479 , 16 + 478 , 24 @ @ public class Directories 
 if ( ! location . exists ( ) | | ! location . isDirectory ( ) ) 
 continue ; 
 
 - for ( File ksDir : location . listFiles ( ) ) 
 + File [ ] ksDirs = location . listFiles ( ) ; 
 + if ( ksDirs ! = null ) 
 { 
 - if ( ! ksDir . isDirectory ( ) ) 
 - continue ; 
 + for ( File ksDir : ksDirs ) 
 + { 
 + if ( ! ksDir . isDirectory ( ) ) 
 + continue ; 
 
 - for ( File file : ksDir . listFiles ( ) ) 
 - migrateFile ( file , ksDir , null ) ; 
 + File [ ] files = ksDir . listFiles ( ) ; 
 + if ( files ! = null ) 
 + { 
 + for ( File file : files ) 
 + migrateFile ( file , ksDir , null ) ; 
 + } 
 
 - migrateSnapshots ( ksDir ) ; 
 - migrateBackups ( ksDir ) ; 
 + migrateSnapshots ( ksDir ) ; 
 + migrateBackups ( ksDir ) ; 
 + } 
 } 
 } 
 } 
 @ @ - 499 , 16 + 506 , 23 @ @ public class Directories 
 if ( ! snapshotDir . exists ( ) ) 
 return ; 
 
 - for ( File snapshot : snapshotDir . listFiles ( ) ) 
 + File [ ] snapshots = snapshotDir . listFiles ( ) ; 
 + if ( snapshots ! = null ) 
 { 
 - if ( ! snapshot . isDirectory ( ) ) 
 - continue ; 
 - 
 - for ( File f : snapshot . listFiles ( ) ) 
 - migrateFile ( f , ksDir , join ( SNAPSHOT _ SUBDIR , snapshot . getName ( ) ) ) ; 
 + for ( File snapshot : snapshots ) 
 + { 
 + if ( ! snapshot . isDirectory ( ) ) 
 + continue ; 
 
 - if ( ! snapshot . delete ( ) ) 
 - logger . info ( " Old snapsot directory { } not deleted by migraation as it is not empty " , snapshot ) ; 
 + File [ ] files = snapshot . listFiles ( ) ; 
 + if ( files ! = null ) 
 + { 
 + for ( File f : files ) 
 + migrateFile ( f , ksDir , join ( SNAPSHOT _ SUBDIR , snapshot . getName ( ) ) ) ; 
 + } 
 + if ( ! snapshot . delete ( ) ) 
 + logger . info ( " Old snapsot directory { } not deleted by migraation as it is not empty " , snapshot ) ; 
 + } 
 } 
 if ( ! snapshotDir . delete ( ) ) 
 logger . info ( " Old directory { } not deleted by migration as it is not empty " , snapshotDir ) ; 
 @ @ - 520 , 9 + 534 , 12 @ @ public class Directories 
 if ( ! backupDir . exists ( ) ) 
 return ; 
 
 - for ( File f : backupDir . listFiles ( ) ) 
 - migrateFile ( f , ksDir , BACKUPS _ SUBDIR ) ; 
 - 
 + File [ ] files = backupDir . listFiles ( ) ; 
 + if ( files ! = null ) 
 + { 
 + for ( File f : files ) 
 + migrateFile ( f , ksDir , BACKUPS _ SUBDIR ) ; 
 + } 
 if ( ! backupDir . delete ( ) ) 
 logger . info ( " Old directory { } not deleted by migration as it is not empty " , backupDir ) ; 
 }
