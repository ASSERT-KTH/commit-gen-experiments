BLEU SCORE: 0.024675789207681903

TEST MSG: Disable old native protocol versions on demand
GENERATED MSG: move cache classes to cassandra . cache package .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d95b9ed . . 249e034 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Disable old native protocol versions on demand ( CASANDRA - 14659 ) <nl> * Allow specifying now - in - seconds in native protocol ( CASSANDRA - 14664 ) <nl> * Improve BTree build performance by avoiding data copy ( CASSANDRA - 9989 ) <nl> * Make monotonic read / read repair configurable ( CASSANDRA - 14635 ) <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index 12f5ab2 . . 064ee4f 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 664 , 6 + 664 , 10 @ @ native _ transport _ port : 9042 <nl> # The default is - 1 , which means unlimited . <nl> # native _ transport _ max _ concurrent _ connections _ per _ ip : - 1 <nl> <nl> + # Controls whether Cassandra honors older , yet currently supported , protocol versions . <nl> + # The default is true , which means all supported protocols will be honored . <nl> + native _ transport _ allow _ older _ protocols : true <nl> + <nl> # The address or interface to bind the native transport server to . <nl> # <nl> # Set rpc _ address OR rpc _ interface , not both . <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index f6eefc3 . . a13070c 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 153 , 6 + 153 , 7 @ @ public class Config <nl> public volatile long native _ transport _ max _ concurrent _ connections = - 1L ; <nl> public volatile long native _ transport _ max _ concurrent _ connections _ per _ ip = - 1L ; <nl> public boolean native _ transport _ flush _ in _ batches _ legacy = false ; <nl> + public volatile boolean native _ transport _ allow _ older _ protocols = true ; <nl> <nl> / * * <nl> * Max size of values in SSTables , in MegaBytes . <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index eae6fc9 . . af13f9c 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 1871 , 6 + 1871 , 16 @ @ public class DatabaseDescriptor <nl> return conf . native _ transport _ flush _ in _ batches _ legacy ; <nl> } <nl> <nl> + public static boolean getNativeTransportAllowOlderProtocols ( ) <nl> + { <nl> + return conf . native _ transport _ allow _ older _ protocols ; <nl> + } <nl> + <nl> + public static void setNativeTransportAllowOlderProtocols ( boolean isEnabled ) <nl> + { <nl> + conf . native _ transport _ allow _ older _ protocols = isEnabled ; <nl> + } <nl> + <nl> public static double getCommitLogSyncGroupWindow ( ) <nl> { <nl> return conf . commitlog _ sync _ group _ window _ in _ ms ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 84ec49d . . a3c61a3 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 34 , 12 + 34 , 10 @ @ import java . util . stream . StreamSupport ; <nl> import javax . annotation . Nullable ; <nl> import javax . management . * ; <nl> import javax . management . openmbean . CompositeData ; <nl> - import javax . management . openmbean . CompositeDataSupport ; <nl> import javax . management . openmbean . OpenDataException ; <nl> import javax . management . openmbean . TabularData ; <nl> import javax . management . openmbean . TabularDataSupport ; <nl> <nl> - import com . clearspring . analytics . stream . Counter ; <nl> import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . base . Preconditions ; <nl> import com . google . common . base . Predicate ; <nl> @ @ - 83 , 7 + 81 , 6 @ @ import org . apache . cassandra . io . sstable . SSTableLoader ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . locator . * ; <nl> import org . apache . cassandra . metrics . StorageMetrics ; <nl> - import org . apache . cassandra . metrics . TableMetrics . Sampler ; <nl> import org . apache . cassandra . net . * ; <nl> import org . apache . cassandra . repair . * ; <nl> import org . apache . cassandra . repair . messages . RepairOption ; <nl> @ @ - 107 , 7 + 104 , 6 @ @ import org . apache . cassandra . streaming . * ; <nl> import org . apache . cassandra . tracing . TraceKeyspace ; <nl> import org . apache . cassandra . transport . ProtocolVersion ; <nl> import org . apache . cassandra . utils . * ; <nl> - import org . apache . cassandra . utils . TopKSampler . SamplerResult ; <nl> import org . apache . cassandra . utils . logging . LoggingSupportFactory ; <nl> import org . apache . cassandra . utils . progress . ProgressEvent ; <nl> import org . apache . cassandra . utils . progress . ProgressEventType ; <nl> @ @ - 410 , 6 + 406 , 18 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> return daemon . isNativeTransportRunning ( ) ; <nl> } <nl> <nl> + @ Override <nl> + public void enableNativeTransportOldProtocolVersions ( ) <nl> + { <nl> + DatabaseDescriptor . setNativeTransportAllowOlderProtocols ( true ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void disableNativeTransportOldProtocolVersions ( ) <nl> + { <nl> + DatabaseDescriptor . setNativeTransportAllowOlderProtocols ( false ) ; <nl> + } <nl> + <nl> public void stopTransports ( ) <nl> { <nl> if ( isGossipActive ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index e54a95e . . b642c31 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 507 , 6 + 507 , 8 @ @ public interface StorageServiceMBean extends NotificationEmitter <nl> public void stopNativeTransport ( ) ; <nl> public void startNativeTransport ( ) ; <nl> public boolean isNativeTransportRunning ( ) ; <nl> + public void enableNativeTransportOldProtocolVersions ( ) ; <nl> + public void disableNativeTransportOldProtocolVersions ( ) ; <nl> <nl> / / allows a node that have been started without joining the ring to join it <nl> public void joinRing ( ) throws IOException ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index 63efe93 . . 9e5be28 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 1749 , 6 + 1749 , 16 @ @ public class NodeProbe implements AutoCloseable <nl> { <nl> ssProxy . enableAuditLog ( loggerName , includedKeyspaces , excludedKeyspaces , includedCategories , excludedCategories , includedUsers , excludedUsers ) ; <nl> } <nl> + <nl> + public void enableOldProtocolVersions ( ) <nl> + { <nl> + ssProxy . enableNativeTransportOldProtocolVersions ( ) ; <nl> + } <nl> + <nl> + public void disableOldProtocolVersions ( ) <nl> + { <nl> + ssProxy . disableNativeTransportOldProtocolVersions ( ) ; <nl> + } <nl> } <nl> <nl> class ColumnFamilyStoreMBeanIterator implements Iterator < Map . Entry < String , ColumnFamilyStoreMBean > > <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeTool . java b / src / java / org / apache / cassandra / tools / NodeTool . java <nl> index 0c53bef . . f2bbdce 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeTool . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeTool . java <nl> @ @ - 165 , 7 + 165 , 9 @ @ public class NodeTool <nl> HandoffWindow . class , <nl> ReloadSslCertificates . class , <nl> EnableAuditLog . class , <nl> - DisableAuditLog . class <nl> + DisableAuditLog . class , <nl> + EnableOldProtocolVersions . class , <nl> + DisableOldProtocolVersions . class <nl> ) ; <nl> <nl> Cli . CliBuilder < Runnable > builder = Cli . builder ( " nodetool " ) ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / DisableOldProtocolVersions . java b / src / java / org / apache / cassandra / tools / nodetool / DisableOldProtocolVersions . java <nl> new file mode 100644 <nl> index 0000000 . . 2083062 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / DisableOldProtocolVersions . java <nl> @ @ - 0 , 0 + 1 , 33 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . tools . nodetool ; <nl> + <nl> + import io . airlift . airline . Command ; <nl> + import org . apache . cassandra . tools . NodeProbe ; <nl> + import org . apache . cassandra . tools . NodeTool ; <nl> + <nl> + @ Command ( name = " disableoldprotocolversions " , description = " Disable old protocol versions " ) <nl> + public class DisableOldProtocolVersions extends NodeTool . NodeToolCmd <nl> + { <nl> + @ Override <nl> + public void execute ( NodeProbe probe ) <nl> + { <nl> + probe . disableOldProtocolVersions ( ) ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / EnableOldProtocolVersions . java b / src / java / org / apache / cassandra / tools / nodetool / EnableOldProtocolVersions . java <nl> new file mode 100644 <nl> index 0000000 . . f6d5be5 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / EnableOldProtocolVersions . java <nl> @ @ - 0 , 0 + 1 , 34 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . tools . nodetool ; <nl> + <nl> + import io . airlift . airline . Command ; <nl> + import org . apache . cassandra . tools . NodeProbe ; <nl> + import org . apache . cassandra . tools . NodeTool ; <nl> + <nl> + <nl> + @ Command ( name = " enableoldprotocolversions " , description = " Enable old protocol versions " ) <nl> + public class EnableOldProtocolVersions extends NodeTool . NodeToolCmd <nl> + { <nl> + @ Override <nl> + public void execute ( NodeProbe probe ) <nl> + { <nl> + probe . enableOldProtocolVersions ( ) ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / transport / ProtocolVersion . java b / src / java / org / apache / cassandra / transport / ProtocolVersion . java <nl> index 9a13903 . . ceeeca7 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / ProtocolVersion . java <nl> + + + b / src / java / org / apache / cassandra / transport / ProtocolVersion . java <nl> @ @ - 26 , 6 + 26 , 8 @ @ import java . util . Optional ; <nl> <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + <nl> / * * <nl> * The native ( CQL binary ) protocol version . <nl> * <nl> @ @ - 114 , 6 + 116 , 9 @ @ public enum ProtocolVersion implements Comparable < ProtocolVersion > <nl> throw new ProtocolException ( invalidVersionMessage ( versionNum ) , MAX _ SUPPORTED _ VERSION ) ; <nl> } <nl> <nl> + if ( ! DatabaseDescriptor . getNativeTransportAllowOlderProtocols ( ) & & ret . isSmallerThan ( CURRENT ) ) <nl> + throw new ProtocolException ( String . format ( " Rejecting Protocol Version % s < % s . " , ret , ProtocolVersion . CURRENT ) ) ; <nl> + <nl> return ret ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / transport / ProtocolVersionTest . java b / test / unit / org / apache / cassandra / transport / ProtocolVersionTest . java <nl> index 0669699 . . 2057998 100644 <nl> - - - a / test / unit / org / apache / cassandra / transport / ProtocolVersionTest . java <nl> + + + b / test / unit / org / apache / cassandra / transport / ProtocolVersionTest . java <nl> @ @ - 18 , 11 + 18 , 30 @ @ <nl> <nl> package org . apache . cassandra . transport ; <nl> <nl> + import java . util . List ; <nl> + import java . util . stream . Collectors ; <nl> + <nl> import org . junit . Assert ; <nl> + import org . junit . Before ; <nl> + import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + <nl> public class ProtocolVersionTest <nl> { <nl> + @ BeforeClass <nl> + public static void setupDatabaseDescriptor ( ) <nl> + { <nl> + DatabaseDescriptor . daemonInitialization ( ) ; <nl> + } <nl> + <nl> + @ Before <nl> + public void setUp ( ) <nl> + { <nl> + DatabaseDescriptor . setNativeTransportAllowOlderProtocols ( true ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testDecode ( ) <nl> { <nl> @ @ - 100 , 4 + 119 , 28 @ @ public class ProtocolVersionTest <nl> Assert . assertFalse ( ProtocolVersion . V3 . isSmallerThan ( ProtocolVersion . V2 ) ) ; <nl> Assert . assertFalse ( ProtocolVersion . V2 . isSmallerThan ( ProtocolVersion . V1 ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testDisableOldProtocolVersions _ Succeeds ( ) <nl> + { <nl> + DatabaseDescriptor . setNativeTransportAllowOlderProtocols ( false ) ; <nl> + List < ProtocolVersion > disallowedVersions = ProtocolVersion . SUPPORTED <nl> + . stream ( ) <nl> + . filter ( v - > v . isSmallerThan ( ProtocolVersion . CURRENT ) ) <nl> + . collect ( Collectors . toList ( ) ) ; <nl> + <nl> + for ( ProtocolVersion version : disallowedVersions ) <nl> + { <nl> + try <nl> + { <nl> + ProtocolVersion . decode ( version . asInt ( ) ) ; <nl> + Assert . fail ( " Expected invalid protocol exception " ) ; <nl> + } <nl> + catch ( ProtocolException ex ) <nl> + { <nl> + } <nl> + } <nl> + <nl> + Assert . assertEquals ( ProtocolVersion . CURRENT , ProtocolVersion . decode ( ProtocolVersion . CURRENT . asInt ( ) ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cache / ICacheExpungeHook . java b / src / java / org / apache / cassandra / cache / ICacheExpungeHook . java <nl> new file mode 100644 <nl> index 0000000 . . c11055a <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cache / ICacheExpungeHook . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . cache ; <nl> + <nl> + / * * <nl> + * Created by IntelliJ IDEA . <nl> + * User : lakshman <nl> + * Date : Aug 16 , 2005 <nl> + * Time : 1 : 08 : 58 PM <nl> + * To change this template use File | Settings | File Templates . <nl> + * / <nl> + public interface ICacheExpungeHook < K , V > <nl> + { <nl> + public void callMe ( K key , V value ) ; <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / cache / ICachetable . java b / src / java / org / apache / cassandra / cache / ICachetable . java <nl> new file mode 100644 <nl> index 0000000 . . 98d6ffa <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cache / ICachetable . java <nl> @ @ - 0 , 0 + 1 , 35 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . cache ; <nl> + <nl> + import java . util . Set ; <nl> + <nl> + public interface ICachetable < K , V > <nl> + { <nl> + public void put ( K key , V value ) ; <nl> + public void put ( K key , V value , ICacheExpungeHook < K , V > hook ) ; <nl> + 	 public V get ( K key ) ; <nl> + public V remove ( K key ) ; <nl> + public int size ( ) ; <nl> + public boolean containsKey ( K key ) ; <nl> + public boolean containsValue ( V value ) ; <nl> + public boolean isEmpty ( ) ; <nl> + public Set < K > keySet ( ) ; <nl> + public void shutdown ( ) ; <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / cache / InstrumentedCache . java b / src / java / org / apache / cassandra / cache / InstrumentedCache . java <nl> new file mode 100644 <nl> index 0000000 . . d197c77 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cache / InstrumentedCache . java <nl> @ @ - 0 , 0 + 1 , 65 @ @ <nl> + package org . apache . cassandra . cache ; <nl> + <nl> + import java . lang . management . ManagementFactory ; <nl> + import javax . management . MBeanServer ; <nl> + import javax . management . ObjectName ; <nl> + <nl> + import com . reardencommerce . kernel . collections . shared . evictable . ConcurrentLinkedHashMap ; <nl> + import org . apache . cassandra . utils . TimedStatsDeque ; <nl> + <nl> + public class InstrumentedCache < K , V > implements InstrumentedCacheMBean <nl> + { <nl> + private final int capacity ; <nl> + private final ConcurrentLinkedHashMap < K , V > map ; <nl> + private final TimedStatsDeque stats ; <nl> + <nl> + public InstrumentedCache ( String table , String name , int capacity ) <nl> + { <nl> + this . capacity = capacity ; <nl> + map = ConcurrentLinkedHashMap . create ( ConcurrentLinkedHashMap . EvictionPolicy . SECOND _ CHANCE , capacity ) ; <nl> + stats = new TimedStatsDeque ( 60000 ) ; <nl> + <nl> + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> + try <nl> + { <nl> + String mbeanName = " org . apache . cassandra . db : type = Caches , keyspace = " + table + " , cache = " + name ; <nl> + mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + public void put ( K key , V value ) <nl> + { <nl> + map . put ( key , value ) ; <nl> + } <nl> + <nl> + public V get ( K key ) <nl> + { <nl> + V v = map . get ( key ) ; <nl> + stats . add ( v = = null ? 0 : 1 ) ; <nl> + return v ; <nl> + } <nl> + <nl> + public void remove ( K key ) <nl> + { <nl> + map . remove ( key ) ; <nl> + } <nl> + <nl> + public int getCapacity ( ) <nl> + { <nl> + return capacity ; <nl> + } <nl> + <nl> + public int getSize ( ) <nl> + { <nl> + return map . size ( ) ; <nl> + } <nl> + <nl> + public double getHitRate ( ) <nl> + { <nl> + return stats . mean ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / cache / InstrumentedCacheMBean . java b / src / java / org / apache / cassandra / cache / InstrumentedCacheMBean . java <nl> new file mode 100644 <nl> index 0000000 . . e2c01f6 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cache / InstrumentedCacheMBean . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package org . apache . cassandra . cache ; <nl> + <nl> + public interface InstrumentedCacheMBean <nl> + { <nl> + public int getCapacity ( ) ; <nl> + public int getSize ( ) ; <nl> + public double getHitRate ( ) ; <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 5df9c8e . . c77aa76 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import java . util . concurrent . locks . Condition ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> import java . util . concurrent . atomic . AtomicReference ; <nl> <nl> + import org . apache . cassandra . cache . InstrumentedCache ; <nl> import org . apache . cassandra . service . SliceRange ; <nl> import org . apache . log4j . Logger ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index 8109d8f . . d08938c 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ <nl> <nl> package org . apache . cassandra . net ; <nl> <nl> + import org . apache . cassandra . cache . ICachetable ; <nl> import org . apache . cassandra . concurrent . * ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . gms . FailureDetector ; <nl> diff - - git a / src / java / org / apache / cassandra / service / ConsistencyManager . java b / src / java / org / apache / cassandra / service / ConsistencyManager . java <nl> index e8a8287 . . 5b48749 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ConsistencyManager . java <nl> + + + b / src / java / org / apache / cassandra / service / ConsistencyManager . java <nl> @ @ - 25 , 6 + 25 , 8 @ @ import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> <nl> + import org . apache . cassandra . cache . ICacheExpungeHook ; <nl> + import org . apache . cassandra . cache . ICachetable ; <nl> import org . apache . cassandra . db . ReadCommand ; <nl> import org . apache . cassandra . db . ReadResponse ; <nl> import org . apache . cassandra . db . Row ; <nl> diff - - git a / src / java / org / apache / cassandra / service / ReadRepairManager . java b / src / java / org / apache / cassandra / service / ReadRepairManager . java <nl> index 1180b5f . . 9bbc3d8 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ReadRepairManager . java <nl> + + + b / src / java / org / apache / cassandra / service / ReadRepairManager . java <nl> @ @ - 30 , 8 + 30 , 8 @ @ import org . apache . cassandra . net . Message ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . utils . Cachetable ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> - import org . apache . cassandra . utils . ICacheExpungeHook ; <nl> - import org . apache . cassandra . utils . ICachetable ; <nl> + import org . apache . cassandra . cache . ICacheExpungeHook ; <nl> + import org . apache . cassandra . cache . ICachetable ; <nl> <nl> import org . apache . log4j . Logger ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / utils / Cachetable . java b / src / java / org / apache / cassandra / utils / Cachetable . java <nl> index e72ad8c . . e112647 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / Cachetable . java <nl> + + + b / src / java / org / apache / cassandra / utils / Cachetable . java <nl> @ @ - 22 , 6 + 22 , 9 @ @ import java . util . * ; <nl> <nl> import org . apache . log4j . Logger ; <nl> <nl> + import org . apache . cassandra . cache . ICacheExpungeHook ; <nl> + import org . apache . cassandra . cache . ICachetable ; <nl> + <nl> public class Cachetable < K , V > implements ICachetable < K , V > <nl> { <nl> private class CacheableObject <nl> diff - - git a / src / java / org / apache / cassandra / utils / ICacheExpungeHook . java b / src / java / org / apache / cassandra / utils / ICacheExpungeHook . java <nl> deleted file mode 100644 <nl> index 1248355 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / utils / ICacheExpungeHook . java <nl> + + + / dev / null <nl> @ @ - 1 , 31 + 0 , 0 @ @ <nl> - / * * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package org . apache . cassandra . utils ; <nl> - <nl> - / * * <nl> - * Created by IntelliJ IDEA . <nl> - * User : lakshman <nl> - * Date : Aug 16 , 2005 <nl> - * Time : 1 : 08 : 58 PM <nl> - * To change this template use File | Settings | File Templates . <nl> - * / <nl> - public interface ICacheExpungeHook < K , V > <nl> - { <nl> - public void callMe ( K key , V value ) ; <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / utils / ICachetable . java b / src / java / org / apache / cassandra / utils / ICachetable . java <nl> deleted file mode 100644 <nl> index f3a6ed1 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / utils / ICachetable . java <nl> + + + / dev / null <nl> @ @ - 1 , 36 + 0 , 0 @ @ <nl> - / * * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package org . apache . cassandra . utils ; <nl> - <nl> - import java . util . Enumeration ; <nl> - import java . util . Set ; <nl> - <nl> - public interface ICachetable < K , V > <nl> - { <nl> - public void put ( K key , V value ) ; <nl> - public void put ( K key , V value , ICacheExpungeHook < K , V > hook ) ; <nl> - 	 public V get ( K key ) ; <nl> - public V remove ( K key ) ; <nl> - public int size ( ) ; <nl> - public boolean containsKey ( K key ) ; <nl> - public boolean containsValue ( V value ) ; <nl> - public boolean isEmpty ( ) ; <nl> - public Set < K > keySet ( ) ; <nl> - public void shutdown ( ) ; <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / utils / InstrumentedCache . java b / src / java / org / apache / cassandra / utils / InstrumentedCache . java <nl> deleted file mode 100644 <nl> index 8e267e5 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / utils / InstrumentedCache . java <nl> + + + / dev / null <nl> @ @ - 1 , 64 + 0 , 0 @ @ <nl> - package org . apache . cassandra . utils ; <nl> - <nl> - import java . lang . management . ManagementFactory ; <nl> - import javax . management . MBeanServer ; <nl> - import javax . management . ObjectName ; <nl> - <nl> - import com . reardencommerce . kernel . collections . shared . evictable . ConcurrentLinkedHashMap ; <nl> - <nl> - public class InstrumentedCache < K , V > implements InstrumentedCacheMBean <nl> - { <nl> - private final int capacity ; <nl> - private final ConcurrentLinkedHashMap < K , V > map ; <nl> - private final TimedStatsDeque stats ; <nl> - <nl> - public InstrumentedCache ( String table , String name , int capacity ) <nl> - { <nl> - this . capacity = capacity ; <nl> - map = ConcurrentLinkedHashMap . create ( ConcurrentLinkedHashMap . EvictionPolicy . SECOND _ CHANCE , capacity ) ; <nl> - stats = new TimedStatsDeque ( 60000 ) ; <nl> - <nl> - MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> - try <nl> - { <nl> - String mbeanName = " org . apache . cassandra . db : type = Caches , keyspace = " + table + " , cache = " + name ; <nl> - mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - } <nl> - <nl> - public void put ( K key , V value ) <nl> - { <nl> - map . put ( key , value ) ; <nl> - } <nl> - <nl> - public V get ( K key ) <nl> - { <nl> - V v = map . get ( key ) ; <nl> - stats . add ( v = = null ? 0 : 1 ) ; <nl> - return v ; <nl> - } <nl> - <nl> - public void remove ( K key ) <nl> - { <nl> - map . remove ( key ) ; <nl> - } <nl> - <nl> - public int getCapacity ( ) <nl> - { <nl> - return capacity ; <nl> - } <nl> - <nl> - public int getSize ( ) <nl> - { <nl> - return map . size ( ) ; <nl> - } <nl> - <nl> - public double getHitRate ( ) <nl> - { <nl> - return stats . mean ( ) ; <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / utils / InstrumentedCacheMBean . java b / src / java / org / apache / cassandra / utils / InstrumentedCacheMBean . java <nl> deleted file mode 100644 <nl> index 4e1788a . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / utils / InstrumentedCacheMBean . java <nl> + + + / dev / null <nl> @ @ - 1 , 8 + 0 , 0 @ @ <nl> - package org . apache . cassandra . utils ; <nl> - <nl> - public interface InstrumentedCacheMBean <nl> - { <nl> - public int getCapacity ( ) ; <nl> - public int getSize ( ) ; <nl> - public double getHitRate ( ) ; <nl> - }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d95b9ed . . 249e034 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Disable old native protocol versions on demand ( CASANDRA - 14659 ) 
 * Allow specifying now - in - seconds in native protocol ( CASSANDRA - 14664 ) 
 * Improve BTree build performance by avoiding data copy ( CASSANDRA - 9989 ) 
 * Make monotonic read / read repair configurable ( CASSANDRA - 14635 ) 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index 12f5ab2 . . 064ee4f 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 664 , 6 + 664 , 10 @ @ native _ transport _ port : 9042 
 # The default is - 1 , which means unlimited . 
 # native _ transport _ max _ concurrent _ connections _ per _ ip : - 1 
 
 + # Controls whether Cassandra honors older , yet currently supported , protocol versions . 
 + # The default is true , which means all supported protocols will be honored . 
 + native _ transport _ allow _ older _ protocols : true 
 + 
 # The address or interface to bind the native transport server to . 
 # 
 # Set rpc _ address OR rpc _ interface , not both . 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index f6eefc3 . . a13070c 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 153 , 6 + 153 , 7 @ @ public class Config 
 public volatile long native _ transport _ max _ concurrent _ connections = - 1L ; 
 public volatile long native _ transport _ max _ concurrent _ connections _ per _ ip = - 1L ; 
 public boolean native _ transport _ flush _ in _ batches _ legacy = false ; 
 + public volatile boolean native _ transport _ allow _ older _ protocols = true ; 
 
 / * * 
 * Max size of values in SSTables , in MegaBytes . 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index eae6fc9 . . af13f9c 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 1871 , 6 + 1871 , 16 @ @ public class DatabaseDescriptor 
 return conf . native _ transport _ flush _ in _ batches _ legacy ; 
 } 
 
 + public static boolean getNativeTransportAllowOlderProtocols ( ) 
 + { 
 + return conf . native _ transport _ allow _ older _ protocols ; 
 + } 
 + 
 + public static void setNativeTransportAllowOlderProtocols ( boolean isEnabled ) 
 + { 
 + conf . native _ transport _ allow _ older _ protocols = isEnabled ; 
 + } 
 + 
 public static double getCommitLogSyncGroupWindow ( ) 
 { 
 return conf . commitlog _ sync _ group _ window _ in _ ms ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 84ec49d . . a3c61a3 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 34 , 12 + 34 , 10 @ @ import java . util . stream . StreamSupport ; 
 import javax . annotation . Nullable ; 
 import javax . management . * ; 
 import javax . management . openmbean . CompositeData ; 
 - import javax . management . openmbean . CompositeDataSupport ; 
 import javax . management . openmbean . OpenDataException ; 
 import javax . management . openmbean . TabularData ; 
 import javax . management . openmbean . TabularDataSupport ; 
 
 - import com . clearspring . analytics . stream . Counter ; 
 import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . base . Preconditions ; 
 import com . google . common . base . Predicate ; 
 @ @ - 83 , 7 + 81 , 6 @ @ import org . apache . cassandra . io . sstable . SSTableLoader ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . locator . * ; 
 import org . apache . cassandra . metrics . StorageMetrics ; 
 - import org . apache . cassandra . metrics . TableMetrics . Sampler ; 
 import org . apache . cassandra . net . * ; 
 import org . apache . cassandra . repair . * ; 
 import org . apache . cassandra . repair . messages . RepairOption ; 
 @ @ - 107 , 7 + 104 , 6 @ @ import org . apache . cassandra . streaming . * ; 
 import org . apache . cassandra . tracing . TraceKeyspace ; 
 import org . apache . cassandra . transport . ProtocolVersion ; 
 import org . apache . cassandra . utils . * ; 
 - import org . apache . cassandra . utils . TopKSampler . SamplerResult ; 
 import org . apache . cassandra . utils . logging . LoggingSupportFactory ; 
 import org . apache . cassandra . utils . progress . ProgressEvent ; 
 import org . apache . cassandra . utils . progress . ProgressEventType ; 
 @ @ - 410 , 6 + 406 , 18 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 return daemon . isNativeTransportRunning ( ) ; 
 } 
 
 + @ Override 
 + public void enableNativeTransportOldProtocolVersions ( ) 
 + { 
 + DatabaseDescriptor . setNativeTransportAllowOlderProtocols ( true ) ; 
 + } 
 + 
 + @ Override 
 + public void disableNativeTransportOldProtocolVersions ( ) 
 + { 
 + DatabaseDescriptor . setNativeTransportAllowOlderProtocols ( false ) ; 
 + } 
 + 
 public void stopTransports ( ) 
 { 
 if ( isGossipActive ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index e54a95e . . b642c31 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 507 , 6 + 507 , 8 @ @ public interface StorageServiceMBean extends NotificationEmitter 
 public void stopNativeTransport ( ) ; 
 public void startNativeTransport ( ) ; 
 public boolean isNativeTransportRunning ( ) ; 
 + public void enableNativeTransportOldProtocolVersions ( ) ; 
 + public void disableNativeTransportOldProtocolVersions ( ) ; 
 
 / / allows a node that have been started without joining the ring to join it 
 public void joinRing ( ) throws IOException ; 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index 63efe93 . . 9e5be28 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 1749 , 6 + 1749 , 16 @ @ public class NodeProbe implements AutoCloseable 
 { 
 ssProxy . enableAuditLog ( loggerName , includedKeyspaces , excludedKeyspaces , includedCategories , excludedCategories , includedUsers , excludedUsers ) ; 
 } 
 + 
 + public void enableOldProtocolVersions ( ) 
 + { 
 + ssProxy . enableNativeTransportOldProtocolVersions ( ) ; 
 + } 
 + 
 + public void disableOldProtocolVersions ( ) 
 + { 
 + ssProxy . disableNativeTransportOldProtocolVersions ( ) ; 
 + } 
 } 
 
 class ColumnFamilyStoreMBeanIterator implements Iterator < Map . Entry < String , ColumnFamilyStoreMBean > > 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeTool . java b / src / java / org / apache / cassandra / tools / NodeTool . java 
 index 0c53bef . . f2bbdce 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeTool . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeTool . java 
 @ @ - 165 , 7 + 165 , 9 @ @ public class NodeTool 
 HandoffWindow . class , 
 ReloadSslCertificates . class , 
 EnableAuditLog . class , 
 - DisableAuditLog . class 
 + DisableAuditLog . class , 
 + EnableOldProtocolVersions . class , 
 + DisableOldProtocolVersions . class 
 ) ; 
 
 Cli . CliBuilder < Runnable > builder = Cli . builder ( " nodetool " ) ; 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / DisableOldProtocolVersions . java b / src / java / org / apache / cassandra / tools / nodetool / DisableOldProtocolVersions . java 
 new file mode 100644 
 index 0000000 . . 2083062 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / DisableOldProtocolVersions . java 
 @ @ - 0 , 0 + 1 , 33 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . tools . nodetool ; 
 + 
 + import io . airlift . airline . Command ; 
 + import org . apache . cassandra . tools . NodeProbe ; 
 + import org . apache . cassandra . tools . NodeTool ; 
 + 
 + @ Command ( name = " disableoldprotocolversions " , description = " Disable old protocol versions " ) 
 + public class DisableOldProtocolVersions extends NodeTool . NodeToolCmd 
 + { 
 + @ Override 
 + public void execute ( NodeProbe probe ) 
 + { 
 + probe . disableOldProtocolVersions ( ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / EnableOldProtocolVersions . java b / src / java / org / apache / cassandra / tools / nodetool / EnableOldProtocolVersions . java 
 new file mode 100644 
 index 0000000 . . f6d5be5 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / EnableOldProtocolVersions . java 
 @ @ - 0 , 0 + 1 , 34 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . tools . nodetool ; 
 + 
 + import io . airlift . airline . Command ; 
 + import org . apache . cassandra . tools . NodeProbe ; 
 + import org . apache . cassandra . tools . NodeTool ; 
 + 
 + 
 + @ Command ( name = " enableoldprotocolversions " , description = " Enable old protocol versions " ) 
 + public class EnableOldProtocolVersions extends NodeTool . NodeToolCmd 
 + { 
 + @ Override 
 + public void execute ( NodeProbe probe ) 
 + { 
 + probe . enableOldProtocolVersions ( ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / transport / ProtocolVersion . java b / src / java / org / apache / cassandra / transport / ProtocolVersion . java 
 index 9a13903 . . ceeeca7 100644 
 - - - a / src / java / org / apache / cassandra / transport / ProtocolVersion . java 
 + + + b / src / java / org / apache / cassandra / transport / ProtocolVersion . java 
 @ @ - 26 , 6 + 26 , 8 @ @ import java . util . Optional ; 
 
 import org . apache . commons . lang3 . ArrayUtils ; 
 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + 
 / * * 
 * The native ( CQL binary ) protocol version . 
 * 
 @ @ - 114 , 6 + 116 , 9 @ @ public enum ProtocolVersion implements Comparable < ProtocolVersion > 
 throw new ProtocolException ( invalidVersionMessage ( versionNum ) , MAX _ SUPPORTED _ VERSION ) ; 
 } 
 
 + if ( ! DatabaseDescriptor . getNativeTransportAllowOlderProtocols ( ) & & ret . isSmallerThan ( CURRENT ) ) 
 + throw new ProtocolException ( String . format ( " Rejecting Protocol Version % s < % s . " , ret , ProtocolVersion . CURRENT ) ) ; 
 + 
 return ret ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / transport / ProtocolVersionTest . java b / test / unit / org / apache / cassandra / transport / ProtocolVersionTest . java 
 index 0669699 . . 2057998 100644 
 - - - a / test / unit / org / apache / cassandra / transport / ProtocolVersionTest . java 
 + + + b / test / unit / org / apache / cassandra / transport / ProtocolVersionTest . java 
 @ @ - 18 , 11 + 18 , 30 @ @ 
 
 package org . apache . cassandra . transport ; 
 
 + import java . util . List ; 
 + import java . util . stream . Collectors ; 
 + 
 import org . junit . Assert ; 
 + import org . junit . Before ; 
 + import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + 
 public class ProtocolVersionTest 
 { 
 + @ BeforeClass 
 + public static void setupDatabaseDescriptor ( ) 
 + { 
 + DatabaseDescriptor . daemonInitialization ( ) ; 
 + } 
 + 
 + @ Before 
 + public void setUp ( ) 
 + { 
 + DatabaseDescriptor . setNativeTransportAllowOlderProtocols ( true ) ; 
 + } 
 + 
 @ Test 
 public void testDecode ( ) 
 { 
 @ @ - 100 , 4 + 119 , 28 @ @ public class ProtocolVersionTest 
 Assert . assertFalse ( ProtocolVersion . V3 . isSmallerThan ( ProtocolVersion . V2 ) ) ; 
 Assert . assertFalse ( ProtocolVersion . V2 . isSmallerThan ( ProtocolVersion . V1 ) ) ; 
 } 
 + 
 + @ Test 
 + public void testDisableOldProtocolVersions _ Succeeds ( ) 
 + { 
 + DatabaseDescriptor . setNativeTransportAllowOlderProtocols ( false ) ; 
 + List < ProtocolVersion > disallowedVersions = ProtocolVersion . SUPPORTED 
 + . stream ( ) 
 + . filter ( v - > v . isSmallerThan ( ProtocolVersion . CURRENT ) ) 
 + . collect ( Collectors . toList ( ) ) ; 
 + 
 + for ( ProtocolVersion version : disallowedVersions ) 
 + { 
 + try 
 + { 
 + ProtocolVersion . decode ( version . asInt ( ) ) ; 
 + Assert . fail ( " Expected invalid protocol exception " ) ; 
 + } 
 + catch ( ProtocolException ex ) 
 + { 
 + } 
 + } 
 + 
 + Assert . assertEquals ( ProtocolVersion . CURRENT , ProtocolVersion . decode ( ProtocolVersion . CURRENT . asInt ( ) ) ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cache / ICacheExpungeHook . java b / src / java / org / apache / cassandra / cache / ICacheExpungeHook . java 
 new file mode 100644 
 index 0000000 . . c11055a 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cache / ICacheExpungeHook . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . cache ; 
 + 
 + / * * 
 + * Created by IntelliJ IDEA . 
 + * User : lakshman 
 + * Date : Aug 16 , 2005 
 + * Time : 1 : 08 : 58 PM 
 + * To change this template use File | Settings | File Templates . 
 + * / 
 + public interface ICacheExpungeHook < K , V > 
 + { 
 + public void callMe ( K key , V value ) ; 
 + } 
 diff - - git a / src / java / org / apache / cassandra / cache / ICachetable . java b / src / java / org / apache / cassandra / cache / ICachetable . java 
 new file mode 100644 
 index 0000000 . . 98d6ffa 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cache / ICachetable . java 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . cache ; 
 + 
 + import java . util . Set ; 
 + 
 + public interface ICachetable < K , V > 
 + { 
 + public void put ( K key , V value ) ; 
 + public void put ( K key , V value , ICacheExpungeHook < K , V > hook ) ; 
 + 	 public V get ( K key ) ; 
 + public V remove ( K key ) ; 
 + public int size ( ) ; 
 + public boolean containsKey ( K key ) ; 
 + public boolean containsValue ( V value ) ; 
 + public boolean isEmpty ( ) ; 
 + public Set < K > keySet ( ) ; 
 + public void shutdown ( ) ; 
 + } 
 diff - - git a / src / java / org / apache / cassandra / cache / InstrumentedCache . java b / src / java / org / apache / cassandra / cache / InstrumentedCache . java 
 new file mode 100644 
 index 0000000 . . d197c77 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cache / InstrumentedCache . java 
 @ @ - 0 , 0 + 1 , 65 @ @ 
 + package org . apache . cassandra . cache ; 
 + 
 + import java . lang . management . ManagementFactory ; 
 + import javax . management . MBeanServer ; 
 + import javax . management . ObjectName ; 
 + 
 + import com . reardencommerce . kernel . collections . shared . evictable . ConcurrentLinkedHashMap ; 
 + import org . apache . cassandra . utils . TimedStatsDeque ; 
 + 
 + public class InstrumentedCache < K , V > implements InstrumentedCacheMBean 
 + { 
 + private final int capacity ; 
 + private final ConcurrentLinkedHashMap < K , V > map ; 
 + private final TimedStatsDeque stats ; 
 + 
 + public InstrumentedCache ( String table , String name , int capacity ) 
 + { 
 + this . capacity = capacity ; 
 + map = ConcurrentLinkedHashMap . create ( ConcurrentLinkedHashMap . EvictionPolicy . SECOND _ CHANCE , capacity ) ; 
 + stats = new TimedStatsDeque ( 60000 ) ; 
 + 
 + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 + try 
 + { 
 + String mbeanName = " org . apache . cassandra . db : type = Caches , keyspace = " + table + " , cache = " + name ; 
 + mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + public void put ( K key , V value ) 
 + { 
 + map . put ( key , value ) ; 
 + } 
 + 
 + public V get ( K key ) 
 + { 
 + V v = map . get ( key ) ; 
 + stats . add ( v = = null ? 0 : 1 ) ; 
 + return v ; 
 + } 
 + 
 + public void remove ( K key ) 
 + { 
 + map . remove ( key ) ; 
 + } 
 + 
 + public int getCapacity ( ) 
 + { 
 + return capacity ; 
 + } 
 + 
 + public int getSize ( ) 
 + { 
 + return map . size ( ) ; 
 + } 
 + 
 + public double getHitRate ( ) 
 + { 
 + return stats . mean ( ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / cache / InstrumentedCacheMBean . java b / src / java / org / apache / cassandra / cache / InstrumentedCacheMBean . java 
 new file mode 100644 
 index 0000000 . . e2c01f6 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cache / InstrumentedCacheMBean . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package org . apache . cassandra . cache ; 
 + 
 + public interface InstrumentedCacheMBean 
 + { 
 + public int getCapacity ( ) ; 
 + public int getSize ( ) ; 
 + public double getHitRate ( ) ; 
 + } 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 5df9c8e . . c77aa76 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import java . util . concurrent . locks . Condition ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 import java . util . concurrent . atomic . AtomicReference ; 
 
 + import org . apache . cassandra . cache . InstrumentedCache ; 
 import org . apache . cassandra . service . SliceRange ; 
 import org . apache . log4j . Logger ; 
 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index 8109d8f . . d08938c 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 18 , 6 + 18 , 7 @ @ 
 
 package org . apache . cassandra . net ; 
 
 + import org . apache . cassandra . cache . ICachetable ; 
 import org . apache . cassandra . concurrent . * ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . gms . FailureDetector ; 
 diff - - git a / src / java / org / apache / cassandra / service / ConsistencyManager . java b / src / java / org / apache / cassandra / service / ConsistencyManager . java 
 index e8a8287 . . 5b48749 100644 
 - - - a / src / java / org / apache / cassandra / service / ConsistencyManager . java 
 + + + b / src / java / org / apache / cassandra / service / ConsistencyManager . java 
 @ @ - 25 , 6 + 25 , 8 @ @ import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 
 + import org . apache . cassandra . cache . ICacheExpungeHook ; 
 + import org . apache . cassandra . cache . ICachetable ; 
 import org . apache . cassandra . db . ReadCommand ; 
 import org . apache . cassandra . db . ReadResponse ; 
 import org . apache . cassandra . db . Row ; 
 diff - - git a / src / java / org / apache / cassandra / service / ReadRepairManager . java b / src / java / org / apache / cassandra / service / ReadRepairManager . java 
 index 1180b5f . . 9bbc3d8 100644 
 - - - a / src / java / org / apache / cassandra / service / ReadRepairManager . java 
 + + + b / src / java / org / apache / cassandra / service / ReadRepairManager . java 
 @ @ - 30 , 8 + 30 , 8 @ @ import org . apache . cassandra . net . Message ; 
 import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . utils . Cachetable ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 - import org . apache . cassandra . utils . ICacheExpungeHook ; 
 - import org . apache . cassandra . utils . ICachetable ; 
 + import org . apache . cassandra . cache . ICacheExpungeHook ; 
 + import org . apache . cassandra . cache . ICachetable ; 
 
 import org . apache . log4j . Logger ; 
 
 diff - - git a / src / java / org / apache / cassandra / utils / Cachetable . java b / src / java / org / apache / cassandra / utils / Cachetable . java 
 index e72ad8c . . e112647 100644 
 - - - a / src / java / org / apache / cassandra / utils / Cachetable . java 
 + + + b / src / java / org / apache / cassandra / utils / Cachetable . java 
 @ @ - 22 , 6 + 22 , 9 @ @ import java . util . * ; 
 
 import org . apache . log4j . Logger ; 
 
 + import org . apache . cassandra . cache . ICacheExpungeHook ; 
 + import org . apache . cassandra . cache . ICachetable ; 
 + 
 public class Cachetable < K , V > implements ICachetable < K , V > 
 { 
 private class CacheableObject 
 diff - - git a / src / java / org / apache / cassandra / utils / ICacheExpungeHook . java b / src / java / org / apache / cassandra / utils / ICacheExpungeHook . java 
 deleted file mode 100644 
 index 1248355 . . 0000000 
 - - - a / src / java / org / apache / cassandra / utils / ICacheExpungeHook . java 
 + + + / dev / null 
 @ @ - 1 , 31 + 0 , 0 @ @ 
 - / * * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package org . apache . cassandra . utils ; 
 - 
 - / * * 
 - * Created by IntelliJ IDEA . 
 - * User : lakshman 
 - * Date : Aug 16 , 2005 
 - * Time : 1 : 08 : 58 PM 
 - * To change this template use File | Settings | File Templates . 
 - * / 
 - public interface ICacheExpungeHook < K , V > 
 - { 
 - public void callMe ( K key , V value ) ; 
 - } 
 diff - - git a / src / java / org / apache / cassandra / utils / ICachetable . java b / src / java / org / apache / cassandra / utils / ICachetable . java 
 deleted file mode 100644 
 index f3a6ed1 . . 0000000 
 - - - a / src / java / org / apache / cassandra / utils / ICachetable . java 
 + + + / dev / null 
 @ @ - 1 , 36 + 0 , 0 @ @ 
 - / * * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package org . apache . cassandra . utils ; 
 - 
 - import java . util . Enumeration ; 
 - import java . util . Set ; 
 - 
 - public interface ICachetable < K , V > 
 - { 
 - public void put ( K key , V value ) ; 
 - public void put ( K key , V value , ICacheExpungeHook < K , V > hook ) ; 
 - 	 public V get ( K key ) ; 
 - public V remove ( K key ) ; 
 - public int size ( ) ; 
 - public boolean containsKey ( K key ) ; 
 - public boolean containsValue ( V value ) ; 
 - public boolean isEmpty ( ) ; 
 - public Set < K > keySet ( ) ; 
 - public void shutdown ( ) ; 
 - } 
 diff - - git a / src / java / org / apache / cassandra / utils / InstrumentedCache . java b / src / java / org / apache / cassandra / utils / InstrumentedCache . java 
 deleted file mode 100644 
 index 8e267e5 . . 0000000 
 - - - a / src / java / org / apache / cassandra / utils / InstrumentedCache . java 
 + + + / dev / null 
 @ @ - 1 , 64 + 0 , 0 @ @ 
 - package org . apache . cassandra . utils ; 
 - 
 - import java . lang . management . ManagementFactory ; 
 - import javax . management . MBeanServer ; 
 - import javax . management . ObjectName ; 
 - 
 - import com . reardencommerce . kernel . collections . shared . evictable . ConcurrentLinkedHashMap ; 
 - 
 - public class InstrumentedCache < K , V > implements InstrumentedCacheMBean 
 - { 
 - private final int capacity ; 
 - private final ConcurrentLinkedHashMap < K , V > map ; 
 - private final TimedStatsDeque stats ; 
 - 
 - public InstrumentedCache ( String table , String name , int capacity ) 
 - { 
 - this . capacity = capacity ; 
 - map = ConcurrentLinkedHashMap . create ( ConcurrentLinkedHashMap . EvictionPolicy . SECOND _ CHANCE , capacity ) ; 
 - stats = new TimedStatsDeque ( 60000 ) ; 
 - 
 - MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 - try 
 - { 
 - String mbeanName = " org . apache . cassandra . db : type = Caches , keyspace = " + table + " , cache = " + name ; 
 - mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - } 
 - 
 - public void put ( K key , V value ) 
 - { 
 - map . put ( key , value ) ; 
 - } 
 - 
 - public V get ( K key ) 
 - { 
 - V v = map . get ( key ) ; 
 - stats . add ( v = = null ? 0 : 1 ) ; 
 - return v ; 
 - } 
 - 
 - public void remove ( K key ) 
 - { 
 - map . remove ( key ) ; 
 - } 
 - 
 - public int getCapacity ( ) 
 - { 
 - return capacity ; 
 - } 
 - 
 - public int getSize ( ) 
 - { 
 - return map . size ( ) ; 
 - } 
 - 
 - public double getHitRate ( ) 
 - { 
 - return stats . mean ( ) ; 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / utils / InstrumentedCacheMBean . java b / src / java / org / apache / cassandra / utils / InstrumentedCacheMBean . java 
 deleted file mode 100644 
 index 4e1788a . . 0000000 
 - - - a / src / java / org / apache / cassandra / utils / InstrumentedCacheMBean . java 
 + + + / dev / null 
 @ @ - 1 , 8 + 0 , 0 @ @ 
 - package org . apache . cassandra . utils ; 
 - 
 - public interface InstrumentedCacheMBean 
 - { 
 - public int getCapacity ( ) ; 
 - public int getSize ( ) ; 
 - public double getHitRate ( ) ; 
 - }
