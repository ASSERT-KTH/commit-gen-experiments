BLEU SCORE: 0.03283637368030199

TEST MSG: Fix handling of concurrent directory creation failure
GENERATED MSG: r / m AT . getInstance methods

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 3b1f2f6 . . 6f5f23b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 15 , 6 + 15 , 7 @ @ <nl> * Fix cache persistence when both row and key cache are enabled <nl> ( CASSANDRA - 6413 ) <nl> * ( Hadoop ) add describe _ local _ ring ( CASSANDRA - 6268 ) <nl> + * Fix handling of concurrent directory creation failure ( CASSANDRA - 6459 ) <nl> <nl> <nl> 1 . 2 . 12 <nl> diff - - git a / src / java / org / apache / cassandra / db / Directories . java b / src / java / org / apache / cassandra / db / Directories . java <nl> index 351c0c0 . . 8973327 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Directories . java <nl> + + + b / src / java / org / apache / cassandra / db / Directories . java <nl> @ @ - 448 , 7 + 448 , 7 @ @ public class Directories <nl> if ( ! dir . isDirectory ( ) ) <nl> throw new AssertionError ( String . format ( " Invalid directory path % s : path exists but is not a directory " , dir ) ) ; <nl> } <nl> - else if ( ! dir . mkdirs ( ) ) <nl> + else if ( ! dir . mkdirs ( ) & & ! ( dir . exists ( ) & & dir . isDirectory ( ) ) ) <nl> { <nl> throw new FSWriteError ( new IOException ( " Unable to create directory " + dir ) , dir ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / DirectoriesTest . java b / test / unit / org / apache / cassandra / db / DirectoriesTest . java <nl> index dce6f87 . . 2c055c7 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / DirectoriesTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / DirectoriesTest . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . db ; <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> import java . util . * ; <nl> + import java . util . concurrent . * ; <nl> <nl> import org . junit . AfterClass ; <nl> import org . junit . Assert ; <nl> @ @ - 236 , 4 + 237 , 25 @ @ public class DirectoriesTest <nl> DatabaseDescriptor . setDiskFailurePolicy ( origPolicy ) ; <nl> } <nl> } <nl> + <nl> + @ Test <nl> + public void testMTSnapshots ( ) throws Exception <nl> + { <nl> + for ( final String cf : CFS ) <nl> + { <nl> + final Directories directories = Directories . create ( KS , cf ) ; <nl> + Assert . assertEquals ( cfDir ( cf ) , directories . getDirectoryForNewSSTables ( 0 ) ) ; <nl> + final String n = Long . toString ( System . nanoTime ( ) ) ; <nl> + Callable < File > directoryGetter = new Callable < File > ( ) { <nl> + public File call ( ) throws Exception { <nl> + Descriptor desc = new Descriptor ( cfDir ( cf ) , KS , cf , 1 , false ) ; <nl> + return directories . getSnapshotDirectory ( desc , n ) ; <nl> + } <nl> + } ; <nl> + List < Future < File > > invoked = Executors . newFixedThreadPool ( 2 ) . invokeAll ( Arrays . asList ( directoryGetter , directoryGetter ) ) ; <nl> + for ( Future < File > fut : invoked ) { <nl> + Assert . assertTrue ( fut . get ( ) . exists ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java b / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java <nl> index ca41b8d . . 5fcd1ce 100644 <nl> - - - a / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java <nl> + + + b / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java <nl> @ @ - 179 , 8 + 179 , 8 @ @ public class CassandraStorage extends LoadFunc implements StoreFuncInterface <nl> AbstractType default _ validator = null ; <nl> try <nl> { <nl> - comparator = FBUtilities . getInstance ( cfDef . comparator _ type , " comparator " ) ; <nl> - default _ validator = FBUtilities . getInstance ( cfDef . default _ validation _ class , " validator " ) ; <nl> + comparator = FBUtilities . getComparator ( cfDef . comparator _ type ) ; <nl> + default _ validator = FBUtilities . getComparator ( cfDef . default _ validation _ class ) ; <nl> } <nl> catch ( ConfigurationException e ) <nl> { <nl> @ @ - 202 , 7 + 202 , 7 @ @ public class CassandraStorage extends LoadFunc implements StoreFuncInterface <nl> AbstractType validator = null ; <nl> try <nl> { <nl> - validator = FBUtilities . getInstance ( cd . getValidation _ class ( ) , " validator " ) ; <nl> + validator = FBUtilities . getComparator ( cd . getValidation _ class ( ) ) ; <nl> validators . put ( cd . name , validator ) ; <nl> } <nl> catch ( ConfigurationException e ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / AsciiType . java b / src / java / org / apache / cassandra / db / marshal / AsciiType . java <nl> index 8a7c79a . . eaee041 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / AsciiType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / AsciiType . java <nl> @ @ - 32 , 12 + 32 , 6 @ @ public class AsciiType extends AbstractType < String > <nl> { <nl> public static final AsciiType instance = new AsciiType ( ) ; <nl> <nl> - public static AsciiType getInstance ( ) <nl> - { <nl> - return instance ; <nl> - } <nl> - <nl> - <nl> AsciiType ( ) { } / / singleton <nl> <nl> public String getString ( ByteBuffer bytes ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / BytesType . java b / src / java / org / apache / cassandra / db / marshal / BytesType . java <nl> index a669c25 . . 632b033 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / BytesType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / BytesType . java <nl> @ @ - 30 , 11 + 30 , 6 @ @ public class BytesType extends AbstractType < ByteBuffer > <nl> { <nl> public static final BytesType instance = new BytesType ( ) ; <nl> <nl> - public static BytesType getInstance ( ) <nl> - { <nl> - return instance ; <nl> - } <nl> - <nl> BytesType ( ) { } / / singleton <nl> <nl> public ByteBuffer compose ( ByteBuffer bytes ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / IntegerType . java b / src / java / org / apache / cassandra / db / marshal / IntegerType . java <nl> index 474e951 . . 809c10b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / IntegerType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / IntegerType . java <nl> @ @ - 29 , 11 + 29 , 6 @ @ public final class IntegerType extends AbstractType < BigInteger > <nl> { <nl> public static final IntegerType instance = new IntegerType ( ) ; <nl> <nl> - public static IntegerType getInstance ( ) <nl> - { <nl> - return instance ; <nl> - } <nl> - <nl> private static int findMostSignificantByte ( ByteBuffer bytes ) <nl> { <nl> int len = bytes . remaining ( ) - 1 ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java b / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java <nl> index 765648f . . 89d4fc1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java <nl> @ @ - 31 , 11 + 31 , 6 @ @ public class LexicalUUIDType extends AbstractType < UUID > <nl> { <nl> public static final LexicalUUIDType instance = new LexicalUUIDType ( ) ; <nl> <nl> - public static LexicalUUIDType getInstance ( ) <nl> - { <nl> - return instance ; <nl> - } <nl> - <nl> LexicalUUIDType ( ) { } / / singleton <nl> <nl> public UUID compose ( ByteBuffer bytes ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / LongType . java b / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> index a92f7a7 . . b9ea2a4 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> @ @ - 41 , 11 + 41 , 6 @ @ public class LongType extends AbstractType < Long > <nl> return ByteBufferUtil . bytes ( value ) ; <nl> } <nl> <nl> - public static LongType getInstance ( ) <nl> - { <nl> - return instance ; <nl> - } <nl> - <nl> public int compare ( ByteBuffer o1 , ByteBuffer o2 ) <nl> { <nl> if ( o1 . remaining ( ) = = 0 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> index 934dcc7 . . abf9239 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> @ @ - 35 , 11 + 35 , 6 @ @ public class TimeUUIDType extends AbstractType < UUID > <nl> { <nl> public static final TimeUUIDType instance = new TimeUUIDType ( ) ; <nl> <nl> - public static TimeUUIDType getInstance ( ) <nl> - { <nl> - return instance ; <nl> - } <nl> - <nl> static final Pattern regexPattern = Pattern . compile ( " [ A - Fa - f0 - 9 ] { 8 } \ \ - [ A - Fa - f0 - 9 ] { 4 } \ \ - [ A - Fa - f0 - 9 ] { 4 } \ \ - [ A - Fa - f0 - 9 ] { 4 } \ \ - [ A - Fa - f0 - 9 ] { 12 } " ) ; <nl> static final String [ ] iso8601Patterns = new String [ ] { <nl> " yyyy - MM - dd HH : mm " , <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / UTF8Type . java b / src / java / org / apache / cassandra / db / marshal / UTF8Type . java <nl> index e4dcc05 . . 7ebe550 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / UTF8Type . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / UTF8Type . java <nl> @ @ - 32 , 11 + 32 , 6 @ @ public class UTF8Type extends AbstractType < String > <nl> <nl> UTF8Type ( ) { } / / singleton <nl> <nl> - public static UTF8Type getInstance ( ) <nl> - { <nl> - return instance ; <nl> - } <nl> - <nl> public String compose ( ByteBuffer bytes ) <nl> { <nl> return getString ( bytes ) ; <nl> diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> index 8f87ed3 . . 0e1c696 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> @ @ - 564 , 7 + 564 , 6 @ @ public class FBUtilities <nl> <nl> / * * <nl> * Constructs an instance of the given class , which must have a no - arg constructor . <nl> - * TODO : Similar method for our ' instance member ' singleton pattern would be nice . <nl> * @ param classname Fully qualified classname . <nl> * @ param readable Descriptive noun for the role the class plays . <nl> * @ throws ConfigurationException If the class cannot be found . <nl> @ @ - 596 , 31 + 595 , 6 @ @ public class FBUtilities <nl> } <nl> } <nl> <nl> - public static < T > T getInstance ( String classname , String readable ) throws ConfigurationException <nl> - { <nl> - Class cls = classForName ( classname , readable ) ; <nl> - T rval = null ; <nl> - try <nl> - { <nl> - rval = ( T ) cls . getDeclaredMethod ( " getInstance " ) . invoke ( new Object [ ] { null , null } ) ; <nl> - <nl> - } <nl> - catch ( NoSuchMethodException e ) <nl> - { <nl> - throw new ConfigurationException ( " Class does not have the getInstance method with no arguments " ) ; <nl> - } <nl> - catch ( InvocationTargetException e ) <nl> - { <nl> - throw new ConfigurationException ( String . format ( " Could not call method getInstance on % s class % s " , readable , classname ) ) ; <nl> - } <nl> - catch ( IllegalAccessException e ) <nl> - { <nl> - throw new ConfigurationException ( String . format ( " Could not call method getInstance on % s class % s " , readable , classname ) ) ; <nl> - } <nl> - <nl> - return rval ; <nl> - } <nl> - <nl> public static < T extends Comparable > SortedSet < T > singleton ( T column ) <nl> { <nl> return new TreeSet < T > ( Arrays . asList ( column ) ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 3b1f2f6 . . 6f5f23b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 15 , 6 + 15 , 7 @ @ 
 * Fix cache persistence when both row and key cache are enabled 
 ( CASSANDRA - 6413 ) 
 * ( Hadoop ) add describe _ local _ ring ( CASSANDRA - 6268 ) 
 + * Fix handling of concurrent directory creation failure ( CASSANDRA - 6459 ) 
 
 
 1 . 2 . 12 
 diff - - git a / src / java / org / apache / cassandra / db / Directories . java b / src / java / org / apache / cassandra / db / Directories . java 
 index 351c0c0 . . 8973327 100644 
 - - - a / src / java / org / apache / cassandra / db / Directories . java 
 + + + b / src / java / org / apache / cassandra / db / Directories . java 
 @ @ - 448 , 7 + 448 , 7 @ @ public class Directories 
 if ( ! dir . isDirectory ( ) ) 
 throw new AssertionError ( String . format ( " Invalid directory path % s : path exists but is not a directory " , dir ) ) ; 
 } 
 - else if ( ! dir . mkdirs ( ) ) 
 + else if ( ! dir . mkdirs ( ) & & ! ( dir . exists ( ) & & dir . isDirectory ( ) ) ) 
 { 
 throw new FSWriteError ( new IOException ( " Unable to create directory " + dir ) , dir ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / DirectoriesTest . java b / test / unit / org / apache / cassandra / db / DirectoriesTest . java 
 index dce6f87 . . 2c055c7 100644 
 - - - a / test / unit / org / apache / cassandra / db / DirectoriesTest . java 
 + + + b / test / unit / org / apache / cassandra / db / DirectoriesTest . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . db ; 
 import java . io . File ; 
 import java . io . IOException ; 
 import java . util . * ; 
 + import java . util . concurrent . * ; 
 
 import org . junit . AfterClass ; 
 import org . junit . Assert ; 
 @ @ - 236 , 4 + 237 , 25 @ @ public class DirectoriesTest 
 DatabaseDescriptor . setDiskFailurePolicy ( origPolicy ) ; 
 } 
 } 
 + 
 + @ Test 
 + public void testMTSnapshots ( ) throws Exception 
 + { 
 + for ( final String cf : CFS ) 
 + { 
 + final Directories directories = Directories . create ( KS , cf ) ; 
 + Assert . assertEquals ( cfDir ( cf ) , directories . getDirectoryForNewSSTables ( 0 ) ) ; 
 + final String n = Long . toString ( System . nanoTime ( ) ) ; 
 + Callable < File > directoryGetter = new Callable < File > ( ) { 
 + public File call ( ) throws Exception { 
 + Descriptor desc = new Descriptor ( cfDir ( cf ) , KS , cf , 1 , false ) ; 
 + return directories . getSnapshotDirectory ( desc , n ) ; 
 + } 
 + } ; 
 + List < Future < File > > invoked = Executors . newFixedThreadPool ( 2 ) . invokeAll ( Arrays . asList ( directoryGetter , directoryGetter ) ) ; 
 + for ( Future < File > fut : invoked ) { 
 + Assert . assertTrue ( fut . get ( ) . exists ( ) ) ; 
 + } 
 + } 
 + } 
 }

NEAREST DIFF:
diff - - git a / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java b / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java 
 index ca41b8d . . 5fcd1ce 100644 
 - - - a / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java 
 + + + b / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java 
 @ @ - 179 , 8 + 179 , 8 @ @ public class CassandraStorage extends LoadFunc implements StoreFuncInterface 
 AbstractType default _ validator = null ; 
 try 
 { 
 - comparator = FBUtilities . getInstance ( cfDef . comparator _ type , " comparator " ) ; 
 - default _ validator = FBUtilities . getInstance ( cfDef . default _ validation _ class , " validator " ) ; 
 + comparator = FBUtilities . getComparator ( cfDef . comparator _ type ) ; 
 + default _ validator = FBUtilities . getComparator ( cfDef . default _ validation _ class ) ; 
 } 
 catch ( ConfigurationException e ) 
 { 
 @ @ - 202 , 7 + 202 , 7 @ @ public class CassandraStorage extends LoadFunc implements StoreFuncInterface 
 AbstractType validator = null ; 
 try 
 { 
 - validator = FBUtilities . getInstance ( cd . getValidation _ class ( ) , " validator " ) ; 
 + validator = FBUtilities . getComparator ( cd . getValidation _ class ( ) ) ; 
 validators . put ( cd . name , validator ) ; 
 } 
 catch ( ConfigurationException e ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / AsciiType . java b / src / java / org / apache / cassandra / db / marshal / AsciiType . java 
 index 8a7c79a . . eaee041 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / AsciiType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / AsciiType . java 
 @ @ - 32 , 12 + 32 , 6 @ @ public class AsciiType extends AbstractType < String > 
 { 
 public static final AsciiType instance = new AsciiType ( ) ; 
 
 - public static AsciiType getInstance ( ) 
 - { 
 - return instance ; 
 - } 
 - 
 - 
 AsciiType ( ) { } / / singleton 
 
 public String getString ( ByteBuffer bytes ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / BytesType . java b / src / java / org / apache / cassandra / db / marshal / BytesType . java 
 index a669c25 . . 632b033 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / BytesType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / BytesType . java 
 @ @ - 30 , 11 + 30 , 6 @ @ public class BytesType extends AbstractType < ByteBuffer > 
 { 
 public static final BytesType instance = new BytesType ( ) ; 
 
 - public static BytesType getInstance ( ) 
 - { 
 - return instance ; 
 - } 
 - 
 BytesType ( ) { } / / singleton 
 
 public ByteBuffer compose ( ByteBuffer bytes ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / IntegerType . java b / src / java / org / apache / cassandra / db / marshal / IntegerType . java 
 index 474e951 . . 809c10b 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / IntegerType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / IntegerType . java 
 @ @ - 29 , 11 + 29 , 6 @ @ public final class IntegerType extends AbstractType < BigInteger > 
 { 
 public static final IntegerType instance = new IntegerType ( ) ; 
 
 - public static IntegerType getInstance ( ) 
 - { 
 - return instance ; 
 - } 
 - 
 private static int findMostSignificantByte ( ByteBuffer bytes ) 
 { 
 int len = bytes . remaining ( ) - 1 ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java b / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java 
 index 765648f . . 89d4fc1 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java 
 @ @ - 31 , 11 + 31 , 6 @ @ public class LexicalUUIDType extends AbstractType < UUID > 
 { 
 public static final LexicalUUIDType instance = new LexicalUUIDType ( ) ; 
 
 - public static LexicalUUIDType getInstance ( ) 
 - { 
 - return instance ; 
 - } 
 - 
 LexicalUUIDType ( ) { } / / singleton 
 
 public UUID compose ( ByteBuffer bytes ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / LongType . java b / src / java / org / apache / cassandra / db / marshal / LongType . java 
 index a92f7a7 . . b9ea2a4 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / LongType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / LongType . java 
 @ @ - 41 , 11 + 41 , 6 @ @ public class LongType extends AbstractType < Long > 
 return ByteBufferUtil . bytes ( value ) ; 
 } 
 
 - public static LongType getInstance ( ) 
 - { 
 - return instance ; 
 - } 
 - 
 public int compare ( ByteBuffer o1 , ByteBuffer o2 ) 
 { 
 if ( o1 . remaining ( ) = = 0 ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 index 934dcc7 . . abf9239 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 @ @ - 35 , 11 + 35 , 6 @ @ public class TimeUUIDType extends AbstractType < UUID > 
 { 
 public static final TimeUUIDType instance = new TimeUUIDType ( ) ; 
 
 - public static TimeUUIDType getInstance ( ) 
 - { 
 - return instance ; 
 - } 
 - 
 static final Pattern regexPattern = Pattern . compile ( " [ A - Fa - f0 - 9 ] { 8 } \ \ - [ A - Fa - f0 - 9 ] { 4 } \ \ - [ A - Fa - f0 - 9 ] { 4 } \ \ - [ A - Fa - f0 - 9 ] { 4 } \ \ - [ A - Fa - f0 - 9 ] { 12 } " ) ; 
 static final String [ ] iso8601Patterns = new String [ ] { 
 " yyyy - MM - dd HH : mm " , 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / UTF8Type . java b / src / java / org / apache / cassandra / db / marshal / UTF8Type . java 
 index e4dcc05 . . 7ebe550 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / UTF8Type . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / UTF8Type . java 
 @ @ - 32 , 11 + 32 , 6 @ @ public class UTF8Type extends AbstractType < String > 
 
 UTF8Type ( ) { } / / singleton 
 
 - public static UTF8Type getInstance ( ) 
 - { 
 - return instance ; 
 - } 
 - 
 public String compose ( ByteBuffer bytes ) 
 { 
 return getString ( bytes ) ; 
 diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 index 8f87ed3 . . 0e1c696 100644 
 - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java 
 + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 @ @ - 564 , 7 + 564 , 6 @ @ public class FBUtilities 
 
 / * * 
 * Constructs an instance of the given class , which must have a no - arg constructor . 
 - * TODO : Similar method for our ' instance member ' singleton pattern would be nice . 
 * @ param classname Fully qualified classname . 
 * @ param readable Descriptive noun for the role the class plays . 
 * @ throws ConfigurationException If the class cannot be found . 
 @ @ - 596 , 31 + 595 , 6 @ @ public class FBUtilities 
 } 
 } 
 
 - public static < T > T getInstance ( String classname , String readable ) throws ConfigurationException 
 - { 
 - Class cls = classForName ( classname , readable ) ; 
 - T rval = null ; 
 - try 
 - { 
 - rval = ( T ) cls . getDeclaredMethod ( " getInstance " ) . invoke ( new Object [ ] { null , null } ) ; 
 - 
 - } 
 - catch ( NoSuchMethodException e ) 
 - { 
 - throw new ConfigurationException ( " Class does not have the getInstance method with no arguments " ) ; 
 - } 
 - catch ( InvocationTargetException e ) 
 - { 
 - throw new ConfigurationException ( String . format ( " Could not call method getInstance on % s class % s " , readable , classname ) ) ; 
 - } 
 - catch ( IllegalAccessException e ) 
 - { 
 - throw new ConfigurationException ( String . format ( " Could not call method getInstance on % s class % s " , readable , classname ) ) ; 
 - } 
 - 
 - return rval ; 
 - } 
 - 
 public static < T extends Comparable > SortedSet < T > singleton ( T column ) 
 { 
 return new TreeSet < T > ( Arrays . asList ( column ) ) ;
