BLEU SCORE: 0.027611988917697356

TEST MSG: Fix check for non - empty slice start
GENERATED MSG: call iter . next before iter . remove

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java <nl> index 9d5b705 . . 65925b1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java <nl> @ @ - 184 , 7 + 184 , 7 @ @ public class SliceQueryFilter implements IDiskAtomFilter <nl> } <nl> else if ( slice . includes ( cmp , newStart ) ) <nl> { <nl> - if ( ! reversed & & sliceIncludesStatics ( slice , cfm ) & & ! newStart . equals ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) <nl> + if ( ! reversed & & sliceIncludesStatics ( slice , cfm ) & & ! newStart . isEmpty ( ) ) <nl> newSlices . add ( new ColumnSlice ( Composites . EMPTY , cfm . comparator . staticPrefix ( ) . end ( ) ) ) ; <nl> <nl> newSlices . add ( new ColumnSlice ( newStart , slice . finish ) ) ;
NEAREST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java b / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java <nl> index f4fd960 . . 9760c7e 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java <nl> @ @ - 49 , 7 + 49 , 7 @ @ import static org . junit . Assert . assertTrue ; <nl> public class LeveledCompactionStrategyTest extends SchemaLoader <nl> { <nl> / * <nl> - * This excercise in particular the code of # 4142 <nl> + * This exercises in particular the code of # 4142 <nl> * / <nl> @ Test <nl> public void testValidationMultipleSSTablePerLevel ( ) throws Exception <nl> @ @ - 57 , 7 + 57 , 7 @ @ public class LeveledCompactionStrategyTest extends SchemaLoader <nl> String ksname = " Keyspace1 " ; <nl> String cfname = " StandardLeveled " ; <nl> Table table = Table . open ( ksname ) ; <nl> - ColumnFamilyStore store = table . getColumnFamilyStore ( cfname ) ; <nl> + ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfname ) ; <nl> <nl> ByteBuffer value = ByteBuffer . wrap ( new byte [ 100 * 1024 ] ) ; / / 100 KB value , make it easy to have multiple files <nl> <nl> @ @ - 75 , 15 + 75 , 14 @ @ public class LeveledCompactionStrategyTest extends SchemaLoader <nl> rm . add ( cfname , ByteBufferUtil . bytes ( " column " + c ) , value , 0 ) ; <nl> } <nl> rm . apply ( ) ; <nl> - store . forceBlockingFlush ( ) ; <nl> + cfs . forceBlockingFlush ( ) ; <nl> } <nl> <nl> - LeveledCompactionStrategy strat = ( LeveledCompactionStrategy ) store . getCompactionStrategy ( ) ; <nl> - <nl> + LeveledCompactionStrategy strat = ( LeveledCompactionStrategy ) cfs . getCompactionStrategy ( ) ; <nl> while ( strat . getLevelSize ( 0 ) > 1 ) <nl> { <nl> - store . forceMajorCompaction ( ) ; <nl> - Thread . sleep ( 200 ) ; <nl> + cfs . forceMajorCompaction ( ) ; <nl> + Thread . sleep ( 100 ) ; <nl> } <nl> / / Checking we ' re not completely bad at math <nl> assert strat . getLevelSize ( 1 ) > 0 ; <nl> @ @ - 94 , 7 + 93 , 7 @ @ public class LeveledCompactionStrategyTest extends SchemaLoader <nl> int gcBefore = ( int ) ( System . currentTimeMillis ( ) / 1000 ) - table . getColumnFamilyStore ( cfname ) . metadata . getGcGraceSeconds ( ) ; <nl> ActiveRepairService . TreeRequest req = new ActiveRepairService . TreeRequest ( " 1 " , FBUtilities . getLocalAddress ( ) , range , gcBefore , p ) ; <nl> ActiveRepairService . Validator validator = new ActiveRepairService . Validator ( req ) ; <nl> - CompactionManager . instance . submitValidation ( store , validator ) . get ( ) ; <nl> + CompactionManager . instance . submitValidation ( cfs , validator ) . get ( ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 103 , 7 + 102 , 7 @ @ public class LeveledCompactionStrategyTest extends SchemaLoader <nl> String ksname = " Keyspace1 " ; <nl> String cfname = " StandardLeveled " ; <nl> Table table = Table . open ( ksname ) ; <nl> - ColumnFamilyStore store = table . getColumnFamilyStore ( cfname ) ; <nl> + ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfname ) ; <nl> <nl> / / make sure we have SSTables in L1 <nl> ByteBuffer value = ByteBuffer . wrap ( new byte [ 100 * 1024 ] ) ; <nl> @ @ - 118 , 11 + 117 , 11 @ @ public class LeveledCompactionStrategyTest extends SchemaLoader <nl> rm . add ( cfname , ByteBufferUtil . bytes ( " column " + c ) , value , 0 ) ; <nl> } <nl> rm . apply ( ) ; <nl> - store . forceBlockingFlush ( ) ; <nl> + cfs . forceBlockingFlush ( ) ; <nl> } <nl> - store . forceMajorCompaction ( ) ; <nl> + cfs . forceMajorCompaction ( ) ; <nl> <nl> - LeveledCompactionStrategy strat = ( LeveledCompactionStrategy ) store . getCompactionStrategy ( ) ; <nl> + LeveledCompactionStrategy strat = ( LeveledCompactionStrategy ) cfs . getCompactionStrategy ( ) ; <nl> assert strat . getLevelSize ( 1 ) > 0 ; <nl> <nl> / / get LeveledScanner for level 1 sstables <nl> @ @ - 135 , 13 + 134 , 14 @ @ public class LeveledCompactionStrategyTest extends SchemaLoader <nl> / / scanner . getCurrentPosition should be equal to total bytes of L1 sstables <nl> assert scanner . getCurrentPosition ( ) = = SSTable . getTotalBytes ( sstables ) ; <nl> } <nl> + <nl> @ Test <nl> public void testMutateLevel ( ) throws Exception <nl> { <nl> String ksname = " Keyspace1 " ; <nl> String cfname = " StandardLeveled " ; <nl> Table table = Table . open ( ksname ) ; <nl> - ColumnFamilyStore store = table . getColumnFamilyStore ( cfname ) ; <nl> + ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfname ) ; <nl> <nl> ByteBuffer value = ByteBuffer . wrap ( new byte [ 100 * 1024 ] ) ; / / 100 KB value , make it easy to have multiple files <nl> <nl> @ @ - 159 , 20 + 159 , 20 @ @ public class LeveledCompactionStrategyTest extends SchemaLoader <nl> rm . add ( cfname , ByteBufferUtil . bytes ( " column " + c ) , value , 0 ) ; <nl> } <nl> rm . apply ( ) ; <nl> - store . forceBlockingFlush ( ) ; <nl> + cfs . forceBlockingFlush ( ) ; <nl> } <nl> <nl> - store . disableAutoCompaction ( ) ; <nl> - LeveledCompactionStrategy strat = ( LeveledCompactionStrategy ) store . getCompactionStrategy ( ) ; <nl> + cfs . disableAutoCompaction ( ) ; <nl> + LeveledCompactionStrategy strat = ( LeveledCompactionStrategy ) cfs . getCompactionStrategy ( ) ; <nl> while ( strat . getLevelSize ( 0 ) > 1 ) <nl> { <nl> - store . forceMajorCompaction ( ) ; <nl> - Thread . sleep ( 200 ) ; <nl> + cfs . forceMajorCompaction ( ) ; <nl> + Thread . sleep ( 100 ) ; <nl> } <nl> <nl> Set < SSTableReader > changedSSTables = new HashSet < SSTableReader > ( ) ; <nl> - Collection < SSTableReader > sstables = store . getDataTracker ( ) . getUncompactingSSTables ( ) ; <nl> - store . getDataTracker ( ) . markCompacting ( sstables ) ; / / dont touch my sstables ! <nl> + Collection < SSTableReader > sstables = cfs . getDataTracker ( ) . getUncompactingSSTables ( ) ; <nl> + cfs . getDataTracker ( ) . markCompacting ( sstables ) ; / / dont touch my sstables ! <nl> / / change sstable level on all current sstables <nl> for ( SSTableReader s : sstables ) <nl> { <nl> @ @ - 193 , 8 + 193 , 5 @ @ public class LeveledCompactionStrategyTest extends SchemaLoader <nl> int [ ] levels = strat . manifest . getAllLevelSize ( ) ; <nl> / / verify that the manifest has correct amount of sstables <nl> assertEquals ( changedSSTables . size ( ) , levels [ 6 ] ) ; <nl> - <nl> } <nl> - <nl> - <nl> }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java 
 index 9d5b705 . . 65925b1 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java 
 @ @ - 184 , 7 + 184 , 7 @ @ public class SliceQueryFilter implements IDiskAtomFilter 
 } 
 else if ( slice . includes ( cmp , newStart ) ) 
 { 
 - if ( ! reversed & & sliceIncludesStatics ( slice , cfm ) & & ! newStart . equals ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) 
 + if ( ! reversed & & sliceIncludesStatics ( slice , cfm ) & & ! newStart . isEmpty ( ) ) 
 newSlices . add ( new ColumnSlice ( Composites . EMPTY , cfm . comparator . staticPrefix ( ) . end ( ) ) ) ; 
 
 newSlices . add ( new ColumnSlice ( newStart , slice . finish ) ) ;

NEAREST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java b / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java 
 index f4fd960 . . 9760c7e 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java 
 @ @ - 49 , 7 + 49 , 7 @ @ import static org . junit . Assert . assertTrue ; 
 public class LeveledCompactionStrategyTest extends SchemaLoader 
 { 
 / * 
 - * This excercise in particular the code of # 4142 
 + * This exercises in particular the code of # 4142 
 * / 
 @ Test 
 public void testValidationMultipleSSTablePerLevel ( ) throws Exception 
 @ @ - 57 , 7 + 57 , 7 @ @ public class LeveledCompactionStrategyTest extends SchemaLoader 
 String ksname = " Keyspace1 " ; 
 String cfname = " StandardLeveled " ; 
 Table table = Table . open ( ksname ) ; 
 - ColumnFamilyStore store = table . getColumnFamilyStore ( cfname ) ; 
 + ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfname ) ; 
 
 ByteBuffer value = ByteBuffer . wrap ( new byte [ 100 * 1024 ] ) ; / / 100 KB value , make it easy to have multiple files 
 
 @ @ - 75 , 15 + 75 , 14 @ @ public class LeveledCompactionStrategyTest extends SchemaLoader 
 rm . add ( cfname , ByteBufferUtil . bytes ( " column " + c ) , value , 0 ) ; 
 } 
 rm . apply ( ) ; 
 - store . forceBlockingFlush ( ) ; 
 + cfs . forceBlockingFlush ( ) ; 
 } 
 
 - LeveledCompactionStrategy strat = ( LeveledCompactionStrategy ) store . getCompactionStrategy ( ) ; 
 - 
 + LeveledCompactionStrategy strat = ( LeveledCompactionStrategy ) cfs . getCompactionStrategy ( ) ; 
 while ( strat . getLevelSize ( 0 ) > 1 ) 
 { 
 - store . forceMajorCompaction ( ) ; 
 - Thread . sleep ( 200 ) ; 
 + cfs . forceMajorCompaction ( ) ; 
 + Thread . sleep ( 100 ) ; 
 } 
 / / Checking we ' re not completely bad at math 
 assert strat . getLevelSize ( 1 ) > 0 ; 
 @ @ - 94 , 7 + 93 , 7 @ @ public class LeveledCompactionStrategyTest extends SchemaLoader 
 int gcBefore = ( int ) ( System . currentTimeMillis ( ) / 1000 ) - table . getColumnFamilyStore ( cfname ) . metadata . getGcGraceSeconds ( ) ; 
 ActiveRepairService . TreeRequest req = new ActiveRepairService . TreeRequest ( " 1 " , FBUtilities . getLocalAddress ( ) , range , gcBefore , p ) ; 
 ActiveRepairService . Validator validator = new ActiveRepairService . Validator ( req ) ; 
 - CompactionManager . instance . submitValidation ( store , validator ) . get ( ) ; 
 + CompactionManager . instance . submitValidation ( cfs , validator ) . get ( ) ; 
 } 
 
 @ Test 
 @ @ - 103 , 7 + 102 , 7 @ @ public class LeveledCompactionStrategyTest extends SchemaLoader 
 String ksname = " Keyspace1 " ; 
 String cfname = " StandardLeveled " ; 
 Table table = Table . open ( ksname ) ; 
 - ColumnFamilyStore store = table . getColumnFamilyStore ( cfname ) ; 
 + ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfname ) ; 
 
 / / make sure we have SSTables in L1 
 ByteBuffer value = ByteBuffer . wrap ( new byte [ 100 * 1024 ] ) ; 
 @ @ - 118 , 11 + 117 , 11 @ @ public class LeveledCompactionStrategyTest extends SchemaLoader 
 rm . add ( cfname , ByteBufferUtil . bytes ( " column " + c ) , value , 0 ) ; 
 } 
 rm . apply ( ) ; 
 - store . forceBlockingFlush ( ) ; 
 + cfs . forceBlockingFlush ( ) ; 
 } 
 - store . forceMajorCompaction ( ) ; 
 + cfs . forceMajorCompaction ( ) ; 
 
 - LeveledCompactionStrategy strat = ( LeveledCompactionStrategy ) store . getCompactionStrategy ( ) ; 
 + LeveledCompactionStrategy strat = ( LeveledCompactionStrategy ) cfs . getCompactionStrategy ( ) ; 
 assert strat . getLevelSize ( 1 ) > 0 ; 
 
 / / get LeveledScanner for level 1 sstables 
 @ @ - 135 , 13 + 134 , 14 @ @ public class LeveledCompactionStrategyTest extends SchemaLoader 
 / / scanner . getCurrentPosition should be equal to total bytes of L1 sstables 
 assert scanner . getCurrentPosition ( ) = = SSTable . getTotalBytes ( sstables ) ; 
 } 
 + 
 @ Test 
 public void testMutateLevel ( ) throws Exception 
 { 
 String ksname = " Keyspace1 " ; 
 String cfname = " StandardLeveled " ; 
 Table table = Table . open ( ksname ) ; 
 - ColumnFamilyStore store = table . getColumnFamilyStore ( cfname ) ; 
 + ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfname ) ; 
 
 ByteBuffer value = ByteBuffer . wrap ( new byte [ 100 * 1024 ] ) ; / / 100 KB value , make it easy to have multiple files 
 
 @ @ - 159 , 20 + 159 , 20 @ @ public class LeveledCompactionStrategyTest extends SchemaLoader 
 rm . add ( cfname , ByteBufferUtil . bytes ( " column " + c ) , value , 0 ) ; 
 } 
 rm . apply ( ) ; 
 - store . forceBlockingFlush ( ) ; 
 + cfs . forceBlockingFlush ( ) ; 
 } 
 
 - store . disableAutoCompaction ( ) ; 
 - LeveledCompactionStrategy strat = ( LeveledCompactionStrategy ) store . getCompactionStrategy ( ) ; 
 + cfs . disableAutoCompaction ( ) ; 
 + LeveledCompactionStrategy strat = ( LeveledCompactionStrategy ) cfs . getCompactionStrategy ( ) ; 
 while ( strat . getLevelSize ( 0 ) > 1 ) 
 { 
 - store . forceMajorCompaction ( ) ; 
 - Thread . sleep ( 200 ) ; 
 + cfs . forceMajorCompaction ( ) ; 
 + Thread . sleep ( 100 ) ; 
 } 
 
 Set < SSTableReader > changedSSTables = new HashSet < SSTableReader > ( ) ; 
 - Collection < SSTableReader > sstables = store . getDataTracker ( ) . getUncompactingSSTables ( ) ; 
 - store . getDataTracker ( ) . markCompacting ( sstables ) ; / / dont touch my sstables ! 
 + Collection < SSTableReader > sstables = cfs . getDataTracker ( ) . getUncompactingSSTables ( ) ; 
 + cfs . getDataTracker ( ) . markCompacting ( sstables ) ; / / dont touch my sstables ! 
 / / change sstable level on all current sstables 
 for ( SSTableReader s : sstables ) 
 { 
 @ @ - 193 , 8 + 193 , 5 @ @ public class LeveledCompactionStrategyTest extends SchemaLoader 
 int [ ] levels = strat . manifest . getAllLevelSize ( ) ; 
 / / verify that the manifest has correct amount of sstables 
 assertEquals ( changedSSTables . size ( ) , levels [ 6 ] ) ; 
 - 
 } 
 - 
 - 
 }
