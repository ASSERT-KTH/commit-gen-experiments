BLEU SCORE: 0.016074772865287294

TEST MSG: Avoid IAE in IndexSummaryManager while sorting sstables
GENERATED MSG: r / m SSTR . openedFiles ; clean up decorated key iteration

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index fbcf460 . . cdfd248 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 6 @ @ <nl> 2 . 1 . 2 <nl> + * Avoid IllegalArgumentException while sorting sstables in <nl> + IndexSummaryManager ( CASSANDRA - 8182 ) <nl> * Shutdown JVM on file descriptor exhaustion ( CASSANDRA - 7579 ) <nl> * Add ' die ' policy for commit log and disk failure ( CASSANDRA - 7927 ) <nl> * Fix installing as service on Windows ( CASSANDRA - 8115 ) <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java b / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java <nl> index e39d75d . . cc60b4d 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java <nl> @ @ - 262 , 32 + 262 , 22 @ @ public class IndexSummaryManager implements IndexSummaryManagerMBean <nl> logger . debug ( " Beginning redistribution of index summaries for { } sstables with memory pool size { } MB ; current spaced used is { } MB " , <nl> nonCompacting . size ( ) , memoryPoolBytes / 1024L / 1024L , total / 1024 . 0 / 1024 . 0 ) ; <nl> <nl> + final Map < SSTableReader , Double > readRates = new HashMap < > ( nonCompacting . size ( ) ) ; <nl> double totalReadsPerSec = 0 . 0 ; <nl> for ( SSTableReader sstable : nonCompacting ) <nl> { <nl> if ( sstable . readMeter ! = null ) <nl> { <nl> - totalReadsPerSec + = sstable . readMeter . fifteenMinuteRate ( ) ; <nl> + Double readRate = sstable . readMeter . fifteenMinuteRate ( ) ; <nl> + totalReadsPerSec + = readRate ; <nl> + readRates . put ( sstable , readRate ) ; <nl> } <nl> } <nl> logger . trace ( " Total reads / sec across all sstables in index summary resize process : { } " , totalReadsPerSec ) ; <nl> <nl> / / copy and sort by read rates ( ascending ) <nl> List < SSTableReader > sstablesByHotness = new ArrayList < > ( nonCompacting ) ; <nl> - Collections . sort ( sstablesByHotness , new Comparator < SSTableReader > ( ) <nl> - { <nl> - public int compare ( SSTableReader o1 , SSTableReader o2 ) <nl> - { <nl> - if ( o1 . readMeter = = null & & o2 . readMeter = = null ) <nl> - return 0 ; <nl> - else if ( o1 . readMeter = = null ) <nl> - return - 1 ; <nl> - else if ( o2 . readMeter = = null ) <nl> - return 1 ; <nl> - else <nl> - return Double . compare ( o1 . readMeter . fifteenMinuteRate ( ) , o2 . readMeter . fifteenMinuteRate ( ) ) ; <nl> - } <nl> - } ) ; <nl> + Collections . sort ( sstablesByHotness , new ReadRateComparator ( readRates ) ) ; <nl> <nl> long remainingBytes = memoryPoolBytes ; <nl> for ( SSTableReader sstable : compacting ) <nl> @ @ - 485 , 4 + 475 , 30 @ @ public class IndexSummaryManager implements IndexSummaryManagerMBean <nl> this . newSamplingLevel = newSamplingLevel ; <nl> } <nl> } <nl> + <nl> + / * * Utility class for sorting sstables by their read rates . * / <nl> + private static class ReadRateComparator implements Comparator < SSTableReader > <nl> + { <nl> + private final Map < SSTableReader , Double > readRates ; <nl> + <nl> + public ReadRateComparator ( Map < SSTableReader , Double > readRates ) <nl> + { <nl> + this . readRates = readRates ; <nl> + } <nl> + <nl> + @ Override <nl> + public int compare ( SSTableReader o1 , SSTableReader o2 ) <nl> + { <nl> + Double readRate1 = readRates . get ( o1 ) ; <nl> + Double readRate2 = readRates . get ( o2 ) ; <nl> + if ( readRate1 = = null & & readRate2 = = null ) <nl> + return 0 ; <nl> + else if ( readRate1 = = null ) <nl> + return - 1 ; <nl> + else if ( readRate2 = = null ) <nl> + return 1 ; <nl> + else <nl> + return Double . compare ( readRate1 , readRate2 ) ; <nl> + } <nl> + } <nl> } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 6c5a58d . . 45ac301 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 190 , 7 + 190 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> double v = DatabaseDescriptor . getRowsCachedFraction ( table , columnFamilyName ) ; <nl> int cacheSize ; <nl> if ( 0 < v & & v < 1 ) <nl> - cacheSize = Math . max ( 1 , ( int ) ( v * SSTableReader . estimatedKeys ( columnFamilyName ) ) ) ; <nl> + cacheSize = Math . max ( 1 , ( int ) ( v * ssTables _ . estimatedKeys ( ) ) ) ; <nl> else <nl> cacheSize = ( int ) v ; <nl> if ( logger _ . isDebugEnabled ( ) ) <nl> @ @ - 1164 , 7 + 1164 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> public static Iterable < ColumnFamilyStore > all ( ) <nl> { <nl> - Iterable < ColumnFamilyStore > [ ] stores = ( Iterable < ColumnFamilyStore > [ ] ) new Object [ 0 ] ; <nl> + Iterable < ColumnFamilyStore > [ ] stores = new Iterable [ DatabaseDescriptor . getTables ( ) . size ( ) ] ; <nl> int i = 0 ; <nl> for ( Table table : Table . all ( ) ) <nl> { <nl> @ @ - 1173 , 6 + 1173 , 18 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> return Iterables . concat ( stores ) ; <nl> } <nl> <nl> + public Iterable < SSTable . KeyPosition > allIndexPositions ( ) <nl> + { <nl> + Collection < SSTableReader > sstables = getSSTables ( ) ; <nl> + Iterable < SSTable . KeyPosition > [ ] positions = new Iterable [ sstables . size ( ) ] ; <nl> + int i = 0 ; <nl> + for ( SSTableReader sstable : sstables ) <nl> + { <nl> + positions [ i + + ] = sstable . getIndexPositions ( ) ; <nl> + } <nl> + return Iterables . concat ( positions ) ; <nl> + } <nl> + <nl> / * * <nl> * for testing . no effort is made to clear historical memtables . <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / io / SSTable . java b / src / java / org / apache / cassandra / io / SSTable . java <nl> index 18cbc85 . . dafd2d6 100644 <nl> - - - a / src / java / org / apache / cassandra / io / SSTable . java <nl> + + + b / src / java / org / apache / cassandra / io / SSTable . java <nl> @ @ - 178 , 7 + 178 , 7 @ @ public abstract class SSTable <nl> * in the data file . Binary search is performed on a list of these objects <nl> * to lookup keys within the SSTable data file . <nl> * / <nl> - class KeyPosition implements Comparable < KeyPosition > <nl> + public class KeyPosition implements Comparable < KeyPosition > <nl> { <nl> public final DecoratedKey key ; <nl> public final long position ; <nl> diff - - git a / src / java / org / apache / cassandra / io / SSTableReader . java b / src / java / org / apache / cassandra / io / SSTableReader . java <nl> index 60003f7 . . bbc1c48 100644 <nl> - - - a / src / java / org / apache / cassandra / io / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / SSTableReader . java <nl> @ @ - 53 , 8 + 53 , 6 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> { <nl> private static final Logger logger = Logger . getLogger ( SSTableReader . class ) ; <nl> <nl> - private static final FileSSTableMap openedFiles = new FileSSTableMap ( ) ; <nl> - <nl> / / ` finalizers ` is required to keep the PhantomReferences alive after the enclosing SSTR is itself <nl> / / unreferenced . otherwise they will never get enqueued . <nl> private static final Set < Reference < SSTableReader > > finalizers = new HashSet < Reference < SSTableReader > > ( ) ; <nl> @ @ - 96 , 11 + 94 , 6 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> return INDEX _ INTERVAL ; <nl> } <nl> <nl> - public static long getApproximateKeyCount ( ) <nl> - { <nl> - return getApproximateKeyCount ( openedFiles . values ( ) ) ; <nl> - } <nl> - <nl> public static long getApproximateKeyCount ( Iterable < SSTableReader > sstables ) <nl> { <nl> long count = 0 ; <nl> @ @ - 116 , 60 + 109 , 6 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> return count ; <nl> } <nl> <nl> - public static int estimatedKeys ( String columnFamilyName ) <nl> - { <nl> - int n = 0 ; <nl> - for ( SSTableReader sstable : openedFiles . values ( ) ) <nl> - { <nl> - if ( sstable . getColumnFamilyName ( ) . equals ( columnFamilyName ) ) <nl> - n + = sstable . getIndexPositions ( ) . size ( ) * INDEX _ INTERVAL ; <nl> - } <nl> - return n ; <nl> - } <nl> - <nl> - / * * <nl> - * Get all indexed keys defined by the two predicates . <nl> - * @ param cfpred A Predicate defining matching column families . <nl> - * @ param dkpred A Predicate defining matching DecoratedKeys . <nl> - * / <nl> - public static List < DecoratedKey > getIndexedDecoratedKeysFor ( Predicate < SSTable > cfpred , Predicate < DecoratedKey > dkpred ) <nl> - { <nl> - List < DecoratedKey > indexedKeys = new ArrayList < DecoratedKey > ( ) ; <nl> - <nl> - for ( SSTableReader sstable : openedFiles . values ( ) ) <nl> - { <nl> - if ( ! cfpred . apply ( sstable ) ) <nl> - continue ; <nl> - for ( KeyPosition kp : sstable . getIndexPositions ( ) ) <nl> - { <nl> - if ( dkpred . apply ( kp . key ) ) <nl> - { <nl> - indexedKeys . add ( kp . key ) ; <nl> - } <nl> - } <nl> - } <nl> - Collections . sort ( indexedKeys ) ; <nl> - <nl> - return indexedKeys ; <nl> - } <nl> - <nl> - / * * <nl> - * Get all indexed keys in any SSTable for our primary range . <nl> - * / <nl> - public static List < DecoratedKey > getIndexedDecoratedKeys ( ) <nl> - { <nl> - final Range range = StorageService . instance . getLocalPrimaryRange ( ) ; <nl> - <nl> - Predicate < SSTable > cfpred = Predicates . alwaysTrue ( ) ; <nl> - return getIndexedDecoratedKeysFor ( cfpred , new Predicate < DecoratedKey > ( ) <nl> - { <nl> - public boolean apply ( DecoratedKey dk ) <nl> - { <nl> - return range . contains ( dk . token ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> - <nl> public static SSTableReader open ( String dataFileName ) throws IOException <nl> { <nl> return open ( dataFileName , <nl> @ @ - 180 , 7 + 119 , 6 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> public static SSTableReader open ( String dataFileName , IPartitioner partitioner , double keysCacheFraction ) throws IOException <nl> { <nl> assert partitioner ! = null ; <nl> - assert openedFiles . get ( dataFileName ) = = null ; <nl> <nl> long start = System . currentTimeMillis ( ) ; <nl> SSTableReader sstable = new SSTableReader ( dataFileName , partitioner ) ; <nl> @ @ - 260 , 7 + 198 , 6 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> this . bf = bloomFilter ; <nl> phantomReference = new SSTableDeletingReference ( this , finalizerQueue ) ; <nl> finalizers . add ( phantomReference ) ; <nl> - openedFiles . put ( filename , this ) ; <nl> this . keyCache = keyCache ; <nl> } <nl> <nl> @ @ - 512 , 7 + 449 , 6 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> { <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( " Marking " + path + " compacted " ) ; <nl> - openedFiles . remove ( path ) ; <nl> if ( ! new File ( compactedFilename ( ) ) . createNewFile ( ) ) <nl> { <nl> throw new IOException ( " Unable to create compaction marker " ) ; <nl> @ @ - 526 , 16 + 462 , 6 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> bf = BloomFilter . alwaysMatchingBloomFilter ( ) ; <nl> } <nl> <nl> - static void reopenUnsafe ( ) throws IOException / / testing only <nl> - { <nl> - Collection < SSTableReader > sstables = new ArrayList < SSTableReader > ( openedFiles . values ( ) ) ; <nl> - openedFiles . clear ( ) ; <nl> - for ( SSTableReader sstable : sstables ) <nl> - { <nl> - SSTableReader . open ( sstable . path , sstable . partitioner , 0 . 01 ) ; <nl> - } <nl> - } <nl> - <nl> public IPartitioner getPartitioner ( ) <nl> { <nl> return partitioner ; <nl> diff - - git a / src / java / org / apache / cassandra / io / SSTableTracker . java b / src / java / org / apache / cassandra / io / SSTableTracker . java <nl> index c9ff47d . . 1e3b861 100644 <nl> - - - a / src / java / org / apache / cassandra / io / SSTableTracker . java <nl> + + + b / src / java / org / apache / cassandra / io / SSTableTracker . java <nl> @ @ - 92 , 4 + 92 , 14 @ @ public class SSTableTracker implements Iterable < SSTableReader > <nl> { <nl> sstables = Collections . emptySet ( ) ; <nl> } <nl> + <nl> + public long estimatedKeys ( ) <nl> + { <nl> + long n = 0 ; <nl> + for ( SSTableReader sstable : this ) <nl> + { <nl> + n + = sstable . getIndexPositions ( ) . size ( ) * SSTableReader . INDEX _ INTERVAL ; <nl> + } <nl> + return n ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / AntiEntropyService . java b / src / java / org / apache / cassandra / service / AntiEntropyService . java <nl> index ee5f991 . . fac929d 100644 <nl> - - - a / src / java / org / apache / cassandra / service / AntiEntropyService . java <nl> + + + b / src / java / org / apache / cassandra / service / AntiEntropyService . java <nl> @ @ - 320 , 7 + 320 , 7 @ @ public class AntiEntropyService <nl> * / <nl> public static class Validator implements IValidator , Callable < Object > <nl> { <nl> - public final CFPair cf ; <nl> + public final CFPair cf ; / / TODO keep a CFS reference as a field instead of its string representation <nl> public final MerkleTree tree ; <nl> <nl> / / the minimum token sorts first , but falls into the last range <nl> @ @ - 331 , 7 + 331 , 6 @ @ public class AntiEntropyService <nl> private transient MerkleTree . TreeRange range ; <nl> private transient MerkleTree . TreeRangeIterator ranges ; <nl> <nl> - public final static Predicate < DecoratedKey > DKPRED = Predicates . alwaysTrue ( ) ; <nl> public final static MerkleTree . RowHash EMPTY _ ROW = new MerkleTree . RowHash ( null , new byte [ 0 ] ) ; <nl> <nl> Validator ( CFPair cf ) <nl> @ @ - 356 , 14 + 355 , 21 @ @ public class AntiEntropyService <nl> <nl> public void prepare ( ) <nl> { <nl> - Predicate < SSTable > cfpred = new Predicate < SSTable > ( ) <nl> + List < DecoratedKey > keys = new ArrayList < DecoratedKey > ( ) ; <nl> + ColumnFamilyStore cfs ; <nl> + try <nl> { <nl> - public boolean apply ( SSTable ss ) <nl> - { <nl> - return cf . left . equals ( ss . getTableName ( ) ) & & cf . right . equals ( ss . getColumnFamilyName ( ) ) ; <nl> - } <nl> - } ; <nl> - List < DecoratedKey > keys = SSTableReader . getIndexedDecoratedKeysFor ( cfpred , DKPRED ) ; <nl> + cfs = Table . open ( cf . left ) . getColumnFamilyStore ( cf . right ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new IOError ( e ) ; <nl> + } <nl> + if ( cfs ! = null ) / / TODO test w / valid CF definitions , this if { } shouldn ' t be necessary <nl> + { <nl> + for ( SSTable . KeyPosition info : cfs . allIndexPositions ( ) ) <nl> + keys . add ( info . key ) ; <nl> + } <nl> <nl> if ( keys . isEmpty ( ) ) <nl> { <nl> @ @ - 737 , 8 + 743 , 7 @ @ public class AntiEntropyService <nl> ObjectInputStream ois = new ObjectInputStream ( dis ) ; <nl> try <nl> { <nl> - Validator v = new Validator ( cf , ( MerkleTree ) ois . readObject ( ) ) ; <nl> - return v ; <nl> + return new Validator ( cf , ( MerkleTree ) ois . readObject ( ) ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index ef54128 . . 35dc278 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 34 , 6 + 34 , 7 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . dht . * ; <nl> import org . apache . cassandra . gms . * ; <nl> + import org . apache . cassandra . io . SSTable ; <nl> import org . apache . cassandra . locator . * ; <nl> import org . apache . cassandra . net . * ; <nl> import org . apache . cassandra . service . AntiEntropyService . TreeRequestVerbHandler ; <nl> @ @ - 1211 , 8 + 1212 , 18 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe <nl> List < String > tokens = new ArrayList < String > ( ) ; <nl> tokens . add ( range . left ( ) . toString ( ) ) ; <nl> <nl> - List < DecoratedKey > decoratedKeys = SSTableReader . getIndexedDecoratedKeys ( ) ; <nl> - if ( decoratedKeys . size ( ) < splits ) <nl> + List < DecoratedKey > keys = new ArrayList < DecoratedKey > ( ) ; <nl> + for ( ColumnFamilyStore cfs : ColumnFamilyStore . all ( ) ) <nl> + { <nl> + for ( SSTable . KeyPosition info : cfs . allIndexPositions ( ) ) <nl> + { <nl> + if ( range . contains ( info . key . token ) ) <nl> + keys . add ( info . key ) ; <nl> + } <nl> + } <nl> + Collections . sort ( keys ) ; <nl> + <nl> + if ( keys . size ( ) < splits ) <nl> { <nl> / / not enough keys to generate good splits - - generate random ones instead <nl> / / ( since this only happens when we don ' t have many keys , it doesn ' t really matter that the splits are poor ) <nl> @ @ - 1225 , 8 + 1236 , 8 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe <nl> { <nl> for ( int i = 1 ; i < splits ; i + + ) <nl> { <nl> - int index = i * ( decoratedKeys . size ( ) / splits ) ; <nl> - tokens . add ( decoratedKeys . get ( index ) . token . toString ( ) ) ; <nl> + int index = i * ( keys . size ( ) / splits ) ; <nl> + tokens . add ( keys . get ( index ) . token . toString ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / io / SSTableTest . java b / test / unit / org / apache / cassandra / io / SSTableTest . java <nl> index 00b38a7 . . 0592404 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / SSTableTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / SSTableTest . java <nl> @ @ - 45 , 7 + 45 , 7 @ @ public class SSTableTest extends CleanupHelper <nl> <nl> / / verify <nl> verifySingle ( ssTable , bytes , key ) ; <nl> - SSTableReader . reopenUnsafe ( ) ; / / force reloading the index <nl> + ssTable = SSTableReader . open ( ssTable . path ) ; / / read the index from disk <nl> verifySingle ( ssTable , bytes , key ) ; <nl> } <nl> <nl> @ @ - 73 , 7 + 73 , 7 @ @ public class SSTableTest extends CleanupHelper <nl> <nl> / / verify <nl> verifyMany ( ssTable , map ) ; <nl> - SSTableReader . reopenUnsafe ( ) ; / / force reloading the index <nl> + ssTable = SSTableReader . open ( ssTable . path ) ; / / read the index from disk <nl> verifyMany ( ssTable , map ) ; <nl> } <nl> <nl> @ @ - 92 , 34 + 92 , 4 @ @ public class SSTableTest extends CleanupHelper <nl> assert Arrays . equals ( bytes2 , map . get ( key ) ) ; <nl> } <nl> } <nl> - <nl> - @ Test <nl> - public void testGetIndexedDecoratedKeysFor ( ) throws IOException { <nl> - final String ssname = " indexedkeys " ; <nl> - <nl> - int numkeys = 1000 ; <nl> - TreeMap < String , byte [ ] > map = new TreeMap < String , byte [ ] > ( ) ; <nl> - for ( int i = 0 ; i < numkeys ; i + + ) <nl> - { <nl> - map . put ( Integer . toString ( i ) , " blah " . getBytes ( ) ) ; <nl> - } <nl> - <nl> - / / write <nl> - SSTableReader ssTable = SSTableUtils . writeRawSSTable ( " table " , ssname , map ) ; <nl> - <nl> - / / verify <nl> - Predicate < SSTable > cfpred ; <nl> - Predicate < DecoratedKey > dkpred ; <nl> - <nl> - cfpred = new Predicate < SSTable > ( ) { <nl> - public boolean apply ( SSTable ss ) <nl> - { <nl> - return ss . getColumnFamilyName ( ) . equals ( ssname ) ; <nl> - } <nl> - } ; <nl> - dkpred = Predicates . alwaysTrue ( ) ; <nl> - int actual = SSTableReader . getIndexedDecoratedKeysFor ( cfpred , dkpred ) . size ( ) ; <nl> - assert 0 < actual ; <nl> - assert actual < = Math . ceil ( ( double ) numkeys / SSTableReader . indexInterval ( ) ) ; <nl> - } <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index fbcf460 . . cdfd248 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 6 @ @ 
 2 . 1 . 2 
 + * Avoid IllegalArgumentException while sorting sstables in 
 + IndexSummaryManager ( CASSANDRA - 8182 ) 
 * Shutdown JVM on file descriptor exhaustion ( CASSANDRA - 7579 ) 
 * Add ' die ' policy for commit log and disk failure ( CASSANDRA - 7927 ) 
 * Fix installing as service on Windows ( CASSANDRA - 8115 ) 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java b / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java 
 index e39d75d . . cc60b4d 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java 
 @ @ - 262 , 32 + 262 , 22 @ @ public class IndexSummaryManager implements IndexSummaryManagerMBean 
 logger . debug ( " Beginning redistribution of index summaries for { } sstables with memory pool size { } MB ; current spaced used is { } MB " , 
 nonCompacting . size ( ) , memoryPoolBytes / 1024L / 1024L , total / 1024 . 0 / 1024 . 0 ) ; 
 
 + final Map < SSTableReader , Double > readRates = new HashMap < > ( nonCompacting . size ( ) ) ; 
 double totalReadsPerSec = 0 . 0 ; 
 for ( SSTableReader sstable : nonCompacting ) 
 { 
 if ( sstable . readMeter ! = null ) 
 { 
 - totalReadsPerSec + = sstable . readMeter . fifteenMinuteRate ( ) ; 
 + Double readRate = sstable . readMeter . fifteenMinuteRate ( ) ; 
 + totalReadsPerSec + = readRate ; 
 + readRates . put ( sstable , readRate ) ; 
 } 
 } 
 logger . trace ( " Total reads / sec across all sstables in index summary resize process : { } " , totalReadsPerSec ) ; 
 
 / / copy and sort by read rates ( ascending ) 
 List < SSTableReader > sstablesByHotness = new ArrayList < > ( nonCompacting ) ; 
 - Collections . sort ( sstablesByHotness , new Comparator < SSTableReader > ( ) 
 - { 
 - public int compare ( SSTableReader o1 , SSTableReader o2 ) 
 - { 
 - if ( o1 . readMeter = = null & & o2 . readMeter = = null ) 
 - return 0 ; 
 - else if ( o1 . readMeter = = null ) 
 - return - 1 ; 
 - else if ( o2 . readMeter = = null ) 
 - return 1 ; 
 - else 
 - return Double . compare ( o1 . readMeter . fifteenMinuteRate ( ) , o2 . readMeter . fifteenMinuteRate ( ) ) ; 
 - } 
 - } ) ; 
 + Collections . sort ( sstablesByHotness , new ReadRateComparator ( readRates ) ) ; 
 
 long remainingBytes = memoryPoolBytes ; 
 for ( SSTableReader sstable : compacting ) 
 @ @ - 485 , 4 + 475 , 30 @ @ public class IndexSummaryManager implements IndexSummaryManagerMBean 
 this . newSamplingLevel = newSamplingLevel ; 
 } 
 } 
 + 
 + / * * Utility class for sorting sstables by their read rates . * / 
 + private static class ReadRateComparator implements Comparator < SSTableReader > 
 + { 
 + private final Map < SSTableReader , Double > readRates ; 
 + 
 + public ReadRateComparator ( Map < SSTableReader , Double > readRates ) 
 + { 
 + this . readRates = readRates ; 
 + } 
 + 
 + @ Override 
 + public int compare ( SSTableReader o1 , SSTableReader o2 ) 
 + { 
 + Double readRate1 = readRates . get ( o1 ) ; 
 + Double readRate2 = readRates . get ( o2 ) ; 
 + if ( readRate1 = = null & & readRate2 = = null ) 
 + return 0 ; 
 + else if ( readRate1 = = null ) 
 + return - 1 ; 
 + else if ( readRate2 = = null ) 
 + return 1 ; 
 + else 
 + return Double . compare ( readRate1 , readRate2 ) ; 
 + } 
 + } 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 6c5a58d . . 45ac301 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 190 , 7 + 190 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 double v = DatabaseDescriptor . getRowsCachedFraction ( table , columnFamilyName ) ; 
 int cacheSize ; 
 if ( 0 < v & & v < 1 ) 
 - cacheSize = Math . max ( 1 , ( int ) ( v * SSTableReader . estimatedKeys ( columnFamilyName ) ) ) ; 
 + cacheSize = Math . max ( 1 , ( int ) ( v * ssTables _ . estimatedKeys ( ) ) ) ; 
 else 
 cacheSize = ( int ) v ; 
 if ( logger _ . isDebugEnabled ( ) ) 
 @ @ - 1164 , 7 + 1164 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 public static Iterable < ColumnFamilyStore > all ( ) 
 { 
 - Iterable < ColumnFamilyStore > [ ] stores = ( Iterable < ColumnFamilyStore > [ ] ) new Object [ 0 ] ; 
 + Iterable < ColumnFamilyStore > [ ] stores = new Iterable [ DatabaseDescriptor . getTables ( ) . size ( ) ] ; 
 int i = 0 ; 
 for ( Table table : Table . all ( ) ) 
 { 
 @ @ - 1173 , 6 + 1173 , 18 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 return Iterables . concat ( stores ) ; 
 } 
 
 + public Iterable < SSTable . KeyPosition > allIndexPositions ( ) 
 + { 
 + Collection < SSTableReader > sstables = getSSTables ( ) ; 
 + Iterable < SSTable . KeyPosition > [ ] positions = new Iterable [ sstables . size ( ) ] ; 
 + int i = 0 ; 
 + for ( SSTableReader sstable : sstables ) 
 + { 
 + positions [ i + + ] = sstable . getIndexPositions ( ) ; 
 + } 
 + return Iterables . concat ( positions ) ; 
 + } 
 + 
 / * * 
 * for testing . no effort is made to clear historical memtables . 
 * / 
 diff - - git a / src / java / org / apache / cassandra / io / SSTable . java b / src / java / org / apache / cassandra / io / SSTable . java 
 index 18cbc85 . . dafd2d6 100644 
 - - - a / src / java / org / apache / cassandra / io / SSTable . java 
 + + + b / src / java / org / apache / cassandra / io / SSTable . java 
 @ @ - 178 , 7 + 178 , 7 @ @ public abstract class SSTable 
 * in the data file . Binary search is performed on a list of these objects 
 * to lookup keys within the SSTable data file . 
 * / 
 - class KeyPosition implements Comparable < KeyPosition > 
 + public class KeyPosition implements Comparable < KeyPosition > 
 { 
 public final DecoratedKey key ; 
 public final long position ; 
 diff - - git a / src / java / org / apache / cassandra / io / SSTableReader . java b / src / java / org / apache / cassandra / io / SSTableReader . java 
 index 60003f7 . . bbc1c48 100644 
 - - - a / src / java / org / apache / cassandra / io / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / SSTableReader . java 
 @ @ - 53 , 8 + 53 , 6 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 { 
 private static final Logger logger = Logger . getLogger ( SSTableReader . class ) ; 
 
 - private static final FileSSTableMap openedFiles = new FileSSTableMap ( ) ; 
 - 
 / / ` finalizers ` is required to keep the PhantomReferences alive after the enclosing SSTR is itself 
 / / unreferenced . otherwise they will never get enqueued . 
 private static final Set < Reference < SSTableReader > > finalizers = new HashSet < Reference < SSTableReader > > ( ) ; 
 @ @ - 96 , 11 + 94 , 6 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 return INDEX _ INTERVAL ; 
 } 
 
 - public static long getApproximateKeyCount ( ) 
 - { 
 - return getApproximateKeyCount ( openedFiles . values ( ) ) ; 
 - } 
 - 
 public static long getApproximateKeyCount ( Iterable < SSTableReader > sstables ) 
 { 
 long count = 0 ; 
 @ @ - 116 , 60 + 109 , 6 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 return count ; 
 } 
 
 - public static int estimatedKeys ( String columnFamilyName ) 
 - { 
 - int n = 0 ; 
 - for ( SSTableReader sstable : openedFiles . values ( ) ) 
 - { 
 - if ( sstable . getColumnFamilyName ( ) . equals ( columnFamilyName ) ) 
 - n + = sstable . getIndexPositions ( ) . size ( ) * INDEX _ INTERVAL ; 
 - } 
 - return n ; 
 - } 
 - 
 - / * * 
 - * Get all indexed keys defined by the two predicates . 
 - * @ param cfpred A Predicate defining matching column families . 
 - * @ param dkpred A Predicate defining matching DecoratedKeys . 
 - * / 
 - public static List < DecoratedKey > getIndexedDecoratedKeysFor ( Predicate < SSTable > cfpred , Predicate < DecoratedKey > dkpred ) 
 - { 
 - List < DecoratedKey > indexedKeys = new ArrayList < DecoratedKey > ( ) ; 
 - 
 - for ( SSTableReader sstable : openedFiles . values ( ) ) 
 - { 
 - if ( ! cfpred . apply ( sstable ) ) 
 - continue ; 
 - for ( KeyPosition kp : sstable . getIndexPositions ( ) ) 
 - { 
 - if ( dkpred . apply ( kp . key ) ) 
 - { 
 - indexedKeys . add ( kp . key ) ; 
 - } 
 - } 
 - } 
 - Collections . sort ( indexedKeys ) ; 
 - 
 - return indexedKeys ; 
 - } 
 - 
 - / * * 
 - * Get all indexed keys in any SSTable for our primary range . 
 - * / 
 - public static List < DecoratedKey > getIndexedDecoratedKeys ( ) 
 - { 
 - final Range range = StorageService . instance . getLocalPrimaryRange ( ) ; 
 - 
 - Predicate < SSTable > cfpred = Predicates . alwaysTrue ( ) ; 
 - return getIndexedDecoratedKeysFor ( cfpred , new Predicate < DecoratedKey > ( ) 
 - { 
 - public boolean apply ( DecoratedKey dk ) 
 - { 
 - return range . contains ( dk . token ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 public static SSTableReader open ( String dataFileName ) throws IOException 
 { 
 return open ( dataFileName , 
 @ @ - 180 , 7 + 119 , 6 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 public static SSTableReader open ( String dataFileName , IPartitioner partitioner , double keysCacheFraction ) throws IOException 
 { 
 assert partitioner ! = null ; 
 - assert openedFiles . get ( dataFileName ) = = null ; 
 
 long start = System . currentTimeMillis ( ) ; 
 SSTableReader sstable = new SSTableReader ( dataFileName , partitioner ) ; 
 @ @ - 260 , 7 + 198 , 6 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 this . bf = bloomFilter ; 
 phantomReference = new SSTableDeletingReference ( this , finalizerQueue ) ; 
 finalizers . add ( phantomReference ) ; 
 - openedFiles . put ( filename , this ) ; 
 this . keyCache = keyCache ; 
 } 
 
 @ @ - 512 , 7 + 449 , 6 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 { 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( " Marking " + path + " compacted " ) ; 
 - openedFiles . remove ( path ) ; 
 if ( ! new File ( compactedFilename ( ) ) . createNewFile ( ) ) 
 { 
 throw new IOException ( " Unable to create compaction marker " ) ; 
 @ @ - 526 , 16 + 462 , 6 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 bf = BloomFilter . alwaysMatchingBloomFilter ( ) ; 
 } 
 
 - static void reopenUnsafe ( ) throws IOException / / testing only 
 - { 
 - Collection < SSTableReader > sstables = new ArrayList < SSTableReader > ( openedFiles . values ( ) ) ; 
 - openedFiles . clear ( ) ; 
 - for ( SSTableReader sstable : sstables ) 
 - { 
 - SSTableReader . open ( sstable . path , sstable . partitioner , 0 . 01 ) ; 
 - } 
 - } 
 - 
 public IPartitioner getPartitioner ( ) 
 { 
 return partitioner ; 
 diff - - git a / src / java / org / apache / cassandra / io / SSTableTracker . java b / src / java / org / apache / cassandra / io / SSTableTracker . java 
 index c9ff47d . . 1e3b861 100644 
 - - - a / src / java / org / apache / cassandra / io / SSTableTracker . java 
 + + + b / src / java / org / apache / cassandra / io / SSTableTracker . java 
 @ @ - 92 , 4 + 92 , 14 @ @ public class SSTableTracker implements Iterable < SSTableReader > 
 { 
 sstables = Collections . emptySet ( ) ; 
 } 
 + 
 + public long estimatedKeys ( ) 
 + { 
 + long n = 0 ; 
 + for ( SSTableReader sstable : this ) 
 + { 
 + n + = sstable . getIndexPositions ( ) . size ( ) * SSTableReader . INDEX _ INTERVAL ; 
 + } 
 + return n ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / AntiEntropyService . java b / src / java / org / apache / cassandra / service / AntiEntropyService . java 
 index ee5f991 . . fac929d 100644 
 - - - a / src / java / org / apache / cassandra / service / AntiEntropyService . java 
 + + + b / src / java / org / apache / cassandra / service / AntiEntropyService . java 
 @ @ - 320 , 7 + 320 , 7 @ @ public class AntiEntropyService 
 * / 
 public static class Validator implements IValidator , Callable < Object > 
 { 
 - public final CFPair cf ; 
 + public final CFPair cf ; / / TODO keep a CFS reference as a field instead of its string representation 
 public final MerkleTree tree ; 
 
 / / the minimum token sorts first , but falls into the last range 
 @ @ - 331 , 7 + 331 , 6 @ @ public class AntiEntropyService 
 private transient MerkleTree . TreeRange range ; 
 private transient MerkleTree . TreeRangeIterator ranges ; 
 
 - public final static Predicate < DecoratedKey > DKPRED = Predicates . alwaysTrue ( ) ; 
 public final static MerkleTree . RowHash EMPTY _ ROW = new MerkleTree . RowHash ( null , new byte [ 0 ] ) ; 
 
 Validator ( CFPair cf ) 
 @ @ - 356 , 14 + 355 , 21 @ @ public class AntiEntropyService 
 
 public void prepare ( ) 
 { 
 - Predicate < SSTable > cfpred = new Predicate < SSTable > ( ) 
 + List < DecoratedKey > keys = new ArrayList < DecoratedKey > ( ) ; 
 + ColumnFamilyStore cfs ; 
 + try 
 { 
 - public boolean apply ( SSTable ss ) 
 - { 
 - return cf . left . equals ( ss . getTableName ( ) ) & & cf . right . equals ( ss . getColumnFamilyName ( ) ) ; 
 - } 
 - } ; 
 - List < DecoratedKey > keys = SSTableReader . getIndexedDecoratedKeysFor ( cfpred , DKPRED ) ; 
 + cfs = Table . open ( cf . left ) . getColumnFamilyStore ( cf . right ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new IOError ( e ) ; 
 + } 
 + if ( cfs ! = null ) / / TODO test w / valid CF definitions , this if { } shouldn ' t be necessary 
 + { 
 + for ( SSTable . KeyPosition info : cfs . allIndexPositions ( ) ) 
 + keys . add ( info . key ) ; 
 + } 
 
 if ( keys . isEmpty ( ) ) 
 { 
 @ @ - 737 , 8 + 743 , 7 @ @ public class AntiEntropyService 
 ObjectInputStream ois = new ObjectInputStream ( dis ) ; 
 try 
 { 
 - Validator v = new Validator ( cf , ( MerkleTree ) ois . readObject ( ) ) ; 
 - return v ; 
 + return new Validator ( cf , ( MerkleTree ) ois . readObject ( ) ) ; 
 } 
 catch ( Exception e ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index ef54128 . . 35dc278 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 34 , 6 + 34 , 7 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . dht . * ; 
 import org . apache . cassandra . gms . * ; 
 + import org . apache . cassandra . io . SSTable ; 
 import org . apache . cassandra . locator . * ; 
 import org . apache . cassandra . net . * ; 
 import org . apache . cassandra . service . AntiEntropyService . TreeRequestVerbHandler ; 
 @ @ - 1211 , 8 + 1212 , 18 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe 
 List < String > tokens = new ArrayList < String > ( ) ; 
 tokens . add ( range . left ( ) . toString ( ) ) ; 
 
 - List < DecoratedKey > decoratedKeys = SSTableReader . getIndexedDecoratedKeys ( ) ; 
 - if ( decoratedKeys . size ( ) < splits ) 
 + List < DecoratedKey > keys = new ArrayList < DecoratedKey > ( ) ; 
 + for ( ColumnFamilyStore cfs : ColumnFamilyStore . all ( ) ) 
 + { 
 + for ( SSTable . KeyPosition info : cfs . allIndexPositions ( ) ) 
 + { 
 + if ( range . contains ( info . key . token ) ) 
 + keys . add ( info . key ) ; 
 + } 
 + } 
 + Collections . sort ( keys ) ; 
 + 
 + if ( keys . size ( ) < splits ) 
 { 
 / / not enough keys to generate good splits - - generate random ones instead 
 / / ( since this only happens when we don ' t have many keys , it doesn ' t really matter that the splits are poor ) 
 @ @ - 1225 , 8 + 1236 , 8 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe 
 { 
 for ( int i = 1 ; i < splits ; i + + ) 
 { 
 - int index = i * ( decoratedKeys . size ( ) / splits ) ; 
 - tokens . add ( decoratedKeys . get ( index ) . token . toString ( ) ) ; 
 + int index = i * ( keys . size ( ) / splits ) ; 
 + tokens . add ( keys . get ( index ) . token . toString ( ) ) ; 
 } 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / io / SSTableTest . java b / test / unit / org / apache / cassandra / io / SSTableTest . java 
 index 00b38a7 . . 0592404 100644 
 - - - a / test / unit / org / apache / cassandra / io / SSTableTest . java 
 + + + b / test / unit / org / apache / cassandra / io / SSTableTest . java 
 @ @ - 45 , 7 + 45 , 7 @ @ public class SSTableTest extends CleanupHelper 
 
 / / verify 
 verifySingle ( ssTable , bytes , key ) ; 
 - SSTableReader . reopenUnsafe ( ) ; / / force reloading the index 
 + ssTable = SSTableReader . open ( ssTable . path ) ; / / read the index from disk 
 verifySingle ( ssTable , bytes , key ) ; 
 } 
 
 @ @ - 73 , 7 + 73 , 7 @ @ public class SSTableTest extends CleanupHelper 
 
 / / verify 
 verifyMany ( ssTable , map ) ; 
 - SSTableReader . reopenUnsafe ( ) ; / / force reloading the index 
 + ssTable = SSTableReader . open ( ssTable . path ) ; / / read the index from disk 
 verifyMany ( ssTable , map ) ; 
 } 
 
 @ @ - 92 , 34 + 92 , 4 @ @ public class SSTableTest extends CleanupHelper 
 assert Arrays . equals ( bytes2 , map . get ( key ) ) ; 
 } 
 } 
 - 
 - @ Test 
 - public void testGetIndexedDecoratedKeysFor ( ) throws IOException { 
 - final String ssname = " indexedkeys " ; 
 - 
 - int numkeys = 1000 ; 
 - TreeMap < String , byte [ ] > map = new TreeMap < String , byte [ ] > ( ) ; 
 - for ( int i = 0 ; i < numkeys ; i + + ) 
 - { 
 - map . put ( Integer . toString ( i ) , " blah " . getBytes ( ) ) ; 
 - } 
 - 
 - / / write 
 - SSTableReader ssTable = SSTableUtils . writeRawSSTable ( " table " , ssname , map ) ; 
 - 
 - / / verify 
 - Predicate < SSTable > cfpred ; 
 - Predicate < DecoratedKey > dkpred ; 
 - 
 - cfpred = new Predicate < SSTable > ( ) { 
 - public boolean apply ( SSTable ss ) 
 - { 
 - return ss . getColumnFamilyName ( ) . equals ( ssname ) ; 
 - } 
 - } ; 
 - dkpred = Predicates . alwaysTrue ( ) ; 
 - int actual = SSTableReader . getIndexedDecoratedKeysFor ( cfpred , dkpred ) . size ( ) ; 
 - assert 0 < actual ; 
 - assert actual < = Math . ceil ( ( double ) numkeys / SSTableReader . indexInterval ( ) ) ; 
 - } 
 }
