BLEU SCORE: 0.028465126651392333

TEST MSG: Validate supported column type with SASI analyzer
GENERATED MSG: Reject index queries while the index is building

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d9c62ea . . 6f6e009 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 11 . 3 <nl> + * Validate supported column type with SASI analyzer ( CASSANDRA - 13669 ) <nl> * Remove BTree . Builder Recycler to reduce memory usage ( CASSANDRA - 13929 ) <nl> * Reduce nodetool GC thread count ( CASSANDRA - 14475 ) <nl> * Fix New SASI view creation during Index Redistribution ( CASSANDRA - 14055 ) <nl> diff - - git a / src / java / org / apache / cassandra / index / sasi / SASIIndex . java b / src / java / org / apache / cassandra / index / sasi / SASIIndex . java <nl> index f127748 . . 2c1d088 100644 <nl> - - - a / src / java / org / apache / cassandra / index / sasi / SASIIndex . java <nl> + + + b / src / java / org / apache / cassandra / index / sasi / SASIIndex . java <nl> @ @ - 121 , 6 + 121 , 9 @ @ public class SASIIndex implements Index , INotificationConsumer <nl> CompactionManager . instance . submitIndexBuild ( new SASIIndexBuilder ( baseCfs , toRebuild ) ) ; <nl> } <nl> <nl> + / * * <nl> + * Called via reflection at { @ link IndexMetadata # validateCustomIndexOptions } <nl> + * / <nl> public static Map < String , String > validateOptions ( Map < String , String > options , CFMetaData cfm ) <nl> { <nl> if ( ! ( cfm . partitioner instanceof Murmur3Partitioner ) ) <nl> @ @ - 140 , 7 + 143 , 7 @ @ public class SASIIndex implements Index , INotificationConsumer <nl> if ( target . left . isPartitionKey ( ) ) <nl> throw new ConfigurationException ( " partition key columns are not yet supported by SASI " ) ; <nl> <nl> - IndexMode . validateAnalyzer ( options ) ; <nl> + IndexMode . validateAnalyzer ( options , target . left ) ; <nl> <nl> IndexMode mode = IndexMode . getMode ( target . left , options ) ; <nl> if ( mode . mode = = Mode . SPARSE ) <nl> diff - - git a / src / java / org / apache / cassandra / index / sasi / analyzer / AbstractAnalyzer . java b / src / java / org / apache / cassandra / index / sasi / analyzer / AbstractAnalyzer . java <nl> index 31c66cc . . e3bb7a2 100644 <nl> - - - a / src / java / org / apache / cassandra / index / sasi / analyzer / AbstractAnalyzer . java <nl> + + + b / src / java / org / apache / cassandra / index / sasi / analyzer / AbstractAnalyzer . java <nl> @ @ - 43 , 6 + 43 , 14 @ @ public abstract class AbstractAnalyzer implements Iterator < ByteBuffer > <nl> public abstract void reset ( ByteBuffer input ) ; <nl> <nl> / * * <nl> + * Test whether the given validator is compatible with the underlying analyzer . <nl> + * <nl> + * @ param validator <nl> + * @ return <nl> + * / <nl> + public abstract boolean isCompatibleWith ( AbstractType < ? > validator ) ; <nl> + <nl> + / * * <nl> * @ return true if current analyzer provides text tokenization , false otherwise . <nl> * / <nl> public boolean isTokenizing ( ) <nl> diff - - git a / src / java / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzer . java b / src / java / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzer . java <nl> index 24acef4 . . fea4b4f 100644 <nl> - - - a / src / java / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzer . java <nl> + + + b / src / java / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzer . java <nl> @ @ - 37 , 10 + 37 , 10 @ @ import org . apache . cassandra . utils . AbstractIterator ; <nl> public class DelimiterAnalyzer extends AbstractAnalyzer <nl> { <nl> <nl> - private static final Map < AbstractType < ? > , Charset > VALID _ ANALYZABLE _ TYPES = new HashMap < AbstractType < ? > , Charset > ( ) <nl> + private static final Map < AbstractType < ? > , Charset > VALID _ ANALYZABLE _ TYPES = new HashMap < AbstractType < ? > , Charset > ( ) <nl> { { <nl> - put ( UTF8Type . instance , StandardCharsets . UTF _ 8 ) ; <nl> - put ( AsciiType . instance , StandardCharsets . US _ ASCII ) ; <nl> + put ( UTF8Type . instance , StandardCharsets . UTF _ 8 ) ; <nl> + put ( AsciiType . instance , StandardCharsets . US _ ASCII ) ; <nl> } } ; <nl> <nl> private char delimiter ; <nl> @ @ - 105 , 4 + 105 , 10 @ @ public class DelimiterAnalyzer extends AbstractAnalyzer <nl> { <nl> return true ; <nl> } <nl> + <nl> + @ Override <nl> + public boolean isCompatibleWith ( AbstractType < ? > validator ) <nl> + { <nl> + return VALID _ ANALYZABLE _ TYPES . containsKey ( validator ) ; <nl> + } <nl> } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / index / sasi / analyzer / NoOpAnalyzer . java b / src / java / org / apache / cassandra / index / sasi / analyzer / NoOpAnalyzer . java <nl> index 9939a13 . . 5c9b748 100644 <nl> - - - a / src / java / org / apache / cassandra / index / sasi / analyzer / NoOpAnalyzer . java <nl> + + + b / src / java / org / apache / cassandra / index / sasi / analyzer / NoOpAnalyzer . java <nl> @ @ - 51 , 4 + 51 , 10 @ @ public class NoOpAnalyzer extends AbstractAnalyzer <nl> this . input = input ; <nl> this . hasNext = true ; <nl> } <nl> + <nl> + @ Override <nl> + public boolean isCompatibleWith ( AbstractType < ? > validator ) <nl> + { <nl> + return true ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / index / sasi / analyzer / NonTokenizingAnalyzer . java b / src / java / org / apache / cassandra / index / sasi / analyzer / NonTokenizingAnalyzer . java <nl> index 676b304 . . 82084bc 100644 <nl> - - - a / src / java / org / apache / cassandra / index / sasi / analyzer / NonTokenizingAnalyzer . java <nl> + + + b / src / java / org / apache / cassandra / index / sasi / analyzer / NonTokenizingAnalyzer . java <nl> @ @ - 123 , 4 + 123 , 10 @ @ public class NonTokenizingAnalyzer extends AbstractAnalyzer <nl> builder = builder . add ( " to _ lower " , new BasicResultFilters . LowerCase ( ) ) ; <nl> return builder . build ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public boolean isCompatibleWith ( AbstractType < ? > validator ) <nl> + { <nl> + return VALID _ ANALYZABLE _ TYPES . contains ( validator ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / index / sasi / analyzer / StandardAnalyzer . java b / src / java / org / apache / cassandra / index / sasi / analyzer / StandardAnalyzer . java <nl> index 3b58bf9 . . e1a4a44 100644 <nl> - - - a / src / java / org / apache / cassandra / index / sasi / analyzer / StandardAnalyzer . java <nl> + + + b / src / java / org / apache / cassandra / index / sasi / analyzer / StandardAnalyzer . java <nl> @ @ - 23 , 10 + 23 , 13 @ @ import java . io . InputStreamReader ; <nl> import java . io . Reader ; <nl> import java . nio . ByteBuffer ; <nl> import java . nio . charset . StandardCharsets ; <nl> + import java . util . HashSet ; <nl> import java . util . Map ; <nl> + import java . util . Set ; <nl> <nl> import org . apache . cassandra . index . sasi . analyzer . filter . * ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> + import org . apache . cassandra . db . marshal . AsciiType ; <nl> import org . apache . cassandra . db . marshal . UTF8Type ; <nl> import org . apache . cassandra . io . util . DataInputBuffer ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> @ @ - 38 , 6 + 41 , 15 @ @ import com . carrotsearch . hppc . IntObjectOpenHashMap ; <nl> <nl> public class StandardAnalyzer extends AbstractAnalyzer <nl> { <nl> + <nl> + private static final Set < AbstractType < ? > > VALID _ ANALYZABLE _ TYPES = new HashSet < AbstractType < ? > > ( ) <nl> + { <nl> + { <nl> + add ( UTF8Type . instance ) ; <nl> + add ( AsciiType . instance ) ; <nl> + } <nl> + } ; <nl> + <nl> public enum TokenType <nl> { <nl> EOF ( - 1 ) , <nl> @ @ - 198 , 4 + 210 , 10 @ @ public class StandardAnalyzer extends AbstractAnalyzer <nl> { <nl> return true ; <nl> } <nl> + <nl> + @ Override <nl> + public boolean isCompatibleWith ( AbstractType < ? > validator ) <nl> + { <nl> + return VALID _ ANALYZABLE _ TYPES . contains ( validator ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / index / sasi / conf / IndexMode . java b / src / java / org / apache / cassandra / index / sasi / conf / IndexMode . java <nl> index c66dd02 . . 5709a0f 100644 <nl> - - - a / src / java / org / apache / cassandra / index / sasi / conf / IndexMode . java <nl> + + + b / src / java / org / apache / cassandra / index / sasi / conf / IndexMode . java <nl> @ @ - 93 , 20 + 93 , 36 @ @ public class IndexMode <nl> return analyzer ; <nl> } <nl> <nl> - public static void validateAnalyzer ( Map < String , String > indexOptions ) throws ConfigurationException <nl> + public static void validateAnalyzer ( Map < String , String > indexOptions , ColumnDefinition cd ) throws ConfigurationException <nl> { <nl> / / validate that a valid analyzer class was provided if specified <nl> if ( indexOptions . containsKey ( INDEX _ ANALYZER _ CLASS _ OPTION ) ) <nl> { <nl> + Class < ? > analyzerClass ; <nl> try <nl> { <nl> - Class . forName ( indexOptions . get ( INDEX _ ANALYZER _ CLASS _ OPTION ) ) ; <nl> + analyzerClass = Class . forName ( indexOptions . get ( INDEX _ ANALYZER _ CLASS _ OPTION ) ) ; <nl> } <nl> catch ( ClassNotFoundException e ) <nl> { <nl> throw new ConfigurationException ( String . format ( " Invalid analyzer class option specified [ % s ] " , <nl> indexOptions . get ( INDEX _ ANALYZER _ CLASS _ OPTION ) ) ) ; <nl> } <nl> + <nl> + AbstractAnalyzer analyzer ; <nl> + try <nl> + { <nl> + analyzer = ( AbstractAnalyzer ) analyzerClass . newInstance ( ) ; <nl> + if ( ! analyzer . isCompatibleWith ( cd . type ) ) <nl> + throw new ConfigurationException ( String . format ( " % s does not support type % s " , <nl> + analyzerClass . getSimpleName ( ) , <nl> + cd . type . asCQL3Type ( ) ) ) ; <nl> + } <nl> + catch ( InstantiationException | IllegalAccessException e ) <nl> + { <nl> + throw new ConfigurationException ( String . format ( " Unable to initialize analyzer class option specified [ % s ] " , <nl> + analyzerClass . getSimpleName ( ) ) ) ; <nl> + } <nl> } <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java b / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java <nl> index a57af61 . . 1579857 100644 <nl> - - - a / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java <nl> + + + b / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java <nl> @ @ - 31 , 10 + 31 , 12 @ @ import java . util . concurrent . Executors ; <nl> import java . util . concurrent . ThreadLocalRandom ; <nl> import java . util . concurrent . TimeUnit ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> + import java . util . stream . Collectors ; <nl> <nl> import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> + import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . index . Index ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . cql3 . * ; <nl> @ @ - 55 , 6 + 57 , 11 @ @ import org . apache . cassandra . dht . Murmur3Partitioner ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> + import org . apache . cassandra . index . sasi . analyzer . AbstractAnalyzer ; <nl> + import org . apache . cassandra . index . sasi . analyzer . DelimiterAnalyzer ; <nl> + import org . apache . cassandra . index . sasi . analyzer . NoOpAnalyzer ; <nl> + import org . apache . cassandra . index . sasi . analyzer . NonTokenizingAnalyzer ; <nl> + import org . apache . cassandra . index . sasi . analyzer . StandardAnalyzer ; <nl> import org . apache . cassandra . index . sasi . conf . ColumnIndex ; <nl> import org . apache . cassandra . index . sasi . disk . OnDiskIndexBuilder ; <nl> import org . apache . cassandra . index . sasi . exceptions . TimeQuotaExceededException ; <nl> @ @ - 2411 , 6 + 2418 , 76 @ @ public class SASIIndexTest <nl> Assert . assertEquals ( index . searchMemtable ( expression ) . getCount ( ) , 0 ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testAnalyzerValidation ( ) <nl> + { <nl> + final String TABLE _ NAME = " analyzer _ validation " ; <nl> + QueryProcessor . executeOnceInternal ( String . format ( " CREATE TABLE % s . % s ( " + <nl> + " pk text PRIMARY KEY , " + <nl> + " ascii _ v ascii , " + <nl> + " bigint _ v bigint , " + <nl> + " blob _ v blob , " + <nl> + " boolean _ v boolean , " + <nl> + " date _ v date , " + <nl> + " decimal _ v decimal , " + <nl> + " double _ v double , " + <nl> + " float _ v float , " + <nl> + " inet _ v inet , " + <nl> + " int _ v int , " + <nl> + " smallint _ v smallint , " + <nl> + " text _ v text , " + <nl> + " time _ v time , " + <nl> + " timestamp _ v timestamp , " + <nl> + " timeuuid _ v timeuuid , " + <nl> + " tinyint _ v tinyint , " + <nl> + " uuid _ v uuid , " + <nl> + " varchar _ v varchar , " + <nl> + " varint _ v varint " + <nl> + " ) ; " , <nl> + KS _ NAME , <nl> + TABLE _ NAME ) ) ; <nl> + <nl> + Columns regulars = Schema . instance . getCFMetaData ( KS _ NAME , TABLE _ NAME ) . partitionColumns ( ) . regulars ; <nl> + List < String > allColumns = regulars . stream ( ) . map ( ColumnDefinition : : toString ) . collect ( Collectors . toList ( ) ) ; <nl> + List < String > textColumns = Arrays . asList ( " text _ v " , " ascii _ v " , " varchar _ v " ) ; <nl> + <nl> + new HashMap < Class < ? extends AbstractAnalyzer > , List < String > > ( ) <nl> + { { <nl> + put ( StandardAnalyzer . class , textColumns ) ; <nl> + put ( NonTokenizingAnalyzer . class , textColumns ) ; <nl> + put ( DelimiterAnalyzer . class , textColumns ) ; <nl> + put ( NoOpAnalyzer . class , allColumns ) ; <nl> + } } <nl> + . forEach ( ( analyzer , supportedColumns ) - > { <nl> + for ( String column : allColumns ) <nl> + { <nl> + String query = String . format ( " CREATE CUSTOM INDEX ON % s . % s ( % s ) " + <nl> + " USING ' org . apache . cassandra . index . sasi . SASIIndex ' " + <nl> + " WITH OPTIONS = { ' analyzer _ class ' : ' % s ' , ' mode ' : ' PREFIX ' } ; " , <nl> + KS _ NAME , TABLE _ NAME , column , analyzer . getName ( ) ) ; <nl> + <nl> + if ( supportedColumns . contains ( column ) ) <nl> + { <nl> + QueryProcessor . executeOnceInternal ( query ) ; <nl> + } <nl> + else <nl> + { <nl> + try <nl> + { <nl> + QueryProcessor . executeOnceInternal ( query ) ; <nl> + Assert . fail ( " Expected ConfigurationException " ) ; <nl> + } <nl> + catch ( ConfigurationException e ) <nl> + { <nl> + / / expected <nl> + Assert . assertTrue ( " Unexpected error message " + e . getMessage ( ) , <nl> + e . getMessage ( ) . contains ( " does not support type " ) ) ; <nl> + } <nl> + } <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> private static ColumnFamilyStore loadData ( Map < String , Pair < String , Integer > > data , boolean forceFlush ) <nl> { <nl> return loadData ( data , System . currentTimeMillis ( ) , forceFlush ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d9c62ea . . 6f6e009 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 11 . 3 
 + * Validate supported column type with SASI analyzer ( CASSANDRA - 13669 ) 
 * Remove BTree . Builder Recycler to reduce memory usage ( CASSANDRA - 13929 ) 
 * Reduce nodetool GC thread count ( CASSANDRA - 14475 ) 
 * Fix New SASI view creation during Index Redistribution ( CASSANDRA - 14055 ) 
 diff - - git a / src / java / org / apache / cassandra / index / sasi / SASIIndex . java b / src / java / org / apache / cassandra / index / sasi / SASIIndex . java 
 index f127748 . . 2c1d088 100644 
 - - - a / src / java / org / apache / cassandra / index / sasi / SASIIndex . java 
 + + + b / src / java / org / apache / cassandra / index / sasi / SASIIndex . java 
 @ @ - 121 , 6 + 121 , 9 @ @ public class SASIIndex implements Index , INotificationConsumer 
 CompactionManager . instance . submitIndexBuild ( new SASIIndexBuilder ( baseCfs , toRebuild ) ) ; 
 } 
 
 + / * * 
 + * Called via reflection at { @ link IndexMetadata # validateCustomIndexOptions } 
 + * / 
 public static Map < String , String > validateOptions ( Map < String , String > options , CFMetaData cfm ) 
 { 
 if ( ! ( cfm . partitioner instanceof Murmur3Partitioner ) ) 
 @ @ - 140 , 7 + 143 , 7 @ @ public class SASIIndex implements Index , INotificationConsumer 
 if ( target . left . isPartitionKey ( ) ) 
 throw new ConfigurationException ( " partition key columns are not yet supported by SASI " ) ; 
 
 - IndexMode . validateAnalyzer ( options ) ; 
 + IndexMode . validateAnalyzer ( options , target . left ) ; 
 
 IndexMode mode = IndexMode . getMode ( target . left , options ) ; 
 if ( mode . mode = = Mode . SPARSE ) 
 diff - - git a / src / java / org / apache / cassandra / index / sasi / analyzer / AbstractAnalyzer . java b / src / java / org / apache / cassandra / index / sasi / analyzer / AbstractAnalyzer . java 
 index 31c66cc . . e3bb7a2 100644 
 - - - a / src / java / org / apache / cassandra / index / sasi / analyzer / AbstractAnalyzer . java 
 + + + b / src / java / org / apache / cassandra / index / sasi / analyzer / AbstractAnalyzer . java 
 @ @ - 43 , 6 + 43 , 14 @ @ public abstract class AbstractAnalyzer implements Iterator < ByteBuffer > 
 public abstract void reset ( ByteBuffer input ) ; 
 
 / * * 
 + * Test whether the given validator is compatible with the underlying analyzer . 
 + * 
 + * @ param validator 
 + * @ return 
 + * / 
 + public abstract boolean isCompatibleWith ( AbstractType < ? > validator ) ; 
 + 
 + / * * 
 * @ return true if current analyzer provides text tokenization , false otherwise . 
 * / 
 public boolean isTokenizing ( ) 
 diff - - git a / src / java / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzer . java b / src / java / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzer . java 
 index 24acef4 . . fea4b4f 100644 
 - - - a / src / java / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzer . java 
 + + + b / src / java / org / apache / cassandra / index / sasi / analyzer / DelimiterAnalyzer . java 
 @ @ - 37 , 10 + 37 , 10 @ @ import org . apache . cassandra . utils . AbstractIterator ; 
 public class DelimiterAnalyzer extends AbstractAnalyzer 
 { 
 
 - private static final Map < AbstractType < ? > , Charset > VALID _ ANALYZABLE _ TYPES = new HashMap < AbstractType < ? > , Charset > ( ) 
 + private static final Map < AbstractType < ? > , Charset > VALID _ ANALYZABLE _ TYPES = new HashMap < AbstractType < ? > , Charset > ( ) 
 { { 
 - put ( UTF8Type . instance , StandardCharsets . UTF _ 8 ) ; 
 - put ( AsciiType . instance , StandardCharsets . US _ ASCII ) ; 
 + put ( UTF8Type . instance , StandardCharsets . UTF _ 8 ) ; 
 + put ( AsciiType . instance , StandardCharsets . US _ ASCII ) ; 
 } } ; 
 
 private char delimiter ; 
 @ @ - 105 , 4 + 105 , 10 @ @ public class DelimiterAnalyzer extends AbstractAnalyzer 
 { 
 return true ; 
 } 
 + 
 + @ Override 
 + public boolean isCompatibleWith ( AbstractType < ? > validator ) 
 + { 
 + return VALID _ ANALYZABLE _ TYPES . containsKey ( validator ) ; 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / index / sasi / analyzer / NoOpAnalyzer . java b / src / java / org / apache / cassandra / index / sasi / analyzer / NoOpAnalyzer . java 
 index 9939a13 . . 5c9b748 100644 
 - - - a / src / java / org / apache / cassandra / index / sasi / analyzer / NoOpAnalyzer . java 
 + + + b / src / java / org / apache / cassandra / index / sasi / analyzer / NoOpAnalyzer . java 
 @ @ - 51 , 4 + 51 , 10 @ @ public class NoOpAnalyzer extends AbstractAnalyzer 
 this . input = input ; 
 this . hasNext = true ; 
 } 
 + 
 + @ Override 
 + public boolean isCompatibleWith ( AbstractType < ? > validator ) 
 + { 
 + return true ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / index / sasi / analyzer / NonTokenizingAnalyzer . java b / src / java / org / apache / cassandra / index / sasi / analyzer / NonTokenizingAnalyzer . java 
 index 676b304 . . 82084bc 100644 
 - - - a / src / java / org / apache / cassandra / index / sasi / analyzer / NonTokenizingAnalyzer . java 
 + + + b / src / java / org / apache / cassandra / index / sasi / analyzer / NonTokenizingAnalyzer . java 
 @ @ - 123 , 4 + 123 , 10 @ @ public class NonTokenizingAnalyzer extends AbstractAnalyzer 
 builder = builder . add ( " to _ lower " , new BasicResultFilters . LowerCase ( ) ) ; 
 return builder . build ( ) ; 
 } 
 + 
 + @ Override 
 + public boolean isCompatibleWith ( AbstractType < ? > validator ) 
 + { 
 + return VALID _ ANALYZABLE _ TYPES . contains ( validator ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / index / sasi / analyzer / StandardAnalyzer . java b / src / java / org / apache / cassandra / index / sasi / analyzer / StandardAnalyzer . java 
 index 3b58bf9 . . e1a4a44 100644 
 - - - a / src / java / org / apache / cassandra / index / sasi / analyzer / StandardAnalyzer . java 
 + + + b / src / java / org / apache / cassandra / index / sasi / analyzer / StandardAnalyzer . java 
 @ @ - 23 , 10 + 23 , 13 @ @ import java . io . InputStreamReader ; 
 import java . io . Reader ; 
 import java . nio . ByteBuffer ; 
 import java . nio . charset . StandardCharsets ; 
 + import java . util . HashSet ; 
 import java . util . Map ; 
 + import java . util . Set ; 
 
 import org . apache . cassandra . index . sasi . analyzer . filter . * ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 + import org . apache . cassandra . db . marshal . AsciiType ; 
 import org . apache . cassandra . db . marshal . UTF8Type ; 
 import org . apache . cassandra . io . util . DataInputBuffer ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 @ @ - 38 , 6 + 41 , 15 @ @ import com . carrotsearch . hppc . IntObjectOpenHashMap ; 
 
 public class StandardAnalyzer extends AbstractAnalyzer 
 { 
 + 
 + private static final Set < AbstractType < ? > > VALID _ ANALYZABLE _ TYPES = new HashSet < AbstractType < ? > > ( ) 
 + { 
 + { 
 + add ( UTF8Type . instance ) ; 
 + add ( AsciiType . instance ) ; 
 + } 
 + } ; 
 + 
 public enum TokenType 
 { 
 EOF ( - 1 ) , 
 @ @ - 198 , 4 + 210 , 10 @ @ public class StandardAnalyzer extends AbstractAnalyzer 
 { 
 return true ; 
 } 
 + 
 + @ Override 
 + public boolean isCompatibleWith ( AbstractType < ? > validator ) 
 + { 
 + return VALID _ ANALYZABLE _ TYPES . contains ( validator ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / index / sasi / conf / IndexMode . java b / src / java / org / apache / cassandra / index / sasi / conf / IndexMode . java 
 index c66dd02 . . 5709a0f 100644 
 - - - a / src / java / org / apache / cassandra / index / sasi / conf / IndexMode . java 
 + + + b / src / java / org / apache / cassandra / index / sasi / conf / IndexMode . java 
 @ @ - 93 , 20 + 93 , 36 @ @ public class IndexMode 
 return analyzer ; 
 } 
 
 - public static void validateAnalyzer ( Map < String , String > indexOptions ) throws ConfigurationException 
 + public static void validateAnalyzer ( Map < String , String > indexOptions , ColumnDefinition cd ) throws ConfigurationException 
 { 
 / / validate that a valid analyzer class was provided if specified 
 if ( indexOptions . containsKey ( INDEX _ ANALYZER _ CLASS _ OPTION ) ) 
 { 
 + Class < ? > analyzerClass ; 
 try 
 { 
 - Class . forName ( indexOptions . get ( INDEX _ ANALYZER _ CLASS _ OPTION ) ) ; 
 + analyzerClass = Class . forName ( indexOptions . get ( INDEX _ ANALYZER _ CLASS _ OPTION ) ) ; 
 } 
 catch ( ClassNotFoundException e ) 
 { 
 throw new ConfigurationException ( String . format ( " Invalid analyzer class option specified [ % s ] " , 
 indexOptions . get ( INDEX _ ANALYZER _ CLASS _ OPTION ) ) ) ; 
 } 
 + 
 + AbstractAnalyzer analyzer ; 
 + try 
 + { 
 + analyzer = ( AbstractAnalyzer ) analyzerClass . newInstance ( ) ; 
 + if ( ! analyzer . isCompatibleWith ( cd . type ) ) 
 + throw new ConfigurationException ( String . format ( " % s does not support type % s " , 
 + analyzerClass . getSimpleName ( ) , 
 + cd . type . asCQL3Type ( ) ) ) ; 
 + } 
 + catch ( InstantiationException | IllegalAccessException e ) 
 + { 
 + throw new ConfigurationException ( String . format ( " Unable to initialize analyzer class option specified [ % s ] " , 
 + analyzerClass . getSimpleName ( ) ) ) ; 
 + } 
 } 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java b / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java 
 index a57af61 . . 1579857 100644 
 - - - a / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java 
 + + + b / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java 
 @ @ - 31 , 10 + 31 , 12 @ @ import java . util . concurrent . Executors ; 
 import java . util . concurrent . ThreadLocalRandom ; 
 import java . util . concurrent . TimeUnit ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 + import java . util . stream . Collectors ; 
 
 import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . ColumnDefinition ; 
 + import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . index . Index ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . cql3 . * ; 
 @ @ - 55 , 6 + 57 , 11 @ @ import org . apache . cassandra . dht . Murmur3Partitioner ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . exceptions . InvalidRequestException ; 
 + import org . apache . cassandra . index . sasi . analyzer . AbstractAnalyzer ; 
 + import org . apache . cassandra . index . sasi . analyzer . DelimiterAnalyzer ; 
 + import org . apache . cassandra . index . sasi . analyzer . NoOpAnalyzer ; 
 + import org . apache . cassandra . index . sasi . analyzer . NonTokenizingAnalyzer ; 
 + import org . apache . cassandra . index . sasi . analyzer . StandardAnalyzer ; 
 import org . apache . cassandra . index . sasi . conf . ColumnIndex ; 
 import org . apache . cassandra . index . sasi . disk . OnDiskIndexBuilder ; 
 import org . apache . cassandra . index . sasi . exceptions . TimeQuotaExceededException ; 
 @ @ - 2411 , 6 + 2418 , 76 @ @ public class SASIIndexTest 
 Assert . assertEquals ( index . searchMemtable ( expression ) . getCount ( ) , 0 ) ; 
 } 
 
 + @ Test 
 + public void testAnalyzerValidation ( ) 
 + { 
 + final String TABLE _ NAME = " analyzer _ validation " ; 
 + QueryProcessor . executeOnceInternal ( String . format ( " CREATE TABLE % s . % s ( " + 
 + " pk text PRIMARY KEY , " + 
 + " ascii _ v ascii , " + 
 + " bigint _ v bigint , " + 
 + " blob _ v blob , " + 
 + " boolean _ v boolean , " + 
 + " date _ v date , " + 
 + " decimal _ v decimal , " + 
 + " double _ v double , " + 
 + " float _ v float , " + 
 + " inet _ v inet , " + 
 + " int _ v int , " + 
 + " smallint _ v smallint , " + 
 + " text _ v text , " + 
 + " time _ v time , " + 
 + " timestamp _ v timestamp , " + 
 + " timeuuid _ v timeuuid , " + 
 + " tinyint _ v tinyint , " + 
 + " uuid _ v uuid , " + 
 + " varchar _ v varchar , " + 
 + " varint _ v varint " + 
 + " ) ; " , 
 + KS _ NAME , 
 + TABLE _ NAME ) ) ; 
 + 
 + Columns regulars = Schema . instance . getCFMetaData ( KS _ NAME , TABLE _ NAME ) . partitionColumns ( ) . regulars ; 
 + List < String > allColumns = regulars . stream ( ) . map ( ColumnDefinition : : toString ) . collect ( Collectors . toList ( ) ) ; 
 + List < String > textColumns = Arrays . asList ( " text _ v " , " ascii _ v " , " varchar _ v " ) ; 
 + 
 + new HashMap < Class < ? extends AbstractAnalyzer > , List < String > > ( ) 
 + { { 
 + put ( StandardAnalyzer . class , textColumns ) ; 
 + put ( NonTokenizingAnalyzer . class , textColumns ) ; 
 + put ( DelimiterAnalyzer . class , textColumns ) ; 
 + put ( NoOpAnalyzer . class , allColumns ) ; 
 + } } 
 + . forEach ( ( analyzer , supportedColumns ) - > { 
 + for ( String column : allColumns ) 
 + { 
 + String query = String . format ( " CREATE CUSTOM INDEX ON % s . % s ( % s ) " + 
 + " USING ' org . apache . cassandra . index . sasi . SASIIndex ' " + 
 + " WITH OPTIONS = { ' analyzer _ class ' : ' % s ' , ' mode ' : ' PREFIX ' } ; " , 
 + KS _ NAME , TABLE _ NAME , column , analyzer . getName ( ) ) ; 
 + 
 + if ( supportedColumns . contains ( column ) ) 
 + { 
 + QueryProcessor . executeOnceInternal ( query ) ; 
 + } 
 + else 
 + { 
 + try 
 + { 
 + QueryProcessor . executeOnceInternal ( query ) ; 
 + Assert . fail ( " Expected ConfigurationException " ) ; 
 + } 
 + catch ( ConfigurationException e ) 
 + { 
 + / / expected 
 + Assert . assertTrue ( " Unexpected error message " + e . getMessage ( ) , 
 + e . getMessage ( ) . contains ( " does not support type " ) ) ; 
 + } 
 + } 
 + } 
 + } ) ; 
 + } 
 + 
 private static ColumnFamilyStore loadData ( Map < String , Pair < String , Integer > > data , boolean forceFlush ) 
 { 
 return loadData ( data , System . currentTimeMillis ( ) , forceFlush ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
