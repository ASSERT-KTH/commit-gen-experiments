BLEU SCORE: 0.05341087579952926

TEST MSG: merge from 2 . 0
GENERATED MSG: fix race referencing tokenMetadataCache

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 4c74ea9 . . b673918 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 19 , 6 + 19 , 8 @ @ <nl> <nl> <nl> 2 . 0 . 4 <nl> + * Fix assertion failure in filterColdSSTables ( CASSANDRA - 6483 ) <nl> + * Fix row tombstones in larger - than - memory compactions ( CASSANDRA - 6008 ) <nl> * Fix cleanup ClassCastException ( CASSANDRA - 6462 ) <nl> * Reduce gossip memory use by interning VersionedValue strings ( CASSANDRA - 6410 ) <nl> * Allow specifying datacenters to participate in a repair ( CASSANDRA - 6218 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> index 2988762 . . 14326f5 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> @ @ - 112 , 12 + 112 , 16 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy <nl> @ VisibleForTesting <nl> static List < SSTableReader > filterColdSSTables ( List < SSTableReader > sstables , double coldReadsToOmit ) <nl> { <nl> - / / sort the sstables by hotness ( coldest - first ) <nl> + if ( coldReadsToOmit = = 0 . 0 ) <nl> + return sstables ; <nl> + <nl> + / / Sort the sstables by hotness ( coldest - first ) . We first build a map because the hotness may change during the sort . <nl> + final Map < SSTableReader , Double > hotnessSnapshot = getHotnessMap ( sstables ) ; <nl> Collections . sort ( sstables , new Comparator < SSTableReader > ( ) <nl> { <nl> public int compare ( SSTableReader o1 , SSTableReader o2 ) <nl> { <nl> - int comparison = Double . compare ( hotness ( o1 ) , hotness ( o2 ) ) ; <nl> + int comparison = Double . compare ( hotnessSnapshot . get ( o1 ) , hotnessSnapshot . get ( o2 ) ) ; <nl> if ( comparison ! = 0 ) <nl> return comparison ; <nl> <nl> @ @ - 190 , 12 + 194 , 13 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy <nl> @ VisibleForTesting <nl> static Pair < List < SSTableReader > , Double > trimToThresholdWithHotness ( List < SSTableReader > bucket , int maxThreshold ) <nl> { <nl> - / / sort by sstable hotness ( descending ) <nl> + / / Sort by sstable hotness ( descending ) . We first build a map because the hotness may change during the sort . <nl> + final Map < SSTableReader , Double > hotnessSnapshot = getHotnessMap ( bucket ) ; <nl> Collections . sort ( bucket , new Comparator < SSTableReader > ( ) <nl> { <nl> public int compare ( SSTableReader o1 , SSTableReader o2 ) <nl> { <nl> - return - 1 * Double . compare ( hotness ( o1 ) , hotness ( o2 ) ) ; <nl> + return - 1 * Double . compare ( hotnessSnapshot . get ( o1 ) , hotnessSnapshot . get ( o2 ) ) ; <nl> } <nl> } ) ; <nl> <nl> @ @ - 210 , 6 + 215 , 14 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy <nl> return Pair . create ( prunedBucket , bucketHotness ) ; <nl> } <nl> <nl> + private static Map < SSTableReader , Double > getHotnessMap ( Collection < SSTableReader > sstables ) <nl> + { <nl> + Map < SSTableReader , Double > hotness = new HashMap < > ( ) ; <nl> + for ( SSTableReader sstable : sstables ) <nl> + hotness . put ( sstable , hotness ( sstable ) ) ; <nl> + return hotness ; <nl> + } <nl> + <nl> / * * <nl> * Returns the reads per second per key for this sstable , or 0 . 0 if the sstable has no read meter <nl> * /
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 4c74ea9 . . b673918 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 19 , 6 + 19 , 8 @ @ 
 
 
 2 . 0 . 4 
 + * Fix assertion failure in filterColdSSTables ( CASSANDRA - 6483 ) 
 + * Fix row tombstones in larger - than - memory compactions ( CASSANDRA - 6008 ) 
 * Fix cleanup ClassCastException ( CASSANDRA - 6462 ) 
 * Reduce gossip memory use by interning VersionedValue strings ( CASSANDRA - 6410 ) 
 * Allow specifying datacenters to participate in a repair ( CASSANDRA - 6218 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 index 2988762 . . 14326f5 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 @ @ - 112 , 12 + 112 , 16 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy 
 @ VisibleForTesting 
 static List < SSTableReader > filterColdSSTables ( List < SSTableReader > sstables , double coldReadsToOmit ) 
 { 
 - / / sort the sstables by hotness ( coldest - first ) 
 + if ( coldReadsToOmit = = 0 . 0 ) 
 + return sstables ; 
 + 
 + / / Sort the sstables by hotness ( coldest - first ) . We first build a map because the hotness may change during the sort . 
 + final Map < SSTableReader , Double > hotnessSnapshot = getHotnessMap ( sstables ) ; 
 Collections . sort ( sstables , new Comparator < SSTableReader > ( ) 
 { 
 public int compare ( SSTableReader o1 , SSTableReader o2 ) 
 { 
 - int comparison = Double . compare ( hotness ( o1 ) , hotness ( o2 ) ) ; 
 + int comparison = Double . compare ( hotnessSnapshot . get ( o1 ) , hotnessSnapshot . get ( o2 ) ) ; 
 if ( comparison ! = 0 ) 
 return comparison ; 
 
 @ @ - 190 , 12 + 194 , 13 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy 
 @ VisibleForTesting 
 static Pair < List < SSTableReader > , Double > trimToThresholdWithHotness ( List < SSTableReader > bucket , int maxThreshold ) 
 { 
 - / / sort by sstable hotness ( descending ) 
 + / / Sort by sstable hotness ( descending ) . We first build a map because the hotness may change during the sort . 
 + final Map < SSTableReader , Double > hotnessSnapshot = getHotnessMap ( bucket ) ; 
 Collections . sort ( bucket , new Comparator < SSTableReader > ( ) 
 { 
 public int compare ( SSTableReader o1 , SSTableReader o2 ) 
 { 
 - return - 1 * Double . compare ( hotness ( o1 ) , hotness ( o2 ) ) ; 
 + return - 1 * Double . compare ( hotnessSnapshot . get ( o1 ) , hotnessSnapshot . get ( o2 ) ) ; 
 } 
 } ) ; 
 
 @ @ - 210 , 6 + 215 , 14 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy 
 return Pair . create ( prunedBucket , bucketHotness ) ; 
 } 
 
 + private static Map < SSTableReader , Double > getHotnessMap ( Collection < SSTableReader > sstables ) 
 + { 
 + Map < SSTableReader , Double > hotness = new HashMap < > ( ) ; 
 + for ( SSTableReader sstable : sstables ) 
 + hotness . put ( sstable , hotness ( sstable ) ) ; 
 + return hotness ; 
 + } 
 + 
 / * * 
 * Returns the reads per second per key for this sstable , or 0 . 0 if the sstable has no read meter 
 * /

NEAREST DIFF:
ELIMINATEDSENTENCE
