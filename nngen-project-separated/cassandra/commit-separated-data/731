BLEU SCORE: 0.04573913556123801

TEST MSG: AssertionError with MVs on updating a row that isn ' t indexed due to a null value
GENERATED MSG: Issues with MVs caused by updateAffectsView and createForDeletionInfo

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 3c485dd . . 90f1ee9 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 9 <nl> + * AssertionError with MVs on updating a row that isn ' t indexed due to a null value ( CASSANDRA - 12247 ) <nl> * Disable RR and speculative retry with EACH _ QUORUM reads ( CASSANDRA - 11980 ) <nl> * Add option to override compaction space check ( CASSANDRA - 12180 ) <nl> * Faster startup by only scanning each directory for temporary files once ( CASSANDRA - 12114 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / view / ViewUpdateGenerator . java b / src / java / org / apache / cassandra / db / view / ViewUpdateGenerator . java <nl> index af025cb . . 3bdc380 100644 <nl> - - - a / src / java / org / apache / cassandra / db / view / ViewUpdateGenerator . java <nl> + + + b / src / java / org / apache / cassandra / db / view / ViewUpdateGenerator . java <nl> @ @ - 191 , 7 + 191 , 7 @ @ public class ViewUpdateGenerator <nl> <nl> / / If the update didn ' t modified this column , the cells will be the same object so it ' s worth checking <nl> if ( before = = after ) <nl> - return before = = null ? UpdateAction . NONE : UpdateAction . UPDATE _ EXISTING ; <nl> + return isLive ( before ) ? UpdateAction . UPDATE _ EXISTING : UpdateAction . NONE ; <nl> <nl> if ( ! isLive ( before ) ) <nl> return isLive ( after ) ? UpdateAction . NEW _ ENTRY : UpdateAction . NONE ; <nl> @ @ - 452 , 7 + 452 , 7 @ @ public class ViewUpdateGenerator <nl> <nl> ColumnDefinition baseColumn = view . baseNonPKColumnsInViewPK . get ( 0 ) ; <nl> Cell cell = baseRow . getCell ( baseColumn ) ; <nl> - assert isLive ( cell ) : " We shouldn ' t have got there is the base row had no associated entry " ; <nl> + assert isLive ( cell ) : " We shouldn ' t have got there if the base row had no associated entry " ; <nl> <nl> long timestamp = Math . max ( baseLiveness . timestamp ( ) , cell . timestamp ( ) ) ; <nl> return LivenessInfo . create ( timestamp , cell . ttl ( ) , cell . localDeletionTime ( ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / ViewTest . java b / test / unit / org / apache / cassandra / cql3 / ViewTest . java <nl> index 85f01a6 . . c9ef401 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / ViewTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / ViewTest . java <nl> @ @ - 1108 , 4 + 1108 , 33 @ @ public class ViewTest extends CQLTester <nl> } <nl> <nl> } <nl> + <nl> + @ Test <nl> + public void testNullInClusteringColumns ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( id1 int , id2 int , v1 text , v2 text , PRIMARY KEY ( id1 , id2 ) ) " ) ; <nl> + <nl> + executeNet ( protocolVersion , " USE " + keyspace ( ) ) ; <nl> + <nl> + createView ( " mv " , <nl> + " CREATE MATERIALIZED VIEW % s AS " + <nl> + " SELECT id1 , v1 , id2 , v2 " + <nl> + " FROM % % s " + <nl> + " WHERE id1 IS NOT NULL AND v1 IS NOT NULL AND id2 IS NOT NULL " + <nl> + " PRIMARY KEY ( id1 , v1 , id2 ) " + <nl> + " WITH CLUSTERING ORDER BY ( v1 DESC , id2 ASC ) " ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( id1 , id2 , v1 , v2 ) VALUES ( ? , ? , ? , ? ) " , 0 , 1 , " foo " , " bar " ) ; <nl> + <nl> + assertRowsNet ( protocolVersion , executeNet ( protocolVersion , " SELECT * FROM % s " ) , row ( 0 , 1 , " foo " , " bar " ) ) ; <nl> + assertRowsNet ( protocolVersion , executeNet ( protocolVersion , " SELECT * FROM mv " ) , row ( 0 , " foo " , 1 , " bar " ) ) ; <nl> + <nl> + executeNet ( protocolVersion , " UPDATE % s SET v1 = ? WHERE id1 = ? AND id2 = ? " , null , 0 , 1 ) ; <nl> + assertRowsNet ( protocolVersion , executeNet ( protocolVersion , " SELECT * FROM % s " ) , row ( 0 , 1 , null , " bar " ) ) ; <nl> + assertRowsNet ( protocolVersion , executeNet ( protocolVersion , " SELECT * FROM mv " ) ) ; <nl> + <nl> + executeNet ( protocolVersion , " UPDATE % s SET v2 = ? WHERE id1 = ? AND id2 = ? " , " rab " , 0 , 1 ) ; <nl> + assertRowsNet ( protocolVersion , executeNet ( protocolVersion , " SELECT * FROM % s " ) , row ( 0 , 1 , null , " rab " ) ) ; <nl> + assertRowsNet ( protocolVersion , executeNet ( protocolVersion , " SELECT * FROM mv " ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 3c485dd . . 90f1ee9 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 9 
 + * AssertionError with MVs on updating a row that isn ' t indexed due to a null value ( CASSANDRA - 12247 ) 
 * Disable RR and speculative retry with EACH _ QUORUM reads ( CASSANDRA - 11980 ) 
 * Add option to override compaction space check ( CASSANDRA - 12180 ) 
 * Faster startup by only scanning each directory for temporary files once ( CASSANDRA - 12114 ) 
 diff - - git a / src / java / org / apache / cassandra / db / view / ViewUpdateGenerator . java b / src / java / org / apache / cassandra / db / view / ViewUpdateGenerator . java 
 index af025cb . . 3bdc380 100644 
 - - - a / src / java / org / apache / cassandra / db / view / ViewUpdateGenerator . java 
 + + + b / src / java / org / apache / cassandra / db / view / ViewUpdateGenerator . java 
 @ @ - 191 , 7 + 191 , 7 @ @ public class ViewUpdateGenerator 
 
 / / If the update didn ' t modified this column , the cells will be the same object so it ' s worth checking 
 if ( before = = after ) 
 - return before = = null ? UpdateAction . NONE : UpdateAction . UPDATE _ EXISTING ; 
 + return isLive ( before ) ? UpdateAction . UPDATE _ EXISTING : UpdateAction . NONE ; 
 
 if ( ! isLive ( before ) ) 
 return isLive ( after ) ? UpdateAction . NEW _ ENTRY : UpdateAction . NONE ; 
 @ @ - 452 , 7 + 452 , 7 @ @ public class ViewUpdateGenerator 
 
 ColumnDefinition baseColumn = view . baseNonPKColumnsInViewPK . get ( 0 ) ; 
 Cell cell = baseRow . getCell ( baseColumn ) ; 
 - assert isLive ( cell ) : " We shouldn ' t have got there is the base row had no associated entry " ; 
 + assert isLive ( cell ) : " We shouldn ' t have got there if the base row had no associated entry " ; 
 
 long timestamp = Math . max ( baseLiveness . timestamp ( ) , cell . timestamp ( ) ) ; 
 return LivenessInfo . create ( timestamp , cell . ttl ( ) , cell . localDeletionTime ( ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / ViewTest . java b / test / unit / org / apache / cassandra / cql3 / ViewTest . java 
 index 85f01a6 . . c9ef401 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / ViewTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / ViewTest . java 
 @ @ - 1108 , 4 + 1108 , 33 @ @ public class ViewTest extends CQLTester 
 } 
 
 } 
 + 
 + @ Test 
 + public void testNullInClusteringColumns ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( id1 int , id2 int , v1 text , v2 text , PRIMARY KEY ( id1 , id2 ) ) " ) ; 
 + 
 + executeNet ( protocolVersion , " USE " + keyspace ( ) ) ; 
 + 
 + createView ( " mv " , 
 + " CREATE MATERIALIZED VIEW % s AS " + 
 + " SELECT id1 , v1 , id2 , v2 " + 
 + " FROM % % s " + 
 + " WHERE id1 IS NOT NULL AND v1 IS NOT NULL AND id2 IS NOT NULL " + 
 + " PRIMARY KEY ( id1 , v1 , id2 ) " + 
 + " WITH CLUSTERING ORDER BY ( v1 DESC , id2 ASC ) " ) ; 
 + 
 + execute ( " INSERT INTO % s ( id1 , id2 , v1 , v2 ) VALUES ( ? , ? , ? , ? ) " , 0 , 1 , " foo " , " bar " ) ; 
 + 
 + assertRowsNet ( protocolVersion , executeNet ( protocolVersion , " SELECT * FROM % s " ) , row ( 0 , 1 , " foo " , " bar " ) ) ; 
 + assertRowsNet ( protocolVersion , executeNet ( protocolVersion , " SELECT * FROM mv " ) , row ( 0 , " foo " , 1 , " bar " ) ) ; 
 + 
 + executeNet ( protocolVersion , " UPDATE % s SET v1 = ? WHERE id1 = ? AND id2 = ? " , null , 0 , 1 ) ; 
 + assertRowsNet ( protocolVersion , executeNet ( protocolVersion , " SELECT * FROM % s " ) , row ( 0 , 1 , null , " bar " ) ) ; 
 + assertRowsNet ( protocolVersion , executeNet ( protocolVersion , " SELECT * FROM mv " ) ) ; 
 + 
 + executeNet ( protocolVersion , " UPDATE % s SET v2 = ? WHERE id1 = ? AND id2 = ? " , " rab " , 0 , 1 ) ; 
 + assertRowsNet ( protocolVersion , executeNet ( protocolVersion , " SELECT * FROM % s " ) , row ( 0 , 1 , null , " rab " ) ) ; 
 + assertRowsNet ( protocolVersion , executeNet ( protocolVersion , " SELECT * FROM mv " ) ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
