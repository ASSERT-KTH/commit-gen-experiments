BLEU SCORE: 2.1255246500762245E-5

TEST MSG: Support encrypted and plain traffic on the same port
GENERATED MSG: Move startup code into CassandraDaemon . Drop stdout and stderr . Add hooks for jsvc , which allows more thorough daemonization ( such as dropping priviledges and setting process name ) . New startup script bin / casssandra provides out - of - the - box background mode without hacks like screen or nohup ; - f flag restores old foreground mode . Also - p < filename > to log pid . Patch by Eric Evans for # 20

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 0529dd8 . . 67e06ca 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 <nl> + * Support encrypted and plain traffic on the same port ( CASSANDRA - 10559 ) <nl> * Fix handling of range tombstones when reading old format sstables ( CASSANDRA - 10360 ) <nl> * Aggregate with Initial Condition fails with C * 3 . 0 ( CASSANDRA - 10367 ) <nl> Merged from 2 . 2 : <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index bf5149f . . fa9ea47 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 884 , 6 + 884 , 8 @ @ server _ encryption _ options : <nl> # enable or disable client / server encryption . <nl> client _ encryption _ options : <nl> enabled : false <nl> + # If enabled and optional is set to true encrypted and unencrypted connections are handled . <nl> + optional : false <nl> keystore : conf / . keystore <nl> keystore _ password : cassandra <nl> # require _ client _ auth : false <nl> diff - - git a / src / java / org / apache / cassandra / config / EncryptionOptions . java b / src / java / org / apache / cassandra / config / EncryptionOptions . java <nl> index 945a15b . . 31f8b4a 100644 <nl> - - - a / src / java / org / apache / cassandra / config / EncryptionOptions . java <nl> + + + b / src / java / org / apache / cassandra / config / EncryptionOptions . java <nl> @ @ - 36 , 6 + 36 , 7 @ @ public abstract class EncryptionOptions <nl> public static class ClientEncryptionOptions extends EncryptionOptions <nl> { <nl> public boolean enabled = false ; <nl> + public boolean optional = false ; <nl> } <nl> <nl> public static class ServerEncryptionOptions extends EncryptionOptions <nl> diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java <nl> index a3cefcd . . b786436 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Server . java <nl> + + + b / src / java / org / apache / cassandra / transport / Server . java <nl> @ @ - 33 , 9 + 33 , 11 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import io . netty . bootstrap . ServerBootstrap ; <nl> + import io . netty . buffer . ByteBuf ; <nl> import io . netty . channel . * ; <nl> import io . netty . channel . epoll . EpollEventLoopGroup ; <nl> import io . netty . channel . epoll . EpollServerSocketChannel ; <nl> + import io . netty . handler . codec . ByteToMessageDecoder ; <nl> import io . netty . channel . group . ChannelGroup ; <nl> import io . netty . channel . group . DefaultChannelGroup ; <nl> import io . netty . channel . nio . NioEventLoopGroup ; <nl> @ @ - 139 , 8 + 141 , 16 @ @ public class Server implements CassandraDaemon . Server <nl> final EncryptionOptions . ClientEncryptionOptions clientEnc = DatabaseDescriptor . getClientEncryptionOptions ( ) ; <nl> if ( this . useSSL ) <nl> { <nl> - logger . info ( " Enabling encrypted CQL connections between client and server " ) ; <nl> - bootstrap . childHandler ( new SecureInitializer ( this , clientEnc ) ) ; <nl> + if ( clientEnc . optional ) <nl> + { <nl> + logger . info ( " Enabling optionally encrypted CQL connections between client and server " ) ; <nl> + bootstrap . childHandler ( new OptionalSecureInitializer ( this , clientEnc ) ) ; <nl> + } <nl> + else <nl> + { <nl> + logger . info ( " Enabling encrypted CQL connections between client and server " ) ; <nl> + bootstrap . childHandler ( new SecureInitializer ( this , clientEnc ) ) ; <nl> + } <nl> } <nl> else <nl> { <nl> @ @ - 326 , 12 + 336 , 12 @ @ public class Server implements CassandraDaemon . Server <nl> } <nl> } <nl> <nl> - private static class SecureInitializer extends Initializer <nl> + protected abstract static class AbstractSecureIntializer extends Initializer <nl> { <nl> private final SSLContext sslContext ; <nl> private final EncryptionOptions encryptionOptions ; <nl> <nl> - public SecureInitializer ( Server server , EncryptionOptions encryptionOptions ) <nl> + protected AbstractSecureIntializer ( Server server , EncryptionOptions encryptionOptions ) <nl> { <nl> super ( server ) ; <nl> this . encryptionOptions = encryptionOptions ; <nl> @ @ - 345 , 14 + 355 , 65 @ @ public class Server implements CassandraDaemon . Server <nl> } <nl> } <nl> <nl> - protected void initChannel ( Channel channel ) throws Exception <nl> - { <nl> + protected final SslHandler createSslHandler ( ) { <nl> SSLEngine sslEngine = sslContext . createSSLEngine ( ) ; <nl> sslEngine . setUseClientMode ( false ) ; <nl> sslEngine . setEnabledCipherSuites ( encryptionOptions . cipher _ suites ) ; <nl> sslEngine . setNeedClientAuth ( encryptionOptions . require _ client _ auth ) ; <nl> sslEngine . setEnabledProtocols ( SSLFactory . ACCEPTED _ PROTOCOLS ) ; <nl> - SslHandler sslHandler = new SslHandler ( sslEngine ) ; <nl> + return new SslHandler ( sslEngine ) ; <nl> + } <nl> + } <nl> + <nl> + private static class OptionalSecureInitializer extends AbstractSecureIntializer <nl> + { <nl> + public OptionalSecureInitializer ( Server server , EncryptionOptions encryptionOptions ) <nl> + { <nl> + super ( server , encryptionOptions ) ; <nl> + } <nl> + <nl> + protected void initChannel ( final Channel channel ) throws Exception <nl> + { <nl> + super . initChannel ( channel ) ; <nl> + channel . pipeline ( ) . addFirst ( " sslDetectionHandler " , new ByteToMessageDecoder ( ) <nl> + { <nl> + @ Override <nl> + protected void decode ( ChannelHandlerContext channelHandlerContext , ByteBuf byteBuf , List < Object > list ) throws Exception <nl> + { <nl> + if ( byteBuf . readableBytes ( ) < 5 ) <nl> + { <nl> + / / To detect if SSL must be used we need to have at least 5 bytes , so return here and try again <nl> + / / once more bytes a ready . <nl> + return ; <nl> + } <nl> + if ( SslHandler . isEncrypted ( byteBuf ) ) <nl> + { <nl> + / / Connection uses SSL / TLS , replace the detection handler with a SslHandler and so use <nl> + / / encryption . <nl> + SslHandler sslHandler = createSslHandler ( ) ; <nl> + channelHandlerContext . pipeline ( ) . replace ( this , " ssl " , sslHandler ) ; <nl> + } <nl> + else <nl> + { <nl> + / / Connection use no TLS / SSL encryption , just remove the detection handler and continue without <nl> + / / SslHandler in the pipeline . <nl> + channelHandlerContext . pipeline ( ) . remove ( this ) ; <nl> + } <nl> + } <nl> + } ) ; <nl> + } <nl> + } <nl> + <nl> + private static class SecureInitializer extends AbstractSecureIntializer <nl> + { <nl> + public SecureInitializer ( Server server , EncryptionOptions encryptionOptions ) <nl> + { <nl> + super ( server , encryptionOptions ) ; <nl> + } <nl> + <nl> + protected void initChannel ( Channel channel ) throws Exception <nl> + { <nl> + SslHandler sslHandler = createSslHandler ( ) ; <nl> super . initChannel ( channel ) ; <nl> channel . pipeline ( ) . addFirst ( " ssl " , sslHandler ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / service / NativeTransportServiceTest . java b / test / unit / org / apache / cassandra / service / NativeTransportServiceTest . java <nl> index 7eb664f . . d0e291a 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / NativeTransportServiceTest . java <nl> + + + b / test / unit / org / apache / cassandra / service / NativeTransportServiceTest . java <nl> @ @ - 123 , 6 + 123 , 24 @ @ public class NativeTransportServiceTest <nl> { <nl> / / default ssl settings : client encryption enabled and default native transport port used for ssl only <nl> DatabaseDescriptor . getClientEncryptionOptions ( ) . enabled = true ; <nl> + DatabaseDescriptor . getClientEncryptionOptions ( ) . optional = false ; <nl> + <nl> + withService ( ( NativeTransportService service ) - > <nl> + { <nl> + service . initialize ( ) ; <nl> + assertEquals ( 1 , service . getServers ( ) . size ( ) ) ; <nl> + Server server = service . getServers ( ) . iterator ( ) . next ( ) ; <nl> + assertTrue ( server . useSSL ) ; <nl> + assertEquals ( server . socket . getPort ( ) , DatabaseDescriptor . getNativeTransportPort ( ) ) ; <nl> + } , false , 1 ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSSLOptional ( ) <nl> + { <nl> + / / default ssl settings : client encryption enabled and default native transport port used for optional ssl <nl> + DatabaseDescriptor . getClientEncryptionOptions ( ) . enabled = true ; <nl> + DatabaseDescriptor . getClientEncryptionOptions ( ) . optional = true ; <nl> <nl> withService ( ( NativeTransportService service ) - > <nl> {
NEAREST DIFF (one line): diff - - git a / bin / start - server b / bin / start - server <nl> deleted file mode 100755 <nl> index 7acbe1c . . 0000000 <nl> - - - a / bin / start - server <nl> + + + / dev / null <nl> @ @ - 1 , 32 + 0 , 0 @ @ <nl> - # ! / usr / bin / env bash <nl> - bin = ` dirname " $ 0 " ` <nl> - bin = ` cd " $ bin " ; pwd ` <nl> - <nl> - confpath = " $ bin / . . / conf " <nl> - cygwin = false <nl> - case " ` uname ` " in <nl> - CYGWIN * ) cygwin = true ; ; <nl> - esac <nl> - <nl> - <nl> - # CLASSPATH initially contains cassandra jar <nl> - CLASSPATH = " $ bin / . . / build / cassandra . jar " <nl> - <nl> - # add libs to CLASSPATH <nl> - for f in $ bin / . . / lib / * . jar ; do <nl> - CLASSPATH = $ { CLASSPATH } : $ f ; <nl> - done <nl> - <nl> - CLASSPATH = conf : $ { CLASSPATH } ; <nl> - <nl> - # cygwin path translation <nl> - if $ cygwin ; then <nl> - echo " in cygwin " <nl> - echo $ CLASSPATH <nl> - CLASSPATH = ` cygpath - p - w " $ CLASSPATH " ` <nl> - confpath = ` cygpath - p - w " $ confpath " ` <nl> - fi <nl> - <nl> - <nl> - # run it <nl> - java - Xdebug - Xrunjdwp : transport = dt _ socket , server = y , address = 8888 , suspend = n - Xms128M - Xmx2G - XX : SurvivorRatio = 8 - XX : TargetSurvivorRatio = 90 - XX : + AggressiveOpts - XX : + UseParNewGC - XX : + UseConcMarkSweepGC - XX : CMSInitiatingOccupancyFraction = 1 - XX : + CMSParallelRemarkEnabled - XX : + HeapDumpOnOutOfMemoryError - Dcom . sun . management . jmxremote . port = 8080 - Dcom . sun . management . jmxremote . ssl = false - Dcom . sun . management . jmxremote . authenticate = false - Dcassandra - Dstorage - config = " $ confpath " - cp " $ CLASSPATH " org . apache . cassandra . service . CassandraServer & <nl> diff - - git a / bin / stop - server b / bin / stop - server <nl> index 0490123 . . fd6be0f 100755 <nl> - - - a / bin / stop - server <nl> + + + b / bin / stop - server <nl> @ @ - 1 , 2 + 1 , 14 @ @ <nl> - user = ` whoami ` <nl> - pgrep - u $ user - f cassandra | xargs kill - 9 <nl> + echo " please read the stop - server script before use " <nl> + <nl> + # if you are using the cassandra start script with - p , this <nl> + # is the best way to stop : <nl> + <nl> + # kill ` cat < pidfile > ` <nl> + <nl> + <nl> + # otherwise , you can run something like this , but <nl> + # this is a shotgun approach and will kill other processes <nl> + # with cassandra in their name or arguments too : <nl> + <nl> + # user = ` whoami ` <nl> + # pgrep - u $ user - f cassandra | xargs kill <nl> diff - - git a / src / org / apache / cassandra / db / DBManager . java b / src / org / apache / cassandra / db / DBManager . java <nl> index 7a9c642 . . 53cb170 100644 <nl> - - - a / src / org / apache / cassandra / db / DBManager . java <nl> + + + b / src / org / apache / cassandra / db / DBManager . java <nl> @ @ - 44 , 7 + 44 , 7 @ @ public class DBManager <nl> private static DBManager dbMgr _ ; <nl> private static Lock lock _ = new ReentrantLock ( ) ; <nl> <nl> - public static DBManager instance ( ) throws Throwable <nl> + public static DBManager instance ( ) throws IOException <nl> { <nl> if ( dbMgr _ = = null ) <nl> { <nl> @ @ - 89 , 7 + 89 , 7 @ @ public class DBManager <nl> } <nl> } <nl> <nl> - public DBManager ( ) throws Throwable <nl> + public DBManager ( ) throws IOException <nl> { <nl> Set < String > tables = DatabaseDescriptor . getTableToColumnFamilyMap ( ) . keySet ( ) ; <nl> <nl> diff - - git a / src / org / apache / cassandra / service / CassandraDaemon . java b / src / org / apache / cassandra / service / CassandraDaemon . java <nl> new file mode 100644 <nl> index 0000000 . . 4a95dab <nl> - - - / dev / null <nl> + + + b / src / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 0 , 0 + 1 , 137 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> + import org . apache . log4j . Logger ; <nl> + import com . facebook . thrift . protocol . TBinaryProtocol ; <nl> + import com . facebook . thrift . protocol . TProtocolFactory ; <nl> + import com . facebook . thrift . server . TThreadPoolServer ; <nl> + import com . facebook . thrift . transport . TServerSocket ; <nl> + import com . facebook . thrift . transport . TTransportException ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + <nl> + / * * <nl> + * This class supports two methods for creating a Cassandra node daemon , <nl> + * invoking the class ' s main method , and using the jsvc wrapper from <nl> + * commons - daemon , ( for more information on using this class with the <nl> + * jsvc wrapper , see the <nl> + * < a href = " http : / / commons . apache . org / daemon / jsvc . html " > Commons Daemon < / a > <nl> + * documentation ) . <nl> + * <nl> + * @ author Eric Evans < eevans @ racklabs . com > <nl> + * <nl> + * / <nl> + <nl> + public class CassandraDaemon <nl> + { <nl> + private static Logger logger = Logger . getLogger ( CassandraDaemon . class ) ; <nl> + private TThreadPoolServer serverEngine ; <nl> + <nl> + private void setup ( ) throws IOException , TTransportException <nl> + { <nl> + int listenPort = DatabaseDescriptor . getThriftPort ( ) ; <nl> + <nl> + Thread . setDefaultUncaughtExceptionHandler ( new Thread . UncaughtExceptionHandler ( ) <nl> + { <nl> + public void uncaughtException ( Thread t , Throwable e ) <nl> + { <nl> + logger . error ( " Fatal exception in thread " + t , e ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + CassandraServer peerStorageServer = new CassandraServer ( ) ; <nl> + peerStorageServer . start ( ) ; <nl> + Cassandra . Processor processor = new Cassandra . Processor ( peerStorageServer ) ; <nl> + <nl> + / / Transport <nl> + TServerSocket tServerSocket = new TServerSocket ( listenPort ) ; <nl> + <nl> + / / Protocol factory <nl> + TProtocolFactory tProtocolFactory = new TBinaryProtocol . Factory ( ) ; <nl> + <nl> + / / ThreadPool Server <nl> + TThreadPoolServer . Options options = new TThreadPoolServer . Options ( ) ; <nl> + options . minWorkerThreads = 64 ; <nl> + serverEngine = new TThreadPoolServer ( processor , tServerSocket , tProtocolFactory ) ; <nl> + } <nl> + <nl> + / * * hook for JSVC * / <nl> + public void load ( String [ ] args ) throws IOException , TTransportException <nl> + { <nl> + setup ( ) ; <nl> + } <nl> + <nl> + / * * hook for JSVC * / <nl> + public void start ( ) <nl> + { <nl> + logger . info ( " Cassandra starting up . . . " ) ; <nl> + serverEngine . serve ( ) ; <nl> + } <nl> + <nl> + / * * hook for JSVC * / <nl> + public void stop ( ) <nl> + { <nl> + logger . info ( " Cassandra shutting down . . . " ) ; <nl> + serverEngine . stop ( ) ; <nl> + } <nl> + <nl> + <nl> + / * * hook for JSVC * / <nl> + public void destroy ( ) <nl> + { <nl> + } <nl> + <nl> + public static void main ( String [ ] args ) <nl> + { <nl> + CassandraDaemon daemon = new CassandraDaemon ( ) ; <nl> + String pidFile = System . getProperty ( " cassandra - pidfile " ) ; <nl> + <nl> + try <nl> + { <nl> + daemon . setup ( ) ; <nl> + <nl> + if ( pidFile ! = null ) <nl> + { <nl> + new File ( pidFile ) . deleteOnExit ( ) ; <nl> + } <nl> + <nl> + if ( System . getProperty ( " cassandra - foreground " ) = = null ) <nl> + { <nl> + System . out . close ( ) ; <nl> + System . err . close ( ) ; <nl> + } <nl> + <nl> + daemon . start ( ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + String msg = " Exception encountered during startup . " ; <nl> + logger . error ( msg , e ) ; <nl> + <nl> + / / try to warn user on stdout too , if we haven ' t already detached <nl> + System . out . println ( msg ) ; <nl> + e . printStackTrace ( ) ; <nl> + <nl> + System . exit ( 3 ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / org / apache / cassandra / service / CassandraServer . java b / src / org / apache / cassandra / service / CassandraServer . java <nl> index 0d6c814 . . 3bf83a1 100644 <nl> - - - a / src / org / apache / cassandra / service / CassandraServer . java <nl> + + + b / src / org / apache / cassandra / service / CassandraServer . java <nl> @ @ - 90 , 7 + 90 , 7 @ @ public class CassandraServer extends FacebookBase implements Cassandra . Iface <nl> 	 * The start function initializes the server and start ' s listening on the <nl> 	 * specified port . <nl> 	 * / <nl> - 	 public void start ( ) throws Throwable <nl> + 	 public void start ( ) throws IOException <nl> { <nl> 	 	 LogUtil . init ( ) ; <nl> 	 	 / / LogUtil . setLogLevel ( " com . facebook " , " DEBUG " ) ; <nl> @ @ - 850 , 42 + 850 , 5 @ @ public class CassandraServer extends FacebookBase implements Cassandra . Iface <nl> 	 	 return null ; <nl> 	 } <nl> <nl> - 	 public static void main ( String [ ] args ) throws Throwable <nl> - 	 { <nl> - 	 	 int port = DatabaseDescriptor . getThriftPort ( ) ; <nl> - <nl> - Thread . setDefaultUncaughtExceptionHandler ( new Thread . UncaughtExceptionHandler ( ) <nl> - { <nl> - public void uncaughtException ( Thread t , Throwable e ) <nl> - { <nl> - logger _ . error ( " Fatal exception in thread " + t , e ) ; <nl> - } <nl> - } ) ; <nl> - <nl> - 	 	 try <nl> - 	 	 { <nl> - 	 	 	 CassandraServer peerStorageServer = new CassandraServer ( ) ; <nl> - 	 	 	 peerStorageServer . start ( ) ; <nl> - 	 	 	 Cassandra . Processor processor = new Cassandra . Processor ( <nl> - 	 	 	 	 	 peerStorageServer ) ; <nl> - 	 	 	 / / Transport <nl> - 	 	 	 TServerSocket tServerSocket = new TServerSocket ( port ) ; <nl> - 	 	 	 / / Protocol factory <nl> - 	 	 	 TProtocolFactory tProtocolFactory = new TBinaryProtocol . Factory ( ) ; <nl> - 	 	 	 / / ThreadPool Server <nl> - 	 	 	 Options options = new Options ( ) ; <nl> - 	 	 	 options . minWorkerThreads = 64 ; <nl> - 	 	 	 TThreadPoolServer serverEngine = new TThreadPoolServer ( processor , tServerSocket , tProtocolFactory ) ; <nl> - 	 	 	 serverEngine . serve ( ) ; <nl> - <nl> - 	 	 } <nl> - 	 	 catch ( Exception x ) <nl> - 	 	 { <nl> - 	 	 	 System . err . println ( " UNCAUGHT EXCEPTION IN main ( ) " ) ; <nl> - 	 	 	 x . printStackTrace ( ) ; <nl> - 	 	 	 System . exit ( 1 ) ; <nl> - 	 	 } <nl> - <nl> - 	 } <nl> - <nl> + / / main method moved to CassandraDaemon <nl> } <nl> diff - - git a / src / org / apache / cassandra / service / StorageService . java b / src / org / apache / cassandra / service / StorageService . java <nl> index b5e00c9 . . 2f6a018 100644 <nl> - - - a / src / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / org / apache / cassandra / service / StorageService . java <nl> @ @ - 448 , 7 + 448 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> } <nl> } <nl> <nl> - public void start ( ) throws Throwable <nl> + public void start ( ) throws IOException <nl> { <nl> / * Start the DB * / <nl> storageMetadata _ = DBManager . instance ( ) . start ( ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0529dd8 . . 67e06ca 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 
 + * Support encrypted and plain traffic on the same port ( CASSANDRA - 10559 ) 
 * Fix handling of range tombstones when reading old format sstables ( CASSANDRA - 10360 ) 
 * Aggregate with Initial Condition fails with C * 3 . 0 ( CASSANDRA - 10367 ) 
 Merged from 2 . 2 : 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index bf5149f . . fa9ea47 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 884 , 6 + 884 , 8 @ @ server _ encryption _ options : 
 # enable or disable client / server encryption . 
 client _ encryption _ options : 
 enabled : false 
 + # If enabled and optional is set to true encrypted and unencrypted connections are handled . 
 + optional : false 
 keystore : conf / . keystore 
 keystore _ password : cassandra 
 # require _ client _ auth : false 
 diff - - git a / src / java / org / apache / cassandra / config / EncryptionOptions . java b / src / java / org / apache / cassandra / config / EncryptionOptions . java 
 index 945a15b . . 31f8b4a 100644 
 - - - a / src / java / org / apache / cassandra / config / EncryptionOptions . java 
 + + + b / src / java / org / apache / cassandra / config / EncryptionOptions . java 
 @ @ - 36 , 6 + 36 , 7 @ @ public abstract class EncryptionOptions 
 public static class ClientEncryptionOptions extends EncryptionOptions 
 { 
 public boolean enabled = false ; 
 + public boolean optional = false ; 
 } 
 
 public static class ServerEncryptionOptions extends EncryptionOptions 
 diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java 
 index a3cefcd . . b786436 100644 
 - - - a / src / java / org / apache / cassandra / transport / Server . java 
 + + + b / src / java / org / apache / cassandra / transport / Server . java 
 @ @ - 33 , 9 + 33 , 11 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import io . netty . bootstrap . ServerBootstrap ; 
 + import io . netty . buffer . ByteBuf ; 
 import io . netty . channel . * ; 
 import io . netty . channel . epoll . EpollEventLoopGroup ; 
 import io . netty . channel . epoll . EpollServerSocketChannel ; 
 + import io . netty . handler . codec . ByteToMessageDecoder ; 
 import io . netty . channel . group . ChannelGroup ; 
 import io . netty . channel . group . DefaultChannelGroup ; 
 import io . netty . channel . nio . NioEventLoopGroup ; 
 @ @ - 139 , 8 + 141 , 16 @ @ public class Server implements CassandraDaemon . Server 
 final EncryptionOptions . ClientEncryptionOptions clientEnc = DatabaseDescriptor . getClientEncryptionOptions ( ) ; 
 if ( this . useSSL ) 
 { 
 - logger . info ( " Enabling encrypted CQL connections between client and server " ) ; 
 - bootstrap . childHandler ( new SecureInitializer ( this , clientEnc ) ) ; 
 + if ( clientEnc . optional ) 
 + { 
 + logger . info ( " Enabling optionally encrypted CQL connections between client and server " ) ; 
 + bootstrap . childHandler ( new OptionalSecureInitializer ( this , clientEnc ) ) ; 
 + } 
 + else 
 + { 
 + logger . info ( " Enabling encrypted CQL connections between client and server " ) ; 
 + bootstrap . childHandler ( new SecureInitializer ( this , clientEnc ) ) ; 
 + } 
 } 
 else 
 { 
 @ @ - 326 , 12 + 336 , 12 @ @ public class Server implements CassandraDaemon . Server 
 } 
 } 
 
 - private static class SecureInitializer extends Initializer 
 + protected abstract static class AbstractSecureIntializer extends Initializer 
 { 
 private final SSLContext sslContext ; 
 private final EncryptionOptions encryptionOptions ; 
 
 - public SecureInitializer ( Server server , EncryptionOptions encryptionOptions ) 
 + protected AbstractSecureIntializer ( Server server , EncryptionOptions encryptionOptions ) 
 { 
 super ( server ) ; 
 this . encryptionOptions = encryptionOptions ; 
 @ @ - 345 , 14 + 355 , 65 @ @ public class Server implements CassandraDaemon . Server 
 } 
 } 
 
 - protected void initChannel ( Channel channel ) throws Exception 
 - { 
 + protected final SslHandler createSslHandler ( ) { 
 SSLEngine sslEngine = sslContext . createSSLEngine ( ) ; 
 sslEngine . setUseClientMode ( false ) ; 
 sslEngine . setEnabledCipherSuites ( encryptionOptions . cipher _ suites ) ; 
 sslEngine . setNeedClientAuth ( encryptionOptions . require _ client _ auth ) ; 
 sslEngine . setEnabledProtocols ( SSLFactory . ACCEPTED _ PROTOCOLS ) ; 
 - SslHandler sslHandler = new SslHandler ( sslEngine ) ; 
 + return new SslHandler ( sslEngine ) ; 
 + } 
 + } 
 + 
 + private static class OptionalSecureInitializer extends AbstractSecureIntializer 
 + { 
 + public OptionalSecureInitializer ( Server server , EncryptionOptions encryptionOptions ) 
 + { 
 + super ( server , encryptionOptions ) ; 
 + } 
 + 
 + protected void initChannel ( final Channel channel ) throws Exception 
 + { 
 + super . initChannel ( channel ) ; 
 + channel . pipeline ( ) . addFirst ( " sslDetectionHandler " , new ByteToMessageDecoder ( ) 
 + { 
 + @ Override 
 + protected void decode ( ChannelHandlerContext channelHandlerContext , ByteBuf byteBuf , List < Object > list ) throws Exception 
 + { 
 + if ( byteBuf . readableBytes ( ) < 5 ) 
 + { 
 + / / To detect if SSL must be used we need to have at least 5 bytes , so return here and try again 
 + / / once more bytes a ready . 
 + return ; 
 + } 
 + if ( SslHandler . isEncrypted ( byteBuf ) ) 
 + { 
 + / / Connection uses SSL / TLS , replace the detection handler with a SslHandler and so use 
 + / / encryption . 
 + SslHandler sslHandler = createSslHandler ( ) ; 
 + channelHandlerContext . pipeline ( ) . replace ( this , " ssl " , sslHandler ) ; 
 + } 
 + else 
 + { 
 + / / Connection use no TLS / SSL encryption , just remove the detection handler and continue without 
 + / / SslHandler in the pipeline . 
 + channelHandlerContext . pipeline ( ) . remove ( this ) ; 
 + } 
 + } 
 + } ) ; 
 + } 
 + } 
 + 
 + private static class SecureInitializer extends AbstractSecureIntializer 
 + { 
 + public SecureInitializer ( Server server , EncryptionOptions encryptionOptions ) 
 + { 
 + super ( server , encryptionOptions ) ; 
 + } 
 + 
 + protected void initChannel ( Channel channel ) throws Exception 
 + { 
 + SslHandler sslHandler = createSslHandler ( ) ; 
 super . initChannel ( channel ) ; 
 channel . pipeline ( ) . addFirst ( " ssl " , sslHandler ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / service / NativeTransportServiceTest . java b / test / unit / org / apache / cassandra / service / NativeTransportServiceTest . java 
 index 7eb664f . . d0e291a 100644 
 - - - a / test / unit / org / apache / cassandra / service / NativeTransportServiceTest . java 
 + + + b / test / unit / org / apache / cassandra / service / NativeTransportServiceTest . java 
 @ @ - 123 , 6 + 123 , 24 @ @ public class NativeTransportServiceTest 
 { 
 / / default ssl settings : client encryption enabled and default native transport port used for ssl only 
 DatabaseDescriptor . getClientEncryptionOptions ( ) . enabled = true ; 
 + DatabaseDescriptor . getClientEncryptionOptions ( ) . optional = false ; 
 + 
 + withService ( ( NativeTransportService service ) - > 
 + { 
 + service . initialize ( ) ; 
 + assertEquals ( 1 , service . getServers ( ) . size ( ) ) ; 
 + Server server = service . getServers ( ) . iterator ( ) . next ( ) ; 
 + assertTrue ( server . useSSL ) ; 
 + assertEquals ( server . socket . getPort ( ) , DatabaseDescriptor . getNativeTransportPort ( ) ) ; 
 + } , false , 1 ) ; 
 + } 
 + 
 + @ Test 
 + public void testSSLOptional ( ) 
 + { 
 + / / default ssl settings : client encryption enabled and default native transport port used for optional ssl 
 + DatabaseDescriptor . getClientEncryptionOptions ( ) . enabled = true ; 
 + DatabaseDescriptor . getClientEncryptionOptions ( ) . optional = true ; 
 
 withService ( ( NativeTransportService service ) - > 
 {

NEAREST DIFF:
diff - - git a / bin / start - server b / bin / start - server 
 deleted file mode 100755 
 index 7acbe1c . . 0000000 
 - - - a / bin / start - server 
 + + + / dev / null 
 @ @ - 1 , 32 + 0 , 0 @ @ 
 - # ! / usr / bin / env bash 
 - bin = ` dirname " $ 0 " ` 
 - bin = ` cd " $ bin " ; pwd ` 
 - 
 - confpath = " $ bin / . . / conf " 
 - cygwin = false 
 - case " ` uname ` " in 
 - CYGWIN * ) cygwin = true ; ; 
 - esac 
 - 
 - 
 - # CLASSPATH initially contains cassandra jar 
 - CLASSPATH = " $ bin / . . / build / cassandra . jar " 
 - 
 - # add libs to CLASSPATH 
 - for f in $ bin / . . / lib / * . jar ; do 
 - CLASSPATH = $ { CLASSPATH } : $ f ; 
 - done 
 - 
 - CLASSPATH = conf : $ { CLASSPATH } ; 
 - 
 - # cygwin path translation 
 - if $ cygwin ; then 
 - echo " in cygwin " 
 - echo $ CLASSPATH 
 - CLASSPATH = ` cygpath - p - w " $ CLASSPATH " ` 
 - confpath = ` cygpath - p - w " $ confpath " ` 
 - fi 
 - 
 - 
 - # run it 
 - java - Xdebug - Xrunjdwp : transport = dt _ socket , server = y , address = 8888 , suspend = n - Xms128M - Xmx2G - XX : SurvivorRatio = 8 - XX : TargetSurvivorRatio = 90 - XX : + AggressiveOpts - XX : + UseParNewGC - XX : + UseConcMarkSweepGC - XX : CMSInitiatingOccupancyFraction = 1 - XX : + CMSParallelRemarkEnabled - XX : + HeapDumpOnOutOfMemoryError - Dcom . sun . management . jmxremote . port = 8080 - Dcom . sun . management . jmxremote . ssl = false - Dcom . sun . management . jmxremote . authenticate = false - Dcassandra - Dstorage - config = " $ confpath " - cp " $ CLASSPATH " org . apache . cassandra . service . CassandraServer & 
 diff - - git a / bin / stop - server b / bin / stop - server 
 index 0490123 . . fd6be0f 100755 
 - - - a / bin / stop - server 
 + + + b / bin / stop - server 
 @ @ - 1 , 2 + 1 , 14 @ @ 
 - user = ` whoami ` 
 - pgrep - u $ user - f cassandra | xargs kill - 9 
 + echo " please read the stop - server script before use " 
 + 
 + # if you are using the cassandra start script with - p , this 
 + # is the best way to stop : 
 + 
 + # kill ` cat < pidfile > ` 
 + 
 + 
 + # otherwise , you can run something like this , but 
 + # this is a shotgun approach and will kill other processes 
 + # with cassandra in their name or arguments too : 
 + 
 + # user = ` whoami ` 
 + # pgrep - u $ user - f cassandra | xargs kill 
 diff - - git a / src / org / apache / cassandra / db / DBManager . java b / src / org / apache / cassandra / db / DBManager . java 
 index 7a9c642 . . 53cb170 100644 
 - - - a / src / org / apache / cassandra / db / DBManager . java 
 + + + b / src / org / apache / cassandra / db / DBManager . java 
 @ @ - 44 , 7 + 44 , 7 @ @ public class DBManager 
 private static DBManager dbMgr _ ; 
 private static Lock lock _ = new ReentrantLock ( ) ; 
 
 - public static DBManager instance ( ) throws Throwable 
 + public static DBManager instance ( ) throws IOException 
 { 
 if ( dbMgr _ = = null ) 
 { 
 @ @ - 89 , 7 + 89 , 7 @ @ public class DBManager 
 } 
 } 
 
 - public DBManager ( ) throws Throwable 
 + public DBManager ( ) throws IOException 
 { 
 Set < String > tables = DatabaseDescriptor . getTableToColumnFamilyMap ( ) . keySet ( ) ; 
 
 diff - - git a / src / org / apache / cassandra / service / CassandraDaemon . java b / src / org / apache / cassandra / service / CassandraDaemon . java 
 new file mode 100644 
 index 0000000 . . 4a95dab 
 - - - / dev / null 
 + + + b / src / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 0 , 0 + 1 , 137 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . service ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 + import org . apache . log4j . Logger ; 
 + import com . facebook . thrift . protocol . TBinaryProtocol ; 
 + import com . facebook . thrift . protocol . TProtocolFactory ; 
 + import com . facebook . thrift . server . TThreadPoolServer ; 
 + import com . facebook . thrift . transport . TServerSocket ; 
 + import com . facebook . thrift . transport . TTransportException ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + 
 + / * * 
 + * This class supports two methods for creating a Cassandra node daemon , 
 + * invoking the class ' s main method , and using the jsvc wrapper from 
 + * commons - daemon , ( for more information on using this class with the 
 + * jsvc wrapper , see the 
 + * < a href = " http : / / commons . apache . org / daemon / jsvc . html " > Commons Daemon < / a > 
 + * documentation ) . 
 + * 
 + * @ author Eric Evans < eevans @ racklabs . com > 
 + * 
 + * / 
 + 
 + public class CassandraDaemon 
 + { 
 + private static Logger logger = Logger . getLogger ( CassandraDaemon . class ) ; 
 + private TThreadPoolServer serverEngine ; 
 + 
 + private void setup ( ) throws IOException , TTransportException 
 + { 
 + int listenPort = DatabaseDescriptor . getThriftPort ( ) ; 
 + 
 + Thread . setDefaultUncaughtExceptionHandler ( new Thread . UncaughtExceptionHandler ( ) 
 + { 
 + public void uncaughtException ( Thread t , Throwable e ) 
 + { 
 + logger . error ( " Fatal exception in thread " + t , e ) ; 
 + } 
 + } ) ; 
 + 
 + CassandraServer peerStorageServer = new CassandraServer ( ) ; 
 + peerStorageServer . start ( ) ; 
 + Cassandra . Processor processor = new Cassandra . Processor ( peerStorageServer ) ; 
 + 
 + / / Transport 
 + TServerSocket tServerSocket = new TServerSocket ( listenPort ) ; 
 + 
 + / / Protocol factory 
 + TProtocolFactory tProtocolFactory = new TBinaryProtocol . Factory ( ) ; 
 + 
 + / / ThreadPool Server 
 + TThreadPoolServer . Options options = new TThreadPoolServer . Options ( ) ; 
 + options . minWorkerThreads = 64 ; 
 + serverEngine = new TThreadPoolServer ( processor , tServerSocket , tProtocolFactory ) ; 
 + } 
 + 
 + / * * hook for JSVC * / 
 + public void load ( String [ ] args ) throws IOException , TTransportException 
 + { 
 + setup ( ) ; 
 + } 
 + 
 + / * * hook for JSVC * / 
 + public void start ( ) 
 + { 
 + logger . info ( " Cassandra starting up . . . " ) ; 
 + serverEngine . serve ( ) ; 
 + } 
 + 
 + / * * hook for JSVC * / 
 + public void stop ( ) 
 + { 
 + logger . info ( " Cassandra shutting down . . . " ) ; 
 + serverEngine . stop ( ) ; 
 + } 
 + 
 + 
 + / * * hook for JSVC * / 
 + public void destroy ( ) 
 + { 
 + } 
 + 
 + public static void main ( String [ ] args ) 
 + { 
 + CassandraDaemon daemon = new CassandraDaemon ( ) ; 
 + String pidFile = System . getProperty ( " cassandra - pidfile " ) ; 
 + 
 + try 
 + { 
 + daemon . setup ( ) ; 
 + 
 + if ( pidFile ! = null ) 
 + { 
 + new File ( pidFile ) . deleteOnExit ( ) ; 
 + } 
 + 
 + if ( System . getProperty ( " cassandra - foreground " ) = = null ) 
 + { 
 + System . out . close ( ) ; 
 + System . err . close ( ) ; 
 + } 
 + 
 + daemon . start ( ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + String msg = " Exception encountered during startup . " ; 
 + logger . error ( msg , e ) ; 
 + 
 + / / try to warn user on stdout too , if we haven ' t already detached 
 + System . out . println ( msg ) ; 
 + e . printStackTrace ( ) ; 
 + 
 + System . exit ( 3 ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / org / apache / cassandra / service / CassandraServer . java b / src / org / apache / cassandra / service / CassandraServer . java 
 index 0d6c814 . . 3bf83a1 100644 
 - - - a / src / org / apache / cassandra / service / CassandraServer . java 
 + + + b / src / org / apache / cassandra / service / CassandraServer . java 
 @ @ - 90 , 7 + 90 , 7 @ @ public class CassandraServer extends FacebookBase implements Cassandra . Iface 
 	 * The start function initializes the server and start ' s listening on the 
 	 * specified port . 
 	 * / 
 - 	 public void start ( ) throws Throwable 
 + 	 public void start ( ) throws IOException 
 { 
 	 	 LogUtil . init ( ) ; 
 	 	 / / LogUtil . setLogLevel ( " com . facebook " , " DEBUG " ) ; 
 @ @ - 850 , 42 + 850 , 5 @ @ public class CassandraServer extends FacebookBase implements Cassandra . Iface 
 	 	 return null ; 
 	 } 
 
 - 	 public static void main ( String [ ] args ) throws Throwable 
 - 	 { 
 - 	 	 int port = DatabaseDescriptor . getThriftPort ( ) ; 
 - 
 - Thread . setDefaultUncaughtExceptionHandler ( new Thread . UncaughtExceptionHandler ( ) 
 - { 
 - public void uncaughtException ( Thread t , Throwable e ) 
 - { 
 - logger _ . error ( " Fatal exception in thread " + t , e ) ; 
 - } 
 - } ) ; 
 - 
 - 	 	 try 
 - 	 	 { 
 - 	 	 	 CassandraServer peerStorageServer = new CassandraServer ( ) ; 
 - 	 	 	 peerStorageServer . start ( ) ; 
 - 	 	 	 Cassandra . Processor processor = new Cassandra . Processor ( 
 - 	 	 	 	 	 peerStorageServer ) ; 
 - 	 	 	 / / Transport 
 - 	 	 	 TServerSocket tServerSocket = new TServerSocket ( port ) ; 
 - 	 	 	 / / Protocol factory 
 - 	 	 	 TProtocolFactory tProtocolFactory = new TBinaryProtocol . Factory ( ) ; 
 - 	 	 	 / / ThreadPool Server 
 - 	 	 	 Options options = new Options ( ) ; 
 - 	 	 	 options . minWorkerThreads = 64 ; 
 - 	 	 	 TThreadPoolServer serverEngine = new TThreadPoolServer ( processor , tServerSocket , tProtocolFactory ) ; 
 - 	 	 	 serverEngine . serve ( ) ; 
 - 
 - 	 	 } 
 - 	 	 catch ( Exception x ) 
 - 	 	 { 
 - 	 	 	 System . err . println ( " UNCAUGHT EXCEPTION IN main ( ) " ) ; 
 - 	 	 	 x . printStackTrace ( ) ; 
 - 	 	 	 System . exit ( 1 ) ; 
 - 	 	 } 
 - 
 - 	 } 
 - 
 + / / main method moved to CassandraDaemon 
 } 
 diff - - git a / src / org / apache / cassandra / service / StorageService . java b / src / org / apache / cassandra / service / StorageService . java 
 index b5e00c9 . . 2f6a018 100644 
 - - - a / src / org / apache / cassandra / service / StorageService . java 
 + + + b / src / org / apache / cassandra / service / StorageService . java 
 @ @ - 448 , 7 + 448 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 } 
 } 
 
 - public void start ( ) throws Throwable 
 + public void start ( ) throws IOException 
 { 
 / * Start the DB * / 
 storageMetadata _ = DBManager . instance ( ) . start ( ) ;
