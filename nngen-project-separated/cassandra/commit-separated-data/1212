BLEU SCORE: 0.11044795567078944

TEST MSG: Guard batchlog replay against integer division by zero
GENERATED MSG: Add ability to throttle batchlog replay

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index dfb0f17 . . 61cc92e 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 <nl> + * Guard batchlog replay against integer division by zero ( CASSANDRA - 9223 ) <nl> * Fix bug when adding a column to thrift with the same name than a primary key ( CASSANDRA - 10608 ) <nl> * Add client address argument to IAuthenticator : : newSaslNegotiator ( CASSANDRA - 8068 ) <nl> * Fix implementation of LegacyLayout . LegacyBoundComparator ( CASSANDRA - 10602 ) <nl> diff - - git a / src / java / org / apache / cassandra / batchlog / BatchlogManager . java b / src / java / org / apache / cassandra / batchlog / BatchlogManager . java <nl> index 8bc4c26 . . 1c98c2a 100644 <nl> - - - a / src / java / org / apache / cassandra / batchlog / BatchlogManager . java <nl> + + + b / src / java / org / apache / cassandra / batchlog / BatchlogManager . java <nl> @ @ - 178 , 7 + 178 , 13 @ @ public class BatchlogManager implements BatchlogManagerMBean <nl> <nl> / / rate limit is in bytes per second . Uses Double . MAX _ VALUE if disabled ( set to 0 in cassandra . yaml ) . <nl> / / max rate is scaled by the number of nodes in the cluster ( same as for HHOM - see CASSANDRA - 5272 ) . <nl> - int throttleInKB = DatabaseDescriptor . getBatchlogReplayThrottleInKB ( ) / StorageService . instance . getTokenMetadata ( ) . getAllEndpoints ( ) . size ( ) ; <nl> + int endpointsCount = StorageService . instance . getTokenMetadata ( ) . getAllEndpoints ( ) . size ( ) ; <nl> + if ( endpointsCount < = 0 ) <nl> + { <nl> + logger . trace ( " Replay cancelled as there are no peers in the ring . " ) ; <nl> + return ; <nl> + } <nl> + int throttleInKB = DatabaseDescriptor . getBatchlogReplayThrottleInKB ( ) / endpointsCount ; <nl> RateLimiter rateLimiter = RateLimiter . create ( throttleInKB = = 0 ? Double . MAX _ VALUE : throttleInKB * 1024 ) ; <nl> <nl> UUID limitUuid = UUIDGen . maxTimeUUID ( System . currentTimeMillis ( ) - getBatchlogTimeout ( ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / batchlog / BatchlogManagerTest . java b / test / unit / org / apache / cassandra / batchlog / BatchlogManagerTest . java <nl> index dfb17c3 . . dd5444f 100644 <nl> - - - a / test / unit / org / apache / cassandra / batchlog / BatchlogManagerTest . java <nl> + + + b / test / unit / org / apache / cassandra / batchlog / BatchlogManagerTest . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> import com . google . common . collect . Lists ; <nl> + <nl> import org . junit . * ; <nl> <nl> import org . apache . cassandra . SchemaLoader ; <nl> @ @ - 457 , 4 + 458 , 43 @ @ public class BatchlogManagerTest <nl> assertNotNull ( result ) ; <nl> assertEquals ( 0L , result . one ( ) . getLong ( " count " ) ) ; <nl> } <nl> + <nl> + / / CASSANRDA - 9223 <nl> + @ Test <nl> + public void testReplayWithNoPeers ( ) throws Exception <nl> + { <nl> + StorageService . instance . getTokenMetadata ( ) . removeEndpoint ( InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) ) ; <nl> + <nl> + long initialAllBatches = BatchlogManager . instance . countAllBatches ( ) ; <nl> + long initialReplayedBatches = BatchlogManager . instance . getTotalBatchesReplayed ( ) ; <nl> + <nl> + CFMetaData cfm = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( CF _ STANDARD1 ) . metadata ; <nl> + <nl> + long timestamp = ( System . currentTimeMillis ( ) - DatabaseDescriptor . getWriteRpcTimeout ( ) * 2 ) * 1000 ; <nl> + UUID uuid = UUIDGen . getTimeUUID ( ) ; <nl> + <nl> + / / Add a batch with 10 mutations <nl> + List < Mutation > mutations = new ArrayList < > ( 10 ) ; <nl> + for ( int j = 0 ; j < 10 ; j + + ) <nl> + { <nl> + mutations . add ( new RowUpdateBuilder ( cfm , FBUtilities . timestampMicros ( ) , ByteBufferUtil . bytes ( j ) ) <nl> + . clustering ( " name " + j ) <nl> + . add ( " val " , " val " + j ) <nl> + . build ( ) ) ; <nl> + } <nl> + BatchlogManager . store ( Batch . createLocal ( uuid , timestamp , mutations ) ) ; <nl> + assertEquals ( 1 , BatchlogManager . instance . countAllBatches ( ) - initialAllBatches ) ; <nl> + <nl> + / / Flush the batchlog to disk ( see CASSANDRA - 6822 ) . <nl> + Keyspace . open ( SystemKeyspace . NAME ) . getColumnFamilyStore ( SystemKeyspace . BATCHES ) . forceBlockingFlush ( ) ; <nl> + <nl> + assertEquals ( 1 , BatchlogManager . instance . countAllBatches ( ) - initialAllBatches ) ; <nl> + assertEquals ( 0 , BatchlogManager . instance . getTotalBatchesReplayed ( ) - initialReplayedBatches ) ; <nl> + <nl> + / / Force batchlog replay and wait for it to complete . <nl> + BatchlogManager . instance . startBatchlogReplay ( ) . get ( ) ; <nl> + <nl> + / / Replay should be cancelled as there are no peers in the ring . <nl> + assertEquals ( 1 , BatchlogManager . instance . countAllBatches ( ) - initialAllBatches ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index dfb0f17 . . 61cc92e 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 
 + * Guard batchlog replay against integer division by zero ( CASSANDRA - 9223 ) 
 * Fix bug when adding a column to thrift with the same name than a primary key ( CASSANDRA - 10608 ) 
 * Add client address argument to IAuthenticator : : newSaslNegotiator ( CASSANDRA - 8068 ) 
 * Fix implementation of LegacyLayout . LegacyBoundComparator ( CASSANDRA - 10602 ) 
 diff - - git a / src / java / org / apache / cassandra / batchlog / BatchlogManager . java b / src / java / org / apache / cassandra / batchlog / BatchlogManager . java 
 index 8bc4c26 . . 1c98c2a 100644 
 - - - a / src / java / org / apache / cassandra / batchlog / BatchlogManager . java 
 + + + b / src / java / org / apache / cassandra / batchlog / BatchlogManager . java 
 @ @ - 178 , 7 + 178 , 13 @ @ public class BatchlogManager implements BatchlogManagerMBean 
 
 / / rate limit is in bytes per second . Uses Double . MAX _ VALUE if disabled ( set to 0 in cassandra . yaml ) . 
 / / max rate is scaled by the number of nodes in the cluster ( same as for HHOM - see CASSANDRA - 5272 ) . 
 - int throttleInKB = DatabaseDescriptor . getBatchlogReplayThrottleInKB ( ) / StorageService . instance . getTokenMetadata ( ) . getAllEndpoints ( ) . size ( ) ; 
 + int endpointsCount = StorageService . instance . getTokenMetadata ( ) . getAllEndpoints ( ) . size ( ) ; 
 + if ( endpointsCount < = 0 ) 
 + { 
 + logger . trace ( " Replay cancelled as there are no peers in the ring . " ) ; 
 + return ; 
 + } 
 + int throttleInKB = DatabaseDescriptor . getBatchlogReplayThrottleInKB ( ) / endpointsCount ; 
 RateLimiter rateLimiter = RateLimiter . create ( throttleInKB = = 0 ? Double . MAX _ VALUE : throttleInKB * 1024 ) ; 
 
 UUID limitUuid = UUIDGen . maxTimeUUID ( System . currentTimeMillis ( ) - getBatchlogTimeout ( ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / batchlog / BatchlogManagerTest . java b / test / unit / org / apache / cassandra / batchlog / BatchlogManagerTest . java 
 index dfb17c3 . . dd5444f 100644 
 - - - a / test / unit / org / apache / cassandra / batchlog / BatchlogManagerTest . java 
 + + + b / test / unit / org / apache / cassandra / batchlog / BatchlogManagerTest . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . TimeUnit ; 
 
 import com . google . common . collect . Lists ; 
 + 
 import org . junit . * ; 
 
 import org . apache . cassandra . SchemaLoader ; 
 @ @ - 457 , 4 + 458 , 43 @ @ public class BatchlogManagerTest 
 assertNotNull ( result ) ; 
 assertEquals ( 0L , result . one ( ) . getLong ( " count " ) ) ; 
 } 
 + 
 + / / CASSANRDA - 9223 
 + @ Test 
 + public void testReplayWithNoPeers ( ) throws Exception 
 + { 
 + StorageService . instance . getTokenMetadata ( ) . removeEndpoint ( InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) ) ; 
 + 
 + long initialAllBatches = BatchlogManager . instance . countAllBatches ( ) ; 
 + long initialReplayedBatches = BatchlogManager . instance . getTotalBatchesReplayed ( ) ; 
 + 
 + CFMetaData cfm = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( CF _ STANDARD1 ) . metadata ; 
 + 
 + long timestamp = ( System . currentTimeMillis ( ) - DatabaseDescriptor . getWriteRpcTimeout ( ) * 2 ) * 1000 ; 
 + UUID uuid = UUIDGen . getTimeUUID ( ) ; 
 + 
 + / / Add a batch with 10 mutations 
 + List < Mutation > mutations = new ArrayList < > ( 10 ) ; 
 + for ( int j = 0 ; j < 10 ; j + + ) 
 + { 
 + mutations . add ( new RowUpdateBuilder ( cfm , FBUtilities . timestampMicros ( ) , ByteBufferUtil . bytes ( j ) ) 
 + . clustering ( " name " + j ) 
 + . add ( " val " , " val " + j ) 
 + . build ( ) ) ; 
 + } 
 + BatchlogManager . store ( Batch . createLocal ( uuid , timestamp , mutations ) ) ; 
 + assertEquals ( 1 , BatchlogManager . instance . countAllBatches ( ) - initialAllBatches ) ; 
 + 
 + / / Flush the batchlog to disk ( see CASSANDRA - 6822 ) . 
 + Keyspace . open ( SystemKeyspace . NAME ) . getColumnFamilyStore ( SystemKeyspace . BATCHES ) . forceBlockingFlush ( ) ; 
 + 
 + assertEquals ( 1 , BatchlogManager . instance . countAllBatches ( ) - initialAllBatches ) ; 
 + assertEquals ( 0 , BatchlogManager . instance . getTotalBatchesReplayed ( ) - initialReplayedBatches ) ; 
 + 
 + / / Force batchlog replay and wait for it to complete . 
 + BatchlogManager . instance . startBatchlogReplay ( ) . get ( ) ; 
 + 
 + / / Replay should be cancelled as there are no peers in the ring . 
 + assertEquals ( 1 , BatchlogManager . instance . countAllBatches ( ) - initialAllBatches ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
