BLEU SCORE: 0.04372912656590315

TEST MSG: Avoid referencing DatabaseDescriptor in AbstractType
GENERATED MSG: Fix various unit - test failures

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6d5117f . . 80a07a2 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 7 <nl> + * Avoid referencing DatabaseDescriptor in AbstractType ( CASSANDRA - 11912 ) <nl> * Fix sstables not being protected from removal during index build ( CASSANDRA - 11905 ) <nl> * cqlsh : Suppress stack trace from Read / WriteFailures ( CASSANDRA - 11032 ) <nl> * Remove unneeded code to repair index summaries that have <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index dcda76f . . cda2eaa 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 823 , 6 + 823 , 11 @ @ public class DatabaseDescriptor <nl> return conf . max _ value _ size _ in _ mb * 1024 * 1024 ; <nl> } <nl> <nl> + public static void setMaxValueSize ( int maxValueSizeInBytes ) <nl> + { <nl> + conf . max _ value _ size _ in _ mb = maxValueSizeInBytes / 1024 / 1024 ; <nl> + } <nl> + <nl> / * * <nl> * Creates all storage - related directories . <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / db / ClusteringPrefix . java b / src / java / org / apache / cassandra / db / ClusteringPrefix . java <nl> index 8d28637 . . 7f7f964 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ClusteringPrefix . java <nl> + + + b / src / java / org / apache / cassandra / db / ClusteringPrefix . java <nl> @ @ - 23 , 7 + 23 , 7 @ @ import java . security . MessageDigest ; <nl> import java . util . * ; <nl> <nl> import org . apache . cassandra . cache . IMeasurableMemory ; <nl> - import org . apache . cassandra . config . CFMetaData ; <nl> + import org . apache . cassandra . config . * ; <nl> import org . apache . cassandra . db . rows . * ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . io . util . DataInputPlus ; <nl> @ @ - 343 , 7 + 343 , 7 @ @ public interface ClusteringPrefix extends IMeasurableMemory , Clusterable <nl> { <nl> values [ offset ] = isNull ( header , offset ) <nl> ? null <nl> - : ( isEmpty ( header , offset ) ? ByteBufferUtil . EMPTY _ BYTE _ BUFFER : types . get ( offset ) . readValue ( in ) ) ; <nl> + : ( isEmpty ( header , offset ) ? ByteBufferUtil . EMPTY _ BYTE _ BUFFER : types . get ( offset ) . readValue ( in , DatabaseDescriptor . getMaxValueSize ( ) ) ) ; <nl> offset + + ; <nl> } <nl> } <nl> @ @ - 479 , 7 + 479 , 7 @ @ public interface ClusteringPrefix extends IMeasurableMemory , Clusterable <nl> int i = deserializedSize + + ; <nl> nextValues [ i ] = Serializer . isNull ( nextHeader , i ) <nl> ? null <nl> - : ( Serializer . isEmpty ( nextHeader , i ) ? ByteBufferUtil . EMPTY _ BYTE _ BUFFER : serializationHeader . clusteringTypes ( ) . get ( i ) . readValue ( in ) ) ; <nl> + : ( Serializer . isEmpty ( nextHeader , i ) ? ByteBufferUtil . EMPTY _ BYTE _ BUFFER : serializationHeader . clusteringTypes ( ) . get ( i ) . readValue ( in , DatabaseDescriptor . getMaxValueSize ( ) ) ) ; <nl> return true ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java <nl> index d5f2dc4 . . 6784770 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java <nl> @ @ - 1016 , 7 + 1016 , 7 @ @ public class SinglePartitionReadCommand extends ReadCommand <nl> public ReadCommand deserialize ( DataInputPlus in , int version , boolean isDigest , int digestVersion , boolean isForThrift , CFMetaData metadata , int nowInSec , ColumnFilter columnFilter , RowFilter rowFilter , DataLimits limits , Optional < IndexMetadata > index ) <nl> throws IOException <nl> { <nl> - DecoratedKey key = metadata . decorateKey ( metadata . getKeyValidator ( ) . readValue ( in ) ) ; <nl> + DecoratedKey key = metadata . decorateKey ( metadata . getKeyValidator ( ) . readValue ( in , DatabaseDescriptor . getMaxValueSize ( ) ) ) ; <nl> ClusteringIndexFilter filter = ClusteringIndexFilter . serializer . deserialize ( in , version , metadata ) ; <nl> return new SinglePartitionReadCommand ( isDigest , digestVersion , isForThrift , metadata , nowInSec , columnFilter , rowFilter , limits , key , filter ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractType . java b / src / java / org / apache / cassandra / db / marshal / AbstractType . java <nl> index 9d1cc8a . . 9c7ac49 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / AbstractType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / AbstractType . java <nl> @ @ - 27 , 11 + 27 , 9 @ @ import java . util . Comparator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> <nl> - import com . google . common . annotations . VisibleForTesting ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . cql3 . CQL3Type ; <nl> import org . apache . cassandra . cql3 . Term ; <nl> import org . apache . cassandra . db . TypeSizes ; <nl> @ @ - 83 , 22 + 81 , 10 @ @ public abstract class AbstractType < T > implements Comparator < ByteBuffer > <nl> public final ComparisonType comparisonType ; <nl> public final boolean isByteOrderComparable ; <nl> <nl> - / * * <nl> - * The maximum size of values for this type , used when some values are not of fixed length , <nl> - * that is valueLengthIfFixed ( ) returns - 1 . <nl> - * / <nl> - public int maxValueSize ; <nl> - <nl> protected AbstractType ( ComparisonType comparisonType ) <nl> { <nl> - this ( comparisonType , DatabaseDescriptor . getMaxValueSize ( ) ) ; <nl> - } <nl> - <nl> - protected AbstractType ( ComparisonType comparisonType , int maxValueSize ) <nl> - { <nl> this . comparisonType = comparisonType ; <nl> this . isByteOrderComparable = comparisonType = = ComparisonType . BYTE _ ORDER ; <nl> - this . maxValueSize = maxValueSize ; <nl> reverseComparator = ( o1 , o2 ) - > AbstractType . this . compare ( o2 , o1 ) ; <nl> try <nl> { <nl> @ @ - 114 , 17 + 100 , 6 @ @ public abstract class AbstractType < T > implements Comparator < ByteBuffer > <nl> } <nl> } <nl> <nl> - / * * <nl> - * Change the maximum value size , this should only be called for testing . <nl> - * Unfortunately , ensuring we use a type created with a different maxValueSize <nl> - * is too hard at the moment , due to the pervasive use of the type ' s singleton instances . <nl> - * / <nl> - @ VisibleForTesting <nl> - public void setMaxValueSize ( int maxValueSize ) <nl> - { <nl> - this . maxValueSize = maxValueSize ; <nl> - } <nl> - <nl> public static List < String > asCQLTypeStringList ( List < AbstractType < ? > > abstractTypes ) <nl> { <nl> List < String > r = new ArrayList < > ( abstractTypes . size ( ) ) ; <nl> @ @ - 408 , 6 + 383 , 11 @ @ public abstract class AbstractType < T > implements Comparator < ByteBuffer > <nl> <nl> public ByteBuffer readValue ( DataInputPlus in ) throws IOException <nl> { <nl> + return readValue ( in , Integer . MAX _ VALUE ) ; <nl> + } <nl> + <nl> + public ByteBuffer readValue ( DataInputPlus in , int maxValueSize ) throws IOException <nl> + { <nl> int length = valueLengthIfFixed ( ) ; <nl> <nl> if ( length > = 0 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / rows / BufferCell . java b / src / java / org / apache / cassandra / db / rows / BufferCell . java <nl> index 0a2c528 . . 22b629a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / rows / BufferCell . java <nl> + + + b / src / java / org / apache / cassandra / db / rows / BufferCell . java <nl> @ @ - 20 , 8 + 20 , 7 @ @ package org . apache . cassandra . db . rows ; <nl> import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> <nl> - import org . apache . cassandra . config . CFMetaData ; <nl> - import org . apache . cassandra . config . ColumnDefinition ; <nl> + import org . apache . cassandra . config . * ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . context . CounterContext ; <nl> import org . apache . cassandra . db . marshal . ByteType ; <nl> @ @ - 300 , 7 + 299 , 7 @ @ public class BufferCell extends AbstractCell <nl> } <nl> else <nl> { <nl> - value = header . getType ( column ) . readValue ( in ) ; <nl> + value = header . getType ( column ) . readValue ( in , DatabaseDescriptor . getMaxValueSize ( ) ) ; <nl> if ( isCounter ) <nl> value = helper . maybeClearCounterValue ( value ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / compaction / BlacklistingCompactionsTest . java b / test / unit / org / apache / cassandra / db / compaction / BlacklistingCompactionsTest . java <nl> index 21ce450 . . df2d8a9 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / BlacklistingCompactionsTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / BlacklistingCompactionsTest . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . io . RandomAccessFile ; <nl> import java . util . * ; <nl> <nl> import org . junit . After ; <nl> + import org . junit . AfterClass ; <nl> import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 54 , 6 + 55 , 7 @ @ public class BlacklistingCompactionsTest <nl> private static final String KEYSPACE1 = " BlacklistingCompactionsTest " ; <nl> private static final String STANDARD _ STCS = " Standard _ STCS " ; <nl> private static final String STANDARD _ LCS = " Standard _ LCS " ; <nl> + private static int maxValueSize ; <nl> <nl> @ After <nl> public void leakDetect ( ) throws InterruptedException <nl> @ @ - 78 , 18 + 80 , 17 @ @ public class BlacklistingCompactionsTest <nl> SchemaLoader . standardCFMD ( KEYSPACE1 , STANDARD _ STCS ) . compaction ( CompactionParams . DEFAULT ) , <nl> SchemaLoader . standardCFMD ( KEYSPACE1 , STANDARD _ LCS ) . compaction ( CompactionParams . lcs ( Collections . emptyMap ( ) ) ) ) ; <nl> <nl> - Keyspace keyspace = Keyspace . open ( KEYSPACE1 ) ; <nl> - for ( String tableName : new String [ ] { STANDARD _ STCS , STANDARD _ LCS } ) <nl> - { <nl> - final ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( tableName ) ; <nl> - <nl> - for ( ColumnDefinition cd : cfs . metadata . allColumns ( ) ) <nl> - cd . type . setMaxValueSize ( 1024 * 1024 ) ; / / set max value size to 1MB <nl> - } <nl> - <nl> + maxValueSize = DatabaseDescriptor . getMaxValueSize ( ) ; <nl> + DatabaseDescriptor . setMaxValueSize ( 1024 * 1024 ) ; <nl> closeStdErr ( ) ; <nl> } <nl> <nl> + @ AfterClass <nl> + public static void tearDown ( ) <nl> + { <nl> + DatabaseDescriptor . setMaxValueSize ( maxValueSize ) ; <nl> + } <nl> + <nl> public static void closeStdErr ( ) <nl> { <nl> / / These tests generate an error message per CorruptSSTableException since it goes through <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableCorruptionDetectionTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableCorruptionDetectionTest . java <nl> index 0c27fc8 . . 4da8519 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableCorruptionDetectionTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableCorruptionDetectionTest . java <nl> @ @ - 63 , 6 + 63 , 7 @ @ public class SSTableCorruptionDetectionTest extends SSTableWriterTestBase <nl> private static final String keyspace = " SSTableCorruptionDetectionTest " ; <nl> private static final String table = " corrupted _ table " ; <nl> <nl> + private static int maxValueSize ; <nl> private static Random random ; <nl> private static SSTableWriter writer ; <nl> private static LifecycleTransaction txn ; <nl> @ @ - 88 , 8 + 89 , 8 @ @ public class SSTableCorruptionDetectionTest extends SSTableWriterTestBase <nl> cfs = Keyspace . open ( keyspace ) . getColumnFamilyStore ( table ) ; <nl> cfs . disableAutoCompaction ( ) ; <nl> <nl> - for ( ColumnDefinition cd : cfs . metadata . allColumns ( ) ) <nl> - cd . type . setMaxValueSize ( 1024 * 1024 ) ; <nl> + maxValueSize = DatabaseDescriptor . getMaxValueSize ( ) ; <nl> + DatabaseDescriptor . setMaxValueSize ( 1024 * 1024 ) ; <nl> <nl> long seed = System . nanoTime ( ) ; <nl> logger . info ( " Seed { } " , seed ) ; <nl> @ @ - 123 , 6 + 124 , 8 @ @ public class SSTableCorruptionDetectionTest extends SSTableWriterTestBase <nl> @ AfterClass <nl> public static void tearDown ( ) <nl> { <nl> + DatabaseDescriptor . setMaxValueSize ( maxValueSize ) ; <nl> + <nl> txn . abort ( ) ; <nl> writer . close ( ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableWriterTestBase . java b / test / unit / org / apache / cassandra / io / sstable / SSTableWriterTestBase . java <nl> index f2c97c0 . . 5c7c7c0 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableWriterTestBase . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableWriterTestBase . java <nl> @ @ - 60 , 6 + 60 , 8 @ @ public class SSTableWriterTestBase extends SchemaLoader <nl> private static Config . DiskAccessMode standardMode ; <nl> private static Config . DiskAccessMode indexMode ; <nl> <nl> + private static int maxValueSize ; <nl> + <nl> @ BeforeClass <nl> public static void defineSchema ( ) throws ConfigurationException <nl> { <nl> @ @ - 78 , 15 + 80 , 14 @ @ public class SSTableWriterTestBase extends SchemaLoader <nl> SchemaLoader . standardCFMD ( KEYSPACE , CF ) , <nl> SchemaLoader . standardCFMD ( KEYSPACE , CF _ SMALL _ MAX _ VALUE ) ) ; <nl> <nl> - Keyspace keyspace = Keyspace . open ( KEYSPACE ) ; <nl> - ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( CF _ SMALL _ MAX _ VALUE ) ; <nl> - for ( ColumnDefinition cd : cfs . metadata . allColumns ( ) ) <nl> - cd . type . setMaxValueSize ( 1024 * 1024 ) ; / / set max value size to 1MB <nl> + maxValueSize = DatabaseDescriptor . getMaxValueSize ( ) ; <nl> + DatabaseDescriptor . setMaxValueSize ( 1024 * 1024 ) ; / / set max value size to 1MB <nl> } <nl> <nl> @ AfterClass <nl> - public static void revertDiskAccess ( ) <nl> + public static void revertConfiguration ( ) <nl> { <nl> + DatabaseDescriptor . setMaxValueSize ( maxValueSize ) ; <nl> DatabaseDescriptor . setDiskAccessMode ( standardMode ) ; <nl> DatabaseDescriptor . setIndexAccessMode ( indexMode ) ; <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6d5117f . . 80a07a2 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 7 
 + * Avoid referencing DatabaseDescriptor in AbstractType ( CASSANDRA - 11912 ) 
 * Fix sstables not being protected from removal during index build ( CASSANDRA - 11905 ) 
 * cqlsh : Suppress stack trace from Read / WriteFailures ( CASSANDRA - 11032 ) 
 * Remove unneeded code to repair index summaries that have 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index dcda76f . . cda2eaa 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 823 , 6 + 823 , 11 @ @ public class DatabaseDescriptor 
 return conf . max _ value _ size _ in _ mb * 1024 * 1024 ; 
 } 
 
 + public static void setMaxValueSize ( int maxValueSizeInBytes ) 
 + { 
 + conf . max _ value _ size _ in _ mb = maxValueSizeInBytes / 1024 / 1024 ; 
 + } 
 + 
 / * * 
 * Creates all storage - related directories . 
 * / 
 diff - - git a / src / java / org / apache / cassandra / db / ClusteringPrefix . java b / src / java / org / apache / cassandra / db / ClusteringPrefix . java 
 index 8d28637 . . 7f7f964 100644 
 - - - a / src / java / org / apache / cassandra / db / ClusteringPrefix . java 
 + + + b / src / java / org / apache / cassandra / db / ClusteringPrefix . java 
 @ @ - 23 , 7 + 23 , 7 @ @ import java . security . MessageDigest ; 
 import java . util . * ; 
 
 import org . apache . cassandra . cache . IMeasurableMemory ; 
 - import org . apache . cassandra . config . CFMetaData ; 
 + import org . apache . cassandra . config . * ; 
 import org . apache . cassandra . db . rows . * ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . io . util . DataInputPlus ; 
 @ @ - 343 , 7 + 343 , 7 @ @ public interface ClusteringPrefix extends IMeasurableMemory , Clusterable 
 { 
 values [ offset ] = isNull ( header , offset ) 
 ? null 
 - : ( isEmpty ( header , offset ) ? ByteBufferUtil . EMPTY _ BYTE _ BUFFER : types . get ( offset ) . readValue ( in ) ) ; 
 + : ( isEmpty ( header , offset ) ? ByteBufferUtil . EMPTY _ BYTE _ BUFFER : types . get ( offset ) . readValue ( in , DatabaseDescriptor . getMaxValueSize ( ) ) ) ; 
 offset + + ; 
 } 
 } 
 @ @ - 479 , 7 + 479 , 7 @ @ public interface ClusteringPrefix extends IMeasurableMemory , Clusterable 
 int i = deserializedSize + + ; 
 nextValues [ i ] = Serializer . isNull ( nextHeader , i ) 
 ? null 
 - : ( Serializer . isEmpty ( nextHeader , i ) ? ByteBufferUtil . EMPTY _ BYTE _ BUFFER : serializationHeader . clusteringTypes ( ) . get ( i ) . readValue ( in ) ) ; 
 + : ( Serializer . isEmpty ( nextHeader , i ) ? ByteBufferUtil . EMPTY _ BYTE _ BUFFER : serializationHeader . clusteringTypes ( ) . get ( i ) . readValue ( in , DatabaseDescriptor . getMaxValueSize ( ) ) ) ; 
 return true ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java 
 index d5f2dc4 . . 6784770 100644 
 - - - a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java 
 + + + b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java 
 @ @ - 1016 , 7 + 1016 , 7 @ @ public class SinglePartitionReadCommand extends ReadCommand 
 public ReadCommand deserialize ( DataInputPlus in , int version , boolean isDigest , int digestVersion , boolean isForThrift , CFMetaData metadata , int nowInSec , ColumnFilter columnFilter , RowFilter rowFilter , DataLimits limits , Optional < IndexMetadata > index ) 
 throws IOException 
 { 
 - DecoratedKey key = metadata . decorateKey ( metadata . getKeyValidator ( ) . readValue ( in ) ) ; 
 + DecoratedKey key = metadata . decorateKey ( metadata . getKeyValidator ( ) . readValue ( in , DatabaseDescriptor . getMaxValueSize ( ) ) ) ; 
 ClusteringIndexFilter filter = ClusteringIndexFilter . serializer . deserialize ( in , version , metadata ) ; 
 return new SinglePartitionReadCommand ( isDigest , digestVersion , isForThrift , metadata , nowInSec , columnFilter , rowFilter , limits , key , filter ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractType . java b / src / java / org / apache / cassandra / db / marshal / AbstractType . java 
 index 9d1cc8a . . 9c7ac49 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / AbstractType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / AbstractType . java 
 @ @ - 27 , 11 + 27 , 9 @ @ import java . util . Comparator ; 
 import java . util . List ; 
 import java . util . Map ; 
 
 - import com . google . common . annotations . VisibleForTesting ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . cql3 . CQL3Type ; 
 import org . apache . cassandra . cql3 . Term ; 
 import org . apache . cassandra . db . TypeSizes ; 
 @ @ - 83 , 22 + 81 , 10 @ @ public abstract class AbstractType < T > implements Comparator < ByteBuffer > 
 public final ComparisonType comparisonType ; 
 public final boolean isByteOrderComparable ; 
 
 - / * * 
 - * The maximum size of values for this type , used when some values are not of fixed length , 
 - * that is valueLengthIfFixed ( ) returns - 1 . 
 - * / 
 - public int maxValueSize ; 
 - 
 protected AbstractType ( ComparisonType comparisonType ) 
 { 
 - this ( comparisonType , DatabaseDescriptor . getMaxValueSize ( ) ) ; 
 - } 
 - 
 - protected AbstractType ( ComparisonType comparisonType , int maxValueSize ) 
 - { 
 this . comparisonType = comparisonType ; 
 this . isByteOrderComparable = comparisonType = = ComparisonType . BYTE _ ORDER ; 
 - this . maxValueSize = maxValueSize ; 
 reverseComparator = ( o1 , o2 ) - > AbstractType . this . compare ( o2 , o1 ) ; 
 try 
 { 
 @ @ - 114 , 17 + 100 , 6 @ @ public abstract class AbstractType < T > implements Comparator < ByteBuffer > 
 } 
 } 
 
 - / * * 
 - * Change the maximum value size , this should only be called for testing . 
 - * Unfortunately , ensuring we use a type created with a different maxValueSize 
 - * is too hard at the moment , due to the pervasive use of the type ' s singleton instances . 
 - * / 
 - @ VisibleForTesting 
 - public void setMaxValueSize ( int maxValueSize ) 
 - { 
 - this . maxValueSize = maxValueSize ; 
 - } 
 - 
 public static List < String > asCQLTypeStringList ( List < AbstractType < ? > > abstractTypes ) 
 { 
 List < String > r = new ArrayList < > ( abstractTypes . size ( ) ) ; 
 @ @ - 408 , 6 + 383 , 11 @ @ public abstract class AbstractType < T > implements Comparator < ByteBuffer > 
 
 public ByteBuffer readValue ( DataInputPlus in ) throws IOException 
 { 
 + return readValue ( in , Integer . MAX _ VALUE ) ; 
 + } 
 + 
 + public ByteBuffer readValue ( DataInputPlus in , int maxValueSize ) throws IOException 
 + { 
 int length = valueLengthIfFixed ( ) ; 
 
 if ( length > = 0 ) 
 diff - - git a / src / java / org / apache / cassandra / db / rows / BufferCell . java b / src / java / org / apache / cassandra / db / rows / BufferCell . java 
 index 0a2c528 . . 22b629a 100644 
 - - - a / src / java / org / apache / cassandra / db / rows / BufferCell . java 
 + + + b / src / java / org / apache / cassandra / db / rows / BufferCell . java 
 @ @ - 20 , 8 + 20 , 7 @ @ package org . apache . cassandra . db . rows ; 
 import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 
 - import org . apache . cassandra . config . CFMetaData ; 
 - import org . apache . cassandra . config . ColumnDefinition ; 
 + import org . apache . cassandra . config . * ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . context . CounterContext ; 
 import org . apache . cassandra . db . marshal . ByteType ; 
 @ @ - 300 , 7 + 299 , 7 @ @ public class BufferCell extends AbstractCell 
 } 
 else 
 { 
 - value = header . getType ( column ) . readValue ( in ) ; 
 + value = header . getType ( column ) . readValue ( in , DatabaseDescriptor . getMaxValueSize ( ) ) ; 
 if ( isCounter ) 
 value = helper . maybeClearCounterValue ( value ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / compaction / BlacklistingCompactionsTest . java b / test / unit / org / apache / cassandra / db / compaction / BlacklistingCompactionsTest . java 
 index 21ce450 . . df2d8a9 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / BlacklistingCompactionsTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / BlacklistingCompactionsTest . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . io . RandomAccessFile ; 
 import java . util . * ; 
 
 import org . junit . After ; 
 + import org . junit . AfterClass ; 
 import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 
 @ @ - 54 , 6 + 55 , 7 @ @ public class BlacklistingCompactionsTest 
 private static final String KEYSPACE1 = " BlacklistingCompactionsTest " ; 
 private static final String STANDARD _ STCS = " Standard _ STCS " ; 
 private static final String STANDARD _ LCS = " Standard _ LCS " ; 
 + private static int maxValueSize ; 
 
 @ After 
 public void leakDetect ( ) throws InterruptedException 
 @ @ - 78 , 18 + 80 , 17 @ @ public class BlacklistingCompactionsTest 
 SchemaLoader . standardCFMD ( KEYSPACE1 , STANDARD _ STCS ) . compaction ( CompactionParams . DEFAULT ) , 
 SchemaLoader . standardCFMD ( KEYSPACE1 , STANDARD _ LCS ) . compaction ( CompactionParams . lcs ( Collections . emptyMap ( ) ) ) ) ; 
 
 - Keyspace keyspace = Keyspace . open ( KEYSPACE1 ) ; 
 - for ( String tableName : new String [ ] { STANDARD _ STCS , STANDARD _ LCS } ) 
 - { 
 - final ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( tableName ) ; 
 - 
 - for ( ColumnDefinition cd : cfs . metadata . allColumns ( ) ) 
 - cd . type . setMaxValueSize ( 1024 * 1024 ) ; / / set max value size to 1MB 
 - } 
 - 
 + maxValueSize = DatabaseDescriptor . getMaxValueSize ( ) ; 
 + DatabaseDescriptor . setMaxValueSize ( 1024 * 1024 ) ; 
 closeStdErr ( ) ; 
 } 
 
 + @ AfterClass 
 + public static void tearDown ( ) 
 + { 
 + DatabaseDescriptor . setMaxValueSize ( maxValueSize ) ; 
 + } 
 + 
 public static void closeStdErr ( ) 
 { 
 / / These tests generate an error message per CorruptSSTableException since it goes through 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableCorruptionDetectionTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableCorruptionDetectionTest . java 
 index 0c27fc8 . . 4da8519 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableCorruptionDetectionTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableCorruptionDetectionTest . java 
 @ @ - 63 , 6 + 63 , 7 @ @ public class SSTableCorruptionDetectionTest extends SSTableWriterTestBase 
 private static final String keyspace = " SSTableCorruptionDetectionTest " ; 
 private static final String table = " corrupted _ table " ; 
 
 + private static int maxValueSize ; 
 private static Random random ; 
 private static SSTableWriter writer ; 
 private static LifecycleTransaction txn ; 
 @ @ - 88 , 8 + 89 , 8 @ @ public class SSTableCorruptionDetectionTest extends SSTableWriterTestBase 
 cfs = Keyspace . open ( keyspace ) . getColumnFamilyStore ( table ) ; 
 cfs . disableAutoCompaction ( ) ; 
 
 - for ( ColumnDefinition cd : cfs . metadata . allColumns ( ) ) 
 - cd . type . setMaxValueSize ( 1024 * 1024 ) ; 
 + maxValueSize = DatabaseDescriptor . getMaxValueSize ( ) ; 
 + DatabaseDescriptor . setMaxValueSize ( 1024 * 1024 ) ; 
 
 long seed = System . nanoTime ( ) ; 
 logger . info ( " Seed { } " , seed ) ; 
 @ @ - 123 , 6 + 124 , 8 @ @ public class SSTableCorruptionDetectionTest extends SSTableWriterTestBase 
 @ AfterClass 
 public static void tearDown ( ) 
 { 
 + DatabaseDescriptor . setMaxValueSize ( maxValueSize ) ; 
 + 
 txn . abort ( ) ; 
 writer . close ( ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableWriterTestBase . java b / test / unit / org / apache / cassandra / io / sstable / SSTableWriterTestBase . java 
 index f2c97c0 . . 5c7c7c0 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableWriterTestBase . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableWriterTestBase . java 
 @ @ - 60 , 6 + 60 , 8 @ @ public class SSTableWriterTestBase extends SchemaLoader 
 private static Config . DiskAccessMode standardMode ; 
 private static Config . DiskAccessMode indexMode ; 
 
 + private static int maxValueSize ; 
 + 
 @ BeforeClass 
 public static void defineSchema ( ) throws ConfigurationException 
 { 
 @ @ - 78 , 15 + 80 , 14 @ @ public class SSTableWriterTestBase extends SchemaLoader 
 SchemaLoader . standardCFMD ( KEYSPACE , CF ) , 
 SchemaLoader . standardCFMD ( KEYSPACE , CF _ SMALL _ MAX _ VALUE ) ) ; 
 
 - Keyspace keyspace = Keyspace . open ( KEYSPACE ) ; 
 - ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( CF _ SMALL _ MAX _ VALUE ) ; 
 - for ( ColumnDefinition cd : cfs . metadata . allColumns ( ) ) 
 - cd . type . setMaxValueSize ( 1024 * 1024 ) ; / / set max value size to 1MB 
 + maxValueSize = DatabaseDescriptor . getMaxValueSize ( ) ; 
 + DatabaseDescriptor . setMaxValueSize ( 1024 * 1024 ) ; / / set max value size to 1MB 
 } 
 
 @ AfterClass 
 - public static void revertDiskAccess ( ) 
 + public static void revertConfiguration ( ) 
 { 
 + DatabaseDescriptor . setMaxValueSize ( maxValueSize ) ; 
 DatabaseDescriptor . setDiskAccessMode ( standardMode ) ; 
 DatabaseDescriptor . setIndexAccessMode ( indexMode ) ; 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
