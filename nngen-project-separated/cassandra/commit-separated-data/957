BLEU SCORE: 0.020943469770777077

TEST MSG: Ensure correct filters with SASI clustering index
GENERATED MSG: Allows single - column slice restrictions to be merged with multi - columns slice restrictions

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 85fca0f . . 7441abd 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 5 <nl> + * Fix clustering and row filters for LIKE queries on clustering columns ( CASSANDRA - 11397 ) <nl> Merged from 3 . 0 : <nl> * Allocate merkletrees with the correct size ( CASSANDRA - 11390 ) <nl> * Support streaming pre - 3 . 0 sstables ( CASSANDRA - 10990 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / PrimaryKeyRestrictionSet . java b / src / java / org / apache / cassandra / cql3 / restrictions / PrimaryKeyRestrictionSet . java <nl> index 978ebbc . . 7d0c3df 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / restrictions / PrimaryKeyRestrictionSet . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / restrictions / PrimaryKeyRestrictionSet . java <nl> @ @ - 55 , 6 + 55 , 11 @ @ final class PrimaryKeyRestrictionSet extends AbstractPrimaryKeyRestrictions <nl> private boolean in ; <nl> <nl> / * * <nl> + * < code > true < / code > if the restrictions are corresponding to a LIKE , < code > false < / code > otherwise . <nl> + * / <nl> + private boolean like ; <nl> + <nl> + / * * <nl> * < code > true < / code > if the restrictions are corresponding to a Slice , < code > false < / code > otherwise . <nl> * / <nl> private boolean slice ; <nl> @ @ - 106 , 6 + 111 , 8 @ @ final class PrimaryKeyRestrictionSet extends AbstractPrimaryKeyRestrictions <nl> this . contains = true ; <nl> else if ( restriction . isIN ( ) | | primaryKeyRestrictions . isIN ( ) ) <nl> this . in = true ; <nl> + else if ( restriction . isLIKE ( ) | | primaryKeyRestrictions . isLIKE ( ) ) <nl> + this . like = true ; <nl> else <nl> this . eq = true ; <nl> } <nl> @ @ - 138 , 6 + 145 , 12 @ @ final class PrimaryKeyRestrictionSet extends AbstractPrimaryKeyRestrictions <nl> } <nl> <nl> @ Override <nl> + public boolean isLIKE ( ) <nl> + { <nl> + return like ; <nl> + } <nl> + <nl> + @ Override <nl> public boolean isContains ( ) <nl> { <nl> return contains ; <nl> @ @ - 220 , 7 + 233 , 7 @ @ final class PrimaryKeyRestrictionSet extends AbstractPrimaryKeyRestrictions <nl> { <nl> ColumnDefinition def = r . getFirstColumn ( ) ; <nl> <nl> - if ( keyPosition ! = def . position ( ) | | r . isContains ( ) ) <nl> + if ( keyPosition ! = def . position ( ) | | r . isContains ( ) | | r . isLIKE ( ) ) <nl> break ; <nl> <nl> if ( r . isSlice ( ) ) <nl> @ @ - 296 , 7 + 309 , 7 @ @ final class PrimaryKeyRestrictionSet extends AbstractPrimaryKeyRestrictions <nl> ColumnDefinition columnDef = restriction . getFirstColumn ( ) ; <nl> <nl> / / We ignore all the clustering columns that can be handled by slices . <nl> - if ( ! isPartitionKey & & ! restriction . isContains ( ) & & position = = columnDef . position ( ) ) <nl> + if ( ! isPartitionKey & & ! ( restriction . isContains ( ) | | restriction . isLIKE ( ) ) & & position = = columnDef . position ( ) ) <nl> { <nl> position = restriction . getLastColumn ( ) . position ( ) + 1 ; <nl> if ( ! restriction . hasSupportingIndex ( indexManager ) ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / SingleColumnRestriction . java b / src / java / org / apache / cassandra / cql3 / restrictions / SingleColumnRestriction . java <nl> index d237d02 . . ab4815a 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / restrictions / SingleColumnRestriction . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / restrictions / SingleColumnRestriction . java <nl> @ @ - 704 , 10 + 704 , 10 @ @ public abstract class SingleColumnRestriction extends AbstractRestriction <nl> @ Override <nl> public MultiCBuilder appendTo ( MultiCBuilder builder , QueryOptions options ) <nl> { <nl> - / / LIKE could be used with clustering columns as soon as they are indexed , <nl> - / / but we have to hide such expression from clustering filter since it <nl> - / / can only filter based on the complete values . <nl> - return builder ; <nl> + / / LIKE can be used with clustering columns , but as it doesn ' t <nl> + / / represent an actual clustering value , it can ' t be used in a <nl> + / / clustering filter . <nl> + throw new UnsupportedOperationException ( ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java b / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java <nl> index 123e33b . . 0672a99 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java <nl> @ @ - 737 , 7 + 737 , 7 @ @ public final class StatementRestrictions <nl> / / this would mean a ' SELECT * ' on a static compact table would query whole partitions , even though we ' ll only return <nl> / / the static part as far as CQL is concerned . This is thus mostly an optimization to use the query - by - name path ) . <nl> int numberOfClusteringColumns = cfm . isStaticCompactTable ( ) ? 0 : cfm . clusteringColumns ( ) . size ( ) ; <nl> - / / it is a range query if it has at least one the column alias for which no relation is defined or is not EQ . <nl> + / / it is a range query if it has at least one the column alias for which no relation is defined or is not EQ or IN . <nl> return clusteringColumnsRestrictions . size ( ) < numberOfClusteringColumns <nl> | | ( ! clusteringColumnsRestrictions . isEQ ( ) & & ! clusteringColumnsRestrictions . isIN ( ) ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / SchemaLoader . java b / test / unit / org / apache / cassandra / SchemaLoader . java <nl> index 9a8c424 . . e68dd94 100644 <nl> - - - a / test / unit / org / apache / cassandra / SchemaLoader . java <nl> + + + b / test / unit / org / apache / cassandra / SchemaLoader . java <nl> @ @ - 578 , 6 + 578 , 11 @ @ public class SchemaLoader <nl> <nl> public static CFMetaData clusteringSASICFMD ( String ksName , String cfName ) <nl> { <nl> + return clusteringSASICFMD ( ksName , cfName , " location " , " age " , " height " , " score " ) ; <nl> + } <nl> + <nl> + public static CFMetaData clusteringSASICFMD ( String ksName , String cfName , String . . . indexedColumns ) <nl> + { <nl> CFMetaData cfm = CFMetaData . Builder . create ( ksName , cfName ) <nl> . addPartitionKey ( " name " , UTF8Type . instance ) <nl> . addClusteringColumn ( " location " , UTF8Type . instance ) <nl> @ @ - 586 , 32 + 591 , 17 @ @ public class SchemaLoader <nl> . addRegularColumn ( " score " , DoubleType . instance ) <nl> . build ( ) ; <nl> <nl> - cfm . indexes ( cfm . getIndexes ( ) <nl> - . with ( IndexMetadata . fromSchemaMetadata ( " location " , IndexMetadata . Kind . CUSTOM , new HashMap < String , String > ( ) <nl> - { { <nl> - put ( IndexTarget . CUSTOM _ INDEX _ OPTION _ NAME , SASIIndex . class . getName ( ) ) ; <nl> - put ( IndexTarget . TARGET _ OPTION _ NAME , " location " ) ; <nl> - put ( " mode " , OnDiskIndexBuilder . Mode . PREFIX . toString ( ) ) ; <nl> - } } ) ) <nl> - . with ( IndexMetadata . fromSchemaMetadata ( " age " , IndexMetadata . Kind . CUSTOM , new HashMap < String , String > ( ) <nl> - { { <nl> - put ( IndexTarget . CUSTOM _ INDEX _ OPTION _ NAME , SASIIndex . class . getName ( ) ) ; <nl> - put ( IndexTarget . TARGET _ OPTION _ NAME , " age " ) ; <nl> - put ( " mode " , OnDiskIndexBuilder . Mode . PREFIX . toString ( ) ) ; <nl> - } } ) ) <nl> - . with ( IndexMetadata . fromSchemaMetadata ( " height " , IndexMetadata . Kind . CUSTOM , new HashMap < String , String > ( ) <nl> - { { <nl> - put ( IndexTarget . CUSTOM _ INDEX _ OPTION _ NAME , SASIIndex . class . getName ( ) ) ; <nl> - put ( IndexTarget . TARGET _ OPTION _ NAME , " height " ) ; <nl> - put ( " mode " , OnDiskIndexBuilder . Mode . PREFIX . toString ( ) ) ; <nl> - } } ) ) <nl> - . with ( IndexMetadata . fromSchemaMetadata ( " score " , IndexMetadata . Kind . CUSTOM , new HashMap < String , String > ( ) <nl> - { { <nl> - put ( IndexTarget . CUSTOM _ INDEX _ OPTION _ NAME , SASIIndex . class . getName ( ) ) ; <nl> - put ( IndexTarget . TARGET _ OPTION _ NAME , " score " ) ; <nl> - put ( " mode " , OnDiskIndexBuilder . Mode . PREFIX . toString ( ) ) ; <nl> - } } ) ) ) ; <nl> - <nl> + Indexes indexes = cfm . getIndexes ( ) ; <nl> + for ( String indexedColumn : indexedColumns ) <nl> + { <nl> + indexes = indexes . with ( IndexMetadata . fromSchemaMetadata ( indexedColumn , IndexMetadata . Kind . CUSTOM , new HashMap < String , String > ( ) <nl> + { { <nl> + put ( IndexTarget . CUSTOM _ INDEX _ OPTION _ NAME , SASIIndex . class . getName ( ) ) ; <nl> + put ( IndexTarget . TARGET _ OPTION _ NAME , indexedColumn ) ; <nl> + put ( " mode " , OnDiskIndexBuilder . Mode . PREFIX . toString ( ) ) ; <nl> + } } ) ) ; <nl> + } <nl> + cfm . indexes ( indexes ) ; <nl> return cfm ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java b / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java <nl> index c9d66f7 . . ca6e9a1 100644 <nl> - - - a / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java <nl> + + + b / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java <nl> @ @ - 80 , 7 + 80 , 8 @ @ public class SASIIndexTest <nl> <nl> private static final String KS _ NAME = " sasi " ; <nl> private static final String CF _ NAME = " test _ cf " ; <nl> - private static final String CLUSTERING _ CF _ NAME = " clustering _ test _ cf " ; <nl> + private static final String CLUSTERING _ CF _ NAME _ 1 = " clustering _ test _ cf _ 1 " ; <nl> + private static final String CLUSTERING _ CF _ NAME _ 2 = " clustering _ test _ cf _ 2 " ; <nl> <nl> @ BeforeClass <nl> public static void loadSchema ( ) throws ConfigurationException <nl> @ @ - 90 , 7 + 91 , 8 @ @ public class SASIIndexTest <nl> MigrationManager . announceNewKeyspace ( KeyspaceMetadata . create ( KS _ NAME , <nl> KeyspaceParams . simpleTransient ( 1 ) , <nl> Tables . of ( SchemaLoader . sasiCFMD ( KS _ NAME , CF _ NAME ) , <nl> - SchemaLoader . clusteringSASICFMD ( KS _ NAME , CLUSTERING _ CF _ NAME ) ) ) ) ; <nl> + SchemaLoader . clusteringSASICFMD ( KS _ NAME , CLUSTERING _ CF _ NAME _ 1 ) , <nl> + SchemaLoader . clusteringSASICFMD ( KS _ NAME , CLUSTERING _ CF _ NAME _ 2 , " location " ) ) ) ) ; <nl> } <nl> <nl> @ After <nl> @ @ - 1621 , 64 + 1623 , 64 @ @ public class SASIIndexTest <nl> <nl> public void testClusteringIndexes ( boolean forceFlush ) throws Exception <nl> { <nl> - ColumnFamilyStore store = Keyspace . open ( KS _ NAME ) . getColumnFamilyStore ( CLUSTERING _ CF _ NAME ) ; <nl> + ColumnFamilyStore store = Keyspace . open ( KS _ NAME ) . getColumnFamilyStore ( CLUSTERING _ CF _ NAME _ 1 ) ; <nl> <nl> - executeCQL ( " INSERT INTO % s . % s ( name , location , age , height , score ) VALUES ( ? , ? , ? , ? , ? ) " , " Pavel " , " US " , 27 , 183 , 1 . 0 ) ; <nl> - executeCQL ( " INSERT INTO % s . % s ( name , location , age , height , score ) VALUES ( ? , ? , ? , ? , ? ) " , " Pavel " , " BY " , 28 , 182 , 2 . 0 ) ; <nl> - executeCQL ( " INSERT INTO % s . % s ( name , location , age , height , score ) VALUES ( ? , ? , ? , ? , ? ) " , " Jordan " , " US " , 27 , 182 , 1 . 0 ) ; <nl> + executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " INSERT INTO % s . % s ( name , location , age , height , score ) VALUES ( ? , ? , ? , ? , ? ) " , " Pavel " , " US " , 27 , 183 , 1 . 0 ) ; <nl> + executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " INSERT INTO % s . % s ( name , location , age , height , score ) VALUES ( ? , ? , ? , ? , ? ) " , " Pavel " , " BY " , 28 , 182 , 2 . 0 ) ; <nl> + executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " INSERT INTO % s . % s ( name , location , age , height , score ) VALUES ( ? , ? , ? , ? , ? ) " , " Jordan " , " US " , 27 , 182 , 1 . 0 ) ; <nl> <nl> if ( forceFlush ) <nl> store . forceBlockingFlush ( ) ; <nl> <nl> UntypedResultSet results ; <nl> <nl> - results = executeCQL ( " SELECT * FROM % s . % s WHERE location = ? ALLOW FILTERING " , " US " ) ; <nl> + results = executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE location = ? ALLOW FILTERING " , " US " ) ; <nl> Assert . assertNotNull ( results ) ; <nl> Assert . assertEquals ( 2 , results . size ( ) ) ; <nl> <nl> - results = executeCQL ( " SELECT * FROM % s . % s WHERE age > = ? AND height = ? ALLOW FILTERING " , 27 , 182 ) ; <nl> + results = executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE age > = ? AND height = ? ALLOW FILTERING " , 27 , 182 ) ; <nl> Assert . assertNotNull ( results ) ; <nl> Assert . assertEquals ( 2 , results . size ( ) ) ; <nl> <nl> - results = executeCQL ( " SELECT * FROM % s . % s WHERE age = ? AND height = ? ALLOW FILTERING " , 28 , 182 ) ; <nl> + results = executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE age = ? AND height = ? ALLOW FILTERING " , 28 , 182 ) ; <nl> Assert . assertNotNull ( results ) ; <nl> Assert . assertEquals ( 1 , results . size ( ) ) ; <nl> <nl> - results = executeCQL ( " SELECT * FROM % s . % s WHERE age > = ? AND height = ? AND score > = ? ALLOW FILTERING " , 27 , 182 , 1 . 0 ) ; <nl> + results = executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE age > = ? AND height = ? AND score > = ? ALLOW FILTERING " , 27 , 182 , 1 . 0 ) ; <nl> Assert . assertNotNull ( results ) ; <nl> Assert . assertEquals ( 2 , results . size ( ) ) ; <nl> <nl> - results = executeCQL ( " SELECT * FROM % s . % s WHERE age > = ? AND height = ? AND score = ? ALLOW FILTERING " , 27 , 182 , 1 . 0 ) ; <nl> + results = executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE age > = ? AND height = ? AND score = ? ALLOW FILTERING " , 27 , 182 , 1 . 0 ) ; <nl> Assert . assertNotNull ( results ) ; <nl> Assert . assertEquals ( 1 , results . size ( ) ) ; <nl> <nl> - results = executeCQL ( " SELECT * FROM % s . % s WHERE location = ? AND age > = ? ALLOW FILTERING " , " US " , 27 ) ; <nl> + results = executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE location = ? AND age > = ? ALLOW FILTERING " , " US " , 27 ) ; <nl> Assert . assertNotNull ( results ) ; <nl> Assert . assertEquals ( 2 , results . size ( ) ) ; <nl> <nl> - results = executeCQL ( " SELECT * FROM % s . % s WHERE location = ? ALLOW FILTERING " , " BY " ) ; <nl> + results = executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE location = ? ALLOW FILTERING " , " BY " ) ; <nl> Assert . assertNotNull ( results ) ; <nl> Assert . assertEquals ( 1 , results . size ( ) ) ; <nl> <nl> - results = executeCQL ( " SELECT * FROM % s . % s WHERE location LIKE ' U % % ' ALLOW FILTERING " ) ; <nl> + results = executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE location LIKE ' U % % ' ALLOW FILTERING " ) ; <nl> Assert . assertNotNull ( results ) ; <nl> Assert . assertEquals ( 2 , results . size ( ) ) ; <nl> <nl> - results = executeCQL ( " SELECT * FROM % s . % s WHERE location LIKE ' U % % ' AND height > = 183 ALLOW FILTERING " ) ; <nl> + results = executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE location LIKE ' U % % ' AND height > = 183 ALLOW FILTERING " ) ; <nl> Assert . assertNotNull ( results ) ; <nl> Assert . assertEquals ( 1 , results . size ( ) ) ; <nl> <nl> - results = executeCQL ( " SELECT * FROM % s . % s WHERE location LIKE ' US % % ' ALLOW FILTERING " ) ; <nl> + results = executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE location LIKE ' US % % ' ALLOW FILTERING " ) ; <nl> Assert . assertNotNull ( results ) ; <nl> Assert . assertEquals ( 2 , results . size ( ) ) ; <nl> <nl> - results = executeCQL ( " SELECT * FROM % s . % s WHERE location LIKE ' US ' ALLOW FILTERING " ) ; <nl> + results = executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE location LIKE ' US ' ALLOW FILTERING " ) ; <nl> Assert . assertNotNull ( results ) ; <nl> Assert . assertEquals ( 2 , results . size ( ) ) ; <nl> <nl> try <nl> { <nl> - executeCQL ( " SELECT * FROM % s . % s WHERE location LIKE ' % % U ' ALLOW FILTERING " ) ; <nl> + executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE location LIKE ' % % U ' ALLOW FILTERING " ) ; <nl> Assert . fail ( ) ; <nl> } <nl> catch ( InvalidRequestException e ) <nl> @ @ - 1689 , 7 + 1691 , 7 @ @ public class SASIIndexTest <nl> <nl> try <nl> { <nl> - executeCQL ( " SELECT * FROM % s . % s WHERE location LIKE ' % % ' ALLOW FILTERING " ) ; <nl> + executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE location LIKE ' % % ' ALLOW FILTERING " ) ; <nl> Assert . fail ( ) ; <nl> } <nl> catch ( SyntaxException e ) <nl> @ @ - 1700 , 7 + 1702 , 7 @ @ public class SASIIndexTest <nl> <nl> try <nl> { <nl> - executeCQL ( " SELECT * FROM % s . % s WHERE location LIKE ' % % % % ' ALLOW FILTERING " ) ; <nl> + executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE location LIKE ' % % % % ' ALLOW FILTERING " ) ; <nl> Assert . fail ( ) ; <nl> } <nl> catch ( SyntaxException e ) <nl> @ @ - 1708 , 6 + 1710 , 19 @ @ public class SASIIndexTest <nl> Assert . assertTrue ( e . getMessage ( ) . contains ( " empty " ) ) ; <nl> / / expected <nl> } <nl> + <nl> + / / check restrictions on non - indexed clustering columns when preceding columns are indexed <nl> + store = Keyspace . open ( KS _ NAME ) . getColumnFamilyStore ( CLUSTERING _ CF _ NAME _ 2 ) ; <nl> + executeCQL ( CLUSTERING _ CF _ NAME _ 2 , " INSERT INTO % s . % s ( name , location , age , height , score ) VALUES ( ? , ? , ? , ? , ? ) " , " Tony " , " US " , 43 , 184 , 2 . 0 ) ; <nl> + executeCQL ( CLUSTERING _ CF _ NAME _ 2 , " INSERT INTO % s . % s ( name , location , age , height , score ) VALUES ( ? , ? , ? , ? , ? ) " , " Christopher " , " US " , 27 , 180 , 1 . 0 ) ; <nl> + <nl> + if ( forceFlush ) <nl> + store . forceBlockingFlush ( ) ; <nl> + <nl> + results = executeCQL ( CLUSTERING _ CF _ NAME _ 2 , " SELECT * FROM % s . % s WHERE location LIKE ' US ' AND age = 43 ALLOW FILTERING " ) ; <nl> + Assert . assertNotNull ( results ) ; <nl> + Assert . assertEquals ( 1 , results . size ( ) ) ; <nl> + Assert . assertEquals ( " Tony " , results . one ( ) . getString ( " name " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 2037 , 7 + 2052 , 7 @ @ public class SASIIndexTest <nl> { <nl> Keyspace ks = Keyspace . open ( KS _ NAME ) ; <nl> ks . getColumnFamilyStore ( CF _ NAME ) . truncateBlocking ( ) ; <nl> - ks . getColumnFamilyStore ( CLUSTERING _ CF _ NAME ) . truncateBlocking ( ) ; <nl> + ks . getColumnFamilyStore ( CLUSTERING _ CF _ NAME _ 1 ) . truncateBlocking ( ) ; <nl> } <nl> <nl> private static Set < String > getIndexed ( ColumnFamilyStore store , int maxResults , Expression . . . expressions ) <nl> @ @ - 2150 , 9 + 2165 , 9 @ @ public class SASIIndexTest <nl> } } ; <nl> } <nl> <nl> - private UntypedResultSet executeCQL ( String query , Object . . . values ) <nl> + private UntypedResultSet executeCQL ( String cfName , String query , Object . . . values ) <nl> { <nl> - return QueryProcessor . executeOnceInternal ( String . format ( query , KS _ NAME , CLUSTERING _ CF _ NAME ) , values ) ; <nl> + return QueryProcessor . executeOnceInternal ( String . format ( query , KS _ NAME , cfName ) , values ) ; <nl> } <nl> <nl> private Set < String > executeCQLWithKeys ( String rawStatement ) throws Exception
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 85fca0f . . 7441abd 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 5 
 + * Fix clustering and row filters for LIKE queries on clustering columns ( CASSANDRA - 11397 ) 
 Merged from 3 . 0 : 
 * Allocate merkletrees with the correct size ( CASSANDRA - 11390 ) 
 * Support streaming pre - 3 . 0 sstables ( CASSANDRA - 10990 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / PrimaryKeyRestrictionSet . java b / src / java / org / apache / cassandra / cql3 / restrictions / PrimaryKeyRestrictionSet . java 
 index 978ebbc . . 7d0c3df 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / restrictions / PrimaryKeyRestrictionSet . java 
 + + + b / src / java / org / apache / cassandra / cql3 / restrictions / PrimaryKeyRestrictionSet . java 
 @ @ - 55 , 6 + 55 , 11 @ @ final class PrimaryKeyRestrictionSet extends AbstractPrimaryKeyRestrictions 
 private boolean in ; 
 
 / * * 
 + * < code > true < / code > if the restrictions are corresponding to a LIKE , < code > false < / code > otherwise . 
 + * / 
 + private boolean like ; 
 + 
 + / * * 
 * < code > true < / code > if the restrictions are corresponding to a Slice , < code > false < / code > otherwise . 
 * / 
 private boolean slice ; 
 @ @ - 106 , 6 + 111 , 8 @ @ final class PrimaryKeyRestrictionSet extends AbstractPrimaryKeyRestrictions 
 this . contains = true ; 
 else if ( restriction . isIN ( ) | | primaryKeyRestrictions . isIN ( ) ) 
 this . in = true ; 
 + else if ( restriction . isLIKE ( ) | | primaryKeyRestrictions . isLIKE ( ) ) 
 + this . like = true ; 
 else 
 this . eq = true ; 
 } 
 @ @ - 138 , 6 + 145 , 12 @ @ final class PrimaryKeyRestrictionSet extends AbstractPrimaryKeyRestrictions 
 } 
 
 @ Override 
 + public boolean isLIKE ( ) 
 + { 
 + return like ; 
 + } 
 + 
 + @ Override 
 public boolean isContains ( ) 
 { 
 return contains ; 
 @ @ - 220 , 7 + 233 , 7 @ @ final class PrimaryKeyRestrictionSet extends AbstractPrimaryKeyRestrictions 
 { 
 ColumnDefinition def = r . getFirstColumn ( ) ; 
 
 - if ( keyPosition ! = def . position ( ) | | r . isContains ( ) ) 
 + if ( keyPosition ! = def . position ( ) | | r . isContains ( ) | | r . isLIKE ( ) ) 
 break ; 
 
 if ( r . isSlice ( ) ) 
 @ @ - 296 , 7 + 309 , 7 @ @ final class PrimaryKeyRestrictionSet extends AbstractPrimaryKeyRestrictions 
 ColumnDefinition columnDef = restriction . getFirstColumn ( ) ; 
 
 / / We ignore all the clustering columns that can be handled by slices . 
 - if ( ! isPartitionKey & & ! restriction . isContains ( ) & & position = = columnDef . position ( ) ) 
 + if ( ! isPartitionKey & & ! ( restriction . isContains ( ) | | restriction . isLIKE ( ) ) & & position = = columnDef . position ( ) ) 
 { 
 position = restriction . getLastColumn ( ) . position ( ) + 1 ; 
 if ( ! restriction . hasSupportingIndex ( indexManager ) ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / SingleColumnRestriction . java b / src / java / org / apache / cassandra / cql3 / restrictions / SingleColumnRestriction . java 
 index d237d02 . . ab4815a 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / restrictions / SingleColumnRestriction . java 
 + + + b / src / java / org / apache / cassandra / cql3 / restrictions / SingleColumnRestriction . java 
 @ @ - 704 , 10 + 704 , 10 @ @ public abstract class SingleColumnRestriction extends AbstractRestriction 
 @ Override 
 public MultiCBuilder appendTo ( MultiCBuilder builder , QueryOptions options ) 
 { 
 - / / LIKE could be used with clustering columns as soon as they are indexed , 
 - / / but we have to hide such expression from clustering filter since it 
 - / / can only filter based on the complete values . 
 - return builder ; 
 + / / LIKE can be used with clustering columns , but as it doesn ' t 
 + / / represent an actual clustering value , it can ' t be used in a 
 + / / clustering filter . 
 + throw new UnsupportedOperationException ( ) ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java b / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java 
 index 123e33b . . 0672a99 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java 
 + + + b / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java 
 @ @ - 737 , 7 + 737 , 7 @ @ public final class StatementRestrictions 
 / / this would mean a ' SELECT * ' on a static compact table would query whole partitions , even though we ' ll only return 
 / / the static part as far as CQL is concerned . This is thus mostly an optimization to use the query - by - name path ) . 
 int numberOfClusteringColumns = cfm . isStaticCompactTable ( ) ? 0 : cfm . clusteringColumns ( ) . size ( ) ; 
 - / / it is a range query if it has at least one the column alias for which no relation is defined or is not EQ . 
 + / / it is a range query if it has at least one the column alias for which no relation is defined or is not EQ or IN . 
 return clusteringColumnsRestrictions . size ( ) < numberOfClusteringColumns 
 | | ( ! clusteringColumnsRestrictions . isEQ ( ) & & ! clusteringColumnsRestrictions . isIN ( ) ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / SchemaLoader . java b / test / unit / org / apache / cassandra / SchemaLoader . java 
 index 9a8c424 . . e68dd94 100644 
 - - - a / test / unit / org / apache / cassandra / SchemaLoader . java 
 + + + b / test / unit / org / apache / cassandra / SchemaLoader . java 
 @ @ - 578 , 6 + 578 , 11 @ @ public class SchemaLoader 
 
 public static CFMetaData clusteringSASICFMD ( String ksName , String cfName ) 
 { 
 + return clusteringSASICFMD ( ksName , cfName , " location " , " age " , " height " , " score " ) ; 
 + } 
 + 
 + public static CFMetaData clusteringSASICFMD ( String ksName , String cfName , String . . . indexedColumns ) 
 + { 
 CFMetaData cfm = CFMetaData . Builder . create ( ksName , cfName ) 
 . addPartitionKey ( " name " , UTF8Type . instance ) 
 . addClusteringColumn ( " location " , UTF8Type . instance ) 
 @ @ - 586 , 32 + 591 , 17 @ @ public class SchemaLoader 
 . addRegularColumn ( " score " , DoubleType . instance ) 
 . build ( ) ; 
 
 - cfm . indexes ( cfm . getIndexes ( ) 
 - . with ( IndexMetadata . fromSchemaMetadata ( " location " , IndexMetadata . Kind . CUSTOM , new HashMap < String , String > ( ) 
 - { { 
 - put ( IndexTarget . CUSTOM _ INDEX _ OPTION _ NAME , SASIIndex . class . getName ( ) ) ; 
 - put ( IndexTarget . TARGET _ OPTION _ NAME , " location " ) ; 
 - put ( " mode " , OnDiskIndexBuilder . Mode . PREFIX . toString ( ) ) ; 
 - } } ) ) 
 - . with ( IndexMetadata . fromSchemaMetadata ( " age " , IndexMetadata . Kind . CUSTOM , new HashMap < String , String > ( ) 
 - { { 
 - put ( IndexTarget . CUSTOM _ INDEX _ OPTION _ NAME , SASIIndex . class . getName ( ) ) ; 
 - put ( IndexTarget . TARGET _ OPTION _ NAME , " age " ) ; 
 - put ( " mode " , OnDiskIndexBuilder . Mode . PREFIX . toString ( ) ) ; 
 - } } ) ) 
 - . with ( IndexMetadata . fromSchemaMetadata ( " height " , IndexMetadata . Kind . CUSTOM , new HashMap < String , String > ( ) 
 - { { 
 - put ( IndexTarget . CUSTOM _ INDEX _ OPTION _ NAME , SASIIndex . class . getName ( ) ) ; 
 - put ( IndexTarget . TARGET _ OPTION _ NAME , " height " ) ; 
 - put ( " mode " , OnDiskIndexBuilder . Mode . PREFIX . toString ( ) ) ; 
 - } } ) ) 
 - . with ( IndexMetadata . fromSchemaMetadata ( " score " , IndexMetadata . Kind . CUSTOM , new HashMap < String , String > ( ) 
 - { { 
 - put ( IndexTarget . CUSTOM _ INDEX _ OPTION _ NAME , SASIIndex . class . getName ( ) ) ; 
 - put ( IndexTarget . TARGET _ OPTION _ NAME , " score " ) ; 
 - put ( " mode " , OnDiskIndexBuilder . Mode . PREFIX . toString ( ) ) ; 
 - } } ) ) ) ; 
 - 
 + Indexes indexes = cfm . getIndexes ( ) ; 
 + for ( String indexedColumn : indexedColumns ) 
 + { 
 + indexes = indexes . with ( IndexMetadata . fromSchemaMetadata ( indexedColumn , IndexMetadata . Kind . CUSTOM , new HashMap < String , String > ( ) 
 + { { 
 + put ( IndexTarget . CUSTOM _ INDEX _ OPTION _ NAME , SASIIndex . class . getName ( ) ) ; 
 + put ( IndexTarget . TARGET _ OPTION _ NAME , indexedColumn ) ; 
 + put ( " mode " , OnDiskIndexBuilder . Mode . PREFIX . toString ( ) ) ; 
 + } } ) ) ; 
 + } 
 + cfm . indexes ( indexes ) ; 
 return cfm ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java b / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java 
 index c9d66f7 . . ca6e9a1 100644 
 - - - a / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java 
 + + + b / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java 
 @ @ - 80 , 7 + 80 , 8 @ @ public class SASIIndexTest 
 
 private static final String KS _ NAME = " sasi " ; 
 private static final String CF _ NAME = " test _ cf " ; 
 - private static final String CLUSTERING _ CF _ NAME = " clustering _ test _ cf " ; 
 + private static final String CLUSTERING _ CF _ NAME _ 1 = " clustering _ test _ cf _ 1 " ; 
 + private static final String CLUSTERING _ CF _ NAME _ 2 = " clustering _ test _ cf _ 2 " ; 
 
 @ BeforeClass 
 public static void loadSchema ( ) throws ConfigurationException 
 @ @ - 90 , 7 + 91 , 8 @ @ public class SASIIndexTest 
 MigrationManager . announceNewKeyspace ( KeyspaceMetadata . create ( KS _ NAME , 
 KeyspaceParams . simpleTransient ( 1 ) , 
 Tables . of ( SchemaLoader . sasiCFMD ( KS _ NAME , CF _ NAME ) , 
 - SchemaLoader . clusteringSASICFMD ( KS _ NAME , CLUSTERING _ CF _ NAME ) ) ) ) ; 
 + SchemaLoader . clusteringSASICFMD ( KS _ NAME , CLUSTERING _ CF _ NAME _ 1 ) , 
 + SchemaLoader . clusteringSASICFMD ( KS _ NAME , CLUSTERING _ CF _ NAME _ 2 , " location " ) ) ) ) ; 
 } 
 
 @ After 
 @ @ - 1621 , 64 + 1623 , 64 @ @ public class SASIIndexTest 
 
 public void testClusteringIndexes ( boolean forceFlush ) throws Exception 
 { 
 - ColumnFamilyStore store = Keyspace . open ( KS _ NAME ) . getColumnFamilyStore ( CLUSTERING _ CF _ NAME ) ; 
 + ColumnFamilyStore store = Keyspace . open ( KS _ NAME ) . getColumnFamilyStore ( CLUSTERING _ CF _ NAME _ 1 ) ; 
 
 - executeCQL ( " INSERT INTO % s . % s ( name , location , age , height , score ) VALUES ( ? , ? , ? , ? , ? ) " , " Pavel " , " US " , 27 , 183 , 1 . 0 ) ; 
 - executeCQL ( " INSERT INTO % s . % s ( name , location , age , height , score ) VALUES ( ? , ? , ? , ? , ? ) " , " Pavel " , " BY " , 28 , 182 , 2 . 0 ) ; 
 - executeCQL ( " INSERT INTO % s . % s ( name , location , age , height , score ) VALUES ( ? , ? , ? , ? , ? ) " , " Jordan " , " US " , 27 , 182 , 1 . 0 ) ; 
 + executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " INSERT INTO % s . % s ( name , location , age , height , score ) VALUES ( ? , ? , ? , ? , ? ) " , " Pavel " , " US " , 27 , 183 , 1 . 0 ) ; 
 + executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " INSERT INTO % s . % s ( name , location , age , height , score ) VALUES ( ? , ? , ? , ? , ? ) " , " Pavel " , " BY " , 28 , 182 , 2 . 0 ) ; 
 + executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " INSERT INTO % s . % s ( name , location , age , height , score ) VALUES ( ? , ? , ? , ? , ? ) " , " Jordan " , " US " , 27 , 182 , 1 . 0 ) ; 
 
 if ( forceFlush ) 
 store . forceBlockingFlush ( ) ; 
 
 UntypedResultSet results ; 
 
 - results = executeCQL ( " SELECT * FROM % s . % s WHERE location = ? ALLOW FILTERING " , " US " ) ; 
 + results = executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE location = ? ALLOW FILTERING " , " US " ) ; 
 Assert . assertNotNull ( results ) ; 
 Assert . assertEquals ( 2 , results . size ( ) ) ; 
 
 - results = executeCQL ( " SELECT * FROM % s . % s WHERE age > = ? AND height = ? ALLOW FILTERING " , 27 , 182 ) ; 
 + results = executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE age > = ? AND height = ? ALLOW FILTERING " , 27 , 182 ) ; 
 Assert . assertNotNull ( results ) ; 
 Assert . assertEquals ( 2 , results . size ( ) ) ; 
 
 - results = executeCQL ( " SELECT * FROM % s . % s WHERE age = ? AND height = ? ALLOW FILTERING " , 28 , 182 ) ; 
 + results = executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE age = ? AND height = ? ALLOW FILTERING " , 28 , 182 ) ; 
 Assert . assertNotNull ( results ) ; 
 Assert . assertEquals ( 1 , results . size ( ) ) ; 
 
 - results = executeCQL ( " SELECT * FROM % s . % s WHERE age > = ? AND height = ? AND score > = ? ALLOW FILTERING " , 27 , 182 , 1 . 0 ) ; 
 + results = executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE age > = ? AND height = ? AND score > = ? ALLOW FILTERING " , 27 , 182 , 1 . 0 ) ; 
 Assert . assertNotNull ( results ) ; 
 Assert . assertEquals ( 2 , results . size ( ) ) ; 
 
 - results = executeCQL ( " SELECT * FROM % s . % s WHERE age > = ? AND height = ? AND score = ? ALLOW FILTERING " , 27 , 182 , 1 . 0 ) ; 
 + results = executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE age > = ? AND height = ? AND score = ? ALLOW FILTERING " , 27 , 182 , 1 . 0 ) ; 
 Assert . assertNotNull ( results ) ; 
 Assert . assertEquals ( 1 , results . size ( ) ) ; 
 
 - results = executeCQL ( " SELECT * FROM % s . % s WHERE location = ? AND age > = ? ALLOW FILTERING " , " US " , 27 ) ; 
 + results = executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE location = ? AND age > = ? ALLOW FILTERING " , " US " , 27 ) ; 
 Assert . assertNotNull ( results ) ; 
 Assert . assertEquals ( 2 , results . size ( ) ) ; 
 
 - results = executeCQL ( " SELECT * FROM % s . % s WHERE location = ? ALLOW FILTERING " , " BY " ) ; 
 + results = executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE location = ? ALLOW FILTERING " , " BY " ) ; 
 Assert . assertNotNull ( results ) ; 
 Assert . assertEquals ( 1 , results . size ( ) ) ; 
 
 - results = executeCQL ( " SELECT * FROM % s . % s WHERE location LIKE ' U % % ' ALLOW FILTERING " ) ; 
 + results = executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE location LIKE ' U % % ' ALLOW FILTERING " ) ; 
 Assert . assertNotNull ( results ) ; 
 Assert . assertEquals ( 2 , results . size ( ) ) ; 
 
 - results = executeCQL ( " SELECT * FROM % s . % s WHERE location LIKE ' U % % ' AND height > = 183 ALLOW FILTERING " ) ; 
 + results = executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE location LIKE ' U % % ' AND height > = 183 ALLOW FILTERING " ) ; 
 Assert . assertNotNull ( results ) ; 
 Assert . assertEquals ( 1 , results . size ( ) ) ; 
 
 - results = executeCQL ( " SELECT * FROM % s . % s WHERE location LIKE ' US % % ' ALLOW FILTERING " ) ; 
 + results = executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE location LIKE ' US % % ' ALLOW FILTERING " ) ; 
 Assert . assertNotNull ( results ) ; 
 Assert . assertEquals ( 2 , results . size ( ) ) ; 
 
 - results = executeCQL ( " SELECT * FROM % s . % s WHERE location LIKE ' US ' ALLOW FILTERING " ) ; 
 + results = executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE location LIKE ' US ' ALLOW FILTERING " ) ; 
 Assert . assertNotNull ( results ) ; 
 Assert . assertEquals ( 2 , results . size ( ) ) ; 
 
 try 
 { 
 - executeCQL ( " SELECT * FROM % s . % s WHERE location LIKE ' % % U ' ALLOW FILTERING " ) ; 
 + executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE location LIKE ' % % U ' ALLOW FILTERING " ) ; 
 Assert . fail ( ) ; 
 } 
 catch ( InvalidRequestException e ) 
 @ @ - 1689 , 7 + 1691 , 7 @ @ public class SASIIndexTest 
 
 try 
 { 
 - executeCQL ( " SELECT * FROM % s . % s WHERE location LIKE ' % % ' ALLOW FILTERING " ) ; 
 + executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE location LIKE ' % % ' ALLOW FILTERING " ) ; 
 Assert . fail ( ) ; 
 } 
 catch ( SyntaxException e ) 
 @ @ - 1700 , 7 + 1702 , 7 @ @ public class SASIIndexTest 
 
 try 
 { 
 - executeCQL ( " SELECT * FROM % s . % s WHERE location LIKE ' % % % % ' ALLOW FILTERING " ) ; 
 + executeCQL ( CLUSTERING _ CF _ NAME _ 1 , " SELECT * FROM % s . % s WHERE location LIKE ' % % % % ' ALLOW FILTERING " ) ; 
 Assert . fail ( ) ; 
 } 
 catch ( SyntaxException e ) 
 @ @ - 1708 , 6 + 1710 , 19 @ @ public class SASIIndexTest 
 Assert . assertTrue ( e . getMessage ( ) . contains ( " empty " ) ) ; 
 / / expected 
 } 
 + 
 + / / check restrictions on non - indexed clustering columns when preceding columns are indexed 
 + store = Keyspace . open ( KS _ NAME ) . getColumnFamilyStore ( CLUSTERING _ CF _ NAME _ 2 ) ; 
 + executeCQL ( CLUSTERING _ CF _ NAME _ 2 , " INSERT INTO % s . % s ( name , location , age , height , score ) VALUES ( ? , ? , ? , ? , ? ) " , " Tony " , " US " , 43 , 184 , 2 . 0 ) ; 
 + executeCQL ( CLUSTERING _ CF _ NAME _ 2 , " INSERT INTO % s . % s ( name , location , age , height , score ) VALUES ( ? , ? , ? , ? , ? ) " , " Christopher " , " US " , 27 , 180 , 1 . 0 ) ; 
 + 
 + if ( forceFlush ) 
 + store . forceBlockingFlush ( ) ; 
 + 
 + results = executeCQL ( CLUSTERING _ CF _ NAME _ 2 , " SELECT * FROM % s . % s WHERE location LIKE ' US ' AND age = 43 ALLOW FILTERING " ) ; 
 + Assert . assertNotNull ( results ) ; 
 + Assert . assertEquals ( 1 , results . size ( ) ) ; 
 + Assert . assertEquals ( " Tony " , results . one ( ) . getString ( " name " ) ) ; 
 } 
 
 @ Test 
 @ @ - 2037 , 7 + 2052 , 7 @ @ public class SASIIndexTest 
 { 
 Keyspace ks = Keyspace . open ( KS _ NAME ) ; 
 ks . getColumnFamilyStore ( CF _ NAME ) . truncateBlocking ( ) ; 
 - ks . getColumnFamilyStore ( CLUSTERING _ CF _ NAME ) . truncateBlocking ( ) ; 
 + ks . getColumnFamilyStore ( CLUSTERING _ CF _ NAME _ 1 ) . truncateBlocking ( ) ; 
 } 
 
 private static Set < String > getIndexed ( ColumnFamilyStore store , int maxResults , Expression . . . expressions ) 
 @ @ - 2150 , 9 + 2165 , 9 @ @ public class SASIIndexTest 
 } } ; 
 } 
 
 - private UntypedResultSet executeCQL ( String query , Object . . . values ) 
 + private UntypedResultSet executeCQL ( String cfName , String query , Object . . . values ) 
 { 
 - return QueryProcessor . executeOnceInternal ( String . format ( query , KS _ NAME , CLUSTERING _ CF _ NAME ) , values ) ; 
 + return QueryProcessor . executeOnceInternal ( String . format ( query , KS _ NAME , cfName ) , values ) ; 
 } 
 
 private Set < String > executeCQLWithKeys ( String rawStatement ) throws Exception

NEAREST DIFF:
ELIMINATEDSENTENCE
