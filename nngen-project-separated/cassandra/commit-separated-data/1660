BLEU SCORE: 0.05954672553679791

TEST MSG: ninja fix LongBTreeTest
GENERATED MSG: Reduce garbage generated by bloom filter lookups

TEST DIFF (one line): diff - - git a / test / long / org / apache / cassandra / utils / LongBTreeTest . java b / test / long / org / apache / cassandra / utils / LongBTreeTest . java <nl> index 133c6c5 . . 9641930 100644 <nl> - - - a / test / long / org / apache / cassandra / utils / LongBTreeTest . java <nl> + + + b / test / long / org / apache / cassandra / utils / LongBTreeTest . java <nl> @ @ - 148 , 6 + 148 , 7 @ @ public class LongBTreeTest <nl> for ( Integer key : randomSelection ( tree , random ) ) <nl> if ( key ! = searchIterator . next ( key ) ) <nl> errors . incrementAndGet ( ) ; <nl> + searchIterator = new BTreeSearchIterator < Integer , Integer , Integer > ( tree , ICMP ) ; <nl> for ( Integer key : randomMix ( tree , random ) ) <nl> if ( key ! = searchIterator . next ( key ) ) <nl> if ( BTree . find ( tree , ICMP , key ) = = key ) <nl> @ @ - 455 , 13 + 456 , 15 @ @ public class LongBTreeTest <nl> final float proportion = rnd . nextFloat ( ) ; <nl> return Iterables . transform ( new BTreeSet < > ( iter , ICMP ) , new Function < Integer , Integer > ( ) <nl> { <nl> - int last = Integer . MIN _ VALUE ; <nl> + long last = Integer . MIN _ VALUE ; <nl> <nl> public Integer apply ( Integer v ) <nl> { <nl> + long last = this . last ; <nl> + this . last = v ; <nl> if ( rnd . nextFloat ( ) < proportion ) <nl> - return last = v ; <nl> - return last = ( v - last ) / 2 ; <nl> + return v ; <nl> + return ( int ) ( ( v - last ) / 2 ) ; <nl> } <nl> } ) ; <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / test / long / org / apache / cassandra / utils / LongBTreeTest . java b / test / long / org / apache / cassandra / utils / LongBTreeTest . java 
 index 133c6c5 . . 9641930 100644 
 - - - a / test / long / org / apache / cassandra / utils / LongBTreeTest . java 
 + + + b / test / long / org / apache / cassandra / utils / LongBTreeTest . java 
 @ @ - 148 , 6 + 148 , 7 @ @ public class LongBTreeTest 
 for ( Integer key : randomSelection ( tree , random ) ) 
 if ( key ! = searchIterator . next ( key ) ) 
 errors . incrementAndGet ( ) ; 
 + searchIterator = new BTreeSearchIterator < Integer , Integer , Integer > ( tree , ICMP ) ; 
 for ( Integer key : randomMix ( tree , random ) ) 
 if ( key ! = searchIterator . next ( key ) ) 
 if ( BTree . find ( tree , ICMP , key ) = = key ) 
 @ @ - 455 , 13 + 456 , 15 @ @ public class LongBTreeTest 
 final float proportion = rnd . nextFloat ( ) ; 
 return Iterables . transform ( new BTreeSet < > ( iter , ICMP ) , new Function < Integer , Integer > ( ) 
 { 
 - int last = Integer . MIN _ VALUE ; 
 + long last = Integer . MIN _ VALUE ; 
 
 public Integer apply ( Integer v ) 
 { 
 + long last = this . last ; 
 + this . last = v ; 
 if ( rnd . nextFloat ( ) < proportion ) 
 - return last = v ; 
 - return last = ( v - last ) / 2 ; 
 + return v ; 
 + return ( int ) ( ( v - last ) / 2 ) ; 
 } 
 } ) ; 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
