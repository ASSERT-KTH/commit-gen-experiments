BLEU SCORE: 0.07160476144948855

TEST MSG: merge from 2 . 0
GENERATED MSG: Enable tcp keepalive on incoming connections .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index dcc7e33 . . 6c9f2e1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 20 , 6 + 20 , 7 @ @ <nl> <nl> <nl> 2 . 0 . 4 <nl> + * Fix size - tiered compaction in LCS L0 ( CASSANDRA - 6496 ) <nl> * Fix assertion failure in filterColdSSTables ( CASSANDRA - 6483 ) <nl> * Fix row tombstones in larger - than - memory compactions ( CASSANDRA - 6008 ) <nl> * Fix cleanup ClassCastException ( CASSANDRA - 6462 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> index dac3d47 . . 929279a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> @ @ - 167 , 7 + 167 , 7 @ @ public abstract class AbstractCompactionStrategy <nl> / * * <nl> * @ return size in bytes of the largest sstables for this strategy <nl> * / <nl> - public abstract long getMaxSSTableSize ( ) ; <nl> + public abstract long getMaxSSTableBytes ( ) ; <nl> <nl> public boolean isEnabled ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> index 59f2f2f . . cabe486 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> @ @ - 119 , 7 + 119 , 7 @ @ public class CompactionTask extends AbstractCompactionTask <nl> long totalkeysWritten = 0 ; <nl> <nl> long estimatedTotalKeys = Math . max ( cfs . metadata . getIndexInterval ( ) , SSTableReader . getApproximateKeyCount ( actuallyCompact , cfs . metadata ) ) ; <nl> - long estimatedSSTables = Math . max ( 1 , SSTableReader . getTotalBytes ( actuallyCompact ) / strategy . getMaxSSTableSize ( ) ) ; <nl> + long estimatedSSTables = Math . max ( 1 , SSTableReader . getTotalBytes ( actuallyCompact ) / strategy . getMaxSSTableBytes ( ) ) ; <nl> long keysPerSSTable = ( long ) Math . ceil ( ( double ) estimatedTotalKeys / estimatedSSTables ) ; <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( " Expected bloom filter size : { } " , keysPerSSTable ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> index 3eb5e91 . . a5ef41d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> @ @ - 37 , 7 + 37 , 6 @ @ import org . apache . cassandra . notifications . INotification ; <nl> import org . apache . cassandra . notifications . INotificationConsumer ; <nl> import org . apache . cassandra . notifications . SSTableAddedNotification ; <nl> import org . apache . cassandra . notifications . SSTableListChangedNotification ; <nl> - import org . apache . cassandra . utils . Pair ; <nl> <nl> public class LeveledCompactionStrategy extends AbstractCompactionStrategy implements INotificationConsumer <nl> { <nl> @ @ - 110 , 11 + 109 , 9 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy implem <nl> { <nl> while ( true ) <nl> { <nl> - Pair < ? extends Collection < SSTableReader > , Integer > pair = manifest . getCompactionCandidates ( ) ; <nl> - Collection < SSTableReader > sstables ; <nl> OperationType op ; <nl> - int level ; <nl> - if ( pair = = null ) <nl> + LeveledManifest . CompactionCandidate candidate = manifest . getCompactionCandidates ( ) ; <nl> + if ( candidate = = null ) <nl> { <nl> / / if there is no sstable to compact in standard way , try compacting based on droppable tombstone ratio <nl> SSTableReader sstable = findDroppableSSTable ( gcBefore ) ; <nl> @ @ - 123 , 20 + 120 , 19 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy implem <nl> logger . debug ( " No compaction necessary for { } " , this ) ; <nl> return null ; <nl> } <nl> - sstables = Collections . singleton ( sstable ) ; <nl> + candidate = new LeveledManifest . CompactionCandidate ( Collections . singleton ( sstable ) , <nl> + sstable . getSSTableLevel ( ) , <nl> + getMaxSSTableBytes ( ) ) ; <nl> op = OperationType . TOMBSTONE _ COMPACTION ; <nl> - level = sstable . getSSTableLevel ( ) ; <nl> } <nl> else <nl> { <nl> op = OperationType . COMPACTION ; <nl> - sstables = pair . left ; <nl> - level = pair . right ; <nl> } <nl> <nl> - if ( cfs . getDataTracker ( ) . markCompacting ( sstables ) ) <nl> + if ( cfs . getDataTracker ( ) . markCompacting ( candidate . sstables ) ) <nl> { <nl> - LeveledCompactionTask newTask = new LeveledCompactionTask ( cfs , sstables , level , gcBefore , maxSSTableSizeInMB ) ; <nl> + LeveledCompactionTask newTask = new LeveledCompactionTask ( cfs , candidate . sstables , candidate . level , gcBefore , candidate . maxSSTableBytes ) ; <nl> newTask . setCompactionType ( op ) ; <nl> return newTask ; <nl> } <nl> @ @ - 167 , 7 + 163 , 7 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy implem <nl> } <nl> } <nl> <nl> - public long getMaxSSTableSize ( ) <nl> + public long getMaxSSTableBytes ( ) <nl> { <nl> return maxSSTableSizeInMB * 1024L * 1024L ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java <nl> index bb60f21 . . f64f633 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java <nl> @ @ - 26 , 19 + 26 , 19 @ @ import org . apache . cassandra . io . sstable . SSTableWriter ; <nl> public class LeveledCompactionTask extends CompactionTask <nl> { <nl> private final int level ; <nl> - private final int sstableSizeInMB ; <nl> + private final long maxSSTableBytes ; <nl> <nl> - public LeveledCompactionTask ( ColumnFamilyStore cfs , Collection < SSTableReader > sstables , int level , final int gcBefore , int sstableSizeInMB ) <nl> + public LeveledCompactionTask ( ColumnFamilyStore cfs , Collection < SSTableReader > sstables , int level , final int gcBefore , long maxSSTableBytes ) <nl> { <nl> super ( cfs , sstables , gcBefore ) ; <nl> this . level = level ; <nl> - this . sstableSizeInMB = sstableSizeInMB ; <nl> + this . maxSSTableBytes = maxSSTableBytes ; <nl> } <nl> <nl> @ Override <nl> protected boolean newSSTableSegmentThresholdReached ( SSTableWriter writer ) <nl> { <nl> - return writer . getOnDiskFilePointer ( ) > sstableSizeInMB * 1024L * 1024L ; <nl> + return writer . getOnDiskFilePointer ( ) > maxSSTableBytes ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> index 4dab156 . . e08b9f7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> @ @ - 223 , 7 + 223 , 7 @ @ public class LeveledManifest <nl> * @ return highest - priority sstables to compact , and level to compact them to <nl> * If no compactions are necessary , will return null <nl> * / <nl> - public synchronized Pair < ? extends Collection < SSTableReader > , Integer > getCompactionCandidates ( ) <nl> + public synchronized CompactionCandidate getCompactionCandidates ( ) <nl> { <nl> / / LevelDB gives each level a score of how much data it contains vs its ideal amount , and <nl> / / compacts the level with the highest score . But this falls apart spectacularly once you <nl> @ @ - 276 , 7 + 276 , 10 @ @ public class LeveledManifest <nl> options . minSSTableSize ) ; <nl> List < SSTableReader > mostInteresting = SizeTieredCompactionStrategy . mostInterestingBucket ( buckets , 4 , 32 ) ; <nl> if ( ! mostInteresting . isEmpty ( ) ) <nl> - return Pair . create ( mostInteresting , 0 ) ; <nl> + { <nl> + logger . debug ( " L0 is too far behind , performing size - tiering there first " ) ; <nl> + return new CompactionCandidate ( mostInteresting , 0 , Long . MAX _ VALUE ) ; <nl> + } <nl> } <nl> <nl> / / L0 is fine , proceed with this level <nl> @ @ - 284 , 7 + 287 , 7 @ @ public class LeveledManifest <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( " Compaction candidates for L { } are { } " , i , toString ( candidates ) ) ; <nl> if ( ! candidates . isEmpty ( ) ) <nl> - return Pair . create ( candidates , getNextLevel ( candidates ) ) ; <nl> + return new CompactionCandidate ( candidates , getNextLevel ( candidates ) , cfs . getCompactionStrategy ( ) . getMaxSSTableBytes ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 294 , 7 + 297 , 7 @ @ public class LeveledManifest <nl> Collection < SSTableReader > candidates = getCandidatesFor ( 0 ) ; <nl> if ( candidates . isEmpty ( ) ) <nl> return null ; <nl> - return Pair . create ( candidates , getNextLevel ( candidates ) ) ; <nl> + return new CompactionCandidate ( candidates , getNextLevel ( candidates ) , cfs . getCompactionStrategy ( ) . getMaxSSTableBytes ( ) ) ; <nl> } <nl> <nl> public synchronized int getLevelSize ( int i ) <nl> @ @ - 566 , 4 + 569 , 18 @ @ public class LeveledManifest <nl> return newLevel ; <nl> <nl> } <nl> + <nl> + public static class CompactionCandidate <nl> + { <nl> + public final Collection < SSTableReader > sstables ; <nl> + public final int level ; <nl> + public final long maxSSTableBytes ; <nl> + <nl> + public CompactionCandidate ( Collection < SSTableReader > sstables , int level , long maxSSTableBytes ) <nl> + { <nl> + this . sstables = sstables ; <nl> + this . level = level ; <nl> + this . maxSSTableBytes = maxSSTableBytes ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> index 14326f5 . . 9d3776e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> @ @ - 346 , 7 + 346 , 7 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy <nl> estimatedRemainingTasks = n ; <nl> } <nl> <nl> - public long getMaxSSTableSize ( ) <nl> + public long getMaxSSTableBytes ( ) <nl> { <nl> return Long . MAX _ VALUE ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / Upgrader . java b / src / java / org / apache / cassandra / db / compaction / Upgrader . java <nl> index ef881c4 . . e4d29e9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / Upgrader . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / Upgrader . java <nl> @ @ - 57 , 7 + 57 , 7 @ @ public class Upgrader <nl> <nl> this . strategy = cfs . getCompactionStrategy ( ) ; <nl> long estimatedTotalKeys = Math . max ( cfs . metadata . getIndexInterval ( ) , SSTableReader . getApproximateKeyCount ( toUpgrade , cfs . metadata ) ) ; <nl> - long estimatedSSTables = Math . max ( 1 , SSTableReader . getTotalBytes ( this . toUpgrade ) / strategy . getMaxSSTableSize ( ) ) ; <nl> + long estimatedSSTables = Math . max ( 1 , SSTableReader . getTotalBytes ( this . toUpgrade ) / strategy . getMaxSSTableBytes ( ) ) ; <nl> this . estimatedRows = ( long ) Math . ceil ( ( double ) estimatedTotalKeys / estimatedSSTables ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> index 8d1a0a1 . . 5531aee 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> + + + b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> @ @ - 96 , 7 + 96 , 7 @ @ public class StandaloneScrubber <nl> / / If leveled , load the manifest <nl> if ( cfs . getCompactionStrategy ( ) instanceof LeveledCompactionStrategy ) <nl> { <nl> - int maxSizeInMB = ( int ) ( ( cfs . getCompactionStrategy ( ) . getMaxSSTableSize ( ) ) / ( 1024L * 1024L ) ) ; <nl> + int maxSizeInMB = ( int ) ( ( cfs . getCompactionStrategy ( ) . getMaxSSTableBytes ( ) ) / ( 1024L * 1024L ) ) ; <nl> manifest = LeveledManifest . create ( cfs , maxSizeInMB , sstables ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml b / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml <nl> index 6feb7b4 . . 318aeed 100644 <nl> - - - a / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml <nl> + + + b / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml <nl> @ @ - 144 , 7 + 144 , 7 @ @ commands : <nl> Flush one or more column families <nl> - name : repair [ keyspace ] [ cfnames ] <nl> help : | <nl> - Repair one or more column families ( use - pr to repair only the first range returned by the partitioner ) <nl> + Repair one or more column families ( use - pr to repair only the first range returned by the partitioner ; - snapshot to repair one node at a time sequentially using snapshots ) <nl> - name : cleanup [ keyspace ] [ cfnames ] <nl> help : | <nl> Run cleanup on one or more column families

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index dcc7e33 . . 6c9f2e1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 20 , 6 + 20 , 7 @ @ 
 
 
 2 . 0 . 4 
 + * Fix size - tiered compaction in LCS L0 ( CASSANDRA - 6496 ) 
 * Fix assertion failure in filterColdSSTables ( CASSANDRA - 6483 ) 
 * Fix row tombstones in larger - than - memory compactions ( CASSANDRA - 6008 ) 
 * Fix cleanup ClassCastException ( CASSANDRA - 6462 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 index dac3d47 . . 929279a 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 @ @ - 167 , 7 + 167 , 7 @ @ public abstract class AbstractCompactionStrategy 
 / * * 
 * @ return size in bytes of the largest sstables for this strategy 
 * / 
 - public abstract long getMaxSSTableSize ( ) ; 
 + public abstract long getMaxSSTableBytes ( ) ; 
 
 public boolean isEnabled ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 index 59f2f2f . . cabe486 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 @ @ - 119 , 7 + 119 , 7 @ @ public class CompactionTask extends AbstractCompactionTask 
 long totalkeysWritten = 0 ; 
 
 long estimatedTotalKeys = Math . max ( cfs . metadata . getIndexInterval ( ) , SSTableReader . getApproximateKeyCount ( actuallyCompact , cfs . metadata ) ) ; 
 - long estimatedSSTables = Math . max ( 1 , SSTableReader . getTotalBytes ( actuallyCompact ) / strategy . getMaxSSTableSize ( ) ) ; 
 + long estimatedSSTables = Math . max ( 1 , SSTableReader . getTotalBytes ( actuallyCompact ) / strategy . getMaxSSTableBytes ( ) ) ; 
 long keysPerSSTable = ( long ) Math . ceil ( ( double ) estimatedTotalKeys / estimatedSSTables ) ; 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( " Expected bloom filter size : { } " , keysPerSSTable ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 index 3eb5e91 . . a5ef41d 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 @ @ - 37 , 7 + 37 , 6 @ @ import org . apache . cassandra . notifications . INotification ; 
 import org . apache . cassandra . notifications . INotificationConsumer ; 
 import org . apache . cassandra . notifications . SSTableAddedNotification ; 
 import org . apache . cassandra . notifications . SSTableListChangedNotification ; 
 - import org . apache . cassandra . utils . Pair ; 
 
 public class LeveledCompactionStrategy extends AbstractCompactionStrategy implements INotificationConsumer 
 { 
 @ @ - 110 , 11 + 109 , 9 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy implem 
 { 
 while ( true ) 
 { 
 - Pair < ? extends Collection < SSTableReader > , Integer > pair = manifest . getCompactionCandidates ( ) ; 
 - Collection < SSTableReader > sstables ; 
 OperationType op ; 
 - int level ; 
 - if ( pair = = null ) 
 + LeveledManifest . CompactionCandidate candidate = manifest . getCompactionCandidates ( ) ; 
 + if ( candidate = = null ) 
 { 
 / / if there is no sstable to compact in standard way , try compacting based on droppable tombstone ratio 
 SSTableReader sstable = findDroppableSSTable ( gcBefore ) ; 
 @ @ - 123 , 20 + 120 , 19 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy implem 
 logger . debug ( " No compaction necessary for { } " , this ) ; 
 return null ; 
 } 
 - sstables = Collections . singleton ( sstable ) ; 
 + candidate = new LeveledManifest . CompactionCandidate ( Collections . singleton ( sstable ) , 
 + sstable . getSSTableLevel ( ) , 
 + getMaxSSTableBytes ( ) ) ; 
 op = OperationType . TOMBSTONE _ COMPACTION ; 
 - level = sstable . getSSTableLevel ( ) ; 
 } 
 else 
 { 
 op = OperationType . COMPACTION ; 
 - sstables = pair . left ; 
 - level = pair . right ; 
 } 
 
 - if ( cfs . getDataTracker ( ) . markCompacting ( sstables ) ) 
 + if ( cfs . getDataTracker ( ) . markCompacting ( candidate . sstables ) ) 
 { 
 - LeveledCompactionTask newTask = new LeveledCompactionTask ( cfs , sstables , level , gcBefore , maxSSTableSizeInMB ) ; 
 + LeveledCompactionTask newTask = new LeveledCompactionTask ( cfs , candidate . sstables , candidate . level , gcBefore , candidate . maxSSTableBytes ) ; 
 newTask . setCompactionType ( op ) ; 
 return newTask ; 
 } 
 @ @ - 167 , 7 + 163 , 7 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy implem 
 } 
 } 
 
 - public long getMaxSSTableSize ( ) 
 + public long getMaxSSTableBytes ( ) 
 { 
 return maxSSTableSizeInMB * 1024L * 1024L ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java 
 index bb60f21 . . f64f633 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java 
 @ @ - 26 , 19 + 26 , 19 @ @ import org . apache . cassandra . io . sstable . SSTableWriter ; 
 public class LeveledCompactionTask extends CompactionTask 
 { 
 private final int level ; 
 - private final int sstableSizeInMB ; 
 + private final long maxSSTableBytes ; 
 
 - public LeveledCompactionTask ( ColumnFamilyStore cfs , Collection < SSTableReader > sstables , int level , final int gcBefore , int sstableSizeInMB ) 
 + public LeveledCompactionTask ( ColumnFamilyStore cfs , Collection < SSTableReader > sstables , int level , final int gcBefore , long maxSSTableBytes ) 
 { 
 super ( cfs , sstables , gcBefore ) ; 
 this . level = level ; 
 - this . sstableSizeInMB = sstableSizeInMB ; 
 + this . maxSSTableBytes = maxSSTableBytes ; 
 } 
 
 @ Override 
 protected boolean newSSTableSegmentThresholdReached ( SSTableWriter writer ) 
 { 
 - return writer . getOnDiskFilePointer ( ) > sstableSizeInMB * 1024L * 1024L ; 
 + return writer . getOnDiskFilePointer ( ) > maxSSTableBytes ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 index 4dab156 . . e08b9f7 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 @ @ - 223 , 7 + 223 , 7 @ @ public class LeveledManifest 
 * @ return highest - priority sstables to compact , and level to compact them to 
 * If no compactions are necessary , will return null 
 * / 
 - public synchronized Pair < ? extends Collection < SSTableReader > , Integer > getCompactionCandidates ( ) 
 + public synchronized CompactionCandidate getCompactionCandidates ( ) 
 { 
 / / LevelDB gives each level a score of how much data it contains vs its ideal amount , and 
 / / compacts the level with the highest score . But this falls apart spectacularly once you 
 @ @ - 276 , 7 + 276 , 10 @ @ public class LeveledManifest 
 options . minSSTableSize ) ; 
 List < SSTableReader > mostInteresting = SizeTieredCompactionStrategy . mostInterestingBucket ( buckets , 4 , 32 ) ; 
 if ( ! mostInteresting . isEmpty ( ) ) 
 - return Pair . create ( mostInteresting , 0 ) ; 
 + { 
 + logger . debug ( " L0 is too far behind , performing size - tiering there first " ) ; 
 + return new CompactionCandidate ( mostInteresting , 0 , Long . MAX _ VALUE ) ; 
 + } 
 } 
 
 / / L0 is fine , proceed with this level 
 @ @ - 284 , 7 + 287 , 7 @ @ public class LeveledManifest 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( " Compaction candidates for L { } are { } " , i , toString ( candidates ) ) ; 
 if ( ! candidates . isEmpty ( ) ) 
 - return Pair . create ( candidates , getNextLevel ( candidates ) ) ; 
 + return new CompactionCandidate ( candidates , getNextLevel ( candidates ) , cfs . getCompactionStrategy ( ) . getMaxSSTableBytes ( ) ) ; 
 } 
 } 
 
 @ @ - 294 , 7 + 297 , 7 @ @ public class LeveledManifest 
 Collection < SSTableReader > candidates = getCandidatesFor ( 0 ) ; 
 if ( candidates . isEmpty ( ) ) 
 return null ; 
 - return Pair . create ( candidates , getNextLevel ( candidates ) ) ; 
 + return new CompactionCandidate ( candidates , getNextLevel ( candidates ) , cfs . getCompactionStrategy ( ) . getMaxSSTableBytes ( ) ) ; 
 } 
 
 public synchronized int getLevelSize ( int i ) 
 @ @ - 566 , 4 + 569 , 18 @ @ public class LeveledManifest 
 return newLevel ; 
 
 } 
 + 
 + public static class CompactionCandidate 
 + { 
 + public final Collection < SSTableReader > sstables ; 
 + public final int level ; 
 + public final long maxSSTableBytes ; 
 + 
 + public CompactionCandidate ( Collection < SSTableReader > sstables , int level , long maxSSTableBytes ) 
 + { 
 + this . sstables = sstables ; 
 + this . level = level ; 
 + this . maxSSTableBytes = maxSSTableBytes ; 
 + } 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 index 14326f5 . . 9d3776e 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 @ @ - 346 , 7 + 346 , 7 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy 
 estimatedRemainingTasks = n ; 
 } 
 
 - public long getMaxSSTableSize ( ) 
 + public long getMaxSSTableBytes ( ) 
 { 
 return Long . MAX _ VALUE ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / Upgrader . java b / src / java / org / apache / cassandra / db / compaction / Upgrader . java 
 index ef881c4 . . e4d29e9 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / Upgrader . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / Upgrader . java 
 @ @ - 57 , 7 + 57 , 7 @ @ public class Upgrader 
 
 this . strategy = cfs . getCompactionStrategy ( ) ; 
 long estimatedTotalKeys = Math . max ( cfs . metadata . getIndexInterval ( ) , SSTableReader . getApproximateKeyCount ( toUpgrade , cfs . metadata ) ) ; 
 - long estimatedSSTables = Math . max ( 1 , SSTableReader . getTotalBytes ( this . toUpgrade ) / strategy . getMaxSSTableSize ( ) ) ; 
 + long estimatedSSTables = Math . max ( 1 , SSTableReader . getTotalBytes ( this . toUpgrade ) / strategy . getMaxSSTableBytes ( ) ) ; 
 this . estimatedRows = ( long ) Math . ceil ( ( double ) estimatedTotalKeys / estimatedSSTables ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 index 8d1a0a1 . . 5531aee 100644 
 - - - a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 + + + b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 @ @ - 96 , 7 + 96 , 7 @ @ public class StandaloneScrubber 
 / / If leveled , load the manifest 
 if ( cfs . getCompactionStrategy ( ) instanceof LeveledCompactionStrategy ) 
 { 
 - int maxSizeInMB = ( int ) ( ( cfs . getCompactionStrategy ( ) . getMaxSSTableSize ( ) ) / ( 1024L * 1024L ) ) ; 
 + int maxSizeInMB = ( int ) ( ( cfs . getCompactionStrategy ( ) . getMaxSSTableBytes ( ) ) / ( 1024L * 1024L ) ) ; 
 manifest = LeveledManifest . create ( cfs , maxSizeInMB , sstables ) ; 
 } 


NEAREST DIFF:
diff - - git a / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml b / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml 
 index 6feb7b4 . . 318aeed 100644 
 - - - a / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml 
 + + + b / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml 
 @ @ - 144 , 7 + 144 , 7 @ @ commands : 
 Flush one or more column families 
 - name : repair [ keyspace ] [ cfnames ] 
 help : | 
 - Repair one or more column families ( use - pr to repair only the first range returned by the partitioner ) 
 + Repair one or more column families ( use - pr to repair only the first range returned by the partitioner ; - snapshot to repair one node at a time sequentially using snapshots ) 
 - name : cleanup [ keyspace ] [ cfnames ] 
 help : | 
 Run cleanup on one or more column families
