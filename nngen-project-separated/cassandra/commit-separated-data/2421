BLEU SCORE: 0.09535414040914189

TEST MSG: Fix bound building for multi - column IN restrictions
GENERATED MSG: Handle CQL3 SELECT duplicate IN restrictions on clustering columns

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index 2710f78 . . 7a91517 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 811 , 7 + 811 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> if ( firstRestriction . isSlice ( ) ) <nl> return buildMultiColumnSliceBound ( bound , names , ( MultiColumnRestriction . Slice ) firstRestriction , isReversed , builder , variables ) ; <nl> else if ( firstRestriction . isIN ( ) ) <nl> - return buildMultiColumnInBound ( bound , names , ( MultiColumnRestriction . IN ) firstRestriction , isReversed , builder , variables ) ; <nl> + return buildMultiColumnInBound ( bound , ( MultiColumnRestriction . IN ) firstRestriction , isReversed , builder , variables ) ; <nl> else <nl> return buildMultiColumnEQBound ( bound , ( MultiColumnRestriction . EQ ) firstRestriction , isReversed , builder , variables ) ; <nl> } <nl> @ @ - 920 , 26 + 920 , 24 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> } <nl> <nl> private List < ByteBuffer > buildMultiColumnInBound ( Bound bound , <nl> - Collection < CFDefinition . Name > names , <nl> MultiColumnRestriction . IN restriction , <nl> boolean isReversed , <nl> ColumnNameBuilder builder , <nl> List < ByteBuffer > variables ) throws InvalidRequestException <nl> { <nl> List < List < ByteBuffer > > splitInValues = restriction . splitValues ( variables ) ; <nl> + Bound eocBound = isReversed ? Bound . reverse ( bound ) : bound ; <nl> <nl> / / The IN query might not have listed the values in comparator order , so we need to re - sort <nl> / / the bounds lists to make sure the slices works correctly ( also , to avoid duplicates ) . <nl> TreeSet < ByteBuffer > inValues = new TreeSet < > ( isReversed ? cfDef . cfm . comparator . reverseComparator : cfDef . cfm . comparator ) ; <nl> - Iterator < CFDefinition . Name > iter = names . iterator ( ) ; <nl> for ( List < ByteBuffer > components : splitInValues ) <nl> { <nl> ColumnNameBuilder nameBuilder = builder . copy ( ) ; <nl> for ( ByteBuffer component : components ) <nl> nameBuilder . add ( component ) ; <nl> <nl> - Bound b = isReversed = = isReversedType ( iter . next ( ) ) ? bound : Bound . reverse ( bound ) ; <nl> - inValues . add ( ( bound = = Bound . END & & nameBuilder . remainingCount ( ) > 0 ) ? nameBuilder . buildAsEndOfRange ( ) : nameBuilder . build ( ) ) ; <nl> + inValues . add ( ( eocBound = = Bound . END & & nameBuilder . remainingCount ( ) > 0 ) ? nameBuilder . buildAsEndOfRange ( ) : nameBuilder . build ( ) ) ; <nl> } <nl> return new ArrayList < > ( inValues ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / MultiColumnRelationTest . java b / test / unit / org / apache / cassandra / cql3 / MultiColumnRelationTest . java <nl> index b728cba . . 121a8d3 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / MultiColumnRelationTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / MultiColumnRelationTest . java <nl> @ @ - 568 , 6 + 568 , 68 @ @ public class MultiColumnRelationTest <nl> checkRow ( 0 , results , 0 , 0 , 0 , 0 ) ; <nl> checkRow ( 1 , results , 0 , 0 , 1 , 0 ) ; <nl> checkRow ( 2 , results , 0 , 0 , 1 , 1 ) ; <nl> + <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering WHERE a = 0 AND ( b , c ) IN ( ( 0 , 1 ) ) ORDER BY b DESC , c DESC , d DESC " ) ; <nl> + assertEquals ( 2 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 0 , 1 , 1 ) ; <nl> + checkRow ( 1 , results , 0 , 0 , 1 , 0 ) ; <nl> + } <nl> + <nl> + <nl> + @ Test <nl> + public void testLiteralInReversed ( ) throws Throwable <nl> + { <nl> + execute ( " INSERT INTO % s . multiple _ clustering _ reversed ( a , b , c , d ) VALUES ( 0 , 1 , 0 , 0 ) " ) ; <nl> + execute ( " INSERT INTO % s . multiple _ clustering _ reversed ( a , b , c , d ) VALUES ( 0 , 0 , 0 , 0 ) " ) ; <nl> + execute ( " INSERT INTO % s . multiple _ clustering _ reversed ( a , b , c , d ) VALUES ( 0 , 0 , 1 , 1 ) " ) ; <nl> + execute ( " INSERT INTO % s . multiple _ clustering _ reversed ( a , b , c , d ) VALUES ( 0 , 0 , 1 , 0 ) " ) ; <nl> + execute ( " INSERT INTO % s . multiple _ clustering _ reversed ( a , b , c , d ) VALUES ( 0 , - 1 , 0 , 0 ) " ) ; <nl> + <nl> + UntypedResultSet results = execute ( " SELECT * FROM % s . multiple _ clustering _ reversed WHERE a = 0 AND ( b , c , d ) IN ( ( 0 , 1 , 0 ) , ( 0 , 1 , 1 ) ) " ) ; <nl> + assertEquals ( 2 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 0 , 1 , 1 ) ; <nl> + checkRow ( 1 , results , 0 , 0 , 1 , 0 ) ; <nl> + <nl> + / / same query , but reversed order for the IN values <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering _ reversed WHERE a = 0 AND ( b , c , d ) IN ( ( 0 , 1 , 1 ) , ( 0 , 1 , 0 ) ) " ) ; <nl> + assertEquals ( 2 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 0 , 1 , 1 ) ; <nl> + checkRow ( 1 , results , 0 , 0 , 1 , 0 ) ; <nl> + <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering _ reversed WHERE a = 0 AND ( b , c , d ) IN ( ( 1 , 0 , 0 ) , ( 0 , 0 , 0 ) , ( 0 , 1 , 1 ) , ( 0 , 1 , 0 ) , ( - 1 , 0 , 0 ) ) " ) ; <nl> + assertEquals ( 5 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 1 , 0 , 0 ) ; <nl> + checkRow ( 1 , results , 0 , 0 , 0 , 0 ) ; <nl> + checkRow ( 2 , results , 0 , 0 , 1 , 1 ) ; <nl> + checkRow ( 3 , results , 0 , 0 , 1 , 0 ) ; <nl> + checkRow ( 4 , results , 0 , - 1 , 0 , 0 ) ; <nl> + <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering _ reversed WHERE a = 0 AND ( b , c , d ) IN ( ( 0 , 0 , 0 ) ) " ) ; <nl> + assertEquals ( 1 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 0 , 0 , 0 ) ; <nl> + <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering _ reversed WHERE a = 0 AND ( b , c , d ) IN ( ( 0 , 1 , 1 ) ) " ) ; <nl> + assertEquals ( 1 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 0 , 1 , 1 ) ; <nl> + <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering _ reversed WHERE a = 0 AND ( b , c , d ) IN ( ( 0 , 1 , 0 ) ) " ) ; <nl> + assertEquals ( 1 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 0 , 1 , 0 ) ; <nl> + <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering _ reversed WHERE a = 0 and ( b , c ) IN ( ( 0 , 1 ) ) " ) ; <nl> + assertEquals ( 2 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 0 , 1 , 1 ) ; <nl> + checkRow ( 1 , results , 0 , 0 , 1 , 0 ) ; <nl> + <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering _ reversed WHERE a = 0 and ( b , c ) IN ( ( 0 , 0 ) ) " ) ; <nl> + assertEquals ( 1 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 0 , 0 , 0 ) ; <nl> + <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering _ reversed WHERE a = 0 and ( b ) IN ( ( 0 ) ) " ) ; <nl> + assertEquals ( 3 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 0 , 0 , 0 ) ; <nl> + checkRow ( 1 , results , 0 , 0 , 1 , 1 ) ; <nl> + checkRow ( 2 , results , 0 , 0 , 1 , 0 ) ; <nl> } <nl> <nl> @ Test ( expected = InvalidRequestException . class ) <nl> @ @ - 1109 , 4 + 1171 , 4 @ @ public class MultiColumnRelationTest <nl> ( long ) expected , actual ) ; <nl> } <nl> } <nl> - } <nl> \ No newline at end of file <nl> + }
NEAREST DIFF (one line): diff - - git a / conf / triggers / README . txt b / conf / triggers / README . txt <nl> index e69de29 . . d2f6641 100644 <nl> - - - a / conf / triggers / README . txt <nl> + + + b / conf / triggers / README . txt <nl> @ @ - 0 , 0 + 1 @ @ <nl> + Place triggers to be loaded in this directory , as jar files .

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index 2710f78 . . 7a91517 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 811 , 7 + 811 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 if ( firstRestriction . isSlice ( ) ) 
 return buildMultiColumnSliceBound ( bound , names , ( MultiColumnRestriction . Slice ) firstRestriction , isReversed , builder , variables ) ; 
 else if ( firstRestriction . isIN ( ) ) 
 - return buildMultiColumnInBound ( bound , names , ( MultiColumnRestriction . IN ) firstRestriction , isReversed , builder , variables ) ; 
 + return buildMultiColumnInBound ( bound , ( MultiColumnRestriction . IN ) firstRestriction , isReversed , builder , variables ) ; 
 else 
 return buildMultiColumnEQBound ( bound , ( MultiColumnRestriction . EQ ) firstRestriction , isReversed , builder , variables ) ; 
 } 
 @ @ - 920 , 26 + 920 , 24 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 } 
 
 private List < ByteBuffer > buildMultiColumnInBound ( Bound bound , 
 - Collection < CFDefinition . Name > names , 
 MultiColumnRestriction . IN restriction , 
 boolean isReversed , 
 ColumnNameBuilder builder , 
 List < ByteBuffer > variables ) throws InvalidRequestException 
 { 
 List < List < ByteBuffer > > splitInValues = restriction . splitValues ( variables ) ; 
 + Bound eocBound = isReversed ? Bound . reverse ( bound ) : bound ; 
 
 / / The IN query might not have listed the values in comparator order , so we need to re - sort 
 / / the bounds lists to make sure the slices works correctly ( also , to avoid duplicates ) . 
 TreeSet < ByteBuffer > inValues = new TreeSet < > ( isReversed ? cfDef . cfm . comparator . reverseComparator : cfDef . cfm . comparator ) ; 
 - Iterator < CFDefinition . Name > iter = names . iterator ( ) ; 
 for ( List < ByteBuffer > components : splitInValues ) 
 { 
 ColumnNameBuilder nameBuilder = builder . copy ( ) ; 
 for ( ByteBuffer component : components ) 
 nameBuilder . add ( component ) ; 
 
 - Bound b = isReversed = = isReversedType ( iter . next ( ) ) ? bound : Bound . reverse ( bound ) ; 
 - inValues . add ( ( bound = = Bound . END & & nameBuilder . remainingCount ( ) > 0 ) ? nameBuilder . buildAsEndOfRange ( ) : nameBuilder . build ( ) ) ; 
 + inValues . add ( ( eocBound = = Bound . END & & nameBuilder . remainingCount ( ) > 0 ) ? nameBuilder . buildAsEndOfRange ( ) : nameBuilder . build ( ) ) ; 
 } 
 return new ArrayList < > ( inValues ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / MultiColumnRelationTest . java b / test / unit / org / apache / cassandra / cql3 / MultiColumnRelationTest . java 
 index b728cba . . 121a8d3 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / MultiColumnRelationTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / MultiColumnRelationTest . java 
 @ @ - 568 , 6 + 568 , 68 @ @ public class MultiColumnRelationTest 
 checkRow ( 0 , results , 0 , 0 , 0 , 0 ) ; 
 checkRow ( 1 , results , 0 , 0 , 1 , 0 ) ; 
 checkRow ( 2 , results , 0 , 0 , 1 , 1 ) ; 
 + 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering WHERE a = 0 AND ( b , c ) IN ( ( 0 , 1 ) ) ORDER BY b DESC , c DESC , d DESC " ) ; 
 + assertEquals ( 2 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 0 , 1 , 1 ) ; 
 + checkRow ( 1 , results , 0 , 0 , 1 , 0 ) ; 
 + } 
 + 
 + 
 + @ Test 
 + public void testLiteralInReversed ( ) throws Throwable 
 + { 
 + execute ( " INSERT INTO % s . multiple _ clustering _ reversed ( a , b , c , d ) VALUES ( 0 , 1 , 0 , 0 ) " ) ; 
 + execute ( " INSERT INTO % s . multiple _ clustering _ reversed ( a , b , c , d ) VALUES ( 0 , 0 , 0 , 0 ) " ) ; 
 + execute ( " INSERT INTO % s . multiple _ clustering _ reversed ( a , b , c , d ) VALUES ( 0 , 0 , 1 , 1 ) " ) ; 
 + execute ( " INSERT INTO % s . multiple _ clustering _ reversed ( a , b , c , d ) VALUES ( 0 , 0 , 1 , 0 ) " ) ; 
 + execute ( " INSERT INTO % s . multiple _ clustering _ reversed ( a , b , c , d ) VALUES ( 0 , - 1 , 0 , 0 ) " ) ; 
 + 
 + UntypedResultSet results = execute ( " SELECT * FROM % s . multiple _ clustering _ reversed WHERE a = 0 AND ( b , c , d ) IN ( ( 0 , 1 , 0 ) , ( 0 , 1 , 1 ) ) " ) ; 
 + assertEquals ( 2 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 0 , 1 , 1 ) ; 
 + checkRow ( 1 , results , 0 , 0 , 1 , 0 ) ; 
 + 
 + / / same query , but reversed order for the IN values 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering _ reversed WHERE a = 0 AND ( b , c , d ) IN ( ( 0 , 1 , 1 ) , ( 0 , 1 , 0 ) ) " ) ; 
 + assertEquals ( 2 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 0 , 1 , 1 ) ; 
 + checkRow ( 1 , results , 0 , 0 , 1 , 0 ) ; 
 + 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering _ reversed WHERE a = 0 AND ( b , c , d ) IN ( ( 1 , 0 , 0 ) , ( 0 , 0 , 0 ) , ( 0 , 1 , 1 ) , ( 0 , 1 , 0 ) , ( - 1 , 0 , 0 ) ) " ) ; 
 + assertEquals ( 5 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 1 , 0 , 0 ) ; 
 + checkRow ( 1 , results , 0 , 0 , 0 , 0 ) ; 
 + checkRow ( 2 , results , 0 , 0 , 1 , 1 ) ; 
 + checkRow ( 3 , results , 0 , 0 , 1 , 0 ) ; 
 + checkRow ( 4 , results , 0 , - 1 , 0 , 0 ) ; 
 + 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering _ reversed WHERE a = 0 AND ( b , c , d ) IN ( ( 0 , 0 , 0 ) ) " ) ; 
 + assertEquals ( 1 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 0 , 0 , 0 ) ; 
 + 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering _ reversed WHERE a = 0 AND ( b , c , d ) IN ( ( 0 , 1 , 1 ) ) " ) ; 
 + assertEquals ( 1 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 0 , 1 , 1 ) ; 
 + 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering _ reversed WHERE a = 0 AND ( b , c , d ) IN ( ( 0 , 1 , 0 ) ) " ) ; 
 + assertEquals ( 1 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 0 , 1 , 0 ) ; 
 + 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering _ reversed WHERE a = 0 and ( b , c ) IN ( ( 0 , 1 ) ) " ) ; 
 + assertEquals ( 2 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 0 , 1 , 1 ) ; 
 + checkRow ( 1 , results , 0 , 0 , 1 , 0 ) ; 
 + 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering _ reversed WHERE a = 0 and ( b , c ) IN ( ( 0 , 0 ) ) " ) ; 
 + assertEquals ( 1 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 0 , 0 , 0 ) ; 
 + 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering _ reversed WHERE a = 0 and ( b ) IN ( ( 0 ) ) " ) ; 
 + assertEquals ( 3 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 0 , 0 , 0 ) ; 
 + checkRow ( 1 , results , 0 , 0 , 1 , 1 ) ; 
 + checkRow ( 2 , results , 0 , 0 , 1 , 0 ) ; 
 } 
 
 @ Test ( expected = InvalidRequestException . class ) 
 @ @ - 1109 , 4 + 1171 , 4 @ @ public class MultiColumnRelationTest 
 ( long ) expected , actual ) ; 
 } 
 } 
 - } 
 \ No newline at end of file 
 + }

NEAREST DIFF:
diff - - git a / conf / triggers / README . txt b / conf / triggers / README . txt 
 index e69de29 . . d2f6641 100644 
 - - - a / conf / triggers / README . txt 
 + + + b / conf / triggers / README . txt 
 @ @ - 0 , 0 + 1 @ @ 
 + Place triggers to be loaded in this directory , as jar files .
