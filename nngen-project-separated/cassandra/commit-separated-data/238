BLEU SCORE: 0.013139808552042212

TEST MSG: ninja : fix bad # 14079 merge ( Fix AbstractCompactionStrategyTest TableMetadataRef - > TableMetadata )
GENERATED MSG: another try at fixing the broken testMutateLevel test

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / compaction / AbstractCompactionStrategyTest . java b / test / unit / org / apache / cassandra / db / compaction / AbstractCompactionStrategyTest . java <nl> index 481b394 . . b77589d 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / AbstractCompactionStrategyTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / AbstractCompactionStrategyTest . java <nl> @ @ - 134 , 7 + 134 , 7 @ @ public class AbstractCompactionStrategyTest <nl> long timestamp = System . currentTimeMillis ( ) ; <nl> DecoratedKey dk = Util . dk ( String . format ( " % 03d " , key ) ) ; <nl> ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( table ) ; <nl> - new RowUpdateBuilder ( cfs . metadata , timestamp , dk . getKey ( ) ) <nl> + new RowUpdateBuilder ( cfs . metadata ( ) , timestamp , dk . getKey ( ) ) <nl> . clustering ( String . valueOf ( key ) ) <nl> . add ( " val " , " val " ) <nl> . build ( )
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java <nl> index fe7f02b . . 9209b87 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliClient . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliClient . java <nl> @ @ - 440 , 7 + 440 , 7 @ @ public class CliClient <nl> SlicePredicate predicate = new SlicePredicate ( ) . setColumn _ names ( null ) . setSlice _ range ( range ) ; <nl> <nl> int count = thriftClient . get _ count ( getKeyAsBytes ( columnFamily , columnFamilySpec . getChild ( 1 ) ) , colParent , predicate , consistencyLevel ) ; <nl> - sessionState . out . printf ( " % d columns % n " , count ) ; <nl> + sessionState . out . printf ( " % d cells % n " , count ) ; <nl> } <nl> <nl> private Iterable < CfDef > currentCfDefs ( ) <nl> @ @ - 526 , 7 + 526 , 7 @ @ public class CliClient <nl> { <nl> thriftClient . remove ( key , path , FBUtilities . timestampMicros ( ) , consistencyLevel ) ; <nl> } <nl> - sessionState . out . println ( String . format ( " % s removed . " , ( columnSpecCnt = = 0 ) ? " row " : " column " ) ) ; <nl> + sessionState . out . println ( String . format ( " % s removed . " , ( columnSpecCnt = = 0 ) ? " row " : " cell " ) ) ; <nl> elapsedTime ( startTime ) ; <nl> } <nl> <nl> @ @ - 559 , 7 + 559 , 7 @ @ public class CliClient <nl> for ( Column col : superColumn . getColumns ( ) ) <nl> { <nl> validator = getValidatorForValue ( cfDef , col . getName ( ) ) ; <nl> - sessionState . out . printf ( " % n ( column = % s , value = % s , timestamp = % d % s ) " , formatSubcolumnName ( keyspace , columnFamily , col . name ) , <nl> + sessionState . out . printf ( " % n ( name = % s , value = % s , timestamp = % d % s ) " , formatSubcolumnName ( keyspace , columnFamily , col . name ) , <nl> validator . getString ( col . value ) , col . timestamp , <nl> col . isSetTtl ( ) ? String . format ( " , ttl = % d " , col . getTtl ( ) ) : " " ) ; <nl> } <nl> @ @ - 575 , 7 + 575 , 7 @ @ public class CliClient <nl> ? formatSubcolumnName ( keyspace , columnFamily , column . name ) <nl> : formatColumnName ( keyspace , columnFamily , column . name ) ; <nl> <nl> - sessionState . out . printf ( " = > ( column = % s , value = % s , timestamp = % d % s ) % n " , <nl> + sessionState . out . printf ( " = > ( name = % s , value = % s , timestamp = % d % s ) % n " , <nl> formattedName , <nl> validator . getString ( column . value ) , <nl> column . timestamp , <nl> @ @ - 763 , 7 + 763 , 7 @ @ public class CliClient <nl> : formatColumnName ( keySpace , columnFamily , column . name ) ; <nl> <nl> / / print results <nl> - sessionState . out . printf ( " = > ( column = % s , value = % s , timestamp = % d % s ) % n " , <nl> + sessionState . out . printf ( " = > ( name = % s , value = % s , timestamp = % d % s ) % n " , <nl> formattedColumnName , <nl> valueAsString , <nl> column . timestamp , <nl> @ @ - 918 , 7 + 918 , 7 @ @ public class CliClient <nl> / / table . cf [ ' key ' ] <nl> if ( columnSpecCnt = = 0 ) <nl> { <nl> - sessionState . err . println ( " No column name specified , ( type ' help ; ' or ' ? ' for help on syntax ) . " ) ; <nl> + sessionState . err . println ( " No cell name specified , ( type ' help ; ' or ' ? ' for help on syntax ) . " ) ; <nl> return ; <nl> } <nl> / / table . cf [ ' key ' ] [ ' column ' ] = ' value ' <nl> @ @ - 1436 , 7 + 1436 , 7 @ @ public class CliClient <nl> { <nl> if ( ( child . getChildCount ( ) < 1 ) | | ( child . getChildCount ( ) > 2 ) ) <nl> { <nl> - sessionState . err . println ( " Invalid columns clause . " ) ; <nl> + sessionState . err . println ( " Invalid cells clause . " ) ; <nl> return ; <nl> } <nl> <nl> @ @ - 1447 , 7 + 1447 , 7 @ @ public class CliClient <nl> columnCount = Integer . parseInt ( columns ) ; <nl> if ( columnCount < 0 ) <nl> { <nl> - sessionState . err . println ( " Invalid column limit : " + columnCount ) ; <nl> + sessionState . err . println ( " Invalid cell limit : " + columnCount ) ; <nl> return ; <nl> } <nl> <nl> @ @ - 1456 , 7 + 1456 , 7 @ @ public class CliClient <nl> } <nl> catch ( NumberFormatException nfe ) <nl> { <nl> - sessionState . err . println ( " Invalid column number format : " + columns ) ; <nl> + sessionState . err . println ( " Invalid cell number format : " + columns ) ; <nl> return ; <nl> } <nl> } <nl> @ @ - 1470 , 7 + 1470 , 7 @ @ public class CliClient <nl> if ( columnCount = = Integer . MAX _ VALUE ) <nl> { <nl> columnCount = 100 ; <nl> - sessionState . out . println ( " Using default column limit of 100 " ) ; <nl> + sessionState . out . println ( " Using default cell limit of 100 " ) ; <nl> } <nl> <nl> <nl> @ @ - 2153 , 7 + 2153 , 7 @ @ public class CliClient <nl> if ( cf _ def . default _ validation _ class ! = null ) <nl> sessionState . out . printf ( " Default column value validator : % s % n " , cf _ def . default _ validation _ class ) ; <nl> <nl> - sessionState . out . printf ( " Columns sorted by : % s % s % n " , cf _ def . comparator _ type , cf _ def . column _ type . equals ( " Super " ) ? " / " + cf _ def . subcomparator _ type : " " ) ; <nl> + sessionState . out . printf ( " Cells sorted by : % s % s % n " , cf _ def . comparator _ type , cf _ def . column _ type . equals ( " Super " ) ? " / " + cf _ def . subcomparator _ type : " " ) ; <nl> sessionState . out . printf ( " GC grace seconds : % s % n " , cf _ def . gc _ grace _ seconds ) ; <nl> sessionState . out . printf ( " Compaction min / max thresholds : % s / % s % n " , cf _ def . min _ compaction _ threshold , cf _ def . max _ compaction _ threshold ) ; <nl> sessionState . out . printf ( " Read repair chance : % s % n " , cf _ def . read _ repair _ chance ) ; <nl> @ @ - 2888 , 7 + 2888 , 7 @ @ public class CliClient <nl> Column col = columnOrSuperColumn . column ; <nl> validator = getValidatorForValue ( columnFamilyDef , col . getName ( ) ) ; <nl> <nl> - sessionState . out . printf ( " = > ( column = % s , value = % s , timestamp = % d % s ) % n " , <nl> + sessionState . out . printf ( " = > ( name = % s , value = % s , timestamp = % d % s ) % n " , <nl> formatColumnName ( keySpace , columnFamilyName , col . name ) , validator . getString ( col . value ) , col . timestamp , <nl> col . isSetTtl ( ) ? String . format ( " , ttl = % d " , col . getTtl ( ) ) : " " ) ; <nl> } <nl> @ @ - 2901 , 7 + 2901 , 7 @ @ public class CliClient <nl> { <nl> validator = getValidatorForValue ( columnFamilyDef , col . getName ( ) ) ; <nl> <nl> - sessionState . out . printf ( " % n ( column = % s , value = % s , timestamp = % d % s ) " , <nl> + sessionState . out . printf ( " % n ( name = % s , value = % s , timestamp = % d % s ) " , <nl> formatSubcolumnName ( keySpace , columnFamilyName , col . name ) , validator . getString ( col . value ) , col . timestamp , <nl> col . isSetTtl ( ) ? String . format ( " , ttl = % d " , col . getTtl ( ) ) : " " ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> index 0a3497b . . 76f016c 100644 <nl> - - - a / test / unit / org / apache / cassandra / cli / CliTest . java <nl> + + + b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> @ @ - 291 , 7 + 291 , 7 @ @ public class CliTest extends SchemaLoader <nl> } <nl> else <nl> { <nl> - assertTrue ( result . startsWith ( " = > ( column = " ) | | result . startsWith ( " Value was not found " ) ) ; <nl> + assertTrue ( result . startsWith ( " = > ( name = " ) | | result . startsWith ( " Value was not found " ) ) ; <nl> } <nl> assertTrue ( result . contains ( " Elapsed time : " ) ) ; <nl> }

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / compaction / AbstractCompactionStrategyTest . java b / test / unit / org / apache / cassandra / db / compaction / AbstractCompactionStrategyTest . java 
 index 481b394 . . b77589d 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / AbstractCompactionStrategyTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / AbstractCompactionStrategyTest . java 
 @ @ - 134 , 7 + 134 , 7 @ @ public class AbstractCompactionStrategyTest 
 long timestamp = System . currentTimeMillis ( ) ; 
 DecoratedKey dk = Util . dk ( String . format ( " % 03d " , key ) ) ; 
 ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( table ) ; 
 - new RowUpdateBuilder ( cfs . metadata , timestamp , dk . getKey ( ) ) 
 + new RowUpdateBuilder ( cfs . metadata ( ) , timestamp , dk . getKey ( ) ) 
 . clustering ( String . valueOf ( key ) ) 
 . add ( " val " , " val " ) 
 . build ( )

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java 
 index fe7f02b . . 9209b87 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliClient . java 
 + + + b / src / java / org / apache / cassandra / cli / CliClient . java 
 @ @ - 440 , 7 + 440 , 7 @ @ public class CliClient 
 SlicePredicate predicate = new SlicePredicate ( ) . setColumn _ names ( null ) . setSlice _ range ( range ) ; 
 
 int count = thriftClient . get _ count ( getKeyAsBytes ( columnFamily , columnFamilySpec . getChild ( 1 ) ) , colParent , predicate , consistencyLevel ) ; 
 - sessionState . out . printf ( " % d columns % n " , count ) ; 
 + sessionState . out . printf ( " % d cells % n " , count ) ; 
 } 
 
 private Iterable < CfDef > currentCfDefs ( ) 
 @ @ - 526 , 7 + 526 , 7 @ @ public class CliClient 
 { 
 thriftClient . remove ( key , path , FBUtilities . timestampMicros ( ) , consistencyLevel ) ; 
 } 
 - sessionState . out . println ( String . format ( " % s removed . " , ( columnSpecCnt = = 0 ) ? " row " : " column " ) ) ; 
 + sessionState . out . println ( String . format ( " % s removed . " , ( columnSpecCnt = = 0 ) ? " row " : " cell " ) ) ; 
 elapsedTime ( startTime ) ; 
 } 
 
 @ @ - 559 , 7 + 559 , 7 @ @ public class CliClient 
 for ( Column col : superColumn . getColumns ( ) ) 
 { 
 validator = getValidatorForValue ( cfDef , col . getName ( ) ) ; 
 - sessionState . out . printf ( " % n ( column = % s , value = % s , timestamp = % d % s ) " , formatSubcolumnName ( keyspace , columnFamily , col . name ) , 
 + sessionState . out . printf ( " % n ( name = % s , value = % s , timestamp = % d % s ) " , formatSubcolumnName ( keyspace , columnFamily , col . name ) , 
 validator . getString ( col . value ) , col . timestamp , 
 col . isSetTtl ( ) ? String . format ( " , ttl = % d " , col . getTtl ( ) ) : " " ) ; 
 } 
 @ @ - 575 , 7 + 575 , 7 @ @ public class CliClient 
 ? formatSubcolumnName ( keyspace , columnFamily , column . name ) 
 : formatColumnName ( keyspace , columnFamily , column . name ) ; 
 
 - sessionState . out . printf ( " = > ( column = % s , value = % s , timestamp = % d % s ) % n " , 
 + sessionState . out . printf ( " = > ( name = % s , value = % s , timestamp = % d % s ) % n " , 
 formattedName , 
 validator . getString ( column . value ) , 
 column . timestamp , 
 @ @ - 763 , 7 + 763 , 7 @ @ public class CliClient 
 : formatColumnName ( keySpace , columnFamily , column . name ) ; 
 
 / / print results 
 - sessionState . out . printf ( " = > ( column = % s , value = % s , timestamp = % d % s ) % n " , 
 + sessionState . out . printf ( " = > ( name = % s , value = % s , timestamp = % d % s ) % n " , 
 formattedColumnName , 
 valueAsString , 
 column . timestamp , 
 @ @ - 918 , 7 + 918 , 7 @ @ public class CliClient 
 / / table . cf [ ' key ' ] 
 if ( columnSpecCnt = = 0 ) 
 { 
 - sessionState . err . println ( " No column name specified , ( type ' help ; ' or ' ? ' for help on syntax ) . " ) ; 
 + sessionState . err . println ( " No cell name specified , ( type ' help ; ' or ' ? ' for help on syntax ) . " ) ; 
 return ; 
 } 
 / / table . cf [ ' key ' ] [ ' column ' ] = ' value ' 
 @ @ - 1436 , 7 + 1436 , 7 @ @ public class CliClient 
 { 
 if ( ( child . getChildCount ( ) < 1 ) | | ( child . getChildCount ( ) > 2 ) ) 
 { 
 - sessionState . err . println ( " Invalid columns clause . " ) ; 
 + sessionState . err . println ( " Invalid cells clause . " ) ; 
 return ; 
 } 
 
 @ @ - 1447 , 7 + 1447 , 7 @ @ public class CliClient 
 columnCount = Integer . parseInt ( columns ) ; 
 if ( columnCount < 0 ) 
 { 
 - sessionState . err . println ( " Invalid column limit : " + columnCount ) ; 
 + sessionState . err . println ( " Invalid cell limit : " + columnCount ) ; 
 return ; 
 } 
 
 @ @ - 1456 , 7 + 1456 , 7 @ @ public class CliClient 
 } 
 catch ( NumberFormatException nfe ) 
 { 
 - sessionState . err . println ( " Invalid column number format : " + columns ) ; 
 + sessionState . err . println ( " Invalid cell number format : " + columns ) ; 
 return ; 
 } 
 } 
 @ @ - 1470 , 7 + 1470 , 7 @ @ public class CliClient 
 if ( columnCount = = Integer . MAX _ VALUE ) 
 { 
 columnCount = 100 ; 
 - sessionState . out . println ( " Using default column limit of 100 " ) ; 
 + sessionState . out . println ( " Using default cell limit of 100 " ) ; 
 } 
 
 
 @ @ - 2153 , 7 + 2153 , 7 @ @ public class CliClient 
 if ( cf _ def . default _ validation _ class ! = null ) 
 sessionState . out . printf ( " Default column value validator : % s % n " , cf _ def . default _ validation _ class ) ; 
 
 - sessionState . out . printf ( " Columns sorted by : % s % s % n " , cf _ def . comparator _ type , cf _ def . column _ type . equals ( " Super " ) ? " / " + cf _ def . subcomparator _ type : " " ) ; 
 + sessionState . out . printf ( " Cells sorted by : % s % s % n " , cf _ def . comparator _ type , cf _ def . column _ type . equals ( " Super " ) ? " / " + cf _ def . subcomparator _ type : " " ) ; 
 sessionState . out . printf ( " GC grace seconds : % s % n " , cf _ def . gc _ grace _ seconds ) ; 
 sessionState . out . printf ( " Compaction min / max thresholds : % s / % s % n " , cf _ def . min _ compaction _ threshold , cf _ def . max _ compaction _ threshold ) ; 
 sessionState . out . printf ( " Read repair chance : % s % n " , cf _ def . read _ repair _ chance ) ; 
 @ @ - 2888 , 7 + 2888 , 7 @ @ public class CliClient 
 Column col = columnOrSuperColumn . column ; 
 validator = getValidatorForValue ( columnFamilyDef , col . getName ( ) ) ; 
 
 - sessionState . out . printf ( " = > ( column = % s , value = % s , timestamp = % d % s ) % n " , 
 + sessionState . out . printf ( " = > ( name = % s , value = % s , timestamp = % d % s ) % n " , 
 formatColumnName ( keySpace , columnFamilyName , col . name ) , validator . getString ( col . value ) , col . timestamp , 
 col . isSetTtl ( ) ? String . format ( " , ttl = % d " , col . getTtl ( ) ) : " " ) ; 
 } 
 @ @ - 2901 , 7 + 2901 , 7 @ @ public class CliClient 
 { 
 validator = getValidatorForValue ( columnFamilyDef , col . getName ( ) ) ; 
 
 - sessionState . out . printf ( " % n ( column = % s , value = % s , timestamp = % d % s ) " , 
 + sessionState . out . printf ( " % n ( name = % s , value = % s , timestamp = % d % s ) " , 
 formatSubcolumnName ( keySpace , columnFamilyName , col . name ) , validator . getString ( col . value ) , col . timestamp , 
 col . isSetTtl ( ) ? String . format ( " , ttl = % d " , col . getTtl ( ) ) : " " ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java 
 index 0a3497b . . 76f016c 100644 
 - - - a / test / unit / org / apache / cassandra / cli / CliTest . java 
 + + + b / test / unit / org / apache / cassandra / cli / CliTest . java 
 @ @ - 291 , 7 + 291 , 7 @ @ public class CliTest extends SchemaLoader 
 } 
 else 
 { 
 - assertTrue ( result . startsWith ( " = > ( column = " ) | | result . startsWith ( " Value was not found " ) ) ; 
 + assertTrue ( result . startsWith ( " = > ( name = " ) | | result . startsWith ( " Value was not found " ) ) ; 
 } 
 assertTrue ( result . contains ( " Elapsed time : " ) ) ; 
 }
