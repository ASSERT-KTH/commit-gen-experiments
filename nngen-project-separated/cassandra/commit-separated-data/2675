BLEU SCORE: 0.0208362582256928

TEST MSG: Fix potentially repairing with wrong nodes
GENERATED MSG: Ninja - return duplicate set values and map keys validation

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index af7f2fd . . df19467 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 8 , 6 + 8 , 7 @ @ <nl> * Scrub should not always clear out repaired status ( CASSANDRA - 5351 ) <nl> * Improve handling of range tombstone for wide partitions ( CASSANDRA - 6446 ) <nl> * Fix ClassCastException for compact table with composites ( CASSANDRA - 6738 ) <nl> + * Fix potentially repairing with wrong nodes ( CASSANDRA - 6808 ) <nl> Merged from 2 . 0 : <nl> * Avoid race - prone second " scrub " of system keyspace ( CASSANDRA - 6797 ) <nl> * Pool CqlRecordWriter clients by inetaddress rather than Range <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index e358f7d . . 132e674 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 2577 , 9 + 2577 , 14 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> return ; <nl> } <nl> <nl> - Set < InetAddress > neighbours = new HashSet < > ( ) ; <nl> + Set < InetAddress > allNeighbors = new HashSet < > ( ) ; <nl> + Map < Range , Set < InetAddress > > rangeToNeighbors = new HashMap < > ( ) ; <nl> for ( Range < Token > range : ranges ) <nl> - neighbours . addAll ( ActiveRepairService . getNeighbors ( keyspace , range , dataCenters , hosts ) ) ; <nl> + { <nl> + Set < InetAddress > neighbors = ActiveRepairService . getNeighbors ( keyspace , range , dataCenters , hosts ) ; <nl> + rangeToNeighbors . put ( range , neighbors ) ; <nl> + allNeighbors . addAll ( neighbors ) ; <nl> + } <nl> <nl> List < ColumnFamilyStore > columnFamilyStores = new ArrayList < > ( ) ; <nl> for ( ColumnFamilyStore cfs : getValidColumnFamilies ( false , false , keyspace , columnFamilies ) ) <nl> @ @ - 2587 , 7 + 2592 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> UUID parentSession = null ; <nl> if ( ! fullRepair ) <nl> - parentSession = ActiveRepairService . instance . prepareForRepair ( neighbours , ranges , columnFamilyStores ) ; <nl> + parentSession = ActiveRepairService . instance . prepareForRepair ( allNeighbors , ranges , columnFamilyStores ) ; <nl> <nl> List < RepairFuture > futures = new ArrayList < > ( ranges . size ( ) ) ; <nl> for ( Range < Token > range : ranges ) <nl> @ @ - 2595 , 7 + 2600 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> RepairFuture future ; <nl> try <nl> { <nl> - future = forceKeyspaceRepair ( parentSession , range , keyspace , isSequential , neighbours , columnFamilies ) ; <nl> + future = forceKeyspaceRepair ( parentSession , range , keyspace , isSequential , rangeToNeighbors . get ( range ) , columnFamilies ) ; <nl> } <nl> catch ( IllegalArgumentException e ) <nl> { <nl> @ @ - 2642 , 7 + 2647 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> } <nl> } <nl> if ( ! fullRepair ) <nl> - ActiveRepairService . instance . finishParentSession ( parentSession , neighbours ) ; <nl> + ActiveRepairService . instance . finishParentSession ( parentSession , allNeighbors ) ; <nl> sendNotification ( " repair " , String . format ( " Repair command # % d finished " , cmd ) , new int [ ] { cmd , ActiveRepairService . Status . FINISHED . ordinal ( ) } ) ; <nl> } <nl> } , null ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cql3 / Constants . java b / src / java / org / apache / cassandra / cql3 / Constants . java <nl> index db264c4 . . 4c9d856 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Constants . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / Constants . java <nl> @ @ - 20 , 7 + 20 , 6 @ @ package org . apache . cassandra . cql3 ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> <nl> - import com . google . common . base . Objects ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 265 , 24 + 264 , 6 @ @ public abstract class Constants <nl> { <nl> return bytes ; <nl> } <nl> - <nl> - @ Override <nl> - public int hashCode ( ) <nl> - { <nl> - return Objects . hashCode ( bytes ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean equals ( Object o ) <nl> - { <nl> - if ( this = = o ) <nl> - return true ; <nl> - <nl> - if ( ! ( o instanceof Value ) ) <nl> - return false ; <nl> - <nl> - return Objects . equal ( this . bytes , ( ( Value ) o ) . bytes ) ; <nl> - } <nl> } <nl> <nl> public static class Marker extends AbstractMarker <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Maps . java b / src / java / org / apache / cassandra / cql3 / Maps . java <nl> index 6c5efce . . e34e076 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Maps . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / Maps . java <nl> @ @ - 80 , 8 + 80 , 7 @ @ public abstract class Maps <nl> if ( k instanceof Term . NonTerminal | | v instanceof Term . NonTerminal ) <nl> allTerminal = false ; <nl> <nl> - if ( values . put ( k , v ) ! = null ) <nl> - throw new InvalidRequestException ( String . format ( " Invalid map literal : duplicate entry for key % s " , entry . left ) ) ; <nl> + values . put ( k , v ) ; <nl> } <nl> DelayedValue value = new DelayedValue ( ( ( MapType ) receiver . type ) . keys , values ) ; <nl> return allTerminal ? value . bind ( Collections . < ByteBuffer > emptyList ( ) ) : value ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Sets . java b / src / java / org / apache / cassandra / cql3 / Sets . java <nl> index 7c0242d . . 748f269 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Sets . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / Sets . java <nl> @ @ - 68 , 6 + 68 , 7 @ @ public abstract class Sets <nl> if ( receiver . type instanceof MapType & & elements . isEmpty ( ) ) <nl> return new Maps . Value ( Collections . < ByteBuffer , ByteBuffer > emptyMap ( ) ) ; <nl> <nl> + <nl> ColumnSpecification valueSpec = Sets . valueSpecOf ( receiver ) ; <nl> Set < Term > values = new HashSet < Term > ( elements . size ( ) ) ; <nl> boolean allTerminal = true ; <nl> @ @ - 81 , 8 + 82 , 7 @ @ public abstract class Sets <nl> if ( t instanceof Term . NonTerminal ) <nl> allTerminal = false ; <nl> <nl> - if ( ! values . add ( t ) ) <nl> - throw new InvalidRequestException ( String . format ( " Invalid set literal : duplicate value % s " , rt ) ) ; <nl> + values . add ( t ) ; <nl> } <nl> DelayedValue value = new DelayedValue ( ( ( SetType ) receiver . type ) . elements , values ) ; <nl> return allTerminal ? value . bind ( Collections . < ByteBuffer > emptyList ( ) ) : value ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java b / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java <nl> index 3a51204 . . a6b86a2 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java <nl> @ @ - 21 , 8 + 21 , 6 @ @ import java . nio . ByteBuffer ; <nl> import java . util . ArrayList ; <nl> import java . util . List ; <nl> <nl> - import com . google . common . base . Objects ; <nl> - <nl> import org . apache . cassandra . cql3 . ColumnSpecification ; <nl> import org . apache . cassandra . cql3 . Constants ; <nl> import org . apache . cassandra . cql3 . Lists ; <nl> @ @ - 98 , 27 + 96 , 6 @ @ public class FunctionCall extends Term . NonTerminal <nl> throw new AssertionError ( ) ; <nl> } <nl> <nl> - @ Override <nl> - public boolean equals ( Object o ) <nl> - { <nl> - if ( this = = o ) <nl> - return true ; <nl> - <nl> - if ( ! ( o instanceof FunctionCall ) ) <nl> - return false ; <nl> - <nl> - FunctionCall fc = ( FunctionCall ) o ; <nl> - <nl> - return Objects . equal ( this . fun , fc . fun ) <nl> - & & Objects . equal ( this . terms , fc . terms ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public int hashCode ( ) <nl> - { <nl> - return Objects . hashCode ( fun , terms ) ; <nl> - } <nl> - <nl> public static class Raw implements Term . Raw <nl> { <nl> private final String functionName ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index af7f2fd . . df19467 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 8 , 6 + 8 , 7 @ @ 
 * Scrub should not always clear out repaired status ( CASSANDRA - 5351 ) 
 * Improve handling of range tombstone for wide partitions ( CASSANDRA - 6446 ) 
 * Fix ClassCastException for compact table with composites ( CASSANDRA - 6738 ) 
 + * Fix potentially repairing with wrong nodes ( CASSANDRA - 6808 ) 
 Merged from 2 . 0 : 
 * Avoid race - prone second " scrub " of system keyspace ( CASSANDRA - 6797 ) 
 * Pool CqlRecordWriter clients by inetaddress rather than Range 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index e358f7d . . 132e674 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 2577 , 9 + 2577 , 14 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 return ; 
 } 
 
 - Set < InetAddress > neighbours = new HashSet < > ( ) ; 
 + Set < InetAddress > allNeighbors = new HashSet < > ( ) ; 
 + Map < Range , Set < InetAddress > > rangeToNeighbors = new HashMap < > ( ) ; 
 for ( Range < Token > range : ranges ) 
 - neighbours . addAll ( ActiveRepairService . getNeighbors ( keyspace , range , dataCenters , hosts ) ) ; 
 + { 
 + Set < InetAddress > neighbors = ActiveRepairService . getNeighbors ( keyspace , range , dataCenters , hosts ) ; 
 + rangeToNeighbors . put ( range , neighbors ) ; 
 + allNeighbors . addAll ( neighbors ) ; 
 + } 
 
 List < ColumnFamilyStore > columnFamilyStores = new ArrayList < > ( ) ; 
 for ( ColumnFamilyStore cfs : getValidColumnFamilies ( false , false , keyspace , columnFamilies ) ) 
 @ @ - 2587 , 7 + 2592 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 UUID parentSession = null ; 
 if ( ! fullRepair ) 
 - parentSession = ActiveRepairService . instance . prepareForRepair ( neighbours , ranges , columnFamilyStores ) ; 
 + parentSession = ActiveRepairService . instance . prepareForRepair ( allNeighbors , ranges , columnFamilyStores ) ; 
 
 List < RepairFuture > futures = new ArrayList < > ( ranges . size ( ) ) ; 
 for ( Range < Token > range : ranges ) 
 @ @ - 2595 , 7 + 2600 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 RepairFuture future ; 
 try 
 { 
 - future = forceKeyspaceRepair ( parentSession , range , keyspace , isSequential , neighbours , columnFamilies ) ; 
 + future = forceKeyspaceRepair ( parentSession , range , keyspace , isSequential , rangeToNeighbors . get ( range ) , columnFamilies ) ; 
 } 
 catch ( IllegalArgumentException e ) 
 { 
 @ @ - 2642 , 7 + 2647 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 } 
 } 
 if ( ! fullRepair ) 
 - ActiveRepairService . instance . finishParentSession ( parentSession , neighbours ) ; 
 + ActiveRepairService . instance . finishParentSession ( parentSession , allNeighbors ) ; 
 sendNotification ( " repair " , String . format ( " Repair command # % d finished " , cmd ) , new int [ ] { cmd , ActiveRepairService . Status . FINISHED . ordinal ( ) } ) ; 
 } 
 } , null ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cql3 / Constants . java b / src / java / org / apache / cassandra / cql3 / Constants . java 
 index db264c4 . . 4c9d856 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Constants . java 
 + + + b / src / java / org / apache / cassandra / cql3 / Constants . java 
 @ @ - 20 , 7 + 20 , 6 @ @ package org . apache . cassandra . cql3 ; 
 import java . nio . ByteBuffer ; 
 import java . util . List ; 
 
 - import com . google . common . base . Objects ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 265 , 24 + 264 , 6 @ @ public abstract class Constants 
 { 
 return bytes ; 
 } 
 - 
 - @ Override 
 - public int hashCode ( ) 
 - { 
 - return Objects . hashCode ( bytes ) ; 
 - } 
 - 
 - @ Override 
 - public boolean equals ( Object o ) 
 - { 
 - if ( this = = o ) 
 - return true ; 
 - 
 - if ( ! ( o instanceof Value ) ) 
 - return false ; 
 - 
 - return Objects . equal ( this . bytes , ( ( Value ) o ) . bytes ) ; 
 - } 
 } 
 
 public static class Marker extends AbstractMarker 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Maps . java b / src / java / org / apache / cassandra / cql3 / Maps . java 
 index 6c5efce . . e34e076 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Maps . java 
 + + + b / src / java / org / apache / cassandra / cql3 / Maps . java 
 @ @ - 80 , 8 + 80 , 7 @ @ public abstract class Maps 
 if ( k instanceof Term . NonTerminal | | v instanceof Term . NonTerminal ) 
 allTerminal = false ; 
 
 - if ( values . put ( k , v ) ! = null ) 
 - throw new InvalidRequestException ( String . format ( " Invalid map literal : duplicate entry for key % s " , entry . left ) ) ; 
 + values . put ( k , v ) ; 
 } 
 DelayedValue value = new DelayedValue ( ( ( MapType ) receiver . type ) . keys , values ) ; 
 return allTerminal ? value . bind ( Collections . < ByteBuffer > emptyList ( ) ) : value ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Sets . java b / src / java / org / apache / cassandra / cql3 / Sets . java 
 index 7c0242d . . 748f269 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Sets . java 
 + + + b / src / java / org / apache / cassandra / cql3 / Sets . java 
 @ @ - 68 , 6 + 68 , 7 @ @ public abstract class Sets 
 if ( receiver . type instanceof MapType & & elements . isEmpty ( ) ) 
 return new Maps . Value ( Collections . < ByteBuffer , ByteBuffer > emptyMap ( ) ) ; 
 
 + 
 ColumnSpecification valueSpec = Sets . valueSpecOf ( receiver ) ; 
 Set < Term > values = new HashSet < Term > ( elements . size ( ) ) ; 
 boolean allTerminal = true ; 
 @ @ - 81 , 8 + 82 , 7 @ @ public abstract class Sets 
 if ( t instanceof Term . NonTerminal ) 
 allTerminal = false ; 
 
 - if ( ! values . add ( t ) ) 
 - throw new InvalidRequestException ( String . format ( " Invalid set literal : duplicate value % s " , rt ) ) ; 
 + values . add ( t ) ; 
 } 
 DelayedValue value = new DelayedValue ( ( ( SetType ) receiver . type ) . elements , values ) ; 
 return allTerminal ? value . bind ( Collections . < ByteBuffer > emptyList ( ) ) : value ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java b / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java 
 index 3a51204 . . a6b86a2 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java 
 @ @ - 21 , 8 + 21 , 6 @ @ import java . nio . ByteBuffer ; 
 import java . util . ArrayList ; 
 import java . util . List ; 
 
 - import com . google . common . base . Objects ; 
 - 
 import org . apache . cassandra . cql3 . ColumnSpecification ; 
 import org . apache . cassandra . cql3 . Constants ; 
 import org . apache . cassandra . cql3 . Lists ; 
 @ @ - 98 , 27 + 96 , 6 @ @ public class FunctionCall extends Term . NonTerminal 
 throw new AssertionError ( ) ; 
 } 
 
 - @ Override 
 - public boolean equals ( Object o ) 
 - { 
 - if ( this = = o ) 
 - return true ; 
 - 
 - if ( ! ( o instanceof FunctionCall ) ) 
 - return false ; 
 - 
 - FunctionCall fc = ( FunctionCall ) o ; 
 - 
 - return Objects . equal ( this . fun , fc . fun ) 
 - & & Objects . equal ( this . terms , fc . terms ) ; 
 - } 
 - 
 - @ Override 
 - public int hashCode ( ) 
 - { 
 - return Objects . hashCode ( fun , terms ) ; 
 - } 
 - 
 public static class Raw implements Term . Raw 
 { 
 private final String functionName ;
