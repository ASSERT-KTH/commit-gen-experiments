BLEU SCORE: 0.004350967877375742

TEST MSG: Attempt to fix intermittent failure of DeleteTest
GENERATED MSG: Embedded cassandra service to facilitate testing apps that depend on cassandra . Patch by Ran Tavory , reviewed by Gary Dusbabek . CASSANDRA - 740 .

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / cql3 / DeleteTest . java b / test / unit / org / apache / cassandra / cql3 / DeleteTest . java <nl> index 7782f12 . . 44bef05 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / DeleteTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / DeleteTest . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . service . EmbeddedCassandraService ; <nl> import org . junit . Assert ; <nl> + import org . junit . AfterClass ; <nl> import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 48 , 14 + 49 , 19 @ @ public class DeleteTest extends SchemaLoader <nl> private static PreparedStatement pstmt4 ; <nl> private static PreparedStatement pstmt5 ; <nl> <nl> - @ BeforeClass ( ) <nl> - public static void setup ( ) throws ConfigurationException , IOException <nl> + @ BeforeClass <nl> + public static void setup ( ) throws Exception <nl> { <nl> Schema . instance . clear ( ) ; <nl> <nl> cassandra = new EmbeddedCassandraService ( ) ; <nl> cassandra . start ( ) ; <nl> <nl> + / / Currently the native server start method return before the server is fully binded to the socket , <nl> + / / so we need to wait slightly before trying to connect to it . We should fix this but in the meantime <nl> + / / using a sleep . <nl> + Thread . sleep ( 500 ) ; <nl> + <nl> cluster = Cluster . builder ( ) . addContactPoint ( " 127 . 0 . 0 . 1 " ) . withPort ( DatabaseDescriptor . getNativeTransportPort ( ) ) . build ( ) ; <nl> session = cluster . connect ( ) ; <nl> <nl> @ @ - 107 , 7 + 113 , 12 @ @ public class DeleteTest extends SchemaLoader <nl> pstmt5 = session . prepare ( " select id , cid , inh _ c , val from junit . tpc _ inherit _ c where id = ? and cid = ? " ) ; <nl> } <nl> <nl> - <nl> + @ AfterClass <nl> + public static void tearDown ( ) throws Exception <nl> + { <nl> + cluster . close ( ) ; <nl> + cassandra . stop ( ) ; <nl> + } <nl> <nl> @ Test <nl> public void lostDeletesTest ( )
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / service / EmbeddedCassandraService . java b / src / java / org / apache / cassandra / service / EmbeddedCassandraService . java <nl> new file mode 100644 <nl> index 0000000 . . 833a857 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / service / EmbeddedCassandraService . java <nl> @ @ - 0 , 0 + 1 , 60 @ @ <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . FileOutputStream ; <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + import java . io . OutputStream ; <nl> + <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> + import org . apache . cassandra . thrift . CassandraDaemon ; <nl> + import org . apache . thrift . transport . TTransportException ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + / * * <nl> + * An embedded , in - memory cassandra storage service that listens <nl> + * on the thrift interface as configured in storage - conf . xml <nl> + * This kind of service is useful when running unit tests of <nl> + * services using cassandra for example . <nl> + * <nl> + * See { @ link EmbeddedCassandraServiceTest } for usage . <nl> + * < p > <nl> + * This is the implementation of https : / / issues . apache . org / jira / browse / CASSANDRA - 740 <nl> + * < p > <nl> + * How to use : <nl> + * In the client code create a new thread and spawn it with its { @ link Thread # start ( ) } method . <nl> + * Example : <nl> + * < pre > <nl> + * / / Tell cassandra where the configuration files are . <nl> + System . setProperty ( " storage - config " , " conf " ) ; <nl> + <nl> + cassandra = new EmbeddedCassandraService ( ) ; <nl> + cassandra . init ( ) ; <nl> + <nl> + / / spawn cassandra in a new thread <nl> + Thread t = new Thread ( cassandra ) ; <nl> + t . setDaemon ( true ) ; <nl> + t . start ( ) ; <nl> + <nl> + * < / pre > <nl> + * @ author Ran Tavory ( rantav @ gmail . com ) <nl> + * <nl> + * / <nl> + public class EmbeddedCassandraService implements Runnable <nl> + { <nl> + <nl> + CassandraDaemon cassandraDaemon ; <nl> + <nl> + public void init ( ) throws TTransportException , IOException <nl> + { <nl> + cassandraDaemon = new CassandraDaemon ( ) ; <nl> + cassandraDaemon . init ( null ) ; <nl> + } <nl> + <nl> + public void run ( ) <nl> + { <nl> + cassandraDaemon . start ( ) ; <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / service / EmbeddedCassandraServiceTest . java b / test / unit / org / apache / cassandra / service / EmbeddedCassandraServiceTest . java <nl> new file mode 100644 <nl> index 0000000 . . 512f522 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / service / EmbeddedCassandraServiceTest . java <nl> @ @ - 0 , 0 + 1 , 120 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertNotNull ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . io . UnsupportedEncodingException ; <nl> + <nl> + import org . apache . cassandra . thrift . Cassandra ; <nl> + import org . apache . cassandra . thrift . ColumnOrSuperColumn ; <nl> + import org . apache . cassandra . thrift . ColumnPath ; <nl> + import org . apache . cassandra . thrift . ConsistencyLevel ; <nl> + import org . apache . cassandra . thrift . InvalidRequestException ; <nl> + import org . apache . cassandra . thrift . NotFoundException ; <nl> + import org . apache . cassandra . thrift . TimedOutException ; <nl> + import org . apache . cassandra . thrift . UnavailableException ; <nl> + import org . apache . thrift . TException ; <nl> + import org . apache . thrift . protocol . TBinaryProtocol ; <nl> + import org . apache . thrift . protocol . TProtocol ; <nl> + import org . apache . thrift . transport . TSocket ; <nl> + import org . apache . thrift . transport . TTransport ; <nl> + import org . apache . thrift . transport . TTransportException ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + / * * <nl> + * Example how to use an embedded cassandra service . <nl> + * <nl> + * Tests connect to localhost : 9160 when the embedded server is running . <nl> + * <nl> + * @ author Ran Tavory ( rantav @ gmail . com ) <nl> + * <nl> + * / <nl> + public class EmbeddedCassandraServiceTest <nl> + { <nl> + <nl> + private static EmbeddedCassandraService cassandra ; <nl> + <nl> + / * * <nl> + * Set embedded cassandra up and spawn it in a new thread . <nl> + * <nl> + * @ throws TTransportException <nl> + * @ throws IOException <nl> + * @ throws InterruptedException <nl> + * / <nl> + @ BeforeClass <nl> + public static void setup ( ) throws TTransportException , IOException , InterruptedException <nl> + { <nl> + <nl> + / / Tell cassandra where the configuration files are . <nl> + / / Use the test configuration file . <nl> + System . setProperty ( " storage - config " , " test / conf " ) ; <nl> + <nl> + cassandra = new EmbeddedCassandraService ( ) ; <nl> + cassandra . init ( ) ; <nl> + <nl> + / / spawn cassandra in a new thread <nl> + Thread t = new Thread ( cassandra ) ; <nl> + t . setDaemon ( true ) ; <nl> + t . start ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testEmbeddedCassandraService ( ) throws UnsupportedEncodingException , InvalidRequestException , <nl> + UnavailableException , TimedOutException , TException , NotFoundException <nl> + { <nl> + Cassandra . Client client = getClient ( ) ; <nl> + <nl> + String key _ user _ id = " 1 " ; <nl> + <nl> + long timestamp = System . currentTimeMillis ( ) ; <nl> + ColumnPath cp = new ColumnPath ( " Standard1 " ) ; <nl> + cp . setColumn ( " name " . getBytes ( " utf - 8 " ) ) ; <nl> + <nl> + / / insert <nl> + client . insert ( " Keyspace1 " , key _ user _ id , cp , " Ran " . getBytes ( " UTF - 8 " ) , <nl> + timestamp , ConsistencyLevel . ONE ) ; <nl> + <nl> + / / read <nl> + ColumnOrSuperColumn got = client . get ( " Keyspace1 " , key _ user _ id , cp , <nl> + ConsistencyLevel . ONE ) ; <nl> + <nl> + / / assert <nl> + assertNotNull ( " Got a null ColumnOrSuperColumn " , got ) ; <nl> + assertEquals ( " Ran " , new String ( got . getColumn ( ) . getValue ( ) , " utf - 8 " ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Gets a connection to the localhost client <nl> + * <nl> + * @ return <nl> + * @ throws TTransportException <nl> + * / <nl> + private Cassandra . Client getClient ( ) throws TTransportException <nl> + { <nl> + TTransport tr = new TSocket ( " localhost " , 9170 ) ; <nl> + TProtocol proto = new TBinaryProtocol ( tr ) ; <nl> + Cassandra . Client client = new Cassandra . Client ( proto ) ; <nl> + tr . open ( ) ; <nl> + return client ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / cql3 / DeleteTest . java b / test / unit / org / apache / cassandra / cql3 / DeleteTest . java 
 index 7782f12 . . 44bef05 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / DeleteTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / DeleteTest . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . service . EmbeddedCassandraService ; 
 import org . junit . Assert ; 
 + import org . junit . AfterClass ; 
 import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 
 @ @ - 48 , 14 + 49 , 19 @ @ public class DeleteTest extends SchemaLoader 
 private static PreparedStatement pstmt4 ; 
 private static PreparedStatement pstmt5 ; 
 
 - @ BeforeClass ( ) 
 - public static void setup ( ) throws ConfigurationException , IOException 
 + @ BeforeClass 
 + public static void setup ( ) throws Exception 
 { 
 Schema . instance . clear ( ) ; 
 
 cassandra = new EmbeddedCassandraService ( ) ; 
 cassandra . start ( ) ; 
 
 + / / Currently the native server start method return before the server is fully binded to the socket , 
 + / / so we need to wait slightly before trying to connect to it . We should fix this but in the meantime 
 + / / using a sleep . 
 + Thread . sleep ( 500 ) ; 
 + 
 cluster = Cluster . builder ( ) . addContactPoint ( " 127 . 0 . 0 . 1 " ) . withPort ( DatabaseDescriptor . getNativeTransportPort ( ) ) . build ( ) ; 
 session = cluster . connect ( ) ; 
 
 @ @ - 107 , 7 + 113 , 12 @ @ public class DeleteTest extends SchemaLoader 
 pstmt5 = session . prepare ( " select id , cid , inh _ c , val from junit . tpc _ inherit _ c where id = ? and cid = ? " ) ; 
 } 
 
 - 
 + @ AfterClass 
 + public static void tearDown ( ) throws Exception 
 + { 
 + cluster . close ( ) ; 
 + cassandra . stop ( ) ; 
 + } 
 
 @ Test 
 public void lostDeletesTest ( )

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / service / EmbeddedCassandraService . java b / src / java / org / apache / cassandra / service / EmbeddedCassandraService . java 
 new file mode 100644 
 index 0000000 . . 833a857 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / service / EmbeddedCassandraService . java 
 @ @ - 0 , 0 + 1 , 60 @ @ 
 + package org . apache . cassandra . service ; 
 + 
 + import java . io . File ; 
 + import java . io . FileOutputStream ; 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . io . OutputStream ; 
 + 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 + import org . apache . cassandra . thrift . CassandraDaemon ; 
 + import org . apache . thrift . transport . TTransportException ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + / * * 
 + * An embedded , in - memory cassandra storage service that listens 
 + * on the thrift interface as configured in storage - conf . xml 
 + * This kind of service is useful when running unit tests of 
 + * services using cassandra for example . 
 + * 
 + * See { @ link EmbeddedCassandraServiceTest } for usage . 
 + * < p > 
 + * This is the implementation of https : / / issues . apache . org / jira / browse / CASSANDRA - 740 
 + * < p > 
 + * How to use : 
 + * In the client code create a new thread and spawn it with its { @ link Thread # start ( ) } method . 
 + * Example : 
 + * < pre > 
 + * / / Tell cassandra where the configuration files are . 
 + System . setProperty ( " storage - config " , " conf " ) ; 
 + 
 + cassandra = new EmbeddedCassandraService ( ) ; 
 + cassandra . init ( ) ; 
 + 
 + / / spawn cassandra in a new thread 
 + Thread t = new Thread ( cassandra ) ; 
 + t . setDaemon ( true ) ; 
 + t . start ( ) ; 
 + 
 + * < / pre > 
 + * @ author Ran Tavory ( rantav @ gmail . com ) 
 + * 
 + * / 
 + public class EmbeddedCassandraService implements Runnable 
 + { 
 + 
 + CassandraDaemon cassandraDaemon ; 
 + 
 + public void init ( ) throws TTransportException , IOException 
 + { 
 + cassandraDaemon = new CassandraDaemon ( ) ; 
 + cassandraDaemon . init ( null ) ; 
 + } 
 + 
 + public void run ( ) 
 + { 
 + cassandraDaemon . start ( ) ; 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / service / EmbeddedCassandraServiceTest . java b / test / unit / org / apache / cassandra / service / EmbeddedCassandraServiceTest . java 
 new file mode 100644 
 index 0000000 . . 512f522 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / service / EmbeddedCassandraServiceTest . java 
 @ @ - 0 , 0 + 1 , 120 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + package org . apache . cassandra . service ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertNotNull ; 
 + 
 + import java . io . IOException ; 
 + import java . io . UnsupportedEncodingException ; 
 + 
 + import org . apache . cassandra . thrift . Cassandra ; 
 + import org . apache . cassandra . thrift . ColumnOrSuperColumn ; 
 + import org . apache . cassandra . thrift . ColumnPath ; 
 + import org . apache . cassandra . thrift . ConsistencyLevel ; 
 + import org . apache . cassandra . thrift . InvalidRequestException ; 
 + import org . apache . cassandra . thrift . NotFoundException ; 
 + import org . apache . cassandra . thrift . TimedOutException ; 
 + import org . apache . cassandra . thrift . UnavailableException ; 
 + import org . apache . thrift . TException ; 
 + import org . apache . thrift . protocol . TBinaryProtocol ; 
 + import org . apache . thrift . protocol . TProtocol ; 
 + import org . apache . thrift . transport . TSocket ; 
 + import org . apache . thrift . transport . TTransport ; 
 + import org . apache . thrift . transport . TTransportException ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + / * * 
 + * Example how to use an embedded cassandra service . 
 + * 
 + * Tests connect to localhost : 9160 when the embedded server is running . 
 + * 
 + * @ author Ran Tavory ( rantav @ gmail . com ) 
 + * 
 + * / 
 + public class EmbeddedCassandraServiceTest 
 + { 
 + 
 + private static EmbeddedCassandraService cassandra ; 
 + 
 + / * * 
 + * Set embedded cassandra up and spawn it in a new thread . 
 + * 
 + * @ throws TTransportException 
 + * @ throws IOException 
 + * @ throws InterruptedException 
 + * / 
 + @ BeforeClass 
 + public static void setup ( ) throws TTransportException , IOException , InterruptedException 
 + { 
 + 
 + / / Tell cassandra where the configuration files are . 
 + / / Use the test configuration file . 
 + System . setProperty ( " storage - config " , " test / conf " ) ; 
 + 
 + cassandra = new EmbeddedCassandraService ( ) ; 
 + cassandra . init ( ) ; 
 + 
 + / / spawn cassandra in a new thread 
 + Thread t = new Thread ( cassandra ) ; 
 + t . setDaemon ( true ) ; 
 + t . start ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testEmbeddedCassandraService ( ) throws UnsupportedEncodingException , InvalidRequestException , 
 + UnavailableException , TimedOutException , TException , NotFoundException 
 + { 
 + Cassandra . Client client = getClient ( ) ; 
 + 
 + String key _ user _ id = " 1 " ; 
 + 
 + long timestamp = System . currentTimeMillis ( ) ; 
 + ColumnPath cp = new ColumnPath ( " Standard1 " ) ; 
 + cp . setColumn ( " name " . getBytes ( " utf - 8 " ) ) ; 
 + 
 + / / insert 
 + client . insert ( " Keyspace1 " , key _ user _ id , cp , " Ran " . getBytes ( " UTF - 8 " ) , 
 + timestamp , ConsistencyLevel . ONE ) ; 
 + 
 + / / read 
 + ColumnOrSuperColumn got = client . get ( " Keyspace1 " , key _ user _ id , cp , 
 + ConsistencyLevel . ONE ) ; 
 + 
 + / / assert 
 + assertNotNull ( " Got a null ColumnOrSuperColumn " , got ) ; 
 + assertEquals ( " Ran " , new String ( got . getColumn ( ) . getValue ( ) , " utf - 8 " ) ) ; 
 + } 
 + 
 + / * * 
 + * Gets a connection to the localhost client 
 + * 
 + * @ return 
 + * @ throws TTransportException 
 + * / 
 + private Cassandra . Client getClient ( ) throws TTransportException 
 + { 
 + TTransport tr = new TSocket ( " localhost " , 9170 ) ; 
 + TProtocol proto = new TBinaryProtocol ( tr ) ; 
 + Cassandra . Client client = new Cassandra . Client ( proto ) ; 
 + tr . open ( ) ; 
 + return client ; 
 + } 
 + }
