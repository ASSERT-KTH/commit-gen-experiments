BLEU SCORE: 0.03057230827292727

TEST MSG: better validator randomness
GENERATED MSG: Always use even distribution for merkle tree with RandomPartitionner

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / repair / Validator . java b / src / java / org / apache / cassandra / repair / Validator . java <nl> index d206305 . . 3db9761 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / Validator . java <nl> + + + b / src / java / org / apache / cassandra / repair / Validator . java <nl> @ @ - 90 , 9 + 90 , 11 @ @ public class Validator implements Runnable <nl> } <nl> else <nl> { <nl> + List < DecoratedKey > keys = new ArrayList < > ( ) ; <nl> + Random random = new Random ( ) ; <nl> + <nl> for ( Range < Token > range : tree . ranges ( ) ) <nl> { <nl> - List < DecoratedKey > keys = new ArrayList < > ( ) ; <nl> for ( DecoratedKey sample : cfs . keySamples ( range ) ) <nl> { <nl> assert range . contains ( sample . getToken ( ) ) : " Token " + sample . getToken ( ) + " is not within range " + desc . ranges ; <nl> @ @ - 107 , 7 + 109 , 6 @ @ public class Validator implements Runnable <nl> else <nl> { <nl> int numKeys = keys . size ( ) ; <nl> - Random random = new Random ( ) ; <nl> / / sample the column family using random keys from the index <nl> while ( true ) <nl> { <nl> @ @ - 115 , 6 + 116 , 7 @ @ public class Validator implements Runnable <nl> if ( ! tree . split ( dk . getToken ( ) ) ) <nl> break ; <nl> } <nl> + keys . clear ( ) ; <nl> } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e0690f1 . . b665524 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 86 , 6 + 86 , 8 @ @ <nl> * fix race that could result in Hadoop writer failing to throw an <nl> exception encountered after close ( ) ( CASSANDRA - 2755 ) <nl> * fix scan wrongly throwing assertion error ( CASSANDRA - 2653 ) <nl> + * Always use even distribution for merkle tree with RandomPartitionner <nl> + ( CASSANDRA - 2841 ) <nl> <nl> <nl> 0 . 8 . 0 - final <nl> diff - - git a / src / java / org / apache / cassandra / service / AntiEntropyService . java b / src / java / org / apache / cassandra / service / AntiEntropyService . java <nl> index 9c21121 . . 1b54145 100644 <nl> - - - a / src / java / org / apache / cassandra / service / AntiEntropyService . java <nl> + + + b / src / java / org / apache / cassandra / service / AntiEntropyService . java <nl> @ @ - 41 , 6 + 41 , 7 @ @ import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . db . DecoratedKey ; <nl> import org . apache . cassandra . db . Table ; <nl> import org . apache . cassandra . dht . AbstractBounds ; <nl> + import org . apache . cassandra . dht . RandomPartitioner ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . gms . FailureDetector ; <nl> import org . apache . cassandra . io . ICompactSerializer ; <nl> @ @ - 315 , 28 + 316 , 36 @ @ public class AntiEntropyService <nl> <nl> public void prepare ( ColumnFamilyStore cfs ) <nl> { <nl> - List < DecoratedKey > keys = new ArrayList < DecoratedKey > ( ) ; <nl> - for ( DecoratedKey sample : cfs . keySamples ( request . range ) ) <nl> + if ( tree . partitioner ( ) instanceof RandomPartitioner ) <nl> { <nl> - assert request . range . contains ( sample . token ) ; <nl> - keys . add ( sample ) ; <nl> - } <nl> - <nl> - if ( keys . isEmpty ( ) ) <nl> - { <nl> - / / use an even tree distribution <nl> + / / You can ' t beat an even tree distribution for md5 <nl> tree . init ( ) ; <nl> } <nl> else <nl> { <nl> - int numkeys = keys . size ( ) ; <nl> - Random random = new Random ( ) ; <nl> - / / sample the column family using random keys from the index <nl> - while ( true ) <nl> + List < DecoratedKey > keys = new ArrayList < DecoratedKey > ( ) ; <nl> + for ( DecoratedKey sample : cfs . keySamples ( request . range ) ) <nl> + { <nl> + assert request . range . contains ( sample . token ) ; <nl> + keys . add ( sample ) ; <nl> + } <nl> + <nl> + if ( keys . isEmpty ( ) ) <nl> + { <nl> + / / use an even tree distribution <nl> + tree . init ( ) ; <nl> + } <nl> + else <nl> { <nl> - DecoratedKey dk = keys . get ( random . nextInt ( numkeys ) ) ; <nl> - if ( ! tree . split ( dk . token ) ) <nl> - break ; <nl> + int numkeys = keys . size ( ) ; <nl> + Random random = new Random ( ) ; <nl> + / / sample the column family using random keys from the index <nl> + while ( true ) <nl> + { <nl> + DecoratedKey dk = keys . get ( random . nextInt ( numkeys ) ) ; <nl> + if ( ! tree . split ( dk . token ) ) <nl> + break ; <nl> + } <nl> } <nl> } <nl> logger . debug ( " Prepared AEService tree of size " + tree . size ( ) + " for " + request ) ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / repair / Validator . java b / src / java / org / apache / cassandra / repair / Validator . java 
 index d206305 . . 3db9761 100644 
 - - - a / src / java / org / apache / cassandra / repair / Validator . java 
 + + + b / src / java / org / apache / cassandra / repair / Validator . java 
 @ @ - 90 , 9 + 90 , 11 @ @ public class Validator implements Runnable 
 } 
 else 
 { 
 + List < DecoratedKey > keys = new ArrayList < > ( ) ; 
 + Random random = new Random ( ) ; 
 + 
 for ( Range < Token > range : tree . ranges ( ) ) 
 { 
 - List < DecoratedKey > keys = new ArrayList < > ( ) ; 
 for ( DecoratedKey sample : cfs . keySamples ( range ) ) 
 { 
 assert range . contains ( sample . getToken ( ) ) : " Token " + sample . getToken ( ) + " is not within range " + desc . ranges ; 
 @ @ - 107 , 7 + 109 , 6 @ @ public class Validator implements Runnable 
 else 
 { 
 int numKeys = keys . size ( ) ; 
 - Random random = new Random ( ) ; 
 / / sample the column family using random keys from the index 
 while ( true ) 
 { 
 @ @ - 115 , 6 + 116 , 7 @ @ public class Validator implements Runnable 
 if ( ! tree . split ( dk . getToken ( ) ) ) 
 break ; 
 } 
 + keys . clear ( ) ; 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e0690f1 . . b665524 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 86 , 6 + 86 , 8 @ @ 
 * fix race that could result in Hadoop writer failing to throw an 
 exception encountered after close ( ) ( CASSANDRA - 2755 ) 
 * fix scan wrongly throwing assertion error ( CASSANDRA - 2653 ) 
 + * Always use even distribution for merkle tree with RandomPartitionner 
 + ( CASSANDRA - 2841 ) 
 
 
 0 . 8 . 0 - final 
 diff - - git a / src / java / org / apache / cassandra / service / AntiEntropyService . java b / src / java / org / apache / cassandra / service / AntiEntropyService . java 
 index 9c21121 . . 1b54145 100644 
 - - - a / src / java / org / apache / cassandra / service / AntiEntropyService . java 
 + + + b / src / java / org / apache / cassandra / service / AntiEntropyService . java 
 @ @ - 41 , 6 + 41 , 7 @ @ import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . db . DecoratedKey ; 
 import org . apache . cassandra . db . Table ; 
 import org . apache . cassandra . dht . AbstractBounds ; 
 + import org . apache . cassandra . dht . RandomPartitioner ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . gms . FailureDetector ; 
 import org . apache . cassandra . io . ICompactSerializer ; 
 @ @ - 315 , 28 + 316 , 36 @ @ public class AntiEntropyService 
 
 public void prepare ( ColumnFamilyStore cfs ) 
 { 
 - List < DecoratedKey > keys = new ArrayList < DecoratedKey > ( ) ; 
 - for ( DecoratedKey sample : cfs . keySamples ( request . range ) ) 
 + if ( tree . partitioner ( ) instanceof RandomPartitioner ) 
 { 
 - assert request . range . contains ( sample . token ) ; 
 - keys . add ( sample ) ; 
 - } 
 - 
 - if ( keys . isEmpty ( ) ) 
 - { 
 - / / use an even tree distribution 
 + / / You can ' t beat an even tree distribution for md5 
 tree . init ( ) ; 
 } 
 else 
 { 
 - int numkeys = keys . size ( ) ; 
 - Random random = new Random ( ) ; 
 - / / sample the column family using random keys from the index 
 - while ( true ) 
 + List < DecoratedKey > keys = new ArrayList < DecoratedKey > ( ) ; 
 + for ( DecoratedKey sample : cfs . keySamples ( request . range ) ) 
 + { 
 + assert request . range . contains ( sample . token ) ; 
 + keys . add ( sample ) ; 
 + } 
 + 
 + if ( keys . isEmpty ( ) ) 
 + { 
 + / / use an even tree distribution 
 + tree . init ( ) ; 
 + } 
 + else 
 { 
 - DecoratedKey dk = keys . get ( random . nextInt ( numkeys ) ) ; 
 - if ( ! tree . split ( dk . token ) ) 
 - break ; 
 + int numkeys = keys . size ( ) ; 
 + Random random = new Random ( ) ; 
 + / / sample the column family using random keys from the index 
 + while ( true ) 
 + { 
 + DecoratedKey dk = keys . get ( random . nextInt ( numkeys ) ) ; 
 + if ( ! tree . split ( dk . token ) ) 
 + break ; 
 + } 
 } 
 } 
 logger . debug ( " Prepared AEService tree of size " + tree . size ( ) + " for " + request ) ;
