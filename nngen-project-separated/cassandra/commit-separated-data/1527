BLEU SCORE: 0.056697911109760024

TEST MSG: Fix suboptimal 2i selection when clustering col is indexed
GENERATED MSG: Fix multicolumn relations with indexes on some clustering cols

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 68a9bf4 . . 32f0873 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 6 @ @ <nl> 2 . 0 . 17 <nl> + * Fix suboptimal secondary index selection when restricted <nl> + clustering column is also indexed ( CASSANDRA - 9631 ) <nl> * ( cqlsh ) Add min _ threshold to DTCS option autocomplete ( CASSANDRA - 9385 ) <nl> * Fix error message when attempting to create an index on a column <nl> in a COMPACT STORAGE table with clustering columns ( CASSANDRA - 9527 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index 1c19760 . . 341ce81 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 1606 , 7 + 1606 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> Boolean indexed = stmt . restrictedNames . get ( clusteringColumn ) ; <nl> if ( indexed = = null ) <nl> break ; <nl> - if ( ! indexed ) <nl> + if ( ! indexed | | ! stmt . usesSecondaryIndexing ) <nl> stmt . restrictedNames . remove ( clusteringColumn ) ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / MultiColumnRelationTest . java b / test / unit / org / apache / cassandra / cql3 / MultiColumnRelationTest . java <nl> index 30b7f0f . . 65ff3e7 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / MultiColumnRelationTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / MultiColumnRelationTest . java <nl> @ @ - 1368 , 38 + 1368 , 68 @ @ public class MultiColumnRelationTest <nl> checkRow ( 1 , results , 0 , 1 , 1 , 0 , 1 ) ; <nl> checkRow ( 2 , results , 0 , 1 , 1 , 1 , 2 ) ; <nl> <nl> - results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b , c ) = ( 1 , 1 ) ALLOW FILTERING " ) ; <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b , c ) = ( 1 , 1 ) ALLOW FILTERING " ) ; <nl> assertEquals ( 2 , results . size ( ) ) ; <nl> checkRow ( 0 , results , 0 , 1 , 1 , 0 , 1 ) ; <nl> checkRow ( 1 , results , 0 , 1 , 1 , 1 , 2 ) ; <nl> <nl> - results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b , c ) = ( 1 , 1 ) AND e = 2 ALLOW FILTERING " ) ; <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE a = 0 AND ( b , c ) = ( 1 , 1 ) AND e = 2 " ) ; <nl> assertEquals ( 1 , results . size ( ) ) ; <nl> checkRow ( 0 , results , 0 , 1 , 1 , 1 , 2 ) ; <nl> <nl> - results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b ) IN ( ( 1 ) ) AND e = 2 ALLOW FILTERING " ) ; <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b , c ) = ( 1 , 1 ) AND e = 2 ALLOW FILTERING " ) ; <nl> assertEquals ( 1 , results . size ( ) ) ; <nl> checkRow ( 0 , results , 0 , 1 , 1 , 1 , 2 ) ; <nl> <nl> - results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b ) IN ( ( 0 ) , ( 1 ) ) AND e = 2 ALLOW FILTERING " ) ; <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE a = 0 AND ( b ) IN ( ( 1 ) ) AND e = 2 " ) ; <nl> + assertEquals ( 1 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 1 , 1 , 1 , 2 ) ; <nl> + <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b ) IN ( ( 1 ) ) AND e = 2 ALLOW FILTERING " ) ; <nl> + assertEquals ( 1 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 1 , 1 , 1 , 2 ) ; <nl> + <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE a = 0 AND ( b ) IN ( ( 0 ) , ( 1 ) ) AND e = 2 " ) ; <nl> assertEquals ( 2 , results . size ( ) ) ; <nl> checkRow ( 0 , results , 0 , 0 , 1 , 1 , 2 ) ; <nl> checkRow ( 1 , results , 0 , 1 , 1 , 1 , 2 ) ; <nl> <nl> - results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b , c ) IN ( ( 0 , 1 ) ) AND e = 2 ALLOW FILTERING " ) ; <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b ) IN ( ( 0 ) , ( 1 ) ) AND e = 2 ALLOW FILTERING " ) ; <nl> + assertEquals ( 2 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 0 , 1 , 1 , 2 ) ; <nl> + checkRow ( 1 , results , 0 , 1 , 1 , 1 , 2 ) ; <nl> + <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE a = 0 AND ( b , c ) IN ( ( 0 , 1 ) ) AND e = 2 " ) ; <nl> assertEquals ( 1 , results . size ( ) ) ; <nl> checkRow ( 0 , results , 0 , 0 , 1 , 1 , 2 ) ; <nl> <nl> - results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b , c ) IN ( ( 0 , 1 ) , ( 1 , 1 ) ) AND e = 2 ALLOW FILTERING " ) ; <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b , c ) IN ( ( 0 , 1 ) ) AND e = 2 ALLOW FILTERING " ) ; <nl> + assertEquals ( 1 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 0 , 1 , 1 , 2 ) ; <nl> + <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE a = 0 AND ( b , c ) IN ( ( 0 , 1 ) , ( 1 , 1 ) ) AND e = 2 " ) ; <nl> + assertEquals ( 2 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 0 , 1 , 1 , 2 ) ; <nl> + checkRow ( 1 , results , 0 , 1 , 1 , 1 , 2 ) ; <nl> + <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b , c ) IN ( ( 0 , 1 ) , ( 1 , 1 ) ) AND e = 2 ALLOW FILTERING " ) ; <nl> assertEquals ( 2 , results . size ( ) ) ; <nl> checkRow ( 0 , results , 0 , 0 , 1 , 1 , 2 ) ; <nl> checkRow ( 1 , results , 0 , 1 , 1 , 1 , 2 ) ; <nl> <nl> - results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b ) > = ( 1 ) AND e = 2 ALLOW FILTERING " ) ; <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE a = 0 AND ( b ) > = ( 1 ) AND e = 2 " ) ; <nl> assertEquals ( 1 , results . size ( ) ) ; <nl> checkRow ( 0 , results , 0 , 1 , 1 , 1 , 2 ) ; <nl> <nl> - results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b , c ) > = ( 1 , 1 ) AND e = 2 ALLOW FILTERING " ) ; <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b ) > = ( 1 ) AND e = 2 ALLOW FILTERING " ) ; <nl> + assertEquals ( 1 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 1 , 1 , 1 , 2 ) ; <nl> + <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE a = 0 AND ( b , c ) > = ( 1 , 1 ) AND e = 2 " ) ; <nl> + assertEquals ( 1 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 1 , 1 , 1 , 2 ) ; <nl> + <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b , c ) > = ( 1 , 1 ) AND e = 2 ALLOW FILTERING " ) ; <nl> assertEquals ( 1 , results . size ( ) ) ; <nl> checkRow ( 0 , results , 0 , 1 , 1 , 1 , 2 ) ; <nl> } <nl> @ @ - 1428 , 24 + 1458 , 47 @ @ public class MultiColumnRelationTest <nl> checkRow ( 0 , results , 0 , 0 , 1 , 1 , 0 , 4 ) ; <nl> checkRow ( 1 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; <nl> <nl> + results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND b = 0 AND ( c ) IN ( ( 1 ) ) AND f = 5 " ) ; <nl> + assertEquals ( 1 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; <nl> + <nl> results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND ( c ) IN ( ( 1 ) ) AND f = 5 ALLOW FILTERING " ) ; <nl> assertEquals ( 1 , results . size ( ) ) ; <nl> checkRow ( 0 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; <nl> <nl> + results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND b = 0 AND ( c ) IN ( ( 1 ) , ( 2 ) ) AND f = 5 " ) ; <nl> + assertEquals ( 2 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; <nl> + checkRow ( 1 , results , 0 , 0 , 2 , 0 , 0 , 5 ) ; <nl> + <nl> results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND ( c ) IN ( ( 1 ) , ( 2 ) ) AND f = 5 ALLOW FILTERING " ) ; <nl> assertEquals ( 2 , results . size ( ) ) ; <nl> checkRow ( 0 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; <nl> checkRow ( 1 , results , 0 , 0 , 2 , 0 , 0 , 5 ) ; <nl> <nl> + results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND b = 0 AND ( c , d ) IN ( ( 1 , 0 ) ) AND f = 3 " ) ; <nl> + assertEquals ( 1 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 0 , 1 , 0 , 0 , 3 ) ; <nl> + <nl> results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND ( c , d ) IN ( ( 1 , 0 ) ) AND f = 3 ALLOW FILTERING " ) ; <nl> assertEquals ( 1 , results . size ( ) ) ; <nl> checkRow ( 0 , results , 0 , 0 , 1 , 0 , 0 , 3 ) ; <nl> <nl> + results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND b = 0 AND ( c ) > = ( 1 ) AND f = 5 " ) ; <nl> + assertEquals ( 2 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; <nl> + checkRow ( 1 , results , 0 , 0 , 2 , 0 , 0 , 5 ) ; <nl> + <nl> results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND ( c ) > = ( 1 ) AND f = 5 ALLOW FILTERING " ) ; <nl> assertEquals ( 2 , results . size ( ) ) ; <nl> checkRow ( 0 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; <nl> checkRow ( 1 , results , 0 , 0 , 2 , 0 , 0 , 5 ) ; <nl> <nl> + results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND b = 0 AND ( c , d ) > = ( 1 , 1 ) AND f = 5 " ) ; <nl> + assertEquals ( 2 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; <nl> + checkRow ( 1 , results , 0 , 0 , 2 , 0 , 0 , 5 ) ; <nl> + <nl> results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND ( c , d ) > = ( 1 , 1 ) AND f = 5 ALLOW FILTERING " ) ; <nl> assertEquals ( 2 , results . size ( ) ) ; <nl> checkRow ( 0 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / SingleColumnRelationTest . java b / test / unit / org / apache / cassandra / cql3 / SingleColumnRelationTest . java <nl> index 34d3bf1 . . c8c67aa 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / SingleColumnRelationTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / SingleColumnRelationTest . java <nl> @ @ - 96 , 17 + 96 , 33 @ @ public class SingleColumnRelationTest <nl> <nl> execute ( " INSERT INTO % s . partition _ with _ indices ( a , b , c , d , e , f ) VALUES ( 0 , 0 , 2 , 0 , 0 , 5 ) " ) ; <nl> <nl> - UntypedResultSet results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND c = 1 ALLOW FILTERING " ) ; <nl> + UntypedResultSet results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND b = 0 AND c = 1 " ) ; <nl> assertEquals ( 3 , results . size ( ) ) ; <nl> checkRow ( 0 , results , 0 , 0 , 1 , 0 , 0 , 3 ) ; <nl> checkRow ( 1 , results , 0 , 0 , 1 , 1 , 0 , 4 ) ; <nl> checkRow ( 2 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; <nl> <nl> + results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND c = 1 ALLOW FILTERING " ) ; <nl> + assertEquals ( 3 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 0 , 1 , 0 , 0 , 3 ) ; <nl> + checkRow ( 1 , results , 0 , 0 , 1 , 1 , 0 , 4 ) ; <nl> + checkRow ( 2 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; <nl> + <nl> + results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND b = 0 AND c = 1 AND d = 1 " ) ; <nl> + assertEquals ( 2 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 0 , 1 , 1 , 0 , 4 ) ; <nl> + checkRow ( 1 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; <nl> + <nl> results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND c = 1 AND d = 1 ALLOW FILTERING " ) ; <nl> assertEquals ( 2 , results . size ( ) ) ; <nl> checkRow ( 0 , results , 0 , 0 , 1 , 1 , 0 , 4 ) ; <nl> checkRow ( 1 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; <nl> <nl> + results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND b = 0 AND c > = 1 AND f = 5 " ) ; <nl> + assertEquals ( 2 , results . size ( ) ) ; <nl> + checkRow ( 0 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; <nl> + checkRow ( 1 , results , 0 , 0 , 2 , 0 , 0 , 5 ) ; <nl> + <nl> results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND c > = 1 AND f = 5 ALLOW FILTERING " ) ; <nl> assertEquals ( 2 , results . size ( ) ) ; <nl> checkRow ( 0 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 68a9bf4 . . 32f0873 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 6 @ @ 
 2 . 0 . 17 
 + * Fix suboptimal secondary index selection when restricted 
 + clustering column is also indexed ( CASSANDRA - 9631 ) 
 * ( cqlsh ) Add min _ threshold to DTCS option autocomplete ( CASSANDRA - 9385 ) 
 * Fix error message when attempting to create an index on a column 
 in a COMPACT STORAGE table with clustering columns ( CASSANDRA - 9527 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index 1c19760 . . 341ce81 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 1606 , 7 + 1606 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 Boolean indexed = stmt . restrictedNames . get ( clusteringColumn ) ; 
 if ( indexed = = null ) 
 break ; 
 - if ( ! indexed ) 
 + if ( ! indexed | | ! stmt . usesSecondaryIndexing ) 
 stmt . restrictedNames . remove ( clusteringColumn ) ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / MultiColumnRelationTest . java b / test / unit / org / apache / cassandra / cql3 / MultiColumnRelationTest . java 
 index 30b7f0f . . 65ff3e7 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / MultiColumnRelationTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / MultiColumnRelationTest . java 
 @ @ - 1368 , 38 + 1368 , 68 @ @ public class MultiColumnRelationTest 
 checkRow ( 1 , results , 0 , 1 , 1 , 0 , 1 ) ; 
 checkRow ( 2 , results , 0 , 1 , 1 , 1 , 2 ) ; 
 
 - results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b , c ) = ( 1 , 1 ) ALLOW FILTERING " ) ; 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b , c ) = ( 1 , 1 ) ALLOW FILTERING " ) ; 
 assertEquals ( 2 , results . size ( ) ) ; 
 checkRow ( 0 , results , 0 , 1 , 1 , 0 , 1 ) ; 
 checkRow ( 1 , results , 0 , 1 , 1 , 1 , 2 ) ; 
 
 - results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b , c ) = ( 1 , 1 ) AND e = 2 ALLOW FILTERING " ) ; 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE a = 0 AND ( b , c ) = ( 1 , 1 ) AND e = 2 " ) ; 
 assertEquals ( 1 , results . size ( ) ) ; 
 checkRow ( 0 , results , 0 , 1 , 1 , 1 , 2 ) ; 
 
 - results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b ) IN ( ( 1 ) ) AND e = 2 ALLOW FILTERING " ) ; 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b , c ) = ( 1 , 1 ) AND e = 2 ALLOW FILTERING " ) ; 
 assertEquals ( 1 , results . size ( ) ) ; 
 checkRow ( 0 , results , 0 , 1 , 1 , 1 , 2 ) ; 
 
 - results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b ) IN ( ( 0 ) , ( 1 ) ) AND e = 2 ALLOW FILTERING " ) ; 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE a = 0 AND ( b ) IN ( ( 1 ) ) AND e = 2 " ) ; 
 + assertEquals ( 1 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 1 , 1 , 1 , 2 ) ; 
 + 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b ) IN ( ( 1 ) ) AND e = 2 ALLOW FILTERING " ) ; 
 + assertEquals ( 1 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 1 , 1 , 1 , 2 ) ; 
 + 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE a = 0 AND ( b ) IN ( ( 0 ) , ( 1 ) ) AND e = 2 " ) ; 
 assertEquals ( 2 , results . size ( ) ) ; 
 checkRow ( 0 , results , 0 , 0 , 1 , 1 , 2 ) ; 
 checkRow ( 1 , results , 0 , 1 , 1 , 1 , 2 ) ; 
 
 - results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b , c ) IN ( ( 0 , 1 ) ) AND e = 2 ALLOW FILTERING " ) ; 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b ) IN ( ( 0 ) , ( 1 ) ) AND e = 2 ALLOW FILTERING " ) ; 
 + assertEquals ( 2 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 0 , 1 , 1 , 2 ) ; 
 + checkRow ( 1 , results , 0 , 1 , 1 , 1 , 2 ) ; 
 + 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE a = 0 AND ( b , c ) IN ( ( 0 , 1 ) ) AND e = 2 " ) ; 
 assertEquals ( 1 , results . size ( ) ) ; 
 checkRow ( 0 , results , 0 , 0 , 1 , 1 , 2 ) ; 
 
 - results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b , c ) IN ( ( 0 , 1 ) , ( 1 , 1 ) ) AND e = 2 ALLOW FILTERING " ) ; 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b , c ) IN ( ( 0 , 1 ) ) AND e = 2 ALLOW FILTERING " ) ; 
 + assertEquals ( 1 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 0 , 1 , 1 , 2 ) ; 
 + 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE a = 0 AND ( b , c ) IN ( ( 0 , 1 ) , ( 1 , 1 ) ) AND e = 2 " ) ; 
 + assertEquals ( 2 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 0 , 1 , 1 , 2 ) ; 
 + checkRow ( 1 , results , 0 , 1 , 1 , 1 , 2 ) ; 
 + 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b , c ) IN ( ( 0 , 1 ) , ( 1 , 1 ) ) AND e = 2 ALLOW FILTERING " ) ; 
 assertEquals ( 2 , results . size ( ) ) ; 
 checkRow ( 0 , results , 0 , 0 , 1 , 1 , 2 ) ; 
 checkRow ( 1 , results , 0 , 1 , 1 , 1 , 2 ) ; 
 
 - results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b ) > = ( 1 ) AND e = 2 ALLOW FILTERING " ) ; 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE a = 0 AND ( b ) > = ( 1 ) AND e = 2 " ) ; 
 assertEquals ( 1 , results . size ( ) ) ; 
 checkRow ( 0 , results , 0 , 1 , 1 , 1 , 2 ) ; 
 
 - results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b , c ) > = ( 1 , 1 ) AND e = 2 ALLOW FILTERING " ) ; 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b ) > = ( 1 ) AND e = 2 ALLOW FILTERING " ) ; 
 + assertEquals ( 1 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 1 , 1 , 1 , 2 ) ; 
 + 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE a = 0 AND ( b , c ) > = ( 1 , 1 ) AND e = 2 " ) ; 
 + assertEquals ( 1 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 1 , 1 , 1 , 2 ) ; 
 + 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering _ with _ indices WHERE ( b , c ) > = ( 1 , 1 ) AND e = 2 ALLOW FILTERING " ) ; 
 assertEquals ( 1 , results . size ( ) ) ; 
 checkRow ( 0 , results , 0 , 1 , 1 , 1 , 2 ) ; 
 } 
 @ @ - 1428 , 24 + 1458 , 47 @ @ public class MultiColumnRelationTest 
 checkRow ( 0 , results , 0 , 0 , 1 , 1 , 0 , 4 ) ; 
 checkRow ( 1 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; 
 
 + results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND b = 0 AND ( c ) IN ( ( 1 ) ) AND f = 5 " ) ; 
 + assertEquals ( 1 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; 
 + 
 results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND ( c ) IN ( ( 1 ) ) AND f = 5 ALLOW FILTERING " ) ; 
 assertEquals ( 1 , results . size ( ) ) ; 
 checkRow ( 0 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; 
 
 + results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND b = 0 AND ( c ) IN ( ( 1 ) , ( 2 ) ) AND f = 5 " ) ; 
 + assertEquals ( 2 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; 
 + checkRow ( 1 , results , 0 , 0 , 2 , 0 , 0 , 5 ) ; 
 + 
 results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND ( c ) IN ( ( 1 ) , ( 2 ) ) AND f = 5 ALLOW FILTERING " ) ; 
 assertEquals ( 2 , results . size ( ) ) ; 
 checkRow ( 0 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; 
 checkRow ( 1 , results , 0 , 0 , 2 , 0 , 0 , 5 ) ; 
 
 + results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND b = 0 AND ( c , d ) IN ( ( 1 , 0 ) ) AND f = 3 " ) ; 
 + assertEquals ( 1 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 0 , 1 , 0 , 0 , 3 ) ; 
 + 
 results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND ( c , d ) IN ( ( 1 , 0 ) ) AND f = 3 ALLOW FILTERING " ) ; 
 assertEquals ( 1 , results . size ( ) ) ; 
 checkRow ( 0 , results , 0 , 0 , 1 , 0 , 0 , 3 ) ; 
 
 + results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND b = 0 AND ( c ) > = ( 1 ) AND f = 5 " ) ; 
 + assertEquals ( 2 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; 
 + checkRow ( 1 , results , 0 , 0 , 2 , 0 , 0 , 5 ) ; 
 + 
 results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND ( c ) > = ( 1 ) AND f = 5 ALLOW FILTERING " ) ; 
 assertEquals ( 2 , results . size ( ) ) ; 
 checkRow ( 0 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; 
 checkRow ( 1 , results , 0 , 0 , 2 , 0 , 0 , 5 ) ; 
 
 + results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND b = 0 AND ( c , d ) > = ( 1 , 1 ) AND f = 5 " ) ; 
 + assertEquals ( 2 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; 
 + checkRow ( 1 , results , 0 , 0 , 2 , 0 , 0 , 5 ) ; 
 + 
 results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND ( c , d ) > = ( 1 , 1 ) AND f = 5 ALLOW FILTERING " ) ; 
 assertEquals ( 2 , results . size ( ) ) ; 
 checkRow ( 0 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / SingleColumnRelationTest . java b / test / unit / org / apache / cassandra / cql3 / SingleColumnRelationTest . java 
 index 34d3bf1 . . c8c67aa 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / SingleColumnRelationTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / SingleColumnRelationTest . java 
 @ @ - 96 , 17 + 96 , 33 @ @ public class SingleColumnRelationTest 
 
 execute ( " INSERT INTO % s . partition _ with _ indices ( a , b , c , d , e , f ) VALUES ( 0 , 0 , 2 , 0 , 0 , 5 ) " ) ; 
 
 - UntypedResultSet results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND c = 1 ALLOW FILTERING " ) ; 
 + UntypedResultSet results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND b = 0 AND c = 1 " ) ; 
 assertEquals ( 3 , results . size ( ) ) ; 
 checkRow ( 0 , results , 0 , 0 , 1 , 0 , 0 , 3 ) ; 
 checkRow ( 1 , results , 0 , 0 , 1 , 1 , 0 , 4 ) ; 
 checkRow ( 2 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; 
 
 + results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND c = 1 ALLOW FILTERING " ) ; 
 + assertEquals ( 3 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 0 , 1 , 0 , 0 , 3 ) ; 
 + checkRow ( 1 , results , 0 , 0 , 1 , 1 , 0 , 4 ) ; 
 + checkRow ( 2 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; 
 + 
 + results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND b = 0 AND c = 1 AND d = 1 " ) ; 
 + assertEquals ( 2 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 0 , 1 , 1 , 0 , 4 ) ; 
 + checkRow ( 1 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; 
 + 
 results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND c = 1 AND d = 1 ALLOW FILTERING " ) ; 
 assertEquals ( 2 , results . size ( ) ) ; 
 checkRow ( 0 , results , 0 , 0 , 1 , 1 , 0 , 4 ) ; 
 checkRow ( 1 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; 
 
 + results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND b = 0 AND c > = 1 AND f = 5 " ) ; 
 + assertEquals ( 2 , results . size ( ) ) ; 
 + checkRow ( 0 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ; 
 + checkRow ( 1 , results , 0 , 0 , 2 , 0 , 0 , 5 ) ; 
 + 
 results = execute ( " SELECT * FROM % s . partition _ with _ indices WHERE a = 0 AND c > = 1 AND f = 5 ALLOW FILTERING " ) ; 
 assertEquals ( 2 , results . size ( ) ) ; 
 checkRow ( 0 , results , 0 , 0 , 1 , 1 , 1 , 5 ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
