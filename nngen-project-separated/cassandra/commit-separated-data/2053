BLEU SCORE: 0.016932492841722675

TEST MSG: Fix 2i lookup on collection cell names w / some clustering columns
GENERATED MSG: merge from 1 . 2

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 0ae7af9 . . 4da1e56 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 6 @ @ <nl> 2 . 1 . 1 <nl> + * Fix exception when querying secondary index on set items or map keys <nl> + when some clustering columns are specified ( CASSANDRA - 8073 ) <nl> * Send proper error response when there is an error during native <nl> protocol message decode ( CASSANDRA - 8118 ) <nl> * Gossip should ignore generation numbers too far in the future ( CASSANDRA - 8113 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / ExtendedFilter . java b / src / java / org / apache / cassandra / db / filter / ExtendedFilter . java <nl> index 4f27a51 . . e945d2b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / ExtendedFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / ExtendedFilter . java <nl> @ @ - 20 , 10 + 20 , 7 @ @ package org . apache . cassandra . db . filter ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> <nl> - import com . google . common . base . Predicate ; <nl> - import com . google . common . collect . Iterators ; <nl> - import org . apache . cassandra . db . marshal . CollectionType ; <nl> - import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import com . google . common . base . Objects ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 33 , 6 + 30 , 7 @ @ import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . composites . CellName ; <nl> import org . apache . cassandra . db . composites . Composite ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> + import org . apache . cassandra . db . marshal . CollectionType ; <nl> import org . apache . cassandra . db . marshal . CompositeType ; <nl> <nl> / * * <nl> @ @ - 151 , 6 + 149 , 17 @ @ public abstract class ExtendedFilter <nl> } <nl> } <nl> <nl> + public String toString ( ) <nl> + { <nl> + return Objects . toStringHelper ( this ) <nl> + . add ( " dataRange " , dataRange ) <nl> + . add ( " maxResults " , maxResults ) <nl> + . add ( " currentLimit " , currentLimit ) <nl> + . add ( " timestamp " , timestamp ) <nl> + . add ( " countCQL3Rows " , countCQL3Rows ) <nl> + . toString ( ) ; <nl> + } <nl> + <nl> public static class WithClauses extends ExtendedFilter <nl> { <nl> private final List < IndexExpression > clause ; <nl> @ @ - 395 , 6 + 404 , 15 @ @ public abstract class ExtendedFilter <nl> } <nl> throw new AssertionError ( ) ; <nl> } <nl> + <nl> + public String toString ( ) <nl> + { <nl> + return Objects . toStringHelper ( this ) <nl> + . add ( " dataRange " , dataRange ) <nl> + . add ( " timestamp " , timestamp ) <nl> + . add ( " clause " , clause ) <nl> + . toString ( ) ; <nl> + } <nl> } <nl> <nl> private static class EmptyClauseFilter extends ExtendedFilter <nl> diff - - git a / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnCollectionKey . java b / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnCollectionKey . java <nl> index 2d25f8e . . c252546 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnCollectionKey . java <nl> + + + b / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnCollectionKey . java <nl> @ @ - 74 , 7 + 74 , 7 @ @ public class CompositesIndexOnCollectionKey extends CompositesIndex <nl> int count = 1 + baseCfs . metadata . clusteringColumns ( ) . size ( ) ; <nl> CBuilder builder = getIndexComparator ( ) . builder ( ) ; <nl> builder . add ( rowKey ) ; <nl> - for ( int i = 0 ; i < count - 1 ; i + + ) <nl> + for ( int i = 0 ; i < Math . min ( cellName . size ( ) , count - 1 ) ; i + + ) <nl> builder . add ( cellName . get ( i ) ) ; <nl> return builder . build ( ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java b / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java <nl> index 525059d . . 605f3ed 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java <nl> @ @ - 157 , 4 + 157 , 29 @ @ public class ContainsRelationTest extends CQLTester <nl> <nl> assertEmpty ( execute ( " SELECT * FROM % s WHERE k2 = ? AND v CONTAINS ? ALLOW FILTERING " , 1 , 7 ) ) ; <nl> } <nl> + <nl> + / / See CASSANDRA - 8073 <nl> + @ Test <nl> + public void testIndexLookupWithClusteringPrefix ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c int , d set < int > , PRIMARY KEY ( a , b , c ) ) " ) ; <nl> + createIndex ( " CREATE INDEX ON % s ( d ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 0 , 0 , 0 , set ( 1 , 2 , 3 ) ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 0 , 0 , 1 , set ( 3 , 4 , 5 ) ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 0 , 1 , 0 , set ( 1 , 2 , 3 ) ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 0 , 1 , 1 , set ( 3 , 4 , 5 ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? AND d CONTAINS ? " , 0 , 1 , 3 ) , <nl> + row ( 0 , 1 , 0 , set ( 1 , 2 , 3 ) ) , <nl> + row ( 0 , 1 , 1 , set ( 3 , 4 , 5 ) ) <nl> + ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? AND d CONTAINS ? " , 0 , 1 , 2 ) , <nl> + row ( 0 , 1 , 0 , set ( 1 , 2 , 3 ) ) <nl> + ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? AND d CONTAINS ? " , 0 , 1 , 5 ) , <nl> + row ( 0 , 1 , 1 , set ( 3 , 4 , 5 ) ) <nl> + ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b935425 . . 7f5a487 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 2 - rc1 <nl> + * fix cqlsh rendering of blob fields ( CASSANDRA - 4970 ) <nl> * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) <nl> * save truncation position in system table ( CASSANDRA - 4906 ) <nl> * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) <nl> diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py <nl> index d15c083 . . bab3506 100644 <nl> - - - a / pylib / cqlshlib / formatting . py <nl> + + + b / pylib / cqlshlib / formatting . py <nl> @ @ - 88 , 8 + 88 , 8 @ @ def formatter _ for ( typname ) : <nl> return f <nl> return registrator <nl> <nl> - @ formatter _ for ( ' bytes ' ) <nl> - def format _ value _ bytes ( val , colormap , * * _ ) : <nl> + @ formatter _ for ( ' blob ' ) <nl> + def format _ value _ blob ( val , colormap , * * _ ) : <nl> bval = ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) <nl> return colorme ( bval , colormap , ' hex ' ) <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0ae7af9 . . 4da1e56 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 6 @ @ 
 2 . 1 . 1 
 + * Fix exception when querying secondary index on set items or map keys 
 + when some clustering columns are specified ( CASSANDRA - 8073 ) 
 * Send proper error response when there is an error during native 
 protocol message decode ( CASSANDRA - 8118 ) 
 * Gossip should ignore generation numbers too far in the future ( CASSANDRA - 8113 ) 
 diff - - git a / src / java / org / apache / cassandra / db / filter / ExtendedFilter . java b / src / java / org / apache / cassandra / db / filter / ExtendedFilter . java 
 index 4f27a51 . . e945d2b 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / ExtendedFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / ExtendedFilter . java 
 @ @ - 20 , 10 + 20 , 7 @ @ package org . apache . cassandra . db . filter ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 
 - import com . google . common . base . Predicate ; 
 - import com . google . common . collect . Iterators ; 
 - import org . apache . cassandra . db . marshal . CollectionType ; 
 - import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import com . google . common . base . Objects ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 33 , 6 + 30 , 7 @ @ import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . composites . CellName ; 
 import org . apache . cassandra . db . composites . Composite ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 + import org . apache . cassandra . db . marshal . CollectionType ; 
 import org . apache . cassandra . db . marshal . CompositeType ; 
 
 / * * 
 @ @ - 151 , 6 + 149 , 17 @ @ public abstract class ExtendedFilter 
 } 
 } 
 
 + public String toString ( ) 
 + { 
 + return Objects . toStringHelper ( this ) 
 + . add ( " dataRange " , dataRange ) 
 + . add ( " maxResults " , maxResults ) 
 + . add ( " currentLimit " , currentLimit ) 
 + . add ( " timestamp " , timestamp ) 
 + . add ( " countCQL3Rows " , countCQL3Rows ) 
 + . toString ( ) ; 
 + } 
 + 
 public static class WithClauses extends ExtendedFilter 
 { 
 private final List < IndexExpression > clause ; 
 @ @ - 395 , 6 + 404 , 15 @ @ public abstract class ExtendedFilter 
 } 
 throw new AssertionError ( ) ; 
 } 
 + 
 + public String toString ( ) 
 + { 
 + return Objects . toStringHelper ( this ) 
 + . add ( " dataRange " , dataRange ) 
 + . add ( " timestamp " , timestamp ) 
 + . add ( " clause " , clause ) 
 + . toString ( ) ; 
 + } 
 } 
 
 private static class EmptyClauseFilter extends ExtendedFilter 
 diff - - git a / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnCollectionKey . java b / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnCollectionKey . java 
 index 2d25f8e . . c252546 100644 
 - - - a / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnCollectionKey . java 
 + + + b / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnCollectionKey . java 
 @ @ - 74 , 7 + 74 , 7 @ @ public class CompositesIndexOnCollectionKey extends CompositesIndex 
 int count = 1 + baseCfs . metadata . clusteringColumns ( ) . size ( ) ; 
 CBuilder builder = getIndexComparator ( ) . builder ( ) ; 
 builder . add ( rowKey ) ; 
 - for ( int i = 0 ; i < count - 1 ; i + + ) 
 + for ( int i = 0 ; i < Math . min ( cellName . size ( ) , count - 1 ) ; i + + ) 
 builder . add ( cellName . get ( i ) ) ; 
 return builder . build ( ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java b / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java 
 index 525059d . . 605f3ed 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java 
 @ @ - 157 , 4 + 157 , 29 @ @ public class ContainsRelationTest extends CQLTester 
 
 assertEmpty ( execute ( " SELECT * FROM % s WHERE k2 = ? AND v CONTAINS ? ALLOW FILTERING " , 1 , 7 ) ) ; 
 } 
 + 
 + / / See CASSANDRA - 8073 
 + @ Test 
 + public void testIndexLookupWithClusteringPrefix ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a int , b int , c int , d set < int > , PRIMARY KEY ( a , b , c ) ) " ) ; 
 + createIndex ( " CREATE INDEX ON % s ( d ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 0 , 0 , 0 , set ( 1 , 2 , 3 ) ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 0 , 0 , 1 , set ( 3 , 4 , 5 ) ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 0 , 1 , 0 , set ( 1 , 2 , 3 ) ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 0 , 1 , 1 , set ( 3 , 4 , 5 ) ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? AND d CONTAINS ? " , 0 , 1 , 3 ) , 
 + row ( 0 , 1 , 0 , set ( 1 , 2 , 3 ) ) , 
 + row ( 0 , 1 , 1 , set ( 3 , 4 , 5 ) ) 
 + ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? AND d CONTAINS ? " , 0 , 1 , 2 ) , 
 + row ( 0 , 1 , 0 , set ( 1 , 2 , 3 ) ) 
 + ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? AND d CONTAINS ? " , 0 , 1 , 5 ) , 
 + row ( 0 , 1 , 1 , set ( 3 , 4 , 5 ) ) 
 + ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b935425 . . 7f5a487 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 2 - rc1 
 + * fix cqlsh rendering of blob fields ( CASSANDRA - 4970 ) 
 * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) 
 * save truncation position in system table ( CASSANDRA - 4906 ) 
 * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) 
 diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py 
 index d15c083 . . bab3506 100644 
 - - - a / pylib / cqlshlib / formatting . py 
 + + + b / pylib / cqlshlib / formatting . py 
 @ @ - 88 , 8 + 88 , 8 @ @ def formatter _ for ( typname ) : 
 return f 
 return registrator 
 
 - @ formatter _ for ( ' bytes ' ) 
 - def format _ value _ bytes ( val , colormap , * * _ ) : 
 + @ formatter _ for ( ' blob ' ) 
 + def format _ value _ blob ( val , colormap , * * _ ) : 
 bval = ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) 
 return colorme ( bval , colormap , ' hex ' ) 

