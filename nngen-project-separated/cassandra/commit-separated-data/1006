BLEU SCORE: 0.05341087579952926

TEST MSG: Prevent logging in sandboxed state
GENERATED MSG: merge from 0 . 8

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 275bc04 . . ae9d545 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 4 <nl> + * Prevent logging in sandboxed state ( CASSANDRA - 11033 ) <nl> * Disallow drop / alter operations of UDTs used by UDAs ( CASSANDRA - 10721 ) <nl> * Add query time validation method on Index ( CASSANDRA - 11043 ) <nl> * Avoid potential AssertionError in mixed version cluster ( CASSANDRA - 11128 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java <nl> index c61e72e . . 660d494 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java <nl> @ @ - 40 , 7 + 40 , 7 @ @ import com . google . common . io . ByteStreams ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import com . datastax . driver . core . DataType ; <nl> + import com . datastax . driver . core . TypeCodec ; <nl> import org . apache . cassandra . concurrent . NamedThreadFactory ; <nl> import org . apache . cassandra . cql3 . ColumnIdentifier ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> @ @ - 184 , 10 + 184 , 10 @ @ final class JavaBasedUDFunction extends UDFunction <nl> super ( name , argNames , argTypes , UDHelper . driverTypes ( argTypes ) , <nl> returnType , UDHelper . driverType ( returnType ) , calledOnNullInput , " java " , body ) ; <nl> <nl> - / / javaParamTypes is just the Java representation for argTypes resp . argDataTypes <nl> - Class < ? > [ ] javaParamTypes = UDHelper . javaTypes ( argDataTypes , calledOnNullInput ) ; <nl> - / / javaReturnType is just the Java representation for returnType resp . returnDataType <nl> - Class < ? > javaReturnType = UDHelper . asJavaClass ( returnDataType ) ; <nl> + / / javaParamTypes is just the Java representation for argTypes resp . argCodecs <nl> + Class < ? > [ ] javaParamTypes = UDHelper . javaTypes ( argCodecs , calledOnNullInput ) ; <nl> + / / javaReturnType is just the Java representation for returnType resp . returnCodec <nl> + Class < ? > javaReturnType = UDHelper . asJavaClass ( returnCodec ) ; <nl> <nl> / / put each UDF in a separate package to prevent cross - UDF code access <nl> String pkgName = BASE _ PACKAGE + ' . ' + generateClassName ( name , ' p ' ) ; <nl> @ @ - 327 , 9 + 327 , 9 @ @ final class JavaBasedUDFunction extends UDFunction <nl> if ( nonSyntheticMethodCount ! = 2 | | cls . getDeclaredConstructors ( ) . length ! = 1 ) <nl> throw new InvalidRequestException ( " Check your source to not define additional Java methods or constructors " ) ; <nl> MethodType methodType = MethodType . methodType ( void . class ) <nl> - . appendParameterTypes ( DataType . class , DataType [ ] . class ) ; <nl> + . appendParameterTypes ( TypeCodec . class , TypeCodec [ ] . class ) ; <nl> MethodHandle ctor = MethodHandles . lookup ( ) . findConstructor ( cls , methodType ) ; <nl> - this . javaUDF = ( JavaUDF ) ctor . invokeWithArguments ( returnDataType , argDataTypes ) ; <nl> + this . javaUDF = ( JavaUDF ) ctor . invokeWithArguments ( returnCodec , argCodecs ) ; <nl> } <nl> finally <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / JavaUDF . java b / src / java / org / apache / cassandra / cql3 / functions / JavaUDF . java <nl> index 47f5d47 . . fcfd21c 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / JavaUDF . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / JavaUDF . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . functions ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> <nl> - import com . datastax . driver . core . DataType ; <nl> + import com . datastax . driver . core . TypeCodec ; <nl> <nl> / * * <nl> * Base class for all Java UDFs . <nl> @ @ - 31 , 73 + 31 , 73 @ @ import com . datastax . driver . core . DataType ; <nl> * / <nl> public abstract class JavaUDF <nl> { <nl> - private final DataType returnDataType ; <nl> - private final DataType [ ] argDataTypes ; <nl> + private final TypeCodec < Object > returnCodec ; <nl> + private final TypeCodec < Object > [ ] argCodecs ; <nl> <nl> - protected JavaUDF ( DataType returnDataType , DataType [ ] argDataTypes ) <nl> + protected JavaUDF ( TypeCodec < Object > returnCodec , TypeCodec < Object > [ ] argCodecs ) <nl> { <nl> - this . returnDataType = returnDataType ; <nl> - this . argDataTypes = argDataTypes ; <nl> + this . returnCodec = returnCodec ; <nl> + this . argCodecs = argCodecs ; <nl> } <nl> <nl> protected abstract ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) ; <nl> <nl> protected Object compose ( int protocolVersion , int argIndex , ByteBuffer value ) <nl> { <nl> - return UDFunction . compose ( argDataTypes , protocolVersion , argIndex , value ) ; <nl> + return UDFunction . compose ( argCodecs , protocolVersion , argIndex , value ) ; <nl> } <nl> <nl> protected ByteBuffer decompose ( int protocolVersion , Object value ) <nl> { <nl> - return UDFunction . decompose ( returnDataType , protocolVersion , value ) ; <nl> + return UDFunction . decompose ( returnCodec , protocolVersion , value ) ; <nl> } <nl> <nl> / / do not remove - used by generated Java UDFs <nl> protected float compose _ float ( int protocolVersion , int argIndex , ByteBuffer value ) <nl> { <nl> assert value ! = null & & value . remaining ( ) > 0 ; <nl> - return ( float ) UDHelper . deserialize ( DataType . cfloat ( ) , protocolVersion , value ) ; <nl> + return ( float ) UDHelper . deserialize ( TypeCodec . cfloat ( ) , protocolVersion , value ) ; <nl> } <nl> <nl> / / do not remove - used by generated Java UDFs <nl> protected double compose _ double ( int protocolVersion , int argIndex , ByteBuffer value ) <nl> { <nl> assert value ! = null & & value . remaining ( ) > 0 ; <nl> - return ( double ) UDHelper . deserialize ( DataType . cdouble ( ) , protocolVersion , value ) ; <nl> + return ( double ) UDHelper . deserialize ( TypeCodec . cdouble ( ) , protocolVersion , value ) ; <nl> } <nl> <nl> / / do not remove - used by generated Java UDFs <nl> protected byte compose _ byte ( int protocolVersion , int argIndex , ByteBuffer value ) <nl> { <nl> assert value ! = null & & value . remaining ( ) > 0 ; <nl> - return ( byte ) UDHelper . deserialize ( DataType . tinyint ( ) , protocolVersion , value ) ; <nl> + return ( byte ) UDHelper . deserialize ( TypeCodec . tinyInt ( ) , protocolVersion , value ) ; <nl> } <nl> <nl> / / do not remove - used by generated Java UDFs <nl> protected short compose _ short ( int protocolVersion , int argIndex , ByteBuffer value ) <nl> { <nl> assert value ! = null & & value . remaining ( ) > 0 ; <nl> - return ( short ) UDHelper . deserialize ( DataType . smallint ( ) , protocolVersion , value ) ; <nl> + return ( short ) UDHelper . deserialize ( TypeCodec . smallInt ( ) , protocolVersion , value ) ; <nl> } <nl> <nl> / / do not remove - used by generated Java UDFs <nl> protected int compose _ int ( int protocolVersion , int argIndex , ByteBuffer value ) <nl> { <nl> assert value ! = null & & value . remaining ( ) > 0 ; <nl> - return ( int ) UDHelper . deserialize ( DataType . cint ( ) , protocolVersion , value ) ; <nl> + return ( int ) UDHelper . deserialize ( TypeCodec . cint ( ) , protocolVersion , value ) ; <nl> } <nl> <nl> / / do not remove - used by generated Java UDFs <nl> protected long compose _ long ( int protocolVersion , int argIndex , ByteBuffer value ) <nl> { <nl> assert value ! = null & & value . remaining ( ) > 0 ; <nl> - return ( long ) UDHelper . deserialize ( DataType . bigint ( ) , protocolVersion , value ) ; <nl> + return ( long ) UDHelper . deserialize ( TypeCodec . bigint ( ) , protocolVersion , value ) ; <nl> } <nl> <nl> / / do not remove - used by generated Java UDFs <nl> protected boolean compose _ boolean ( int protocolVersion , int argIndex , ByteBuffer value ) <nl> { <nl> assert value ! = null & & value . remaining ( ) > 0 ; <nl> - return ( boolean ) UDHelper . deserialize ( DataType . cboolean ( ) , protocolVersion , value ) ; <nl> + return ( boolean ) UDHelper . deserialize ( TypeCodec . cboolean ( ) , protocolVersion , value ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java <nl> index 4ffb992 . . 8743a20 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java <nl> @ @ - 189 , 7 + 189 , 7 @ @ final class ScriptBasedUDFunction extends UDFunction <nl> if ( result = = null ) <nl> return null ; <nl> <nl> - Class < ? > javaReturnType = UDHelper . asJavaClass ( returnDataType ) ; <nl> + Class < ? > javaReturnType = UDHelper . asJavaClass ( returnCodec ) ; <nl> Class < ? > resultType = result . getClass ( ) ; <nl> if ( ! javaReturnType . isAssignableFrom ( resultType ) ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDFByteCodeVerifier . java b / src / java / org / apache / cassandra / cql3 / functions / UDFByteCodeVerifier . java <nl> index 59cef70 . . 1314af3 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / UDFByteCodeVerifier . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / UDFByteCodeVerifier . java <nl> @ @ - 47 , 7 + 47 , 7 @ @ public final class UDFByteCodeVerifier <nl> <nl> public static final String JAVA _ UDF _ NAME = JavaUDF . class . getName ( ) . replace ( ' . ' , ' / ' ) ; <nl> public static final String OBJECT _ NAME = Object . class . getName ( ) . replace ( ' . ' , ' / ' ) ; <nl> - public static final String CTOR _ SIG = " ( Lcom / datastax / driver / core / DataType ; [ Lcom / datastax / driver / core / DataType ; ) V " ; <nl> + public static final String CTOR _ SIG = " ( Lcom / datastax / driver / core / TypeCodec ; [ Lcom / datastax / driver / core / TypeCodec ; ) V " ; <nl> <nl> private final Set < String > disallowedClasses = new HashSet < > ( ) ; <nl> private final Multimap < String , String > disallowedMethodCalls = HashMultimap . create ( ) ; <nl> @ @ - 97 , 7 + 97 , 7 @ @ public final class UDFByteCodeVerifier <nl> { <nl> if ( Opcodes . ACC _ PUBLIC ! = access ) <nl> errors . add ( " constructor not public " ) ; <nl> - / / allowed constructor - JavaUDF ( DataType returnDataType , DataType [ ] argDataTypes ) <nl> + / / allowed constructor - JavaUDF ( TypeCodec returnCodec , TypeCodec [ ] argCodecs ) <nl> return new ConstructorVisitor ( errors ) ; <nl> } <nl> if ( " executeImpl " . equals ( name ) & & " ( ILjava / util / List ; ) Ljava / nio / ByteBuffer ; " . equals ( desc ) ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> index fa0d306 . . 7b69342 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> @ @ - 40 , 6 + 40 , 7 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import com . datastax . driver . core . DataType ; <nl> + import com . datastax . driver . core . TypeCodec ; <nl> import com . datastax . driver . core . UserType ; <nl> import org . apache . cassandra . config . Config ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> @ @ - 70 , 8 + 71 , 8 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> protected final String language ; <nl> protected final String body ; <nl> <nl> - protected final DataType [ ] argDataTypes ; <nl> - protected final DataType returnDataType ; <nl> + protected final TypeCodec < Object > [ ] argCodecs ; <nl> + protected final TypeCodec < Object > returnCodec ; <nl> protected final boolean calledOnNullInput ; <nl> <nl> / / <nl> @ @ - 202 , 8 + 203 , 8 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> this . argNames = argNames ; <nl> this . language = language ; <nl> this . body = body ; <nl> - this . argDataTypes = argDataTypes ; <nl> - this . returnDataType = returnDataType ; <nl> + this . argCodecs = UDHelper . codecsFor ( argDataTypes ) ; <nl> + this . returnCodec = UDHelper . codecFor ( returnDataType ) ; <nl> this . calledOnNullInput = calledOnNullInput ; <nl> } <nl> <nl> @ @ - 306 , 8 + 307 , 8 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> { <nl> / / Get the TypeCodec stuff in Java Driver initialized . <nl> / / This is to get the classes loaded outside of the restricted sandbox ' s security context of a UDF . <nl> - UDHelper . codecFor ( DataType . inet ( ) ) . format ( InetAddress . getLoopbackAddress ( ) ) ; <nl> - UDHelper . codecFor ( DataType . ascii ( ) ) . format ( " " ) ; <nl> + TypeCodec . inet ( ) . format ( InetAddress . getLoopbackAddress ( ) ) ; <nl> + TypeCodec . ascii ( ) . format ( " " ) ; <nl> } <nl> <nl> private static final class ThreadIdAndCpuTime extends CompletableFuture < Object > <nl> @ @ - 478 , 12 + 479 , 12 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> * / <nl> protected Object compose ( int protocolVersion , int argIndex , ByteBuffer value ) <nl> { <nl> - return compose ( argDataTypes , protocolVersion , argIndex , value ) ; <nl> + return compose ( argCodecs , protocolVersion , argIndex , value ) ; <nl> } <nl> <nl> - protected static Object compose ( DataType [ ] argDataTypes , int protocolVersion , int argIndex , ByteBuffer value ) <nl> + protected static Object compose ( TypeCodec < Object > [ ] codecs , int protocolVersion , int argIndex , ByteBuffer value ) <nl> { <nl> - return value = = null ? null : UDHelper . deserialize ( argDataTypes [ argIndex ] , protocolVersion , value ) ; <nl> + return value = = null ? null : UDHelper . deserialize ( codecs [ argIndex ] , protocolVersion , value ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 495 , 12 + 496 , 12 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> * / <nl> protected ByteBuffer decompose ( int protocolVersion , Object value ) <nl> { <nl> - return decompose ( returnDataType , protocolVersion , value ) ; <nl> + return decompose ( returnCodec , protocolVersion , value ) ; <nl> } <nl> <nl> - protected static ByteBuffer decompose ( DataType dataType , int protocolVersion , Object value ) <nl> + protected static ByteBuffer decompose ( TypeCodec < Object > codec , int protocolVersion , Object value ) <nl> { <nl> - return value = = null ? null : UDHelper . serialize ( dataType , protocolVersion , value ) ; <nl> + return value = = null ? null : UDHelper . serialize ( codec , protocolVersion , value ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 528 , 9 + 529 , 9 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> { <nl> boolean updated = false ; <nl> <nl> - for ( int i = 0 ; i < argDataTypes . length ; i + + ) <nl> + for ( int i = 0 ; i < argCodecs . length ; i + + ) <nl> { <nl> - DataType dataType = argDataTypes [ i ] ; <nl> + DataType dataType = argCodecs [ i ] . getCqlType ( ) ; <nl> if ( dataType instanceof UserType ) <nl> { <nl> UserType userType = ( UserType ) dataType ; <nl> @ @ - 542 , 7 + 543 , 7 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> org . apache . cassandra . db . marshal . UserType ut = ksm . types . get ( ByteBufferUtil . bytes ( typeName ) ) . get ( ) ; <nl> <nl> DataType newUserType = UDHelper . driverType ( ut ) ; <nl> - argDataTypes [ i ] = newUserType ; <nl> + argCodecs [ i ] = UDHelper . codecFor ( newUserType ) ; <nl> <nl> argTypes . set ( i , ut ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java b / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java <nl> index cc62c84 . . 45c734f 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java <nl> @ @ - 56 , 6 + 56 , 14 @ @ public final class UDHelper <nl> } <nl> } <nl> <nl> + static TypeCodec < Object > [ ] codecsFor ( DataType [ ] dataType ) <nl> + { <nl> + TypeCodec < Object > [ ] codecs = new TypeCodec [ dataType . length ] ; <nl> + for ( int i = 0 ; i < dataType . length ; i + + ) <nl> + codecs [ i ] = codecFor ( dataType [ i ] ) ; <nl> + return codecs ; <nl> + } <nl> + <nl> static TypeCodec < Object > codecFor ( DataType dataType ) <nl> { <nl> return codecRegistry . codecFor ( dataType ) ; <nl> @ @ - 68 , 7 + 76 , 7 @ @ public final class UDHelper <nl> * @ param calledOnNullInput whether to allow { @ code null } as an argument value <nl> * @ return array of same size with UDF arguments <nl> * / <nl> - public static Class < ? > [ ] javaTypes ( DataType [ ] dataTypes , boolean calledOnNullInput ) <nl> + public static Class < ? > [ ] javaTypes ( TypeCodec < Object > [ ] dataTypes , boolean calledOnNullInput ) <nl> { <nl> Class < ? > [ ] paramTypes = new Class [ dataTypes . length ] ; <nl> for ( int i = 0 ; i < paramTypes . length ; i + + ) <nl> @ @ - 135 , 23 + 143 , 22 @ @ public final class UDHelper <nl> } <nl> } <nl> <nl> - public static Object deserialize ( DataType dataType , int protocolVersion , ByteBuffer value ) <nl> + public static Object deserialize ( TypeCodec < ? > codec , int protocolVersion , ByteBuffer value ) <nl> { <nl> - return codecFor ( dataType ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; <nl> + return codec . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; <nl> } <nl> <nl> - public static ByteBuffer serialize ( DataType dataType , int protocolVersion , Object value ) <nl> + public static ByteBuffer serialize ( TypeCodec < ? > codec , int protocolVersion , Object value ) <nl> { <nl> - TypeCodec < Object > codec = codecFor ( dataType ) ; <nl> - if ( ! codec . getJavaType ( ) . getRawType ( ) . isAssignableFrom ( value . getClass ( ) ) ) <nl> - throw new InvalidTypeException ( " Invalid value for CQL type " + dataType . getName ( ) . toString ( ) ) ; <nl> + if ( ! codec . getJavaType ( ) . getRawType ( ) . isAssignableFrom ( value . getClass ( ) ) ) <nl> + throw new InvalidTypeException ( " Invalid value for CQL type " + codec . getCqlType ( ) . getName ( ) . toString ( ) ) ; <nl> <nl> - return codec . serialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; <nl> + return ( ( TypeCodec ) codec ) . serialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; <nl> } <nl> <nl> - public static Class < ? > asJavaClass ( DataType dataType ) <nl> + public static Class < ? > asJavaClass ( TypeCodec < ? > codec ) <nl> { <nl> - return codecFor ( dataType ) . getJavaType ( ) . getRawType ( ) ; <nl> + return codec . getJavaType ( ) . getRawType ( ) ; <nl> } <nl> <nl> public static boolean isNullOrEmpty ( AbstractType < ? > type , ByteBuffer bb ) <nl> diff - - git a / src / resources / org / apache / cassandra / cql3 / functions / JavaSourceUDF . txt b / src / resources / org / apache / cassandra / cql3 / functions / JavaSourceUDF . txt <nl> index e72b9c8 . . 4bd3601 100644 <nl> - - - a / src / resources / org / apache / cassandra / cql3 / functions / JavaSourceUDF . txt <nl> + + + b / src / resources / org / apache / cassandra / cql3 / functions / JavaSourceUDF . txt <nl> @ @ - 5 , 13 + 5 , 13 @ @ import java . util . List ; <nl> <nl> import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> <nl> - import com . datastax . driver . core . DataType ; <nl> + import com . datastax . driver . core . TypeCodec ; <nl> <nl> public final class # class _ name # extends JavaUDF <nl> { <nl> - public # class _ name # ( DataType returnDataType , DataType [ ] argDataTypes ) <nl> + public # class _ name # ( TypeCodec < Object > returnCodec , TypeCodec < Object > [ ] argCodecs ) <nl> { <nl> - super ( returnDataType , argDataTypes ) ; <nl> + super ( returnCodec , argCodecs ) ; <nl> } <nl> <nl> protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) <nl> diff - - git a / test / conf / logback - test . xml b / test / conf / logback - test . xml <nl> index 0e1bb76 . . abedc32 100644 <nl> - - - a / test / conf / logback - test . xml <nl> + + + b / test / conf / logback - test . xml <nl> @ @ - 17 , 7 + 17 , 7 @ @ <nl> under the License . <nl> - - > <nl> <nl> - < configuration debug = " false " > <nl> + < configuration debug = " false " scan = " true " > <nl> < ! - - Shutdown hook ensures that async appender flushes - - > <nl> < shutdownHook class = " ch . qos . logback . core . hook . DelayingShutdownHook " / > <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallClone . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallClone . java <nl> index 51481d8 . . c01fbe6 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallClone . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallClone . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> <nl> - import com . datastax . driver . core . DataType ; <nl> + import com . datastax . driver . core . TypeCodec ; <nl> import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> <nl> / * * <nl> @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> * / <nl> public final class CallClone extends JavaUDF <nl> { <nl> - public CallClone ( DataType returnDataType , DataType [ ] argDataTypes ) <nl> + public CallClone ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) <nl> { <nl> super ( returnDataType , argDataTypes ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallComDatastax . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallComDatastax . java <nl> index 5c7e8b3 . . 9cd799f 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallComDatastax . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallComDatastax . java <nl> @ @ - 22 , 7 + 22 , 7 @ @ import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> <nl> import com . datastax . driver . core . DataType ; <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import com . datastax . driver . core . TypeCodec ; <nl> import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> <nl> / * * <nl> @ @ - 30 , 7 + 30 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> * / <nl> public final class CallComDatastax extends JavaUDF <nl> { <nl> - public CallComDatastax ( DataType returnDataType , DataType [ ] argDataTypes ) <nl> + public CallComDatastax ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) <nl> { <nl> super ( returnDataType , argDataTypes ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallFinalize . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallFinalize . java <nl> index 1b69a72 . . a16bd31 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallFinalize . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallFinalize . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> <nl> - import com . datastax . driver . core . DataType ; <nl> + import com . datastax . driver . core . TypeCodec ; <nl> import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> <nl> / * * <nl> @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> * / <nl> public final class CallFinalize extends JavaUDF <nl> { <nl> - public CallFinalize ( DataType returnDataType , DataType [ ] argDataTypes ) <nl> + public CallFinalize ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) <nl> { <nl> super ( returnDataType , argDataTypes ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallOrgApache . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallOrgApache . java <nl> index 7a850e8 . . 4f511d7 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallOrgApache . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallOrgApache . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> <nl> - import com . datastax . driver . core . DataType ; <nl> + import com . datastax . driver . core . TypeCodec ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> <nl> @ @ - 30 , 7 + 30 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> * / <nl> public final class CallOrgApache extends JavaUDF <nl> { <nl> - public CallOrgApache ( DataType returnDataType , DataType [ ] argDataTypes ) <nl> + public CallOrgApache ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) <nl> { <nl> super ( returnDataType , argDataTypes ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithField . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithField . java <nl> index f43588d . . d981c18 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithField . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithField . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> <nl> - import com . datastax . driver . core . DataType ; <nl> + import com . datastax . driver . core . TypeCodec ; <nl> import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> <nl> / * * <nl> @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> * / <nl> public final class ClassWithField extends JavaUDF <nl> { <nl> - public ClassWithField ( DataType returnDataType , DataType [ ] argDataTypes ) <nl> + public ClassWithField ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) <nl> { <nl> super ( returnDataType , argDataTypes ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer . java <nl> index a6e10fb . . f53cc24 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> <nl> - import com . datastax . driver . core . DataType ; <nl> + import com . datastax . driver . core . TypeCodec ; <nl> import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> <nl> / * * <nl> @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> * / <nl> public final class ClassWithInitializer extends JavaUDF <nl> { <nl> - public ClassWithInitializer ( DataType returnDataType , DataType [ ] argDataTypes ) <nl> + public ClassWithInitializer ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) <nl> { <nl> super ( returnDataType , argDataTypes ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer2 . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer2 . java <nl> index d0c8e11 . . 134f9f9 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer2 . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer2 . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> <nl> - import com . datastax . driver . core . DataType ; <nl> + import com . datastax . driver . core . TypeCodec ; <nl> import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> <nl> / * * <nl> @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> * / <nl> public final class ClassWithInitializer2 extends JavaUDF <nl> { <nl> - public ClassWithInitializer2 ( DataType returnDataType , DataType [ ] argDataTypes ) <nl> + public ClassWithInitializer2 ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) <nl> { <nl> super ( returnDataType , argDataTypes ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer3 . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer3 . java <nl> index 8672cd2 . . 9cd04fb 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer3 . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer3 . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> <nl> - import com . datastax . driver . core . DataType ; <nl> + import com . datastax . driver . core . TypeCodec ; <nl> import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> <nl> / * * <nl> @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> * / <nl> public final class ClassWithInitializer3 extends JavaUDF <nl> { <nl> - public ClassWithInitializer3 ( DataType returnDataType , DataType [ ] argDataTypes ) <nl> + public ClassWithInitializer3 ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) <nl> { <nl> super ( returnDataType , argDataTypes ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInitializer . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInitializer . java <nl> index 459a6eb . . 64470ca 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInitializer . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInitializer . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> <nl> - import com . datastax . driver . core . DataType ; <nl> + import com . datastax . driver . core . TypeCodec ; <nl> import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> <nl> / * * <nl> @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> * / <nl> public final class ClassWithStaticInitializer extends JavaUDF <nl> { <nl> - public ClassWithStaticInitializer ( DataType returnDataType , DataType [ ] argDataTypes ) <nl> + public ClassWithStaticInitializer ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) <nl> { <nl> super ( returnDataType , argDataTypes ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / GoodClass . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / GoodClass . java <nl> index 2666023 . . e3bc1e2 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / GoodClass . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / GoodClass . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> <nl> - import com . datastax . driver . core . DataType ; <nl> + import com . datastax . driver . core . TypeCodec ; <nl> import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> <nl> / * * <nl> @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> * / <nl> public final class GoodClass extends JavaUDF <nl> { <nl> - public GoodClass ( DataType returnDataType , DataType [ ] argDataTypes ) <nl> + public GoodClass ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) <nl> { <nl> super ( returnDataType , argDataTypes ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronized . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronized . java <nl> index 0059a0a . . 2927b3e 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronized . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronized . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> <nl> - import com . datastax . driver . core . DataType ; <nl> + import com . datastax . driver . core . TypeCodec ; <nl> import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> <nl> / * * <nl> @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> * / <nl> public final class UseOfSynchronized extends JavaUDF <nl> { <nl> - public UseOfSynchronized ( DataType returnDataType , DataType [ ] argDataTypes ) <nl> + public UseOfSynchronized ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) <nl> { <nl> super ( returnDataType , argDataTypes ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotify . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotify . java <nl> index 2da13b6 . . 7ef2e1c 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotify . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotify . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> <nl> - import com . datastax . driver . core . DataType ; <nl> + import com . datastax . driver . core . TypeCodec ; <nl> import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> <nl> / * * <nl> @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> * / <nl> public final class UseOfSynchronizedWithNotify extends JavaUDF <nl> { <nl> - public UseOfSynchronizedWithNotify ( DataType returnDataType , DataType [ ] argDataTypes ) <nl> + public UseOfSynchronizedWithNotify ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) <nl> { <nl> super ( returnDataType , argDataTypes ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotifyAll . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotifyAll . java <nl> index 1e4d33d . . 50a3da8 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotifyAll . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotifyAll . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> <nl> - import com . datastax . driver . core . DataType ; <nl> + import com . datastax . driver . core . TypeCodec ; <nl> import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> <nl> / * * <nl> @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> * / <nl> public final class UseOfSynchronizedWithNotifyAll extends JavaUDF <nl> { <nl> - public UseOfSynchronizedWithNotifyAll ( DataType returnDataType , DataType [ ] argDataTypes ) <nl> + public UseOfSynchronizedWithNotifyAll ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) <nl> { <nl> super ( returnDataType , argDataTypes ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWait . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWait . java <nl> index ccaf6ee . . 135c550 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWait . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWait . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> <nl> - import com . datastax . driver . core . DataType ; <nl> + import com . datastax . driver . core . TypeCodec ; <nl> import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> <nl> / * * <nl> @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> * / <nl> public final class UseOfSynchronizedWithWait extends JavaUDF <nl> { <nl> - public UseOfSynchronizedWithWait ( DataType returnDataType , DataType [ ] argDataTypes ) <nl> + public UseOfSynchronizedWithWait ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) <nl> { <nl> super ( returnDataType , argDataTypes ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitL . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitL . java <nl> index 56aa726 . . 4e49e5b 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitL . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitL . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> <nl> - import com . datastax . driver . core . DataType ; <nl> + import com . datastax . driver . core . TypeCodec ; <nl> import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> <nl> / * * <nl> @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> * / <nl> public final class UseOfSynchronizedWithWaitL extends JavaUDF <nl> { <nl> - public UseOfSynchronizedWithWaitL ( DataType returnDataType , DataType [ ] argDataTypes ) <nl> + public UseOfSynchronizedWithWaitL ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) <nl> { <nl> super ( returnDataType , argDataTypes ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitLI . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitLI . java <nl> index 403fb68 . . 6770e7a 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitLI . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitLI . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> <nl> - import com . datastax . driver . core . DataType ; <nl> + import com . datastax . driver . core . TypeCodec ; <nl> import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> <nl> / * * <nl> @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; <nl> * / <nl> public final class UseOfSynchronizedWithWaitLI extends JavaUDF <nl> { <nl> - public UseOfSynchronizedWithWaitLI ( DataType returnDataType , DataType [ ] argDataTypes ) <nl> + public UseOfSynchronizedWithWaitLI ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) <nl> { <nl> super ( returnDataType , argDataTypes ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> index 221f48e . . 9c05232 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> @ @ - 22 , 12 + 22 , 21 @ @ import java . text . SimpleDateFormat ; <nl> import java . util . Arrays ; <nl> import java . util . Calendar ; <nl> import java . util . Date ; <nl> + import java . util . Locale ; <nl> import java . util . TimeZone ; <nl> + import java . util . concurrent . ThreadLocalRandom ; <nl> <nl> import org . apache . commons . lang3 . time . DateUtils ; <nl> <nl> import org . junit . Test ; <nl> <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import ch . qos . logback . classic . LoggerContext ; <nl> + import ch . qos . logback . classic . spi . TurboFilterList ; <nl> + import ch . qos . logback . classic . turbo . ReconfigureOnChangeFilter ; <nl> + import ch . qos . logback . classic . turbo . TurboFilter ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . cql3 . CQLTester ; <nl> import org . apache . cassandra . cql3 . QueryProcessor ; <nl> @ @ - 1731 , 4 + 1740 , 84 @ @ public class AggregationTest extends CQLTester <nl> execute ( " INSERT INTO % s ( a , b ) VALUES ( 3 , 2 ) " ) ; <nl> assertRows ( execute ( " SELECT " + a + " ( b ) FROM % s " ) , row ( Arrays . asList ( " 1 " , " 2 " ) ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testLogbackReload ( ) throws Throwable <nl> + { <nl> + / / see https : / / issues . apache . org / jira / browse / CASSANDRA - 11033 <nl> + <nl> + / / make logback ' s scan interval 1ms - boilerplate , but necessary for this test <nl> + configureLogbackScanPeriod ( 1L ) ; <nl> + try <nl> + { <nl> + <nl> + createTable ( " CREATE TABLE % s ( " + <nl> + " year int PRIMARY KEY , " + <nl> + " country text , " + <nl> + " title text ) " ) ; <nl> + <nl> + String [ ] countries = Locale . getISOCountries ( ) ; <nl> + ThreadLocalRandom rand = ThreadLocalRandom . current ( ) ; <nl> + for ( int i = 0 ; i < 10000 ; i + + ) <nl> + { <nl> + execute ( " INSERT INTO % s ( year , country , title ) VALUES ( 1980 , ? , ? ) " , <nl> + countries [ rand . nextInt ( countries . length ) ] , <nl> + " title - " + i ) ; <nl> + } <nl> + <nl> + String albumCountByCountry = createFunction ( KEYSPACE , <nl> + " map < text , bigint > , text , text " , <nl> + " CREATE FUNCTION IF NOT EXISTS % s ( state map < text , bigint > , country text , album _ title text ) \ n " + <nl> + " RETURNS NULL ON NULL INPUT \ n " + <nl> + " RETURNS map < text , bigint > \ n " + <nl> + " LANGUAGE java \ n " + <nl> + " AS $ $ \ n " + <nl> + " if ( state . containsKey ( country ) ) { \ n " + <nl> + " Long newCount = ( Long ) state . get ( country ) + 1 ; \ n " + <nl> + " state . put ( country , newCount ) ; \ n " + <nl> + " } else { \ n " + <nl> + " state . put ( country , 1L ) ; \ n " + <nl> + " } \ n " + <nl> + " return state ; \ n " + <nl> + " $ $ ; " ) ; <nl> + <nl> + String releasesByCountry = createAggregate ( KEYSPACE , <nl> + " text , text " , <nl> + " CREATE AGGREGATE IF NOT EXISTS % s ( text , text ) \ n " + <nl> + " SFUNC " + shortFunctionName ( albumCountByCountry ) + ' \ n ' + <nl> + " STYPE map < text , bigint > \ n " + <nl> + " INITCOND { } ; " ) ; <nl> + <nl> + for ( int i = 0 ; i < 1000 ; i + + ) <nl> + { <nl> + execute ( " SELECT " + releasesByCountry + " ( country , title ) FROM % s WHERE year = 1980 " ) ; <nl> + } <nl> + } <nl> + finally <nl> + { <nl> + configureLogbackScanPeriod ( 60000L ) ; <nl> + } <nl> + } <nl> + <nl> + private static void configureLogbackScanPeriod ( long millis ) <nl> + { <nl> + Logger l = LoggerFactory . getLogger ( AggregationTest . class ) ; <nl> + ch . qos . logback . classic . Logger logbackLogger = ( ch . qos . logback . classic . Logger ) l ; <nl> + LoggerContext ctx = logbackLogger . getLoggerContext ( ) ; <nl> + TurboFilterList turboFilterList = ctx . getTurboFilterList ( ) ; <nl> + boolean done = false ; <nl> + for ( TurboFilter turboFilter : turboFilterList ) <nl> + { <nl> + if ( turboFilter instanceof ReconfigureOnChangeFilter ) <nl> + { <nl> + ReconfigureOnChangeFilter reconfigureFilter = ( ReconfigureOnChangeFilter ) turboFilter ; <nl> + reconfigureFilter . setRefreshPeriod ( millis ) ; <nl> + reconfigureFilter . stop ( ) ; <nl> + reconfigureFilter . start ( ) ; / / start ( ) sets the next check timestammp <nl> + done = true ; <nl> + break ; <nl> + } <nl> + } <nl> + assertTrue ( " ReconfigureOnChangeFilter not in logback ' s turbo - filter list - do that by adding scan = \ " true \ " to logback - test . xml ' s configuration element " , done ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / lib / licenses / guava - r05 . txt b / lib / licenses / guava - r05 . txt <nl> deleted file mode 100644 <nl> index d645695 . . 0000000 <nl> - - - a / lib / licenses / guava - r05 . txt <nl> + + + / dev / null <nl> @ @ - 1 , 202 + 0 , 0 @ @ <nl> - <nl> - Apache License <nl> - Version 2 . 0 , January 2004 <nl> - http : / / www . apache . org / licenses / <nl> - <nl> - TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION <nl> - <nl> - 1 . Definitions . <nl> - <nl> - " License " shall mean the terms and conditions for use , reproduction , <nl> - and distribution as defined by Sections 1 through 9 of this document . <nl> - <nl> - " Licensor " shall mean the copyright owner or entity authorized by <nl> - the copyright owner that is granting the License . <nl> - <nl> - " Legal Entity " shall mean the union of the acting entity and all <nl> - other entities that control , are controlled by , or are under common <nl> - control with that entity . For the purposes of this definition , <nl> - " control " means ( i ) the power , direct or indirect , to cause the <nl> - direction or management of such entity , whether by contract or <nl> - otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the <nl> - outstanding shares , or ( iii ) beneficial ownership of such entity . <nl> - <nl> - " You " ( or " Your " ) shall mean an individual or Legal Entity <nl> - exercising permissions granted by this License . <nl> - <nl> - " Source " form shall mean the preferred form for making modifications , <nl> - including but not limited to software source code , documentation <nl> - source , and configuration files . <nl> - <nl> - " Object " form shall mean any form resulting from mechanical <nl> - transformation or translation of a Source form , including but <nl> - not limited to compiled object code , generated documentation , <nl> - and conversions to other media types . <nl> - <nl> - " Work " shall mean the work of authorship , whether in Source or <nl> - Object form , made available under the License , as indicated by a <nl> - copyright notice that is included in or attached to the work <nl> - ( an example is provided in the Appendix below ) . <nl> - <nl> - " Derivative Works " shall mean any work , whether in Source or Object <nl> - form , that is based on ( or derived from ) the Work and for which the <nl> - editorial revisions , annotations , elaborations , or other modifications <nl> - represent , as a whole , an original work of authorship . For the purposes <nl> - of this License , Derivative Works shall not include works that remain <nl> - separable from , or merely link ( or bind by name ) to the interfaces of , <nl> - the Work and Derivative Works thereof . <nl> - <nl> - " Contribution " shall mean any work of authorship , including <nl> - the original version of the Work and any modifications or additions <nl> - to that Work or Derivative Works thereof , that is intentionally <nl> - submitted to Licensor for inclusion in the Work by the copyright owner <nl> - or by an individual or Legal Entity authorized to submit on behalf of <nl> - the copyright owner . For the purposes of this definition , " submitted " <nl> - means any form of electronic , verbal , or written communication sent <nl> - to the Licensor or its representatives , including but not limited to <nl> - communication on electronic mailing lists , source code control systems , <nl> - and issue tracking systems that are managed by , or on behalf of , the <nl> - Licensor for the purpose of discussing and improving the Work , but <nl> - excluding communication that is conspicuously marked or otherwise <nl> - designated in writing by the copyright owner as " Not a Contribution . " <nl> - <nl> - " Contributor " shall mean Licensor and any individual or Legal Entity <nl> - on behalf of whom a Contribution has been received by Licensor and <nl> - subsequently incorporated within the Work . <nl> - <nl> - 2 . Grant of Copyright License . Subject to the terms and conditions of <nl> - this License , each Contributor hereby grants to You a perpetual , <nl> - worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> - copyright license to reproduce , prepare Derivative Works of , <nl> - publicly display , publicly perform , sublicense , and distribute the <nl> - Work and such Derivative Works in Source or Object form . <nl> - <nl> - 3 . Grant of Patent License . Subject to the terms and conditions of <nl> - this License , each Contributor hereby grants to You a perpetual , <nl> - worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> - ( except as stated in this section ) patent license to make , have made , <nl> - use , offer to sell , sell , import , and otherwise transfer the Work , <nl> - where such license applies only to those patent claims licensable <nl> - by such Contributor that are necessarily infringed by their <nl> - Contribution ( s ) alone or by combination of their Contribution ( s ) <nl> - with the Work to which such Contribution ( s ) was submitted . If You <nl> - institute patent litigation against any entity ( including a <nl> - cross - claim or counterclaim in a lawsuit ) alleging that the Work <nl> - or a Contribution incorporated within the Work constitutes direct <nl> - or contributory patent infringement , then any patent licenses <nl> - granted to You under this License for that Work shall terminate <nl> - as of the date such litigation is filed . <nl> - <nl> - 4 . Redistribution . You may reproduce and distribute copies of the <nl> - Work or Derivative Works thereof in any medium , with or without <nl> - modifications , and in Source or Object form , provided that You <nl> - meet the following conditions : <nl> - <nl> - ( a ) You must give any other recipients of the Work or <nl> - Derivative Works a copy of this License ; and <nl> - <nl> - ( b ) You must cause any modified files to carry prominent notices <nl> - stating that You changed the files ; and <nl> - <nl> - ( c ) You must retain , in the Source form of any Derivative Works <nl> - that You distribute , all copyright , patent , trademark , and <nl> - attribution notices from the Source form of the Work , <nl> - excluding those notices that do not pertain to any part of <nl> - the Derivative Works ; and <nl> - <nl> - ( d ) If the Work includes a " NOTICE " text file as part of its <nl> - distribution , then any Derivative Works that You distribute must <nl> - include a readable copy of the attribution notices contained <nl> - within such NOTICE file , excluding those notices that do not <nl> - pertain to any part of the Derivative Works , in at least one <nl> - of the following places : within a NOTICE text file distributed <nl> - as part of the Derivative Works ; within the Source form or <nl> - documentation , if provided along with the Derivative Works ; or , <nl> - within a display generated by the Derivative Works , if and <nl> - wherever such third - party notices normally appear . The contents <nl> - of the NOTICE file are for informational purposes only and <nl> - do not modify the License . You may add Your own attribution <nl> - notices within Derivative Works that You distribute , alongside <nl> - or as an addendum to the NOTICE text from the Work , provided <nl> - that such additional attribution notices cannot be construed <nl> - as modifying the License . <nl> - <nl> - You may add Your own copyright statement to Your modifications and <nl> - may provide additional or different license terms and conditions <nl> - for use , reproduction , or distribution of Your modifications , or <nl> - for any such Derivative Works as a whole , provided Your use , <nl> - reproduction , and distribution of the Work otherwise complies with <nl> - the conditions stated in this License . <nl> - <nl> - 5 . Submission of Contributions . Unless You explicitly state otherwise , <nl> - any Contribution intentionally submitted for inclusion in the Work <nl> - by You to the Licensor shall be under the terms and conditions of <nl> - this License , without any additional terms or conditions . <nl> - Notwithstanding the above , nothing herein shall supersede or modify <nl> - the terms of any separate license agreement you may have executed <nl> - with Licensor regarding such Contributions . <nl> - <nl> - 6 . Trademarks . This License does not grant permission to use the trade <nl> - names , trademarks , service marks , or product names of the Licensor , <nl> - except as required for reasonable and customary use in describing the <nl> - origin of the Work and reproducing the content of the NOTICE file . <nl> - <nl> - 7 . Disclaimer of Warranty . Unless required by applicable law or <nl> - agreed to in writing , Licensor provides the Work ( and each <nl> - Contributor provides its Contributions ) on an " AS IS " BASIS , <nl> - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or <nl> - implied , including , without limitation , any warranties or conditions <nl> - of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A <nl> - PARTICULAR PURPOSE . You are solely responsible for determining the <nl> - appropriateness of using or redistributing the Work and assume any <nl> - risks associated with Your exercise of permissions under this License . <nl> - <nl> - 8 . Limitation of Liability . In no event and under no legal theory , <nl> - whether in tort ( including negligence ) , contract , or otherwise , <nl> - unless required by applicable law ( such as deliberate and grossly <nl> - negligent acts ) or agreed to in writing , shall any Contributor be <nl> - liable to You for damages , including any direct , indirect , special , <nl> - incidental , or consequential damages of any character arising as a <nl> - result of this License or out of the use or inability to use the <nl> - Work ( including but not limited to damages for loss of goodwill , <nl> - work stoppage , computer failure or malfunction , or any and all <nl> - other commercial damages or losses ) , even if such Contributor <nl> - has been advised of the possibility of such damages . <nl> - <nl> - 9 . Accepting Warranty or Additional Liability . While redistributing <nl> - the Work or Derivative Works thereof , You may choose to offer , <nl> - and charge a fee for , acceptance of support , warranty , indemnity , <nl> - or other liability obligations and / or rights consistent with this <nl> - License . However , in accepting such obligations , You may act only <nl> - on Your own behalf and on Your sole responsibility , not on behalf <nl> - of any other Contributor , and only if You agree to indemnify , <nl> - defend , and hold each Contributor harmless for any liability <nl> - incurred by , or claims asserted against , such Contributor by reason <nl> - of your accepting any such warranty or additional liability . <nl> - <nl> - END OF TERMS AND CONDITIONS <nl> - <nl> - APPENDIX : How to apply the Apache License to your work . <nl> - <nl> - To apply the Apache License to your work , attach the following <nl> - boilerplate notice , with the fields enclosed by brackets " [ ] " <nl> - replaced with your own identifying information . ( Don ' t include <nl> - the brackets ! ) The text should be enclosed in the appropriate <nl> - comment syntax for the file format . We also recommend that a <nl> - file or class name and description of purpose be included on the <nl> - same " printed page " as the copyright notice for easier <nl> - identification within third - party archives . <nl> - <nl> - Copyright [ yyyy ] [ name of copyright owner ] <nl> - <nl> - Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - you may not use this file except in compliance with the License . <nl> - You may obtain a copy of the License at <nl> - <nl> - http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - <nl> - Unless required by applicable law or agreed to in writing , software <nl> - distributed under the License is distributed on an " AS IS " BASIS , <nl> - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - See the License for the specific language governing permissions and <nl> - limitations under the License . <nl> diff - - git a / lib / licenses / guava - r08 . txt b / lib / licenses / guava - r08 . txt <nl> new file mode 100644 <nl> index 0000000 . . d645695 <nl> - - - / dev / null <nl> + + + b / lib / licenses / guava - r08 . txt <nl> @ @ - 0 , 0 + 1 , 202 @ @ <nl> + <nl> + Apache License <nl> + Version 2 . 0 , January 2004 <nl> + http : / / www . apache . org / licenses / <nl> + <nl> + TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION <nl> + <nl> + 1 . Definitions . <nl> + <nl> + " License " shall mean the terms and conditions for use , reproduction , <nl> + and distribution as defined by Sections 1 through 9 of this document . <nl> + <nl> + " Licensor " shall mean the copyright owner or entity authorized by <nl> + the copyright owner that is granting the License . <nl> + <nl> + " Legal Entity " shall mean the union of the acting entity and all <nl> + other entities that control , are controlled by , or are under common <nl> + control with that entity . For the purposes of this definition , <nl> + " control " means ( i ) the power , direct or indirect , to cause the <nl> + direction or management of such entity , whether by contract or <nl> + otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the <nl> + outstanding shares , or ( iii ) beneficial ownership of such entity . <nl> + <nl> + " You " ( or " Your " ) shall mean an individual or Legal Entity <nl> + exercising permissions granted by this License . <nl> + <nl> + " Source " form shall mean the preferred form for making modifications , <nl> + including but not limited to software source code , documentation <nl> + source , and configuration files . <nl> + <nl> + " Object " form shall mean any form resulting from mechanical <nl> + transformation or translation of a Source form , including but <nl> + not limited to compiled object code , generated documentation , <nl> + and conversions to other media types . <nl> + <nl> + " Work " shall mean the work of authorship , whether in Source or <nl> + Object form , made available under the License , as indicated by a <nl> + copyright notice that is included in or attached to the work <nl> + ( an example is provided in the Appendix below ) . <nl> + <nl> + " Derivative Works " shall mean any work , whether in Source or Object <nl> + form , that is based on ( or derived from ) the Work and for which the <nl> + editorial revisions , annotations , elaborations , or other modifications <nl> + represent , as a whole , an original work of authorship . For the purposes <nl> + of this License , Derivative Works shall not include works that remain <nl> + separable from , or merely link ( or bind by name ) to the interfaces of , <nl> + the Work and Derivative Works thereof . <nl> + <nl> + " Contribution " shall mean any work of authorship , including <nl> + the original version of the Work and any modifications or additions <nl> + to that Work or Derivative Works thereof , that is intentionally <nl> + submitted to Licensor for inclusion in the Work by the copyright owner <nl> + or by an individual or Legal Entity authorized to submit on behalf of <nl> + the copyright owner . For the purposes of this definition , " submitted " <nl> + means any form of electronic , verbal , or written communication sent <nl> + to the Licensor or its representatives , including but not limited to <nl> + communication on electronic mailing lists , source code control systems , <nl> + and issue tracking systems that are managed by , or on behalf of , the <nl> + Licensor for the purpose of discussing and improving the Work , but <nl> + excluding communication that is conspicuously marked or otherwise <nl> + designated in writing by the copyright owner as " Not a Contribution . " <nl> + <nl> + " Contributor " shall mean Licensor and any individual or Legal Entity <nl> + on behalf of whom a Contribution has been received by Licensor and <nl> + subsequently incorporated within the Work . <nl> + <nl> + 2 . Grant of Copyright License . Subject to the terms and conditions of <nl> + this License , each Contributor hereby grants to You a perpetual , <nl> + worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> + copyright license to reproduce , prepare Derivative Works of , <nl> + publicly display , publicly perform , sublicense , and distribute the <nl> + Work and such Derivative Works in Source or Object form . <nl> + <nl> + 3 . Grant of Patent License . Subject to the terms and conditions of <nl> + this License , each Contributor hereby grants to You a perpetual , <nl> + worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> + ( except as stated in this section ) patent license to make , have made , <nl> + use , offer to sell , sell , import , and otherwise transfer the Work , <nl> + where such license applies only to those patent claims licensable <nl> + by such Contributor that are necessarily infringed by their <nl> + Contribution ( s ) alone or by combination of their Contribution ( s ) <nl> + with the Work to which such Contribution ( s ) was submitted . If You <nl> + institute patent litigation against any entity ( including a <nl> + cross - claim or counterclaim in a lawsuit ) alleging that the Work <nl> + or a Contribution incorporated within the Work constitutes direct <nl> + or contributory patent infringement , then any patent licenses <nl> + granted to You under this License for that Work shall terminate <nl> + as of the date such litigation is filed . <nl> + <nl> + 4 . Redistribution . You may reproduce and distribute copies of the <nl> + Work or Derivative Works thereof in any medium , with or without <nl> + modifications , and in Source or Object form , provided that You <nl> + meet the following conditions : <nl> + <nl> + ( a ) You must give any other recipients of the Work or <nl> + Derivative Works a copy of this License ; and <nl> + <nl> + ( b ) You must cause any modified files to carry prominent notices <nl> + stating that You changed the files ; and <nl> + <nl> + ( c ) You must retain , in the Source form of any Derivative Works <nl> + that You distribute , all copyright , patent , trademark , and <nl> + attribution notices from the Source form of the Work , <nl> + excluding those notices that do not pertain to any part of <nl> + the Derivative Works ; and <nl> + <nl> + ( d ) If the Work includes a " NOTICE " text file as part of its <nl> + distribution , then any Derivative Works that You distribute must <nl> + include a readable copy of the attribution notices contained <nl> + within such NOTICE file , excluding those notices that do not <nl> + pertain to any part of the Derivative Works , in at least one <nl> + of the following places : within a NOTICE text file distributed <nl> + as part of the Derivative Works ; within the Source form or <nl> + documentation , if provided along with the Derivative Works ; or , <nl> + within a display generated by the Derivative Works , if and <nl> + wherever such third - party notices normally appear . The contents <nl> + of the NOTICE file are for informational purposes only and <nl> + do not modify the License . You may add Your own attribution <nl> + notices within Derivative Works that You distribute , alongside <nl> + or as an addendum to the NOTICE text from the Work , provided <nl> + that such additional attribution notices cannot be construed <nl> + as modifying the License . <nl> + <nl> + You may add Your own copyright statement to Your modifications and <nl> + may provide additional or different license terms and conditions <nl> + for use , reproduction , or distribution of Your modifications , or <nl> + for any such Derivative Works as a whole , provided Your use , <nl> + reproduction , and distribution of the Work otherwise complies with <nl> + the conditions stated in this License . <nl> + <nl> + 5 . Submission of Contributions . Unless You explicitly state otherwise , <nl> + any Contribution intentionally submitted for inclusion in the Work <nl> + by You to the Licensor shall be under the terms and conditions of <nl> + this License , without any additional terms or conditions . <nl> + Notwithstanding the above , nothing herein shall supersede or modify <nl> + the terms of any separate license agreement you may have executed <nl> + with Licensor regarding such Contributions . <nl> + <nl> + 6 . Trademarks . This License does not grant permission to use the trade <nl> + names , trademarks , service marks , or product names of the Licensor , <nl> + except as required for reasonable and customary use in describing the <nl> + origin of the Work and reproducing the content of the NOTICE file . <nl> + <nl> + 7 . Disclaimer of Warranty . Unless required by applicable law or <nl> + agreed to in writing , Licensor provides the Work ( and each <nl> + Contributor provides its Contributions ) on an " AS IS " BASIS , <nl> + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or <nl> + implied , including , without limitation , any warranties or conditions <nl> + of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A <nl> + PARTICULAR PURPOSE . You are solely responsible for determining the <nl> + appropriateness of using or redistributing the Work and assume any <nl> + risks associated with Your exercise of permissions under this License . <nl> + <nl> + 8 . Limitation of Liability . In no event and under no legal theory , <nl> + whether in tort ( including negligence ) , contract , or otherwise , <nl> + unless required by applicable law ( such as deliberate and grossly <nl> + negligent acts ) or agreed to in writing , shall any Contributor be <nl> + liable to You for damages , including any direct , indirect , special , <nl> + incidental , or consequential damages of any character arising as a <nl> + result of this License or out of the use or inability to use the <nl> + Work ( including but not limited to damages for loss of goodwill , <nl> + work stoppage , computer failure or malfunction , or any and all <nl> + other commercial damages or losses ) , even if such Contributor <nl> + has been advised of the possibility of such damages . <nl> + <nl> + 9 . Accepting Warranty or Additional Liability . While redistributing <nl> + the Work or Derivative Works thereof , You may choose to offer , <nl> + and charge a fee for , acceptance of support , warranty , indemnity , <nl> + or other liability obligations and / or rights consistent with this <nl> + License . However , in accepting such obligations , You may act only <nl> + on Your own behalf and on Your sole responsibility , not on behalf <nl> + of any other Contributor , and only if You agree to indemnify , <nl> + defend , and hold each Contributor harmless for any liability <nl> + incurred by , or claims asserted against , such Contributor by reason <nl> + of your accepting any such warranty or additional liability . <nl> + <nl> + END OF TERMS AND CONDITIONS <nl> + <nl> + APPENDIX : How to apply the Apache License to your work . <nl> + <nl> + To apply the Apache License to your work , attach the following <nl> + boilerplate notice , with the fields enclosed by brackets " [ ] " <nl> + replaced with your own identifying information . ( Don ' t include <nl> + the brackets ! ) The text should be enclosed in the appropriate <nl> + comment syntax for the file format . We also recommend that a <nl> + file or class name and description of purpose be included on the <nl> + same " printed page " as the copyright notice for easier <nl> + identification within third - party archives . <nl> + <nl> + Copyright [ yyyy ] [ name of copyright owner ] <nl> + <nl> + Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + you may not use this file except in compliance with the License . <nl> + You may obtain a copy of the License at <nl> + <nl> + http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + <nl> + Unless required by applicable law or agreed to in writing , software <nl> + distributed under the License is distributed on an " AS IS " BASIS , <nl> + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + See the License for the specific language governing permissions and <nl> + limitations under the License .

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 275bc04 . . ae9d545 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 4 
 + * Prevent logging in sandboxed state ( CASSANDRA - 11033 ) 
 * Disallow drop / alter operations of UDTs used by UDAs ( CASSANDRA - 10721 ) 
 * Add query time validation method on Index ( CASSANDRA - 11043 ) 
 * Avoid potential AssertionError in mixed version cluster ( CASSANDRA - 11128 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java 
 index c61e72e . . 660d494 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java 
 @ @ - 40 , 7 + 40 , 7 @ @ import com . google . common . io . ByteStreams ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import com . datastax . driver . core . DataType ; 
 + import com . datastax . driver . core . TypeCodec ; 
 import org . apache . cassandra . concurrent . NamedThreadFactory ; 
 import org . apache . cassandra . cql3 . ColumnIdentifier ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 @ @ - 184 , 10 + 184 , 10 @ @ final class JavaBasedUDFunction extends UDFunction 
 super ( name , argNames , argTypes , UDHelper . driverTypes ( argTypes ) , 
 returnType , UDHelper . driverType ( returnType ) , calledOnNullInput , " java " , body ) ; 
 
 - / / javaParamTypes is just the Java representation for argTypes resp . argDataTypes 
 - Class < ? > [ ] javaParamTypes = UDHelper . javaTypes ( argDataTypes , calledOnNullInput ) ; 
 - / / javaReturnType is just the Java representation for returnType resp . returnDataType 
 - Class < ? > javaReturnType = UDHelper . asJavaClass ( returnDataType ) ; 
 + / / javaParamTypes is just the Java representation for argTypes resp . argCodecs 
 + Class < ? > [ ] javaParamTypes = UDHelper . javaTypes ( argCodecs , calledOnNullInput ) ; 
 + / / javaReturnType is just the Java representation for returnType resp . returnCodec 
 + Class < ? > javaReturnType = UDHelper . asJavaClass ( returnCodec ) ; 
 
 / / put each UDF in a separate package to prevent cross - UDF code access 
 String pkgName = BASE _ PACKAGE + ' . ' + generateClassName ( name , ' p ' ) ; 
 @ @ - 327 , 9 + 327 , 9 @ @ final class JavaBasedUDFunction extends UDFunction 
 if ( nonSyntheticMethodCount ! = 2 | | cls . getDeclaredConstructors ( ) . length ! = 1 ) 
 throw new InvalidRequestException ( " Check your source to not define additional Java methods or constructors " ) ; 
 MethodType methodType = MethodType . methodType ( void . class ) 
 - . appendParameterTypes ( DataType . class , DataType [ ] . class ) ; 
 + . appendParameterTypes ( TypeCodec . class , TypeCodec [ ] . class ) ; 
 MethodHandle ctor = MethodHandles . lookup ( ) . findConstructor ( cls , methodType ) ; 
 - this . javaUDF = ( JavaUDF ) ctor . invokeWithArguments ( returnDataType , argDataTypes ) ; 
 + this . javaUDF = ( JavaUDF ) ctor . invokeWithArguments ( returnCodec , argCodecs ) ; 
 } 
 finally 
 { 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / JavaUDF . java b / src / java / org / apache / cassandra / cql3 / functions / JavaUDF . java 
 index 47f5d47 . . fcfd21c 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / JavaUDF . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / JavaUDF . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . functions ; 
 import java . nio . ByteBuffer ; 
 import java . util . List ; 
 
 - import com . datastax . driver . core . DataType ; 
 + import com . datastax . driver . core . TypeCodec ; 
 
 / * * 
 * Base class for all Java UDFs . 
 @ @ - 31 , 73 + 31 , 73 @ @ import com . datastax . driver . core . DataType ; 
 * / 
 public abstract class JavaUDF 
 { 
 - private final DataType returnDataType ; 
 - private final DataType [ ] argDataTypes ; 
 + private final TypeCodec < Object > returnCodec ; 
 + private final TypeCodec < Object > [ ] argCodecs ; 
 
 - protected JavaUDF ( DataType returnDataType , DataType [ ] argDataTypes ) 
 + protected JavaUDF ( TypeCodec < Object > returnCodec , TypeCodec < Object > [ ] argCodecs ) 
 { 
 - this . returnDataType = returnDataType ; 
 - this . argDataTypes = argDataTypes ; 
 + this . returnCodec = returnCodec ; 
 + this . argCodecs = argCodecs ; 
 } 
 
 protected abstract ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) ; 
 
 protected Object compose ( int protocolVersion , int argIndex , ByteBuffer value ) 
 { 
 - return UDFunction . compose ( argDataTypes , protocolVersion , argIndex , value ) ; 
 + return UDFunction . compose ( argCodecs , protocolVersion , argIndex , value ) ; 
 } 
 
 protected ByteBuffer decompose ( int protocolVersion , Object value ) 
 { 
 - return UDFunction . decompose ( returnDataType , protocolVersion , value ) ; 
 + return UDFunction . decompose ( returnCodec , protocolVersion , value ) ; 
 } 
 
 / / do not remove - used by generated Java UDFs 
 protected float compose _ float ( int protocolVersion , int argIndex , ByteBuffer value ) 
 { 
 assert value ! = null & & value . remaining ( ) > 0 ; 
 - return ( float ) UDHelper . deserialize ( DataType . cfloat ( ) , protocolVersion , value ) ; 
 + return ( float ) UDHelper . deserialize ( TypeCodec . cfloat ( ) , protocolVersion , value ) ; 
 } 
 
 / / do not remove - used by generated Java UDFs 
 protected double compose _ double ( int protocolVersion , int argIndex , ByteBuffer value ) 
 { 
 assert value ! = null & & value . remaining ( ) > 0 ; 
 - return ( double ) UDHelper . deserialize ( DataType . cdouble ( ) , protocolVersion , value ) ; 
 + return ( double ) UDHelper . deserialize ( TypeCodec . cdouble ( ) , protocolVersion , value ) ; 
 } 
 
 / / do not remove - used by generated Java UDFs 
 protected byte compose _ byte ( int protocolVersion , int argIndex , ByteBuffer value ) 
 { 
 assert value ! = null & & value . remaining ( ) > 0 ; 
 - return ( byte ) UDHelper . deserialize ( DataType . tinyint ( ) , protocolVersion , value ) ; 
 + return ( byte ) UDHelper . deserialize ( TypeCodec . tinyInt ( ) , protocolVersion , value ) ; 
 } 
 
 / / do not remove - used by generated Java UDFs 
 protected short compose _ short ( int protocolVersion , int argIndex , ByteBuffer value ) 
 { 
 assert value ! = null & & value . remaining ( ) > 0 ; 
 - return ( short ) UDHelper . deserialize ( DataType . smallint ( ) , protocolVersion , value ) ; 
 + return ( short ) UDHelper . deserialize ( TypeCodec . smallInt ( ) , protocolVersion , value ) ; 
 } 
 
 / / do not remove - used by generated Java UDFs 
 protected int compose _ int ( int protocolVersion , int argIndex , ByteBuffer value ) 
 { 
 assert value ! = null & & value . remaining ( ) > 0 ; 
 - return ( int ) UDHelper . deserialize ( DataType . cint ( ) , protocolVersion , value ) ; 
 + return ( int ) UDHelper . deserialize ( TypeCodec . cint ( ) , protocolVersion , value ) ; 
 } 
 
 / / do not remove - used by generated Java UDFs 
 protected long compose _ long ( int protocolVersion , int argIndex , ByteBuffer value ) 
 { 
 assert value ! = null & & value . remaining ( ) > 0 ; 
 - return ( long ) UDHelper . deserialize ( DataType . bigint ( ) , protocolVersion , value ) ; 
 + return ( long ) UDHelper . deserialize ( TypeCodec . bigint ( ) , protocolVersion , value ) ; 
 } 
 
 / / do not remove - used by generated Java UDFs 
 protected boolean compose _ boolean ( int protocolVersion , int argIndex , ByteBuffer value ) 
 { 
 assert value ! = null & & value . remaining ( ) > 0 ; 
 - return ( boolean ) UDHelper . deserialize ( DataType . cboolean ( ) , protocolVersion , value ) ; 
 + return ( boolean ) UDHelper . deserialize ( TypeCodec . cboolean ( ) , protocolVersion , value ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java 
 index 4ffb992 . . 8743a20 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java 
 @ @ - 189 , 7 + 189 , 7 @ @ final class ScriptBasedUDFunction extends UDFunction 
 if ( result = = null ) 
 return null ; 
 
 - Class < ? > javaReturnType = UDHelper . asJavaClass ( returnDataType ) ; 
 + Class < ? > javaReturnType = UDHelper . asJavaClass ( returnCodec ) ; 
 Class < ? > resultType = result . getClass ( ) ; 
 if ( ! javaReturnType . isAssignableFrom ( resultType ) ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDFByteCodeVerifier . java b / src / java / org / apache / cassandra / cql3 / functions / UDFByteCodeVerifier . java 
 index 59cef70 . . 1314af3 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / UDFByteCodeVerifier . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / UDFByteCodeVerifier . java 
 @ @ - 47 , 7 + 47 , 7 @ @ public final class UDFByteCodeVerifier 
 
 public static final String JAVA _ UDF _ NAME = JavaUDF . class . getName ( ) . replace ( ' . ' , ' / ' ) ; 
 public static final String OBJECT _ NAME = Object . class . getName ( ) . replace ( ' . ' , ' / ' ) ; 
 - public static final String CTOR _ SIG = " ( Lcom / datastax / driver / core / DataType ; [ Lcom / datastax / driver / core / DataType ; ) V " ; 
 + public static final String CTOR _ SIG = " ( Lcom / datastax / driver / core / TypeCodec ; [ Lcom / datastax / driver / core / TypeCodec ; ) V " ; 
 
 private final Set < String > disallowedClasses = new HashSet < > ( ) ; 
 private final Multimap < String , String > disallowedMethodCalls = HashMultimap . create ( ) ; 
 @ @ - 97 , 7 + 97 , 7 @ @ public final class UDFByteCodeVerifier 
 { 
 if ( Opcodes . ACC _ PUBLIC ! = access ) 
 errors . add ( " constructor not public " ) ; 
 - / / allowed constructor - JavaUDF ( DataType returnDataType , DataType [ ] argDataTypes ) 
 + / / allowed constructor - JavaUDF ( TypeCodec returnCodec , TypeCodec [ ] argCodecs ) 
 return new ConstructorVisitor ( errors ) ; 
 } 
 if ( " executeImpl " . equals ( name ) & & " ( ILjava / util / List ; ) Ljava / nio / ByteBuffer ; " . equals ( desc ) ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 index fa0d306 . . 7b69342 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 @ @ - 40 , 6 + 40 , 7 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import com . datastax . driver . core . DataType ; 
 + import com . datastax . driver . core . TypeCodec ; 
 import com . datastax . driver . core . UserType ; 
 import org . apache . cassandra . config . Config ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 @ @ - 70 , 8 + 71 , 8 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 protected final String language ; 
 protected final String body ; 
 
 - protected final DataType [ ] argDataTypes ; 
 - protected final DataType returnDataType ; 
 + protected final TypeCodec < Object > [ ] argCodecs ; 
 + protected final TypeCodec < Object > returnCodec ; 
 protected final boolean calledOnNullInput ; 
 
 / / 
 @ @ - 202 , 8 + 203 , 8 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 this . argNames = argNames ; 
 this . language = language ; 
 this . body = body ; 
 - this . argDataTypes = argDataTypes ; 
 - this . returnDataType = returnDataType ; 
 + this . argCodecs = UDHelper . codecsFor ( argDataTypes ) ; 
 + this . returnCodec = UDHelper . codecFor ( returnDataType ) ; 
 this . calledOnNullInput = calledOnNullInput ; 
 } 
 
 @ @ - 306 , 8 + 307 , 8 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 { 
 / / Get the TypeCodec stuff in Java Driver initialized . 
 / / This is to get the classes loaded outside of the restricted sandbox ' s security context of a UDF . 
 - UDHelper . codecFor ( DataType . inet ( ) ) . format ( InetAddress . getLoopbackAddress ( ) ) ; 
 - UDHelper . codecFor ( DataType . ascii ( ) ) . format ( " " ) ; 
 + TypeCodec . inet ( ) . format ( InetAddress . getLoopbackAddress ( ) ) ; 
 + TypeCodec . ascii ( ) . format ( " " ) ; 
 } 
 
 private static final class ThreadIdAndCpuTime extends CompletableFuture < Object > 
 @ @ - 478 , 12 + 479 , 12 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 * / 
 protected Object compose ( int protocolVersion , int argIndex , ByteBuffer value ) 
 { 
 - return compose ( argDataTypes , protocolVersion , argIndex , value ) ; 
 + return compose ( argCodecs , protocolVersion , argIndex , value ) ; 
 } 
 
 - protected static Object compose ( DataType [ ] argDataTypes , int protocolVersion , int argIndex , ByteBuffer value ) 
 + protected static Object compose ( TypeCodec < Object > [ ] codecs , int protocolVersion , int argIndex , ByteBuffer value ) 
 { 
 - return value = = null ? null : UDHelper . deserialize ( argDataTypes [ argIndex ] , protocolVersion , value ) ; 
 + return value = = null ? null : UDHelper . deserialize ( codecs [ argIndex ] , protocolVersion , value ) ; 
 } 
 
 / * * 
 @ @ - 495 , 12 + 496 , 12 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 * / 
 protected ByteBuffer decompose ( int protocolVersion , Object value ) 
 { 
 - return decompose ( returnDataType , protocolVersion , value ) ; 
 + return decompose ( returnCodec , protocolVersion , value ) ; 
 } 
 
 - protected static ByteBuffer decompose ( DataType dataType , int protocolVersion , Object value ) 
 + protected static ByteBuffer decompose ( TypeCodec < Object > codec , int protocolVersion , Object value ) 
 { 
 - return value = = null ? null : UDHelper . serialize ( dataType , protocolVersion , value ) ; 
 + return value = = null ? null : UDHelper . serialize ( codec , protocolVersion , value ) ; 
 } 
 
 @ Override 
 @ @ - 528 , 9 + 529 , 9 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 { 
 boolean updated = false ; 
 
 - for ( int i = 0 ; i < argDataTypes . length ; i + + ) 
 + for ( int i = 0 ; i < argCodecs . length ; i + + ) 
 { 
 - DataType dataType = argDataTypes [ i ] ; 
 + DataType dataType = argCodecs [ i ] . getCqlType ( ) ; 
 if ( dataType instanceof UserType ) 
 { 
 UserType userType = ( UserType ) dataType ; 
 @ @ - 542 , 7 + 543 , 7 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 org . apache . cassandra . db . marshal . UserType ut = ksm . types . get ( ByteBufferUtil . bytes ( typeName ) ) . get ( ) ; 
 
 DataType newUserType = UDHelper . driverType ( ut ) ; 
 - argDataTypes [ i ] = newUserType ; 
 + argCodecs [ i ] = UDHelper . codecFor ( newUserType ) ; 
 
 argTypes . set ( i , ut ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java b / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java 
 index cc62c84 . . 45c734f 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java 
 @ @ - 56 , 6 + 56 , 14 @ @ public final class UDHelper 
 } 
 } 
 
 + static TypeCodec < Object > [ ] codecsFor ( DataType [ ] dataType ) 
 + { 
 + TypeCodec < Object > [ ] codecs = new TypeCodec [ dataType . length ] ; 
 + for ( int i = 0 ; i < dataType . length ; i + + ) 
 + codecs [ i ] = codecFor ( dataType [ i ] ) ; 
 + return codecs ; 
 + } 
 + 
 static TypeCodec < Object > codecFor ( DataType dataType ) 
 { 
 return codecRegistry . codecFor ( dataType ) ; 
 @ @ - 68 , 7 + 76 , 7 @ @ public final class UDHelper 
 * @ param calledOnNullInput whether to allow { @ code null } as an argument value 
 * @ return array of same size with UDF arguments 
 * / 
 - public static Class < ? > [ ] javaTypes ( DataType [ ] dataTypes , boolean calledOnNullInput ) 
 + public static Class < ? > [ ] javaTypes ( TypeCodec < Object > [ ] dataTypes , boolean calledOnNullInput ) 
 { 
 Class < ? > [ ] paramTypes = new Class [ dataTypes . length ] ; 
 for ( int i = 0 ; i < paramTypes . length ; i + + ) 
 @ @ - 135 , 23 + 143 , 22 @ @ public final class UDHelper 
 } 
 } 
 
 - public static Object deserialize ( DataType dataType , int protocolVersion , ByteBuffer value ) 
 + public static Object deserialize ( TypeCodec < ? > codec , int protocolVersion , ByteBuffer value ) 
 { 
 - return codecFor ( dataType ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; 
 + return codec . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; 
 } 
 
 - public static ByteBuffer serialize ( DataType dataType , int protocolVersion , Object value ) 
 + public static ByteBuffer serialize ( TypeCodec < ? > codec , int protocolVersion , Object value ) 
 { 
 - TypeCodec < Object > codec = codecFor ( dataType ) ; 
 - if ( ! codec . getJavaType ( ) . getRawType ( ) . isAssignableFrom ( value . getClass ( ) ) ) 
 - throw new InvalidTypeException ( " Invalid value for CQL type " + dataType . getName ( ) . toString ( ) ) ; 
 + if ( ! codec . getJavaType ( ) . getRawType ( ) . isAssignableFrom ( value . getClass ( ) ) ) 
 + throw new InvalidTypeException ( " Invalid value for CQL type " + codec . getCqlType ( ) . getName ( ) . toString ( ) ) ; 
 
 - return codec . serialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; 
 + return ( ( TypeCodec ) codec ) . serialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; 
 } 
 
 - public static Class < ? > asJavaClass ( DataType dataType ) 
 + public static Class < ? > asJavaClass ( TypeCodec < ? > codec ) 
 { 
 - return codecFor ( dataType ) . getJavaType ( ) . getRawType ( ) ; 
 + return codec . getJavaType ( ) . getRawType ( ) ; 
 } 
 
 public static boolean isNullOrEmpty ( AbstractType < ? > type , ByteBuffer bb ) 
 diff - - git a / src / resources / org / apache / cassandra / cql3 / functions / JavaSourceUDF . txt b / src / resources / org / apache / cassandra / cql3 / functions / JavaSourceUDF . txt 
 index e72b9c8 . . 4bd3601 100644 
 - - - a / src / resources / org / apache / cassandra / cql3 / functions / JavaSourceUDF . txt 
 + + + b / src / resources / org / apache / cassandra / cql3 / functions / JavaSourceUDF . txt 
 @ @ - 5 , 13 + 5 , 13 @ @ import java . util . List ; 
 
 import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 
 - import com . datastax . driver . core . DataType ; 
 + import com . datastax . driver . core . TypeCodec ; 
 
 public final class # class _ name # extends JavaUDF 
 { 
 - public # class _ name # ( DataType returnDataType , DataType [ ] argDataTypes ) 
 + public # class _ name # ( TypeCodec < Object > returnCodec , TypeCodec < Object > [ ] argCodecs ) 
 { 
 - super ( returnDataType , argDataTypes ) ; 
 + super ( returnCodec , argCodecs ) ; 
 } 
 
 protected ByteBuffer executeImpl ( int protocolVersion , List < ByteBuffer > params ) 
 diff - - git a / test / conf / logback - test . xml b / test / conf / logback - test . xml 
 index 0e1bb76 . . abedc32 100644 
 - - - a / test / conf / logback - test . xml 
 + + + b / test / conf / logback - test . xml 
 @ @ - 17 , 7 + 17 , 7 @ @ 
 under the License . 
 - - > 
 
 - < configuration debug = " false " > 
 + < configuration debug = " false " scan = " true " > 
 < ! - - Shutdown hook ensures that async appender flushes - - > 
 < shutdownHook class = " ch . qos . logback . core . hook . DelayingShutdownHook " / > 
 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallClone . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallClone . java 
 index 51481d8 . . c01fbe6 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallClone . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallClone . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; 
 import java . nio . ByteBuffer ; 
 import java . util . List ; 
 
 - import com . datastax . driver . core . DataType ; 
 + import com . datastax . driver . core . TypeCodec ; 
 import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 
 / * * 
 @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 * / 
 public final class CallClone extends JavaUDF 
 { 
 - public CallClone ( DataType returnDataType , DataType [ ] argDataTypes ) 
 + public CallClone ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) 
 { 
 super ( returnDataType , argDataTypes ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallComDatastax . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallComDatastax . java 
 index 5c7e8b3 . . 9cd799f 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallComDatastax . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallComDatastax . java 
 @ @ - 22 , 7 + 22 , 7 @ @ import java . nio . ByteBuffer ; 
 import java . util . List ; 
 
 import com . datastax . driver . core . DataType ; 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import com . datastax . driver . core . TypeCodec ; 
 import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 
 / * * 
 @ @ - 30 , 7 + 30 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 * / 
 public final class CallComDatastax extends JavaUDF 
 { 
 - public CallComDatastax ( DataType returnDataType , DataType [ ] argDataTypes ) 
 + public CallComDatastax ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) 
 { 
 super ( returnDataType , argDataTypes ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallFinalize . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallFinalize . java 
 index 1b69a72 . . a16bd31 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallFinalize . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallFinalize . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; 
 import java . nio . ByteBuffer ; 
 import java . util . List ; 
 
 - import com . datastax . driver . core . DataType ; 
 + import com . datastax . driver . core . TypeCodec ; 
 import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 
 / * * 
 @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 * / 
 public final class CallFinalize extends JavaUDF 
 { 
 - public CallFinalize ( DataType returnDataType , DataType [ ] argDataTypes ) 
 + public CallFinalize ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) 
 { 
 super ( returnDataType , argDataTypes ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallOrgApache . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallOrgApache . java 
 index 7a850e8 . . 4f511d7 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallOrgApache . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / CallOrgApache . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; 
 import java . nio . ByteBuffer ; 
 import java . util . List ; 
 
 - import com . datastax . driver . core . DataType ; 
 + import com . datastax . driver . core . TypeCodec ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 
 @ @ - 30 , 7 + 30 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 * / 
 public final class CallOrgApache extends JavaUDF 
 { 
 - public CallOrgApache ( DataType returnDataType , DataType [ ] argDataTypes ) 
 + public CallOrgApache ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) 
 { 
 super ( returnDataType , argDataTypes ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithField . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithField . java 
 index f43588d . . d981c18 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithField . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithField . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; 
 import java . nio . ByteBuffer ; 
 import java . util . List ; 
 
 - import com . datastax . driver . core . DataType ; 
 + import com . datastax . driver . core . TypeCodec ; 
 import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 
 / * * 
 @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 * / 
 public final class ClassWithField extends JavaUDF 
 { 
 - public ClassWithField ( DataType returnDataType , DataType [ ] argDataTypes ) 
 + public ClassWithField ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) 
 { 
 super ( returnDataType , argDataTypes ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer . java 
 index a6e10fb . . f53cc24 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; 
 import java . nio . ByteBuffer ; 
 import java . util . List ; 
 
 - import com . datastax . driver . core . DataType ; 
 + import com . datastax . driver . core . TypeCodec ; 
 import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 
 / * * 
 @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 * / 
 public final class ClassWithInitializer extends JavaUDF 
 { 
 - public ClassWithInitializer ( DataType returnDataType , DataType [ ] argDataTypes ) 
 + public ClassWithInitializer ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) 
 { 
 super ( returnDataType , argDataTypes ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer2 . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer2 . java 
 index d0c8e11 . . 134f9f9 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer2 . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer2 . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; 
 import java . nio . ByteBuffer ; 
 import java . util . List ; 
 
 - import com . datastax . driver . core . DataType ; 
 + import com . datastax . driver . core . TypeCodec ; 
 import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 
 / * * 
 @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 * / 
 public final class ClassWithInitializer2 extends JavaUDF 
 { 
 - public ClassWithInitializer2 ( DataType returnDataType , DataType [ ] argDataTypes ) 
 + public ClassWithInitializer2 ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) 
 { 
 super ( returnDataType , argDataTypes ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer3 . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer3 . java 
 index 8672cd2 . . 9cd04fb 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer3 . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithInitializer3 . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; 
 import java . nio . ByteBuffer ; 
 import java . util . List ; 
 
 - import com . datastax . driver . core . DataType ; 
 + import com . datastax . driver . core . TypeCodec ; 
 import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 
 / * * 
 @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 * / 
 public final class ClassWithInitializer3 extends JavaUDF 
 { 
 - public ClassWithInitializer3 ( DataType returnDataType , DataType [ ] argDataTypes ) 
 + public ClassWithInitializer3 ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) 
 { 
 super ( returnDataType , argDataTypes ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInitializer . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInitializer . java 
 index 459a6eb . . 64470ca 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInitializer . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / ClassWithStaticInitializer . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; 
 import java . nio . ByteBuffer ; 
 import java . util . List ; 
 
 - import com . datastax . driver . core . DataType ; 
 + import com . datastax . driver . core . TypeCodec ; 
 import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 
 / * * 
 @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 * / 
 public final class ClassWithStaticInitializer extends JavaUDF 
 { 
 - public ClassWithStaticInitializer ( DataType returnDataType , DataType [ ] argDataTypes ) 
 + public ClassWithStaticInitializer ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) 
 { 
 super ( returnDataType , argDataTypes ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / GoodClass . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / GoodClass . java 
 index 2666023 . . e3bc1e2 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / GoodClass . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / GoodClass . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; 
 import java . nio . ByteBuffer ; 
 import java . util . List ; 
 
 - import com . datastax . driver . core . DataType ; 
 + import com . datastax . driver . core . TypeCodec ; 
 import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 
 / * * 
 @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 * / 
 public final class GoodClass extends JavaUDF 
 { 
 - public GoodClass ( DataType returnDataType , DataType [ ] argDataTypes ) 
 + public GoodClass ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) 
 { 
 super ( returnDataType , argDataTypes ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronized . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronized . java 
 index 0059a0a . . 2927b3e 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronized . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronized . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; 
 import java . nio . ByteBuffer ; 
 import java . util . List ; 
 
 - import com . datastax . driver . core . DataType ; 
 + import com . datastax . driver . core . TypeCodec ; 
 import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 
 / * * 
 @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 * / 
 public final class UseOfSynchronized extends JavaUDF 
 { 
 - public UseOfSynchronized ( DataType returnDataType , DataType [ ] argDataTypes ) 
 + public UseOfSynchronized ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) 
 { 
 super ( returnDataType , argDataTypes ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotify . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotify . java 
 index 2da13b6 . . 7ef2e1c 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotify . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotify . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; 
 import java . nio . ByteBuffer ; 
 import java . util . List ; 
 
 - import com . datastax . driver . core . DataType ; 
 + import com . datastax . driver . core . TypeCodec ; 
 import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 
 / * * 
 @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 * / 
 public final class UseOfSynchronizedWithNotify extends JavaUDF 
 { 
 - public UseOfSynchronizedWithNotify ( DataType returnDataType , DataType [ ] argDataTypes ) 
 + public UseOfSynchronizedWithNotify ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) 
 { 
 super ( returnDataType , argDataTypes ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotifyAll . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotifyAll . java 
 index 1e4d33d . . 50a3da8 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotifyAll . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithNotifyAll . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; 
 import java . nio . ByteBuffer ; 
 import java . util . List ; 
 
 - import com . datastax . driver . core . DataType ; 
 + import com . datastax . driver . core . TypeCodec ; 
 import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 
 / * * 
 @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 * / 
 public final class UseOfSynchronizedWithNotifyAll extends JavaUDF 
 { 
 - public UseOfSynchronizedWithNotifyAll ( DataType returnDataType , DataType [ ] argDataTypes ) 
 + public UseOfSynchronizedWithNotifyAll ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) 
 { 
 super ( returnDataType , argDataTypes ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWait . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWait . java 
 index ccaf6ee . . 135c550 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWait . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWait . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; 
 import java . nio . ByteBuffer ; 
 import java . util . List ; 
 
 - import com . datastax . driver . core . DataType ; 
 + import com . datastax . driver . core . TypeCodec ; 
 import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 
 / * * 
 @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 * / 
 public final class UseOfSynchronizedWithWait extends JavaUDF 
 { 
 - public UseOfSynchronizedWithWait ( DataType returnDataType , DataType [ ] argDataTypes ) 
 + public UseOfSynchronizedWithWait ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) 
 { 
 super ( returnDataType , argDataTypes ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitL . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitL . java 
 index 56aa726 . . 4e49e5b 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitL . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitL . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; 
 import java . nio . ByteBuffer ; 
 import java . util . List ; 
 
 - import com . datastax . driver . core . DataType ; 
 + import com . datastax . driver . core . TypeCodec ; 
 import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 
 / * * 
 @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 * / 
 public final class UseOfSynchronizedWithWaitL extends JavaUDF 
 { 
 - public UseOfSynchronizedWithWaitL ( DataType returnDataType , DataType [ ] argDataTypes ) 
 + public UseOfSynchronizedWithWaitL ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) 
 { 
 super ( returnDataType , argDataTypes ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitLI . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitLI . java 
 index 403fb68 . . 6770e7a 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitLI . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / udfverify / UseOfSynchronizedWithWaitLI . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . cql3 . validation . entities . udfverify ; 
 import java . nio . ByteBuffer ; 
 import java . util . List ; 
 
 - import com . datastax . driver . core . DataType ; 
 + import com . datastax . driver . core . TypeCodec ; 
 import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 
 / * * 
 @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . cql3 . functions . JavaUDF ; 
 * / 
 public final class UseOfSynchronizedWithWaitLI extends JavaUDF 
 { 
 - public UseOfSynchronizedWithWaitLI ( DataType returnDataType , DataType [ ] argDataTypes ) 
 + public UseOfSynchronizedWithWaitLI ( TypeCodec < Object > returnDataType , TypeCodec < Object > [ ] argDataTypes ) 
 { 
 super ( returnDataType , argDataTypes ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 index 221f48e . . 9c05232 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 @ @ - 22 , 12 + 22 , 21 @ @ import java . text . SimpleDateFormat ; 
 import java . util . Arrays ; 
 import java . util . Calendar ; 
 import java . util . Date ; 
 + import java . util . Locale ; 
 import java . util . TimeZone ; 
 + import java . util . concurrent . ThreadLocalRandom ; 
 
 import org . apache . commons . lang3 . time . DateUtils ; 
 
 import org . junit . Test ; 
 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + import ch . qos . logback . classic . LoggerContext ; 
 + import ch . qos . logback . classic . spi . TurboFilterList ; 
 + import ch . qos . logback . classic . turbo . ReconfigureOnChangeFilter ; 
 + import ch . qos . logback . classic . turbo . TurboFilter ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . cql3 . CQLTester ; 
 import org . apache . cassandra . cql3 . QueryProcessor ; 
 @ @ - 1731 , 4 + 1740 , 84 @ @ public class AggregationTest extends CQLTester 
 execute ( " INSERT INTO % s ( a , b ) VALUES ( 3 , 2 ) " ) ; 
 assertRows ( execute ( " SELECT " + a + " ( b ) FROM % s " ) , row ( Arrays . asList ( " 1 " , " 2 " ) ) ) ; 
 } 
 + 
 + @ Test 
 + public void testLogbackReload ( ) throws Throwable 
 + { 
 + / / see https : / / issues . apache . org / jira / browse / CASSANDRA - 11033 
 + 
 + / / make logback ' s scan interval 1ms - boilerplate , but necessary for this test 
 + configureLogbackScanPeriod ( 1L ) ; 
 + try 
 + { 
 + 
 + createTable ( " CREATE TABLE % s ( " + 
 + " year int PRIMARY KEY , " + 
 + " country text , " + 
 + " title text ) " ) ; 
 + 
 + String [ ] countries = Locale . getISOCountries ( ) ; 
 + ThreadLocalRandom rand = ThreadLocalRandom . current ( ) ; 
 + for ( int i = 0 ; i < 10000 ; i + + ) 
 + { 
 + execute ( " INSERT INTO % s ( year , country , title ) VALUES ( 1980 , ? , ? ) " , 
 + countries [ rand . nextInt ( countries . length ) ] , 
 + " title - " + i ) ; 
 + } 
 + 
 + String albumCountByCountry = createFunction ( KEYSPACE , 
 + " map < text , bigint > , text , text " , 
 + " CREATE FUNCTION IF NOT EXISTS % s ( state map < text , bigint > , country text , album _ title text ) \ n " + 
 + " RETURNS NULL ON NULL INPUT \ n " + 
 + " RETURNS map < text , bigint > \ n " + 
 + " LANGUAGE java \ n " + 
 + " AS $ $ \ n " + 
 + " if ( state . containsKey ( country ) ) { \ n " + 
 + " Long newCount = ( Long ) state . get ( country ) + 1 ; \ n " + 
 + " state . put ( country , newCount ) ; \ n " + 
 + " } else { \ n " + 
 + " state . put ( country , 1L ) ; \ n " + 
 + " } \ n " + 
 + " return state ; \ n " + 
 + " $ $ ; " ) ; 
 + 
 + String releasesByCountry = createAggregate ( KEYSPACE , 
 + " text , text " , 
 + " CREATE AGGREGATE IF NOT EXISTS % s ( text , text ) \ n " + 
 + " SFUNC " + shortFunctionName ( albumCountByCountry ) + ' \ n ' + 
 + " STYPE map < text , bigint > \ n " + 
 + " INITCOND { } ; " ) ; 
 + 
 + for ( int i = 0 ; i < 1000 ; i + + ) 
 + { 
 + execute ( " SELECT " + releasesByCountry + " ( country , title ) FROM % s WHERE year = 1980 " ) ; 
 + } 
 + } 
 + finally 
 + { 
 + configureLogbackScanPeriod ( 60000L ) ; 
 + } 
 + } 
 + 
 + private static void configureLogbackScanPeriod ( long millis ) 
 + { 
 + Logger l = LoggerFactory . getLogger ( AggregationTest . class ) ; 
 + ch . qos . logback . classic . Logger logbackLogger = ( ch . qos . logback . classic . Logger ) l ; 
 + LoggerContext ctx = logbackLogger . getLoggerContext ( ) ; 
 + TurboFilterList turboFilterList = ctx . getTurboFilterList ( ) ; 
 + boolean done = false ; 
 + for ( TurboFilter turboFilter : turboFilterList ) 
 + { 
 + if ( turboFilter instanceof ReconfigureOnChangeFilter ) 
 + { 
 + ReconfigureOnChangeFilter reconfigureFilter = ( ReconfigureOnChangeFilter ) turboFilter ; 
 + reconfigureFilter . setRefreshPeriod ( millis ) ; 
 + reconfigureFilter . stop ( ) ; 
 + reconfigureFilter . start ( ) ; / / start ( ) sets the next check timestammp 
 + done = true ; 
 + break ; 
 + } 
 + } 
 + assertTrue ( " ReconfigureOnChangeFilter not in logback ' s turbo - filter list - do that by adding scan = \ " true \ " to logback - test . xml ' s configuration element " , done ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / lib / licenses / guava - r05 . txt b / lib / licenses / guava - r05 . txt 
 deleted file mode 100644 
 index d645695 . . 0000000 
 - - - a / lib / licenses / guava - r05 . txt 
 + + + / dev / null 
 @ @ - 1 , 202 + 0 , 0 @ @ 
 - 
 - Apache License 
 - Version 2 . 0 , January 2004 
 - http : / / www . apache . org / licenses / 
 - 
 - TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION 
 - 
 - 1 . Definitions . 
 - 
 - " License " shall mean the terms and conditions for use , reproduction , 
 - and distribution as defined by Sections 1 through 9 of this document . 
 - 
 - " Licensor " shall mean the copyright owner or entity authorized by 
 - the copyright owner that is granting the License . 
 - 
 - " Legal Entity " shall mean the union of the acting entity and all 
 - other entities that control , are controlled by , or are under common 
 - control with that entity . For the purposes of this definition , 
 - " control " means ( i ) the power , direct or indirect , to cause the 
 - direction or management of such entity , whether by contract or 
 - otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the 
 - outstanding shares , or ( iii ) beneficial ownership of such entity . 
 - 
 - " You " ( or " Your " ) shall mean an individual or Legal Entity 
 - exercising permissions granted by this License . 
 - 
 - " Source " form shall mean the preferred form for making modifications , 
 - including but not limited to software source code , documentation 
 - source , and configuration files . 
 - 
 - " Object " form shall mean any form resulting from mechanical 
 - transformation or translation of a Source form , including but 
 - not limited to compiled object code , generated documentation , 
 - and conversions to other media types . 
 - 
 - " Work " shall mean the work of authorship , whether in Source or 
 - Object form , made available under the License , as indicated by a 
 - copyright notice that is included in or attached to the work 
 - ( an example is provided in the Appendix below ) . 
 - 
 - " Derivative Works " shall mean any work , whether in Source or Object 
 - form , that is based on ( or derived from ) the Work and for which the 
 - editorial revisions , annotations , elaborations , or other modifications 
 - represent , as a whole , an original work of authorship . For the purposes 
 - of this License , Derivative Works shall not include works that remain 
 - separable from , or merely link ( or bind by name ) to the interfaces of , 
 - the Work and Derivative Works thereof . 
 - 
 - " Contribution " shall mean any work of authorship , including 
 - the original version of the Work and any modifications or additions 
 - to that Work or Derivative Works thereof , that is intentionally 
 - submitted to Licensor for inclusion in the Work by the copyright owner 
 - or by an individual or Legal Entity authorized to submit on behalf of 
 - the copyright owner . For the purposes of this definition , " submitted " 
 - means any form of electronic , verbal , or written communication sent 
 - to the Licensor or its representatives , including but not limited to 
 - communication on electronic mailing lists , source code control systems , 
 - and issue tracking systems that are managed by , or on behalf of , the 
 - Licensor for the purpose of discussing and improving the Work , but 
 - excluding communication that is conspicuously marked or otherwise 
 - designated in writing by the copyright owner as " Not a Contribution . " 
 - 
 - " Contributor " shall mean Licensor and any individual or Legal Entity 
 - on behalf of whom a Contribution has been received by Licensor and 
 - subsequently incorporated within the Work . 
 - 
 - 2 . Grant of Copyright License . Subject to the terms and conditions of 
 - this License , each Contributor hereby grants to You a perpetual , 
 - worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 - copyright license to reproduce , prepare Derivative Works of , 
 - publicly display , publicly perform , sublicense , and distribute the 
 - Work and such Derivative Works in Source or Object form . 
 - 
 - 3 . Grant of Patent License . Subject to the terms and conditions of 
 - this License , each Contributor hereby grants to You a perpetual , 
 - worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 - ( except as stated in this section ) patent license to make , have made , 
 - use , offer to sell , sell , import , and otherwise transfer the Work , 
 - where such license applies only to those patent claims licensable 
 - by such Contributor that are necessarily infringed by their 
 - Contribution ( s ) alone or by combination of their Contribution ( s ) 
 - with the Work to which such Contribution ( s ) was submitted . If You 
 - institute patent litigation against any entity ( including a 
 - cross - claim or counterclaim in a lawsuit ) alleging that the Work 
 - or a Contribution incorporated within the Work constitutes direct 
 - or contributory patent infringement , then any patent licenses 
 - granted to You under this License for that Work shall terminate 
 - as of the date such litigation is filed . 
 - 
 - 4 . Redistribution . You may reproduce and distribute copies of the 
 - Work or Derivative Works thereof in any medium , with or without 
 - modifications , and in Source or Object form , provided that You 
 - meet the following conditions : 
 - 
 - ( a ) You must give any other recipients of the Work or 
 - Derivative Works a copy of this License ; and 
 - 
 - ( b ) You must cause any modified files to carry prominent notices 
 - stating that You changed the files ; and 
 - 
 - ( c ) You must retain , in the Source form of any Derivative Works 
 - that You distribute , all copyright , patent , trademark , and 
 - attribution notices from the Source form of the Work , 
 - excluding those notices that do not pertain to any part of 
 - the Derivative Works ; and 
 - 
 - ( d ) If the Work includes a " NOTICE " text file as part of its 
 - distribution , then any Derivative Works that You distribute must 
 - include a readable copy of the attribution notices contained 
 - within such NOTICE file , excluding those notices that do not 
 - pertain to any part of the Derivative Works , in at least one 
 - of the following places : within a NOTICE text file distributed 
 - as part of the Derivative Works ; within the Source form or 
 - documentation , if provided along with the Derivative Works ; or , 
 - within a display generated by the Derivative Works , if and 
 - wherever such third - party notices normally appear . The contents 
 - of the NOTICE file are for informational purposes only and 
 - do not modify the License . You may add Your own attribution 
 - notices within Derivative Works that You distribute , alongside 
 - or as an addendum to the NOTICE text from the Work , provided 
 - that such additional attribution notices cannot be construed 
 - as modifying the License . 
 - 
 - You may add Your own copyright statement to Your modifications and 
 - may provide additional or different license terms and conditions 
 - for use , reproduction , or distribution of Your modifications , or 
 - for any such Derivative Works as a whole , provided Your use , 
 - reproduction , and distribution of the Work otherwise complies with 
 - the conditions stated in this License . 
 - 
 - 5 . Submission of Contributions . Unless You explicitly state otherwise , 
 - any Contribution intentionally submitted for inclusion in the Work 
 - by You to the Licensor shall be under the terms and conditions of 
 - this License , without any additional terms or conditions . 
 - Notwithstanding the above , nothing herein shall supersede or modify 
 - the terms of any separate license agreement you may have executed 
 - with Licensor regarding such Contributions . 
 - 
 - 6 . Trademarks . This License does not grant permission to use the trade 
 - names , trademarks , service marks , or product names of the Licensor , 
 - except as required for reasonable and customary use in describing the 
 - origin of the Work and reproducing the content of the NOTICE file . 
 - 
 - 7 . Disclaimer of Warranty . Unless required by applicable law or 
 - agreed to in writing , Licensor provides the Work ( and each 
 - Contributor provides its Contributions ) on an " AS IS " BASIS , 
 - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or 
 - implied , including , without limitation , any warranties or conditions 
 - of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A 
 - PARTICULAR PURPOSE . You are solely responsible for determining the 
 - appropriateness of using or redistributing the Work and assume any 
 - risks associated with Your exercise of permissions under this License . 
 - 
 - 8 . Limitation of Liability . In no event and under no legal theory , 
 - whether in tort ( including negligence ) , contract , or otherwise , 
 - unless required by applicable law ( such as deliberate and grossly 
 - negligent acts ) or agreed to in writing , shall any Contributor be 
 - liable to You for damages , including any direct , indirect , special , 
 - incidental , or consequential damages of any character arising as a 
 - result of this License or out of the use or inability to use the 
 - Work ( including but not limited to damages for loss of goodwill , 
 - work stoppage , computer failure or malfunction , or any and all 
 - other commercial damages or losses ) , even if such Contributor 
 - has been advised of the possibility of such damages . 
 - 
 - 9 . Accepting Warranty or Additional Liability . While redistributing 
 - the Work or Derivative Works thereof , You may choose to offer , 
 - and charge a fee for , acceptance of support , warranty , indemnity , 
 - or other liability obligations and / or rights consistent with this 
 - License . However , in accepting such obligations , You may act only 
 - on Your own behalf and on Your sole responsibility , not on behalf 
 - of any other Contributor , and only if You agree to indemnify , 
 - defend , and hold each Contributor harmless for any liability 
 - incurred by , or claims asserted against , such Contributor by reason 
 - of your accepting any such warranty or additional liability . 
 - 
 - END OF TERMS AND CONDITIONS 
 - 
 - APPENDIX : How to apply the Apache License to your work . 
 - 
 - To apply the Apache License to your work , attach the following 
 - boilerplate notice , with the fields enclosed by brackets " [ ] " 
 - replaced with your own identifying information . ( Don ' t include 
 - the brackets ! ) The text should be enclosed in the appropriate 
 - comment syntax for the file format . We also recommend that a 
 - file or class name and description of purpose be included on the 
 - same " printed page " as the copyright notice for easier 
 - identification within third - party archives . 
 - 
 - Copyright [ yyyy ] [ name of copyright owner ] 
 - 
 - Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - you may not use this file except in compliance with the License . 
 - You may obtain a copy of the License at 
 - 
 - http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - 
 - Unless required by applicable law or agreed to in writing , software 
 - distributed under the License is distributed on an " AS IS " BASIS , 
 - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - See the License for the specific language governing permissions and 
 - limitations under the License . 
 diff - - git a / lib / licenses / guava - r08 . txt b / lib / licenses / guava - r08 . txt 
 new file mode 100644 
 index 0000000 . . d645695 
 - - - / dev / null 
 + + + b / lib / licenses / guava - r08 . txt 
 @ @ - 0 , 0 + 1 , 202 @ @ 
 + 
 + Apache License 
 + Version 2 . 0 , January 2004 
 + http : / / www . apache . org / licenses / 
 + 
 + TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION 
 + 
 + 1 . Definitions . 
 + 
 + " License " shall mean the terms and conditions for use , reproduction , 
 + and distribution as defined by Sections 1 through 9 of this document . 
 + 
 + " Licensor " shall mean the copyright owner or entity authorized by 
 + the copyright owner that is granting the License . 
 + 
 + " Legal Entity " shall mean the union of the acting entity and all 
 + other entities that control , are controlled by , or are under common 
 + control with that entity . For the purposes of this definition , 
 + " control " means ( i ) the power , direct or indirect , to cause the 
 + direction or management of such entity , whether by contract or 
 + otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the 
 + outstanding shares , or ( iii ) beneficial ownership of such entity . 
 + 
 + " You " ( or " Your " ) shall mean an individual or Legal Entity 
 + exercising permissions granted by this License . 
 + 
 + " Source " form shall mean the preferred form for making modifications , 
 + including but not limited to software source code , documentation 
 + source , and configuration files . 
 + 
 + " Object " form shall mean any form resulting from mechanical 
 + transformation or translation of a Source form , including but 
 + not limited to compiled object code , generated documentation , 
 + and conversions to other media types . 
 + 
 + " Work " shall mean the work of authorship , whether in Source or 
 + Object form , made available under the License , as indicated by a 
 + copyright notice that is included in or attached to the work 
 + ( an example is provided in the Appendix below ) . 
 + 
 + " Derivative Works " shall mean any work , whether in Source or Object 
 + form , that is based on ( or derived from ) the Work and for which the 
 + editorial revisions , annotations , elaborations , or other modifications 
 + represent , as a whole , an original work of authorship . For the purposes 
 + of this License , Derivative Works shall not include works that remain 
 + separable from , or merely link ( or bind by name ) to the interfaces of , 
 + the Work and Derivative Works thereof . 
 + 
 + " Contribution " shall mean any work of authorship , including 
 + the original version of the Work and any modifications or additions 
 + to that Work or Derivative Works thereof , that is intentionally 
 + submitted to Licensor for inclusion in the Work by the copyright owner 
 + or by an individual or Legal Entity authorized to submit on behalf of 
 + the copyright owner . For the purposes of this definition , " submitted " 
 + means any form of electronic , verbal , or written communication sent 
 + to the Licensor or its representatives , including but not limited to 
 + communication on electronic mailing lists , source code control systems , 
 + and issue tracking systems that are managed by , or on behalf of , the 
 + Licensor for the purpose of discussing and improving the Work , but 
 + excluding communication that is conspicuously marked or otherwise 
 + designated in writing by the copyright owner as " Not a Contribution . " 
 + 
 + " Contributor " shall mean Licensor and any individual or Legal Entity 
 + on behalf of whom a Contribution has been received by Licensor and 
 + subsequently incorporated within the Work . 
 + 
 + 2 . Grant of Copyright License . Subject to the terms and conditions of 
 + this License , each Contributor hereby grants to You a perpetual , 
 + worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 + copyright license to reproduce , prepare Derivative Works of , 
 + publicly display , publicly perform , sublicense , and distribute the 
 + Work and such Derivative Works in Source or Object form . 
 + 
 + 3 . Grant of Patent License . Subject to the terms and conditions of 
 + this License , each Contributor hereby grants to You a perpetual , 
 + worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 + ( except as stated in this section ) patent license to make , have made , 
 + use , offer to sell , sell , import , and otherwise transfer the Work , 
 + where such license applies only to those patent claims licensable 
 + by such Contributor that are necessarily infringed by their 
 + Contribution ( s ) alone or by combination of their Contribution ( s ) 
 + with the Work to which such Contribution ( s ) was submitted . If You 
 + institute patent litigation against any entity ( including a 
 + cross - claim or counterclaim in a lawsuit ) alleging that the Work 
 + or a Contribution incorporated within the Work constitutes direct 
 + or contributory patent infringement , then any patent licenses 
 + granted to You under this License for that Work shall terminate 
 + as of the date such litigation is filed . 
 + 
 + 4 . Redistribution . You may reproduce and distribute copies of the 
 + Work or Derivative Works thereof in any medium , with or without 
 + modifications , and in Source or Object form , provided that You 
 + meet the following conditions : 
 + 
 + ( a ) You must give any other recipients of the Work or 
 + Derivative Works a copy of this License ; and 
 + 
 + ( b ) You must cause any modified files to carry prominent notices 
 + stating that You changed the files ; and 
 + 
 + ( c ) You must retain , in the Source form of any Derivative Works 
 + that You distribute , all copyright , patent , trademark , and 
 + attribution notices from the Source form of the Work , 
 + excluding those notices that do not pertain to any part of 
 + the Derivative Works ; and 
 + 
 + ( d ) If the Work includes a " NOTICE " text file as part of its 
 + distribution , then any Derivative Works that You distribute must 
 + include a readable copy of the attribution notices contained 
 + within such NOTICE file , excluding those notices that do not 
 + pertain to any part of the Derivative Works , in at least one 
 + of the following places : within a NOTICE text file distributed 
 + as part of the Derivative Works ; within the Source form or 
 + documentation , if provided along with the Derivative Works ; or , 
 + within a display generated by the Derivative Works , if and 
 + wherever such third - party notices normally appear . The contents 
 + of the NOTICE file are for informational purposes only and 
 + do not modify the License . You may add Your own attribution 
 + notices within Derivative Works that You distribute , alongside 
 + or as an addendum to the NOTICE text from the Work , provided 
 + that such additional attribution notices cannot be construed 
 + as modifying the License . 
 + 
 + You may add Your own copyright statement to Your modifications and 
 + may provide additional or different license terms and conditions 
 + for use , reproduction , or distribution of Your modifications , or 
 + for any such Derivative Works as a whole , provided Your use , 
 + reproduction , and distribution of the Work otherwise complies with 
 + the conditions stated in this License . 
 + 
 + 5 . Submission of Contributions . Unless You explicitly state otherwise , 
 + any Contribution intentionally submitted for inclusion in the Work 
 + by You to the Licensor shall be under the terms and conditions of 
 + this License , without any additional terms or conditions . 
 + Notwithstanding the above , nothing herein shall supersede or modify 
 + the terms of any separate license agreement you may have executed 
 + with Licensor regarding such Contributions . 
 + 
 + 6 . Trademarks . This License does not grant permission to use the trade 
 + names , trademarks , service marks , or product names of the Licensor , 
 + except as required for reasonable and customary use in describing the 
 + origin of the Work and reproducing the content of the NOTICE file . 
 + 
 + 7 . Disclaimer of Warranty . Unless required by applicable law or 
 + agreed to in writing , Licensor provides the Work ( and each 
 + Contributor provides its Contributions ) on an " AS IS " BASIS , 
 + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or 
 + implied , including , without limitation , any warranties or conditions 
 + of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A 
 + PARTICULAR PURPOSE . You are solely responsible for determining the 
 + appropriateness of using or redistributing the Work and assume any 
 + risks associated with Your exercise of permissions under this License . 
 + 
 + 8 . Limitation of Liability . In no event and under no legal theory , 
 + whether in tort ( including negligence ) , contract , or otherwise , 
 + unless required by applicable law ( such as deliberate and grossly 
 + negligent acts ) or agreed to in writing , shall any Contributor be 
 + liable to You for damages , including any direct , indirect , special , 
 + incidental , or consequential damages of any character arising as a 
 + result of this License or out of the use or inability to use the 
 + Work ( including but not limited to damages for loss of goodwill , 
 + work stoppage , computer failure or malfunction , or any and all 
 + other commercial damages or losses ) , even if such Contributor 
 + has been advised of the possibility of such damages . 
 + 
 + 9 . Accepting Warranty or Additional Liability . While redistributing 
 + the Work or Derivative Works thereof , You may choose to offer , 
 + and charge a fee for , acceptance of support , warranty , indemnity , 
 + or other liability obligations and / or rights consistent with this 
 + License . However , in accepting such obligations , You may act only 
 + on Your own behalf and on Your sole responsibility , not on behalf 
 + of any other Contributor , and only if You agree to indemnify , 
 + defend , and hold each Contributor harmless for any liability 
 + incurred by , or claims asserted against , such Contributor by reason 
 + of your accepting any such warranty or additional liability . 
 + 
 + END OF TERMS AND CONDITIONS 
 + 
 + APPENDIX : How to apply the Apache License to your work . 
 + 
 + To apply the Apache License to your work , attach the following 
 + boilerplate notice , with the fields enclosed by brackets " [ ] " 
 + replaced with your own identifying information . ( Don ' t include 
 + the brackets ! ) The text should be enclosed in the appropriate 
 + comment syntax for the file format . We also recommend that a 
 + file or class name and description of purpose be included on the 
 + same " printed page " as the copyright notice for easier 
 + identification within third - party archives . 
 + 
 + Copyright [ yyyy ] [ name of copyright owner ] 
 + 
 + Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + you may not use this file except in compliance with the License . 
 + You may obtain a copy of the License at 
 + 
 + http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + 
 + Unless required by applicable law or agreed to in writing , software 
 + distributed under the License is distributed on an " AS IS " BASIS , 
 + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + See the License for the specific language governing permissions and 
 + limitations under the License .
