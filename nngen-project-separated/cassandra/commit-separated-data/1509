BLEU SCORE: 0.015445276590783498

TEST MSG: Warn when an extra - large partition is compacted , CASSANDRA - 9643
GENERATED MSG: merge from 0 . 6

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 0b38ff0 . . 4042722 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 0 - rc2 <nl> + * Warn when an extra - large partition is compacted ( CASSANDRA - 9643 ) <nl> * ( cqlsh ) Allow setting the initial connection timeout ( CASSANDRA - 9601 ) <nl> * BulkLoader has - - transport - factory option but does not use it ( CASSANDRA - 9675 ) <nl> * Allow JMX over SSL directly from nodetool ( CASSANDRA - 9090 ) <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index dba8e1f . . 640af8f 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 622 , 6 + 622 , 9 @ @ batch _ size _ fail _ threshold _ in _ kb : 50 <nl> # of compaction , including validation compaction . <nl> compaction _ throughput _ mb _ per _ sec : 16 <nl> <nl> + # Log a warning when compacting partitions larger than this value <nl> + compaction _ large _ partition _ warning _ threshold _ mb : 100 <nl> + <nl> # When compacting , the replacement sstable ( s ) can be opened before they <nl> # are completely written , and used in place of the prior sstables for <nl> # any range that has been written . This helps to smoothly transfer reads <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index 5beeef2 . . 9f37d9a 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 152 , 6 + 152 , 7 @ @ public class Config <nl> public volatile int batch _ size _ fail _ threshold _ in _ kb = 50 ; <nl> public Integer concurrent _ compactors ; <nl> public volatile Integer compaction _ throughput _ mb _ per _ sec = 16 ; <nl> + public volatile Integer compaction _ large _ partition _ warning _ threshold _ mb = 100 ; <nl> <nl> public Integer max _ streaming _ retries = 3 ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 39a06cb . . 632bf0a 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 1054 , 6 + 1054 , 8 @ @ public class DatabaseDescriptor <nl> conf . compaction _ throughput _ mb _ per _ sec = value ; <nl> } <nl> <nl> + public static int getCompactionLargePartitionWarningThreshold ( ) { return conf . compaction _ large _ partition _ warning _ threshold _ mb * 1024 * 1024 ; } <nl> + <nl> public static boolean getDisableSTCSInL0 ( ) <nl> { <nl> return Boolean . getBoolean ( " cassandra . disable _ stcs _ in _ l0 " ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java <nl> index 30b55a0 . . c3caa0f 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java <nl> @ @ - 137 , 7 + 137 , 9 @ @ public class BigTableWriter extends SSTableWriter <nl> if ( entry = = null ) <nl> return null ; <nl> long endPosition = dataFile . getFilePointer ( ) ; <nl> - metadataCollector . update ( endPosition - startPosition , row . columnStats ( ) ) ; <nl> + long rowSize = endPosition - startPosition ; <nl> + maybeLogLargePartitionWarning ( row . key , rowSize ) ; <nl> + metadataCollector . update ( rowSize , row . columnStats ( ) ) ; <nl> afterAppend ( row . key , endPosition , entry ) ; <nl> return entry ; <nl> } <nl> @ @ - 169 , 9 + 171 , 20 @ @ public class BigTableWriter extends SSTableWriter <nl> { <nl> throw new FSWriteError ( e , dataFile . getPath ( ) ) ; <nl> } <nl> + long rowSize = endPosition - startPosition ; <nl> + maybeLogLargePartitionWarning ( decoratedKey , rowSize ) ; <nl> metadataCollector . update ( endPosition - startPosition , cf . getColumnStats ( ) ) ; <nl> } <nl> <nl> + private void maybeLogLargePartitionWarning ( DecoratedKey key , long rowSize ) <nl> + { <nl> + if ( rowSize > DatabaseDescriptor . getCompactionLargePartitionWarningThreshold ( ) ) <nl> + { <nl> + String keyString = metadata . getKeyValidator ( ) . getString ( key . getKey ( ) ) ; <nl> + logger . warn ( " Compacting large partition { } / { } : { } ( { } bytes ) " , metadata . ksName , metadata . cfName , keyString , rowSize ) ; <nl> + } <nl> + } <nl> + <nl> private static RowIndexEntry rawAppend ( ColumnFamily cf , long startPosition , DecoratedKey key , DataOutputPlus out ) throws IOException <nl> { <nl> assert cf . hasColumns ( ) | | cf . isMarkedForDelete ( ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 8d9e2ea . . c97b17f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 7 + 1 , 10 @ @ <nl> dev <nl> * sstable versioning ( CASSANDRA - 389 ) <nl> <nl> - 0 . 6 . 0 - dev <nl> + 0 . 6 . 0 - RC1 <nl> + * fix compaction bucketing bug ( CASSANDRA - 814 ) <nl> + <nl> + 0 . 6 . 0 - beta1 / beta2 <nl> * add batch _ mutate thrift command , deprecating batch _ insert ( CASSANDRA - 336 ) <nl> * remove get _ key _ range Thrift API , deprecated in 0 . 5 ( CASSANDRA - 710 ) <nl> * add optional login ( ) Thrift call for authentication ( CASSANDRA - 547 ) <nl> @ @ - 42 , 7 + 45 , 9 @ @ dev <nl> * allow larger numbers of keys ( > 140M ) in a sstable bloom filter <nl> ( CASSANDRA - 790 ) <nl> * include jvm argument improvements from CASSANDRA - 504 in debian package <nl> - * change streaming chunk size to 32MB ( was 64MB ) ( CASSANDRA - 795 ) <nl> + * change streaming chunk size to 32MB to accomodate Windows XP limitations <nl> + ( was 64MB ) ( CASSANDRA - 795 ) <nl> + * fix get _ range _ slice returning results in the wrong order ( CASSANDRA - 781 ) <nl> <nl> <nl> 0 . 5 . 0 final <nl> diff - - git a / build . xml b / build . xml <nl> index ea79876 . . 54ef12d 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 314 , 6 + 314 , 7 @ @ <nl> < include name = " * * " / > <nl> < exclude name = " build / * * " / > <nl> < exclude name = " src / gen - java / * * " / > <nl> + < exclude name = " interface / avro / * * " / > <nl> < / tarfileset > <nl> < / tar > <nl> < / target > <nl> diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> index fbd5ebb . . 1b5b6b1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return 0 ; <nl> } <nl> logger . debug ( " Checking to see if compaction of " + cfs . columnFamily _ + " would be useful " ) ; <nl> - Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> + Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> updateEstimateFor ( cfs , buckets ) ; <nl> <nl> for ( List < SSTableReader > sstables : buckets ) <nl> @ @ - 441 , 7 + 441 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> / * <nl> * Group files of similar size into buckets . <nl> * / <nl> - static Set < List < SSTableReader > > getCompactionBuckets ( Iterable < SSTableReader > files , long min ) <nl> + static Set < List < SSTableReader > > getBuckets ( Iterable < SSTableReader > files , long min ) <nl> { <nl> Map < List < SSTableReader > , Long > buckets = new HashMap < List < SSTableReader > , Long > ( ) ; <nl> for ( SSTableReader sstable : files ) <nl> @ @ - 461 , 7 + 461 , 8 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> / / remove and re - add because adding changes the hash <nl> buckets . remove ( bucket ) ; <nl> - averageSize = ( averageSize + size ) / 2 ; <nl> + long totalSize = bucket . size ( ) * averageSize ; <nl> + averageSize = ( totalSize + size ) / ( bucket . size ( ) + 1 ) ; <nl> bucket . add ( sstable ) ; <nl> buckets . put ( bucket , averageSize ) ; <nl> bFound = true ; <nl> @ @ - 538 , 7 + 539 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> public void run ( ) <nl> { <nl> logger . debug ( " Estimating compactions for " + cfs . columnFamily _ ) ; <nl> - final Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> + final Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> updateEstimateFor ( cfs , buckets ) ; <nl> } <nl> } ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0b38ff0 . . 4042722 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 0 - rc2 
 + * Warn when an extra - large partition is compacted ( CASSANDRA - 9643 ) 
 * ( cqlsh ) Allow setting the initial connection timeout ( CASSANDRA - 9601 ) 
 * BulkLoader has - - transport - factory option but does not use it ( CASSANDRA - 9675 ) 
 * Allow JMX over SSL directly from nodetool ( CASSANDRA - 9090 ) 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index dba8e1f . . 640af8f 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 622 , 6 + 622 , 9 @ @ batch _ size _ fail _ threshold _ in _ kb : 50 
 # of compaction , including validation compaction . 
 compaction _ throughput _ mb _ per _ sec : 16 
 
 + # Log a warning when compacting partitions larger than this value 
 + compaction _ large _ partition _ warning _ threshold _ mb : 100 
 + 
 # When compacting , the replacement sstable ( s ) can be opened before they 
 # are completely written , and used in place of the prior sstables for 
 # any range that has been written . This helps to smoothly transfer reads 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index 5beeef2 . . 9f37d9a 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 152 , 6 + 152 , 7 @ @ public class Config 
 public volatile int batch _ size _ fail _ threshold _ in _ kb = 50 ; 
 public Integer concurrent _ compactors ; 
 public volatile Integer compaction _ throughput _ mb _ per _ sec = 16 ; 
 + public volatile Integer compaction _ large _ partition _ warning _ threshold _ mb = 100 ; 
 
 public Integer max _ streaming _ retries = 3 ; 
 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 39a06cb . . 632bf0a 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 1054 , 6 + 1054 , 8 @ @ public class DatabaseDescriptor 
 conf . compaction _ throughput _ mb _ per _ sec = value ; 
 } 
 
 + public static int getCompactionLargePartitionWarningThreshold ( ) { return conf . compaction _ large _ partition _ warning _ threshold _ mb * 1024 * 1024 ; } 
 + 
 public static boolean getDisableSTCSInL0 ( ) 
 { 
 return Boolean . getBoolean ( " cassandra . disable _ stcs _ in _ l0 " ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java 
 index 30b55a0 . . c3caa0f 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java 
 @ @ - 137 , 7 + 137 , 9 @ @ public class BigTableWriter extends SSTableWriter 
 if ( entry = = null ) 
 return null ; 
 long endPosition = dataFile . getFilePointer ( ) ; 
 - metadataCollector . update ( endPosition - startPosition , row . columnStats ( ) ) ; 
 + long rowSize = endPosition - startPosition ; 
 + maybeLogLargePartitionWarning ( row . key , rowSize ) ; 
 + metadataCollector . update ( rowSize , row . columnStats ( ) ) ; 
 afterAppend ( row . key , endPosition , entry ) ; 
 return entry ; 
 } 
 @ @ - 169 , 9 + 171 , 20 @ @ public class BigTableWriter extends SSTableWriter 
 { 
 throw new FSWriteError ( e , dataFile . getPath ( ) ) ; 
 } 
 + long rowSize = endPosition - startPosition ; 
 + maybeLogLargePartitionWarning ( decoratedKey , rowSize ) ; 
 metadataCollector . update ( endPosition - startPosition , cf . getColumnStats ( ) ) ; 
 } 
 
 + private void maybeLogLargePartitionWarning ( DecoratedKey key , long rowSize ) 
 + { 
 + if ( rowSize > DatabaseDescriptor . getCompactionLargePartitionWarningThreshold ( ) ) 
 + { 
 + String keyString = metadata . getKeyValidator ( ) . getString ( key . getKey ( ) ) ; 
 + logger . warn ( " Compacting large partition { } / { } : { } ( { } bytes ) " , metadata . ksName , metadata . cfName , keyString , rowSize ) ; 
 + } 
 + } 
 + 
 private static RowIndexEntry rawAppend ( ColumnFamily cf , long startPosition , DecoratedKey key , DataOutputPlus out ) throws IOException 
 { 
 assert cf . hasColumns ( ) | | cf . isMarkedForDelete ( ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 8d9e2ea . . c97b17f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 7 + 1 , 10 @ @ 
 dev 
 * sstable versioning ( CASSANDRA - 389 ) 
 
 - 0 . 6 . 0 - dev 
 + 0 . 6 . 0 - RC1 
 + * fix compaction bucketing bug ( CASSANDRA - 814 ) 
 + 
 + 0 . 6 . 0 - beta1 / beta2 
 * add batch _ mutate thrift command , deprecating batch _ insert ( CASSANDRA - 336 ) 
 * remove get _ key _ range Thrift API , deprecated in 0 . 5 ( CASSANDRA - 710 ) 
 * add optional login ( ) Thrift call for authentication ( CASSANDRA - 547 ) 
 @ @ - 42 , 7 + 45 , 9 @ @ dev 
 * allow larger numbers of keys ( > 140M ) in a sstable bloom filter 
 ( CASSANDRA - 790 ) 
 * include jvm argument improvements from CASSANDRA - 504 in debian package 
 - * change streaming chunk size to 32MB ( was 64MB ) ( CASSANDRA - 795 ) 
 + * change streaming chunk size to 32MB to accomodate Windows XP limitations 
 + ( was 64MB ) ( CASSANDRA - 795 ) 
 + * fix get _ range _ slice returning results in the wrong order ( CASSANDRA - 781 ) 
 
 
 0 . 5 . 0 final 
 diff - - git a / build . xml b / build . xml 
 index ea79876 . . 54ef12d 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 314 , 6 + 314 , 7 @ @ 
 < include name = " * * " / > 
 < exclude name = " build / * * " / > 
 < exclude name = " src / gen - java / * * " / > 
 + < exclude name = " interface / avro / * * " / > 
 < / tarfileset > 
 < / tar > 
 < / target > 
 diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java 
 index fbd5ebb . . 1b5b6b1 100644 
 - - - a / src / java / org / apache / cassandra / db / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / CompactionManager . java 
 @ @ - 89 , 7 + 89 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 return 0 ; 
 } 
 logger . debug ( " Checking to see if compaction of " + cfs . columnFamily _ + " would be useful " ) ; 
 - Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 + Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 updateEstimateFor ( cfs , buckets ) ; 
 
 for ( List < SSTableReader > sstables : buckets ) 
 @ @ - 441 , 7 + 441 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 / * 
 * Group files of similar size into buckets . 
 * / 
 - static Set < List < SSTableReader > > getCompactionBuckets ( Iterable < SSTableReader > files , long min ) 
 + static Set < List < SSTableReader > > getBuckets ( Iterable < SSTableReader > files , long min ) 
 { 
 Map < List < SSTableReader > , Long > buckets = new HashMap < List < SSTableReader > , Long > ( ) ; 
 for ( SSTableReader sstable : files ) 
 @ @ - 461 , 7 + 461 , 8 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 / / remove and re - add because adding changes the hash 
 buckets . remove ( bucket ) ; 
 - averageSize = ( averageSize + size ) / 2 ; 
 + long totalSize = bucket . size ( ) * averageSize ; 
 + averageSize = ( totalSize + size ) / ( bucket . size ( ) + 1 ) ; 
 bucket . add ( sstable ) ; 
 buckets . put ( bucket , averageSize ) ; 
 bFound = true ; 
 @ @ - 538 , 7 + 539 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 public void run ( ) 
 { 
 logger . debug ( " Estimating compactions for " + cfs . columnFamily _ ) ; 
 - final Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 + final Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 updateEstimateFor ( cfs , buckets ) ; 
 } 
 } ;
