BLEU SCORE: 0.033864985683445356

TEST MSG: Add back Netty 3 jar to stress lib dir for # 6911
GENERATED MSG: Update to last stable netty release

TEST DIFF (one line): diff - - git a / tools / lib / cassandra - driver - core - 2 . 0 . 0 . jar b / tools / lib / cassandra - driver - core - 2 . 0 . 0 . jar <nl> deleted file mode 100644 <nl> index f4343c3 . . 0000000 <nl> Binary files a / tools / lib / cassandra - driver - core - 2 . 0 . 0 . jar and / dev / null differ <nl> diff - - git a / tools / lib / cassandra - driver - core - 2 . 0 . 1 . jar b / tools / lib / cassandra - driver - core - 2 . 0 . 1 . jar <nl> new file mode 100644 <nl> index 0000000 . . efdff92 <nl> Binary files / dev / null and b / tools / lib / cassandra - driver - core - 2 . 0 . 1 . jar differ <nl> diff - - git a / tools / lib / netty - 3 . 9 . 0 . Final . jar b / tools / lib / netty - 3 . 9 . 0 . Final . jar <nl> new file mode 100644 <nl> index 0000000 . . 872340e <nl> Binary files / dev / null and b / tools / lib / netty - 3 . 9 . 0 . Final . jar differ
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 2b87c85 . . e25bfbf 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 39 , 6 + 39 , 7 @ @ <nl> * Fix list prepend logic ( CQL3 ) ( CASSANDRA - 4835 ) <nl> * Add booleans as literals in CQL3 ( CASSANDRA - 4776 ) <nl> * Allow renaming PK columns in CQL3 ( CASSANDRA - 4822 ) <nl> + * Fix binary protocol NEW _ NODE event ( CASSANDRA - 4679 ) <nl> Merged from 1 . 1 : <nl> * fix get _ paged _ slice to wrap to next row correctly ( CASSANDRA - 4816 ) <nl> * fix indexing empty column values ( CASSANDRA - 4832 ) <nl> diff - - git a / doc / native _ protocol . spec b / doc / native _ protocol . spec <nl> index 5c84f71 . . f534cde 100644 <nl> - - - a / doc / native _ protocol . spec <nl> + + + b / doc / native _ protocol . spec <nl> @ @ - 481 , 6 + 481 , 13 @ @ Table of Contents <nl> <nl> All EVENT message have a streamId of - 1 ( Section 2 . 3 ) . <nl> <nl> + Please note that " NEW _ NODE " and " UP " events are sent based on internal Gossip <nl> + communication and as such may be sent a short delay before the binary <nl> + protocol server on the newly up node is fully started . Clients are thus <nl> + advise to wait a short time before trying to connect to the node ( 1 seconds <nl> + should be enough ) , otherwise they may experience a connection refusal at <nl> + first . <nl> + <nl> <nl> 5 . Compression <nl> <nl> diff - - git a / src / java / org / apache / cassandra / gms / IEndpointStateChangeSubscriber . java b / src / java / org / apache / cassandra / gms / IEndpointStateChangeSubscriber . java <nl> index fff613b . . 2abee01 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / IEndpointStateChangeSubscriber . java <nl> + + + b / src / java / org / apache / cassandra / gms / IEndpointStateChangeSubscriber . java <nl> @ @ - 27 , 7 + 27 , 6 @ @ import java . net . InetAddress ; <nl> * instance to decide what he does with this change . Not all modules maybe interested <nl> * in all state changes . <nl> * / <nl> - <nl> public interface IEndpointStateChangeSubscriber <nl> { <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index 03da7e3 . . 7b8e7d8 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 300 , 16 + 300 , 7 @ @ public class CassandraDaemon <nl> <nl> / / start server internals <nl> StorageService . instance . registerDaemon ( this ) ; <nl> - try <nl> - { <nl> - StorageService . instance . initServer ( ) ; <nl> - } <nl> - catch ( ConfigurationException e ) <nl> - { <nl> - logger . error ( " Fatal configuration error " , e ) ; <nl> - System . err . println ( e . getMessage ( ) + " \ nFatal configuration error ; unable to start server . See log for stacktrace . " ) ; <nl> - System . exit ( 1 ) ; <nl> - } <nl> + StorageService . instance . initServerLocally ( ) ; <nl> <nl> Mx4jTool . maybeLoad ( ) ; <nl> <nl> @ @ - 357 , 6 + 348 , 17 @ @ public class CassandraDaemon <nl> nativeServer . start ( ) ; <nl> else <nl> logger . info ( " Not starting native transport as requested . Use JMX ( StorageService - > startNativeTransport ( ) ) to start it " ) ; <nl> + <nl> + try <nl> + { <nl> + StorageService . instance . maybeJoinRing ( StorageService . RING _ DELAY ) ; <nl> + } <nl> + catch ( ConfigurationException e ) <nl> + { <nl> + logger . error ( " Fatal configuration error " , e ) ; <nl> + System . err . println ( e . getMessage ( ) + " \ nFatal configuration error ; unable to start server . See log for stacktrace . " ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / service / IEndpointLifecycleSubscriber . java b / src / java / org / apache / cassandra / service / IEndpointLifecycleSubscriber . java <nl> new file mode 100644 <nl> index 0000000 . . 24cb3d7 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / service / IEndpointLifecycleSubscriber . java <nl> @ @ - 0 , 0 + 1 , 67 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import java . net . InetAddress ; <nl> + <nl> + / * * <nl> + * Interface on which interested parties can be notified of high level endpoint <nl> + * state changes . <nl> + * <nl> + * Note that while IEndpointStateChangeSubscriber notify about gossip related <nl> + * changes ( IEndpointStateChangeSubscriber . onJoin ( ) is called when a node join <nl> + * gossip ) , this interface allows to be notified about higher level events . <nl> + * / <nl> + public interface IEndpointLifecycleSubscriber <nl> + { <nl> + / * * <nl> + * Called when a new node joins the cluster , i . e . either has just been <nl> + * bootstrapped or " instajoins " . <nl> + * <nl> + * @ param endpoint the newly added endpoint . <nl> + * / <nl> + public void onJoinCluster ( InetAddress endpoint ) ; <nl> + <nl> + / * * <nl> + * Called when a new node leave the cluster ( decommission or removeToken ) . <nl> + * <nl> + * @ param endpoint the endpoint that is leaving . <nl> + * / <nl> + public void onLeaveCluster ( InetAddress endpoint ) ; <nl> + <nl> + / * * <nl> + * Called when a node is marked UP . <nl> + * <nl> + * @ param endpoint the endpoint marked UP . <nl> + * / <nl> + public void onUp ( InetAddress endpoint ) ; <nl> + <nl> + / * * <nl> + * Called when a node is marked DOWN . <nl> + * <nl> + * @ param endpoint the endpoint marked DOWN . <nl> + * / <nl> + public void onDown ( InetAddress endpoint ) ; <nl> + <nl> + / * * <nl> + * Called when a node has moved ( to a new token ) . <nl> + * <nl> + * @ param endpoint the endpoint that has moved . <nl> + * / <nl> + public void onMove ( InetAddress endpoint ) ; <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 58ce112 . . ad4a534 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 105 , 7 + 105 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> * This pool is used by tasks that can have longer execution times , and usually are non periodic . <nl> * / <nl> public static final DebuggableScheduledThreadPoolExecutor tasks = new DebuggableScheduledThreadPoolExecutor ( " NonPeriodicTasks " ) ; <nl> - / * * <nl> + / * * <nl> * tasks that do not need to be waited for on shutdown / drain <nl> * / <nl> public static final DebuggableScheduledThreadPoolExecutor optionalTasks = new DebuggableScheduledThreadPoolExecutor ( " OptionalTasks " ) ; <nl> @ @ - 181 , 6 + 181 , 8 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> <nl> private static ScheduledRangeTransferExecutorService rangeXferExecutor = new ScheduledRangeTransferExecutorService ( ) ; <nl> <nl> + private final List < IEndpointLifecycleSubscriber > lifecycleSubscribers = new CopyOnWriteArrayList < IEndpointLifecycleSubscriber > ( ) ; <nl> + <nl> public void finishBootstrapping ( ) <nl> { <nl> isBootstrapMode = false ; <nl> @ @ - 253 , 6 + 255 , 16 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> this . daemon = daemon ; <nl> } <nl> <nl> + public void register ( IEndpointLifecycleSubscriber subscriber ) <nl> + { <nl> + lifecycleSubscribers . add ( subscriber ) ; <nl> + } <nl> + <nl> + public void unregister ( IEndpointLifecycleSubscriber subscriber ) <nl> + { <nl> + lifecycleSubscribers . remove ( subscriber ) ; <nl> + } <nl> + <nl> / / should only be called via JMX <nl> public void stopGossiping ( ) <nl> { <nl> @ @ - 388 , 6 + 400 , 12 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> <nl> public synchronized void initServer ( int delay ) throws ConfigurationException <nl> { <nl> + initServerLocally ( ) ; <nl> + maybeJoinRing ( delay ) ; <nl> + } <nl> + <nl> + public void initServerLocally ( ) <nl> + { <nl> logger . info ( " Cassandra version : " + FBUtilities . getReleaseVersionString ( ) ) ; <nl> logger . info ( " Thrift API version : " + Constants . VERSION ) ; <nl> logger . info ( " CQL supported versions : " + StringUtils . join ( ClientState . getCQLSupportedVersion ( ) , " , " ) + " ( default : " + ClientState . DEFAULT _ CQL _ VERSION + " ) " ) ; <nl> @ @ - 484 , 6 + 502 , 18 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> } <nl> } , " StorageServiceShutdownHook " ) ; <nl> Runtime . getRuntime ( ) . addShutdownHook ( drainOnShutdown ) ; <nl> + } <nl> + <nl> + public synchronized void maybeJoinRing ( int delay ) throws ConfigurationException <nl> + { <nl> + / / This method should only be called as part of the server initialization , so if initialized = = true , we ' ve already gone <nl> + / / through that . If the ring must be joined after the server initialization , use joinTokenRing ( ) directly . <nl> + if ( initialized ) <nl> + { <nl> + if ( isClientMode ) <nl> + throw new UnsupportedOperationException ( " StorageService does not support switching modes . " ) ; <nl> + return ; <nl> + } <nl> <nl> if ( Boolean . parseBoolean ( System . getProperty ( " cassandra . join _ ring " , " true " ) ) ) <nl> { <nl> @ @ - 1249 , 8 + 1279 , 21 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> logger . debug ( " Node " + endpoint + " state normal , token " + tokens ) ; <nl> <nl> if ( tokenMetadata . isMember ( endpoint ) ) <nl> + { <nl> logger . info ( " Node " + endpoint + " state jump to normal " ) ; <nl> <nl> + if ( ! isClientMode ) <nl> + { <nl> + for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) <nl> + subscriber . onUp ( endpoint ) ; <nl> + } <nl> + } <nl> + else if ( ! isClientMode ) <nl> + { <nl> + for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) <nl> + subscriber . onJoinCluster ( endpoint ) ; <nl> + } <nl> + <nl> / / Order Matters , TM . updateHostID ( ) should be called before TM . updateNormalToken ( ) , ( see CASSANDRA - 4300 ) . <nl> if ( Gossiper . instance . usesHostId ( endpoint ) ) <nl> tokenMetadata . updateHostId ( Gossiper . instance . getHostId ( endpoint ) , endpoint ) ; <nl> @ @ - 1344 , 8 + 1387 , 16 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> SystemTable . updateLocalTokens ( Collections . < Token > emptyList ( ) , localTokensToRemove ) ; <nl> <nl> if ( tokenMetadata . isMoving ( endpoint ) ) / / if endpoint was moving to a new token <nl> + { <nl> tokenMetadata . removeFromMoving ( endpoint ) ; <nl> <nl> + if ( ! isClientMode ) <nl> + { <nl> + for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) <nl> + subscriber . onMove ( endpoint ) ; <nl> + } <nl> + } <nl> + <nl> calculatePendingRanges ( ) ; <nl> } <nl> <nl> @ @ - 1504 , 6 + 1555 , 11 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> Gossiper . instance . removeEndpoint ( endpoint ) ; <nl> tokenMetadata . removeEndpoint ( endpoint ) ; <nl> tokenMetadata . removeBootstrapTokens ( tokens ) ; <nl> + if ( ! isClientMode ) <nl> + { <nl> + for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) <nl> + subscriber . onLeaveCluster ( endpoint ) ; <nl> + } <nl> calculatePendingRanges ( ) ; <nl> if ( ! isClientMode ) <nl> { <nl> @ @ - 1856 , 6 + 1912 , 11 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> public void onDead ( InetAddress endpoint , EndpointState state ) <nl> { <nl> MessagingService . instance ( ) . convict ( endpoint ) ; <nl> + if ( ! isClientMode ) <nl> + { <nl> + for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) <nl> + subscriber . onDown ( endpoint ) ; <nl> + } <nl> } <nl> <nl> public void onRestart ( InetAddress endpoint , EndpointState state ) <nl> diff - - git a / src / java / org / apache / cassandra / transport / Event . java b / src / java / org / apache / cassandra / transport / Event . java <nl> index 855049d . . 33b08f4 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Event . java <nl> + + + b / src / java / org / apache / cassandra / transport / Event . java <nl> @ @ - 58 , 7 + 58 , 7 @ @ public abstract class Event <nl> <nl> public static class TopologyChange extends Event <nl> { <nl> - public enum Change { NEW _ NODE , REMOVED _ NODE } <nl> + public enum Change { NEW _ NODE , REMOVED _ NODE , MOVED _ NODE } <nl> <nl> public final Change change ; <nl> public final InetSocketAddress node ; <nl> @ @ - 80 , 6 + 80 , 11 @ @ public abstract class Event <nl> return new TopologyChange ( Change . REMOVED _ NODE , new InetSocketAddress ( host , port ) ) ; <nl> } <nl> <nl> + public static TopologyChange movedNode ( InetAddress host , int port ) <nl> + { <nl> + return new TopologyChange ( Change . MOVED _ NODE , new InetSocketAddress ( host , port ) ) ; <nl> + } <nl> + <nl> / / Assumes the type has already by been deserialized <nl> private static TopologyChange deserializeEvent ( ChannelBuffer cb ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java <nl> index e820554 . . e629ca4 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Server . java <nl> + + + b / src / java / org / apache / cassandra / transport / Server . java <nl> @ @ - 35 , 10 + 35 , 10 @ @ import org . jboss . netty . logging . Slf4JLoggerFactory ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import org . apache . cassandra . gms . * ; <nl> import org . apache . cassandra . service . CassandraDaemon ; <nl> import org . apache . cassandra . service . IMigrationListener ; <nl> import org . apache . cassandra . service . MigrationManager ; <nl> + import org . apache . cassandra . service . IEndpointLifecycleSubscriber ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . transport . messages . EventMessage ; <nl> <nl> @ @ - 63 , 7 + 63 , 7 @ @ public class Server implements CassandraDaemon . Server <nl> { <nl> this . socket = socket ; <nl> EventNotifier notifier = new EventNotifier ( this ) ; <nl> - Gossiper . instance . register ( notifier ) ; <nl> + StorageService . instance . register ( notifier ) ; <nl> MigrationManager . instance . register ( notifier ) ; <nl> } <nl> <nl> @ @ - 203 , 7 + 203 , 7 @ @ public class Server implements CassandraDaemon . Server <nl> } <nl> } <nl> <nl> - private static class EventNotifier implements IEndpointStateChangeSubscriber , IMigrationListener <nl> + private static class EventNotifier implements IEndpointLifecycleSubscriber , IMigrationListener <nl> { <nl> private final Server server ; <nl> <nl> @ @ - 227 , 33 + 227 , 29 @ @ public class Server implements CassandraDaemon . Server <nl> } <nl> } <nl> <nl> - public void onJoin ( InetAddress endpoint , EndpointState epState ) <nl> + public void onJoinCluster ( InetAddress endpoint ) <nl> { <nl> server . connectionTracker . send ( Event . TopologyChange . newNode ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; <nl> } <nl> <nl> - public void onChange ( InetAddress endpoint , ApplicationState state , VersionedValue value ) <nl> + public void onLeaveCluster ( InetAddress endpoint ) <nl> { <nl> + server . connectionTracker . send ( Event . TopologyChange . removedNode ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; <nl> } <nl> <nl> - public void onAlive ( InetAddress endpoint , EndpointState state ) <nl> - { <nl> - server . connectionTracker . send ( Event . StatusChange . nodeUp ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; <nl> - } <nl> - <nl> - public void onDead ( InetAddress endpoint , EndpointState state ) <nl> + public void onMove ( InetAddress endpoint ) <nl> { <nl> - server . connectionTracker . send ( Event . StatusChange . nodeDown ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; <nl> + server . connectionTracker . send ( Event . TopologyChange . movedNode ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; <nl> } <nl> <nl> - public void onRemove ( InetAddress endpoint ) <nl> + public void onUp ( InetAddress endpoint ) <nl> { <nl> - server . connectionTracker . send ( Event . TopologyChange . removedNode ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; <nl> + server . connectionTracker . send ( Event . StatusChange . nodeUp ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; <nl> } <nl> <nl> - public void onRestart ( InetAddress endpoint , EndpointState state ) <nl> + public void onDown ( InetAddress endpoint ) <nl> { <nl> - server . connectionTracker . send ( Event . StatusChange . nodeUp ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; <nl> + server . connectionTracker . send ( Event . StatusChange . nodeDown ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; <nl> } <nl> <nl> public void onCreateKeyspace ( String ksName ) <nl> diff - - git a / test / unit / org / apache / cassandra / service / AntiEntropyServiceTestAbstract . java b / test / unit / org / apache / cassandra / service / AntiEntropyServiceTestAbstract . java <nl> index 87cc910 . . ef7a2ab 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / AntiEntropyServiceTestAbstract . java <nl> + + + b / test / unit / org / apache / cassandra / service / AntiEntropyServiceTestAbstract . java <nl> @ @ - 79 , 7 + 79 , 6 @ @ public abstract class AntiEntropyServiceTestAbstract extends SchemaLoader <nl> init ( ) ; <nl> <nl> LOCAL = FBUtilities . getBroadcastAddress ( ) ; <nl> - StorageService . instance . initServer ( 0 ) ; <nl> / / generate a fake endpoint for which we can spoof receiving / sending trees <nl> REMOTE = InetAddress . getByName ( " 127 . 0 . 0 . 2 " ) ; <nl> store = null ;

TEST DIFF:
diff - - git a / tools / lib / cassandra - driver - core - 2 . 0 . 0 . jar b / tools / lib / cassandra - driver - core - 2 . 0 . 0 . jar 
 deleted file mode 100644 
 index f4343c3 . . 0000000 
 Binary files a / tools / lib / cassandra - driver - core - 2 . 0 . 0 . jar and / dev / null differ 
 diff - - git a / tools / lib / cassandra - driver - core - 2 . 0 . 1 . jar b / tools / lib / cassandra - driver - core - 2 . 0 . 1 . jar 
 new file mode 100644 
 index 0000000 . . efdff92 
 Binary files / dev / null and b / tools / lib / cassandra - driver - core - 2 . 0 . 1 . jar differ 
 diff - - git a / tools / lib / netty - 3 . 9 . 0 . Final . jar b / tools / lib / netty - 3 . 9 . 0 . Final . jar 
 new file mode 100644 
 index 0000000 . . 872340e 
 Binary files / dev / null and b / tools / lib / netty - 3 . 9 . 0 . Final . jar differ

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 2b87c85 . . e25bfbf 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 39 , 6 + 39 , 7 @ @ 
 * Fix list prepend logic ( CQL3 ) ( CASSANDRA - 4835 ) 
 * Add booleans as literals in CQL3 ( CASSANDRA - 4776 ) 
 * Allow renaming PK columns in CQL3 ( CASSANDRA - 4822 ) 
 + * Fix binary protocol NEW _ NODE event ( CASSANDRA - 4679 ) 
 Merged from 1 . 1 : 
 * fix get _ paged _ slice to wrap to next row correctly ( CASSANDRA - 4816 ) 
 * fix indexing empty column values ( CASSANDRA - 4832 ) 
 diff - - git a / doc / native _ protocol . spec b / doc / native _ protocol . spec 
 index 5c84f71 . . f534cde 100644 
 - - - a / doc / native _ protocol . spec 
 + + + b / doc / native _ protocol . spec 
 @ @ - 481 , 6 + 481 , 13 @ @ Table of Contents 
 
 All EVENT message have a streamId of - 1 ( Section 2 . 3 ) . 
 
 + Please note that " NEW _ NODE " and " UP " events are sent based on internal Gossip 
 + communication and as such may be sent a short delay before the binary 
 + protocol server on the newly up node is fully started . Clients are thus 
 + advise to wait a short time before trying to connect to the node ( 1 seconds 
 + should be enough ) , otherwise they may experience a connection refusal at 
 + first . 
 + 
 
 5 . Compression 
 
 diff - - git a / src / java / org / apache / cassandra / gms / IEndpointStateChangeSubscriber . java b / src / java / org / apache / cassandra / gms / IEndpointStateChangeSubscriber . java 
 index fff613b . . 2abee01 100644 
 - - - a / src / java / org / apache / cassandra / gms / IEndpointStateChangeSubscriber . java 
 + + + b / src / java / org / apache / cassandra / gms / IEndpointStateChangeSubscriber . java 
 @ @ - 27 , 7 + 27 , 6 @ @ import java . net . InetAddress ; 
 * instance to decide what he does with this change . Not all modules maybe interested 
 * in all state changes . 
 * / 
 - 
 public interface IEndpointStateChangeSubscriber 
 { 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index 03da7e3 . . 7b8e7d8 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 300 , 16 + 300 , 7 @ @ public class CassandraDaemon 
 
 / / start server internals 
 StorageService . instance . registerDaemon ( this ) ; 
 - try 
 - { 
 - StorageService . instance . initServer ( ) ; 
 - } 
 - catch ( ConfigurationException e ) 
 - { 
 - logger . error ( " Fatal configuration error " , e ) ; 
 - System . err . println ( e . getMessage ( ) + " \ nFatal configuration error ; unable to start server . See log for stacktrace . " ) ; 
 - System . exit ( 1 ) ; 
 - } 
 + StorageService . instance . initServerLocally ( ) ; 
 
 Mx4jTool . maybeLoad ( ) ; 
 
 @ @ - 357 , 6 + 348 , 17 @ @ public class CassandraDaemon 
 nativeServer . start ( ) ; 
 else 
 logger . info ( " Not starting native transport as requested . Use JMX ( StorageService - > startNativeTransport ( ) ) to start it " ) ; 
 + 
 + try 
 + { 
 + StorageService . instance . maybeJoinRing ( StorageService . RING _ DELAY ) ; 
 + } 
 + catch ( ConfigurationException e ) 
 + { 
 + logger . error ( " Fatal configuration error " , e ) ; 
 + System . err . println ( e . getMessage ( ) + " \ nFatal configuration error ; unable to start server . See log for stacktrace . " ) ; 
 + System . exit ( 1 ) ; 
 + } 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / service / IEndpointLifecycleSubscriber . java b / src / java / org / apache / cassandra / service / IEndpointLifecycleSubscriber . java 
 new file mode 100644 
 index 0000000 . . 24cb3d7 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / service / IEndpointLifecycleSubscriber . java 
 @ @ - 0 , 0 + 1 , 67 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . service ; 
 + 
 + import java . net . InetAddress ; 
 + 
 + / * * 
 + * Interface on which interested parties can be notified of high level endpoint 
 + * state changes . 
 + * 
 + * Note that while IEndpointStateChangeSubscriber notify about gossip related 
 + * changes ( IEndpointStateChangeSubscriber . onJoin ( ) is called when a node join 
 + * gossip ) , this interface allows to be notified about higher level events . 
 + * / 
 + public interface IEndpointLifecycleSubscriber 
 + { 
 + / * * 
 + * Called when a new node joins the cluster , i . e . either has just been 
 + * bootstrapped or " instajoins " . 
 + * 
 + * @ param endpoint the newly added endpoint . 
 + * / 
 + public void onJoinCluster ( InetAddress endpoint ) ; 
 + 
 + / * * 
 + * Called when a new node leave the cluster ( decommission or removeToken ) . 
 + * 
 + * @ param endpoint the endpoint that is leaving . 
 + * / 
 + public void onLeaveCluster ( InetAddress endpoint ) ; 
 + 
 + / * * 
 + * Called when a node is marked UP . 
 + * 
 + * @ param endpoint the endpoint marked UP . 
 + * / 
 + public void onUp ( InetAddress endpoint ) ; 
 + 
 + / * * 
 + * Called when a node is marked DOWN . 
 + * 
 + * @ param endpoint the endpoint marked DOWN . 
 + * / 
 + public void onDown ( InetAddress endpoint ) ; 
 + 
 + / * * 
 + * Called when a node has moved ( to a new token ) . 
 + * 
 + * @ param endpoint the endpoint that has moved . 
 + * / 
 + public void onMove ( InetAddress endpoint ) ; 
 + } 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 58ce112 . . ad4a534 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 105 , 7 + 105 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 * This pool is used by tasks that can have longer execution times , and usually are non periodic . 
 * / 
 public static final DebuggableScheduledThreadPoolExecutor tasks = new DebuggableScheduledThreadPoolExecutor ( " NonPeriodicTasks " ) ; 
 - / * * 
 + / * * 
 * tasks that do not need to be waited for on shutdown / drain 
 * / 
 public static final DebuggableScheduledThreadPoolExecutor optionalTasks = new DebuggableScheduledThreadPoolExecutor ( " OptionalTasks " ) ; 
 @ @ - 181 , 6 + 181 , 8 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 
 private static ScheduledRangeTransferExecutorService rangeXferExecutor = new ScheduledRangeTransferExecutorService ( ) ; 
 
 + private final List < IEndpointLifecycleSubscriber > lifecycleSubscribers = new CopyOnWriteArrayList < IEndpointLifecycleSubscriber > ( ) ; 
 + 
 public void finishBootstrapping ( ) 
 { 
 isBootstrapMode = false ; 
 @ @ - 253 , 6 + 255 , 16 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 this . daemon = daemon ; 
 } 
 
 + public void register ( IEndpointLifecycleSubscriber subscriber ) 
 + { 
 + lifecycleSubscribers . add ( subscriber ) ; 
 + } 
 + 
 + public void unregister ( IEndpointLifecycleSubscriber subscriber ) 
 + { 
 + lifecycleSubscribers . remove ( subscriber ) ; 
 + } 
 + 
 / / should only be called via JMX 
 public void stopGossiping ( ) 
 { 
 @ @ - 388 , 6 + 400 , 12 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 
 public synchronized void initServer ( int delay ) throws ConfigurationException 
 { 
 + initServerLocally ( ) ; 
 + maybeJoinRing ( delay ) ; 
 + } 
 + 
 + public void initServerLocally ( ) 
 + { 
 logger . info ( " Cassandra version : " + FBUtilities . getReleaseVersionString ( ) ) ; 
 logger . info ( " Thrift API version : " + Constants . VERSION ) ; 
 logger . info ( " CQL supported versions : " + StringUtils . join ( ClientState . getCQLSupportedVersion ( ) , " , " ) + " ( default : " + ClientState . DEFAULT _ CQL _ VERSION + " ) " ) ; 
 @ @ - 484 , 6 + 502 , 18 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 } 
 } , " StorageServiceShutdownHook " ) ; 
 Runtime . getRuntime ( ) . addShutdownHook ( drainOnShutdown ) ; 
 + } 
 + 
 + public synchronized void maybeJoinRing ( int delay ) throws ConfigurationException 
 + { 
 + / / This method should only be called as part of the server initialization , so if initialized = = true , we ' ve already gone 
 + / / through that . If the ring must be joined after the server initialization , use joinTokenRing ( ) directly . 
 + if ( initialized ) 
 + { 
 + if ( isClientMode ) 
 + throw new UnsupportedOperationException ( " StorageService does not support switching modes . " ) ; 
 + return ; 
 + } 
 
 if ( Boolean . parseBoolean ( System . getProperty ( " cassandra . join _ ring " , " true " ) ) ) 
 { 
 @ @ - 1249 , 8 + 1279 , 21 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 logger . debug ( " Node " + endpoint + " state normal , token " + tokens ) ; 
 
 if ( tokenMetadata . isMember ( endpoint ) ) 
 + { 
 logger . info ( " Node " + endpoint + " state jump to normal " ) ; 
 
 + if ( ! isClientMode ) 
 + { 
 + for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) 
 + subscriber . onUp ( endpoint ) ; 
 + } 
 + } 
 + else if ( ! isClientMode ) 
 + { 
 + for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) 
 + subscriber . onJoinCluster ( endpoint ) ; 
 + } 
 + 
 / / Order Matters , TM . updateHostID ( ) should be called before TM . updateNormalToken ( ) , ( see CASSANDRA - 4300 ) . 
 if ( Gossiper . instance . usesHostId ( endpoint ) ) 
 tokenMetadata . updateHostId ( Gossiper . instance . getHostId ( endpoint ) , endpoint ) ; 
 @ @ - 1344 , 8 + 1387 , 16 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 SystemTable . updateLocalTokens ( Collections . < Token > emptyList ( ) , localTokensToRemove ) ; 
 
 if ( tokenMetadata . isMoving ( endpoint ) ) / / if endpoint was moving to a new token 
 + { 
 tokenMetadata . removeFromMoving ( endpoint ) ; 
 
 + if ( ! isClientMode ) 
 + { 
 + for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) 
 + subscriber . onMove ( endpoint ) ; 
 + } 
 + } 
 + 
 calculatePendingRanges ( ) ; 
 } 
 
 @ @ - 1504 , 6 + 1555 , 11 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 Gossiper . instance . removeEndpoint ( endpoint ) ; 
 tokenMetadata . removeEndpoint ( endpoint ) ; 
 tokenMetadata . removeBootstrapTokens ( tokens ) ; 
 + if ( ! isClientMode ) 
 + { 
 + for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) 
 + subscriber . onLeaveCluster ( endpoint ) ; 
 + } 
 calculatePendingRanges ( ) ; 
 if ( ! isClientMode ) 
 { 
 @ @ - 1856 , 6 + 1912 , 11 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 public void onDead ( InetAddress endpoint , EndpointState state ) 
 { 
 MessagingService . instance ( ) . convict ( endpoint ) ; 
 + if ( ! isClientMode ) 
 + { 
 + for ( IEndpointLifecycleSubscriber subscriber : lifecycleSubscribers ) 
 + subscriber . onDown ( endpoint ) ; 
 + } 
 } 
 
 public void onRestart ( InetAddress endpoint , EndpointState state ) 
 diff - - git a / src / java / org / apache / cassandra / transport / Event . java b / src / java / org / apache / cassandra / transport / Event . java 
 index 855049d . . 33b08f4 100644 
 - - - a / src / java / org / apache / cassandra / transport / Event . java 
 + + + b / src / java / org / apache / cassandra / transport / Event . java 
 @ @ - 58 , 7 + 58 , 7 @ @ public abstract class Event 
 
 public static class TopologyChange extends Event 
 { 
 - public enum Change { NEW _ NODE , REMOVED _ NODE } 
 + public enum Change { NEW _ NODE , REMOVED _ NODE , MOVED _ NODE } 
 
 public final Change change ; 
 public final InetSocketAddress node ; 
 @ @ - 80 , 6 + 80 , 11 @ @ public abstract class Event 
 return new TopologyChange ( Change . REMOVED _ NODE , new InetSocketAddress ( host , port ) ) ; 
 } 
 
 + public static TopologyChange movedNode ( InetAddress host , int port ) 
 + { 
 + return new TopologyChange ( Change . MOVED _ NODE , new InetSocketAddress ( host , port ) ) ; 
 + } 
 + 
 / / Assumes the type has already by been deserialized 
 private static TopologyChange deserializeEvent ( ChannelBuffer cb ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java 
 index e820554 . . e629ca4 100644 
 - - - a / src / java / org / apache / cassandra / transport / Server . java 
 + + + b / src / java / org / apache / cassandra / transport / Server . java 
 @ @ - 35 , 10 + 35 , 10 @ @ import org . jboss . netty . logging . Slf4JLoggerFactory ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import org . apache . cassandra . gms . * ; 
 import org . apache . cassandra . service . CassandraDaemon ; 
 import org . apache . cassandra . service . IMigrationListener ; 
 import org . apache . cassandra . service . MigrationManager ; 
 + import org . apache . cassandra . service . IEndpointLifecycleSubscriber ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . transport . messages . EventMessage ; 
 
 @ @ - 63 , 7 + 63 , 7 @ @ public class Server implements CassandraDaemon . Server 
 { 
 this . socket = socket ; 
 EventNotifier notifier = new EventNotifier ( this ) ; 
 - Gossiper . instance . register ( notifier ) ; 
 + StorageService . instance . register ( notifier ) ; 
 MigrationManager . instance . register ( notifier ) ; 
 } 
 
 @ @ - 203 , 7 + 203 , 7 @ @ public class Server implements CassandraDaemon . Server 
 } 
 } 
 
 - private static class EventNotifier implements IEndpointStateChangeSubscriber , IMigrationListener 
 + private static class EventNotifier implements IEndpointLifecycleSubscriber , IMigrationListener 
 { 
 private final Server server ; 
 
 @ @ - 227 , 33 + 227 , 29 @ @ public class Server implements CassandraDaemon . Server 
 } 
 } 
 
 - public void onJoin ( InetAddress endpoint , EndpointState epState ) 
 + public void onJoinCluster ( InetAddress endpoint ) 
 { 
 server . connectionTracker . send ( Event . TopologyChange . newNode ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; 
 } 
 
 - public void onChange ( InetAddress endpoint , ApplicationState state , VersionedValue value ) 
 + public void onLeaveCluster ( InetAddress endpoint ) 
 { 
 + server . connectionTracker . send ( Event . TopologyChange . removedNode ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; 
 } 
 
 - public void onAlive ( InetAddress endpoint , EndpointState state ) 
 - { 
 - server . connectionTracker . send ( Event . StatusChange . nodeUp ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; 
 - } 
 - 
 - public void onDead ( InetAddress endpoint , EndpointState state ) 
 + public void onMove ( InetAddress endpoint ) 
 { 
 - server . connectionTracker . send ( Event . StatusChange . nodeDown ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; 
 + server . connectionTracker . send ( Event . TopologyChange . movedNode ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; 
 } 
 
 - public void onRemove ( InetAddress endpoint ) 
 + public void onUp ( InetAddress endpoint ) 
 { 
 - server . connectionTracker . send ( Event . TopologyChange . removedNode ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; 
 + server . connectionTracker . send ( Event . StatusChange . nodeUp ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; 
 } 
 
 - public void onRestart ( InetAddress endpoint , EndpointState state ) 
 + public void onDown ( InetAddress endpoint ) 
 { 
 - server . connectionTracker . send ( Event . StatusChange . nodeUp ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; 
 + server . connectionTracker . send ( Event . StatusChange . nodeDown ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; 
 } 
 
 public void onCreateKeyspace ( String ksName ) 
 diff - - git a / test / unit / org / apache / cassandra / service / AntiEntropyServiceTestAbstract . java b / test / unit / org / apache / cassandra / service / AntiEntropyServiceTestAbstract . java 
 index 87cc910 . . ef7a2ab 100644 
 - - - a / test / unit / org / apache / cassandra / service / AntiEntropyServiceTestAbstract . java 
 + + + b / test / unit / org / apache / cassandra / service / AntiEntropyServiceTestAbstract . java 
 @ @ - 79 , 7 + 79 , 6 @ @ public abstract class AntiEntropyServiceTestAbstract extends SchemaLoader 
 init ( ) ; 
 
 LOCAL = FBUtilities . getBroadcastAddress ( ) ; 
 - StorageService . instance . initServer ( 0 ) ; 
 / / generate a fake endpoint for which we can spoof receiving / sending trees 
 REMOTE = InetAddress . getByName ( " 127 . 0 . 0 . 2 " ) ; 
 store = null ;
