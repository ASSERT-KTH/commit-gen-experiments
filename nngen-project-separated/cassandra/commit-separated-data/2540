BLEU SCORE: 0.018738883683389617

TEST MSG: Don ' t shut MessagingService down when replacing a node .
GENERATED MSG: Fix shutdown of binary protocol server

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 74ddcfd . . 69e9d37 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 10 , 6 + 10 , 7 @ @ <nl> * Fix CQLSH parsing of functions and BLOB literals ( CASSANDRA - 7018 ) <nl> * Require nodetool rebuild _ index to specify index names ( CASSANDRA - 7038 ) <nl> * Ensure that batchlog and hint timeouts do not produce hints ( CASSANDRA - 7058 ) <nl> + * Don ' t shut MessagingService down when replacing a node ( CASSANDRA - 6476 ) <nl> <nl> <nl> 1 . 2 . 16 <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index 3f90d7f . . 5e4a117 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 471 , 6 + 471 , 11 @ @ public final class MessagingService implements MessagingServiceMBean <nl> } <nl> } <nl> <nl> + public boolean isListening ( ) <nl> + { <nl> + return listenGate . isSignaled ( ) ; <nl> + } <nl> + <nl> public void destroyConnectionPool ( InetAddress to ) <nl> { <nl> OutboundTcpConnectionPool cp = connectionManagers . get ( to ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 1e7bed4 . . 3b2d945 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 390 , 7 + 390 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> public synchronized Collection < Token > prepareReplacementInfo ( ) throws ConfigurationException <nl> { <nl> logger . info ( " Gathering node replacement information for { } " , DatabaseDescriptor . getReplaceAddress ( ) ) ; <nl> - MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; <nl> + if ( ! MessagingService . instance ( ) . isListening ( ) ) <nl> + MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; <nl> <nl> / / make magic happen <nl> Gossiper . instance . doShadowRound ( ) ; <nl> @ @ - 407 , 7 + 408 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> Collection < Token > tokens = TokenSerializer . deserialize ( getPartitioner ( ) , new DataInputStream ( new ByteArrayInputStream ( getApplicationStateValue ( DatabaseDescriptor . getReplaceAddress ( ) , ApplicationState . TOKENS ) ) ) ) ; <nl> <nl> SystemTable . setLocalHostId ( hostId ) ; / / use the replacee ' s host Id as our own so we receive hints , etc <nl> - MessagingService . instance ( ) . shutdown ( ) ; <nl> Gossiper . instance . resetEndpointStateMap ( ) ; / / clean up since we have what we need <nl> return tokens ; <nl> } <nl> @ @ - 435 , 7 + 435 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> break outer ; <nl> } <nl> } <nl> - <nl> / / sleep until any schema migrations have finished <nl> while ( ! MigrationManager . isReadyForBootstrap ( ) ) <nl> { <nl> @ @ - 464 , 7 + 463 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> Gossiper . instance . start ( ( int ) ( System . currentTimeMillis ( ) / 1000 ) ) ; / / needed for node - ring gathering . <nl> Gossiper . instance . addLocalApplicationState ( ApplicationState . NET _ VERSION , valueFactory . networkVersion ( ) ) ; <nl> <nl> - MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; <nl> + if ( ! MessagingService . instance ( ) . isListening ( ) ) <nl> + MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; <nl> try <nl> { <nl> Thread . sleep ( ringDelay ) ; <nl> @ @ - 631 , 7 + 631 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> Schema . instance . updateVersionAndAnnounce ( ) ; / / Ensure we know our own actual Schema UUID in preparation for updates <nl> <nl> <nl> - MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; <nl> + if ( ! MessagingService . instance ( ) . isListening ( ) ) <nl> + MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; <nl> LoadBroadcaster . instance . startBroadcasting ( ) ; <nl> <nl> HintedHandOffManager . instance . start ( ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnIndex . java b / src / java / org / apache / cassandra / db / ColumnIndex . java <nl> index bcd0eef . . 6eb8833 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnIndex . java <nl> @ @ - 42 , 6 + 42 , 8 @ @ public class ColumnIndex <nl> <nl> private ColumnIndex ( List < IndexHelper . IndexInfo > columnsIndex , IFilter bloomFilter ) <nl> { <nl> + assert columnsIndex ! = null ; <nl> + <nl> this . columnsIndex = columnsIndex ; <nl> this . bloomFilter = bloomFilter ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / RowIndexEntry . java b / src / java / org / apache / cassandra / db / RowIndexEntry . java <nl> index a831498 . . 2eda558 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RowIndexEntry . java <nl> + + + b / src / java / org / apache / cassandra / db / RowIndexEntry . java <nl> @ @ - 50 , 12 + 50 , 22 @ @ public class RowIndexEntry implements IMeasurableMemory <nl> <nl> public static RowIndexEntry create ( long position , DeletionInfo deletionInfo , ColumnIndex index ) <nl> { <nl> - if ( index ! = null & & index . columnsIndex ! = null & & index . columnsIndex . size ( ) > 1 ) <nl> + assert index ! = null ; <nl> + assert deletionInfo ! = null ; <nl> + <nl> + / / we only consider the columns summary when determining whether to create an IndexedEntry , <nl> + / / since if there are insufficient columns to be worth indexing we ' re going to seek to <nl> + / / the beginning of the row anyway , so we might as well read the tombstone there as well . <nl> + if ( index . columnsIndex . size ( ) > 1 ) <nl> return new IndexedEntry ( position , deletionInfo , index . columnsIndex , index . bloomFilter ) ; <nl> else <nl> return new RowIndexEntry ( position ) ; <nl> } <nl> <nl> + / * * <nl> + * @ return true if this index entry contains the row - level tombstone and column summary . Otherwise , <nl> + * caller should fetch these from the row header . <nl> + * / <nl> public boolean isIndexed ( ) <nl> { <nl> return ! columnsIndex ( ) . isEmpty ( ) ; <nl> @ @ - 68 , 7 + 78 , 7 @ @ public class RowIndexEntry implements IMeasurableMemory <nl> <nl> public List < IndexHelper . IndexInfo > columnsIndex ( ) <nl> { <nl> - return Collections . < IndexHelper . IndexInfo > emptyList ( ) ; <nl> + return Collections . emptyList ( ) ; <nl> } <nl> <nl> public IFilter bloomFilter ( ) <nl> @ @ - 89 , 7 + 99 , 7 @ @ public class RowIndexEntry implements IMeasurableMemory <nl> dos . writeLong ( rie . position ) ; <nl> if ( rie . isIndexed ( ) ) <nl> { <nl> - dos . writeInt ( ( ( IndexedEntry ) rie ) . serializedSize ( ) ) ; <nl> + dos . writeInt ( rie . serializedSize ( ) ) ; <nl> DeletionInfo . serializer ( ) . serializeForSSTable ( rie . deletionInfo ( ) , dos ) ; <nl> dos . writeInt ( rie . columnsIndex ( ) . size ( ) ) ; <nl> for ( IndexHelper . IndexInfo info : rie . columnsIndex ( ) ) <nl> @ @ - 102 , 18 + 112 , 6 @ @ public class RowIndexEntry implements IMeasurableMemory <nl> } <nl> } <nl> <nl> - public RowIndexEntry deserializePositionOnly ( DataInput dis , Descriptor . Version version ) throws IOException <nl> - { <nl> - long position = dis . readLong ( ) ; <nl> - if ( version . hasPromotedIndexes ) <nl> - { <nl> - int size = dis . readInt ( ) ; <nl> - if ( size > 0 ) <nl> - FileUtils . skipBytesFully ( dis , size ) ; <nl> - } <nl> - return new RowIndexEntry ( position ) ; <nl> - } <nl> - <nl> public RowIndexEntry deserialize ( DataInput dis , Descriptor . Version version ) throws IOException <nl> { <nl> long position = dis . readLong ( ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java b / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java <nl> index fc18b88 . . a394644 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java <nl> @ @ - 683 , 7 + 683 , 7 @ @ public class ColumnFamilyStoreTest extends SchemaLoader <nl> <nl> assertRowAndColCount ( 1 , 6 , scfName , false , cfs . getRangeSlice ( scfName , Util . range ( " f " , " g " ) , 100 , ThriftValidation . asIFilter ( sp , cfs . getComparator ( ) ) , null ) ) ; <nl> <nl> - / / deeleet . <nl> + / / delete <nl> RowMutation rm = new RowMutation ( table . name , key . key ) ; <nl> rm . delete ( new QueryPath ( cfName , scfName ) , 2 ) ; <nl> rm . apply ( ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java b / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java <nl> index 1bc846b . . c531461 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java <nl> @ @ - 164 , 10 + 164 , 6 @ @ public class RangeTombstoneTest extends SchemaLoader <nl> return ByteBufferUtil . bytes ( i ) ; <nl> } <nl> <nl> - private static void insertData ( ColumnFamilyStore cfs , String key ) throws Exception <nl> - { <nl> - } <nl> - <nl> private static void add ( RowMutation rm , int value , long timestamp ) <nl> { <nl> rm . add ( new QueryPath ( CFNAME , null , b ( value ) ) , b ( value ) , timestamp ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 74ddcfd . . 69e9d37 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 10 , 6 + 10 , 7 @ @ 
 * Fix CQLSH parsing of functions and BLOB literals ( CASSANDRA - 7018 ) 
 * Require nodetool rebuild _ index to specify index names ( CASSANDRA - 7038 ) 
 * Ensure that batchlog and hint timeouts do not produce hints ( CASSANDRA - 7058 ) 
 + * Don ' t shut MessagingService down when replacing a node ( CASSANDRA - 6476 ) 
 
 
 1 . 2 . 16 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index 3f90d7f . . 5e4a117 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 471 , 6 + 471 , 11 @ @ public final class MessagingService implements MessagingServiceMBean 
 } 
 } 
 
 + public boolean isListening ( ) 
 + { 
 + return listenGate . isSignaled ( ) ; 
 + } 
 + 
 public void destroyConnectionPool ( InetAddress to ) 
 { 
 OutboundTcpConnectionPool cp = connectionManagers . get ( to ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 1e7bed4 . . 3b2d945 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 390 , 7 + 390 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 public synchronized Collection < Token > prepareReplacementInfo ( ) throws ConfigurationException 
 { 
 logger . info ( " Gathering node replacement information for { } " , DatabaseDescriptor . getReplaceAddress ( ) ) ; 
 - MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; 
 + if ( ! MessagingService . instance ( ) . isListening ( ) ) 
 + MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; 
 
 / / make magic happen 
 Gossiper . instance . doShadowRound ( ) ; 
 @ @ - 407 , 7 + 408 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 Collection < Token > tokens = TokenSerializer . deserialize ( getPartitioner ( ) , new DataInputStream ( new ByteArrayInputStream ( getApplicationStateValue ( DatabaseDescriptor . getReplaceAddress ( ) , ApplicationState . TOKENS ) ) ) ) ; 
 
 SystemTable . setLocalHostId ( hostId ) ; / / use the replacee ' s host Id as our own so we receive hints , etc 
 - MessagingService . instance ( ) . shutdown ( ) ; 
 Gossiper . instance . resetEndpointStateMap ( ) ; / / clean up since we have what we need 
 return tokens ; 
 } 
 @ @ - 435 , 7 + 435 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 break outer ; 
 } 
 } 
 - 
 / / sleep until any schema migrations have finished 
 while ( ! MigrationManager . isReadyForBootstrap ( ) ) 
 { 
 @ @ - 464 , 7 + 463 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 Gossiper . instance . start ( ( int ) ( System . currentTimeMillis ( ) / 1000 ) ) ; / / needed for node - ring gathering . 
 Gossiper . instance . addLocalApplicationState ( ApplicationState . NET _ VERSION , valueFactory . networkVersion ( ) ) ; 
 
 - MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; 
 + if ( ! MessagingService . instance ( ) . isListening ( ) ) 
 + MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; 
 try 
 { 
 Thread . sleep ( ringDelay ) ; 
 @ @ - 631 , 7 + 631 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 Schema . instance . updateVersionAndAnnounce ( ) ; / / Ensure we know our own actual Schema UUID in preparation for updates 
 
 
 - MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; 
 + if ( ! MessagingService . instance ( ) . isListening ( ) ) 
 + MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; 
 LoadBroadcaster . instance . startBroadcasting ( ) ; 
 
 HintedHandOffManager . instance . start ( ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnIndex . java b / src / java / org / apache / cassandra / db / ColumnIndex . java 
 index bcd0eef . . 6eb8833 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnIndex . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnIndex . java 
 @ @ - 42 , 6 + 42 , 8 @ @ public class ColumnIndex 
 
 private ColumnIndex ( List < IndexHelper . IndexInfo > columnsIndex , IFilter bloomFilter ) 
 { 
 + assert columnsIndex ! = null ; 
 + 
 this . columnsIndex = columnsIndex ; 
 this . bloomFilter = bloomFilter ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / RowIndexEntry . java b / src / java / org / apache / cassandra / db / RowIndexEntry . java 
 index a831498 . . 2eda558 100644 
 - - - a / src / java / org / apache / cassandra / db / RowIndexEntry . java 
 + + + b / src / java / org / apache / cassandra / db / RowIndexEntry . java 
 @ @ - 50 , 12 + 50 , 22 @ @ public class RowIndexEntry implements IMeasurableMemory 
 
 public static RowIndexEntry create ( long position , DeletionInfo deletionInfo , ColumnIndex index ) 
 { 
 - if ( index ! = null & & index . columnsIndex ! = null & & index . columnsIndex . size ( ) > 1 ) 
 + assert index ! = null ; 
 + assert deletionInfo ! = null ; 
 + 
 + / / we only consider the columns summary when determining whether to create an IndexedEntry , 
 + / / since if there are insufficient columns to be worth indexing we ' re going to seek to 
 + / / the beginning of the row anyway , so we might as well read the tombstone there as well . 
 + if ( index . columnsIndex . size ( ) > 1 ) 
 return new IndexedEntry ( position , deletionInfo , index . columnsIndex , index . bloomFilter ) ; 
 else 
 return new RowIndexEntry ( position ) ; 
 } 
 
 + / * * 
 + * @ return true if this index entry contains the row - level tombstone and column summary . Otherwise , 
 + * caller should fetch these from the row header . 
 + * / 
 public boolean isIndexed ( ) 
 { 
 return ! columnsIndex ( ) . isEmpty ( ) ; 
 @ @ - 68 , 7 + 78 , 7 @ @ public class RowIndexEntry implements IMeasurableMemory 
 
 public List < IndexHelper . IndexInfo > columnsIndex ( ) 
 { 
 - return Collections . < IndexHelper . IndexInfo > emptyList ( ) ; 
 + return Collections . emptyList ( ) ; 
 } 
 
 public IFilter bloomFilter ( ) 
 @ @ - 89 , 7 + 99 , 7 @ @ public class RowIndexEntry implements IMeasurableMemory 
 dos . writeLong ( rie . position ) ; 
 if ( rie . isIndexed ( ) ) 
 { 
 - dos . writeInt ( ( ( IndexedEntry ) rie ) . serializedSize ( ) ) ; 
 + dos . writeInt ( rie . serializedSize ( ) ) ; 
 DeletionInfo . serializer ( ) . serializeForSSTable ( rie . deletionInfo ( ) , dos ) ; 
 dos . writeInt ( rie . columnsIndex ( ) . size ( ) ) ; 
 for ( IndexHelper . IndexInfo info : rie . columnsIndex ( ) ) 
 @ @ - 102 , 18 + 112 , 6 @ @ public class RowIndexEntry implements IMeasurableMemory 
 } 
 } 
 
 - public RowIndexEntry deserializePositionOnly ( DataInput dis , Descriptor . Version version ) throws IOException 
 - { 
 - long position = dis . readLong ( ) ; 
 - if ( version . hasPromotedIndexes ) 
 - { 
 - int size = dis . readInt ( ) ; 
 - if ( size > 0 ) 
 - FileUtils . skipBytesFully ( dis , size ) ; 
 - } 
 - return new RowIndexEntry ( position ) ; 
 - } 
 - 
 public RowIndexEntry deserialize ( DataInput dis , Descriptor . Version version ) throws IOException 
 { 
 long position = dis . readLong ( ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java b / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java 
 index fc18b88 . . a394644 100644 
 - - - a / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java 
 + + + b / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java 
 @ @ - 683 , 7 + 683 , 7 @ @ public class ColumnFamilyStoreTest extends SchemaLoader 
 
 assertRowAndColCount ( 1 , 6 , scfName , false , cfs . getRangeSlice ( scfName , Util . range ( " f " , " g " ) , 100 , ThriftValidation . asIFilter ( sp , cfs . getComparator ( ) ) , null ) ) ; 
 
 - / / deeleet . 
 + / / delete 
 RowMutation rm = new RowMutation ( table . name , key . key ) ; 
 rm . delete ( new QueryPath ( cfName , scfName ) , 2 ) ; 
 rm . apply ( ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java b / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java 
 index 1bc846b . . c531461 100644 
 - - - a / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java 
 @ @ - 164 , 10 + 164 , 6 @ @ public class RangeTombstoneTest extends SchemaLoader 
 return ByteBufferUtil . bytes ( i ) ; 
 } 
 
 - private static void insertData ( ColumnFamilyStore cfs , String key ) throws Exception 
 - { 
 - } 
 - 
 private static void add ( RowMutation rm , int value , long timestamp ) 
 { 
 rm . add ( new QueryPath ( CFNAME , null , b ( value ) ) , b ( value ) , timestamp ) ;
