BLEU SCORE: 0.028465126651392333

TEST MSG: add airline and javax . inject jars
GENERATED MSG: CQL3 : fix range query containing unqueryed results

TEST DIFF (one line): diff - - git a / lib / airline - 0 . 6 . jar b / lib / airline - 0 . 6 . jar <nl> new file mode 100644 <nl> index 0000000 . . a35ae79 <nl> Binary files / dev / null and b / lib / airline - 0 . 6 . jar differ <nl> diff - - git a / lib / javax . inject . jar b / lib / javax . inject . jar <nl> new file mode 100644 <nl> index 0000000 . . 1ff61ce <nl> Binary files / dev / null and b / lib / javax . inject . jar differ <nl> diff - - git a / lib / licenses / airline - 0 . 6 . txt b / lib / licenses / airline - 0 . 6 . txt <nl> new file mode 100644 <nl> index 0000000 . . d645695 <nl> - - - / dev / null <nl> + + + b / lib / licenses / airline - 0 . 6 . txt <nl> @ @ - 0 , 0 + 1 , 202 @ @ <nl> + <nl> + Apache License <nl> + Version 2 . 0 , January 2004 <nl> + http : / / www . apache . org / licenses / <nl> + <nl> + TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION <nl> + <nl> + 1 . Definitions . <nl> + <nl> + " License " shall mean the terms and conditions for use , reproduction , <nl> + and distribution as defined by Sections 1 through 9 of this document . <nl> + <nl> + " Licensor " shall mean the copyright owner or entity authorized by <nl> + the copyright owner that is granting the License . <nl> + <nl> + " Legal Entity " shall mean the union of the acting entity and all <nl> + other entities that control , are controlled by , or are under common <nl> + control with that entity . For the purposes of this definition , <nl> + " control " means ( i ) the power , direct or indirect , to cause the <nl> + direction or management of such entity , whether by contract or <nl> + otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the <nl> + outstanding shares , or ( iii ) beneficial ownership of such entity . <nl> + <nl> + " You " ( or " Your " ) shall mean an individual or Legal Entity <nl> + exercising permissions granted by this License . <nl> + <nl> + " Source " form shall mean the preferred form for making modifications , <nl> + including but not limited to software source code , documentation <nl> + source , and configuration files . <nl> + <nl> + " Object " form shall mean any form resulting from mechanical <nl> + transformation or translation of a Source form , including but <nl> + not limited to compiled object code , generated documentation , <nl> + and conversions to other media types . <nl> + <nl> + " Work " shall mean the work of authorship , whether in Source or <nl> + Object form , made available under the License , as indicated by a <nl> + copyright notice that is included in or attached to the work <nl> + ( an example is provided in the Appendix below ) . <nl> + <nl> + " Derivative Works " shall mean any work , whether in Source or Object <nl> + form , that is based on ( or derived from ) the Work and for which the <nl> + editorial revisions , annotations , elaborations , or other modifications <nl> + represent , as a whole , an original work of authorship . For the purposes <nl> + of this License , Derivative Works shall not include works that remain <nl> + separable from , or merely link ( or bind by name ) to the interfaces of , <nl> + the Work and Derivative Works thereof . <nl> + <nl> + " Contribution " shall mean any work of authorship , including <nl> + the original version of the Work and any modifications or additions <nl> + to that Work or Derivative Works thereof , that is intentionally <nl> + submitted to Licensor for inclusion in the Work by the copyright owner <nl> + or by an individual or Legal Entity authorized to submit on behalf of <nl> + the copyright owner . For the purposes of this definition , " submitted " <nl> + means any form of electronic , verbal , or written communication sent <nl> + to the Licensor or its representatives , including but not limited to <nl> + communication on electronic mailing lists , source code control systems , <nl> + and issue tracking systems that are managed by , or on behalf of , the <nl> + Licensor for the purpose of discussing and improving the Work , but <nl> + excluding communication that is conspicuously marked or otherwise <nl> + designated in writing by the copyright owner as " Not a Contribution . " <nl> + <nl> + " Contributor " shall mean Licensor and any individual or Legal Entity <nl> + on behalf of whom a Contribution has been received by Licensor and <nl> + subsequently incorporated within the Work . <nl> + <nl> + 2 . Grant of Copyright License . Subject to the terms and conditions of <nl> + this License , each Contributor hereby grants to You a perpetual , <nl> + worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> + copyright license to reproduce , prepare Derivative Works of , <nl> + publicly display , publicly perform , sublicense , and distribute the <nl> + Work and such Derivative Works in Source or Object form . <nl> + <nl> + 3 . Grant of Patent License . Subject to the terms and conditions of <nl> + this License , each Contributor hereby grants to You a perpetual , <nl> + worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> + ( except as stated in this section ) patent license to make , have made , <nl> + use , offer to sell , sell , import , and otherwise transfer the Work , <nl> + where such license applies only to those patent claims licensable <nl> + by such Contributor that are necessarily infringed by their <nl> + Contribution ( s ) alone or by combination of their Contribution ( s ) <nl> + with the Work to which such Contribution ( s ) was submitted . If You <nl> + institute patent litigation against any entity ( including a <nl> + cross - claim or counterclaim in a lawsuit ) alleging that the Work <nl> + or a Contribution incorporated within the Work constitutes direct <nl> + or contributory patent infringement , then any patent licenses <nl> + granted to You under this License for that Work shall terminate <nl> + as of the date such litigation is filed . <nl> + <nl> + 4 . Redistribution . You may reproduce and distribute copies of the <nl> + Work or Derivative Works thereof in any medium , with or without <nl> + modifications , and in Source or Object form , provided that You <nl> + meet the following conditions : <nl> + <nl> + ( a ) You must give any other recipients of the Work or <nl> + Derivative Works a copy of this License ; and <nl> + <nl> + ( b ) You must cause any modified files to carry prominent notices <nl> + stating that You changed the files ; and <nl> + <nl> + ( c ) You must retain , in the Source form of any Derivative Works <nl> + that You distribute , all copyright , patent , trademark , and <nl> + attribution notices from the Source form of the Work , <nl> + excluding those notices that do not pertain to any part of <nl> + the Derivative Works ; and <nl> + <nl> + ( d ) If the Work includes a " NOTICE " text file as part of its <nl> + distribution , then any Derivative Works that You distribute must <nl> + include a readable copy of the attribution notices contained <nl> + within such NOTICE file , excluding those notices that do not <nl> + pertain to any part of the Derivative Works , in at least one <nl> + of the following places : within a NOTICE text file distributed <nl> + as part of the Derivative Works ; within the Source form or <nl> + documentation , if provided along with the Derivative Works ; or , <nl> + within a display generated by the Derivative Works , if and <nl> + wherever such third - party notices normally appear . The contents <nl> + of the NOTICE file are for informational purposes only and <nl> + do not modify the License . You may add Your own attribution <nl> + notices within Derivative Works that You distribute , alongside <nl> + or as an addendum to the NOTICE text from the Work , provided <nl> + that such additional attribution notices cannot be construed <nl> + as modifying the License . <nl> + <nl> + You may add Your own copyright statement to Your modifications and <nl> + may provide additional or different license terms and conditions <nl> + for use , reproduction , or distribution of Your modifications , or <nl> + for any such Derivative Works as a whole , provided Your use , <nl> + reproduction , and distribution of the Work otherwise complies with <nl> + the conditions stated in this License . <nl> + <nl> + 5 . Submission of Contributions . Unless You explicitly state otherwise , <nl> + any Contribution intentionally submitted for inclusion in the Work <nl> + by You to the Licensor shall be under the terms and conditions of <nl> + this License , without any additional terms or conditions . <nl> + Notwithstanding the above , nothing herein shall supersede or modify <nl> + the terms of any separate license agreement you may have executed <nl> + with Licensor regarding such Contributions . <nl> + <nl> + 6 . Trademarks . This License does not grant permission to use the trade <nl> + names , trademarks , service marks , or product names of the Licensor , <nl> + except as required for reasonable and customary use in describing the <nl> + origin of the Work and reproducing the content of the NOTICE file . <nl> + <nl> + 7 . Disclaimer of Warranty . Unless required by applicable law or <nl> + agreed to in writing , Licensor provides the Work ( and each <nl> + Contributor provides its Contributions ) on an " AS IS " BASIS , <nl> + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or <nl> + implied , including , without limitation , any warranties or conditions <nl> + of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A <nl> + PARTICULAR PURPOSE . You are solely responsible for determining the <nl> + appropriateness of using or redistributing the Work and assume any <nl> + risks associated with Your exercise of permissions under this License . <nl> + <nl> + 8 . Limitation of Liability . In no event and under no legal theory , <nl> + whether in tort ( including negligence ) , contract , or otherwise , <nl> + unless required by applicable law ( such as deliberate and grossly <nl> + negligent acts ) or agreed to in writing , shall any Contributor be <nl> + liable to You for damages , including any direct , indirect , special , <nl> + incidental , or consequential damages of any character arising as a <nl> + result of this License or out of the use or inability to use the <nl> + Work ( including but not limited to damages for loss of goodwill , <nl> + work stoppage , computer failure or malfunction , or any and all <nl> + other commercial damages or losses ) , even if such Contributor <nl> + has been advised of the possibility of such damages . <nl> + <nl> + 9 . Accepting Warranty or Additional Liability . While redistributing <nl> + the Work or Derivative Works thereof , You may choose to offer , <nl> + and charge a fee for , acceptance of support , warranty , indemnity , <nl> + or other liability obligations and / or rights consistent with this <nl> + License . However , in accepting such obligations , You may act only <nl> + on Your own behalf and on Your sole responsibility , not on behalf <nl> + of any other Contributor , and only if You agree to indemnify , <nl> + defend , and hold each Contributor harmless for any liability <nl> + incurred by , or claims asserted against , such Contributor by reason <nl> + of your accepting any such warranty or additional liability . <nl> + <nl> + END OF TERMS AND CONDITIONS <nl> + <nl> + APPENDIX : How to apply the Apache License to your work . <nl> + <nl> + To apply the Apache License to your work , attach the following <nl> + boilerplate notice , with the fields enclosed by brackets " [ ] " <nl> + replaced with your own identifying information . ( Don ' t include <nl> + the brackets ! ) The text should be enclosed in the appropriate <nl> + comment syntax for the file format . We also recommend that a <nl> + file or class name and description of purpose be included on the <nl> + same " printed page " as the copyright notice for easier <nl> + identification within third - party archives . <nl> + <nl> + Copyright [ yyyy ] [ name of copyright owner ] <nl> + <nl> + Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + you may not use this file except in compliance with the License . <nl> + You may obtain a copy of the License at <nl> + <nl> + http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + <nl> + Unless required by applicable law or agreed to in writing , software <nl> + distributed under the License is distributed on an " AS IS " BASIS , <nl> + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + See the License for the specific language governing permissions and <nl> + limitations under the License . <nl> diff - - git a / lib / licenses / javax . inject . txt b / lib / licenses / javax . inject . txt <nl> new file mode 100644 <nl> index 0000000 . . d645695 <nl> - - - / dev / null <nl> + + + b / lib / licenses / javax . inject . txt <nl> @ @ - 0 , 0 + 1 , 202 @ @ <nl> + <nl> + Apache License <nl> + Version 2 . 0 , January 2004 <nl> + http : / / www . apache . org / licenses / <nl> + <nl> + TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION <nl> + <nl> + 1 . Definitions . <nl> + <nl> + " License " shall mean the terms and conditions for use , reproduction , <nl> + and distribution as defined by Sections 1 through 9 of this document . <nl> + <nl> + " Licensor " shall mean the copyright owner or entity authorized by <nl> + the copyright owner that is granting the License . <nl> + <nl> + " Legal Entity " shall mean the union of the acting entity and all <nl> + other entities that control , are controlled by , or are under common <nl> + control with that entity . For the purposes of this definition , <nl> + " control " means ( i ) the power , direct or indirect , to cause the <nl> + direction or management of such entity , whether by contract or <nl> + otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the <nl> + outstanding shares , or ( iii ) beneficial ownership of such entity . <nl> + <nl> + " You " ( or " Your " ) shall mean an individual or Legal Entity <nl> + exercising permissions granted by this License . <nl> + <nl> + " Source " form shall mean the preferred form for making modifications , <nl> + including but not limited to software source code , documentation <nl> + source , and configuration files . <nl> + <nl> + " Object " form shall mean any form resulting from mechanical <nl> + transformation or translation of a Source form , including but <nl> + not limited to compiled object code , generated documentation , <nl> + and conversions to other media types . <nl> + <nl> + " Work " shall mean the work of authorship , whether in Source or <nl> + Object form , made available under the License , as indicated by a <nl> + copyright notice that is included in or attached to the work <nl> + ( an example is provided in the Appendix below ) . <nl> + <nl> + " Derivative Works " shall mean any work , whether in Source or Object <nl> + form , that is based on ( or derived from ) the Work and for which the <nl> + editorial revisions , annotations , elaborations , or other modifications <nl> + represent , as a whole , an original work of authorship . For the purposes <nl> + of this License , Derivative Works shall not include works that remain <nl> + separable from , or merely link ( or bind by name ) to the interfaces of , <nl> + the Work and Derivative Works thereof . <nl> + <nl> + " Contribution " shall mean any work of authorship , including <nl> + the original version of the Work and any modifications or additions <nl> + to that Work or Derivative Works thereof , that is intentionally <nl> + submitted to Licensor for inclusion in the Work by the copyright owner <nl> + or by an individual or Legal Entity authorized to submit on behalf of <nl> + the copyright owner . For the purposes of this definition , " submitted " <nl> + means any form of electronic , verbal , or written communication sent <nl> + to the Licensor or its representatives , including but not limited to <nl> + communication on electronic mailing lists , source code control systems , <nl> + and issue tracking systems that are managed by , or on behalf of , the <nl> + Licensor for the purpose of discussing and improving the Work , but <nl> + excluding communication that is conspicuously marked or otherwise <nl> + designated in writing by the copyright owner as " Not a Contribution . " <nl> + <nl> + " Contributor " shall mean Licensor and any individual or Legal Entity <nl> + on behalf of whom a Contribution has been received by Licensor and <nl> + subsequently incorporated within the Work . <nl> + <nl> + 2 . Grant of Copyright License . Subject to the terms and conditions of <nl> + this License , each Contributor hereby grants to You a perpetual , <nl> + worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> + copyright license to reproduce , prepare Derivative Works of , <nl> + publicly display , publicly perform , sublicense , and distribute the <nl> + Work and such Derivative Works in Source or Object form . <nl> + <nl> + 3 . Grant of Patent License . Subject to the terms and conditions of <nl> + this License , each Contributor hereby grants to You a perpetual , <nl> + worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> + ( except as stated in this section ) patent license to make , have made , <nl> + use , offer to sell , sell , import , and otherwise transfer the Work , <nl> + where such license applies only to those patent claims licensable <nl> + by such Contributor that are necessarily infringed by their <nl> + Contribution ( s ) alone or by combination of their Contribution ( s ) <nl> + with the Work to which such Contribution ( s ) was submitted . If You <nl> + institute patent litigation against any entity ( including a <nl> + cross - claim or counterclaim in a lawsuit ) alleging that the Work <nl> + or a Contribution incorporated within the Work constitutes direct <nl> + or contributory patent infringement , then any patent licenses <nl> + granted to You under this License for that Work shall terminate <nl> + as of the date such litigation is filed . <nl> + <nl> + 4 . Redistribution . You may reproduce and distribute copies of the <nl> + Work or Derivative Works thereof in any medium , with or without <nl> + modifications , and in Source or Object form , provided that You <nl> + meet the following conditions : <nl> + <nl> + ( a ) You must give any other recipients of the Work or <nl> + Derivative Works a copy of this License ; and <nl> + <nl> + ( b ) You must cause any modified files to carry prominent notices <nl> + stating that You changed the files ; and <nl> + <nl> + ( c ) You must retain , in the Source form of any Derivative Works <nl> + that You distribute , all copyright , patent , trademark , and <nl> + attribution notices from the Source form of the Work , <nl> + excluding those notices that do not pertain to any part of <nl> + the Derivative Works ; and <nl> + <nl> + ( d ) If the Work includes a " NOTICE " text file as part of its <nl> + distribution , then any Derivative Works that You distribute must <nl> + include a readable copy of the attribution notices contained <nl> + within such NOTICE file , excluding those notices that do not <nl> + pertain to any part of the Derivative Works , in at least one <nl> + of the following places : within a NOTICE text file distributed <nl> + as part of the Derivative Works ; within the Source form or <nl> + documentation , if provided along with the Derivative Works ; or , <nl> + within a display generated by the Derivative Works , if and <nl> + wherever such third - party notices normally appear . The contents <nl> + of the NOTICE file are for informational purposes only and <nl> + do not modify the License . You may add Your own attribution <nl> + notices within Derivative Works that You distribute , alongside <nl> + or as an addendum to the NOTICE text from the Work , provided <nl> + that such additional attribution notices cannot be construed <nl> + as modifying the License . <nl> + <nl> + You may add Your own copyright statement to Your modifications and <nl> + may provide additional or different license terms and conditions <nl> + for use , reproduction , or distribution of Your modifications , or <nl> + for any such Derivative Works as a whole , provided Your use , <nl> + reproduction , and distribution of the Work otherwise complies with <nl> + the conditions stated in this License . <nl> + <nl> + 5 . Submission of Contributions . Unless You explicitly state otherwise , <nl> + any Contribution intentionally submitted for inclusion in the Work <nl> + by You to the Licensor shall be under the terms and conditions of <nl> + this License , without any additional terms or conditions . <nl> + Notwithstanding the above , nothing herein shall supersede or modify <nl> + the terms of any separate license agreement you may have executed <nl> + with Licensor regarding such Contributions . <nl> + <nl> + 6 . Trademarks . This License does not grant permission to use the trade <nl> + names , trademarks , service marks , or product names of the Licensor , <nl> + except as required for reasonable and customary use in describing the <nl> + origin of the Work and reproducing the content of the NOTICE file . <nl> + <nl> + 7 . Disclaimer of Warranty . Unless required by applicable law or <nl> + agreed to in writing , Licensor provides the Work ( and each <nl> + Contributor provides its Contributions ) on an " AS IS " BASIS , <nl> + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or <nl> + implied , including , without limitation , any warranties or conditions <nl> + of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A <nl> + PARTICULAR PURPOSE . You are solely responsible for determining the <nl> + appropriateness of using or redistributing the Work and assume any <nl> + risks associated with Your exercise of permissions under this License . <nl> + <nl> + 8 . Limitation of Liability . In no event and under no legal theory , <nl> + whether in tort ( including negligence ) , contract , or otherwise , <nl> + unless required by applicable law ( such as deliberate and grossly <nl> + negligent acts ) or agreed to in writing , shall any Contributor be <nl> + liable to You for damages , including any direct , indirect , special , <nl> + incidental , or consequential damages of any character arising as a <nl> + result of this License or out of the use or inability to use the <nl> + Work ( including but not limited to damages for loss of goodwill , <nl> + work stoppage , computer failure or malfunction , or any and all <nl> + other commercial damages or losses ) , even if such Contributor <nl> + has been advised of the possibility of such damages . <nl> + <nl> + 9 . Accepting Warranty or Additional Liability . While redistributing <nl> + the Work or Derivative Works thereof , You may choose to offer , <nl> + and charge a fee for , acceptance of support , warranty , indemnity , <nl> + or other liability obligations and / or rights consistent with this <nl> + License . However , in accepting such obligations , You may act only <nl> + on Your own behalf and on Your sole responsibility , not on behalf <nl> + of any other Contributor , and only if You agree to indemnify , <nl> + defend , and hold each Contributor harmless for any liability <nl> + incurred by , or claims asserted against , such Contributor by reason <nl> + of your accepting any such warranty or additional liability . <nl> + <nl> + END OF TERMS AND CONDITIONS <nl> + <nl> + APPENDIX : How to apply the Apache License to your work . <nl> + <nl> + To apply the Apache License to your work , attach the following <nl> + boilerplate notice , with the fields enclosed by brackets " [ ] " <nl> + replaced with your own identifying information . ( Don ' t include <nl> + the brackets ! ) The text should be enclosed in the appropriate <nl> + comment syntax for the file format . We also recommend that a <nl> + file or class name and description of purpose be included on the <nl> + same " printed page " as the copyright notice for easier <nl> + identification within third - party archives . <nl> + <nl> + Copyright [ yyyy ] [ name of copyright owner ] <nl> + <nl> + Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + you may not use this file except in compliance with the License . <nl> + You may obtain a copy of the License at <nl> + <nl> + http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + <nl> + Unless required by applicable law or agreed to in writing , software <nl> + distributed under the License is distributed on an " AS IS " BASIS , <nl> + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + See the License for the specific language governing permissions and <nl> + limitations under the License .
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cache / AutoSavingCache . java b / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> index 7eed2a0 . . 41b8f5d 100644 <nl> - - - a / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> + + + b / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> @ @ - 1 , 4 + 1 , 4 @ @ <nl> - / * * <nl> + / * <nl> * Licensed to the Apache Software Foundation ( ASF ) under one <nl> * or more contributor license agreements . See the NOTICE file <nl> * distributed with this work for additional information <nl> @ @ - 7 , 14 + 7 , 13 @ @ <nl> * " License " ) ; you may not use this file except in compliance <nl> * with the License . You may obtain a copy of the License at <nl> * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> * <nl> - * Unless required by applicable law or agreed to in writing , <nl> - * software distributed under the License is distributed on an <nl> - * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> - * KIND , either express or implied . See the License for the <nl> - * specific language governing permissions and limitations <nl> - * under the License . <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> * / <nl> package org . apache . cassandra . cache ; <nl> <nl> @ @ - 35 , 11 + 34 , 12 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . compaction . CompactionInfo ; <nl> import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . db . compaction . OperationType ; <nl> - import org . apache . cassandra . db . DecoratedKey ; <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . io . util . SequentialWriter ; <nl> import org . apache . cassandra . service . CacheService ; <nl> import org . apache . cassandra . service . StorageService ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . WrappedRunnable ; <nl> import org . apache . cassandra . utils . Pair ; <nl> <nl> @ @ - 53 , 15 + 53 , 19 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> protected volatile ScheduledFuture < ? > saveTask ; <nl> protected final CacheService . CacheType cacheType ; <nl> <nl> - public AutoSavingCache ( ICache < K , V > cache , CacheService . CacheType cacheType ) <nl> + private CacheSerializer < K , V > cacheLoader ; <nl> + private static final String CURRENT _ VERSION = " b " ; <nl> + <nl> + public AutoSavingCache ( ICache < K , V > cache , CacheService . CacheType cacheType , CacheSerializer < K , V > cacheloader ) <nl> { <nl> super ( cache ) ; <nl> this . cacheType = cacheType ; <nl> + this . cacheLoader = cacheloader ; <nl> } <nl> <nl> - public File getCachePath ( String ksName , String cfName ) <nl> + public File getCachePath ( String ksName , String cfName , String version ) <nl> { <nl> - return DatabaseDescriptor . getSerializedCachePath ( ksName , cfName , cacheType ) ; <nl> + return DatabaseDescriptor . getSerializedCachePath ( ksName , cfName , cacheType , version ) ; <nl> } <nl> <nl> public Writer getWriter ( int keysToSave ) <nl> @ @ - 92 , 41 + 96 , 51 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> } <nl> } <nl> <nl> - public Set < DecoratedKey > readSaved ( String ksName , String cfName ) <nl> + public int loadSaved ( ColumnFamilyStore cfs ) <nl> { <nl> - File path = getCachePath ( ksName , cfName ) ; <nl> - Set < DecoratedKey > keys = new TreeSet < DecoratedKey > ( ) ; <nl> + int count = 0 ; <nl> + long start = System . currentTimeMillis ( ) ; <nl> + File path = getCachePath ( cfs . table . name , cfs . columnFamily , null ) ; <nl> if ( path . exists ( ) ) <nl> { <nl> DataInputStream in = null ; <nl> try <nl> { <nl> - long start = System . currentTimeMillis ( ) ; <nl> + logger . info ( String . format ( " reading saved cache % s " , path ) ) ; <nl> + in = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) ) ; <nl> + Set < ByteBuffer > keys = new HashSet < ByteBuffer > ( ) ; <nl> + while ( in . available ( ) > 0 ) <nl> + { <nl> + keys . add ( ByteBufferUtil . readWithLength ( in ) ) ; <nl> + count + + ; <nl> + } <nl> + cacheLoader . load ( keys , cfs ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + logger . warn ( String . format ( " error reading saved cache % s , keys loaded so far : % d " , path . getAbsolutePath ( ) , count ) , e ) ; <nl> + return count ; <nl> + } <nl> + finally <nl> + { <nl> + FileUtils . closeQuietly ( in ) ; <nl> + } <nl> + } <nl> <nl> + path = getCachePath ( cfs . table . name , cfs . columnFamily , CURRENT _ VERSION ) ; <nl> + if ( path . exists ( ) ) <nl> + { <nl> + DataInputStream in = null ; <nl> + try <nl> + { <nl> logger . info ( String . format ( " reading saved cache % s " , path ) ) ; <nl> in = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) ) ; <nl> while ( in . available ( ) > 0 ) <nl> { <nl> - int size = in . readInt ( ) ; <nl> - byte [ ] bytes = new byte [ size ] ; <nl> - in . readFully ( bytes ) ; <nl> - ByteBuffer buffer = ByteBuffer . wrap ( bytes ) ; <nl> - DecoratedKey key ; <nl> - try <nl> - { <nl> - key = StorageService . getPartitioner ( ) . decorateKey ( buffer ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - logger . info ( String . format ( " unable to read entry # % s from saved cache % s ; skipping remaining entries " , <nl> - keys . size ( ) , path . getAbsolutePath ( ) ) , e ) ; <nl> - break ; <nl> - } <nl> - keys . add ( key ) ; <nl> + Pair < K , V > entry = cacheLoader . deserialize ( in , cfs ) ; <nl> + put ( entry . left , entry . right ) ; <nl> + count + + ; <nl> } <nl> - if ( logger . isDebugEnabled ( ) ) <nl> - logger . debug ( String . format ( " completed reading ( % d ms ; % d keys ) saved cache % s " , <nl> - System . currentTimeMillis ( ) - start , keys . size ( ) , path ) ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 137 , 7 + 151 , 10 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> FileUtils . closeQuietly ( in ) ; <nl> } <nl> } <nl> - return keys ; <nl> + if ( logger . isDebugEnabled ( ) ) <nl> + logger . debug ( String . format ( " completed reading ( % d ms ; % d keys ) saved cache % s " , <nl> + System . currentTimeMillis ( ) - start , count , path ) ) ; <nl> + return count ; <nl> } <nl> <nl> public Future < ? > submitWrite ( int keysToSave ) <nl> @ @ - 158 , 22 + 175 , 11 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> } <nl> } <nl> <nl> - public int estimateSizeToSave ( Set < K > keys ) <nl> - { <nl> - int bytes = 0 ; <nl> - <nl> - for ( K key : keys ) <nl> - bytes + = key . serializedSize ( ) ; <nl> - <nl> - return bytes ; <nl> - } <nl> - <nl> public class Writer extends CompactionInfo . Holder <nl> { <nl> private final Set < K > keys ; <nl> private final CompactionInfo info ; <nl> - private final long estimatedTotalBytes ; <nl> - private long bytesWritten ; <nl> + private long keysWritten ; <nl> <nl> protected Writer ( int keysToSave ) <nl> { <nl> @ @ - 182 , 9 + 188 , 6 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> else <nl> keys = hotKeySet ( keysToSave ) ; <nl> <nl> - / / an approximation - - the keyset can change while saving <nl> - estimatedTotalBytes = estimateSizeToSave ( keys ) ; <nl> - <nl> OperationType type ; <nl> if ( cacheType = = CacheService . CacheType . KEY _ CACHE ) <nl> type = OperationType . KEY _ CACHE _ SAVE ; <nl> @ @ - 196 , 15 + 199 , 14 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> info = new CompactionInfo ( new CFMetaData ( " system " , cacheType . toString ( ) , null , null , null ) , <nl> type , <nl> 0 , <nl> - estimatedTotalBytes ) ; <nl> + keys . size ( ) , <nl> + " keys " ) ; <nl> } <nl> <nl> public CompactionInfo getCompactionInfo ( ) <nl> { <nl> - long bytesWritten = this . bytesWritten ; <nl> - / / keyset can change in size , thus totalBytes can too <nl> - return info . forProgress ( bytesWritten , <nl> - Math . max ( bytesWritten , estimatedTotalBytes ) ) ; <nl> + / / keyset can change in size , thus total can too <nl> + return info . forProgress ( keysWritten , Math . max ( keysWritten , keys . size ( ) ) ) ; <nl> } <nl> <nl> public void saveCache ( ) throws IOException <nl> @ @ - 212 , 7 + 214 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> logger . debug ( " Deleting old { } files . " , cacheType ) ; <nl> deleteOldCacheFiles ( ) ; <nl> <nl> - if ( keys . size ( ) = = 0 | | estimatedTotalBytes = = 0 ) <nl> + if ( keys . size ( ) = = 0 | | keys . size ( ) = = 0 ) <nl> { <nl> logger . debug ( " Skipping { } save , cache is empty . " , cacheType ) ; <nl> return ; <nl> @ @ - 224 , 7 + 226 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> <nl> try <nl> { <nl> - for ( CacheKey key : keys ) <nl> + for ( K key : keys ) <nl> { <nl> Pair < String , String > path = key . getPathInfo ( ) ; <nl> SequentialWriter writer = writers . get ( path ) ; <nl> @ @ - 234 , 9 + 236 , 8 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> writer = tempCacheFile ( path ) ; <nl> writers . put ( path , writer ) ; <nl> } <nl> - <nl> - key . write ( writer . stream ) ; <nl> - bytesWritten + = key . serializedSize ( ) ; <nl> + cacheLoader . serialize ( key , writer . stream ) ; <nl> + keysWritten + + ; <nl> } <nl> } <nl> finally <nl> @ @ - 251 , 7 + 252 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> SequentialWriter writer = info . getValue ( ) ; <nl> <nl> File tmpFile = new File ( writer . getPath ( ) ) ; <nl> - File cacheFile = getCachePath ( path . left , path . right ) ; <nl> + File cacheFile = getCachePath ( path . left , path . right , CURRENT _ VERSION ) ; <nl> <nl> cacheFile . delete ( ) ; / / ignore error if it didn ' t exist <nl> if ( ! tmpFile . renameTo ( cacheFile ) ) <nl> @ @ - 263 , 13 + 264 , 12 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> <nl> private SequentialWriter tempCacheFile ( Pair < String , String > pathInfo ) throws IOException <nl> { <nl> - File path = getCachePath ( pathInfo . left , pathInfo . right ) ; <nl> + File path = getCachePath ( pathInfo . left , pathInfo . right , CURRENT _ VERSION ) ; <nl> File tmpFile = File . createTempFile ( path . getName ( ) , null , path . getParentFile ( ) ) ; <nl> <nl> return SequentialWriter . open ( tmpFile , true ) ; <nl> } <nl> <nl> - <nl> private void deleteOldCacheFiles ( ) <nl> { <nl> File savedCachesDir = new File ( DatabaseDescriptor . getSavedCachesLocation ( ) ) ; <nl> @ @ - 283 , 8 + 283 , 24 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> if ( ! file . delete ( ) ) <nl> logger . warn ( " Failed to delete { } " , file . getAbsolutePath ( ) ) ; <nl> } <nl> + <nl> + if ( file . isFile ( ) & & file . getName ( ) . endsWith ( CURRENT _ VERSION + " . db " ) ) <nl> + { <nl> + if ( ! file . delete ( ) ) <nl> + logger . warn ( " Failed to delete { } " , file . getAbsolutePath ( ) ) ; <nl> + } <nl> } <nl> } <nl> } <nl> } <nl> + <nl> + public interface CacheSerializer < K extends CacheKey , V > <nl> + { <nl> + void serialize ( K key , DataOutput out ) throws IOException ; <nl> + <nl> + Pair < K , V > deserialize ( DataInputStream in , ColumnFamilyStore cfs ) throws IOException ; <nl> + <nl> + @ Deprecated <nl> + void load ( Set < ByteBuffer > buffer , ColumnFamilyStore cfs ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 582c097 . . dc2459b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1 , 4 + 1 , 4 @ @ <nl> - / * * <nl> + / * <nl> * Licensed to the Apache Software Foundation ( ASF ) under one <nl> * or more contributor license agreements . See the NOTICE file <nl> * distributed with this work for additional information <nl> @ @ - 15 , 7 + 15 , 6 @ @ <nl> * See the License for the specific language governing permissions and <nl> * limitations under the License . <nl> * / <nl> - <nl> package org . apache . cassandra . db ; <nl> <nl> import java . io . File ; <nl> @ @ - 35 , 7 + 34 , 6 @ @ import com . google . common . util . concurrent . Futures ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import org . apache . cassandra . cache . AutoSavingCache ; <nl> import org . apache . cassandra . cache . IRowCacheEntry ; <nl> import org . apache . cassandra . cache . RowCacheKey ; <nl> import org . apache . cassandra . cache . RowCacheSentinel ; <nl> @ @ - 43 , 7 + 41 , 7 @ @ import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; <nl> import org . apache . cassandra . concurrent . NamedThreadFactory ; <nl> import org . apache . cassandra . concurrent . StageManager ; <nl> import org . apache . cassandra . config . * ; <nl> - import org . apache . cassandra . db . columniterator . IColumnIterator ; <nl> + import org . apache . cassandra . db . columniterator . OnDiskAtomIterator ; <nl> import org . apache . cassandra . db . commitlog . CommitLog ; <nl> import org . apache . cassandra . db . commitlog . ReplayPosition ; <nl> import org . apache . cassandra . db . compaction . AbstractCompactionStrategy ; <nl> @ @ - 66 , 19 + 64 , 17 @ @ import org . apache . cassandra . service . CacheService ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . thrift . IndexExpression ; <nl> import org . apache . cassandra . utils . * ; <nl> - import org . apache . cassandra . utils . IntervalTree . Interval ; <nl> - import org . apache . cassandra . utils . IntervalTree . IntervalTree ; <nl> import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; <nl> <nl> import static org . apache . cassandra . config . CFMetaData . Caching ; <nl> <nl> public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> - private static Logger logger = LoggerFactory . getLogger ( ColumnFamilyStore . class ) ; <nl> + private static final Logger logger = LoggerFactory . getLogger ( ColumnFamilyStore . class ) ; <nl> <nl> / * <nl> * maybeSwitchMemtable puts Memtable . getSortedContents on the writer executor . When the write is complete , <nl> - * we turn the writer into an SSTableReader and add it to ssTables _ where it is available for reads . <nl> + * we turn the writer into an SSTableReader and add it to ssTables where it is available for reads . <nl> * <nl> * There are two other things that maybeSwitchMemtable does . <nl> * First , it puts the Memtable into memtablesPendingFlush , where it stays until the flush is complete <nl> @ @ - 117 , 12 + 113 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> private volatile int memtableSwitchCount = 0 ; <nl> <nl> / * This is used to generate the next index for a SSTable * / <nl> - private AtomicInteger fileIndexGenerator = new AtomicInteger ( 0 ) ; <nl> + private final AtomicInteger fileIndexGenerator = new AtomicInteger ( 0 ) ; <nl> <nl> public final SecondaryIndexManager indexManager ; <nl> <nl> - private LatencyTracker readStats = new LatencyTracker ( ) ; <nl> - private LatencyTracker writeStats = new LatencyTracker ( ) ; <nl> + private final LatencyTracker readStats = new LatencyTracker ( ) ; <nl> + private final LatencyTracker writeStats = new LatencyTracker ( ) ; <nl> <nl> / / counts of sstables accessed by reads <nl> private final EstimatedHistogram recentSSTablesPerRead = new EstimatedHistogram ( 35 ) ; <nl> @ @ - 226 , 12 + 222 , 10 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> / / scan for sstables corresponding to this cf and load them <nl> data = new DataTracker ( this ) ; <nl> - Set < DecoratedKey > savedKeys = caching = = Caching . NONE | | caching = = Caching . ROWS _ ONLY <nl> - ? Collections . < DecoratedKey > emptySet ( ) <nl> - : CacheService . instance . keyCache . readSaved ( table . name , columnFamily ) ; <nl> - <nl> Directories . SSTableLister sstables = directories . sstableLister ( ) . skipCompacted ( true ) . skipTemporary ( true ) ; <nl> - data . addInitialSSTables ( SSTableReader . batchOpen ( sstables . list ( ) . entrySet ( ) , savedKeys , data , metadata , this . partitioner ) ) ; <nl> + data . addInitialSSTables ( SSTableReader . batchOpen ( sstables . list ( ) . entrySet ( ) , data , metadata , this . partitioner ) ) ; <nl> + if ( caching = = Caching . ALL | | caching = = Caching . KEYS _ ONLY ) <nl> + CacheService . instance . keyCache . loadSaved ( this ) ; <nl> <nl> / / compaction strategy should be created after the CFS has been prepared <nl> this . compactionStrategy = metadata . createCompactionStrategyInstance ( this ) ; <nl> @ @ - 323 , 7 + 317 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> Descriptor desc = entry . getKey ( ) ; <nl> generations . add ( desc . generation ) ; <nl> if ( ! desc . isCompatible ( ) ) <nl> - throw new RuntimeException ( String . format ( " Can ' t open incompatible SSTable ! Current version % s , found file : % s " , Descriptor . CURRENT _ VERSION , desc ) ) ; <nl> + throw new RuntimeException ( String . format ( " Can ' t open incompatible SSTable ! Current version % s , found file : % s " , Descriptor . Version . CURRENT , desc ) ) ; <nl> } <nl> Collections . sort ( generations ) ; <nl> int value = ( generations . size ( ) > 0 ) ? ( generations . get ( generations . size ( ) - 1 ) ) : 0 ; <nl> @ @ - 408 , 19 + 402 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> long start = System . currentTimeMillis ( ) ; <nl> <nl> - AutoSavingCache < RowCacheKey , IRowCacheEntry > rowCache = CacheService . instance . rowCache ; <nl> - <nl> - / / results are sorted on read ( via treeset ) because there are few reads and many writes and reads only happen at startup <nl> - int cachedRowsRead = 0 ; <nl> - for ( DecoratedKey key : rowCache . readSaved ( table . name , columnFamily ) ) <nl> - { <nl> - ColumnFamily data = getTopLevelColumns ( QueryFilter . getIdentityFilter ( key , new QueryPath ( columnFamily ) ) , <nl> - Integer . MIN _ VALUE , <nl> - true ) ; <nl> - CacheService . instance . rowCache . put ( new RowCacheKey ( metadata . cfId , key ) , data ) ; <nl> - cachedRowsRead + + ; <nl> - } <nl> - <nl> + int cachedRowsRead = CacheService . instance . rowCache . loadSaved ( this ) ; <nl> if ( cachedRowsRead > 0 ) <nl> logger . info ( String . format ( " completed loading ( % d ms ; % d keys ) row cache for % s . % s " , <nl> System . currentTimeMillis ( ) - start , <nl> @ @ - 466 , 7 + 448 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> if ( ! descriptor . isCompatible ( ) ) <nl> throw new RuntimeException ( String . format ( " Can ' t open incompatible SSTable ! Current version % s , found file : % s " , <nl> - Descriptor . CURRENT _ VERSION , <nl> + Descriptor . Version . CURRENT , <nl> descriptor ) ) ; <nl> <nl> Descriptor newDescriptor = new Descriptor ( descriptor . version , <nl> @ @ - 481 , 7 + 463 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> SSTableReader reader ; <nl> try <nl> { <nl> - reader = SSTableReader . open ( newDescriptor , entry . getValue ( ) , Collections . < DecoratedKey > emptySet ( ) , data , metadata , partitioner ) ; <nl> + reader = SSTableReader . open ( newDescriptor , entry . getValue ( ) , data , metadata , partitioner ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> @ @ - 558 , 7 + 540 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> * When the sstable object is closed , it will be renamed to a non - temporary <nl> * format , so incomplete sstables can be recognized and removed on startup . <nl> * / <nl> - public String getFlushPath ( long estimatedSize , String version ) <nl> + public String getFlushPath ( long estimatedSize , Descriptor . Version version ) <nl> { <nl> File location = directories . getDirectoryForNewSSTables ( estimatedSize ) ; <nl> if ( location = = null ) <nl> @ @ - 566 , 7 + 548 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> return getTempSSTablePath ( location , version ) ; <nl> } <nl> <nl> - public String getTempSSTablePath ( File directory , String version ) <nl> + public String getTempSSTablePath ( File directory , Descriptor . Version version ) <nl> { <nl> Descriptor desc = new Descriptor ( version , <nl> directory , <nl> @ @ - 579 , 7 + 561 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> public String getTempSSTablePath ( File directory ) <nl> { <nl> - return getTempSSTablePath ( directory , Descriptor . CURRENT _ VERSION ) ; <nl> + return getTempSSTablePath ( directory , Descriptor . Version . CURRENT ) ; <nl> } <nl> <nl> / * * flush the given memtable and swap in a new one for its CFS , if it hasn ' t been frozen already . threadsafe . * / <nl> @ @ - 759 , 11 + 741 , 8 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> public static ColumnFamily removeDeletedCF ( ColumnFamily cf , int gcBefore ) <nl> { <nl> - if ( cf . getColumnCount ( ) = = 0 & & ( ! cf . isMarkedForDelete ( ) | | cf . getLocalDeletionTime ( ) < gcBefore ) ) <nl> - return null ; <nl> - <nl> cf . maybeResetDeletionTimes ( gcBefore ) ; <nl> - return cf ; <nl> + return cf . getColumnCount ( ) = = 0 & & ! cf . isMarkedForDelete ( ) ? null : cf ; <nl> } <nl> <nl> / * <nl> @ @ - 799 , 10 + 778 , 9 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> IColumn c = iter . next ( ) ; <nl> ByteBuffer cname = c . name ( ) ; <nl> / / remove columns if <nl> - / / ( a ) the column itself is tombstoned or <nl> - / / ( b ) the CF is tombstoned and the column is not newer than it <nl> - if ( c . getLocalDeletionTime ( ) < gcBefore <nl> - | | c . timestamp ( ) < = cf . getMarkedForDeleteAt ( ) ) <nl> + / / ( a ) the column itself is gcable or <nl> + / / ( b ) the column is shadowed by a CF tombstone <nl> + if ( c . getLocalDeletionTime ( ) < gcBefore | | cf . deletionInfo ( ) . isDeleted ( c ) ) <nl> { <nl> iter . remove ( ) ; <nl> } <nl> @ @ - 818 , 28 + 796 , 26 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> while ( iter . hasNext ( ) ) <nl> { <nl> SuperColumn c = ( SuperColumn ) iter . next ( ) ; <nl> - long minTimestamp = Math . max ( c . getMarkedForDeleteAt ( ) , cf . getMarkedForDeleteAt ( ) ) ; <nl> Iterator < IColumn > subIter = c . getSubColumns ( ) . iterator ( ) ; <nl> while ( subIter . hasNext ( ) ) <nl> { <nl> IColumn subColumn = subIter . next ( ) ; <nl> / / remove subcolumns if <nl> - / / ( a ) the subcolumn itself is tombstoned or <nl> - / / ( b ) the supercolumn is tombstoned and the subcolumn is not newer than it <nl> - if ( subColumn . timestamp ( ) < = minTimestamp <nl> - | | subColumn . getLocalDeletionTime ( ) < gcBefore ) <nl> + / / ( a ) the subcolumn itself is gcable or <nl> + / / ( b ) the supercolumn is shadowed by the CF and the column is not newer <nl> + / / ( b ) the subcolumn is shadowed by the supercolumn <nl> + if ( subColumn . getLocalDeletionTime ( ) < gcBefore <nl> + | | cf . deletionInfo ( ) . isDeleted ( c . name ( ) , subColumn . timestamp ( ) ) <nl> + | | c . deletionInfo ( ) . isDeleted ( subColumn ) ) <nl> { <nl> subIter . remove ( ) ; <nl> } <nl> } <nl> - if ( c . getSubColumns ( ) . isEmpty ( ) & & ( ! c . isMarkedForDelete ( ) | | c . getLocalDeletionTime ( ) < gcBefore ) ) <nl> + c . maybeResetDeletionTimes ( gcBefore ) ; <nl> + if ( c . getSubColumns ( ) . isEmpty ( ) & & ! c . isMarkedForDelete ( ) ) <nl> { <nl> iter . remove ( ) ; <nl> } <nl> - else <nl> - { <nl> - c . maybeResetDeletionTimes ( gcBefore ) ; <nl> - } <nl> } <nl> } <nl> <nl> @ @ - 855 , 12 + 831 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> if ( sstables . isEmpty ( ) ) <nl> return ImmutableSet . of ( ) ; <nl> <nl> - IntervalTree < SSTableReader > tree = data . getView ( ) . intervalTree ; <nl> + DataTracker . SSTableIntervalTree tree = data . getView ( ) . intervalTree ; <nl> <nl> Set < SSTableReader > results = null ; <nl> for ( SSTableReader sstable : sstables ) <nl> { <nl> - Set < SSTableReader > overlaps = ImmutableSet . copyOf ( tree . search ( new Interval < SSTableReader > ( sstable . first , sstable . last ) ) ) ; <nl> + Set < SSTableReader > overlaps = ImmutableSet . copyOf ( tree . search ( Interval . < RowPosition , SSTableReader > create ( sstable . first , sstable . last ) ) ) ; <nl> assert overlaps . contains ( sstable ) ; <nl> results = results = = null ? overlaps : Sets . union ( results , overlaps ) ; <nl> } <nl> @ @ - 1131 , 7 + 1107 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> * @ return the entire row for filter . key , if present in the cache ( or we can cache it ) , or just the column <nl> * specified by filter otherwise <nl> * / <nl> - private ColumnFamily getThroughCache ( Integer cfId , QueryFilter filter ) <nl> + private ColumnFamily getThroughCache ( UUID cfId , QueryFilter filter ) <nl> { <nl> assert isRowCacheEnabled ( ) <nl> : String . format ( " Row cache is not enabled on column family [ " + getColumnFamilyName ( ) + " ] " ) ; <nl> @ @ - 1190 , 7 + 1166 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> return cf . isSuper ( ) ? removeDeleted ( cf , gcBefore ) : removeDeletedCF ( cf , gcBefore ) ; <nl> } <nl> <nl> - Integer cfId = Schema . instance . getId ( table . name , this . columnFamily ) ; <nl> + UUID cfId = Schema . instance . getId ( table . name , this . columnFamily ) ; <nl> if ( cfId = = null ) <nl> return null ; / / secondary index <nl> <nl> @ @ - 1214 , 8 + 1190 , 8 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) <nl> { <nl> ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) , filter . filter . isReversed ( ) ) ; <nl> - IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null ) ; <nl> - filter . collateColumns ( cf , Collections . singletonList ( ci ) , gcBefore ) ; <nl> + OnDiskAtomIterator ci = filter . getMemtableColumnIterator ( cached , null ) ; <nl> + filter . collateOnDiskAtom ( cf , Collections . singletonList ( ci ) , gcBefore ) ; <nl> / / TODO this is necessary because when we collate supercolumns together , we don ' t check <nl> / / their subcolumns for relevance , so we need to do a second prune post facto here . <nl> return cf . isSuper ( ) ? removeDeleted ( cf , gcBefore ) : removeDeletedCF ( cf , gcBefore ) ; <nl> @ @ - 1265 , 7 + 1241 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> while ( true ) <nl> { <nl> view = data . getView ( ) ; <nl> - sstables = view . intervalTree . search ( new Interval ( key , key ) ) ; <nl> + sstables = view . intervalTree . search ( key ) ; <nl> if ( SSTableReader . acquireReferences ( sstables ) ) <nl> break ; <nl> / / retry w / new view <nl> @ @ - 1285 , 9 + 1261 , 17 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> view = data . getView ( ) ; <nl> / / startAt = = minimum is ok , but stopAt = = minimum is confusing because all IntervalTree deals with <nl> - / / is Comparable , so it won ' t know to special - case that . <nl> - Comparable stopInTree = stopAt . isMinimum ( ) ? view . intervalTree . max ( ) : stopAt ; <nl> - sstables = view . intervalTree . search ( new Interval ( startWith , stopInTree ) ) ; <nl> + / / is Comparable , so it won ' t know to special - case that . However max ( ) should not be call if the <nl> + / / intervalTree is empty sochecking that first <nl> + / / <nl> + if ( view . intervalTree . isEmpty ( ) ) <nl> + { <nl> + sstables = Collections . < SSTableReader > emptyList ( ) ; <nl> + break ; <nl> + } <nl> + <nl> + RowPosition stopInTree = stopAt . isMinimum ( ) ? view . intervalTree . max ( ) : stopAt ; <nl> + sstables = view . intervalTree . search ( Interval . < RowPosition , SSTableReader > create ( startWith , stopInTree ) ) ; <nl> if ( SSTableReader . acquireReferences ( sstables ) ) <nl> break ; <nl> / / retry w / new view <nl> @ @ - 1305 , 7 + 1289 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> for ( SSTableReader sstr : view . sstables ) <nl> { <nl> / / check if the key actually exists in this sstable , without updating cache and stats <nl> - if ( sstr . getPosition ( dk , SSTableReader . Operator . EQ , false ) > - 1 ) <nl> + if ( sstr . getPosition ( dk , SSTableReader . Operator . EQ , false ) ! = null ) <nl> files . add ( sstr . getFilename ( ) ) ; <nl> } <nl> return files ; <nl> @ @ - 1315 , 7 + 1299 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> - private ColumnFamily getTopLevelColumns ( QueryFilter filter , int gcBefore , boolean forCache ) <nl> + public ColumnFamily getTopLevelColumns ( QueryFilter filter , int gcBefore , boolean forCache ) <nl> { <nl> CollationController controller = new CollationController ( this , forCache , filter , gcBefore ) ; <nl> ColumnFamily columns = controller . getTopLevelColumns ( ) ; <nl> @ @ - 1607 , 7 + 1591 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> public void invalidateCachedRow ( DecoratedKey key ) <nl> { <nl> - Integer cfId = Schema . instance . getId ( table . name , this . columnFamily ) ; <nl> + UUID cfId = Schema . instance . getId ( table . name , this . columnFamily ) ; <nl> if ( cfId = = null ) <nl> return ; / / secondary index <nl> <nl> @ @ - 1637 , 10 + 1621 , 10 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> return cfses ; <nl> } <nl> <nl> - public Iterable < DecoratedKey < ? > > keySamples ( Range < Token > range ) <nl> + public Iterable < DecoratedKey > keySamples ( Range < Token > range ) <nl> { <nl> Collection < SSTableReader > sstables = getSSTables ( ) ; <nl> - Iterable < DecoratedKey < ? > > [ ] samples = new Iterable [ sstables . size ( ) ] ; <nl> + Iterable < DecoratedKey > [ ] samples = new Iterable [ sstables . size ( ) ] ; <nl> int i = 0 ; <nl> for ( SSTableReader sstable : sstables ) <nl> { <nl> @ @ - 1903 , 12 + 1887 , 6 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> return partitioner instanceof LocalPartitioner ; <nl> } <nl> <nl> - private String getParentColumnfamily ( ) <nl> - { <nl> - assert isIndex ( ) ; <nl> - return columnFamily . split ( " \ \ . " ) [ 0 ] ; <nl> - } <nl> - <nl> private ByteBuffer intern ( ByteBuffer name ) <nl> { <nl> ByteBuffer internedName = internedNames . get ( name ) ; <nl> @ @ - 1941 , 7 + 1919 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> public SSTableWriter createFlushWriter ( long estimatedRows , long estimatedSize , ReplayPosition context ) throws IOException <nl> { <nl> SSTableMetadata . Collector sstableMetadataCollector = SSTableMetadata . createCollector ( ) . replayPosition ( context ) ; <nl> - return new SSTableWriter ( getFlushPath ( estimatedSize , Descriptor . CURRENT _ VERSION ) , <nl> + return new SSTableWriter ( getFlushPath ( estimatedSize , Descriptor . Version . CURRENT ) , <nl> estimatedRows , <nl> metadata , <nl> partitioner , <nl> diff - - git a / test / unit / org / apache / cassandra / db / RowCacheTest . java b / test / unit / org / apache / cassandra / db / RowCacheTest . java <nl> index e6b4578 . . 99b8cbc 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RowCacheTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RowCacheTest . java <nl> @ @ - 153 , 6 + 153 , 6 @ @ public class RowCacheTest extends SchemaLoader <nl> / / empty the cache again to make sure values came from disk <nl> CacheService . instance . invalidateRowCache ( ) ; <nl> assert CacheService . instance . rowCache . size ( ) = = 0 ; <nl> - assert CacheService . instance . rowCache . readSaved ( KEYSPACE , COLUMN _ FAMILY ) . size ( ) = = ( keysToSave = = Integer . MAX _ VALUE ? totalKeys : keysToSave ) ; <nl> + assert CacheService . instance . rowCache . loadSaved ( store ) = = ( keysToSave = = Integer . MAX _ VALUE ? totalKeys : keysToSave ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / lib / airline - 0 . 6 . jar b / lib / airline - 0 . 6 . jar 
 new file mode 100644 
 index 0000000 . . a35ae79 
 Binary files / dev / null and b / lib / airline - 0 . 6 . jar differ 
 diff - - git a / lib / javax . inject . jar b / lib / javax . inject . jar 
 new file mode 100644 
 index 0000000 . . 1ff61ce 
 Binary files / dev / null and b / lib / javax . inject . jar differ 
 diff - - git a / lib / licenses / airline - 0 . 6 . txt b / lib / licenses / airline - 0 . 6 . txt 
 new file mode 100644 
 index 0000000 . . d645695 
 - - - / dev / null 
 + + + b / lib / licenses / airline - 0 . 6 . txt 
 @ @ - 0 , 0 + 1 , 202 @ @ 
 + 
 + Apache License 
 + Version 2 . 0 , January 2004 
 + http : / / www . apache . org / licenses / 
 + 
 + TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION 
 + 
 + 1 . Definitions . 
 + 
 + " License " shall mean the terms and conditions for use , reproduction , 
 + and distribution as defined by Sections 1 through 9 of this document . 
 + 
 + " Licensor " shall mean the copyright owner or entity authorized by 
 + the copyright owner that is granting the License . 
 + 
 + " Legal Entity " shall mean the union of the acting entity and all 
 + other entities that control , are controlled by , or are under common 
 + control with that entity . For the purposes of this definition , 
 + " control " means ( i ) the power , direct or indirect , to cause the 
 + direction or management of such entity , whether by contract or 
 + otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the 
 + outstanding shares , or ( iii ) beneficial ownership of such entity . 
 + 
 + " You " ( or " Your " ) shall mean an individual or Legal Entity 
 + exercising permissions granted by this License . 
 + 
 + " Source " form shall mean the preferred form for making modifications , 
 + including but not limited to software source code , documentation 
 + source , and configuration files . 
 + 
 + " Object " form shall mean any form resulting from mechanical 
 + transformation or translation of a Source form , including but 
 + not limited to compiled object code , generated documentation , 
 + and conversions to other media types . 
 + 
 + " Work " shall mean the work of authorship , whether in Source or 
 + Object form , made available under the License , as indicated by a 
 + copyright notice that is included in or attached to the work 
 + ( an example is provided in the Appendix below ) . 
 + 
 + " Derivative Works " shall mean any work , whether in Source or Object 
 + form , that is based on ( or derived from ) the Work and for which the 
 + editorial revisions , annotations , elaborations , or other modifications 
 + represent , as a whole , an original work of authorship . For the purposes 
 + of this License , Derivative Works shall not include works that remain 
 + separable from , or merely link ( or bind by name ) to the interfaces of , 
 + the Work and Derivative Works thereof . 
 + 
 + " Contribution " shall mean any work of authorship , including 
 + the original version of the Work and any modifications or additions 
 + to that Work or Derivative Works thereof , that is intentionally 
 + submitted to Licensor for inclusion in the Work by the copyright owner 
 + or by an individual or Legal Entity authorized to submit on behalf of 
 + the copyright owner . For the purposes of this definition , " submitted " 
 + means any form of electronic , verbal , or written communication sent 
 + to the Licensor or its representatives , including but not limited to 
 + communication on electronic mailing lists , source code control systems , 
 + and issue tracking systems that are managed by , or on behalf of , the 
 + Licensor for the purpose of discussing and improving the Work , but 
 + excluding communication that is conspicuously marked or otherwise 
 + designated in writing by the copyright owner as " Not a Contribution . " 
 + 
 + " Contributor " shall mean Licensor and any individual or Legal Entity 
 + on behalf of whom a Contribution has been received by Licensor and 
 + subsequently incorporated within the Work . 
 + 
 + 2 . Grant of Copyright License . Subject to the terms and conditions of 
 + this License , each Contributor hereby grants to You a perpetual , 
 + worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 + copyright license to reproduce , prepare Derivative Works of , 
 + publicly display , publicly perform , sublicense , and distribute the 
 + Work and such Derivative Works in Source or Object form . 
 + 
 + 3 . Grant of Patent License . Subject to the terms and conditions of 
 + this License , each Contributor hereby grants to You a perpetual , 
 + worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 + ( except as stated in this section ) patent license to make , have made , 
 + use , offer to sell , sell , import , and otherwise transfer the Work , 
 + where such license applies only to those patent claims licensable 
 + by such Contributor that are necessarily infringed by their 
 + Contribution ( s ) alone or by combination of their Contribution ( s ) 
 + with the Work to which such Contribution ( s ) was submitted . If You 
 + institute patent litigation against any entity ( including a 
 + cross - claim or counterclaim in a lawsuit ) alleging that the Work 
 + or a Contribution incorporated within the Work constitutes direct 
 + or contributory patent infringement , then any patent licenses 
 + granted to You under this License for that Work shall terminate 
 + as of the date such litigation is filed . 
 + 
 + 4 . Redistribution . You may reproduce and distribute copies of the 
 + Work or Derivative Works thereof in any medium , with or without 
 + modifications , and in Source or Object form , provided that You 
 + meet the following conditions : 
 + 
 + ( a ) You must give any other recipients of the Work or 
 + Derivative Works a copy of this License ; and 
 + 
 + ( b ) You must cause any modified files to carry prominent notices 
 + stating that You changed the files ; and 
 + 
 + ( c ) You must retain , in the Source form of any Derivative Works 
 + that You distribute , all copyright , patent , trademark , and 
 + attribution notices from the Source form of the Work , 
 + excluding those notices that do not pertain to any part of 
 + the Derivative Works ; and 
 + 
 + ( d ) If the Work includes a " NOTICE " text file as part of its 
 + distribution , then any Derivative Works that You distribute must 
 + include a readable copy of the attribution notices contained 
 + within such NOTICE file , excluding those notices that do not 
 + pertain to any part of the Derivative Works , in at least one 
 + of the following places : within a NOTICE text file distributed 
 + as part of the Derivative Works ; within the Source form or 
 + documentation , if provided along with the Derivative Works ; or , 
 + within a display generated by the Derivative Works , if and 
 + wherever such third - party notices normally appear . The contents 
 + of the NOTICE file are for informational purposes only and 
 + do not modify the License . You may add Your own attribution 
 + notices within Derivative Works that You distribute , alongside 
 + or as an addendum to the NOTICE text from the Work , provided 
 + that such additional attribution notices cannot be construed 
 + as modifying the License . 
 + 
 + You may add Your own copyright statement to Your modifications and 
 + may provide additional or different license terms and conditions 
 + for use , reproduction , or distribution of Your modifications , or 
 + for any such Derivative Works as a whole , provided Your use , 
 + reproduction , and distribution of the Work otherwise complies with 
 + the conditions stated in this License . 
 + 
 + 5 . Submission of Contributions . Unless You explicitly state otherwise , 
 + any Contribution intentionally submitted for inclusion in the Work 
 + by You to the Licensor shall be under the terms and conditions of 
 + this License , without any additional terms or conditions . 
 + Notwithstanding the above , nothing herein shall supersede or modify 
 + the terms of any separate license agreement you may have executed 
 + with Licensor regarding such Contributions . 
 + 
 + 6 . Trademarks . This License does not grant permission to use the trade 
 + names , trademarks , service marks , or product names of the Licensor , 
 + except as required for reasonable and customary use in describing the 
 + origin of the Work and reproducing the content of the NOTICE file . 
 + 
 + 7 . Disclaimer of Warranty . Unless required by applicable law or 
 + agreed to in writing , Licensor provides the Work ( and each 
 + Contributor provides its Contributions ) on an " AS IS " BASIS , 
 + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or 
 + implied , including , without limitation , any warranties or conditions 
 + of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A 
 + PARTICULAR PURPOSE . You are solely responsible for determining the 
 + appropriateness of using or redistributing the Work and assume any 
 + risks associated with Your exercise of permissions under this License . 
 + 
 + 8 . Limitation of Liability . In no event and under no legal theory , 
 + whether in tort ( including negligence ) , contract , or otherwise , 
 + unless required by applicable law ( such as deliberate and grossly 
 + negligent acts ) or agreed to in writing , shall any Contributor be 
 + liable to You for damages , including any direct , indirect , special , 
 + incidental , or consequential damages of any character arising as a 
 + result of this License or out of the use or inability to use the 
 + Work ( including but not limited to damages for loss of goodwill , 
 + work stoppage , computer failure or malfunction , or any and all 
 + other commercial damages or losses ) , even if such Contributor 
 + has been advised of the possibility of such damages . 
 + 
 + 9 . Accepting Warranty or Additional Liability . While redistributing 
 + the Work or Derivative Works thereof , You may choose to offer , 
 + and charge a fee for , acceptance of support , warranty , indemnity , 
 + or other liability obligations and / or rights consistent with this 
 + License . However , in accepting such obligations , You may act only 
 + on Your own behalf and on Your sole responsibility , not on behalf 
 + of any other Contributor , and only if You agree to indemnify , 
 + defend , and hold each Contributor harmless for any liability 
 + incurred by , or claims asserted against , such Contributor by reason 
 + of your accepting any such warranty or additional liability . 
 + 
 + END OF TERMS AND CONDITIONS 
 + 
 + APPENDIX : How to apply the Apache License to your work . 
 + 
 + To apply the Apache License to your work , attach the following 
 + boilerplate notice , with the fields enclosed by brackets " [ ] " 
 + replaced with your own identifying information . ( Don ' t include 
 + the brackets ! ) The text should be enclosed in the appropriate 
 + comment syntax for the file format . We also recommend that a 
 + file or class name and description of purpose be included on the 
 + same " printed page " as the copyright notice for easier 
 + identification within third - party archives . 
 + 
 + Copyright [ yyyy ] [ name of copyright owner ] 
 + 
 + Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + you may not use this file except in compliance with the License . 
 + You may obtain a copy of the License at 
 + 
 + http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + 
 + Unless required by applicable law or agreed to in writing , software 
 + distributed under the License is distributed on an " AS IS " BASIS , 
 + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + See the License for the specific language governing permissions and 
 + limitations under the License . 
 diff - - git a / lib / licenses / javax . inject . txt b / lib / licenses / javax . inject . txt 
 new file mode 100644 
 index 0000000 . . d645695 
 - - - / dev / null 
 + + + b / lib / licenses / javax . inject . txt 
 @ @ - 0 , 0 + 1 , 202 @ @ 
 + 
 + Apache License 
 + Version 2 . 0 , January 2004 
 + http : / / www . apache . org / licenses / 
 + 
 + TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION 
 + 
 + 1 . Definitions . 
 + 
 + " License " shall mean the terms and conditions for use , reproduction , 
 + and distribution as defined by Sections 1 through 9 of this document . 
 + 
 + " Licensor " shall mean the copyright owner or entity authorized by 
 + the copyright owner that is granting the License . 
 + 
 + " Legal Entity " shall mean the union of the acting entity and all 
 + other entities that control , are controlled by , or are under common 
 + control with that entity . For the purposes of this definition , 
 + " control " means ( i ) the power , direct or indirect , to cause the 
 + direction or management of such entity , whether by contract or 
 + otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the 
 + outstanding shares , or ( iii ) beneficial ownership of such entity . 
 + 
 + " You " ( or " Your " ) shall mean an individual or Legal Entity 
 + exercising permissions granted by this License . 
 + 
 + " Source " form shall mean the preferred form for making modifications , 
 + including but not limited to software source code , documentation 
 + source , and configuration files . 
 + 
 + " Object " form shall mean any form resulting from mechanical 
 + transformation or translation of a Source form , including but 
 + not limited to compiled object code , generated documentation , 
 + and conversions to other media types . 
 + 
 + " Work " shall mean the work of authorship , whether in Source or 
 + Object form , made available under the License , as indicated by a 
 + copyright notice that is included in or attached to the work 
 + ( an example is provided in the Appendix below ) . 
 + 
 + " Derivative Works " shall mean any work , whether in Source or Object 
 + form , that is based on ( or derived from ) the Work and for which the 
 + editorial revisions , annotations , elaborations , or other modifications 
 + represent , as a whole , an original work of authorship . For the purposes 
 + of this License , Derivative Works shall not include works that remain 
 + separable from , or merely link ( or bind by name ) to the interfaces of , 
 + the Work and Derivative Works thereof . 
 + 
 + " Contribution " shall mean any work of authorship , including 
 + the original version of the Work and any modifications or additions 
 + to that Work or Derivative Works thereof , that is intentionally 
 + submitted to Licensor for inclusion in the Work by the copyright owner 
 + or by an individual or Legal Entity authorized to submit on behalf of 
 + the copyright owner . For the purposes of this definition , " submitted " 
 + means any form of electronic , verbal , or written communication sent 
 + to the Licensor or its representatives , including but not limited to 
 + communication on electronic mailing lists , source code control systems , 
 + and issue tracking systems that are managed by , or on behalf of , the 
 + Licensor for the purpose of discussing and improving the Work , but 
 + excluding communication that is conspicuously marked or otherwise 
 + designated in writing by the copyright owner as " Not a Contribution . " 
 + 
 + " Contributor " shall mean Licensor and any individual or Legal Entity 
 + on behalf of whom a Contribution has been received by Licensor and 
 + subsequently incorporated within the Work . 
 + 
 + 2 . Grant of Copyright License . Subject to the terms and conditions of 
 + this License , each Contributor hereby grants to You a perpetual , 
 + worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 + copyright license to reproduce , prepare Derivative Works of , 
 + publicly display , publicly perform , sublicense , and distribute the 
 + Work and such Derivative Works in Source or Object form . 
 + 
 + 3 . Grant of Patent License . Subject to the terms and conditions of 
 + this License , each Contributor hereby grants to You a perpetual , 
 + worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 + ( except as stated in this section ) patent license to make , have made , 
 + use , offer to sell , sell , import , and otherwise transfer the Work , 
 + where such license applies only to those patent claims licensable 
 + by such Contributor that are necessarily infringed by their 
 + Contribution ( s ) alone or by combination of their Contribution ( s ) 
 + with the Work to which such Contribution ( s ) was submitted . If You 
 + institute patent litigation against any entity ( including a 
 + cross - claim or counterclaim in a lawsuit ) alleging that the Work 
 + or a Contribution incorporated within the Work constitutes direct 
 + or contributory patent infringement , then any patent licenses 
 + granted to You under this License for that Work shall terminate 
 + as of the date such litigation is filed . 
 + 
 + 4 . Redistribution . You may reproduce and distribute copies of the 
 + Work or Derivative Works thereof in any medium , with or without 
 + modifications , and in Source or Object form , provided that You 
 + meet the following conditions : 
 + 
 + ( a ) You must give any other recipients of the Work or 
 + Derivative Works a copy of this License ; and 
 + 
 + ( b ) You must cause any modified files to carry prominent notices 
 + stating that You changed the files ; and 
 + 
 + ( c ) You must retain , in the Source form of any Derivative Works 
 + that You distribute , all copyright , patent , trademark , and 
 + attribution notices from the Source form of the Work , 
 + excluding those notices that do not pertain to any part of 
 + the Derivative Works ; and 
 + 
 + ( d ) If the Work includes a " NOTICE " text file as part of its 
 + distribution , then any Derivative Works that You distribute must 
 + include a readable copy of the attribution notices contained 
 + within such NOTICE file , excluding those notices that do not 
 + pertain to any part of the Derivative Works , in at least one 
 + of the following places : within a NOTICE text file distributed 
 + as part of the Derivative Works ; within the Source form or 
 + documentation , if provided along with the Derivative Works ; or , 
 + within a display generated by the Derivative Works , if and 
 + wherever such third - party notices normally appear . The contents 
 + of the NOTICE file are for informational purposes only and 
 + do not modify the License . You may add Your own attribution 
 + notices within Derivative Works that You distribute , alongside 
 + or as an addendum to the NOTICE text from the Work , provided 
 + that such additional attribution notices cannot be construed 
 + as modifying the License . 
 + 
 + You may add Your own copyright statement to Your modifications and 
 + may provide additional or different license terms and conditions 
 + for use , reproduction , or distribution of Your modifications , or 
 + for any such Derivative Works as a whole , provided Your use , 
 + reproduction , and distribution of the Work otherwise complies with 
 + the conditions stated in this License . 
 + 
 + 5 . Submission of Contributions . Unless You explicitly state otherwise , 
 + any Contribution intentionally submitted for inclusion in the Work 
 + by You to the Licensor shall be under the terms and conditions of 
 + this License , without any additional terms or conditions . 
 + Notwithstanding the above , nothing herein shall supersede or modify 
 + the terms of any separate license agreement you may have executed 
 + with Licensor regarding such Contributions . 
 + 
 + 6 . Trademarks . This License does not grant permission to use the trade 
 + names , trademarks , service marks , or product names of the Licensor , 
 + except as required for reasonable and customary use in describing the 
 + origin of the Work and reproducing the content of the NOTICE file . 
 + 
 + 7 . Disclaimer of Warranty . Unless required by applicable law or 
 + agreed to in writing , Licensor provides the Work ( and each 
 + Contributor provides its Contributions ) on an " AS IS " BASIS , 
 + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or 
 + implied , including , without limitation , any warranties or conditions 
 + of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A 
 + PARTICULAR PURPOSE . You are solely responsible for determining the 
 + appropriateness of using or redistributing the Work and assume any 
 + risks associated with Your exercise of permissions under this License . 
 + 
 + 8 . Limitation of Liability . In no event and under no legal theory , 
 + whether in tort ( including negligence ) , contract , or otherwise , 
 + unless required by applicable law ( such as deliberate and grossly 
 + negligent acts ) or agreed to in writing , shall any Contributor be 
 + liable to You for damages , including any direct , indirect , special , 
 + incidental , or consequential damages of any character arising as a 
 + result of this License or out of the use or inability to use the 
 + Work ( including but not limited to damages for loss of goodwill , 
 + work stoppage , computer failure or malfunction , or any and all 
 + other commercial damages or losses ) , even if such Contributor 
 + has been advised of the possibility of such damages . 
 + 
 + 9 . Accepting Warranty or Additional Liability . While redistributing 
 + the Work or Derivative Works thereof , You may choose to offer , 
 + and charge a fee for , acceptance of support , warranty , indemnity , 
 + or other liability obligations and / or rights consistent with this 
 + License . However , in accepting such obligations , You may act only 
 + on Your own behalf and on Your sole responsibility , not on behalf 
 + of any other Contributor , and only if You agree to indemnify , 
 + defend , and hold each Contributor harmless for any liability 
 + incurred by , or claims asserted against , such Contributor by reason 
 + of your accepting any such warranty or additional liability . 
 + 
 + END OF TERMS AND CONDITIONS 
 + 
 + APPENDIX : How to apply the Apache License to your work . 
 + 
 + To apply the Apache License to your work , attach the following 
 + boilerplate notice , with the fields enclosed by brackets " [ ] " 
 + replaced with your own identifying information . ( Don ' t include 
 + the brackets ! ) The text should be enclosed in the appropriate 
 + comment syntax for the file format . We also recommend that a 
 + file or class name and description of purpose be included on the 
 + same " printed page " as the copyright notice for easier 
 + identification within third - party archives . 
 + 
 + Copyright [ yyyy ] [ name of copyright owner ] 
 + 
 + Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + you may not use this file except in compliance with the License . 
 + You may obtain a copy of the License at 
 + 
 + http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + 
 + Unless required by applicable law or agreed to in writing , software 
 + distributed under the License is distributed on an " AS IS " BASIS , 
 + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + See the License for the specific language governing permissions and 
 + limitations under the License .

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cache / AutoSavingCache . java b / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 index 7eed2a0 . . 41b8f5d 100644 
 - - - a / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 + + + b / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 @ @ - 1 , 4 + 1 , 4 @ @ 
 - / * * 
 + / * 
 * Licensed to the Apache Software Foundation ( ASF ) under one 
 * or more contributor license agreements . See the NOTICE file 
 * distributed with this work for additional information 
 @ @ - 7 , 14 + 7 , 13 @ @ 
 * " License " ) ; you may not use this file except in compliance 
 * with the License . You may obtain a copy of the License at 
 * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 * 
 - * Unless required by applicable law or agreed to in writing , 
 - * software distributed under the License is distributed on an 
 - * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 - * KIND , either express or implied . See the License for the 
 - * specific language governing permissions and limitations 
 - * under the License . 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 * / 
 package org . apache . cassandra . cache ; 
 
 @ @ - 35 , 11 + 34 , 12 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . compaction . CompactionInfo ; 
 import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . db . compaction . OperationType ; 
 - import org . apache . cassandra . db . DecoratedKey ; 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . io . util . SequentialWriter ; 
 import org . apache . cassandra . service . CacheService ; 
 import org . apache . cassandra . service . StorageService ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . WrappedRunnable ; 
 import org . apache . cassandra . utils . Pair ; 
 
 @ @ - 53 , 15 + 53 , 19 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 protected volatile ScheduledFuture < ? > saveTask ; 
 protected final CacheService . CacheType cacheType ; 
 
 - public AutoSavingCache ( ICache < K , V > cache , CacheService . CacheType cacheType ) 
 + private CacheSerializer < K , V > cacheLoader ; 
 + private static final String CURRENT _ VERSION = " b " ; 
 + 
 + public AutoSavingCache ( ICache < K , V > cache , CacheService . CacheType cacheType , CacheSerializer < K , V > cacheloader ) 
 { 
 super ( cache ) ; 
 this . cacheType = cacheType ; 
 + this . cacheLoader = cacheloader ; 
 } 
 
 - public File getCachePath ( String ksName , String cfName ) 
 + public File getCachePath ( String ksName , String cfName , String version ) 
 { 
 - return DatabaseDescriptor . getSerializedCachePath ( ksName , cfName , cacheType ) ; 
 + return DatabaseDescriptor . getSerializedCachePath ( ksName , cfName , cacheType , version ) ; 
 } 
 
 public Writer getWriter ( int keysToSave ) 
 @ @ - 92 , 41 + 96 , 51 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 } 
 } 
 
 - public Set < DecoratedKey > readSaved ( String ksName , String cfName ) 
 + public int loadSaved ( ColumnFamilyStore cfs ) 
 { 
 - File path = getCachePath ( ksName , cfName ) ; 
 - Set < DecoratedKey > keys = new TreeSet < DecoratedKey > ( ) ; 
 + int count = 0 ; 
 + long start = System . currentTimeMillis ( ) ; 
 + File path = getCachePath ( cfs . table . name , cfs . columnFamily , null ) ; 
 if ( path . exists ( ) ) 
 { 
 DataInputStream in = null ; 
 try 
 { 
 - long start = System . currentTimeMillis ( ) ; 
 + logger . info ( String . format ( " reading saved cache % s " , path ) ) ; 
 + in = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) ) ; 
 + Set < ByteBuffer > keys = new HashSet < ByteBuffer > ( ) ; 
 + while ( in . available ( ) > 0 ) 
 + { 
 + keys . add ( ByteBufferUtil . readWithLength ( in ) ) ; 
 + count + + ; 
 + } 
 + cacheLoader . load ( keys , cfs ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + logger . warn ( String . format ( " error reading saved cache % s , keys loaded so far : % d " , path . getAbsolutePath ( ) , count ) , e ) ; 
 + return count ; 
 + } 
 + finally 
 + { 
 + FileUtils . closeQuietly ( in ) ; 
 + } 
 + } 
 
 + path = getCachePath ( cfs . table . name , cfs . columnFamily , CURRENT _ VERSION ) ; 
 + if ( path . exists ( ) ) 
 + { 
 + DataInputStream in = null ; 
 + try 
 + { 
 logger . info ( String . format ( " reading saved cache % s " , path ) ) ; 
 in = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) ) ; 
 while ( in . available ( ) > 0 ) 
 { 
 - int size = in . readInt ( ) ; 
 - byte [ ] bytes = new byte [ size ] ; 
 - in . readFully ( bytes ) ; 
 - ByteBuffer buffer = ByteBuffer . wrap ( bytes ) ; 
 - DecoratedKey key ; 
 - try 
 - { 
 - key = StorageService . getPartitioner ( ) . decorateKey ( buffer ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - logger . info ( String . format ( " unable to read entry # % s from saved cache % s ; skipping remaining entries " , 
 - keys . size ( ) , path . getAbsolutePath ( ) ) , e ) ; 
 - break ; 
 - } 
 - keys . add ( key ) ; 
 + Pair < K , V > entry = cacheLoader . deserialize ( in , cfs ) ; 
 + put ( entry . left , entry . right ) ; 
 + count + + ; 
 } 
 - if ( logger . isDebugEnabled ( ) ) 
 - logger . debug ( String . format ( " completed reading ( % d ms ; % d keys ) saved cache % s " , 
 - System . currentTimeMillis ( ) - start , keys . size ( ) , path ) ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 137 , 7 + 151 , 10 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 FileUtils . closeQuietly ( in ) ; 
 } 
 } 
 - return keys ; 
 + if ( logger . isDebugEnabled ( ) ) 
 + logger . debug ( String . format ( " completed reading ( % d ms ; % d keys ) saved cache % s " , 
 + System . currentTimeMillis ( ) - start , count , path ) ) ; 
 + return count ; 
 } 
 
 public Future < ? > submitWrite ( int keysToSave ) 
 @ @ - 158 , 22 + 175 , 11 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 } 
 } 
 
 - public int estimateSizeToSave ( Set < K > keys ) 
 - { 
 - int bytes = 0 ; 
 - 
 - for ( K key : keys ) 
 - bytes + = key . serializedSize ( ) ; 
 - 
 - return bytes ; 
 - } 
 - 
 public class Writer extends CompactionInfo . Holder 
 { 
 private final Set < K > keys ; 
 private final CompactionInfo info ; 
 - private final long estimatedTotalBytes ; 
 - private long bytesWritten ; 
 + private long keysWritten ; 
 
 protected Writer ( int keysToSave ) 
 { 
 @ @ - 182 , 9 + 188 , 6 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 else 
 keys = hotKeySet ( keysToSave ) ; 
 
 - / / an approximation - - the keyset can change while saving 
 - estimatedTotalBytes = estimateSizeToSave ( keys ) ; 
 - 
 OperationType type ; 
 if ( cacheType = = CacheService . CacheType . KEY _ CACHE ) 
 type = OperationType . KEY _ CACHE _ SAVE ; 
 @ @ - 196 , 15 + 199 , 14 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 info = new CompactionInfo ( new CFMetaData ( " system " , cacheType . toString ( ) , null , null , null ) , 
 type , 
 0 , 
 - estimatedTotalBytes ) ; 
 + keys . size ( ) , 
 + " keys " ) ; 
 } 
 
 public CompactionInfo getCompactionInfo ( ) 
 { 
 - long bytesWritten = this . bytesWritten ; 
 - / / keyset can change in size , thus totalBytes can too 
 - return info . forProgress ( bytesWritten , 
 - Math . max ( bytesWritten , estimatedTotalBytes ) ) ; 
 + / / keyset can change in size , thus total can too 
 + return info . forProgress ( keysWritten , Math . max ( keysWritten , keys . size ( ) ) ) ; 
 } 
 
 public void saveCache ( ) throws IOException 
 @ @ - 212 , 7 + 214 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 logger . debug ( " Deleting old { } files . " , cacheType ) ; 
 deleteOldCacheFiles ( ) ; 
 
 - if ( keys . size ( ) = = 0 | | estimatedTotalBytes = = 0 ) 
 + if ( keys . size ( ) = = 0 | | keys . size ( ) = = 0 ) 
 { 
 logger . debug ( " Skipping { } save , cache is empty . " , cacheType ) ; 
 return ; 
 @ @ - 224 , 7 + 226 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 
 try 
 { 
 - for ( CacheKey key : keys ) 
 + for ( K key : keys ) 
 { 
 Pair < String , String > path = key . getPathInfo ( ) ; 
 SequentialWriter writer = writers . get ( path ) ; 
 @ @ - 234 , 9 + 236 , 8 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 writer = tempCacheFile ( path ) ; 
 writers . put ( path , writer ) ; 
 } 
 - 
 - key . write ( writer . stream ) ; 
 - bytesWritten + = key . serializedSize ( ) ; 
 + cacheLoader . serialize ( key , writer . stream ) ; 
 + keysWritten + + ; 
 } 
 } 
 finally 
 @ @ - 251 , 7 + 252 , 7 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 SequentialWriter writer = info . getValue ( ) ; 
 
 File tmpFile = new File ( writer . getPath ( ) ) ; 
 - File cacheFile = getCachePath ( path . left , path . right ) ; 
 + File cacheFile = getCachePath ( path . left , path . right , CURRENT _ VERSION ) ; 
 
 cacheFile . delete ( ) ; / / ignore error if it didn ' t exist 
 if ( ! tmpFile . renameTo ( cacheFile ) ) 
 @ @ - 263 , 13 + 264 , 12 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 
 private SequentialWriter tempCacheFile ( Pair < String , String > pathInfo ) throws IOException 
 { 
 - File path = getCachePath ( pathInfo . left , pathInfo . right ) ; 
 + File path = getCachePath ( pathInfo . left , pathInfo . right , CURRENT _ VERSION ) ; 
 File tmpFile = File . createTempFile ( path . getName ( ) , null , path . getParentFile ( ) ) ; 
 
 return SequentialWriter . open ( tmpFile , true ) ; 
 } 
 
 - 
 private void deleteOldCacheFiles ( ) 
 { 
 File savedCachesDir = new File ( DatabaseDescriptor . getSavedCachesLocation ( ) ) ; 
 @ @ - 283 , 8 + 283 , 24 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 if ( ! file . delete ( ) ) 
 logger . warn ( " Failed to delete { } " , file . getAbsolutePath ( ) ) ; 
 } 
 + 
 + if ( file . isFile ( ) & & file . getName ( ) . endsWith ( CURRENT _ VERSION + " . db " ) ) 
 + { 
 + if ( ! file . delete ( ) ) 
 + logger . warn ( " Failed to delete { } " , file . getAbsolutePath ( ) ) ; 
 + } 
 } 
 } 
 } 
 } 
 + 
 + public interface CacheSerializer < K extends CacheKey , V > 
 + { 
 + void serialize ( K key , DataOutput out ) throws IOException ; 
 + 
 + Pair < K , V > deserialize ( DataInputStream in , ColumnFamilyStore cfs ) throws IOException ; 
 + 
 + @ Deprecated 
 + void load ( Set < ByteBuffer > buffer , ColumnFamilyStore cfs ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 582c097 . . dc2459b 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1 , 4 + 1 , 4 @ @ 
 - / * * 
 + / * 
 * Licensed to the Apache Software Foundation ( ASF ) under one 
 * or more contributor license agreements . See the NOTICE file 
 * distributed with this work for additional information 
 @ @ - 15 , 7 + 15 , 6 @ @ 
 * See the License for the specific language governing permissions and 
 * limitations under the License . 
 * / 
 - 
 package org . apache . cassandra . db ; 
 
 import java . io . File ; 
 @ @ - 35 , 7 + 34 , 6 @ @ import com . google . common . util . concurrent . Futures ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import org . apache . cassandra . cache . AutoSavingCache ; 
 import org . apache . cassandra . cache . IRowCacheEntry ; 
 import org . apache . cassandra . cache . RowCacheKey ; 
 import org . apache . cassandra . cache . RowCacheSentinel ; 
 @ @ - 43 , 7 + 41 , 7 @ @ import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; 
 import org . apache . cassandra . concurrent . NamedThreadFactory ; 
 import org . apache . cassandra . concurrent . StageManager ; 
 import org . apache . cassandra . config . * ; 
 - import org . apache . cassandra . db . columniterator . IColumnIterator ; 
 + import org . apache . cassandra . db . columniterator . OnDiskAtomIterator ; 
 import org . apache . cassandra . db . commitlog . CommitLog ; 
 import org . apache . cassandra . db . commitlog . ReplayPosition ; 
 import org . apache . cassandra . db . compaction . AbstractCompactionStrategy ; 
 @ @ - 66 , 19 + 64 , 17 @ @ import org . apache . cassandra . service . CacheService ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . thrift . IndexExpression ; 
 import org . apache . cassandra . utils . * ; 
 - import org . apache . cassandra . utils . IntervalTree . Interval ; 
 - import org . apache . cassandra . utils . IntervalTree . IntervalTree ; 
 import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; 
 
 import static org . apache . cassandra . config . CFMetaData . Caching ; 
 
 public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 - private static Logger logger = LoggerFactory . getLogger ( ColumnFamilyStore . class ) ; 
 + private static final Logger logger = LoggerFactory . getLogger ( ColumnFamilyStore . class ) ; 
 
 / * 
 * maybeSwitchMemtable puts Memtable . getSortedContents on the writer executor . When the write is complete , 
 - * we turn the writer into an SSTableReader and add it to ssTables _ where it is available for reads . 
 + * we turn the writer into an SSTableReader and add it to ssTables where it is available for reads . 
 * 
 * There are two other things that maybeSwitchMemtable does . 
 * First , it puts the Memtable into memtablesPendingFlush , where it stays until the flush is complete 
 @ @ - 117 , 12 + 113 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 private volatile int memtableSwitchCount = 0 ; 
 
 / * This is used to generate the next index for a SSTable * / 
 - private AtomicInteger fileIndexGenerator = new AtomicInteger ( 0 ) ; 
 + private final AtomicInteger fileIndexGenerator = new AtomicInteger ( 0 ) ; 
 
 public final SecondaryIndexManager indexManager ; 
 
 - private LatencyTracker readStats = new LatencyTracker ( ) ; 
 - private LatencyTracker writeStats = new LatencyTracker ( ) ; 
 + private final LatencyTracker readStats = new LatencyTracker ( ) ; 
 + private final LatencyTracker writeStats = new LatencyTracker ( ) ; 
 
 / / counts of sstables accessed by reads 
 private final EstimatedHistogram recentSSTablesPerRead = new EstimatedHistogram ( 35 ) ; 
 @ @ - 226 , 12 + 222 , 10 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 / / scan for sstables corresponding to this cf and load them 
 data = new DataTracker ( this ) ; 
 - Set < DecoratedKey > savedKeys = caching = = Caching . NONE | | caching = = Caching . ROWS _ ONLY 
 - ? Collections . < DecoratedKey > emptySet ( ) 
 - : CacheService . instance . keyCache . readSaved ( table . name , columnFamily ) ; 
 - 
 Directories . SSTableLister sstables = directories . sstableLister ( ) . skipCompacted ( true ) . skipTemporary ( true ) ; 
 - data . addInitialSSTables ( SSTableReader . batchOpen ( sstables . list ( ) . entrySet ( ) , savedKeys , data , metadata , this . partitioner ) ) ; 
 + data . addInitialSSTables ( SSTableReader . batchOpen ( sstables . list ( ) . entrySet ( ) , data , metadata , this . partitioner ) ) ; 
 + if ( caching = = Caching . ALL | | caching = = Caching . KEYS _ ONLY ) 
 + CacheService . instance . keyCache . loadSaved ( this ) ; 
 
 / / compaction strategy should be created after the CFS has been prepared 
 this . compactionStrategy = metadata . createCompactionStrategyInstance ( this ) ; 
 @ @ - 323 , 7 + 317 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 Descriptor desc = entry . getKey ( ) ; 
 generations . add ( desc . generation ) ; 
 if ( ! desc . isCompatible ( ) ) 
 - throw new RuntimeException ( String . format ( " Can ' t open incompatible SSTable ! Current version % s , found file : % s " , Descriptor . CURRENT _ VERSION , desc ) ) ; 
 + throw new RuntimeException ( String . format ( " Can ' t open incompatible SSTable ! Current version % s , found file : % s " , Descriptor . Version . CURRENT , desc ) ) ; 
 } 
 Collections . sort ( generations ) ; 
 int value = ( generations . size ( ) > 0 ) ? ( generations . get ( generations . size ( ) - 1 ) ) : 0 ; 
 @ @ - 408 , 19 + 402 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 long start = System . currentTimeMillis ( ) ; 
 
 - AutoSavingCache < RowCacheKey , IRowCacheEntry > rowCache = CacheService . instance . rowCache ; 
 - 
 - / / results are sorted on read ( via treeset ) because there are few reads and many writes and reads only happen at startup 
 - int cachedRowsRead = 0 ; 
 - for ( DecoratedKey key : rowCache . readSaved ( table . name , columnFamily ) ) 
 - { 
 - ColumnFamily data = getTopLevelColumns ( QueryFilter . getIdentityFilter ( key , new QueryPath ( columnFamily ) ) , 
 - Integer . MIN _ VALUE , 
 - true ) ; 
 - CacheService . instance . rowCache . put ( new RowCacheKey ( metadata . cfId , key ) , data ) ; 
 - cachedRowsRead + + ; 
 - } 
 - 
 + int cachedRowsRead = CacheService . instance . rowCache . loadSaved ( this ) ; 
 if ( cachedRowsRead > 0 ) 
 logger . info ( String . format ( " completed loading ( % d ms ; % d keys ) row cache for % s . % s " , 
 System . currentTimeMillis ( ) - start , 
 @ @ - 466 , 7 + 448 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 if ( ! descriptor . isCompatible ( ) ) 
 throw new RuntimeException ( String . format ( " Can ' t open incompatible SSTable ! Current version % s , found file : % s " , 
 - Descriptor . CURRENT _ VERSION , 
 + Descriptor . Version . CURRENT , 
 descriptor ) ) ; 
 
 Descriptor newDescriptor = new Descriptor ( descriptor . version , 
 @ @ - 481 , 7 + 463 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 SSTableReader reader ; 
 try 
 { 
 - reader = SSTableReader . open ( newDescriptor , entry . getValue ( ) , Collections . < DecoratedKey > emptySet ( ) , data , metadata , partitioner ) ; 
 + reader = SSTableReader . open ( newDescriptor , entry . getValue ( ) , data , metadata , partitioner ) ; 
 } 
 catch ( IOException e ) 
 { 
 @ @ - 558 , 7 + 540 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 * When the sstable object is closed , it will be renamed to a non - temporary 
 * format , so incomplete sstables can be recognized and removed on startup . 
 * / 
 - public String getFlushPath ( long estimatedSize , String version ) 
 + public String getFlushPath ( long estimatedSize , Descriptor . Version version ) 
 { 
 File location = directories . getDirectoryForNewSSTables ( estimatedSize ) ; 
 if ( location = = null ) 
 @ @ - 566 , 7 + 548 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 return getTempSSTablePath ( location , version ) ; 
 } 
 
 - public String getTempSSTablePath ( File directory , String version ) 
 + public String getTempSSTablePath ( File directory , Descriptor . Version version ) 
 { 
 Descriptor desc = new Descriptor ( version , 
 directory , 
 @ @ - 579 , 7 + 561 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 public String getTempSSTablePath ( File directory ) 
 { 
 - return getTempSSTablePath ( directory , Descriptor . CURRENT _ VERSION ) ; 
 + return getTempSSTablePath ( directory , Descriptor . Version . CURRENT ) ; 
 } 
 
 / * * flush the given memtable and swap in a new one for its CFS , if it hasn ' t been frozen already . threadsafe . * / 
 @ @ - 759 , 11 + 741 , 8 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 public static ColumnFamily removeDeletedCF ( ColumnFamily cf , int gcBefore ) 
 { 
 - if ( cf . getColumnCount ( ) = = 0 & & ( ! cf . isMarkedForDelete ( ) | | cf . getLocalDeletionTime ( ) < gcBefore ) ) 
 - return null ; 
 - 
 cf . maybeResetDeletionTimes ( gcBefore ) ; 
 - return cf ; 
 + return cf . getColumnCount ( ) = = 0 & & ! cf . isMarkedForDelete ( ) ? null : cf ; 
 } 
 
 / * 
 @ @ - 799 , 10 + 778 , 9 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 IColumn c = iter . next ( ) ; 
 ByteBuffer cname = c . name ( ) ; 
 / / remove columns if 
 - / / ( a ) the column itself is tombstoned or 
 - / / ( b ) the CF is tombstoned and the column is not newer than it 
 - if ( c . getLocalDeletionTime ( ) < gcBefore 
 - | | c . timestamp ( ) < = cf . getMarkedForDeleteAt ( ) ) 
 + / / ( a ) the column itself is gcable or 
 + / / ( b ) the column is shadowed by a CF tombstone 
 + if ( c . getLocalDeletionTime ( ) < gcBefore | | cf . deletionInfo ( ) . isDeleted ( c ) ) 
 { 
 iter . remove ( ) ; 
 } 
 @ @ - 818 , 28 + 796 , 26 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 while ( iter . hasNext ( ) ) 
 { 
 SuperColumn c = ( SuperColumn ) iter . next ( ) ; 
 - long minTimestamp = Math . max ( c . getMarkedForDeleteAt ( ) , cf . getMarkedForDeleteAt ( ) ) ; 
 Iterator < IColumn > subIter = c . getSubColumns ( ) . iterator ( ) ; 
 while ( subIter . hasNext ( ) ) 
 { 
 IColumn subColumn = subIter . next ( ) ; 
 / / remove subcolumns if 
 - / / ( a ) the subcolumn itself is tombstoned or 
 - / / ( b ) the supercolumn is tombstoned and the subcolumn is not newer than it 
 - if ( subColumn . timestamp ( ) < = minTimestamp 
 - | | subColumn . getLocalDeletionTime ( ) < gcBefore ) 
 + / / ( a ) the subcolumn itself is gcable or 
 + / / ( b ) the supercolumn is shadowed by the CF and the column is not newer 
 + / / ( b ) the subcolumn is shadowed by the supercolumn 
 + if ( subColumn . getLocalDeletionTime ( ) < gcBefore 
 + | | cf . deletionInfo ( ) . isDeleted ( c . name ( ) , subColumn . timestamp ( ) ) 
 + | | c . deletionInfo ( ) . isDeleted ( subColumn ) ) 
 { 
 subIter . remove ( ) ; 
 } 
 } 
 - if ( c . getSubColumns ( ) . isEmpty ( ) & & ( ! c . isMarkedForDelete ( ) | | c . getLocalDeletionTime ( ) < gcBefore ) ) 
 + c . maybeResetDeletionTimes ( gcBefore ) ; 
 + if ( c . getSubColumns ( ) . isEmpty ( ) & & ! c . isMarkedForDelete ( ) ) 
 { 
 iter . remove ( ) ; 
 } 
 - else 
 - { 
 - c . maybeResetDeletionTimes ( gcBefore ) ; 
 - } 
 } 
 } 
 
 @ @ - 855 , 12 + 831 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 if ( sstables . isEmpty ( ) ) 
 return ImmutableSet . of ( ) ; 
 
 - IntervalTree < SSTableReader > tree = data . getView ( ) . intervalTree ; 
 + DataTracker . SSTableIntervalTree tree = data . getView ( ) . intervalTree ; 
 
 Set < SSTableReader > results = null ; 
 for ( SSTableReader sstable : sstables ) 
 { 
 - Set < SSTableReader > overlaps = ImmutableSet . copyOf ( tree . search ( new Interval < SSTableReader > ( sstable . first , sstable . last ) ) ) ; 
 + Set < SSTableReader > overlaps = ImmutableSet . copyOf ( tree . search ( Interval . < RowPosition , SSTableReader > create ( sstable . first , sstable . last ) ) ) ; 
 assert overlaps . contains ( sstable ) ; 
 results = results = = null ? overlaps : Sets . union ( results , overlaps ) ; 
 } 
 @ @ - 1131 , 7 + 1107 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 * @ return the entire row for filter . key , if present in the cache ( or we can cache it ) , or just the column 
 * specified by filter otherwise 
 * / 
 - private ColumnFamily getThroughCache ( Integer cfId , QueryFilter filter ) 
 + private ColumnFamily getThroughCache ( UUID cfId , QueryFilter filter ) 
 { 
 assert isRowCacheEnabled ( ) 
 : String . format ( " Row cache is not enabled on column family [ " + getColumnFamilyName ( ) + " ] " ) ; 
 @ @ - 1190 , 7 + 1166 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 return cf . isSuper ( ) ? removeDeleted ( cf , gcBefore ) : removeDeletedCF ( cf , gcBefore ) ; 
 } 
 
 - Integer cfId = Schema . instance . getId ( table . name , this . columnFamily ) ; 
 + UUID cfId = Schema . instance . getId ( table . name , this . columnFamily ) ; 
 if ( cfId = = null ) 
 return null ; / / secondary index 
 
 @ @ - 1214 , 8 + 1190 , 8 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) 
 { 
 ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) , filter . filter . isReversed ( ) ) ; 
 - IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null ) ; 
 - filter . collateColumns ( cf , Collections . singletonList ( ci ) , gcBefore ) ; 
 + OnDiskAtomIterator ci = filter . getMemtableColumnIterator ( cached , null ) ; 
 + filter . collateOnDiskAtom ( cf , Collections . singletonList ( ci ) , gcBefore ) ; 
 / / TODO this is necessary because when we collate supercolumns together , we don ' t check 
 / / their subcolumns for relevance , so we need to do a second prune post facto here . 
 return cf . isSuper ( ) ? removeDeleted ( cf , gcBefore ) : removeDeletedCF ( cf , gcBefore ) ; 
 @ @ - 1265 , 7 + 1241 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 while ( true ) 
 { 
 view = data . getView ( ) ; 
 - sstables = view . intervalTree . search ( new Interval ( key , key ) ) ; 
 + sstables = view . intervalTree . search ( key ) ; 
 if ( SSTableReader . acquireReferences ( sstables ) ) 
 break ; 
 / / retry w / new view 
 @ @ - 1285 , 9 + 1261 , 17 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 view = data . getView ( ) ; 
 / / startAt = = minimum is ok , but stopAt = = minimum is confusing because all IntervalTree deals with 
 - / / is Comparable , so it won ' t know to special - case that . 
 - Comparable stopInTree = stopAt . isMinimum ( ) ? view . intervalTree . max ( ) : stopAt ; 
 - sstables = view . intervalTree . search ( new Interval ( startWith , stopInTree ) ) ; 
 + / / is Comparable , so it won ' t know to special - case that . However max ( ) should not be call if the 
 + / / intervalTree is empty sochecking that first 
 + / / 
 + if ( view . intervalTree . isEmpty ( ) ) 
 + { 
 + sstables = Collections . < SSTableReader > emptyList ( ) ; 
 + break ; 
 + } 
 + 
 + RowPosition stopInTree = stopAt . isMinimum ( ) ? view . intervalTree . max ( ) : stopAt ; 
 + sstables = view . intervalTree . search ( Interval . < RowPosition , SSTableReader > create ( startWith , stopInTree ) ) ; 
 if ( SSTableReader . acquireReferences ( sstables ) ) 
 break ; 
 / / retry w / new view 
 @ @ - 1305 , 7 + 1289 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 for ( SSTableReader sstr : view . sstables ) 
 { 
 / / check if the key actually exists in this sstable , without updating cache and stats 
 - if ( sstr . getPosition ( dk , SSTableReader . Operator . EQ , false ) > - 1 ) 
 + if ( sstr . getPosition ( dk , SSTableReader . Operator . EQ , false ) ! = null ) 
 files . add ( sstr . getFilename ( ) ) ; 
 } 
 return files ; 
 @ @ - 1315 , 7 + 1299 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 - private ColumnFamily getTopLevelColumns ( QueryFilter filter , int gcBefore , boolean forCache ) 
 + public ColumnFamily getTopLevelColumns ( QueryFilter filter , int gcBefore , boolean forCache ) 
 { 
 CollationController controller = new CollationController ( this , forCache , filter , gcBefore ) ; 
 ColumnFamily columns = controller . getTopLevelColumns ( ) ; 
 @ @ - 1607 , 7 + 1591 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 public void invalidateCachedRow ( DecoratedKey key ) 
 { 
 - Integer cfId = Schema . instance . getId ( table . name , this . columnFamily ) ; 
 + UUID cfId = Schema . instance . getId ( table . name , this . columnFamily ) ; 
 if ( cfId = = null ) 
 return ; / / secondary index 
 
 @ @ - 1637 , 10 + 1621 , 10 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 return cfses ; 
 } 
 
 - public Iterable < DecoratedKey < ? > > keySamples ( Range < Token > range ) 
 + public Iterable < DecoratedKey > keySamples ( Range < Token > range ) 
 { 
 Collection < SSTableReader > sstables = getSSTables ( ) ; 
 - Iterable < DecoratedKey < ? > > [ ] samples = new Iterable [ sstables . size ( ) ] ; 
 + Iterable < DecoratedKey > [ ] samples = new Iterable [ sstables . size ( ) ] ; 
 int i = 0 ; 
 for ( SSTableReader sstable : sstables ) 
 { 
 @ @ - 1903 , 12 + 1887 , 6 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 return partitioner instanceof LocalPartitioner ; 
 } 
 
 - private String getParentColumnfamily ( ) 
 - { 
 - assert isIndex ( ) ; 
 - return columnFamily . split ( " \ \ . " ) [ 0 ] ; 
 - } 
 - 
 private ByteBuffer intern ( ByteBuffer name ) 
 { 
 ByteBuffer internedName = internedNames . get ( name ) ; 
 @ @ - 1941 , 7 + 1919 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 public SSTableWriter createFlushWriter ( long estimatedRows , long estimatedSize , ReplayPosition context ) throws IOException 
 { 
 SSTableMetadata . Collector sstableMetadataCollector = SSTableMetadata . createCollector ( ) . replayPosition ( context ) ; 
 - return new SSTableWriter ( getFlushPath ( estimatedSize , Descriptor . CURRENT _ VERSION ) , 
 + return new SSTableWriter ( getFlushPath ( estimatedSize , Descriptor . Version . CURRENT ) , 
 estimatedRows , 
 metadata , 
 partitioner , 
 diff - - git a / test / unit / org / apache / cassandra / db / RowCacheTest . java b / test / unit / org / apache / cassandra / db / RowCacheTest . java 
 index e6b4578 . . 99b8cbc 100644 
 - - - a / test / unit / org / apache / cassandra / db / RowCacheTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RowCacheTest . java 
 @ @ - 153 , 6 + 153 , 6 @ @ public class RowCacheTest extends SchemaLoader 
 / / empty the cache again to make sure values came from disk 
 CacheService . instance . invalidateRowCache ( ) ; 
 assert CacheService . instance . rowCache . size ( ) = = 0 ; 
 - assert CacheService . instance . rowCache . readSaved ( KEYSPACE , COLUMN _ FAMILY ) . size ( ) = = ( keysToSave = = Integer . MAX _ VALUE ? totalKeys : keysToSave ) ; 
 + assert CacheService . instance . rowCache . loadSaved ( store ) = = ( keysToSave = = Integer . MAX _ VALUE ? totalKeys : keysToSave ) ; 
 } 
 }
