BLEU SCORE: 0.0379680177759557

TEST MSG: Fixed cqlshlib . test . remove _ test _ db
GENERATED MSG: Ninja : Adjust cqlsh unit - tests for 2 . 1

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 837c3fb . . ffd92b5 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 8 <nl> + * Fixed cqlshlib . test . remove _ test _ db ( CASSANDRA - 12214 ) <nl> * Synchronize ThriftServer : : stop ( ) ( CASSANDRA - 12105 ) <nl> * Use dedicated thread for JMX notifications ( CASSANDRA - 12146 ) <nl> * NPE when trying to remove purgable tombstones from result ( CASSANDRA - 12143 ) <nl> diff - - git a / pylib / cqlshlib / test / _ _ init _ _ . py b / pylib / cqlshlib / test / _ _ init _ _ . py <nl> index 31f66f3 . . ba8f373 100644 <nl> - - - a / pylib / cqlshlib / test / _ _ init _ _ . py <nl> + + + b / pylib / cqlshlib / test / _ _ init _ _ . py <nl> @ @ - 14 , 7 + 14 , 7 @ @ <nl> # See the License for the specific language governing permissions and <nl> # limitations under the License . <nl> <nl> - from . cassconnect import create _ test _ db , remove _ test _ db <nl> + from . cassconnect import create _ db , remove _ db <nl> <nl> - setUp = create _ test _ db <nl> - tearDown = remove _ test _ db <nl> + setUp = create _ db <nl> + tearDown = remove _ db <nl> diff - - git a / pylib / cqlshlib / test / cassconnect . py b / pylib / cqlshlib / test / cassconnect . py <nl> index 94910a6 . . 4a1311e 100644 <nl> - - - a / pylib / cqlshlib / test / cassconnect . py <nl> + + + b / pylib / cqlshlib / test / cassconnect . py <nl> @ @ - 37 , 15 + 37 , 15 @ @ def get _ cassandra _ cursor ( cql _ version = cqlsh . DEFAULT _ CQLVER ) : <nl> <nl> TEST _ KEYSPACES _ CREATED = [ ] <nl> <nl> - def get _ test _ keyspace ( ) : <nl> - return TEST _ KEYSPACES _ CREATED [ - 1 ] <nl> + def get _ keyspace ( ) : <nl> + return None if len ( TEST _ KEYSPACES _ CREATED ) = = 0 else TEST _ KEYSPACES _ CREATED [ - 1 ] <nl> <nl> - def make _ test _ ks _ name ( ) : <nl> + def make _ ks _ name ( ) : <nl> # abuse mktemp to get a quick random - ish name <nl> return os . path . basename ( tempfile . mktemp ( prefix = ' CqlshTests _ ' ) ) <nl> <nl> - def create _ test _ keyspace ( cursor ) : <nl> - ksname = make _ test _ ks _ name ( ) <nl> + def create _ keyspace ( cursor ) : <nl> + ksname = make _ ks _ name ( ) <nl> qksname = quote _ name ( ksname ) <nl> cursor . execute ( ' ' ' <nl> CREATE KEYSPACE % s WITH replication = <nl> @ @ - 72 , 13 + 72 , 13 @ @ def execute _ cql _ file ( cursor , fname ) : <nl> with open ( fname ) as f : <nl> return execute _ cql _ commands ( cursor , f . read ( ) ) <nl> <nl> - def create _ test _ db ( ) : <nl> + def create _ db ( ) : <nl> with cassandra _ cursor ( ks = None ) as c : <nl> - k = create _ test _ keyspace ( c ) <nl> + k = create _ keyspace ( c ) <nl> execute _ cql _ file ( c , test _ keyspace _ init ) <nl> return k <nl> <nl> - def remove _ test _ db ( ) : <nl> + def remove _ db ( ) : <nl> with cassandra _ cursor ( ks = None ) as c : <nl> c . execute ( ' DROP KEYSPACE % s ' % quote _ name ( TEST _ KEYSPACES _ CREATED . pop ( - 1 ) ) ) <nl> <nl> @ @ - 112 , 7 + 112 , 7 @ @ def cassandra _ cursor ( cql _ version = None , ks = ' ' ) : <nl> " " " <nl> <nl> if ks = = ' ' : <nl> - ks = get _ test _ keyspace ( ) <nl> + ks = get _ keyspace ( ) <nl> conn = get _ cassandra _ connection ( cql _ version = cql _ version ) <nl> try : <nl> c = conn . connect ( ks ) <nl> @ @ - 131 , 10 + 131 , 10 @ @ def testrun _ cqlsh ( keyspace = DEFAULTVAL , * * kwargs ) : <nl> # use a positive default sentinel so that keyspace = None can be used <nl> # to override the default behavior <nl> if keyspace is DEFAULTVAL : <nl> - keyspace = get _ test _ keyspace ( ) <nl> + keyspace = get _ keyspace ( ) <nl> return run _ cqlsh ( keyspace = keyspace , * * kwargs ) <nl> <nl> def testcall _ cqlsh ( keyspace = None , * * kwargs ) : <nl> if keyspace is None : <nl> - keyspace = get _ test _ keyspace ( ) <nl> + keyspace = get _ keyspace ( ) <nl> return call _ cqlsh ( keyspace = keyspace , * * kwargs ) <nl> diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ output . py b / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> index fdc562f . . 60699f3 100644 <nl> - - - a / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> + + + b / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> @ @ - 23 , 7 + 23 , 7 @ @ import re <nl> from itertools import izip <nl> from . basecase import ( BaseTestCase , cqlshlog , dedent , at _ a _ time , cqlsh , <nl> TEST _ HOST , TEST _ PORT ) <nl> - from . cassconnect import ( get _ test _ keyspace , testrun _ cqlsh , testcall _ cqlsh , <nl> + from . cassconnect import ( get _ keyspace , testrun _ cqlsh , testcall _ cqlsh , <nl> cassandra _ cursor , split _ cql _ commands , quote _ name ) <nl> from . ansi _ colors import ( ColoredText , lookup _ colorcode , lookup _ colorname , <nl> lookup _ colorletter , ansi _ seq ) <nl> @ @ - 534 , 10 + 534 , 10 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> output = c . read _ to _ next _ prompt ( ) . replace ( ' \ r \ n ' , ' \ n ' ) <nl> self . assertTrue ( output . endswith ( ' cqlsh > ' ) ) <nl> <nl> - cmd = " USE \ " % s \ " ; \ n " % get _ test _ keyspace ( ) . replace ( ' " ' , ' " " ' ) <nl> + cmd = " USE \ " % s \ " ; \ n " % get _ keyspace ( ) . replace ( ' " ' , ' " " ' ) <nl> c . send ( cmd ) <nl> output = c . read _ to _ next _ prompt ( ) . replace ( ' \ r \ n ' , ' \ n ' ) <nl> - self . assertTrue ( output . endswith ( ' cqlsh : % s > ' % ( get _ test _ keyspace ( ) ) ) ) <nl> + self . assertTrue ( output . endswith ( ' cqlsh : % s > ' % ( get _ keyspace ( ) ) ) ) <nl> <nl> c . send ( ' use system ; \ n ' ) <nl> output = c . read _ to _ next _ prompt ( ) . replace ( ' \ r \ n ' , ' \ n ' ) <nl> @ @ - 561 , 7 + 561 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> def test _ describe _ keyspace _ output ( self ) : <nl> fullcqlver = cqlsh . DEFAULT _ CQLVER <nl> with testrun _ cqlsh ( tty = True , cqlver = fullcqlver ) as c : <nl> - ks = get _ test _ keyspace ( ) <nl> + ks = get _ keyspace ( ) <nl> qks = quote _ name ( ks ) <nl> for cmd in ( ' describe keyspace ' , ' desc keyspace ' ) : <nl> for givename in ( ' system ' , ' ' , qks ) : <nl> @ @ - 632 , 7 + 632 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> AND read _ repair _ chance = 0 . 0 <nl> AND speculative _ retry = ' 99 . 0PERCENTILE ' ; <nl> <nl> - " " " % quote _ name ( get _ test _ keyspace ( ) ) ) <nl> + " " " % quote _ name ( get _ keyspace ( ) ) ) <nl> <nl> with testrun _ cqlsh ( tty = True , cqlver = cqlsh . DEFAULT _ CQLVER ) as c : <nl> for cmdword in ( ' describe table ' , ' desc columnfamily ' ) : <nl> @ @ - 650 , 7 + 650 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> \ n <nl> ' ' ' <nl> <nl> - ks = get _ test _ keyspace ( ) <nl> + ks = get _ keyspace ( ) <nl> <nl> with testrun _ cqlsh ( tty = True , keyspace = None , cqlver = cqlsh . DEFAULT _ CQLVER ) as c : <nl> <nl> @ @ - 711 , 7 + 711 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> self . assertNoHasColors ( output ) <nl> self . assertRegexpMatches ( output , output _ re + ' $ ' ) <nl> <nl> - c . send ( ' USE % s ; \ n ' % quote _ name ( get _ test _ keyspace ( ) ) ) <nl> + c . send ( ' USE % s ; \ n ' % quote _ name ( get _ keyspace ( ) ) ) <nl> c . read _ to _ next _ prompt ( ) <nl> <nl> for semicolon in ( ' ' , ' ; ' ) :
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 837c3fb . . ffd92b5 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 8 
 + * Fixed cqlshlib . test . remove _ test _ db ( CASSANDRA - 12214 ) 
 * Synchronize ThriftServer : : stop ( ) ( CASSANDRA - 12105 ) 
 * Use dedicated thread for JMX notifications ( CASSANDRA - 12146 ) 
 * NPE when trying to remove purgable tombstones from result ( CASSANDRA - 12143 ) 
 diff - - git a / pylib / cqlshlib / test / _ _ init _ _ . py b / pylib / cqlshlib / test / _ _ init _ _ . py 
 index 31f66f3 . . ba8f373 100644 
 - - - a / pylib / cqlshlib / test / _ _ init _ _ . py 
 + + + b / pylib / cqlshlib / test / _ _ init _ _ . py 
 @ @ - 14 , 7 + 14 , 7 @ @ 
 # See the License for the specific language governing permissions and 
 # limitations under the License . 
 
 - from . cassconnect import create _ test _ db , remove _ test _ db 
 + from . cassconnect import create _ db , remove _ db 
 
 - setUp = create _ test _ db 
 - tearDown = remove _ test _ db 
 + setUp = create _ db 
 + tearDown = remove _ db 
 diff - - git a / pylib / cqlshlib / test / cassconnect . py b / pylib / cqlshlib / test / cassconnect . py 
 index 94910a6 . . 4a1311e 100644 
 - - - a / pylib / cqlshlib / test / cassconnect . py 
 + + + b / pylib / cqlshlib / test / cassconnect . py 
 @ @ - 37 , 15 + 37 , 15 @ @ def get _ cassandra _ cursor ( cql _ version = cqlsh . DEFAULT _ CQLVER ) : 
 
 TEST _ KEYSPACES _ CREATED = [ ] 
 
 - def get _ test _ keyspace ( ) : 
 - return TEST _ KEYSPACES _ CREATED [ - 1 ] 
 + def get _ keyspace ( ) : 
 + return None if len ( TEST _ KEYSPACES _ CREATED ) = = 0 else TEST _ KEYSPACES _ CREATED [ - 1 ] 
 
 - def make _ test _ ks _ name ( ) : 
 + def make _ ks _ name ( ) : 
 # abuse mktemp to get a quick random - ish name 
 return os . path . basename ( tempfile . mktemp ( prefix = ' CqlshTests _ ' ) ) 
 
 - def create _ test _ keyspace ( cursor ) : 
 - ksname = make _ test _ ks _ name ( ) 
 + def create _ keyspace ( cursor ) : 
 + ksname = make _ ks _ name ( ) 
 qksname = quote _ name ( ksname ) 
 cursor . execute ( ' ' ' 
 CREATE KEYSPACE % s WITH replication = 
 @ @ - 72 , 13 + 72 , 13 @ @ def execute _ cql _ file ( cursor , fname ) : 
 with open ( fname ) as f : 
 return execute _ cql _ commands ( cursor , f . read ( ) ) 
 
 - def create _ test _ db ( ) : 
 + def create _ db ( ) : 
 with cassandra _ cursor ( ks = None ) as c : 
 - k = create _ test _ keyspace ( c ) 
 + k = create _ keyspace ( c ) 
 execute _ cql _ file ( c , test _ keyspace _ init ) 
 return k 
 
 - def remove _ test _ db ( ) : 
 + def remove _ db ( ) : 
 with cassandra _ cursor ( ks = None ) as c : 
 c . execute ( ' DROP KEYSPACE % s ' % quote _ name ( TEST _ KEYSPACES _ CREATED . pop ( - 1 ) ) ) 
 
 @ @ - 112 , 7 + 112 , 7 @ @ def cassandra _ cursor ( cql _ version = None , ks = ' ' ) : 
 " " " 
 
 if ks = = ' ' : 
 - ks = get _ test _ keyspace ( ) 
 + ks = get _ keyspace ( ) 
 conn = get _ cassandra _ connection ( cql _ version = cql _ version ) 
 try : 
 c = conn . connect ( ks ) 
 @ @ - 131 , 10 + 131 , 10 @ @ def testrun _ cqlsh ( keyspace = DEFAULTVAL , * * kwargs ) : 
 # use a positive default sentinel so that keyspace = None can be used 
 # to override the default behavior 
 if keyspace is DEFAULTVAL : 
 - keyspace = get _ test _ keyspace ( ) 
 + keyspace = get _ keyspace ( ) 
 return run _ cqlsh ( keyspace = keyspace , * * kwargs ) 
 
 def testcall _ cqlsh ( keyspace = None , * * kwargs ) : 
 if keyspace is None : 
 - keyspace = get _ test _ keyspace ( ) 
 + keyspace = get _ keyspace ( ) 
 return call _ cqlsh ( keyspace = keyspace , * * kwargs ) 
 diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ output . py b / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 index fdc562f . . 60699f3 100644 
 - - - a / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 + + + b / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 @ @ - 23 , 7 + 23 , 7 @ @ import re 
 from itertools import izip 
 from . basecase import ( BaseTestCase , cqlshlog , dedent , at _ a _ time , cqlsh , 
 TEST _ HOST , TEST _ PORT ) 
 - from . cassconnect import ( get _ test _ keyspace , testrun _ cqlsh , testcall _ cqlsh , 
 + from . cassconnect import ( get _ keyspace , testrun _ cqlsh , testcall _ cqlsh , 
 cassandra _ cursor , split _ cql _ commands , quote _ name ) 
 from . ansi _ colors import ( ColoredText , lookup _ colorcode , lookup _ colorname , 
 lookup _ colorletter , ansi _ seq ) 
 @ @ - 534 , 10 + 534 , 10 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 output = c . read _ to _ next _ prompt ( ) . replace ( ' \ r \ n ' , ' \ n ' ) 
 self . assertTrue ( output . endswith ( ' cqlsh > ' ) ) 
 
 - cmd = " USE \ " % s \ " ; \ n " % get _ test _ keyspace ( ) . replace ( ' " ' , ' " " ' ) 
 + cmd = " USE \ " % s \ " ; \ n " % get _ keyspace ( ) . replace ( ' " ' , ' " " ' ) 
 c . send ( cmd ) 
 output = c . read _ to _ next _ prompt ( ) . replace ( ' \ r \ n ' , ' \ n ' ) 
 - self . assertTrue ( output . endswith ( ' cqlsh : % s > ' % ( get _ test _ keyspace ( ) ) ) ) 
 + self . assertTrue ( output . endswith ( ' cqlsh : % s > ' % ( get _ keyspace ( ) ) ) ) 
 
 c . send ( ' use system ; \ n ' ) 
 output = c . read _ to _ next _ prompt ( ) . replace ( ' \ r \ n ' , ' \ n ' ) 
 @ @ - 561 , 7 + 561 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 def test _ describe _ keyspace _ output ( self ) : 
 fullcqlver = cqlsh . DEFAULT _ CQLVER 
 with testrun _ cqlsh ( tty = True , cqlver = fullcqlver ) as c : 
 - ks = get _ test _ keyspace ( ) 
 + ks = get _ keyspace ( ) 
 qks = quote _ name ( ks ) 
 for cmd in ( ' describe keyspace ' , ' desc keyspace ' ) : 
 for givename in ( ' system ' , ' ' , qks ) : 
 @ @ - 632 , 7 + 632 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 AND read _ repair _ chance = 0 . 0 
 AND speculative _ retry = ' 99 . 0PERCENTILE ' ; 
 
 - " " " % quote _ name ( get _ test _ keyspace ( ) ) ) 
 + " " " % quote _ name ( get _ keyspace ( ) ) ) 
 
 with testrun _ cqlsh ( tty = True , cqlver = cqlsh . DEFAULT _ CQLVER ) as c : 
 for cmdword in ( ' describe table ' , ' desc columnfamily ' ) : 
 @ @ - 650 , 7 + 650 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 \ n 
 ' ' ' 
 
 - ks = get _ test _ keyspace ( ) 
 + ks = get _ keyspace ( ) 
 
 with testrun _ cqlsh ( tty = True , keyspace = None , cqlver = cqlsh . DEFAULT _ CQLVER ) as c : 
 
 @ @ - 711 , 7 + 711 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 self . assertNoHasColors ( output ) 
 self . assertRegexpMatches ( output , output _ re + ' $ ' ) 
 
 - c . send ( ' USE % s ; \ n ' % quote _ name ( get _ test _ keyspace ( ) ) ) 
 + c . send ( ' USE % s ; \ n ' % quote _ name ( get _ keyspace ( ) ) ) 
 c . read _ to _ next _ prompt ( ) 
 
 for semicolon in ( ' ' , ' ; ' ) :

NEAREST DIFF:
ELIMINATEDSENTENCE
