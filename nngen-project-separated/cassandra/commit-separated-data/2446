BLEU SCORE: 0.03283637368030199

TEST MSG: Add missing iso8601 patterns for date strings
GENERATED MSG: range query support

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 3f8e3d0 . . bddb1d1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 3 + 1 , 7 @ @ <nl> + 2 . 0 . 9 <nl> + * Add missing iso8601 patterns for date strings ( 6973 ) <nl> + <nl> + <nl> 2 . 0 . 8 <nl> * Always reallocate buffers in HSHA ( CASSANDRA - 6285 ) <nl> * ( Hadoop ) support authentication in CqlRecordReader ( CASSANDRA - 7221 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / DateType . java b / src / java / org / apache / cassandra / db / marshal / DateType . java <nl> index 8e28bd4 . . 0c97688 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / DateType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / DateType . java <nl> @ @ - 38 , 9 + 38 , 6 @ @ public class DateType extends AbstractType < Date > <nl> <nl> public static final DateType instance = new DateType ( ) ; <nl> <nl> - static final String DEFAULT _ FORMAT = TimestampSerializer . iso8601Patterns [ 3 ] ; <nl> - static final SimpleDateFormat FORMATTER = new SimpleDateFormat ( DEFAULT _ FORMAT ) ; <nl> - <nl> DateType ( ) { } / / singleton <nl> <nl> public int compare ( ByteBuffer o1 , ByteBuffer o2 ) <nl> @ @ - 63 , 43 + 60 , 7 @ @ public class DateType extends AbstractType < Date > <nl> if ( source . isEmpty ( ) ) <nl> return ByteBufferUtil . EMPTY _ BYTE _ BUFFER ; <nl> <nl> - return ByteBufferUtil . bytes ( dateStringToTimestamp ( source ) ) ; <nl> - } <nl> - <nl> - public static long dateStringToTimestamp ( String source ) throws MarshalException <nl> - { <nl> - long millis ; <nl> - <nl> - if ( source . toLowerCase ( ) . equals ( " now " ) ) <nl> - { <nl> - millis = System . currentTimeMillis ( ) ; <nl> - } <nl> - / / Milliseconds since epoch ? <nl> - else if ( source . matches ( " ^ - ? \ \ d + $ " ) ) <nl> - { <nl> - try <nl> - { <nl> - millis = Long . parseLong ( source ) ; <nl> - } <nl> - catch ( NumberFormatException e ) <nl> - { <nl> - throw new MarshalException ( String . format ( " unable to make long ( for date ) from : ' % s ' " , source ) , e ) ; <nl> - } <nl> - } <nl> - / / Last chance , attempt to parse as date - time string <nl> - else <nl> - { <nl> - try <nl> - { <nl> - millis = DateUtils . parseDateStrictly ( source , TimestampSerializer . iso8601Patterns ) . getTime ( ) ; <nl> - } <nl> - catch ( ParseException e1 ) <nl> - { <nl> - throw new MarshalException ( String . format ( " unable to coerce ' % s ' to a formatted date ( long ) " , source ) , e1 ) ; <nl> - } <nl> - } <nl> - <nl> - return millis ; <nl> + return ByteBufferUtil . bytes ( TimestampSerializer . dateStringToTimestamp ( source ) ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> index 51cf47a . . fa82f06 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import org . apache . cassandra . cql3 . CQL3Type ; <nl> import org . apache . cassandra . serializers . TypeSerializer ; <nl> import org . apache . cassandra . serializers . MarshalException ; <nl> import org . apache . cassandra . serializers . TimeUUIDSerializer ; <nl> + import org . apache . cassandra . serializers . TimestampSerializer ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . UUIDGen ; <nl> <nl> @ @ - 110 , 9 + 111 , 10 @ @ public class TimeUUIDType extends AbstractType < UUID > <nl> <nl> if ( uuid . version ( ) ! = 1 ) <nl> throw new MarshalException ( " TimeUUID supports only version 1 UUIDs " ) ; <nl> - } else <nl> + } <nl> + else <nl> { <nl> - idBytes = ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( DateType . dateStringToTimestamp ( source ) ) ) ; <nl> + idBytes = ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( TimestampSerializer . dateStringToTimestamp ( source ) ) ) ; <nl> } <nl> <nl> return idBytes ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / TimestampType . java b / src / java / org / apache / cassandra / db / marshal / TimestampType . java <nl> index cf1ea41 . . 69ead8e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / TimestampType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / TimestampType . java <nl> @ @ - 18 , 9 + 18 , 7 @ @ <nl> package org . apache . cassandra . db . marshal ; <nl> <nl> import java . nio . ByteBuffer ; <nl> - import java . text . ParseException ; <nl> import java . util . Date ; <nl> - import java . util . regex . Pattern ; <nl> <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 29 , 7 + 27 , 6 @ @ import org . apache . cassandra . serializers . TypeSerializer ; <nl> import org . apache . cassandra . serializers . MarshalException ; <nl> import org . apache . cassandra . serializers . TimestampSerializer ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> - import org . apache . commons . lang3 . time . DateUtils ; <nl> <nl> / * * <nl> * Type for date - time values . <nl> @ @ - 44 , 8 + 41 , 6 @ @ public class TimestampType extends AbstractType < Date > <nl> <nl> public static final TimestampType instance = new TimestampType ( ) ; <nl> <nl> - private static final Pattern timestampPattern = Pattern . compile ( " ^ - ? \ \ d + $ " ) ; <nl> - <nl> private TimestampType ( ) { } / / singleton <nl> <nl> public int compare ( ByteBuffer o1 , ByteBuffer o2 ) <nl> @ @ - 59 , 43 + 54 , 7 @ @ public class TimestampType extends AbstractType < Date > <nl> if ( source . isEmpty ( ) ) <nl> return ByteBufferUtil . EMPTY _ BYTE _ BUFFER ; <nl> <nl> - return ByteBufferUtil . bytes ( dateStringToTimestamp ( source ) ) ; <nl> - } <nl> - <nl> - public static long dateStringToTimestamp ( String source ) throws MarshalException <nl> - { <nl> - long millis ; <nl> - <nl> - if ( source . toLowerCase ( ) . equals ( " now " ) ) <nl> - { <nl> - millis = System . currentTimeMillis ( ) ; <nl> - } <nl> - / / Milliseconds since epoch ? <nl> - else if ( timestampPattern . matcher ( source ) . matches ( ) ) <nl> - { <nl> - try <nl> - { <nl> - millis = Long . parseLong ( source ) ; <nl> - } <nl> - catch ( NumberFormatException e ) <nl> - { <nl> - throw new MarshalException ( String . format ( " unable to make long ( for date ) from : ' % s ' " , source ) , e ) ; <nl> - } <nl> - } <nl> - / / Last chance , attempt to parse as date - time string <nl> - else <nl> - { <nl> - try <nl> - { <nl> - millis = DateUtils . parseDateStrictly ( source , TimestampSerializer . iso8601Patterns ) . getTime ( ) ; <nl> - } <nl> - catch ( ParseException e1 ) <nl> - { <nl> - throw new MarshalException ( String . format ( " unable to coerce ' % s ' to a formatted date ( long ) " , source ) , e1 ) ; <nl> - } <nl> - } <nl> - <nl> - return millis ; <nl> + return ByteBufferUtil . bytes ( TimestampSerializer . dateStringToTimestamp ( source ) ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / UUIDType . java b / src / java / org / apache / cassandra / db / marshal / UUIDType . java <nl> index 4b0751e . . 969ff17 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / UUIDType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / UUIDType . java <nl> @ @ - 26 , 12 + 26 , 11 @ @ import org . apache . cassandra . cql3 . CQL3Type ; <nl> import org . apache . cassandra . serializers . TypeSerializer ; <nl> import org . apache . cassandra . serializers . MarshalException ; <nl> import org . apache . cassandra . serializers . UUIDSerializer ; <nl> + import org . apache . cassandra . serializers . TimestampSerializer ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . UUIDGen ; <nl> import org . apache . commons . lang3 . time . DateUtils ; <nl> <nl> - import static org . apache . cassandra . serializers . TimestampSerializer . iso8601Patterns ; <nl> - <nl> / * * <nl> * Compares UUIDs using the following criteria : < br > <nl> * - if count of supplied bytes is less than 16 , compare counts < br > <nl> @ @ - 165 , 8 + 164 , 6 @ @ public class UUIDType extends AbstractType < UUID > <nl> if ( source . isEmpty ( ) ) <nl> return ByteBufferUtil . EMPTY _ BYTE _ BUFFER ; <nl> <nl> - ByteBuffer idBytes = null ; <nl> - <nl> / / ffffffff - ffff - ffff - ffff - ffffffffff <nl> if ( TimeUUIDType . regexPattern . matcher ( source ) . matches ( ) ) <nl> { <nl> @ @ - 174 , 43 + 171 , 22 @ @ public class UUIDType extends AbstractType < UUID > <nl> try <nl> { <nl> uuid = UUID . fromString ( source ) ; <nl> - idBytes = ByteBuffer . wrap ( UUIDGen . decompose ( uuid ) ) ; <nl> + return ByteBuffer . wrap ( UUIDGen . decompose ( uuid ) ) ; <nl> } <nl> catch ( IllegalArgumentException e ) <nl> { <nl> throw new MarshalException ( String . format ( " unable to make UUID from ' % s ' " , source ) , e ) ; <nl> } <nl> - } else if ( source . toLowerCase ( ) . equals ( " now " ) ) <nl> - { <nl> - idBytes = ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( ) ) ; <nl> } <nl> - / / Milliseconds since epoch ? <nl> - else if ( source . matches ( " ^ \ \ d + $ " ) ) <nl> + <nl> + try <nl> { <nl> - try <nl> - { <nl> - idBytes = ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( Long . parseLong ( source ) ) ) ; <nl> - } <nl> - catch ( NumberFormatException e ) <nl> - { <nl> - throw new MarshalException ( String . format ( " unable to make version 1 UUID from ' % s ' " , source ) , e ) ; <nl> - } <nl> + return ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( TimestampSerializer . dateStringToTimestamp ( source ) ) ) ; <nl> } <nl> - / / Last chance , attempt to parse as date - time string <nl> - else <nl> + catch ( MarshalException e ) <nl> { <nl> - try <nl> - { <nl> - long timestamp = DateUtils . parseDate ( source , iso8601Patterns ) . getTime ( ) ; <nl> - idBytes = ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( timestamp ) ) ; <nl> - } <nl> - catch ( ParseException e1 ) <nl> - { <nl> - throw new MarshalException ( String . format ( " unable to coerce ' % s ' to version 1 UUID " , source ) , e1 ) ; <nl> - } <nl> + throw new MarshalException ( String . format ( " unable to make version 1 UUID from ' % s ' " , source ) , e ) ; <nl> } <nl> - <nl> - return idBytes ; <nl> } <nl> <nl> public CQL3Type asCQL3Type ( ) <nl> diff - - git a / src / java / org / apache / cassandra / serializers / TimestampSerializer . java b / src / java / org / apache / cassandra / serializers / TimestampSerializer . java <nl> index f2a40f1 . . 5cb9586 100644 <nl> - - - a / src / java / org / apache / cassandra / serializers / TimestampSerializer . java <nl> + + + b / src / java / org / apache / cassandra / serializers / TimestampSerializer . java <nl> @ @ - 21 , 30 + 21 , 49 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> import java . nio . ByteBuffer ; <nl> import java . text . SimpleDateFormat ; <nl> + import java . text . ParseException ; <nl> import java . util . Date ; <nl> + import java . util . regex . Pattern ; <nl> + <nl> + import org . apache . commons . lang3 . time . DateUtils ; <nl> <nl> public class TimestampSerializer implements TypeSerializer < Date > <nl> { <nl> - public static final String [ ] iso8601Patterns = new String [ ] { <nl> + private static final String [ ] dateStringPatterns = new String [ ] { <nl> " yyyy - MM - dd HH : mm " , <nl> " yyyy - MM - dd HH : mm : ss " , <nl> - " yyyy - MM - dd HH : mmZ " , <nl> - " yyyy - MM - dd HH : mm : ssZ " , <nl> + " yyyy - MM - dd HH : mmX " , <nl> + " yyyy - MM - dd HH : mmXX " , <nl> + " yyyy - MM - dd HH : mmXXX " , <nl> + " yyyy - MM - dd HH : mm : ssX " , <nl> + " yyyy - MM - dd HH : mm : ssXX " , <nl> + " yyyy - MM - dd HH : mm : ssXXX " , <nl> " yyyy - MM - dd HH : mm : ss . SSS " , <nl> - " yyyy - MM - dd HH : mm : ss . SSSZ " , <nl> + " yyyy - MM - dd HH : mm : ss . SSSX " , <nl> + " yyyy - MM - dd HH : mm : ss . SSSXX " , <nl> + " yyyy - MM - dd HH : mm : ss . SSSXXX " , <nl> " yyyy - MM - dd ' T ' HH : mm " , <nl> - " yyyy - MM - dd ' T ' HH : mmZ " , <nl> + " yyyy - MM - dd ' T ' HH : mmX " , <nl> + " yyyy - MM - dd ' T ' HH : mmXX " , <nl> + " yyyy - MM - dd ' T ' HH : mmXXX " , <nl> " yyyy - MM - dd ' T ' HH : mm : ss " , <nl> - " yyyy - MM - dd ' T ' HH : mm : ssZ " , <nl> + " yyyy - MM - dd ' T ' HH : mm : ssX " , <nl> + " yyyy - MM - dd ' T ' HH : mm : ssXX " , <nl> + " yyyy - MM - dd ' T ' HH : mm : ssXXX " , <nl> " yyyy - MM - dd ' T ' HH : mm : ss . SSS " , <nl> - " yyyy - MM - dd ' T ' HH : mm : ss . SSSZ " , <nl> + " yyyy - MM - dd ' T ' HH : mm : ss . SSSX " , <nl> + " yyyy - MM - dd ' T ' HH : mm : ss . SSSXX " , <nl> + " yyyy - MM - dd ' T ' HH : mm : ss . SSSXXX " , <nl> " yyyy - MM - dd " , <nl> - " yyyy - MM - ddZ " <nl> + " yyyy - MM - ddX " , <nl> + " yyyy - MM - ddXX " , <nl> + " yyyy - MM - ddXXX " <nl> } ; <nl> <nl> - static final String DEFAULT _ FORMAT = iso8601Patterns [ 3 ] ; <nl> + private static final String DEFAULT _ FORMAT = dateStringPatterns [ 3 ] ; <nl> + private static final Pattern timestampPattern = Pattern . compile ( " ^ - ? \ \ d + $ " ) ; <nl> <nl> - static final ThreadLocal < SimpleDateFormat > FORMATTER = new ThreadLocal < SimpleDateFormat > ( ) <nl> + private static final ThreadLocal < SimpleDateFormat > FORMATTER = new ThreadLocal < SimpleDateFormat > ( ) <nl> { <nl> protected SimpleDateFormat initialValue ( ) <nl> { <nl> @ @ - 64 , 6 + 83 , 35 @ @ public class TimestampSerializer implements TypeSerializer < Date > <nl> return value = = null ? ByteBufferUtil . EMPTY _ BYTE _ BUFFER : ByteBufferUtil . bytes ( value . getTime ( ) ) ; <nl> } <nl> <nl> + public static long dateStringToTimestamp ( String source ) throws MarshalException <nl> + { <nl> + if ( source . equalsIgnoreCase ( " now " ) ) <nl> + return System . currentTimeMillis ( ) ; <nl> + <nl> + / / Milliseconds since epoch ? <nl> + if ( timestampPattern . matcher ( source ) . matches ( ) ) <nl> + { <nl> + try <nl> + { <nl> + return Long . parseLong ( source ) ; <nl> + } <nl> + catch ( NumberFormatException e ) <nl> + { <nl> + throw new MarshalException ( String . format ( " unable to make long ( for date ) from : ' % s ' " , source ) , e ) ; <nl> + } <nl> + } <nl> + <nl> + / / Last chance , attempt to parse as date - time string <nl> + try <nl> + { <nl> + return DateUtils . parseDateStrictly ( source , dateStringPatterns ) . getTime ( ) ; <nl> + } <nl> + catch ( ParseException e1 ) <nl> + { <nl> + throw new MarshalException ( String . format ( " unable to coerce ' % s ' to a formatted date ( long ) " , source ) , e1 ) ; <nl> + } <nl> + } <nl> + <nl> public void validate ( ByteBuffer bytes ) throws MarshalException <nl> { <nl> if ( bytes . remaining ( ) ! = 8 & & bytes . remaining ( ) ! = 0 ) <nl> diff - - git a / test / unit / org / apache / cassandra / serializers / TimestampSerializerTest . java b / test / unit / org / apache / cassandra / serializers / TimestampSerializerTest . java <nl> new file mode 100644 <nl> index 0000000 . . d991845 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / serializers / TimestampSerializerTest . java <nl> @ @ - 0 , 0 + 1 , 77 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + package org . apache . cassandra . serializers ; <nl> + <nl> + import java . util . List ; <nl> + import java . util . ArrayList ; <nl> + <nl> + import org . junit . Test ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> + import org . apache . cassandra . serializers . MarshalException ; <nl> + import org . apache . cassandra . serializers . TimestampSerializer ; <nl> + <nl> + public class TimestampSerializerTest <nl> + { <nl> + private String dates [ ] = new String [ ] <nl> + { <nl> + " 2014 - 04 - 01 " , <nl> + " 2014 - 04 - 01 + 0000 " , <nl> + " 2014 - 04 - 01 20 : 30 " , <nl> + " 2014 - 04 - 01 20 : 30 : 35 " , <nl> + " 2014 - 04 - 01 20 : 30 : 35Z " , <nl> + " 2014 - 04 - 01 20 : 30 + 07 " , <nl> + " 2014 - 04 - 01 20 : 30 + 0700 " , <nl> + " 2014 - 04 - 01 20 : 30 + 07 : 00 " , <nl> + " 2014 - 04 - 01 20 : 30 : 35 + 07 " , <nl> + " 2014 - 04 - 01 20 : 30 : 35 + 0700 " , <nl> + " 2014 - 04 - 01 20 : 30 : 35 + 07 : 00 " , <nl> + " 2014 - 04 - 01 20 : 30 : 35 . 898 " , <nl> + " 2014 - 04 - 01 20 : 30 : 35 . 898Z " , <nl> + " 2014 - 04 - 01 20 : 30 : 35 . 898 + 07 " , <nl> + " 2014 - 04 - 01 20 : 30 : 35 . 898 + 0700 " , <nl> + " 2014 - 04 - 01 20 : 30 : 35 . 898 + 07 : 00 " , <nl> + " 2014 - 04 - 01T20 : 30 " , <nl> + " 2014 - 04 - 01T20 : 30 : 25 " , <nl> + " 2014 - 04 - 01T20 : 30 : 35Z " , <nl> + " 2014 - 04 - 01T20 : 30 : 35 + 00 : 00 " , <nl> + " 2014 - 04 - 01T20 : 30 : 35 + 0700 " , <nl> + " 2014 - 04 - 01T20 : 30 : 35 + 07 : 00 " , <nl> + " 2014 - 04 - 01T20 : 30 : 35 . 898 " , <nl> + " 2014 - 04 - 01T20 : 30 : 35 . 898 + 00 : 00 " <nl> + } ; <nl> + <nl> + @ Test <nl> + public void testDateStringToTimestamp ( ) <nl> + { <nl> + List < String > unparsedDates = new ArrayList < > ( ) ; <nl> + for ( String date : dates ) <nl> + { <nl> + try <nl> + { <nl> + long millis = TimestampSerializer . dateStringToTimestamp ( date ) ; <nl> + } <nl> + catch ( MarshalException e ) <nl> + { <nl> + unparsedDates . add ( date ) ; <nl> + } <nl> + } <nl> + assertTrue ( " Unable to parse : " + unparsedDates , unparsedDates . isEmpty ( ) ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / org / apache / cassandra / config / DatabaseDescriptor . java b / src / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 683009c . . 73cf3a6 100644 <nl> - - - a / src / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 18 , 21 + 18 , 24 @ @ <nl> <nl> package org . apache . cassandra . config ; <nl> <nl> - import java . util . * ; <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . util . ArrayList ; <nl> + import java . util . HashMap ; <nl> + import java . util . HashSet ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . Set ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> - import java . io . * ; <nl> <nl> import org . apache . cassandra . db . ColumnFamily ; <nl> + import org . apache . cassandra . db . SystemTable ; <nl> import org . apache . cassandra . db . Table ; <nl> import org . apache . cassandra . db . TypeInfo ; <nl> - import org . apache . cassandra . db . DBManager ; <nl> - import org . apache . cassandra . db . SystemTable ; <nl> - import org . apache . cassandra . db . Table . TableMetadata ; <nl> import org . apache . cassandra . utils . FileUtils ; <nl> import org . apache . cassandra . utils . XMLUtils ; <nl> import org . w3c . dom . Node ; <nl> import org . w3c . dom . NodeList ; <nl> - import org . apache . cassandra . io . * ; <nl> <nl> <nl> / * * <nl> @ @ - 306 , 6 + 309 , 9 @ @ public class DatabaseDescriptor <nl> / * Read the table related stuff from config * / <nl> NodeList tables = xmlUtils . getRequestedNodeList ( " / Storage / Tables / Table " ) ; <nl> int size = tables . getLength ( ) ; <nl> + if ( size = = 0 ) { <nl> + throw new UnsupportedOperationException ( " A Table must be configured " ) ; <nl> + } <nl> for ( int i = 0 ; i < size ; + + i ) <nl> { <nl> Node table = tables . item ( i ) ; <nl> @ @ - 785 , 4 + 791 , 9 @ @ public class DatabaseDescriptor <nl> { <nl> return tableToCFMetaDataMap _ ; <nl> } <nl> + <nl> + public static String getTableName ( ) <nl> + { <nl> + return tables _ . get ( 0 ) ; <nl> + } <nl> } <nl> diff - - git a / src / org / apache / cassandra / db / ColumnFamily . java b / src / org / apache / cassandra / db / ColumnFamily . java <nl> index 51ac744 . . a2ac3a2 100644 <nl> - - - a / src / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 288 , 7 + 288 , 7 @ @ public final class ColumnFamily <nl> return columns _ . getSortedColumns ( ) ; <nl> } <nl> <nl> - Map < String , IColumn > getColumns ( ) <nl> + public Map < String , IColumn > getColumns ( ) <nl> { <nl> return columns _ . getColumns ( ) ; <nl> } <nl> diff - - git a / src / org / apache / cassandra / db / ColumnFamilyStore . java b / src / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index be7c245 . . 28bb3f7 100644 <nl> - - - a / src / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1384 , 4 + 1384 , 14 @ @ public class ColumnFamilyStore <nl> { <nl> memtable _ . get ( ) . flushOnRecovery ( ) ; <nl> } <nl> + <nl> + public Object getMemtable ( ) <nl> + { <nl> + return memtable _ . get ( ) ; <nl> + } <nl> + <nl> + public Set < String > getSSTableFilenames ( ) <nl> + { <nl> + return Collections . unmodifiableSet ( ssTables _ ) ; <nl> + } <nl> } <nl> diff - - git a / src / org / apache / cassandra / db / Memtable . java b / src / org / apache / cassandra / db / Memtable . java <nl> index 2bdad37 . . 567b829 100644 <nl> - - - a / src / org / apache / cassandra / db / Memtable . java <nl> + + + b / src / org / apache / cassandra / db / Memtable . java <nl> @ @ - 26 , 6 + 26 , 8 @ @ import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> + import java . util . Iterator ; <nl> + import java . util . PriorityQueue ; <nl> import java . util . concurrent . Callable ; <nl> import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . ExecutorService ; <nl> @ @ - 45 , 6 + 47 , 7 @ @ import org . apache . cassandra . io . DataOutputBuffer ; <nl> import org . apache . cassandra . io . SSTable ; <nl> import org . apache . cassandra . utils . BloomFilter ; <nl> import org . apache . cassandra . utils . LogUtil ; <nl> + import org . apache . cassandra . utils . DestructivePQIterator ; <nl> <nl> / * * <nl> * Author : Avinash Lakshman ( alakshman @ facebook . com ) & Prashant Malik ( pmalik @ facebook . com ) <nl> @ @ - 419 , 4 + 422 , 9 @ @ public class Memtable implements MemtableMBean , Comparable < Memtable > <nl> columnFamilies _ . clear ( ) ; <nl> } <nl> <nl> + public Iterator < String > sortedKeyIterator ( ) <nl> + { <nl> + return new DestructivePQIterator < String > ( new PriorityQueue < String > ( columnFamilies _ . keySet ( ) ) ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / org / apache / cassandra / db / MemtableManager . java b / src / org / apache / cassandra / db / MemtableManager . java <nl> index 997bbd3 . . 54242d1 100644 <nl> - - - a / src / org / apache / cassandra / db / MemtableManager . java <nl> + + + b / src / org / apache / cassandra / db / MemtableManager . java <nl> @ @ - 40 , 7 + 40 , 7 @ @ public class MemtableManager <nl> private static Lock lock _ = new ReentrantLock ( ) ; <nl> private static Logger logger _ = Logger . getLogger ( MemtableManager . class ) ; <nl> private ReentrantReadWriteLock rwLock _ = new ReentrantReadWriteLock ( true ) ; <nl> - static MemtableManager instance ( ) <nl> + public static MemtableManager instance ( ) <nl> { <nl> if ( instance _ = = null ) <nl> { <nl> @ @ - 157 , 7 + 157 , 22 @ @ public class MemtableManager <nl> 	 } <nl> } <nl> <nl> - <nl> - <nl> + public List < Memtable > getUnflushedMemtables ( String cfName ) <nl> + { <nl> + rwLock _ . readLock ( ) . lock ( ) ; <nl> + try <nl> + { <nl> + List < Memtable > memtables = history _ . get ( cfName ) ; <nl> + if ( memtables ! = null ) <nl> + { <nl> + return new ArrayList < Memtable > ( memtables ) ; <nl> + } <nl> + return Arrays . asList ( new Memtable [ 0 ] ) ; <nl> + } <nl> + finally <nl> + { <nl> + rwLock _ . readLock ( ) . unlock ( ) ; <nl> + } <nl> + } <nl> <nl> } <nl> diff - - git a / src / org / apache / cassandra / db / Table . java b / src / org / apache / cassandra / db / Table . java <nl> index 9c84b42 . . f1b260a 100644 <nl> - - - a / src / org / apache / cassandra / db / Table . java <nl> + + + b / src / org / apache / cassandra / db / Table . java <nl> @ @ - 60 , 7 + 60 , 7 @ @ public class Table <nl> * is basically the column family name and the ID associated with <nl> * this column family . We use this ID in the Commit Log header to <nl> * determine when a log file that has been rolled can be deleted . <nl> - * / <nl> + * / <nl> public static class TableMetadata <nl> { <nl> / * Name of the column family * / <nl> @ @ - 454 , 7 + 454 , 7 @ @ public class Table <nl> return columnFamilyStores _ ; <nl> } <nl> <nl> - ColumnFamilyStore getColumnFamilyStore ( String cfName ) <nl> + public ColumnFamilyStore getColumnFamilyStore ( String cfName ) <nl> { <nl> return columnFamilyStores _ . get ( cfName ) ; <nl> } <nl> @ @ - 875 , 4 + 875 , 17 @ @ public class Table <nl> long timeTaken = System . currentTimeMillis ( ) - start ; <nl> dbAnalyticsSource _ . updateWriteStatistics ( timeTaken ) ; <nl> } <nl> + <nl> + public Set < String > getApplicationColumnFamilies ( ) <nl> + { <nl> + Set < String > set = new HashSet < String > ( ) ; <nl> + for ( String cfName : getColumnFamilies ( ) ) <nl> + { <nl> + if ( DatabaseDescriptor . isApplicationColumnFamily ( cfName ) ) <nl> + { <nl> + set . add ( cfName ) ; <nl> + } <nl> + } <nl> + return set ; <nl> + } <nl> } <nl> diff - - git a / src / org / apache / cassandra / service / CassandraServer . java b / src / org / apache / cassandra / service / CassandraServer . java <nl> index 93b62e7 . . c2d5f66 100644 <nl> - - - a / src / org / apache / cassandra / service / CassandraServer . java <nl> + + + b / src / org / apache / cassandra / service / CassandraServer . java <nl> @ @ - 817 , 6 + 817 , 71 @ @ public class CassandraServer extends FacebookBase implements <nl> return result ; <nl> } <nl> <nl> + public List < String > get _ range ( String tablename , final String startkey ) throws CassandraException <nl> + { <nl> + logger _ . debug ( " get _ range " ) ; <nl> + <nl> + / / send request <nl> + Message message ; <nl> + DataOutputBuffer dob = new DataOutputBuffer ( ) ; <nl> + try <nl> + { <nl> + dob . writeUTF ( startkey ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + logger _ . error ( " unable to write startkey " , e ) ; <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + byte [ ] messageBody = Arrays . copyOf ( dob . getData ( ) , dob . getLength ( ) ) ; <nl> + message = new Message ( StorageService . getLocalStorageEndPoint ( ) , <nl> + StorageService . readStage _ , <nl> + StorageService . rangeVerbHandler _ , <nl> + messageBody ) ; <nl> + EndPoint endPoint ; <nl> + try <nl> + { <nl> + endPoint = StorageService . instance ( ) . findSuitableEndPoint ( startkey ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new CassandraException ( " Unable to find endpoint for " + startkey ) ; <nl> + } <nl> + IAsyncResult iar = MessagingService . getMessagingInstance ( ) . sendRR ( message , endPoint ) ; <nl> + <nl> + / / read response <nl> + / / TODO send more requests if we need to span multiple nodes ( or can we just let client worry about that , <nl> + / / since they have to handle multiple requests anyway ? ) <nl> + byte [ ] responseBody ; <nl> + try <nl> + { <nl> + responseBody = ( byte [ ] ) iar . get ( 2 * DatabaseDescriptor . getRpcTimeout ( ) , TimeUnit . MILLISECONDS ) [ 0 ] ; <nl> + } <nl> + catch ( TimeoutException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + DataInputBuffer bufIn = new DataInputBuffer ( ) ; <nl> + bufIn . reset ( responseBody , responseBody . length ) ; <nl> + <nl> + / / turn into List <nl> + List < String > keys = new ArrayList < String > ( ) ; <nl> + while ( bufIn . getPosition ( ) < responseBody . length ) <nl> + { <nl> + try <nl> + { <nl> + keys . add ( bufIn . readUTF ( ) ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + logger _ . error ( " bad utf " , e ) ; <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + return keys ; <nl> + } <nl> + <nl> / * <nl> * This method is used to ensure that all keys <nl> * prior to the specified key , as dtermined by <nl> diff - - git a / src / org / apache / cassandra / service / RangeVerbHandler . java b / src / org / apache / cassandra / service / RangeVerbHandler . java <nl> new file mode 100644 <nl> index 0000000 . . 3587907 <nl> - - - / dev / null <nl> + + + b / src / org / apache / cassandra / service / RangeVerbHandler . java <nl> @ @ - 0 , 0 + 1 , 152 @ @ <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + import java . util . Iterator ; <nl> + import java . util . Comparator ; <nl> + import java . util . Arrays ; <nl> + import java . io . FileNotFoundException ; <nl> + import java . io . IOException ; <nl> + <nl> + import org . apache . commons . collections . IteratorUtils ; <nl> + import org . apache . commons . collections . Predicate ; <nl> + <nl> + import org . apache . cassandra . net . MessagingService ; <nl> + import org . apache . cassandra . net . IVerbHandler ; <nl> + import org . apache . cassandra . net . Message ; <nl> + import org . apache . cassandra . db . IdentityFilter ; <nl> + import org . apache . cassandra . db . ColumnFamily ; <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . db . FileStruct ; <nl> + import org . apache . cassandra . db . Table ; <nl> + import org . apache . cassandra . db . Memtable ; <nl> + import org . apache . cassandra . db . MemtableManager ; <nl> + import org . apache . cassandra . io . SequenceFile ; <nl> + import org . apache . cassandra . io . DataInputBuffer ; <nl> + import org . apache . cassandra . io . DataOutputBuffer ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + <nl> + public class RangeVerbHandler implements IVerbHandler <nl> + { <nl> + public static final Comparator < String > STRING _ COMPARATOR = new Comparator < String > ( ) <nl> + { <nl> + public int compare ( String o1 , String o2 ) <nl> + { <nl> + return o1 . compareTo ( o2 ) ; <nl> + } <nl> + } ; <nl> + <nl> + public void doVerb ( Message message ) <nl> + { <nl> + byte [ ] bytes = ( byte [ ] ) message . getMessageBody ( ) [ 0 ] ; <nl> + final String startkey ; <nl> + if ( bytes . length = = 0 ) <nl> + { <nl> + startkey = " " ; <nl> + } <nl> + else <nl> + { <nl> + DataInputBuffer dib = new DataInputBuffer ( ) ; <nl> + dib . reset ( bytes , bytes . length ) ; <nl> + try <nl> + { <nl> + startkey = dib . readUTF ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + List < Iterator < String > > iterators = new ArrayList < Iterator < String > > ( ) ; <nl> + Table table = Table . open ( DatabaseDescriptor . getTableName ( ) ) ; <nl> + for ( String cfName : table . getApplicationColumnFamilies ( ) ) <nl> + { <nl> + ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfName ) ; <nl> + <nl> + / / memtable keys : current and historical <nl> + Iterator < Memtable > it = ( Iterator < Memtable > ) IteratorUtils . chainedIterator ( <nl> + IteratorUtils . singletonIterator ( cfs . getMemtable ( ) ) , <nl> + MemtableManager . instance ( ) . getUnflushedMemtables ( cfName ) . iterator ( ) ) ; <nl> + while ( it . hasNext ( ) ) <nl> + { <nl> + iterators . add ( IteratorUtils . filteredIterator ( it . next ( ) . sortedKeyIterator ( ) , new Predicate ( ) <nl> + { <nl> + public boolean evaluate ( Object key ) <nl> + { <nl> + return ( ( String ) key ) . compareTo ( startkey ) > = 0 ; <nl> + } <nl> + } ) ) ; <nl> + } <nl> + <nl> + / / sstables <nl> + for ( String filename : cfs . getSSTableFilenames ( ) ) <nl> + { <nl> + try <nl> + { <nl> + FileStruct fs = new FileStruct ( SequenceFile . reader ( filename ) ) ; <nl> + fs . seekTo ( startkey ) ; <nl> + iterators . add ( fs . iterator ( ) ) ; <nl> + } <nl> + catch ( FileNotFoundException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + Iterator < String > iter = IteratorUtils . collatedIterator ( STRING _ COMPARATOR , iterators ) ; <nl> + List < String > keys = new ArrayList < String > ( ) ; <nl> + String last = null , current = null ; <nl> + <nl> + while ( keys . size ( ) < 1000 ) <nl> + { <nl> + if ( ! iter . hasNext ( ) ) <nl> + { <nl> + break ; <nl> + } <nl> + current = iter . next ( ) ; <nl> + if ( ! current . equals ( last ) ) <nl> + { <nl> + last = current ; <nl> + for ( String cfName : table . getApplicationColumnFamilies ( ) ) <nl> + { <nl> + ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfName ) ; <nl> + try <nl> + { <nl> + ColumnFamily cf = cfs . getColumnFamily ( current , cfName , new IdentityFilter ( ) ) ; <nl> + if ( cf ! = null & & cf . getColumns ( ) . size ( ) > 0 ) <nl> + { <nl> + keys . add ( current ) ; <nl> + break ; <nl> + } <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + DataOutputBuffer dob = new DataOutputBuffer ( ) ; <nl> + for ( String key : keys ) <nl> + { <nl> + try <nl> + { <nl> + dob . writeUTF ( key ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + byte [ ] data = Arrays . copyOf ( dob . getData ( ) , dob . getLength ( ) ) ; <nl> + Message response = message . getReply ( StorageService . getLocalStorageEndPoint ( ) , data ) ; <nl> + MessagingService . getMessagingInstance ( ) . sendOneWay ( response , message . getFrom ( ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / org / apache / cassandra / service / StorageService . java b / src / org / apache / cassandra / service / StorageService . java <nl> index 409cd5f . . 95de5c6 100644 <nl> - - - a / src / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / org / apache / cassandra / service / StorageService . java <nl> @ @ - 138 , 6 + 138 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> public final static String bsMetadataVerbHandler _ = " BS - METADATA - VERB - HANDLER " ; <nl> public final static String calloutDeployVerbHandler _ = " CALLOUT - DEPLOY - VERB - HANDLER " ; <nl> public final static String touchVerbHandler _ = " TOUCH - VERB - HANDLER " ; <nl> + public static String rangeVerbHandler _ = " RANGE - VERB - HANDLER " ; <nl> <nl> public static enum ConsistencyLevel <nl> { <nl> diff - - git a / src / org / apache / cassandra / utils / DestructivePQIterator . java b / src / org / apache / cassandra / utils / DestructivePQIterator . java <nl> new file mode 100644 <nl> index 0000000 . . 0ed96f8 <nl> - - - / dev / null <nl> + + + b / src / org / apache / cassandra / utils / DestructivePQIterator . java <nl> @ @ - 0 , 0 + 1 , 25 @ @ <nl> + package org . apache . cassandra . utils ; <nl> + <nl> + import java . util . Iterator ; <nl> + import java . util . PriorityQueue ; <nl> + <nl> + public class DestructivePQIterator < T > implements Iterator < T > { <nl> + private PriorityQueue < T > pq ; <nl> + <nl> + public DestructivePQIterator ( PriorityQueue < T > pq ) { <nl> + this . pq = pq ; <nl> + } <nl> + <nl> + public boolean hasNext ( ) { <nl> + return pq . size ( ) > 0 ; <nl> + } <nl> + <nl> + public T next ( ) { <nl> + return pq . poll ( ) ; <nl> + } <nl> + <nl> + public void remove ( ) { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + } <nl> + <nl> diff - - git a / test / org / apache / cassandra / service / CassandraServerTest . java b / test / org / apache / cassandra / service / CassandraServerTest . java <nl> index 07c7dfe . . 762bbb5 100644 <nl> - - - a / test / org / apache / cassandra / service / CassandraServerTest . java <nl> + + + b / test / org / apache / cassandra / service / CassandraServerTest . java <nl> @ @ - 9 , 8 + 9 , 50 @ @ import org . testng . annotations . Test ; <nl> import java . io . IOException ; <nl> import java . util . * ; <nl> <nl> + import com . facebook . thrift . TException ; <nl> + <nl> public class CassandraServerTest extends ServerTest { <nl> / * <nl> + TODO fix resetting server so this works <nl> + @ Test <nl> + public void test _ get _ range _ empty ( ) throws IOException , TException { <nl> + CassandraServer server = new CassandraServer ( ) ; <nl> + server . start ( ) ; <nl> + <nl> + assert CollectionUtils . EMPTY _ COLLECTION . equals ( server . get _ range ( DatabaseDescriptor . getTableName ( ) , " " ) ) ; <nl> + } <nl> + * / <nl> + <nl> + / * <nl> + @ Test <nl> + public void test _ get _ range ( ) throws IOException , TException , CassandraException <nl> + { <nl> + CassandraServer server = new CassandraServer ( ) ; <nl> + try <nl> + { <nl> + server . start ( ) ; <nl> + } <nl> + catch ( Throwable throwable ) <nl> + { <nl> + throw new RuntimeException ( throwable ) ; <nl> + } <nl> + <nl> + / / TODO insert some data <nl> + try { <nl> + String last = null ; <nl> + for ( String key : server . get _ range ( DatabaseDescriptor . getTableName ( ) , " key1 " ) ) { <nl> + if ( last ! = null ) { <nl> + assert last . compareTo ( key ) < 0 ; <nl> + } <nl> + last = key ; <nl> + } <nl> + } finally { <nl> + server . shutdown ( ) ; <nl> + } <nl> + } <nl> + * / <nl> + <nl> + / * <nl> @ Test <nl> public void test _ get _ column ( ) throws Throwable { <nl> CassandraServer server = new CassandraServer ( ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 3f8e3d0 . . bddb1d1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 3 + 1 , 7 @ @ 
 + 2 . 0 . 9 
 + * Add missing iso8601 patterns for date strings ( 6973 ) 
 + 
 + 
 2 . 0 . 8 
 * Always reallocate buffers in HSHA ( CASSANDRA - 6285 ) 
 * ( Hadoop ) support authentication in CqlRecordReader ( CASSANDRA - 7221 ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / DateType . java b / src / java / org / apache / cassandra / db / marshal / DateType . java 
 index 8e28bd4 . . 0c97688 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / DateType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / DateType . java 
 @ @ - 38 , 9 + 38 , 6 @ @ public class DateType extends AbstractType < Date > 
 
 public static final DateType instance = new DateType ( ) ; 
 
 - static final String DEFAULT _ FORMAT = TimestampSerializer . iso8601Patterns [ 3 ] ; 
 - static final SimpleDateFormat FORMATTER = new SimpleDateFormat ( DEFAULT _ FORMAT ) ; 
 - 
 DateType ( ) { } / / singleton 
 
 public int compare ( ByteBuffer o1 , ByteBuffer o2 ) 
 @ @ - 63 , 43 + 60 , 7 @ @ public class DateType extends AbstractType < Date > 
 if ( source . isEmpty ( ) ) 
 return ByteBufferUtil . EMPTY _ BYTE _ BUFFER ; 
 
 - return ByteBufferUtil . bytes ( dateStringToTimestamp ( source ) ) ; 
 - } 
 - 
 - public static long dateStringToTimestamp ( String source ) throws MarshalException 
 - { 
 - long millis ; 
 - 
 - if ( source . toLowerCase ( ) . equals ( " now " ) ) 
 - { 
 - millis = System . currentTimeMillis ( ) ; 
 - } 
 - / / Milliseconds since epoch ? 
 - else if ( source . matches ( " ^ - ? \ \ d + $ " ) ) 
 - { 
 - try 
 - { 
 - millis = Long . parseLong ( source ) ; 
 - } 
 - catch ( NumberFormatException e ) 
 - { 
 - throw new MarshalException ( String . format ( " unable to make long ( for date ) from : ' % s ' " , source ) , e ) ; 
 - } 
 - } 
 - / / Last chance , attempt to parse as date - time string 
 - else 
 - { 
 - try 
 - { 
 - millis = DateUtils . parseDateStrictly ( source , TimestampSerializer . iso8601Patterns ) . getTime ( ) ; 
 - } 
 - catch ( ParseException e1 ) 
 - { 
 - throw new MarshalException ( String . format ( " unable to coerce ' % s ' to a formatted date ( long ) " , source ) , e1 ) ; 
 - } 
 - } 
 - 
 - return millis ; 
 + return ByteBufferUtil . bytes ( TimestampSerializer . dateStringToTimestamp ( source ) ) ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 index 51cf47a . . fa82f06 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import org . apache . cassandra . cql3 . CQL3Type ; 
 import org . apache . cassandra . serializers . TypeSerializer ; 
 import org . apache . cassandra . serializers . MarshalException ; 
 import org . apache . cassandra . serializers . TimeUUIDSerializer ; 
 + import org . apache . cassandra . serializers . TimestampSerializer ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . UUIDGen ; 
 
 @ @ - 110 , 9 + 111 , 10 @ @ public class TimeUUIDType extends AbstractType < UUID > 
 
 if ( uuid . version ( ) ! = 1 ) 
 throw new MarshalException ( " TimeUUID supports only version 1 UUIDs " ) ; 
 - } else 
 + } 
 + else 
 { 
 - idBytes = ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( DateType . dateStringToTimestamp ( source ) ) ) ; 
 + idBytes = ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( TimestampSerializer . dateStringToTimestamp ( source ) ) ) ; 
 } 
 
 return idBytes ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / TimestampType . java b / src / java / org / apache / cassandra / db / marshal / TimestampType . java 
 index cf1ea41 . . 69ead8e 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / TimestampType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / TimestampType . java 
 @ @ - 18 , 9 + 18 , 7 @ @ 
 package org . apache . cassandra . db . marshal ; 
 
 import java . nio . ByteBuffer ; 
 - import java . text . ParseException ; 
 import java . util . Date ; 
 - import java . util . regex . Pattern ; 
 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 29 , 7 + 27 , 6 @ @ import org . apache . cassandra . serializers . TypeSerializer ; 
 import org . apache . cassandra . serializers . MarshalException ; 
 import org . apache . cassandra . serializers . TimestampSerializer ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 - import org . apache . commons . lang3 . time . DateUtils ; 
 
 / * * 
 * Type for date - time values . 
 @ @ - 44 , 8 + 41 , 6 @ @ public class TimestampType extends AbstractType < Date > 
 
 public static final TimestampType instance = new TimestampType ( ) ; 
 
 - private static final Pattern timestampPattern = Pattern . compile ( " ^ - ? \ \ d + $ " ) ; 
 - 
 private TimestampType ( ) { } / / singleton 
 
 public int compare ( ByteBuffer o1 , ByteBuffer o2 ) 
 @ @ - 59 , 43 + 54 , 7 @ @ public class TimestampType extends AbstractType < Date > 
 if ( source . isEmpty ( ) ) 
 return ByteBufferUtil . EMPTY _ BYTE _ BUFFER ; 
 
 - return ByteBufferUtil . bytes ( dateStringToTimestamp ( source ) ) ; 
 - } 
 - 
 - public static long dateStringToTimestamp ( String source ) throws MarshalException 
 - { 
 - long millis ; 
 - 
 - if ( source . toLowerCase ( ) . equals ( " now " ) ) 
 - { 
 - millis = System . currentTimeMillis ( ) ; 
 - } 
 - / / Milliseconds since epoch ? 
 - else if ( timestampPattern . matcher ( source ) . matches ( ) ) 
 - { 
 - try 
 - { 
 - millis = Long . parseLong ( source ) ; 
 - } 
 - catch ( NumberFormatException e ) 
 - { 
 - throw new MarshalException ( String . format ( " unable to make long ( for date ) from : ' % s ' " , source ) , e ) ; 
 - } 
 - } 
 - / / Last chance , attempt to parse as date - time string 
 - else 
 - { 
 - try 
 - { 
 - millis = DateUtils . parseDateStrictly ( source , TimestampSerializer . iso8601Patterns ) . getTime ( ) ; 
 - } 
 - catch ( ParseException e1 ) 
 - { 
 - throw new MarshalException ( String . format ( " unable to coerce ' % s ' to a formatted date ( long ) " , source ) , e1 ) ; 
 - } 
 - } 
 - 
 - return millis ; 
 + return ByteBufferUtil . bytes ( TimestampSerializer . dateStringToTimestamp ( source ) ) ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / UUIDType . java b / src / java / org / apache / cassandra / db / marshal / UUIDType . java 
 index 4b0751e . . 969ff17 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / UUIDType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / UUIDType . java 
 @ @ - 26 , 12 + 26 , 11 @ @ import org . apache . cassandra . cql3 . CQL3Type ; 
 import org . apache . cassandra . serializers . TypeSerializer ; 
 import org . apache . cassandra . serializers . MarshalException ; 
 import org . apache . cassandra . serializers . UUIDSerializer ; 
 + import org . apache . cassandra . serializers . TimestampSerializer ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . UUIDGen ; 
 import org . apache . commons . lang3 . time . DateUtils ; 
 
 - import static org . apache . cassandra . serializers . TimestampSerializer . iso8601Patterns ; 
 - 
 / * * 
 * Compares UUIDs using the following criteria : < br > 
 * - if count of supplied bytes is less than 16 , compare counts < br > 
 @ @ - 165 , 8 + 164 , 6 @ @ public class UUIDType extends AbstractType < UUID > 
 if ( source . isEmpty ( ) ) 
 return ByteBufferUtil . EMPTY _ BYTE _ BUFFER ; 
 
 - ByteBuffer idBytes = null ; 
 - 
 / / ffffffff - ffff - ffff - ffff - ffffffffff 
 if ( TimeUUIDType . regexPattern . matcher ( source ) . matches ( ) ) 
 { 
 @ @ - 174 , 43 + 171 , 22 @ @ public class UUIDType extends AbstractType < UUID > 
 try 
 { 
 uuid = UUID . fromString ( source ) ; 
 - idBytes = ByteBuffer . wrap ( UUIDGen . decompose ( uuid ) ) ; 
 + return ByteBuffer . wrap ( UUIDGen . decompose ( uuid ) ) ; 
 } 
 catch ( IllegalArgumentException e ) 
 { 
 throw new MarshalException ( String . format ( " unable to make UUID from ' % s ' " , source ) , e ) ; 
 } 
 - } else if ( source . toLowerCase ( ) . equals ( " now " ) ) 
 - { 
 - idBytes = ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( ) ) ; 
 } 
 - / / Milliseconds since epoch ? 
 - else if ( source . matches ( " ^ \ \ d + $ " ) ) 
 + 
 + try 
 { 
 - try 
 - { 
 - idBytes = ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( Long . parseLong ( source ) ) ) ; 
 - } 
 - catch ( NumberFormatException e ) 
 - { 
 - throw new MarshalException ( String . format ( " unable to make version 1 UUID from ' % s ' " , source ) , e ) ; 
 - } 
 + return ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( TimestampSerializer . dateStringToTimestamp ( source ) ) ) ; 
 } 
 - / / Last chance , attempt to parse as date - time string 
 - else 
 + catch ( MarshalException e ) 
 { 
 - try 
 - { 
 - long timestamp = DateUtils . parseDate ( source , iso8601Patterns ) . getTime ( ) ; 
 - idBytes = ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( timestamp ) ) ; 
 - } 
 - catch ( ParseException e1 ) 
 - { 
 - throw new MarshalException ( String . format ( " unable to coerce ' % s ' to version 1 UUID " , source ) , e1 ) ; 
 - } 
 + throw new MarshalException ( String . format ( " unable to make version 1 UUID from ' % s ' " , source ) , e ) ; 
 } 
 - 
 - return idBytes ; 
 } 
 
 public CQL3Type asCQL3Type ( ) 
 diff - - git a / src / java / org / apache / cassandra / serializers / TimestampSerializer . java b / src / java / org / apache / cassandra / serializers / TimestampSerializer . java 
 index f2a40f1 . . 5cb9586 100644 
 - - - a / src / java / org / apache / cassandra / serializers / TimestampSerializer . java 
 + + + b / src / java / org / apache / cassandra / serializers / TimestampSerializer . java 
 @ @ - 21 , 30 + 21 , 49 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 import java . nio . ByteBuffer ; 
 import java . text . SimpleDateFormat ; 
 + import java . text . ParseException ; 
 import java . util . Date ; 
 + import java . util . regex . Pattern ; 
 + 
 + import org . apache . commons . lang3 . time . DateUtils ; 
 
 public class TimestampSerializer implements TypeSerializer < Date > 
 { 
 - public static final String [ ] iso8601Patterns = new String [ ] { 
 + private static final String [ ] dateStringPatterns = new String [ ] { 
 " yyyy - MM - dd HH : mm " , 
 " yyyy - MM - dd HH : mm : ss " , 
 - " yyyy - MM - dd HH : mmZ " , 
 - " yyyy - MM - dd HH : mm : ssZ " , 
 + " yyyy - MM - dd HH : mmX " , 
 + " yyyy - MM - dd HH : mmXX " , 
 + " yyyy - MM - dd HH : mmXXX " , 
 + " yyyy - MM - dd HH : mm : ssX " , 
 + " yyyy - MM - dd HH : mm : ssXX " , 
 + " yyyy - MM - dd HH : mm : ssXXX " , 
 " yyyy - MM - dd HH : mm : ss . SSS " , 
 - " yyyy - MM - dd HH : mm : ss . SSSZ " , 
 + " yyyy - MM - dd HH : mm : ss . SSSX " , 
 + " yyyy - MM - dd HH : mm : ss . SSSXX " , 
 + " yyyy - MM - dd HH : mm : ss . SSSXXX " , 
 " yyyy - MM - dd ' T ' HH : mm " , 
 - " yyyy - MM - dd ' T ' HH : mmZ " , 
 + " yyyy - MM - dd ' T ' HH : mmX " , 
 + " yyyy - MM - dd ' T ' HH : mmXX " , 
 + " yyyy - MM - dd ' T ' HH : mmXXX " , 
 " yyyy - MM - dd ' T ' HH : mm : ss " , 
 - " yyyy - MM - dd ' T ' HH : mm : ssZ " , 
 + " yyyy - MM - dd ' T ' HH : mm : ssX " , 
 + " yyyy - MM - dd ' T ' HH : mm : ssXX " , 
 + " yyyy - MM - dd ' T ' HH : mm : ssXXX " , 
 " yyyy - MM - dd ' T ' HH : mm : ss . SSS " , 
 - " yyyy - MM - dd ' T ' HH : mm : ss . SSSZ " , 
 + " yyyy - MM - dd ' T ' HH : mm : ss . SSSX " , 
 + " yyyy - MM - dd ' T ' HH : mm : ss . SSSXX " , 
 + " yyyy - MM - dd ' T ' HH : mm : ss . SSSXXX " , 
 " yyyy - MM - dd " , 
 - " yyyy - MM - ddZ " 
 + " yyyy - MM - ddX " , 
 + " yyyy - MM - ddXX " , 
 + " yyyy - MM - ddXXX " 
 } ; 
 
 - static final String DEFAULT _ FORMAT = iso8601Patterns [ 3 ] ; 
 + private static final String DEFAULT _ FORMAT = dateStringPatterns [ 3 ] ; 
 + private static final Pattern timestampPattern = Pattern . compile ( " ^ - ? \ \ d + $ " ) ; 
 
 - static final ThreadLocal < SimpleDateFormat > FORMATTER = new ThreadLocal < SimpleDateFormat > ( ) 
 + private static final ThreadLocal < SimpleDateFormat > FORMATTER = new ThreadLocal < SimpleDateFormat > ( ) 
 { 
 protected SimpleDateFormat initialValue ( ) 
 { 
 @ @ - 64 , 6 + 83 , 35 @ @ public class TimestampSerializer implements TypeSerializer < Date > 
 return value = = null ? ByteBufferUtil . EMPTY _ BYTE _ BUFFER : ByteBufferUtil . bytes ( value . getTime ( ) ) ; 
 } 
 
 + public static long dateStringToTimestamp ( String source ) throws MarshalException 
 + { 
 + if ( source . equalsIgnoreCase ( " now " ) ) 
 + return System . currentTimeMillis ( ) ; 
 + 
 + / / Milliseconds since epoch ? 
 + if ( timestampPattern . matcher ( source ) . matches ( ) ) 
 + { 
 + try 
 + { 
 + return Long . parseLong ( source ) ; 
 + } 
 + catch ( NumberFormatException e ) 
 + { 
 + throw new MarshalException ( String . format ( " unable to make long ( for date ) from : ' % s ' " , source ) , e ) ; 
 + } 
 + } 
 + 
 + / / Last chance , attempt to parse as date - time string 
 + try 
 + { 
 + return DateUtils . parseDateStrictly ( source , dateStringPatterns ) . getTime ( ) ; 
 + } 
 + catch ( ParseException e1 ) 
 + { 
 + throw new MarshalException ( String . format ( " unable to coerce ' % s ' to a formatted date ( long ) " , source ) , e1 ) ; 
 + } 
 + } 
 + 
 public void validate ( ByteBuffer bytes ) throws MarshalException 
 { 
 if ( bytes . remaining ( ) ! = 8 & & bytes . remaining ( ) ! = 0 ) 
 diff - - git a / test / unit / org / apache / cassandra / serializers / TimestampSerializerTest . java b / test / unit / org / apache / cassandra / serializers / TimestampSerializerTest . java 
 new file mode 100644 
 index 0000000 . . d991845 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / serializers / TimestampSerializerTest . java 
 @ @ - 0 , 0 + 1 , 77 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + package org . apache . cassandra . serializers ; 
 + 
 + import java . util . List ; 
 + import java . util . ArrayList ; 
 + 
 + import org . junit . Test ; 
 + import static org . junit . Assert . assertTrue ; 
 + 
 + import org . apache . cassandra . serializers . MarshalException ; 
 + import org . apache . cassandra . serializers . TimestampSerializer ; 
 + 
 + public class TimestampSerializerTest 
 + { 
 + private String dates [ ] = new String [ ] 
 + { 
 + " 2014 - 04 - 01 " , 
 + " 2014 - 04 - 01 + 0000 " , 
 + " 2014 - 04 - 01 20 : 30 " , 
 + " 2014 - 04 - 01 20 : 30 : 35 " , 
 + " 2014 - 04 - 01 20 : 30 : 35Z " , 
 + " 2014 - 04 - 01 20 : 30 + 07 " , 
 + " 2014 - 04 - 01 20 : 30 + 0700 " , 
 + " 2014 - 04 - 01 20 : 30 + 07 : 00 " , 
 + " 2014 - 04 - 01 20 : 30 : 35 + 07 " , 
 + " 2014 - 04 - 01 20 : 30 : 35 + 0700 " , 
 + " 2014 - 04 - 01 20 : 30 : 35 + 07 : 00 " , 
 + " 2014 - 04 - 01 20 : 30 : 35 . 898 " , 
 + " 2014 - 04 - 01 20 : 30 : 35 . 898Z " , 
 + " 2014 - 04 - 01 20 : 30 : 35 . 898 + 07 " , 
 + " 2014 - 04 - 01 20 : 30 : 35 . 898 + 0700 " , 
 + " 2014 - 04 - 01 20 : 30 : 35 . 898 + 07 : 00 " , 
 + " 2014 - 04 - 01T20 : 30 " , 
 + " 2014 - 04 - 01T20 : 30 : 25 " , 
 + " 2014 - 04 - 01T20 : 30 : 35Z " , 
 + " 2014 - 04 - 01T20 : 30 : 35 + 00 : 00 " , 
 + " 2014 - 04 - 01T20 : 30 : 35 + 0700 " , 
 + " 2014 - 04 - 01T20 : 30 : 35 + 07 : 00 " , 
 + " 2014 - 04 - 01T20 : 30 : 35 . 898 " , 
 + " 2014 - 04 - 01T20 : 30 : 35 . 898 + 00 : 00 " 
 + } ; 
 + 
 + @ Test 
 + public void testDateStringToTimestamp ( ) 
 + { 
 + List < String > unparsedDates = new ArrayList < > ( ) ; 
 + for ( String date : dates ) 
 + { 
 + try 
 + { 
 + long millis = TimestampSerializer . dateStringToTimestamp ( date ) ; 
 + } 
 + catch ( MarshalException e ) 
 + { 
 + unparsedDates . add ( date ) ; 
 + } 
 + } 
 + assertTrue ( " Unable to parse : " + unparsedDates , unparsedDates . isEmpty ( ) ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / org / apache / cassandra / config / DatabaseDescriptor . java b / src / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 683009c . . 73cf3a6 100644 
 - - - a / src / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 18 , 21 + 18 , 24 @ @ 
 
 package org . apache . cassandra . config ; 
 
 - import java . util . * ; 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 + import java . util . HashSet ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . Set ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 - import java . io . * ; 
 
 import org . apache . cassandra . db . ColumnFamily ; 
 + import org . apache . cassandra . db . SystemTable ; 
 import org . apache . cassandra . db . Table ; 
 import org . apache . cassandra . db . TypeInfo ; 
 - import org . apache . cassandra . db . DBManager ; 
 - import org . apache . cassandra . db . SystemTable ; 
 - import org . apache . cassandra . db . Table . TableMetadata ; 
 import org . apache . cassandra . utils . FileUtils ; 
 import org . apache . cassandra . utils . XMLUtils ; 
 import org . w3c . dom . Node ; 
 import org . w3c . dom . NodeList ; 
 - import org . apache . cassandra . io . * ; 
 
 
 / * * 
 @ @ - 306 , 6 + 309 , 9 @ @ public class DatabaseDescriptor 
 / * Read the table related stuff from config * / 
 NodeList tables = xmlUtils . getRequestedNodeList ( " / Storage / Tables / Table " ) ; 
 int size = tables . getLength ( ) ; 
 + if ( size = = 0 ) { 
 + throw new UnsupportedOperationException ( " A Table must be configured " ) ; 
 + } 
 for ( int i = 0 ; i < size ; + + i ) 
 { 
 Node table = tables . item ( i ) ; 
 @ @ - 785 , 4 + 791 , 9 @ @ public class DatabaseDescriptor 
 { 
 return tableToCFMetaDataMap _ ; 
 } 
 + 
 + public static String getTableName ( ) 
 + { 
 + return tables _ . get ( 0 ) ; 
 + } 
 } 
 diff - - git a / src / org / apache / cassandra / db / ColumnFamily . java b / src / org / apache / cassandra / db / ColumnFamily . java 
 index 51ac744 . . a2ac3a2 100644 
 - - - a / src / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 288 , 7 + 288 , 7 @ @ public final class ColumnFamily 
 return columns _ . getSortedColumns ( ) ; 
 } 
 
 - Map < String , IColumn > getColumns ( ) 
 + public Map < String , IColumn > getColumns ( ) 
 { 
 return columns _ . getColumns ( ) ; 
 } 
 diff - - git a / src / org / apache / cassandra / db / ColumnFamilyStore . java b / src / org / apache / cassandra / db / ColumnFamilyStore . java 
 index be7c245 . . 28bb3f7 100644 
 - - - a / src / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1384 , 4 + 1384 , 14 @ @ public class ColumnFamilyStore 
 { 
 memtable _ . get ( ) . flushOnRecovery ( ) ; 
 } 
 + 
 + public Object getMemtable ( ) 
 + { 
 + return memtable _ . get ( ) ; 
 + } 
 + 
 + public Set < String > getSSTableFilenames ( ) 
 + { 
 + return Collections . unmodifiableSet ( ssTables _ ) ; 
 + } 
 } 
 diff - - git a / src / org / apache / cassandra / db / Memtable . java b / src / org / apache / cassandra / db / Memtable . java 
 index 2bdad37 . . 567b829 100644 
 - - - a / src / org / apache / cassandra / db / Memtable . java 
 + + + b / src / org / apache / cassandra / db / Memtable . java 
 @ @ - 26 , 6 + 26 , 8 @ @ import java . util . HashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Set ; 
 + import java . util . Iterator ; 
 + import java . util . PriorityQueue ; 
 import java . util . concurrent . Callable ; 
 import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . ExecutorService ; 
 @ @ - 45 , 6 + 47 , 7 @ @ import org . apache . cassandra . io . DataOutputBuffer ; 
 import org . apache . cassandra . io . SSTable ; 
 import org . apache . cassandra . utils . BloomFilter ; 
 import org . apache . cassandra . utils . LogUtil ; 
 + import org . apache . cassandra . utils . DestructivePQIterator ; 
 
 / * * 
 * Author : Avinash Lakshman ( alakshman @ facebook . com ) & Prashant Malik ( pmalik @ facebook . com ) 
 @ @ - 419 , 4 + 422 , 9 @ @ public class Memtable implements MemtableMBean , Comparable < Memtable > 
 columnFamilies _ . clear ( ) ; 
 } 
 
 + public Iterator < String > sortedKeyIterator ( ) 
 + { 
 + return new DestructivePQIterator < String > ( new PriorityQueue < String > ( columnFamilies _ . keySet ( ) ) ) ; 
 + } 
 + 
 } 
 diff - - git a / src / org / apache / cassandra / db / MemtableManager . java b / src / org / apache / cassandra / db / MemtableManager . java 
 index 997bbd3 . . 54242d1 100644 
 - - - a / src / org / apache / cassandra / db / MemtableManager . java 
 + + + b / src / org / apache / cassandra / db / MemtableManager . java 
 @ @ - 40 , 7 + 40 , 7 @ @ public class MemtableManager 
 private static Lock lock _ = new ReentrantLock ( ) ; 
 private static Logger logger _ = Logger . getLogger ( MemtableManager . class ) ; 
 private ReentrantReadWriteLock rwLock _ = new ReentrantReadWriteLock ( true ) ; 
 - static MemtableManager instance ( ) 
 + public static MemtableManager instance ( ) 
 { 
 if ( instance _ = = null ) 
 { 
 @ @ - 157 , 7 + 157 , 22 @ @ public class MemtableManager 
 	 } 
 } 
 
 - 
 - 
 + public List < Memtable > getUnflushedMemtables ( String cfName ) 
 + { 
 + rwLock _ . readLock ( ) . lock ( ) ; 
 + try 
 + { 
 + List < Memtable > memtables = history _ . get ( cfName ) ; 
 + if ( memtables ! = null ) 
 + { 
 + return new ArrayList < Memtable > ( memtables ) ; 
 + } 
 + return Arrays . asList ( new Memtable [ 0 ] ) ; 
 + } 
 + finally 
 + { 
 + rwLock _ . readLock ( ) . unlock ( ) ; 
 + } 
 + } 
 
 } 
 diff - - git a / src / org / apache / cassandra / db / Table . java b / src / org / apache / cassandra / db / Table . java 
 index 9c84b42 . . f1b260a 100644 
 - - - a / src / org / apache / cassandra / db / Table . java 
 + + + b / src / org / apache / cassandra / db / Table . java 
 @ @ - 60 , 7 + 60 , 7 @ @ public class Table 
 * is basically the column family name and the ID associated with 
 * this column family . We use this ID in the Commit Log header to 
 * determine when a log file that has been rolled can be deleted . 
 - * / 
 + * / 
 public static class TableMetadata 
 { 
 / * Name of the column family * / 
 @ @ - 454 , 7 + 454 , 7 @ @ public class Table 
 return columnFamilyStores _ ; 
 } 
 
 - ColumnFamilyStore getColumnFamilyStore ( String cfName ) 
 + public ColumnFamilyStore getColumnFamilyStore ( String cfName ) 
 { 
 return columnFamilyStores _ . get ( cfName ) ; 
 } 
 @ @ - 875 , 4 + 875 , 17 @ @ public class Table 
 long timeTaken = System . currentTimeMillis ( ) - start ; 
 dbAnalyticsSource _ . updateWriteStatistics ( timeTaken ) ; 
 } 
 + 
 + public Set < String > getApplicationColumnFamilies ( ) 
 + { 
 + Set < String > set = new HashSet < String > ( ) ; 
 + for ( String cfName : getColumnFamilies ( ) ) 
 + { 
 + if ( DatabaseDescriptor . isApplicationColumnFamily ( cfName ) ) 
 + { 
 + set . add ( cfName ) ; 
 + } 
 + } 
 + return set ; 
 + } 
 } 
 diff - - git a / src / org / apache / cassandra / service / CassandraServer . java b / src / org / apache / cassandra / service / CassandraServer . java 
 index 93b62e7 . . c2d5f66 100644 
 - - - a / src / org / apache / cassandra / service / CassandraServer . java 
 + + + b / src / org / apache / cassandra / service / CassandraServer . java 
 @ @ - 817 , 6 + 817 , 71 @ @ public class CassandraServer extends FacebookBase implements 
 return result ; 
 } 
 
 + public List < String > get _ range ( String tablename , final String startkey ) throws CassandraException 
 + { 
 + logger _ . debug ( " get _ range " ) ; 
 + 
 + / / send request 
 + Message message ; 
 + DataOutputBuffer dob = new DataOutputBuffer ( ) ; 
 + try 
 + { 
 + dob . writeUTF ( startkey ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + logger _ . error ( " unable to write startkey " , e ) ; 
 + throw new RuntimeException ( e ) ; 
 + } 
 + byte [ ] messageBody = Arrays . copyOf ( dob . getData ( ) , dob . getLength ( ) ) ; 
 + message = new Message ( StorageService . getLocalStorageEndPoint ( ) , 
 + StorageService . readStage _ , 
 + StorageService . rangeVerbHandler _ , 
 + messageBody ) ; 
 + EndPoint endPoint ; 
 + try 
 + { 
 + endPoint = StorageService . instance ( ) . findSuitableEndPoint ( startkey ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new CassandraException ( " Unable to find endpoint for " + startkey ) ; 
 + } 
 + IAsyncResult iar = MessagingService . getMessagingInstance ( ) . sendRR ( message , endPoint ) ; 
 + 
 + / / read response 
 + / / TODO send more requests if we need to span multiple nodes ( or can we just let client worry about that , 
 + / / since they have to handle multiple requests anyway ? ) 
 + byte [ ] responseBody ; 
 + try 
 + { 
 + responseBody = ( byte [ ] ) iar . get ( 2 * DatabaseDescriptor . getRpcTimeout ( ) , TimeUnit . MILLISECONDS ) [ 0 ] ; 
 + } 
 + catch ( TimeoutException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + DataInputBuffer bufIn = new DataInputBuffer ( ) ; 
 + bufIn . reset ( responseBody , responseBody . length ) ; 
 + 
 + / / turn into List 
 + List < String > keys = new ArrayList < String > ( ) ; 
 + while ( bufIn . getPosition ( ) < responseBody . length ) 
 + { 
 + try 
 + { 
 + keys . add ( bufIn . readUTF ( ) ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + logger _ . error ( " bad utf " , e ) ; 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + return keys ; 
 + } 
 + 
 / * 
 * This method is used to ensure that all keys 
 * prior to the specified key , as dtermined by 
 diff - - git a / src / org / apache / cassandra / service / RangeVerbHandler . java b / src / org / apache / cassandra / service / RangeVerbHandler . java 
 new file mode 100644 
 index 0000000 . . 3587907 
 - - - / dev / null 
 + + + b / src / org / apache / cassandra / service / RangeVerbHandler . java 
 @ @ - 0 , 0 + 1 , 152 @ @ 
 + package org . apache . cassandra . service ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + import java . util . Iterator ; 
 + import java . util . Comparator ; 
 + import java . util . Arrays ; 
 + import java . io . FileNotFoundException ; 
 + import java . io . IOException ; 
 + 
 + import org . apache . commons . collections . IteratorUtils ; 
 + import org . apache . commons . collections . Predicate ; 
 + 
 + import org . apache . cassandra . net . MessagingService ; 
 + import org . apache . cassandra . net . IVerbHandler ; 
 + import org . apache . cassandra . net . Message ; 
 + import org . apache . cassandra . db . IdentityFilter ; 
 + import org . apache . cassandra . db . ColumnFamily ; 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . db . FileStruct ; 
 + import org . apache . cassandra . db . Table ; 
 + import org . apache . cassandra . db . Memtable ; 
 + import org . apache . cassandra . db . MemtableManager ; 
 + import org . apache . cassandra . io . SequenceFile ; 
 + import org . apache . cassandra . io . DataInputBuffer ; 
 + import org . apache . cassandra . io . DataOutputBuffer ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + 
 + public class RangeVerbHandler implements IVerbHandler 
 + { 
 + public static final Comparator < String > STRING _ COMPARATOR = new Comparator < String > ( ) 
 + { 
 + public int compare ( String o1 , String o2 ) 
 + { 
 + return o1 . compareTo ( o2 ) ; 
 + } 
 + } ; 
 + 
 + public void doVerb ( Message message ) 
 + { 
 + byte [ ] bytes = ( byte [ ] ) message . getMessageBody ( ) [ 0 ] ; 
 + final String startkey ; 
 + if ( bytes . length = = 0 ) 
 + { 
 + startkey = " " ; 
 + } 
 + else 
 + { 
 + DataInputBuffer dib = new DataInputBuffer ( ) ; 
 + dib . reset ( bytes , bytes . length ) ; 
 + try 
 + { 
 + startkey = dib . readUTF ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + List < Iterator < String > > iterators = new ArrayList < Iterator < String > > ( ) ; 
 + Table table = Table . open ( DatabaseDescriptor . getTableName ( ) ) ; 
 + for ( String cfName : table . getApplicationColumnFamilies ( ) ) 
 + { 
 + ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfName ) ; 
 + 
 + / / memtable keys : current and historical 
 + Iterator < Memtable > it = ( Iterator < Memtable > ) IteratorUtils . chainedIterator ( 
 + IteratorUtils . singletonIterator ( cfs . getMemtable ( ) ) , 
 + MemtableManager . instance ( ) . getUnflushedMemtables ( cfName ) . iterator ( ) ) ; 
 + while ( it . hasNext ( ) ) 
 + { 
 + iterators . add ( IteratorUtils . filteredIterator ( it . next ( ) . sortedKeyIterator ( ) , new Predicate ( ) 
 + { 
 + public boolean evaluate ( Object key ) 
 + { 
 + return ( ( String ) key ) . compareTo ( startkey ) > = 0 ; 
 + } 
 + } ) ) ; 
 + } 
 + 
 + / / sstables 
 + for ( String filename : cfs . getSSTableFilenames ( ) ) 
 + { 
 + try 
 + { 
 + FileStruct fs = new FileStruct ( SequenceFile . reader ( filename ) ) ; 
 + fs . seekTo ( startkey ) ; 
 + iterators . add ( fs . iterator ( ) ) ; 
 + } 
 + catch ( FileNotFoundException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + } 
 + 
 + Iterator < String > iter = IteratorUtils . collatedIterator ( STRING _ COMPARATOR , iterators ) ; 
 + List < String > keys = new ArrayList < String > ( ) ; 
 + String last = null , current = null ; 
 + 
 + while ( keys . size ( ) < 1000 ) 
 + { 
 + if ( ! iter . hasNext ( ) ) 
 + { 
 + break ; 
 + } 
 + current = iter . next ( ) ; 
 + if ( ! current . equals ( last ) ) 
 + { 
 + last = current ; 
 + for ( String cfName : table . getApplicationColumnFamilies ( ) ) 
 + { 
 + ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfName ) ; 
 + try 
 + { 
 + ColumnFamily cf = cfs . getColumnFamily ( current , cfName , new IdentityFilter ( ) ) ; 
 + if ( cf ! = null & & cf . getColumns ( ) . size ( ) > 0 ) 
 + { 
 + keys . add ( current ) ; 
 + break ; 
 + } 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( ) ; 
 + } 
 + } 
 + } 
 + } 
 + 
 + DataOutputBuffer dob = new DataOutputBuffer ( ) ; 
 + for ( String key : keys ) 
 + { 
 + try 
 + { 
 + dob . writeUTF ( key ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + byte [ ] data = Arrays . copyOf ( dob . getData ( ) , dob . getLength ( ) ) ; 
 + Message response = message . getReply ( StorageService . getLocalStorageEndPoint ( ) , data ) ; 
 + MessagingService . getMessagingInstance ( ) . sendOneWay ( response , message . getFrom ( ) ) ; 
 + } 
 + } 
 diff - - git a / src / org / apache / cassandra / service / StorageService . java b / src / org / apache / cassandra / service / StorageService . java 
 index 409cd5f . . 95de5c6 100644 
 - - - a / src / org / apache / cassandra / service / StorageService . java 
 + + + b / src / org / apache / cassandra / service / StorageService . java 
 @ @ - 138 , 6 + 138 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 public final static String bsMetadataVerbHandler _ = " BS - METADATA - VERB - HANDLER " ; 
 public final static String calloutDeployVerbHandler _ = " CALLOUT - DEPLOY - VERB - HANDLER " ; 
 public final static String touchVerbHandler _ = " TOUCH - VERB - HANDLER " ; 
 + public static String rangeVerbHandler _ = " RANGE - VERB - HANDLER " ; 
 
 public static enum ConsistencyLevel 
 { 
 diff - - git a / src / org / apache / cassandra / utils / DestructivePQIterator . java b / src / org / apache / cassandra / utils / DestructivePQIterator . java 
 new file mode 100644 
 index 0000000 . . 0ed96f8 
 - - - / dev / null 
 + + + b / src / org / apache / cassandra / utils / DestructivePQIterator . java 
 @ @ - 0 , 0 + 1 , 25 @ @ 
 + package org . apache . cassandra . utils ; 
 + 
 + import java . util . Iterator ; 
 + import java . util . PriorityQueue ; 
 + 
 + public class DestructivePQIterator < T > implements Iterator < T > { 
 + private PriorityQueue < T > pq ; 
 + 
 + public DestructivePQIterator ( PriorityQueue < T > pq ) { 
 + this . pq = pq ; 
 + } 
 + 
 + public boolean hasNext ( ) { 
 + return pq . size ( ) > 0 ; 
 + } 
 + 
 + public T next ( ) { 
 + return pq . poll ( ) ; 
 + } 
 + 
 + public void remove ( ) { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + } 
 + 
 diff - - git a / test / org / apache / cassandra / service / CassandraServerTest . java b / test / org / apache / cassandra / service / CassandraServerTest . java 
 index 07c7dfe . . 762bbb5 100644 
 - - - a / test / org / apache / cassandra / service / CassandraServerTest . java 
 + + + b / test / org / apache / cassandra / service / CassandraServerTest . java 
 @ @ - 9 , 8 + 9 , 50 @ @ import org . testng . annotations . Test ; 
 import java . io . IOException ; 
 import java . util . * ; 
 
 + import com . facebook . thrift . TException ; 
 + 
 public class CassandraServerTest extends ServerTest { 
 / * 
 + TODO fix resetting server so this works 
 + @ Test 
 + public void test _ get _ range _ empty ( ) throws IOException , TException { 
 + CassandraServer server = new CassandraServer ( ) ; 
 + server . start ( ) ; 
 + 
 + assert CollectionUtils . EMPTY _ COLLECTION . equals ( server . get _ range ( DatabaseDescriptor . getTableName ( ) , " " ) ) ; 
 + } 
 + * / 
 + 
 + / * 
 + @ Test 
 + public void test _ get _ range ( ) throws IOException , TException , CassandraException 
 + { 
 + CassandraServer server = new CassandraServer ( ) ; 
 + try 
 + { 
 + server . start ( ) ; 
 + } 
 + catch ( Throwable throwable ) 
 + { 
 + throw new RuntimeException ( throwable ) ; 
 + } 
 + 
 + / / TODO insert some data 
 + try { 
 + String last = null ; 
 + for ( String key : server . get _ range ( DatabaseDescriptor . getTableName ( ) , " key1 " ) ) { 
 + if ( last ! = null ) { 
 + assert last . compareTo ( key ) < 0 ; 
 + } 
 + last = key ; 
 + } 
 + } finally { 
 + server . shutdown ( ) ; 
 + } 
 + } 
 + * / 
 + 
 + / * 
 @ Test 
 public void test _ get _ column ( ) throws Throwable { 
 CassandraServer server = new CassandraServer ( ) ;
