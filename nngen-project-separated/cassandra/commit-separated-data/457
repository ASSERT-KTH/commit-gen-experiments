BLEU SCORE: 0.07964191616699294

TEST MSG: org . apache . cassandra . db . DirectoriesTest ( testStandardDirs ) unit test failing
GENERATED MSG: Add debug logging to list filenames processed by o . a . c . db . Directories . migrateFile method

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / DirectoriesTest . java b / test / unit / org / apache / cassandra / db / DirectoriesTest . java <nl> index 008e343 . . bc5b7bf 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / DirectoriesTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / DirectoriesTest . java <nl> @ @ - 137 , 7 + 137 , 7 @ @ public class DirectoriesTest <nl> } <nl> <nl> @ Test <nl> - public void testStandardDirs ( ) <nl> + public void testStandardDirs ( ) throws IOException <nl> { <nl> for ( CFMetaData cfm : CFM ) <nl> { <nl> @ @ - 146 , 10 + 146 , 10 @ @ public class DirectoriesTest <nl> <nl> Descriptor desc = new Descriptor ( cfDir ( cfm ) , KS , cfm . cfName , 1 , Descriptor . Type . FINAL ) ; <nl> File snapshotDir = new File ( cfDir ( cfm ) , File . separator + Directories . SNAPSHOT _ SUBDIR + File . separator + " 42 " ) ; <nl> - assertEquals ( snapshotDir , Directories . getSnapshotDirectory ( desc , " 42 " ) ) ; <nl> + assertEquals ( snapshotDir . getCanonicalFile ( ) , Directories . getSnapshotDirectory ( desc , " 42 " ) ) ; <nl> <nl> File backupsDir = new File ( cfDir ( cfm ) , File . separator + Directories . BACKUPS _ SUBDIR ) ; <nl> - assertEquals ( backupsDir , Directories . getBackupsDirectory ( desc ) ) ; <nl> + assertEquals ( backupsDir . getCanonicalFile ( ) , Directories . getBackupsDirectory ( desc ) ) ; <nl> } <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 7d4882d . . d7855af 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 3 + 1 , 7 @ @ <nl> + 1 . 2 . 1 <nl> + * Add debug logging to list filenames processed by Directories . migrateFile method ( CASSANDRA - 4939 ) <nl> + <nl> + <nl> 1 . 2 - rc1 <nl> * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) <nl> * save truncation position in system table ( CASSANDRA - 4906 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / Directories . java b / src / java / org / apache / cassandra / db / Directories . java <nl> index 877b5ed . . 9e53ab9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Directories . java <nl> + + + b / src / java / org / apache / cassandra / db / Directories . java <nl> @ @ - 620 , 19 + 620 , 35 @ @ public class Directories <nl> if ( file . isDirectory ( ) ) <nl> return ; <nl> <nl> - String name = file . getName ( ) ; <nl> - boolean isManifest = name . endsWith ( LeveledManifest . EXTENSION ) ; <nl> - String cfname = isManifest <nl> - ? name . substring ( 0 , name . length ( ) - LeveledManifest . EXTENSION . length ( ) ) <nl> - : name . substring ( 0 , name . indexOf ( Component . separator ) ) ; <nl> - <nl> - int idx = cfname . indexOf ( SECONDARY _ INDEX _ NAME _ SEPARATOR ) ; / / idx > 0 = > secondary index <nl> - String dirname = idx > 0 ? cfname . substring ( 0 , idx ) : cfname ; <nl> - File destDir = getOrCreate ( ksDir , dirname , additionalPath ) ; <nl> - <nl> - File destFile = new File ( destDir , isManifest ? name : ksDir . getName ( ) + Component . separator + name ) ; <nl> - logger . debug ( String . format ( " [ upgrade to 1 . 1 ] Moving % s to % s " , file , destFile ) ) ; <nl> - FileUtils . renameWithConfirm ( file , destFile ) ; <nl> + try <nl> + { <nl> + String name = file . getName ( ) ; <nl> + boolean isManifest = name . endsWith ( LeveledManifest . EXTENSION ) ; <nl> + int separatorIndex = name . indexOf ( Component . separator ) ; <nl> + <nl> + if ( isManifest | | ( separatorIndex > = 0 ) ) <nl> + { <nl> + String cfname = isManifest <nl> + ? name . substring ( 0 , name . length ( ) - LeveledManifest . EXTENSION . length ( ) ) <nl> + : name . substring ( 0 , separatorIndex ) ; <nl> + <nl> + int idx = cfname . indexOf ( SECONDARY _ INDEX _ NAME _ SEPARATOR ) ; / / idx > 0 = > secondary index <nl> + String dirname = idx > 0 ? cfname . substring ( 0 , idx ) : cfname ; <nl> + File destDir = getOrCreate ( ksDir , dirname , additionalPath ) ; <nl> + <nl> + File destFile = new File ( destDir , isManifest ? name : ksDir . getName ( ) + Component . separator + name ) ; <nl> + logger . debug ( String . format ( " [ upgrade to 1 . 1 ] Moving % s to % s " , file , destFile ) ) ; <nl> + FileUtils . renameWithConfirm ( file , destFile ) ; <nl> + } <nl> + else <nl> + { <nl> + logger . warn ( " Found unrecognized file { } while migrating sstables from pre 1 . 1 format , ignoring . " , file ) ; <nl> + } <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( String . format ( " Failed migrating file % s from pre 1 . 1 format . " , file . getPath ( ) ) , e ) ; <nl> + } <nl> } <nl> <nl> / / Hack for tests , don ' t use otherwise <nl> diff - - git a / test / unit / org / apache / cassandra / db / DirectoriesTest . java b / test / unit / org / apache / cassandra / db / DirectoriesTest . java <nl> index d1a44fd . . ba6576d 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / DirectoriesTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / DirectoriesTest . java <nl> @ @ - 22 , 13 + 22 , 14 @ @ import java . io . IOException ; <nl> import java . util . * ; <nl> <nl> import org . junit . AfterClass ; <nl> + import org . junit . Assert ; <nl> import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> - import static org . junit . Assert . assertEquals ; <nl> <nl> import org . apache . cassandra . db . compaction . LeveledManifest ; <nl> + import org . apache . cassandra . io . sstable . Component ; <nl> + import org . apache . cassandra . io . sstable . Descriptor ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> - import org . apache . cassandra . io . sstable . * ; <nl> <nl> public class DirectoriesTest <nl> { <nl> @ @ - 103 , 14 + 104 , 14 @ @ public class DirectoriesTest <nl> for ( String cf : CFS ) <nl> { <nl> Directories directories = Directories . create ( KS , cf ) ; <nl> - assertEquals ( cfDir ( cf ) , directories . getDirectoryForNewSSTables ( 0 ) ) ; <nl> + Assert . assertEquals ( cfDir ( cf ) , directories . getDirectoryForNewSSTables ( 0 ) ) ; <nl> <nl> Descriptor desc = new Descriptor ( cfDir ( cf ) , KS , cf , 1 , false ) ; <nl> File snapshotDir = new File ( cfDir ( cf ) , File . separator + Directories . SNAPSHOT _ SUBDIR + File . separator + " 42 " ) ; <nl> - assertEquals ( snapshotDir , directories . getSnapshotDirectory ( desc , " 42 " ) ) ; <nl> + Assert . assertEquals ( snapshotDir , directories . getSnapshotDirectory ( desc , " 42 " ) ) ; <nl> <nl> File backupsDir = new File ( cfDir ( cf ) , File . separator + Directories . BACKUPS _ SUBDIR ) ; <nl> - assertEquals ( backupsDir , directories . getBackupsDirectory ( desc ) ) ; <nl> + Assert . assertEquals ( backupsDir , directories . getBackupsDirectory ( desc ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 167 , 7 + 168 , 34 @ @ public class DirectoriesTest <nl> { <nl> Directories directories = Directories . create ( KS , cf ) ; <nl> File manifest = new File ( cfDir ( cf ) , cf + LeveledManifest . EXTENSION ) ; <nl> - assertEquals ( manifest , directories . tryGetLeveledManifest ( ) ) ; <nl> + Assert . assertEquals ( manifest , directories . tryGetLeveledManifest ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testHandleBadFiles ( ) throws IOException <nl> + { <nl> + / * files not matching the pattern should just be ignored , with a log warning * / <nl> + Directories directories = Directories . create ( KS , " bad " ) ; <nl> + File dir = directories . getDirectoryForNewSSTables ( 1 ) ; <nl> + File f = File . createTempFile ( " bad " , " file " , dir . getParentFile ( ) ) ; <nl> + Directories . migrateSSTables ( ) ; <nl> + Assert . assertTrue ( f . isFile ( ) ) ; <nl> + <nl> + / * real failures should throw an exception with informational message * / <nl> + f = File . createTempFile ( " locked " , " . json " , dir . getParentFile ( ) ) ; <nl> + File targetDir = new File ( dir . getParentFile ( ) , f . getName ( ) . substring ( 0 , f . getName ( ) . length ( ) - " . json " . length ( ) ) ) ; <nl> + targetDir . mkdirs ( ) ; <nl> + targetDir . setReadOnly ( ) ; <nl> + <nl> + try <nl> + { <nl> + Directories . migrateSSTables ( ) ; <nl> + Assert . assertFalse ( true ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + Assert . assertTrue ( e . getMessage ( ) . contains ( f . getPath ( ) ) ) ; <nl> } <nl> } <nl> }

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / DirectoriesTest . java b / test / unit / org / apache / cassandra / db / DirectoriesTest . java 
 index 008e343 . . bc5b7bf 100644 
 - - - a / test / unit / org / apache / cassandra / db / DirectoriesTest . java 
 + + + b / test / unit / org / apache / cassandra / db / DirectoriesTest . java 
 @ @ - 137 , 7 + 137 , 7 @ @ public class DirectoriesTest 
 } 
 
 @ Test 
 - public void testStandardDirs ( ) 
 + public void testStandardDirs ( ) throws IOException 
 { 
 for ( CFMetaData cfm : CFM ) 
 { 
 @ @ - 146 , 10 + 146 , 10 @ @ public class DirectoriesTest 
 
 Descriptor desc = new Descriptor ( cfDir ( cfm ) , KS , cfm . cfName , 1 , Descriptor . Type . FINAL ) ; 
 File snapshotDir = new File ( cfDir ( cfm ) , File . separator + Directories . SNAPSHOT _ SUBDIR + File . separator + " 42 " ) ; 
 - assertEquals ( snapshotDir , Directories . getSnapshotDirectory ( desc , " 42 " ) ) ; 
 + assertEquals ( snapshotDir . getCanonicalFile ( ) , Directories . getSnapshotDirectory ( desc , " 42 " ) ) ; 
 
 File backupsDir = new File ( cfDir ( cfm ) , File . separator + Directories . BACKUPS _ SUBDIR ) ; 
 - assertEquals ( backupsDir , Directories . getBackupsDirectory ( desc ) ) ; 
 + assertEquals ( backupsDir . getCanonicalFile ( ) , Directories . getBackupsDirectory ( desc ) ) ; 
 } 
 } 


NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 7d4882d . . d7855af 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 3 + 1 , 7 @ @ 
 + 1 . 2 . 1 
 + * Add debug logging to list filenames processed by Directories . migrateFile method ( CASSANDRA - 4939 ) 
 + 
 + 
 1 . 2 - rc1 
 * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) 
 * save truncation position in system table ( CASSANDRA - 4906 ) 
 diff - - git a / src / java / org / apache / cassandra / db / Directories . java b / src / java / org / apache / cassandra / db / Directories . java 
 index 877b5ed . . 9e53ab9 100644 
 - - - a / src / java / org / apache / cassandra / db / Directories . java 
 + + + b / src / java / org / apache / cassandra / db / Directories . java 
 @ @ - 620 , 19 + 620 , 35 @ @ public class Directories 
 if ( file . isDirectory ( ) ) 
 return ; 
 
 - String name = file . getName ( ) ; 
 - boolean isManifest = name . endsWith ( LeveledManifest . EXTENSION ) ; 
 - String cfname = isManifest 
 - ? name . substring ( 0 , name . length ( ) - LeveledManifest . EXTENSION . length ( ) ) 
 - : name . substring ( 0 , name . indexOf ( Component . separator ) ) ; 
 - 
 - int idx = cfname . indexOf ( SECONDARY _ INDEX _ NAME _ SEPARATOR ) ; / / idx > 0 = > secondary index 
 - String dirname = idx > 0 ? cfname . substring ( 0 , idx ) : cfname ; 
 - File destDir = getOrCreate ( ksDir , dirname , additionalPath ) ; 
 - 
 - File destFile = new File ( destDir , isManifest ? name : ksDir . getName ( ) + Component . separator + name ) ; 
 - logger . debug ( String . format ( " [ upgrade to 1 . 1 ] Moving % s to % s " , file , destFile ) ) ; 
 - FileUtils . renameWithConfirm ( file , destFile ) ; 
 + try 
 + { 
 + String name = file . getName ( ) ; 
 + boolean isManifest = name . endsWith ( LeveledManifest . EXTENSION ) ; 
 + int separatorIndex = name . indexOf ( Component . separator ) ; 
 + 
 + if ( isManifest | | ( separatorIndex > = 0 ) ) 
 + { 
 + String cfname = isManifest 
 + ? name . substring ( 0 , name . length ( ) - LeveledManifest . EXTENSION . length ( ) ) 
 + : name . substring ( 0 , separatorIndex ) ; 
 + 
 + int idx = cfname . indexOf ( SECONDARY _ INDEX _ NAME _ SEPARATOR ) ; / / idx > 0 = > secondary index 
 + String dirname = idx > 0 ? cfname . substring ( 0 , idx ) : cfname ; 
 + File destDir = getOrCreate ( ksDir , dirname , additionalPath ) ; 
 + 
 + File destFile = new File ( destDir , isManifest ? name : ksDir . getName ( ) + Component . separator + name ) ; 
 + logger . debug ( String . format ( " [ upgrade to 1 . 1 ] Moving % s to % s " , file , destFile ) ) ; 
 + FileUtils . renameWithConfirm ( file , destFile ) ; 
 + } 
 + else 
 + { 
 + logger . warn ( " Found unrecognized file { } while migrating sstables from pre 1 . 1 format , ignoring . " , file ) ; 
 + } 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( String . format ( " Failed migrating file % s from pre 1 . 1 format . " , file . getPath ( ) ) , e ) ; 
 + } 
 } 
 
 / / Hack for tests , don ' t use otherwise 
 diff - - git a / test / unit / org / apache / cassandra / db / DirectoriesTest . java b / test / unit / org / apache / cassandra / db / DirectoriesTest . java 
 index d1a44fd . . ba6576d 100644 
 - - - a / test / unit / org / apache / cassandra / db / DirectoriesTest . java 
 + + + b / test / unit / org / apache / cassandra / db / DirectoriesTest . java 
 @ @ - 22 , 13 + 22 , 14 @ @ import java . io . IOException ; 
 import java . util . * ; 
 
 import org . junit . AfterClass ; 
 + import org . junit . Assert ; 
 import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 - import static org . junit . Assert . assertEquals ; 
 
 import org . apache . cassandra . db . compaction . LeveledManifest ; 
 + import org . apache . cassandra . io . sstable . Component ; 
 + import org . apache . cassandra . io . sstable . Descriptor ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 - import org . apache . cassandra . io . sstable . * ; 
 
 public class DirectoriesTest 
 { 
 @ @ - 103 , 14 + 104 , 14 @ @ public class DirectoriesTest 
 for ( String cf : CFS ) 
 { 
 Directories directories = Directories . create ( KS , cf ) ; 
 - assertEquals ( cfDir ( cf ) , directories . getDirectoryForNewSSTables ( 0 ) ) ; 
 + Assert . assertEquals ( cfDir ( cf ) , directories . getDirectoryForNewSSTables ( 0 ) ) ; 
 
 Descriptor desc = new Descriptor ( cfDir ( cf ) , KS , cf , 1 , false ) ; 
 File snapshotDir = new File ( cfDir ( cf ) , File . separator + Directories . SNAPSHOT _ SUBDIR + File . separator + " 42 " ) ; 
 - assertEquals ( snapshotDir , directories . getSnapshotDirectory ( desc , " 42 " ) ) ; 
 + Assert . assertEquals ( snapshotDir , directories . getSnapshotDirectory ( desc , " 42 " ) ) ; 
 
 File backupsDir = new File ( cfDir ( cf ) , File . separator + Directories . BACKUPS _ SUBDIR ) ; 
 - assertEquals ( backupsDir , directories . getBackupsDirectory ( desc ) ) ; 
 + Assert . assertEquals ( backupsDir , directories . getBackupsDirectory ( desc ) ) ; 
 } 
 } 
 
 @ @ - 167 , 7 + 168 , 34 @ @ public class DirectoriesTest 
 { 
 Directories directories = Directories . create ( KS , cf ) ; 
 File manifest = new File ( cfDir ( cf ) , cf + LeveledManifest . EXTENSION ) ; 
 - assertEquals ( manifest , directories . tryGetLeveledManifest ( ) ) ; 
 + Assert . assertEquals ( manifest , directories . tryGetLeveledManifest ( ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testHandleBadFiles ( ) throws IOException 
 + { 
 + / * files not matching the pattern should just be ignored , with a log warning * / 
 + Directories directories = Directories . create ( KS , " bad " ) ; 
 + File dir = directories . getDirectoryForNewSSTables ( 1 ) ; 
 + File f = File . createTempFile ( " bad " , " file " , dir . getParentFile ( ) ) ; 
 + Directories . migrateSSTables ( ) ; 
 + Assert . assertTrue ( f . isFile ( ) ) ; 
 + 
 + / * real failures should throw an exception with informational message * / 
 + f = File . createTempFile ( " locked " , " . json " , dir . getParentFile ( ) ) ; 
 + File targetDir = new File ( dir . getParentFile ( ) , f . getName ( ) . substring ( 0 , f . getName ( ) . length ( ) - " . json " . length ( ) ) ) ; 
 + targetDir . mkdirs ( ) ; 
 + targetDir . setReadOnly ( ) ; 
 + 
 + try 
 + { 
 + Directories . migrateSSTables ( ) ; 
 + Assert . assertFalse ( true ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + Assert . assertTrue ( e . getMessage ( ) . contains ( f . getPath ( ) ) ) ; 
 } 
 } 
 }
