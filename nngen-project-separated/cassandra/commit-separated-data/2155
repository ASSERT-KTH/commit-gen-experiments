BLEU SCORE: 0.027611988917697356

TEST MSG: Fix NPE when using collections in frozen tuple
GENERATED MSG: Ability to freeze UDT

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b33bec4 . . 93d77c1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 3 + 1 , 7 @ @ <nl> + 2 . 1 . 0 <nl> + * Add null check for keys when freezing collection ( CASSANDRA - 7869 ) <nl> + <nl> + <nl> 2 . 1 . 0 - rc7 <nl> * Add frozen keyword and require UDT to be frozen ( CASSANDRA - 7857 ) <nl> * Track added sstable size correctly ( CASSANDRA - 7239 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / CQL3Type . java b / src / java / org / apache / cassandra / cql3 / CQL3Type . java <nl> index 1589d6a . . bb3bc62 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / CQL3Type . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / CQL3Type . java <nl> @ @ - 404 , 7 + 404 , 8 @ @ public interface CQL3Type <nl> <nl> public Raw freeze ( ) <nl> { <nl> - keys . freeze ( ) ; <nl> + if ( keys ! = null ) <nl> + keys . freeze ( ) ; <nl> values . freeze ( ) ; <nl> return super . freeze ( ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / TupleTypeTest . java b / test / unit / org / apache / cassandra / cql3 / TupleTypeTest . java <nl> index 4ce24f8 . . f8771c1 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / TupleTypeTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / TupleTypeTest . java <nl> @ @ - 100 , 4 + 100 , 43 @ @ public class TupleTypeTest extends CQLTester <nl> { <nl> assertInvalid ( " CREATE TABLE wrong ( k int PRIMARY KEY , v tuple < int , text > ) " ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testFrozenTupleWithList ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , t frozen < tuple < text , list < int > > > ) " ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , t ) VALUES ( ? , ? ) " , 0 , tuple ( " foo " , list ( 2 , 1 ) ) ) ; <nl> + execute ( " INSERT INTO % s ( k , t ) VALUES ( ? , ? ) " , 1 , tuple ( " bar " , list ( 3 , 4 ) ) ) ; <nl> + assertAllRows ( <nl> + row ( 0 , tuple ( " foo " , list ( 2 , 1 ) ) ) , <nl> + row ( 1 , tuple ( " bar " , list ( 3 , 4 ) ) ) <nl> + ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testFrozenTupleWithSet ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , t frozen < tuple < text , set < int > > > ) " ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , t ) VALUES ( ? , ? ) " , 0 , tuple ( " foo " , set ( 2 , 1 ) ) ) ; <nl> + execute ( " INSERT INTO % s ( k , t ) VALUES ( ? , ? ) " , 1 , tuple ( " bar " , set ( 3 , 4 ) ) ) ; <nl> + assertAllRows ( <nl> + row ( 0 , tuple ( " foo " , set ( 2 , 1 ) ) ) , <nl> + row ( 1 , tuple ( " bar " , set ( 3 , 4 ) ) ) <nl> + ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testFrozenTupleWithMap ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , t frozen < tuple < text , map < int , int > > > ) " ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , t ) VALUES ( ? , ? ) " , 0 , tuple ( " foo " , map ( 2 , 1 ) ) ) ; <nl> + execute ( " INSERT INTO % s ( k , t ) VALUES ( ? , ? ) " , 1 , tuple ( " bar " , map ( 3 , 4 ) ) ) ; <nl> + assertAllRows ( <nl> + row ( 0 , tuple ( " foo " , map ( 2 , 1 ) ) ) , <nl> + row ( 1 , tuple ( " bar " , map ( 3 , 4 ) ) ) <nl> + ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b33bec4 . . 93d77c1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 3 + 1 , 7 @ @ 
 + 2 . 1 . 0 
 + * Add null check for keys when freezing collection ( CASSANDRA - 7869 ) 
 + 
 + 
 2 . 1 . 0 - rc7 
 * Add frozen keyword and require UDT to be frozen ( CASSANDRA - 7857 ) 
 * Track added sstable size correctly ( CASSANDRA - 7239 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / CQL3Type . java b / src / java / org / apache / cassandra / cql3 / CQL3Type . java 
 index 1589d6a . . bb3bc62 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / CQL3Type . java 
 + + + b / src / java / org / apache / cassandra / cql3 / CQL3Type . java 
 @ @ - 404 , 7 + 404 , 8 @ @ public interface CQL3Type 
 
 public Raw freeze ( ) 
 { 
 - keys . freeze ( ) ; 
 + if ( keys ! = null ) 
 + keys . freeze ( ) ; 
 values . freeze ( ) ; 
 return super . freeze ( ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / TupleTypeTest . java b / test / unit / org / apache / cassandra / cql3 / TupleTypeTest . java 
 index 4ce24f8 . . f8771c1 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / TupleTypeTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / TupleTypeTest . java 
 @ @ - 100 , 4 + 100 , 43 @ @ public class TupleTypeTest extends CQLTester 
 { 
 assertInvalid ( " CREATE TABLE wrong ( k int PRIMARY KEY , v tuple < int , text > ) " ) ; 
 } 
 + 
 + @ Test 
 + public void testFrozenTupleWithList ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , t frozen < tuple < text , list < int > > > ) " ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , t ) VALUES ( ? , ? ) " , 0 , tuple ( " foo " , list ( 2 , 1 ) ) ) ; 
 + execute ( " INSERT INTO % s ( k , t ) VALUES ( ? , ? ) " , 1 , tuple ( " bar " , list ( 3 , 4 ) ) ) ; 
 + assertAllRows ( 
 + row ( 0 , tuple ( " foo " , list ( 2 , 1 ) ) ) , 
 + row ( 1 , tuple ( " bar " , list ( 3 , 4 ) ) ) 
 + ) ; 
 + } 
 + 
 + @ Test 
 + public void testFrozenTupleWithSet ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , t frozen < tuple < text , set < int > > > ) " ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , t ) VALUES ( ? , ? ) " , 0 , tuple ( " foo " , set ( 2 , 1 ) ) ) ; 
 + execute ( " INSERT INTO % s ( k , t ) VALUES ( ? , ? ) " , 1 , tuple ( " bar " , set ( 3 , 4 ) ) ) ; 
 + assertAllRows ( 
 + row ( 0 , tuple ( " foo " , set ( 2 , 1 ) ) ) , 
 + row ( 1 , tuple ( " bar " , set ( 3 , 4 ) ) ) 
 + ) ; 
 + } 
 + 
 + @ Test 
 + public void testFrozenTupleWithMap ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , t frozen < tuple < text , map < int , int > > > ) " ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , t ) VALUES ( ? , ? ) " , 0 , tuple ( " foo " , map ( 2 , 1 ) ) ) ; 
 + execute ( " INSERT INTO % s ( k , t ) VALUES ( ? , ? ) " , 1 , tuple ( " bar " , map ( 3 , 4 ) ) ) ; 
 + assertAllRows ( 
 + row ( 0 , tuple ( " foo " , map ( 2 , 1 ) ) ) , 
 + row ( 1 , tuple ( " bar " , map ( 3 , 4 ) ) ) 
 + ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
