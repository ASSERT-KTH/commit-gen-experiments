BLEU SCORE: 0.015542791893293221

TEST MSG: Expand range tombstone validation checks to multiple interim request stages
GENERATED MSG: Stop reading from sstables once we know we have the most recent columns

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 3c6d3b5 . . 6ca14a0 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 18 <nl> + * Expand range tombstone validation checks to multiple interim request stages ( CASSANDRA - 14824 ) <nl> * Reverse order reads can return incomplete results ( CASSANDRA - 14803 ) <nl> * Avoid calling iter . next ( ) in a loop when notifying indexers about range tombstones ( CASSANDRA - 14794 ) <nl> * Fix purging semi - expired RT boundaries in reversed iterators ( CASSANDRA - 14672 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java b / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java <nl> index 84e3c7d . . 4f936cc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import org . apache . cassandra . db . filter . * ; <nl> import org . apache . cassandra . db . lifecycle . View ; <nl> import org . apache . cassandra . db . partitions . * ; <nl> import org . apache . cassandra . db . rows . BaseRowIterator ; <nl> + import org . apache . cassandra . db . transform . RTBoundValidator ; <nl> import org . apache . cassandra . db . transform . Transformation ; <nl> import org . apache . cassandra . dht . AbstractBounds ; <nl> import org . apache . cassandra . dht . Bounds ; <nl> @ @ - 253 , 8 + 254 , 12 @ @ public class PartitionRangeReadCommand extends ReadCommand <nl> { <nl> @ SuppressWarnings ( " resource " ) / / We close on exception and on closing the result returned by this method <nl> Memtable . MemtableUnfilteredPartitionIterator iter = memtable . makePartitionIterator ( columnFilter ( ) , dataRange ( ) , isForThrift ( ) ) ; <nl> + <nl> + @ SuppressWarnings ( " resource " ) / / We close on exception and on closing the result returned by this method <nl> + UnfilteredPartitionIterator iterator = isForThrift ( ) ? ThriftResultsMerger . maybeWrap ( iter , metadata ( ) , nowInSec ( ) ) : iter ; <nl> + iterators . add ( RTBoundValidator . validate ( iterator , RTBoundValidator . Stage . MEMTABLE , false ) ) ; <nl> + <nl> oldestUnrepairedTombstone = Math . min ( oldestUnrepairedTombstone , iter . getMinLocalDeletionTime ( ) ) ; <nl> - iterators . add ( isForThrift ( ) ? ThriftResultsMerger . maybeWrap ( iter , metadata ( ) , nowInSec ( ) ) : iter ) ; <nl> } <nl> <nl> SSTableReadsListener readCountUpdater = newReadCountUpdater ( ) ; <nl> @ @ - 262 , 7 + 267 , 12 @ @ public class PartitionRangeReadCommand extends ReadCommand <nl> { <nl> @ SuppressWarnings ( " resource " ) / / We close on exception and on closing the result returned by this method <nl> UnfilteredPartitionIterator iter = sstable . getScanner ( columnFilter ( ) , dataRange ( ) , isForThrift ( ) , readCountUpdater ) ; <nl> - iterators . add ( isForThrift ( ) ? ThriftResultsMerger . maybeWrap ( iter , metadata ( ) , nowInSec ( ) ) : iter ) ; <nl> + <nl> + if ( isForThrift ( ) ) <nl> + iter = ThriftResultsMerger . maybeWrap ( iter , metadata ( ) , nowInSec ( ) ) ; <nl> + <nl> + iterators . add ( RTBoundValidator . validate ( iter , RTBoundValidator . Stage . SSTABLE , false ) ) ; <nl> + <nl> if ( ! sstable . isRepaired ( ) ) <nl> oldestUnrepairedTombstone = Math . min ( oldestUnrepairedTombstone , sstable . getMinLocalDeletionTime ( ) ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / ReadCommand . java b / src / java / org / apache / cassandra / db / ReadCommand . java <nl> index f8a0795 . . 0135d1e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ReadCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / ReadCommand . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ import org . apache . cassandra . db . partitions . * ; <nl> import org . apache . cassandra . db . rows . * ; <nl> import org . apache . cassandra . db . transform . RTBoundCloser ; <nl> import org . apache . cassandra . db . transform . RTBoundValidator ; <nl> + import org . apache . cassandra . db . transform . RTBoundValidator . Stage ; <nl> import org . apache . cassandra . db . transform . Transformation ; <nl> import org . apache . cassandra . dht . AbstractBounds ; <nl> import org . apache . cassandra . index . Index ; <nl> @ @ - 333 , 7 + 334 , 7 @ @ public abstract class ReadCommand implements ReadQuery <nl> { <nl> / / validate that the sequence of RT markers is correct : open is followed by close , deletion times for both <nl> / / ends equal , and there are no dangling RT bound in any partition . <nl> - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; <nl> + iterator = RTBoundValidator . validate ( iterator , Stage . PROCESSED , true ) ; <nl> <nl> return isDigestQuery ( ) <nl> ? ReadResponse . createDigestResponse ( iterator , this ) <nl> @ @ - 408 , 10 + 409 , 12 @ @ public abstract class ReadCommand implements ReadQuery <nl> } <nl> <nl> UnfilteredPartitionIterator iterator = ( null = = searcher ) ? queryStorage ( cfs , orderGroup ) : searcher . search ( orderGroup ) ; <nl> + iterator = RTBoundValidator . validate ( iterator , Stage . MERGED , false ) ; <nl> <nl> try <nl> { <nl> - iterator = withoutPurgeableTombstones ( iterator , cfs ) ; <nl> + iterator = RTBoundValidator . validate ( withoutPurgeableTombstones ( iterator , cfs ) , Stage . PURGED , false ) ; <nl> + <nl> iterator = withMetricsRecording ( iterator , cfs . metric , startTimeNanos ) ; <nl> <nl> / / If we ' ve used a 2ndary index , we know the result already satisfy the primary expression used , so <nl> @ @ - 431 , 9 + 434 , 7 @ @ public abstract class ReadCommand implements ReadQuery <nl> iterator = limits ( ) . filter ( iterator , nowInSec ( ) , selectsFullPartition ( ) ) ; <nl> <nl> / / because of the above , we need to append an aritifical end bound if the source iterator was stopped short by a counter . <nl> - iterator = Transformation . apply ( iterator , new RTBoundCloser ( ) ) ; <nl> - <nl> - return iterator ; <nl> + return RTBoundCloser . close ( iterator ) ; <nl> } <nl> catch ( RuntimeException | Error e ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java <nl> index 4b10530 . . 4c8e0bc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java <nl> @ @ - 36 , 6 + 36 , 7 @ @ import org . apache . cassandra . db . lifecycle . * ; <nl> import org . apache . cassandra . db . filter . * ; <nl> import org . apache . cassandra . db . partitions . * ; <nl> import org . apache . cassandra . db . rows . * ; <nl> + import org . apache . cassandra . db . transform . RTBoundValidator ; <nl> import org . apache . cassandra . exceptions . RequestExecutionException ; <nl> import org . apache . cassandra . io . sstable . format . SSTableReader ; <nl> import org . apache . cassandra . io . sstable . format . SSTableReadsListener ; <nl> @ @ - 686 , 12 + 687 , 19 @ @ public class SinglePartitionReadCommand extends ReadCommand <nl> if ( partition = = null ) <nl> continue ; <nl> <nl> - @ SuppressWarnings ( " resource " ) / / ' iter ' is added to iterators which is closed on exception , or through the closing of the final merged iterator <nl> + / / ' iter ' is added to iterators which is closed on exception , or through the closing of the final merged iterator <nl> + @ SuppressWarnings ( " resource " ) <nl> UnfilteredRowIterator iter = filter . getUnfilteredRowIterator ( columnFilter ( ) , partition ) ; <nl> - @ SuppressWarnings ( " resource " ) / / same as above <nl> - UnfilteredRowIterator maybeCopied = copyOnHeap ? UnfilteredRowIterators . cloningIterator ( iter , HeapAllocator . instance ) : iter ; <nl> + <nl> + if ( copyOnHeap ) <nl> + iter = UnfilteredRowIterators . cloningIterator ( iter , HeapAllocator . instance ) ; <nl> + <nl> oldestUnrepairedTombstone = Math . min ( oldestUnrepairedTombstone , partition . stats ( ) . minLocalDeletionTime ) ; <nl> - iterators . add ( isForThrift ( ) ? ThriftResultsMerger . maybeWrap ( maybeCopied , nowInSec ( ) ) : maybeCopied ) ; <nl> + <nl> + if ( isForThrift ( ) ) <nl> + iter = ThriftResultsMerger . maybeWrap ( iter , nowInSec ( ) ) ; <nl> + <nl> + iterators . add ( RTBoundValidator . validate ( iter , RTBoundValidator . Stage . MEMTABLE , false ) ) ; <nl> } <nl> / * <nl> * We can ' t eliminate full sstables based on the timestamp of what we ' ve already read like <nl> @ @ - 733 , 16 + 741 , 24 @ @ public class SinglePartitionReadCommand extends ReadCommand <nl> continue ; <nl> } <nl> <nl> - @ SuppressWarnings ( " resource " ) / / ' iter ' is added to iterators which is closed on exception , or through the closing of the final merged iterator <nl> - UnfilteredRowIterator iter = filter . filter ( sstable . iterator ( partitionKey ( ) , <nl> - columnFilter ( ) , <nl> - filter . isReversed ( ) , <nl> - isForThrift ( ) , <nl> - metricsCollector ) ) ; <nl> if ( ! sstable . isRepaired ( ) ) <nl> oldestUnrepairedTombstone = Math . min ( oldestUnrepairedTombstone , sstable . getMinLocalDeletionTime ( ) ) ; <nl> <nl> - iterators . add ( isForThrift ( ) ? ThriftResultsMerger . maybeWrap ( iter , nowInSec ( ) ) : iter ) ; <nl> + / / ' iter ' is added to iterators which is closed on exception , or through the closing of the final merged iterator <nl> + @ SuppressWarnings ( " resource " ) <nl> + UnfilteredRowIterator iter = filter . filter ( <nl> + sstable . iterator ( partitionKey ( ) , <nl> + columnFilter ( ) , <nl> + filter . isReversed ( ) , <nl> + isForThrift ( ) , <nl> + metricsCollector ) <nl> + ) ; <nl> + <nl> + if ( isForThrift ( ) ) <nl> + iter = ThriftResultsMerger . maybeWrap ( iter , nowInSec ( ) ) ; <nl> + <nl> + iterators . add ( RTBoundValidator . validate ( iter , RTBoundValidator . Stage . SSTABLE , false ) ) ; <nl> + <nl> mostRecentPartitionTombstone = Math . max ( mostRecentPartitionTombstone , iter . partitionLevelDeletion ( ) . markedForDeleteAt ( ) ) ; <nl> } <nl> <nl> @ @ - 862 , 7 + 878 , 12 @ @ public class SinglePartitionReadCommand extends ReadCommand <nl> UnfilteredRowIterator clonedFilter = copyOnHeap <nl> ? UnfilteredRowIterators . cloningIterator ( iter , HeapAllocator . instance ) <nl> : iter ; <nl> - result = add ( isForThrift ( ) ? ThriftResultsMerger . maybeWrap ( clonedFilter , nowInSec ( ) ) : clonedFilter , result , filter , false ) ; <nl> + result = add ( <nl> + RTBoundValidator . validate ( isForThrift ( ) ? ThriftResultsMerger . maybeWrap ( clonedFilter , nowInSec ( ) ) : clonedFilter , RTBoundValidator . Stage . MEMTABLE , false ) , <nl> + result , <nl> + filter , <nl> + false <nl> + ) ; <nl> } <nl> } <nl> <nl> @ @ - 901 , 10 + 922 , 29 @ @ public class SinglePartitionReadCommand extends ReadCommand <nl> metricsCollector ) ) ) <nl> { <nl> if ( ! iter . partitionLevelDeletion ( ) . isLive ( ) ) <nl> - result = add ( UnfilteredRowIterators . noRowsIterator ( iter . metadata ( ) , iter . partitionKey ( ) , Rows . EMPTY _ STATIC _ ROW , iter . partitionLevelDeletion ( ) , filter . isReversed ( ) ) , result , filter , sstable . isRepaired ( ) ) ; <nl> + { <nl> + result = add ( <nl> + UnfilteredRowIterators . noRowsIterator ( iter . metadata ( ) , <nl> + iter . partitionKey ( ) , <nl> + Rows . EMPTY _ STATIC _ ROW , <nl> + iter . partitionLevelDeletion ( ) , <nl> + filter . isReversed ( ) ) , <nl> + result , <nl> + filter , <nl> + sstable . isRepaired ( ) <nl> + ) ; <nl> + } <nl> else <nl> - result = add ( iter , result , filter , sstable . isRepaired ( ) ) ; <nl> + { <nl> + result = add ( <nl> + RTBoundValidator . validate ( iter , RTBoundValidator . Stage . SSTABLE , false ) , <nl> + result , <nl> + filter , <nl> + sstable . isRepaired ( ) <nl> + ) ; <nl> + } <nl> } <nl> + <nl> continue ; <nl> } <nl> <nl> @ @ - 920 , 7 + 960 , 13 @ @ public class SinglePartitionReadCommand extends ReadCommand <nl> <nl> if ( sstable . isRepaired ( ) ) <nl> onlyUnrepaired = false ; <nl> - result = add ( isForThrift ( ) ? ThriftResultsMerger . maybeWrap ( iter , nowInSec ( ) ) : iter , result , filter , sstable . isRepaired ( ) ) ; <nl> + <nl> + result = add ( <nl> + RTBoundValidator . validate ( isForThrift ( ) ? ThriftResultsMerger . maybeWrap ( iter , nowInSec ( ) ) : iter , RTBoundValidator . Stage . SSTABLE , false ) , <nl> + result , <nl> + filter , <nl> + sstable . isRepaired ( ) <nl> + ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / transform / RTBoundCloser . java b / src / java / org / apache / cassandra / db / transform / RTBoundCloser . java <nl> index 11f0344 . . ee5401d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / transform / RTBoundCloser . java <nl> + + + b / src / java / org / apache / cassandra / db / transform / RTBoundCloser . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . db . Clustering ; <nl> import org . apache . cassandra . db . DeletionTime ; <nl> import org . apache . cassandra . db . ReadOrderGroup ; <nl> + import org . apache . cassandra . db . partitions . UnfilteredPartitionIterator ; <nl> import org . apache . cassandra . db . rows . * ; <nl> <nl> / * * <nl> @ @ - 37 , 6 + 38 , 21 @ @ import org . apache . cassandra . db . rows . * ; <nl> * / <nl> public final class RTBoundCloser extends Transformation < UnfilteredRowIterator > <nl> { <nl> + private RTBoundCloser ( ) <nl> + { <nl> + } <nl> + <nl> + public static UnfilteredPartitionIterator close ( UnfilteredPartitionIterator partitions ) <nl> + { <nl> + return Transformation . apply ( partitions , new RTBoundCloser ( ) ) ; <nl> + } <nl> + <nl> + public static UnfilteredRowIterator close ( UnfilteredRowIterator partition ) <nl> + { <nl> + RowsTransformation transformation = new RowsTransformation ( partition ) ; <nl> + return Transformation . apply ( MoreRows . extend ( partition , transformation , partition . columns ( ) ) , transformation ) ; <nl> + } <nl> + <nl> @ Override <nl> public UnfilteredRowIterator applyToPartition ( UnfilteredRowIterator partition ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / transform / RTBoundValidator . java b / src / java / org / apache / cassandra / db / transform / RTBoundValidator . java <nl> index 7866b14 . . 1f675cf 100644 <nl> - - - a / src / java / org / apache / cassandra / db / transform / RTBoundValidator . java <nl> + + + b / src / java / org / apache / cassandra / db / transform / RTBoundValidator . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . db . transform ; <nl> <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . db . DeletionTime ; <nl> + import org . apache . cassandra . db . partitions . UnfilteredPartitionIterator ; <nl> import org . apache . cassandra . db . rows . RangeTombstoneMarker ; <nl> import org . apache . cassandra . db . rows . UnfilteredRowIterator ; <nl> <nl> @ @ - 32 , 29 + 33 , 45 @ @ import org . apache . cassandra . db . rows . UnfilteredRowIterator ; <nl> * / <nl> public final class RTBoundValidator extends Transformation < UnfilteredRowIterator > <nl> { <nl> + public enum Stage { MEMTABLE , SSTABLE , MERGED , PURGED , PROCESSED } <nl> + <nl> + private final Stage stage ; <nl> private final boolean enforceIsClosed ; <nl> <nl> - public RTBoundValidator ( boolean enforceIsClosed ) <nl> + private RTBoundValidator ( Stage stage , boolean enforceIsClosed ) <nl> { <nl> + this . stage = stage ; <nl> this . enforceIsClosed = enforceIsClosed ; <nl> } <nl> <nl> + public static UnfilteredPartitionIterator validate ( UnfilteredPartitionIterator partitions , Stage stage , boolean enforceIsClosed ) <nl> + { <nl> + return Transformation . apply ( partitions , new RTBoundValidator ( stage , enforceIsClosed ) ) ; <nl> + } <nl> + <nl> + public static UnfilteredRowIterator validate ( UnfilteredRowIterator partition , Stage stage , boolean enforceIsClosed ) <nl> + { <nl> + return Transformation . apply ( partition , new RowsTransformation ( stage , partition . metadata ( ) , partition . isReverseOrder ( ) , enforceIsClosed ) ) ; <nl> + } <nl> + <nl> @ Override <nl> public UnfilteredRowIterator applyToPartition ( UnfilteredRowIterator partition ) <nl> { <nl> - return Transformation . apply ( partition , new RowsTransformation ( partition . metadata ( ) , partition . isReverseOrder ( ) , enforceIsClosed ) ) ; <nl> + return Transformation . apply ( partition , new RowsTransformation ( stage , partition . metadata ( ) , partition . isReverseOrder ( ) , enforceIsClosed ) ) ; <nl> } <nl> <nl> private final static class RowsTransformation extends Transformation <nl> { <nl> + private final Stage stage ; <nl> private final CFMetaData metadata ; <nl> private final boolean isReverseOrder ; <nl> private final boolean enforceIsClosed ; <nl> <nl> private DeletionTime openMarkerDeletionTime ; <nl> <nl> - private RowsTransformation ( CFMetaData metadata , boolean isReverseOrder , boolean enforceIsClosed ) <nl> + private RowsTransformation ( Stage stage , CFMetaData metadata , boolean isReverseOrder , boolean enforceIsClosed ) <nl> { <nl> + this . stage = stage ; <nl> this . metadata = metadata ; <nl> this . isReverseOrder = isReverseOrder ; <nl> this . enforceIsClosed = enforceIsClosed ; <nl> @ @ - 98 , 8 + 115 , 8 @ @ public final class RTBoundValidator extends Transformation < UnfilteredRowIterator <nl> <nl> private IllegalStateException ise ( String why ) <nl> { <nl> - String message = String . format ( " UnfilteredRowIterator for % s . % s has an illegal RT bounds sequence : % s " , <nl> - metadata . ksName , metadata . cfName , why ) ; <nl> + String message = String . format ( " % s UnfilteredRowIterator for % s . % s has an illegal RT bounds sequence : % s " , <nl> + stage , metadata . ksName , metadata . cfName , why ) ; <nl> throw new IllegalStateException ( message ) ; <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / transform / RTTransformationsTest . java b / test / unit / org / apache / cassandra / db / transform / RTTransformationsTest . java <nl> index 832c5a3 . . f79b9f3 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / transform / RTTransformationsTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / transform / RTTransformationsTest . java <nl> @ @ - 33 , 13 + 33 , 16 @ @ import org . apache . cassandra . db . marshal . UTF8Type ; <nl> import org . apache . cassandra . db . partitions . SingletonUnfilteredPartitionIterator ; <nl> import org . apache . cassandra . db . partitions . UnfilteredPartitionIterator ; <nl> import org . apache . cassandra . db . rows . * ; <nl> + import org . apache . cassandra . db . transform . RTBoundValidator . Stage ; <nl> import org . apache . cassandra . dht . Murmur3Partitioner ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> + import static org . apache . cassandra . db . transform . RTBoundCloser . close ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertTrue ; <nl> <nl> + import static org . apache . cassandra . db . transform . RTBoundValidator . validate ; <nl> import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; <nl> <nl> public final class RTTransformationsTest <nl> @ @ - 80 , 8 + 83 , 7 @ @ public final class RTTransformationsTest <nl> , row ( 1 , " a " , " 1 " , " " ) <nl> , bound ( Kind . INCL _ END _ BOUND , 0 , " a " , " 1 " ) <nl> ) ; <nl> - extended = Transformation . apply ( extended , new RTBoundCloser ( ) ) ; <nl> - assertIteratorsEqual ( original , extended ) ; <nl> + assertIteratorsEqual ( original , close ( extended ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 98 , 8 + 100 , 7 @ @ public final class RTTransformationsTest <nl> , row ( 1 , " a " , " 1 " , " " ) <nl> , bound ( Kind . INCL _ START _ BOUND , 0 , " a " , " 1 " ) <nl> ) ; <nl> - extended = Transformation . apply ( extended , new RTBoundCloser ( ) ) ; <nl> - assertIteratorsEqual ( original , extended ) ; <nl> + assertIteratorsEqual ( original , close ( extended ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 109 , 7 + 110 , 7 @ @ public final class RTTransformationsTest <nl> , bound ( Kind . INCL _ START _ BOUND , 0 , " a " , " 1 " ) <nl> , row ( 1 , " a " , " 1 " , " " ) <nl> ) ; <nl> - UnfilteredPartitionIterator extended = Transformation . apply ( original , new RTBoundCloser ( ) ) ; <nl> + UnfilteredPartitionIterator extended = close ( original ) ; <nl> <nl> UnfilteredPartitionIterator expected = iter ( false <nl> , bound ( Kind . INCL _ START _ BOUND , 0 , " a " , " 1 " ) <nl> @ @ - 127 , 7 + 128 , 7 @ @ public final class RTTransformationsTest <nl> , boundary ( Kind . EXCL _ END _ INCL _ START _ BOUNDARY , 0 , 1 , " a " , " 0 " ) <nl> , row ( 2 , " a " , " 1 " , " " ) <nl> ) ; <nl> - UnfilteredPartitionIterator extended = Transformation . apply ( original , new RTBoundCloser ( ) ) ; <nl> + UnfilteredPartitionIterator extended = close ( original ) ; <nl> <nl> UnfilteredPartitionIterator expected = iter ( false <nl> , bound ( Kind . INCL _ START _ BOUND , 0 , " a " ) <nl> @ @ - 145 , 7 + 146 , 7 @ @ public final class RTTransformationsTest <nl> , bound ( Kind . INCL _ END _ BOUND , 0 , " a " , " 1 " ) <nl> , row ( 1 , " a " , " 1 " , " " ) <nl> ) ; <nl> - UnfilteredPartitionIterator extended = Transformation . apply ( original , new RTBoundCloser ( ) ) ; <nl> + UnfilteredPartitionIterator extended = close ( original ) ; <nl> <nl> UnfilteredPartitionIterator expected = iter ( true <nl> , bound ( Kind . INCL _ END _ BOUND , 0 , " a " , " 1 " ) <nl> @ @ - 163 , 7 + 164 , 7 @ @ public final class RTTransformationsTest <nl> , boundary ( Kind . INCL _ END _ EXCL _ START _ BOUNDARY , 1 , 0 , " a " , " 1 " ) <nl> , row ( 2 , " a " , " 0 " , " " ) <nl> ) ; <nl> - UnfilteredPartitionIterator extended = Transformation . apply ( original , new RTBoundCloser ( ) ) ; <nl> + UnfilteredPartitionIterator extended = close ( original ) ; <nl> <nl> UnfilteredPartitionIterator expected = iter ( true <nl> , bound ( Kind . INCL _ END _ BOUND , 0 , " a " ) <nl> @ @ - 181 , 8 + 182 , 7 @ @ public final class RTTransformationsTest <nl> UnfilteredPartitionIterator iterator = iter ( false <nl> , bound ( Kind . INCL _ START _ BOUND , 0 , " a " ) <nl> ) ; <nl> - iterator = Transformation . apply ( iterator , new RTBoundCloser ( ) ) ; <nl> - assertThrowsISEIterated ( iterator ) ; <nl> + assertThrowsISEIterated ( close ( iterator ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 197 , 7 + 197 , 7 @ @ public final class RTTransformationsTest <nl> , row ( 1 , " a " , " 2 " , " " ) <nl> , bound ( Kind . INCL _ END _ BOUND , 0 , " a " , " 2 " ) <nl> ) ; <nl> - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; <nl> + iterator = validate ( iterator , Stage . PROCESSED , true ) ; <nl> drain ( iterator ) ; <nl> } <nl> <nl> @ @ - 213 , 7 + 213 , 7 @ @ public final class RTTransformationsTest <nl> , row ( 1 , " a " , " 1 " , " " ) <nl> , bound ( Kind . INCL _ START _ BOUND , 0 , " a " , " 1 " ) <nl> ) ; <nl> - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; <nl> + iterator = validate ( iterator , Stage . PROCESSED , true ) ; <nl> drain ( iterator ) ; <nl> } <nl> <nl> @ @ - 237 , 7 + 237 , 7 @ @ public final class RTTransformationsTest <nl> <nl> , bound ( Kind . INCL _ END _ BOUND , 0 , " a " ) <nl> ) ; <nl> - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; <nl> + iterator = validate ( iterator , Stage . PROCESSED , true ) ; <nl> drain ( iterator ) ; <nl> } <nl> <nl> @ @ - 261 , 7 + 261 , 7 @ @ public final class RTTransformationsTest <nl> <nl> , bound ( Kind . INCL _ START _ BOUND , 0 , " a " ) <nl> ) ; <nl> - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; <nl> + iterator = validate ( iterator , Stage . PROCESSED , true ) ; <nl> drain ( iterator ) ; <nl> } <nl> <nl> @ @ - 273 , 7 + 273 , 7 @ @ public final class RTTransformationsTest <nl> , row ( 1 , " a " , " 1 " , " " ) <nl> , bound ( Kind . INCL _ END _ BOUND , 1 , " a " , " 1 " ) <nl> ) ; <nl> - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; <nl> + iterator = validate ( iterator , Stage . PROCESSED , true ) ; <nl> assertThrowsISEIterated ( iterator ) ; <nl> } <nl> <nl> @ @ - 285 , 7 + 285 , 7 @ @ public final class RTTransformationsTest <nl> , row ( 1 , " a " , " 1 " , " " ) <nl> , bound ( Kind . INCL _ START _ BOUND , 1 , " a " , " 1 " ) <nl> ) ; <nl> - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; <nl> + iterator = validate ( iterator , Stage . PROCESSED , true ) ; <nl> assertThrowsISEIterated ( iterator ) ; <nl> } <nl> <nl> @ @ - 299 , 7 + 299 , 7 @ @ public final class RTTransformationsTest <nl> , row ( 1 , " a " , " 1 " , " " ) <nl> , bound ( Kind . INCL _ END _ BOUND , 0 , " a " , " 1 " ) <nl> ) ; <nl> - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; <nl> + iterator = validate ( iterator , Stage . PROCESSED , true ) ; <nl> assertThrowsISEIterated ( iterator ) ; <nl> <nl> / / duplicated end bound <nl> @ @ - 309 , 7 + 309 , 7 @ @ public final class RTTransformationsTest <nl> , bound ( Kind . INCL _ END _ BOUND , 0 , " a " , " 1 " ) <nl> , bound ( Kind . INCL _ END _ BOUND , 0 , " a " , " 1 " ) <nl> ) ; <nl> - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; <nl> + iterator = validate ( iterator , Stage . PROCESSED , true ) ; <nl> assertThrowsISEIterated ( iterator ) ; <nl> <nl> / / absent open bound <nl> @ @ - 317 , 7 + 317 , 7 @ @ public final class RTTransformationsTest <nl> , row ( 1 , " a " , " 1 " , " " ) <nl> , bound ( Kind . INCL _ END _ BOUND , 0 , " a " , " 1 " ) <nl> ) ; <nl> - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; <nl> + iterator = validate ( iterator , Stage . PROCESSED , true ) ; <nl> assertThrowsISEIterated ( iterator ) ; <nl> <nl> / / absent end bound <nl> @ @ - 325 , 7 + 325 , 7 @ @ public final class RTTransformationsTest <nl> , bound ( Kind . INCL _ START _ BOUND , 0 , " a " , " 1 " ) <nl> , row ( 1 , " a " , " 1 " , " " ) <nl> ) ; <nl> - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; <nl> + iterator = validate ( iterator , Stage . PROCESSED , true ) ; <nl> assertThrowsISEIterated ( iterator ) ; <nl> } <nl> <nl> @ @ - 339 , 7 + 339 , 7 @ @ public final class RTTransformationsTest <nl> , bound ( Kind . INCL _ START _ BOUND , 0 , " a " , " 1 " ) <nl> , bound ( Kind . INCL _ START _ BOUND , 0 , " a " , " 1 " ) <nl> ) ; <nl> - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; <nl> + iterator = validate ( iterator , Stage . PROCESSED , true ) ; <nl> assertThrowsISEIterated ( iterator ) ; <nl> <nl> / / duplicated end bound <nl> @ @ - 349 , 7 + 349 , 7 @ @ public final class RTTransformationsTest <nl> , row ( 1 , " a " , " 1 " , " " ) <nl> , bound ( Kind . INCL _ START _ BOUND , 0 , " a " , " 1 " ) <nl> ) ; <nl> - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; <nl> + iterator = validate ( iterator , Stage . PROCESSED , true ) ; <nl> assertThrowsISEIterated ( iterator ) ; <nl> <nl> / / absent open bound <nl> @ @ - 357 , 7 + 357 , 7 @ @ public final class RTTransformationsTest <nl> , bound ( Kind . INCL _ END _ BOUND , 0 , " a " , " 1 " ) <nl> , row ( 1 , " a " , " 1 " , " " ) <nl> ) ; <nl> - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; <nl> + iterator = validate ( iterator , Stage . PROCESSED , true ) ; <nl> assertThrowsISEIterated ( iterator ) ; <nl> <nl> / / absent end bound <nl> @ @ - 365 , 7 + 365 , 7 @ @ public final class RTTransformationsTest <nl> , row ( 1 , " a " , " 1 " , " " ) <nl> , bound ( Kind . INCL _ START _ BOUND , 0 , " a " , " 1 " ) <nl> ) ; <nl> - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; <nl> + iterator = validate ( iterator , Stage . PROCESSED , true ) ; <nl> assertThrowsISEIterated ( iterator ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 70281be . . fd96002 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 37 , 7 + 37 , 7 @ @ <nl> and few other places responsible for work with SSTable files ( CASSANDRA - 3040 ) <nl> * Stop reading from sstables once we know we have the most recent columns , <nl> for query - by - name requests ( CASSANDRA - 2498 ) <nl> - <nl> + * Add query - by - column mode to stress . java ( CASSANDRA - 3064 ) <nl> <nl> 0 . 8 . 5 <nl> * fix NPE when encryption _ options is unspecified ( CASSANDRA - 3007 ) <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / Session . java b / tools / stress / src / org / apache / cassandra / stress / Session . java <nl> index 1508379 . . df0305b 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / Session . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / Session . java <nl> @ @ - 20 , 10 + 20 , 14 @ @ package org . apache . cassandra . stress ; <nl> import java . io . * ; <nl> import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> + import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> import java . util . concurrent . atomic . AtomicLong ; <nl> <nl> + import org . apache . cassandra . config . ConfigurationException ; <nl> + import org . apache . cassandra . db . marshal . AbstractType ; <nl> + import org . apache . cassandra . db . marshal . TypeParser ; <nl> import org . apache . commons . cli . * ; <nl> <nl> import org . apache . cassandra . db . ColumnFamilyType ; <nl> @ @ - 41 , 6 + 45 , 9 @ @ public class Session implements Serializable <nl> / / command line options <nl> public static final Options availableOptions = new Options ( ) ; <nl> <nl> + public static final String DEFAULT _ COMPARATOR = " AsciiType " ; <nl> + public static final String DEFAULT _ VALIDATOR = " BytesType " ; <nl> + <nl> public final AtomicInteger operations ; <nl> public final AtomicInteger keys ; <nl> public final AtomicLong latency ; <nl> @ @ - 78 , 6 + 85 , 7 @ @ public class Session implements Serializable <nl> availableOptions . addOption ( " V " , " average - size - values " , false , " Generate column values of average rather than specific size " ) ; <nl> availableOptions . addOption ( " T " , " send - to " , true , " Send this as a request to the stress daemon at specified address . " ) ; <nl> availableOptions . addOption ( " I " , " compression " , false , " Use sstable compression when creating schema " ) ; <nl> + availableOptions . addOption ( " Q " , " query - names " , true , " Comma - separated list of column names to retrieve from each row . " ) ; <nl> } <nl> <nl> private int numKeys = 1000 * 1000 ; <nl> @ @ - 109 , 6 + 117 , 9 @ @ public class Session implements Serializable <nl> private String replicationStrategy = " org . apache . cassandra . locator . SimpleStrategy " ; <nl> private Map < String , String > replicationStrategyOptions = new HashMap < String , String > ( ) ; <nl> <nl> + / / if we know exactly column names that we want to read ( set by - Q option ) <nl> + public final List < ByteBuffer > columnNames ; <nl> + <nl> public final boolean averageSizeValues ; <nl> <nl> / / required by Gaussian distribution . <nl> @ @ - 275 , 11 + 286 , 30 @ @ public class Session implements Serializable <nl> { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> + <nl> + if ( cmd . hasOption ( " Q " ) ) <nl> + { <nl> + AbstractType comparator = TypeParser . parse ( DEFAULT _ COMPARATOR ) ; <nl> + <nl> + String [ ] names = StringUtils . split ( cmd . getOptionValue ( " Q " ) , " , " ) ; <nl> + columnNames = new ArrayList < ByteBuffer > ( names . length ) ; <nl> + <nl> + for ( String columnName : names ) <nl> + columnNames . add ( comparator . fromString ( columnName ) ) ; <nl> + } <nl> + else <nl> + { <nl> + columnNames = null ; <nl> + } <nl> } <nl> catch ( ParseException e ) <nl> { <nl> throw new IllegalArgumentException ( e . getMessage ( ) , e ) ; <nl> } <nl> + catch ( ConfigurationException e ) <nl> + { <nl> + throw new IllegalStateException ( e . getMessage ( ) , e ) ; <nl> + } <nl> <nl> mean = numDifferentKeys / 2 ; <nl> sigma = numDifferentKeys * STDev ; <nl> @ @ - 417 , 8 + 447 , 11 @ @ public class Session implements Serializable <nl> <nl> / / column family for standard columns <nl> CfDef standardCfDef = new CfDef ( " Keyspace1 " , " Standard1 " ) ; <nl> - System . out . println ( " Compression = " + compression ) ; <nl> - standardCfDef . setComparator _ type ( " AsciiType " ) . setDefault _ validation _ class ( " BytesType " ) . setCompression ( compression ) ; <nl> + <nl> + standardCfDef . setComparator _ type ( DEFAULT _ COMPARATOR ) <nl> + . setDefault _ validation _ class ( DEFAULT _ VALIDATOR ) <nl> + . setCompression ( compression ) ; <nl> + <nl> if ( indexType ! = null ) <nl> { <nl> ColumnDef standardColumn = new ColumnDef ( ByteBufferUtil . bytes ( " C1 " ) , " BytesType " ) ; <nl> @ @ - 428 , 7 + 461 , 10 @ @ public class Session implements Serializable <nl> <nl> / / column family with super columns <nl> CfDef superCfDef = new CfDef ( " Keyspace1 " , " Super1 " ) . setColumn _ type ( " Super " ) ; <nl> - superCfDef . setComparator _ type ( " AsciiType " ) . setSubcomparator _ type ( " AsciiType " ) . setDefault _ validation _ class ( " BytesType " ) . setCompression ( compression ) ; <nl> + superCfDef . setComparator _ type ( DEFAULT _ COMPARATOR ) <nl> + . setSubcomparator _ type ( DEFAULT _ COMPARATOR ) <nl> + . setDefault _ validation _ class ( DEFAULT _ VALIDATOR ) <nl> + . setCompression ( compression ) ; <nl> <nl> / / column family for standard counters <nl> CfDef counterCfDef = new CfDef ( " Keyspace1 " , " Counter1 " ) . setDefault _ validation _ class ( " CounterColumnType " ) . setReplicate _ on _ write ( replicateOnWrite ) . setCompression ( compression ) ; <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / Reader . java b / tools / stress / src / org / apache / cassandra / stress / operations / Reader . java <nl> index 6dcd4cd . . b5a8781 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / operations / Reader . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / operations / Reader . java <nl> @ @ - 37 , 16 + 37 , 13 @ @ public class Reader extends Operation <nl> <nl> public void run ( Cassandra . Client client ) throws IOException <nl> { <nl> - SliceRange sliceRange = new SliceRange ( ) ; <nl> - <nl> - / / start / finish <nl> - sliceRange . setStart ( new byte [ ] { } ) . setFinish ( new byte [ ] { } ) ; <nl> - <nl> - / / reversed / count <nl> - sliceRange . setReversed ( false ) . setCount ( session . getColumnsPerKey ( ) ) ; <nl> - <nl> / / initialize SlicePredicate with existing SliceRange <nl> - SlicePredicate predicate = new SlicePredicate ( ) . setSlice _ range ( sliceRange ) ; <nl> + SlicePredicate predicate = new SlicePredicate ( ) ; <nl> + <nl> + if ( session . columnNames = = null ) <nl> + predicate . setSlice _ range ( getSliceRange ( ) ) ; <nl> + else / / see CASSANDRA - 3064 about why this is useful <nl> + predicate . setColumn _ names ( session . columnNames ) ; <nl> <nl> if ( session . getColumnFamilyType ( ) = = ColumnFamilyType . Super ) <nl> { <nl> @ @ - 150 , 4 + 147 , 12 @ @ public class Reader extends Operation <nl> session . latency . getAndAdd ( System . currentTimeMillis ( ) - start ) ; <nl> } <nl> <nl> + private SliceRange getSliceRange ( ) <nl> + { <nl> + return new SliceRange ( ) <nl> + . setStart ( new byte [ ] { } ) <nl> + . setFinish ( new byte [ ] { } ) <nl> + . setReversed ( false ) <nl> + . setCount ( session . getColumnsPerKey ( ) ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 3c6d3b5 . . 6ca14a0 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 18 
 + * Expand range tombstone validation checks to multiple interim request stages ( CASSANDRA - 14824 ) 
 * Reverse order reads can return incomplete results ( CASSANDRA - 14803 ) 
 * Avoid calling iter . next ( ) in a loop when notifying indexers about range tombstones ( CASSANDRA - 14794 ) 
 * Fix purging semi - expired RT boundaries in reversed iterators ( CASSANDRA - 14672 ) 
 diff - - git a / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java b / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java 
 index 84e3c7d . . 4f936cc 100644 
 - - - a / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java 
 + + + b / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import org . apache . cassandra . db . filter . * ; 
 import org . apache . cassandra . db . lifecycle . View ; 
 import org . apache . cassandra . db . partitions . * ; 
 import org . apache . cassandra . db . rows . BaseRowIterator ; 
 + import org . apache . cassandra . db . transform . RTBoundValidator ; 
 import org . apache . cassandra . db . transform . Transformation ; 
 import org . apache . cassandra . dht . AbstractBounds ; 
 import org . apache . cassandra . dht . Bounds ; 
 @ @ - 253 , 8 + 254 , 12 @ @ public class PartitionRangeReadCommand extends ReadCommand 
 { 
 @ SuppressWarnings ( " resource " ) / / We close on exception and on closing the result returned by this method 
 Memtable . MemtableUnfilteredPartitionIterator iter = memtable . makePartitionIterator ( columnFilter ( ) , dataRange ( ) , isForThrift ( ) ) ; 
 + 
 + @ SuppressWarnings ( " resource " ) / / We close on exception and on closing the result returned by this method 
 + UnfilteredPartitionIterator iterator = isForThrift ( ) ? ThriftResultsMerger . maybeWrap ( iter , metadata ( ) , nowInSec ( ) ) : iter ; 
 + iterators . add ( RTBoundValidator . validate ( iterator , RTBoundValidator . Stage . MEMTABLE , false ) ) ; 
 + 
 oldestUnrepairedTombstone = Math . min ( oldestUnrepairedTombstone , iter . getMinLocalDeletionTime ( ) ) ; 
 - iterators . add ( isForThrift ( ) ? ThriftResultsMerger . maybeWrap ( iter , metadata ( ) , nowInSec ( ) ) : iter ) ; 
 } 
 
 SSTableReadsListener readCountUpdater = newReadCountUpdater ( ) ; 
 @ @ - 262 , 7 + 267 , 12 @ @ public class PartitionRangeReadCommand extends ReadCommand 
 { 
 @ SuppressWarnings ( " resource " ) / / We close on exception and on closing the result returned by this method 
 UnfilteredPartitionIterator iter = sstable . getScanner ( columnFilter ( ) , dataRange ( ) , isForThrift ( ) , readCountUpdater ) ; 
 - iterators . add ( isForThrift ( ) ? ThriftResultsMerger . maybeWrap ( iter , metadata ( ) , nowInSec ( ) ) : iter ) ; 
 + 
 + if ( isForThrift ( ) ) 
 + iter = ThriftResultsMerger . maybeWrap ( iter , metadata ( ) , nowInSec ( ) ) ; 
 + 
 + iterators . add ( RTBoundValidator . validate ( iter , RTBoundValidator . Stage . SSTABLE , false ) ) ; 
 + 
 if ( ! sstable . isRepaired ( ) ) 
 oldestUnrepairedTombstone = Math . min ( oldestUnrepairedTombstone , sstable . getMinLocalDeletionTime ( ) ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / ReadCommand . java b / src / java / org / apache / cassandra / db / ReadCommand . java 
 index f8a0795 . . 0135d1e 100644 
 - - - a / src / java / org / apache / cassandra / db / ReadCommand . java 
 + + + b / src / java / org / apache / cassandra / db / ReadCommand . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import org . apache . cassandra . db . partitions . * ; 
 import org . apache . cassandra . db . rows . * ; 
 import org . apache . cassandra . db . transform . RTBoundCloser ; 
 import org . apache . cassandra . db . transform . RTBoundValidator ; 
 + import org . apache . cassandra . db . transform . RTBoundValidator . Stage ; 
 import org . apache . cassandra . db . transform . Transformation ; 
 import org . apache . cassandra . dht . AbstractBounds ; 
 import org . apache . cassandra . index . Index ; 
 @ @ - 333 , 7 + 334 , 7 @ @ public abstract class ReadCommand implements ReadQuery 
 { 
 / / validate that the sequence of RT markers is correct : open is followed by close , deletion times for both 
 / / ends equal , and there are no dangling RT bound in any partition . 
 - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; 
 + iterator = RTBoundValidator . validate ( iterator , Stage . PROCESSED , true ) ; 
 
 return isDigestQuery ( ) 
 ? ReadResponse . createDigestResponse ( iterator , this ) 
 @ @ - 408 , 10 + 409 , 12 @ @ public abstract class ReadCommand implements ReadQuery 
 } 
 
 UnfilteredPartitionIterator iterator = ( null = = searcher ) ? queryStorage ( cfs , orderGroup ) : searcher . search ( orderGroup ) ; 
 + iterator = RTBoundValidator . validate ( iterator , Stage . MERGED , false ) ; 
 
 try 
 { 
 - iterator = withoutPurgeableTombstones ( iterator , cfs ) ; 
 + iterator = RTBoundValidator . validate ( withoutPurgeableTombstones ( iterator , cfs ) , Stage . PURGED , false ) ; 
 + 
 iterator = withMetricsRecording ( iterator , cfs . metric , startTimeNanos ) ; 
 
 / / If we ' ve used a 2ndary index , we know the result already satisfy the primary expression used , so 
 @ @ - 431 , 9 + 434 , 7 @ @ public abstract class ReadCommand implements ReadQuery 
 iterator = limits ( ) . filter ( iterator , nowInSec ( ) , selectsFullPartition ( ) ) ; 
 
 / / because of the above , we need to append an aritifical end bound if the source iterator was stopped short by a counter . 
 - iterator = Transformation . apply ( iterator , new RTBoundCloser ( ) ) ; 
 - 
 - return iterator ; 
 + return RTBoundCloser . close ( iterator ) ; 
 } 
 catch ( RuntimeException | Error e ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java 
 index 4b10530 . . 4c8e0bc 100644 
 - - - a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java 
 + + + b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java 
 @ @ - 36 , 6 + 36 , 7 @ @ import org . apache . cassandra . db . lifecycle . * ; 
 import org . apache . cassandra . db . filter . * ; 
 import org . apache . cassandra . db . partitions . * ; 
 import org . apache . cassandra . db . rows . * ; 
 + import org . apache . cassandra . db . transform . RTBoundValidator ; 
 import org . apache . cassandra . exceptions . RequestExecutionException ; 
 import org . apache . cassandra . io . sstable . format . SSTableReader ; 
 import org . apache . cassandra . io . sstable . format . SSTableReadsListener ; 
 @ @ - 686 , 12 + 687 , 19 @ @ public class SinglePartitionReadCommand extends ReadCommand 
 if ( partition = = null ) 
 continue ; 
 
 - @ SuppressWarnings ( " resource " ) / / ' iter ' is added to iterators which is closed on exception , or through the closing of the final merged iterator 
 + / / ' iter ' is added to iterators which is closed on exception , or through the closing of the final merged iterator 
 + @ SuppressWarnings ( " resource " ) 
 UnfilteredRowIterator iter = filter . getUnfilteredRowIterator ( columnFilter ( ) , partition ) ; 
 - @ SuppressWarnings ( " resource " ) / / same as above 
 - UnfilteredRowIterator maybeCopied = copyOnHeap ? UnfilteredRowIterators . cloningIterator ( iter , HeapAllocator . instance ) : iter ; 
 + 
 + if ( copyOnHeap ) 
 + iter = UnfilteredRowIterators . cloningIterator ( iter , HeapAllocator . instance ) ; 
 + 
 oldestUnrepairedTombstone = Math . min ( oldestUnrepairedTombstone , partition . stats ( ) . minLocalDeletionTime ) ; 
 - iterators . add ( isForThrift ( ) ? ThriftResultsMerger . maybeWrap ( maybeCopied , nowInSec ( ) ) : maybeCopied ) ; 
 + 
 + if ( isForThrift ( ) ) 
 + iter = ThriftResultsMerger . maybeWrap ( iter , nowInSec ( ) ) ; 
 + 
 + iterators . add ( RTBoundValidator . validate ( iter , RTBoundValidator . Stage . MEMTABLE , false ) ) ; 
 } 
 / * 
 * We can ' t eliminate full sstables based on the timestamp of what we ' ve already read like 
 @ @ - 733 , 16 + 741 , 24 @ @ public class SinglePartitionReadCommand extends ReadCommand 
 continue ; 
 } 
 
 - @ SuppressWarnings ( " resource " ) / / ' iter ' is added to iterators which is closed on exception , or through the closing of the final merged iterator 
 - UnfilteredRowIterator iter = filter . filter ( sstable . iterator ( partitionKey ( ) , 
 - columnFilter ( ) , 
 - filter . isReversed ( ) , 
 - isForThrift ( ) , 
 - metricsCollector ) ) ; 
 if ( ! sstable . isRepaired ( ) ) 
 oldestUnrepairedTombstone = Math . min ( oldestUnrepairedTombstone , sstable . getMinLocalDeletionTime ( ) ) ; 
 
 - iterators . add ( isForThrift ( ) ? ThriftResultsMerger . maybeWrap ( iter , nowInSec ( ) ) : iter ) ; 
 + / / ' iter ' is added to iterators which is closed on exception , or through the closing of the final merged iterator 
 + @ SuppressWarnings ( " resource " ) 
 + UnfilteredRowIterator iter = filter . filter ( 
 + sstable . iterator ( partitionKey ( ) , 
 + columnFilter ( ) , 
 + filter . isReversed ( ) , 
 + isForThrift ( ) , 
 + metricsCollector ) 
 + ) ; 
 + 
 + if ( isForThrift ( ) ) 
 + iter = ThriftResultsMerger . maybeWrap ( iter , nowInSec ( ) ) ; 
 + 
 + iterators . add ( RTBoundValidator . validate ( iter , RTBoundValidator . Stage . SSTABLE , false ) ) ; 
 + 
 mostRecentPartitionTombstone = Math . max ( mostRecentPartitionTombstone , iter . partitionLevelDeletion ( ) . markedForDeleteAt ( ) ) ; 
 } 
 
 @ @ - 862 , 7 + 878 , 12 @ @ public class SinglePartitionReadCommand extends ReadCommand 
 UnfilteredRowIterator clonedFilter = copyOnHeap 
 ? UnfilteredRowIterators . cloningIterator ( iter , HeapAllocator . instance ) 
 : iter ; 
 - result = add ( isForThrift ( ) ? ThriftResultsMerger . maybeWrap ( clonedFilter , nowInSec ( ) ) : clonedFilter , result , filter , false ) ; 
 + result = add ( 
 + RTBoundValidator . validate ( isForThrift ( ) ? ThriftResultsMerger . maybeWrap ( clonedFilter , nowInSec ( ) ) : clonedFilter , RTBoundValidator . Stage . MEMTABLE , false ) , 
 + result , 
 + filter , 
 + false 
 + ) ; 
 } 
 } 
 
 @ @ - 901 , 10 + 922 , 29 @ @ public class SinglePartitionReadCommand extends ReadCommand 
 metricsCollector ) ) ) 
 { 
 if ( ! iter . partitionLevelDeletion ( ) . isLive ( ) ) 
 - result = add ( UnfilteredRowIterators . noRowsIterator ( iter . metadata ( ) , iter . partitionKey ( ) , Rows . EMPTY _ STATIC _ ROW , iter . partitionLevelDeletion ( ) , filter . isReversed ( ) ) , result , filter , sstable . isRepaired ( ) ) ; 
 + { 
 + result = add ( 
 + UnfilteredRowIterators . noRowsIterator ( iter . metadata ( ) , 
 + iter . partitionKey ( ) , 
 + Rows . EMPTY _ STATIC _ ROW , 
 + iter . partitionLevelDeletion ( ) , 
 + filter . isReversed ( ) ) , 
 + result , 
 + filter , 
 + sstable . isRepaired ( ) 
 + ) ; 
 + } 
 else 
 - result = add ( iter , result , filter , sstable . isRepaired ( ) ) ; 
 + { 
 + result = add ( 
 + RTBoundValidator . validate ( iter , RTBoundValidator . Stage . SSTABLE , false ) , 
 + result , 
 + filter , 
 + sstable . isRepaired ( ) 
 + ) ; 
 + } 
 } 
 + 
 continue ; 
 } 
 
 @ @ - 920 , 7 + 960 , 13 @ @ public class SinglePartitionReadCommand extends ReadCommand 
 
 if ( sstable . isRepaired ( ) ) 
 onlyUnrepaired = false ; 
 - result = add ( isForThrift ( ) ? ThriftResultsMerger . maybeWrap ( iter , nowInSec ( ) ) : iter , result , filter , sstable . isRepaired ( ) ) ; 
 + 
 + result = add ( 
 + RTBoundValidator . validate ( isForThrift ( ) ? ThriftResultsMerger . maybeWrap ( iter , nowInSec ( ) ) : iter , RTBoundValidator . Stage . SSTABLE , false ) , 
 + result , 
 + filter , 
 + sstable . isRepaired ( ) 
 + ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / transform / RTBoundCloser . java b / src / java / org / apache / cassandra / db / transform / RTBoundCloser . java 
 index 11f0344 . . ee5401d 100644 
 - - - a / src / java / org / apache / cassandra / db / transform / RTBoundCloser . java 
 + + + b / src / java / org / apache / cassandra / db / transform / RTBoundCloser . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . db . Clustering ; 
 import org . apache . cassandra . db . DeletionTime ; 
 import org . apache . cassandra . db . ReadOrderGroup ; 
 + import org . apache . cassandra . db . partitions . UnfilteredPartitionIterator ; 
 import org . apache . cassandra . db . rows . * ; 
 
 / * * 
 @ @ - 37 , 6 + 38 , 21 @ @ import org . apache . cassandra . db . rows . * ; 
 * / 
 public final class RTBoundCloser extends Transformation < UnfilteredRowIterator > 
 { 
 + private RTBoundCloser ( ) 
 + { 
 + } 
 + 
 + public static UnfilteredPartitionIterator close ( UnfilteredPartitionIterator partitions ) 
 + { 
 + return Transformation . apply ( partitions , new RTBoundCloser ( ) ) ; 
 + } 
 + 
 + public static UnfilteredRowIterator close ( UnfilteredRowIterator partition ) 
 + { 
 + RowsTransformation transformation = new RowsTransformation ( partition ) ; 
 + return Transformation . apply ( MoreRows . extend ( partition , transformation , partition . columns ( ) ) , transformation ) ; 
 + } 
 + 
 @ Override 
 public UnfilteredRowIterator applyToPartition ( UnfilteredRowIterator partition ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / transform / RTBoundValidator . java b / src / java / org / apache / cassandra / db / transform / RTBoundValidator . java 
 index 7866b14 . . 1f675cf 100644 
 - - - a / src / java / org / apache / cassandra / db / transform / RTBoundValidator . java 
 + + + b / src / java / org / apache / cassandra / db / transform / RTBoundValidator . java 
 @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . db . transform ; 
 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . db . DeletionTime ; 
 + import org . apache . cassandra . db . partitions . UnfilteredPartitionIterator ; 
 import org . apache . cassandra . db . rows . RangeTombstoneMarker ; 
 import org . apache . cassandra . db . rows . UnfilteredRowIterator ; 
 
 @ @ - 32 , 29 + 33 , 45 @ @ import org . apache . cassandra . db . rows . UnfilteredRowIterator ; 
 * / 
 public final class RTBoundValidator extends Transformation < UnfilteredRowIterator > 
 { 
 + public enum Stage { MEMTABLE , SSTABLE , MERGED , PURGED , PROCESSED } 
 + 
 + private final Stage stage ; 
 private final boolean enforceIsClosed ; 
 
 - public RTBoundValidator ( boolean enforceIsClosed ) 
 + private RTBoundValidator ( Stage stage , boolean enforceIsClosed ) 
 { 
 + this . stage = stage ; 
 this . enforceIsClosed = enforceIsClosed ; 
 } 
 
 + public static UnfilteredPartitionIterator validate ( UnfilteredPartitionIterator partitions , Stage stage , boolean enforceIsClosed ) 
 + { 
 + return Transformation . apply ( partitions , new RTBoundValidator ( stage , enforceIsClosed ) ) ; 
 + } 
 + 
 + public static UnfilteredRowIterator validate ( UnfilteredRowIterator partition , Stage stage , boolean enforceIsClosed ) 
 + { 
 + return Transformation . apply ( partition , new RowsTransformation ( stage , partition . metadata ( ) , partition . isReverseOrder ( ) , enforceIsClosed ) ) ; 
 + } 
 + 
 @ Override 
 public UnfilteredRowIterator applyToPartition ( UnfilteredRowIterator partition ) 
 { 
 - return Transformation . apply ( partition , new RowsTransformation ( partition . metadata ( ) , partition . isReverseOrder ( ) , enforceIsClosed ) ) ; 
 + return Transformation . apply ( partition , new RowsTransformation ( stage , partition . metadata ( ) , partition . isReverseOrder ( ) , enforceIsClosed ) ) ; 
 } 
 
 private final static class RowsTransformation extends Transformation 
 { 
 + private final Stage stage ; 
 private final CFMetaData metadata ; 
 private final boolean isReverseOrder ; 
 private final boolean enforceIsClosed ; 
 
 private DeletionTime openMarkerDeletionTime ; 
 
 - private RowsTransformation ( CFMetaData metadata , boolean isReverseOrder , boolean enforceIsClosed ) 
 + private RowsTransformation ( Stage stage , CFMetaData metadata , boolean isReverseOrder , boolean enforceIsClosed ) 
 { 
 + this . stage = stage ; 
 this . metadata = metadata ; 
 this . isReverseOrder = isReverseOrder ; 
 this . enforceIsClosed = enforceIsClosed ; 
 @ @ - 98 , 8 + 115 , 8 @ @ public final class RTBoundValidator extends Transformation < UnfilteredRowIterator 
 
 private IllegalStateException ise ( String why ) 
 { 
 - String message = String . format ( " UnfilteredRowIterator for % s . % s has an illegal RT bounds sequence : % s " , 
 - metadata . ksName , metadata . cfName , why ) ; 
 + String message = String . format ( " % s UnfilteredRowIterator for % s . % s has an illegal RT bounds sequence : % s " , 
 + stage , metadata . ksName , metadata . cfName , why ) ; 
 throw new IllegalStateException ( message ) ; 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / transform / RTTransformationsTest . java b / test / unit / org / apache / cassandra / db / transform / RTTransformationsTest . java 
 index 832c5a3 . . f79b9f3 100644 
 - - - a / test / unit / org / apache / cassandra / db / transform / RTTransformationsTest . java 
 + + + b / test / unit / org / apache / cassandra / db / transform / RTTransformationsTest . java 
 @ @ - 33 , 13 + 33 , 16 @ @ import org . apache . cassandra . db . marshal . UTF8Type ; 
 import org . apache . cassandra . db . partitions . SingletonUnfilteredPartitionIterator ; 
 import org . apache . cassandra . db . partitions . UnfilteredPartitionIterator ; 
 import org . apache . cassandra . db . rows . * ; 
 + import org . apache . cassandra . db . transform . RTBoundValidator . Stage ; 
 import org . apache . cassandra . dht . Murmur3Partitioner ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 + import static org . apache . cassandra . db . transform . RTBoundCloser . close ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertTrue ; 
 
 + import static org . apache . cassandra . db . transform . RTBoundValidator . validate ; 
 import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; 
 
 public final class RTTransformationsTest 
 @ @ - 80 , 8 + 83 , 7 @ @ public final class RTTransformationsTest 
 , row ( 1 , " a " , " 1 " , " " ) 
 , bound ( Kind . INCL _ END _ BOUND , 0 , " a " , " 1 " ) 
 ) ; 
 - extended = Transformation . apply ( extended , new RTBoundCloser ( ) ) ; 
 - assertIteratorsEqual ( original , extended ) ; 
 + assertIteratorsEqual ( original , close ( extended ) ) ; 
 } 
 
 @ Test 
 @ @ - 98 , 8 + 100 , 7 @ @ public final class RTTransformationsTest 
 , row ( 1 , " a " , " 1 " , " " ) 
 , bound ( Kind . INCL _ START _ BOUND , 0 , " a " , " 1 " ) 
 ) ; 
 - extended = Transformation . apply ( extended , new RTBoundCloser ( ) ) ; 
 - assertIteratorsEqual ( original , extended ) ; 
 + assertIteratorsEqual ( original , close ( extended ) ) ; 
 } 
 
 @ Test 
 @ @ - 109 , 7 + 110 , 7 @ @ public final class RTTransformationsTest 
 , bound ( Kind . INCL _ START _ BOUND , 0 , " a " , " 1 " ) 
 , row ( 1 , " a " , " 1 " , " " ) 
 ) ; 
 - UnfilteredPartitionIterator extended = Transformation . apply ( original , new RTBoundCloser ( ) ) ; 
 + UnfilteredPartitionIterator extended = close ( original ) ; 
 
 UnfilteredPartitionIterator expected = iter ( false 
 , bound ( Kind . INCL _ START _ BOUND , 0 , " a " , " 1 " ) 
 @ @ - 127 , 7 + 128 , 7 @ @ public final class RTTransformationsTest 
 , boundary ( Kind . EXCL _ END _ INCL _ START _ BOUNDARY , 0 , 1 , " a " , " 0 " ) 
 , row ( 2 , " a " , " 1 " , " " ) 
 ) ; 
 - UnfilteredPartitionIterator extended = Transformation . apply ( original , new RTBoundCloser ( ) ) ; 
 + UnfilteredPartitionIterator extended = close ( original ) ; 
 
 UnfilteredPartitionIterator expected = iter ( false 
 , bound ( Kind . INCL _ START _ BOUND , 0 , " a " ) 
 @ @ - 145 , 7 + 146 , 7 @ @ public final class RTTransformationsTest 
 , bound ( Kind . INCL _ END _ BOUND , 0 , " a " , " 1 " ) 
 , row ( 1 , " a " , " 1 " , " " ) 
 ) ; 
 - UnfilteredPartitionIterator extended = Transformation . apply ( original , new RTBoundCloser ( ) ) ; 
 + UnfilteredPartitionIterator extended = close ( original ) ; 
 
 UnfilteredPartitionIterator expected = iter ( true 
 , bound ( Kind . INCL _ END _ BOUND , 0 , " a " , " 1 " ) 
 @ @ - 163 , 7 + 164 , 7 @ @ public final class RTTransformationsTest 
 , boundary ( Kind . INCL _ END _ EXCL _ START _ BOUNDARY , 1 , 0 , " a " , " 1 " ) 
 , row ( 2 , " a " , " 0 " , " " ) 
 ) ; 
 - UnfilteredPartitionIterator extended = Transformation . apply ( original , new RTBoundCloser ( ) ) ; 
 + UnfilteredPartitionIterator extended = close ( original ) ; 
 
 UnfilteredPartitionIterator expected = iter ( true 
 , bound ( Kind . INCL _ END _ BOUND , 0 , " a " ) 
 @ @ - 181 , 8 + 182 , 7 @ @ public final class RTTransformationsTest 
 UnfilteredPartitionIterator iterator = iter ( false 
 , bound ( Kind . INCL _ START _ BOUND , 0 , " a " ) 
 ) ; 
 - iterator = Transformation . apply ( iterator , new RTBoundCloser ( ) ) ; 
 - assertThrowsISEIterated ( iterator ) ; 
 + assertThrowsISEIterated ( close ( iterator ) ) ; 
 } 
 
 @ Test 
 @ @ - 197 , 7 + 197 , 7 @ @ public final class RTTransformationsTest 
 , row ( 1 , " a " , " 2 " , " " ) 
 , bound ( Kind . INCL _ END _ BOUND , 0 , " a " , " 2 " ) 
 ) ; 
 - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; 
 + iterator = validate ( iterator , Stage . PROCESSED , true ) ; 
 drain ( iterator ) ; 
 } 
 
 @ @ - 213 , 7 + 213 , 7 @ @ public final class RTTransformationsTest 
 , row ( 1 , " a " , " 1 " , " " ) 
 , bound ( Kind . INCL _ START _ BOUND , 0 , " a " , " 1 " ) 
 ) ; 
 - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; 
 + iterator = validate ( iterator , Stage . PROCESSED , true ) ; 
 drain ( iterator ) ; 
 } 
 
 @ @ - 237 , 7 + 237 , 7 @ @ public final class RTTransformationsTest 
 
 , bound ( Kind . INCL _ END _ BOUND , 0 , " a " ) 
 ) ; 
 - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; 
 + iterator = validate ( iterator , Stage . PROCESSED , true ) ; 
 drain ( iterator ) ; 
 } 
 
 @ @ - 261 , 7 + 261 , 7 @ @ public final class RTTransformationsTest 
 
 , bound ( Kind . INCL _ START _ BOUND , 0 , " a " ) 
 ) ; 
 - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; 
 + iterator = validate ( iterator , Stage . PROCESSED , true ) ; 
 drain ( iterator ) ; 
 } 
 
 @ @ - 273 , 7 + 273 , 7 @ @ public final class RTTransformationsTest 
 , row ( 1 , " a " , " 1 " , " " ) 
 , bound ( Kind . INCL _ END _ BOUND , 1 , " a " , " 1 " ) 
 ) ; 
 - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; 
 + iterator = validate ( iterator , Stage . PROCESSED , true ) ; 
 assertThrowsISEIterated ( iterator ) ; 
 } 
 
 @ @ - 285 , 7 + 285 , 7 @ @ public final class RTTransformationsTest 
 , row ( 1 , " a " , " 1 " , " " ) 
 , bound ( Kind . INCL _ START _ BOUND , 1 , " a " , " 1 " ) 
 ) ; 
 - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; 
 + iterator = validate ( iterator , Stage . PROCESSED , true ) ; 
 assertThrowsISEIterated ( iterator ) ; 
 } 
 
 @ @ - 299 , 7 + 299 , 7 @ @ public final class RTTransformationsTest 
 , row ( 1 , " a " , " 1 " , " " ) 
 , bound ( Kind . INCL _ END _ BOUND , 0 , " a " , " 1 " ) 
 ) ; 
 - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; 
 + iterator = validate ( iterator , Stage . PROCESSED , true ) ; 
 assertThrowsISEIterated ( iterator ) ; 
 
 / / duplicated end bound 
 @ @ - 309 , 7 + 309 , 7 @ @ public final class RTTransformationsTest 
 , bound ( Kind . INCL _ END _ BOUND , 0 , " a " , " 1 " ) 
 , bound ( Kind . INCL _ END _ BOUND , 0 , " a " , " 1 " ) 
 ) ; 
 - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; 
 + iterator = validate ( iterator , Stage . PROCESSED , true ) ; 
 assertThrowsISEIterated ( iterator ) ; 
 
 / / absent open bound 
 @ @ - 317 , 7 + 317 , 7 @ @ public final class RTTransformationsTest 
 , row ( 1 , " a " , " 1 " , " " ) 
 , bound ( Kind . INCL _ END _ BOUND , 0 , " a " , " 1 " ) 
 ) ; 
 - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; 
 + iterator = validate ( iterator , Stage . PROCESSED , true ) ; 
 assertThrowsISEIterated ( iterator ) ; 
 
 / / absent end bound 
 @ @ - 325 , 7 + 325 , 7 @ @ public final class RTTransformationsTest 
 , bound ( Kind . INCL _ START _ BOUND , 0 , " a " , " 1 " ) 
 , row ( 1 , " a " , " 1 " , " " ) 
 ) ; 
 - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; 
 + iterator = validate ( iterator , Stage . PROCESSED , true ) ; 
 assertThrowsISEIterated ( iterator ) ; 
 } 
 
 @ @ - 339 , 7 + 339 , 7 @ @ public final class RTTransformationsTest 
 , bound ( Kind . INCL _ START _ BOUND , 0 , " a " , " 1 " ) 
 , bound ( Kind . INCL _ START _ BOUND , 0 , " a " , " 1 " ) 
 ) ; 
 - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; 
 + iterator = validate ( iterator , Stage . PROCESSED , true ) ; 
 assertThrowsISEIterated ( iterator ) ; 
 
 / / duplicated end bound 
 @ @ - 349 , 7 + 349 , 7 @ @ public final class RTTransformationsTest 
 , row ( 1 , " a " , " 1 " , " " ) 
 , bound ( Kind . INCL _ START _ BOUND , 0 , " a " , " 1 " ) 
 ) ; 
 - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; 
 + iterator = validate ( iterator , Stage . PROCESSED , true ) ; 
 assertThrowsISEIterated ( iterator ) ; 
 
 / / absent open bound 
 @ @ - 357 , 7 + 357 , 7 @ @ public final class RTTransformationsTest 
 , bound ( Kind . INCL _ END _ BOUND , 0 , " a " , " 1 " ) 
 , row ( 1 , " a " , " 1 " , " " ) 
 ) ; 
 - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; 
 + iterator = validate ( iterator , Stage . PROCESSED , true ) ; 
 assertThrowsISEIterated ( iterator ) ; 
 
 / / absent end bound 
 @ @ - 365 , 7 + 365 , 7 @ @ public final class RTTransformationsTest 
 , row ( 1 , " a " , " 1 " , " " ) 
 , bound ( Kind . INCL _ START _ BOUND , 0 , " a " , " 1 " ) 
 ) ; 
 - iterator = Transformation . apply ( iterator , new RTBoundValidator ( true ) ) ; 
 + iterator = validate ( iterator , Stage . PROCESSED , true ) ; 
 assertThrowsISEIterated ( iterator ) ; 
 } 


NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 70281be . . fd96002 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 37 , 7 + 37 , 7 @ @ 
 and few other places responsible for work with SSTable files ( CASSANDRA - 3040 ) 
 * Stop reading from sstables once we know we have the most recent columns , 
 for query - by - name requests ( CASSANDRA - 2498 ) 
 - 
 + * Add query - by - column mode to stress . java ( CASSANDRA - 3064 ) 
 
 0 . 8 . 5 
 * fix NPE when encryption _ options is unspecified ( CASSANDRA - 3007 ) 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / Session . java b / tools / stress / src / org / apache / cassandra / stress / Session . java 
 index 1508379 . . df0305b 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / Session . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / Session . java 
 @ @ - 20 , 10 + 20 , 14 @ @ package org . apache . cassandra . stress ; 
 import java . io . * ; 
 import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 + import java . nio . ByteBuffer ; 
 import java . util . * ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 import java . util . concurrent . atomic . AtomicLong ; 
 
 + import org . apache . cassandra . config . ConfigurationException ; 
 + import org . apache . cassandra . db . marshal . AbstractType ; 
 + import org . apache . cassandra . db . marshal . TypeParser ; 
 import org . apache . commons . cli . * ; 
 
 import org . apache . cassandra . db . ColumnFamilyType ; 
 @ @ - 41 , 6 + 45 , 9 @ @ public class Session implements Serializable 
 / / command line options 
 public static final Options availableOptions = new Options ( ) ; 
 
 + public static final String DEFAULT _ COMPARATOR = " AsciiType " ; 
 + public static final String DEFAULT _ VALIDATOR = " BytesType " ; 
 + 
 public final AtomicInteger operations ; 
 public final AtomicInteger keys ; 
 public final AtomicLong latency ; 
 @ @ - 78 , 6 + 85 , 7 @ @ public class Session implements Serializable 
 availableOptions . addOption ( " V " , " average - size - values " , false , " Generate column values of average rather than specific size " ) ; 
 availableOptions . addOption ( " T " , " send - to " , true , " Send this as a request to the stress daemon at specified address . " ) ; 
 availableOptions . addOption ( " I " , " compression " , false , " Use sstable compression when creating schema " ) ; 
 + availableOptions . addOption ( " Q " , " query - names " , true , " Comma - separated list of column names to retrieve from each row . " ) ; 
 } 
 
 private int numKeys = 1000 * 1000 ; 
 @ @ - 109 , 6 + 117 , 9 @ @ public class Session implements Serializable 
 private String replicationStrategy = " org . apache . cassandra . locator . SimpleStrategy " ; 
 private Map < String , String > replicationStrategyOptions = new HashMap < String , String > ( ) ; 
 
 + / / if we know exactly column names that we want to read ( set by - Q option ) 
 + public final List < ByteBuffer > columnNames ; 
 + 
 public final boolean averageSizeValues ; 
 
 / / required by Gaussian distribution . 
 @ @ - 275 , 11 + 286 , 30 @ @ public class Session implements Serializable 
 { 
 throw new RuntimeException ( e ) ; 
 } 
 + 
 + if ( cmd . hasOption ( " Q " ) ) 
 + { 
 + AbstractType comparator = TypeParser . parse ( DEFAULT _ COMPARATOR ) ; 
 + 
 + String [ ] names = StringUtils . split ( cmd . getOptionValue ( " Q " ) , " , " ) ; 
 + columnNames = new ArrayList < ByteBuffer > ( names . length ) ; 
 + 
 + for ( String columnName : names ) 
 + columnNames . add ( comparator . fromString ( columnName ) ) ; 
 + } 
 + else 
 + { 
 + columnNames = null ; 
 + } 
 } 
 catch ( ParseException e ) 
 { 
 throw new IllegalArgumentException ( e . getMessage ( ) , e ) ; 
 } 
 + catch ( ConfigurationException e ) 
 + { 
 + throw new IllegalStateException ( e . getMessage ( ) , e ) ; 
 + } 
 
 mean = numDifferentKeys / 2 ; 
 sigma = numDifferentKeys * STDev ; 
 @ @ - 417 , 8 + 447 , 11 @ @ public class Session implements Serializable 
 
 / / column family for standard columns 
 CfDef standardCfDef = new CfDef ( " Keyspace1 " , " Standard1 " ) ; 
 - System . out . println ( " Compression = " + compression ) ; 
 - standardCfDef . setComparator _ type ( " AsciiType " ) . setDefault _ validation _ class ( " BytesType " ) . setCompression ( compression ) ; 
 + 
 + standardCfDef . setComparator _ type ( DEFAULT _ COMPARATOR ) 
 + . setDefault _ validation _ class ( DEFAULT _ VALIDATOR ) 
 + . setCompression ( compression ) ; 
 + 
 if ( indexType ! = null ) 
 { 
 ColumnDef standardColumn = new ColumnDef ( ByteBufferUtil . bytes ( " C1 " ) , " BytesType " ) ; 
 @ @ - 428 , 7 + 461 , 10 @ @ public class Session implements Serializable 
 
 / / column family with super columns 
 CfDef superCfDef = new CfDef ( " Keyspace1 " , " Super1 " ) . setColumn _ type ( " Super " ) ; 
 - superCfDef . setComparator _ type ( " AsciiType " ) . setSubcomparator _ type ( " AsciiType " ) . setDefault _ validation _ class ( " BytesType " ) . setCompression ( compression ) ; 
 + superCfDef . setComparator _ type ( DEFAULT _ COMPARATOR ) 
 + . setSubcomparator _ type ( DEFAULT _ COMPARATOR ) 
 + . setDefault _ validation _ class ( DEFAULT _ VALIDATOR ) 
 + . setCompression ( compression ) ; 
 
 / / column family for standard counters 
 CfDef counterCfDef = new CfDef ( " Keyspace1 " , " Counter1 " ) . setDefault _ validation _ class ( " CounterColumnType " ) . setReplicate _ on _ write ( replicateOnWrite ) . setCompression ( compression ) ; 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / Reader . java b / tools / stress / src / org / apache / cassandra / stress / operations / Reader . java 
 index 6dcd4cd . . b5a8781 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / operations / Reader . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / operations / Reader . java 
 @ @ - 37 , 16 + 37 , 13 @ @ public class Reader extends Operation 
 
 public void run ( Cassandra . Client client ) throws IOException 
 { 
 - SliceRange sliceRange = new SliceRange ( ) ; 
 - 
 - / / start / finish 
 - sliceRange . setStart ( new byte [ ] { } ) . setFinish ( new byte [ ] { } ) ; 
 - 
 - / / reversed / count 
 - sliceRange . setReversed ( false ) . setCount ( session . getColumnsPerKey ( ) ) ; 
 - 
 / / initialize SlicePredicate with existing SliceRange 
 - SlicePredicate predicate = new SlicePredicate ( ) . setSlice _ range ( sliceRange ) ; 
 + SlicePredicate predicate = new SlicePredicate ( ) ; 
 + 
 + if ( session . columnNames = = null ) 
 + predicate . setSlice _ range ( getSliceRange ( ) ) ; 
 + else / / see CASSANDRA - 3064 about why this is useful 
 + predicate . setColumn _ names ( session . columnNames ) ; 
 
 if ( session . getColumnFamilyType ( ) = = ColumnFamilyType . Super ) 
 { 
 @ @ - 150 , 4 + 147 , 12 @ @ public class Reader extends Operation 
 session . latency . getAndAdd ( System . currentTimeMillis ( ) - start ) ; 
 } 
 
 + private SliceRange getSliceRange ( ) 
 + { 
 + return new SliceRange ( ) 
 + . setStart ( new byte [ ] { } ) 
 + . setFinish ( new byte [ ] { } ) 
 + . setReversed ( false ) 
 + . setCount ( session . getColumnsPerKey ( ) ) ; 
 + } 
 }
