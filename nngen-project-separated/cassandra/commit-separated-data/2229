BLEU SCORE: 0.05341087579952926

TEST MSG: Validate arguments of blobAs functions
GENERATED MSG: merge from 1 . 0

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 9ebb8cd . . 2c2ab71 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 6 , 6 + 6 , 7 @ @ <nl> * Fix UDT field selection with empty fields ( CASSANDRA - 7670 ) <nl> * Bogus deserialization of static cells from sstable ( CASSANDRA - 7684 ) <nl> Merged from 2 . 0 : <nl> + * Validate arguments of blobAs * functions ( CASSANDRA - 7707 ) <nl> * Fix potential AssertionError with 2ndary indexes ( CASSANDRA - 6612 ) <nl> * Avoid logging CompactionInterrupted at ERROR ( CASSANDRA - 7694 ) <nl> * Minor leak in sstable2jon ( CASSANDRA - 7709 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / BytesConversionFcts . java b / src / java / org / apache / cassandra / cql3 / functions / BytesConversionFcts . java <nl> index b30b5e7 . . e3023db 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / BytesConversionFcts . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / BytesConversionFcts . java <nl> @ @ - 23 , 6 + 23 , 9 @ @ import java . util . List ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . db . marshal . BytesType ; <nl> import org . apache . cassandra . db . marshal . UTF8Type ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> + import org . apache . cassandra . serializers . MarshalException ; <nl> <nl> public abstract class BytesConversionFcts <nl> { <nl> @ @ - 40 , 14 + 43 , 25 @ @ public abstract class BytesConversionFcts <nl> } ; <nl> } <nl> <nl> - public static Function makeFromBlobFunction ( AbstractType < ? > toType ) <nl> + public static Function makeFromBlobFunction ( final AbstractType < ? > toType ) <nl> { <nl> - String name = " blobas " + toType . asCQL3Type ( ) ; <nl> + final String name = " blobas " + toType . asCQL3Type ( ) ; <nl> return new AbstractFunction ( name , toType , BytesType . instance ) <nl> { <nl> - public ByteBuffer execute ( List < ByteBuffer > parameters ) <nl> + public ByteBuffer execute ( List < ByteBuffer > parameters ) throws InvalidRequestException <nl> { <nl> - return parameters . get ( 0 ) ; <nl> + ByteBuffer val = parameters . get ( 0 ) ; <nl> + try <nl> + { <nl> + if ( val ! = null ) <nl> + toType . validate ( val ) ; <nl> + return val ; <nl> + } <nl> + catch ( MarshalException e ) <nl> + { <nl> + throw new InvalidRequestException ( String . format ( " In call to function % s , value 0x % s is not a valid binary representation for type % s " , <nl> + name , ByteBufferUtil . bytesToHex ( val ) , toType . asCQL3Type ( ) ) ) ; <nl> + } <nl> } <nl> } ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java b / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java <nl> index a0c7447 . . 4ae7c98 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java <nl> @ @ - 28 , 6 + 28 , 8 @ @ import org . apache . cassandra . db . marshal . ListType ; <nl> import org . apache . cassandra . db . marshal . MapType ; <nl> import org . apache . cassandra . db . marshal . SetType ; <nl> import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . serializers . MarshalException ; <nl> <nl> public class FunctionCall extends Term . NonTerminal <nl> { <nl> @ @ - 63 , 8 + 65 , 24 @ @ public class FunctionCall extends Term . NonTerminal <nl> throw new InvalidRequestException ( String . format ( " Invalid null value for argument to % s " , fun ) ) ; <nl> buffers . add ( val ) ; <nl> } <nl> + return executeInternal ( fun , buffers ) ; <nl> + } <nl> <nl> - return fun . execute ( buffers ) ; <nl> + private static ByteBuffer executeInternal ( Function fun , List < ByteBuffer > params ) throws InvalidRequestException <nl> + { <nl> + ByteBuffer result = fun . execute ( params ) ; <nl> + try <nl> + { <nl> + / / Check the method didn ' t lied on it ' s declared return type <nl> + if ( result ! = null ) <nl> + fun . returnType ( ) . validate ( result ) ; <nl> + return result ; <nl> + } <nl> + catch ( MarshalException e ) <nl> + { <nl> + throw new RuntimeException ( String . format ( " Return of function % s ( % s ) is not a valid value for its declared return type % s " , <nl> + fun , ByteBufferUtil . bytesToHex ( result ) , fun . returnType ( ) . asCQL3Type ( ) ) ) ; <nl> + } <nl> } <nl> <nl> public boolean containsBindMarker ( ) <nl> @ @ - 132 , 7 + 150 , 8 @ @ public class FunctionCall extends Term . NonTerminal <nl> assert t instanceof Term . Terminal ; <nl> buffers . add ( ( ( Term . Terminal ) t ) . get ( QueryOptions . DEFAULT ) ) ; <nl> } <nl> - return fun . execute ( buffers ) ; <nl> + <nl> + return executeInternal ( fun , buffers ) ; <nl> } <nl> <nl> public boolean isAssignableTo ( String keyspace , ColumnSpecification receiver )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d518830 . . 52cc2c1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 29 , 7 + 29 , 7 @ @ <nl> * add scheduler JMX metrics ( CASSANDRA - 2962 ) <nl> * add block level checksum for compressed data ( CASSANDRA - 1717 ) <nl> * make column family backed column map pluggable and introduce unsynchronized <nl> - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) <nl> + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) <nl> * refactoring of the secondary index api ( CASSANDRA - 2982 ) <nl> * make CL > ONE reads wait for digest reconciliation before returning <nl> ( CASSANDRA - 2494 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> index c316a85 . . 71c7213 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor <nl> this . reversed = reversed ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public AbstractType < ? > getComparator ( ) <nl> { <nl> return comparator ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 1239d1c . . 38bc0d7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer <nl> this . cfm = cfm ; <nl> } <nl> <nl> - public ColumnFamily cloneMeShallow ( ) <nl> + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) <nl> { <nl> - ColumnFamily cf = ColumnFamily . create ( cfm ) ; <nl> + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; <nl> / / since deletion info is immutable , aliasing it is fine <nl> cf . deletionInfo . set ( deletionInfo . get ( ) ) ; <nl> return cf ; <nl> } <nl> <nl> + public ColumnFamily cloneMeShallow ( ) <nl> + { <nl> + return cloneMeShallow ( columns . getFactory ( ) ) ; <nl> + } <nl> + <nl> public AbstractType getSubComparator ( ) <nl> { <nl> IColumnSerializer s = getColumnSerializer ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 0bfd1c5 . . 552d3e9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> - * tombstones that are no longer relevant . * / <nl> + / * * <nl> + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> + * tombstones that are no longer relevant . <nl> + * The returned column family won ' t be thread safe . <nl> + * / <nl> ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) <nl> { <nl> / / special case slicing the entire row : <nl> @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; <nl> if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) <nl> { <nl> - ColumnFamily cf = cached . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> if ( sc ! = null ) <nl> cf . addColumn ( sc , HeapAllocator . instance ) ; <nl> return removeDeleted ( cf , gcBefore ) ; <nl> @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> <nl> IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; <nl> - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; <nl> / / TODO this is necessary because when we collate supercolumns together , we don ' t check <nl> / / their subcolumns for relevance , so we need to do a second prune post facto here . <nl> diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> index 37f5a60 . . 624dec7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns <nl> public ISortedColumns cloneMe ( ) ; <nl> <nl> / * * <nl> + * Returns the factory used for this ISortedColumns implementation . <nl> + * / <nl> + public Factory getFactory ( ) ; <nl> + <nl> + / * * <nl> * Adds a column to this column map . <nl> * If a column with the same name is already present in the map , it will <nl> * be replaced by the newly added column . <nl> diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> index cd2488a . . 13a111a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new ThreadSafeSortedColumns ( this ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> index 34e83dc . . 6c3fc42 100644 <nl> - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new TreeMapBackedSortedColumns ( this ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 9ebb8cd . . 2c2ab71 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 6 , 6 + 6 , 7 @ @ 
 * Fix UDT field selection with empty fields ( CASSANDRA - 7670 ) 
 * Bogus deserialization of static cells from sstable ( CASSANDRA - 7684 ) 
 Merged from 2 . 0 : 
 + * Validate arguments of blobAs * functions ( CASSANDRA - 7707 ) 
 * Fix potential AssertionError with 2ndary indexes ( CASSANDRA - 6612 ) 
 * Avoid logging CompactionInterrupted at ERROR ( CASSANDRA - 7694 ) 
 * Minor leak in sstable2jon ( CASSANDRA - 7709 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / BytesConversionFcts . java b / src / java / org / apache / cassandra / cql3 / functions / BytesConversionFcts . java 
 index b30b5e7 . . e3023db 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / BytesConversionFcts . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / BytesConversionFcts . java 
 @ @ - 23 , 6 + 23 , 9 @ @ import java . util . List ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . db . marshal . BytesType ; 
 import org . apache . cassandra . db . marshal . UTF8Type ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . exceptions . InvalidRequestException ; 
 + import org . apache . cassandra . serializers . MarshalException ; 
 
 public abstract class BytesConversionFcts 
 { 
 @ @ - 40 , 14 + 43 , 25 @ @ public abstract class BytesConversionFcts 
 } ; 
 } 
 
 - public static Function makeFromBlobFunction ( AbstractType < ? > toType ) 
 + public static Function makeFromBlobFunction ( final AbstractType < ? > toType ) 
 { 
 - String name = " blobas " + toType . asCQL3Type ( ) ; 
 + final String name = " blobas " + toType . asCQL3Type ( ) ; 
 return new AbstractFunction ( name , toType , BytesType . instance ) 
 { 
 - public ByteBuffer execute ( List < ByteBuffer > parameters ) 
 + public ByteBuffer execute ( List < ByteBuffer > parameters ) throws InvalidRequestException 
 { 
 - return parameters . get ( 0 ) ; 
 + ByteBuffer val = parameters . get ( 0 ) ; 
 + try 
 + { 
 + if ( val ! = null ) 
 + toType . validate ( val ) ; 
 + return val ; 
 + } 
 + catch ( MarshalException e ) 
 + { 
 + throw new InvalidRequestException ( String . format ( " In call to function % s , value 0x % s is not a valid binary representation for type % s " , 
 + name , ByteBufferUtil . bytesToHex ( val ) , toType . asCQL3Type ( ) ) ) ; 
 + } 
 } 
 } ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java b / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java 
 index a0c7447 . . 4ae7c98 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java 
 @ @ - 28 , 6 + 28 , 8 @ @ import org . apache . cassandra . db . marshal . ListType ; 
 import org . apache . cassandra . db . marshal . MapType ; 
 import org . apache . cassandra . db . marshal . SetType ; 
 import org . apache . cassandra . exceptions . InvalidRequestException ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . serializers . MarshalException ; 
 
 public class FunctionCall extends Term . NonTerminal 
 { 
 @ @ - 63 , 8 + 65 , 24 @ @ public class FunctionCall extends Term . NonTerminal 
 throw new InvalidRequestException ( String . format ( " Invalid null value for argument to % s " , fun ) ) ; 
 buffers . add ( val ) ; 
 } 
 + return executeInternal ( fun , buffers ) ; 
 + } 
 
 - return fun . execute ( buffers ) ; 
 + private static ByteBuffer executeInternal ( Function fun , List < ByteBuffer > params ) throws InvalidRequestException 
 + { 
 + ByteBuffer result = fun . execute ( params ) ; 
 + try 
 + { 
 + / / Check the method didn ' t lied on it ' s declared return type 
 + if ( result ! = null ) 
 + fun . returnType ( ) . validate ( result ) ; 
 + return result ; 
 + } 
 + catch ( MarshalException e ) 
 + { 
 + throw new RuntimeException ( String . format ( " Return of function % s ( % s ) is not a valid value for its declared return type % s " , 
 + fun , ByteBufferUtil . bytesToHex ( result ) , fun . returnType ( ) . asCQL3Type ( ) ) ) ; 
 + } 
 } 
 
 public boolean containsBindMarker ( ) 
 @ @ - 132 , 7 + 150 , 8 @ @ public class FunctionCall extends Term . NonTerminal 
 assert t instanceof Term . Terminal ; 
 buffers . add ( ( ( Term . Terminal ) t ) . get ( QueryOptions . DEFAULT ) ) ; 
 } 
 - return fun . execute ( buffers ) ; 
 + 
 + return executeInternal ( fun , buffers ) ; 
 } 
 
 public boolean isAssignableTo ( String keyspace , ColumnSpecification receiver )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d518830 . . 52cc2c1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 29 , 7 + 29 , 7 @ @ 
 * add scheduler JMX metrics ( CASSANDRA - 2962 ) 
 * add block level checksum for compressed data ( CASSANDRA - 1717 ) 
 * make column family backed column map pluggable and introduce unsynchronized 
 - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) 
 + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) 
 * refactoring of the secondary index api ( CASSANDRA - 2982 ) 
 * make CL > ONE reads wait for digest reconciliation before returning 
 ( CASSANDRA - 2494 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 index c316a85 . . 71c7213 100644 
 - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor 
 this . reversed = reversed ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public AbstractType < ? > getComparator ( ) 
 { 
 return comparator ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 1239d1c . . 38bc0d7 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer 
 this . cfm = cfm ; 
 } 
 
 - public ColumnFamily cloneMeShallow ( ) 
 + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) 
 { 
 - ColumnFamily cf = ColumnFamily . create ( cfm ) ; 
 + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; 
 / / since deletion info is immutable , aliasing it is fine 
 cf . deletionInfo . set ( deletionInfo . get ( ) ) ; 
 return cf ; 
 } 
 
 + public ColumnFamily cloneMeShallow ( ) 
 + { 
 + return cloneMeShallow ( columns . getFactory ( ) ) ; 
 + } 
 + 
 public AbstractType getSubComparator ( ) 
 { 
 IColumnSerializer s = getColumnSerializer ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 0bfd1c5 . . 552d3e9 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 - * tombstones that are no longer relevant . * / 
 + / * * 
 + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 + * tombstones that are no longer relevant . 
 + * The returned column family won ' t be thread safe . 
 + * / 
 ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) 
 { 
 / / special case slicing the entire row : 
 @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; 
 if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) 
 { 
 - ColumnFamily cf = cached . cloneMeShallow ( ) ; 
 + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 if ( sc ! = null ) 
 cf . addColumn ( sc , HeapAllocator . instance ) ; 
 return removeDeleted ( cf , gcBefore ) ; 
 @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 
 IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; 
 - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; 
 + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; 
 / / TODO this is necessary because when we collate supercolumns together , we don ' t check 
 / / their subcolumns for relevance , so we need to do a second prune post facto here . 
 diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 index 37f5a60 . . 624dec7 100644 
 - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns 
 public ISortedColumns cloneMe ( ) ; 
 
 / * * 
 + * Returns the factory used for this ISortedColumns implementation . 
 + * / 
 + public Factory getFactory ( ) ; 
 + 
 + / * * 
 * Adds a column to this column map . 
 * If a column with the same name is already present in the map , it will 
 * be replaced by the newly added column . 
 diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 index cd2488a . . 13a111a 100644 
 - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new ThreadSafeSortedColumns ( this ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 index 34e83dc . . 6c3fc42 100644 
 - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new TreeMapBackedSortedColumns ( this ) ;
