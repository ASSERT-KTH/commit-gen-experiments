BLEU SCORE: 0.12440234748126781

TEST MSG: Fix debian install script
GENERATED MSG: remove schematool from debian packaging

TEST DIFF (one line): diff - - git a / debian / cassandra . install b / debian / cassandra . install <nl> index 9bc05d9 . . 1b66426 100644 <nl> - - - a / debian / cassandra . install <nl> + + + b / debian / cassandra . install <nl> @ @ - 19 , 7 + 19 , 6 @ @ bin / cqlsh . py usr / bin <nl> bin / sstablescrub usr / bin <nl> bin / sstableupgrade usr / bin <nl> tools / bin / cassandra - stress usr / bin <nl> - tools / bin / sstablemetadata usr / bin <nl> lib / * . jar usr / share / cassandra / lib <nl> lib / * . zip usr / share / cassandra / lib <nl> lib / sigar - bin / * usr / share / cassandra / lib / sigar - bin
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index cccc9f7 . . 0731f5f 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 237 , 18 + 237 , 17 @ @ public class Gossiper implements IFailureDetectionEventListener <nl> } <nl> <nl> / * * <nl> - * Removes the endpoint from gossip completely <nl> + * Removes the endpoint from unreachable endpoint set <nl> * <nl> * @ param endpoint endpoint to be removed from the current membership . <nl> * / <nl> void evictFromMembership ( InetAddress endpoint ) <nl> { <nl> unreachableEndpoints _ . remove ( endpoint ) ; <nl> - endpointStateMap _ . remove ( endpoint ) ; <nl> } <nl> <nl> / * * <nl> - * Removes the endpoint from Gossip but retains endpoint state <nl> + * Removes the endpoint completely from Gossip <nl> * / <nl> public void removeEndpoint ( InetAddress endpoint ) <nl> { <nl> @ @ - 258 , 7 + 257 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener <nl> <nl> liveEndpoints _ . remove ( endpoint ) ; <nl> unreachableEndpoints _ . remove ( endpoint ) ; <nl> - / / do not remove endpointState until aVeryLongTime <nl> + / / do not remove endpointState until the quarantine expires <nl> FailureDetector . instance . remove ( endpoint ) ; <nl> justRemovedEndpoints _ . put ( endpoint , System . currentTimeMillis ( ) ) ; <nl> } <nl> @ @ - 428 , 15 + 427 , 20 @ @ public class Gossiper implements IFailureDetectionEventListener <nl> { <nl> long duration = now - epState . getUpdateTimestamp ( ) ; <nl> <nl> - if ( StorageService . instance . getTokenMetadata ( ) . isMember ( endpoint ) ) <nl> - epState . setHasToken ( true ) ; <nl> / / check if this is a fat client . fat clients are removed automatically from <nl> / / gosip after FatClientTimeout <nl> - if ( ! epState . getHasToken ( ) & & ! epState . isAlive ( ) & & ! justRemovedEndpoints _ . containsKey ( endpoint ) & & ( duration > FatClientTimeout _ ) ) <nl> + if ( ! epState . getHasToken ( ) & & ! epState . isAlive ( ) & & ( duration > FatClientTimeout _ ) ) <nl> { <nl> - logger _ . info ( " FatClient " + endpoint + " has been silent for " + FatClientTimeout _ + " ms , removing from gossip " ) ; <nl> - removeEndpoint ( endpoint ) ; / / will put it in justRemovedEndpoints to respect quarantine delay <nl> - evictFromMembership ( endpoint ) ; / / can get rid of the state immediately <nl> + if ( StorageService . instance . getTokenMetadata ( ) . isMember ( endpoint ) ) <nl> + epState . setHasToken ( true ) ; <nl> + else <nl> + { <nl> + if ( ! justRemovedEndpoints _ . containsKey ( endpoint ) ) / / if the node was decommissioned , it will have been removed but still appear as a fat client <nl> + { <nl> + logger _ . info ( " FatClient " + endpoint + " has been silent for " + FatClientTimeout _ + " ms , removing from gossip " ) ; <nl> + removeEndpoint ( endpoint ) ; / / after quarantine justRemoveEndpoints will remove the state <nl> + } <nl> + } <nl> } <nl> <nl> if ( ! epState . isAlive ( ) & & ( duration > aVeryLongTime _ ) ) <nl> @ @ - 456 , 6 + 460 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener <nl> if ( logger _ . isDebugEnabled ( ) ) <nl> logger _ . debug ( QUARANTINE _ DELAY + " elapsed , " + entry . getKey ( ) + " gossip quarantine over " ) ; <nl> justRemovedEndpoints _ . remove ( entry . getKey ( ) ) ; <nl> + endpointStateMap _ . remove ( entry . getKey ( ) ) ; <nl> } <nl> } <nl> }

TEST DIFF:
diff - - git a / debian / cassandra . install b / debian / cassandra . install 
 index 9bc05d9 . . 1b66426 100644 
 - - - a / debian / cassandra . install 
 + + + b / debian / cassandra . install 
 @ @ - 19 , 7 + 19 , 6 @ @ bin / cqlsh . py usr / bin 
 bin / sstablescrub usr / bin 
 bin / sstableupgrade usr / bin 
 tools / bin / cassandra - stress usr / bin 
 - tools / bin / sstablemetadata usr / bin 
 lib / * . jar usr / share / cassandra / lib 
 lib / * . zip usr / share / cassandra / lib 
 lib / sigar - bin / * usr / share / cassandra / lib / sigar - bin

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index cccc9f7 . . 0731f5f 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 237 , 18 + 237 , 17 @ @ public class Gossiper implements IFailureDetectionEventListener 
 } 
 
 / * * 
 - * Removes the endpoint from gossip completely 
 + * Removes the endpoint from unreachable endpoint set 
 * 
 * @ param endpoint endpoint to be removed from the current membership . 
 * / 
 void evictFromMembership ( InetAddress endpoint ) 
 { 
 unreachableEndpoints _ . remove ( endpoint ) ; 
 - endpointStateMap _ . remove ( endpoint ) ; 
 } 
 
 / * * 
 - * Removes the endpoint from Gossip but retains endpoint state 
 + * Removes the endpoint completely from Gossip 
 * / 
 public void removeEndpoint ( InetAddress endpoint ) 
 { 
 @ @ - 258 , 7 + 257 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener 
 
 liveEndpoints _ . remove ( endpoint ) ; 
 unreachableEndpoints _ . remove ( endpoint ) ; 
 - / / do not remove endpointState until aVeryLongTime 
 + / / do not remove endpointState until the quarantine expires 
 FailureDetector . instance . remove ( endpoint ) ; 
 justRemovedEndpoints _ . put ( endpoint , System . currentTimeMillis ( ) ) ; 
 } 
 @ @ - 428 , 15 + 427 , 20 @ @ public class Gossiper implements IFailureDetectionEventListener 
 { 
 long duration = now - epState . getUpdateTimestamp ( ) ; 
 
 - if ( StorageService . instance . getTokenMetadata ( ) . isMember ( endpoint ) ) 
 - epState . setHasToken ( true ) ; 
 / / check if this is a fat client . fat clients are removed automatically from 
 / / gosip after FatClientTimeout 
 - if ( ! epState . getHasToken ( ) & & ! epState . isAlive ( ) & & ! justRemovedEndpoints _ . containsKey ( endpoint ) & & ( duration > FatClientTimeout _ ) ) 
 + if ( ! epState . getHasToken ( ) & & ! epState . isAlive ( ) & & ( duration > FatClientTimeout _ ) ) 
 { 
 - logger _ . info ( " FatClient " + endpoint + " has been silent for " + FatClientTimeout _ + " ms , removing from gossip " ) ; 
 - removeEndpoint ( endpoint ) ; / / will put it in justRemovedEndpoints to respect quarantine delay 
 - evictFromMembership ( endpoint ) ; / / can get rid of the state immediately 
 + if ( StorageService . instance . getTokenMetadata ( ) . isMember ( endpoint ) ) 
 + epState . setHasToken ( true ) ; 
 + else 
 + { 
 + if ( ! justRemovedEndpoints _ . containsKey ( endpoint ) ) / / if the node was decommissioned , it will have been removed but still appear as a fat client 
 + { 
 + logger _ . info ( " FatClient " + endpoint + " has been silent for " + FatClientTimeout _ + " ms , removing from gossip " ) ; 
 + removeEndpoint ( endpoint ) ; / / after quarantine justRemoveEndpoints will remove the state 
 + } 
 + } 
 } 
 
 if ( ! epState . isAlive ( ) & & ( duration > aVeryLongTime _ ) ) 
 @ @ - 456 , 6 + 460 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener 
 if ( logger _ . isDebugEnabled ( ) ) 
 logger _ . debug ( QUARANTINE _ DELAY + " elapsed , " + entry . getKey ( ) + " gossip quarantine over " ) ; 
 justRemovedEndpoints _ . remove ( entry . getKey ( ) ) ; 
 + endpointStateMap _ . remove ( entry . getKey ( ) ) ; 
 } 
 } 
 }
