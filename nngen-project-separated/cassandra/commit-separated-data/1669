BLEU SCORE: 0.02383853510228548

TEST MSG: Fix threadpool in RepairSession is not shutdown on failure
GENERATED MSG: r / m @ author tags

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / repair / RepairSession . java b / src / java / org / apache / cassandra / repair / RepairSession . java <nl> index 9762159 . . 70bfaa6 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / RepairSession . java <nl> + + + b / src / java / org / apache / cassandra / repair / RepairSession . java <nl> @ @ - 276 , 7 + 276 , 7 @ @ public class RepairSession extends AbstractFuture < RepairSessionResult > implement <nl> { <nl> logger . error ( String . format ( " [ repair # % s ] Session completed with the following error " , getId ( ) ) , t ) ; <nl> Tracing . traceRepair ( " Session completed with the following error : { } " , t ) ; <nl> - setException ( t ) ; <nl> + forceShutdown ( t ) ; <nl> } <nl> } ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionController . java b / src / java / org / apache / cassandra / db / compaction / CompactionController . java <nl> index c7d5501 . . 085b043 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionController . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionController . java <nl> @ @ - 46 , 6 + 46 , 7 @ @ public class CompactionController <nl> <nl> public final boolean isMajor ; <nl> public final int gcBefore ; <nl> + private int throttleResolution ; <nl> <nl> public CompactionController ( ColumnFamilyStore cfs , Collection < SSTableReader > sstables , int gcBefore , boolean forceDeserialize ) <nl> { <nl> @ @ - 55 , 15 + 56 , 22 @ @ public class CompactionController <nl> this . gcBefore = gcBefore ; <nl> this . forceDeserialize = forceDeserialize ; <nl> isMajor = cfs . isCompleteSSTables ( this . sstables ) ; <nl> + / / how many rows we expect to compact in 100ms <nl> + throttleResolution = ( int ) ( DatabaseDescriptor . getCompactionThroughputMbPerSec ( ) * 1024 * 1024 / ( 10 * cfs . getMeanRowSize ( ) ) ) ; <nl> + if ( throttleResolution < = 0 ) <nl> + throttleResolution = 1 ; <nl> + } <nl> + <nl> + public int getThrottleResolution ( ) <nl> + { <nl> + return throttleResolution ; <nl> } <nl> <nl> - / * * @ return the keyspace name * / <nl> public String getKeyspace ( ) <nl> { <nl> return cfs . table . name ; <nl> } <nl> <nl> - / * * @ return the column family name * / <nl> public String getColumnFamily ( ) <nl> { <nl> return cfs . columnFamily ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java b / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java <nl> index 4b1013b . . ad162aa 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java <nl> @ @ - 137 , 13 + 137 , 11 @ @ implements Closeable , CompactionInfo . Holder <nl> finally <nl> { <nl> rows . clear ( ) ; <nl> - if ( ( row + + % 1000 ) = = 0 ) <nl> + if ( ( row + + % controller . getThrottleResolution ( ) ) = = 0 ) <nl> { <nl> bytesRead = 0 ; <nl> for ( SSTableScanner scanner : getScanners ( ) ) <nl> - { <nl> bytesRead + = scanner . getFilePointer ( ) ; <nl> - } <nl> throttle ( ) ; <nl> } <nl> } <nl> @ @ - 164 , 9 + 162 , 7 @ @ implements Closeable , CompactionInfo . Holder <nl> int newTarget = totalBytesPerMS / <nl> Math . max ( 1 , CompactionManager . instance . getActiveCompactions ( ) ) ; <nl> if ( newTarget ! = targetBytesPerMS ) <nl> - logger . info ( String . format ( " % s now compacting at % d bytes / ms . " , <nl> - this , <nl> - newTarget ) ) ; <nl> + logger . debug ( " { } now compacting at { } bytes / ms . " , this , newTarget ) ; <nl> targetBytesPerMS = newTarget ; <nl> <nl> / / the excess bytes that were compacted in this period <nl> @ @ - 179 , 7 + 175 , 14 @ @ implements Closeable , CompactionInfo . Holder <nl> if ( logger . isTraceEnabled ( ) ) <nl> logger . trace ( String . format ( " Compacted % d bytes in % d ms : throttling for % d ms " , <nl> bytesSinceLast , msSinceLast , timeToDelay ) ) ; <nl> - try { Thread . sleep ( timeToDelay ) ; } catch ( InterruptedException e ) { throw new AssertionError ( e ) ; } <nl> + try <nl> + { <nl> + Thread . sleep ( timeToDelay ) ; <nl> + } <nl> + catch ( InterruptedException e ) <nl> + { <nl> + throw new AssertionError ( e ) ; <nl> + } <nl> } <nl> bytesAtLastDelay = bytesRead ; <nl> timeAtLastDelay = System . currentTimeMillis ( ) ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / repair / RepairSession . java b / src / java / org / apache / cassandra / repair / RepairSession . java 
 index 9762159 . . 70bfaa6 100644 
 - - - a / src / java / org / apache / cassandra / repair / RepairSession . java 
 + + + b / src / java / org / apache / cassandra / repair / RepairSession . java 
 @ @ - 276 , 7 + 276 , 7 @ @ public class RepairSession extends AbstractFuture < RepairSessionResult > implement 
 { 
 logger . error ( String . format ( " [ repair # % s ] Session completed with the following error " , getId ( ) ) , t ) ; 
 Tracing . traceRepair ( " Session completed with the following error : { } " , t ) ; 
 - setException ( t ) ; 
 + forceShutdown ( t ) ; 
 } 
 } ) ; 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionController . java b / src / java / org / apache / cassandra / db / compaction / CompactionController . java 
 index c7d5501 . . 085b043 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionController . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionController . java 
 @ @ - 46 , 6 + 46 , 7 @ @ public class CompactionController 
 
 public final boolean isMajor ; 
 public final int gcBefore ; 
 + private int throttleResolution ; 
 
 public CompactionController ( ColumnFamilyStore cfs , Collection < SSTableReader > sstables , int gcBefore , boolean forceDeserialize ) 
 { 
 @ @ - 55 , 15 + 56 , 22 @ @ public class CompactionController 
 this . gcBefore = gcBefore ; 
 this . forceDeserialize = forceDeserialize ; 
 isMajor = cfs . isCompleteSSTables ( this . sstables ) ; 
 + / / how many rows we expect to compact in 100ms 
 + throttleResolution = ( int ) ( DatabaseDescriptor . getCompactionThroughputMbPerSec ( ) * 1024 * 1024 / ( 10 * cfs . getMeanRowSize ( ) ) ) ; 
 + if ( throttleResolution < = 0 ) 
 + throttleResolution = 1 ; 
 + } 
 + 
 + public int getThrottleResolution ( ) 
 + { 
 + return throttleResolution ; 
 } 
 
 - / * * @ return the keyspace name * / 
 public String getKeyspace ( ) 
 { 
 return cfs . table . name ; 
 } 
 
 - / * * @ return the column family name * / 
 public String getColumnFamily ( ) 
 { 
 return cfs . columnFamily ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java b / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java 
 index 4b1013b . . ad162aa 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java 
 @ @ - 137 , 13 + 137 , 11 @ @ implements Closeable , CompactionInfo . Holder 
 finally 
 { 
 rows . clear ( ) ; 
 - if ( ( row + + % 1000 ) = = 0 ) 
 + if ( ( row + + % controller . getThrottleResolution ( ) ) = = 0 ) 
 { 
 bytesRead = 0 ; 
 for ( SSTableScanner scanner : getScanners ( ) ) 
 - { 
 bytesRead + = scanner . getFilePointer ( ) ; 
 - } 
 throttle ( ) ; 
 } 
 } 
 @ @ - 164 , 9 + 162 , 7 @ @ implements Closeable , CompactionInfo . Holder 
 int newTarget = totalBytesPerMS / 
 Math . max ( 1 , CompactionManager . instance . getActiveCompactions ( ) ) ; 
 if ( newTarget ! = targetBytesPerMS ) 
 - logger . info ( String . format ( " % s now compacting at % d bytes / ms . " , 
 - this , 
 - newTarget ) ) ; 
 + logger . debug ( " { } now compacting at { } bytes / ms . " , this , newTarget ) ; 
 targetBytesPerMS = newTarget ; 
 
 / / the excess bytes that were compacted in this period 
 @ @ - 179 , 7 + 175 , 14 @ @ implements Closeable , CompactionInfo . Holder 
 if ( logger . isTraceEnabled ( ) ) 
 logger . trace ( String . format ( " Compacted % d bytes in % d ms : throttling for % d ms " , 
 bytesSinceLast , msSinceLast , timeToDelay ) ) ; 
 - try { Thread . sleep ( timeToDelay ) ; } catch ( InterruptedException e ) { throw new AssertionError ( e ) ; } 
 + try 
 + { 
 + Thread . sleep ( timeToDelay ) ; 
 + } 
 + catch ( InterruptedException e ) 
 + { 
 + throw new AssertionError ( e ) ; 
 + } 
 } 
 bytesAtLastDelay = bytesRead ; 
 timeAtLastDelay = System . currentTimeMillis ( ) ;
