BLEU SCORE: 0.03283637368030199

TEST MSG: Remove unused and deprecated methods from AbstractCompactionStrategy
GENERATED MSG: Add more hooks for compaction strategy implementations

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b4a7b62 . . d526c09 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Remove unused and deprecated methods from AbstractCompactionStrategy ( CASSANDRA - 14081 ) <nl> * Fix Distribution . average in cassandra - stress ( CASSANDRA - 14090 ) <nl> * Support a means of logging all queries as they were invoked ( CASSANDRA - 13983 ) <nl> * Presize collections ( CASSANDRA - 13760 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 4dae44a . . 872cd80 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1604 , 7 + 1604 , 8 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> void replaceFlushed ( Memtable memtable , Collection < SSTableReader > sstables ) <nl> { <nl> - compactionStrategyManager . replaceFlushed ( memtable , sstables ) ; <nl> + data . replaceFlushed ( memtable , sstables ) ; <nl> + CompactionManager . instance . submitBackground ( this ) ; <nl> } <nl> <nl> public boolean isValid ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> index 0a07ce6 . . e88524f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> @ @ - 20 , 7 + 20 , 6 @ @ package org . apache . cassandra . db . compaction ; <nl> import java . util . * ; <nl> <nl> import com . google . common . annotations . VisibleForTesting ; <nl> - import com . google . common . base . Throwables ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . base . Predicate ; <nl> import com . google . common . collect . Iterables ; <nl> @ @ - 36 , 7 + 35 , 6 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> - import org . apache . cassandra . db . Memtable ; <nl> import org . apache . cassandra . db . lifecycle . LifecycleTransaction ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . dht . Token ; <nl> @ @ - 45 , 7 + 43 , 6 @ @ import org . apache . cassandra . io . sstable . Component ; <nl> import org . apache . cassandra . io . sstable . ISSTableScanner ; <nl> import org . apache . cassandra . io . sstable . metadata . MetadataCollector ; <nl> import org . apache . cassandra . schema . CompactionParams ; <nl> - import org . apache . cassandra . utils . JVMStabilityInspector ; <nl> <nl> / * * <nl> * Pluggable compaction strategy determines how SSTables get merged . <nl> @ @ - 115 , 8 + 112 , 6 @ @ public abstract class AbstractCompactionStrategy <nl> uncheckedTombstoneCompaction = optionValue = = null ? DEFAULT _ UNCHECKED _ TOMBSTONE _ COMPACTION _ OPTION : Boolean . parseBoolean ( optionValue ) ; <nl> optionValue = options . get ( LOG _ ALL _ OPTION ) ; <nl> logAll = optionValue = = null ? DEFAULT _ LOG _ ALL _ OPTION : Boolean . parseBoolean ( optionValue ) ; <nl> - if ( ! shouldBeEnabled ( ) ) <nl> - this . disable ( ) ; <nl> } <nl> catch ( ConfigurationException e ) <nl> { <nl> @ @ - 213 , 47 + 208 , 6 @ @ public abstract class AbstractCompactionStrategy <nl> * / <nl> public abstract long getMaxSSTableBytes ( ) ; <nl> <nl> - @ Deprecated <nl> - public void enable ( ) <nl> - { <nl> - } <nl> - <nl> - @ Deprecated <nl> - public void disable ( ) <nl> - { <nl> - } <nl> - <nl> - / * * <nl> - * @ return whether or not MeteredFlusher should be able to trigger memtable flushes for this CF . <nl> - * / <nl> - public boolean isAffectedByMeteredFlusher ( ) <nl> - { <nl> - return true ; <nl> - } <nl> - <nl> - / * * <nl> - * If not affected by MeteredFlusher ( and handling flushing on its own ) , override to tell MF how much <nl> - * space to reserve for this CF , i . e . , how much space to subtract from ` memtable _ total _ space _ in _ mb ` when deciding <nl> - * if other memtables should be flushed or not . <nl> - * / <nl> - public long getMemtableReservedSize ( ) <nl> - { <nl> - return 0 ; <nl> - } <nl> - <nl> - / * * <nl> - * Handle a flushed memtable . <nl> - * <nl> - * @ param memtable the flushed memtable <nl> - * @ param sstables the written sstables . can be null or empty if the memtable was clean . <nl> - * / <nl> - public void replaceFlushed ( Memtable memtable , Collection < SSTableReader > sstables ) <nl> - { <nl> - cfs . getTracker ( ) . replaceFlushed ( memtable , sstables ) ; <nl> - if ( sstables ! = null & & ! sstables . isEmpty ( ) ) <nl> - CompactionManager . instance . submitBackground ( cfs ) ; <nl> - } <nl> - <nl> / * * <nl> * Filters SSTables that are to be blacklisted from the given collection <nl> * <nl> @ @ - 517 , 15 + 471 , 6 @ @ public abstract class AbstractCompactionStrategy <nl> return uncheckedOptions ; <nl> } <nl> <nl> - @ Deprecated <nl> - public boolean shouldBeEnabled ( ) <nl> - { <nl> - String optionValue = options . get ( COMPACTION _ ENABLED ) ; <nl> - <nl> - return optionValue = = null | | Boolean . parseBoolean ( optionValue ) ; <nl> - } <nl> - <nl> - <nl> / * * <nl> * Method for grouping similar SSTables together , This will be used by <nl> * anti - compaction to determine which SSTables should be anitcompacted <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java <nl> index 0260bb8 . . aa50fb1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java <nl> @ @ - 406 , 13 + 406 , 6 @ @ public class CompactionStrategyManager implements INotificationConsumer <nl> startup ( ) ; <nl> } <nl> <nl> - public void replaceFlushed ( Memtable memtable , Collection < SSTableReader > sstables ) <nl> - { <nl> - cfs . getTracker ( ) . replaceFlushed ( memtable , sstables ) ; <nl> - if ( sstables ! = null & & ! sstables . isEmpty ( ) ) <nl> - CompactionManager . instance . submitBackground ( cfs ) ; <nl> - } <nl> - <nl> public int getUnleveledSSTables ( ) <nl> { <nl> readLock . lock ( ) ; <nl> @ @ - 677 , 12 + 670 , 6 @ @ public class CompactionStrategyManager implements INotificationConsumer <nl> writeLock . lock ( ) ; <nl> try <nl> { <nl> - if ( repaired ! = null ) <nl> - repaired . forEach ( AbstractCompactionStrategy : : enable ) ; <nl> - if ( unrepaired ! = null ) <nl> - unrepaired . forEach ( AbstractCompactionStrategy : : enable ) ; <nl> - if ( pendingRepairs ! = null ) <nl> - pendingRepairs . forEach ( PendingRepairManager : : enable ) ; <nl> / / enable this last to make sure the strategies are ready to get calls . <nl> enabled = true ; <nl> } <nl> @ @ - 697 , 14 + 684 , 7 @ @ public class CompactionStrategyManager implements INotificationConsumer <nl> writeLock . lock ( ) ; <nl> try <nl> { <nl> - / / disable this first avoid asking disabled strategies for compaction tasks <nl> enabled = false ; <nl> - if ( repaired ! = null ) <nl> - repaired . forEach ( AbstractCompactionStrategy : : disable ) ; <nl> - if ( unrepaired ! = null ) <nl> - unrepaired . forEach ( AbstractCompactionStrategy : : disable ) ; <nl> - if ( pendingRepairs ! = null ) <nl> - pendingRepairs . forEach ( PendingRepairManager : : disable ) ; <nl> } <nl> finally <nl> { <nl> @ @ - 949 , 18 + 929 , 6 @ @ public class CompactionStrategyManager implements INotificationConsumer <nl> } <nl> } <nl> <nl> - / * * <nl> - * @ deprecated use { @ link # getUserDefinedTasks ( Collection , int ) } instead . <nl> - * / <nl> - @ Deprecated ( ) <nl> - public AbstractCompactionTask getUserDefinedTask ( Collection < SSTableReader > sstables , int gcBefore ) <nl> - { <nl> - validateForCompaction ( sstables , cfs , getDirectories ( ) ) ; <nl> - List < AbstractCompactionTask > tasks = getUserDefinedTasks ( sstables , gcBefore ) ; <nl> - assert tasks . size ( ) = = 1 ; <nl> - return tasks . get ( 0 ) ; <nl> - } <nl> - <nl> public int getEstimatedRemainingTasks ( ) <nl> { <nl> int tasks = 0 ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / PendingRepairManager . java b / src / java / org / apache / cassandra / db / compaction / PendingRepairManager . java <nl> index 98acbdb . . 64aa3f2 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / PendingRepairManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / PendingRepairManager . java <nl> @ @ - 202 , 18 + 202 , 6 @ @ class PendingRepairManager <nl> strategies . values ( ) . forEach ( AbstractCompactionStrategy : : shutdown ) ; <nl> } <nl> <nl> - @ Deprecated <nl> - synchronized void enable ( ) <nl> - { <nl> - strategies . values ( ) . forEach ( AbstractCompactionStrategy : : enable ) ; <nl> - } <nl> - <nl> - @ Deprecated <nl> - synchronized void disable ( ) <nl> - { <nl> - strategies . values ( ) . forEach ( AbstractCompactionStrategy : : disable ) ; <nl> - } <nl> - <nl> private int getEstimatedRemainingTasks ( UUID sessionID , AbstractCompactionStrategy strategy ) <nl> { <nl> if ( canCleanup ( sessionID ) )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 061ad12 . . dcdb01b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 10 , 6 + 10 , 7 @ @ <nl> leveled manifest ( CASSANDRA - 6093 ) <nl> * make sequential nodetool repair the default ( CASSANDRA - 5950 ) <nl> * Add more hooks for compaction strategy implementations ( CASSANDRA - 6111 ) <nl> + * Fix memtable flushing for indexed tables ( CASSANDRA - 6112 ) <nl> Merged from 1 . 2 : <nl> * Allow estimated memtable size to exceed slab allocator size ( CASSANDRA - 6078 ) <nl> * Start MeteredFlusher earlier to prevent OOM during CL replay ( CASSANDRA - 6087 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java <nl> index 14ce74c . . f1bb1a5 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Memtable . java <nl> + + + b / src / java / org / apache / cassandra / db / Memtable . java <nl> @ @ - 351 , 7 + 351 , 11 @ @ public class Memtable <nl> / / But it can result in unexpected behaviour where deletes never make it to disk , <nl> / / as they are lost and so cannot override existing column values . So we only remove deleted columns if there <nl> / / is a CF level tombstone to ensure the delete makes it into an SSTable . <nl> - ColumnFamilyStore . removeDeletedColumnsOnly ( cf , Integer . MIN _ VALUE ) ; <nl> + / / We also shouldn ' t be dropping any columns obsoleted by partition and / or range tombstones in case <nl> + / / the table has secondary indexes , or else the stale entries wouldn ' t be cleaned up during compaction , <nl> + / / and will only be dropped during 2i query read - repair , if at all . <nl> + if ( ! cfs . indexManager . hasIndexes ( ) ) <nl> + ColumnFamilyStore . removeDeletedColumnsOnly ( cf , Integer . MIN _ VALUE ) ; <nl> } <nl> writer . append ( ( DecoratedKey ) entry . getKey ( ) , cf ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index f3c2011 . . 317014f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 525 , 7 + 525 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return ; <nl> } <nl> <nl> - boolean hasIndexes = ! cfs . indexManager . getIndexes ( ) . isEmpty ( ) ; <nl> + boolean hasIndexes = cfs . indexManager . hasIndexes ( ) ; <nl> CleanupStrategy cleanupStrategy = CleanupStrategy . get ( cfs , ranges , renewer ) ; <nl> <nl> for ( SSTableReader sstable : sstables ) <nl> @ @ - 623 , 7 + 623 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> public static CleanupStrategy get ( ColumnFamilyStore cfs , Collection < Range < Token > > ranges , CounterId . OneShotRenewer renewer ) <nl> { <nl> - if ( ! cfs . indexManager . getIndexes ( ) . isEmpty ( ) | | cfs . metadata . getDefaultValidator ( ) . isCommutative ( ) ) <nl> + if ( cfs . indexManager . hasIndexes ( ) | | cfs . metadata . getDefaultValidator ( ) . isCommutative ( ) ) <nl> return new Full ( cfs , ranges , renewer ) ; <nl> <nl> return new Bounded ( cfs , ranges ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> index eff9537 . . 1838c03 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> @ @ - 377 , 6 + 377 , 14 @ @ public class SecondaryIndexManager <nl> } <nl> <nl> / * * <nl> + * @ return if there are ANY indexes for this table . . <nl> + * / <nl> + public boolean hasIndexes ( ) <nl> + { <nl> + return ! indexesByColumn . isEmpty ( ) ; <nl> + } <nl> + <nl> + / * * <nl> * @ return total current ram size of all indexes <nl> * / <nl> public long getTotalLiveSize ( )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b4a7b62 . . d526c09 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Remove unused and deprecated methods from AbstractCompactionStrategy ( CASSANDRA - 14081 ) 
 * Fix Distribution . average in cassandra - stress ( CASSANDRA - 14090 ) 
 * Support a means of logging all queries as they were invoked ( CASSANDRA - 13983 ) 
 * Presize collections ( CASSANDRA - 13760 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 4dae44a . . 872cd80 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1604 , 7 + 1604 , 8 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 void replaceFlushed ( Memtable memtable , Collection < SSTableReader > sstables ) 
 { 
 - compactionStrategyManager . replaceFlushed ( memtable , sstables ) ; 
 + data . replaceFlushed ( memtable , sstables ) ; 
 + CompactionManager . instance . submitBackground ( this ) ; 
 } 
 
 public boolean isValid ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 index 0a07ce6 . . e88524f 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 @ @ - 20 , 7 + 20 , 6 @ @ package org . apache . cassandra . db . compaction ; 
 import java . util . * ; 
 
 import com . google . common . annotations . VisibleForTesting ; 
 - import com . google . common . base . Throwables ; 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . base . Predicate ; 
 import com . google . common . collect . Iterables ; 
 @ @ - 36 , 7 + 35 , 6 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 - import org . apache . cassandra . db . Memtable ; 
 import org . apache . cassandra . db . lifecycle . LifecycleTransaction ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . dht . Token ; 
 @ @ - 45 , 7 + 43 , 6 @ @ import org . apache . cassandra . io . sstable . Component ; 
 import org . apache . cassandra . io . sstable . ISSTableScanner ; 
 import org . apache . cassandra . io . sstable . metadata . MetadataCollector ; 
 import org . apache . cassandra . schema . CompactionParams ; 
 - import org . apache . cassandra . utils . JVMStabilityInspector ; 
 
 / * * 
 * Pluggable compaction strategy determines how SSTables get merged . 
 @ @ - 115 , 8 + 112 , 6 @ @ public abstract class AbstractCompactionStrategy 
 uncheckedTombstoneCompaction = optionValue = = null ? DEFAULT _ UNCHECKED _ TOMBSTONE _ COMPACTION _ OPTION : Boolean . parseBoolean ( optionValue ) ; 
 optionValue = options . get ( LOG _ ALL _ OPTION ) ; 
 logAll = optionValue = = null ? DEFAULT _ LOG _ ALL _ OPTION : Boolean . parseBoolean ( optionValue ) ; 
 - if ( ! shouldBeEnabled ( ) ) 
 - this . disable ( ) ; 
 } 
 catch ( ConfigurationException e ) 
 { 
 @ @ - 213 , 47 + 208 , 6 @ @ public abstract class AbstractCompactionStrategy 
 * / 
 public abstract long getMaxSSTableBytes ( ) ; 
 
 - @ Deprecated 
 - public void enable ( ) 
 - { 
 - } 
 - 
 - @ Deprecated 
 - public void disable ( ) 
 - { 
 - } 
 - 
 - / * * 
 - * @ return whether or not MeteredFlusher should be able to trigger memtable flushes for this CF . 
 - * / 
 - public boolean isAffectedByMeteredFlusher ( ) 
 - { 
 - return true ; 
 - } 
 - 
 - / * * 
 - * If not affected by MeteredFlusher ( and handling flushing on its own ) , override to tell MF how much 
 - * space to reserve for this CF , i . e . , how much space to subtract from ` memtable _ total _ space _ in _ mb ` when deciding 
 - * if other memtables should be flushed or not . 
 - * / 
 - public long getMemtableReservedSize ( ) 
 - { 
 - return 0 ; 
 - } 
 - 
 - / * * 
 - * Handle a flushed memtable . 
 - * 
 - * @ param memtable the flushed memtable 
 - * @ param sstables the written sstables . can be null or empty if the memtable was clean . 
 - * / 
 - public void replaceFlushed ( Memtable memtable , Collection < SSTableReader > sstables ) 
 - { 
 - cfs . getTracker ( ) . replaceFlushed ( memtable , sstables ) ; 
 - if ( sstables ! = null & & ! sstables . isEmpty ( ) ) 
 - CompactionManager . instance . submitBackground ( cfs ) ; 
 - } 
 - 
 / * * 
 * Filters SSTables that are to be blacklisted from the given collection 
 * 
 @ @ - 517 , 15 + 471 , 6 @ @ public abstract class AbstractCompactionStrategy 
 return uncheckedOptions ; 
 } 
 
 - @ Deprecated 
 - public boolean shouldBeEnabled ( ) 
 - { 
 - String optionValue = options . get ( COMPACTION _ ENABLED ) ; 
 - 
 - return optionValue = = null | | Boolean . parseBoolean ( optionValue ) ; 
 - } 
 - 
 - 
 / * * 
 * Method for grouping similar SSTables together , This will be used by 
 * anti - compaction to determine which SSTables should be anitcompacted 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java 
 index 0260bb8 . . aa50fb1 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java 
 @ @ - 406 , 13 + 406 , 6 @ @ public class CompactionStrategyManager implements INotificationConsumer 
 startup ( ) ; 
 } 
 
 - public void replaceFlushed ( Memtable memtable , Collection < SSTableReader > sstables ) 
 - { 
 - cfs . getTracker ( ) . replaceFlushed ( memtable , sstables ) ; 
 - if ( sstables ! = null & & ! sstables . isEmpty ( ) ) 
 - CompactionManager . instance . submitBackground ( cfs ) ; 
 - } 
 - 
 public int getUnleveledSSTables ( ) 
 { 
 readLock . lock ( ) ; 
 @ @ - 677 , 12 + 670 , 6 @ @ public class CompactionStrategyManager implements INotificationConsumer 
 writeLock . lock ( ) ; 
 try 
 { 
 - if ( repaired ! = null ) 
 - repaired . forEach ( AbstractCompactionStrategy : : enable ) ; 
 - if ( unrepaired ! = null ) 
 - unrepaired . forEach ( AbstractCompactionStrategy : : enable ) ; 
 - if ( pendingRepairs ! = null ) 
 - pendingRepairs . forEach ( PendingRepairManager : : enable ) ; 
 / / enable this last to make sure the strategies are ready to get calls . 
 enabled = true ; 
 } 
 @ @ - 697 , 14 + 684 , 7 @ @ public class CompactionStrategyManager implements INotificationConsumer 
 writeLock . lock ( ) ; 
 try 
 { 
 - / / disable this first avoid asking disabled strategies for compaction tasks 
 enabled = false ; 
 - if ( repaired ! = null ) 
 - repaired . forEach ( AbstractCompactionStrategy : : disable ) ; 
 - if ( unrepaired ! = null ) 
 - unrepaired . forEach ( AbstractCompactionStrategy : : disable ) ; 
 - if ( pendingRepairs ! = null ) 
 - pendingRepairs . forEach ( PendingRepairManager : : disable ) ; 
 } 
 finally 
 { 
 @ @ - 949 , 18 + 929 , 6 @ @ public class CompactionStrategyManager implements INotificationConsumer 
 } 
 } 
 
 - / * * 
 - * @ deprecated use { @ link # getUserDefinedTasks ( Collection , int ) } instead . 
 - * / 
 - @ Deprecated ( ) 
 - public AbstractCompactionTask getUserDefinedTask ( Collection < SSTableReader > sstables , int gcBefore ) 
 - { 
 - validateForCompaction ( sstables , cfs , getDirectories ( ) ) ; 
 - List < AbstractCompactionTask > tasks = getUserDefinedTasks ( sstables , gcBefore ) ; 
 - assert tasks . size ( ) = = 1 ; 
 - return tasks . get ( 0 ) ; 
 - } 
 - 
 public int getEstimatedRemainingTasks ( ) 
 { 
 int tasks = 0 ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / PendingRepairManager . java b / src / java / org / apache / cassandra / db / compaction / PendingRepairManager . java 
 index 98acbdb . . 64aa3f2 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / PendingRepairManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / PendingRepairManager . java 
 @ @ - 202 , 18 + 202 , 6 @ @ class PendingRepairManager 
 strategies . values ( ) . forEach ( AbstractCompactionStrategy : : shutdown ) ; 
 } 
 
 - @ Deprecated 
 - synchronized void enable ( ) 
 - { 
 - strategies . values ( ) . forEach ( AbstractCompactionStrategy : : enable ) ; 
 - } 
 - 
 - @ Deprecated 
 - synchronized void disable ( ) 
 - { 
 - strategies . values ( ) . forEach ( AbstractCompactionStrategy : : disable ) ; 
 - } 
 - 
 private int getEstimatedRemainingTasks ( UUID sessionID , AbstractCompactionStrategy strategy ) 
 { 
 if ( canCleanup ( sessionID ) )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 061ad12 . . dcdb01b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 10 , 6 + 10 , 7 @ @ 
 leveled manifest ( CASSANDRA - 6093 ) 
 * make sequential nodetool repair the default ( CASSANDRA - 5950 ) 
 * Add more hooks for compaction strategy implementations ( CASSANDRA - 6111 ) 
 + * Fix memtable flushing for indexed tables ( CASSANDRA - 6112 ) 
 Merged from 1 . 2 : 
 * Allow estimated memtable size to exceed slab allocator size ( CASSANDRA - 6078 ) 
 * Start MeteredFlusher earlier to prevent OOM during CL replay ( CASSANDRA - 6087 ) 
 diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java 
 index 14ce74c . . f1bb1a5 100644 
 - - - a / src / java / org / apache / cassandra / db / Memtable . java 
 + + + b / src / java / org / apache / cassandra / db / Memtable . java 
 @ @ - 351 , 7 + 351 , 11 @ @ public class Memtable 
 / / But it can result in unexpected behaviour where deletes never make it to disk , 
 / / as they are lost and so cannot override existing column values . So we only remove deleted columns if there 
 / / is a CF level tombstone to ensure the delete makes it into an SSTable . 
 - ColumnFamilyStore . removeDeletedColumnsOnly ( cf , Integer . MIN _ VALUE ) ; 
 + / / We also shouldn ' t be dropping any columns obsoleted by partition and / or range tombstones in case 
 + / / the table has secondary indexes , or else the stale entries wouldn ' t be cleaned up during compaction , 
 + / / and will only be dropped during 2i query read - repair , if at all . 
 + if ( ! cfs . indexManager . hasIndexes ( ) ) 
 + ColumnFamilyStore . removeDeletedColumnsOnly ( cf , Integer . MIN _ VALUE ) ; 
 } 
 writer . append ( ( DecoratedKey ) entry . getKey ( ) , cf ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index f3c2011 . . 317014f 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 525 , 7 + 525 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 return ; 
 } 
 
 - boolean hasIndexes = ! cfs . indexManager . getIndexes ( ) . isEmpty ( ) ; 
 + boolean hasIndexes = cfs . indexManager . hasIndexes ( ) ; 
 CleanupStrategy cleanupStrategy = CleanupStrategy . get ( cfs , ranges , renewer ) ; 
 
 for ( SSTableReader sstable : sstables ) 
 @ @ - 623 , 7 + 623 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 public static CleanupStrategy get ( ColumnFamilyStore cfs , Collection < Range < Token > > ranges , CounterId . OneShotRenewer renewer ) 
 { 
 - if ( ! cfs . indexManager . getIndexes ( ) . isEmpty ( ) | | cfs . metadata . getDefaultValidator ( ) . isCommutative ( ) ) 
 + if ( cfs . indexManager . hasIndexes ( ) | | cfs . metadata . getDefaultValidator ( ) . isCommutative ( ) ) 
 return new Full ( cfs , ranges , renewer ) ; 
 
 return new Bounded ( cfs , ranges ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 index eff9537 . . 1838c03 100644 
 - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 @ @ - 377 , 6 + 377 , 14 @ @ public class SecondaryIndexManager 
 } 
 
 / * * 
 + * @ return if there are ANY indexes for this table . . 
 + * / 
 + public boolean hasIndexes ( ) 
 + { 
 + return ! indexesByColumn . isEmpty ( ) ; 
 + } 
 + 
 + / * * 
 * @ return total current ram size of all indexes 
 * / 
 public long getTotalLiveSize ( )
