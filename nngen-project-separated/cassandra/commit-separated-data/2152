BLEU SCORE: 0.044568827606990644

TEST MSG: Ninja : cqlsh test fixed for 2 . 1 . 0
GENERATED MSG: ( cqlsh ) Adjust cqlsh tests for CASSANDRA - 6910

TEST DIFF (one line): diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ output . py b / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> index 6fb4f41 . . 072dd23 100644 <nl> - - - a / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> + + + b / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> @ @ - 101 , 25 + 101 , 22 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> self . assertNoHasColors ( c . read _ to _ next _ prompt ( ) ) <nl> <nl> def test _ no _ prompt _ or _ colors _ output ( self ) : <nl> - # CQL queries and number of lines expected in output : <nl> - queries = ( ( ' select * from has _ all _ types limit 1 ; ' , 7 ) , <nl> - ( ' select * from has _ value _ encoding _ errors limit 1 ; ' , 8 ) ) <nl> for termname in ( ' ' , ' dumb ' , ' vt100 ' , ' xterm ' ) : <nl> cqlshlog . debug ( ' TERM = % r ' % termname ) <nl> - for cql , lines _ expected in queries : <nl> - output , result = testcall _ cqlsh ( prompt = None , env = { ' TERM ' : termname } , <nl> - tty = False , input = cql + ' \ n ' ) <nl> - output = output . splitlines ( ) <nl> - for line in output : <nl> - self . assertNoHasColors ( line ) <nl> - self . assertNotRegexpMatches ( line , r ' ^ cqlsh \ S * > ' ) <nl> - self . assertEqual ( len ( output ) , lines _ expected , <nl> - msg = ' output : % r ' % ' \ n ' . join ( output ) ) <nl> - self . assertEqual ( output [ 0 ] , ' ' ) <nl> - self . assertNicelyFormattedTableHeader ( output [ 1 ] ) <nl> - self . assertNicelyFormattedTableRule ( output [ 2 ] ) <nl> - self . assertNicelyFormattedTableData ( output [ 3 ] ) <nl> - self . assertEqual ( output [ 4 ] . strip ( ) , ' ' ) <nl> + query = ' select * from has _ all _ types limit 1 ; ' <nl> + output , result = testcall _ cqlsh ( prompt = None , env = { ' TERM ' : termname } , <nl> + tty = False , input = query + ' \ n ' ) <nl> + output = output . splitlines ( ) <nl> + for line in output : <nl> + self . assertNoHasColors ( line ) <nl> + self . assertNotRegexpMatches ( line , r ' ^ cqlsh \ S * > ' ) <nl> + self . assertTrue ( 6 < = len ( output ) < = 8 , <nl> + msg = ' output : % r ' % ' \ n ' . join ( output ) ) <nl> + self . assertEqual ( output [ 0 ] , ' ' ) <nl> + self . assertNicelyFormattedTableHeader ( output [ 1 ] ) <nl> + self . assertNicelyFormattedTableRule ( output [ 2 ] ) <nl> + self . assertNicelyFormattedTableData ( output [ 3 ] ) <nl> + self . assertEqual ( output [ 4 ] . strip ( ) , ' ' ) <nl> <nl> def test _ color _ output ( self ) : <nl> for termname in ( ' xterm ' , ' unknown - garbage ' ) : <nl> @ @ - 449 , 13 + 446 , 11 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> G YYYYYYmmYYYYYYYYmmmmY <nl> 2 | \ x00 \ x01 \ x02 \ x03 \ x04 \ x05control chars \ x06 \ x07 <nl> G mmmmmmmmmmmmmmmmmmmmmmmmYYYYYYYYYYYYYmmmmmmmm <nl> - 3 | \ xfe \ xffbyte order mark <nl> - G mmmmmmmmYYYYYYYYYYYYYYY <nl> 4 | fake special chars \ x00 \ n <nl> G YYYYYYYYYYYYYYYYYYYYYYYY <nl> <nl> <nl> - ( 5 rows ) <nl> + ( 4 rows ) <nl> nnnnnnnn <nl> " " " ) , <nl> ) , cqlver = cqlsh . DEFAULT _ CQLVER ) <nl> @ @ - 525 , 46 + 520 , 6 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> # explicitly generate an exception on the deserialization of type X . . <nl> pass <nl> <nl> - def test _ colval _ decoding _ errors ( self ) : <nl> - self . assertCqlverQueriesGiveColoredOutput ( ( <nl> - ( " select * from has _ value _ encoding _ errors ; " , r " " " <nl> - pkey | utf8col <nl> - MMMM MMMMMMM <nl> - - - - - - - + - - - - - - - - - - - - - - - - - - - - <nl> - <nl> - A | ' \ x00 \ xff \ x00 \ xff ' <nl> - Y RRRRRRRRRRRRRRRRRR <nl> - <nl> - <nl> - ( 1 rows ) <nl> - nnnnnnnn <nl> - <nl> - <nl> - Failed to decode value ' \ x00 \ xff \ x00 \ xff ' ( for column ' utf8col ' ) as text : ' utf8 ' codec can ' t decode byte 0xff in position 1 : invalid start byte <nl> - RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR <nl> - " " " ) , <nl> - ) , cqlver = cqlsh . DEFAULT _ CQLVER ) <nl> - <nl> - def test _ key _ decoding _ errors ( self ) : <nl> - self . assertCqlverQueriesGiveColoredOutput ( ( <nl> - ( " select * from has _ key _ encoding _ errors ; " , r " " " <nl> - pkey | col <nl> - MMMM MMM <nl> - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - <nl> - <nl> - ' \ x00 \ xff \ x02 \ x8f ' | whatever <nl> - RRRRRRRRRRRRRRRRRR YYYYYYYY <nl> - <nl> - <nl> - ( 1 rows ) <nl> - nnnnnnnn <nl> - <nl> - <nl> - Failed to decode value ' \ x00 \ xff \ x02 \ x8f ' ( for column ' pkey ' ) as text : ' utf8 ' codec can ' t decode byte 0xff in position 1 : invalid start byte <nl> - RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR <nl> - " " " ) , <nl> - ) , cqlver = cqlsh . DEFAULT _ CQLVER ) <nl> - <nl> def test _ prompt ( self ) : <nl> with testrun _ cqlsh ( tty = True , keyspace = None , cqlver = cqlsh . DEFAULT _ CQLVER ) as c : <nl> self . assertEqual ( c . output _ header . splitlines ( ) [ - 1 ] , ' cqlsh > ' ) <nl> @ @ - 656 , 6 + 611 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> AND comment = ' ' <nl> AND compaction = { ' min _ threshold ' : ' 4 ' , ' class ' : ' org . apache . cassandra . db . compaction . SizeTieredCompactionStrategy ' , ' max _ threshold ' : ' 32 ' } <nl> AND compression = { ' sstable _ compression ' : ' org . apache . cassandra . io . compress . LZ4Compressor ' } <nl> + AND dclocal _ read _ repair _ chance = 0 . 1 <nl> AND default _ time _ to _ live = 0 <nl> AND gc _ grace _ seconds = 864000 <nl> AND max _ index _ interval = 2048 <nl> @ @ - 716 , 7 + 672 , 6 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> self . assertEqual ( output [ 0 ] , ' \ n ' ) <nl> self . assertEqual ( output [ - 1 ] , ' \ n ' ) <nl> self . assertNotIn ( ' Keyspace % s ' % quote _ name ( ks ) , output ) <nl> - self . assertIn ( ' has _ value _ encoding _ errors ' , output ) <nl> self . assertIn ( ' undefined _ values _ table ' , output ) <nl> <nl> def test _ describe _ cluster _ output ( self ) : <nl> diff - - git a / pylib / cqlshlib / test / test _ keyspace _ init . cql b / pylib / cqlshlib / test / test _ keyspace _ init . cql <nl> index 98932bc . . 7e01b10 100644 <nl> - - - a / pylib / cqlshlib / test / test _ keyspace _ init . cql <nl> + + + b / pylib / cqlshlib / test / test _ keyspace _ init . cql <nl> @ @ - 52 , 13 + 52 , 6 @ @ VALUES ( 4 , blobAsInt ( 0x ) , ' ' , blobAsBigint ( 0x ) , 0x , blobAsBoolean ( 0x ) , blobAsDec <nl> blobAsVarint ( 0x ) ) ; <nl> <nl> <nl> - CREATE TABLE has _ value _ encoding _ errors ( <nl> - pkey ascii PRIMARY KEY , <nl> - utf8col text <nl> - ) ; <nl> - <nl> - INSERT INTO has _ value _ encoding _ errors ( pkey , utf8col ) VALUES ( ' A ' , blobAsText ( 0x00ff00ff ) ) ; <nl> - <nl> CREATE TABLE has _ key _ encoding _ errors ( <nl> pkey blob PRIMARY KEY , <nl> col text <nl> @ @ - 138 , 8 + 131 , 6 @ @ INSERT INTO ascii _ with _ invalid _ and _ special _ chars ( k , val ) VALUES ( 0 , blobAsAscii <nl> INSERT INTO ascii _ with _ invalid _ and _ special _ chars ( k , val ) VALUES ( 1 , blobAsAscii ( 0x72657475726e0d616e64206e756c6c0021 ) ) ; <nl> - - " \ x00 \ x01 \ x02 \ x03 \ x04 \ x05control chars \ x06 \ x07 " <nl> INSERT INTO ascii _ with _ invalid _ and _ special _ chars ( k , val ) VALUES ( 2 , blobAsAscii ( 0x000102030405636f6e74726f6c2063686172730607 ) ) ; <nl> - - - " \ xfe \ xffbyte order mark " <nl> - INSERT INTO ascii _ with _ invalid _ and _ special _ chars ( k , val ) VALUES ( 3 , blobAsAscii ( 0xfeff62797465206f72646572206d61726b ) ) ; <nl> - - " fake special chars \ \ x00 \ \ n " <nl> INSERT INTO ascii _ with _ invalid _ and _ special _ chars ( k , val ) VALUES ( 4 , blobAsAscii ( 0x66616b65207370656369616c2063686172735c7830305c6e ) ) ; <nl> <nl> @ @ - 212 , 8 + 203 , 8 @ @ CREATE TYPE phone _ number ( <nl> CREATE TABLE users ( <nl> login text PRIMARY KEY , <nl> name text , <nl> - addresses set < address > , <nl> - phone _ numbers set < phone _ number > <nl> + addresses set < frozen < address > > , <nl> + phone _ numbers set < frozen < phone _ number > > <nl> ) ; <nl> <nl> insert into users ( login , name , addresses , phone _ numbers ) <nl> @ @ - 245 , 8 + 236 , 8 @ @ CREATE TYPE tags ( <nl> CREATE TABLE songs ( <nl> title text PRIMARY KEY , <nl> band text , <nl> - info band _ info _ type , <nl> - tags tags <nl> + info frozen < band _ info _ type > , <nl> + tags frozen < tags > <nl> ) ; <nl> <nl> insert into songs ( title , band , info , tags )
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ output . py b / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 index 6fb4f41 . . 072dd23 100644 
 - - - a / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 + + + b / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 @ @ - 101 , 25 + 101 , 22 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 self . assertNoHasColors ( c . read _ to _ next _ prompt ( ) ) 
 
 def test _ no _ prompt _ or _ colors _ output ( self ) : 
 - # CQL queries and number of lines expected in output : 
 - queries = ( ( ' select * from has _ all _ types limit 1 ; ' , 7 ) , 
 - ( ' select * from has _ value _ encoding _ errors limit 1 ; ' , 8 ) ) 
 for termname in ( ' ' , ' dumb ' , ' vt100 ' , ' xterm ' ) : 
 cqlshlog . debug ( ' TERM = % r ' % termname ) 
 - for cql , lines _ expected in queries : 
 - output , result = testcall _ cqlsh ( prompt = None , env = { ' TERM ' : termname } , 
 - tty = False , input = cql + ' \ n ' ) 
 - output = output . splitlines ( ) 
 - for line in output : 
 - self . assertNoHasColors ( line ) 
 - self . assertNotRegexpMatches ( line , r ' ^ cqlsh \ S * > ' ) 
 - self . assertEqual ( len ( output ) , lines _ expected , 
 - msg = ' output : % r ' % ' \ n ' . join ( output ) ) 
 - self . assertEqual ( output [ 0 ] , ' ' ) 
 - self . assertNicelyFormattedTableHeader ( output [ 1 ] ) 
 - self . assertNicelyFormattedTableRule ( output [ 2 ] ) 
 - self . assertNicelyFormattedTableData ( output [ 3 ] ) 
 - self . assertEqual ( output [ 4 ] . strip ( ) , ' ' ) 
 + query = ' select * from has _ all _ types limit 1 ; ' 
 + output , result = testcall _ cqlsh ( prompt = None , env = { ' TERM ' : termname } , 
 + tty = False , input = query + ' \ n ' ) 
 + output = output . splitlines ( ) 
 + for line in output : 
 + self . assertNoHasColors ( line ) 
 + self . assertNotRegexpMatches ( line , r ' ^ cqlsh \ S * > ' ) 
 + self . assertTrue ( 6 < = len ( output ) < = 8 , 
 + msg = ' output : % r ' % ' \ n ' . join ( output ) ) 
 + self . assertEqual ( output [ 0 ] , ' ' ) 
 + self . assertNicelyFormattedTableHeader ( output [ 1 ] ) 
 + self . assertNicelyFormattedTableRule ( output [ 2 ] ) 
 + self . assertNicelyFormattedTableData ( output [ 3 ] ) 
 + self . assertEqual ( output [ 4 ] . strip ( ) , ' ' ) 
 
 def test _ color _ output ( self ) : 
 for termname in ( ' xterm ' , ' unknown - garbage ' ) : 
 @ @ - 449 , 13 + 446 , 11 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 G YYYYYYmmYYYYYYYYmmmmY 
 2 | \ x00 \ x01 \ x02 \ x03 \ x04 \ x05control chars \ x06 \ x07 
 G mmmmmmmmmmmmmmmmmmmmmmmmYYYYYYYYYYYYYmmmmmmmm 
 - 3 | \ xfe \ xffbyte order mark 
 - G mmmmmmmmYYYYYYYYYYYYYYY 
 4 | fake special chars \ x00 \ n 
 G YYYYYYYYYYYYYYYYYYYYYYYY 
 
 
 - ( 5 rows ) 
 + ( 4 rows ) 
 nnnnnnnn 
 " " " ) , 
 ) , cqlver = cqlsh . DEFAULT _ CQLVER ) 
 @ @ - 525 , 46 + 520 , 6 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 # explicitly generate an exception on the deserialization of type X . . 
 pass 
 
 - def test _ colval _ decoding _ errors ( self ) : 
 - self . assertCqlverQueriesGiveColoredOutput ( ( 
 - ( " select * from has _ value _ encoding _ errors ; " , r " " " 
 - pkey | utf8col 
 - MMMM MMMMMMM 
 - - - - - - - + - - - - - - - - - - - - - - - - - - - - 
 - 
 - A | ' \ x00 \ xff \ x00 \ xff ' 
 - Y RRRRRRRRRRRRRRRRRR 
 - 
 - 
 - ( 1 rows ) 
 - nnnnnnnn 
 - 
 - 
 - Failed to decode value ' \ x00 \ xff \ x00 \ xff ' ( for column ' utf8col ' ) as text : ' utf8 ' codec can ' t decode byte 0xff in position 1 : invalid start byte 
 - RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR 
 - " " " ) , 
 - ) , cqlver = cqlsh . DEFAULT _ CQLVER ) 
 - 
 - def test _ key _ decoding _ errors ( self ) : 
 - self . assertCqlverQueriesGiveColoredOutput ( ( 
 - ( " select * from has _ key _ encoding _ errors ; " , r " " " 
 - pkey | col 
 - MMMM MMM 
 - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - 
 - 
 - ' \ x00 \ xff \ x02 \ x8f ' | whatever 
 - RRRRRRRRRRRRRRRRRR YYYYYYYY 
 - 
 - 
 - ( 1 rows ) 
 - nnnnnnnn 
 - 
 - 
 - Failed to decode value ' \ x00 \ xff \ x02 \ x8f ' ( for column ' pkey ' ) as text : ' utf8 ' codec can ' t decode byte 0xff in position 1 : invalid start byte 
 - RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR 
 - " " " ) , 
 - ) , cqlver = cqlsh . DEFAULT _ CQLVER ) 
 - 
 def test _ prompt ( self ) : 
 with testrun _ cqlsh ( tty = True , keyspace = None , cqlver = cqlsh . DEFAULT _ CQLVER ) as c : 
 self . assertEqual ( c . output _ header . splitlines ( ) [ - 1 ] , ' cqlsh > ' ) 
 @ @ - 656 , 6 + 611 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 AND comment = ' ' 
 AND compaction = { ' min _ threshold ' : ' 4 ' , ' class ' : ' org . apache . cassandra . db . compaction . SizeTieredCompactionStrategy ' , ' max _ threshold ' : ' 32 ' } 
 AND compression = { ' sstable _ compression ' : ' org . apache . cassandra . io . compress . LZ4Compressor ' } 
 + AND dclocal _ read _ repair _ chance = 0 . 1 
 AND default _ time _ to _ live = 0 
 AND gc _ grace _ seconds = 864000 
 AND max _ index _ interval = 2048 
 @ @ - 716 , 7 + 672 , 6 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 self . assertEqual ( output [ 0 ] , ' \ n ' ) 
 self . assertEqual ( output [ - 1 ] , ' \ n ' ) 
 self . assertNotIn ( ' Keyspace % s ' % quote _ name ( ks ) , output ) 
 - self . assertIn ( ' has _ value _ encoding _ errors ' , output ) 
 self . assertIn ( ' undefined _ values _ table ' , output ) 
 
 def test _ describe _ cluster _ output ( self ) : 
 diff - - git a / pylib / cqlshlib / test / test _ keyspace _ init . cql b / pylib / cqlshlib / test / test _ keyspace _ init . cql 
 index 98932bc . . 7e01b10 100644 
 - - - a / pylib / cqlshlib / test / test _ keyspace _ init . cql 
 + + + b / pylib / cqlshlib / test / test _ keyspace _ init . cql 
 @ @ - 52 , 13 + 52 , 6 @ @ VALUES ( 4 , blobAsInt ( 0x ) , ' ' , blobAsBigint ( 0x ) , 0x , blobAsBoolean ( 0x ) , blobAsDec 
 blobAsVarint ( 0x ) ) ; 
 
 
 - CREATE TABLE has _ value _ encoding _ errors ( 
 - pkey ascii PRIMARY KEY , 
 - utf8col text 
 - ) ; 
 - 
 - INSERT INTO has _ value _ encoding _ errors ( pkey , utf8col ) VALUES ( ' A ' , blobAsText ( 0x00ff00ff ) ) ; 
 - 
 CREATE TABLE has _ key _ encoding _ errors ( 
 pkey blob PRIMARY KEY , 
 col text 
 @ @ - 138 , 8 + 131 , 6 @ @ INSERT INTO ascii _ with _ invalid _ and _ special _ chars ( k , val ) VALUES ( 0 , blobAsAscii 
 INSERT INTO ascii _ with _ invalid _ and _ special _ chars ( k , val ) VALUES ( 1 , blobAsAscii ( 0x72657475726e0d616e64206e756c6c0021 ) ) ; 
 - - " \ x00 \ x01 \ x02 \ x03 \ x04 \ x05control chars \ x06 \ x07 " 
 INSERT INTO ascii _ with _ invalid _ and _ special _ chars ( k , val ) VALUES ( 2 , blobAsAscii ( 0x000102030405636f6e74726f6c2063686172730607 ) ) ; 
 - - - " \ xfe \ xffbyte order mark " 
 - INSERT INTO ascii _ with _ invalid _ and _ special _ chars ( k , val ) VALUES ( 3 , blobAsAscii ( 0xfeff62797465206f72646572206d61726b ) ) ; 
 - - " fake special chars \ \ x00 \ \ n " 
 INSERT INTO ascii _ with _ invalid _ and _ special _ chars ( k , val ) VALUES ( 4 , blobAsAscii ( 0x66616b65207370656369616c2063686172735c7830305c6e ) ) ; 
 
 @ @ - 212 , 8 + 203 , 8 @ @ CREATE TYPE phone _ number ( 
 CREATE TABLE users ( 
 login text PRIMARY KEY , 
 name text , 
 - addresses set < address > , 
 - phone _ numbers set < phone _ number > 
 + addresses set < frozen < address > > , 
 + phone _ numbers set < frozen < phone _ number > > 
 ) ; 
 
 insert into users ( login , name , addresses , phone _ numbers ) 
 @ @ - 245 , 8 + 236 , 8 @ @ CREATE TYPE tags ( 
 CREATE TABLE songs ( 
 title text PRIMARY KEY , 
 band text , 
 - info band _ info _ type , 
 - tags tags 
 + info frozen < band _ info _ type > , 
 + tags frozen < tags > 
 ) ; 
 
 insert into songs ( title , band , info , tags )

NEAREST DIFF:
ELIMINATEDSENTENCE
