BLEU SCORE: 0.057079690340587526

TEST MSG: Fix sstable selection when anticompacting
GENERATED MSG: Fix AE when SSTable is closed without releasing reference

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index 5d88a11 . . e60675a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 440 , 12 + 440 , 18 @ @ public class CompactionManager implements CompactionManagerMBean <nl> Iterator < SSTableReader > sstableIterator = sstables . iterator ( ) ; <nl> try <nl> { <nl> + List < Range < Token > > normalizedRanges = Range . normalize ( ranges ) ; <nl> + <nl> while ( sstableIterator . hasNext ( ) ) <nl> { <nl> SSTableReader sstable = sstableIterator . next ( ) ; <nl> - for ( Range < Token > r : Range . normalize ( ranges ) ) <nl> + <nl> + Range < Token > sstableRange = new Range < > ( sstable . first . getToken ( ) , sstable . last . getToken ( ) , sstable . partitioner ) ; <nl> + <nl> + boolean shouldAnticompact = false ; <nl> + <nl> + for ( Range < Token > r : normalizedRanges ) <nl> { <nl> - Range < Token > sstableRange = new Range < > ( sstable . first . getToken ( ) , sstable . last . getToken ( ) , sstable . partitioner ) ; <nl> if ( r . contains ( sstableRange ) ) <nl> { <nl> logger . info ( " SSTable { } fully contained in range { } , mutating repairedAt instead of anticompacting " , sstable , r ) ; <nl> @ @ - 453 , 20 + 459 , 22 @ @ public class CompactionManager implements CompactionManagerMBean <nl> sstable . reloadSSTableMetadata ( ) ; <nl> mutatedRepairStatuses . add ( sstable ) ; <nl> sstableIterator . remove ( ) ; <nl> + shouldAnticompact = true ; <nl> break ; <nl> } <nl> - else if ( ! sstableRange . intersects ( r ) ) <nl> - { <nl> - logger . info ( " SSTable { } ( { } ) does not intersect repaired range { } , not touching repairedAt . " , sstable , sstableRange , r ) ; <nl> - nonAnticompacting . add ( sstable ) ; <nl> - sstableIterator . remove ( ) ; <nl> - break ; <nl> - } <nl> - else <nl> + else if ( sstableRange . intersects ( r ) ) <nl> { <nl> logger . info ( " SSTable { } ( { } ) will be anticompacted on range { } " , sstable , sstableRange , r ) ; <nl> + shouldAnticompact = true ; <nl> } <nl> } <nl> + <nl> + if ( ! shouldAnticompact ) <nl> + { <nl> + logger . info ( " SSTable { } ( { } ) does not intersect repaired ranges { } , not touching repairedAt . " , sstable , sstableRange , normalizedRanges ) ; <nl> + nonAnticompacting . add ( sstable ) ; <nl> + sstableIterator . remove ( ) ; <nl> + } <nl> } <nl> cfs . getDataTracker ( ) . notifySSTableRepairedStatusChanged ( mutatedRepairStatuses ) ; <nl> cfs . getDataTracker ( ) . unmarkCompacting ( Sets . union ( nonAnticompacting , mutatedRepairStatuses ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / compaction / AntiCompactionTest . java b / test / unit / org / apache / cassandra / db / compaction / AntiCompactionTest . java <nl> index 7756abe . . 56af801 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / AntiCompactionTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / AntiCompactionTest . java <nl> @ @ - 148 , 7 + 148 , 7 @ @ public class AntiCompactionTest extends SchemaLoader <nl> ColumnFamilyStore store = prepareColumnFamilyStore ( ) ; <nl> Collection < SSTableReader > sstables = store . getUnrepairedSSTables ( ) ; <nl> assertEquals ( store . getSSTables ( ) . size ( ) , sstables . size ( ) ) ; <nl> - Range < Token > range = new Range < Token > ( new BytesToken ( " - 10 " . getBytes ( ) ) , new BytesToken ( " - 1 " . getBytes ( ) ) ) ; <nl> + Range < Token > range = new Range < Token > ( new BytesToken ( " - 1 " . getBytes ( ) ) , new BytesToken ( " - 10 " . getBytes ( ) ) ) ; <nl> List < Range < Token > > ranges = Arrays . asList ( range ) ; <nl> <nl> Refs < SSTableReader > refs = Refs . tryRef ( sstables ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index 5d88a11 . . e60675a 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 440 , 12 + 440 , 18 @ @ public class CompactionManager implements CompactionManagerMBean 
 Iterator < SSTableReader > sstableIterator = sstables . iterator ( ) ; 
 try 
 { 
 + List < Range < Token > > normalizedRanges = Range . normalize ( ranges ) ; 
 + 
 while ( sstableIterator . hasNext ( ) ) 
 { 
 SSTableReader sstable = sstableIterator . next ( ) ; 
 - for ( Range < Token > r : Range . normalize ( ranges ) ) 
 + 
 + Range < Token > sstableRange = new Range < > ( sstable . first . getToken ( ) , sstable . last . getToken ( ) , sstable . partitioner ) ; 
 + 
 + boolean shouldAnticompact = false ; 
 + 
 + for ( Range < Token > r : normalizedRanges ) 
 { 
 - Range < Token > sstableRange = new Range < > ( sstable . first . getToken ( ) , sstable . last . getToken ( ) , sstable . partitioner ) ; 
 if ( r . contains ( sstableRange ) ) 
 { 
 logger . info ( " SSTable { } fully contained in range { } , mutating repairedAt instead of anticompacting " , sstable , r ) ; 
 @ @ - 453 , 20 + 459 , 22 @ @ public class CompactionManager implements CompactionManagerMBean 
 sstable . reloadSSTableMetadata ( ) ; 
 mutatedRepairStatuses . add ( sstable ) ; 
 sstableIterator . remove ( ) ; 
 + shouldAnticompact = true ; 
 break ; 
 } 
 - else if ( ! sstableRange . intersects ( r ) ) 
 - { 
 - logger . info ( " SSTable { } ( { } ) does not intersect repaired range { } , not touching repairedAt . " , sstable , sstableRange , r ) ; 
 - nonAnticompacting . add ( sstable ) ; 
 - sstableIterator . remove ( ) ; 
 - break ; 
 - } 
 - else 
 + else if ( sstableRange . intersects ( r ) ) 
 { 
 logger . info ( " SSTable { } ( { } ) will be anticompacted on range { } " , sstable , sstableRange , r ) ; 
 + shouldAnticompact = true ; 
 } 
 } 
 + 
 + if ( ! shouldAnticompact ) 
 + { 
 + logger . info ( " SSTable { } ( { } ) does not intersect repaired ranges { } , not touching repairedAt . " , sstable , sstableRange , normalizedRanges ) ; 
 + nonAnticompacting . add ( sstable ) ; 
 + sstableIterator . remove ( ) ; 
 + } 
 } 
 cfs . getDataTracker ( ) . notifySSTableRepairedStatusChanged ( mutatedRepairStatuses ) ; 
 cfs . getDataTracker ( ) . unmarkCompacting ( Sets . union ( nonAnticompacting , mutatedRepairStatuses ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / compaction / AntiCompactionTest . java b / test / unit / org / apache / cassandra / db / compaction / AntiCompactionTest . java 
 index 7756abe . . 56af801 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / AntiCompactionTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / AntiCompactionTest . java 
 @ @ - 148 , 7 + 148 , 7 @ @ public class AntiCompactionTest extends SchemaLoader 
 ColumnFamilyStore store = prepareColumnFamilyStore ( ) ; 
 Collection < SSTableReader > sstables = store . getUnrepairedSSTables ( ) ; 
 assertEquals ( store . getSSTables ( ) . size ( ) , sstables . size ( ) ) ; 
 - Range < Token > range = new Range < Token > ( new BytesToken ( " - 10 " . getBytes ( ) ) , new BytesToken ( " - 1 " . getBytes ( ) ) ) ; 
 + Range < Token > range = new Range < Token > ( new BytesToken ( " - 1 " . getBytes ( ) ) , new BytesToken ( " - 10 " . getBytes ( ) ) ) ; 
 List < Range < Token > > ranges = Arrays . asList ( range ) ; 
 
 Refs < SSTableReader > refs = Refs . tryRef ( sstables ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
