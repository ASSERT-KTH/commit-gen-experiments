BLEU SCORE: 0.01302622121748111

TEST MSG: When SEPWorker assigned work , set thread name to match pool
GENERATED MSG: remove unused variables . patch by johano ; reviewed by jbellis for CASSANDRA - 113

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index a74799c . . 3d8d511 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 8 <nl> + * When SEPWorker assigned work , set thread name to match pool ( CASSANDRA - 11966 ) <nl> * Add cross - DC latency metrics ( CASSANDRA - 11596 ) <nl> * Allow terms in selection clause ( CASSANDRA - 10783 ) <nl> * Add bind variables to trace ( CASSANDRA - 11719 ) <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index aa2612d . . d34613c 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 19 , 6 + 19 , 8 @ @ using the provided ' sstableupgrade ' tool . <nl> <nl> New features <nl> - - - - - - - - - - - - <nl> + - Shared pool threads are now named according to the stage they are executing <nl> + tasks for . Thread names mentioned in traced queries change accordingly . <nl> - A new option has been added to cassandra - stress " - rate fixed = { number } / s " <nl> that forces a scheduled rate of operations / sec over time . Using this , stress can <nl> accurately account for coordinated ommission from the stress process . <nl> diff - - git a / src / java / org / apache / cassandra / concurrent / SEPExecutor . java b / src / java / org / apache / cassandra / concurrent / SEPExecutor . java <nl> index 8b12b82 . . c87614b 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / SEPExecutor . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / SEPExecutor . java <nl> @ @ - 34 , 6 + 34 , 7 @ @ public class SEPExecutor extends AbstractLocalAwareExecutorService <nl> private final SharedExecutorPool pool ; <nl> <nl> public final int maxWorkers ; <nl> + public final String name ; <nl> private final int maxTasksQueued ; <nl> private final SEPMetrics metrics ; <nl> <nl> @ @ - 55 , 6 + 56 , 7 @ @ public class SEPExecutor extends AbstractLocalAwareExecutorService <nl> SEPExecutor ( SharedExecutorPool pool , int maxWorkers , int maxTasksQueued , String jmxPath , String name ) <nl> { <nl> this . pool = pool ; <nl> + this . name = name ; <nl> this . maxWorkers = maxWorkers ; <nl> this . maxTasksQueued = maxTasksQueued ; <nl> this . permits . set ( combine ( 0 , maxWorkers ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / concurrent / SEPWorker . java b / src / java / org / apache / cassandra / concurrent / SEPWorker . java <nl> index d7c21bc . . b3f817a 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / SEPWorker . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / SEPWorker . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import org . apache . cassandra . utils . JVMStabilityInspector ; <nl> final class SEPWorker extends AtomicReference < SEPWorker . Work > implements Runnable <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( SEPWorker . class ) ; <nl> + private static final boolean SET _ THREAD _ NAME = Boolean . parseBoolean ( System . getProperty ( " cassandra . set _ sep _ thread _ name " , " true " ) ) ; <nl> <nl> final Long workerId ; <nl> final Thread thread ; <nl> @ @ - 89 , 6 + 90 , 8 @ @ final class SEPWorker extends AtomicReference < SEPWorker . Work > implements Runnabl <nl> assigned = get ( ) . assigned ; <nl> if ( assigned = = null ) <nl> continue ; <nl> + if ( SET _ THREAD _ NAME ) <nl> + Thread . currentThread ( ) . setName ( assigned . name + " - " + workerId ) ; <nl> task = assigned . tasks . poll ( ) ; <nl> <nl> / / if we do have tasks assigned , nobody will change our state so we can simply set it to WORKING
NEAREST DIFF (one line): diff - - git a / src / org / apache / cassandra / config / DatabaseDescriptor . java b / src / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 3e5e557 . . a79277a 100644 <nl> - - - a / src / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 125 , 7 + 125 , 6 @ @ public class DatabaseDescriptor <nl> try <nl> { <nl> String file = System . getProperty ( " storage - config " ) + System . getProperty ( " file . separator " ) + " storage - conf . xml " ; <nl> - String os = System . getProperty ( " os . name " ) ; <nl> XMLUtils xmlUtils = new XMLUtils ( file ) ; <nl> <nl> / * Cluster Name * / <nl> diff - - git a / src / org / apache / cassandra / db / CommitLog . java b / src / org / apache / cassandra / db / CommitLog . java <nl> index 6097f76 . . f21c073 100644 <nl> - - - a / src / org / apache / cassandra / db / CommitLog . java <nl> + + + b / src / org / apache / cassandra / db / CommitLog . java <nl> @ @ - 338 , 7 + 338 , 6 @ @ public class CommitLog <nl> IFileReader reader = SequenceFile . reader ( file . getAbsolutePath ( ) ) ; <nl> try <nl> { <nl> - Map < String , Row > rows = new HashMap < String , Row > ( ) ; <nl> reader . readDirect ( header ) ; <nl> / * deserialize the commit log header * / <nl> bufIn . reset ( header , 0 , header . length ) ; <nl> diff - - git a / src / org / apache / cassandra / db / CommitLogEntry . java b / src / org / apache / cassandra / db / CommitLogEntry . java <nl> index f7a0e72 . . 607d992 100644 <nl> - - - a / src / org / apache / cassandra / db / CommitLogEntry . java <nl> + + + b / src / org / apache / cassandra / db / CommitLogEntry . java <nl> @ @ - 18 , 10 + 18 , 8 @ @ <nl> <nl> package org . apache . cassandra . db ; <nl> <nl> - import java . util . concurrent . atomic . AtomicInteger ; <nl> - import java . io . ByteArrayInputStream ; <nl> - import java . io . DataOutputStream ; <nl> import java . io . DataInputStream ; <nl> + import java . io . DataOutputStream ; <nl> import java . io . IOException ; <nl> <nl> import org . apache . cassandra . io . ICompactSerializer ; <nl> @ @ - 36 , 7 + 34 , 6 @ @ import org . apache . cassandra . io . ICompactSerializer ; <nl> * / <nl> class CommitLogEntry <nl> { <nl> - private static AtomicInteger lsnGenerator _ = new AtomicInteger ( 0 ) ; <nl> private static ICompactSerializer < CommitLogEntry > serializer _ ; <nl> static <nl> { <nl> diff - - git a / src / org / apache / cassandra / db / IdentityFilter . java b / src / org / apache / cassandra / db / IdentityFilter . java <nl> index 9a3477a . . d935489 100644 <nl> - - - a / src / org / apache / cassandra / db / IdentityFilter . java <nl> + + + b / src / org / apache / cassandra / db / IdentityFilter . java <nl> @ @ - 24 , 7 + 24 , 7 @ @ public class IdentityFilter implements IFilter <nl> 	 String [ ] values = RowMutation . getColumnAndColumnFamily ( cfString ) ; <nl> 	 if ( columnFamily = = null ) <nl> 	 	 return columnFamily ; <nl> - 	 	 String cfName = columnFamily . name ( ) ; <nl> + <nl> 	 	 if ( values . length = = 2 & & ! columnFamily . isSuper ( ) ) <nl> 	 	 { <nl> 	 	 	 Collection < IColumn > columns = columnFamily . getAllColumns ( ) ; <nl> diff - - git a / src / org / apache / cassandra / db / SystemTable . java b / src / org / apache / cassandra / db / SystemTable . java <nl> index a891742 . . 7f03ede 100644 <nl> - - - a / src / org / apache / cassandra / db / SystemTable . java <nl> + + + b / src / org / apache / cassandra / db / SystemTable . java <nl> @ @ - 95 , 7 + 95 , 6 @ @ public class SystemTable <nl> * / <nl> public Row get ( String key ) throws IOException <nl> { <nl> - String file = getFileName ( ) ; <nl> DataOutputBuffer bufOut = new DataOutputBuffer ( ) ; <nl> reader _ . next ( bufOut ) ; <nl> <nl> diff - - git a / src / org / apache / cassandra / db / Table . java b / src / org / apache / cassandra / db / Table . java <nl> index bcf839d . . 78ab663 100644 <nl> - - - a / src / org / apache / cassandra / db / Table . java <nl> + + + b / src / org / apache / cassandra / db / Table . java <nl> @ @ - 117 , 7 + 117 , 7 @ @ public class Table <nl> bufIn . reset ( bufOut . getData ( ) , bufOut . getLength ( ) ) ; <nl> <nl> / * The key is the table name * / <nl> - String key = bufIn . readUTF ( ) ; <nl> + bufIn . readUTF ( ) ; <nl> / * read the size of the data we ignore this value * / <nl> bufIn . readInt ( ) ; <nl> tableMetadata _ = Table . TableMetadata . serializer ( ) . deserialize ( bufIn ) ; <nl> diff - - git a / src / org / apache / cassandra / gms / Gossiper . java b / src / org / apache / cassandra / gms / Gossiper . java <nl> index 8e79228 . . ad2364d 100644 <nl> - - - a / src / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 117 , 8 + 117 , 6 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> private EndPoint localEndPoint _ ; <nl> private long aVeryLongTime _ ; <nl> private Random random _ = new Random ( ) ; <nl> - / * index used previously * / <nl> - private int prevIndex _ = 0 ; <nl> / * round robin index through live endpoint set * / <nl> private int rrIndex _ = 0 ; <nl> <nl> @ @ - 320 , 7 + 318 , 6 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> int maxVersion = getMaxEndPointStateVersion ( epState ) ; <nl> gDigests . add ( new GossipDigest ( localEndPoint _ , generation , maxVersion ) ) ; <nl> <nl> - int size = liveEndpoints _ . size ( ) ; <nl> List < EndPoint > endpoints = new ArrayList < EndPoint > ( liveEndpoints _ ) ; <nl> Collections . shuffle ( endpoints , random _ ) ; <nl> for ( EndPoint liveEndPoint : endpoints ) <nl> diff - - git a / src / org / apache / cassandra / io / BufferedRandomAccessFile . java b / src / org / apache / cassandra / io / BufferedRandomAccessFile . java <nl> index e218b7d . . 4e9c4ba 100644 <nl> - - - a / src / org / apache / cassandra / io / BufferedRandomAccessFile . java <nl> + + + b / src / org / apache / cassandra / io / BufferedRandomAccessFile . java <nl> @ @ - 18 , 11 + 18 , 12 @ @ <nl> <nl> package org . apache . cassandra . io ; <nl> <nl> - import java . io . * ; <nl> + import java . io . File ; <nl> + import java . io . FileNotFoundException ; <nl> + import java . io . IOException ; <nl> + import java . io . RandomAccessFile ; <nl> import java . util . Arrays ; <nl> <nl> - import org . apache . log4j . Logger ; <nl> - <nl> / * * <nl> * A < code > BufferedRandomAccessFile < / code > is like a <nl> * < code > RandomAccessFile < / code > , but it uses a private buffer so that most <nl> @ @ - 38 , 7 + 39 , 6 @ @ import org . apache . log4j . Logger ; <nl> <nl> public final class BufferedRandomAccessFile extends RandomAccessFile <nl> { <nl> - private static final Logger logger _ = Logger . getLogger ( BufferedRandomAccessFile . class ) ; <nl> static final int LogBuffSz _ = 16 ; / / 64K buffer <nl> public static final int BuffSz _ = ( 1 < < LogBuffSz _ ) ; <nl> static final long BuffMask _ = ~ ( ( ( long ) BuffSz _ ) - 1L ) ; <nl> @ @ - 48 , 7 + 48 , 6 @ @ public final class BufferedRandomAccessFile extends RandomAccessFile <nl> * " Rd " , " Wr " , " RdClass " , and " WrClass " interfaces . <nl> * / <nl> private boolean dirty _ ; / / true iff unflushed bytes exist <nl> - private boolean closed _ ; / / true iff the file is closed <nl> private long curr _ ; / / current position in file <nl> private long lo _ , hi _ ; / / bounds on characters in " buff " <nl> private byte [ ] buff _ ; / / local buffer <nl> @ @ - 145 , 7 + 144 , 7 @ @ public final class BufferedRandomAccessFile extends RandomAccessFile <nl> <nl> private void init ( int size ) <nl> { <nl> - this . dirty _ = this . closed _ = false ; <nl> + this . dirty _ = false ; <nl> this . lo _ = this . curr _ = this . hi _ = 0 ; <nl> this . buff _ = ( size > BuffSz _ ) ? new byte [ size ] : new byte [ BuffSz _ ] ; <nl> this . maxHi _ = ( long ) BuffSz _ ; <nl> @ @ - 156 , 7 + 155 , 6 @ @ public final class BufferedRandomAccessFile extends RandomAccessFile <nl> public void close ( ) throws IOException <nl> { <nl> this . flush ( ) ; <nl> - this . closed _ = true ; <nl> super . close ( ) ; <nl> } <nl> <nl> diff - - git a / src / org / apache / cassandra / io / IndexHelper . java b / src / org / apache / cassandra / io / IndexHelper . java <nl> index 572fd9d . . dbc1622 100644 <nl> - - - a / src / org / apache / cassandra / io / IndexHelper . java <nl> + + + b / src / org / apache / cassandra / io / IndexHelper . java <nl> @ @ - 160 , 9 + 160 , 6 @ @ public class IndexHelper <nl> 	 	 / * now deserialize the index list * / <nl> DataInputBuffer indexIn = new DataInputBuffer ( ) ; <nl> indexIn . reset ( indexOut . getData ( ) , indexOut . getLength ( ) ) ; <nl> - String columnName ; <nl> - int position ; <nl> - int numCols ; <nl> <nl> TypeInfo typeInfo = DatabaseDescriptor . getTypeInfo ( cfName ) ; <nl> if ( DatabaseDescriptor . getColumnFamilyType ( cfName ) . equals ( " Super " ) | | DatabaseDescriptor . isNameSortingEnabled ( cfName ) ) <nl> diff - - git a / src / org / apache / cassandra / loader / Loader . java b / src / org / apache / cassandra / loader / Loader . java <nl> index fd678c5 . . fd70d4b 100644 <nl> - - - a / src / org / apache / cassandra / loader / Loader . java <nl> + + + b / src / org / apache / cassandra / loader / Loader . java <nl> @ @ - 316 , 9 + 316 , 6 @ @ public class Loader <nl> * the SSTables and reset the load state in the StorageService . <nl> * / <nl> SSTable . delete ( ssTables . get ( 0 ) ) ; <nl> - / / File commitLogDirectory = new File ( DatabaseDescriptor . getLogFileLocation ( ) ) ; <nl> - / / FileUtils . delete ( commitLogDirectory . listFiles ( ) ) ; <nl> - storageService _ . resetLoadState ( ) ; <nl> logger _ . info ( " Finished all the requisite clean up . . . " ) ; <nl> } <nl> <nl> diff - - git a / src / org / apache / cassandra / loader / PreLoad . java b / src / org / apache / cassandra / loader / PreLoad . java <nl> index 6755c55 . . b9f9507 100644 <nl> - - - a / src / org / apache / cassandra / loader / PreLoad . java <nl> + + + b / src / org / apache / cassandra / loader / PreLoad . java <nl> @ @ - 117 , 7 + 117 , 6 @ @ public class PreLoad <nl> * the SSTables and reset the load state in the StorageService . <nl> * / <nl> SSTable . delete ( ssTables . get ( 0 ) ) ; <nl> - storageService _ . resetLoadState ( ) ; <nl> logger _ . info ( " Finished all the requisite clean up . . . " ) ; <nl> } <nl> <nl> diff - - git a / src / org / apache / cassandra / service / ReadRepairManager . java b / src / org / apache / cassandra / service / ReadRepairManager . java <nl> index 0b62ebf . . 5b0d333 100644 <nl> - - - a / src / org / apache / cassandra / service / ReadRepairManager . java <nl> + + + b / src / org / apache / cassandra / service / ReadRepairManager . java <nl> @ @ - 64 , 7 + 64 , 6 @ @ class ReadRepairManager <nl> 	 static class ReadRepairPerformer implements <nl> 	 	 	 ICacheExpungeHook < String , Message > <nl> 	 { <nl> - 	 	 private static Logger logger _ = Logger . getLogger ( ReadRepairPerformer . class ) ; <nl> 	 	 / * <nl> 	 	 * The hook fn which takes the end point and the row mutation that <nl> 	 	 * needs to be sent to the end point in order <nl> diff - - git a / src / org / apache / cassandra / service / StorageService . java b / src / org / apache / cassandra / service / StorageService . java <nl> index fd9f4df . . 0691fa4 100644 <nl> - - - a / src / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / org / apache / cassandra / service / StorageService . java <nl> @ @ - 188 , 14 + 188 , 6 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> } <nl> } <nl> <nl> - private class ShutdownTimerTask extends TimerTask <nl> - { <nl> - 	 public void run ( ) <nl> - 	 { <nl> - 	 	 StorageService . instance ( ) . shutdown ( ) ; <nl> - 	 } <nl> - } <nl> - <nl> / * <nl> * Factory method that gets an instance of the StorageService <nl> * class . <nl> @ @ - 235 , 8 + 227 , 6 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> * <nl> * / <nl> private IEndPointSnitch endPointSnitch _ ; <nl> - / * Uptime of this node - we use this to determine if a bootstrap can be performed by this node * / <nl> - private long uptime _ = 0L ; <nl> <nl> / * This abstraction maintains the token / endpoint metadata information * / <nl> private TokenMetadata tokenMetadata _ = new TokenMetadata ( ) ; <nl> @ @ - 247 , 11 + 237 , 6 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> * for a clean exit . <nl> * / <nl> private Set < IComponentShutdown > components _ = new HashSet < IComponentShutdown > ( ) ; <nl> - / * <nl> - * This boolean indicates if we are in loading state . If we are then we do not want any <nl> - * distributed algorithms w . r . t change in token state to kick in . <nl> - * / <nl> - private boolean isLoadState _ = false ; <nl> / * Timer is used to disseminate load information * / <nl> private Timer loadTimer _ = new Timer ( false ) ; <nl> <nl> @ @ - 298 , 7 + 283 , 6 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> public StorageService ( ) <nl> { <nl> init ( ) ; <nl> - uptime _ = System . currentTimeMillis ( ) ; <nl> storageLoadBalancer _ = new StorageLoadBalancer ( this ) ; <nl> endPointSnitch _ = new EndPointSnitch ( ) ; <nl> <nl> @ @ - 768 , 7 + 752 , 6 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> { <nl> 	 if ( keys . length > 0 ) <nl> 	 { <nl> - 	 isLoadState _ = true ; <nl> Token token = tokenMetadata _ . getToken ( StorageService . tcpAddr _ ) ; <nl> 	 Map < Token , EndPoint > tokenToEndPointMap = tokenMetadata _ . cloneTokenEndPointMap ( ) ; <nl> 	 Token [ ] tokens = tokenToEndPointMap . keySet ( ) . toArray ( new Token [ tokenToEndPointMap . keySet ( ) . size ( ) ] ) ; <nl> @ @ - 779 , 15 + 762 , 6 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> 	 updateToken ( newToken ) ; <nl> 	 } <nl> } <nl> - <nl> - / * <nl> - * This is used to indicate that this node is done <nl> - * with the loading of data . <nl> - * / <nl> - public void resetLoadState ( ) <nl> - { <nl> - isLoadState _ = false ; <nl> - } <nl> <nl> / * * <nl> * This method takes a colon separated string of nodes that need <nl> diff - - git a / src / org / apache / cassandra / utils / FBUtilities . java b / src / org / apache / cassandra / utils / FBUtilities . java <nl> index 3f14c06 . . b6b6802 100644 <nl> - - - a / src / org / apache / cassandra / utils / FBUtilities . java <nl> + + + b / src / org / apache / cassandra / utils / FBUtilities . java <nl> @ @ - 50 , 7 + 50 , 6 @ @ public class FBUtilities <nl> { <nl> <nl> private static InetAddress localInetAddress _ ; <nl> - private static String host _ ; <nl> <nl> public static String getTimestamp ( ) <nl> {

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index a74799c . . 3d8d511 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 8 
 + * When SEPWorker assigned work , set thread name to match pool ( CASSANDRA - 11966 ) 
 * Add cross - DC latency metrics ( CASSANDRA - 11596 ) 
 * Allow terms in selection clause ( CASSANDRA - 10783 ) 
 * Add bind variables to trace ( CASSANDRA - 11719 ) 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index aa2612d . . d34613c 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 19 , 6 + 19 , 8 @ @ using the provided ' sstableupgrade ' tool . 
 
 New features 
 - - - - - - - - - - - - 
 + - Shared pool threads are now named according to the stage they are executing 
 + tasks for . Thread names mentioned in traced queries change accordingly . 
 - A new option has been added to cassandra - stress " - rate fixed = { number } / s " 
 that forces a scheduled rate of operations / sec over time . Using this , stress can 
 accurately account for coordinated ommission from the stress process . 
 diff - - git a / src / java / org / apache / cassandra / concurrent / SEPExecutor . java b / src / java / org / apache / cassandra / concurrent / SEPExecutor . java 
 index 8b12b82 . . c87614b 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / SEPExecutor . java 
 + + + b / src / java / org / apache / cassandra / concurrent / SEPExecutor . java 
 @ @ - 34 , 6 + 34 , 7 @ @ public class SEPExecutor extends AbstractLocalAwareExecutorService 
 private final SharedExecutorPool pool ; 
 
 public final int maxWorkers ; 
 + public final String name ; 
 private final int maxTasksQueued ; 
 private final SEPMetrics metrics ; 
 
 @ @ - 55 , 6 + 56 , 7 @ @ public class SEPExecutor extends AbstractLocalAwareExecutorService 
 SEPExecutor ( SharedExecutorPool pool , int maxWorkers , int maxTasksQueued , String jmxPath , String name ) 
 { 
 this . pool = pool ; 
 + this . name = name ; 
 this . maxWorkers = maxWorkers ; 
 this . maxTasksQueued = maxTasksQueued ; 
 this . permits . set ( combine ( 0 , maxWorkers ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / concurrent / SEPWorker . java b / src / java / org / apache / cassandra / concurrent / SEPWorker . java 
 index d7c21bc . . b3f817a 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / SEPWorker . java 
 + + + b / src / java / org / apache / cassandra / concurrent / SEPWorker . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import org . apache . cassandra . utils . JVMStabilityInspector ; 
 final class SEPWorker extends AtomicReference < SEPWorker . Work > implements Runnable 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( SEPWorker . class ) ; 
 + private static final boolean SET _ THREAD _ NAME = Boolean . parseBoolean ( System . getProperty ( " cassandra . set _ sep _ thread _ name " , " true " ) ) ; 
 
 final Long workerId ; 
 final Thread thread ; 
 @ @ - 89 , 6 + 90 , 8 @ @ final class SEPWorker extends AtomicReference < SEPWorker . Work > implements Runnabl 
 assigned = get ( ) . assigned ; 
 if ( assigned = = null ) 
 continue ; 
 + if ( SET _ THREAD _ NAME ) 
 + Thread . currentThread ( ) . setName ( assigned . name + " - " + workerId ) ; 
 task = assigned . tasks . poll ( ) ; 
 
 / / if we do have tasks assigned , nobody will change our state so we can simply set it to WORKING

NEAREST DIFF:
diff - - git a / src / org / apache / cassandra / config / DatabaseDescriptor . java b / src / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 3e5e557 . . a79277a 100644 
 - - - a / src / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 125 , 7 + 125 , 6 @ @ public class DatabaseDescriptor 
 try 
 { 
 String file = System . getProperty ( " storage - config " ) + System . getProperty ( " file . separator " ) + " storage - conf . xml " ; 
 - String os = System . getProperty ( " os . name " ) ; 
 XMLUtils xmlUtils = new XMLUtils ( file ) ; 
 
 / * Cluster Name * / 
 diff - - git a / src / org / apache / cassandra / db / CommitLog . java b / src / org / apache / cassandra / db / CommitLog . java 
 index 6097f76 . . f21c073 100644 
 - - - a / src / org / apache / cassandra / db / CommitLog . java 
 + + + b / src / org / apache / cassandra / db / CommitLog . java 
 @ @ - 338 , 7 + 338 , 6 @ @ public class CommitLog 
 IFileReader reader = SequenceFile . reader ( file . getAbsolutePath ( ) ) ; 
 try 
 { 
 - Map < String , Row > rows = new HashMap < String , Row > ( ) ; 
 reader . readDirect ( header ) ; 
 / * deserialize the commit log header * / 
 bufIn . reset ( header , 0 , header . length ) ; 
 diff - - git a / src / org / apache / cassandra / db / CommitLogEntry . java b / src / org / apache / cassandra / db / CommitLogEntry . java 
 index f7a0e72 . . 607d992 100644 
 - - - a / src / org / apache / cassandra / db / CommitLogEntry . java 
 + + + b / src / org / apache / cassandra / db / CommitLogEntry . java 
 @ @ - 18 , 10 + 18 , 8 @ @ 
 
 package org . apache . cassandra . db ; 
 
 - import java . util . concurrent . atomic . AtomicInteger ; 
 - import java . io . ByteArrayInputStream ; 
 - import java . io . DataOutputStream ; 
 import java . io . DataInputStream ; 
 + import java . io . DataOutputStream ; 
 import java . io . IOException ; 
 
 import org . apache . cassandra . io . ICompactSerializer ; 
 @ @ - 36 , 7 + 34 , 6 @ @ import org . apache . cassandra . io . ICompactSerializer ; 
 * / 
 class CommitLogEntry 
 { 
 - private static AtomicInteger lsnGenerator _ = new AtomicInteger ( 0 ) ; 
 private static ICompactSerializer < CommitLogEntry > serializer _ ; 
 static 
 { 
 diff - - git a / src / org / apache / cassandra / db / IdentityFilter . java b / src / org / apache / cassandra / db / IdentityFilter . java 
 index 9a3477a . . d935489 100644 
 - - - a / src / org / apache / cassandra / db / IdentityFilter . java 
 + + + b / src / org / apache / cassandra / db / IdentityFilter . java 
 @ @ - 24 , 7 + 24 , 7 @ @ public class IdentityFilter implements IFilter 
 	 String [ ] values = RowMutation . getColumnAndColumnFamily ( cfString ) ; 
 	 if ( columnFamily = = null ) 
 	 	 return columnFamily ; 
 - 	 	 String cfName = columnFamily . name ( ) ; 
 + 
 	 	 if ( values . length = = 2 & & ! columnFamily . isSuper ( ) ) 
 	 	 { 
 	 	 	 Collection < IColumn > columns = columnFamily . getAllColumns ( ) ; 
 diff - - git a / src / org / apache / cassandra / db / SystemTable . java b / src / org / apache / cassandra / db / SystemTable . java 
 index a891742 . . 7f03ede 100644 
 - - - a / src / org / apache / cassandra / db / SystemTable . java 
 + + + b / src / org / apache / cassandra / db / SystemTable . java 
 @ @ - 95 , 7 + 95 , 6 @ @ public class SystemTable 
 * / 
 public Row get ( String key ) throws IOException 
 { 
 - String file = getFileName ( ) ; 
 DataOutputBuffer bufOut = new DataOutputBuffer ( ) ; 
 reader _ . next ( bufOut ) ; 
 
 diff - - git a / src / org / apache / cassandra / db / Table . java b / src / org / apache / cassandra / db / Table . java 
 index bcf839d . . 78ab663 100644 
 - - - a / src / org / apache / cassandra / db / Table . java 
 + + + b / src / org / apache / cassandra / db / Table . java 
 @ @ - 117 , 7 + 117 , 7 @ @ public class Table 
 bufIn . reset ( bufOut . getData ( ) , bufOut . getLength ( ) ) ; 
 
 / * The key is the table name * / 
 - String key = bufIn . readUTF ( ) ; 
 + bufIn . readUTF ( ) ; 
 / * read the size of the data we ignore this value * / 
 bufIn . readInt ( ) ; 
 tableMetadata _ = Table . TableMetadata . serializer ( ) . deserialize ( bufIn ) ; 
 diff - - git a / src / org / apache / cassandra / gms / Gossiper . java b / src / org / apache / cassandra / gms / Gossiper . java 
 index 8e79228 . . ad2364d 100644 
 - - - a / src / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 117 , 8 + 117 , 6 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 private EndPoint localEndPoint _ ; 
 private long aVeryLongTime _ ; 
 private Random random _ = new Random ( ) ; 
 - / * index used previously * / 
 - private int prevIndex _ = 0 ; 
 / * round robin index through live endpoint set * / 
 private int rrIndex _ = 0 ; 
 
 @ @ - 320 , 7 + 318 , 6 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 int maxVersion = getMaxEndPointStateVersion ( epState ) ; 
 gDigests . add ( new GossipDigest ( localEndPoint _ , generation , maxVersion ) ) ; 
 
 - int size = liveEndpoints _ . size ( ) ; 
 List < EndPoint > endpoints = new ArrayList < EndPoint > ( liveEndpoints _ ) ; 
 Collections . shuffle ( endpoints , random _ ) ; 
 for ( EndPoint liveEndPoint : endpoints ) 
 diff - - git a / src / org / apache / cassandra / io / BufferedRandomAccessFile . java b / src / org / apache / cassandra / io / BufferedRandomAccessFile . java 
 index e218b7d . . 4e9c4ba 100644 
 - - - a / src / org / apache / cassandra / io / BufferedRandomAccessFile . java 
 + + + b / src / org / apache / cassandra / io / BufferedRandomAccessFile . java 
 @ @ - 18 , 11 + 18 , 12 @ @ 
 
 package org . apache . cassandra . io ; 
 
 - import java . io . * ; 
 + import java . io . File ; 
 + import java . io . FileNotFoundException ; 
 + import java . io . IOException ; 
 + import java . io . RandomAccessFile ; 
 import java . util . Arrays ; 
 
 - import org . apache . log4j . Logger ; 
 - 
 / * * 
 * A < code > BufferedRandomAccessFile < / code > is like a 
 * < code > RandomAccessFile < / code > , but it uses a private buffer so that most 
 @ @ - 38 , 7 + 39 , 6 @ @ import org . apache . log4j . Logger ; 
 
 public final class BufferedRandomAccessFile extends RandomAccessFile 
 { 
 - private static final Logger logger _ = Logger . getLogger ( BufferedRandomAccessFile . class ) ; 
 static final int LogBuffSz _ = 16 ; / / 64K buffer 
 public static final int BuffSz _ = ( 1 < < LogBuffSz _ ) ; 
 static final long BuffMask _ = ~ ( ( ( long ) BuffSz _ ) - 1L ) ; 
 @ @ - 48 , 7 + 48 , 6 @ @ public final class BufferedRandomAccessFile extends RandomAccessFile 
 * " Rd " , " Wr " , " RdClass " , and " WrClass " interfaces . 
 * / 
 private boolean dirty _ ; / / true iff unflushed bytes exist 
 - private boolean closed _ ; / / true iff the file is closed 
 private long curr _ ; / / current position in file 
 private long lo _ , hi _ ; / / bounds on characters in " buff " 
 private byte [ ] buff _ ; / / local buffer 
 @ @ - 145 , 7 + 144 , 7 @ @ public final class BufferedRandomAccessFile extends RandomAccessFile 
 
 private void init ( int size ) 
 { 
 - this . dirty _ = this . closed _ = false ; 
 + this . dirty _ = false ; 
 this . lo _ = this . curr _ = this . hi _ = 0 ; 
 this . buff _ = ( size > BuffSz _ ) ? new byte [ size ] : new byte [ BuffSz _ ] ; 
 this . maxHi _ = ( long ) BuffSz _ ; 
 @ @ - 156 , 7 + 155 , 6 @ @ public final class BufferedRandomAccessFile extends RandomAccessFile 
 public void close ( ) throws IOException 
 { 
 this . flush ( ) ; 
 - this . closed _ = true ; 
 super . close ( ) ; 
 } 
 
 diff - - git a / src / org / apache / cassandra / io / IndexHelper . java b / src / org / apache / cassandra / io / IndexHelper . java 
 index 572fd9d . . dbc1622 100644 
 - - - a / src / org / apache / cassandra / io / IndexHelper . java 
 + + + b / src / org / apache / cassandra / io / IndexHelper . java 
 @ @ - 160 , 9 + 160 , 6 @ @ public class IndexHelper 
 	 	 / * now deserialize the index list * / 
 DataInputBuffer indexIn = new DataInputBuffer ( ) ; 
 indexIn . reset ( indexOut . getData ( ) , indexOut . getLength ( ) ) ; 
 - String columnName ; 
 - int position ; 
 - int numCols ; 
 
 TypeInfo typeInfo = DatabaseDescriptor . getTypeInfo ( cfName ) ; 
 if ( DatabaseDescriptor . getColumnFamilyType ( cfName ) . equals ( " Super " ) | | DatabaseDescriptor . isNameSortingEnabled ( cfName ) ) 
 diff - - git a / src / org / apache / cassandra / loader / Loader . java b / src / org / apache / cassandra / loader / Loader . java 
 index fd678c5 . . fd70d4b 100644 
 - - - a / src / org / apache / cassandra / loader / Loader . java 
 + + + b / src / org / apache / cassandra / loader / Loader . java 
 @ @ - 316 , 9 + 316 , 6 @ @ public class Loader 
 * the SSTables and reset the load state in the StorageService . 
 * / 
 SSTable . delete ( ssTables . get ( 0 ) ) ; 
 - / / File commitLogDirectory = new File ( DatabaseDescriptor . getLogFileLocation ( ) ) ; 
 - / / FileUtils . delete ( commitLogDirectory . listFiles ( ) ) ; 
 - storageService _ . resetLoadState ( ) ; 
 logger _ . info ( " Finished all the requisite clean up . . . " ) ; 
 } 
 
 diff - - git a / src / org / apache / cassandra / loader / PreLoad . java b / src / org / apache / cassandra / loader / PreLoad . java 
 index 6755c55 . . b9f9507 100644 
 - - - a / src / org / apache / cassandra / loader / PreLoad . java 
 + + + b / src / org / apache / cassandra / loader / PreLoad . java 
 @ @ - 117 , 7 + 117 , 6 @ @ public class PreLoad 
 * the SSTables and reset the load state in the StorageService . 
 * / 
 SSTable . delete ( ssTables . get ( 0 ) ) ; 
 - storageService _ . resetLoadState ( ) ; 
 logger _ . info ( " Finished all the requisite clean up . . . " ) ; 
 } 
 
 diff - - git a / src / org / apache / cassandra / service / ReadRepairManager . java b / src / org / apache / cassandra / service / ReadRepairManager . java 
 index 0b62ebf . . 5b0d333 100644 
 - - - a / src / org / apache / cassandra / service / ReadRepairManager . java 
 + + + b / src / org / apache / cassandra / service / ReadRepairManager . java 
 @ @ - 64 , 7 + 64 , 6 @ @ class ReadRepairManager 
 	 static class ReadRepairPerformer implements 
 	 	 	 ICacheExpungeHook < String , Message > 
 	 { 
 - 	 	 private static Logger logger _ = Logger . getLogger ( ReadRepairPerformer . class ) ; 
 	 	 / * 
 	 	 * The hook fn which takes the end point and the row mutation that 
 	 	 * needs to be sent to the end point in order 
 diff - - git a / src / org / apache / cassandra / service / StorageService . java b / src / org / apache / cassandra / service / StorageService . java 
 index fd9f4df . . 0691fa4 100644 
 - - - a / src / org / apache / cassandra / service / StorageService . java 
 + + + b / src / org / apache / cassandra / service / StorageService . java 
 @ @ - 188 , 14 + 188 , 6 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 } 
 } 
 
 - private class ShutdownTimerTask extends TimerTask 
 - { 
 - 	 public void run ( ) 
 - 	 { 
 - 	 	 StorageService . instance ( ) . shutdown ( ) ; 
 - 	 } 
 - } 
 - 
 / * 
 * Factory method that gets an instance of the StorageService 
 * class . 
 @ @ - 235 , 8 + 227 , 6 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 * 
 * / 
 private IEndPointSnitch endPointSnitch _ ; 
 - / * Uptime of this node - we use this to determine if a bootstrap can be performed by this node * / 
 - private long uptime _ = 0L ; 
 
 / * This abstraction maintains the token / endpoint metadata information * / 
 private TokenMetadata tokenMetadata _ = new TokenMetadata ( ) ; 
 @ @ - 247 , 11 + 237 , 6 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 * for a clean exit . 
 * / 
 private Set < IComponentShutdown > components _ = new HashSet < IComponentShutdown > ( ) ; 
 - / * 
 - * This boolean indicates if we are in loading state . If we are then we do not want any 
 - * distributed algorithms w . r . t change in token state to kick in . 
 - * / 
 - private boolean isLoadState _ = false ; 
 / * Timer is used to disseminate load information * / 
 private Timer loadTimer _ = new Timer ( false ) ; 
 
 @ @ - 298 , 7 + 283 , 6 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 public StorageService ( ) 
 { 
 init ( ) ; 
 - uptime _ = System . currentTimeMillis ( ) ; 
 storageLoadBalancer _ = new StorageLoadBalancer ( this ) ; 
 endPointSnitch _ = new EndPointSnitch ( ) ; 
 
 @ @ - 768 , 7 + 752 , 6 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 { 
 	 if ( keys . length > 0 ) 
 	 { 
 - 	 isLoadState _ = true ; 
 Token token = tokenMetadata _ . getToken ( StorageService . tcpAddr _ ) ; 
 	 Map < Token , EndPoint > tokenToEndPointMap = tokenMetadata _ . cloneTokenEndPointMap ( ) ; 
 	 Token [ ] tokens = tokenToEndPointMap . keySet ( ) . toArray ( new Token [ tokenToEndPointMap . keySet ( ) . size ( ) ] ) ; 
 @ @ - 779 , 15 + 762 , 6 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 	 updateToken ( newToken ) ; 
 	 } 
 } 
 - 
 - / * 
 - * This is used to indicate that this node is done 
 - * with the loading of data . 
 - * / 
 - public void resetLoadState ( ) 
 - { 
 - isLoadState _ = false ; 
 - } 
 
 / * * 
 * This method takes a colon separated string of nodes that need 
 diff - - git a / src / org / apache / cassandra / utils / FBUtilities . java b / src / org / apache / cassandra / utils / FBUtilities . java 
 index 3f14c06 . . b6b6802 100644 
 - - - a / src / org / apache / cassandra / utils / FBUtilities . java 
 + + + b / src / org / apache / cassandra / utils / FBUtilities . java 
 @ @ - 50 , 7 + 50 , 6 @ @ public class FBUtilities 
 { 
 
 private static InetAddress localInetAddress _ ; 
 - private static String host _ ; 
 
 public static String getTimestamp ( ) 
 {
