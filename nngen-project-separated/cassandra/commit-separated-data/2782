BLEU SCORE: 0.008769706971774593

TEST MSG: Fix potential loss of 2ndary index entry during compaction
GENERATED MSG: build changes to run serialization tests . patch by gdusbabek , reviewed by jbellis . CASSANDRA - 1923

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 57fbe28 . . 13b4c5b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> * sstables from stalled repair sessions can resurrect deleted data ( CASSANDRA - 6503 ) <nl> * Switch stress to use ITransportFactory ( CASSANDRA - 6641 ) <nl> * Fix IllegalArgumentException during prepare ( CASSANDRA - 6592 ) <nl> + * Fix possible loss of 2ndary index entries during compaction ( CASSANDRA - 6517 ) <nl> Merged from 1 . 2 : <nl> * fsync compression metadata ( CASSANDRA - 6531 ) <nl> * Validate CF existence on execution for prepared statement ( CASSANDRA - 6535 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java b / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java <nl> index d45bffa . . db72847 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java <nl> @ @ - 126 , 7 + 126 , 7 @ @ public class PrecompactedRow extends AbstractCompactedRow <nl> / / notify the index that the column has been overwritten if the value being reduced has been <nl> / / superceded by another directly , or indirectly by a range tombstone <nl> if ( ( ! column . isMarkedForDelete ( System . currentTimeMillis ( ) ) & & ! container . getColumn ( column . name ( ) ) . equals ( column ) ) <nl> - | | returnCF . deletionInfo ( ) . isDeleted ( column . name ( ) , CompactionManager . NO _ GC ) ) <nl> + | | returnCF . deletionInfo ( ) . isDeleted ( column ) ) <nl> { <nl> indexer . remove ( column ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java b / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java <nl> index 731b364 . . d66f6db 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . io . sstable . SSTableReader ; <nl> import org . apache . cassandra . thrift . IndexType ; <nl> <nl> + import org . junit . Ignore ; <nl> import org . junit . Test ; <nl> <nl> import org . apache . cassandra . SchemaLoader ; <nl> @ @ - 303 , 6 + 304 , 64 @ @ public class RangeTombstoneTest extends SchemaLoader <nl> assertEquals ( index . deletes . get ( 0 ) , index . inserts . get ( 0 ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testOverwritesToDeletedColumns ( ) throws Exception <nl> + { <nl> + Keyspace table = Keyspace . open ( KSNAME ) ; <nl> + ColumnFamilyStore cfs = table . getColumnFamilyStore ( CFNAME ) ; <nl> + ByteBuffer key = ByteBufferUtil . bytes ( " k6 " ) ; <nl> + ByteBuffer indexedColumnName = ByteBufferUtil . bytes ( 1 ) ; <nl> + <nl> + cfs . truncateBlocking ( ) ; <nl> + cfs . disableAutoCompaction ( ) ; <nl> + cfs . setCompactionStrategyClass ( SizeTieredCompactionStrategy . class . getCanonicalName ( ) ) ; <nl> + if ( cfs . indexManager . getIndexForColumn ( indexedColumnName ) = = null ) <nl> + { <nl> + ColumnDefinition cd = new ColumnDefinition ( indexedColumnName , <nl> + cfs . getComparator ( ) , <nl> + IndexType . CUSTOM , <nl> + ImmutableMap . of ( SecondaryIndex . CUSTOM _ INDEX _ OPTION _ NAME , TestIndex . class . getName ( ) ) , <nl> + " test _ index " , <nl> + 0 , <nl> + null ) ; <nl> + cfs . indexManager . addIndexedColumn ( cd ) ; <nl> + } <nl> + <nl> + TestIndex index = ( ( TestIndex ) cfs . indexManager . getIndexForColumn ( indexedColumnName ) ) ; <nl> + index . resetCounts ( ) ; <nl> + <nl> + RowMutation rm = new RowMutation ( KSNAME , key ) ; <nl> + add ( rm , 1 , 0 ) ; <nl> + rm . apply ( ) ; <nl> + <nl> + / / add a RT which hides the column we just inserted <nl> + rm = new RowMutation ( KSNAME , key ) ; <nl> + ColumnFamily cf = rm . addOrGet ( CFNAME ) ; <nl> + delete ( cf , 0 , 1 , 1 ) ; <nl> + rm . apply ( ) ; <nl> + <nl> + / / now re - insert that column <nl> + rm = new RowMutation ( KSNAME , key ) ; <nl> + add ( rm , 1 , 2 ) ; <nl> + rm . apply ( ) ; <nl> + <nl> + cfs . forceBlockingFlush ( ) ; <nl> + <nl> + / / We should have 2 updates to the indexed " 1 " column <nl> + assertEquals ( 2 , index . inserts . size ( ) ) ; <nl> + <nl> + CompactionManager . instance . performMaximal ( cfs ) ; <nl> + <nl> + / / verify that the " 1 " indexed column removed from the index twice : <nl> + / / the first time by processing the RT , the second time by the <nl> + / / re - indexing caused by the second insertion . This second write <nl> + / / deletes from the 2i because the original column was still in the <nl> + / / main cf ' s memtable ( shadowed by the RT ) . One thing we ' re checking <nl> + / / for here is that there wasn ' t an additional , bogus delete issued <nl> + / / to the 2i ( CASSANDRA - 6517 ) <nl> + assertEquals ( 2 , index . deletes . size ( ) ) ; <nl> + } <nl> + <nl> private void runCompactionWithRangeTombstoneAndCheckSecondaryIndex ( ) throws Exception <nl> { <nl> Keyspace table = Keyspace . open ( KSNAME ) ;
NEAREST DIFF (one line): diff - - git a / conf / cassandra - env . sh b / conf / cassandra - env . sh <nl> index a762126 . . 9f25f24 100644 <nl> - - - a / conf / cassandra - env . sh <nl> + + + b / conf / cassandra - env . sh <nl> @ @ - 19 , 7 + 19 , 7 @ @ calculate _ heap _ sizes ( ) <nl> case " ` uname ` " in <nl> Linux ) <nl> system _ memory _ in _ mb = ` free - m | awk ' / Mem : / { print $ 2 } ' ` <nl> - system _ cpu _ cores = ` cat / proc / cpuinfo | egrep ' ^ processor ( \ s | \ t ) + : . * ' | wc - l ` <nl> + system _ cpu _ cores = ` egrep - c ' processor ( [ [ : space : ] ] + ) : . * ' / proc / cpuinfo ` <nl> break <nl> ; ; <nl> FreeBSD )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 57fbe28 . . 13b4c5b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 * sstables from stalled repair sessions can resurrect deleted data ( CASSANDRA - 6503 ) 
 * Switch stress to use ITransportFactory ( CASSANDRA - 6641 ) 
 * Fix IllegalArgumentException during prepare ( CASSANDRA - 6592 ) 
 + * Fix possible loss of 2ndary index entries during compaction ( CASSANDRA - 6517 ) 
 Merged from 1 . 2 : 
 * fsync compression metadata ( CASSANDRA - 6531 ) 
 * Validate CF existence on execution for prepared statement ( CASSANDRA - 6535 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java b / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java 
 index d45bffa . . db72847 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java 
 @ @ - 126 , 7 + 126 , 7 @ @ public class PrecompactedRow extends AbstractCompactedRow 
 / / notify the index that the column has been overwritten if the value being reduced has been 
 / / superceded by another directly , or indirectly by a range tombstone 
 if ( ( ! column . isMarkedForDelete ( System . currentTimeMillis ( ) ) & & ! container . getColumn ( column . name ( ) ) . equals ( column ) ) 
 - | | returnCF . deletionInfo ( ) . isDeleted ( column . name ( ) , CompactionManager . NO _ GC ) ) 
 + | | returnCF . deletionInfo ( ) . isDeleted ( column ) ) 
 { 
 indexer . remove ( column ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java b / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java 
 index 731b364 . . d66f6db 100644 
 - - - a / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . io . sstable . SSTableReader ; 
 import org . apache . cassandra . thrift . IndexType ; 
 
 + import org . junit . Ignore ; 
 import org . junit . Test ; 
 
 import org . apache . cassandra . SchemaLoader ; 
 @ @ - 303 , 6 + 304 , 64 @ @ public class RangeTombstoneTest extends SchemaLoader 
 assertEquals ( index . deletes . get ( 0 ) , index . inserts . get ( 0 ) ) ; 
 } 
 
 + @ Test 
 + public void testOverwritesToDeletedColumns ( ) throws Exception 
 + { 
 + Keyspace table = Keyspace . open ( KSNAME ) ; 
 + ColumnFamilyStore cfs = table . getColumnFamilyStore ( CFNAME ) ; 
 + ByteBuffer key = ByteBufferUtil . bytes ( " k6 " ) ; 
 + ByteBuffer indexedColumnName = ByteBufferUtil . bytes ( 1 ) ; 
 + 
 + cfs . truncateBlocking ( ) ; 
 + cfs . disableAutoCompaction ( ) ; 
 + cfs . setCompactionStrategyClass ( SizeTieredCompactionStrategy . class . getCanonicalName ( ) ) ; 
 + if ( cfs . indexManager . getIndexForColumn ( indexedColumnName ) = = null ) 
 + { 
 + ColumnDefinition cd = new ColumnDefinition ( indexedColumnName , 
 + cfs . getComparator ( ) , 
 + IndexType . CUSTOM , 
 + ImmutableMap . of ( SecondaryIndex . CUSTOM _ INDEX _ OPTION _ NAME , TestIndex . class . getName ( ) ) , 
 + " test _ index " , 
 + 0 , 
 + null ) ; 
 + cfs . indexManager . addIndexedColumn ( cd ) ; 
 + } 
 + 
 + TestIndex index = ( ( TestIndex ) cfs . indexManager . getIndexForColumn ( indexedColumnName ) ) ; 
 + index . resetCounts ( ) ; 
 + 
 + RowMutation rm = new RowMutation ( KSNAME , key ) ; 
 + add ( rm , 1 , 0 ) ; 
 + rm . apply ( ) ; 
 + 
 + / / add a RT which hides the column we just inserted 
 + rm = new RowMutation ( KSNAME , key ) ; 
 + ColumnFamily cf = rm . addOrGet ( CFNAME ) ; 
 + delete ( cf , 0 , 1 , 1 ) ; 
 + rm . apply ( ) ; 
 + 
 + / / now re - insert that column 
 + rm = new RowMutation ( KSNAME , key ) ; 
 + add ( rm , 1 , 2 ) ; 
 + rm . apply ( ) ; 
 + 
 + cfs . forceBlockingFlush ( ) ; 
 + 
 + / / We should have 2 updates to the indexed " 1 " column 
 + assertEquals ( 2 , index . inserts . size ( ) ) ; 
 + 
 + CompactionManager . instance . performMaximal ( cfs ) ; 
 + 
 + / / verify that the " 1 " indexed column removed from the index twice : 
 + / / the first time by processing the RT , the second time by the 
 + / / re - indexing caused by the second insertion . This second write 
 + / / deletes from the 2i because the original column was still in the 
 + / / main cf ' s memtable ( shadowed by the RT ) . One thing we ' re checking 
 + / / for here is that there wasn ' t an additional , bogus delete issued 
 + / / to the 2i ( CASSANDRA - 6517 ) 
 + assertEquals ( 2 , index . deletes . size ( ) ) ; 
 + } 
 + 
 private void runCompactionWithRangeTombstoneAndCheckSecondaryIndex ( ) throws Exception 
 { 
 Keyspace table = Keyspace . open ( KSNAME ) ;

NEAREST DIFF:
diff - - git a / conf / cassandra - env . sh b / conf / cassandra - env . sh 
 index a762126 . . 9f25f24 100644 
 - - - a / conf / cassandra - env . sh 
 + + + b / conf / cassandra - env . sh 
 @ @ - 19 , 7 + 19 , 7 @ @ calculate _ heap _ sizes ( ) 
 case " ` uname ` " in 
 Linux ) 
 system _ memory _ in _ mb = ` free - m | awk ' / Mem : / { print $ 2 } ' ` 
 - system _ cpu _ cores = ` cat / proc / cpuinfo | egrep ' ^ processor ( \ s | \ t ) + : . * ' | wc - l ` 
 + system _ cpu _ cores = ` egrep - c ' processor ( [ [ : space : ] ] + ) : . * ' / proc / cpuinfo ` 
 break 
 ; ; 
 FreeBSD )
