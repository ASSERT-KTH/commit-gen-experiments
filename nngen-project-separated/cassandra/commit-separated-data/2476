BLEU SCORE: 0.05341087579952926

TEST MSG: Make StreamSession more thread safe
GENERATED MSG: fix CME in StreamResultFuture

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / streaming / StreamSession . java b / src / java / org / apache / cassandra / streaming / StreamSession . java <nl> index 0ba41fb . . 30e3fa2 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamSession . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamSession . java <nl> @ @ - 20 , 11 + 20 , 9 @ @ package org . apache . cassandra . streaming ; <nl> import java . io . IOException ; <nl> import java . net . InetAddress ; <nl> import java . util . * ; <nl> - import java . util . concurrent . Future ; <nl> - import java . util . concurrent . TimeUnit ; <nl> + import java . util . concurrent . * ; <nl> <nl> - import com . google . common . collect . Iterables ; <nl> - import com . google . common . collect . Lists ; <nl> + import com . google . common . collect . * ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 123 , 11 + 121 , 11 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe <nl> private StreamResultFuture streamResult ; <nl> <nl> / / stream requests to send to the peer <nl> - private final List < StreamRequest > requests = new ArrayList < > ( ) ; <nl> + private final Set < StreamRequest > requests = Sets . newConcurrentHashSet ( ) ; <nl> / / streaming tasks are created and managed per ColumnFamily ID <nl> - private final Map < UUID , StreamTransferTask > transfers = new HashMap < > ( ) ; <nl> + private final Map < UUID , StreamTransferTask > transfers = new ConcurrentHashMap < > ( ) ; <nl> / / data receivers , filled after receiving prepare message <nl> - private final Map < UUID , StreamReceiveTask > receivers = new HashMap < > ( ) ; <nl> + private final Map < UUID , StreamReceiveTask > receivers = new ConcurrentHashMap < > ( ) ; <nl> private final StreamingMetrics metrics ; <nl> <nl> public final ConnectionHandler handler ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 3dc5e77 . . 5af4e2e 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 12 , 6 + 12 , 7 @ @ <nl> * Fix fat client schema pull NPE ( CASSANDRA - 6089 ) <nl> * Fix memtable flushing for indexed tables ( CASSANDRA - 6112 ) <nl> * Fix skipping columns with multiple slices ( CASSANDRA - 6119 ) <nl> + * Expose connected thrift + native client counts ( CASSANDRA - 5084 ) <nl> <nl> <nl> 1 . 2 . 10 <nl> diff - - git a / src / java / org / apache / cassandra / metrics / ClientMetrics . java b / src / java / org / apache / cassandra / metrics / ClientMetrics . java <nl> new file mode 100644 <nl> index 0000000 . . cb10ad5 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / metrics / ClientMetrics . java <nl> @ @ - 0 , 0 + 1 , 35 @ @ <nl> + package org . apache . cassandra . metrics ; <nl> + <nl> + import java . util . concurrent . Callable ; <nl> + <nl> + import com . yammer . metrics . Metrics ; <nl> + import com . yammer . metrics . core . Gauge ; <nl> + <nl> + public class ClientMetrics <nl> + { <nl> + private static final MetricNameFactory factory = new DefaultNameFactory ( " Client " ) ; <nl> + <nl> + public static final ClientMetrics instance = new ClientMetrics ( ) ; <nl> + <nl> + private ClientMetrics ( ) <nl> + { <nl> + } <nl> + <nl> + public void addCounter ( String name , final Callable < Integer > provider ) <nl> + { <nl> + Metrics . newGauge ( factory . createMetricName ( name ) , new Gauge < Integer > ( ) <nl> + { <nl> + public Integer value ( ) <nl> + { <nl> + try <nl> + { <nl> + return provider . call ( ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + } ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> index 1959815 . . 65ae177 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . io . UnsupportedEncodingException ; <nl> import java . nio . ByteBuffer ; <nl> import java . nio . charset . CharacterCodingException ; <nl> import java . util . * ; <nl> + import java . util . concurrent . Callable ; <nl> import java . util . concurrent . TimeoutException ; <nl> import java . util . zip . DataFormatException ; <nl> import java . util . zip . Inflater ; <nl> @ @ - 53 , 8 + 54 , 12 @ @ import org . apache . cassandra . exceptions . RequestValidationException ; <nl> import org . apache . cassandra . exceptions . UnauthorizedException ; <nl> import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> import org . apache . cassandra . locator . DynamicEndpointSnitch ; <nl> + import org . apache . cassandra . metrics . ClientMetrics ; <nl> import org . apache . cassandra . scheduler . IRequestScheduler ; <nl> - import org . apache . cassandra . service . * ; <nl> + import org . apache . cassandra . service . ClientState ; <nl> + import org . apache . cassandra . service . MigrationManager ; <nl> + import org . apache . cassandra . service . StorageProxy ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . tracing . Tracing ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . Pair ; <nl> @ @ - 80 , 6 + 85 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> public CassandraServer ( ) <nl> { <nl> requestScheduler = DatabaseDescriptor . getRequestScheduler ( ) ; <nl> + registerMetrics ( ) ; <nl> } <nl> <nl> public ThriftClientState state ( ) <nl> @ @ - 1877 , 5 + 1883 , 16 @ @ public class CassandraServer implements Cassandra . Iface <nl> return false ; <nl> } <nl> <nl> + private void registerMetrics ( ) <nl> + { <nl> + ClientMetrics . instance . addCounter ( " connectedThriftClients " , new Callable < Integer > ( ) <nl> + { <nl> + @ Override <nl> + public Integer call ( ) throws Exception <nl> + { <nl> + return ThriftSessionManager . instance . getConnectedClients ( ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> / / main method moved to CassandraDaemon <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / thrift / ThriftSessionManager . java b / src / java / org / apache / cassandra / thrift / ThriftSessionManager . java <nl> index bbc4bff . . 9a537e8 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / ThriftSessionManager . java <nl> + + + b / src / java / org / apache / cassandra / thrift / ThriftSessionManager . java <nl> @ @ - 73 , 4 + 73 , 9 @ @ public class ThriftSessionManager <nl> if ( logger . isTraceEnabled ( ) ) <nl> logger . trace ( " ClientState removed for socket addr { } " , socket ) ; <nl> } <nl> + <nl> + public int getConnectedClients ( ) <nl> + { <nl> + return activeSocketSessions . size ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java <nl> index 7400a8b . . 0ffb92b 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Server . java <nl> + + + b / src / java / org / apache / cassandra / transport / Server . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . net . InetAddress ; <nl> import java . net . InetSocketAddress ; <nl> import java . net . UnknownHostException ; <nl> import java . util . EnumMap ; <nl> + import java . util . concurrent . Callable ; <nl> import java . util . concurrent . Executors ; <nl> import java . util . concurrent . atomic . AtomicBoolean ; <nl> import javax . net . ssl . SSLContext ; <nl> @ @ - 32 , 19 + 33 , 12 @ @ import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . EncryptionOptions ; <nl> + import org . apache . cassandra . metrics . ClientMetrics ; <nl> import org . apache . cassandra . security . SSLFactory ; <nl> - import org . apache . cassandra . service . CassandraDaemon ; <nl> - import org . apache . cassandra . service . IEndpointLifecycleSubscriber ; <nl> - import org . apache . cassandra . service . IMigrationListener ; <nl> - import org . apache . cassandra . service . MigrationManager ; <nl> - import org . apache . cassandra . service . StorageService ; <nl> + import org . apache . cassandra . service . * ; <nl> import org . apache . cassandra . transport . messages . EventMessage ; <nl> import org . jboss . netty . bootstrap . ServerBootstrap ; <nl> - import org . jboss . netty . channel . Channel ; <nl> - import org . jboss . netty . channel . ChannelFactory ; <nl> - import org . jboss . netty . channel . ChannelPipeline ; <nl> - import org . jboss . netty . channel . ChannelPipelineFactory ; <nl> - import org . jboss . netty . channel . Channels ; <nl> + import org . jboss . netty . channel . * ; <nl> import org . jboss . netty . channel . group . ChannelGroup ; <nl> import org . jboss . netty . channel . group . DefaultChannelGroup ; <nl> import org . jboss . netty . channel . socket . nio . NioServerSocketChannelFactory ; <nl> @ @ - 76 , 6 + 70 , 7 @ @ public class Server implements CassandraDaemon . Server <nl> EventNotifier notifier = new EventNotifier ( this ) ; <nl> StorageService . instance . register ( notifier ) ; <nl> MigrationManager . instance . register ( notifier ) ; <nl> + registerMetrics ( ) ; <nl> } <nl> <nl> public Server ( String hostname , int port ) <nl> @ @ - 140 , 6 + 135 , 18 @ @ public class Server implements CassandraDaemon . Server <nl> connectionTracker . allChannels . add ( channel ) ; <nl> } <nl> <nl> + private void registerMetrics ( ) <nl> + { <nl> + ClientMetrics . instance . addCounter ( " connectedNativeClients " , new Callable < Integer > ( ) <nl> + { <nl> + @ Override <nl> + public Integer call ( ) throws Exception <nl> + { <nl> + return connectionTracker . getConnectedClients ( ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> private void close ( ) <nl> { <nl> / / Close opened connections <nl> @ @ - 187 , 6 + 194 , 16 @ @ public class Server implements CassandraDaemon . Server <nl> { <nl> allChannels . close ( ) . awaitUninterruptibly ( ) ; <nl> } <nl> + <nl> + public int getConnectedClients ( ) <nl> + { <nl> + / * <nl> + - When server is running : allChannels contains all clients ' connections ( channels ) <nl> + plus one additional channel used for the server ' s own bootstrap . <nl> + - When server is stopped : the size is 0 <nl> + * / <nl> + return allChannels . size ( ) ! = 0 ? allChannels . size ( ) - 1 : 0 ; <nl> + } <nl> } <nl> <nl> private static class PipelineFactory implements ChannelPipelineFactory

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / streaming / StreamSession . java b / src / java / org / apache / cassandra / streaming / StreamSession . java 
 index 0ba41fb . . 30e3fa2 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamSession . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamSession . java 
 @ @ - 20 , 11 + 20 , 9 @ @ package org . apache . cassandra . streaming ; 
 import java . io . IOException ; 
 import java . net . InetAddress ; 
 import java . util . * ; 
 - import java . util . concurrent . Future ; 
 - import java . util . concurrent . TimeUnit ; 
 + import java . util . concurrent . * ; 
 
 - import com . google . common . collect . Iterables ; 
 - import com . google . common . collect . Lists ; 
 + import com . google . common . collect . * ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 123 , 11 + 121 , 11 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe 
 private StreamResultFuture streamResult ; 
 
 / / stream requests to send to the peer 
 - private final List < StreamRequest > requests = new ArrayList < > ( ) ; 
 + private final Set < StreamRequest > requests = Sets . newConcurrentHashSet ( ) ; 
 / / streaming tasks are created and managed per ColumnFamily ID 
 - private final Map < UUID , StreamTransferTask > transfers = new HashMap < > ( ) ; 
 + private final Map < UUID , StreamTransferTask > transfers = new ConcurrentHashMap < > ( ) ; 
 / / data receivers , filled after receiving prepare message 
 - private final Map < UUID , StreamReceiveTask > receivers = new HashMap < > ( ) ; 
 + private final Map < UUID , StreamReceiveTask > receivers = new ConcurrentHashMap < > ( ) ; 
 private final StreamingMetrics metrics ; 
 
 public final ConnectionHandler handler ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 3dc5e77 . . 5af4e2e 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 12 , 6 + 12 , 7 @ @ 
 * Fix fat client schema pull NPE ( CASSANDRA - 6089 ) 
 * Fix memtable flushing for indexed tables ( CASSANDRA - 6112 ) 
 * Fix skipping columns with multiple slices ( CASSANDRA - 6119 ) 
 + * Expose connected thrift + native client counts ( CASSANDRA - 5084 ) 
 
 
 1 . 2 . 10 
 diff - - git a / src / java / org / apache / cassandra / metrics / ClientMetrics . java b / src / java / org / apache / cassandra / metrics / ClientMetrics . java 
 new file mode 100644 
 index 0000000 . . cb10ad5 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / metrics / ClientMetrics . java 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + package org . apache . cassandra . metrics ; 
 + 
 + import java . util . concurrent . Callable ; 
 + 
 + import com . yammer . metrics . Metrics ; 
 + import com . yammer . metrics . core . Gauge ; 
 + 
 + public class ClientMetrics 
 + { 
 + private static final MetricNameFactory factory = new DefaultNameFactory ( " Client " ) ; 
 + 
 + public static final ClientMetrics instance = new ClientMetrics ( ) ; 
 + 
 + private ClientMetrics ( ) 
 + { 
 + } 
 + 
 + public void addCounter ( String name , final Callable < Integer > provider ) 
 + { 
 + Metrics . newGauge ( factory . createMetricName ( name ) , new Gauge < Integer > ( ) 
 + { 
 + public Integer value ( ) 
 + { 
 + try 
 + { 
 + return provider . call ( ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + } ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 index 1959815 . . 65ae177 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . io . UnsupportedEncodingException ; 
 import java . nio . ByteBuffer ; 
 import java . nio . charset . CharacterCodingException ; 
 import java . util . * ; 
 + import java . util . concurrent . Callable ; 
 import java . util . concurrent . TimeoutException ; 
 import java . util . zip . DataFormatException ; 
 import java . util . zip . Inflater ; 
 @ @ - 53 , 8 + 54 , 12 @ @ import org . apache . cassandra . exceptions . RequestValidationException ; 
 import org . apache . cassandra . exceptions . UnauthorizedException ; 
 import org . apache . cassandra . io . util . DataOutputBuffer ; 
 import org . apache . cassandra . locator . DynamicEndpointSnitch ; 
 + import org . apache . cassandra . metrics . ClientMetrics ; 
 import org . apache . cassandra . scheduler . IRequestScheduler ; 
 - import org . apache . cassandra . service . * ; 
 + import org . apache . cassandra . service . ClientState ; 
 + import org . apache . cassandra . service . MigrationManager ; 
 + import org . apache . cassandra . service . StorageProxy ; 
 + import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . tracing . Tracing ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . Pair ; 
 @ @ - 80 , 6 + 85 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 public CassandraServer ( ) 
 { 
 requestScheduler = DatabaseDescriptor . getRequestScheduler ( ) ; 
 + registerMetrics ( ) ; 
 } 
 
 public ThriftClientState state ( ) 
 @ @ - 1877 , 5 + 1883 , 16 @ @ public class CassandraServer implements Cassandra . Iface 
 return false ; 
 } 
 
 + private void registerMetrics ( ) 
 + { 
 + ClientMetrics . instance . addCounter ( " connectedThriftClients " , new Callable < Integer > ( ) 
 + { 
 + @ Override 
 + public Integer call ( ) throws Exception 
 + { 
 + return ThriftSessionManager . instance . getConnectedClients ( ) ; 
 + } 
 + } ) ; 
 + } 
 / / main method moved to CassandraDaemon 
 } 
 diff - - git a / src / java / org / apache / cassandra / thrift / ThriftSessionManager . java b / src / java / org / apache / cassandra / thrift / ThriftSessionManager . java 
 index bbc4bff . . 9a537e8 100644 
 - - - a / src / java / org / apache / cassandra / thrift / ThriftSessionManager . java 
 + + + b / src / java / org / apache / cassandra / thrift / ThriftSessionManager . java 
 @ @ - 73 , 4 + 73 , 9 @ @ public class ThriftSessionManager 
 if ( logger . isTraceEnabled ( ) ) 
 logger . trace ( " ClientState removed for socket addr { } " , socket ) ; 
 } 
 + 
 + public int getConnectedClients ( ) 
 + { 
 + return activeSocketSessions . size ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java 
 index 7400a8b . . 0ffb92b 100644 
 - - - a / src / java / org / apache / cassandra / transport / Server . java 
 + + + b / src / java / org / apache / cassandra / transport / Server . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . net . InetAddress ; 
 import java . net . InetSocketAddress ; 
 import java . net . UnknownHostException ; 
 import java . util . EnumMap ; 
 + import java . util . concurrent . Callable ; 
 import java . util . concurrent . Executors ; 
 import java . util . concurrent . atomic . AtomicBoolean ; 
 import javax . net . ssl . SSLContext ; 
 @ @ - 32 , 19 + 33 , 12 @ @ import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . EncryptionOptions ; 
 + import org . apache . cassandra . metrics . ClientMetrics ; 
 import org . apache . cassandra . security . SSLFactory ; 
 - import org . apache . cassandra . service . CassandraDaemon ; 
 - import org . apache . cassandra . service . IEndpointLifecycleSubscriber ; 
 - import org . apache . cassandra . service . IMigrationListener ; 
 - import org . apache . cassandra . service . MigrationManager ; 
 - import org . apache . cassandra . service . StorageService ; 
 + import org . apache . cassandra . service . * ; 
 import org . apache . cassandra . transport . messages . EventMessage ; 
 import org . jboss . netty . bootstrap . ServerBootstrap ; 
 - import org . jboss . netty . channel . Channel ; 
 - import org . jboss . netty . channel . ChannelFactory ; 
 - import org . jboss . netty . channel . ChannelPipeline ; 
 - import org . jboss . netty . channel . ChannelPipelineFactory ; 
 - import org . jboss . netty . channel . Channels ; 
 + import org . jboss . netty . channel . * ; 
 import org . jboss . netty . channel . group . ChannelGroup ; 
 import org . jboss . netty . channel . group . DefaultChannelGroup ; 
 import org . jboss . netty . channel . socket . nio . NioServerSocketChannelFactory ; 
 @ @ - 76 , 6 + 70 , 7 @ @ public class Server implements CassandraDaemon . Server 
 EventNotifier notifier = new EventNotifier ( this ) ; 
 StorageService . instance . register ( notifier ) ; 
 MigrationManager . instance . register ( notifier ) ; 
 + registerMetrics ( ) ; 
 } 
 
 public Server ( String hostname , int port ) 
 @ @ - 140 , 6 + 135 , 18 @ @ public class Server implements CassandraDaemon . Server 
 connectionTracker . allChannels . add ( channel ) ; 
 } 
 
 + private void registerMetrics ( ) 
 + { 
 + ClientMetrics . instance . addCounter ( " connectedNativeClients " , new Callable < Integer > ( ) 
 + { 
 + @ Override 
 + public Integer call ( ) throws Exception 
 + { 
 + return connectionTracker . getConnectedClients ( ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 private void close ( ) 
 { 
 / / Close opened connections 
 @ @ - 187 , 6 + 194 , 16 @ @ public class Server implements CassandraDaemon . Server 
 { 
 allChannels . close ( ) . awaitUninterruptibly ( ) ; 
 } 
 + 
 + public int getConnectedClients ( ) 
 + { 
 + / * 
 + - When server is running : allChannels contains all clients ' connections ( channels ) 
 + plus one additional channel used for the server ' s own bootstrap . 
 + - When server is stopped : the size is 0 
 + * / 
 + return allChannels . size ( ) ! = 0 ? allChannels . size ( ) - 1 : 0 ; 
 + } 
 } 
 
 private static class PipelineFactory implements ChannelPipelineFactory
