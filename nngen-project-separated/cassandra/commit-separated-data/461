BLEU SCORE: 0.03817681337429048

TEST MSG: Make it possible to override MessagingService . Verb ids
GENERATED MSG: Always use RANGE _ SLICE verb for 3 . x messages

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 08826aa . . 6e11b7f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Make it possible to override MessagingService . Verb ids ( CASSANDRA - 13283 ) <nl> * Avoid synchronized on prepareForRepair in ActiveRepairService ( CASSANDRA - 9292 ) <nl> * Adds the ability to use uncompressed chunks in compressed files ( CASSANDRA - 10520 ) <nl> * Don ' t flush sstables when streaming for incremental repair ( CASSANDRA - 13226 ) <nl> diff - - git a / src / java / org / apache / cassandra / net / MessageIn . java b / src / java / org / apache / cassandra / net / MessageIn . java <nl> index 0de9520 . . 8774d38 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessageIn . java <nl> + + + b / src / java / org / apache / cassandra / net / MessageIn . java <nl> @ @ - 84 , 7 + 84 , 7 @ @ public class MessageIn < T > <nl> { <nl> InetAddress from = CompactEndpointSerializationHelper . deserialize ( in ) ; <nl> <nl> - MessagingService . Verb verb = MessagingService . verbValues [ in . readInt ( ) ] ; <nl> + MessagingService . Verb verb = MessagingService . Verb . fromId ( in . readInt ( ) ) ; <nl> int parameterCount = in . readInt ( ) ; <nl> Map < String , byte [ ] > parameters ; <nl> if ( parameterCount = = 0 ) <nl> diff - - git a / src / java / org / apache / cassandra / net / MessageOut . java b / src / java / org / apache / cassandra / net / MessageOut . java <nl> index 94019f2 . . a38aed5 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessageOut . java <nl> + + + b / src / java / org / apache / cassandra / net / MessageOut . java <nl> @ @ - 104 , 7 + 104 , 7 @ @ public class MessageOut < T > <nl> { <nl> CompactEndpointSerializationHelper . serialize ( from , out ) ; <nl> <nl> - out . writeInt ( verb . ordinal ( ) ) ; <nl> + out . writeInt ( verb . getId ( ) ) ; <nl> out . writeInt ( parameters . size ( ) ) ; <nl> for ( Map . Entry < String , byte [ ] > entry : parameters . entrySet ( ) ) <nl> { <nl> @ @ - 134 , 7 + 134 , 7 @ @ public class MessageOut < T > <nl> { <nl> int size = CompactEndpointSerializationHelper . serializedSize ( from ) ; <nl> <nl> - size + = TypeSizes . sizeof ( verb . ordinal ( ) ) ; <nl> + size + = TypeSizes . sizeof ( verb . getId ( ) ) ; <nl> size + = TypeSizes . sizeof ( parameters . size ( ) ) ; <nl> for ( Map . Entry < String , byte [ ] > entry : parameters . entrySet ( ) ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index ef521ef . . 5ce6628 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 45 , 6 + 45 , 8 @ @ import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import com . carrotsearch . hppc . IntObjectMap ; <nl> + import com . carrotsearch . hppc . IntObjectOpenHashMap ; <nl> import org . apache . cassandra . concurrent . ExecutorLocals ; <nl> import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> import org . apache . cassandra . concurrent . Stage ; <nl> @ @ - 232 , 13 + 234 , 42 @ @ public final class MessagingService implements MessagingServiceMBean <nl> UNUSED _ 5 , <nl> ; <nl> <nl> + private int id ; <nl> + Verb ( ) <nl> + { <nl> + id = ordinal ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Unused , but it is an extension point for adding custom verbs <nl> + * @ param id <nl> + * / <nl> + Verb ( int id ) <nl> + { <nl> + this . id = id ; <nl> + } <nl> + <nl> public long getTimeout ( ) <nl> { <nl> return DatabaseDescriptor . getRpcTimeout ( ) ; <nl> } <nl> - } <nl> <nl> - public static final Verb [ ] verbValues = Verb . values ( ) ; <nl> + public int getId ( ) <nl> + { <nl> + return id ; <nl> + } <nl> + private static final IntObjectMap < Verb > idToVerbMap = new IntObjectOpenHashMap < > ( values ( ) . length ) ; <nl> + static <nl> + { <nl> + for ( Verb v : values ( ) ) <nl> + idToVerbMap . put ( v . getId ( ) , v ) ; <nl> + } <nl> + <nl> + public static Verb fromId ( int id ) <nl> + { <nl> + return idToVerbMap . get ( id ) ; <nl> + } <nl> + } <nl> <nl> public static final EnumMap < MessagingService . Verb , Stage > verbStages = new EnumMap < MessagingService . Verb , Stage > ( MessagingService . Verb . class ) <nl> { {
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 08826aa . . 6e11b7f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Make it possible to override MessagingService . Verb ids ( CASSANDRA - 13283 ) 
 * Avoid synchronized on prepareForRepair in ActiveRepairService ( CASSANDRA - 9292 ) 
 * Adds the ability to use uncompressed chunks in compressed files ( CASSANDRA - 10520 ) 
 * Don ' t flush sstables when streaming for incremental repair ( CASSANDRA - 13226 ) 
 diff - - git a / src / java / org / apache / cassandra / net / MessageIn . java b / src / java / org / apache / cassandra / net / MessageIn . java 
 index 0de9520 . . 8774d38 100644 
 - - - a / src / java / org / apache / cassandra / net / MessageIn . java 
 + + + b / src / java / org / apache / cassandra / net / MessageIn . java 
 @ @ - 84 , 7 + 84 , 7 @ @ public class MessageIn < T > 
 { 
 InetAddress from = CompactEndpointSerializationHelper . deserialize ( in ) ; 
 
 - MessagingService . Verb verb = MessagingService . verbValues [ in . readInt ( ) ] ; 
 + MessagingService . Verb verb = MessagingService . Verb . fromId ( in . readInt ( ) ) ; 
 int parameterCount = in . readInt ( ) ; 
 Map < String , byte [ ] > parameters ; 
 if ( parameterCount = = 0 ) 
 diff - - git a / src / java / org / apache / cassandra / net / MessageOut . java b / src / java / org / apache / cassandra / net / MessageOut . java 
 index 94019f2 . . a38aed5 100644 
 - - - a / src / java / org / apache / cassandra / net / MessageOut . java 
 + + + b / src / java / org / apache / cassandra / net / MessageOut . java 
 @ @ - 104 , 7 + 104 , 7 @ @ public class MessageOut < T > 
 { 
 CompactEndpointSerializationHelper . serialize ( from , out ) ; 
 
 - out . writeInt ( verb . ordinal ( ) ) ; 
 + out . writeInt ( verb . getId ( ) ) ; 
 out . writeInt ( parameters . size ( ) ) ; 
 for ( Map . Entry < String , byte [ ] > entry : parameters . entrySet ( ) ) 
 { 
 @ @ - 134 , 7 + 134 , 7 @ @ public class MessageOut < T > 
 { 
 int size = CompactEndpointSerializationHelper . serializedSize ( from ) ; 
 
 - size + = TypeSizes . sizeof ( verb . ordinal ( ) ) ; 
 + size + = TypeSizes . sizeof ( verb . getId ( ) ) ; 
 size + = TypeSizes . sizeof ( parameters . size ( ) ) ; 
 for ( Map . Entry < String , byte [ ] > entry : parameters . entrySet ( ) ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index ef521ef . . 5ce6628 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 45 , 6 + 45 , 8 @ @ import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import com . carrotsearch . hppc . IntObjectMap ; 
 + import com . carrotsearch . hppc . IntObjectOpenHashMap ; 
 import org . apache . cassandra . concurrent . ExecutorLocals ; 
 import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 import org . apache . cassandra . concurrent . Stage ; 
 @ @ - 232 , 13 + 234 , 42 @ @ public final class MessagingService implements MessagingServiceMBean 
 UNUSED _ 5 , 
 ; 
 
 + private int id ; 
 + Verb ( ) 
 + { 
 + id = ordinal ( ) ; 
 + } 
 + 
 + / * * 
 + * Unused , but it is an extension point for adding custom verbs 
 + * @ param id 
 + * / 
 + Verb ( int id ) 
 + { 
 + this . id = id ; 
 + } 
 + 
 public long getTimeout ( ) 
 { 
 return DatabaseDescriptor . getRpcTimeout ( ) ; 
 } 
 - } 
 
 - public static final Verb [ ] verbValues = Verb . values ( ) ; 
 + public int getId ( ) 
 + { 
 + return id ; 
 + } 
 + private static final IntObjectMap < Verb > idToVerbMap = new IntObjectOpenHashMap < > ( values ( ) . length ) ; 
 + static 
 + { 
 + for ( Verb v : values ( ) ) 
 + idToVerbMap . put ( v . getId ( ) , v ) ; 
 + } 
 + 
 + public static Verb fromId ( int id ) 
 + { 
 + return idToVerbMap . get ( id ) ; 
 + } 
 + } 
 
 public static final EnumMap < MessagingService . Verb , Stage > verbStages = new EnumMap < MessagingService . Verb , Stage > ( MessagingService . Verb . class ) 
 { {

NEAREST DIFF:
ELIMINATEDSENTENCE
