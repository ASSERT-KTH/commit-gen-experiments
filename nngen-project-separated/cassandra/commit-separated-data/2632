BLEU SCORE: 0.021906016114066472

TEST MSG: remove dead code
GENERATED MSG: add test for ReplicaPlacementStrategy covering both Random and OrderPreserving partitioners

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / locator / OldNetworkTopologyStrategyTest . java b / test / unit / org / apache / cassandra / locator / OldNetworkTopologyStrategyTest . java <nl> index 14cb54d . . 4ae21c0 100644 <nl> - - - a / test / unit / org / apache / cassandra / locator / OldNetworkTopologyStrategyTest . java <nl> + + + b / test / unit / org / apache / cassandra / locator / OldNetworkTopologyStrategyTest . java <nl> @ @ - 43 , 7 + 43 , 6 @ @ import org . junit . Test ; <nl> <nl> public class OldNetworkTopologyStrategyTest extends SchemaLoader <nl> { <nl> - private List < Token > endpointTokens ; <nl> private List < Token > keyTokens ; <nl> private TokenMetadata tmd ; <nl> private Map < String , ArrayList < InetAddress > > expectedResults ; <nl> @ @ - 51 , 7 + 50 , 6 @ @ public class OldNetworkTopologyStrategyTest extends SchemaLoader <nl> @ Before <nl> public void init ( ) <nl> { <nl> - endpointTokens = new ArrayList < Token > ( ) ; <nl> keyTokens = new ArrayList < Token > ( ) ; <nl> tmd = new TokenMetadata ( ) ; <nl> expectedResults = new HashMap < String , ArrayList < InetAddress > > ( ) ; <nl> @ @ - 145 , 7 + 143 , 6 @ @ public class OldNetworkTopologyStrategyTest extends SchemaLoader <nl> private void addEndpoint ( String endpointTokenID , String keyTokenID , String endpointAddress ) throws UnknownHostException <nl> { <nl> BigIntegerToken endpointToken = new BigIntegerToken ( endpointTokenID ) ; <nl> - endpointTokens . add ( endpointToken ) ; <nl> <nl> BigIntegerToken keyToken = new BigIntegerToken ( keyTokenID ) ; <nl> keyTokens . add ( keyToken ) ;
NEAREST DIFF (one line): diff - - git a / src / org / apache / cassandra / dht / StringToken . java b / src / org / apache / cassandra / dht / StringToken . java <nl> index a1939dd . . 5b6ebe7 100644 <nl> - - - a / src / org / apache / cassandra / dht / StringToken . java <nl> + + + b / src / org / apache / cassandra / dht / StringToken . java <nl> @ @ - 2 , 7 + 2 , 7 @ @ package org . apache . cassandra . dht ; <nl> <nl> public class StringToken extends Token < String > <nl> { <nl> - protected StringToken ( String token ) <nl> + public StringToken ( String token ) <nl> { <nl> super ( token ) ; <nl> } <nl> diff - - git a / src / org / apache / cassandra / service / StorageService . java b / src / org / apache / cassandra / service / StorageService . java <nl> index c6e6fdc . . 5635d6d 100644 <nl> - - - a / src / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / org / apache / cassandra / service / StorageService . java <nl> @ @ - 867 , 6 + 867 , 9 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> <nl> public String getToken ( EndPoint ep ) <nl> { <nl> + / / render a String representation of the Token corresponding to this endpoint <nl> + / / for a human - facing UI . If there is no such Token then we use " " since <nl> + / / it is not a valid value either for BigIntegerToken or StringToken . <nl> EndPoint ep2 = new EndPoint ( ep . getHost ( ) , DatabaseDescriptor . getStoragePort ( ) ) ; <nl> Token token = tokenMetadata _ . getToken ( ep2 ) ; <nl> / / if there is no token for an endpoint , return an empty string to denote that <nl> diff - - git a / test / org / apache / cassandra / locator / RackUnawareStrategyTest . java b / test / org / apache / cassandra / locator / RackUnawareStrategyTest . java <nl> new file mode 100644 <nl> index 0000000 . . fcf508c <nl> - - - / dev / null <nl> + + + b / test / org / apache / cassandra / locator / RackUnawareStrategyTest . java <nl> @ @ - 0 , 0 + 1 , 72 @ @ <nl> + package org . apache . cassandra . locator ; <nl> + <nl> + import java . util . List ; <nl> + import java . util . ArrayList ; <nl> + import java . math . BigInteger ; <nl> + <nl> + import org . testng . annotations . Test ; <nl> + import org . apache . cassandra . dht . IPartitioner ; <nl> + import org . apache . cassandra . dht . RandomPartitioner ; <nl> + import org . apache . cassandra . dht . BigIntegerToken ; <nl> + import org . apache . cassandra . dht . Token ; <nl> + import org . apache . cassandra . dht . OrderPreservingPartitioner ; <nl> + import org . apache . cassandra . dht . StringToken ; <nl> + import org . apache . cassandra . net . EndPoint ; <nl> + <nl> + public class RackUnawareStrategyTest <nl> + { <nl> + @ Test <nl> + public void testBigIntegerStorageEndPoints ( ) <nl> + { <nl> + TokenMetadata tmd = new TokenMetadata ( ) ; <nl> + IPartitioner partitioner = new RandomPartitioner ( ) ; <nl> + IReplicaPlacementStrategy strategy = new RackUnawareStrategy ( tmd , partitioner , 3 , 7000 ) ; <nl> + <nl> + List < Token > endPointTokens = new ArrayList < Token > ( ) ; <nl> + List < Token > keyTokens = new ArrayList < Token > ( ) ; <nl> + for ( int i = 0 ; i < 5 ; i + + ) { <nl> + endPointTokens . add ( new BigIntegerToken ( String . valueOf ( 10 * i ) ) ) ; <nl> + keyTokens . add ( new BigIntegerToken ( String . valueOf ( 10 * i + 5 ) ) ) ; <nl> + } <nl> + testGetStorageEndPoints ( tmd , strategy , endPointTokens . toArray ( new Token [ 0 ] ) , keyTokens . toArray ( new Token [ 0 ] ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testStringStorageEndPoints ( ) <nl> + { <nl> + TokenMetadata tmd = new TokenMetadata ( ) ; <nl> + IPartitioner partitioner = new OrderPreservingPartitioner ( ) ; <nl> + IReplicaPlacementStrategy strategy = new RackUnawareStrategy ( tmd , partitioner , 3 , 7000 ) ; <nl> + <nl> + List < Token > endPointTokens = new ArrayList < Token > ( ) ; <nl> + List < Token > keyTokens = new ArrayList < Token > ( ) ; <nl> + for ( int i = 0 ; i < 5 ; i + + ) { <nl> + endPointTokens . add ( new StringToken ( String . valueOf ( ( char ) ( ' a ' + i * 2 ) ) ) ) ; <nl> + keyTokens . add ( partitioner . getTokenForKey ( String . valueOf ( ( char ) ( ' a ' + i * 2 + 1 ) ) ) ) ; <nl> + } <nl> + testGetStorageEndPoints ( tmd , strategy , endPointTokens . toArray ( new Token [ 0 ] ) , keyTokens . toArray ( new Token [ 0 ] ) ) ; <nl> + } <nl> + <nl> + / / given a list of endpoint tokens , and a set of key tokens falling between the endpoint tokens , <nl> + / / make sure that the Strategy picks the right endpoints for the keys . <nl> + private void testGetStorageEndPoints ( TokenMetadata tmd , IReplicaPlacementStrategy strategy , Token [ ] endPointTokens , Token [ ] keyTokens ) <nl> + { <nl> + List < EndPoint > hosts = new ArrayList < EndPoint > ( ) ; <nl> + for ( int i = 0 ; i < endPointTokens . length ; i + + ) <nl> + { <nl> + EndPoint ep = new EndPoint ( String . valueOf ( i ) , 7001 ) ; <nl> + tmd . update ( endPointTokens [ i ] , ep ) ; <nl> + hosts . add ( ep ) ; <nl> + } <nl> + <nl> + for ( int i = 0 ; i < keyTokens . length ; i + + ) <nl> + { <nl> + EndPoint [ ] endPoints = strategy . getStorageEndPoints ( keyTokens [ i ] ) ; <nl> + assert endPoints . length = = 3 ; <nl> + for ( int j = 0 ; j < endPoints . length ; j + + ) <nl> + { <nl> + assert endPoints [ j ] = = hosts . get ( ( i + j + 1 ) % hosts . size ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> + }

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / locator / OldNetworkTopologyStrategyTest . java b / test / unit / org / apache / cassandra / locator / OldNetworkTopologyStrategyTest . java 
 index 14cb54d . . 4ae21c0 100644 
 - - - a / test / unit / org / apache / cassandra / locator / OldNetworkTopologyStrategyTest . java 
 + + + b / test / unit / org / apache / cassandra / locator / OldNetworkTopologyStrategyTest . java 
 @ @ - 43 , 7 + 43 , 6 @ @ import org . junit . Test ; 
 
 public class OldNetworkTopologyStrategyTest extends SchemaLoader 
 { 
 - private List < Token > endpointTokens ; 
 private List < Token > keyTokens ; 
 private TokenMetadata tmd ; 
 private Map < String , ArrayList < InetAddress > > expectedResults ; 
 @ @ - 51 , 7 + 50 , 6 @ @ public class OldNetworkTopologyStrategyTest extends SchemaLoader 
 @ Before 
 public void init ( ) 
 { 
 - endpointTokens = new ArrayList < Token > ( ) ; 
 keyTokens = new ArrayList < Token > ( ) ; 
 tmd = new TokenMetadata ( ) ; 
 expectedResults = new HashMap < String , ArrayList < InetAddress > > ( ) ; 
 @ @ - 145 , 7 + 143 , 6 @ @ public class OldNetworkTopologyStrategyTest extends SchemaLoader 
 private void addEndpoint ( String endpointTokenID , String keyTokenID , String endpointAddress ) throws UnknownHostException 
 { 
 BigIntegerToken endpointToken = new BigIntegerToken ( endpointTokenID ) ; 
 - endpointTokens . add ( endpointToken ) ; 
 
 BigIntegerToken keyToken = new BigIntegerToken ( keyTokenID ) ; 
 keyTokens . add ( keyToken ) ;

NEAREST DIFF:
diff - - git a / src / org / apache / cassandra / dht / StringToken . java b / src / org / apache / cassandra / dht / StringToken . java 
 index a1939dd . . 5b6ebe7 100644 
 - - - a / src / org / apache / cassandra / dht / StringToken . java 
 + + + b / src / org / apache / cassandra / dht / StringToken . java 
 @ @ - 2 , 7 + 2 , 7 @ @ package org . apache . cassandra . dht ; 
 
 public class StringToken extends Token < String > 
 { 
 - protected StringToken ( String token ) 
 + public StringToken ( String token ) 
 { 
 super ( token ) ; 
 } 
 diff - - git a / src / org / apache / cassandra / service / StorageService . java b / src / org / apache / cassandra / service / StorageService . java 
 index c6e6fdc . . 5635d6d 100644 
 - - - a / src / org / apache / cassandra / service / StorageService . java 
 + + + b / src / org / apache / cassandra / service / StorageService . java 
 @ @ - 867 , 6 + 867 , 9 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 
 public String getToken ( EndPoint ep ) 
 { 
 + / / render a String representation of the Token corresponding to this endpoint 
 + / / for a human - facing UI . If there is no such Token then we use " " since 
 + / / it is not a valid value either for BigIntegerToken or StringToken . 
 EndPoint ep2 = new EndPoint ( ep . getHost ( ) , DatabaseDescriptor . getStoragePort ( ) ) ; 
 Token token = tokenMetadata _ . getToken ( ep2 ) ; 
 / / if there is no token for an endpoint , return an empty string to denote that 
 diff - - git a / test / org / apache / cassandra / locator / RackUnawareStrategyTest . java b / test / org / apache / cassandra / locator / RackUnawareStrategyTest . java 
 new file mode 100644 
 index 0000000 . . fcf508c 
 - - - / dev / null 
 + + + b / test / org / apache / cassandra / locator / RackUnawareStrategyTest . java 
 @ @ - 0 , 0 + 1 , 72 @ @ 
 + package org . apache . cassandra . locator ; 
 + 
 + import java . util . List ; 
 + import java . util . ArrayList ; 
 + import java . math . BigInteger ; 
 + 
 + import org . testng . annotations . Test ; 
 + import org . apache . cassandra . dht . IPartitioner ; 
 + import org . apache . cassandra . dht . RandomPartitioner ; 
 + import org . apache . cassandra . dht . BigIntegerToken ; 
 + import org . apache . cassandra . dht . Token ; 
 + import org . apache . cassandra . dht . OrderPreservingPartitioner ; 
 + import org . apache . cassandra . dht . StringToken ; 
 + import org . apache . cassandra . net . EndPoint ; 
 + 
 + public class RackUnawareStrategyTest 
 + { 
 + @ Test 
 + public void testBigIntegerStorageEndPoints ( ) 
 + { 
 + TokenMetadata tmd = new TokenMetadata ( ) ; 
 + IPartitioner partitioner = new RandomPartitioner ( ) ; 
 + IReplicaPlacementStrategy strategy = new RackUnawareStrategy ( tmd , partitioner , 3 , 7000 ) ; 
 + 
 + List < Token > endPointTokens = new ArrayList < Token > ( ) ; 
 + List < Token > keyTokens = new ArrayList < Token > ( ) ; 
 + for ( int i = 0 ; i < 5 ; i + + ) { 
 + endPointTokens . add ( new BigIntegerToken ( String . valueOf ( 10 * i ) ) ) ; 
 + keyTokens . add ( new BigIntegerToken ( String . valueOf ( 10 * i + 5 ) ) ) ; 
 + } 
 + testGetStorageEndPoints ( tmd , strategy , endPointTokens . toArray ( new Token [ 0 ] ) , keyTokens . toArray ( new Token [ 0 ] ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testStringStorageEndPoints ( ) 
 + { 
 + TokenMetadata tmd = new TokenMetadata ( ) ; 
 + IPartitioner partitioner = new OrderPreservingPartitioner ( ) ; 
 + IReplicaPlacementStrategy strategy = new RackUnawareStrategy ( tmd , partitioner , 3 , 7000 ) ; 
 + 
 + List < Token > endPointTokens = new ArrayList < Token > ( ) ; 
 + List < Token > keyTokens = new ArrayList < Token > ( ) ; 
 + for ( int i = 0 ; i < 5 ; i + + ) { 
 + endPointTokens . add ( new StringToken ( String . valueOf ( ( char ) ( ' a ' + i * 2 ) ) ) ) ; 
 + keyTokens . add ( partitioner . getTokenForKey ( String . valueOf ( ( char ) ( ' a ' + i * 2 + 1 ) ) ) ) ; 
 + } 
 + testGetStorageEndPoints ( tmd , strategy , endPointTokens . toArray ( new Token [ 0 ] ) , keyTokens . toArray ( new Token [ 0 ] ) ) ; 
 + } 
 + 
 + / / given a list of endpoint tokens , and a set of key tokens falling between the endpoint tokens , 
 + / / make sure that the Strategy picks the right endpoints for the keys . 
 + private void testGetStorageEndPoints ( TokenMetadata tmd , IReplicaPlacementStrategy strategy , Token [ ] endPointTokens , Token [ ] keyTokens ) 
 + { 
 + List < EndPoint > hosts = new ArrayList < EndPoint > ( ) ; 
 + for ( int i = 0 ; i < endPointTokens . length ; i + + ) 
 + { 
 + EndPoint ep = new EndPoint ( String . valueOf ( i ) , 7001 ) ; 
 + tmd . update ( endPointTokens [ i ] , ep ) ; 
 + hosts . add ( ep ) ; 
 + } 
 + 
 + for ( int i = 0 ; i < keyTokens . length ; i + + ) 
 + { 
 + EndPoint [ ] endPoints = strategy . getStorageEndPoints ( keyTokens [ i ] ) ; 
 + assert endPoints . length = = 3 ; 
 + for ( int j = 0 ; j < endPoints . length ; j + + ) 
 + { 
 + assert endPoints [ j ] = = hosts . get ( ( i + j + 1 ) % hosts . size ( ) ) ; 
 + } 
 + } 
 + } 
 + }
