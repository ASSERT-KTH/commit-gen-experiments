BLEU SCORE: 0.018738883683389617

TEST MSG: Fix dupes in DISTINCT queries on static cols w / paging
GENERATED MSG: Clone super column to avoid modifying them mid - flush

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 432750a . . 967b90c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 6 @ @ <nl> 2 . 0 . 11 : <nl> + * Fix duplicate results in DISTINCT queries on static columns with query <nl> + paging ( CASSANDRA - 8108 ) <nl> * Properly validate ascii and utf8 string literals in CQL queries ( CASSANDRA - 8101 ) <nl> * ( cqlsh ) Fix autocompletion for alter keyspace ( CASSANDRA - 8021 ) <nl> * Create backup directories for commitlog archiving during startup ( CASSANDRA - 8111 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java b / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java <nl> index ec229cb . . cdad0a5 100644 <nl> - - - a / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java <nl> + + + b / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java <nl> @ @ - 73 , 7 + 73 , 10 @ @ public class SliceQueryPager extends AbstractQueryPager implements SinglePartiti <nl> protected List < Row > queryNextPage ( int pageSize , ConsistencyLevel consistencyLevel , boolean localQuery ) <nl> throws RequestValidationException , RequestExecutionException <nl> { <nl> - SliceQueryFilter filter = command . filter . withUpdatedCount ( pageSize ) ; <nl> + / / For some queries , such as a DISTINCT query on static columns , the limit for slice queries will be lower <nl> + / / than the page size ( in the static example , it will be 1 ) . We use the min here to ensure we don ' t fetch <nl> + / / more rows than we ' re supposed to . See CASSANDRA - 8108 for more details . <nl> + SliceQueryFilter filter = command . filter . withUpdatedCount ( Math . min ( command . filter . count , pageSize ) ) ; <nl> if ( lastReturned ! = null ) <nl> filter = filter . withUpdatedStart ( lastReturned , cfm . comparator ) ; <nl>
NEAREST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / config / DefsTest . java b / test / unit / org / apache / cassandra / config / DefsTest . java <nl> index b724a6f . . d99f2f8 100644 <nl> - - - a / test / unit / org / apache / cassandra / config / DefsTest . java <nl> + + + b / test / unit / org / apache / cassandra / config / DefsTest . java <nl> @ @ - 436 , 15 + 436 , 15 @ @ public class DefsTest extends CleanupHelper <nl> assert ! success : " This mutation should have failed since the CF no longer exists . " ; <nl> <nl> / / reads should fail too . <nl> + boolean opened = false ; <nl> try <nl> { <nl> Table . open ( ks . name ) ; <nl> + opened = true ; <nl> } <nl> - catch ( Throwable th ) <nl> - { <nl> - / / this is what has historically happened when you try to open a table that doesn ' t exist . <nl> - assert th instanceof NullPointerException ; <nl> - } <nl> + catch ( Throwable th ) { } <nl> + if ( opened ) <nl> + throw new AssertionError ( " Opened dropped keyspace " ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 500 , 14 + 500 , 15 @ @ public class DefsTest extends CleanupHelper <nl> assert DefsTable . getFiles ( newKs . name , cfName ) . size ( ) > 0 ; <nl> <nl> / / read on old should fail . <nl> + boolean opened = false ; <nl> try <nl> { <nl> Table . open ( oldKs . name ) ; <nl> + opened = true ; <nl> } <nl> - catch ( Throwable th ) <nl> - { <nl> - assert th instanceof NullPointerException ; <nl> - } <nl> + catch ( Throwable th ) { } <nl> + if ( opened ) <nl> + throw new AssertionError ( " Opened dropped keyspace " ) ; <nl> <nl> / / write on old should fail . <nl> rm = new RowMutation ( oldKs . name , ByteBufferUtil . bytes ( " any key will do " ) ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 432750a . . 967b90c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 6 @ @ 
 2 . 0 . 11 : 
 + * Fix duplicate results in DISTINCT queries on static columns with query 
 + paging ( CASSANDRA - 8108 ) 
 * Properly validate ascii and utf8 string literals in CQL queries ( CASSANDRA - 8101 ) 
 * ( cqlsh ) Fix autocompletion for alter keyspace ( CASSANDRA - 8021 ) 
 * Create backup directories for commitlog archiving during startup ( CASSANDRA - 8111 ) 
 diff - - git a / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java b / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java 
 index ec229cb . . cdad0a5 100644 
 - - - a / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java 
 + + + b / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java 
 @ @ - 73 , 7 + 73 , 10 @ @ public class SliceQueryPager extends AbstractQueryPager implements SinglePartiti 
 protected List < Row > queryNextPage ( int pageSize , ConsistencyLevel consistencyLevel , boolean localQuery ) 
 throws RequestValidationException , RequestExecutionException 
 { 
 - SliceQueryFilter filter = command . filter . withUpdatedCount ( pageSize ) ; 
 + / / For some queries , such as a DISTINCT query on static columns , the limit for slice queries will be lower 
 + / / than the page size ( in the static example , it will be 1 ) . We use the min here to ensure we don ' t fetch 
 + / / more rows than we ' re supposed to . See CASSANDRA - 8108 for more details . 
 + SliceQueryFilter filter = command . filter . withUpdatedCount ( Math . min ( command . filter . count , pageSize ) ) ; 
 if ( lastReturned ! = null ) 
 filter = filter . withUpdatedStart ( lastReturned , cfm . comparator ) ; 


NEAREST DIFF:
diff - - git a / test / unit / org / apache / cassandra / config / DefsTest . java b / test / unit / org / apache / cassandra / config / DefsTest . java 
 index b724a6f . . d99f2f8 100644 
 - - - a / test / unit / org / apache / cassandra / config / DefsTest . java 
 + + + b / test / unit / org / apache / cassandra / config / DefsTest . java 
 @ @ - 436 , 15 + 436 , 15 @ @ public class DefsTest extends CleanupHelper 
 assert ! success : " This mutation should have failed since the CF no longer exists . " ; 
 
 / / reads should fail too . 
 + boolean opened = false ; 
 try 
 { 
 Table . open ( ks . name ) ; 
 + opened = true ; 
 } 
 - catch ( Throwable th ) 
 - { 
 - / / this is what has historically happened when you try to open a table that doesn ' t exist . 
 - assert th instanceof NullPointerException ; 
 - } 
 + catch ( Throwable th ) { } 
 + if ( opened ) 
 + throw new AssertionError ( " Opened dropped keyspace " ) ; 
 } 
 
 @ Test 
 @ @ - 500 , 14 + 500 , 15 @ @ public class DefsTest extends CleanupHelper 
 assert DefsTable . getFiles ( newKs . name , cfName ) . size ( ) > 0 ; 
 
 / / read on old should fail . 
 + boolean opened = false ; 
 try 
 { 
 Table . open ( oldKs . name ) ; 
 + opened = true ; 
 } 
 - catch ( Throwable th ) 
 - { 
 - assert th instanceof NullPointerException ; 
 - } 
 + catch ( Throwable th ) { } 
 + if ( opened ) 
 + throw new AssertionError ( " Opened dropped keyspace " ) ; 
 
 / / write on old should fail . 
 rm = new RowMutation ( oldKs . name , ByteBufferUtil . bytes ( " any key will do " ) ) ;
