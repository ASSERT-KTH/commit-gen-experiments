BLEU SCORE: 0.02477985347170534

TEST MSG: In JVM dtests need to clean up after instance shutdown
GENERATED MSG: add pending tasks mbean to all DebuggableTPE . clean out ad - hoc queue length logging .

TEST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index 3973689 . . 60b66fc 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 1300 , 6 + 1300 , 13 @ @ <nl> < jvmarg value = " - ea " / > <nl> < jvmarg value = " - Dcassandra . debugrefcount = true " / > <nl> < jvmarg value = " - Xss256k " / > <nl> + < ! - - When we do classloader manipulation SoftReferences can cause memory leaks <nl> + that can OOM our test runs . The next two settings informs our GC <nl> + algorithm to limit the metaspace size and clean up SoftReferences <nl> + more aggressively rather than waiting . See CASSANDRA - 14922 for more details . <nl> + - - > <nl> + < jvmarg value = " - XX : MaxMetaspaceSize = 256M " / > <nl> + < jvmarg value = " - XX : SoftRefLRUPolicyMSPerMB = 0 " / > <nl> < jvmarg value = " - Dcassandra . memtable _ row _ overhead _ computation _ step = 100 " / > <nl> < jvmarg value = " - Dcassandra . test . use _ prepared = $ { cassandra . test . use _ prepared } " / > <nl> < jvmarg value = " - Dcassandra . test . offsetseed = @ { poffset } " / > <nl> diff - - git a / ide / idea / workspace . xml b / ide / idea / workspace . xml <nl> index a2dea2a . . 150f1a0 100644 <nl> - - - a / ide / idea / workspace . xml <nl> + + + b / ide / idea / workspace . xml <nl> @ @ - 167 , 7 + 167 , 7 @ @ <nl> < option name = " MAIN _ CLASS _ NAME " value = " " / > <nl> < option name = " METHOD _ NAME " value = " " / > <nl> < option name = " TEST _ OBJECT " value = " class " / > <nl> - < option name = " VM _ PARAMETERS " value = " - Dcassandra . config = file : / / $ PROJECT _ DIR $ / test / conf / cassandra . yaml - Dlogback . configurationFile = file : / / $ PROJECT _ DIR $ / test / conf / logback - test . xml - Dcassandra . logdir = $ PROJECT _ DIR $ / build / test / logs - Djava . library . path = $ PROJECT _ DIR $ / lib / sigar - bin - Dlegacy - sstable - root = $ PROJECT _ DIR $ / test / data / legacy - sstables - Dinvalid - legacy - sstable - root = $ PROJECT _ DIR $ / test / data / invalid - legacy - sstables - Dcassandra . ring _ delay _ ms = 1000 - Dcassandra . skip _ sync = true - ea " / > <nl> + < option name = " VM _ PARAMETERS " value = " - Dcassandra . config = file : / / $ PROJECT _ DIR $ / test / conf / cassandra . yaml - Dlogback . configurationFile = file : / / $ PROJECT _ DIR $ / test / conf / logback - test . xml - Dcassandra . logdir = $ PROJECT _ DIR $ / build / test / logs - Djava . library . path = $ PROJECT _ DIR $ / lib / sigar - bin - Dlegacy - sstable - root = $ PROJECT _ DIR $ / test / data / legacy - sstables - Dinvalid - legacy - sstable - root = $ PROJECT _ DIR $ / test / data / invalid - legacy - sstables - Dcassandra . ring _ delay _ ms = 1000 - Dcassandra . skip _ sync = true - ea - XX : MaxMetaspaceSize = 256M - XX : SoftRefLRUPolicyMSPerMB = 0 " / > <nl> < option name = " PARAMETERS " value = " " / > <nl> < option name = " WORKING _ DIRECTORY " value = " " / > <nl> < option name = " ENV _ VARIABLES " / > <nl> diff - - git a / src / java / org / apache / cassandra / concurrent / ScheduledExecutors . java b / src / java / org / apache / cassandra / concurrent / ScheduledExecutors . java <nl> index e51e4c2 . . 5e3e5cf 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / ScheduledExecutors . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / ScheduledExecutors . java <nl> @ @ - 52 , 7 + 52 , 7 @ @ public class ScheduledExecutors <nl> { <nl> ExecutorService [ ] executors = new ExecutorService [ ] { scheduledFastTasks , scheduledTasks , nonPeriodicTasks , optionalTasks } ; <nl> for ( ExecutorService executor : executors ) <nl> - executor . shutdown ( ) ; <nl> + executor . shutdownNow ( ) ; <nl> for ( ExecutorService executor : executors ) <nl> executor . awaitTermination ( 60 , TimeUnit . SECONDS ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / hints / HintsBufferPool . java b / src / java / org / apache / cassandra / hints / HintsBufferPool . java <nl> index 25f9bc1 . . f705de1 100644 <nl> - - - a / src / java / org / apache / cassandra / hints / HintsBufferPool . java <nl> + + + b / src / java / org / apache / cassandra / hints / HintsBufferPool . java <nl> @ @ - 17 , 18 + 17 , 21 @ @ <nl> * / <nl> package org . apache . cassandra . hints ; <nl> <nl> + import java . io . Closeable ; <nl> + import java . io . IOException ; <nl> import java . util . UUID ; <nl> import java . util . concurrent . BlockingQueue ; <nl> import java . util . concurrent . LinkedBlockingQueue ; <nl> <nl> import org . apache . cassandra . config . Config ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> + import sun . nio . ch . DirectBuffer ; <nl> <nl> / * * <nl> * A primitive pool of { @ link HintsBuffer } buffers . Under normal conditions should only hold two buffers - the currently <nl> * written to one , and a reserve buffer to switch to when the first one is beyond capacity . <nl> * / <nl> - final class HintsBufferPool <nl> + final class HintsBufferPool implements Closeable <nl> { <nl> interface FlushCallback <nl> { <nl> @ @ - 129 , 4 + 132 , 9 @ @ final class HintsBufferPool <nl> allocatedBuffers + + ; <nl> return HintsBuffer . create ( bufferSize ) ; <nl> } <nl> + <nl> + public void close ( ) <nl> + { <nl> + currentBuffer . free ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / hints / HintsService . java b / src / java / org / apache / cassandra / hints / HintsService . java <nl> index 1a352c2 . . 1fd2d1a 100644 <nl> - - - a / src / java / org / apache / cassandra / hints / HintsService . java <nl> + + + b / src / java / org / apache / cassandra / hints / HintsService . java <nl> @ @ - 256 , 6 + 256 , 7 @ @ public final class HintsService implements HintsServiceMBean <nl> writeExecutor . shutdownBlocking ( ) ; <nl> <nl> HintsServiceDiagnostics . dispatchingShutdown ( this ) ; <nl> + bufferPool . close ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> index cf14c3d . . 01e30d6 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> @ @ - 2475 , 4 + 2475 , 13 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> return reader ; <nl> } <nl> <nl> + public static void shutdownBlocking ( ) throws InterruptedException <nl> + { <nl> + if ( syncExecutor ! = null ) <nl> + { <nl> + syncExecutor . shutdownNow ( ) ; <nl> + syncExecutor . awaitTermination ( 0 , TimeUnit . SECONDS ) ; <nl> + } <nl> + resetTidying ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index 761e210 . . f5c064e 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 1142 , 6 + 1142 , 8 @ @ public final class MessagingService implements MessagingServiceMBean <nl> <nl> if ( ! isTest ) <nl> NettyFactory . instance . close ( ) ; <nl> + <nl> + clearMessageSinks ( ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / net / async / NettyFactory . java b / src / java / org / apache / cassandra / net / async / NettyFactory . java <nl> index 2366722 . . 81de5d8 100644 <nl> - - - a / src / java / org / apache / cassandra / net / async / NettyFactory . java <nl> + + + b / src / java / org / apache / cassandra / net / async / NettyFactory . java <nl> @ @ - 389 , 7 + 389 , 7 @ @ public final class NettyFactory <nl> { <nl> EventLoopGroup [ ] groups = new EventLoopGroup [ ] { acceptGroup , outboundGroup , inboundGroup , streamingGroup } ; <nl> for ( EventLoopGroup group : groups ) <nl> - group . shutdownGracefully ( ) ; <nl> + group . shutdownGracefully ( 0 , 2 , TimeUnit . SECONDS ) ; <nl> for ( EventLoopGroup group : groups ) <nl> group . awaitTermination ( 60 , TimeUnit . SECONDS ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / NativeLibraryDarwin . java b / src / java / org / apache / cassandra / utils / NativeLibraryDarwin . java <nl> index d6f1a9e . . 6ed18d1 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / NativeLibraryDarwin . java <nl> + + + b / src / java / org / apache / cassandra / utils / NativeLibraryDarwin . java <nl> @ @ - 18 , 6 + 18 , 8 @ @ <nl> <nl> package org . apache . cassandra . utils ; <nl> <nl> + import java . util . Collections ; <nl> + <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 50 , 7 + 52 , 7 @ @ public class NativeLibraryDarwin implements NativeLibraryWrapper <nl> { <nl> try <nl> { <nl> - Native . register ( " c " ) ; <nl> + Native . register ( com . sun . jna . NativeLibrary . getInstance ( " c " , Collections . emptyMap ( ) ) ) ; <nl> available = true ; <nl> } <nl> catch ( NoClassDefFoundError e ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / NativeLibraryLinux . java b / src / java / org / apache / cassandra / utils / NativeLibraryLinux . java <nl> index b6667e4 . . 3f21d17 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / NativeLibraryLinux . java <nl> + + + b / src / java / org / apache / cassandra / utils / NativeLibraryLinux . java <nl> @ @ - 18 , 6 + 18 , 8 @ @ <nl> <nl> package org . apache . cassandra . utils ; <nl> <nl> + import java . util . Collections ; <nl> + <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 50 , 7 + 52 , 7 @ @ public class NativeLibraryLinux implements NativeLibraryWrapper <nl> { <nl> try <nl> { <nl> - Native . register ( " c " ) ; <nl> + Native . register ( com . sun . jna . NativeLibrary . getInstance ( " c " , Collections . emptyMap ( ) ) ) ; <nl> available = true ; <nl> } <nl> catch ( NoClassDefFoundError e ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / NativeLibraryWindows . java b / src / java / org / apache / cassandra / utils / NativeLibraryWindows . java <nl> index e6e823c . . b8304c7 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / NativeLibraryWindows . java <nl> + + + b / src / java / org / apache / cassandra / utils / NativeLibraryWindows . java <nl> @ @ - 18 , 6 + 18 , 8 @ @ <nl> <nl> package org . apache . cassandra . utils ; <nl> <nl> + import java . util . Collections ; <nl> + <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 43 , 7 + 45 , 7 @ @ public class NativeLibraryWindows implements NativeLibraryWrapper <nl> { <nl> try <nl> { <nl> - Native . register ( " kernel32 " ) ; <nl> + Native . register ( com . sun . jna . NativeLibrary . getInstance ( " kernel32 " , Collections . emptyMap ( ) ) ) ; <nl> available = true ; <nl> } <nl> catch ( NoClassDefFoundError e ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / concurrent / Ref . java b / src / java / org / apache / cassandra / utils / concurrent / Ref . java <nl> index 1a17a1f . . 3c1b7cc 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / concurrent / Ref . java <nl> + + + b / src / java / org / apache / cassandra / utils / concurrent / Ref . java <nl> @ @ - 709 , 5 + 709 , 10 @ @ public final class Ref < T > implements RefCounted < T > <nl> { <nl> EXEC . shutdown ( ) ; <nl> EXEC . awaitTermination ( 60 , TimeUnit . SECONDS ) ; <nl> + if ( STRONG _ LEAK _ DETECTOR ! = null ) <nl> + { <nl> + STRONG _ LEAK _ DETECTOR . shutdownNow ( ) ; <nl> + STRONG _ LEAK _ DETECTOR . awaitTermination ( 60 , TimeUnit . SECONDS ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / test / distributed / org / apache / cassandra / distributed / DistributedReadWritePathTest . java b / test / distributed / org / apache / cassandra / distributed / DistributedReadWritePathTest . java <nl> index d03ef4f . . 04ea8b0 100644 <nl> - - - a / test / distributed / org / apache / cassandra / distributed / DistributedReadWritePathTest . java <nl> + + + b / test / distributed / org / apache / cassandra / distributed / DistributedReadWritePathTest . java <nl> @ @ - 28 , 7 + 28 , 16 @ @ import static org . apache . cassandra . net . MessagingService . Verb . READ _ REPAIR ; <nl> public class DistributedReadWritePathTest extends DistributedTestBase <nl> { <nl> @ Test <nl> - public void coordinatorRead ( ) throws Throwable <nl> + public void coordinatorReadTest ( ) throws Throwable <nl> + { <nl> + for ( int i = 0 ; i < 10 ; i + + ) <nl> + { <nl> + System . out . println ( i ) ; <nl> + coordinatorRead ( ) ; <nl> + } <nl> + } <nl> + <nl> + private void coordinatorRead ( ) throws Throwable <nl> { <nl> try ( TestCluster cluster = createCluster ( 3 ) ) <nl> { <nl> diff - - git a / test / distributed / org / apache / cassandra / distributed / Instance . java b / test / distributed / org / apache / cassandra / distributed / Instance . java <nl> index f344411 . . c68b961 100644 <nl> - - - a / test / distributed / org / apache / cassandra / distributed / Instance . java <nl> + + + b / test / distributed / org / apache / cassandra / distributed / Instance . java <nl> @ @ - 29 , 6 + 29 , 9 @ @ import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . TimeUnit ; <nl> import java . util . function . BiConsumer ; <nl> <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import ch . qos . logback . classic . LoggerContext ; <nl> import org . apache . cassandra . batchlog . BatchlogManager ; <nl> import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> import org . apache . cassandra . concurrent . SharedExecutorPool ; <nl> @ @ - 53 , 6 + 56 , 7 @ @ import org . apache . cassandra . gms . Gossiper ; <nl> import org . apache . cassandra . gms . VersionedValue ; <nl> import org . apache . cassandra . hints . HintsService ; <nl> import org . apache . cassandra . index . SecondaryIndexManager ; <nl> + import org . apache . cassandra . io . sstable . format . SSTableReader ; <nl> import org . apache . cassandra . io . util . DataInputBuffer ; <nl> import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> import org . apache . cassandra . locator . InetAddressAndPort ; <nl> @ @ - 64 , 6 + 68 , 7 @ @ import org . apache . cassandra . net . MessageIn ; <nl> import org . apache . cassandra . net . MessageOut ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . net . async . MessageInHandler ; <nl> + import org . apache . cassandra . net . async . NettyFactory ; <nl> import org . apache . cassandra . schema . Schema ; <nl> import org . apache . cassandra . schema . SchemaConstants ; <nl> import org . apache . cassandra . service . ActiveRepairService ; <nl> @ @ - 229 , 6 + 234 , 11 @ @ public class Instance extends InvokableInstance <nl> DatabaseDescriptor . createAllDirectories ( ) ; <nl> Keyspace . setInitialized ( ) ; <nl> SystemKeyspace . persistLocalMetadata ( ) ; <nl> + / / Even though we don ' t use MessagingService , access the static NettyFactory <nl> + / / instance here so that we start the static event loop state <nl> + / / ( e . g . acceptGroup , inboundGroup , outboundGroup , etc . . . ) . We can remove this <nl> + / / once we actually use the MessagingService to communicate between nodes <nl> + NettyFactory . instance . getClass ( ) ; <nl> } ) . accept ( config ) ; <nl> } <nl> <nl> @ @ - 330 , 10 + 340 , 10 @ @ public class Instance extends InvokableInstance <nl> runOnInstance ( ( ) - > { <nl> Throwable error = null ; <nl> error = runAndMergeThrowable ( error , <nl> + CompactionManager . instance : : forceShutdown , <nl> BatchlogManager . instance : : shutdown , <nl> HintsService . instance : : shutdownBlocking , <nl> CommitLog . instance : : shutdownBlocking , <nl> - CompactionManager . instance : : forceShutdown , <nl> Gossiper . instance : : stop , <nl> SecondaryIndexManager : : shutdownExecutors , <nl> MessagingService . instance ( ) : : shutdown , <nl> @ @ - 347 , 8 + 357 , 12 @ @ public class Instance extends InvokableInstance <nl> StageManager : : shutdownAndWait , <nl> SharedExecutorPool . SHARED : : shutdown , <nl> Memtable . MEMORY _ POOL : : shutdown , <nl> - ScheduledExecutors : : shutdownAndWait ) ; <nl> + ScheduledExecutors : : shutdownAndWait , <nl> + SSTableReader : : shutdownBlocking ) ; <nl> + <nl> error = shutdownAndWait ( error , ActiveRepairService . repairCommandExecutor ) ; <nl> + LoggerContext loggerContext = ( LoggerContext ) LoggerFactory . getILoggerFactory ( ) ; <nl> + loggerContext . stop ( ) ; <nl> Throwables . maybeFail ( error ) ; <nl> } ) ; <nl> } <nl> @ @ - 357 , 25 + 371 , 11 @ @ public class Instance extends InvokableInstance <nl> { <nl> return runAndMergeThrowable ( existing , ( ) - > { <nl> executor . shutdownNow ( ) ; <nl> - executor . awaitTermination ( 5 , TimeUnit . SECONDS ) ; <nl> + executor . awaitTermination ( 20 , TimeUnit . SECONDS ) ; <nl> assert executor . isTerminated ( ) & & executor . isShutdown ( ) : executor ; <nl> } ) ; <nl> } <nl> <nl> - private static Throwable runAndMergeThrowable ( Throwable existing , ThrowingRunnable runnable ) <nl> - { <nl> - try <nl> - { <nl> - runnable . run ( ) ; <nl> - } <nl> - catch ( Throwable t ) <nl> - { <nl> - return Throwables . merge ( existing , t ) ; <nl> - } <nl> - <nl> - return existing ; <nl> - } <nl> - <nl> private static Throwable runAndMergeThrowable ( Throwable existing , ThrowingRunnable . . . runnables ) <nl> { <nl> for ( ThrowingRunnable runnable : runnables ) <nl> diff - - git a / test / distributed / org / apache / cassandra / distributed / TestCluster . java b / test / distributed / org / apache / cassandra / distributed / TestCluster . java <nl> index 2b979ee . . cc6cf81 100644 <nl> - - - a / test / distributed / org / apache / cassandra / distributed / TestCluster . java <nl> + + + b / test / distributed / org / apache / cassandra / distributed / TestCluster . java <nl> @ @ - 31 , 16 + 31 , 21 @ @ import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> + import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . Executors ; <nl> import java . util . concurrent . Future ; <nl> import java . util . concurrent . TimeUnit ; <nl> + import java . util . concurrent . TimeoutException ; <nl> import java . util . function . Consumer ; <nl> import java . util . function . IntFunction ; <nl> import java . util . stream . Collectors ; <nl> <nl> import com . google . common . collect . Sets ; <nl> <nl> + import io . netty . util . concurrent . FastThreadLocal ; <nl> + import io . netty . util . concurrent . FastThreadLocalThread ; <nl> + import io . netty . util . internal . InternalThreadLocalMap ; <nl> import org . apache . cassandra . concurrent . NamedThreadFactory ; <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . ConsistencyLevel ; <nl> @ @ - 79 , 7 + 84 , 7 @ @ import org . apache . cassandra . utils . concurrent . SimpleCondition ; <nl> * / <nl> public class TestCluster implements AutoCloseable <nl> { <nl> - private static ExecutorService exec = Executors . newCachedThreadPool ( new NamedThreadFactory ( " cluster - async - tasks " ) ) ; <nl> + private final ExecutorService exec = Executors . newCachedThreadPool ( new NamedThreadFactory ( " cluster - async - tasks " ) ) ; <nl> <nl> private final File root ; <nl> private final List < Instance > instances ; <nl> @ @ - 271 , 19 + 276 , 37 @ @ public class TestCluster implements AutoCloseable <nl> } <nl> <nl> @ Override <nl> - public void close ( ) <nl> + public void close ( ) throws InterruptedException , TimeoutException , ExecutionException <nl> { <nl> List < Future < ? > > futures = instances . stream ( ) <nl> . map ( i - > exec . submit ( i : : shutdown ) ) <nl> . collect ( Collectors . toList ( ) ) ; <nl> <nl> - / / withThreadLeakCheck ( futures ) ; <nl> - <nl> / / Make sure to only delete directory when threads are stopped <nl> - exec . submit ( ( ) - > { <nl> + Future combined = exec . submit ( ( ) - > { <nl> FBUtilities . waitOnFutures ( futures ) ; <nl> FileUtils . deleteRecursive ( root ) ; <nl> } ) ; <nl> + <nl> + combined . get ( 60 , TimeUnit . SECONDS ) ; <nl> + <nl> + exec . shutdownNow ( ) ; <nl> + exec . awaitTermination ( 10 , TimeUnit . SECONDS ) ; <nl> + <nl> + / / withThreadLeakCheck ( futures ) ; <nl> + Set < Thread > threadSet = Thread . getAllStackTraces ( ) . keySet ( ) ; <nl> + for ( Thread thread : threadSet ) <nl> + { <nl> + if ( thread instanceof FastThreadLocalThread ) <nl> + ( ( FastThreadLocalThread ) thread ) . setThreadLocalMap ( null ) ; <nl> + } <nl> + <nl> + InternalThreadLocalMap . remove ( ) ; <nl> + InternalThreadLocalMap . destroy ( ) ; <nl> + <nl> + FastThreadLocal . removeAll ( ) ; <nl> + FastThreadLocal . destroy ( ) ; <nl> + System . gc ( ) ; <nl> } <nl> <nl> / / We do not want this check to run every time until we fix problems with tread stops
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / concurrent / ContinuationStage . java b / src / java / org / apache / cassandra / concurrent / ContinuationStage . java <nl> index 0c5291d . . d8bdfc0 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / ContinuationStage . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / ContinuationStage . java <nl> @ @ - 85 , 7 + 85 , 7 @ @ public class ContinuationStage implements IStage <nl> return executorService _ . isShutdown ( ) ; <nl> } <nl> <nl> - public long getTaskCount ( ) { <nl> + public long getPendingTasks ( ) { <nl> return ( executorService _ . getTaskCount ( ) - executorService _ . getCompletedTaskCount ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> index b72ed35 . . 51faa4c 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> @ @ - 19 , 10 + 19 , 12 @ @ <nl> package org . apache . cassandra . concurrent ; <nl> <nl> import java . util . concurrent . * ; <nl> + import java . lang . management . ManagementFactory ; <nl> <nl> - import org . apache . cassandra . utils . LogUtil ; <nl> import org . apache . log4j . Logger ; <nl> - import org . apache . cassandra . utils . * ; <nl> + <nl> + import javax . management . MBeanServer ; <nl> + import javax . management . ObjectName ; <nl> <nl> / * * <nl> * This is a wrapper class for the < i > ScheduledThreadPoolExecutor < / i > . It provides an implementation <nl> @ @ - 32 , 7 + 34 , 7 @ @ import org . apache . cassandra . utils . * ; <nl> * Author : Avinash Lakshman ( alakshman @ facebook . com ) & Prashant Malik ( pmalik @ facebook . com ) <nl> * / <nl> <nl> - public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor <nl> + public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements DebuggableThreadPoolExecutorMBean <nl> { <nl> private static Logger logger _ = Logger . getLogger ( DebuggableThreadPoolExecutor . class ) ; <nl> <nl> @ @ - 46 , 12 + 48 , 26 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor <nl> long keepAliveTime , <nl> TimeUnit unit , <nl> BlockingQueue < Runnable > workQueue , <nl> - ThreadFactory threadFactory ) <nl> + ThreadFactoryImpl threadFactory ) <nl> { <nl> super ( corePoolSize , maximumPoolSize , keepAliveTime , unit , workQueue , threadFactory ) ; <nl> super . prestartAllCoreThreads ( ) ; <nl> + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> + try <nl> + { <nl> + mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . concurrent : type = " + threadFactory . id _ ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> } <nl> - <nl> + <nl> + public long getPendingTasks ( ) <nl> + { <nl> + return getTaskCount ( ) - getCompletedTaskCount ( ) ; <nl> + } <nl> + <nl> / * <nl> * <nl> * ( non - Javadoc ) <nl> diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutorMBean . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutorMBean . java <nl> new file mode 100644 <nl> index 0000000 . . 798a888 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutorMBean . java <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + package org . apache . cassandra . concurrent ; <nl> + <nl> + public interface DebuggableThreadPoolExecutorMBean <nl> + { <nl> + public long getPendingTasks ( ) ; <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / concurrent / IStage . java b / src / java / org / apache / cassandra / concurrent / IStage . java <nl> index 1ed9fc0 . . f33e3cb 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / IStage . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / IStage . java <nl> @ @ - 116 , 5 + 116 , 5 @ @ public interface IStage <nl> * pending on this stage to be executed . <nl> * @ return task count . <nl> * / <nl> - public long getTaskCount ( ) ; <nl> + public long getPendingTasks ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / concurrent / MultiThreadedStage . java b / src / java / org / apache / cassandra / concurrent / MultiThreadedStage . java <nl> index 75a2789 . . bbdcad6 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / MultiThreadedStage . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / MultiThreadedStage . java <nl> @ @ - 92 , 7 + 92 , 7 @ @ public class MultiThreadedStage implements IStage <nl> return executorService _ . isShutdown ( ) ; <nl> } <nl> <nl> - public long getTaskCount ( ) { <nl> - return ( executorService _ . getTaskCount ( ) - executorService _ . getCompletedTaskCount ( ) ) ; <nl> + public long getPendingTasks ( ) { <nl> + return executorService _ . getPendingTasks ( ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / concurrent / SingleThreadedContinuationStage . java b / src / java / org / apache / cassandra / concurrent / SingleThreadedContinuationStage . java <nl> index 7a4cd33 . . fa1fcff 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / SingleThreadedContinuationStage . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / SingleThreadedContinuationStage . java <nl> @ @ - 92 , 7 + 92 , 7 @ @ public class SingleThreadedContinuationStage implements IStage <nl> return executorService _ . isShutdown ( ) ; <nl> } <nl> <nl> - public long getTaskCount ( ) { <nl> + public long getPendingTasks ( ) { <nl> return ( executorService _ . getTaskCount ( ) - executorService _ . getCompletedTaskCount ( ) ) ; <nl> } <nl> / * Finished implementing the IStage interface methods * / <nl> diff - - git a / src / java / org / apache / cassandra / concurrent / SingleThreadedStage . java b / src / java / org / apache / cassandra / concurrent / SingleThreadedStage . java <nl> index 27ae871 . . 24480d3 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / SingleThreadedStage . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / SingleThreadedStage . java <nl> @ @ - 94 , 8 + 94 , 7 @ @ public class SingleThreadedStage implements IStage <nl> return executorService _ . isShutdown ( ) ; <nl> } <nl> <nl> - public long getTaskCount ( ) { <nl> - return ( executorService _ . getTaskCount ( ) - executorService _ . getCompletedTaskCount ( ) ) ; <nl> + public long getPendingTasks ( ) { <nl> + return executorService _ . getPendingTasks ( ) ; <nl> } <nl> - / * Finished implementing the IStage interface methods * / <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / concurrent / StageManager . java b / src / java / org / apache / cassandra / concurrent / StageManager . java <nl> index c3fc284 . . f771588 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / StageManager . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / StageManager . java <nl> @ @ - 23 , 8 + 23 , 6 @ @ import java . util . Map ; <nl> import java . util . Set ; <nl> import java . util . concurrent . ExecutorService ; <nl> <nl> - import org . apache . cassandra . continuations . Suspendable ; <nl> - <nl> <nl> / * * <nl> * This class manages all stages that exist within a process . The application registers <nl> @ @ - 101 , 7 + 99 , 7 @ @ public class StageManager <nl> * / <nl> public static long getStageTaskCount ( String stage ) <nl> { <nl> - return stageQueues _ . get ( stage ) . getTaskCount ( ) ; <nl> + return stageQueues _ . get ( stage ) . getPendingTasks ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 1f283b6 . . 2787b63 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1432 , 11 + 1432 , 6 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> return memtableSwitchCount ; <nl> } <nl> <nl> - public int getMemtableTasks ( ) <nl> - { <nl> - return memtable _ . get ( ) . getPendingTasks ( ) ; <nl> - } <nl> - <nl> / * * <nl> * clears out all data associated with this ColumnFamily . <nl> * For use in testing . <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> index 75840b8 . . 94e91c3 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> @ @ - 50 , 11 + 50 , 6 @ @ public interface ColumnFamilyStoreMBean <nl> public int getMemtableSwitchCount ( ) ; <nl> <nl> / * * <nl> - * @ return the number of tasks waiting to run on the memtable executor <nl> - * / <nl> - public int getMemtableTasks ( ) ; <nl> - <nl> - / * * <nl> * Triggers an immediate memtable flush . <nl> * / <nl> public void forceFlush ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java <nl> index ae926d8 . . 9eeec34 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Memtable . java <nl> + + + b / src / java / org / apache / cassandra / db / Memtable . java <nl> @ @ - 45 , 7 + 45 , 7 @ @ public class Memtable implements Comparable < Memtable > <nl> { <nl> 	 private static Logger logger _ = Logger . getLogger ( Memtable . class ) ; <nl> private static Set < ExecutorService > runningExecutorServices _ = new NonBlockingHashSet < ExecutorService > ( ) ; <nl> - private boolean isFrozen _ ; <nl> + private static AtomicInteger executorCount _ = new AtomicInteger ( 0 ) ; <nl> <nl> public static void shutdown ( ) <nl> { <nl> @ @ - 56 , 6 + 56 , 7 @ @ public class Memtable implements Comparable < Memtable > <nl> } <nl> <nl> private MemtableThreadPoolExecutor executor _ ; <nl> + private boolean isFrozen _ ; <nl> <nl> private int threshold _ = DatabaseDescriptor . getMemtableSize ( ) * 1024 * 1024 ; <nl> private int thresholdCount _ = ( int ) ( DatabaseDescriptor . getMemtableObjectCount ( ) * 1024 * 1024 ) ; <nl> @ @ - 72 , 12 + 73 , 12 @ @ public class Memtable implements Comparable < Memtable > <nl> <nl> Memtable ( String table , String cfName ) <nl> { <nl> - executor _ = new MemtableThreadPoolExecutor ( ) ; <nl> - runningExecutorServices _ . add ( executor _ ) ; <nl> - <nl> table _ = table ; <nl> cfName _ = cfName ; <nl> creationTime _ = System . currentTimeMillis ( ) ; <nl> + <nl> + executor _ = new MemtableThreadPoolExecutor ( ) ; <nl> + runningExecutorServices _ . add ( executor _ ) ; <nl> } <nl> <nl> class Putter implements Runnable <nl> @ @ - 169 , 11 + 170 , 6 @ @ public class Memtable implements Comparable < Memtable > <nl> 	 return cfName _ ; <nl> } <nl> <nl> - int getPendingTasks ( ) <nl> - { <nl> - 	 return ( int ) ( executor _ . getTaskCount ( ) - executor _ . getCompletedTaskCount ( ) ) ; <nl> - } <nl> - <nl> private synchronized void enqueueFlush ( CommitLog . CommitLogContext cLogCtx ) <nl> { <nl> if ( ! isFrozen _ ) <nl> @ @ - 367 , 7 + 363 , 7 @ @ public class Memtable implements Comparable < Memtable > <nl> <nl> public MemtableThreadPoolExecutor ( ) <nl> { <nl> - super ( " FAST - MEMTABLE - POOL " ) ; <nl> + super ( " MEMTABLE - POOL - " + cfName _ + executorCount _ . addAndGet ( 1 ) ) ; <nl> } <nl> <nl> protected void terminated ( ) <nl> diff - - git a / src / java / org / apache / cassandra / net / MessageDeserializationTask . java b / src / java / org / apache / cassandra / net / MessageDeserializationTask . java <nl> index d21e4c6 . . 0cd6578 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessageDeserializationTask . java <nl> + + + b / src / java / org / apache / cassandra / net / MessageDeserializationTask . java <nl> @ @ - 48 , 23 + 48 , 20 @ @ class MessageDeserializationTask implements Runnable <nl> <nl> public void run ( ) <nl> { <nl> - 	 / * For DEBUG only . Printing queue length * / <nl> - 	 DebuggableThreadPoolExecutor es = ( DebuggableThreadPoolExecutor ) MessagingService . getDeserilizationExecutor ( ) ; <nl> - logger _ . debug ( " Message Deserialization Task : " + ( es . getTaskCount ( ) - es . getCompletedTaskCount ( ) ) ) ; <nl> - / * END DEBUG * / <nl> + Message message = null ; <nl> try <nl> - { <nl> - Message message = ( Message ) serializer _ . deserialize ( bytes _ ) ; <nl> - <nl> - if ( message ! = null ) <nl> - { <nl> - message = SinkManager . processServerMessageSink ( message ) ; <nl> - MessagingService . receive ( message ) ; <nl> - } <nl> + { <nl> + message = serializer _ . deserialize ( bytes _ ) ; <nl> } <nl> - catch ( IOException ex ) <nl> - { <nl> - logger _ . warn ( LogUtil . throwableToString ( ex ) ) ; <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + <nl> + if ( message ! = null ) <nl> + { <nl> + message = SinkManager . processServerMessageSink ( message ) ; <nl> + MessagingService . receive ( message ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / net / MessageSerializationTask . java b / src / java / org / apache / cassandra / net / MessageSerializationTask . java <nl> index 9cee314 . . 3078a9a 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessageSerializationTask . java <nl> + + + b / src / java / org / apache / cassandra / net / MessageSerializationTask . java <nl> @ @ - 52 , 11 + 52 , 6 @ @ class MessageSerializationTask implements Runnable <nl> <nl> public void run ( ) <nl> { <nl> - 	 / * For DEBUG only . Printing queue length * / <nl> - 	 DebuggableThreadPoolExecutor es = ( DebuggableThreadPoolExecutor ) MessagingService . getWriteExecutor ( ) ; <nl> - logger _ . debug ( " Message Serialization Task : " + ( es . getTaskCount ( ) - es . getCompletedTaskCount ( ) ) ) ; <nl> - / * END DEBUG * / <nl> - <nl> / * Adding the message to be serialized in the TLS . For accessing in the afterExecute ( ) * / <nl> Context ctx = new Context ( ) ; <nl> ctx . put ( this . getClass ( ) . getName ( ) , message _ ) ; <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index 33b9e04 . . bdc46d1 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 18 , 43 + 18 , 32 @ @ <nl> <nl> package org . apache . cassandra . net ; <nl> <nl> - import java . io . * ; <nl> - import java . lang . management . ManagementFactory ; <nl> - import java . net . * ; <nl> - import java . security . MessageDigest ; <nl> - import java . util . * ; <nl> - import java . nio . ByteBuffer ; <nl> - import java . util . concurrent . * ; <nl> - import java . util . concurrent . atomic . AtomicBoolean ; <nl> - import java . util . concurrent . locks . ReentrantLock ; <nl> - import java . nio . channels . * ; <nl> import org . apache . cassandra . concurrent . * ; <nl> - import org . apache . cassandra . net . io . * ; <nl> - import org . apache . cassandra . utils . * ; <nl> - import javax . management . MBeanServer ; <nl> - import javax . management . ObjectName ; <nl> - import javax . xml . bind . * ; <nl> - import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; <nl> - import org . apache . cassandra . concurrent . IStage ; <nl> - import org . apache . cassandra . concurrent . MultiThreadedStage ; <nl> - import org . apache . cassandra . concurrent . StageManager ; <nl> - import org . apache . cassandra . concurrent . ThreadFactoryImpl ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . net . http . HttpConnectionHandler ; <nl> import org . apache . cassandra . net . io . SerializerType ; <nl> - import org . apache . cassandra . net . sink . SinkManager ; <nl> - import org . apache . cassandra . utils . Cachetable ; <nl> - import org . apache . cassandra . utils . GuidGenerator ; <nl> - import org . apache . cassandra . utils . HashingSchemes ; <nl> - import org . apache . cassandra . utils . ICachetable ; <nl> - import org . apache . cassandra . utils . LogUtil ; <nl> + import org . apache . cassandra . utils . * ; <nl> import org . apache . log4j . Logger ; <nl> <nl> + import java . io . IOException ; <nl> + import java . net . MulticastSocket ; <nl> + import java . net . ServerSocket ; <nl> + import java . nio . ByteBuffer ; <nl> + import java . nio . channels . SelectionKey ; <nl> + import java . nio . channels . ServerSocketChannel ; <nl> + import java . security . MessageDigest ; <nl> + import java . util . * ; <nl> + import java . util . concurrent . ExecutorService ; <nl> + import java . util . concurrent . LinkedBlockingQueue ; <nl> + import java . util . concurrent . TimeUnit ; <nl> + import java . util . concurrent . atomic . AtomicBoolean ; <nl> + import java . util . concurrent . locks . ReentrantLock ; <nl> + <nl> / * * <nl> * Author : Avinash Lakshman ( alakshman @ facebook . com ) & Prashant Malik ( pmalik @ facebook . com ) <nl> * / <nl> <nl> - public class MessagingService implements IMessagingService , MessagingServiceMBean <nl> + public class MessagingService implements IMessagingService <nl> { <nl> private static boolean debugOn _ = false ; <nl> <nl> @ @ - 243 , 18 + 232 , 6 @ @ public class MessagingService implements IMessagingService , MessagingServiceMBea <nl> return result ; <nl> } <nl> <nl> - public long getMessagingSerializerTaskCount ( ) <nl> - { <nl> - DebuggableThreadPoolExecutor dstp = ( DebuggableThreadPoolExecutor ) messageSerializerExecutor _ ; <nl> - return dstp . getTaskCount ( ) - dstp . getCompletedTaskCount ( ) ; <nl> - } <nl> - <nl> - public long getMessagingReceiverTaskCount ( ) <nl> - { <nl> - DebuggableThreadPoolExecutor dstp = ( DebuggableThreadPoolExecutor ) messageDeserializationExecutor _ ; <nl> - return dstp . getTaskCount ( ) - dstp . getCompletedTaskCount ( ) ; <nl> - } <nl> - <nl> public void listen ( EndPoint localEp , boolean isHttp ) throws IOException <nl> { <nl> ServerSocketChannel serverChannel = ServerSocketChannel . open ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingServiceMBean . java b / src / java / org / apache / cassandra / net / MessagingServiceMBean . java <nl> deleted file mode 100644 <nl> index 3e0a57c . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingServiceMBean . java <nl> + + + / dev / null <nl> @ @ - 1 , 29 + 0 , 0 @ @ <nl> - / * * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package org . apache . cassandra . net ; <nl> - <nl> - / * * <nl> - * Author : Avinash Lakshman ( alakshman @ facebook . com ) & Prashant Malik ( pmalik @ facebook . com ) <nl> - * / <nl> - <nl> - public interface MessagingServiceMBean <nl> - { <nl> - public long getMessagingSerializerTaskCount ( ) ; <nl> - public long getMessagingReceiverTaskCount ( ) ; <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / net / TcpConnection . java b / src / java / org / apache / cassandra / net / TcpConnection . java <nl> index ebd507d . . 814039f 100644 <nl> - - - a / src / java / org / apache / cassandra / net / TcpConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / TcpConnection . java <nl> @ @ - 174 , 7 + 174 , 7 @ @ public class TcpConnection extends SelectionKeyHandler implements Comparable <nl> byte [ ] data = serializer _ . serialize ( message ) ; <nl> if ( data . length > 0 ) <nl> { <nl> - boolean listening = ( message . getFrom ( ) . equals ( EndPoint . randomLocalEndPoint _ ) ) ? false : true ; <nl> + boolean listening = ! message . getFrom ( ) . equals ( EndPoint . randomLocalEndPoint _ ) ; <nl> ByteBuffer buffer = MessagingService . packIt ( data , false , false , listening ) ; <nl> synchronized ( this ) <nl> { <nl> @ @ - 184 , 7 + 184 , 6 @ @ public class TcpConnection extends SelectionKeyHandler implements Comparable <nl> return ; <nl> } <nl> <nl> - logger _ . debug ( " Sending packets of size " + data . length ) ; <nl> socketChannel _ . write ( buffer ) ; <nl> <nl> if ( buffer . remaining ( ) > 0 ) <nl> diff - - git a / src / java / org / apache / cassandra / net / UdpConnection . java b / src / java / org / apache / cassandra / net / UdpConnection . java <nl> index 0ea2aec . . 53fddbb 100644 <nl> - - - a / src / java / org / apache / cassandra / net / UdpConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / UdpConnection . java <nl> @ @ - 78 , 7 + 78 , 7 @ @ public class UdpConnection extends SelectionKeyHandler <nl> byte [ ] data = bos . toByteArray ( ) ; <nl> if ( data . length > 0 ) <nl> { <nl> - logger _ . debug ( " Size of Gossip packet " + data . length ) ; <nl> + logger _ . trace ( " Size of Gossip packet " + data . length ) ; <nl> byte [ ] protocol = BasicUtilities . intToByteArray ( protocol _ ) ; <nl> ByteBuffer buffer = ByteBuffer . allocate ( data . length + protocol . length ) ; <nl> buffer . put ( protocol ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index f8b71e6 . . 8840685 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 263 , 7 + 263 , 6 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> * / <nl> private void init ( ) <nl> { <nl> - / / Register this instance with JMX <nl> try <nl> { <nl> MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ;

TEST DIFF:
diff - - git a / build . xml b / build . xml 
 index 3973689 . . 60b66fc 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 1300 , 6 + 1300 , 13 @ @ 
 < jvmarg value = " - ea " / > 
 < jvmarg value = " - Dcassandra . debugrefcount = true " / > 
 < jvmarg value = " - Xss256k " / > 
 + < ! - - When we do classloader manipulation SoftReferences can cause memory leaks 
 + that can OOM our test runs . The next two settings informs our GC 
 + algorithm to limit the metaspace size and clean up SoftReferences 
 + more aggressively rather than waiting . See CASSANDRA - 14922 for more details . 
 + - - > 
 + < jvmarg value = " - XX : MaxMetaspaceSize = 256M " / > 
 + < jvmarg value = " - XX : SoftRefLRUPolicyMSPerMB = 0 " / > 
 < jvmarg value = " - Dcassandra . memtable _ row _ overhead _ computation _ step = 100 " / > 
 < jvmarg value = " - Dcassandra . test . use _ prepared = $ { cassandra . test . use _ prepared } " / > 
 < jvmarg value = " - Dcassandra . test . offsetseed = @ { poffset } " / > 
 diff - - git a / ide / idea / workspace . xml b / ide / idea / workspace . xml 
 index a2dea2a . . 150f1a0 100644 
 - - - a / ide / idea / workspace . xml 
 + + + b / ide / idea / workspace . xml 
 @ @ - 167 , 7 + 167 , 7 @ @ 
 < option name = " MAIN _ CLASS _ NAME " value = " " / > 
 < option name = " METHOD _ NAME " value = " " / > 
 < option name = " TEST _ OBJECT " value = " class " / > 
 - < option name = " VM _ PARAMETERS " value = " - Dcassandra . config = file : / / $ PROJECT _ DIR $ / test / conf / cassandra . yaml - Dlogback . configurationFile = file : / / $ PROJECT _ DIR $ / test / conf / logback - test . xml - Dcassandra . logdir = $ PROJECT _ DIR $ / build / test / logs - Djava . library . path = $ PROJECT _ DIR $ / lib / sigar - bin - Dlegacy - sstable - root = $ PROJECT _ DIR $ / test / data / legacy - sstables - Dinvalid - legacy - sstable - root = $ PROJECT _ DIR $ / test / data / invalid - legacy - sstables - Dcassandra . ring _ delay _ ms = 1000 - Dcassandra . skip _ sync = true - ea " / > 
 + < option name = " VM _ PARAMETERS " value = " - Dcassandra . config = file : / / $ PROJECT _ DIR $ / test / conf / cassandra . yaml - Dlogback . configurationFile = file : / / $ PROJECT _ DIR $ / test / conf / logback - test . xml - Dcassandra . logdir = $ PROJECT _ DIR $ / build / test / logs - Djava . library . path = $ PROJECT _ DIR $ / lib / sigar - bin - Dlegacy - sstable - root = $ PROJECT _ DIR $ / test / data / legacy - sstables - Dinvalid - legacy - sstable - root = $ PROJECT _ DIR $ / test / data / invalid - legacy - sstables - Dcassandra . ring _ delay _ ms = 1000 - Dcassandra . skip _ sync = true - ea - XX : MaxMetaspaceSize = 256M - XX : SoftRefLRUPolicyMSPerMB = 0 " / > 
 < option name = " PARAMETERS " value = " " / > 
 < option name = " WORKING _ DIRECTORY " value = " " / > 
 < option name = " ENV _ VARIABLES " / > 
 diff - - git a / src / java / org / apache / cassandra / concurrent / ScheduledExecutors . java b / src / java / org / apache / cassandra / concurrent / ScheduledExecutors . java 
 index e51e4c2 . . 5e3e5cf 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / ScheduledExecutors . java 
 + + + b / src / java / org / apache / cassandra / concurrent / ScheduledExecutors . java 
 @ @ - 52 , 7 + 52 , 7 @ @ public class ScheduledExecutors 
 { 
 ExecutorService [ ] executors = new ExecutorService [ ] { scheduledFastTasks , scheduledTasks , nonPeriodicTasks , optionalTasks } ; 
 for ( ExecutorService executor : executors ) 
 - executor . shutdown ( ) ; 
 + executor . shutdownNow ( ) ; 
 for ( ExecutorService executor : executors ) 
 executor . awaitTermination ( 60 , TimeUnit . SECONDS ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / hints / HintsBufferPool . java b / src / java / org / apache / cassandra / hints / HintsBufferPool . java 
 index 25f9bc1 . . f705de1 100644 
 - - - a / src / java / org / apache / cassandra / hints / HintsBufferPool . java 
 + + + b / src / java / org / apache / cassandra / hints / HintsBufferPool . java 
 @ @ - 17 , 18 + 17 , 21 @ @ 
 * / 
 package org . apache . cassandra . hints ; 
 
 + import java . io . Closeable ; 
 + import java . io . IOException ; 
 import java . util . UUID ; 
 import java . util . concurrent . BlockingQueue ; 
 import java . util . concurrent . LinkedBlockingQueue ; 
 
 import org . apache . cassandra . config . Config ; 
 import org . apache . cassandra . net . MessagingService ; 
 + import sun . nio . ch . DirectBuffer ; 
 
 / * * 
 * A primitive pool of { @ link HintsBuffer } buffers . Under normal conditions should only hold two buffers - the currently 
 * written to one , and a reserve buffer to switch to when the first one is beyond capacity . 
 * / 
 - final class HintsBufferPool 
 + final class HintsBufferPool implements Closeable 
 { 
 interface FlushCallback 
 { 
 @ @ - 129 , 4 + 132 , 9 @ @ final class HintsBufferPool 
 allocatedBuffers + + ; 
 return HintsBuffer . create ( bufferSize ) ; 
 } 
 + 
 + public void close ( ) 
 + { 
 + currentBuffer . free ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / hints / HintsService . java b / src / java / org / apache / cassandra / hints / HintsService . java 
 index 1a352c2 . . 1fd2d1a 100644 
 - - - a / src / java / org / apache / cassandra / hints / HintsService . java 
 + + + b / src / java / org / apache / cassandra / hints / HintsService . java 
 @ @ - 256 , 6 + 256 , 7 @ @ public final class HintsService implements HintsServiceMBean 
 writeExecutor . shutdownBlocking ( ) ; 
 
 HintsServiceDiagnostics . dispatchingShutdown ( this ) ; 
 + bufferPool . close ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 index cf14c3d . . 01e30d6 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 @ @ - 2475 , 4 + 2475 , 13 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 return reader ; 
 } 
 
 + public static void shutdownBlocking ( ) throws InterruptedException 
 + { 
 + if ( syncExecutor ! = null ) 
 + { 
 + syncExecutor . shutdownNow ( ) ; 
 + syncExecutor . awaitTermination ( 0 , TimeUnit . SECONDS ) ; 
 + } 
 + resetTidying ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index 761e210 . . f5c064e 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 1142 , 6 + 1142 , 8 @ @ public final class MessagingService implements MessagingServiceMBean 
 
 if ( ! isTest ) 
 NettyFactory . instance . close ( ) ; 
 + 
 + clearMessageSinks ( ) ; 
 } 
 catch ( Exception e ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / net / async / NettyFactory . java b / src / java / org / apache / cassandra / net / async / NettyFactory . java 
 index 2366722 . . 81de5d8 100644 
 - - - a / src / java / org / apache / cassandra / net / async / NettyFactory . java 
 + + + b / src / java / org / apache / cassandra / net / async / NettyFactory . java 
 @ @ - 389 , 7 + 389 , 7 @ @ public final class NettyFactory 
 { 
 EventLoopGroup [ ] groups = new EventLoopGroup [ ] { acceptGroup , outboundGroup , inboundGroup , streamingGroup } ; 
 for ( EventLoopGroup group : groups ) 
 - group . shutdownGracefully ( ) ; 
 + group . shutdownGracefully ( 0 , 2 , TimeUnit . SECONDS ) ; 
 for ( EventLoopGroup group : groups ) 
 group . awaitTermination ( 60 , TimeUnit . SECONDS ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / NativeLibraryDarwin . java b / src / java / org / apache / cassandra / utils / NativeLibraryDarwin . java 
 index d6f1a9e . . 6ed18d1 100644 
 - - - a / src / java / org / apache / cassandra / utils / NativeLibraryDarwin . java 
 + + + b / src / java / org / apache / cassandra / utils / NativeLibraryDarwin . java 
 @ @ - 18 , 6 + 18 , 8 @ @ 
 
 package org . apache . cassandra . utils ; 
 
 + import java . util . Collections ; 
 + 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 50 , 7 + 52 , 7 @ @ public class NativeLibraryDarwin implements NativeLibraryWrapper 
 { 
 try 
 { 
 - Native . register ( " c " ) ; 
 + Native . register ( com . sun . jna . NativeLibrary . getInstance ( " c " , Collections . emptyMap ( ) ) ) ; 
 available = true ; 
 } 
 catch ( NoClassDefFoundError e ) 
 diff - - git a / src / java / org / apache / cassandra / utils / NativeLibraryLinux . java b / src / java / org / apache / cassandra / utils / NativeLibraryLinux . java 
 index b6667e4 . . 3f21d17 100644 
 - - - a / src / java / org / apache / cassandra / utils / NativeLibraryLinux . java 
 + + + b / src / java / org / apache / cassandra / utils / NativeLibraryLinux . java 
 @ @ - 18 , 6 + 18 , 8 @ @ 
 
 package org . apache . cassandra . utils ; 
 
 + import java . util . Collections ; 
 + 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 50 , 7 + 52 , 7 @ @ public class NativeLibraryLinux implements NativeLibraryWrapper 
 { 
 try 
 { 
 - Native . register ( " c " ) ; 
 + Native . register ( com . sun . jna . NativeLibrary . getInstance ( " c " , Collections . emptyMap ( ) ) ) ; 
 available = true ; 
 } 
 catch ( NoClassDefFoundError e ) 
 diff - - git a / src / java / org / apache / cassandra / utils / NativeLibraryWindows . java b / src / java / org / apache / cassandra / utils / NativeLibraryWindows . java 
 index e6e823c . . b8304c7 100644 
 - - - a / src / java / org / apache / cassandra / utils / NativeLibraryWindows . java 
 + + + b / src / java / org / apache / cassandra / utils / NativeLibraryWindows . java 
 @ @ - 18 , 6 + 18 , 8 @ @ 
 
 package org . apache . cassandra . utils ; 
 
 + import java . util . Collections ; 
 + 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 43 , 7 + 45 , 7 @ @ public class NativeLibraryWindows implements NativeLibraryWrapper 
 { 
 try 
 { 
 - Native . register ( " kernel32 " ) ; 
 + Native . register ( com . sun . jna . NativeLibrary . getInstance ( " kernel32 " , Collections . emptyMap ( ) ) ) ; 
 available = true ; 
 } 
 catch ( NoClassDefFoundError e ) 
 diff - - git a / src / java / org / apache / cassandra / utils / concurrent / Ref . java b / src / java / org / apache / cassandra / utils / concurrent / Ref . java 
 index 1a17a1f . . 3c1b7cc 100644 
 - - - a / src / java / org / apache / cassandra / utils / concurrent / Ref . java 
 + + + b / src / java / org / apache / cassandra / utils / concurrent / Ref . java 
 @ @ - 709 , 5 + 709 , 10 @ @ public final class Ref < T > implements RefCounted < T > 
 { 
 EXEC . shutdown ( ) ; 
 EXEC . awaitTermination ( 60 , TimeUnit . SECONDS ) ; 
 + if ( STRONG _ LEAK _ DETECTOR ! = null ) 
 + { 
 + STRONG _ LEAK _ DETECTOR . shutdownNow ( ) ; 
 + STRONG _ LEAK _ DETECTOR . awaitTermination ( 60 , TimeUnit . SECONDS ) ; 
 + } 
 } 
 } 
 diff - - git a / test / distributed / org / apache / cassandra / distributed / DistributedReadWritePathTest . java b / test / distributed / org / apache / cassandra / distributed / DistributedReadWritePathTest . java 
 index d03ef4f . . 04ea8b0 100644 
 - - - a / test / distributed / org / apache / cassandra / distributed / DistributedReadWritePathTest . java 
 + + + b / test / distributed / org / apache / cassandra / distributed / DistributedReadWritePathTest . java 
 @ @ - 28 , 7 + 28 , 16 @ @ import static org . apache . cassandra . net . MessagingService . Verb . READ _ REPAIR ; 
 public class DistributedReadWritePathTest extends DistributedTestBase 
 { 
 @ Test 
 - public void coordinatorRead ( ) throws Throwable 
 + public void coordinatorReadTest ( ) throws Throwable 
 + { 
 + for ( int i = 0 ; i < 10 ; i + + ) 
 + { 
 + System . out . println ( i ) ; 
 + coordinatorRead ( ) ; 
 + } 
 + } 
 + 
 + private void coordinatorRead ( ) throws Throwable 
 { 
 try ( TestCluster cluster = createCluster ( 3 ) ) 
 { 
 diff - - git a / test / distributed / org / apache / cassandra / distributed / Instance . java b / test / distributed / org / apache / cassandra / distributed / Instance . java 
 index f344411 . . c68b961 100644 
 - - - a / test / distributed / org / apache / cassandra / distributed / Instance . java 
 + + + b / test / distributed / org / apache / cassandra / distributed / Instance . java 
 @ @ - 29 , 6 + 29 , 9 @ @ import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . TimeUnit ; 
 import java . util . function . BiConsumer ; 
 
 + import org . slf4j . LoggerFactory ; 
 + 
 + import ch . qos . logback . classic . LoggerContext ; 
 import org . apache . cassandra . batchlog . BatchlogManager ; 
 import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 import org . apache . cassandra . concurrent . SharedExecutorPool ; 
 @ @ - 53 , 6 + 56 , 7 @ @ import org . apache . cassandra . gms . Gossiper ; 
 import org . apache . cassandra . gms . VersionedValue ; 
 import org . apache . cassandra . hints . HintsService ; 
 import org . apache . cassandra . index . SecondaryIndexManager ; 
 + import org . apache . cassandra . io . sstable . format . SSTableReader ; 
 import org . apache . cassandra . io . util . DataInputBuffer ; 
 import org . apache . cassandra . io . util . DataOutputBuffer ; 
 import org . apache . cassandra . locator . InetAddressAndPort ; 
 @ @ - 64 , 6 + 68 , 7 @ @ import org . apache . cassandra . net . MessageIn ; 
 import org . apache . cassandra . net . MessageOut ; 
 import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . net . async . MessageInHandler ; 
 + import org . apache . cassandra . net . async . NettyFactory ; 
 import org . apache . cassandra . schema . Schema ; 
 import org . apache . cassandra . schema . SchemaConstants ; 
 import org . apache . cassandra . service . ActiveRepairService ; 
 @ @ - 229 , 6 + 234 , 11 @ @ public class Instance extends InvokableInstance 
 DatabaseDescriptor . createAllDirectories ( ) ; 
 Keyspace . setInitialized ( ) ; 
 SystemKeyspace . persistLocalMetadata ( ) ; 
 + / / Even though we don ' t use MessagingService , access the static NettyFactory 
 + / / instance here so that we start the static event loop state 
 + / / ( e . g . acceptGroup , inboundGroup , outboundGroup , etc . . . ) . We can remove this 
 + / / once we actually use the MessagingService to communicate between nodes 
 + NettyFactory . instance . getClass ( ) ; 
 } ) . accept ( config ) ; 
 } 
 
 @ @ - 330 , 10 + 340 , 10 @ @ public class Instance extends InvokableInstance 
 runOnInstance ( ( ) - > { 
 Throwable error = null ; 
 error = runAndMergeThrowable ( error , 
 + CompactionManager . instance : : forceShutdown , 
 BatchlogManager . instance : : shutdown , 
 HintsService . instance : : shutdownBlocking , 
 CommitLog . instance : : shutdownBlocking , 
 - CompactionManager . instance : : forceShutdown , 
 Gossiper . instance : : stop , 
 SecondaryIndexManager : : shutdownExecutors , 
 MessagingService . instance ( ) : : shutdown , 
 @ @ - 347 , 8 + 357 , 12 @ @ public class Instance extends InvokableInstance 
 StageManager : : shutdownAndWait , 
 SharedExecutorPool . SHARED : : shutdown , 
 Memtable . MEMORY _ POOL : : shutdown , 
 - ScheduledExecutors : : shutdownAndWait ) ; 
 + ScheduledExecutors : : shutdownAndWait , 
 + SSTableReader : : shutdownBlocking ) ; 
 + 
 error = shutdownAndWait ( error , ActiveRepairService . repairCommandExecutor ) ; 
 + LoggerContext loggerContext = ( LoggerContext ) LoggerFactory . getILoggerFactory ( ) ; 
 + loggerContext . stop ( ) ; 
 Throwables . maybeFail ( error ) ; 
 } ) ; 
 } 
 @ @ - 357 , 25 + 371 , 11 @ @ public class Instance extends InvokableInstance 
 { 
 return runAndMergeThrowable ( existing , ( ) - > { 
 executor . shutdownNow ( ) ; 
 - executor . awaitTermination ( 5 , TimeUnit . SECONDS ) ; 
 + executor . awaitTermination ( 20 , TimeUnit . SECONDS ) ; 
 assert executor . isTerminated ( ) & & executor . isShutdown ( ) : executor ; 
 } ) ; 
 } 
 
 - private static Throwable runAndMergeThrowable ( Throwable existing , ThrowingRunnable runnable ) 
 - { 
 - try 
 - { 
 - runnable . run ( ) ; 
 - } 
 - catch ( Throwable t ) 
 - { 
 - return Throwables . merge ( existing , t ) ; 
 - } 
 - 
 - return existing ; 
 - } 
 - 
 private static Throwable runAndMergeThrowable ( Throwable existing , ThrowingRunnable . . . runnables ) 
 { 
 for ( ThrowingRunnable runnable : runnables ) 
 diff - - git a / test / distributed / org / apache / cassandra / distributed / TestCluster . java b / test / distributed / org / apache / cassandra / distributed / TestCluster . java 
 index 2b979ee . . cc6cf81 100644 
 - - - a / test / distributed / org / apache / cassandra / distributed / TestCluster . java 
 + + + b / test / distributed / org / apache / cassandra / distributed / TestCluster . java 
 @ @ - 31 , 16 + 31 , 21 @ @ import java . util . HashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Set ; 
 + import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . Executors ; 
 import java . util . concurrent . Future ; 
 import java . util . concurrent . TimeUnit ; 
 + import java . util . concurrent . TimeoutException ; 
 import java . util . function . Consumer ; 
 import java . util . function . IntFunction ; 
 import java . util . stream . Collectors ; 
 
 import com . google . common . collect . Sets ; 
 
 + import io . netty . util . concurrent . FastThreadLocal ; 
 + import io . netty . util . concurrent . FastThreadLocalThread ; 
 + import io . netty . util . internal . InternalThreadLocalMap ; 
 import org . apache . cassandra . concurrent . NamedThreadFactory ; 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . ConsistencyLevel ; 
 @ @ - 79 , 7 + 84 , 7 @ @ import org . apache . cassandra . utils . concurrent . SimpleCondition ; 
 * / 
 public class TestCluster implements AutoCloseable 
 { 
 - private static ExecutorService exec = Executors . newCachedThreadPool ( new NamedThreadFactory ( " cluster - async - tasks " ) ) ; 
 + private final ExecutorService exec = Executors . newCachedThreadPool ( new NamedThreadFactory ( " cluster - async - tasks " ) ) ; 
 
 private final File root ; 
 private final List < Instance > instances ; 
 @ @ - 271 , 19 + 276 , 37 @ @ public class TestCluster implements AutoCloseable 
 } 
 
 @ Override 
 - public void close ( ) 
 + public void close ( ) throws InterruptedException , TimeoutException , ExecutionException 
 { 
 List < Future < ? > > futures = instances . stream ( ) 
 . map ( i - > exec . submit ( i : : shutdown ) ) 
 . collect ( Collectors . toList ( ) ) ; 
 
 - / / withThreadLeakCheck ( futures ) ; 
 - 
 / / Make sure to only delete directory when threads are stopped 
 - exec . submit ( ( ) - > { 
 + Future combined = exec . submit ( ( ) - > { 
 FBUtilities . waitOnFutures ( futures ) ; 
 FileUtils . deleteRecursive ( root ) ; 
 } ) ; 
 + 
 + combined . get ( 60 , TimeUnit . SECONDS ) ; 
 + 
 + exec . shutdownNow ( ) ; 
 + exec . awaitTermination ( 10 , TimeUnit . SECONDS ) ; 
 + 
 + / / withThreadLeakCheck ( futures ) ; 
 + Set < Thread > threadSet = Thread . getAllStackTraces ( ) . keySet ( ) ; 
 + for ( Thread thread : threadSet ) 
 + { 
 + if ( thread instanceof FastThreadLocalThread ) 
 + ( ( FastThreadLocalThread ) thread ) . setThreadLocalMap ( null ) ; 
 + } 
 + 
 + InternalThreadLocalMap . remove ( ) ; 
 + InternalThreadLocalMap . destroy ( ) ; 
 + 
 + FastThreadLocal . removeAll ( ) ; 
 + FastThreadLocal . destroy ( ) ; 
 + System . gc ( ) ; 
 } 
 
 / / We do not want this check to run every time until we fix problems with tread stops

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / concurrent / ContinuationStage . java b / src / java / org / apache / cassandra / concurrent / ContinuationStage . java 
 index 0c5291d . . d8bdfc0 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / ContinuationStage . java 
 + + + b / src / java / org / apache / cassandra / concurrent / ContinuationStage . java 
 @ @ - 85 , 7 + 85 , 7 @ @ public class ContinuationStage implements IStage 
 return executorService _ . isShutdown ( ) ; 
 } 
 
 - public long getTaskCount ( ) { 
 + public long getPendingTasks ( ) { 
 return ( executorService _ . getTaskCount ( ) - executorService _ . getCompletedTaskCount ( ) ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 index b72ed35 . . 51faa4c 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 @ @ - 19 , 10 + 19 , 12 @ @ 
 package org . apache . cassandra . concurrent ; 
 
 import java . util . concurrent . * ; 
 + import java . lang . management . ManagementFactory ; 
 
 - import org . apache . cassandra . utils . LogUtil ; 
 import org . apache . log4j . Logger ; 
 - import org . apache . cassandra . utils . * ; 
 + 
 + import javax . management . MBeanServer ; 
 + import javax . management . ObjectName ; 
 
 / * * 
 * This is a wrapper class for the < i > ScheduledThreadPoolExecutor < / i > . It provides an implementation 
 @ @ - 32 , 7 + 34 , 7 @ @ import org . apache . cassandra . utils . * ; 
 * Author : Avinash Lakshman ( alakshman @ facebook . com ) & Prashant Malik ( pmalik @ facebook . com ) 
 * / 
 
 - public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor 
 + public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements DebuggableThreadPoolExecutorMBean 
 { 
 private static Logger logger _ = Logger . getLogger ( DebuggableThreadPoolExecutor . class ) ; 
 
 @ @ - 46 , 12 + 48 , 26 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor 
 long keepAliveTime , 
 TimeUnit unit , 
 BlockingQueue < Runnable > workQueue , 
 - ThreadFactory threadFactory ) 
 + ThreadFactoryImpl threadFactory ) 
 { 
 super ( corePoolSize , maximumPoolSize , keepAliveTime , unit , workQueue , threadFactory ) ; 
 super . prestartAllCoreThreads ( ) ; 
 + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 + try 
 + { 
 + mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . concurrent : type = " + threadFactory . id _ ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 } 
 - 
 + 
 + public long getPendingTasks ( ) 
 + { 
 + return getTaskCount ( ) - getCompletedTaskCount ( ) ; 
 + } 
 + 
 / * 
 * 
 * ( non - Javadoc ) 
 diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutorMBean . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutorMBean . java 
 new file mode 100644 
 index 0000000 . . 798a888 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutorMBean . java 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + package org . apache . cassandra . concurrent ; 
 + 
 + public interface DebuggableThreadPoolExecutorMBean 
 + { 
 + public long getPendingTasks ( ) ; 
 + } 
 diff - - git a / src / java / org / apache / cassandra / concurrent / IStage . java b / src / java / org / apache / cassandra / concurrent / IStage . java 
 index 1ed9fc0 . . f33e3cb 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / IStage . java 
 + + + b / src / java / org / apache / cassandra / concurrent / IStage . java 
 @ @ - 116 , 5 + 116 , 5 @ @ public interface IStage 
 * pending on this stage to be executed . 
 * @ return task count . 
 * / 
 - public long getTaskCount ( ) ; 
 + public long getPendingTasks ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / concurrent / MultiThreadedStage . java b / src / java / org / apache / cassandra / concurrent / MultiThreadedStage . java 
 index 75a2789 . . bbdcad6 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / MultiThreadedStage . java 
 + + + b / src / java / org / apache / cassandra / concurrent / MultiThreadedStage . java 
 @ @ - 92 , 7 + 92 , 7 @ @ public class MultiThreadedStage implements IStage 
 return executorService _ . isShutdown ( ) ; 
 } 
 
 - public long getTaskCount ( ) { 
 - return ( executorService _ . getTaskCount ( ) - executorService _ . getCompletedTaskCount ( ) ) ; 
 + public long getPendingTasks ( ) { 
 + return executorService _ . getPendingTasks ( ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / concurrent / SingleThreadedContinuationStage . java b / src / java / org / apache / cassandra / concurrent / SingleThreadedContinuationStage . java 
 index 7a4cd33 . . fa1fcff 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / SingleThreadedContinuationStage . java 
 + + + b / src / java / org / apache / cassandra / concurrent / SingleThreadedContinuationStage . java 
 @ @ - 92 , 7 + 92 , 7 @ @ public class SingleThreadedContinuationStage implements IStage 
 return executorService _ . isShutdown ( ) ; 
 } 
 
 - public long getTaskCount ( ) { 
 + public long getPendingTasks ( ) { 
 return ( executorService _ . getTaskCount ( ) - executorService _ . getCompletedTaskCount ( ) ) ; 
 } 
 / * Finished implementing the IStage interface methods * / 
 diff - - git a / src / java / org / apache / cassandra / concurrent / SingleThreadedStage . java b / src / java / org / apache / cassandra / concurrent / SingleThreadedStage . java 
 index 27ae871 . . 24480d3 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / SingleThreadedStage . java 
 + + + b / src / java / org / apache / cassandra / concurrent / SingleThreadedStage . java 
 @ @ - 94 , 8 + 94 , 7 @ @ public class SingleThreadedStage implements IStage 
 return executorService _ . isShutdown ( ) ; 
 } 
 
 - public long getTaskCount ( ) { 
 - return ( executorService _ . getTaskCount ( ) - executorService _ . getCompletedTaskCount ( ) ) ; 
 + public long getPendingTasks ( ) { 
 + return executorService _ . getPendingTasks ( ) ; 
 } 
 - / * Finished implementing the IStage interface methods * / 
 } 
 diff - - git a / src / java / org / apache / cassandra / concurrent / StageManager . java b / src / java / org / apache / cassandra / concurrent / StageManager . java 
 index c3fc284 . . f771588 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / StageManager . java 
 + + + b / src / java / org / apache / cassandra / concurrent / StageManager . java 
 @ @ - 23 , 8 + 23 , 6 @ @ import java . util . Map ; 
 import java . util . Set ; 
 import java . util . concurrent . ExecutorService ; 
 
 - import org . apache . cassandra . continuations . Suspendable ; 
 - 
 
 / * * 
 * This class manages all stages that exist within a process . The application registers 
 @ @ - 101 , 7 + 99 , 7 @ @ public class StageManager 
 * / 
 public static long getStageTaskCount ( String stage ) 
 { 
 - return stageQueues _ . get ( stage ) . getTaskCount ( ) ; 
 + return stageQueues _ . get ( stage ) . getPendingTasks ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 1f283b6 . . 2787b63 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1432 , 11 + 1432 , 6 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 return memtableSwitchCount ; 
 } 
 
 - public int getMemtableTasks ( ) 
 - { 
 - return memtable _ . get ( ) . getPendingTasks ( ) ; 
 - } 
 - 
 / * * 
 * clears out all data associated with this ColumnFamily . 
 * For use in testing . 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 index 75840b8 . . 94e91c3 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 @ @ - 50 , 11 + 50 , 6 @ @ public interface ColumnFamilyStoreMBean 
 public int getMemtableSwitchCount ( ) ; 
 
 / * * 
 - * @ return the number of tasks waiting to run on the memtable executor 
 - * / 
 - public int getMemtableTasks ( ) ; 
 - 
 - / * * 
 * Triggers an immediate memtable flush . 
 * / 
 public void forceFlush ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java 
 index ae926d8 . . 9eeec34 100644 
 - - - a / src / java / org / apache / cassandra / db / Memtable . java 
 + + + b / src / java / org / apache / cassandra / db / Memtable . java 
 @ @ - 45 , 7 + 45 , 7 @ @ public class Memtable implements Comparable < Memtable > 
 { 
 	 private static Logger logger _ = Logger . getLogger ( Memtable . class ) ; 
 private static Set < ExecutorService > runningExecutorServices _ = new NonBlockingHashSet < ExecutorService > ( ) ; 
 - private boolean isFrozen _ ; 
 + private static AtomicInteger executorCount _ = new AtomicInteger ( 0 ) ; 
 
 public static void shutdown ( ) 
 { 
 @ @ - 56 , 6 + 56 , 7 @ @ public class Memtable implements Comparable < Memtable > 
 } 
 
 private MemtableThreadPoolExecutor executor _ ; 
 + private boolean isFrozen _ ; 
 
 private int threshold _ = DatabaseDescriptor . getMemtableSize ( ) * 1024 * 1024 ; 
 private int thresholdCount _ = ( int ) ( DatabaseDescriptor . getMemtableObjectCount ( ) * 1024 * 1024 ) ; 
 @ @ - 72 , 12 + 73 , 12 @ @ public class Memtable implements Comparable < Memtable > 
 
 Memtable ( String table , String cfName ) 
 { 
 - executor _ = new MemtableThreadPoolExecutor ( ) ; 
 - runningExecutorServices _ . add ( executor _ ) ; 
 - 
 table _ = table ; 
 cfName _ = cfName ; 
 creationTime _ = System . currentTimeMillis ( ) ; 
 + 
 + executor _ = new MemtableThreadPoolExecutor ( ) ; 
 + runningExecutorServices _ . add ( executor _ ) ; 
 } 
 
 class Putter implements Runnable 
 @ @ - 169 , 11 + 170 , 6 @ @ public class Memtable implements Comparable < Memtable > 
 	 return cfName _ ; 
 } 
 
 - int getPendingTasks ( ) 
 - { 
 - 	 return ( int ) ( executor _ . getTaskCount ( ) - executor _ . getCompletedTaskCount ( ) ) ; 
 - } 
 - 
 private synchronized void enqueueFlush ( CommitLog . CommitLogContext cLogCtx ) 
 { 
 if ( ! isFrozen _ ) 
 @ @ - 367 , 7 + 363 , 7 @ @ public class Memtable implements Comparable < Memtable > 
 
 public MemtableThreadPoolExecutor ( ) 
 { 
 - super ( " FAST - MEMTABLE - POOL " ) ; 
 + super ( " MEMTABLE - POOL - " + cfName _ + executorCount _ . addAndGet ( 1 ) ) ; 
 } 
 
 protected void terminated ( ) 
 diff - - git a / src / java / org / apache / cassandra / net / MessageDeserializationTask . java b / src / java / org / apache / cassandra / net / MessageDeserializationTask . java 
 index d21e4c6 . . 0cd6578 100644 
 - - - a / src / java / org / apache / cassandra / net / MessageDeserializationTask . java 
 + + + b / src / java / org / apache / cassandra / net / MessageDeserializationTask . java 
 @ @ - 48 , 23 + 48 , 20 @ @ class MessageDeserializationTask implements Runnable 
 
 public void run ( ) 
 { 
 - 	 / * For DEBUG only . Printing queue length * / 
 - 	 DebuggableThreadPoolExecutor es = ( DebuggableThreadPoolExecutor ) MessagingService . getDeserilizationExecutor ( ) ; 
 - logger _ . debug ( " Message Deserialization Task : " + ( es . getTaskCount ( ) - es . getCompletedTaskCount ( ) ) ) ; 
 - / * END DEBUG * / 
 + Message message = null ; 
 try 
 - { 
 - Message message = ( Message ) serializer _ . deserialize ( bytes _ ) ; 
 - 
 - if ( message ! = null ) 
 - { 
 - message = SinkManager . processServerMessageSink ( message ) ; 
 - MessagingService . receive ( message ) ; 
 - } 
 + { 
 + message = serializer _ . deserialize ( bytes _ ) ; 
 } 
 - catch ( IOException ex ) 
 - { 
 - logger _ . warn ( LogUtil . throwableToString ( ex ) ) ; 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + 
 + if ( message ! = null ) 
 + { 
 + message = SinkManager . processServerMessageSink ( message ) ; 
 + MessagingService . receive ( message ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / net / MessageSerializationTask . java b / src / java / org / apache / cassandra / net / MessageSerializationTask . java 
 index 9cee314 . . 3078a9a 100644 
 - - - a / src / java / org / apache / cassandra / net / MessageSerializationTask . java 
 + + + b / src / java / org / apache / cassandra / net / MessageSerializationTask . java 
 @ @ - 52 , 11 + 52 , 6 @ @ class MessageSerializationTask implements Runnable 
 
 public void run ( ) 
 { 
 - 	 / * For DEBUG only . Printing queue length * / 
 - 	 DebuggableThreadPoolExecutor es = ( DebuggableThreadPoolExecutor ) MessagingService . getWriteExecutor ( ) ; 
 - logger _ . debug ( " Message Serialization Task : " + ( es . getTaskCount ( ) - es . getCompletedTaskCount ( ) ) ) ; 
 - / * END DEBUG * / 
 - 
 / * Adding the message to be serialized in the TLS . For accessing in the afterExecute ( ) * / 
 Context ctx = new Context ( ) ; 
 ctx . put ( this . getClass ( ) . getName ( ) , message _ ) ; 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index 33b9e04 . . bdc46d1 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 18 , 43 + 18 , 32 @ @ 
 
 package org . apache . cassandra . net ; 
 
 - import java . io . * ; 
 - import java . lang . management . ManagementFactory ; 
 - import java . net . * ; 
 - import java . security . MessageDigest ; 
 - import java . util . * ; 
 - import java . nio . ByteBuffer ; 
 - import java . util . concurrent . * ; 
 - import java . util . concurrent . atomic . AtomicBoolean ; 
 - import java . util . concurrent . locks . ReentrantLock ; 
 - import java . nio . channels . * ; 
 import org . apache . cassandra . concurrent . * ; 
 - import org . apache . cassandra . net . io . * ; 
 - import org . apache . cassandra . utils . * ; 
 - import javax . management . MBeanServer ; 
 - import javax . management . ObjectName ; 
 - import javax . xml . bind . * ; 
 - import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; 
 - import org . apache . cassandra . concurrent . IStage ; 
 - import org . apache . cassandra . concurrent . MultiThreadedStage ; 
 - import org . apache . cassandra . concurrent . StageManager ; 
 - import org . apache . cassandra . concurrent . ThreadFactoryImpl ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . net . http . HttpConnectionHandler ; 
 import org . apache . cassandra . net . io . SerializerType ; 
 - import org . apache . cassandra . net . sink . SinkManager ; 
 - import org . apache . cassandra . utils . Cachetable ; 
 - import org . apache . cassandra . utils . GuidGenerator ; 
 - import org . apache . cassandra . utils . HashingSchemes ; 
 - import org . apache . cassandra . utils . ICachetable ; 
 - import org . apache . cassandra . utils . LogUtil ; 
 + import org . apache . cassandra . utils . * ; 
 import org . apache . log4j . Logger ; 
 
 + import java . io . IOException ; 
 + import java . net . MulticastSocket ; 
 + import java . net . ServerSocket ; 
 + import java . nio . ByteBuffer ; 
 + import java . nio . channels . SelectionKey ; 
 + import java . nio . channels . ServerSocketChannel ; 
 + import java . security . MessageDigest ; 
 + import java . util . * ; 
 + import java . util . concurrent . ExecutorService ; 
 + import java . util . concurrent . LinkedBlockingQueue ; 
 + import java . util . concurrent . TimeUnit ; 
 + import java . util . concurrent . atomic . AtomicBoolean ; 
 + import java . util . concurrent . locks . ReentrantLock ; 
 + 
 / * * 
 * Author : Avinash Lakshman ( alakshman @ facebook . com ) & Prashant Malik ( pmalik @ facebook . com ) 
 * / 
 
 - public class MessagingService implements IMessagingService , MessagingServiceMBean 
 + public class MessagingService implements IMessagingService 
 { 
 private static boolean debugOn _ = false ; 
 
 @ @ - 243 , 18 + 232 , 6 @ @ public class MessagingService implements IMessagingService , MessagingServiceMBea 
 return result ; 
 } 
 
 - public long getMessagingSerializerTaskCount ( ) 
 - { 
 - DebuggableThreadPoolExecutor dstp = ( DebuggableThreadPoolExecutor ) messageSerializerExecutor _ ; 
 - return dstp . getTaskCount ( ) - dstp . getCompletedTaskCount ( ) ; 
 - } 
 - 
 - public long getMessagingReceiverTaskCount ( ) 
 - { 
 - DebuggableThreadPoolExecutor dstp = ( DebuggableThreadPoolExecutor ) messageDeserializationExecutor _ ; 
 - return dstp . getTaskCount ( ) - dstp . getCompletedTaskCount ( ) ; 
 - } 
 - 
 public void listen ( EndPoint localEp , boolean isHttp ) throws IOException 
 { 
 ServerSocketChannel serverChannel = ServerSocketChannel . open ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingServiceMBean . java b / src / java / org / apache / cassandra / net / MessagingServiceMBean . java 
 deleted file mode 100644 
 index 3e0a57c . . 0000000 
 - - - a / src / java / org / apache / cassandra / net / MessagingServiceMBean . java 
 + + + / dev / null 
 @ @ - 1 , 29 + 0 , 0 @ @ 
 - / * * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package org . apache . cassandra . net ; 
 - 
 - / * * 
 - * Author : Avinash Lakshman ( alakshman @ facebook . com ) & Prashant Malik ( pmalik @ facebook . com ) 
 - * / 
 - 
 - public interface MessagingServiceMBean 
 - { 
 - public long getMessagingSerializerTaskCount ( ) ; 
 - public long getMessagingReceiverTaskCount ( ) ; 
 - } 
 diff - - git a / src / java / org / apache / cassandra / net / TcpConnection . java b / src / java / org / apache / cassandra / net / TcpConnection . java 
 index ebd507d . . 814039f 100644 
 - - - a / src / java / org / apache / cassandra / net / TcpConnection . java 
 + + + b / src / java / org / apache / cassandra / net / TcpConnection . java 
 @ @ - 174 , 7 + 174 , 7 @ @ public class TcpConnection extends SelectionKeyHandler implements Comparable 
 byte [ ] data = serializer _ . serialize ( message ) ; 
 if ( data . length > 0 ) 
 { 
 - boolean listening = ( message . getFrom ( ) . equals ( EndPoint . randomLocalEndPoint _ ) ) ? false : true ; 
 + boolean listening = ! message . getFrom ( ) . equals ( EndPoint . randomLocalEndPoint _ ) ; 
 ByteBuffer buffer = MessagingService . packIt ( data , false , false , listening ) ; 
 synchronized ( this ) 
 { 
 @ @ - 184 , 7 + 184 , 6 @ @ public class TcpConnection extends SelectionKeyHandler implements Comparable 
 return ; 
 } 
 
 - logger _ . debug ( " Sending packets of size " + data . length ) ; 
 socketChannel _ . write ( buffer ) ; 
 
 if ( buffer . remaining ( ) > 0 ) 
 diff - - git a / src / java / org / apache / cassandra / net / UdpConnection . java b / src / java / org / apache / cassandra / net / UdpConnection . java 
 index 0ea2aec . . 53fddbb 100644 
 - - - a / src / java / org / apache / cassandra / net / UdpConnection . java 
 + + + b / src / java / org / apache / cassandra / net / UdpConnection . java 
 @ @ - 78 , 7 + 78 , 7 @ @ public class UdpConnection extends SelectionKeyHandler 
 byte [ ] data = bos . toByteArray ( ) ; 
 if ( data . length > 0 ) 
 { 
 - logger _ . debug ( " Size of Gossip packet " + data . length ) ; 
 + logger _ . trace ( " Size of Gossip packet " + data . length ) ; 
 byte [ ] protocol = BasicUtilities . intToByteArray ( protocol _ ) ; 
 ByteBuffer buffer = ByteBuffer . allocate ( data . length + protocol . length ) ; 
 buffer . put ( protocol ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index f8b71e6 . . 8840685 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 263 , 7 + 263 , 6 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 * / 
 private void init ( ) 
 { 
 - / / Register this instance with JMX 
 try 
 { 
 MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ;
