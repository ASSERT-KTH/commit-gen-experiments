BLEU SCORE: 0.005774363155184915

TEST MSG: use parameterized logging
GENERATED MSG: add isTraceEnabled checks similar to isDebugEnabled . patch by jbellis for CASSANDRA - 174

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java <nl> index 4a1280c . . 5cd7c8f 100644 <nl> - - - a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java <nl> + + + b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java <nl> @ @ - 120 , 7 + 120 , 7 @ @ public class YamlConfigurationLoader implements ConfigurationLoader <nl> configMap . put ( sensitiveKey , " < REDACTED > " ) ; <nl> } <nl> } <nl> - logger . info ( " Node configuration : [ " + Joiner . on ( " ; " ) . join ( configMap . entrySet ( ) ) + " ] " ) ; <nl> + logger . info ( " Node configuration : [ { } ] " , Joiner . on ( " ; " ) . join ( configMap . entrySet ( ) ) ) ; <nl> } <nl> <nl> private static class MissingPropertiesChecker extends PropertyUtils <nl> diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> index 4ecf235 . . 291f312 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> @ @ - 226 , 7 + 226 , 7 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean <nl> long now = System . nanoTime ( ) ; <nl> double phi = hbWnd . phi ( now ) ; <nl> if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( " PHI for " + ep + " : " + phi ) ; <nl> + logger . trace ( " PHI for { } : { } " , ep , phi ) ; <nl> <nl> if ( PHI _ FACTOR * phi > getPhiConvictThreshold ( ) ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / gms / GossipDigestSynVerbHandler . java b / src / java / org / apache / cassandra / gms / GossipDigestSynVerbHandler . java <nl> index 0f3a1e6 . . a1d1d9b 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / GossipDigestSynVerbHandler . java <nl> + + + b / src / java / org / apache / cassandra / gms / GossipDigestSynVerbHandler . java <nl> @ @ - 68 , 7 + 68 , 7 @ @ public class GossipDigestSynVerbHandler implements IVerbHandler < GossipDigestSyn > <nl> sb . append ( gDigest ) ; <nl> sb . append ( " " ) ; <nl> } <nl> - logger . trace ( " Gossip syn digests are : " + sb . toString ( ) ) ; <nl> + logger . trace ( " Gossip syn digests are : { } " , sb ) ; <nl> } <nl> <nl> doSort ( gDigestList ) ; <nl> diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index a7c4f97 . . 690f813 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 130 , 7 + 130 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> / * Update the local heartbeat counter . * / <nl> endpointStateMap . get ( FBUtilities . getBroadcastAddress ( ) ) . getHeartBeatState ( ) . updateHeartBeat ( ) ; <nl> if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( " My heartbeat is now " + endpointStateMap . get ( FBUtilities . getBroadcastAddress ( ) ) . getHeartBeatState ( ) . getHeartBeatVersion ( ) ) ; <nl> + logger . trace ( " My heartbeat is now { } " , endpointStateMap . get ( FBUtilities . getBroadcastAddress ( ) ) . getHeartBeatState ( ) . getHeartBeatVersion ( ) ) ; <nl> final List < GossipDigest > gDigests = new ArrayList < GossipDigest > ( ) ; <nl> Gossiper . instance . makeRandomGossipDigest ( gDigests ) ; <nl> <nl> @ @ - 413 , 7 + 413 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> sb . append ( gDigest ) ; <nl> sb . append ( " " ) ; <nl> } <nl> - logger . trace ( " Gossip Digests are : " + sb . toString ( ) ) ; <nl> + logger . trace ( " Gossip Digests are : { } " , sb ) ; <nl> } <nl> } <nl> <nl> @ @ - 745 , 7 + 745 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> { <nl> reqdEndpointState = new EndpointState ( epState . getHeartBeatState ( ) ) ; <nl> if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( " local heartbeat version " + localHbVersion + " greater than " + version + " for " + forEndpoint ) ; <nl> + logger . trace ( " local heartbeat version { } greater than { } for { } " , localHbVersion , version , forEndpoint ) ; <nl> } <nl> / * Accumulate all application states whose versions are greater than " version " variable * / <nl> for ( Entry < ApplicationState , VersionedValue > entry : epState . getApplicationStateMap ( ) . entrySet ( ) ) <nl> @ @ - 759 , 7 + 759 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> } <nl> final ApplicationState key = entry . getKey ( ) ; <nl> if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( " Adding state " + key + " : " + value . value ) ; <nl> + logger . trace ( " Adding state { } : { } " , key , value . value ) ; <nl> reqdEndpointState . addApplicationState ( key , value ) ; <nl> } <nl> } <nl> @ @ - 863 , 12 + 863 , 12 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> liveEndpoints . add ( addr ) ; <nl> unreachableEndpoints . remove ( addr ) ; <nl> expireTimeEndpointMap . remove ( addr ) ; <nl> - logger . debug ( " removing expire time for endpoint : " + addr ) ; <nl> + logger . debug ( " removing expire time for endpoint : { } " , addr ) ; <nl> logger . info ( " InetAddress { } is now UP " , addr ) ; <nl> for ( IEndpointStateChangeSubscriber subscriber : subscribers ) <nl> subscriber . onAlive ( addr , localState ) ; <nl> if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( " Notified " + subscribers ) ; <nl> + logger . trace ( " Notified { } " , subscribers ) ; <nl> } <nl> <nl> private void markDead ( InetAddress addr , EndpointState localState ) <nl> @ @ - 882 , 7 + 882 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> for ( IEndpointStateChangeSubscriber subscriber : subscribers ) <nl> subscriber . onDead ( addr , localState ) ; <nl> if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( " Notified " + subscribers ) ; <nl> + logger . trace ( " Notified { } " , subscribers ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 901 , 7 + 901 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> logger . info ( " Node { } is now part of the cluster " , ep ) ; <nl> } <nl> if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( " Adding endpoint state for " + ep ) ; <nl> + logger . trace ( " Adding endpoint state for { } " , ep ) ; <nl> endpointStateMap . put ( ep , epState ) ; <nl> <nl> / / the node restarted : it is up to the subscriber to take whatever action is necessary <nl> @ @ - 945 , 7 + 945 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> if ( justRemovedEndpoints . containsKey ( ep ) ) <nl> { <nl> if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( " Ignoring gossip for " + ep + " because it is quarantined " ) ; <nl> + logger . trace ( " Ignoring gossip for { } because it is quarantined " , ep ) ; <nl> continue ; <nl> } <nl> <nl> @ @ - 960 , 12 + 960 , 12 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> int localGeneration = localEpStatePtr . getHeartBeatState ( ) . getGeneration ( ) ; <nl> int remoteGeneration = remoteState . getHeartBeatState ( ) . getGeneration ( ) ; <nl> if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( ep + " local generation " + localGeneration + " , remote generation " + remoteGeneration ) ; <nl> + logger . trace ( " { } local generation { } , remote generation { } " , ep , localGeneration , remoteGeneration ) ; <nl> <nl> if ( remoteGeneration > localGeneration ) <nl> { <nl> if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( " Updating heartbeat state generation to " + remoteGeneration + " from " + localGeneration + " for " + ep ) ; <nl> + logger . trace ( " Updating heartbeat state generation to { } from { } for { } " , remoteGeneration , localGeneration , ep ) ; <nl> / / major state change will handle the update by inserting the remote state directly <nl> handleMajorStateChange ( ep , remoteState ) ; <nl> } <nl> @ @ - 980 , 14 + 980 , 14 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> applyNewStates ( ep , localEpStatePtr , remoteState ) ; <nl> } <nl> else if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( " Ignoring remote version " + remoteMaxVersion + " < = " + localMaxVersion + " for " + ep ) ; <nl> + logger . trace ( " Ignoring remote version { } < = { } for { } " , remoteMaxVersion , localMaxVersion , ep ) ; <nl> if ( ! localEpStatePtr . isAlive ( ) & & ! isDeadState ( localEpStatePtr ) ) / / unless of course , it was dead <nl> markAlive ( ep , localEpStatePtr ) ; <nl> } <nl> else <nl> { <nl> if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( " Ignoring remote generation " + remoteGeneration + " < " + localGeneration ) ; <nl> + logger . trace ( " Ignoring remote generation { } < { } " , remoteGeneration , localGeneration ) ; <nl> } <nl> } <nl> else <nl> @ @ - 1006 , 7 + 1006 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> <nl> localState . setHeartBeatState ( remoteState . getHeartBeatState ( ) ) ; <nl> if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( " Updating heartbeat state version to " + localState . getHeartBeatState ( ) . getHeartBeatVersion ( ) + " from " + oldVersion + " for " + addr + " . . . " ) ; <nl> + logger . trace ( " Updating heartbeat state version to { } from { } for { } . . . " , localState . getHeartBeatState ( ) . getHeartBeatVersion ( ) , oldVersion , addr ) ; <nl> <nl> / / we need to make two loops here , one to apply , then another to notify , this way all states in an update are present and current when the notifications are received <nl> for ( Entry < ApplicationState , VersionedValue > remoteEntry : remoteState . getApplicationStateMap ( ) . entrySet ( ) ) <nl> @ @ - 1047 , 7 + 1047 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> / * We are here since we have no data for this endpoint locally so request everthing . * / <nl> deltaGossipDigestList . add ( new GossipDigest ( gDigest . getEndpoint ( ) , remoteGeneration , 0 ) ) ; <nl> if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( " requestAll for " + gDigest . getEndpoint ( ) ) ; <nl> + logger . trace ( " requestAll for { } " , gDigest . getEndpoint ( ) ) ; <nl> } <nl> <nl> / * Send all the data with version greater than maxRemoteVersion * / <nl> @ @ - 1152 , 7 + 1152 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> / / notify snitches that Gossiper is about to start <nl> DatabaseDescriptor . getEndpointSnitch ( ) . gossiperStarting ( ) ; <nl> if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( " gossip started with generation " + localState . getHeartBeatState ( ) . getGeneration ( ) ) ; <nl> + logger . trace ( " gossip started with generation { } " , localState . getHeartBeatState ( ) . getGeneration ( ) ) ; <nl> <nl> scheduledGossipTask = executor . scheduleWithFixedDelay ( new GossipTask ( ) , <nl> Gossiper . intervalInMillis , <nl> @ @ - 1244 , 7 + 1244 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> endpointStateMap . put ( ep , epState ) ; <nl> unreachableEndpoints . put ( ep , System . nanoTime ( ) ) ; <nl> if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( " Adding saved endpoint " + ep + " " + epState . getHeartBeatState ( ) . getGeneration ( ) ) ; <nl> + logger . trace ( " Adding saved endpoint { } { } " , ep , epState . getHeartBeatState ( ) . getGeneration ( ) ) ; <nl> } <nl> <nl> public void addLocalApplicationState ( ApplicationState state , VersionedValue value ) <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> index a7fd881 . . b7e8f05 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> @ @ - 158 , 7 + 158 , 7 @ @ public class SSTableWriter extends SSTable <nl> first = lastWrittenKey ; <nl> <nl> if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( " wrote " + decoratedKey + " at " + dataPosition ) ; <nl> + logger . trace ( " wrote { } at { } " , decoratedKey , dataPosition ) ; <nl> iwriter . append ( decoratedKey , index ) ; <nl> dbuilder . addPotentialBoundary ( dataPosition ) ; <nl> } <nl> @ @ - 471 , 7 + 471 , 7 @ @ public class SSTableWriter extends SSTable <nl> } <nl> <nl> if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( " wrote index entry : " + indexEntry + " at " + indexPosition ) ; <nl> + logger . trace ( " wrote index entry : { } at { } " , indexEntry , indexPosition ) ; <nl> <nl> summary . maybeAddEntry ( key , indexPosition ) ; <nl> builder . addPotentialBoundary ( indexPosition ) ; <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index 9713576 . . 73662c1 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 622 , 7 + 622 , 7 @ @ public final class MessagingService implements MessagingServiceMBean <nl> public void sendOneWay ( MessageOut message , int id , InetAddress to ) <nl> { <nl> if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( FBUtilities . getBroadcastAddress ( ) + " sending " + message . verb + " to " + id + " @ " + to ) ; <nl> + logger . trace ( " { } sending { } to { } @ { } " , FBUtilities . getBroadcastAddress ( ) , message . verb , id , to ) ; <nl> <nl> if ( to . equals ( FBUtilities . getBroadcastAddress ( ) ) ) <nl> logger . trace ( " Message - to - self { } going over MessagingService " , message ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java b / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java <nl> index c2b1814 . . 2e201bf 100644 <nl> - - - a / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java <nl> + + + b / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java <nl> @ @ - 202 , 6 + 202 , 6 @ @ public class PendingRangeCalculatorService extends PendingRangeCalculatorService <nl> tm . setPendingRanges ( keyspaceName , pendingRanges ) ; <nl> <nl> if ( logger . isDebugEnabled ( ) ) <nl> - logger . debug ( " Pending ranges : \ n " + ( pendingRanges . isEmpty ( ) ? " < empty > " : tm . printPendingRanges ( ) ) ) ; <nl> + logger . debug ( " Pending ranges : \ n { } " , ( pendingRanges . isEmpty ( ) ? " < empty > " : tm . printPendingRanges ( ) ) ) ; <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / locator / NetworkTopologyStrategyTest . java b / test / unit / org / apache / cassandra / locator / NetworkTopologyStrategyTest . java <nl> index d4d5a85 . . be93faa 100644 <nl> - - - a / test / unit / org / apache / cassandra / locator / NetworkTopologyStrategyTest . java <nl> + + + b / test / unit / org / apache / cassandra / locator / NetworkTopologyStrategyTest . java <nl> @ @ - 121 , 7 + 121 , 7 @ @ public class NetworkTopologyStrategyTest <nl> byte [ ] ipBytes = new byte [ ] { 10 , ( byte ) dc , ( byte ) rack , ( byte ) ep } ; <nl> InetAddress address = InetAddress . getByAddress ( ipBytes ) ; <nl> StringToken token = new StringToken ( String . format ( " % 02x % 02x % 02x " , ep , rack , dc ) ) ; <nl> - logger . debug ( " adding node " + address + " at " + token ) ; <nl> + logger . debug ( " adding node { } at { } " , address , token ) ; <nl> tokens . put ( address , token ) ; <nl> } <nl> } <nl> @ @ - 137 , 7 + 137 , 7 @ @ public class NetworkTopologyStrategyTest <nl> <nl> Assert . assertEquals ( totalRF , endpoints . size ( ) ) ; <nl> Assert . assertEquals ( totalRF , epSet . size ( ) ) ; <nl> - logger . debug ( testToken + " : " + endpoints . toString ( ) ) ; <nl> + logger . debug ( " { } : { } " , testToken , endpoints ) ; <nl> } <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java b / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java <nl> index f09b6a4 . . ac0b30a 100644 <nl> - - - a / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java <nl> + + + b / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java <nl> @ @ - 131 , 7 + 131 , 7 @ @ public class StreamingTransferTest extends SchemaLoader <nl> private List < String > createAndTransfer ( ColumnFamilyStore cfs , Mutator mutator , boolean transferSSTables ) throws Exception <nl> { <nl> / / write a temporary SSTable , and unregister it <nl> - logger . debug ( " Mutating " + cfs . name ) ; <nl> + logger . debug ( " Mutating { } " , cfs . name ) ; <nl> long timestamp = 1234 ; <nl> for ( int i = 1 ; i < = 3 ; i + + ) <nl> mutator . mutate ( " key " + i , " col " + i , timestamp ) ; <nl> @ @ - 140 , 7 + 140 , 7 @ @ public class StreamingTransferTest extends SchemaLoader <nl> assertEquals ( 1 , cfs . getSSTables ( ) . size ( ) ) ; <nl> <nl> / / transfer the first and last key <nl> - logger . debug ( " Transferring " + cfs . name ) ; <nl> + logger . debug ( " Transferring { } " , cfs . name ) ; <nl> int [ ] offs ; <nl> if ( transferSSTables ) <nl> { <nl> @ @ - 179 , 7 + 179 , 7 @ @ public class StreamingTransferTest extends SchemaLoader <nl> for ( int off : offs ) <nl> keys . add ( " key " + off ) ; <nl> <nl> - logger . debug ( " . . . everything looks good for " + cfs . name ) ; <nl> + logger . debug ( " . . . everything looks good for { } " , cfs . name ) ; <nl> return keys ; <nl> } <nl> <nl> @ @ - 232 , 7 + 232 , 7 @ @ public class StreamingTransferTest extends SchemaLoader <nl> cf . addColumn ( column ( col , " v " , timestamp ) ) ; <nl> cf . addColumn ( new Cell ( cellname ( " birthdate " ) , ByteBufferUtil . bytes ( val ) , timestamp ) ) ; <nl> Mutation rm = new Mutation ( " Keyspace1 " , ByteBufferUtil . bytes ( key ) , cf ) ; <nl> - logger . debug ( " Applying row to transfer " + rm ) ; <nl> + logger . debug ( " Applying row to transfer { } " , rm ) ; <nl> rm . apply ( ) ; <nl> } <nl> } , transferSSTables ) ; <nl> @ @ - 456 , 7 + 456 , 7 @ @ public class StreamingTransferTest extends SchemaLoader <nl> cf . addColumn ( column ( colName , " value " , timestamp ) ) ; <nl> cf . addColumn ( new Cell ( cellname ( " birthdate " ) , ByteBufferUtil . bytes ( new Date ( timestamp ) . toString ( ) ) , timestamp ) ) ; <nl> Mutation rm = new Mutation ( " Keyspace1 " , ByteBufferUtil . bytes ( key ) , cf ) ; <nl> - logger . debug ( " Applying row to transfer " + rm ) ; <nl> + logger . debug ( " Applying row to transfer { } " , rm ) ; <nl> rm . apply ( ) ; <nl> } <nl> } ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> index 520b073 . . 541abfc 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> @ @ - 158 , 7 + 158 , 8 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean <nl> <nl> public void report ( EndPoint ep ) <nl> { <nl> - logger _ . trace ( " reporting " + ep ) ; <nl> + if ( logger _ . isTraceEnabled ( ) ) <nl> + logger _ . trace ( " reporting " + ep ) ; <nl> long now = System . currentTimeMillis ( ) ; <nl> ArrivalWindow heartbeatWindow = arrivalSamples _ . get ( ep ) ; <nl> if ( heartbeatWindow = = null ) <nl> @ @ - 180 , 7 + 181 , 8 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean <nl> / * We need this so that we do not suspect a convict . * / <nl> boolean isConvicted = false ; <nl> double phi = hbWnd . phi ( now ) ; <nl> - logger _ . trace ( " PHI for " + ep + " : " + phi ) ; <nl> + if ( logger _ . isTraceEnabled ( ) ) <nl> + logger _ . trace ( " PHI for " + ep + " : " + phi ) ; <nl> <nl> / * <nl> if ( phi > phiConvictThreshold _ ) <nl> diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index f95a3f1 . . b3127d8 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 73 , 7 + 73 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> if ( ! bVal ) <nl> doGossipToSeed ( message ) ; <nl> <nl> - logger _ . trace ( " Performing status check . . . " ) ; <nl> + if ( logger _ . isTraceEnabled ( ) ) <nl> + logger _ . trace ( " Performing status check . . . " ) ; <nl> doStatusCheck ( ) ; <nl> } <nl> } <nl> @ @ - 336 , 7 + 337 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> sb . append ( gDigest ) ; <nl> sb . append ( " " ) ; <nl> } <nl> - logger _ . trace ( " Gossip Digests are : " + sb . toString ( ) ) ; <nl> + if ( logger _ . isTraceEnabled ( ) ) <nl> + logger _ . trace ( " Gossip Digests are : " + sb . toString ( ) ) ; <nl> } <nl> <nl> public int getCurrentGenerationNumber ( EndPoint endpoint ) <nl> @ @ - 359 , 7 + 361 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> ByteArrayOutputStream bos = new ByteArrayOutputStream ( Gossiper . MAX _ GOSSIP _ PACKET _ SIZE ) ; <nl> DataOutputStream dos = new DataOutputStream ( bos ) ; <nl> GossipDigestAckMessage . serializer ( ) . serialize ( gDigestAckMessage , dos ) ; <nl> - logger _ . trace ( " @ @ @ @ Size of GossipDigestAckMessage is " + bos . toByteArray ( ) . length ) ; <nl> + if ( logger _ . isTraceEnabled ( ) ) <nl> + logger _ . trace ( " @ @ @ @ Size of GossipDigestAckMessage is " + bos . toByteArray ( ) . length ) ; <nl> Message message = new Message ( localEndPoint _ , Gossiper . GOSSIP _ STAGE , GOSSIP _ DIGEST _ ACK _ VERB , bos . toByteArray ( ) ) ; <nl> return message ; <nl> } <nl> @ @ - 384 , 7 + 387 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> } <nl> <nl> EndPoint to = eps . get ( + + rrIndex _ ) ; <nl> - logger _ . trace ( " Sending a GossipDigestSynMessage to " + to + " . . . " ) ; <nl> + if ( logger _ . isTraceEnabled ( ) ) <nl> + logger _ . trace ( " Sending a GossipDigestSynMessage to " + to + " . . . " ) ; <nl> MessagingService . getMessagingInstance ( ) . sendUdpOneWay ( message , to ) ; <nl> return seeds _ . contains ( to ) ; <nl> } <nl> @ @ - 403 , 7 + 407 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> List < EndPoint > liveEndPoints = new ArrayList < EndPoint > ( epSet ) ; <nl> int index = ( size = = 1 ) ? 0 : random _ . nextInt ( size ) ; <nl> EndPoint to = liveEndPoints . get ( index ) ; <nl> - logger _ . trace ( " Sending a GossipDigestSynMessage to " + to + " . . . " ) ; <nl> + if ( logger _ . isTraceEnabled ( ) ) <nl> + logger _ . trace ( " Sending a GossipDigestSynMessage to " + to + " . . . " ) ; <nl> MessagingService . getMessagingInstance ( ) . sendUdpOneWay ( message , to ) ; <nl> return seeds _ . contains ( to ) ; <nl> } <nl> @ @ - 613 , 7 + 618 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> <nl> void markAlive ( EndPoint addr , EndPointState localState ) <nl> { <nl> - logger _ . trace ( " marking as alive " + addr ) ; <nl> + if ( logger _ . isTraceEnabled ( ) ) <nl> + logger _ . trace ( " marking as alive " + addr ) ; <nl> if ( ! localState . isAlive ( ) ) <nl> { <nl> isAlive ( addr , localState , true ) ; <nl> @ @ - 691 , 7 + 697 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> { <nl> int oldVersion = localHbState . getHeartBeatVersion ( ) ; <nl> localState . setHeartBeatState ( remoteHbState ) ; <nl> - logger _ . trace ( " Updating heartbeat state version to " + localState . getHeartBeatState ( ) . getHeartBeatVersion ( ) + " from " + oldVersion + " for " + addr + " . . . " ) ; <nl> + if ( logger _ . isTraceEnabled ( ) ) <nl> + logger _ . trace ( " Updating heartbeat state version to " + localState . getHeartBeatState ( ) . getHeartBeatVersion ( ) + " from " + oldVersion + " for " + addr + " . . . " ) ; <nl> } <nl> } <nl> } <nl> @ @ - 956 , 7 + 963 , 8 @ @ class GossipDigestSynVerbHandler implements IVerbHandler <nl> public void doVerb ( Message message ) <nl> { <nl> EndPoint from = message . getFrom ( ) ; <nl> - logger _ . trace ( " Received a GossipDigestSynMessage from " + from ) ; <nl> + if ( logger _ . isTraceEnabled ( ) ) <nl> + logger _ . trace ( " Received a GossipDigestSynMessage from " + from ) ; <nl> <nl> byte [ ] bytes = message . getMessageBody ( ) ; <nl> DataInputStream dis = new DataInputStream ( new ByteArrayInputStream ( bytes ) ) ; <nl> @ @ - 980 , 7 + 988 , 8 @ @ class GossipDigestSynVerbHandler implements IVerbHandler <nl> <nl> GossipDigestAckMessage gDigestAck = new GossipDigestAckMessage ( deltaGossipDigestList , deltaEpStateMap ) ; <nl> Message gDigestAckMessage = Gossiper . instance ( ) . makeGossipDigestAckMessage ( gDigestAck ) ; <nl> - logger _ . trace ( " Sending a GossipDigestAckMessage to " + from ) ; <nl> + if ( logger _ . isTraceEnabled ( ) ) <nl> + logger _ . trace ( " Sending a GossipDigestAckMessage to " + from ) ; <nl> MessagingService . getMessagingInstance ( ) . sendUdpOneWay ( gDigestAckMessage , from ) ; <nl> } <nl> catch ( IOException e ) <nl> @ @ - 1040 , 7 + 1049 , 8 @ @ class GossipDigestAckVerbHandler implements IVerbHandler <nl> public void doVerb ( Message message ) <nl> { <nl> EndPoint from = message . getFrom ( ) ; <nl> - logger _ . trace ( " Received a GossipDigestAckMessage from " + from ) ; <nl> + if ( logger _ . isTraceEnabled ( ) ) <nl> + logger _ . trace ( " Received a GossipDigestAckMessage from " + from ) ; <nl> <nl> byte [ ] bytes = message . getMessageBody ( ) ; <nl> DataInputStream dis = new DataInputStream ( new ByteArrayInputStream ( bytes ) ) ; <nl> @ @ - 1070 , 7 + 1080 , 8 @ @ class GossipDigestAckVerbHandler implements IVerbHandler <nl> <nl> GossipDigestAck2Message gDigestAck2 = new GossipDigestAck2Message ( deltaEpStateMap ) ; <nl> Message gDigestAck2Message = Gossiper . instance ( ) . makeGossipDigestAck2Message ( gDigestAck2 ) ; <nl> - logger _ . trace ( " Sending a GossipDigestAck2Message to " + from ) ; <nl> + if ( logger _ . isTraceEnabled ( ) ) <nl> + logger _ . trace ( " Sending a GossipDigestAck2Message to " + from ) ; <nl> MessagingService . getMessagingInstance ( ) . sendUdpOneWay ( gDigestAck2Message , from ) ; <nl> } <nl> catch ( IOException e ) <nl> @ @ - 1087 , 7 + 1098 , 8 @ @ class GossipDigestAck2VerbHandler implements IVerbHandler <nl> public void doVerb ( Message message ) <nl> { <nl> EndPoint from = message . getFrom ( ) ; <nl> - logger _ . trace ( " Received a GossipDigestAck2Message from " + from ) ; <nl> + if ( logger _ . isTraceEnabled ( ) ) <nl> + logger _ . trace ( " Received a GossipDigestAck2Message from " + from ) ; <nl> <nl> byte [ ] bytes = message . getMessageBody ( ) ; <nl> DataInputStream dis = new DataInputStream ( new ByteArrayInputStream ( bytes ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / SSTableWriter . java b / src / java / org / apache / cassandra / io / SSTableWriter . java <nl> index 4a39c97 . . 095126a 100644 <nl> - - - a / src / java / org / apache / cassandra / io / SSTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / SSTableWriter . java <nl> @ @ - 55 , 7 + 55 , 8 @ @ public class SSTableWriter extends SSTable <nl> long indexPosition = indexRAF . getFilePointer ( ) ; <nl> indexRAF . writeUTF ( decoratedKey ) ; <nl> indexRAF . writeLong ( position ) ; <nl> - logger . trace ( " wrote " + decoratedKey + " at " + position ) ; <nl> + if ( logger . isTraceEnabled ( ) ) <nl> + logger . trace ( " wrote " + decoratedKey + " at " + position ) ; <nl> <nl> if ( keysWritten + + % INDEX _ INTERVAL ! = 0 ) <nl> return ; <nl> @ @ - 64 , 7 + 65 , 8 @ @ public class SSTableWriter extends SSTable <nl> indexPositions = new ArrayList < KeyPosition > ( ) ; <nl> } <nl> indexPositions . add ( new KeyPosition ( decoratedKey , indexPosition ) ) ; <nl> - logger . trace ( " wrote index of " + decoratedKey + " at " + indexPosition ) ; <nl> + if ( logger . isTraceEnabled ( ) ) <nl> + logger . trace ( " wrote index of " + decoratedKey + " at " + indexPosition ) ; <nl> } <nl> <nl> / / TODO make this take a DataOutputStream and wrap the byte [ ] version to combine them <nl> diff - - git a / src / java / org / apache / cassandra / net / UdpConnection . java b / src / java / org / apache / cassandra / net / UdpConnection . java <nl> index 9e83c97 . . 11a9ab4 100644 <nl> - - - a / src / java / org / apache / cassandra / net / UdpConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / UdpConnection . java <nl> @ @ - 78 , 7 + 78 , 8 @ @ public class UdpConnection extends SelectionKeyHandler <nl> byte [ ] data = bos . toByteArray ( ) ; <nl> if ( data . length > 0 ) <nl> { <nl> - logger _ . trace ( " Size of Gossip packet " + data . length ) ; <nl> + if ( logger _ . isTraceEnabled ( ) ) <nl> + logger _ . trace ( " Size of Gossip packet " + data . length ) ; <nl> byte [ ] protocol = BasicUtilities . intToByteArray ( protocol _ ) ; <nl> ByteBuffer buffer = ByteBuffer . allocate ( data . length + protocol . length ) ; <nl> buffer . put ( protocol ) ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java 
 index 4a1280c . . 5cd7c8f 100644 
 - - - a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java 
 + + + b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java 
 @ @ - 120 , 7 + 120 , 7 @ @ public class YamlConfigurationLoader implements ConfigurationLoader 
 configMap . put ( sensitiveKey , " < REDACTED > " ) ; 
 } 
 } 
 - logger . info ( " Node configuration : [ " + Joiner . on ( " ; " ) . join ( configMap . entrySet ( ) ) + " ] " ) ; 
 + logger . info ( " Node configuration : [ { } ] " , Joiner . on ( " ; " ) . join ( configMap . entrySet ( ) ) ) ; 
 } 
 
 private static class MissingPropertiesChecker extends PropertyUtils 
 diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 index 4ecf235 . . 291f312 100644 
 - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java 
 + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 @ @ - 226 , 7 + 226 , 7 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean 
 long now = System . nanoTime ( ) ; 
 double phi = hbWnd . phi ( now ) ; 
 if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( " PHI for " + ep + " : " + phi ) ; 
 + logger . trace ( " PHI for { } : { } " , ep , phi ) ; 
 
 if ( PHI _ FACTOR * phi > getPhiConvictThreshold ( ) ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / gms / GossipDigestSynVerbHandler . java b / src / java / org / apache / cassandra / gms / GossipDigestSynVerbHandler . java 
 index 0f3a1e6 . . a1d1d9b 100644 
 - - - a / src / java / org / apache / cassandra / gms / GossipDigestSynVerbHandler . java 
 + + + b / src / java / org / apache / cassandra / gms / GossipDigestSynVerbHandler . java 
 @ @ - 68 , 7 + 68 , 7 @ @ public class GossipDigestSynVerbHandler implements IVerbHandler < GossipDigestSyn > 
 sb . append ( gDigest ) ; 
 sb . append ( " " ) ; 
 } 
 - logger . trace ( " Gossip syn digests are : " + sb . toString ( ) ) ; 
 + logger . trace ( " Gossip syn digests are : { } " , sb ) ; 
 } 
 
 doSort ( gDigestList ) ; 
 diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index a7c4f97 . . 690f813 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 130 , 7 + 130 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 / * Update the local heartbeat counter . * / 
 endpointStateMap . get ( FBUtilities . getBroadcastAddress ( ) ) . getHeartBeatState ( ) . updateHeartBeat ( ) ; 
 if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( " My heartbeat is now " + endpointStateMap . get ( FBUtilities . getBroadcastAddress ( ) ) . getHeartBeatState ( ) . getHeartBeatVersion ( ) ) ; 
 + logger . trace ( " My heartbeat is now { } " , endpointStateMap . get ( FBUtilities . getBroadcastAddress ( ) ) . getHeartBeatState ( ) . getHeartBeatVersion ( ) ) ; 
 final List < GossipDigest > gDigests = new ArrayList < GossipDigest > ( ) ; 
 Gossiper . instance . makeRandomGossipDigest ( gDigests ) ; 
 
 @ @ - 413 , 7 + 413 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 sb . append ( gDigest ) ; 
 sb . append ( " " ) ; 
 } 
 - logger . trace ( " Gossip Digests are : " + sb . toString ( ) ) ; 
 + logger . trace ( " Gossip Digests are : { } " , sb ) ; 
 } 
 } 
 
 @ @ - 745 , 7 + 745 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 { 
 reqdEndpointState = new EndpointState ( epState . getHeartBeatState ( ) ) ; 
 if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( " local heartbeat version " + localHbVersion + " greater than " + version + " for " + forEndpoint ) ; 
 + logger . trace ( " local heartbeat version { } greater than { } for { } " , localHbVersion , version , forEndpoint ) ; 
 } 
 / * Accumulate all application states whose versions are greater than " version " variable * / 
 for ( Entry < ApplicationState , VersionedValue > entry : epState . getApplicationStateMap ( ) . entrySet ( ) ) 
 @ @ - 759 , 7 + 759 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 } 
 final ApplicationState key = entry . getKey ( ) ; 
 if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( " Adding state " + key + " : " + value . value ) ; 
 + logger . trace ( " Adding state { } : { } " , key , value . value ) ; 
 reqdEndpointState . addApplicationState ( key , value ) ; 
 } 
 } 
 @ @ - 863 , 12 + 863 , 12 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 liveEndpoints . add ( addr ) ; 
 unreachableEndpoints . remove ( addr ) ; 
 expireTimeEndpointMap . remove ( addr ) ; 
 - logger . debug ( " removing expire time for endpoint : " + addr ) ; 
 + logger . debug ( " removing expire time for endpoint : { } " , addr ) ; 
 logger . info ( " InetAddress { } is now UP " , addr ) ; 
 for ( IEndpointStateChangeSubscriber subscriber : subscribers ) 
 subscriber . onAlive ( addr , localState ) ; 
 if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( " Notified " + subscribers ) ; 
 + logger . trace ( " Notified { } " , subscribers ) ; 
 } 
 
 private void markDead ( InetAddress addr , EndpointState localState ) 
 @ @ - 882 , 7 + 882 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 for ( IEndpointStateChangeSubscriber subscriber : subscribers ) 
 subscriber . onDead ( addr , localState ) ; 
 if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( " Notified " + subscribers ) ; 
 + logger . trace ( " Notified { } " , subscribers ) ; 
 } 
 
 / * * 
 @ @ - 901 , 7 + 901 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 logger . info ( " Node { } is now part of the cluster " , ep ) ; 
 } 
 if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( " Adding endpoint state for " + ep ) ; 
 + logger . trace ( " Adding endpoint state for { } " , ep ) ; 
 endpointStateMap . put ( ep , epState ) ; 
 
 / / the node restarted : it is up to the subscriber to take whatever action is necessary 
 @ @ - 945 , 7 + 945 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 if ( justRemovedEndpoints . containsKey ( ep ) ) 
 { 
 if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( " Ignoring gossip for " + ep + " because it is quarantined " ) ; 
 + logger . trace ( " Ignoring gossip for { } because it is quarantined " , ep ) ; 
 continue ; 
 } 
 
 @ @ - 960 , 12 + 960 , 12 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 int localGeneration = localEpStatePtr . getHeartBeatState ( ) . getGeneration ( ) ; 
 int remoteGeneration = remoteState . getHeartBeatState ( ) . getGeneration ( ) ; 
 if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( ep + " local generation " + localGeneration + " , remote generation " + remoteGeneration ) ; 
 + logger . trace ( " { } local generation { } , remote generation { } " , ep , localGeneration , remoteGeneration ) ; 
 
 if ( remoteGeneration > localGeneration ) 
 { 
 if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( " Updating heartbeat state generation to " + remoteGeneration + " from " + localGeneration + " for " + ep ) ; 
 + logger . trace ( " Updating heartbeat state generation to { } from { } for { } " , remoteGeneration , localGeneration , ep ) ; 
 / / major state change will handle the update by inserting the remote state directly 
 handleMajorStateChange ( ep , remoteState ) ; 
 } 
 @ @ - 980 , 14 + 980 , 14 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 applyNewStates ( ep , localEpStatePtr , remoteState ) ; 
 } 
 else if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( " Ignoring remote version " + remoteMaxVersion + " < = " + localMaxVersion + " for " + ep ) ; 
 + logger . trace ( " Ignoring remote version { } < = { } for { } " , remoteMaxVersion , localMaxVersion , ep ) ; 
 if ( ! localEpStatePtr . isAlive ( ) & & ! isDeadState ( localEpStatePtr ) ) / / unless of course , it was dead 
 markAlive ( ep , localEpStatePtr ) ; 
 } 
 else 
 { 
 if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( " Ignoring remote generation " + remoteGeneration + " < " + localGeneration ) ; 
 + logger . trace ( " Ignoring remote generation { } < { } " , remoteGeneration , localGeneration ) ; 
 } 
 } 
 else 
 @ @ - 1006 , 7 + 1006 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 
 localState . setHeartBeatState ( remoteState . getHeartBeatState ( ) ) ; 
 if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( " Updating heartbeat state version to " + localState . getHeartBeatState ( ) . getHeartBeatVersion ( ) + " from " + oldVersion + " for " + addr + " . . . " ) ; 
 + logger . trace ( " Updating heartbeat state version to { } from { } for { } . . . " , localState . getHeartBeatState ( ) . getHeartBeatVersion ( ) , oldVersion , addr ) ; 
 
 / / we need to make two loops here , one to apply , then another to notify , this way all states in an update are present and current when the notifications are received 
 for ( Entry < ApplicationState , VersionedValue > remoteEntry : remoteState . getApplicationStateMap ( ) . entrySet ( ) ) 
 @ @ - 1047 , 7 + 1047 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 / * We are here since we have no data for this endpoint locally so request everthing . * / 
 deltaGossipDigestList . add ( new GossipDigest ( gDigest . getEndpoint ( ) , remoteGeneration , 0 ) ) ; 
 if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( " requestAll for " + gDigest . getEndpoint ( ) ) ; 
 + logger . trace ( " requestAll for { } " , gDigest . getEndpoint ( ) ) ; 
 } 
 
 / * Send all the data with version greater than maxRemoteVersion * / 
 @ @ - 1152 , 7 + 1152 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 / / notify snitches that Gossiper is about to start 
 DatabaseDescriptor . getEndpointSnitch ( ) . gossiperStarting ( ) ; 
 if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( " gossip started with generation " + localState . getHeartBeatState ( ) . getGeneration ( ) ) ; 
 + logger . trace ( " gossip started with generation { } " , localState . getHeartBeatState ( ) . getGeneration ( ) ) ; 
 
 scheduledGossipTask = executor . scheduleWithFixedDelay ( new GossipTask ( ) , 
 Gossiper . intervalInMillis , 
 @ @ - 1244 , 7 + 1244 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 endpointStateMap . put ( ep , epState ) ; 
 unreachableEndpoints . put ( ep , System . nanoTime ( ) ) ; 
 if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( " Adding saved endpoint " + ep + " " + epState . getHeartBeatState ( ) . getGeneration ( ) ) ; 
 + logger . trace ( " Adding saved endpoint { } { } " , ep , epState . getHeartBeatState ( ) . getGeneration ( ) ) ; 
 } 
 
 public void addLocalApplicationState ( ApplicationState state , VersionedValue value ) 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 index a7fd881 . . b7e8f05 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 @ @ - 158 , 7 + 158 , 7 @ @ public class SSTableWriter extends SSTable 
 first = lastWrittenKey ; 
 
 if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( " wrote " + decoratedKey + " at " + dataPosition ) ; 
 + logger . trace ( " wrote { } at { } " , decoratedKey , dataPosition ) ; 
 iwriter . append ( decoratedKey , index ) ; 
 dbuilder . addPotentialBoundary ( dataPosition ) ; 
 } 
 @ @ - 471 , 7 + 471 , 7 @ @ public class SSTableWriter extends SSTable 
 } 
 
 if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( " wrote index entry : " + indexEntry + " at " + indexPosition ) ; 
 + logger . trace ( " wrote index entry : { } at { } " , indexEntry , indexPosition ) ; 
 
 summary . maybeAddEntry ( key , indexPosition ) ; 
 builder . addPotentialBoundary ( indexPosition ) ; 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index 9713576 . . 73662c1 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 622 , 7 + 622 , 7 @ @ public final class MessagingService implements MessagingServiceMBean 
 public void sendOneWay ( MessageOut message , int id , InetAddress to ) 
 { 
 if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( FBUtilities . getBroadcastAddress ( ) + " sending " + message . verb + " to " + id + " @ " + to ) ; 
 + logger . trace ( " { } sending { } to { } @ { } " , FBUtilities . getBroadcastAddress ( ) , message . verb , id , to ) ; 
 
 if ( to . equals ( FBUtilities . getBroadcastAddress ( ) ) ) 
 logger . trace ( " Message - to - self { } going over MessagingService " , message ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java b / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java 
 index c2b1814 . . 2e201bf 100644 
 - - - a / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java 
 + + + b / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java 
 @ @ - 202 , 6 + 202 , 6 @ @ public class PendingRangeCalculatorService extends PendingRangeCalculatorService 
 tm . setPendingRanges ( keyspaceName , pendingRanges ) ; 
 
 if ( logger . isDebugEnabled ( ) ) 
 - logger . debug ( " Pending ranges : \ n " + ( pendingRanges . isEmpty ( ) ? " < empty > " : tm . printPendingRanges ( ) ) ) ; 
 + logger . debug ( " Pending ranges : \ n { } " , ( pendingRanges . isEmpty ( ) ? " < empty > " : tm . printPendingRanges ( ) ) ) ; 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / locator / NetworkTopologyStrategyTest . java b / test / unit / org / apache / cassandra / locator / NetworkTopologyStrategyTest . java 
 index d4d5a85 . . be93faa 100644 
 - - - a / test / unit / org / apache / cassandra / locator / NetworkTopologyStrategyTest . java 
 + + + b / test / unit / org / apache / cassandra / locator / NetworkTopologyStrategyTest . java 
 @ @ - 121 , 7 + 121 , 7 @ @ public class NetworkTopologyStrategyTest 
 byte [ ] ipBytes = new byte [ ] { 10 , ( byte ) dc , ( byte ) rack , ( byte ) ep } ; 
 InetAddress address = InetAddress . getByAddress ( ipBytes ) ; 
 StringToken token = new StringToken ( String . format ( " % 02x % 02x % 02x " , ep , rack , dc ) ) ; 
 - logger . debug ( " adding node " + address + " at " + token ) ; 
 + logger . debug ( " adding node { } at { } " , address , token ) ; 
 tokens . put ( address , token ) ; 
 } 
 } 
 @ @ - 137 , 7 + 137 , 7 @ @ public class NetworkTopologyStrategyTest 
 
 Assert . assertEquals ( totalRF , endpoints . size ( ) ) ; 
 Assert . assertEquals ( totalRF , epSet . size ( ) ) ; 
 - logger . debug ( testToken + " : " + endpoints . toString ( ) ) ; 
 + logger . debug ( " { } : { } " , testToken , endpoints ) ; 
 } 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java b / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java 
 index f09b6a4 . . ac0b30a 100644 
 - - - a / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java 
 + + + b / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java 
 @ @ - 131 , 7 + 131 , 7 @ @ public class StreamingTransferTest extends SchemaLoader 
 private List < String > createAndTransfer ( ColumnFamilyStore cfs , Mutator mutator , boolean transferSSTables ) throws Exception 
 { 
 / / write a temporary SSTable , and unregister it 
 - logger . debug ( " Mutating " + cfs . name ) ; 
 + logger . debug ( " Mutating { } " , cfs . name ) ; 
 long timestamp = 1234 ; 
 for ( int i = 1 ; i < = 3 ; i + + ) 
 mutator . mutate ( " key " + i , " col " + i , timestamp ) ; 
 @ @ - 140 , 7 + 140 , 7 @ @ public class StreamingTransferTest extends SchemaLoader 
 assertEquals ( 1 , cfs . getSSTables ( ) . size ( ) ) ; 
 
 / / transfer the first and last key 
 - logger . debug ( " Transferring " + cfs . name ) ; 
 + logger . debug ( " Transferring { } " , cfs . name ) ; 
 int [ ] offs ; 
 if ( transferSSTables ) 
 { 
 @ @ - 179 , 7 + 179 , 7 @ @ public class StreamingTransferTest extends SchemaLoader 
 for ( int off : offs ) 
 keys . add ( " key " + off ) ; 
 
 - logger . debug ( " . . . everything looks good for " + cfs . name ) ; 
 + logger . debug ( " . . . everything looks good for { } " , cfs . name ) ; 
 return keys ; 
 } 
 
 @ @ - 232 , 7 + 232 , 7 @ @ public class StreamingTransferTest extends SchemaLoader 
 cf . addColumn ( column ( col , " v " , timestamp ) ) ; 
 cf . addColumn ( new Cell ( cellname ( " birthdate " ) , ByteBufferUtil . bytes ( val ) , timestamp ) ) ; 
 Mutation rm = new Mutation ( " Keyspace1 " , ByteBufferUtil . bytes ( key ) , cf ) ; 
 - logger . debug ( " Applying row to transfer " + rm ) ; 
 + logger . debug ( " Applying row to transfer { } " , rm ) ; 
 rm . apply ( ) ; 
 } 
 } , transferSSTables ) ; 
 @ @ - 456 , 7 + 456 , 7 @ @ public class StreamingTransferTest extends SchemaLoader 
 cf . addColumn ( column ( colName , " value " , timestamp ) ) ; 
 cf . addColumn ( new Cell ( cellname ( " birthdate " ) , ByteBufferUtil . bytes ( new Date ( timestamp ) . toString ( ) ) , timestamp ) ) ; 
 Mutation rm = new Mutation ( " Keyspace1 " , ByteBufferUtil . bytes ( key ) , cf ) ; 
 - logger . debug ( " Applying row to transfer " + rm ) ; 
 + logger . debug ( " Applying row to transfer { } " , rm ) ; 
 rm . apply ( ) ; 
 } 
 } ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 index 520b073 . . 541abfc 100644 
 - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java 
 + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 @ @ - 158 , 7 + 158 , 8 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean 
 
 public void report ( EndPoint ep ) 
 { 
 - logger _ . trace ( " reporting " + ep ) ; 
 + if ( logger _ . isTraceEnabled ( ) ) 
 + logger _ . trace ( " reporting " + ep ) ; 
 long now = System . currentTimeMillis ( ) ; 
 ArrivalWindow heartbeatWindow = arrivalSamples _ . get ( ep ) ; 
 if ( heartbeatWindow = = null ) 
 @ @ - 180 , 7 + 181 , 8 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean 
 / * We need this so that we do not suspect a convict . * / 
 boolean isConvicted = false ; 
 double phi = hbWnd . phi ( now ) ; 
 - logger _ . trace ( " PHI for " + ep + " : " + phi ) ; 
 + if ( logger _ . isTraceEnabled ( ) ) 
 + logger _ . trace ( " PHI for " + ep + " : " + phi ) ; 
 
 / * 
 if ( phi > phiConvictThreshold _ ) 
 diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index f95a3f1 . . b3127d8 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 73 , 7 + 73 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 if ( ! bVal ) 
 doGossipToSeed ( message ) ; 
 
 - logger _ . trace ( " Performing status check . . . " ) ; 
 + if ( logger _ . isTraceEnabled ( ) ) 
 + logger _ . trace ( " Performing status check . . . " ) ; 
 doStatusCheck ( ) ; 
 } 
 } 
 @ @ - 336 , 7 + 337 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 sb . append ( gDigest ) ; 
 sb . append ( " " ) ; 
 } 
 - logger _ . trace ( " Gossip Digests are : " + sb . toString ( ) ) ; 
 + if ( logger _ . isTraceEnabled ( ) ) 
 + logger _ . trace ( " Gossip Digests are : " + sb . toString ( ) ) ; 
 } 
 
 public int getCurrentGenerationNumber ( EndPoint endpoint ) 
 @ @ - 359 , 7 + 361 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 ByteArrayOutputStream bos = new ByteArrayOutputStream ( Gossiper . MAX _ GOSSIP _ PACKET _ SIZE ) ; 
 DataOutputStream dos = new DataOutputStream ( bos ) ; 
 GossipDigestAckMessage . serializer ( ) . serialize ( gDigestAckMessage , dos ) ; 
 - logger _ . trace ( " @ @ @ @ Size of GossipDigestAckMessage is " + bos . toByteArray ( ) . length ) ; 
 + if ( logger _ . isTraceEnabled ( ) ) 
 + logger _ . trace ( " @ @ @ @ Size of GossipDigestAckMessage is " + bos . toByteArray ( ) . length ) ; 
 Message message = new Message ( localEndPoint _ , Gossiper . GOSSIP _ STAGE , GOSSIP _ DIGEST _ ACK _ VERB , bos . toByteArray ( ) ) ; 
 return message ; 
 } 
 @ @ - 384 , 7 + 387 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 } 
 
 EndPoint to = eps . get ( + + rrIndex _ ) ; 
 - logger _ . trace ( " Sending a GossipDigestSynMessage to " + to + " . . . " ) ; 
 + if ( logger _ . isTraceEnabled ( ) ) 
 + logger _ . trace ( " Sending a GossipDigestSynMessage to " + to + " . . . " ) ; 
 MessagingService . getMessagingInstance ( ) . sendUdpOneWay ( message , to ) ; 
 return seeds _ . contains ( to ) ; 
 } 
 @ @ - 403 , 7 + 407 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 List < EndPoint > liveEndPoints = new ArrayList < EndPoint > ( epSet ) ; 
 int index = ( size = = 1 ) ? 0 : random _ . nextInt ( size ) ; 
 EndPoint to = liveEndPoints . get ( index ) ; 
 - logger _ . trace ( " Sending a GossipDigestSynMessage to " + to + " . . . " ) ; 
 + if ( logger _ . isTraceEnabled ( ) ) 
 + logger _ . trace ( " Sending a GossipDigestSynMessage to " + to + " . . . " ) ; 
 MessagingService . getMessagingInstance ( ) . sendUdpOneWay ( message , to ) ; 
 return seeds _ . contains ( to ) ; 
 } 
 @ @ - 613 , 7 + 618 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 
 void markAlive ( EndPoint addr , EndPointState localState ) 
 { 
 - logger _ . trace ( " marking as alive " + addr ) ; 
 + if ( logger _ . isTraceEnabled ( ) ) 
 + logger _ . trace ( " marking as alive " + addr ) ; 
 if ( ! localState . isAlive ( ) ) 
 { 
 isAlive ( addr , localState , true ) ; 
 @ @ - 691 , 7 + 697 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 { 
 int oldVersion = localHbState . getHeartBeatVersion ( ) ; 
 localState . setHeartBeatState ( remoteHbState ) ; 
 - logger _ . trace ( " Updating heartbeat state version to " + localState . getHeartBeatState ( ) . getHeartBeatVersion ( ) + " from " + oldVersion + " for " + addr + " . . . " ) ; 
 + if ( logger _ . isTraceEnabled ( ) ) 
 + logger _ . trace ( " Updating heartbeat state version to " + localState . getHeartBeatState ( ) . getHeartBeatVersion ( ) + " from " + oldVersion + " for " + addr + " . . . " ) ; 
 } 
 } 
 } 
 @ @ - 956 , 7 + 963 , 8 @ @ class GossipDigestSynVerbHandler implements IVerbHandler 
 public void doVerb ( Message message ) 
 { 
 EndPoint from = message . getFrom ( ) ; 
 - logger _ . trace ( " Received a GossipDigestSynMessage from " + from ) ; 
 + if ( logger _ . isTraceEnabled ( ) ) 
 + logger _ . trace ( " Received a GossipDigestSynMessage from " + from ) ; 
 
 byte [ ] bytes = message . getMessageBody ( ) ; 
 DataInputStream dis = new DataInputStream ( new ByteArrayInputStream ( bytes ) ) ; 
 @ @ - 980 , 7 + 988 , 8 @ @ class GossipDigestSynVerbHandler implements IVerbHandler 
 
 GossipDigestAckMessage gDigestAck = new GossipDigestAckMessage ( deltaGossipDigestList , deltaEpStateMap ) ; 
 Message gDigestAckMessage = Gossiper . instance ( ) . makeGossipDigestAckMessage ( gDigestAck ) ; 
 - logger _ . trace ( " Sending a GossipDigestAckMessage to " + from ) ; 
 + if ( logger _ . isTraceEnabled ( ) ) 
 + logger _ . trace ( " Sending a GossipDigestAckMessage to " + from ) ; 
 MessagingService . getMessagingInstance ( ) . sendUdpOneWay ( gDigestAckMessage , from ) ; 
 } 
 catch ( IOException e ) 
 @ @ - 1040 , 7 + 1049 , 8 @ @ class GossipDigestAckVerbHandler implements IVerbHandler 
 public void doVerb ( Message message ) 
 { 
 EndPoint from = message . getFrom ( ) ; 
 - logger _ . trace ( " Received a GossipDigestAckMessage from " + from ) ; 
 + if ( logger _ . isTraceEnabled ( ) ) 
 + logger _ . trace ( " Received a GossipDigestAckMessage from " + from ) ; 
 
 byte [ ] bytes = message . getMessageBody ( ) ; 
 DataInputStream dis = new DataInputStream ( new ByteArrayInputStream ( bytes ) ) ; 
 @ @ - 1070 , 7 + 1080 , 8 @ @ class GossipDigestAckVerbHandler implements IVerbHandler 
 
 GossipDigestAck2Message gDigestAck2 = new GossipDigestAck2Message ( deltaEpStateMap ) ; 
 Message gDigestAck2Message = Gossiper . instance ( ) . makeGossipDigestAck2Message ( gDigestAck2 ) ; 
 - logger _ . trace ( " Sending a GossipDigestAck2Message to " + from ) ; 
 + if ( logger _ . isTraceEnabled ( ) ) 
 + logger _ . trace ( " Sending a GossipDigestAck2Message to " + from ) ; 
 MessagingService . getMessagingInstance ( ) . sendUdpOneWay ( gDigestAck2Message , from ) ; 
 } 
 catch ( IOException e ) 
 @ @ - 1087 , 7 + 1098 , 8 @ @ class GossipDigestAck2VerbHandler implements IVerbHandler 
 public void doVerb ( Message message ) 
 { 
 EndPoint from = message . getFrom ( ) ; 
 - logger _ . trace ( " Received a GossipDigestAck2Message from " + from ) ; 
 + if ( logger _ . isTraceEnabled ( ) ) 
 + logger _ . trace ( " Received a GossipDigestAck2Message from " + from ) ; 
 
 byte [ ] bytes = message . getMessageBody ( ) ; 
 DataInputStream dis = new DataInputStream ( new ByteArrayInputStream ( bytes ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / SSTableWriter . java b / src / java / org / apache / cassandra / io / SSTableWriter . java 
 index 4a39c97 . . 095126a 100644 
 - - - a / src / java / org / apache / cassandra / io / SSTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / SSTableWriter . java 
 @ @ - 55 , 7 + 55 , 8 @ @ public class SSTableWriter extends SSTable 
 long indexPosition = indexRAF . getFilePointer ( ) ; 
 indexRAF . writeUTF ( decoratedKey ) ; 
 indexRAF . writeLong ( position ) ; 
 - logger . trace ( " wrote " + decoratedKey + " at " + position ) ; 
 + if ( logger . isTraceEnabled ( ) ) 
 + logger . trace ( " wrote " + decoratedKey + " at " + position ) ; 
 
 if ( keysWritten + + % INDEX _ INTERVAL ! = 0 ) 
 return ; 
 @ @ - 64 , 7 + 65 , 8 @ @ public class SSTableWriter extends SSTable 
 indexPositions = new ArrayList < KeyPosition > ( ) ; 
 } 
 indexPositions . add ( new KeyPosition ( decoratedKey , indexPosition ) ) ; 
 - logger . trace ( " wrote index of " + decoratedKey + " at " + indexPosition ) ; 
 + if ( logger . isTraceEnabled ( ) ) 
 + logger . trace ( " wrote index of " + decoratedKey + " at " + indexPosition ) ; 
 } 
 
 / / TODO make this take a DataOutputStream and wrap the byte [ ] version to combine them 
 diff - - git a / src / java / org / apache / cassandra / net / UdpConnection . java b / src / java / org / apache / cassandra / net / UdpConnection . java 
 index 9e83c97 . . 11a9ab4 100644 
 - - - a / src / java / org / apache / cassandra / net / UdpConnection . java 
 + + + b / src / java / org / apache / cassandra / net / UdpConnection . java 
 @ @ - 78 , 7 + 78 , 8 @ @ public class UdpConnection extends SelectionKeyHandler 
 byte [ ] data = bos . toByteArray ( ) ; 
 if ( data . length > 0 ) 
 { 
 - logger _ . trace ( " Size of Gossip packet " + data . length ) ; 
 + if ( logger _ . isTraceEnabled ( ) ) 
 + logger _ . trace ( " Size of Gossip packet " + data . length ) ; 
 byte [ ] protocol = BasicUtilities . intToByteArray ( protocol _ ) ; 
 ByteBuffer buffer = ByteBuffer . allocate ( data . length + protocol . length ) ; 
 buffer . put ( protocol ) ;
