BLEU SCORE: 0.058544976940240155

TEST MSG: Schedule schema pull in onChange .
GENERATED MSG: Bootstrapping nodes ensure schema is complete before continuing .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b3a794f . . dc8e6e0 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 2 , 6 + 2 , 7 @ @ <nl> * Fix BatchlogManager # deleteBatch ( ) use of millisecond timsestamps <nl> ( CASSANDRA - 6822 ) <nl> * Continue assassinating even if the endpoint vanishes ( CASSANDRA - 6787 ) <nl> + * Schedule schema pulls on change ( CASSANDRA - 6971 ) <nl> <nl> <nl> 1 . 2 . 16 <nl> diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> index 9f6113c . . 09caeb1 100644 <nl> - - - a / src / java / org / apache / cassandra / service / MigrationManager . java <nl> + + + b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> @ @ - 91 , 11 + 91 , 15 @ @ public class MigrationManager <nl> private static void maybeScheduleSchemaPull ( final UUID theirVersion , final InetAddress endpoint ) <nl> { <nl> if ( ( Schema . instance . getVersion ( ) ! = null & & Schema . instance . getVersion ( ) . equals ( theirVersion ) ) | | ! shouldPullSchemaFrom ( endpoint ) ) <nl> + { <nl> + logger . debug ( " Not pulling schema because versions match or shouldPullSchemaFrom returned false " ) ; <nl> return ; <nl> + } <nl> <nl> if ( Schema . emptyVersion . equals ( Schema . instance . getVersion ( ) ) | | runtimeMXBean . getUptime ( ) < MIGRATION _ DELAY _ IN _ MS ) <nl> { <nl> / / If we think we may be bootstrapping or have recently started , submit MigrationTask immediately <nl> + logger . debug ( " Submitting migration task for { } " , endpoint ) ; <nl> submitMigrationTask ( endpoint ) ; <nl> } <nl> else <nl> @ @ - 109 , 12 + 113 , 18 @ @ public class MigrationManager <nl> / / grab the latest version of the schema since it may have changed again since the initial scheduling <nl> EndpointState epState = Gossiper . instance . getEndpointStateForEndpoint ( endpoint ) ; <nl> if ( epState = = null ) <nl> + { <nl> + logger . debug ( " epState vanished for { } , not submitting migration task " , endpoint ) ; <nl> return ; <nl> + } <nl> VersionedValue value = epState . getApplicationState ( ApplicationState . SCHEMA ) ; <nl> UUID currentVersion = UUID . fromString ( value . value ) ; <nl> if ( Schema . instance . getVersion ( ) . equals ( currentVersion ) ) <nl> + { <nl> + logger . debug ( " not submitting migration task for { } because our versions match " , endpoint ) ; <nl> return ; <nl> - <nl> + } <nl> + logger . debug ( " submitting migration task for { } " , endpoint ) ; <nl> submitMigrationTask ( endpoint ) ; <nl> } <nl> } ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index d5b7bb5 . . 473ef49 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 1377 , 6 + 1377 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> case HOST _ ID : <nl> SystemTable . updatePeerInfo ( endpoint , " host _ id " , value . value ) ; <nl> break ; <nl> + case SCHEMA : <nl> + MigrationManager . instance . scheduleSchemaPull ( endpoint , epState ) ; <nl> } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index aec2420 . . 8fd2943 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> 1 . 0 . 7 <nl> * fix assertion when dropping a columnfamily with no sstables ( CASSANDRA - 3614 ) <nl> * more efficient allocation of small bloom filters ( CASSANDRA - 3618 ) <nl> - <nl> + * CLibrary . createHardLinkWithExec ( ) to check for errors ( CASSANDRA - 3101 ) <nl> <nl> 1 . 0 . 6 <nl> * ( CQL ) fix cqlsh support for replicate _ on _ write ( CASSANDRA - 3596 ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / CLibrary . java b / src / java / org / apache / cassandra / utils / CLibrary . java <nl> index 0939d84 . . 090a355 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / CLibrary . java <nl> + + + b / src / java / org / apache / cassandra / utils / CLibrary . java <nl> @ @ - 18 , 14 + 18 , 18 @ @ <nl> * / <nl> package org . apache . cassandra . utils ; <nl> <nl> + import java . io . BufferedReader ; <nl> import java . io . File ; <nl> import java . io . FileDescriptor ; <nl> import java . io . IOException ; <nl> + import java . io . InputStreamReader ; <nl> import java . lang . reflect . Field ; <nl> <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . commons . lang . StringUtils ; <nl> + <nl> import com . sun . jna . LastErrorException ; <nl> import com . sun . jna . Native ; <nl> <nl> @ @ - 148 , 6 + 152 , 7 @ @ public final class CLibrary <nl> } <nl> catch ( RuntimeException e ) <nl> { <nl> + logger . error ( " Unable to create hard link " , e ) ; <nl> if ( ! ( e instanceof LastErrorException ) ) <nl> throw e ; <nl> / / there are 17 different error codes listed on the man page . punt until / unless we find which <nl> @ @ - 178 , 10 + 183 , 37 @ @ public final class CLibrary <nl> pb = new ProcessBuilder ( " ln " , sourceFile . getAbsolutePath ( ) , destinationFile . getAbsolutePath ( ) ) ; <nl> pb . redirectErrorStream ( true ) ; <nl> } <nl> + try <nl> + { <nl> + exec ( pb ) ; <nl> + } <nl> + catch ( IOException ex ) <nl> + { <nl> + logger . error ( " Unable to create hard link " , ex ) ; <nl> + throw ex ; <nl> + } <nl> + } <nl> + <nl> + private static void exec ( ProcessBuilder pb ) throws IOException <nl> + { <nl> Process p = pb . start ( ) ; <nl> try <nl> { <nl> - p . waitFor ( ) ; <nl> + int errCode = p . waitFor ( ) ; <nl> + if ( errCode ! = 0 ) <nl> + { <nl> + BufferedReader in = new BufferedReader ( new InputStreamReader ( p . getInputStream ( ) ) ) ; <nl> + BufferedReader err = new BufferedReader ( new InputStreamReader ( p . getErrorStream ( ) ) ) ; <nl> + StringBuffer buff = new StringBuffer ( ) ; <nl> + String str ; <nl> + while ( ( str = in . readLine ( ) ) ! = null ) <nl> + buff . append ( str ) . append ( System . getProperty ( " line . separator " ) ) ; <nl> + while ( ( str = err . readLine ( ) ) ! = null ) <nl> + buff . append ( str ) . append ( System . getProperty ( " line . separator " ) ) ; <nl> + throw new IOException ( " Exception while executing the command : " + StringUtils . join ( pb . command ( ) , " " ) + <nl> + " , command error Code : " + errCode + <nl> + " , command output : " + buff . toString ( ) ) ; <nl> + } <nl> } <nl> catch ( InterruptedException e ) <nl> {

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b3a794f . . dc8e6e0 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 2 , 6 + 2 , 7 @ @ 
 * Fix BatchlogManager # deleteBatch ( ) use of millisecond timsestamps 
 ( CASSANDRA - 6822 ) 
 * Continue assassinating even if the endpoint vanishes ( CASSANDRA - 6787 ) 
 + * Schedule schema pulls on change ( CASSANDRA - 6971 ) 
 
 
 1 . 2 . 16 
 diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java 
 index 9f6113c . . 09caeb1 100644 
 - - - a / src / java / org / apache / cassandra / service / MigrationManager . java 
 + + + b / src / java / org / apache / cassandra / service / MigrationManager . java 
 @ @ - 91 , 11 + 91 , 15 @ @ public class MigrationManager 
 private static void maybeScheduleSchemaPull ( final UUID theirVersion , final InetAddress endpoint ) 
 { 
 if ( ( Schema . instance . getVersion ( ) ! = null & & Schema . instance . getVersion ( ) . equals ( theirVersion ) ) | | ! shouldPullSchemaFrom ( endpoint ) ) 
 + { 
 + logger . debug ( " Not pulling schema because versions match or shouldPullSchemaFrom returned false " ) ; 
 return ; 
 + } 
 
 if ( Schema . emptyVersion . equals ( Schema . instance . getVersion ( ) ) | | runtimeMXBean . getUptime ( ) < MIGRATION _ DELAY _ IN _ MS ) 
 { 
 / / If we think we may be bootstrapping or have recently started , submit MigrationTask immediately 
 + logger . debug ( " Submitting migration task for { } " , endpoint ) ; 
 submitMigrationTask ( endpoint ) ; 
 } 
 else 
 @ @ - 109 , 12 + 113 , 18 @ @ public class MigrationManager 
 / / grab the latest version of the schema since it may have changed again since the initial scheduling 
 EndpointState epState = Gossiper . instance . getEndpointStateForEndpoint ( endpoint ) ; 
 if ( epState = = null ) 
 + { 
 + logger . debug ( " epState vanished for { } , not submitting migration task " , endpoint ) ; 
 return ; 
 + } 
 VersionedValue value = epState . getApplicationState ( ApplicationState . SCHEMA ) ; 
 UUID currentVersion = UUID . fromString ( value . value ) ; 
 if ( Schema . instance . getVersion ( ) . equals ( currentVersion ) ) 
 + { 
 + logger . debug ( " not submitting migration task for { } because our versions match " , endpoint ) ; 
 return ; 
 - 
 + } 
 + logger . debug ( " submitting migration task for { } " , endpoint ) ; 
 submitMigrationTask ( endpoint ) ; 
 } 
 } ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index d5b7bb5 . . 473ef49 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 1377 , 6 + 1377 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 case HOST _ ID : 
 SystemTable . updatePeerInfo ( endpoint , " host _ id " , value . value ) ; 
 break ; 
 + case SCHEMA : 
 + MigrationManager . instance . scheduleSchemaPull ( endpoint , epState ) ; 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index aec2420 . . 8fd2943 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 1 . 0 . 7 
 * fix assertion when dropping a columnfamily with no sstables ( CASSANDRA - 3614 ) 
 * more efficient allocation of small bloom filters ( CASSANDRA - 3618 ) 
 - 
 + * CLibrary . createHardLinkWithExec ( ) to check for errors ( CASSANDRA - 3101 ) 
 
 1 . 0 . 6 
 * ( CQL ) fix cqlsh support for replicate _ on _ write ( CASSANDRA - 3596 ) 
 diff - - git a / src / java / org / apache / cassandra / utils / CLibrary . java b / src / java / org / apache / cassandra / utils / CLibrary . java 
 index 0939d84 . . 090a355 100644 
 - - - a / src / java / org / apache / cassandra / utils / CLibrary . java 
 + + + b / src / java / org / apache / cassandra / utils / CLibrary . java 
 @ @ - 18 , 14 + 18 , 18 @ @ 
 * / 
 package org . apache . cassandra . utils ; 
 
 + import java . io . BufferedReader ; 
 import java . io . File ; 
 import java . io . FileDescriptor ; 
 import java . io . IOException ; 
 + import java . io . InputStreamReader ; 
 import java . lang . reflect . Field ; 
 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . commons . lang . StringUtils ; 
 + 
 import com . sun . jna . LastErrorException ; 
 import com . sun . jna . Native ; 
 
 @ @ - 148 , 6 + 152 , 7 @ @ public final class CLibrary 
 } 
 catch ( RuntimeException e ) 
 { 
 + logger . error ( " Unable to create hard link " , e ) ; 
 if ( ! ( e instanceof LastErrorException ) ) 
 throw e ; 
 / / there are 17 different error codes listed on the man page . punt until / unless we find which 
 @ @ - 178 , 10 + 183 , 37 @ @ public final class CLibrary 
 pb = new ProcessBuilder ( " ln " , sourceFile . getAbsolutePath ( ) , destinationFile . getAbsolutePath ( ) ) ; 
 pb . redirectErrorStream ( true ) ; 
 } 
 + try 
 + { 
 + exec ( pb ) ; 
 + } 
 + catch ( IOException ex ) 
 + { 
 + logger . error ( " Unable to create hard link " , ex ) ; 
 + throw ex ; 
 + } 
 + } 
 + 
 + private static void exec ( ProcessBuilder pb ) throws IOException 
 + { 
 Process p = pb . start ( ) ; 
 try 
 { 
 - p . waitFor ( ) ; 
 + int errCode = p . waitFor ( ) ; 
 + if ( errCode ! = 0 ) 
 + { 
 + BufferedReader in = new BufferedReader ( new InputStreamReader ( p . getInputStream ( ) ) ) ; 
 + BufferedReader err = new BufferedReader ( new InputStreamReader ( p . getErrorStream ( ) ) ) ; 
 + StringBuffer buff = new StringBuffer ( ) ; 
 + String str ; 
 + while ( ( str = in . readLine ( ) ) ! = null ) 
 + buff . append ( str ) . append ( System . getProperty ( " line . separator " ) ) ; 
 + while ( ( str = err . readLine ( ) ) ! = null ) 
 + buff . append ( str ) . append ( System . getProperty ( " line . separator " ) ) ; 
 + throw new IOException ( " Exception while executing the command : " + StringUtils . join ( pb . command ( ) , " " ) + 
 + " , command error Code : " + errCode + 
 + " , command output : " + buff . toString ( ) ) ; 
 + } 
 } 
 catch ( InterruptedException e ) 
 {
