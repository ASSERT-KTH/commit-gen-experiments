BLEU SCORE: 0.027611988917697356

TEST MSG: Fix mixed mode partition range scans with limit
GENERATED MSG: Add build script and make sure it works

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b38ab06 . . 4f76c70 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 19 <nl> + * Fix mixed mode partition range scans with limit ( CASSANDRA - 15072 ) <nl> * cassandra - stress works with frozen collections : list and set ( CASSANDRA - 14907 ) <nl> * For nodetool listsnapshots output , put spaces between columns , and increase snapshot padding ( CASSANDRA - 14876 ) <nl> * Fix handling FS errors on writing and reading flat files - LogTransaction and hints ( CASSANDRA - 15053 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ReadCommand . java b / src / java / org / apache / cassandra / db / ReadCommand . java <nl> index fd453ef . . b499daf 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ReadCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / ReadCommand . java <nl> @ @ - 856 , 6 + 856 , 8 @ @ public abstract class ReadCommand implements ReadQuery <nl> limits = DataLimits . distinctLimits ( maxResults ) ; <nl> else if ( compositesToGroup = = - 1 ) <nl> limits = DataLimits . thriftLimits ( maxResults , perPartitionLimit ) ; <nl> + else if ( metadata . isStaticCompactTable ( ) ) <nl> + limits = DataLimits . legacyCompactStaticCqlLimits ( maxResults ) ; <nl> else <nl> limits = DataLimits . cqlLimits ( maxResults ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / DataLimits . java b / src / java / org / apache / cassandra / db / filter / DataLimits . java <nl> index 4c57a76 . . 46a1c6d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / DataLimits . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / DataLimits . java <nl> @ @ - 80 , 6 + 80 , 25 @ @ public abstract class DataLimits <nl> return new CQLLimits ( cqlRowLimit ) ; <nl> } <nl> <nl> + / / mixed mode partition range scans on compact storage tables without clustering columns coordinated by 2 . x are <nl> + / / returned as one ( cql ) row per cell , but we need to count each partition as a single row . So we just return a <nl> + / / CQLLimits instance that doesn ' t count rows towards it ' s limit . See CASSANDRA - 15072 <nl> + public static DataLimits legacyCompactStaticCqlLimits ( int cqlRowLimits ) <nl> + { <nl> + return new CQLLimits ( cqlRowLimits ) { <nl> + public Counter newCounter ( int nowInSec , boolean assumeLiveData , boolean countPartitionsWithOnlyStaticData , boolean enforceStrictLiveness ) <nl> + { <nl> + return new CQLCounter ( nowInSec , assumeLiveData , countPartitionsWithOnlyStaticData , enforceStrictLiveness ) { <nl> + public Row applyToRow ( Row row ) <nl> + { <nl> + / / noop : only count full partitions <nl> + return row ; <nl> + } <nl> + } ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> public static DataLimits cqlLimits ( int cqlRowLimit , int perPartitionLimit ) <nl> { <nl> return new CQLLimits ( cqlRowLimit , perPartitionLimit ) ; <nl> diff - - git a / test / distributed / org / apache / cassandra / distributed / upgrade / CompactStorage2to3UpgradeTest . java b / test / distributed / org / apache / cassandra / distributed / upgrade / CompactStorage2to3UpgradeTest . java <nl> new file mode 100644 <nl> index 0000000 . . 5c45d52 <nl> - - - / dev / null <nl> + + + b / test / distributed / org / apache / cassandra / distributed / upgrade / CompactStorage2to3UpgradeTest . java <nl> @ @ - 0 , 0 + 1 , 102 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . distributed . upgrade ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . db . ConsistencyLevel ; <nl> + import org . apache . cassandra . distributed . api . ICoordinator ; <nl> + import org . apache . cassandra . distributed . impl . Versions ; <nl> + import org . apache . cassandra . distributed . test . DistributedTestBase ; <nl> + <nl> + public class CompactStorage2to3UpgradeTest extends UpgradeTestBase <nl> + { <nl> + @ Test <nl> + public void multiColumn ( ) throws Throwable <nl> + { <nl> + new TestCase ( ) <nl> + . upgrade ( Versions . Major . v22 , Versions . Major . v30 ) <nl> + . setup ( cluster - > { <nl> + assert cluster . size ( ) = = 3 ; <nl> + int rf = cluster . size ( ) - 1 ; <nl> + assert rf = = 2 ; <nl> + cluster . schemaChange ( " CREATE KEYSPACE ks WITH replication = { ' class ' : ' SimpleStrategy ' , ' replication _ factor ' : " + ( cluster . size ( ) - 1 ) + " } ; " ) ; <nl> + cluster . schemaChange ( " CREATE TABLE ks . tbl ( pk int , v1 int , v2 text , PRIMARY KEY ( pk ) ) WITH COMPACT STORAGE " ) ; <nl> + ICoordinator coordinator = cluster . coordinator ( 1 ) ; <nl> + / / these shouldn ' t be replicated by the 3rd node <nl> + coordinator . execute ( " INSERT INTO ks . tbl ( pk , v1 , v2 ) VALUES ( 3 , 3 , ' 3 ' ) " , ConsistencyLevel . ALL ) ; <nl> + coordinator . execute ( " INSERT INTO ks . tbl ( pk , v1 , v2 ) VALUES ( 9 , 9 , ' 9 ' ) " , ConsistencyLevel . ALL ) ; <nl> + for ( int i = 0 ; i < cluster . size ( ) ; i + + ) <nl> + { <nl> + int nodeNum = i + 1 ; <nl> + System . out . println ( String . format ( " * * * * * * node % s : % s " , nodeNum , cluster . get ( nodeNum ) . config ( ) ) ) ; <nl> + } <nl> + <nl> + } ) <nl> + . runAfterNodeUpgrade ( ( ( cluster , node ) - > { <nl> + if ( node ! = 2 ) <nl> + return ; <nl> + <nl> + Object [ ] [ ] rows = cluster . coordinator ( 3 ) . execute ( " SELECT * FROM ks . tbl LIMIT 2 " , ConsistencyLevel . ALL ) ; <nl> + Object [ ] [ ] expected = { <nl> + DistributedTestBase . row ( 9 , 9 , " 9 " ) , <nl> + DistributedTestBase . row ( 3 , 3 , " 3 " ) <nl> + } ; <nl> + DistributedTestBase . assertRows ( rows , expected ) ; <nl> + <nl> + } ) ) . run ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void singleColumn ( ) throws Throwable <nl> + { <nl> + new TestCase ( ) <nl> + . upgrade ( Versions . Major . v22 , Versions . Major . v30 ) <nl> + . setup ( cluster - > { <nl> + assert cluster . size ( ) = = 3 ; <nl> + int rf = cluster . size ( ) - 1 ; <nl> + assert rf = = 2 ; <nl> + cluster . schemaChange ( " CREATE KEYSPACE ks WITH replication = { ' class ' : ' SimpleStrategy ' , ' replication _ factor ' : " + ( cluster . size ( ) - 1 ) + " } ; " ) ; <nl> + cluster . schemaChange ( " CREATE TABLE ks . tbl ( pk int , v int , PRIMARY KEY ( pk ) ) WITH COMPACT STORAGE " ) ; <nl> + ICoordinator coordinator = cluster . coordinator ( 1 ) ; <nl> + / / these shouldn ' t be replicated by the 3rd node <nl> + coordinator . execute ( " INSERT INTO ks . tbl ( pk , v ) VALUES ( 3 , 3 ) " , ConsistencyLevel . ALL ) ; <nl> + coordinator . execute ( " INSERT INTO ks . tbl ( pk , v ) VALUES ( 9 , 9 ) " , ConsistencyLevel . ALL ) ; <nl> + for ( int i = 0 ; i < cluster . size ( ) ; i + + ) <nl> + { <nl> + int nodeNum = i + 1 ; <nl> + System . out . println ( String . format ( " * * * * * * node % s : % s " , nodeNum , cluster . get ( nodeNum ) . config ( ) ) ) ; <nl> + } <nl> + <nl> + } ) <nl> + . runAfterNodeUpgrade ( ( ( cluster , node ) - > { <nl> + <nl> + if ( node < 2 ) <nl> + return ; <nl> + <nl> + Object [ ] [ ] rows = cluster . coordinator ( 3 ) . execute ( " SELECT * FROM ks . tbl LIMIT 2 " , ConsistencyLevel . ALL ) ; <nl> + Object [ ] [ ] expected = { <nl> + DistributedTestBase . row ( 9 , 9 ) , <nl> + DistributedTestBase . row ( 3 , 3 ) <nl> + } ; <nl> + DistributedTestBase . assertRows ( rows , expected ) ; <nl> + <nl> + } ) ) . run ( ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> new file mode 100644 <nl> index 0000000 . . f396668 <nl> - - - / dev / null <nl> + + + b / build . xml <nl> @ @ - 0 , 0 + 1 , 133 @ @ <nl> + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " standalone = " no " ? > <nl> + < project basedir = " . " default = " build " name = " cassandra " > <nl> + < property environment = " env " / > <nl> + < property name = " debuglevel " value = " source , lines , vars " / > <nl> + <nl> + < property name = " basedir " value = " . " / > <nl> + < property name = " build . src " value = " $ { basedir } / src " / > <nl> + < property name = " build . lib " value = " $ { basedir } / lib " / > <nl> + < property name = " build . dir " value = " $ { basedir } / build " / > <nl> + < property name = " build . classes " value = " $ { build . dir } / classes " / > <nl> + < property name = " final . name " value = " cassandra " / > <nl> + <nl> + < ! - - <nl> + 	 Add all the dependencies . <nl> + - - > <nl> + < path id = " cassandra . classpath " > <nl> + < pathelement location = " $ { build . classes } " / > <nl> + < pathelement location = " $ { build . lib } / activation . jar " / > <nl> + < pathelement location = " $ { build . lib } / antlr - runtime - 3 . 0 . 1 . jar " / > <nl> + < pathelement location = " $ { build . lib } / hadoop - core . jar " / > <nl> + < pathelement location = " $ { build . lib } / asm - all - 2 . 2 . 1 . jar " / > <nl> + < pathelement location = " $ { build . lib } / azul - collections . jar " / > <nl> + < pathelement location = " $ { build . lib } / bcel - 5 . 2 . jar " / > <nl> + < pathelement location = " $ { build . lib } / commons - cli - 1 . 1 . jar " / > <nl> + < pathelement location = " $ { build . lib } / commons - javaflow - 1 . 0 - SNAPSHOT . jar " / > <nl> + < pathelement location = " $ { build . lib } / colt . jar " / > <nl> + < pathelement location = " $ { build . lib } / libfb303 . jar " / > <nl> + < pathelement location = " $ { build . lib } / commons - logging - 1 . 0 . 4 . jar " / > <nl> + < pathelement location = " $ { build . lib } / FastInfoset . jar " / > <nl> + < pathelement location = " $ { build . lib } / commons - math - 1 . 1 . jar " / > <nl> + < pathelement location = " $ { build . lib } / flanagan . jar " / > <nl> + < pathelement location = " $ { build . lib } / j2ee . jar " / > <nl> + < pathelement location = " $ { build . lib } / groovy - 1 . 5 . 6 . jar " / > <nl> + < pathelement location = " $ { build . lib } / groovy - engine . jar " / > <nl> + < pathelement location = " $ { build . lib } / javacore . jar " / > <nl> + < pathelement location = " $ { build . lib } / javolution . jar " / > <nl> + < pathelement location = " $ { build . lib } / jaxb1 - impl . jar " / > <nl> + < pathelement location = " $ { build . lib } / jaxb - api . jar " / > <nl> + < pathelement location = " $ { build . lib } / jaxb - impl . jar " / > <nl> + < pathelement location = " $ { build . lib } / jaxb - xjc . jar " / > <nl> + < pathelement location = " $ { build . lib } / jaxws - 2 _ 0 . jar " / > <nl> + < pathelement location = " $ { build . lib } / jaxws - api . jar " / > <nl> + < pathelement location = " $ { build . lib } / jaxws - rt . jar " / > <nl> + < pathelement location = " $ { build . lib } / jettison . jar " / > <nl> + < pathelement location = " $ { build . lib } / jline - 0 . 9 . 94 . jar " / > <nl> + < pathelement location = " $ { build . lib } / JSAP - 2 . 1 . jar " / > <nl> + < pathelement location = " $ { build . lib } / jsr173 _ api . jar " / > <nl> + < pathelement location = " $ { build . lib } / jsr181 - api . jar " / > <nl> + < pathelement location = " $ { build . lib } / jsr250 - api . jar " / > <nl> + < pathelement location = " $ { build . lib } / libthrift . jar " / > <nl> + < pathelement location = " $ { build . lib } / log4j - 1 . 2 . 8 . jar " / > <nl> + < pathelement location = " $ { build . lib } / lucene - core - 2 . 2 . 0 . jar " / > <nl> + < pathelement location = " $ { build . lib } / messaging . jar " / > <nl> + < pathelement location = " $ { build . lib } / mysql - connector - java - 5 . 0 . 7 - bin . jar " / > <nl> + < pathelement location = " $ { build . lib } / sjsxp . jar " / > <nl> + < pathelement location = " $ { build . lib } / xerces . jar " / > <nl> + < pathelement location = " $ { build . lib } / xpp3 . jar " / > <nl> + < pathelement location = " $ { build . lib } / xstream . jar " / > <nl> + < pathelement location = " $ { build . lib } / trove - 2 . 0 . 2 . jar " / > <nl> + < pathelement location = " $ { build . lib } / zookeeper - 3 . 0 . 0 . jar " / > <nl> + < pathelement location = " $ { build . lib } / pcj . jar " / > <nl> + < pathelement location = " $ { build . lib } / " / > <nl> + < / path > <nl> + <nl> + < ! - - <nl> + 	 Setup the output directories . <nl> + - - > <nl> + < target name = " init " > <nl> + < mkdir dir = " $ { build . classes } " / > <nl> + < / target > <nl> + < target name = " clean " > <nl> + < delete dir = " $ { build . classes } " / > <nl> + < / target > <nl> + < target depends = " clean " name = " cleanall " / > <nl> + <nl> + <nl> + <nl> + < ! - - <nl> + This generates the CLI grammar files from Cli . g <nl> + - - > <nl> + < target name = " gen - cli - grammar " > <nl> + < echo > Building Grammar $ { build . src } / org / apache / cassandra / infrastructure / cli / Cli . g . . . . < / echo > <nl> + < java classname = " org . antlr . Tool " <nl> + classpath = " $ { build . lib } / antlr - 3 . 0 . 1 . jar : $ { build . lib } / stringtemplate - 3 . 0 . jar : $ { build . lib } / antlr - 2 . 7 . 7 . jar " <nl> + fork = " true " > <nl> + < arg value = " $ { build . src } / org / apache / cassandra / infrastructure / cli / Cli . g " / > <nl> + < / java > <nl> + < / target > <nl> + <nl> + < ! - - <nl> + This generates the CQL grammar files from Cql . g <nl> + - - > <nl> + < target name = " gen - cql - grammar " > <nl> + < echo > Building Grammar $ { build . src } / org / apache / cassandra / infrastructure / cql / compiler / parse / Cql . g . . . . < / echo > <nl> + < java classname = " org . antlr . Tool " <nl> + classpath = " $ { build . lib } / antlr - 3 . 0 . 1 . jar : $ { build . lib } / stringtemplate - 3 . 0 . jar : $ { build . lib } / antlr - 2 . 7 . 7 . jar " <nl> + fork = " true " > <nl> + < arg value = " $ { build . src } / org / apache / cassandra / infrastructure / cql / compiler / parse / Cql . g " / > <nl> + < / java > <nl> + < / target > <nl> + <nl> + < ! - - <nl> + 	 The build target builds all the . class files <nl> + - - > <nl> + < target depends = " build - subprojects , build - project " name = " build " / > <nl> + < target name = " build - subprojects " / > <nl> + < target depends = " init " name = " build - project " > <nl> + < echo message = " $ { ant . project . name } : $ { ant . file } " / > <nl> + < javac debug = " true " debuglevel = " $ { debuglevel } " destdir = " $ { build . classes } " > <nl> + < src path = " $ { build . src } " / > <nl> + < classpath refid = " cassandra . classpath " / > <nl> + < / javac > <nl> + < / target > <nl> + <nl> + < ! - - <nl> + 	 The jar target makes cassandra . jar output . <nl> + - - > <nl> + < target name = " jar " depends = " build " > <nl> + < jar jarfile = " $ { build . dir } / $ { final . name } . jar " <nl> + basedir = " $ { build . classes } " > <nl> + < manifest > <nl> + < ! - - < section name = " org / apache / cassandra / infrastructure " > - - > <nl> + < attribute name = " Implementation - Title " value = " Cassandra " / > <nl> + < attribute name = " Implementation - Version " value = " 1 . 1 " / > <nl> + < attribute name = " Implementation - Vendor " value = " Facebook " / > <nl> + 	 < attribute name = " Premain - Class " value = " org . apache . cassandra . infrastructure . continuations . CAgent " / > <nl> + < ! - - < / section > - - > <nl> + < / manifest > <nl> + < / jar > <nl> + < / target > <nl> + <nl> + <nl> + < / project > <nl> diff - - git a / src / org / apache / cassandra / service / StorageService . java b / src / org / apache / cassandra / service / StorageService . java <nl> index 10fe532 . . aee3c46 100644 <nl> - - - a / src / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / org / apache / cassandra / service / StorageService . java <nl> @ @ - 70 , 11 + 70 , 6 @ @ import org . apache . cassandra . locator . IReplicaPlacementStrategy ; <nl> import org . apache . cassandra . locator . RackAwareStrategy ; <nl> import org . apache . cassandra . locator . RackUnawareStrategy ; <nl> import org . apache . cassandra . locator . TokenMetadata ; <nl> - import org . apache . cassandra . mapreduce . JobTracker ; <nl> - import org . apache . cassandra . mapreduce . MapAssignmentVerbHandler ; <nl> - import org . apache . cassandra . mapreduce . MapCompletionVerbHandler ; <nl> - import org . apache . cassandra . mapreduce . ReduceAssignmentVerbHandler ; <nl> - import org . apache . cassandra . mapreduce . TaskTracker ; <nl> import org . apache . cassandra . net . CompactEndPointSerializationHelper ; <nl> import org . apache . cassandra . net . EndPoint ; <nl> import org . apache . cassandra . net . IVerbHandler ; <nl> @ @ - 337 , 10 + 332 , 6 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> MessagingService . getMessagingInstance ( ) . registerVerbHandlers ( StorageService . dataFileVerbHandler _ , new DataFileVerbHandler ( ) ) ; <nl> MessagingService . getMessagingInstance ( ) . registerVerbHandlers ( StorageService . mbrshipCleanerVerbHandler _ , new MembershipCleanerVerbHandler ( ) ) ; <nl> MessagingService . getMessagingInstance ( ) . registerVerbHandlers ( StorageService . bsMetadataVerbHandler _ , new BootstrapMetadataVerbHandler ( ) ) ; <nl> - MessagingService . getMessagingInstance ( ) . registerVerbHandlers ( StorageService . jobConfigurationVerbHandler _ , new JobTracker . JobConfigurationVerbHandler ( ) ) ; <nl> - MessagingService . getMessagingInstance ( ) . registerVerbHandlers ( StorageService . mapAssignmentVerbHandler _ , new MapAssignmentVerbHandler ( ) ) ; <nl> - MessagingService . getMessagingInstance ( ) . registerVerbHandlers ( StorageService . reduceAssignmentVerbHandler _ , new ReduceAssignmentVerbHandler ( ) ) ; <nl> - MessagingService . getMessagingInstance ( ) . registerVerbHandlers ( StorageService . mapCompletionVerbHandler _ , new MapCompletionVerbHandler ( ) ) ; <nl> MessagingService . getMessagingInstance ( ) . registerVerbHandlers ( StorageService . calloutDeployVerbHandler _ , new CalloutDeployVerbHandler ( ) ) ; <nl> MessagingService . getMessagingInstance ( ) . registerVerbHandlers ( StorageService . touchVerbHandler _ , new TouchVerbHandler ( ) ) ; <nl> <nl> @ @ - 517 , 12 + 508 , 12 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> / / match ( e . g . somehost . vip vs somehost . vip . domain . com ) <nl> if ( DatabaseDescriptor . getJobTrackerAddress ( ) . equals ( StorageService . tcpAddr _ . getHost ( ) ) ) <nl> { <nl> - JobTracker . instance ( ) . start ( ) ; <nl> - TaskTracker . instance ( ) . start ( ) ; <nl> + / / JobTracker . instance ( ) . start ( ) ; <nl> + / / TaskTracker . instance ( ) . start ( ) ; <nl> } <nl> else <nl> { <nl> - TaskTracker . instance ( ) . start ( ) ; <nl> + / / TaskTracker . instance ( ) . start ( ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / org / apache / cassandra / test / DBTest . java b / src / org / apache / cassandra / test / DBTest . java <nl> index 3ba8eb9 . . 2cb579d 100644 <nl> - - - a / src / org / apache / cassandra / test / DBTest . java <nl> + + + b / src / org / apache / cassandra / test / DBTest . java <nl> @ @ - 38 , 7 + 38 , 6 @ @ import org . apache . cassandra . io . IFileReader ; <nl> import org . apache . cassandra . io . IFileWriter ; <nl> import org . apache . cassandra . io . SSTable ; <nl> import org . apache . cassandra . io . SequenceFile ; <nl> - import org . apache . cassandra . mapreduce . SequentialScanner ; <nl> import org . apache . cassandra . net . EndPoint ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . BloomFilter ; <nl> @ @ - 113 , 13 + 112 , 14 @ @ public class DBTest <nl> <nl> private static void doSequentialScannerTest ( ) throws Throwable <nl> { <nl> - SequentialScanner scanner = new SequentialScanner ( " Mailbox " ) ; <nl> + / * SequentialScanner scanner = new SequentialScanner ( " Mailbox " ) ; <nl> while ( scanner . hasNext ( ) ) <nl> { <nl> Row row = scanner . next ( ) ; <nl> System . out . println ( row . getColumnFamily ( " Test " ) ) ; <nl> System . out . println ( row . getColumnFamily ( " Test2 " ) ) ; <nl> } <nl> + * / <nl> } <nl> <nl> public static void doTest ( ) <nl> diff - - git a / src / org / apache / cassandra / test / TestRunner . java b / src / org / apache / cassandra / test / TestRunner . java <nl> index 9736a9a . . a096834 100644 <nl> - - - a / src / org / apache / cassandra / test / TestRunner . java <nl> + + + b / src / org / apache / cassandra / test / TestRunner . java <nl> @ @ - 69 , 7 + 69 , 6 @ @ import org . apache . cassandra . io . DataInputBuffer ; <nl> import org . apache . cassandra . io . DataOutputBuffer ; <nl> import org . apache . cassandra . io . IFileWriter ; <nl> import org . apache . cassandra . io . SequenceFile ; <nl> - import org . apache . cassandra . mapreduce . SequentialScanner ; <nl> import org . apache . cassandra . net . EndPoint ; <nl> import org . apache . cassandra . net . IVerbHandler ; <nl> import org . apache . cassandra . net . Message ; <nl> @ @ - 257 , 7 + 256 , 7 @ @ class Scanner implements Runnable <nl> <nl> public void run ( ) <nl> { <nl> - try <nl> + / * try <nl> { <nl> SequentialScanner scanner = new SequentialScanner ( " Mailbox " ) ; <nl> <nl> @ @ - 271 , 6 + 270 , 7 @ @ class Scanner implements Runnable <nl> { <nl> ex . printStackTrace ( ) ; <nl> } <nl> + * / <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b38ab06 . . 4f76c70 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 19 
 + * Fix mixed mode partition range scans with limit ( CASSANDRA - 15072 ) 
 * cassandra - stress works with frozen collections : list and set ( CASSANDRA - 14907 ) 
 * For nodetool listsnapshots output , put spaces between columns , and increase snapshot padding ( CASSANDRA - 14876 ) 
 * Fix handling FS errors on writing and reading flat files - LogTransaction and hints ( CASSANDRA - 15053 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ReadCommand . java b / src / java / org / apache / cassandra / db / ReadCommand . java 
 index fd453ef . . b499daf 100644 
 - - - a / src / java / org / apache / cassandra / db / ReadCommand . java 
 + + + b / src / java / org / apache / cassandra / db / ReadCommand . java 
 @ @ - 856 , 6 + 856 , 8 @ @ public abstract class ReadCommand implements ReadQuery 
 limits = DataLimits . distinctLimits ( maxResults ) ; 
 else if ( compositesToGroup = = - 1 ) 
 limits = DataLimits . thriftLimits ( maxResults , perPartitionLimit ) ; 
 + else if ( metadata . isStaticCompactTable ( ) ) 
 + limits = DataLimits . legacyCompactStaticCqlLimits ( maxResults ) ; 
 else 
 limits = DataLimits . cqlLimits ( maxResults ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / filter / DataLimits . java b / src / java / org / apache / cassandra / db / filter / DataLimits . java 
 index 4c57a76 . . 46a1c6d 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / DataLimits . java 
 + + + b / src / java / org / apache / cassandra / db / filter / DataLimits . java 
 @ @ - 80 , 6 + 80 , 25 @ @ public abstract class DataLimits 
 return new CQLLimits ( cqlRowLimit ) ; 
 } 
 
 + / / mixed mode partition range scans on compact storage tables without clustering columns coordinated by 2 . x are 
 + / / returned as one ( cql ) row per cell , but we need to count each partition as a single row . So we just return a 
 + / / CQLLimits instance that doesn ' t count rows towards it ' s limit . See CASSANDRA - 15072 
 + public static DataLimits legacyCompactStaticCqlLimits ( int cqlRowLimits ) 
 + { 
 + return new CQLLimits ( cqlRowLimits ) { 
 + public Counter newCounter ( int nowInSec , boolean assumeLiveData , boolean countPartitionsWithOnlyStaticData , boolean enforceStrictLiveness ) 
 + { 
 + return new CQLCounter ( nowInSec , assumeLiveData , countPartitionsWithOnlyStaticData , enforceStrictLiveness ) { 
 + public Row applyToRow ( Row row ) 
 + { 
 + / / noop : only count full partitions 
 + return row ; 
 + } 
 + } ; 
 + } 
 + } ; 
 + } 
 + 
 public static DataLimits cqlLimits ( int cqlRowLimit , int perPartitionLimit ) 
 { 
 return new CQLLimits ( cqlRowLimit , perPartitionLimit ) ; 
 diff - - git a / test / distributed / org / apache / cassandra / distributed / upgrade / CompactStorage2to3UpgradeTest . java b / test / distributed / org / apache / cassandra / distributed / upgrade / CompactStorage2to3UpgradeTest . java 
 new file mode 100644 
 index 0000000 . . 5c45d52 
 - - - / dev / null 
 + + + b / test / distributed / org / apache / cassandra / distributed / upgrade / CompactStorage2to3UpgradeTest . java 
 @ @ - 0 , 0 + 1 , 102 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . distributed . upgrade ; 
 + 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . db . ConsistencyLevel ; 
 + import org . apache . cassandra . distributed . api . ICoordinator ; 
 + import org . apache . cassandra . distributed . impl . Versions ; 
 + import org . apache . cassandra . distributed . test . DistributedTestBase ; 
 + 
 + public class CompactStorage2to3UpgradeTest extends UpgradeTestBase 
 + { 
 + @ Test 
 + public void multiColumn ( ) throws Throwable 
 + { 
 + new TestCase ( ) 
 + . upgrade ( Versions . Major . v22 , Versions . Major . v30 ) 
 + . setup ( cluster - > { 
 + assert cluster . size ( ) = = 3 ; 
 + int rf = cluster . size ( ) - 1 ; 
 + assert rf = = 2 ; 
 + cluster . schemaChange ( " CREATE KEYSPACE ks WITH replication = { ' class ' : ' SimpleStrategy ' , ' replication _ factor ' : " + ( cluster . size ( ) - 1 ) + " } ; " ) ; 
 + cluster . schemaChange ( " CREATE TABLE ks . tbl ( pk int , v1 int , v2 text , PRIMARY KEY ( pk ) ) WITH COMPACT STORAGE " ) ; 
 + ICoordinator coordinator = cluster . coordinator ( 1 ) ; 
 + / / these shouldn ' t be replicated by the 3rd node 
 + coordinator . execute ( " INSERT INTO ks . tbl ( pk , v1 , v2 ) VALUES ( 3 , 3 , ' 3 ' ) " , ConsistencyLevel . ALL ) ; 
 + coordinator . execute ( " INSERT INTO ks . tbl ( pk , v1 , v2 ) VALUES ( 9 , 9 , ' 9 ' ) " , ConsistencyLevel . ALL ) ; 
 + for ( int i = 0 ; i < cluster . size ( ) ; i + + ) 
 + { 
 + int nodeNum = i + 1 ; 
 + System . out . println ( String . format ( " * * * * * * node % s : % s " , nodeNum , cluster . get ( nodeNum ) . config ( ) ) ) ; 
 + } 
 + 
 + } ) 
 + . runAfterNodeUpgrade ( ( ( cluster , node ) - > { 
 + if ( node ! = 2 ) 
 + return ; 
 + 
 + Object [ ] [ ] rows = cluster . coordinator ( 3 ) . execute ( " SELECT * FROM ks . tbl LIMIT 2 " , ConsistencyLevel . ALL ) ; 
 + Object [ ] [ ] expected = { 
 + DistributedTestBase . row ( 9 , 9 , " 9 " ) , 
 + DistributedTestBase . row ( 3 , 3 , " 3 " ) 
 + } ; 
 + DistributedTestBase . assertRows ( rows , expected ) ; 
 + 
 + } ) ) . run ( ) ; 
 + } 
 + 
 + @ Test 
 + public void singleColumn ( ) throws Throwable 
 + { 
 + new TestCase ( ) 
 + . upgrade ( Versions . Major . v22 , Versions . Major . v30 ) 
 + . setup ( cluster - > { 
 + assert cluster . size ( ) = = 3 ; 
 + int rf = cluster . size ( ) - 1 ; 
 + assert rf = = 2 ; 
 + cluster . schemaChange ( " CREATE KEYSPACE ks WITH replication = { ' class ' : ' SimpleStrategy ' , ' replication _ factor ' : " + ( cluster . size ( ) - 1 ) + " } ; " ) ; 
 + cluster . schemaChange ( " CREATE TABLE ks . tbl ( pk int , v int , PRIMARY KEY ( pk ) ) WITH COMPACT STORAGE " ) ; 
 + ICoordinator coordinator = cluster . coordinator ( 1 ) ; 
 + / / these shouldn ' t be replicated by the 3rd node 
 + coordinator . execute ( " INSERT INTO ks . tbl ( pk , v ) VALUES ( 3 , 3 ) " , ConsistencyLevel . ALL ) ; 
 + coordinator . execute ( " INSERT INTO ks . tbl ( pk , v ) VALUES ( 9 , 9 ) " , ConsistencyLevel . ALL ) ; 
 + for ( int i = 0 ; i < cluster . size ( ) ; i + + ) 
 + { 
 + int nodeNum = i + 1 ; 
 + System . out . println ( String . format ( " * * * * * * node % s : % s " , nodeNum , cluster . get ( nodeNum ) . config ( ) ) ) ; 
 + } 
 + 
 + } ) 
 + . runAfterNodeUpgrade ( ( ( cluster , node ) - > { 
 + 
 + if ( node < 2 ) 
 + return ; 
 + 
 + Object [ ] [ ] rows = cluster . coordinator ( 3 ) . execute ( " SELECT * FROM ks . tbl LIMIT 2 " , ConsistencyLevel . ALL ) ; 
 + Object [ ] [ ] expected = { 
 + DistributedTestBase . row ( 9 , 9 ) , 
 + DistributedTestBase . row ( 3 , 3 ) 
 + } ; 
 + DistributedTestBase . assertRows ( rows , expected ) ; 
 + 
 + } ) ) . run ( ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / build . xml b / build . xml 
 new file mode 100644 
 index 0000000 . . f396668 
 - - - / dev / null 
 + + + b / build . xml 
 @ @ - 0 , 0 + 1 , 133 @ @ 
 + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " standalone = " no " ? > 
 + < project basedir = " . " default = " build " name = " cassandra " > 
 + < property environment = " env " / > 
 + < property name = " debuglevel " value = " source , lines , vars " / > 
 + 
 + < property name = " basedir " value = " . " / > 
 + < property name = " build . src " value = " $ { basedir } / src " / > 
 + < property name = " build . lib " value = " $ { basedir } / lib " / > 
 + < property name = " build . dir " value = " $ { basedir } / build " / > 
 + < property name = " build . classes " value = " $ { build . dir } / classes " / > 
 + < property name = " final . name " value = " cassandra " / > 
 + 
 + < ! - - 
 + 	 Add all the dependencies . 
 + - - > 
 + < path id = " cassandra . classpath " > 
 + < pathelement location = " $ { build . classes } " / > 
 + < pathelement location = " $ { build . lib } / activation . jar " / > 
 + < pathelement location = " $ { build . lib } / antlr - runtime - 3 . 0 . 1 . jar " / > 
 + < pathelement location = " $ { build . lib } / hadoop - core . jar " / > 
 + < pathelement location = " $ { build . lib } / asm - all - 2 . 2 . 1 . jar " / > 
 + < pathelement location = " $ { build . lib } / azul - collections . jar " / > 
 + < pathelement location = " $ { build . lib } / bcel - 5 . 2 . jar " / > 
 + < pathelement location = " $ { build . lib } / commons - cli - 1 . 1 . jar " / > 
 + < pathelement location = " $ { build . lib } / commons - javaflow - 1 . 0 - SNAPSHOT . jar " / > 
 + < pathelement location = " $ { build . lib } / colt . jar " / > 
 + < pathelement location = " $ { build . lib } / libfb303 . jar " / > 
 + < pathelement location = " $ { build . lib } / commons - logging - 1 . 0 . 4 . jar " / > 
 + < pathelement location = " $ { build . lib } / FastInfoset . jar " / > 
 + < pathelement location = " $ { build . lib } / commons - math - 1 . 1 . jar " / > 
 + < pathelement location = " $ { build . lib } / flanagan . jar " / > 
 + < pathelement location = " $ { build . lib } / j2ee . jar " / > 
 + < pathelement location = " $ { build . lib } / groovy - 1 . 5 . 6 . jar " / > 
 + < pathelement location = " $ { build . lib } / groovy - engine . jar " / > 
 + < pathelement location = " $ { build . lib } / javacore . jar " / > 
 + < pathelement location = " $ { build . lib } / javolution . jar " / > 
 + < pathelement location = " $ { build . lib } / jaxb1 - impl . jar " / > 
 + < pathelement location = " $ { build . lib } / jaxb - api . jar " / > 
 + < pathelement location = " $ { build . lib } / jaxb - impl . jar " / > 
 + < pathelement location = " $ { build . lib } / jaxb - xjc . jar " / > 
 + < pathelement location = " $ { build . lib } / jaxws - 2 _ 0 . jar " / > 
 + < pathelement location = " $ { build . lib } / jaxws - api . jar " / > 
 + < pathelement location = " $ { build . lib } / jaxws - rt . jar " / > 
 + < pathelement location = " $ { build . lib } / jettison . jar " / > 
 + < pathelement location = " $ { build . lib } / jline - 0 . 9 . 94 . jar " / > 
 + < pathelement location = " $ { build . lib } / JSAP - 2 . 1 . jar " / > 
 + < pathelement location = " $ { build . lib } / jsr173 _ api . jar " / > 
 + < pathelement location = " $ { build . lib } / jsr181 - api . jar " / > 
 + < pathelement location = " $ { build . lib } / jsr250 - api . jar " / > 
 + < pathelement location = " $ { build . lib } / libthrift . jar " / > 
 + < pathelement location = " $ { build . lib } / log4j - 1 . 2 . 8 . jar " / > 
 + < pathelement location = " $ { build . lib } / lucene - core - 2 . 2 . 0 . jar " / > 
 + < pathelement location = " $ { build . lib } / messaging . jar " / > 
 + < pathelement location = " $ { build . lib } / mysql - connector - java - 5 . 0 . 7 - bin . jar " / > 
 + < pathelement location = " $ { build . lib } / sjsxp . jar " / > 
 + < pathelement location = " $ { build . lib } / xerces . jar " / > 
 + < pathelement location = " $ { build . lib } / xpp3 . jar " / > 
 + < pathelement location = " $ { build . lib } / xstream . jar " / > 
 + < pathelement location = " $ { build . lib } / trove - 2 . 0 . 2 . jar " / > 
 + < pathelement location = " $ { build . lib } / zookeeper - 3 . 0 . 0 . jar " / > 
 + < pathelement location = " $ { build . lib } / pcj . jar " / > 
 + < pathelement location = " $ { build . lib } / " / > 
 + < / path > 
 + 
 + < ! - - 
 + 	 Setup the output directories . 
 + - - > 
 + < target name = " init " > 
 + < mkdir dir = " $ { build . classes } " / > 
 + < / target > 
 + < target name = " clean " > 
 + < delete dir = " $ { build . classes } " / > 
 + < / target > 
 + < target depends = " clean " name = " cleanall " / > 
 + 
 + 
 + 
 + < ! - - 
 + This generates the CLI grammar files from Cli . g 
 + - - > 
 + < target name = " gen - cli - grammar " > 
 + < echo > Building Grammar $ { build . src } / org / apache / cassandra / infrastructure / cli / Cli . g . . . . < / echo > 
 + < java classname = " org . antlr . Tool " 
 + classpath = " $ { build . lib } / antlr - 3 . 0 . 1 . jar : $ { build . lib } / stringtemplate - 3 . 0 . jar : $ { build . lib } / antlr - 2 . 7 . 7 . jar " 
 + fork = " true " > 
 + < arg value = " $ { build . src } / org / apache / cassandra / infrastructure / cli / Cli . g " / > 
 + < / java > 
 + < / target > 
 + 
 + < ! - - 
 + This generates the CQL grammar files from Cql . g 
 + - - > 
 + < target name = " gen - cql - grammar " > 
 + < echo > Building Grammar $ { build . src } / org / apache / cassandra / infrastructure / cql / compiler / parse / Cql . g . . . . < / echo > 
 + < java classname = " org . antlr . Tool " 
 + classpath = " $ { build . lib } / antlr - 3 . 0 . 1 . jar : $ { build . lib } / stringtemplate - 3 . 0 . jar : $ { build . lib } / antlr - 2 . 7 . 7 . jar " 
 + fork = " true " > 
 + < arg value = " $ { build . src } / org / apache / cassandra / infrastructure / cql / compiler / parse / Cql . g " / > 
 + < / java > 
 + < / target > 
 + 
 + < ! - - 
 + 	 The build target builds all the . class files 
 + - - > 
 + < target depends = " build - subprojects , build - project " name = " build " / > 
 + < target name = " build - subprojects " / > 
 + < target depends = " init " name = " build - project " > 
 + < echo message = " $ { ant . project . name } : $ { ant . file } " / > 
 + < javac debug = " true " debuglevel = " $ { debuglevel } " destdir = " $ { build . classes } " > 
 + < src path = " $ { build . src } " / > 
 + < classpath refid = " cassandra . classpath " / > 
 + < / javac > 
 + < / target > 
 + 
 + < ! - - 
 + 	 The jar target makes cassandra . jar output . 
 + - - > 
 + < target name = " jar " depends = " build " > 
 + < jar jarfile = " $ { build . dir } / $ { final . name } . jar " 
 + basedir = " $ { build . classes } " > 
 + < manifest > 
 + < ! - - < section name = " org / apache / cassandra / infrastructure " > - - > 
 + < attribute name = " Implementation - Title " value = " Cassandra " / > 
 + < attribute name = " Implementation - Version " value = " 1 . 1 " / > 
 + < attribute name = " Implementation - Vendor " value = " Facebook " / > 
 + 	 < attribute name = " Premain - Class " value = " org . apache . cassandra . infrastructure . continuations . CAgent " / > 
 + < ! - - < / section > - - > 
 + < / manifest > 
 + < / jar > 
 + < / target > 
 + 
 + 
 + < / project > 
 diff - - git a / src / org / apache / cassandra / service / StorageService . java b / src / org / apache / cassandra / service / StorageService . java 
 index 10fe532 . . aee3c46 100644 
 - - - a / src / org / apache / cassandra / service / StorageService . java 
 + + + b / src / org / apache / cassandra / service / StorageService . java 
 @ @ - 70 , 11 + 70 , 6 @ @ import org . apache . cassandra . locator . IReplicaPlacementStrategy ; 
 import org . apache . cassandra . locator . RackAwareStrategy ; 
 import org . apache . cassandra . locator . RackUnawareStrategy ; 
 import org . apache . cassandra . locator . TokenMetadata ; 
 - import org . apache . cassandra . mapreduce . JobTracker ; 
 - import org . apache . cassandra . mapreduce . MapAssignmentVerbHandler ; 
 - import org . apache . cassandra . mapreduce . MapCompletionVerbHandler ; 
 - import org . apache . cassandra . mapreduce . ReduceAssignmentVerbHandler ; 
 - import org . apache . cassandra . mapreduce . TaskTracker ; 
 import org . apache . cassandra . net . CompactEndPointSerializationHelper ; 
 import org . apache . cassandra . net . EndPoint ; 
 import org . apache . cassandra . net . IVerbHandler ; 
 @ @ - 337 , 10 + 332 , 6 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 MessagingService . getMessagingInstance ( ) . registerVerbHandlers ( StorageService . dataFileVerbHandler _ , new DataFileVerbHandler ( ) ) ; 
 MessagingService . getMessagingInstance ( ) . registerVerbHandlers ( StorageService . mbrshipCleanerVerbHandler _ , new MembershipCleanerVerbHandler ( ) ) ; 
 MessagingService . getMessagingInstance ( ) . registerVerbHandlers ( StorageService . bsMetadataVerbHandler _ , new BootstrapMetadataVerbHandler ( ) ) ; 
 - MessagingService . getMessagingInstance ( ) . registerVerbHandlers ( StorageService . jobConfigurationVerbHandler _ , new JobTracker . JobConfigurationVerbHandler ( ) ) ; 
 - MessagingService . getMessagingInstance ( ) . registerVerbHandlers ( StorageService . mapAssignmentVerbHandler _ , new MapAssignmentVerbHandler ( ) ) ; 
 - MessagingService . getMessagingInstance ( ) . registerVerbHandlers ( StorageService . reduceAssignmentVerbHandler _ , new ReduceAssignmentVerbHandler ( ) ) ; 
 - MessagingService . getMessagingInstance ( ) . registerVerbHandlers ( StorageService . mapCompletionVerbHandler _ , new MapCompletionVerbHandler ( ) ) ; 
 MessagingService . getMessagingInstance ( ) . registerVerbHandlers ( StorageService . calloutDeployVerbHandler _ , new CalloutDeployVerbHandler ( ) ) ; 
 MessagingService . getMessagingInstance ( ) . registerVerbHandlers ( StorageService . touchVerbHandler _ , new TouchVerbHandler ( ) ) ; 
 
 @ @ - 517 , 12 + 508 , 12 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 / / match ( e . g . somehost . vip vs somehost . vip . domain . com ) 
 if ( DatabaseDescriptor . getJobTrackerAddress ( ) . equals ( StorageService . tcpAddr _ . getHost ( ) ) ) 
 { 
 - JobTracker . instance ( ) . start ( ) ; 
 - TaskTracker . instance ( ) . start ( ) ; 
 + / / JobTracker . instance ( ) . start ( ) ; 
 + / / TaskTracker . instance ( ) . start ( ) ; 
 } 
 else 
 { 
 - TaskTracker . instance ( ) . start ( ) ; 
 + / / TaskTracker . instance ( ) . start ( ) ; 
 } 
 } 
 
 diff - - git a / src / org / apache / cassandra / test / DBTest . java b / src / org / apache / cassandra / test / DBTest . java 
 index 3ba8eb9 . . 2cb579d 100644 
 - - - a / src / org / apache / cassandra / test / DBTest . java 
 + + + b / src / org / apache / cassandra / test / DBTest . java 
 @ @ - 38 , 7 + 38 , 6 @ @ import org . apache . cassandra . io . IFileReader ; 
 import org . apache . cassandra . io . IFileWriter ; 
 import org . apache . cassandra . io . SSTable ; 
 import org . apache . cassandra . io . SequenceFile ; 
 - import org . apache . cassandra . mapreduce . SequentialScanner ; 
 import org . apache . cassandra . net . EndPoint ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . BloomFilter ; 
 @ @ - 113 , 13 + 112 , 14 @ @ public class DBTest 
 
 private static void doSequentialScannerTest ( ) throws Throwable 
 { 
 - SequentialScanner scanner = new SequentialScanner ( " Mailbox " ) ; 
 + / * SequentialScanner scanner = new SequentialScanner ( " Mailbox " ) ; 
 while ( scanner . hasNext ( ) ) 
 { 
 Row row = scanner . next ( ) ; 
 System . out . println ( row . getColumnFamily ( " Test " ) ) ; 
 System . out . println ( row . getColumnFamily ( " Test2 " ) ) ; 
 } 
 + * / 
 } 
 
 public static void doTest ( ) 
 diff - - git a / src / org / apache / cassandra / test / TestRunner . java b / src / org / apache / cassandra / test / TestRunner . java 
 index 9736a9a . . a096834 100644 
 - - - a / src / org / apache / cassandra / test / TestRunner . java 
 + + + b / src / org / apache / cassandra / test / TestRunner . java 
 @ @ - 69 , 7 + 69 , 6 @ @ import org . apache . cassandra . io . DataInputBuffer ; 
 import org . apache . cassandra . io . DataOutputBuffer ; 
 import org . apache . cassandra . io . IFileWriter ; 
 import org . apache . cassandra . io . SequenceFile ; 
 - import org . apache . cassandra . mapreduce . SequentialScanner ; 
 import org . apache . cassandra . net . EndPoint ; 
 import org . apache . cassandra . net . IVerbHandler ; 
 import org . apache . cassandra . net . Message ; 
 @ @ - 257 , 7 + 256 , 7 @ @ class Scanner implements Runnable 
 
 public void run ( ) 
 { 
 - try 
 + / * try 
 { 
 SequentialScanner scanner = new SequentialScanner ( " Mailbox " ) ; 
 
 @ @ - 271 , 6 + 270 , 7 @ @ class Scanner implements Runnable 
 { 
 ex . printStackTrace ( ) ; 
 } 
 + * / 
 } 
 } 

