BLEU SCORE: 0.03283637368030199

TEST MSG: Support IN clause for any clustering column
GENERATED MSG: Add CQL - aware SSTableWriter

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index ca192a7 . . a11de41 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 <nl> + * Support IN clause on any clustering column ( CASSANDRA - 4762 ) <nl> * Improve compaction logging ( CASSANDRA - 7818 ) <nl> * Remove YamlFileNetworkTopologySnitch ( CASSANDRA - 7917 ) <nl> * Support Java source code for user - defined functions ( CASSANDRA - 7562 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index ad66232 . . e135c0a 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import org . github . jamm . MemoryMeter ; <nl> import org . apache . cassandra . auth . Permission ; <nl> import org . apache . cassandra . cql3 . * ; <nl> import org . apache . cassandra . db . composites . * ; <nl> + import org . apache . cassandra . db . composites . Composite . EOC ; <nl> import org . apache . cassandra . transport . messages . ResultMessage ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> @ @ - 694 , 7 + 695 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> / / we always do a slice for CQL3 tables , so it ' s ok to ignore them here <nl> assert ! isColumnRange ( ) ; <nl> <nl> - CBuilder builder = cfm . comparator . prefixBuilder ( ) ; <nl> + CompositesBuilder builder = new CompositesBuilder ( cfm . comparator . prefixBuilder ( ) , cfm . comparator ) ; <nl> Iterator < ColumnDefinition > idIter = cfm . clusteringColumns ( ) . iterator ( ) ; <nl> for ( Restriction r : columnRestrictions ) <nl> { <nl> @ @ - 702 , 36 + 703 , 20 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> assert r ! = null & & ! r . isSlice ( ) ; <nl> <nl> List < ByteBuffer > values = r . values ( options ) ; <nl> - if ( values . size ( ) = = 1 ) <nl> - { <nl> - ByteBuffer val = values . get ( 0 ) ; <nl> - if ( val = = null ) <nl> - throw new InvalidRequestException ( String . format ( " Invalid null value for clustering key part % s " , def . name ) ) ; <nl> - builder . add ( val ) ; <nl> - } <nl> - else <nl> - { <nl> - / / We have a IN , which we only support for the last column . <nl> - / / If compact , just add all values and we ' re done . Otherwise , <nl> - / / for each value of the IN , creates all the columns corresponding to the selection . <nl> - if ( values . isEmpty ( ) ) <nl> - return null ; <nl> - SortedSet < CellName > columns = new TreeSet < CellName > ( cfm . comparator ) ; <nl> - Iterator < ByteBuffer > iter = values . iterator ( ) ; <nl> - while ( iter . hasNext ( ) ) <nl> - { <nl> - ByteBuffer val = iter . next ( ) ; <nl> - if ( val = = null ) <nl> - throw new InvalidRequestException ( String . format ( " Invalid null value for clustering key part % s " , def . name ) ) ; <nl> <nl> - Composite prefix = builder . buildWith ( val ) ; <nl> - columns . addAll ( addSelectedColumns ( prefix ) ) ; <nl> - } <nl> - return columns ; <nl> - } <nl> + if ( values . isEmpty ( ) ) <nl> + return null ; <nl> + <nl> + builder . addEachElementToAll ( values ) ; <nl> + if ( builder . containsNull ( ) ) <nl> + throw new InvalidRequestException ( String . format ( " Invalid null value for clustering key part % s " , <nl> + def . name ) ) ; <nl> } <nl> + SortedSet < CellName > columns = new TreeSet < CellName > ( cfm . comparator ) ; <nl> + for ( Composite composite : builder . build ( ) ) <nl> + columns . addAll ( addSelectedColumns ( composite ) ) ; <nl> <nl> - return addSelectedColumns ( builder . build ( ) ) ; <nl> + return columns ; <nl> } <nl> <nl> private SortedSet < CellName > addSelectedColumns ( Composite prefix ) <nl> @ @ - 810 , 6 + 795 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> } <nl> } <nl> <nl> + CompositesBuilder compositeBuilder = new CompositesBuilder ( builder , isReversed ? type . reverseComparator ( ) : type ) ; <nl> / / The end - of - component of composite doesn ' t depend on whether the <nl> / / component type is reversed or not ( i . e . the ReversedType is applied <nl> / / to the component comparator but not to the end - of - component itself ) , <nl> @ @ - 829 , 41 + 815 , 21 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> / / There wasn ' t any non EQ relation on that key , we select all records having the preceding component as prefix . <nl> / / For composites , if there was preceding component and we ' re computing the end , we must change the last component <nl> / / End - Of - Component , otherwise we would be selecting only one record . <nl> - Composite prefix = builder . build ( ) ; <nl> - return Collections . singletonList ( ! prefix . isEmpty ( ) & & eocBound = = Bound . END ? prefix . end ( ) : prefix ) ; <nl> + EOC eoc = ! compositeBuilder . isEmpty ( ) & & eocBound = = Bound . END ? EOC . END : EOC . NONE ; <nl> + return compositeBuilder . buildWithEOC ( eoc ) ; <nl> } <nl> if ( r . isSlice ( ) ) <nl> { <nl> - builder . add ( getSliceValue ( r , b , options ) ) ; <nl> - Relation . Type relType = ( ( Restriction . Slice ) r ) . getRelation ( eocBound , b ) ; <nl> - return Collections . singletonList ( builder . build ( ) . withEOC ( eocForRelation ( relType ) ) ) ; <nl> + compositeBuilder . addElementToAll ( getSliceValue ( r , b , options ) ) ; <nl> + Relation . Type relType = ( ( Restriction . Slice ) r ) . getRelation ( eocBound , b ) ; <nl> + return compositeBuilder . buildWithEOC ( eocForRelation ( relType ) ) ; <nl> } <nl> - else <nl> - { <nl> - List < ByteBuffer > values = r . values ( options ) ; <nl> - if ( values . size ( ) ! = 1 ) <nl> - { <nl> - / / IN query , we only support it on the clustering columns <nl> - assert def . position ( ) = = defs . size ( ) - 1 ; <nl> - / / The IN query might not have listed the values in comparator order , so we need to re - sort <nl> - / / the bounds lists to make sure the slices works correctly ( also , to avoid duplicates ) . <nl> - TreeSet < Composite > s = new TreeSet < > ( isReversed ? type . reverseComparator ( ) : type ) ; <nl> - for ( ByteBuffer val : values ) <nl> - { <nl> - if ( val = = null ) <nl> - throw new InvalidRequestException ( String . format ( " Invalid null clustering key part % s " , def . name ) ) ; <nl> - Composite prefix = builder . buildWith ( val ) ; <nl> - / / See below for why this <nl> - s . add ( ( eocBound = = Bound . END & & builder . remainingCount ( ) > 0 ) ? prefix . end ( ) : prefix ) ; <nl> - } <nl> - return new ArrayList < > ( s ) ; <nl> - } <nl> <nl> - ByteBuffer val = values . get ( 0 ) ; <nl> - if ( val = = null ) <nl> - throw new InvalidRequestException ( String . format ( " Invalid null clustering key part % s " , def . name ) ) ; <nl> - builder . add ( val ) ; <nl> - } <nl> + compositeBuilder . addEachElementToAll ( r . values ( options ) ) ; <nl> + <nl> + if ( compositeBuilder . containsNull ( ) ) <nl> + throw new InvalidRequestException ( <nl> + String . format ( " Invalid null clustering key part % s " , def . name ) ) ; <nl> } <nl> / / Means no relation at all or everything was an equal <nl> / / Note : if the builder is " full " , there is no need to use the end - of - component bit . For columns selection , <nl> @ @ - 871 , 8 + 837 , 8 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> / / with 2ndary index is done , and with the the partition provided with an EQ , we ' ll end up here , and in that <nl> / / case using the eoc would be bad , since for the random partitioner we have no guarantee that <nl> / / prefix . end ( ) will sort after prefix ( see # 5240 ) . <nl> - Composite prefix = builder . build ( ) ; <nl> - return Collections . singletonList ( eocBound = = Bound . END & & builder . remainingCount ( ) > 0 ? prefix . end ( ) : prefix ) ; <nl> + EOC eoc = eocBound = = Bound . END & & compositeBuilder . hasRemaining ( ) ? EOC . END : EOC . NONE ; <nl> + return compositeBuilder . buildWithEOC ( eoc ) ; <nl> } <nl> <nl> private static Composite . EOC eocForRelation ( Relation . Type op ) <nl> @ @ - 1873 , 9 + 1839 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> } <nl> else if ( restriction . isIN ( ) ) <nl> { <nl> - if ( ! restriction . isMultiColumn ( ) & & i ! = stmt . columnRestrictions . length - 1 ) <nl> - throw new InvalidRequestException ( String . format ( " Clustering column \ " % s \ " cannot be restricted by an IN relation " , cdef . name ) ) ; <nl> - else if ( stmt . selectACollection ( ) ) <nl> + if ( stmt . selectACollection ( ) ) <nl> throw new InvalidRequestException ( String . format ( " Cannot restrict column \ " % s \ " by IN relation as a collection is selected by the query " , cdef . name ) ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / composites / CompositesBuilder . java b / src / java / org / apache / cassandra / db / composites / CompositesBuilder . java <nl> new file mode 100644 <nl> index 0000000 . . 29fe905 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / db / composites / CompositesBuilder . java <nl> @ @ - 0 , 0 + 1 , 219 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . db . composites ; <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Comparator ; <nl> + import java . util . List ; <nl> + import java . util . Set ; <nl> + import java . util . TreeSet ; <nl> + <nl> + import org . apache . cassandra . db . composites . Composite . EOC ; <nl> + <nl> + import static java . util . Collections . singletonList ; <nl> + <nl> + / * * <nl> + * Builder that allow to build multiple composites at the same time . <nl> + * / <nl> + public final class CompositesBuilder <nl> + { <nl> + / * * <nl> + * The builder used to build the < code > Composite < / code > s . <nl> + * / <nl> + private final CBuilder builder ; <nl> + <nl> + / * * <nl> + * The comparator used to sort the returned < code > Composite < / code > s . <nl> + * / <nl> + private final Comparator < Composite > comparator ; <nl> + <nl> + / * * <nl> + * The elements of the composites <nl> + * / <nl> + private final List < List < ByteBuffer > > elementsList = new ArrayList < > ( ) ; <nl> + <nl> + / * * <nl> + * The number of elements that still can be added . <nl> + * / <nl> + private int remaining ; <nl> + <nl> + / * * <nl> + * < code > true < / code > if the composites have been build , < code > false < / code > otherwise . <nl> + * / <nl> + private boolean built ; <nl> + <nl> + / * * <nl> + * < code > true < / code > if the composites contains some < code > null < / code > elements . <nl> + * / <nl> + private boolean containsNull ; <nl> + <nl> + public CompositesBuilder ( CBuilder builder , Comparator < Composite > comparator ) <nl> + { <nl> + this . builder = builder ; <nl> + this . comparator = comparator ; <nl> + this . remaining = builder . remainingCount ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Adds the specified element to all the composites . <nl> + * < p > <nl> + * If this builder contains 2 composites : A - B and A - C a call to this method to add D will result in the composites : <nl> + * A - B - D and A - C - D . <nl> + * < / p > <nl> + * <nl> + * @ param value the value of the next element <nl> + * @ return this < code > CompositeBuilder < / code > <nl> + * / <nl> + public CompositesBuilder addElementToAll ( ByteBuffer value ) <nl> + { <nl> + checkUpdateable ( ) ; <nl> + <nl> + if ( isEmpty ( ) ) <nl> + elementsList . add ( new ArrayList < ByteBuffer > ( ) ) ; <nl> + <nl> + for ( int i = 0 , m = elementsList . size ( ) ; i < m ; i + + ) <nl> + { <nl> + if ( value = = null ) <nl> + containsNull = true ; <nl> + <nl> + elementsList . get ( i ) . add ( value ) ; <nl> + } <nl> + remaining - - ; <nl> + return this ; <nl> + } <nl> + <nl> + / * * <nl> + * Adds individually each of the specified elements to the end of all of the existing composites . <nl> + * < p > <nl> + * If this builder contains 2 composites : A - B and A - C a call to this method to add D and E will result in the 4 <nl> + * composites : A - B - D , A - B - E , A - C - D and A - C - E . <nl> + * < / p > <nl> + * <nl> + * @ param values the elements to add <nl> + * @ return this < code > CompositeBuilder < / code > <nl> + * / <nl> + public CompositesBuilder addEachElementToAll ( List < ByteBuffer > values ) <nl> + { <nl> + checkUpdateable ( ) ; <nl> + <nl> + if ( isEmpty ( ) ) <nl> + elementsList . add ( new ArrayList < ByteBuffer > ( ) ) ; <nl> + <nl> + for ( int i = 0 , m = elementsList . size ( ) ; i < m ; i + + ) <nl> + { <nl> + List < ByteBuffer > oldComposite = elementsList . remove ( 0 ) ; <nl> + <nl> + for ( int j = 0 , n = values . size ( ) ; j < n ; j + + ) <nl> + { <nl> + List < ByteBuffer > newComposite = new ArrayList < > ( oldComposite ) ; <nl> + elementsList . add ( newComposite ) ; <nl> + <nl> + ByteBuffer value = values . get ( j ) ; <nl> + <nl> + if ( value = = null ) <nl> + containsNull = true ; <nl> + <nl> + newComposite . add ( values . get ( j ) ) ; <nl> + } <nl> + } <nl> + <nl> + remaining - - ; <nl> + return this ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns the number of elements that can be added to the composites . <nl> + * <nl> + * @ return the number of elements that can be added to the composites . <nl> + * / <nl> + public int remainingCount ( ) <nl> + { <nl> + return remaining ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks if some elements can still be added to the composites . <nl> + * <nl> + * @ return < code > true < / code > if it is possible to add more elements to the composites , < code > false < / code > otherwise . <nl> + * / <nl> + public boolean hasRemaining ( ) <nl> + { <nl> + return remaining > 0 ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks if this builder is empty . <nl> + * <nl> + * @ return < code > true < / code > if this builder is empty , < code > false < / code > otherwise . <nl> + * / <nl> + public boolean isEmpty ( ) <nl> + { <nl> + return elementsList . isEmpty ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks if the composites contains null elements . <nl> + * <nl> + * @ return < code > true < / code > if the composites contains < code > null < / code > elements , < code > false < / code > otherwise . <nl> + * / <nl> + public boolean containsNull ( ) <nl> + { <nl> + return containsNull ; <nl> + } <nl> + <nl> + / * * <nl> + * Builds the < code > Composites < / code > . <nl> + * <nl> + * @ return the composites <nl> + * / <nl> + public List < Composite > build ( ) <nl> + { <nl> + return buildWithEOC ( EOC . NONE ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Builds the < code > Composites < / code > with the specified EOC . <nl> + * <nl> + * @ return the composites <nl> + * / <nl> + public List < Composite > buildWithEOC ( EOC eoc ) <nl> + { <nl> + built = true ; <nl> + <nl> + if ( elementsList . isEmpty ( ) ) <nl> + return singletonList ( builder . build ( ) . withEOC ( eoc ) ) ; <nl> + <nl> + / / Use a TreeSet to sort and eliminate duplicates <nl> + Set < Composite > set = new TreeSet < Composite > ( comparator ) ; <nl> + <nl> + for ( int i = 0 , m = elementsList . size ( ) ; i < m ; i + + ) <nl> + { <nl> + List < ByteBuffer > elements = elementsList . get ( i ) ; <nl> + set . add ( builder . buildWith ( elements ) . withEOC ( eoc ) ) ; <nl> + } <nl> + <nl> + return new ArrayList < > ( set ) ; <nl> + } <nl> + <nl> + private void checkUpdateable ( ) <nl> + { <nl> + if ( ! hasRemaining ( ) | | built ) <nl> + throw new IllegalStateException ( " this CompositesBuilder cannot be updated anymore " ) ; <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / SingleColumnRelationTest . java b / test / unit / org / apache / cassandra / cql3 / SingleColumnRelationTest . java <nl> index 120c780 . . c93147b 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / SingleColumnRelationTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / SingleColumnRelationTest . java <nl> @ @ - 17 , 6 + 17 , 8 @ @ <nl> * / <nl> package org . apache . cassandra . cql3 ; <nl> <nl> + import java . util . Arrays ; <nl> + <nl> import org . junit . Test ; <nl> <nl> public class SingleColumnRelationTest extends CQLTester <nl> @ @ - 48 , 4 + 50 , 121 @ @ public class SingleColumnRelationTest extends CQLTester <nl> assertInvalid ( " SELECT * FROM % s WHERE c = 0 AND b < = ? " , set ( 0 ) ) ; <nl> assertInvalid ( " SELECT * FROM % s WHERE c = 0 AND b IN ( ? ) " , set ( 0 ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testClusteringColumnRelations ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a text , b int , c int , d int , primary key ( a , b , c ) ) " ) ; <nl> + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 1 , 5 , 1 ) ; <nl> + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 2 , 6 , 2 ) ; <nl> + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 3 , 7 , 3 ) ; <nl> + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " second " , 4 , 8 , 4 ) ; <nl> + <nl> + testSelectQueriesWithClusteringColumnRelations ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testClusteringColumnRelationsWithCompactStorage ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a text , b int , c int , d int , primary key ( a , b , c ) ) WITH COMPACT STORAGE ; " ) ; <nl> + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 1 , 5 , 1 ) ; <nl> + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 2 , 6 , 2 ) ; <nl> + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 3 , 7 , 3 ) ; <nl> + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " second " , 4 , 8 , 4 ) ; <nl> + <nl> + testSelectQueriesWithClusteringColumnRelations ( ) ; <nl> + } <nl> + <nl> + private void testSelectQueriesWithClusteringColumnRelations ( ) throws Throwable <nl> + { <nl> + assertRows ( execute ( " select * from % s where a in ( ? , ? ) " , " first " , " second " ) , <nl> + row ( " first " , 1 , 5 , 1 ) , <nl> + row ( " first " , 2 , 6 , 2 ) , <nl> + row ( " first " , 3 , 7 , 3 ) , <nl> + row ( " second " , 4 , 8 , 4 ) ) ; <nl> + <nl> + assertRows ( execute ( " select * from % s where a = ? and b = ? and c in ( ? , ? ) " , " first " , 2 , 6 , 7 ) , <nl> + row ( " first " , 2 , 6 , 2 ) ) ; <nl> + <nl> + assertRows ( execute ( " select * from % s where a = ? and b in ( ? , ? ) and c in ( ? , ? ) " , " first " , 2 , 3 , 6 , 7 ) , <nl> + row ( " first " , 2 , 6 , 2 ) , <nl> + row ( " first " , 3 , 7 , 3 ) ) ; <nl> + <nl> + assertRows ( execute ( " select * from % s where a = ? and b in ( ? , ? ) and c in ( ? , ? ) " , " first " , 3 , 2 , 7 , 6 ) , <nl> + row ( " first " , 2 , 6 , 2 ) , <nl> + row ( " first " , 3 , 7 , 3 ) ) ; <nl> + <nl> + assertRows ( execute ( " select * from % s where a = ? and c in ( ? , ? ) and b in ( ? , ? ) " , " first " , 7 , 6 , 3 , 2 ) , <nl> + row ( " first " , 2 , 6 , 2 ) , <nl> + row ( " first " , 3 , 7 , 3 ) ) ; <nl> + <nl> + assertRows ( execute ( " select c , d from % s where a = ? and c in ( ? , ? ) and b in ( ? , ? ) " , " first " , 7 , 6 , 3 , 2 ) , <nl> + row ( 6 , 2 ) , <nl> + row ( 7 , 3 ) ) ; <nl> + <nl> + assertRows ( execute ( " select c , d from % s where a = ? and c in ( ? , ? ) and b in ( ? , ? , ? ) " , " first " , 7 , 6 , 3 , 2 , 3 ) , <nl> + row ( 6 , 2 ) , <nl> + row ( 7 , 3 ) ) ; <nl> + <nl> + assertRows ( execute ( " select * from % s where a = ? and b in ( ? , ? ) and c = ? " , " first " , 3 , 2 , 7 ) , <nl> + row ( " first " , 3 , 7 , 3 ) ) ; <nl> + <nl> + assertRows ( execute ( " select * from % s where a = ? and b in ? and c in ? " , <nl> + " first " , Arrays . asList ( 3 , 2 ) , Arrays . asList ( 7 , 6 ) ) , <nl> + row ( " first " , 2 , 6 , 2 ) , <nl> + row ( " first " , 3 , 7 , 3 ) ) ; <nl> + <nl> + assertInvalid ( " select * from % s where a = ? and b in ? and c in ? " , " first " , null , Arrays . asList ( 7 , 6 ) ) ; <nl> + <nl> + assertRows ( execute ( " select * from % s where a = ? and c > = ? and b in ( ? , ? ) " , " first " , 6 , 3 , 2 ) , <nl> + row ( " first " , 2 , 6 , 2 ) , <nl> + row ( " first " , 3 , 7 , 3 ) ) ; <nl> + <nl> + assertRows ( execute ( " select * from % s where a = ? and c > ? and b in ( ? , ? ) " , " first " , 6 , 3 , 2 ) , <nl> + row ( " first " , 3 , 7 , 3 ) ) ; <nl> + <nl> + assertRows ( execute ( " select * from % s where a = ? and c < = ? and b in ( ? , ? ) " , " first " , 6 , 3 , 2 ) , <nl> + row ( " first " , 2 , 6 , 2 ) ) ; <nl> + <nl> + assertRows ( execute ( " select * from % s where a = ? and c < ? and b in ( ? , ? ) " , " first " , 7 , 3 , 2 ) , <nl> + row ( " first " , 2 , 6 , 2 ) ) ; <nl> + <nl> + assertRows ( execute ( " select * from % s where a = ? and c in ( ? , ? ) and b in ( ? , ? ) order by b DESC " , <nl> + " first " , 7 , 6 , 3 , 2 ) , <nl> + row ( " first " , 3 , 7 , 3 ) , <nl> + row ( " first " , 2 , 6 , 2 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testPartitionKeyColumnRelations ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a text , b int , c int , d int , primary key ( ( a , b ) , c ) ) " ) ; <nl> + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 1 , 1 , 1 ) ; <nl> + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 2 , 2 , 2 ) ; <nl> + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 3 , 3 , 3 ) ; <nl> + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " second " , 4 , 4 , 4 ) ; <nl> + <nl> + assertInvalid ( " select * from % s where a in ( ? , ? ) " , " first " , " second " ) ; <nl> + assertInvalid ( " select * from % s where a in ( ? , ? ) and b in ( ? , ? ) " , " first " , " second " , 2 , 3 ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testClusteringColumnRelationsWithClusteringOrder ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a text , b int , c int , d int , primary key ( a , b , c ) ) WITH CLUSTERING ORDER BY ( b DESC ) ; " ) ; <nl> + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 1 , 5 , 1 ) ; <nl> + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 2 , 6 , 2 ) ; <nl> + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 3 , 7 , 3 ) ; <nl> + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " second " , 4 , 8 , 4 ) ; <nl> + <nl> + assertRows ( execute ( " select * from % s where a = ? and c in ( ? , ? ) and b in ( ? , ? ) order by b DESC " , <nl> + " first " , 7 , 6 , 3 , 2 ) , <nl> + row ( " first " , 3 , 7 , 3 ) , <nl> + row ( " first " , 2 , 6 , 2 ) ) ; <nl> + <nl> + assertRows ( execute ( " select * from % s where a = ? and c in ( ? , ? ) and b in ( ? , ? ) order by b ASC " , <nl> + " first " , 7 , 6 , 3 , 2 ) , <nl> + row ( " first " , 2 , 6 , 2 ) , <nl> + row ( " first " , 3 , 7 , 3 ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / NEWS . txt b / NEWS . txt <nl> index 2489f26 . . 8a5645d 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 13 , 6 + 13 , 13 @ @ restore snapshots created with the previous major version using the <nl> ' sstableloader ' tool . You can upgrade the file format of your snapshots <nl> using the provided ' sstableupgrade ' tool . <nl> <nl> + 2 . 0 . 3 <nl> + = = = = = <nl> + Upgrading <nl> + - - - - - - - - - <nl> + - The IEndpointStateChangeSubscriber has a new method , beforeChange , that <nl> + any custom implemenations using the class will need to implement . <nl> + <nl> <nl> 2 . 0 . 2 <nl> = = = = = <nl> diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index 07c21bd . . 8237fa3 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 44 , 7 + 44 , 6 @ @ import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> import com . google . common . collect . ImmutableList ; <nl> - import com . google . common . collect . Lists ; <nl> <nl> / * * <nl> * This module is responsible for Gossiping information for the local endpoint . This abstraction <nl> @ @ - 964 , 12 + 963 , 21 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> } <nl> for ( Entry < ApplicationState , VersionedValue > remoteEntry : remoteState . getApplicationStateMap ( ) . entrySet ( ) ) <nl> { <nl> - doNotifications ( addr , remoteEntry . getKey ( ) , remoteEntry . getValue ( ) ) ; <nl> + doOnChangeNotifications ( addr , remoteEntry . getKey ( ) , remoteEntry . getValue ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + / / notify that a local application state is going to change ( doesn ' t get triggered for remote changes ) <nl> + private void doBeforeChangeNotifications ( InetAddress addr , EndpointState epState , ApplicationState apState , VersionedValue newValue ) <nl> + { <nl> + for ( IEndpointStateChangeSubscriber subscriber : subscribers ) <nl> + { <nl> + subscriber . beforeChange ( addr , epState , apState , newValue ) ; <nl> } <nl> } <nl> <nl> / / notify that an application state has changed <nl> - private void doNotifications ( InetAddress addr , ApplicationState state , VersionedValue value ) <nl> + private void doOnChangeNotifications ( InetAddress addr , ApplicationState state , VersionedValue value ) <nl> { <nl> for ( IEndpointStateChangeSubscriber subscriber : subscribers ) <nl> { <nl> @ @ - 1186 , 9 + 1194 , 17 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> public void addLocalApplicationState ( ApplicationState state , VersionedValue value ) <nl> { <nl> EndpointState epState = endpointStateMap . get ( FBUtilities . getBroadcastAddress ( ) ) ; <nl> + InetAddress epAddr = FBUtilities . getBroadcastAddress ( ) ; <nl> assert epState ! = null ; <nl> + / / Fire " before change " notifications : <nl> + doBeforeChangeNotifications ( epAddr , epState , state , value ) ; <nl> + / / Notifications may have taken some time , so preventively raise the version <nl> + / / of the new value , otherwise it could be ignored by the remote node <nl> + / / if another value with a newer version was received in the meantime : <nl> + value = StorageService . instance . valueFactory . cloneWithHigherVersion ( value ) ; <nl> + / / Add to local application state and fire " on change " notifications : <nl> epState . addApplicationState ( state , value ) ; <nl> - doNotifications ( FBUtilities . getBroadcastAddress ( ) , state , value ) ; <nl> + doOnChangeNotifications ( epAddr , state , value ) ; <nl> } <nl> <nl> public void stop ( ) <nl> diff - - git a / src / java / org / apache / cassandra / gms / IEndpointStateChangeSubscriber . java b / src / java / org / apache / cassandra / gms / IEndpointStateChangeSubscriber . java <nl> index dd7ee2c . . 1bfd678 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / IEndpointStateChangeSubscriber . java <nl> + + + b / src / java / org / apache / cassandra / gms / IEndpointStateChangeSubscriber . java <nl> @ @ - 37 , 6 + 37 , 8 @ @ public interface IEndpointStateChangeSubscriber <nl> * @ param epState state that actually changed for the above endpoint . <nl> * / <nl> public void onJoin ( InetAddress endpoint , EndpointState epState ) ; <nl> + <nl> + public void beforeChange ( InetAddress endpoint , EndpointState currentState , ApplicationState newStateKey , VersionedValue newValue ) ; <nl> <nl> public void onChange ( InetAddress endpoint , ApplicationState state , VersionedValue value ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / gms / VersionedValue . java b / src / java / org / apache / cassandra / gms / VersionedValue . java <nl> index 2bc3433 . . 7c64a83 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / VersionedValue . java <nl> + + + b / src / java / org / apache / cassandra / gms / VersionedValue . java <nl> @ @ - 113 , 6 + 113 , 11 @ @ public class VersionedValue implements Comparable < VersionedValue > <nl> { <nl> this . partitioner = partitioner ; <nl> } <nl> + <nl> + public VersionedValue cloneWithHigherVersion ( VersionedValue value ) <nl> + { <nl> + return new VersionedValue ( value . value ) ; <nl> + } <nl> <nl> public VersionedValue bootstrapping ( Collection < Token > tokens ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / locator / ReconnectableSnitchHelper . java b / src / java / org / apache / cassandra / locator / ReconnectableSnitchHelper . java <nl> index e1353f4 . . d797393 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / ReconnectableSnitchHelper . java <nl> + + + b / src / java / org / apache / cassandra / locator / ReconnectableSnitchHelper . java <nl> @ @ - 70 , 6 + 70 , 11 @ @ public class ReconnectableSnitchHelper implements IEndpointStateChangeSubscriber <nl> logger . debug ( String . format ( " Intiated reconnect to an Internal IP % s for the % s " , localAddress , publicAddress ) ) ; <nl> } <nl> } <nl> + <nl> + public void beforeChange ( InetAddress endpoint , EndpointState currentState , ApplicationState newStateKey , VersionedValue newValue ) <nl> + { <nl> + / / no - op <nl> + } <nl> <nl> public void onJoin ( InetAddress endpoint , EndpointState epState ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / repair / RepairSession . java b / src / java / org / apache / cassandra / repair / RepairSession . java <nl> index 2e93104 . . 18688f9 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / RepairSession . java <nl> + + + b / src / java / org / apache / cassandra / repair / RepairSession . java <nl> @ @ - 318 , 6 + 318 , 7 @ @ public class RepairSession extends WrappedRunnable implements IEndpointStateChan <nl> } <nl> <nl> public void onJoin ( InetAddress endpoint , EndpointState epState ) { } <nl> + public void beforeChange ( InetAddress endpoint , EndpointState currentState , ApplicationState newStateKey , VersionedValue newValue ) { } <nl> public void onChange ( InetAddress endpoint , ApplicationState state , VersionedValue value ) { } <nl> public void onAlive ( InetAddress endpoint , EndpointState state ) { } <nl> public void onDead ( InetAddress endpoint , EndpointState state ) { } <nl> diff - - git a / src / java / org / apache / cassandra / service / LoadBroadcaster . java b / src / java / org / apache / cassandra / service / LoadBroadcaster . java <nl> index 4a118ba . . 4996e52 100644 <nl> - - - a / src / java / org / apache / cassandra / service / LoadBroadcaster . java <nl> + + + b / src / java / org / apache / cassandra / service / LoadBroadcaster . java <nl> @ @ - 58 , 6 + 58 , 8 @ @ public class LoadBroadcaster implements IEndpointStateChangeSubscriber <nl> onChange ( endpoint , ApplicationState . LOAD , localValue ) ; <nl> } <nl> } <nl> + <nl> + public void beforeChange ( InetAddress endpoint , EndpointState currentState , ApplicationState newStateKey , VersionedValue newValue ) { } <nl> <nl> public void onAlive ( InetAddress endpoint , EndpointState state ) { } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> index 131163b . . 0ffc7c4 100644 <nl> - - - a / src / java / org / apache / cassandra / service / MigrationManager . java <nl> + + + b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> @ @ - 78 , 6 + 78 , 9 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber <nl> <nl> public void onJoin ( InetAddress endpoint , EndpointState epState ) <nl> { } <nl> + <nl> + public void beforeChange ( InetAddress endpoint , EndpointState currentState , ApplicationState newStateKey , VersionedValue newValue ) <nl> + { } <nl> <nl> public void onChange ( InetAddress endpoint , ApplicationState state , VersionedValue value ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 95db711 . . c3f32fa 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 137 , 7 + 137 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> / * This abstraction maintains the token / endpoint metadata information * / <nl> private TokenMetadata tokenMetadata = new TokenMetadata ( ) ; <nl> <nl> - public VersionedValue . VersionedValueFactory valueFactory = new VersionedValue . VersionedValueFactory ( getPartitioner ( ) ) ; <nl> + public volatile VersionedValue . VersionedValueFactory valueFactory = new VersionedValue . VersionedValueFactory ( getPartitioner ( ) ) ; <nl> <nl> public static final StorageService instance = new StorageService ( ) ; <nl> <nl> @ @ - 1186 , 6 + 1186 , 11 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> return rangeToEndpointMap ; <nl> } <nl> <nl> + public void beforeChange ( InetAddress endpoint , EndpointState currentState , ApplicationState newStateKey , VersionedValue newValue ) <nl> + { <nl> + / / no - op <nl> + } <nl> + <nl> / * <nl> * Handle the reception of a new particular ApplicationState for a particular endpoint . Note that the value of the <nl> * ApplicationState has not necessarily " changed " since the last known value , if we already received the same update <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamSession . java b / src / java / org / apache / cassandra / streaming / StreamSession . java <nl> index 5a16d81 . . 98a76fc 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamSession . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamSession . java <nl> @ @ - 552 , 6 + 552 , 7 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe <nl> } <nl> <nl> public void onJoin ( InetAddress endpoint , EndpointState epState ) { } <nl> + public void beforeChange ( InetAddress endpoint , EndpointState currentState , ApplicationState newStateKey , VersionedValue newValue ) { } <nl> public void onChange ( InetAddress endpoint , ApplicationState state , VersionedValue value ) { } <nl> public void onAlive ( InetAddress endpoint , EndpointState state ) { } <nl> public void onDead ( InetAddress endpoint , EndpointState state ) { }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index ca192a7 . . a11de41 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 
 + * Support IN clause on any clustering column ( CASSANDRA - 4762 ) 
 * Improve compaction logging ( CASSANDRA - 7818 ) 
 * Remove YamlFileNetworkTopologySnitch ( CASSANDRA - 7917 ) 
 * Support Java source code for user - defined functions ( CASSANDRA - 7562 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index ad66232 . . e135c0a 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import org . github . jamm . MemoryMeter ; 
 import org . apache . cassandra . auth . Permission ; 
 import org . apache . cassandra . cql3 . * ; 
 import org . apache . cassandra . db . composites . * ; 
 + import org . apache . cassandra . db . composites . Composite . EOC ; 
 import org . apache . cassandra . transport . messages . ResultMessage ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . ColumnDefinition ; 
 @ @ - 694 , 7 + 695 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 / / we always do a slice for CQL3 tables , so it ' s ok to ignore them here 
 assert ! isColumnRange ( ) ; 
 
 - CBuilder builder = cfm . comparator . prefixBuilder ( ) ; 
 + CompositesBuilder builder = new CompositesBuilder ( cfm . comparator . prefixBuilder ( ) , cfm . comparator ) ; 
 Iterator < ColumnDefinition > idIter = cfm . clusteringColumns ( ) . iterator ( ) ; 
 for ( Restriction r : columnRestrictions ) 
 { 
 @ @ - 702 , 36 + 703 , 20 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 assert r ! = null & & ! r . isSlice ( ) ; 
 
 List < ByteBuffer > values = r . values ( options ) ; 
 - if ( values . size ( ) = = 1 ) 
 - { 
 - ByteBuffer val = values . get ( 0 ) ; 
 - if ( val = = null ) 
 - throw new InvalidRequestException ( String . format ( " Invalid null value for clustering key part % s " , def . name ) ) ; 
 - builder . add ( val ) ; 
 - } 
 - else 
 - { 
 - / / We have a IN , which we only support for the last column . 
 - / / If compact , just add all values and we ' re done . Otherwise , 
 - / / for each value of the IN , creates all the columns corresponding to the selection . 
 - if ( values . isEmpty ( ) ) 
 - return null ; 
 - SortedSet < CellName > columns = new TreeSet < CellName > ( cfm . comparator ) ; 
 - Iterator < ByteBuffer > iter = values . iterator ( ) ; 
 - while ( iter . hasNext ( ) ) 
 - { 
 - ByteBuffer val = iter . next ( ) ; 
 - if ( val = = null ) 
 - throw new InvalidRequestException ( String . format ( " Invalid null value for clustering key part % s " , def . name ) ) ; 
 
 - Composite prefix = builder . buildWith ( val ) ; 
 - columns . addAll ( addSelectedColumns ( prefix ) ) ; 
 - } 
 - return columns ; 
 - } 
 + if ( values . isEmpty ( ) ) 
 + return null ; 
 + 
 + builder . addEachElementToAll ( values ) ; 
 + if ( builder . containsNull ( ) ) 
 + throw new InvalidRequestException ( String . format ( " Invalid null value for clustering key part % s " , 
 + def . name ) ) ; 
 } 
 + SortedSet < CellName > columns = new TreeSet < CellName > ( cfm . comparator ) ; 
 + for ( Composite composite : builder . build ( ) ) 
 + columns . addAll ( addSelectedColumns ( composite ) ) ; 
 
 - return addSelectedColumns ( builder . build ( ) ) ; 
 + return columns ; 
 } 
 
 private SortedSet < CellName > addSelectedColumns ( Composite prefix ) 
 @ @ - 810 , 6 + 795 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 } 
 } 
 
 + CompositesBuilder compositeBuilder = new CompositesBuilder ( builder , isReversed ? type . reverseComparator ( ) : type ) ; 
 / / The end - of - component of composite doesn ' t depend on whether the 
 / / component type is reversed or not ( i . e . the ReversedType is applied 
 / / to the component comparator but not to the end - of - component itself ) , 
 @ @ - 829 , 41 + 815 , 21 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 / / There wasn ' t any non EQ relation on that key , we select all records having the preceding component as prefix . 
 / / For composites , if there was preceding component and we ' re computing the end , we must change the last component 
 / / End - Of - Component , otherwise we would be selecting only one record . 
 - Composite prefix = builder . build ( ) ; 
 - return Collections . singletonList ( ! prefix . isEmpty ( ) & & eocBound = = Bound . END ? prefix . end ( ) : prefix ) ; 
 + EOC eoc = ! compositeBuilder . isEmpty ( ) & & eocBound = = Bound . END ? EOC . END : EOC . NONE ; 
 + return compositeBuilder . buildWithEOC ( eoc ) ; 
 } 
 if ( r . isSlice ( ) ) 
 { 
 - builder . add ( getSliceValue ( r , b , options ) ) ; 
 - Relation . Type relType = ( ( Restriction . Slice ) r ) . getRelation ( eocBound , b ) ; 
 - return Collections . singletonList ( builder . build ( ) . withEOC ( eocForRelation ( relType ) ) ) ; 
 + compositeBuilder . addElementToAll ( getSliceValue ( r , b , options ) ) ; 
 + Relation . Type relType = ( ( Restriction . Slice ) r ) . getRelation ( eocBound , b ) ; 
 + return compositeBuilder . buildWithEOC ( eocForRelation ( relType ) ) ; 
 } 
 - else 
 - { 
 - List < ByteBuffer > values = r . values ( options ) ; 
 - if ( values . size ( ) ! = 1 ) 
 - { 
 - / / IN query , we only support it on the clustering columns 
 - assert def . position ( ) = = defs . size ( ) - 1 ; 
 - / / The IN query might not have listed the values in comparator order , so we need to re - sort 
 - / / the bounds lists to make sure the slices works correctly ( also , to avoid duplicates ) . 
 - TreeSet < Composite > s = new TreeSet < > ( isReversed ? type . reverseComparator ( ) : type ) ; 
 - for ( ByteBuffer val : values ) 
 - { 
 - if ( val = = null ) 
 - throw new InvalidRequestException ( String . format ( " Invalid null clustering key part % s " , def . name ) ) ; 
 - Composite prefix = builder . buildWith ( val ) ; 
 - / / See below for why this 
 - s . add ( ( eocBound = = Bound . END & & builder . remainingCount ( ) > 0 ) ? prefix . end ( ) : prefix ) ; 
 - } 
 - return new ArrayList < > ( s ) ; 
 - } 
 
 - ByteBuffer val = values . get ( 0 ) ; 
 - if ( val = = null ) 
 - throw new InvalidRequestException ( String . format ( " Invalid null clustering key part % s " , def . name ) ) ; 
 - builder . add ( val ) ; 
 - } 
 + compositeBuilder . addEachElementToAll ( r . values ( options ) ) ; 
 + 
 + if ( compositeBuilder . containsNull ( ) ) 
 + throw new InvalidRequestException ( 
 + String . format ( " Invalid null clustering key part % s " , def . name ) ) ; 
 } 
 / / Means no relation at all or everything was an equal 
 / / Note : if the builder is " full " , there is no need to use the end - of - component bit . For columns selection , 
 @ @ - 871 , 8 + 837 , 8 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 / / with 2ndary index is done , and with the the partition provided with an EQ , we ' ll end up here , and in that 
 / / case using the eoc would be bad , since for the random partitioner we have no guarantee that 
 / / prefix . end ( ) will sort after prefix ( see # 5240 ) . 
 - Composite prefix = builder . build ( ) ; 
 - return Collections . singletonList ( eocBound = = Bound . END & & builder . remainingCount ( ) > 0 ? prefix . end ( ) : prefix ) ; 
 + EOC eoc = eocBound = = Bound . END & & compositeBuilder . hasRemaining ( ) ? EOC . END : EOC . NONE ; 
 + return compositeBuilder . buildWithEOC ( eoc ) ; 
 } 
 
 private static Composite . EOC eocForRelation ( Relation . Type op ) 
 @ @ - 1873 , 9 + 1839 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 } 
 else if ( restriction . isIN ( ) ) 
 { 
 - if ( ! restriction . isMultiColumn ( ) & & i ! = stmt . columnRestrictions . length - 1 ) 
 - throw new InvalidRequestException ( String . format ( " Clustering column \ " % s \ " cannot be restricted by an IN relation " , cdef . name ) ) ; 
 - else if ( stmt . selectACollection ( ) ) 
 + if ( stmt . selectACollection ( ) ) 
 throw new InvalidRequestException ( String . format ( " Cannot restrict column \ " % s \ " by IN relation as a collection is selected by the query " , cdef . name ) ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / composites / CompositesBuilder . java b / src / java / org / apache / cassandra / db / composites / CompositesBuilder . java 
 new file mode 100644 
 index 0000000 . . 29fe905 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / db / composites / CompositesBuilder . java 
 @ @ - 0 , 0 + 1 , 219 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . db . composites ; 
 + 
 + import java . nio . ByteBuffer ; 
 + import java . util . ArrayList ; 
 + import java . util . Comparator ; 
 + import java . util . List ; 
 + import java . util . Set ; 
 + import java . util . TreeSet ; 
 + 
 + import org . apache . cassandra . db . composites . Composite . EOC ; 
 + 
 + import static java . util . Collections . singletonList ; 
 + 
 + / * * 
 + * Builder that allow to build multiple composites at the same time . 
 + * / 
 + public final class CompositesBuilder 
 + { 
 + / * * 
 + * The builder used to build the < code > Composite < / code > s . 
 + * / 
 + private final CBuilder builder ; 
 + 
 + / * * 
 + * The comparator used to sort the returned < code > Composite < / code > s . 
 + * / 
 + private final Comparator < Composite > comparator ; 
 + 
 + / * * 
 + * The elements of the composites 
 + * / 
 + private final List < List < ByteBuffer > > elementsList = new ArrayList < > ( ) ; 
 + 
 + / * * 
 + * The number of elements that still can be added . 
 + * / 
 + private int remaining ; 
 + 
 + / * * 
 + * < code > true < / code > if the composites have been build , < code > false < / code > otherwise . 
 + * / 
 + private boolean built ; 
 + 
 + / * * 
 + * < code > true < / code > if the composites contains some < code > null < / code > elements . 
 + * / 
 + private boolean containsNull ; 
 + 
 + public CompositesBuilder ( CBuilder builder , Comparator < Composite > comparator ) 
 + { 
 + this . builder = builder ; 
 + this . comparator = comparator ; 
 + this . remaining = builder . remainingCount ( ) ; 
 + } 
 + 
 + / * * 
 + * Adds the specified element to all the composites . 
 + * < p > 
 + * If this builder contains 2 composites : A - B and A - C a call to this method to add D will result in the composites : 
 + * A - B - D and A - C - D . 
 + * < / p > 
 + * 
 + * @ param value the value of the next element 
 + * @ return this < code > CompositeBuilder < / code > 
 + * / 
 + public CompositesBuilder addElementToAll ( ByteBuffer value ) 
 + { 
 + checkUpdateable ( ) ; 
 + 
 + if ( isEmpty ( ) ) 
 + elementsList . add ( new ArrayList < ByteBuffer > ( ) ) ; 
 + 
 + for ( int i = 0 , m = elementsList . size ( ) ; i < m ; i + + ) 
 + { 
 + if ( value = = null ) 
 + containsNull = true ; 
 + 
 + elementsList . get ( i ) . add ( value ) ; 
 + } 
 + remaining - - ; 
 + return this ; 
 + } 
 + 
 + / * * 
 + * Adds individually each of the specified elements to the end of all of the existing composites . 
 + * < p > 
 + * If this builder contains 2 composites : A - B and A - C a call to this method to add D and E will result in the 4 
 + * composites : A - B - D , A - B - E , A - C - D and A - C - E . 
 + * < / p > 
 + * 
 + * @ param values the elements to add 
 + * @ return this < code > CompositeBuilder < / code > 
 + * / 
 + public CompositesBuilder addEachElementToAll ( List < ByteBuffer > values ) 
 + { 
 + checkUpdateable ( ) ; 
 + 
 + if ( isEmpty ( ) ) 
 + elementsList . add ( new ArrayList < ByteBuffer > ( ) ) ; 
 + 
 + for ( int i = 0 , m = elementsList . size ( ) ; i < m ; i + + ) 
 + { 
 + List < ByteBuffer > oldComposite = elementsList . remove ( 0 ) ; 
 + 
 + for ( int j = 0 , n = values . size ( ) ; j < n ; j + + ) 
 + { 
 + List < ByteBuffer > newComposite = new ArrayList < > ( oldComposite ) ; 
 + elementsList . add ( newComposite ) ; 
 + 
 + ByteBuffer value = values . get ( j ) ; 
 + 
 + if ( value = = null ) 
 + containsNull = true ; 
 + 
 + newComposite . add ( values . get ( j ) ) ; 
 + } 
 + } 
 + 
 + remaining - - ; 
 + return this ; 
 + } 
 + 
 + / * * 
 + * Returns the number of elements that can be added to the composites . 
 + * 
 + * @ return the number of elements that can be added to the composites . 
 + * / 
 + public int remainingCount ( ) 
 + { 
 + return remaining ; 
 + } 
 + 
 + / * * 
 + * Checks if some elements can still be added to the composites . 
 + * 
 + * @ return < code > true < / code > if it is possible to add more elements to the composites , < code > false < / code > otherwise . 
 + * / 
 + public boolean hasRemaining ( ) 
 + { 
 + return remaining > 0 ; 
 + } 
 + 
 + / * * 
 + * Checks if this builder is empty . 
 + * 
 + * @ return < code > true < / code > if this builder is empty , < code > false < / code > otherwise . 
 + * / 
 + public boolean isEmpty ( ) 
 + { 
 + return elementsList . isEmpty ( ) ; 
 + } 
 + 
 + / * * 
 + * Checks if the composites contains null elements . 
 + * 
 + * @ return < code > true < / code > if the composites contains < code > null < / code > elements , < code > false < / code > otherwise . 
 + * / 
 + public boolean containsNull ( ) 
 + { 
 + return containsNull ; 
 + } 
 + 
 + / * * 
 + * Builds the < code > Composites < / code > . 
 + * 
 + * @ return the composites 
 + * / 
 + public List < Composite > build ( ) 
 + { 
 + return buildWithEOC ( EOC . NONE ) ; 
 + } 
 + 
 + / * * 
 + * Builds the < code > Composites < / code > with the specified EOC . 
 + * 
 + * @ return the composites 
 + * / 
 + public List < Composite > buildWithEOC ( EOC eoc ) 
 + { 
 + built = true ; 
 + 
 + if ( elementsList . isEmpty ( ) ) 
 + return singletonList ( builder . build ( ) . withEOC ( eoc ) ) ; 
 + 
 + / / Use a TreeSet to sort and eliminate duplicates 
 + Set < Composite > set = new TreeSet < Composite > ( comparator ) ; 
 + 
 + for ( int i = 0 , m = elementsList . size ( ) ; i < m ; i + + ) 
 + { 
 + List < ByteBuffer > elements = elementsList . get ( i ) ; 
 + set . add ( builder . buildWith ( elements ) . withEOC ( eoc ) ) ; 
 + } 
 + 
 + return new ArrayList < > ( set ) ; 
 + } 
 + 
 + private void checkUpdateable ( ) 
 + { 
 + if ( ! hasRemaining ( ) | | built ) 
 + throw new IllegalStateException ( " this CompositesBuilder cannot be updated anymore " ) ; 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / SingleColumnRelationTest . java b / test / unit / org / apache / cassandra / cql3 / SingleColumnRelationTest . java 
 index 120c780 . . c93147b 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / SingleColumnRelationTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / SingleColumnRelationTest . java 
 @ @ - 17 , 6 + 17 , 8 @ @ 
 * / 
 package org . apache . cassandra . cql3 ; 
 
 + import java . util . Arrays ; 
 + 
 import org . junit . Test ; 
 
 public class SingleColumnRelationTest extends CQLTester 
 @ @ - 48 , 4 + 50 , 121 @ @ public class SingleColumnRelationTest extends CQLTester 
 assertInvalid ( " SELECT * FROM % s WHERE c = 0 AND b < = ? " , set ( 0 ) ) ; 
 assertInvalid ( " SELECT * FROM % s WHERE c = 0 AND b IN ( ? ) " , set ( 0 ) ) ; 
 } 
 + 
 + @ Test 
 + public void testClusteringColumnRelations ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a text , b int , c int , d int , primary key ( a , b , c ) ) " ) ; 
 + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 1 , 5 , 1 ) ; 
 + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 2 , 6 , 2 ) ; 
 + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 3 , 7 , 3 ) ; 
 + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " second " , 4 , 8 , 4 ) ; 
 + 
 + testSelectQueriesWithClusteringColumnRelations ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testClusteringColumnRelationsWithCompactStorage ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a text , b int , c int , d int , primary key ( a , b , c ) ) WITH COMPACT STORAGE ; " ) ; 
 + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 1 , 5 , 1 ) ; 
 + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 2 , 6 , 2 ) ; 
 + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 3 , 7 , 3 ) ; 
 + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " second " , 4 , 8 , 4 ) ; 
 + 
 + testSelectQueriesWithClusteringColumnRelations ( ) ; 
 + } 
 + 
 + private void testSelectQueriesWithClusteringColumnRelations ( ) throws Throwable 
 + { 
 + assertRows ( execute ( " select * from % s where a in ( ? , ? ) " , " first " , " second " ) , 
 + row ( " first " , 1 , 5 , 1 ) , 
 + row ( " first " , 2 , 6 , 2 ) , 
 + row ( " first " , 3 , 7 , 3 ) , 
 + row ( " second " , 4 , 8 , 4 ) ) ; 
 + 
 + assertRows ( execute ( " select * from % s where a = ? and b = ? and c in ( ? , ? ) " , " first " , 2 , 6 , 7 ) , 
 + row ( " first " , 2 , 6 , 2 ) ) ; 
 + 
 + assertRows ( execute ( " select * from % s where a = ? and b in ( ? , ? ) and c in ( ? , ? ) " , " first " , 2 , 3 , 6 , 7 ) , 
 + row ( " first " , 2 , 6 , 2 ) , 
 + row ( " first " , 3 , 7 , 3 ) ) ; 
 + 
 + assertRows ( execute ( " select * from % s where a = ? and b in ( ? , ? ) and c in ( ? , ? ) " , " first " , 3 , 2 , 7 , 6 ) , 
 + row ( " first " , 2 , 6 , 2 ) , 
 + row ( " first " , 3 , 7 , 3 ) ) ; 
 + 
 + assertRows ( execute ( " select * from % s where a = ? and c in ( ? , ? ) and b in ( ? , ? ) " , " first " , 7 , 6 , 3 , 2 ) , 
 + row ( " first " , 2 , 6 , 2 ) , 
 + row ( " first " , 3 , 7 , 3 ) ) ; 
 + 
 + assertRows ( execute ( " select c , d from % s where a = ? and c in ( ? , ? ) and b in ( ? , ? ) " , " first " , 7 , 6 , 3 , 2 ) , 
 + row ( 6 , 2 ) , 
 + row ( 7 , 3 ) ) ; 
 + 
 + assertRows ( execute ( " select c , d from % s where a = ? and c in ( ? , ? ) and b in ( ? , ? , ? ) " , " first " , 7 , 6 , 3 , 2 , 3 ) , 
 + row ( 6 , 2 ) , 
 + row ( 7 , 3 ) ) ; 
 + 
 + assertRows ( execute ( " select * from % s where a = ? and b in ( ? , ? ) and c = ? " , " first " , 3 , 2 , 7 ) , 
 + row ( " first " , 3 , 7 , 3 ) ) ; 
 + 
 + assertRows ( execute ( " select * from % s where a = ? and b in ? and c in ? " , 
 + " first " , Arrays . asList ( 3 , 2 ) , Arrays . asList ( 7 , 6 ) ) , 
 + row ( " first " , 2 , 6 , 2 ) , 
 + row ( " first " , 3 , 7 , 3 ) ) ; 
 + 
 + assertInvalid ( " select * from % s where a = ? and b in ? and c in ? " , " first " , null , Arrays . asList ( 7 , 6 ) ) ; 
 + 
 + assertRows ( execute ( " select * from % s where a = ? and c > = ? and b in ( ? , ? ) " , " first " , 6 , 3 , 2 ) , 
 + row ( " first " , 2 , 6 , 2 ) , 
 + row ( " first " , 3 , 7 , 3 ) ) ; 
 + 
 + assertRows ( execute ( " select * from % s where a = ? and c > ? and b in ( ? , ? ) " , " first " , 6 , 3 , 2 ) , 
 + row ( " first " , 3 , 7 , 3 ) ) ; 
 + 
 + assertRows ( execute ( " select * from % s where a = ? and c < = ? and b in ( ? , ? ) " , " first " , 6 , 3 , 2 ) , 
 + row ( " first " , 2 , 6 , 2 ) ) ; 
 + 
 + assertRows ( execute ( " select * from % s where a = ? and c < ? and b in ( ? , ? ) " , " first " , 7 , 3 , 2 ) , 
 + row ( " first " , 2 , 6 , 2 ) ) ; 
 + 
 + assertRows ( execute ( " select * from % s where a = ? and c in ( ? , ? ) and b in ( ? , ? ) order by b DESC " , 
 + " first " , 7 , 6 , 3 , 2 ) , 
 + row ( " first " , 3 , 7 , 3 ) , 
 + row ( " first " , 2 , 6 , 2 ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testPartitionKeyColumnRelations ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a text , b int , c int , d int , primary key ( ( a , b ) , c ) ) " ) ; 
 + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 1 , 1 , 1 ) ; 
 + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 2 , 2 , 2 ) ; 
 + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 3 , 3 , 3 ) ; 
 + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " second " , 4 , 4 , 4 ) ; 
 + 
 + assertInvalid ( " select * from % s where a in ( ? , ? ) " , " first " , " second " ) ; 
 + assertInvalid ( " select * from % s where a in ( ? , ? ) and b in ( ? , ? ) " , " first " , " second " , 2 , 3 ) ; 
 + } 
 + 
 + @ Test 
 + public void testClusteringColumnRelationsWithClusteringOrder ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a text , b int , c int , d int , primary key ( a , b , c ) ) WITH CLUSTERING ORDER BY ( b DESC ) ; " ) ; 
 + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 1 , 5 , 1 ) ; 
 + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 2 , 6 , 2 ) ; 
 + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " first " , 3 , 7 , 3 ) ; 
 + execute ( " insert into % s ( a , b , c , d ) values ( ? , ? , ? , ? ) " , " second " , 4 , 8 , 4 ) ; 
 + 
 + assertRows ( execute ( " select * from % s where a = ? and c in ( ? , ? ) and b in ( ? , ? ) order by b DESC " , 
 + " first " , 7 , 6 , 3 , 2 ) , 
 + row ( " first " , 3 , 7 , 3 ) , 
 + row ( " first " , 2 , 6 , 2 ) ) ; 
 + 
 + assertRows ( execute ( " select * from % s where a = ? and c in ( ? , ? ) and b in ( ? , ? ) order by b ASC " , 
 + " first " , 7 , 6 , 3 , 2 ) , 
 + row ( " first " , 2 , 6 , 2 ) , 
 + row ( " first " , 3 , 7 , 3 ) ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / NEWS . txt b / NEWS . txt 
 index 2489f26 . . 8a5645d 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 13 , 6 + 13 , 13 @ @ restore snapshots created with the previous major version using the 
 ' sstableloader ' tool . You can upgrade the file format of your snapshots 
 using the provided ' sstableupgrade ' tool . 
 
 + 2 . 0 . 3 
 + = = = = = 
 + Upgrading 
 + - - - - - - - - - 
 + - The IEndpointStateChangeSubscriber has a new method , beforeChange , that 
 + any custom implemenations using the class will need to implement . 
 + 
 
 2 . 0 . 2 
 = = = = = 
 diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index 07c21bd . . 8237fa3 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 44 , 7 + 44 , 6 @ @ import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 import com . google . common . collect . ImmutableList ; 
 - import com . google . common . collect . Lists ; 
 
 / * * 
 * This module is responsible for Gossiping information for the local endpoint . This abstraction 
 @ @ - 964 , 12 + 963 , 21 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 } 
 for ( Entry < ApplicationState , VersionedValue > remoteEntry : remoteState . getApplicationStateMap ( ) . entrySet ( ) ) 
 { 
 - doNotifications ( addr , remoteEntry . getKey ( ) , remoteEntry . getValue ( ) ) ; 
 + doOnChangeNotifications ( addr , remoteEntry . getKey ( ) , remoteEntry . getValue ( ) ) ; 
 + } 
 + } 
 + 
 + / / notify that a local application state is going to change ( doesn ' t get triggered for remote changes ) 
 + private void doBeforeChangeNotifications ( InetAddress addr , EndpointState epState , ApplicationState apState , VersionedValue newValue ) 
 + { 
 + for ( IEndpointStateChangeSubscriber subscriber : subscribers ) 
 + { 
 + subscriber . beforeChange ( addr , epState , apState , newValue ) ; 
 } 
 } 
 
 / / notify that an application state has changed 
 - private void doNotifications ( InetAddress addr , ApplicationState state , VersionedValue value ) 
 + private void doOnChangeNotifications ( InetAddress addr , ApplicationState state , VersionedValue value ) 
 { 
 for ( IEndpointStateChangeSubscriber subscriber : subscribers ) 
 { 
 @ @ - 1186 , 9 + 1194 , 17 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 public void addLocalApplicationState ( ApplicationState state , VersionedValue value ) 
 { 
 EndpointState epState = endpointStateMap . get ( FBUtilities . getBroadcastAddress ( ) ) ; 
 + InetAddress epAddr = FBUtilities . getBroadcastAddress ( ) ; 
 assert epState ! = null ; 
 + / / Fire " before change " notifications : 
 + doBeforeChangeNotifications ( epAddr , epState , state , value ) ; 
 + / / Notifications may have taken some time , so preventively raise the version 
 + / / of the new value , otherwise it could be ignored by the remote node 
 + / / if another value with a newer version was received in the meantime : 
 + value = StorageService . instance . valueFactory . cloneWithHigherVersion ( value ) ; 
 + / / Add to local application state and fire " on change " notifications : 
 epState . addApplicationState ( state , value ) ; 
 - doNotifications ( FBUtilities . getBroadcastAddress ( ) , state , value ) ; 
 + doOnChangeNotifications ( epAddr , state , value ) ; 
 } 
 
 public void stop ( ) 
 diff - - git a / src / java / org / apache / cassandra / gms / IEndpointStateChangeSubscriber . java b / src / java / org / apache / cassandra / gms / IEndpointStateChangeSubscriber . java 
 index dd7ee2c . . 1bfd678 100644 
 - - - a / src / java / org / apache / cassandra / gms / IEndpointStateChangeSubscriber . java 
 + + + b / src / java / org / apache / cassandra / gms / IEndpointStateChangeSubscriber . java 
 @ @ - 37 , 6 + 37 , 8 @ @ public interface IEndpointStateChangeSubscriber 
 * @ param epState state that actually changed for the above endpoint . 
 * / 
 public void onJoin ( InetAddress endpoint , EndpointState epState ) ; 
 + 
 + public void beforeChange ( InetAddress endpoint , EndpointState currentState , ApplicationState newStateKey , VersionedValue newValue ) ; 
 
 public void onChange ( InetAddress endpoint , ApplicationState state , VersionedValue value ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / gms / VersionedValue . java b / src / java / org / apache / cassandra / gms / VersionedValue . java 
 index 2bc3433 . . 7c64a83 100644 
 - - - a / src / java / org / apache / cassandra / gms / VersionedValue . java 
 + + + b / src / java / org / apache / cassandra / gms / VersionedValue . java 
 @ @ - 113 , 6 + 113 , 11 @ @ public class VersionedValue implements Comparable < VersionedValue > 
 { 
 this . partitioner = partitioner ; 
 } 
 + 
 + public VersionedValue cloneWithHigherVersion ( VersionedValue value ) 
 + { 
 + return new VersionedValue ( value . value ) ; 
 + } 
 
 public VersionedValue bootstrapping ( Collection < Token > tokens ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / locator / ReconnectableSnitchHelper . java b / src / java / org / apache / cassandra / locator / ReconnectableSnitchHelper . java 
 index e1353f4 . . d797393 100644 
 - - - a / src / java / org / apache / cassandra / locator / ReconnectableSnitchHelper . java 
 + + + b / src / java / org / apache / cassandra / locator / ReconnectableSnitchHelper . java 
 @ @ - 70 , 6 + 70 , 11 @ @ public class ReconnectableSnitchHelper implements IEndpointStateChangeSubscriber 
 logger . debug ( String . format ( " Intiated reconnect to an Internal IP % s for the % s " , localAddress , publicAddress ) ) ; 
 } 
 } 
 + 
 + public void beforeChange ( InetAddress endpoint , EndpointState currentState , ApplicationState newStateKey , VersionedValue newValue ) 
 + { 
 + / / no - op 
 + } 
 
 public void onJoin ( InetAddress endpoint , EndpointState epState ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / repair / RepairSession . java b / src / java / org / apache / cassandra / repair / RepairSession . java 
 index 2e93104 . . 18688f9 100644 
 - - - a / src / java / org / apache / cassandra / repair / RepairSession . java 
 + + + b / src / java / org / apache / cassandra / repair / RepairSession . java 
 @ @ - 318 , 6 + 318 , 7 @ @ public class RepairSession extends WrappedRunnable implements IEndpointStateChan 
 } 
 
 public void onJoin ( InetAddress endpoint , EndpointState epState ) { } 
 + public void beforeChange ( InetAddress endpoint , EndpointState currentState , ApplicationState newStateKey , VersionedValue newValue ) { } 
 public void onChange ( InetAddress endpoint , ApplicationState state , VersionedValue value ) { } 
 public void onAlive ( InetAddress endpoint , EndpointState state ) { } 
 public void onDead ( InetAddress endpoint , EndpointState state ) { } 
 diff - - git a / src / java / org / apache / cassandra / service / LoadBroadcaster . java b / src / java / org / apache / cassandra / service / LoadBroadcaster . java 
 index 4a118ba . . 4996e52 100644 
 - - - a / src / java / org / apache / cassandra / service / LoadBroadcaster . java 
 + + + b / src / java / org / apache / cassandra / service / LoadBroadcaster . java 
 @ @ - 58 , 6 + 58 , 8 @ @ public class LoadBroadcaster implements IEndpointStateChangeSubscriber 
 onChange ( endpoint , ApplicationState . LOAD , localValue ) ; 
 } 
 } 
 + 
 + public void beforeChange ( InetAddress endpoint , EndpointState currentState , ApplicationState newStateKey , VersionedValue newValue ) { } 
 
 public void onAlive ( InetAddress endpoint , EndpointState state ) { } 
 
 diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java 
 index 131163b . . 0ffc7c4 100644 
 - - - a / src / java / org / apache / cassandra / service / MigrationManager . java 
 + + + b / src / java / org / apache / cassandra / service / MigrationManager . java 
 @ @ - 78 , 6 + 78 , 9 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber 
 
 public void onJoin ( InetAddress endpoint , EndpointState epState ) 
 { } 
 + 
 + public void beforeChange ( InetAddress endpoint , EndpointState currentState , ApplicationState newStateKey , VersionedValue newValue ) 
 + { } 
 
 public void onChange ( InetAddress endpoint , ApplicationState state , VersionedValue value ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 95db711 . . c3f32fa 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 137 , 7 + 137 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 / * This abstraction maintains the token / endpoint metadata information * / 
 private TokenMetadata tokenMetadata = new TokenMetadata ( ) ; 
 
 - public VersionedValue . VersionedValueFactory valueFactory = new VersionedValue . VersionedValueFactory ( getPartitioner ( ) ) ; 
 + public volatile VersionedValue . VersionedValueFactory valueFactory = new VersionedValue . VersionedValueFactory ( getPartitioner ( ) ) ; 
 
 public static final StorageService instance = new StorageService ( ) ; 
 
 @ @ - 1186 , 6 + 1186 , 11 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 return rangeToEndpointMap ; 
 } 
 
 + public void beforeChange ( InetAddress endpoint , EndpointState currentState , ApplicationState newStateKey , VersionedValue newValue ) 
 + { 
 + / / no - op 
 + } 
 + 
 / * 
 * Handle the reception of a new particular ApplicationState for a particular endpoint . Note that the value of the 
 * ApplicationState has not necessarily " changed " since the last known value , if we already received the same update 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamSession . java b / src / java / org / apache / cassandra / streaming / StreamSession . java 
 index 5a16d81 . . 98a76fc 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamSession . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamSession . java 
 @ @ - 552 , 6 + 552 , 7 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe 
 } 
 
 public void onJoin ( InetAddress endpoint , EndpointState epState ) { } 
 + public void beforeChange ( InetAddress endpoint , EndpointState currentState , ApplicationState newStateKey , VersionedValue newValue ) { } 
 public void onChange ( InetAddress endpoint , ApplicationState state , VersionedValue value ) { } 
 public void onAlive ( InetAddress endpoint , EndpointState state ) { } 
 public void onDead ( InetAddress endpoint , EndpointState state ) { }
