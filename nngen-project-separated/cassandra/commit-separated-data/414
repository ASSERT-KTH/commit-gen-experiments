BLEU SCORE: 0.03283637368030199

TEST MSG: Make reading of range tombstones more reliable
GENERATED MSG: Handle queries on multiple secondary index types

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 33d5028 . . 440ccd8 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 13 <nl> + * Make reading of range tombstones more reliable ( CASSANDRA - 12811 ) <nl> * Fix startup problems due to schema tables not completely flushed ( CASSANDRA - 12213 ) <nl> * Fix view builder bug that can filter out data on restart ( CASSANDRA - 13405 ) <nl> * Fix 2i page size calculation when there are no regular columns ( CASSANDRA - 13400 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java <nl> index 5f8df1b . . 99abd10 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java <nl> @ @ - 736 , 13 + 736 , 13 @ @ public class SinglePartitionReadCommand extends ReadCommand <nl> <nl> / / We need to get the partition deletion and include it if it ' s live . In any case though , we ' re done with that sstable . <nl> sstable . incrementReadCount ( ) ; <nl> - try ( UnfilteredRowIterator iter = sstable . iterator ( partitionKey ( ) , columnFilter ( ) , filter . isReversed ( ) , isForThrift ( ) ) ) <nl> + try ( UnfilteredRowIterator iter = filter . filter ( sstable . iterator ( partitionKey ( ) , columnFilter ( ) , filter . isReversed ( ) , isForThrift ( ) ) ) ) <nl> { <nl> + sstablesIterated + + ; <nl> if ( ! iter . partitionLevelDeletion ( ) . isLive ( ) ) <nl> - { <nl> - sstablesIterated + + ; <nl> result = add ( UnfilteredRowIterators . noRowsIterator ( iter . metadata ( ) , iter . partitionKey ( ) , Rows . EMPTY _ STATIC _ ROW , iter . partitionLevelDeletion ( ) , filter . isReversed ( ) ) , result , filter , sstable . isRepaired ( ) ) ; <nl> - } <nl> + else <nl> + result = add ( iter , result , filter , sstable . isRepaired ( ) ) ; <nl> } <nl> continue ; <nl> } <nl> @ @ - 835 , 9 + 835 , 6 @ @ public class SinglePartitionReadCommand extends ReadCommand <nl> NavigableSet < Clustering > toRemove = null ; <nl> for ( Clustering clustering : clusterings ) <nl> { <nl> - if ( ! searchIter . hasNext ( ) ) <nl> - break ; <nl> - <nl> Row row = searchIter . next ( clustering ) ; <nl> if ( row = = null | | ! canRemoveRow ( row , columns . regulars , sstableTimestamp ) ) <nl> continue ; <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java b / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java <nl> index a81a7a6 . . 7769f2e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java <nl> @ @ - 176 , 7 + 176 , 9 @ @ public class ClusteringIndexNamesFilter extends AbstractClusteringIndexFilter <nl> <nl> public UnfilteredRowIterator getUnfilteredRowIterator ( final ColumnFilter columnFilter , final Partition partition ) <nl> { <nl> + final Iterator < Clustering > clusteringIter = clusteringsInQueryOrder . iterator ( ) ; <nl> final SearchIterator < Clustering , Row > searcher = partition . searchIterator ( columnFilter , reversed ) ; <nl> + <nl> return new AbstractUnfilteredRowIterator ( partition . metadata ( ) , <nl> partition . partitionKey ( ) , <nl> partition . partitionLevelDeletion ( ) , <nl> @ @ - 185 , 11 + 187 , 9 @ @ public class ClusteringIndexNamesFilter extends AbstractClusteringIndexFilter <nl> reversed , <nl> partition . stats ( ) ) <nl> { <nl> - private final Iterator < Clustering > clusteringIter = clusteringsInQueryOrder . iterator ( ) ; <nl> - <nl> protected Unfiltered computeNext ( ) <nl> { <nl> - while ( clusteringIter . hasNext ( ) & & searcher . hasNext ( ) ) <nl> + while ( clusteringIter . hasNext ( ) ) <nl> { <nl> Row row = searcher . next ( clusteringIter . next ( ) ) ; <nl> if ( row ! = null ) <nl> diff - - git a / src / java / org / apache / cassandra / db / partitions / AbstractBTreePartition . java b / src / java / org / apache / cassandra / db / partitions / AbstractBTreePartition . java <nl> index c63acc2 . . 2aa622e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / partitions / AbstractBTreePartition . java <nl> + + + b / src / java / org / apache / cassandra / db / partitions / AbstractBTreePartition . java <nl> @ @ - 139 , 11 + 139 , 6 @ @ public abstract class AbstractBTreePartition implements Partition , Iterable < Row > <nl> private final SearchIterator < Clustering , Row > rawIter = new BTreeSearchIterator < > ( current . tree , metadata . comparator , desc ( reversed ) ) ; <nl> private final DeletionTime partitionDeletion = current . deletionInfo . getPartitionDeletion ( ) ; <nl> <nl> - public boolean hasNext ( ) <nl> - { <nl> - return rawIter . hasNext ( ) ; <nl> - } <nl> - <nl> public Row next ( Clustering clustering ) <nl> { <nl> if ( clustering = = Clustering . STATIC _ CLUSTERING ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / IndexedSearchIterator . java b / src / java / org / apache / cassandra / utils / IndexedSearchIterator . java <nl> index a156629 . . 597e5bb 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / IndexedSearchIterator . java <nl> + + + b / src / java / org / apache / cassandra / utils / IndexedSearchIterator . java <nl> @ @ - 20 , 6 + 20 , 11 @ @ package org . apache . cassandra . utils ; <nl> public interface IndexedSearchIterator < K , V > extends SearchIterator < K , V > <nl> { <nl> / * * <nl> + * @ return true if iterator has any elements left , false otherwise <nl> + * / <nl> + public boolean hasNext ( ) ; <nl> + <nl> + / * * <nl> * @ return the value just recently returned by next ( ) <nl> * @ throws java . util . NoSuchElementException if next ( ) returned null <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / utils / SearchIterator . java b / src / java / org / apache / cassandra / utils / SearchIterator . java <nl> index 5309f4a . . 908053b 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / SearchIterator . java <nl> + + + b / src / java / org / apache / cassandra / utils / SearchIterator . java <nl> @ @ - 19 , 8 + 19 , 6 @ @ package org . apache . cassandra . utils ; <nl> <nl> public interface SearchIterator < K , V > <nl> { <nl> - public boolean hasNext ( ) ; <nl> - <nl> / * * <nl> * Searches " forwards " ( in direction of travel ) in the iterator for the required key ; <nl> * if this or any key greater has already been returned by the iterator , the method may <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java <nl> index 9f770a5 . . 4c9f4d6 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java <nl> @ @ - 43 , 15 + 43 , 89 @ @ public class DeleteTest extends CQLTester <nl> @ Test <nl> public void testRangeDeletion ( ) throws Throwable <nl> { <nl> - createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b , c ) ) " ) ; <nl> + testRangeDeletion ( true , true ) ; <nl> + testRangeDeletion ( false , true ) ; <nl> + testRangeDeletion ( true , false ) ; <nl> + testRangeDeletion ( false , false ) ; <nl> + } <nl> <nl> + private void testRangeDeletion ( boolean flushData , boolean flushTombstone ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b , c ) ) " ) ; <nl> execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 1 , 1 , 1 , 1 ) ; <nl> - flush ( ) ; <nl> + flush ( flushData ) ; <nl> execute ( " DELETE FROM % s WHERE a = ? AND b = ? " , 1 , 1 ) ; <nl> - flush ( ) ; <nl> + flush ( flushTombstone ) ; <nl> assertEmpty ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? AND c = ? " , 1 , 1 , 1 ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testDeleteRange ( ) throws Throwable <nl> + { <nl> + testDeleteRange ( true , true ) ; <nl> + testDeleteRange ( false , true ) ; <nl> + testDeleteRange ( true , false ) ; <nl> + testDeleteRange ( false , false ) ; <nl> + } <nl> + <nl> + private void testDeleteRange ( boolean flushData , boolean flushTombstone ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a , b ) ) " ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 1 , 1 ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 2 , 1 , 2 ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 2 , 2 , 3 ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 2 , 3 , 4 ) ; <nl> + flush ( flushData ) ; <nl> + <nl> + execute ( " DELETE FROM % s WHERE a = ? AND b > = ? " , 2 , 2 ) ; <nl> + flush ( flushTombstone ) ; <nl> + <nl> + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s " ) , <nl> + row ( 1 , 1 , 1 ) , <nl> + row ( 2 , 1 , 2 ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? " , 2 , 1 ) , <nl> + row ( 2 , 1 , 2 ) ) ; <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? " , 2 , 2 ) ) ; <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? " , 2 , 3 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCrossMemSSTableMultiColumn ( ) throws Throwable <nl> + { <nl> + testCrossMemSSTableMultiColumn ( true , true ) ; <nl> + testCrossMemSSTableMultiColumn ( false , true ) ; <nl> + testCrossMemSSTableMultiColumn ( true , false ) ; <nl> + testCrossMemSSTableMultiColumn ( false , false ) ; <nl> + } <nl> + <nl> + private void testCrossMemSSTableMultiColumn ( boolean flushData , boolean flushTombstone ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a , b ) ) " ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 1 , 1 ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 2 , 1 , 2 ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 2 , 2 , 2 ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 2 , 3 , 3 ) ; <nl> + flush ( flushData ) ; <nl> + <nl> + execute ( " DELETE FROM % s WHERE a = ? AND ( b ) = ( ? ) " , 2 , 2 ) ; <nl> + execute ( " DELETE FROM % s WHERE a = ? AND ( b ) = ( ? ) " , 2 , 3 ) ; <nl> + <nl> + flush ( flushTombstone ) ; <nl> + <nl> + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s " ) , <nl> + row ( 1 , 1 , 1 ) , <nl> + row ( 2 , 1 , 2 ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? " , 2 , 1 ) , <nl> + row ( 2 , 1 , 2 ) ) ; <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? " , 2 , 2 ) ) ; <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? " , 2 , 3 ) ) ; <nl> + } <nl> + <nl> + <nl> / * * <nl> * Test simple deletion and in particular check for # 4193 bug <nl> * migrated from cql _ tests . py : TestCQL . deletion _ test ( ) <nl> @ @ - 440 , 7 + 514 , 7 @ @ public class DeleteTest extends CQLTester <nl> assertEmpty ( execute ( " SELECT * FROM % s WHERE partitionKey = ? AND clustering = ? " , 0 , 1 ) ) ; <nl> } <nl> <nl> - execute ( " DELETE FROM % s WHERE partitionKey = ? AND ( clustering ) = ( ? ) " , 0 , 1 ) ; <nl> + execute ( " DELETE FROM % s WHERE partitionKey = ? AND clustering = ? " , 0 , 1 ) ; <nl> flush ( forceFlush ) ; <nl> assertEmpty ( execute ( " SELECT value FROM % s WHERE partitionKey = ? AND clustering = ? " , 0 , 1 ) ) ; <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / db / partition / PartitionImplementationTest . java b / test / unit / org / apache / cassandra / db / partition / PartitionImplementationTest . java <nl> index f215331 . . f4c93d6 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / partition / PartitionImplementationTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / partition / PartitionImplementationTest . java <nl> @ @ - 326 , 7 + 326 , 7 @ @ public class PartitionImplementationTest <nl> int pos = reversed ? KEY _ RANGE : 0 ; <nl> int mul = reversed ? - 1 : 1 ; <nl> boolean started = false ; <nl> - while ( searchIter . hasNext ( ) ) <nl> + while ( pos < KEY _ RANGE ) <nl> { <nl> int skip = rand . nextInt ( KEY _ RANGE / 10 ) ; <nl> pos + = skip * mul ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 33d5028 . . 440ccd8 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 13 
 + * Make reading of range tombstones more reliable ( CASSANDRA - 12811 ) 
 * Fix startup problems due to schema tables not completely flushed ( CASSANDRA - 12213 ) 
 * Fix view builder bug that can filter out data on restart ( CASSANDRA - 13405 ) 
 * Fix 2i page size calculation when there are no regular columns ( CASSANDRA - 13400 ) 
 diff - - git a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java 
 index 5f8df1b . . 99abd10 100644 
 - - - a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java 
 + + + b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java 
 @ @ - 736 , 13 + 736 , 13 @ @ public class SinglePartitionReadCommand extends ReadCommand 
 
 / / We need to get the partition deletion and include it if it ' s live . In any case though , we ' re done with that sstable . 
 sstable . incrementReadCount ( ) ; 
 - try ( UnfilteredRowIterator iter = sstable . iterator ( partitionKey ( ) , columnFilter ( ) , filter . isReversed ( ) , isForThrift ( ) ) ) 
 + try ( UnfilteredRowIterator iter = filter . filter ( sstable . iterator ( partitionKey ( ) , columnFilter ( ) , filter . isReversed ( ) , isForThrift ( ) ) ) ) 
 { 
 + sstablesIterated + + ; 
 if ( ! iter . partitionLevelDeletion ( ) . isLive ( ) ) 
 - { 
 - sstablesIterated + + ; 
 result = add ( UnfilteredRowIterators . noRowsIterator ( iter . metadata ( ) , iter . partitionKey ( ) , Rows . EMPTY _ STATIC _ ROW , iter . partitionLevelDeletion ( ) , filter . isReversed ( ) ) , result , filter , sstable . isRepaired ( ) ) ; 
 - } 
 + else 
 + result = add ( iter , result , filter , sstable . isRepaired ( ) ) ; 
 } 
 continue ; 
 } 
 @ @ - 835 , 9 + 835 , 6 @ @ public class SinglePartitionReadCommand extends ReadCommand 
 NavigableSet < Clustering > toRemove = null ; 
 for ( Clustering clustering : clusterings ) 
 { 
 - if ( ! searchIter . hasNext ( ) ) 
 - break ; 
 - 
 Row row = searchIter . next ( clustering ) ; 
 if ( row = = null | | ! canRemoveRow ( row , columns . regulars , sstableTimestamp ) ) 
 continue ; 
 diff - - git a / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java b / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java 
 index a81a7a6 . . 7769f2e 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java 
 @ @ - 176 , 7 + 176 , 9 @ @ public class ClusteringIndexNamesFilter extends AbstractClusteringIndexFilter 
 
 public UnfilteredRowIterator getUnfilteredRowIterator ( final ColumnFilter columnFilter , final Partition partition ) 
 { 
 + final Iterator < Clustering > clusteringIter = clusteringsInQueryOrder . iterator ( ) ; 
 final SearchIterator < Clustering , Row > searcher = partition . searchIterator ( columnFilter , reversed ) ; 
 + 
 return new AbstractUnfilteredRowIterator ( partition . metadata ( ) , 
 partition . partitionKey ( ) , 
 partition . partitionLevelDeletion ( ) , 
 @ @ - 185 , 11 + 187 , 9 @ @ public class ClusteringIndexNamesFilter extends AbstractClusteringIndexFilter 
 reversed , 
 partition . stats ( ) ) 
 { 
 - private final Iterator < Clustering > clusteringIter = clusteringsInQueryOrder . iterator ( ) ; 
 - 
 protected Unfiltered computeNext ( ) 
 { 
 - while ( clusteringIter . hasNext ( ) & & searcher . hasNext ( ) ) 
 + while ( clusteringIter . hasNext ( ) ) 
 { 
 Row row = searcher . next ( clusteringIter . next ( ) ) ; 
 if ( row ! = null ) 
 diff - - git a / src / java / org / apache / cassandra / db / partitions / AbstractBTreePartition . java b / src / java / org / apache / cassandra / db / partitions / AbstractBTreePartition . java 
 index c63acc2 . . 2aa622e 100644 
 - - - a / src / java / org / apache / cassandra / db / partitions / AbstractBTreePartition . java 
 + + + b / src / java / org / apache / cassandra / db / partitions / AbstractBTreePartition . java 
 @ @ - 139 , 11 + 139 , 6 @ @ public abstract class AbstractBTreePartition implements Partition , Iterable < Row > 
 private final SearchIterator < Clustering , Row > rawIter = new BTreeSearchIterator < > ( current . tree , metadata . comparator , desc ( reversed ) ) ; 
 private final DeletionTime partitionDeletion = current . deletionInfo . getPartitionDeletion ( ) ; 
 
 - public boolean hasNext ( ) 
 - { 
 - return rawIter . hasNext ( ) ; 
 - } 
 - 
 public Row next ( Clustering clustering ) 
 { 
 if ( clustering = = Clustering . STATIC _ CLUSTERING ) 
 diff - - git a / src / java / org / apache / cassandra / utils / IndexedSearchIterator . java b / src / java / org / apache / cassandra / utils / IndexedSearchIterator . java 
 index a156629 . . 597e5bb 100644 
 - - - a / src / java / org / apache / cassandra / utils / IndexedSearchIterator . java 
 + + + b / src / java / org / apache / cassandra / utils / IndexedSearchIterator . java 
 @ @ - 20 , 6 + 20 , 11 @ @ package org . apache . cassandra . utils ; 
 public interface IndexedSearchIterator < K , V > extends SearchIterator < K , V > 
 { 
 / * * 
 + * @ return true if iterator has any elements left , false otherwise 
 + * / 
 + public boolean hasNext ( ) ; 
 + 
 + / * * 
 * @ return the value just recently returned by next ( ) 
 * @ throws java . util . NoSuchElementException if next ( ) returned null 
 * / 
 diff - - git a / src / java / org / apache / cassandra / utils / SearchIterator . java b / src / java / org / apache / cassandra / utils / SearchIterator . java 
 index 5309f4a . . 908053b 100644 
 - - - a / src / java / org / apache / cassandra / utils / SearchIterator . java 
 + + + b / src / java / org / apache / cassandra / utils / SearchIterator . java 
 @ @ - 19 , 8 + 19 , 6 @ @ package org . apache . cassandra . utils ; 
 
 public interface SearchIterator < K , V > 
 { 
 - public boolean hasNext ( ) ; 
 - 
 / * * 
 * Searches " forwards " ( in direction of travel ) in the iterator for the required key ; 
 * if this or any key greater has already been returned by the iterator , the method may 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java 
 index 9f770a5 . . 4c9f4d6 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java 
 @ @ - 43 , 15 + 43 , 89 @ @ public class DeleteTest extends CQLTester 
 @ Test 
 public void testRangeDeletion ( ) throws Throwable 
 { 
 - createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b , c ) ) " ) ; 
 + testRangeDeletion ( true , true ) ; 
 + testRangeDeletion ( false , true ) ; 
 + testRangeDeletion ( true , false ) ; 
 + testRangeDeletion ( false , false ) ; 
 + } 
 
 + private void testRangeDeletion ( boolean flushData , boolean flushTombstone ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b , c ) ) " ) ; 
 execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 1 , 1 , 1 , 1 ) ; 
 - flush ( ) ; 
 + flush ( flushData ) ; 
 execute ( " DELETE FROM % s WHERE a = ? AND b = ? " , 1 , 1 ) ; 
 - flush ( ) ; 
 + flush ( flushTombstone ) ; 
 assertEmpty ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? AND c = ? " , 1 , 1 , 1 ) ) ; 
 } 
 
 + @ Test 
 + public void testDeleteRange ( ) throws Throwable 
 + { 
 + testDeleteRange ( true , true ) ; 
 + testDeleteRange ( false , true ) ; 
 + testDeleteRange ( true , false ) ; 
 + testDeleteRange ( false , false ) ; 
 + } 
 + 
 + private void testDeleteRange ( boolean flushData , boolean flushTombstone ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a , b ) ) " ) ; 
 + 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 1 , 1 ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 2 , 1 , 2 ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 2 , 2 , 3 ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 2 , 3 , 4 ) ; 
 + flush ( flushData ) ; 
 + 
 + execute ( " DELETE FROM % s WHERE a = ? AND b > = ? " , 2 , 2 ) ; 
 + flush ( flushTombstone ) ; 
 + 
 + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s " ) , 
 + row ( 1 , 1 , 1 ) , 
 + row ( 2 , 1 , 2 ) ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? " , 2 , 1 ) , 
 + row ( 2 , 1 , 2 ) ) ; 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? " , 2 , 2 ) ) ; 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? " , 2 , 3 ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testCrossMemSSTableMultiColumn ( ) throws Throwable 
 + { 
 + testCrossMemSSTableMultiColumn ( true , true ) ; 
 + testCrossMemSSTableMultiColumn ( false , true ) ; 
 + testCrossMemSSTableMultiColumn ( true , false ) ; 
 + testCrossMemSSTableMultiColumn ( false , false ) ; 
 + } 
 + 
 + private void testCrossMemSSTableMultiColumn ( boolean flushData , boolean flushTombstone ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a , b ) ) " ) ; 
 + 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 1 , 1 ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 2 , 1 , 2 ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 2 , 2 , 2 ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 2 , 3 , 3 ) ; 
 + flush ( flushData ) ; 
 + 
 + execute ( " DELETE FROM % s WHERE a = ? AND ( b ) = ( ? ) " , 2 , 2 ) ; 
 + execute ( " DELETE FROM % s WHERE a = ? AND ( b ) = ( ? ) " , 2 , 3 ) ; 
 + 
 + flush ( flushTombstone ) ; 
 + 
 + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s " ) , 
 + row ( 1 , 1 , 1 ) , 
 + row ( 2 , 1 , 2 ) ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? " , 2 , 1 ) , 
 + row ( 2 , 1 , 2 ) ) ; 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? " , 2 , 2 ) ) ; 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? " , 2 , 3 ) ) ; 
 + } 
 + 
 + 
 / * * 
 * Test simple deletion and in particular check for # 4193 bug 
 * migrated from cql _ tests . py : TestCQL . deletion _ test ( ) 
 @ @ - 440 , 7 + 514 , 7 @ @ public class DeleteTest extends CQLTester 
 assertEmpty ( execute ( " SELECT * FROM % s WHERE partitionKey = ? AND clustering = ? " , 0 , 1 ) ) ; 
 } 
 
 - execute ( " DELETE FROM % s WHERE partitionKey = ? AND ( clustering ) = ( ? ) " , 0 , 1 ) ; 
 + execute ( " DELETE FROM % s WHERE partitionKey = ? AND clustering = ? " , 0 , 1 ) ; 
 flush ( forceFlush ) ; 
 assertEmpty ( execute ( " SELECT value FROM % s WHERE partitionKey = ? AND clustering = ? " , 0 , 1 ) ) ; 
 
 diff - - git a / test / unit / org / apache / cassandra / db / partition / PartitionImplementationTest . java b / test / unit / org / apache / cassandra / db / partition / PartitionImplementationTest . java 
 index f215331 . . f4c93d6 100644 
 - - - a / test / unit / org / apache / cassandra / db / partition / PartitionImplementationTest . java 
 + + + b / test / unit / org / apache / cassandra / db / partition / PartitionImplementationTest . java 
 @ @ - 326 , 7 + 326 , 7 @ @ public class PartitionImplementationTest 
 int pos = reversed ? KEY _ RANGE : 0 ; 
 int mul = reversed ? - 1 : 1 ; 
 boolean started = false ; 
 - while ( searchIter . hasNext ( ) ) 
 + while ( pos < KEY _ RANGE ) 
 { 
 int skip = rand . nextInt ( KEY _ RANGE / 10 ) ; 
 pos + = skip * mul ;

NEAREST DIFF:
ELIMINATEDSENTENCE
