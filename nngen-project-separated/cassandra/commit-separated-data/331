BLEU SCORE: 0.03377156414337854

TEST MSG: Fix regression introduced by CASSANDRA - 11223 for counting rows in static compact tables
GENERATED MSG: Fix various unit - test failures

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / AbstractReadCommandBuilder . java b / src / java / org / apache / cassandra / db / AbstractReadCommandBuilder . java <nl> index dab22c7 . . afbab74 100644 <nl> - - - a / src / java / org / apache / cassandra / db / AbstractReadCommandBuilder . java <nl> + + + b / src / java / org / apache / cassandra / db / AbstractReadCommandBuilder . java <nl> @ @ - 189 , 6 + 189 , 13 @ @ public abstract class AbstractReadCommandBuilder <nl> <nl> protected ClusteringIndexFilter makeFilter ( ) <nl> { <nl> + / / StatementRestrictions . isColumnRange ( ) returns false for static compact tables , which means <nl> + / / SelectStatement . makeClusteringIndexFilter uses a names filter with no clusterings for static <nl> + / / compact tables , here we reproduce this behavior ( CASSANDRA - 11223 ) . Note that this code is only <nl> + / / called by tests . <nl> + if ( cfs . metadata . isStaticCompactTable ( ) ) <nl> + return new ClusteringIndexNamesFilter ( new TreeSet < > ( cfs . metadata . comparator ) , reversed ) ; <nl> + <nl> if ( clusterings ! = null ) <nl> { <nl> return new ClusteringIndexNamesFilter ( clusterings , reversed ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java b / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java <nl> index 617e2f5 . . fb2dd0d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java <nl> @ @ - 309 , 7 + 309 , 8 @ @ public class PartitionRangeReadCommand extends ReadCommand <nl> @ Override <nl> public boolean selectsFullPartition ( ) <nl> { <nl> - return dataRange . selectsAllPartition ( ) & & ! rowFilter ( ) . hasExpressionOnClusteringOrRegularColumns ( ) ; <nl> + return metadata ( ) . isStaticCompactTable ( ) | | <nl> + ( dataRange . selectsAllPartition ( ) & & ! rowFilter ( ) . hasExpressionOnClusteringOrRegularColumns ( ) ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java <nl> index 319eeb4 . . 686ec35 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java <nl> @ @ - 918 , 7 + 918 , 8 @ @ public class SinglePartitionReadCommand extends ReadCommand <nl> @ Override <nl> public boolean selectsFullPartition ( ) <nl> { <nl> - return clusteringIndexFilter . selectsAllPartition ( ) & & ! rowFilter ( ) . hasExpressionOnClusteringOrRegularColumns ( ) ; <nl> + return metadata ( ) . isStaticCompactTable ( ) | | <nl> + ( clusteringIndexFilter . selectsAllPartition ( ) & & ! rowFilter ( ) . hasExpressionOnClusteringOrRegularColumns ( ) ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java b / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java <nl> index 7769f2e . . f4859cd 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java <nl> @ @ - 72 , 7 + 72 , 9 @ @ public class ClusteringIndexNamesFilter extends AbstractClusteringIndexFilter <nl> <nl> public boolean selectsAllPartition ( ) <nl> { <nl> - return false ; <nl> + / / if the clusterings set is empty we are selecting a static row and in this case we want to count <nl> + / / static rows so we return true <nl> + return clusterings . isEmpty ( ) ; <nl> } <nl> <nl> public boolean selects ( Clustering clustering ) <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectLimitTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectLimitTest . java <nl> index 7e90c0a . . 8ef4b58 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectLimitTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectLimitTest . java <nl> @ @ - 94 , 6 + 94 , 43 @ @ public class SelectLimitTest extends CQLTester <nl> <nl> } <nl> <nl> + @ Test <nl> + public void testLimitInStaticTable ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int , v int , PRIMARY KEY ( k ) ) WITH COMPACT STORAGE " ) ; <nl> + <nl> + for ( int i = 0 ; i < 10 ; i + + ) <nl> + execute ( " INSERT INTO % s ( k , v ) VALUES ( ? , ? ) " , i , i ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s LIMIT 5 " ) , <nl> + row ( 0 , 0 ) , <nl> + row ( 1 , 1 ) , <nl> + row ( 2 , 2 ) , <nl> + row ( 3 , 3 ) , <nl> + row ( 4 , 4 ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT v FROM % s LIMIT 5 " ) , <nl> + row ( 0 ) , <nl> + row ( 1 ) , <nl> + row ( 2 ) , <nl> + row ( 3 ) , <nl> + row ( 4 ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT k FROM % s LIMIT 5 " ) , <nl> + row ( 0 ) , <nl> + row ( 1 ) , <nl> + row ( 2 ) , <nl> + row ( 3 ) , <nl> + row ( 4 ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT DISTINCT k FROM % s LIMIT 5 " ) , <nl> + row ( 0 ) , <nl> + row ( 1 ) , <nl> + row ( 2 ) , <nl> + row ( 3 ) , <nl> + row ( 4 ) ) ; <nl> + } <nl> + <nl> / * * <nl> * Check for # 7052 bug , <nl> * migrated from cql _ tests . py : TestCQL . limit _ compact _ table ( ) <nl> diff - - git a / test / unit / org / apache / cassandra / db / PartitionRangeReadTest . java b / test / unit / org / apache / cassandra / db / PartitionRangeReadTest . java <nl> index d5fb8fa . . c6968da 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / PartitionRangeReadTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / PartitionRangeReadTest . java <nl> @ @ - 30 , 7 + 30 , 9 @ @ import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertTrue ; <nl> <nl> import org . apache . cassandra . * ; <nl> + import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> + import org . apache . cassandra . db . marshal . AsciiType ; <nl> import org . apache . cassandra . db . rows . Row ; <nl> import org . apache . cassandra . db . marshal . IntegerType ; <nl> import org . apache . cassandra . db . partitions . * ; <nl> @ @ - 44 , 6 + 46 , 7 @ @ public class PartitionRangeReadTest <nl> public static final String KEYSPACE2 = " PartitionRangeReadTest2 " ; <nl> public static final String CF _ STANDARD1 = " Standard1 " ; <nl> public static final String CF _ STANDARDINT = " StandardInteger1 " ; <nl> + public static final String CF _ COMPACT1 = " Compact1 " ; <nl> <nl> @ BeforeClass <nl> public static void defineSchema ( ) throws ConfigurationException <nl> @ @ - 52 , 7 + 55 , 13 @ @ public class PartitionRangeReadTest <nl> SchemaLoader . createKeyspace ( KEYSPACE1 , <nl> KeyspaceParams . simple ( 1 ) , <nl> SchemaLoader . standardCFMD ( KEYSPACE1 , CF _ STANDARD1 ) , <nl> - SchemaLoader . denseCFMD ( KEYSPACE1 , CF _ STANDARDINT , IntegerType . instance ) ) ; <nl> + SchemaLoader . denseCFMD ( KEYSPACE1 , CF _ STANDARDINT , IntegerType . instance ) , <nl> + CFMetaData . Builder . create ( KEYSPACE1 , CF _ COMPACT1 , false , false , false ) <nl> + . addPartitionKey ( " key " , AsciiType . instance ) <nl> + . addClusteringColumn ( " column1 " , AsciiType . instance ) <nl> + . addRegularColumn ( " value " , AsciiType . instance ) <nl> + . addStaticColumn ( " val " , AsciiType . instance ) <nl> + . build ( ) ) ; <nl> SchemaLoader . createKeyspace ( KEYSPACE2 , <nl> KeyspaceParams . simple ( 1 ) , <nl> SchemaLoader . standardCFMD ( KEYSPACE2 , CF _ STANDARD1 ) ) ; <nl> @ @ - 109 , 6 + 118 , 30 @ @ public class PartitionRangeReadTest <nl> } <nl> <nl> @ Test <nl> + public void testLimits ( ) <nl> + { <nl> + ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( CF _ COMPACT1 ) ; <nl> + for ( int i = 0 ; i < 10 ; i + + ) <nl> + { <nl> + new RowUpdateBuilder ( cfs . metadata , 0 , Integer . toString ( i ) ) <nl> + . add ( " val " , " abcd " ) <nl> + . build ( ) <nl> + . applyUnsafe ( ) ; <nl> + <nl> + new RowUpdateBuilder ( cfs . metadata , 0 , Integer . toString ( i ) ) <nl> + . clustering ( " column1 " ) <nl> + . add ( " value " , " " ) <nl> + . build ( ) <nl> + . applyUnsafe ( ) ; <nl> + } <nl> + <nl> + assertEquals ( 10 , Util . getAll ( Util . cmd ( cfs ) . build ( ) ) . size ( ) ) ; <nl> + <nl> + for ( int i = 0 ; i < 10 ; i + + ) <nl> + assertEquals ( i , Util . getAll ( Util . cmd ( cfs ) . withLimit ( i ) . build ( ) ) . size ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testRangeSliceInclusionExclusion ( ) throws Throwable <nl> { <nl> String keyspaceName = KEYSPACE1 ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / AbstractReadCommandBuilder . java b / src / java / org / apache / cassandra / db / AbstractReadCommandBuilder . java 
 index dab22c7 . . afbab74 100644 
 - - - a / src / java / org / apache / cassandra / db / AbstractReadCommandBuilder . java 
 + + + b / src / java / org / apache / cassandra / db / AbstractReadCommandBuilder . java 
 @ @ - 189 , 6 + 189 , 13 @ @ public abstract class AbstractReadCommandBuilder 
 
 protected ClusteringIndexFilter makeFilter ( ) 
 { 
 + / / StatementRestrictions . isColumnRange ( ) returns false for static compact tables , which means 
 + / / SelectStatement . makeClusteringIndexFilter uses a names filter with no clusterings for static 
 + / / compact tables , here we reproduce this behavior ( CASSANDRA - 11223 ) . Note that this code is only 
 + / / called by tests . 
 + if ( cfs . metadata . isStaticCompactTable ( ) ) 
 + return new ClusteringIndexNamesFilter ( new TreeSet < > ( cfs . metadata . comparator ) , reversed ) ; 
 + 
 if ( clusterings ! = null ) 
 { 
 return new ClusteringIndexNamesFilter ( clusterings , reversed ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java b / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java 
 index 617e2f5 . . fb2dd0d 100644 
 - - - a / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java 
 + + + b / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java 
 @ @ - 309 , 7 + 309 , 8 @ @ public class PartitionRangeReadCommand extends ReadCommand 
 @ Override 
 public boolean selectsFullPartition ( ) 
 { 
 - return dataRange . selectsAllPartition ( ) & & ! rowFilter ( ) . hasExpressionOnClusteringOrRegularColumns ( ) ; 
 + return metadata ( ) . isStaticCompactTable ( ) | | 
 + ( dataRange . selectsAllPartition ( ) & & ! rowFilter ( ) . hasExpressionOnClusteringOrRegularColumns ( ) ) ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java 
 index 319eeb4 . . 686ec35 100644 
 - - - a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java 
 + + + b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java 
 @ @ - 918 , 7 + 918 , 8 @ @ public class SinglePartitionReadCommand extends ReadCommand 
 @ Override 
 public boolean selectsFullPartition ( ) 
 { 
 - return clusteringIndexFilter . selectsAllPartition ( ) & & ! rowFilter ( ) . hasExpressionOnClusteringOrRegularColumns ( ) ; 
 + return metadata ( ) . isStaticCompactTable ( ) | | 
 + ( clusteringIndexFilter . selectsAllPartition ( ) & & ! rowFilter ( ) . hasExpressionOnClusteringOrRegularColumns ( ) ) ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java b / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java 
 index 7769f2e . . f4859cd 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / ClusteringIndexNamesFilter . java 
 @ @ - 72 , 7 + 72 , 9 @ @ public class ClusteringIndexNamesFilter extends AbstractClusteringIndexFilter 
 
 public boolean selectsAllPartition ( ) 
 { 
 - return false ; 
 + / / if the clusterings set is empty we are selecting a static row and in this case we want to count 
 + / / static rows so we return true 
 + return clusterings . isEmpty ( ) ; 
 } 
 
 public boolean selects ( Clustering clustering ) 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectLimitTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectLimitTest . java 
 index 7e90c0a . . 8ef4b58 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectLimitTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectLimitTest . java 
 @ @ - 94 , 6 + 94 , 43 @ @ public class SelectLimitTest extends CQLTester 
 
 } 
 
 + @ Test 
 + public void testLimitInStaticTable ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k int , v int , PRIMARY KEY ( k ) ) WITH COMPACT STORAGE " ) ; 
 + 
 + for ( int i = 0 ; i < 10 ; i + + ) 
 + execute ( " INSERT INTO % s ( k , v ) VALUES ( ? , ? ) " , i , i ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s LIMIT 5 " ) , 
 + row ( 0 , 0 ) , 
 + row ( 1 , 1 ) , 
 + row ( 2 , 2 ) , 
 + row ( 3 , 3 ) , 
 + row ( 4 , 4 ) ) ; 
 + 
 + assertRows ( execute ( " SELECT v FROM % s LIMIT 5 " ) , 
 + row ( 0 ) , 
 + row ( 1 ) , 
 + row ( 2 ) , 
 + row ( 3 ) , 
 + row ( 4 ) ) ; 
 + 
 + assertRows ( execute ( " SELECT k FROM % s LIMIT 5 " ) , 
 + row ( 0 ) , 
 + row ( 1 ) , 
 + row ( 2 ) , 
 + row ( 3 ) , 
 + row ( 4 ) ) ; 
 + 
 + assertRows ( execute ( " SELECT DISTINCT k FROM % s LIMIT 5 " ) , 
 + row ( 0 ) , 
 + row ( 1 ) , 
 + row ( 2 ) , 
 + row ( 3 ) , 
 + row ( 4 ) ) ; 
 + } 
 + 
 / * * 
 * Check for # 7052 bug , 
 * migrated from cql _ tests . py : TestCQL . limit _ compact _ table ( ) 
 diff - - git a / test / unit / org / apache / cassandra / db / PartitionRangeReadTest . java b / test / unit / org / apache / cassandra / db / PartitionRangeReadTest . java 
 index d5fb8fa . . c6968da 100644 
 - - - a / test / unit / org / apache / cassandra / db / PartitionRangeReadTest . java 
 + + + b / test / unit / org / apache / cassandra / db / PartitionRangeReadTest . java 
 @ @ - 30 , 7 + 30 , 9 @ @ import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertTrue ; 
 
 import org . apache . cassandra . * ; 
 + import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . ColumnDefinition ; 
 + import org . apache . cassandra . db . marshal . AsciiType ; 
 import org . apache . cassandra . db . rows . Row ; 
 import org . apache . cassandra . db . marshal . IntegerType ; 
 import org . apache . cassandra . db . partitions . * ; 
 @ @ - 44 , 6 + 46 , 7 @ @ public class PartitionRangeReadTest 
 public static final String KEYSPACE2 = " PartitionRangeReadTest2 " ; 
 public static final String CF _ STANDARD1 = " Standard1 " ; 
 public static final String CF _ STANDARDINT = " StandardInteger1 " ; 
 + public static final String CF _ COMPACT1 = " Compact1 " ; 
 
 @ BeforeClass 
 public static void defineSchema ( ) throws ConfigurationException 
 @ @ - 52 , 7 + 55 , 13 @ @ public class PartitionRangeReadTest 
 SchemaLoader . createKeyspace ( KEYSPACE1 , 
 KeyspaceParams . simple ( 1 ) , 
 SchemaLoader . standardCFMD ( KEYSPACE1 , CF _ STANDARD1 ) , 
 - SchemaLoader . denseCFMD ( KEYSPACE1 , CF _ STANDARDINT , IntegerType . instance ) ) ; 
 + SchemaLoader . denseCFMD ( KEYSPACE1 , CF _ STANDARDINT , IntegerType . instance ) , 
 + CFMetaData . Builder . create ( KEYSPACE1 , CF _ COMPACT1 , false , false , false ) 
 + . addPartitionKey ( " key " , AsciiType . instance ) 
 + . addClusteringColumn ( " column1 " , AsciiType . instance ) 
 + . addRegularColumn ( " value " , AsciiType . instance ) 
 + . addStaticColumn ( " val " , AsciiType . instance ) 
 + . build ( ) ) ; 
 SchemaLoader . createKeyspace ( KEYSPACE2 , 
 KeyspaceParams . simple ( 1 ) , 
 SchemaLoader . standardCFMD ( KEYSPACE2 , CF _ STANDARD1 ) ) ; 
 @ @ - 109 , 6 + 118 , 30 @ @ public class PartitionRangeReadTest 
 } 
 
 @ Test 
 + public void testLimits ( ) 
 + { 
 + ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( CF _ COMPACT1 ) ; 
 + for ( int i = 0 ; i < 10 ; i + + ) 
 + { 
 + new RowUpdateBuilder ( cfs . metadata , 0 , Integer . toString ( i ) ) 
 + . add ( " val " , " abcd " ) 
 + . build ( ) 
 + . applyUnsafe ( ) ; 
 + 
 + new RowUpdateBuilder ( cfs . metadata , 0 , Integer . toString ( i ) ) 
 + . clustering ( " column1 " ) 
 + . add ( " value " , " " ) 
 + . build ( ) 
 + . applyUnsafe ( ) ; 
 + } 
 + 
 + assertEquals ( 10 , Util . getAll ( Util . cmd ( cfs ) . build ( ) ) . size ( ) ) ; 
 + 
 + for ( int i = 0 ; i < 10 ; i + + ) 
 + assertEquals ( i , Util . getAll ( Util . cmd ( cfs ) . withLimit ( i ) . build ( ) ) . size ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void testRangeSliceInclusionExclusion ( ) throws Throwable 
 { 
 String keyspaceName = KEYSPACE1 ;

NEAREST DIFF:
ELIMINATEDSENTENCE
