BLEU SCORE: 0.002386977655468498

TEST MSG: add client encryption support to sstableloader
GENERATED MSG: extend cleanuphelper in more places , and make cleanuphelper stricter about cleaning out old data . fixes test heisenbugs . patch by jbellis

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b876204 . . d6223be 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 4 <nl> + * add client encryption support to sstableloader ( CASSANDRA - 6378 ) <nl> * Fix accept ( ) loop for SSL sockets post - shutdown ( CASSANDRA - 6468 ) <nl> * Fix size - tiered compaction in LCS L0 ( CASSANDRA - 6496 ) <nl> * Fix assertion failure in filterColdSSTables ( CASSANDRA - 6483 ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / BulkLoader . java b / src / java / org / apache / cassandra / tools / BulkLoader . java <nl> index c89bb83 . . 15c8df8 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / BulkLoader . java <nl> + + + b / src / java / org / apache / cassandra / tools / BulkLoader . java <nl> @ @ - 24 , 7 + 24 , 9 @ @ import java . util . * ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> + import com . google . common . base . Joiner ; <nl> import com . google . common . collect . Sets ; <nl> + import org . apache . cassandra . config . EncryptionOptions ; <nl> import org . apache . commons . cli . * ; <nl> import org . apache . thrift . protocol . TBinaryProtocol ; <nl> import org . apache . thrift . protocol . TProtocol ; <nl> @ @ - 58 , 12 + 60 , 21 @ @ public class BulkLoader <nl> private static final String USER _ OPTION = " username " ; <nl> private static final String PASSWD _ OPTION = " password " ; <nl> private static final String THROTTLE _ MBITS = " throttle " ; <nl> + private static final String TRANSPORT _ FACTORY = " transport - factory " ; <nl> + private static final String SSL _ TRUSTSTORE = " truststore " ; <nl> + private static final String SSL _ TRUSTSTORE _ PW = " truststore - password " ; <nl> + private static final String SSL _ KEYSTORE = " keystore " ; <nl> + private static final String SSL _ KEYSTORE _ PW = " keystore - password " ; <nl> + private static final String SSL _ PROTOCOL = " ssl - protocol " ; <nl> + private static final String SSL _ ALGORITHM = " ssl - alg " ; <nl> + private static final String SSL _ STORE _ TYPE = " store - type " ; <nl> + private static final String SSL _ CIPHER _ SUITES = " ssl - ciphers " ; <nl> <nl> public static void main ( String args [ ] ) <nl> { <nl> LoaderOptions options = LoaderOptions . parseArgs ( args ) ; <nl> OutputHandler handler = new OutputHandler . SystemOutput ( options . verbose , options . debug ) ; <nl> - SSTableLoader loader = new SSTableLoader ( options . directory , new ExternalClient ( options . hosts , options . rpcPort , options . user , options . passwd ) , handler ) ; <nl> + SSTableLoader loader = new SSTableLoader ( options . directory , new ExternalClient ( options . hosts , options . rpcPort , options . user , options . passwd , options . transportFactory ) , handler ) ; <nl> DatabaseDescriptor . setStreamThroughputOutboundMegabitsPerSec ( options . throttle ) ; <nl> StreamResultFuture future = loader . stream ( options . ignores ) ; <nl> future . addEventListener ( new ProgressIndicator ( ) ) ; <nl> @ @ - 175 , 14 + 186 , 16 @ @ public class BulkLoader <nl> private final int rpcPort ; <nl> private final String user ; <nl> private final String passwd ; <nl> + private final ITransportFactory transportFactory ; <nl> <nl> - public ExternalClient ( Set < InetAddress > hosts , int port , String user , String passwd ) <nl> + public ExternalClient ( Set < InetAddress > hosts , int port , String user , String passwd , ITransportFactory transportFactory ) <nl> { <nl> super ( ) ; <nl> this . hosts = hosts ; <nl> this . rpcPort = port ; <nl> this . user = user ; <nl> this . passwd = passwd ; <nl> + this . transportFactory = transportFactory ; <nl> } <nl> <nl> public void init ( String keyspace ) <nl> @ @ - 194 , 7 + 207 , 7 @ @ public class BulkLoader <nl> { <nl> / / Query endpoint to ranges map and schemas from thrift <nl> InetAddress host = hostiter . next ( ) ; <nl> - Cassandra . Client client = createThriftClient ( host . getHostAddress ( ) , rpcPort , this . user , this . passwd ) ; <nl> + Cassandra . Client client = createThriftClient ( host . getHostAddress ( ) , rpcPort , this . user , this . passwd , this . transportFactory ) ; <nl> <nl> setPartitioner ( client . describe _ partitioner ( ) ) ; <nl> Token . TokenFactory tkFactory = getPartitioner ( ) . getTokenFactory ( ) ; <nl> @ @ - 233 , 11 + 246 , 9 @ @ public class BulkLoader <nl> return knownCfs . get ( cfName ) ; <nl> } <nl> <nl> - private static Cassandra . Client createThriftClient ( String host , int port , String user , String passwd ) throws Exception <nl> + private static Cassandra . Client createThriftClient ( String host , int port , String user , String passwd , ITransportFactory transportFactory ) throws Exception <nl> { <nl> - TSocket socket = new TSocket ( host , port ) ; <nl> - TTransport trans = new TFramedTransport ( socket ) ; <nl> - trans . open ( ) ; <nl> + TTransport trans = transportFactory . openTransport ( host , port ) ; <nl> TProtocol protocol = new TBinaryProtocol ( trans ) ; <nl> Cassandra . Client client = new Cassandra . Client ( protocol ) ; <nl> if ( user ! = null & & passwd ! = null ) <nl> @ @ - 263 , 6 + 274 , 8 @ @ public class BulkLoader <nl> public String user ; <nl> public String passwd ; <nl> public int throttle = 0 ; <nl> + public ITransportFactory transportFactory = new TFramedTransportFactory ( ) ; <nl> + public EncryptionOptions encOptions = new EncryptionOptions . ClientEncryptionOptions ( ) ; <nl> <nl> public final Set < InetAddress > hosts = new HashSet < InetAddress > ( ) ; <nl> public final Set < InetAddress > ignores = new HashSet < InetAddress > ( ) ; <nl> @ @ - 367 , 6 + 380 , 55 @ @ public class BulkLoader <nl> } <nl> } <nl> <nl> + if ( cmd . hasOption ( SSL _ TRUSTSTORE ) ) <nl> + { <nl> + opts . encOptions . truststore = cmd . getOptionValue ( SSL _ TRUSTSTORE ) ; <nl> + } <nl> + <nl> + if ( cmd . hasOption ( SSL _ TRUSTSTORE _ PW ) ) <nl> + { <nl> + opts . encOptions . truststore _ password = cmd . getOptionValue ( SSL _ TRUSTSTORE _ PW ) ; <nl> + } <nl> + <nl> + if ( cmd . hasOption ( SSL _ KEYSTORE ) ) <nl> + { <nl> + opts . encOptions . keystore = cmd . getOptionValue ( SSL _ KEYSTORE ) ; <nl> + / / if a keystore was provided , lets assume we ' ll need to use it <nl> + opts . encOptions . require _ client _ auth = true ; <nl> + } <nl> + <nl> + if ( cmd . hasOption ( SSL _ KEYSTORE _ PW ) ) <nl> + { <nl> + opts . encOptions . keystore _ password = cmd . getOptionValue ( SSL _ KEYSTORE _ PW ) ; <nl> + } <nl> + <nl> + if ( cmd . hasOption ( SSL _ PROTOCOL ) ) <nl> + { <nl> + opts . encOptions . protocol = cmd . getOptionValue ( SSL _ PROTOCOL ) ; <nl> + } <nl> + <nl> + if ( cmd . hasOption ( SSL _ ALGORITHM ) ) <nl> + { <nl> + opts . encOptions . algorithm = cmd . getOptionValue ( SSL _ ALGORITHM ) ; <nl> + } <nl> + <nl> + if ( cmd . hasOption ( SSL _ STORE _ TYPE ) ) <nl> + { <nl> + opts . encOptions . store _ type = cmd . getOptionValue ( SSL _ STORE _ TYPE ) ; <nl> + } <nl> + <nl> + if ( cmd . hasOption ( SSL _ CIPHER _ SUITES ) ) <nl> + { <nl> + opts . encOptions . cipher _ suites = cmd . getOptionValue ( SSL _ CIPHER _ SUITES ) . split ( " , " ) ; <nl> + } <nl> + <nl> + if ( cmd . hasOption ( TRANSPORT _ FACTORY ) ) <nl> + { <nl> + ITransportFactory transportFactory = getTransportFactory ( cmd . getOptionValue ( TRANSPORT _ FACTORY ) ) ; <nl> + configureTransportFactory ( transportFactory , opts ) ; <nl> + opts . transportFactory = transportFactory ; <nl> + } <nl> + <nl> return opts ; <nl> } <nl> catch ( ParseException e ) <nl> @ @ - 376 , 6 + 438 , 50 @ @ public class BulkLoader <nl> } <nl> } <nl> <nl> + private static ITransportFactory getTransportFactory ( String transportFactory ) <nl> + { <nl> + try <nl> + { <nl> + Class < ? > factory = Class . forName ( transportFactory ) ; <nl> + if ( ! ITransportFactory . class . isAssignableFrom ( factory ) ) <nl> + throw new IllegalArgumentException ( String . format ( " transport factory ' % s ' " + <nl> + " not derived from ITransportFactory " , transportFactory ) ) ; <nl> + return ( ITransportFactory ) factory . newInstance ( ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new IllegalArgumentException ( String . format ( " Cannot create a transport factory ' % s ' . " , transportFactory ) , e ) ; <nl> + } <nl> + } <nl> + <nl> + private static void configureTransportFactory ( ITransportFactory transportFactory , LoaderOptions opts ) <nl> + { <nl> + Map < String , String > options = new HashMap < > ( ) ; <nl> + / / If the supplied factory supports the same set of options as our SSL impl , set those <nl> + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . TRUSTSTORE ) ) <nl> + options . put ( SSLTransportFactory . TRUSTSTORE , opts . encOptions . truststore ) ; <nl> + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . TRUSTSTORE _ PASSWORD ) ) <nl> + options . put ( SSLTransportFactory . TRUSTSTORE _ PASSWORD , opts . encOptions . truststore _ password ) ; <nl> + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . PROTOCOL ) ) <nl> + options . put ( SSLTransportFactory . PROTOCOL , opts . encOptions . protocol ) ; <nl> + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . CIPHER _ SUITES ) ) <nl> + options . put ( SSLTransportFactory . CIPHER _ SUITES , Joiner . on ( ' , ' ) . join ( opts . encOptions . cipher _ suites ) ) ; <nl> + <nl> + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . KEYSTORE ) <nl> + & & opts . encOptions . require _ client _ auth ) <nl> + options . put ( SSLTransportFactory . KEYSTORE , opts . encOptions . keystore ) ; <nl> + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . KEYSTORE _ PASSWORD ) <nl> + & & opts . encOptions . require _ client _ auth ) <nl> + options . put ( SSLTransportFactory . KEYSTORE _ PASSWORD , opts . encOptions . keystore _ password ) ; <nl> + <nl> + / / Now check if any of the factory ' s supported options are set as system properties <nl> + for ( String optionKey : transportFactory . supportedOptions ( ) ) <nl> + if ( System . getProperty ( optionKey ) ! = null ) <nl> + options . put ( optionKey , System . getProperty ( optionKey ) ) ; <nl> + <nl> + transportFactory . setOptions ( options ) ; <nl> + } <nl> + <nl> private static void errorMsg ( String msg , CmdLineOptions options ) <nl> { <nl> System . err . println ( msg ) ; <nl> @ @ - 395 , 6 + 501 , 16 @ @ public class BulkLoader <nl> options . addOption ( " t " , THROTTLE _ MBITS , " throttle " , " throttle speed in Mbits ( default unlimited ) " ) ; <nl> options . addOption ( " u " , USER _ OPTION , " username " , " username for cassandra authentication " ) ; <nl> options . addOption ( " pw " , PASSWD _ OPTION , " password " , " password for cassandra authentication " ) ; <nl> + options . addOption ( " tf " , TRANSPORT _ FACTORY , " transport factory " , " Fully - qualified ITransportFactory class name for creating a connection to cassandra " ) ; <nl> + / / ssl connection - related options <nl> + options . addOption ( " ts " , SSL _ TRUSTSTORE , " TRUSTSTORE " , " SSL : full path to truststore " ) ; <nl> + options . addOption ( " tspw " , SSL _ TRUSTSTORE _ PW , " TRUSTSTORE - PASSWORD " , " SSL : password of the truststore " ) ; <nl> + options . addOption ( " ks " , SSL _ KEYSTORE , " KEYSTORE " , " SSL : full path to keystore " ) ; <nl> + options . addOption ( " kspw " , SSL _ KEYSTORE _ PW , " KEYSTORE - PASSWORD " , " SSL : password of the keystore " ) ; <nl> + options . addOption ( " prtcl " , SSL _ PROTOCOL , " PROTOCOL " , " SSL : connections protocol to use ( default : TLS ) " ) ; <nl> + options . addOption ( " alg " , SSL _ ALGORITHM , " ALGORITHM " , " SSL : algorithm ( default : SunX509 ) " ) ; <nl> + options . addOption ( " st " , SSL _ STORE _ TYPE , " STORE - TYPE " , " SSL : type of store " ) ; <nl> + options . addOption ( " ciphers " , SSL _ CIPHER _ SUITES , " CIPHER - SUITES " , " SSL : comma - separated list of encryption suites to use " ) ; <nl> return options ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / CleanupHelper . java b / test / unit / org / apache / cassandra / CleanupHelper . java <nl> index e3cde8d . . df835de 100644 <nl> - - - a / test / unit / org / apache / cassandra / CleanupHelper . java <nl> + + + b / test / unit / org / apache / cassandra / CleanupHelper . java <nl> @ @ - 24 , 6 + 24 , 8 @ @ import java . io . IOException ; <nl> import org . junit . BeforeClass ; <nl> <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> + <nl> import org . apache . log4j . Logger ; <nl> <nl> public class CleanupHelper <nl> @ @ - 31 , 25 + 33 , 19 @ @ public class CleanupHelper <nl> private static Logger logger = Logger . getLogger ( CleanupHelper . class ) ; <nl> <nl> @ BeforeClass <nl> - public static void cleanupAndLeaveDirs ( ) <nl> + public static void cleanupAndLeaveDirs ( ) throws IOException <nl> { <nl> mkdirs ( ) ; <nl> cleanup ( ) ; <nl> mkdirs ( ) ; <nl> } <nl> <nl> - public static void cleanup ( ) <nl> + public static void cleanup ( ) throws IOException <nl> { <nl> - / / we clean the fs twice , once to start with ( so old data files don ' t get stored by anything static if this is the first run ) <nl> - / / and once after flushing stuff ( to try to clean things out if it is not . ) part # 2 seems to be less than perfect . <nl> + / / clean up commitlog <nl> String [ ] directoryNames = { <nl> DatabaseDescriptor . getLogFileLocation ( ) , <nl> } ; <nl> - <nl> - / / try to delete the directories themselves too . don ' t panic if this fails . it probably means that the process <nl> - / / doesn ' t have permissions to do so , or it contains non - cassandra generated files that were intentionally <nl> - / / put there . <nl> - <nl> for ( String dirName : directoryNames ) <nl> { <nl> File dir = new File ( dirName ) ; <nl> @ @ - 59 , 17 + 55 , 12 @ @ public class CleanupHelper <nl> } <nl> for ( File f : dir . listFiles ( ) ) <nl> { <nl> - if ( ! f . delete ( ) ) <nl> - { <nl> - logger . error ( " could not delete " + f ) ; <nl> - } <nl> + FileUtils . deleteWithConfirm ( f ) ; <nl> } <nl> - <nl> - if ( ! dir . delete ( ) ) <nl> - logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> + FileUtils . deleteWithConfirm ( dir ) ; <nl> } <nl> <nl> - / / cleanup data directory which are stored as data directory / table / data files <nl> + / / clean up data directory which are stored as data directory / table / data files <nl> for ( String dirName : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> { <nl> File dir = new File ( dirName ) ; <nl> @ @ - 80 , 19 + 71 , 16 @ @ public class CleanupHelper <nl> for ( File tableFile : dir . listFiles ( ) ) <nl> { <nl> / / table directory <nl> - if ( tableFile . isDirectory ( ) ) { <nl> - for ( File dataFile : tableFile . listFiles ( ) ) { <nl> - if ( ! dataFile . delete ( ) ) { <nl> - logger . error ( " could not delete " + dataFile ) ; <nl> - } <nl> + if ( tableFile . isDirectory ( ) ) <nl> + { <nl> + for ( File dataFile : tableFile . listFiles ( ) ) <nl> + { <nl> + FileUtils . deleteWithConfirm ( dataFile ) ; <nl> } <nl> } <nl> - if ( ! tableFile . delete ( ) ) <nl> - logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> + FileUtils . deleteWithConfirm ( tableFile ) ; <nl> } <nl> - <nl> - if ( ! dir . delete ( ) ) <nl> - logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> + FileUtils . deleteWithConfirm ( dir ) ; <nl> } <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / db / OneCompactionTest . java b / test / unit / org / apache / cassandra / db / OneCompactionTest . java <nl> index b53e0fb . . 1b31044 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / OneCompactionTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / OneCompactionTest . java <nl> @ @ - 28 , 8 + 28 , 9 @ @ import org . junit . Test ; <nl> <nl> import static junit . framework . Assert . assertEquals ; <nl> import org . apache . cassandra . db . filter . QueryPath ; <nl> + import org . apache . cassandra . CleanupHelper ; <nl> <nl> - public class OneCompactionTest <nl> + public class OneCompactionTest extends CleanupHelper <nl> { <nl> private void testCompaction ( String columnFamilyName , int insertsPerTable ) throws IOException , ExecutionException , InterruptedException <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / db / RemoveColumnFamilyTest . java b / test / unit / org / apache / cassandra / db / RemoveColumnFamilyTest . java <nl> index 35efad1 . . 7cc940d 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RemoveColumnFamilyTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RemoveColumnFamilyTest . java <nl> @ @ - 26 , 8 + 26 , 9 @ @ import org . junit . Test ; <nl> import static junit . framework . Assert . assertNull ; <nl> import org . apache . cassandra . db . filter . IdentityQueryFilter ; <nl> import org . apache . cassandra . db . filter . QueryPath ; <nl> + import org . apache . cassandra . CleanupHelper ; <nl> <nl> - public class RemoveColumnFamilyTest <nl> + public class RemoveColumnFamilyTest extends CleanupHelper <nl> { <nl> @ Test <nl> public void testRemoveColumnFamily ( ) throws IOException , ExecutionException , InterruptedException <nl> diff - - git a / test / unit / org / apache / cassandra / db / RemoveColumnFamilyWithFlush1Test . java b / test / unit / org / apache / cassandra / db / RemoveColumnFamilyWithFlush1Test . java <nl> index 423ad5a . . 512d2d3 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RemoveColumnFamilyWithFlush1Test . java <nl> + + + b / test / unit / org / apache / cassandra / db / RemoveColumnFamilyWithFlush1Test . java <nl> @ @ - 26 , 8 + 26 , 9 @ @ import org . junit . Test ; <nl> import static junit . framework . Assert . assertNull ; <nl> import org . apache . cassandra . db . filter . IdentityQueryFilter ; <nl> import org . apache . cassandra . db . filter . QueryPath ; <nl> + import org . apache . cassandra . CleanupHelper ; <nl> <nl> - public class RemoveColumnFamilyWithFlush1Test <nl> + public class RemoveColumnFamilyWithFlush1Test extends CleanupHelper <nl> { <nl> @ Test <nl> public void testRemoveColumnFamilyWithFlush1 ( ) throws IOException , ExecutionException , InterruptedException <nl> diff - - git a / test / unit / org / apache / cassandra / db / RemoveColumnFamilyWithFlush2Test . java b / test / unit / org / apache / cassandra / db / RemoveColumnFamilyWithFlush2Test . java <nl> index 74220bd . . f1a08d9 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RemoveColumnFamilyWithFlush2Test . java <nl> + + + b / test / unit / org / apache / cassandra / db / RemoveColumnFamilyWithFlush2Test . java <nl> @ @ - 26 , 8 + 26 , 9 @ @ import org . junit . Test ; <nl> import static junit . framework . Assert . assertNull ; <nl> import org . apache . cassandra . db . filter . IdentityQueryFilter ; <nl> import org . apache . cassandra . db . filter . QueryPath ; <nl> + import org . apache . cassandra . CleanupHelper ; <nl> <nl> - public class RemoveColumnFamilyWithFlush2Test <nl> + public class RemoveColumnFamilyWithFlush2Test extends CleanupHelper <nl> { <nl> @ Test <nl> public void testRemoveColumnFamilyWithFlush2 ( ) throws IOException , ExecutionException , InterruptedException <nl> diff - - git a / test / unit / org / apache / cassandra / db / RemoveColumnTest . java b / test / unit / org / apache / cassandra / db / RemoveColumnTest . java <nl> index dcc9093 . . 31ae44f 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RemoveColumnTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RemoveColumnTest . java <nl> @ @ - 27 , 8 + 27 , 9 @ @ import static junit . framework . Assert . assertNull ; <nl> import org . apache . cassandra . db . filter . IdentityQueryFilter ; <nl> import org . apache . cassandra . db . filter . NamesQueryFilter ; <nl> import org . apache . cassandra . db . filter . QueryPath ; <nl> + import org . apache . cassandra . CleanupHelper ; <nl> <nl> - public class RemoveColumnTest <nl> + public class RemoveColumnTest extends CleanupHelper <nl> { <nl> @ Test <nl> public void testRemoveColumn ( ) throws IOException , ExecutionException , InterruptedException <nl> diff - - git a / test / unit / org / apache / cassandra / db / RemoveSubColumnTest . java b / test / unit / org / apache / cassandra / db / RemoveSubColumnTest . java <nl> index a2e3e61 . . 2f71757 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RemoveSubColumnTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RemoveSubColumnTest . java <nl> @ @ - 28 , 8 + 28 , 9 @ @ import org . apache . cassandra . db . filter . IdentityQueryFilter ; <nl> import org . apache . cassandra . db . filter . QueryPath ; <nl> import static org . apache . cassandra . Util . addMutation ; <nl> import static org . apache . cassandra . Util . getBytes ; <nl> + import org . apache . cassandra . CleanupHelper ; <nl> <nl> - public class RemoveSubColumnTest <nl> + public class RemoveSubColumnTest extends CleanupHelper <nl> { <nl> @ Test <nl> public void testRemoveSubColumn ( ) throws IOException , ExecutionException , InterruptedException <nl> diff - - git a / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java b / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java <nl> index e51167d . . 18b0942 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java <nl> @ @ - 33 , 9 + 33 , 10 @ @ import org . apache . cassandra . db . filter . QueryPath ; <nl> import static org . apache . cassandra . Util . addMutation ; <nl> import static org . apache . cassandra . Util . getBytes ; <nl> import org . apache . cassandra . Util ; <nl> + import org . apache . cassandra . CleanupHelper ; <nl> import static junit . framework . Assert . assertNotNull ; <nl> <nl> - public class RemoveSuperColumnTest <nl> + public class RemoveSuperColumnTest extends CleanupHelper <nl> { <nl> @ Test <nl> public void testRemoveSuperColumn ( ) throws IOException , ExecutionException , InterruptedException <nl> diff - - git a / test / unit / org / apache / cassandra / service / AntiEntropyServiceTest . java b / test / unit / org / apache / cassandra / service / AntiEntropyServiceTest . java <nl> index dd06767 . . e48968a 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / AntiEntropyServiceTest . java <nl> + + + b / test / unit / org / apache / cassandra / service / AntiEntropyServiceTest . java <nl> @ @ - 45 , 19 + 45 , 21 @ @ import static org . junit . Assert . * ; <nl> <nl> public class AntiEntropyServiceTest extends CleanupHelper <nl> { <nl> - public static InetAddress LOCAL = FBUtilities . getLocalAddress ( ) ; <nl> - <nl> / / table and column family to test against <nl> public AntiEntropyService aes ; <nl> <nl> public static String tablename ; <nl> public static String cfname ; <nl> - public static InetAddress REMOTE ; <nl> + public static InetAddress LOCAL , REMOTE ; <nl> + <nl> + private static boolean initialized ; <nl> <nl> - static <nl> + @ Before <nl> + public void prepare ( ) throws Exception <nl> { <nl> - try <nl> + if ( ! initialized ) <nl> { <nl> + LOCAL = FBUtilities . getLocalAddress ( ) ; <nl> / / bump the replication factor so that local overlaps with REMOTE below <nl> DatabaseDescriptorTest . setReplicationFactor ( 2 ) ; <nl> <nl> @ @ - 71 , 16 + 73 , 8 @ @ public class AntiEntropyServiceTest extends CleanupHelper <nl> <nl> tablename = DatabaseDescriptor . getTables ( ) . get ( 0 ) ; <nl> cfname = Table . open ( tablename ) . getColumnFamilies ( ) . iterator ( ) . next ( ) ; <nl> + initialized = true ; <nl> } <nl> - catch ( Exception e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - } <nl> - <nl> - @ Before <nl> - public void prepare ( ) throws Exception <nl> - { <nl> aes = AntiEntropyService . instance ( ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b876204 . . d6223be 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 4 
 + * add client encryption support to sstableloader ( CASSANDRA - 6378 ) 
 * Fix accept ( ) loop for SSL sockets post - shutdown ( CASSANDRA - 6468 ) 
 * Fix size - tiered compaction in LCS L0 ( CASSANDRA - 6496 ) 
 * Fix assertion failure in filterColdSSTables ( CASSANDRA - 6483 ) 
 diff - - git a / src / java / org / apache / cassandra / tools / BulkLoader . java b / src / java / org / apache / cassandra / tools / BulkLoader . java 
 index c89bb83 . . 15c8df8 100644 
 - - - a / src / java / org / apache / cassandra / tools / BulkLoader . java 
 + + + b / src / java / org / apache / cassandra / tools / BulkLoader . java 
 @ @ - 24 , 7 + 24 , 9 @ @ import java . util . * ; 
 import java . util . concurrent . ConcurrentHashMap ; 
 import java . util . concurrent . TimeUnit ; 
 
 + import com . google . common . base . Joiner ; 
 import com . google . common . collect . Sets ; 
 + import org . apache . cassandra . config . EncryptionOptions ; 
 import org . apache . commons . cli . * ; 
 import org . apache . thrift . protocol . TBinaryProtocol ; 
 import org . apache . thrift . protocol . TProtocol ; 
 @ @ - 58 , 12 + 60 , 21 @ @ public class BulkLoader 
 private static final String USER _ OPTION = " username " ; 
 private static final String PASSWD _ OPTION = " password " ; 
 private static final String THROTTLE _ MBITS = " throttle " ; 
 + private static final String TRANSPORT _ FACTORY = " transport - factory " ; 
 + private static final String SSL _ TRUSTSTORE = " truststore " ; 
 + private static final String SSL _ TRUSTSTORE _ PW = " truststore - password " ; 
 + private static final String SSL _ KEYSTORE = " keystore " ; 
 + private static final String SSL _ KEYSTORE _ PW = " keystore - password " ; 
 + private static final String SSL _ PROTOCOL = " ssl - protocol " ; 
 + private static final String SSL _ ALGORITHM = " ssl - alg " ; 
 + private static final String SSL _ STORE _ TYPE = " store - type " ; 
 + private static final String SSL _ CIPHER _ SUITES = " ssl - ciphers " ; 
 
 public static void main ( String args [ ] ) 
 { 
 LoaderOptions options = LoaderOptions . parseArgs ( args ) ; 
 OutputHandler handler = new OutputHandler . SystemOutput ( options . verbose , options . debug ) ; 
 - SSTableLoader loader = new SSTableLoader ( options . directory , new ExternalClient ( options . hosts , options . rpcPort , options . user , options . passwd ) , handler ) ; 
 + SSTableLoader loader = new SSTableLoader ( options . directory , new ExternalClient ( options . hosts , options . rpcPort , options . user , options . passwd , options . transportFactory ) , handler ) ; 
 DatabaseDescriptor . setStreamThroughputOutboundMegabitsPerSec ( options . throttle ) ; 
 StreamResultFuture future = loader . stream ( options . ignores ) ; 
 future . addEventListener ( new ProgressIndicator ( ) ) ; 
 @ @ - 175 , 14 + 186 , 16 @ @ public class BulkLoader 
 private final int rpcPort ; 
 private final String user ; 
 private final String passwd ; 
 + private final ITransportFactory transportFactory ; 
 
 - public ExternalClient ( Set < InetAddress > hosts , int port , String user , String passwd ) 
 + public ExternalClient ( Set < InetAddress > hosts , int port , String user , String passwd , ITransportFactory transportFactory ) 
 { 
 super ( ) ; 
 this . hosts = hosts ; 
 this . rpcPort = port ; 
 this . user = user ; 
 this . passwd = passwd ; 
 + this . transportFactory = transportFactory ; 
 } 
 
 public void init ( String keyspace ) 
 @ @ - 194 , 7 + 207 , 7 @ @ public class BulkLoader 
 { 
 / / Query endpoint to ranges map and schemas from thrift 
 InetAddress host = hostiter . next ( ) ; 
 - Cassandra . Client client = createThriftClient ( host . getHostAddress ( ) , rpcPort , this . user , this . passwd ) ; 
 + Cassandra . Client client = createThriftClient ( host . getHostAddress ( ) , rpcPort , this . user , this . passwd , this . transportFactory ) ; 
 
 setPartitioner ( client . describe _ partitioner ( ) ) ; 
 Token . TokenFactory tkFactory = getPartitioner ( ) . getTokenFactory ( ) ; 
 @ @ - 233 , 11 + 246 , 9 @ @ public class BulkLoader 
 return knownCfs . get ( cfName ) ; 
 } 
 
 - private static Cassandra . Client createThriftClient ( String host , int port , String user , String passwd ) throws Exception 
 + private static Cassandra . Client createThriftClient ( String host , int port , String user , String passwd , ITransportFactory transportFactory ) throws Exception 
 { 
 - TSocket socket = new TSocket ( host , port ) ; 
 - TTransport trans = new TFramedTransport ( socket ) ; 
 - trans . open ( ) ; 
 + TTransport trans = transportFactory . openTransport ( host , port ) ; 
 TProtocol protocol = new TBinaryProtocol ( trans ) ; 
 Cassandra . Client client = new Cassandra . Client ( protocol ) ; 
 if ( user ! = null & & passwd ! = null ) 
 @ @ - 263 , 6 + 274 , 8 @ @ public class BulkLoader 
 public String user ; 
 public String passwd ; 
 public int throttle = 0 ; 
 + public ITransportFactory transportFactory = new TFramedTransportFactory ( ) ; 
 + public EncryptionOptions encOptions = new EncryptionOptions . ClientEncryptionOptions ( ) ; 
 
 public final Set < InetAddress > hosts = new HashSet < InetAddress > ( ) ; 
 public final Set < InetAddress > ignores = new HashSet < InetAddress > ( ) ; 
 @ @ - 367 , 6 + 380 , 55 @ @ public class BulkLoader 
 } 
 } 
 
 + if ( cmd . hasOption ( SSL _ TRUSTSTORE ) ) 
 + { 
 + opts . encOptions . truststore = cmd . getOptionValue ( SSL _ TRUSTSTORE ) ; 
 + } 
 + 
 + if ( cmd . hasOption ( SSL _ TRUSTSTORE _ PW ) ) 
 + { 
 + opts . encOptions . truststore _ password = cmd . getOptionValue ( SSL _ TRUSTSTORE _ PW ) ; 
 + } 
 + 
 + if ( cmd . hasOption ( SSL _ KEYSTORE ) ) 
 + { 
 + opts . encOptions . keystore = cmd . getOptionValue ( SSL _ KEYSTORE ) ; 
 + / / if a keystore was provided , lets assume we ' ll need to use it 
 + opts . encOptions . require _ client _ auth = true ; 
 + } 
 + 
 + if ( cmd . hasOption ( SSL _ KEYSTORE _ PW ) ) 
 + { 
 + opts . encOptions . keystore _ password = cmd . getOptionValue ( SSL _ KEYSTORE _ PW ) ; 
 + } 
 + 
 + if ( cmd . hasOption ( SSL _ PROTOCOL ) ) 
 + { 
 + opts . encOptions . protocol = cmd . getOptionValue ( SSL _ PROTOCOL ) ; 
 + } 
 + 
 + if ( cmd . hasOption ( SSL _ ALGORITHM ) ) 
 + { 
 + opts . encOptions . algorithm = cmd . getOptionValue ( SSL _ ALGORITHM ) ; 
 + } 
 + 
 + if ( cmd . hasOption ( SSL _ STORE _ TYPE ) ) 
 + { 
 + opts . encOptions . store _ type = cmd . getOptionValue ( SSL _ STORE _ TYPE ) ; 
 + } 
 + 
 + if ( cmd . hasOption ( SSL _ CIPHER _ SUITES ) ) 
 + { 
 + opts . encOptions . cipher _ suites = cmd . getOptionValue ( SSL _ CIPHER _ SUITES ) . split ( " , " ) ; 
 + } 
 + 
 + if ( cmd . hasOption ( TRANSPORT _ FACTORY ) ) 
 + { 
 + ITransportFactory transportFactory = getTransportFactory ( cmd . getOptionValue ( TRANSPORT _ FACTORY ) ) ; 
 + configureTransportFactory ( transportFactory , opts ) ; 
 + opts . transportFactory = transportFactory ; 
 + } 
 + 
 return opts ; 
 } 
 catch ( ParseException e ) 
 @ @ - 376 , 6 + 438 , 50 @ @ public class BulkLoader 
 } 
 } 
 
 + private static ITransportFactory getTransportFactory ( String transportFactory ) 
 + { 
 + try 
 + { 
 + Class < ? > factory = Class . forName ( transportFactory ) ; 
 + if ( ! ITransportFactory . class . isAssignableFrom ( factory ) ) 
 + throw new IllegalArgumentException ( String . format ( " transport factory ' % s ' " + 
 + " not derived from ITransportFactory " , transportFactory ) ) ; 
 + return ( ITransportFactory ) factory . newInstance ( ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new IllegalArgumentException ( String . format ( " Cannot create a transport factory ' % s ' . " , transportFactory ) , e ) ; 
 + } 
 + } 
 + 
 + private static void configureTransportFactory ( ITransportFactory transportFactory , LoaderOptions opts ) 
 + { 
 + Map < String , String > options = new HashMap < > ( ) ; 
 + / / If the supplied factory supports the same set of options as our SSL impl , set those 
 + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . TRUSTSTORE ) ) 
 + options . put ( SSLTransportFactory . TRUSTSTORE , opts . encOptions . truststore ) ; 
 + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . TRUSTSTORE _ PASSWORD ) ) 
 + options . put ( SSLTransportFactory . TRUSTSTORE _ PASSWORD , opts . encOptions . truststore _ password ) ; 
 + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . PROTOCOL ) ) 
 + options . put ( SSLTransportFactory . PROTOCOL , opts . encOptions . protocol ) ; 
 + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . CIPHER _ SUITES ) ) 
 + options . put ( SSLTransportFactory . CIPHER _ SUITES , Joiner . on ( ' , ' ) . join ( opts . encOptions . cipher _ suites ) ) ; 
 + 
 + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . KEYSTORE ) 
 + & & opts . encOptions . require _ client _ auth ) 
 + options . put ( SSLTransportFactory . KEYSTORE , opts . encOptions . keystore ) ; 
 + if ( transportFactory . supportedOptions ( ) . contains ( SSLTransportFactory . KEYSTORE _ PASSWORD ) 
 + & & opts . encOptions . require _ client _ auth ) 
 + options . put ( SSLTransportFactory . KEYSTORE _ PASSWORD , opts . encOptions . keystore _ password ) ; 
 + 
 + / / Now check if any of the factory ' s supported options are set as system properties 
 + for ( String optionKey : transportFactory . supportedOptions ( ) ) 
 + if ( System . getProperty ( optionKey ) ! = null ) 
 + options . put ( optionKey , System . getProperty ( optionKey ) ) ; 
 + 
 + transportFactory . setOptions ( options ) ; 
 + } 
 + 
 private static void errorMsg ( String msg , CmdLineOptions options ) 
 { 
 System . err . println ( msg ) ; 
 @ @ - 395 , 6 + 501 , 16 @ @ public class BulkLoader 
 options . addOption ( " t " , THROTTLE _ MBITS , " throttle " , " throttle speed in Mbits ( default unlimited ) " ) ; 
 options . addOption ( " u " , USER _ OPTION , " username " , " username for cassandra authentication " ) ; 
 options . addOption ( " pw " , PASSWD _ OPTION , " password " , " password for cassandra authentication " ) ; 
 + options . addOption ( " tf " , TRANSPORT _ FACTORY , " transport factory " , " Fully - qualified ITransportFactory class name for creating a connection to cassandra " ) ; 
 + / / ssl connection - related options 
 + options . addOption ( " ts " , SSL _ TRUSTSTORE , " TRUSTSTORE " , " SSL : full path to truststore " ) ; 
 + options . addOption ( " tspw " , SSL _ TRUSTSTORE _ PW , " TRUSTSTORE - PASSWORD " , " SSL : password of the truststore " ) ; 
 + options . addOption ( " ks " , SSL _ KEYSTORE , " KEYSTORE " , " SSL : full path to keystore " ) ; 
 + options . addOption ( " kspw " , SSL _ KEYSTORE _ PW , " KEYSTORE - PASSWORD " , " SSL : password of the keystore " ) ; 
 + options . addOption ( " prtcl " , SSL _ PROTOCOL , " PROTOCOL " , " SSL : connections protocol to use ( default : TLS ) " ) ; 
 + options . addOption ( " alg " , SSL _ ALGORITHM , " ALGORITHM " , " SSL : algorithm ( default : SunX509 ) " ) ; 
 + options . addOption ( " st " , SSL _ STORE _ TYPE , " STORE - TYPE " , " SSL : type of store " ) ; 
 + options . addOption ( " ciphers " , SSL _ CIPHER _ SUITES , " CIPHER - SUITES " , " SSL : comma - separated list of encryption suites to use " ) ; 
 return options ; 
 } 


NEAREST DIFF:
diff - - git a / test / unit / org / apache / cassandra / CleanupHelper . java b / test / unit / org / apache / cassandra / CleanupHelper . java 
 index e3cde8d . . df835de 100644 
 - - - a / test / unit / org / apache / cassandra / CleanupHelper . java 
 + + + b / test / unit / org / apache / cassandra / CleanupHelper . java 
 @ @ - 24 , 6 + 24 , 8 @ @ import java . io . IOException ; 
 import org . junit . BeforeClass ; 
 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 + 
 import org . apache . log4j . Logger ; 
 
 public class CleanupHelper 
 @ @ - 31 , 25 + 33 , 19 @ @ public class CleanupHelper 
 private static Logger logger = Logger . getLogger ( CleanupHelper . class ) ; 
 
 @ BeforeClass 
 - public static void cleanupAndLeaveDirs ( ) 
 + public static void cleanupAndLeaveDirs ( ) throws IOException 
 { 
 mkdirs ( ) ; 
 cleanup ( ) ; 
 mkdirs ( ) ; 
 } 
 
 - public static void cleanup ( ) 
 + public static void cleanup ( ) throws IOException 
 { 
 - / / we clean the fs twice , once to start with ( so old data files don ' t get stored by anything static if this is the first run ) 
 - / / and once after flushing stuff ( to try to clean things out if it is not . ) part # 2 seems to be less than perfect . 
 + / / clean up commitlog 
 String [ ] directoryNames = { 
 DatabaseDescriptor . getLogFileLocation ( ) , 
 } ; 
 - 
 - / / try to delete the directories themselves too . don ' t panic if this fails . it probably means that the process 
 - / / doesn ' t have permissions to do so , or it contains non - cassandra generated files that were intentionally 
 - / / put there . 
 - 
 for ( String dirName : directoryNames ) 
 { 
 File dir = new File ( dirName ) ; 
 @ @ - 59 , 17 + 55 , 12 @ @ public class CleanupHelper 
 } 
 for ( File f : dir . listFiles ( ) ) 
 { 
 - if ( ! f . delete ( ) ) 
 - { 
 - logger . error ( " could not delete " + f ) ; 
 - } 
 + FileUtils . deleteWithConfirm ( f ) ; 
 } 
 - 
 - if ( ! dir . delete ( ) ) 
 - logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 + FileUtils . deleteWithConfirm ( dir ) ; 
 } 
 
 - / / cleanup data directory which are stored as data directory / table / data files 
 + / / clean up data directory which are stored as data directory / table / data files 
 for ( String dirName : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 { 
 File dir = new File ( dirName ) ; 
 @ @ - 80 , 19 + 71 , 16 @ @ public class CleanupHelper 
 for ( File tableFile : dir . listFiles ( ) ) 
 { 
 / / table directory 
 - if ( tableFile . isDirectory ( ) ) { 
 - for ( File dataFile : tableFile . listFiles ( ) ) { 
 - if ( ! dataFile . delete ( ) ) { 
 - logger . error ( " could not delete " + dataFile ) ; 
 - } 
 + if ( tableFile . isDirectory ( ) ) 
 + { 
 + for ( File dataFile : tableFile . listFiles ( ) ) 
 + { 
 + FileUtils . deleteWithConfirm ( dataFile ) ; 
 } 
 } 
 - if ( ! tableFile . delete ( ) ) 
 - logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 + FileUtils . deleteWithConfirm ( tableFile ) ; 
 } 
 - 
 - if ( ! dir . delete ( ) ) 
 - logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 + FileUtils . deleteWithConfirm ( dir ) ; 
 } 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / db / OneCompactionTest . java b / test / unit / org / apache / cassandra / db / OneCompactionTest . java 
 index b53e0fb . . 1b31044 100644 
 - - - a / test / unit / org / apache / cassandra / db / OneCompactionTest . java 
 + + + b / test / unit / org / apache / cassandra / db / OneCompactionTest . java 
 @ @ - 28 , 8 + 28 , 9 @ @ import org . junit . Test ; 
 
 import static junit . framework . Assert . assertEquals ; 
 import org . apache . cassandra . db . filter . QueryPath ; 
 + import org . apache . cassandra . CleanupHelper ; 
 
 - public class OneCompactionTest 
 + public class OneCompactionTest extends CleanupHelper 
 { 
 private void testCompaction ( String columnFamilyName , int insertsPerTable ) throws IOException , ExecutionException , InterruptedException 
 { 
 diff - - git a / test / unit / org / apache / cassandra / db / RemoveColumnFamilyTest . java b / test / unit / org / apache / cassandra / db / RemoveColumnFamilyTest . java 
 index 35efad1 . . 7cc940d 100644 
 - - - a / test / unit / org / apache / cassandra / db / RemoveColumnFamilyTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RemoveColumnFamilyTest . java 
 @ @ - 26 , 8 + 26 , 9 @ @ import org . junit . Test ; 
 import static junit . framework . Assert . assertNull ; 
 import org . apache . cassandra . db . filter . IdentityQueryFilter ; 
 import org . apache . cassandra . db . filter . QueryPath ; 
 + import org . apache . cassandra . CleanupHelper ; 
 
 - public class RemoveColumnFamilyTest 
 + public class RemoveColumnFamilyTest extends CleanupHelper 
 { 
 @ Test 
 public void testRemoveColumnFamily ( ) throws IOException , ExecutionException , InterruptedException 
 diff - - git a / test / unit / org / apache / cassandra / db / RemoveColumnFamilyWithFlush1Test . java b / test / unit / org / apache / cassandra / db / RemoveColumnFamilyWithFlush1Test . java 
 index 423ad5a . . 512d2d3 100644 
 - - - a / test / unit / org / apache / cassandra / db / RemoveColumnFamilyWithFlush1Test . java 
 + + + b / test / unit / org / apache / cassandra / db / RemoveColumnFamilyWithFlush1Test . java 
 @ @ - 26 , 8 + 26 , 9 @ @ import org . junit . Test ; 
 import static junit . framework . Assert . assertNull ; 
 import org . apache . cassandra . db . filter . IdentityQueryFilter ; 
 import org . apache . cassandra . db . filter . QueryPath ; 
 + import org . apache . cassandra . CleanupHelper ; 
 
 - public class RemoveColumnFamilyWithFlush1Test 
 + public class RemoveColumnFamilyWithFlush1Test extends CleanupHelper 
 { 
 @ Test 
 public void testRemoveColumnFamilyWithFlush1 ( ) throws IOException , ExecutionException , InterruptedException 
 diff - - git a / test / unit / org / apache / cassandra / db / RemoveColumnFamilyWithFlush2Test . java b / test / unit / org / apache / cassandra / db / RemoveColumnFamilyWithFlush2Test . java 
 index 74220bd . . f1a08d9 100644 
 - - - a / test / unit / org / apache / cassandra / db / RemoveColumnFamilyWithFlush2Test . java 
 + + + b / test / unit / org / apache / cassandra / db / RemoveColumnFamilyWithFlush2Test . java 
 @ @ - 26 , 8 + 26 , 9 @ @ import org . junit . Test ; 
 import static junit . framework . Assert . assertNull ; 
 import org . apache . cassandra . db . filter . IdentityQueryFilter ; 
 import org . apache . cassandra . db . filter . QueryPath ; 
 + import org . apache . cassandra . CleanupHelper ; 
 
 - public class RemoveColumnFamilyWithFlush2Test 
 + public class RemoveColumnFamilyWithFlush2Test extends CleanupHelper 
 { 
 @ Test 
 public void testRemoveColumnFamilyWithFlush2 ( ) throws IOException , ExecutionException , InterruptedException 
 diff - - git a / test / unit / org / apache / cassandra / db / RemoveColumnTest . java b / test / unit / org / apache / cassandra / db / RemoveColumnTest . java 
 index dcc9093 . . 31ae44f 100644 
 - - - a / test / unit / org / apache / cassandra / db / RemoveColumnTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RemoveColumnTest . java 
 @ @ - 27 , 8 + 27 , 9 @ @ import static junit . framework . Assert . assertNull ; 
 import org . apache . cassandra . db . filter . IdentityQueryFilter ; 
 import org . apache . cassandra . db . filter . NamesQueryFilter ; 
 import org . apache . cassandra . db . filter . QueryPath ; 
 + import org . apache . cassandra . CleanupHelper ; 
 
 - public class RemoveColumnTest 
 + public class RemoveColumnTest extends CleanupHelper 
 { 
 @ Test 
 public void testRemoveColumn ( ) throws IOException , ExecutionException , InterruptedException 
 diff - - git a / test / unit / org / apache / cassandra / db / RemoveSubColumnTest . java b / test / unit / org / apache / cassandra / db / RemoveSubColumnTest . java 
 index a2e3e61 . . 2f71757 100644 
 - - - a / test / unit / org / apache / cassandra / db / RemoveSubColumnTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RemoveSubColumnTest . java 
 @ @ - 28 , 8 + 28 , 9 @ @ import org . apache . cassandra . db . filter . IdentityQueryFilter ; 
 import org . apache . cassandra . db . filter . QueryPath ; 
 import static org . apache . cassandra . Util . addMutation ; 
 import static org . apache . cassandra . Util . getBytes ; 
 + import org . apache . cassandra . CleanupHelper ; 
 
 - public class RemoveSubColumnTest 
 + public class RemoveSubColumnTest extends CleanupHelper 
 { 
 @ Test 
 public void testRemoveSubColumn ( ) throws IOException , ExecutionException , InterruptedException 
 diff - - git a / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java b / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java 
 index e51167d . . 18b0942 100644 
 - - - a / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java 
 @ @ - 33 , 9 + 33 , 10 @ @ import org . apache . cassandra . db . filter . QueryPath ; 
 import static org . apache . cassandra . Util . addMutation ; 
 import static org . apache . cassandra . Util . getBytes ; 
 import org . apache . cassandra . Util ; 
 + import org . apache . cassandra . CleanupHelper ; 
 import static junit . framework . Assert . assertNotNull ; 
 
 - public class RemoveSuperColumnTest 
 + public class RemoveSuperColumnTest extends CleanupHelper 
 { 
 @ Test 
 public void testRemoveSuperColumn ( ) throws IOException , ExecutionException , InterruptedException 
 diff - - git a / test / unit / org / apache / cassandra / service / AntiEntropyServiceTest . java b / test / unit / org / apache / cassandra / service / AntiEntropyServiceTest . java 
 index dd06767 . . e48968a 100644 
 - - - a / test / unit / org / apache / cassandra / service / AntiEntropyServiceTest . java 
 + + + b / test / unit / org / apache / cassandra / service / AntiEntropyServiceTest . java 
 @ @ - 45 , 19 + 45 , 21 @ @ import static org . junit . Assert . * ; 
 
 public class AntiEntropyServiceTest extends CleanupHelper 
 { 
 - public static InetAddress LOCAL = FBUtilities . getLocalAddress ( ) ; 
 - 
 / / table and column family to test against 
 public AntiEntropyService aes ; 
 
 public static String tablename ; 
 public static String cfname ; 
 - public static InetAddress REMOTE ; 
 + public static InetAddress LOCAL , REMOTE ; 
 + 
 + private static boolean initialized ; 
 
 - static 
 + @ Before 
 + public void prepare ( ) throws Exception 
 { 
 - try 
 + if ( ! initialized ) 
 { 
 + LOCAL = FBUtilities . getLocalAddress ( ) ; 
 / / bump the replication factor so that local overlaps with REMOTE below 
 DatabaseDescriptorTest . setReplicationFactor ( 2 ) ; 
 
 @ @ - 71 , 16 + 73 , 8 @ @ public class AntiEntropyServiceTest extends CleanupHelper 
 
 tablename = DatabaseDescriptor . getTables ( ) . get ( 0 ) ; 
 cfname = Table . open ( tablename ) . getColumnFamilies ( ) . iterator ( ) . next ( ) ; 
 + initialized = true ; 
 } 
 - catch ( Exception e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - } 
 - 
 - @ Before 
 - public void prepare ( ) throws Exception 
 - { 
 aes = AntiEntropyService . instance ( ) ; 
 } 

