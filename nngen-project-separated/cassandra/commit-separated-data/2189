BLEU SCORE: 0.021721299903135396

TEST MSG: Throw EOFException if we run out of chunks in compressed file
GENERATED MSG: fix compressed stream sending extra chunk ; patch by yukim reviewed by mkjellman for CASSANDRA - 5105

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 304d9bf . . c8f7591 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 6 @ @ <nl> 2 . 0 . 10 <nl> + * Throw EOFException if we run out of chunks in compressed datafile <nl> + ( CASSANDRA - 7664 ) <nl> * Throw InvalidRequestException when queries contain relations on entire <nl> collection columns ( CASSANDRA - 7506 ) <nl> * Fix PRSI handling of CQL3 row markers for row cleanup ( CASSANDRA - 7787 ) <nl> diff - - git a / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java b / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java <nl> index 698c2fe . . ef019c2 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java <nl> + + + b / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java <nl> @ @ - 58 , 6 + 58 , 8 @ @ public class CompressedInputStream extends InputStream <nl> / / raw checksum bytes <nl> private final byte [ ] checksumBytes = new byte [ 4 ] ; <nl> <nl> + private static final byte [ ] POISON _ PILL = new byte [ 0 ] ; <nl> + <nl> private long totalCompressedBytesRead ; <nl> private final boolean hasPostCompressionAdlerChecksums ; <nl> <nl> @ @ - 83 , 7 + 85 , 10 @ @ public class CompressedInputStream extends InputStream <nl> { <nl> try <nl> { <nl> - decompress ( dataBuffer . take ( ) ) ; <nl> + byte [ ] compressedWithCRC = dataBuffer . take ( ) ; <nl> + if ( compressedWithCRC = = POISON _ PILL ) <nl> + throw new EOFException ( " No chunk available " ) ; <nl> + decompress ( compressedWithCRC ) ; <nl> } <nl> catch ( InterruptedException e ) <nl> { <nl> @ @ - 162 , 7 + 167 , 15 @ @ public class CompressedInputStream extends InputStream <nl> <nl> int bufferRead = 0 ; <nl> while ( bufferRead < readLength ) <nl> - bufferRead + = source . read ( compressedWithCRC , bufferRead , readLength - bufferRead ) ; <nl> + { <nl> + int r = source . read ( compressedWithCRC , bufferRead , readLength - bufferRead ) ; <nl> + if ( r < 0 ) <nl> + { <nl> + dataBuffer . put ( POISON _ PILL ) ; <nl> + return ; / / throw exception where we consume dataBuffer <nl> + } <nl> + bufferRead + = r ; <nl> + } <nl> dataBuffer . put ( compressedWithCRC ) ; <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / streaming / compress / CompressedInputStreamTest . java b / test / unit / org / apache / cassandra / streaming / compress / CompressedInputStreamTest . java <nl> index 027c84c . . 532b506 100644 <nl> - - - a / test / unit / org / apache / cassandra / streaming / compress / CompressedInputStreamTest . java <nl> + + + b / test / unit / org / apache / cassandra / streaming / compress / CompressedInputStreamTest . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . streaming . compress ; <nl> <nl> import java . io . ByteArrayInputStream ; <nl> import java . io . DataInputStream ; <nl> + import java . io . EOFException ; <nl> import java . io . File ; <nl> import java . io . RandomAccessFile ; <nl> import java . util . * ; <nl> @ @ - 42 , 18 + 43 , 23 @ @ public class CompressedInputStreamTest <nl> @ Test <nl> public void testCompressedRead ( ) throws Exception <nl> { <nl> - testCompressedReadWith ( new long [ ] { 0L } ) ; <nl> - testCompressedReadWith ( new long [ ] { 1L } ) ; <nl> - testCompressedReadWith ( new long [ ] { 100L } ) ; <nl> + testCompressedReadWith ( new long [ ] { 0L } , false ) ; <nl> + testCompressedReadWith ( new long [ ] { 1L } , false ) ; <nl> + testCompressedReadWith ( new long [ ] { 100L } , false ) ; <nl> <nl> - testCompressedReadWith ( new long [ ] { 1L , 122L , 123L , 124L , 456L } ) ; <nl> + testCompressedReadWith ( new long [ ] { 1L , 122L , 123L , 124L , 456L } , false ) ; <nl> } <nl> <nl> + @ Test ( expected = EOFException . class ) <nl> + public void testTruncatedRead ( ) throws Exception <nl> + { <nl> + testCompressedReadWith ( new long [ ] { 1L , 122L , 123L , 124L , 456L } , true ) ; <nl> + } <nl> / * * <nl> * @ param valuesToCheck array of longs of range ( 0 - 999 ) <nl> * @ throws Exception <nl> * / <nl> - private void testCompressedReadWith ( long [ ] valuesToCheck ) throws Exception <nl> + private void testCompressedReadWith ( long [ ] valuesToCheck , boolean testTruncate ) throws Exception <nl> { <nl> assert valuesToCheck ! = null & & valuesToCheck . length > 0 ; <nl> <nl> @ @ - 95 , 6 + 101 , 13 @ @ public class CompressedInputStreamTest <nl> } <nl> f . close ( ) ; <nl> <nl> + if ( testTruncate ) <nl> + { <nl> + byte [ ] actuallyRead = new byte [ 50 ] ; <nl> + System . arraycopy ( toRead , 0 , actuallyRead , 0 , 50 ) ; <nl> + toRead = actuallyRead ; <nl> + } <nl> + <nl> / / read buffer using CompressedInputStream <nl> CompressionInfo info = new CompressionInfo ( chunks , param ) ; <nl> CompressedInputStream input = new CompressedInputStream ( new ByteArrayInputStream ( toRead ) , info , true ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> index 5e01733 . . fab087e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> @ @ - 58 , 6 + 58 , 7 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy <nl> cfs . setCompactionThresholds ( cfs . metadata . getMinCompactionThreshold ( ) , cfs . metadata . getMaxCompactionThreshold ( ) ) ; <nl> } <nl> <nl> + / / synchronized so that multiple callers as in CompactionManager . submitBackground will compute different candidates <nl> public synchronized AbstractCompactionTask getNextBackgroundTask ( final int gcBefore ) <nl> { <nl> / / make local copies so they can ' t be changed out from under us mid - method

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 304d9bf . . c8f7591 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 6 @ @ 
 2 . 0 . 10 
 + * Throw EOFException if we run out of chunks in compressed datafile 
 + ( CASSANDRA - 7664 ) 
 * Throw InvalidRequestException when queries contain relations on entire 
 collection columns ( CASSANDRA - 7506 ) 
 * Fix PRSI handling of CQL3 row markers for row cleanup ( CASSANDRA - 7787 ) 
 diff - - git a / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java b / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java 
 index 698c2fe . . ef019c2 100644 
 - - - a / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java 
 + + + b / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java 
 @ @ - 58 , 6 + 58 , 8 @ @ public class CompressedInputStream extends InputStream 
 / / raw checksum bytes 
 private final byte [ ] checksumBytes = new byte [ 4 ] ; 
 
 + private static final byte [ ] POISON _ PILL = new byte [ 0 ] ; 
 + 
 private long totalCompressedBytesRead ; 
 private final boolean hasPostCompressionAdlerChecksums ; 
 
 @ @ - 83 , 7 + 85 , 10 @ @ public class CompressedInputStream extends InputStream 
 { 
 try 
 { 
 - decompress ( dataBuffer . take ( ) ) ; 
 + byte [ ] compressedWithCRC = dataBuffer . take ( ) ; 
 + if ( compressedWithCRC = = POISON _ PILL ) 
 + throw new EOFException ( " No chunk available " ) ; 
 + decompress ( compressedWithCRC ) ; 
 } 
 catch ( InterruptedException e ) 
 { 
 @ @ - 162 , 7 + 167 , 15 @ @ public class CompressedInputStream extends InputStream 
 
 int bufferRead = 0 ; 
 while ( bufferRead < readLength ) 
 - bufferRead + = source . read ( compressedWithCRC , bufferRead , readLength - bufferRead ) ; 
 + { 
 + int r = source . read ( compressedWithCRC , bufferRead , readLength - bufferRead ) ; 
 + if ( r < 0 ) 
 + { 
 + dataBuffer . put ( POISON _ PILL ) ; 
 + return ; / / throw exception where we consume dataBuffer 
 + } 
 + bufferRead + = r ; 
 + } 
 dataBuffer . put ( compressedWithCRC ) ; 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / streaming / compress / CompressedInputStreamTest . java b / test / unit / org / apache / cassandra / streaming / compress / CompressedInputStreamTest . java 
 index 027c84c . . 532b506 100644 
 - - - a / test / unit / org / apache / cassandra / streaming / compress / CompressedInputStreamTest . java 
 + + + b / test / unit / org / apache / cassandra / streaming / compress / CompressedInputStreamTest . java 
 @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . streaming . compress ; 
 
 import java . io . ByteArrayInputStream ; 
 import java . io . DataInputStream ; 
 + import java . io . EOFException ; 
 import java . io . File ; 
 import java . io . RandomAccessFile ; 
 import java . util . * ; 
 @ @ - 42 , 18 + 43 , 23 @ @ public class CompressedInputStreamTest 
 @ Test 
 public void testCompressedRead ( ) throws Exception 
 { 
 - testCompressedReadWith ( new long [ ] { 0L } ) ; 
 - testCompressedReadWith ( new long [ ] { 1L } ) ; 
 - testCompressedReadWith ( new long [ ] { 100L } ) ; 
 + testCompressedReadWith ( new long [ ] { 0L } , false ) ; 
 + testCompressedReadWith ( new long [ ] { 1L } , false ) ; 
 + testCompressedReadWith ( new long [ ] { 100L } , false ) ; 
 
 - testCompressedReadWith ( new long [ ] { 1L , 122L , 123L , 124L , 456L } ) ; 
 + testCompressedReadWith ( new long [ ] { 1L , 122L , 123L , 124L , 456L } , false ) ; 
 } 
 
 + @ Test ( expected = EOFException . class ) 
 + public void testTruncatedRead ( ) throws Exception 
 + { 
 + testCompressedReadWith ( new long [ ] { 1L , 122L , 123L , 124L , 456L } , true ) ; 
 + } 
 / * * 
 * @ param valuesToCheck array of longs of range ( 0 - 999 ) 
 * @ throws Exception 
 * / 
 - private void testCompressedReadWith ( long [ ] valuesToCheck ) throws Exception 
 + private void testCompressedReadWith ( long [ ] valuesToCheck , boolean testTruncate ) throws Exception 
 { 
 assert valuesToCheck ! = null & & valuesToCheck . length > 0 ; 
 
 @ @ - 95 , 6 + 101 , 13 @ @ public class CompressedInputStreamTest 
 } 
 f . close ( ) ; 
 
 + if ( testTruncate ) 
 + { 
 + byte [ ] actuallyRead = new byte [ 50 ] ; 
 + System . arraycopy ( toRead , 0 , actuallyRead , 0 , 50 ) ; 
 + toRead = actuallyRead ; 
 + } 
 + 
 / / read buffer using CompressedInputStream 
 CompressionInfo info = new CompressionInfo ( chunks , param ) ; 
 CompressedInputStream input = new CompressedInputStream ( new ByteArrayInputStream ( toRead ) , info , true ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 index 5e01733 . . fab087e 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 @ @ - 58 , 6 + 58 , 7 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy 
 cfs . setCompactionThresholds ( cfs . metadata . getMinCompactionThreshold ( ) , cfs . metadata . getMaxCompactionThreshold ( ) ) ; 
 } 
 
 + / / synchronized so that multiple callers as in CompactionManager . submitBackground will compute different candidates 
 public synchronized AbstractCompactionTask getNextBackgroundTask ( final int gcBefore ) 
 { 
 / / make local copies so they can ' t be changed out from under us mid - method
