BLEU SCORE: 0.04996872151825359

TEST MSG: Fix column name serialization for cassandra - stress / stressd
GENERATED MSG: Add query - by - column mode to stress . java

TEST DIFF (one line): diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsColumn . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsColumn . java <nl> index 04c2a47 . . 4b4e0b0 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsColumn . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsColumn . java <nl> @ @ - 21 , 7 + 21 , 10 @ @ package org . apache . cassandra . stress . settings ; <nl> * / <nl> <nl> <nl> + import java . io . IOException ; <nl> import java . io . Serializable ; <nl> + import java . io . ObjectInputStream ; <nl> + import java . io . ObjectOutputStream ; <nl> import java . nio . ByteBuffer ; <nl> import java . nio . charset . CharacterCodingException ; <nl> import java . util . ArrayList ; <nl> @ @ - 41 , 7 + 44 , 7 @ @ public class SettingsColumn implements Serializable <nl> { <nl> <nl> public final int maxColumnsPerKey ; <nl> - public transient final List < ByteBuffer > names ; <nl> + public transient List < ByteBuffer > names ; <nl> public final List < String > namestrs ; <nl> public final String comparator ; <nl> public final boolean variableColumnCount ; <nl> @ @ - 130 , 7 + 133 , 6 @ @ public class SettingsColumn implements Serializable <nl> { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> - <nl> this . names = Arrays . asList ( names ) ; <nl> this . namestrs = Arrays . asList ( namestrs ) ; <nl> } <nl> @ @ - 205 , 4 + 207 , 29 @ @ public class SettingsColumn implements Serializable <nl> } <nl> } ; <nl> } <nl> + <nl> + / * Custom serializaiton invoked here to make legacy thrift based table creation work with StressD . This code requires <nl> + * the names attribute to be populated . Since the names attribute is set as a List [ ByteBuffer ] we switch it <nl> + * to an array on the way out and back to a buffer when it ' s being read in . <nl> + * / <nl> + <nl> + private void writeObject ( ObjectOutputStream oos ) throws IOException <nl> + { <nl> + oos . defaultWriteObject ( ) ; <nl> + ArrayList < byte [ ] > namesBytes = new ArrayList < > ( ) ; <nl> + for ( ByteBuffer buffer : this . names ) <nl> + namesBytes . add ( ByteBufferUtil . getArray ( buffer ) ) ; <nl> + oos . writeObject ( namesBytes ) ; <nl> + } <nl> + <nl> + private void readObject ( ObjectInputStream ois ) throws ClassNotFoundException , IOException <nl> + { <nl> + ois . defaultReadObject ( ) ; <nl> + List < ByteBuffer > namesBuffer = new ArrayList < > ( ) ; <nl> + List < byte [ ] > namesBytes = ( List < byte [ ] > ) ois . readObject ( ) ; <nl> + for ( byte [ ] bytes : namesBytes ) <nl> + namesBuffer . add ( ByteBuffer . wrap ( bytes ) ) ; <nl> + this . names = new ArrayList < > ( namesBuffer ) ; <nl> + } <nl> + <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> index e2b0a8d . . 14e5991 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> @ @ - 739 , 11 + 739 , 19 @ @ public class NodeCmd <nl> <nl> private static void handleSnapshots ( NodeCommand nc , String tag , String [ ] cmdArgs , NodeProbe probe ) throws InterruptedException , IOException <nl> { <nl> - int length = cmdArgs . length > 1 ? cmdArgs . length - 1 : 0 ; <nl> - String [ ] keyspaces = new String [ length ] ; <nl> - for ( int i = 0 ; i < keyspaces . length ; i + + ) <nl> - keyspaces [ i ] = cmdArgs [ i + 1 ] ; <nl> - <nl> + String [ ] keyspaces = Arrays . copyOfRange ( cmdArgs , 0 , cmdArgs . length ) ; <nl> + System . out . print ( " Requested snapshot for : " ) ; <nl> + if ( keyspaces . length > 0 ) <nl> + { <nl> + for ( int i = 0 ; i < keyspaces . length ; i + + ) <nl> + System . out . print ( keyspaces [ i ] + " " ) ; <nl> + } <nl> + else <nl> + { <nl> + System . out . print ( " all keyspaces " ) ; <nl> + } <nl> + System . out . println ( ) ; <nl> + <nl> switch ( nc ) <nl> { <nl> case SNAPSHOT :

TEST DIFF:
diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsColumn . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsColumn . java 
 index 04c2a47 . . 4b4e0b0 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsColumn . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsColumn . java 
 @ @ - 21 , 7 + 21 , 10 @ @ package org . apache . cassandra . stress . settings ; 
 * / 
 
 
 + import java . io . IOException ; 
 import java . io . Serializable ; 
 + import java . io . ObjectInputStream ; 
 + import java . io . ObjectOutputStream ; 
 import java . nio . ByteBuffer ; 
 import java . nio . charset . CharacterCodingException ; 
 import java . util . ArrayList ; 
 @ @ - 41 , 7 + 44 , 7 @ @ public class SettingsColumn implements Serializable 
 { 
 
 public final int maxColumnsPerKey ; 
 - public transient final List < ByteBuffer > names ; 
 + public transient List < ByteBuffer > names ; 
 public final List < String > namestrs ; 
 public final String comparator ; 
 public final boolean variableColumnCount ; 
 @ @ - 130 , 7 + 133 , 6 @ @ public class SettingsColumn implements Serializable 
 { 
 throw new RuntimeException ( e ) ; 
 } 
 - 
 this . names = Arrays . asList ( names ) ; 
 this . namestrs = Arrays . asList ( namestrs ) ; 
 } 
 @ @ - 205 , 4 + 207 , 29 @ @ public class SettingsColumn implements Serializable 
 } 
 } ; 
 } 
 + 
 + / * Custom serializaiton invoked here to make legacy thrift based table creation work with StressD . This code requires 
 + * the names attribute to be populated . Since the names attribute is set as a List [ ByteBuffer ] we switch it 
 + * to an array on the way out and back to a buffer when it ' s being read in . 
 + * / 
 + 
 + private void writeObject ( ObjectOutputStream oos ) throws IOException 
 + { 
 + oos . defaultWriteObject ( ) ; 
 + ArrayList < byte [ ] > namesBytes = new ArrayList < > ( ) ; 
 + for ( ByteBuffer buffer : this . names ) 
 + namesBytes . add ( ByteBufferUtil . getArray ( buffer ) ) ; 
 + oos . writeObject ( namesBytes ) ; 
 + } 
 + 
 + private void readObject ( ObjectInputStream ois ) throws ClassNotFoundException , IOException 
 + { 
 + ois . defaultReadObject ( ) ; 
 + List < ByteBuffer > namesBuffer = new ArrayList < > ( ) ; 
 + List < byte [ ] > namesBytes = ( List < byte [ ] > ) ois . readObject ( ) ; 
 + for ( byte [ ] bytes : namesBytes ) 
 + namesBuffer . add ( ByteBuffer . wrap ( bytes ) ) ; 
 + this . names = new ArrayList < > ( namesBuffer ) ; 
 + } 
 + 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 index e2b0a8d . . 14e5991 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 @ @ - 739 , 11 + 739 , 19 @ @ public class NodeCmd 
 
 private static void handleSnapshots ( NodeCommand nc , String tag , String [ ] cmdArgs , NodeProbe probe ) throws InterruptedException , IOException 
 { 
 - int length = cmdArgs . length > 1 ? cmdArgs . length - 1 : 0 ; 
 - String [ ] keyspaces = new String [ length ] ; 
 - for ( int i = 0 ; i < keyspaces . length ; i + + ) 
 - keyspaces [ i ] = cmdArgs [ i + 1 ] ; 
 - 
 + String [ ] keyspaces = Arrays . copyOfRange ( cmdArgs , 0 , cmdArgs . length ) ; 
 + System . out . print ( " Requested snapshot for : " ) ; 
 + if ( keyspaces . length > 0 ) 
 + { 
 + for ( int i = 0 ; i < keyspaces . length ; i + + ) 
 + System . out . print ( keyspaces [ i ] + " " ) ; 
 + } 
 + else 
 + { 
 + System . out . print ( " all keyspaces " ) ; 
 + } 
 + System . out . println ( ) ; 
 + 
 switch ( nc ) 
 { 
 case SNAPSHOT :
