BLEU SCORE: 0.008239830525563232

TEST MSG: Fix reading 2 . 1 sstable post - 9705 ( CASSANDR - 9705 followup )
GENERATED MSG: avoid optimization of not checking older memtable and SSTables if we find _ an _ answer early on ; it causes bugs

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / Keyspace . java b / src / java / org / apache / cassandra / db / Keyspace . java <nl> index 9d3b178 . . 07f3e6f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Keyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / Keyspace . java <nl> @ @ - 395 , 7 + 395 , 6 @ @ public class Keyspace <nl> replayPosition = CommitLog . instance . add ( mutation ) ; <nl> } <nl> <nl> - DecoratedKey key = mutation . key ( ) ; <nl> for ( PartitionUpdate upd : mutation . getPartitionUpdates ( ) ) <nl> { <nl> ColumnFamilyStore cfs = columnFamilyStores . get ( upd . metadata ( ) . cfId ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / LegacyLayout . java b / src / java / org / apache / cassandra / db / LegacyLayout . java <nl> index 8242ab7 . . dc13700 100644 <nl> - - - a / src / java / org / apache / cassandra / db / LegacyLayout . java <nl> + + + b / src / java / org / apache / cassandra / db / LegacyLayout . java <nl> @ @ - 140 , 7 + 140 , 16 @ @ public abstract class LegacyLayout <nl> <nl> ByteBuffer column = metadata . isCompound ( ) ? CompositeType . extractComponent ( cellname , metadata . comparator . size ( ) ) : cellname ; <nl> if ( column = = null ) <nl> + { <nl> + / / 2ndary indexes tables used to be compound but dense , but we ' ve transformed then into regular tables <nl> + / / ( non compact ones ) but with no regular column ( i . e . we only care about the clustering ) . So we ' ll get here <nl> + / / in that case , and what we want to return is basically a row marker . <nl> + if ( metadata . partitionColumns ( ) . isEmpty ( ) ) <nl> + return new LegacyCellName ( clustering , null , null ) ; <nl> + <nl> + / / Otherwise , we shouldn ' t get there <nl> throw new IllegalArgumentException ( " No column name component found in cell name " ) ; <nl> + } <nl> <nl> / / Row marker , this is ok <nl> if ( ! column . hasRemaining ( ) ) <nl> @ @ - 345 , 6 + 354 , 7 @ @ public abstract class LegacyLayout <nl> columnsToFetch . add ( column . name . bytes ) ; <nl> <nl> Row . Builder builder = ArrayBackedRow . unsortedBuilder ( statics , FBUtilities . nowInSeconds ( ) ) ; <nl> + builder . newRow ( Clustering . STATIC _ CLUSTERING ) ; <nl> <nl> boolean foundOne = false ; <nl> LegacyAtom atom ; <nl> @ @ - 416 , 7 + 426 , 7 @ @ public abstract class LegacyLayout <nl> } <nl> } ; <nl> List < Iterator < LegacyAtom > > iterators = Arrays . asList ( asLegacyAtomIterator ( cells ) , asLegacyAtomIterator ( delInfo . inRowRangeTombstones ( ) ) ) ; <nl> - Iterator < LegacyAtom > merged = MergeIterator . get ( iterators , grouper . metadata . comparator , reducer ) ; <nl> + Iterator < LegacyAtom > merged = MergeIterator . get ( iterators , legacyAtomComparator ( grouper . metadata ) , reducer ) ; <nl> final PeekingIterator < LegacyAtom > atoms = Iterators . peekingIterator ( merged ) ; <nl> <nl> return new AbstractIterator < Row > ( ) <nl> @ @ - 602 , 6 + 612 , 74 @ @ public abstract class LegacyLayout <nl> } ; <nl> } <nl> <nl> + private static Comparator < LegacyAtom > legacyAtomComparator ( CFMetaData metadata ) <nl> + { <nl> + return ( o1 , o2 ) - > <nl> + { <nl> + / / First we want to compare by clustering , but we have to be careful with range tombstone , because <nl> + / / we can have collection deletion and we want those to sort properly just before the column they <nl> + / / delete , not before the whole row . <nl> + ClusteringPrefix c1 = o1 . clustering ( ) ; <nl> + ClusteringPrefix c2 = o2 . clustering ( ) ; <nl> + <nl> + int clusteringComparison ; <nl> + if ( c1 . size ( ) ! = c2 . size ( ) | | ( o1 . isCell ( ) = = o2 . isCell ( ) ) ) <nl> + { <nl> + clusteringComparison = metadata . comparator . compare ( c1 , c2 ) ; <nl> + } <nl> + else <nl> + { <nl> + / / one is a cell and one is a range tombstone , and both have the same prefix size ( that is , the <nl> + / / range tombstone is either a row deletion or a collection deletion ) . <nl> + LegacyRangeTombstone rt = o1 . isCell ( ) ? o2 . asRangeTombstone ( ) : o1 . asRangeTombstone ( ) ; <nl> + clusteringComparison = rt . isCollectionTombstone ( ) <nl> + ? 0 <nl> + : metadata . comparator . compare ( c1 , c2 ) ; <nl> + } <nl> + <nl> + / / Note that if both are range tombstones and have the same clustering , then they are equal . <nl> + if ( clusteringComparison ! = 0 ) <nl> + return clusteringComparison ; <nl> + <nl> + if ( o1 . isCell ( ) ) <nl> + { <nl> + LegacyCell cell1 = o1 . asCell ( ) ; <nl> + if ( o2 . isCell ( ) ) <nl> + { <nl> + LegacyCell cell2 = o2 . asCell ( ) ; <nl> + / / Check for row marker cells <nl> + if ( cell1 . name . column = = null ) <nl> + return cell2 . name . column = = null ? 0 : - 1 ; <nl> + return cell2 . name . column = = null ? 1 : cell1 . name . column . compareTo ( cell2 . name . column ) ; <nl> + } <nl> + <nl> + LegacyRangeTombstone rt2 = o2 . asRangeTombstone ( ) ; <nl> + assert rt2 . isCollectionTombstone ( ) ; / / otherwise , we shouldn ' t have got a clustering equality <nl> + if ( cell1 . name . column = = null ) <nl> + return - 1 ; <nl> + int cmp = cell1 . name . column . compareTo ( rt2 . start . collectionName ) ; <nl> + / / If both are for the same column , then the RT should come first <nl> + return cmp = = 0 ? 1 : cmp ; <nl> + } <nl> + else <nl> + { <nl> + assert o2 . isCell ( ) ; <nl> + LegacyCell cell2 = o2 . asCell ( ) ; <nl> + <nl> + LegacyRangeTombstone rt1 = o1 . asRangeTombstone ( ) ; <nl> + assert rt1 . isCollectionTombstone ( ) ; / / otherwise , we shouldn ' t have got a clustering equality <nl> + <nl> + if ( cell2 . name . column = = null ) <nl> + return 1 ; <nl> + <nl> + int cmp = rt1 . start . collectionName . compareTo ( cell2 . name . column ) ; <nl> + / / If both are for the same column , then the RT should come first <nl> + return cmp = = 0 ? - 1 : cmp ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + <nl> public static LegacyAtom readLegacyAtom ( CFMetaData metadata , DataInputPlus in , boolean readAllAsDynamic ) throws IOException <nl> { <nl> while ( true ) <nl> @ @ - 768 , 14 + 846 , 10 @ @ public abstract class LegacyLayout <nl> <nl> public boolean addCell ( LegacyCell cell ) <nl> { <nl> - if ( isStatic ) <nl> - { <nl> - if ( cell . name . clustering ! = Clustering . STATIC _ CLUSTERING ) <nl> - return false ; <nl> - } <nl> - else if ( clustering = = null ) <nl> + if ( clustering = = null ) <nl> { <nl> clustering = cell . name . clustering ; <nl> + assert ! isStatic | | clustering = = Clustering . STATIC _ CLUSTERING ; <nl> builder . newRow ( clustering ) ; <nl> } <nl> else if ( ! clustering . equals ( cell . name . clustering ) ) <nl> @ @ - 941 , 7 + 1015 , 7 @ @ public abstract class LegacyLayout <nl> } <nl> } <nl> <nl> - public interface LegacyAtom extends Clusterable <nl> + public interface LegacyAtom <nl> { <nl> public boolean isCell ( ) ; <nl> <nl> @ @ - 1259 , 7 + 1333 , 7 @ @ public abstract class LegacyLayout <nl> while ( iter . hasNext ( ) ) <nl> { <nl> LegacyRangeTombstone tombstone = iter . next ( ) ; <nl> - if ( metadata . comparator . compare ( atom , tombstone . stop . bound ) > = 0 ) <nl> + if ( metadata . comparator . compare ( atom . clustering ( ) , tombstone . stop . bound ) > = 0 ) <nl> iter . remove ( ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / UnfilteredDeserializer . java b / src / java / org / apache / cassandra / db / UnfilteredDeserializer . java <nl> index b3709d2 . . 36a372f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / UnfilteredDeserializer . java <nl> + + + b / src / java / org / apache / cassandra / db / UnfilteredDeserializer . java <nl> @ @ - 340 , 7 + 340 , 17 @ @ public abstract class UnfilteredDeserializer <nl> public int compareNextTo ( Slice . Bound bound ) throws IOException <nl> { <nl> checkReady ( ) ; <nl> - return metadata . comparator . compare ( nextAtom , bound ) ; <nl> + int cmp = metadata . comparator . compare ( nextAtom . clustering ( ) , bound ) ; <nl> + if ( cmp ! = 0 | | nextAtom . isCell ( ) | | ! nextIsRow ( ) ) <nl> + return cmp ; <nl> + <nl> + / / Comparing the clustering of the LegacyAtom to the bound work most of the time . There is the case <nl> + / / of LegacyRangeTombstone that are either a collectionTombstone or a rowDeletion . In those case , their <nl> + / / clustering will be the inclusive start of the row they are a tombstone for , which can be equal to <nl> + / / the slice bound . But we don ' t want to return equality because the LegacyTombstone should stand for <nl> + / / it ' s row and should sort accordingly . This matter particularly because SSTableIterator will skip <nl> + / / equal results for the start bound ( see SSTableIterator . handlePreSliceData for details ) . <nl> + return bound . isStart ( ) ? 1 : - 1 ; <nl> } <nl> <nl> public boolean nextIsRow ( ) throws IOException <nl> diff - - git a / src / java / org / apache / cassandra / db / rows / ArrayBackedRow . java b / src / java / org / apache / cassandra / db / rows / ArrayBackedRow . java <nl> index 016b4fa . . 12b23e1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / rows / ArrayBackedRow . java <nl> + + + b / src / java / org / apache / cassandra / db / rows / ArrayBackedRow . java <nl> @ @ - 510 , 7 + 510 , 7 @ @ public class ArrayBackedRow extends AbstractRow <nl> <nl> public void newRow ( Clustering clustering ) <nl> { <nl> - assert cells . isEmpty ( ) ; / / Ensures we ' ve properly called build ( ) if we ' ve use this builder before <nl> + assert this . clustering = = null ; / / Ensures we ' ve properly called build ( ) if we ' ve use this builder before <nl> this . clustering = clustering ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java b / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java <nl> index 50644bb . . f554ffb 100644 <nl> - - - a / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java <nl> + + + b / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java <nl> @ @ - 457 , 7 + 457 , 10 @ @ public final class LegacySchemaMigrator <nl> kind = ColumnDefinition . Kind . STATIC ; <nl> <nl> Integer componentIndex = null ; <nl> - if ( row . has ( " component _ index " ) ) <nl> + / / Note that the component _ index is not useful for non - primary key parts ( it never really in fact since there is <nl> + / / no particular ordering of non - PK columns , we only used to use it as a simplification but that ' s not needed <nl> + / / anymore ) <nl> + if ( kind . isPrimaryKeyKind ( ) & & row . has ( " component _ index " ) ) <nl> componentIndex = row . getInt ( " component _ index " ) ; <nl> <nl> / / Note : we save the column name as string , but we should not assume that it is an UTF8 name , we
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / Column . java b / src / java / org / apache / cassandra / db / Column . java <nl> index c025dde . . 2734375 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Column . java <nl> + + + b / src / java / org / apache / cassandra / db / Column . java <nl> @ @ - 276 , 18 + 276 , 6 @ @ class ColumnSerializer implements ICompactSerializer2 < IColumn > <nl> if ( name . equals ( columnName ) ) <nl> { <nl> column = defreeze ( dis , name ) ; <nl> - if ( filter instanceof IdentityFilter ) <nl> - { <nl> - 	 / * <nl> - 	 * If this is being called with identity filter <nl> - 	 * since a column name is passed in we know <nl> - 	 * that this is a final call <nl> - 	 * Hence if the column is found set the filter to done <nl> - 	 * so that we do not look for the column in further files <nl> - 	 * / <nl> - 	 IdentityFilter f = ( IdentityFilter ) filter ; <nl> - 	 f . setDone ( ) ; <nl> - } <nl> } <nl> else <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 950b133 . . ca94586 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 532 , 10 + 532 , 6 @ @ public final class ColumnFamily <nl> if ( column ! = null ) <nl> { <nl> cf . addColumn ( column ) ; <nl> - if ( filter . isDone ( ) ) <nl> - { <nl> - break ; <nl> - } <nl> } <nl> } <nl> return cf ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index cb99e7e . . 111a060 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 522 , 17 + 522 , 12 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> List < ColumnFamily > columnFamilies = new ArrayList < ColumnFamily > ( ) ; <nl> / * Get the ColumnFamily from Memtable * / <nl> getColumnFamilyFromCurrentMemtable ( key , columnFamilyColumn , filter , columnFamilies ) ; <nl> - if ( columnFamilies . size ( ) = = 0 | | ! filter . isDone ( ) ) <nl> - { <nl> - / * Check if MemtableManager has any historical information * / <nl> - getUnflushedColumnFamily ( key , columnFamily _ , columnFamilyColumn , filter , columnFamilies ) ; <nl> - } <nl> - if ( columnFamilies . size ( ) = = 0 | | ! filter . isDone ( ) ) <nl> - { <nl> - long start = System . currentTimeMillis ( ) ; <nl> - getColumnFamilyFromDisk ( key , columnFamilyColumn , columnFamilies , filter ) ; <nl> - diskReadStats _ . add ( System . currentTimeMillis ( ) - start ) ; <nl> - } <nl> + / * Check if MemtableManager has any historical information * / <nl> + getUnflushedColumnFamily ( key , columnFamily _ , columnFamilyColumn , filter , columnFamilies ) ; <nl> + long start = System . currentTimeMillis ( ) ; <nl> + getColumnFamilyFromDisk ( key , columnFamilyColumn , columnFamilies , filter ) ; <nl> + diskReadStats _ . add ( System . currentTimeMillis ( ) - start ) ; <nl> + <nl> return columnFamilies ; <nl> } <nl> <nl> @ @ - 574 , 10 + 569 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> if ( columnFamily ! = null ) <nl> { <nl> columnFamilies . add ( columnFamily ) ; <nl> - if ( filter . isDone ( ) ) <nl> - { <nl> - break ; <nl> - } <nl> } <nl> } <nl> } <nl> @ @ - 1417 , 8 + 1408 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> if ( columnFamily ! = null ) <nl> { <nl> columnFamilies . add ( columnFamily ) ; <nl> - if ( filter . isDone ( ) ) <nl> - break ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / IFilter . java b / src / java / org / apache / cassandra / db / IFilter . java <nl> index c9fc38d . . f2a426e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / IFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / IFilter . java <nl> @ @ - 1 , 21 + 1 , 21 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , <nl> - * software distributed under the License is distributed on an <nl> - * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> - * KIND , either express or implied . See the License for the <nl> - * specific language governing permissions and limitations <nl> - * under the License . <nl> - * / <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> package org . apache . cassandra . db ; <nl> <nl> import java . io . DataInputStream ; <nl> @ @ - 27 , 7 + 27 , 6 @ @ import org . apache . cassandra . io . SSTable ; <nl> <nl> public interface IFilter <nl> { <nl> - 	 public boolean isDone ( ) ; <nl> 	 public ColumnFamily filter ( String cfName , ColumnFamily cf ) ; <nl> public IColumn filter ( IColumn column , DataInputStream dis ) throws IOException ; <nl> public DataInputBuffer next ( String key , String cf , SSTable ssTable ) throws IOException ; <nl> diff - - git a / src / java / org / apache / cassandra / db / IdentityFilter . java b / src / java / org / apache / cassandra / db / IdentityFilter . java <nl> index 2656667 . . d534534 100644 <nl> - - - a / src / java / org / apache / cassandra / db / IdentityFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / IdentityFilter . java <nl> @ @ - 28 , 42 + 28 , 13 @ @ import org . apache . cassandra . io . SSTable ; <nl> <nl> public class IdentityFilter implements IFilter <nl> { <nl> - private boolean isDone _ = false ; <nl> - <nl> - 	 public boolean isDone ( ) <nl> - 	 { <nl> - 	 	 return isDone _ ; <nl> - 	 } <nl> - <nl> 	 public ColumnFamily filter ( String cfString , ColumnFamily columnFamily ) <nl> 	 { <nl> - 	 String [ ] values = RowMutation . getColumnAndColumnFamily ( cfString ) ; <nl> - 	 if ( columnFamily = = null ) <nl> - 	 	 return columnFamily ; <nl> - <nl> - 	 	 if ( values . length = = 2 & & ! columnFamily . isSuper ( ) ) <nl> - 	 	 { <nl> - 	 	 	 Collection < IColumn > columns = columnFamily . getAllColumns ( ) ; <nl> - 	 	 	 if ( columns . size ( ) > = 1 ) <nl> - 	 	 	 	 isDone _ = true ; <nl> - 	 	 } <nl> - 	 	 if ( values . length = = 3 & & columnFamily . isSuper ( ) ) <nl> - 	 	 { <nl> - 	 	 Collection < IColumn > columns = columnFamily . getAllColumns ( ) ; <nl> - 	 	 for ( IColumn column : columns ) <nl> - 	 	 { <nl> - 	 	 	 SuperColumn superColumn = ( SuperColumn ) column ; <nl> - 	 	 Collection < IColumn > subColumns = superColumn . getSubColumns ( ) ; <nl> - 	 	 if ( subColumns . size ( ) > = 1 ) <nl> - 	 	 	 isDone _ = true ; <nl> - 	 	 } <nl> - 	 	 } <nl> 	 	 return columnFamily ; <nl> 	 } <nl> <nl> 	 public IColumn filter ( IColumn column , DataInputStream dis ) throws IOException <nl> 	 { <nl> - 	 	 / / TODO Auto - generated method stub <nl> 	 	 return column ; <nl> 	 } <nl> <nl> @ @ - 71 , 18 + 42 , 4 @ @ public class IdentityFilter implements IFilter <nl> 	 { <nl> 	 	 return ssTable . next ( key , cf ) ; <nl> 	 } <nl> - <nl> - 	 public void setDone ( ) <nl> - 	 { <nl> - 	 	 isDone _ = true ; <nl> - 	 } <nl> - 	 / * * <nl> - 	 * @ param args <nl> - 	 * / <nl> - 	 public static void main ( String [ ] args ) <nl> - 	 { <nl> - 	 	 / / TODO Auto - generated method stub <nl> - <nl> - 	 } <nl> - <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / NamesFilter . java b / src / java / org / apache / cassandra / db / NamesFilter . java <nl> index 2966c6f . . 39126de 100644 <nl> - - - a / src / java / org / apache / cassandra / db / NamesFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / NamesFilter . java <nl> @ @ - 54 , 13 + 54 , 8 @ @ public class NamesFilter implements IFilter <nl> 	 	 	 { <nl> 	 	 if ( names _ . contains ( column . name ( ) ) ) <nl> 	 	 { <nl> - 	 	 names _ . remove ( column . name ( ) ) ; <nl> 	 	 	 	 	 filteredCf . addColumn ( column ) ; <nl> 	 	 } <nl> - 	 	 	 	 if ( isDone ( ) ) <nl> - 	 	 	 	 { <nl> - 	 	 	 	 	 return filteredCf ; <nl> - 	 	 	 	 } <nl> 	 	 	 } <nl> 	 	 } <nl> 	 	 else if ( values . length = = 2 & & columnFamily . isSuper ( ) ) <nl> @ @ - 76 , 13 + 71 , 8 @ @ public class NamesFilter implements IFilter <nl> 	 	 { <nl> 	 	 if ( names _ . contains ( subColumn . name ( ) ) ) <nl> 	 	 { <nl> - 	 	 names _ . remove ( subColumn . name ( ) ) ; <nl> 	 	 filteredSuperColumn . addColumn ( subColumn ) ; <nl> 	 	 } <nl> - 	 	 	 	 if ( isDone ( ) ) <nl> - 	 	 	 	 { <nl> - 	 	 	 	 	 return filteredCf ; <nl> - 	 	 	 	 } <nl> 	 	 	 } <nl> 	 	 } <nl> 	 	 } <nl> @ @ - 95 , 24 + 85 , 13 @ @ public class NamesFilter implements IFilter <nl> <nl> public IColumn filter ( IColumn column , DataInputStream dis ) throws IOException <nl> { <nl> - String columnName = column . name ( ) ; <nl> - if ( names _ . contains ( columnName ) ) <nl> - { <nl> - names _ . remove ( columnName ) ; <nl> - } <nl> - else <nl> + if ( ! names _ . contains ( column . name ( ) ) ) <nl> { <nl> column = null ; <nl> } <nl> - <nl> return column ; <nl> } <nl> <nl> - public boolean isDone ( ) <nl> - { <nl> - return names _ . isEmpty ( ) ; <nl> - } <nl> - <nl> public DataInputBuffer next ( String key , String cf , SSTable ssTable ) throws IOException <nl> { <nl> 	 return ssTable . next ( key , cf , names _ , null ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / RangeFilter . java b / src / java / org / apache / cassandra / db / RangeFilter . java <nl> index 54eae61 . . 4a21a60 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RangeFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / RangeFilter . java <nl> @ @ - 33 , 14 + 33 , 12 @ @ public class RangeFilter implements IFilter <nl> { <nl> private final String colMin _ ; <nl> private final String colMax _ ; <nl> - private boolean isDone _ ; <nl> int count _ ; <nl> <nl> RangeFilter ( String colMin , String colMax ) <nl> { <nl> colMin _ = colMin ; <nl> colMax _ = colMax ; <nl> - isDone _ = false ; <nl> count _ = - 1 ; <nl> } <nl> <nl> @ @ - 48 , 7 + 46 , 6 @ @ public class RangeFilter implements IFilter <nl> { <nl> colMin _ = colMin ; <nl> colMax _ = colMax ; <nl> - isDone _ = false ; <nl> count _ = count ; <nl> } <nl> <nl> @ @ - 57 , 28 + 54 , 19 @ @ public class RangeFilter implements IFilter <nl> if ( cf = = null ) <nl> return null ; <nl> <nl> - if ( count _ = = 0 ) <nl> - { <nl> - isDone _ = true ; <nl> - return null ; <nl> - } <nl> - <nl> ColumnFamily filteredColumnFamily = cf . cloneMeShallow ( ) ; <nl> <nl> Collection < IColumn > columns = cf . getAllColumns ( ) ; <nl> + int i = 0 ; <nl> for ( IColumn c : columns ) <nl> { <nl> + if ( ( count _ > = 0 ) & & ( i > = count _ ) ) <nl> + break ; <nl> if ( c . name ( ) . compareTo ( colMin _ ) > = 0 <nl> & & c . name ( ) . compareTo ( colMax _ ) < = 0 ) <nl> { <nl> filteredColumnFamily . addColumn ( c ) ; <nl> - if ( count _ > 0 ) <nl> - count _ - - ; <nl> - if ( count _ = = 0 ) <nl> - { <nl> - isDone _ = true ; <nl> - break ; <nl> - } <nl> + i + + ; <nl> } <nl> } <nl> return filteredColumnFamily ; <nl> @ @ - 87 , 26 + 75 , 15 @ @ public class RangeFilter implements IFilter <nl> public IColumn filter ( IColumn column , DataInputStream dis ) <nl> throws IOException <nl> { <nl> - if ( column = = null | | isDone _ ) <nl> + if ( column = = null ) <nl> return null ; <nl> <nl> if ( column . name ( ) . compareTo ( colMin _ ) > = 0 <nl> & & column . name ( ) . compareTo ( colMax _ ) < = 0 ) <nl> { <nl> - if ( count _ > 0 ) <nl> - count _ - - ; <nl> - if ( count _ = = 0 ) <nl> - isDone _ = true ; <nl> return column ; <nl> - } else <nl> - { <nl> - return null ; <nl> } <nl> - } <nl> - <nl> - public boolean isDone ( ) <nl> - { <nl> - return isDone _ ; <nl> + return null ; <nl> } <nl> <nl> public DataInputBuffer next ( String key , String cf , SSTable ssTable ) <nl> diff - - git a / src / java / org / apache / cassandra / db / SuperColumn . java b / src / java / org / apache / cassandra / db / SuperColumn . java <nl> index a30216f . . 6114caa 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SuperColumn . java <nl> + + + b / src / java / org / apache / cassandra / db / SuperColumn . java <nl> @ @ - 422 , 10 + 422 , 6 @ @ class SuperColumnSerializer implements ICompactSerializer2 < IColumn > <nl> if ( column ! = null ) <nl> { <nl> superColumn . addColumn ( column ) ; <nl> - if ( filter . isDone ( ) ) <nl> - { <nl> - break ; <nl> - } <nl> } <nl> } <nl> return superColumn ; <nl> diff - - git a / src / java / org / apache / cassandra / db / TimeFilter . java b / src / java / org / apache / cassandra / db / TimeFilter . java <nl> index 7e21f16 . . d9263d5 100644 <nl> - - - a / src / java / org / apache / cassandra / db / TimeFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / TimeFilter . java <nl> @ @ - 36 , 12 + 36 , 10 @ @ import org . apache . cassandra . io . SSTable ; <nl> class TimeFilter implements IFilter <nl> { <nl> private long timeLimit _ ; <nl> - private boolean isDone _ ; <nl> <nl> TimeFilter ( long timeLimit ) <nl> { <nl> timeLimit _ = timeLimit ; <nl> - isDone _ = false ; <nl> } <nl> <nl> public ColumnFamily filter ( String cf , ColumnFamily columnFamily ) <nl> @ @ - 54 , 23 + 52 , 17 @ @ class TimeFilter implements IFilter <nl> if ( values . length = = 1 & & ! columnFamily . isSuper ( ) ) <nl> { <nl> Collection < IColumn > columns = columnFamily . getAllColumns ( ) ; <nl> - int i = 0 ; <nl> for ( IColumn column : columns ) <nl> { <nl> if ( column . timestamp ( ) > = timeLimit _ ) <nl> { <nl> filteredCf . addColumn ( column ) ; <nl> - + + i ; <nl> } <nl> else <nl> { <nl> break ; <nl> } <nl> } <nl> - if ( i < columns . size ( ) ) <nl> - { <nl> - isDone _ = true ; <nl> - } <nl> } <nl> else if ( values . length = = 2 & & columnFamily . isSuper ( ) ) <nl> { <nl> @ @ - 87 , 23 + 79 , 17 @ @ class TimeFilter implements IFilter <nl> filteredSuperColumn . markForDeleteAt ( column . getLocalDeletionTime ( ) , column . getMarkedForDeleteAt ( ) ) ; <nl> filteredCf . addColumn ( filteredSuperColumn ) ; <nl> Collection < IColumn > subColumns = superColumn . getSubColumns ( ) ; <nl> - int i = 0 ; <nl> for ( IColumn subColumn : subColumns ) <nl> { <nl> if ( subColumn . timestamp ( ) > = timeLimit _ ) <nl> { <nl> filteredSuperColumn . addColumn ( subColumn ) ; <nl> - + + i ; <nl> } <nl> else <nl> { <nl> break ; <nl> } <nl> } <nl> - if ( i < filteredSuperColumn . getColumnCount ( ) ) <nl> - { <nl> - isDone _ = true ; <nl> - } <nl> } <nl> } <nl> else <nl> @ @ - 130 , 19 + 116 , 12 @ @ class TimeFilter implements IFilter <nl> dis . reset ( ) ; <nl> if ( timeStamp < timeLimit _ ) <nl> { <nl> - isDone _ = true ; <nl> return null ; <nl> } <nl> } <nl> return column ; <nl> } <nl> <nl> - <nl> - public boolean isDone ( ) <nl> - { <nl> - return isDone _ ; <nl> - } <nl> - <nl> public DataInputBuffer next ( String key , String cfName , SSTable ssTable ) throws IOException <nl> { <nl> return ssTable . next ( key , cfName , null , new IndexHelper . TimeRange ( timeLimit _ , Long . MAX _ VALUE ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / RangeFilterTest . java b / test / unit / org / apache / cassandra / db / RangeFilterTest . java <nl> index 78c2360 . . 081bbf3 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RangeFilterTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RangeFilterTest . java <nl> @ @ - 41 , 7 + 41 , 6 @ @ public class RangeFilterTest <nl> ColumnFamily filteredCf = f . filter ( cf . name ( ) , cf ) ; <nl> <nl> assertEquals ( filteredCf . getColumnCount ( ) , 3 ) ; <nl> - assertFalse ( f . isDone ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 59 , 7 + 58 , 6 @ @ public class RangeFilterTest <nl> ColumnFamily filteredCf = f . filter ( cf . name ( ) , cf ) ; <nl> <nl> assertEquals ( filteredCf . getColumnCount ( ) , 2 ) ; <nl> - assertTrue ( f . isDone ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 100 , 7 + 98 , 6 @ @ public class RangeFilterTest <nl> <nl> col = filteredCf . getColumn ( " c " ) ; <nl> assertNotNull ( col ) ; <nl> - assertFalse ( f . isDone ( ) ) ; <nl> } <nl> <nl> }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / Keyspace . java b / src / java / org / apache / cassandra / db / Keyspace . java 
 index 9d3b178 . . 07f3e6f 100644 
 - - - a / src / java / org / apache / cassandra / db / Keyspace . java 
 + + + b / src / java / org / apache / cassandra / db / Keyspace . java 
 @ @ - 395 , 7 + 395 , 6 @ @ public class Keyspace 
 replayPosition = CommitLog . instance . add ( mutation ) ; 
 } 
 
 - DecoratedKey key = mutation . key ( ) ; 
 for ( PartitionUpdate upd : mutation . getPartitionUpdates ( ) ) 
 { 
 ColumnFamilyStore cfs = columnFamilyStores . get ( upd . metadata ( ) . cfId ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / LegacyLayout . java b / src / java / org / apache / cassandra / db / LegacyLayout . java 
 index 8242ab7 . . dc13700 100644 
 - - - a / src / java / org / apache / cassandra / db / LegacyLayout . java 
 + + + b / src / java / org / apache / cassandra / db / LegacyLayout . java 
 @ @ - 140 , 7 + 140 , 16 @ @ public abstract class LegacyLayout 
 
 ByteBuffer column = metadata . isCompound ( ) ? CompositeType . extractComponent ( cellname , metadata . comparator . size ( ) ) : cellname ; 
 if ( column = = null ) 
 + { 
 + / / 2ndary indexes tables used to be compound but dense , but we ' ve transformed then into regular tables 
 + / / ( non compact ones ) but with no regular column ( i . e . we only care about the clustering ) . So we ' ll get here 
 + / / in that case , and what we want to return is basically a row marker . 
 + if ( metadata . partitionColumns ( ) . isEmpty ( ) ) 
 + return new LegacyCellName ( clustering , null , null ) ; 
 + 
 + / / Otherwise , we shouldn ' t get there 
 throw new IllegalArgumentException ( " No column name component found in cell name " ) ; 
 + } 
 
 / / Row marker , this is ok 
 if ( ! column . hasRemaining ( ) ) 
 @ @ - 345 , 6 + 354 , 7 @ @ public abstract class LegacyLayout 
 columnsToFetch . add ( column . name . bytes ) ; 
 
 Row . Builder builder = ArrayBackedRow . unsortedBuilder ( statics , FBUtilities . nowInSeconds ( ) ) ; 
 + builder . newRow ( Clustering . STATIC _ CLUSTERING ) ; 
 
 boolean foundOne = false ; 
 LegacyAtom atom ; 
 @ @ - 416 , 7 + 426 , 7 @ @ public abstract class LegacyLayout 
 } 
 } ; 
 List < Iterator < LegacyAtom > > iterators = Arrays . asList ( asLegacyAtomIterator ( cells ) , asLegacyAtomIterator ( delInfo . inRowRangeTombstones ( ) ) ) ; 
 - Iterator < LegacyAtom > merged = MergeIterator . get ( iterators , grouper . metadata . comparator , reducer ) ; 
 + Iterator < LegacyAtom > merged = MergeIterator . get ( iterators , legacyAtomComparator ( grouper . metadata ) , reducer ) ; 
 final PeekingIterator < LegacyAtom > atoms = Iterators . peekingIterator ( merged ) ; 
 
 return new AbstractIterator < Row > ( ) 
 @ @ - 602 , 6 + 612 , 74 @ @ public abstract class LegacyLayout 
 } ; 
 } 
 
 + private static Comparator < LegacyAtom > legacyAtomComparator ( CFMetaData metadata ) 
 + { 
 + return ( o1 , o2 ) - > 
 + { 
 + / / First we want to compare by clustering , but we have to be careful with range tombstone , because 
 + / / we can have collection deletion and we want those to sort properly just before the column they 
 + / / delete , not before the whole row . 
 + ClusteringPrefix c1 = o1 . clustering ( ) ; 
 + ClusteringPrefix c2 = o2 . clustering ( ) ; 
 + 
 + int clusteringComparison ; 
 + if ( c1 . size ( ) ! = c2 . size ( ) | | ( o1 . isCell ( ) = = o2 . isCell ( ) ) ) 
 + { 
 + clusteringComparison = metadata . comparator . compare ( c1 , c2 ) ; 
 + } 
 + else 
 + { 
 + / / one is a cell and one is a range tombstone , and both have the same prefix size ( that is , the 
 + / / range tombstone is either a row deletion or a collection deletion ) . 
 + LegacyRangeTombstone rt = o1 . isCell ( ) ? o2 . asRangeTombstone ( ) : o1 . asRangeTombstone ( ) ; 
 + clusteringComparison = rt . isCollectionTombstone ( ) 
 + ? 0 
 + : metadata . comparator . compare ( c1 , c2 ) ; 
 + } 
 + 
 + / / Note that if both are range tombstones and have the same clustering , then they are equal . 
 + if ( clusteringComparison ! = 0 ) 
 + return clusteringComparison ; 
 + 
 + if ( o1 . isCell ( ) ) 
 + { 
 + LegacyCell cell1 = o1 . asCell ( ) ; 
 + if ( o2 . isCell ( ) ) 
 + { 
 + LegacyCell cell2 = o2 . asCell ( ) ; 
 + / / Check for row marker cells 
 + if ( cell1 . name . column = = null ) 
 + return cell2 . name . column = = null ? 0 : - 1 ; 
 + return cell2 . name . column = = null ? 1 : cell1 . name . column . compareTo ( cell2 . name . column ) ; 
 + } 
 + 
 + LegacyRangeTombstone rt2 = o2 . asRangeTombstone ( ) ; 
 + assert rt2 . isCollectionTombstone ( ) ; / / otherwise , we shouldn ' t have got a clustering equality 
 + if ( cell1 . name . column = = null ) 
 + return - 1 ; 
 + int cmp = cell1 . name . column . compareTo ( rt2 . start . collectionName ) ; 
 + / / If both are for the same column , then the RT should come first 
 + return cmp = = 0 ? 1 : cmp ; 
 + } 
 + else 
 + { 
 + assert o2 . isCell ( ) ; 
 + LegacyCell cell2 = o2 . asCell ( ) ; 
 + 
 + LegacyRangeTombstone rt1 = o1 . asRangeTombstone ( ) ; 
 + assert rt1 . isCollectionTombstone ( ) ; / / otherwise , we shouldn ' t have got a clustering equality 
 + 
 + if ( cell2 . name . column = = null ) 
 + return 1 ; 
 + 
 + int cmp = rt1 . start . collectionName . compareTo ( cell2 . name . column ) ; 
 + / / If both are for the same column , then the RT should come first 
 + return cmp = = 0 ? - 1 : cmp ; 
 + } 
 + } ; 
 + } 
 + 
 + 
 public static LegacyAtom readLegacyAtom ( CFMetaData metadata , DataInputPlus in , boolean readAllAsDynamic ) throws IOException 
 { 
 while ( true ) 
 @ @ - 768 , 14 + 846 , 10 @ @ public abstract class LegacyLayout 
 
 public boolean addCell ( LegacyCell cell ) 
 { 
 - if ( isStatic ) 
 - { 
 - if ( cell . name . clustering ! = Clustering . STATIC _ CLUSTERING ) 
 - return false ; 
 - } 
 - else if ( clustering = = null ) 
 + if ( clustering = = null ) 
 { 
 clustering = cell . name . clustering ; 
 + assert ! isStatic | | clustering = = Clustering . STATIC _ CLUSTERING ; 
 builder . newRow ( clustering ) ; 
 } 
 else if ( ! clustering . equals ( cell . name . clustering ) ) 
 @ @ - 941 , 7 + 1015 , 7 @ @ public abstract class LegacyLayout 
 } 
 } 
 
 - public interface LegacyAtom extends Clusterable 
 + public interface LegacyAtom 
 { 
 public boolean isCell ( ) ; 
 
 @ @ - 1259 , 7 + 1333 , 7 @ @ public abstract class LegacyLayout 
 while ( iter . hasNext ( ) ) 
 { 
 LegacyRangeTombstone tombstone = iter . next ( ) ; 
 - if ( metadata . comparator . compare ( atom , tombstone . stop . bound ) > = 0 ) 
 + if ( metadata . comparator . compare ( atom . clustering ( ) , tombstone . stop . bound ) > = 0 ) 
 iter . remove ( ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / UnfilteredDeserializer . java b / src / java / org / apache / cassandra / db / UnfilteredDeserializer . java 
 index b3709d2 . . 36a372f 100644 
 - - - a / src / java / org / apache / cassandra / db / UnfilteredDeserializer . java 
 + + + b / src / java / org / apache / cassandra / db / UnfilteredDeserializer . java 
 @ @ - 340 , 7 + 340 , 17 @ @ public abstract class UnfilteredDeserializer 
 public int compareNextTo ( Slice . Bound bound ) throws IOException 
 { 
 checkReady ( ) ; 
 - return metadata . comparator . compare ( nextAtom , bound ) ; 
 + int cmp = metadata . comparator . compare ( nextAtom . clustering ( ) , bound ) ; 
 + if ( cmp ! = 0 | | nextAtom . isCell ( ) | | ! nextIsRow ( ) ) 
 + return cmp ; 
 + 
 + / / Comparing the clustering of the LegacyAtom to the bound work most of the time . There is the case 
 + / / of LegacyRangeTombstone that are either a collectionTombstone or a rowDeletion . In those case , their 
 + / / clustering will be the inclusive start of the row they are a tombstone for , which can be equal to 
 + / / the slice bound . But we don ' t want to return equality because the LegacyTombstone should stand for 
 + / / it ' s row and should sort accordingly . This matter particularly because SSTableIterator will skip 
 + / / equal results for the start bound ( see SSTableIterator . handlePreSliceData for details ) . 
 + return bound . isStart ( ) ? 1 : - 1 ; 
 } 
 
 public boolean nextIsRow ( ) throws IOException 
 diff - - git a / src / java / org / apache / cassandra / db / rows / ArrayBackedRow . java b / src / java / org / apache / cassandra / db / rows / ArrayBackedRow . java 
 index 016b4fa . . 12b23e1 100644 
 - - - a / src / java / org / apache / cassandra / db / rows / ArrayBackedRow . java 
 + + + b / src / java / org / apache / cassandra / db / rows / ArrayBackedRow . java 
 @ @ - 510 , 7 + 510 , 7 @ @ public class ArrayBackedRow extends AbstractRow 
 
 public void newRow ( Clustering clustering ) 
 { 
 - assert cells . isEmpty ( ) ; / / Ensures we ' ve properly called build ( ) if we ' ve use this builder before 
 + assert this . clustering = = null ; / / Ensures we ' ve properly called build ( ) if we ' ve use this builder before 
 this . clustering = clustering ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java b / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java 
 index 50644bb . . f554ffb 100644 
 - - - a / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java 
 + + + b / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java 
 @ @ - 457 , 7 + 457 , 10 @ @ public final class LegacySchemaMigrator 
 kind = ColumnDefinition . Kind . STATIC ; 
 
 Integer componentIndex = null ; 
 - if ( row . has ( " component _ index " ) ) 
 + / / Note that the component _ index is not useful for non - primary key parts ( it never really in fact since there is 
 + / / no particular ordering of non - PK columns , we only used to use it as a simplification but that ' s not needed 
 + / / anymore ) 
 + if ( kind . isPrimaryKeyKind ( ) & & row . has ( " component _ index " ) ) 
 componentIndex = row . getInt ( " component _ index " ) ; 
 
 / / Note : we save the column name as string , but we should not assume that it is an UTF8 name , we

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / Column . java b / src / java / org / apache / cassandra / db / Column . java 
 index c025dde . . 2734375 100644 
 - - - a / src / java / org / apache / cassandra / db / Column . java 
 + + + b / src / java / org / apache / cassandra / db / Column . java 
 @ @ - 276 , 18 + 276 , 6 @ @ class ColumnSerializer implements ICompactSerializer2 < IColumn > 
 if ( name . equals ( columnName ) ) 
 { 
 column = defreeze ( dis , name ) ; 
 - if ( filter instanceof IdentityFilter ) 
 - { 
 - 	 / * 
 - 	 * If this is being called with identity filter 
 - 	 * since a column name is passed in we know 
 - 	 * that this is a final call 
 - 	 * Hence if the column is found set the filter to done 
 - 	 * so that we do not look for the column in further files 
 - 	 * / 
 - 	 IdentityFilter f = ( IdentityFilter ) filter ; 
 - 	 f . setDone ( ) ; 
 - } 
 } 
 else 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 950b133 . . ca94586 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 532 , 10 + 532 , 6 @ @ public final class ColumnFamily 
 if ( column ! = null ) 
 { 
 cf . addColumn ( column ) ; 
 - if ( filter . isDone ( ) ) 
 - { 
 - break ; 
 - } 
 } 
 } 
 return cf ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index cb99e7e . . 111a060 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 522 , 17 + 522 , 12 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 List < ColumnFamily > columnFamilies = new ArrayList < ColumnFamily > ( ) ; 
 / * Get the ColumnFamily from Memtable * / 
 getColumnFamilyFromCurrentMemtable ( key , columnFamilyColumn , filter , columnFamilies ) ; 
 - if ( columnFamilies . size ( ) = = 0 | | ! filter . isDone ( ) ) 
 - { 
 - / * Check if MemtableManager has any historical information * / 
 - getUnflushedColumnFamily ( key , columnFamily _ , columnFamilyColumn , filter , columnFamilies ) ; 
 - } 
 - if ( columnFamilies . size ( ) = = 0 | | ! filter . isDone ( ) ) 
 - { 
 - long start = System . currentTimeMillis ( ) ; 
 - getColumnFamilyFromDisk ( key , columnFamilyColumn , columnFamilies , filter ) ; 
 - diskReadStats _ . add ( System . currentTimeMillis ( ) - start ) ; 
 - } 
 + / * Check if MemtableManager has any historical information * / 
 + getUnflushedColumnFamily ( key , columnFamily _ , columnFamilyColumn , filter , columnFamilies ) ; 
 + long start = System . currentTimeMillis ( ) ; 
 + getColumnFamilyFromDisk ( key , columnFamilyColumn , columnFamilies , filter ) ; 
 + diskReadStats _ . add ( System . currentTimeMillis ( ) - start ) ; 
 + 
 return columnFamilies ; 
 } 
 
 @ @ - 574 , 10 + 569 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 if ( columnFamily ! = null ) 
 { 
 columnFamilies . add ( columnFamily ) ; 
 - if ( filter . isDone ( ) ) 
 - { 
 - break ; 
 - } 
 } 
 } 
 } 
 @ @ - 1417 , 8 + 1408 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 if ( columnFamily ! = null ) 
 { 
 columnFamilies . add ( columnFamily ) ; 
 - if ( filter . isDone ( ) ) 
 - break ; 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / IFilter . java b / src / java / org / apache / cassandra / db / IFilter . java 
 index c9fc38d . . f2a426e 100644 
 - - - a / src / java / org / apache / cassandra / db / IFilter . java 
 + + + b / src / java / org / apache / cassandra / db / IFilter . java 
 @ @ - 1 , 21 + 1 , 21 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , 
 - * software distributed under the License is distributed on an 
 - * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 - * KIND , either express or implied . See the License for the 
 - * specific language governing permissions and limitations 
 - * under the License . 
 - * / 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 package org . apache . cassandra . db ; 
 
 import java . io . DataInputStream ; 
 @ @ - 27 , 7 + 27 , 6 @ @ import org . apache . cassandra . io . SSTable ; 
 
 public interface IFilter 
 { 
 - 	 public boolean isDone ( ) ; 
 	 public ColumnFamily filter ( String cfName , ColumnFamily cf ) ; 
 public IColumn filter ( IColumn column , DataInputStream dis ) throws IOException ; 
 public DataInputBuffer next ( String key , String cf , SSTable ssTable ) throws IOException ; 
 diff - - git a / src / java / org / apache / cassandra / db / IdentityFilter . java b / src / java / org / apache / cassandra / db / IdentityFilter . java 
 index 2656667 . . d534534 100644 
 - - - a / src / java / org / apache / cassandra / db / IdentityFilter . java 
 + + + b / src / java / org / apache / cassandra / db / IdentityFilter . java 
 @ @ - 28 , 42 + 28 , 13 @ @ import org . apache . cassandra . io . SSTable ; 
 
 public class IdentityFilter implements IFilter 
 { 
 - private boolean isDone _ = false ; 
 - 
 - 	 public boolean isDone ( ) 
 - 	 { 
 - 	 	 return isDone _ ; 
 - 	 } 
 - 
 	 public ColumnFamily filter ( String cfString , ColumnFamily columnFamily ) 
 	 { 
 - 	 String [ ] values = RowMutation . getColumnAndColumnFamily ( cfString ) ; 
 - 	 if ( columnFamily = = null ) 
 - 	 	 return columnFamily ; 
 - 
 - 	 	 if ( values . length = = 2 & & ! columnFamily . isSuper ( ) ) 
 - 	 	 { 
 - 	 	 	 Collection < IColumn > columns = columnFamily . getAllColumns ( ) ; 
 - 	 	 	 if ( columns . size ( ) > = 1 ) 
 - 	 	 	 	 isDone _ = true ; 
 - 	 	 } 
 - 	 	 if ( values . length = = 3 & & columnFamily . isSuper ( ) ) 
 - 	 	 { 
 - 	 	 Collection < IColumn > columns = columnFamily . getAllColumns ( ) ; 
 - 	 	 for ( IColumn column : columns ) 
 - 	 	 { 
 - 	 	 	 SuperColumn superColumn = ( SuperColumn ) column ; 
 - 	 	 Collection < IColumn > subColumns = superColumn . getSubColumns ( ) ; 
 - 	 	 if ( subColumns . size ( ) > = 1 ) 
 - 	 	 	 isDone _ = true ; 
 - 	 	 } 
 - 	 	 } 
 	 	 return columnFamily ; 
 	 } 
 
 	 public IColumn filter ( IColumn column , DataInputStream dis ) throws IOException 
 	 { 
 - 	 	 / / TODO Auto - generated method stub 
 	 	 return column ; 
 	 } 
 
 @ @ - 71 , 18 + 42 , 4 @ @ public class IdentityFilter implements IFilter 
 	 { 
 	 	 return ssTable . next ( key , cf ) ; 
 	 } 
 - 
 - 	 public void setDone ( ) 
 - 	 { 
 - 	 	 isDone _ = true ; 
 - 	 } 
 - 	 / * * 
 - 	 * @ param args 
 - 	 * / 
 - 	 public static void main ( String [ ] args ) 
 - 	 { 
 - 	 	 / / TODO Auto - generated method stub 
 - 
 - 	 } 
 - 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / NamesFilter . java b / src / java / org / apache / cassandra / db / NamesFilter . java 
 index 2966c6f . . 39126de 100644 
 - - - a / src / java / org / apache / cassandra / db / NamesFilter . java 
 + + + b / src / java / org / apache / cassandra / db / NamesFilter . java 
 @ @ - 54 , 13 + 54 , 8 @ @ public class NamesFilter implements IFilter 
 	 	 	 { 
 	 	 if ( names _ . contains ( column . name ( ) ) ) 
 	 	 { 
 - 	 	 names _ . remove ( column . name ( ) ) ; 
 	 	 	 	 	 filteredCf . addColumn ( column ) ; 
 	 	 } 
 - 	 	 	 	 if ( isDone ( ) ) 
 - 	 	 	 	 { 
 - 	 	 	 	 	 return filteredCf ; 
 - 	 	 	 	 } 
 	 	 	 } 
 	 	 } 
 	 	 else if ( values . length = = 2 & & columnFamily . isSuper ( ) ) 
 @ @ - 76 , 13 + 71 , 8 @ @ public class NamesFilter implements IFilter 
 	 	 { 
 	 	 if ( names _ . contains ( subColumn . name ( ) ) ) 
 	 	 { 
 - 	 	 names _ . remove ( subColumn . name ( ) ) ; 
 	 	 filteredSuperColumn . addColumn ( subColumn ) ; 
 	 	 } 
 - 	 	 	 	 if ( isDone ( ) ) 
 - 	 	 	 	 { 
 - 	 	 	 	 	 return filteredCf ; 
 - 	 	 	 	 } 
 	 	 	 } 
 	 	 } 
 	 	 } 
 @ @ - 95 , 24 + 85 , 13 @ @ public class NamesFilter implements IFilter 
 
 public IColumn filter ( IColumn column , DataInputStream dis ) throws IOException 
 { 
 - String columnName = column . name ( ) ; 
 - if ( names _ . contains ( columnName ) ) 
 - { 
 - names _ . remove ( columnName ) ; 
 - } 
 - else 
 + if ( ! names _ . contains ( column . name ( ) ) ) 
 { 
 column = null ; 
 } 
 - 
 return column ; 
 } 
 
 - public boolean isDone ( ) 
 - { 
 - return names _ . isEmpty ( ) ; 
 - } 
 - 
 public DataInputBuffer next ( String key , String cf , SSTable ssTable ) throws IOException 
 { 
 	 return ssTable . next ( key , cf , names _ , null ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / RangeFilter . java b / src / java / org / apache / cassandra / db / RangeFilter . java 
 index 54eae61 . . 4a21a60 100644 
 - - - a / src / java / org / apache / cassandra / db / RangeFilter . java 
 + + + b / src / java / org / apache / cassandra / db / RangeFilter . java 
 @ @ - 33 , 14 + 33 , 12 @ @ public class RangeFilter implements IFilter 
 { 
 private final String colMin _ ; 
 private final String colMax _ ; 
 - private boolean isDone _ ; 
 int count _ ; 
 
 RangeFilter ( String colMin , String colMax ) 
 { 
 colMin _ = colMin ; 
 colMax _ = colMax ; 
 - isDone _ = false ; 
 count _ = - 1 ; 
 } 
 
 @ @ - 48 , 7 + 46 , 6 @ @ public class RangeFilter implements IFilter 
 { 
 colMin _ = colMin ; 
 colMax _ = colMax ; 
 - isDone _ = false ; 
 count _ = count ; 
 } 
 
 @ @ - 57 , 28 + 54 , 19 @ @ public class RangeFilter implements IFilter 
 if ( cf = = null ) 
 return null ; 
 
 - if ( count _ = = 0 ) 
 - { 
 - isDone _ = true ; 
 - return null ; 
 - } 
 - 
 ColumnFamily filteredColumnFamily = cf . cloneMeShallow ( ) ; 
 
 Collection < IColumn > columns = cf . getAllColumns ( ) ; 
 + int i = 0 ; 
 for ( IColumn c : columns ) 
 { 
 + if ( ( count _ > = 0 ) & & ( i > = count _ ) ) 
 + break ; 
 if ( c . name ( ) . compareTo ( colMin _ ) > = 0 
 & & c . name ( ) . compareTo ( colMax _ ) < = 0 ) 
 { 
 filteredColumnFamily . addColumn ( c ) ; 
 - if ( count _ > 0 ) 
 - count _ - - ; 
 - if ( count _ = = 0 ) 
 - { 
 - isDone _ = true ; 
 - break ; 
 - } 
 + i + + ; 
 } 
 } 
 return filteredColumnFamily ; 
 @ @ - 87 , 26 + 75 , 15 @ @ public class RangeFilter implements IFilter 
 public IColumn filter ( IColumn column , DataInputStream dis ) 
 throws IOException 
 { 
 - if ( column = = null | | isDone _ ) 
 + if ( column = = null ) 
 return null ; 
 
 if ( column . name ( ) . compareTo ( colMin _ ) > = 0 
 & & column . name ( ) . compareTo ( colMax _ ) < = 0 ) 
 { 
 - if ( count _ > 0 ) 
 - count _ - - ; 
 - if ( count _ = = 0 ) 
 - isDone _ = true ; 
 return column ; 
 - } else 
 - { 
 - return null ; 
 } 
 - } 
 - 
 - public boolean isDone ( ) 
 - { 
 - return isDone _ ; 
 + return null ; 
 } 
 
 public DataInputBuffer next ( String key , String cf , SSTable ssTable ) 
 diff - - git a / src / java / org / apache / cassandra / db / SuperColumn . java b / src / java / org / apache / cassandra / db / SuperColumn . java 
 index a30216f . . 6114caa 100644 
 - - - a / src / java / org / apache / cassandra / db / SuperColumn . java 
 + + + b / src / java / org / apache / cassandra / db / SuperColumn . java 
 @ @ - 422 , 10 + 422 , 6 @ @ class SuperColumnSerializer implements ICompactSerializer2 < IColumn > 
 if ( column ! = null ) 
 { 
 superColumn . addColumn ( column ) ; 
 - if ( filter . isDone ( ) ) 
 - { 
 - break ; 
 - } 
 } 
 } 
 return superColumn ; 
 diff - - git a / src / java / org / apache / cassandra / db / TimeFilter . java b / src / java / org / apache / cassandra / db / TimeFilter . java 
 index 7e21f16 . . d9263d5 100644 
 - - - a / src / java / org / apache / cassandra / db / TimeFilter . java 
 + + + b / src / java / org / apache / cassandra / db / TimeFilter . java 
 @ @ - 36 , 12 + 36 , 10 @ @ import org . apache . cassandra . io . SSTable ; 
 class TimeFilter implements IFilter 
 { 
 private long timeLimit _ ; 
 - private boolean isDone _ ; 
 
 TimeFilter ( long timeLimit ) 
 { 
 timeLimit _ = timeLimit ; 
 - isDone _ = false ; 
 } 
 
 public ColumnFamily filter ( String cf , ColumnFamily columnFamily ) 
 @ @ - 54 , 23 + 52 , 17 @ @ class TimeFilter implements IFilter 
 if ( values . length = = 1 & & ! columnFamily . isSuper ( ) ) 
 { 
 Collection < IColumn > columns = columnFamily . getAllColumns ( ) ; 
 - int i = 0 ; 
 for ( IColumn column : columns ) 
 { 
 if ( column . timestamp ( ) > = timeLimit _ ) 
 { 
 filteredCf . addColumn ( column ) ; 
 - + + i ; 
 } 
 else 
 { 
 break ; 
 } 
 } 
 - if ( i < columns . size ( ) ) 
 - { 
 - isDone _ = true ; 
 - } 
 } 
 else if ( values . length = = 2 & & columnFamily . isSuper ( ) ) 
 { 
 @ @ - 87 , 23 + 79 , 17 @ @ class TimeFilter implements IFilter 
 filteredSuperColumn . markForDeleteAt ( column . getLocalDeletionTime ( ) , column . getMarkedForDeleteAt ( ) ) ; 
 filteredCf . addColumn ( filteredSuperColumn ) ; 
 Collection < IColumn > subColumns = superColumn . getSubColumns ( ) ; 
 - int i = 0 ; 
 for ( IColumn subColumn : subColumns ) 
 { 
 if ( subColumn . timestamp ( ) > = timeLimit _ ) 
 { 
 filteredSuperColumn . addColumn ( subColumn ) ; 
 - + + i ; 
 } 
 else 
 { 
 break ; 
 } 
 } 
 - if ( i < filteredSuperColumn . getColumnCount ( ) ) 
 - { 
 - isDone _ = true ; 
 - } 
 } 
 } 
 else 
 @ @ - 130 , 19 + 116 , 12 @ @ class TimeFilter implements IFilter 
 dis . reset ( ) ; 
 if ( timeStamp < timeLimit _ ) 
 { 
 - isDone _ = true ; 
 return null ; 
 } 
 } 
 return column ; 
 } 
 
 - 
 - public boolean isDone ( ) 
 - { 
 - return isDone _ ; 
 - } 
 - 
 public DataInputBuffer next ( String key , String cfName , SSTable ssTable ) throws IOException 
 { 
 return ssTable . next ( key , cfName , null , new IndexHelper . TimeRange ( timeLimit _ , Long . MAX _ VALUE ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / RangeFilterTest . java b / test / unit / org / apache / cassandra / db / RangeFilterTest . java 
 index 78c2360 . . 081bbf3 100644 
 - - - a / test / unit / org / apache / cassandra / db / RangeFilterTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RangeFilterTest . java 
 @ @ - 41 , 7 + 41 , 6 @ @ public class RangeFilterTest 
 ColumnFamily filteredCf = f . filter ( cf . name ( ) , cf ) ; 
 
 assertEquals ( filteredCf . getColumnCount ( ) , 3 ) ; 
 - assertFalse ( f . isDone ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 59 , 7 + 58 , 6 @ @ public class RangeFilterTest 
 ColumnFamily filteredCf = f . filter ( cf . name ( ) , cf ) ; 
 
 assertEquals ( filteredCf . getColumnCount ( ) , 2 ) ; 
 - assertTrue ( f . isDone ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 100 , 7 + 98 , 6 @ @ public class RangeFilterTest 
 
 col = filteredCf . getColumn ( " c " ) ; 
 assertNotNull ( col ) ; 
 - assertFalse ( f . isDone ( ) ) ; 
 } 
 
 }
