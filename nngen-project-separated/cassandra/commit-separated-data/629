BLEU SCORE: 0.03283637368030199

TEST MSG: make constructor private to respect factory pattern
GENERATED MSG: extract InstrumentingCache from jmx code

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cache / CounterCacheKey . java b / src / java / org / apache / cassandra / cache / CounterCacheKey . java <nl> index 8b173bf . . bee53d0 100644 <nl> - - - a / src / java / org / apache / cassandra / cache / CounterCacheKey . java <nl> + + + b / src / java / org / apache / cassandra / cache / CounterCacheKey . java <nl> @ @ - 33 , 7 + 33 , 7 @ @ public final class CounterCacheKey extends CacheKey <nl> public final byte [ ] partitionKey ; <nl> public final byte [ ] cellName ; <nl> <nl> - public CounterCacheKey ( Pair < String , String > ksAndCFName , ByteBuffer partitionKey , ByteBuffer cellName ) <nl> + private CounterCacheKey ( Pair < String , String > ksAndCFName , ByteBuffer partitionKey , ByteBuffer cellName ) <nl> { <nl> super ( ksAndCFName ) ; <nl> this . partitionKey = ByteBufferUtil . getArray ( partitionKey ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cache / AbstractCache . java b / src / java / org / apache / cassandra / cache / AbstractCache . java <nl> new file mode 100644 <nl> index 0000000 . . 15a1041 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cache / AbstractCache . java <nl> @ @ - 0 , 0 + 1 , 22 @ @ <nl> + package org . apache . cassandra . cache ; <nl> + <nl> + import java . lang . management . ManagementFactory ; <nl> + import javax . management . MBeanServer ; <nl> + import javax . management . ObjectName ; <nl> + <nl> + public class AbstractCache <nl> + { <nl> + static void registerMBean ( Object cache , String table , String name ) <nl> + { <nl> + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> + try <nl> + { <nl> + String mbeanName = " org . apache . cassandra . db : type = Caches , keyspace = " + table + " , cache = " + name ; <nl> + mbs . registerMBean ( cache , new ObjectName ( mbeanName ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / cache / InstrumentedCache . java b / src / java / org / apache / cassandra / cache / InstrumentedCache . java <nl> index d197c77 . . 349102f 100644 <nl> - - - a / src / java / org / apache / cassandra / cache / InstrumentedCache . java <nl> + + + b / src / java / org / apache / cassandra / cache / InstrumentedCache . java <nl> @ @ - 1 , 34 + 1 , 19 @ @ <nl> package org . apache . cassandra . cache ; <nl> <nl> - import java . lang . management . ManagementFactory ; <nl> - import javax . management . MBeanServer ; <nl> - import javax . management . ObjectName ; <nl> - <nl> import com . reardencommerce . kernel . collections . shared . evictable . ConcurrentLinkedHashMap ; <nl> import org . apache . cassandra . utils . TimedStatsDeque ; <nl> <nl> - public class InstrumentedCache < K , V > implements InstrumentedCacheMBean <nl> + public class InstrumentedCache < K , V > <nl> { <nl> private final int capacity ; <nl> private final ConcurrentLinkedHashMap < K , V > map ; <nl> private final TimedStatsDeque stats ; <nl> <nl> - public InstrumentedCache ( String table , String name , int capacity ) <nl> + public InstrumentedCache ( int capacity ) <nl> { <nl> this . capacity = capacity ; <nl> map = ConcurrentLinkedHashMap . create ( ConcurrentLinkedHashMap . EvictionPolicy . SECOND _ CHANCE , capacity ) ; <nl> stats = new TimedStatsDeque ( 60000 ) ; <nl> - <nl> - MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> - try <nl> - { <nl> - String mbeanName = " org . apache . cassandra . db : type = Caches , keyspace = " + table + " , cache = " + name ; <nl> - mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> } <nl> <nl> public void put ( K key , V value ) <nl> diff - - git a / src / java / org / apache / cassandra / cache / InstrumentedCacheMBean . java b / src / java / org / apache / cassandra / cache / InstrumentedCacheMBean . java <nl> deleted file mode 100644 <nl> index e2c01f6 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / cache / InstrumentedCacheMBean . java <nl> + + + / dev / null <nl> @ @ - 1 , 8 + 0 , 0 @ @ <nl> - package org . apache . cassandra . cache ; <nl> - <nl> - public interface InstrumentedCacheMBean <nl> - { <nl> - public int getCapacity ( ) ; <nl> - public int getSize ( ) ; <nl> - public double getHitRate ( ) ; <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / cache / JMXAggregatingCache . java b / src / java / org / apache / cassandra / cache / JMXAggregatingCache . java <nl> new file mode 100644 <nl> index 0000000 . . 4ffbae1 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cache / JMXAggregatingCache . java <nl> @ @ - 0 , 0 + 1 , 5 @ @ <nl> + package org . apache . cassandra . cache ; <nl> + <nl> + public class JMXAggregatingCache <nl> + { <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / cache / JMXAggregatingCacheMBean . java b / src / java / org / apache / cassandra / cache / JMXAggregatingCacheMBean . java <nl> new file mode 100644 <nl> index 0000000 . . 5f0a822 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cache / JMXAggregatingCacheMBean . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package org . apache . cassandra . cache ; <nl> + <nl> + public interface JMXAggregatingCacheMBean <nl> + { <nl> + public int getCapacity ( ) ; <nl> + public int getSize ( ) ; <nl> + public double getHitRate ( ) ; <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / cache / JMXInstrumentedCache . java b / src / java / org / apache / cassandra / cache / JMXInstrumentedCache . java <nl> new file mode 100644 <nl> index 0000000 . . 829c74f <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cache / JMXInstrumentedCache . java <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + package org . apache . cassandra . cache ; <nl> + <nl> + public class JMXInstrumentedCache < K , V > extends InstrumentedCache < K , V > implements JMXInstrumentedCacheMBean <nl> + { <nl> + public JMXInstrumentedCache ( String table , String name , int capacity ) <nl> + { <nl> + super ( capacity ) ; <nl> + AbstractCache . registerMBean ( this , table , name ) ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / cache / JMXInstrumentedCacheMBean . java b / src / java / org / apache / cassandra / cache / JMXInstrumentedCacheMBean . java <nl> new file mode 100644 <nl> index 0000000 . . c28ae8a <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cache / JMXInstrumentedCacheMBean . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package org . apache . cassandra . cache ; <nl> + <nl> + public interface JMXInstrumentedCacheMBean <nl> + { <nl> + public int getCapacity ( ) ; <nl> + public int getSize ( ) ; <nl> + public double getHitRate ( ) ; <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index c77aa76 . . 5ace6ad 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import java . util . concurrent . atomic . AtomicInteger ; <nl> import java . util . concurrent . atomic . AtomicReference ; <nl> <nl> import org . apache . cassandra . cache . InstrumentedCache ; <nl> + import org . apache . cassandra . cache . JMXInstrumentedCache ; <nl> import org . apache . cassandra . service . SliceRange ; <nl> import org . apache . log4j . Logger ; <nl> <nl> @ @ - 106 , 7 + 107 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> / * active memtable associated with this ColumnFamilyStore . * / <nl> private Memtable memtable _ ; <nl> <nl> - private InstrumentedCache < String , ColumnFamily > rowCache ; <nl> + private JMXInstrumentedCache < String , ColumnFamily > rowCache ; <nl> <nl> / / TODO binarymemtable ops are not threadsafe ( do they need to be ? ) <nl> private AtomicReference < BinaryMemtable > binaryMemtable _ ; <nl> @ @ - 191 , 7 + 192 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> int cacheSize = Math . max ( 1 , ( int ) ( v * SSTableReader . estimatedKeys ( columnFamilyName ) ) ) ; <nl> if ( logger _ . isDebugEnabled ( ) ) <nl> logger _ . debug ( " enabling row cache for " + columnFamilyName + " with size " + cacheSize ) ; <nl> - rowCache = new InstrumentedCache < String , ColumnFamily > ( table , columnFamilyName + " RowCache " , cacheSize ) ; <nl> + rowCache = new JMXInstrumentedCache < String , ColumnFamily > ( table , columnFamilyName + " RowCache " , cacheSize ) ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / cache / CounterCacheKey . java b / src / java / org / apache / cassandra / cache / CounterCacheKey . java 
 index 8b173bf . . bee53d0 100644 
 - - - a / src / java / org / apache / cassandra / cache / CounterCacheKey . java 
 + + + b / src / java / org / apache / cassandra / cache / CounterCacheKey . java 
 @ @ - 33 , 7 + 33 , 7 @ @ public final class CounterCacheKey extends CacheKey 
 public final byte [ ] partitionKey ; 
 public final byte [ ] cellName ; 
 
 - public CounterCacheKey ( Pair < String , String > ksAndCFName , ByteBuffer partitionKey , ByteBuffer cellName ) 
 + private CounterCacheKey ( Pair < String , String > ksAndCFName , ByteBuffer partitionKey , ByteBuffer cellName ) 
 { 
 super ( ksAndCFName ) ; 
 this . partitionKey = ByteBufferUtil . getArray ( partitionKey ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cache / AbstractCache . java b / src / java / org / apache / cassandra / cache / AbstractCache . java 
 new file mode 100644 
 index 0000000 . . 15a1041 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cache / AbstractCache . java 
 @ @ - 0 , 0 + 1 , 22 @ @ 
 + package org . apache . cassandra . cache ; 
 + 
 + import java . lang . management . ManagementFactory ; 
 + import javax . management . MBeanServer ; 
 + import javax . management . ObjectName ; 
 + 
 + public class AbstractCache 
 + { 
 + static void registerMBean ( Object cache , String table , String name ) 
 + { 
 + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 + try 
 + { 
 + String mbeanName = " org . apache . cassandra . db : type = Caches , keyspace = " + table + " , cache = " + name ; 
 + mbs . registerMBean ( cache , new ObjectName ( mbeanName ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / cache / InstrumentedCache . java b / src / java / org / apache / cassandra / cache / InstrumentedCache . java 
 index d197c77 . . 349102f 100644 
 - - - a / src / java / org / apache / cassandra / cache / InstrumentedCache . java 
 + + + b / src / java / org / apache / cassandra / cache / InstrumentedCache . java 
 @ @ - 1 , 34 + 1 , 19 @ @ 
 package org . apache . cassandra . cache ; 
 
 - import java . lang . management . ManagementFactory ; 
 - import javax . management . MBeanServer ; 
 - import javax . management . ObjectName ; 
 - 
 import com . reardencommerce . kernel . collections . shared . evictable . ConcurrentLinkedHashMap ; 
 import org . apache . cassandra . utils . TimedStatsDeque ; 
 
 - public class InstrumentedCache < K , V > implements InstrumentedCacheMBean 
 + public class InstrumentedCache < K , V > 
 { 
 private final int capacity ; 
 private final ConcurrentLinkedHashMap < K , V > map ; 
 private final TimedStatsDeque stats ; 
 
 - public InstrumentedCache ( String table , String name , int capacity ) 
 + public InstrumentedCache ( int capacity ) 
 { 
 this . capacity = capacity ; 
 map = ConcurrentLinkedHashMap . create ( ConcurrentLinkedHashMap . EvictionPolicy . SECOND _ CHANCE , capacity ) ; 
 stats = new TimedStatsDeque ( 60000 ) ; 
 - 
 - MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 - try 
 - { 
 - String mbeanName = " org . apache . cassandra . db : type = Caches , keyspace = " + table + " , cache = " + name ; 
 - mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 } 
 
 public void put ( K key , V value ) 
 diff - - git a / src / java / org / apache / cassandra / cache / InstrumentedCacheMBean . java b / src / java / org / apache / cassandra / cache / InstrumentedCacheMBean . java 
 deleted file mode 100644 
 index e2c01f6 . . 0000000 
 - - - a / src / java / org / apache / cassandra / cache / InstrumentedCacheMBean . java 
 + + + / dev / null 
 @ @ - 1 , 8 + 0 , 0 @ @ 
 - package org . apache . cassandra . cache ; 
 - 
 - public interface InstrumentedCacheMBean 
 - { 
 - public int getCapacity ( ) ; 
 - public int getSize ( ) ; 
 - public double getHitRate ( ) ; 
 - } 
 diff - - git a / src / java / org / apache / cassandra / cache / JMXAggregatingCache . java b / src / java / org / apache / cassandra / cache / JMXAggregatingCache . java 
 new file mode 100644 
 index 0000000 . . 4ffbae1 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cache / JMXAggregatingCache . java 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + package org . apache . cassandra . cache ; 
 + 
 + public class JMXAggregatingCache 
 + { 
 + } 
 diff - - git a / src / java / org / apache / cassandra / cache / JMXAggregatingCacheMBean . java b / src / java / org / apache / cassandra / cache / JMXAggregatingCacheMBean . java 
 new file mode 100644 
 index 0000000 . . 5f0a822 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cache / JMXAggregatingCacheMBean . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package org . apache . cassandra . cache ; 
 + 
 + public interface JMXAggregatingCacheMBean 
 + { 
 + public int getCapacity ( ) ; 
 + public int getSize ( ) ; 
 + public double getHitRate ( ) ; 
 + } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / cache / JMXInstrumentedCache . java b / src / java / org / apache / cassandra / cache / JMXInstrumentedCache . java 
 new file mode 100644 
 index 0000000 . . 829c74f 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cache / JMXInstrumentedCache . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + package org . apache . cassandra . cache ; 
 + 
 + public class JMXInstrumentedCache < K , V > extends InstrumentedCache < K , V > implements JMXInstrumentedCacheMBean 
 + { 
 + public JMXInstrumentedCache ( String table , String name , int capacity ) 
 + { 
 + super ( capacity ) ; 
 + AbstractCache . registerMBean ( this , table , name ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / cache / JMXInstrumentedCacheMBean . java b / src / java / org / apache / cassandra / cache / JMXInstrumentedCacheMBean . java 
 new file mode 100644 
 index 0000000 . . c28ae8a 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cache / JMXInstrumentedCacheMBean . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package org . apache . cassandra . cache ; 
 + 
 + public interface JMXInstrumentedCacheMBean 
 + { 
 + public int getCapacity ( ) ; 
 + public int getSize ( ) ; 
 + public double getHitRate ( ) ; 
 + } 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index c77aa76 . . 5ace6ad 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import java . util . concurrent . atomic . AtomicInteger ; 
 import java . util . concurrent . atomic . AtomicReference ; 
 
 import org . apache . cassandra . cache . InstrumentedCache ; 
 + import org . apache . cassandra . cache . JMXInstrumentedCache ; 
 import org . apache . cassandra . service . SliceRange ; 
 import org . apache . log4j . Logger ; 
 
 @ @ - 106 , 7 + 107 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 / * active memtable associated with this ColumnFamilyStore . * / 
 private Memtable memtable _ ; 
 
 - private InstrumentedCache < String , ColumnFamily > rowCache ; 
 + private JMXInstrumentedCache < String , ColumnFamily > rowCache ; 
 
 / / TODO binarymemtable ops are not threadsafe ( do they need to be ? ) 
 private AtomicReference < BinaryMemtable > binaryMemtable _ ; 
 @ @ - 191 , 7 + 192 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 int cacheSize = Math . max ( 1 , ( int ) ( v * SSTableReader . estimatedKeys ( columnFamilyName ) ) ) ; 
 if ( logger _ . isDebugEnabled ( ) ) 
 logger _ . debug ( " enabling row cache for " + columnFamilyName + " with size " + cacheSize ) ; 
 - rowCache = new InstrumentedCache < String , ColumnFamily > ( table , columnFamilyName + " RowCache " , cacheSize ) ; 
 + rowCache = new JMXInstrumentedCache < String , ColumnFamily > ( table , columnFamilyName + " RowCache " , cacheSize ) ; 
 } 
 } 

