BLEU SCORE: 0.016932492841722675

TEST MSG: Revert " By default cassandra will no longer start without jna "
GENERATED MSG: Improve Gossip tolerance of abnormally slow tasks

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 23bb4f1 . . ed7ce30 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 24 , 7 + 24 , 6 @ @ <nl> * Add cardinality estimator for key count estimation ( CASSANDRA - 5906 ) <nl> * CF id is changed to be non - deterministic . Data dir / key cache are created <nl> uniquely for CF id ( CASSANDRA - 5202 ) <nl> - * Cassandra won ' t start by default without jna ( CASSANDRA - 6575 ) <nl> * New counters implementation ( CASSANDRA - 6504 ) <nl> <nl> <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index 0cadf96 . . c61981d 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 138 , 20 + 138 , 6 @ @ public class CassandraDaemon <nl> * / <nl> logger . info ( " Heap size : { } / { } " , Runtime . getRuntime ( ) . totalMemory ( ) , Runtime . getRuntime ( ) . maxMemory ( ) ) ; <nl> logger . info ( " Classpath : { } " , System . getProperty ( " java . class . path " ) ) ; <nl> - <nl> - / / Fail - fast if JNA is not available or failing to initialize properly <nl> - / / except with - Dcassandra . boot _ without _ jna = true . See CASSANDRA - 6575 . <nl> - if ( ! CLibrary . jnaAvailable ( ) ) <nl> - { <nl> - boolean jnaRequired = ! Boolean . getBoolean ( " cassandra . boot _ without _ jna " ) ; <nl> - <nl> - if ( jnaRequired ) <nl> - { <nl> - logger . error ( " JNA failing to initialize properly . Use - Dcassandra . boot _ without _ jna = true to bootstrap even so . " ) ; <nl> - System . exit ( 3 ) ; <nl> - } <nl> - } <nl> - <nl> CLibrary . tryMlockall ( ) ; <nl> <nl> Thread . setDefaultUncaughtExceptionHandler ( new Thread . UncaughtExceptionHandler ( ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / CLibrary . java b / src / java / org / apache / cassandra / utils / CLibrary . java <nl> index 4dd5223 . . a7ff815 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / CLibrary . java <nl> + + + b / src / java / org / apache / cassandra / utils / CLibrary . java <nl> @ @ - 60 , 11 + 60 , 11 @ @ public final class CLibrary <nl> } <nl> catch ( NoClassDefFoundError e ) <nl> { <nl> - logger . warn ( " JNA not found . Native methods will be disabled . " ) ; <nl> + logger . info ( " JNA not found . Native methods will be disabled . " ) ; <nl> } <nl> catch ( UnsatisfiedLinkError e ) <nl> { <nl> - logger . warn ( " JNA link failure , one or more native method will be unavailable . " ) ; <nl> + logger . info ( " JNA link failure , one or more native method will be unavailable . " ) ; <nl> logger . debug ( " JNA link failure details : { } " , e . getMessage ( ) ) ; <nl> } <nl> catch ( NoSuchMethodError e )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e4f1862 . . 159e8de 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 20 , 6 + 20 , 7 @ @ <nl> * Fix serialization bug in PagedRange with 2ndary indexes ( CASSANDRA - 6299 ) <nl> * Fix CQL3 table validation in Thrift ( CASSANDRA - 6140 ) <nl> * Fix bug missing results with IN clauses ( CASSANDRA - 6327 ) <nl> + * Fix paging with reversed slices ( CASSANDRA - 6343 ) <nl> Merged from 1 . 2 : <nl> * add non - jamm path for cached statements ( CASSANDRA - 6293 ) <nl> * ( Hadoop ) Require CFRR batchSize to be at least 2 ( CASSANDRA - 6114 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index b2c5ac4 . . 47b14b9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 451 , 6 + 451 , 11 @ @ public abstract class ColumnFamily implements Iterable < Column > , IRowCacheEntry <nl> return getSortedColumns ( ) . iterator ( ) ; <nl> } <nl> <nl> + public Iterator < Column > reverseIterator ( ) <nl> + { <nl> + return getReverseSortedColumns ( ) . iterator ( ) ; <nl> + } <nl> + <nl> public boolean hasIrrelevantData ( int gcBefore ) <nl> { <nl> / / Do we have gcable deletion infos ? <nl> diff - - git a / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java b / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java <nl> index 62cd454 . . d040203 100644 <nl> - - - a / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java <nl> + + + b / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java <nl> @ @ - 93 , 7 + 93 , 7 @ @ abstract class AbstractQueryPager implements QueryPager <nl> remaining + + ; <nl> } <nl> / / Otherwise , if ' lastWasRecorded ' , we queried for one more than the page size , <nl> - / / so if the page was is full , trim the last entry <nl> + / / so if the page is full , trim the last entry <nl> else if ( lastWasRecorded & & ! exhausted ) <nl> { <nl> / / We ' ve asked for one more than necessary <nl> @ @ - 161 , 11 + 161 , 14 @ @ abstract class AbstractQueryPager implements QueryPager <nl> protected abstract List < Row > queryNextPage ( int pageSize , ConsistencyLevel consistency , boolean localQuery ) throws RequestValidationException , RequestExecutionException ; <nl> protected abstract boolean containsPreviousLast ( Row first ) ; <nl> protected abstract boolean recordLast ( Row last ) ; <nl> + protected abstract boolean isReversed ( ) ; <nl> <nl> private List < Row > discardFirst ( List < Row > rows ) <nl> { <nl> Row first = rows . get ( 0 ) ; <nl> - ColumnFamily newCf = discardFirst ( first . cf ) ; <nl> + ColumnFamily newCf = isReversed ( ) <nl> + ? discardLast ( first . cf ) <nl> + : discardFirst ( first . cf ) ; <nl> <nl> int count = newCf . getColumnCount ( ) ; <nl> List < Row > newRows = new ArrayList < Row > ( count = = 0 ? rows . size ( ) - 1 : rows . size ( ) ) ; <nl> @ @ - 179 , 7 + 182 , 9 @ @ abstract class AbstractQueryPager implements QueryPager <nl> private List < Row > discardLast ( List < Row > rows ) <nl> { <nl> Row last = rows . get ( rows . size ( ) - 1 ) ; <nl> - ColumnFamily newCf = discardLast ( last . cf ) ; <nl> + ColumnFamily newCf = isReversed ( ) <nl> + ? discardFirst ( last . cf ) <nl> + : discardLast ( last . cf ) ; <nl> <nl> int count = newCf . getColumnCount ( ) ; <nl> List < Row > newRows = new ArrayList < Row > ( count = = 0 ? rows . size ( ) - 1 : rows . size ( ) ) ; <nl> @ @ - 200 , 11 + 205 , 27 @ @ abstract class AbstractQueryPager implements QueryPager <nl> <nl> private ColumnFamily discardFirst ( ColumnFamily cf ) <nl> { <nl> + boolean isReversed = isReversed ( ) ; <nl> + DeletionInfo . InOrderTester tester = cf . deletionInfo ( ) . inOrderTester ( isReversed ) ; <nl> + return isReversed <nl> + ? discardTail ( cf , cf . reverseIterator ( ) , tester ) <nl> + : discardHead ( cf , cf . iterator ( ) , tester ) ; <nl> + } <nl> + <nl> + private ColumnFamily discardLast ( ColumnFamily cf ) <nl> + { <nl> + boolean isReversed = isReversed ( ) ; <nl> + DeletionInfo . InOrderTester tester = cf . deletionInfo ( ) . inOrderTester ( isReversed ) ; <nl> + return isReversed <nl> + ? discardHead ( cf , cf . reverseIterator ( ) , tester ) <nl> + : discardTail ( cf , cf . iterator ( ) , tester ) ; <nl> + } <nl> + <nl> + private ColumnFamily discardHead ( ColumnFamily cf , Iterator < Column > iter , DeletionInfo . InOrderTester tester ) <nl> + { <nl> ColumnFamily copy = cf . cloneMeShallow ( ) ; <nl> ColumnCounter counter = columnCounter ( ) ; <nl> <nl> - Iterator < Column > iter = cf . iterator ( ) ; <nl> - DeletionInfo . InOrderTester tester = cf . inOrderDeletionTester ( ) ; <nl> / / Discard the first live <nl> while ( iter . hasNext ( ) ) <nl> { <nl> @ @ - 220 , 22 + 241 , 24 @ @ abstract class AbstractQueryPager implements QueryPager <nl> return copy ; <nl> } <nl> <nl> - private ColumnFamily discardLast ( ColumnFamily cf ) <nl> + private ColumnFamily discardTail ( ColumnFamily cf , Iterator < Column > iter , DeletionInfo . InOrderTester tester ) <nl> { <nl> ColumnFamily copy = cf . cloneMeShallow ( ) ; <nl> - / / Redoing the counting like that is not extremely efficient , but <nl> - / / discardLast is only called in case of a race between paging and <nl> - / / a deletion , which is pretty unlikely , so probably not a big deal <nl> + / / Redoing the counting like that is not extremely efficient . <nl> + / / This is called only for reversed slices or in the case of a race between <nl> + / / paging and a deletion ( pretty unlikely ) , so this is probably acceptable . <nl> int liveCount = columnCounter ( ) . countAll ( cf ) . live ( ) ; <nl> <nl> ColumnCounter counter = columnCounter ( ) ; <nl> - DeletionInfo . InOrderTester tester = cf . inOrderDeletionTester ( ) ; <nl> / / Discard the first live <nl> - for ( Column c : cf ) <nl> + while ( iter . hasNext ( ) ) <nl> { <nl> + Column c = iter . next ( ) ; <nl> counter . count ( c , tester ) ; <nl> - if ( counter . live ( ) < liveCount ) <nl> - copy . addColumn ( c ) ; <nl> + if ( counter . live ( ) > = liveCount ) <nl> + break ; <nl> + <nl> + copy . addColumn ( c ) ; <nl> } <nl> return copy ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / pager / RangeNamesQueryPager . java b / src / java / org / apache / cassandra / service / pager / RangeNamesQueryPager . java <nl> index 57fb05b . . e3b0cf8 100644 <nl> - - - a / src / java / org / apache / cassandra / service / pager / RangeNamesQueryPager . java <nl> + + + b / src / java / org / apache / cassandra / service / pager / RangeNamesQueryPager . java <nl> @ @ - 91 , 6 + 91 , 11 @ @ public class RangeNamesQueryPager extends AbstractQueryPager <nl> return false ; <nl> } <nl> <nl> + protected boolean isReversed ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> private AbstractBounds < RowPosition > makeExcludingKeyBounds ( RowPosition lastReturnedKey ) <nl> { <nl> / / We return a range that always exclude lastReturnedKey , since we ' ve already <nl> diff - - git a / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java b / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java <nl> index 42a9585 . . 1f4ba78 100644 <nl> - - - a / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java <nl> + + + b / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java <nl> @ @ - 91 , 16 + 91 , 21 @ @ public class RangeSliceQueryPager extends AbstractQueryPager <nl> { <nl> return lastReturnedKey ! = null <nl> & & lastReturnedKey . equals ( first . key ) <nl> - & & lastReturnedName . equals ( firstName ( first . cf ) ) ; <nl> + & & lastReturnedName . equals ( isReversed ( ) ? lastName ( first . cf ) : firstName ( first . cf ) ) ; <nl> } <nl> <nl> protected boolean recordLast ( Row last ) <nl> { <nl> lastReturnedKey = last . key ; <nl> - lastReturnedName = lastName ( last . cf ) ; <nl> + lastReturnedName = isReversed ( ) ? firstName ( last . cf ) : lastName ( last . cf ) ; <nl> return true ; <nl> } <nl> <nl> + protected boolean isReversed ( ) <nl> + { <nl> + return ( ( SliceQueryFilter ) command . predicate ) . reversed ; <nl> + } <nl> + <nl> private AbstractBounds < RowPosition > makeIncludingKeyBounds ( RowPosition lastReturnedKey ) <nl> { <nl> / / We always include lastReturnedKey since we may still be paging within a row , <nl> diff - - git a / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java b / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java <nl> index 1d77144 . . e3825a9 100644 <nl> - - - a / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java <nl> + + + b / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java <nl> @ @ - 76 , 12 + 76 , 17 @ @ public class SliceQueryPager extends AbstractQueryPager implements SinglePartiti <nl> <nl> protected boolean containsPreviousLast ( Row first ) <nl> { <nl> - return lastReturned ! = null & & lastReturned . equals ( firstName ( first . cf ) ) ; <nl> + return lastReturned ! = null & & lastReturned . equals ( isReversed ( ) ? lastName ( first . cf ) : firstName ( first . cf ) ) ; <nl> } <nl> <nl> protected boolean recordLast ( Row last ) <nl> { <nl> - lastReturned = lastName ( last . cf ) ; <nl> + lastReturned = isReversed ( ) ? firstName ( last . cf ) : lastName ( last . cf ) ; <nl> return true ; <nl> } <nl> + <nl> + protected boolean isReversed ( ) <nl> + { <nl> + return command . filter . reversed ; <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / service / QueryPagerTest . java b / test / unit / org / apache / cassandra / service / QueryPagerTest . java <nl> index 3fc2ac2 . . f395cf4 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / QueryPagerTest . java <nl> + + + b / test / unit / org / apache / cassandra / service / QueryPagerTest . java <nl> @ @ - 117 , 7 + 117 , 12 @ @ public class QueryPagerTest extends SchemaLoader <nl> <nl> private static ReadCommand sliceQuery ( String key , String start , String end , int count ) <nl> { <nl> - SliceQueryFilter filter = new SliceQueryFilter ( bytes ( start ) , bytes ( end ) , false , count ) ; <nl> + return sliceQuery ( key , start , end , false , count ) ; <nl> + } <nl> + <nl> + private static ReadCommand sliceQuery ( String key , String start , String end , boolean reversed , int count ) <nl> + { <nl> + SliceQueryFilter filter = new SliceQueryFilter ( bytes ( start ) , bytes ( end ) , reversed , count ) ; <nl> / / Note : for MultiQueryTest , we need the same timestamp / expireBefore for all queries , so we just use 0 as it doesn ' t matter here . <nl> return new SliceFromReadCommand ( KS , bytes ( key ) , CF , 0 , filter ) ; <nl> } <nl> @ @ - 188 , 6 + 193 , 31 @ @ public class QueryPagerTest extends SchemaLoader <nl> } <nl> <nl> @ Test <nl> + public void reversedSliceQueryTest ( ) throws Exception <nl> + { <nl> + QueryPager pager = QueryPagers . localPager ( sliceQuery ( " k0 " , " c8 " , " c1 " , true , 10 ) ) ; <nl> + <nl> + List < Row > page ; <nl> + <nl> + assertFalse ( pager . isExhausted ( ) ) ; <nl> + page = pager . fetchPage ( 3 ) ; <nl> + assertEquals ( toString ( page ) , 1 , page . size ( ) ) ; <nl> + assertRow ( page . get ( 0 ) , " k0 " , " c6 " , " c7 " , " c8 " ) ; <nl> + <nl> + assertFalse ( pager . isExhausted ( ) ) ; <nl> + page = pager . fetchPage ( 3 ) ; <nl> + assertEquals ( toString ( page ) , 1 , page . size ( ) ) ; <nl> + assertRow ( page . get ( 0 ) , " k0 " , " c3 " , " c4 " , " c5 " ) ; <nl> + <nl> + assertFalse ( pager . isExhausted ( ) ) ; <nl> + page = pager . fetchPage ( 3 ) ; <nl> + assertEquals ( toString ( page ) , 1 , page . size ( ) ) ; <nl> + assertRow ( page . get ( 0 ) , " k0 " , " c1 " , " c2 " ) ; <nl> + <nl> + assertTrue ( pager . isExhausted ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void MultiQueryTest ( ) throws Exception <nl> { <nl> QueryPager pager = QueryPagers . localPager ( new Pageable . ReadCommands ( new ArrayList < ReadCommand > ( ) { {

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 23bb4f1 . . ed7ce30 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 24 , 7 + 24 , 6 @ @ 
 * Add cardinality estimator for key count estimation ( CASSANDRA - 5906 ) 
 * CF id is changed to be non - deterministic . Data dir / key cache are created 
 uniquely for CF id ( CASSANDRA - 5202 ) 
 - * Cassandra won ' t start by default without jna ( CASSANDRA - 6575 ) 
 * New counters implementation ( CASSANDRA - 6504 ) 
 
 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index 0cadf96 . . c61981d 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 138 , 20 + 138 , 6 @ @ public class CassandraDaemon 
 * / 
 logger . info ( " Heap size : { } / { } " , Runtime . getRuntime ( ) . totalMemory ( ) , Runtime . getRuntime ( ) . maxMemory ( ) ) ; 
 logger . info ( " Classpath : { } " , System . getProperty ( " java . class . path " ) ) ; 
 - 
 - / / Fail - fast if JNA is not available or failing to initialize properly 
 - / / except with - Dcassandra . boot _ without _ jna = true . See CASSANDRA - 6575 . 
 - if ( ! CLibrary . jnaAvailable ( ) ) 
 - { 
 - boolean jnaRequired = ! Boolean . getBoolean ( " cassandra . boot _ without _ jna " ) ; 
 - 
 - if ( jnaRequired ) 
 - { 
 - logger . error ( " JNA failing to initialize properly . Use - Dcassandra . boot _ without _ jna = true to bootstrap even so . " ) ; 
 - System . exit ( 3 ) ; 
 - } 
 - } 
 - 
 CLibrary . tryMlockall ( ) ; 
 
 Thread . setDefaultUncaughtExceptionHandler ( new Thread . UncaughtExceptionHandler ( ) 
 diff - - git a / src / java / org / apache / cassandra / utils / CLibrary . java b / src / java / org / apache / cassandra / utils / CLibrary . java 
 index 4dd5223 . . a7ff815 100644 
 - - - a / src / java / org / apache / cassandra / utils / CLibrary . java 
 + + + b / src / java / org / apache / cassandra / utils / CLibrary . java 
 @ @ - 60 , 11 + 60 , 11 @ @ public final class CLibrary 
 } 
 catch ( NoClassDefFoundError e ) 
 { 
 - logger . warn ( " JNA not found . Native methods will be disabled . " ) ; 
 + logger . info ( " JNA not found . Native methods will be disabled . " ) ; 
 } 
 catch ( UnsatisfiedLinkError e ) 
 { 
 - logger . warn ( " JNA link failure , one or more native method will be unavailable . " ) ; 
 + logger . info ( " JNA link failure , one or more native method will be unavailable . " ) ; 
 logger . debug ( " JNA link failure details : { } " , e . getMessage ( ) ) ; 
 } 
 catch ( NoSuchMethodError e )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e4f1862 . . 159e8de 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 20 , 6 + 20 , 7 @ @ 
 * Fix serialization bug in PagedRange with 2ndary indexes ( CASSANDRA - 6299 ) 
 * Fix CQL3 table validation in Thrift ( CASSANDRA - 6140 ) 
 * Fix bug missing results with IN clauses ( CASSANDRA - 6327 ) 
 + * Fix paging with reversed slices ( CASSANDRA - 6343 ) 
 Merged from 1 . 2 : 
 * add non - jamm path for cached statements ( CASSANDRA - 6293 ) 
 * ( Hadoop ) Require CFRR batchSize to be at least 2 ( CASSANDRA - 6114 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index b2c5ac4 . . 47b14b9 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 451 , 6 + 451 , 11 @ @ public abstract class ColumnFamily implements Iterable < Column > , IRowCacheEntry 
 return getSortedColumns ( ) . iterator ( ) ; 
 } 
 
 + public Iterator < Column > reverseIterator ( ) 
 + { 
 + return getReverseSortedColumns ( ) . iterator ( ) ; 
 + } 
 + 
 public boolean hasIrrelevantData ( int gcBefore ) 
 { 
 / / Do we have gcable deletion infos ? 
 diff - - git a / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java b / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java 
 index 62cd454 . . d040203 100644 
 - - - a / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java 
 + + + b / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java 
 @ @ - 93 , 7 + 93 , 7 @ @ abstract class AbstractQueryPager implements QueryPager 
 remaining + + ; 
 } 
 / / Otherwise , if ' lastWasRecorded ' , we queried for one more than the page size , 
 - / / so if the page was is full , trim the last entry 
 + / / so if the page is full , trim the last entry 
 else if ( lastWasRecorded & & ! exhausted ) 
 { 
 / / We ' ve asked for one more than necessary 
 @ @ - 161 , 11 + 161 , 14 @ @ abstract class AbstractQueryPager implements QueryPager 
 protected abstract List < Row > queryNextPage ( int pageSize , ConsistencyLevel consistency , boolean localQuery ) throws RequestValidationException , RequestExecutionException ; 
 protected abstract boolean containsPreviousLast ( Row first ) ; 
 protected abstract boolean recordLast ( Row last ) ; 
 + protected abstract boolean isReversed ( ) ; 
 
 private List < Row > discardFirst ( List < Row > rows ) 
 { 
 Row first = rows . get ( 0 ) ; 
 - ColumnFamily newCf = discardFirst ( first . cf ) ; 
 + ColumnFamily newCf = isReversed ( ) 
 + ? discardLast ( first . cf ) 
 + : discardFirst ( first . cf ) ; 
 
 int count = newCf . getColumnCount ( ) ; 
 List < Row > newRows = new ArrayList < Row > ( count = = 0 ? rows . size ( ) - 1 : rows . size ( ) ) ; 
 @ @ - 179 , 7 + 182 , 9 @ @ abstract class AbstractQueryPager implements QueryPager 
 private List < Row > discardLast ( List < Row > rows ) 
 { 
 Row last = rows . get ( rows . size ( ) - 1 ) ; 
 - ColumnFamily newCf = discardLast ( last . cf ) ; 
 + ColumnFamily newCf = isReversed ( ) 
 + ? discardFirst ( last . cf ) 
 + : discardLast ( last . cf ) ; 
 
 int count = newCf . getColumnCount ( ) ; 
 List < Row > newRows = new ArrayList < Row > ( count = = 0 ? rows . size ( ) - 1 : rows . size ( ) ) ; 
 @ @ - 200 , 11 + 205 , 27 @ @ abstract class AbstractQueryPager implements QueryPager 
 
 private ColumnFamily discardFirst ( ColumnFamily cf ) 
 { 
 + boolean isReversed = isReversed ( ) ; 
 + DeletionInfo . InOrderTester tester = cf . deletionInfo ( ) . inOrderTester ( isReversed ) ; 
 + return isReversed 
 + ? discardTail ( cf , cf . reverseIterator ( ) , tester ) 
 + : discardHead ( cf , cf . iterator ( ) , tester ) ; 
 + } 
 + 
 + private ColumnFamily discardLast ( ColumnFamily cf ) 
 + { 
 + boolean isReversed = isReversed ( ) ; 
 + DeletionInfo . InOrderTester tester = cf . deletionInfo ( ) . inOrderTester ( isReversed ) ; 
 + return isReversed 
 + ? discardHead ( cf , cf . reverseIterator ( ) , tester ) 
 + : discardTail ( cf , cf . iterator ( ) , tester ) ; 
 + } 
 + 
 + private ColumnFamily discardHead ( ColumnFamily cf , Iterator < Column > iter , DeletionInfo . InOrderTester tester ) 
 + { 
 ColumnFamily copy = cf . cloneMeShallow ( ) ; 
 ColumnCounter counter = columnCounter ( ) ; 
 
 - Iterator < Column > iter = cf . iterator ( ) ; 
 - DeletionInfo . InOrderTester tester = cf . inOrderDeletionTester ( ) ; 
 / / Discard the first live 
 while ( iter . hasNext ( ) ) 
 { 
 @ @ - 220 , 22 + 241 , 24 @ @ abstract class AbstractQueryPager implements QueryPager 
 return copy ; 
 } 
 
 - private ColumnFamily discardLast ( ColumnFamily cf ) 
 + private ColumnFamily discardTail ( ColumnFamily cf , Iterator < Column > iter , DeletionInfo . InOrderTester tester ) 
 { 
 ColumnFamily copy = cf . cloneMeShallow ( ) ; 
 - / / Redoing the counting like that is not extremely efficient , but 
 - / / discardLast is only called in case of a race between paging and 
 - / / a deletion , which is pretty unlikely , so probably not a big deal 
 + / / Redoing the counting like that is not extremely efficient . 
 + / / This is called only for reversed slices or in the case of a race between 
 + / / paging and a deletion ( pretty unlikely ) , so this is probably acceptable . 
 int liveCount = columnCounter ( ) . countAll ( cf ) . live ( ) ; 
 
 ColumnCounter counter = columnCounter ( ) ; 
 - DeletionInfo . InOrderTester tester = cf . inOrderDeletionTester ( ) ; 
 / / Discard the first live 
 - for ( Column c : cf ) 
 + while ( iter . hasNext ( ) ) 
 { 
 + Column c = iter . next ( ) ; 
 counter . count ( c , tester ) ; 
 - if ( counter . live ( ) < liveCount ) 
 - copy . addColumn ( c ) ; 
 + if ( counter . live ( ) > = liveCount ) 
 + break ; 
 + 
 + copy . addColumn ( c ) ; 
 } 
 return copy ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / pager / RangeNamesQueryPager . java b / src / java / org / apache / cassandra / service / pager / RangeNamesQueryPager . java 
 index 57fb05b . . e3b0cf8 100644 
 - - - a / src / java / org / apache / cassandra / service / pager / RangeNamesQueryPager . java 
 + + + b / src / java / org / apache / cassandra / service / pager / RangeNamesQueryPager . java 
 @ @ - 91 , 6 + 91 , 11 @ @ public class RangeNamesQueryPager extends AbstractQueryPager 
 return false ; 
 } 
 
 + protected boolean isReversed ( ) 
 + { 
 + return false ; 
 + } 
 + 
 private AbstractBounds < RowPosition > makeExcludingKeyBounds ( RowPosition lastReturnedKey ) 
 { 
 / / We return a range that always exclude lastReturnedKey , since we ' ve already 
 diff - - git a / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java b / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java 
 index 42a9585 . . 1f4ba78 100644 
 - - - a / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java 
 + + + b / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java 
 @ @ - 91 , 16 + 91 , 21 @ @ public class RangeSliceQueryPager extends AbstractQueryPager 
 { 
 return lastReturnedKey ! = null 
 & & lastReturnedKey . equals ( first . key ) 
 - & & lastReturnedName . equals ( firstName ( first . cf ) ) ; 
 + & & lastReturnedName . equals ( isReversed ( ) ? lastName ( first . cf ) : firstName ( first . cf ) ) ; 
 } 
 
 protected boolean recordLast ( Row last ) 
 { 
 lastReturnedKey = last . key ; 
 - lastReturnedName = lastName ( last . cf ) ; 
 + lastReturnedName = isReversed ( ) ? firstName ( last . cf ) : lastName ( last . cf ) ; 
 return true ; 
 } 
 
 + protected boolean isReversed ( ) 
 + { 
 + return ( ( SliceQueryFilter ) command . predicate ) . reversed ; 
 + } 
 + 
 private AbstractBounds < RowPosition > makeIncludingKeyBounds ( RowPosition lastReturnedKey ) 
 { 
 / / We always include lastReturnedKey since we may still be paging within a row , 
 diff - - git a / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java b / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java 
 index 1d77144 . . e3825a9 100644 
 - - - a / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java 
 + + + b / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java 
 @ @ - 76 , 12 + 76 , 17 @ @ public class SliceQueryPager extends AbstractQueryPager implements SinglePartiti 
 
 protected boolean containsPreviousLast ( Row first ) 
 { 
 - return lastReturned ! = null & & lastReturned . equals ( firstName ( first . cf ) ) ; 
 + return lastReturned ! = null & & lastReturned . equals ( isReversed ( ) ? lastName ( first . cf ) : firstName ( first . cf ) ) ; 
 } 
 
 protected boolean recordLast ( Row last ) 
 { 
 - lastReturned = lastName ( last . cf ) ; 
 + lastReturned = isReversed ( ) ? firstName ( last . cf ) : lastName ( last . cf ) ; 
 return true ; 
 } 
 + 
 + protected boolean isReversed ( ) 
 + { 
 + return command . filter . reversed ; 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / service / QueryPagerTest . java b / test / unit / org / apache / cassandra / service / QueryPagerTest . java 
 index 3fc2ac2 . . f395cf4 100644 
 - - - a / test / unit / org / apache / cassandra / service / QueryPagerTest . java 
 + + + b / test / unit / org / apache / cassandra / service / QueryPagerTest . java 
 @ @ - 117 , 7 + 117 , 12 @ @ public class QueryPagerTest extends SchemaLoader 
 
 private static ReadCommand sliceQuery ( String key , String start , String end , int count ) 
 { 
 - SliceQueryFilter filter = new SliceQueryFilter ( bytes ( start ) , bytes ( end ) , false , count ) ; 
 + return sliceQuery ( key , start , end , false , count ) ; 
 + } 
 + 
 + private static ReadCommand sliceQuery ( String key , String start , String end , boolean reversed , int count ) 
 + { 
 + SliceQueryFilter filter = new SliceQueryFilter ( bytes ( start ) , bytes ( end ) , reversed , count ) ; 
 / / Note : for MultiQueryTest , we need the same timestamp / expireBefore for all queries , so we just use 0 as it doesn ' t matter here . 
 return new SliceFromReadCommand ( KS , bytes ( key ) , CF , 0 , filter ) ; 
 } 
 @ @ - 188 , 6 + 193 , 31 @ @ public class QueryPagerTest extends SchemaLoader 
 } 
 
 @ Test 
 + public void reversedSliceQueryTest ( ) throws Exception 
 + { 
 + QueryPager pager = QueryPagers . localPager ( sliceQuery ( " k0 " , " c8 " , " c1 " , true , 10 ) ) ; 
 + 
 + List < Row > page ; 
 + 
 + assertFalse ( pager . isExhausted ( ) ) ; 
 + page = pager . fetchPage ( 3 ) ; 
 + assertEquals ( toString ( page ) , 1 , page . size ( ) ) ; 
 + assertRow ( page . get ( 0 ) , " k0 " , " c6 " , " c7 " , " c8 " ) ; 
 + 
 + assertFalse ( pager . isExhausted ( ) ) ; 
 + page = pager . fetchPage ( 3 ) ; 
 + assertEquals ( toString ( page ) , 1 , page . size ( ) ) ; 
 + assertRow ( page . get ( 0 ) , " k0 " , " c3 " , " c4 " , " c5 " ) ; 
 + 
 + assertFalse ( pager . isExhausted ( ) ) ; 
 + page = pager . fetchPage ( 3 ) ; 
 + assertEquals ( toString ( page ) , 1 , page . size ( ) ) ; 
 + assertRow ( page . get ( 0 ) , " k0 " , " c1 " , " c2 " ) ; 
 + 
 + assertTrue ( pager . isExhausted ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void MultiQueryTest ( ) throws Exception 
 { 
 QueryPager pager = QueryPagers . localPager ( new Pageable . ReadCommands ( new ArrayList < ReadCommand > ( ) { {
