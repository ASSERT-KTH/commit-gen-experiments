BLEU SCORE: 0.013139808552042212

TEST MSG: Don ' t wait for min _ threshold sstables in the same window in DTCS
GENERATED MSG: merge from 1 . 0

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index ed40a78 . . 0bcc5cb 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 14 : <nl> + * Do more aggressive compaction in old time windows in DTCS ( CASSANDRA - 8360 ) <nl> * java . lang . AssertionError when reading saved cache ( CASSANDRA - 8740 ) <nl> * " disk full " when running cleanup ( CASSANDRA - 9036 ) <nl> * Make PasswordAuthenticator number of hashing rounds configurable ( CASSANDRA - 8085 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategy . java <nl> index 9c708db . . 6b3e800 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategy . java <nl> @ @ - 103 , 7 + 103 , 11 @ @ public class DateTieredCompactionStrategy extends AbstractCompactionStrategy <nl> List < List < SSTableReader > > buckets = getBuckets ( createSSTableAndMinTimestampPairs ( candidates ) , options . baseTime , base , now ) ; <nl> logger . debug ( " Compaction buckets are { } " , buckets ) ; <nl> updateEstimatedCompactionsByTasks ( buckets ) ; <nl> - List < SSTableReader > mostInteresting = newestBucket ( buckets , cfs . getMinimumCompactionThreshold ( ) , cfs . getMaximumCompactionThreshold ( ) ) ; <nl> + List < SSTableReader > mostInteresting = newestBucket ( buckets , <nl> + cfs . getMinimumCompactionThreshold ( ) , <nl> + cfs . getMaximumCompactionThreshold ( ) , <nl> + options . baseTime , <nl> + now ) ; <nl> if ( ! mostInteresting . isEmpty ( ) ) <nl> return mostInteresting ; <nl> return null ; <nl> @ @ - 298 , 12 + 302 , 18 @ @ public class DateTieredCompactionStrategy extends AbstractCompactionStrategy <nl> * @ return a bucket ( list ) of sstables to compact . <nl> * / <nl> @ VisibleForTesting <nl> - static List < SSTableReader > newestBucket ( List < List < SSTableReader > > buckets , int minThreshold , int maxThreshold ) <nl> + static List < SSTableReader > newestBucket ( List < List < SSTableReader > > buckets , int minThreshold , int maxThreshold , long now , long baseTime ) <nl> { <nl> - / / Skip buckets containing less than minThreshold sstables , and limit other buckets to maxThreshold sstables . <nl> + / / If the " incoming window " has at least minThreshold SSTables , choose that one . <nl> + / / For any other bucket , at least 2 SSTables is enough . <nl> + / / In any case , limit to maxThreshold SSTables . <nl> + Target incomingWindow = getInitialTarget ( now , baseTime ) ; <nl> for ( List < SSTableReader > bucket : buckets ) <nl> - if ( bucket . size ( ) > = minThreshold ) <nl> + { <nl> + if ( bucket . size ( ) > = minThreshold | | <nl> + ( bucket . size ( ) > = 2 & & ! incomingWindow . onTarget ( bucket . get ( 0 ) . getMinTimestamp ( ) ) ) ) <nl> return trimToThreshold ( bucket , maxThreshold ) ; <nl> + } <nl> return Collections . emptyList ( ) ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / db / compaction / DateTieredCompactionStrategyTest . java b / test / unit / org / apache / cassandra / db / compaction / DateTieredCompactionStrategyTest . java <nl> index 7d48575 . . f98e372 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / DateTieredCompactionStrategyTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / DateTieredCompactionStrategyTest . java <nl> @ @ - 213 , 8 + 213 , 11 @ @ public class DateTieredCompactionStrategyTest extends SchemaLoader <nl> <nl> List < SSTableReader > sstrs = new ArrayList < > ( cfs . getSSTables ( ) ) ; <nl> <nl> - List < SSTableReader > newBucket = newestBucket ( Collections . singletonList ( sstrs . subList ( 0 , 2 ) ) , 4 , 32 ) ; <nl> - assertTrue ( " nothing should be returned when all buckets are below the min threshold " , newBucket . isEmpty ( ) ) ; <nl> + List < SSTableReader > newBucket = newestBucket ( Collections . singletonList ( sstrs . subList ( 0 , 2 ) ) , 4 , 32 , 9 , 10 ) ; <nl> + assertTrue ( " incoming bucket should not be accepted when it has below the min threshold SSTables " , newBucket . isEmpty ( ) ) ; <nl> + <nl> + newBucket = newestBucket ( Collections . singletonList ( sstrs . subList ( 0 , 2 ) ) , 4 , 32 , 10 , 10 ) ; <nl> + assertFalse ( " non - incoming bucket should be accepted when it has at least 2 SSTables " , newBucket . isEmpty ( ) ) ; <nl> <nl> assertEquals ( " an sstable with a single value should have equal min / max timestamps " , sstrs . get ( 0 ) . getMinTimestamp ( ) , sstrs . get ( 0 ) . getMaxTimestamp ( ) ) ; <nl> assertEquals ( " an sstable with a single value should have equal min / max timestamps " , sstrs . get ( 1 ) . getMinTimestamp ( ) , sstrs . get ( 1 ) . getMaxTimestamp ( ) ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d518830 . . 52cc2c1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 29 , 7 + 29 , 7 @ @ <nl> * add scheduler JMX metrics ( CASSANDRA - 2962 ) <nl> * add block level checksum for compressed data ( CASSANDRA - 1717 ) <nl> * make column family backed column map pluggable and introduce unsynchronized <nl> - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) <nl> + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) <nl> * refactoring of the secondary index api ( CASSANDRA - 2982 ) <nl> * make CL > ONE reads wait for digest reconciliation before returning <nl> ( CASSANDRA - 2494 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> index c316a85 . . 71c7213 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor <nl> this . reversed = reversed ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public AbstractType < ? > getComparator ( ) <nl> { <nl> return comparator ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 1239d1c . . 38bc0d7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer <nl> this . cfm = cfm ; <nl> } <nl> <nl> - public ColumnFamily cloneMeShallow ( ) <nl> + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) <nl> { <nl> - ColumnFamily cf = ColumnFamily . create ( cfm ) ; <nl> + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; <nl> / / since deletion info is immutable , aliasing it is fine <nl> cf . deletionInfo . set ( deletionInfo . get ( ) ) ; <nl> return cf ; <nl> } <nl> <nl> + public ColumnFamily cloneMeShallow ( ) <nl> + { <nl> + return cloneMeShallow ( columns . getFactory ( ) ) ; <nl> + } <nl> + <nl> public AbstractType getSubComparator ( ) <nl> { <nl> IColumnSerializer s = getColumnSerializer ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 0bfd1c5 . . 552d3e9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> - * tombstones that are no longer relevant . * / <nl> + / * * <nl> + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> + * tombstones that are no longer relevant . <nl> + * The returned column family won ' t be thread safe . <nl> + * / <nl> ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) <nl> { <nl> / / special case slicing the entire row : <nl> @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; <nl> if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) <nl> { <nl> - ColumnFamily cf = cached . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> if ( sc ! = null ) <nl> cf . addColumn ( sc , HeapAllocator . instance ) ; <nl> return removeDeleted ( cf , gcBefore ) ; <nl> @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> <nl> IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; <nl> - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; <nl> / / TODO this is necessary because when we collate supercolumns together , we don ' t check <nl> / / their subcolumns for relevance , so we need to do a second prune post facto here . <nl> diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> index 37f5a60 . . 624dec7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns <nl> public ISortedColumns cloneMe ( ) ; <nl> <nl> / * * <nl> + * Returns the factory used for this ISortedColumns implementation . <nl> + * / <nl> + public Factory getFactory ( ) ; <nl> + <nl> + / * * <nl> * Adds a column to this column map . <nl> * If a column with the same name is already present in the map , it will <nl> * be replaced by the newly added column . <nl> diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> index cd2488a . . 13a111a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new ThreadSafeSortedColumns ( this ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> index 34e83dc . . 6c3fc42 100644 <nl> - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new TreeMapBackedSortedColumns ( this ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index ed40a78 . . 0bcc5cb 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 14 : 
 + * Do more aggressive compaction in old time windows in DTCS ( CASSANDRA - 8360 ) 
 * java . lang . AssertionError when reading saved cache ( CASSANDRA - 8740 ) 
 * " disk full " when running cleanup ( CASSANDRA - 9036 ) 
 * Make PasswordAuthenticator number of hashing rounds configurable ( CASSANDRA - 8085 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategy . java 
 index 9c708db . . 6b3e800 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategy . java 
 @ @ - 103 , 7 + 103 , 11 @ @ public class DateTieredCompactionStrategy extends AbstractCompactionStrategy 
 List < List < SSTableReader > > buckets = getBuckets ( createSSTableAndMinTimestampPairs ( candidates ) , options . baseTime , base , now ) ; 
 logger . debug ( " Compaction buckets are { } " , buckets ) ; 
 updateEstimatedCompactionsByTasks ( buckets ) ; 
 - List < SSTableReader > mostInteresting = newestBucket ( buckets , cfs . getMinimumCompactionThreshold ( ) , cfs . getMaximumCompactionThreshold ( ) ) ; 
 + List < SSTableReader > mostInteresting = newestBucket ( buckets , 
 + cfs . getMinimumCompactionThreshold ( ) , 
 + cfs . getMaximumCompactionThreshold ( ) , 
 + options . baseTime , 
 + now ) ; 
 if ( ! mostInteresting . isEmpty ( ) ) 
 return mostInteresting ; 
 return null ; 
 @ @ - 298 , 12 + 302 , 18 @ @ public class DateTieredCompactionStrategy extends AbstractCompactionStrategy 
 * @ return a bucket ( list ) of sstables to compact . 
 * / 
 @ VisibleForTesting 
 - static List < SSTableReader > newestBucket ( List < List < SSTableReader > > buckets , int minThreshold , int maxThreshold ) 
 + static List < SSTableReader > newestBucket ( List < List < SSTableReader > > buckets , int minThreshold , int maxThreshold , long now , long baseTime ) 
 { 
 - / / Skip buckets containing less than minThreshold sstables , and limit other buckets to maxThreshold sstables . 
 + / / If the " incoming window " has at least minThreshold SSTables , choose that one . 
 + / / For any other bucket , at least 2 SSTables is enough . 
 + / / In any case , limit to maxThreshold SSTables . 
 + Target incomingWindow = getInitialTarget ( now , baseTime ) ; 
 for ( List < SSTableReader > bucket : buckets ) 
 - if ( bucket . size ( ) > = minThreshold ) 
 + { 
 + if ( bucket . size ( ) > = minThreshold | | 
 + ( bucket . size ( ) > = 2 & & ! incomingWindow . onTarget ( bucket . get ( 0 ) . getMinTimestamp ( ) ) ) ) 
 return trimToThreshold ( bucket , maxThreshold ) ; 
 + } 
 return Collections . emptyList ( ) ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / db / compaction / DateTieredCompactionStrategyTest . java b / test / unit / org / apache / cassandra / db / compaction / DateTieredCompactionStrategyTest . java 
 index 7d48575 . . f98e372 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / DateTieredCompactionStrategyTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / DateTieredCompactionStrategyTest . java 
 @ @ - 213 , 8 + 213 , 11 @ @ public class DateTieredCompactionStrategyTest extends SchemaLoader 
 
 List < SSTableReader > sstrs = new ArrayList < > ( cfs . getSSTables ( ) ) ; 
 
 - List < SSTableReader > newBucket = newestBucket ( Collections . singletonList ( sstrs . subList ( 0 , 2 ) ) , 4 , 32 ) ; 
 - assertTrue ( " nothing should be returned when all buckets are below the min threshold " , newBucket . isEmpty ( ) ) ; 
 + List < SSTableReader > newBucket = newestBucket ( Collections . singletonList ( sstrs . subList ( 0 , 2 ) ) , 4 , 32 , 9 , 10 ) ; 
 + assertTrue ( " incoming bucket should not be accepted when it has below the min threshold SSTables " , newBucket . isEmpty ( ) ) ; 
 + 
 + newBucket = newestBucket ( Collections . singletonList ( sstrs . subList ( 0 , 2 ) ) , 4 , 32 , 10 , 10 ) ; 
 + assertFalse ( " non - incoming bucket should be accepted when it has at least 2 SSTables " , newBucket . isEmpty ( ) ) ; 
 
 assertEquals ( " an sstable with a single value should have equal min / max timestamps " , sstrs . get ( 0 ) . getMinTimestamp ( ) , sstrs . get ( 0 ) . getMaxTimestamp ( ) ) ; 
 assertEquals ( " an sstable with a single value should have equal min / max timestamps " , sstrs . get ( 1 ) . getMinTimestamp ( ) , sstrs . get ( 1 ) . getMaxTimestamp ( ) ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d518830 . . 52cc2c1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 29 , 7 + 29 , 7 @ @ 
 * add scheduler JMX metrics ( CASSANDRA - 2962 ) 
 * add block level checksum for compressed data ( CASSANDRA - 1717 ) 
 * make column family backed column map pluggable and introduce unsynchronized 
 - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) 
 + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) 
 * refactoring of the secondary index api ( CASSANDRA - 2982 ) 
 * make CL > ONE reads wait for digest reconciliation before returning 
 ( CASSANDRA - 2494 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 index c316a85 . . 71c7213 100644 
 - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor 
 this . reversed = reversed ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public AbstractType < ? > getComparator ( ) 
 { 
 return comparator ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 1239d1c . . 38bc0d7 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer 
 this . cfm = cfm ; 
 } 
 
 - public ColumnFamily cloneMeShallow ( ) 
 + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) 
 { 
 - ColumnFamily cf = ColumnFamily . create ( cfm ) ; 
 + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; 
 / / since deletion info is immutable , aliasing it is fine 
 cf . deletionInfo . set ( deletionInfo . get ( ) ) ; 
 return cf ; 
 } 
 
 + public ColumnFamily cloneMeShallow ( ) 
 + { 
 + return cloneMeShallow ( columns . getFactory ( ) ) ; 
 + } 
 + 
 public AbstractType getSubComparator ( ) 
 { 
 IColumnSerializer s = getColumnSerializer ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 0bfd1c5 . . 552d3e9 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 - * tombstones that are no longer relevant . * / 
 + / * * 
 + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 + * tombstones that are no longer relevant . 
 + * The returned column family won ' t be thread safe . 
 + * / 
 ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) 
 { 
 / / special case slicing the entire row : 
 @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; 
 if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) 
 { 
 - ColumnFamily cf = cached . cloneMeShallow ( ) ; 
 + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 if ( sc ! = null ) 
 cf . addColumn ( sc , HeapAllocator . instance ) ; 
 return removeDeleted ( cf , gcBefore ) ; 
 @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 
 IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; 
 - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; 
 + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; 
 / / TODO this is necessary because when we collate supercolumns together , we don ' t check 
 / / their subcolumns for relevance , so we need to do a second prune post facto here . 
 diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 index 37f5a60 . . 624dec7 100644 
 - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns 
 public ISortedColumns cloneMe ( ) ; 
 
 / * * 
 + * Returns the factory used for this ISortedColumns implementation . 
 + * / 
 + public Factory getFactory ( ) ; 
 + 
 + / * * 
 * Adds a column to this column map . 
 * If a column with the same name is already present in the map , it will 
 * be replaced by the newly added column . 
 diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 index cd2488a . . 13a111a 100644 
 - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new ThreadSafeSortedColumns ( this ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 index 34e83dc . . 6c3fc42 100644 
 - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new TreeMapBackedSortedColumns ( this ) ;
