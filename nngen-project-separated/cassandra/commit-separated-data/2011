BLEU SCORE: 0.392814650900513

TEST MSG: Add column update delta histogram ( 2 . 1 )
GENERATED MSG: Add column update delta histogram

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java b / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java <nl> index 7b5e8a8 . . 372ce5c 100644 <nl> - - - a / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java <nl> @ @ - 35 , 7 + 35 , 7 @ @ import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . db . composites . CellName ; <nl> import org . apache . cassandra . db . composites . Composite ; <nl> import org . apache . cassandra . db . filter . ColumnSlice ; <nl> - import org . apache . cassandra . utils . ObjectSizes ; <nl> + import org . apache . cassandra . utils . * ; <nl> import org . apache . cassandra . utils . btree . BTree ; <nl> import org . apache . cassandra . utils . btree . UpdateFunction ; <nl> import org . apache . cassandra . utils . concurrent . Locks ; <nl> @ @ - 189 , 7 + 189 , 7 @ @ public class AtomicBTreeColumns extends ColumnFamily <nl> * <nl> * @ return the difference in size seen after merging the given columns <nl> * / <nl> - public long addAllWithSizeDelta ( final ColumnFamily cm , MemtableAllocator allocator , OpOrder . Group writeOp , Updater indexer ) <nl> + public Pair < Long , Long > addAllWithSizeDelta ( final ColumnFamily cm , MemtableAllocator allocator , OpOrder . Group writeOp , Updater indexer ) <nl> { <nl> ColumnUpdater updater = new ColumnUpdater ( this , cm . metadata , allocator , writeOp , indexer ) ; <nl> DeletionInfo inputDeletionInfoCopy = null ; <nl> @ @ - 228 , 7 + 228 , 7 @ @ public class AtomicBTreeColumns extends ColumnFamily <nl> { <nl> indexer . updateRowLevelIndexes ( ) ; <nl> updater . finish ( ) ; <nl> - return updater . dataSize ; <nl> + return Pair . create ( updater . dataSize , updater . colUpdateTimeDelta ) ; <nl> } <nl> else if ( ! monitorOwned ) <nl> { <nl> @ @ - 420 , 6 + 420 , 7 @ @ public class AtomicBTreeColumns extends ColumnFamily <nl> Holder ref ; <nl> long dataSize ; <nl> long heapSize ; <nl> + long colUpdateTimeDelta = Long . MAX _ VALUE ; <nl> final MemtableAllocator . DataReclaimer reclaimer ; <nl> List < Cell > inserted ; / / TODO : replace with walk of aborted BTree <nl> <nl> @ @ - 458 , 6 + 459 , 8 @ @ public class AtomicBTreeColumns extends ColumnFamily <nl> inserted = new ArrayList < > ( ) ; <nl> inserted . add ( reconciled ) ; <nl> discard ( existing ) ; <nl> + / / Getting the minimum delta for an update containing multiple columns <nl> + colUpdateTimeDelta = Math . min ( Math . abs ( existing . timestamp ( ) - update . timestamp ( ) ) , colUpdateTimeDelta ) ; <nl> } <nl> return reconciled ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 184399a . . 0541608 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1140 , 9 + 1140 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> long start = System . nanoTime ( ) ; <nl> <nl> Memtable mt = data . getMemtableFor ( opGroup ) ; <nl> - mt . put ( key , columnFamily , indexer , opGroup , replayPosition ) ; <nl> + final long timeDelta = mt . put ( key , columnFamily , indexer , opGroup , replayPosition ) ; <nl> maybeUpdateRowCache ( key ) ; <nl> metric . writeLatency . addNano ( System . nanoTime ( ) - start ) ; <nl> + if ( timeDelta < Long . MAX _ VALUE ) <nl> + metric . colUpdateTimeDeltaHistogram . update ( timeDelta ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java <nl> index b0d2a11 . . ba3864f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Memtable . java <nl> + + + b / src / java / org / apache / cassandra / db / Memtable . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import java . util . concurrent . atomic . AtomicLong ; <nl> import java . util . concurrent . atomic . AtomicReference ; <nl> <nl> import com . google . common . base . Throwables ; <nl> + import org . apache . cassandra . utils . * ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 43 , 8 + 44 , 6 @ @ import org . apache . cassandra . io . sstable . SSTableWriter ; <nl> import org . apache . cassandra . io . sstable . metadata . MetadataCollector ; <nl> import org . apache . cassandra . io . util . DiskAwareRunnable ; <nl> import org . apache . cassandra . service . ActiveRepairService ; <nl> - import org . apache . cassandra . utils . ByteBufferUtil ; <nl> - import org . apache . cassandra . utils . ObjectSizes ; <nl> import org . apache . cassandra . utils . concurrent . OpOrder ; <nl> import org . apache . cassandra . utils . memory . * ; <nl> <nl> @ @ - 151 , 7 + 150 , 7 @ @ public class Memtable <nl> * <nl> * replayPosition should only be null if this is a secondary index , in which case it is * expected * to be null <nl> * / <nl> - void put ( DecoratedKey key , ColumnFamily cf , SecondaryIndexManager . Updater indexer , OpOrder . Group opGroup , ReplayPosition replayPosition ) <nl> + long put ( DecoratedKey key , ColumnFamily cf , SecondaryIndexManager . Updater indexer , OpOrder . Group opGroup , ReplayPosition replayPosition ) <nl> { <nl> if ( replayPosition ! = null & & writeBarrier ! = null ) <nl> { <nl> @ @ - 189 , 8 + 188 , 10 @ @ public class Memtable <nl> } <nl> } <nl> <nl> - liveDataSize . addAndGet ( previous . addAllWithSizeDelta ( cf , allocator , opGroup , indexer ) ) ; <nl> + final Pair < Long , Long > pair = previous . addAllWithSizeDelta ( cf , allocator , opGroup , indexer ) ; <nl> + liveDataSize . addAndGet ( pair . left ) ; <nl> currentOperations . addAndGet ( cf . getColumnCount ( ) + ( cf . isMarkedForDelete ( ) ? 1 : 0 ) + cf . deletionInfo ( ) . rangeCount ( ) ) ; <nl> + return pair . right ; <nl> } <nl> <nl> / / for debugging <nl> diff - - git a / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java b / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java <nl> index 8ab432e . . d9d3ed9 100644 <nl> - - - a / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java <nl> + + + b / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java <nl> @ @ - 101 , 6 + 101 , 8 @ @ public class ColumnFamilyMetrics <nl> public final ColumnFamilyHistogram tombstoneScannedHistogram ; <nl> / * * Live cells scanned in queries on this CF * / <nl> public final ColumnFamilyHistogram liveScannedHistogram ; <nl> + / * * Column update time delta on this CF * / <nl> + public final ColumnFamilyHistogram colUpdateTimeDeltaHistogram ; <nl> / * * Disk space used by snapshot files which * / <nl> public final Gauge < Long > trueSnapshotsSize ; <nl> / * * Row cache hits , but result out of range * / <nl> @ @ - 497 , 6 + 499 , 7 @ @ public class ColumnFamilyMetrics <nl> } ) ; <nl> tombstoneScannedHistogram = createColumnFamilyHistogram ( " TombstoneScannedHistogram " , cfs . keyspace . metric . tombstoneScannedHistogram ) ; <nl> liveScannedHistogram = createColumnFamilyHistogram ( " LiveScannedHistogram " , cfs . keyspace . metric . liveScannedHistogram ) ; <nl> + colUpdateTimeDeltaHistogram = createColumnFamilyHistogram ( " ColUpdateTimeDeltaHistogram " , cfs . keyspace . metric . colUpdateTimeDeltaHistogram ) ; <nl> coordinatorReadLatency = Metrics . newTimer ( factory . createMetricName ( " CoordinatorReadLatency " ) , TimeUnit . MICROSECONDS , TimeUnit . SECONDS ) ; <nl> coordinatorScanLatency = Metrics . newTimer ( factory . createMetricName ( " CoordinatorScanLatency " ) , TimeUnit . MICROSECONDS , TimeUnit . SECONDS ) ; <nl> waitingOnFreeMemtableSpace = Metrics . newTimer ( factory . createMetricName ( " WaitingOnFreeMemtableSpace " ) , TimeUnit . MICROSECONDS , TimeUnit . SECONDS ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java b / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java 
 index 7b5e8a8 . . 372ce5c 100644 
 - - - a / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java 
 + + + b / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java 
 @ @ - 35 , 7 + 35 , 7 @ @ import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . db . composites . CellName ; 
 import org . apache . cassandra . db . composites . Composite ; 
 import org . apache . cassandra . db . filter . ColumnSlice ; 
 - import org . apache . cassandra . utils . ObjectSizes ; 
 + import org . apache . cassandra . utils . * ; 
 import org . apache . cassandra . utils . btree . BTree ; 
 import org . apache . cassandra . utils . btree . UpdateFunction ; 
 import org . apache . cassandra . utils . concurrent . Locks ; 
 @ @ - 189 , 7 + 189 , 7 @ @ public class AtomicBTreeColumns extends ColumnFamily 
 * 
 * @ return the difference in size seen after merging the given columns 
 * / 
 - public long addAllWithSizeDelta ( final ColumnFamily cm , MemtableAllocator allocator , OpOrder . Group writeOp , Updater indexer ) 
 + public Pair < Long , Long > addAllWithSizeDelta ( final ColumnFamily cm , MemtableAllocator allocator , OpOrder . Group writeOp , Updater indexer ) 
 { 
 ColumnUpdater updater = new ColumnUpdater ( this , cm . metadata , allocator , writeOp , indexer ) ; 
 DeletionInfo inputDeletionInfoCopy = null ; 
 @ @ - 228 , 7 + 228 , 7 @ @ public class AtomicBTreeColumns extends ColumnFamily 
 { 
 indexer . updateRowLevelIndexes ( ) ; 
 updater . finish ( ) ; 
 - return updater . dataSize ; 
 + return Pair . create ( updater . dataSize , updater . colUpdateTimeDelta ) ; 
 } 
 else if ( ! monitorOwned ) 
 { 
 @ @ - 420 , 6 + 420 , 7 @ @ public class AtomicBTreeColumns extends ColumnFamily 
 Holder ref ; 
 long dataSize ; 
 long heapSize ; 
 + long colUpdateTimeDelta = Long . MAX _ VALUE ; 
 final MemtableAllocator . DataReclaimer reclaimer ; 
 List < Cell > inserted ; / / TODO : replace with walk of aborted BTree 
 
 @ @ - 458 , 6 + 459 , 8 @ @ public class AtomicBTreeColumns extends ColumnFamily 
 inserted = new ArrayList < > ( ) ; 
 inserted . add ( reconciled ) ; 
 discard ( existing ) ; 
 + / / Getting the minimum delta for an update containing multiple columns 
 + colUpdateTimeDelta = Math . min ( Math . abs ( existing . timestamp ( ) - update . timestamp ( ) ) , colUpdateTimeDelta ) ; 
 } 
 return reconciled ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 184399a . . 0541608 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1140 , 9 + 1140 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 long start = System . nanoTime ( ) ; 
 
 Memtable mt = data . getMemtableFor ( opGroup ) ; 
 - mt . put ( key , columnFamily , indexer , opGroup , replayPosition ) ; 
 + final long timeDelta = mt . put ( key , columnFamily , indexer , opGroup , replayPosition ) ; 
 maybeUpdateRowCache ( key ) ; 
 metric . writeLatency . addNano ( System . nanoTime ( ) - start ) ; 
 + if ( timeDelta < Long . MAX _ VALUE ) 
 + metric . colUpdateTimeDeltaHistogram . update ( timeDelta ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java 
 index b0d2a11 . . ba3864f 100644 
 - - - a / src / java / org / apache / cassandra / db / Memtable . java 
 + + + b / src / java / org / apache / cassandra / db / Memtable . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import java . util . concurrent . atomic . AtomicLong ; 
 import java . util . concurrent . atomic . AtomicReference ; 
 
 import com . google . common . base . Throwables ; 
 + import org . apache . cassandra . utils . * ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 43 , 8 + 44 , 6 @ @ import org . apache . cassandra . io . sstable . SSTableWriter ; 
 import org . apache . cassandra . io . sstable . metadata . MetadataCollector ; 
 import org . apache . cassandra . io . util . DiskAwareRunnable ; 
 import org . apache . cassandra . service . ActiveRepairService ; 
 - import org . apache . cassandra . utils . ByteBufferUtil ; 
 - import org . apache . cassandra . utils . ObjectSizes ; 
 import org . apache . cassandra . utils . concurrent . OpOrder ; 
 import org . apache . cassandra . utils . memory . * ; 
 
 @ @ - 151 , 7 + 150 , 7 @ @ public class Memtable 
 * 
 * replayPosition should only be null if this is a secondary index , in which case it is * expected * to be null 
 * / 
 - void put ( DecoratedKey key , ColumnFamily cf , SecondaryIndexManager . Updater indexer , OpOrder . Group opGroup , ReplayPosition replayPosition ) 
 + long put ( DecoratedKey key , ColumnFamily cf , SecondaryIndexManager . Updater indexer , OpOrder . Group opGroup , ReplayPosition replayPosition ) 
 { 
 if ( replayPosition ! = null & & writeBarrier ! = null ) 
 { 
 @ @ - 189 , 8 + 188 , 10 @ @ public class Memtable 
 } 
 } 
 
 - liveDataSize . addAndGet ( previous . addAllWithSizeDelta ( cf , allocator , opGroup , indexer ) ) ; 
 + final Pair < Long , Long > pair = previous . addAllWithSizeDelta ( cf , allocator , opGroup , indexer ) ; 
 + liveDataSize . addAndGet ( pair . left ) ; 
 currentOperations . addAndGet ( cf . getColumnCount ( ) + ( cf . isMarkedForDelete ( ) ? 1 : 0 ) + cf . deletionInfo ( ) . rangeCount ( ) ) ; 
 + return pair . right ; 
 } 
 
 / / for debugging 
 diff - - git a / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java b / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java 
 index 8ab432e . . d9d3ed9 100644 
 - - - a / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java 
 + + + b / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java 
 @ @ - 101 , 6 + 101 , 8 @ @ public class ColumnFamilyMetrics 
 public final ColumnFamilyHistogram tombstoneScannedHistogram ; 
 / * * Live cells scanned in queries on this CF * / 
 public final ColumnFamilyHistogram liveScannedHistogram ; 
 + / * * Column update time delta on this CF * / 
 + public final ColumnFamilyHistogram colUpdateTimeDeltaHistogram ; 
 / * * Disk space used by snapshot files which * / 
 public final Gauge < Long > trueSnapshotsSize ; 
 / * * Row cache hits , but result out of range * / 
 @ @ - 497 , 6 + 499 , 7 @ @ public class ColumnFamilyMetrics 
 } ) ; 
 tombstoneScannedHistogram = createColumnFamilyHistogram ( " TombstoneScannedHistogram " , cfs . keyspace . metric . tombstoneScannedHistogram ) ; 
 liveScannedHistogram = createColumnFamilyHistogram ( " LiveScannedHistogram " , cfs . keyspace . metric . liveScannedHistogram ) ; 
 + colUpdateTimeDeltaHistogram = createColumnFamilyHistogram ( " ColUpdateTimeDeltaHistogram " , cfs . keyspace . metric . colUpdateTimeDeltaHistogram ) ; 
 coordinatorReadLatency = Metrics . newTimer ( factory . createMetricName ( " CoordinatorReadLatency " ) , TimeUnit . MICROSECONDS , TimeUnit . SECONDS ) ; 
 coordinatorScanLatency = Metrics . newTimer ( factory . createMetricName ( " CoordinatorScanLatency " ) , TimeUnit . MICROSECONDS , TimeUnit . SECONDS ) ; 
 waitingOnFreeMemtableSpace = Metrics . newTimer ( factory . createMetricName ( " WaitingOnFreeMemtableSpace " ) , TimeUnit . MICROSECONDS , TimeUnit . SECONDS ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
