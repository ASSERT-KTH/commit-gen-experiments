BLEU SCORE: 0.027611988917697356

TEST MSG: ninja - fix merge of CASSANDRA - 6809
GENERATED MSG: Add commit _ failure _ policy .

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index 25a9b31 . . 1e69b26 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 64 , 7 + 64 , 7 @ @ public class Config <nl> public Set < String > hinted _ handoff _ enabled _ by _ dc = Sets . newConcurrentHashSet ( ) ; <nl> public volatile Integer max _ hint _ window _ in _ ms = 3600 * 1000 ; / / one hour <nl> <nl> - public ParametrizedClass seed _ provider ; <nl> + public ParameterizedClass seed _ provider ; <nl> public DiskAccessMode disk _ access _ mode = DiskAccessMode . auto ; <nl> <nl> public DiskFailurePolicy disk _ failure _ policy = DiskFailurePolicy . ignore ; <nl> @ @ - 167 , 7 + 167 , 9 @ @ public class Config <nl> public Double commitlog _ sync _ batch _ window _ in _ ms ; <nl> public Integer commitlog _ sync _ period _ in _ ms ; <nl> public int commitlog _ segment _ size _ in _ mb = 32 ; <nl> - <nl> + public ParameterizedClass commitlog _ compression ; <nl> + public int commitlog _ max _ compression _ buffers _ in _ pool = 3 ; <nl> + <nl> @ Deprecated <nl> public int commitlog _ periodic _ queue _ size = - 1 ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index c36c9e9 . . 781dcfa 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 1077 , 12 + 1077 , 12 @ @ public class DatabaseDescriptor <nl> return conf . commitlog _ directory ; <nl> } <nl> <nl> - public static ParametrizedClass getCommitLogCompression ( ) <nl> + public static ParameterizedClass getCommitLogCompression ( ) <nl> { <nl> return conf . commitlog _ compression ; <nl> } <nl> <nl> - public static void setCommitLogCompression ( ParametrizedClass compressor ) <nl> + public static void setCommitLogCompression ( ParameterizedClass compressor ) <nl> { <nl> conf . commitlog _ compression = compressor ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / config / ParameterizedClass . java b / src / java / org / apache / cassandra / config / ParameterizedClass . java <nl> new file mode 100644 <nl> index 0000000 . . 6b7af63 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / config / ParameterizedClass . java <nl> @ @ - 0 , 0 + 1 , 60 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . config ; <nl> + <nl> + import java . util . LinkedHashMap ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + <nl> + import com . google . common . base . Objects ; <nl> + <nl> + public class ParameterizedClass <nl> + { <nl> + public String class _ name ; <nl> + public Map < String , String > parameters ; <nl> + <nl> + public ParameterizedClass ( String class _ name , Map < String , String > parameters ) <nl> + { <nl> + this . class _ name = class _ name ; <nl> + this . parameters = parameters ; <nl> + } <nl> + <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + public ParameterizedClass ( LinkedHashMap < String , ? > p ) <nl> + { <nl> + this ( ( String ) p . get ( " class _ name " ) , <nl> + p . containsKey ( " parameters " ) ? ( Map < String , String > ) ( ( List < ? > ) p . get ( " parameters " ) ) . get ( 0 ) : null ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean equals ( Object that ) <nl> + { <nl> + return that instanceof ParameterizedClass & & equals ( ( ParameterizedClass ) that ) ; <nl> + } <nl> + <nl> + public boolean equals ( ParameterizedClass that ) <nl> + { <nl> + return Objects . equal ( class _ name , that . class _ name ) & & Objects . equal ( parameters , that . parameters ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return class _ name + ( parameters = = null ? " " : parameters . toString ( ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / config / ParametrizedClass . java b / src / java / org / apache / cassandra / config / ParametrizedClass . java <nl> deleted file mode 100644 <nl> index 783b3b0 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / config / ParametrizedClass . java <nl> + + + / dev / null <nl> @ @ - 1 , 60 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . config ; <nl> - <nl> - import java . util . LinkedHashMap ; <nl> - import java . util . List ; <nl> - import java . util . Map ; <nl> - <nl> - import com . google . common . base . Objects ; <nl> - <nl> - public class ParametrizedClass <nl> - { <nl> - public String class _ name ; <nl> - public Map < String , String > parameters ; <nl> - <nl> - public ParametrizedClass ( String class _ name , Map < String , String > parameters ) <nl> - { <nl> - this . class _ name = class _ name ; <nl> - this . parameters = parameters ; <nl> - } <nl> - <nl> - @ SuppressWarnings ( " unchecked " ) <nl> - public ParametrizedClass ( LinkedHashMap < String , ? > p ) <nl> - { <nl> - this ( ( String ) p . get ( " class _ name " ) , <nl> - p . containsKey ( " parameters " ) ? ( Map < String , String > ) ( ( List < ? > ) p . get ( " parameters " ) ) . get ( 0 ) : null ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean equals ( Object that ) <nl> - { <nl> - return that instanceof ParametrizedClass & & equals ( ( ParametrizedClass ) that ) ; <nl> - } <nl> - <nl> - public boolean equals ( ParametrizedClass that ) <nl> - { <nl> - return Objects . equal ( class _ name , that . class _ name ) & & Objects . equal ( parameters , that . parameters ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public String toString ( ) <nl> - { <nl> - return class _ name + ( parameters = = null ? " " : parameters . toString ( ) ) ; <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java <nl> index 28511fe . . 8331f85 100644 <nl> - - - a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java <nl> + + + b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java <nl> @ @ - 104 , 7 + 104 , 7 @ @ public class YamlConfigurationLoader implements ConfigurationLoader <nl> logConfig ( configBytes ) ; <nl> <nl> org . yaml . snakeyaml . constructor . Constructor constructor = new org . yaml . snakeyaml . constructor . Constructor ( Config . class ) ; <nl> - TypeDescription seedDesc = new TypeDescription ( ParametrizedClass . class ) ; <nl> + TypeDescription seedDesc = new TypeDescription ( ParameterizedClass . class ) ; <nl> seedDesc . putMapPropertyType ( " parameters " , String . class , String . class ) ; <nl> constructor . addTypeDescription ( seedDesc ) ; <nl> MissingPropertiesChecker propertiesChecker = new MissingPropertiesChecker ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> index 51b3e53 . . 664e38e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> @ @ - 35 , 7 + 35 , 7 @ @ import org . apache . commons . lang3 . StringUtils ; <nl> import com . github . tjake . ICRC32 ; <nl> import org . apache . cassandra . config . Config ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - import org . apache . cassandra . config . ParametrizedClass ; <nl> + import org . apache . cassandra . config . ParameterizedClass ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . io . FSWriteError ; <nl> import org . apache . cassandra . io . compress . CompressionParameters ; <nl> @ @ - 69 , 7 + 69 , 7 @ @ public class CommitLog implements CommitLogMBean <nl> final AbstractCommitLogService executor ; <nl> <nl> final ICompressor compressor ; <nl> - public ParametrizedClass compressorClass ; <nl> + public ParameterizedClass compressorClass ; <nl> final public String location ; <nl> <nl> static private CommitLog construct ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java <nl> index 6e8c78c . . c872677 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java <nl> @ @ - 37 , 7 + 37 , 7 @ @ import com . google . common . base . Objects ; <nl> import com . github . tjake . ICRC32 ; <nl> <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - import org . apache . cassandra . config . ParametrizedClass ; <nl> + import org . apache . cassandra . config . ParameterizedClass ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . io . FSReadError ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> @ @ - 67 , 16 + 67 , 16 @ @ public class CommitLogDescriptor <nl> <nl> final int version ; <nl> public final long id ; <nl> - public final ParametrizedClass compression ; <nl> + public final ParameterizedClass compression ; <nl> <nl> - public CommitLogDescriptor ( int version , long id , ParametrizedClass compression ) <nl> + public CommitLogDescriptor ( int version , long id , ParameterizedClass compression ) <nl> { <nl> this . version = version ; <nl> this . id = id ; <nl> this . compression = compression ; <nl> } <nl> <nl> - public CommitLogDescriptor ( long id , ParametrizedClass compression ) <nl> + public CommitLogDescriptor ( long id , ParameterizedClass compression ) <nl> { <nl> this ( current _ version , id , compression ) ; <nl> } <nl> @ @ - 107 , 7 + 107 , 7 @ @ public class CommitLogDescriptor <nl> private static String constructParametersString ( CommitLogDescriptor descriptor ) <nl> { <nl> Map < String , Object > params = new TreeMap < String , Object > ( ) ; <nl> - ParametrizedClass compression = descriptor . compression ; <nl> + ParameterizedClass compression = descriptor . compression ; <nl> if ( compression ! = null ) <nl> { <nl> params . put ( COMPRESSION _ PARAMETERS _ KEY , compression . parameters ) ; <nl> @ @ - 159 , 7 + 159 , 7 @ @ public class CommitLogDescriptor <nl> } <nl> <nl> @ SuppressWarnings ( " unchecked " ) <nl> - private static ParametrizedClass parseCompression ( Map < ? , ? > params ) <nl> + private static ParameterizedClass parseCompression ( Map < ? , ? > params ) <nl> { <nl> if ( params = = null ) <nl> return null ; <nl> @ @ - 168 , 7 + 168 , 7 @ @ public class CommitLogDescriptor <nl> return null ; <nl> <nl> Map < String , String > cparams = ( Map < String , String > ) params . get ( COMPRESSION _ PARAMETERS _ KEY ) ; <nl> - return new ParametrizedClass ( className , cparams ) ; <nl> + return new ParameterizedClass ( className , cparams ) ; <nl> } <nl> <nl> public static CommitLogDescriptor fromFileName ( String name ) <nl> diff - - git a / src / java / org / apache / cassandra / io / compress / CompressionParameters . java b / src / java / org / apache / cassandra / io / compress / CompressionParameters . java <nl> index d5db130 . . a65fb46 100644 <nl> - - - a / src / java / org / apache / cassandra / io / compress / CompressionParameters . java <nl> + + + b / src / java / org / apache / cassandra / io / compress / CompressionParameters . java <nl> @ @ - 33 , 7 + 33 , 7 @ @ import com . google . common . collect . Sets ; <nl> import org . apache . commons . lang3 . builder . EqualsBuilder ; <nl> import org . apache . commons . lang3 . builder . HashCodeBuilder ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> - import org . apache . cassandra . config . ParametrizedClass ; <nl> + import org . apache . cassandra . config . ParameterizedClass ; <nl> import org . apache . cassandra . db . TypeSizes ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . io . IVersionedSerializer ; <nl> @ @ - 207 , 7 + 207 , 7 @ @ public class CompressionParameters <nl> } <nl> } <nl> <nl> - public static ICompressor createCompressor ( ParametrizedClass compression ) throws ConfigurationException { <nl> + public static ICompressor createCompressor ( ParameterizedClass compression ) throws ConfigurationException { <nl> return createCompressor ( parseCompressorClass ( compression . class _ name ) , copyOptions ( compression . parameters ) ) ; <nl> } <nl> <nl> diff - - git a / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java b / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java <nl> index 22dbe11 . . 758d2f9 100644 <nl> - - - a / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java <nl> + + + b / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java <nl> @ @ - 48 , 7 + 48 , 7 @ @ import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . Util ; <nl> import org . apache . cassandra . config . Config . CommitLogSync ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - import org . apache . cassandra . config . ParametrizedClass ; <nl> + import org . apache . cassandra . config . ParameterizedClass ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . db . Cell ; <nl> import org . apache . cassandra . db . ColumnFamily ; <nl> @ @ - 185 , 11 + 185 , 11 @ @ public class CommitLogStressTest <nl> DatabaseDescriptor . setCommitLogSyncBatchWindow ( 1 ) ; <nl> DatabaseDescriptor . setCommitLogSyncPeriod ( 30 ) ; <nl> DatabaseDescriptor . setCommitLogSegmentSize ( 32 ) ; <nl> - for ( ParametrizedClass compressor : new ParametrizedClass [ ] { <nl> + for ( ParameterizedClass compressor : new ParameterizedClass [ ] { <nl> null , <nl> - new ParametrizedClass ( " LZ4Compressor " , null ) , <nl> - new ParametrizedClass ( " SnappyCompressor " , null ) , <nl> - new ParametrizedClass ( " DeflateCompressor " , null ) } ) { <nl> + new ParameterizedClass ( " LZ4Compressor " , null ) , <nl> + new ParameterizedClass ( " SnappyCompressor " , null ) , <nl> + new ParameterizedClass ( " DeflateCompressor " , null ) } ) { <nl> DatabaseDescriptor . setCommitLogCompression ( compressor ) ; <nl> for ( CommitLogSync sync : CommitLogSync . values ( ) ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / db / CommitLogTest . java b / test / unit / org / apache / cassandra / db / CommitLogTest . java <nl> index 3073ecd . . c825f2a 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / CommitLogTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / CommitLogTest . java <nl> @ @ - 46 , 7 + 46 , 7 @ @ import org . apache . cassandra . Util ; <nl> import org . apache . cassandra . config . Config ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . KSMetaData ; <nl> - import org . apache . cassandra . config . ParametrizedClass ; <nl> + import org . apache . cassandra . config . ParameterizedClass ; <nl> import org . apache . cassandra . db . commitlog . CommitLog ; <nl> import org . apache . cassandra . db . commitlog . CommitLogDescriptor ; <nl> import org . apache . cassandra . db . commitlog . CommitLogSegment ; <nl> @ @ - 431 , 9 + 431 , 9 @ @ public class CommitLogTest <nl> testDescriptorPersistence ( new CommitLogDescriptor ( 11 , null ) ) ; <nl> testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 21 , 13 , null ) ) ; <nl> testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 30 , 15 , null ) ) ; <nl> - testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 30 , 17 , new ParametrizedClass ( " LZ4Compressor " , null ) ) ) ; <nl> + testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 30 , 17 , new ParameterizedClass ( " LZ4Compressor " , null ) ) ) ; <nl> testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 30 , 19 , <nl> - new ParametrizedClass ( " StubbyCompressor " , ImmutableMap . of ( " parameter1 " , " value1 " , " flag2 " , " 55 " , " argument3 " , " null " ) ) ) ) ; <nl> + new ParameterizedClass ( " StubbyCompressor " , ImmutableMap . of ( " parameter1 " , " value1 " , " flag2 " , " 55 " , " argument3 " , " null " ) ) ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 445 , 7 + 445 , 7 @ @ public class CommitLogTest <nl> try { <nl> CommitLogDescriptor desc = new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 30 , <nl> 21 , <nl> - new ParametrizedClass ( " LZ4Compressor " , params ) ) ; <nl> + new ParameterizedClass ( " LZ4Compressor " , params ) ) ; <nl> ByteBuffer buf = ByteBuffer . allocate ( 1024000 ) ; <nl> CommitLogDescriptor . writeHeader ( buf , desc ) ; <nl> Assert . fail ( " Parameter object too long should fail on writing descriptor . " ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index 25a9b31 . . 1e69b26 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 64 , 7 + 64 , 7 @ @ public class Config 
 public Set < String > hinted _ handoff _ enabled _ by _ dc = Sets . newConcurrentHashSet ( ) ; 
 public volatile Integer max _ hint _ window _ in _ ms = 3600 * 1000 ; / / one hour 
 
 - public ParametrizedClass seed _ provider ; 
 + public ParameterizedClass seed _ provider ; 
 public DiskAccessMode disk _ access _ mode = DiskAccessMode . auto ; 
 
 public DiskFailurePolicy disk _ failure _ policy = DiskFailurePolicy . ignore ; 
 @ @ - 167 , 7 + 167 , 9 @ @ public class Config 
 public Double commitlog _ sync _ batch _ window _ in _ ms ; 
 public Integer commitlog _ sync _ period _ in _ ms ; 
 public int commitlog _ segment _ size _ in _ mb = 32 ; 
 - 
 + public ParameterizedClass commitlog _ compression ; 
 + public int commitlog _ max _ compression _ buffers _ in _ pool = 3 ; 
 + 
 @ Deprecated 
 public int commitlog _ periodic _ queue _ size = - 1 ; 
 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index c36c9e9 . . 781dcfa 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 1077 , 12 + 1077 , 12 @ @ public class DatabaseDescriptor 
 return conf . commitlog _ directory ; 
 } 
 
 - public static ParametrizedClass getCommitLogCompression ( ) 
 + public static ParameterizedClass getCommitLogCompression ( ) 
 { 
 return conf . commitlog _ compression ; 
 } 
 
 - public static void setCommitLogCompression ( ParametrizedClass compressor ) 
 + public static void setCommitLogCompression ( ParameterizedClass compressor ) 
 { 
 conf . commitlog _ compression = compressor ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / config / ParameterizedClass . java b / src / java / org / apache / cassandra / config / ParameterizedClass . java 
 new file mode 100644 
 index 0000000 . . 6b7af63 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / config / ParameterizedClass . java 
 @ @ - 0 , 0 + 1 , 60 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . config ; 
 + 
 + import java . util . LinkedHashMap ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + 
 + import com . google . common . base . Objects ; 
 + 
 + public class ParameterizedClass 
 + { 
 + public String class _ name ; 
 + public Map < String , String > parameters ; 
 + 
 + public ParameterizedClass ( String class _ name , Map < String , String > parameters ) 
 + { 
 + this . class _ name = class _ name ; 
 + this . parameters = parameters ; 
 + } 
 + 
 + @ SuppressWarnings ( " unchecked " ) 
 + public ParameterizedClass ( LinkedHashMap < String , ? > p ) 
 + { 
 + this ( ( String ) p . get ( " class _ name " ) , 
 + p . containsKey ( " parameters " ) ? ( Map < String , String > ) ( ( List < ? > ) p . get ( " parameters " ) ) . get ( 0 ) : null ) ; 
 + } 
 + 
 + @ Override 
 + public boolean equals ( Object that ) 
 + { 
 + return that instanceof ParameterizedClass & & equals ( ( ParameterizedClass ) that ) ; 
 + } 
 + 
 + public boolean equals ( ParameterizedClass that ) 
 + { 
 + return Objects . equal ( class _ name , that . class _ name ) & & Objects . equal ( parameters , that . parameters ) ; 
 + } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return class _ name + ( parameters = = null ? " " : parameters . toString ( ) ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / config / ParametrizedClass . java b / src / java / org / apache / cassandra / config / ParametrizedClass . java 
 deleted file mode 100644 
 index 783b3b0 . . 0000000 
 - - - a / src / java / org / apache / cassandra / config / ParametrizedClass . java 
 + + + / dev / null 
 @ @ - 1 , 60 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . config ; 
 - 
 - import java . util . LinkedHashMap ; 
 - import java . util . List ; 
 - import java . util . Map ; 
 - 
 - import com . google . common . base . Objects ; 
 - 
 - public class ParametrizedClass 
 - { 
 - public String class _ name ; 
 - public Map < String , String > parameters ; 
 - 
 - public ParametrizedClass ( String class _ name , Map < String , String > parameters ) 
 - { 
 - this . class _ name = class _ name ; 
 - this . parameters = parameters ; 
 - } 
 - 
 - @ SuppressWarnings ( " unchecked " ) 
 - public ParametrizedClass ( LinkedHashMap < String , ? > p ) 
 - { 
 - this ( ( String ) p . get ( " class _ name " ) , 
 - p . containsKey ( " parameters " ) ? ( Map < String , String > ) ( ( List < ? > ) p . get ( " parameters " ) ) . get ( 0 ) : null ) ; 
 - } 
 - 
 - @ Override 
 - public boolean equals ( Object that ) 
 - { 
 - return that instanceof ParametrizedClass & & equals ( ( ParametrizedClass ) that ) ; 
 - } 
 - 
 - public boolean equals ( ParametrizedClass that ) 
 - { 
 - return Objects . equal ( class _ name , that . class _ name ) & & Objects . equal ( parameters , that . parameters ) ; 
 - } 
 - 
 - @ Override 
 - public String toString ( ) 
 - { 
 - return class _ name + ( parameters = = null ? " " : parameters . toString ( ) ) ; 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java 
 index 28511fe . . 8331f85 100644 
 - - - a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java 
 + + + b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java 
 @ @ - 104 , 7 + 104 , 7 @ @ public class YamlConfigurationLoader implements ConfigurationLoader 
 logConfig ( configBytes ) ; 
 
 org . yaml . snakeyaml . constructor . Constructor constructor = new org . yaml . snakeyaml . constructor . Constructor ( Config . class ) ; 
 - TypeDescription seedDesc = new TypeDescription ( ParametrizedClass . class ) ; 
 + TypeDescription seedDesc = new TypeDescription ( ParameterizedClass . class ) ; 
 seedDesc . putMapPropertyType ( " parameters " , String . class , String . class ) ; 
 constructor . addTypeDescription ( seedDesc ) ; 
 MissingPropertiesChecker propertiesChecker = new MissingPropertiesChecker ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 index 51b3e53 . . 664e38e 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 @ @ - 35 , 7 + 35 , 7 @ @ import org . apache . commons . lang3 . StringUtils ; 
 import com . github . tjake . ICRC32 ; 
 import org . apache . cassandra . config . Config ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 - import org . apache . cassandra . config . ParametrizedClass ; 
 + import org . apache . cassandra . config . ParameterizedClass ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . io . FSWriteError ; 
 import org . apache . cassandra . io . compress . CompressionParameters ; 
 @ @ - 69 , 7 + 69 , 7 @ @ public class CommitLog implements CommitLogMBean 
 final AbstractCommitLogService executor ; 
 
 final ICompressor compressor ; 
 - public ParametrizedClass compressorClass ; 
 + public ParameterizedClass compressorClass ; 
 final public String location ; 
 
 static private CommitLog construct ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java 
 index 6e8c78c . . c872677 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java 
 @ @ - 37 , 7 + 37 , 7 @ @ import com . google . common . base . Objects ; 
 import com . github . tjake . ICRC32 ; 
 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 - import org . apache . cassandra . config . ParametrizedClass ; 
 + import org . apache . cassandra . config . ParameterizedClass ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . io . FSReadError ; 
 import org . apache . cassandra . net . MessagingService ; 
 @ @ - 67 , 16 + 67 , 16 @ @ public class CommitLogDescriptor 
 
 final int version ; 
 public final long id ; 
 - public final ParametrizedClass compression ; 
 + public final ParameterizedClass compression ; 
 
 - public CommitLogDescriptor ( int version , long id , ParametrizedClass compression ) 
 + public CommitLogDescriptor ( int version , long id , ParameterizedClass compression ) 
 { 
 this . version = version ; 
 this . id = id ; 
 this . compression = compression ; 
 } 
 
 - public CommitLogDescriptor ( long id , ParametrizedClass compression ) 
 + public CommitLogDescriptor ( long id , ParameterizedClass compression ) 
 { 
 this ( current _ version , id , compression ) ; 
 } 
 @ @ - 107 , 7 + 107 , 7 @ @ public class CommitLogDescriptor 
 private static String constructParametersString ( CommitLogDescriptor descriptor ) 
 { 
 Map < String , Object > params = new TreeMap < String , Object > ( ) ; 
 - ParametrizedClass compression = descriptor . compression ; 
 + ParameterizedClass compression = descriptor . compression ; 
 if ( compression ! = null ) 
 { 
 params . put ( COMPRESSION _ PARAMETERS _ KEY , compression . parameters ) ; 
 @ @ - 159 , 7 + 159 , 7 @ @ public class CommitLogDescriptor 
 } 
 
 @ SuppressWarnings ( " unchecked " ) 
 - private static ParametrizedClass parseCompression ( Map < ? , ? > params ) 
 + private static ParameterizedClass parseCompression ( Map < ? , ? > params ) 
 { 
 if ( params = = null ) 
 return null ; 
 @ @ - 168 , 7 + 168 , 7 @ @ public class CommitLogDescriptor 
 return null ; 
 
 Map < String , String > cparams = ( Map < String , String > ) params . get ( COMPRESSION _ PARAMETERS _ KEY ) ; 
 - return new ParametrizedClass ( className , cparams ) ; 
 + return new ParameterizedClass ( className , cparams ) ; 
 } 
 
 public static CommitLogDescriptor fromFileName ( String name ) 
 diff - - git a / src / java / org / apache / cassandra / io / compress / CompressionParameters . java b / src / java / org / apache / cassandra / io / compress / CompressionParameters . java 
 index d5db130 . . a65fb46 100644 
 - - - a / src / java / org / apache / cassandra / io / compress / CompressionParameters . java 
 + + + b / src / java / org / apache / cassandra / io / compress / CompressionParameters . java 
 @ @ - 33 , 7 + 33 , 7 @ @ import com . google . common . collect . Sets ; 
 import org . apache . commons . lang3 . builder . EqualsBuilder ; 
 import org . apache . commons . lang3 . builder . HashCodeBuilder ; 
 import org . apache . cassandra . config . CFMetaData ; 
 - import org . apache . cassandra . config . ParametrizedClass ; 
 + import org . apache . cassandra . config . ParameterizedClass ; 
 import org . apache . cassandra . db . TypeSizes ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . io . IVersionedSerializer ; 
 @ @ - 207 , 7 + 207 , 7 @ @ public class CompressionParameters 
 } 
 } 
 
 - public static ICompressor createCompressor ( ParametrizedClass compression ) throws ConfigurationException { 
 + public static ICompressor createCompressor ( ParameterizedClass compression ) throws ConfigurationException { 
 return createCompressor ( parseCompressorClass ( compression . class _ name ) , copyOptions ( compression . parameters ) ) ; 
 } 
 
 diff - - git a / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java b / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java 
 index 22dbe11 . . 758d2f9 100644 
 - - - a / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java 
 + + + b / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java 
 @ @ - 48 , 7 + 48 , 7 @ @ import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . Util ; 
 import org . apache . cassandra . config . Config . CommitLogSync ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 - import org . apache . cassandra . config . ParametrizedClass ; 
 + import org . apache . cassandra . config . ParameterizedClass ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . db . Cell ; 
 import org . apache . cassandra . db . ColumnFamily ; 
 @ @ - 185 , 11 + 185 , 11 @ @ public class CommitLogStressTest 
 DatabaseDescriptor . setCommitLogSyncBatchWindow ( 1 ) ; 
 DatabaseDescriptor . setCommitLogSyncPeriod ( 30 ) ; 
 DatabaseDescriptor . setCommitLogSegmentSize ( 32 ) ; 
 - for ( ParametrizedClass compressor : new ParametrizedClass [ ] { 
 + for ( ParameterizedClass compressor : new ParameterizedClass [ ] { 
 null , 
 - new ParametrizedClass ( " LZ4Compressor " , null ) , 
 - new ParametrizedClass ( " SnappyCompressor " , null ) , 
 - new ParametrizedClass ( " DeflateCompressor " , null ) } ) { 
 + new ParameterizedClass ( " LZ4Compressor " , null ) , 
 + new ParameterizedClass ( " SnappyCompressor " , null ) , 
 + new ParameterizedClass ( " DeflateCompressor " , null ) } ) { 
 DatabaseDescriptor . setCommitLogCompression ( compressor ) ; 
 for ( CommitLogSync sync : CommitLogSync . values ( ) ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / db / CommitLogTest . java b / test / unit / org / apache / cassandra / db / CommitLogTest . java 
 index 3073ecd . . c825f2a 100644 
 - - - a / test / unit / org / apache / cassandra / db / CommitLogTest . java 
 + + + b / test / unit / org / apache / cassandra / db / CommitLogTest . java 
 @ @ - 46 , 7 + 46 , 7 @ @ import org . apache . cassandra . Util ; 
 import org . apache . cassandra . config . Config ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . KSMetaData ; 
 - import org . apache . cassandra . config . ParametrizedClass ; 
 + import org . apache . cassandra . config . ParameterizedClass ; 
 import org . apache . cassandra . db . commitlog . CommitLog ; 
 import org . apache . cassandra . db . commitlog . CommitLogDescriptor ; 
 import org . apache . cassandra . db . commitlog . CommitLogSegment ; 
 @ @ - 431 , 9 + 431 , 9 @ @ public class CommitLogTest 
 testDescriptorPersistence ( new CommitLogDescriptor ( 11 , null ) ) ; 
 testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 21 , 13 , null ) ) ; 
 testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 30 , 15 , null ) ) ; 
 - testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 30 , 17 , new ParametrizedClass ( " LZ4Compressor " , null ) ) ) ; 
 + testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 30 , 17 , new ParameterizedClass ( " LZ4Compressor " , null ) ) ) ; 
 testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 30 , 19 , 
 - new ParametrizedClass ( " StubbyCompressor " , ImmutableMap . of ( " parameter1 " , " value1 " , " flag2 " , " 55 " , " argument3 " , " null " ) ) ) ) ; 
 + new ParameterizedClass ( " StubbyCompressor " , ImmutableMap . of ( " parameter1 " , " value1 " , " flag2 " , " 55 " , " argument3 " , " null " ) ) ) ) ; 
 } 
 
 @ Test 
 @ @ - 445 , 7 + 445 , 7 @ @ public class CommitLogTest 
 try { 
 CommitLogDescriptor desc = new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 30 , 
 21 , 
 - new ParametrizedClass ( " LZ4Compressor " , params ) ) ; 
 + new ParameterizedClass ( " LZ4Compressor " , params ) ) ; 
 ByteBuffer buf = ByteBuffer . allocate ( 1024000 ) ; 
 CommitLogDescriptor . writeHeader ( buf , desc ) ; 
 Assert . fail ( " Parameter object too long should fail on writing descriptor . " ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
