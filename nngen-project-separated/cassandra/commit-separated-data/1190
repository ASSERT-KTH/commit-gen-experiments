BLEU SCORE: 0.012637829447572243

TEST MSG: Keep the file open in trySkipCache
GENERATED MSG: only gc if there are undeleted sstables that gc - ing could free

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index ef21f9f . . d271c95 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 1 <nl> + * Keep the file open in trySkipCache ( CASSANDRA - 10669 ) <nl> * Updated trigger example ( CASSANDRA - 10257 ) <nl> Merged from 2 . 2 : <nl> * ( Hadoop ) fix splits calculation ( CASSANDRA - 10640 ) <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java <nl> index f3885de . . 3632a60 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java <nl> @ @ - 59 , 7 + 59 , 6 @ @ public class SSTableRewriter extends Transactional . AbstractTransactional impleme <nl> / / the set of final readers we will expose on commit <nl> private final LifecycleTransaction transaction ; / / the readers we are rewriting ( updated as they are replaced ) <nl> private final List < SSTableReader > preparedForCommit = new ArrayList < > ( ) ; <nl> - private final Map < Descriptor , Integer > fileDescriptors = new HashMap < > ( ) ; / / the file descriptors for each reader descriptor we are rewriting <nl> <nl> private long currentlyOpenedEarlyAt ; / / the position ( in MB ) in the target file we last ( re ) opened at <nl> <nl> @ @ - 87 , 8 + 86 , 6 @ @ public class SSTableRewriter extends Transactional . AbstractTransactional impleme <nl> public SSTableRewriter ( LifecycleTransaction transaction , long maxAge , boolean isOffline , long preemptiveOpenInterval , boolean keepOriginals ) <nl> { <nl> this . transaction = transaction ; <nl> - for ( SSTableReader sstable : this . transaction . originals ( ) ) <nl> - fileDescriptors . put ( sstable . descriptor , CLibrary . getfd ( sstable . getFilename ( ) ) ) ; <nl> this . maxAge = maxAge ; <nl> this . isOffline = isOffline ; <nl> this . keepOriginals = keepOriginals ; <nl> @ @ - 160 , 7 + 157 , 7 @ @ public class SSTableRewriter extends Transactional . AbstractTransactional impleme <nl> for ( SSTableReader reader : transaction . originals ( ) ) <nl> { <nl> RowIndexEntry index = reader . getPosition ( key , SSTableReader . Operator . GE ) ; <nl> - CLibrary . trySkipCache ( fileDescriptors . get ( reader . descriptor ) , 0 , index = = null ? 0 : index . position , reader . getFilename ( ) ) ; <nl> + CLibrary . trySkipCache ( reader . getFilename ( ) , 0 , index = = null ? 0 : index . position ) ; <nl> } <nl> } <nl> else <nl> diff - - git a / src / java / org / apache / cassandra / utils / CLibrary . java b / src / java / org / apache / cassandra / utils / CLibrary . java <nl> index b4a1193 . . 1235a58 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / CLibrary . java <nl> + + + b / src / java / org / apache / cassandra / utils / CLibrary . java <nl> @ @ - 17 , 7 + 17 , 9 @ @ <nl> * / <nl> package org . apache . cassandra . utils ; <nl> <nl> + import java . io . File ; <nl> import java . io . FileDescriptor ; <nl> + import java . io . FileInputStream ; <nl> import java . io . IOException ; <nl> import java . lang . reflect . Field ; <nl> import java . nio . channels . FileChannel ; <nl> @ @ - 148 , 7 + 150 , 18 @ @ public final class CLibrary <nl> <nl> public static void trySkipCache ( String path , long offset , long len ) <nl> { <nl> - trySkipCache ( getfd ( path ) , offset , len , path ) ; <nl> + File f = new File ( path ) ; <nl> + if ( ! f . exists ( ) ) <nl> + return ; <nl> + <nl> + try ( FileInputStream fis = new FileInputStream ( f ) ) <nl> + { <nl> + trySkipCache ( getfd ( fis . getChannel ( ) ) , offset , len , path ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + logger . warn ( " Could not skip cache " , e ) ; <nl> + } <nl> } <nl> <nl> public static void trySkipCache ( int fd , long offset , long len , String path ) <nl> @ @ - 326 , 18 + 339 , 4 @ @ public final class CLibrary <nl> <nl> return - 1 ; <nl> } <nl> - <nl> - public static int getfd ( String path ) <nl> - { <nl> - try ( FileChannel channel = FileChannel . open ( Paths . get ( path ) , StandardOpenOption . READ ) ) <nl> - { <nl> - return getfd ( channel ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - JVMStabilityInspector . inspectThrowable ( e ) ; <nl> - / / ignore <nl> - return - 1 ; <nl> - } <nl> - } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / utils / CLibraryTest . java b / test / unit / org / apache / cassandra / utils / CLibraryTest . java <nl> index 774ddac . . 7516392 100644 <nl> - - - a / test / unit / org / apache / cassandra / utils / CLibraryTest . java <nl> + + + b / test / unit / org / apache / cassandra / utils / CLibraryTest . java <nl> @ @ - 31 , 7 + 31 , 6 @ @ public class CLibraryTest <nl> { <nl> File file = FileUtils . createTempFile ( " testSkipCache " , " 1 " ) ; <nl> <nl> - int fd = CLibrary . getfd ( file . getPath ( ) ) ; <nl> - CLibrary . trySkipCache ( fd , 0 , 0 , file . getPath ( ) ) ; <nl> + CLibrary . trySkipCache ( file . getPath ( ) , 0 , 0 ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index d0e2ef7 . . 0bef41f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1144 , 24 + 1144 , 19 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> + public boolean hasUnreclaimedSpace ( ) <nl> + { <nl> + return ssTables _ . getLiveSize ( ) < ssTables _ . getTotalSize ( ) ; <nl> + } <nl> + <nl> public long getTotalDiskSpaceUsed ( ) <nl> { <nl> - long n = 0 ; <nl> - for ( File file : files ( ) ) <nl> - { <nl> - n + = file . length ( ) ; <nl> - } <nl> - return n ; <nl> + return ssTables _ . getTotalSize ( ) ; <nl> } <nl> <nl> public long getLiveDiskSpaceUsed ( ) <nl> { <nl> - long n = 0 ; <nl> - for ( SSTableReader sstable : ssTables _ ) <nl> - { <nl> - n + = sstable . bytesOnDisk ( ) ; <nl> - } <nl> - return n ; <nl> + return ssTables _ . getLiveSize ( ) ; <nl> } <nl> <nl> public int getLiveSSTableCount ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java <nl> index 0be0dbf . . e8792a1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Table . java <nl> + + + b / src / java / org / apache / cassandra / db / Table . java <nl> @ @ - 208 , 7 + 208 , 7 @ @ public class Table <nl> return tableMetadata . getColumnFamilies ( ) ; <nl> } <nl> <nl> - Collection < ColumnFamilyStore > getColumnFamilyStores ( ) <nl> + public Collection < ColumnFamilyStore > getColumnFamilyStores ( ) <nl> { <nl> return Collections . unmodifiableCollection ( columnFamilyStores . values ( ) ) ; <nl> } <nl> @ @ - 479 , 7 + 479 , 7 @ @ public class Table <nl> if ( path = = null ) <nl> { <nl> / / retry after GCing to force unmap of compacted SSTables so they can be deleted <nl> - StorageService . requestGC ( ) ; <nl> + StorageService . instance . requestGC ( ) ; <nl> try <nl> { <nl> Thread . sleep ( SSTableDeletingReference . RETRY _ DELAY * 2 ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / SSTableDeletingReference . java b / src / java / org / apache / cassandra / io / SSTableDeletingReference . java <nl> index b123161 . . e8c7256 100644 <nl> - - - a / src / java / org / apache / cassandra / io / SSTableDeletingReference . java <nl> + + + b / src / java / org / apache / cassandra / io / SSTableDeletingReference . java <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> package org . apache . cassandra . io ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOError ; <nl> import java . io . IOException ; <nl> import java . lang . ref . PhantomReference ; <nl> import java . lang . ref . ReferenceQueue ; <nl> @ @ - 9 , 6 + 10 , 8 @ @ import java . util . TimerTask ; <nl> <nl> import org . apache . log4j . Logger ; <nl> <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> + <nl> public class SSTableDeletingReference extends PhantomReference < SSTableReader > <nl> { <nl> private static final Logger logger = Logger . getLogger ( SSTableDeletingReference . class ) ; <nl> @ @ - 16 , 13 + 19 , 17 @ @ public class SSTableDeletingReference extends PhantomReference < SSTableReader > <nl> private static final Timer timer = new Timer ( " SSTABLE - CLEANUP - TIMER " ) ; <nl> public static final int RETRY _ DELAY = 10000 ; <nl> <nl> + private final SSTableTracker tracker ; <nl> public final String path ; <nl> + private final long size ; <nl> private boolean deleteOnCleanup ; <nl> <nl> - SSTableDeletingReference ( SSTableReader referent , ReferenceQueue < ? super SSTableReader > q ) <nl> + SSTableDeletingReference ( SSTableTracker tracker , SSTableReader referent , ReferenceQueue < ? super SSTableReader > q ) <nl> { <nl> super ( referent , q ) ; <nl> + this . tracker = tracker ; <nl> this . path = referent . path ; <nl> + this . size = referent . bytesOnDisk ( ) ; <nl> } <nl> <nl> public void deleteOnCleanup ( ) <nl> @ @ - 62 , 10 + 69 , 18 @ @ public class SSTableDeletingReference extends PhantomReference < SSTableReader > <nl> throw new RuntimeException ( " Unable to delete " + path ) ; <nl> } <nl> } <nl> + try <nl> + { <nl> + FileUtils . deleteWithConfirm ( new File ( SSTable . indexFilename ( path ) ) ) ; <nl> + FileUtils . deleteWithConfirm ( new File ( SSTable . filterFilename ( path ) ) ) ; <nl> + FileUtils . deleteWithConfirm ( new File ( SSTable . compactedFilename ( path ) ) ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new IOError ( e ) ; <nl> + } <nl> + tracker . spaceReclaimed ( size ) ; <nl> logger . info ( " Deleted " + path ) ; <nl> - DeletionService . submitDeleteWithRetry ( SSTable . indexFilename ( path ) ) ; <nl> - DeletionService . submitDeleteWithRetry ( SSTable . filterFilename ( path ) ) ; <nl> - DeletionService . submitDeleteWithRetry ( SSTable . compactedFilename ( path ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / SSTableReader . java b / src / java / org / apache / cassandra / io / SSTableReader . java <nl> index 01e8d07 . . 179edf2 100644 <nl> - - - a / src / java / org / apache / cassandra / io / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / SSTableReader . java <nl> @ @ - 135 , 7 + 135 , 7 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> return sstable ; <nl> } <nl> <nl> - SSTableDeletingReference phantomReference ; <nl> + private volatile SSTableDeletingReference phantomReference ; <nl> / / jvm can only map up to 2GB at a time , so we split index / data into segments of that size when using mmap i / o <nl> private final MappedByteBuffer [ ] indexBuffers ; <nl> private final MappedByteBuffer [ ] buffers ; <nl> @ @ - 196 , 11 + 196 , 15 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> this . indexPositions = indexPositions ; <nl> this . spannedIndexDataPositions = spannedIndexDataPositions ; <nl> this . bf = bloomFilter ; <nl> - phantomReference = new SSTableDeletingReference ( this , finalizerQueue ) ; <nl> - finalizers . add ( phantomReference ) ; <nl> this . keyCache = keyCache ; <nl> } <nl> <nl> + public void addFinalizingReference ( SSTableTracker tracker ) <nl> + { <nl> + phantomReference = new SSTableDeletingReference ( tracker , this , finalizerQueue ) ; <nl> + finalizers . add ( phantomReference ) ; <nl> + } <nl> + <nl> private static MappedByteBuffer mmap ( String filename , long start , int size ) throws IOException <nl> { <nl> RandomAccessFile raf ; <nl> diff - - git a / src / java / org / apache / cassandra / io / SSTableTracker . java b / src / java / org / apache / cassandra / io / SSTableTracker . java <nl> index 1e3b861 . . 7154e2f 100644 <nl> - - - a / src / java / org / apache / cassandra / io / SSTableTracker . java <nl> + + + b / src / java / org / apache / cassandra / io / SSTableTracker . java <nl> @ @ - 23 , 11 + 23 , 14 @ @ package org . apache . cassandra . io ; <nl> <nl> import java . util . * ; <nl> import java . io . IOException ; <nl> + import java . util . concurrent . atomic . AtomicLong ; <nl> <nl> <nl> public class SSTableTracker implements Iterable < SSTableReader > <nl> { <nl> private volatile Set < SSTableReader > sstables ; <nl> + private final AtomicLong liveSize = new AtomicLong ( ) ; <nl> + private final AtomicLong totalSize = new AtomicLong ( ) ; <nl> <nl> public SSTableTracker ( Collection < SSTableReader > sstables ) <nl> { <nl> @ @ - 42 , 12 + 45 , 17 @ @ public class SSTableTracker implements Iterable < SSTableReader > <nl> { <nl> assert sstable . getIndexPositions ( ) ! = null ; <nl> sstablesNew . add ( sstable ) ; <nl> + long size = sstable . bytesOnDisk ( ) ; <nl> + liveSize . addAndGet ( size ) ; <nl> + totalSize . addAndGet ( size ) ; <nl> + sstable . addFinalizingReference ( this ) ; <nl> } <nl> <nl> for ( SSTableReader sstable : oldSSTables ) <nl> { <nl> sstablesNew . remove ( sstable ) ; <nl> sstable . markCompacted ( ) ; <nl> + liveSize . addAndGet ( - sstable . bytesOnDisk ( ) ) ; <nl> } <nl> <nl> sstables = Collections . unmodifiableSet ( sstablesNew ) ; <nl> @ @ - 102 , 4 + 110 , 20 @ @ public class SSTableTracker implements Iterable < SSTableReader > <nl> } <nl> return n ; <nl> } <nl> + <nl> + public long getLiveSize ( ) <nl> + { <nl> + return liveSize . get ( ) ; <nl> + } <nl> + <nl> + public long getTotalSize ( ) <nl> + { <nl> + return totalSize . get ( ) ; <nl> + } <nl> + <nl> + public void spaceReclaimed ( long size ) <nl> + { <nl> + totalSize . addAndGet ( - size ) ; <nl> + } <nl> } <nl> + <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 4971133 . . 17826ce 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 1472 , 10 + 1472 , 31 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe <nl> return isClientMode ; <nl> } <nl> <nl> - public static void requestGC ( ) <nl> + public synchronized void requestGC ( ) <nl> { <nl> - logger _ . info ( " requesting GC to free disk space " ) ; <nl> - System . gc ( ) ; <nl> + if ( hasUnreclaimedSpace ( ) ) <nl> + { <nl> + logger _ . info ( " requesting GC to free disk space " ) ; <nl> + System . gc ( ) ; <nl> + try <nl> + { <nl> + Thread . sleep ( 1000 ) ; <nl> + } <nl> + catch ( InterruptedException e ) <nl> + { <nl> + throw new AssertionError ( e ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + private boolean hasUnreclaimedSpace ( ) <nl> + { <nl> + for ( ColumnFamilyStore cfs : ColumnFamilyStore . all ( ) ) <nl> + { <nl> + if ( cfs . hasUnreclaimedSpace ( ) ) <nl> + return true ; <nl> + } <nl> + return false ; <nl> } <nl> <nl> / / Never ever do this at home . Used by tests .

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index ef21f9f . . d271c95 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 1 
 + * Keep the file open in trySkipCache ( CASSANDRA - 10669 ) 
 * Updated trigger example ( CASSANDRA - 10257 ) 
 Merged from 2 . 2 : 
 * ( Hadoop ) fix splits calculation ( CASSANDRA - 10640 ) 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java 
 index f3885de . . 3632a60 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java 
 @ @ - 59 , 7 + 59 , 6 @ @ public class SSTableRewriter extends Transactional . AbstractTransactional impleme 
 / / the set of final readers we will expose on commit 
 private final LifecycleTransaction transaction ; / / the readers we are rewriting ( updated as they are replaced ) 
 private final List < SSTableReader > preparedForCommit = new ArrayList < > ( ) ; 
 - private final Map < Descriptor , Integer > fileDescriptors = new HashMap < > ( ) ; / / the file descriptors for each reader descriptor we are rewriting 
 
 private long currentlyOpenedEarlyAt ; / / the position ( in MB ) in the target file we last ( re ) opened at 
 
 @ @ - 87 , 8 + 86 , 6 @ @ public class SSTableRewriter extends Transactional . AbstractTransactional impleme 
 public SSTableRewriter ( LifecycleTransaction transaction , long maxAge , boolean isOffline , long preemptiveOpenInterval , boolean keepOriginals ) 
 { 
 this . transaction = transaction ; 
 - for ( SSTableReader sstable : this . transaction . originals ( ) ) 
 - fileDescriptors . put ( sstable . descriptor , CLibrary . getfd ( sstable . getFilename ( ) ) ) ; 
 this . maxAge = maxAge ; 
 this . isOffline = isOffline ; 
 this . keepOriginals = keepOriginals ; 
 @ @ - 160 , 7 + 157 , 7 @ @ public class SSTableRewriter extends Transactional . AbstractTransactional impleme 
 for ( SSTableReader reader : transaction . originals ( ) ) 
 { 
 RowIndexEntry index = reader . getPosition ( key , SSTableReader . Operator . GE ) ; 
 - CLibrary . trySkipCache ( fileDescriptors . get ( reader . descriptor ) , 0 , index = = null ? 0 : index . position , reader . getFilename ( ) ) ; 
 + CLibrary . trySkipCache ( reader . getFilename ( ) , 0 , index = = null ? 0 : index . position ) ; 
 } 
 } 
 else 
 diff - - git a / src / java / org / apache / cassandra / utils / CLibrary . java b / src / java / org / apache / cassandra / utils / CLibrary . java 
 index b4a1193 . . 1235a58 100644 
 - - - a / src / java / org / apache / cassandra / utils / CLibrary . java 
 + + + b / src / java / org / apache / cassandra / utils / CLibrary . java 
 @ @ - 17 , 7 + 17 , 9 @ @ 
 * / 
 package org . apache . cassandra . utils ; 
 
 + import java . io . File ; 
 import java . io . FileDescriptor ; 
 + import java . io . FileInputStream ; 
 import java . io . IOException ; 
 import java . lang . reflect . Field ; 
 import java . nio . channels . FileChannel ; 
 @ @ - 148 , 7 + 150 , 18 @ @ public final class CLibrary 
 
 public static void trySkipCache ( String path , long offset , long len ) 
 { 
 - trySkipCache ( getfd ( path ) , offset , len , path ) ; 
 + File f = new File ( path ) ; 
 + if ( ! f . exists ( ) ) 
 + return ; 
 + 
 + try ( FileInputStream fis = new FileInputStream ( f ) ) 
 + { 
 + trySkipCache ( getfd ( fis . getChannel ( ) ) , offset , len , path ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + logger . warn ( " Could not skip cache " , e ) ; 
 + } 
 } 
 
 public static void trySkipCache ( int fd , long offset , long len , String path ) 
 @ @ - 326 , 18 + 339 , 4 @ @ public final class CLibrary 
 
 return - 1 ; 
 } 
 - 
 - public static int getfd ( String path ) 
 - { 
 - try ( FileChannel channel = FileChannel . open ( Paths . get ( path ) , StandardOpenOption . READ ) ) 
 - { 
 - return getfd ( channel ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - JVMStabilityInspector . inspectThrowable ( e ) ; 
 - / / ignore 
 - return - 1 ; 
 - } 
 - } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / utils / CLibraryTest . java b / test / unit / org / apache / cassandra / utils / CLibraryTest . java 
 index 774ddac . . 7516392 100644 
 - - - a / test / unit / org / apache / cassandra / utils / CLibraryTest . java 
 + + + b / test / unit / org / apache / cassandra / utils / CLibraryTest . java 
 @ @ - 31 , 7 + 31 , 6 @ @ public class CLibraryTest 
 { 
 File file = FileUtils . createTempFile ( " testSkipCache " , " 1 " ) ; 
 
 - int fd = CLibrary . getfd ( file . getPath ( ) ) ; 
 - CLibrary . trySkipCache ( fd , 0 , 0 , file . getPath ( ) ) ; 
 + CLibrary . trySkipCache ( file . getPath ( ) , 0 , 0 ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index d0e2ef7 . . 0bef41f 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1144 , 24 + 1144 , 19 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 + public boolean hasUnreclaimedSpace ( ) 
 + { 
 + return ssTables _ . getLiveSize ( ) < ssTables _ . getTotalSize ( ) ; 
 + } 
 + 
 public long getTotalDiskSpaceUsed ( ) 
 { 
 - long n = 0 ; 
 - for ( File file : files ( ) ) 
 - { 
 - n + = file . length ( ) ; 
 - } 
 - return n ; 
 + return ssTables _ . getTotalSize ( ) ; 
 } 
 
 public long getLiveDiskSpaceUsed ( ) 
 { 
 - long n = 0 ; 
 - for ( SSTableReader sstable : ssTables _ ) 
 - { 
 - n + = sstable . bytesOnDisk ( ) ; 
 - } 
 - return n ; 
 + return ssTables _ . getLiveSize ( ) ; 
 } 
 
 public int getLiveSSTableCount ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java 
 index 0be0dbf . . e8792a1 100644 
 - - - a / src / java / org / apache / cassandra / db / Table . java 
 + + + b / src / java / org / apache / cassandra / db / Table . java 
 @ @ - 208 , 7 + 208 , 7 @ @ public class Table 
 return tableMetadata . getColumnFamilies ( ) ; 
 } 
 
 - Collection < ColumnFamilyStore > getColumnFamilyStores ( ) 
 + public Collection < ColumnFamilyStore > getColumnFamilyStores ( ) 
 { 
 return Collections . unmodifiableCollection ( columnFamilyStores . values ( ) ) ; 
 } 
 @ @ - 479 , 7 + 479 , 7 @ @ public class Table 
 if ( path = = null ) 
 { 
 / / retry after GCing to force unmap of compacted SSTables so they can be deleted 
 - StorageService . requestGC ( ) ; 
 + StorageService . instance . requestGC ( ) ; 
 try 
 { 
 Thread . sleep ( SSTableDeletingReference . RETRY _ DELAY * 2 ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / SSTableDeletingReference . java b / src / java / org / apache / cassandra / io / SSTableDeletingReference . java 
 index b123161 . . e8c7256 100644 
 - - - a / src / java / org / apache / cassandra / io / SSTableDeletingReference . java 
 + + + b / src / java / org / apache / cassandra / io / SSTableDeletingReference . java 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package org . apache . cassandra . io ; 
 
 import java . io . File ; 
 + import java . io . IOError ; 
 import java . io . IOException ; 
 import java . lang . ref . PhantomReference ; 
 import java . lang . ref . ReferenceQueue ; 
 @ @ - 9 , 6 + 10 , 8 @ @ import java . util . TimerTask ; 
 
 import org . apache . log4j . Logger ; 
 
 + import org . apache . cassandra . io . util . FileUtils ; 
 + 
 public class SSTableDeletingReference extends PhantomReference < SSTableReader > 
 { 
 private static final Logger logger = Logger . getLogger ( SSTableDeletingReference . class ) ; 
 @ @ - 16 , 13 + 19 , 17 @ @ public class SSTableDeletingReference extends PhantomReference < SSTableReader > 
 private static final Timer timer = new Timer ( " SSTABLE - CLEANUP - TIMER " ) ; 
 public static final int RETRY _ DELAY = 10000 ; 
 
 + private final SSTableTracker tracker ; 
 public final String path ; 
 + private final long size ; 
 private boolean deleteOnCleanup ; 
 
 - SSTableDeletingReference ( SSTableReader referent , ReferenceQueue < ? super SSTableReader > q ) 
 + SSTableDeletingReference ( SSTableTracker tracker , SSTableReader referent , ReferenceQueue < ? super SSTableReader > q ) 
 { 
 super ( referent , q ) ; 
 + this . tracker = tracker ; 
 this . path = referent . path ; 
 + this . size = referent . bytesOnDisk ( ) ; 
 } 
 
 public void deleteOnCleanup ( ) 
 @ @ - 62 , 10 + 69 , 18 @ @ public class SSTableDeletingReference extends PhantomReference < SSTableReader > 
 throw new RuntimeException ( " Unable to delete " + path ) ; 
 } 
 } 
 + try 
 + { 
 + FileUtils . deleteWithConfirm ( new File ( SSTable . indexFilename ( path ) ) ) ; 
 + FileUtils . deleteWithConfirm ( new File ( SSTable . filterFilename ( path ) ) ) ; 
 + FileUtils . deleteWithConfirm ( new File ( SSTable . compactedFilename ( path ) ) ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new IOError ( e ) ; 
 + } 
 + tracker . spaceReclaimed ( size ) ; 
 logger . info ( " Deleted " + path ) ; 
 - DeletionService . submitDeleteWithRetry ( SSTable . indexFilename ( path ) ) ; 
 - DeletionService . submitDeleteWithRetry ( SSTable . filterFilename ( path ) ) ; 
 - DeletionService . submitDeleteWithRetry ( SSTable . compactedFilename ( path ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / SSTableReader . java b / src / java / org / apache / cassandra / io / SSTableReader . java 
 index 01e8d07 . . 179edf2 100644 
 - - - a / src / java / org / apache / cassandra / io / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / SSTableReader . java 
 @ @ - 135 , 7 + 135 , 7 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 return sstable ; 
 } 
 
 - SSTableDeletingReference phantomReference ; 
 + private volatile SSTableDeletingReference phantomReference ; 
 / / jvm can only map up to 2GB at a time , so we split index / data into segments of that size when using mmap i / o 
 private final MappedByteBuffer [ ] indexBuffers ; 
 private final MappedByteBuffer [ ] buffers ; 
 @ @ - 196 , 11 + 196 , 15 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 this . indexPositions = indexPositions ; 
 this . spannedIndexDataPositions = spannedIndexDataPositions ; 
 this . bf = bloomFilter ; 
 - phantomReference = new SSTableDeletingReference ( this , finalizerQueue ) ; 
 - finalizers . add ( phantomReference ) ; 
 this . keyCache = keyCache ; 
 } 
 
 + public void addFinalizingReference ( SSTableTracker tracker ) 
 + { 
 + phantomReference = new SSTableDeletingReference ( tracker , this , finalizerQueue ) ; 
 + finalizers . add ( phantomReference ) ; 
 + } 
 + 
 private static MappedByteBuffer mmap ( String filename , long start , int size ) throws IOException 
 { 
 RandomAccessFile raf ; 
 diff - - git a / src / java / org / apache / cassandra / io / SSTableTracker . java b / src / java / org / apache / cassandra / io / SSTableTracker . java 
 index 1e3b861 . . 7154e2f 100644 
 - - - a / src / java / org / apache / cassandra / io / SSTableTracker . java 
 + + + b / src / java / org / apache / cassandra / io / SSTableTracker . java 
 @ @ - 23 , 11 + 23 , 14 @ @ package org . apache . cassandra . io ; 
 
 import java . util . * ; 
 import java . io . IOException ; 
 + import java . util . concurrent . atomic . AtomicLong ; 
 
 
 public class SSTableTracker implements Iterable < SSTableReader > 
 { 
 private volatile Set < SSTableReader > sstables ; 
 + private final AtomicLong liveSize = new AtomicLong ( ) ; 
 + private final AtomicLong totalSize = new AtomicLong ( ) ; 
 
 public SSTableTracker ( Collection < SSTableReader > sstables ) 
 { 
 @ @ - 42 , 12 + 45 , 17 @ @ public class SSTableTracker implements Iterable < SSTableReader > 
 { 
 assert sstable . getIndexPositions ( ) ! = null ; 
 sstablesNew . add ( sstable ) ; 
 + long size = sstable . bytesOnDisk ( ) ; 
 + liveSize . addAndGet ( size ) ; 
 + totalSize . addAndGet ( size ) ; 
 + sstable . addFinalizingReference ( this ) ; 
 } 
 
 for ( SSTableReader sstable : oldSSTables ) 
 { 
 sstablesNew . remove ( sstable ) ; 
 sstable . markCompacted ( ) ; 
 + liveSize . addAndGet ( - sstable . bytesOnDisk ( ) ) ; 
 } 
 
 sstables = Collections . unmodifiableSet ( sstablesNew ) ; 
 @ @ - 102 , 4 + 110 , 20 @ @ public class SSTableTracker implements Iterable < SSTableReader > 
 } 
 return n ; 
 } 
 + 
 + public long getLiveSize ( ) 
 + { 
 + return liveSize . get ( ) ; 
 + } 
 + 
 + public long getTotalSize ( ) 
 + { 
 + return totalSize . get ( ) ; 
 + } 
 + 
 + public void spaceReclaimed ( long size ) 
 + { 
 + totalSize . addAndGet ( - size ) ; 
 + } 
 } 
 + 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 4971133 . . 17826ce 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 1472 , 10 + 1472 , 31 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe 
 return isClientMode ; 
 } 
 
 - public static void requestGC ( ) 
 + public synchronized void requestGC ( ) 
 { 
 - logger _ . info ( " requesting GC to free disk space " ) ; 
 - System . gc ( ) ; 
 + if ( hasUnreclaimedSpace ( ) ) 
 + { 
 + logger _ . info ( " requesting GC to free disk space " ) ; 
 + System . gc ( ) ; 
 + try 
 + { 
 + Thread . sleep ( 1000 ) ; 
 + } 
 + catch ( InterruptedException e ) 
 + { 
 + throw new AssertionError ( e ) ; 
 + } 
 + } 
 + } 
 + 
 + private boolean hasUnreclaimedSpace ( ) 
 + { 
 + for ( ColumnFamilyStore cfs : ColumnFamilyStore . all ( ) ) 
 + { 
 + if ( cfs . hasUnreclaimedSpace ( ) ) 
 + return true ; 
 + } 
 + return false ; 
 } 
 
 / / Never ever do this at home . Used by tests .
