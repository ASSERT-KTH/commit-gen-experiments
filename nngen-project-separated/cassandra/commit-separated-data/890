BLEU SCORE: 0.020980574531482755

TEST MSG: Don ' t try to validate values for cell tombstones
GENERATED MSG: merge from 1 . 2

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 64bcbd8 . . 887ed19 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 6 <nl> + * Potential error replaying commitlog with smallint / tinyint / date / time types ( CASSANDRA - 11618 ) <nl> * Improve tombstone printing in sstabledump ( CASSANDRA - 11655 ) <nl> * Fix paging for range queries where all clustering columns are specified ( CASSANDRA - 11669 ) <nl> * Don ' t require HEAP _ NEW _ SIZE to be set when using G1 ( CASSANDRA - 11600 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / rows / AbstractCell . java b / src / java / org / apache / cassandra / db / rows / AbstractCell . java <nl> index 882c0e0 . . 00fc286 100644 <nl> - - - a / src / java / org / apache / cassandra / db / rows / AbstractCell . java <nl> + + + b / src / java / org / apache / cassandra / db / rows / AbstractCell . java <nl> @ @ - 52 , 8 + 52 , 6 @ @ public abstract class AbstractCell extends Cell <nl> <nl> public void validate ( ) <nl> { <nl> - column ( ) . validateCellValue ( value ( ) ) ; <nl> - <nl> if ( ttl ( ) < 0 ) <nl> throw new MarshalException ( " A TTL should not be negative " ) ; <nl> if ( localDeletionTime ( ) < 0 ) <nl> @ @ - 61 , 9 + 59 , 16 @ @ public abstract class AbstractCell extends Cell <nl> if ( isExpiring ( ) & & localDeletionTime ( ) = = NO _ DELETION _ TIME ) <nl> throw new MarshalException ( " Shoud not have a TTL without an associated local deletion time " ) ; <nl> <nl> - / / If cell is a tombstone , it shouldn ' t have a value . <nl> - if ( isTombstone ( ) & & value ( ) . hasRemaining ( ) ) <nl> - throw new MarshalException ( " A tombstone should not have a value " ) ; <nl> + if ( isTombstone ( ) ) <nl> + { <nl> + / / If cell is a tombstone , it shouldn ' t have a value . <nl> + if ( value ( ) . hasRemaining ( ) ) <nl> + throw new MarshalException ( " A tombstone should not have a value " ) ; <nl> + } <nl> + else <nl> + { <nl> + column ( ) . validateCellValue ( value ( ) ) ; <nl> + } <nl> <nl> if ( path ( ) ! = null ) <nl> column ( ) . validateCellPath ( path ( ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / CellTest . java b / test / unit / org / apache / cassandra / db / CellTest . java <nl> index 5953255 . . 9072f98 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / CellTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / CellTest . java <nl> @ @ - 30 , 12 + 30 , 12 @ @ import org . junit . Test ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> import org . apache . cassandra . cql3 . ColumnIdentifier ; <nl> - import org . apache . cassandra . db . marshal . IntegerType ; <nl> - import org . apache . cassandra . db . marshal . MapType ; <nl> + import org . apache . cassandra . db . marshal . * ; <nl> import org . apache . cassandra . db . rows . * ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . schema . KeyspaceParams ; <nl> + import org . apache . cassandra . serializers . MarshalException ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> @ @ - 53 , 6 + 53 , 8 @ @ public class CellTest <nl> . addRegularColumn ( " m " , MapType . getInstance ( IntegerType . instance , IntegerType . instance , true ) ) <nl> . build ( ) ; <nl> <nl> + private static final CFMetaData fakeMetadata = CFMetaData . createFake ( " fakeKS " , " fakeTable " ) ; <nl> + <nl> @ BeforeClass <nl> public static void defineSchema ( ) throws ConfigurationException <nl> { <nl> @ @ - 60 , 6 + 62 , 16 @ @ public class CellTest <nl> SchemaLoader . createKeyspace ( KEYSPACE1 , KeyspaceParams . simple ( 1 ) , cfm , cfm2 ) ; <nl> } <nl> <nl> + private static ColumnDefinition fakeColumn ( String name , AbstractType < ? > type ) <nl> + { <nl> + return new ColumnDefinition ( fakeMetadata . ksName , <nl> + fakeMetadata . cfName , <nl> + ColumnIdentifier . getInterned ( name , false ) , <nl> + type , <nl> + ColumnDefinition . NO _ POSITION , <nl> + ColumnDefinition . Kind . REGULAR ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testConflictingTypeEquality ( ) <nl> { <nl> @ @ - 83 , 6 + 95 , 67 @ @ public class CellTest <nl> } <nl> } <nl> <nl> + private void assertValid ( Cell cell ) <nl> + { <nl> + try <nl> + { <nl> + cell . validate ( ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + Assert . fail ( " Cell should be valid but got error : " + e ) ; <nl> + } <nl> + } <nl> + <nl> + private void assertInvalid ( Cell cell ) <nl> + { <nl> + try <nl> + { <nl> + cell . validate ( ) ; <nl> + Assert . fail ( " Cell " + cell + " should be invalid " ) ; <nl> + } <nl> + catch ( MarshalException e ) <nl> + { <nl> + / / Note that we shouldn ' t get anything else than a MarshalException so let other escape and fail the test <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testValidate ( ) <nl> + { <nl> + ColumnDefinition c ; <nl> + <nl> + / / Valid cells <nl> + c = fakeColumn ( " c " , Int32Type . instance ) ; <nl> + assertValid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; <nl> + assertValid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . bytes ( 4 ) ) ) ; <nl> + <nl> + assertValid ( BufferCell . expiring ( c , 0 , 4 , 4 , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; <nl> + assertValid ( BufferCell . expiring ( c , 0 , 4 , 4 , ByteBufferUtil . bytes ( 4 ) ) ) ; <nl> + <nl> + assertValid ( BufferCell . tombstone ( c , 0 , 4 ) ) ; <nl> + <nl> + / / Invalid value ( we don ' t all empty values for smallint ) <nl> + c = fakeColumn ( " c " , ShortType . instance ) ; <nl> + assertInvalid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; <nl> + / / But this should be valid even though the underlying value is an empty BB ( catches bug # 11618 ) <nl> + assertValid ( BufferCell . tombstone ( c , 0 , 4 ) ) ; <nl> + / / And of course , this should be valid with a proper value <nl> + assertValid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . bytes ( ( short ) 4 ) ) ) ; <nl> + <nl> + / / Invalid ttl <nl> + assertInvalid ( BufferCell . expiring ( c , 0 , - 4 , 4 , ByteBufferUtil . bytes ( 4 ) ) ) ; <nl> + / / Invalid local deletion times <nl> + assertInvalid ( BufferCell . expiring ( c , 0 , 4 , - 4 , ByteBufferUtil . bytes ( 4 ) ) ) ; <nl> + assertInvalid ( BufferCell . expiring ( c , 0 , 4 , Cell . NO _ DELETION _ TIME , ByteBufferUtil . bytes ( 4 ) ) ) ; <nl> + <nl> + c = fakeColumn ( " c " , MapType . getInstance ( Int32Type . instance , Int32Type . instance , true ) ) ; <nl> + / / Valid cell path <nl> + assertValid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . bytes ( 4 ) , CellPath . create ( ByteBufferUtil . bytes ( 4 ) ) ) ) ; <nl> + / / Invalid cell path ( int values should be 0 or 4 bytes ) <nl> + assertInvalid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . bytes ( 4 ) , CellPath . create ( ByteBufferUtil . bytes ( ( long ) 4 ) ) ) ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testExpiringCellReconile ( ) <nl> {
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b935425 . . 7f5a487 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 2 - rc1 <nl> + * fix cqlsh rendering of blob fields ( CASSANDRA - 4970 ) <nl> * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) <nl> * save truncation position in system table ( CASSANDRA - 4906 ) <nl> * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) <nl> diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py <nl> index d15c083 . . bab3506 100644 <nl> - - - a / pylib / cqlshlib / formatting . py <nl> + + + b / pylib / cqlshlib / formatting . py <nl> @ @ - 88 , 8 + 88 , 8 @ @ def formatter _ for ( typname ) : <nl> return f <nl> return registrator <nl> <nl> - @ formatter _ for ( ' bytes ' ) <nl> - def format _ value _ bytes ( val , colormap , * * _ ) : <nl> + @ formatter _ for ( ' blob ' ) <nl> + def format _ value _ blob ( val , colormap , * * _ ) : <nl> bval = ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) <nl> return colorme ( bval , colormap , ' hex ' ) <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 64bcbd8 . . 887ed19 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 6 
 + * Potential error replaying commitlog with smallint / tinyint / date / time types ( CASSANDRA - 11618 ) 
 * Improve tombstone printing in sstabledump ( CASSANDRA - 11655 ) 
 * Fix paging for range queries where all clustering columns are specified ( CASSANDRA - 11669 ) 
 * Don ' t require HEAP _ NEW _ SIZE to be set when using G1 ( CASSANDRA - 11600 ) 
 diff - - git a / src / java / org / apache / cassandra / db / rows / AbstractCell . java b / src / java / org / apache / cassandra / db / rows / AbstractCell . java 
 index 882c0e0 . . 00fc286 100644 
 - - - a / src / java / org / apache / cassandra / db / rows / AbstractCell . java 
 + + + b / src / java / org / apache / cassandra / db / rows / AbstractCell . java 
 @ @ - 52 , 8 + 52 , 6 @ @ public abstract class AbstractCell extends Cell 
 
 public void validate ( ) 
 { 
 - column ( ) . validateCellValue ( value ( ) ) ; 
 - 
 if ( ttl ( ) < 0 ) 
 throw new MarshalException ( " A TTL should not be negative " ) ; 
 if ( localDeletionTime ( ) < 0 ) 
 @ @ - 61 , 9 + 59 , 16 @ @ public abstract class AbstractCell extends Cell 
 if ( isExpiring ( ) & & localDeletionTime ( ) = = NO _ DELETION _ TIME ) 
 throw new MarshalException ( " Shoud not have a TTL without an associated local deletion time " ) ; 
 
 - / / If cell is a tombstone , it shouldn ' t have a value . 
 - if ( isTombstone ( ) & & value ( ) . hasRemaining ( ) ) 
 - throw new MarshalException ( " A tombstone should not have a value " ) ; 
 + if ( isTombstone ( ) ) 
 + { 
 + / / If cell is a tombstone , it shouldn ' t have a value . 
 + if ( value ( ) . hasRemaining ( ) ) 
 + throw new MarshalException ( " A tombstone should not have a value " ) ; 
 + } 
 + else 
 + { 
 + column ( ) . validateCellValue ( value ( ) ) ; 
 + } 
 
 if ( path ( ) ! = null ) 
 column ( ) . validateCellPath ( path ( ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / CellTest . java b / test / unit / org / apache / cassandra / db / CellTest . java 
 index 5953255 . . 9072f98 100644 
 - - - a / test / unit / org / apache / cassandra / db / CellTest . java 
 + + + b / test / unit / org / apache / cassandra / db / CellTest . java 
 @ @ - 30 , 12 + 30 , 12 @ @ import org . junit . Test ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . ColumnDefinition ; 
 import org . apache . cassandra . cql3 . ColumnIdentifier ; 
 - import org . apache . cassandra . db . marshal . IntegerType ; 
 - import org . apache . cassandra . db . marshal . MapType ; 
 + import org . apache . cassandra . db . marshal . * ; 
 import org . apache . cassandra . db . rows . * ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . schema . KeyspaceParams ; 
 + import org . apache . cassandra . serializers . MarshalException ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 @ @ - 53 , 6 + 53 , 8 @ @ public class CellTest 
 . addRegularColumn ( " m " , MapType . getInstance ( IntegerType . instance , IntegerType . instance , true ) ) 
 . build ( ) ; 
 
 + private static final CFMetaData fakeMetadata = CFMetaData . createFake ( " fakeKS " , " fakeTable " ) ; 
 + 
 @ BeforeClass 
 public static void defineSchema ( ) throws ConfigurationException 
 { 
 @ @ - 60 , 6 + 62 , 16 @ @ public class CellTest 
 SchemaLoader . createKeyspace ( KEYSPACE1 , KeyspaceParams . simple ( 1 ) , cfm , cfm2 ) ; 
 } 
 
 + private static ColumnDefinition fakeColumn ( String name , AbstractType < ? > type ) 
 + { 
 + return new ColumnDefinition ( fakeMetadata . ksName , 
 + fakeMetadata . cfName , 
 + ColumnIdentifier . getInterned ( name , false ) , 
 + type , 
 + ColumnDefinition . NO _ POSITION , 
 + ColumnDefinition . Kind . REGULAR ) ; 
 + } 
 + 
 @ Test 
 public void testConflictingTypeEquality ( ) 
 { 
 @ @ - 83 , 6 + 95 , 67 @ @ public class CellTest 
 } 
 } 
 
 + private void assertValid ( Cell cell ) 
 + { 
 + try 
 + { 
 + cell . validate ( ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + Assert . fail ( " Cell should be valid but got error : " + e ) ; 
 + } 
 + } 
 + 
 + private void assertInvalid ( Cell cell ) 
 + { 
 + try 
 + { 
 + cell . validate ( ) ; 
 + Assert . fail ( " Cell " + cell + " should be invalid " ) ; 
 + } 
 + catch ( MarshalException e ) 
 + { 
 + / / Note that we shouldn ' t get anything else than a MarshalException so let other escape and fail the test 
 + } 
 + } 
 + 
 + @ Test 
 + public void testValidate ( ) 
 + { 
 + ColumnDefinition c ; 
 + 
 + / / Valid cells 
 + c = fakeColumn ( " c " , Int32Type . instance ) ; 
 + assertValid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; 
 + assertValid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . bytes ( 4 ) ) ) ; 
 + 
 + assertValid ( BufferCell . expiring ( c , 0 , 4 , 4 , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; 
 + assertValid ( BufferCell . expiring ( c , 0 , 4 , 4 , ByteBufferUtil . bytes ( 4 ) ) ) ; 
 + 
 + assertValid ( BufferCell . tombstone ( c , 0 , 4 ) ) ; 
 + 
 + / / Invalid value ( we don ' t all empty values for smallint ) 
 + c = fakeColumn ( " c " , ShortType . instance ) ; 
 + assertInvalid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; 
 + / / But this should be valid even though the underlying value is an empty BB ( catches bug # 11618 ) 
 + assertValid ( BufferCell . tombstone ( c , 0 , 4 ) ) ; 
 + / / And of course , this should be valid with a proper value 
 + assertValid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . bytes ( ( short ) 4 ) ) ) ; 
 + 
 + / / Invalid ttl 
 + assertInvalid ( BufferCell . expiring ( c , 0 , - 4 , 4 , ByteBufferUtil . bytes ( 4 ) ) ) ; 
 + / / Invalid local deletion times 
 + assertInvalid ( BufferCell . expiring ( c , 0 , 4 , - 4 , ByteBufferUtil . bytes ( 4 ) ) ) ; 
 + assertInvalid ( BufferCell . expiring ( c , 0 , 4 , Cell . NO _ DELETION _ TIME , ByteBufferUtil . bytes ( 4 ) ) ) ; 
 + 
 + c = fakeColumn ( " c " , MapType . getInstance ( Int32Type . instance , Int32Type . instance , true ) ) ; 
 + / / Valid cell path 
 + assertValid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . bytes ( 4 ) , CellPath . create ( ByteBufferUtil . bytes ( 4 ) ) ) ) ; 
 + / / Invalid cell path ( int values should be 0 or 4 bytes ) 
 + assertInvalid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . bytes ( 4 ) , CellPath . create ( ByteBufferUtil . bytes ( ( long ) 4 ) ) ) ) ; 
 + } 
 + 
 @ Test 
 public void testExpiringCellReconile ( ) 
 {

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b935425 . . 7f5a487 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 2 - rc1 
 + * fix cqlsh rendering of blob fields ( CASSANDRA - 4970 ) 
 * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) 
 * save truncation position in system table ( CASSANDRA - 4906 ) 
 * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) 
 diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py 
 index d15c083 . . bab3506 100644 
 - - - a / pylib / cqlshlib / formatting . py 
 + + + b / pylib / cqlshlib / formatting . py 
 @ @ - 88 , 8 + 88 , 8 @ @ def formatter _ for ( typname ) : 
 return f 
 return registrator 
 
 - @ formatter _ for ( ' bytes ' ) 
 - def format _ value _ bytes ( val , colormap , * * _ ) : 
 + @ formatter _ for ( ' blob ' ) 
 + def format _ value _ blob ( val , colormap , * * _ ) : 
 bval = ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) 
 return colorme ( bval , colormap , ' hex ' ) 

