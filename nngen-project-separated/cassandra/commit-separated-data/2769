BLEU SCORE: 0.0017824955768751362

TEST MSG: Replace UnsortedColumns usage with ArrayBackedSortedColumns
GENERATED MSG: resolve circular initializer dependency deadlock . patch by Erik Onnen and Gary Dusbabek , reviewed by Jonathan Ellis . CASSANDRA - 1756

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 7d628b5 . . a139fdc 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 25 , 6 + 25 , 7 @ @ <nl> * CF id is changed to be non - deterministic . Data dir / key cache are created <nl> uniquely for CF id ( CASSANDRA - 5202 ) <nl> * New counters implementation ( CASSANDRA - 6504 ) <nl> + * Replace UnsortedColumns usage with ArrayBackedSortedColumns ( CASSANDRA - 6630 ) <nl> <nl> <nl> 2 . 0 . 6 <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java <nl> index 1102c09 . . 6ed0e33 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java <nl> @ @ - 99 , 7 + 99 , 7 @ @ public class UpdateStatement extends ModificationStatement <nl> public ColumnFamily updateForKey ( ByteBuffer key , Composite prefix , UpdateParameters params ) <nl> throws InvalidRequestException <nl> { <nl> - ColumnFamily cf = UnsortedColumns . factory . create ( cfm ) ; <nl> + ColumnFamily cf = ArrayBackedSortedColumns . factory . create ( cfm ) ; <nl> addUpdateForKey ( cf , key , prefix , params ) ; <nl> return cf ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> index 7bcbe25 . . b81e403 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> @ @ - 91 , 16 + 91 , 6 @ @ public class ArrayBackedSortedColumns extends AbstractThreadUnsafeSortedColumns <nl> return pos > = 0 ? cells . get ( pos ) : null ; <nl> } <nl> <nl> - / * * <nl> - * AddColumn throws an exception if the cell added does not sort after <nl> - * the last cell in the map . <nl> - * The reasoning is that this implementation can get slower if too much <nl> - * insertions are done in unsorted order and right now we only use it when <nl> - * * all * insertion ( with this method ) are done in sorted order . The <nl> - * assertion throwing is thus a protection against performance regression <nl> - * without knowing about ( we can revisit that decision later if we have <nl> - * use cases where most insert are in sorted order but a few are not ) . <nl> - * / <nl> public void addColumn ( Cell cell , AbstractAllocator allocator ) <nl> { <nl> if ( cells . isEmpty ( ) ) <nl> @ @ - 109 , 11 + 99 , 7 @ @ public class ArrayBackedSortedColumns extends AbstractThreadUnsafeSortedColumns <nl> return ; <nl> } <nl> <nl> - / / Fast path if inserting at the tail <nl> int c = internalComparator ( ) . compare ( cells . get ( getColumnCount ( ) - 1 ) . name ( ) , cell . name ( ) ) ; <nl> - / / note that we want an assertion here ( see addColumn javadoc ) , but we also want that if <nl> - / / assertion are disabled , addColumn works correctly with unsorted input <nl> - assert c < = 0 : " Added cell does not sort as the " + ( reversed ? " first " : " last " ) + " cell " ; <nl> <nl> if ( c < 0 ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java b / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java <nl> index fd7d4bc . . c1c7b66 100644 <nl> - - - a / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java <nl> @ @ - 234 , 14 + 234 , 7 @ @ public class AtomicBTreeColumns extends ColumnFamily <nl> public Delta addAllWithSizeDelta ( final ColumnFamily cm , AbstractAllocator allocator , Function < Cell , Cell > transformation , Updater indexer , Delta delta ) <nl> { <nl> boolean transformed = false ; <nl> - Collection < Cell > insert ; <nl> - if ( cm instanceof UnsortedColumns ) <nl> - { <nl> - insert = transform ( metadata . comparator . columnComparator ( ) , cm , transformation , true ) ; <nl> - transformed = true ; <nl> - } <nl> - else <nl> - insert = cm . getSortedColumns ( ) ; <nl> + Collection < Cell > insert = cm . getSortedColumns ( ) ; <nl> <nl> while ( true ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 9d2856d . . 2df3fbf 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 491 , 7 + 491 , 6 @ @ public abstract class ColumnFamily implements Iterable < Cell > , IRowCacheEntry <nl> return builder . build ( ) ; <nl> } <nl> <nl> - / / Note : the returned ColumnFamily will be an UnsortedColumns . <nl> public static ColumnFamily fromBytes ( ByteBuffer bytes ) <nl> { <nl> if ( bytes = = null ) <nl> @ @ - 499 , 7 + 498 , 10 @ @ public abstract class ColumnFamily implements Iterable < Cell > , IRowCacheEntry <nl> <nl> try <nl> { <nl> - return serializer . deserialize ( new DataInputStream ( ByteBufferUtil . inputStream ( bytes ) ) , UnsortedColumns . factory , ColumnSerializer . Flag . LOCAL , MessagingService . current _ version ) ; <nl> + return serializer . deserialize ( new DataInputStream ( ByteBufferUtil . inputStream ( bytes ) ) , <nl> + ArrayBackedSortedColumns . factory , <nl> + ColumnSerializer . Flag . LOCAL , <nl> + MessagingService . current _ version ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / Mutation . java b / src / java / org / apache / cassandra / db / Mutation . java <nl> index 31d9503 . . ef9b02d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Mutation . java <nl> + + + b / src / java / org / apache / cassandra / db / Mutation . java <nl> @ @ - 310 , 7 + 310 , 7 @ @ public class Mutation implements IMutation <nl> <nl> private ColumnFamily deserializeOneCf ( DataInput in , int version , ColumnSerializer . Flag flag ) throws IOException <nl> { <nl> - ColumnFamily cf = ColumnFamily . serializer . deserialize ( in , UnsortedColumns . factory , flag , version ) ; <nl> + ColumnFamily cf = ColumnFamily . serializer . deserialize ( in , ArrayBackedSortedColumns . factory , flag , version ) ; <nl> / / We don ' t allow Mutation with null column family , so we should never get null back . <nl> assert cf ! = null ; <nl> return cf ; <nl> diff - - git a / src / java / org / apache / cassandra / service / paxos / Commit . java b / src / java / org / apache / cassandra / service / paxos / Commit . java <nl> index 23f35db . . aae9b72 100644 <nl> - - - a / src / java / org / apache / cassandra / service / paxos / Commit . java <nl> + + + b / src / java / org / apache / cassandra / service / paxos / Commit . java <nl> @ @ - 139 , 7 + 139 , 10 @ @ public class Commit <nl> { <nl> return new Commit ( ByteBufferUtil . readWithShortLength ( in ) , <nl> UUIDSerializer . serializer . deserialize ( in , version ) , <nl> - ColumnFamily . serializer . deserialize ( in , UnsortedColumns . factory , ColumnSerializer . Flag . LOCAL , version ) ) ; <nl> + ColumnFamily . serializer . deserialize ( in , <nl> + ArrayBackedSortedColumns . factory , <nl> + ColumnSerializer . Flag . LOCAL , <nl> + version ) ) ; <nl> } <nl> <nl> public long serializedSize ( Commit commit , int version ) <nl> diff - - git a / src / java / org / apache / cassandra / service / paxos / PrepareResponse . java b / src / java / org / apache / cassandra / service / paxos / PrepareResponse . java <nl> index d2bd835 . . 14e0bc7 100644 <nl> - - - a / src / java / org / apache / cassandra / service / paxos / PrepareResponse . java <nl> + + + b / src / java / org / apache / cassandra / service / paxos / PrepareResponse . java <nl> @ @ - 26 , 9 + 26 , 9 @ @ import java . io . DataOutput ; <nl> import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> <nl> + import org . apache . cassandra . db . ArrayBackedSortedColumns ; <nl> import org . apache . cassandra . db . ColumnFamily ; <nl> import org . apache . cassandra . db . ColumnSerializer ; <nl> - import org . apache . cassandra . db . UnsortedColumns ; <nl> import org . apache . cassandra . io . IVersionedSerializer ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . UUIDSerializer ; <nl> @ @ - 82 , 10 + 82 , 14 @ @ public class PrepareResponse <nl> return new PrepareResponse ( success , <nl> new Commit ( key , <nl> UUIDSerializer . serializer . deserialize ( in , version ) , <nl> - ColumnFamily . serializer . deserialize ( in , UnsortedColumns . factory , ColumnSerializer . Flag . LOCAL , version ) ) , <nl> + ColumnFamily . serializer . deserialize ( in , <nl> + ArrayBackedSortedColumns . factory , <nl> + ColumnSerializer . Flag . LOCAL , version ) ) , <nl> new Commit ( key , <nl> UUIDSerializer . serializer . deserialize ( in , version ) , <nl> - ColumnFamily . serializer . deserialize ( in , UnsortedColumns . factory , ColumnSerializer . Flag . LOCAL , version ) ) ) ; <nl> + ColumnFamily . serializer . deserialize ( in , <nl> + ArrayBackedSortedColumns . factory , <nl> + ColumnSerializer . Flag . LOCAL , version ) ) ) ; <nl> } <nl> <nl> public long serializedSize ( PrepareResponse response , int version ) <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> index fe9dc3f . . 44fb22e 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> @ @ - 754 , 7 + 754 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> ThriftValidation . validateColumnData ( metadata , null , column ) ; <nl> <nl> CFMetaData cfm = Schema . instance . getCFMetaData ( cState . getKeyspace ( ) , column _ family ) ; <nl> - UnsortedColumns cfUpdates = UnsortedColumns . factory . create ( cfm ) ; <nl> + ColumnFamily cfUpdates = ArrayBackedSortedColumns . factory . create ( cfm ) ; <nl> for ( Column column : updates ) <nl> cfUpdates . addColumn ( cfm . comparator . cellFromByteBuffer ( column . name ) , column . value , column . timestamp ) ; <nl> <nl> @ @ - 765 , 7 + 765 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> } <nl> else <nl> { <nl> - cfExpected = TreeMapBackedSortedColumns . factory . create ( cfm ) ; <nl> + cfExpected = ArrayBackedSortedColumns . factory . create ( cfm ) ; <nl> for ( Column column : expected ) <nl> cfExpected . addColumn ( cfm . comparator . cellFromByteBuffer ( column . name ) , column . value , column . timestamp ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / CounterCacheTest . java b / test / unit / org / apache / cassandra / db / CounterCacheTest . java <nl> index 78e7c80 . . a015a43 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / CounterCacheTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / CounterCacheTest . java <nl> @ @ - 74 , 7 + 74 , 7 @ @ public class CounterCacheTest extends SchemaLoader <nl> ColumnFamilyStore cfs = Keyspace . open ( KS ) . getColumnFamilyStore ( CF ) ; <nl> CacheService . instance . invalidateCounterCache ( ) ; <nl> <nl> - ColumnFamily cells = UnsortedColumns . factory . create ( cfs . metadata ) ; <nl> + ColumnFamily cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; <nl> cells . addColumn ( new CounterUpdateCell ( cellname ( 1 ) , 1L , FBUtilities . timestampMicros ( ) ) ) ; <nl> cells . addColumn ( new CounterUpdateCell ( cellname ( 2 ) , 2L , FBUtilities . timestampMicros ( ) ) ) ; <nl> new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / CounterMutationTest . java b / test / unit / org / apache / cassandra / db / CounterMutationTest . java <nl> index 3676ef9 . . 431531c 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / CounterMutationTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / CounterMutationTest . java <nl> @ @ - 17 , 6 + 17 , 8 @ @ <nl> * / <nl> package org . apache . cassandra . db ; <nl> <nl> + import java . nio . ByteBuffer ; <nl> + <nl> import org . junit . Test ; <nl> <nl> import org . apache . cassandra . SchemaLoader ; <nl> @ @ - 45 , 21 + 47 , 21 @ @ public class CounterMutationTest extends SchemaLoader <nl> cfs . truncateBlocking ( ) ; <nl> <nl> / / Do the initial update ( + 1 ) <nl> - ColumnFamily cells = UnsortedColumns . factory . create ( cfs . metadata ) ; <nl> + ColumnFamily cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; <nl> cells . addCounter ( cellname ( 1 ) , 1L ) ; <nl> new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; <nl> ColumnFamily current = cfs . getColumnFamily ( QueryFilter . getIdentityFilter ( dk ( bytes ( 1 ) ) , CF1 , System . currentTimeMillis ( ) ) ) ; <nl> assertEquals ( 1L , CounterContext . instance ( ) . total ( current . getColumn ( cellname ( 1 ) ) . value ( ) ) ) ; <nl> <nl> / / Make another increment ( + 2 ) <nl> - cells = UnsortedColumns . factory . create ( cfs . metadata ) ; <nl> + cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; <nl> cells . addCounter ( cellname ( 1 ) , 2L ) ; <nl> new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; <nl> current = cfs . getColumnFamily ( QueryFilter . getIdentityFilter ( dk ( bytes ( 1 ) ) , CF1 , System . currentTimeMillis ( ) ) ) ; <nl> assertEquals ( 3L , CounterContext . instance ( ) . total ( current . getColumn ( cellname ( 1 ) ) . value ( ) ) ) ; <nl> <nl> / / Decrement to 0 ( - 3 ) <nl> - cells = UnsortedColumns . factory . create ( cfs . metadata ) ; <nl> + cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; <nl> cells . addCounter ( cellname ( 1 ) , - 3L ) ; <nl> new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; <nl> current = cfs . getColumnFamily ( QueryFilter . getIdentityFilter ( dk ( bytes ( 1 ) ) , CF1 , System . currentTimeMillis ( ) ) ) ; <nl> @ @ - 74 , 7 + 76 , 7 @ @ public class CounterMutationTest extends SchemaLoader <nl> cfs . truncateBlocking ( ) ; <nl> <nl> / / Do the initial update ( + 1 , - 1 ) <nl> - ColumnFamily cells = UnsortedColumns . factory . create ( cfs . metadata ) ; <nl> + ColumnFamily cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; <nl> cells . addCounter ( cellname ( 1 ) , 1L ) ; <nl> cells . addCounter ( cellname ( 2 ) , - 1L ) ; <nl> new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; <nl> @ @ - 83 , 7 + 85 , 7 @ @ public class CounterMutationTest extends SchemaLoader <nl> assertEquals ( - 1L , CounterContext . instance ( ) . total ( current . getColumn ( cellname ( 2 ) ) . value ( ) ) ) ; <nl> <nl> / / Make another increment ( + 2 , - 2 ) <nl> - cells = UnsortedColumns . factory . create ( cfs . metadata ) ; <nl> + cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; <nl> cells . addCounter ( cellname ( 1 ) , 2L ) ; <nl> cells . addCounter ( cellname ( 2 ) , - 2L ) ; <nl> new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; <nl> @ @ - 91 , 7 + 93 , 7 @ @ public class CounterMutationTest extends SchemaLoader <nl> assertEquals ( 3L , CounterContext . instance ( ) . total ( current . getColumn ( cellname ( 1 ) ) . value ( ) ) ) ; <nl> <nl> / / Decrement to 0 ( - 3 , + 3 ) <nl> - cells = UnsortedColumns . factory . create ( cfs . metadata ) ; <nl> + cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; <nl> cells . addCounter ( cellname ( 1 ) , - 3L ) ; <nl> cells . addCounter ( cellname ( 2 ) , 3L ) ; <nl> new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; <nl> @ @ - 114 , 11 + 116 , 11 @ @ public class CounterMutationTest extends SchemaLoader <nl> cfs2 . truncateBlocking ( ) ; <nl> <nl> / / Do the update ( + 1 , - 1 ) , ( + 2 , - 2 ) <nl> - ColumnFamily cells1 = UnsortedColumns . factory . create ( cfs1 . metadata ) ; <nl> + ColumnFamily cells1 = ArrayBackedSortedColumns . factory . create ( cfs1 . metadata ) ; <nl> cells1 . addCounter ( cellname ( 1 ) , 1L ) ; <nl> cells1 . addCounter ( cellname ( 2 ) , - 1L ) ; <nl> <nl> - ColumnFamily cells2 = UnsortedColumns . factory . create ( cfs2 . metadata ) ; <nl> + ColumnFamily cells2 = ArrayBackedSortedColumns . factory . create ( cfs2 . metadata ) ; <nl> cells2 . addCounter ( cellname ( 1 ) , 2L ) ; <nl> cells2 . addCounter ( cellname ( 2 ) , - 2L ) ; <nl> <nl> @ @ - 151 , 7 + 153 , 7 @ @ public class CounterMutationTest extends SchemaLoader <nl> cfs . truncateBlocking ( ) ; <nl> <nl> / / Do the initial update ( + 1 , - 1 ) <nl> - ColumnFamily cells = UnsortedColumns . factory . create ( cfs . metadata ) ; <nl> + ColumnFamily cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; <nl> cells . addCounter ( cellname ( 1 ) , 1L ) ; <nl> cells . addCounter ( cellname ( 2 ) , 1L ) ; <nl> new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; <nl> @ @ - 160 , 7 + 162 , 7 @ @ public class CounterMutationTest extends SchemaLoader <nl> assertEquals ( 1L , CounterContext . instance ( ) . total ( current . getColumn ( cellname ( 2 ) ) . value ( ) ) ) ; <nl> <nl> / / Remove the first counter , increment the second counter <nl> - cells = UnsortedColumns . factory . create ( cfs . metadata ) ; <nl> + cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; <nl> cells . addTombstone ( cellname ( 1 ) , ( int ) System . currentTimeMillis ( ) / 1000 , FBUtilities . timestampMicros ( ) ) ; <nl> cells . addCounter ( cellname ( 2 ) , 1L ) ; <nl> new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; <nl> @ @ - 169 , 7 + 171 , 7 @ @ public class CounterMutationTest extends SchemaLoader <nl> assertEquals ( 2L , CounterContext . instance ( ) . total ( current . getColumn ( cellname ( 2 ) ) . value ( ) ) ) ; <nl> <nl> / / Increment the first counter , make sure it ' s still shadowed by the tombstone <nl> - cells = UnsortedColumns . factory . create ( cfs . metadata ) ; <nl> + cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; <nl> cells . addCounter ( cellname ( 1 ) , 1L ) ; <nl> new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; <nl> current = cfs . getColumnFamily ( QueryFilter . getIdentityFilter ( dk ( bytes ( 1 ) ) , CF1 , System . currentTimeMillis ( ) ) ) ; <nl> @ @ - 184 , 7 + 186 , 7 @ @ public class CounterMutationTest extends SchemaLoader <nl> assertNull ( current . getColumn ( cellname ( 2 ) ) ) ; <nl> <nl> / / Increment both counters , ensure that both stay dead <nl> - cells = UnsortedColumns . factory . create ( cfs . metadata ) ; <nl> + cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; <nl> cells . addCounter ( cellname ( 1 ) , 1L ) ; <nl> cells . addCounter ( cellname ( 2 ) , 1L ) ; <nl> new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; <nl> @ @ - 192 , 4 + 194 , 24 @ @ public class CounterMutationTest extends SchemaLoader <nl> assertNull ( current . getColumn ( cellname ( 1 ) ) ) ; <nl> assertNull ( current . getColumn ( cellname ( 2 ) ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testDuplicateCells ( ) throws WriteTimeoutException <nl> + { <nl> + ColumnFamilyStore cfs = Keyspace . open ( KS ) . getColumnFamilyStore ( CF1 ) ; <nl> + cfs . truncateBlocking ( ) ; <nl> + <nl> + ColumnFamily cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; <nl> + cells . addCounter ( cellname ( 1 ) , 1L ) ; <nl> + cells . addCounter ( cellname ( 1 ) , 2L ) ; <nl> + cells . addCounter ( cellname ( 1 ) , 3L ) ; <nl> + cells . addCounter ( cellname ( 1 ) , 4L ) ; <nl> + new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; <nl> + <nl> + ColumnFamily current = cfs . getColumnFamily ( QueryFilter . getIdentityFilter ( dk ( bytes ( 1 ) ) , CF1 , System . currentTimeMillis ( ) ) ) ; <nl> + ByteBuffer context = current . getColumn ( cellname ( 1 ) ) . value ( ) ; <nl> + assertEquals ( 10L , CounterContext . instance ( ) . total ( context ) ) ; <nl> + assertEquals ( ClockAndCount . create ( 1L , 10L ) , CounterContext . instance ( ) . getLocalClockAndCount ( context ) ) ; <nl> + assertEquals ( ClockAndCount . create ( 1L , 10L ) , cfs . getCachedCounter ( bytes ( 1 ) , cellname ( 1 ) ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e4d8d3f . . 5bcf52c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 41 , 6 + 41 , 7 @ @ dev <nl> * fix sstableimport regression ( CASSANDRA - 1753 ) <nl> * fix for bootstrap when no non - system tables are defined ( CASSANDRA - 1732 ) <nl> * handle replica unavailability in index scan ( CASSANDRA - 1755 ) <nl> + * fix service initialization order deadlock ( CASSANDRA - 1756 ) <nl> <nl> <nl> 0 . 7 . 0 - beta3 <nl> diff - - git a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> index 3c9973b . . db3d15b 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> + + + b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> @ @ - 77 , 7 + 77 , 7 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa <nl> MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> try <nl> { <nl> - mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . db : type = DynamicEndpointSnitch " ) ) ; <nl> + mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . db : type = DynamicEndpointSnitch , instance = " + hashCode ( ) ) ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 178 , 6 + 178 , 8 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa <nl> <nl> private void updateScores ( ) / / this is expensive <nl> { <nl> + if ( ! StorageService . instance . isInitialized ( ) ) <nl> + return ; <nl> if ( ! registered ) <nl> { <nl> 	 ILatencyPublisher handler = ( ILatencyPublisher ) MessagingService . instance . getVerbHandler ( StorageService . Verb . REQUEST _ RESPONSE ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 8c28ad6 . . 296f448 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 196 , 11 + 196 , 11 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> } } ; <nl> <nl> <nl> + public static final RetryingScheduledThreadPoolExecutor scheduledTasks = new RetryingScheduledThreadPoolExecutor ( " ScheduledTasks " ) ; <nl> + <nl> private static IPartitioner partitioner _ = DatabaseDescriptor . getPartitioner ( ) ; <nl> public static VersionedValue . VersionedValueFactory valueFactory = new VersionedValue . VersionedValueFactory ( partitioner _ ) ; <nl> - <nl> - public static RetryingScheduledThreadPoolExecutor scheduledTasks = new RetryingScheduledThreadPoolExecutor ( " ScheduledTasks " ) ; <nl> - <nl> + <nl> public static final StorageService instance = new StorageService ( ) ; <nl> <nl> public static IPartitioner getPartitioner ( ) { <nl> @ @ - 309 , 6 + 309 , 11 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> MessagingService . shutdown ( ) ; <nl> StageManager . shutdownNow ( ) ; <nl> } <nl> + <nl> + public boolean isInitialized ( ) <nl> + { <nl> + return initialized ; <nl> + } <nl> <nl> public synchronized void initClient ( ) throws IOException <nl> { <nl> diff - - git a / test / conf / cassandra . yaml b / test / conf / cassandra . yaml <nl> index b74da12 . . bf5f161 100644 <nl> - - - a / test / conf / cassandra . yaml <nl> + + + b / test / conf / cassandra . yaml <nl> @ @ - 21 , 6 + 21 , 7 @ @ disk _ access _ mode : mmap <nl> seeds : <nl> - 127 . 0 . 0 . 2 <nl> endpoint _ snitch : org . apache . cassandra . locator . SimpleSnitch <nl> + dynamic _ snitch : true <nl> request _ scheduler : org . apache . cassandra . scheduler . RoundRobinScheduler <nl> request _ scheduler _ id : keyspace <nl> keyspaces : <nl> diff - - git a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java <nl> index c7eb982 . . daeacf9 100644 <nl> - - - a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java <nl> + + + b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java <nl> @ @ - 19 , 10 + 19 , 11 @ @ <nl> <nl> package org . apache . cassandra . locator ; <nl> <nl> + import java . io . IOException ; <nl> import java . net . InetAddress ; <nl> - import java . net . UnknownHostException ; <nl> import java . util . ArrayList ; <nl> <nl> + import org . apache . cassandra . service . StorageService ; <nl> import org . junit . Test ; <nl> <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> @ @ - 30 , 8 + 31 , 10 @ @ import org . apache . cassandra . utils . FBUtilities ; <nl> public class DynamicEndpointSnitchTest <nl> { <nl> @ Test <nl> - public void testSnitch ( ) throws UnknownHostException , InterruptedException <nl> + public void testSnitch ( ) throws InterruptedException , IOException <nl> { <nl> + / / do this because SS needs to be initialized before DES can work properly . <nl> + StorageService . instance . initClient ( ) ; <nl> int sleeptime = 150 ; <nl> DynamicEndpointSnitch dsnitch = new DynamicEndpointSnitch ( new SimpleSnitch ( ) ) ; <nl> InetAddress self = FBUtilities . getLocalAddress ( ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / service / InitClientTest . java b / test / unit / org / apache / cassandra / service / InitClientTest . java <nl> new file mode 100644 <nl> index 0000000 . . 025a775 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / service / InitClientTest . java <nl> @ @ - 0 , 0 + 1 , 37 @ @ <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import java . io . IOException ; <nl> + <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + <nl> + public class InitClientTest / / extends CleanupHelper <nl> + { <nl> + @ Test <nl> + public void testInitClientStartup ( ) <nl> + { <nl> + try { <nl> + StorageService . instance . initClient ( ) ; <nl> + } catch ( IOException ex ) { <nl> + throw new AssertionError ( ex . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 7d628b5 . . a139fdc 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 25 , 6 + 25 , 7 @ @ 
 * CF id is changed to be non - deterministic . Data dir / key cache are created 
 uniquely for CF id ( CASSANDRA - 5202 ) 
 * New counters implementation ( CASSANDRA - 6504 ) 
 + * Replace UnsortedColumns usage with ArrayBackedSortedColumns ( CASSANDRA - 6630 ) 
 
 
 2 . 0 . 6 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java 
 index 1102c09 . . 6ed0e33 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java 
 @ @ - 99 , 7 + 99 , 7 @ @ public class UpdateStatement extends ModificationStatement 
 public ColumnFamily updateForKey ( ByteBuffer key , Composite prefix , UpdateParameters params ) 
 throws InvalidRequestException 
 { 
 - ColumnFamily cf = UnsortedColumns . factory . create ( cfm ) ; 
 + ColumnFamily cf = ArrayBackedSortedColumns . factory . create ( cfm ) ; 
 addUpdateForKey ( cf , key , prefix , params ) ; 
 return cf ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 index 7bcbe25 . . b81e403 100644 
 - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 @ @ - 91 , 16 + 91 , 6 @ @ public class ArrayBackedSortedColumns extends AbstractThreadUnsafeSortedColumns 
 return pos > = 0 ? cells . get ( pos ) : null ; 
 } 
 
 - / * * 
 - * AddColumn throws an exception if the cell added does not sort after 
 - * the last cell in the map . 
 - * The reasoning is that this implementation can get slower if too much 
 - * insertions are done in unsorted order and right now we only use it when 
 - * * all * insertion ( with this method ) are done in sorted order . The 
 - * assertion throwing is thus a protection against performance regression 
 - * without knowing about ( we can revisit that decision later if we have 
 - * use cases where most insert are in sorted order but a few are not ) . 
 - * / 
 public void addColumn ( Cell cell , AbstractAllocator allocator ) 
 { 
 if ( cells . isEmpty ( ) ) 
 @ @ - 109 , 11 + 99 , 7 @ @ public class ArrayBackedSortedColumns extends AbstractThreadUnsafeSortedColumns 
 return ; 
 } 
 
 - / / Fast path if inserting at the tail 
 int c = internalComparator ( ) . compare ( cells . get ( getColumnCount ( ) - 1 ) . name ( ) , cell . name ( ) ) ; 
 - / / note that we want an assertion here ( see addColumn javadoc ) , but we also want that if 
 - / / assertion are disabled , addColumn works correctly with unsorted input 
 - assert c < = 0 : " Added cell does not sort as the " + ( reversed ? " first " : " last " ) + " cell " ; 
 
 if ( c < 0 ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java b / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java 
 index fd7d4bc . . c1c7b66 100644 
 - - - a / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java 
 + + + b / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java 
 @ @ - 234 , 14 + 234 , 7 @ @ public class AtomicBTreeColumns extends ColumnFamily 
 public Delta addAllWithSizeDelta ( final ColumnFamily cm , AbstractAllocator allocator , Function < Cell , Cell > transformation , Updater indexer , Delta delta ) 
 { 
 boolean transformed = false ; 
 - Collection < Cell > insert ; 
 - if ( cm instanceof UnsortedColumns ) 
 - { 
 - insert = transform ( metadata . comparator . columnComparator ( ) , cm , transformation , true ) ; 
 - transformed = true ; 
 - } 
 - else 
 - insert = cm . getSortedColumns ( ) ; 
 + Collection < Cell > insert = cm . getSortedColumns ( ) ; 
 
 while ( true ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 9d2856d . . 2df3fbf 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 491 , 7 + 491 , 6 @ @ public abstract class ColumnFamily implements Iterable < Cell > , IRowCacheEntry 
 return builder . build ( ) ; 
 } 
 
 - / / Note : the returned ColumnFamily will be an UnsortedColumns . 
 public static ColumnFamily fromBytes ( ByteBuffer bytes ) 
 { 
 if ( bytes = = null ) 
 @ @ - 499 , 7 + 498 , 10 @ @ public abstract class ColumnFamily implements Iterable < Cell > , IRowCacheEntry 
 
 try 
 { 
 - return serializer . deserialize ( new DataInputStream ( ByteBufferUtil . inputStream ( bytes ) ) , UnsortedColumns . factory , ColumnSerializer . Flag . LOCAL , MessagingService . current _ version ) ; 
 + return serializer . deserialize ( new DataInputStream ( ByteBufferUtil . inputStream ( bytes ) ) , 
 + ArrayBackedSortedColumns . factory , 
 + ColumnSerializer . Flag . LOCAL , 
 + MessagingService . current _ version ) ; 
 } 
 catch ( IOException e ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / Mutation . java b / src / java / org / apache / cassandra / db / Mutation . java 
 index 31d9503 . . ef9b02d 100644 
 - - - a / src / java / org / apache / cassandra / db / Mutation . java 
 + + + b / src / java / org / apache / cassandra / db / Mutation . java 
 @ @ - 310 , 7 + 310 , 7 @ @ public class Mutation implements IMutation 
 
 private ColumnFamily deserializeOneCf ( DataInput in , int version , ColumnSerializer . Flag flag ) throws IOException 
 { 
 - ColumnFamily cf = ColumnFamily . serializer . deserialize ( in , UnsortedColumns . factory , flag , version ) ; 
 + ColumnFamily cf = ColumnFamily . serializer . deserialize ( in , ArrayBackedSortedColumns . factory , flag , version ) ; 
 / / We don ' t allow Mutation with null column family , so we should never get null back . 
 assert cf ! = null ; 
 return cf ; 
 diff - - git a / src / java / org / apache / cassandra / service / paxos / Commit . java b / src / java / org / apache / cassandra / service / paxos / Commit . java 
 index 23f35db . . aae9b72 100644 
 - - - a / src / java / org / apache / cassandra / service / paxos / Commit . java 
 + + + b / src / java / org / apache / cassandra / service / paxos / Commit . java 
 @ @ - 139 , 7 + 139 , 10 @ @ public class Commit 
 { 
 return new Commit ( ByteBufferUtil . readWithShortLength ( in ) , 
 UUIDSerializer . serializer . deserialize ( in , version ) , 
 - ColumnFamily . serializer . deserialize ( in , UnsortedColumns . factory , ColumnSerializer . Flag . LOCAL , version ) ) ; 
 + ColumnFamily . serializer . deserialize ( in , 
 + ArrayBackedSortedColumns . factory , 
 + ColumnSerializer . Flag . LOCAL , 
 + version ) ) ; 
 } 
 
 public long serializedSize ( Commit commit , int version ) 
 diff - - git a / src / java / org / apache / cassandra / service / paxos / PrepareResponse . java b / src / java / org / apache / cassandra / service / paxos / PrepareResponse . java 
 index d2bd835 . . 14e0bc7 100644 
 - - - a / src / java / org / apache / cassandra / service / paxos / PrepareResponse . java 
 + + + b / src / java / org / apache / cassandra / service / paxos / PrepareResponse . java 
 @ @ - 26 , 9 + 26 , 9 @ @ import java . io . DataOutput ; 
 import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 
 + import org . apache . cassandra . db . ArrayBackedSortedColumns ; 
 import org . apache . cassandra . db . ColumnFamily ; 
 import org . apache . cassandra . db . ColumnSerializer ; 
 - import org . apache . cassandra . db . UnsortedColumns ; 
 import org . apache . cassandra . io . IVersionedSerializer ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . UUIDSerializer ; 
 @ @ - 82 , 10 + 82 , 14 @ @ public class PrepareResponse 
 return new PrepareResponse ( success , 
 new Commit ( key , 
 UUIDSerializer . serializer . deserialize ( in , version ) , 
 - ColumnFamily . serializer . deserialize ( in , UnsortedColumns . factory , ColumnSerializer . Flag . LOCAL , version ) ) , 
 + ColumnFamily . serializer . deserialize ( in , 
 + ArrayBackedSortedColumns . factory , 
 + ColumnSerializer . Flag . LOCAL , version ) ) , 
 new Commit ( key , 
 UUIDSerializer . serializer . deserialize ( in , version ) , 
 - ColumnFamily . serializer . deserialize ( in , UnsortedColumns . factory , ColumnSerializer . Flag . LOCAL , version ) ) ) ; 
 + ColumnFamily . serializer . deserialize ( in , 
 + ArrayBackedSortedColumns . factory , 
 + ColumnSerializer . Flag . LOCAL , version ) ) ) ; 
 } 
 
 public long serializedSize ( PrepareResponse response , int version ) 
 diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 index fe9dc3f . . 44fb22e 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 @ @ - 754 , 7 + 754 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 ThriftValidation . validateColumnData ( metadata , null , column ) ; 
 
 CFMetaData cfm = Schema . instance . getCFMetaData ( cState . getKeyspace ( ) , column _ family ) ; 
 - UnsortedColumns cfUpdates = UnsortedColumns . factory . create ( cfm ) ; 
 + ColumnFamily cfUpdates = ArrayBackedSortedColumns . factory . create ( cfm ) ; 
 for ( Column column : updates ) 
 cfUpdates . addColumn ( cfm . comparator . cellFromByteBuffer ( column . name ) , column . value , column . timestamp ) ; 
 
 @ @ - 765 , 7 + 765 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 } 
 else 
 { 
 - cfExpected = TreeMapBackedSortedColumns . factory . create ( cfm ) ; 
 + cfExpected = ArrayBackedSortedColumns . factory . create ( cfm ) ; 
 for ( Column column : expected ) 
 cfExpected . addColumn ( cfm . comparator . cellFromByteBuffer ( column . name ) , column . value , column . timestamp ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / CounterCacheTest . java b / test / unit / org / apache / cassandra / db / CounterCacheTest . java 
 index 78e7c80 . . a015a43 100644 
 - - - a / test / unit / org / apache / cassandra / db / CounterCacheTest . java 
 + + + b / test / unit / org / apache / cassandra / db / CounterCacheTest . java 
 @ @ - 74 , 7 + 74 , 7 @ @ public class CounterCacheTest extends SchemaLoader 
 ColumnFamilyStore cfs = Keyspace . open ( KS ) . getColumnFamilyStore ( CF ) ; 
 CacheService . instance . invalidateCounterCache ( ) ; 
 
 - ColumnFamily cells = UnsortedColumns . factory . create ( cfs . metadata ) ; 
 + ColumnFamily cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; 
 cells . addColumn ( new CounterUpdateCell ( cellname ( 1 ) , 1L , FBUtilities . timestampMicros ( ) ) ) ; 
 cells . addColumn ( new CounterUpdateCell ( cellname ( 2 ) , 2L , FBUtilities . timestampMicros ( ) ) ) ; 
 new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / CounterMutationTest . java b / test / unit / org / apache / cassandra / db / CounterMutationTest . java 
 index 3676ef9 . . 431531c 100644 
 - - - a / test / unit / org / apache / cassandra / db / CounterMutationTest . java 
 + + + b / test / unit / org / apache / cassandra / db / CounterMutationTest . java 
 @ @ - 17 , 6 + 17 , 8 @ @ 
 * / 
 package org . apache . cassandra . db ; 
 
 + import java . nio . ByteBuffer ; 
 + 
 import org . junit . Test ; 
 
 import org . apache . cassandra . SchemaLoader ; 
 @ @ - 45 , 21 + 47 , 21 @ @ public class CounterMutationTest extends SchemaLoader 
 cfs . truncateBlocking ( ) ; 
 
 / / Do the initial update ( + 1 ) 
 - ColumnFamily cells = UnsortedColumns . factory . create ( cfs . metadata ) ; 
 + ColumnFamily cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; 
 cells . addCounter ( cellname ( 1 ) , 1L ) ; 
 new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; 
 ColumnFamily current = cfs . getColumnFamily ( QueryFilter . getIdentityFilter ( dk ( bytes ( 1 ) ) , CF1 , System . currentTimeMillis ( ) ) ) ; 
 assertEquals ( 1L , CounterContext . instance ( ) . total ( current . getColumn ( cellname ( 1 ) ) . value ( ) ) ) ; 
 
 / / Make another increment ( + 2 ) 
 - cells = UnsortedColumns . factory . create ( cfs . metadata ) ; 
 + cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; 
 cells . addCounter ( cellname ( 1 ) , 2L ) ; 
 new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; 
 current = cfs . getColumnFamily ( QueryFilter . getIdentityFilter ( dk ( bytes ( 1 ) ) , CF1 , System . currentTimeMillis ( ) ) ) ; 
 assertEquals ( 3L , CounterContext . instance ( ) . total ( current . getColumn ( cellname ( 1 ) ) . value ( ) ) ) ; 
 
 / / Decrement to 0 ( - 3 ) 
 - cells = UnsortedColumns . factory . create ( cfs . metadata ) ; 
 + cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; 
 cells . addCounter ( cellname ( 1 ) , - 3L ) ; 
 new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; 
 current = cfs . getColumnFamily ( QueryFilter . getIdentityFilter ( dk ( bytes ( 1 ) ) , CF1 , System . currentTimeMillis ( ) ) ) ; 
 @ @ - 74 , 7 + 76 , 7 @ @ public class CounterMutationTest extends SchemaLoader 
 cfs . truncateBlocking ( ) ; 
 
 / / Do the initial update ( + 1 , - 1 ) 
 - ColumnFamily cells = UnsortedColumns . factory . create ( cfs . metadata ) ; 
 + ColumnFamily cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; 
 cells . addCounter ( cellname ( 1 ) , 1L ) ; 
 cells . addCounter ( cellname ( 2 ) , - 1L ) ; 
 new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; 
 @ @ - 83 , 7 + 85 , 7 @ @ public class CounterMutationTest extends SchemaLoader 
 assertEquals ( - 1L , CounterContext . instance ( ) . total ( current . getColumn ( cellname ( 2 ) ) . value ( ) ) ) ; 
 
 / / Make another increment ( + 2 , - 2 ) 
 - cells = UnsortedColumns . factory . create ( cfs . metadata ) ; 
 + cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; 
 cells . addCounter ( cellname ( 1 ) , 2L ) ; 
 cells . addCounter ( cellname ( 2 ) , - 2L ) ; 
 new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; 
 @ @ - 91 , 7 + 93 , 7 @ @ public class CounterMutationTest extends SchemaLoader 
 assertEquals ( 3L , CounterContext . instance ( ) . total ( current . getColumn ( cellname ( 1 ) ) . value ( ) ) ) ; 
 
 / / Decrement to 0 ( - 3 , + 3 ) 
 - cells = UnsortedColumns . factory . create ( cfs . metadata ) ; 
 + cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; 
 cells . addCounter ( cellname ( 1 ) , - 3L ) ; 
 cells . addCounter ( cellname ( 2 ) , 3L ) ; 
 new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; 
 @ @ - 114 , 11 + 116 , 11 @ @ public class CounterMutationTest extends SchemaLoader 
 cfs2 . truncateBlocking ( ) ; 
 
 / / Do the update ( + 1 , - 1 ) , ( + 2 , - 2 ) 
 - ColumnFamily cells1 = UnsortedColumns . factory . create ( cfs1 . metadata ) ; 
 + ColumnFamily cells1 = ArrayBackedSortedColumns . factory . create ( cfs1 . metadata ) ; 
 cells1 . addCounter ( cellname ( 1 ) , 1L ) ; 
 cells1 . addCounter ( cellname ( 2 ) , - 1L ) ; 
 
 - ColumnFamily cells2 = UnsortedColumns . factory . create ( cfs2 . metadata ) ; 
 + ColumnFamily cells2 = ArrayBackedSortedColumns . factory . create ( cfs2 . metadata ) ; 
 cells2 . addCounter ( cellname ( 1 ) , 2L ) ; 
 cells2 . addCounter ( cellname ( 2 ) , - 2L ) ; 
 
 @ @ - 151 , 7 + 153 , 7 @ @ public class CounterMutationTest extends SchemaLoader 
 cfs . truncateBlocking ( ) ; 
 
 / / Do the initial update ( + 1 , - 1 ) 
 - ColumnFamily cells = UnsortedColumns . factory . create ( cfs . metadata ) ; 
 + ColumnFamily cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; 
 cells . addCounter ( cellname ( 1 ) , 1L ) ; 
 cells . addCounter ( cellname ( 2 ) , 1L ) ; 
 new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; 
 @ @ - 160 , 7 + 162 , 7 @ @ public class CounterMutationTest extends SchemaLoader 
 assertEquals ( 1L , CounterContext . instance ( ) . total ( current . getColumn ( cellname ( 2 ) ) . value ( ) ) ) ; 
 
 / / Remove the first counter , increment the second counter 
 - cells = UnsortedColumns . factory . create ( cfs . metadata ) ; 
 + cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; 
 cells . addTombstone ( cellname ( 1 ) , ( int ) System . currentTimeMillis ( ) / 1000 , FBUtilities . timestampMicros ( ) ) ; 
 cells . addCounter ( cellname ( 2 ) , 1L ) ; 
 new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; 
 @ @ - 169 , 7 + 171 , 7 @ @ public class CounterMutationTest extends SchemaLoader 
 assertEquals ( 2L , CounterContext . instance ( ) . total ( current . getColumn ( cellname ( 2 ) ) . value ( ) ) ) ; 
 
 / / Increment the first counter , make sure it ' s still shadowed by the tombstone 
 - cells = UnsortedColumns . factory . create ( cfs . metadata ) ; 
 + cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; 
 cells . addCounter ( cellname ( 1 ) , 1L ) ; 
 new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; 
 current = cfs . getColumnFamily ( QueryFilter . getIdentityFilter ( dk ( bytes ( 1 ) ) , CF1 , System . currentTimeMillis ( ) ) ) ; 
 @ @ - 184 , 7 + 186 , 7 @ @ public class CounterMutationTest extends SchemaLoader 
 assertNull ( current . getColumn ( cellname ( 2 ) ) ) ; 
 
 / / Increment both counters , ensure that both stay dead 
 - cells = UnsortedColumns . factory . create ( cfs . metadata ) ; 
 + cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; 
 cells . addCounter ( cellname ( 1 ) , 1L ) ; 
 cells . addCounter ( cellname ( 2 ) , 1L ) ; 
 new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; 
 @ @ - 192 , 4 + 194 , 24 @ @ public class CounterMutationTest extends SchemaLoader 
 assertNull ( current . getColumn ( cellname ( 1 ) ) ) ; 
 assertNull ( current . getColumn ( cellname ( 2 ) ) ) ; 
 } 
 + 
 + @ Test 
 + public void testDuplicateCells ( ) throws WriteTimeoutException 
 + { 
 + ColumnFamilyStore cfs = Keyspace . open ( KS ) . getColumnFamilyStore ( CF1 ) ; 
 + cfs . truncateBlocking ( ) ; 
 + 
 + ColumnFamily cells = ArrayBackedSortedColumns . factory . create ( cfs . metadata ) ; 
 + cells . addCounter ( cellname ( 1 ) , 1L ) ; 
 + cells . addCounter ( cellname ( 1 ) , 2L ) ; 
 + cells . addCounter ( cellname ( 1 ) , 3L ) ; 
 + cells . addCounter ( cellname ( 1 ) , 4L ) ; 
 + new CounterMutation ( new Mutation ( KS , bytes ( 1 ) , cells ) , ConsistencyLevel . ONE ) . apply ( ) ; 
 + 
 + ColumnFamily current = cfs . getColumnFamily ( QueryFilter . getIdentityFilter ( dk ( bytes ( 1 ) ) , CF1 , System . currentTimeMillis ( ) ) ) ; 
 + ByteBuffer context = current . getColumn ( cellname ( 1 ) ) . value ( ) ; 
 + assertEquals ( 10L , CounterContext . instance ( ) . total ( context ) ) ; 
 + assertEquals ( ClockAndCount . create ( 1L , 10L ) , CounterContext . instance ( ) . getLocalClockAndCount ( context ) ) ; 
 + assertEquals ( ClockAndCount . create ( 1L , 10L ) , cfs . getCachedCounter ( bytes ( 1 ) , cellname ( 1 ) ) ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e4d8d3f . . 5bcf52c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 41 , 6 + 41 , 7 @ @ dev 
 * fix sstableimport regression ( CASSANDRA - 1753 ) 
 * fix for bootstrap when no non - system tables are defined ( CASSANDRA - 1732 ) 
 * handle replica unavailability in index scan ( CASSANDRA - 1755 ) 
 + * fix service initialization order deadlock ( CASSANDRA - 1756 ) 
 
 
 0 . 7 . 0 - beta3 
 diff - - git a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 index 3c9973b . . db3d15b 100644 
 - - - a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 + + + b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 @ @ - 77 , 7 + 77 , 7 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa 
 MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 try 
 { 
 - mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . db : type = DynamicEndpointSnitch " ) ) ; 
 + mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . db : type = DynamicEndpointSnitch , instance = " + hashCode ( ) ) ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 178 , 6 + 178 , 8 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa 
 
 private void updateScores ( ) / / this is expensive 
 { 
 + if ( ! StorageService . instance . isInitialized ( ) ) 
 + return ; 
 if ( ! registered ) 
 { 
 	 ILatencyPublisher handler = ( ILatencyPublisher ) MessagingService . instance . getVerbHandler ( StorageService . Verb . REQUEST _ RESPONSE ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 8c28ad6 . . 296f448 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 196 , 11 + 196 , 11 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 } } ; 
 
 
 + public static final RetryingScheduledThreadPoolExecutor scheduledTasks = new RetryingScheduledThreadPoolExecutor ( " ScheduledTasks " ) ; 
 + 
 private static IPartitioner partitioner _ = DatabaseDescriptor . getPartitioner ( ) ; 
 public static VersionedValue . VersionedValueFactory valueFactory = new VersionedValue . VersionedValueFactory ( partitioner _ ) ; 
 - 
 - public static RetryingScheduledThreadPoolExecutor scheduledTasks = new RetryingScheduledThreadPoolExecutor ( " ScheduledTasks " ) ; 
 - 
 + 
 public static final StorageService instance = new StorageService ( ) ; 
 
 public static IPartitioner getPartitioner ( ) { 
 @ @ - 309 , 6 + 309 , 11 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 MessagingService . shutdown ( ) ; 
 StageManager . shutdownNow ( ) ; 
 } 
 + 
 + public boolean isInitialized ( ) 
 + { 
 + return initialized ; 
 + } 
 
 public synchronized void initClient ( ) throws IOException 
 { 
 diff - - git a / test / conf / cassandra . yaml b / test / conf / cassandra . yaml 
 index b74da12 . . bf5f161 100644 
 - - - a / test / conf / cassandra . yaml 
 + + + b / test / conf / cassandra . yaml 
 @ @ - 21 , 6 + 21 , 7 @ @ disk _ access _ mode : mmap 
 seeds : 
 - 127 . 0 . 0 . 2 
 endpoint _ snitch : org . apache . cassandra . locator . SimpleSnitch 
 + dynamic _ snitch : true 
 request _ scheduler : org . apache . cassandra . scheduler . RoundRobinScheduler 
 request _ scheduler _ id : keyspace 
 keyspaces : 
 diff - - git a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java 
 index c7eb982 . . daeacf9 100644 
 - - - a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java 
 + + + b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java 
 @ @ - 19 , 10 + 19 , 11 @ @ 
 
 package org . apache . cassandra . locator ; 
 
 + import java . io . IOException ; 
 import java . net . InetAddress ; 
 - import java . net . UnknownHostException ; 
 import java . util . ArrayList ; 
 
 + import org . apache . cassandra . service . StorageService ; 
 import org . junit . Test ; 
 
 import org . apache . cassandra . utils . FBUtilities ; 
 @ @ - 30 , 8 + 31 , 10 @ @ import org . apache . cassandra . utils . FBUtilities ; 
 public class DynamicEndpointSnitchTest 
 { 
 @ Test 
 - public void testSnitch ( ) throws UnknownHostException , InterruptedException 
 + public void testSnitch ( ) throws InterruptedException , IOException 
 { 
 + / / do this because SS needs to be initialized before DES can work properly . 
 + StorageService . instance . initClient ( ) ; 
 int sleeptime = 150 ; 
 DynamicEndpointSnitch dsnitch = new DynamicEndpointSnitch ( new SimpleSnitch ( ) ) ; 
 InetAddress self = FBUtilities . getLocalAddress ( ) ; 
 diff - - git a / test / unit / org / apache / cassandra / service / InitClientTest . java b / test / unit / org / apache / cassandra / service / InitClientTest . java 
 new file mode 100644 
 index 0000000 . . 025a775 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / service / InitClientTest . java 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + package org . apache . cassandra . service ; 
 + 
 + import org . junit . Test ; 
 + 
 + import java . io . IOException ; 
 + 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + 
 + public class InitClientTest / / extends CleanupHelper 
 + { 
 + @ Test 
 + public void testInitClientStartup ( ) 
 + { 
 + try { 
 + StorageService . instance . initClient ( ) ; 
 + } catch ( IOException ex ) { 
 + throw new AssertionError ( ex . getMessage ( ) ) ; 
 + } 
 + } 
 + }
