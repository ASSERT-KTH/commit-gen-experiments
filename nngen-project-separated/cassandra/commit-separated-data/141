BLEU SCORE: 0.014199193612838947

TEST MSG: List clients by protocol versions ` nodetool clientstats - - by - protocol `
GENERATED MSG: improve testing of StorageService init , and fix shutdown of messagingservice .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 628d0af . . 25c237f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 9 + 1 , 10 @ @ <nl> 4 . 0 <nl> * Replace deprecated junit . framework . Assert usages with org . junit . Assert ( CASSANDRA - 14431 ) <nl> * cassandra - stress throws NPE if insert section isn ' t specified in user profile ( CASSSANDRA - 14426 ) <nl> + * List clients by protocol versions ` nodetool clientstats - - by - protocol ` ( CASSANDRA - 14335 ) <nl> * Improve LatencyMetrics performance by reducing write path processing ( CASSANDRA - 14281 ) <nl> * Add network authz ( CASSANDRA - 13985 ) <nl> - * Use the correct IP / Port for Streaming when localAddress is left unbound ( CASSANDAR - 14389 ) <nl> + * Use the correct IP / Port for Streaming when localAddress is left unbound ( CASSANDRA - 14389 ) <nl> * nodetool listsnapshots is missing local system keyspace snapshots ( CASSANDRA - 14381 ) <nl> * Remove StreamCoordinator . streamExecutor thread pool ( CASSANDRA - 14402 ) <nl> * Rename nodetool - - with - port to - - print - port to disambiguate from - - port ( CASSANDRA - 14392 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index 5ca3844 . . 7e7649d 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 679 , 6 + 679 , 10 @ @ public class CassandraDaemon <nl> instance . activate ( ) ; <nl> } <nl> <nl> + public void clearConnectionHistory ( ) { <nl> + nativeTransportService . clearConnectionHistory ( ) ; <nl> + } <nl> + <nl> private void exitOrFail ( int code , String message ) <nl> { <nl> exitOrFail ( code , message , null ) ; <nl> @ @ - 731 , 5 + 735 , 7 @ @ public class CassandraDaemon <nl> * Returns whether the server is currently running . <nl> * / <nl> public boolean isRunning ( ) ; <nl> + <nl> + public void clearConnectionHistory ( ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / NativeTransportService . java b / src / java / org / apache / cassandra / service / NativeTransportService . java <nl> index d70e56e . . 39b334e 100644 <nl> - - - a / src / java / org / apache / cassandra / service / NativeTransportService . java <nl> + + + b / src / java / org / apache / cassandra / service / NativeTransportService . java <nl> @ @ - 148 , 6 + 148 , 17 @ @ public class NativeTransportService <nl> } <nl> return result ; <nl> } ) ; <nl> + <nl> + ClientMetrics . instance . addGauge ( " clientsByProtocolVersion " , ( ) - > <nl> + { <nl> + List < Map < String , String > > result = new ArrayList < > ( ) ; <nl> + for ( Server server : servers ) <nl> + { <nl> + result . addAll ( server . getClientsByProtocolVersion ( ) ) ; <nl> + } <nl> + return result ; <nl> + } ) ; <nl> + <nl> AuthMetrics . init ( ) ; <nl> <nl> initialized = true ; <nl> @ @ - 225 , 4 + 236 , 10 @ @ public class NativeTransportService <nl> { <nl> return servers ; <nl> } <nl> + <nl> + public void clearConnectionHistory ( ) <nl> + { <nl> + for ( Server server : servers ) <nl> + server . clearConnectionHistory ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 0f114dd . . c94f603 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 5380 , 4 + 5380 , 11 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> DatabaseDescriptor . setHintedHandoffThrottleInKB ( throttleInKB ) ; <nl> logger . info ( " Updated hinted _ handoff _ throttle _ in _ kb to { } " , throttleInKB ) ; <nl> } <nl> + <nl> + @ Override <nl> + public void clearConnectionHistory ( ) <nl> + { <nl> + daemon . clearConnectionHistory ( ) ; <nl> + logger . info ( " Cleared connection history " ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index 62a73de . . 20b7400 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 672 , 4 + 672 , 8 @ @ public interface StorageServiceMBean extends NotificationEmitter <nl> * @ return true if the node successfully starts resuming . ( this does not mean bootstrap streaming was success . ) <nl> * / <nl> public boolean resumeBootstrap ( ) ; <nl> + <nl> + <nl> + / * * Clears the history of clients that have connected in the past * * / <nl> + void clearConnectionHistory ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index 49b6563 . . 4fdb563 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 1520 , 6 + 1520 , 7 @ @ public class NodeProbe implements AutoCloseable <nl> case " connections " : / / List < Map < String , String > > - list of all native connections and their properties <nl> case " connectedNativeClients " : / / number of connected native clients <nl> case " connectedNativeClientsByUser " : / / number of native clients by username <nl> + case " clientsByProtocolVersion " : / / number of native clients by username <nl> return JMX . newMBeanProxy ( mbeanServerConn , <nl> new ObjectName ( " org . apache . cassandra . metrics : type = Client , name = " + metricName ) , <nl> CassandraMetricsRegistry . JmxGaugeMBean . class ) . getValue ( ) ; <nl> @ @ - 1668 , 6 + 1669 , 11 @ @ public class NodeProbe implements AutoCloseable <nl> { <nl> msProxy . reloadSslCertificates ( ) ; <nl> } <nl> + <nl> + public void clearConnectionHistory ( ) <nl> + { <nl> + ssProxy . clearConnectionHistory ( ) ; <nl> + } <nl> } <nl> <nl> class ColumnFamilyStoreMBeanIterator implements Iterator < Map . Entry < String , ColumnFamilyStoreMBean > > <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / ClientStats . java b / src / java / org / apache / cassandra / tools / nodetool / ClientStats . java <nl> index 0469074 . . 9b4ada8 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / nodetool / ClientStats . java <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / ClientStats . java <nl> @ @ - 17 , 6 + 17 , 8 @ @ <nl> * / <nl> package org . apache . cassandra . tools . nodetool ; <nl> <nl> + import java . text . SimpleDateFormat ; <nl> + import java . util . Date ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> @ @ - 34 , 9 + 36 , 48 @ @ public class ClientStats extends NodeToolCmd <nl> @ Option ( title = " list _ connections " , name = " - - all " , description = " Lists all connections " ) <nl> private boolean listConnections = false ; <nl> <nl> + @ Option ( title = " by _ protocol " , name = " - - by - protocol " , description = " Lists last 100 client connections with oldest protocol version " ) <nl> + private boolean oldestProtocolConnections = false ; <nl> + <nl> + @ Option ( title = " clear _ history " , name = " - - clear - history " , description = " Clear the history of connected clients " ) <nl> + private boolean clearConnectionHistory = false ; <nl> + <nl> @ Override <nl> public void execute ( NodeProbe probe ) <nl> { <nl> + if ( clearConnectionHistory ) <nl> + { <nl> + System . out . println ( " Clearing history " ) ; <nl> + probe . clearConnectionHistory ( ) ; <nl> + return ; <nl> + } <nl> + <nl> + if ( oldestProtocolConnections ) <nl> + { <nl> + SimpleDateFormat sdf = new SimpleDateFormat ( " MMM dd , yyyy HH : mm : ss " ) ; <nl> + <nl> + System . out . println ( " Clients by protocol version " ) ; <nl> + System . out . println ( " " ) ; <nl> + <nl> + List < Map < String , String > > clients = ( List < Map < String , String > > ) probe . getClientMetric ( " clientsByProtocolVersion " ) ; <nl> + <nl> + if ( ! clients . isEmpty ( ) ) <nl> + { <nl> + TableBuilder table = new TableBuilder ( ) ; <nl> + table . add ( " Protocol - Version " , " IP - Address " , " Last - Seen " ) ; <nl> + <nl> + for ( Map < String , String > client : clients ) <nl> + { <nl> + table . add ( client . get ( " protocolVersion " ) , client . get ( " inetAddress " ) , sdf . format ( new Date ( Long . valueOf ( client . get ( " lastSeenTime " ) ) ) ) ) ; <nl> + } <nl> + <nl> + table . printTo ( System . out ) ; <nl> + System . out . println ( ) ; <nl> + } <nl> + <nl> + return ; <nl> + } <nl> + <nl> if ( listConnections ) <nl> { <nl> List < Map < String , String > > clients = ( List < Map < String , String > > ) probe . getClientMetric ( " connections " ) ; <nl> diff - - git a / src / java / org / apache / cassandra / transport / ProtocolVersionTracker . java b / src / java / org / apache / cassandra / transport / ProtocolVersionTracker . java <nl> new file mode 100644 <nl> index 0000000 . . a2468bd <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / transport / ProtocolVersionTracker . java <nl> @ @ - 0 , 0 + 1 , 109 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . transport ; <nl> + <nl> + import java . net . InetAddress ; <nl> + import java . util . EnumMap ; <nl> + import java . util . LinkedHashMap ; <nl> + import java . util . Map ; <nl> + import java . util . stream . Collectors ; <nl> + <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> + import com . google . common . base . Preconditions ; <nl> + import com . google . common . collect . ImmutableSet ; <nl> + <nl> + import com . github . benmanes . caffeine . cache . Caffeine ; <nl> + import com . github . benmanes . caffeine . cache . LoadingCache ; <nl> + import org . apache . cassandra . utils . Clock ; <nl> + <nl> + / * * <nl> + * This class tracks the last 100 connections per protocol version <nl> + * / <nl> + public class ProtocolVersionTracker <nl> + { <nl> + public static final int DEFAULT _ MAX _ CAPACITY = 100 ; <nl> + <nl> + @ VisibleForTesting <nl> + final EnumMap < ProtocolVersion , LoadingCache < InetAddress , Long > > clientsByProto ; <nl> + <nl> + public ProtocolVersionTracker ( ) <nl> + { <nl> + this ( DEFAULT _ MAX _ CAPACITY ) ; <nl> + } <nl> + <nl> + public ProtocolVersionTracker ( final int capacity ) <nl> + { <nl> + this . clientsByProto = new EnumMap < > ( ProtocolVersion . class ) ; <nl> + <nl> + for ( ProtocolVersion version : ProtocolVersion . values ( ) ) <nl> + { <nl> + clientsByProto . put ( version , Caffeine . newBuilder ( ) . maximumSize ( capacity ) <nl> + . build ( key - > Clock . instance . currentTimeMillis ( ) ) ) ; <nl> + } <nl> + } <nl> + <nl> + void addConnection ( final InetAddress addr , final ProtocolVersion version ) <nl> + { <nl> + if ( addr = = null | | version = = null ) return ; <nl> + <nl> + LoadingCache < InetAddress , Long > clients = clientsByProto . get ( version ) ; <nl> + clients . put ( addr , Clock . instance . currentTimeMillis ( ) ) ; <nl> + } <nl> + <nl> + public LinkedHashMap < ProtocolVersion , ImmutableSet < ClientIPAndTime > > getAll ( ) <nl> + { <nl> + LinkedHashMap < ProtocolVersion , ImmutableSet < ClientIPAndTime > > result = new LinkedHashMap < > ( ) ; <nl> + for ( ProtocolVersion version : ProtocolVersion . values ( ) ) <nl> + { <nl> + result . put ( version , ImmutableSet . copyOf ( clientsByProto . get ( version ) . asMap ( ) . entrySet ( ) . stream ( ) <nl> + . map ( e - > new ClientIPAndTime ( e . getKey ( ) , e . getValue ( ) ) ) . collect ( Collectors . toSet ( ) ) ) ) ; <nl> + } <nl> + return result ; <nl> + } <nl> + <nl> + public void clear ( ) <nl> + { <nl> + for ( Map . Entry < ProtocolVersion , LoadingCache < InetAddress , Long > > entry : clientsByProto . entrySet ( ) ) <nl> + { <nl> + entry . getValue ( ) . invalidateAll ( ) ; <nl> + } <nl> + } <nl> + <nl> + public static class ClientIPAndTime <nl> + { <nl> + final InetAddress inetAddress ; <nl> + final long lastSeen ; <nl> + <nl> + public ClientIPAndTime ( final InetAddress inetAddress , final long lastSeen ) <nl> + { <nl> + Preconditions . checkNotNull ( inetAddress ) ; <nl> + this . inetAddress = inetAddress ; <nl> + this . lastSeen = lastSeen ; <nl> + } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return " ClientIPAndTime { " + <nl> + " inetAddress = " + inetAddress + <nl> + " , lastSeen = " + lastSeen + <nl> + ' } ' ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java <nl> index 7aade66 . . a7cfdfb 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Server . java <nl> + + + b / src / java / org / apache / cassandra / transport / Server . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . ImmutableSet ; <nl> <nl> import io . netty . bootstrap . ServerBootstrap ; <nl> import io . netty . buffer . ByteBuf ; <nl> @ @ - 206 , 6 + 207 , 32 @ @ public class Server implements CassandraDaemon . Server <nl> return result ; <nl> } <nl> <nl> + public List < Map < String , String > > getClientsByProtocolVersion ( ) { <nl> + LinkedHashMap < ProtocolVersion , ImmutableSet < ProtocolVersionTracker . ClientIPAndTime > > all = connectionTracker . protoTracker . getAll ( ) ; <nl> + List < Map < String , String > > result = new ArrayList < > ( ) ; <nl> + <nl> + for ( Map . Entry < ProtocolVersion , ImmutableSet < ProtocolVersionTracker . ClientIPAndTime > > entry : all . entrySet ( ) ) <nl> + { <nl> + ProtocolVersion protoVersion = entry . getKey ( ) ; <nl> + <nl> + for ( ProtocolVersionTracker . ClientIPAndTime client : entry . getValue ( ) ) <nl> + { <nl> + result . add ( new ImmutableMap . Builder < String , String > ( ) <nl> + . put ( " protocolVersion " , protoVersion . toString ( ) ) <nl> + . put ( " inetAddress " , client . inetAddress . toString ( ) ) <nl> + . put ( " lastSeenTime " , String . valueOf ( client . lastSeen ) ) <nl> + . build ( ) ) ; <nl> + } <nl> + } <nl> + return result ; <nl> + } <nl> + <nl> + @ Override <nl> + public void clearConnectionHistory ( ) <nl> + { <nl> + connectionTracker . protoTracker . clear ( ) ; <nl> + } <nl> + <nl> private void close ( ) <nl> { <nl> / / Close opened connections <nl> @ @ - 282 , 6 + 309 , 7 @ @ public class Server implements CassandraDaemon . Server <nl> / / TODO : should we be using the GlobalEventExecutor or defining our own ? <nl> public final ChannelGroup allChannels = new DefaultChannelGroup ( GlobalEventExecutor . INSTANCE ) ; <nl> private final EnumMap < Event . Type , ChannelGroup > groups = new EnumMap < > ( Event . Type . class ) ; <nl> + private final ProtocolVersionTracker protoTracker = new ProtocolVersionTracker ( ) ; <nl> <nl> public ConnectionTracker ( ) <nl> { <nl> @ @ - 292 , 6 + 320 , 9 @ @ public class Server implements CassandraDaemon . Server <nl> public void addConnection ( Channel ch , Connection connection ) <nl> { <nl> allChannels . add ( ch ) ; <nl> + <nl> + if ( ch . remoteAddress ( ) instanceof InetSocketAddress ) <nl> + protoTracker . addConnection ( ( ( InetSocketAddress ) ch . remoteAddress ( ) ) . getAddress ( ) , connection . getVersion ( ) ) ; <nl> } <nl> <nl> public void register ( Event . Type type , Channel ch ) <nl> @ @ - 334 , 6 + 365 , 7 @ @ public class Server implements CassandraDaemon . Server <nl> } <nl> return result ; <nl> } <nl> + <nl> } <nl> <nl> private static class Initializer extends ChannelInitializer < Channel > <nl> diff - - git a / test / unit / org / apache / cassandra / transport / ProtocolVersionTrackerTest . java b / test / unit / org / apache / cassandra / transport / ProtocolVersionTrackerTest . java <nl> new file mode 100644 <nl> index 0000000 . . 6808c0a <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / transport / ProtocolVersionTrackerTest . java <nl> @ @ - 0 , 0 + 1 , 115 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . transport ; <nl> + <nl> + import java . net . InetAddress ; <nl> + import java . net . UnknownHostException ; <nl> + import java . util . List ; <nl> + import java . util . stream . Collectors ; <nl> + import java . util . stream . IntStream ; <nl> + <nl> + import com . google . common . collect . ImmutableSet ; <nl> + import org . junit . Test ; <nl> + <nl> + import static org . apache . cassandra . transport . ProtocolVersionTracker . ClientIPAndTime ; <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> + public class ProtocolVersionTrackerTest <nl> + { <nl> + @ Test <nl> + public void addConnection _ shouldUpdateSetToLatestTimestamp ( ) throws UnknownHostException , InterruptedException <nl> + { <nl> + ProtocolVersionTracker pvt = new ProtocolVersionTracker ( ) ; <nl> + final InetAddress client = InetAddress . getByName ( " 127 . 0 . 1 . 1 " ) ; <nl> + pvt . addConnection ( client , ProtocolVersion . V4 ) ; <nl> + <nl> + for ( InetAddress addr : getMockConnections ( 10 ) ) <nl> + { <nl> + pvt . addConnection ( addr , ProtocolVersion . V4 ) ; <nl> + } <nl> + <nl> + ImmutableSet < ClientIPAndTime > clientIPAndTimes1 = pvt . getAll ( ) . get ( ProtocolVersion . V4 ) ; <nl> + assertEquals ( 10 , clientIPAndTimes1 . size ( ) ) ; <nl> + <nl> + Thread . sleep ( 10 ) ; <nl> + <nl> + pvt . addConnection ( client , ProtocolVersion . V4 ) ; <nl> + ImmutableSet < ClientIPAndTime > clientIPAndTimes2 = pvt . getAll ( ) . get ( ProtocolVersion . V4 ) ; <nl> + assertEquals ( 10 , clientIPAndTimes2 . size ( ) ) ; <nl> + <nl> + long ls1 = clientIPAndTimes1 . stream ( ) . filter ( c - > c . inetAddress . equals ( client ) ) . findFirst ( ) . get ( ) . lastSeen ; <nl> + long ls2 = clientIPAndTimes2 . stream ( ) . filter ( c - > c . inetAddress . equals ( client ) ) . findFirst ( ) . get ( ) . lastSeen ; <nl> + <nl> + assertTrue ( ls2 > ls1 ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void addConnection _ validConnection _ Succeeds ( ) <nl> + { <nl> + ProtocolVersionTracker pvt = new ProtocolVersionTracker ( ) ; <nl> + <nl> + for ( InetAddress addr : getMockConnections ( 10 ) ) <nl> + { <nl> + pvt . addConnection ( addr , ProtocolVersion . V4 ) ; <nl> + } <nl> + <nl> + for ( InetAddress addr : getMockConnections ( 7 ) ) <nl> + { <nl> + pvt . addConnection ( addr , ProtocolVersion . V3 ) ; <nl> + } <nl> + <nl> + assertEquals ( 5 , pvt . getAll ( ) . size ( ) ) ; <nl> + assertEquals ( 0 , pvt . getAll ( ) . get ( ProtocolVersion . V2 ) . size ( ) ) ; <nl> + assertEquals ( 7 , pvt . getAll ( ) . get ( ProtocolVersion . V3 ) . size ( ) ) ; <nl> + assertEquals ( 10 , pvt . getAll ( ) . get ( ProtocolVersion . V4 ) . size ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void clear ( ) <nl> + { <nl> + ProtocolVersionTracker pvt = new ProtocolVersionTracker ( ) ; <nl> + <nl> + for ( InetAddress addr : getMockConnections ( 7 ) ) <nl> + { <nl> + pvt . addConnection ( addr , ProtocolVersion . V3 ) ; <nl> + } <nl> + <nl> + assertEquals ( 7 , pvt . getAll ( ) . get ( ProtocolVersion . V3 ) . size ( ) ) ; <nl> + pvt . clear ( ) ; <nl> + <nl> + assertEquals ( 0 , pvt . getAll ( ) . get ( ProtocolVersion . V3 ) . size ( ) ) ; <nl> + } <nl> + <nl> + / * Helper * / <nl> + private List < InetAddress > getMockConnections ( int num ) <nl> + { <nl> + return IntStream . range ( 0 , num ) . mapToObj ( n - > { <nl> + try <nl> + { <nl> + return InetAddress . getByName ( " 127 . 0 . 1 . " + n ) ; <nl> + } <nl> + catch ( UnknownHostException e ) <nl> + { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + return null ; <nl> + } ) . collect ( Collectors . toList ( ) ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> index 1f235df . . 25e1072 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> package org . apache . cassandra . concurrent ; <nl> <nl> import java . lang . management . ManagementFactory ; <nl> + import java . util . List ; <nl> import java . util . concurrent . * ; <nl> import javax . management . MBeanServer ; <nl> import javax . management . ObjectName ; <nl> @ @ - 34 , 6 + 35 , 7 @ @ import org . apache . log4j . Logger ; <nl> public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements DebuggableThreadPoolExecutorMBean <nl> { <nl> private static Logger logger _ = Logger . getLogger ( DebuggableThreadPoolExecutor . class ) ; <nl> + private final String mbeanName ; <nl> <nl> public DebuggableThreadPoolExecutor ( String threadPoolName ) <nl> { <nl> @ @ - 51 , 9 + 53 , 10 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements <nl> super . prestartAllCoreThreads ( ) ; <nl> <nl> MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> + mbeanName = " org . apache . cassandra . concurrent : type = " + threadFactory . id ; <nl> try <nl> { <nl> - mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . concurrent : type = " + threadFactory . id ) ) ; <nl> + mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 84 , 6 + 87 , 33 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements <nl> } <nl> } <nl> <nl> + private void unregisterMBean ( ) <nl> + { <nl> + try <nl> + { <nl> + ManagementFactory . getPlatformMBeanServer ( ) . unregisterMBean ( new ObjectName ( mbeanName ) ) ; <nl> + } <nl> + catch ( Exception ex ) <nl> + { <nl> + / / don ' t let it get in the way , but notify . <nl> + logger _ . error ( ex . getMessage ( ) , ex ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void shutdown ( ) <nl> + { <nl> + unregisterMBean ( ) ; <nl> + super . shutdown ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < Runnable > shutdownNow ( ) <nl> + { <nl> + unregisterMBean ( ) ; <nl> + return super . shutdownNow ( ) ; <nl> + } <nl> + <nl> / * * <nl> * Get the number of completed tasks <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index 3b70d17 . . f5d8d35 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 122 , 7 + 122 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> return gossiper _ ; <nl> } <nl> <nl> - private Timer gossipTimer _ = new Timer ( false ) ; <nl> + private Timer gossipTimer _ ; <nl> private InetAddress localEndPoint _ ; <nl> private long aVeryLongTime _ ; <nl> private Random random _ = new Random ( ) ; <nl> @ @ - 144 , 6 + 144 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> <nl> private Gossiper ( ) <nl> { <nl> + gossipTimer _ = new Timer ( false ) ; <nl> aVeryLongTime _ = 259200 * 1000 ; <nl> / * register with the Failure Detector for receiving Failure detector events * / <nl> FailureDetector . instance ( ) . registerFailureDetectionEventListener ( this ) ; <nl> @ @ - 834 , 6 + 835 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> public void stop ( ) <nl> { <nl> gossipTimer _ . cancel ( ) ; <nl> + gossipTimer _ = new Timer ( false ) ; / / makes the Gossiper reentrant . <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index 8ff93f6 . . b1ad5ed 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 69 , 6 + 69 , 9 @ @ public class MessagingService <nl> <nl> / * List of sockets we are listening on * / <nl> private static Map < InetAddress , SelectionKey > listenSockets _ = new HashMap < InetAddress , SelectionKey > ( ) ; <nl> + <nl> + / * List of UdpConnections we are listening on * / <nl> + private static Map < InetAddress , UdpConnection > udpConnections _ = new HashMap < InetAddress , UdpConnection > ( ) ; <nl> <nl> / * Lookup table for registering message handlers based on the verb . * / <nl> private static Map < String , IVerbHandler > verbHandlers _ ; <nl> @ @ - 214 , 7 + 217 , 8 @ @ public class MessagingService <nl> try <nl> { <nl> connection . init ( localEp ) ; <nl> - endPoints _ . add ( localEp ) ; <nl> + endPoints _ . add ( localEp ) ; <nl> + udpConnections _ . put ( localEp , connection ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> @ @ - 497 , 7 + 501 , 7 @ @ public class MessagingService <nl> logger _ . info ( " Shutting down . . . " ) ; <nl> synchronized ( MessagingService . class ) <nl> { <nl> - / * Stop listening on any socket * / <nl> + / * Stop listening on any TCP socket * / <nl> for ( SelectionKey skey : listenSockets _ . values ( ) ) <nl> { <nl> skey . cancel ( ) ; <nl> @ @ - 509 , 6 + 513 , 13 @ @ public class MessagingService <nl> } <nl> listenSockets _ . clear ( ) ; <nl> <nl> + / * Stop listening on any UDP ports . * / <nl> + for ( UdpConnection con : udpConnections _ . values ( ) ) <nl> + { <nl> + con . close ( ) ; <nl> + } <nl> + udpConnections _ . clear ( ) ; <nl> + <nl> / * Shutdown the threads in the EventQueue ' s * / <nl> messageDeserializationExecutor _ . shutdownNow ( ) ; <nl> messageDeserializerExecutor _ . shutdownNow ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / net / SelectorManager . java b / src / java / org / apache / cassandra / net / SelectorManager . java <nl> index 7623a05 . . 16511ee 100644 <nl> - - - a / src / java / org / apache / cassandra / net / SelectorManager . java <nl> + + + b / src / java / org / apache / cassandra / net / SelectorManager . java <nl> @ @ - 35 , 6 + 35 , 9 @ @ public class SelectorManager extends Thread <nl> / / workaround JDK select / register bug <nl> Object gate = new Object ( ) ; <nl> <nl> + / / flag to indicate that shutdown has been requested . <nl> + private boolean shutdownRequested = false ; <nl> + <nl> / / The static selector manager which is used by all applications <nl> private static SelectorManager manager ; <nl> <nl> @ @ - 82 , 7 + 85 , 13 @ @ public class SelectorManager extends Thread <nl> selector . wakeup ( ) ; <nl> return channel . register ( selector , ops , handler ) ; <nl> } <nl> - } <nl> + } <nl> + <nl> + / / requests the thread to shutdown . However , it brings no guarantees . Added for testing . <nl> + private void requestShutdown ( ) <nl> + { <nl> + shutdownRequested = true ; <nl> + } <nl> <nl> / * * <nl> * This method starts the socket manager listening for events . It is <nl> @ @ - 102 , 6 + 111 , 11 @ @ public class SelectorManager extends Thread <nl> { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> + if ( shutdownRequested ) <nl> + { <nl> + shutdownRequested = false ; <nl> + break ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 145 , 6 + 159 , 22 @ @ public class SelectorManager extends Thread <nl> } <nl> <nl> / * * <nl> + * Intended to reset the singleton as part of testing . <nl> + * / <nl> + static void reset ( ) <nl> + { <nl> + synchronized ( SelectorManager . class ) <nl> + { <nl> + if ( manager ! = null ) <nl> + manager . requestShutdown ( ) ; <nl> + manager = null ; <nl> + if ( udpManager ! = null ) <nl> + udpManager . requestShutdown ( ) ; <nl> + udpManager = null ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * Returns the SelectorManager applications should use . <nl> * <nl> * @ return The SelectorManager which applications should use <nl> diff - - git a / test / unit / org / apache / cassandra / CleanupHelper . java b / test / unit / org / apache / cassandra / CleanupHelper . java <nl> index 969a2cd . . e3cde8d 100644 <nl> - - - a / test / unit / org / apache / cassandra / CleanupHelper . java <nl> + + + b / test / unit / org / apache / cassandra / CleanupHelper . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> package org . apache . cassandra ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . junit . BeforeClass ; <nl> <nl> @ @ - 30 , 6 + 31 , 13 @ @ public class CleanupHelper <nl> private static Logger logger = Logger . getLogger ( CleanupHelper . class ) ; <nl> <nl> @ BeforeClass <nl> + public static void cleanupAndLeaveDirs ( ) <nl> + { <nl> + mkdirs ( ) ; <nl> + cleanup ( ) ; <nl> + mkdirs ( ) ; <nl> + } <nl> + <nl> public static void cleanup ( ) <nl> { <nl> / / we clean the fs twice , once to start with ( so old data files don ' t get stored by anything static if this is the first run ) <nl> @ @ - 38 , 6 + 46 , 10 @ @ public class CleanupHelper <nl> DatabaseDescriptor . getLogFileLocation ( ) , <nl> } ; <nl> <nl> + / / try to delete the directories themselves too . don ' t panic if this fails . it probably means that the process <nl> + / / doesn ' t have permissions to do so , or it contains non - cassandra generated files that were intentionally <nl> + / / put there . <nl> + <nl> for ( String dirName : directoryNames ) <nl> { <nl> File dir = new File ( dirName ) ; <nl> @ @ - 47 , 11 + 59 , 15 @ @ public class CleanupHelper <nl> } <nl> for ( File f : dir . listFiles ( ) ) <nl> { <nl> - if ( ! f . delete ( ) ) { <nl> + if ( ! f . delete ( ) ) <nl> + { <nl> logger . error ( " could not delete " + f ) ; <nl> + } <nl> } <nl> + <nl> + if ( ! dir . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> - } <nl> <nl> / / cleanup data directory which are stored as data directory / table / data files <nl> for ( String dirName : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> @ @ - 71 , 8 + 87 , 24 @ @ public class CleanupHelper <nl> } <nl> } <nl> } <nl> + if ( ! tableFile . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> + <nl> + if ( ! dir . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> + } <nl> <nl> + public static void mkdirs ( ) <nl> + { <nl> + try <nl> + { <nl> + DatabaseDescriptor . createAllDirectories ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / net / NetPackageAccessor . java b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java <nl> new file mode 100644 <nl> index 0000000 . . 408bfba <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java <nl> @ @ - 0 , 0 + 1 , 29 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . net ; <nl> + <nl> + / * * <nl> + For accesing package - level members created for the sole purpose of testing . <nl> + * / <nl> + public class NetPackageAccessor <nl> + { <nl> + public static void resetSelectorManager ( ) <nl> + { <nl> + SelectorManager . reset ( ) ; <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / service / StorageServiceTest . java b / test / unit / org / apache / cassandra / service / StorageServiceTest . java <nl> new file mode 100644 <nl> index 0000000 . . 0ec9ffe <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / service / StorageServiceTest . java <nl> @ @ - 0 , 0 + 1 , 68 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import org . apache . cassandra . CleanupHelper ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . net . NetPackageAccessor ; <nl> + import org . junit . Test ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . assertFalse ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> + public class StorageServiceTest <nl> + { <nl> + @ Test <nl> + public void testClientOnlyMode ( ) throws IOException <nl> + { <nl> + CleanupHelper . mkdirs ( ) ; <nl> + CleanupHelper . cleanup ( ) ; <nl> + StorageService . instance ( ) . initClient ( ) ; <nl> + <nl> + / / verify that no storage directories were created . <nl> + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> + { <nl> + assertFalse ( new File ( path ) . exists ( ) ) ; <nl> + } <nl> + StorageService . instance ( ) . stopClient ( ) ; <nl> + NetPackageAccessor . resetSelectorManager ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRegularMode ( ) throws IOException , InterruptedException <nl> + { <nl> + CleanupHelper . mkdirs ( ) ; <nl> + CleanupHelper . cleanup ( ) ; <nl> + StorageService . instance ( ) . initServer ( ) ; <nl> + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> + { <nl> + / / verify that storage directories are there . <nl> + assertTrue ( new File ( path ) . exists ( ) ) ; <nl> + } <nl> + / / a proper test would be to call decommission here , but decommission ( ) mixes both shutdown and datatransfer <nl> + / / calls . This test is only interested in the shutdown - related items which a properly handled by just <nl> + / / stopping the client . <nl> + / / StorageService . instance ( ) . decommission ( ) ; <nl> + StorageService . instance ( ) . stopClient ( ) ; <nl> + NetPackageAccessor . resetSelectorManager ( ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 628d0af . . 25c237f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 9 + 1 , 10 @ @ 
 4 . 0 
 * Replace deprecated junit . framework . Assert usages with org . junit . Assert ( CASSANDRA - 14431 ) 
 * cassandra - stress throws NPE if insert section isn ' t specified in user profile ( CASSSANDRA - 14426 ) 
 + * List clients by protocol versions ` nodetool clientstats - - by - protocol ` ( CASSANDRA - 14335 ) 
 * Improve LatencyMetrics performance by reducing write path processing ( CASSANDRA - 14281 ) 
 * Add network authz ( CASSANDRA - 13985 ) 
 - * Use the correct IP / Port for Streaming when localAddress is left unbound ( CASSANDAR - 14389 ) 
 + * Use the correct IP / Port for Streaming when localAddress is left unbound ( CASSANDRA - 14389 ) 
 * nodetool listsnapshots is missing local system keyspace snapshots ( CASSANDRA - 14381 ) 
 * Remove StreamCoordinator . streamExecutor thread pool ( CASSANDRA - 14402 ) 
 * Rename nodetool - - with - port to - - print - port to disambiguate from - - port ( CASSANDRA - 14392 ) 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index 5ca3844 . . 7e7649d 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 679 , 6 + 679 , 10 @ @ public class CassandraDaemon 
 instance . activate ( ) ; 
 } 
 
 + public void clearConnectionHistory ( ) { 
 + nativeTransportService . clearConnectionHistory ( ) ; 
 + } 
 + 
 private void exitOrFail ( int code , String message ) 
 { 
 exitOrFail ( code , message , null ) ; 
 @ @ - 731 , 5 + 735 , 7 @ @ public class CassandraDaemon 
 * Returns whether the server is currently running . 
 * / 
 public boolean isRunning ( ) ; 
 + 
 + public void clearConnectionHistory ( ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / NativeTransportService . java b / src / java / org / apache / cassandra / service / NativeTransportService . java 
 index d70e56e . . 39b334e 100644 
 - - - a / src / java / org / apache / cassandra / service / NativeTransportService . java 
 + + + b / src / java / org / apache / cassandra / service / NativeTransportService . java 
 @ @ - 148 , 6 + 148 , 17 @ @ public class NativeTransportService 
 } 
 return result ; 
 } ) ; 
 + 
 + ClientMetrics . instance . addGauge ( " clientsByProtocolVersion " , ( ) - > 
 + { 
 + List < Map < String , String > > result = new ArrayList < > ( ) ; 
 + for ( Server server : servers ) 
 + { 
 + result . addAll ( server . getClientsByProtocolVersion ( ) ) ; 
 + } 
 + return result ; 
 + } ) ; 
 + 
 AuthMetrics . init ( ) ; 
 
 initialized = true ; 
 @ @ - 225 , 4 + 236 , 10 @ @ public class NativeTransportService 
 { 
 return servers ; 
 } 
 + 
 + public void clearConnectionHistory ( ) 
 + { 
 + for ( Server server : servers ) 
 + server . clearConnectionHistory ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 0f114dd . . c94f603 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 5380 , 4 + 5380 , 11 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 DatabaseDescriptor . setHintedHandoffThrottleInKB ( throttleInKB ) ; 
 logger . info ( " Updated hinted _ handoff _ throttle _ in _ kb to { } " , throttleInKB ) ; 
 } 
 + 
 + @ Override 
 + public void clearConnectionHistory ( ) 
 + { 
 + daemon . clearConnectionHistory ( ) ; 
 + logger . info ( " Cleared connection history " ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index 62a73de . . 20b7400 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 672 , 4 + 672 , 8 @ @ public interface StorageServiceMBean extends NotificationEmitter 
 * @ return true if the node successfully starts resuming . ( this does not mean bootstrap streaming was success . ) 
 * / 
 public boolean resumeBootstrap ( ) ; 
 + 
 + 
 + / * * Clears the history of clients that have connected in the past * * / 
 + void clearConnectionHistory ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index 49b6563 . . 4fdb563 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 1520 , 6 + 1520 , 7 @ @ public class NodeProbe implements AutoCloseable 
 case " connections " : / / List < Map < String , String > > - list of all native connections and their properties 
 case " connectedNativeClients " : / / number of connected native clients 
 case " connectedNativeClientsByUser " : / / number of native clients by username 
 + case " clientsByProtocolVersion " : / / number of native clients by username 
 return JMX . newMBeanProxy ( mbeanServerConn , 
 new ObjectName ( " org . apache . cassandra . metrics : type = Client , name = " + metricName ) , 
 CassandraMetricsRegistry . JmxGaugeMBean . class ) . getValue ( ) ; 
 @ @ - 1668 , 6 + 1669 , 11 @ @ public class NodeProbe implements AutoCloseable 
 { 
 msProxy . reloadSslCertificates ( ) ; 
 } 
 + 
 + public void clearConnectionHistory ( ) 
 + { 
 + ssProxy . clearConnectionHistory ( ) ; 
 + } 
 } 
 
 class ColumnFamilyStoreMBeanIterator implements Iterator < Map . Entry < String , ColumnFamilyStoreMBean > > 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / ClientStats . java b / src / java / org / apache / cassandra / tools / nodetool / ClientStats . java 
 index 0469074 . . 9b4ada8 100644 
 - - - a / src / java / org / apache / cassandra / tools / nodetool / ClientStats . java 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / ClientStats . java 
 @ @ - 17 , 6 + 17 , 8 @ @ 
 * / 
 package org . apache . cassandra . tools . nodetool ; 
 
 + import java . text . SimpleDateFormat ; 
 + import java . util . Date ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Map . Entry ; 
 @ @ - 34 , 9 + 36 , 48 @ @ public class ClientStats extends NodeToolCmd 
 @ Option ( title = " list _ connections " , name = " - - all " , description = " Lists all connections " ) 
 private boolean listConnections = false ; 
 
 + @ Option ( title = " by _ protocol " , name = " - - by - protocol " , description = " Lists last 100 client connections with oldest protocol version " ) 
 + private boolean oldestProtocolConnections = false ; 
 + 
 + @ Option ( title = " clear _ history " , name = " - - clear - history " , description = " Clear the history of connected clients " ) 
 + private boolean clearConnectionHistory = false ; 
 + 
 @ Override 
 public void execute ( NodeProbe probe ) 
 { 
 + if ( clearConnectionHistory ) 
 + { 
 + System . out . println ( " Clearing history " ) ; 
 + probe . clearConnectionHistory ( ) ; 
 + return ; 
 + } 
 + 
 + if ( oldestProtocolConnections ) 
 + { 
 + SimpleDateFormat sdf = new SimpleDateFormat ( " MMM dd , yyyy HH : mm : ss " ) ; 
 + 
 + System . out . println ( " Clients by protocol version " ) ; 
 + System . out . println ( " " ) ; 
 + 
 + List < Map < String , String > > clients = ( List < Map < String , String > > ) probe . getClientMetric ( " clientsByProtocolVersion " ) ; 
 + 
 + if ( ! clients . isEmpty ( ) ) 
 + { 
 + TableBuilder table = new TableBuilder ( ) ; 
 + table . add ( " Protocol - Version " , " IP - Address " , " Last - Seen " ) ; 
 + 
 + for ( Map < String , String > client : clients ) 
 + { 
 + table . add ( client . get ( " protocolVersion " ) , client . get ( " inetAddress " ) , sdf . format ( new Date ( Long . valueOf ( client . get ( " lastSeenTime " ) ) ) ) ) ; 
 + } 
 + 
 + table . printTo ( System . out ) ; 
 + System . out . println ( ) ; 
 + } 
 + 
 + return ; 
 + } 
 + 
 if ( listConnections ) 
 { 
 List < Map < String , String > > clients = ( List < Map < String , String > > ) probe . getClientMetric ( " connections " ) ; 
 diff - - git a / src / java / org / apache / cassandra / transport / ProtocolVersionTracker . java b / src / java / org / apache / cassandra / transport / ProtocolVersionTracker . java 
 new file mode 100644 
 index 0000000 . . a2468bd 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / transport / ProtocolVersionTracker . java 
 @ @ - 0 , 0 + 1 , 109 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . transport ; 
 + 
 + import java . net . InetAddress ; 
 + import java . util . EnumMap ; 
 + import java . util . LinkedHashMap ; 
 + import java . util . Map ; 
 + import java . util . stream . Collectors ; 
 + 
 + import com . google . common . annotations . VisibleForTesting ; 
 + import com . google . common . base . Preconditions ; 
 + import com . google . common . collect . ImmutableSet ; 
 + 
 + import com . github . benmanes . caffeine . cache . Caffeine ; 
 + import com . github . benmanes . caffeine . cache . LoadingCache ; 
 + import org . apache . cassandra . utils . Clock ; 
 + 
 + / * * 
 + * This class tracks the last 100 connections per protocol version 
 + * / 
 + public class ProtocolVersionTracker 
 + { 
 + public static final int DEFAULT _ MAX _ CAPACITY = 100 ; 
 + 
 + @ VisibleForTesting 
 + final EnumMap < ProtocolVersion , LoadingCache < InetAddress , Long > > clientsByProto ; 
 + 
 + public ProtocolVersionTracker ( ) 
 + { 
 + this ( DEFAULT _ MAX _ CAPACITY ) ; 
 + } 
 + 
 + public ProtocolVersionTracker ( final int capacity ) 
 + { 
 + this . clientsByProto = new EnumMap < > ( ProtocolVersion . class ) ; 
 + 
 + for ( ProtocolVersion version : ProtocolVersion . values ( ) ) 
 + { 
 + clientsByProto . put ( version , Caffeine . newBuilder ( ) . maximumSize ( capacity ) 
 + . build ( key - > Clock . instance . currentTimeMillis ( ) ) ) ; 
 + } 
 + } 
 + 
 + void addConnection ( final InetAddress addr , final ProtocolVersion version ) 
 + { 
 + if ( addr = = null | | version = = null ) return ; 
 + 
 + LoadingCache < InetAddress , Long > clients = clientsByProto . get ( version ) ; 
 + clients . put ( addr , Clock . instance . currentTimeMillis ( ) ) ; 
 + } 
 + 
 + public LinkedHashMap < ProtocolVersion , ImmutableSet < ClientIPAndTime > > getAll ( ) 
 + { 
 + LinkedHashMap < ProtocolVersion , ImmutableSet < ClientIPAndTime > > result = new LinkedHashMap < > ( ) ; 
 + for ( ProtocolVersion version : ProtocolVersion . values ( ) ) 
 + { 
 + result . put ( version , ImmutableSet . copyOf ( clientsByProto . get ( version ) . asMap ( ) . entrySet ( ) . stream ( ) 
 + . map ( e - > new ClientIPAndTime ( e . getKey ( ) , e . getValue ( ) ) ) . collect ( Collectors . toSet ( ) ) ) ) ; 
 + } 
 + return result ; 
 + } 
 + 
 + public void clear ( ) 
 + { 
 + for ( Map . Entry < ProtocolVersion , LoadingCache < InetAddress , Long > > entry : clientsByProto . entrySet ( ) ) 
 + { 
 + entry . getValue ( ) . invalidateAll ( ) ; 
 + } 
 + } 
 + 
 + public static class ClientIPAndTime 
 + { 
 + final InetAddress inetAddress ; 
 + final long lastSeen ; 
 + 
 + public ClientIPAndTime ( final InetAddress inetAddress , final long lastSeen ) 
 + { 
 + Preconditions . checkNotNull ( inetAddress ) ; 
 + this . inetAddress = inetAddress ; 
 + this . lastSeen = lastSeen ; 
 + } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return " ClientIPAndTime { " + 
 + " inetAddress = " + inetAddress + 
 + " , lastSeen = " + lastSeen + 
 + ' } ' ; 
 + } 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java 
 index 7aade66 . . a7cfdfb 100644 
 - - - a / src / java / org / apache / cassandra / transport / Server . java 
 + + + b / src / java / org / apache / cassandra / transport / Server . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import com . google . common . collect . ImmutableMap ; 
 + import com . google . common . collect . ImmutableSet ; 
 
 import io . netty . bootstrap . ServerBootstrap ; 
 import io . netty . buffer . ByteBuf ; 
 @ @ - 206 , 6 + 207 , 32 @ @ public class Server implements CassandraDaemon . Server 
 return result ; 
 } 
 
 + public List < Map < String , String > > getClientsByProtocolVersion ( ) { 
 + LinkedHashMap < ProtocolVersion , ImmutableSet < ProtocolVersionTracker . ClientIPAndTime > > all = connectionTracker . protoTracker . getAll ( ) ; 
 + List < Map < String , String > > result = new ArrayList < > ( ) ; 
 + 
 + for ( Map . Entry < ProtocolVersion , ImmutableSet < ProtocolVersionTracker . ClientIPAndTime > > entry : all . entrySet ( ) ) 
 + { 
 + ProtocolVersion protoVersion = entry . getKey ( ) ; 
 + 
 + for ( ProtocolVersionTracker . ClientIPAndTime client : entry . getValue ( ) ) 
 + { 
 + result . add ( new ImmutableMap . Builder < String , String > ( ) 
 + . put ( " protocolVersion " , protoVersion . toString ( ) ) 
 + . put ( " inetAddress " , client . inetAddress . toString ( ) ) 
 + . put ( " lastSeenTime " , String . valueOf ( client . lastSeen ) ) 
 + . build ( ) ) ; 
 + } 
 + } 
 + return result ; 
 + } 
 + 
 + @ Override 
 + public void clearConnectionHistory ( ) 
 + { 
 + connectionTracker . protoTracker . clear ( ) ; 
 + } 
 + 
 private void close ( ) 
 { 
 / / Close opened connections 
 @ @ - 282 , 6 + 309 , 7 @ @ public class Server implements CassandraDaemon . Server 
 / / TODO : should we be using the GlobalEventExecutor or defining our own ? 
 public final ChannelGroup allChannels = new DefaultChannelGroup ( GlobalEventExecutor . INSTANCE ) ; 
 private final EnumMap < Event . Type , ChannelGroup > groups = new EnumMap < > ( Event . Type . class ) ; 
 + private final ProtocolVersionTracker protoTracker = new ProtocolVersionTracker ( ) ; 
 
 public ConnectionTracker ( ) 
 { 
 @ @ - 292 , 6 + 320 , 9 @ @ public class Server implements CassandraDaemon . Server 
 public void addConnection ( Channel ch , Connection connection ) 
 { 
 allChannels . add ( ch ) ; 
 + 
 + if ( ch . remoteAddress ( ) instanceof InetSocketAddress ) 
 + protoTracker . addConnection ( ( ( InetSocketAddress ) ch . remoteAddress ( ) ) . getAddress ( ) , connection . getVersion ( ) ) ; 
 } 
 
 public void register ( Event . Type type , Channel ch ) 
 @ @ - 334 , 6 + 365 , 7 @ @ public class Server implements CassandraDaemon . Server 
 } 
 return result ; 
 } 
 + 
 } 
 
 private static class Initializer extends ChannelInitializer < Channel > 
 diff - - git a / test / unit / org / apache / cassandra / transport / ProtocolVersionTrackerTest . java b / test / unit / org / apache / cassandra / transport / ProtocolVersionTrackerTest . java 
 new file mode 100644 
 index 0000000 . . 6808c0a 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / transport / ProtocolVersionTrackerTest . java 
 @ @ - 0 , 0 + 1 , 115 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . transport ; 
 + 
 + import java . net . InetAddress ; 
 + import java . net . UnknownHostException ; 
 + import java . util . List ; 
 + import java . util . stream . Collectors ; 
 + import java . util . stream . IntStream ; 
 + 
 + import com . google . common . collect . ImmutableSet ; 
 + import org . junit . Test ; 
 + 
 + import static org . apache . cassandra . transport . ProtocolVersionTracker . ClientIPAndTime ; 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertTrue ; 
 + 
 + public class ProtocolVersionTrackerTest 
 + { 
 + @ Test 
 + public void addConnection _ shouldUpdateSetToLatestTimestamp ( ) throws UnknownHostException , InterruptedException 
 + { 
 + ProtocolVersionTracker pvt = new ProtocolVersionTracker ( ) ; 
 + final InetAddress client = InetAddress . getByName ( " 127 . 0 . 1 . 1 " ) ; 
 + pvt . addConnection ( client , ProtocolVersion . V4 ) ; 
 + 
 + for ( InetAddress addr : getMockConnections ( 10 ) ) 
 + { 
 + pvt . addConnection ( addr , ProtocolVersion . V4 ) ; 
 + } 
 + 
 + ImmutableSet < ClientIPAndTime > clientIPAndTimes1 = pvt . getAll ( ) . get ( ProtocolVersion . V4 ) ; 
 + assertEquals ( 10 , clientIPAndTimes1 . size ( ) ) ; 
 + 
 + Thread . sleep ( 10 ) ; 
 + 
 + pvt . addConnection ( client , ProtocolVersion . V4 ) ; 
 + ImmutableSet < ClientIPAndTime > clientIPAndTimes2 = pvt . getAll ( ) . get ( ProtocolVersion . V4 ) ; 
 + assertEquals ( 10 , clientIPAndTimes2 . size ( ) ) ; 
 + 
 + long ls1 = clientIPAndTimes1 . stream ( ) . filter ( c - > c . inetAddress . equals ( client ) ) . findFirst ( ) . get ( ) . lastSeen ; 
 + long ls2 = clientIPAndTimes2 . stream ( ) . filter ( c - > c . inetAddress . equals ( client ) ) . findFirst ( ) . get ( ) . lastSeen ; 
 + 
 + assertTrue ( ls2 > ls1 ) ; 
 + } 
 + 
 + @ Test 
 + public void addConnection _ validConnection _ Succeeds ( ) 
 + { 
 + ProtocolVersionTracker pvt = new ProtocolVersionTracker ( ) ; 
 + 
 + for ( InetAddress addr : getMockConnections ( 10 ) ) 
 + { 
 + pvt . addConnection ( addr , ProtocolVersion . V4 ) ; 
 + } 
 + 
 + for ( InetAddress addr : getMockConnections ( 7 ) ) 
 + { 
 + pvt . addConnection ( addr , ProtocolVersion . V3 ) ; 
 + } 
 + 
 + assertEquals ( 5 , pvt . getAll ( ) . size ( ) ) ; 
 + assertEquals ( 0 , pvt . getAll ( ) . get ( ProtocolVersion . V2 ) . size ( ) ) ; 
 + assertEquals ( 7 , pvt . getAll ( ) . get ( ProtocolVersion . V3 ) . size ( ) ) ; 
 + assertEquals ( 10 , pvt . getAll ( ) . get ( ProtocolVersion . V4 ) . size ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void clear ( ) 
 + { 
 + ProtocolVersionTracker pvt = new ProtocolVersionTracker ( ) ; 
 + 
 + for ( InetAddress addr : getMockConnections ( 7 ) ) 
 + { 
 + pvt . addConnection ( addr , ProtocolVersion . V3 ) ; 
 + } 
 + 
 + assertEquals ( 7 , pvt . getAll ( ) . get ( ProtocolVersion . V3 ) . size ( ) ) ; 
 + pvt . clear ( ) ; 
 + 
 + assertEquals ( 0 , pvt . getAll ( ) . get ( ProtocolVersion . V3 ) . size ( ) ) ; 
 + } 
 + 
 + / * Helper * / 
 + private List < InetAddress > getMockConnections ( int num ) 
 + { 
 + return IntStream . range ( 0 , num ) . mapToObj ( n - > { 
 + try 
 + { 
 + return InetAddress . getByName ( " 127 . 0 . 1 . " + n ) ; 
 + } 
 + catch ( UnknownHostException e ) 
 + { 
 + e . printStackTrace ( ) ; 
 + } 
 + return null ; 
 + } ) . collect ( Collectors . toList ( ) ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 index 1f235df . . 25e1072 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 package org . apache . cassandra . concurrent ; 
 
 import java . lang . management . ManagementFactory ; 
 + import java . util . List ; 
 import java . util . concurrent . * ; 
 import javax . management . MBeanServer ; 
 import javax . management . ObjectName ; 
 @ @ - 34 , 6 + 35 , 7 @ @ import org . apache . log4j . Logger ; 
 public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements DebuggableThreadPoolExecutorMBean 
 { 
 private static Logger logger _ = Logger . getLogger ( DebuggableThreadPoolExecutor . class ) ; 
 + private final String mbeanName ; 
 
 public DebuggableThreadPoolExecutor ( String threadPoolName ) 
 { 
 @ @ - 51 , 9 + 53 , 10 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements 
 super . prestartAllCoreThreads ( ) ; 
 
 MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 + mbeanName = " org . apache . cassandra . concurrent : type = " + threadFactory . id ; 
 try 
 { 
 - mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . concurrent : type = " + threadFactory . id ) ) ; 
 + mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 84 , 6 + 87 , 33 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements 
 } 
 } 
 
 + private void unregisterMBean ( ) 
 + { 
 + try 
 + { 
 + ManagementFactory . getPlatformMBeanServer ( ) . unregisterMBean ( new ObjectName ( mbeanName ) ) ; 
 + } 
 + catch ( Exception ex ) 
 + { 
 + / / don ' t let it get in the way , but notify . 
 + logger _ . error ( ex . getMessage ( ) , ex ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void shutdown ( ) 
 + { 
 + unregisterMBean ( ) ; 
 + super . shutdown ( ) ; 
 + } 
 + 
 + @ Override 
 + public List < Runnable > shutdownNow ( ) 
 + { 
 + unregisterMBean ( ) ; 
 + return super . shutdownNow ( ) ; 
 + } 
 + 
 / * * 
 * Get the number of completed tasks 
 * / 
 diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index 3b70d17 . . f5d8d35 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 122 , 7 + 122 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 return gossiper _ ; 
 } 
 
 - private Timer gossipTimer _ = new Timer ( false ) ; 
 + private Timer gossipTimer _ ; 
 private InetAddress localEndPoint _ ; 
 private long aVeryLongTime _ ; 
 private Random random _ = new Random ( ) ; 
 @ @ - 144 , 6 + 144 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 
 private Gossiper ( ) 
 { 
 + gossipTimer _ = new Timer ( false ) ; 
 aVeryLongTime _ = 259200 * 1000 ; 
 / * register with the Failure Detector for receiving Failure detector events * / 
 FailureDetector . instance ( ) . registerFailureDetectionEventListener ( this ) ; 
 @ @ - 834 , 6 + 835 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 public void stop ( ) 
 { 
 gossipTimer _ . cancel ( ) ; 
 + gossipTimer _ = new Timer ( false ) ; / / makes the Gossiper reentrant . 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index 8ff93f6 . . b1ad5ed 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 69 , 6 + 69 , 9 @ @ public class MessagingService 
 
 / * List of sockets we are listening on * / 
 private static Map < InetAddress , SelectionKey > listenSockets _ = new HashMap < InetAddress , SelectionKey > ( ) ; 
 + 
 + / * List of UdpConnections we are listening on * / 
 + private static Map < InetAddress , UdpConnection > udpConnections _ = new HashMap < InetAddress , UdpConnection > ( ) ; 
 
 / * Lookup table for registering message handlers based on the verb . * / 
 private static Map < String , IVerbHandler > verbHandlers _ ; 
 @ @ - 214 , 7 + 217 , 8 @ @ public class MessagingService 
 try 
 { 
 connection . init ( localEp ) ; 
 - endPoints _ . add ( localEp ) ; 
 + endPoints _ . add ( localEp ) ; 
 + udpConnections _ . put ( localEp , connection ) ; 
 } 
 catch ( IOException e ) 
 { 
 @ @ - 497 , 7 + 501 , 7 @ @ public class MessagingService 
 logger _ . info ( " Shutting down . . . " ) ; 
 synchronized ( MessagingService . class ) 
 { 
 - / * Stop listening on any socket * / 
 + / * Stop listening on any TCP socket * / 
 for ( SelectionKey skey : listenSockets _ . values ( ) ) 
 { 
 skey . cancel ( ) ; 
 @ @ - 509 , 6 + 513 , 13 @ @ public class MessagingService 
 } 
 listenSockets _ . clear ( ) ; 
 
 + / * Stop listening on any UDP ports . * / 
 + for ( UdpConnection con : udpConnections _ . values ( ) ) 
 + { 
 + con . close ( ) ; 
 + } 
 + udpConnections _ . clear ( ) ; 
 + 
 / * Shutdown the threads in the EventQueue ' s * / 
 messageDeserializationExecutor _ . shutdownNow ( ) ; 
 messageDeserializerExecutor _ . shutdownNow ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / net / SelectorManager . java b / src / java / org / apache / cassandra / net / SelectorManager . java 
 index 7623a05 . . 16511ee 100644 
 - - - a / src / java / org / apache / cassandra / net / SelectorManager . java 
 + + + b / src / java / org / apache / cassandra / net / SelectorManager . java 
 @ @ - 35 , 6 + 35 , 9 @ @ public class SelectorManager extends Thread 
 / / workaround JDK select / register bug 
 Object gate = new Object ( ) ; 
 
 + / / flag to indicate that shutdown has been requested . 
 + private boolean shutdownRequested = false ; 
 + 
 / / The static selector manager which is used by all applications 
 private static SelectorManager manager ; 
 
 @ @ - 82 , 7 + 85 , 13 @ @ public class SelectorManager extends Thread 
 selector . wakeup ( ) ; 
 return channel . register ( selector , ops , handler ) ; 
 } 
 - } 
 + } 
 + 
 + / / requests the thread to shutdown . However , it brings no guarantees . Added for testing . 
 + private void requestShutdown ( ) 
 + { 
 + shutdownRequested = true ; 
 + } 
 
 / * * 
 * This method starts the socket manager listening for events . It is 
 @ @ - 102 , 6 + 111 , 11 @ @ public class SelectorManager extends Thread 
 { 
 throw new RuntimeException ( e ) ; 
 } 
 + if ( shutdownRequested ) 
 + { 
 + shutdownRequested = false ; 
 + break ; 
 + } 
 } 
 } 
 
 @ @ - 145 , 6 + 159 , 22 @ @ public class SelectorManager extends Thread 
 } 
 
 / * * 
 + * Intended to reset the singleton as part of testing . 
 + * / 
 + static void reset ( ) 
 + { 
 + synchronized ( SelectorManager . class ) 
 + { 
 + if ( manager ! = null ) 
 + manager . requestShutdown ( ) ; 
 + manager = null ; 
 + if ( udpManager ! = null ) 
 + udpManager . requestShutdown ( ) ; 
 + udpManager = null ; 
 + } 
 + } 
 + 
 + / * * 
 * Returns the SelectorManager applications should use . 
 * 
 * @ return The SelectorManager which applications should use 
 diff - - git a / test / unit / org / apache / cassandra / CleanupHelper . java b / test / unit / org / apache / cassandra / CleanupHelper . java 
 index 969a2cd . . e3cde8d 100644 
 - - - a / test / unit / org / apache / cassandra / CleanupHelper . java 
 + + + b / test / unit / org / apache / cassandra / CleanupHelper . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 package org . apache . cassandra ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . junit . BeforeClass ; 
 
 @ @ - 30 , 6 + 31 , 13 @ @ public class CleanupHelper 
 private static Logger logger = Logger . getLogger ( CleanupHelper . class ) ; 
 
 @ BeforeClass 
 + public static void cleanupAndLeaveDirs ( ) 
 + { 
 + mkdirs ( ) ; 
 + cleanup ( ) ; 
 + mkdirs ( ) ; 
 + } 
 + 
 public static void cleanup ( ) 
 { 
 / / we clean the fs twice , once to start with ( so old data files don ' t get stored by anything static if this is the first run ) 
 @ @ - 38 , 6 + 46 , 10 @ @ public class CleanupHelper 
 DatabaseDescriptor . getLogFileLocation ( ) , 
 } ; 
 
 + / / try to delete the directories themselves too . don ' t panic if this fails . it probably means that the process 
 + / / doesn ' t have permissions to do so , or it contains non - cassandra generated files that were intentionally 
 + / / put there . 
 + 
 for ( String dirName : directoryNames ) 
 { 
 File dir = new File ( dirName ) ; 
 @ @ - 47 , 11 + 59 , 15 @ @ public class CleanupHelper 
 } 
 for ( File f : dir . listFiles ( ) ) 
 { 
 - if ( ! f . delete ( ) ) { 
 + if ( ! f . delete ( ) ) 
 + { 
 logger . error ( " could not delete " + f ) ; 
 + } 
 } 
 + 
 + if ( ! dir . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 - } 
 
 / / cleanup data directory which are stored as data directory / table / data files 
 for ( String dirName : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 @ @ - 71 , 8 + 87 , 24 @ @ public class CleanupHelper 
 } 
 } 
 } 
 + if ( ! tableFile . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 + 
 + if ( ! dir . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 + } 
 
 + public static void mkdirs ( ) 
 + { 
 + try 
 + { 
 + DatabaseDescriptor . createAllDirectories ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / net / NetPackageAccessor . java b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java 
 new file mode 100644 
 index 0000000 . . 408bfba 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java 
 @ @ - 0 , 0 + 1 , 29 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . net ; 
 + 
 + / * * 
 + For accesing package - level members created for the sole purpose of testing . 
 + * / 
 + public class NetPackageAccessor 
 + { 
 + public static void resetSelectorManager ( ) 
 + { 
 + SelectorManager . reset ( ) ; 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / service / StorageServiceTest . java b / test / unit / org / apache / cassandra / service / StorageServiceTest . java 
 new file mode 100644 
 index 0000000 . . 0ec9ffe 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / service / StorageServiceTest . java 
 @ @ - 0 , 0 + 1 , 68 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + 
 + package org . apache . cassandra . service ; 
 + 
 + import org . apache . cassandra . CleanupHelper ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . net . NetPackageAccessor ; 
 + import org . junit . Test ; 
 + import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . assertFalse ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 + public class StorageServiceTest 
 + { 
 + @ Test 
 + public void testClientOnlyMode ( ) throws IOException 
 + { 
 + CleanupHelper . mkdirs ( ) ; 
 + CleanupHelper . cleanup ( ) ; 
 + StorageService . instance ( ) . initClient ( ) ; 
 + 
 + / / verify that no storage directories were created . 
 + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 + { 
 + assertFalse ( new File ( path ) . exists ( ) ) ; 
 + } 
 + StorageService . instance ( ) . stopClient ( ) ; 
 + NetPackageAccessor . resetSelectorManager ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testRegularMode ( ) throws IOException , InterruptedException 
 + { 
 + CleanupHelper . mkdirs ( ) ; 
 + CleanupHelper . cleanup ( ) ; 
 + StorageService . instance ( ) . initServer ( ) ; 
 + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 + { 
 + / / verify that storage directories are there . 
 + assertTrue ( new File ( path ) . exists ( ) ) ; 
 + } 
 + / / a proper test would be to call decommission here , but decommission ( ) mixes both shutdown and datatransfer 
 + / / calls . This test is only interested in the shutdown - related items which a properly handled by just 
 + / / stopping the client . 
 + / / StorageService . instance ( ) . decommission ( ) ; 
 + StorageService . instance ( ) . stopClient ( ) ; 
 + NetPackageAccessor . resetSelectorManager ( ) ; 
 + } 
 + }
