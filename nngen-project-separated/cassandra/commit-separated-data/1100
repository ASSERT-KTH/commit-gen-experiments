BLEU SCORE: 0.056697911109760024

TEST MSG: Fix CassandraVersion to accept x . y version string
GENERATED MSG: Fix SemanticVersion . isSupportedBy minor / patch handling

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 4a1f137 . . cbd109e 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 2 <nl> + * Fix CassandraVersion to accept x . y version string ( CASSANDRA - 10931 ) <nl> * Add forceUserDefinedCleanup to allow more flexible cleanup ( CASSANDRA - 10708 ) <nl> * ( cqlsh ) allow setting TTL with COPY ( CASSANDRA - 9494 ) <nl> * Fix counting of received sstables in streaming ( CASSANDRA - 10949 ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / CassandraVersion . java b / src / java / org / apache / cassandra / utils / CassandraVersion . java <nl> index 6887a88 . . 790eb5c 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / CassandraVersion . java <nl> + + + b / src / java / org / apache / cassandra / utils / CassandraVersion . java <nl> @ @ - 32 , 7 + 32 , 11 @ @ import org . apache . commons . lang3 . StringUtils ; <nl> * / <nl> public class CassandraVersion implements Comparable < CassandraVersion > <nl> { <nl> - private static final String VERSION _ REGEXP = " ( \ \ d + ) \ \ . ( \ \ d + ) \ \ . ( \ \ d + ) ( \ \ - [ . \ \ w ] + ) ? ( [ . + ] [ . \ \ w ] + ) ? " ; <nl> + / * * <nl> + * note : 3rd group matches to words but only allows number and checked after regexp test . <nl> + * this is because 3rd and the last can be identical . <nl> + * * / <nl> + private static final String VERSION _ REGEXP = " ( \ \ d + ) \ \ . ( \ \ d + ) ( ? : \ \ . ( \ \ w + ) ) ? ( \ \ - [ . \ \ w ] + ) ? ( [ . + ] [ . \ \ w ] + ) ? " ; <nl> private static final Pattern pattern = Pattern . compile ( VERSION _ REGEXP ) ; <nl> private static final Pattern SNAPSHOT = Pattern . compile ( " - SNAPSHOT " ) ; <nl> <nl> @ @ - 70 , 7 + 74 , 7 @ @ public class CassandraVersion implements Comparable < CassandraVersion > <nl> { <nl> this . major = Integer . parseInt ( matcher . group ( 1 ) ) ; <nl> this . minor = Integer . parseInt ( matcher . group ( 2 ) ) ; <nl> - this . patch = Integer . parseInt ( matcher . group ( 3 ) ) ; <nl> + this . patch = matcher . group ( 3 ) ! = null ? Integer . parseInt ( matcher . group ( 3 ) ) : 0 ; <nl> <nl> String pr = matcher . group ( 4 ) ; <nl> String bld = matcher . group ( 5 ) ; <nl> @ @ - 80 , 7 + 84 , 7 @ @ public class CassandraVersion implements Comparable < CassandraVersion > <nl> } <nl> catch ( NumberFormatException e ) <nl> { <nl> - throw new IllegalArgumentException ( " Invalid version value : " + version ) ; <nl> + throw new IllegalArgumentException ( " Invalid version value : " + version , e ) ; <nl> } <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / utils / CassandraVersionTest . java b / test / unit / org / apache / cassandra / utils / CassandraVersionTest . java <nl> index 145b735 . . cec668f 100644 <nl> - - - a / test / unit / org / apache / cassandra / utils / CassandraVersionTest . java <nl> + + + b / test / unit / org / apache / cassandra / utils / CassandraVersionTest . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . utils ; <nl> import org . junit . Test ; <nl> <nl> import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . fail ; <nl> <nl> public class CassandraVersionTest <nl> { <nl> @ @ - 29 , 14 + 30 , 18 @ @ public class CassandraVersionTest <nl> CassandraVersion version ; <nl> <nl> version = new CassandraVersion ( " 1 . 2 . 3 " ) ; <nl> - assert version . major = = 1 & & version . minor = = 2 & & version . patch = = 3 ; <nl> + assertTrue ( version . major = = 1 & & version . minor = = 2 & & version . patch = = 3 ) ; <nl> <nl> version = new CassandraVersion ( " 1 . 2 . 3 - foo . 2 + Bar " ) ; <nl> - assert version . major = = 1 & & version . minor = = 2 & & version . patch = = 3 ; <nl> + assertTrue ( version . major = = 1 & & version . minor = = 2 & & version . patch = = 3 ) ; <nl> <nl> / / CassandraVersion can parse 4th ' . ' as build number <nl> version = new CassandraVersion ( " 1 . 2 . 3 . 456 " ) ; <nl> - assert version . major = = 1 & & version . minor = = 2 & & version . patch = = 3 ; <nl> + assertTrue ( version . major = = 1 & & version . minor = = 2 & & version . patch = = 3 ) ; <nl> + <nl> + / / support for tick - tock release <nl> + version = new CassandraVersion ( " 3 . 2 " ) ; <nl> + assertTrue ( version . major = = 3 & & version . minor = = 2 & & version . patch = = 0 ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 46 , 32 + 51 , 32 @ @ public class CassandraVersionTest <nl> <nl> v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; <nl> v2 = new CassandraVersion ( " 1 . 2 . 4 " ) ; <nl> - assert v1 . compareTo ( v2 ) = = - 1 ; <nl> + assertTrue ( v1 . compareTo ( v2 ) = = - 1 ) ; <nl> <nl> v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; <nl> v2 = new CassandraVersion ( " 1 . 2 . 3 " ) ; <nl> - assert v1 . compareTo ( v2 ) = = 0 ; <nl> + assertTrue ( v1 . compareTo ( v2 ) = = 0 ) ; <nl> <nl> v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; <nl> v2 = new CassandraVersion ( " 2 . 0 . 0 " ) ; <nl> - assert v1 . compareTo ( v2 ) = = - 1 ; <nl> - assert v2 . compareTo ( v1 ) = = 1 ; <nl> + assertTrue ( v1 . compareTo ( v2 ) = = - 1 ) ; <nl> + assertTrue ( v2 . compareTo ( v1 ) = = 1 ) ; <nl> <nl> v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; <nl> v2 = new CassandraVersion ( " 1 . 2 . 3 - alpha " ) ; <nl> - assert v1 . compareTo ( v2 ) = = 1 ; <nl> + assertTrue ( v1 . compareTo ( v2 ) = = 1 ) ; <nl> <nl> v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; <nl> v2 = new CassandraVersion ( " 1 . 2 . 3 + foo " ) ; <nl> - assert v1 . compareTo ( v2 ) = = - 1 ; <nl> + assertTrue ( v1 . compareTo ( v2 ) = = - 1 ) ; <nl> <nl> v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; <nl> v2 = new CassandraVersion ( " 1 . 2 . 3 - alpha + foo " ) ; <nl> - assert v1 . compareTo ( v2 ) = = 1 ; <nl> + assertTrue ( v1 . compareTo ( v2 ) = = 1 ) ; <nl> <nl> v1 = new CassandraVersion ( " 1 . 2 . 3 - alpha + 1 " ) ; <nl> v2 = new CassandraVersion ( " 1 . 2 . 3 - alpha + 2 " ) ; <nl> - assert v1 . compareTo ( v2 ) = = - 1 ; <nl> + assertTrue ( v1 . compareTo ( v2 ) = = - 1 ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 80 , 33 + 85 , 32 @ @ public class CassandraVersionTest <nl> CassandraVersion v1 , v2 ; <nl> <nl> v1 = new CassandraVersion ( " 3 . 0 . 2 " ) ; <nl> - assert v1 . isSupportedBy ( v1 ) ; <nl> + assertTrue ( v1 . isSupportedBy ( v1 ) ) ; <nl> <nl> v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; <nl> v2 = new CassandraVersion ( " 1 . 2 . 4 " ) ; <nl> - assert v1 . isSupportedBy ( v2 ) ; <nl> - assert ! v2 . isSupportedBy ( v1 ) ; <nl> + assertTrue ( v1 . isSupportedBy ( v2 ) ) ; <nl> + assertTrue ( ! v2 . isSupportedBy ( v1 ) ) ; <nl> <nl> v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; <nl> v2 = new CassandraVersion ( " 1 . 3 . 3 " ) ; <nl> - assert v1 . isSupportedBy ( v2 ) ; <nl> - assert ! v2 . isSupportedBy ( v1 ) ; <nl> + assertTrue ( v1 . isSupportedBy ( v2 ) ) ; <nl> + assertTrue ( ! v2 . isSupportedBy ( v1 ) ) ; <nl> <nl> v1 = new CassandraVersion ( " 2 . 2 . 3 " ) ; <nl> v2 = new CassandraVersion ( " 1 . 3 . 3 " ) ; <nl> - assert ! v1 . isSupportedBy ( v2 ) ; <nl> - assert ! v2 . isSupportedBy ( v1 ) ; <nl> + assertTrue ( ! v1 . isSupportedBy ( v2 ) ) ; <nl> + assertTrue ( ! v2 . isSupportedBy ( v1 ) ) ; <nl> <nl> v1 = new CassandraVersion ( " 3 . 1 . 0 " ) ; <nl> v2 = new CassandraVersion ( " 3 . 0 . 1 " ) ; <nl> - assert ! v1 . isSupportedBy ( v2 ) ; <nl> - assert v2 . isSupportedBy ( v1 ) ; <nl> + assertTrue ( ! v1 . isSupportedBy ( v2 ) ) ; <nl> + assertTrue ( v2 . isSupportedBy ( v1 ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testInvalid ( ) <nl> { <nl> - assertThrows ( " 1 . 0 " ) ; <nl> assertThrows ( " 1 . 0 . 0a " ) ; <nl> assertThrows ( " 1 . a . 4 " ) ; <nl> assertThrows ( " 1 . 0 . 0 - foo & " ) ; <nl> @ @ - 132 , 6 + 136 , 22 @ @ public class CassandraVersionTest <nl> prev = next ; <nl> next = new CassandraVersion ( " 2 . 2 . 0 " ) ; <nl> assertTrue ( prev . compareTo ( next ) < 0 ) ; <nl> + <nl> + prev = next ; <nl> + next = new CassandraVersion ( " 3 . 1 " ) ; <nl> + assertTrue ( prev . compareTo ( next ) < 0 ) ; <nl> + <nl> + prev = next ; <nl> + next = new CassandraVersion ( " 3 . 1 . 1 " ) ; <nl> + assertTrue ( prev . compareTo ( next ) < 0 ) ; <nl> + <nl> + prev = next ; <nl> + next = new CassandraVersion ( " 3 . 2 - rc1 - SNAPSHOT " ) ; <nl> + assertTrue ( prev . compareTo ( next ) < 0 ) ; <nl> + <nl> + prev = next ; <nl> + next = new CassandraVersion ( " 3 . 2 " ) ; <nl> + assertTrue ( prev . compareTo ( next ) < 0 ) ; <nl> } <nl> <nl> private static void assertThrows ( String str ) <nl> @ @ - 139 , 7 + 159 , 7 @ @ public class CassandraVersionTest <nl> try <nl> { <nl> new CassandraVersion ( str ) ; <nl> - assert false ; <nl> + fail ( ) ; <nl> } <nl> catch ( IllegalArgumentException e ) { } <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / io / sstable / Descriptor . java b / src / java / org / apache / cassandra / io / sstable / Descriptor . java <nl> index 0338044 . . f21a0d5 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / Descriptor . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / Descriptor . java <nl> @ @ - 47 , 7 + 47 , 7 @ @ public class Descriptor <nl> public static class Version <nl> { <nl> / / This needs to be at the begining for initialization sake <nl> - private static final String current _ version = " ib " ; <nl> + public static final String current _ version = " ib " ; <nl> <nl> public static final Version LEGACY = new Version ( " a " ) ; / / " pre - history " <nl> / / b ( 0 . 7 . 0 ) : added version to sstable filenames <nl> diff - - git a / test / unit / org / apache / cassandra / streaming / BootstrapTest . java b / test / unit / org / apache / cassandra / streaming / BootstrapTest . java <nl> index 1af3074 . . 6578dde 100644 <nl> - - - a / test / unit / org / apache / cassandra / streaming / BootstrapTest . java <nl> + + + b / test / unit / org / apache / cassandra / streaming / BootstrapTest . java <nl> @ @ - 36 , 7 + 36 , 8 @ @ public class BootstrapTest extends SchemaLoader <nl> @ Test <nl> public void testGetNewNames ( ) throws IOException <nl> { <nl> - Descriptor desc = Descriptor . fromFilename ( new File ( " Keyspace1 " , " Keyspace1 - Standard1 - ib - 500 - Data . db " ) . toString ( ) ) ; <nl> + String ver = Descriptor . Version . current _ version ; <nl> + Descriptor desc = Descriptor . fromFilename ( new File ( " Keyspace1 " , " Keyspace1 - Standard1 - " + ver + " - 500 - Data . db " ) . toString ( ) ) ; <nl> / / assert ! desc . isLatestVersion ; / / minimum compatible version - - for now it is the latest as well <nl> PendingFile inContext = new PendingFile ( null , desc , " Data . db " , Arrays . asList ( Pair . create ( 0L , 1L ) ) , OperationType . BOOTSTRAP ) ; <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 4a1f137 . . cbd109e 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 2 
 + * Fix CassandraVersion to accept x . y version string ( CASSANDRA - 10931 ) 
 * Add forceUserDefinedCleanup to allow more flexible cleanup ( CASSANDRA - 10708 ) 
 * ( cqlsh ) allow setting TTL with COPY ( CASSANDRA - 9494 ) 
 * Fix counting of received sstables in streaming ( CASSANDRA - 10949 ) 
 diff - - git a / src / java / org / apache / cassandra / utils / CassandraVersion . java b / src / java / org / apache / cassandra / utils / CassandraVersion . java 
 index 6887a88 . . 790eb5c 100644 
 - - - a / src / java / org / apache / cassandra / utils / CassandraVersion . java 
 + + + b / src / java / org / apache / cassandra / utils / CassandraVersion . java 
 @ @ - 32 , 7 + 32 , 11 @ @ import org . apache . commons . lang3 . StringUtils ; 
 * / 
 public class CassandraVersion implements Comparable < CassandraVersion > 
 { 
 - private static final String VERSION _ REGEXP = " ( \ \ d + ) \ \ . ( \ \ d + ) \ \ . ( \ \ d + ) ( \ \ - [ . \ \ w ] + ) ? ( [ . + ] [ . \ \ w ] + ) ? " ; 
 + / * * 
 + * note : 3rd group matches to words but only allows number and checked after regexp test . 
 + * this is because 3rd and the last can be identical . 
 + * * / 
 + private static final String VERSION _ REGEXP = " ( \ \ d + ) \ \ . ( \ \ d + ) ( ? : \ \ . ( \ \ w + ) ) ? ( \ \ - [ . \ \ w ] + ) ? ( [ . + ] [ . \ \ w ] + ) ? " ; 
 private static final Pattern pattern = Pattern . compile ( VERSION _ REGEXP ) ; 
 private static final Pattern SNAPSHOT = Pattern . compile ( " - SNAPSHOT " ) ; 
 
 @ @ - 70 , 7 + 74 , 7 @ @ public class CassandraVersion implements Comparable < CassandraVersion > 
 { 
 this . major = Integer . parseInt ( matcher . group ( 1 ) ) ; 
 this . minor = Integer . parseInt ( matcher . group ( 2 ) ) ; 
 - this . patch = Integer . parseInt ( matcher . group ( 3 ) ) ; 
 + this . patch = matcher . group ( 3 ) ! = null ? Integer . parseInt ( matcher . group ( 3 ) ) : 0 ; 
 
 String pr = matcher . group ( 4 ) ; 
 String bld = matcher . group ( 5 ) ; 
 @ @ - 80 , 7 + 84 , 7 @ @ public class CassandraVersion implements Comparable < CassandraVersion > 
 } 
 catch ( NumberFormatException e ) 
 { 
 - throw new IllegalArgumentException ( " Invalid version value : " + version ) ; 
 + throw new IllegalArgumentException ( " Invalid version value : " + version , e ) ; 
 } 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / utils / CassandraVersionTest . java b / test / unit / org / apache / cassandra / utils / CassandraVersionTest . java 
 index 145b735 . . cec668f 100644 
 - - - a / test / unit / org / apache / cassandra / utils / CassandraVersionTest . java 
 + + + b / test / unit / org / apache / cassandra / utils / CassandraVersionTest . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . utils ; 
 import org . junit . Test ; 
 
 import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . fail ; 
 
 public class CassandraVersionTest 
 { 
 @ @ - 29 , 14 + 30 , 18 @ @ public class CassandraVersionTest 
 CassandraVersion version ; 
 
 version = new CassandraVersion ( " 1 . 2 . 3 " ) ; 
 - assert version . major = = 1 & & version . minor = = 2 & & version . patch = = 3 ; 
 + assertTrue ( version . major = = 1 & & version . minor = = 2 & & version . patch = = 3 ) ; 
 
 version = new CassandraVersion ( " 1 . 2 . 3 - foo . 2 + Bar " ) ; 
 - assert version . major = = 1 & & version . minor = = 2 & & version . patch = = 3 ; 
 + assertTrue ( version . major = = 1 & & version . minor = = 2 & & version . patch = = 3 ) ; 
 
 / / CassandraVersion can parse 4th ' . ' as build number 
 version = new CassandraVersion ( " 1 . 2 . 3 . 456 " ) ; 
 - assert version . major = = 1 & & version . minor = = 2 & & version . patch = = 3 ; 
 + assertTrue ( version . major = = 1 & & version . minor = = 2 & & version . patch = = 3 ) ; 
 + 
 + / / support for tick - tock release 
 + version = new CassandraVersion ( " 3 . 2 " ) ; 
 + assertTrue ( version . major = = 3 & & version . minor = = 2 & & version . patch = = 0 ) ; 
 } 
 
 @ Test 
 @ @ - 46 , 32 + 51 , 32 @ @ public class CassandraVersionTest 
 
 v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; 
 v2 = new CassandraVersion ( " 1 . 2 . 4 " ) ; 
 - assert v1 . compareTo ( v2 ) = = - 1 ; 
 + assertTrue ( v1 . compareTo ( v2 ) = = - 1 ) ; 
 
 v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; 
 v2 = new CassandraVersion ( " 1 . 2 . 3 " ) ; 
 - assert v1 . compareTo ( v2 ) = = 0 ; 
 + assertTrue ( v1 . compareTo ( v2 ) = = 0 ) ; 
 
 v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; 
 v2 = new CassandraVersion ( " 2 . 0 . 0 " ) ; 
 - assert v1 . compareTo ( v2 ) = = - 1 ; 
 - assert v2 . compareTo ( v1 ) = = 1 ; 
 + assertTrue ( v1 . compareTo ( v2 ) = = - 1 ) ; 
 + assertTrue ( v2 . compareTo ( v1 ) = = 1 ) ; 
 
 v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; 
 v2 = new CassandraVersion ( " 1 . 2 . 3 - alpha " ) ; 
 - assert v1 . compareTo ( v2 ) = = 1 ; 
 + assertTrue ( v1 . compareTo ( v2 ) = = 1 ) ; 
 
 v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; 
 v2 = new CassandraVersion ( " 1 . 2 . 3 + foo " ) ; 
 - assert v1 . compareTo ( v2 ) = = - 1 ; 
 + assertTrue ( v1 . compareTo ( v2 ) = = - 1 ) ; 
 
 v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; 
 v2 = new CassandraVersion ( " 1 . 2 . 3 - alpha + foo " ) ; 
 - assert v1 . compareTo ( v2 ) = = 1 ; 
 + assertTrue ( v1 . compareTo ( v2 ) = = 1 ) ; 
 
 v1 = new CassandraVersion ( " 1 . 2 . 3 - alpha + 1 " ) ; 
 v2 = new CassandraVersion ( " 1 . 2 . 3 - alpha + 2 " ) ; 
 - assert v1 . compareTo ( v2 ) = = - 1 ; 
 + assertTrue ( v1 . compareTo ( v2 ) = = - 1 ) ; 
 } 
 
 @ Test 
 @ @ - 80 , 33 + 85 , 32 @ @ public class CassandraVersionTest 
 CassandraVersion v1 , v2 ; 
 
 v1 = new CassandraVersion ( " 3 . 0 . 2 " ) ; 
 - assert v1 . isSupportedBy ( v1 ) ; 
 + assertTrue ( v1 . isSupportedBy ( v1 ) ) ; 
 
 v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; 
 v2 = new CassandraVersion ( " 1 . 2 . 4 " ) ; 
 - assert v1 . isSupportedBy ( v2 ) ; 
 - assert ! v2 . isSupportedBy ( v1 ) ; 
 + assertTrue ( v1 . isSupportedBy ( v2 ) ) ; 
 + assertTrue ( ! v2 . isSupportedBy ( v1 ) ) ; 
 
 v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; 
 v2 = new CassandraVersion ( " 1 . 3 . 3 " ) ; 
 - assert v1 . isSupportedBy ( v2 ) ; 
 - assert ! v2 . isSupportedBy ( v1 ) ; 
 + assertTrue ( v1 . isSupportedBy ( v2 ) ) ; 
 + assertTrue ( ! v2 . isSupportedBy ( v1 ) ) ; 
 
 v1 = new CassandraVersion ( " 2 . 2 . 3 " ) ; 
 v2 = new CassandraVersion ( " 1 . 3 . 3 " ) ; 
 - assert ! v1 . isSupportedBy ( v2 ) ; 
 - assert ! v2 . isSupportedBy ( v1 ) ; 
 + assertTrue ( ! v1 . isSupportedBy ( v2 ) ) ; 
 + assertTrue ( ! v2 . isSupportedBy ( v1 ) ) ; 
 
 v1 = new CassandraVersion ( " 3 . 1 . 0 " ) ; 
 v2 = new CassandraVersion ( " 3 . 0 . 1 " ) ; 
 - assert ! v1 . isSupportedBy ( v2 ) ; 
 - assert v2 . isSupportedBy ( v1 ) ; 
 + assertTrue ( ! v1 . isSupportedBy ( v2 ) ) ; 
 + assertTrue ( v2 . isSupportedBy ( v1 ) ) ; 
 } 
 
 @ Test 
 public void testInvalid ( ) 
 { 
 - assertThrows ( " 1 . 0 " ) ; 
 assertThrows ( " 1 . 0 . 0a " ) ; 
 assertThrows ( " 1 . a . 4 " ) ; 
 assertThrows ( " 1 . 0 . 0 - foo & " ) ; 
 @ @ - 132 , 6 + 136 , 22 @ @ public class CassandraVersionTest 
 prev = next ; 
 next = new CassandraVersion ( " 2 . 2 . 0 " ) ; 
 assertTrue ( prev . compareTo ( next ) < 0 ) ; 
 + 
 + prev = next ; 
 + next = new CassandraVersion ( " 3 . 1 " ) ; 
 + assertTrue ( prev . compareTo ( next ) < 0 ) ; 
 + 
 + prev = next ; 
 + next = new CassandraVersion ( " 3 . 1 . 1 " ) ; 
 + assertTrue ( prev . compareTo ( next ) < 0 ) ; 
 + 
 + prev = next ; 
 + next = new CassandraVersion ( " 3 . 2 - rc1 - SNAPSHOT " ) ; 
 + assertTrue ( prev . compareTo ( next ) < 0 ) ; 
 + 
 + prev = next ; 
 + next = new CassandraVersion ( " 3 . 2 " ) ; 
 + assertTrue ( prev . compareTo ( next ) < 0 ) ; 
 } 
 
 private static void assertThrows ( String str ) 
 @ @ - 139 , 7 + 159 , 7 @ @ public class CassandraVersionTest 
 try 
 { 
 new CassandraVersion ( str ) ; 
 - assert false ; 
 + fail ( ) ; 
 } 
 catch ( IllegalArgumentException e ) { } 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / io / sstable / Descriptor . java b / src / java / org / apache / cassandra / io / sstable / Descriptor . java 
 index 0338044 . . f21a0d5 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / Descriptor . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / Descriptor . java 
 @ @ - 47 , 7 + 47 , 7 @ @ public class Descriptor 
 public static class Version 
 { 
 / / This needs to be at the begining for initialization sake 
 - private static final String current _ version = " ib " ; 
 + public static final String current _ version = " ib " ; 
 
 public static final Version LEGACY = new Version ( " a " ) ; / / " pre - history " 
 / / b ( 0 . 7 . 0 ) : added version to sstable filenames 
 diff - - git a / test / unit / org / apache / cassandra / streaming / BootstrapTest . java b / test / unit / org / apache / cassandra / streaming / BootstrapTest . java 
 index 1af3074 . . 6578dde 100644 
 - - - a / test / unit / org / apache / cassandra / streaming / BootstrapTest . java 
 + + + b / test / unit / org / apache / cassandra / streaming / BootstrapTest . java 
 @ @ - 36 , 7 + 36 , 8 @ @ public class BootstrapTest extends SchemaLoader 
 @ Test 
 public void testGetNewNames ( ) throws IOException 
 { 
 - Descriptor desc = Descriptor . fromFilename ( new File ( " Keyspace1 " , " Keyspace1 - Standard1 - ib - 500 - Data . db " ) . toString ( ) ) ; 
 + String ver = Descriptor . Version . current _ version ; 
 + Descriptor desc = Descriptor . fromFilename ( new File ( " Keyspace1 " , " Keyspace1 - Standard1 - " + ver + " - 500 - Data . db " ) . toString ( ) ) ; 
 / / assert ! desc . isLatestVersion ; / / minimum compatible version - - for now it is the latest as well 
 PendingFile inContext = new PendingFile ( null , desc , " Data . db " , Arrays . asList ( Pair . create ( 0L , 1L ) ) , OperationType . BOOTSTRAP ) ; 

