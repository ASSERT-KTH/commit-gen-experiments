BLEU SCORE: 0.05522397783539471

TEST MSG: Update indexInterval in CFMetadata . apply ( )
GENERATED MSG: Fix default timestamp in QueryOptions

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 0bcc5cb . . cdd2c77 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 14 : <nl> + * Fix ignored index _ interval change in ALTER TABLE statements ( CASSANDRA - 7976 ) <nl> * Do more aggressive compaction in old time windows in DTCS ( CASSANDRA - 8360 ) <nl> * java . lang . AssertionError when reading saved cache ( CASSANDRA - 8740 ) <nl> * " disk full " when running cleanup ( CASSANDRA - 9036 ) <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index 04a5b01 . . 056b305 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 1111 , 6 + 1111 , 7 @ @ public final class CFMetaData <nl> memtableFlushPeriod = cfm . memtableFlushPeriod ; <nl> caching = cfm . caching ; <nl> defaultTimeToLive = cfm . defaultTimeToLive ; <nl> + indexInterval = cfm . indexInterval ; <nl> speculativeRetry = cfm . speculativeRetry ; <nl> populateIoCacheOnFlush = cfm . populateIoCacheOnFlush ; <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / AlterTableTest . java b / test / unit / org / apache / cassandra / cql3 / AlterTableTest . java <nl> new file mode 100644 <nl> index 0000000 . . 099da54 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / cql3 / AlterTableTest . java <nl> @ @ - 0 , 0 + 1 , 75 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . cql3 ; <nl> + <nl> + import org . apache . cassandra . SchemaLoader ; <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . db . ConsistencyLevel ; <nl> + import org . apache . cassandra . db . Keyspace ; <nl> + import org . apache . cassandra . gms . Gossiper ; <nl> + import org . apache . cassandra . service . ClientState ; <nl> + import org . junit . AfterClass ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + import static org . apache . cassandra . cql3 . QueryProcessor . process ; <nl> + import static org . junit . Assert . assertEquals ; <nl> + <nl> + public class AlterTableTest <nl> + { <nl> + private static final String KEYSPACE = " alter _ table _ test " ; <nl> + static ClientState clientState ; <nl> + <nl> + @ BeforeClass <nl> + public static void setUpClass ( ) throws Throwable <nl> + { <nl> + SchemaLoader . loadSchema ( ) ; <nl> + executeSchemaChange ( " CREATE KEYSPACE IF NOT EXISTS % s WITH replication = { ' class ' : ' SimpleStrategy ' , ' replication _ factor ' : ' 1 ' } " ) ; <nl> + clientState = ClientState . forInternalCalls ( ) ; <nl> + } <nl> + <nl> + @ AfterClass <nl> + public static void stopGossiper ( ) <nl> + { <nl> + Gossiper . instance . stop ( ) ; <nl> + } <nl> + <nl> + private static void executeSchemaChange ( String query ) throws Throwable <nl> + { <nl> + try <nl> + { <nl> + process ( String . format ( query , KEYSPACE ) , ConsistencyLevel . ONE ) ; <nl> + } catch ( RuntimeException exc ) <nl> + { <nl> + throw exc . getCause ( ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + / / tests CASSANDRA - 7976 <nl> + public void testAlterIndexInterval ( ) throws Throwable <nl> + { <nl> + executeSchemaChange ( " CREATE TABLE IF NOT EXISTS % s . songs ( id uuid , album text , artist text , data blob , PRIMARY KEY ( id ) ) " ) ; <nl> + ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE ) . getColumnFamilyStore ( " songs " ) ; <nl> + <nl> + executeSchemaChange ( " ALTER TABLE % s . songs WITH index _ interval = 256 " ) ; <nl> + assertEquals ( 256 , cfs . metadata . getIndexInterval ( ) ) ; <nl> + <nl> + executeSchemaChange ( " ALTER TABLE % s . songs WITH caching = ' none ' " ) ; <nl> + assertEquals ( 256 , cfs . metadata . getIndexInterval ( ) ) ; <nl> + } }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0bcc5cb . . cdd2c77 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 14 : 
 + * Fix ignored index _ interval change in ALTER TABLE statements ( CASSANDRA - 7976 ) 
 * Do more aggressive compaction in old time windows in DTCS ( CASSANDRA - 8360 ) 
 * java . lang . AssertionError when reading saved cache ( CASSANDRA - 8740 ) 
 * " disk full " when running cleanup ( CASSANDRA - 9036 ) 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index 04a5b01 . . 056b305 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 1111 , 6 + 1111 , 7 @ @ public final class CFMetaData 
 memtableFlushPeriod = cfm . memtableFlushPeriod ; 
 caching = cfm . caching ; 
 defaultTimeToLive = cfm . defaultTimeToLive ; 
 + indexInterval = cfm . indexInterval ; 
 speculativeRetry = cfm . speculativeRetry ; 
 populateIoCacheOnFlush = cfm . populateIoCacheOnFlush ; 
 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / AlterTableTest . java b / test / unit / org / apache / cassandra / cql3 / AlterTableTest . java 
 new file mode 100644 
 index 0000000 . . 099da54 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / cql3 / AlterTableTest . java 
 @ @ - 0 , 0 + 1 , 75 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . cql3 ; 
 + 
 + import org . apache . cassandra . SchemaLoader ; 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . db . ConsistencyLevel ; 
 + import org . apache . cassandra . db . Keyspace ; 
 + import org . apache . cassandra . gms . Gossiper ; 
 + import org . apache . cassandra . service . ClientState ; 
 + import org . junit . AfterClass ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + import static org . apache . cassandra . cql3 . QueryProcessor . process ; 
 + import static org . junit . Assert . assertEquals ; 
 + 
 + public class AlterTableTest 
 + { 
 + private static final String KEYSPACE = " alter _ table _ test " ; 
 + static ClientState clientState ; 
 + 
 + @ BeforeClass 
 + public static void setUpClass ( ) throws Throwable 
 + { 
 + SchemaLoader . loadSchema ( ) ; 
 + executeSchemaChange ( " CREATE KEYSPACE IF NOT EXISTS % s WITH replication = { ' class ' : ' SimpleStrategy ' , ' replication _ factor ' : ' 1 ' } " ) ; 
 + clientState = ClientState . forInternalCalls ( ) ; 
 + } 
 + 
 + @ AfterClass 
 + public static void stopGossiper ( ) 
 + { 
 + Gossiper . instance . stop ( ) ; 
 + } 
 + 
 + private static void executeSchemaChange ( String query ) throws Throwable 
 + { 
 + try 
 + { 
 + process ( String . format ( query , KEYSPACE ) , ConsistencyLevel . ONE ) ; 
 + } catch ( RuntimeException exc ) 
 + { 
 + throw exc . getCause ( ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + / / tests CASSANDRA - 7976 
 + public void testAlterIndexInterval ( ) throws Throwable 
 + { 
 + executeSchemaChange ( " CREATE TABLE IF NOT EXISTS % s . songs ( id uuid , album text , artist text , data blob , PRIMARY KEY ( id ) ) " ) ; 
 + ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE ) . getColumnFamilyStore ( " songs " ) ; 
 + 
 + executeSchemaChange ( " ALTER TABLE % s . songs WITH index _ interval = 256 " ) ; 
 + assertEquals ( 256 , cfs . metadata . getIndexInterval ( ) ) ; 
 + 
 + executeSchemaChange ( " ALTER TABLE % s . songs WITH caching = ' none ' " ) ; 
 + assertEquals ( 256 , cfs . metadata . getIndexInterval ( ) ) ; 
 + } }

NEAREST DIFF:
ELIMINATEDSENTENCE
