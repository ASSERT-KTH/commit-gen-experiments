BLEU SCORE: 0.05341087579952926

TEST MSG: Avoid NoSuchElementException on empty batch
GENERATED MSG: Improve CQL3 batchlog support

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index be39f29 . . 7794c96 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 3 <nl> + * Avoid NoSuchElementException when executing empty batch ( CASSANDRA - 10711 ) <nl> * Avoid building PartitionUpdate in toString ( CASSANDRA - 10897 ) <nl> * Reduce heap spent when receiving many SSTables ( CASSANDRA - 10797 ) <nl> * Add back support for 3rd party auth providers to bulk loader ( CASSANDRA - 10873 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> index 1f1d507 . . dc7ef73 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> @ @ - 340 , 6 + 340 , 9 @ @ public class BatchStatement implements CQLStatement <nl> <nl> private void executeWithoutConditions ( Collection < ? extends IMutation > mutations , ConsistencyLevel cl ) throws RequestExecutionException , RequestValidationException <nl> { <nl> + if ( mutations . isEmpty ( ) ) <nl> + return ; <nl> + <nl> / / Extract each collection of updates from it ' s IMutation and then lazily concatenate all of them into a single Iterable . <nl> Iterable < PartitionUpdate > updates = Iterables . concat ( Iterables . transform ( mutations , new Function < IMutation , Collection < PartitionUpdate > > ( ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / BatchTests . java b / test / unit / org / apache / cassandra / cql3 / BatchTests . java <nl> index 95fe612 . . 73923fb 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / BatchTests . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / BatchTests . java <nl> @ @ - 37 , 7 + 37 , 6 @ @ public class BatchTests <nl> private static Cluster cluster ; <nl> private static Session session ; <nl> <nl> - <nl> private static PreparedStatement counter ; <nl> private static PreparedStatement noncounter ; <nl> <nl> @ @ - 114 , 6 + 113 , 12 @ @ public class BatchTests <nl> sendBatch ( BatchStatement . Type . UNLOGGED , true , false ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testEmptyBatch ( ) <nl> + { <nl> + session . execute ( " BEGIN BATCH APPLY BATCH " ) ; <nl> + session . execute ( " BEGIN UNLOGGED BATCH APPLY BATCH " ) ; <nl> + } <nl> <nl> @ Test ( expected = InvalidQueryException . class ) <nl> public void testCounterInLoggedBatch ( ) <nl> @ @ - 133 , 8 + 138 , 6 @ @ public class BatchTests <nl> session . execute ( b ) ; <nl> } <nl> <nl> - <nl> - <nl> public void sendBatch ( BatchStatement . Type type , boolean addCounter , boolean addNonCounter ) <nl> { <nl>
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 1363c22 . . e922c3c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 13 , 6 + 13 , 7 @ @ <nl> * fix re - created keyspace disappering after 1 . 1 . 5 upgrade ( CASSANDRA - 4698 ) <nl> * ( CLI ) display elapsed time in 2 fraction digits ( CASSANDRA - 3460 ) <nl> * add authentication support to sstableloader ( CASSANDRA - 4712 ) <nl> + * Fix CQL3 ' is reversed ' logic ( CASSANDRA - 4716 ) <nl> Merged from 1 . 0 : <nl> * Switch from NBHM to CHM in MessagingService ' s callback map , which <nl> prevents OOM in long - running instances ( CASSANDRA - 4708 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index bbddee3 . . fac0deb 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 88 , 10 + 88 , 16 @ @ public class SelectStatement implements CQLStatement <nl> START ( 0 ) , END ( 1 ) ; <nl> <nl> public final int idx ; <nl> + <nl> Bound ( int idx ) <nl> { <nl> this . idx = idx ; <nl> } <nl> + <nl> + public static Bound reverse ( Bound b ) <nl> + { <nl> + return b = = START ? END : START ; <nl> + } <nl> } ; <nl> <nl> public SelectStatement ( CFDefinition cfDef , int boundTerms , Parameters parameters ) <nl> @ @ - 189 , 8 + 195 , 8 @ @ public class SelectStatement implements CQLStatement <nl> / / . . . a range ( slice ) of column names <nl> if ( isColumnRange ( ) ) <nl> { <nl> - ByteBuffer start = getRequestedBound ( isReversed ? Bound . END : Bound . START , variables ) ; <nl> - ByteBuffer finish = getRequestedBound ( isReversed ? Bound . START : Bound . END , variables ) ; <nl> + ByteBuffer start = getRequestedBound ( Bound . START , variables ) ; <nl> + ByteBuffer finish = getRequestedBound ( Bound . END , variables ) ; <nl> <nl> / / Note that we use the total limit for every key . This is <nl> / / potentially inefficient , but then again , IN + LIMIT is not a <nl> @ @ - 478 , 13 + 484 , 18 @ @ public class SelectStatement implements CQLStatement <nl> } <nl> } <nl> <nl> - private ByteBuffer getRequestedBound ( Bound b , List < ByteBuffer > variables ) throws InvalidRequestException <nl> + private ByteBuffer getRequestedBound ( Bound bound , List < ByteBuffer > variables ) throws InvalidRequestException <nl> { <nl> assert isColumnRange ( ) ; <nl> <nl> ColumnNameBuilder builder = cfDef . getColumnNameBuilder ( ) ; <nl> - for ( Restriction r : columnRestrictions ) <nl> + for ( CFDefinition . Name name : cfDef . columns . values ( ) ) <nl> { <nl> + / / In a restriction , we always have Bound . START < Bound . END for the " base " comparator . <nl> + / / So if we ' re doing a reverse slice , we must inverse the bounds when giving them as start and end of the slice filter . <nl> + / / But if the actual comparator itself is reversed , we must inversed the bounds too . <nl> + Bound b = isReversed = = isReversedType ( name ) ? bound : Bound . reverse ( bound ) ; <nl> + Restriction r = columnRestrictions [ name . position ] ; <nl> if ( r = = null | | ( ! r . isEquality ( ) & & r . bound ( b ) = = null ) ) <nl> { <nl> / / There wasn ' t any non EQ relation on that key , we select all records having the preceding component as prefix . <nl> @ @ - 926 , 6 + 937 , 11 @ @ public class SelectStatement implements CQLStatement <nl> return new CqlRow ( key , thriftColumns ) ; <nl> } <nl> <nl> + private static boolean isReversedType ( CFDefinition . Name name ) <nl> + { <nl> + return name . type instanceof ReversedType ; <nl> + } <nl> + <nl> public static class RawStatement extends CFStatement <nl> { <nl> private final Parameters parameters ; <nl> @ @ - 1159 , 11 + 1175 , 6 @ @ public class SelectStatement implements CQLStatement <nl> return new ParsedStatement . Prepared ( stmt , Arrays . < CFDefinition . Name > asList ( names ) ) ; <nl> } <nl> <nl> - private static boolean isReversedType ( CFDefinition . Name name ) <nl> - { <nl> - return name . type instanceof ReversedType ; <nl> - } <nl> - <nl> Restriction updateRestriction ( CFDefinition . Name name , Restriction restriction , Relation newRel ) throws InvalidRequestException <nl> { <nl> if ( newRel . onToken & & name . kind ! = CFDefinition . Name . Kind . KEY _ ALIAS )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index be39f29 . . 7794c96 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 3 
 + * Avoid NoSuchElementException when executing empty batch ( CASSANDRA - 10711 ) 
 * Avoid building PartitionUpdate in toString ( CASSANDRA - 10897 ) 
 * Reduce heap spent when receiving many SSTables ( CASSANDRA - 10797 ) 
 * Add back support for 3rd party auth providers to bulk loader ( CASSANDRA - 10873 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 index 1f1d507 . . dc7ef73 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 @ @ - 340 , 6 + 340 , 9 @ @ public class BatchStatement implements CQLStatement 
 
 private void executeWithoutConditions ( Collection < ? extends IMutation > mutations , ConsistencyLevel cl ) throws RequestExecutionException , RequestValidationException 
 { 
 + if ( mutations . isEmpty ( ) ) 
 + return ; 
 + 
 / / Extract each collection of updates from it ' s IMutation and then lazily concatenate all of them into a single Iterable . 
 Iterable < PartitionUpdate > updates = Iterables . concat ( Iterables . transform ( mutations , new Function < IMutation , Collection < PartitionUpdate > > ( ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / BatchTests . java b / test / unit / org / apache / cassandra / cql3 / BatchTests . java 
 index 95fe612 . . 73923fb 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / BatchTests . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / BatchTests . java 
 @ @ - 37 , 7 + 37 , 6 @ @ public class BatchTests 
 private static Cluster cluster ; 
 private static Session session ; 
 
 - 
 private static PreparedStatement counter ; 
 private static PreparedStatement noncounter ; 
 
 @ @ - 114 , 6 + 113 , 12 @ @ public class BatchTests 
 sendBatch ( BatchStatement . Type . UNLOGGED , true , false ) ; 
 } 
 
 + @ Test 
 + public void testEmptyBatch ( ) 
 + { 
 + session . execute ( " BEGIN BATCH APPLY BATCH " ) ; 
 + session . execute ( " BEGIN UNLOGGED BATCH APPLY BATCH " ) ; 
 + } 
 
 @ Test ( expected = InvalidQueryException . class ) 
 public void testCounterInLoggedBatch ( ) 
 @ @ - 133 , 8 + 138 , 6 @ @ public class BatchTests 
 session . execute ( b ) ; 
 } 
 
 - 
 - 
 public void sendBatch ( BatchStatement . Type type , boolean addCounter , boolean addNonCounter ) 
 { 


NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 1363c22 . . e922c3c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 13 , 6 + 13 , 7 @ @ 
 * fix re - created keyspace disappering after 1 . 1 . 5 upgrade ( CASSANDRA - 4698 ) 
 * ( CLI ) display elapsed time in 2 fraction digits ( CASSANDRA - 3460 ) 
 * add authentication support to sstableloader ( CASSANDRA - 4712 ) 
 + * Fix CQL3 ' is reversed ' logic ( CASSANDRA - 4716 ) 
 Merged from 1 . 0 : 
 * Switch from NBHM to CHM in MessagingService ' s callback map , which 
 prevents OOM in long - running instances ( CASSANDRA - 4708 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index bbddee3 . . fac0deb 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 88 , 10 + 88 , 16 @ @ public class SelectStatement implements CQLStatement 
 START ( 0 ) , END ( 1 ) ; 
 
 public final int idx ; 
 + 
 Bound ( int idx ) 
 { 
 this . idx = idx ; 
 } 
 + 
 + public static Bound reverse ( Bound b ) 
 + { 
 + return b = = START ? END : START ; 
 + } 
 } ; 
 
 public SelectStatement ( CFDefinition cfDef , int boundTerms , Parameters parameters ) 
 @ @ - 189 , 8 + 195 , 8 @ @ public class SelectStatement implements CQLStatement 
 / / . . . a range ( slice ) of column names 
 if ( isColumnRange ( ) ) 
 { 
 - ByteBuffer start = getRequestedBound ( isReversed ? Bound . END : Bound . START , variables ) ; 
 - ByteBuffer finish = getRequestedBound ( isReversed ? Bound . START : Bound . END , variables ) ; 
 + ByteBuffer start = getRequestedBound ( Bound . START , variables ) ; 
 + ByteBuffer finish = getRequestedBound ( Bound . END , variables ) ; 
 
 / / Note that we use the total limit for every key . This is 
 / / potentially inefficient , but then again , IN + LIMIT is not a 
 @ @ - 478 , 13 + 484 , 18 @ @ public class SelectStatement implements CQLStatement 
 } 
 } 
 
 - private ByteBuffer getRequestedBound ( Bound b , List < ByteBuffer > variables ) throws InvalidRequestException 
 + private ByteBuffer getRequestedBound ( Bound bound , List < ByteBuffer > variables ) throws InvalidRequestException 
 { 
 assert isColumnRange ( ) ; 
 
 ColumnNameBuilder builder = cfDef . getColumnNameBuilder ( ) ; 
 - for ( Restriction r : columnRestrictions ) 
 + for ( CFDefinition . Name name : cfDef . columns . values ( ) ) 
 { 
 + / / In a restriction , we always have Bound . START < Bound . END for the " base " comparator . 
 + / / So if we ' re doing a reverse slice , we must inverse the bounds when giving them as start and end of the slice filter . 
 + / / But if the actual comparator itself is reversed , we must inversed the bounds too . 
 + Bound b = isReversed = = isReversedType ( name ) ? bound : Bound . reverse ( bound ) ; 
 + Restriction r = columnRestrictions [ name . position ] ; 
 if ( r = = null | | ( ! r . isEquality ( ) & & r . bound ( b ) = = null ) ) 
 { 
 / / There wasn ' t any non EQ relation on that key , we select all records having the preceding component as prefix . 
 @ @ - 926 , 6 + 937 , 11 @ @ public class SelectStatement implements CQLStatement 
 return new CqlRow ( key , thriftColumns ) ; 
 } 
 
 + private static boolean isReversedType ( CFDefinition . Name name ) 
 + { 
 + return name . type instanceof ReversedType ; 
 + } 
 + 
 public static class RawStatement extends CFStatement 
 { 
 private final Parameters parameters ; 
 @ @ - 1159 , 11 + 1175 , 6 @ @ public class SelectStatement implements CQLStatement 
 return new ParsedStatement . Prepared ( stmt , Arrays . < CFDefinition . Name > asList ( names ) ) ; 
 } 
 
 - private static boolean isReversedType ( CFDefinition . Name name ) 
 - { 
 - return name . type instanceof ReversedType ; 
 - } 
 - 
 Restriction updateRestriction ( CFDefinition . Name name , Restriction restriction , Relation newRel ) throws InvalidRequestException 
 { 
 if ( newRel . onToken & & name . kind ! = CFDefinition . Name . Kind . KEY _ ALIAS )
