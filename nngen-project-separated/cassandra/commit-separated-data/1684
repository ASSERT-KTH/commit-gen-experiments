BLEU SCORE: 0.02399905349559606

TEST MSG: Add CustomPayloadMirroringQueryHandler for driver testing
GENERATED MSG: Make prepared statement global instead of per - connection

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index c422a70 . . ee17277 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 18 , 7 + 18 , 7 @ @ <nl> * Delay " node up " and " node added " notifications until native protocol server is started ( CASSANDRA - 8236 ) <nl> * Compressed Commit Log ( CASSANDRA - 6809 ) <nl> * Optimise IntervalTree ( CASSANDRA - 8988 ) <nl> - * Add a key - value payload for third party usage ( CASSANDRA - 8553 ) <nl> + * Add a key - value payload for third party usage ( CASSANDRA - 8553 , 9212 ) <nl> * Bump metrics - reporter - config dependency for metrics 3 . 0 ( CASSANDRA - 8149 ) <nl> * Partition intra - cluster message streams by size , not type ( CASSANDRA - 8789 ) <nl> * Add WriteFailureException to native protocol , notify coordinator of <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / CustomPayloadMirroringQueryHandler . java b / src / java / org / apache / cassandra / cql3 / CustomPayloadMirroringQueryHandler . java <nl> new file mode 100644 <nl> index 0000000 . . 3930e9c <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cql3 / CustomPayloadMirroringQueryHandler . java <nl> @ @ - 0 , 0 + 1 , 74 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . cql3 ; <nl> + <nl> + import java . util . Map ; <nl> + <nl> + import org . apache . cassandra . cql3 . statements . BatchStatement ; <nl> + import org . apache . cassandra . cql3 . statements . ParsedStatement ; <nl> + import org . apache . cassandra . service . QueryState ; <nl> + import org . apache . cassandra . transport . messages . ResultMessage ; <nl> + import org . apache . cassandra . utils . MD5Digest ; <nl> + <nl> + / * * <nl> + * Custom QueryHandler that sends custom request payloads back with the result . <nl> + * Used to facilitate testing . <nl> + * Enabled with system property cassandra . custom _ query _ handler _ class . <nl> + * / <nl> + public class CustomPayloadMirroringQueryHandler implements QueryHandler <nl> + { <nl> + static QueryProcessor queryProcessor = QueryProcessor . instance ; <nl> + <nl> + public ResultMessage process ( String query , QueryState state , QueryOptions options , Map < String , byte [ ] > customPayload ) <nl> + { <nl> + ResultMessage result = queryProcessor . process ( query , state , options , customPayload ) ; <nl> + result . setCustomPayload ( customPayload ) ; <nl> + return result ; <nl> + } <nl> + <nl> + public ResultMessage . Prepared prepare ( String query , QueryState state , Map < String , byte [ ] > customPayload ) <nl> + { <nl> + ResultMessage . Prepared prepared = queryProcessor . prepare ( query , state , customPayload ) ; <nl> + prepared . setCustomPayload ( customPayload ) ; <nl> + return prepared ; <nl> + } <nl> + <nl> + public ParsedStatement . Prepared getPrepared ( MD5Digest id ) <nl> + { <nl> + return queryProcessor . getPrepared ( id ) ; <nl> + } <nl> + <nl> + public ParsedStatement . Prepared getPreparedForThrift ( Integer id ) <nl> + { <nl> + return queryProcessor . getPreparedForThrift ( id ) ; <nl> + } <nl> + <nl> + public ResultMessage processPrepared ( CQLStatement statement , QueryState state , QueryOptions options , Map < String , byte [ ] > customPayload ) <nl> + { <nl> + ResultMessage result = queryProcessor . processPrepared ( statement , state , options , customPayload ) ; <nl> + result . setCustomPayload ( customPayload ) ; <nl> + return result ; <nl> + } <nl> + <nl> + public ResultMessage processBatch ( BatchStatement statement , QueryState state , BatchQueryOptions options , Map < String , byte [ ] > customPayload ) <nl> + { <nl> + ResultMessage result = queryProcessor . processBatch ( statement , state , options , customPayload ) ; <nl> + result . setCustomPayload ( customPayload ) ; <nl> + return result ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / transport / CBUtil . java b / src / java / org / apache / cassandra / transport / CBUtil . java <nl> index 73df554 . . 48beea0 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / CBUtil . java <nl> + + + b / src / java / org / apache / cassandra / transport / CBUtil . java <nl> @ @ - 46 , 7 + 46 , 7 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; <nl> / * * <nl> * ByteBuf utility methods . <nl> * Note that contrarily to ByteBufferUtil , these method do " read " the <nl> - * ByteBuf advancing it ' s ( read ) position . They also write by <nl> + * ByteBuf advancing its ( read ) position . They also write by <nl> * advancing the write position . Functions are also provided to create <nl> * ByteBuf while avoiding copies . <nl> * / <nl> @ @ - 93 , 7 + 93 , 7 @ @ public abstract class CBUtil <nl> } <nl> catch ( IndexOutOfBoundsException e ) <nl> { <nl> - throw new ProtocolException ( " Not enough bytes to read an UTF8 serialized string preceded by it ' s 2 bytes length " ) ; <nl> + throw new ProtocolException ( " Not enough bytes to read an UTF8 serialized string preceded by its 2 bytes length " ) ; <nl> } <nl> } <nl> <nl> @ @ - 141 , 7 + 141 , 7 @ @ public abstract class CBUtil <nl> } <nl> catch ( IndexOutOfBoundsException e ) <nl> { <nl> - throw new ProtocolException ( " Not enough bytes to read an UTF8 serialized string preceded by it ' s 4 bytes length " ) ; <nl> + throw new ProtocolException ( " Not enough bytes to read an UTF8 serialized string preceded by its 4 bytes length " ) ; <nl> } <nl> } <nl> <nl> @ @ - 168 , 7 + 168 , 7 @ @ public abstract class CBUtil <nl> } <nl> catch ( IndexOutOfBoundsException e ) <nl> { <nl> - throw new ProtocolException ( " Not enough bytes to read a byte array preceded by it ' s 2 bytes length " ) ; <nl> + throw new ProtocolException ( " Not enough bytes to read a byte array preceded by its 2 bytes length " ) ; <nl> } <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b70c412 . . 9972c7c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 4 , 6 + 4 , 7 @ @ <nl> movement ( CASSANDRA - 833 ) <nl> * Change CQL version to 3 . 0 . 0 and stop accepting 3 . 0 . 0 - beta1 ( CASSANDRA - 4649 ) <nl> * Make prepared statement global instead of per connection ( CASSANDRA - 4449 ) <nl> + * Fix scrubbing of CQL3 created tables ( CASSANDRA - 4685 ) <nl> <nl> 1 . 2 - beta1 <nl> * add atomic _ batch _ mutate ( CASSANDRA - 4542 , - 4635 ) <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index f5c2293 . . f15ca00 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 646 , 7 + 646 , 7 @ @ public final class CFMetaData <nl> <nl> public AbstractType < ? > getValueValidator ( ByteBuffer column ) <nl> { <nl> - return getValueValidator ( column _ metadata . get ( column ) ) ; <nl> + return getValueValidator ( getColumnDefinition ( column ) ) ; <nl> } <nl> <nl> public AbstractType < ? > getValueValidator ( ColumnDefinition columnDefinition ) <nl> @ @ - 932 , 9 + 932 , 24 @ @ public final class CFMetaData <nl> return def ; <nl> } <nl> <nl> - public ColumnDefinition getColumnDefinition ( ByteBuffer name ) <nl> + public ColumnDefinition getColumnDefinition ( ByteBuffer columnName ) <nl> { <nl> - return column _ metadata . get ( name ) ; <nl> + if ( comparator instanceof CompositeType ) <nl> + { <nl> + CompositeType composite = ( CompositeType ) comparator ; <nl> + ByteBuffer [ ] components = composite . split ( columnName ) ; <nl> + for ( ColumnDefinition def : column _ metadata . values ( ) ) <nl> + { <nl> + ByteBuffer toCompare = def . componentIndex = = null ? columnName : components [ def . componentIndex ] ; <nl> + if ( def . name . equals ( toCompare ) ) <nl> + return def ; <nl> + } <nl> + return null ; <nl> + } <nl> + else <nl> + { <nl> + return column _ metadata . get ( columnName ) ; <nl> + } <nl> } <nl> <nl> public ColumnDefinition getColumnDefinitionForIndex ( String indexName ) <nl> diff - - git a / src / java / org / apache / cassandra / thrift / ThriftValidation . java b / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> index 93b972d . . b1b6c24 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> + + + b / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> @ @ - 396 , 7 + 396 , 7 @ @ public class ThriftValidation <nl> if ( ! column . isSetTimestamp ( ) ) <nl> throw new org . apache . cassandra . exceptions . InvalidRequestException ( " Column timestamp is required " ) ; <nl> <nl> - ColumnDefinition columnDef = getColumnDefinition ( metadata , column . name ) ; <nl> + ColumnDefinition columnDef = metadata . getColumnDefinition ( column . name ) ; <nl> try <nl> { <nl> AbstractType < ? > validator = metadata . getValueValidator ( columnDef ) ; <nl> @ @ - 423 , 26 + 423 , 6 @ @ public class ThriftValidation <nl> metadata . ksName ) ) ; <nl> } <nl> <nl> - private static ColumnDefinition getColumnDefinition ( CFMetaData metadata , ByteBuffer columnName ) <nl> - { <nl> - if ( metadata . comparator instanceof CompositeType ) <nl> - { <nl> - CompositeType composite = ( CompositeType ) metadata . comparator ; <nl> - ByteBuffer [ ] components = composite . split ( columnName ) ; <nl> - for ( ColumnDefinition def : metadata . getColumn _ metadata ( ) . values ( ) ) <nl> - { <nl> - ByteBuffer toCompare = def . componentIndex = = null ? columnName : components [ def . componentIndex ] ; <nl> - if ( columnName . equals ( toCompare ) ) <nl> - return def ; <nl> - } <nl> - return null ; <nl> - } <nl> - else <nl> - { <nl> - return metadata . getColumnDefinition ( columnName ) ; <nl> - } <nl> - } <nl> - <nl> / * * <nl> * Return , at most , the first 64K of the buffer . This avoids very large column values being <nl> * logged in their entirety .

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index c422a70 . . ee17277 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 18 , 7 + 18 , 7 @ @ 
 * Delay " node up " and " node added " notifications until native protocol server is started ( CASSANDRA - 8236 ) 
 * Compressed Commit Log ( CASSANDRA - 6809 ) 
 * Optimise IntervalTree ( CASSANDRA - 8988 ) 
 - * Add a key - value payload for third party usage ( CASSANDRA - 8553 ) 
 + * Add a key - value payload for third party usage ( CASSANDRA - 8553 , 9212 ) 
 * Bump metrics - reporter - config dependency for metrics 3 . 0 ( CASSANDRA - 8149 ) 
 * Partition intra - cluster message streams by size , not type ( CASSANDRA - 8789 ) 
 * Add WriteFailureException to native protocol , notify coordinator of 
 diff - - git a / src / java / org / apache / cassandra / cql3 / CustomPayloadMirroringQueryHandler . java b / src / java / org / apache / cassandra / cql3 / CustomPayloadMirroringQueryHandler . java 
 new file mode 100644 
 index 0000000 . . 3930e9c 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cql3 / CustomPayloadMirroringQueryHandler . java 
 @ @ - 0 , 0 + 1 , 74 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . cql3 ; 
 + 
 + import java . util . Map ; 
 + 
 + import org . apache . cassandra . cql3 . statements . BatchStatement ; 
 + import org . apache . cassandra . cql3 . statements . ParsedStatement ; 
 + import org . apache . cassandra . service . QueryState ; 
 + import org . apache . cassandra . transport . messages . ResultMessage ; 
 + import org . apache . cassandra . utils . MD5Digest ; 
 + 
 + / * * 
 + * Custom QueryHandler that sends custom request payloads back with the result . 
 + * Used to facilitate testing . 
 + * Enabled with system property cassandra . custom _ query _ handler _ class . 
 + * / 
 + public class CustomPayloadMirroringQueryHandler implements QueryHandler 
 + { 
 + static QueryProcessor queryProcessor = QueryProcessor . instance ; 
 + 
 + public ResultMessage process ( String query , QueryState state , QueryOptions options , Map < String , byte [ ] > customPayload ) 
 + { 
 + ResultMessage result = queryProcessor . process ( query , state , options , customPayload ) ; 
 + result . setCustomPayload ( customPayload ) ; 
 + return result ; 
 + } 
 + 
 + public ResultMessage . Prepared prepare ( String query , QueryState state , Map < String , byte [ ] > customPayload ) 
 + { 
 + ResultMessage . Prepared prepared = queryProcessor . prepare ( query , state , customPayload ) ; 
 + prepared . setCustomPayload ( customPayload ) ; 
 + return prepared ; 
 + } 
 + 
 + public ParsedStatement . Prepared getPrepared ( MD5Digest id ) 
 + { 
 + return queryProcessor . getPrepared ( id ) ; 
 + } 
 + 
 + public ParsedStatement . Prepared getPreparedForThrift ( Integer id ) 
 + { 
 + return queryProcessor . getPreparedForThrift ( id ) ; 
 + } 
 + 
 + public ResultMessage processPrepared ( CQLStatement statement , QueryState state , QueryOptions options , Map < String , byte [ ] > customPayload ) 
 + { 
 + ResultMessage result = queryProcessor . processPrepared ( statement , state , options , customPayload ) ; 
 + result . setCustomPayload ( customPayload ) ; 
 + return result ; 
 + } 
 + 
 + public ResultMessage processBatch ( BatchStatement statement , QueryState state , BatchQueryOptions options , Map < String , byte [ ] > customPayload ) 
 + { 
 + ResultMessage result = queryProcessor . processBatch ( statement , state , options , customPayload ) ; 
 + result . setCustomPayload ( customPayload ) ; 
 + return result ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / transport / CBUtil . java b / src / java / org / apache / cassandra / transport / CBUtil . java 
 index 73df554 . . 48beea0 100644 
 - - - a / src / java / org / apache / cassandra / transport / CBUtil . java 
 + + + b / src / java / org / apache / cassandra / transport / CBUtil . java 
 @ @ - 46 , 7 + 46 , 7 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; 
 / * * 
 * ByteBuf utility methods . 
 * Note that contrarily to ByteBufferUtil , these method do " read " the 
 - * ByteBuf advancing it ' s ( read ) position . They also write by 
 + * ByteBuf advancing its ( read ) position . They also write by 
 * advancing the write position . Functions are also provided to create 
 * ByteBuf while avoiding copies . 
 * / 
 @ @ - 93 , 7 + 93 , 7 @ @ public abstract class CBUtil 
 } 
 catch ( IndexOutOfBoundsException e ) 
 { 
 - throw new ProtocolException ( " Not enough bytes to read an UTF8 serialized string preceded by it ' s 2 bytes length " ) ; 
 + throw new ProtocolException ( " Not enough bytes to read an UTF8 serialized string preceded by its 2 bytes length " ) ; 
 } 
 } 
 
 @ @ - 141 , 7 + 141 , 7 @ @ public abstract class CBUtil 
 } 
 catch ( IndexOutOfBoundsException e ) 
 { 
 - throw new ProtocolException ( " Not enough bytes to read an UTF8 serialized string preceded by it ' s 4 bytes length " ) ; 
 + throw new ProtocolException ( " Not enough bytes to read an UTF8 serialized string preceded by its 4 bytes length " ) ; 
 } 
 } 
 
 @ @ - 168 , 7 + 168 , 7 @ @ public abstract class CBUtil 
 } 
 catch ( IndexOutOfBoundsException e ) 
 { 
 - throw new ProtocolException ( " Not enough bytes to read a byte array preceded by it ' s 2 bytes length " ) ; 
 + throw new ProtocolException ( " Not enough bytes to read a byte array preceded by its 2 bytes length " ) ; 
 } 
 } 


NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b70c412 . . 9972c7c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 4 , 6 + 4 , 7 @ @ 
 movement ( CASSANDRA - 833 ) 
 * Change CQL version to 3 . 0 . 0 and stop accepting 3 . 0 . 0 - beta1 ( CASSANDRA - 4649 ) 
 * Make prepared statement global instead of per connection ( CASSANDRA - 4449 ) 
 + * Fix scrubbing of CQL3 created tables ( CASSANDRA - 4685 ) 
 
 1 . 2 - beta1 
 * add atomic _ batch _ mutate ( CASSANDRA - 4542 , - 4635 ) 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index f5c2293 . . f15ca00 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 646 , 7 + 646 , 7 @ @ public final class CFMetaData 
 
 public AbstractType < ? > getValueValidator ( ByteBuffer column ) 
 { 
 - return getValueValidator ( column _ metadata . get ( column ) ) ; 
 + return getValueValidator ( getColumnDefinition ( column ) ) ; 
 } 
 
 public AbstractType < ? > getValueValidator ( ColumnDefinition columnDefinition ) 
 @ @ - 932 , 9 + 932 , 24 @ @ public final class CFMetaData 
 return def ; 
 } 
 
 - public ColumnDefinition getColumnDefinition ( ByteBuffer name ) 
 + public ColumnDefinition getColumnDefinition ( ByteBuffer columnName ) 
 { 
 - return column _ metadata . get ( name ) ; 
 + if ( comparator instanceof CompositeType ) 
 + { 
 + CompositeType composite = ( CompositeType ) comparator ; 
 + ByteBuffer [ ] components = composite . split ( columnName ) ; 
 + for ( ColumnDefinition def : column _ metadata . values ( ) ) 
 + { 
 + ByteBuffer toCompare = def . componentIndex = = null ? columnName : components [ def . componentIndex ] ; 
 + if ( def . name . equals ( toCompare ) ) 
 + return def ; 
 + } 
 + return null ; 
 + } 
 + else 
 + { 
 + return column _ metadata . get ( columnName ) ; 
 + } 
 } 
 
 public ColumnDefinition getColumnDefinitionForIndex ( String indexName ) 
 diff - - git a / src / java / org / apache / cassandra / thrift / ThriftValidation . java b / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 index 93b972d . . b1b6c24 100644 
 - - - a / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 + + + b / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 @ @ - 396 , 7 + 396 , 7 @ @ public class ThriftValidation 
 if ( ! column . isSetTimestamp ( ) ) 
 throw new org . apache . cassandra . exceptions . InvalidRequestException ( " Column timestamp is required " ) ; 
 
 - ColumnDefinition columnDef = getColumnDefinition ( metadata , column . name ) ; 
 + ColumnDefinition columnDef = metadata . getColumnDefinition ( column . name ) ; 
 try 
 { 
 AbstractType < ? > validator = metadata . getValueValidator ( columnDef ) ; 
 @ @ - 423 , 26 + 423 , 6 @ @ public class ThriftValidation 
 metadata . ksName ) ) ; 
 } 
 
 - private static ColumnDefinition getColumnDefinition ( CFMetaData metadata , ByteBuffer columnName ) 
 - { 
 - if ( metadata . comparator instanceof CompositeType ) 
 - { 
 - CompositeType composite = ( CompositeType ) metadata . comparator ; 
 - ByteBuffer [ ] components = composite . split ( columnName ) ; 
 - for ( ColumnDefinition def : metadata . getColumn _ metadata ( ) . values ( ) ) 
 - { 
 - ByteBuffer toCompare = def . componentIndex = = null ? columnName : components [ def . componentIndex ] ; 
 - if ( columnName . equals ( toCompare ) ) 
 - return def ; 
 - } 
 - return null ; 
 - } 
 - else 
 - { 
 - return metadata . getColumnDefinition ( columnName ) ; 
 - } 
 - } 
 - 
 / * * 
 * Return , at most , the first 64K of the buffer . This avoids very large column values being 
 * logged in their entirety .
