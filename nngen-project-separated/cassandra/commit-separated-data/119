BLEU SCORE: 0.007022232384920213

TEST MSG: Add a virtual table to expose active client connections
GENERATED MSG: Gossip metadata version and request updates . Patch by Gary Dusbabek , reviewed by Jonthan Ellis . CASSANDRA - 827

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 598eaff . . ce945df 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Add a virtual table to expose active client connections ( CASSANDRA - 14458 ) <nl> * Clean up and refactor client metrics ( CASSANDRA - 14524 ) <nl> * Nodetool import row cache invalidation races with adding sstables to tracker ( CASSANDRA - 14529 ) <nl> * Fix assertions in LWTs after TableMetadata was made immutable ( CASSANDRA - 14356 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / virtual / ClientsTable . java b / src / java / org / apache / cassandra / db / virtual / ClientsTable . java <nl> new file mode 100644 <nl> index 0000000 . . 98d1a28 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / db / virtual / ClientsTable . java <nl> @ @ - 0 , 0 + 1 , 86 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . db . virtual ; <nl> + <nl> + import java . net . InetSocketAddress ; <nl> + <nl> + import org . apache . cassandra . db . marshal . * ; <nl> + import org . apache . cassandra . metrics . ClientMetrics ; <nl> + import org . apache . cassandra . schema . TableMetadata ; <nl> + import org . apache . cassandra . transport . ConnectedClient ; <nl> + <nl> + final class ClientsTable extends AbstractVirtualTable <nl> + { <nl> + private static final String ADDRESS = " address " ; <nl> + private static final String PORT = " port " ; <nl> + private static final String HOSTNAME = " hostname " ; <nl> + private static final String USERNAME = " username " ; <nl> + private static final String CONNECTION _ STAGE = " connection _ stage " ; <nl> + private static final String PROTOCOL _ VERSION = " protocol _ version " ; <nl> + private static final String DRIVER _ NAME = " driver _ name " ; <nl> + private static final String DRIVER _ VERSION = " driver _ version " ; <nl> + private static final String REQUEST _ COUNT = " request _ count " ; <nl> + private static final String SSL _ ENABLED = " ssl _ enabled " ; <nl> + private static final String SSL _ PROTOCOL = " ssl _ protocol " ; <nl> + private static final String SSL _ CIPHER _ SUITE = " ssl _ cipher _ suite " ; <nl> + <nl> + ClientsTable ( String keyspace ) <nl> + { <nl> + super ( TableMetadata . builder ( keyspace , " clients " ) <nl> + . comment ( " currently connected clients " ) <nl> + . kind ( TableMetadata . Kind . VIRTUAL ) <nl> + . addPartitionKeyColumn ( ADDRESS , InetAddressType . instance ) <nl> + . addClusteringColumn ( PORT , Int32Type . instance ) <nl> + . addRegularColumn ( HOSTNAME , UTF8Type . instance ) <nl> + . addRegularColumn ( USERNAME , UTF8Type . instance ) <nl> + . addRegularColumn ( CONNECTION _ STAGE , UTF8Type . instance ) <nl> + . addRegularColumn ( PROTOCOL _ VERSION , Int32Type . instance ) <nl> + . addRegularColumn ( DRIVER _ NAME , UTF8Type . instance ) <nl> + . addRegularColumn ( DRIVER _ VERSION , UTF8Type . instance ) <nl> + . addRegularColumn ( REQUEST _ COUNT , LongType . instance ) <nl> + . addRegularColumn ( SSL _ ENABLED , BooleanType . instance ) <nl> + . addRegularColumn ( SSL _ PROTOCOL , UTF8Type . instance ) <nl> + . addRegularColumn ( SSL _ CIPHER _ SUITE , UTF8Type . instance ) <nl> + . build ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public DataSet data ( ) <nl> + { <nl> + SimpleDataSet result = new SimpleDataSet ( metadata ( ) ) ; <nl> + <nl> + for ( ConnectedClient client : ClientMetrics . instance . allConnectedClients ( ) ) <nl> + { <nl> + InetSocketAddress remoteAddress = client . remoteAddress ( ) ; <nl> + <nl> + result . row ( remoteAddress . getAddress ( ) , remoteAddress . getPort ( ) ) <nl> + . column ( HOSTNAME , remoteAddress . getHostName ( ) ) <nl> + . column ( USERNAME , client . username ( ) . orElse ( null ) ) <nl> + . column ( CONNECTION _ STAGE , client . stage ( ) . toString ( ) . toLowerCase ( ) ) <nl> + . column ( PROTOCOL _ VERSION , client . protocolVersion ( ) ) <nl> + . column ( DRIVER _ NAME , client . driverName ( ) . orElse ( null ) ) <nl> + . column ( DRIVER _ VERSION , client . driverVersion ( ) . orElse ( null ) ) <nl> + . column ( REQUEST _ COUNT , client . requestCount ( ) ) <nl> + . column ( SSL _ ENABLED , client . sslEnabled ( ) ) <nl> + . column ( SSL _ PROTOCOL , client . sslProtocol ( ) . orElse ( null ) ) <nl> + . column ( SSL _ CIPHER _ SUITE , client . sslCipherSuite ( ) . orElse ( null ) ) ; <nl> + } <nl> + <nl> + return result ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / db / virtual / SystemViewsKeyspace . java b / src / java / org / apache / cassandra / db / virtual / SystemViewsKeyspace . java <nl> index 5d33a63 . . 53c01a4 100644 <nl> - - - a / src / java / org / apache / cassandra / db / virtual / SystemViewsKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / virtual / SystemViewsKeyspace . java <nl> @ @ - 27 , 6 + 27 , 6 @ @ public final class SystemViewsKeyspace extends VirtualKeyspace <nl> <nl> private SystemViewsKeyspace ( ) <nl> { <nl> - super ( NAME , ImmutableList . of ( new SSTableTasksTable ( NAME ) ) ) ; <nl> + super ( NAME , ImmutableList . of ( new SSTableTasksTable ( NAME ) , new ClientsTable ( NAME ) ) ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / metrics / ClientMetrics . java b / src / java / org / apache / cassandra / metrics / ClientMetrics . java <nl> index 5e7720a . . a80033a 100644 <nl> - - - a / src / java / org / apache / cassandra / metrics / ClientMetrics . java <nl> + + + b / src / java / org / apache / cassandra / metrics / ClientMetrics . java <nl> @ @ - 54 , 6 + 54 , 16 @ @ public final class ClientMetrics <nl> authFailure . mark ( ) ; <nl> } <nl> <nl> + public List < ConnectedClient > allConnectedClients ( ) <nl> + { <nl> + List < ConnectedClient > clients = new ArrayList < > ( ) ; <nl> + <nl> + for ( Server server : servers ) <nl> + clients . addAll ( server . getConnectedClients ( ) ) ; <nl> + <nl> + return clients ; <nl> + } <nl> + <nl> public synchronized void init ( Collection < Server > servers ) <nl> { <nl> if ( initialized ) <nl> diff - - git a / src / java / org / apache / cassandra / transport / ConnectedClient . java b / src / java / org / apache / cassandra / transport / ConnectedClient . java <nl> index 0776bf8 . . ca100f2 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / ConnectedClient . java <nl> + + + b / src / java / org / apache / cassandra / transport / ConnectedClient . java <nl> @ @ - 93 , 7 + 93 , 7 @ @ public final class ConnectedClient <nl> return Optional . ofNullable ( state ( ) . getRawKeyspace ( ) ) ; <nl> } <nl> <nl> - public boolean isEncrypted ( ) <nl> + public boolean sslEnabled ( ) <nl> { <nl> return null ! = sslHandler ( ) ; <nl> } <nl> @ @ - 136 , 7 + 136 , 7 @ @ public final class ConnectedClient <nl> . put ( DRIVER _ VERSION , driverVersion ( ) . orElse ( UNDEFINED ) ) <nl> . put ( REQUESTS , String . valueOf ( requestCount ( ) ) ) <nl> . put ( KEYSPACE , keyspace ( ) . orElse ( " " ) ) <nl> - . put ( SSL , Boolean . toString ( isEncrypted ( ) ) ) <nl> + . put ( SSL , Boolean . toString ( sslEnabled ( ) ) ) <nl> . put ( CIPHER , sslCipherSuite ( ) . orElse ( UNDEFINED ) ) <nl> . put ( PROTOCOL , sslProtocol ( ) . orElse ( UNDEFINED ) ) <nl> . build ( ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / concurrent / StageManager . java b / src / java / org / apache / cassandra / concurrent / StageManager . java <nl> index b772a09 . . f0436f6 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / StageManager . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / StageManager . java <nl> @ @ - 47 , 6 + 47 , 7 @ @ public class StageManager <nl> public static final String RESPONSE _ STAGE = " RESPONSE - STAGE " ; <nl> public final static String AE _ SERVICE _ STAGE = " AE - SERVICE - STAGE " ; <nl> private static final String LOADBALANCE _ STAGE = " LOAD - BALANCER - STAGE " ; <nl> + public static final String MIGRATION _ STAGE = " MIGRATION - STAGE " ; <nl> <nl> static <nl> { <nl> @ @ - 58 , 6 + 59 , 7 @ @ public class StageManager <nl> stages . put ( GOSSIP _ STAGE , new JMXEnabledThreadPoolExecutor ( " GMFD " ) ) ; <nl> stages . put ( AE _ SERVICE _ STAGE , new JMXEnabledThreadPoolExecutor ( AE _ SERVICE _ STAGE ) ) ; <nl> stages . put ( LOADBALANCE _ STAGE , new JMXEnabledThreadPoolExecutor ( LOADBALANCE _ STAGE ) ) ; <nl> + stages . put ( MIGRATION _ STAGE , new JMXEnabledThreadPoolExecutor ( MIGRATION _ STAGE ) ) ; <nl> } <nl> <nl> private static ThreadPoolExecutor multiThreadedStage ( String name , int numThreads ) <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 618c614 . . 506fe68 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 132 , 7 + 132 , 8 @ @ public class DatabaseDescriptor <nl> <nl> private final static String STORAGE _ CONF _ FILE = " storage - conf . xml " ; <nl> <nl> - private static UUID defsVersion = null ; <nl> + private static final UUID INITIAL _ VERSION = new UUID ( 4096 , 0 ) ; / / has type nibble set to 1 , everything else to zero . <nl> + private static UUID defsVersion = INITIAL _ VERSION ; <nl> <nl> / * * <nl> * Try the storage - config system property , and then inspect the classpath . <nl> diff - - git a / src / java / org / apache / cassandra / db / DefinitionsAnnounceVerbHandler . java b / src / java / org / apache / cassandra / db / DefinitionsAnnounceVerbHandler . java <nl> new file mode 100644 <nl> index 0000000 . . 62619d6 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / db / DefinitionsAnnounceVerbHandler . java <nl> @ @ - 0 , 0 + 1 , 36 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * < p / > <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * < p / > <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . db ; <nl> + <nl> + import org . apache . cassandra . net . IVerbHandler ; <nl> + import org . apache . cassandra . net . Message ; <nl> + import org . apache . cassandra . service . MigrationManager ; <nl> + <nl> + import java . util . UUID ; <nl> + <nl> + public class DefinitionsAnnounceVerbHandler implements IVerbHandler <nl> + { <nl> + <nl> + / * * someone is announcing their schema version . * / <nl> + public void doVerb ( Message message ) <nl> + { <nl> + UUID theirVersion = UUID . fromString ( new String ( message . getMessageBody ( ) ) ) ; <nl> + MigrationManager . rectify ( theirVersion , message . getFrom ( ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / db / DefinitionsUpdateResponseVerbHandler . java b / src / java / org / apache / cassandra / db / DefinitionsUpdateResponseVerbHandler . java <nl> new file mode 100644 <nl> index 0000000 . . edca073 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / db / DefinitionsUpdateResponseVerbHandler . java <nl> @ @ - 0 , 0 + 1 , 81 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * < p / > <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * < p / > <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . db ; <nl> + <nl> + import org . apache . cassandra . concurrent . StageManager ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . db . migration . Migration ; <nl> + import org . apache . cassandra . net . IVerbHandler ; <nl> + import org . apache . cassandra . net . Message ; <nl> + import org . apache . cassandra . service . MigrationManager ; <nl> + import org . apache . cassandra . utils . UUIDGen ; <nl> + import org . apache . cassandra . utils . WrappedRunnable ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import java . io . ByteArrayInputStream ; <nl> + import java . io . IOError ; <nl> + import java . io . IOException ; <nl> + import java . util . Collection ; <nl> + import java . util . UUID ; <nl> + <nl> + public class DefinitionsUpdateResponseVerbHandler implements IVerbHandler <nl> + { <nl> + private static final Logger logger = LoggerFactory . getLogger ( DefinitionsUpdateResponseVerbHandler . class ) ; <nl> + <nl> + / * * someone sent me their data definitions * / <nl> + public void doVerb ( final Message message ) <nl> + { <nl> + try <nl> + { <nl> + / / these are the serialized row mutations that I must apply . <nl> + / / check versions at every step along the way to make sure migrations are not applied out of order . <nl> + Collection < Column > cols = MigrationManager . makeColumns ( message ) ; <nl> + for ( Column col : cols ) <nl> + { <nl> + final UUID version = UUIDGen . makeType1UUID ( col . name ( ) ) ; <nl> + if ( version . timestamp ( ) > DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) ) <nl> + { <nl> + final Migration m = Migration . deserialize ( new ByteArrayInputStream ( col . value ( ) ) ) ; <nl> + assert m . getVersion ( ) . equals ( version ) ; <nl> + StageManager . getStage ( StageManager . MIGRATION _ STAGE ) . submit ( new WrappedRunnable ( ) <nl> + { <nl> + @ Override <nl> + protected void runMayThrow ( ) throws Exception <nl> + { <nl> + / / check to make sure the current version is before this one . <nl> + if ( DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) > = version . timestamp ( ) ) <nl> + logger . debug ( " Not applying " + version . toString ( ) ) ; <nl> + else <nl> + { <nl> + logger . debug ( " Applying { } from { } " , m . getClass ( ) . getSimpleName ( ) , message . getFrom ( ) ) ; <nl> + m . apply ( ) ; <nl> + m . announce ( ) ; <nl> + } <nl> + } <nl> + } ) ; <nl> + } <nl> + } <nl> + } <nl> + catch ( IOException ex ) <nl> + { <nl> + throw new IOError ( ex ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index d459459 . . 52f25b2 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 19 , 7 + 19 , 6 @ @ <nl> package org . apache . cassandra . service ; <nl> <nl> import java . io . IOException ; <nl> - import java . io . IOError ; <nl> import java . lang . management . ManagementFactory ; <nl> import java . lang . reflect . Constructor ; <nl> import java . util . * ; <nl> @ @ - 40 , 9 + 39 , 7 @ @ import org . apache . cassandra . db . commitlog . CommitLog ; <nl> import org . apache . cassandra . dht . * ; <nl> import org . apache . cassandra . gms . * ; <nl> import org . apache . cassandra . io . DeletionService ; <nl> - import org . apache . cassandra . io . sstable . SSTable ; <nl> import org . apache . cassandra . io . sstable . SSTableReader ; <nl> - import org . apache . cassandra . io . sstable . IndexSummary ; <nl> import org . apache . cassandra . locator . * ; <nl> import org . apache . cassandra . net . * ; <nl> import org . apache . cassandra . service . AntiEntropyService . TreeRequestVerbHandler ; <nl> @ @ - 106 , 6 + 103 , 8 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe <nl> GOSSIP _ DIGEST _ SYN , <nl> GOSSIP _ DIGEST _ ACK , <nl> GOSSIP _ DIGEST _ ACK2 , <nl> + DEFINITIONS _ ANNOUNCE , <nl> + DEFINITIONS _ UPDATE _ RESPONSE , <nl> ; <nl> / / remember to add new verbs at the end , since we serialize by ordinal <nl> } <nl> @ @ - 151 , 6 + 150 , 7 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe <nl> private boolean isClientMode ; <nl> private boolean initialized ; <nl> private String operationMode ; <nl> + private MigrationManager migrationManager = new MigrationManager ( ) ; <nl> <nl> public void addBootstrapSource ( InetAddress s , String table ) <nl> { <nl> @ @ - 226 , 14 + 226 , 13 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe <nl> MessagingService . instance . registerVerbHandlers ( Verb . GOSSIP _ DIGEST _ SYN , new Gossiper . GossipDigestSynVerbHandler ( ) ) ; <nl> MessagingService . instance . registerVerbHandlers ( Verb . GOSSIP _ DIGEST _ ACK , new Gossiper . GossipDigestAckVerbHandler ( ) ) ; <nl> MessagingService . instance . registerVerbHandlers ( Verb . GOSSIP _ DIGEST _ ACK2 , new Gossiper . GossipDigestAck2VerbHandler ( ) ) ; <nl> + <nl> + MessagingService . instance . registerVerbHandlers ( Verb . DEFINITIONS _ ANNOUNCE , new DefinitionsAnnounceVerbHandler ( ) ) ; <nl> + MessagingService . instance . registerVerbHandlers ( Verb . DEFINITIONS _ UPDATE _ RESPONSE , new DefinitionsUpdateResponseVerbHandler ( ) ) ; <nl> <nl> replicationStrategies = new HashMap < String , AbstractReplicationStrategy > ( ) ; <nl> for ( String table : DatabaseDescriptor . getNonSystemTables ( ) ) <nl> - { <nl> - AbstractReplicationStrategy strat = getReplicationStrategy ( tokenMetadata _ , table ) ; <nl> - replicationStrategies . put ( table , strat ) ; <nl> - } <nl> - replicationStrategies = Collections . unmodifiableMap ( replicationStrategies ) ; <nl> + initReplicationStrategy ( table ) ; <nl> <nl> / / spin up the streaming serivice so it is available for jmx tools . <nl> if ( StreamingService . instance = = null ) <nl> @ @ - 281 , 6 + 280 , 7 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe <nl> <nl> public void stopClient ( ) <nl> { <nl> + Gossiper . instance . unregister ( migrationManager ) ; <nl> Gossiper . instance . unregister ( this ) ; <nl> Gossiper . instance . stop ( ) ; <nl> MessagingService . shutdown ( ) ; <nl> @ @ - 336 , 6 + 336 , 7 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe <nl> / / for bootstrap to get the load info it needs . <nl> / / ( we won ' t be part of the storage ring though until we add a nodeId to our state , below . ) <nl> Gossiper . instance . register ( this ) ; <nl> + Gossiper . instance . register ( migrationManager ) ; <nl> Gossiper . instance . start ( FBUtilities . getLocalAddress ( ) , storageMetadata _ . getGeneration ( ) ) ; / / needed for node - ring gathering . <nl> <nl> if ( DatabaseDescriptor . isAutoBootstrap ( ) <nl> @ @ - 357 , 7 + 358 , 17 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe <nl> } <nl> setMode ( " Joining : getting bootstrap token " , true ) ; <nl> Token token = BootStrapper . getBootstrapToken ( tokenMetadata _ , StorageLoadBalancer . instance . getLoadInfo ( ) ) ; <nl> - startBootstrap ( token ) ; <nl> + / / don ' t bootstrap if there are no tables defined . <nl> + if ( DatabaseDescriptor . getNonSystemTables ( ) . size ( ) > 0 ) <nl> + startBootstrap ( token ) ; <nl> + else <nl> + { <nl> + isBootstrapMode = false ; <nl> + SystemTable . setBootstrapped ( true ) ; <nl> + tokenMetadata _ . updateNormalToken ( token , FBUtilities . getLocalAddress ( ) ) ; <nl> + Gossiper . instance . addLocalApplicationState ( MOVE _ STATE , new ApplicationState ( STATE _ NORMAL + Delimiter + partitioner _ . getTokenFactory ( ) . toString ( token ) ) ) ; <nl> + setMode ( " Normal " , false ) ; <nl> + } <nl> / / don ' t finish startup ( enabling thrift ) until after bootstrap is done <nl> while ( isBootstrapMode ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> index b0e8758 . . 89e677e 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> @ @ - 530 , 14 + 530 , 12 @ @ public class CassandraServer implements Cassandra . Iface <nl> { <nl> Map < String , Map < String , String > > columnFamiliesMap = new HashMap < String , Map < String , String > > ( ) ; <nl> <nl> - Map < String , CFMetaData > tableMetaData = DatabaseDescriptor . getTableMetaData ( table ) ; <nl> - / / table doesn ' t exist <nl> - if ( tableMetaData = = null ) <nl> - { <nl> + KSMetaData ksm = DatabaseDescriptor . getTableDefinition ( table ) ; <nl> + if ( ksm = = null ) <nl> throw new NotFoundException ( ) ; <nl> - } <nl> + <nl> <nl> - for ( Map . Entry < String , CFMetaData > stringCFMetaDataEntry : tableMetaData . entrySet ( ) ) <nl> + for ( Map . Entry < String , CFMetaData > stringCFMetaDataEntry : ksm . cfMetaData ( ) . entrySet ( ) ) <nl> { <nl> CFMetaData columnFamilyMetaData = stringCFMetaDataEntry . getValue ( ) ; <nl> <nl> @ @ - 679 , 3 + 677 , 4 @ @ public class CassandraServer implements Cassandra . Iface <nl> <nl> / / main method moved to CassandraDaemon <nl> } <nl> + <nl> \ No newline at end of file <nl> diff - - git a / test / conf / storage - conf . xml b / test / conf / storage - conf . xml <nl> index ab84028 . . 23e4035 100644 <nl> - - - a / test / conf / storage - conf . xml <nl> + + + b / test / conf / storage - conf . xml <nl> @ @ - 77 , 7 + 77 , 7 @ @ <nl> < / Keyspace > <nl> < / Keyspaces > <nl> < Seeds > <nl> - < ! - - Add names of hosts that are deemed contact points - - > <nl> - < Seed > 127 . 0 . 0 . 1 < / Seed > <nl> + < ! - - we don ' t want this node to think it is a seed . - - > <nl> + < Seed > 127 . 0 . 0 . 2 < / Seed > <nl> < / Seeds > <nl> < / Storage >

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 598eaff . . ce945df 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Add a virtual table to expose active client connections ( CASSANDRA - 14458 ) 
 * Clean up and refactor client metrics ( CASSANDRA - 14524 ) 
 * Nodetool import row cache invalidation races with adding sstables to tracker ( CASSANDRA - 14529 ) 
 * Fix assertions in LWTs after TableMetadata was made immutable ( CASSANDRA - 14356 ) 
 diff - - git a / src / java / org / apache / cassandra / db / virtual / ClientsTable . java b / src / java / org / apache / cassandra / db / virtual / ClientsTable . java 
 new file mode 100644 
 index 0000000 . . 98d1a28 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / db / virtual / ClientsTable . java 
 @ @ - 0 , 0 + 1 , 86 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . db . virtual ; 
 + 
 + import java . net . InetSocketAddress ; 
 + 
 + import org . apache . cassandra . db . marshal . * ; 
 + import org . apache . cassandra . metrics . ClientMetrics ; 
 + import org . apache . cassandra . schema . TableMetadata ; 
 + import org . apache . cassandra . transport . ConnectedClient ; 
 + 
 + final class ClientsTable extends AbstractVirtualTable 
 + { 
 + private static final String ADDRESS = " address " ; 
 + private static final String PORT = " port " ; 
 + private static final String HOSTNAME = " hostname " ; 
 + private static final String USERNAME = " username " ; 
 + private static final String CONNECTION _ STAGE = " connection _ stage " ; 
 + private static final String PROTOCOL _ VERSION = " protocol _ version " ; 
 + private static final String DRIVER _ NAME = " driver _ name " ; 
 + private static final String DRIVER _ VERSION = " driver _ version " ; 
 + private static final String REQUEST _ COUNT = " request _ count " ; 
 + private static final String SSL _ ENABLED = " ssl _ enabled " ; 
 + private static final String SSL _ PROTOCOL = " ssl _ protocol " ; 
 + private static final String SSL _ CIPHER _ SUITE = " ssl _ cipher _ suite " ; 
 + 
 + ClientsTable ( String keyspace ) 
 + { 
 + super ( TableMetadata . builder ( keyspace , " clients " ) 
 + . comment ( " currently connected clients " ) 
 + . kind ( TableMetadata . Kind . VIRTUAL ) 
 + . addPartitionKeyColumn ( ADDRESS , InetAddressType . instance ) 
 + . addClusteringColumn ( PORT , Int32Type . instance ) 
 + . addRegularColumn ( HOSTNAME , UTF8Type . instance ) 
 + . addRegularColumn ( USERNAME , UTF8Type . instance ) 
 + . addRegularColumn ( CONNECTION _ STAGE , UTF8Type . instance ) 
 + . addRegularColumn ( PROTOCOL _ VERSION , Int32Type . instance ) 
 + . addRegularColumn ( DRIVER _ NAME , UTF8Type . instance ) 
 + . addRegularColumn ( DRIVER _ VERSION , UTF8Type . instance ) 
 + . addRegularColumn ( REQUEST _ COUNT , LongType . instance ) 
 + . addRegularColumn ( SSL _ ENABLED , BooleanType . instance ) 
 + . addRegularColumn ( SSL _ PROTOCOL , UTF8Type . instance ) 
 + . addRegularColumn ( SSL _ CIPHER _ SUITE , UTF8Type . instance ) 
 + . build ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public DataSet data ( ) 
 + { 
 + SimpleDataSet result = new SimpleDataSet ( metadata ( ) ) ; 
 + 
 + for ( ConnectedClient client : ClientMetrics . instance . allConnectedClients ( ) ) 
 + { 
 + InetSocketAddress remoteAddress = client . remoteAddress ( ) ; 
 + 
 + result . row ( remoteAddress . getAddress ( ) , remoteAddress . getPort ( ) ) 
 + . column ( HOSTNAME , remoteAddress . getHostName ( ) ) 
 + . column ( USERNAME , client . username ( ) . orElse ( null ) ) 
 + . column ( CONNECTION _ STAGE , client . stage ( ) . toString ( ) . toLowerCase ( ) ) 
 + . column ( PROTOCOL _ VERSION , client . protocolVersion ( ) ) 
 + . column ( DRIVER _ NAME , client . driverName ( ) . orElse ( null ) ) 
 + . column ( DRIVER _ VERSION , client . driverVersion ( ) . orElse ( null ) ) 
 + . column ( REQUEST _ COUNT , client . requestCount ( ) ) 
 + . column ( SSL _ ENABLED , client . sslEnabled ( ) ) 
 + . column ( SSL _ PROTOCOL , client . sslProtocol ( ) . orElse ( null ) ) 
 + . column ( SSL _ CIPHER _ SUITE , client . sslCipherSuite ( ) . orElse ( null ) ) ; 
 + } 
 + 
 + return result ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / db / virtual / SystemViewsKeyspace . java b / src / java / org / apache / cassandra / db / virtual / SystemViewsKeyspace . java 
 index 5d33a63 . . 53c01a4 100644 
 - - - a / src / java / org / apache / cassandra / db / virtual / SystemViewsKeyspace . java 
 + + + b / src / java / org / apache / cassandra / db / virtual / SystemViewsKeyspace . java 
 @ @ - 27 , 6 + 27 , 6 @ @ public final class SystemViewsKeyspace extends VirtualKeyspace 
 
 private SystemViewsKeyspace ( ) 
 { 
 - super ( NAME , ImmutableList . of ( new SSTableTasksTable ( NAME ) ) ) ; 
 + super ( NAME , ImmutableList . of ( new SSTableTasksTable ( NAME ) , new ClientsTable ( NAME ) ) ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / metrics / ClientMetrics . java b / src / java / org / apache / cassandra / metrics / ClientMetrics . java 
 index 5e7720a . . a80033a 100644 
 - - - a / src / java / org / apache / cassandra / metrics / ClientMetrics . java 
 + + + b / src / java / org / apache / cassandra / metrics / ClientMetrics . java 
 @ @ - 54 , 6 + 54 , 16 @ @ public final class ClientMetrics 
 authFailure . mark ( ) ; 
 } 
 
 + public List < ConnectedClient > allConnectedClients ( ) 
 + { 
 + List < ConnectedClient > clients = new ArrayList < > ( ) ; 
 + 
 + for ( Server server : servers ) 
 + clients . addAll ( server . getConnectedClients ( ) ) ; 
 + 
 + return clients ; 
 + } 
 + 
 public synchronized void init ( Collection < Server > servers ) 
 { 
 if ( initialized ) 
 diff - - git a / src / java / org / apache / cassandra / transport / ConnectedClient . java b / src / java / org / apache / cassandra / transport / ConnectedClient . java 
 index 0776bf8 . . ca100f2 100644 
 - - - a / src / java / org / apache / cassandra / transport / ConnectedClient . java 
 + + + b / src / java / org / apache / cassandra / transport / ConnectedClient . java 
 @ @ - 93 , 7 + 93 , 7 @ @ public final class ConnectedClient 
 return Optional . ofNullable ( state ( ) . getRawKeyspace ( ) ) ; 
 } 
 
 - public boolean isEncrypted ( ) 
 + public boolean sslEnabled ( ) 
 { 
 return null ! = sslHandler ( ) ; 
 } 
 @ @ - 136 , 7 + 136 , 7 @ @ public final class ConnectedClient 
 . put ( DRIVER _ VERSION , driverVersion ( ) . orElse ( UNDEFINED ) ) 
 . put ( REQUESTS , String . valueOf ( requestCount ( ) ) ) 
 . put ( KEYSPACE , keyspace ( ) . orElse ( " " ) ) 
 - . put ( SSL , Boolean . toString ( isEncrypted ( ) ) ) 
 + . put ( SSL , Boolean . toString ( sslEnabled ( ) ) ) 
 . put ( CIPHER , sslCipherSuite ( ) . orElse ( UNDEFINED ) ) 
 . put ( PROTOCOL , sslProtocol ( ) . orElse ( UNDEFINED ) ) 
 . build ( ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / concurrent / StageManager . java b / src / java / org / apache / cassandra / concurrent / StageManager . java 
 index b772a09 . . f0436f6 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / StageManager . java 
 + + + b / src / java / org / apache / cassandra / concurrent / StageManager . java 
 @ @ - 47 , 6 + 47 , 7 @ @ public class StageManager 
 public static final String RESPONSE _ STAGE = " RESPONSE - STAGE " ; 
 public final static String AE _ SERVICE _ STAGE = " AE - SERVICE - STAGE " ; 
 private static final String LOADBALANCE _ STAGE = " LOAD - BALANCER - STAGE " ; 
 + public static final String MIGRATION _ STAGE = " MIGRATION - STAGE " ; 
 
 static 
 { 
 @ @ - 58 , 6 + 59 , 7 @ @ public class StageManager 
 stages . put ( GOSSIP _ STAGE , new JMXEnabledThreadPoolExecutor ( " GMFD " ) ) ; 
 stages . put ( AE _ SERVICE _ STAGE , new JMXEnabledThreadPoolExecutor ( AE _ SERVICE _ STAGE ) ) ; 
 stages . put ( LOADBALANCE _ STAGE , new JMXEnabledThreadPoolExecutor ( LOADBALANCE _ STAGE ) ) ; 
 + stages . put ( MIGRATION _ STAGE , new JMXEnabledThreadPoolExecutor ( MIGRATION _ STAGE ) ) ; 
 } 
 
 private static ThreadPoolExecutor multiThreadedStage ( String name , int numThreads ) 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 618c614 . . 506fe68 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 132 , 7 + 132 , 8 @ @ public class DatabaseDescriptor 
 
 private final static String STORAGE _ CONF _ FILE = " storage - conf . xml " ; 
 
 - private static UUID defsVersion = null ; 
 + private static final UUID INITIAL _ VERSION = new UUID ( 4096 , 0 ) ; / / has type nibble set to 1 , everything else to zero . 
 + private static UUID defsVersion = INITIAL _ VERSION ; 
 
 / * * 
 * Try the storage - config system property , and then inspect the classpath . 
 diff - - git a / src / java / org / apache / cassandra / db / DefinitionsAnnounceVerbHandler . java b / src / java / org / apache / cassandra / db / DefinitionsAnnounceVerbHandler . java 
 new file mode 100644 
 index 0000000 . . 62619d6 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / db / DefinitionsAnnounceVerbHandler . java 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * < p / > 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * < p / > 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . db ; 
 + 
 + import org . apache . cassandra . net . IVerbHandler ; 
 + import org . apache . cassandra . net . Message ; 
 + import org . apache . cassandra . service . MigrationManager ; 
 + 
 + import java . util . UUID ; 
 + 
 + public class DefinitionsAnnounceVerbHandler implements IVerbHandler 
 + { 
 + 
 + / * * someone is announcing their schema version . * / 
 + public void doVerb ( Message message ) 
 + { 
 + UUID theirVersion = UUID . fromString ( new String ( message . getMessageBody ( ) ) ) ; 
 + MigrationManager . rectify ( theirVersion , message . getFrom ( ) ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / db / DefinitionsUpdateResponseVerbHandler . java b / src / java / org / apache / cassandra / db / DefinitionsUpdateResponseVerbHandler . java 
 new file mode 100644 
 index 0000000 . . edca073 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / db / DefinitionsUpdateResponseVerbHandler . java 
 @ @ - 0 , 0 + 1 , 81 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * < p / > 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * < p / > 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . db ; 
 + 
 + import org . apache . cassandra . concurrent . StageManager ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . db . migration . Migration ; 
 + import org . apache . cassandra . net . IVerbHandler ; 
 + import org . apache . cassandra . net . Message ; 
 + import org . apache . cassandra . service . MigrationManager ; 
 + import org . apache . cassandra . utils . UUIDGen ; 
 + import org . apache . cassandra . utils . WrappedRunnable ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + import java . io . ByteArrayInputStream ; 
 + import java . io . IOError ; 
 + import java . io . IOException ; 
 + import java . util . Collection ; 
 + import java . util . UUID ; 
 + 
 + public class DefinitionsUpdateResponseVerbHandler implements IVerbHandler 
 + { 
 + private static final Logger logger = LoggerFactory . getLogger ( DefinitionsUpdateResponseVerbHandler . class ) ; 
 + 
 + / * * someone sent me their data definitions * / 
 + public void doVerb ( final Message message ) 
 + { 
 + try 
 + { 
 + / / these are the serialized row mutations that I must apply . 
 + / / check versions at every step along the way to make sure migrations are not applied out of order . 
 + Collection < Column > cols = MigrationManager . makeColumns ( message ) ; 
 + for ( Column col : cols ) 
 + { 
 + final UUID version = UUIDGen . makeType1UUID ( col . name ( ) ) ; 
 + if ( version . timestamp ( ) > DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) ) 
 + { 
 + final Migration m = Migration . deserialize ( new ByteArrayInputStream ( col . value ( ) ) ) ; 
 + assert m . getVersion ( ) . equals ( version ) ; 
 + StageManager . getStage ( StageManager . MIGRATION _ STAGE ) . submit ( new WrappedRunnable ( ) 
 + { 
 + @ Override 
 + protected void runMayThrow ( ) throws Exception 
 + { 
 + / / check to make sure the current version is before this one . 
 + if ( DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) > = version . timestamp ( ) ) 
 + logger . debug ( " Not applying " + version . toString ( ) ) ; 
 + else 
 + { 
 + logger . debug ( " Applying { } from { } " , m . getClass ( ) . getSimpleName ( ) , message . getFrom ( ) ) ; 
 + m . apply ( ) ; 
 + m . announce ( ) ; 
 + } 
 + } 
 + } ) ; 
 + } 
 + } 
 + } 
 + catch ( IOException ex ) 
 + { 
 + throw new IOError ( ex ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index d459459 . . 52f25b2 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 19 , 7 + 19 , 6 @ @ 
 package org . apache . cassandra . service ; 
 
 import java . io . IOException ; 
 - import java . io . IOError ; 
 import java . lang . management . ManagementFactory ; 
 import java . lang . reflect . Constructor ; 
 import java . util . * ; 
 @ @ - 40 , 9 + 39 , 7 @ @ import org . apache . cassandra . db . commitlog . CommitLog ; 
 import org . apache . cassandra . dht . * ; 
 import org . apache . cassandra . gms . * ; 
 import org . apache . cassandra . io . DeletionService ; 
 - import org . apache . cassandra . io . sstable . SSTable ; 
 import org . apache . cassandra . io . sstable . SSTableReader ; 
 - import org . apache . cassandra . io . sstable . IndexSummary ; 
 import org . apache . cassandra . locator . * ; 
 import org . apache . cassandra . net . * ; 
 import org . apache . cassandra . service . AntiEntropyService . TreeRequestVerbHandler ; 
 @ @ - 106 , 6 + 103 , 8 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe 
 GOSSIP _ DIGEST _ SYN , 
 GOSSIP _ DIGEST _ ACK , 
 GOSSIP _ DIGEST _ ACK2 , 
 + DEFINITIONS _ ANNOUNCE , 
 + DEFINITIONS _ UPDATE _ RESPONSE , 
 ; 
 / / remember to add new verbs at the end , since we serialize by ordinal 
 } 
 @ @ - 151 , 6 + 150 , 7 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe 
 private boolean isClientMode ; 
 private boolean initialized ; 
 private String operationMode ; 
 + private MigrationManager migrationManager = new MigrationManager ( ) ; 
 
 public void addBootstrapSource ( InetAddress s , String table ) 
 { 
 @ @ - 226 , 14 + 226 , 13 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe 
 MessagingService . instance . registerVerbHandlers ( Verb . GOSSIP _ DIGEST _ SYN , new Gossiper . GossipDigestSynVerbHandler ( ) ) ; 
 MessagingService . instance . registerVerbHandlers ( Verb . GOSSIP _ DIGEST _ ACK , new Gossiper . GossipDigestAckVerbHandler ( ) ) ; 
 MessagingService . instance . registerVerbHandlers ( Verb . GOSSIP _ DIGEST _ ACK2 , new Gossiper . GossipDigestAck2VerbHandler ( ) ) ; 
 + 
 + MessagingService . instance . registerVerbHandlers ( Verb . DEFINITIONS _ ANNOUNCE , new DefinitionsAnnounceVerbHandler ( ) ) ; 
 + MessagingService . instance . registerVerbHandlers ( Verb . DEFINITIONS _ UPDATE _ RESPONSE , new DefinitionsUpdateResponseVerbHandler ( ) ) ; 
 
 replicationStrategies = new HashMap < String , AbstractReplicationStrategy > ( ) ; 
 for ( String table : DatabaseDescriptor . getNonSystemTables ( ) ) 
 - { 
 - AbstractReplicationStrategy strat = getReplicationStrategy ( tokenMetadata _ , table ) ; 
 - replicationStrategies . put ( table , strat ) ; 
 - } 
 - replicationStrategies = Collections . unmodifiableMap ( replicationStrategies ) ; 
 + initReplicationStrategy ( table ) ; 
 
 / / spin up the streaming serivice so it is available for jmx tools . 
 if ( StreamingService . instance = = null ) 
 @ @ - 281 , 6 + 280 , 7 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe 
 
 public void stopClient ( ) 
 { 
 + Gossiper . instance . unregister ( migrationManager ) ; 
 Gossiper . instance . unregister ( this ) ; 
 Gossiper . instance . stop ( ) ; 
 MessagingService . shutdown ( ) ; 
 @ @ - 336 , 6 + 336 , 7 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe 
 / / for bootstrap to get the load info it needs . 
 / / ( we won ' t be part of the storage ring though until we add a nodeId to our state , below . ) 
 Gossiper . instance . register ( this ) ; 
 + Gossiper . instance . register ( migrationManager ) ; 
 Gossiper . instance . start ( FBUtilities . getLocalAddress ( ) , storageMetadata _ . getGeneration ( ) ) ; / / needed for node - ring gathering . 
 
 if ( DatabaseDescriptor . isAutoBootstrap ( ) 
 @ @ - 357 , 7 + 358 , 17 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe 
 } 
 setMode ( " Joining : getting bootstrap token " , true ) ; 
 Token token = BootStrapper . getBootstrapToken ( tokenMetadata _ , StorageLoadBalancer . instance . getLoadInfo ( ) ) ; 
 - startBootstrap ( token ) ; 
 + / / don ' t bootstrap if there are no tables defined . 
 + if ( DatabaseDescriptor . getNonSystemTables ( ) . size ( ) > 0 ) 
 + startBootstrap ( token ) ; 
 + else 
 + { 
 + isBootstrapMode = false ; 
 + SystemTable . setBootstrapped ( true ) ; 
 + tokenMetadata _ . updateNormalToken ( token , FBUtilities . getLocalAddress ( ) ) ; 
 + Gossiper . instance . addLocalApplicationState ( MOVE _ STATE , new ApplicationState ( STATE _ NORMAL + Delimiter + partitioner _ . getTokenFactory ( ) . toString ( token ) ) ) ; 
 + setMode ( " Normal " , false ) ; 
 + } 
 / / don ' t finish startup ( enabling thrift ) until after bootstrap is done 
 while ( isBootstrapMode ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 index b0e8758 . . 89e677e 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 @ @ - 530 , 14 + 530 , 12 @ @ public class CassandraServer implements Cassandra . Iface 
 { 
 Map < String , Map < String , String > > columnFamiliesMap = new HashMap < String , Map < String , String > > ( ) ; 
 
 - Map < String , CFMetaData > tableMetaData = DatabaseDescriptor . getTableMetaData ( table ) ; 
 - / / table doesn ' t exist 
 - if ( tableMetaData = = null ) 
 - { 
 + KSMetaData ksm = DatabaseDescriptor . getTableDefinition ( table ) ; 
 + if ( ksm = = null ) 
 throw new NotFoundException ( ) ; 
 - } 
 + 
 
 - for ( Map . Entry < String , CFMetaData > stringCFMetaDataEntry : tableMetaData . entrySet ( ) ) 
 + for ( Map . Entry < String , CFMetaData > stringCFMetaDataEntry : ksm . cfMetaData ( ) . entrySet ( ) ) 
 { 
 CFMetaData columnFamilyMetaData = stringCFMetaDataEntry . getValue ( ) ; 
 
 @ @ - 679 , 3 + 677 , 4 @ @ public class CassandraServer implements Cassandra . Iface 
 
 / / main method moved to CassandraDaemon 
 } 
 + 
 \ No newline at end of file 
 diff - - git a / test / conf / storage - conf . xml b / test / conf / storage - conf . xml 
 index ab84028 . . 23e4035 100644 
 - - - a / test / conf / storage - conf . xml 
 + + + b / test / conf / storage - conf . xml 
 @ @ - 77 , 7 + 77 , 7 @ @ 
 < / Keyspace > 
 < / Keyspaces > 
 < Seeds > 
 - < ! - - Add names of hosts that are deemed contact points - - > 
 - < Seed > 127 . 0 . 0 . 1 < / Seed > 
 + < ! - - we don ' t want this node to think it is a seed . - - > 
 + < Seed > 127 . 0 . 0 . 2 < / Seed > 
 < / Seeds > 
 < / Storage >
