BLEU SCORE: 0.040583489434387374

TEST MSG: Select optimal CRC32 implementation at runtime
GENERATED MSG: merge from 0 . 6

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 46f842b . . 4906a38 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 55 , 7 + 55 , 7 @ @ <nl> * Fix race condition during calculation of pending ranges ( CASSANDRA - 7390 ) <nl> * Fail on very large batch sizes ( CASSANDRA - 8011 ) <nl> * Improve concurrency of repair ( CASSANDRA - 6455 , 8208 ) <nl> - <nl> + * Select optimal CRC32 implementation at runtime ( CASSANDRA - 8614 ) <nl> <nl> 2 . 1 . 4 <nl> * Fix CommitLog . forceRecycleAllSegments ( ) memory access error ( CASSANDRA - 8812 ) <nl> diff - - git a / build . xml b / build . xml <nl> index 6461694 . . a3e524b 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 34 , 6 + 34 , 7 @ @ <nl> < property name = " basedir " value = " . " / > <nl> < property name = " build . src " value = " $ { basedir } / src " / > <nl> < property name = " build . src . java " value = " $ { basedir } / src / java " / > <nl> + < property name = " build . src . jdkoverride " value = " $ { basedir } / src / jdkoverride " / > <nl> < property name = " build . src . resources " value = " $ { basedir } / src / resources " / > <nl> < property name = " build . src . gen - java " value = " $ { basedir } / src / gen - java " / > <nl> < property name = " build . lib " value = " $ { basedir } / lib " / > <nl> diff - - git a / src / java / org / apache / cassandra / utils / CRC32Factory . java b / src / java / org / apache / cassandra / utils / CRC32Factory . java <nl> new file mode 100644 <nl> index 0000000 . . 85b9890 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / utils / CRC32Factory . java <nl> @ @ - 0 , 0 + 1 , 104 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . utils ; <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + import java . security . AccessController ; <nl> + import java . security . PrivilegedAction ; <nl> + import java . util . concurrent . BlockingQueue ; <nl> + import java . util . zip . CRC32 ; <nl> + <nl> + import org . apache . cassandra . utils . PureJavaCrc32 ; <nl> + <nl> + public class CRC32Factory <nl> + { <nl> + private static final boolean JDK8 ; <nl> + static { <nl> + boolean jdk8 = false ; <nl> + ClassLoader cl = null ; <nl> + try <nl> + { <nl> + if ( System . getSecurityManager ( ) = = null ) <nl> + { <nl> + cl = BlockingQueue . class . getClassLoader ( ) ; <nl> + } <nl> + else <nl> + { <nl> + cl = AccessController . doPrivileged ( new PrivilegedAction < ClassLoader > ( ) <nl> + { <nl> + @ Override <nl> + public ClassLoader run ( ) <nl> + { <nl> + return BlockingQueue . class . getClassLoader ( ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + Class . forName ( " java . util . concurrent . CompletableFuture " , false , cl ) ; <nl> + <nl> + jdk8 = true ; <nl> + } <nl> + catch ( Exception e ) <nl> + { } <nl> + JDK8 = jdk8 ; <nl> + } <nl> + <nl> + public static class CRC32Ex extends CRC32 implements ICRC32 { <nl> + <nl> + @ Override <nl> + public void update ( ByteBuffer b , int offset , int length ) <nl> + { <nl> + final int oldPosition = b . position ( ) ; <nl> + final int oldLimit = b . limit ( ) ; <nl> + try <nl> + { <nl> + b . limit ( offset + length ) ; <nl> + b . position ( offset ) ; <nl> + update ( b ) ; <nl> + } <nl> + finally <nl> + { <nl> + b . position ( oldPosition ) ; <nl> + b . limit ( oldLimit ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void updateInt ( int v ) <nl> + { <nl> + update ( ( v > > > 24 ) & 0xFF ) ; <nl> + update ( ( v > > > 16 ) & 0xFF ) ; <nl> + update ( ( v > > > 8 ) & 0xFF ) ; <nl> + update ( ( v > > > 0 ) & 0xFF ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getCrc ( ) <nl> + { <nl> + return ( int ) getValue ( ) ; <nl> + } <nl> + } <nl> + <nl> + public static ICRC32 create ( ) <nl> + { <nl> + if ( JDK8 ) <nl> + return new CRC32Ex ( ) ; <nl> + else <nl> + return new PureJavaCrc32 ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / utils / ICRC32 . java b / src / java / org / apache / cassandra / utils / ICRC32 . java <nl> new file mode 100644 <nl> index 0000000 . . 3f08ade <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / utils / ICRC32 . java <nl> @ @ - 0 , 0 + 1 , 28 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . utils ; <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . zip . Checksum ; <nl> + <nl> + public interface ICRC32 extends Checksum <nl> + { <nl> + void update ( ByteBuffer b , int offset , int length ) ; <nl> + void updateInt ( int v ) ; <nl> + int getCrc ( ) ; <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / utils / PureJavaCrc32 . java b / src / java / org / apache / cassandra / utils / PureJavaCrc32 . java <nl> index 9a1ac02 . . bbf8eda 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / PureJavaCrc32 . java <nl> + + + b / src / java / org / apache / cassandra / utils / PureJavaCrc32 . java <nl> @ @ - 34 , 7 + 34 , 7 @ @ import java . util . zip . Checksum ; <nl> * This class is copied from hadoop - commons project and retains that formatting . <nl> * ( The initial patch added PureJavaCrc32 was HADOOP - 6148 ) <nl> * / <nl> - public class PureJavaCrc32 implements Checksum { <nl> + public class PureJavaCrc32 implements ICRC32 { <nl> <nl> / * * the current CRC value , bit - flipped * / <nl> private int crc ; <nl> diff - - git a / src / jdkoverride / java / util / zip / CRC32 . java b / src / jdkoverride / java / util / zip / CRC32 . java <nl> new file mode 100644 <nl> index 0000000 . . 93e1e6f <nl> - - - / dev / null <nl> + + + b / src / jdkoverride / java / util / zip / CRC32 . java <nl> @ @ - 0 , 0 + 1 , 42 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package java . util . zip ; <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + <nl> + / * * <nl> + * A fake implementation of java . util . zip . CRC32 with the additonal JDK 8 methods so <nl> + * that when compiling using Java 7 we can link against those new methods and then <nl> + * avoid calling them at runtime if running with Java 7 . <nl> + * / <nl> + public class CRC32 implements Checksum <nl> + { <nl> + public CRC32 ( ) { } <nl> + <nl> + public void update ( int b ) { } <nl> + <nl> + public void update ( byte [ ] b , int off , int len ) { } <nl> + <nl> + public void update ( byte [ ] b ) { } <nl> + <nl> + public void update ( ByteBuffer buffer ) { } <nl> + <nl> + public void reset ( ) { } <nl> + <nl> + public long getValue ( ) { return 0L ; } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / utils / CRC32FactoryTest . java b / test / unit / org / apache / cassandra / utils / CRC32FactoryTest . java <nl> new file mode 100644 <nl> index 0000000 . . a55fbf0 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / utils / CRC32FactoryTest . java <nl> @ @ - 0 , 0 + 1 , 120 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * <nl> + * / <nl> + package org . apache . cassandra . utils ; <nl> + <nl> + import org . apache . cassandra . utils . CRC32Factory . CRC32Ex ; <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . Random ; <nl> + <nl> + import static org . junit . Assert . * ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + public class CRC32FactoryTest <nl> + { <nl> + <nl> + @ Test <nl> + public void updateInt ( ) <nl> + { <nl> + ICRC32 crcA = new CRC32Ex ( ) ; <nl> + PureJavaCrc32 crcB = new PureJavaCrc32 ( ) ; <nl> + <nl> + crcA . updateInt ( 42 ) ; <nl> + crcB . updateInt ( 42 ) ; <nl> + <nl> + assertEquals ( crcA . getCrc ( ) , crcB . getCrc ( ) ) ; <nl> + assertEquals ( crcA . getValue ( ) , crcB . getValue ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testFuzzz ( ) <nl> + { <nl> + for ( int ii = 0 ; ii < 100 ; ii + + ) <nl> + { <nl> + testOnce ( ) ; <nl> + } <nl> + } <nl> + <nl> + private void testOnce ( ) <nl> + { <nl> + final long seed = System . nanoTime ( ) ; <nl> + System . out . println ( " Seed is " + seed ) ; <nl> + Random r = new java . util . Random ( seed ) ; <nl> + <nl> + ByteBuffer source = null ; <nl> + int nextSize = r . nextDouble ( ) < . 9 ? r . nextInt ( 1024 * 1024 ) : r . nextInt ( 16 ) ; <nl> + <nl> + if ( r . nextDouble ( ) > . 5 ) <nl> + { <nl> + source = ByteBuffer . allocate ( nextSize ) ; <nl> + r . nextBytes ( source . array ( ) ) ; <nl> + } <nl> + else <nl> + { <nl> + source = ByteBuffer . allocateDirect ( nextSize ) ; <nl> + while ( source . hasRemaining ( ) ) <nl> + { <nl> + source . put ( ( byte ) ( r . nextInt ( ) % 127 ) ) ; <nl> + } <nl> + source . clear ( ) ; <nl> + } <nl> + <nl> + ICRC32 crcA = new CRC32Ex ( ) ; <nl> + PureJavaCrc32 crcB = new PureJavaCrc32 ( ) ; <nl> + if ( source . hasArray ( ) ) <nl> + { <nl> + if ( r . nextDouble ( ) > 0 . 5 ) <nl> + { <nl> + crcA . update ( source . array ( ) , 0 , source . remaining ( ) ) ; <nl> + crcB . update ( source . array ( ) , 0 , source . remaining ( ) ) ; <nl> + } <nl> + else <nl> + { <nl> + crcA . update ( source , 0 , source . remaining ( ) ) ; <nl> + assertEquals ( 0 , source . position ( ) ) ; <nl> + assertEquals ( source . capacity ( ) , source . limit ( ) ) ; <nl> + crcB . update ( source , 0 , source . remaining ( ) ) ; <nl> + assertEquals ( 0 , source . position ( ) ) ; <nl> + assertEquals ( source . capacity ( ) , source . limit ( ) ) ; <nl> + } <nl> + } <nl> + else <nl> + { <nl> + crcA . update ( source , 0 , source . remaining ( ) ) ; <nl> + assertEquals ( 0 , source . position ( ) ) ; <nl> + assertEquals ( source . capacity ( ) , source . limit ( ) ) ; <nl> + crcB . update ( source , 0 , source . remaining ( ) ) ; <nl> + assertEquals ( 0 , source . position ( ) ) ; <nl> + assertEquals ( source . capacity ( ) , source . limit ( ) ) ; <nl> + } <nl> + assertEquals ( crcA . getCrc ( ) , crcB . getCrc ( ) ) ; <nl> + assertEquals ( crcA . getValue ( ) , crcB . getValue ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void jdkDetection ( ) <nl> + { <nl> + if ( System . getProperty ( " java . version " ) . startsWith ( " 1 . 7 " ) ) <nl> + assertFalse ( CRC32Factory . create ( ) instanceof CRC32Factory . CRC32Ex ) ; <nl> + else <nl> + assertTrue ( CRC32Factory . create ( ) instanceof CRC32Factory . CRC32Ex ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 8d9e2ea . . c97b17f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 7 + 1 , 10 @ @ <nl> dev <nl> * sstable versioning ( CASSANDRA - 389 ) <nl> <nl> - 0 . 6 . 0 - dev <nl> + 0 . 6 . 0 - RC1 <nl> + * fix compaction bucketing bug ( CASSANDRA - 814 ) <nl> + <nl> + 0 . 6 . 0 - beta1 / beta2 <nl> * add batch _ mutate thrift command , deprecating batch _ insert ( CASSANDRA - 336 ) <nl> * remove get _ key _ range Thrift API , deprecated in 0 . 5 ( CASSANDRA - 710 ) <nl> * add optional login ( ) Thrift call for authentication ( CASSANDRA - 547 ) <nl> @ @ - 42 , 7 + 45 , 9 @ @ dev <nl> * allow larger numbers of keys ( > 140M ) in a sstable bloom filter <nl> ( CASSANDRA - 790 ) <nl> * include jvm argument improvements from CASSANDRA - 504 in debian package <nl> - * change streaming chunk size to 32MB ( was 64MB ) ( CASSANDRA - 795 ) <nl> + * change streaming chunk size to 32MB to accomodate Windows XP limitations <nl> + ( was 64MB ) ( CASSANDRA - 795 ) <nl> + * fix get _ range _ slice returning results in the wrong order ( CASSANDRA - 781 ) <nl> <nl> <nl> 0 . 5 . 0 final <nl> diff - - git a / build . xml b / build . xml <nl> index ea79876 . . 54ef12d 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 314 , 6 + 314 , 7 @ @ <nl> < include name = " * * " / > <nl> < exclude name = " build / * * " / > <nl> < exclude name = " src / gen - java / * * " / > <nl> + < exclude name = " interface / avro / * * " / > <nl> < / tarfileset > <nl> < / tar > <nl> < / target > <nl> diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> index fbd5ebb . . 1b5b6b1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return 0 ; <nl> } <nl> logger . debug ( " Checking to see if compaction of " + cfs . columnFamily _ + " would be useful " ) ; <nl> - Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> + Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> updateEstimateFor ( cfs , buckets ) ; <nl> <nl> for ( List < SSTableReader > sstables : buckets ) <nl> @ @ - 441 , 7 + 441 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> / * <nl> * Group files of similar size into buckets . <nl> * / <nl> - static Set < List < SSTableReader > > getCompactionBuckets ( Iterable < SSTableReader > files , long min ) <nl> + static Set < List < SSTableReader > > getBuckets ( Iterable < SSTableReader > files , long min ) <nl> { <nl> Map < List < SSTableReader > , Long > buckets = new HashMap < List < SSTableReader > , Long > ( ) ; <nl> for ( SSTableReader sstable : files ) <nl> @ @ - 461 , 7 + 461 , 8 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> / / remove and re - add because adding changes the hash <nl> buckets . remove ( bucket ) ; <nl> - averageSize = ( averageSize + size ) / 2 ; <nl> + long totalSize = bucket . size ( ) * averageSize ; <nl> + averageSize = ( totalSize + size ) / ( bucket . size ( ) + 1 ) ; <nl> bucket . add ( sstable ) ; <nl> buckets . put ( bucket , averageSize ) ; <nl> bFound = true ; <nl> @ @ - 538 , 7 + 539 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> public void run ( ) <nl> { <nl> logger . debug ( " Estimating compactions for " + cfs . columnFamily _ ) ; <nl> - final Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> + final Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> updateEstimateFor ( cfs , buckets ) ; <nl> } <nl> } ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 46f842b . . 4906a38 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 55 , 7 + 55 , 7 @ @ 
 * Fix race condition during calculation of pending ranges ( CASSANDRA - 7390 ) 
 * Fail on very large batch sizes ( CASSANDRA - 8011 ) 
 * Improve concurrency of repair ( CASSANDRA - 6455 , 8208 ) 
 - 
 + * Select optimal CRC32 implementation at runtime ( CASSANDRA - 8614 ) 
 
 2 . 1 . 4 
 * Fix CommitLog . forceRecycleAllSegments ( ) memory access error ( CASSANDRA - 8812 ) 
 diff - - git a / build . xml b / build . xml 
 index 6461694 . . a3e524b 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 34 , 6 + 34 , 7 @ @ 
 < property name = " basedir " value = " . " / > 
 < property name = " build . src " value = " $ { basedir } / src " / > 
 < property name = " build . src . java " value = " $ { basedir } / src / java " / > 
 + < property name = " build . src . jdkoverride " value = " $ { basedir } / src / jdkoverride " / > 
 < property name = " build . src . resources " value = " $ { basedir } / src / resources " / > 
 < property name = " build . src . gen - java " value = " $ { basedir } / src / gen - java " / > 
 < property name = " build . lib " value = " $ { basedir } / lib " / > 
 diff - - git a / src / java / org / apache / cassandra / utils / CRC32Factory . java b / src / java / org / apache / cassandra / utils / CRC32Factory . java 
 new file mode 100644 
 index 0000000 . . 85b9890 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / utils / CRC32Factory . java 
 @ @ - 0 , 0 + 1 , 104 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . utils ; 
 + 
 + import java . nio . ByteBuffer ; 
 + import java . security . AccessController ; 
 + import java . security . PrivilegedAction ; 
 + import java . util . concurrent . BlockingQueue ; 
 + import java . util . zip . CRC32 ; 
 + 
 + import org . apache . cassandra . utils . PureJavaCrc32 ; 
 + 
 + public class CRC32Factory 
 + { 
 + private static final boolean JDK8 ; 
 + static { 
 + boolean jdk8 = false ; 
 + ClassLoader cl = null ; 
 + try 
 + { 
 + if ( System . getSecurityManager ( ) = = null ) 
 + { 
 + cl = BlockingQueue . class . getClassLoader ( ) ; 
 + } 
 + else 
 + { 
 + cl = AccessController . doPrivileged ( new PrivilegedAction < ClassLoader > ( ) 
 + { 
 + @ Override 
 + public ClassLoader run ( ) 
 + { 
 + return BlockingQueue . class . getClassLoader ( ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + Class . forName ( " java . util . concurrent . CompletableFuture " , false , cl ) ; 
 + 
 + jdk8 = true ; 
 + } 
 + catch ( Exception e ) 
 + { } 
 + JDK8 = jdk8 ; 
 + } 
 + 
 + public static class CRC32Ex extends CRC32 implements ICRC32 { 
 + 
 + @ Override 
 + public void update ( ByteBuffer b , int offset , int length ) 
 + { 
 + final int oldPosition = b . position ( ) ; 
 + final int oldLimit = b . limit ( ) ; 
 + try 
 + { 
 + b . limit ( offset + length ) ; 
 + b . position ( offset ) ; 
 + update ( b ) ; 
 + } 
 + finally 
 + { 
 + b . position ( oldPosition ) ; 
 + b . limit ( oldLimit ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void updateInt ( int v ) 
 + { 
 + update ( ( v > > > 24 ) & 0xFF ) ; 
 + update ( ( v > > > 16 ) & 0xFF ) ; 
 + update ( ( v > > > 8 ) & 0xFF ) ; 
 + update ( ( v > > > 0 ) & 0xFF ) ; 
 + } 
 + 
 + @ Override 
 + public int getCrc ( ) 
 + { 
 + return ( int ) getValue ( ) ; 
 + } 
 + } 
 + 
 + public static ICRC32 create ( ) 
 + { 
 + if ( JDK8 ) 
 + return new CRC32Ex ( ) ; 
 + else 
 + return new PureJavaCrc32 ( ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / utils / ICRC32 . java b / src / java / org / apache / cassandra / utils / ICRC32 . java 
 new file mode 100644 
 index 0000000 . . 3f08ade 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / utils / ICRC32 . java 
 @ @ - 0 , 0 + 1 , 28 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . utils ; 
 + 
 + import java . nio . ByteBuffer ; 
 + import java . util . zip . Checksum ; 
 + 
 + public interface ICRC32 extends Checksum 
 + { 
 + void update ( ByteBuffer b , int offset , int length ) ; 
 + void updateInt ( int v ) ; 
 + int getCrc ( ) ; 
 + } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / utils / PureJavaCrc32 . java b / src / java / org / apache / cassandra / utils / PureJavaCrc32 . java 
 index 9a1ac02 . . bbf8eda 100644 
 - - - a / src / java / org / apache / cassandra / utils / PureJavaCrc32 . java 
 + + + b / src / java / org / apache / cassandra / utils / PureJavaCrc32 . java 
 @ @ - 34 , 7 + 34 , 7 @ @ import java . util . zip . Checksum ; 
 * This class is copied from hadoop - commons project and retains that formatting . 
 * ( The initial patch added PureJavaCrc32 was HADOOP - 6148 ) 
 * / 
 - public class PureJavaCrc32 implements Checksum { 
 + public class PureJavaCrc32 implements ICRC32 { 
 
 / * * the current CRC value , bit - flipped * / 
 private int crc ; 
 diff - - git a / src / jdkoverride / java / util / zip / CRC32 . java b / src / jdkoverride / java / util / zip / CRC32 . java 
 new file mode 100644 
 index 0000000 . . 93e1e6f 
 - - - / dev / null 
 + + + b / src / jdkoverride / java / util / zip / CRC32 . java 
 @ @ - 0 , 0 + 1 , 42 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package java . util . zip ; 
 + 
 + import java . nio . ByteBuffer ; 
 + 
 + / * * 
 + * A fake implementation of java . util . zip . CRC32 with the additonal JDK 8 methods so 
 + * that when compiling using Java 7 we can link against those new methods and then 
 + * avoid calling them at runtime if running with Java 7 . 
 + * / 
 + public class CRC32 implements Checksum 
 + { 
 + public CRC32 ( ) { } 
 + 
 + public void update ( int b ) { } 
 + 
 + public void update ( byte [ ] b , int off , int len ) { } 
 + 
 + public void update ( byte [ ] b ) { } 
 + 
 + public void update ( ByteBuffer buffer ) { } 
 + 
 + public void reset ( ) { } 
 + 
 + public long getValue ( ) { return 0L ; } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / utils / CRC32FactoryTest . java b / test / unit / org / apache / cassandra / utils / CRC32FactoryTest . java 
 new file mode 100644 
 index 0000000 . . a55fbf0 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / utils / CRC32FactoryTest . java 
 @ @ - 0 , 0 + 1 , 120 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * 
 + * / 
 + package org . apache . cassandra . utils ; 
 + 
 + import org . apache . cassandra . utils . CRC32Factory . CRC32Ex ; 
 + 
 + import java . nio . ByteBuffer ; 
 + import java . util . Random ; 
 + 
 + import static org . junit . Assert . * ; 
 + 
 + import org . junit . Test ; 
 + 
 + public class CRC32FactoryTest 
 + { 
 + 
 + @ Test 
 + public void updateInt ( ) 
 + { 
 + ICRC32 crcA = new CRC32Ex ( ) ; 
 + PureJavaCrc32 crcB = new PureJavaCrc32 ( ) ; 
 + 
 + crcA . updateInt ( 42 ) ; 
 + crcB . updateInt ( 42 ) ; 
 + 
 + assertEquals ( crcA . getCrc ( ) , crcB . getCrc ( ) ) ; 
 + assertEquals ( crcA . getValue ( ) , crcB . getValue ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testFuzzz ( ) 
 + { 
 + for ( int ii = 0 ; ii < 100 ; ii + + ) 
 + { 
 + testOnce ( ) ; 
 + } 
 + } 
 + 
 + private void testOnce ( ) 
 + { 
 + final long seed = System . nanoTime ( ) ; 
 + System . out . println ( " Seed is " + seed ) ; 
 + Random r = new java . util . Random ( seed ) ; 
 + 
 + ByteBuffer source = null ; 
 + int nextSize = r . nextDouble ( ) < . 9 ? r . nextInt ( 1024 * 1024 ) : r . nextInt ( 16 ) ; 
 + 
 + if ( r . nextDouble ( ) > . 5 ) 
 + { 
 + source = ByteBuffer . allocate ( nextSize ) ; 
 + r . nextBytes ( source . array ( ) ) ; 
 + } 
 + else 
 + { 
 + source = ByteBuffer . allocateDirect ( nextSize ) ; 
 + while ( source . hasRemaining ( ) ) 
 + { 
 + source . put ( ( byte ) ( r . nextInt ( ) % 127 ) ) ; 
 + } 
 + source . clear ( ) ; 
 + } 
 + 
 + ICRC32 crcA = new CRC32Ex ( ) ; 
 + PureJavaCrc32 crcB = new PureJavaCrc32 ( ) ; 
 + if ( source . hasArray ( ) ) 
 + { 
 + if ( r . nextDouble ( ) > 0 . 5 ) 
 + { 
 + crcA . update ( source . array ( ) , 0 , source . remaining ( ) ) ; 
 + crcB . update ( source . array ( ) , 0 , source . remaining ( ) ) ; 
 + } 
 + else 
 + { 
 + crcA . update ( source , 0 , source . remaining ( ) ) ; 
 + assertEquals ( 0 , source . position ( ) ) ; 
 + assertEquals ( source . capacity ( ) , source . limit ( ) ) ; 
 + crcB . update ( source , 0 , source . remaining ( ) ) ; 
 + assertEquals ( 0 , source . position ( ) ) ; 
 + assertEquals ( source . capacity ( ) , source . limit ( ) ) ; 
 + } 
 + } 
 + else 
 + { 
 + crcA . update ( source , 0 , source . remaining ( ) ) ; 
 + assertEquals ( 0 , source . position ( ) ) ; 
 + assertEquals ( source . capacity ( ) , source . limit ( ) ) ; 
 + crcB . update ( source , 0 , source . remaining ( ) ) ; 
 + assertEquals ( 0 , source . position ( ) ) ; 
 + assertEquals ( source . capacity ( ) , source . limit ( ) ) ; 
 + } 
 + assertEquals ( crcA . getCrc ( ) , crcB . getCrc ( ) ) ; 
 + assertEquals ( crcA . getValue ( ) , crcB . getValue ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void jdkDetection ( ) 
 + { 
 + if ( System . getProperty ( " java . version " ) . startsWith ( " 1 . 7 " ) ) 
 + assertFalse ( CRC32Factory . create ( ) instanceof CRC32Factory . CRC32Ex ) ; 
 + else 
 + assertTrue ( CRC32Factory . create ( ) instanceof CRC32Factory . CRC32Ex ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 8d9e2ea . . c97b17f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 7 + 1 , 10 @ @ 
 dev 
 * sstable versioning ( CASSANDRA - 389 ) 
 
 - 0 . 6 . 0 - dev 
 + 0 . 6 . 0 - RC1 
 + * fix compaction bucketing bug ( CASSANDRA - 814 ) 
 + 
 + 0 . 6 . 0 - beta1 / beta2 
 * add batch _ mutate thrift command , deprecating batch _ insert ( CASSANDRA - 336 ) 
 * remove get _ key _ range Thrift API , deprecated in 0 . 5 ( CASSANDRA - 710 ) 
 * add optional login ( ) Thrift call for authentication ( CASSANDRA - 547 ) 
 @ @ - 42 , 7 + 45 , 9 @ @ dev 
 * allow larger numbers of keys ( > 140M ) in a sstable bloom filter 
 ( CASSANDRA - 790 ) 
 * include jvm argument improvements from CASSANDRA - 504 in debian package 
 - * change streaming chunk size to 32MB ( was 64MB ) ( CASSANDRA - 795 ) 
 + * change streaming chunk size to 32MB to accomodate Windows XP limitations 
 + ( was 64MB ) ( CASSANDRA - 795 ) 
 + * fix get _ range _ slice returning results in the wrong order ( CASSANDRA - 781 ) 
 
 
 0 . 5 . 0 final 
 diff - - git a / build . xml b / build . xml 
 index ea79876 . . 54ef12d 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 314 , 6 + 314 , 7 @ @ 
 < include name = " * * " / > 
 < exclude name = " build / * * " / > 
 < exclude name = " src / gen - java / * * " / > 
 + < exclude name = " interface / avro / * * " / > 
 < / tarfileset > 
 < / tar > 
 < / target > 
 diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java 
 index fbd5ebb . . 1b5b6b1 100644 
 - - - a / src / java / org / apache / cassandra / db / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / CompactionManager . java 
 @ @ - 89 , 7 + 89 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 return 0 ; 
 } 
 logger . debug ( " Checking to see if compaction of " + cfs . columnFamily _ + " would be useful " ) ; 
 - Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 + Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 updateEstimateFor ( cfs , buckets ) ; 
 
 for ( List < SSTableReader > sstables : buckets ) 
 @ @ - 441 , 7 + 441 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 / * 
 * Group files of similar size into buckets . 
 * / 
 - static Set < List < SSTableReader > > getCompactionBuckets ( Iterable < SSTableReader > files , long min ) 
 + static Set < List < SSTableReader > > getBuckets ( Iterable < SSTableReader > files , long min ) 
 { 
 Map < List < SSTableReader > , Long > buckets = new HashMap < List < SSTableReader > , Long > ( ) ; 
 for ( SSTableReader sstable : files ) 
 @ @ - 461 , 7 + 461 , 8 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 / / remove and re - add because adding changes the hash 
 buckets . remove ( bucket ) ; 
 - averageSize = ( averageSize + size ) / 2 ; 
 + long totalSize = bucket . size ( ) * averageSize ; 
 + averageSize = ( totalSize + size ) / ( bucket . size ( ) + 1 ) ; 
 bucket . add ( sstable ) ; 
 buckets . put ( bucket , averageSize ) ; 
 bFound = true ; 
 @ @ - 538 , 7 + 539 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 public void run ( ) 
 { 
 logger . debug ( " Estimating compactions for " + cfs . columnFamily _ ) ; 
 - final Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 + final Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 updateEstimateFor ( cfs , buckets ) ; 
 } 
 } ;
