BLEU SCORE: 0.02139089632303349

TEST MSG: use % n for newlines in printfs
GENERATED MSG: fix stress tool that hangs forever on timeout or error

TEST DIFF (one line): diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressProfile . java b / tools / stress / src / org / apache / cassandra / stress / StressProfile . java <nl> index b0a149c . . 6908f87 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / StressProfile . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / StressProfile . java <nl> @ @ - 371 , 21 + 371 , 21 @ @ public class StressProfile implements Serializable <nl> / / guarantee the vast majority of actions occur in these bounds <nl> double minBatchSize = selectchance . get ( ) . min ( ) * partitions . get ( ) . minValue ( ) * generator . minRowCount * ( 1d / visits . maxValue ( ) ) ; <nl> double maxBatchSize = selectchance . get ( ) . max ( ) * partitions . get ( ) . maxValue ( ) * generator . maxRowCount * ( 1d / visits . minValue ( ) ) ; <nl> - System . out . printf ( " Generating batches with [ % d . . % d ] partitions and [ % . 0f . . % . 0f ] rows ( of [ % . 0f . . % . 0f ] total rows in the partitions ) \ n " , <nl> + System . out . printf ( " Generating batches with [ % d . . % d ] partitions and [ % . 0f . . % . 0f ] rows ( of [ % . 0f . . % . 0f ] total rows in the partitions ) % n " , <nl> partitions . get ( ) . minValue ( ) , partitions . get ( ) . maxValue ( ) , <nl> minBatchSize , maxBatchSize , <nl> partitions . get ( ) . minValue ( ) * generator . minRowCount , <nl> partitions . get ( ) . maxValue ( ) * generator . maxRowCount ) ; <nl> if ( generator . maxRowCount > 100 * 1000 * 1000 ) <nl> - System . err . printf ( " WARNING : You have defined a schema that permits very large partitions ( % . 0f max rows ( > 100M ) ) \ n " , generator . maxRowCount ) ; <nl> + System . err . printf ( " WARNING : You have defined a schema that permits very large partitions ( % . 0f max rows ( > 100M ) ) % n " , generator . maxRowCount ) ; <nl> if ( batchType = = BatchStatement . Type . LOGGED & & maxBatchSize > 65535 ) <nl> { <nl> - System . err . printf ( " ERROR : You have defined a workload that generates batches with more than 65k rows ( % . 0f ) , but have required the use of LOGGED batches . There is a 65k row limit on a single batch . \ n " , <nl> + System . err . printf ( " ERROR : You have defined a workload that generates batches with more than 65k rows ( % . 0f ) , but have required the use of LOGGED batches . There is a 65k row limit on a single batch . % n " , <nl> selectchance . get ( ) . max ( ) * partitions . get ( ) . maxValue ( ) * generator . maxRowCount ) ; <nl> System . exit ( 1 ) ; <nl> } <nl> if ( maxBatchSize > 100000 ) <nl> - System . err . printf ( " WARNING : You have defined a schema that permits very large batches ( % . 0f max rows ( > 100K ) ) . This may OOM this stress client , or the server . \ n " , <nl> + System . err . printf ( " WARNING : You have defined a schema that permits very large batches ( % . 0f max rows ( > 100K ) ) . This may OOM this stress client , or the server . % n " , <nl> selectchance . get ( ) . max ( ) * partitions . get ( ) . maxValue ( ) * generator . maxRowCount ) ; <nl> <nl> JavaDriverClient client = settings . getJavaDriverClient ( ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 5a491be . . 9392d3d 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 23 , 6 + 23 , 7 @ @ <nl> * average a reduced liveRatio estimate with the previous one ( CASSANDRA - 4065 ) <nl> * Allow KS and CF names up to 48 characters ( CASSANDRA - 4157 ) <nl> * Add support for CL . TWO and CL . THREE in CQL ( CASSANDRA - 4156 ) <nl> + * Fix type in CQL3 ALTER TABLE preventing update ( CASSANDRA - 4170 ) <nl> Merged from 1 . 0 : <nl> * avoid streaming empty files with bulk loader if sstablewriter errors out <nl> ( CASSANDRA - 3946 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> index 37db2fd . . bb2c7e8 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> @ @ - 98 , 7 + 98 , 7 @ @ public class AlterTableStatement extends SchemaAlteringStatement <nl> cfm . defaultValidator ( CFPropDefs . parseType ( validator ) ) ; <nl> break ; <nl> case COLUMN _ METADATA : <nl> - ColumnDefinition column = meta . getColumnDefinition ( columnName . key ) ; <nl> + ColumnDefinition column = cfm . getColumnDefinition ( columnName . key ) ; <nl> column . setValidator ( CFPropDefs . parseType ( validator ) ) ; <nl> cfm . addColumnDefinition ( column ) ; <nl> break ;

TEST DIFF:
diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressProfile . java b / tools / stress / src / org / apache / cassandra / stress / StressProfile . java 
 index b0a149c . . 6908f87 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / StressProfile . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / StressProfile . java 
 @ @ - 371 , 21 + 371 , 21 @ @ public class StressProfile implements Serializable 
 / / guarantee the vast majority of actions occur in these bounds 
 double minBatchSize = selectchance . get ( ) . min ( ) * partitions . get ( ) . minValue ( ) * generator . minRowCount * ( 1d / visits . maxValue ( ) ) ; 
 double maxBatchSize = selectchance . get ( ) . max ( ) * partitions . get ( ) . maxValue ( ) * generator . maxRowCount * ( 1d / visits . minValue ( ) ) ; 
 - System . out . printf ( " Generating batches with [ % d . . % d ] partitions and [ % . 0f . . % . 0f ] rows ( of [ % . 0f . . % . 0f ] total rows in the partitions ) \ n " , 
 + System . out . printf ( " Generating batches with [ % d . . % d ] partitions and [ % . 0f . . % . 0f ] rows ( of [ % . 0f . . % . 0f ] total rows in the partitions ) % n " , 
 partitions . get ( ) . minValue ( ) , partitions . get ( ) . maxValue ( ) , 
 minBatchSize , maxBatchSize , 
 partitions . get ( ) . minValue ( ) * generator . minRowCount , 
 partitions . get ( ) . maxValue ( ) * generator . maxRowCount ) ; 
 if ( generator . maxRowCount > 100 * 1000 * 1000 ) 
 - System . err . printf ( " WARNING : You have defined a schema that permits very large partitions ( % . 0f max rows ( > 100M ) ) \ n " , generator . maxRowCount ) ; 
 + System . err . printf ( " WARNING : You have defined a schema that permits very large partitions ( % . 0f max rows ( > 100M ) ) % n " , generator . maxRowCount ) ; 
 if ( batchType = = BatchStatement . Type . LOGGED & & maxBatchSize > 65535 ) 
 { 
 - System . err . printf ( " ERROR : You have defined a workload that generates batches with more than 65k rows ( % . 0f ) , but have required the use of LOGGED batches . There is a 65k row limit on a single batch . \ n " , 
 + System . err . printf ( " ERROR : You have defined a workload that generates batches with more than 65k rows ( % . 0f ) , but have required the use of LOGGED batches . There is a 65k row limit on a single batch . % n " , 
 selectchance . get ( ) . max ( ) * partitions . get ( ) . maxValue ( ) * generator . maxRowCount ) ; 
 System . exit ( 1 ) ; 
 } 
 if ( maxBatchSize > 100000 ) 
 - System . err . printf ( " WARNING : You have defined a schema that permits very large batches ( % . 0f max rows ( > 100K ) ) . This may OOM this stress client , or the server . \ n " , 
 + System . err . printf ( " WARNING : You have defined a schema that permits very large batches ( % . 0f max rows ( > 100K ) ) . This may OOM this stress client , or the server . % n " , 
 selectchance . get ( ) . max ( ) * partitions . get ( ) . maxValue ( ) * generator . maxRowCount ) ; 
 
 JavaDriverClient client = settings . getJavaDriverClient ( ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 5a491be . . 9392d3d 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 23 , 6 + 23 , 7 @ @ 
 * average a reduced liveRatio estimate with the previous one ( CASSANDRA - 4065 ) 
 * Allow KS and CF names up to 48 characters ( CASSANDRA - 4157 ) 
 * Add support for CL . TWO and CL . THREE in CQL ( CASSANDRA - 4156 ) 
 + * Fix type in CQL3 ALTER TABLE preventing update ( CASSANDRA - 4170 ) 
 Merged from 1 . 0 : 
 * avoid streaming empty files with bulk loader if sstablewriter errors out 
 ( CASSANDRA - 3946 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 index 37db2fd . . bb2c7e8 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 @ @ - 98 , 7 + 98 , 7 @ @ public class AlterTableStatement extends SchemaAlteringStatement 
 cfm . defaultValidator ( CFPropDefs . parseType ( validator ) ) ; 
 break ; 
 case COLUMN _ METADATA : 
 - ColumnDefinition column = meta . getColumnDefinition ( columnName . key ) ; 
 + ColumnDefinition column = cfm . getColumnDefinition ( columnName . key ) ; 
 column . setValidator ( CFPropDefs . parseType ( validator ) ) ; 
 cfm . addColumnDefinition ( column ) ; 
 break ;
