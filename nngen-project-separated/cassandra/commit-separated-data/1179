BLEU SCORE: 0.02399905349559606

TEST MSG: Make buffered read size configurable
GENERATED MSG: inline an infrequently - used RAR . open overload

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index eea14c8 . . 08db386 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 12 <nl> + * Make buffered read size configurable ( CASSANDRA - 10249 ) <nl> * Forbid compact clustering column type changes in ALTER TABLE ( CASSANDRA - 8879 ) <nl> * Reject incremental repair with subrange repair ( CASSANDRA - 10422 ) <nl> * Add a nodetool command to refresh size _ estimates ( CASSANDRA - 9579 ) <nl> diff - - git a / src / java / org / apache / cassandra / io / util / RandomAccessReader . java b / src / java / org / apache / cassandra / io / util / RandomAccessReader . java <nl> index 95877a2 . . d15fe46 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / RandomAccessReader . java <nl> + + + b / src / java / org / apache / cassandra / io / util / RandomAccessReader . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ public class RandomAccessReader extends RandomAccessFile implements FileDataInpu <nl> <nl> / / default buffer size , 64Kb <nl> public static final int DEFAULT _ BUFFER _ SIZE = 65536 ; <nl> + public static final int BUFFER _ SIZE = Integer . getInteger ( " cassandra . rar _ buffer _ size " , DEFAULT _ BUFFER _ SIZE ) ; <nl> <nl> / / absolute filesystem path to the file <nl> private final String filePath ; <nl> @ @ - 94 , 7 + 95 , 7 @ @ public class RandomAccessReader extends RandomAccessFile implements FileDataInpu <nl> <nl> public static RandomAccessReader open ( File file , long overrideSize , PoolingSegmentedFile owner ) <nl> { <nl> - return open ( file , DEFAULT _ BUFFER _ SIZE , overrideSize , owner ) ; <nl> + return open ( file , BUFFER _ SIZE , overrideSize , owner ) ; <nl> } <nl> <nl> public static RandomAccessReader open ( File file ) <nl> @ @ - 104 , 7 + 105 , 7 @ @ public class RandomAccessReader extends RandomAccessFile implements FileDataInpu <nl> <nl> public static RandomAccessReader open ( File file , long overrideSize ) <nl> { <nl> - return open ( file , DEFAULT _ BUFFER _ SIZE , overrideSize , null ) ; <nl> + return open ( file , BUFFER _ SIZE , overrideSize , null ) ; <nl> } <nl> <nl> @ VisibleForTesting <nl> @ @ - 128 , 7 + 129 , 7 @ @ public class RandomAccessReader extends RandomAccessFile implements FileDataInpu <nl> @ VisibleForTesting <nl> static RandomAccessReader open ( SequentialWriter writer ) <nl> { <nl> - return open ( new File ( writer . getPath ( ) ) , DEFAULT _ BUFFER _ SIZE , null ) ; <nl> + return open ( new File ( writer . getPath ( ) ) , BUFFER _ SIZE , null ) ; <nl> } <nl> <nl> / * *
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 900c9ef . . be34e89 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 7 + 1 , 11 @ @ <nl> 1 . 2 . 1 <nl> - * Add debug logging to list filenames processed by Directories . migrateFile method ( CASSANDRA - 4939 ) <nl> + * pool [ Compressed ] RandomAccessReader objects on the partitioned read path <nl> + ( CASSANDRA - 4942 ) <nl> + * Add debug logging to list filenames processed by Directories . migrateFile <nl> + method ( CASSANDRA - 4939 ) <nl> * Expose black - listed directories via JMX ( CASSANDRA - 4848 ) <nl> <nl> + <nl> 1 . 2 - rc1 <nl> * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) <nl> * save truncation position in system table ( CASSANDRA - 4906 ) <nl> diff - - git a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java <nl> index da35e92 . . 3b0c5ba 100644 <nl> - - - a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java <nl> + + + b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java <nl> @ @ - 25 , 26 + 25 , 36 @ @ import java . nio . channels . FileChannel ; <nl> import java . util . zip . CRC32 ; <nl> import java . util . zip . Checksum ; <nl> <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . primitives . Ints ; <nl> <nl> import org . apache . cassandra . io . FSReadError ; <nl> import org . apache . cassandra . io . sstable . CorruptSSTableException ; <nl> + import org . apache . cassandra . io . util . CompressedSegmentedFile ; <nl> + import org . apache . cassandra . io . util . PoolingSegmentedFile ; <nl> import org . apache . cassandra . io . util . RandomAccessReader ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> / / TODO refactor this to separate concept of " buffer to avoid lots of read ( ) syscalls " and " compression buffer " <nl> public class CompressedRandomAccessReader extends RandomAccessReader <nl> { <nl> - public static RandomAccessReader open ( String dataFilePath , CompressionMetadata metadata ) <nl> + public static CompressedRandomAccessReader open ( String path , CompressionMetadata metadata , CompressedSegmentedFile owner ) <nl> { <nl> - return open ( dataFilePath , metadata , false ) ; <nl> + try <nl> + { <nl> + return new CompressedRandomAccessReader ( path , metadata , false , owner ) ; <nl> + } <nl> + catch ( FileNotFoundException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> } <nl> <nl> - public static RandomAccessReader open ( String dataFilePath , CompressionMetadata metadata , boolean skipIOCache ) <nl> + public static CompressedRandomAccessReader open ( String dataFilePath , CompressionMetadata metadata , boolean skipIOCache ) <nl> { <nl> try <nl> { <nl> - return new CompressedRandomAccessReader ( dataFilePath , metadata , skipIOCache ) ; <nl> + return new CompressedRandomAccessReader ( dataFilePath , metadata , skipIOCache , null ) ; <nl> } <nl> catch ( FileNotFoundException e ) <nl> { <nl> @ @ - 65 , 9 + 75 , 9 @ @ public class CompressedRandomAccessReader extends RandomAccessReader <nl> private final FileInputStream source ; <nl> private final FileChannel channel ; <nl> <nl> - public CompressedRandomAccessReader ( String dataFilePath , CompressionMetadata metadata , boolean skipIOCache ) throws FileNotFoundException <nl> + private CompressedRandomAccessReader ( String dataFilePath , CompressionMetadata metadata , boolean skipIOCache , PoolingSegmentedFile owner ) throws FileNotFoundException <nl> { <nl> - super ( new File ( dataFilePath ) , metadata . chunkLength ( ) , skipIOCache ) ; <nl> + super ( new File ( dataFilePath ) , metadata . chunkLength ( ) , skipIOCache , owner ) ; <nl> this . metadata = metadata ; <nl> compressed = new byte [ metadata . compressor ( ) . initialCompressedBufferLength ( metadata . chunkLength ( ) ) ] ; <nl> / / can ' t use super . read ( . . . ) methods <nl> @ @ - 155 , 9 + 165 , 10 @ @ public class CompressedRandomAccessReader extends RandomAccessReader <nl> } <nl> <nl> @ Override <nl> - public void close ( ) <nl> + public void deallocate ( ) <nl> { <nl> - super . close ( ) ; <nl> + super . deallocate ( ) ; <nl> + <nl> try <nl> { <nl> source . close ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / util / BufferedSegmentedFile . java b / src / java / org / apache / cassandra / io / util / BufferedSegmentedFile . java <nl> index 2c8b89e . . 49972c8 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / BufferedSegmentedFile . java <nl> + + + b / src / java / org / apache / cassandra / io / util / BufferedSegmentedFile . java <nl> @ @ - 19 , 7 + 19 , 7 @ @ package org . apache . cassandra . io . util ; <nl> <nl> import java . io . File ; <nl> <nl> - public class BufferedSegmentedFile extends SegmentedFile <nl> + public class BufferedSegmentedFile extends PoolingSegmentedFile <nl> { <nl> public BufferedSegmentedFile ( String path , long length ) <nl> { <nl> @ @ - 49 , 15 + 49 , 8 @ @ public class BufferedSegmentedFile extends SegmentedFile <nl> } <nl> } <nl> <nl> - public FileDataInput getSegment ( long position ) <nl> + protected RandomAccessReader createReader ( String path ) <nl> { <nl> - RandomAccessReader file = RandomAccessReader . open ( new File ( path ) ) ; <nl> - file . seek ( position ) ; <nl> - return file ; <nl> - } <nl> - <nl> - public void cleanup ( ) <nl> - { <nl> - / / nothing to do <nl> + return RandomAccessReader . open ( new File ( path ) , this ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java b / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java <nl> index 7280dcd . . e106be7 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java <nl> + + + b / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java <nl> @ @ - 20 , 7 + 20 , 7 @ @ package org . apache . cassandra . io . util ; <nl> import org . apache . cassandra . io . compress . CompressedRandomAccessReader ; <nl> import org . apache . cassandra . io . compress . CompressionMetadata ; <nl> <nl> - public class CompressedSegmentedFile extends SegmentedFile <nl> + public class CompressedSegmentedFile extends PoolingSegmentedFile <nl> { <nl> public final CompressionMetadata metadata ; <nl> <nl> @ @ - 52 , 15 + 52 , 15 @ @ public class CompressedSegmentedFile extends SegmentedFile <nl> } <nl> } <nl> <nl> - public FileDataInput getSegment ( long position ) <nl> + protected RandomAccessReader createReader ( String path ) <nl> { <nl> - RandomAccessReader file = CompressedRandomAccessReader . open ( path , metadata ) ; <nl> - file . seek ( position ) ; <nl> - return file ; <nl> + return CompressedRandomAccessReader . open ( path , metadata , this ) ; <nl> } <nl> <nl> + @ Override <nl> public void cleanup ( ) <nl> { <nl> + super . cleanup ( ) ; <nl> metadata . close ( ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / util / PoolingSegmentedFile . java b / src / java / org / apache / cassandra / io / util / PoolingSegmentedFile . java <nl> new file mode 100644 <nl> index 0000000 . . 2e0acfc <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / io / util / PoolingSegmentedFile . java <nl> @ @ - 0 , 0 + 1 , 41 @ @ <nl> + package org . apache . cassandra . io . util ; <nl> + <nl> + import java . util . Queue ; <nl> + import java . util . concurrent . ConcurrentLinkedQueue ; <nl> + <nl> + public abstract class PoolingSegmentedFile extends SegmentedFile <nl> + { <nl> + public final Queue < RandomAccessReader > pool = new ConcurrentLinkedQueue < RandomAccessReader > ( ) ; <nl> + <nl> + protected PoolingSegmentedFile ( String path , long length ) <nl> + { <nl> + super ( path , length ) ; <nl> + } <nl> + <nl> + protected PoolingSegmentedFile ( String path , long length , long onDiskLength ) <nl> + { <nl> + super ( path , length , onDiskLength ) ; <nl> + } <nl> + <nl> + public FileDataInput getSegment ( long position ) <nl> + { <nl> + RandomAccessReader reader = pool . poll ( ) ; <nl> + if ( reader = = null ) <nl> + reader = createReader ( path ) ; <nl> + reader . seek ( position ) ; <nl> + return reader ; <nl> + } <nl> + <nl> + protected abstract RandomAccessReader createReader ( String path ) ; <nl> + <nl> + public void recycle ( RandomAccessReader reader ) <nl> + { <nl> + pool . add ( reader ) ; <nl> + } <nl> + <nl> + public void cleanup ( ) <nl> + { <nl> + for ( RandomAccessReader reader : pool ) <nl> + reader . deallocate ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / io / util / RandomAccessReader . java b / src / java / org / apache / cassandra / io / util / RandomAccessReader . java <nl> index 06778d9 . . 3210372 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / RandomAccessReader . java <nl> + + + b / src / java / org / apache / cassandra / io / util / RandomAccessReader . java <nl> @ @ - 60 , 11 + 60 , 14 @ @ public class RandomAccessReader extends RandomAccessFile implements FileDataInpu <nl> <nl> private final long fileLength ; <nl> <nl> - / / used in tests <nl> - public RandomAccessReader ( File file , int bufferSize , boolean skipIOCache ) throws FileNotFoundException <nl> + protected final PoolingSegmentedFile owner ; <nl> + <nl> + protected RandomAccessReader ( File file , int bufferSize , boolean skipIOCache , PoolingSegmentedFile owner ) throws FileNotFoundException <nl> { <nl> super ( file , " r " ) ; <nl> <nl> + this . owner = owner ; <nl> + <nl> channel = super . getChannel ( ) ; <nl> filePath = file . getAbsolutePath ( ) ; <nl> <nl> @ @ - 101 , 17 + 104 , 22 @ @ public class RandomAccessReader extends RandomAccessFile implements FileDataInpu <nl> return open ( file , false ) ; <nl> } <nl> <nl> + public static RandomAccessReader open ( File file , PoolingSegmentedFile owner ) <nl> + { <nl> + return open ( file , DEFAULT _ BUFFER _ SIZE , false , owner ) ; <nl> + } <nl> + <nl> public static RandomAccessReader open ( File file , boolean skipIOCache ) <nl> { <nl> - return open ( file , DEFAULT _ BUFFER _ SIZE , skipIOCache ) ; <nl> + return open ( file , DEFAULT _ BUFFER _ SIZE , skipIOCache , null ) ; <nl> } <nl> <nl> @ VisibleForTesting <nl> - static RandomAccessReader open ( File file , int bufferSize , boolean skipIOCache ) <nl> + static RandomAccessReader open ( File file , int bufferSize , boolean skipIOCache , PoolingSegmentedFile owner ) <nl> { <nl> try <nl> { <nl> - return new RandomAccessReader ( file , bufferSize , skipIOCache ) ; <nl> + return new RandomAccessReader ( file , bufferSize , skipIOCache , owner ) ; <nl> } <nl> catch ( FileNotFoundException e ) <nl> { <nl> @ @ - 120 , 9 + 128 , 9 @ @ public class RandomAccessReader extends RandomAccessFile implements FileDataInpu <nl> } <nl> <nl> @ VisibleForTesting <nl> - public static RandomAccessReader open ( SequentialWriter writer ) <nl> + static RandomAccessReader open ( SequentialWriter writer ) <nl> { <nl> - return open ( new File ( writer . getPath ( ) ) , DEFAULT _ BUFFER _ SIZE , false ) ; <nl> + return open ( new File ( writer . getPath ( ) ) , DEFAULT _ BUFFER _ SIZE , false , null ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 237 , 7 + 245 , 24 @ @ public class RandomAccessReader extends RandomAccessFile implements FileDataInpu <nl> @ Override <nl> public void close ( ) <nl> { <nl> - buffer = null ; <nl> + if ( owner = = null | | buffer = = null ) <nl> + { <nl> + / / The buffer = = null check is so that if the pool owner has deallocated us , calling close ( ) <nl> + / / will re - call deallocate rather than recycling a deallocated object . <nl> + / / I ' d be more comfortable if deallocate didn ' t have to handle being idempotent like that , <nl> + / / but RandomAccessFile . close will call AbstractInterruptibleChannel . close which will <nl> + / / re - call RAF . close - - in this case , [ C ] RAR . close since we are overriding that . <nl> + deallocate ( ) ; <nl> + } <nl> + else <nl> + { <nl> + owner . recycle ( this ) ; <nl> + } <nl> + } <nl> + <nl> + public void deallocate ( ) <nl> + { <nl> + buffer = null ; / / makes sure we don ' t use this after it ' s ostensibly closed <nl> <nl> if ( skipIOCache & & bytesSinceCacheFlush > 0 ) <nl> CLibrary . trySkipCache ( fd , 0 , 0 ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / io / compress / CompressedRandomAccessReaderTest . java b / test / unit / org / apache / cassandra / io / compress / CompressedRandomAccessReaderTest . java <nl> index eabb489 . . 830c3e1 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / compress / CompressedRandomAccessReaderTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / compress / CompressedRandomAccessReaderTest . java <nl> @ @ - 75 , 8 + 75 , 8 @ @ public class CompressedRandomAccessReaderTest <nl> <nl> assert f . exists ( ) ; <nl> RandomAccessReader reader = compressed <nl> - ? new CompressedRandomAccessReader ( filename , new CompressionMetadata ( filename + " . metadata " , f . length ( ) ) , false ) <nl> - : new RandomAccessReader ( f , CompressionParameters . DEFAULT _ CHUNK _ LENGTH , false ) ; <nl> + ? CompressedRandomAccessReader . open ( filename , new CompressionMetadata ( filename + " . metadata " , f . length ( ) ) , false ) <nl> + : RandomAccessReader . open ( f ) ; <nl> String expected = " The quick brown fox jumps over the lazy dog " ; <nl> assertEquals ( expected . length ( ) , reader . length ( ) ) ; <nl> byte [ ] b = new byte [ expected . length ( ) ] ; <nl> diff - - git a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java <nl> index e7fa8e3 . . 8059bbd 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java <nl> @ @ - 338 , 7 + 338 , 7 @ @ public class BufferedRandomAccessFileTest <nl> for ( final int offset : Arrays . asList ( 0 , 8 ) ) <nl> { <nl> File file1 = writeTemporaryFile ( new byte [ 16 ] ) ; <nl> - final RandomAccessReader file = RandomAccessReader . open ( file1 , bufferSize , false ) ; <nl> + final RandomAccessReader file = RandomAccessReader . open ( file1 , bufferSize , false , null ) ; <nl> expectEOF ( new Callable < Object > ( ) <nl> { <nl> public Object call ( ) throws IOException <nl> @ @ - 353 , 7 + 353 , 7 @ @ public class BufferedRandomAccessFileTest <nl> for ( final int n : Arrays . asList ( 1 , 2 , 4 , 8 ) ) <nl> { <nl> File file1 = writeTemporaryFile ( new byte [ 16 ] ) ; <nl> - final RandomAccessReader file = RandomAccessReader . open ( file1 , bufferSize , false ) ; <nl> + final RandomAccessReader file = RandomAccessReader . open ( file1 , bufferSize , false , null ) ; <nl> expectEOF ( new Callable < Object > ( ) <nl> { <nl> public Object call ( ) throws IOException

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index eea14c8 . . 08db386 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 12 
 + * Make buffered read size configurable ( CASSANDRA - 10249 ) 
 * Forbid compact clustering column type changes in ALTER TABLE ( CASSANDRA - 8879 ) 
 * Reject incremental repair with subrange repair ( CASSANDRA - 10422 ) 
 * Add a nodetool command to refresh size _ estimates ( CASSANDRA - 9579 ) 
 diff - - git a / src / java / org / apache / cassandra / io / util / RandomAccessReader . java b / src / java / org / apache / cassandra / io / util / RandomAccessReader . java 
 index 95877a2 . . d15fe46 100644 
 - - - a / src / java / org / apache / cassandra / io / util / RandomAccessReader . java 
 + + + b / src / java / org / apache / cassandra / io / util / RandomAccessReader . java 
 @ @ - 31 , 6 + 31 , 7 @ @ public class RandomAccessReader extends RandomAccessFile implements FileDataInpu 
 
 / / default buffer size , 64Kb 
 public static final int DEFAULT _ BUFFER _ SIZE = 65536 ; 
 + public static final int BUFFER _ SIZE = Integer . getInteger ( " cassandra . rar _ buffer _ size " , DEFAULT _ BUFFER _ SIZE ) ; 
 
 / / absolute filesystem path to the file 
 private final String filePath ; 
 @ @ - 94 , 7 + 95 , 7 @ @ public class RandomAccessReader extends RandomAccessFile implements FileDataInpu 
 
 public static RandomAccessReader open ( File file , long overrideSize , PoolingSegmentedFile owner ) 
 { 
 - return open ( file , DEFAULT _ BUFFER _ SIZE , overrideSize , owner ) ; 
 + return open ( file , BUFFER _ SIZE , overrideSize , owner ) ; 
 } 
 
 public static RandomAccessReader open ( File file ) 
 @ @ - 104 , 7 + 105 , 7 @ @ public class RandomAccessReader extends RandomAccessFile implements FileDataInpu 
 
 public static RandomAccessReader open ( File file , long overrideSize ) 
 { 
 - return open ( file , DEFAULT _ BUFFER _ SIZE , overrideSize , null ) ; 
 + return open ( file , BUFFER _ SIZE , overrideSize , null ) ; 
 } 
 
 @ VisibleForTesting 
 @ @ - 128 , 7 + 129 , 7 @ @ public class RandomAccessReader extends RandomAccessFile implements FileDataInpu 
 @ VisibleForTesting 
 static RandomAccessReader open ( SequentialWriter writer ) 
 { 
 - return open ( new File ( writer . getPath ( ) ) , DEFAULT _ BUFFER _ SIZE , null ) ; 
 + return open ( new File ( writer . getPath ( ) ) , BUFFER _ SIZE , null ) ; 
 } 
 
 / * *

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 900c9ef . . be34e89 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 7 + 1 , 11 @ @ 
 1 . 2 . 1 
 - * Add debug logging to list filenames processed by Directories . migrateFile method ( CASSANDRA - 4939 ) 
 + * pool [ Compressed ] RandomAccessReader objects on the partitioned read path 
 + ( CASSANDRA - 4942 ) 
 + * Add debug logging to list filenames processed by Directories . migrateFile 
 + method ( CASSANDRA - 4939 ) 
 * Expose black - listed directories via JMX ( CASSANDRA - 4848 ) 
 
 + 
 1 . 2 - rc1 
 * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) 
 * save truncation position in system table ( CASSANDRA - 4906 ) 
 diff - - git a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java 
 index da35e92 . . 3b0c5ba 100644 
 - - - a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java 
 + + + b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java 
 @ @ - 25 , 26 + 25 , 36 @ @ import java . nio . channels . FileChannel ; 
 import java . util . zip . CRC32 ; 
 import java . util . zip . Checksum ; 
 
 + import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . primitives . Ints ; 
 
 import org . apache . cassandra . io . FSReadError ; 
 import org . apache . cassandra . io . sstable . CorruptSSTableException ; 
 + import org . apache . cassandra . io . util . CompressedSegmentedFile ; 
 + import org . apache . cassandra . io . util . PoolingSegmentedFile ; 
 import org . apache . cassandra . io . util . RandomAccessReader ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 / / TODO refactor this to separate concept of " buffer to avoid lots of read ( ) syscalls " and " compression buffer " 
 public class CompressedRandomAccessReader extends RandomAccessReader 
 { 
 - public static RandomAccessReader open ( String dataFilePath , CompressionMetadata metadata ) 
 + public static CompressedRandomAccessReader open ( String path , CompressionMetadata metadata , CompressedSegmentedFile owner ) 
 { 
 - return open ( dataFilePath , metadata , false ) ; 
 + try 
 + { 
 + return new CompressedRandomAccessReader ( path , metadata , false , owner ) ; 
 + } 
 + catch ( FileNotFoundException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 } 
 
 - public static RandomAccessReader open ( String dataFilePath , CompressionMetadata metadata , boolean skipIOCache ) 
 + public static CompressedRandomAccessReader open ( String dataFilePath , CompressionMetadata metadata , boolean skipIOCache ) 
 { 
 try 
 { 
 - return new CompressedRandomAccessReader ( dataFilePath , metadata , skipIOCache ) ; 
 + return new CompressedRandomAccessReader ( dataFilePath , metadata , skipIOCache , null ) ; 
 } 
 catch ( FileNotFoundException e ) 
 { 
 @ @ - 65 , 9 + 75 , 9 @ @ public class CompressedRandomAccessReader extends RandomAccessReader 
 private final FileInputStream source ; 
 private final FileChannel channel ; 
 
 - public CompressedRandomAccessReader ( String dataFilePath , CompressionMetadata metadata , boolean skipIOCache ) throws FileNotFoundException 
 + private CompressedRandomAccessReader ( String dataFilePath , CompressionMetadata metadata , boolean skipIOCache , PoolingSegmentedFile owner ) throws FileNotFoundException 
 { 
 - super ( new File ( dataFilePath ) , metadata . chunkLength ( ) , skipIOCache ) ; 
 + super ( new File ( dataFilePath ) , metadata . chunkLength ( ) , skipIOCache , owner ) ; 
 this . metadata = metadata ; 
 compressed = new byte [ metadata . compressor ( ) . initialCompressedBufferLength ( metadata . chunkLength ( ) ) ] ; 
 / / can ' t use super . read ( . . . ) methods 
 @ @ - 155 , 9 + 165 , 10 @ @ public class CompressedRandomAccessReader extends RandomAccessReader 
 } 
 
 @ Override 
 - public void close ( ) 
 + public void deallocate ( ) 
 { 
 - super . close ( ) ; 
 + super . deallocate ( ) ; 
 + 
 try 
 { 
 source . close ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / util / BufferedSegmentedFile . java b / src / java / org / apache / cassandra / io / util / BufferedSegmentedFile . java 
 index 2c8b89e . . 49972c8 100644 
 - - - a / src / java / org / apache / cassandra / io / util / BufferedSegmentedFile . java 
 + + + b / src / java / org / apache / cassandra / io / util / BufferedSegmentedFile . java 
 @ @ - 19 , 7 + 19 , 7 @ @ package org . apache . cassandra . io . util ; 
 
 import java . io . File ; 
 
 - public class BufferedSegmentedFile extends SegmentedFile 
 + public class BufferedSegmentedFile extends PoolingSegmentedFile 
 { 
 public BufferedSegmentedFile ( String path , long length ) 
 { 
 @ @ - 49 , 15 + 49 , 8 @ @ public class BufferedSegmentedFile extends SegmentedFile 
 } 
 } 
 
 - public FileDataInput getSegment ( long position ) 
 + protected RandomAccessReader createReader ( String path ) 
 { 
 - RandomAccessReader file = RandomAccessReader . open ( new File ( path ) ) ; 
 - file . seek ( position ) ; 
 - return file ; 
 - } 
 - 
 - public void cleanup ( ) 
 - { 
 - / / nothing to do 
 + return RandomAccessReader . open ( new File ( path ) , this ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java b / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java 
 index 7280dcd . . e106be7 100644 
 - - - a / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java 
 + + + b / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java 
 @ @ - 20 , 7 + 20 , 7 @ @ package org . apache . cassandra . io . util ; 
 import org . apache . cassandra . io . compress . CompressedRandomAccessReader ; 
 import org . apache . cassandra . io . compress . CompressionMetadata ; 
 
 - public class CompressedSegmentedFile extends SegmentedFile 
 + public class CompressedSegmentedFile extends PoolingSegmentedFile 
 { 
 public final CompressionMetadata metadata ; 
 
 @ @ - 52 , 15 + 52 , 15 @ @ public class CompressedSegmentedFile extends SegmentedFile 
 } 
 } 
 
 - public FileDataInput getSegment ( long position ) 
 + protected RandomAccessReader createReader ( String path ) 
 { 
 - RandomAccessReader file = CompressedRandomAccessReader . open ( path , metadata ) ; 
 - file . seek ( position ) ; 
 - return file ; 
 + return CompressedRandomAccessReader . open ( path , metadata , this ) ; 
 } 
 
 + @ Override 
 public void cleanup ( ) 
 { 
 + super . cleanup ( ) ; 
 metadata . close ( ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / util / PoolingSegmentedFile . java b / src / java / org / apache / cassandra / io / util / PoolingSegmentedFile . java 
 new file mode 100644 
 index 0000000 . . 2e0acfc 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / io / util / PoolingSegmentedFile . java 
 @ @ - 0 , 0 + 1 , 41 @ @ 
 + package org . apache . cassandra . io . util ; 
 + 
 + import java . util . Queue ; 
 + import java . util . concurrent . ConcurrentLinkedQueue ; 
 + 
 + public abstract class PoolingSegmentedFile extends SegmentedFile 
 + { 
 + public final Queue < RandomAccessReader > pool = new ConcurrentLinkedQueue < RandomAccessReader > ( ) ; 
 + 
 + protected PoolingSegmentedFile ( String path , long length ) 
 + { 
 + super ( path , length ) ; 
 + } 
 + 
 + protected PoolingSegmentedFile ( String path , long length , long onDiskLength ) 
 + { 
 + super ( path , length , onDiskLength ) ; 
 + } 
 + 
 + public FileDataInput getSegment ( long position ) 
 + { 
 + RandomAccessReader reader = pool . poll ( ) ; 
 + if ( reader = = null ) 
 + reader = createReader ( path ) ; 
 + reader . seek ( position ) ; 
 + return reader ; 
 + } 
 + 
 + protected abstract RandomAccessReader createReader ( String path ) ; 
 + 
 + public void recycle ( RandomAccessReader reader ) 
 + { 
 + pool . add ( reader ) ; 
 + } 
 + 
 + public void cleanup ( ) 
 + { 
 + for ( RandomAccessReader reader : pool ) 
 + reader . deallocate ( ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / io / util / RandomAccessReader . java b / src / java / org / apache / cassandra / io / util / RandomAccessReader . java 
 index 06778d9 . . 3210372 100644 
 - - - a / src / java / org / apache / cassandra / io / util / RandomAccessReader . java 
 + + + b / src / java / org / apache / cassandra / io / util / RandomAccessReader . java 
 @ @ - 60 , 11 + 60 , 14 @ @ public class RandomAccessReader extends RandomAccessFile implements FileDataInpu 
 
 private final long fileLength ; 
 
 - / / used in tests 
 - public RandomAccessReader ( File file , int bufferSize , boolean skipIOCache ) throws FileNotFoundException 
 + protected final PoolingSegmentedFile owner ; 
 + 
 + protected RandomAccessReader ( File file , int bufferSize , boolean skipIOCache , PoolingSegmentedFile owner ) throws FileNotFoundException 
 { 
 super ( file , " r " ) ; 
 
 + this . owner = owner ; 
 + 
 channel = super . getChannel ( ) ; 
 filePath = file . getAbsolutePath ( ) ; 
 
 @ @ - 101 , 17 + 104 , 22 @ @ public class RandomAccessReader extends RandomAccessFile implements FileDataInpu 
 return open ( file , false ) ; 
 } 
 
 + public static RandomAccessReader open ( File file , PoolingSegmentedFile owner ) 
 + { 
 + return open ( file , DEFAULT _ BUFFER _ SIZE , false , owner ) ; 
 + } 
 + 
 public static RandomAccessReader open ( File file , boolean skipIOCache ) 
 { 
 - return open ( file , DEFAULT _ BUFFER _ SIZE , skipIOCache ) ; 
 + return open ( file , DEFAULT _ BUFFER _ SIZE , skipIOCache , null ) ; 
 } 
 
 @ VisibleForTesting 
 - static RandomAccessReader open ( File file , int bufferSize , boolean skipIOCache ) 
 + static RandomAccessReader open ( File file , int bufferSize , boolean skipIOCache , PoolingSegmentedFile owner ) 
 { 
 try 
 { 
 - return new RandomAccessReader ( file , bufferSize , skipIOCache ) ; 
 + return new RandomAccessReader ( file , bufferSize , skipIOCache , owner ) ; 
 } 
 catch ( FileNotFoundException e ) 
 { 
 @ @ - 120 , 9 + 128 , 9 @ @ public class RandomAccessReader extends RandomAccessFile implements FileDataInpu 
 } 
 
 @ VisibleForTesting 
 - public static RandomAccessReader open ( SequentialWriter writer ) 
 + static RandomAccessReader open ( SequentialWriter writer ) 
 { 
 - return open ( new File ( writer . getPath ( ) ) , DEFAULT _ BUFFER _ SIZE , false ) ; 
 + return open ( new File ( writer . getPath ( ) ) , DEFAULT _ BUFFER _ SIZE , false , null ) ; 
 } 
 
 / * * 
 @ @ - 237 , 7 + 245 , 24 @ @ public class RandomAccessReader extends RandomAccessFile implements FileDataInpu 
 @ Override 
 public void close ( ) 
 { 
 - buffer = null ; 
 + if ( owner = = null | | buffer = = null ) 
 + { 
 + / / The buffer = = null check is so that if the pool owner has deallocated us , calling close ( ) 
 + / / will re - call deallocate rather than recycling a deallocated object . 
 + / / I ' d be more comfortable if deallocate didn ' t have to handle being idempotent like that , 
 + / / but RandomAccessFile . close will call AbstractInterruptibleChannel . close which will 
 + / / re - call RAF . close - - in this case , [ C ] RAR . close since we are overriding that . 
 + deallocate ( ) ; 
 + } 
 + else 
 + { 
 + owner . recycle ( this ) ; 
 + } 
 + } 
 + 
 + public void deallocate ( ) 
 + { 
 + buffer = null ; / / makes sure we don ' t use this after it ' s ostensibly closed 
 
 if ( skipIOCache & & bytesSinceCacheFlush > 0 ) 
 CLibrary . trySkipCache ( fd , 0 , 0 ) ; 
 diff - - git a / test / unit / org / apache / cassandra / io / compress / CompressedRandomAccessReaderTest . java b / test / unit / org / apache / cassandra / io / compress / CompressedRandomAccessReaderTest . java 
 index eabb489 . . 830c3e1 100644 
 - - - a / test / unit / org / apache / cassandra / io / compress / CompressedRandomAccessReaderTest . java 
 + + + b / test / unit / org / apache / cassandra / io / compress / CompressedRandomAccessReaderTest . java 
 @ @ - 75 , 8 + 75 , 8 @ @ public class CompressedRandomAccessReaderTest 
 
 assert f . exists ( ) ; 
 RandomAccessReader reader = compressed 
 - ? new CompressedRandomAccessReader ( filename , new CompressionMetadata ( filename + " . metadata " , f . length ( ) ) , false ) 
 - : new RandomAccessReader ( f , CompressionParameters . DEFAULT _ CHUNK _ LENGTH , false ) ; 
 + ? CompressedRandomAccessReader . open ( filename , new CompressionMetadata ( filename + " . metadata " , f . length ( ) ) , false ) 
 + : RandomAccessReader . open ( f ) ; 
 String expected = " The quick brown fox jumps over the lazy dog " ; 
 assertEquals ( expected . length ( ) , reader . length ( ) ) ; 
 byte [ ] b = new byte [ expected . length ( ) ] ; 
 diff - - git a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java 
 index e7fa8e3 . . 8059bbd 100644 
 - - - a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java 
 + + + b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java 
 @ @ - 338 , 7 + 338 , 7 @ @ public class BufferedRandomAccessFileTest 
 for ( final int offset : Arrays . asList ( 0 , 8 ) ) 
 { 
 File file1 = writeTemporaryFile ( new byte [ 16 ] ) ; 
 - final RandomAccessReader file = RandomAccessReader . open ( file1 , bufferSize , false ) ; 
 + final RandomAccessReader file = RandomAccessReader . open ( file1 , bufferSize , false , null ) ; 
 expectEOF ( new Callable < Object > ( ) 
 { 
 public Object call ( ) throws IOException 
 @ @ - 353 , 7 + 353 , 7 @ @ public class BufferedRandomAccessFileTest 
 for ( final int n : Arrays . asList ( 1 , 2 , 4 , 8 ) ) 
 { 
 File file1 = writeTemporaryFile ( new byte [ 16 ] ) ; 
 - final RandomAccessReader file = RandomAccessReader . open ( file1 , bufferSize , false ) ; 
 + final RandomAccessReader file = RandomAccessReader . open ( file1 , bufferSize , false , null ) ; 
 expectEOF ( new Callable < Object > ( ) 
 { 
 public Object call ( ) throws IOException
