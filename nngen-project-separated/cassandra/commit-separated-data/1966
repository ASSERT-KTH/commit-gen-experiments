BLEU SCORE: 0.026279617104084448

TEST MSG: Clean up string handling in powershell launch , check for JMX _ PORT env var
GENERATED MSG: Get Windows command - line flags in - line with linux

TEST DIFF (one line): diff - - git a / bin / cassandra . ps1 b / bin / cassandra . ps1 <nl> index 3884fa5 . . 80049ee 100644 <nl> - - - a / bin / cassandra . ps1 <nl> + + + b / bin / cassandra . ps1 <nl> @ @ - 269 , 6 + 269 , 7 @ @ $ env : JAVA _ BIN <nl> WARNING ! Failed to write pidfile to $ pidfile . stop - server . bat and <nl> startup protection will not be available . <nl> " @ <nl> + echo $ _ . Exception . Message <nl> exit 1 <nl> } <nl> <nl> @ @ - 292 , 8 + 293 , 8 @ @ Function VerifyPortsAreAvailable <nl> $ toMatch = @ ( " storage _ port : " , " ssl _ storage _ port : " , " native _ transport _ port : " , " rpc _ port " ) <nl> $ yaml = Get - Content " $ env : CASSANDRA _ CONF \ cassandra . yaml " <nl> <nl> - $ listenAddress = " unknown " <nl> - $ rpcAddress = " unknown " <nl> + $ listenAddress = " " <nl> + $ rpcAddress = " " <nl> foreach ( $ line in $ yaml ) <nl> { <nl> if ( $ line - match " ^ listen _ address : " ) <nl> @ @ - 307 , 14 + 308 , 14 @ @ Function VerifyPortsAreAvailable <nl> $ rpcAddress = $ args [ 1 ] - replace " " , " " <nl> } <nl> } <nl> - if ( $ listenAddress - eq " unknown " ) <nl> + if ( [ string ] : : IsNullOrEmpty ( $ listenAddress ) ) <nl> { <nl> - echo " Failed to parse listen _ address from cassandra . yaml to check open ports . Aborting startup . " <nl> + Write - Error " Failed to parse listen _ address from cassandra . yaml to check open ports . Aborting startup . " <nl> Exit <nl> } <nl> - if ( $ rpcAddress - eq " unknown " ) <nl> + if ( [ string ] : : IsNullOrEmpty ( $ rpcAddress ) ) <nl> { <nl> - echo " Failed to parse rpc _ address from cassandra . yaml to check open ports . Aborting startup . " <nl> + Write - Error " Failed to parse rpc _ address from cassandra . yaml to check open ports . Aborting startup . " <nl> Exit <nl> } <nl> <nl> @ @ - 335 , 6 + 336 , 11 @ @ Function VerifyPortsAreAvailable <nl> } <nl> } <nl> } <nl> + if ( [ string ] : : IsNullOrEmpty ( $ env : JMX _ PORT ) ) <nl> + { <nl> + Write - Error " No JMX _ PORT is set in environment . Aborting startup . " <nl> + Exit <nl> + } <nl> CheckPort $ listenAddress " jmx _ port : $ env : JMX _ PORT " <nl> } <nl>
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / bin / cassandra . ps1 b / bin / cassandra . ps1 
 index 3884fa5 . . 80049ee 100644 
 - - - a / bin / cassandra . ps1 
 + + + b / bin / cassandra . ps1 
 @ @ - 269 , 6 + 269 , 7 @ @ $ env : JAVA _ BIN 
 WARNING ! Failed to write pidfile to $ pidfile . stop - server . bat and 
 startup protection will not be available . 
 " @ 
 + echo $ _ . Exception . Message 
 exit 1 
 } 
 
 @ @ - 292 , 8 + 293 , 8 @ @ Function VerifyPortsAreAvailable 
 $ toMatch = @ ( " storage _ port : " , " ssl _ storage _ port : " , " native _ transport _ port : " , " rpc _ port " ) 
 $ yaml = Get - Content " $ env : CASSANDRA _ CONF \ cassandra . yaml " 
 
 - $ listenAddress = " unknown " 
 - $ rpcAddress = " unknown " 
 + $ listenAddress = " " 
 + $ rpcAddress = " " 
 foreach ( $ line in $ yaml ) 
 { 
 if ( $ line - match " ^ listen _ address : " ) 
 @ @ - 307 , 14 + 308 , 14 @ @ Function VerifyPortsAreAvailable 
 $ rpcAddress = $ args [ 1 ] - replace " " , " " 
 } 
 } 
 - if ( $ listenAddress - eq " unknown " ) 
 + if ( [ string ] : : IsNullOrEmpty ( $ listenAddress ) ) 
 { 
 - echo " Failed to parse listen _ address from cassandra . yaml to check open ports . Aborting startup . " 
 + Write - Error " Failed to parse listen _ address from cassandra . yaml to check open ports . Aborting startup . " 
 Exit 
 } 
 - if ( $ rpcAddress - eq " unknown " ) 
 + if ( [ string ] : : IsNullOrEmpty ( $ rpcAddress ) ) 
 { 
 - echo " Failed to parse rpc _ address from cassandra . yaml to check open ports . Aborting startup . " 
 + Write - Error " Failed to parse rpc _ address from cassandra . yaml to check open ports . Aborting startup . " 
 Exit 
 } 
 
 @ @ - 335 , 6 + 336 , 11 @ @ Function VerifyPortsAreAvailable 
 } 
 } 
 } 
 + if ( [ string ] : : IsNullOrEmpty ( $ env : JMX _ PORT ) ) 
 + { 
 + Write - Error " No JMX _ PORT is set in environment . Aborting startup . " 
 + Exit 
 + } 
 CheckPort $ listenAddress " jmx _ port : $ env : JMX _ PORT " 
 } 


NEAREST DIFF:
ELIMINATEDSENTENCE
