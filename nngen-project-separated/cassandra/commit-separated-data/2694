BLEU SCORE: 0.04767707020457096

TEST MSG: Silence errors about java agent in debian scripts .
GENERATED MSG: ignore min / max compactions settings in LCS

TEST DIFF (one line): diff - - git a / debian / cassandra . in . sh b / debian / cassandra . in . sh <nl> index 13005e2 . . 4da19d8 100644 <nl> - - - a / debian / cassandra . in . sh <nl> + + + b / debian / cassandra . in . sh <nl> @ @ - 19 , 4 + 19 , 12 @ @ for jar in / usr / share / cassandra / * . jar ; do <nl> CLASSPATH = $ CLASSPATH : $ jar <nl> done <nl> <nl> - CLASSPATH = " $ CLASSPATH : $ EXTRA _ CLASSPATH " <nl> \ No newline at end of file <nl> + CLASSPATH = " $ CLASSPATH : $ EXTRA _ CLASSPATH " <nl> + <nl> + <nl> + # set JVM javaagent opts to avoid warnings / errors <nl> + if [ " $ JVM _ VENDOR " ! = " OpenJDK " - o " $ JVM _ VERSION " \ > " 1 . 6 . 0 " ] \ <nl> + | | [ " $ JVM _ VERSION " = " 1 . 6 . 0 " - a " $ JVM _ PATCH _ VERSION " - ge 23 ] <nl> + then <nl> + JAVA _ AGENT = " $ JAVA _ AGENT - javaagent : $ CASSANDRA _ HOME / lib / jamm - 0 . 2 . 5 . jar " <nl> + fi
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 4d0951e . . 9504d25 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 9 , 6 + 9 , 8 @ @ <nl> <nl> <nl> 1 . 1 . 1 - dev <nl> + * ignore min / max compactions settings in LCS , while preserving <nl> + behavior that min = max = 0 disables autocompaction ( CASSANDRA - 4233 ) <nl> * log number of rows read from saved cache ( CASSANDRA - 4249 ) <nl> * calculate exact size required for cleanup operations ( CASSANDRA - 1404 ) <nl> * avoid blocking additional writes during flush when the commitlog <nl> diff - - git a / src / java / org / apache / cassandra / db / CollationController . java b / src / java / org / apache / cassandra / db / CollationController . java <nl> index eb7b7b5 . . 675c6ea 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CollationController . java <nl> + + + b / src / java / org / apache / cassandra / db / CollationController . java <nl> @ @ - 74 , 7 + 74 , 7 @ @ public class CollationController <nl> { <nl> logger . debug ( " collectTimeOrderedData " ) ; <nl> <nl> - / / AtomicSortedColumns doesn ' t work for super columns ( see # 3821 ) <nl> + / / AtomicSortedColumns doesn ' t work for super columi ns ( see # 3821 ) <nl> ISortedColumns . Factory factory = mutableColumns <nl> ? cfs . metadata . cfType = = ColumnFamilyType . Super ? ThreadSafeSortedColumns . factory ( ) : AtomicSortedColumns . factory ( ) <nl> : TreeMapBackedSortedColumns . factory ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 39f5fbe . . f3b139b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1843 , 7 + 1843 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> this . maxCompactionThreshold . set ( maxCompactionThreshold ) ; <nl> } <nl> <nl> - public boolean isCompactionDisabled ( ) <nl> + public boolean giisCompactionDisabled ( ) <nl> { <nl> return getMinimumCompactionThreshold ( ) < = 0 | | getMaximumCompactionThreshold ( ) < = 0 ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> index 483eae6 . . 454a1bb 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> @ @ - 75 , 9 + 75 , 6 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy implem <nl> <nl> manifest = LeveledManifest . create ( cfs , this . maxSSTableSizeInMB ) ; <nl> logger . debug ( " Created { } " , manifest ) ; <nl> - / / override min / max for this strategy <nl> - cfs . setMaximumCompactionThreshold ( Integer . MAX _ VALUE ) ; <nl> - cfs . setMinimumCompactionThreshold ( 1 ) ; <nl> } <nl> <nl> public void shutdown ( ) <nl> @ @ - 91 , 8 + 88 , 20 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy implem <nl> return manifest . getLevelSize ( i ) ; <nl> } <nl> <nl> + / * * <nl> + * the only difference between background and maximal in LCS is that maximal is still allowed <nl> + * ( by explicit user request ) even when compaction is disabled . <nl> + * / <nl> public AbstractCompactionTask getNextBackgroundTask ( int gcBefore ) <nl> { <nl> + if ( cfs . isCompactionDisabled ( ) ) <nl> + return null ; <nl> + <nl> + return getMaximalTask ( gcBefore ) ; <nl> + } <nl> + <nl> + public AbstractCompactionTask getMaximalTask ( int gcBefore ) <nl> + { <nl> LeveledCompactionTask currentTask = task . get ( ) ; <nl> if ( currentTask ! = null & & ! currentTask . isDone ( ) ) <nl> { <nl> @ @ - 113 , 11 + 122 , 6 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy implem <nl> : null ; <nl> } <nl> <nl> - public AbstractCompactionTask getMaximalTask ( int gcBefore ) <nl> - { <nl> - return getNextBackgroundTask ( gcBefore ) ; <nl> - } <nl> - <nl> public AbstractCompactionTask getUserDefinedTask ( Collection < SSTableReader > sstables , int gcBefore ) <nl> { <nl> throw new UnsupportedOperationException ( " LevelDB compaction strategy does not allow user - specified compactions " ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java <nl> index e513a58 . . 68a30d5 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java <nl> @ @ - 57 , 6 + 57 , 11 @ @ public class LeveledCompactionTask extends CompactionTask <nl> return latch . getCount ( ) = = 0 ; <nl> } <nl> <nl> + public boolean markSSTablesForCompaction ( int min , int max ) <nl> + { <nl> + return super . markSSTablesForCompaction ( 1 , Integer . MAX _ VALUE ) ; <nl> + } <nl> + <nl> @ Override <nl> protected boolean newSSTableSegmentThresholdReached ( SSTableWriter writer , long position ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> index 07eb57b . . 7dfc472 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> @ @ - 467 , 7 + 467 , 7 @ @ public class LeveledManifest <nl> return generations [ i ] ; <nl> } <nl> <nl> - public int getEstimatedTasks ( ) <nl> + public synchronized int getEstimatedTasks ( ) <nl> { <nl> long tasks = 0 ; <nl> for ( int i = generations . length - 1 ; i > = 0 ; i - - ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index eed37df . . dc91747 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 2342 , 10 + 2342 , 8 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> throw new UnsupportedOperationException ( " data is currently moving to this node ; unable to leave the ring " ) ; <nl> } <nl> <nl> - / / setting ' moving ' application state <nl> Gossiper . instance . addLocalApplicationState ( ApplicationState . STATUS , valueFactory . moving ( newToken ) ) ; <nl> - <nl> - logger . info ( String . format ( " Moving % s from % s to % s . " , localAddress , getLocalToken ( ) , newToken ) ) ; <nl> + setMode ( Mode . MOVING , String . format ( " Moving % s from % s to % s . " , localAddress , getLocalToken ( ) , newToken ) , true ) ; <nl> <nl> IEndpointSnitch snitch = DatabaseDescriptor . getEndpointSnitch ( ) ; <nl> <nl> @ @ - 2414 , 8 + 2412 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> <nl> if ( ! rangesToStreamByTable . isEmpty ( ) | | ! rangesToFetch . isEmpty ( ) ) <nl> { <nl> - logger . info ( " Sleeping { } ms before start streaming / fetching ranges . " , RING _ DELAY ) ; <nl> - <nl> + setMode ( Mode . MOVING , String . format ( " Sleeping % s ms before start streaming / fetching ranges " , RING _ DELAY ) , true ) ; <nl> try <nl> { <nl> Thread . sleep ( RING _ DELAY ) ; <nl> @ @ - 2426 , 7 + 2423 , 6 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> } <nl> <nl> setMode ( Mode . MOVING , " fetching new ranges and streaming old ranges " , true ) ; <nl> - <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( " [ Move - > STREAMING ] Work Map : " + rangesToStreamByTable ) ; <nl>

TEST DIFF:
diff - - git a / debian / cassandra . in . sh b / debian / cassandra . in . sh 
 index 13005e2 . . 4da19d8 100644 
 - - - a / debian / cassandra . in . sh 
 + + + b / debian / cassandra . in . sh 
 @ @ - 19 , 4 + 19 , 12 @ @ for jar in / usr / share / cassandra / * . jar ; do 
 CLASSPATH = $ CLASSPATH : $ jar 
 done 
 
 - CLASSPATH = " $ CLASSPATH : $ EXTRA _ CLASSPATH " 
 \ No newline at end of file 
 + CLASSPATH = " $ CLASSPATH : $ EXTRA _ CLASSPATH " 
 + 
 + 
 + # set JVM javaagent opts to avoid warnings / errors 
 + if [ " $ JVM _ VENDOR " ! = " OpenJDK " - o " $ JVM _ VERSION " \ > " 1 . 6 . 0 " ] \ 
 + | | [ " $ JVM _ VERSION " = " 1 . 6 . 0 " - a " $ JVM _ PATCH _ VERSION " - ge 23 ] 
 + then 
 + JAVA _ AGENT = " $ JAVA _ AGENT - javaagent : $ CASSANDRA _ HOME / lib / jamm - 0 . 2 . 5 . jar " 
 + fi

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 4d0951e . . 9504d25 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 9 , 6 + 9 , 8 @ @ 
 
 
 1 . 1 . 1 - dev 
 + * ignore min / max compactions settings in LCS , while preserving 
 + behavior that min = max = 0 disables autocompaction ( CASSANDRA - 4233 ) 
 * log number of rows read from saved cache ( CASSANDRA - 4249 ) 
 * calculate exact size required for cleanup operations ( CASSANDRA - 1404 ) 
 * avoid blocking additional writes during flush when the commitlog 
 diff - - git a / src / java / org / apache / cassandra / db / CollationController . java b / src / java / org / apache / cassandra / db / CollationController . java 
 index eb7b7b5 . . 675c6ea 100644 
 - - - a / src / java / org / apache / cassandra / db / CollationController . java 
 + + + b / src / java / org / apache / cassandra / db / CollationController . java 
 @ @ - 74 , 7 + 74 , 7 @ @ public class CollationController 
 { 
 logger . debug ( " collectTimeOrderedData " ) ; 
 
 - / / AtomicSortedColumns doesn ' t work for super columns ( see # 3821 ) 
 + / / AtomicSortedColumns doesn ' t work for super columi ns ( see # 3821 ) 
 ISortedColumns . Factory factory = mutableColumns 
 ? cfs . metadata . cfType = = ColumnFamilyType . Super ? ThreadSafeSortedColumns . factory ( ) : AtomicSortedColumns . factory ( ) 
 : TreeMapBackedSortedColumns . factory ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 39f5fbe . . f3b139b 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1843 , 7 + 1843 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 this . maxCompactionThreshold . set ( maxCompactionThreshold ) ; 
 } 
 
 - public boolean isCompactionDisabled ( ) 
 + public boolean giisCompactionDisabled ( ) 
 { 
 return getMinimumCompactionThreshold ( ) < = 0 | | getMaximumCompactionThreshold ( ) < = 0 ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 index 483eae6 . . 454a1bb 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 @ @ - 75 , 9 + 75 , 6 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy implem 
 
 manifest = LeveledManifest . create ( cfs , this . maxSSTableSizeInMB ) ; 
 logger . debug ( " Created { } " , manifest ) ; 
 - / / override min / max for this strategy 
 - cfs . setMaximumCompactionThreshold ( Integer . MAX _ VALUE ) ; 
 - cfs . setMinimumCompactionThreshold ( 1 ) ; 
 } 
 
 public void shutdown ( ) 
 @ @ - 91 , 8 + 88 , 20 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy implem 
 return manifest . getLevelSize ( i ) ; 
 } 
 
 + / * * 
 + * the only difference between background and maximal in LCS is that maximal is still allowed 
 + * ( by explicit user request ) even when compaction is disabled . 
 + * / 
 public AbstractCompactionTask getNextBackgroundTask ( int gcBefore ) 
 { 
 + if ( cfs . isCompactionDisabled ( ) ) 
 + return null ; 
 + 
 + return getMaximalTask ( gcBefore ) ; 
 + } 
 + 
 + public AbstractCompactionTask getMaximalTask ( int gcBefore ) 
 + { 
 LeveledCompactionTask currentTask = task . get ( ) ; 
 if ( currentTask ! = null & & ! currentTask . isDone ( ) ) 
 { 
 @ @ - 113 , 11 + 122 , 6 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy implem 
 : null ; 
 } 
 
 - public AbstractCompactionTask getMaximalTask ( int gcBefore ) 
 - { 
 - return getNextBackgroundTask ( gcBefore ) ; 
 - } 
 - 
 public AbstractCompactionTask getUserDefinedTask ( Collection < SSTableReader > sstables , int gcBefore ) 
 { 
 throw new UnsupportedOperationException ( " LevelDB compaction strategy does not allow user - specified compactions " ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java 
 index e513a58 . . 68a30d5 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java 
 @ @ - 57 , 6 + 57 , 11 @ @ public class LeveledCompactionTask extends CompactionTask 
 return latch . getCount ( ) = = 0 ; 
 } 
 
 + public boolean markSSTablesForCompaction ( int min , int max ) 
 + { 
 + return super . markSSTablesForCompaction ( 1 , Integer . MAX _ VALUE ) ; 
 + } 
 + 
 @ Override 
 protected boolean newSSTableSegmentThresholdReached ( SSTableWriter writer , long position ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 index 07eb57b . . 7dfc472 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 @ @ - 467 , 7 + 467 , 7 @ @ public class LeveledManifest 
 return generations [ i ] ; 
 } 
 
 - public int getEstimatedTasks ( ) 
 + public synchronized int getEstimatedTasks ( ) 
 { 
 long tasks = 0 ; 
 for ( int i = generations . length - 1 ; i > = 0 ; i - - ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index eed37df . . dc91747 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 2342 , 10 + 2342 , 8 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 throw new UnsupportedOperationException ( " data is currently moving to this node ; unable to leave the ring " ) ; 
 } 
 
 - / / setting ' moving ' application state 
 Gossiper . instance . addLocalApplicationState ( ApplicationState . STATUS , valueFactory . moving ( newToken ) ) ; 
 - 
 - logger . info ( String . format ( " Moving % s from % s to % s . " , localAddress , getLocalToken ( ) , newToken ) ) ; 
 + setMode ( Mode . MOVING , String . format ( " Moving % s from % s to % s . " , localAddress , getLocalToken ( ) , newToken ) , true ) ; 
 
 IEndpointSnitch snitch = DatabaseDescriptor . getEndpointSnitch ( ) ; 
 
 @ @ - 2414 , 8 + 2412 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 
 if ( ! rangesToStreamByTable . isEmpty ( ) | | ! rangesToFetch . isEmpty ( ) ) 
 { 
 - logger . info ( " Sleeping { } ms before start streaming / fetching ranges . " , RING _ DELAY ) ; 
 - 
 + setMode ( Mode . MOVING , String . format ( " Sleeping % s ms before start streaming / fetching ranges " , RING _ DELAY ) , true ) ; 
 try 
 { 
 Thread . sleep ( RING _ DELAY ) ; 
 @ @ - 2426 , 7 + 2423 , 6 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 } 
 
 setMode ( Mode . MOVING , " fetching new ranges and streaming old ranges " , true ) ; 
 - 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( " [ Move - > STREAMING ] Work Map : " + rangesToStreamByTable ) ; 

