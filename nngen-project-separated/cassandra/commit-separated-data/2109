BLEU SCORE: 0.040583489434387374

TEST MSG: Fix RowIndexEntry to report correct serializedSize
GENERATED MSG: merge from 1 . 0

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 3ee938a . . 58c6647 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 11 , 6 + 11 , 7 @ @ <nl> * Always send Paxos commit to all replicas ( CASSANDRA - 7479 ) <nl> * Make disruptor _ thrift _ server invocation pool configurable ( CASSANDRA - 7594 ) <nl> * Make repair no - op when RF = 1 ( CASSANDRA - 7864 ) <nl> + * Fix RowIndexEntry to report correct serializedSize ( CASSANDRA - 7948 ) <nl> Merged from 1 . 2 : <nl> * Don ' t index tombstones ( CASSANDRA - 7828 ) <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / RowIndexEntry . java b / src / java / org / apache / cassandra / db / RowIndexEntry . java <nl> index cfc7cf1 . . cdafd5d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RowIndexEntry . java <nl> + + + b / src / java / org / apache / cassandra / db / RowIndexEntry . java <nl> @ @ - 45 , 7 + 45 , 19 @ @ public class RowIndexEntry implements IMeasurableMemory <nl> <nl> public int serializedSize ( ) <nl> { <nl> - return TypeSizes . NATIVE . sizeof ( position ) + promotedSize ( ) ; <nl> + int size = TypeSizes . NATIVE . sizeof ( position ) + TypeSizes . NATIVE . sizeof ( promotedSize ( ) ) ; <nl> + <nl> + if ( isIndexed ( ) ) <nl> + { <nl> + List < IndexHelper . IndexInfo > index = columnsIndex ( ) ; <nl> + <nl> + size + = DeletionTime . serializer . serializedSize ( deletionTime ( ) , TypeSizes . NATIVE ) ; <nl> + size + = TypeSizes . NATIVE . sizeof ( index . size ( ) ) ; <nl> + for ( IndexHelper . IndexInfo info : index ) <nl> + size + = info . serializedSize ( TypeSizes . NATIVE ) ; <nl> + } <nl> + <nl> + return size ; <nl> } <nl> <nl> protected int promotedSize ( ) <nl> diff - - git a / test / unit / org / apache / cassandra / db / RowIndexEntryTest . java b / test / unit / org / apache / cassandra / db / RowIndexEntryTest . java <nl> new file mode 100644 <nl> index 0000000 . . 9728f1f <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / db / RowIndexEntryTest . java <nl> @ @ - 0 , 0 + 1 , 64 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . db ; <nl> + <nl> + import java . io . IOException ; <nl> + <nl> + import junit . framework . Assert ; <nl> + import org . apache . cassandra . SchemaLoader ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> + import org . junit . Test ; <nl> + <nl> + public class RowIndexEntryTest extends SchemaLoader <nl> + { <nl> + @ Test <nl> + public void testSerializedSize ( ) throws IOException <nl> + { <nl> + final RowIndexEntry simple = new RowIndexEntry ( 123 ) ; <nl> + <nl> + DataOutputBuffer buffer = new DataOutputBuffer ( ) ; <nl> + RowIndexEntry . serializer . serialize ( simple , buffer ) ; <nl> + <nl> + Assert . assertEquals ( buffer . size ( ) , simple . serializedSize ( ) ) ; <nl> + <nl> + buffer = new DataOutputBuffer ( ) ; <nl> + ColumnFamily cf = ArrayBackedSortedColumns . factory . create ( " Keyspace1 " , " Standard1 " ) ; <nl> + ColumnIndex columnIndex = new ColumnIndex . Builder ( cf , ByteBufferUtil . bytes ( " a " ) , new DataOutputBuffer ( ) ) <nl> + { { <nl> + int idx = 0 , size = 0 ; <nl> + Column column ; <nl> + do <nl> + { <nl> + column = new Column ( ByteBufferUtil . bytes ( " c " + idx + + ) , ByteBufferUtil . bytes ( " v " ) , FBUtilities . timestampMicros ( ) ) ; <nl> + size + = column . serializedSize ( TypeSizes . NATIVE ) ; <nl> + <nl> + add ( column ) ; <nl> + } <nl> + while ( size < DatabaseDescriptor . getColumnIndexSize ( ) * 3 ) ; <nl> + <nl> + } } . build ( ) ; <nl> + <nl> + RowIndexEntry withIndex = RowIndexEntry . create ( 0xdeadbeef , DeletionTime . LIVE , columnIndex ) ; <nl> + <nl> + RowIndexEntry . serializer . serialize ( withIndex , buffer ) ; <nl> + Assert . assertEquals ( buffer . size ( ) , withIndex . serializedSize ( ) ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d518830 . . 52cc2c1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 29 , 7 + 29 , 7 @ @ <nl> * add scheduler JMX metrics ( CASSANDRA - 2962 ) <nl> * add block level checksum for compressed data ( CASSANDRA - 1717 ) <nl> * make column family backed column map pluggable and introduce unsynchronized <nl> - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) <nl> + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) <nl> * refactoring of the secondary index api ( CASSANDRA - 2982 ) <nl> * make CL > ONE reads wait for digest reconciliation before returning <nl> ( CASSANDRA - 2494 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> index c316a85 . . 71c7213 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor <nl> this . reversed = reversed ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public AbstractType < ? > getComparator ( ) <nl> { <nl> return comparator ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 1239d1c . . 38bc0d7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer <nl> this . cfm = cfm ; <nl> } <nl> <nl> - public ColumnFamily cloneMeShallow ( ) <nl> + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) <nl> { <nl> - ColumnFamily cf = ColumnFamily . create ( cfm ) ; <nl> + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; <nl> / / since deletion info is immutable , aliasing it is fine <nl> cf . deletionInfo . set ( deletionInfo . get ( ) ) ; <nl> return cf ; <nl> } <nl> <nl> + public ColumnFamily cloneMeShallow ( ) <nl> + { <nl> + return cloneMeShallow ( columns . getFactory ( ) ) ; <nl> + } <nl> + <nl> public AbstractType getSubComparator ( ) <nl> { <nl> IColumnSerializer s = getColumnSerializer ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 0bfd1c5 . . 552d3e9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> - * tombstones that are no longer relevant . * / <nl> + / * * <nl> + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> + * tombstones that are no longer relevant . <nl> + * The returned column family won ' t be thread safe . <nl> + * / <nl> ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) <nl> { <nl> / / special case slicing the entire row : <nl> @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; <nl> if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) <nl> { <nl> - ColumnFamily cf = cached . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> if ( sc ! = null ) <nl> cf . addColumn ( sc , HeapAllocator . instance ) ; <nl> return removeDeleted ( cf , gcBefore ) ; <nl> @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> <nl> IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; <nl> - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; <nl> / / TODO this is necessary because when we collate supercolumns together , we don ' t check <nl> / / their subcolumns for relevance , so we need to do a second prune post facto here . <nl> diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> index 37f5a60 . . 624dec7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns <nl> public ISortedColumns cloneMe ( ) ; <nl> <nl> / * * <nl> + * Returns the factory used for this ISortedColumns implementation . <nl> + * / <nl> + public Factory getFactory ( ) ; <nl> + <nl> + / * * <nl> * Adds a column to this column map . <nl> * If a column with the same name is already present in the map , it will <nl> * be replaced by the newly added column . <nl> diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> index cd2488a . . 13a111a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new ThreadSafeSortedColumns ( this ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> index 34e83dc . . 6c3fc42 100644 <nl> - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new TreeMapBackedSortedColumns ( this ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 3ee938a . . 58c6647 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 11 , 6 + 11 , 7 @ @ 
 * Always send Paxos commit to all replicas ( CASSANDRA - 7479 ) 
 * Make disruptor _ thrift _ server invocation pool configurable ( CASSANDRA - 7594 ) 
 * Make repair no - op when RF = 1 ( CASSANDRA - 7864 ) 
 + * Fix RowIndexEntry to report correct serializedSize ( CASSANDRA - 7948 ) 
 Merged from 1 . 2 : 
 * Don ' t index tombstones ( CASSANDRA - 7828 ) 
 
 diff - - git a / src / java / org / apache / cassandra / db / RowIndexEntry . java b / src / java / org / apache / cassandra / db / RowIndexEntry . java 
 index cfc7cf1 . . cdafd5d 100644 
 - - - a / src / java / org / apache / cassandra / db / RowIndexEntry . java 
 + + + b / src / java / org / apache / cassandra / db / RowIndexEntry . java 
 @ @ - 45 , 7 + 45 , 19 @ @ public class RowIndexEntry implements IMeasurableMemory 
 
 public int serializedSize ( ) 
 { 
 - return TypeSizes . NATIVE . sizeof ( position ) + promotedSize ( ) ; 
 + int size = TypeSizes . NATIVE . sizeof ( position ) + TypeSizes . NATIVE . sizeof ( promotedSize ( ) ) ; 
 + 
 + if ( isIndexed ( ) ) 
 + { 
 + List < IndexHelper . IndexInfo > index = columnsIndex ( ) ; 
 + 
 + size + = DeletionTime . serializer . serializedSize ( deletionTime ( ) , TypeSizes . NATIVE ) ; 
 + size + = TypeSizes . NATIVE . sizeof ( index . size ( ) ) ; 
 + for ( IndexHelper . IndexInfo info : index ) 
 + size + = info . serializedSize ( TypeSizes . NATIVE ) ; 
 + } 
 + 
 + return size ; 
 } 
 
 protected int promotedSize ( ) 
 diff - - git a / test / unit / org / apache / cassandra / db / RowIndexEntryTest . java b / test / unit / org / apache / cassandra / db / RowIndexEntryTest . java 
 new file mode 100644 
 index 0000000 . . 9728f1f 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / db / RowIndexEntryTest . java 
 @ @ - 0 , 0 + 1 , 64 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . db ; 
 + 
 + import java . io . IOException ; 
 + 
 + import junit . framework . Assert ; 
 + import org . apache . cassandra . SchemaLoader ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . io . util . DataOutputBuffer ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 + import org . junit . Test ; 
 + 
 + public class RowIndexEntryTest extends SchemaLoader 
 + { 
 + @ Test 
 + public void testSerializedSize ( ) throws IOException 
 + { 
 + final RowIndexEntry simple = new RowIndexEntry ( 123 ) ; 
 + 
 + DataOutputBuffer buffer = new DataOutputBuffer ( ) ; 
 + RowIndexEntry . serializer . serialize ( simple , buffer ) ; 
 + 
 + Assert . assertEquals ( buffer . size ( ) , simple . serializedSize ( ) ) ; 
 + 
 + buffer = new DataOutputBuffer ( ) ; 
 + ColumnFamily cf = ArrayBackedSortedColumns . factory . create ( " Keyspace1 " , " Standard1 " ) ; 
 + ColumnIndex columnIndex = new ColumnIndex . Builder ( cf , ByteBufferUtil . bytes ( " a " ) , new DataOutputBuffer ( ) ) 
 + { { 
 + int idx = 0 , size = 0 ; 
 + Column column ; 
 + do 
 + { 
 + column = new Column ( ByteBufferUtil . bytes ( " c " + idx + + ) , ByteBufferUtil . bytes ( " v " ) , FBUtilities . timestampMicros ( ) ) ; 
 + size + = column . serializedSize ( TypeSizes . NATIVE ) ; 
 + 
 + add ( column ) ; 
 + } 
 + while ( size < DatabaseDescriptor . getColumnIndexSize ( ) * 3 ) ; 
 + 
 + } } . build ( ) ; 
 + 
 + RowIndexEntry withIndex = RowIndexEntry . create ( 0xdeadbeef , DeletionTime . LIVE , columnIndex ) ; 
 + 
 + RowIndexEntry . serializer . serialize ( withIndex , buffer ) ; 
 + Assert . assertEquals ( buffer . size ( ) , withIndex . serializedSize ( ) ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d518830 . . 52cc2c1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 29 , 7 + 29 , 7 @ @ 
 * add scheduler JMX metrics ( CASSANDRA - 2962 ) 
 * add block level checksum for compressed data ( CASSANDRA - 1717 ) 
 * make column family backed column map pluggable and introduce unsynchronized 
 - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) 
 + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) 
 * refactoring of the secondary index api ( CASSANDRA - 2982 ) 
 * make CL > ONE reads wait for digest reconciliation before returning 
 ( CASSANDRA - 2494 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 index c316a85 . . 71c7213 100644 
 - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor 
 this . reversed = reversed ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public AbstractType < ? > getComparator ( ) 
 { 
 return comparator ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 1239d1c . . 38bc0d7 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer 
 this . cfm = cfm ; 
 } 
 
 - public ColumnFamily cloneMeShallow ( ) 
 + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) 
 { 
 - ColumnFamily cf = ColumnFamily . create ( cfm ) ; 
 + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; 
 / / since deletion info is immutable , aliasing it is fine 
 cf . deletionInfo . set ( deletionInfo . get ( ) ) ; 
 return cf ; 
 } 
 
 + public ColumnFamily cloneMeShallow ( ) 
 + { 
 + return cloneMeShallow ( columns . getFactory ( ) ) ; 
 + } 
 + 
 public AbstractType getSubComparator ( ) 
 { 
 IColumnSerializer s = getColumnSerializer ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 0bfd1c5 . . 552d3e9 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 - * tombstones that are no longer relevant . * / 
 + / * * 
 + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 + * tombstones that are no longer relevant . 
 + * The returned column family won ' t be thread safe . 
 + * / 
 ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) 
 { 
 / / special case slicing the entire row : 
 @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; 
 if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) 
 { 
 - ColumnFamily cf = cached . cloneMeShallow ( ) ; 
 + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 if ( sc ! = null ) 
 cf . addColumn ( sc , HeapAllocator . instance ) ; 
 return removeDeleted ( cf , gcBefore ) ; 
 @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 
 IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; 
 - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; 
 + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; 
 / / TODO this is necessary because when we collate supercolumns together , we don ' t check 
 / / their subcolumns for relevance , so we need to do a second prune post facto here . 
 diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 index 37f5a60 . . 624dec7 100644 
 - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns 
 public ISortedColumns cloneMe ( ) ; 
 
 / * * 
 + * Returns the factory used for this ISortedColumns implementation . 
 + * / 
 + public Factory getFactory ( ) ; 
 + 
 + / * * 
 * Adds a column to this column map . 
 * If a column with the same name is already present in the map , it will 
 * be replaced by the newly added column . 
 diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 index cd2488a . . 13a111a 100644 
 - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new ThreadSafeSortedColumns ( this ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 index 34e83dc . . 6c3fc42 100644 
 - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new TreeMapBackedSortedColumns ( this ) ;
