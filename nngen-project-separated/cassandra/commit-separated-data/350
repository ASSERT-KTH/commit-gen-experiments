BLEU SCORE: 0.040583489434387374

TEST MSG: Improve handling of IR prepare failures
GENERATED MSG: Start compaction when incremental repair finishes

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6cd8bc5 . . 9584f63 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Improve handling of IR prepare failures ( CASSANDRA - 13672 ) <nl> * Send IR coordinator messages synchronously ( CASSANDRA - 13673 ) <nl> * Flush system . repair table before IR finalize promise ( CASSANDRA - 13660 ) <nl> * Fix column filter creation for wildcard queries ( CASSANDRA - 13650 ) <nl> diff - - git a / src / java / org / apache / cassandra / repair / consistent / CoordinatorSession . java b / src / java / org / apache / cassandra / repair / consistent / CoordinatorSession . java <nl> index 830ed2c . . d0ec7fd 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / consistent / CoordinatorSession . java <nl> + + + b / src / java / org / apache / cassandra / repair / consistent / CoordinatorSession . java <nl> @ @ - 240 , 6 + 240 , 10 @ @ public class CoordinatorSession extends ConsistentSession <nl> } <nl> } <nl> setAll ( State . FAILED ) ; <nl> + <nl> + String exceptionMsg = String . format ( " Incremental repair session % s has failed " , sessionID ) ; <nl> + finalizeProposeFuture . setException ( new RuntimeException ( exceptionMsg ) ) ; <nl> + prepareFuture . setException ( new RuntimeException ( exceptionMsg ) ) ; <nl> } <nl> <nl> private static String formatDuration ( long then , long now ) <nl> diff - - git a / src / java / org / apache / cassandra / repair / consistent / LocalSessions . java b / src / java / org / apache / cassandra / repair / consistent / LocalSessions . java <nl> index 61df2b0 . . a25f65c 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / consistent / LocalSessions . java <nl> + + + b / src / java / org / apache / cassandra / repair / consistent / LocalSessions . java <nl> @ @ - 568 , 8 + 568 , 21 @ @ public class LocalSessions <nl> <nl> public void onFailure ( Throwable t ) <nl> { <nl> - logger . error ( String . format ( " Prepare phase for incremental repair session % s failed " , sessionID ) , t ) ; <nl> - failSession ( sessionID ) ; <nl> + logger . error ( " Prepare phase for incremental repair session { } failed " , sessionID , t ) ; <nl> + if ( t instanceof PendingAntiCompaction . SSTableAcquisitionException ) <nl> + { <nl> + logger . warn ( " Prepare phase for incremental repair session { } was unable to " + <nl> + " acquire exclusive access to the neccesary sstables . " + <nl> + " This is usually caused by running multiple incremental repairs on nodes that share token ranges " , <nl> + sessionID ) ; <nl> + <nl> + } <nl> + else <nl> + { <nl> + logger . error ( " Prepare phase for incremental repair session { } failed " , sessionID , t ) ; <nl> + } <nl> + sendMessage ( coordinator , new PrepareConsistentResponse ( sessionID , getBroadcastAddress ( ) , false ) ) ; <nl> + failSession ( sessionID , false ) ; <nl> executor . shutdown ( ) ; <nl> } <nl> } ) ; <nl> diff - - git a / src / java / org / apache / cassandra / repair / consistent / PendingAntiCompaction . java b / src / java / org / apache / cassandra / repair / consistent / PendingAntiCompaction . java <nl> index f183d14 . . e37fb19 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / consistent / PendingAntiCompaction . java <nl> + + + b / src / java / org / apache / cassandra / repair / consistent / PendingAntiCompaction . java <nl> @ @ - 76 , 6 + 76 , 8 @ @ public class PendingAntiCompaction <nl> } <nl> } <nl> <nl> + static class SSTableAcquisitionException extends RuntimeException { } <nl> + <nl> static class AcquisitionCallable implements Callable < AcquireResult > <nl> { <nl> private final ColumnFamilyStore cfs ; <nl> @ @ - 150 , 7 + 152 , 7 @ @ public class PendingAntiCompaction <nl> result . abort ( ) ; <nl> } <nl> } <nl> - return Futures . immediateFailedFuture ( new RuntimeException ( " unable to acquire sstables " ) ) ; <nl> + return Futures . immediateFailedFuture ( new SSTableAcquisitionException ( ) ) ; <nl> } <nl> else <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / repair / consistent / LocalSessionTest . java b / test / unit / org / apache / cassandra / repair / consistent / LocalSessionTest . java <nl> index 3b48051 . . c59462e 100644 <nl> - - - a / test / unit / org / apache / cassandra / repair / consistent / LocalSessionTest . java <nl> + + + b / test / unit / org / apache / cassandra / repair / consistent / LocalSessionTest . java <nl> @ @ - 303 , 7 + 303 , 7 @ @ public class LocalSessionTest extends AbstractRepairTest <nl> Assert . assertEquals ( session , sessions . loadUnsafe ( sessionID ) ) ; <nl> <nl> / / . . . and we should have sent a success message back to the coordinator <nl> - assertMessagesSent ( sessions , COORDINATOR , new FailSession ( sessionID ) ) ; <nl> + assertMessagesSent ( sessions , COORDINATOR , new PrepareConsistentResponse ( sessionID , PARTICIPANT1 , false ) ) ; <nl> <nl> } <nl>
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6cd8bc5 . . 9584f63 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Improve handling of IR prepare failures ( CASSANDRA - 13672 ) 
 * Send IR coordinator messages synchronously ( CASSANDRA - 13673 ) 
 * Flush system . repair table before IR finalize promise ( CASSANDRA - 13660 ) 
 * Fix column filter creation for wildcard queries ( CASSANDRA - 13650 ) 
 diff - - git a / src / java / org / apache / cassandra / repair / consistent / CoordinatorSession . java b / src / java / org / apache / cassandra / repair / consistent / CoordinatorSession . java 
 index 830ed2c . . d0ec7fd 100644 
 - - - a / src / java / org / apache / cassandra / repair / consistent / CoordinatorSession . java 
 + + + b / src / java / org / apache / cassandra / repair / consistent / CoordinatorSession . java 
 @ @ - 240 , 6 + 240 , 10 @ @ public class CoordinatorSession extends ConsistentSession 
 } 
 } 
 setAll ( State . FAILED ) ; 
 + 
 + String exceptionMsg = String . format ( " Incremental repair session % s has failed " , sessionID ) ; 
 + finalizeProposeFuture . setException ( new RuntimeException ( exceptionMsg ) ) ; 
 + prepareFuture . setException ( new RuntimeException ( exceptionMsg ) ) ; 
 } 
 
 private static String formatDuration ( long then , long now ) 
 diff - - git a / src / java / org / apache / cassandra / repair / consistent / LocalSessions . java b / src / java / org / apache / cassandra / repair / consistent / LocalSessions . java 
 index 61df2b0 . . a25f65c 100644 
 - - - a / src / java / org / apache / cassandra / repair / consistent / LocalSessions . java 
 + + + b / src / java / org / apache / cassandra / repair / consistent / LocalSessions . java 
 @ @ - 568 , 8 + 568 , 21 @ @ public class LocalSessions 
 
 public void onFailure ( Throwable t ) 
 { 
 - logger . error ( String . format ( " Prepare phase for incremental repair session % s failed " , sessionID ) , t ) ; 
 - failSession ( sessionID ) ; 
 + logger . error ( " Prepare phase for incremental repair session { } failed " , sessionID , t ) ; 
 + if ( t instanceof PendingAntiCompaction . SSTableAcquisitionException ) 
 + { 
 + logger . warn ( " Prepare phase for incremental repair session { } was unable to " + 
 + " acquire exclusive access to the neccesary sstables . " + 
 + " This is usually caused by running multiple incremental repairs on nodes that share token ranges " , 
 + sessionID ) ; 
 + 
 + } 
 + else 
 + { 
 + logger . error ( " Prepare phase for incremental repair session { } failed " , sessionID , t ) ; 
 + } 
 + sendMessage ( coordinator , new PrepareConsistentResponse ( sessionID , getBroadcastAddress ( ) , false ) ) ; 
 + failSession ( sessionID , false ) ; 
 executor . shutdown ( ) ; 
 } 
 } ) ; 
 diff - - git a / src / java / org / apache / cassandra / repair / consistent / PendingAntiCompaction . java b / src / java / org / apache / cassandra / repair / consistent / PendingAntiCompaction . java 
 index f183d14 . . e37fb19 100644 
 - - - a / src / java / org / apache / cassandra / repair / consistent / PendingAntiCompaction . java 
 + + + b / src / java / org / apache / cassandra / repair / consistent / PendingAntiCompaction . java 
 @ @ - 76 , 6 + 76 , 8 @ @ public class PendingAntiCompaction 
 } 
 } 
 
 + static class SSTableAcquisitionException extends RuntimeException { } 
 + 
 static class AcquisitionCallable implements Callable < AcquireResult > 
 { 
 private final ColumnFamilyStore cfs ; 
 @ @ - 150 , 7 + 152 , 7 @ @ public class PendingAntiCompaction 
 result . abort ( ) ; 
 } 
 } 
 - return Futures . immediateFailedFuture ( new RuntimeException ( " unable to acquire sstables " ) ) ; 
 + return Futures . immediateFailedFuture ( new SSTableAcquisitionException ( ) ) ; 
 } 
 else 
 { 
 diff - - git a / test / unit / org / apache / cassandra / repair / consistent / LocalSessionTest . java b / test / unit / org / apache / cassandra / repair / consistent / LocalSessionTest . java 
 index 3b48051 . . c59462e 100644 
 - - - a / test / unit / org / apache / cassandra / repair / consistent / LocalSessionTest . java 
 + + + b / test / unit / org / apache / cassandra / repair / consistent / LocalSessionTest . java 
 @ @ - 303 , 7 + 303 , 7 @ @ public class LocalSessionTest extends AbstractRepairTest 
 Assert . assertEquals ( session , sessions . loadUnsafe ( sessionID ) ) ; 
 
 / / . . . and we should have sent a success message back to the coordinator 
 - assertMessagesSent ( sessions , COORDINATOR , new FailSession ( sessionID ) ) ; 
 + assertMessagesSent ( sessions , COORDINATOR , new PrepareConsistentResponse ( sessionID , PARTICIPANT1 , false ) ) ; 
 
 } 


NEAREST DIFF:
ELIMINATEDSENTENCE
