BLEU SCORE: 0.04372912656590315

TEST MSG: Fix native protocol CAS batches
GENERATED MSG: Avoid NPE ( and cleanups )

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index ac95e3f . . 97ac75e 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 9 <nl> + * Fix native protocol CAS batches ( CASSANDRA - 7337 ) <nl> * Add per - CF range read request latency metrics ( CASSANDRA - 7338 ) <nl> * Fix NPE in StreamTransferTask . createMessageForRetry ( ) ( CASSANDRA - 7323 ) <nl> * Add conditional CREATE / DROP USER support ( CASSANDRA - 7264 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> index 3d9c5a8 . . a59fe9b 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> @ @ - 316 , 8 + 316 , 7 @ @ public class QueryProcessor implements QueryHandler <nl> batch . checkAccess ( clientState ) ; <nl> batch . validate ( clientState ) ; <nl> <nl> - batch . executeWithPerStatementVariables ( options . getConsistency ( ) , queryState , options . getValues ( ) ) ; <nl> - return new ResultMessage . Void ( ) ; <nl> + return batch . executeWithPerStatementVariables ( options . getConsistency ( ) , queryState , options . getValues ( ) ) ; <nl> } <nl> <nl> public static ParsedStatement . Prepared getStatement ( String queryStr , ClientState clientState ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> index 875e41c . . 8fc1ecc 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> @ @ - 64 , 11 + 64 , 6 @ @ public class BatchStatement implements CQLStatement , MeasurableForPreparedCache <nl> * @ param statements a list of UpdateStatements <nl> * @ param attrs additional attributes for statement ( CL , timestamp , timeToLive ) <nl> * / <nl> - public BatchStatement ( int boundTerms , Type type , List < ModificationStatement > statements , Attributes attrs ) <nl> - { <nl> - this ( boundTerms , type , statements , attrs , false ) ; <nl> - } <nl> - <nl> public BatchStatement ( int boundTerms , Type type , List < ModificationStatement > statements , Attributes attrs , boolean hasConditions ) <nl> { <nl> this . boundTerms = boundTerms ; <nl> @ @ - 254 , 7 + 249 , 7 @ @ public class BatchStatement implements CQLStatement , MeasurableForPreparedCache <nl> return executeWithConditions ( variables , cl , serialCl , now ) ; <nl> <nl> executeWithoutConditions ( getMutations ( variables , local , cl , now ) , cl ) ; <nl> - return null ; <nl> + return new ResultMessage . Void ( ) ; <nl> } <nl> <nl> private void executeWithoutConditions ( Collection < ? extends IMutation > mutations , ConsistencyLevel cl ) throws RequestExecutionException , RequestValidationException <nl> diff - - git a / src / java / org / apache / cassandra / transport / messages / BatchMessage . java b / src / java / org / apache / cassandra / transport / messages / BatchMessage . java <nl> index 221dcd9 . . 34dd8fe 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / messages / BatchMessage . java <nl> + + + b / src / java / org / apache / cassandra / transport / messages / BatchMessage . java <nl> @ @ - 162 , 6 + 162 , 7 @ @ public class BatchMessage extends Message . Request <nl> <nl> QueryHandler handler = state . getClientState ( ) . getCQLQueryHandler ( ) ; <nl> List < ModificationStatement > statements = new ArrayList < ModificationStatement > ( queryOrIdList . size ( ) ) ; <nl> + boolean hasConditions = false ; <nl> for ( int i = 0 ; i < queryOrIdList . size ( ) ; i + + ) <nl> { <nl> Object query = queryOrIdList . get ( i ) ; <nl> @ @ - 186 , 6 + 187 , 7 @ @ public class BatchMessage extends Message . Request <nl> throw new InvalidRequestException ( " Invalid statement in batch : only UPDATE , INSERT and DELETE statements are allowed . " ) ; <nl> <nl> ModificationStatement mst = ( ModificationStatement ) statement ; <nl> + hasConditions | = mst . hasConditions ( ) ; <nl> if ( mst . isCounter ( ) ) <nl> { <nl> if ( type ! = BatchStatement . Type . COUNTER ) <nl> @ @ - 201 , 7 + 203 , 7 @ @ public class BatchMessage extends Message . Request <nl> <nl> / / Note : It ' s ok at this point to pass a bogus value for the number of bound terms in the BatchState ctor <nl> / / ( and no value would be really correct , so we prefer passing a clearly wrong one ) . <nl> - BatchStatement batch = new BatchStatement ( - 1 , type , statements , Attributes . none ( ) ) ; <nl> + BatchStatement batch = new BatchStatement ( - 1 , type , statements , Attributes . none ( ) , hasConditions ) ; <nl> Message . Response response = handler . processBatch ( batch , state , new BatchQueryOptions ( consistency , values , queryOrIdList ) ) ; <nl> <nl> if ( tracingId ! = null )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f5ae4e3 . . 98929cf 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 57 , 6 + 57 , 7 @ @ <nl> * Rewrite nodetool help ( CASSANDRA - 2293 ) <nl> * Make CQL3 the default for CQL ( CASSANDRA - 4640 ) <nl> * update stress tool to be able to use CQL3 ( CASSANDRA - 4406 ) <nl> + * Accept all thrift update on CQL3 cf but don ' t expose their metadata ( CASSANDRA - 4377 ) <nl> <nl> <nl> 1 . 1 . 6 <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index 4e29fc7 . . 687b5f3 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 886 , 12 + 886 , 7 @ @ public final class CFMetaData <nl> def . setKey _ alias ( keyAliases . get ( 0 ) ) ; <nl> List < org . apache . cassandra . thrift . ColumnDef > column _ meta = new ArrayList < org . apache . cassandra . thrift . ColumnDef > ( column _ metadata . size ( ) ) ; <nl> for ( ColumnDefinition cd : column _ metadata . values ( ) ) <nl> - { <nl> - / / Non - null componentIndex are only used by CQL ( so far ) so we don ' t expose <nl> - / / them through thrift <nl> - if ( cd . componentIndex = = null ) <nl> column _ meta . add ( cd . toThrift ( ) ) ; <nl> - } <nl> def . setColumn _ metadata ( column _ meta ) ; <nl> def . setCompaction _ strategy ( compactionStrategyClass . getName ( ) ) ; <nl> def . setCompaction _ strategy _ options ( new HashMap < String , String > ( compactionStrategyOptions ) ) ; <nl> @ @ - 1425 , 6 + 1420 , 23 @ @ public final class CFMetaData <nl> return cqlCfDef ; <nl> } <nl> <nl> + / * * <nl> + * Returns whether this CFMetaData has information non exposed on thrift so <nl> + * that it cannot be correctly handled automatically by thrift clients . <nl> + * / <nl> + public boolean isThriftIncompatible ( ) <nl> + { <nl> + if ( ! cqlCfDef . isComposite ) <nl> + return false ; <nl> + <nl> + for ( ColumnDefinition columnDef : column _ metadata . values ( ) ) <nl> + { <nl> + if ( columnDef . componentIndex ! = null ) <nl> + return true ; <nl> + } <nl> + return false ; <nl> + } <nl> + <nl> @ Override <nl> public String toString ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / config / KSMetaData . java b / src / java / org / apache / cassandra / config / KSMetaData . java <nl> index 50cbb91 . . e700444 100644 <nl> - - - a / src / java / org / apache / cassandra / config / KSMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / KSMetaData . java <nl> @ @ - 179 , 7 + 179 , 11 @ @ public final class KSMetaData <nl> { <nl> List < CfDef > cfDefs = new ArrayList < CfDef > ( cfMetaData . size ( ) ) ; <nl> for ( CFMetaData cfm : cfMetaData ( ) . values ( ) ) <nl> - cfDefs . add ( cfm . toThrift ( ) ) ; <nl> + { <nl> + / / Don ' t expose CF that cannot be correctly handle by thrift ; see CASSANDRA - 4377 for further details <nl> + if ( ! cfm . isThriftIncompatible ( ) ) <nl> + cfDefs . add ( cfm . toThrift ( ) ) ; <nl> + } <nl> KsDef ksdef = new KsDef ( name , strategyClass . getName ( ) , cfDefs ) ; <nl> ksdef . setStrategy _ options ( strategyOptions ) ; <nl> ksdef . setDurable _ writes ( durableWrites ) ; <nl> diff - - git a / src / java / org / apache / cassandra / thrift / ThriftValidation . java b / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> index 36b3aca . . 93b972d 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> + + + b / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import org . apache . cassandra . db . filter . NamesQueryFilter ; <nl> import org . apache . cassandra . db . filter . SliceQueryFilter ; <nl> import org . apache . cassandra . db . index . SecondaryIndexManager ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> + import org . apache . cassandra . db . marshal . CompositeType ; <nl> import org . apache . cassandra . db . marshal . MarshalException ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . dht . RandomPartitioner ; <nl> @ @ - 395 , 7 + 396 , 7 @ @ public class ThriftValidation <nl> if ( ! column . isSetTimestamp ( ) ) <nl> throw new org . apache . cassandra . exceptions . InvalidRequestException ( " Column timestamp is required " ) ; <nl> <nl> - ColumnDefinition columnDef = metadata . getColumnDefinition ( column . name ) ; <nl> + ColumnDefinition columnDef = getColumnDefinition ( metadata , column . name ) ; <nl> try <nl> { <nl> AbstractType < ? > validator = metadata . getValueValidator ( columnDef ) ; <nl> @ @ - 422 , 6 + 423 , 26 @ @ public class ThriftValidation <nl> metadata . ksName ) ) ; <nl> } <nl> <nl> + private static ColumnDefinition getColumnDefinition ( CFMetaData metadata , ByteBuffer columnName ) <nl> + { <nl> + if ( metadata . comparator instanceof CompositeType ) <nl> + { <nl> + CompositeType composite = ( CompositeType ) metadata . comparator ; <nl> + ByteBuffer [ ] components = composite . split ( columnName ) ; <nl> + for ( ColumnDefinition def : metadata . getColumn _ metadata ( ) . values ( ) ) <nl> + { <nl> + ByteBuffer toCompare = def . componentIndex = = null ? columnName : components [ def . componentIndex ] ; <nl> + if ( columnName . equals ( toCompare ) ) <nl> + return def ; <nl> + } <nl> + return null ; <nl> + } <nl> + else <nl> + { <nl> + return metadata . getColumnDefinition ( columnName ) ; <nl> + } <nl> + } <nl> + <nl> / * * <nl> * Return , at most , the first 64K of the buffer . This avoids very large column values being <nl> * logged in their entirety .

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index ac95e3f . . 97ac75e 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 9 
 + * Fix native protocol CAS batches ( CASSANDRA - 7337 ) 
 * Add per - CF range read request latency metrics ( CASSANDRA - 7338 ) 
 * Fix NPE in StreamTransferTask . createMessageForRetry ( ) ( CASSANDRA - 7323 ) 
 * Add conditional CREATE / DROP USER support ( CASSANDRA - 7264 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 index 3d9c5a8 . . a59fe9b 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 @ @ - 316 , 8 + 316 , 7 @ @ public class QueryProcessor implements QueryHandler 
 batch . checkAccess ( clientState ) ; 
 batch . validate ( clientState ) ; 
 
 - batch . executeWithPerStatementVariables ( options . getConsistency ( ) , queryState , options . getValues ( ) ) ; 
 - return new ResultMessage . Void ( ) ; 
 + return batch . executeWithPerStatementVariables ( options . getConsistency ( ) , queryState , options . getValues ( ) ) ; 
 } 
 
 public static ParsedStatement . Prepared getStatement ( String queryStr , ClientState clientState ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 index 875e41c . . 8fc1ecc 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 @ @ - 64 , 11 + 64 , 6 @ @ public class BatchStatement implements CQLStatement , MeasurableForPreparedCache 
 * @ param statements a list of UpdateStatements 
 * @ param attrs additional attributes for statement ( CL , timestamp , timeToLive ) 
 * / 
 - public BatchStatement ( int boundTerms , Type type , List < ModificationStatement > statements , Attributes attrs ) 
 - { 
 - this ( boundTerms , type , statements , attrs , false ) ; 
 - } 
 - 
 public BatchStatement ( int boundTerms , Type type , List < ModificationStatement > statements , Attributes attrs , boolean hasConditions ) 
 { 
 this . boundTerms = boundTerms ; 
 @ @ - 254 , 7 + 249 , 7 @ @ public class BatchStatement implements CQLStatement , MeasurableForPreparedCache 
 return executeWithConditions ( variables , cl , serialCl , now ) ; 
 
 executeWithoutConditions ( getMutations ( variables , local , cl , now ) , cl ) ; 
 - return null ; 
 + return new ResultMessage . Void ( ) ; 
 } 
 
 private void executeWithoutConditions ( Collection < ? extends IMutation > mutations , ConsistencyLevel cl ) throws RequestExecutionException , RequestValidationException 
 diff - - git a / src / java / org / apache / cassandra / transport / messages / BatchMessage . java b / src / java / org / apache / cassandra / transport / messages / BatchMessage . java 
 index 221dcd9 . . 34dd8fe 100644 
 - - - a / src / java / org / apache / cassandra / transport / messages / BatchMessage . java 
 + + + b / src / java / org / apache / cassandra / transport / messages / BatchMessage . java 
 @ @ - 162 , 6 + 162 , 7 @ @ public class BatchMessage extends Message . Request 
 
 QueryHandler handler = state . getClientState ( ) . getCQLQueryHandler ( ) ; 
 List < ModificationStatement > statements = new ArrayList < ModificationStatement > ( queryOrIdList . size ( ) ) ; 
 + boolean hasConditions = false ; 
 for ( int i = 0 ; i < queryOrIdList . size ( ) ; i + + ) 
 { 
 Object query = queryOrIdList . get ( i ) ; 
 @ @ - 186 , 6 + 187 , 7 @ @ public class BatchMessage extends Message . Request 
 throw new InvalidRequestException ( " Invalid statement in batch : only UPDATE , INSERT and DELETE statements are allowed . " ) ; 
 
 ModificationStatement mst = ( ModificationStatement ) statement ; 
 + hasConditions | = mst . hasConditions ( ) ; 
 if ( mst . isCounter ( ) ) 
 { 
 if ( type ! = BatchStatement . Type . COUNTER ) 
 @ @ - 201 , 7 + 203 , 7 @ @ public class BatchMessage extends Message . Request 
 
 / / Note : It ' s ok at this point to pass a bogus value for the number of bound terms in the BatchState ctor 
 / / ( and no value would be really correct , so we prefer passing a clearly wrong one ) . 
 - BatchStatement batch = new BatchStatement ( - 1 , type , statements , Attributes . none ( ) ) ; 
 + BatchStatement batch = new BatchStatement ( - 1 , type , statements , Attributes . none ( ) , hasConditions ) ; 
 Message . Response response = handler . processBatch ( batch , state , new BatchQueryOptions ( consistency , values , queryOrIdList ) ) ; 
 
 if ( tracingId ! = null )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f5ae4e3 . . 98929cf 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 57 , 6 + 57 , 7 @ @ 
 * Rewrite nodetool help ( CASSANDRA - 2293 ) 
 * Make CQL3 the default for CQL ( CASSANDRA - 4640 ) 
 * update stress tool to be able to use CQL3 ( CASSANDRA - 4406 ) 
 + * Accept all thrift update on CQL3 cf but don ' t expose their metadata ( CASSANDRA - 4377 ) 
 
 
 1 . 1 . 6 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index 4e29fc7 . . 687b5f3 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 886 , 12 + 886 , 7 @ @ public final class CFMetaData 
 def . setKey _ alias ( keyAliases . get ( 0 ) ) ; 
 List < org . apache . cassandra . thrift . ColumnDef > column _ meta = new ArrayList < org . apache . cassandra . thrift . ColumnDef > ( column _ metadata . size ( ) ) ; 
 for ( ColumnDefinition cd : column _ metadata . values ( ) ) 
 - { 
 - / / Non - null componentIndex are only used by CQL ( so far ) so we don ' t expose 
 - / / them through thrift 
 - if ( cd . componentIndex = = null ) 
 column _ meta . add ( cd . toThrift ( ) ) ; 
 - } 
 def . setColumn _ metadata ( column _ meta ) ; 
 def . setCompaction _ strategy ( compactionStrategyClass . getName ( ) ) ; 
 def . setCompaction _ strategy _ options ( new HashMap < String , String > ( compactionStrategyOptions ) ) ; 
 @ @ - 1425 , 6 + 1420 , 23 @ @ public final class CFMetaData 
 return cqlCfDef ; 
 } 
 
 + / * * 
 + * Returns whether this CFMetaData has information non exposed on thrift so 
 + * that it cannot be correctly handled automatically by thrift clients . 
 + * / 
 + public boolean isThriftIncompatible ( ) 
 + { 
 + if ( ! cqlCfDef . isComposite ) 
 + return false ; 
 + 
 + for ( ColumnDefinition columnDef : column _ metadata . values ( ) ) 
 + { 
 + if ( columnDef . componentIndex ! = null ) 
 + return true ; 
 + } 
 + return false ; 
 + } 
 + 
 @ Override 
 public String toString ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / config / KSMetaData . java b / src / java / org / apache / cassandra / config / KSMetaData . java 
 index 50cbb91 . . e700444 100644 
 - - - a / src / java / org / apache / cassandra / config / KSMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / KSMetaData . java 
 @ @ - 179 , 7 + 179 , 11 @ @ public final class KSMetaData 
 { 
 List < CfDef > cfDefs = new ArrayList < CfDef > ( cfMetaData . size ( ) ) ; 
 for ( CFMetaData cfm : cfMetaData ( ) . values ( ) ) 
 - cfDefs . add ( cfm . toThrift ( ) ) ; 
 + { 
 + / / Don ' t expose CF that cannot be correctly handle by thrift ; see CASSANDRA - 4377 for further details 
 + if ( ! cfm . isThriftIncompatible ( ) ) 
 + cfDefs . add ( cfm . toThrift ( ) ) ; 
 + } 
 KsDef ksdef = new KsDef ( name , strategyClass . getName ( ) , cfDefs ) ; 
 ksdef . setStrategy _ options ( strategyOptions ) ; 
 ksdef . setDurable _ writes ( durableWrites ) ; 
 diff - - git a / src / java / org / apache / cassandra / thrift / ThriftValidation . java b / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 index 36b3aca . . 93b972d 100644 
 - - - a / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 + + + b / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import org . apache . cassandra . db . filter . NamesQueryFilter ; 
 import org . apache . cassandra . db . filter . SliceQueryFilter ; 
 import org . apache . cassandra . db . index . SecondaryIndexManager ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 + import org . apache . cassandra . db . marshal . CompositeType ; 
 import org . apache . cassandra . db . marshal . MarshalException ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . dht . RandomPartitioner ; 
 @ @ - 395 , 7 + 396 , 7 @ @ public class ThriftValidation 
 if ( ! column . isSetTimestamp ( ) ) 
 throw new org . apache . cassandra . exceptions . InvalidRequestException ( " Column timestamp is required " ) ; 
 
 - ColumnDefinition columnDef = metadata . getColumnDefinition ( column . name ) ; 
 + ColumnDefinition columnDef = getColumnDefinition ( metadata , column . name ) ; 
 try 
 { 
 AbstractType < ? > validator = metadata . getValueValidator ( columnDef ) ; 
 @ @ - 422 , 6 + 423 , 26 @ @ public class ThriftValidation 
 metadata . ksName ) ) ; 
 } 
 
 + private static ColumnDefinition getColumnDefinition ( CFMetaData metadata , ByteBuffer columnName ) 
 + { 
 + if ( metadata . comparator instanceof CompositeType ) 
 + { 
 + CompositeType composite = ( CompositeType ) metadata . comparator ; 
 + ByteBuffer [ ] components = composite . split ( columnName ) ; 
 + for ( ColumnDefinition def : metadata . getColumn _ metadata ( ) . values ( ) ) 
 + { 
 + ByteBuffer toCompare = def . componentIndex = = null ? columnName : components [ def . componentIndex ] ; 
 + if ( columnName . equals ( toCompare ) ) 
 + return def ; 
 + } 
 + return null ; 
 + } 
 + else 
 + { 
 + return metadata . getColumnDefinition ( columnName ) ; 
 + } 
 + } 
 + 
 / * * 
 * Return , at most , the first 64K of the buffer . This avoids very large column values being 
 * logged in their entirety .
