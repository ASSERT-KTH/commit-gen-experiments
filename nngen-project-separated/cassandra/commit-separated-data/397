BLEU SCORE: 0.021504238591261653

TEST MSG: Fix NeverPurgeTest - wait for compactions to finish
GENERATED MSG: Make CompactionsTest . testDontPurgeAccidentaly more reliable with gcgrace = 0

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / compaction / NeverPurgeTest . java b / test / unit / org / apache / cassandra / db / compaction / NeverPurgeTest . java <nl> index 5211065 . . 362afe7 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / NeverPurgeTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / NeverPurgeTest . java <nl> @ @ - 80 , 7 + 80 , 7 @ @ public class NeverPurgeTest extends CQLTester <nl> execute ( " DELETE FROM % s WHERE a = 3 " ) ; <nl> cfs . forceBlockingFlush ( ) ; <nl> cfs . enableAutoCompaction ( ) ; <nl> - while ( cfs . getSSTables ( ) . size ( ) > 1 ) <nl> + while ( cfs . getSSTables ( ) . size ( ) > 1 | | ! cfs . getTracker ( ) . getCompacting ( ) . isEmpty ( ) ) <nl> Thread . sleep ( 100 ) ; <nl> verifyContainsTombstones ( cfs . getSSTables ( ) , 3 ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 5dd2499 . . 3d0f633 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 18 , 6 + 18 , 7 @ @ <nl> * Implement caching of authorization results ( CASSANDRA - 4295 ) <nl> * Add support for LZ4 compression ( CASSANDRA - 5038 ) <nl> * Fix missing columns in wide rows queries ( CASSANDRA - 5225 ) <nl> + * Simplify auth setup and make system _ auth ks alterable ( CASSANDRA - 5112 ) <nl> <nl> <nl> 1 . 2 . 1 <nl> diff - - git a / bin / cqlsh b / bin / cqlsh <nl> index 4f58bdc . . 6db59a3 100755 <nl> - - - a / bin / cqlsh <nl> + + + b / bin / cqlsh <nl> @ @ - 173 , 7 + 173 , 7 @ @ else : <nl> <nl> debug _ completion = bool ( os . environ . get ( ' CQLSH _ DEBUG _ COMPLETION ' , ' ' ) = = ' YES ' ) <nl> <nl> - SYSTEM _ KEYSPACES = ( ' system ' , ' system _ traces ' , ' system _ auth ' ) <nl> + SYSTEM _ KEYSPACES = ( ' system ' , ' system _ traces ' ) <nl> <nl> # we want the cql parser to understand our cqlsh - specific commands too <nl> my _ commands _ ending _ with _ newline = ( <nl> diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py <nl> index 27bd67b . . def573e 100644 <nl> - - - a / pylib / cqlshlib / cql3handling . py <nl> + + + b / pylib / cqlshlib / cql3handling . py <nl> @ @ - 39 , 6 + 39 , 7 @ @ class UnexpectedTableStructure ( UserWarning ) : <nl> return ' Unexpected table structure ; may not translate correctly to CQL . ' + self . msg <nl> <nl> SYSTEM _ KEYSPACES = ( ' system ' , ' system _ traces ' , ' system _ auth ' ) <nl> + NONALTERBALE _ KEYSPACES = ( ' system ' , ' system _ traces ' ) <nl> <nl> class Cql3ParsingRuleSet ( CqlParsingRuleSet ) : <nl> keywords = set ( ( <nl> @ @ - 306 , 6 + 307 , 8 @ @ JUNK : : = / ( [ \ t \ r \ f \ v ] + | ( - - | [ / ] [ / ] ) [ ^ \ n \ r ] * ( [ \ n \ r ] | $ ) | [ / ] [ * ] . * ? [ * ] [ / ] ) / ; <nl> <nl> < nonSystemKeyspaceName > : : = ksname = < cfOrKsName > ; <nl> <nl> + < alterableKeyspaceName > : : = ksname = < cfOrKsName > ; <nl> + <nl> < cfOrKsName > : : = < identifier > <nl> | < quotedName > <nl> | < unreservedKeyword > ; <nl> @ @ - 686 , 6 + 689 , 11 @ @ def ks _ name _ completer ( ctxt , cass ) : <nl> ksnames = [ n for n in cass . get _ keyspace _ names ( ) if n not in SYSTEM _ KEYSPACES ] <nl> return map ( maybe _ escape _ name , ksnames ) <nl> <nl> + @ completer _ for ( ' alterableKeyspaceName ' , ' ksname ' ) <nl> + def ks _ name _ completer ( ctxt , cass ) : <nl> + ksnames = [ n for n in cass . get _ keyspace _ names ( ) if n not in NONALTERBALE _ KEYSPACES ] <nl> + return map ( maybe _ escape _ name , ksnames ) <nl> + <nl> @ completer _ for ( ' columnFamilyName ' , ' ksname ' ) <nl> def cf _ ks _ name _ completer ( ctxt , cass ) : <nl> return [ maybe _ escape _ name ( ks ) + ' . ' for ks in cass . get _ keyspace _ names ( ) ] <nl> @ @ - 1242 , 7 + 1250 , 7 @ @ def alter _ table _ col _ completer ( ctxt , cass ) : <nl> explain _ completion ( ' alterInstructions ' , ' newcol ' , ' < new _ column _ name > ' ) <nl> <nl> syntax _ rules + = r ' ' ' <nl> - < alterKeyspaceStatement > : : = " ALTER " ( " KEYSPACE " | " SCHEMA " ) ks = < nonSystemKeyspaceName > <nl> + < alterKeyspaceStatement > : : = " ALTER " ( " KEYSPACE " | " SCHEMA " ) ks = < alterableKeyspaceName > <nl> " WITH " < newPropSpec > ( " AND " < newPropSpec > ) * <nl> ; <nl> ' ' ' <nl> @ @ - 1295 , 7 + 1303 , 7 @ @ syntax _ rules + = r ' ' ' <nl> ; <nl> <nl> < dataResource > : : = ( " ALL " " KEYSPACES " ) <nl> - | ( " KEYSPACE " < nonSystemKeyspaceName > ) <nl> + | ( " KEYSPACE " < keyspaceName > ) <nl> | ( " TABLE " ? < columnFamilyName > ) <nl> ; <nl> ' ' ' <nl> diff - - git a / src / java / org / apache / cassandra / auth / Auth . java b / src / java / org / apache / cassandra / auth / Auth . java <nl> index a1ba3df . . 399dc26 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / Auth . java <nl> + + + b / src / java / org / apache / cassandra / auth / Auth . java <nl> @ @ - 17 , 15 + 17 , 24 @ @ <nl> * / <nl> package org . apache . cassandra . auth ; <nl> <nl> + import java . util . concurrent . TimeUnit ; <nl> + <nl> + import com . google . common . collect . ImmutableMap ; <nl> import org . apache . commons . lang . StringUtils ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . config . KSMetaData ; <nl> + import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . cql3 . UntypedResultSet ; <nl> import org . apache . cassandra . cql3 . QueryProcessor ; <nl> + import org . apache . cassandra . db . ConsistencyLevel ; <nl> import org . apache . cassandra . exceptions . RequestExecutionException ; <nl> + import org . apache . cassandra . locator . SimpleStrategy ; <nl> + import org . apache . cassandra . service . IMigrationListener ; <nl> import org . apache . cassandra . service . MigrationManager ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> <nl> public class Auth <nl> { <nl> @ @ - 33 , 9 + 42 , 20 @ @ public class Auth <nl> <nl> public static final String DEFAULT _ SUPERUSER _ NAME = " cassandra " ; <nl> <nl> + private static final long SUPERUSER _ SETUP _ DELAY = 10 ; / / seconds . <nl> + <nl> public static final String AUTH _ KS = " system _ auth " ; <nl> public static final String USERS _ CF = " users " ; <nl> <nl> + private static final String USERS _ CF _ SCHEMA = String . format ( " CREATE TABLE % s . % s ( " <nl> + + " name text , " <nl> + + " super boolean , " <nl> + + " PRIMARY KEY ( name ) " <nl> + + " ) WITH gc _ grace _ seconds = % d " , <nl> + AUTH _ KS , <nl> + USERS _ CF , <nl> + 90 * 24 * 60 * 60 ) ; / / 3 months . <nl> + <nl> / * * <nl> * Checks if the username is stored in AUTH _ KS . USERS _ CF . <nl> * <nl> @ @ - 47 , 7 + 67 , 7 @ @ public class Auth <nl> String query = String . format ( " SELECT * FROM % s . % s WHERE name = ' % s ' " , AUTH _ KS , USERS _ CF , escape ( username ) ) ; <nl> try <nl> { <nl> - return ! QueryProcessor . process ( query ) . isEmpty ( ) ; <nl> + return ! QueryProcessor . process ( query , ConsistencyLevel . QUORUM ) . isEmpty ( ) ; <nl> } <nl> catch ( RequestExecutionException e ) <nl> { <nl> @ @ - 66 , 7 + 86 , 7 @ @ public class Auth <nl> String query = String . format ( " SELECT super FROM % s . % s WHERE name = ' % s ' " , AUTH _ KS , USERS _ CF , escape ( username ) ) ; <nl> try <nl> { <nl> - UntypedResultSet result = QueryProcessor . process ( query ) ; <nl> + UntypedResultSet result = QueryProcessor . process ( query , ConsistencyLevel . QUORUM ) ; <nl> return ! result . isEmpty ( ) & & result . one ( ) . getBoolean ( " super " ) ; <nl> } <nl> catch ( RequestExecutionException e ) <nl> @ @ - 87 , 7 + 107 , 8 @ @ public class Auth <nl> AUTH _ KS , <nl> USERS _ CF , <nl> escape ( username ) , <nl> - isSuper ) ) ; <nl> + isSuper ) , <nl> + ConsistencyLevel . QUORUM ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 100 , 7 + 121 , 8 @ @ public class Auth <nl> QueryProcessor . process ( String . format ( " DELETE FROM % s . % s WHERE name = ' % s ' " , <nl> AUTH _ KS , <nl> USERS _ CF , <nl> - escape ( username ) ) ) ; <nl> + escape ( username ) ) , <nl> + ConsistencyLevel . QUORUM ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 108 , 23 + 130 , 75 @ @ public class Auth <nl> * / <nl> public static void setup ( ) <nl> { <nl> - authenticator ( ) . setup ( ) ; <nl> - authorizer ( ) . setup ( ) ; <nl> + setupAuthKeyspace ( ) ; <nl> + setupUsersTable ( ) ; <nl> + <nl> + DatabaseDescriptor . getAuthenticator ( ) . setup ( ) ; <nl> + DatabaseDescriptor . getAuthorizer ( ) . setup ( ) ; <nl> <nl> / / register a custom MigrationListener for permissions cleanup after dropped keyspaces / cfs . <nl> MigrationManager . instance . register ( new MigrationListener ( ) ) ; <nl> + <nl> + / / the delay is here to give the node some time to see its peers - to reduce <nl> + / / " Skipping default superuser setup : some nodes are not ready " log spam . <nl> + / / It ' s the only reason for the delay . <nl> + StorageService . tasks . schedule ( new Runnable ( ) <nl> + { <nl> + public void run ( ) <nl> + { <nl> + setupDefaultSuperuser ( ) ; <nl> + } <nl> + } , <nl> + SUPERUSER _ SETUP _ DELAY , <nl> + TimeUnit . SECONDS ) ; <nl> } <nl> <nl> - / * * <nl> - * Sets up default superuser . <nl> - * / <nl> - public static void setupSuperuser ( ) <nl> + private static void setupAuthKeyspace ( ) <nl> + { <nl> + if ( Schema . instance . getKSMetaData ( AUTH _ KS ) = = null ) <nl> + { <nl> + try <nl> + { <nl> + KSMetaData ksm = KSMetaData . newKeyspace ( AUTH _ KS , SimpleStrategy . class . getName ( ) , ImmutableMap . of ( " replication _ factor " , " 1 " ) , true ) ; <nl> + MigrationManager . announceNewKeyspace ( ksm , 0 ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new AssertionError ( e ) ; / / shouldn ' t ever happen . <nl> + } <nl> + } <nl> + } <nl> + <nl> + private static void setupUsersTable ( ) <nl> + { <nl> + if ( Schema . instance . getCFMetaData ( AUTH _ KS , USERS _ CF ) = = null ) <nl> + { <nl> + try <nl> + { <nl> + QueryProcessor . process ( USERS _ CF _ SCHEMA , ConsistencyLevel . ONE ) ; <nl> + } <nl> + catch ( RequestExecutionException e ) <nl> + { <nl> + throw new AssertionError ( e ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + private static void setupDefaultSuperuser ( ) <nl> { <nl> try <nl> { <nl> / / insert a default superuser if AUTH _ KS . USERS _ CF is empty . <nl> - if ( QueryProcessor . process ( String . format ( " SELECT * FROM % s . % s " , AUTH _ KS , USERS _ CF ) ) . isEmpty ( ) ) <nl> - insertUser ( DEFAULT _ SUPERUSER _ NAME , true ) ; <nl> + if ( QueryProcessor . process ( String . format ( " SELECT * FROM % s . % s " , AUTH _ KS , USERS _ CF ) , ConsistencyLevel . QUORUM ) . isEmpty ( ) ) <nl> + { <nl> + logger . info ( " Creating default superuser ' { } ' " , DEFAULT _ SUPERUSER _ NAME ) ; <nl> + QueryProcessor . process ( String . format ( " INSERT INTO % s . % s ( name , super ) VALUES ( ' % s ' , % s ) USING TIMESTAMP 0 " , <nl> + AUTH _ KS , <nl> + USERS _ CF , <nl> + DEFAULT _ SUPERUSER _ NAME , <nl> + true ) , <nl> + ConsistencyLevel . QUORUM ) ; <nl> + } <nl> } <nl> catch ( RequestExecutionException e ) <nl> { <nl> @ @ - 138 , 13 + 212 , 35 @ @ public class Auth <nl> return StringUtils . replace ( name , " ' " , " ' ' " ) ; <nl> } <nl> <nl> - private static IAuthenticator authenticator ( ) <nl> + / * * <nl> + * IMigrationListener implementation that cleans up permissions on dropped resources . <nl> + * / <nl> + public static class MigrationListener implements IMigrationListener <nl> { <nl> - return DatabaseDescriptor . getAuthenticator ( ) ; <nl> - } <nl> + public void onDropKeyspace ( String ksName ) <nl> + { <nl> + DatabaseDescriptor . getAuthorizer ( ) . revokeAll ( DataResource . keyspace ( ksName ) ) ; <nl> + } <nl> <nl> - private static IAuthorizer authorizer ( ) <nl> - { <nl> - return DatabaseDescriptor . getAuthorizer ( ) ; <nl> + public void onDropColumnFamily ( String ksName , String cfName ) <nl> + { <nl> + DatabaseDescriptor . getAuthorizer ( ) . revokeAll ( DataResource . columnFamily ( ksName , cfName ) ) ; <nl> + } <nl> + <nl> + public void onCreateKeyspace ( String ksName ) <nl> + { <nl> + } <nl> + <nl> + public void onCreateColumnFamily ( String ksName , String cfName ) <nl> + { <nl> + } <nl> + <nl> + public void onUpdateKeyspace ( String ksName ) <nl> + { <nl> + } <nl> + <nl> + public void onUpdateColumnFamily ( String ksName , String cfName ) <nl> + { <nl> + } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index 1738d2d . . 9c76c9b 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 33 , 7 + 33 , 6 @ @ import org . apache . commons . lang . builder . ToStringBuilder ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import org . apache . cassandra . auth . Auth ; <nl> import org . apache . cassandra . cql3 . CFDefinition ; <nl> import org . apache . cassandra . cql3 . QueryProcessor ; <nl> import org . apache . cassandra . cql3 . UntypedResultSet ; <nl> @ @ - 227 , 12 + 226 , 7 @ @ public final class CFMetaData <nl> + " requested _ at timestamp " <nl> + " ) WITH COMMENT = ' ranges requested for transfer here ' " ) ; <nl> <nl> - public static final CFMetaData AuthUsersCf = compile ( 18 , " CREATE TABLE " + Auth . USERS _ CF + " ( " <nl> - + " name text PRIMARY KEY , " <nl> - + " super boolean " <nl> - + " ) WITH gc _ grace _ seconds = 864000 ; " , Auth . AUTH _ KS ) ; <nl> - <nl> - public static final CFMetaData CompactionLogCF = compile ( 19 , " CREATE TABLE " + SystemTable . COMPACTION _ LOG + " ( " <nl> + public static final CFMetaData CompactionLogCF = compile ( 18 , " CREATE TABLE " + SystemTable . COMPACTION _ LOG + " ( " <nl> + " id uuid PRIMARY KEY , " <nl> + " keyspace _ name text , " <nl> + " columnfamily _ name text , " <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index e0fb9b5 . . e5afe56 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 470 , 9 + 470 , 7 @ @ public class DatabaseDescriptor <nl> } <nl> <nl> / / Hardcoded system tables <nl> - List < KSMetaData > systemKeyspaces = Arrays . asList ( KSMetaData . systemKeyspace ( ) , <nl> - KSMetaData . traceKeyspace ( ) , <nl> - KSMetaData . authKeyspace ( ) ) ; <nl> + List < KSMetaData > systemKeyspaces = Arrays . asList ( KSMetaData . systemKeyspace ( ) , KSMetaData . traceKeyspace ( ) ) ; <nl> assert systemKeyspaces . size ( ) = = Schema . systemKeyspaceNames . size ( ) ; <nl> for ( KSMetaData ksmd : systemKeyspaces ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / config / KSMetaData . java b / src / java / org / apache / cassandra / config / KSMetaData . java <nl> index de41f57 . . b0764cc 100644 <nl> - - - a / src / java / org / apache / cassandra / config / KSMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / KSMetaData . java <nl> @ @ - 23 , 7 + 23 , 6 @ @ import com . google . common . collect . ImmutableMap ; <nl> import org . apache . commons . lang . ObjectUtils ; <nl> import org . apache . commons . lang . StringUtils ; <nl> <nl> - import org . apache . cassandra . auth . Auth ; <nl> import org . apache . cassandra . cql3 . QueryProcessor ; <nl> import org . apache . cassandra . cql3 . UntypedResultSet ; <nl> import org . apache . cassandra . db . * ; <nl> @ @ - 104 , 12 + 103 , 6 @ @ public final class KSMetaData <nl> return new KSMetaData ( Tracing . TRACE _ KS , SimpleStrategy . class , ImmutableMap . of ( " replication _ factor " , " 1 " ) , true , cfDefs ) ; <nl> } <nl> <nl> - public static KSMetaData authKeyspace ( ) <nl> - { <nl> - List < CFMetaData > cfDefs = Arrays . asList ( CFMetaData . AuthUsersCf ) ; <nl> - return new KSMetaData ( Auth . AUTH _ KS , SimpleStrategy . class , ImmutableMap . of ( " replication _ factor " , " 1 " ) , true , cfDefs ) ; <nl> - } <nl> - <nl> public static KSMetaData testMetadata ( String name , Class < ? extends AbstractReplicationStrategy > strategyClass , Map < String , String > strategyOptions , CFMetaData . . . cfDefs ) <nl> { <nl> return new KSMetaData ( name , strategyClass , strategyOptions , true , Arrays . asList ( cfDefs ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / config / Schema . java b / src / java / org / apache / cassandra / config / Schema . java <nl> index 5076f47 . . b2d557e 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Schema . java <nl> + + + b / src / java / org / apache / cassandra / config / Schema . java <nl> @ @ - 27 , 7 + 27 , 6 @ @ import com . google . common . collect . * ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import org . apache . cassandra . auth . Auth ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . Table ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> @ @ - 67 , 7 + 66 , 7 @ @ public class Schema <nl> <nl> / / 59adb24e - f3cd - 3e02 - 97f0 - 5b395827453f <nl> public static final UUID emptyVersion ; <nl> - public static final ImmutableSet < String > systemKeyspaceNames = ImmutableSet . of ( Table . SYSTEM _ KS , Tracing . TRACE _ KS , Auth . AUTH _ KS ) ; <nl> + public static final ImmutableSet < String > systemKeyspaceNames = ImmutableSet . of ( Table . SYSTEM _ KS , Tracing . TRACE _ KS ) ; <nl> <nl> static <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> index cbaf5d3 . . b612ceb 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> @ @ - 143 , 12 + 143 , 12 @ @ public class QueryProcessor <nl> return processStatement ( prepared , cl , queryState , Collections . < ByteBuffer > emptyList ( ) ) ; <nl> } <nl> <nl> - public static UntypedResultSet process ( String query ) throws RequestExecutionException <nl> + public static UntypedResultSet process ( String query , ConsistencyLevel cl ) throws RequestExecutionException <nl> { <nl> try <nl> { <nl> QueryState state = new QueryState ( new ClientState ( true ) ) ; <nl> - ResultMessage result = process ( query , ConsistencyLevel . ONE , state ) ; <nl> + ResultMessage result = process ( query , cl , state ) ; <nl> if ( result instanceof ResultMessage . Rows ) <nl> return new UntypedResultSet ( ( ( ResultMessage . Rows ) result ) . result ) ; <nl> else <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ListUsersStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ListUsersStatement . java <nl> index da6cb54 . . ebabf20 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / ListUsersStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / ListUsersStatement . java <nl> @ @ - 42 , 7 + 42 , 7 @ @ public class ListUsersStatement extends AuthenticationStatement <nl> public ResultMessage execute ( ClientState state ) throws RequestValidationException , RequestExecutionException <nl> { <nl> return QueryProcessor . process ( String . format ( " SELECT * FROM % s . % s " , Auth . AUTH _ KS , Auth . USERS _ CF ) , <nl> - ConsistencyLevel . ONE , <nl> + ConsistencyLevel . QUORUM , <nl> new QueryState ( new ClientState ( true ) ) ) ; <nl> } <nl> } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index 605f94d . . 0a7b957 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 32 , 7 + 32 , 6 @ @ import org . apache . log4j . PropertyConfigurator ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import org . apache . cassandra . auth . Auth ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> @ @ - 195 , 9 + 194 , 6 @ @ public class CassandraDaemon <nl> System . exit ( 100 ) ; <nl> } <nl> <nl> - / / setup Authenticator and Authorizer . <nl> - Auth . setup ( ) ; <nl> - <nl> / / clean up debris in the rest of the tables <nl> for ( String table : Schema . instance . getTables ( ) ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / service / ClientState . java b / src / java / org / apache / cassandra / service / ClientState . java <nl> index 110e134 . . 48129e1 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ClientState . java <nl> + + + b / src / java / org / apache / cassandra / service / ClientState . java <nl> @ @ - 152 , 7 + 152 , 7 @ @ public class ClientState <nl> if ( internalCall ) <nl> return ; <nl> validateLogin ( ) ; <nl> - preventSystemKSSchemaModification ( keyspace , perm ) ; <nl> + preventSystemKSSchemaModification ( keyspace , resource , perm ) ; <nl> if ( perm . equals ( Permission . SELECT ) & & READABLE _ SYSTEM _ RESOURCES . contains ( resource ) ) <nl> return ; <nl> if ( PROTECTED _ AUTH _ RESOURCES . contains ( resource ) ) <nl> @ @ - 173 , 10 + 173 , 18 @ @ public class ClientState <nl> resource ) ) ; <nl> } <nl> <nl> - private void preventSystemKSSchemaModification ( String keyspace , Permission perm ) throws UnauthorizedException <nl> + private void preventSystemKSSchemaModification ( String keyspace , DataResource resource , Permission perm ) throws UnauthorizedException <nl> { <nl> - if ( Schema . systemKeyspaceNames . contains ( keyspace . toLowerCase ( ) ) & & ! ( perm . equals ( Permission . SELECT ) | | perm . equals ( Permission . MODIFY ) ) ) <nl> + / / we only care about schema modification . <nl> + if ( ! ( perm . equals ( Permission . ALTER ) | | perm . equals ( Permission . DROP ) | | perm . equals ( Permission . CREATE ) ) ) <nl> + return ; <nl> + <nl> + if ( Schema . systemKeyspaceNames . contains ( keyspace . toLowerCase ( ) ) ) <nl> throw new UnauthorizedException ( keyspace + " keyspace is not user - modifiable . " ) ; <nl> + <nl> + / / we want to allow altering AUTH _ KS itself . <nl> + if ( keyspace . equals ( Auth . AUTH _ KS ) & & ! ( resource . isKeyspaceLevel ( ) & & perm . equals ( Permission . ALTER ) ) ) <nl> + throw new UnauthorizedException ( String . format ( " Cannot % s % s " , perm , resource ) ) ; <nl> } <nl> <nl> public void validateLogin ( ) throws UnauthorizedException <nl> diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> index d5d4c97 . . 82d56e3 100644 <nl> - - - a / src / java / org / apache / cassandra / service / MigrationManager . java <nl> + + + b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> @ @ - 198 , 13 + 198 , 18 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber <nl> <nl> public static void announceNewKeyspace ( KSMetaData ksm ) throws ConfigurationException <nl> { <nl> + announceNewKeyspace ( ksm , FBUtilities . timestampMicros ( ) ) ; <nl> + } <nl> + <nl> + public static void announceNewKeyspace ( KSMetaData ksm , long timestamp ) throws ConfigurationException <nl> + { <nl> ksm . validate ( ) ; <nl> <nl> if ( Schema . instance . getTableDefinition ( ksm . name ) ! = null ) <nl> throw new AlreadyExistsException ( ksm . name ) ; <nl> <nl> logger . info ( String . format ( " Create new Keyspace : % s " , ksm ) ) ; <nl> - announce ( ksm . toSchema ( FBUtilities . timestampMicros ( ) ) ) ; <nl> + announce ( ksm . toSchema ( timestamp ) ) ; <nl> } <nl> <nl> public static void announceNewColumnFamily ( CFMetaData cfm ) throws ConfigurationException <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 5f00c88 . . 0f3a331 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 746 , 8 + 746 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> logger . info ( " Startup completed ! Now serving reads . " ) ; <nl> assert tokenMetadata . sortedTokens ( ) . size ( ) > 0 ; <nl> <nl> - / / setup default superuser ( if needed ) . <nl> - Auth . setupSuperuser ( ) ; <nl> + Auth . setup ( ) ; <nl> } <nl> else <nl> { <nl> @ @ - 786 , 8 + 785 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> logger . info ( " Leaving write survey mode and joining ring at operator request " ) ; <nl> assert tokenMetadata . sortedTokens ( ) . size ( ) > 0 ; <nl> <nl> - / / setup default superuser ( if needed ) . <nl> - Auth . setupSuperuser ( ) ; <nl> + Auth . setup ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 2308 , 7 + 2306 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> public int forceRepairAsync ( final String keyspace , final boolean isSequential , final boolean isLocal , final boolean primaryRange , final String . . . columnFamilies ) <nl> { <nl> - if ( Table . SYSTEM _ KS . equals ( keyspace ) | | Tracing . TRACE _ KS . equals ( keyspace ) | | Auth . AUTH _ KS . equals ( keyspace ) ) <nl> + if ( Table . SYSTEM _ KS . equals ( keyspace ) | | Tracing . TRACE _ KS . equals ( keyspace ) ) <nl> return 0 ; <nl> <nl> final int cmd = nextRepairCommand . incrementAndGet ( ) ; <nl> @ @ - 2348 , 7 + 2346 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> public void forceTableRepairRange ( final String tableName , final Collection < Range < Token > > ranges , boolean isSequential , boolean isLocal , final String . . . columnFamilies ) throws IOException <nl> { <nl> - if ( Table . SYSTEM _ KS . equals ( tableName ) | | Tracing . TRACE _ KS . equals ( tableName ) | | Auth . AUTH _ KS . equals ( tableName ) ) <nl> + if ( Table . SYSTEM _ KS . equals ( tableName ) | | Tracing . TRACE _ KS . equals ( tableName ) ) <nl> return ; <nl> createRepairTask ( nextRepairCommand . incrementAndGet ( ) , tableName , ranges , isSequential , isLocal , columnFamilies ) . run ( ) ; <nl> }

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / compaction / NeverPurgeTest . java b / test / unit / org / apache / cassandra / db / compaction / NeverPurgeTest . java 
 index 5211065 . . 362afe7 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / NeverPurgeTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / NeverPurgeTest . java 
 @ @ - 80 , 7 + 80 , 7 @ @ public class NeverPurgeTest extends CQLTester 
 execute ( " DELETE FROM % s WHERE a = 3 " ) ; 
 cfs . forceBlockingFlush ( ) ; 
 cfs . enableAutoCompaction ( ) ; 
 - while ( cfs . getSSTables ( ) . size ( ) > 1 ) 
 + while ( cfs . getSSTables ( ) . size ( ) > 1 | | ! cfs . getTracker ( ) . getCompacting ( ) . isEmpty ( ) ) 
 Thread . sleep ( 100 ) ; 
 verifyContainsTombstones ( cfs . getSSTables ( ) , 3 ) ; 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 5dd2499 . . 3d0f633 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 18 , 6 + 18 , 7 @ @ 
 * Implement caching of authorization results ( CASSANDRA - 4295 ) 
 * Add support for LZ4 compression ( CASSANDRA - 5038 ) 
 * Fix missing columns in wide rows queries ( CASSANDRA - 5225 ) 
 + * Simplify auth setup and make system _ auth ks alterable ( CASSANDRA - 5112 ) 
 
 
 1 . 2 . 1 
 diff - - git a / bin / cqlsh b / bin / cqlsh 
 index 4f58bdc . . 6db59a3 100755 
 - - - a / bin / cqlsh 
 + + + b / bin / cqlsh 
 @ @ - 173 , 7 + 173 , 7 @ @ else : 
 
 debug _ completion = bool ( os . environ . get ( ' CQLSH _ DEBUG _ COMPLETION ' , ' ' ) = = ' YES ' ) 
 
 - SYSTEM _ KEYSPACES = ( ' system ' , ' system _ traces ' , ' system _ auth ' ) 
 + SYSTEM _ KEYSPACES = ( ' system ' , ' system _ traces ' ) 
 
 # we want the cql parser to understand our cqlsh - specific commands too 
 my _ commands _ ending _ with _ newline = ( 
 diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py 
 index 27bd67b . . def573e 100644 
 - - - a / pylib / cqlshlib / cql3handling . py 
 + + + b / pylib / cqlshlib / cql3handling . py 
 @ @ - 39 , 6 + 39 , 7 @ @ class UnexpectedTableStructure ( UserWarning ) : 
 return ' Unexpected table structure ; may not translate correctly to CQL . ' + self . msg 
 
 SYSTEM _ KEYSPACES = ( ' system ' , ' system _ traces ' , ' system _ auth ' ) 
 + NONALTERBALE _ KEYSPACES = ( ' system ' , ' system _ traces ' ) 
 
 class Cql3ParsingRuleSet ( CqlParsingRuleSet ) : 
 keywords = set ( ( 
 @ @ - 306 , 6 + 307 , 8 @ @ JUNK : : = / ( [ \ t \ r \ f \ v ] + | ( - - | [ / ] [ / ] ) [ ^ \ n \ r ] * ( [ \ n \ r ] | $ ) | [ / ] [ * ] . * ? [ * ] [ / ] ) / ; 
 
 < nonSystemKeyspaceName > : : = ksname = < cfOrKsName > ; 
 
 + < alterableKeyspaceName > : : = ksname = < cfOrKsName > ; 
 + 
 < cfOrKsName > : : = < identifier > 
 | < quotedName > 
 | < unreservedKeyword > ; 
 @ @ - 686 , 6 + 689 , 11 @ @ def ks _ name _ completer ( ctxt , cass ) : 
 ksnames = [ n for n in cass . get _ keyspace _ names ( ) if n not in SYSTEM _ KEYSPACES ] 
 return map ( maybe _ escape _ name , ksnames ) 
 
 + @ completer _ for ( ' alterableKeyspaceName ' , ' ksname ' ) 
 + def ks _ name _ completer ( ctxt , cass ) : 
 + ksnames = [ n for n in cass . get _ keyspace _ names ( ) if n not in NONALTERBALE _ KEYSPACES ] 
 + return map ( maybe _ escape _ name , ksnames ) 
 + 
 @ completer _ for ( ' columnFamilyName ' , ' ksname ' ) 
 def cf _ ks _ name _ completer ( ctxt , cass ) : 
 return [ maybe _ escape _ name ( ks ) + ' . ' for ks in cass . get _ keyspace _ names ( ) ] 
 @ @ - 1242 , 7 + 1250 , 7 @ @ def alter _ table _ col _ completer ( ctxt , cass ) : 
 explain _ completion ( ' alterInstructions ' , ' newcol ' , ' < new _ column _ name > ' ) 
 
 syntax _ rules + = r ' ' ' 
 - < alterKeyspaceStatement > : : = " ALTER " ( " KEYSPACE " | " SCHEMA " ) ks = < nonSystemKeyspaceName > 
 + < alterKeyspaceStatement > : : = " ALTER " ( " KEYSPACE " | " SCHEMA " ) ks = < alterableKeyspaceName > 
 " WITH " < newPropSpec > ( " AND " < newPropSpec > ) * 
 ; 
 ' ' ' 
 @ @ - 1295 , 7 + 1303 , 7 @ @ syntax _ rules + = r ' ' ' 
 ; 
 
 < dataResource > : : = ( " ALL " " KEYSPACES " ) 
 - | ( " KEYSPACE " < nonSystemKeyspaceName > ) 
 + | ( " KEYSPACE " < keyspaceName > ) 
 | ( " TABLE " ? < columnFamilyName > ) 
 ; 
 ' ' ' 
 diff - - git a / src / java / org / apache / cassandra / auth / Auth . java b / src / java / org / apache / cassandra / auth / Auth . java 
 index a1ba3df . . 399dc26 100644 
 - - - a / src / java / org / apache / cassandra / auth / Auth . java 
 + + + b / src / java / org / apache / cassandra / auth / Auth . java 
 @ @ - 17 , 15 + 17 , 24 @ @ 
 * / 
 package org . apache . cassandra . auth ; 
 
 + import java . util . concurrent . TimeUnit ; 
 + 
 + import com . google . common . collect . ImmutableMap ; 
 import org . apache . commons . lang . StringUtils ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . config . KSMetaData ; 
 + import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . cql3 . UntypedResultSet ; 
 import org . apache . cassandra . cql3 . QueryProcessor ; 
 + import org . apache . cassandra . db . ConsistencyLevel ; 
 import org . apache . cassandra . exceptions . RequestExecutionException ; 
 + import org . apache . cassandra . locator . SimpleStrategy ; 
 + import org . apache . cassandra . service . IMigrationListener ; 
 import org . apache . cassandra . service . MigrationManager ; 
 + import org . apache . cassandra . service . StorageService ; 
 
 public class Auth 
 { 
 @ @ - 33 , 9 + 42 , 20 @ @ public class Auth 
 
 public static final String DEFAULT _ SUPERUSER _ NAME = " cassandra " ; 
 
 + private static final long SUPERUSER _ SETUP _ DELAY = 10 ; / / seconds . 
 + 
 public static final String AUTH _ KS = " system _ auth " ; 
 public static final String USERS _ CF = " users " ; 
 
 + private static final String USERS _ CF _ SCHEMA = String . format ( " CREATE TABLE % s . % s ( " 
 + + " name text , " 
 + + " super boolean , " 
 + + " PRIMARY KEY ( name ) " 
 + + " ) WITH gc _ grace _ seconds = % d " , 
 + AUTH _ KS , 
 + USERS _ CF , 
 + 90 * 24 * 60 * 60 ) ; / / 3 months . 
 + 
 / * * 
 * Checks if the username is stored in AUTH _ KS . USERS _ CF . 
 * 
 @ @ - 47 , 7 + 67 , 7 @ @ public class Auth 
 String query = String . format ( " SELECT * FROM % s . % s WHERE name = ' % s ' " , AUTH _ KS , USERS _ CF , escape ( username ) ) ; 
 try 
 { 
 - return ! QueryProcessor . process ( query ) . isEmpty ( ) ; 
 + return ! QueryProcessor . process ( query , ConsistencyLevel . QUORUM ) . isEmpty ( ) ; 
 } 
 catch ( RequestExecutionException e ) 
 { 
 @ @ - 66 , 7 + 86 , 7 @ @ public class Auth 
 String query = String . format ( " SELECT super FROM % s . % s WHERE name = ' % s ' " , AUTH _ KS , USERS _ CF , escape ( username ) ) ; 
 try 
 { 
 - UntypedResultSet result = QueryProcessor . process ( query ) ; 
 + UntypedResultSet result = QueryProcessor . process ( query , ConsistencyLevel . QUORUM ) ; 
 return ! result . isEmpty ( ) & & result . one ( ) . getBoolean ( " super " ) ; 
 } 
 catch ( RequestExecutionException e ) 
 @ @ - 87 , 7 + 107 , 8 @ @ public class Auth 
 AUTH _ KS , 
 USERS _ CF , 
 escape ( username ) , 
 - isSuper ) ) ; 
 + isSuper ) , 
 + ConsistencyLevel . QUORUM ) ; 
 } 
 
 / * * 
 @ @ - 100 , 7 + 121 , 8 @ @ public class Auth 
 QueryProcessor . process ( String . format ( " DELETE FROM % s . % s WHERE name = ' % s ' " , 
 AUTH _ KS , 
 USERS _ CF , 
 - escape ( username ) ) ) ; 
 + escape ( username ) ) , 
 + ConsistencyLevel . QUORUM ) ; 
 } 
 
 / * * 
 @ @ - 108 , 23 + 130 , 75 @ @ public class Auth 
 * / 
 public static void setup ( ) 
 { 
 - authenticator ( ) . setup ( ) ; 
 - authorizer ( ) . setup ( ) ; 
 + setupAuthKeyspace ( ) ; 
 + setupUsersTable ( ) ; 
 + 
 + DatabaseDescriptor . getAuthenticator ( ) . setup ( ) ; 
 + DatabaseDescriptor . getAuthorizer ( ) . setup ( ) ; 
 
 / / register a custom MigrationListener for permissions cleanup after dropped keyspaces / cfs . 
 MigrationManager . instance . register ( new MigrationListener ( ) ) ; 
 + 
 + / / the delay is here to give the node some time to see its peers - to reduce 
 + / / " Skipping default superuser setup : some nodes are not ready " log spam . 
 + / / It ' s the only reason for the delay . 
 + StorageService . tasks . schedule ( new Runnable ( ) 
 + { 
 + public void run ( ) 
 + { 
 + setupDefaultSuperuser ( ) ; 
 + } 
 + } , 
 + SUPERUSER _ SETUP _ DELAY , 
 + TimeUnit . SECONDS ) ; 
 } 
 
 - / * * 
 - * Sets up default superuser . 
 - * / 
 - public static void setupSuperuser ( ) 
 + private static void setupAuthKeyspace ( ) 
 + { 
 + if ( Schema . instance . getKSMetaData ( AUTH _ KS ) = = null ) 
 + { 
 + try 
 + { 
 + KSMetaData ksm = KSMetaData . newKeyspace ( AUTH _ KS , SimpleStrategy . class . getName ( ) , ImmutableMap . of ( " replication _ factor " , " 1 " ) , true ) ; 
 + MigrationManager . announceNewKeyspace ( ksm , 0 ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new AssertionError ( e ) ; / / shouldn ' t ever happen . 
 + } 
 + } 
 + } 
 + 
 + private static void setupUsersTable ( ) 
 + { 
 + if ( Schema . instance . getCFMetaData ( AUTH _ KS , USERS _ CF ) = = null ) 
 + { 
 + try 
 + { 
 + QueryProcessor . process ( USERS _ CF _ SCHEMA , ConsistencyLevel . ONE ) ; 
 + } 
 + catch ( RequestExecutionException e ) 
 + { 
 + throw new AssertionError ( e ) ; 
 + } 
 + } 
 + } 
 + 
 + private static void setupDefaultSuperuser ( ) 
 { 
 try 
 { 
 / / insert a default superuser if AUTH _ KS . USERS _ CF is empty . 
 - if ( QueryProcessor . process ( String . format ( " SELECT * FROM % s . % s " , AUTH _ KS , USERS _ CF ) ) . isEmpty ( ) ) 
 - insertUser ( DEFAULT _ SUPERUSER _ NAME , true ) ; 
 + if ( QueryProcessor . process ( String . format ( " SELECT * FROM % s . % s " , AUTH _ KS , USERS _ CF ) , ConsistencyLevel . QUORUM ) . isEmpty ( ) ) 
 + { 
 + logger . info ( " Creating default superuser ' { } ' " , DEFAULT _ SUPERUSER _ NAME ) ; 
 + QueryProcessor . process ( String . format ( " INSERT INTO % s . % s ( name , super ) VALUES ( ' % s ' , % s ) USING TIMESTAMP 0 " , 
 + AUTH _ KS , 
 + USERS _ CF , 
 + DEFAULT _ SUPERUSER _ NAME , 
 + true ) , 
 + ConsistencyLevel . QUORUM ) ; 
 + } 
 } 
 catch ( RequestExecutionException e ) 
 { 
 @ @ - 138 , 13 + 212 , 35 @ @ public class Auth 
 return StringUtils . replace ( name , " ' " , " ' ' " ) ; 
 } 
 
 - private static IAuthenticator authenticator ( ) 
 + / * * 
 + * IMigrationListener implementation that cleans up permissions on dropped resources . 
 + * / 
 + public static class MigrationListener implements IMigrationListener 
 { 
 - return DatabaseDescriptor . getAuthenticator ( ) ; 
 - } 
 + public void onDropKeyspace ( String ksName ) 
 + { 
 + DatabaseDescriptor . getAuthorizer ( ) . revokeAll ( DataResource . keyspace ( ksName ) ) ; 
 + } 
 
 - private static IAuthorizer authorizer ( ) 
 - { 
 - return DatabaseDescriptor . getAuthorizer ( ) ; 
 + public void onDropColumnFamily ( String ksName , String cfName ) 
 + { 
 + DatabaseDescriptor . getAuthorizer ( ) . revokeAll ( DataResource . columnFamily ( ksName , cfName ) ) ; 
 + } 
 + 
 + public void onCreateKeyspace ( String ksName ) 
 + { 
 + } 
 + 
 + public void onCreateColumnFamily ( String ksName , String cfName ) 
 + { 
 + } 
 + 
 + public void onUpdateKeyspace ( String ksName ) 
 + { 
 + } 
 + 
 + public void onUpdateColumnFamily ( String ksName , String cfName ) 
 + { 
 + } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index 1738d2d . . 9c76c9b 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 33 , 7 + 33 , 6 @ @ import org . apache . commons . lang . builder . ToStringBuilder ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import org . apache . cassandra . auth . Auth ; 
 import org . apache . cassandra . cql3 . CFDefinition ; 
 import org . apache . cassandra . cql3 . QueryProcessor ; 
 import org . apache . cassandra . cql3 . UntypedResultSet ; 
 @ @ - 227 , 12 + 226 , 7 @ @ public final class CFMetaData 
 + " requested _ at timestamp " 
 + " ) WITH COMMENT = ' ranges requested for transfer here ' " ) ; 
 
 - public static final CFMetaData AuthUsersCf = compile ( 18 , " CREATE TABLE " + Auth . USERS _ CF + " ( " 
 - + " name text PRIMARY KEY , " 
 - + " super boolean " 
 - + " ) WITH gc _ grace _ seconds = 864000 ; " , Auth . AUTH _ KS ) ; 
 - 
 - public static final CFMetaData CompactionLogCF = compile ( 19 , " CREATE TABLE " + SystemTable . COMPACTION _ LOG + " ( " 
 + public static final CFMetaData CompactionLogCF = compile ( 18 , " CREATE TABLE " + SystemTable . COMPACTION _ LOG + " ( " 
 + " id uuid PRIMARY KEY , " 
 + " keyspace _ name text , " 
 + " columnfamily _ name text , " 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index e0fb9b5 . . e5afe56 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 470 , 9 + 470 , 7 @ @ public class DatabaseDescriptor 
 } 
 
 / / Hardcoded system tables 
 - List < KSMetaData > systemKeyspaces = Arrays . asList ( KSMetaData . systemKeyspace ( ) , 
 - KSMetaData . traceKeyspace ( ) , 
 - KSMetaData . authKeyspace ( ) ) ; 
 + List < KSMetaData > systemKeyspaces = Arrays . asList ( KSMetaData . systemKeyspace ( ) , KSMetaData . traceKeyspace ( ) ) ; 
 assert systemKeyspaces . size ( ) = = Schema . systemKeyspaceNames . size ( ) ; 
 for ( KSMetaData ksmd : systemKeyspaces ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / config / KSMetaData . java b / src / java / org / apache / cassandra / config / KSMetaData . java 
 index de41f57 . . b0764cc 100644 
 - - - a / src / java / org / apache / cassandra / config / KSMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / KSMetaData . java 
 @ @ - 23 , 7 + 23 , 6 @ @ import com . google . common . collect . ImmutableMap ; 
 import org . apache . commons . lang . ObjectUtils ; 
 import org . apache . commons . lang . StringUtils ; 
 
 - import org . apache . cassandra . auth . Auth ; 
 import org . apache . cassandra . cql3 . QueryProcessor ; 
 import org . apache . cassandra . cql3 . UntypedResultSet ; 
 import org . apache . cassandra . db . * ; 
 @ @ - 104 , 12 + 103 , 6 @ @ public final class KSMetaData 
 return new KSMetaData ( Tracing . TRACE _ KS , SimpleStrategy . class , ImmutableMap . of ( " replication _ factor " , " 1 " ) , true , cfDefs ) ; 
 } 
 
 - public static KSMetaData authKeyspace ( ) 
 - { 
 - List < CFMetaData > cfDefs = Arrays . asList ( CFMetaData . AuthUsersCf ) ; 
 - return new KSMetaData ( Auth . AUTH _ KS , SimpleStrategy . class , ImmutableMap . of ( " replication _ factor " , " 1 " ) , true , cfDefs ) ; 
 - } 
 - 
 public static KSMetaData testMetadata ( String name , Class < ? extends AbstractReplicationStrategy > strategyClass , Map < String , String > strategyOptions , CFMetaData . . . cfDefs ) 
 { 
 return new KSMetaData ( name , strategyClass , strategyOptions , true , Arrays . asList ( cfDefs ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / config / Schema . java b / src / java / org / apache / cassandra / config / Schema . java 
 index 5076f47 . . b2d557e 100644 
 - - - a / src / java / org / apache / cassandra / config / Schema . java 
 + + + b / src / java / org / apache / cassandra / config / Schema . java 
 @ @ - 27 , 7 + 27 , 6 @ @ import com . google . common . collect . * ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import org . apache . cassandra . auth . Auth ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . Table ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 @ @ - 67 , 7 + 66 , 7 @ @ public class Schema 
 
 / / 59adb24e - f3cd - 3e02 - 97f0 - 5b395827453f 
 public static final UUID emptyVersion ; 
 - public static final ImmutableSet < String > systemKeyspaceNames = ImmutableSet . of ( Table . SYSTEM _ KS , Tracing . TRACE _ KS , Auth . AUTH _ KS ) ; 
 + public static final ImmutableSet < String > systemKeyspaceNames = ImmutableSet . of ( Table . SYSTEM _ KS , Tracing . TRACE _ KS ) ; 
 
 static 
 { 
 diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 index cbaf5d3 . . b612ceb 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 @ @ - 143 , 12 + 143 , 12 @ @ public class QueryProcessor 
 return processStatement ( prepared , cl , queryState , Collections . < ByteBuffer > emptyList ( ) ) ; 
 } 
 
 - public static UntypedResultSet process ( String query ) throws RequestExecutionException 
 + public static UntypedResultSet process ( String query , ConsistencyLevel cl ) throws RequestExecutionException 
 { 
 try 
 { 
 QueryState state = new QueryState ( new ClientState ( true ) ) ; 
 - ResultMessage result = process ( query , ConsistencyLevel . ONE , state ) ; 
 + ResultMessage result = process ( query , cl , state ) ; 
 if ( result instanceof ResultMessage . Rows ) 
 return new UntypedResultSet ( ( ( ResultMessage . Rows ) result ) . result ) ; 
 else 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ListUsersStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ListUsersStatement . java 
 index da6cb54 . . ebabf20 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / ListUsersStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / ListUsersStatement . java 
 @ @ - 42 , 7 + 42 , 7 @ @ public class ListUsersStatement extends AuthenticationStatement 
 public ResultMessage execute ( ClientState state ) throws RequestValidationException , RequestExecutionException 
 { 
 return QueryProcessor . process ( String . format ( " SELECT * FROM % s . % s " , Auth . AUTH _ KS , Auth . USERS _ CF ) , 
 - ConsistencyLevel . ONE , 
 + ConsistencyLevel . QUORUM , 
 new QueryState ( new ClientState ( true ) ) ) ; 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index 605f94d . . 0a7b957 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 32 , 7 + 32 , 6 @ @ import org . apache . log4j . PropertyConfigurator ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import org . apache . cassandra . auth . Auth ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 @ @ - 195 , 9 + 194 , 6 @ @ public class CassandraDaemon 
 System . exit ( 100 ) ; 
 } 
 
 - / / setup Authenticator and Authorizer . 
 - Auth . setup ( ) ; 
 - 
 / / clean up debris in the rest of the tables 
 for ( String table : Schema . instance . getTables ( ) ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / service / ClientState . java b / src / java / org / apache / cassandra / service / ClientState . java 
 index 110e134 . . 48129e1 100644 
 - - - a / src / java / org / apache / cassandra / service / ClientState . java 
 + + + b / src / java / org / apache / cassandra / service / ClientState . java 
 @ @ - 152 , 7 + 152 , 7 @ @ public class ClientState 
 if ( internalCall ) 
 return ; 
 validateLogin ( ) ; 
 - preventSystemKSSchemaModification ( keyspace , perm ) ; 
 + preventSystemKSSchemaModification ( keyspace , resource , perm ) ; 
 if ( perm . equals ( Permission . SELECT ) & & READABLE _ SYSTEM _ RESOURCES . contains ( resource ) ) 
 return ; 
 if ( PROTECTED _ AUTH _ RESOURCES . contains ( resource ) ) 
 @ @ - 173 , 10 + 173 , 18 @ @ public class ClientState 
 resource ) ) ; 
 } 
 
 - private void preventSystemKSSchemaModification ( String keyspace , Permission perm ) throws UnauthorizedException 
 + private void preventSystemKSSchemaModification ( String keyspace , DataResource resource , Permission perm ) throws UnauthorizedException 
 { 
 - if ( Schema . systemKeyspaceNames . contains ( keyspace . toLowerCase ( ) ) & & ! ( perm . equals ( Permission . SELECT ) | | perm . equals ( Permission . MODIFY ) ) ) 
 + / / we only care about schema modification . 
 + if ( ! ( perm . equals ( Permission . ALTER ) | | perm . equals ( Permission . DROP ) | | perm . equals ( Permission . CREATE ) ) ) 
 + return ; 
 + 
 + if ( Schema . systemKeyspaceNames . contains ( keyspace . toLowerCase ( ) ) ) 
 throw new UnauthorizedException ( keyspace + " keyspace is not user - modifiable . " ) ; 
 + 
 + / / we want to allow altering AUTH _ KS itself . 
 + if ( keyspace . equals ( Auth . AUTH _ KS ) & & ! ( resource . isKeyspaceLevel ( ) & & perm . equals ( Permission . ALTER ) ) ) 
 + throw new UnauthorizedException ( String . format ( " Cannot % s % s " , perm , resource ) ) ; 
 } 
 
 public void validateLogin ( ) throws UnauthorizedException 
 diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java 
 index d5d4c97 . . 82d56e3 100644 
 - - - a / src / java / org / apache / cassandra / service / MigrationManager . java 
 + + + b / src / java / org / apache / cassandra / service / MigrationManager . java 
 @ @ - 198 , 13 + 198 , 18 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber 
 
 public static void announceNewKeyspace ( KSMetaData ksm ) throws ConfigurationException 
 { 
 + announceNewKeyspace ( ksm , FBUtilities . timestampMicros ( ) ) ; 
 + } 
 + 
 + public static void announceNewKeyspace ( KSMetaData ksm , long timestamp ) throws ConfigurationException 
 + { 
 ksm . validate ( ) ; 
 
 if ( Schema . instance . getTableDefinition ( ksm . name ) ! = null ) 
 throw new AlreadyExistsException ( ksm . name ) ; 
 
 logger . info ( String . format ( " Create new Keyspace : % s " , ksm ) ) ; 
 - announce ( ksm . toSchema ( FBUtilities . timestampMicros ( ) ) ) ; 
 + announce ( ksm . toSchema ( timestamp ) ) ; 
 } 
 
 public static void announceNewColumnFamily ( CFMetaData cfm ) throws ConfigurationException 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 5f00c88 . . 0f3a331 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 746 , 8 + 746 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 logger . info ( " Startup completed ! Now serving reads . " ) ; 
 assert tokenMetadata . sortedTokens ( ) . size ( ) > 0 ; 
 
 - / / setup default superuser ( if needed ) . 
 - Auth . setupSuperuser ( ) ; 
 + Auth . setup ( ) ; 
 } 
 else 
 { 
 @ @ - 786 , 8 + 785 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 logger . info ( " Leaving write survey mode and joining ring at operator request " ) ; 
 assert tokenMetadata . sortedTokens ( ) . size ( ) > 0 ; 
 
 - / / setup default superuser ( if needed ) . 
 - Auth . setupSuperuser ( ) ; 
 + Auth . setup ( ) ; 
 } 
 } 
 
 @ @ - 2308 , 7 + 2306 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 public int forceRepairAsync ( final String keyspace , final boolean isSequential , final boolean isLocal , final boolean primaryRange , final String . . . columnFamilies ) 
 { 
 - if ( Table . SYSTEM _ KS . equals ( keyspace ) | | Tracing . TRACE _ KS . equals ( keyspace ) | | Auth . AUTH _ KS . equals ( keyspace ) ) 
 + if ( Table . SYSTEM _ KS . equals ( keyspace ) | | Tracing . TRACE _ KS . equals ( keyspace ) ) 
 return 0 ; 
 
 final int cmd = nextRepairCommand . incrementAndGet ( ) ; 
 @ @ - 2348 , 7 + 2346 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 public void forceTableRepairRange ( final String tableName , final Collection < Range < Token > > ranges , boolean isSequential , boolean isLocal , final String . . . columnFamilies ) throws IOException 
 { 
 - if ( Table . SYSTEM _ KS . equals ( tableName ) | | Tracing . TRACE _ KS . equals ( tableName ) | | Auth . AUTH _ KS . equals ( tableName ) ) 
 + if ( Table . SYSTEM _ KS . equals ( tableName ) | | Tracing . TRACE _ KS . equals ( tableName ) ) 
 return ; 
 createRepairTask ( nextRepairCommand . incrementAndGet ( ) , tableName , ranges , isSequential , isLocal , columnFamilies ) . run ( ) ; 
 }
