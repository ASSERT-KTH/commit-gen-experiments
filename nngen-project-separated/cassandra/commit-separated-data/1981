BLEU SCORE: 0.040583489434387374

TEST MSG: Validate size of indexed column values
GENERATED MSG: merge from 1 . 0

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6a5ac0d . . 412eb59 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 12 : <nl> + * Validate size of indexed column values ( CASSANDRA - 8280 ) <nl> * Make LCS split compaction results over all data directories ( CASSANDRA - 8329 ) <nl> * Fix some failing queries that use multi - column relations <nl> on COMPACT STORAGE tables ( CASSANDRA - 8264 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / CFDefinition . java b / src / java / org / apache / cassandra / cql3 / CFDefinition . java <nl> index 23bedaf . . e0bb409 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / CFDefinition . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / CFDefinition . java <nl> @ @ - 358 , 5 + 358 , 10 @ @ public class CFDefinition implements Iterable < CFDefinition . Name > <nl> <nl> return columnName ; <nl> } <nl> + <nl> + public int getLength ( ) <nl> + { <nl> + return columnName = = null ? 0 : columnName . remaining ( ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / ColumnNameBuilder . java b / src / java / org / apache / cassandra / cql3 / ColumnNameBuilder . java <nl> index 3d5eff6 . . 50cdc74 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / ColumnNameBuilder . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / ColumnNameBuilder . java <nl> @ @ - 78 , 4 + 78 , 11 @ @ public interface ColumnNameBuilder <nl> * / <nl> public ByteBuffer getComponent ( int i ) ; <nl> <nl> + / * * <nl> + * Returns the total length of the ByteBuffer that will <nl> + * be returned by build ( ) . <nl> + * @ return the total length of the column name to be built <nl> + * / <nl> + public int getLength ( ) ; <nl> + <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> index 61f65c1 . . db22e7d 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> @ @ - 22 , 8 + 22 , 6 @ @ import java . util . * ; <nl> <nl> import com . google . common . base . Function ; <nl> import com . google . common . collect . Iterables ; <nl> - import org . apache . cassandra . db . marshal . AbstractType ; <nl> - import org . github . jamm . MemoryMeter ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 43 , 7 + 41 , 9 @ @ import org . apache . cassandra . service . QueryState ; <nl> import org . apache . cassandra . service . StorageProxy ; <nl> import org . apache . cassandra . thrift . ThriftValidation ; <nl> import org . apache . cassandra . transport . messages . ResultMessage ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . Pair ; <nl> + import org . github . jamm . MemoryMeter ; <nl> <nl> / * <nl> * Abstract parent class of individual modifications , i . e . INSERT , UPDATE and DELETE . <nl> @ @ - 328 , 7 + 328 , 7 @ @ public abstract class ModificationStatement implements CQLStatement , MeasurableF <nl> throws InvalidRequestException <nl> { <nl> CFDefinition cfDef = cfm . getCfDef ( ) ; <nl> - ColumnNameBuilder keyBuilder = cfDef . getKeyNameBuilder ( ) ; <nl> + ColumnNameBuilder keyBuilderBase = cfDef . getKeyNameBuilder ( ) ; <nl> List < ByteBuffer > keys = new ArrayList < ByteBuffer > ( ) ; <nl> for ( CFDefinition . Name name : cfDef . partitionKeys ( ) ) <nl> { <nl> @ @ - 337 , 14 + 337 , 19 @ @ public abstract class ModificationStatement implements CQLStatement , MeasurableF <nl> throw new InvalidRequestException ( String . format ( " Missing mandatory PRIMARY KEY part % s " , name ) ) ; <nl> <nl> List < ByteBuffer > values = r . values ( variables ) ; <nl> - <nl> - if ( keyBuilder . remainingCount ( ) = = 1 ) <nl> + if ( keyBuilderBase . remainingCount ( ) = = 1 ) <nl> { <nl> for ( ByteBuffer val : values ) <nl> { <nl> if ( val = = null ) <nl> throw new InvalidRequestException ( String . format ( " Invalid null value for partition key part % s " , name ) ) ; <nl> - ByteBuffer key = keyBuilder . copy ( ) . add ( val ) . build ( ) ; <nl> + <nl> + ColumnNameBuilder keyBuilder = keyBuilderBase . copy ( ) . add ( val ) ; <nl> + if ( keyBuilder . getLength ( ) > FBUtilities . MAX _ UNSIGNED _ SHORT ) <nl> + throw new InvalidRequestException ( String . format ( " Partition key size % s exceeds maximum % s " , <nl> + keyBuilder . getLength ( ) , <nl> + FBUtilities . MAX _ UNSIGNED _ SHORT ) ) ; <nl> + ByteBuffer key = keyBuilder . build ( ) ; <nl> ThriftValidation . validateKey ( cfm , key ) ; <nl> keys . add ( key ) ; <nl> } <nl> @ @ - 356 , 7 + 361 , 7 @ @ public abstract class ModificationStatement implements CQLStatement , MeasurableF <nl> ByteBuffer val = values . get ( 0 ) ; <nl> if ( val = = null ) <nl> throw new InvalidRequestException ( String . format ( " Invalid null value for partition key part % s " , name ) ) ; <nl> - keyBuilder . add ( val ) ; <nl> + keyBuilderBase . add ( val ) ; <nl> } <nl> } <nl> return keys ; <nl> @ @ - 727 , 7 + 732 , 6 @ @ public abstract class ModificationStatement implements CQLStatement , MeasurableF <nl> Collection < IMutation > mutations = new ArrayList < IMutation > ( ) ; <nl> for ( ByteBuffer key : keys ) <nl> { <nl> - ThriftValidation . validateKey ( cfm , key ) ; <nl> ColumnFamily cf = UnsortedColumns . factory . create ( cfm ) ; <nl> addUpdateForKey ( cf , key , clusteringPrefix , params ) ; <nl> RowMutation rm = new RowMutation ( cfm . ksName , key , cf ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java <nl> index e2da251 . . 9d98c84 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java <nl> @ @ - 23 , 9 + 23 , 10 @ @ import java . util . * ; <nl> import org . apache . cassandra . cql3 . * ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . db . * ; <nl> - import org . apache . cassandra . db . marshal . AbstractType ; <nl> + import org . apache . cassandra . db . index . SecondaryIndexManager ; <nl> import org . apache . cassandra . exceptions . * ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . Pair ; <nl> <nl> / * * <nl> @ @ - 51 , 6 + 52 , 11 @ @ public class UpdateStatement extends ModificationStatement <nl> { <nl> CFDefinition cfDef = cfm . getCfDef ( ) ; <nl> <nl> + if ( builder . getLength ( ) > FBUtilities . MAX _ UNSIGNED _ SHORT ) <nl> + throw new InvalidRequestException ( String . format ( " The sum of all clustering columns is too long ( % s > % s ) " , <nl> + builder . getLength ( ) , <nl> + FBUtilities . MAX _ UNSIGNED _ SHORT ) ) ; <nl> + <nl> / / Inserting the CQL row marker ( see # 4361 ) <nl> / / We always need to insert a marker for INSERT , because of the following situation : <nl> / / CREATE TABLE t ( k int PRIMARY KEY , c text ) ; <nl> @ @ - 99 , 6 + 105 , 20 @ @ public class UpdateStatement extends ModificationStatement <nl> for ( Operation update : updates ) <nl> update . execute ( key , cf , builder . copy ( ) , params ) ; <nl> } <nl> + <nl> + SecondaryIndexManager indexManager = Keyspace . open ( cfm . ksName ) . getColumnFamilyStore ( cfm . cfId ) . indexManager ; <nl> + if ( indexManager . hasIndexes ( ) ) <nl> + { <nl> + for ( Column column : cf ) <nl> + { <nl> + if ( ! indexManager . validate ( column ) ) <nl> + throw new InvalidRequestException ( String . format ( " Can ' t index column value of size % d for index % s on % s . % s " , <nl> + column . value ( ) . remaining ( ) , <nl> + cfm . getColumnDefinitionFromColumnName ( column . name ( ) ) . getIndexName ( ) , <nl> + cfm . ksName , <nl> + cfm . cfName ) ) ; <nl> + } <nl> + } <nl> } <nl> <nl> public static class ParsedInsert extends ModificationStatement . Parsed <nl> diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> index 6d9f28a . . fda79f8 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> @ @ - 574 , 8 + 574 , 10 @ @ public class SecondaryIndexManager <nl> <nl> public boolean validate ( Column column ) <nl> { <nl> - SecondaryIndex index = getIndexForColumn ( column . name ( ) ) ; <nl> - return index = = null | | index . validate ( column ) ; <nl> + for ( SecondaryIndex index : indexFor ( column . name ( ) ) ) <nl> + if ( ! index . validate ( column ) ) <nl> + return false ; <nl> + return true ; <nl> } <nl> <nl> public static interface Updater <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / CompositeType . java b / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> index 946ba24 . . f0d9d9b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> @ @ - 504 , 5 + 504 , 14 @ @ public class CompositeType extends AbstractCompositeType <nl> <nl> return components . get ( i ) ; <nl> } <nl> + <nl> + public int getLength ( ) <nl> + { <nl> + int length = 0 ; <nl> + for ( ByteBuffer component : components ) <nl> + length + = component . remaining ( ) + 3 ; / / length + 2 bytes for length + EOC <nl> + <nl> + return length ; <nl> + } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> index 4619ddc . . afa066d 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> @ @ - 36 , 6 + 36 , 7 @ @ import org . apache . cassandra . io . compress . CompressedSequentialWriter ; <nl> import org . apache . cassandra . io . util . * ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . FilterFactory ; <nl> import org . apache . cassandra . utils . IFilter ; <nl> import org . apache . cassandra . utils . Pair ; <nl> @ @ - 181 , 6 + 182 , 14 @ @ public class SSTableWriter extends SSTable <nl> <nl> public void append ( DecoratedKey decoratedKey , ColumnFamily cf ) <nl> { <nl> + if ( decoratedKey . key . remaining ( ) > FBUtilities . MAX _ UNSIGNED _ SHORT ) <nl> + { <nl> + logger . error ( " Key size { } exceeds maximum of { } , skipping row " , <nl> + decoratedKey . key . remaining ( ) , <nl> + FBUtilities . MAX _ UNSIGNED _ SHORT ) ; <nl> + return ; <nl> + } <nl> + <nl> long startPosition = beforeAppend ( decoratedKey ) ; <nl> try <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / IndexedValuesValidationTest . java b / test / unit / org / apache / cassandra / cql3 / IndexedValuesValidationTest . java <nl> new file mode 100644 <nl> index 0000000 . . 9c2bc0f <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / cql3 / IndexedValuesValidationTest . java <nl> @ @ - 0 , 0 + 1 , 124 @ @ <nl> + / * <nl> + * <nl> + * * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * * or more contributor license agreements . See the NOTICE file <nl> + * * distributed with this work for additional information <nl> + * * regarding copyright ownership . The ASF licenses this file <nl> + * * to you under the Apache License , Version 2 . 0 ( the <nl> + * * " License " ) ; you may not use this file except in compliance <nl> + * * with the License . You may obtain a copy of the License at <nl> + * * <nl> + * * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * * <nl> + * * Unless required by applicable law or agreed to in writing , software <nl> + * * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * * See the License for the specific language governing permissions and <nl> + * * limitations under the License . <nl> + * <nl> + * / <nl> + package org . apache . cassandra . cql3 ; <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . Collections ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . SchemaLoader ; <nl> + import org . apache . cassandra . db . ConsistencyLevel ; <nl> + import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> + import org . apache . cassandra . exceptions . RequestExecutionException ; <nl> + import org . apache . cassandra . exceptions . RequestValidationException ; <nl> + import org . apache . cassandra . service . ClientState ; <nl> + import org . apache . cassandra . service . QueryState ; <nl> + import org . apache . cassandra . utils . MD5Digest ; <nl> + <nl> + import static org . junit . Assert . fail ; <nl> + import static org . apache . cassandra . cql3 . QueryProcessor . process ; <nl> + <nl> + public class IndexedValuesValidationTest <nl> + { <nl> + static ClientState clientState ; <nl> + static String keyspace = " indexed _ value _ validation _ test " ; <nl> + <nl> + @ BeforeClass <nl> + public static void setUpClass ( ) throws Throwable <nl> + { <nl> + SchemaLoader . loadSchema ( ) ; <nl> + executeSchemaChange ( " CREATE KEYSPACE IF NOT EXISTS % s WITH replication = { ' class ' : ' SimpleStrategy ' , ' replication _ factor ' : ' 1 ' } " ) ; <nl> + clientState = ClientState . forInternalCalls ( ) ; <nl> + } <nl> + <nl> + / / CASSANDRA - 8280 / 8081 <nl> + / / reject updates with indexed values where value > 64k <nl> + @ Test <nl> + public void testIndexOnCompositeValueOver64k ( ) throws Throwable <nl> + { <nl> + executeSchemaChange ( " CREATE TABLE % s . composite _ index _ table ( a int , b int , c blob , PRIMARY KEY ( a ) ) " ) ; <nl> + executeSchemaChange ( " CREATE INDEX ON % s . composite _ index _ table ( c ) " ) ; <nl> + performInsertWithIndexedValueOver64k ( " INSERT INTO % s . composite _ index _ table ( a , b , c ) VALUES ( 0 , 0 , ? ) " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIndexOnClusteringValueOver64k ( ) throws Throwable <nl> + { <nl> + executeSchemaChange ( " CREATE TABLE % s . ck _ index _ table ( a int , b blob , c int , PRIMARY KEY ( a , b ) ) " ) ; <nl> + executeSchemaChange ( " CREATE INDEX ON % s . ck _ index _ table ( b ) " ) ; <nl> + performInsertWithIndexedValueOver64k ( " INSERT INTO % s . ck _ index _ table ( a , b , c ) VALUES ( 0 , ? , 0 ) " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIndexOnPartitionKeyOver64k ( ) throws Throwable <nl> + { <nl> + executeSchemaChange ( " CREATE TABLE % s . pk _ index _ table ( a blob , b int , c int , PRIMARY KEY ( ( a , b ) ) ) " ) ; <nl> + executeSchemaChange ( " CREATE INDEX ON % s . pk _ index _ table ( a ) " ) ; <nl> + performInsertWithIndexedValueOver64k ( " INSERT INTO % s . pk _ index _ table ( a , b , c ) VALUES ( ? , 0 , 0 ) " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCompactTableWithValueOver64k ( ) throws Throwable <nl> + { <nl> + executeSchemaChange ( " CREATE TABLE % s . compact _ table ( a int , b blob , PRIMARY KEY ( a ) ) WITH COMPACT STORAGE " ) ; <nl> + executeSchemaChange ( " CREATE INDEX ON % s . compact _ table ( b ) " ) ; <nl> + performInsertWithIndexedValueOver64k ( " INSERT INTO % s . compact _ table ( a , b ) VALUES ( 0 , ? ) " ) ; <nl> + } <nl> + <nl> + private static void performInsertWithIndexedValueOver64k ( String insertCQL ) throws Exception <nl> + { <nl> + ByteBuffer buf = ByteBuffer . allocate ( 1024 * 65 ) ; <nl> + buf . clear ( ) ; <nl> + for ( int i = 0 ; i < 1024 + 1 ; i + + ) <nl> + buf . put ( ( byte ) 0 ) ; <nl> + <nl> + try <nl> + { <nl> + execute ( String . format ( insertCQL , keyspace ) , buf ) ; <nl> + fail ( " Expected statement to fail validation " ) ; <nl> + } <nl> + catch ( InvalidRequestException e ) <nl> + { <nl> + / / as expected <nl> + } <nl> + } <nl> + <nl> + private static void execute ( String query , ByteBuffer value ) throws RequestValidationException , RequestExecutionException <nl> + { <nl> + MD5Digest statementId = QueryProcessor . prepare ( String . format ( query , keyspace ) , clientState , false ) . statementId ; <nl> + CQLStatement statement = QueryProcessor . instance . getPrepared ( statementId ) ; <nl> + statement . executeInternal ( QueryState . forInternalCalls ( ) , <nl> + new QueryOptions ( ConsistencyLevel . ONE , Collections . singletonList ( value ) ) ) ; <nl> + } <nl> + <nl> + private static void executeSchemaChange ( String query ) throws Throwable <nl> + { <nl> + try <nl> + { <nl> + process ( String . format ( query , keyspace ) , ConsistencyLevel . ONE ) ; <nl> + } <nl> + catch ( RuntimeException exc ) <nl> + { <nl> + throw exc . getCause ( ) ; <nl> + } <nl> + } <nl> + } <nl> +
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d518830 . . 52cc2c1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 29 , 7 + 29 , 7 @ @ <nl> * add scheduler JMX metrics ( CASSANDRA - 2962 ) <nl> * add block level checksum for compressed data ( CASSANDRA - 1717 ) <nl> * make column family backed column map pluggable and introduce unsynchronized <nl> - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) <nl> + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) <nl> * refactoring of the secondary index api ( CASSANDRA - 2982 ) <nl> * make CL > ONE reads wait for digest reconciliation before returning <nl> ( CASSANDRA - 2494 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> index c316a85 . . 71c7213 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor <nl> this . reversed = reversed ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public AbstractType < ? > getComparator ( ) <nl> { <nl> return comparator ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 1239d1c . . 38bc0d7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer <nl> this . cfm = cfm ; <nl> } <nl> <nl> - public ColumnFamily cloneMeShallow ( ) <nl> + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) <nl> { <nl> - ColumnFamily cf = ColumnFamily . create ( cfm ) ; <nl> + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; <nl> / / since deletion info is immutable , aliasing it is fine <nl> cf . deletionInfo . set ( deletionInfo . get ( ) ) ; <nl> return cf ; <nl> } <nl> <nl> + public ColumnFamily cloneMeShallow ( ) <nl> + { <nl> + return cloneMeShallow ( columns . getFactory ( ) ) ; <nl> + } <nl> + <nl> public AbstractType getSubComparator ( ) <nl> { <nl> IColumnSerializer s = getColumnSerializer ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 0bfd1c5 . . 552d3e9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> - * tombstones that are no longer relevant . * / <nl> + / * * <nl> + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> + * tombstones that are no longer relevant . <nl> + * The returned column family won ' t be thread safe . <nl> + * / <nl> ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) <nl> { <nl> / / special case slicing the entire row : <nl> @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; <nl> if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) <nl> { <nl> - ColumnFamily cf = cached . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> if ( sc ! = null ) <nl> cf . addColumn ( sc , HeapAllocator . instance ) ; <nl> return removeDeleted ( cf , gcBefore ) ; <nl> @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> <nl> IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; <nl> - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; <nl> / / TODO this is necessary because when we collate supercolumns together , we don ' t check <nl> / / their subcolumns for relevance , so we need to do a second prune post facto here . <nl> diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> index 37f5a60 . . 624dec7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns <nl> public ISortedColumns cloneMe ( ) ; <nl> <nl> / * * <nl> + * Returns the factory used for this ISortedColumns implementation . <nl> + * / <nl> + public Factory getFactory ( ) ; <nl> + <nl> + / * * <nl> * Adds a column to this column map . <nl> * If a column with the same name is already present in the map , it will <nl> * be replaced by the newly added column . <nl> diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> index cd2488a . . 13a111a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new ThreadSafeSortedColumns ( this ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> index 34e83dc . . 6c3fc42 100644 <nl> - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new TreeMapBackedSortedColumns ( this ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6a5ac0d . . 412eb59 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 12 : 
 + * Validate size of indexed column values ( CASSANDRA - 8280 ) 
 * Make LCS split compaction results over all data directories ( CASSANDRA - 8329 ) 
 * Fix some failing queries that use multi - column relations 
 on COMPACT STORAGE tables ( CASSANDRA - 8264 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / CFDefinition . java b / src / java / org / apache / cassandra / cql3 / CFDefinition . java 
 index 23bedaf . . e0bb409 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / CFDefinition . java 
 + + + b / src / java / org / apache / cassandra / cql3 / CFDefinition . java 
 @ @ - 358 , 5 + 358 , 10 @ @ public class CFDefinition implements Iterable < CFDefinition . Name > 
 
 return columnName ; 
 } 
 + 
 + public int getLength ( ) 
 + { 
 + return columnName = = null ? 0 : columnName . remaining ( ) ; 
 + } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / ColumnNameBuilder . java b / src / java / org / apache / cassandra / cql3 / ColumnNameBuilder . java 
 index 3d5eff6 . . 50cdc74 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / ColumnNameBuilder . java 
 + + + b / src / java / org / apache / cassandra / cql3 / ColumnNameBuilder . java 
 @ @ - 78 , 4 + 78 , 11 @ @ public interface ColumnNameBuilder 
 * / 
 public ByteBuffer getComponent ( int i ) ; 
 
 + / * * 
 + * Returns the total length of the ByteBuffer that will 
 + * be returned by build ( ) . 
 + * @ return the total length of the column name to be built 
 + * / 
 + public int getLength ( ) ; 
 + 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 index 61f65c1 . . db22e7d 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 @ @ - 22 , 8 + 22 , 6 @ @ import java . util . * ; 
 
 import com . google . common . base . Function ; 
 import com . google . common . collect . Iterables ; 
 - import org . apache . cassandra . db . marshal . AbstractType ; 
 - import org . github . jamm . MemoryMeter ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 43 , 7 + 41 , 9 @ @ import org . apache . cassandra . service . QueryState ; 
 import org . apache . cassandra . service . StorageProxy ; 
 import org . apache . cassandra . thrift . ThriftValidation ; 
 import org . apache . cassandra . transport . messages . ResultMessage ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . Pair ; 
 + import org . github . jamm . MemoryMeter ; 
 
 / * 
 * Abstract parent class of individual modifications , i . e . INSERT , UPDATE and DELETE . 
 @ @ - 328 , 7 + 328 , 7 @ @ public abstract class ModificationStatement implements CQLStatement , MeasurableF 
 throws InvalidRequestException 
 { 
 CFDefinition cfDef = cfm . getCfDef ( ) ; 
 - ColumnNameBuilder keyBuilder = cfDef . getKeyNameBuilder ( ) ; 
 + ColumnNameBuilder keyBuilderBase = cfDef . getKeyNameBuilder ( ) ; 
 List < ByteBuffer > keys = new ArrayList < ByteBuffer > ( ) ; 
 for ( CFDefinition . Name name : cfDef . partitionKeys ( ) ) 
 { 
 @ @ - 337 , 14 + 337 , 19 @ @ public abstract class ModificationStatement implements CQLStatement , MeasurableF 
 throw new InvalidRequestException ( String . format ( " Missing mandatory PRIMARY KEY part % s " , name ) ) ; 
 
 List < ByteBuffer > values = r . values ( variables ) ; 
 - 
 - if ( keyBuilder . remainingCount ( ) = = 1 ) 
 + if ( keyBuilderBase . remainingCount ( ) = = 1 ) 
 { 
 for ( ByteBuffer val : values ) 
 { 
 if ( val = = null ) 
 throw new InvalidRequestException ( String . format ( " Invalid null value for partition key part % s " , name ) ) ; 
 - ByteBuffer key = keyBuilder . copy ( ) . add ( val ) . build ( ) ; 
 + 
 + ColumnNameBuilder keyBuilder = keyBuilderBase . copy ( ) . add ( val ) ; 
 + if ( keyBuilder . getLength ( ) > FBUtilities . MAX _ UNSIGNED _ SHORT ) 
 + throw new InvalidRequestException ( String . format ( " Partition key size % s exceeds maximum % s " , 
 + keyBuilder . getLength ( ) , 
 + FBUtilities . MAX _ UNSIGNED _ SHORT ) ) ; 
 + ByteBuffer key = keyBuilder . build ( ) ; 
 ThriftValidation . validateKey ( cfm , key ) ; 
 keys . add ( key ) ; 
 } 
 @ @ - 356 , 7 + 361 , 7 @ @ public abstract class ModificationStatement implements CQLStatement , MeasurableF 
 ByteBuffer val = values . get ( 0 ) ; 
 if ( val = = null ) 
 throw new InvalidRequestException ( String . format ( " Invalid null value for partition key part % s " , name ) ) ; 
 - keyBuilder . add ( val ) ; 
 + keyBuilderBase . add ( val ) ; 
 } 
 } 
 return keys ; 
 @ @ - 727 , 7 + 732 , 6 @ @ public abstract class ModificationStatement implements CQLStatement , MeasurableF 
 Collection < IMutation > mutations = new ArrayList < IMutation > ( ) ; 
 for ( ByteBuffer key : keys ) 
 { 
 - ThriftValidation . validateKey ( cfm , key ) ; 
 ColumnFamily cf = UnsortedColumns . factory . create ( cfm ) ; 
 addUpdateForKey ( cf , key , clusteringPrefix , params ) ; 
 RowMutation rm = new RowMutation ( cfm . ksName , key , cf ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java 
 index e2da251 . . 9d98c84 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java 
 @ @ - 23 , 9 + 23 , 10 @ @ import java . util . * ; 
 import org . apache . cassandra . cql3 . * ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . db . * ; 
 - import org . apache . cassandra . db . marshal . AbstractType ; 
 + import org . apache . cassandra . db . index . SecondaryIndexManager ; 
 import org . apache . cassandra . exceptions . * ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . Pair ; 
 
 / * * 
 @ @ - 51 , 6 + 52 , 11 @ @ public class UpdateStatement extends ModificationStatement 
 { 
 CFDefinition cfDef = cfm . getCfDef ( ) ; 
 
 + if ( builder . getLength ( ) > FBUtilities . MAX _ UNSIGNED _ SHORT ) 
 + throw new InvalidRequestException ( String . format ( " The sum of all clustering columns is too long ( % s > % s ) " , 
 + builder . getLength ( ) , 
 + FBUtilities . MAX _ UNSIGNED _ SHORT ) ) ; 
 + 
 / / Inserting the CQL row marker ( see # 4361 ) 
 / / We always need to insert a marker for INSERT , because of the following situation : 
 / / CREATE TABLE t ( k int PRIMARY KEY , c text ) ; 
 @ @ - 99 , 6 + 105 , 20 @ @ public class UpdateStatement extends ModificationStatement 
 for ( Operation update : updates ) 
 update . execute ( key , cf , builder . copy ( ) , params ) ; 
 } 
 + 
 + SecondaryIndexManager indexManager = Keyspace . open ( cfm . ksName ) . getColumnFamilyStore ( cfm . cfId ) . indexManager ; 
 + if ( indexManager . hasIndexes ( ) ) 
 + { 
 + for ( Column column : cf ) 
 + { 
 + if ( ! indexManager . validate ( column ) ) 
 + throw new InvalidRequestException ( String . format ( " Can ' t index column value of size % d for index % s on % s . % s " , 
 + column . value ( ) . remaining ( ) , 
 + cfm . getColumnDefinitionFromColumnName ( column . name ( ) ) . getIndexName ( ) , 
 + cfm . ksName , 
 + cfm . cfName ) ) ; 
 + } 
 + } 
 } 
 
 public static class ParsedInsert extends ModificationStatement . Parsed 
 diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 index 6d9f28a . . fda79f8 100644 
 - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 @ @ - 574 , 8 + 574 , 10 @ @ public class SecondaryIndexManager 
 
 public boolean validate ( Column column ) 
 { 
 - SecondaryIndex index = getIndexForColumn ( column . name ( ) ) ; 
 - return index = = null | | index . validate ( column ) ; 
 + for ( SecondaryIndex index : indexFor ( column . name ( ) ) ) 
 + if ( ! index . validate ( column ) ) 
 + return false ; 
 + return true ; 
 } 
 
 public static interface Updater 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / CompositeType . java b / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 index 946ba24 . . f0d9d9b 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 @ @ - 504 , 5 + 504 , 14 @ @ public class CompositeType extends AbstractCompositeType 
 
 return components . get ( i ) ; 
 } 
 + 
 + public int getLength ( ) 
 + { 
 + int length = 0 ; 
 + for ( ByteBuffer component : components ) 
 + length + = component . remaining ( ) + 3 ; / / length + 2 bytes for length + EOC 
 + 
 + return length ; 
 + } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 index 4619ddc . . afa066d 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 @ @ - 36 , 6 + 36 , 7 @ @ import org . apache . cassandra . io . compress . CompressedSequentialWriter ; 
 import org . apache . cassandra . io . util . * ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . FilterFactory ; 
 import org . apache . cassandra . utils . IFilter ; 
 import org . apache . cassandra . utils . Pair ; 
 @ @ - 181 , 6 + 182 , 14 @ @ public class SSTableWriter extends SSTable 
 
 public void append ( DecoratedKey decoratedKey , ColumnFamily cf ) 
 { 
 + if ( decoratedKey . key . remaining ( ) > FBUtilities . MAX _ UNSIGNED _ SHORT ) 
 + { 
 + logger . error ( " Key size { } exceeds maximum of { } , skipping row " , 
 + decoratedKey . key . remaining ( ) , 
 + FBUtilities . MAX _ UNSIGNED _ SHORT ) ; 
 + return ; 
 + } 
 + 
 long startPosition = beforeAppend ( decoratedKey ) ; 
 try 
 { 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / IndexedValuesValidationTest . java b / test / unit / org / apache / cassandra / cql3 / IndexedValuesValidationTest . java 
 new file mode 100644 
 index 0000000 . . 9c2bc0f 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / cql3 / IndexedValuesValidationTest . java 
 @ @ - 0 , 0 + 1 , 124 @ @ 
 + / * 
 + * 
 + * * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * * or more contributor license agreements . See the NOTICE file 
 + * * distributed with this work for additional information 
 + * * regarding copyright ownership . The ASF licenses this file 
 + * * to you under the Apache License , Version 2 . 0 ( the 
 + * * " License " ) ; you may not use this file except in compliance 
 + * * with the License . You may obtain a copy of the License at 
 + * * 
 + * * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * * 
 + * * Unless required by applicable law or agreed to in writing , software 
 + * * distributed under the License is distributed on an " AS IS " BASIS , 
 + * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * * See the License for the specific language governing permissions and 
 + * * limitations under the License . 
 + * 
 + * / 
 + package org . apache . cassandra . cql3 ; 
 + 
 + import java . nio . ByteBuffer ; 
 + import java . util . Collections ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . SchemaLoader ; 
 + import org . apache . cassandra . db . ConsistencyLevel ; 
 + import org . apache . cassandra . exceptions . InvalidRequestException ; 
 + import org . apache . cassandra . exceptions . RequestExecutionException ; 
 + import org . apache . cassandra . exceptions . RequestValidationException ; 
 + import org . apache . cassandra . service . ClientState ; 
 + import org . apache . cassandra . service . QueryState ; 
 + import org . apache . cassandra . utils . MD5Digest ; 
 + 
 + import static org . junit . Assert . fail ; 
 + import static org . apache . cassandra . cql3 . QueryProcessor . process ; 
 + 
 + public class IndexedValuesValidationTest 
 + { 
 + static ClientState clientState ; 
 + static String keyspace = " indexed _ value _ validation _ test " ; 
 + 
 + @ BeforeClass 
 + public static void setUpClass ( ) throws Throwable 
 + { 
 + SchemaLoader . loadSchema ( ) ; 
 + executeSchemaChange ( " CREATE KEYSPACE IF NOT EXISTS % s WITH replication = { ' class ' : ' SimpleStrategy ' , ' replication _ factor ' : ' 1 ' } " ) ; 
 + clientState = ClientState . forInternalCalls ( ) ; 
 + } 
 + 
 + / / CASSANDRA - 8280 / 8081 
 + / / reject updates with indexed values where value > 64k 
 + @ Test 
 + public void testIndexOnCompositeValueOver64k ( ) throws Throwable 
 + { 
 + executeSchemaChange ( " CREATE TABLE % s . composite _ index _ table ( a int , b int , c blob , PRIMARY KEY ( a ) ) " ) ; 
 + executeSchemaChange ( " CREATE INDEX ON % s . composite _ index _ table ( c ) " ) ; 
 + performInsertWithIndexedValueOver64k ( " INSERT INTO % s . composite _ index _ table ( a , b , c ) VALUES ( 0 , 0 , ? ) " ) ; 
 + } 
 + 
 + @ Test 
 + public void testIndexOnClusteringValueOver64k ( ) throws Throwable 
 + { 
 + executeSchemaChange ( " CREATE TABLE % s . ck _ index _ table ( a int , b blob , c int , PRIMARY KEY ( a , b ) ) " ) ; 
 + executeSchemaChange ( " CREATE INDEX ON % s . ck _ index _ table ( b ) " ) ; 
 + performInsertWithIndexedValueOver64k ( " INSERT INTO % s . ck _ index _ table ( a , b , c ) VALUES ( 0 , ? , 0 ) " ) ; 
 + } 
 + 
 + @ Test 
 + public void testIndexOnPartitionKeyOver64k ( ) throws Throwable 
 + { 
 + executeSchemaChange ( " CREATE TABLE % s . pk _ index _ table ( a blob , b int , c int , PRIMARY KEY ( ( a , b ) ) ) " ) ; 
 + executeSchemaChange ( " CREATE INDEX ON % s . pk _ index _ table ( a ) " ) ; 
 + performInsertWithIndexedValueOver64k ( " INSERT INTO % s . pk _ index _ table ( a , b , c ) VALUES ( ? , 0 , 0 ) " ) ; 
 + } 
 + 
 + @ Test 
 + public void testCompactTableWithValueOver64k ( ) throws Throwable 
 + { 
 + executeSchemaChange ( " CREATE TABLE % s . compact _ table ( a int , b blob , PRIMARY KEY ( a ) ) WITH COMPACT STORAGE " ) ; 
 + executeSchemaChange ( " CREATE INDEX ON % s . compact _ table ( b ) " ) ; 
 + performInsertWithIndexedValueOver64k ( " INSERT INTO % s . compact _ table ( a , b ) VALUES ( 0 , ? ) " ) ; 
 + } 
 + 
 + private static void performInsertWithIndexedValueOver64k ( String insertCQL ) throws Exception 
 + { 
 + ByteBuffer buf = ByteBuffer . allocate ( 1024 * 65 ) ; 
 + buf . clear ( ) ; 
 + for ( int i = 0 ; i < 1024 + 1 ; i + + ) 
 + buf . put ( ( byte ) 0 ) ; 
 + 
 + try 
 + { 
 + execute ( String . format ( insertCQL , keyspace ) , buf ) ; 
 + fail ( " Expected statement to fail validation " ) ; 
 + } 
 + catch ( InvalidRequestException e ) 
 + { 
 + / / as expected 
 + } 
 + } 
 + 
 + private static void execute ( String query , ByteBuffer value ) throws RequestValidationException , RequestExecutionException 
 + { 
 + MD5Digest statementId = QueryProcessor . prepare ( String . format ( query , keyspace ) , clientState , false ) . statementId ; 
 + CQLStatement statement = QueryProcessor . instance . getPrepared ( statementId ) ; 
 + statement . executeInternal ( QueryState . forInternalCalls ( ) , 
 + new QueryOptions ( ConsistencyLevel . ONE , Collections . singletonList ( value ) ) ) ; 
 + } 
 + 
 + private static void executeSchemaChange ( String query ) throws Throwable 
 + { 
 + try 
 + { 
 + process ( String . format ( query , keyspace ) , ConsistencyLevel . ONE ) ; 
 + } 
 + catch ( RuntimeException exc ) 
 + { 
 + throw exc . getCause ( ) ; 
 + } 
 + } 
 + } 
 +

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d518830 . . 52cc2c1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 29 , 7 + 29 , 7 @ @ 
 * add scheduler JMX metrics ( CASSANDRA - 2962 ) 
 * add block level checksum for compressed data ( CASSANDRA - 1717 ) 
 * make column family backed column map pluggable and introduce unsynchronized 
 - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) 
 + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) 
 * refactoring of the secondary index api ( CASSANDRA - 2982 ) 
 * make CL > ONE reads wait for digest reconciliation before returning 
 ( CASSANDRA - 2494 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 index c316a85 . . 71c7213 100644 
 - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor 
 this . reversed = reversed ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public AbstractType < ? > getComparator ( ) 
 { 
 return comparator ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 1239d1c . . 38bc0d7 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer 
 this . cfm = cfm ; 
 } 
 
 - public ColumnFamily cloneMeShallow ( ) 
 + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) 
 { 
 - ColumnFamily cf = ColumnFamily . create ( cfm ) ; 
 + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; 
 / / since deletion info is immutable , aliasing it is fine 
 cf . deletionInfo . set ( deletionInfo . get ( ) ) ; 
 return cf ; 
 } 
 
 + public ColumnFamily cloneMeShallow ( ) 
 + { 
 + return cloneMeShallow ( columns . getFactory ( ) ) ; 
 + } 
 + 
 public AbstractType getSubComparator ( ) 
 { 
 IColumnSerializer s = getColumnSerializer ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 0bfd1c5 . . 552d3e9 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 - * tombstones that are no longer relevant . * / 
 + / * * 
 + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 + * tombstones that are no longer relevant . 
 + * The returned column family won ' t be thread safe . 
 + * / 
 ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) 
 { 
 / / special case slicing the entire row : 
 @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; 
 if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) 
 { 
 - ColumnFamily cf = cached . cloneMeShallow ( ) ; 
 + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 if ( sc ! = null ) 
 cf . addColumn ( sc , HeapAllocator . instance ) ; 
 return removeDeleted ( cf , gcBefore ) ; 
 @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 
 IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; 
 - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; 
 + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; 
 / / TODO this is necessary because when we collate supercolumns together , we don ' t check 
 / / their subcolumns for relevance , so we need to do a second prune post facto here . 
 diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 index 37f5a60 . . 624dec7 100644 
 - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns 
 public ISortedColumns cloneMe ( ) ; 
 
 / * * 
 + * Returns the factory used for this ISortedColumns implementation . 
 + * / 
 + public Factory getFactory ( ) ; 
 + 
 + / * * 
 * Adds a column to this column map . 
 * If a column with the same name is already present in the map , it will 
 * be replaced by the newly added column . 
 diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 index cd2488a . . 13a111a 100644 
 - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new ThreadSafeSortedColumns ( this ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 index 34e83dc . . 6c3fc42 100644 
 - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new TreeMapBackedSortedColumns ( this ) ;
