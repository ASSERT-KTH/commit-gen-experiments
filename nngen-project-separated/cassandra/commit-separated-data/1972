BLEU SCORE: 0.017110488113633058

TEST MSG: Fix undeclared throwable exception while executing ' nodetool netstats localhost '
GENERATED MSG: ability to forcibly mark machines failed by disabling gossip via JMX .

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 601e036 . . 0456907 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 3387 , 6 + 3387 , 11 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> return operationMode . toString ( ) ; <nl> } <nl> <nl> + public boolean isStarting ( ) <nl> + { <nl> + return operationMode = = Mode . STARTING ; <nl> + } <nl> + <nl> public String getDrainProgress ( ) <nl> { <nl> return String . format ( " Drained % s / % s ColumnFamilies " , remainingCFs , totalCFs ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index 2386fc8 . . 0ea08a2 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 358 , 6 + 358 , 9 @ @ public interface StorageServiceMBean extends NotificationEmitter <nl> / * * get the operational mode ( leaving , joining , normal , decommissioned , client ) * * / <nl> public String getOperationMode ( ) ; <nl> <nl> + / * * Returns whether the storage service is starting or not * / <nl> + public boolean isStarting ( ) ; <nl> + <nl> / * * get the progress of a drain operation * / <nl> public String getDrainProgress ( ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> index e4a14b2 . . b085088 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> @ @ - 762 , 32 + 762 , 35 @ @ public class NodeCmd <nl> } <nl> } <nl> <nl> - outs . printf ( " Read Repair Statistics : % nAttempted : % d % nMismatch ( Blocking ) : % d % nMismatch ( Background ) : % d % n " , probe . getReadRepairAttempted ( ) , probe . getReadRepairRepairedBlocking ( ) , probe . getReadRepairRepairedBackground ( ) ) ; <nl> - <nl> - MessagingServiceMBean ms = probe . msProxy ; <nl> - outs . printf ( " % - 25s " , " Pool Name " ) ; <nl> - outs . printf ( " % 10s " , " Active " ) ; <nl> - outs . printf ( " % 10s " , " Pending " ) ; <nl> - outs . printf ( " % 15s % n " , " Completed " ) ; <nl> - <nl> - int pending ; <nl> - long completed ; <nl> - <nl> - pending = 0 ; <nl> - for ( int n : ms . getCommandPendingTasks ( ) . values ( ) ) <nl> - pending + = n ; <nl> - completed = 0 ; <nl> - for ( long n : ms . getCommandCompletedTasks ( ) . values ( ) ) <nl> - completed + = n ; <nl> - outs . printf ( " % - 25s % 10s % 10s % 15s % n " , " Commands " , " n / a " , pending , completed ) ; <nl> - <nl> - pending = 0 ; <nl> - for ( int n : ms . getResponsePendingTasks ( ) . values ( ) ) <nl> - pending + = n ; <nl> - completed = 0 ; <nl> - for ( long n : ms . getResponseCompletedTasks ( ) . values ( ) ) <nl> - completed + = n ; <nl> - outs . printf ( " % - 25s % 10s % 10s % 15s % n " , " Responses " , " n / a " , pending , completed ) ; <nl> + if ( ! probe . isStarting ( ) ) <nl> + { <nl> + 	 outs . printf ( " Read Repair Statistics : % nAttempted : % d % nMismatch ( Blocking ) : % d % nMismatch ( Background ) : % d % n " , probe . getReadRepairAttempted ( ) , probe . getReadRepairRepairedBlocking ( ) , probe . getReadRepairRepairedBackground ( ) ) ; <nl> + <nl> + 	 MessagingServiceMBean ms = probe . msProxy ; <nl> + 	 outs . printf ( " % - 25s " , " Pool Name " ) ; <nl> + 	 outs . printf ( " % 10s " , " Active " ) ; <nl> + 	 outs . printf ( " % 10s " , " Pending " ) ; <nl> + 	 outs . printf ( " % 15s % n " , " Completed " ) ; <nl> + <nl> + 	 int pending ; <nl> + 	 long completed ; <nl> + <nl> + 	 pending = 0 ; <nl> + 	 for ( int n : ms . getCommandPendingTasks ( ) . values ( ) ) <nl> + 	 pending + = n ; <nl> + 	 completed = 0 ; <nl> + 	 for ( long n : ms . getCommandCompletedTasks ( ) . values ( ) ) <nl> + 	 completed + = n ; <nl> + 	 outs . printf ( " % - 25s % 10s % 10s % 15s % n " , " Commands " , " n / a " , pending , completed ) ; <nl> + <nl> + 	 pending = 0 ; <nl> + 	 for ( int n : ms . getResponsePendingTasks ( ) . values ( ) ) <nl> + 	 pending + = n ; <nl> + 	 completed = 0 ; <nl> + 	 for ( long n : ms . getResponseCompletedTasks ( ) . values ( ) ) <nl> + 	 completed + = n ; <nl> + 	 outs . printf ( " % - 25s % 10s % 10s % 15s % n " , " Responses " , " n / a " , pending , completed ) ; <nl> + } <nl> } <nl> <nl> public void printCompactionStats ( PrintStream outs ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index 261d416 . . 3736659 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 602 , 6 + 602 , 11 @ @ public class NodeProbe <nl> return ssProxy . getOperationMode ( ) ; <nl> } <nl> <nl> + public boolean isStarting ( ) <nl> + { <nl> + return ssProxy . isStarting ( ) ; <nl> + } <nl> + <nl> public void truncate ( String keyspaceName , String cfName ) <nl> { <nl> try
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d16ddac . . 80e194d 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 30 , 6 + 30 , 8 @ @ dev <nl> * include secondary indexes in cleanup ( CASSANDRA - 1916 ) <nl> * CFS . scrubDataDirectories should also cleanup invalid secondary indexes <nl> ( CASSANDRA - 1904 ) <nl> + * ability to disable / enable gossip on nodes to force them down <nl> + ( CASSANDRA - 1108 ) <nl> <nl> <nl> 0 . 7 . 0 - rc3 <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index b4eb27c . . ff0dcee 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 246 , 6 + 246 , 28 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> throw new RuntimeException ( " Streaming service is unavailable . " ) ; <nl> } <nl> <nl> + / / should only be called via JMX <nl> + public void stopGossiping ( ) <nl> + { <nl> + if ( initialized ) <nl> + { <nl> + logger _ . warn ( " Stopping gossip by operator request " ) ; <nl> + Gossiper . instance . stop ( ) ; <nl> + initialized = false ; <nl> + } <nl> + } <nl> + <nl> + / / should only be called via JMX <nl> + public void startGossiping ( ) <nl> + { <nl> + if ( ! initialized ) <nl> + { <nl> + logger _ . warn ( " Starting gossip by operator request " ) ; <nl> + Gossiper . instance . start ( FBUtilities . getLocalAddress ( ) , ( int ) ( System . currentTimeMillis ( ) / 1000 ) ) ; <nl> + initialized = true ; <nl> + } <nl> + } <nl> + <nl> public void stopClient ( ) <nl> { <nl> Gossiper . instance . unregister ( migrationManager ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index acce2b7 . . 5d2a4fd 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 270 , 4 + 270 , 13 @ @ public interface StorageServiceMBean <nl> * @ throws ConfigurationException classname not found on classpath <nl> * / <nl> public void updateSnitch ( String epSnitchClassName , Boolean dynamic , Integer dynamicUpdateInterval , Integer dynamicResetInterval , Double dynamicBadnessThreshold ) throws ConfigurationException ; <nl> + <nl> + / / allows a user to forcibly ' kill ' a sick node <nl> + public void stopGossiping ( ) ; <nl> + <nl> + / / allows a user to recover a forcibly ' killed ' node <nl> + public void startGossiping ( ) ; <nl> + <nl> + / / to determine if gossip is disabled <nl> + public boolean isInitialized ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> index 47f5139 . . e29e9fe 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> @ @ - 74 , 7 + 74 , 7 @ @ public class NodeCmd { <nl> RING , INFO , CFSTATS , SNAPSHOT , CLEARSNAPSHOT , VERSION , TPSTATS , FLUSH , DRAIN , <nl> DECOMMISSION , MOVE , LOADBALANCE , REMOVETOKEN , REPAIR , CLEANUP , COMPACT , <nl> SETCACHECAPACITY , GETCOMPACTIONTHRESHOLD , SETCOMPACTIONTHRESHOLD , NETSTATS , CFHISTOGRAMS , <nl> - COMPACTIONSTATS <nl> + COMPACTIONSTATS , DISABLEGOSSIP , ENABLEGOSSIP <nl> } <nl> <nl> <nl> @ @ - 96 , 6 + 96 , 8 @ @ public class NodeCmd { <nl> + " decommission \ n " <nl> + " loadbalance \ n " <nl> + " compactionstats \ n " <nl> + + " disablegossip \ n " <nl> + + " enablegossip \ n " <nl> <nl> / / One arg <nl> + " snapshot [ snapshotname ] \ n " <nl> @ @ - 189 , 6 + 191 , 7 @ @ public class NodeCmd { <nl> public void printInfo ( PrintStream outs ) <nl> { <nl> outs . println ( probe . getToken ( ) ) ; <nl> + outs . printf ( " % - 17s : % s % n " , " Gossip active " , probe . isInitialized ( ) ) ; <nl> outs . printf ( " % - 17s : % s % n " , " Load " , probe . getLoadString ( ) ) ; <nl> outs . printf ( " % - 17s : % s % n " , " Generation No " , probe . getCurrentGenerationNumber ( ) ) ; <nl> <nl> @ @ - 519 , 6 + 522 , 8 @ @ public class NodeCmd { <nl> case TPSTATS : nodeCmd . printThreadPoolStats ( System . out ) ; break ; <nl> case VERSION : nodeCmd . printReleaseVersion ( System . out ) ; break ; <nl> case COMPACTIONSTATS : nodeCmd . printCompactionStats ( System . out ) ; break ; <nl> + case DISABLEGOSSIP : probe . stopGossiping ( ) ; break ; <nl> + case ENABLEGOSSIP : probe . startGossiping ( ) ; break ; <nl> <nl> case DRAIN : <nl> try { probe . drain ( ) ; } <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index 8177a29 . . a618e5a 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 503 , 6 + 503 , 21 @ @ public class NodeProbe <nl> { <nl> return ssProxy . getKeyspaces ( ) ; <nl> } <nl> + <nl> + public void stopGossiping ( ) <nl> + { <nl> + ssProxy . stopGossiping ( ) ; <nl> + } <nl> + <nl> + public void startGossiping ( ) <nl> + { <nl> + ssProxy . startGossiping ( ) ; <nl> + } <nl> + <nl> + public boolean isInitialized ( ) <nl> + { <nl> + return ssProxy . isInitialized ( ) ; <nl> + } <nl> } <nl> <nl> class ColumnFamilyStoreMBeanIterator implements Iterator < Map . Entry < String , ColumnFamilyStoreMBean > >

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 601e036 . . 0456907 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 3387 , 6 + 3387 , 11 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 return operationMode . toString ( ) ; 
 } 
 
 + public boolean isStarting ( ) 
 + { 
 + return operationMode = = Mode . STARTING ; 
 + } 
 + 
 public String getDrainProgress ( ) 
 { 
 return String . format ( " Drained % s / % s ColumnFamilies " , remainingCFs , totalCFs ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index 2386fc8 . . 0ea08a2 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 358 , 6 + 358 , 9 @ @ public interface StorageServiceMBean extends NotificationEmitter 
 / * * get the operational mode ( leaving , joining , normal , decommissioned , client ) * * / 
 public String getOperationMode ( ) ; 
 
 + / * * Returns whether the storage service is starting or not * / 
 + public boolean isStarting ( ) ; 
 + 
 / * * get the progress of a drain operation * / 
 public String getDrainProgress ( ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 index e4a14b2 . . b085088 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 @ @ - 762 , 32 + 762 , 35 @ @ public class NodeCmd 
 } 
 } 
 
 - outs . printf ( " Read Repair Statistics : % nAttempted : % d % nMismatch ( Blocking ) : % d % nMismatch ( Background ) : % d % n " , probe . getReadRepairAttempted ( ) , probe . getReadRepairRepairedBlocking ( ) , probe . getReadRepairRepairedBackground ( ) ) ; 
 - 
 - MessagingServiceMBean ms = probe . msProxy ; 
 - outs . printf ( " % - 25s " , " Pool Name " ) ; 
 - outs . printf ( " % 10s " , " Active " ) ; 
 - outs . printf ( " % 10s " , " Pending " ) ; 
 - outs . printf ( " % 15s % n " , " Completed " ) ; 
 - 
 - int pending ; 
 - long completed ; 
 - 
 - pending = 0 ; 
 - for ( int n : ms . getCommandPendingTasks ( ) . values ( ) ) 
 - pending + = n ; 
 - completed = 0 ; 
 - for ( long n : ms . getCommandCompletedTasks ( ) . values ( ) ) 
 - completed + = n ; 
 - outs . printf ( " % - 25s % 10s % 10s % 15s % n " , " Commands " , " n / a " , pending , completed ) ; 
 - 
 - pending = 0 ; 
 - for ( int n : ms . getResponsePendingTasks ( ) . values ( ) ) 
 - pending + = n ; 
 - completed = 0 ; 
 - for ( long n : ms . getResponseCompletedTasks ( ) . values ( ) ) 
 - completed + = n ; 
 - outs . printf ( " % - 25s % 10s % 10s % 15s % n " , " Responses " , " n / a " , pending , completed ) ; 
 + if ( ! probe . isStarting ( ) ) 
 + { 
 + 	 outs . printf ( " Read Repair Statistics : % nAttempted : % d % nMismatch ( Blocking ) : % d % nMismatch ( Background ) : % d % n " , probe . getReadRepairAttempted ( ) , probe . getReadRepairRepairedBlocking ( ) , probe . getReadRepairRepairedBackground ( ) ) ; 
 + 
 + 	 MessagingServiceMBean ms = probe . msProxy ; 
 + 	 outs . printf ( " % - 25s " , " Pool Name " ) ; 
 + 	 outs . printf ( " % 10s " , " Active " ) ; 
 + 	 outs . printf ( " % 10s " , " Pending " ) ; 
 + 	 outs . printf ( " % 15s % n " , " Completed " ) ; 
 + 
 + 	 int pending ; 
 + 	 long completed ; 
 + 
 + 	 pending = 0 ; 
 + 	 for ( int n : ms . getCommandPendingTasks ( ) . values ( ) ) 
 + 	 pending + = n ; 
 + 	 completed = 0 ; 
 + 	 for ( long n : ms . getCommandCompletedTasks ( ) . values ( ) ) 
 + 	 completed + = n ; 
 + 	 outs . printf ( " % - 25s % 10s % 10s % 15s % n " , " Commands " , " n / a " , pending , completed ) ; 
 + 
 + 	 pending = 0 ; 
 + 	 for ( int n : ms . getResponsePendingTasks ( ) . values ( ) ) 
 + 	 pending + = n ; 
 + 	 completed = 0 ; 
 + 	 for ( long n : ms . getResponseCompletedTasks ( ) . values ( ) ) 
 + 	 completed + = n ; 
 + 	 outs . printf ( " % - 25s % 10s % 10s % 15s % n " , " Responses " , " n / a " , pending , completed ) ; 
 + } 
 } 
 
 public void printCompactionStats ( PrintStream outs ) 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index 261d416 . . 3736659 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 602 , 6 + 602 , 11 @ @ public class NodeProbe 
 return ssProxy . getOperationMode ( ) ; 
 } 
 
 + public boolean isStarting ( ) 
 + { 
 + return ssProxy . isStarting ( ) ; 
 + } 
 + 
 public void truncate ( String keyspaceName , String cfName ) 
 { 
 try

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d16ddac . . 80e194d 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 30 , 6 + 30 , 8 @ @ dev 
 * include secondary indexes in cleanup ( CASSANDRA - 1916 ) 
 * CFS . scrubDataDirectories should also cleanup invalid secondary indexes 
 ( CASSANDRA - 1904 ) 
 + * ability to disable / enable gossip on nodes to force them down 
 + ( CASSANDRA - 1108 ) 
 
 
 0 . 7 . 0 - rc3 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index b4eb27c . . ff0dcee 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 246 , 6 + 246 , 28 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 throw new RuntimeException ( " Streaming service is unavailable . " ) ; 
 } 
 
 + / / should only be called via JMX 
 + public void stopGossiping ( ) 
 + { 
 + if ( initialized ) 
 + { 
 + logger _ . warn ( " Stopping gossip by operator request " ) ; 
 + Gossiper . instance . stop ( ) ; 
 + initialized = false ; 
 + } 
 + } 
 + 
 + / / should only be called via JMX 
 + public void startGossiping ( ) 
 + { 
 + if ( ! initialized ) 
 + { 
 + logger _ . warn ( " Starting gossip by operator request " ) ; 
 + Gossiper . instance . start ( FBUtilities . getLocalAddress ( ) , ( int ) ( System . currentTimeMillis ( ) / 1000 ) ) ; 
 + initialized = true ; 
 + } 
 + } 
 + 
 public void stopClient ( ) 
 { 
 Gossiper . instance . unregister ( migrationManager ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index acce2b7 . . 5d2a4fd 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 270 , 4 + 270 , 13 @ @ public interface StorageServiceMBean 
 * @ throws ConfigurationException classname not found on classpath 
 * / 
 public void updateSnitch ( String epSnitchClassName , Boolean dynamic , Integer dynamicUpdateInterval , Integer dynamicResetInterval , Double dynamicBadnessThreshold ) throws ConfigurationException ; 
 + 
 + / / allows a user to forcibly ' kill ' a sick node 
 + public void stopGossiping ( ) ; 
 + 
 + / / allows a user to recover a forcibly ' killed ' node 
 + public void startGossiping ( ) ; 
 + 
 + / / to determine if gossip is disabled 
 + public boolean isInitialized ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 index 47f5139 . . e29e9fe 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 @ @ - 74 , 7 + 74 , 7 @ @ public class NodeCmd { 
 RING , INFO , CFSTATS , SNAPSHOT , CLEARSNAPSHOT , VERSION , TPSTATS , FLUSH , DRAIN , 
 DECOMMISSION , MOVE , LOADBALANCE , REMOVETOKEN , REPAIR , CLEANUP , COMPACT , 
 SETCACHECAPACITY , GETCOMPACTIONTHRESHOLD , SETCOMPACTIONTHRESHOLD , NETSTATS , CFHISTOGRAMS , 
 - COMPACTIONSTATS 
 + COMPACTIONSTATS , DISABLEGOSSIP , ENABLEGOSSIP 
 } 
 
 
 @ @ - 96 , 6 + 96 , 8 @ @ public class NodeCmd { 
 + " decommission \ n " 
 + " loadbalance \ n " 
 + " compactionstats \ n " 
 + + " disablegossip \ n " 
 + + " enablegossip \ n " 
 
 / / One arg 
 + " snapshot [ snapshotname ] \ n " 
 @ @ - 189 , 6 + 191 , 7 @ @ public class NodeCmd { 
 public void printInfo ( PrintStream outs ) 
 { 
 outs . println ( probe . getToken ( ) ) ; 
 + outs . printf ( " % - 17s : % s % n " , " Gossip active " , probe . isInitialized ( ) ) ; 
 outs . printf ( " % - 17s : % s % n " , " Load " , probe . getLoadString ( ) ) ; 
 outs . printf ( " % - 17s : % s % n " , " Generation No " , probe . getCurrentGenerationNumber ( ) ) ; 
 
 @ @ - 519 , 6 + 522 , 8 @ @ public class NodeCmd { 
 case TPSTATS : nodeCmd . printThreadPoolStats ( System . out ) ; break ; 
 case VERSION : nodeCmd . printReleaseVersion ( System . out ) ; break ; 
 case COMPACTIONSTATS : nodeCmd . printCompactionStats ( System . out ) ; break ; 
 + case DISABLEGOSSIP : probe . stopGossiping ( ) ; break ; 
 + case ENABLEGOSSIP : probe . startGossiping ( ) ; break ; 
 
 case DRAIN : 
 try { probe . drain ( ) ; } 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index 8177a29 . . a618e5a 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 503 , 6 + 503 , 21 @ @ public class NodeProbe 
 { 
 return ssProxy . getKeyspaces ( ) ; 
 } 
 + 
 + public void stopGossiping ( ) 
 + { 
 + ssProxy . stopGossiping ( ) ; 
 + } 
 + 
 + public void startGossiping ( ) 
 + { 
 + ssProxy . startGossiping ( ) ; 
 + } 
 + 
 + public boolean isInitialized ( ) 
 + { 
 + return ssProxy . isInitialized ( ) ; 
 + } 
 } 
 
 class ColumnFamilyStoreMBeanIterator implements Iterator < Map . Entry < String , ColumnFamilyStoreMBean > >
