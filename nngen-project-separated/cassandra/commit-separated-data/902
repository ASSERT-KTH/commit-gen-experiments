BLEU SCORE: 0.17965205598154216

TEST MSG: Add missing tools to debian package
GENERATED MSG: Add sstablescrub to debian packaging

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 06b27b4 . . d73ed01 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 7 <nl> + * Add missing files to debian packages ( CASSANDRA - 11642 ) <nl> * Avoid calling Iterables : : concat in loops during ModificationStatement : : getFunctions ( CASSANDRA - 11621 ) <nl> * cqlsh : COPY FROM should use regular inserts for single statement batches and <nl> report errors correctly if workers processes crash on initialization ( CASSANDRA - 11474 ) <nl> diff - - git a / debian / cassandra . install b / debian / cassandra . install <nl> index 6488dbe . . 91faca4 100644 <nl> - - - a / debian / cassandra . install <nl> + + + b / debian / cassandra . install <nl> @ @ - 17 , 6 + 17 , 7 @ @ bin / cqlsh usr / bin <nl> bin / cqlsh . py usr / bin <nl> bin / sstablescrub usr / bin <nl> bin / sstableupgrade usr / bin <nl> + bin / sstableverify usr / bin <nl> tools / bin / cassandra - stress usr / bin <nl> lib / * . jar usr / share / cassandra / lib <nl> lib / * . zip usr / share / cassandra / lib
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 5fcc7a4 . . 58b3272 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 50 , 7 + 50 , 7 @ @ <nl> * ( cql3 ) Add support for 2ndary indexes ( CASSANDRA - 3680 ) <nl> * ( cql3 ) fix defining more than one PK to be invalid ( CASSANDRA - 4477 ) <nl> * remove schema agreement checking from all external APIs ( Thrift , CQL and CQL3 ) ( CASSANDRA - 4487 ) <nl> - * add Murmur3Partitioner and make it default for new installations ( CASSANDRA - 3772 ) <nl> + * add Murmur3Partitioner and make it default for new installations ( CASSANDRA - 3772 , 4621 ) <nl> * ( cql3 ) update pseudo - map syntax to use map syntax ( CASSANDRA - 4497 ) <nl> * Finer grained exceptions hierarchy and provides error code with exceptions ( CASSANDRA - 3979 ) <nl> * Adds events push to binary protocol ( CASSANDRA - 4480 ) <nl> diff - - git a / src / java / org / apache / cassandra / dht / Murmur3Partitioner . java b / src / java / org / apache / cassandra / dht / Murmur3Partitioner . java <nl> index 3a3972b . . 440b159 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / Murmur3Partitioner . java <nl> + + + b / src / java / org / apache / cassandra / dht / Murmur3Partitioner . java <nl> @ @ - 35 , 7 + 35 , 7 @ @ import org . apache . cassandra . utils . MurmurHash ; <nl> * / <nl> public class Murmur3Partitioner extends AbstractPartitioner < LongToken > <nl> { <nl> - public static final LongToken MINIMUM = new LongToken ( 0L ) ; <nl> + public static final LongToken MINIMUM = new LongToken ( Long . MIN _ VALUE ) ; <nl> public static final long MAXIMUM = Long . MAX _ VALUE ; <nl> <nl> public DecoratedKey convertFromDiskFormat ( ByteBuffer key ) <nl> @ @ - 74 , 18 + 74 , 30 @ @ public class Murmur3Partitioner extends AbstractPartitioner < LongToken > <nl> return MINIMUM ; <nl> } <nl> <nl> + / * * <nl> + * Generate the token of a key . <nl> + * Note that we need to ensure all generated token are strictly bigger than MINIMUM . <nl> + * In particular we don ' t want MINIMUM to correspond to any key because the range ( MINIMUM , X ] doesn ' t <nl> + * include MINIMUM but we use such range to select all data whose token is smaller than X . <nl> + * / <nl> public LongToken getToken ( ByteBuffer key ) <nl> { <nl> if ( key . remaining ( ) = = 0 ) <nl> return MINIMUM ; <nl> <nl> long hash = MurmurHash . hash3 _ x64 _ 128 ( key , key . position ( ) , key . remaining ( ) , 0 ) [ 0 ] ; <nl> - return new LongToken ( ( hash < 0 ) ? - hash : hash ) ; <nl> + return new LongToken ( normalize ( hash ) ) ; <nl> } <nl> <nl> public LongToken getRandomToken ( ) <nl> { <nl> - return new LongToken ( FBUtilities . threadLocalRandom ( ) . nextLong ( ) ) ; <nl> + return new LongToken ( normalize ( FBUtilities . threadLocalRandom ( ) . nextLong ( ) ) ) ; <nl> + } <nl> + <nl> + private long normalize ( long v ) <nl> + { <nl> + / / We exclude the MINIMUM value ; see getToken ( ) <nl> + return v = = Long . MIN _ VALUE ? Long . MAX _ VALUE : v ; <nl> } <nl> <nl> public boolean preservesOrder ( ) <nl> @ @ - 154 , 12 + 166 , 6 @ @ public class Murmur3Partitioner extends AbstractPartitioner < LongToken > <nl> try <nl> { <nl> Long i = Long . valueOf ( token ) ; <nl> - <nl> - if ( i . compareTo ( MINIMUM . token ) < 0 ) <nl> - throw new ConfigurationException ( " Token must be > = 0 " ) ; <nl> - <nl> - if ( i . compareTo ( MAXIMUM ) > 0 ) <nl> - throw new ConfigurationException ( " Token must be < = " + Long . MAX _ VALUE ) ; <nl> } <nl> catch ( NumberFormatException e ) <nl> {

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 06b27b4 . . d73ed01 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 7 
 + * Add missing files to debian packages ( CASSANDRA - 11642 ) 
 * Avoid calling Iterables : : concat in loops during ModificationStatement : : getFunctions ( CASSANDRA - 11621 ) 
 * cqlsh : COPY FROM should use regular inserts for single statement batches and 
 report errors correctly if workers processes crash on initialization ( CASSANDRA - 11474 ) 
 diff - - git a / debian / cassandra . install b / debian / cassandra . install 
 index 6488dbe . . 91faca4 100644 
 - - - a / debian / cassandra . install 
 + + + b / debian / cassandra . install 
 @ @ - 17 , 6 + 17 , 7 @ @ bin / cqlsh usr / bin 
 bin / cqlsh . py usr / bin 
 bin / sstablescrub usr / bin 
 bin / sstableupgrade usr / bin 
 + bin / sstableverify usr / bin 
 tools / bin / cassandra - stress usr / bin 
 lib / * . jar usr / share / cassandra / lib 
 lib / * . zip usr / share / cassandra / lib

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 5fcc7a4 . . 58b3272 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 50 , 7 + 50 , 7 @ @ 
 * ( cql3 ) Add support for 2ndary indexes ( CASSANDRA - 3680 ) 
 * ( cql3 ) fix defining more than one PK to be invalid ( CASSANDRA - 4477 ) 
 * remove schema agreement checking from all external APIs ( Thrift , CQL and CQL3 ) ( CASSANDRA - 4487 ) 
 - * add Murmur3Partitioner and make it default for new installations ( CASSANDRA - 3772 ) 
 + * add Murmur3Partitioner and make it default for new installations ( CASSANDRA - 3772 , 4621 ) 
 * ( cql3 ) update pseudo - map syntax to use map syntax ( CASSANDRA - 4497 ) 
 * Finer grained exceptions hierarchy and provides error code with exceptions ( CASSANDRA - 3979 ) 
 * Adds events push to binary protocol ( CASSANDRA - 4480 ) 
 diff - - git a / src / java / org / apache / cassandra / dht / Murmur3Partitioner . java b / src / java / org / apache / cassandra / dht / Murmur3Partitioner . java 
 index 3a3972b . . 440b159 100644 
 - - - a / src / java / org / apache / cassandra / dht / Murmur3Partitioner . java 
 + + + b / src / java / org / apache / cassandra / dht / Murmur3Partitioner . java 
 @ @ - 35 , 7 + 35 , 7 @ @ import org . apache . cassandra . utils . MurmurHash ; 
 * / 
 public class Murmur3Partitioner extends AbstractPartitioner < LongToken > 
 { 
 - public static final LongToken MINIMUM = new LongToken ( 0L ) ; 
 + public static final LongToken MINIMUM = new LongToken ( Long . MIN _ VALUE ) ; 
 public static final long MAXIMUM = Long . MAX _ VALUE ; 
 
 public DecoratedKey convertFromDiskFormat ( ByteBuffer key ) 
 @ @ - 74 , 18 + 74 , 30 @ @ public class Murmur3Partitioner extends AbstractPartitioner < LongToken > 
 return MINIMUM ; 
 } 
 
 + / * * 
 + * Generate the token of a key . 
 + * Note that we need to ensure all generated token are strictly bigger than MINIMUM . 
 + * In particular we don ' t want MINIMUM to correspond to any key because the range ( MINIMUM , X ] doesn ' t 
 + * include MINIMUM but we use such range to select all data whose token is smaller than X . 
 + * / 
 public LongToken getToken ( ByteBuffer key ) 
 { 
 if ( key . remaining ( ) = = 0 ) 
 return MINIMUM ; 
 
 long hash = MurmurHash . hash3 _ x64 _ 128 ( key , key . position ( ) , key . remaining ( ) , 0 ) [ 0 ] ; 
 - return new LongToken ( ( hash < 0 ) ? - hash : hash ) ; 
 + return new LongToken ( normalize ( hash ) ) ; 
 } 
 
 public LongToken getRandomToken ( ) 
 { 
 - return new LongToken ( FBUtilities . threadLocalRandom ( ) . nextLong ( ) ) ; 
 + return new LongToken ( normalize ( FBUtilities . threadLocalRandom ( ) . nextLong ( ) ) ) ; 
 + } 
 + 
 + private long normalize ( long v ) 
 + { 
 + / / We exclude the MINIMUM value ; see getToken ( ) 
 + return v = = Long . MIN _ VALUE ? Long . MAX _ VALUE : v ; 
 } 
 
 public boolean preservesOrder ( ) 
 @ @ - 154 , 12 + 166 , 6 @ @ public class Murmur3Partitioner extends AbstractPartitioner < LongToken > 
 try 
 { 
 Long i = Long . valueOf ( token ) ; 
 - 
 - if ( i . compareTo ( MINIMUM . token ) < 0 ) 
 - throw new ConfigurationException ( " Token must be > = 0 " ) ; 
 - 
 - if ( i . compareTo ( MAXIMUM ) > 0 ) 
 - throw new ConfigurationException ( " Token must be < = " + Long . MAX _ VALUE ) ; 
 } 
 catch ( NumberFormatException e ) 
 {
