BLEU SCORE: 0.004985938711569524

TEST MSG: remove dead code
GENERATED MSG: r / m unused code , and replace FBUtilities . byteArrayToInt with Guava Ints . fromByteArray

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / Util . java b / test / unit / org / apache / cassandra / Util . java <nl> index cdb7ac6 . . 24e334a 100644 <nl> - - - a / test / unit / org / apache / cassandra / Util . java <nl> + + + b / test / unit / org / apache / cassandra / Util . java <nl> @ @ - 211 , 27 + 211 , 6 @ @ public class Util <nl> return cfStore . getColumnFamily ( QueryFilter . getIdentityFilter ( key , cfName , System . currentTimeMillis ( ) ) ) ; <nl> } <nl> <nl> - public static byte [ ] concatByteArrays ( byte [ ] first , byte [ ] . . . remaining ) <nl> - { <nl> - int length = first . length ; <nl> - for ( byte [ ] array : remaining ) <nl> - { <nl> - length + = array . length ; <nl> - } <nl> - <nl> - byte [ ] result = new byte [ length ] ; <nl> - System . arraycopy ( first , 0 , result , 0 , first . length ) ; <nl> - int offset = first . length ; <nl> - <nl> - for ( byte [ ] array : remaining ) <nl> - { <nl> - System . arraycopy ( array , 0 , result , offset , array . length ) ; <nl> - offset + = array . length ; <nl> - } <nl> - <nl> - return result ; <nl> - } <nl> - <nl> public static boolean equalsCounterId ( CounterId n , ByteBuffer context , int offset ) <nl> { <nl> return CounterId . wrap ( context , context . position ( ) + offset ) . equals ( n ) ; <nl> @ @ - 313 , 22 + 292 , 6 @ @ public class Util <nl> assert thrown : exception . getName ( ) + " not received " ; <nl> } <nl> <nl> - public static ByteBuffer serializeForSSTable ( ColumnFamily cf ) <nl> - { <nl> - try <nl> - { <nl> - DataOutputBuffer out = new DataOutputBuffer ( ) ; <nl> - DeletionTime . serializer . serialize ( cf . deletionInfo ( ) . getTopLevelDeletion ( ) , out ) ; <nl> - out . writeInt ( cf . getColumnCount ( ) ) ; <nl> - new ColumnIndex . Builder ( cf , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , out ) . build ( cf ) ; <nl> - return ByteBuffer . wrap ( out . toByteArray ( ) ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - } <nl> - <nl> public static QueryFilter namesQueryFilter ( ColumnFamilyStore cfs , DecoratedKey key ) <nl> { <nl> SortedSet < CellName > s = new TreeSet < CellName > ( cfs . getComparator ( ) ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 09bb85d . . b31f3a0 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> * Don ' t ignore IOException during compaction ( CASSANDRA - 3655 ) <nl> * Fix assertion error for CF with gc _ grace = 0 ( CASSANDRA - 3579 ) <nl> * Shutdown ParallelCompaction reducer executor after use ( CASSANDRA - 3711 ) <nl> + * Avoid < 0 value for pending tasks in leveled compaction ( CASSANDRA - 3693 ) <nl> Merged from 0 . 8 : <nl> * avoid logging ( harmless ) exception when GC takes < 1ms ( CASSANDRA - 3656 ) <nl> * prevent new nodes from thinking down nodes are up forever ( CASSANDRA - 3626 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> index f61a26a . . 40a0a17 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import java . io . IOException ; <nl> import java . util . * ; <nl> <nl> import com . google . common . collect . Iterables ; <nl> + import com . google . common . primitives . Ints ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 202 , 11 + 203 , 14 @ @ public class LeveledManifest <nl> return builder . toString ( ) ; <nl> } <nl> <nl> - private double maxBytesForLevel ( int level ) <nl> + private long maxBytesForLevel ( int level ) <nl> { <nl> - return level = = 0 <nl> - ? 4 * maxSSTableSizeInMB * 1024 * 1024 <nl> - : Math . pow ( 10 , level ) * maxSSTableSizeInMB * 1024 * 1024 ; <nl> + if ( level = = 0 ) <nl> + return 4 * maxSSTableSizeInMB * 1024 * 1024 ; <nl> + double bytes = Math . pow ( 10 , level ) * maxSSTableSizeInMB * 1024 * 1024 ; <nl> + if ( bytes > Long . MAX _ VALUE ) <nl> + throw new RuntimeException ( " At most " + Long . MAX _ VALUE + " bytes may be in a compaction level ; your maxSSTableSize must be absurdly high to compute " + bytes ) ; <nl> + return ( long ) bytes ; <nl> } <nl> <nl> public synchronized Collection < SSTableReader > getCompactionCandidates ( ) <nl> @ @ - 424 , 12 + 428 , 14 @ @ public class LeveledManifest <nl> <nl> public int getEstimatedTasks ( ) <nl> { <nl> - int n = 0 ; <nl> + long tasks = 0 ; <nl> for ( int i = generations . length - 1 ; i > = 0 ; i - - ) <nl> { <nl> List < SSTableReader > sstables = generations [ i ] ; <nl> - n + = Math . max ( 0L , SSTableReader . getTotalBytes ( sstables ) - maxBytesForLevel ( i ) ) / ( maxSSTableSizeInMB * 1024 * 1024 ) ; <nl> + long n = Math . max ( 0L , SSTableReader . getTotalBytes ( sstables ) - maxBytesForLevel ( i ) ) / ( maxSSTableSizeInMB * 1024 * 1024 ) ; <nl> + logger . debug ( " Estimating " + n + " compaction tasks in level " + i ) ; <nl> + tasks + = n ; <nl> } <nl> - return n ; <nl> + return Ints . checkedCast ( tasks ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / Util . java b / test / unit / org / apache / cassandra / Util . java 
 index cdb7ac6 . . 24e334a 100644 
 - - - a / test / unit / org / apache / cassandra / Util . java 
 + + + b / test / unit / org / apache / cassandra / Util . java 
 @ @ - 211 , 27 + 211 , 6 @ @ public class Util 
 return cfStore . getColumnFamily ( QueryFilter . getIdentityFilter ( key , cfName , System . currentTimeMillis ( ) ) ) ; 
 } 
 
 - public static byte [ ] concatByteArrays ( byte [ ] first , byte [ ] . . . remaining ) 
 - { 
 - int length = first . length ; 
 - for ( byte [ ] array : remaining ) 
 - { 
 - length + = array . length ; 
 - } 
 - 
 - byte [ ] result = new byte [ length ] ; 
 - System . arraycopy ( first , 0 , result , 0 , first . length ) ; 
 - int offset = first . length ; 
 - 
 - for ( byte [ ] array : remaining ) 
 - { 
 - System . arraycopy ( array , 0 , result , offset , array . length ) ; 
 - offset + = array . length ; 
 - } 
 - 
 - return result ; 
 - } 
 - 
 public static boolean equalsCounterId ( CounterId n , ByteBuffer context , int offset ) 
 { 
 return CounterId . wrap ( context , context . position ( ) + offset ) . equals ( n ) ; 
 @ @ - 313 , 22 + 292 , 6 @ @ public class Util 
 assert thrown : exception . getName ( ) + " not received " ; 
 } 
 
 - public static ByteBuffer serializeForSSTable ( ColumnFamily cf ) 
 - { 
 - try 
 - { 
 - DataOutputBuffer out = new DataOutputBuffer ( ) ; 
 - DeletionTime . serializer . serialize ( cf . deletionInfo ( ) . getTopLevelDeletion ( ) , out ) ; 
 - out . writeInt ( cf . getColumnCount ( ) ) ; 
 - new ColumnIndex . Builder ( cf , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , out ) . build ( cf ) ; 
 - return ByteBuffer . wrap ( out . toByteArray ( ) ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - } 
 - 
 public static QueryFilter namesQueryFilter ( ColumnFamilyStore cfs , DecoratedKey key ) 
 { 
 SortedSet < CellName > s = new TreeSet < CellName > ( cfs . getComparator ( ) ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 09bb85d . . b31f3a0 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 * Don ' t ignore IOException during compaction ( CASSANDRA - 3655 ) 
 * Fix assertion error for CF with gc _ grace = 0 ( CASSANDRA - 3579 ) 
 * Shutdown ParallelCompaction reducer executor after use ( CASSANDRA - 3711 ) 
 + * Avoid < 0 value for pending tasks in leveled compaction ( CASSANDRA - 3693 ) 
 Merged from 0 . 8 : 
 * avoid logging ( harmless ) exception when GC takes < 1ms ( CASSANDRA - 3656 ) 
 * prevent new nodes from thinking down nodes are up forever ( CASSANDRA - 3626 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 index f61a26a . . 40a0a17 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import java . io . IOException ; 
 import java . util . * ; 
 
 import com . google . common . collect . Iterables ; 
 + import com . google . common . primitives . Ints ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 202 , 11 + 203 , 14 @ @ public class LeveledManifest 
 return builder . toString ( ) ; 
 } 
 
 - private double maxBytesForLevel ( int level ) 
 + private long maxBytesForLevel ( int level ) 
 { 
 - return level = = 0 
 - ? 4 * maxSSTableSizeInMB * 1024 * 1024 
 - : Math . pow ( 10 , level ) * maxSSTableSizeInMB * 1024 * 1024 ; 
 + if ( level = = 0 ) 
 + return 4 * maxSSTableSizeInMB * 1024 * 1024 ; 
 + double bytes = Math . pow ( 10 , level ) * maxSSTableSizeInMB * 1024 * 1024 ; 
 + if ( bytes > Long . MAX _ VALUE ) 
 + throw new RuntimeException ( " At most " + Long . MAX _ VALUE + " bytes may be in a compaction level ; your maxSSTableSize must be absurdly high to compute " + bytes ) ; 
 + return ( long ) bytes ; 
 } 
 
 public synchronized Collection < SSTableReader > getCompactionCandidates ( ) 
 @ @ - 424 , 12 + 428 , 14 @ @ public class LeveledManifest 
 
 public int getEstimatedTasks ( ) 
 { 
 - int n = 0 ; 
 + long tasks = 0 ; 
 for ( int i = generations . length - 1 ; i > = 0 ; i - - ) 
 { 
 List < SSTableReader > sstables = generations [ i ] ; 
 - n + = Math . max ( 0L , SSTableReader . getTotalBytes ( sstables ) - maxBytesForLevel ( i ) ) / ( maxSSTableSizeInMB * 1024 * 1024 ) ; 
 + long n = Math . max ( 0L , SSTableReader . getTotalBytes ( sstables ) - maxBytesForLevel ( i ) ) / ( maxSSTableSizeInMB * 1024 * 1024 ) ; 
 + logger . debug ( " Estimating " + n + " compaction tasks in level " + i ) ; 
 + tasks + = n ; 
 } 
 - return n ; 
 + return Ints . checkedCast ( tasks ) ; 
 } 
 }
