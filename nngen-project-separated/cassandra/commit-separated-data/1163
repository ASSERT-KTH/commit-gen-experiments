BLEU SCORE: 0.040583489434387374

TEST MSG: Fix JSON update with prepared statements
GENERATED MSG: merge from 0 . 8

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index a548c9f . . 7b32c2b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 4 <nl> + * Fix JSON update with prepared statements ( CASSANDRA - 10631 ) <nl> * Don ' t do anticompaction after subrange repair ( CASSANDRA - 10422 ) <nl> * Fix SimpleDateType type compatibility ( CASSANDRA - 10027 ) <nl> * ( Hadoop ) fix splits calculation ( CASSANDRA - 10640 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Json . java b / src / java / org / apache / cassandra / cql3 / Json . java <nl> index e4bce29 . . 5284793 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Json . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / Json . java <nl> @ @ - 156 , 8 + 156 , 6 @ @ public class Json <nl> private final int bindIndex ; <nl> private final Collection < ColumnDefinition > columns ; <nl> <nl> - private Map < ColumnIdentifier , Term > columnMap ; <nl> - <nl> public PreparedMarker ( String keyspace , int bindIndex , Collection < ColumnDefinition > columns ) <nl> { <nl> super ( keyspace ) ; <nl> @ @ - 169 , 24 + 167 , 6 @ @ public class Json <nl> { <nl> return new DelayedColumnValue ( this , def ) ; <nl> } <nl> - <nl> - public void bind ( QueryOptions options ) throws InvalidRequestException <nl> - { <nl> - / / this will be called once per column , so avoid duplicating work <nl> - if ( columnMap ! = null ) <nl> - return ; <nl> - <nl> - ByteBuffer value = options . getValues ( ) . get ( bindIndex ) ; <nl> - if ( value = = null ) <nl> - throw new InvalidRequestException ( " Got null for INSERT JSON values " ) ; <nl> - <nl> - columnMap = parseJson ( UTF8Type . instance . getSerializer ( ) . deserialize ( value ) , columns ) ; <nl> - } <nl> - <nl> - public Term getValue ( ColumnDefinition def ) <nl> - { <nl> - return columnMap . get ( def . name ) ; <nl> - } <nl> } <nl> <nl> / * * <nl> @ @ - 260 , 8 + 240 , 7 @ @ public class Json <nl> @ Override <nl> public Terminal bind ( QueryOptions options ) throws InvalidRequestException <nl> { <nl> - marker . bind ( options ) ; <nl> - Term term = marker . getValue ( column ) ; <nl> + Term term = options . getJsonColumnValue ( marker . bindIndex , column . name , marker . columns ) ; <nl> return term = = null ? null : term . bind ( options ) ; <nl> } <nl> <nl> @ @ - 275 , 7 + 254 , 7 @ @ public class Json <nl> / * * <nl> * Given a JSON string , return a map of columns to their values for the insert . <nl> * / <nl> - private static Map < ColumnIdentifier , Term > parseJson ( String jsonString , Collection < ColumnDefinition > expectedReceivers ) <nl> + public static Map < ColumnIdentifier , Term > parseJson ( String jsonString , Collection < ColumnDefinition > expectedReceivers ) <nl> { <nl> try <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / QueryOptions . java b / src / java / org / apache / cassandra / cql3 / QueryOptions . java <nl> index 7fc0997 . . be773e1 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / QueryOptions . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / QueryOptions . java <nl> @ @ - 18 , 15 + 18 , 15 @ @ <nl> package org . apache . cassandra . cql3 ; <nl> <nl> import java . nio . ByteBuffer ; <nl> - import java . util . ArrayList ; <nl> - import java . util . Collections ; <nl> - import java . util . EnumSet ; <nl> - import java . util . List ; <nl> + import java . util . * ; <nl> <nl> import com . google . common . collect . ImmutableList ; <nl> - <nl> import io . netty . buffer . ByteBuf ; <nl> + <nl> + import org . apache . cassandra . config . ColumnDefinition ; <nl> import org . apache . cassandra . db . ConsistencyLevel ; <nl> + import org . apache . cassandra . db . marshal . UTF8Type ; <nl> + import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> import org . apache . cassandra . service . QueryState ; <nl> import org . apache . cassandra . service . pager . PagingState ; <nl> import org . apache . cassandra . transport . CBCodec ; <nl> @ @ - 48 , 6 + 48 , 9 @ @ public abstract class QueryOptions <nl> <nl> public static final CBCodec < QueryOptions > codec = new Codec ( ) ; <nl> <nl> + / / A cache of bind values parsed as JSON , see getJsonColumnValue for details . <nl> + private List < Map < ColumnIdentifier , Term > > jsonValuesCache ; <nl> + <nl> public static QueryOptions fromProtocolV1 ( ConsistencyLevel consistency , List < ByteBuffer > values ) <nl> { <nl> return new DefaultQueryOptions ( consistency , values , false , SpecificOptions . DEFAULT , Server . VERSION _ 1 ) ; <nl> @ @ - 93 , 6 + 96 , 45 @ @ public abstract class QueryOptions <nl> public abstract boolean skipMetadata ( ) ; <nl> <nl> / * * <nl> + * Returns the term corresponding to column { @ code columnName } in the JSON value of bind index { @ code bindIndex } . <nl> + * <nl> + * This is functionally equivalent to : <nl> + * { @ code Json . parseJson ( UTF8Type . instance . getSerializer ( ) . deserialize ( getValues ( ) . get ( bindIndex ) ) , expectedReceivers ) . get ( columnName ) } <nl> + * but this cache the result of parsing the JSON so that while this might be called for multiple columns on the same { @ code bindIndex } <nl> + * value , the underlying JSON value is only parsed / processed once . <nl> + * <nl> + * Note : this is a bit more involved in CQL specifics than this class generally is but we as we need to cache this per - query and in an object <nl> + * that is available when we bind values , this is the easier place to have this . <nl> + * <nl> + * @ param bindIndex the index of the bind value that should be interpreted as a JSON value . <nl> + * @ param columnName the name of the column we want the value of . <nl> + * @ param expectedReceivers the columns expected in the JSON value at index { @ code bindIndex } . This is only used when parsing the <nl> + * json initially and no check is done afterwards . So in practice , any call of this method on the same QueryOptions object and with the same <nl> + * { @ code bindIndx } values should use the same value for this parameter , but this isn ' t validated in any way . <nl> + * <nl> + * @ return the value correspong to column { @ code columnName } in the ( JSON ) bind value at index { @ code bindIndex } . This may return null if the <nl> + * JSON value has no value for this column . <nl> + * / <nl> + public Term getJsonColumnValue ( int bindIndex , ColumnIdentifier columnName , Collection < ColumnDefinition > expectedReceivers ) throws InvalidRequestException <nl> + { <nl> + if ( jsonValuesCache = = null ) <nl> + jsonValuesCache = new ArrayList < > ( Collections . < Map < ColumnIdentifier , Term > > nCopies ( getValues ( ) . size ( ) , null ) ) ; <nl> + <nl> + Map < ColumnIdentifier , Term > jsonValue = jsonValuesCache . get ( bindIndex ) ; <nl> + if ( jsonValue = = null ) <nl> + { <nl> + ByteBuffer value = getValues ( ) . get ( bindIndex ) ; <nl> + if ( value = = null ) <nl> + throw new InvalidRequestException ( " Got null for INSERT JSON values " ) ; <nl> + <nl> + jsonValue = Json . parseJson ( UTF8Type . instance . getSerializer ( ) . deserialize ( value ) , expectedReceivers ) ; <nl> + jsonValuesCache . set ( bindIndex , jsonValue ) ; <nl> + } <nl> + <nl> + return jsonValue . get ( columnName ) ; <nl> + } <nl> + <nl> + / * * <nl> * Tells whether or not this < code > QueryOptions < / code > contains the column specifications for the bound variables . <nl> * < p > The column specifications will be present only for prepared statements . < / p > <nl> * @ return < code > true < / code > this < code > QueryOptions < / code > contains the column specifications for the bound <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> index 30a111d . . fa82fa7 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import java . util . concurrent . ConcurrentMap ; <nl> import java . util . concurrent . TimeUnit ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . base . Predicate ; <nl> import com . google . common . collect . Iterables ; <nl> import com . google . common . collect . Iterators ; <nl> @ @ - 544 , 6 + 545 , 15 @ @ public class QueryProcessor implements QueryHandler <nl> return meter . measureDeep ( key ) ; <nl> } <nl> <nl> + / * * <nl> + * Clear our internal statmeent cache for test purposes . <nl> + * / <nl> + @ VisibleForTesting <nl> + public static void clearInternalStatementsCache ( ) <nl> + { <nl> + internalStatements . clear ( ) ; <nl> + } <nl> + <nl> private static class MigrationSubscriber extends MigrationListener <nl> { <nl> private void removeInvalidPreparedStatements ( String ksName , String cfName ) <nl> @ @ - 597 , 22 + 607 , 23 @ @ public class QueryProcessor implements QueryHandler <nl> return ksName . equals ( statementKsName ) & & ( cfName = = null | | cfName . equals ( statementCfName ) ) ; <nl> } <nl> <nl> - public void onCreateFunction ( String ksName , String functionName , List < AbstractType < ? > > argTypes ) { <nl> + public void onCreateFunction ( String ksName , String functionName , List < AbstractType < ? > > argTypes ) <nl> + { <nl> if ( Functions . getOverloadCount ( new FunctionName ( ksName , functionName ) ) > 1 ) <nl> { <nl> / / in case there are other overloads , we have to remove all overloads since argument type <nl> / / matching may change ( due to type casting ) <nl> - removeInvalidPreparedStatementsForFunction ( preparedStatements . values ( ) . iterator ( ) , ksName , functionName ) ; <nl> - removeInvalidPreparedStatementsForFunction ( thriftPreparedStatements . values ( ) . iterator ( ) , ksName , functionName ) ; <nl> + removeAllInvalidPreparedStatementsForFunction ( ksName , functionName ) ; <nl> } <nl> } <nl> - public void onCreateAggregate ( String ksName , String aggregateName , List < AbstractType < ? > > argTypes ) { <nl> + <nl> + public void onCreateAggregate ( String ksName , String aggregateName , List < AbstractType < ? > > argTypes ) <nl> + { <nl> if ( Functions . getOverloadCount ( new FunctionName ( ksName , aggregateName ) ) > 1 ) <nl> { <nl> / / in case there are other overloads , we have to remove all overloads since argument type <nl> / / matching may change ( due to type casting ) <nl> - removeInvalidPreparedStatementsForFunction ( preparedStatements . values ( ) . iterator ( ) , ksName , aggregateName ) ; <nl> - removeInvalidPreparedStatementsForFunction ( thriftPreparedStatements . values ( ) . iterator ( ) , ksName , aggregateName ) ; <nl> + removeAllInvalidPreparedStatementsForFunction ( ksName , aggregateName ) ; <nl> } <nl> } <nl> <nl> @ @ - 623 , 6 + 634 , 24 @ @ public class QueryProcessor implements QueryHandler <nl> removeInvalidPreparedStatements ( ksName , cfName ) ; <nl> } <nl> <nl> + public void onUpdateFunction ( String ksName , String functionName , List < AbstractType < ? > > argTypes ) <nl> + { <nl> + / / Updating a function may imply we ' ve changed the body of the function , so we need to invalid statements so that <nl> + / / the new definition is picked ( the function is resolved at preparation time ) . <nl> + / / TODO : if the function has multiple overload , we could invalidate only the statement refering to the overload <nl> + / / that was updated . This requires a few changes however and probably doesn ' t matter much in practice . <nl> + removeAllInvalidPreparedStatementsForFunction ( ksName , functionName ) ; <nl> + } <nl> + <nl> + public void onUpdateAggregate ( String ksName , String aggregateName , List < AbstractType < ? > > argTypes ) <nl> + { <nl> + / / Updating a function may imply we ' ve changed the body of the function , so we need to invalid statements so that <nl> + / / the new definition is picked ( the function is resolved at preparation time ) . <nl> + / / TODO : if the function has multiple overload , we could invalidate only the statement refering to the overload <nl> + / / that was updated . This requires a few changes however and probably doesn ' t matter much in practice . <nl> + removeAllInvalidPreparedStatementsForFunction ( ksName , aggregateName ) ; <nl> + } <nl> + <nl> public void onDropKeyspace ( String ksName ) <nl> { <nl> logger . trace ( " Keyspace { } was dropped , invalidating related prepared statements " , ksName ) ; <nl> @ @ - 637 , 14 + 666 , 19 @ @ public class QueryProcessor implements QueryHandler <nl> <nl> public void onDropFunction ( String ksName , String functionName , List < AbstractType < ? > > argTypes ) <nl> { <nl> - removeInvalidPreparedStatementsForFunction ( preparedStatements . values ( ) . iterator ( ) , ksName , functionName ) ; <nl> - removeInvalidPreparedStatementsForFunction ( thriftPreparedStatements . values ( ) . iterator ( ) , ksName , functionName ) ; <nl> + removeAllInvalidPreparedStatementsForFunction ( ksName , functionName ) ; <nl> } <nl> <nl> public void onDropAggregate ( String ksName , String aggregateName , List < AbstractType < ? > > argTypes ) <nl> { <nl> - removeInvalidPreparedStatementsForFunction ( preparedStatements . values ( ) . iterator ( ) , ksName , aggregateName ) ; <nl> - removeInvalidPreparedStatementsForFunction ( thriftPreparedStatements . values ( ) . iterator ( ) , ksName , aggregateName ) ; <nl> + removeAllInvalidPreparedStatementsForFunction ( ksName , aggregateName ) ; <nl> + } <nl> + <nl> + private void removeAllInvalidPreparedStatementsForFunction ( String ksName , String functionName ) <nl> + { <nl> + removeInvalidPreparedStatementsForFunction ( internalStatements . values ( ) . iterator ( ) , ksName , functionName ) ; <nl> + removeInvalidPreparedStatementsForFunction ( preparedStatements . values ( ) . iterator ( ) , ksName , functionName ) ; <nl> + removeInvalidPreparedStatementsForFunction ( thriftPreparedStatements . values ( ) . iterator ( ) , ksName , functionName ) ; <nl> } <nl> <nl> private static void removeInvalidPreparedStatementsForFunction ( Iterator < ParsedStatement . Prepared > statements , <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> index 4b4631e . . 5e17d1b 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> @ @ - 136 , 6 + 136 , 7 @ @ public abstract class CQLTester <nl> / / We don ' t use USE _ PREPARED _ VALUES in the code below so some test can foce value preparation ( if the result <nl> / / is not expected to be the same without preparation ) <nl> private boolean usePrepared = USE _ PREPARED _ VALUES ; <nl> + private static final boolean reusePrepared = Boolean . valueOf ( System . getProperty ( " cassandra . test . reuse _ prepared " , " true " ) ) ; <nl> <nl> @ BeforeClass <nl> public static void setUpClass ( ) <nl> @ @ - 158 , 6 + 159 , 11 @ @ public abstract class CQLTester <nl> <nl> if ( server ! = null ) <nl> server . stop ( ) ; <nl> + <nl> + / / We use queryInternal for CQLTester so prepared statement will populate our internal cache ( if reusePrepared is used ; otherwise prepared <nl> + / / statements are not cached but re - prepared every time ) . So we clear the cache between test files to avoid accumulating too much . <nl> + if ( reusePrepared ) <nl> + QueryProcessor . clearInternalStatementsCache ( ) ; <nl> } <nl> <nl> @ Before <nl> @ @ - 571 , 7 + 577 , 21 @ @ public abstract class CQLTester <nl> if ( usePrepared ) <nl> { <nl> logger . info ( " Executing : { } with values { } " , query , formatAllValues ( values ) ) ; <nl> - rs = QueryProcessor . executeOnceInternal ( query , transformValues ( values ) ) ; <nl> + if ( reusePrepared ) <nl> + { <nl> + rs = QueryProcessor . executeInternal ( query , transformValues ( values ) ) ; <nl> + <nl> + / / If a test uses a " USE . . . " , then presumably its statements use relative table . In that case , a USE <nl> + / / change the meaning of the current keyspace , so we don ' t want a following statement to reuse a previously <nl> + / / prepared statement at this wouldn ' t use the right keyspace . To avoid that , we drop the previously <nl> + / / prepared statement . <nl> + if ( query . startsWith ( " USE " ) ) <nl> + QueryProcessor . clearInternalStatementsCache ( ) ; <nl> + } <nl> + else <nl> + { <nl> + rs = QueryProcessor . executeOnceInternal ( query , transformValues ( values ) ) ; <nl> + } <nl> } <nl> else <nl> {
NEAREST DIFF (one line): diff - - git a / lib / licenses / guava - r05 . txt b / lib / licenses / guava - r05 . txt <nl> deleted file mode 100644 <nl> index d645695 . . 0000000 <nl> - - - a / lib / licenses / guava - r05 . txt <nl> + + + / dev / null <nl> @ @ - 1 , 202 + 0 , 0 @ @ <nl> - <nl> - Apache License <nl> - Version 2 . 0 , January 2004 <nl> - http : / / www . apache . org / licenses / <nl> - <nl> - TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION <nl> - <nl> - 1 . Definitions . <nl> - <nl> - " License " shall mean the terms and conditions for use , reproduction , <nl> - and distribution as defined by Sections 1 through 9 of this document . <nl> - <nl> - " Licensor " shall mean the copyright owner or entity authorized by <nl> - the copyright owner that is granting the License . <nl> - <nl> - " Legal Entity " shall mean the union of the acting entity and all <nl> - other entities that control , are controlled by , or are under common <nl> - control with that entity . For the purposes of this definition , <nl> - " control " means ( i ) the power , direct or indirect , to cause the <nl> - direction or management of such entity , whether by contract or <nl> - otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the <nl> - outstanding shares , or ( iii ) beneficial ownership of such entity . <nl> - <nl> - " You " ( or " Your " ) shall mean an individual or Legal Entity <nl> - exercising permissions granted by this License . <nl> - <nl> - " Source " form shall mean the preferred form for making modifications , <nl> - including but not limited to software source code , documentation <nl> - source , and configuration files . <nl> - <nl> - " Object " form shall mean any form resulting from mechanical <nl> - transformation or translation of a Source form , including but <nl> - not limited to compiled object code , generated documentation , <nl> - and conversions to other media types . <nl> - <nl> - " Work " shall mean the work of authorship , whether in Source or <nl> - Object form , made available under the License , as indicated by a <nl> - copyright notice that is included in or attached to the work <nl> - ( an example is provided in the Appendix below ) . <nl> - <nl> - " Derivative Works " shall mean any work , whether in Source or Object <nl> - form , that is based on ( or derived from ) the Work and for which the <nl> - editorial revisions , annotations , elaborations , or other modifications <nl> - represent , as a whole , an original work of authorship . For the purposes <nl> - of this License , Derivative Works shall not include works that remain <nl> - separable from , or merely link ( or bind by name ) to the interfaces of , <nl> - the Work and Derivative Works thereof . <nl> - <nl> - " Contribution " shall mean any work of authorship , including <nl> - the original version of the Work and any modifications or additions <nl> - to that Work or Derivative Works thereof , that is intentionally <nl> - submitted to Licensor for inclusion in the Work by the copyright owner <nl> - or by an individual or Legal Entity authorized to submit on behalf of <nl> - the copyright owner . For the purposes of this definition , " submitted " <nl> - means any form of electronic , verbal , or written communication sent <nl> - to the Licensor or its representatives , including but not limited to <nl> - communication on electronic mailing lists , source code control systems , <nl> - and issue tracking systems that are managed by , or on behalf of , the <nl> - Licensor for the purpose of discussing and improving the Work , but <nl> - excluding communication that is conspicuously marked or otherwise <nl> - designated in writing by the copyright owner as " Not a Contribution . " <nl> - <nl> - " Contributor " shall mean Licensor and any individual or Legal Entity <nl> - on behalf of whom a Contribution has been received by Licensor and <nl> - subsequently incorporated within the Work . <nl> - <nl> - 2 . Grant of Copyright License . Subject to the terms and conditions of <nl> - this License , each Contributor hereby grants to You a perpetual , <nl> - worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> - copyright license to reproduce , prepare Derivative Works of , <nl> - publicly display , publicly perform , sublicense , and distribute the <nl> - Work and such Derivative Works in Source or Object form . <nl> - <nl> - 3 . Grant of Patent License . Subject to the terms and conditions of <nl> - this License , each Contributor hereby grants to You a perpetual , <nl> - worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> - ( except as stated in this section ) patent license to make , have made , <nl> - use , offer to sell , sell , import , and otherwise transfer the Work , <nl> - where such license applies only to those patent claims licensable <nl> - by such Contributor that are necessarily infringed by their <nl> - Contribution ( s ) alone or by combination of their Contribution ( s ) <nl> - with the Work to which such Contribution ( s ) was submitted . If You <nl> - institute patent litigation against any entity ( including a <nl> - cross - claim or counterclaim in a lawsuit ) alleging that the Work <nl> - or a Contribution incorporated within the Work constitutes direct <nl> - or contributory patent infringement , then any patent licenses <nl> - granted to You under this License for that Work shall terminate <nl> - as of the date such litigation is filed . <nl> - <nl> - 4 . Redistribution . You may reproduce and distribute copies of the <nl> - Work or Derivative Works thereof in any medium , with or without <nl> - modifications , and in Source or Object form , provided that You <nl> - meet the following conditions : <nl> - <nl> - ( a ) You must give any other recipients of the Work or <nl> - Derivative Works a copy of this License ; and <nl> - <nl> - ( b ) You must cause any modified files to carry prominent notices <nl> - stating that You changed the files ; and <nl> - <nl> - ( c ) You must retain , in the Source form of any Derivative Works <nl> - that You distribute , all copyright , patent , trademark , and <nl> - attribution notices from the Source form of the Work , <nl> - excluding those notices that do not pertain to any part of <nl> - the Derivative Works ; and <nl> - <nl> - ( d ) If the Work includes a " NOTICE " text file as part of its <nl> - distribution , then any Derivative Works that You distribute must <nl> - include a readable copy of the attribution notices contained <nl> - within such NOTICE file , excluding those notices that do not <nl> - pertain to any part of the Derivative Works , in at least one <nl> - of the following places : within a NOTICE text file distributed <nl> - as part of the Derivative Works ; within the Source form or <nl> - documentation , if provided along with the Derivative Works ; or , <nl> - within a display generated by the Derivative Works , if and <nl> - wherever such third - party notices normally appear . The contents <nl> - of the NOTICE file are for informational purposes only and <nl> - do not modify the License . You may add Your own attribution <nl> - notices within Derivative Works that You distribute , alongside <nl> - or as an addendum to the NOTICE text from the Work , provided <nl> - that such additional attribution notices cannot be construed <nl> - as modifying the License . <nl> - <nl> - You may add Your own copyright statement to Your modifications and <nl> - may provide additional or different license terms and conditions <nl> - for use , reproduction , or distribution of Your modifications , or <nl> - for any such Derivative Works as a whole , provided Your use , <nl> - reproduction , and distribution of the Work otherwise complies with <nl> - the conditions stated in this License . <nl> - <nl> - 5 . Submission of Contributions . Unless You explicitly state otherwise , <nl> - any Contribution intentionally submitted for inclusion in the Work <nl> - by You to the Licensor shall be under the terms and conditions of <nl> - this License , without any additional terms or conditions . <nl> - Notwithstanding the above , nothing herein shall supersede or modify <nl> - the terms of any separate license agreement you may have executed <nl> - with Licensor regarding such Contributions . <nl> - <nl> - 6 . Trademarks . This License does not grant permission to use the trade <nl> - names , trademarks , service marks , or product names of the Licensor , <nl> - except as required for reasonable and customary use in describing the <nl> - origin of the Work and reproducing the content of the NOTICE file . <nl> - <nl> - 7 . Disclaimer of Warranty . Unless required by applicable law or <nl> - agreed to in writing , Licensor provides the Work ( and each <nl> - Contributor provides its Contributions ) on an " AS IS " BASIS , <nl> - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or <nl> - implied , including , without limitation , any warranties or conditions <nl> - of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A <nl> - PARTICULAR PURPOSE . You are solely responsible for determining the <nl> - appropriateness of using or redistributing the Work and assume any <nl> - risks associated with Your exercise of permissions under this License . <nl> - <nl> - 8 . Limitation of Liability . In no event and under no legal theory , <nl> - whether in tort ( including negligence ) , contract , or otherwise , <nl> - unless required by applicable law ( such as deliberate and grossly <nl> - negligent acts ) or agreed to in writing , shall any Contributor be <nl> - liable to You for damages , including any direct , indirect , special , <nl> - incidental , or consequential damages of any character arising as a <nl> - result of this License or out of the use or inability to use the <nl> - Work ( including but not limited to damages for loss of goodwill , <nl> - work stoppage , computer failure or malfunction , or any and all <nl> - other commercial damages or losses ) , even if such Contributor <nl> - has been advised of the possibility of such damages . <nl> - <nl> - 9 . Accepting Warranty or Additional Liability . While redistributing <nl> - the Work or Derivative Works thereof , You may choose to offer , <nl> - and charge a fee for , acceptance of support , warranty , indemnity , <nl> - or other liability obligations and / or rights consistent with this <nl> - License . However , in accepting such obligations , You may act only <nl> - on Your own behalf and on Your sole responsibility , not on behalf <nl> - of any other Contributor , and only if You agree to indemnify , <nl> - defend , and hold each Contributor harmless for any liability <nl> - incurred by , or claims asserted against , such Contributor by reason <nl> - of your accepting any such warranty or additional liability . <nl> - <nl> - END OF TERMS AND CONDITIONS <nl> - <nl> - APPENDIX : How to apply the Apache License to your work . <nl> - <nl> - To apply the Apache License to your work , attach the following <nl> - boilerplate notice , with the fields enclosed by brackets " [ ] " <nl> - replaced with your own identifying information . ( Don ' t include <nl> - the brackets ! ) The text should be enclosed in the appropriate <nl> - comment syntax for the file format . We also recommend that a <nl> - file or class name and description of purpose be included on the <nl> - same " printed page " as the copyright notice for easier <nl> - identification within third - party archives . <nl> - <nl> - Copyright [ yyyy ] [ name of copyright owner ] <nl> - <nl> - Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - you may not use this file except in compliance with the License . <nl> - You may obtain a copy of the License at <nl> - <nl> - http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - <nl> - Unless required by applicable law or agreed to in writing , software <nl> - distributed under the License is distributed on an " AS IS " BASIS , <nl> - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - See the License for the specific language governing permissions and <nl> - limitations under the License . <nl> diff - - git a / lib / licenses / guava - r08 . txt b / lib / licenses / guava - r08 . txt <nl> new file mode 100644 <nl> index 0000000 . . d645695 <nl> - - - / dev / null <nl> + + + b / lib / licenses / guava - r08 . txt <nl> @ @ - 0 , 0 + 1 , 202 @ @ <nl> + <nl> + Apache License <nl> + Version 2 . 0 , January 2004 <nl> + http : / / www . apache . org / licenses / <nl> + <nl> + TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION <nl> + <nl> + 1 . Definitions . <nl> + <nl> + " License " shall mean the terms and conditions for use , reproduction , <nl> + and distribution as defined by Sections 1 through 9 of this document . <nl> + <nl> + " Licensor " shall mean the copyright owner or entity authorized by <nl> + the copyright owner that is granting the License . <nl> + <nl> + " Legal Entity " shall mean the union of the acting entity and all <nl> + other entities that control , are controlled by , or are under common <nl> + control with that entity . For the purposes of this definition , <nl> + " control " means ( i ) the power , direct or indirect , to cause the <nl> + direction or management of such entity , whether by contract or <nl> + otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the <nl> + outstanding shares , or ( iii ) beneficial ownership of such entity . <nl> + <nl> + " You " ( or " Your " ) shall mean an individual or Legal Entity <nl> + exercising permissions granted by this License . <nl> + <nl> + " Source " form shall mean the preferred form for making modifications , <nl> + including but not limited to software source code , documentation <nl> + source , and configuration files . <nl> + <nl> + " Object " form shall mean any form resulting from mechanical <nl> + transformation or translation of a Source form , including but <nl> + not limited to compiled object code , generated documentation , <nl> + and conversions to other media types . <nl> + <nl> + " Work " shall mean the work of authorship , whether in Source or <nl> + Object form , made available under the License , as indicated by a <nl> + copyright notice that is included in or attached to the work <nl> + ( an example is provided in the Appendix below ) . <nl> + <nl> + " Derivative Works " shall mean any work , whether in Source or Object <nl> + form , that is based on ( or derived from ) the Work and for which the <nl> + editorial revisions , annotations , elaborations , or other modifications <nl> + represent , as a whole , an original work of authorship . For the purposes <nl> + of this License , Derivative Works shall not include works that remain <nl> + separable from , or merely link ( or bind by name ) to the interfaces of , <nl> + the Work and Derivative Works thereof . <nl> + <nl> + " Contribution " shall mean any work of authorship , including <nl> + the original version of the Work and any modifications or additions <nl> + to that Work or Derivative Works thereof , that is intentionally <nl> + submitted to Licensor for inclusion in the Work by the copyright owner <nl> + or by an individual or Legal Entity authorized to submit on behalf of <nl> + the copyright owner . For the purposes of this definition , " submitted " <nl> + means any form of electronic , verbal , or written communication sent <nl> + to the Licensor or its representatives , including but not limited to <nl> + communication on electronic mailing lists , source code control systems , <nl> + and issue tracking systems that are managed by , or on behalf of , the <nl> + Licensor for the purpose of discussing and improving the Work , but <nl> + excluding communication that is conspicuously marked or otherwise <nl> + designated in writing by the copyright owner as " Not a Contribution . " <nl> + <nl> + " Contributor " shall mean Licensor and any individual or Legal Entity <nl> + on behalf of whom a Contribution has been received by Licensor and <nl> + subsequently incorporated within the Work . <nl> + <nl> + 2 . Grant of Copyright License . Subject to the terms and conditions of <nl> + this License , each Contributor hereby grants to You a perpetual , <nl> + worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> + copyright license to reproduce , prepare Derivative Works of , <nl> + publicly display , publicly perform , sublicense , and distribute the <nl> + Work and such Derivative Works in Source or Object form . <nl> + <nl> + 3 . Grant of Patent License . Subject to the terms and conditions of <nl> + this License , each Contributor hereby grants to You a perpetual , <nl> + worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> + ( except as stated in this section ) patent license to make , have made , <nl> + use , offer to sell , sell , import , and otherwise transfer the Work , <nl> + where such license applies only to those patent claims licensable <nl> + by such Contributor that are necessarily infringed by their <nl> + Contribution ( s ) alone or by combination of their Contribution ( s ) <nl> + with the Work to which such Contribution ( s ) was submitted . If You <nl> + institute patent litigation against any entity ( including a <nl> + cross - claim or counterclaim in a lawsuit ) alleging that the Work <nl> + or a Contribution incorporated within the Work constitutes direct <nl> + or contributory patent infringement , then any patent licenses <nl> + granted to You under this License for that Work shall terminate <nl> + as of the date such litigation is filed . <nl> + <nl> + 4 . Redistribution . You may reproduce and distribute copies of the <nl> + Work or Derivative Works thereof in any medium , with or without <nl> + modifications , and in Source or Object form , provided that You <nl> + meet the following conditions : <nl> + <nl> + ( a ) You must give any other recipients of the Work or <nl> + Derivative Works a copy of this License ; and <nl> + <nl> + ( b ) You must cause any modified files to carry prominent notices <nl> + stating that You changed the files ; and <nl> + <nl> + ( c ) You must retain , in the Source form of any Derivative Works <nl> + that You distribute , all copyright , patent , trademark , and <nl> + attribution notices from the Source form of the Work , <nl> + excluding those notices that do not pertain to any part of <nl> + the Derivative Works ; and <nl> + <nl> + ( d ) If the Work includes a " NOTICE " text file as part of its <nl> + distribution , then any Derivative Works that You distribute must <nl> + include a readable copy of the attribution notices contained <nl> + within such NOTICE file , excluding those notices that do not <nl> + pertain to any part of the Derivative Works , in at least one <nl> + of the following places : within a NOTICE text file distributed <nl> + as part of the Derivative Works ; within the Source form or <nl> + documentation , if provided along with the Derivative Works ; or , <nl> + within a display generated by the Derivative Works , if and <nl> + wherever such third - party notices normally appear . The contents <nl> + of the NOTICE file are for informational purposes only and <nl> + do not modify the License . You may add Your own attribution <nl> + notices within Derivative Works that You distribute , alongside <nl> + or as an addendum to the NOTICE text from the Work , provided <nl> + that such additional attribution notices cannot be construed <nl> + as modifying the License . <nl> + <nl> + You may add Your own copyright statement to Your modifications and <nl> + may provide additional or different license terms and conditions <nl> + for use , reproduction , or distribution of Your modifications , or <nl> + for any such Derivative Works as a whole , provided Your use , <nl> + reproduction , and distribution of the Work otherwise complies with <nl> + the conditions stated in this License . <nl> + <nl> + 5 . Submission of Contributions . Unless You explicitly state otherwise , <nl> + any Contribution intentionally submitted for inclusion in the Work <nl> + by You to the Licensor shall be under the terms and conditions of <nl> + this License , without any additional terms or conditions . <nl> + Notwithstanding the above , nothing herein shall supersede or modify <nl> + the terms of any separate license agreement you may have executed <nl> + with Licensor regarding such Contributions . <nl> + <nl> + 6 . Trademarks . This License does not grant permission to use the trade <nl> + names , trademarks , service marks , or product names of the Licensor , <nl> + except as required for reasonable and customary use in describing the <nl> + origin of the Work and reproducing the content of the NOTICE file . <nl> + <nl> + 7 . Disclaimer of Warranty . Unless required by applicable law or <nl> + agreed to in writing , Licensor provides the Work ( and each <nl> + Contributor provides its Contributions ) on an " AS IS " BASIS , <nl> + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or <nl> + implied , including , without limitation , any warranties or conditions <nl> + of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A <nl> + PARTICULAR PURPOSE . You are solely responsible for determining the <nl> + appropriateness of using or redistributing the Work and assume any <nl> + risks associated with Your exercise of permissions under this License . <nl> + <nl> + 8 . Limitation of Liability . In no event and under no legal theory , <nl> + whether in tort ( including negligence ) , contract , or otherwise , <nl> + unless required by applicable law ( such as deliberate and grossly <nl> + negligent acts ) or agreed to in writing , shall any Contributor be <nl> + liable to You for damages , including any direct , indirect , special , <nl> + incidental , or consequential damages of any character arising as a <nl> + result of this License or out of the use or inability to use the <nl> + Work ( including but not limited to damages for loss of goodwill , <nl> + work stoppage , computer failure or malfunction , or any and all <nl> + other commercial damages or losses ) , even if such Contributor <nl> + has been advised of the possibility of such damages . <nl> + <nl> + 9 . Accepting Warranty or Additional Liability . While redistributing <nl> + the Work or Derivative Works thereof , You may choose to offer , <nl> + and charge a fee for , acceptance of support , warranty , indemnity , <nl> + or other liability obligations and / or rights consistent with this <nl> + License . However , in accepting such obligations , You may act only <nl> + on Your own behalf and on Your sole responsibility , not on behalf <nl> + of any other Contributor , and only if You agree to indemnify , <nl> + defend , and hold each Contributor harmless for any liability <nl> + incurred by , or claims asserted against , such Contributor by reason <nl> + of your accepting any such warranty or additional liability . <nl> + <nl> + END OF TERMS AND CONDITIONS <nl> + <nl> + APPENDIX : How to apply the Apache License to your work . <nl> + <nl> + To apply the Apache License to your work , attach the following <nl> + boilerplate notice , with the fields enclosed by brackets " [ ] " <nl> + replaced with your own identifying information . ( Don ' t include <nl> + the brackets ! ) The text should be enclosed in the appropriate <nl> + comment syntax for the file format . We also recommend that a <nl> + file or class name and description of purpose be included on the <nl> + same " printed page " as the copyright notice for easier <nl> + identification within third - party archives . <nl> + <nl> + Copyright [ yyyy ] [ name of copyright owner ] <nl> + <nl> + Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + you may not use this file except in compliance with the License . <nl> + You may obtain a copy of the License at <nl> + <nl> + http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + <nl> + Unless required by applicable law or agreed to in writing , software <nl> + distributed under the License is distributed on an " AS IS " BASIS , <nl> + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + See the License for the specific language governing permissions and <nl> + limitations under the License .

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index a548c9f . . 7b32c2b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 4 
 + * Fix JSON update with prepared statements ( CASSANDRA - 10631 ) 
 * Don ' t do anticompaction after subrange repair ( CASSANDRA - 10422 ) 
 * Fix SimpleDateType type compatibility ( CASSANDRA - 10027 ) 
 * ( Hadoop ) fix splits calculation ( CASSANDRA - 10640 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Json . java b / src / java / org / apache / cassandra / cql3 / Json . java 
 index e4bce29 . . 5284793 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Json . java 
 + + + b / src / java / org / apache / cassandra / cql3 / Json . java 
 @ @ - 156 , 8 + 156 , 6 @ @ public class Json 
 private final int bindIndex ; 
 private final Collection < ColumnDefinition > columns ; 
 
 - private Map < ColumnIdentifier , Term > columnMap ; 
 - 
 public PreparedMarker ( String keyspace , int bindIndex , Collection < ColumnDefinition > columns ) 
 { 
 super ( keyspace ) ; 
 @ @ - 169 , 24 + 167 , 6 @ @ public class Json 
 { 
 return new DelayedColumnValue ( this , def ) ; 
 } 
 - 
 - public void bind ( QueryOptions options ) throws InvalidRequestException 
 - { 
 - / / this will be called once per column , so avoid duplicating work 
 - if ( columnMap ! = null ) 
 - return ; 
 - 
 - ByteBuffer value = options . getValues ( ) . get ( bindIndex ) ; 
 - if ( value = = null ) 
 - throw new InvalidRequestException ( " Got null for INSERT JSON values " ) ; 
 - 
 - columnMap = parseJson ( UTF8Type . instance . getSerializer ( ) . deserialize ( value ) , columns ) ; 
 - } 
 - 
 - public Term getValue ( ColumnDefinition def ) 
 - { 
 - return columnMap . get ( def . name ) ; 
 - } 
 } 
 
 / * * 
 @ @ - 260 , 8 + 240 , 7 @ @ public class Json 
 @ Override 
 public Terminal bind ( QueryOptions options ) throws InvalidRequestException 
 { 
 - marker . bind ( options ) ; 
 - Term term = marker . getValue ( column ) ; 
 + Term term = options . getJsonColumnValue ( marker . bindIndex , column . name , marker . columns ) ; 
 return term = = null ? null : term . bind ( options ) ; 
 } 
 
 @ @ - 275 , 7 + 254 , 7 @ @ public class Json 
 / * * 
 * Given a JSON string , return a map of columns to their values for the insert . 
 * / 
 - private static Map < ColumnIdentifier , Term > parseJson ( String jsonString , Collection < ColumnDefinition > expectedReceivers ) 
 + public static Map < ColumnIdentifier , Term > parseJson ( String jsonString , Collection < ColumnDefinition > expectedReceivers ) 
 { 
 try 
 { 
 diff - - git a / src / java / org / apache / cassandra / cql3 / QueryOptions . java b / src / java / org / apache / cassandra / cql3 / QueryOptions . java 
 index 7fc0997 . . be773e1 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / QueryOptions . java 
 + + + b / src / java / org / apache / cassandra / cql3 / QueryOptions . java 
 @ @ - 18 , 15 + 18 , 15 @ @ 
 package org . apache . cassandra . cql3 ; 
 
 import java . nio . ByteBuffer ; 
 - import java . util . ArrayList ; 
 - import java . util . Collections ; 
 - import java . util . EnumSet ; 
 - import java . util . List ; 
 + import java . util . * ; 
 
 import com . google . common . collect . ImmutableList ; 
 - 
 import io . netty . buffer . ByteBuf ; 
 + 
 + import org . apache . cassandra . config . ColumnDefinition ; 
 import org . apache . cassandra . db . ConsistencyLevel ; 
 + import org . apache . cassandra . db . marshal . UTF8Type ; 
 + import org . apache . cassandra . exceptions . InvalidRequestException ; 
 import org . apache . cassandra . service . QueryState ; 
 import org . apache . cassandra . service . pager . PagingState ; 
 import org . apache . cassandra . transport . CBCodec ; 
 @ @ - 48 , 6 + 48 , 9 @ @ public abstract class QueryOptions 
 
 public static final CBCodec < QueryOptions > codec = new Codec ( ) ; 
 
 + / / A cache of bind values parsed as JSON , see getJsonColumnValue for details . 
 + private List < Map < ColumnIdentifier , Term > > jsonValuesCache ; 
 + 
 public static QueryOptions fromProtocolV1 ( ConsistencyLevel consistency , List < ByteBuffer > values ) 
 { 
 return new DefaultQueryOptions ( consistency , values , false , SpecificOptions . DEFAULT , Server . VERSION _ 1 ) ; 
 @ @ - 93 , 6 + 96 , 45 @ @ public abstract class QueryOptions 
 public abstract boolean skipMetadata ( ) ; 
 
 / * * 
 + * Returns the term corresponding to column { @ code columnName } in the JSON value of bind index { @ code bindIndex } . 
 + * 
 + * This is functionally equivalent to : 
 + * { @ code Json . parseJson ( UTF8Type . instance . getSerializer ( ) . deserialize ( getValues ( ) . get ( bindIndex ) ) , expectedReceivers ) . get ( columnName ) } 
 + * but this cache the result of parsing the JSON so that while this might be called for multiple columns on the same { @ code bindIndex } 
 + * value , the underlying JSON value is only parsed / processed once . 
 + * 
 + * Note : this is a bit more involved in CQL specifics than this class generally is but we as we need to cache this per - query and in an object 
 + * that is available when we bind values , this is the easier place to have this . 
 + * 
 + * @ param bindIndex the index of the bind value that should be interpreted as a JSON value . 
 + * @ param columnName the name of the column we want the value of . 
 + * @ param expectedReceivers the columns expected in the JSON value at index { @ code bindIndex } . This is only used when parsing the 
 + * json initially and no check is done afterwards . So in practice , any call of this method on the same QueryOptions object and with the same 
 + * { @ code bindIndx } values should use the same value for this parameter , but this isn ' t validated in any way . 
 + * 
 + * @ return the value correspong to column { @ code columnName } in the ( JSON ) bind value at index { @ code bindIndex } . This may return null if the 
 + * JSON value has no value for this column . 
 + * / 
 + public Term getJsonColumnValue ( int bindIndex , ColumnIdentifier columnName , Collection < ColumnDefinition > expectedReceivers ) throws InvalidRequestException 
 + { 
 + if ( jsonValuesCache = = null ) 
 + jsonValuesCache = new ArrayList < > ( Collections . < Map < ColumnIdentifier , Term > > nCopies ( getValues ( ) . size ( ) , null ) ) ; 
 + 
 + Map < ColumnIdentifier , Term > jsonValue = jsonValuesCache . get ( bindIndex ) ; 
 + if ( jsonValue = = null ) 
 + { 
 + ByteBuffer value = getValues ( ) . get ( bindIndex ) ; 
 + if ( value = = null ) 
 + throw new InvalidRequestException ( " Got null for INSERT JSON values " ) ; 
 + 
 + jsonValue = Json . parseJson ( UTF8Type . instance . getSerializer ( ) . deserialize ( value ) , expectedReceivers ) ; 
 + jsonValuesCache . set ( bindIndex , jsonValue ) ; 
 + } 
 + 
 + return jsonValue . get ( columnName ) ; 
 + } 
 + 
 + / * * 
 * Tells whether or not this < code > QueryOptions < / code > contains the column specifications for the bound variables . 
 * < p > The column specifications will be present only for prepared statements . < / p > 
 * @ return < code > true < / code > this < code > QueryOptions < / code > contains the column specifications for the bound 
 diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 index 30a111d . . fa82fa7 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import java . util . concurrent . ConcurrentMap ; 
 import java . util . concurrent . TimeUnit ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 
 + import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . base . Predicate ; 
 import com . google . common . collect . Iterables ; 
 import com . google . common . collect . Iterators ; 
 @ @ - 544 , 6 + 545 , 15 @ @ public class QueryProcessor implements QueryHandler 
 return meter . measureDeep ( key ) ; 
 } 
 
 + / * * 
 + * Clear our internal statmeent cache for test purposes . 
 + * / 
 + @ VisibleForTesting 
 + public static void clearInternalStatementsCache ( ) 
 + { 
 + internalStatements . clear ( ) ; 
 + } 
 + 
 private static class MigrationSubscriber extends MigrationListener 
 { 
 private void removeInvalidPreparedStatements ( String ksName , String cfName ) 
 @ @ - 597 , 22 + 607 , 23 @ @ public class QueryProcessor implements QueryHandler 
 return ksName . equals ( statementKsName ) & & ( cfName = = null | | cfName . equals ( statementCfName ) ) ; 
 } 
 
 - public void onCreateFunction ( String ksName , String functionName , List < AbstractType < ? > > argTypes ) { 
 + public void onCreateFunction ( String ksName , String functionName , List < AbstractType < ? > > argTypes ) 
 + { 
 if ( Functions . getOverloadCount ( new FunctionName ( ksName , functionName ) ) > 1 ) 
 { 
 / / in case there are other overloads , we have to remove all overloads since argument type 
 / / matching may change ( due to type casting ) 
 - removeInvalidPreparedStatementsForFunction ( preparedStatements . values ( ) . iterator ( ) , ksName , functionName ) ; 
 - removeInvalidPreparedStatementsForFunction ( thriftPreparedStatements . values ( ) . iterator ( ) , ksName , functionName ) ; 
 + removeAllInvalidPreparedStatementsForFunction ( ksName , functionName ) ; 
 } 
 } 
 - public void onCreateAggregate ( String ksName , String aggregateName , List < AbstractType < ? > > argTypes ) { 
 + 
 + public void onCreateAggregate ( String ksName , String aggregateName , List < AbstractType < ? > > argTypes ) 
 + { 
 if ( Functions . getOverloadCount ( new FunctionName ( ksName , aggregateName ) ) > 1 ) 
 { 
 / / in case there are other overloads , we have to remove all overloads since argument type 
 / / matching may change ( due to type casting ) 
 - removeInvalidPreparedStatementsForFunction ( preparedStatements . values ( ) . iterator ( ) , ksName , aggregateName ) ; 
 - removeInvalidPreparedStatementsForFunction ( thriftPreparedStatements . values ( ) . iterator ( ) , ksName , aggregateName ) ; 
 + removeAllInvalidPreparedStatementsForFunction ( ksName , aggregateName ) ; 
 } 
 } 
 
 @ @ - 623 , 6 + 634 , 24 @ @ public class QueryProcessor implements QueryHandler 
 removeInvalidPreparedStatements ( ksName , cfName ) ; 
 } 
 
 + public void onUpdateFunction ( String ksName , String functionName , List < AbstractType < ? > > argTypes ) 
 + { 
 + / / Updating a function may imply we ' ve changed the body of the function , so we need to invalid statements so that 
 + / / the new definition is picked ( the function is resolved at preparation time ) . 
 + / / TODO : if the function has multiple overload , we could invalidate only the statement refering to the overload 
 + / / that was updated . This requires a few changes however and probably doesn ' t matter much in practice . 
 + removeAllInvalidPreparedStatementsForFunction ( ksName , functionName ) ; 
 + } 
 + 
 + public void onUpdateAggregate ( String ksName , String aggregateName , List < AbstractType < ? > > argTypes ) 
 + { 
 + / / Updating a function may imply we ' ve changed the body of the function , so we need to invalid statements so that 
 + / / the new definition is picked ( the function is resolved at preparation time ) . 
 + / / TODO : if the function has multiple overload , we could invalidate only the statement refering to the overload 
 + / / that was updated . This requires a few changes however and probably doesn ' t matter much in practice . 
 + removeAllInvalidPreparedStatementsForFunction ( ksName , aggregateName ) ; 
 + } 
 + 
 public void onDropKeyspace ( String ksName ) 
 { 
 logger . trace ( " Keyspace { } was dropped , invalidating related prepared statements " , ksName ) ; 
 @ @ - 637 , 14 + 666 , 19 @ @ public class QueryProcessor implements QueryHandler 
 
 public void onDropFunction ( String ksName , String functionName , List < AbstractType < ? > > argTypes ) 
 { 
 - removeInvalidPreparedStatementsForFunction ( preparedStatements . values ( ) . iterator ( ) , ksName , functionName ) ; 
 - removeInvalidPreparedStatementsForFunction ( thriftPreparedStatements . values ( ) . iterator ( ) , ksName , functionName ) ; 
 + removeAllInvalidPreparedStatementsForFunction ( ksName , functionName ) ; 
 } 
 
 public void onDropAggregate ( String ksName , String aggregateName , List < AbstractType < ? > > argTypes ) 
 { 
 - removeInvalidPreparedStatementsForFunction ( preparedStatements . values ( ) . iterator ( ) , ksName , aggregateName ) ; 
 - removeInvalidPreparedStatementsForFunction ( thriftPreparedStatements . values ( ) . iterator ( ) , ksName , aggregateName ) ; 
 + removeAllInvalidPreparedStatementsForFunction ( ksName , aggregateName ) ; 
 + } 
 + 
 + private void removeAllInvalidPreparedStatementsForFunction ( String ksName , String functionName ) 
 + { 
 + removeInvalidPreparedStatementsForFunction ( internalStatements . values ( ) . iterator ( ) , ksName , functionName ) ; 
 + removeInvalidPreparedStatementsForFunction ( preparedStatements . values ( ) . iterator ( ) , ksName , functionName ) ; 
 + removeInvalidPreparedStatementsForFunction ( thriftPreparedStatements . values ( ) . iterator ( ) , ksName , functionName ) ; 
 } 
 
 private static void removeInvalidPreparedStatementsForFunction ( Iterator < ParsedStatement . Prepared > statements , 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 index 4b4631e . . 5e17d1b 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 @ @ - 136 , 6 + 136 , 7 @ @ public abstract class CQLTester 
 / / We don ' t use USE _ PREPARED _ VALUES in the code below so some test can foce value preparation ( if the result 
 / / is not expected to be the same without preparation ) 
 private boolean usePrepared = USE _ PREPARED _ VALUES ; 
 + private static final boolean reusePrepared = Boolean . valueOf ( System . getProperty ( " cassandra . test . reuse _ prepared " , " true " ) ) ; 
 
 @ BeforeClass 
 public static void setUpClass ( ) 
 @ @ - 158 , 6 + 159 , 11 @ @ public abstract class CQLTester 
 
 if ( server ! = null ) 
 server . stop ( ) ; 
 + 
 + / / We use queryInternal for CQLTester so prepared statement will populate our internal cache ( if reusePrepared is used ; otherwise prepared 
 + / / statements are not cached but re - prepared every time ) . So we clear the cache between test files to avoid accumulating too much . 
 + if ( reusePrepared ) 
 + QueryProcessor . clearInternalStatementsCache ( ) ; 
 } 
 
 @ Before 
 @ @ - 571 , 7 + 577 , 21 @ @ public abstract class CQLTester 
 if ( usePrepared ) 
 { 
 logger . info ( " Executing : { } with values { } " , query , formatAllValues ( values ) ) ; 
 - rs = QueryProcessor . executeOnceInternal ( query , transformValues ( values ) ) ; 
 + if ( reusePrepared ) 
 + { 
 + rs = QueryProcessor . executeInternal ( query , transformValues ( values ) ) ; 
 + 
 + / / If a test uses a " USE . . . " , then presumably its statements use relative table . In that case , a USE 
 + / / change the meaning of the current keyspace , so we don ' t want a following statement to reuse a previously 
 + / / prepared statement at this wouldn ' t use the right keyspace . To avoid that , we drop the previously 
 + / / prepared statement . 
 + if ( query . startsWith ( " USE " ) ) 
 + QueryProcessor . clearInternalStatementsCache ( ) ; 
 + } 
 + else 
 + { 
 + rs = QueryProcessor . executeOnceInternal ( query , transformValues ( values ) ) ; 
 + } 
 } 
 else 
 {

NEAREST DIFF:
diff - - git a / lib / licenses / guava - r05 . txt b / lib / licenses / guava - r05 . txt 
 deleted file mode 100644 
 index d645695 . . 0000000 
 - - - a / lib / licenses / guava - r05 . txt 
 + + + / dev / null 
 @ @ - 1 , 202 + 0 , 0 @ @ 
 - 
 - Apache License 
 - Version 2 . 0 , January 2004 
 - http : / / www . apache . org / licenses / 
 - 
 - TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION 
 - 
 - 1 . Definitions . 
 - 
 - " License " shall mean the terms and conditions for use , reproduction , 
 - and distribution as defined by Sections 1 through 9 of this document . 
 - 
 - " Licensor " shall mean the copyright owner or entity authorized by 
 - the copyright owner that is granting the License . 
 - 
 - " Legal Entity " shall mean the union of the acting entity and all 
 - other entities that control , are controlled by , or are under common 
 - control with that entity . For the purposes of this definition , 
 - " control " means ( i ) the power , direct or indirect , to cause the 
 - direction or management of such entity , whether by contract or 
 - otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the 
 - outstanding shares , or ( iii ) beneficial ownership of such entity . 
 - 
 - " You " ( or " Your " ) shall mean an individual or Legal Entity 
 - exercising permissions granted by this License . 
 - 
 - " Source " form shall mean the preferred form for making modifications , 
 - including but not limited to software source code , documentation 
 - source , and configuration files . 
 - 
 - " Object " form shall mean any form resulting from mechanical 
 - transformation or translation of a Source form , including but 
 - not limited to compiled object code , generated documentation , 
 - and conversions to other media types . 
 - 
 - " Work " shall mean the work of authorship , whether in Source or 
 - Object form , made available under the License , as indicated by a 
 - copyright notice that is included in or attached to the work 
 - ( an example is provided in the Appendix below ) . 
 - 
 - " Derivative Works " shall mean any work , whether in Source or Object 
 - form , that is based on ( or derived from ) the Work and for which the 
 - editorial revisions , annotations , elaborations , or other modifications 
 - represent , as a whole , an original work of authorship . For the purposes 
 - of this License , Derivative Works shall not include works that remain 
 - separable from , or merely link ( or bind by name ) to the interfaces of , 
 - the Work and Derivative Works thereof . 
 - 
 - " Contribution " shall mean any work of authorship , including 
 - the original version of the Work and any modifications or additions 
 - to that Work or Derivative Works thereof , that is intentionally 
 - submitted to Licensor for inclusion in the Work by the copyright owner 
 - or by an individual or Legal Entity authorized to submit on behalf of 
 - the copyright owner . For the purposes of this definition , " submitted " 
 - means any form of electronic , verbal , or written communication sent 
 - to the Licensor or its representatives , including but not limited to 
 - communication on electronic mailing lists , source code control systems , 
 - and issue tracking systems that are managed by , or on behalf of , the 
 - Licensor for the purpose of discussing and improving the Work , but 
 - excluding communication that is conspicuously marked or otherwise 
 - designated in writing by the copyright owner as " Not a Contribution . " 
 - 
 - " Contributor " shall mean Licensor and any individual or Legal Entity 
 - on behalf of whom a Contribution has been received by Licensor and 
 - subsequently incorporated within the Work . 
 - 
 - 2 . Grant of Copyright License . Subject to the terms and conditions of 
 - this License , each Contributor hereby grants to You a perpetual , 
 - worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 - copyright license to reproduce , prepare Derivative Works of , 
 - publicly display , publicly perform , sublicense , and distribute the 
 - Work and such Derivative Works in Source or Object form . 
 - 
 - 3 . Grant of Patent License . Subject to the terms and conditions of 
 - this License , each Contributor hereby grants to You a perpetual , 
 - worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 - ( except as stated in this section ) patent license to make , have made , 
 - use , offer to sell , sell , import , and otherwise transfer the Work , 
 - where such license applies only to those patent claims licensable 
 - by such Contributor that are necessarily infringed by their 
 - Contribution ( s ) alone or by combination of their Contribution ( s ) 
 - with the Work to which such Contribution ( s ) was submitted . If You 
 - institute patent litigation against any entity ( including a 
 - cross - claim or counterclaim in a lawsuit ) alleging that the Work 
 - or a Contribution incorporated within the Work constitutes direct 
 - or contributory patent infringement , then any patent licenses 
 - granted to You under this License for that Work shall terminate 
 - as of the date such litigation is filed . 
 - 
 - 4 . Redistribution . You may reproduce and distribute copies of the 
 - Work or Derivative Works thereof in any medium , with or without 
 - modifications , and in Source or Object form , provided that You 
 - meet the following conditions : 
 - 
 - ( a ) You must give any other recipients of the Work or 
 - Derivative Works a copy of this License ; and 
 - 
 - ( b ) You must cause any modified files to carry prominent notices 
 - stating that You changed the files ; and 
 - 
 - ( c ) You must retain , in the Source form of any Derivative Works 
 - that You distribute , all copyright , patent , trademark , and 
 - attribution notices from the Source form of the Work , 
 - excluding those notices that do not pertain to any part of 
 - the Derivative Works ; and 
 - 
 - ( d ) If the Work includes a " NOTICE " text file as part of its 
 - distribution , then any Derivative Works that You distribute must 
 - include a readable copy of the attribution notices contained 
 - within such NOTICE file , excluding those notices that do not 
 - pertain to any part of the Derivative Works , in at least one 
 - of the following places : within a NOTICE text file distributed 
 - as part of the Derivative Works ; within the Source form or 
 - documentation , if provided along with the Derivative Works ; or , 
 - within a display generated by the Derivative Works , if and 
 - wherever such third - party notices normally appear . The contents 
 - of the NOTICE file are for informational purposes only and 
 - do not modify the License . You may add Your own attribution 
 - notices within Derivative Works that You distribute , alongside 
 - or as an addendum to the NOTICE text from the Work , provided 
 - that such additional attribution notices cannot be construed 
 - as modifying the License . 
 - 
 - You may add Your own copyright statement to Your modifications and 
 - may provide additional or different license terms and conditions 
 - for use , reproduction , or distribution of Your modifications , or 
 - for any such Derivative Works as a whole , provided Your use , 
 - reproduction , and distribution of the Work otherwise complies with 
 - the conditions stated in this License . 
 - 
 - 5 . Submission of Contributions . Unless You explicitly state otherwise , 
 - any Contribution intentionally submitted for inclusion in the Work 
 - by You to the Licensor shall be under the terms and conditions of 
 - this License , without any additional terms or conditions . 
 - Notwithstanding the above , nothing herein shall supersede or modify 
 - the terms of any separate license agreement you may have executed 
 - with Licensor regarding such Contributions . 
 - 
 - 6 . Trademarks . This License does not grant permission to use the trade 
 - names , trademarks , service marks , or product names of the Licensor , 
 - except as required for reasonable and customary use in describing the 
 - origin of the Work and reproducing the content of the NOTICE file . 
 - 
 - 7 . Disclaimer of Warranty . Unless required by applicable law or 
 - agreed to in writing , Licensor provides the Work ( and each 
 - Contributor provides its Contributions ) on an " AS IS " BASIS , 
 - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or 
 - implied , including , without limitation , any warranties or conditions 
 - of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A 
 - PARTICULAR PURPOSE . You are solely responsible for determining the 
 - appropriateness of using or redistributing the Work and assume any 
 - risks associated with Your exercise of permissions under this License . 
 - 
 - 8 . Limitation of Liability . In no event and under no legal theory , 
 - whether in tort ( including negligence ) , contract , or otherwise , 
 - unless required by applicable law ( such as deliberate and grossly 
 - negligent acts ) or agreed to in writing , shall any Contributor be 
 - liable to You for damages , including any direct , indirect , special , 
 - incidental , or consequential damages of any character arising as a 
 - result of this License or out of the use or inability to use the 
 - Work ( including but not limited to damages for loss of goodwill , 
 - work stoppage , computer failure or malfunction , or any and all 
 - other commercial damages or losses ) , even if such Contributor 
 - has been advised of the possibility of such damages . 
 - 
 - 9 . Accepting Warranty or Additional Liability . While redistributing 
 - the Work or Derivative Works thereof , You may choose to offer , 
 - and charge a fee for , acceptance of support , warranty , indemnity , 
 - or other liability obligations and / or rights consistent with this 
 - License . However , in accepting such obligations , You may act only 
 - on Your own behalf and on Your sole responsibility , not on behalf 
 - of any other Contributor , and only if You agree to indemnify , 
 - defend , and hold each Contributor harmless for any liability 
 - incurred by , or claims asserted against , such Contributor by reason 
 - of your accepting any such warranty or additional liability . 
 - 
 - END OF TERMS AND CONDITIONS 
 - 
 - APPENDIX : How to apply the Apache License to your work . 
 - 
 - To apply the Apache License to your work , attach the following 
 - boilerplate notice , with the fields enclosed by brackets " [ ] " 
 - replaced with your own identifying information . ( Don ' t include 
 - the brackets ! ) The text should be enclosed in the appropriate 
 - comment syntax for the file format . We also recommend that a 
 - file or class name and description of purpose be included on the 
 - same " printed page " as the copyright notice for easier 
 - identification within third - party archives . 
 - 
 - Copyright [ yyyy ] [ name of copyright owner ] 
 - 
 - Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - you may not use this file except in compliance with the License . 
 - You may obtain a copy of the License at 
 - 
 - http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - 
 - Unless required by applicable law or agreed to in writing , software 
 - distributed under the License is distributed on an " AS IS " BASIS , 
 - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - See the License for the specific language governing permissions and 
 - limitations under the License . 
 diff - - git a / lib / licenses / guava - r08 . txt b / lib / licenses / guava - r08 . txt 
 new file mode 100644 
 index 0000000 . . d645695 
 - - - / dev / null 
 + + + b / lib / licenses / guava - r08 . txt 
 @ @ - 0 , 0 + 1 , 202 @ @ 
 + 
 + Apache License 
 + Version 2 . 0 , January 2004 
 + http : / / www . apache . org / licenses / 
 + 
 + TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION 
 + 
 + 1 . Definitions . 
 + 
 + " License " shall mean the terms and conditions for use , reproduction , 
 + and distribution as defined by Sections 1 through 9 of this document . 
 + 
 + " Licensor " shall mean the copyright owner or entity authorized by 
 + the copyright owner that is granting the License . 
 + 
 + " Legal Entity " shall mean the union of the acting entity and all 
 + other entities that control , are controlled by , or are under common 
 + control with that entity . For the purposes of this definition , 
 + " control " means ( i ) the power , direct or indirect , to cause the 
 + direction or management of such entity , whether by contract or 
 + otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the 
 + outstanding shares , or ( iii ) beneficial ownership of such entity . 
 + 
 + " You " ( or " Your " ) shall mean an individual or Legal Entity 
 + exercising permissions granted by this License . 
 + 
 + " Source " form shall mean the preferred form for making modifications , 
 + including but not limited to software source code , documentation 
 + source , and configuration files . 
 + 
 + " Object " form shall mean any form resulting from mechanical 
 + transformation or translation of a Source form , including but 
 + not limited to compiled object code , generated documentation , 
 + and conversions to other media types . 
 + 
 + " Work " shall mean the work of authorship , whether in Source or 
 + Object form , made available under the License , as indicated by a 
 + copyright notice that is included in or attached to the work 
 + ( an example is provided in the Appendix below ) . 
 + 
 + " Derivative Works " shall mean any work , whether in Source or Object 
 + form , that is based on ( or derived from ) the Work and for which the 
 + editorial revisions , annotations , elaborations , or other modifications 
 + represent , as a whole , an original work of authorship . For the purposes 
 + of this License , Derivative Works shall not include works that remain 
 + separable from , or merely link ( or bind by name ) to the interfaces of , 
 + the Work and Derivative Works thereof . 
 + 
 + " Contribution " shall mean any work of authorship , including 
 + the original version of the Work and any modifications or additions 
 + to that Work or Derivative Works thereof , that is intentionally 
 + submitted to Licensor for inclusion in the Work by the copyright owner 
 + or by an individual or Legal Entity authorized to submit on behalf of 
 + the copyright owner . For the purposes of this definition , " submitted " 
 + means any form of electronic , verbal , or written communication sent 
 + to the Licensor or its representatives , including but not limited to 
 + communication on electronic mailing lists , source code control systems , 
 + and issue tracking systems that are managed by , or on behalf of , the 
 + Licensor for the purpose of discussing and improving the Work , but 
 + excluding communication that is conspicuously marked or otherwise 
 + designated in writing by the copyright owner as " Not a Contribution . " 
 + 
 + " Contributor " shall mean Licensor and any individual or Legal Entity 
 + on behalf of whom a Contribution has been received by Licensor and 
 + subsequently incorporated within the Work . 
 + 
 + 2 . Grant of Copyright License . Subject to the terms and conditions of 
 + this License , each Contributor hereby grants to You a perpetual , 
 + worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 + copyright license to reproduce , prepare Derivative Works of , 
 + publicly display , publicly perform , sublicense , and distribute the 
 + Work and such Derivative Works in Source or Object form . 
 + 
 + 3 . Grant of Patent License . Subject to the terms and conditions of 
 + this License , each Contributor hereby grants to You a perpetual , 
 + worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 + ( except as stated in this section ) patent license to make , have made , 
 + use , offer to sell , sell , import , and otherwise transfer the Work , 
 + where such license applies only to those patent claims licensable 
 + by such Contributor that are necessarily infringed by their 
 + Contribution ( s ) alone or by combination of their Contribution ( s ) 
 + with the Work to which such Contribution ( s ) was submitted . If You 
 + institute patent litigation against any entity ( including a 
 + cross - claim or counterclaim in a lawsuit ) alleging that the Work 
 + or a Contribution incorporated within the Work constitutes direct 
 + or contributory patent infringement , then any patent licenses 
 + granted to You under this License for that Work shall terminate 
 + as of the date such litigation is filed . 
 + 
 + 4 . Redistribution . You may reproduce and distribute copies of the 
 + Work or Derivative Works thereof in any medium , with or without 
 + modifications , and in Source or Object form , provided that You 
 + meet the following conditions : 
 + 
 + ( a ) You must give any other recipients of the Work or 
 + Derivative Works a copy of this License ; and 
 + 
 + ( b ) You must cause any modified files to carry prominent notices 
 + stating that You changed the files ; and 
 + 
 + ( c ) You must retain , in the Source form of any Derivative Works 
 + that You distribute , all copyright , patent , trademark , and 
 + attribution notices from the Source form of the Work , 
 + excluding those notices that do not pertain to any part of 
 + the Derivative Works ; and 
 + 
 + ( d ) If the Work includes a " NOTICE " text file as part of its 
 + distribution , then any Derivative Works that You distribute must 
 + include a readable copy of the attribution notices contained 
 + within such NOTICE file , excluding those notices that do not 
 + pertain to any part of the Derivative Works , in at least one 
 + of the following places : within a NOTICE text file distributed 
 + as part of the Derivative Works ; within the Source form or 
 + documentation , if provided along with the Derivative Works ; or , 
 + within a display generated by the Derivative Works , if and 
 + wherever such third - party notices normally appear . The contents 
 + of the NOTICE file are for informational purposes only and 
 + do not modify the License . You may add Your own attribution 
 + notices within Derivative Works that You distribute , alongside 
 + or as an addendum to the NOTICE text from the Work , provided 
 + that such additional attribution notices cannot be construed 
 + as modifying the License . 
 + 
 + You may add Your own copyright statement to Your modifications and 
 + may provide additional or different license terms and conditions 
 + for use , reproduction , or distribution of Your modifications , or 
 + for any such Derivative Works as a whole , provided Your use , 
 + reproduction , and distribution of the Work otherwise complies with 
 + the conditions stated in this License . 
 + 
 + 5 . Submission of Contributions . Unless You explicitly state otherwise , 
 + any Contribution intentionally submitted for inclusion in the Work 
 + by You to the Licensor shall be under the terms and conditions of 
 + this License , without any additional terms or conditions . 
 + Notwithstanding the above , nothing herein shall supersede or modify 
 + the terms of any separate license agreement you may have executed 
 + with Licensor regarding such Contributions . 
 + 
 + 6 . Trademarks . This License does not grant permission to use the trade 
 + names , trademarks , service marks , or product names of the Licensor , 
 + except as required for reasonable and customary use in describing the 
 + origin of the Work and reproducing the content of the NOTICE file . 
 + 
 + 7 . Disclaimer of Warranty . Unless required by applicable law or 
 + agreed to in writing , Licensor provides the Work ( and each 
 + Contributor provides its Contributions ) on an " AS IS " BASIS , 
 + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or 
 + implied , including , without limitation , any warranties or conditions 
 + of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A 
 + PARTICULAR PURPOSE . You are solely responsible for determining the 
 + appropriateness of using or redistributing the Work and assume any 
 + risks associated with Your exercise of permissions under this License . 
 + 
 + 8 . Limitation of Liability . In no event and under no legal theory , 
 + whether in tort ( including negligence ) , contract , or otherwise , 
 + unless required by applicable law ( such as deliberate and grossly 
 + negligent acts ) or agreed to in writing , shall any Contributor be 
 + liable to You for damages , including any direct , indirect , special , 
 + incidental , or consequential damages of any character arising as a 
 + result of this License or out of the use or inability to use the 
 + Work ( including but not limited to damages for loss of goodwill , 
 + work stoppage , computer failure or malfunction , or any and all 
 + other commercial damages or losses ) , even if such Contributor 
 + has been advised of the possibility of such damages . 
 + 
 + 9 . Accepting Warranty or Additional Liability . While redistributing 
 + the Work or Derivative Works thereof , You may choose to offer , 
 + and charge a fee for , acceptance of support , warranty , indemnity , 
 + or other liability obligations and / or rights consistent with this 
 + License . However , in accepting such obligations , You may act only 
 + on Your own behalf and on Your sole responsibility , not on behalf 
 + of any other Contributor , and only if You agree to indemnify , 
 + defend , and hold each Contributor harmless for any liability 
 + incurred by , or claims asserted against , such Contributor by reason 
 + of your accepting any such warranty or additional liability . 
 + 
 + END OF TERMS AND CONDITIONS 
 + 
 + APPENDIX : How to apply the Apache License to your work . 
 + 
 + To apply the Apache License to your work , attach the following 
 + boilerplate notice , with the fields enclosed by brackets " [ ] " 
 + replaced with your own identifying information . ( Don ' t include 
 + the brackets ! ) The text should be enclosed in the appropriate 
 + comment syntax for the file format . We also recommend that a 
 + file or class name and description of purpose be included on the 
 + same " printed page " as the copyright notice for easier 
 + identification within third - party archives . 
 + 
 + Copyright [ yyyy ] [ name of copyright owner ] 
 + 
 + Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + you may not use this file except in compliance with the License . 
 + You may obtain a copy of the License at 
 + 
 + http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + 
 + Unless required by applicable law or agreed to in writing , software 
 + distributed under the License is distributed on an " AS IS " BASIS , 
 + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + See the License for the specific language governing permissions and 
 + limitations under the License .
