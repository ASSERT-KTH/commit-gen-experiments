BLEU SCORE: 0.11598118436136108

TEST MSG: make CqlRecordWriter extensible
GENERATED MSG: r / m nodeprobe bootstrap

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordWriter . java b / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordWriter . java <nl> index 27d1c70 . . e354ad6 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordWriter . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordWriter . java <nl> @ @ - 59 , 21 + 59 , 21 @ @ import org . apache . thrift . transport . TTransport ; <nl> * <nl> * @ see CqlOutputFormat <nl> * / <nl> - final class CqlRecordWriter extends AbstractColumnFamilyRecordWriter < Map < String , ByteBuffer > , List < ByteBuffer > > <nl> + class CqlRecordWriter extends AbstractColumnFamilyRecordWriter < Map < String , ByteBuffer > , List < ByteBuffer > > <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( CqlRecordWriter . class ) ; <nl> <nl> / / handles for clients for each range running in the threadpool <nl> - private final Map < Range , RangeClient > clients ; <nl> + protected final Map < Range , RangeClient > clients ; <nl> <nl> / / host to prepared statement id mappings <nl> - private ConcurrentHashMap < Cassandra . Client , Integer > preparedStatements = new ConcurrentHashMap < Cassandra . Client , Integer > ( ) ; <nl> + protected final ConcurrentHashMap < Cassandra . Client , Integer > preparedStatements = new ConcurrentHashMap < Cassandra . Client , Integer > ( ) ; <nl> <nl> - private final String cql ; <nl> + protected final String cql ; <nl> <nl> - private AbstractType < ? > keyValidator ; <nl> - private String [ ] partitionKeyColumns ; <nl> - private List < String > clusterColumns ; <nl> + protected AbstractType < ? > keyValidator ; <nl> + protected String [ ] partitionKeyColumns ; <nl> + protected List < String > clusterColumns ; <nl> <nl> / * * <nl> * Upon construction , obtain the map that this writer will use to collect
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 7ccfba2 . . d88cf84 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 3 + 1 , 12 @ @ <nl> + 0 . 5 dev <nl> + * All non - seed nodes will attempt to bootstrap when started , until <nl> + bootstrap successfully completes . - b option is removed . <nl> + * Unless a token is manually specified in the configuration xml , <nl> + a bootstraping node will use a token that gives it half the <nl> + keys from the most - heavily - loaded node in the cluster , <nl> + instead of generating a random token . <nl> + <nl> + <nl> 0 . 4 . 1 <nl> * Fix FlushPeriod columnfamily configuration regression <nl> ( CASSANDRA - 455 ) <nl> diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index a68ec30 . . 4d43e9f 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 145 , 6 + 145 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> StageManager . registerStage ( Gossiper . GOSSIP _ STAGE , new SingleThreadedStage ( " GMFD " ) ) ; <nl> } <nl> <nl> + / * * Register with the Gossiper for EndPointState notifications * / <nl> public void register ( IEndPointStateChangeSubscriber subscriber ) <nl> { <nl> subscribers _ . add ( subscriber ) ; <nl> @ @ - 881 , 6 + 882 , 10 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> } <nl> } <nl> <nl> + / * * <nl> + * Start the gossiper with the generation # retrieved from the System <nl> + * table <nl> + * / <nl> public void start ( EndPoint localEndPoint , int generationNbr ) throws IOException <nl> { <nl> localEndPoint _ = localEndPoint ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index c2f9ff2 . . 8bf3e88 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 83 , 7 + 83 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> public final static String rangeVerbHandler _ = " RANGE - VERB - HANDLER " ; <nl> public final static String bootstrapTokenVerbHandler _ = " SPLITS - VERB - HANDLER " ; <nl> <nl> - private static StorageService instance _ ; <nl> + private static volatile StorageService instance _ ; <nl> private static EndPoint tcpAddr _ ; <nl> private static EndPoint udpAddr _ ; <nl> private static IPartitioner partitioner _ ; <nl> @ @ - 139 , 15 + 139 , 13 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> { <nl> if ( instance _ = = null ) <nl> { <nl> - boolean bootstrap = ! ( DatabaseDescriptor . getSeeds ( ) . contains ( getLocalControlEndPoint ( ) . getHost ( ) ) | | SystemTable . isBootstrapped ( ) ) ; <nl> - <nl> synchronized ( StorageService . class ) <nl> { <nl> if ( instance _ = = null ) <nl> { <nl> try <nl> { <nl> - instance _ = new StorageService ( bootstrap ) ; <nl> + instance _ = new StorageService ( ) ; <nl> } <nl> catch ( Throwable th ) <nl> { <nl> @ @ - 248 , 9 + 246 , 8 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> } <nl> } <nl> <nl> - public StorageService ( boolean isBootstrapMode ) <nl> + public StorageService ( ) <nl> { <nl> - this . isBootstrapMode = isBootstrapMode ; <nl> bootstrapSet = new HashSet < EndPoint > ( ) ; <nl> init ( ) ; <nl> storageLoadBalancer _ = new StorageLoadBalancer ( this ) ; <nl> @ @ - 316 , 6 + 313 , 8 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> storageMetadata _ = SystemTable . initMetadata ( ) ; <nl> tcpAddr _ = new EndPoint ( DatabaseDescriptor . getStoragePort ( ) ) ; <nl> udpAddr _ = new EndPoint ( DatabaseDescriptor . getControlPort ( ) ) ; <nl> + isBootstrapMode = ! ( DatabaseDescriptor . getSeeds ( ) . contains ( udpAddr _ . getHost ( ) ) | | SystemTable . isBootstrapped ( ) ) ; <nl> + <nl> / * Listen for application messages * / <nl> MessagingService . instance ( ) . listen ( tcpAddr _ ) ; <nl> / * Listen for control messages * / <nl> @ @ - 327 , 19 + 326 , 6 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> / * starts a load timer thread * / <nl> loadTimer _ . schedule ( new LoadDisseminator ( ) , StorageService . threshold _ , StorageService . threshold _ ) ; <nl> <nl> - / * Start the storage load balancer * / <nl> - storageLoadBalancer _ . start ( ) ; <nl> - / * Register with the Gossiper for EndPointState notifications * / <nl> - Gossiper . instance ( ) . register ( this ) ; <nl> - / * <nl> - * Start the gossiper with the generation # retrieved from the System <nl> - * table <nl> - * / <nl> - Gossiper . instance ( ) . start ( udpAddr _ , storageMetadata _ . getGeneration ( ) ) ; <nl> - / * Make sure this token gets gossiped around . * / <nl> - tokenMetadata _ . update ( storageMetadata _ . getToken ( ) , StorageService . tcpAddr _ , isBootstrapMode ) ; <nl> - ApplicationState state = new ApplicationState ( StorageService . getPartitioner ( ) . getTokenFactory ( ) . toString ( storageMetadata _ . getToken ( ) ) ) ; <nl> - Gossiper . instance ( ) . addApplicationState ( StorageService . nodeId _ , state ) ; <nl> if ( isBootstrapMode ) <nl> { <nl> logger _ . info ( " Starting in bootstrap mode ( first , sleeping to get load information ) " ) ; <nl> @ @ - 379 , 9 + 365 , 19 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> updateToken ( t ) ; <nl> } <nl> } <nl> - doBootstrap ( StorageService . getLocalStorageEndPoint ( ) ) ; <nl> + <nl> + BootStrapper bs = new BootStrapper ( new EndPoint [ ] { getLocalStorageEndPoint ( ) } , storageMetadata _ . getToken ( ) ) ; <nl> + bootStrapper _ . submit ( bs ) ; <nl> Gossiper . instance ( ) . addApplicationState ( BOOTSTRAP _ MODE , new ApplicationState ( " " ) ) ; <nl> } <nl> + <nl> + storageLoadBalancer _ . start ( ) ; <nl> + Gossiper . instance ( ) . register ( this ) ; <nl> + Gossiper . instance ( ) . start ( udpAddr _ , storageMetadata _ . getGeneration ( ) ) ; <nl> + / * Make sure this token gets gossiped around . * / <nl> + tokenMetadata _ . update ( storageMetadata _ . getToken ( ) , StorageService . tcpAddr _ , isBootstrapMode ) ; <nl> + ApplicationState state = new ApplicationState ( StorageService . getPartitioner ( ) . getTokenFactory ( ) . toString ( storageMetadata _ . getToken ( ) ) ) ; <nl> + Gossiper . instance ( ) . addApplicationState ( StorageService . nodeId _ , state ) ; <nl> } <nl> <nl> private Token < ? > getBootstrapTokenFrom ( EndPoint maxEndpoint ) <nl> @ @ - 659 , 43 + 655 , 8 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> 	 updateToken ( newToken ) ; <nl> 	 } <nl> } <nl> - <nl> - / * * <nl> - * This method takes a colon separated string of nodes that need <nl> - * to be bootstrapped . * < i > nodes < / i > must be specified as A : B : C . <nl> - * @ throws UnknownHostException <nl> - * <nl> - * / <nl> - private void doBootstrap ( String nodes ) throws UnknownHostException <nl> - { <nl> - String [ ] allNodes = nodes . split ( " : " ) ; <nl> - EndPoint [ ] endpoints = new EndPoint [ allNodes . length ] ; <nl> - Token [ ] tokens = new Token [ allNodes . length ] ; <nl> - <nl> - for ( int i = 0 ; i < allNodes . length ; + + i ) <nl> - { <nl> - String host = allNodes [ i ] . trim ( ) ; <nl> - InetAddress ip = InetAddress . getByName ( host ) ; <nl> - host = ip . getHostAddress ( ) ; <nl> - endpoints [ i ] = new EndPoint ( host , DatabaseDescriptor . getStoragePort ( ) ) ; <nl> - tokens [ i ] = tokenMetadata _ . getToken ( endpoints [ i ] ) ; <nl> - } <nl> - <nl> - / * Start the bootstrap algorithm * / <nl> - bootStrapper _ . submit ( new BootStrapper ( endpoints , tokens ) ) ; <nl> - } <nl> <nl> / * * <nl> - * Starts the bootstrap operations for the specified endpoint . <nl> - * @ param endpoint <nl> - * / <nl> - public final void doBootstrap ( EndPoint endpoint ) <nl> - { <nl> - Token token = tokenMetadata _ . getToken ( endpoint ) ; <nl> - bootStrapper _ . submit ( new BootStrapper ( new EndPoint [ ] { endpoint } , token ) ) ; <nl> - } <nl> - <nl> - / * * <nl> * Deliver hints to the specified node when it has crashed <nl> * and come back up / marked as alive after a network partition <nl> * / <nl> @ @ - 757 , 11 + 718 , 6 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> return Gossiper . instance ( ) . getCurrentGenerationNumber ( udpAddr _ ) ; <nl> } <nl> <nl> - public void bootstrapNodes ( String nodes ) throws UnknownHostException <nl> - { <nl> - doBootstrap ( nodes ) ; <nl> - } <nl> - <nl> public void forceTableCleanup ( ) throws IOException <nl> { <nl> List < String > tables = DatabaseDescriptor . getTables ( ) ; <nl> @ @ - 772 , 9 + 728 , 6 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> } <nl> } <nl> <nl> - / * * <nl> - * Trigger the immediate compaction of all tables . <nl> - * / <nl> public void forceTableCompaction ( ) throws IOException <nl> { <nl> List < String > tables = DatabaseDescriptor . getTables ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index c8044e7 . . c3aa6e7 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 78 , 20 + 78 , 7 @ @ public interface StorageServiceMBean <nl> * Forces major compaction ( all sstable files compacted ) <nl> * / <nl> public void forceTableCompaction ( ) throws IOException ; <nl> - <nl> - / * * <nl> - * This method will cause the local node initiate <nl> - * the bootstrap process for all the nodes specified <nl> - * in the string parameter passed in . This local node <nl> - * will calculate who gives what ranges to the nodes <nl> - * and then instructs the nodes to do so . <nl> - * <nl> - * @ param nodes colon delimited list of endpoints that need <nl> - * to be bootstrapped <nl> - * @ throws UnknownHostException <nl> - * / <nl> - public void bootstrapNodes ( String nodes ) throws UnknownHostException ; <nl> - <nl> + <nl> / * * <nl> * Trigger a cleanup of keys on all tables . <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index 83fcd67 . . a4eab96 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 178 , 11 + 178 , 6 @ @ public class NodeProbe <nl> ssProxy . forceTableCleanup ( ) ; <nl> } <nl> <nl> - public void bootstrapNodes ( String nodeList ) throws UnknownHostException <nl> - { <nl> - ssProxy . bootstrapNodes ( nodeList ) ; <nl> - } <nl> - <nl> public void forceTableCompaction ( ) throws IOException <nl> { <nl> ssProxy . forceTableCompaction ( ) ; <nl> @ @ - 469 , 7 + 464 , 7 @ @ public class NodeProbe <nl> { <nl> HelpFormatter hf = new HelpFormatter ( ) ; <nl> String header = String . format ( <nl> - " % nAvailable commands : ring , cluster , info , cleanup , compact , cfstats , snapshot [ name ] , clearsnapshot , bootstrap , tpstats , flush _ binary , " + <nl> + " % nAvailable commands : ring , cluster , info , cleanup , compact , cfstats , snapshot [ name ] , clearsnapshot , tpstats , flush _ binary , " + <nl> " getcompactionthreshold , setcompactionthreshold [ minthreshold ] ( [ maxthreshold ] ) " ) ; <nl> String usage = String . format ( " java % s - host < arg > < command > % n " , NodeProbe . class . getName ( ) ) ; <nl> hf . printHelp ( usage , " " , options , header ) ; <nl> @ @ - 541 , 19 + 536 , 6 @ @ public class NodeProbe <nl> { <nl> probe . clearSnapshot ( ) ; <nl> } <nl> - else if ( cmdName . equals ( " bootstrap " ) ) <nl> - { <nl> - if ( arguments . length = = 2 ) <nl> - { <nl> - probe . bootstrapNodes ( arguments [ 1 ] ) ; <nl> - } <nl> - else <nl> - { <nl> - System . err . println ( cmdName + " needs a node to work with " ) ; <nl> - NodeProbe . printUsage ( ) ; <nl> - System . exit ( 1 ) ; <nl> - } <nl> - } <nl> else if ( cmdName . equals ( " tpstats " ) ) <nl> { <nl> probe . printThreadPoolStats ( System . out ) ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordWriter . java b / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordWriter . java 
 index 27d1c70 . . e354ad6 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordWriter . java 
 + + + b / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordWriter . java 
 @ @ - 59 , 21 + 59 , 21 @ @ import org . apache . thrift . transport . TTransport ; 
 * 
 * @ see CqlOutputFormat 
 * / 
 - final class CqlRecordWriter extends AbstractColumnFamilyRecordWriter < Map < String , ByteBuffer > , List < ByteBuffer > > 
 + class CqlRecordWriter extends AbstractColumnFamilyRecordWriter < Map < String , ByteBuffer > , List < ByteBuffer > > 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( CqlRecordWriter . class ) ; 
 
 / / handles for clients for each range running in the threadpool 
 - private final Map < Range , RangeClient > clients ; 
 + protected final Map < Range , RangeClient > clients ; 
 
 / / host to prepared statement id mappings 
 - private ConcurrentHashMap < Cassandra . Client , Integer > preparedStatements = new ConcurrentHashMap < Cassandra . Client , Integer > ( ) ; 
 + protected final ConcurrentHashMap < Cassandra . Client , Integer > preparedStatements = new ConcurrentHashMap < Cassandra . Client , Integer > ( ) ; 
 
 - private final String cql ; 
 + protected final String cql ; 
 
 - private AbstractType < ? > keyValidator ; 
 - private String [ ] partitionKeyColumns ; 
 - private List < String > clusterColumns ; 
 + protected AbstractType < ? > keyValidator ; 
 + protected String [ ] partitionKeyColumns ; 
 + protected List < String > clusterColumns ; 
 
 / * * 
 * Upon construction , obtain the map that this writer will use to collect

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 7ccfba2 . . d88cf84 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 3 + 1 , 12 @ @ 
 + 0 . 5 dev 
 + * All non - seed nodes will attempt to bootstrap when started , until 
 + bootstrap successfully completes . - b option is removed . 
 + * Unless a token is manually specified in the configuration xml , 
 + a bootstraping node will use a token that gives it half the 
 + keys from the most - heavily - loaded node in the cluster , 
 + instead of generating a random token . 
 + 
 + 
 0 . 4 . 1 
 * Fix FlushPeriod columnfamily configuration regression 
 ( CASSANDRA - 455 ) 
 diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index a68ec30 . . 4d43e9f 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 145 , 6 + 145 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 StageManager . registerStage ( Gossiper . GOSSIP _ STAGE , new SingleThreadedStage ( " GMFD " ) ) ; 
 } 
 
 + / * * Register with the Gossiper for EndPointState notifications * / 
 public void register ( IEndPointStateChangeSubscriber subscriber ) 
 { 
 subscribers _ . add ( subscriber ) ; 
 @ @ - 881 , 6 + 882 , 10 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 } 
 } 
 
 + / * * 
 + * Start the gossiper with the generation # retrieved from the System 
 + * table 
 + * / 
 public void start ( EndPoint localEndPoint , int generationNbr ) throws IOException 
 { 
 localEndPoint _ = localEndPoint ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index c2f9ff2 . . 8bf3e88 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 83 , 7 + 83 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 public final static String rangeVerbHandler _ = " RANGE - VERB - HANDLER " ; 
 public final static String bootstrapTokenVerbHandler _ = " SPLITS - VERB - HANDLER " ; 
 
 - private static StorageService instance _ ; 
 + private static volatile StorageService instance _ ; 
 private static EndPoint tcpAddr _ ; 
 private static EndPoint udpAddr _ ; 
 private static IPartitioner partitioner _ ; 
 @ @ - 139 , 15 + 139 , 13 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 { 
 if ( instance _ = = null ) 
 { 
 - boolean bootstrap = ! ( DatabaseDescriptor . getSeeds ( ) . contains ( getLocalControlEndPoint ( ) . getHost ( ) ) | | SystemTable . isBootstrapped ( ) ) ; 
 - 
 synchronized ( StorageService . class ) 
 { 
 if ( instance _ = = null ) 
 { 
 try 
 { 
 - instance _ = new StorageService ( bootstrap ) ; 
 + instance _ = new StorageService ( ) ; 
 } 
 catch ( Throwable th ) 
 { 
 @ @ - 248 , 9 + 246 , 8 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 } 
 } 
 
 - public StorageService ( boolean isBootstrapMode ) 
 + public StorageService ( ) 
 { 
 - this . isBootstrapMode = isBootstrapMode ; 
 bootstrapSet = new HashSet < EndPoint > ( ) ; 
 init ( ) ; 
 storageLoadBalancer _ = new StorageLoadBalancer ( this ) ; 
 @ @ - 316 , 6 + 313 , 8 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 storageMetadata _ = SystemTable . initMetadata ( ) ; 
 tcpAddr _ = new EndPoint ( DatabaseDescriptor . getStoragePort ( ) ) ; 
 udpAddr _ = new EndPoint ( DatabaseDescriptor . getControlPort ( ) ) ; 
 + isBootstrapMode = ! ( DatabaseDescriptor . getSeeds ( ) . contains ( udpAddr _ . getHost ( ) ) | | SystemTable . isBootstrapped ( ) ) ; 
 + 
 / * Listen for application messages * / 
 MessagingService . instance ( ) . listen ( tcpAddr _ ) ; 
 / * Listen for control messages * / 
 @ @ - 327 , 19 + 326 , 6 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 / * starts a load timer thread * / 
 loadTimer _ . schedule ( new LoadDisseminator ( ) , StorageService . threshold _ , StorageService . threshold _ ) ; 
 
 - / * Start the storage load balancer * / 
 - storageLoadBalancer _ . start ( ) ; 
 - / * Register with the Gossiper for EndPointState notifications * / 
 - Gossiper . instance ( ) . register ( this ) ; 
 - / * 
 - * Start the gossiper with the generation # retrieved from the System 
 - * table 
 - * / 
 - Gossiper . instance ( ) . start ( udpAddr _ , storageMetadata _ . getGeneration ( ) ) ; 
 - / * Make sure this token gets gossiped around . * / 
 - tokenMetadata _ . update ( storageMetadata _ . getToken ( ) , StorageService . tcpAddr _ , isBootstrapMode ) ; 
 - ApplicationState state = new ApplicationState ( StorageService . getPartitioner ( ) . getTokenFactory ( ) . toString ( storageMetadata _ . getToken ( ) ) ) ; 
 - Gossiper . instance ( ) . addApplicationState ( StorageService . nodeId _ , state ) ; 
 if ( isBootstrapMode ) 
 { 
 logger _ . info ( " Starting in bootstrap mode ( first , sleeping to get load information ) " ) ; 
 @ @ - 379 , 9 + 365 , 19 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 updateToken ( t ) ; 
 } 
 } 
 - doBootstrap ( StorageService . getLocalStorageEndPoint ( ) ) ; 
 + 
 + BootStrapper bs = new BootStrapper ( new EndPoint [ ] { getLocalStorageEndPoint ( ) } , storageMetadata _ . getToken ( ) ) ; 
 + bootStrapper _ . submit ( bs ) ; 
 Gossiper . instance ( ) . addApplicationState ( BOOTSTRAP _ MODE , new ApplicationState ( " " ) ) ; 
 } 
 + 
 + storageLoadBalancer _ . start ( ) ; 
 + Gossiper . instance ( ) . register ( this ) ; 
 + Gossiper . instance ( ) . start ( udpAddr _ , storageMetadata _ . getGeneration ( ) ) ; 
 + / * Make sure this token gets gossiped around . * / 
 + tokenMetadata _ . update ( storageMetadata _ . getToken ( ) , StorageService . tcpAddr _ , isBootstrapMode ) ; 
 + ApplicationState state = new ApplicationState ( StorageService . getPartitioner ( ) . getTokenFactory ( ) . toString ( storageMetadata _ . getToken ( ) ) ) ; 
 + Gossiper . instance ( ) . addApplicationState ( StorageService . nodeId _ , state ) ; 
 } 
 
 private Token < ? > getBootstrapTokenFrom ( EndPoint maxEndpoint ) 
 @ @ - 659 , 43 + 655 , 8 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 	 updateToken ( newToken ) ; 
 	 } 
 } 
 - 
 - / * * 
 - * This method takes a colon separated string of nodes that need 
 - * to be bootstrapped . * < i > nodes < / i > must be specified as A : B : C . 
 - * @ throws UnknownHostException 
 - * 
 - * / 
 - private void doBootstrap ( String nodes ) throws UnknownHostException 
 - { 
 - String [ ] allNodes = nodes . split ( " : " ) ; 
 - EndPoint [ ] endpoints = new EndPoint [ allNodes . length ] ; 
 - Token [ ] tokens = new Token [ allNodes . length ] ; 
 - 
 - for ( int i = 0 ; i < allNodes . length ; + + i ) 
 - { 
 - String host = allNodes [ i ] . trim ( ) ; 
 - InetAddress ip = InetAddress . getByName ( host ) ; 
 - host = ip . getHostAddress ( ) ; 
 - endpoints [ i ] = new EndPoint ( host , DatabaseDescriptor . getStoragePort ( ) ) ; 
 - tokens [ i ] = tokenMetadata _ . getToken ( endpoints [ i ] ) ; 
 - } 
 - 
 - / * Start the bootstrap algorithm * / 
 - bootStrapper _ . submit ( new BootStrapper ( endpoints , tokens ) ) ; 
 - } 
 
 / * * 
 - * Starts the bootstrap operations for the specified endpoint . 
 - * @ param endpoint 
 - * / 
 - public final void doBootstrap ( EndPoint endpoint ) 
 - { 
 - Token token = tokenMetadata _ . getToken ( endpoint ) ; 
 - bootStrapper _ . submit ( new BootStrapper ( new EndPoint [ ] { endpoint } , token ) ) ; 
 - } 
 - 
 - / * * 
 * Deliver hints to the specified node when it has crashed 
 * and come back up / marked as alive after a network partition 
 * / 
 @ @ - 757 , 11 + 718 , 6 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 return Gossiper . instance ( ) . getCurrentGenerationNumber ( udpAddr _ ) ; 
 } 
 
 - public void bootstrapNodes ( String nodes ) throws UnknownHostException 
 - { 
 - doBootstrap ( nodes ) ; 
 - } 
 - 
 public void forceTableCleanup ( ) throws IOException 
 { 
 List < String > tables = DatabaseDescriptor . getTables ( ) ; 
 @ @ - 772 , 9 + 728 , 6 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 } 
 } 
 
 - / * * 
 - * Trigger the immediate compaction of all tables . 
 - * / 
 public void forceTableCompaction ( ) throws IOException 
 { 
 List < String > tables = DatabaseDescriptor . getTables ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index c8044e7 . . c3aa6e7 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 78 , 20 + 78 , 7 @ @ public interface StorageServiceMBean 
 * Forces major compaction ( all sstable files compacted ) 
 * / 
 public void forceTableCompaction ( ) throws IOException ; 
 - 
 - / * * 
 - * This method will cause the local node initiate 
 - * the bootstrap process for all the nodes specified 
 - * in the string parameter passed in . This local node 
 - * will calculate who gives what ranges to the nodes 
 - * and then instructs the nodes to do so . 
 - * 
 - * @ param nodes colon delimited list of endpoints that need 
 - * to be bootstrapped 
 - * @ throws UnknownHostException 
 - * / 
 - public void bootstrapNodes ( String nodes ) throws UnknownHostException ; 
 - 
 + 
 / * * 
 * Trigger a cleanup of keys on all tables . 
 * / 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index 83fcd67 . . a4eab96 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 178 , 11 + 178 , 6 @ @ public class NodeProbe 
 ssProxy . forceTableCleanup ( ) ; 
 } 
 
 - public void bootstrapNodes ( String nodeList ) throws UnknownHostException 
 - { 
 - ssProxy . bootstrapNodes ( nodeList ) ; 
 - } 
 - 
 public void forceTableCompaction ( ) throws IOException 
 { 
 ssProxy . forceTableCompaction ( ) ; 
 @ @ - 469 , 7 + 464 , 7 @ @ public class NodeProbe 
 { 
 HelpFormatter hf = new HelpFormatter ( ) ; 
 String header = String . format ( 
 - " % nAvailable commands : ring , cluster , info , cleanup , compact , cfstats , snapshot [ name ] , clearsnapshot , bootstrap , tpstats , flush _ binary , " + 
 + " % nAvailable commands : ring , cluster , info , cleanup , compact , cfstats , snapshot [ name ] , clearsnapshot , tpstats , flush _ binary , " + 
 " getcompactionthreshold , setcompactionthreshold [ minthreshold ] ( [ maxthreshold ] ) " ) ; 
 String usage = String . format ( " java % s - host < arg > < command > % n " , NodeProbe . class . getName ( ) ) ; 
 hf . printHelp ( usage , " " , options , header ) ; 
 @ @ - 541 , 19 + 536 , 6 @ @ public class NodeProbe 
 { 
 probe . clearSnapshot ( ) ; 
 } 
 - else if ( cmdName . equals ( " bootstrap " ) ) 
 - { 
 - if ( arguments . length = = 2 ) 
 - { 
 - probe . bootstrapNodes ( arguments [ 1 ] ) ; 
 - } 
 - else 
 - { 
 - System . err . println ( cmdName + " needs a node to work with " ) ; 
 - NodeProbe . printUsage ( ) ; 
 - System . exit ( 1 ) ; 
 - } 
 - } 
 else if ( cmdName . equals ( " tpstats " ) ) 
 { 
 probe . printThreadPoolStats ( System . out ) ;
