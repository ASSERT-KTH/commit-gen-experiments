BLEU SCORE: 0.041961149062965476

TEST MSG: Moving getSTCSInL0CompactionCandidate out of loop to prevent useless multiple retrievals
GENERATED MSG: Backport CASSANDRA - 10979 to 2 . 1

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 2f3b106 . . 1304f34 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * LCS needlessly checks for L0 STCS candidates multiple times ( CASSANDRA - 12961 ) <nl> * Correctly close netty channels when a stream session ends ( CASSANDRA - 13905 ) <nl> * Update lz4 to 1 . 4 . 0 ( CASSANDRA - 13741 ) <nl> * Optimize Paxos prepare and propose stage for local requests ( CASSANDRA - 13862 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> index bafb6ee . . 5d1169a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> @ @ - 345 , 6 + 345 , 11 @ @ public class LeveledManifest <nl> / / This isn ' t a magic wand - - if you are consistently writing too fast for LCS to keep <nl> / / up , you ' re still screwed . But if instead you have intermittent bursts of activity , <nl> / / it can help a lot . <nl> + <nl> + / / Let ' s check that L0 is far enough behind to warrant STCS . <nl> + / / If it is , it will be used before proceeding any of higher level <nl> + CompactionCandidate l0Compaction = getSTCSInL0CompactionCandidate ( ) ; <nl> + <nl> for ( int i = generations . length - 1 ; i > 0 ; i - - ) <nl> { <nl> List < SSTableReader > sstables = getLevel ( i ) ; <nl> @ @ - 359 , 7 + 364 , 6 @ @ public class LeveledManifest <nl> if ( score > 1 . 001 ) <nl> { <nl> / / before proceeding with a higher level , let ' s see if L0 is far enough behind to warrant STCS <nl> - CompactionCandidate l0Compaction = getSTCSInL0CompactionCandidate ( ) ; <nl> if ( l0Compaction ! = null ) <nl> return l0Compaction ; <nl> <nl> @ @ - 389 , 7 + 393 , 7 @ @ public class LeveledManifest <nl> / / Since we don ' t have any other compactions to do , see if there is a STCS compaction to perform in L0 ; if <nl> / / there is a long running compaction , we want to make sure that we continue to keep the number of SSTables <nl> / / small in L0 . <nl> - return getSTCSInL0CompactionCandidate ( ) ; <nl> + return l0Compaction ; <nl> } <nl> return new CompactionCandidate ( candidates , getNextLevel ( candidates ) , maxSSTableSizeInBytes ) ; <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 2f3b106 . . 1304f34 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * LCS needlessly checks for L0 STCS candidates multiple times ( CASSANDRA - 12961 ) 
 * Correctly close netty channels when a stream session ends ( CASSANDRA - 13905 ) 
 * Update lz4 to 1 . 4 . 0 ( CASSANDRA - 13741 ) 
 * Optimize Paxos prepare and propose stage for local requests ( CASSANDRA - 13862 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 index bafb6ee . . 5d1169a 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 @ @ - 345 , 6 + 345 , 11 @ @ public class LeveledManifest 
 / / This isn ' t a magic wand - - if you are consistently writing too fast for LCS to keep 
 / / up , you ' re still screwed . But if instead you have intermittent bursts of activity , 
 / / it can help a lot . 
 + 
 + / / Let ' s check that L0 is far enough behind to warrant STCS . 
 + / / If it is , it will be used before proceeding any of higher level 
 + CompactionCandidate l0Compaction = getSTCSInL0CompactionCandidate ( ) ; 
 + 
 for ( int i = generations . length - 1 ; i > 0 ; i - - ) 
 { 
 List < SSTableReader > sstables = getLevel ( i ) ; 
 @ @ - 359 , 7 + 364 , 6 @ @ public class LeveledManifest 
 if ( score > 1 . 001 ) 
 { 
 / / before proceeding with a higher level , let ' s see if L0 is far enough behind to warrant STCS 
 - CompactionCandidate l0Compaction = getSTCSInL0CompactionCandidate ( ) ; 
 if ( l0Compaction ! = null ) 
 return l0Compaction ; 
 
 @ @ - 389 , 7 + 393 , 7 @ @ public class LeveledManifest 
 / / Since we don ' t have any other compactions to do , see if there is a STCS compaction to perform in L0 ; if 
 / / there is a long running compaction , we want to make sure that we continue to keep the number of SSTables 
 / / small in L0 . 
 - return getSTCSInL0CompactionCandidate ( ) ; 
 + return l0Compaction ; 
 } 
 return new CompactionCandidate ( candidates , getNextLevel ( candidates ) , maxSSTableSizeInBytes ) ; 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
