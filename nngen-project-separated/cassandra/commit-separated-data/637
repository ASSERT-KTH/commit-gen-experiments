BLEU SCORE: 0.035802380724744266

TEST MSG: Make Collections deserialization more robust
GENERATED MSG: merge from 1 . 0 . 0

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index bc9fc5b . . 998849e 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 3 + 1 , 7 @ @ <nl> + 2 . 2 . 9 <nl> + * Make Collections deserialization more robust ( CASSANDRA - 12618 ) <nl> + <nl> + <nl> 2 . 2 . 8 <nl> * Fix exceptions when enabling gossip on nodes that haven ' t joined the ring ( CASSANDRA - 12253 ) <nl> * Fix authentication problem when invoking clqsh copy from a SOURCE command ( CASSANDRA - 12642 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / UserType . java b / src / java / org / apache / cassandra / db / marshal / UserType . java <nl> index 6102d26 . . 187deeb 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / UserType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / UserType . java <nl> @ @ - 19 , 7 + 19 , 6 @ @ package org . apache . cassandra . db . marshal ; <nl> <nl> import java . nio . ByteBuffer ; <nl> import java . nio . charset . CharacterCodingException ; <nl> - import java . nio . charset . Charset ; <nl> import java . nio . charset . StandardCharsets ; <nl> import java . util . * ; <nl> <nl> @ @ - 28 , 8 + 27 , 7 @ @ import com . google . common . base . Objects ; <nl> import org . apache . cassandra . cql3 . * ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . exceptions . SyntaxException ; <nl> - import org . apache . cassandra . serializers . * ; <nl> - import org . apache . cassandra . transport . Server ; <nl> + import org . apache . cassandra . serializers . MarshalException ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . Pair ; <nl> <nl> @ @ - 123 , 7 + 121 , 7 @ @ public class UserType extends TupleType <nl> return ; <nl> <nl> if ( input . remaining ( ) < 4 ) <nl> - throw new MarshalException ( String . format ( " Not enough bytes to read size of % dth field % s " , i , fieldName ( i ) ) ) ; <nl> + throw new MarshalException ( String . format ( " Not enough bytes to read size of % dth field % s " , i , fieldNameAsString ( i ) ) ) ; <nl> <nl> int size = input . getInt ( ) ; <nl> <nl> @ @ - 132 , 7 + 130 , 7 @ @ public class UserType extends TupleType <nl> continue ; <nl> <nl> if ( input . remaining ( ) < size ) <nl> - throw new MarshalException ( String . format ( " Not enough bytes to read % dth field % s " , i , fieldName ( i ) ) ) ; <nl> + throw new MarshalException ( String . format ( " Not enough bytes to read % dth field % s " , i , fieldNameAsString ( i ) ) ) ; <nl> <nl> ByteBuffer field = ByteBufferUtil . readBytes ( input , size ) ; <nl> types . get ( i ) . validate ( field ) ; <nl> diff - - git a / src / java / org / apache / cassandra / serializers / ListSerializer . java b / src / java / org / apache / cassandra / serializers / ListSerializer . java <nl> index aeee2b9 . . d2d0610 100644 <nl> - - - a / src / java / org / apache / cassandra / serializers / ListSerializer . java <nl> + + + b / src / java / org / apache / cassandra / serializers / ListSerializer . java <nl> @ @ - 84 , 7 + 84 , 15 @ @ public class ListSerializer < T > extends CollectionSerializer < List < T > > <nl> { <nl> ByteBuffer input = bytes . duplicate ( ) ; <nl> int n = readCollectionSize ( input , version ) ; <nl> - List < T > l = new ArrayList < T > ( n ) ; <nl> + <nl> + if ( n < 0 ) <nl> + throw new MarshalException ( " The data cannot be deserialized as a list " ) ; <nl> + <nl> + / / If the received bytes are not corresponding to a list , n might be a huge number . <nl> + / / In such a case we do not want to initialize the list with that size as it can result <nl> + / / in an OOM ( see CASSANDRA - 12618 ) . On the other hand we do not want to have to resize the list <nl> + / / if we can avoid it , so we put a reasonable limit on the initialCapacity . <nl> + List < T > l = new ArrayList < T > ( Math . min ( n , 256 ) ) ; <nl> for ( int i = 0 ; i < n ; i + + ) <nl> { <nl> / / We can have nulls in lists that are used for IN values <nl> diff - - git a / src / java / org / apache / cassandra / serializers / MapSerializer . java b / src / java / org / apache / cassandra / serializers / MapSerializer . java <nl> index 8350f66 . . 66831a3 100644 <nl> - - - a / src / java / org / apache / cassandra / serializers / MapSerializer . java <nl> + + + b / src / java / org / apache / cassandra / serializers / MapSerializer . java <nl> @ @ - 94 , 7 + 94 , 15 @ @ public class MapSerializer < K , V > extends CollectionSerializer < Map < K , V > > <nl> { <nl> ByteBuffer input = bytes . duplicate ( ) ; <nl> int n = readCollectionSize ( input , version ) ; <nl> - Map < K , V > m = new LinkedHashMap < K , V > ( n ) ; <nl> + <nl> + if ( n < 0 ) <nl> + throw new MarshalException ( " The data cannot be deserialized as a map " ) ; <nl> + <nl> + / / If the received bytes are not corresponding to a map , n might be a huge number . <nl> + / / In such a case we do not want to initialize the map with that initialCapacity as it can result <nl> + / / in an OOM when put is called ( see CASSANDRA - 12618 ) . On the other hand we do not want to have to resize <nl> + / / the map if we can avoid it , so we put a reasonable limit on the initialCapacity . <nl> + Map < K , V > m = new LinkedHashMap < K , V > ( Math . min ( n , 256 ) ) ; <nl> for ( int i = 0 ; i < n ; i + + ) <nl> { <nl> ByteBuffer kbb = readValue ( input , version ) ; <nl> diff - - git a / src / java / org / apache / cassandra / serializers / SetSerializer . java b / src / java / org / apache / cassandra / serializers / SetSerializer . java <nl> index 21f5075 . . 4aaf36a 100644 <nl> - - - a / src / java / org / apache / cassandra / serializers / SetSerializer . java <nl> + + + b / src / java / org / apache / cassandra / serializers / SetSerializer . java <nl> @ @ - 81 , 7 + 81 , 16 @ @ public class SetSerializer < T > extends CollectionSerializer < Set < T > > <nl> { <nl> ByteBuffer input = bytes . duplicate ( ) ; <nl> int n = readCollectionSize ( input , version ) ; <nl> - Set < T > l = new LinkedHashSet < T > ( n ) ; <nl> + <nl> + if ( n < 0 ) <nl> + throw new MarshalException ( " The data cannot be deserialized as a set " ) ; <nl> + <nl> + / / If the received bytes are not corresponding to a set , n might be a huge number . <nl> + / / In such a case we do not want to initialize the set with that initialCapacity as it can result <nl> + / / in an OOM when add is called ( see CASSANDRA - 12618 ) . On the other hand we do not want to have to resize <nl> + / / the set if we can avoid it , so we put a reasonable limit on the initialCapacity . <nl> + Set < T > l = new LinkedHashSet < T > ( Math . min ( n , 256 ) ) ; <nl> + <nl> for ( int i = 0 ; i < n ; i + + ) <nl> { <nl> ByteBuffer databb = readValue ( input , version ) ; <nl> @ @ - 94 , 7 + 103 , 7 @ @ public class SetSerializer < T > extends CollectionSerializer < Set < T > > <nl> } <nl> catch ( BufferUnderflowException e ) <nl> { <nl> - throw new MarshalException ( " Not enough bytes to read a list " ) ; <nl> + throw new MarshalException ( " Not enough bytes to read a set " ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / serializers / UTF8Serializer . java b / src / java / org / apache / cassandra / serializers / UTF8Serializer . java <nl> index e3ea2d5 . . 7c41b94 100644 <nl> - - - a / src / java / org / apache / cassandra / serializers / UTF8Serializer . java <nl> + + + b / src / java / org / apache / cassandra / serializers / UTF8Serializer . java <nl> @ @ - 52 , 6 + 52 , 9 @ @ public class UTF8Serializer extends AbstractTextSerializer <nl> / / buf has already been sliced / duplicated . <nl> static boolean validate ( ByteBuffer buf ) <nl> { <nl> + if ( buf = = null ) <nl> + return false ; <nl> + <nl> buf = buf . slice ( ) ; <nl> int b = 0 ; <nl> State state = State . START ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java <nl> index 6266fe7 . . 115b755 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java <nl> @ @ - 607 , 4 + 607 , 45 @ @ public class CollectionsTest extends CQLTester <nl> assertRows ( execute ( " select s _ list from % s where k1 = ' a ' " ) , row ( list ( 0 ) ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testInvalidInputForList ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( pk int PRIMARY KEY , l list < text > ) " ) ; <nl> + assertInvalidMessage ( " Not enough bytes to read a list " , <nl> + " INSERT INTO % s ( pk , l ) VALUES ( ? , ? ) " , 1 , " test " ) ; <nl> + assertInvalidMessage ( " Not enough bytes to read a list " , <nl> + " INSERT INTO % s ( pk , l ) VALUES ( ? , ? ) " , 1 , Long . MAX _ VALUE ) ; <nl> + assertInvalidMessage ( " Not enough bytes to read a list " , <nl> + " INSERT INTO % s ( pk , l ) VALUES ( ? , ? ) " , 1 , " " ) ; <nl> + assertInvalidMessage ( " The data cannot be deserialized as a list " , <nl> + " INSERT INTO % s ( pk , l ) VALUES ( ? , ? ) " , 1 , - 1 ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testInvalidInputForSet ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( pk int PRIMARY KEY , s set < text > ) " ) ; <nl> + assertInvalidMessage ( " Not enough bytes to read a set " , <nl> + " INSERT INTO % s ( pk , s ) VALUES ( ? , ? ) " , 1 , " test " ) ; <nl> + assertInvalidMessage ( " String didn ' t validate . " , <nl> + " INSERT INTO % s ( pk , s ) VALUES ( ? , ? ) " , 1 , Long . MAX _ VALUE ) ; <nl> + assertInvalidMessage ( " Not enough bytes to read a set " , <nl> + " INSERT INTO % s ( pk , s ) VALUES ( ? , ? ) " , 1 , " " ) ; <nl> + assertInvalidMessage ( " The data cannot be deserialized as a set " , <nl> + " INSERT INTO % s ( pk , s ) VALUES ( ? , ? ) " , 1 , - 1 ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testInvalidInputForMap ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( pk int PRIMARY KEY , m map < text , text > ) " ) ; <nl> + assertInvalidMessage ( " Not enough bytes to read a map " , <nl> + " INSERT INTO % s ( pk , m ) VALUES ( ? , ? ) " , 1 , " test " ) ; <nl> + assertInvalidMessage ( " String didn ' t validate . " , <nl> + " INSERT INTO % s ( pk , m ) VALUES ( ? , ? ) " , 1 , Long . MAX _ VALUE ) ; <nl> + assertInvalidMessage ( " Not enough bytes to read a map " , <nl> + " INSERT INTO % s ( pk , m ) VALUES ( ? , ? ) " , 1 , " " ) ; <nl> + assertInvalidMessage ( " The data cannot be deserialized as a map " , <nl> + " INSERT INTO % s ( pk , m ) VALUES ( ? , ? ) " , 1 , - 1 ) ; <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / TupleTypeTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / TupleTypeTest . java <nl> index 0e7084f . . 0783dd1 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / TupleTypeTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / TupleTypeTest . java <nl> @ @ - 193 , 4 + 193 , 14 @ @ public class TupleTypeTest extends CQLTester <nl> row ( 0 , 0 , " b " ) , <nl> row ( 0 , 0 , " c " ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testInvalidInputForTuple ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( pk int PRIMARY KEY , t tuple < text , text > ) " ) ; <nl> + assertInvalidMessage ( " Not enough bytes to read 0th component " , <nl> + " INSERT INTO % s ( pk , t ) VALUES ( ? , ? ) " , 1 , " test " ) ; <nl> + assertInvalidMessage ( " Not enough bytes to read 0th component " , <nl> + " INSERT INTO % s ( pk , t ) VALUES ( ? , ? ) " , 1 , Long . MAX _ VALUE ) ; <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / UserTypesTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / UserTypesTest . java <nl> index cd87eda . . 3803e5c 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / UserTypesTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / UserTypesTest . java <nl> @ @ - 45 , 6 + 45 , 17 @ @ public class UserTypesTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> + public void testInvalidInputForUserType ( ) throws Throwable <nl> + { <nl> + String myType = createType ( " CREATE TYPE % s ( f int ) " ) ; <nl> + createTable ( " CREATE TABLE % s ( pk int PRIMARY KEY , t frozen < " + myType + " > ) " ) ; <nl> + assertInvalidMessage ( " Not enough bytes to read 0th field f " , <nl> + " INSERT INTO % s ( pk , t ) VALUES ( ? , ? ) " , 1 , " test " ) ; <nl> + assertInvalidMessage ( " Not enough bytes to read 0th field f " , <nl> + " INSERT INTO % s ( pk , t ) VALUES ( ? , ? ) " , 1 , Long . MAX _ VALUE ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testCassandra8105 ( ) throws Throwable <nl> { <nl> String ut1 = createType ( " CREATE TYPE % s ( a int , b int ) " ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 630ee2e . . 1f0f0e9 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 10 @ @ <nl> - 1 . 0 - dev <nl> + 1 . 1 - dev <nl> + <nl> + <nl> + 1 . 0 . 1 <nl> + <nl> + <nl> + 1 . 0 <nl> * removed binarymemtable ( CASSANDRA - 2692 ) <nl> * add commitlog _ total _ space _ in _ mb to prevent fragmented logs ( CASSANDRA - 2427 ) <nl> * removed commitlog _ rotation _ threshold _ in _ mb configuration ( CASSANDRA - 2771 )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index bc9fc5b . . 998849e 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 3 + 1 , 7 @ @ 
 + 2 . 2 . 9 
 + * Make Collections deserialization more robust ( CASSANDRA - 12618 ) 
 + 
 + 
 2 . 2 . 8 
 * Fix exceptions when enabling gossip on nodes that haven ' t joined the ring ( CASSANDRA - 12253 ) 
 * Fix authentication problem when invoking clqsh copy from a SOURCE command ( CASSANDRA - 12642 ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / UserType . java b / src / java / org / apache / cassandra / db / marshal / UserType . java 
 index 6102d26 . . 187deeb 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / UserType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / UserType . java 
 @ @ - 19 , 7 + 19 , 6 @ @ package org . apache . cassandra . db . marshal ; 
 
 import java . nio . ByteBuffer ; 
 import java . nio . charset . CharacterCodingException ; 
 - import java . nio . charset . Charset ; 
 import java . nio . charset . StandardCharsets ; 
 import java . util . * ; 
 
 @ @ - 28 , 8 + 27 , 7 @ @ import com . google . common . base . Objects ; 
 import org . apache . cassandra . cql3 . * ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . exceptions . SyntaxException ; 
 - import org . apache . cassandra . serializers . * ; 
 - import org . apache . cassandra . transport . Server ; 
 + import org . apache . cassandra . serializers . MarshalException ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . Pair ; 
 
 @ @ - 123 , 7 + 121 , 7 @ @ public class UserType extends TupleType 
 return ; 
 
 if ( input . remaining ( ) < 4 ) 
 - throw new MarshalException ( String . format ( " Not enough bytes to read size of % dth field % s " , i , fieldName ( i ) ) ) ; 
 + throw new MarshalException ( String . format ( " Not enough bytes to read size of % dth field % s " , i , fieldNameAsString ( i ) ) ) ; 
 
 int size = input . getInt ( ) ; 
 
 @ @ - 132 , 7 + 130 , 7 @ @ public class UserType extends TupleType 
 continue ; 
 
 if ( input . remaining ( ) < size ) 
 - throw new MarshalException ( String . format ( " Not enough bytes to read % dth field % s " , i , fieldName ( i ) ) ) ; 
 + throw new MarshalException ( String . format ( " Not enough bytes to read % dth field % s " , i , fieldNameAsString ( i ) ) ) ; 
 
 ByteBuffer field = ByteBufferUtil . readBytes ( input , size ) ; 
 types . get ( i ) . validate ( field ) ; 
 diff - - git a / src / java / org / apache / cassandra / serializers / ListSerializer . java b / src / java / org / apache / cassandra / serializers / ListSerializer . java 
 index aeee2b9 . . d2d0610 100644 
 - - - a / src / java / org / apache / cassandra / serializers / ListSerializer . java 
 + + + b / src / java / org / apache / cassandra / serializers / ListSerializer . java 
 @ @ - 84 , 7 + 84 , 15 @ @ public class ListSerializer < T > extends CollectionSerializer < List < T > > 
 { 
 ByteBuffer input = bytes . duplicate ( ) ; 
 int n = readCollectionSize ( input , version ) ; 
 - List < T > l = new ArrayList < T > ( n ) ; 
 + 
 + if ( n < 0 ) 
 + throw new MarshalException ( " The data cannot be deserialized as a list " ) ; 
 + 
 + / / If the received bytes are not corresponding to a list , n might be a huge number . 
 + / / In such a case we do not want to initialize the list with that size as it can result 
 + / / in an OOM ( see CASSANDRA - 12618 ) . On the other hand we do not want to have to resize the list 
 + / / if we can avoid it , so we put a reasonable limit on the initialCapacity . 
 + List < T > l = new ArrayList < T > ( Math . min ( n , 256 ) ) ; 
 for ( int i = 0 ; i < n ; i + + ) 
 { 
 / / We can have nulls in lists that are used for IN values 
 diff - - git a / src / java / org / apache / cassandra / serializers / MapSerializer . java b / src / java / org / apache / cassandra / serializers / MapSerializer . java 
 index 8350f66 . . 66831a3 100644 
 - - - a / src / java / org / apache / cassandra / serializers / MapSerializer . java 
 + + + b / src / java / org / apache / cassandra / serializers / MapSerializer . java 
 @ @ - 94 , 7 + 94 , 15 @ @ public class MapSerializer < K , V > extends CollectionSerializer < Map < K , V > > 
 { 
 ByteBuffer input = bytes . duplicate ( ) ; 
 int n = readCollectionSize ( input , version ) ; 
 - Map < K , V > m = new LinkedHashMap < K , V > ( n ) ; 
 + 
 + if ( n < 0 ) 
 + throw new MarshalException ( " The data cannot be deserialized as a map " ) ; 
 + 
 + / / If the received bytes are not corresponding to a map , n might be a huge number . 
 + / / In such a case we do not want to initialize the map with that initialCapacity as it can result 
 + / / in an OOM when put is called ( see CASSANDRA - 12618 ) . On the other hand we do not want to have to resize 
 + / / the map if we can avoid it , so we put a reasonable limit on the initialCapacity . 
 + Map < K , V > m = new LinkedHashMap < K , V > ( Math . min ( n , 256 ) ) ; 
 for ( int i = 0 ; i < n ; i + + ) 
 { 
 ByteBuffer kbb = readValue ( input , version ) ; 
 diff - - git a / src / java / org / apache / cassandra / serializers / SetSerializer . java b / src / java / org / apache / cassandra / serializers / SetSerializer . java 
 index 21f5075 . . 4aaf36a 100644 
 - - - a / src / java / org / apache / cassandra / serializers / SetSerializer . java 
 + + + b / src / java / org / apache / cassandra / serializers / SetSerializer . java 
 @ @ - 81 , 7 + 81 , 16 @ @ public class SetSerializer < T > extends CollectionSerializer < Set < T > > 
 { 
 ByteBuffer input = bytes . duplicate ( ) ; 
 int n = readCollectionSize ( input , version ) ; 
 - Set < T > l = new LinkedHashSet < T > ( n ) ; 
 + 
 + if ( n < 0 ) 
 + throw new MarshalException ( " The data cannot be deserialized as a set " ) ; 
 + 
 + / / If the received bytes are not corresponding to a set , n might be a huge number . 
 + / / In such a case we do not want to initialize the set with that initialCapacity as it can result 
 + / / in an OOM when add is called ( see CASSANDRA - 12618 ) . On the other hand we do not want to have to resize 
 + / / the set if we can avoid it , so we put a reasonable limit on the initialCapacity . 
 + Set < T > l = new LinkedHashSet < T > ( Math . min ( n , 256 ) ) ; 
 + 
 for ( int i = 0 ; i < n ; i + + ) 
 { 
 ByteBuffer databb = readValue ( input , version ) ; 
 @ @ - 94 , 7 + 103 , 7 @ @ public class SetSerializer < T > extends CollectionSerializer < Set < T > > 
 } 
 catch ( BufferUnderflowException e ) 
 { 
 - throw new MarshalException ( " Not enough bytes to read a list " ) ; 
 + throw new MarshalException ( " Not enough bytes to read a set " ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / serializers / UTF8Serializer . java b / src / java / org / apache / cassandra / serializers / UTF8Serializer . java 
 index e3ea2d5 . . 7c41b94 100644 
 - - - a / src / java / org / apache / cassandra / serializers / UTF8Serializer . java 
 + + + b / src / java / org / apache / cassandra / serializers / UTF8Serializer . java 
 @ @ - 52 , 6 + 52 , 9 @ @ public class UTF8Serializer extends AbstractTextSerializer 
 / / buf has already been sliced / duplicated . 
 static boolean validate ( ByteBuffer buf ) 
 { 
 + if ( buf = = null ) 
 + return false ; 
 + 
 buf = buf . slice ( ) ; 
 int b = 0 ; 
 State state = State . START ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java 
 index 6266fe7 . . 115b755 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java 
 @ @ - 607 , 4 + 607 , 45 @ @ public class CollectionsTest extends CQLTester 
 assertRows ( execute ( " select s _ list from % s where k1 = ' a ' " ) , row ( list ( 0 ) ) ) ; 
 } 
 
 + @ Test 
 + public void testInvalidInputForList ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( pk int PRIMARY KEY , l list < text > ) " ) ; 
 + assertInvalidMessage ( " Not enough bytes to read a list " , 
 + " INSERT INTO % s ( pk , l ) VALUES ( ? , ? ) " , 1 , " test " ) ; 
 + assertInvalidMessage ( " Not enough bytes to read a list " , 
 + " INSERT INTO % s ( pk , l ) VALUES ( ? , ? ) " , 1 , Long . MAX _ VALUE ) ; 
 + assertInvalidMessage ( " Not enough bytes to read a list " , 
 + " INSERT INTO % s ( pk , l ) VALUES ( ? , ? ) " , 1 , " " ) ; 
 + assertInvalidMessage ( " The data cannot be deserialized as a list " , 
 + " INSERT INTO % s ( pk , l ) VALUES ( ? , ? ) " , 1 , - 1 ) ; 
 + } 
 + 
 + @ Test 
 + public void testInvalidInputForSet ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( pk int PRIMARY KEY , s set < text > ) " ) ; 
 + assertInvalidMessage ( " Not enough bytes to read a set " , 
 + " INSERT INTO % s ( pk , s ) VALUES ( ? , ? ) " , 1 , " test " ) ; 
 + assertInvalidMessage ( " String didn ' t validate . " , 
 + " INSERT INTO % s ( pk , s ) VALUES ( ? , ? ) " , 1 , Long . MAX _ VALUE ) ; 
 + assertInvalidMessage ( " Not enough bytes to read a set " , 
 + " INSERT INTO % s ( pk , s ) VALUES ( ? , ? ) " , 1 , " " ) ; 
 + assertInvalidMessage ( " The data cannot be deserialized as a set " , 
 + " INSERT INTO % s ( pk , s ) VALUES ( ? , ? ) " , 1 , - 1 ) ; 
 + } 
 + 
 + @ Test 
 + public void testInvalidInputForMap ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( pk int PRIMARY KEY , m map < text , text > ) " ) ; 
 + assertInvalidMessage ( " Not enough bytes to read a map " , 
 + " INSERT INTO % s ( pk , m ) VALUES ( ? , ? ) " , 1 , " test " ) ; 
 + assertInvalidMessage ( " String didn ' t validate . " , 
 + " INSERT INTO % s ( pk , m ) VALUES ( ? , ? ) " , 1 , Long . MAX _ VALUE ) ; 
 + assertInvalidMessage ( " Not enough bytes to read a map " , 
 + " INSERT INTO % s ( pk , m ) VALUES ( ? , ? ) " , 1 , " " ) ; 
 + assertInvalidMessage ( " The data cannot be deserialized as a map " , 
 + " INSERT INTO % s ( pk , m ) VALUES ( ? , ? ) " , 1 , - 1 ) ; 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / TupleTypeTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / TupleTypeTest . java 
 index 0e7084f . . 0783dd1 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / TupleTypeTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / TupleTypeTest . java 
 @ @ - 193 , 4 + 193 , 14 @ @ public class TupleTypeTest extends CQLTester 
 row ( 0 , 0 , " b " ) , 
 row ( 0 , 0 , " c " ) ) ; 
 } 
 + 
 + @ Test 
 + public void testInvalidInputForTuple ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( pk int PRIMARY KEY , t tuple < text , text > ) " ) ; 
 + assertInvalidMessage ( " Not enough bytes to read 0th component " , 
 + " INSERT INTO % s ( pk , t ) VALUES ( ? , ? ) " , 1 , " test " ) ; 
 + assertInvalidMessage ( " Not enough bytes to read 0th component " , 
 + " INSERT INTO % s ( pk , t ) VALUES ( ? , ? ) " , 1 , Long . MAX _ VALUE ) ; 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / UserTypesTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / UserTypesTest . java 
 index cd87eda . . 3803e5c 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / UserTypesTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / UserTypesTest . java 
 @ @ - 45 , 6 + 45 , 17 @ @ public class UserTypesTest extends CQLTester 
 } 
 
 @ Test 
 + public void testInvalidInputForUserType ( ) throws Throwable 
 + { 
 + String myType = createType ( " CREATE TYPE % s ( f int ) " ) ; 
 + createTable ( " CREATE TABLE % s ( pk int PRIMARY KEY , t frozen < " + myType + " > ) " ) ; 
 + assertInvalidMessage ( " Not enough bytes to read 0th field f " , 
 + " INSERT INTO % s ( pk , t ) VALUES ( ? , ? ) " , 1 , " test " ) ; 
 + assertInvalidMessage ( " Not enough bytes to read 0th field f " , 
 + " INSERT INTO % s ( pk , t ) VALUES ( ? , ? ) " , 1 , Long . MAX _ VALUE ) ; 
 + } 
 + 
 + @ Test 
 public void testCassandra8105 ( ) throws Throwable 
 { 
 String ut1 = createType ( " CREATE TYPE % s ( a int , b int ) " ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 630ee2e . . 1f0f0e9 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 10 @ @ 
 - 1 . 0 - dev 
 + 1 . 1 - dev 
 + 
 + 
 + 1 . 0 . 1 
 + 
 + 
 + 1 . 0 
 * removed binarymemtable ( CASSANDRA - 2692 ) 
 * add commitlog _ total _ space _ in _ mb to prevent fragmented logs ( CASSANDRA - 2427 ) 
 * removed commitlog _ rotation _ threshold _ in _ mb configuration ( CASSANDRA - 2771 )
