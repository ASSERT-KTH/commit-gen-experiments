BLEU SCORE: 0.041961149062965476

TEST MSG: Switch from yammer metrics for nodetool cf / proxy histograms
GENERATED MSG: merge from 1 . 2

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index ad9cb94 . . 474bfbe 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 3 <nl> + * Switch from yammer metrics for nodetool cf / proxy histograms ( CASSANDRA - 8662 ) <nl> * Make sure we don ' t add tmplink files to the compaction <nl> strategy ( CASSANDRA - 8580 ) <nl> * ( cqlsh ) Handle maps with blob keys ( CASSANDRA - 8372 ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index 67cc7f1 . . 155236f 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 19 , 10 + 19 , 7 @ @ package org . apache . cassandra . tools ; <nl> <nl> import java . io . IOException ; <nl> import java . io . PrintStream ; <nl> - import java . lang . management . ManagementFactory ; <nl> - import java . lang . management . MemoryMXBean ; <nl> - import java . lang . management . MemoryUsage ; <nl> - import java . lang . management . RuntimeMXBean ; <nl> + import java . lang . management . * ; <nl> import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> import java . text . SimpleDateFormat ; <nl> @ @ - 30 , 23 + 27 , 13 @ @ import java . util . * ; <nl> import java . util . Map . Entry ; <nl> import java . util . concurrent . * ; <nl> import java . util . concurrent . locks . Condition ; <nl> + <nl> import javax . management . * ; <nl> - import javax . management . openmbean . CompositeData ; <nl> - import javax . management . remote . JMXConnectionNotification ; <nl> - import javax . management . remote . JMXConnector ; <nl> - import javax . management . remote . JMXConnectorFactory ; <nl> - import javax . management . remote . JMXServiceURL ; <nl> import javax . management . openmbean . * ; <nl> + import javax . management . remote . * ; <nl> <nl> - import com . google . common . base . Function ; <nl> - import com . google . common . collect . * ; <nl> - import com . google . common . util . concurrent . Uninterruptibles ; <nl> - <nl> - import com . yammer . metrics . reporting . JmxReporter ; <nl> import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutorMBean ; <nl> - import org . apache . cassandra . db . ColumnFamilyStoreMBean ; <nl> - import org . apache . cassandra . db . HintedHandOffManager ; <nl> - import org . apache . cassandra . db . HintedHandOffManagerMBean ; <nl> + import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . db . compaction . CompactionManagerMBean ; <nl> import org . apache . cassandra . gms . FailureDetector ; <nl> @ @ - 57 , 11 + 44 , 17 @ @ import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . net . MessagingServiceMBean ; <nl> import org . apache . cassandra . repair . RepairParallelism ; <nl> import org . apache . cassandra . service . * ; <nl> - import org . apache . cassandra . streaming . StreamState ; <nl> import org . apache . cassandra . streaming . StreamManagerMBean ; <nl> + import org . apache . cassandra . streaming . StreamState ; <nl> import org . apache . cassandra . streaming . management . StreamStateCompositeData ; <nl> - import org . apache . cassandra . utils . concurrent . SimpleCondition ; <nl> + import org . apache . cassandra . utils . EstimatedHistogram ; <nl> import org . apache . cassandra . utils . JVMStabilityInspector ; <nl> + import org . apache . cassandra . utils . concurrent . SimpleCondition ; <nl> + <nl> + import com . google . common . base . Function ; <nl> + import com . google . common . collect . * ; <nl> + import com . google . common . util . concurrent . Uninterruptibles ; <nl> + import com . yammer . metrics . reporting . JmxReporter ; <nl> <nl> / * * <nl> * JMX client operations for Cassandra . <nl> @ @ - 1157 , 15 + 1150 , 28 @ @ public class NodeProbe implements AutoCloseable <nl> } <nl> } <nl> <nl> - public double [ ] metricPercentilesAsArray ( JmxReporter . HistogramMBean metric ) <nl> + public double [ ] metricPercentilesAsArray ( long [ ] counts ) <nl> { <nl> - return new double [ ] { metric . get50thPercentile ( ) , <nl> - metric . get75thPercentile ( ) , <nl> - metric . get95thPercentile ( ) , <nl> - metric . get98thPercentile ( ) , <nl> - metric . get99thPercentile ( ) , <nl> - metric . getMin ( ) , <nl> - metric . getMax ( ) } ; <nl> + double [ ] offsetPercentiles = new double [ ] { 0 . 5 , 0 . 75 , 0 . 95 , 0 . 98 , 0 . 99 } ; <nl> + long [ ] offsets = new EstimatedHistogram ( counts . length ) . getBucketOffsets ( ) ; <nl> + EstimatedHistogram metric = new EstimatedHistogram ( offsets , counts ) ; <nl> + double [ ] result = new double [ 7 ] ; <nl> + <nl> + if ( metric . isOverflowed ( ) ) <nl> + { <nl> + System . err . println ( String . format ( " EstimatedHistogram overflowed larger than % s , unable to calculate percentiles " , <nl> + offsets [ offsets . length - 1 ] ) ) ; <nl> + for ( int i = 0 ; i < result . length ; i + + ) <nl> + result [ i ] = Double . NaN ; <nl> + } <nl> + else <nl> + { <nl> + for ( int i = 0 ; i < offsetPercentiles . length ; i + + ) <nl> + result [ i ] = metric . percentile ( offsetPercentiles [ i ] ) ; <nl> + } <nl> + result [ 5 ] = metric . min ( ) ; <nl> + result [ 6 ] = metric . max ( ) ; <nl> + return result ; <nl> } <nl> <nl> public TabularData getCompactionHistory ( ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeTool . java b / src / java / org / apache / cassandra / tools / NodeTool . java <nl> index 12496fc . . 8de4fff 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeTool . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeTool . java <nl> @ @ - 37 , 22 + 37 , 20 @ @ import com . yammer . metrics . reporting . JmxReporter ; <nl> import io . airlift . command . * ; <nl> <nl> import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutorMBean ; <nl> - import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . db . ColumnFamilyStoreMBean ; <nl> import org . apache . cassandra . db . Keyspace ; <nl> import org . apache . cassandra . db . compaction . CompactionManagerMBean ; <nl> import org . apache . cassandra . db . compaction . OperationType ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . locator . EndpointSnitchInfoMBean ; <nl> - import org . apache . cassandra . locator . LocalStrategy ; <nl> import org . apache . cassandra . metrics . ColumnFamilyMetrics . Sampler ; <nl> import org . apache . cassandra . net . MessagingServiceMBean ; <nl> import org . apache . cassandra . repair . RepairParallelism ; <nl> import org . apache . cassandra . service . CacheServiceMBean ; <nl> + import org . apache . cassandra . service . StorageProxyMBean ; <nl> import org . apache . cassandra . streaming . ProgressInfo ; <nl> import org . apache . cassandra . streaming . SessionInfo ; <nl> import org . apache . cassandra . streaming . StreamState ; <nl> - import org . apache . cassandra . utils . EstimatedHistogram ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . JVMStabilityInspector ; <nl> <nl> @ @ - 1014 , 55 + 1012 , 15 @ @ public class NodeTool <nl> String keyspace = args . get ( 0 ) ; <nl> String cfname = args . get ( 1 ) ; <nl> <nl> - / / calculate percentile of row size and column count <nl> - long [ ] estimatedRowSize = ( long [ ] ) probe . getColumnFamilyMetric ( keyspace , cfname , " EstimatedRowSizeHistogram " ) ; <nl> - long [ ] estimatedColumnCount = ( long [ ] ) probe . getColumnFamilyMetric ( keyspace , cfname , " EstimatedColumnCountHistogram " ) ; <nl> - <nl> - long [ ] rowSizeBucketOffsets = new EstimatedHistogram ( estimatedRowSize . length ) . getBucketOffsets ( ) ; <nl> - long [ ] columnCountBucketOffsets = new EstimatedHistogram ( estimatedColumnCount . length ) . getBucketOffsets ( ) ; <nl> - EstimatedHistogram rowSizeHist = new EstimatedHistogram ( rowSizeBucketOffsets , estimatedRowSize ) ; <nl> - EstimatedHistogram columnCountHist = new EstimatedHistogram ( columnCountBucketOffsets , estimatedColumnCount ) ; <nl> - <nl> - / / build arrays to store percentile values <nl> - double [ ] estimatedRowSizePercentiles = new double [ 7 ] ; <nl> - double [ ] estimatedColumnCountPercentiles = new double [ 7 ] ; <nl> - double [ ] offsetPercentiles = new double [ ] { 0 . 5 , 0 . 75 , 0 . 95 , 0 . 98 , 0 . 99 } ; <nl> - <nl> - if ( rowSizeHist . isOverflowed ( ) ) <nl> - { <nl> - System . err . println ( String . format ( " Row sizes are larger than % s , unable to calculate percentiles " , rowSizeBucketOffsets [ rowSizeBucketOffsets . length - 1 ] ) ) ; <nl> - for ( int i = 0 ; i < offsetPercentiles . length ; i + + ) <nl> - estimatedRowSizePercentiles [ i ] = Double . NaN ; <nl> - } <nl> - else <nl> - { <nl> - for ( int i = 0 ; i < offsetPercentiles . length ; i + + ) <nl> - estimatedRowSizePercentiles [ i ] = rowSizeHist . percentile ( offsetPercentiles [ i ] ) ; <nl> - } <nl> - <nl> - if ( columnCountHist . isOverflowed ( ) ) <nl> - { <nl> - System . err . println ( String . format ( " Column counts are larger than % s , unable to calculate percentiles " , columnCountBucketOffsets [ columnCountBucketOffsets . length - 1 ] ) ) ; <nl> - for ( int i = 0 ; i < estimatedColumnCountPercentiles . length ; i + + ) <nl> - estimatedColumnCountPercentiles [ i ] = Double . NaN ; <nl> - } <nl> - else <nl> - { <nl> - for ( int i = 0 ; i < offsetPercentiles . length ; i + + ) <nl> - estimatedColumnCountPercentiles [ i ] = columnCountHist . percentile ( offsetPercentiles [ i ] ) ; <nl> - } <nl> - <nl> - / / min value <nl> - estimatedRowSizePercentiles [ 5 ] = rowSizeHist . min ( ) ; <nl> - estimatedColumnCountPercentiles [ 5 ] = columnCountHist . min ( ) ; <nl> - / / max value <nl> - estimatedRowSizePercentiles [ 6 ] = rowSizeHist . max ( ) ; <nl> - estimatedColumnCountPercentiles [ 6 ] = columnCountHist . max ( ) ; <nl> + ColumnFamilyStoreMBean store = probe . getCfsProxy ( keyspace , cfname ) ; <nl> <nl> + / / calculate percentile of row size and column count <nl> String [ ] percentiles = new String [ ] { " 50 % " , " 75 % " , " 95 % " , " 98 % " , " 99 % " , " Min " , " Max " } ; <nl> - double [ ] readLatency = probe . metricPercentilesAsArray ( ( JmxReporter . HistogramMBean ) probe . getColumnFamilyMetric ( keyspace , cfname , " ReadLatency " ) ) ; <nl> - double [ ] writeLatency = probe . metricPercentilesAsArray ( ( JmxReporter . TimerMBean ) probe . getColumnFamilyMetric ( keyspace , cfname , " WriteLatency " ) ) ; <nl> - double [ ] sstablesPerRead = probe . metricPercentilesAsArray ( ( JmxReporter . HistogramMBean ) probe . getColumnFamilyMetric ( keyspace , cfname , " SSTablesPerReadHistogram " ) ) ; <nl> + double [ ] readLatency = probe . metricPercentilesAsArray ( store . getRecentReadLatencyHistogramMicros ( ) ) ; <nl> + double [ ] writeLatency = probe . metricPercentilesAsArray ( store . getRecentWriteLatencyHistogramMicros ( ) ) ; <nl> + double [ ] estimatedRowSizePercentiles = probe . metricPercentilesAsArray ( store . getEstimatedRowSizeHistogram ( ) ) ; <nl> + double [ ] estimatedColumnCountPercentiles = probe . metricPercentilesAsArray ( store . getEstimatedColumnCountHistogram ( ) ) ; <nl> + double [ ] sstablesPerRead = probe . metricPercentilesAsArray ( store . getRecentSSTablesPerReadHistogram ( ) ) ; <nl> <nl> System . out . println ( format ( " % s / % s histograms " , keyspace , cfname ) ) ; <nl> System . out . println ( format ( " % - 10s % 10s % 18s % 18s % 18s % 18s " , <nl> @ @ - 1704 , 10 + 1662 , 11 @ @ public class NodeTool <nl> @ Override <nl> public void execute ( NodeProbe probe ) <nl> { <nl> + StorageProxyMBean sp = probe . getSpProxy ( ) ; <nl> String [ ] percentiles = new String [ ] { " 50 % " , " 75 % " , " 95 % " , " 98 % " , " 99 % " , " Min " , " Max " } ; <nl> - double [ ] readLatency = probe . metricPercentilesAsArray ( probe . getProxyMetric ( " Read " ) ) ; <nl> - double [ ] writeLatency = probe . metricPercentilesAsArray ( probe . getProxyMetric ( " Write " ) ) ; <nl> - double [ ] rangeLatency = probe . metricPercentilesAsArray ( probe . getProxyMetric ( " RangeSlice " ) ) ; <nl> + double [ ] readLatency = probe . metricPercentilesAsArray ( sp . getRecentReadLatencyHistogramMicros ( ) ) ; <nl> + double [ ] writeLatency = probe . metricPercentilesAsArray ( sp . getRecentWriteLatencyHistogramMicros ( ) ) ; <nl> + double [ ] rangeLatency = probe . metricPercentilesAsArray ( sp . getRecentRangeLatencyHistogramMicros ( ) ) ; <nl> <nl> System . out . println ( " proxy histograms " ) ; <nl> System . out . println ( format ( " % - 10s % 18s % 18s % 18s " ,
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b935425 . . 7f5a487 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 2 - rc1 <nl> + * fix cqlsh rendering of blob fields ( CASSANDRA - 4970 ) <nl> * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) <nl> * save truncation position in system table ( CASSANDRA - 4906 ) <nl> * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) <nl> diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py <nl> index d15c083 . . bab3506 100644 <nl> - - - a / pylib / cqlshlib / formatting . py <nl> + + + b / pylib / cqlshlib / formatting . py <nl> @ @ - 88 , 8 + 88 , 8 @ @ def formatter _ for ( typname ) : <nl> return f <nl> return registrator <nl> <nl> - @ formatter _ for ( ' bytes ' ) <nl> - def format _ value _ bytes ( val , colormap , * * _ ) : <nl> + @ formatter _ for ( ' blob ' ) <nl> + def format _ value _ blob ( val , colormap , * * _ ) : <nl> bval = ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) <nl> return colorme ( bval , colormap , ' hex ' ) <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index ad9cb94 . . 474bfbe 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 3 
 + * Switch from yammer metrics for nodetool cf / proxy histograms ( CASSANDRA - 8662 ) 
 * Make sure we don ' t add tmplink files to the compaction 
 strategy ( CASSANDRA - 8580 ) 
 * ( cqlsh ) Handle maps with blob keys ( CASSANDRA - 8372 ) 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index 67cc7f1 . . 155236f 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 19 , 10 + 19 , 7 @ @ package org . apache . cassandra . tools ; 
 
 import java . io . IOException ; 
 import java . io . PrintStream ; 
 - import java . lang . management . ManagementFactory ; 
 - import java . lang . management . MemoryMXBean ; 
 - import java . lang . management . MemoryUsage ; 
 - import java . lang . management . RuntimeMXBean ; 
 + import java . lang . management . * ; 
 import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 import java . text . SimpleDateFormat ; 
 @ @ - 30 , 23 + 27 , 13 @ @ import java . util . * ; 
 import java . util . Map . Entry ; 
 import java . util . concurrent . * ; 
 import java . util . concurrent . locks . Condition ; 
 + 
 import javax . management . * ; 
 - import javax . management . openmbean . CompositeData ; 
 - import javax . management . remote . JMXConnectionNotification ; 
 - import javax . management . remote . JMXConnector ; 
 - import javax . management . remote . JMXConnectorFactory ; 
 - import javax . management . remote . JMXServiceURL ; 
 import javax . management . openmbean . * ; 
 + import javax . management . remote . * ; 
 
 - import com . google . common . base . Function ; 
 - import com . google . common . collect . * ; 
 - import com . google . common . util . concurrent . Uninterruptibles ; 
 - 
 - import com . yammer . metrics . reporting . JmxReporter ; 
 import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutorMBean ; 
 - import org . apache . cassandra . db . ColumnFamilyStoreMBean ; 
 - import org . apache . cassandra . db . HintedHandOffManager ; 
 - import org . apache . cassandra . db . HintedHandOffManagerMBean ; 
 + import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . db . compaction . CompactionManagerMBean ; 
 import org . apache . cassandra . gms . FailureDetector ; 
 @ @ - 57 , 11 + 44 , 17 @ @ import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . net . MessagingServiceMBean ; 
 import org . apache . cassandra . repair . RepairParallelism ; 
 import org . apache . cassandra . service . * ; 
 - import org . apache . cassandra . streaming . StreamState ; 
 import org . apache . cassandra . streaming . StreamManagerMBean ; 
 + import org . apache . cassandra . streaming . StreamState ; 
 import org . apache . cassandra . streaming . management . StreamStateCompositeData ; 
 - import org . apache . cassandra . utils . concurrent . SimpleCondition ; 
 + import org . apache . cassandra . utils . EstimatedHistogram ; 
 import org . apache . cassandra . utils . JVMStabilityInspector ; 
 + import org . apache . cassandra . utils . concurrent . SimpleCondition ; 
 + 
 + import com . google . common . base . Function ; 
 + import com . google . common . collect . * ; 
 + import com . google . common . util . concurrent . Uninterruptibles ; 
 + import com . yammer . metrics . reporting . JmxReporter ; 
 
 / * * 
 * JMX client operations for Cassandra . 
 @ @ - 1157 , 15 + 1150 , 28 @ @ public class NodeProbe implements AutoCloseable 
 } 
 } 
 
 - public double [ ] metricPercentilesAsArray ( JmxReporter . HistogramMBean metric ) 
 + public double [ ] metricPercentilesAsArray ( long [ ] counts ) 
 { 
 - return new double [ ] { metric . get50thPercentile ( ) , 
 - metric . get75thPercentile ( ) , 
 - metric . get95thPercentile ( ) , 
 - metric . get98thPercentile ( ) , 
 - metric . get99thPercentile ( ) , 
 - metric . getMin ( ) , 
 - metric . getMax ( ) } ; 
 + double [ ] offsetPercentiles = new double [ ] { 0 . 5 , 0 . 75 , 0 . 95 , 0 . 98 , 0 . 99 } ; 
 + long [ ] offsets = new EstimatedHistogram ( counts . length ) . getBucketOffsets ( ) ; 
 + EstimatedHistogram metric = new EstimatedHistogram ( offsets , counts ) ; 
 + double [ ] result = new double [ 7 ] ; 
 + 
 + if ( metric . isOverflowed ( ) ) 
 + { 
 + System . err . println ( String . format ( " EstimatedHistogram overflowed larger than % s , unable to calculate percentiles " , 
 + offsets [ offsets . length - 1 ] ) ) ; 
 + for ( int i = 0 ; i < result . length ; i + + ) 
 + result [ i ] = Double . NaN ; 
 + } 
 + else 
 + { 
 + for ( int i = 0 ; i < offsetPercentiles . length ; i + + ) 
 + result [ i ] = metric . percentile ( offsetPercentiles [ i ] ) ; 
 + } 
 + result [ 5 ] = metric . min ( ) ; 
 + result [ 6 ] = metric . max ( ) ; 
 + return result ; 
 } 
 
 public TabularData getCompactionHistory ( ) 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeTool . java b / src / java / org / apache / cassandra / tools / NodeTool . java 
 index 12496fc . . 8de4fff 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeTool . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeTool . java 
 @ @ - 37 , 22 + 37 , 20 @ @ import com . yammer . metrics . reporting . JmxReporter ; 
 import io . airlift . command . * ; 
 
 import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutorMBean ; 
 - import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . db . ColumnFamilyStoreMBean ; 
 import org . apache . cassandra . db . Keyspace ; 
 import org . apache . cassandra . db . compaction . CompactionManagerMBean ; 
 import org . apache . cassandra . db . compaction . OperationType ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . locator . EndpointSnitchInfoMBean ; 
 - import org . apache . cassandra . locator . LocalStrategy ; 
 import org . apache . cassandra . metrics . ColumnFamilyMetrics . Sampler ; 
 import org . apache . cassandra . net . MessagingServiceMBean ; 
 import org . apache . cassandra . repair . RepairParallelism ; 
 import org . apache . cassandra . service . CacheServiceMBean ; 
 + import org . apache . cassandra . service . StorageProxyMBean ; 
 import org . apache . cassandra . streaming . ProgressInfo ; 
 import org . apache . cassandra . streaming . SessionInfo ; 
 import org . apache . cassandra . streaming . StreamState ; 
 - import org . apache . cassandra . utils . EstimatedHistogram ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . JVMStabilityInspector ; 
 
 @ @ - 1014 , 55 + 1012 , 15 @ @ public class NodeTool 
 String keyspace = args . get ( 0 ) ; 
 String cfname = args . get ( 1 ) ; 
 
 - / / calculate percentile of row size and column count 
 - long [ ] estimatedRowSize = ( long [ ] ) probe . getColumnFamilyMetric ( keyspace , cfname , " EstimatedRowSizeHistogram " ) ; 
 - long [ ] estimatedColumnCount = ( long [ ] ) probe . getColumnFamilyMetric ( keyspace , cfname , " EstimatedColumnCountHistogram " ) ; 
 - 
 - long [ ] rowSizeBucketOffsets = new EstimatedHistogram ( estimatedRowSize . length ) . getBucketOffsets ( ) ; 
 - long [ ] columnCountBucketOffsets = new EstimatedHistogram ( estimatedColumnCount . length ) . getBucketOffsets ( ) ; 
 - EstimatedHistogram rowSizeHist = new EstimatedHistogram ( rowSizeBucketOffsets , estimatedRowSize ) ; 
 - EstimatedHistogram columnCountHist = new EstimatedHistogram ( columnCountBucketOffsets , estimatedColumnCount ) ; 
 - 
 - / / build arrays to store percentile values 
 - double [ ] estimatedRowSizePercentiles = new double [ 7 ] ; 
 - double [ ] estimatedColumnCountPercentiles = new double [ 7 ] ; 
 - double [ ] offsetPercentiles = new double [ ] { 0 . 5 , 0 . 75 , 0 . 95 , 0 . 98 , 0 . 99 } ; 
 - 
 - if ( rowSizeHist . isOverflowed ( ) ) 
 - { 
 - System . err . println ( String . format ( " Row sizes are larger than % s , unable to calculate percentiles " , rowSizeBucketOffsets [ rowSizeBucketOffsets . length - 1 ] ) ) ; 
 - for ( int i = 0 ; i < offsetPercentiles . length ; i + + ) 
 - estimatedRowSizePercentiles [ i ] = Double . NaN ; 
 - } 
 - else 
 - { 
 - for ( int i = 0 ; i < offsetPercentiles . length ; i + + ) 
 - estimatedRowSizePercentiles [ i ] = rowSizeHist . percentile ( offsetPercentiles [ i ] ) ; 
 - } 
 - 
 - if ( columnCountHist . isOverflowed ( ) ) 
 - { 
 - System . err . println ( String . format ( " Column counts are larger than % s , unable to calculate percentiles " , columnCountBucketOffsets [ columnCountBucketOffsets . length - 1 ] ) ) ; 
 - for ( int i = 0 ; i < estimatedColumnCountPercentiles . length ; i + + ) 
 - estimatedColumnCountPercentiles [ i ] = Double . NaN ; 
 - } 
 - else 
 - { 
 - for ( int i = 0 ; i < offsetPercentiles . length ; i + + ) 
 - estimatedColumnCountPercentiles [ i ] = columnCountHist . percentile ( offsetPercentiles [ i ] ) ; 
 - } 
 - 
 - / / min value 
 - estimatedRowSizePercentiles [ 5 ] = rowSizeHist . min ( ) ; 
 - estimatedColumnCountPercentiles [ 5 ] = columnCountHist . min ( ) ; 
 - / / max value 
 - estimatedRowSizePercentiles [ 6 ] = rowSizeHist . max ( ) ; 
 - estimatedColumnCountPercentiles [ 6 ] = columnCountHist . max ( ) ; 
 + ColumnFamilyStoreMBean store = probe . getCfsProxy ( keyspace , cfname ) ; 
 
 + / / calculate percentile of row size and column count 
 String [ ] percentiles = new String [ ] { " 50 % " , " 75 % " , " 95 % " , " 98 % " , " 99 % " , " Min " , " Max " } ; 
 - double [ ] readLatency = probe . metricPercentilesAsArray ( ( JmxReporter . HistogramMBean ) probe . getColumnFamilyMetric ( keyspace , cfname , " ReadLatency " ) ) ; 
 - double [ ] writeLatency = probe . metricPercentilesAsArray ( ( JmxReporter . TimerMBean ) probe . getColumnFamilyMetric ( keyspace , cfname , " WriteLatency " ) ) ; 
 - double [ ] sstablesPerRead = probe . metricPercentilesAsArray ( ( JmxReporter . HistogramMBean ) probe . getColumnFamilyMetric ( keyspace , cfname , " SSTablesPerReadHistogram " ) ) ; 
 + double [ ] readLatency = probe . metricPercentilesAsArray ( store . getRecentReadLatencyHistogramMicros ( ) ) ; 
 + double [ ] writeLatency = probe . metricPercentilesAsArray ( store . getRecentWriteLatencyHistogramMicros ( ) ) ; 
 + double [ ] estimatedRowSizePercentiles = probe . metricPercentilesAsArray ( store . getEstimatedRowSizeHistogram ( ) ) ; 
 + double [ ] estimatedColumnCountPercentiles = probe . metricPercentilesAsArray ( store . getEstimatedColumnCountHistogram ( ) ) ; 
 + double [ ] sstablesPerRead = probe . metricPercentilesAsArray ( store . getRecentSSTablesPerReadHistogram ( ) ) ; 
 
 System . out . println ( format ( " % s / % s histograms " , keyspace , cfname ) ) ; 
 System . out . println ( format ( " % - 10s % 10s % 18s % 18s % 18s % 18s " , 
 @ @ - 1704 , 10 + 1662 , 11 @ @ public class NodeTool 
 @ Override 
 public void execute ( NodeProbe probe ) 
 { 
 + StorageProxyMBean sp = probe . getSpProxy ( ) ; 
 String [ ] percentiles = new String [ ] { " 50 % " , " 75 % " , " 95 % " , " 98 % " , " 99 % " , " Min " , " Max " } ; 
 - double [ ] readLatency = probe . metricPercentilesAsArray ( probe . getProxyMetric ( " Read " ) ) ; 
 - double [ ] writeLatency = probe . metricPercentilesAsArray ( probe . getProxyMetric ( " Write " ) ) ; 
 - double [ ] rangeLatency = probe . metricPercentilesAsArray ( probe . getProxyMetric ( " RangeSlice " ) ) ; 
 + double [ ] readLatency = probe . metricPercentilesAsArray ( sp . getRecentReadLatencyHistogramMicros ( ) ) ; 
 + double [ ] writeLatency = probe . metricPercentilesAsArray ( sp . getRecentWriteLatencyHistogramMicros ( ) ) ; 
 + double [ ] rangeLatency = probe . metricPercentilesAsArray ( sp . getRecentRangeLatencyHistogramMicros ( ) ) ; 
 
 System . out . println ( " proxy histograms " ) ; 
 System . out . println ( format ( " % - 10s % 18s % 18s % 18s " ,

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b935425 . . 7f5a487 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 2 - rc1 
 + * fix cqlsh rendering of blob fields ( CASSANDRA - 4970 ) 
 * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) 
 * save truncation position in system table ( CASSANDRA - 4906 ) 
 * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) 
 diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py 
 index d15c083 . . bab3506 100644 
 - - - a / pylib / cqlshlib / formatting . py 
 + + + b / pylib / cqlshlib / formatting . py 
 @ @ - 88 , 8 + 88 , 8 @ @ def formatter _ for ( typname ) : 
 return f 
 return registrator 
 
 - @ formatter _ for ( ' bytes ' ) 
 - def format _ value _ bytes ( val , colormap , * * _ ) : 
 + @ formatter _ for ( ' blob ' ) 
 + def format _ value _ blob ( val , colormap , * * _ ) : 
 bval = ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) 
 return colorme ( bval , colormap , ' hex ' ) 

