BLEU SCORE: 0.06220117374063391

TEST MSG: Generic Java UDF types
GENERATED MSG: merge from 1 . 0

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index ffe50a3 . . 3fcca42 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 4 <nl> + * Generic Java UDF types ( CASSANDRA - 10819 ) <nl> * cqlsh : Include sub - second precision in timestamps by default ( CASSANDRA - 10428 ) <nl> * Set javac encoding to utf - 8 ( CASSANDRA - 11077 ) <nl> * Integrate SASI index into Cassandra ( CASSANDRA - 10661 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java <nl> index c61e72e . . b1dd9f9 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java <nl> @ @ - 35 , 8 + 35 , 11 @ @ import java . util . concurrent . ConcurrentHashMap ; <nl> import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . ThreadLocalRandom ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> + import java . util . regex . Pattern ; <nl> <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . io . ByteStreams ; <nl> + import com . google . common . reflect . TypeToken ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 57 , 10 + 60 , 12 @ @ import org . eclipse . jdt . internal . compiler . env . NameEnvironmentAnswer ; <nl> import org . eclipse . jdt . internal . compiler . impl . CompilerOptions ; <nl> import org . eclipse . jdt . internal . compiler . problem . DefaultProblemFactory ; <nl> <nl> - final class JavaBasedUDFunction extends UDFunction <nl> + public final class JavaBasedUDFunction extends UDFunction <nl> { <nl> private static final String BASE _ PACKAGE = " org . apache . cassandra . cql3 . udf . gen " ; <nl> <nl> + private static final Pattern JAVA _ LANG _ PREFIX = Pattern . compile ( " \ \ bjava \ \ . lang \ \ . " ) ; <nl> + <nl> static final Logger logger = LoggerFactory . getLogger ( JavaBasedUDFunction . class ) ; <nl> <nl> private static final AtomicInteger classSequence = new AtomicInteger ( ) ; <nl> @ @ - 185 , 9 + 190 , 9 @ @ final class JavaBasedUDFunction extends UDFunction <nl> returnType , UDHelper . driverType ( returnType ) , calledOnNullInput , " java " , body ) ; <nl> <nl> / / javaParamTypes is just the Java representation for argTypes resp . argDataTypes <nl> - Class < ? > [ ] javaParamTypes = UDHelper . javaTypes ( argDataTypes , calledOnNullInput ) ; <nl> + TypeToken < ? > [ ] javaParamTypes = UDHelper . typeTokens ( argDataTypes , calledOnNullInput ) ; <nl> / / javaReturnType is just the Java representation for returnType resp . returnDataType <nl> - Class < ? > javaReturnType = UDHelper . asJavaClass ( returnDataType ) ; <nl> + TypeToken < ? > javaReturnType = UDHelper . asTypeToken ( returnDataType ) ; <nl> <nl> / / put each UDF in a separate package to prevent cross - UDF code access <nl> String pkgName = BASE _ PACKAGE + ' . ' + generateClassName ( name , ' p ' ) ; <nl> @ @ - 244 , 7 + 249 , 7 @ @ final class JavaBasedUDFunction extends UDFunction <nl> { <nl> EcjCompilationUnit compilationUnit = new EcjCompilationUnit ( javaSource , targetClassName ) ; <nl> <nl> - org . eclipse . jdt . internal . compiler . Compiler compiler = new Compiler ( compilationUnit , <nl> + Compiler compiler = new Compiler ( compilationUnit , <nl> errorHandlingPolicy , <nl> compilerOptions , <nl> compilationUnit , <nl> @ @ - 392 , 13 + 397 , 14 @ @ final class JavaBasedUDFunction extends UDFunction <nl> return sb . toString ( ) ; <nl> } <nl> <nl> - private static String javaSourceName ( Class < ? > type ) <nl> + @ VisibleForTesting <nl> + public static String javaSourceName ( TypeToken < ? > type ) <nl> { <nl> - String n = type . getName ( ) ; <nl> - return n . startsWith ( " java . lang . " ) ? type . getSimpleName ( ) : n ; <nl> + String n = type . toString ( ) ; <nl> + return JAVA _ LANG _ PREFIX . matcher ( n ) . replaceAll ( " " ) ; <nl> } <nl> <nl> - private static String generateArgumentList ( Class < ? > [ ] paramTypes , List < ColumnIdentifier > argNames ) <nl> + private static String generateArgumentList ( TypeToken < ? > [ ] paramTypes , List < ColumnIdentifier > argNames ) <nl> { <nl> / / initial builder size can just be a guess ( prevent temp object allocations ) <nl> StringBuilder code = new StringBuilder ( 32 * paramTypes . length ) ; <nl> @ @ - 413 , 7 + 419 , 7 @ @ final class JavaBasedUDFunction extends UDFunction <nl> return code . toString ( ) ; <nl> } <nl> <nl> - private static String generateArguments ( Class < ? > [ ] paramTypes , List < ColumnIdentifier > argNames ) <nl> + private static String generateArguments ( TypeToken < ? > [ ] paramTypes , List < ColumnIdentifier > argNames ) <nl> { <nl> StringBuilder code = new StringBuilder ( 64 * paramTypes . length ) ; <nl> for ( int i = 0 ; i < paramTypes . length ; i + + ) <nl> @ @ - 433 , 9 + 439 , 9 @ @ final class JavaBasedUDFunction extends UDFunction <nl> return code . toString ( ) ; <nl> } <nl> <nl> - private static String composeMethod ( Class < ? > type ) <nl> + private static String composeMethod ( TypeToken < ? > type ) <nl> { <nl> - return ( type . isPrimitive ( ) ) ? ( " super . compose _ " + type . getName ( ) ) : " super . compose " ; <nl> + return ( type . isPrimitive ( ) ) ? ( " super . compose _ " + type . getRawType ( ) . getName ( ) ) : " super . compose " ; <nl> } <nl> <nl> / / Java source UDFs are a very simple compilation task , which allows us to let one class implement <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java <nl> index 4ffb992 . . bf28663 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java <nl> @ @ - 189 , 7 + 189 , 7 @ @ final class ScriptBasedUDFunction extends UDFunction <nl> if ( result = = null ) <nl> return null ; <nl> <nl> - Class < ? > javaReturnType = UDHelper . asJavaClass ( returnDataType ) ; <nl> + Class < ? > javaReturnType = UDHelper . asTypeToken ( returnDataType ) . getRawType ( ) ; <nl> Class < ? > resultType = result . getClass ( ) ; <nl> if ( ! javaReturnType . isAssignableFrom ( resultType ) ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java b / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java <nl> index cc62c84 . . 6237369 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java <nl> @ @ - 23 , 6 + 23 , 8 @ @ import java . lang . reflect . Method ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> <nl> + import com . google . common . reflect . TypeToken ; <nl> + <nl> import com . datastax . driver . core . CodecRegistry ; <nl> import com . datastax . driver . core . DataType ; <nl> import com . datastax . driver . core . ProtocolVersion ; <nl> @ @ - 68 , 15 + 70 , 16 @ @ public final class UDHelper <nl> * @ param calledOnNullInput whether to allow { @ code null } as an argument value <nl> * @ return array of same size with UDF arguments <nl> * / <nl> - public static Class < ? > [ ] javaTypes ( DataType [ ] dataTypes , boolean calledOnNullInput ) <nl> + public static TypeToken < ? > [ ] typeTokens ( DataType [ ] dataTypes , boolean calledOnNullInput ) <nl> { <nl> - Class < ? > [ ] paramTypes = new Class [ dataTypes . length ] ; <nl> + TypeToken < ? > [ ] paramTypes = new TypeToken [ dataTypes . length ] ; <nl> for ( int i = 0 ; i < paramTypes . length ; i + + ) <nl> { <nl> - Class < ? > clazz = asJavaClass ( dataTypes [ i ] ) ; <nl> + TypeToken < ? > typeToken = asTypeToken ( dataTypes [ i ] ) ; <nl> if ( ! calledOnNullInput ) <nl> { <nl> / / only care about classes that can be used in a data type <nl> + Class < ? > clazz = typeToken . getRawType ( ) ; <nl> if ( clazz = = Integer . class ) <nl> clazz = int . class ; <nl> else if ( clazz = = Long . class ) <nl> @ @ - 91 , 8 + 94 , 9 @ @ public final class UDHelper <nl> clazz = double . class ; <nl> else if ( clazz = = Boolean . class ) <nl> clazz = boolean . class ; <nl> + typeToken = TypeToken . of ( clazz ) ; <nl> } <nl> - paramTypes [ i ] = clazz ; <nl> + paramTypes [ i ] = typeToken ; <nl> } <nl> return paramTypes ; <nl> } <nl> @ @ - 149 , 9 + 153 , 9 @ @ public final class UDHelper <nl> return codec . serialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; <nl> } <nl> <nl> - public static Class < ? > asJavaClass ( DataType dataType ) <nl> + public static TypeToken < ? > asTypeToken ( DataType dataType ) <nl> { <nl> - return codecFor ( dataType ) . getJavaType ( ) . getRawType ( ) ; <nl> + return codecFor ( dataType ) . getJavaType ( ) ; <nl> } <nl> <nl> public static boolean isNullOrEmpty ( AbstractType < ? > type , ByteBuffer bb ) <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java <nl> index cc0e806 . . f482d54 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ <nl> package org . apache . cassandra . cql3 . validation . entities ; <nl> <nl> import java . nio . ByteBuffer ; <nl> + import java . security . AccessControlException ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . Date ; <nl> @ @ - 27 , 21 + 28 , 22 @ @ import java . util . Set ; <nl> import java . util . TreeMap ; <nl> import java . util . TreeSet ; <nl> import java . util . UUID ; <nl> - import java . security . AccessControlException ; <nl> <nl> + import com . google . common . reflect . TypeToken ; <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> import com . datastax . driver . core . * ; <nl> import com . datastax . driver . core . exceptions . InvalidQueryException ; <nl> + import org . apache . cassandra . config . Config ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . cql3 . CQL3Type ; <nl> import org . apache . cassandra . cql3 . CQLTester ; <nl> import org . apache . cassandra . cql3 . QueryProcessor ; <nl> import org . apache . cassandra . cql3 . UntypedResultSet ; <nl> - import org . apache . cassandra . config . Config ; <nl> import org . apache . cassandra . cql3 . functions . FunctionName ; <nl> + import org . apache . cassandra . cql3 . functions . JavaBasedUDFunction ; <nl> import org . apache . cassandra . cql3 . functions . UDFunction ; <nl> import org . apache . cassandra . cql3 . functions . UDHelper ; <nl> import org . apache . cassandra . db . marshal . CollectionType ; <nl> @ @ - 59 , 6 + 61 , 15 @ @ import org . apache . cassandra . utils . UUIDGen ; <nl> public class UFTest extends CQLTester <nl> { <nl> @ Test <nl> + public void testJavaSourceName ( ) <nl> + { <nl> + Assert . assertEquals ( " String " , JavaBasedUDFunction . javaSourceName ( TypeToken . of ( String . class ) ) ) ; <nl> + Assert . assertEquals ( " java . util . Map < Integer , String > " , JavaBasedUDFunction . javaSourceName ( TypeTokens . mapOf ( Integer . class , String . class ) ) ) ; <nl> + Assert . assertEquals ( " com . datastax . driver . core . UDTValue " , JavaBasedUDFunction . javaSourceName ( TypeToken . of ( UDTValue . class ) ) ) ; <nl> + Assert . assertEquals ( " java . util . Set < com . datastax . driver . core . UDTValue > " , JavaBasedUDFunction . javaSourceName ( TypeTokens . setOf ( UDTValue . class ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testNonExistingOnes ( ) throws Throwable <nl> { <nl> assertInvalidThrowMessage ( " Cannot drop non existing function " , InvalidRequestException . class , " DROP FUNCTION " + KEYSPACE + " . func _ does _ not _ exist " ) ; <nl> @ @ - 2485 , 4 + 2496 , 37 @ @ public class UFTest extends CQLTester <nl> } <nl> } <nl> } <nl> + <nl> + @ Test <nl> + public void testArgumentGenerics ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( key int primary key , sval text , aval ascii , bval blob , empty _ int int ) " ) ; <nl> + <nl> + String typeName = createType ( " CREATE TYPE % s ( txt text , i int ) " ) ; <nl> + <nl> + String f = createFunction ( KEYSPACE , " text " , <nl> + " CREATE OR REPLACE FUNCTION % s ( " + <nl> + " listText list < text > , " + <nl> + " setText set < text > , " + <nl> + " mapTextInt map < text , int > , " + <nl> + " mapListTextSetInt map < frozen < list < text > > , frozen < set < int > > > , " + <nl> + " mapTextTuple map < text , frozen < tuple < int , text > > > , " + <nl> + " mapTextType map < text , frozen < " + typeName + " > > " + <nl> + " ) " + <nl> + " CALLED ON NULL INPUT " + <nl> + " RETURNS map < frozen < list < text > > , frozen < set < int > > > " + <nl> + " LANGUAGE JAVA \ n " + <nl> + " AS $ $ " + <nl> + " for ( String s : listtext ) { } ; " + <nl> + " for ( String s : settext ) { } ; " + <nl> + " for ( String s : maptextint . keySet ( ) ) { } ; " + <nl> + " for ( Integer s : maptextint . values ( ) ) { } ; " + <nl> + " for ( java . util . List < String > l : maplisttextsetint . keySet ( ) ) { } ; " + <nl> + " for ( java . util . Set < Integer > s : maplisttextsetint . values ( ) ) { } ; " + <nl> + " for ( com . datastax . driver . core . TupleValue t : maptexttuple . values ( ) ) { } ; " + <nl> + " for ( com . datastax . driver . core . UDTValue u : maptexttype . values ( ) ) { } ; " + <nl> + " return maplisttextsetint ; " + <nl> + " $ $ " ) ; <nl> + <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d518830 . . 52cc2c1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 29 , 7 + 29 , 7 @ @ <nl> * add scheduler JMX metrics ( CASSANDRA - 2962 ) <nl> * add block level checksum for compressed data ( CASSANDRA - 1717 ) <nl> * make column family backed column map pluggable and introduce unsynchronized <nl> - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) <nl> + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) <nl> * refactoring of the secondary index api ( CASSANDRA - 2982 ) <nl> * make CL > ONE reads wait for digest reconciliation before returning <nl> ( CASSANDRA - 2494 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> index c316a85 . . 71c7213 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor <nl> this . reversed = reversed ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public AbstractType < ? > getComparator ( ) <nl> { <nl> return comparator ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 1239d1c . . 38bc0d7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer <nl> this . cfm = cfm ; <nl> } <nl> <nl> - public ColumnFamily cloneMeShallow ( ) <nl> + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) <nl> { <nl> - ColumnFamily cf = ColumnFamily . create ( cfm ) ; <nl> + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; <nl> / / since deletion info is immutable , aliasing it is fine <nl> cf . deletionInfo . set ( deletionInfo . get ( ) ) ; <nl> return cf ; <nl> } <nl> <nl> + public ColumnFamily cloneMeShallow ( ) <nl> + { <nl> + return cloneMeShallow ( columns . getFactory ( ) ) ; <nl> + } <nl> + <nl> public AbstractType getSubComparator ( ) <nl> { <nl> IColumnSerializer s = getColumnSerializer ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 0bfd1c5 . . 552d3e9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> - * tombstones that are no longer relevant . * / <nl> + / * * <nl> + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> + * tombstones that are no longer relevant . <nl> + * The returned column family won ' t be thread safe . <nl> + * / <nl> ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) <nl> { <nl> / / special case slicing the entire row : <nl> @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; <nl> if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) <nl> { <nl> - ColumnFamily cf = cached . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> if ( sc ! = null ) <nl> cf . addColumn ( sc , HeapAllocator . instance ) ; <nl> return removeDeleted ( cf , gcBefore ) ; <nl> @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> <nl> IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; <nl> - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; <nl> / / TODO this is necessary because when we collate supercolumns together , we don ' t check <nl> / / their subcolumns for relevance , so we need to do a second prune post facto here . <nl> diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> index 37f5a60 . . 624dec7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns <nl> public ISortedColumns cloneMe ( ) ; <nl> <nl> / * * <nl> + * Returns the factory used for this ISortedColumns implementation . <nl> + * / <nl> + public Factory getFactory ( ) ; <nl> + <nl> + / * * <nl> * Adds a column to this column map . <nl> * If a column with the same name is already present in the map , it will <nl> * be replaced by the newly added column . <nl> diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> index cd2488a . . 13a111a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new ThreadSafeSortedColumns ( this ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> index 34e83dc . . 6c3fc42 100644 <nl> - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new TreeMapBackedSortedColumns ( this ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index ffe50a3 . . 3fcca42 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 4 
 + * Generic Java UDF types ( CASSANDRA - 10819 ) 
 * cqlsh : Include sub - second precision in timestamps by default ( CASSANDRA - 10428 ) 
 * Set javac encoding to utf - 8 ( CASSANDRA - 11077 ) 
 * Integrate SASI index into Cassandra ( CASSANDRA - 10661 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java 
 index c61e72e . . b1dd9f9 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java 
 @ @ - 35 , 8 + 35 , 11 @ @ import java . util . concurrent . ConcurrentHashMap ; 
 import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . ThreadLocalRandom ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 + import java . util . regex . Pattern ; 
 
 + import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . io . ByteStreams ; 
 + import com . google . common . reflect . TypeToken ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 57 , 10 + 60 , 12 @ @ import org . eclipse . jdt . internal . compiler . env . NameEnvironmentAnswer ; 
 import org . eclipse . jdt . internal . compiler . impl . CompilerOptions ; 
 import org . eclipse . jdt . internal . compiler . problem . DefaultProblemFactory ; 
 
 - final class JavaBasedUDFunction extends UDFunction 
 + public final class JavaBasedUDFunction extends UDFunction 
 { 
 private static final String BASE _ PACKAGE = " org . apache . cassandra . cql3 . udf . gen " ; 
 
 + private static final Pattern JAVA _ LANG _ PREFIX = Pattern . compile ( " \ \ bjava \ \ . lang \ \ . " ) ; 
 + 
 static final Logger logger = LoggerFactory . getLogger ( JavaBasedUDFunction . class ) ; 
 
 private static final AtomicInteger classSequence = new AtomicInteger ( ) ; 
 @ @ - 185 , 9 + 190 , 9 @ @ final class JavaBasedUDFunction extends UDFunction 
 returnType , UDHelper . driverType ( returnType ) , calledOnNullInput , " java " , body ) ; 
 
 / / javaParamTypes is just the Java representation for argTypes resp . argDataTypes 
 - Class < ? > [ ] javaParamTypes = UDHelper . javaTypes ( argDataTypes , calledOnNullInput ) ; 
 + TypeToken < ? > [ ] javaParamTypes = UDHelper . typeTokens ( argDataTypes , calledOnNullInput ) ; 
 / / javaReturnType is just the Java representation for returnType resp . returnDataType 
 - Class < ? > javaReturnType = UDHelper . asJavaClass ( returnDataType ) ; 
 + TypeToken < ? > javaReturnType = UDHelper . asTypeToken ( returnDataType ) ; 
 
 / / put each UDF in a separate package to prevent cross - UDF code access 
 String pkgName = BASE _ PACKAGE + ' . ' + generateClassName ( name , ' p ' ) ; 
 @ @ - 244 , 7 + 249 , 7 @ @ final class JavaBasedUDFunction extends UDFunction 
 { 
 EcjCompilationUnit compilationUnit = new EcjCompilationUnit ( javaSource , targetClassName ) ; 
 
 - org . eclipse . jdt . internal . compiler . Compiler compiler = new Compiler ( compilationUnit , 
 + Compiler compiler = new Compiler ( compilationUnit , 
 errorHandlingPolicy , 
 compilerOptions , 
 compilationUnit , 
 @ @ - 392 , 13 + 397 , 14 @ @ final class JavaBasedUDFunction extends UDFunction 
 return sb . toString ( ) ; 
 } 
 
 - private static String javaSourceName ( Class < ? > type ) 
 + @ VisibleForTesting 
 + public static String javaSourceName ( TypeToken < ? > type ) 
 { 
 - String n = type . getName ( ) ; 
 - return n . startsWith ( " java . lang . " ) ? type . getSimpleName ( ) : n ; 
 + String n = type . toString ( ) ; 
 + return JAVA _ LANG _ PREFIX . matcher ( n ) . replaceAll ( " " ) ; 
 } 
 
 - private static String generateArgumentList ( Class < ? > [ ] paramTypes , List < ColumnIdentifier > argNames ) 
 + private static String generateArgumentList ( TypeToken < ? > [ ] paramTypes , List < ColumnIdentifier > argNames ) 
 { 
 / / initial builder size can just be a guess ( prevent temp object allocations ) 
 StringBuilder code = new StringBuilder ( 32 * paramTypes . length ) ; 
 @ @ - 413 , 7 + 419 , 7 @ @ final class JavaBasedUDFunction extends UDFunction 
 return code . toString ( ) ; 
 } 
 
 - private static String generateArguments ( Class < ? > [ ] paramTypes , List < ColumnIdentifier > argNames ) 
 + private static String generateArguments ( TypeToken < ? > [ ] paramTypes , List < ColumnIdentifier > argNames ) 
 { 
 StringBuilder code = new StringBuilder ( 64 * paramTypes . length ) ; 
 for ( int i = 0 ; i < paramTypes . length ; i + + ) 
 @ @ - 433 , 9 + 439 , 9 @ @ final class JavaBasedUDFunction extends UDFunction 
 return code . toString ( ) ; 
 } 
 
 - private static String composeMethod ( Class < ? > type ) 
 + private static String composeMethod ( TypeToken < ? > type ) 
 { 
 - return ( type . isPrimitive ( ) ) ? ( " super . compose _ " + type . getName ( ) ) : " super . compose " ; 
 + return ( type . isPrimitive ( ) ) ? ( " super . compose _ " + type . getRawType ( ) . getName ( ) ) : " super . compose " ; 
 } 
 
 / / Java source UDFs are a very simple compilation task , which allows us to let one class implement 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java 
 index 4ffb992 . . bf28663 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java 
 @ @ - 189 , 7 + 189 , 7 @ @ final class ScriptBasedUDFunction extends UDFunction 
 if ( result = = null ) 
 return null ; 
 
 - Class < ? > javaReturnType = UDHelper . asJavaClass ( returnDataType ) ; 
 + Class < ? > javaReturnType = UDHelper . asTypeToken ( returnDataType ) . getRawType ( ) ; 
 Class < ? > resultType = result . getClass ( ) ; 
 if ( ! javaReturnType . isAssignableFrom ( resultType ) ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java b / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java 
 index cc62c84 . . 6237369 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java 
 @ @ - 23 , 6 + 23 , 8 @ @ import java . lang . reflect . Method ; 
 import java . nio . ByteBuffer ; 
 import java . util . List ; 
 
 + import com . google . common . reflect . TypeToken ; 
 + 
 import com . datastax . driver . core . CodecRegistry ; 
 import com . datastax . driver . core . DataType ; 
 import com . datastax . driver . core . ProtocolVersion ; 
 @ @ - 68 , 15 + 70 , 16 @ @ public final class UDHelper 
 * @ param calledOnNullInput whether to allow { @ code null } as an argument value 
 * @ return array of same size with UDF arguments 
 * / 
 - public static Class < ? > [ ] javaTypes ( DataType [ ] dataTypes , boolean calledOnNullInput ) 
 + public static TypeToken < ? > [ ] typeTokens ( DataType [ ] dataTypes , boolean calledOnNullInput ) 
 { 
 - Class < ? > [ ] paramTypes = new Class [ dataTypes . length ] ; 
 + TypeToken < ? > [ ] paramTypes = new TypeToken [ dataTypes . length ] ; 
 for ( int i = 0 ; i < paramTypes . length ; i + + ) 
 { 
 - Class < ? > clazz = asJavaClass ( dataTypes [ i ] ) ; 
 + TypeToken < ? > typeToken = asTypeToken ( dataTypes [ i ] ) ; 
 if ( ! calledOnNullInput ) 
 { 
 / / only care about classes that can be used in a data type 
 + Class < ? > clazz = typeToken . getRawType ( ) ; 
 if ( clazz = = Integer . class ) 
 clazz = int . class ; 
 else if ( clazz = = Long . class ) 
 @ @ - 91 , 8 + 94 , 9 @ @ public final class UDHelper 
 clazz = double . class ; 
 else if ( clazz = = Boolean . class ) 
 clazz = boolean . class ; 
 + typeToken = TypeToken . of ( clazz ) ; 
 } 
 - paramTypes [ i ] = clazz ; 
 + paramTypes [ i ] = typeToken ; 
 } 
 return paramTypes ; 
 } 
 @ @ - 149 , 9 + 153 , 9 @ @ public final class UDHelper 
 return codec . serialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; 
 } 
 
 - public static Class < ? > asJavaClass ( DataType dataType ) 
 + public static TypeToken < ? > asTypeToken ( DataType dataType ) 
 { 
 - return codecFor ( dataType ) . getJavaType ( ) . getRawType ( ) ; 
 + return codecFor ( dataType ) . getJavaType ( ) ; 
 } 
 
 public static boolean isNullOrEmpty ( AbstractType < ? > type , ByteBuffer bb ) 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java 
 index cc0e806 . . f482d54 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java 
 @ @ - 18 , 6 + 18 , 7 @ @ 
 package org . apache . cassandra . cql3 . validation . entities ; 
 
 import java . nio . ByteBuffer ; 
 + import java . security . AccessControlException ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . Date ; 
 @ @ - 27 , 21 + 28 , 22 @ @ import java . util . Set ; 
 import java . util . TreeMap ; 
 import java . util . TreeSet ; 
 import java . util . UUID ; 
 - import java . security . AccessControlException ; 
 
 + import com . google . common . reflect . TypeToken ; 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 
 import com . datastax . driver . core . * ; 
 import com . datastax . driver . core . exceptions . InvalidQueryException ; 
 + import org . apache . cassandra . config . Config ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . cql3 . CQL3Type ; 
 import org . apache . cassandra . cql3 . CQLTester ; 
 import org . apache . cassandra . cql3 . QueryProcessor ; 
 import org . apache . cassandra . cql3 . UntypedResultSet ; 
 - import org . apache . cassandra . config . Config ; 
 import org . apache . cassandra . cql3 . functions . FunctionName ; 
 + import org . apache . cassandra . cql3 . functions . JavaBasedUDFunction ; 
 import org . apache . cassandra . cql3 . functions . UDFunction ; 
 import org . apache . cassandra . cql3 . functions . UDHelper ; 
 import org . apache . cassandra . db . marshal . CollectionType ; 
 @ @ - 59 , 6 + 61 , 15 @ @ import org . apache . cassandra . utils . UUIDGen ; 
 public class UFTest extends CQLTester 
 { 
 @ Test 
 + public void testJavaSourceName ( ) 
 + { 
 + Assert . assertEquals ( " String " , JavaBasedUDFunction . javaSourceName ( TypeToken . of ( String . class ) ) ) ; 
 + Assert . assertEquals ( " java . util . Map < Integer , String > " , JavaBasedUDFunction . javaSourceName ( TypeTokens . mapOf ( Integer . class , String . class ) ) ) ; 
 + Assert . assertEquals ( " com . datastax . driver . core . UDTValue " , JavaBasedUDFunction . javaSourceName ( TypeToken . of ( UDTValue . class ) ) ) ; 
 + Assert . assertEquals ( " java . util . Set < com . datastax . driver . core . UDTValue > " , JavaBasedUDFunction . javaSourceName ( TypeTokens . setOf ( UDTValue . class ) ) ) ; 
 + } 
 + 
 + @ Test 
 public void testNonExistingOnes ( ) throws Throwable 
 { 
 assertInvalidThrowMessage ( " Cannot drop non existing function " , InvalidRequestException . class , " DROP FUNCTION " + KEYSPACE + " . func _ does _ not _ exist " ) ; 
 @ @ - 2485 , 4 + 2496 , 37 @ @ public class UFTest extends CQLTester 
 } 
 } 
 } 
 + 
 + @ Test 
 + public void testArgumentGenerics ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( key int primary key , sval text , aval ascii , bval blob , empty _ int int ) " ) ; 
 + 
 + String typeName = createType ( " CREATE TYPE % s ( txt text , i int ) " ) ; 
 + 
 + String f = createFunction ( KEYSPACE , " text " , 
 + " CREATE OR REPLACE FUNCTION % s ( " + 
 + " listText list < text > , " + 
 + " setText set < text > , " + 
 + " mapTextInt map < text , int > , " + 
 + " mapListTextSetInt map < frozen < list < text > > , frozen < set < int > > > , " + 
 + " mapTextTuple map < text , frozen < tuple < int , text > > > , " + 
 + " mapTextType map < text , frozen < " + typeName + " > > " + 
 + " ) " + 
 + " CALLED ON NULL INPUT " + 
 + " RETURNS map < frozen < list < text > > , frozen < set < int > > > " + 
 + " LANGUAGE JAVA \ n " + 
 + " AS $ $ " + 
 + " for ( String s : listtext ) { } ; " + 
 + " for ( String s : settext ) { } ; " + 
 + " for ( String s : maptextint . keySet ( ) ) { } ; " + 
 + " for ( Integer s : maptextint . values ( ) ) { } ; " + 
 + " for ( java . util . List < String > l : maplisttextsetint . keySet ( ) ) { } ; " + 
 + " for ( java . util . Set < Integer > s : maplisttextsetint . values ( ) ) { } ; " + 
 + " for ( com . datastax . driver . core . TupleValue t : maptexttuple . values ( ) ) { } ; " + 
 + " for ( com . datastax . driver . core . UDTValue u : maptexttype . values ( ) ) { } ; " + 
 + " return maplisttextsetint ; " + 
 + " $ $ " ) ; 
 + 
 + } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d518830 . . 52cc2c1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 29 , 7 + 29 , 7 @ @ 
 * add scheduler JMX metrics ( CASSANDRA - 2962 ) 
 * add block level checksum for compressed data ( CASSANDRA - 1717 ) 
 * make column family backed column map pluggable and introduce unsynchronized 
 - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) 
 + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) 
 * refactoring of the secondary index api ( CASSANDRA - 2982 ) 
 * make CL > ONE reads wait for digest reconciliation before returning 
 ( CASSANDRA - 2494 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 index c316a85 . . 71c7213 100644 
 - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor 
 this . reversed = reversed ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public AbstractType < ? > getComparator ( ) 
 { 
 return comparator ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 1239d1c . . 38bc0d7 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer 
 this . cfm = cfm ; 
 } 
 
 - public ColumnFamily cloneMeShallow ( ) 
 + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) 
 { 
 - ColumnFamily cf = ColumnFamily . create ( cfm ) ; 
 + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; 
 / / since deletion info is immutable , aliasing it is fine 
 cf . deletionInfo . set ( deletionInfo . get ( ) ) ; 
 return cf ; 
 } 
 
 + public ColumnFamily cloneMeShallow ( ) 
 + { 
 + return cloneMeShallow ( columns . getFactory ( ) ) ; 
 + } 
 + 
 public AbstractType getSubComparator ( ) 
 { 
 IColumnSerializer s = getColumnSerializer ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 0bfd1c5 . . 552d3e9 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 - * tombstones that are no longer relevant . * / 
 + / * * 
 + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 + * tombstones that are no longer relevant . 
 + * The returned column family won ' t be thread safe . 
 + * / 
 ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) 
 { 
 / / special case slicing the entire row : 
 @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; 
 if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) 
 { 
 - ColumnFamily cf = cached . cloneMeShallow ( ) ; 
 + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 if ( sc ! = null ) 
 cf . addColumn ( sc , HeapAllocator . instance ) ; 
 return removeDeleted ( cf , gcBefore ) ; 
 @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 
 IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; 
 - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; 
 + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; 
 / / TODO this is necessary because when we collate supercolumns together , we don ' t check 
 / / their subcolumns for relevance , so we need to do a second prune post facto here . 
 diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 index 37f5a60 . . 624dec7 100644 
 - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns 
 public ISortedColumns cloneMe ( ) ; 
 
 / * * 
 + * Returns the factory used for this ISortedColumns implementation . 
 + * / 
 + public Factory getFactory ( ) ; 
 + 
 + / * * 
 * Adds a column to this column map . 
 * If a column with the same name is already present in the map , it will 
 * be replaced by the newly added column . 
 diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 index cd2488a . . 13a111a 100644 
 - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new ThreadSafeSortedColumns ( this ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 index 34e83dc . . 6c3fc42 100644 
 - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new TreeMapBackedSortedColumns ( this ) ;
