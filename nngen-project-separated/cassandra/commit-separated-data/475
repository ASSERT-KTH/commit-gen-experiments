BLEU SCORE: 0.056697911109760024

TEST MSG: Fix ColumnCounter : : countAll behaviour for reverse queries
GENERATED MSG: Fix counting of tombstones for TombstoneOverwhelmingException

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 1b83501 . . 7073356 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 10 <nl> + * Fix ColumnCounter : : countAll behaviour for reverse queries ( CASSANDRA - 13222 ) <nl> * Exceptions encountered calling getSeeds ( ) breaks OTC thread ( CASSANDRA - 13018 ) <nl> <nl> 2 . 2 . 9 <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / ColumnCounter . java b / src / java / org / apache / cassandra / db / filter / ColumnCounter . java <nl> index 0d5acd1 . . 594fde8 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / ColumnCounter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / ColumnCounter . java <nl> @ @ - 20 , 6 + 20 , 8 @ @ <nl> * / <nl> package org . apache . cassandra . db . filter ; <nl> <nl> + import java . util . Iterator ; <nl> + <nl> import org . apache . cassandra . db . Cell ; <nl> import org . apache . cassandra . db . composites . CellName ; <nl> import org . apache . cassandra . db . composites . CellNameType ; <nl> @ @ - 72 , 11 + 74 , 18 @ @ public class ColumnCounter <nl> return this ; <nl> <nl> DeletionInfo . InOrderTester tester = container . inOrderDeletionTester ( ) ; <nl> - for ( Cell c : container ) <nl> - count ( c , tester ) ; <nl> + Iterator < Cell > cells = getCellIterator ( container ) ; <nl> + while ( cells . hasNext ( ) ) <nl> + count ( cells . next ( ) , tester ) ; <nl> return this ; <nl> } <nl> <nl> + protected Iterator < Cell > getCellIterator ( ColumnFamily container ) <nl> + { <nl> + / / overridden by GroupByPrefixReversed to return a reverse iterator <nl> + return container . iterator ( ) ; <nl> + } <nl> + <nl> public static class GroupByPrefix extends ColumnCounter <nl> { <nl> protected final CellNameType type ; <nl> @ @ - 169 , 6 + 178 , 12 @ @ public class ColumnCounter <nl> } <nl> <nl> @ Override <nl> + public Iterator < Cell > getCellIterator ( ColumnFamily container ) <nl> + { <nl> + return container . reverseIterator ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> public boolean count ( Cell cell , DeletionInfo . InOrderTester tester ) <nl> { <nl> if ( tester . isDeleted ( cell ) ) <nl> diff - - git a / test / unit / org / apache / cassandra / service / QueryPagerTest . java b / test / unit / org / apache / cassandra / service / QueryPagerTest . java <nl> index 961f080 . . 33a7585 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / QueryPagerTest . java <nl> + + + b / test / unit / org / apache / cassandra / service / QueryPagerTest . java <nl> @ @ - 53 , 6 + 53 , 7 @ @ public class QueryPagerTest <nl> public static final String CF _ STANDARD = " Standard1 " ; <nl> public static final String KEYSPACE _ CQL = " cql _ keyspace " ; <nl> public static final String CF _ CQL = " table2 " ; <nl> + public static final String CF _ CQL _ WITH _ STATIC = " with _ static " ; <nl> <nl> @ BeforeClass <nl> public static void defineSchema ( ) throws ConfigurationException <nl> @ @ - 69 , 7 + 70 , 14 @ @ public class QueryPagerTest <nl> + " k text , " <nl> + " c text , " <nl> + " v text , " <nl> - + " PRIMARY KEY ( k , c ) ) " , KEYSPACE _ CQL ) ) ; <nl> + + " PRIMARY KEY ( k , c ) ) " , KEYSPACE _ CQL ) , <nl> + CFMetaData . compile ( " CREATE TABLE " + CF _ CQL _ WITH _ STATIC + " ( " <nl> + + " pk text , " <nl> + + " ck int , " <nl> + + " st int static , " <nl> + + " v1 int , " <nl> + + " v2 int , " <nl> + + " PRIMARY KEY ( pk , ck ) ) " , KEYSPACE _ CQL ) ) ; <nl> addData ( ) ; <nl> } <nl> <nl> @ @ - 378 , 4 + 386 , 46 @ @ public class QueryPagerTest <nl> assertRow ( page . get ( 0 ) , " k0 " , ct . decompose ( " c " + i , " " ) ) ; <nl> } <nl> } <nl> + <nl> + @ Test <nl> + public void pagingReversedQueriesWithStaticColumnsTest ( ) throws Exception <nl> + { <nl> + / / insert some rows into a single partition <nl> + for ( int i = 0 ; i < 5 ; i + + ) <nl> + executeInternal ( String . format ( " INSERT INTO % s . % s ( pk , ck , st , v1 , v2 ) VALUES ( ' k0 ' , % 3 $ s , % 3 $ s , % 3 $ s , % 3 $ s ) " , <nl> + KEYSPACE _ CQL , CF _ CQL _ WITH _ STATIC , i ) ) ; <nl> + <nl> + / / query the table in reverse with page size = 1 & check that the returned rows contain the correct cells <nl> + CFMetaData cfm = Keyspace . open ( KEYSPACE _ CQL ) . getColumnFamilyStore ( CF _ CQL _ WITH _ STATIC ) . metadata ; <nl> + queryAndVerifyCells ( cfm , true , " k0 " ) ; <nl> + } <nl> + <nl> + private void queryAndVerifyCells ( CFMetaData cfm , boolean reversed , String key ) throws Exception <nl> + { <nl> + SliceQueryFilter filter = new SliceQueryFilter ( ColumnSlice . ALL _ COLUMNS _ ARRAY , reversed , 100 , 1 ) ; <nl> + QueryPager pager = QueryPagers . localPager ( new SliceFromReadCommand ( cfm . ksName , bytes ( key ) , cfm . cfName , 0 , filter ) ) ; <nl> + CellName staticCellName = cfm . comparator . create ( cfm . comparator . staticPrefix ( ) , <nl> + cfm . staticColumns ( ) . iterator ( ) . next ( ) ) ; <nl> + for ( int i = 0 ; i < 5 ; i + + ) <nl> + { <nl> + List < Row > page = pager . fetchPage ( 1 ) ; <nl> + assertEquals ( 1 , page . size ( ) ) ; <nl> + Row row = page . get ( 0 ) ; <nl> + assertCell ( row . cf , staticCellName , 4 ) ; <nl> + int cellIndex = ! reversed ? i : 4 - i ; <nl> + assertCell ( row . cf , Util . cellname ( ByteBufferUtil . bytes ( cellIndex ) , ByteBufferUtil . bytes ( " v1 " ) ) , cellIndex ) ; <nl> + assertCell ( row . cf , Util . cellname ( ByteBufferUtil . bytes ( cellIndex ) , ByteBufferUtil . bytes ( " v2 " ) ) , cellIndex ) ; <nl> + } <nl> + <nl> + / / After processing the 5 rows there should be no more rows to return <nl> + List < Row > page = pager . fetchPage ( 1 ) ; <nl> + assertTrue ( page . isEmpty ( ) ) ; <nl> + } <nl> + <nl> + private void assertCell ( ColumnFamily cf , CellName cellName , int value ) <nl> + { <nl> + Cell cell = cf . getColumn ( cellName ) ; <nl> + assertNotNull ( cell ) ; <nl> + assertEquals ( value , ByteBufferUtil . toInt ( cell . value ( ) ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 1b83501 . . 7073356 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 10 
 + * Fix ColumnCounter : : countAll behaviour for reverse queries ( CASSANDRA - 13222 ) 
 * Exceptions encountered calling getSeeds ( ) breaks OTC thread ( CASSANDRA - 13018 ) 
 
 2 . 2 . 9 
 diff - - git a / src / java / org / apache / cassandra / db / filter / ColumnCounter . java b / src / java / org / apache / cassandra / db / filter / ColumnCounter . java 
 index 0d5acd1 . . 594fde8 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / ColumnCounter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / ColumnCounter . java 
 @ @ - 20 , 6 + 20 , 8 @ @ 
 * / 
 package org . apache . cassandra . db . filter ; 
 
 + import java . util . Iterator ; 
 + 
 import org . apache . cassandra . db . Cell ; 
 import org . apache . cassandra . db . composites . CellName ; 
 import org . apache . cassandra . db . composites . CellNameType ; 
 @ @ - 72 , 11 + 74 , 18 @ @ public class ColumnCounter 
 return this ; 
 
 DeletionInfo . InOrderTester tester = container . inOrderDeletionTester ( ) ; 
 - for ( Cell c : container ) 
 - count ( c , tester ) ; 
 + Iterator < Cell > cells = getCellIterator ( container ) ; 
 + while ( cells . hasNext ( ) ) 
 + count ( cells . next ( ) , tester ) ; 
 return this ; 
 } 
 
 + protected Iterator < Cell > getCellIterator ( ColumnFamily container ) 
 + { 
 + / / overridden by GroupByPrefixReversed to return a reverse iterator 
 + return container . iterator ( ) ; 
 + } 
 + 
 public static class GroupByPrefix extends ColumnCounter 
 { 
 protected final CellNameType type ; 
 @ @ - 169 , 6 + 178 , 12 @ @ public class ColumnCounter 
 } 
 
 @ Override 
 + public Iterator < Cell > getCellIterator ( ColumnFamily container ) 
 + { 
 + return container . reverseIterator ( ) ; 
 + } 
 + 
 + @ Override 
 public boolean count ( Cell cell , DeletionInfo . InOrderTester tester ) 
 { 
 if ( tester . isDeleted ( cell ) ) 
 diff - - git a / test / unit / org / apache / cassandra / service / QueryPagerTest . java b / test / unit / org / apache / cassandra / service / QueryPagerTest . java 
 index 961f080 . . 33a7585 100644 
 - - - a / test / unit / org / apache / cassandra / service / QueryPagerTest . java 
 + + + b / test / unit / org / apache / cassandra / service / QueryPagerTest . java 
 @ @ - 53 , 6 + 53 , 7 @ @ public class QueryPagerTest 
 public static final String CF _ STANDARD = " Standard1 " ; 
 public static final String KEYSPACE _ CQL = " cql _ keyspace " ; 
 public static final String CF _ CQL = " table2 " ; 
 + public static final String CF _ CQL _ WITH _ STATIC = " with _ static " ; 
 
 @ BeforeClass 
 public static void defineSchema ( ) throws ConfigurationException 
 @ @ - 69 , 7 + 70 , 14 @ @ public class QueryPagerTest 
 + " k text , " 
 + " c text , " 
 + " v text , " 
 - + " PRIMARY KEY ( k , c ) ) " , KEYSPACE _ CQL ) ) ; 
 + + " PRIMARY KEY ( k , c ) ) " , KEYSPACE _ CQL ) , 
 + CFMetaData . compile ( " CREATE TABLE " + CF _ CQL _ WITH _ STATIC + " ( " 
 + + " pk text , " 
 + + " ck int , " 
 + + " st int static , " 
 + + " v1 int , " 
 + + " v2 int , " 
 + + " PRIMARY KEY ( pk , ck ) ) " , KEYSPACE _ CQL ) ) ; 
 addData ( ) ; 
 } 
 
 @ @ - 378 , 4 + 386 , 46 @ @ public class QueryPagerTest 
 assertRow ( page . get ( 0 ) , " k0 " , ct . decompose ( " c " + i , " " ) ) ; 
 } 
 } 
 + 
 + @ Test 
 + public void pagingReversedQueriesWithStaticColumnsTest ( ) throws Exception 
 + { 
 + / / insert some rows into a single partition 
 + for ( int i = 0 ; i < 5 ; i + + ) 
 + executeInternal ( String . format ( " INSERT INTO % s . % s ( pk , ck , st , v1 , v2 ) VALUES ( ' k0 ' , % 3 $ s , % 3 $ s , % 3 $ s , % 3 $ s ) " , 
 + KEYSPACE _ CQL , CF _ CQL _ WITH _ STATIC , i ) ) ; 
 + 
 + / / query the table in reverse with page size = 1 & check that the returned rows contain the correct cells 
 + CFMetaData cfm = Keyspace . open ( KEYSPACE _ CQL ) . getColumnFamilyStore ( CF _ CQL _ WITH _ STATIC ) . metadata ; 
 + queryAndVerifyCells ( cfm , true , " k0 " ) ; 
 + } 
 + 
 + private void queryAndVerifyCells ( CFMetaData cfm , boolean reversed , String key ) throws Exception 
 + { 
 + SliceQueryFilter filter = new SliceQueryFilter ( ColumnSlice . ALL _ COLUMNS _ ARRAY , reversed , 100 , 1 ) ; 
 + QueryPager pager = QueryPagers . localPager ( new SliceFromReadCommand ( cfm . ksName , bytes ( key ) , cfm . cfName , 0 , filter ) ) ; 
 + CellName staticCellName = cfm . comparator . create ( cfm . comparator . staticPrefix ( ) , 
 + cfm . staticColumns ( ) . iterator ( ) . next ( ) ) ; 
 + for ( int i = 0 ; i < 5 ; i + + ) 
 + { 
 + List < Row > page = pager . fetchPage ( 1 ) ; 
 + assertEquals ( 1 , page . size ( ) ) ; 
 + Row row = page . get ( 0 ) ; 
 + assertCell ( row . cf , staticCellName , 4 ) ; 
 + int cellIndex = ! reversed ? i : 4 - i ; 
 + assertCell ( row . cf , Util . cellname ( ByteBufferUtil . bytes ( cellIndex ) , ByteBufferUtil . bytes ( " v1 " ) ) , cellIndex ) ; 
 + assertCell ( row . cf , Util . cellname ( ByteBufferUtil . bytes ( cellIndex ) , ByteBufferUtil . bytes ( " v2 " ) ) , cellIndex ) ; 
 + } 
 + 
 + / / After processing the 5 rows there should be no more rows to return 
 + List < Row > page = pager . fetchPage ( 1 ) ; 
 + assertTrue ( page . isEmpty ( ) ) ; 
 + } 
 + 
 + private void assertCell ( ColumnFamily cf , CellName cellName , int value ) 
 + { 
 + Cell cell = cf . getColumn ( cellName ) ; 
 + assertNotNull ( cell ) ; 
 + assertEquals ( value , ByteBufferUtil . toInt ( cell . value ( ) ) ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
