BLEU SCORE: 0.11598118436136108

TEST MSG: Compaction performance improvements
GENERATED MSG: merge from 1 . 0

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 2dc2021 . . 754b9f3 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Compaction performance improvements ( CASSANDRA - 14261 ) <nl> * Refactor Pair usage to avoid boxing ints / longs ( CASSANDRA - 14260 ) <nl> * Add options to nodetool tablestats to sort and limit output ( CASSANDRA - 13889 ) <nl> * Rename internals to reflect CQL vocabulary ( CASSANDRA - 14354 ) <nl> diff - - git a / src / java / org / apache / cassandra / concurrent / SEPWorker . java b / src / java / org / apache / cassandra / concurrent / SEPWorker . java <nl> index d3c87c6 . . 918349f 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / SEPWorker . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / SEPWorker . java <nl> @ @ - 17 , 6 + 17 , 7 @ @ <nl> * / <nl> package org . apache . cassandra . concurrent ; <nl> <nl> + import java . util . concurrent . ThreadLocalRandom ; <nl> import java . util . concurrent . TimeUnit ; <nl> import java . util . concurrent . atomic . AtomicReference ; <nl> import java . util . concurrent . locks . LockSupport ; <nl> @ @ - 230 , 7 + 231 , 7 @ @ final class SEPWorker extends AtomicReference < SEPWorker . Work > implements Runnabl <nl> / / we should always have a thread about to wake up , but most threads are sleeping <nl> long sleep = 10000L * pool . spinningCount . get ( ) ; <nl> sleep = Math . min ( 1000000 , sleep ) ; <nl> - sleep * = Math . random ( ) ; <nl> + sleep * = ThreadLocalRandom . current ( ) . nextDouble ( ) ; <nl> sleep = Math . max ( 10000 , sleep ) ; <nl> <nl> long start = System . nanoTime ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterators . java b / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterators . java <nl> index edb7833 . . f3c965a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterators . java <nl> + + + b / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterators . java <nl> @ @ - 139 , 10 + 139 , 19 @ @ public abstract class UnfilteredPartitionIterators <nl> { <nl> UnfilteredRowIterators . MergeListener rowListener = listener . getRowMergeListener ( partitionKey , toMerge ) ; <nl> <nl> + / / Make a single empty iterator object to merge , we don ' t need toMerge . size ( ) copiess <nl> + UnfilteredRowIterator empty = null ; <nl> + <nl> / / Replace nulls by empty iterators <nl> for ( int i = 0 ; i < toMerge . size ( ) ; i + + ) <nl> + { <nl> if ( toMerge . get ( i ) = = null ) <nl> - toMerge . set ( i , EmptyIterators . unfilteredRow ( metadata , partitionKey , isReverseOrder ) ) ; <nl> + { <nl> + if ( null = = empty ) <nl> + empty = EmptyIterators . unfilteredRow ( metadata , partitionKey , isReverseOrder ) ; <nl> + toMerge . set ( i , empty ) ; <nl> + } <nl> + } <nl> <nl> return UnfilteredRowIterators . merge ( toMerge , nowInSec , rowListener ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / rows / SerializationHelper . java b / src / java / org / apache / cassandra / db / rows / SerializationHelper . java <nl> index c7fb8e4 . . db23cb8 100644 <nl> - - - a / src / java / org / apache / cassandra / db / rows / SerializationHelper . java <nl> + + + b / src / java / org / apache / cassandra / db / rows / SerializationHelper . java <nl> @ @ - 51 , 6 + 51 , 7 @ @ public class SerializationHelper <nl> private final ColumnFilter columnsToFetch ; <nl> private ColumnFilter . Tester tester ; <nl> <nl> + private final boolean hasDroppedColumns ; <nl> private final Map < ByteBuffer , DroppedColumn > droppedColumns ; <nl> private DroppedColumn currentDroppedComplex ; <nl> <nl> @ @ - 61 , 6 + 62 , 7 @ @ public class SerializationHelper <nl> this . version = version ; <nl> this . columnsToFetch = columnsToFetch ; <nl> this . droppedColumns = metadata . droppedColumns ; <nl> + this . hasDroppedColumns = droppedColumns . size ( ) > 0 ; <nl> } <nl> <nl> public SerializationHelper ( TableMetadata metadata , int version , Flag flag ) <nl> @ @ - 126 , 6 + 128 , 9 @ @ public class SerializationHelper <nl> <nl> public boolean isDropped ( Cell cell , boolean isComplex ) <nl> { <nl> + if ( ! hasDroppedColumns ) <nl> + return false ; <nl> + <nl> DroppedColumn dropped = isComplex ? currentDroppedComplex : droppedColumns . get ( cell . column ( ) . name . bytes ) ; <nl> return dropped ! = null & & cell . timestamp ( ) < = dropped . droppedTime ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / schema / ColumnMetadata . java b / src / java / org / apache / cassandra / schema / ColumnMetadata . java <nl> index 3b55c03 . . 0380b35 100644 <nl> - - - a / src / java / org / apache / cassandra / schema / ColumnMetadata . java <nl> + + + b / src / java / org / apache / cassandra / schema / ColumnMetadata . java <nl> @ @ - 445 , 11 + 445 , 11 @ @ public final class ColumnMetadata extends ColumnSpecification implements Selecta <nl> } <nl> <nl> / * * <nl> - * Check if column is counter type . For thrift , it checks collection ' s value type <nl> + * Check if column is counter type . <nl> * / <nl> public boolean isCounterColumn ( ) <nl> { <nl> - if ( type instanceof CollectionType ) / / for thrift <nl> + if ( type instanceof CollectionType ) / / Possible with , for example , supercolumns <nl> return ( ( CollectionType ) type ) . valueComparator ( ) . isCounter ( ) ; <nl> return type . isCounter ( ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d518830 . . 52cc2c1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 29 , 7 + 29 , 7 @ @ <nl> * add scheduler JMX metrics ( CASSANDRA - 2962 ) <nl> * add block level checksum for compressed data ( CASSANDRA - 1717 ) <nl> * make column family backed column map pluggable and introduce unsynchronized <nl> - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) <nl> + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) <nl> * refactoring of the secondary index api ( CASSANDRA - 2982 ) <nl> * make CL > ONE reads wait for digest reconciliation before returning <nl> ( CASSANDRA - 2494 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> index c316a85 . . 71c7213 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor <nl> this . reversed = reversed ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public AbstractType < ? > getComparator ( ) <nl> { <nl> return comparator ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 1239d1c . . 38bc0d7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer <nl> this . cfm = cfm ; <nl> } <nl> <nl> - public ColumnFamily cloneMeShallow ( ) <nl> + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) <nl> { <nl> - ColumnFamily cf = ColumnFamily . create ( cfm ) ; <nl> + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; <nl> / / since deletion info is immutable , aliasing it is fine <nl> cf . deletionInfo . set ( deletionInfo . get ( ) ) ; <nl> return cf ; <nl> } <nl> <nl> + public ColumnFamily cloneMeShallow ( ) <nl> + { <nl> + return cloneMeShallow ( columns . getFactory ( ) ) ; <nl> + } <nl> + <nl> public AbstractType getSubComparator ( ) <nl> { <nl> IColumnSerializer s = getColumnSerializer ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 0bfd1c5 . . 552d3e9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> - * tombstones that are no longer relevant . * / <nl> + / * * <nl> + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> + * tombstones that are no longer relevant . <nl> + * The returned column family won ' t be thread safe . <nl> + * / <nl> ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) <nl> { <nl> / / special case slicing the entire row : <nl> @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; <nl> if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) <nl> { <nl> - ColumnFamily cf = cached . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> if ( sc ! = null ) <nl> cf . addColumn ( sc , HeapAllocator . instance ) ; <nl> return removeDeleted ( cf , gcBefore ) ; <nl> @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> <nl> IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; <nl> - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; <nl> / / TODO this is necessary because when we collate supercolumns together , we don ' t check <nl> / / their subcolumns for relevance , so we need to do a second prune post facto here . <nl> diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> index 37f5a60 . . 624dec7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns <nl> public ISortedColumns cloneMe ( ) ; <nl> <nl> / * * <nl> + * Returns the factory used for this ISortedColumns implementation . <nl> + * / <nl> + public Factory getFactory ( ) ; <nl> + <nl> + / * * <nl> * Adds a column to this column map . <nl> * If a column with the same name is already present in the map , it will <nl> * be replaced by the newly added column . <nl> diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> index cd2488a . . 13a111a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new ThreadSafeSortedColumns ( this ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> index 34e83dc . . 6c3fc42 100644 <nl> - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new TreeMapBackedSortedColumns ( this ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 2dc2021 . . 754b9f3 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Compaction performance improvements ( CASSANDRA - 14261 ) 
 * Refactor Pair usage to avoid boxing ints / longs ( CASSANDRA - 14260 ) 
 * Add options to nodetool tablestats to sort and limit output ( CASSANDRA - 13889 ) 
 * Rename internals to reflect CQL vocabulary ( CASSANDRA - 14354 ) 
 diff - - git a / src / java / org / apache / cassandra / concurrent / SEPWorker . java b / src / java / org / apache / cassandra / concurrent / SEPWorker . java 
 index d3c87c6 . . 918349f 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / SEPWorker . java 
 + + + b / src / java / org / apache / cassandra / concurrent / SEPWorker . java 
 @ @ - 17 , 6 + 17 , 7 @ @ 
 * / 
 package org . apache . cassandra . concurrent ; 
 
 + import java . util . concurrent . ThreadLocalRandom ; 
 import java . util . concurrent . TimeUnit ; 
 import java . util . concurrent . atomic . AtomicReference ; 
 import java . util . concurrent . locks . LockSupport ; 
 @ @ - 230 , 7 + 231 , 7 @ @ final class SEPWorker extends AtomicReference < SEPWorker . Work > implements Runnabl 
 / / we should always have a thread about to wake up , but most threads are sleeping 
 long sleep = 10000L * pool . spinningCount . get ( ) ; 
 sleep = Math . min ( 1000000 , sleep ) ; 
 - sleep * = Math . random ( ) ; 
 + sleep * = ThreadLocalRandom . current ( ) . nextDouble ( ) ; 
 sleep = Math . max ( 10000 , sleep ) ; 
 
 long start = System . nanoTime ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterators . java b / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterators . java 
 index edb7833 . . f3c965a 100644 
 - - - a / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterators . java 
 + + + b / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterators . java 
 @ @ - 139 , 10 + 139 , 19 @ @ public abstract class UnfilteredPartitionIterators 
 { 
 UnfilteredRowIterators . MergeListener rowListener = listener . getRowMergeListener ( partitionKey , toMerge ) ; 
 
 + / / Make a single empty iterator object to merge , we don ' t need toMerge . size ( ) copiess 
 + UnfilteredRowIterator empty = null ; 
 + 
 / / Replace nulls by empty iterators 
 for ( int i = 0 ; i < toMerge . size ( ) ; i + + ) 
 + { 
 if ( toMerge . get ( i ) = = null ) 
 - toMerge . set ( i , EmptyIterators . unfilteredRow ( metadata , partitionKey , isReverseOrder ) ) ; 
 + { 
 + if ( null = = empty ) 
 + empty = EmptyIterators . unfilteredRow ( metadata , partitionKey , isReverseOrder ) ; 
 + toMerge . set ( i , empty ) ; 
 + } 
 + } 
 
 return UnfilteredRowIterators . merge ( toMerge , nowInSec , rowListener ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / rows / SerializationHelper . java b / src / java / org / apache / cassandra / db / rows / SerializationHelper . java 
 index c7fb8e4 . . db23cb8 100644 
 - - - a / src / java / org / apache / cassandra / db / rows / SerializationHelper . java 
 + + + b / src / java / org / apache / cassandra / db / rows / SerializationHelper . java 
 @ @ - 51 , 6 + 51 , 7 @ @ public class SerializationHelper 
 private final ColumnFilter columnsToFetch ; 
 private ColumnFilter . Tester tester ; 
 
 + private final boolean hasDroppedColumns ; 
 private final Map < ByteBuffer , DroppedColumn > droppedColumns ; 
 private DroppedColumn currentDroppedComplex ; 
 
 @ @ - 61 , 6 + 62 , 7 @ @ public class SerializationHelper 
 this . version = version ; 
 this . columnsToFetch = columnsToFetch ; 
 this . droppedColumns = metadata . droppedColumns ; 
 + this . hasDroppedColumns = droppedColumns . size ( ) > 0 ; 
 } 
 
 public SerializationHelper ( TableMetadata metadata , int version , Flag flag ) 
 @ @ - 126 , 6 + 128 , 9 @ @ public class SerializationHelper 
 
 public boolean isDropped ( Cell cell , boolean isComplex ) 
 { 
 + if ( ! hasDroppedColumns ) 
 + return false ; 
 + 
 DroppedColumn dropped = isComplex ? currentDroppedComplex : droppedColumns . get ( cell . column ( ) . name . bytes ) ; 
 return dropped ! = null & & cell . timestamp ( ) < = dropped . droppedTime ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / schema / ColumnMetadata . java b / src / java / org / apache / cassandra / schema / ColumnMetadata . java 
 index 3b55c03 . . 0380b35 100644 
 - - - a / src / java / org / apache / cassandra / schema / ColumnMetadata . java 
 + + + b / src / java / org / apache / cassandra / schema / ColumnMetadata . java 
 @ @ - 445 , 11 + 445 , 11 @ @ public final class ColumnMetadata extends ColumnSpecification implements Selecta 
 } 
 
 / * * 
 - * Check if column is counter type . For thrift , it checks collection ' s value type 
 + * Check if column is counter type . 
 * / 
 public boolean isCounterColumn ( ) 
 { 
 - if ( type instanceof CollectionType ) / / for thrift 
 + if ( type instanceof CollectionType ) / / Possible with , for example , supercolumns 
 return ( ( CollectionType ) type ) . valueComparator ( ) . isCounter ( ) ; 
 return type . isCounter ( ) ; 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d518830 . . 52cc2c1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 29 , 7 + 29 , 7 @ @ 
 * add scheduler JMX metrics ( CASSANDRA - 2962 ) 
 * add block level checksum for compressed data ( CASSANDRA - 1717 ) 
 * make column family backed column map pluggable and introduce unsynchronized 
 - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) 
 + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) 
 * refactoring of the secondary index api ( CASSANDRA - 2982 ) 
 * make CL > ONE reads wait for digest reconciliation before returning 
 ( CASSANDRA - 2494 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 index c316a85 . . 71c7213 100644 
 - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor 
 this . reversed = reversed ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public AbstractType < ? > getComparator ( ) 
 { 
 return comparator ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 1239d1c . . 38bc0d7 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer 
 this . cfm = cfm ; 
 } 
 
 - public ColumnFamily cloneMeShallow ( ) 
 + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) 
 { 
 - ColumnFamily cf = ColumnFamily . create ( cfm ) ; 
 + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; 
 / / since deletion info is immutable , aliasing it is fine 
 cf . deletionInfo . set ( deletionInfo . get ( ) ) ; 
 return cf ; 
 } 
 
 + public ColumnFamily cloneMeShallow ( ) 
 + { 
 + return cloneMeShallow ( columns . getFactory ( ) ) ; 
 + } 
 + 
 public AbstractType getSubComparator ( ) 
 { 
 IColumnSerializer s = getColumnSerializer ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 0bfd1c5 . . 552d3e9 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 - * tombstones that are no longer relevant . * / 
 + / * * 
 + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 + * tombstones that are no longer relevant . 
 + * The returned column family won ' t be thread safe . 
 + * / 
 ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) 
 { 
 / / special case slicing the entire row : 
 @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; 
 if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) 
 { 
 - ColumnFamily cf = cached . cloneMeShallow ( ) ; 
 + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 if ( sc ! = null ) 
 cf . addColumn ( sc , HeapAllocator . instance ) ; 
 return removeDeleted ( cf , gcBefore ) ; 
 @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 
 IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; 
 - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; 
 + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; 
 / / TODO this is necessary because when we collate supercolumns together , we don ' t check 
 / / their subcolumns for relevance , so we need to do a second prune post facto here . 
 diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 index 37f5a60 . . 624dec7 100644 
 - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns 
 public ISortedColumns cloneMe ( ) ; 
 
 / * * 
 + * Returns the factory used for this ISortedColumns implementation . 
 + * / 
 + public Factory getFactory ( ) ; 
 + 
 + / * * 
 * Adds a column to this column map . 
 * If a column with the same name is already present in the map , it will 
 * be replaced by the newly added column . 
 diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 index cd2488a . . 13a111a 100644 
 - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new ThreadSafeSortedColumns ( this ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 index 34e83dc . . 6c3fc42 100644 
 - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new TreeMapBackedSortedColumns ( this ) ;
