BLEU SCORE: 0.04767707020457096

TEST MSG: Clarify CQL literal handling of JSON in CQL3 docs
GENERATED MSG: Add ALLOW FILTERING to CQL3 documentation

TEST DIFF (one line): diff - - git a / doc / cql3 / CQL . textile b / doc / cql3 / CQL . textile <nl> index ca09627 . . 773ff91 100644 <nl> - - - a / doc / cql3 / CQL . textile <nl> + + + b / doc / cql3 / CQL . textile <nl> @ @ - 2000 , 7 + 2000 , 9 @ @ Any columns which are ommitted from the @ JSON @ map will be defaulted to a @ NULL @ <nl> <nl> h3 ( # jsonEncoding ) . JSON Encoding of Cassandra Data Types <nl> <nl> - Where possible , Cassandra will represent and accept data types in their native @ JSON @ representation . Cassandra will also accept string representations matching the CQL literal format for all data types . The following table describes the encodings that Cassandra will accept in @ INSERT JSON @ values ( and @ fromJson ( ) @ arguments ) as well as the format Cassandra will use when returning data for @ SELECT JSON @ statements ( and @ fromJson ( ) @ ) : <nl> + Where possible , Cassandra will represent and accept data types in their native @ JSON @ representation . Cassandra will also accept string representations matching the CQL literal format for all single - field types . For example , floats , ints , UUIDs , and dates can be represented by CQL literal strings . However , compound types , such as collections , tuples , and user - defined types must be represented by native @ JSON @ collections ( maps and lists ) or a JSON - encoded string representation of the collection . <nl> + <nl> + The following table describes the encodings that Cassandra will accept in @ INSERT JSON @ values ( and @ fromJson ( ) @ arguments ) as well as the format Cassandra will use when returning data for @ SELECT JSON @ statements ( and @ fromJson ( ) @ ) : <nl> <nl> | _ . type | _ . formats accepted | _ . return format | _ . notes | <nl> | @ ascii @ | string | string | Uses JSON ' s @ \ u @ character escape |
NEAREST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / KeyCollisionTest . java b / test / unit / org / apache / cassandra / db / KeyCollisionTest . java <nl> index e9b8ef3 . . 4d86bb7 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / KeyCollisionTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / KeyCollisionTest . java <nl> @ @ - 28 , 6 + 28 , 8 @ @ import org . junit . Test ; <nl> import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . db . columniterator . IdentityQueryFilter ; <nl> import org . apache . cassandra . db . filter . QueryPath ; <nl> + import org . apache . cassandra . db . marshal . AbstractType ; <nl> + import org . apache . cassandra . db . marshal . IntegerType ; <nl> import org . apache . cassandra . dht . * ; <nl> import org . apache . cassandra . config . * ; <nl> import org . apache . cassandra . service . StorageService ; <nl> @ @ - 206 , 5 + 208 , 10 @ @ public class KeyCollisionTest extends SchemaLoader <nl> <nl> return allTokens ; <nl> } <nl> + <nl> + public AbstractType < ? > getTokenValidator ( ) <nl> + { <nl> + return IntegerType . instance ; <nl> + } <nl> } <nl> }

TEST DIFF:
diff - - git a / doc / cql3 / CQL . textile b / doc / cql3 / CQL . textile 
 index ca09627 . . 773ff91 100644 
 - - - a / doc / cql3 / CQL . textile 
 + + + b / doc / cql3 / CQL . textile 
 @ @ - 2000 , 7 + 2000 , 9 @ @ Any columns which are ommitted from the @ JSON @ map will be defaulted to a @ NULL @ 
 
 h3 ( # jsonEncoding ) . JSON Encoding of Cassandra Data Types 
 
 - Where possible , Cassandra will represent and accept data types in their native @ JSON @ representation . Cassandra will also accept string representations matching the CQL literal format for all data types . The following table describes the encodings that Cassandra will accept in @ INSERT JSON @ values ( and @ fromJson ( ) @ arguments ) as well as the format Cassandra will use when returning data for @ SELECT JSON @ statements ( and @ fromJson ( ) @ ) : 
 + Where possible , Cassandra will represent and accept data types in their native @ JSON @ representation . Cassandra will also accept string representations matching the CQL literal format for all single - field types . For example , floats , ints , UUIDs , and dates can be represented by CQL literal strings . However , compound types , such as collections , tuples , and user - defined types must be represented by native @ JSON @ collections ( maps and lists ) or a JSON - encoded string representation of the collection . 
 + 
 + The following table describes the encodings that Cassandra will accept in @ INSERT JSON @ values ( and @ fromJson ( ) @ arguments ) as well as the format Cassandra will use when returning data for @ SELECT JSON @ statements ( and @ fromJson ( ) @ ) : 
 
 | _ . type | _ . formats accepted | _ . return format | _ . notes | 
 | @ ascii @ | string | string | Uses JSON ' s @ \ u @ character escape |

NEAREST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / KeyCollisionTest . java b / test / unit / org / apache / cassandra / db / KeyCollisionTest . java 
 index e9b8ef3 . . 4d86bb7 100644 
 - - - a / test / unit / org / apache / cassandra / db / KeyCollisionTest . java 
 + + + b / test / unit / org / apache / cassandra / db / KeyCollisionTest . java 
 @ @ - 28 , 6 + 28 , 8 @ @ import org . junit . Test ; 
 import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . db . columniterator . IdentityQueryFilter ; 
 import org . apache . cassandra . db . filter . QueryPath ; 
 + import org . apache . cassandra . db . marshal . AbstractType ; 
 + import org . apache . cassandra . db . marshal . IntegerType ; 
 import org . apache . cassandra . dht . * ; 
 import org . apache . cassandra . config . * ; 
 import org . apache . cassandra . service . StorageService ; 
 @ @ - 206 , 5 + 208 , 10 @ @ public class KeyCollisionTest extends SchemaLoader 
 
 return allTokens ; 
 } 
 + 
 + public AbstractType < ? > getTokenValidator ( ) 
 + { 
 + return IntegerType . instance ; 
 + } 
 } 
 }
