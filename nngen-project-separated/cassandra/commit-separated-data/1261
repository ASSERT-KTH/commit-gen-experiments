BLEU SCORE: 0.026279617104084448

TEST MSG: Call forceStaticInitialization first in activate and make sure offline tools properly handle DatabaseDescriptor static exceptions
GENERATED MSG: don ' t declare throwing exceptions that aren ' t thrown

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 215bd76 . . efae4ab 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 3 <nl> + * Avoid NoClassDefFoundError during DataDescriptor initialization on windows ( CASSANDRA - 10412 ) <nl> * Preserve case of quoted Role & User names ( CASSANDRA - 10394 ) <nl> * cqlsh pg - style - strings broken ( CASSANDRA - 10484 ) <nl> * Make Hadoop CF splits more polite to custom orderered partitioners ( CASSANDRA - 10400 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index 075c8f7 . . 2a23550 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 480 , 19 + 480 , 20 @ @ public class CassandraDaemon <nl> * / <nl> public void activate ( ) <nl> { <nl> - String pidFile = System . getProperty ( " cassandra - pidfile " ) ; <nl> - <nl> - if ( FBUtilities . isWindows ( ) ) <nl> - { <nl> - / / We need to adjust the system timer on windows from the default 15ms down to the minimum of 1ms as this <nl> - / / impacts timer intervals , thread scheduling , driver interrupts , etc . <nl> - WindowsTimer . startTimerPeriod ( DatabaseDescriptor . getWindowsTimerInterval ( ) ) ; <nl> - } <nl> - <nl> + / / Do not put any references to DatabaseDescriptor above the forceStaticInitialization call . <nl> try <nl> { <nl> try <nl> { <nl> + DatabaseDescriptor . forceStaticInitialization ( ) ; <nl> + } <nl> + catch ( ExceptionInInitializerError e ) <nl> + { <nl> + throw e . getCause ( ) ; <nl> + } <nl> + <nl> + try <nl> + { <nl> MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> mbs . registerMBean ( new StandardMBean ( new NativeAccess ( ) , NativeAccessMBean . class ) , new ObjectName ( MBEAN _ NAME ) ) ; <nl> } <nl> @ @ - 502 , 14 + 503 , 17 @ @ public class CassandraDaemon <nl> / / Allow the server to start even if the bean can ' t be registered <nl> } <nl> <nl> - try { <nl> - DatabaseDescriptor . forceStaticInitialization ( ) ; <nl> - } catch ( ExceptionInInitializerError e ) { <nl> - throw e . getCause ( ) ; <nl> + if ( FBUtilities . isWindows ( ) ) <nl> + { <nl> + / / We need to adjust the system timer on windows from the default 15ms down to the minimum of 1ms as this <nl> + / / impacts timer intervals , thread scheduling , driver interrupts , etc . <nl> + WindowsTimer . startTimerPeriod ( DatabaseDescriptor . getWindowsTimerInterval ( ) ) ; <nl> } <nl> <nl> setup ( ) ; <nl> <nl> + String pidFile = System . getProperty ( " cassandra - pidfile " ) ; <nl> + <nl> if ( pidFile ! = null ) <nl> { <nl> new File ( pidFile ) . deleteOnExit ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / SSTableExpiredBlockers . java b / src / java / org / apache / cassandra / tools / SSTableExpiredBlockers . java <nl> index ab9305e . . 0d8c5e5 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / SSTableExpiredBlockers . java <nl> + + + b / src / java / org / apache / cassandra / tools / SSTableExpiredBlockers . java <nl> @ @ - 24 , 7 + 24 , 6 @ @ import java . util . HashSet ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> <nl> - import com . google . common . base . Throwables ; <nl> import com . google . common . collect . ArrayListMultimap ; <nl> import com . google . common . collect . Multimap ; <nl> <nl> @ @ - 56 , 6 + 55 , 9 @ @ public class SSTableExpiredBlockers <nl> out . println ( " Usage : sstableexpiredblockers < keyspace > < table > " ) ; <nl> System . exit ( 1 ) ; <nl> } <nl> + <nl> + Util . initDatabaseDescriptor ( ) ; <nl> + <nl> String keyspace = args [ args . length - 2 ] ; <nl> String columnfamily = args [ args . length - 1 ] ; <nl> Schema . instance . loadFromDisk ( false ) ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / SSTableExport . java b / src / java / org / apache / cassandra / tools / SSTableExport . java <nl> index 9f833e7 . . 46155c0 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / SSTableExport . java <nl> + + + b / src / java / org / apache / cassandra / tools / SSTableExport . java <nl> @ @ - 405 , 6 + 405 , 7 @ @ public class SSTableExport <nl> System . exit ( 1 ) ; <nl> } <nl> <nl> + Util . initDatabaseDescriptor ( ) ; <nl> <nl> String [ ] keys = cmd . getOptionValues ( KEY _ OPTION ) ; <nl> String [ ] excludes = cmd . getOptionValues ( EXCLUDEKEY _ OPTION ) ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / SSTableImport . java b / src / java / org / apache / cassandra / tools / SSTableImport . java <nl> index b2d63aa . . 817dfef 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / SSTableImport . java <nl> + + + b / src / java / org / apache / cassandra / tools / SSTableImport . java <nl> @ @ - 511 , 6 + 511 , 8 @ @ public class SSTableImport <nl> isSorted = true ; <nl> } <nl> <nl> + Util . initDatabaseDescriptor ( ) ; <nl> + <nl> Schema . instance . loadFromDisk ( false ) ; <nl> if ( Schema . instance . getNonSystemKeyspaces ( ) . size ( ) < 1 ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / tools / SSTableLevelResetter . java b / src / java / org / apache / cassandra / tools / SSTableLevelResetter . java <nl> index d73a325 . . 9f0af05 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / SSTableLevelResetter . java <nl> + + + b / src / java / org / apache / cassandra / tools / SSTableLevelResetter . java <nl> @ @ - 56 , 6 + 56 , 8 @ @ public class SSTableLevelResetter <nl> System . exit ( 1 ) ; <nl> } <nl> <nl> + Util . initDatabaseDescriptor ( ) ; <nl> + <nl> / / TODO several daemon threads will run from here . <nl> / / So we have to explicitly call System . exit . <nl> try <nl> diff - - git a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java <nl> index 6330915 . . 2665f40 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java <nl> + + + b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java <nl> @ @ - 43 , 6 + 43 , 8 @ @ public class SSTableMetadataViewer <nl> System . exit ( 1 ) ; <nl> } <nl> <nl> + Util . initDatabaseDescriptor ( ) ; <nl> + <nl> for ( String fname : args ) <nl> { <nl> if ( new File ( fname ) . exists ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / SSTableOfflineRelevel . java b / src / java / org / apache / cassandra / tools / SSTableOfflineRelevel . java <nl> index f7e477f . . 71e4cfc 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / SSTableOfflineRelevel . java <nl> + + + b / src / java / org / apache / cassandra / tools / SSTableOfflineRelevel . java <nl> @ @ - 83 , 6 + 83 , 9 @ @ public class SSTableOfflineRelevel <nl> out . println ( " Usage : sstableofflinerelevel [ - - dry - run ] < keyspace > < columnfamily > " ) ; <nl> System . exit ( 1 ) ; <nl> } <nl> + <nl> + Util . initDatabaseDescriptor ( ) ; <nl> + <nl> boolean dryRun = args [ 0 ] . equals ( " - - dry - run " ) ; <nl> String keyspace = args [ args . length - 2 ] ; <nl> String columnfamily = args [ args . length - 1 ] ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / SSTableRepairedAtSetter . java b / src / java / org / apache / cassandra / tools / SSTableRepairedAtSetter . java <nl> index 2ddb632 . . ff362cc 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / SSTableRepairedAtSetter . java <nl> + + + b / src / java / org / apache / cassandra / tools / SSTableRepairedAtSetter . java <nl> @ @ - 63 , 6 + 63 , 8 @ @ public class SSTableRepairedAtSetter <nl> System . exit ( 1 ) ; <nl> } <nl> <nl> + Util . initDatabaseDescriptor ( ) ; <nl> + <nl> boolean setIsRepaired = args [ 1 ] . equals ( " - - is - repaired " ) ; <nl> <nl> List < String > fileNames ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> index cd87d8b . . 3551b3d 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> + + + b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> @ @ - 54 , 6 + 54 , 8 @ @ public class StandaloneScrubber <nl> public static void main ( String args [ ] ) <nl> { <nl> Options options = Options . parseArgs ( args ) ; <nl> + Util . initDatabaseDescriptor ( ) ; <nl> + <nl> try <nl> { <nl> / / load keyspace descriptions . <nl> diff - - git a / src / java / org / apache / cassandra / tools / StandaloneSplitter . java b / src / java / org / apache / cassandra / tools / StandaloneSplitter . java <nl> index 4545ab6 . . 95fed3c 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / StandaloneSplitter . java <nl> + + + b / src / java / org / apache / cassandra / tools / StandaloneSplitter . java <nl> @ @ - 52 , 6 + 52 , 8 @ @ public class StandaloneSplitter <nl> public static void main ( String args [ ] ) <nl> { <nl> Options options = Options . parseArgs ( args ) ; <nl> + Util . initDatabaseDescriptor ( ) ; <nl> + <nl> try <nl> { <nl> / / load keyspace descriptions . <nl> diff - - git a / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java b / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java <nl> index c5dfba0 . . 2c2a7e0 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java <nl> + + + b / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java <nl> @ @ - 48 , 6 + 48 , 8 @ @ public class StandaloneUpgrader <nl> public static void main ( String args [ ] ) <nl> { <nl> Options options = Options . parseArgs ( args ) ; <nl> + Util . initDatabaseDescriptor ( ) ; <nl> + <nl> try <nl> { <nl> / / load keyspace descriptions . <nl> diff - - git a / src / java / org / apache / cassandra / tools / StandaloneVerifier . java b / src / java / org / apache / cassandra / tools / StandaloneVerifier . java <nl> index f71f58d . . fb7f218 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / StandaloneVerifier . java <nl> + + + b / src / java / org / apache / cassandra / tools / StandaloneVerifier . java <nl> @ @ - 52 , 6 + 52 , 8 @ @ public class StandaloneVerifier <nl> public static void main ( String args [ ] ) <nl> { <nl> Options options = Options . parseArgs ( args ) ; <nl> + Util . initDatabaseDescriptor ( ) ; <nl> + <nl> try <nl> { <nl> / / load keyspace descriptions . <nl> diff - - git a / src / java / org / apache / cassandra / tools / Util . java b / src / java / org / apache / cassandra / tools / Util . java <nl> new file mode 100644 <nl> index 0000000 . . 6e23361 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / tools / Util . java <nl> @ @ - 0 , 0 + 1 , 58 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . tools ; <nl> + <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + <nl> + public final class Util <nl> + { <nl> + private Util ( ) <nl> + { <nl> + } <nl> + <nl> + / * * <nl> + * This is used by standalone tools to force static initialization of DatabaseDescriptor , and fail if configuration <nl> + * is bad . <nl> + * / <nl> + public static void initDatabaseDescriptor ( ) <nl> + { <nl> + try <nl> + { <nl> + DatabaseDescriptor . forceStaticInitialization ( ) ; <nl> + } <nl> + catch ( ExceptionInInitializerError e ) <nl> + { <nl> + Throwable cause = e . getCause ( ) ; <nl> + boolean logStackTrace = ! ( cause instanceof ConfigurationException ) | | ( ( ConfigurationException ) cause ) . logStackTrace ; <nl> + System . out . println ( " Exception ( " + cause . getClass ( ) . getName ( ) + " ) encountered during startup : " + cause . getMessage ( ) ) ; <nl> + <nl> + if ( logStackTrace ) <nl> + { <nl> + cause . printStackTrace ( ) ; <nl> + System . exit ( 3 ) ; <nl> + } <nl> + else <nl> + { <nl> + System . err . println ( cause . getMessage ( ) ) ; <nl> + System . exit ( 3 ) ; <nl> + } <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index aad4dd3 . . 89f4c77 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 485 , 7 + 485 , 7 @ @ public class DatabaseDescriptor <nl> } <nl> <nl> / * * load keyspace ( table ) definitions , but do not initialize the table instances . * / <nl> - public static void loadSchemas ( ) throws IOException <nl> + public static void loadSchemas ( ) <nl> { <nl> ColumnFamilyStore schemaCFS = SystemTable . schemaCFS ( SystemTable . SCHEMA _ KEYSPACES _ CF ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java <nl> index 0c4d9ca . . 71b22d8 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java <nl> @ @ - 58 , 7 + 58 , 7 @ @ public class CreateKeyspaceStatement extends SchemaAlteringStatement <nl> return name ; <nl> } <nl> <nl> - public void checkAccess ( ClientState state ) throws UnauthorizedException , InvalidRequestException <nl> + public void checkAccess ( ClientState state ) throws UnauthorizedException <nl> { <nl> state . hasAllKeyspacesAccess ( Permission . CREATE ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index 6f33309 . . 93571fa 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 147 , 22 + 147 , 11 @ @ public class SelectStatement implements CQLStatement <nl> <nl> public ResultMessage . Rows executeInternal ( QueryState state ) throws RequestExecutionException , RequestValidationException <nl> { <nl> - try <nl> - { <nl> - List < Row > rows = isKeyRange | | usesSecondaryIndexing <nl> - ? RangeSliceVerbHandler . executeLocally ( getRangeCommand ( Collections . < ByteBuffer > emptyList ( ) ) ) <nl> - : readLocally ( keyspace ( ) , getSliceCommands ( Collections . < ByteBuffer > emptyList ( ) ) ) ; <nl> + List < Row > rows = isKeyRange | | usesSecondaryIndexing <nl> + ? RangeSliceVerbHandler . executeLocally ( getRangeCommand ( Collections . < ByteBuffer > emptyList ( ) ) ) <nl> + : readLocally ( keyspace ( ) , getSliceCommands ( Collections . < ByteBuffer > emptyList ( ) ) ) ; <nl> <nl> - return processResults ( rows , Collections . < ByteBuffer > emptyList ( ) ) ; <nl> - } <nl> - catch ( ExecutionException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - catch ( InterruptedException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + return processResults ( rows , Collections . < ByteBuffer > emptyList ( ) ) ; <nl> } <nl> <nl> public ResultSet process ( List < Row > rows ) throws InvalidRequestException <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index 3d5240f . . ae8e2cc 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 226 , 15 + 226 , 7 @ @ public class CassandraDaemon <nl> } <nl> <nl> / / load keyspace descriptions . <nl> - try <nl> - { <nl> - DatabaseDescriptor . loadSchemas ( ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - logger . error ( " Fatal exception during initialization " , e ) ; <nl> - System . exit ( 100 ) ; <nl> - } <nl> + DatabaseDescriptor . loadSchemas ( ) ; <nl> <nl> / / clean up debris in the rest of the tables <nl> for ( String table : Schema . instance . getTables ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / service / ClientState . java b / src / java / org / apache / cassandra / service / ClientState . java <nl> index e6b0f97 . . b6769a3 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ClientState . java <nl> + + + b / src / java / org / apache / cassandra / service / ClientState . java <nl> @ @ - 128 , 7 + 128 , 7 @ @ public class ClientState <nl> this . user = user ; <nl> } <nl> <nl> - public void hasAllKeyspacesAccess ( Permission perm ) throws UnauthorizedException , InvalidRequestException <nl> + public void hasAllKeyspacesAccess ( Permission perm ) throws UnauthorizedException <nl> { <nl> if ( internalCall ) <nl> return ; <nl> diff - - git a / src / java / org / apache / cassandra / service / RangeSliceVerbHandler . java b / src / java / org / apache / cassandra / service / RangeSliceVerbHandler . java <nl> index a095680 . . b6f257e 100644 <nl> - - - a / src / java / org / apache / cassandra / service / RangeSliceVerbHandler . java <nl> + + + b / src / java / org / apache / cassandra / service / RangeSliceVerbHandler . java <nl> @ @ - 18 , 10 + 18 , 6 @ @ <nl> package org . apache . cassandra . service ; <nl> <nl> import java . util . List ; <nl> - import java . util . concurrent . ExecutionException ; <nl> - <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . RangeSliceCommand ; <nl> @ @ - 35 , 9 + 31 , 7 @ @ import org . apache . cassandra . tracing . Tracing ; <nl> <nl> public class RangeSliceVerbHandler implements IVerbHandler < RangeSliceCommand > <nl> { <nl> - private static final Logger logger = LoggerFactory . getLogger ( RangeSliceVerbHandler . class ) ; <nl> - <nl> - public static List < Row > executeLocally ( RangeSliceCommand command ) throws ExecutionException , InterruptedException <nl> + public static List < Row > executeLocally ( RangeSliceCommand command ) <nl> { <nl> ColumnFamilyStore cfs = Table . open ( command . keyspace ) . getColumnFamilyStore ( command . column _ family ) ; <nl> if ( cfs . indexManager . hasIndexFor ( command . row _ filter ) ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index 8d2dc60 . . 58fa6e3 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 294 , 7 + 294 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> * nodes have seen the mostRecentCommit . Otherwise , return null . <nl> * / <nl> private static UUID beginAndRepairPaxos ( ByteBuffer key , CFMetaData metadata , List < InetAddress > liveEndpoints , int requiredParticipants ) <nl> - throws WriteTimeoutException , UnavailableException <nl> + throws WriteTimeoutException <nl> { <nl> UUID ballot = UUIDGen . getTimeUUID ( ) ; <nl> <nl> @ @ - 344 , 7 + 344 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> } <nl> <nl> private static PrepareCallback preparePaxos ( Commit toPrepare , List < InetAddress > endpoints , int requiredParticipants ) <nl> - throws WriteTimeoutException , UnavailableException <nl> + throws WriteTimeoutException <nl> { <nl> PrepareCallback callback = new PrepareCallback ( toPrepare . key , toPrepare . update . metadata ( ) , requiredParticipants ) ; <nl> MessageOut < Commit > message = new MessageOut < Commit > ( MessagingService . Verb . PAXOS _ PREPARE , toPrepare , Commit . serializer ) ; <nl> @ @ - 1244 , 7 + 1244 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> this . handler = handler ; <nl> } <nl> <nl> - protected void runMayThrow ( ) throws ExecutionException , InterruptedException <nl> + protected void runMayThrow ( ) <nl> { <nl> logger . trace ( " LocalReadRunnable reading { } " , command ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / tools / SSTableExport . java b / src / java / org / apache / cassandra / tools / SSTableExport . java <nl> index 4b91dd8 . . 9e8bb3e 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / SSTableExport . java <nl> + + + b / src / java / org / apache / cassandra / tools / SSTableExport . java <nl> @ @ - 399 , 7 + 399 , 7 @ @ public class SSTableExport <nl> * @ throws IOException on failure to open / read / write files or output streams <nl> * @ throws ConfigurationException on configuration failure ( wrong params given ) <nl> * / <nl> - public static void main ( String [ ] args ) throws IOException , ConfigurationException <nl> + public static void main ( String [ ] args ) throws ConfigurationException <nl> { <nl> String usage = String . format ( " Usage : % s < sstable > [ - k key [ - k key [ . . . ] ] - x key [ - x key [ . . . ] ] ] % n " , SSTableExport . class . getName ( ) ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / tools / SSTableImport . java b / src / java / org / apache / cassandra / tools / SSTableImport . java <nl> index 8c58d70 . . f25a60b 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / SSTableImport . java <nl> + + + b / src / java / org / apache / cassandra / tools / SSTableImport . java <nl> @ @ - 487 , 7 + 487 , 7 @ @ public class SSTableImport <nl> * @ throws ParseException on failure to parse JSON input <nl> * @ throws ConfigurationException on configuration error . <nl> * / <nl> - public static void main ( String [ ] args ) throws IOException , ParseException , ConfigurationException <nl> + public static void main ( String [ ] args ) throws ParseException , ConfigurationException <nl> { <nl> CommandLineParser parser = new PosixParser ( ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> index 9db565d . . 4ff06db 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> + + + b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> @ @ - 51 , 7 + 51 , 7 @ @ public class StandaloneScrubber <nl> private static final String HELP _ OPTION = " help " ; <nl> private static final String MANIFEST _ CHECK _ OPTION = " manifest - check " ; <nl> <nl> - public static void main ( String args [ ] ) throws IOException <nl> + public static void main ( String args [ ] ) <nl> { <nl> Options options = Options . parseArgs ( args ) ; <nl> try <nl> diff - - git a / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java b / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java <nl> index 513b808 . . 4433b57 100644 <nl> - - - a / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java <nl> + + + b / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java <nl> @ @ - 67 , 7 + 67 , 7 @ @ public class DatabaseDescriptorTest <nl> <nl> / / this came as a result of CASSANDRA - 995 <nl> @ Test <nl> - public void testTransKsMigration ( ) throws IOException , ConfigurationException <nl> + public void testTransKsMigration ( ) throws ConfigurationException <nl> { <nl> SchemaLoader . cleanupAndLeaveDirs ( ) ; <nl> DatabaseDescriptor . loadSchemas ( ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 215bd76 . . efae4ab 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 3 
 + * Avoid NoClassDefFoundError during DataDescriptor initialization on windows ( CASSANDRA - 10412 ) 
 * Preserve case of quoted Role & User names ( CASSANDRA - 10394 ) 
 * cqlsh pg - style - strings broken ( CASSANDRA - 10484 ) 
 * Make Hadoop CF splits more polite to custom orderered partitioners ( CASSANDRA - 10400 ) 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index 075c8f7 . . 2a23550 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 480 , 19 + 480 , 20 @ @ public class CassandraDaemon 
 * / 
 public void activate ( ) 
 { 
 - String pidFile = System . getProperty ( " cassandra - pidfile " ) ; 
 - 
 - if ( FBUtilities . isWindows ( ) ) 
 - { 
 - / / We need to adjust the system timer on windows from the default 15ms down to the minimum of 1ms as this 
 - / / impacts timer intervals , thread scheduling , driver interrupts , etc . 
 - WindowsTimer . startTimerPeriod ( DatabaseDescriptor . getWindowsTimerInterval ( ) ) ; 
 - } 
 - 
 + / / Do not put any references to DatabaseDescriptor above the forceStaticInitialization call . 
 try 
 { 
 try 
 { 
 + DatabaseDescriptor . forceStaticInitialization ( ) ; 
 + } 
 + catch ( ExceptionInInitializerError e ) 
 + { 
 + throw e . getCause ( ) ; 
 + } 
 + 
 + try 
 + { 
 MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 mbs . registerMBean ( new StandardMBean ( new NativeAccess ( ) , NativeAccessMBean . class ) , new ObjectName ( MBEAN _ NAME ) ) ; 
 } 
 @ @ - 502 , 14 + 503 , 17 @ @ public class CassandraDaemon 
 / / Allow the server to start even if the bean can ' t be registered 
 } 
 
 - try { 
 - DatabaseDescriptor . forceStaticInitialization ( ) ; 
 - } catch ( ExceptionInInitializerError e ) { 
 - throw e . getCause ( ) ; 
 + if ( FBUtilities . isWindows ( ) ) 
 + { 
 + / / We need to adjust the system timer on windows from the default 15ms down to the minimum of 1ms as this 
 + / / impacts timer intervals , thread scheduling , driver interrupts , etc . 
 + WindowsTimer . startTimerPeriod ( DatabaseDescriptor . getWindowsTimerInterval ( ) ) ; 
 } 
 
 setup ( ) ; 
 
 + String pidFile = System . getProperty ( " cassandra - pidfile " ) ; 
 + 
 if ( pidFile ! = null ) 
 { 
 new File ( pidFile ) . deleteOnExit ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / tools / SSTableExpiredBlockers . java b / src / java / org / apache / cassandra / tools / SSTableExpiredBlockers . java 
 index ab9305e . . 0d8c5e5 100644 
 - - - a / src / java / org / apache / cassandra / tools / SSTableExpiredBlockers . java 
 + + + b / src / java / org / apache / cassandra / tools / SSTableExpiredBlockers . java 
 @ @ - 24 , 7 + 24 , 6 @ @ import java . util . HashSet ; 
 import java . util . Map ; 
 import java . util . Set ; 
 
 - import com . google . common . base . Throwables ; 
 import com . google . common . collect . ArrayListMultimap ; 
 import com . google . common . collect . Multimap ; 
 
 @ @ - 56 , 6 + 55 , 9 @ @ public class SSTableExpiredBlockers 
 out . println ( " Usage : sstableexpiredblockers < keyspace > < table > " ) ; 
 System . exit ( 1 ) ; 
 } 
 + 
 + Util . initDatabaseDescriptor ( ) ; 
 + 
 String keyspace = args [ args . length - 2 ] ; 
 String columnfamily = args [ args . length - 1 ] ; 
 Schema . instance . loadFromDisk ( false ) ; 
 diff - - git a / src / java / org / apache / cassandra / tools / SSTableExport . java b / src / java / org / apache / cassandra / tools / SSTableExport . java 
 index 9f833e7 . . 46155c0 100644 
 - - - a / src / java / org / apache / cassandra / tools / SSTableExport . java 
 + + + b / src / java / org / apache / cassandra / tools / SSTableExport . java 
 @ @ - 405 , 6 + 405 , 7 @ @ public class SSTableExport 
 System . exit ( 1 ) ; 
 } 
 
 + Util . initDatabaseDescriptor ( ) ; 
 
 String [ ] keys = cmd . getOptionValues ( KEY _ OPTION ) ; 
 String [ ] excludes = cmd . getOptionValues ( EXCLUDEKEY _ OPTION ) ; 
 diff - - git a / src / java / org / apache / cassandra / tools / SSTableImport . java b / src / java / org / apache / cassandra / tools / SSTableImport . java 
 index b2d63aa . . 817dfef 100644 
 - - - a / src / java / org / apache / cassandra / tools / SSTableImport . java 
 + + + b / src / java / org / apache / cassandra / tools / SSTableImport . java 
 @ @ - 511 , 6 + 511 , 8 @ @ public class SSTableImport 
 isSorted = true ; 
 } 
 
 + Util . initDatabaseDescriptor ( ) ; 
 + 
 Schema . instance . loadFromDisk ( false ) ; 
 if ( Schema . instance . getNonSystemKeyspaces ( ) . size ( ) < 1 ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / tools / SSTableLevelResetter . java b / src / java / org / apache / cassandra / tools / SSTableLevelResetter . java 
 index d73a325 . . 9f0af05 100644 
 - - - a / src / java / org / apache / cassandra / tools / SSTableLevelResetter . java 
 + + + b / src / java / org / apache / cassandra / tools / SSTableLevelResetter . java 
 @ @ - 56 , 6 + 56 , 8 @ @ public class SSTableLevelResetter 
 System . exit ( 1 ) ; 
 } 
 
 + Util . initDatabaseDescriptor ( ) ; 
 + 
 / / TODO several daemon threads will run from here . 
 / / So we have to explicitly call System . exit . 
 try 
 diff - - git a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java 
 index 6330915 . . 2665f40 100644 
 - - - a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java 
 + + + b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java 
 @ @ - 43 , 6 + 43 , 8 @ @ public class SSTableMetadataViewer 
 System . exit ( 1 ) ; 
 } 
 
 + Util . initDatabaseDescriptor ( ) ; 
 + 
 for ( String fname : args ) 
 { 
 if ( new File ( fname ) . exists ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / tools / SSTableOfflineRelevel . java b / src / java / org / apache / cassandra / tools / SSTableOfflineRelevel . java 
 index f7e477f . . 71e4cfc 100644 
 - - - a / src / java / org / apache / cassandra / tools / SSTableOfflineRelevel . java 
 + + + b / src / java / org / apache / cassandra / tools / SSTableOfflineRelevel . java 
 @ @ - 83 , 6 + 83 , 9 @ @ public class SSTableOfflineRelevel 
 out . println ( " Usage : sstableofflinerelevel [ - - dry - run ] < keyspace > < columnfamily > " ) ; 
 System . exit ( 1 ) ; 
 } 
 + 
 + Util . initDatabaseDescriptor ( ) ; 
 + 
 boolean dryRun = args [ 0 ] . equals ( " - - dry - run " ) ; 
 String keyspace = args [ args . length - 2 ] ; 
 String columnfamily = args [ args . length - 1 ] ; 
 diff - - git a / src / java / org / apache / cassandra / tools / SSTableRepairedAtSetter . java b / src / java / org / apache / cassandra / tools / SSTableRepairedAtSetter . java 
 index 2ddb632 . . ff362cc 100644 
 - - - a / src / java / org / apache / cassandra / tools / SSTableRepairedAtSetter . java 
 + + + b / src / java / org / apache / cassandra / tools / SSTableRepairedAtSetter . java 
 @ @ - 63 , 6 + 63 , 8 @ @ public class SSTableRepairedAtSetter 
 System . exit ( 1 ) ; 
 } 
 
 + Util . initDatabaseDescriptor ( ) ; 
 + 
 boolean setIsRepaired = args [ 1 ] . equals ( " - - is - repaired " ) ; 
 
 List < String > fileNames ; 
 diff - - git a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 index cd87d8b . . 3551b3d 100644 
 - - - a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 + + + b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 @ @ - 54 , 6 + 54 , 8 @ @ public class StandaloneScrubber 
 public static void main ( String args [ ] ) 
 { 
 Options options = Options . parseArgs ( args ) ; 
 + Util . initDatabaseDescriptor ( ) ; 
 + 
 try 
 { 
 / / load keyspace descriptions . 
 diff - - git a / src / java / org / apache / cassandra / tools / StandaloneSplitter . java b / src / java / org / apache / cassandra / tools / StandaloneSplitter . java 
 index 4545ab6 . . 95fed3c 100644 
 - - - a / src / java / org / apache / cassandra / tools / StandaloneSplitter . java 
 + + + b / src / java / org / apache / cassandra / tools / StandaloneSplitter . java 
 @ @ - 52 , 6 + 52 , 8 @ @ public class StandaloneSplitter 
 public static void main ( String args [ ] ) 
 { 
 Options options = Options . parseArgs ( args ) ; 
 + Util . initDatabaseDescriptor ( ) ; 
 + 
 try 
 { 
 / / load keyspace descriptions . 
 diff - - git a / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java b / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java 
 index c5dfba0 . . 2c2a7e0 100644 
 - - - a / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java 
 + + + b / src / java / org / apache / cassandra / tools / StandaloneUpgrader . java 
 @ @ - 48 , 6 + 48 , 8 @ @ public class StandaloneUpgrader 
 public static void main ( String args [ ] ) 
 { 
 Options options = Options . parseArgs ( args ) ; 
 + Util . initDatabaseDescriptor ( ) ; 
 + 
 try 
 { 
 / / load keyspace descriptions . 
 diff - - git a / src / java / org / apache / cassandra / tools / StandaloneVerifier . java b / src / java / org / apache / cassandra / tools / StandaloneVerifier . java 
 index f71f58d . . fb7f218 100644 
 - - - a / src / java / org / apache / cassandra / tools / StandaloneVerifier . java 
 + + + b / src / java / org / apache / cassandra / tools / StandaloneVerifier . java 
 @ @ - 52 , 6 + 52 , 8 @ @ public class StandaloneVerifier 
 public static void main ( String args [ ] ) 
 { 
 Options options = Options . parseArgs ( args ) ; 
 + Util . initDatabaseDescriptor ( ) ; 
 + 
 try 
 { 
 / / load keyspace descriptions . 
 diff - - git a / src / java / org / apache / cassandra / tools / Util . java b / src / java / org / apache / cassandra / tools / Util . java 
 new file mode 100644 
 index 0000000 . . 6e23361 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / tools / Util . java 
 @ @ - 0 , 0 + 1 , 58 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . tools ; 
 + 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . exceptions . ConfigurationException ; 
 + 
 + public final class Util 
 + { 
 + private Util ( ) 
 + { 
 + } 
 + 
 + / * * 
 + * This is used by standalone tools to force static initialization of DatabaseDescriptor , and fail if configuration 
 + * is bad . 
 + * / 
 + public static void initDatabaseDescriptor ( ) 
 + { 
 + try 
 + { 
 + DatabaseDescriptor . forceStaticInitialization ( ) ; 
 + } 
 + catch ( ExceptionInInitializerError e ) 
 + { 
 + Throwable cause = e . getCause ( ) ; 
 + boolean logStackTrace = ! ( cause instanceof ConfigurationException ) | | ( ( ConfigurationException ) cause ) . logStackTrace ; 
 + System . out . println ( " Exception ( " + cause . getClass ( ) . getName ( ) + " ) encountered during startup : " + cause . getMessage ( ) ) ; 
 + 
 + if ( logStackTrace ) 
 + { 
 + cause . printStackTrace ( ) ; 
 + System . exit ( 3 ) ; 
 + } 
 + else 
 + { 
 + System . err . println ( cause . getMessage ( ) ) ; 
 + System . exit ( 3 ) ; 
 + } 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index aad4dd3 . . 89f4c77 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 485 , 7 + 485 , 7 @ @ public class DatabaseDescriptor 
 } 
 
 / * * load keyspace ( table ) definitions , but do not initialize the table instances . * / 
 - public static void loadSchemas ( ) throws IOException 
 + public static void loadSchemas ( ) 
 { 
 ColumnFamilyStore schemaCFS = SystemTable . schemaCFS ( SystemTable . SCHEMA _ KEYSPACES _ CF ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java 
 index 0c4d9ca . . 71b22d8 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java 
 @ @ - 58 , 7 + 58 , 7 @ @ public class CreateKeyspaceStatement extends SchemaAlteringStatement 
 return name ; 
 } 
 
 - public void checkAccess ( ClientState state ) throws UnauthorizedException , InvalidRequestException 
 + public void checkAccess ( ClientState state ) throws UnauthorizedException 
 { 
 state . hasAllKeyspacesAccess ( Permission . CREATE ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index 6f33309 . . 93571fa 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 147 , 22 + 147 , 11 @ @ public class SelectStatement implements CQLStatement 
 
 public ResultMessage . Rows executeInternal ( QueryState state ) throws RequestExecutionException , RequestValidationException 
 { 
 - try 
 - { 
 - List < Row > rows = isKeyRange | | usesSecondaryIndexing 
 - ? RangeSliceVerbHandler . executeLocally ( getRangeCommand ( Collections . < ByteBuffer > emptyList ( ) ) ) 
 - : readLocally ( keyspace ( ) , getSliceCommands ( Collections . < ByteBuffer > emptyList ( ) ) ) ; 
 + List < Row > rows = isKeyRange | | usesSecondaryIndexing 
 + ? RangeSliceVerbHandler . executeLocally ( getRangeCommand ( Collections . < ByteBuffer > emptyList ( ) ) ) 
 + : readLocally ( keyspace ( ) , getSliceCommands ( Collections . < ByteBuffer > emptyList ( ) ) ) ; 
 
 - return processResults ( rows , Collections . < ByteBuffer > emptyList ( ) ) ; 
 - } 
 - catch ( ExecutionException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - catch ( InterruptedException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 + return processResults ( rows , Collections . < ByteBuffer > emptyList ( ) ) ; 
 } 
 
 public ResultSet process ( List < Row > rows ) throws InvalidRequestException 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index 3d5240f . . ae8e2cc 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 226 , 15 + 226 , 7 @ @ public class CassandraDaemon 
 } 
 
 / / load keyspace descriptions . 
 - try 
 - { 
 - DatabaseDescriptor . loadSchemas ( ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - logger . error ( " Fatal exception during initialization " , e ) ; 
 - System . exit ( 100 ) ; 
 - } 
 + DatabaseDescriptor . loadSchemas ( ) ; 
 
 / / clean up debris in the rest of the tables 
 for ( String table : Schema . instance . getTables ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / service / ClientState . java b / src / java / org / apache / cassandra / service / ClientState . java 
 index e6b0f97 . . b6769a3 100644 
 - - - a / src / java / org / apache / cassandra / service / ClientState . java 
 + + + b / src / java / org / apache / cassandra / service / ClientState . java 
 @ @ - 128 , 7 + 128 , 7 @ @ public class ClientState 
 this . user = user ; 
 } 
 
 - public void hasAllKeyspacesAccess ( Permission perm ) throws UnauthorizedException , InvalidRequestException 
 + public void hasAllKeyspacesAccess ( Permission perm ) throws UnauthorizedException 
 { 
 if ( internalCall ) 
 return ; 
 diff - - git a / src / java / org / apache / cassandra / service / RangeSliceVerbHandler . java b / src / java / org / apache / cassandra / service / RangeSliceVerbHandler . java 
 index a095680 . . b6f257e 100644 
 - - - a / src / java / org / apache / cassandra / service / RangeSliceVerbHandler . java 
 + + + b / src / java / org / apache / cassandra / service / RangeSliceVerbHandler . java 
 @ @ - 18 , 10 + 18 , 6 @ @ 
 package org . apache . cassandra . service ; 
 
 import java . util . List ; 
 - import java . util . concurrent . ExecutionException ; 
 - 
 - import org . slf4j . Logger ; 
 - import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . RangeSliceCommand ; 
 @ @ - 35 , 9 + 31 , 7 @ @ import org . apache . cassandra . tracing . Tracing ; 
 
 public class RangeSliceVerbHandler implements IVerbHandler < RangeSliceCommand > 
 { 
 - private static final Logger logger = LoggerFactory . getLogger ( RangeSliceVerbHandler . class ) ; 
 - 
 - public static List < Row > executeLocally ( RangeSliceCommand command ) throws ExecutionException , InterruptedException 
 + public static List < Row > executeLocally ( RangeSliceCommand command ) 
 { 
 ColumnFamilyStore cfs = Table . open ( command . keyspace ) . getColumnFamilyStore ( command . column _ family ) ; 
 if ( cfs . indexManager . hasIndexFor ( command . row _ filter ) ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index 8d2dc60 . . 58fa6e3 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 294 , 7 + 294 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 * nodes have seen the mostRecentCommit . Otherwise , return null . 
 * / 
 private static UUID beginAndRepairPaxos ( ByteBuffer key , CFMetaData metadata , List < InetAddress > liveEndpoints , int requiredParticipants ) 
 - throws WriteTimeoutException , UnavailableException 
 + throws WriteTimeoutException 
 { 
 UUID ballot = UUIDGen . getTimeUUID ( ) ; 
 
 @ @ - 344 , 7 + 344 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 } 
 
 private static PrepareCallback preparePaxos ( Commit toPrepare , List < InetAddress > endpoints , int requiredParticipants ) 
 - throws WriteTimeoutException , UnavailableException 
 + throws WriteTimeoutException 
 { 
 PrepareCallback callback = new PrepareCallback ( toPrepare . key , toPrepare . update . metadata ( ) , requiredParticipants ) ; 
 MessageOut < Commit > message = new MessageOut < Commit > ( MessagingService . Verb . PAXOS _ PREPARE , toPrepare , Commit . serializer ) ; 
 @ @ - 1244 , 7 + 1244 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 this . handler = handler ; 
 } 
 
 - protected void runMayThrow ( ) throws ExecutionException , InterruptedException 
 + protected void runMayThrow ( ) 
 { 
 logger . trace ( " LocalReadRunnable reading { } " , command ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / tools / SSTableExport . java b / src / java / org / apache / cassandra / tools / SSTableExport . java 
 index 4b91dd8 . . 9e8bb3e 100644 
 - - - a / src / java / org / apache / cassandra / tools / SSTableExport . java 
 + + + b / src / java / org / apache / cassandra / tools / SSTableExport . java 
 @ @ - 399 , 7 + 399 , 7 @ @ public class SSTableExport 
 * @ throws IOException on failure to open / read / write files or output streams 
 * @ throws ConfigurationException on configuration failure ( wrong params given ) 
 * / 
 - public static void main ( String [ ] args ) throws IOException , ConfigurationException 
 + public static void main ( String [ ] args ) throws ConfigurationException 
 { 
 String usage = String . format ( " Usage : % s < sstable > [ - k key [ - k key [ . . . ] ] - x key [ - x key [ . . . ] ] ] % n " , SSTableExport . class . getName ( ) ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / tools / SSTableImport . java b / src / java / org / apache / cassandra / tools / SSTableImport . java 
 index 8c58d70 . . f25a60b 100644 
 - - - a / src / java / org / apache / cassandra / tools / SSTableImport . java 
 + + + b / src / java / org / apache / cassandra / tools / SSTableImport . java 
 @ @ - 487 , 7 + 487 , 7 @ @ public class SSTableImport 
 * @ throws ParseException on failure to parse JSON input 
 * @ throws ConfigurationException on configuration error . 
 * / 
 - public static void main ( String [ ] args ) throws IOException , ParseException , ConfigurationException 
 + public static void main ( String [ ] args ) throws ParseException , ConfigurationException 
 { 
 CommandLineParser parser = new PosixParser ( ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 index 9db565d . . 4ff06db 100644 
 - - - a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 + + + b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 @ @ - 51 , 7 + 51 , 7 @ @ public class StandaloneScrubber 
 private static final String HELP _ OPTION = " help " ; 
 private static final String MANIFEST _ CHECK _ OPTION = " manifest - check " ; 
 
 - public static void main ( String args [ ] ) throws IOException 
 + public static void main ( String args [ ] ) 
 { 
 Options options = Options . parseArgs ( args ) ; 
 try 
 diff - - git a / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java b / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java 
 index 513b808 . . 4433b57 100644 
 - - - a / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java 
 + + + b / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java 
 @ @ - 67 , 7 + 67 , 7 @ @ public class DatabaseDescriptorTest 
 
 / / this came as a result of CASSANDRA - 995 
 @ Test 
 - public void testTransKsMigration ( ) throws IOException , ConfigurationException 
 + public void testTransKsMigration ( ) throws ConfigurationException 
 { 
 SchemaLoader . cleanupAndLeaveDirs ( ) ; 
 DatabaseDescriptor . loadSchemas ( ) ;
