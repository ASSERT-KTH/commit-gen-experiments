BLEU SCORE: 0.044808361601213584

TEST MSG: Fix 2ndary indexes on primary key columns to don ' t create expiring entries ( CASSANDRA - 13412 )
GENERATED MSG: Don ' t try to index clustering values of static rows

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java <nl> index 8376652 . . 1a1b881 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java <nl> @ @ - 1231 , 4 + 1231 , 46 @ @ public class SecondaryIndexTest extends CQLTester <nl> return super . getInvalidateTask ( ) ; <nl> } <nl> } <nl> + <nl> + @ Test <nl> + public void testIndexOnPartitionKeyInsertExpiringColumn ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k1 int , k2 int , a int , b int , PRIMARY KEY ( ( k1 , k2 ) ) ) " ) ; <nl> + createIndex ( " CREATE INDEX on % s ( k1 ) " ) ; <nl> + execute ( " INSERT INTO % s ( k1 , k2 , a , b ) VALUES ( 1 , 2 , 3 , 4 ) " ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE k1 = 1 " ) , row ( 1 , 2 , 3 , 4 ) ) ; <nl> + execute ( " UPDATE % s USING TTL 1 SET b = 10 WHERE k1 = 1 AND k2 = 2 " ) ; <nl> + Thread . sleep ( 1000 ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE k1 = 1 " ) , row ( 1 , 2 , 3 , null ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIndexOnClusteringKeyInsertExpiringColumn ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( pk int , ck int , a int , b int , PRIMARY KEY ( pk , ck ) ) " ) ; <nl> + createIndex ( " CREATE INDEX on % s ( ck ) " ) ; <nl> + execute ( " INSERT INTO % s ( pk , ck , a , b ) VALUES ( 1 , 2 , 3 , 4 ) " ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE ck = 2 " ) , row ( 1 , 2 , 3 , 4 ) ) ; <nl> + execute ( " UPDATE % s USING TTL 1 SET b = 10 WHERE pk = 1 AND ck = 2 " ) ; <nl> + Thread . sleep ( 1000 ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE ck = 2 " ) , row ( 1 , 2 , 3 , null ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIndexOnRegularColumnInsertExpiringColumn ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( pk int , ck int , a int , b int , PRIMARY KEY ( pk , ck ) ) " ) ; <nl> + createIndex ( " CREATE INDEX on % s ( a ) " ) ; <nl> + execute ( " INSERT INTO % s ( pk , ck , a , b ) VALUES ( 1 , 2 , 3 , 4 ) " ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE a = 3 " ) , row ( 1 , 2 , 3 , 4 ) ) ; <nl> + <nl> + execute ( " UPDATE % s USING TTL 1 SET b = 10 WHERE pk = 1 AND ck = 2 " ) ; <nl> + Thread . sleep ( 1000 ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE a = 3 " ) , row ( 1 , 2 , 3 , null ) ) ; <nl> + <nl> + execute ( " UPDATE % s USING TTL 1 SET a = 5 WHERE pk = 1 AND ck = 2 " ) ; <nl> + Thread . sleep ( 1000 ) ; <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE a = 3 " ) ) ; <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE a = 5 " ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java 
 index 8376652 . . 1a1b881 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java 
 @ @ - 1231 , 4 + 1231 , 46 @ @ public class SecondaryIndexTest extends CQLTester 
 return super . getInvalidateTask ( ) ; 
 } 
 } 
 + 
 + @ Test 
 + public void testIndexOnPartitionKeyInsertExpiringColumn ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k1 int , k2 int , a int , b int , PRIMARY KEY ( ( k1 , k2 ) ) ) " ) ; 
 + createIndex ( " CREATE INDEX on % s ( k1 ) " ) ; 
 + execute ( " INSERT INTO % s ( k1 , k2 , a , b ) VALUES ( 1 , 2 , 3 , 4 ) " ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE k1 = 1 " ) , row ( 1 , 2 , 3 , 4 ) ) ; 
 + execute ( " UPDATE % s USING TTL 1 SET b = 10 WHERE k1 = 1 AND k2 = 2 " ) ; 
 + Thread . sleep ( 1000 ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE k1 = 1 " ) , row ( 1 , 2 , 3 , null ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIndexOnClusteringKeyInsertExpiringColumn ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( pk int , ck int , a int , b int , PRIMARY KEY ( pk , ck ) ) " ) ; 
 + createIndex ( " CREATE INDEX on % s ( ck ) " ) ; 
 + execute ( " INSERT INTO % s ( pk , ck , a , b ) VALUES ( 1 , 2 , 3 , 4 ) " ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE ck = 2 " ) , row ( 1 , 2 , 3 , 4 ) ) ; 
 + execute ( " UPDATE % s USING TTL 1 SET b = 10 WHERE pk = 1 AND ck = 2 " ) ; 
 + Thread . sleep ( 1000 ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE ck = 2 " ) , row ( 1 , 2 , 3 , null ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIndexOnRegularColumnInsertExpiringColumn ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( pk int , ck int , a int , b int , PRIMARY KEY ( pk , ck ) ) " ) ; 
 + createIndex ( " CREATE INDEX on % s ( a ) " ) ; 
 + execute ( " INSERT INTO % s ( pk , ck , a , b ) VALUES ( 1 , 2 , 3 , 4 ) " ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE a = 3 " ) , row ( 1 , 2 , 3 , 4 ) ) ; 
 + 
 + execute ( " UPDATE % s USING TTL 1 SET b = 10 WHERE pk = 1 AND ck = 2 " ) ; 
 + Thread . sleep ( 1000 ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE a = 3 " ) , row ( 1 , 2 , 3 , null ) ) ; 
 + 
 + execute ( " UPDATE % s USING TTL 1 SET a = 5 WHERE pk = 1 AND ck = 2 " ) ; 
 + Thread . sleep ( 1000 ) ; 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE a = 3 " ) ) ; 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE a = 5 " ) ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
