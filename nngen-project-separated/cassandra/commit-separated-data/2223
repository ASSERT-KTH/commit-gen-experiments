BLEU SCORE: 0.021476912089159066

TEST MSG: Better error message when trying to add a collection with the same name than a previously dropped one
GENERATED MSG: Fix adding columns when table has collections

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 4a3e086 . . cd51e04 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 6 @ @ <nl> 2 . 0 . 10 <nl> + * Better error message when adding a collection with the same name <nl> + than a previously dropped one ( CASSANDRA - 6276 ) <nl> * Fix validation when adding static columns ( CASSANDRA - 7730 ) <nl> * ( Thrift ) fix range deletion of supercolumns ( CASSANDRA - 7733 ) <nl> * Fix potential AssertionError in RangeTombstoneList ( CASSANDRA - 7700 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> index 88f0de8 . . 136c430 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> @ @ - 121 , 6 + 121 , 14 @ @ public class AlterTableStatement extends SchemaAlteringStatement <nl> ? new HashMap < ByteBuffer , CollectionType > ( cfDef . getCollectionType ( ) . defined ) <nl> : new HashMap < ByteBuffer , CollectionType > ( ) ; <nl> <nl> + / / If there used to be a collection column with the same name ( that has been dropped ) , it will <nl> + / / still be appear in the ColumnToCollectionType because or reasons explained on # 6276 . The same <nl> + / / reason mean that we can ' t allow adding a new collection with that name ( see the ticket for details ) . <nl> + CollectionType previous = collections . get ( columnName . key ) ; <nl> + if ( previous ! = null & & ! type . isCompatibleWith ( previous ) ) <nl> + throw new InvalidRequestException ( String . format ( " Cannot add a collection with the name % s " + <nl> + " because a collection with the same name and a different type has already been used in the past " , columnName ) ) ; <nl> + <nl> collections . put ( columnName . key , ( CollectionType ) type ) ; <nl> ColumnToCollectionType newColType = ColumnToCollectionType . getInstance ( collections ) ; <nl> List < AbstractType < ? > > ctypes = new ArrayList < AbstractType < ? > > ( ( ( CompositeType ) cfm . comparator ) . types ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index 2cb008e . . 967d18f 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 1115 , 6 + 1115 , 9 @ @ public class SelectStatement implements CQLStatement <nl> <nl> if ( ! stmt . parameters . orderings . isEmpty ( ) ) <nl> { <nl> + if ( ! stmt . metadataRestrictions . isEmpty ( ) ) <nl> + throw new InvalidRequestException ( " ORDER BY with 2ndary indexes is not supported . " ) ; <nl> + <nl> if ( stmt . isKeyRange ( ) ) <nl> throw new InvalidRequestException ( " ORDER BY is only supported when the partition key is restricted by an EQ or an IN . " ) ; <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 4a3e086 . . cd51e04 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 6 @ @ 
 2 . 0 . 10 
 + * Better error message when adding a collection with the same name 
 + than a previously dropped one ( CASSANDRA - 6276 ) 
 * Fix validation when adding static columns ( CASSANDRA - 7730 ) 
 * ( Thrift ) fix range deletion of supercolumns ( CASSANDRA - 7733 ) 
 * Fix potential AssertionError in RangeTombstoneList ( CASSANDRA - 7700 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 index 88f0de8 . . 136c430 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 @ @ - 121 , 6 + 121 , 14 @ @ public class AlterTableStatement extends SchemaAlteringStatement 
 ? new HashMap < ByteBuffer , CollectionType > ( cfDef . getCollectionType ( ) . defined ) 
 : new HashMap < ByteBuffer , CollectionType > ( ) ; 
 
 + / / If there used to be a collection column with the same name ( that has been dropped ) , it will 
 + / / still be appear in the ColumnToCollectionType because or reasons explained on # 6276 . The same 
 + / / reason mean that we can ' t allow adding a new collection with that name ( see the ticket for details ) . 
 + CollectionType previous = collections . get ( columnName . key ) ; 
 + if ( previous ! = null & & ! type . isCompatibleWith ( previous ) ) 
 + throw new InvalidRequestException ( String . format ( " Cannot add a collection with the name % s " + 
 + " because a collection with the same name and a different type has already been used in the past " , columnName ) ) ; 
 + 
 collections . put ( columnName . key , ( CollectionType ) type ) ; 
 ColumnToCollectionType newColType = ColumnToCollectionType . getInstance ( collections ) ; 
 List < AbstractType < ? > > ctypes = new ArrayList < AbstractType < ? > > ( ( ( CompositeType ) cfm . comparator ) . types ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index 2cb008e . . 967d18f 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 1115 , 6 + 1115 , 9 @ @ public class SelectStatement implements CQLStatement 
 
 if ( ! stmt . parameters . orderings . isEmpty ( ) ) 
 { 
 + if ( ! stmt . metadataRestrictions . isEmpty ( ) ) 
 + throw new InvalidRequestException ( " ORDER BY with 2ndary indexes is not supported . " ) ; 
 + 
 if ( stmt . isKeyRange ( ) ) 
 throw new InvalidRequestException ( " ORDER BY is only supported when the partition key is restricted by an EQ or an IN . " ) ; 

