BLEU SCORE: 0.020244462660665517

TEST MSG: Fix ColumnMetadata . cellValueType ( ) return type and change sstabledump tool to use type . toJsonString ( )
GENERATED MSG: Add tombstone debug threshold and histogram

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 905a436 . . 1525289 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 15 <nl> + * Fix ColumnDefinition . cellValueType ( ) for non - frozen collection and change SSTabledump to use type . toJSONString ( ) ( CASSANDRA - 13573 ) <nl> * Skip materialized view addition if the base table doesn ' t exist ( CASSANDRA - 13737 ) <nl> * Drop table should remove corresponding entries in dropped _ columns table ( CASSANDRA - 13730 ) <nl> * Log warn message until legacy auth tables have been migrated ( CASSANDRA - 13371 ) <nl> diff - - git a / src / java / org / apache / cassandra / config / ColumnDefinition . java b / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> index 34840e3 . . 6a0f530 100644 <nl> - - - a / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> + + + b / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> @ @ - 391 , 13 + 391 , 24 @ @ public class ColumnDefinition extends ColumnSpecification implements Comparable < <nl> / * * <nl> * The type of the cell values for cell belonging to this column . <nl> * <nl> - * This is the same than the column type , except for collections where it ' s the ' valueComparator ' <nl> + * This is the same than the column type , except for non - frozen collections where it ' s the ' valueComparator ' <nl> * of the collection . <nl> + * <nl> + * This method should not be used to get value type of non - frozon UDT . <nl> * / <nl> public AbstractType < ? > cellValueType ( ) <nl> { <nl> - return type instanceof CollectionType <nl> - ? ( ( CollectionType ) type ) . valueComparator ( ) <nl> - : type ; <nl> + assert ! ( type instanceof UserType & & type . isMultiCell ( ) ) ; <nl> + return type instanceof CollectionType & & type . isMultiCell ( ) <nl> + ? ( ( CollectionType ) type ) . valueComparator ( ) <nl> + : type ; <nl> + } <nl> + <nl> + <nl> + public boolean isCounterColumn ( ) <nl> + { <nl> + if ( type instanceof CollectionType ) / / for thrift <nl> + return ( ( CollectionType ) type ) . valueComparator ( ) . isCounter ( ) ; <nl> + return type . isCounter ( ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / rows / BTreeRow . java b / src / java / org / apache / cassandra / db / rows / BTreeRow . java <nl> index fda33d6 . . 41dad0a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / rows / BTreeRow . java <nl> + + + b / src / java / org / apache / cassandra / db / rows / BTreeRow . java <nl> @ @ - 294 , 7 + 294 , 7 @ @ public class BTreeRow extends AbstractRow <nl> <nl> public Row markCounterLocalToBeCleared ( ) <nl> { <nl> - return transformAndFilter ( primaryKeyLivenessInfo , deletion , ( cd ) - > cd . column ( ) . cellValueType ( ) . isCounter ( ) <nl> + return transformAndFilter ( primaryKeyLivenessInfo , deletion , ( cd ) - > cd . column ( ) . isCounterColumn ( ) <nl> ? cd . markCounterLocalToBeCleared ( ) <nl> : cd ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / rows / BufferCell . java b / src / java / org / apache / cassandra / db / rows / BufferCell . java <nl> index e4ad7e6 . . 82ae02c 100644 <nl> - - - a / src / java / org / apache / cassandra / db / rows / BufferCell . java <nl> + + + b / src / java / org / apache / cassandra / db / rows / BufferCell . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ public class BufferCell extends AbstractCell <nl> <nl> public boolean isCounterCell ( ) <nl> { <nl> - return ! isTombstone ( ) & & column . cellValueType ( ) . isCounter ( ) ; <nl> + return ! isTombstone ( ) & & column . isCounterColumn ( ) ; <nl> } <nl> <nl> public boolean isLive ( int nowInSec ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / JsonTransformer . java b / src / java / org / apache / cassandra / tools / JsonTransformer . java <nl> index 0a72583 . . 5c32035 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / JsonTransformer . java <nl> + + + b / src / java / org / apache / cassandra / tools / JsonTransformer . java <nl> @ @ - 39 , 6 + 39 , 7 @ @ import org . apache . cassandra . db . RangeTombstone ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . db . marshal . CollectionType ; <nl> import org . apache . cassandra . db . marshal . CompositeType ; <nl> + import org . apache . cassandra . db . marshal . UserType ; <nl> import org . apache . cassandra . db . rows . Cell ; <nl> import org . apache . cassandra . db . rows . ColumnData ; <nl> import org . apache . cassandra . db . rows . ComplexColumnData ; <nl> @ @ - 49 , 6 + 50 , 7 @ @ import org . apache . cassandra . db . rows . Row ; <nl> import org . apache . cassandra . db . rows . Unfiltered ; <nl> import org . apache . cassandra . db . rows . UnfilteredRowIterator ; <nl> import org . apache . cassandra . io . sstable . ISSTableScanner ; <nl> + import org . apache . cassandra . transport . Server ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . codehaus . jackson . JsonFactory ; <nl> import org . codehaus . jackson . JsonGenerator ; <nl> @ @ - 411 , 7 + 413 , 7 @ @ public final class JsonTransformer <nl> AbstractType < ? > type = cell . column ( ) . type ; <nl> json . writeString ( cell . column ( ) . name . toCQLString ( ) ) ; <nl> <nl> - if ( cell . path ( ) ! = null & & cell . path ( ) . size ( ) > 0 ) <nl> + if ( type . isCollection ( ) & & type . isMultiCell ( ) ) / / non - frozen collection <nl> { <nl> CollectionType ct = ( CollectionType ) type ; <nl> json . writeFieldName ( " path " ) ; <nl> @ @ - 437 , 7 + 439 , 7 @ @ public final class JsonTransformer <nl> else <nl> { <nl> json . writeFieldName ( " value " ) ; <nl> - json . writeString ( cell . column ( ) . cellValueType ( ) . getString ( cell . value ( ) ) ) ; <nl> + json . writeRawValue ( cell . column ( ) . cellValueType ( ) . toJSONString ( cell . value ( ) , Server . CURRENT _ VERSION ) ) ; <nl> } <nl> if ( liveInfo . isEmpty ( ) | | cell . timestamp ( ) ! = liveInfo . timestamp ( ) ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / ViewTest . java b / test / unit / org / apache / cassandra / cql3 / ViewTest . java <nl> index e595ebd . . f8f8c9f 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / ViewTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / ViewTest . java <nl> @ @ - 1262 , 4 + 1262 , 37 @ @ public class ViewTest extends CQLTester <nl> <nl> assertRows ( execute ( " SELECT count ( * ) FROM mv _ test " ) , row ( 1024L ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testFrozenCollectionsWithComplicatedInnerType ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int , intval int , listval frozen < list < tuple < text , text > > > , PRIMARY KEY ( k ) ) " ) ; <nl> + <nl> + execute ( " USE " + keyspace ( ) ) ; <nl> + executeNet ( protocolVersion , " USE " + keyspace ( ) ) ; <nl> + <nl> + createView ( " mv " , <nl> + " CREATE MATERIALIZED VIEW % s AS SELECT * FROM % % s WHERE k IS NOT NULL AND listval IS NOT NULL PRIMARY KEY ( k , listval ) " ) ; <nl> + <nl> + updateView ( " INSERT INTO % s ( k , intval , listval ) VALUES ( ? , ? , fromJson ( ? ) ) " , <nl> + 0 , <nl> + 0 , <nl> + " [ [ \ " a \ " , \ " 1 \ " ] , [ \ " b \ " , \ " 2 \ " ] , [ \ " c \ " , \ " 3 \ " ] ] " ) ; <nl> + <nl> + / / verify input <nl> + assertRows ( execute ( " SELECT k , toJson ( listval ) FROM % s WHERE k = ? " , 0 ) , <nl> + row ( 0 , " [ [ \ " a \ " , \ " 1 \ " ] , [ \ " b \ " , \ " 2 \ " ] , [ \ " c \ " , \ " 3 \ " ] ] " ) ) ; <nl> + assertRows ( execute ( " SELECT k , toJson ( listval ) from mv " ) , <nl> + row ( 0 , " [ [ \ " a \ " , \ " 1 \ " ] , [ \ " b \ " , \ " 2 \ " ] , [ \ " c \ " , \ " 3 \ " ] ] " ) ) ; <nl> + <nl> + / / update listval with the same value and it will be compared in view generator <nl> + updateView ( " INSERT INTO % s ( k , listval ) VALUES ( ? , fromJson ( ? ) ) " , <nl> + 0 , <nl> + " [ [ \ " a \ " , \ " 1 \ " ] , [ \ " b \ " , \ " 2 \ " ] , [ \ " c \ " , \ " 3 \ " ] ] " ) ; <nl> + / / verify result <nl> + assertRows ( execute ( " SELECT k , toJson ( listval ) FROM % s WHERE k = ? " , 0 ) , <nl> + row ( 0 , " [ [ \ " a \ " , \ " 1 \ " ] , [ \ " b \ " , \ " 2 \ " ] , [ \ " c \ " , \ " 3 \ " ] ] " ) ) ; <nl> + assertRows ( execute ( " SELECT k , toJson ( listval ) from mv " ) , <nl> + row ( 0 , " [ [ \ " a \ " , \ " 1 \ " ] , [ \ " b \ " , \ " 2 \ " ] , [ \ " c \ " , \ " 3 \ " ] ] " ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 88daf35 . . aef45ba 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 7 , 6 + 7 , 7 @ @ Merged from 1 . 2 : <nl> * Allow where clause conditions to be in parenthesis ( CASSANDRA - 6037 ) <nl> * Do not open non - ssl storage port if encryption option is all ( CASSANDRA - 3916 ) <nl> * Improve memory usage of metadata min / max column names ( CASSANDRA - 6077 ) <nl> + * Add tombstone debug threshold and histogram ( CASSANDRA - 6042 , 6057 ) <nl> <nl> <nl> 2 . 0 . 1 <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index 4af7275 . . e7d9892 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 405 , 6 + 405 , 11 @ @ snapshot _ before _ compaction : false <nl> # lose data on truncation or drop . <nl> auto _ snapshot : true <nl> <nl> + # Log a debug message if more than this many tombstones are scanned <nl> + # in a single - partition query . Set the threshold on SliceQueryFilter <nl> + # to debug to enable . <nl> + tombstone _ debug _ threshold : 10000 <nl> + <nl> # Add column indexes to a row after its contents reach this size . <nl> # Increase if your column values are large , or if you have a very large <nl> # number of columns . The competing causes are , Cassandra has to <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index 392e8c3 . . 131c9ef 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 179 , 6 + 179 , 8 @ @ public class Config <nl> <nl> private static boolean outboundBindAny = false ; <nl> <nl> + public volatile int tombstone _ debug _ threshold = 10000 ; <nl> + <nl> public static boolean getOutboundBindAny ( ) <nl> { <nl> return outboundBindAny ; <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 572a06f . . a936f14 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 880 , 6 + 880 , 20 @ @ public class DatabaseDescriptor <nl> } <nl> <nl> / * * <nl> + * How many tombstones need to be scanned before we log a <nl> + * debug message <nl> + * / <nl> + public static int getTombstoneDebugThreshold ( ) <nl> + { <nl> + return conf . tombstone _ debug _ threshold ; <nl> + } <nl> + <nl> + public static void setTombstoneDebugThreshold ( int tombstoneDebugThreshold ) <nl> + { <nl> + conf . tombstone _ debug _ threshold = tombstoneDebugThreshold ; <nl> + } <nl> + <nl> + / * * <nl> * size of commitlog segments to allocate <nl> * / <nl> public static int getCommitLogSegmentSize ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 1ff4832 . . ec9570a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import com . google . common . base . Function ; <nl> import com . google . common . collect . * ; <nl> import com . google . common . util . concurrent . Futures ; <nl> import com . google . common . util . concurrent . Uninterruptibles ; <nl> + import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 49 , 11 + 50 , 7 @ @ import org . apache . cassandra . db . columniterator . OnDiskAtomIterator ; <nl> import org . apache . cassandra . db . commitlog . CommitLog ; <nl> import org . apache . cassandra . db . commitlog . ReplayPosition ; <nl> import org . apache . cassandra . db . compaction . * ; <nl> - import org . apache . cassandra . db . filter . ColumnSlice ; <nl> - import org . apache . cassandra . db . filter . ExtendedFilter ; <nl> - import org . apache . cassandra . db . filter . IDiskAtomFilter ; <nl> - import org . apache . cassandra . db . filter . QueryFilter ; <nl> - import org . apache . cassandra . db . filter . SliceQueryFilter ; <nl> + import org . apache . cassandra . db . filter . * ; <nl> import org . apache . cassandra . db . index . SecondaryIndex ; <nl> import org . apache . cassandra . db . index . SecondaryIndexManager ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> @ @ - 72 , 7 + 69 , 6 @ @ import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . thrift . IndexExpression ; <nl> import org . apache . cassandra . tracing . Tracing ; <nl> import org . apache . cassandra . utils . * ; <nl> - import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; <nl> <nl> import static org . apache . cassandra . config . CFMetaData . Caching ; <nl> <nl> @ @ - 1300 , 6 + 1296 , 13 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> <nl> removeDroppedColumns ( result ) ; <nl> + <nl> + if ( filter . filter instanceof SliceQueryFilter ) <nl> + { <nl> + / / Log the number of tombstones scanned on single key queries <nl> + metric . tombstoneScannedHistogram . update ( ( ( SliceQueryFilter ) filter . filter ) . lastIgnored ( ) ) ; <nl> + metric . liveScannedHistogram . update ( ( ( SliceQueryFilter ) filter . filter ) . lastLive ( ) ) ; <nl> + } <nl> } <nl> finally <nl> { <nl> @ @ - 2173 , 6 + 2176 , 22 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> " is deprecated , set the compaction strategy option ' enabled ' to ' false ' instead or use the nodetool command ' disableautocompaction ' . " ) ; <nl> } <nl> <nl> + public long getTombstonesPerLastRead ( ) <nl> + { <nl> + return metric . tombstoneScannedHistogram . count ( ) ; <nl> + } <nl> + <nl> + public float getPercentageTombstonesPerLastRead ( ) <nl> + { <nl> + long total = metric . tombstoneScannedHistogram . count ( ) + metric . liveScannedHistogram . count ( ) ; <nl> + return ( metric . tombstoneScannedHistogram . count ( ) / total ) ; <nl> + } <nl> + <nl> + public long getLiveCellsPerLastRead ( ) <nl> + { <nl> + return metric . liveScannedHistogram . count ( ) ; <nl> + } <nl> + <nl> / / End JMX get / set . <nl> <nl> public long estimateKeys ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> index e810dc6 . . 6105714 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> @ @ - 283 , 6 + 283 , 15 @ @ public interface ColumnFamilyStoreMBean <nl> <nl> public boolean isAutoCompactionDisabled ( ) ; <nl> <nl> + / * * Number of tombstoned cells retreived during the last slicequery * / <nl> + public long getTombstonesPerLastRead ( ) ; <nl> + <nl> + / * * Percentage of tombstoned cells retreived during the last slicequery * / <nl> + public float getPercentageTombstonesPerLastRead ( ) ; <nl> + <nl> + / * * Number of live cells retreived during the last slicequery * / <nl> + public long getLiveCellsPerLastRead ( ) ; <nl> + <nl> public long estimateKeys ( ) ; <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java <nl> index 11d7438 . . 443ff8e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java <nl> @ @ - 21 , 16 + 21 , 12 @ @ import java . io . DataInput ; <nl> import java . io . DataOutput ; <nl> import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> - import java . util . Arrays ; <nl> - import java . util . ArrayList ; <nl> - import java . util . Collection ; <nl> - import java . util . Comparator ; <nl> - import java . util . Iterator ; <nl> - import java . util . List ; <nl> + import java . util . * ; <nl> <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . columniterator . OnDiskAtomIterator ; <nl> import org . apache . cassandra . db . columniterator . SSTableSliceIterator ; <nl> @ @ - 202 , 6 + 198 , 8 @ @ public class SliceQueryFilter implements IDiskAtomFilter <nl> } <nl> <nl> Tracing . trace ( " Read { } live and { } tombstoned cells " , columnCounter . live ( ) , columnCounter . ignored ( ) ) ; <nl> + if ( columnCounter . ignored ( ) > DatabaseDescriptor . getTombstoneDebugThreshold ( ) ) <nl> + logger . debug ( " Read { } live and { } tombstoned cells " , columnCounter . live ( ) , columnCounter . ignored ( ) ) ; <nl> } <nl> <nl> public int getLiveCount ( ColumnFamily cf , long now ) <nl> @ @ - 267 , 6 + 265 , 16 @ @ public class SliceQueryFilter implements IDiskAtomFilter <nl> return columnCounter = = null ? 0 : columnCounter . live ( ) ; <nl> } <nl> <nl> + public int lastIgnored ( ) <nl> + { <nl> + return columnCounter = = null ? 0 : columnCounter . ignored ( ) ; <nl> + } <nl> + <nl> + public int lastLive ( ) <nl> + { <nl> + return columnCounter = = null ? 0 : columnCounter . live ( ) ; <nl> + } <nl> + <nl> @ Override <nl> public String toString ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java b / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java <nl> index 0f9f87d . . b63bbfb 100644 <nl> - - - a / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java <nl> + + + b / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java <nl> @ @ - 79 , 6 + 79 , 10 @ @ public class ColumnFamilyMetrics <nl> public final Gauge < Long > bloomFilterDiskSpaceUsed ; <nl> / * * Key cache hit rate for this CF * / <nl> public final Gauge < Double > keyCacheHitRate ; <nl> + / * * Tombstones scanned in queries on this CF * / <nl> + public final Histogram tombstoneScannedHistogram ; <nl> + / * * Live cells scanned in queries on this CF * / <nl> + public final Histogram liveScannedHistogram ; <nl> <nl> private final MetricNameFactory factory ; <nl> <nl> @ @ - 298 , 6 + 302 , 8 @ @ public class ColumnFamilyMetrics <nl> return Math . max ( requests , 1 ) ; / / to avoid NaN . <nl> } <nl> } ) ; <nl> + tombstoneScannedHistogram = Metrics . newHistogram ( factory . createMetricName ( " TombstoneScannedHistogram " ) ) ; <nl> + liveScannedHistogram = Metrics . newHistogram ( factory . createMetricName ( " LiveScannedHistogram " ) ) ; <nl> } <nl> <nl> public void updateSSTableIterated ( int count ) <nl> @ @ - 335 , 6 + 341 , 8 @ @ public class ColumnFamilyMetrics <nl> Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " BloomFilterDiskSpaceUsed " ) ) ; <nl> Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " KeyCacheHitRate " ) ) ; <nl> Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " SpeculativeRetry " ) ) ; <nl> + Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " TombstoneScannedHistogram " ) ) ; <nl> + Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " LiveScannedHistogram " ) ) ; <nl> } <nl> <nl> class ColumnFamilyMetricNameFactory implements MetricNameFactory <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 8e29312 . . 0f1c35c 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 3653 , 4 + 3653 , 14 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> { <nl> return DatabaseDescriptor . getPartitionerName ( ) ; <nl> } <nl> + <nl> + public int getTombstoneDebugThreshold ( ) <nl> + { <nl> + return DatabaseDescriptor . getTombstoneDebugThreshold ( ) ; <nl> + } <nl> + <nl> + public void setTombstoneDebugThreshold ( int tombstoneDebugThreshold ) <nl> + { <nl> + DatabaseDescriptor . setTombstoneDebugThreshold ( tombstoneDebugThreshold ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index e54bef9 . . 73e4124 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 476 , 4 + 476 , 9 @ @ public interface StorageServiceMBean extends NotificationEmitter <nl> public String getClusterName ( ) ; <nl> / * * Returns the cluster partitioner * / <nl> public String getPartitionerName ( ) ; <nl> + <nl> + / * * Returns the threshold for returning debugging queries with many tombstones * / <nl> + public int getTombstoneDebugThreshold ( ) ; <nl> + / * * Sets the threshold for returning debugging queries with many tombstones * / <nl> + public void setTombstoneDebugThreshold ( int tombstoneDebugThreshold ) ; <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 905a436 . . 1525289 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 15 
 + * Fix ColumnDefinition . cellValueType ( ) for non - frozen collection and change SSTabledump to use type . toJSONString ( ) ( CASSANDRA - 13573 ) 
 * Skip materialized view addition if the base table doesn ' t exist ( CASSANDRA - 13737 ) 
 * Drop table should remove corresponding entries in dropped _ columns table ( CASSANDRA - 13730 ) 
 * Log warn message until legacy auth tables have been migrated ( CASSANDRA - 13371 ) 
 diff - - git a / src / java / org / apache / cassandra / config / ColumnDefinition . java b / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 index 34840e3 . . 6a0f530 100644 
 - - - a / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 + + + b / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 @ @ - 391 , 13 + 391 , 24 @ @ public class ColumnDefinition extends ColumnSpecification implements Comparable < 
 / * * 
 * The type of the cell values for cell belonging to this column . 
 * 
 - * This is the same than the column type , except for collections where it ' s the ' valueComparator ' 
 + * This is the same than the column type , except for non - frozen collections where it ' s the ' valueComparator ' 
 * of the collection . 
 + * 
 + * This method should not be used to get value type of non - frozon UDT . 
 * / 
 public AbstractType < ? > cellValueType ( ) 
 { 
 - return type instanceof CollectionType 
 - ? ( ( CollectionType ) type ) . valueComparator ( ) 
 - : type ; 
 + assert ! ( type instanceof UserType & & type . isMultiCell ( ) ) ; 
 + return type instanceof CollectionType & & type . isMultiCell ( ) 
 + ? ( ( CollectionType ) type ) . valueComparator ( ) 
 + : type ; 
 + } 
 + 
 + 
 + public boolean isCounterColumn ( ) 
 + { 
 + if ( type instanceof CollectionType ) / / for thrift 
 + return ( ( CollectionType ) type ) . valueComparator ( ) . isCounter ( ) ; 
 + return type . isCounter ( ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / rows / BTreeRow . java b / src / java / org / apache / cassandra / db / rows / BTreeRow . java 
 index fda33d6 . . 41dad0a 100644 
 - - - a / src / java / org / apache / cassandra / db / rows / BTreeRow . java 
 + + + b / src / java / org / apache / cassandra / db / rows / BTreeRow . java 
 @ @ - 294 , 7 + 294 , 7 @ @ public class BTreeRow extends AbstractRow 
 
 public Row markCounterLocalToBeCleared ( ) 
 { 
 - return transformAndFilter ( primaryKeyLivenessInfo , deletion , ( cd ) - > cd . column ( ) . cellValueType ( ) . isCounter ( ) 
 + return transformAndFilter ( primaryKeyLivenessInfo , deletion , ( cd ) - > cd . column ( ) . isCounterColumn ( ) 
 ? cd . markCounterLocalToBeCleared ( ) 
 : cd ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / rows / BufferCell . java b / src / java / org / apache / cassandra / db / rows / BufferCell . java 
 index e4ad7e6 . . 82ae02c 100644 
 - - - a / src / java / org / apache / cassandra / db / rows / BufferCell . java 
 + + + b / src / java / org / apache / cassandra / db / rows / BufferCell . java 
 @ @ - 89 , 7 + 89 , 7 @ @ public class BufferCell extends AbstractCell 
 
 public boolean isCounterCell ( ) 
 { 
 - return ! isTombstone ( ) & & column . cellValueType ( ) . isCounter ( ) ; 
 + return ! isTombstone ( ) & & column . isCounterColumn ( ) ; 
 } 
 
 public boolean isLive ( int nowInSec ) 
 diff - - git a / src / java / org / apache / cassandra / tools / JsonTransformer . java b / src / java / org / apache / cassandra / tools / JsonTransformer . java 
 index 0a72583 . . 5c32035 100644 
 - - - a / src / java / org / apache / cassandra / tools / JsonTransformer . java 
 + + + b / src / java / org / apache / cassandra / tools / JsonTransformer . java 
 @ @ - 39 , 6 + 39 , 7 @ @ import org . apache . cassandra . db . RangeTombstone ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . db . marshal . CollectionType ; 
 import org . apache . cassandra . db . marshal . CompositeType ; 
 + import org . apache . cassandra . db . marshal . UserType ; 
 import org . apache . cassandra . db . rows . Cell ; 
 import org . apache . cassandra . db . rows . ColumnData ; 
 import org . apache . cassandra . db . rows . ComplexColumnData ; 
 @ @ - 49 , 6 + 50 , 7 @ @ import org . apache . cassandra . db . rows . Row ; 
 import org . apache . cassandra . db . rows . Unfiltered ; 
 import org . apache . cassandra . db . rows . UnfilteredRowIterator ; 
 import org . apache . cassandra . io . sstable . ISSTableScanner ; 
 + import org . apache . cassandra . transport . Server ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . codehaus . jackson . JsonFactory ; 
 import org . codehaus . jackson . JsonGenerator ; 
 @ @ - 411 , 7 + 413 , 7 @ @ public final class JsonTransformer 
 AbstractType < ? > type = cell . column ( ) . type ; 
 json . writeString ( cell . column ( ) . name . toCQLString ( ) ) ; 
 
 - if ( cell . path ( ) ! = null & & cell . path ( ) . size ( ) > 0 ) 
 + if ( type . isCollection ( ) & & type . isMultiCell ( ) ) / / non - frozen collection 
 { 
 CollectionType ct = ( CollectionType ) type ; 
 json . writeFieldName ( " path " ) ; 
 @ @ - 437 , 7 + 439 , 7 @ @ public final class JsonTransformer 
 else 
 { 
 json . writeFieldName ( " value " ) ; 
 - json . writeString ( cell . column ( ) . cellValueType ( ) . getString ( cell . value ( ) ) ) ; 
 + json . writeRawValue ( cell . column ( ) . cellValueType ( ) . toJSONString ( cell . value ( ) , Server . CURRENT _ VERSION ) ) ; 
 } 
 if ( liveInfo . isEmpty ( ) | | cell . timestamp ( ) ! = liveInfo . timestamp ( ) ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / ViewTest . java b / test / unit / org / apache / cassandra / cql3 / ViewTest . java 
 index e595ebd . . f8f8c9f 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / ViewTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / ViewTest . java 
 @ @ - 1262 , 4 + 1262 , 37 @ @ public class ViewTest extends CQLTester 
 
 assertRows ( execute ( " SELECT count ( * ) FROM mv _ test " ) , row ( 1024L ) ) ; 
 } 
 + 
 + @ Test 
 + public void testFrozenCollectionsWithComplicatedInnerType ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k int , intval int , listval frozen < list < tuple < text , text > > > , PRIMARY KEY ( k ) ) " ) ; 
 + 
 + execute ( " USE " + keyspace ( ) ) ; 
 + executeNet ( protocolVersion , " USE " + keyspace ( ) ) ; 
 + 
 + createView ( " mv " , 
 + " CREATE MATERIALIZED VIEW % s AS SELECT * FROM % % s WHERE k IS NOT NULL AND listval IS NOT NULL PRIMARY KEY ( k , listval ) " ) ; 
 + 
 + updateView ( " INSERT INTO % s ( k , intval , listval ) VALUES ( ? , ? , fromJson ( ? ) ) " , 
 + 0 , 
 + 0 , 
 + " [ [ \ " a \ " , \ " 1 \ " ] , [ \ " b \ " , \ " 2 \ " ] , [ \ " c \ " , \ " 3 \ " ] ] " ) ; 
 + 
 + / / verify input 
 + assertRows ( execute ( " SELECT k , toJson ( listval ) FROM % s WHERE k = ? " , 0 ) , 
 + row ( 0 , " [ [ \ " a \ " , \ " 1 \ " ] , [ \ " b \ " , \ " 2 \ " ] , [ \ " c \ " , \ " 3 \ " ] ] " ) ) ; 
 + assertRows ( execute ( " SELECT k , toJson ( listval ) from mv " ) , 
 + row ( 0 , " [ [ \ " a \ " , \ " 1 \ " ] , [ \ " b \ " , \ " 2 \ " ] , [ \ " c \ " , \ " 3 \ " ] ] " ) ) ; 
 + 
 + / / update listval with the same value and it will be compared in view generator 
 + updateView ( " INSERT INTO % s ( k , listval ) VALUES ( ? , fromJson ( ? ) ) " , 
 + 0 , 
 + " [ [ \ " a \ " , \ " 1 \ " ] , [ \ " b \ " , \ " 2 \ " ] , [ \ " c \ " , \ " 3 \ " ] ] " ) ; 
 + / / verify result 
 + assertRows ( execute ( " SELECT k , toJson ( listval ) FROM % s WHERE k = ? " , 0 ) , 
 + row ( 0 , " [ [ \ " a \ " , \ " 1 \ " ] , [ \ " b \ " , \ " 2 \ " ] , [ \ " c \ " , \ " 3 \ " ] ] " ) ) ; 
 + assertRows ( execute ( " SELECT k , toJson ( listval ) from mv " ) , 
 + row ( 0 , " [ [ \ " a \ " , \ " 1 \ " ] , [ \ " b \ " , \ " 2 \ " ] , [ \ " c \ " , \ " 3 \ " ] ] " ) ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 88daf35 . . aef45ba 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 7 , 6 + 7 , 7 @ @ Merged from 1 . 2 : 
 * Allow where clause conditions to be in parenthesis ( CASSANDRA - 6037 ) 
 * Do not open non - ssl storage port if encryption option is all ( CASSANDRA - 3916 ) 
 * Improve memory usage of metadata min / max column names ( CASSANDRA - 6077 ) 
 + * Add tombstone debug threshold and histogram ( CASSANDRA - 6042 , 6057 ) 
 
 
 2 . 0 . 1 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index 4af7275 . . e7d9892 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 405 , 6 + 405 , 11 @ @ snapshot _ before _ compaction : false 
 # lose data on truncation or drop . 
 auto _ snapshot : true 
 
 + # Log a debug message if more than this many tombstones are scanned 
 + # in a single - partition query . Set the threshold on SliceQueryFilter 
 + # to debug to enable . 
 + tombstone _ debug _ threshold : 10000 
 + 
 # Add column indexes to a row after its contents reach this size . 
 # Increase if your column values are large , or if you have a very large 
 # number of columns . The competing causes are , Cassandra has to 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index 392e8c3 . . 131c9ef 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 179 , 6 + 179 , 8 @ @ public class Config 
 
 private static boolean outboundBindAny = false ; 
 
 + public volatile int tombstone _ debug _ threshold = 10000 ; 
 + 
 public static boolean getOutboundBindAny ( ) 
 { 
 return outboundBindAny ; 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 572a06f . . a936f14 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 880 , 6 + 880 , 20 @ @ public class DatabaseDescriptor 
 } 
 
 / * * 
 + * How many tombstones need to be scanned before we log a 
 + * debug message 
 + * / 
 + public static int getTombstoneDebugThreshold ( ) 
 + { 
 + return conf . tombstone _ debug _ threshold ; 
 + } 
 + 
 + public static void setTombstoneDebugThreshold ( int tombstoneDebugThreshold ) 
 + { 
 + conf . tombstone _ debug _ threshold = tombstoneDebugThreshold ; 
 + } 
 + 
 + / * * 
 * size of commitlog segments to allocate 
 * / 
 public static int getCommitLogSegmentSize ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 1ff4832 . . ec9570a 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import com . google . common . base . Function ; 
 import com . google . common . collect . * ; 
 import com . google . common . util . concurrent . Futures ; 
 import com . google . common . util . concurrent . Uninterruptibles ; 
 + import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 49 , 11 + 50 , 7 @ @ import org . apache . cassandra . db . columniterator . OnDiskAtomIterator ; 
 import org . apache . cassandra . db . commitlog . CommitLog ; 
 import org . apache . cassandra . db . commitlog . ReplayPosition ; 
 import org . apache . cassandra . db . compaction . * ; 
 - import org . apache . cassandra . db . filter . ColumnSlice ; 
 - import org . apache . cassandra . db . filter . ExtendedFilter ; 
 - import org . apache . cassandra . db . filter . IDiskAtomFilter ; 
 - import org . apache . cassandra . db . filter . QueryFilter ; 
 - import org . apache . cassandra . db . filter . SliceQueryFilter ; 
 + import org . apache . cassandra . db . filter . * ; 
 import org . apache . cassandra . db . index . SecondaryIndex ; 
 import org . apache . cassandra . db . index . SecondaryIndexManager ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 @ @ - 72 , 7 + 69 , 6 @ @ import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . thrift . IndexExpression ; 
 import org . apache . cassandra . tracing . Tracing ; 
 import org . apache . cassandra . utils . * ; 
 - import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; 
 
 import static org . apache . cassandra . config . CFMetaData . Caching ; 
 
 @ @ - 1300 , 6 + 1296 , 13 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 
 removeDroppedColumns ( result ) ; 
 + 
 + if ( filter . filter instanceof SliceQueryFilter ) 
 + { 
 + / / Log the number of tombstones scanned on single key queries 
 + metric . tombstoneScannedHistogram . update ( ( ( SliceQueryFilter ) filter . filter ) . lastIgnored ( ) ) ; 
 + metric . liveScannedHistogram . update ( ( ( SliceQueryFilter ) filter . filter ) . lastLive ( ) ) ; 
 + } 
 } 
 finally 
 { 
 @ @ - 2173 , 6 + 2176 , 22 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 " is deprecated , set the compaction strategy option ' enabled ' to ' false ' instead or use the nodetool command ' disableautocompaction ' . " ) ; 
 } 
 
 + public long getTombstonesPerLastRead ( ) 
 + { 
 + return metric . tombstoneScannedHistogram . count ( ) ; 
 + } 
 + 
 + public float getPercentageTombstonesPerLastRead ( ) 
 + { 
 + long total = metric . tombstoneScannedHistogram . count ( ) + metric . liveScannedHistogram . count ( ) ; 
 + return ( metric . tombstoneScannedHistogram . count ( ) / total ) ; 
 + } 
 + 
 + public long getLiveCellsPerLastRead ( ) 
 + { 
 + return metric . liveScannedHistogram . count ( ) ; 
 + } 
 + 
 / / End JMX get / set . 
 
 public long estimateKeys ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 index e810dc6 . . 6105714 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 @ @ - 283 , 6 + 283 , 15 @ @ public interface ColumnFamilyStoreMBean 
 
 public boolean isAutoCompactionDisabled ( ) ; 
 
 + / * * Number of tombstoned cells retreived during the last slicequery * / 
 + public long getTombstonesPerLastRead ( ) ; 
 + 
 + / * * Percentage of tombstoned cells retreived during the last slicequery * / 
 + public float getPercentageTombstonesPerLastRead ( ) ; 
 + 
 + / * * Number of live cells retreived during the last slicequery * / 
 + public long getLiveCellsPerLastRead ( ) ; 
 + 
 public long estimateKeys ( ) ; 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java 
 index 11d7438 . . 443ff8e 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java 
 @ @ - 21 , 16 + 21 , 12 @ @ import java . io . DataInput ; 
 import java . io . DataOutput ; 
 import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 - import java . util . Arrays ; 
 - import java . util . ArrayList ; 
 - import java . util . Collection ; 
 - import java . util . Comparator ; 
 - import java . util . Iterator ; 
 - import java . util . List ; 
 + import java . util . * ; 
 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . columniterator . OnDiskAtomIterator ; 
 import org . apache . cassandra . db . columniterator . SSTableSliceIterator ; 
 @ @ - 202 , 6 + 198 , 8 @ @ public class SliceQueryFilter implements IDiskAtomFilter 
 } 
 
 Tracing . trace ( " Read { } live and { } tombstoned cells " , columnCounter . live ( ) , columnCounter . ignored ( ) ) ; 
 + if ( columnCounter . ignored ( ) > DatabaseDescriptor . getTombstoneDebugThreshold ( ) ) 
 + logger . debug ( " Read { } live and { } tombstoned cells " , columnCounter . live ( ) , columnCounter . ignored ( ) ) ; 
 } 
 
 public int getLiveCount ( ColumnFamily cf , long now ) 
 @ @ - 267 , 6 + 265 , 16 @ @ public class SliceQueryFilter implements IDiskAtomFilter 
 return columnCounter = = null ? 0 : columnCounter . live ( ) ; 
 } 
 
 + public int lastIgnored ( ) 
 + { 
 + return columnCounter = = null ? 0 : columnCounter . ignored ( ) ; 
 + } 
 + 
 + public int lastLive ( ) 
 + { 
 + return columnCounter = = null ? 0 : columnCounter . live ( ) ; 
 + } 
 + 
 @ Override 
 public String toString ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java b / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java 
 index 0f9f87d . . b63bbfb 100644 
 - - - a / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java 
 + + + b / src / java / org / apache / cassandra / metrics / ColumnFamilyMetrics . java 
 @ @ - 79 , 6 + 79 , 10 @ @ public class ColumnFamilyMetrics 
 public final Gauge < Long > bloomFilterDiskSpaceUsed ; 
 / * * Key cache hit rate for this CF * / 
 public final Gauge < Double > keyCacheHitRate ; 
 + / * * Tombstones scanned in queries on this CF * / 
 + public final Histogram tombstoneScannedHistogram ; 
 + / * * Live cells scanned in queries on this CF * / 
 + public final Histogram liveScannedHistogram ; 
 
 private final MetricNameFactory factory ; 
 
 @ @ - 298 , 6 + 302 , 8 @ @ public class ColumnFamilyMetrics 
 return Math . max ( requests , 1 ) ; / / to avoid NaN . 
 } 
 } ) ; 
 + tombstoneScannedHistogram = Metrics . newHistogram ( factory . createMetricName ( " TombstoneScannedHistogram " ) ) ; 
 + liveScannedHistogram = Metrics . newHistogram ( factory . createMetricName ( " LiveScannedHistogram " ) ) ; 
 } 
 
 public void updateSSTableIterated ( int count ) 
 @ @ - 335 , 6 + 341 , 8 @ @ public class ColumnFamilyMetrics 
 Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " BloomFilterDiskSpaceUsed " ) ) ; 
 Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " KeyCacheHitRate " ) ) ; 
 Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " SpeculativeRetry " ) ) ; 
 + Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " TombstoneScannedHistogram " ) ) ; 
 + Metrics . defaultRegistry ( ) . removeMetric ( factory . createMetricName ( " LiveScannedHistogram " ) ) ; 
 } 
 
 class ColumnFamilyMetricNameFactory implements MetricNameFactory 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 8e29312 . . 0f1c35c 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 3653 , 4 + 3653 , 14 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 { 
 return DatabaseDescriptor . getPartitionerName ( ) ; 
 } 
 + 
 + public int getTombstoneDebugThreshold ( ) 
 + { 
 + return DatabaseDescriptor . getTombstoneDebugThreshold ( ) ; 
 + } 
 + 
 + public void setTombstoneDebugThreshold ( int tombstoneDebugThreshold ) 
 + { 
 + DatabaseDescriptor . setTombstoneDebugThreshold ( tombstoneDebugThreshold ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index e54bef9 . . 73e4124 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 476 , 4 + 476 , 9 @ @ public interface StorageServiceMBean extends NotificationEmitter 
 public String getClusterName ( ) ; 
 / * * Returns the cluster partitioner * / 
 public String getPartitionerName ( ) ; 
 + 
 + / * * Returns the threshold for returning debugging queries with many tombstones * / 
 + public int getTombstoneDebugThreshold ( ) ; 
 + / * * Sets the threshold for returning debugging queries with many tombstones * / 
 + public void setTombstoneDebugThreshold ( int tombstoneDebugThreshold ) ; 
 }
