BLEU SCORE: 0.02133165846478451

TEST MSG: checkForEndpointCollision fails for legitimate collisions , CASSANDRA - 9765
GENERATED MSG: Reject bootstrapping endpoints that are already in the ring with

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index b77064d . . 23eff82 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 678 , 6 + 678 , 16 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> } <nl> } <nl> <nl> + / * * <nl> + * A fat client is a node that has not joined the ring , therefore acting as a coordinator only . <nl> + * It possesses no data . This method attempts to determine this property , except that for dead nodes <nl> + * we cannot tell . ( ? ? ) We should also check that the node is not shutdown ( and possibly other states ) <nl> + * but due to fear of breaking things I added a new method to do this , isLiveFatClient ( ) , see <nl> + * CASSANDRA - 9765 for more information . <nl> + * <nl> + * @ param endpoint - the endpoint we need to check <nl> + * @ return true if it is a fat client <nl> + * / <nl> public boolean isFatClient ( InetAddress endpoint ) <nl> { <nl> EndpointState epState = endpointStateMap . get ( endpoint ) ; <nl> @ @ - 688 , 6 + 698 , 11 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> return ! isDeadState ( epState ) & & ! StorageService . instance . getTokenMetadata ( ) . isMember ( endpoint ) ; <nl> } <nl> <nl> + public boolean isLiveFatClient ( InetAddress endpoint ) <nl> + { <nl> + return isFatClient ( endpoint ) & & ! isShutdownState ( endpointStateMap . get ( endpoint ) ) ; <nl> + } <nl> + <nl> private void doStatusCheck ( ) <nl> { <nl> if ( logger . isTraceEnabled ( ) ) <nl> @ @ - 1008 , 12 + 1023 , 9 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> <nl> public boolean isDeadState ( EndpointState epState ) <nl> { <nl> - if ( epState . getApplicationState ( ApplicationState . STATUS ) = = null ) <nl> + String state = getApplicationState ( epState ) ; <nl> + if ( state . isEmpty ( ) ) <nl> return false ; <nl> - String value = epState . getApplicationState ( ApplicationState . STATUS ) . value ; <nl> - String [ ] pieces = value . split ( VersionedValue . DELIMITER _ STR , - 1 ) ; <nl> - assert ( pieces . length > 0 ) ; <nl> - String state = pieces [ 0 ] ; <nl> for ( String deadstate : DEAD _ STATES ) <nl> { <nl> if ( state . equals ( deadstate ) ) <nl> @ @ - 1024 , 12 + 1036 , 9 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> <nl> public boolean isSilentShutdownState ( EndpointState epState ) <nl> { <nl> - if ( epState . getApplicationState ( ApplicationState . STATUS ) = = null ) <nl> + String state = getApplicationState ( epState ) ; <nl> + if ( state . isEmpty ( ) ) <nl> return false ; <nl> - String value = epState . getApplicationState ( ApplicationState . STATUS ) . value ; <nl> - String [ ] pieces = value . split ( VersionedValue . DELIMITER _ STR , - 1 ) ; <nl> - assert ( pieces . length > 0 ) ; <nl> - String state = pieces [ 0 ] ; <nl> for ( String deadstate : SILENT _ SHUTDOWN _ STATES ) <nl> { <nl> if ( state . equals ( deadstate ) ) <nl> @ @ - 1038 , 6 + 1047 , 22 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> return false ; <nl> } <nl> <nl> + public boolean isShutdownState ( EndpointState epState ) <nl> + { <nl> + return getApplicationState ( epState ) . equals ( VersionedValue . SHUTDOWN ) ; <nl> + } <nl> + <nl> + private static String getApplicationState ( EndpointState epState ) <nl> + { <nl> + if ( epState = = null | | epState . getApplicationState ( ApplicationState . STATUS ) = = null ) <nl> + return " " ; <nl> + <nl> + String value = epState . getApplicationState ( ApplicationState . STATUS ) . value ; <nl> + String [ ] pieces = value . split ( VersionedValue . DELIMITER _ STR , - 1 ) ; <nl> + assert ( pieces . length > 0 ) ; <nl> + return pieces [ 0 ] ; <nl> + } <nl> + <nl> void applyStateLocally ( Map < InetAddress , EndpointState > epStateMap ) <nl> { <nl> for ( Entry < InetAddress , EndpointState > entry : epStateMap . entrySet ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index a256ce7 . . d70fff2 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 456 , 7 + 456 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; <nl> Gossiper . instance . doShadowRound ( ) ; <nl> EndpointState epState = Gossiper . instance . getEndpointStateForEndpoint ( FBUtilities . getBroadcastAddress ( ) ) ; <nl> - if ( epState ! = null & & ! Gossiper . instance . isDeadState ( epState ) & & ! Gossiper . instance . isFatClient ( FBUtilities . getBroadcastAddress ( ) ) ) <nl> + if ( epState ! = null & & ! Gossiper . instance . isDeadState ( epState ) & & ! Gossiper . instance . isLiveFatClient ( FBUtilities . getBroadcastAddress ( ) ) ) <nl> { <nl> throw new RuntimeException ( String . format ( " A node with address % s already exists , cancelling join . " + <nl> " Use cassandra . replace _ address if you want to replace this node . " ,
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index ac4c010 . . c01b4a8 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 3 + 1 , 7 @ @ <nl> + 2 . 0 . 3 <nl> + * Reject bootstrapping if the node already exists in gossip ( CASSANDRA - 5571 ) <nl> + <nl> + <nl> 2 . 0 . 2 <nl> * Update FailureDetector to use nanontime ( CASSANDRA - 4925 ) <nl> * Fix FileCacheService regressions ( CASSANDRA - 6149 )

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index b77064d . . 23eff82 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 678 , 6 + 678 , 16 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 } 
 } 
 
 + / * * 
 + * A fat client is a node that has not joined the ring , therefore acting as a coordinator only . 
 + * It possesses no data . This method attempts to determine this property , except that for dead nodes 
 + * we cannot tell . ( ? ? ) We should also check that the node is not shutdown ( and possibly other states ) 
 + * but due to fear of breaking things I added a new method to do this , isLiveFatClient ( ) , see 
 + * CASSANDRA - 9765 for more information . 
 + * 
 + * @ param endpoint - the endpoint we need to check 
 + * @ return true if it is a fat client 
 + * / 
 public boolean isFatClient ( InetAddress endpoint ) 
 { 
 EndpointState epState = endpointStateMap . get ( endpoint ) ; 
 @ @ - 688 , 6 + 698 , 11 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 return ! isDeadState ( epState ) & & ! StorageService . instance . getTokenMetadata ( ) . isMember ( endpoint ) ; 
 } 
 
 + public boolean isLiveFatClient ( InetAddress endpoint ) 
 + { 
 + return isFatClient ( endpoint ) & & ! isShutdownState ( endpointStateMap . get ( endpoint ) ) ; 
 + } 
 + 
 private void doStatusCheck ( ) 
 { 
 if ( logger . isTraceEnabled ( ) ) 
 @ @ - 1008 , 12 + 1023 , 9 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 
 public boolean isDeadState ( EndpointState epState ) 
 { 
 - if ( epState . getApplicationState ( ApplicationState . STATUS ) = = null ) 
 + String state = getApplicationState ( epState ) ; 
 + if ( state . isEmpty ( ) ) 
 return false ; 
 - String value = epState . getApplicationState ( ApplicationState . STATUS ) . value ; 
 - String [ ] pieces = value . split ( VersionedValue . DELIMITER _ STR , - 1 ) ; 
 - assert ( pieces . length > 0 ) ; 
 - String state = pieces [ 0 ] ; 
 for ( String deadstate : DEAD _ STATES ) 
 { 
 if ( state . equals ( deadstate ) ) 
 @ @ - 1024 , 12 + 1036 , 9 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 
 public boolean isSilentShutdownState ( EndpointState epState ) 
 { 
 - if ( epState . getApplicationState ( ApplicationState . STATUS ) = = null ) 
 + String state = getApplicationState ( epState ) ; 
 + if ( state . isEmpty ( ) ) 
 return false ; 
 - String value = epState . getApplicationState ( ApplicationState . STATUS ) . value ; 
 - String [ ] pieces = value . split ( VersionedValue . DELIMITER _ STR , - 1 ) ; 
 - assert ( pieces . length > 0 ) ; 
 - String state = pieces [ 0 ] ; 
 for ( String deadstate : SILENT _ SHUTDOWN _ STATES ) 
 { 
 if ( state . equals ( deadstate ) ) 
 @ @ - 1038 , 6 + 1047 , 22 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 return false ; 
 } 
 
 + public boolean isShutdownState ( EndpointState epState ) 
 + { 
 + return getApplicationState ( epState ) . equals ( VersionedValue . SHUTDOWN ) ; 
 + } 
 + 
 + private static String getApplicationState ( EndpointState epState ) 
 + { 
 + if ( epState = = null | | epState . getApplicationState ( ApplicationState . STATUS ) = = null ) 
 + return " " ; 
 + 
 + String value = epState . getApplicationState ( ApplicationState . STATUS ) . value ; 
 + String [ ] pieces = value . split ( VersionedValue . DELIMITER _ STR , - 1 ) ; 
 + assert ( pieces . length > 0 ) ; 
 + return pieces [ 0 ] ; 
 + } 
 + 
 void applyStateLocally ( Map < InetAddress , EndpointState > epStateMap ) 
 { 
 for ( Entry < InetAddress , EndpointState > entry : epStateMap . entrySet ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index a256ce7 . . d70fff2 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 456 , 7 + 456 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; 
 Gossiper . instance . doShadowRound ( ) ; 
 EndpointState epState = Gossiper . instance . getEndpointStateForEndpoint ( FBUtilities . getBroadcastAddress ( ) ) ; 
 - if ( epState ! = null & & ! Gossiper . instance . isDeadState ( epState ) & & ! Gossiper . instance . isFatClient ( FBUtilities . getBroadcastAddress ( ) ) ) 
 + if ( epState ! = null & & ! Gossiper . instance . isDeadState ( epState ) & & ! Gossiper . instance . isLiveFatClient ( FBUtilities . getBroadcastAddress ( ) ) ) 
 { 
 throw new RuntimeException ( String . format ( " A node with address % s already exists , cancelling join . " + 
 " Use cassandra . replace _ address if you want to replace this node . " ,

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index ac4c010 . . c01b4a8 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 3 + 1 , 7 @ @ 
 + 2 . 0 . 3 
 + * Reject bootstrapping if the node already exists in gossip ( CASSANDRA - 5571 ) 
 + 
 + 
 2 . 0 . 2 
 * Update FailureDetector to use nanontime ( CASSANDRA - 4925 ) 
 * Fix FileCacheService regressions ( CASSANDRA - 6149 )
