BLEU SCORE: 0.08310415003234632

TEST MSG: Make ScrubTest pass
GENERATED MSG: fix bulk - loading compressed sstables

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / io / sstable / SimpleSSTableMultiWriter . java b / src / java / org / apache / cassandra / io / sstable / SimpleSSTableMultiWriter . java <nl> index e034d90 . . fd1b9a7 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SimpleSSTableMultiWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SimpleSSTableMultiWriter . java <nl> @ @ - 35 , 7 + 35 , 7 @ @ public class SimpleSSTableMultiWriter implements SSTableMultiWriter <nl> { <nl> private final SSTableWriter writer ; <nl> <nl> - private SimpleSSTableMultiWriter ( SSTableWriter writer ) <nl> + protected SimpleSSTableMultiWriter ( SSTableWriter writer ) <nl> { <nl> this . writer = writer ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java <nl> index fdc1c64 . . e02c919 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java <nl> @ @ - 52 , 7 + 52 , 7 @ @ public class BigTableWriter extends SSTableWriter <nl> <nl> private final IndexWriter iwriter ; <nl> private final SegmentedFile . Builder dbuilder ; <nl> - private final SequentialWriter dataFile ; <nl> + protected final SequentialWriter dataFile ; <nl> private DecoratedKey lastWrittenKey ; <nl> private FileMark dataMark ; <nl> <nl> @ @ - 98 , 7 + 98 , 7 @ @ public class BigTableWriter extends SSTableWriter <nl> / * * <nl> * Perform sanity checks on @ param decoratedKey and @ return the position in the data file before any data is written <nl> * / <nl> - private long beforeAppend ( DecoratedKey decoratedKey ) <nl> + protected long beforeAppend ( DecoratedKey decoratedKey ) <nl> { <nl> assert decoratedKey ! = null : " Keys must not be null " ; / / empty keys ARE allowed b / c of indexed column values <nl> if ( lastWrittenKey ! = null & & lastWrittenKey . compareTo ( decoratedKey ) > = 0 ) <nl> diff - - git a / test / unit / org / apache / cassandra / db / ScrubTest . java b / test / unit / org / apache / cassandra / db / ScrubTest . java <nl> index ab99750 . . a553fe8 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / ScrubTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / ScrubTest . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> <nl> import org . apache . cassandra . * ; <nl> + import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . cql3 . Operator ; <nl> import org . apache . cassandra . cql3 . QueryProcessor ; <nl> @ @ - 49 , 7 + 50 , 11 @ @ import org . apache . cassandra . exceptions . RequestExecutionException ; <nl> import org . apache . cassandra . exceptions . WriteTimeoutException ; <nl> import org . apache . cassandra . io . compress . CompressionMetadata ; <nl> import org . apache . cassandra . io . sstable . * ; <nl> + import org . apache . cassandra . io . sstable . format . SSTableFormat ; <nl> import org . apache . cassandra . io . sstable . format . SSTableReader ; <nl> + import org . apache . cassandra . io . sstable . format . SSTableWriter ; <nl> + import org . apache . cassandra . io . sstable . format . big . BigTableWriter ; <nl> + import org . apache . cassandra . io . sstable . metadata . MetadataCollector ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . schema . KeyspaceParams ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> @ @ - 321 , 14 + 326 , 8 @ @ public class ScrubTest <nl> String filename = cfs . getSSTablePath ( tempDataDir ) ; <nl> Descriptor desc = Descriptor . fromFilename ( filename ) ; <nl> <nl> - try ( SSTableTxnWriter writer = SSTableTxnWriter . create ( cfs , desc , <nl> - keys . size ( ) , <nl> - 0L , <nl> - 0 , <nl> - new SerializationHeader ( true , <nl> - cfs . metadata , <nl> - cfs . metadata . partitionColumns ( ) , <nl> - EncodingStats . NO _ STATS ) ) ) <nl> + LifecycleTransaction txn = LifecycleTransaction . offline ( OperationType . WRITE , desc . directory ) ; <nl> + try ( SSTableTxnWriter writer = new SSTableTxnWriter ( txn , createTestWriter ( desc , ( long ) keys . size ( ) , cfs . metadata , txn ) ) ) <nl> { <nl> <nl> for ( String k : keys ) <nl> @ @ - 365 , 8 + 364 , 8 @ @ public class ScrubTest <nl> if ( sstable . last . compareTo ( sstable . first ) < 0 ) <nl> sstable . last = sstable . first ; <nl> <nl> - try ( LifecycleTransaction txn = LifecycleTransaction . offline ( OperationType . SCRUB , sstable ) ; <nl> - Scrubber scrubber = new Scrubber ( cfs , txn , false , true , true ) ) <nl> + try ( LifecycleTransaction scrubTxn = LifecycleTransaction . offline ( OperationType . SCRUB , sstable ) ; <nl> + Scrubber scrubber = new Scrubber ( cfs , scrubTxn , false , true , true ) ) <nl> { <nl> scrubber . scrub ( ) ; <nl> } <nl> @ @ - 629 , 4 + 628 , 37 @ @ public class ScrubTest <nl> / / check index is still working <nl> assertOrdered ( Util . cmd ( cfs ) . filterOn ( colName , Operator . EQ , 1L ) . build ( ) , numRows / 2 ) ; <nl> } <nl> + <nl> + private static SSTableMultiWriter createTestWriter ( Descriptor descriptor , long keyCount , CFMetaData metadata , LifecycleTransaction txn ) <nl> + { <nl> + SerializationHeader header = new SerializationHeader ( true , metadata , metadata . partitionColumns ( ) , EncodingStats . NO _ STATS ) ; <nl> + MetadataCollector collector = new MetadataCollector ( metadata . comparator ) . sstableLevel ( 0 ) ; <nl> + return new TestMultiWriter ( new TestWriter ( descriptor , keyCount , 0 , metadata , collector , header , txn ) ) ; <nl> + } <nl> + <nl> + private static class TestMultiWriter extends SimpleSSTableMultiWriter <nl> + { <nl> + TestMultiWriter ( SSTableWriter writer ) <nl> + { <nl> + super ( writer ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Test writer that allows to write out of order SSTable . <nl> + * / <nl> + private static class TestWriter extends BigTableWriter <nl> + { <nl> + TestWriter ( Descriptor descriptor , long keyCount , long repairedAt , CFMetaData metadata , <nl> + MetadataCollector collector , SerializationHeader header , LifecycleTransaction txn ) <nl> + { <nl> + super ( descriptor , keyCount , repairedAt , metadata , collector , header , txn ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected long beforeAppend ( DecoratedKey decoratedKey ) <nl> + { <nl> + return dataFile . position ( ) ; <nl> + } <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 83310ed . . a9cb47c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 7 , 6 + 7 , 7 @ @ <nl> * DC - local CAS ( CASSANDRA - 5797 ) <nl> * Add a native _ protocol _ version column to the system . local table ( CASSANRDA - 5819 ) <nl> Merged from 1 . 2 : <nl> + * fix bulk - loading compressed sstables ( CASSANDRA - 5820 ) <nl> * ( Hadoop ) fix quoting in CqlPagingRecordReader and CqlRecordWriter <nl> ( CASSANDRA - 5824 ) <nl> * update default LCS sstable size to 160MB ( CASSANDRA - 5727 ) <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> index 9f10061 . . e30e417 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> @ @ - 568 , 7 + 568 , 7 @ @ public class SSTableReader extends SSTable <nl> if ( ! compression ) <nl> throw new IllegalStateException ( this + " is not compressed " ) ; <nl> <nl> - return ( ( CompressedPoolingSegmentedFile ) dfile ) . metadata ; <nl> + return ( ( ICompressedFile ) dfile ) . getMetadata ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java <nl> index c3a6212 . . 52e5a03 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java <nl> @ @ - 77 , 9 + 77 , 7 @ @ public class SSTableSimpleUnsortedWriter extends AbstractSSTableSimpleWriter <nl> int bufferSizeInMB , <nl> CompressionParameters compressParameters ) <nl> { <nl> - super ( directory , new CFMetaData ( keyspace , columnFamily , subComparator = = null ? ColumnFamilyType . Standard : ColumnFamilyType . Super , comparator , subComparator ) . compressionParameters ( compressParameters ) , partitioner ) ; <nl> - this . bufferSize = bufferSizeInMB * 1024L * 1024L ; <nl> - this . diskWriter . start ( ) ; <nl> + this ( directory , new CFMetaData ( keyspace , columnFamily , subComparator = = null ? ColumnFamilyType . Standard : ColumnFamilyType . Super , comparator , subComparator ) . compressionParameters ( compressParameters ) , partitioner , bufferSizeInMB ) ; <nl> } <nl> <nl> public SSTableSimpleUnsortedWriter ( File directory , <nl> @ @ - 93 , 6 + 91 , 13 @ @ public class SSTableSimpleUnsortedWriter extends AbstractSSTableSimpleWriter <nl> this ( directory , partitioner , keyspace , columnFamily , comparator , subComparator , bufferSizeInMB , new CompressionParameters ( null ) ) ; <nl> } <nl> <nl> + public SSTableSimpleUnsortedWriter ( File directory , CFMetaData metadata , IPartitioner partitioner , long bufferSizeInMB ) <nl> + { <nl> + super ( directory , metadata , partitioner ) ; <nl> + this . bufferSize = bufferSizeInMB * 1024L * 1024L ; <nl> + this . diskWriter . start ( ) ; <nl> + } <nl> + <nl> protected void writeRow ( DecoratedKey key , ColumnFamily columnFamily ) throws IOException <nl> { <nl> currentSize + = key . key . remaining ( ) + ColumnFamily . serializer . serializedSize ( columnFamily , MessagingService . current _ version ) * 1 . 2 ; <nl> diff - - git a / src / java / org / apache / cassandra / io / util / CompressedPoolingSegmentedFile . java b / src / java / org / apache / cassandra / io / util / CompressedPoolingSegmentedFile . java <nl> index ef7b3b3 . . 121bdb2 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / CompressedPoolingSegmentedFile . java <nl> + + + b / src / java / org / apache / cassandra / io / util / CompressedPoolingSegmentedFile . java <nl> @ @ - 20 , 7 + 20 , 7 @ @ package org . apache . cassandra . io . util ; <nl> import org . apache . cassandra . io . compress . CompressedRandomAccessReader ; <nl> import org . apache . cassandra . io . compress . CompressionMetadata ; <nl> <nl> - public class CompressedPoolingSegmentedFile extends PoolingSegmentedFile <nl> + public class CompressedPoolingSegmentedFile extends PoolingSegmentedFile implements ICompressedFile <nl> { <nl> public final CompressionMetadata metadata ; <nl> <nl> @ @ - 48 , 10 + 48 , 15 @ @ public class CompressedPoolingSegmentedFile extends PoolingSegmentedFile <nl> return CompressedRandomAccessReader . open ( path , metadata , this ) ; <nl> } <nl> <nl> + public CompressionMetadata getMetadata ( ) <nl> + { <nl> + return metadata ; <nl> + } <nl> + <nl> @ Override <nl> public void cleanup ( ) <nl> { <nl> super . cleanup ( ) ; <nl> metadata . close ( ) ; <nl> } <nl> - } <nl> \ No newline at end of file <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java b / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java <nl> index 4a1e755 . . f41b1aa 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java <nl> + + + b / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java <nl> @ @ - 20 , 7 + 20 , 7 @ @ package org . apache . cassandra . io . util ; <nl> import org . apache . cassandra . io . compress . CompressedRandomAccessReader ; <nl> import org . apache . cassandra . io . compress . CompressionMetadata ; <nl> <nl> - public class CompressedSegmentedFile extends SegmentedFile <nl> + public class CompressedSegmentedFile extends SegmentedFile implements ICompressedFile <nl> { <nl> public final CompressionMetadata metadata ; <nl> <nl> @ @ - 50 , 6 + 50 , 11 @ @ public class CompressedSegmentedFile extends SegmentedFile <nl> return reader ; <nl> } <nl> <nl> + public CompressionMetadata getMetadata ( ) <nl> + { <nl> + return metadata ; <nl> + } <nl> + <nl> public void cleanup ( ) <nl> { <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index bec8c8d . . d0581fb 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 3526 , 7 + 3526 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> SSTableLoader . Client client = new SSTableLoader . Client ( ) <nl> { <nl> - @ Override <nl> public void init ( String keyspace ) <nl> { <nl> try <nl> @ @ - 3545 , 7 + 3544 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> } <nl> } <nl> <nl> - @ Override <nl> public CFMetaData getCFMetaData ( String keyspace , String cfName ) <nl> { <nl> return Schema . instance . getCFMetaData ( keyspace , cfName ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableLoaderTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableLoaderTest . java <nl> new file mode 100644 <nl> index 0000000 . . 236ee2d <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableLoaderTest . java <nl> @ @ - 0 , 0 + 1 , 89 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . io . sstable ; <nl> + <nl> + import java . io . File ; <nl> + import java . util . List ; <nl> + <nl> + import com . google . common . io . Files ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . SchemaLoader ; <nl> + import org . apache . cassandra . Util ; <nl> + import org . apache . cassandra . config . CFMetaData ; <nl> + import org . apache . cassandra . config . Schema ; <nl> + import org . apache . cassandra . db . DecoratedKey ; <nl> + import org . apache . cassandra . db . Keyspace ; <nl> + import org . apache . cassandra . db . Row ; <nl> + import org . apache . cassandra . dht . Range ; <nl> + import org . apache . cassandra . dht . Token ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> + import org . apache . cassandra . utils . OutputHandler ; <nl> + <nl> + import static junit . framework . Assert . assertEquals ; <nl> + <nl> + public class SSTableLoaderTest extends SchemaLoader <nl> + { <nl> + @ BeforeClass <nl> + public static void setup ( ) throws Exception <nl> + { <nl> + StorageService . instance . initServer ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testLoadingSSTable ( ) throws Exception <nl> + { <nl> + File tempdir = Files . createTempDir ( ) ; <nl> + File dataDir = new File ( tempdir . getAbsolutePath ( ) + File . separator + " Keyspace1 " + File . separator + " Standard1 " ) ; <nl> + assert dataDir . mkdirs ( ) ; <nl> + CFMetaData cfmeta = Schema . instance . getCFMetaData ( " Keyspace1 " , " Standard1 " ) ; <nl> + SSTableSimpleUnsortedWriter writer = new SSTableSimpleUnsortedWriter ( dataDir , <nl> + cfmeta , <nl> + StorageService . getPartitioner ( ) , <nl> + 1 ) ; <nl> + DecoratedKey key = Util . dk ( " key1 " ) ; <nl> + writer . newRow ( key . key ) ; <nl> + writer . addColumn ( ByteBufferUtil . bytes ( " col1 " ) , ByteBufferUtil . bytes ( 100 ) , 1 ) ; <nl> + writer . close ( ) ; <nl> + <nl> + SSTableLoader loader = new SSTableLoader ( dataDir , new SSTableLoader . Client ( ) <nl> + { <nl> + public void init ( String keyspace ) <nl> + { <nl> + for ( Range < Token > range : StorageService . instance . getLocalRanges ( " Keyspace1 " ) ) <nl> + addRangeForEndpoint ( range , FBUtilities . getBroadcastAddress ( ) ) ; <nl> + setPartitioner ( StorageService . getPartitioner ( ) ) ; <nl> + } <nl> + <nl> + public CFMetaData getCFMetaData ( String keyspace , String cfName ) <nl> + { <nl> + return Schema . instance . getCFMetaData ( keyspace , cfName ) ; <nl> + } <nl> + } , new OutputHandler . SystemOutput ( false , false ) ) ; <nl> + <nl> + loader . stream ( ) . get ( ) ; <nl> + <nl> + List < Row > rows = Util . getRangeSlice ( Keyspace . open ( " Keyspace1 " ) . getColumnFamilyStore ( " Standard1 " ) ) ; <nl> + assertEquals ( 1 , rows . size ( ) ) ; <nl> + assertEquals ( key , rows . get ( 0 ) . key ) ; <nl> + assertEquals ( ByteBufferUtil . bytes ( 100 ) , rows . get ( 0 ) . cf . getColumn ( ByteBufferUtil . bytes ( " col1 " ) ) . value ( ) ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / io / sstable / SimpleSSTableMultiWriter . java b / src / java / org / apache / cassandra / io / sstable / SimpleSSTableMultiWriter . java 
 index e034d90 . . fd1b9a7 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SimpleSSTableMultiWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SimpleSSTableMultiWriter . java 
 @ @ - 35 , 7 + 35 , 7 @ @ public class SimpleSSTableMultiWriter implements SSTableMultiWriter 
 { 
 private final SSTableWriter writer ; 
 
 - private SimpleSSTableMultiWriter ( SSTableWriter writer ) 
 + protected SimpleSSTableMultiWriter ( SSTableWriter writer ) 
 { 
 this . writer = writer ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java 
 index fdc1c64 . . e02c919 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java 
 @ @ - 52 , 7 + 52 , 7 @ @ public class BigTableWriter extends SSTableWriter 
 
 private final IndexWriter iwriter ; 
 private final SegmentedFile . Builder dbuilder ; 
 - private final SequentialWriter dataFile ; 
 + protected final SequentialWriter dataFile ; 
 private DecoratedKey lastWrittenKey ; 
 private FileMark dataMark ; 
 
 @ @ - 98 , 7 + 98 , 7 @ @ public class BigTableWriter extends SSTableWriter 
 / * * 
 * Perform sanity checks on @ param decoratedKey and @ return the position in the data file before any data is written 
 * / 
 - private long beforeAppend ( DecoratedKey decoratedKey ) 
 + protected long beforeAppend ( DecoratedKey decoratedKey ) 
 { 
 assert decoratedKey ! = null : " Keys must not be null " ; / / empty keys ARE allowed b / c of indexed column values 
 if ( lastWrittenKey ! = null & & lastWrittenKey . compareTo ( decoratedKey ) > = 0 ) 
 diff - - git a / test / unit / org / apache / cassandra / db / ScrubTest . java b / test / unit / org / apache / cassandra / db / ScrubTest . java 
 index ab99750 . . a553fe8 100644 
 - - - a / test / unit / org / apache / cassandra / db / ScrubTest . java 
 + + + b / test / unit / org / apache / cassandra / db / ScrubTest . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 
 import org . apache . cassandra . * ; 
 + import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . cql3 . Operator ; 
 import org . apache . cassandra . cql3 . QueryProcessor ; 
 @ @ - 49 , 7 + 50 , 11 @ @ import org . apache . cassandra . exceptions . RequestExecutionException ; 
 import org . apache . cassandra . exceptions . WriteTimeoutException ; 
 import org . apache . cassandra . io . compress . CompressionMetadata ; 
 import org . apache . cassandra . io . sstable . * ; 
 + import org . apache . cassandra . io . sstable . format . SSTableFormat ; 
 import org . apache . cassandra . io . sstable . format . SSTableReader ; 
 + import org . apache . cassandra . io . sstable . format . SSTableWriter ; 
 + import org . apache . cassandra . io . sstable . format . big . BigTableWriter ; 
 + import org . apache . cassandra . io . sstable . metadata . MetadataCollector ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . schema . KeyspaceParams ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 @ @ - 321 , 14 + 326 , 8 @ @ public class ScrubTest 
 String filename = cfs . getSSTablePath ( tempDataDir ) ; 
 Descriptor desc = Descriptor . fromFilename ( filename ) ; 
 
 - try ( SSTableTxnWriter writer = SSTableTxnWriter . create ( cfs , desc , 
 - keys . size ( ) , 
 - 0L , 
 - 0 , 
 - new SerializationHeader ( true , 
 - cfs . metadata , 
 - cfs . metadata . partitionColumns ( ) , 
 - EncodingStats . NO _ STATS ) ) ) 
 + LifecycleTransaction txn = LifecycleTransaction . offline ( OperationType . WRITE , desc . directory ) ; 
 + try ( SSTableTxnWriter writer = new SSTableTxnWriter ( txn , createTestWriter ( desc , ( long ) keys . size ( ) , cfs . metadata , txn ) ) ) 
 { 
 
 for ( String k : keys ) 
 @ @ - 365 , 8 + 364 , 8 @ @ public class ScrubTest 
 if ( sstable . last . compareTo ( sstable . first ) < 0 ) 
 sstable . last = sstable . first ; 
 
 - try ( LifecycleTransaction txn = LifecycleTransaction . offline ( OperationType . SCRUB , sstable ) ; 
 - Scrubber scrubber = new Scrubber ( cfs , txn , false , true , true ) ) 
 + try ( LifecycleTransaction scrubTxn = LifecycleTransaction . offline ( OperationType . SCRUB , sstable ) ; 
 + Scrubber scrubber = new Scrubber ( cfs , scrubTxn , false , true , true ) ) 
 { 
 scrubber . scrub ( ) ; 
 } 
 @ @ - 629 , 4 + 628 , 37 @ @ public class ScrubTest 
 / / check index is still working 
 assertOrdered ( Util . cmd ( cfs ) . filterOn ( colName , Operator . EQ , 1L ) . build ( ) , numRows / 2 ) ; 
 } 
 + 
 + private static SSTableMultiWriter createTestWriter ( Descriptor descriptor , long keyCount , CFMetaData metadata , LifecycleTransaction txn ) 
 + { 
 + SerializationHeader header = new SerializationHeader ( true , metadata , metadata . partitionColumns ( ) , EncodingStats . NO _ STATS ) ; 
 + MetadataCollector collector = new MetadataCollector ( metadata . comparator ) . sstableLevel ( 0 ) ; 
 + return new TestMultiWriter ( new TestWriter ( descriptor , keyCount , 0 , metadata , collector , header , txn ) ) ; 
 + } 
 + 
 + private static class TestMultiWriter extends SimpleSSTableMultiWriter 
 + { 
 + TestMultiWriter ( SSTableWriter writer ) 
 + { 
 + super ( writer ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Test writer that allows to write out of order SSTable . 
 + * / 
 + private static class TestWriter extends BigTableWriter 
 + { 
 + TestWriter ( Descriptor descriptor , long keyCount , long repairedAt , CFMetaData metadata , 
 + MetadataCollector collector , SerializationHeader header , LifecycleTransaction txn ) 
 + { 
 + super ( descriptor , keyCount , repairedAt , metadata , collector , header , txn ) ; 
 + } 
 + 
 + @ Override 
 + protected long beforeAppend ( DecoratedKey decoratedKey ) 
 + { 
 + return dataFile . position ( ) ; 
 + } 
 + } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 83310ed . . a9cb47c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 7 , 6 + 7 , 7 @ @ 
 * DC - local CAS ( CASSANDRA - 5797 ) 
 * Add a native _ protocol _ version column to the system . local table ( CASSANRDA - 5819 ) 
 Merged from 1 . 2 : 
 + * fix bulk - loading compressed sstables ( CASSANDRA - 5820 ) 
 * ( Hadoop ) fix quoting in CqlPagingRecordReader and CqlRecordWriter 
 ( CASSANDRA - 5824 ) 
 * update default LCS sstable size to 160MB ( CASSANDRA - 5727 ) 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 index 9f10061 . . e30e417 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 @ @ - 568 , 7 + 568 , 7 @ @ public class SSTableReader extends SSTable 
 if ( ! compression ) 
 throw new IllegalStateException ( this + " is not compressed " ) ; 
 
 - return ( ( CompressedPoolingSegmentedFile ) dfile ) . metadata ; 
 + return ( ( ICompressedFile ) dfile ) . getMetadata ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java 
 index c3a6212 . . 52e5a03 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableSimpleUnsortedWriter . java 
 @ @ - 77 , 9 + 77 , 7 @ @ public class SSTableSimpleUnsortedWriter extends AbstractSSTableSimpleWriter 
 int bufferSizeInMB , 
 CompressionParameters compressParameters ) 
 { 
 - super ( directory , new CFMetaData ( keyspace , columnFamily , subComparator = = null ? ColumnFamilyType . Standard : ColumnFamilyType . Super , comparator , subComparator ) . compressionParameters ( compressParameters ) , partitioner ) ; 
 - this . bufferSize = bufferSizeInMB * 1024L * 1024L ; 
 - this . diskWriter . start ( ) ; 
 + this ( directory , new CFMetaData ( keyspace , columnFamily , subComparator = = null ? ColumnFamilyType . Standard : ColumnFamilyType . Super , comparator , subComparator ) . compressionParameters ( compressParameters ) , partitioner , bufferSizeInMB ) ; 
 } 
 
 public SSTableSimpleUnsortedWriter ( File directory , 
 @ @ - 93 , 6 + 91 , 13 @ @ public class SSTableSimpleUnsortedWriter extends AbstractSSTableSimpleWriter 
 this ( directory , partitioner , keyspace , columnFamily , comparator , subComparator , bufferSizeInMB , new CompressionParameters ( null ) ) ; 
 } 
 
 + public SSTableSimpleUnsortedWriter ( File directory , CFMetaData metadata , IPartitioner partitioner , long bufferSizeInMB ) 
 + { 
 + super ( directory , metadata , partitioner ) ; 
 + this . bufferSize = bufferSizeInMB * 1024L * 1024L ; 
 + this . diskWriter . start ( ) ; 
 + } 
 + 
 protected void writeRow ( DecoratedKey key , ColumnFamily columnFamily ) throws IOException 
 { 
 currentSize + = key . key . remaining ( ) + ColumnFamily . serializer . serializedSize ( columnFamily , MessagingService . current _ version ) * 1 . 2 ; 
 diff - - git a / src / java / org / apache / cassandra / io / util / CompressedPoolingSegmentedFile . java b / src / java / org / apache / cassandra / io / util / CompressedPoolingSegmentedFile . java 
 index ef7b3b3 . . 121bdb2 100644 
 - - - a / src / java / org / apache / cassandra / io / util / CompressedPoolingSegmentedFile . java 
 + + + b / src / java / org / apache / cassandra / io / util / CompressedPoolingSegmentedFile . java 
 @ @ - 20 , 7 + 20 , 7 @ @ package org . apache . cassandra . io . util ; 
 import org . apache . cassandra . io . compress . CompressedRandomAccessReader ; 
 import org . apache . cassandra . io . compress . CompressionMetadata ; 
 
 - public class CompressedPoolingSegmentedFile extends PoolingSegmentedFile 
 + public class CompressedPoolingSegmentedFile extends PoolingSegmentedFile implements ICompressedFile 
 { 
 public final CompressionMetadata metadata ; 
 
 @ @ - 48 , 10 + 48 , 15 @ @ public class CompressedPoolingSegmentedFile extends PoolingSegmentedFile 
 return CompressedRandomAccessReader . open ( path , metadata , this ) ; 
 } 
 
 + public CompressionMetadata getMetadata ( ) 
 + { 
 + return metadata ; 
 + } 
 + 
 @ Override 
 public void cleanup ( ) 
 { 
 super . cleanup ( ) ; 
 metadata . close ( ) ; 
 } 
 - } 
 \ No newline at end of file 
 + } 
 diff - - git a / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java b / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java 
 index 4a1e755 . . f41b1aa 100644 
 - - - a / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java 
 + + + b / src / java / org / apache / cassandra / io / util / CompressedSegmentedFile . java 
 @ @ - 20 , 7 + 20 , 7 @ @ package org . apache . cassandra . io . util ; 
 import org . apache . cassandra . io . compress . CompressedRandomAccessReader ; 
 import org . apache . cassandra . io . compress . CompressionMetadata ; 
 
 - public class CompressedSegmentedFile extends SegmentedFile 
 + public class CompressedSegmentedFile extends SegmentedFile implements ICompressedFile 
 { 
 public final CompressionMetadata metadata ; 
 
 @ @ - 50 , 6 + 50 , 11 @ @ public class CompressedSegmentedFile extends SegmentedFile 
 return reader ; 
 } 
 
 + public CompressionMetadata getMetadata ( ) 
 + { 
 + return metadata ; 
 + } 
 + 
 public void cleanup ( ) 
 { 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index bec8c8d . . d0581fb 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 3526 , 7 + 3526 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 SSTableLoader . Client client = new SSTableLoader . Client ( ) 
 { 
 - @ Override 
 public void init ( String keyspace ) 
 { 
 try 
 @ @ - 3545 , 7 + 3544 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 } 
 } 
 
 - @ Override 
 public CFMetaData getCFMetaData ( String keyspace , String cfName ) 
 { 
 return Schema . instance . getCFMetaData ( keyspace , cfName ) ; 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableLoaderTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableLoaderTest . java 
 new file mode 100644 
 index 0000000 . . 236ee2d 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableLoaderTest . java 
 @ @ - 0 , 0 + 1 , 89 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . io . sstable ; 
 + 
 + import java . io . File ; 
 + import java . util . List ; 
 + 
 + import com . google . common . io . Files ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . SchemaLoader ; 
 + import org . apache . cassandra . Util ; 
 + import org . apache . cassandra . config . CFMetaData ; 
 + import org . apache . cassandra . config . Schema ; 
 + import org . apache . cassandra . db . DecoratedKey ; 
 + import org . apache . cassandra . db . Keyspace ; 
 + import org . apache . cassandra . db . Row ; 
 + import org . apache . cassandra . dht . Range ; 
 + import org . apache . cassandra . dht . Token ; 
 + import org . apache . cassandra . service . StorageService ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 + import org . apache . cassandra . utils . OutputHandler ; 
 + 
 + import static junit . framework . Assert . assertEquals ; 
 + 
 + public class SSTableLoaderTest extends SchemaLoader 
 + { 
 + @ BeforeClass 
 + public static void setup ( ) throws Exception 
 + { 
 + StorageService . instance . initServer ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testLoadingSSTable ( ) throws Exception 
 + { 
 + File tempdir = Files . createTempDir ( ) ; 
 + File dataDir = new File ( tempdir . getAbsolutePath ( ) + File . separator + " Keyspace1 " + File . separator + " Standard1 " ) ; 
 + assert dataDir . mkdirs ( ) ; 
 + CFMetaData cfmeta = Schema . instance . getCFMetaData ( " Keyspace1 " , " Standard1 " ) ; 
 + SSTableSimpleUnsortedWriter writer = new SSTableSimpleUnsortedWriter ( dataDir , 
 + cfmeta , 
 + StorageService . getPartitioner ( ) , 
 + 1 ) ; 
 + DecoratedKey key = Util . dk ( " key1 " ) ; 
 + writer . newRow ( key . key ) ; 
 + writer . addColumn ( ByteBufferUtil . bytes ( " col1 " ) , ByteBufferUtil . bytes ( 100 ) , 1 ) ; 
 + writer . close ( ) ; 
 + 
 + SSTableLoader loader = new SSTableLoader ( dataDir , new SSTableLoader . Client ( ) 
 + { 
 + public void init ( String keyspace ) 
 + { 
 + for ( Range < Token > range : StorageService . instance . getLocalRanges ( " Keyspace1 " ) ) 
 + addRangeForEndpoint ( range , FBUtilities . getBroadcastAddress ( ) ) ; 
 + setPartitioner ( StorageService . getPartitioner ( ) ) ; 
 + } 
 + 
 + public CFMetaData getCFMetaData ( String keyspace , String cfName ) 
 + { 
 + return Schema . instance . getCFMetaData ( keyspace , cfName ) ; 
 + } 
 + } , new OutputHandler . SystemOutput ( false , false ) ) ; 
 + 
 + loader . stream ( ) . get ( ) ; 
 + 
 + List < Row > rows = Util . getRangeSlice ( Keyspace . open ( " Keyspace1 " ) . getColumnFamilyStore ( " Standard1 " ) ) ; 
 + assertEquals ( 1 , rows . size ( ) ) ; 
 + assertEquals ( key , rows . get ( 0 ) . key ) ; 
 + assertEquals ( ByteBufferUtil . bytes ( 100 ) , rows . get ( 0 ) . cf . getColumn ( ByteBufferUtil . bytes ( " col1 " ) ) . value ( ) ) ; 
 + } 
 + }
