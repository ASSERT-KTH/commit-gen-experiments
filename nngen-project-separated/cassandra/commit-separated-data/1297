BLEU SCORE: 0.018738883683389617

TEST MSG: Saved caches use ambigous keyspace and CF name to identify tables
GENERATED MSG: merge from 1 . 0

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 207f16a . . e2dd83a 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> 2 . 1 . 10 <nl> - * Fix cache handling of 2i and base tables ( CASSANDRA - 10155 ) <nl> + * Fix cache handling of 2i and base tables ( CASSANDRA - 10155 , 10359 ) <nl> * Fix NPE in nodetool compactionhistory ( CASSANDRA - 9758 ) <nl> * ( Pig ) support BulkOutputFormat as a URL parameter ( CASSANDRA - 7410 ) <nl> * BATCH statement is broken in cqlsh ( CASSANDRA - 10272 ) <nl> diff - - git a / src / java / org / apache / cassandra / cache / AutoSavingCache . java b / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> index 3ebbc76 . . 1174c44 100644 <nl> - - - a / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> + + + b / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> @ @ - 178 , 6 + 178 , 15 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> { <nl> logger . info ( String . format ( " reading saved cache % s " , path ) ) ; <nl> in = new DataInputStream ( new LengthAvailableInputStream ( new BufferedInputStream ( streamFactory . getInputStream ( path ) ) , path . length ( ) ) ) ; <nl> + <nl> + / / Check the schema has not changed since CFs are looked up by name which is ambiguous <nl> + UUID schemaVersion = new UUID ( in . readLong ( ) , in . readLong ( ) ) ; <nl> + if ( ! schemaVersion . equals ( Schema . instance . getVersion ( ) ) ) <nl> + throw new RuntimeException ( " Cache schema version " <nl> + + schemaVersion . toString ( ) <nl> + + " does not match current schema version " <nl> + + Schema . instance . getVersion ( ) ) ; <nl> + <nl> ArrayDeque < Future < Pair < K , V > > > futures = new ArrayDeque < Future < Pair < K , V > > > ( ) ; <nl> <nl> while ( in . available ( ) > 0 ) <nl> @ @ - 313 , 23 + 322 , 33 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> throw new RuntimeException ( e ) ; <nl> } <nl> <nl> - for ( K key : keys ) <nl> + try <nl> { <nl> - <nl> - ColumnFamilyStore cfs = Schema . instance . getColumnFamilyStoreIncludingIndexes ( key . ksAndCFName ) ; <nl> - if ( cfs = = null ) <nl> - continue ; / / the table or 2i has been dropped . <nl> - <nl> - try <nl> + / / Need to be able to check schema version because CF names are ambiguous <nl> + UUID schemaVersion = Schema . instance . getVersion ( ) ; <nl> + if ( schemaVersion = = null ) <nl> { <nl> - cacheLoader . serialize ( key , writer , cfs ) ; <nl> + Schema . instance . updateVersion ( ) ; <nl> + schemaVersion = Schema . instance . getVersion ( ) ; <nl> } <nl> - catch ( IOException e ) <nl> + writer . writeLong ( schemaVersion . getMostSignificantBits ( ) ) ; <nl> + writer . writeLong ( schemaVersion . getLeastSignificantBits ( ) ) ; <nl> + <nl> + for ( K key : keys ) <nl> { <nl> - throw new FSWriteError ( e , tempCacheFile ) ; <nl> - } <nl> <nl> - keysWritten + + ; <nl> + ColumnFamilyStore cfs = Schema . instance . getColumnFamilyStoreIncludingIndexes ( key . ksAndCFName ) ; <nl> + if ( cfs = = null ) <nl> + continue ; / / the table or 2i has been dropped . <nl> + <nl> + cacheLoader . serialize ( key , writer , cfs ) ; <nl> + <nl> + keysWritten + + ; <nl> + } <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new FSWriteError ( e , tempCacheFile ) ; <nl> } <nl> } <nl> finally <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / KeyCacheCqlTest . java b / test / unit / org / apache / cassandra / cql3 / KeyCacheCqlTest . java <nl> index 0e879e9 . . f2bea8e 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / KeyCacheCqlTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / KeyCacheCqlTest . java <nl> @ @ - 129 , 6 + 129 , 7 @ @ public class KeyCacheCqlTest extends CQLTester <nl> assertNull ( Schema . instance . getColumnFamilyStoreIncludingIndexes ( Pair . create ( KEYSPACE , " bar " ) ) ) ; <nl> <nl> dropTable ( " DROP TABLE % s " ) ; <nl> + Schema . instance . updateVersion ( ) ; <nl> <nl> / / Test loading for a dropped 2i / table <nl> CacheService . instance . keyCache . clear ( ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d518830 . . 52cc2c1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 29 , 7 + 29 , 7 @ @ <nl> * add scheduler JMX metrics ( CASSANDRA - 2962 ) <nl> * add block level checksum for compressed data ( CASSANDRA - 1717 ) <nl> * make column family backed column map pluggable and introduce unsynchronized <nl> - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) <nl> + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) <nl> * refactoring of the secondary index api ( CASSANDRA - 2982 ) <nl> * make CL > ONE reads wait for digest reconciliation before returning <nl> ( CASSANDRA - 2494 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> index c316a85 . . 71c7213 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor <nl> this . reversed = reversed ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public AbstractType < ? > getComparator ( ) <nl> { <nl> return comparator ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 1239d1c . . 38bc0d7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer <nl> this . cfm = cfm ; <nl> } <nl> <nl> - public ColumnFamily cloneMeShallow ( ) <nl> + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) <nl> { <nl> - ColumnFamily cf = ColumnFamily . create ( cfm ) ; <nl> + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; <nl> / / since deletion info is immutable , aliasing it is fine <nl> cf . deletionInfo . set ( deletionInfo . get ( ) ) ; <nl> return cf ; <nl> } <nl> <nl> + public ColumnFamily cloneMeShallow ( ) <nl> + { <nl> + return cloneMeShallow ( columns . getFactory ( ) ) ; <nl> + } <nl> + <nl> public AbstractType getSubComparator ( ) <nl> { <nl> IColumnSerializer s = getColumnSerializer ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 0bfd1c5 . . 552d3e9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> - * tombstones that are no longer relevant . * / <nl> + / * * <nl> + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> + * tombstones that are no longer relevant . <nl> + * The returned column family won ' t be thread safe . <nl> + * / <nl> ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) <nl> { <nl> / / special case slicing the entire row : <nl> @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; <nl> if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) <nl> { <nl> - ColumnFamily cf = cached . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> if ( sc ! = null ) <nl> cf . addColumn ( sc , HeapAllocator . instance ) ; <nl> return removeDeleted ( cf , gcBefore ) ; <nl> @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> <nl> IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; <nl> - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; <nl> / / TODO this is necessary because when we collate supercolumns together , we don ' t check <nl> / / their subcolumns for relevance , so we need to do a second prune post facto here . <nl> diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> index 37f5a60 . . 624dec7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns <nl> public ISortedColumns cloneMe ( ) ; <nl> <nl> / * * <nl> + * Returns the factory used for this ISortedColumns implementation . <nl> + * / <nl> + public Factory getFactory ( ) ; <nl> + <nl> + / * * <nl> * Adds a column to this column map . <nl> * If a column with the same name is already present in the map , it will <nl> * be replaced by the newly added column . <nl> diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> index cd2488a . . 13a111a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new ThreadSafeSortedColumns ( this ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> index 34e83dc . . 6c3fc42 100644 <nl> - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new TreeMapBackedSortedColumns ( this ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 207f16a . . e2dd83a 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 5 + 1 , 5 @ @ 
 2 . 1 . 10 
 - * Fix cache handling of 2i and base tables ( CASSANDRA - 10155 ) 
 + * Fix cache handling of 2i and base tables ( CASSANDRA - 10155 , 10359 ) 
 * Fix NPE in nodetool compactionhistory ( CASSANDRA - 9758 ) 
 * ( Pig ) support BulkOutputFormat as a URL parameter ( CASSANDRA - 7410 ) 
 * BATCH statement is broken in cqlsh ( CASSANDRA - 10272 ) 
 diff - - git a / src / java / org / apache / cassandra / cache / AutoSavingCache . java b / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 index 3ebbc76 . . 1174c44 100644 
 - - - a / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 + + + b / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 @ @ - 178 , 6 + 178 , 15 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 { 
 logger . info ( String . format ( " reading saved cache % s " , path ) ) ; 
 in = new DataInputStream ( new LengthAvailableInputStream ( new BufferedInputStream ( streamFactory . getInputStream ( path ) ) , path . length ( ) ) ) ; 
 + 
 + / / Check the schema has not changed since CFs are looked up by name which is ambiguous 
 + UUID schemaVersion = new UUID ( in . readLong ( ) , in . readLong ( ) ) ; 
 + if ( ! schemaVersion . equals ( Schema . instance . getVersion ( ) ) ) 
 + throw new RuntimeException ( " Cache schema version " 
 + + schemaVersion . toString ( ) 
 + + " does not match current schema version " 
 + + Schema . instance . getVersion ( ) ) ; 
 + 
 ArrayDeque < Future < Pair < K , V > > > futures = new ArrayDeque < Future < Pair < K , V > > > ( ) ; 
 
 while ( in . available ( ) > 0 ) 
 @ @ - 313 , 23 + 322 , 33 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 throw new RuntimeException ( e ) ; 
 } 
 
 - for ( K key : keys ) 
 + try 
 { 
 - 
 - ColumnFamilyStore cfs = Schema . instance . getColumnFamilyStoreIncludingIndexes ( key . ksAndCFName ) ; 
 - if ( cfs = = null ) 
 - continue ; / / the table or 2i has been dropped . 
 - 
 - try 
 + / / Need to be able to check schema version because CF names are ambiguous 
 + UUID schemaVersion = Schema . instance . getVersion ( ) ; 
 + if ( schemaVersion = = null ) 
 { 
 - cacheLoader . serialize ( key , writer , cfs ) ; 
 + Schema . instance . updateVersion ( ) ; 
 + schemaVersion = Schema . instance . getVersion ( ) ; 
 } 
 - catch ( IOException e ) 
 + writer . writeLong ( schemaVersion . getMostSignificantBits ( ) ) ; 
 + writer . writeLong ( schemaVersion . getLeastSignificantBits ( ) ) ; 
 + 
 + for ( K key : keys ) 
 { 
 - throw new FSWriteError ( e , tempCacheFile ) ; 
 - } 
 
 - keysWritten + + ; 
 + ColumnFamilyStore cfs = Schema . instance . getColumnFamilyStoreIncludingIndexes ( key . ksAndCFName ) ; 
 + if ( cfs = = null ) 
 + continue ; / / the table or 2i has been dropped . 
 + 
 + cacheLoader . serialize ( key , writer , cfs ) ; 
 + 
 + keysWritten + + ; 
 + } 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new FSWriteError ( e , tempCacheFile ) ; 
 } 
 } 
 finally 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / KeyCacheCqlTest . java b / test / unit / org / apache / cassandra / cql3 / KeyCacheCqlTest . java 
 index 0e879e9 . . f2bea8e 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / KeyCacheCqlTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / KeyCacheCqlTest . java 
 @ @ - 129 , 6 + 129 , 7 @ @ public class KeyCacheCqlTest extends CQLTester 
 assertNull ( Schema . instance . getColumnFamilyStoreIncludingIndexes ( Pair . create ( KEYSPACE , " bar " ) ) ) ; 
 
 dropTable ( " DROP TABLE % s " ) ; 
 + Schema . instance . updateVersion ( ) ; 
 
 / / Test loading for a dropped 2i / table 
 CacheService . instance . keyCache . clear ( ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d518830 . . 52cc2c1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 29 , 7 + 29 , 7 @ @ 
 * add scheduler JMX metrics ( CASSANDRA - 2962 ) 
 * add block level checksum for compressed data ( CASSANDRA - 1717 ) 
 * make column family backed column map pluggable and introduce unsynchronized 
 - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) 
 + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) 
 * refactoring of the secondary index api ( CASSANDRA - 2982 ) 
 * make CL > ONE reads wait for digest reconciliation before returning 
 ( CASSANDRA - 2494 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 index c316a85 . . 71c7213 100644 
 - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor 
 this . reversed = reversed ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public AbstractType < ? > getComparator ( ) 
 { 
 return comparator ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 1239d1c . . 38bc0d7 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer 
 this . cfm = cfm ; 
 } 
 
 - public ColumnFamily cloneMeShallow ( ) 
 + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) 
 { 
 - ColumnFamily cf = ColumnFamily . create ( cfm ) ; 
 + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; 
 / / since deletion info is immutable , aliasing it is fine 
 cf . deletionInfo . set ( deletionInfo . get ( ) ) ; 
 return cf ; 
 } 
 
 + public ColumnFamily cloneMeShallow ( ) 
 + { 
 + return cloneMeShallow ( columns . getFactory ( ) ) ; 
 + } 
 + 
 public AbstractType getSubComparator ( ) 
 { 
 IColumnSerializer s = getColumnSerializer ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 0bfd1c5 . . 552d3e9 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 - * tombstones that are no longer relevant . * / 
 + / * * 
 + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 + * tombstones that are no longer relevant . 
 + * The returned column family won ' t be thread safe . 
 + * / 
 ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) 
 { 
 / / special case slicing the entire row : 
 @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; 
 if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) 
 { 
 - ColumnFamily cf = cached . cloneMeShallow ( ) ; 
 + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 if ( sc ! = null ) 
 cf . addColumn ( sc , HeapAllocator . instance ) ; 
 return removeDeleted ( cf , gcBefore ) ; 
 @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 
 IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; 
 - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; 
 + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; 
 / / TODO this is necessary because when we collate supercolumns together , we don ' t check 
 / / their subcolumns for relevance , so we need to do a second prune post facto here . 
 diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 index 37f5a60 . . 624dec7 100644 
 - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns 
 public ISortedColumns cloneMe ( ) ; 
 
 / * * 
 + * Returns the factory used for this ISortedColumns implementation . 
 + * / 
 + public Factory getFactory ( ) ; 
 + 
 + / * * 
 * Adds a column to this column map . 
 * If a column with the same name is already present in the map , it will 
 * be replaced by the newly added column . 
 diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 index cd2488a . . 13a111a 100644 
 - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new ThreadSafeSortedColumns ( this ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 index 34e83dc . . 6c3fc42 100644 
 - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new TreeMapBackedSortedColumns ( this ) ;
