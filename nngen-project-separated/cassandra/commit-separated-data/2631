BLEU SCORE: 0.024615130620079664

TEST MSG: Include correct consistencyLevel in LWT timeout
GENERATED MSG: CAS may return false but still commit the insert

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 4741475 . . 7eebd5b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 7 <nl> + * Include correct consistencyLevel in LWT timeout ( CASSANDRA - 6884 ) <nl> * Lower chances for losing new SSTables during nodetool refresh and <nl> ColumnFamilyStore . loadNewSSTables ( CASSANDRA - 6514 ) <nl> * Add support for DELETE . . . IF EXISTS to CQL3 ( CASSANDRA - 5708 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index fda9819 . . a6912c2 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 246 , 7 + 246 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> <nl> Commit proposal = Commit . newProposal ( key , ballot , updates ) ; <nl> Tracing . trace ( " CAS precondition is met ; proposing client - requested updates for { } " , ballot ) ; <nl> - if ( proposePaxos ( proposal , liveEndpoints , requiredParticipants , true ) ) <nl> + if ( proposePaxos ( proposal , liveEndpoints , requiredParticipants , true , consistencyForPaxos ) ) <nl> { <nl> if ( consistencyForCommit = = ConsistencyLevel . ANY ) <nl> sendCommit ( proposal , liveEndpoints ) ; <nl> @ @ - 318 , 7 + 318 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> / / prepare <nl> Tracing . trace ( " Preparing { } " , ballot ) ; <nl> Commit toPrepare = Commit . newPrepare ( key , metadata , ballot ) ; <nl> - summary = preparePaxos ( toPrepare , liveEndpoints , requiredParticipants ) ; <nl> + summary = preparePaxos ( toPrepare , liveEndpoints , requiredParticipants , consistencyForPaxos ) ; <nl> if ( ! summary . promised ) <nl> { <nl> Tracing . trace ( " Some replicas have already promised a higher ballot than ours ; aborting " ) ; <nl> @ @ - 336 , 7 + 336 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> { <nl> Tracing . trace ( " Finishing incomplete paxos round { } " , inProgress ) ; <nl> Commit refreshedInProgress = Commit . newProposal ( inProgress . key , ballot , inProgress . update ) ; <nl> - if ( proposePaxos ( refreshedInProgress , liveEndpoints , requiredParticipants , false ) ) <nl> + if ( proposePaxos ( refreshedInProgress , liveEndpoints , requiredParticipants , false , consistencyForPaxos ) ) <nl> { <nl> commitPaxos ( refreshedInProgress , ConsistencyLevel . QUORUM ) ; <nl> } <nl> @ @ - 381 , 10 + 381 , 10 @ @ public class StorageProxy implements StorageProxyMBean <nl> MessagingService . instance ( ) . sendOneWay ( message , target ) ; <nl> } <nl> <nl> - private static PrepareCallback preparePaxos ( Commit toPrepare , List < InetAddress > endpoints , int requiredParticipants ) <nl> + private static PrepareCallback preparePaxos ( Commit toPrepare , List < InetAddress > endpoints , int requiredParticipants , ConsistencyLevel consistencyForPaxos ) <nl> throws WriteTimeoutException <nl> { <nl> - PrepareCallback callback = new PrepareCallback ( toPrepare . key , toPrepare . update . metadata ( ) , requiredParticipants ) ; <nl> + PrepareCallback callback = new PrepareCallback ( toPrepare . key , toPrepare . update . metadata ( ) , requiredParticipants , consistencyForPaxos ) ; <nl> MessageOut < Commit > message = new MessageOut < Commit > ( MessagingService . Verb . PAXOS _ PREPARE , toPrepare , Commit . serializer ) ; <nl> for ( InetAddress target : endpoints ) <nl> MessagingService . instance ( ) . sendRR ( message , target , callback ) ; <nl> @ @ - 392 , 10 + 392 , 10 @ @ public class StorageProxy implements StorageProxyMBean <nl> return callback ; <nl> } <nl> <nl> - private static boolean proposePaxos ( Commit proposal , List < InetAddress > endpoints , int requiredParticipants , boolean timeoutIfPartial ) <nl> + private static boolean proposePaxos ( Commit proposal , List < InetAddress > endpoints , int requiredParticipants , boolean timeoutIfPartial , ConsistencyLevel consistencyLevel ) <nl> throws WriteTimeoutException <nl> { <nl> - ProposeCallback callback = new ProposeCallback ( endpoints . size ( ) , requiredParticipants , ! timeoutIfPartial ) ; <nl> + ProposeCallback callback = new ProposeCallback ( endpoints . size ( ) , requiredParticipants , ! timeoutIfPartial , consistencyLevel ) ; <nl> MessageOut < Commit > message = new MessageOut < Commit > ( MessagingService . Verb . PAXOS _ PROPOSE , proposal , Commit . serializer ) ; <nl> for ( InetAddress target : endpoints ) <nl> MessagingService . instance ( ) . sendRR ( message , target , callback ) ; <nl> @ @ - 406 , 7 + 406 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> return true ; <nl> <nl> if ( timeoutIfPartial & & ! callback . isFullyRefused ( ) ) <nl> - throw new WriteTimeoutException ( WriteType . CAS , ConsistencyLevel . SERIAL , callback . getAcceptCount ( ) , requiredParticipants ) ; <nl> + throw new WriteTimeoutException ( WriteType . CAS , consistencyLevel , callback . getAcceptCount ( ) , requiredParticipants ) ; <nl> <nl> return false ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / paxos / AbstractPaxosCallback . java b / src / java / org / apache / cassandra / service / paxos / AbstractPaxosCallback . java <nl> index 8197cfd . . 37defde 100644 <nl> - - - a / src / java / org / apache / cassandra / service / paxos / AbstractPaxosCallback . java <nl> + + + b / src / java / org / apache / cassandra / service / paxos / AbstractPaxosCallback . java <nl> @ @ - 34 , 10 + 34 , 12 @ @ public abstract class AbstractPaxosCallback < T > implements IAsyncCallback < T > <nl> { <nl> protected final CountDownLatch latch ; <nl> protected final int targets ; <nl> + private final ConsistencyLevel consistency ; <nl> <nl> - public AbstractPaxosCallback ( int targets ) <nl> + public AbstractPaxosCallback ( int targets , ConsistencyLevel consistency ) <nl> { <nl> this . targets = targets ; <nl> + this . consistency = consistency ; <nl> latch = new CountDownLatch ( targets ) ; <nl> } <nl> <nl> @ @ - 56 , 7 + 58 , 7 @ @ public abstract class AbstractPaxosCallback < T > implements IAsyncCallback < T > <nl> try <nl> { <nl> if ( ! latch . await ( DatabaseDescriptor . getWriteRpcTimeout ( ) , TimeUnit . MILLISECONDS ) ) <nl> - throw new WriteTimeoutException ( WriteType . CAS , ConsistencyLevel . SERIAL , getResponseCount ( ) , targets ) ; <nl> + throw new WriteTimeoutException ( WriteType . CAS , consistency , getResponseCount ( ) , targets ) ; <nl> } <nl> catch ( InterruptedException ex ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / service / paxos / PrepareCallback . java b / src / java / org / apache / cassandra / service / paxos / PrepareCallback . java <nl> index 04a18b9 . . a446b0b 100644 <nl> - - - a / src / java / org / apache / cassandra / service / paxos / PrepareCallback . java <nl> + + + b / src / java / org / apache / cassandra / service / paxos / PrepareCallback . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import java . util . concurrent . ConcurrentHashMap ; <nl> <nl> import com . google . common . base . Predicate ; <nl> import com . google . common . collect . Iterables ; <nl> + import org . apache . cassandra . db . ConsistencyLevel ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 45 , 9 + 46 , 9 @ @ public class PrepareCallback extends AbstractPaxosCallback < PrepareResponse > <nl> <nl> private final Map < InetAddress , Commit > commitsByReplica = new ConcurrentHashMap < InetAddress , Commit > ( ) ; <nl> <nl> - public PrepareCallback ( ByteBuffer key , CFMetaData metadata , int targets ) <nl> + public PrepareCallback ( ByteBuffer key , CFMetaData metadata , int targets , ConsistencyLevel consistency ) <nl> { <nl> - super ( targets ) ; <nl> + super ( targets , consistency ) ; <nl> / / need to inject the right key in the empty commit so comparing with empty commits in the reply works as expected <nl> mostRecentCommit = Commit . emptyCommit ( key , metadata ) ; <nl> mostRecentInProgressCommit = Commit . emptyCommit ( key , metadata ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / paxos / ProposeCallback . java b / src / java / org / apache / cassandra / service / paxos / ProposeCallback . java <nl> index 0075840 . . 018dab9 100644 <nl> - - - a / src / java / org / apache / cassandra / service / paxos / ProposeCallback . java <nl> + + + b / src / java / org / apache / cassandra / service / paxos / ProposeCallback . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ package org . apache . cassandra . service . paxos ; <nl> <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> + import org . apache . cassandra . db . ConsistencyLevel ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 49 , 9 + 50 , 9 @ @ public class ProposeCallback extends AbstractPaxosCallback < Boolean > <nl> private final int requiredAccepts ; <nl> private final boolean failFast ; <nl> <nl> - public ProposeCallback ( int totalTargets , int requiredTargets , boolean failFast ) <nl> + public ProposeCallback ( int totalTargets , int requiredTargets , boolean failFast , ConsistencyLevel consistency ) <nl> { <nl> - super ( totalTargets ) ; <nl> + super ( totalTargets , consistency ) ; <nl> this . requiredAccepts = requiredTargets ; <nl> this . failFast = failFast ; <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 5517cee . . 2f01b7d 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 15 , 7 + 15 , 7 @ @ <nl> * Require superuser status for adding triggers ( CASSANDRA - 5963 ) <nl> * Make standalone scrubber handle old and new style leveled manifest <nl> ( CASSANDRA - 6005 ) <nl> - * Fix paxos bugs ( CASSANDRA - 6012 , 6013 ) <nl> + * Fix paxos bugs ( CASSANDRA - 6012 , 6013 , 6023 ) <nl> Merged from 1 . 2 : <nl> 1 . 2 . 10 <nl> * Fix possible divide - by - zero in HHOM ( CASSANDRA - 5990 ) <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index be3da21 . . 939163d 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 252 , 6 + 252 , 7 @ @ public final class CFMetaData <nl> + " row _ key blob , " <nl> + " cf _ id UUID , " <nl> + " in _ progress _ ballot timeuuid , " <nl> + + " proposal _ ballot timeuuid , " <nl> + " proposal blob , " <nl> + " most _ recent _ commit _ at timeuuid , " <nl> + " most _ recent _ commit blob , " <nl> diff - - git a / src / java / org / apache / cassandra / db / SystemKeyspace . java b / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> index 7759114 . . 3e608b3 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> @ @ - 782 , 14 + 782 , 16 @ @ public class SystemKeyspace <nl> if ( results . isEmpty ( ) ) <nl> return new PaxosState ( key , metadata ) ; <nl> UntypedResultSet . Row row = results . one ( ) ; <nl> - Commit inProgress = new Commit ( key , <nl> - row . getUUID ( " in _ progress _ ballot " ) , <nl> - row . has ( " proposal " ) ? ColumnFamily . fromBytes ( row . getBytes ( " proposal " ) ) : EmptyColumns . factory . create ( metadata ) ) ; <nl> + Commit promised = new Commit ( key , row . getUUID ( " in _ progress _ ballot " ) , EmptyColumns . factory . create ( metadata ) ) ; <nl> + / / either we have both a recently accepted ballot and update or we have neither <nl> + Commit accepted = row . has ( " proposal " ) <nl> + ? new Commit ( key , row . getUUID ( " proposal _ ballot " ) , ColumnFamily . fromBytes ( row . getBytes ( " proposal " ) ) ) <nl> + : Commit . emptyCommit ( key , metadata ) ; <nl> / / either most _ recent _ commit and most _ recent _ commit _ at will both be set , or neither <nl> Commit mostRecent = row . has ( " most _ recent _ commit " ) <nl> ? new Commit ( key , row . getUUID ( " most _ recent _ commit _ at " ) , ColumnFamily . fromBytes ( row . getBytes ( " most _ recent _ commit " ) ) ) <nl> : Commit . emptyCommit ( key , metadata ) ; <nl> - return new PaxosState ( inProgress , mostRecent ) ; <nl> + return new PaxosState ( promised , accepted , mostRecent ) ; <nl> } <nl> <nl> public static void savePaxosPromise ( Commit promise ) <nl> @ @ - 804 , 16 + 806 , 16 @ @ public class SystemKeyspace <nl> promise . update . id ( ) ) ) ; <nl> } <nl> <nl> - public static void savePaxosProposal ( Commit commit ) <nl> + public static void savePaxosProposal ( Commit proposal ) <nl> { <nl> - processInternal ( String . format ( " UPDATE % s USING TIMESTAMP % d AND TTL % d SET in _ progress _ ballot = % s , proposal = 0x % s WHERE row _ key = 0x % s AND cf _ id = % s " , <nl> + processInternal ( String . format ( " UPDATE % s USING TIMESTAMP % d AND TTL % d SET proposal _ ballot = % s , proposal = 0x % s WHERE row _ key = 0x % s AND cf _ id = % s " , <nl> PAXOS _ CF , <nl> - UUIDGen . microsTimestamp ( commit . ballot ) , <nl> - paxosTtl ( commit . update . metadata ) , <nl> - commit . ballot , <nl> - ByteBufferUtil . bytesToHex ( commit . update . toBytes ( ) ) , <nl> - ByteBufferUtil . bytesToHex ( commit . key ) , <nl> - commit . update . id ( ) ) ) ; <nl> + UUIDGen . microsTimestamp ( proposal . ballot ) , <nl> + paxosTtl ( proposal . update . metadata ) , <nl> + proposal . ballot , <nl> + ByteBufferUtil . bytesToHex ( proposal . update . toBytes ( ) ) , <nl> + ByteBufferUtil . bytesToHex ( proposal . key ) , <nl> + proposal . update . id ( ) ) ) ; <nl> } <nl> <nl> private static int paxosTtl ( CFMetaData metadata ) <nl> @ @ - 822 , 17 + 824 , 15 @ @ public class SystemKeyspace <nl> return Math . max ( 3 * 3600 , metadata . getGcGraceSeconds ( ) ) ; <nl> } <nl> <nl> - public static void savePaxosCommit ( Commit commit , UUID inProgressBallot ) <nl> + public static void savePaxosCommit ( Commit commit ) <nl> { <nl> - String preserveCql = " UPDATE % s USING TIMESTAMP % d AND TTL % d SET in _ progress _ ballot = % s , most _ recent _ commit _ at = % s , most _ recent _ commit = 0x % s WHERE row _ key = 0x % s AND cf _ id = % s " ; <nl> - / / identical except adds proposal = null <nl> - String eraseCql = " UPDATE % s USING TIMESTAMP % d AND TTL % d SET proposal = null , in _ progress _ ballot = % s , most _ recent _ commit _ at = % s , most _ recent _ commit = 0x % s WHERE row _ key = 0x % s AND cf _ id = % s " ; <nl> - boolean proposalAfterCommit = inProgressBallot . timestamp ( ) > commit . ballot . timestamp ( ) ; <nl> - processInternal ( String . format ( proposalAfterCommit ? preserveCql : eraseCql , <nl> + / / We always erase the last proposal ( with the commit timestamp to no erase more recent proposal in case the commit is old ) <nl> + / / even though that ' s really just an optimization since SP . beginAndRepairPaxos will exclude accepted proposal older than the mrc . <nl> + String cql = " UPDATE % s USING TIMESTAMP % d AND TTL % d SET proposal _ ballot = null , proposal = null , most _ recent _ commit _ at = % s , most _ recent _ commit = 0x % s WHERE row _ key = 0x % s AND cf _ id = % s " ; <nl> + processInternal ( String . format ( cql , <nl> PAXOS _ CF , <nl> UUIDGen . microsTimestamp ( commit . ballot ) , <nl> paxosTtl ( commit . update . metadata ) , <nl> - proposalAfterCommit ? inProgressBallot : commit . ballot , <nl> commit . ballot , <nl> ByteBufferUtil . bytesToHex ( commit . update . toBytes ( ) ) , <nl> ByteBufferUtil . bytesToHex ( commit . key ) , <nl> diff - - git a / src / java / org / apache / cassandra / service / paxos / PaxosState . java b / src / java / org / apache / cassandra / service / paxos / PaxosState . java <nl> index aa27628 . . ff0b02c 100644 <nl> - - - a / src / java / org / apache / cassandra / service / paxos / PaxosState . java <nl> + + + b / src / java / org / apache / cassandra / service / paxos / PaxosState . java <nl> @ @ - 48 , 20 + 48 , 22 @ @ public class PaxosState <nl> return locks [ ( 0x7FFFFFFF & key . hashCode ( ) ) % locks . length ] ; <nl> } <nl> <nl> - private final Commit inProgressCommit ; <nl> + private final Commit promised ; <nl> + private final Commit accepted ; <nl> private final Commit mostRecentCommit ; <nl> <nl> public PaxosState ( ByteBuffer key , CFMetaData metadata ) <nl> { <nl> - this ( Commit . emptyCommit ( key , metadata ) , Commit . emptyCommit ( key , metadata ) ) ; <nl> + this ( Commit . emptyCommit ( key , metadata ) , Commit . emptyCommit ( key , metadata ) , Commit . emptyCommit ( key , metadata ) ) ; <nl> } <nl> <nl> - public PaxosState ( Commit inProgressCommit , Commit mostRecentCommit ) <nl> + public PaxosState ( Commit promised , Commit accepted , Commit mostRecentCommit ) <nl> { <nl> - assert inProgressCommit . key = = mostRecentCommit . key ; <nl> - assert inProgressCommit . update . metadata ( ) = = inProgressCommit . update . metadata ( ) ; <nl> + assert promised . key = = accepted . key & & accepted . key = = mostRecentCommit . key ; <nl> + assert promised . update . metadata ( ) = = accepted . update . metadata ( ) & & accepted . update . metadata ( ) = = mostRecentCommit . update . metadata ( ) ; <nl> <nl> - this . inProgressCommit = inProgressCommit ; <nl> + this . promised = promised ; <nl> + this . accepted = accepted ; <nl> this . mostRecentCommit = mostRecentCommit ; <nl> } <nl> <nl> @ @ - 70 , 17 + 72 , 17 @ @ public class PaxosState <nl> synchronized ( lockFor ( toPrepare . key ) ) <nl> { <nl> PaxosState state = SystemKeyspace . loadPaxosState ( toPrepare . key , toPrepare . update . metadata ( ) ) ; <nl> - if ( toPrepare . isAfter ( state . inProgressCommit ) ) <nl> + if ( toPrepare . isAfter ( state . promised ) ) <nl> { <nl> Tracing . trace ( " Promising ballot { } " , toPrepare . ballot ) ; <nl> SystemKeyspace . savePaxosPromise ( toPrepare ) ; <nl> - / / return the pre - promise ballot so coordinator can pick the most recent in - progress value to resume <nl> - return new PrepareResponse ( true , state . inProgressCommit , state . mostRecentCommit ) ; <nl> + return new PrepareResponse ( true , state . accepted , state . mostRecentCommit ) ; <nl> } <nl> else <nl> { <nl> - Tracing . trace ( " Promise rejected ; { } is not sufficiently newer than { } " , toPrepare , state . inProgressCommit ) ; <nl> - return new PrepareResponse ( false , state . inProgressCommit , state . mostRecentCommit ) ; <nl> + Tracing . trace ( " Promise rejected ; { } is not sufficiently newer than { } " , toPrepare , state . promised ) ; <nl> + / / return the currently promised ballot ( not the last accepted one ) so the coordinator can make sure it uses newer ballot next time

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 4741475 . . 7eebd5b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 7 
 + * Include correct consistencyLevel in LWT timeout ( CASSANDRA - 6884 ) 
 * Lower chances for losing new SSTables during nodetool refresh and 
 ColumnFamilyStore . loadNewSSTables ( CASSANDRA - 6514 ) 
 * Add support for DELETE . . . IF EXISTS to CQL3 ( CASSANDRA - 5708 ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index fda9819 . . a6912c2 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 246 , 7 + 246 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 
 Commit proposal = Commit . newProposal ( key , ballot , updates ) ; 
 Tracing . trace ( " CAS precondition is met ; proposing client - requested updates for { } " , ballot ) ; 
 - if ( proposePaxos ( proposal , liveEndpoints , requiredParticipants , true ) ) 
 + if ( proposePaxos ( proposal , liveEndpoints , requiredParticipants , true , consistencyForPaxos ) ) 
 { 
 if ( consistencyForCommit = = ConsistencyLevel . ANY ) 
 sendCommit ( proposal , liveEndpoints ) ; 
 @ @ - 318 , 7 + 318 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 / / prepare 
 Tracing . trace ( " Preparing { } " , ballot ) ; 
 Commit toPrepare = Commit . newPrepare ( key , metadata , ballot ) ; 
 - summary = preparePaxos ( toPrepare , liveEndpoints , requiredParticipants ) ; 
 + summary = preparePaxos ( toPrepare , liveEndpoints , requiredParticipants , consistencyForPaxos ) ; 
 if ( ! summary . promised ) 
 { 
 Tracing . trace ( " Some replicas have already promised a higher ballot than ours ; aborting " ) ; 
 @ @ - 336 , 7 + 336 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 { 
 Tracing . trace ( " Finishing incomplete paxos round { } " , inProgress ) ; 
 Commit refreshedInProgress = Commit . newProposal ( inProgress . key , ballot , inProgress . update ) ; 
 - if ( proposePaxos ( refreshedInProgress , liveEndpoints , requiredParticipants , false ) ) 
 + if ( proposePaxos ( refreshedInProgress , liveEndpoints , requiredParticipants , false , consistencyForPaxos ) ) 
 { 
 commitPaxos ( refreshedInProgress , ConsistencyLevel . QUORUM ) ; 
 } 
 @ @ - 381 , 10 + 381 , 10 @ @ public class StorageProxy implements StorageProxyMBean 
 MessagingService . instance ( ) . sendOneWay ( message , target ) ; 
 } 
 
 - private static PrepareCallback preparePaxos ( Commit toPrepare , List < InetAddress > endpoints , int requiredParticipants ) 
 + private static PrepareCallback preparePaxos ( Commit toPrepare , List < InetAddress > endpoints , int requiredParticipants , ConsistencyLevel consistencyForPaxos ) 
 throws WriteTimeoutException 
 { 
 - PrepareCallback callback = new PrepareCallback ( toPrepare . key , toPrepare . update . metadata ( ) , requiredParticipants ) ; 
 + PrepareCallback callback = new PrepareCallback ( toPrepare . key , toPrepare . update . metadata ( ) , requiredParticipants , consistencyForPaxos ) ; 
 MessageOut < Commit > message = new MessageOut < Commit > ( MessagingService . Verb . PAXOS _ PREPARE , toPrepare , Commit . serializer ) ; 
 for ( InetAddress target : endpoints ) 
 MessagingService . instance ( ) . sendRR ( message , target , callback ) ; 
 @ @ - 392 , 10 + 392 , 10 @ @ public class StorageProxy implements StorageProxyMBean 
 return callback ; 
 } 
 
 - private static boolean proposePaxos ( Commit proposal , List < InetAddress > endpoints , int requiredParticipants , boolean timeoutIfPartial ) 
 + private static boolean proposePaxos ( Commit proposal , List < InetAddress > endpoints , int requiredParticipants , boolean timeoutIfPartial , ConsistencyLevel consistencyLevel ) 
 throws WriteTimeoutException 
 { 
 - ProposeCallback callback = new ProposeCallback ( endpoints . size ( ) , requiredParticipants , ! timeoutIfPartial ) ; 
 + ProposeCallback callback = new ProposeCallback ( endpoints . size ( ) , requiredParticipants , ! timeoutIfPartial , consistencyLevel ) ; 
 MessageOut < Commit > message = new MessageOut < Commit > ( MessagingService . Verb . PAXOS _ PROPOSE , proposal , Commit . serializer ) ; 
 for ( InetAddress target : endpoints ) 
 MessagingService . instance ( ) . sendRR ( message , target , callback ) ; 
 @ @ - 406 , 7 + 406 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 return true ; 
 
 if ( timeoutIfPartial & & ! callback . isFullyRefused ( ) ) 
 - throw new WriteTimeoutException ( WriteType . CAS , ConsistencyLevel . SERIAL , callback . getAcceptCount ( ) , requiredParticipants ) ; 
 + throw new WriteTimeoutException ( WriteType . CAS , consistencyLevel , callback . getAcceptCount ( ) , requiredParticipants ) ; 
 
 return false ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / paxos / AbstractPaxosCallback . java b / src / java / org / apache / cassandra / service / paxos / AbstractPaxosCallback . java 
 index 8197cfd . . 37defde 100644 
 - - - a / src / java / org / apache / cassandra / service / paxos / AbstractPaxosCallback . java 
 + + + b / src / java / org / apache / cassandra / service / paxos / AbstractPaxosCallback . java 
 @ @ - 34 , 10 + 34 , 12 @ @ public abstract class AbstractPaxosCallback < T > implements IAsyncCallback < T > 
 { 
 protected final CountDownLatch latch ; 
 protected final int targets ; 
 + private final ConsistencyLevel consistency ; 
 
 - public AbstractPaxosCallback ( int targets ) 
 + public AbstractPaxosCallback ( int targets , ConsistencyLevel consistency ) 
 { 
 this . targets = targets ; 
 + this . consistency = consistency ; 
 latch = new CountDownLatch ( targets ) ; 
 } 
 
 @ @ - 56 , 7 + 58 , 7 @ @ public abstract class AbstractPaxosCallback < T > implements IAsyncCallback < T > 
 try 
 { 
 if ( ! latch . await ( DatabaseDescriptor . getWriteRpcTimeout ( ) , TimeUnit . MILLISECONDS ) ) 
 - throw new WriteTimeoutException ( WriteType . CAS , ConsistencyLevel . SERIAL , getResponseCount ( ) , targets ) ; 
 + throw new WriteTimeoutException ( WriteType . CAS , consistency , getResponseCount ( ) , targets ) ; 
 } 
 catch ( InterruptedException ex ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / service / paxos / PrepareCallback . java b / src / java / org / apache / cassandra / service / paxos / PrepareCallback . java 
 index 04a18b9 . . a446b0b 100644 
 - - - a / src / java / org / apache / cassandra / service / paxos / PrepareCallback . java 
 + + + b / src / java / org / apache / cassandra / service / paxos / PrepareCallback . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import java . util . concurrent . ConcurrentHashMap ; 
 
 import com . google . common . base . Predicate ; 
 import com . google . common . collect . Iterables ; 
 + import org . apache . cassandra . db . ConsistencyLevel ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 45 , 9 + 46 , 9 @ @ public class PrepareCallback extends AbstractPaxosCallback < PrepareResponse > 
 
 private final Map < InetAddress , Commit > commitsByReplica = new ConcurrentHashMap < InetAddress , Commit > ( ) ; 
 
 - public PrepareCallback ( ByteBuffer key , CFMetaData metadata , int targets ) 
 + public PrepareCallback ( ByteBuffer key , CFMetaData metadata , int targets , ConsistencyLevel consistency ) 
 { 
 - super ( targets ) ; 
 + super ( targets , consistency ) ; 
 / / need to inject the right key in the empty commit so comparing with empty commits in the reply works as expected 
 mostRecentCommit = Commit . emptyCommit ( key , metadata ) ; 
 mostRecentInProgressCommit = Commit . emptyCommit ( key , metadata ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / paxos / ProposeCallback . java b / src / java / org / apache / cassandra / service / paxos / ProposeCallback . java 
 index 0075840 . . 018dab9 100644 
 - - - a / src / java / org / apache / cassandra / service / paxos / ProposeCallback . java 
 + + + b / src / java / org / apache / cassandra / service / paxos / ProposeCallback . java 
 @ @ - 23 , 6 + 23 , 7 @ @ package org . apache . cassandra . service . paxos ; 
 
 import java . util . concurrent . atomic . AtomicInteger ; 
 
 + import org . apache . cassandra . db . ConsistencyLevel ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 49 , 9 + 50 , 9 @ @ public class ProposeCallback extends AbstractPaxosCallback < Boolean > 
 private final int requiredAccepts ; 
 private final boolean failFast ; 
 
 - public ProposeCallback ( int totalTargets , int requiredTargets , boolean failFast ) 
 + public ProposeCallback ( int totalTargets , int requiredTargets , boolean failFast , ConsistencyLevel consistency ) 
 { 
 - super ( totalTargets ) ; 
 + super ( totalTargets , consistency ) ; 
 this . requiredAccepts = requiredTargets ; 
 this . failFast = failFast ; 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 5517cee . . 2f01b7d 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 15 , 7 + 15 , 7 @ @ 
 * Require superuser status for adding triggers ( CASSANDRA - 5963 ) 
 * Make standalone scrubber handle old and new style leveled manifest 
 ( CASSANDRA - 6005 ) 
 - * Fix paxos bugs ( CASSANDRA - 6012 , 6013 ) 
 + * Fix paxos bugs ( CASSANDRA - 6012 , 6013 , 6023 ) 
 Merged from 1 . 2 : 
 1 . 2 . 10 
 * Fix possible divide - by - zero in HHOM ( CASSANDRA - 5990 ) 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index be3da21 . . 939163d 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 252 , 6 + 252 , 7 @ @ public final class CFMetaData 
 + " row _ key blob , " 
 + " cf _ id UUID , " 
 + " in _ progress _ ballot timeuuid , " 
 + + " proposal _ ballot timeuuid , " 
 + " proposal blob , " 
 + " most _ recent _ commit _ at timeuuid , " 
 + " most _ recent _ commit blob , " 
 diff - - git a / src / java / org / apache / cassandra / db / SystemKeyspace . java b / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 index 7759114 . . 3e608b3 100644 
 - - - a / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 + + + b / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 @ @ - 782 , 14 + 782 , 16 @ @ public class SystemKeyspace 
 if ( results . isEmpty ( ) ) 
 return new PaxosState ( key , metadata ) ; 
 UntypedResultSet . Row row = results . one ( ) ; 
 - Commit inProgress = new Commit ( key , 
 - row . getUUID ( " in _ progress _ ballot " ) , 
 - row . has ( " proposal " ) ? ColumnFamily . fromBytes ( row . getBytes ( " proposal " ) ) : EmptyColumns . factory . create ( metadata ) ) ; 
 + Commit promised = new Commit ( key , row . getUUID ( " in _ progress _ ballot " ) , EmptyColumns . factory . create ( metadata ) ) ; 
 + / / either we have both a recently accepted ballot and update or we have neither 
 + Commit accepted = row . has ( " proposal " ) 
 + ? new Commit ( key , row . getUUID ( " proposal _ ballot " ) , ColumnFamily . fromBytes ( row . getBytes ( " proposal " ) ) ) 
 + : Commit . emptyCommit ( key , metadata ) ; 
 / / either most _ recent _ commit and most _ recent _ commit _ at will both be set , or neither 
 Commit mostRecent = row . has ( " most _ recent _ commit " ) 
 ? new Commit ( key , row . getUUID ( " most _ recent _ commit _ at " ) , ColumnFamily . fromBytes ( row . getBytes ( " most _ recent _ commit " ) ) ) 
 : Commit . emptyCommit ( key , metadata ) ; 
 - return new PaxosState ( inProgress , mostRecent ) ; 
 + return new PaxosState ( promised , accepted , mostRecent ) ; 
 } 
 
 public static void savePaxosPromise ( Commit promise ) 
 @ @ - 804 , 16 + 806 , 16 @ @ public class SystemKeyspace 
 promise . update . id ( ) ) ) ; 
 } 
 
 - public static void savePaxosProposal ( Commit commit ) 
 + public static void savePaxosProposal ( Commit proposal ) 
 { 
 - processInternal ( String . format ( " UPDATE % s USING TIMESTAMP % d AND TTL % d SET in _ progress _ ballot = % s , proposal = 0x % s WHERE row _ key = 0x % s AND cf _ id = % s " , 
 + processInternal ( String . format ( " UPDATE % s USING TIMESTAMP % d AND TTL % d SET proposal _ ballot = % s , proposal = 0x % s WHERE row _ key = 0x % s AND cf _ id = % s " , 
 PAXOS _ CF , 
 - UUIDGen . microsTimestamp ( commit . ballot ) , 
 - paxosTtl ( commit . update . metadata ) , 
 - commit . ballot , 
 - ByteBufferUtil . bytesToHex ( commit . update . toBytes ( ) ) , 
 - ByteBufferUtil . bytesToHex ( commit . key ) , 
 - commit . update . id ( ) ) ) ; 
 + UUIDGen . microsTimestamp ( proposal . ballot ) , 
 + paxosTtl ( proposal . update . metadata ) , 
 + proposal . ballot , 
 + ByteBufferUtil . bytesToHex ( proposal . update . toBytes ( ) ) , 
 + ByteBufferUtil . bytesToHex ( proposal . key ) , 
 + proposal . update . id ( ) ) ) ; 
 } 
 
 private static int paxosTtl ( CFMetaData metadata ) 
 @ @ - 822 , 17 + 824 , 15 @ @ public class SystemKeyspace 
 return Math . max ( 3 * 3600 , metadata . getGcGraceSeconds ( ) ) ; 
 } 
 
 - public static void savePaxosCommit ( Commit commit , UUID inProgressBallot ) 
 + public static void savePaxosCommit ( Commit commit ) 
 { 
 - String preserveCql = " UPDATE % s USING TIMESTAMP % d AND TTL % d SET in _ progress _ ballot = % s , most _ recent _ commit _ at = % s , most _ recent _ commit = 0x % s WHERE row _ key = 0x % s AND cf _ id = % s " ; 
 - / / identical except adds proposal = null 
 - String eraseCql = " UPDATE % s USING TIMESTAMP % d AND TTL % d SET proposal = null , in _ progress _ ballot = % s , most _ recent _ commit _ at = % s , most _ recent _ commit = 0x % s WHERE row _ key = 0x % s AND cf _ id = % s " ; 
 - boolean proposalAfterCommit = inProgressBallot . timestamp ( ) > commit . ballot . timestamp ( ) ; 
 - processInternal ( String . format ( proposalAfterCommit ? preserveCql : eraseCql , 
 + / / We always erase the last proposal ( with the commit timestamp to no erase more recent proposal in case the commit is old ) 
 + / / even though that ' s really just an optimization since SP . beginAndRepairPaxos will exclude accepted proposal older than the mrc . 
 + String cql = " UPDATE % s USING TIMESTAMP % d AND TTL % d SET proposal _ ballot = null , proposal = null , most _ recent _ commit _ at = % s , most _ recent _ commit = 0x % s WHERE row _ key = 0x % s AND cf _ id = % s " ; 
 + processInternal ( String . format ( cql , 
 PAXOS _ CF , 
 UUIDGen . microsTimestamp ( commit . ballot ) , 
 paxosTtl ( commit . update . metadata ) , 
 - proposalAfterCommit ? inProgressBallot : commit . ballot , 
 commit . ballot , 
 ByteBufferUtil . bytesToHex ( commit . update . toBytes ( ) ) , 
 ByteBufferUtil . bytesToHex ( commit . key ) , 
 diff - - git a / src / java / org / apache / cassandra / service / paxos / PaxosState . java b / src / java / org / apache / cassandra / service / paxos / PaxosState . java 
 index aa27628 . . ff0b02c 100644 
 - - - a / src / java / org / apache / cassandra / service / paxos / PaxosState . java 
 + + + b / src / java / org / apache / cassandra / service / paxos / PaxosState . java 
 @ @ - 48 , 20 + 48 , 22 @ @ public class PaxosState 
 return locks [ ( 0x7FFFFFFF & key . hashCode ( ) ) % locks . length ] ; 
 } 
 
 - private final Commit inProgressCommit ; 
 + private final Commit promised ; 
 + private final Commit accepted ; 
 private final Commit mostRecentCommit ; 
 
 public PaxosState ( ByteBuffer key , CFMetaData metadata ) 
 { 
 - this ( Commit . emptyCommit ( key , metadata ) , Commit . emptyCommit ( key , metadata ) ) ; 
 + this ( Commit . emptyCommit ( key , metadata ) , Commit . emptyCommit ( key , metadata ) , Commit . emptyCommit ( key , metadata ) ) ; 
 } 
 
 - public PaxosState ( Commit inProgressCommit , Commit mostRecentCommit ) 
 + public PaxosState ( Commit promised , Commit accepted , Commit mostRecentCommit ) 
 { 
 - assert inProgressCommit . key = = mostRecentCommit . key ; 
 - assert inProgressCommit . update . metadata ( ) = = inProgressCommit . update . metadata ( ) ; 
 + assert promised . key = = accepted . key & & accepted . key = = mostRecentCommit . key ; 
 + assert promised . update . metadata ( ) = = accepted . update . metadata ( ) & & accepted . update . metadata ( ) = = mostRecentCommit . update . metadata ( ) ; 
 
 - this . inProgressCommit = inProgressCommit ; 
 + this . promised = promised ; 
 + this . accepted = accepted ; 
 this . mostRecentCommit = mostRecentCommit ; 
 } 
 
 @ @ - 70 , 17 + 72 , 17 @ @ public class PaxosState 
 synchronized ( lockFor ( toPrepare . key ) ) 
 { 
 PaxosState state = SystemKeyspace . loadPaxosState ( toPrepare . key , toPrepare . update . metadata ( ) ) ; 
 - if ( toPrepare . isAfter ( state . inProgressCommit ) ) 
 + if ( toPrepare . isAfter ( state . promised ) ) 
 { 
 Tracing . trace ( " Promising ballot { } " , toPrepare . ballot ) ; 
 SystemKeyspace . savePaxosPromise ( toPrepare ) ; 
 - / / return the pre - promise ballot so coordinator can pick the most recent in - progress value to resume 
 - return new PrepareResponse ( true , state . inProgressCommit , state . mostRecentCommit ) ; 
 + return new PrepareResponse ( true , state . accepted , state . mostRecentCommit ) ; 
 } 
 else 
 { 
 - Tracing . trace ( " Promise rejected ; { } is not sufficiently newer than { } " , toPrepare , state . inProgressCommit ) ; 
 - return new PrepareResponse ( false , state . inProgressCommit , state . mostRecentCommit ) ; 
 + Tracing . trace ( " Promise rejected ; { } is not sufficiently newer than { } " , toPrepare , state . promised ) ; 
 + / / return the currently promised ballot ( not the last accepted one ) so the coordinator can make sure it uses newer ballot next time
