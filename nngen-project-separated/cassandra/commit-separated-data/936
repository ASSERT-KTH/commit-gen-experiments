BLEU SCORE: 0.16233395773754944

TEST MSG: Print CAS stats in nodetool proxyhistograms
GENERATED MSG: fix ArrayIndexOutOfBoundsException in nodetool cfhistograms

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 05fda52 . . 3db6b3f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 6 <nl> + * Print CAS stats in nodetool proxyhistograms ( CASSANDRA - 11507 ) <nl> * More user friendly error when providing an invalid token to nodetool ( CASSANDRA - 9348 ) <nl> * Add static column support to SASI index ( CASSANDRA - 11183 ) <nl> * Support EQ / PREFIX queries in SASI CONTAINS mode without tokenization ( CASSANDRA - 11434 ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / ProxyHistograms . java b / src / java / org / apache / cassandra / tools / nodetool / ProxyHistograms . java <nl> index 2a2851d . . 656e7ed 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / nodetool / ProxyHistograms . java <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / ProxyHistograms . java <nl> @ @ - 29 , 24 + 29 , 30 @ @ public class ProxyHistograms extends NodeToolCmd <nl> @ Override <nl> public void execute ( NodeProbe probe ) <nl> { <nl> - String [ ] percentiles = new String [ ] { " 50 % " , " 75 % " , " 95 % " , " 98 % " , " 99 % " , " Min " , " Max " } ; <nl> + String [ ] percentiles = { " 50 % " , " 75 % " , " 95 % " , " 98 % " , " 99 % " , " Min " , " Max " } ; <nl> double [ ] readLatency = probe . metricPercentilesAsArray ( probe . getProxyMetric ( " Read " ) ) ; <nl> double [ ] writeLatency = probe . metricPercentilesAsArray ( probe . getProxyMetric ( " Write " ) ) ; <nl> double [ ] rangeLatency = probe . metricPercentilesAsArray ( probe . getProxyMetric ( " RangeSlice " ) ) ; <nl> + double [ ] casReadLatency = probe . metricPercentilesAsArray ( probe . getProxyMetric ( " CASRead " ) ) ; <nl> + double [ ] casWriteLatency = probe . metricPercentilesAsArray ( probe . getProxyMetric ( " CASWrite " ) ) ; <nl> + double [ ] viewWriteLatency = probe . metricPercentilesAsArray ( probe . getProxyMetric ( " ViewWrite " ) ) ; <nl> <nl> System . out . println ( " proxy histograms " ) ; <nl> - System . out . println ( format ( " % - 10s % 18s % 18s % 18s " , <nl> - " Percentile " , " Read Latency " , " Write Latency " , " Range Latency " ) ) ; <nl> - System . out . println ( format ( " % - 10s % 18s % 18s % 18s " , <nl> - " " , " ( micros ) " , " ( micros ) " , " ( micros ) " ) ) ; <nl> + System . out . println ( format ( " % - 10s % 19s % 19s % 19s % 19s % 19s % 19s " , <nl> + " Percentile " , " Read Latency " , " Write Latency " , " Range Latency " , " CAS Read Latency " , " CAS Write Latency " , " View Write Latency " ) ) ; <nl> + System . out . println ( format ( " % - 10s % 19s % 19s % 19s % 19s % 19s % 19s " , <nl> + " " , " ( micros ) " , " ( micros ) " , " ( micros ) " , " ( micros ) " , " ( micros ) " , " ( micros ) " ) ) ; <nl> for ( int i = 0 ; i < percentiles . length ; i + + ) <nl> { <nl> - System . out . println ( format ( " % - 10s % 18 . 2f % 18 . 2f % 18 . 2f " , <nl> + System . out . println ( format ( " % - 10s % 19 . 2f % 19 . 2f % 19 . 2f % 19 . 2f % 19 . 2f % 19 . 2f " , <nl> percentiles [ i ] , <nl> readLatency [ i ] , <nl> writeLatency [ i ] , <nl> - rangeLatency [ i ] ) ) ; <nl> + rangeLatency [ i ] , <nl> + casReadLatency [ i ] , <nl> + casWriteLatency [ i ] , <nl> + viewWriteLatency [ i ] ) ) ; <nl> } <nl> System . out . println ( ) ; <nl> } <nl> - } <nl> \ No newline at end of file <nl> + }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 05fda52 . . 3db6b3f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 6 
 + * Print CAS stats in nodetool proxyhistograms ( CASSANDRA - 11507 ) 
 * More user friendly error when providing an invalid token to nodetool ( CASSANDRA - 9348 ) 
 * Add static column support to SASI index ( CASSANDRA - 11183 ) 
 * Support EQ / PREFIX queries in SASI CONTAINS mode without tokenization ( CASSANDRA - 11434 ) 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / ProxyHistograms . java b / src / java / org / apache / cassandra / tools / nodetool / ProxyHistograms . java 
 index 2a2851d . . 656e7ed 100644 
 - - - a / src / java / org / apache / cassandra / tools / nodetool / ProxyHistograms . java 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / ProxyHistograms . java 
 @ @ - 29 , 24 + 29 , 30 @ @ public class ProxyHistograms extends NodeToolCmd 
 @ Override 
 public void execute ( NodeProbe probe ) 
 { 
 - String [ ] percentiles = new String [ ] { " 50 % " , " 75 % " , " 95 % " , " 98 % " , " 99 % " , " Min " , " Max " } ; 
 + String [ ] percentiles = { " 50 % " , " 75 % " , " 95 % " , " 98 % " , " 99 % " , " Min " , " Max " } ; 
 double [ ] readLatency = probe . metricPercentilesAsArray ( probe . getProxyMetric ( " Read " ) ) ; 
 double [ ] writeLatency = probe . metricPercentilesAsArray ( probe . getProxyMetric ( " Write " ) ) ; 
 double [ ] rangeLatency = probe . metricPercentilesAsArray ( probe . getProxyMetric ( " RangeSlice " ) ) ; 
 + double [ ] casReadLatency = probe . metricPercentilesAsArray ( probe . getProxyMetric ( " CASRead " ) ) ; 
 + double [ ] casWriteLatency = probe . metricPercentilesAsArray ( probe . getProxyMetric ( " CASWrite " ) ) ; 
 + double [ ] viewWriteLatency = probe . metricPercentilesAsArray ( probe . getProxyMetric ( " ViewWrite " ) ) ; 
 
 System . out . println ( " proxy histograms " ) ; 
 - System . out . println ( format ( " % - 10s % 18s % 18s % 18s " , 
 - " Percentile " , " Read Latency " , " Write Latency " , " Range Latency " ) ) ; 
 - System . out . println ( format ( " % - 10s % 18s % 18s % 18s " , 
 - " " , " ( micros ) " , " ( micros ) " , " ( micros ) " ) ) ; 
 + System . out . println ( format ( " % - 10s % 19s % 19s % 19s % 19s % 19s % 19s " , 
 + " Percentile " , " Read Latency " , " Write Latency " , " Range Latency " , " CAS Read Latency " , " CAS Write Latency " , " View Write Latency " ) ) ; 
 + System . out . println ( format ( " % - 10s % 19s % 19s % 19s % 19s % 19s % 19s " , 
 + " " , " ( micros ) " , " ( micros ) " , " ( micros ) " , " ( micros ) " , " ( micros ) " , " ( micros ) " ) ) ; 
 for ( int i = 0 ; i < percentiles . length ; i + + ) 
 { 
 - System . out . println ( format ( " % - 10s % 18 . 2f % 18 . 2f % 18 . 2f " , 
 + System . out . println ( format ( " % - 10s % 19 . 2f % 19 . 2f % 19 . 2f % 19 . 2f % 19 . 2f % 19 . 2f " , 
 percentiles [ i ] , 
 readLatency [ i ] , 
 writeLatency [ i ] , 
 - rangeLatency [ i ] ) ) ; 
 + rangeLatency [ i ] , 
 + casReadLatency [ i ] , 
 + casWriteLatency [ i ] , 
 + viewWriteLatency [ i ] ) ) ; 
 } 
 System . out . println ( ) ; 
 } 
 - } 
 \ No newline at end of file 
 + }

NEAREST DIFF:
ELIMINATEDSENTENCE
