BLEU SCORE: 0.01222796968620182

TEST MSG: Avoid calling iter . next ( ) in a loop when notifying indexers about range tombstones
GENERATED MSG: Fix index selectivity comparison

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 2c2f4f5 . . 70b2996 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 18 <nl> + * Avoid calling iter . next ( ) in a loop when notifying indexers about range tombstones ( CASSANDRA - 14794 ) <nl> * Fix purging semi - expired RT boundaries in reversed iterators ( CASSANDRA - 14672 ) <nl> * DESC order reads can fail to return the last Unfiltered in the partition ( CASSANDRA - 14766 ) <nl> * Fix corrupted collection deletions for dropped columns in 3 . 0 < - > 2 . { 1 , 2 } messages ( CASSANDRA - 14568 ) <nl> diff - - git a / src / java / org / apache / cassandra / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / index / SecondaryIndexManager . java <nl> index 5976ddf . . c5ecd25 100644 <nl> - - - a / src / java / org / apache / cassandra / index / SecondaryIndexManager . java <nl> + + + b / src / java / org / apache / cassandra / index / SecondaryIndexManager . java <nl> @ @ - 596 , 7 + 596 , 10 @ @ public class SecondaryIndexManager implements IndexRegistry <nl> { <nl> Iterator < RangeTombstone > iter = deletionInfo . rangeIterator ( false ) ; <nl> while ( iter . hasNext ( ) ) <nl> - indexers . forEach ( indexer - > indexer . rangeTombstone ( iter . next ( ) ) ) ; <nl> + { <nl> + RangeTombstone rt = iter . next ( ) ; <nl> + indexers . forEach ( indexer - > indexer . rangeTombstone ( rt ) ) ; <nl> + } <nl> } <nl> <nl> indexers . forEach ( Index . Indexer : : finish ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / index / CustomIndexTest . java b / test / unit / org / apache / cassandra / index / CustomIndexTest . java <nl> index 81e1745 . . 66e9fe5 100644 <nl> - - - a / test / unit / org / apache / cassandra / index / CustomIndexTest . java <nl> + + + b / test / unit / org / apache / cassandra / index / CustomIndexTest . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import java . util . stream . Collectors ; <nl> <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . Sets ; <nl> import org . junit . Test ; <nl> <nl> import com . datastax . driver . core . exceptions . QueryValidationException ; <nl> @ @ - 792 , 6 + 793 , 37 @ @ public class CustomIndexTest extends CQLTester <nl> assertEquals ( 1 , index . finishCalls ) ; <nl> } <nl> <nl> + @ Test <nl> + public void rangeTombstoneTest ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int , c int , v int , v2 int , PRIMARY KEY ( k , c ) ) " ) ; <nl> + ColumnFamilyStore cfs = getCurrentColumnFamilyStore ( ) ; <nl> + SecondaryIndexManager indexManager = cfs . indexManager ; <nl> + <nl> + / / Insert a single range tombstone <nl> + execute ( " DELETE FROM % s WHERE k = 1 and c > 2 " ) ; <nl> + cfs . forceBlockingFlush ( ) ; <nl> + <nl> + / / Create the index , which won ' t automatically start building <nl> + String indexName = " range _ tombstone _ idx " ; <nl> + createIndex ( String . format ( " CREATE CUSTOM INDEX % s ON % % s ( v ) USING ' % s ' " , <nl> + indexName , StubIndex . class . getName ( ) ) ) ; <nl> + String indexName2 = " range _ tombstone _ idx2 " ; <nl> + createIndex ( String . format ( " CREATE CUSTOM INDEX % s ON % % s ( v2 ) USING ' % s ' " , <nl> + indexName2 , StubIndex . class . getName ( ) ) ) ; <nl> + <nl> + StubIndex index = ( StubIndex ) indexManager . getIndexByName ( indexName ) ; <nl> + StubIndex index2 = ( StubIndex ) indexManager . getIndexByName ( indexName2 ) ; <nl> + <nl> + / / Index the partition <nl> + DecoratedKey targetKey = getCurrentColumnFamilyStore ( ) . decorateKey ( ByteBufferUtil . bytes ( 1 ) ) ; <nl> + indexManager . indexPartition ( targetKey , Sets . newHashSet ( index , index2 ) , 1 ) ; <nl> + <nl> + / / and both indexes should have the same range tombstone <nl> + assertEquals ( index . rangeTombstones , index2 . rangeTombstones ) ; <nl> + } <nl> + <nl> + <nl> / / Used for index creation above <nl> public static class BrokenCustom2I extends StubIndex <nl> {
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 2c2f4f5 . . 70b2996 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 18 
 + * Avoid calling iter . next ( ) in a loop when notifying indexers about range tombstones ( CASSANDRA - 14794 ) 
 * Fix purging semi - expired RT boundaries in reversed iterators ( CASSANDRA - 14672 ) 
 * DESC order reads can fail to return the last Unfiltered in the partition ( CASSANDRA - 14766 ) 
 * Fix corrupted collection deletions for dropped columns in 3 . 0 < - > 2 . { 1 , 2 } messages ( CASSANDRA - 14568 ) 
 diff - - git a / src / java / org / apache / cassandra / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / index / SecondaryIndexManager . java 
 index 5976ddf . . c5ecd25 100644 
 - - - a / src / java / org / apache / cassandra / index / SecondaryIndexManager . java 
 + + + b / src / java / org / apache / cassandra / index / SecondaryIndexManager . java 
 @ @ - 596 , 7 + 596 , 10 @ @ public class SecondaryIndexManager implements IndexRegistry 
 { 
 Iterator < RangeTombstone > iter = deletionInfo . rangeIterator ( false ) ; 
 while ( iter . hasNext ( ) ) 
 - indexers . forEach ( indexer - > indexer . rangeTombstone ( iter . next ( ) ) ) ; 
 + { 
 + RangeTombstone rt = iter . next ( ) ; 
 + indexers . forEach ( indexer - > indexer . rangeTombstone ( rt ) ) ; 
 + } 
 } 
 
 indexers . forEach ( Index . Indexer : : finish ) ; 
 diff - - git a / test / unit / org / apache / cassandra / index / CustomIndexTest . java b / test / unit / org / apache / cassandra / index / CustomIndexTest . java 
 index 81e1745 . . 66e9fe5 100644 
 - - - a / test / unit / org / apache / cassandra / index / CustomIndexTest . java 
 + + + b / test / unit / org / apache / cassandra / index / CustomIndexTest . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import java . util . stream . Collectors ; 
 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 + import com . google . common . collect . Sets ; 
 import org . junit . Test ; 
 
 import com . datastax . driver . core . exceptions . QueryValidationException ; 
 @ @ - 792 , 6 + 793 , 37 @ @ public class CustomIndexTest extends CQLTester 
 assertEquals ( 1 , index . finishCalls ) ; 
 } 
 
 + @ Test 
 + public void rangeTombstoneTest ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k int , c int , v int , v2 int , PRIMARY KEY ( k , c ) ) " ) ; 
 + ColumnFamilyStore cfs = getCurrentColumnFamilyStore ( ) ; 
 + SecondaryIndexManager indexManager = cfs . indexManager ; 
 + 
 + / / Insert a single range tombstone 
 + execute ( " DELETE FROM % s WHERE k = 1 and c > 2 " ) ; 
 + cfs . forceBlockingFlush ( ) ; 
 + 
 + / / Create the index , which won ' t automatically start building 
 + String indexName = " range _ tombstone _ idx " ; 
 + createIndex ( String . format ( " CREATE CUSTOM INDEX % s ON % % s ( v ) USING ' % s ' " , 
 + indexName , StubIndex . class . getName ( ) ) ) ; 
 + String indexName2 = " range _ tombstone _ idx2 " ; 
 + createIndex ( String . format ( " CREATE CUSTOM INDEX % s ON % % s ( v2 ) USING ' % s ' " , 
 + indexName2 , StubIndex . class . getName ( ) ) ) ; 
 + 
 + StubIndex index = ( StubIndex ) indexManager . getIndexByName ( indexName ) ; 
 + StubIndex index2 = ( StubIndex ) indexManager . getIndexByName ( indexName2 ) ; 
 + 
 + / / Index the partition 
 + DecoratedKey targetKey = getCurrentColumnFamilyStore ( ) . decorateKey ( ByteBufferUtil . bytes ( 1 ) ) ; 
 + indexManager . indexPartition ( targetKey , Sets . newHashSet ( index , index2 ) , 1 ) ; 
 + 
 + / / and both indexes should have the same range tombstone 
 + assertEquals ( index . rangeTombstones , index2 . rangeTombstones ) ; 
 + } 
 + 
 + 
 / / Used for index creation above 
 public static class BrokenCustom2I extends StubIndex 
 {

NEAREST DIFF:
ELIMINATEDSENTENCE
