BLEU SCORE: 0.01222796968620182

TEST MSG: prefer MemoryUtil . getByteBuffer to JNA Native . getDirectByteBuffer ; specify native endian on the former
GENERATED MSG: remove [ Freeable ] Memory finalizers

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / io / util / Memory . java b / src / java / org / apache / cassandra / io / util / Memory . java <nl> index b8a46bc . . 67dee81 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / Memory . java <nl> + + + b / src / java / org / apache / cassandra / io / util / Memory . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . nio . ByteOrder ; <nl> <nl> import com . sun . jna . Native ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . utils . memory . MemoryUtil ; <nl> import sun . misc . Unsafe ; <nl> import sun . nio . ch . DirectBuffer ; <nl> <nl> @ @ - 329 , 10 + 330 , 10 @ @ public class Memory <nl> int size = ( int ) ( size ( ) / result . length ) ; <nl> for ( int i = 0 ; i < result . length - 1 ; i + + ) <nl> { <nl> - result [ i ] = Native . getDirectByteBuffer ( peer + offset , size ) ; <nl> + result [ i ] = MemoryUtil . getByteBuffer ( peer + offset , size ) ; <nl> offset + = size ; <nl> } <nl> - result [ result . length - 1 ] = Native . getDirectByteBuffer ( peer + offset , ( int ) ( size ( ) - offset ) ) ; <nl> + result [ result . length - 1 ] = MemoryUtil . getByteBuffer ( peer + offset , ( int ) ( size ( ) - offset ) ) ; <nl> return result ; <nl> } <nl> } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java b / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java <nl> index 5f7d410 . . 532d071 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java <nl> + + + b / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java <nl> @ @ - 125 , 6 + 125 , 7 @ @ public abstract class MemoryUtil <nl> unsafe . putLong ( instance , DIRECT _ BYTE _ BUFFER _ ADDRESS _ OFFSET , address ) ; <nl> unsafe . putInt ( instance , DIRECT _ BYTE _ BUFFER _ CAPACITY _ OFFSET , length ) ; <nl> unsafe . putInt ( instance , DIRECT _ BYTE _ BUFFER _ LIMIT _ OFFSET , length ) ; <nl> + instance . order ( ByteOrder . nativeOrder ( ) ) ; <nl> return instance ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / streaming / BootstrapTest . java b / test / unit / org / apache / cassandra / streaming / BootstrapTest . java <nl> index b2d24f4 . . 20313f0 100644 <nl> - - - a / test / unit / org / apache / cassandra / streaming / BootstrapTest . java <nl> + + + b / test / unit / org / apache / cassandra / streaming / BootstrapTest . java <nl> @ @ - 36 , 8 + 36 , 8 @ @ public class BootstrapTest extends SchemaLoader <nl> @ Test <nl> public void testGetNewNames ( ) throws IOException <nl> { <nl> - Descriptor desc = Descriptor . fromFilename ( new File ( " Keyspace1 " , " Keyspace1 - Standard1 - f - 500 - Data . db " ) . toString ( ) ) ; <nl> - assert ! desc . isLatestVersion ; / / deliberately test old version <nl> + Descriptor desc = Descriptor . fromFilename ( new File ( " Keyspace1 " , " Keyspace1 - Standard1 - ia - 500 - Data . db " ) . toString ( ) ) ; <nl> + / / assert ! desc . isLatestVersion ; / / minimum compatible version - - for now it is the latest as well <nl> PendingFile inContext = new PendingFile ( null , desc , " Data . db " , Arrays . asList ( new Pair < Long , Long > ( 0L , 1L ) ) , OperationType . BOOTSTRAP ) ; <nl> <nl> PendingFile outContext = StreamIn . getContextMapping ( inContext ) ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / io / util / Memory . java b / src / java / org / apache / cassandra / io / util / Memory . java 
 index b8a46bc . . 67dee81 100644 
 - - - a / src / java / org / apache / cassandra / io / util / Memory . java 
 + + + b / src / java / org / apache / cassandra / io / util / Memory . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . nio . ByteOrder ; 
 
 import com . sun . jna . Native ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . utils . memory . MemoryUtil ; 
 import sun . misc . Unsafe ; 
 import sun . nio . ch . DirectBuffer ; 
 
 @ @ - 329 , 10 + 330 , 10 @ @ public class Memory 
 int size = ( int ) ( size ( ) / result . length ) ; 
 for ( int i = 0 ; i < result . length - 1 ; i + + ) 
 { 
 - result [ i ] = Native . getDirectByteBuffer ( peer + offset , size ) ; 
 + result [ i ] = MemoryUtil . getByteBuffer ( peer + offset , size ) ; 
 offset + = size ; 
 } 
 - result [ result . length - 1 ] = Native . getDirectByteBuffer ( peer + offset , ( int ) ( size ( ) - offset ) ) ; 
 + result [ result . length - 1 ] = MemoryUtil . getByteBuffer ( peer + offset , ( int ) ( size ( ) - offset ) ) ; 
 return result ; 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java b / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java 
 index 5f7d410 . . 532d071 100644 
 - - - a / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java 
 + + + b / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java 
 @ @ - 125 , 6 + 125 , 7 @ @ public abstract class MemoryUtil 
 unsafe . putLong ( instance , DIRECT _ BYTE _ BUFFER _ ADDRESS _ OFFSET , address ) ; 
 unsafe . putInt ( instance , DIRECT _ BYTE _ BUFFER _ CAPACITY _ OFFSET , length ) ; 
 unsafe . putInt ( instance , DIRECT _ BYTE _ BUFFER _ LIMIT _ OFFSET , length ) ; 
 + instance . order ( ByteOrder . nativeOrder ( ) ) ; 
 return instance ; 
 } 


NEAREST DIFF:
diff - - git a / test / unit / org / apache / cassandra / streaming / BootstrapTest . java b / test / unit / org / apache / cassandra / streaming / BootstrapTest . java 
 index b2d24f4 . . 20313f0 100644 
 - - - a / test / unit / org / apache / cassandra / streaming / BootstrapTest . java 
 + + + b / test / unit / org / apache / cassandra / streaming / BootstrapTest . java 
 @ @ - 36 , 8 + 36 , 8 @ @ public class BootstrapTest extends SchemaLoader 
 @ Test 
 public void testGetNewNames ( ) throws IOException 
 { 
 - Descriptor desc = Descriptor . fromFilename ( new File ( " Keyspace1 " , " Keyspace1 - Standard1 - f - 500 - Data . db " ) . toString ( ) ) ; 
 - assert ! desc . isLatestVersion ; / / deliberately test old version 
 + Descriptor desc = Descriptor . fromFilename ( new File ( " Keyspace1 " , " Keyspace1 - Standard1 - ia - 500 - Data . db " ) . toString ( ) ) ; 
 + / / assert ! desc . isLatestVersion ; / / minimum compatible version - - for now it is the latest as well 
 PendingFile inContext = new PendingFile ( null , desc , " Data . db " , Arrays . asList ( new Pair < Long , Long > ( 0L , 1L ) ) , OperationType . BOOTSTRAP ) ; 
 
 PendingFile outContext = StreamIn . getContextMapping ( inContext ) ;
