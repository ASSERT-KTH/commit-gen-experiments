BLEU SCORE: 0.014265919394432253

TEST MSG: Make EstimatedHistogram # percentile ( ) use ceil instead of floor
GENERATED MSG: fix EH . max . patch by jbellis and brandonwilliams for CASSANDRA - 1413

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 7ce6200 . . 748acf8 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 4 <nl> + * Make EstimatedHistogram # percentile ( ) use ceil instead of floor ( CASSANDRA - 8883 ) <nl> * Fix top partitions reporting wrong cardinality ( CASSANDRA - 8834 ) <nl> * Fix rare NPE in KeyCacheSerializer ( CASSANDRA - 8067 ) <nl> * Pick sstables for validation as late as possible inc repairs ( CASSANDRA - 8366 ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / EstimatedHistogram . java b / src / java / org / apache / cassandra / utils / EstimatedHistogram . java <nl> index 196a3b9 . . a5c51c8 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / EstimatedHistogram . java <nl> + + + b / src / java / org / apache / cassandra / utils / EstimatedHistogram . java <nl> @ @ - 178 , 7 + 178 , 7 @ @ public class EstimatedHistogram <nl> if ( buckets . get ( lastBucket ) > 0 ) <nl> throw new IllegalStateException ( " Unable to compute when histogram overflowed " ) ; <nl> <nl> - long pcount = ( long ) Math . floor ( count ( ) * percentile ) ; <nl> + long pcount = ( long ) Math . ceil ( count ( ) * percentile ) ; <nl> if ( pcount = = 0 ) <nl> return 0 ; <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java b / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java <nl> index bbfd1c7 . . eebaa25 100644 <nl> - - - a / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java <nl> + + + b / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java <nl> @ @ - 75 , 17 + 75 , 49 @ @ public class EstimatedHistogramTest <nl> @ Test <nl> public void testPercentile ( ) <nl> { <nl> - EstimatedHistogram histogram = new EstimatedHistogram ( ) ; <nl> - / / percentile of empty histogram is 0 <nl> - assertEquals ( 0 , histogram . percentile ( 0 . 99 ) ) ; <nl> + { <nl> + EstimatedHistogram histogram = new EstimatedHistogram ( ) ; <nl> + / / percentile of empty histogram is 0 <nl> + assertEquals ( 0 , histogram . percentile ( 0 . 99 ) ) ; <nl> <nl> - histogram . add ( 1 ) ; <nl> - / / percentile of histogram with just one value will return 0 except 100th <nl> - assertEquals ( 0 , histogram . percentile ( 0 . 99 ) ) ; <nl> - assertEquals ( 1 , histogram . percentile ( 1 . 00 ) ) ; <nl> + histogram . add ( 1 ) ; <nl> + / / percentile of a histogram with one element should be that element <nl> + assertEquals ( 1 , histogram . percentile ( 0 . 99 ) ) ; <nl> + <nl> + histogram . add ( 10 ) ; <nl> + assertEquals ( 10 , histogram . percentile ( 0 . 99 ) ) ; <nl> + } <nl> + <nl> + { <nl> + EstimatedHistogram histogram = new EstimatedHistogram ( ) ; <nl> + <nl> + histogram . add ( 1 ) ; <nl> + histogram . add ( 2 ) ; <nl> + histogram . add ( 3 ) ; <nl> + histogram . add ( 4 ) ; <nl> + histogram . add ( 5 ) ; <nl> + <nl> + assertEquals ( 0 , histogram . percentile ( 0 . 00 ) ) ; <nl> + assertEquals ( 3 , histogram . percentile ( 0 . 50 ) ) ; <nl> + assertEquals ( 3 , histogram . percentile ( 0 . 60 ) ) ; <nl> + assertEquals ( 5 , histogram . percentile ( 1 . 00 ) ) ; <nl> + } <nl> + <nl> + { <nl> + EstimatedHistogram histogram = new EstimatedHistogram ( ) ; <nl> + <nl> + for ( int i = 11 ; i < = 20 ; i + + ) <nl> + histogram . add ( i ) ; <nl> <nl> - histogram . add ( 10 ) ; <nl> - assertEquals ( 1 , histogram . percentile ( 0 . 99 ) ) ; <nl> - assertEquals ( 10 , histogram . percentile ( 1 . 00 ) ) ; <nl> + / / Right now the histogram looks like : <nl> + / / 10 12 14 17 20 <nl> + / / 0 2 2 3 3 <nl> + / / % : 0 20 40 70 100 <nl> + assertEquals ( 12 , histogram . percentile ( 0 . 01 ) ) ; <nl> + assertEquals ( 14 , histogram . percentile ( 0 . 30 ) ) ; <nl> + assertEquals ( 17 , histogram . percentile ( 0 . 50 ) ) ; <nl> + assertEquals ( 17 , histogram . percentile ( 0 . 60 ) ) ; <nl> + assertEquals ( 20 , histogram . percentile ( 0 . 80 ) ) ; <nl> + } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b7243ff . . 7abf402 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 35 , 6 + 35 , 7 @ @ dev <nl> * fix using DynamicEndpointSnitch with NetworkTopologyStrategy <nl> ( CASSANDRA - 1429 ) <nl> * Add CfDef . default _ validation _ class ( CASSANDRA - 891 ) <nl> + * fix EstimatedHistogram . max ( CASSANDRA - 1413 ) <nl> <nl> <nl> 0 . 7 - beta1 <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTable . java b / src / java / org / apache / cassandra / io / sstable / SSTable . java <nl> index 03aea64 . . 86b5592 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTable . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTable . java <nl> @ @ - 64 , 8 + 64 , 8 @ @ public abstract class SSTable <nl> public static final String TEMPFILE _ MARKER = " tmp " ; <nl> <nl> public static List < String > components = Collections . unmodifiableList ( Arrays . asList ( COMPONENT _ FILTER , COMPONENT _ INDEX , COMPONENT _ DATA ) ) ; <nl> - protected EstimatedHistogram estimatedRowSize = new EstimatedHistogram ( 130 ) ; <nl> - protected EstimatedHistogram estimatedColumnCount = new EstimatedHistogram ( 112 ) ; <nl> + protected EstimatedHistogram estimatedRowSize = new EstimatedHistogram ( 150 ) ; <nl> + protected EstimatedHistogram estimatedColumnCount = new EstimatedHistogram ( 114 ) ; <nl> <nl> protected SSTable ( String filename , CFMetaData metadata , IPartitioner partitioner ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / utils / EstimatedHistogram . java b / src / java / org / apache / cassandra / utils / EstimatedHistogram . java <nl> index d2b7ec0 . . bb36059 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / EstimatedHistogram . java <nl> + + + b / src / java / org / apache / cassandra / utils / EstimatedHistogram . java <nl> @ @ - 40 , 8 + 40 , 7 @ @ public class EstimatedHistogram <nl> <nl> public EstimatedHistogram ( ) <nl> { <nl> - makeOffsets ( 90 ) ; <nl> - buckets = new AtomicLongArray ( numBuckets ) ; <nl> + this ( 90 ) ; <nl> } <nl> <nl> public EstimatedHistogram ( int bucketCount ) <nl> @ @ - 118 , 10 + 117 , 14 @ @ public class EstimatedHistogram <nl> <nl> public long max ( ) <nl> { <nl> - for ( int i = numBuckets - 1 ; i > = 0 ; i - - ) <nl> + int lastBucket = numBuckets - 1 ; <nl> + if ( buckets . get ( lastBucket ) > 0 ) <nl> + throw new IllegalStateException ( " Unable to compute ceiling for max when all buckets are full " ) ; <nl> + <nl> + for ( int i = lastBucket - 1 ; i > = 0 ; i - - ) <nl> { <nl> if ( buckets . get ( i ) > 0 ) <nl> - return bucketOffsets [ i = = 0 ? 0 : i - 1 ] ; <nl> + return bucketOffsets [ i ] ; <nl> } <nl> return 0 ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java b / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java <nl> index c99d921 . . 4bb1652 100644 <nl> - - - a / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java <nl> + + + b / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java <nl> @ @ - 33 , 8 + 33 , 8 @ @ public class EstimatedHistogramTest <nl> histogram . add ( 0L ) ; <nl> assertEquals ( 1 , histogram . get ( false ) [ 0 ] ) ; <nl> <nl> - histogram . add ( 33282687 ) ; <nl> - assertEquals ( 1 , histogram . get ( false ) [ histogram . buckets . length ( ) - 1 ] ) ; <nl> + histogram . add ( 23282687 ) ; <nl> + assertEquals ( 1 , histogram . get ( false ) [ histogram . buckets . length ( ) - 2 ] ) ; <nl> <nl> histogram . add ( 1 ) ; <nl> assertEquals ( 1 , histogram . get ( false ) [ 1 ] ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 7ce6200 . . 748acf8 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 4 
 + * Make EstimatedHistogram # percentile ( ) use ceil instead of floor ( CASSANDRA - 8883 ) 
 * Fix top partitions reporting wrong cardinality ( CASSANDRA - 8834 ) 
 * Fix rare NPE in KeyCacheSerializer ( CASSANDRA - 8067 ) 
 * Pick sstables for validation as late as possible inc repairs ( CASSANDRA - 8366 ) 
 diff - - git a / src / java / org / apache / cassandra / utils / EstimatedHistogram . java b / src / java / org / apache / cassandra / utils / EstimatedHistogram . java 
 index 196a3b9 . . a5c51c8 100644 
 - - - a / src / java / org / apache / cassandra / utils / EstimatedHistogram . java 
 + + + b / src / java / org / apache / cassandra / utils / EstimatedHistogram . java 
 @ @ - 178 , 7 + 178 , 7 @ @ public class EstimatedHistogram 
 if ( buckets . get ( lastBucket ) > 0 ) 
 throw new IllegalStateException ( " Unable to compute when histogram overflowed " ) ; 
 
 - long pcount = ( long ) Math . floor ( count ( ) * percentile ) ; 
 + long pcount = ( long ) Math . ceil ( count ( ) * percentile ) ; 
 if ( pcount = = 0 ) 
 return 0 ; 
 
 diff - - git a / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java b / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java 
 index bbfd1c7 . . eebaa25 100644 
 - - - a / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java 
 + + + b / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java 
 @ @ - 75 , 17 + 75 , 49 @ @ public class EstimatedHistogramTest 
 @ Test 
 public void testPercentile ( ) 
 { 
 - EstimatedHistogram histogram = new EstimatedHistogram ( ) ; 
 - / / percentile of empty histogram is 0 
 - assertEquals ( 0 , histogram . percentile ( 0 . 99 ) ) ; 
 + { 
 + EstimatedHistogram histogram = new EstimatedHistogram ( ) ; 
 + / / percentile of empty histogram is 0 
 + assertEquals ( 0 , histogram . percentile ( 0 . 99 ) ) ; 
 
 - histogram . add ( 1 ) ; 
 - / / percentile of histogram with just one value will return 0 except 100th 
 - assertEquals ( 0 , histogram . percentile ( 0 . 99 ) ) ; 
 - assertEquals ( 1 , histogram . percentile ( 1 . 00 ) ) ; 
 + histogram . add ( 1 ) ; 
 + / / percentile of a histogram with one element should be that element 
 + assertEquals ( 1 , histogram . percentile ( 0 . 99 ) ) ; 
 + 
 + histogram . add ( 10 ) ; 
 + assertEquals ( 10 , histogram . percentile ( 0 . 99 ) ) ; 
 + } 
 + 
 + { 
 + EstimatedHistogram histogram = new EstimatedHistogram ( ) ; 
 + 
 + histogram . add ( 1 ) ; 
 + histogram . add ( 2 ) ; 
 + histogram . add ( 3 ) ; 
 + histogram . add ( 4 ) ; 
 + histogram . add ( 5 ) ; 
 + 
 + assertEquals ( 0 , histogram . percentile ( 0 . 00 ) ) ; 
 + assertEquals ( 3 , histogram . percentile ( 0 . 50 ) ) ; 
 + assertEquals ( 3 , histogram . percentile ( 0 . 60 ) ) ; 
 + assertEquals ( 5 , histogram . percentile ( 1 . 00 ) ) ; 
 + } 
 + 
 + { 
 + EstimatedHistogram histogram = new EstimatedHistogram ( ) ; 
 + 
 + for ( int i = 11 ; i < = 20 ; i + + ) 
 + histogram . add ( i ) ; 
 
 - histogram . add ( 10 ) ; 
 - assertEquals ( 1 , histogram . percentile ( 0 . 99 ) ) ; 
 - assertEquals ( 10 , histogram . percentile ( 1 . 00 ) ) ; 
 + / / Right now the histogram looks like : 
 + / / 10 12 14 17 20 
 + / / 0 2 2 3 3 
 + / / % : 0 20 40 70 100 
 + assertEquals ( 12 , histogram . percentile ( 0 . 01 ) ) ; 
 + assertEquals ( 14 , histogram . percentile ( 0 . 30 ) ) ; 
 + assertEquals ( 17 , histogram . percentile ( 0 . 50 ) ) ; 
 + assertEquals ( 17 , histogram . percentile ( 0 . 60 ) ) ; 
 + assertEquals ( 20 , histogram . percentile ( 0 . 80 ) ) ; 
 + } 
 } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b7243ff . . 7abf402 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 35 , 6 + 35 , 7 @ @ dev 
 * fix using DynamicEndpointSnitch with NetworkTopologyStrategy 
 ( CASSANDRA - 1429 ) 
 * Add CfDef . default _ validation _ class ( CASSANDRA - 891 ) 
 + * fix EstimatedHistogram . max ( CASSANDRA - 1413 ) 
 
 
 0 . 7 - beta1 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTable . java b / src / java / org / apache / cassandra / io / sstable / SSTable . java 
 index 03aea64 . . 86b5592 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTable . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTable . java 
 @ @ - 64 , 8 + 64 , 8 @ @ public abstract class SSTable 
 public static final String TEMPFILE _ MARKER = " tmp " ; 
 
 public static List < String > components = Collections . unmodifiableList ( Arrays . asList ( COMPONENT _ FILTER , COMPONENT _ INDEX , COMPONENT _ DATA ) ) ; 
 - protected EstimatedHistogram estimatedRowSize = new EstimatedHistogram ( 130 ) ; 
 - protected EstimatedHistogram estimatedColumnCount = new EstimatedHistogram ( 112 ) ; 
 + protected EstimatedHistogram estimatedRowSize = new EstimatedHistogram ( 150 ) ; 
 + protected EstimatedHistogram estimatedColumnCount = new EstimatedHistogram ( 114 ) ; 
 
 protected SSTable ( String filename , CFMetaData metadata , IPartitioner partitioner ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / utils / EstimatedHistogram . java b / src / java / org / apache / cassandra / utils / EstimatedHistogram . java 
 index d2b7ec0 . . bb36059 100644 
 - - - a / src / java / org / apache / cassandra / utils / EstimatedHistogram . java 
 + + + b / src / java / org / apache / cassandra / utils / EstimatedHistogram . java 
 @ @ - 40 , 8 + 40 , 7 @ @ public class EstimatedHistogram 
 
 public EstimatedHistogram ( ) 
 { 
 - makeOffsets ( 90 ) ; 
 - buckets = new AtomicLongArray ( numBuckets ) ; 
 + this ( 90 ) ; 
 } 
 
 public EstimatedHistogram ( int bucketCount ) 
 @ @ - 118 , 10 + 117 , 14 @ @ public class EstimatedHistogram 
 
 public long max ( ) 
 { 
 - for ( int i = numBuckets - 1 ; i > = 0 ; i - - ) 
 + int lastBucket = numBuckets - 1 ; 
 + if ( buckets . get ( lastBucket ) > 0 ) 
 + throw new IllegalStateException ( " Unable to compute ceiling for max when all buckets are full " ) ; 
 + 
 + for ( int i = lastBucket - 1 ; i > = 0 ; i - - ) 
 { 
 if ( buckets . get ( i ) > 0 ) 
 - return bucketOffsets [ i = = 0 ? 0 : i - 1 ] ; 
 + return bucketOffsets [ i ] ; 
 } 
 return 0 ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java b / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java 
 index c99d921 . . 4bb1652 100644 
 - - - a / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java 
 + + + b / test / unit / org / apache / cassandra / utils / EstimatedHistogramTest . java 
 @ @ - 33 , 8 + 33 , 8 @ @ public class EstimatedHistogramTest 
 histogram . add ( 0L ) ; 
 assertEquals ( 1 , histogram . get ( false ) [ 0 ] ) ; 
 
 - histogram . add ( 33282687 ) ; 
 - assertEquals ( 1 , histogram . get ( false ) [ histogram . buckets . length ( ) - 1 ] ) ; 
 + histogram . add ( 23282687 ) ; 
 + assertEquals ( 1 , histogram . get ( false ) [ histogram . buckets . length ( ) - 2 ] ) ; 
 
 histogram . add ( 1 ) ; 
 assertEquals ( 1 , histogram . get ( false ) [ 1 ] ) ;
