BLEU SCORE: 0.12549310621989482

TEST MSG: Update news / version for 2 . 1 . 1
GENERATED MSG: Versions for 1 . 2 . 9 release

TEST DIFF (one line): diff - - git a / NEWS . txt b / NEWS . txt <nl> index 50b9c7e . . ecdb47e 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 16 , 6 + 16 , 11 @ @ using the provided ' sstableupgrade ' tool . <nl> 2 . 1 . 1 <nl> = = = = = <nl> <nl> + Upgrading <nl> + - - - - - - - - - <nl> + - Nothing specific to this release , but please see 2 . 1 if you are upgrading <nl> + from a previous version . <nl> + <nl> New features <nl> - - - - - - - - - - - - <nl> - Netty support for epoll on linux is now enabled . If for some <nl> diff - - git a / debian / changelog b / debian / changelog <nl> index f2ecceb . . 4e240eb 100644 <nl> - - - a / debian / changelog <nl> + + + b / debian / changelog <nl> @ @ - 1 , 3 + 1 , 9 @ @ <nl> + cassandra ( 2 . 1 . 1 ) unstable ; urgency = medium <nl> + <nl> + * New release <nl> + <nl> + - - Sylvain Lebresne < slebresne @ apache . org > Fri , 17 Oct 2014 13 : 43 : 46 + 0200 <nl> + <nl> cassandra ( 2 . 1 . 0 ) unstable ; urgency = medium <nl> <nl> * New release
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index afb0836 . . 13b4214 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 3 + 1 , 7 @ @ <nl> + 1 . 2 . 10 <nl> + * Allow disabling SlabAllocator ( CASSANDRA - 5935 ) <nl> + <nl> + <nl> 1 . 2 . 9 <nl> * Fix getBloomFilterDiskSpaceUsed for AlwaysPresentFilter ( CASSANDRA - 5900 ) <nl> * migrate 1 . 1 schema _ columnfamilies . key _ alias column to key _ aliases <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index 7fbd019 . . 74b941d 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 170 , 6 + 170 , 8 @ @ public class Config <nl> <nl> public boolean inter _ dc _ tcp _ nodelay = true ; <nl> <nl> + public String memtable _ allocator = " SlabAllocator " ; <nl> + <nl> private static boolean loadYaml = true ; <nl> private static boolean outboundBindAny = false ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index c1ced94 . . 1412888 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 51 , 6 + 51 , 7 @ @ import org . apache . cassandra . scheduler . IRequestScheduler ; <nl> import org . apache . cassandra . scheduler . NoScheduler ; <nl> import org . apache . cassandra . service . CacheService ; <nl> import org . apache . cassandra . service . MigrationManager ; <nl> + import org . apache . cassandra . utils . Allocator ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . yaml . snakeyaml . Loader ; <nl> import org . yaml . snakeyaml . TypeDescription ; <nl> @ @ - 91 , 6 + 92 , 8 @ @ public class DatabaseDescriptor <nl> private static String localDC ; <nl> private static Comparator < InetAddress > localComparator ; <nl> <nl> + private static Class < ? extends Allocator > memtableAllocator ; <nl> + <nl> / * * <nl> * Inspect the classpath to find storage configuration file <nl> * / <nl> @ @ - 467 , 6 + 470 , 11 @ @ public class DatabaseDescriptor <nl> conf . server _ encryption _ options = conf . encryption _ options ; <nl> } <nl> <nl> + String allocatorClass = conf . memtable _ allocator ; <nl> + if ( ! allocatorClass . contains ( " . " ) ) <nl> + allocatorClass = " org . apache . cassandra . utils . " + allocatorClass ; <nl> + memtableAllocator = FBUtilities . classForName ( allocatorClass , " allocator " ) ; <nl> + <nl> / / Hardcoded system tables <nl> List < KSMetaData > systemKeyspaces = Arrays . asList ( KSMetaData . systemKeyspace ( ) , KSMetaData . traceKeyspace ( ) ) ; <nl> assert systemKeyspaces . size ( ) = = Schema . systemKeyspaceNames . size ( ) ; <nl> @ @ - 1286 , 4 + 1294 , 20 @ @ public class DatabaseDescriptor <nl> { <nl> return conf . inter _ dc _ tcp _ nodelay ; <nl> } <nl> + <nl> + public static Allocator getMemtableAllocator ( ) <nl> + { <nl> + try <nl> + { <nl> + return memtableAllocator . newInstance ( ) ; <nl> + } <nl> + catch ( InstantiationException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + catch ( IllegalAccessException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java <nl> index 282acd2 . . df06cfb 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Memtable . java <nl> + + + b / src / java / org / apache / cassandra / db / Memtable . java <nl> @ @ - 25 , 30 + 25 , 29 @ @ import java . util . concurrent . atomic . AtomicLong ; <nl> <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Throwables ; <nl> - <nl> - import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; <nl> - import org . apache . cassandra . concurrent . StageManager ; <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - import org . apache . cassandra . db . index . SecondaryIndexManager ; <nl> - import org . apache . cassandra . io . util . DiskAwareRunnable ; <nl> import org . cliffc . high _ scale _ lib . NonBlockingHashSet ; <nl> - import org . github . jamm . MemoryMeter ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; <nl> + import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; <nl> import org . apache . cassandra . concurrent . NamedThreadFactory ; <nl> + import org . apache . cassandra . concurrent . StageManager ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . columniterator . OnDiskAtomIterator ; <nl> import org . apache . cassandra . db . columniterator . SimpleAbstractColumnIterator ; <nl> import org . apache . cassandra . db . commitlog . ReplayPosition ; <nl> import org . apache . cassandra . db . filter . AbstractColumnIterator ; <nl> import org . apache . cassandra . db . filter . NamesQueryFilter ; <nl> import org . apache . cassandra . db . filter . SliceQueryFilter ; <nl> + import org . apache . cassandra . db . index . SecondaryIndexManager ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . io . sstable . SSTableMetadata ; <nl> import org . apache . cassandra . io . sstable . SSTableReader ; <nl> import org . apache . cassandra . io . sstable . SSTableWriter ; <nl> - import org . apache . cassandra . utils . SlabAllocator ; <nl> + import org . apache . cassandra . io . util . DiskAwareRunnable ; <nl> + import org . apache . cassandra . utils . Allocator ; <nl> + import org . github . jamm . MemoryMeter ; <nl> <nl> public class Memtable <nl> { <nl> @ @ - 114 , 7 + 113 , 7 @ @ public class Memtable <nl> public final ColumnFamilyStore cfs ; <nl> private final long creationTime ; <nl> <nl> - private final SlabAllocator allocator = new SlabAllocator ( ) ; <nl> + private final Allocator allocator = DatabaseDescriptor . getMemtableAllocator ( ) ; <nl> / / We really only need one column by allocator but one by memtable is not a big waste and avoids needing allocators to know about CFS <nl> private final Function < IColumn , IColumn > localCopyFunction = new Function < IColumn , IColumn > ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / utils / Allocator . java b / src / java / org / apache / cassandra / utils / Allocator . java <nl> index e9679eb . . d11815d 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / Allocator . java <nl> + + + b / src / java / org / apache / cassandra / utils / Allocator . java <nl> @ @ - 36 , 4 + 36 , 8 @ @ public abstract class Allocator <nl> } <nl> <nl> public abstract ByteBuffer allocate ( int size ) ; <nl> + <nl> + public abstract long getMinimumSize ( ) ; <nl> + <nl> + public abstract long getMaximumSize ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / HeapAllocator . java b / src / java / org / apache / cassandra / utils / HeapAllocator . java <nl> index ce8e448 . . efe55dd 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / HeapAllocator . java <nl> + + + b / src / java / org / apache / cassandra / utils / HeapAllocator . java <nl> @ @ - 23 , 10 + 23 , 24 @ @ public final class HeapAllocator extends Allocator <nl> { <nl> public static final HeapAllocator instance = new HeapAllocator ( ) ; <nl> <nl> - private HeapAllocator ( ) { } <nl> + / * * <nl> + * Normally you should use HeapAllocator . instance , since there is no per - Allocator state . <nl> + * This is exposed so that the reflection done by Memtable works when SlabAllocator is disabled . <nl> + * / <nl> + public HeapAllocator ( ) { } <nl> <nl> public ByteBuffer allocate ( int size ) <nl> { <nl> return ByteBuffer . allocate ( size ) ; <nl> } <nl> + <nl> + public long getMinimumSize ( ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + <nl> + public long getMaximumSize ( ) <nl> + { <nl> + return Long . MAX _ VALUE ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / NEWS . txt b / NEWS . txt 
 index 50b9c7e . . ecdb47e 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 16 , 6 + 16 , 11 @ @ using the provided ' sstableupgrade ' tool . 
 2 . 1 . 1 
 = = = = = 
 
 + Upgrading 
 + - - - - - - - - - 
 + - Nothing specific to this release , but please see 2 . 1 if you are upgrading 
 + from a previous version . 
 + 
 New features 
 - - - - - - - - - - - - 
 - Netty support for epoll on linux is now enabled . If for some 
 diff - - git a / debian / changelog b / debian / changelog 
 index f2ecceb . . 4e240eb 100644 
 - - - a / debian / changelog 
 + + + b / debian / changelog 
 @ @ - 1 , 3 + 1 , 9 @ @ 
 + cassandra ( 2 . 1 . 1 ) unstable ; urgency = medium 
 + 
 + * New release 
 + 
 + - - Sylvain Lebresne < slebresne @ apache . org > Fri , 17 Oct 2014 13 : 43 : 46 + 0200 
 + 
 cassandra ( 2 . 1 . 0 ) unstable ; urgency = medium 
 
 * New release

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index afb0836 . . 13b4214 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 3 + 1 , 7 @ @ 
 + 1 . 2 . 10 
 + * Allow disabling SlabAllocator ( CASSANDRA - 5935 ) 
 + 
 + 
 1 . 2 . 9 
 * Fix getBloomFilterDiskSpaceUsed for AlwaysPresentFilter ( CASSANDRA - 5900 ) 
 * migrate 1 . 1 schema _ columnfamilies . key _ alias column to key _ aliases 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index 7fbd019 . . 74b941d 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 170 , 6 + 170 , 8 @ @ public class Config 
 
 public boolean inter _ dc _ tcp _ nodelay = true ; 
 
 + public String memtable _ allocator = " SlabAllocator " ; 
 + 
 private static boolean loadYaml = true ; 
 private static boolean outboundBindAny = false ; 
 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index c1ced94 . . 1412888 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 51 , 6 + 51 , 7 @ @ import org . apache . cassandra . scheduler . IRequestScheduler ; 
 import org . apache . cassandra . scheduler . NoScheduler ; 
 import org . apache . cassandra . service . CacheService ; 
 import org . apache . cassandra . service . MigrationManager ; 
 + import org . apache . cassandra . utils . Allocator ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . yaml . snakeyaml . Loader ; 
 import org . yaml . snakeyaml . TypeDescription ; 
 @ @ - 91 , 6 + 92 , 8 @ @ public class DatabaseDescriptor 
 private static String localDC ; 
 private static Comparator < InetAddress > localComparator ; 
 
 + private static Class < ? extends Allocator > memtableAllocator ; 
 + 
 / * * 
 * Inspect the classpath to find storage configuration file 
 * / 
 @ @ - 467 , 6 + 470 , 11 @ @ public class DatabaseDescriptor 
 conf . server _ encryption _ options = conf . encryption _ options ; 
 } 
 
 + String allocatorClass = conf . memtable _ allocator ; 
 + if ( ! allocatorClass . contains ( " . " ) ) 
 + allocatorClass = " org . apache . cassandra . utils . " + allocatorClass ; 
 + memtableAllocator = FBUtilities . classForName ( allocatorClass , " allocator " ) ; 
 + 
 / / Hardcoded system tables 
 List < KSMetaData > systemKeyspaces = Arrays . asList ( KSMetaData . systemKeyspace ( ) , KSMetaData . traceKeyspace ( ) ) ; 
 assert systemKeyspaces . size ( ) = = Schema . systemKeyspaceNames . size ( ) ; 
 @ @ - 1286 , 4 + 1294 , 20 @ @ public class DatabaseDescriptor 
 { 
 return conf . inter _ dc _ tcp _ nodelay ; 
 } 
 + 
 + public static Allocator getMemtableAllocator ( ) 
 + { 
 + try 
 + { 
 + return memtableAllocator . newInstance ( ) ; 
 + } 
 + catch ( InstantiationException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + catch ( IllegalAccessException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java 
 index 282acd2 . . df06cfb 100644 
 - - - a / src / java / org / apache / cassandra / db / Memtable . java 
 + + + b / src / java / org / apache / cassandra / db / Memtable . java 
 @ @ - 25 , 30 + 25 , 29 @ @ import java . util . concurrent . atomic . AtomicLong ; 
 
 import com . google . common . base . Function ; 
 import com . google . common . base . Throwables ; 
 - 
 - import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; 
 - import org . apache . cassandra . concurrent . StageManager ; 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 - import org . apache . cassandra . db . index . SecondaryIndexManager ; 
 - import org . apache . cassandra . io . util . DiskAwareRunnable ; 
 import org . cliffc . high _ scale _ lib . NonBlockingHashSet ; 
 - import org . github . jamm . MemoryMeter ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; 
 + import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; 
 import org . apache . cassandra . concurrent . NamedThreadFactory ; 
 + import org . apache . cassandra . concurrent . StageManager ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . columniterator . OnDiskAtomIterator ; 
 import org . apache . cassandra . db . columniterator . SimpleAbstractColumnIterator ; 
 import org . apache . cassandra . db . commitlog . ReplayPosition ; 
 import org . apache . cassandra . db . filter . AbstractColumnIterator ; 
 import org . apache . cassandra . db . filter . NamesQueryFilter ; 
 import org . apache . cassandra . db . filter . SliceQueryFilter ; 
 + import org . apache . cassandra . db . index . SecondaryIndexManager ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . io . sstable . SSTableMetadata ; 
 import org . apache . cassandra . io . sstable . SSTableReader ; 
 import org . apache . cassandra . io . sstable . SSTableWriter ; 
 - import org . apache . cassandra . utils . SlabAllocator ; 
 + import org . apache . cassandra . io . util . DiskAwareRunnable ; 
 + import org . apache . cassandra . utils . Allocator ; 
 + import org . github . jamm . MemoryMeter ; 
 
 public class Memtable 
 { 
 @ @ - 114 , 7 + 113 , 7 @ @ public class Memtable 
 public final ColumnFamilyStore cfs ; 
 private final long creationTime ; 
 
 - private final SlabAllocator allocator = new SlabAllocator ( ) ; 
 + private final Allocator allocator = DatabaseDescriptor . getMemtableAllocator ( ) ; 
 / / We really only need one column by allocator but one by memtable is not a big waste and avoids needing allocators to know about CFS 
 private final Function < IColumn , IColumn > localCopyFunction = new Function < IColumn , IColumn > ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / utils / Allocator . java b / src / java / org / apache / cassandra / utils / Allocator . java 
 index e9679eb . . d11815d 100644 
 - - - a / src / java / org / apache / cassandra / utils / Allocator . java 
 + + + b / src / java / org / apache / cassandra / utils / Allocator . java 
 @ @ - 36 , 4 + 36 , 8 @ @ public abstract class Allocator 
 } 
 
 public abstract ByteBuffer allocate ( int size ) ; 
 + 
 + public abstract long getMinimumSize ( ) ; 
 + 
 + public abstract long getMaximumSize ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / HeapAllocator . java b / src / java / org / apache / cassandra / utils / HeapAllocator . java 
 index ce8e448 . . efe55dd 100644 
 - - - a / src / java / org / apache / cassandra / utils / HeapAllocator . java 
 + + + b / src / java / org / apache / cassandra / utils / HeapAllocator . java 
 @ @ - 23 , 10 + 23 , 24 @ @ public final class HeapAllocator extends Allocator 
 { 
 public static final HeapAllocator instance = new HeapAllocator ( ) ; 
 
 - private HeapAllocator ( ) { } 
 + / * * 
 + * Normally you should use HeapAllocator . instance , since there is no per - Allocator state . 
 + * This is exposed so that the reflection done by Memtable works when SlabAllocator is disabled . 
 + * / 
 + public HeapAllocator ( ) { } 
 
 public ByteBuffer allocate ( int size ) 
 { 
 return ByteBuffer . allocate ( size ) ; 
 } 
 + 
 + public long getMinimumSize ( ) 
 + { 
 + return 0 ; 
 + } 
 + 
 + public long getMaximumSize ( ) 
 + { 
 + return Long . MAX _ VALUE ; 
 + } 
 }
