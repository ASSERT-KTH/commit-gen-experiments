BLEU SCORE: 0.05522397783539471

TEST MSG: Make waiting for leveling more robust in LeveledCompactionStrategyTest
GENERATED MSG: Fix LeveledCompactionStrategyTest # testMutateLevel

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java b / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java <nl> index cb9cbb4 . . 7d33c11 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java <nl> @ @ - 119 , 10 + 119 , 29 @ @ public class LeveledCompactionStrategyTest extends SchemaLoader <nl> * / <nl> private void waitForLeveling ( ColumnFamilyStore cfs ) throws InterruptedException <nl> { <nl> - WrappingCompactionStrategy strategy = ( WrappingCompactionStrategy ) cfs . getCompactionStrategy ( ) ; <nl> - / / L0 is the lowest priority , so when that ' s done , we know everything is done <nl> - while ( strategy . getSSTableCountPerLevel ( ) [ 0 ] > 1 ) <nl> + WrappingCompactionStrategy strategyManager = ( WrappingCompactionStrategy ) cfs . getCompactionStrategy ( ) ; <nl> + while ( true ) <nl> + { <nl> + / / since we run several compaction strategies we wait until L0 in all strategies is empty and <nl> + / / atleast one L1 + is non - empty . In these tests we always run a single data directory with only unrepaired data <nl> + / / so it should be good enough <nl> + boolean allL0Empty = true ; <nl> + boolean anyL1NonEmpty = false ; <nl> + for ( AbstractCompactionStrategy strategy : strategyManager . getWrappedStrategies ( ) ) <nl> + { <nl> + if ( ! ( strategy instanceof LeveledCompactionStrategy ) ) <nl> + return ; <nl> + / / note that we check > 1 here , if there is too little data in L0 , we don ' t compact it up to L1 <nl> + if ( ( ( LeveledCompactionStrategy ) strategy ) . getLevelSize ( 0 ) > 1 ) <nl> + allL0Empty = false ; <nl> + for ( int i = 1 ; i < 5 ; i + + ) <nl> + if ( ( ( LeveledCompactionStrategy ) strategy ) . getLevelSize ( i ) > 0 ) <nl> + anyL1NonEmpty = true ; <nl> + } <nl> + if ( allL0Empty & & anyL1NonEmpty ) <nl> + return ; <nl> Thread . sleep ( 100 ) ; <nl> + } <nl> } <nl> <nl> @ Test
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java b / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java 
 index cb9cbb4 . . 7d33c11 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java 
 @ @ - 119 , 10 + 119 , 29 @ @ public class LeveledCompactionStrategyTest extends SchemaLoader 
 * / 
 private void waitForLeveling ( ColumnFamilyStore cfs ) throws InterruptedException 
 { 
 - WrappingCompactionStrategy strategy = ( WrappingCompactionStrategy ) cfs . getCompactionStrategy ( ) ; 
 - / / L0 is the lowest priority , so when that ' s done , we know everything is done 
 - while ( strategy . getSSTableCountPerLevel ( ) [ 0 ] > 1 ) 
 + WrappingCompactionStrategy strategyManager = ( WrappingCompactionStrategy ) cfs . getCompactionStrategy ( ) ; 
 + while ( true ) 
 + { 
 + / / since we run several compaction strategies we wait until L0 in all strategies is empty and 
 + / / atleast one L1 + is non - empty . In these tests we always run a single data directory with only unrepaired data 
 + / / so it should be good enough 
 + boolean allL0Empty = true ; 
 + boolean anyL1NonEmpty = false ; 
 + for ( AbstractCompactionStrategy strategy : strategyManager . getWrappedStrategies ( ) ) 
 + { 
 + if ( ! ( strategy instanceof LeveledCompactionStrategy ) ) 
 + return ; 
 + / / note that we check > 1 here , if there is too little data in L0 , we don ' t compact it up to L1 
 + if ( ( ( LeveledCompactionStrategy ) strategy ) . getLevelSize ( 0 ) > 1 ) 
 + allL0Empty = false ; 
 + for ( int i = 1 ; i < 5 ; i + + ) 
 + if ( ( ( LeveledCompactionStrategy ) strategy ) . getLevelSize ( i ) > 0 ) 
 + anyL1NonEmpty = true ; 
 + } 
 + if ( allL0Empty & & anyL1NonEmpty ) 
 + return ; 
 Thread . sleep ( 100 ) ; 
 + } 
 } 
 
 @ Test

NEAREST DIFF:
ELIMINATEDSENTENCE
